
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00013f4c  081002a0  081002a0  000102a0  2**4
=======
  1 .text         0001023c  081002a0  081002a0  000102a0  2**4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
<<<<<<< HEAD
  2 .rodata       00001194  081141f0  081141f0  000241f0  2**3
=======
  2 .rodata       00000cd0  081104e0  081104e0  000204e0  2**3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  3 .ARM          00000008  08115384  08115384  00025384  2**2
=======
  3 .ARM          00000008  081111b0  081111b0  000211b0  2**2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  4 .init_array   0000000c  0811538c  0811538c  0002538c  2**2
=======
  4 .init_array   0000000c  081111b8  081111b8  000211b8  2**2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  5 .fini_array   00000008  08115398  08115398  00025398  2**2
=======
  5 .fini_array   00000008  081111c4  081111c4  000211c4  2**2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  6 .data         00000214  10000000  081153a0  00030000  2**2
=======
  6 .data         00000204  10000000  081111cc  00030000  2**2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  7 .bss          00046464  10000214  081155b4  00030214  2**2
=======
  7 .bss          00009dd4  10000204  081113d0  00030204  2**2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  ALLOC
<<<<<<< HEAD
  8 ._user_heap_stack 00000600  10046678  081155b4  00036678  2**0
=======
  8 ._user_heap_stack 00000600  10009fd8  081113d0  00039fd8  2**0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  ALLOC
<<<<<<< HEAD
  9 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
=======
  9 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  CONTENTS, READONLY
<<<<<<< HEAD
 10 .debug_info   0009adda  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000e813  00000000  00000000  000cb01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c70  00000000  00000000  000d9838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002898  00000000  00000000  000dc4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004eb04  00000000  00000000  000ded40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000468aa  00000000  00000000  0012d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001ac8f5  00000000  00000000  001740ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  003209e3  2**0
=======
 10 .debug_info   0006ac67  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b481  00000000  00000000  0009ae9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002878  00000000  00000000  000a6320  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002500  00000000  00000000  000a8b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004b7f3  00000000  00000000  000ab098  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003447f  00000000  00000000  000f688b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001aa32c  00000000  00000000  0012ad0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002d5036  2**0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                  CONTENTS, READONLY
<<<<<<< HEAD
 18 .debug_frame  0000d044  00000000  00000000  00320a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
=======
 18 .debug_frame  0000b9cc  00000000  00000000  002d50b4  2**2
                  CONTENTS, READONLY, DEBUGGING
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 81002b8:	10000214 	.word	0x10000214
=======
 81002b8:	10000204 	.word	0x10000204
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
 81002bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 81002c0:	081141d4 	.word	0x081141d4
=======
 81002c0:	081104c4 	.word	0x081104c4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 81002d8:	10000218 	.word	0x10000218
 81002dc:	081141d4 	.word	0x081141d4
=======
 81002d8:	10000208 	.word	0x10000208
 81002dc:	081104c4 	.word	0x081104c4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2f>:
 8100cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100ce0:	bf24      	itt	cs
 8100ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cea:	d90d      	bls.n	8100d08 <__aeabi_d2f+0x30>
 8100cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d00:	bf08      	it	eq
 8100d02:	f020 0001 	biceq.w	r0, r0, #1
 8100d06:	4770      	bx	lr
 8100d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d0c:	d121      	bne.n	8100d52 <__aeabi_d2f+0x7a>
 8100d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d12:	bfbc      	itt	lt
 8100d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d18:	4770      	bxlt	lr
 8100d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d22:	f1c2 0218 	rsb	r2, r2, #24
 8100d26:	f1c2 0c20 	rsb	ip, r2, #32
 8100d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d32:	bf18      	it	ne
 8100d34:	f040 0001 	orrne.w	r0, r0, #1
 8100d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d44:	ea40 000c 	orr.w	r0, r0, ip
 8100d48:	fa23 f302 	lsr.w	r3, r3, r2
 8100d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d50:	e7cc      	b.n	8100cec <__aeabi_d2f+0x14>
 8100d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d56:	d107      	bne.n	8100d68 <__aeabi_d2f+0x90>
 8100d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d5c:	bf1e      	ittt	ne
 8100d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d66:	4770      	bxne	lr
 8100d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d74:	4770      	bx	lr
 8100d76:	bf00      	nop

08100d78 <__aeabi_ldivmod>:
 8100d78:	b97b      	cbnz	r3, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7a:	b972      	cbnz	r2, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7c:	2900      	cmp	r1, #0
 8100d7e:	bfbe      	ittt	lt
 8100d80:	2000      	movlt	r0, #0
 8100d82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100d86:	e006      	blt.n	8100d96 <__aeabi_ldivmod+0x1e>
 8100d88:	bf08      	it	eq
 8100d8a:	2800      	cmpeq	r0, #0
 8100d8c:	bf1c      	itt	ne
 8100d8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100d92:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100d96:	f000 b9b9 	b.w	810110c <__aeabi_idiv0>
 8100d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100da2:	2900      	cmp	r1, #0
 8100da4:	db09      	blt.n	8100dba <__aeabi_ldivmod+0x42>
 8100da6:	2b00      	cmp	r3, #0
 8100da8:	db1a      	blt.n	8100de0 <__aeabi_ldivmod+0x68>
 8100daa:	f000 f84d 	bl	8100e48 <__udivmoddi4>
 8100dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100db6:	b004      	add	sp, #16
 8100db8:	4770      	bx	lr
 8100dba:	4240      	negs	r0, r0
 8100dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc0:	2b00      	cmp	r3, #0
 8100dc2:	db1b      	blt.n	8100dfc <__aeabi_ldivmod+0x84>
 8100dc4:	f000 f840 	bl	8100e48 <__udivmoddi4>
 8100dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dd0:	b004      	add	sp, #16
 8100dd2:	4240      	negs	r0, r0
 8100dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dd8:	4252      	negs	r2, r2
 8100dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100dde:	4770      	bx	lr
 8100de0:	4252      	negs	r2, r2
 8100de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100de6:	f000 f82f 	bl	8100e48 <__udivmoddi4>
 8100dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100df2:	b004      	add	sp, #16
 8100df4:	4240      	negs	r0, r0
 8100df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dfa:	4770      	bx	lr
 8100dfc:	4252      	negs	r2, r2
 8100dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e02:	f000 f821 	bl	8100e48 <__udivmoddi4>
 8100e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e0e:	b004      	add	sp, #16
 8100e10:	4252      	negs	r2, r2
 8100e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e16:	4770      	bx	lr

08100e18 <__aeabi_uldivmod>:
 8100e18:	b953      	cbnz	r3, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1a:	b94a      	cbnz	r2, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1c:	2900      	cmp	r1, #0
 8100e1e:	bf08      	it	eq
 8100e20:	2800      	cmpeq	r0, #0
 8100e22:	bf1c      	itt	ne
 8100e24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100e28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100e2c:	f000 b96e 	b.w	810110c <__aeabi_idiv0>
 8100e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e38:	f000 f806 	bl	8100e48 <__udivmoddi4>
 8100e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e44:	b004      	add	sp, #16
 8100e46:	4770      	bx	lr

08100e48 <__udivmoddi4>:
 8100e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e4c:	9d08      	ldr	r5, [sp, #32]
 8100e4e:	4604      	mov	r4, r0
 8100e50:	468c      	mov	ip, r1
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	f040 8083 	bne.w	8100f5e <__udivmoddi4+0x116>
 8100e58:	428a      	cmp	r2, r1
 8100e5a:	4617      	mov	r7, r2
 8100e5c:	d947      	bls.n	8100eee <__udivmoddi4+0xa6>
 8100e5e:	fab2 f282 	clz	r2, r2
 8100e62:	b142      	cbz	r2, 8100e76 <__udivmoddi4+0x2e>
 8100e64:	f1c2 0020 	rsb	r0, r2, #32
 8100e68:	fa24 f000 	lsr.w	r0, r4, r0
 8100e6c:	4091      	lsls	r1, r2
 8100e6e:	4097      	lsls	r7, r2
 8100e70:	ea40 0c01 	orr.w	ip, r0, r1
 8100e74:	4094      	lsls	r4, r2
 8100e76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100e7a:	0c23      	lsrs	r3, r4, #16
 8100e7c:	fbbc f6f8 	udiv	r6, ip, r8
 8100e80:	fa1f fe87 	uxth.w	lr, r7
 8100e84:	fb08 c116 	mls	r1, r8, r6, ip
 8100e88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e8c:	fb06 f10e 	mul.w	r1, r6, lr
 8100e90:	4299      	cmp	r1, r3
 8100e92:	d909      	bls.n	8100ea8 <__udivmoddi4+0x60>
 8100e94:	18fb      	adds	r3, r7, r3
 8100e96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100e9a:	f080 8119 	bcs.w	81010d0 <__udivmoddi4+0x288>
 8100e9e:	4299      	cmp	r1, r3
 8100ea0:	f240 8116 	bls.w	81010d0 <__udivmoddi4+0x288>
 8100ea4:	3e02      	subs	r6, #2
 8100ea6:	443b      	add	r3, r7
 8100ea8:	1a5b      	subs	r3, r3, r1
 8100eaa:	b2a4      	uxth	r4, r4
 8100eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8100eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8100eb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100eb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8100ebc:	45a6      	cmp	lr, r4
 8100ebe:	d909      	bls.n	8100ed4 <__udivmoddi4+0x8c>
 8100ec0:	193c      	adds	r4, r7, r4
 8100ec2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100ec6:	f080 8105 	bcs.w	81010d4 <__udivmoddi4+0x28c>
 8100eca:	45a6      	cmp	lr, r4
 8100ecc:	f240 8102 	bls.w	81010d4 <__udivmoddi4+0x28c>
 8100ed0:	3802      	subs	r0, #2
 8100ed2:	443c      	add	r4, r7
 8100ed4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100ed8:	eba4 040e 	sub.w	r4, r4, lr
 8100edc:	2600      	movs	r6, #0
 8100ede:	b11d      	cbz	r5, 8100ee8 <__udivmoddi4+0xa0>
 8100ee0:	40d4      	lsrs	r4, r2
 8100ee2:	2300      	movs	r3, #0
 8100ee4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ee8:	4631      	mov	r1, r6
 8100eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eee:	b902      	cbnz	r2, 8100ef2 <__udivmoddi4+0xaa>
 8100ef0:	deff      	udf	#255	; 0xff
 8100ef2:	fab2 f282 	clz	r2, r2
 8100ef6:	2a00      	cmp	r2, #0
 8100ef8:	d150      	bne.n	8100f9c <__udivmoddi4+0x154>
 8100efa:	1bcb      	subs	r3, r1, r7
 8100efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f00:	fa1f f887 	uxth.w	r8, r7
 8100f04:	2601      	movs	r6, #1
 8100f06:	fbb3 fcfe 	udiv	ip, r3, lr
 8100f0a:	0c21      	lsrs	r1, r4, #16
 8100f0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8100f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f14:	fb08 f30c 	mul.w	r3, r8, ip
 8100f18:	428b      	cmp	r3, r1
 8100f1a:	d907      	bls.n	8100f2c <__udivmoddi4+0xe4>
 8100f1c:	1879      	adds	r1, r7, r1
 8100f1e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8100f22:	d202      	bcs.n	8100f2a <__udivmoddi4+0xe2>
 8100f24:	428b      	cmp	r3, r1
 8100f26:	f200 80e9 	bhi.w	81010fc <__udivmoddi4+0x2b4>
 8100f2a:	4684      	mov	ip, r0
 8100f2c:	1ac9      	subs	r1, r1, r3
 8100f2e:	b2a3      	uxth	r3, r4
 8100f30:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f34:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100f3c:	fb08 f800 	mul.w	r8, r8, r0
 8100f40:	45a0      	cmp	r8, r4
 8100f42:	d907      	bls.n	8100f54 <__udivmoddi4+0x10c>
 8100f44:	193c      	adds	r4, r7, r4
 8100f46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100f4a:	d202      	bcs.n	8100f52 <__udivmoddi4+0x10a>
 8100f4c:	45a0      	cmp	r8, r4
 8100f4e:	f200 80d9 	bhi.w	8101104 <__udivmoddi4+0x2bc>
 8100f52:	4618      	mov	r0, r3
 8100f54:	eba4 0408 	sub.w	r4, r4, r8
 8100f58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f5c:	e7bf      	b.n	8100ede <__udivmoddi4+0x96>
 8100f5e:	428b      	cmp	r3, r1
 8100f60:	d909      	bls.n	8100f76 <__udivmoddi4+0x12e>
 8100f62:	2d00      	cmp	r5, #0
 8100f64:	f000 80b1 	beq.w	81010ca <__udivmoddi4+0x282>
 8100f68:	2600      	movs	r6, #0
 8100f6a:	e9c5 0100 	strd	r0, r1, [r5]
 8100f6e:	4630      	mov	r0, r6
 8100f70:	4631      	mov	r1, r6
 8100f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f76:	fab3 f683 	clz	r6, r3
 8100f7a:	2e00      	cmp	r6, #0
 8100f7c:	d14a      	bne.n	8101014 <__udivmoddi4+0x1cc>
 8100f7e:	428b      	cmp	r3, r1
 8100f80:	d302      	bcc.n	8100f88 <__udivmoddi4+0x140>
 8100f82:	4282      	cmp	r2, r0
 8100f84:	f200 80b8 	bhi.w	81010f8 <__udivmoddi4+0x2b0>
 8100f88:	1a84      	subs	r4, r0, r2
 8100f8a:	eb61 0103 	sbc.w	r1, r1, r3
 8100f8e:	2001      	movs	r0, #1
 8100f90:	468c      	mov	ip, r1
 8100f92:	2d00      	cmp	r5, #0
 8100f94:	d0a8      	beq.n	8100ee8 <__udivmoddi4+0xa0>
 8100f96:	e9c5 4c00 	strd	r4, ip, [r5]
 8100f9a:	e7a5      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8100f9c:	f1c2 0320 	rsb	r3, r2, #32
 8100fa0:	fa20 f603 	lsr.w	r6, r0, r3
 8100fa4:	4097      	lsls	r7, r2
 8100fa6:	fa01 f002 	lsl.w	r0, r1, r2
 8100faa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100fae:	40d9      	lsrs	r1, r3
 8100fb0:	4330      	orrs	r0, r6
 8100fb2:	0c03      	lsrs	r3, r0, #16
 8100fb4:	fbb1 f6fe 	udiv	r6, r1, lr
 8100fb8:	fa1f f887 	uxth.w	r8, r7
 8100fbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8100fc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100fc4:	fb06 f108 	mul.w	r1, r6, r8
 8100fc8:	4299      	cmp	r1, r3
 8100fca:	fa04 f402 	lsl.w	r4, r4, r2
 8100fce:	d909      	bls.n	8100fe4 <__udivmoddi4+0x19c>
 8100fd0:	18fb      	adds	r3, r7, r3
 8100fd2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8100fd6:	f080 808d 	bcs.w	81010f4 <__udivmoddi4+0x2ac>
 8100fda:	4299      	cmp	r1, r3
 8100fdc:	f240 808a 	bls.w	81010f4 <__udivmoddi4+0x2ac>
 8100fe0:	3e02      	subs	r6, #2
 8100fe2:	443b      	add	r3, r7
 8100fe4:	1a5b      	subs	r3, r3, r1
 8100fe6:	b281      	uxth	r1, r0
 8100fe8:	fbb3 f0fe 	udiv	r0, r3, lr
 8100fec:	fb0e 3310 	mls	r3, lr, r0, r3
 8100ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100ff4:	fb00 f308 	mul.w	r3, r0, r8
 8100ff8:	428b      	cmp	r3, r1
 8100ffa:	d907      	bls.n	810100c <__udivmoddi4+0x1c4>
 8100ffc:	1879      	adds	r1, r7, r1
 8100ffe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8101002:	d273      	bcs.n	81010ec <__udivmoddi4+0x2a4>
 8101004:	428b      	cmp	r3, r1
 8101006:	d971      	bls.n	81010ec <__udivmoddi4+0x2a4>
 8101008:	3802      	subs	r0, #2
 810100a:	4439      	add	r1, r7
 810100c:	1acb      	subs	r3, r1, r3
 810100e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101012:	e778      	b.n	8100f06 <__udivmoddi4+0xbe>
 8101014:	f1c6 0c20 	rsb	ip, r6, #32
 8101018:	fa03 f406 	lsl.w	r4, r3, r6
 810101c:	fa22 f30c 	lsr.w	r3, r2, ip
 8101020:	431c      	orrs	r4, r3
 8101022:	fa20 f70c 	lsr.w	r7, r0, ip
 8101026:	fa01 f306 	lsl.w	r3, r1, r6
 810102a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 810102e:	fa21 f10c 	lsr.w	r1, r1, ip
 8101032:	431f      	orrs	r7, r3
 8101034:	0c3b      	lsrs	r3, r7, #16
 8101036:	fbb1 f9fe 	udiv	r9, r1, lr
 810103a:	fa1f f884 	uxth.w	r8, r4
 810103e:	fb0e 1119 	mls	r1, lr, r9, r1
 8101042:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8101046:	fb09 fa08 	mul.w	sl, r9, r8
 810104a:	458a      	cmp	sl, r1
 810104c:	fa02 f206 	lsl.w	r2, r2, r6
 8101050:	fa00 f306 	lsl.w	r3, r0, r6
 8101054:	d908      	bls.n	8101068 <__udivmoddi4+0x220>
 8101056:	1861      	adds	r1, r4, r1
 8101058:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 810105c:	d248      	bcs.n	81010f0 <__udivmoddi4+0x2a8>
 810105e:	458a      	cmp	sl, r1
 8101060:	d946      	bls.n	81010f0 <__udivmoddi4+0x2a8>
 8101062:	f1a9 0902 	sub.w	r9, r9, #2
 8101066:	4421      	add	r1, r4
 8101068:	eba1 010a 	sub.w	r1, r1, sl
 810106c:	b2bf      	uxth	r7, r7
 810106e:	fbb1 f0fe 	udiv	r0, r1, lr
 8101072:	fb0e 1110 	mls	r1, lr, r0, r1
 8101076:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810107a:	fb00 f808 	mul.w	r8, r0, r8
 810107e:	45b8      	cmp	r8, r7
 8101080:	d907      	bls.n	8101092 <__udivmoddi4+0x24a>
 8101082:	19e7      	adds	r7, r4, r7
 8101084:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8101088:	d22e      	bcs.n	81010e8 <__udivmoddi4+0x2a0>
 810108a:	45b8      	cmp	r8, r7
 810108c:	d92c      	bls.n	81010e8 <__udivmoddi4+0x2a0>
 810108e:	3802      	subs	r0, #2
 8101090:	4427      	add	r7, r4
 8101092:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101096:	eba7 0708 	sub.w	r7, r7, r8
 810109a:	fba0 8902 	umull	r8, r9, r0, r2
 810109e:	454f      	cmp	r7, r9
 81010a0:	46c6      	mov	lr, r8
 81010a2:	4649      	mov	r1, r9
 81010a4:	d31a      	bcc.n	81010dc <__udivmoddi4+0x294>
 81010a6:	d017      	beq.n	81010d8 <__udivmoddi4+0x290>
 81010a8:	b15d      	cbz	r5, 81010c2 <__udivmoddi4+0x27a>
 81010aa:	ebb3 020e 	subs.w	r2, r3, lr
 81010ae:	eb67 0701 	sbc.w	r7, r7, r1
 81010b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 81010b6:	40f2      	lsrs	r2, r6
 81010b8:	ea4c 0202 	orr.w	r2, ip, r2
 81010bc:	40f7      	lsrs	r7, r6
 81010be:	e9c5 2700 	strd	r2, r7, [r5]
 81010c2:	2600      	movs	r6, #0
 81010c4:	4631      	mov	r1, r6
 81010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81010ca:	462e      	mov	r6, r5
 81010cc:	4628      	mov	r0, r5
 81010ce:	e70b      	b.n	8100ee8 <__udivmoddi4+0xa0>
 81010d0:	4606      	mov	r6, r0
 81010d2:	e6e9      	b.n	8100ea8 <__udivmoddi4+0x60>
 81010d4:	4618      	mov	r0, r3
 81010d6:	e6fd      	b.n	8100ed4 <__udivmoddi4+0x8c>
 81010d8:	4543      	cmp	r3, r8
 81010da:	d2e5      	bcs.n	81010a8 <__udivmoddi4+0x260>
 81010dc:	ebb8 0e02 	subs.w	lr, r8, r2
 81010e0:	eb69 0104 	sbc.w	r1, r9, r4
 81010e4:	3801      	subs	r0, #1
 81010e6:	e7df      	b.n	81010a8 <__udivmoddi4+0x260>
 81010e8:	4608      	mov	r0, r1
 81010ea:	e7d2      	b.n	8101092 <__udivmoddi4+0x24a>
 81010ec:	4660      	mov	r0, ip
 81010ee:	e78d      	b.n	810100c <__udivmoddi4+0x1c4>
 81010f0:	4681      	mov	r9, r0
 81010f2:	e7b9      	b.n	8101068 <__udivmoddi4+0x220>
 81010f4:	4666      	mov	r6, ip
 81010f6:	e775      	b.n	8100fe4 <__udivmoddi4+0x19c>
 81010f8:	4630      	mov	r0, r6
 81010fa:	e74a      	b.n	8100f92 <__udivmoddi4+0x14a>
 81010fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8101100:	4439      	add	r1, r7
 8101102:	e713      	b.n	8100f2c <__udivmoddi4+0xe4>
 8101104:	3802      	subs	r0, #2
 8101106:	443c      	add	r4, r7
 8101108:	e724      	b.n	8100f54 <__udivmoddi4+0x10c>
 810110a:	bf00      	nop

0810110c <__aeabi_idiv0>:
 810110c:	4770      	bx	lr
 810110e:	bf00      	nop

08101110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101110:	b480      	push	{r7}
 8101112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101114:	4b0b      	ldr	r3, [pc, #44]	; (8101144 <SystemInit+0x34>)
 8101116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810111a:	4a0a      	ldr	r2, [pc, #40]	; (8101144 <SystemInit+0x34>)
 810111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101124:	4b07      	ldr	r3, [pc, #28]	; (8101144 <SystemInit+0x34>)
 8101126:	691b      	ldr	r3, [r3, #16]
 8101128:	4a06      	ldr	r2, [pc, #24]	; (8101144 <SystemInit+0x34>)
 810112a:	f043 0310 	orr.w	r3, r3, #16
 810112e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101130:	4b04      	ldr	r3, [pc, #16]	; (8101144 <SystemInit+0x34>)
 8101132:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8101136:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101138:	bf00      	nop
 810113a:	46bd      	mov	sp, r7
 810113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101140:	4770      	bx	lr
 8101142:	bf00      	nop
 8101144:	e000ed00 	.word	0xe000ed00

08101148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101148:	b580      	push	{r7, lr}
 810114a:	b082      	sub	sp, #8
 810114c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810114e:	4b21      	ldr	r3, [pc, #132]	; (81011d4 <MX_DMA_Init+0x8c>)
 8101150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101154:	4a1f      	ldr	r2, [pc, #124]	; (81011d4 <MX_DMA_Init+0x8c>)
 8101156:	f043 0301 	orr.w	r3, r3, #1
 810115a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810115e:	4b1d      	ldr	r3, [pc, #116]	; (81011d4 <MX_DMA_Init+0x8c>)
 8101160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101164:	f003 0301 	and.w	r3, r3, #1
 8101168:	607b      	str	r3, [r7, #4]
 810116a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 810116c:	4b19      	ldr	r3, [pc, #100]	; (81011d4 <MX_DMA_Init+0x8c>)
 810116e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101172:	4a18      	ldr	r2, [pc, #96]	; (81011d4 <MX_DMA_Init+0x8c>)
 8101174:	f043 0302 	orr.w	r3, r3, #2
 8101178:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810117c:	4b15      	ldr	r3, [pc, #84]	; (81011d4 <MX_DMA_Init+0x8c>)
 810117e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101182:	f003 0302 	and.w	r3, r3, #2
 8101186:	603b      	str	r3, [r7, #0]
 8101188:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
<<<<<<< HEAD
 810118a:	2200      	movs	r2, #0
 810118c:	2105      	movs	r1, #5
 810118e:	200b      	movs	r0, #11
 8101190:	f001 f9b7 	bl	8102502 <HAL_NVIC_SetPriority>
=======
 8101192:	2200      	movs	r2, #0
 8101194:	2105      	movs	r1, #5
 8101196:	200b      	movs	r0, #11
 8101198:	f001 f8e9 	bl	810236e <HAL_NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
<<<<<<< HEAD
 8101194:	200b      	movs	r0, #11
 8101196:	f001 f9ce 	bl	8102536 <HAL_NVIC_EnableIRQ>
=======
 810119c:	200b      	movs	r0, #11
 810119e:	f001 f900 	bl	81023a2 <HAL_NVIC_EnableIRQ>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
<<<<<<< HEAD
 810119a:	2200      	movs	r2, #0
 810119c:	2105      	movs	r1, #5
 810119e:	200c      	movs	r0, #12
 81011a0:	f001 f9af 	bl	8102502 <HAL_NVIC_SetPriority>
=======
 81011a2:	2200      	movs	r2, #0
 81011a4:	2105      	movs	r1, #5
 81011a6:	200c      	movs	r0, #12
 81011a8:	f001 f8e1 	bl	810236e <HAL_NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
<<<<<<< HEAD
 81011a4:	200c      	movs	r0, #12
 81011a6:	f001 f9c6 	bl	8102536 <HAL_NVIC_EnableIRQ>
=======
 81011ac:	200c      	movs	r0, #12
 81011ae:	f001 f8f8 	bl	81023a2 <HAL_NVIC_EnableIRQ>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
<<<<<<< HEAD
 81011aa:	2200      	movs	r2, #0
 81011ac:	2105      	movs	r1, #5
 81011ae:	203a      	movs	r0, #58	; 0x3a
 81011b0:	f001 f9a7 	bl	8102502 <HAL_NVIC_SetPriority>
=======
 81011b2:	2200      	movs	r2, #0
 81011b4:	2105      	movs	r1, #5
 81011b6:	203a      	movs	r0, #58	; 0x3a
 81011b8:	f001 f8d9 	bl	810236e <HAL_NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
<<<<<<< HEAD
 81011b4:	203a      	movs	r0, #58	; 0x3a
 81011b6:	f001 f9be 	bl	8102536 <HAL_NVIC_EnableIRQ>
=======
 81011bc:	203a      	movs	r0, #58	; 0x3a
 81011be:	f001 f8f0 	bl	81023a2 <HAL_NVIC_EnableIRQ>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
<<<<<<< HEAD
 81011ba:	2200      	movs	r2, #0
 81011bc:	2105      	movs	r1, #5
 81011be:	203b      	movs	r0, #59	; 0x3b
 81011c0:	f001 f99f 	bl	8102502 <HAL_NVIC_SetPriority>
=======
 81011c2:	2200      	movs	r2, #0
 81011c4:	2105      	movs	r1, #5
 81011c6:	203b      	movs	r0, #59	; 0x3b
 81011c8:	f001 f8d1 	bl	810236e <HAL_NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
<<<<<<< HEAD
 81011c4:	203b      	movs	r0, #59	; 0x3b
 81011c6:	f001 f9b6 	bl	8102536 <HAL_NVIC_EnableIRQ>
=======
 81011cc:	203b      	movs	r0, #59	; 0x3b
 81011ce:	f001 f8e8 	bl	81023a2 <HAL_NVIC_EnableIRQ>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

}
 81011ca:	bf00      	nop
 81011cc:	3708      	adds	r7, #8
 81011ce:	46bd      	mov	sp, r7
 81011d0:	bd80      	pop	{r7, pc}
 81011d2:	bf00      	nop
 81011d4:	58024400 	.word	0x58024400

081011d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 81011d8:	b480      	push	{r7}
 81011da:	b085      	sub	sp, #20
 81011dc:	af00      	add	r7, sp, #0
 81011de:	60f8      	str	r0, [r7, #12]
 81011e0:	60b9      	str	r1, [r7, #8]
 81011e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 81011e4:	68fb      	ldr	r3, [r7, #12]
 81011e6:	4a07      	ldr	r2, [pc, #28]	; (8101204 <vApplicationGetIdleTaskMemory+0x2c>)
 81011e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 81011ea:	68bb      	ldr	r3, [r7, #8]
 81011ec:	4a06      	ldr	r2, [pc, #24]	; (8101208 <vApplicationGetIdleTaskMemory+0x30>)
 81011ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	2280      	movs	r2, #128	; 0x80
 81011f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
<<<<<<< HEAD
 81011f6:	bf00      	nop
 81011f8:	3714      	adds	r7, #20
 81011fa:	46bd      	mov	sp, r7
 81011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop
 8101204:	10000230 	.word	0x10000230
 8101208:	10000284 	.word	0x10000284
=======
 81011fe:	bf00      	nop
 8101200:	3714      	adds	r7, #20
 8101202:	46bd      	mov	sp, r7
 8101204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101208:	4770      	bx	lr
 810120a:	bf00      	nop
 810120c:	10000220 	.word	0x10000220
 8101210:	10000274 	.word	0x10000274
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

0810120c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 810120c:	b5b0      	push	{r4, r5, r7, lr}
 810120e:	b088      	sub	sp, #32
 8101210:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 128);
 8101212:	4b0b      	ldr	r3, [pc, #44]	; (8101240 <MX_FREERTOS_Init+0x34>)
 8101214:	1d3c      	adds	r4, r7, #4
 8101216:	461d      	mov	r5, r3
 8101218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810121c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8101220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
<<<<<<< HEAD
 8101224:	1d3b      	adds	r3, r7, #4
 8101226:	2100      	movs	r1, #0
 8101228:	4618      	mov	r0, r3
 810122a:	f008 f85d 	bl	81092e8 <osThreadCreate>
 810122e:	4603      	mov	r3, r0
 8101230:	4a04      	ldr	r2, [pc, #16]	; (8101244 <MX_FREERTOS_Init+0x38>)
 8101232:	6013      	str	r3, [r2, #0]
=======
 810122c:	1d3b      	adds	r3, r7, #4
 810122e:	2100      	movs	r1, #0
 8101230:	4618      	mov	r0, r3
 8101232:	f006 fef5 	bl	8108020 <osThreadCreate>
 8101236:	4602      	mov	r2, r0
 8101238:	4b04      	ldr	r3, [pc, #16]	; (810124c <MX_FREERTOS_Init+0x38>)
 810123a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
<<<<<<< HEAD
 8101234:	f00f f9b4 	bl	81105a0 <initCortexM4>
=======
 810123c:	f00c fa56 	bl	810d6ec <initCortexM4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE END RTOS_THREADS */

}
<<<<<<< HEAD
 8101238:	bf00      	nop
 810123a:	3720      	adds	r7, #32
 810123c:	46bd      	mov	sp, r7
 810123e:	bdb0      	pop	{r4, r5, r7, pc}
 8101240:	081141fc 	.word	0x081141fc
 8101244:	10045cac 	.word	0x10045cac
=======
 8101240:	bf00      	nop
 8101242:	3720      	adds	r7, #32
 8101244:	46bd      	mov	sp, r7
 8101246:	bdb0      	pop	{r4, r5, r7, pc}
 8101248:	081104ec 	.word	0x081104ec
 810124c:	1000960c 	.word	0x1000960c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101248 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8101248:	b580      	push	{r7, lr}
 810124a:	b082      	sub	sp, #8
 810124c:	af00      	add	r7, sp, #0
 810124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< HEAD
 8101250:	2001      	movs	r0, #1
 8101252:	f008 f895 	bl	8109380 <osDelay>
 8101256:	e7fb      	b.n	8101250 <watchdogTask+0x8>
=======
 8101258:	2001      	movs	r0, #1
 810125a:	f006 ff2d 	bl	81080b8 <osDelay>
 810125e:	e7fb      	b.n	8101258 <watchdogTask+0x8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101258 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101258:	b480      	push	{r7}
 810125a:	b087      	sub	sp, #28
 810125c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810125e:	4b28      	ldr	r3, [pc, #160]	; (8101300 <MX_GPIO_Init+0xa8>)
 8101260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101264:	4a26      	ldr	r2, [pc, #152]	; (8101300 <MX_GPIO_Init+0xa8>)
 8101266:	f043 0310 	orr.w	r3, r3, #16
 810126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810126e:	4b24      	ldr	r3, [pc, #144]	; (8101300 <MX_GPIO_Init+0xa8>)
 8101270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101274:	f003 0310 	and.w	r3, r3, #16
 8101278:	617b      	str	r3, [r7, #20]
 810127a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810127c:	4b20      	ldr	r3, [pc, #128]	; (8101300 <MX_GPIO_Init+0xa8>)
 810127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101282:	4a1f      	ldr	r2, [pc, #124]	; (8101300 <MX_GPIO_Init+0xa8>)
 8101284:	f043 0301 	orr.w	r3, r3, #1
 8101288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810128c:	4b1c      	ldr	r3, [pc, #112]	; (8101300 <MX_GPIO_Init+0xa8>)
 810128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101292:	f003 0301 	and.w	r3, r3, #1
 8101296:	613b      	str	r3, [r7, #16]
 8101298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810129a:	4b19      	ldr	r3, [pc, #100]	; (8101300 <MX_GPIO_Init+0xa8>)
 810129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a0:	4a17      	ldr	r2, [pc, #92]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012a2:	f043 0302 	orr.w	r3, r3, #2
 81012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012aa:	4b15      	ldr	r3, [pc, #84]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b0:	f003 0302 	and.w	r3, r3, #2
 81012b4:	60fb      	str	r3, [r7, #12]
 81012b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012b8:	4b11      	ldr	r3, [pc, #68]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012be:	4a10      	ldr	r2, [pc, #64]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012c0:	f043 0308 	orr.w	r3, r3, #8
 81012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012c8:	4b0d      	ldr	r3, [pc, #52]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ce:	f003 0308 	and.w	r3, r3, #8
 81012d2:	60bb      	str	r3, [r7, #8]
 81012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81012d6:	4b0a      	ldr	r3, [pc, #40]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012dc:	4a08      	ldr	r2, [pc, #32]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012de:	f043 0304 	orr.w	r3, r3, #4
 81012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012e6:	4b06      	ldr	r3, [pc, #24]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ec:	f003 0304 	and.w	r3, r3, #4
 81012f0:	607b      	str	r3, [r7, #4]
 81012f2:	687b      	ldr	r3, [r7, #4]

}
 81012f4:	bf00      	nop
 81012f6:	371c      	adds	r7, #28
 81012f8:	46bd      	mov	sp, r7
 81012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012fe:	4770      	bx	lr
 8101300:	58024400 	.word	0x58024400

08101304 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101304:	b580      	push	{r7, lr}
 8101306:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8101308:	4b1c      	ldr	r3, [pc, #112]	; (810137c <MX_I2C1_Init+0x78>)
 810130a:	4a1d      	ldr	r2, [pc, #116]	; (8101380 <MX_I2C1_Init+0x7c>)
 810130c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 810130e:	4b1b      	ldr	r3, [pc, #108]	; (810137c <MX_I2C1_Init+0x78>)
 8101310:	4a1c      	ldr	r2, [pc, #112]	; (8101384 <MX_I2C1_Init+0x80>)
 8101312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101314:	4b19      	ldr	r3, [pc, #100]	; (810137c <MX_I2C1_Init+0x78>)
 8101316:	2200      	movs	r2, #0
 8101318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810131a:	4b18      	ldr	r3, [pc, #96]	; (810137c <MX_I2C1_Init+0x78>)
 810131c:	2201      	movs	r2, #1
 810131e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101320:	4b16      	ldr	r3, [pc, #88]	; (810137c <MX_I2C1_Init+0x78>)
 8101322:	2200      	movs	r2, #0
 8101324:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101326:	4b15      	ldr	r3, [pc, #84]	; (810137c <MX_I2C1_Init+0x78>)
 8101328:	2200      	movs	r2, #0
 810132a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810132c:	4b13      	ldr	r3, [pc, #76]	; (810137c <MX_I2C1_Init+0x78>)
 810132e:	2200      	movs	r2, #0
 8101330:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101332:	4b12      	ldr	r3, [pc, #72]	; (810137c <MX_I2C1_Init+0x78>)
 8101334:	2200      	movs	r2, #0
 8101336:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101338:	4b10      	ldr	r3, [pc, #64]	; (810137c <MX_I2C1_Init+0x78>)
 810133a:	2200      	movs	r2, #0
 810133c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< HEAD
 810133e:	480f      	ldr	r0, [pc, #60]	; (810137c <MX_I2C1_Init+0x78>)
 8101340:	f003 ff54 	bl	81051ec <HAL_I2C_Init>
 8101344:	4603      	mov	r3, r0
 8101346:	2b00      	cmp	r3, #0
 8101348:	d001      	beq.n	810134e <MX_I2C1_Init+0x4a>
=======
 8101346:	480f      	ldr	r0, [pc, #60]	; (8101384 <MX_I2C1_Init+0x78>)
 8101348:	f003 fdae 	bl	8104ea8 <HAL_I2C_Init>
 810134c:	4603      	mov	r3, r0
 810134e:	2b00      	cmp	r3, #0
 8101350:	d001      	beq.n	8101356 <MX_I2C1_Init+0x4a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 810134a:	f000 fa5d 	bl	8101808 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 810134e:	2100      	movs	r1, #0
 8101350:	480a      	ldr	r0, [pc, #40]	; (810137c <MX_I2C1_Init+0x78>)
 8101352:	f004 ffcb 	bl	81062ec <HAL_I2CEx_ConfigAnalogFilter>
 8101356:	4603      	mov	r3, r0
 8101358:	2b00      	cmp	r3, #0
 810135a:	d001      	beq.n	8101360 <MX_I2C1_Init+0x5c>
=======
 8101356:	2100      	movs	r1, #0
 8101358:	480a      	ldr	r0, [pc, #40]	; (8101384 <MX_I2C1_Init+0x78>)
 810135a:	f003 fe34 	bl	8104fc6 <HAL_I2CEx_ConfigAnalogFilter>
 810135e:	4603      	mov	r3, r0
 8101360:	2b00      	cmp	r3, #0
 8101362:	d001      	beq.n	8101368 <MX_I2C1_Init+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 810135c:	f000 fa54 	bl	8101808 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< HEAD
 8101360:	2100      	movs	r1, #0
 8101362:	4806      	ldr	r0, [pc, #24]	; (810137c <MX_I2C1_Init+0x78>)
 8101364:	f005 f80d 	bl	8106382 <HAL_I2CEx_ConfigDigitalFilter>
 8101368:	4603      	mov	r3, r0
 810136a:	2b00      	cmp	r3, #0
 810136c:	d001      	beq.n	8101372 <MX_I2C1_Init+0x6e>
=======
 8101368:	2100      	movs	r1, #0
 810136a:	4806      	ldr	r0, [pc, #24]	; (8101384 <MX_I2C1_Init+0x78>)
 810136c:	f003 fe76 	bl	810505c <HAL_I2CEx_ConfigDigitalFilter>
 8101370:	4603      	mov	r3, r0
 8101372:	2b00      	cmp	r3, #0
 8101374:	d001      	beq.n	810137a <MX_I2C1_Init+0x6e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 810136e:	f000 fa4b 	bl	8101808 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
<<<<<<< HEAD
 8101372:	2001      	movs	r0, #1
 8101374:	f005 f852 	bl	810641c <HAL_I2CEx_EnableFastModePlus>
=======
 810137a:	2001      	movs	r0, #1
 810137c:	f003 feba 	bl	81050f4 <HAL_I2CEx_EnableFastModePlus>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

}
<<<<<<< HEAD
 8101378:	bf00      	nop
 810137a:	bd80      	pop	{r7, pc}
 810137c:	10045cfc 	.word	0x10045cfc
 8101380:	40005400 	.word	0x40005400
 8101384:	00401242 	.word	0x00401242
=======
 8101380:	bf00      	nop
 8101382:	bd80      	pop	{r7, pc}
 8101384:	1000965c 	.word	0x1000965c
 8101388:	40005400 	.word	0x40005400
 810138c:	00401242 	.word	0x00401242
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101388 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101388:	b580      	push	{r7, lr}
 810138a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 810138c:	4b1b      	ldr	r3, [pc, #108]	; (81013fc <MX_I2C2_Init+0x74>)
 810138e:	4a1c      	ldr	r2, [pc, #112]	; (8101400 <MX_I2C2_Init+0x78>)
 8101390:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8101392:	4b1a      	ldr	r3, [pc, #104]	; (81013fc <MX_I2C2_Init+0x74>)
 8101394:	4a1b      	ldr	r2, [pc, #108]	; (8101404 <MX_I2C2_Init+0x7c>)
 8101396:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8101398:	4b18      	ldr	r3, [pc, #96]	; (81013fc <MX_I2C2_Init+0x74>)
 810139a:	2200      	movs	r2, #0
 810139c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810139e:	4b17      	ldr	r3, [pc, #92]	; (81013fc <MX_I2C2_Init+0x74>)
 81013a0:	2201      	movs	r2, #1
 81013a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013a4:	4b15      	ldr	r3, [pc, #84]	; (81013fc <MX_I2C2_Init+0x74>)
 81013a6:	2200      	movs	r2, #0
 81013a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81013aa:	4b14      	ldr	r3, [pc, #80]	; (81013fc <MX_I2C2_Init+0x74>)
 81013ac:	2200      	movs	r2, #0
 81013ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013b0:	4b12      	ldr	r3, [pc, #72]	; (81013fc <MX_I2C2_Init+0x74>)
 81013b2:	2200      	movs	r2, #0
 81013b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013b6:	4b11      	ldr	r3, [pc, #68]	; (81013fc <MX_I2C2_Init+0x74>)
 81013b8:	2200      	movs	r2, #0
 81013ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013bc:	4b0f      	ldr	r3, [pc, #60]	; (81013fc <MX_I2C2_Init+0x74>)
 81013be:	2200      	movs	r2, #0
 81013c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
<<<<<<< HEAD
 81013c2:	480e      	ldr	r0, [pc, #56]	; (81013fc <MX_I2C2_Init+0x74>)
 81013c4:	f003 ff12 	bl	81051ec <HAL_I2C_Init>
 81013c8:	4603      	mov	r3, r0
 81013ca:	2b00      	cmp	r3, #0
 81013cc:	d001      	beq.n	81013d2 <MX_I2C2_Init+0x4a>
=======
 81013ca:	480e      	ldr	r0, [pc, #56]	; (8101404 <MX_I2C2_Init+0x74>)
 81013cc:	f003 fd6c 	bl	8104ea8 <HAL_I2C_Init>
 81013d0:	4603      	mov	r3, r0
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d001      	beq.n	81013da <MX_I2C2_Init+0x4a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 81013ce:	f000 fa1b 	bl	8101808 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 81013d2:	2100      	movs	r1, #0
 81013d4:	4809      	ldr	r0, [pc, #36]	; (81013fc <MX_I2C2_Init+0x74>)
 81013d6:	f004 ff89 	bl	81062ec <HAL_I2CEx_ConfigAnalogFilter>
 81013da:	4603      	mov	r3, r0
 81013dc:	2b00      	cmp	r3, #0
 81013de:	d001      	beq.n	81013e4 <MX_I2C2_Init+0x5c>
=======
 81013da:	2100      	movs	r1, #0
 81013dc:	4809      	ldr	r0, [pc, #36]	; (8101404 <MX_I2C2_Init+0x74>)
 81013de:	f003 fdf2 	bl	8104fc6 <HAL_I2CEx_ConfigAnalogFilter>
 81013e2:	4603      	mov	r3, r0
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d001      	beq.n	81013ec <MX_I2C2_Init+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 81013e0:	f000 fa12 	bl	8101808 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
<<<<<<< HEAD
 81013e4:	2100      	movs	r1, #0
 81013e6:	4805      	ldr	r0, [pc, #20]	; (81013fc <MX_I2C2_Init+0x74>)
 81013e8:	f004 ffcb 	bl	8106382 <HAL_I2CEx_ConfigDigitalFilter>
 81013ec:	4603      	mov	r3, r0
 81013ee:	2b00      	cmp	r3, #0
 81013f0:	d001      	beq.n	81013f6 <MX_I2C2_Init+0x6e>
=======
 81013ec:	2100      	movs	r1, #0
 81013ee:	4805      	ldr	r0, [pc, #20]	; (8101404 <MX_I2C2_Init+0x74>)
 81013f0:	f003 fe34 	bl	810505c <HAL_I2CEx_ConfigDigitalFilter>
 81013f4:	4603      	mov	r3, r0
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d001      	beq.n	81013fe <MX_I2C2_Init+0x6e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 81013f2:	f000 fa09 	bl	8101808 <Error_Handler>
  }

}
<<<<<<< HEAD
 81013f6:	bf00      	nop
 81013f8:	bd80      	pop	{r7, pc}
 81013fa:	bf00      	nop
 81013fc:	10045d48 	.word	0x10045d48
 8101400:	40005800 	.word	0x40005800
 8101404:	10c0ecff 	.word	0x10c0ecff
=======
 81013fe:	bf00      	nop
 8101400:	bd80      	pop	{r7, pc}
 8101402:	bf00      	nop
 8101404:	100096a8 	.word	0x100096a8
 8101408:	40005800 	.word	0x40005800
 810140c:	10c0ecff 	.word	0x10c0ecff
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101408 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8101408:	b580      	push	{r7, lr}
 810140a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 810140c:	4b1b      	ldr	r3, [pc, #108]	; (810147c <MX_I2C3_Init+0x74>)
 810140e:	4a1c      	ldr	r2, [pc, #112]	; (8101480 <MX_I2C3_Init+0x78>)
 8101410:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 8101412:	4b1a      	ldr	r3, [pc, #104]	; (810147c <MX_I2C3_Init+0x74>)
 8101414:	4a1b      	ldr	r2, [pc, #108]	; (8101484 <MX_I2C3_Init+0x7c>)
 8101416:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8101418:	4b18      	ldr	r3, [pc, #96]	; (810147c <MX_I2C3_Init+0x74>)
 810141a:	2200      	movs	r2, #0
 810141c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810141e:	4b17      	ldr	r3, [pc, #92]	; (810147c <MX_I2C3_Init+0x74>)
 8101420:	2201      	movs	r2, #1
 8101422:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101424:	4b15      	ldr	r3, [pc, #84]	; (810147c <MX_I2C3_Init+0x74>)
 8101426:	2200      	movs	r2, #0
 8101428:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 810142a:	4b14      	ldr	r3, [pc, #80]	; (810147c <MX_I2C3_Init+0x74>)
 810142c:	2200      	movs	r2, #0
 810142e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101430:	4b12      	ldr	r3, [pc, #72]	; (810147c <MX_I2C3_Init+0x74>)
 8101432:	2200      	movs	r2, #0
 8101434:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101436:	4b11      	ldr	r3, [pc, #68]	; (810147c <MX_I2C3_Init+0x74>)
 8101438:	2200      	movs	r2, #0
 810143a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810143c:	4b0f      	ldr	r3, [pc, #60]	; (810147c <MX_I2C3_Init+0x74>)
 810143e:	2200      	movs	r2, #0
 8101440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
<<<<<<< HEAD
 8101442:	480e      	ldr	r0, [pc, #56]	; (810147c <MX_I2C3_Init+0x74>)
 8101444:	f003 fed2 	bl	81051ec <HAL_I2C_Init>
 8101448:	4603      	mov	r3, r0
 810144a:	2b00      	cmp	r3, #0
 810144c:	d001      	beq.n	8101452 <MX_I2C3_Init+0x4a>
=======
 810144a:	480e      	ldr	r0, [pc, #56]	; (8101484 <MX_I2C3_Init+0x74>)
 810144c:	f003 fd2c 	bl	8104ea8 <HAL_I2C_Init>
 8101450:	4603      	mov	r3, r0
 8101452:	2b00      	cmp	r3, #0
 8101454:	d001      	beq.n	810145a <MX_I2C3_Init+0x4a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 810144e:	f000 f9db 	bl	8101808 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 8101452:	2100      	movs	r1, #0
 8101454:	4809      	ldr	r0, [pc, #36]	; (810147c <MX_I2C3_Init+0x74>)
 8101456:	f004 ff49 	bl	81062ec <HAL_I2CEx_ConfigAnalogFilter>
 810145a:	4603      	mov	r3, r0
 810145c:	2b00      	cmp	r3, #0
 810145e:	d001      	beq.n	8101464 <MX_I2C3_Init+0x5c>
=======
 810145a:	2100      	movs	r1, #0
 810145c:	4809      	ldr	r0, [pc, #36]	; (8101484 <MX_I2C3_Init+0x74>)
 810145e:	f003 fdb2 	bl	8104fc6 <HAL_I2CEx_ConfigAnalogFilter>
 8101462:	4603      	mov	r3, r0
 8101464:	2b00      	cmp	r3, #0
 8101466:	d001      	beq.n	810146c <MX_I2C3_Init+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 8101460:	f000 f9d2 	bl	8101808 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
<<<<<<< HEAD
 8101464:	2100      	movs	r1, #0
 8101466:	4805      	ldr	r0, [pc, #20]	; (810147c <MX_I2C3_Init+0x74>)
 8101468:	f004 ff8b 	bl	8106382 <HAL_I2CEx_ConfigDigitalFilter>
 810146c:	4603      	mov	r3, r0
 810146e:	2b00      	cmp	r3, #0
 8101470:	d001      	beq.n	8101476 <MX_I2C3_Init+0x6e>
=======
 810146c:	2100      	movs	r1, #0
 810146e:	4805      	ldr	r0, [pc, #20]	; (8101484 <MX_I2C3_Init+0x74>)
 8101470:	f003 fdf4 	bl	810505c <HAL_I2CEx_ConfigDigitalFilter>
 8101474:	4603      	mov	r3, r0
 8101476:	2b00      	cmp	r3, #0
 8101478:	d001      	beq.n	810147e <MX_I2C3_Init+0x6e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 8101472:	f000 f9c9 	bl	8101808 <Error_Handler>
  }

}
<<<<<<< HEAD
 8101476:	bf00      	nop
 8101478:	bd80      	pop	{r7, pc}
 810147a:	bf00      	nop
 810147c:	10045cb0 	.word	0x10045cb0
 8101480:	40005c00 	.word	0x40005c00
 8101484:	10c0ecff 	.word	0x10c0ecff
=======
 810147e:	bf00      	nop
 8101480:	bd80      	pop	{r7, pc}
 8101482:	bf00      	nop
 8101484:	10009610 	.word	0x10009610
 8101488:	40005c00 	.word	0x40005c00
 810148c:	10c0ecff 	.word	0x10c0ecff
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101488:	b580      	push	{r7, lr}
 810148a:	b08e      	sub	sp, #56	; 0x38
 810148c:	af00      	add	r7, sp, #0
 810148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101494:	2200      	movs	r2, #0
 8101496:	601a      	str	r2, [r3, #0]
 8101498:	605a      	str	r2, [r3, #4]
 810149a:	609a      	str	r2, [r3, #8]
 810149c:	60da      	str	r2, [r3, #12]
 810149e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81014a0:	687b      	ldr	r3, [r7, #4]
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	4a5f      	ldr	r2, [pc, #380]	; (8101624 <HAL_I2C_MspInit+0x19c>)
 81014a6:	4293      	cmp	r3, r2
 81014a8:	d12e      	bne.n	8101508 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014aa:	4b5f      	ldr	r3, [pc, #380]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b0:	4a5d      	ldr	r2, [pc, #372]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014b2:	f043 0302 	orr.w	r3, r3, #2
 81014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014ba:	4b5b      	ldr	r3, [pc, #364]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c0:	f003 0302 	and.w	r3, r3, #2
 81014c4:	623b      	str	r3, [r7, #32]
 81014c6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81014c8:	23c0      	movs	r3, #192	; 0xc0
 81014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81014cc:	2312      	movs	r3, #18
 81014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 81014d0:	2301      	movs	r3, #1
 81014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81014d4:	2303      	movs	r3, #3
 81014d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81014d8:	2304      	movs	r3, #4
 81014da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 81014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014e0:	4619      	mov	r1, r3
 81014e2:	4852      	ldr	r0, [pc, #328]	; (810162c <HAL_I2C_MspInit+0x1a4>)
 81014e4:	f003 fb68 	bl	8104bb8 <HAL_GPIO_Init>
=======
 81014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014e8:	4619      	mov	r1, r3
 81014ea:	4852      	ldr	r0, [pc, #328]	; (8101634 <HAL_I2C_MspInit+0x1a4>)
 81014ec:	f003 fa9a 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81014e8:	4b4f      	ldr	r3, [pc, #316]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014ee:	4a4e      	ldr	r2, [pc, #312]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81014f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81014f8:	4b4b      	ldr	r3, [pc, #300]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101502:	61fb      	str	r3, [r7, #28]
 8101504:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8101506:	e088      	b.n	810161a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	4a48      	ldr	r2, [pc, #288]	; (8101630 <HAL_I2C_MspInit+0x1a8>)
 810150e:	4293      	cmp	r3, r2
 8101510:	d12f      	bne.n	8101572 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101512:	4b45      	ldr	r3, [pc, #276]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101518:	4a43      	ldr	r2, [pc, #268]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810151a:	f043 0302 	orr.w	r3, r3, #2
 810151e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101522:	4b41      	ldr	r3, [pc, #260]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101528:	f003 0302 	and.w	r3, r3, #2
 810152c:	61bb      	str	r3, [r7, #24]
 810152e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101530:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101536:	2312      	movs	r3, #18
 8101538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 810153a:	2301      	movs	r3, #1
 810153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810153e:	2303      	movs	r3, #3
 8101540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101542:	2304      	movs	r3, #4
 8101544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8101546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810154a:	4619      	mov	r1, r3
 810154c:	4837      	ldr	r0, [pc, #220]	; (810162c <HAL_I2C_MspInit+0x1a4>)
 810154e:	f003 fb33 	bl	8104bb8 <HAL_GPIO_Init>
=======
 810154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101552:	4619      	mov	r1, r3
 8101554:	4837      	ldr	r0, [pc, #220]	; (8101634 <HAL_I2C_MspInit+0x1a4>)
 8101556:	f003 fa65 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101552:	4b35      	ldr	r3, [pc, #212]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101558:	4a33      	ldr	r2, [pc, #204]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810155a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810155e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101562:	4b31      	ldr	r3, [pc, #196]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810156c:	617b      	str	r3, [r7, #20]
 810156e:	697b      	ldr	r3, [r7, #20]
}
 8101570:	e053      	b.n	810161a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	681b      	ldr	r3, [r3, #0]
 8101576:	4a2f      	ldr	r2, [pc, #188]	; (8101634 <HAL_I2C_MspInit+0x1ac>)
 8101578:	4293      	cmp	r3, r2
 810157a:	d14e      	bne.n	810161a <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810157c:	4b2a      	ldr	r3, [pc, #168]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101582:	4a29      	ldr	r2, [pc, #164]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101584:	f043 0304 	orr.w	r3, r3, #4
 8101588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810158c:	4b26      	ldr	r3, [pc, #152]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101592:	f003 0304 	and.w	r3, r3, #4
 8101596:	613b      	str	r3, [r7, #16]
 8101598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810159a:	4b23      	ldr	r3, [pc, #140]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015a0:	4a21      	ldr	r2, [pc, #132]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81015a2:	f043 0301 	orr.w	r3, r3, #1
 81015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015aa:	4b1f      	ldr	r3, [pc, #124]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015b0:	f003 0301 	and.w	r3, r3, #1
 81015b4:	60fb      	str	r3, [r7, #12]
 81015b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81015b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 81015bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015be:	2312      	movs	r3, #18
 81015c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 81015c2:	2301      	movs	r3, #1
 81015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81015c6:	2303      	movs	r3, #3
 81015c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015ca:	2304      	movs	r3, #4
 81015cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 81015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015d2:	4619      	mov	r1, r3
 81015d4:	4818      	ldr	r0, [pc, #96]	; (8101638 <HAL_I2C_MspInit+0x1b0>)
 81015d6:	f003 faef 	bl	8104bb8 <HAL_GPIO_Init>
=======
 81015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015da:	4619      	mov	r1, r3
 81015dc:	4818      	ldr	r0, [pc, #96]	; (8101640 <HAL_I2C_MspInit+0x1b0>)
 81015de:	f003 fa21 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 81015da:	f44f 7380 	mov.w	r3, #256	; 0x100
 81015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015e0:	2312      	movs	r3, #18
 81015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 81015e4:	2301      	movs	r3, #1
 81015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81015e8:	2303      	movs	r3, #3
 81015ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015ec:	2304      	movs	r3, #4
 81015ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 81015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015f4:	4619      	mov	r1, r3
 81015f6:	4811      	ldr	r0, [pc, #68]	; (810163c <HAL_I2C_MspInit+0x1b4>)
 81015f8:	f003 fade 	bl	8104bb8 <HAL_GPIO_Init>
=======
 81015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015fc:	4619      	mov	r1, r3
 81015fe:	4811      	ldr	r0, [pc, #68]	; (8101644 <HAL_I2C_MspInit+0x1b4>)
 8101600:	f003 fa10 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __HAL_RCC_I2C3_CLK_ENABLE();
 81015fc:	4b0a      	ldr	r3, [pc, #40]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81015fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101602:	4a09      	ldr	r2, [pc, #36]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810160c:	4b06      	ldr	r3, [pc, #24]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810160e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101616:	60bb      	str	r3, [r7, #8]
 8101618:	68bb      	ldr	r3, [r7, #8]
}
 810161a:	bf00      	nop
 810161c:	3738      	adds	r7, #56	; 0x38
 810161e:	46bd      	mov	sp, r7
 8101620:	bd80      	pop	{r7, pc}
 8101622:	bf00      	nop
 8101624:	40005400 	.word	0x40005400
 8101628:	58024400 	.word	0x58024400
 810162c:	58020400 	.word	0x58020400
 8101630:	40005800 	.word	0x40005800
 8101634:	40005c00 	.word	0x40005c00
 8101638:	58020800 	.word	0x58020800
 810163c:	58020000 	.word	0x58020000

08101640 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8101640:	b580      	push	{r7, lr}
 8101642:	b082      	sub	sp, #8
 8101644:	af00      	add	r7, sp, #0
 8101646:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8101648:	687b      	ldr	r3, [r7, #4]
 810164a:	681b      	ldr	r3, [r3, #0]
 810164c:	4a23      	ldr	r2, [pc, #140]	; (81016dc <HAL_I2C_MspDeInit+0x9c>)
 810164e:	4293      	cmp	r3, r2
 8101650:	d110      	bne.n	8101674 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8101652:	4b23      	ldr	r3, [pc, #140]	; (81016e0 <HAL_I2C_MspDeInit+0xa0>)
 8101654:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101658:	4a21      	ldr	r2, [pc, #132]	; (81016e0 <HAL_I2C_MspDeInit+0xa0>)
 810165a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810165e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8101662:	2140      	movs	r1, #64	; 0x40
 8101664:	481f      	ldr	r0, [pc, #124]	; (81016e4 <HAL_I2C_MspDeInit+0xa4>)
 8101666:	f003 fc57 	bl	8104f18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 810166a:	2180      	movs	r1, #128	; 0x80
 810166c:	481d      	ldr	r0, [pc, #116]	; (81016e4 <HAL_I2C_MspDeInit+0xa4>)
 810166e:	f003 fc53 	bl	8104f18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8101672:	e02e      	b.n	81016d2 <HAL_I2C_MspDeInit+0x92>
  else if(i2cHandle->Instance==I2C2)
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	681b      	ldr	r3, [r3, #0]
 8101678:	4a1b      	ldr	r2, [pc, #108]	; (81016e8 <HAL_I2C_MspDeInit+0xa8>)
 810167a:	4293      	cmp	r3, r2
 810167c:	d112      	bne.n	81016a4 <HAL_I2C_MspDeInit+0x64>
    __HAL_RCC_I2C2_CLK_DISABLE();
 810167e:	4b18      	ldr	r3, [pc, #96]	; (81016e0 <HAL_I2C_MspDeInit+0xa0>)
 8101680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101684:	4a16      	ldr	r2, [pc, #88]	; (81016e0 <HAL_I2C_MspDeInit+0xa0>)
 8101686:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 810168a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 810168e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8101692:	4814      	ldr	r0, [pc, #80]	; (81016e4 <HAL_I2C_MspDeInit+0xa4>)
 8101694:	f003 fc40 	bl	8104f18 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8101698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 810169c:	4811      	ldr	r0, [pc, #68]	; (81016e4 <HAL_I2C_MspDeInit+0xa4>)
 810169e:	f003 fc3b 	bl	8104f18 <HAL_GPIO_DeInit>
}
 81016a2:	e016      	b.n	81016d2 <HAL_I2C_MspDeInit+0x92>
  else if(i2cHandle->Instance==I2C3)
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	681b      	ldr	r3, [r3, #0]
 81016a8:	4a10      	ldr	r2, [pc, #64]	; (81016ec <HAL_I2C_MspDeInit+0xac>)
 81016aa:	4293      	cmp	r3, r2
 81016ac:	d111      	bne.n	81016d2 <HAL_I2C_MspDeInit+0x92>
    __HAL_RCC_I2C3_CLK_DISABLE();
 81016ae:	4b0c      	ldr	r3, [pc, #48]	; (81016e0 <HAL_I2C_MspDeInit+0xa0>)
 81016b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016b4:	4a0a      	ldr	r2, [pc, #40]	; (81016e0 <HAL_I2C_MspDeInit+0xa0>)
 81016b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 81016ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 81016be:	f44f 7100 	mov.w	r1, #512	; 0x200
 81016c2:	480b      	ldr	r0, [pc, #44]	; (81016f0 <HAL_I2C_MspDeInit+0xb0>)
 81016c4:	f003 fc28 	bl	8104f18 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 81016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 81016cc:	4809      	ldr	r0, [pc, #36]	; (81016f4 <HAL_I2C_MspDeInit+0xb4>)
 81016ce:	f003 fc23 	bl	8104f18 <HAL_GPIO_DeInit>
}
 81016d2:	bf00      	nop
 81016d4:	3708      	adds	r7, #8
 81016d6:	46bd      	mov	sp, r7
 81016d8:	bd80      	pop	{r7, pc}
 81016da:	bf00      	nop
 81016dc:	40005400 	.word	0x40005400
 81016e0:	58024400 	.word	0x58024400
 81016e4:	58020400 	.word	0x58020400
 81016e8:	40005800 	.word	0x40005800
 81016ec:	40005c00 	.word	0x40005c00
 81016f0:	58020800 	.word	0x58020800
 81016f4:	58020000 	.word	0x58020000

081016f8 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 81016f8:	b580      	push	{r7, lr}
 81016fa:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 81016fc:	4b0b      	ldr	r3, [pc, #44]	; (810172c <MX_IWDG2_Init+0x34>)
 81016fe:	4a0c      	ldr	r2, [pc, #48]	; (8101730 <MX_IWDG2_Init+0x38>)
 8101700:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 8101702:	4b0a      	ldr	r3, [pc, #40]	; (810172c <MX_IWDG2_Init+0x34>)
 8101704:	2200      	movs	r2, #0
 8101706:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 8101708:	4b08      	ldr	r3, [pc, #32]	; (810172c <MX_IWDG2_Init+0x34>)
 810170a:	f640 72ff 	movw	r2, #4095	; 0xfff
 810170e:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 8101710:	4b06      	ldr	r3, [pc, #24]	; (810172c <MX_IWDG2_Init+0x34>)
 8101712:	f640 72ff 	movw	r2, #4095	; 0xfff
 8101716:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
<<<<<<< HEAD
 8101718:	4804      	ldr	r0, [pc, #16]	; (810172c <MX_IWDG2_Init+0x34>)
 810171a:	f004 fea3 	bl	8106464 <HAL_IWDG_Init>
 810171e:	4603      	mov	r3, r0
 8101720:	2b00      	cmp	r3, #0
 8101722:	d001      	beq.n	8101728 <MX_IWDG2_Init+0x30>
=======
 8101668:	4804      	ldr	r0, [pc, #16]	; (810167c <MX_IWDG2_Init+0x34>)
 810166a:	f003 fd67 	bl	810513c <HAL_IWDG_Init>
 810166e:	4603      	mov	r3, r0
 8101670:	2b00      	cmp	r3, #0
 8101672:	d001      	beq.n	8101678 <MX_IWDG2_Init+0x30>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 8101724:	f000 f870 	bl	8101808 <Error_Handler>
  }

}
<<<<<<< HEAD
 8101728:	bf00      	nop
 810172a:	bd80      	pop	{r7, pc}
 810172c:	10045d94 	.word	0x10045d94
 8101730:	58004c00 	.word	0x58004c00
=======
 8101678:	bf00      	nop
 810167a:	bd80      	pop	{r7, pc}
 810167c:	100096f4 	.word	0x100096f4
 8101680:	58004c00 	.word	0x58004c00
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101734:	b580      	push	{r7, lr}
 8101736:	b082      	sub	sp, #8
 8101738:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810173a:	4b27      	ldr	r3, [pc, #156]	; (81017d8 <main+0xa4>)
 810173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101740:	4a25      	ldr	r2, [pc, #148]	; (81017d8 <main+0xa4>)
 8101742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810174a:	4b23      	ldr	r3, [pc, #140]	; (81017d8 <main+0xa4>)
 810174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101754:	607b      	str	r3, [r7, #4]
 8101756:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
<<<<<<< HEAD
 8101758:	2001      	movs	r0, #1
 810175a:	f003 fd35 	bl	81051c8 <HAL_HSEM_ActivateNotification>
=======
 81016a8:	2001      	movs	r0, #1
 81016aa:	f003 fbeb 	bl	8104e84 <HAL_HSEM_ActivateNotification>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
<<<<<<< HEAD
 810175e:	f004 ff51 	bl	8106604 <HAL_PWREx_ClearPendingEvent>
=======
 81016ae:	f003 fe11 	bl	81052d4 <HAL_PWREx_ClearPendingEvent>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
<<<<<<< HEAD
 8101762:	2201      	movs	r2, #1
 8101764:	2102      	movs	r1, #2
 8101766:	2000      	movs	r0, #0
 8101768:	f004 fed2 	bl	8106510 <HAL_PWREx_EnterSTOPMode>
=======
 81016b2:	2201      	movs	r2, #1
 81016b4:	2102      	movs	r1, #2
 81016b6:	2000      	movs	r0, #0
 81016b8:	f003 fd96 	bl	81051e8 <HAL_PWREx_EnterSTOPMode>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810176c:	4b1b      	ldr	r3, [pc, #108]	; (81017dc <main+0xa8>)
 810176e:	681b      	ldr	r3, [r3, #0]
 8101770:	091b      	lsrs	r3, r3, #4
 8101772:	f003 030f 	and.w	r3, r3, #15
 8101776:	2b07      	cmp	r3, #7
 8101778:	d108      	bne.n	810178c <main+0x58>
 810177a:	4b19      	ldr	r3, [pc, #100]	; (81017e0 <main+0xac>)
 810177c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101780:	4a17      	ldr	r2, [pc, #92]	; (81017e0 <main+0xac>)
 8101782:	f043 0301 	orr.w	r3, r3, #1
 8101786:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810178a:	e007      	b.n	810179c <main+0x68>
 810178c:	4b14      	ldr	r3, [pc, #80]	; (81017e0 <main+0xac>)
 810178e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101792:	4a13      	ldr	r2, [pc, #76]	; (81017e0 <main+0xac>)
 8101794:	f043 0301 	orr.w	r3, r3, #1
 8101798:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 810179c:	f000 fd64 	bl	8102268 <HAL_Init>
=======
 81016ec:	f000 fcf4 	bl	81020d8 <HAL_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81017a0:	f7ff fd5a 	bl	8101258 <MX_GPIO_Init>
  MX_DMA_Init();
 81017a4:	f7ff fcd0 	bl	8101148 <MX_DMA_Init>
  MX_IWDG2_Init();
 81017a8:	f7ff ffa6 	bl	81016f8 <MX_IWDG2_Init>
  MX_FATFS_Init();
<<<<<<< HEAD
 81017ac:	f007 fcb8 	bl	8109120 <MX_FATFS_Init>
=======
 81016fc:	f006 fbac 	bl	8107e58 <MX_FATFS_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  MX_I2C1_Init();
 81017b0:	f7ff fda8 	bl	8101304 <MX_I2C1_Init>
  MX_SPI1_Init();
 81017b4:	f000 f82e 	bl	8101814 <MX_SPI1_Init>
  MX_USART3_UART_Init();
<<<<<<< HEAD
 81017b8:	f000 fc30 	bl	810201c <MX_USART3_UART_Init>
=======
 8101708:	f000 fbc0 	bl	8101e8c <MX_USART3_UART_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  MX_I2C2_Init();
 81017bc:	f7ff fde4 	bl	8101388 <MX_I2C2_Init>
  MX_I2C3_Init();
 81017c0:	f7ff fe22 	bl	8101408 <MX_I2C3_Init>
  MX_SPI3_Init();
 81017c4:	f000 f87c 	bl	81018c0 <MX_SPI3_Init>
  MX_SPI4_Init();
 81017c8:	f000 f8d0 	bl	810196c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 81017cc:	f7ff fd1e 	bl	810120c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 81017d0:	f007 fd83 	bl	81092da <osKernelStart>
=======
 8101720:	f006 fc77 	bl	8108012 <osKernelStart>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81017d4:	e7fe      	b.n	81017d4 <main+0xa0>
 81017d6:	bf00      	nop
 81017d8:	58024400 	.word	0x58024400
 81017dc:	e000ed00 	.word	0xe000ed00
 81017e0:	58026400 	.word	0x58026400

081017e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81017e4:	b580      	push	{r7, lr}
 81017e6:	b082      	sub	sp, #8
 81017e8:	af00      	add	r7, sp, #0
 81017ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 81017ec:	687b      	ldr	r3, [r7, #4]
 81017ee:	681b      	ldr	r3, [r3, #0]
 81017f0:	4a04      	ldr	r2, [pc, #16]	; (8101804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81017f2:	4293      	cmp	r3, r2
 81017f4:	d101      	bne.n	81017fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
<<<<<<< HEAD
 81017f6:	f000 fd95 	bl	8102324 <HAL_IncTick>
=======
 8101746:	f000 fd25 	bl	8102194 <HAL_IncTick>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81017fa:	bf00      	nop
 81017fc:	3708      	adds	r7, #8
 81017fe:	46bd      	mov	sp, r7
 8101800:	bd80      	pop	{r7, pc}
 8101802:	bf00      	nop
 8101804:	40010400 	.word	0x40010400

08101808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101808:	b480      	push	{r7}
 810180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810180c:	b672      	cpsid	i
}
 810180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101810:	e7fe      	b.n	8101810 <Error_Handler+0x8>
	...

08101814 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101814:	b580      	push	{r7, lr}
 8101816:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8101818:	4b27      	ldr	r3, [pc, #156]	; (81018b8 <MX_SPI1_Init+0xa4>)
 810181a:	4a28      	ldr	r2, [pc, #160]	; (81018bc <MX_SPI1_Init+0xa8>)
 810181c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810181e:	4b26      	ldr	r3, [pc, #152]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101820:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101826:	4b24      	ldr	r3, [pc, #144]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101828:	2200      	movs	r2, #0
 810182a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 810182c:	4b22      	ldr	r3, [pc, #136]	; (81018b8 <MX_SPI1_Init+0xa4>)
 810182e:	2203      	movs	r2, #3
 8101830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101832:	4b21      	ldr	r3, [pc, #132]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101834:	2200      	movs	r2, #0
 8101836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101838:	4b1f      	ldr	r3, [pc, #124]	; (81018b8 <MX_SPI1_Init+0xa4>)
 810183a:	2200      	movs	r2, #0
 810183c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810183e:	4b1e      	ldr	r3, [pc, #120]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101840:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8101846:	4b1c      	ldr	r3, [pc, #112]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810184c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810184e:	4b1a      	ldr	r3, [pc, #104]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101850:	2200      	movs	r2, #0
 8101852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101854:	4b18      	ldr	r3, [pc, #96]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101856:	2200      	movs	r2, #0
 8101858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810185a:	4b17      	ldr	r3, [pc, #92]	; (81018b8 <MX_SPI1_Init+0xa4>)
 810185c:	2200      	movs	r2, #0
 810185e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101860:	4b15      	ldr	r3, [pc, #84]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101862:	2200      	movs	r2, #0
 8101864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101866:	4b14      	ldr	r3, [pc, #80]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810186c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810186e:	4b12      	ldr	r3, [pc, #72]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101870:	2200      	movs	r2, #0
 8101872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101874:	4b10      	ldr	r3, [pc, #64]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101876:	2200      	movs	r2, #0
 8101878:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810187a:	4b0f      	ldr	r3, [pc, #60]	; (81018b8 <MX_SPI1_Init+0xa4>)
 810187c:	2200      	movs	r2, #0
 810187e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101880:	4b0d      	ldr	r3, [pc, #52]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101882:	2200      	movs	r2, #0
 8101884:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101886:	4b0c      	ldr	r3, [pc, #48]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101888:	2200      	movs	r2, #0
 810188a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810188c:	4b0a      	ldr	r3, [pc, #40]	; (81018b8 <MX_SPI1_Init+0xa4>)
 810188e:	2200      	movs	r2, #0
 8101890:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101892:	4b09      	ldr	r3, [pc, #36]	; (81018b8 <MX_SPI1_Init+0xa4>)
 8101894:	2200      	movs	r2, #0
 8101896:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101898:	4b07      	ldr	r3, [pc, #28]	; (81018b8 <MX_SPI1_Init+0xa4>)
 810189a:	2200      	movs	r2, #0
 810189c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810189e:	4b06      	ldr	r3, [pc, #24]	; (81018b8 <MX_SPI1_Init+0xa4>)
 81018a0:	2200      	movs	r2, #0
 81018a2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
<<<<<<< HEAD
 81018a4:	4804      	ldr	r0, [pc, #16]	; (81018b8 <MX_SPI1_Init+0xa4>)
 81018a6:	f005 fb93 	bl	8106fd0 <HAL_SPI_Init>
 81018aa:	4603      	mov	r3, r0
 81018ac:	2b00      	cmp	r3, #0
 81018ae:	d001      	beq.n	81018b4 <MX_SPI1_Init+0xa0>
=======
 81017f0:	4804      	ldr	r0, [pc, #16]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017f2:	f004 fa3d 	bl	8105c70 <HAL_SPI_Init>
 81017f6:	4603      	mov	r3, r0
 81017f8:	2b00      	cmp	r3, #0
 81017fa:	d001      	beq.n	8101800 <MX_SPI1_Init+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 81018b0:	f7ff ffaa 	bl	8101808 <Error_Handler>
  }

}
<<<<<<< HEAD
 81018b4:	bf00      	nop
 81018b6:	bd80      	pop	{r7, pc}
 81018b8:	10045eb4 	.word	0x10045eb4
 81018bc:	40013000 	.word	0x40013000
=======
 8101800:	bf00      	nop
 8101802:	bd80      	pop	{r7, pc}
 8101804:	10009814 	.word	0x10009814
 8101808:	40013000 	.word	0x40013000
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

081018c0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 81018c0:	b580      	push	{r7, lr}
 81018c2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 81018c4:	4b27      	ldr	r3, [pc, #156]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018c6:	4a28      	ldr	r2, [pc, #160]	; (8101968 <MX_SPI3_Init+0xa8>)
 81018c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 81018ca:	4b26      	ldr	r3, [pc, #152]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81018d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 81018d2:	4b24      	ldr	r3, [pc, #144]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018d4:	2200      	movs	r2, #0
 81018d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 81018d8:	4b22      	ldr	r3, [pc, #136]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018da:	2203      	movs	r2, #3
 81018dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 81018de:	4b21      	ldr	r3, [pc, #132]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018e0:	2200      	movs	r2, #0
 81018e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 81018e4:	4b1f      	ldr	r3, [pc, #124]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018e6:	2200      	movs	r2, #0
 81018e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 81018ea:	4b1e      	ldr	r3, [pc, #120]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81018f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 81018f2:	4b1c      	ldr	r3, [pc, #112]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81018f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81018fa:	4b1a      	ldr	r3, [pc, #104]	; (8101964 <MX_SPI3_Init+0xa4>)
 81018fc:	2200      	movs	r2, #0
 81018fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8101900:	4b18      	ldr	r3, [pc, #96]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101902:	2200      	movs	r2, #0
 8101904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101906:	4b17      	ldr	r3, [pc, #92]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101908:	2200      	movs	r2, #0
 810190a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 810190c:	4b15      	ldr	r3, [pc, #84]	; (8101964 <MX_SPI3_Init+0xa4>)
 810190e:	2200      	movs	r2, #0
 8101910:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101912:	4b14      	ldr	r3, [pc, #80]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101918:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810191a:	4b12      	ldr	r3, [pc, #72]	; (8101964 <MX_SPI3_Init+0xa4>)
 810191c:	2200      	movs	r2, #0
 810191e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101920:	4b10      	ldr	r3, [pc, #64]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101922:	2200      	movs	r2, #0
 8101924:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101926:	4b0f      	ldr	r3, [pc, #60]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101928:	2200      	movs	r2, #0
 810192a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810192c:	4b0d      	ldr	r3, [pc, #52]	; (8101964 <MX_SPI3_Init+0xa4>)
 810192e:	2200      	movs	r2, #0
 8101930:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101932:	4b0c      	ldr	r3, [pc, #48]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101934:	2200      	movs	r2, #0
 8101936:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101938:	4b0a      	ldr	r3, [pc, #40]	; (8101964 <MX_SPI3_Init+0xa4>)
 810193a:	2200      	movs	r2, #0
 810193c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810193e:	4b09      	ldr	r3, [pc, #36]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101940:	2200      	movs	r2, #0
 8101942:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101944:	4b07      	ldr	r3, [pc, #28]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101946:	2200      	movs	r2, #0
 8101948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810194a:	4b06      	ldr	r3, [pc, #24]	; (8101964 <MX_SPI3_Init+0xa4>)
 810194c:	2200      	movs	r2, #0
 810194e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
<<<<<<< HEAD
 8101950:	4804      	ldr	r0, [pc, #16]	; (8101964 <MX_SPI3_Init+0xa4>)
 8101952:	f005 fb3d 	bl	8106fd0 <HAL_SPI_Init>
 8101956:	4603      	mov	r3, r0
 8101958:	2b00      	cmp	r3, #0
 810195a:	d001      	beq.n	8101960 <MX_SPI3_Init+0xa0>
=======
 810189c:	4804      	ldr	r0, [pc, #16]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810189e:	f004 f9e7 	bl	8105c70 <HAL_SPI_Init>
 81018a2:	4603      	mov	r3, r0
 81018a4:	2b00      	cmp	r3, #0
 81018a6:	d001      	beq.n	81018ac <MX_SPI3_Init+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 810195c:	f7ff ff54 	bl	8101808 <Error_Handler>
  }

}
<<<<<<< HEAD
 8101960:	bf00      	nop
 8101962:	bd80      	pop	{r7, pc}
 8101964:	10045da4 	.word	0x10045da4
 8101968:	40003c00 	.word	0x40003c00
=======
 81018ac:	bf00      	nop
 81018ae:	bd80      	pop	{r7, pc}
 81018b0:	10009704 	.word	0x10009704
 81018b4:	40003c00 	.word	0x40003c00
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

0810196c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 810196c:	b580      	push	{r7, lr}
 810196e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8101970:	4b27      	ldr	r3, [pc, #156]	; (8101a10 <MX_SPI4_Init+0xa4>)
 8101972:	4a28      	ldr	r2, [pc, #160]	; (8101a14 <MX_SPI4_Init+0xa8>)
 8101974:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8101976:	4b26      	ldr	r3, [pc, #152]	; (8101a10 <MX_SPI4_Init+0xa4>)
 8101978:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810197c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 810197e:	4b24      	ldr	r3, [pc, #144]	; (8101a10 <MX_SPI4_Init+0xa4>)
 8101980:	2200      	movs	r2, #0
 8101982:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8101984:	4b22      	ldr	r3, [pc, #136]	; (8101a10 <MX_SPI4_Init+0xa4>)
 8101986:	2203      	movs	r2, #3
 8101988:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 810198a:	4b21      	ldr	r3, [pc, #132]	; (8101a10 <MX_SPI4_Init+0xa4>)
 810198c:	2200      	movs	r2, #0
 810198e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101990:	4b1f      	ldr	r3, [pc, #124]	; (8101a10 <MX_SPI4_Init+0xa4>)
 8101992:	2200      	movs	r2, #0
 8101994:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8101996:	4b1e      	ldr	r3, [pc, #120]	; (8101a10 <MX_SPI4_Init+0xa4>)
 8101998:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810199c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 810199e:	4b1c      	ldr	r3, [pc, #112]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019a0:	2200      	movs	r2, #0
 81019a2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81019a4:	4b1a      	ldr	r3, [pc, #104]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019a6:	2200      	movs	r2, #0
 81019a8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 81019aa:	4b19      	ldr	r3, [pc, #100]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019ac:	2200      	movs	r2, #0
 81019ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81019b0:	4b17      	ldr	r3, [pc, #92]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019b2:	2200      	movs	r2, #0
 81019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 81019b6:	4b16      	ldr	r3, [pc, #88]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019b8:	2200      	movs	r2, #0
 81019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81019bc:	4b14      	ldr	r3, [pc, #80]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81019c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81019c4:	4b12      	ldr	r3, [pc, #72]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019c6:	2200      	movs	r2, #0
 81019c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81019ca:	4b11      	ldr	r3, [pc, #68]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019cc:	2200      	movs	r2, #0
 81019ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81019d0:	4b0f      	ldr	r3, [pc, #60]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019d2:	2200      	movs	r2, #0
 81019d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81019d6:	4b0e      	ldr	r3, [pc, #56]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019d8:	2200      	movs	r2, #0
 81019da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81019dc:	4b0c      	ldr	r3, [pc, #48]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019de:	2200      	movs	r2, #0
 81019e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81019e2:	4b0b      	ldr	r3, [pc, #44]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019e4:	2200      	movs	r2, #0
 81019e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81019e8:	4b09      	ldr	r3, [pc, #36]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019ea:	2200      	movs	r2, #0
 81019ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81019ee:	4b08      	ldr	r3, [pc, #32]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019f0:	2200      	movs	r2, #0
 81019f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81019f4:	4b06      	ldr	r3, [pc, #24]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019f6:	2200      	movs	r2, #0
 81019f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
<<<<<<< HEAD
 81019fa:	4805      	ldr	r0, [pc, #20]	; (8101a10 <MX_SPI4_Init+0xa4>)
 81019fc:	f005 fae8 	bl	8106fd0 <HAL_SPI_Init>
 8101a00:	4603      	mov	r3, r0
 8101a02:	2b00      	cmp	r3, #0
 8101a04:	d001      	beq.n	8101a0a <MX_SPI4_Init+0x9e>
=======
 8101946:	4805      	ldr	r0, [pc, #20]	; (810195c <MX_SPI4_Init+0xa4>)
 8101948:	f004 f992 	bl	8105c70 <HAL_SPI_Init>
 810194c:	4603      	mov	r3, r0
 810194e:	2b00      	cmp	r3, #0
 8101950:	d001      	beq.n	8101956 <MX_SPI4_Init+0x9e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
 8101a06:	f7ff feff 	bl	8101808 <Error_Handler>
  }

}
<<<<<<< HEAD
 8101a0a:	bf00      	nop
 8101a0c:	bd80      	pop	{r7, pc}
 8101a0e:	bf00      	nop
 8101a10:	10045e2c 	.word	0x10045e2c
 8101a14:	40013400 	.word	0x40013400
=======
 8101956:	bf00      	nop
 8101958:	bd80      	pop	{r7, pc}
 810195a:	bf00      	nop
 810195c:	1000978c 	.word	0x1000978c
 8101960:	40013400 	.word	0x40013400
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101a18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101a18:	b580      	push	{r7, lr}
 8101a1a:	b090      	sub	sp, #64	; 0x40
 8101a1c:	af00      	add	r7, sp, #0
 8101a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101a24:	2200      	movs	r2, #0
 8101a26:	601a      	str	r2, [r3, #0]
 8101a28:	605a      	str	r2, [r3, #4]
 8101a2a:	609a      	str	r2, [r3, #8]
 8101a2c:	60da      	str	r2, [r3, #12]
 8101a2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	4aa0      	ldr	r2, [pc, #640]	; (8101cb8 <HAL_SPI_MspInit+0x2a0>)
 8101a36:	4293      	cmp	r3, r2
 8101a38:	f040 80b2 	bne.w	8101ba0 <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101a3c:	4b9f      	ldr	r3, [pc, #636]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a42:	4a9e      	ldr	r2, [pc, #632]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101a48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101a4c:	4b9b      	ldr	r3, [pc, #620]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8101a58:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a5a:	4b98      	ldr	r3, [pc, #608]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a60:	4a96      	ldr	r2, [pc, #600]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a62:	f043 0301 	orr.w	r3, r3, #1
 8101a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a6a:	4b94      	ldr	r3, [pc, #592]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a70:	f003 0301 	and.w	r3, r3, #1
 8101a74:	627b      	str	r3, [r7, #36]	; 0x24
 8101a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a78:	4b90      	ldr	r3, [pc, #576]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a7e:	4a8f      	ldr	r2, [pc, #572]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a80:	f043 0308 	orr.w	r3, r3, #8
 8101a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a88:	4b8c      	ldr	r3, [pc, #560]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a8e:	f003 0308 	and.w	r3, r3, #8
 8101a92:	623b      	str	r3, [r7, #32]
 8101a94:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8101a96:	2360      	movs	r3, #96	; 0x60
 8101a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a9a:	2302      	movs	r3, #2
 8101a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a9e:	2300      	movs	r3, #0
 8101aa0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101aa2:	2300      	movs	r3, #0
 8101aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101aa6:	2305      	movs	r3, #5
 8101aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8101aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101aae:	4619      	mov	r1, r3
 8101ab0:	4883      	ldr	r0, [pc, #524]	; (8101cc0 <HAL_SPI_MspInit+0x2a8>)
 8101ab2:	f003 f881 	bl	8104bb8 <HAL_GPIO_Init>
=======
 81019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81019fa:	4619      	mov	r1, r3
 81019fc:	4883      	ldr	r0, [pc, #524]	; (8101c0c <HAL_SPI_MspInit+0x2a8>)
 81019fe:	f003 f811 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101ab6:	2380      	movs	r3, #128	; 0x80
 8101ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101aba:	2302      	movs	r3, #2
 8101abc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101abe:	2300      	movs	r3, #0
 8101ac0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ac2:	2300      	movs	r3, #0
 8101ac4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101ac6:	2305      	movs	r3, #5
 8101ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
<<<<<<< HEAD
 8101aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101ace:	4619      	mov	r1, r3
 8101ad0:	487c      	ldr	r0, [pc, #496]	; (8101cc4 <HAL_SPI_MspInit+0x2ac>)
 8101ad2:	f003 f871 	bl	8104bb8 <HAL_GPIO_Init>
=======
 8101a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101a1a:	4619      	mov	r1, r3
 8101a1c:	487c      	ldr	r0, [pc, #496]	; (8101c10 <HAL_SPI_MspInit+0x2ac>)
 8101a1e:	f003 f801 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101ad6:	4b7c      	ldr	r3, [pc, #496]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101ad8:	4a7c      	ldr	r2, [pc, #496]	; (8101ccc <HAL_SPI_MspInit+0x2b4>)
 8101ada:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101adc:	4b7a      	ldr	r3, [pc, #488]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101ade:	2225      	movs	r2, #37	; 0x25
 8101ae0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101ae2:	4b79      	ldr	r3, [pc, #484]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101ae4:	2200      	movs	r2, #0
 8101ae6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101ae8:	4b77      	ldr	r3, [pc, #476]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101aea:	2200      	movs	r2, #0
 8101aec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101aee:	4b76      	ldr	r3, [pc, #472]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101af4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101af6:	4b74      	ldr	r3, [pc, #464]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101af8:	2200      	movs	r2, #0
 8101afa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101afc:	4b72      	ldr	r3, [pc, #456]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101afe:	2200      	movs	r2, #0
 8101b00:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8101b02:	4b71      	ldr	r3, [pc, #452]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101b04:	2200      	movs	r2, #0
 8101b06:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101b08:	4b6f      	ldr	r3, [pc, #444]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101b0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101b0e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101b10:	4b6d      	ldr	r3, [pc, #436]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101b12:	2200      	movs	r2, #0
 8101b14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
<<<<<<< HEAD
 8101b16:	486c      	ldr	r0, [pc, #432]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101b18:	f000 fd34 	bl	8102584 <HAL_DMA_Init>
 8101b1c:	4603      	mov	r3, r0
 8101b1e:	2b00      	cmp	r3, #0
 8101b20:	d001      	beq.n	8101b26 <HAL_SPI_MspInit+0x10e>
=======
 8101a62:	486c      	ldr	r0, [pc, #432]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a64:	f000 fcc4 	bl	81023f0 <HAL_DMA_Init>
 8101a68:	4603      	mov	r3, r0
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d001      	beq.n	8101a72 <HAL_SPI_MspInit+0x10e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      Error_Handler();
 8101b22:	f7ff fe71 	bl	8101808 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	4a67      	ldr	r2, [pc, #412]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101b2a:	67da      	str	r2, [r3, #124]	; 0x7c
 8101b2c:	4a66      	ldr	r2, [pc, #408]	; (8101cc8 <HAL_SPI_MspInit+0x2b0>)
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101b32:	4b67      	ldr	r3, [pc, #412]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b34:	4a67      	ldr	r2, [pc, #412]	; (8101cd4 <HAL_SPI_MspInit+0x2bc>)
 8101b36:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101b38:	4b65      	ldr	r3, [pc, #404]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b3a:	2226      	movs	r2, #38	; 0x26
 8101b3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101b3e:	4b64      	ldr	r3, [pc, #400]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b40:	2240      	movs	r2, #64	; 0x40
 8101b42:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101b44:	4b62      	ldr	r3, [pc, #392]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b46:	2200      	movs	r2, #0
 8101b48:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101b4a:	4b61      	ldr	r3, [pc, #388]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101b50:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101b52:	4b5f      	ldr	r3, [pc, #380]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b54:	2200      	movs	r2, #0
 8101b56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101b58:	4b5d      	ldr	r3, [pc, #372]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b5a:	2200      	movs	r2, #0
 8101b5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101b5e:	4b5c      	ldr	r3, [pc, #368]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b60:	2200      	movs	r2, #0
 8101b62:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101b64:	4b5a      	ldr	r3, [pc, #360]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101b6a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101b6c:	4b58      	ldr	r3, [pc, #352]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b6e:	2200      	movs	r2, #0
 8101b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
<<<<<<< HEAD
 8101b72:	4857      	ldr	r0, [pc, #348]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b74:	f000 fd06 	bl	8102584 <HAL_DMA_Init>
 8101b78:	4603      	mov	r3, r0
 8101b7a:	2b00      	cmp	r3, #0
 8101b7c:	d001      	beq.n	8101b82 <HAL_SPI_MspInit+0x16a>
=======
 8101abe:	4857      	ldr	r0, [pc, #348]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ac0:	f000 fc96 	bl	81023f0 <HAL_DMA_Init>
 8101ac4:	4603      	mov	r3, r0
 8101ac6:	2b00      	cmp	r3, #0
 8101ac8:	d001      	beq.n	8101ace <HAL_SPI_MspInit+0x16a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      Error_Handler();
 8101b7e:	f7ff fe43 	bl	8101808 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	4a52      	ldr	r2, [pc, #328]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b86:	679a      	str	r2, [r3, #120]	; 0x78
 8101b88:	4a51      	ldr	r2, [pc, #324]	; (8101cd0 <HAL_SPI_MspInit+0x2b8>)
 8101b8a:	687b      	ldr	r3, [r7, #4]
 8101b8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
<<<<<<< HEAD
 8101b8e:	2200      	movs	r2, #0
 8101b90:	2105      	movs	r1, #5
 8101b92:	2023      	movs	r0, #35	; 0x23
 8101b94:	f000 fcb5 	bl	8102502 <HAL_NVIC_SetPriority>
=======
 8101ada:	2200      	movs	r2, #0
 8101adc:	2105      	movs	r1, #5
 8101ade:	2023      	movs	r0, #35	; 0x23
 8101ae0:	f000 fc45 	bl	810236e <HAL_NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
<<<<<<< HEAD
 8101b98:	2023      	movs	r0, #35	; 0x23
 8101b9a:	f000 fccc 	bl	8102536 <HAL_NVIC_EnableIRQ>
=======
 8101ae4:	2023      	movs	r0, #35	; 0x23
 8101ae6:	f000 fc5c 	bl	81023a2 <HAL_NVIC_EnableIRQ>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8101b9e:	e086      	b.n	8101cae <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI3)
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	681b      	ldr	r3, [r3, #0]
 8101ba4:	4a4c      	ldr	r2, [pc, #304]	; (8101cd8 <HAL_SPI_MspInit+0x2c0>)
 8101ba6:	4293      	cmp	r3, r2
 8101ba8:	d14e      	bne.n	8101c48 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8101baa:	4b44      	ldr	r3, [pc, #272]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bb0:	4a42      	ldr	r2, [pc, #264]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101bba:	4b40      	ldr	r3, [pc, #256]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101bc4:	61fb      	str	r3, [r7, #28]
 8101bc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101bc8:	4b3c      	ldr	r3, [pc, #240]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bce:	4a3b      	ldr	r2, [pc, #236]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101bd0:	f043 0302 	orr.w	r3, r3, #2
 8101bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bd8:	4b38      	ldr	r3, [pc, #224]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bde:	f003 0302 	and.w	r3, r3, #2
 8101be2:	61bb      	str	r3, [r7, #24]
 8101be4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101be6:	4b35      	ldr	r3, [pc, #212]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bec:	4a33      	ldr	r2, [pc, #204]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101bee:	f043 0304 	orr.w	r3, r3, #4
 8101bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bf6:	4b31      	ldr	r3, [pc, #196]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bfc:	f003 0304 	and.w	r3, r3, #4
 8101c00:	617b      	str	r3, [r7, #20]
 8101c02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101c04:	2304      	movs	r3, #4
 8101c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c08:	2302      	movs	r3, #2
 8101c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c0c:	2300      	movs	r3, #0
 8101c0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c10:	2300      	movs	r3, #0
 8101c12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8101c14:	2307      	movs	r3, #7
 8101c16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8101c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101c1c:	4619      	mov	r1, r3
 8101c1e:	482f      	ldr	r0, [pc, #188]	; (8101cdc <HAL_SPI_MspInit+0x2c4>)
 8101c20:	f002 ffca 	bl	8104bb8 <HAL_GPIO_Init>
=======
 8101b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b68:	4619      	mov	r1, r3
 8101b6a:	482f      	ldr	r0, [pc, #188]	; (8101c28 <HAL_SPI_MspInit+0x2c4>)
 8101b6c:	f002 ff5a 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101c24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c2a:	2302      	movs	r3, #2
 8101c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c2e:	2300      	movs	r3, #0
 8101c30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c32:	2300      	movs	r3, #0
 8101c34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8101c36:	2306      	movs	r3, #6
 8101c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 8101c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101c3e:	4619      	mov	r1, r3
 8101c40:	4827      	ldr	r0, [pc, #156]	; (8101ce0 <HAL_SPI_MspInit+0x2c8>)
 8101c42:	f002 ffb9 	bl	8104bb8 <HAL_GPIO_Init>
=======
 8101b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b8a:	4619      	mov	r1, r3
 8101b8c:	4827      	ldr	r0, [pc, #156]	; (8101c2c <HAL_SPI_MspInit+0x2c8>)
 8101b8e:	f002 ff49 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
 8101c46:	e032      	b.n	8101cae <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI4)
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	4a25      	ldr	r2, [pc, #148]	; (8101ce4 <HAL_SPI_MspInit+0x2cc>)
 8101c4e:	4293      	cmp	r3, r2
 8101c50:	d12d      	bne.n	8101cae <HAL_SPI_MspInit+0x296>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8101c52:	4b1a      	ldr	r3, [pc, #104]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c58:	4a18      	ldr	r2, [pc, #96]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101c5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8101c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101c62:	4b16      	ldr	r3, [pc, #88]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101c6c:	613b      	str	r3, [r7, #16]
 8101c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101c70:	4b12      	ldr	r3, [pc, #72]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c76:	4a11      	ldr	r2, [pc, #68]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101c78:	f043 0310 	orr.w	r3, r3, #16
 8101c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c80:	4b0e      	ldr	r3, [pc, #56]	; (8101cbc <HAL_SPI_MspInit+0x2a4>)
 8101c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c86:	f003 0310 	and.w	r3, r3, #16
 8101c8a:	60fb      	str	r3, [r7, #12]
 8101c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8101c8e:	2364      	movs	r3, #100	; 0x64
 8101c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c92:	2302      	movs	r3, #2
 8101c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c96:	2300      	movs	r3, #0
 8101c98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c9a:	2300      	movs	r3, #0
 8101c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101c9e:	2305      	movs	r3, #5
 8101ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
<<<<<<< HEAD
 8101ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101ca6:	4619      	mov	r1, r3
 8101ca8:	480f      	ldr	r0, [pc, #60]	; (8101ce8 <HAL_SPI_MspInit+0x2d0>)
 8101caa:	f002 ff85 	bl	8104bb8 <HAL_GPIO_Init>
=======
 8101bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bf2:	4619      	mov	r1, r3
 8101bf4:	480f      	ldr	r0, [pc, #60]	; (8101c34 <HAL_SPI_MspInit+0x2d0>)
 8101bf6:	f002 ff15 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8101cae:	bf00      	nop
 8101cb0:	3740      	adds	r7, #64	; 0x40
 8101cb2:	46bd      	mov	sp, r7
 8101cb4:	bd80      	pop	{r7, pc}
 8101cb6:	bf00      	nop
 8101cb8:	40013000 	.word	0x40013000
 8101cbc:	58024400 	.word	0x58024400
 8101cc0:	58020000 	.word	0x58020000
 8101cc4:	58020c00 	.word	0x58020c00
 8101cc8:	10045f3c 	.word	0x10045f3c
 8101ccc:	40020010 	.word	0x40020010
 8101cd0:	10045fb4 	.word	0x10045fb4
 8101cd4:	40020028 	.word	0x40020028
 8101cd8:	40003c00 	.word	0x40003c00
 8101cdc:	58020400 	.word	0x58020400
 8101ce0:	58020800 	.word	0x58020800
 8101ce4:	40013400 	.word	0x40013400
 8101ce8:	58021000 	.word	0x58021000
=======
 8101bfa:	bf00      	nop
 8101bfc:	3740      	adds	r7, #64	; 0x40
 8101bfe:	46bd      	mov	sp, r7
 8101c00:	bd80      	pop	{r7, pc}
 8101c02:	bf00      	nop
 8101c04:	40013000 	.word	0x40013000
 8101c08:	58024400 	.word	0x58024400
 8101c0c:	58020000 	.word	0x58020000
 8101c10:	58020c00 	.word	0x58020c00
 8101c14:	1000989c 	.word	0x1000989c
 8101c18:	40020010 	.word	0x40020010
 8101c1c:	10009914 	.word	0x10009914
 8101c20:	40020028 	.word	0x40020028
 8101c24:	40003c00 	.word	0x40003c00
 8101c28:	58020400 	.word	0x58020400
 8101c2c:	58020800 	.word	0x58020800
 8101c30:	40013400 	.word	0x40013400
 8101c34:	58021000 	.word	0x58021000
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101cec:	b580      	push	{r7, lr}
 8101cee:	b082      	sub	sp, #8
 8101cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101cf2:	4b0c      	ldr	r3, [pc, #48]	; (8101d24 <HAL_MspInit+0x38>)
 8101cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101cf8:	4a0a      	ldr	r2, [pc, #40]	; (8101d24 <HAL_MspInit+0x38>)
 8101cfa:	f043 0302 	orr.w	r3, r3, #2
 8101cfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101d02:	4b08      	ldr	r3, [pc, #32]	; (8101d24 <HAL_MspInit+0x38>)
 8101d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d08:	f003 0302 	and.w	r3, r3, #2
 8101d0c:	607b      	str	r3, [r7, #4]
 8101d0e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 8101d10:	2200      	movs	r2, #0
 8101d12:	210f      	movs	r1, #15
 8101d14:	f06f 0001 	mvn.w	r0, #1
 8101d18:	f000 fbf3 	bl	8102502 <HAL_NVIC_SetPriority>
=======
 8101c5c:	2200      	movs	r2, #0
 8101c5e:	210f      	movs	r1, #15
 8101c60:	f06f 0001 	mvn.w	r0, #1
 8101c64:	f000 fb83 	bl	810236e <HAL_NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101d1c:	bf00      	nop
 8101d1e:	3708      	adds	r7, #8
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bd80      	pop	{r7, pc}
 8101d24:	58024400 	.word	0x58024400

08101d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101d28:	b580      	push	{r7, lr}
 8101d2a:	b08e      	sub	sp, #56	; 0x38
 8101d2c:	af00      	add	r7, sp, #0
 8101d2e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101d30:	687b      	ldr	r3, [r7, #4]
 8101d32:	2b0f      	cmp	r3, #15
 8101d34:	d844      	bhi.n	8101dc0 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
<<<<<<< HEAD
 8101d36:	2200      	movs	r2, #0
 8101d38:	6879      	ldr	r1, [r7, #4]
 8101d3a:	202c      	movs	r0, #44	; 0x2c
 8101d3c:	f000 fbe1 	bl	8102502 <HAL_NVIC_SetPriority>
=======
 8101c82:	2200      	movs	r2, #0
 8101c84:	6879      	ldr	r1, [r7, #4]
 8101c86:	202c      	movs	r0, #44	; 0x2c
 8101c88:	f000 fb71 	bl	810236e <HAL_NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
<<<<<<< HEAD
 8101d40:	202c      	movs	r0, #44	; 0x2c
 8101d42:	f000 fbf8 	bl	8102536 <HAL_NVIC_EnableIRQ>
=======
 8101c8c:	202c      	movs	r0, #44	; 0x2c
 8101c8e:	f000 fb88 	bl	81023a2 <HAL_NVIC_EnableIRQ>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    uwTickPrio = TickPriority;
 8101d46:	4a24      	ldr	r2, [pc, #144]	; (8101dd8 <HAL_InitTick+0xb0>)
 8101d48:	687b      	ldr	r3, [r7, #4]
 8101d4a:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8101d4c:	4b23      	ldr	r3, [pc, #140]	; (8101ddc <HAL_InitTick+0xb4>)
 8101d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101d52:	4a22      	ldr	r2, [pc, #136]	; (8101ddc <HAL_InitTick+0xb4>)
 8101d54:	f043 0302 	orr.w	r3, r3, #2
 8101d58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101d5c:	4b1f      	ldr	r3, [pc, #124]	; (8101ddc <HAL_InitTick+0xb4>)
 8101d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101d62:	f003 0302 	and.w	r3, r3, #2
 8101d66:	60bb      	str	r3, [r7, #8]
 8101d68:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
<<<<<<< HEAD
 8101d6a:	f107 020c 	add.w	r2, r7, #12
 8101d6e:	f107 0310 	add.w	r3, r7, #16
 8101d72:	4611      	mov	r1, r2
 8101d74:	4618      	mov	r0, r3
 8101d76:	f004 fe2b 	bl	81069d0 <HAL_RCC_GetClockConfig>
=======
 8101cb6:	f107 020c 	add.w	r2, r7, #12
 8101cba:	f107 0310 	add.w	r3, r7, #16
 8101cbe:	4611      	mov	r1, r2
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	f003 fce5 	bl	8105690 <HAL_RCC_GetClockConfig>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
<<<<<<< HEAD
 8101d7a:	f004 fe13 	bl	81069a4 <HAL_RCC_GetPCLK2Freq>
 8101d7e:	4603      	mov	r3, r0
 8101d80:	005b      	lsls	r3, r3, #1
 8101d82:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8101cc6:	f003 fccd 	bl	8105664 <HAL_RCC_GetPCLK2Freq>
 8101cca:	4603      	mov	r3, r0
 8101ccc:	005b      	lsls	r3, r3, #1
 8101cce:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d86:	4a16      	ldr	r2, [pc, #88]	; (8101de0 <HAL_InitTick+0xb8>)
 8101d88:	fba2 2303 	umull	r2, r3, r2, r3
 8101d8c:	0c9b      	lsrs	r3, r3, #18
 8101d8e:	3b01      	subs	r3, #1
 8101d90:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8101d92:	4b14      	ldr	r3, [pc, #80]	; (8101de4 <HAL_InitTick+0xbc>)
 8101d94:	4a14      	ldr	r2, [pc, #80]	; (8101de8 <HAL_InitTick+0xc0>)
 8101d96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101d98:	4b12      	ldr	r3, [pc, #72]	; (8101de4 <HAL_InitTick+0xbc>)
 8101d9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101d9e:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101da0:	4a10      	ldr	r2, [pc, #64]	; (8101de4 <HAL_InitTick+0xbc>)
 8101da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101da4:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8101da6:	4b0f      	ldr	r3, [pc, #60]	; (8101de4 <HAL_InitTick+0xbc>)
 8101da8:	2200      	movs	r2, #0
 8101daa:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101dac:	4b0d      	ldr	r3, [pc, #52]	; (8101de4 <HAL_InitTick+0xbc>)
 8101dae:	2200      	movs	r2, #0
 8101db0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
<<<<<<< HEAD
 8101db2:	480c      	ldr	r0, [pc, #48]	; (8101de4 <HAL_InitTick+0xbc>)
 8101db4:	f005 fce1 	bl	810777a <HAL_TIM_Base_Init>
 8101db8:	4603      	mov	r3, r0
 8101dba:	2b00      	cmp	r3, #0
 8101dbc:	d107      	bne.n	8101dce <HAL_InitTick+0xa6>
 8101dbe:	e001      	b.n	8101dc4 <HAL_InitTick+0x9c>
=======
 8101cfe:	480c      	ldr	r0, [pc, #48]	; (8101d30 <HAL_InitTick+0xbc>)
 8101d00:	f004 fb8d 	bl	810641e <HAL_TIM_Base_Init>
 8101d04:	4603      	mov	r3, r0
 8101d06:	2b00      	cmp	r3, #0
 8101d08:	d107      	bne.n	8101d1a <HAL_InitTick+0xa6>
 8101d0a:	e001      	b.n	8101d10 <HAL_InitTick+0x9c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return HAL_ERROR;
 8101dc0:	2301      	movs	r3, #1
 8101dc2:	e005      	b.n	8101dd0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
<<<<<<< HEAD
 8101dc4:	4807      	ldr	r0, [pc, #28]	; (8101de4 <HAL_InitTick+0xbc>)
 8101dc6:	f005 fd39 	bl	810783c <HAL_TIM_Base_Start_IT>
 8101dca:	4603      	mov	r3, r0
 8101dcc:	e000      	b.n	8101dd0 <HAL_InitTick+0xa8>
=======
 8101d10:	4807      	ldr	r0, [pc, #28]	; (8101d30 <HAL_InitTick+0xbc>)
 8101d12:	f004 fbe5 	bl	81064e0 <HAL_TIM_Base_Start_IT>
 8101d16:	4603      	mov	r3, r0
 8101d18:	e000      	b.n	8101d1c <HAL_InitTick+0xa8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Return function status */
  return HAL_ERROR;
 8101dce:	2301      	movs	r3, #1
}
<<<<<<< HEAD
 8101dd0:	4618      	mov	r0, r3
 8101dd2:	3738      	adds	r7, #56	; 0x38
 8101dd4:	46bd      	mov	sp, r7
 8101dd6:	bd80      	pop	{r7, pc}
 8101dd8:	10000008 	.word	0x10000008
 8101ddc:	58024400 	.word	0x58024400
 8101de0:	431bde83 	.word	0x431bde83
 8101de4:	1004602c 	.word	0x1004602c
 8101de8:	40010400 	.word	0x40010400
=======
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	3738      	adds	r7, #56	; 0x38
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bd80      	pop	{r7, pc}
 8101d24:	10000008 	.word	0x10000008
 8101d28:	58024400 	.word	0x58024400
 8101d2c:	431bde83 	.word	0x431bde83
 8101d30:	1000998c 	.word	0x1000998c
 8101d34:	40010400 	.word	0x40010400
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101dec:	b480      	push	{r7}
 8101dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101df0:	e7fe      	b.n	8101df0 <NMI_Handler+0x4>

08101df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101df2:	b480      	push	{r7}
 8101df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101df6:	e7fe      	b.n	8101df6 <HardFault_Handler+0x4>

08101df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101df8:	b480      	push	{r7}
 8101dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101dfc:	e7fe      	b.n	8101dfc <MemManage_Handler+0x4>

08101dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101dfe:	b480      	push	{r7}
 8101e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101e02:	e7fe      	b.n	8101e02 <BusFault_Handler+0x4>

08101e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101e04:	b480      	push	{r7}
 8101e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101e08:	e7fe      	b.n	8101e08 <UsageFault_Handler+0x4>

08101e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101e0a:	b480      	push	{r7}
 8101e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101e0e:	bf00      	nop
 8101e10:	46bd      	mov	sp, r7
 8101e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e16:	4770      	bx	lr

08101e18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101e18:	b580      	push	{r7, lr}
 8101e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
<<<<<<< HEAD
 8101e1c:	4802      	ldr	r0, [pc, #8]	; (8101e28 <DMA1_Stream0_IRQHandler+0x10>)
 8101e1e:	f001 fbb9 	bl	8103594 <HAL_DMA_IRQHandler>
=======
 8101d68:	4802      	ldr	r0, [pc, #8]	; (8101d74 <DMA1_Stream0_IRQHandler+0x10>)
 8101d6a:	f001 fb49 	bl	8103400 <HAL_DMA_IRQHandler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8101e22:	bf00      	nop
 8101e24:	bd80      	pop	{r7, pc}
 8101e26:	bf00      	nop
 8101e28:	10045f3c 	.word	0x10045f3c
=======
 8101d6e:	bf00      	nop
 8101d70:	bd80      	pop	{r7, pc}
 8101d72:	bf00      	nop
 8101d74:	1000989c 	.word	0x1000989c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101e2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101e2c:	b580      	push	{r7, lr}
 8101e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
<<<<<<< HEAD
 8101e30:	4802      	ldr	r0, [pc, #8]	; (8101e3c <DMA1_Stream1_IRQHandler+0x10>)
 8101e32:	f001 fbaf 	bl	8103594 <HAL_DMA_IRQHandler>
=======
 8101d7c:	4802      	ldr	r0, [pc, #8]	; (8101d88 <DMA1_Stream1_IRQHandler+0x10>)
 8101d7e:	f001 fb3f 	bl	8103400 <HAL_DMA_IRQHandler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
<<<<<<< HEAD
 8101e36:	bf00      	nop
 8101e38:	bd80      	pop	{r7, pc}
 8101e3a:	bf00      	nop
 8101e3c:	10045fb4 	.word	0x10045fb4
=======
 8101d82:	bf00      	nop
 8101d84:	bd80      	pop	{r7, pc}
 8101d86:	bf00      	nop
 8101d88:	10009914 	.word	0x10009914
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101e40 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101e40:	b580      	push	{r7, lr}
 8101e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
<<<<<<< HEAD
 8101e44:	4802      	ldr	r0, [pc, #8]	; (8101e50 <SPI1_IRQHandler+0x10>)
 8101e46:	f005 f9bb 	bl	81071c0 <HAL_SPI_IRQHandler>
=======
 8101d90:	4802      	ldr	r0, [pc, #8]	; (8101d9c <SPI1_IRQHandler+0x10>)
 8101d92:	f004 f865 	bl	8105e60 <HAL_SPI_IRQHandler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
<<<<<<< HEAD
 8101e4a:	bf00      	nop
 8101e4c:	bd80      	pop	{r7, pc}
 8101e4e:	bf00      	nop
 8101e50:	10045eb4 	.word	0x10045eb4
=======
 8101d96:	bf00      	nop
 8101d98:	bd80      	pop	{r7, pc}
 8101d9a:	bf00      	nop
 8101d9c:	10009814 	.word	0x10009814
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101e54 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8101e54:	b580      	push	{r7, lr}
 8101e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
<<<<<<< HEAD
 8101e58:	4802      	ldr	r0, [pc, #8]	; (8101e64 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101e5a:	f005 fd25 	bl	81078a8 <HAL_TIM_IRQHandler>
=======
 8101da4:	4802      	ldr	r0, [pc, #8]	; (8101db0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101da6:	f004 fbd1 	bl	810654c <HAL_TIM_IRQHandler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
<<<<<<< HEAD
 8101e5e:	bf00      	nop
 8101e60:	bd80      	pop	{r7, pc}
 8101e62:	bf00      	nop
 8101e64:	1004602c 	.word	0x1004602c
=======
 8101daa:	bf00      	nop
 8101dac:	bd80      	pop	{r7, pc}
 8101dae:	bf00      	nop
 8101db0:	1000998c 	.word	0x1000998c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101e68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8101e68:	b580      	push	{r7, lr}
 8101e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
<<<<<<< HEAD
 8101e6c:	4802      	ldr	r0, [pc, #8]	; (8101e78 <DMA2_Stream2_IRQHandler+0x10>)
 8101e6e:	f001 fb91 	bl	8103594 <HAL_DMA_IRQHandler>
=======
 8101db8:	4802      	ldr	r0, [pc, #8]	; (8101dc4 <DMA2_Stream2_IRQHandler+0x10>)
 8101dba:	f001 fb21 	bl	8103400 <HAL_DMA_IRQHandler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
<<<<<<< HEAD
 8101e72:	bf00      	nop
 8101e74:	bd80      	pop	{r7, pc}
 8101e76:	bf00      	nop
 8101e78:	10046078 	.word	0x10046078
=======
 8101dbe:	bf00      	nop
 8101dc0:	bd80      	pop	{r7, pc}
 8101dc2:	bf00      	nop
 8101dc4:	100099d8 	.word	0x100099d8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101e7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101e7c:	b580      	push	{r7, lr}
 8101e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
<<<<<<< HEAD
 8101e80:	4802      	ldr	r0, [pc, #8]	; (8101e8c <DMA2_Stream3_IRQHandler+0x10>)
 8101e82:	f001 fb87 	bl	8103594 <HAL_DMA_IRQHandler>
=======
 8101dcc:	4802      	ldr	r0, [pc, #8]	; (8101dd8 <DMA2_Stream3_IRQHandler+0x10>)
 8101dce:	f001 fb17 	bl	8103400 <HAL_DMA_IRQHandler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
<<<<<<< HEAD
 8101e86:	bf00      	nop
 8101e88:	bd80      	pop	{r7, pc}
 8101e8a:	bf00      	nop
 8101e8c:	1004617c 	.word	0x1004617c
=======
 8101dd2:	bf00      	nop
 8101dd4:	bd80      	pop	{r7, pc}
 8101dd6:	bf00      	nop
 8101dd8:	10009adc 	.word	0x10009adc
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

08101e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101e90:	b480      	push	{r7}
 8101e92:	af00      	add	r7, sp, #0
	return 1;
 8101e94:	2301      	movs	r3, #1
}
 8101e96:	4618      	mov	r0, r3
 8101e98:	46bd      	mov	sp, r7
 8101e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e9e:	4770      	bx	lr

08101ea0 <_kill>:

int _kill(int pid, int sig)
{
 8101ea0:	b580      	push	{r7, lr}
 8101ea2:	b082      	sub	sp, #8
 8101ea4:	af00      	add	r7, sp, #0
 8101ea6:	6078      	str	r0, [r7, #4]
 8101ea8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
<<<<<<< HEAD
 8101eaa:	f00f f933 	bl	8111114 <__errno>
 8101eae:	4603      	mov	r3, r0
 8101eb0:	2216      	movs	r2, #22
 8101eb2:	601a      	str	r2, [r3, #0]
=======
 8101df6:	f00c f995 	bl	810e124 <__errno>
 8101dfa:	4602      	mov	r2, r0
 8101dfc:	2316      	movs	r3, #22
 8101dfe:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	return -1;
 8101eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101eb8:	4618      	mov	r0, r3
 8101eba:	3708      	adds	r7, #8
 8101ebc:	46bd      	mov	sp, r7
 8101ebe:	bd80      	pop	{r7, pc}

08101ec0 <_exit>:

void _exit (int status)
{
 8101ec0:	b580      	push	{r7, lr}
 8101ec2:	b082      	sub	sp, #8
 8101ec4:	af00      	add	r7, sp, #0
 8101ec6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101ecc:	6878      	ldr	r0, [r7, #4]
 8101ece:	f7ff ffe7 	bl	8101ea0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101ed2:	e7fe      	b.n	8101ed2 <_exit+0x12>

<<<<<<< HEAD
08101ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101ed4:	b580      	push	{r7, lr}
 8101ed6:	b086      	sub	sp, #24
 8101ed8:	af00      	add	r7, sp, #0
 8101eda:	60f8      	str	r0, [r7, #12]
 8101edc:	60b9      	str	r1, [r7, #8]
 8101ede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ee0:	2300      	movs	r3, #0
 8101ee2:	617b      	str	r3, [r7, #20]
 8101ee4:	e00a      	b.n	8101efc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101ee6:	f3af 8000 	nop.w
 8101eea:	4601      	mov	r1, r0
 8101eec:	68bb      	ldr	r3, [r7, #8]
 8101eee:	1c5a      	adds	r2, r3, #1
 8101ef0:	60ba      	str	r2, [r7, #8]
 8101ef2:	b2ca      	uxtb	r2, r1
 8101ef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ef6:	697b      	ldr	r3, [r7, #20]
 8101ef8:	3301      	adds	r3, #1
 8101efa:	617b      	str	r3, [r7, #20]
 8101efc:	697a      	ldr	r2, [r7, #20]
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	429a      	cmp	r2, r3
 8101f02:	dbf0      	blt.n	8101ee6 <_read+0x12>
	}

return len;
 8101f04:	687b      	ldr	r3, [r7, #4]
}
 8101f06:	4618      	mov	r0, r3
 8101f08:	3718      	adds	r7, #24
 8101f0a:	46bd      	mov	sp, r7
 8101f0c:	bd80      	pop	{r7, pc}

08101f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101f0e:	b580      	push	{r7, lr}
 8101f10:	b086      	sub	sp, #24
 8101f12:	af00      	add	r7, sp, #0
 8101f14:	60f8      	str	r0, [r7, #12]
 8101f16:	60b9      	str	r1, [r7, #8]
 8101f18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f1a:	2300      	movs	r3, #0
 8101f1c:	617b      	str	r3, [r7, #20]
 8101f1e:	e009      	b.n	8101f34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101f20:	68bb      	ldr	r3, [r7, #8]
 8101f22:	1c5a      	adds	r2, r3, #1
 8101f24:	60ba      	str	r2, [r7, #8]
 8101f26:	781b      	ldrb	r3, [r3, #0]
 8101f28:	4618      	mov	r0, r3
 8101f2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f2e:	697b      	ldr	r3, [r7, #20]
 8101f30:	3301      	adds	r3, #1
 8101f32:	617b      	str	r3, [r7, #20]
 8101f34:	697a      	ldr	r2, [r7, #20]
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	429a      	cmp	r2, r3
 8101f3a:	dbf1      	blt.n	8101f20 <_write+0x12>
	}
	return len;
 8101f3c:	687b      	ldr	r3, [r7, #4]
}
 8101f3e:	4618      	mov	r0, r3
 8101f40:	3718      	adds	r7, #24
 8101f42:	46bd      	mov	sp, r7
 8101f44:	bd80      	pop	{r7, pc}

08101f46 <_close>:

int _close(int file)
{
 8101f46:	b480      	push	{r7}
 8101f48:	b083      	sub	sp, #12
 8101f4a:	af00      	add	r7, sp, #0
 8101f4c:	6078      	str	r0, [r7, #4]
	return -1;
 8101f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101f52:	4618      	mov	r0, r3
 8101f54:	370c      	adds	r7, #12
 8101f56:	46bd      	mov	sp, r7
 8101f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f5c:	4770      	bx	lr

08101f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101f5e:	b480      	push	{r7}
 8101f60:	b083      	sub	sp, #12
 8101f62:	af00      	add	r7, sp, #0
 8101f64:	6078      	str	r0, [r7, #4]
 8101f66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101f68:	683b      	ldr	r3, [r7, #0]
 8101f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101f6e:	605a      	str	r2, [r3, #4]
	return 0;
 8101f70:	2300      	movs	r3, #0
}
 8101f72:	4618      	mov	r0, r3
 8101f74:	370c      	adds	r7, #12
 8101f76:	46bd      	mov	sp, r7
 8101f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f7c:	4770      	bx	lr

08101f7e <_isatty>:

int _isatty(int file)
{
 8101f7e:	b480      	push	{r7}
 8101f80:	b083      	sub	sp, #12
 8101f82:	af00      	add	r7, sp, #0
 8101f84:	6078      	str	r0, [r7, #4]
	return 1;
 8101f86:	2301      	movs	r3, #1
}
 8101f88:	4618      	mov	r0, r3
 8101f8a:	370c      	adds	r7, #12
 8101f8c:	46bd      	mov	sp, r7
 8101f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f92:	4770      	bx	lr

08101f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101f94:	b480      	push	{r7}
 8101f96:	b085      	sub	sp, #20
 8101f98:	af00      	add	r7, sp, #0
 8101f9a:	60f8      	str	r0, [r7, #12]
 8101f9c:	60b9      	str	r1, [r7, #8]
 8101f9e:	607a      	str	r2, [r7, #4]
	return 0;
 8101fa0:	2300      	movs	r3, #0
}
 8101fa2:	4618      	mov	r0, r3
 8101fa4:	3714      	adds	r7, #20
 8101fa6:	46bd      	mov	sp, r7
 8101fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fac:	4770      	bx	lr
	...

08101fb0 <_sbrk>:
=======
08101e20 <_sbrk>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8101fb0:	b580      	push	{r7, lr}
 8101fb2:	b086      	sub	sp, #24
 8101fb4:	af00      	add	r7, sp, #0
 8101fb6:	6078      	str	r0, [r7, #4]
=======
 8101e20:	b580      	push	{r7, lr}
 8101e22:	b086      	sub	sp, #24
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8101fb8:	4a14      	ldr	r2, [pc, #80]	; (810200c <_sbrk+0x5c>)
 8101fba:	4b15      	ldr	r3, [pc, #84]	; (8102010 <_sbrk+0x60>)
 8101fbc:	1ad3      	subs	r3, r2, r3
 8101fbe:	617b      	str	r3, [r7, #20]
=======
 8101e28:	4a14      	ldr	r2, [pc, #80]	; (8101e7c <_sbrk+0x5c>)
 8101e2a:	4b15      	ldr	r3, [pc, #84]	; (8101e80 <_sbrk+0x60>)
 8101e2c:	1ad3      	subs	r3, r2, r3
 8101e2e:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  const uint8_t *max_heap = (uint8_t *)stack_limit;
<<<<<<< HEAD
 8101fc0:	697b      	ldr	r3, [r7, #20]
 8101fc2:	613b      	str	r3, [r7, #16]
=======
 8101e30:	697b      	ldr	r3, [r7, #20]
 8101e32:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8101fc4:	4b13      	ldr	r3, [pc, #76]	; (8102014 <_sbrk+0x64>)
 8101fc6:	681b      	ldr	r3, [r3, #0]
 8101fc8:	2b00      	cmp	r3, #0
 8101fca:	d102      	bne.n	8101fd2 <_sbrk+0x22>
=======
 8101e34:	4b13      	ldr	r3, [pc, #76]	; (8101e84 <_sbrk+0x64>)
 8101e36:	681b      	ldr	r3, [r3, #0]
 8101e38:	2b00      	cmp	r3, #0
 8101e3a:	d102      	bne.n	8101e42 <_sbrk+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    __sbrk_heap_end = &_end;
<<<<<<< HEAD
 8101fcc:	4b11      	ldr	r3, [pc, #68]	; (8102014 <_sbrk+0x64>)
 8101fce:	4a12      	ldr	r2, [pc, #72]	; (8102018 <_sbrk+0x68>)
 8101fd0:	601a      	str	r2, [r3, #0]
=======
 8101e3c:	4b11      	ldr	r3, [pc, #68]	; (8101e84 <_sbrk+0x64>)
 8101e3e:	4a12      	ldr	r2, [pc, #72]	; (8101e88 <_sbrk+0x68>)
 8101e40:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8101fd2:	4b10      	ldr	r3, [pc, #64]	; (8102014 <_sbrk+0x64>)
 8101fd4:	681a      	ldr	r2, [r3, #0]
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	4413      	add	r3, r2
 8101fda:	693a      	ldr	r2, [r7, #16]
 8101fdc:	429a      	cmp	r2, r3
 8101fde:	d207      	bcs.n	8101ff0 <_sbrk+0x40>
=======
 8101e42:	4b10      	ldr	r3, [pc, #64]	; (8101e84 <_sbrk+0x64>)
 8101e44:	681a      	ldr	r2, [r3, #0]
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	4413      	add	r3, r2
 8101e4a:	693a      	ldr	r2, [r7, #16]
 8101e4c:	429a      	cmp	r2, r3
 8101e4e:	d207      	bcs.n	8101e60 <_sbrk+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    errno = ENOMEM;
<<<<<<< HEAD
 8101fe0:	f00f f898 	bl	8111114 <__errno>
 8101fe4:	4603      	mov	r3, r0
 8101fe6:	220c      	movs	r2, #12
 8101fe8:	601a      	str	r2, [r3, #0]
=======
 8101e50:	f00c f968 	bl	810e124 <__errno>
 8101e54:	4602      	mov	r2, r0
 8101e56:	230c      	movs	r3, #12
 8101e58:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return (void *)-1;
<<<<<<< HEAD
 8101fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101fee:	e009      	b.n	8102004 <_sbrk+0x54>
=======
 8101e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8101e5e:	e009      	b.n	8101e74 <_sbrk+0x54>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  prev_heap_end = __sbrk_heap_end;
<<<<<<< HEAD
 8101ff0:	4b08      	ldr	r3, [pc, #32]	; (8102014 <_sbrk+0x64>)
 8101ff2:	681b      	ldr	r3, [r3, #0]
 8101ff4:	60fb      	str	r3, [r7, #12]
=======
 8101e60:	4b08      	ldr	r3, [pc, #32]	; (8101e84 <_sbrk+0x64>)
 8101e62:	681b      	ldr	r3, [r3, #0]
 8101e64:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  __sbrk_heap_end += incr;
<<<<<<< HEAD
 8101ff6:	4b07      	ldr	r3, [pc, #28]	; (8102014 <_sbrk+0x64>)
 8101ff8:	681a      	ldr	r2, [r3, #0]
 8101ffa:	687b      	ldr	r3, [r7, #4]
 8101ffc:	4413      	add	r3, r2
 8101ffe:	4a05      	ldr	r2, [pc, #20]	; (8102014 <_sbrk+0x64>)
 8102000:	6013      	str	r3, [r2, #0]
=======
 8101e66:	4b07      	ldr	r3, [pc, #28]	; (8101e84 <_sbrk+0x64>)
 8101e68:	681a      	ldr	r2, [r3, #0]
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	4413      	add	r3, r2
 8101e6e:	4a05      	ldr	r2, [pc, #20]	; (8101e84 <_sbrk+0x64>)
 8101e70:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return (void *)prev_heap_end;
<<<<<<< HEAD
 8102002:	68fb      	ldr	r3, [r7, #12]
=======
 8101e72:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8102004:	4618      	mov	r0, r3
 8102006:	3718      	adds	r7, #24
 8102008:	46bd      	mov	sp, r7
 810200a:	bd80      	pop	{r7, pc}
 810200c:	10048000 	.word	0x10048000
 8102010:	00000400 	.word	0x00000400
 8102014:	10000484 	.word	0x10000484
 8102018:	10046678 	.word	0x10046678
=======
 8101e74:	4618      	mov	r0, r3
 8101e76:	3718      	adds	r7, #24
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	bd80      	pop	{r7, pc}
 8101e7c:	10048000 	.word	0x10048000
 8101e80:	00000400 	.word	0x00000400
 8101e84:	10000474 	.word	0x10000474
 8101e88:	10009fd8 	.word	0x10009fd8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810201c <MX_USART3_UART_Init>:
=======
08101e8c <MX_USART3_UART_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 810201c:	b580      	push	{r7, lr}
 810201e:	af00      	add	r7, sp, #0
=======
 8101e8c:	b580      	push	{r7, lr}
 8101e8e:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  huart3.Instance = USART3;
<<<<<<< HEAD
 8102020:	4b22      	ldr	r3, [pc, #136]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102022:	4a23      	ldr	r2, [pc, #140]	; (81020b0 <MX_USART3_UART_Init+0x94>)
 8102024:	601a      	str	r2, [r3, #0]
=======
 8101e90:	4b22      	ldr	r3, [pc, #136]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101e92:	4a23      	ldr	r2, [pc, #140]	; (8101f20 <MX_USART3_UART_Init+0x94>)
 8101e94:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.BaudRate = 115200;
<<<<<<< HEAD
 8102026:	4b21      	ldr	r3, [pc, #132]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 810202c:	605a      	str	r2, [r3, #4]
=======
 8101e96:	4b21      	ldr	r3, [pc, #132]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101e9c:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
<<<<<<< HEAD
 810202e:	4b1f      	ldr	r3, [pc, #124]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102030:	2200      	movs	r2, #0
 8102032:	609a      	str	r2, [r3, #8]
=======
 8101e9e:	4b1f      	ldr	r3, [pc, #124]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ea0:	2200      	movs	r2, #0
 8101ea2:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.StopBits = UART_STOPBITS_1;
<<<<<<< HEAD
 8102034:	4b1d      	ldr	r3, [pc, #116]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102036:	2200      	movs	r2, #0
 8102038:	60da      	str	r2, [r3, #12]
=======
 8101ea4:	4b1d      	ldr	r3, [pc, #116]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ea6:	2200      	movs	r2, #0
 8101ea8:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.Parity = UART_PARITY_NONE;
<<<<<<< HEAD
 810203a:	4b1c      	ldr	r3, [pc, #112]	; (81020ac <MX_USART3_UART_Init+0x90>)
 810203c:	2200      	movs	r2, #0
 810203e:	611a      	str	r2, [r3, #16]
=======
 8101eaa:	4b1c      	ldr	r3, [pc, #112]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101eac:	2200      	movs	r2, #0
 8101eae:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.Mode = UART_MODE_TX_RX;
<<<<<<< HEAD
 8102040:	4b1a      	ldr	r3, [pc, #104]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102042:	220c      	movs	r2, #12
 8102044:	615a      	str	r2, [r3, #20]
=======
 8101eb0:	4b1a      	ldr	r3, [pc, #104]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101eb2:	220c      	movs	r2, #12
 8101eb4:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
<<<<<<< HEAD
 8102046:	4b19      	ldr	r3, [pc, #100]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102048:	2200      	movs	r2, #0
 810204a:	619a      	str	r2, [r3, #24]
=======
 8101eb6:	4b19      	ldr	r3, [pc, #100]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101eb8:	2200      	movs	r2, #0
 8101eba:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
<<<<<<< HEAD
 810204c:	4b17      	ldr	r3, [pc, #92]	; (81020ac <MX_USART3_UART_Init+0x90>)
 810204e:	2200      	movs	r2, #0
 8102050:	61da      	str	r2, [r3, #28]
=======
 8101ebc:	4b17      	ldr	r3, [pc, #92]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ebe:	2200      	movs	r2, #0
 8101ec0:	61da      	str	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
<<<<<<< HEAD
 8102052:	4b16      	ldr	r3, [pc, #88]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102054:	2200      	movs	r2, #0
 8102056:	621a      	str	r2, [r3, #32]
=======
 8101ec2:	4b16      	ldr	r3, [pc, #88]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ec4:	2200      	movs	r2, #0
 8101ec6:	621a      	str	r2, [r3, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
<<<<<<< HEAD
 8102058:	4b14      	ldr	r3, [pc, #80]	; (81020ac <MX_USART3_UART_Init+0x90>)
 810205a:	2200      	movs	r2, #0
 810205c:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8101ec8:	4b14      	ldr	r3, [pc, #80]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101eca:	2200      	movs	r2, #0
 8101ecc:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
<<<<<<< HEAD
 810205e:	4b13      	ldr	r3, [pc, #76]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102060:	2200      	movs	r2, #0
 8102062:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8101ece:	4b13      	ldr	r3, [pc, #76]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ed0:	2200      	movs	r2, #0
 8101ed2:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if (HAL_UART_Init(&huart3) != HAL_OK)
<<<<<<< HEAD
 8102064:	4811      	ldr	r0, [pc, #68]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102066:	f005 fe1f 	bl	8107ca8 <HAL_UART_Init>
 810206a:	4603      	mov	r3, r0
 810206c:	2b00      	cmp	r3, #0
 810206e:	d001      	beq.n	8102074 <MX_USART3_UART_Init+0x58>
=======
 8101ed4:	4811      	ldr	r0, [pc, #68]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ed6:	f004 fd39 	bl	810694c <HAL_UART_Init>
 8101eda:	4603      	mov	r3, r0
 8101edc:	2b00      	cmp	r3, #0
 8101ede:	d001      	beq.n	8101ee4 <MX_USART3_UART_Init+0x58>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
<<<<<<< HEAD
 8102070:	f7ff fbca 	bl	8101808 <Error_Handler>
=======
 8101ee0:	f7ff fc3a 	bl	8101758 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8102074:	2100      	movs	r1, #0
 8102076:	480d      	ldr	r0, [pc, #52]	; (81020ac <MX_USART3_UART_Init+0x90>)
 8102078:	f006 ff6d 	bl	8108f56 <HAL_UARTEx_SetTxFifoThreshold>
 810207c:	4603      	mov	r3, r0
 810207e:	2b00      	cmp	r3, #0
 8102080:	d001      	beq.n	8102086 <MX_USART3_UART_Init+0x6a>
=======
 8101ee4:	2100      	movs	r1, #0
 8101ee6:	480d      	ldr	r0, [pc, #52]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101ee8:	f005 fed1 	bl	8107c8e <HAL_UARTEx_SetTxFifoThreshold>
 8101eec:	4603      	mov	r3, r0
 8101eee:	2b00      	cmp	r3, #0
 8101ef0:	d001      	beq.n	8101ef6 <MX_USART3_UART_Init+0x6a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
<<<<<<< HEAD
 8102082:	f7ff fbc1 	bl	8101808 <Error_Handler>
=======
 8101ef2:	f7ff fc31 	bl	8101758 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8102086:	2100      	movs	r1, #0
 8102088:	4808      	ldr	r0, [pc, #32]	; (81020ac <MX_USART3_UART_Init+0x90>)
 810208a:	f006 ffa2 	bl	8108fd2 <HAL_UARTEx_SetRxFifoThreshold>
 810208e:	4603      	mov	r3, r0
 8102090:	2b00      	cmp	r3, #0
 8102092:	d001      	beq.n	8102098 <MX_USART3_UART_Init+0x7c>
=======
 8101ef6:	2100      	movs	r1, #0
 8101ef8:	4808      	ldr	r0, [pc, #32]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101efa:	f005 ff06 	bl	8107d0a <HAL_UARTEx_SetRxFifoThreshold>
 8101efe:	4603      	mov	r3, r0
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	d001      	beq.n	8101f08 <MX_USART3_UART_Init+0x7c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
<<<<<<< HEAD
 8102094:	f7ff fbb8 	bl	8101808 <Error_Handler>
=======
 8101f04:	f7ff fc28 	bl	8101758 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
<<<<<<< HEAD
 8102098:	4804      	ldr	r0, [pc, #16]	; (81020ac <MX_USART3_UART_Init+0x90>)
 810209a:	f006 ff23 	bl	8108ee4 <HAL_UARTEx_DisableFifoMode>
 810209e:	4603      	mov	r3, r0
 81020a0:	2b00      	cmp	r3, #0
 81020a2:	d001      	beq.n	81020a8 <MX_USART3_UART_Init+0x8c>
=======
 8101f08:	4804      	ldr	r0, [pc, #16]	; (8101f1c <MX_USART3_UART_Init+0x90>)
 8101f0a:	f005 fe87 	bl	8107c1c <HAL_UARTEx_DisableFifoMode>
 8101f0e:	4603      	mov	r3, r0
 8101f10:	2b00      	cmp	r3, #0
 8101f12:	d001      	beq.n	8101f18 <MX_USART3_UART_Init+0x8c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    Error_Handler();
<<<<<<< HEAD
 81020a4:	f7ff fbb0 	bl	8101808 <Error_Handler>
=======
 8101f14:	f7ff fc20 	bl	8101758 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

}
<<<<<<< HEAD
 81020a8:	bf00      	nop
 81020aa:	bd80      	pop	{r7, pc}
 81020ac:	100460f0 	.word	0x100460f0
 81020b0:	40004800 	.word	0x40004800
=======
 8101f18:	bf00      	nop
 8101f1a:	bd80      	pop	{r7, pc}
 8101f1c:	10009a50 	.word	0x10009a50
 8101f20:	40004800 	.word	0x40004800
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081020b4 <HAL_UART_MspInit>:
=======
08101f24 <HAL_UART_MspInit>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
<<<<<<< HEAD
 81020b4:	b580      	push	{r7, lr}
 81020b6:	b08a      	sub	sp, #40	; 0x28
 81020b8:	af00      	add	r7, sp, #0
 81020ba:	6078      	str	r0, [r7, #4]
=======
 8101f24:	b580      	push	{r7, lr}
 8101f26:	b08a      	sub	sp, #40	; 0x28
 8101f28:	af00      	add	r7, sp, #0
 8101f2a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 81020bc:	f107 0314 	add.w	r3, r7, #20
 81020c0:	2200      	movs	r2, #0
 81020c2:	601a      	str	r2, [r3, #0]
 81020c4:	605a      	str	r2, [r3, #4]
 81020c6:	609a      	str	r2, [r3, #8]
 81020c8:	60da      	str	r2, [r3, #12]
 81020ca:	611a      	str	r2, [r3, #16]
=======
 8101f2c:	f107 0314 	add.w	r3, r7, #20
 8101f30:	2200      	movs	r2, #0
 8101f32:	601a      	str	r2, [r3, #0]
 8101f34:	605a      	str	r2, [r3, #4]
 8101f36:	609a      	str	r2, [r3, #8]
 8101f38:	60da      	str	r2, [r3, #12]
 8101f3a:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if(uartHandle->Instance==USART3)
<<<<<<< HEAD
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	4a49      	ldr	r2, [pc, #292]	; (81021f8 <HAL_UART_MspInit+0x144>)
 81020d2:	4293      	cmp	r3, r2
 81020d4:	f040 808b 	bne.w	81021ee <HAL_UART_MspInit+0x13a>
=======
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	4a49      	ldr	r2, [pc, #292]	; (8102068 <HAL_UART_MspInit+0x144>)
 8101f42:	4293      	cmp	r3, r2
 8101f44:	f040 808b 	bne.w	810205e <HAL_UART_MspInit+0x13a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
<<<<<<< HEAD
 81020d8:	4b48      	ldr	r3, [pc, #288]	; (81021fc <HAL_UART_MspInit+0x148>)
 81020da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81020de:	4a47      	ldr	r2, [pc, #284]	; (81021fc <HAL_UART_MspInit+0x148>)
 81020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81020e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81020e8:	4b44      	ldr	r3, [pc, #272]	; (81021fc <HAL_UART_MspInit+0x148>)
 81020ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81020ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81020f2:	613b      	str	r3, [r7, #16]
 81020f4:	693b      	ldr	r3, [r7, #16]
=======
 8101f48:	4b48      	ldr	r3, [pc, #288]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f4e:	4a47      	ldr	r2, [pc, #284]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101f54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f58:	4b44      	ldr	r3, [pc, #272]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101f62:	613b      	str	r3, [r7, #16]
 8101f64:	693b      	ldr	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    __HAL_RCC_GPIOD_CLK_ENABLE();
<<<<<<< HEAD
 81020f6:	4b41      	ldr	r3, [pc, #260]	; (81021fc <HAL_UART_MspInit+0x148>)
 81020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020fc:	4a3f      	ldr	r2, [pc, #252]	; (81021fc <HAL_UART_MspInit+0x148>)
 81020fe:	f043 0308 	orr.w	r3, r3, #8
 8102102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102106:	4b3d      	ldr	r3, [pc, #244]	; (81021fc <HAL_UART_MspInit+0x148>)
 8102108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810210c:	f003 0308 	and.w	r3, r3, #8
 8102110:	60fb      	str	r3, [r7, #12]
 8102112:	68fb      	ldr	r3, [r7, #12]
=======
 8101f66:	4b41      	ldr	r3, [pc, #260]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f6c:	4a3f      	ldr	r2, [pc, #252]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f6e:	f043 0308 	orr.w	r3, r3, #8
 8101f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f76:	4b3d      	ldr	r3, [pc, #244]	; (810206c <HAL_UART_MspInit+0x148>)
 8101f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f7c:	f003 0308 	and.w	r3, r3, #8
 8101f80:	60fb      	str	r3, [r7, #12]
 8101f82:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 8102114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102118:	617b      	str	r3, [r7, #20]
=======
 8101f84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101f88:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
<<<<<<< HEAD
 810211a:	2302      	movs	r3, #2
 810211c:	61bb      	str	r3, [r7, #24]
=======
 8101f8a:	2302      	movs	r3, #2
 8101f8c:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 810211e:	2300      	movs	r3, #0
 8102120:	61fb      	str	r3, [r7, #28]
=======
 8101f8e:	2300      	movs	r3, #0
 8101f90:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
<<<<<<< HEAD
 8102122:	2300      	movs	r3, #0
 8102124:	623b      	str	r3, [r7, #32]
=======
 8101f92:	2300      	movs	r3, #0
 8101f94:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
<<<<<<< HEAD
 8102126:	2307      	movs	r3, #7
 8102128:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8101f96:	2307      	movs	r3, #7
 8101f98:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
<<<<<<< HEAD
 810212a:	f107 0314 	add.w	r3, r7, #20
 810212e:	4619      	mov	r1, r3
 8102130:	4833      	ldr	r0, [pc, #204]	; (8102200 <HAL_UART_MspInit+0x14c>)
 8102132:	f002 fd41 	bl	8104bb8 <HAL_GPIO_Init>
=======
 8101f9a:	f107 0314 	add.w	r3, r7, #20
 8101f9e:	4619      	mov	r1, r3
 8101fa0:	4833      	ldr	r0, [pc, #204]	; (8102070 <HAL_UART_MspInit+0x14c>)
 8101fa2:	f002 fd3f 	bl	8104a24 <HAL_GPIO_Init>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
<<<<<<< HEAD
 8102136:	4b33      	ldr	r3, [pc, #204]	; (8102204 <HAL_UART_MspInit+0x150>)
 8102138:	4a33      	ldr	r2, [pc, #204]	; (8102208 <HAL_UART_MspInit+0x154>)
 810213a:	601a      	str	r2, [r3, #0]
=======
 8101fa6:	4b33      	ldr	r3, [pc, #204]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fa8:	4a33      	ldr	r2, [pc, #204]	; (8102078 <HAL_UART_MspInit+0x154>)
 8101faa:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
<<<<<<< HEAD
 810213c:	4b31      	ldr	r3, [pc, #196]	; (8102204 <HAL_UART_MspInit+0x150>)
 810213e:	222d      	movs	r2, #45	; 0x2d
 8102140:	605a      	str	r2, [r3, #4]
=======
 8101fac:	4b31      	ldr	r3, [pc, #196]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fae:	222d      	movs	r2, #45	; 0x2d
 8101fb0:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
<<<<<<< HEAD
 8102142:	4b30      	ldr	r3, [pc, #192]	; (8102204 <HAL_UART_MspInit+0x150>)
 8102144:	2200      	movs	r2, #0
 8102146:	609a      	str	r2, [r3, #8]
=======
 8101fb2:	4b30      	ldr	r3, [pc, #192]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
<<<<<<< HEAD
 8102148:	4b2e      	ldr	r3, [pc, #184]	; (8102204 <HAL_UART_MspInit+0x150>)
 810214a:	2200      	movs	r2, #0
 810214c:	60da      	str	r2, [r3, #12]
=======
 8101fb8:	4b2e      	ldr	r3, [pc, #184]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fba:	2200      	movs	r2, #0
 8101fbc:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
<<<<<<< HEAD
 810214e:	4b2d      	ldr	r3, [pc, #180]	; (8102204 <HAL_UART_MspInit+0x150>)
 8102150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102154:	611a      	str	r2, [r3, #16]
=======
 8101fbe:	4b2d      	ldr	r3, [pc, #180]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101fc4:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
<<<<<<< HEAD
 8102156:	4b2b      	ldr	r3, [pc, #172]	; (8102204 <HAL_UART_MspInit+0x150>)
 8102158:	2200      	movs	r2, #0
 810215a:	615a      	str	r2, [r3, #20]
=======
 8101fc6:	4b2b      	ldr	r3, [pc, #172]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fc8:	2200      	movs	r2, #0
 8101fca:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
<<<<<<< HEAD
 810215c:	4b29      	ldr	r3, [pc, #164]	; (8102204 <HAL_UART_MspInit+0x150>)
 810215e:	2200      	movs	r2, #0
 8102160:	619a      	str	r2, [r3, #24]
=======
 8101fcc:	4b29      	ldr	r3, [pc, #164]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fce:	2200      	movs	r2, #0
 8101fd0:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
<<<<<<< HEAD
 8102162:	4b28      	ldr	r3, [pc, #160]	; (8102204 <HAL_UART_MspInit+0x150>)
 8102164:	2200      	movs	r2, #0
 8102166:	61da      	str	r2, [r3, #28]
=======
 8101fd2:	4b28      	ldr	r3, [pc, #160]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fd4:	2200      	movs	r2, #0
 8101fd6:	61da      	str	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
<<<<<<< HEAD
 8102168:	4b26      	ldr	r3, [pc, #152]	; (8102204 <HAL_UART_MspInit+0x150>)
 810216a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 810216e:	621a      	str	r2, [r3, #32]
=======
 8101fd8:	4b26      	ldr	r3, [pc, #152]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101fde:	621a      	str	r2, [r3, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
<<<<<<< HEAD
 8102170:	4b24      	ldr	r3, [pc, #144]	; (8102204 <HAL_UART_MspInit+0x150>)
 8102172:	2200      	movs	r2, #0
 8102174:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8101fe0:	4b24      	ldr	r3, [pc, #144]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fe2:	2200      	movs	r2, #0
 8101fe4:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
<<<<<<< HEAD
 8102176:	4823      	ldr	r0, [pc, #140]	; (8102204 <HAL_UART_MspInit+0x150>)
 8102178:	f000 fa04 	bl	8102584 <HAL_DMA_Init>
 810217c:	4603      	mov	r3, r0
 810217e:	2b00      	cmp	r3, #0
 8102180:	d001      	beq.n	8102186 <HAL_UART_MspInit+0xd2>
=======
 8101fe6:	4823      	ldr	r0, [pc, #140]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101fe8:	f000 fa02 	bl	81023f0 <HAL_DMA_Init>
 8101fec:	4603      	mov	r3, r0
 8101fee:	2b00      	cmp	r3, #0
 8101ff0:	d001      	beq.n	8101ff6 <HAL_UART_MspInit+0xd2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      Error_Handler();
<<<<<<< HEAD
 8102182:	f7ff fb41 	bl	8101808 <Error_Handler>
=======
 8101ff2:	f7ff fbb1 	bl	8101758 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
<<<<<<< HEAD
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	4a1e      	ldr	r2, [pc, #120]	; (8102204 <HAL_UART_MspInit+0x150>)
 810218a:	679a      	str	r2, [r3, #120]	; 0x78
 810218c:	4a1d      	ldr	r2, [pc, #116]	; (8102204 <HAL_UART_MspInit+0x150>)
 810218e:	687b      	ldr	r3, [r7, #4]
 8102190:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	4a1e      	ldr	r2, [pc, #120]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101ffa:	679a      	str	r2, [r3, #120]	; 0x78
 8101ffc:	4a1d      	ldr	r2, [pc, #116]	; (8102074 <HAL_UART_MspInit+0x150>)
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
<<<<<<< HEAD
 8102192:	4b1e      	ldr	r3, [pc, #120]	; (810220c <HAL_UART_MspInit+0x158>)
 8102194:	4a1e      	ldr	r2, [pc, #120]	; (8102210 <HAL_UART_MspInit+0x15c>)
 8102196:	601a      	str	r2, [r3, #0]
=======
 8102002:	4b1e      	ldr	r3, [pc, #120]	; (810207c <HAL_UART_MspInit+0x158>)
 8102004:	4a1e      	ldr	r2, [pc, #120]	; (8102080 <HAL_UART_MspInit+0x15c>)
 8102006:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
<<<<<<< HEAD
 8102198:	4b1c      	ldr	r3, [pc, #112]	; (810220c <HAL_UART_MspInit+0x158>)
 810219a:	222e      	movs	r2, #46	; 0x2e
 810219c:	605a      	str	r2, [r3, #4]
=======
 8102008:	4b1c      	ldr	r3, [pc, #112]	; (810207c <HAL_UART_MspInit+0x158>)
 810200a:	222e      	movs	r2, #46	; 0x2e
 810200c:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
<<<<<<< HEAD
 810219e:	4b1b      	ldr	r3, [pc, #108]	; (810220c <HAL_UART_MspInit+0x158>)
 81021a0:	2240      	movs	r2, #64	; 0x40
 81021a2:	609a      	str	r2, [r3, #8]
=======
 810200e:	4b1b      	ldr	r3, [pc, #108]	; (810207c <HAL_UART_MspInit+0x158>)
 8102010:	2240      	movs	r2, #64	; 0x40
 8102012:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
<<<<<<< HEAD
 81021a4:	4b19      	ldr	r3, [pc, #100]	; (810220c <HAL_UART_MspInit+0x158>)
 81021a6:	2200      	movs	r2, #0
 81021a8:	60da      	str	r2, [r3, #12]
=======
 8102014:	4b19      	ldr	r3, [pc, #100]	; (810207c <HAL_UART_MspInit+0x158>)
 8102016:	2200      	movs	r2, #0
 8102018:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
<<<<<<< HEAD
 81021aa:	4b18      	ldr	r3, [pc, #96]	; (810220c <HAL_UART_MspInit+0x158>)
 81021ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81021b0:	611a      	str	r2, [r3, #16]
=======
 810201a:	4b18      	ldr	r3, [pc, #96]	; (810207c <HAL_UART_MspInit+0x158>)
 810201c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102020:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
<<<<<<< HEAD
 81021b2:	4b16      	ldr	r3, [pc, #88]	; (810220c <HAL_UART_MspInit+0x158>)
 81021b4:	2200      	movs	r2, #0
 81021b6:	615a      	str	r2, [r3, #20]
=======
 8102022:	4b16      	ldr	r3, [pc, #88]	; (810207c <HAL_UART_MspInit+0x158>)
 8102024:	2200      	movs	r2, #0
 8102026:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
<<<<<<< HEAD
 81021b8:	4b14      	ldr	r3, [pc, #80]	; (810220c <HAL_UART_MspInit+0x158>)
 81021ba:	2200      	movs	r2, #0
 81021bc:	619a      	str	r2, [r3, #24]
=======
 8102028:	4b14      	ldr	r3, [pc, #80]	; (810207c <HAL_UART_MspInit+0x158>)
 810202a:	2200      	movs	r2, #0
 810202c:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
<<<<<<< HEAD
 81021be:	4b13      	ldr	r3, [pc, #76]	; (810220c <HAL_UART_MspInit+0x158>)
 81021c0:	2200      	movs	r2, #0
 81021c2:	61da      	str	r2, [r3, #28]
=======
 810202e:	4b13      	ldr	r3, [pc, #76]	; (810207c <HAL_UART_MspInit+0x158>)
 8102030:	2200      	movs	r2, #0
 8102032:	61da      	str	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
<<<<<<< HEAD
 81021c4:	4b11      	ldr	r3, [pc, #68]	; (810220c <HAL_UART_MspInit+0x158>)
 81021c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81021ca:	621a      	str	r2, [r3, #32]
=======
 8102034:	4b11      	ldr	r3, [pc, #68]	; (810207c <HAL_UART_MspInit+0x158>)
 8102036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 810203a:	621a      	str	r2, [r3, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
<<<<<<< HEAD
 81021cc:	4b0f      	ldr	r3, [pc, #60]	; (810220c <HAL_UART_MspInit+0x158>)
 81021ce:	2200      	movs	r2, #0
 81021d0:	625a      	str	r2, [r3, #36]	; 0x24
=======
 810203c:	4b0f      	ldr	r3, [pc, #60]	; (810207c <HAL_UART_MspInit+0x158>)
 810203e:	2200      	movs	r2, #0
 8102040:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
<<<<<<< HEAD
 81021d2:	480e      	ldr	r0, [pc, #56]	; (810220c <HAL_UART_MspInit+0x158>)
 81021d4:	f000 f9d6 	bl	8102584 <HAL_DMA_Init>
 81021d8:	4603      	mov	r3, r0
 81021da:	2b00      	cmp	r3, #0
 81021dc:	d001      	beq.n	81021e2 <HAL_UART_MspInit+0x12e>
=======
 8102042:	480e      	ldr	r0, [pc, #56]	; (810207c <HAL_UART_MspInit+0x158>)
 8102044:	f000 f9d4 	bl	81023f0 <HAL_DMA_Init>
 8102048:	4603      	mov	r3, r0
 810204a:	2b00      	cmp	r3, #0
 810204c:	d001      	beq.n	8102052 <HAL_UART_MspInit+0x12e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      Error_Handler();
<<<<<<< HEAD
 81021de:	f7ff fb13 	bl	8101808 <Error_Handler>
=======
 810204e:	f7ff fb83 	bl	8101758 <Error_Handler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
<<<<<<< HEAD
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	4a09      	ldr	r2, [pc, #36]	; (810220c <HAL_UART_MspInit+0x158>)
 81021e6:	675a      	str	r2, [r3, #116]	; 0x74
 81021e8:	4a08      	ldr	r2, [pc, #32]	; (810220c <HAL_UART_MspInit+0x158>)
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	4a09      	ldr	r2, [pc, #36]	; (810207c <HAL_UART_MspInit+0x158>)
 8102056:	675a      	str	r2, [r3, #116]	; 0x74
 8102058:	4a08      	ldr	r2, [pc, #32]	; (810207c <HAL_UART_MspInit+0x158>)
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
<<<<<<< HEAD
 81021ee:	bf00      	nop
 81021f0:	3728      	adds	r7, #40	; 0x28
 81021f2:	46bd      	mov	sp, r7
 81021f4:	bd80      	pop	{r7, pc}
 81021f6:	bf00      	nop
 81021f8:	40004800 	.word	0x40004800
 81021fc:	58024400 	.word	0x58024400
 8102200:	58020c00 	.word	0x58020c00
 8102204:	10046078 	.word	0x10046078
 8102208:	40020440 	.word	0x40020440
 810220c:	1004617c 	.word	0x1004617c
 8102210:	40020458 	.word	0x40020458
=======
 810205e:	bf00      	nop
 8102060:	3728      	adds	r7, #40	; 0x28
 8102062:	46bd      	mov	sp, r7
 8102064:	bd80      	pop	{r7, pc}
 8102066:	bf00      	nop
 8102068:	40004800 	.word	0x40004800
 810206c:	58024400 	.word	0x58024400
 8102070:	58020c00 	.word	0x58020c00
 8102074:	100099d8 	.word	0x100099d8
 8102078:	40020440 	.word	0x40020440
 810207c:	10009adc 	.word	0x10009adc
 8102080:	40020458 	.word	0x40020458
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102214 <Reset_Handler>:
=======
08102084 <Reset_Handler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8102214:	f8df d034 	ldr.w	sp, [pc, #52]	; 810224c <LoopFillZerobss+0x10>
=======
 8102084:	f8df d034 	ldr.w	sp, [pc, #52]	; 81020bc <LoopFillZerobss+0x10>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

/* Call the clock system intitialization function.*/
  bl  SystemInit
<<<<<<< HEAD
 8102218:	f7fe ff7a 	bl	8101110 <SystemInit>
=======
 8102088:	f7ff f846 	bl	8101118 <SystemInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
<<<<<<< HEAD
 810221c:	2100      	movs	r1, #0
=======
 810208c:	2100      	movs	r1, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  b  LoopCopyDataInit
<<<<<<< HEAD
 810221e:	e003      	b.n	8102228 <LoopCopyDataInit>
=======
 810208e:	e003      	b.n	8102098 <LoopCopyDataInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102220 <CopyDataInit>:
=======
08102090 <CopyDataInit>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

CopyDataInit:
  ldr  r3, =_sidata
<<<<<<< HEAD
 8102220:	4b0b      	ldr	r3, [pc, #44]	; (8102250 <LoopFillZerobss+0x14>)
=======
 8102090:	4b0b      	ldr	r3, [pc, #44]	; (81020c0 <LoopFillZerobss+0x14>)
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr  r3, [r3, r1]
<<<<<<< HEAD
 8102222:	585b      	ldr	r3, [r3, r1]
=======
 8102092:	585b      	ldr	r3, [r3, r1]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  str  r3, [r0, r1]
<<<<<<< HEAD
 8102224:	5043      	str	r3, [r0, r1]
=======
 8102094:	5043      	str	r3, [r0, r1]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  adds  r1, r1, #4
<<<<<<< HEAD
 8102226:	3104      	adds	r1, #4
=======
 8102096:	3104      	adds	r1, #4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102228 <LoopCopyDataInit>:
=======
08102098 <LoopCopyDataInit>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    
LoopCopyDataInit:
  ldr  r0, =_sdata
<<<<<<< HEAD
 8102228:	480a      	ldr	r0, [pc, #40]	; (8102254 <LoopFillZerobss+0x18>)
=======
 8102098:	480a      	ldr	r0, [pc, #40]	; (81020c4 <LoopFillZerobss+0x18>)
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr  r3, =_edata
<<<<<<< HEAD
 810222a:	4b0b      	ldr	r3, [pc, #44]	; (8102258 <LoopFillZerobss+0x1c>)
=======
 810209a:	4b0b      	ldr	r3, [pc, #44]	; (81020c8 <LoopFillZerobss+0x1c>)
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  adds  r2, r0, r1
<<<<<<< HEAD
 810222c:	1842      	adds	r2, r0, r1
=======
 810209c:	1842      	adds	r2, r0, r1
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  cmp  r2, r3
<<<<<<< HEAD
 810222e:	429a      	cmp	r2, r3
=======
 810209e:	429a      	cmp	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  bcc  CopyDataInit
<<<<<<< HEAD
 8102230:	d3f6      	bcc.n	8102220 <CopyDataInit>
=======
 81020a0:	d3f6      	bcc.n	8102090 <CopyDataInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr  r2, =_sbss
<<<<<<< HEAD
 8102232:	4a0a      	ldr	r2, [pc, #40]	; (810225c <LoopFillZerobss+0x20>)
=======
 81020a2:	4a0a      	ldr	r2, [pc, #40]	; (81020cc <LoopFillZerobss+0x20>)
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  b  LoopFillZerobss
<<<<<<< HEAD
 8102234:	e002      	b.n	810223c <LoopFillZerobss>
=======
 81020a4:	e002      	b.n	81020ac <LoopFillZerobss>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102236 <FillZerobss>:
=======
081020a6 <FillZerobss>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
<<<<<<< HEAD
 8102236:	2300      	movs	r3, #0
=======
 81020a6:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  str  r3, [r2], #4
<<<<<<< HEAD
 8102238:	f842 3b04 	str.w	r3, [r2], #4
=======
 81020a8:	f842 3b04 	str.w	r3, [r2], #4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810223c <LoopFillZerobss>:
=======
081020ac <LoopFillZerobss>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    
LoopFillZerobss:
  ldr  r3, = _ebss
<<<<<<< HEAD
 810223c:	4b08      	ldr	r3, [pc, #32]	; (8102260 <LoopFillZerobss+0x24>)
=======
 81020ac:	4b08      	ldr	r3, [pc, #32]	; (81020d0 <LoopFillZerobss+0x24>)
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  cmp  r2, r3
<<<<<<< HEAD
 810223e:	429a      	cmp	r2, r3
=======
 81020ae:	429a      	cmp	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  bcc  FillZerobss
<<<<<<< HEAD
 8102240:	d3f9      	bcc.n	8102236 <FillZerobss>
=======
 81020b0:	d3f9      	bcc.n	81020a6 <FillZerobss>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
   
/* Call static constructors */
    bl __libc_init_array
<<<<<<< HEAD
 8102242:	f00e ff6d 	bl	8111120 <__libc_init_array>
=======
 81020b2:	f00c f83d 	bl	810e130 <__libc_init_array>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/* Call the application's entry point.*/
  bl  main
<<<<<<< HEAD
 8102246:	f7ff fa75 	bl	8101734 <main>
=======
 81020b6:	f7ff fae5 	bl	8101684 <main>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  bx  lr    
<<<<<<< HEAD
 810224a:	4770      	bx	lr
=======
 81020ba:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 810224c:	10048000 	.word	0x10048000
=======
 81020bc:	10048000 	.word	0x10048000
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr  r3, =_sidata
<<<<<<< HEAD
 8102250:	081153a0 	.word	0x081153a0
=======
 81020c0:	081111cc 	.word	0x081111cc
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr  r0, =_sdata
<<<<<<< HEAD
 8102254:	10000000 	.word	0x10000000
=======
 81020c4:	10000000 	.word	0x10000000
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr  r3, =_edata
<<<<<<< HEAD
 8102258:	10000214 	.word	0x10000214
=======
 81020c8:	10000204 	.word	0x10000204
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr  r2, =_sbss
<<<<<<< HEAD
 810225c:	10000214 	.word	0x10000214
=======
 81020cc:	10000204 	.word	0x10000204
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  ldr  r3, = _ebss
<<<<<<< HEAD
 8102260:	10046678 	.word	0x10046678
=======
 81020d0:	10009fd8 	.word	0x10009fd8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102264 <ADC3_IRQHandler>:
=======
081020d4 <ADC3_IRQHandler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8102264:	e7fe      	b.n	8102264 <ADC3_IRQHandler>
=======
 81020d4:	e7fe      	b.n	81020d4 <ADC3_IRQHandler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08102268 <HAL_Init>:
=======
081020d8 <HAL_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8102268:	b580      	push	{r7, lr}
 810226a:	b082      	sub	sp, #8
 810226c:	af00      	add	r7, sp, #0
=======
 81020d8:	b580      	push	{r7, lr}
 81020da:	b082      	sub	sp, #8
 81020dc:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
<<<<<<< HEAD
 810226e:	4b28      	ldr	r3, [pc, #160]	; (8102310 <HAL_Init+0xa8>)
 8102270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102274:	4a26      	ldr	r2, [pc, #152]	; (8102310 <HAL_Init+0xa8>)
 8102276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810227a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810227e:	4b24      	ldr	r3, [pc, #144]	; (8102310 <HAL_Init+0xa8>)
 8102280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102288:	603b      	str	r3, [r7, #0]
 810228a:	683b      	ldr	r3, [r7, #0]
=======
 81020de:	4b28      	ldr	r3, [pc, #160]	; (8102180 <HAL_Init+0xa8>)
 81020e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81020e4:	4a26      	ldr	r2, [pc, #152]	; (8102180 <HAL_Init+0xa8>)
 81020e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81020ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81020ee:	4b24      	ldr	r3, [pc, #144]	; (8102180 <HAL_Init+0xa8>)
 81020f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81020f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81020f8:	603b      	str	r3, [r7, #0]
 81020fa:	683b      	ldr	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
<<<<<<< HEAD
 810228c:	4b21      	ldr	r3, [pc, #132]	; (8102314 <HAL_Init+0xac>)
 810228e:	681b      	ldr	r3, [r3, #0]
 8102290:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102294:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102298:	4a1e      	ldr	r2, [pc, #120]	; (8102314 <HAL_Init+0xac>)
 810229a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810229e:	6013      	str	r3, [r2, #0]
=======
 81020fc:	4b21      	ldr	r3, [pc, #132]	; (8102184 <HAL_Init+0xac>)
 81020fe:	681b      	ldr	r3, [r3, #0]
 8102100:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102108:	4a1e      	ldr	r2, [pc, #120]	; (8102184 <HAL_Init+0xac>)
 810210a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810210e:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
<<<<<<< HEAD
 81022a0:	4b1c      	ldr	r3, [pc, #112]	; (8102314 <HAL_Init+0xac>)
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	4a1b      	ldr	r2, [pc, #108]	; (8102314 <HAL_Init+0xac>)
 81022a6:	f043 0301 	orr.w	r3, r3, #1
 81022aa:	6013      	str	r3, [r2, #0]
=======
 8102110:	4b1c      	ldr	r3, [pc, #112]	; (8102184 <HAL_Init+0xac>)
 8102112:	681b      	ldr	r3, [r3, #0]
 8102114:	4a1b      	ldr	r2, [pc, #108]	; (8102184 <HAL_Init+0xac>)
 8102116:	f043 0301 	orr.w	r3, r3, #1
 810211a:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 81022ac:	2003      	movs	r0, #3
 81022ae:	f000 f91d 	bl	81024ec <HAL_NVIC_SetPriorityGrouping>
=======
 810211c:	2003      	movs	r0, #3
 810211e:	f000 f91b 	bl	8102358 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
<<<<<<< HEAD
 81022b2:	f004 f9b5 	bl	8106620 <HAL_RCC_GetSysClockFreq>
 81022b6:	4602      	mov	r2, r0
 81022b8:	4b15      	ldr	r3, [pc, #84]	; (8102310 <HAL_Init+0xa8>)
 81022ba:	699b      	ldr	r3, [r3, #24]
 81022bc:	0a1b      	lsrs	r3, r3, #8
 81022be:	f003 030f 	and.w	r3, r3, #15
 81022c2:	4915      	ldr	r1, [pc, #84]	; (8102318 <HAL_Init+0xb0>)
 81022c4:	5ccb      	ldrb	r3, [r1, r3]
 81022c6:	f003 031f 	and.w	r3, r3, #31
 81022ca:	fa22 f303 	lsr.w	r3, r2, r3
 81022ce:	607b      	str	r3, [r7, #4]
=======
 8102122:	f003 f8e5 	bl	81052f0 <HAL_RCC_GetSysClockFreq>
 8102126:	4601      	mov	r1, r0
 8102128:	4b15      	ldr	r3, [pc, #84]	; (8102180 <HAL_Init+0xa8>)
 810212a:	699b      	ldr	r3, [r3, #24]
 810212c:	0a1b      	lsrs	r3, r3, #8
 810212e:	f003 030f 	and.w	r3, r3, #15
 8102132:	4a15      	ldr	r2, [pc, #84]	; (8102188 <HAL_Init+0xb0>)
 8102134:	5cd3      	ldrb	r3, [r2, r3]
 8102136:	f003 031f 	and.w	r3, r3, #31
 810213a:	fa21 f303 	lsr.w	r3, r1, r3
 810213e:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< HEAD
 81022d0:	4b0f      	ldr	r3, [pc, #60]	; (8102310 <HAL_Init+0xa8>)
 81022d2:	699b      	ldr	r3, [r3, #24]
 81022d4:	f003 030f 	and.w	r3, r3, #15
 81022d8:	4a0f      	ldr	r2, [pc, #60]	; (8102318 <HAL_Init+0xb0>)
 81022da:	5cd3      	ldrb	r3, [r2, r3]
 81022dc:	f003 031f 	and.w	r3, r3, #31
 81022e0:	687a      	ldr	r2, [r7, #4]
 81022e2:	fa22 f303 	lsr.w	r3, r2, r3
 81022e6:	4a0d      	ldr	r2, [pc, #52]	; (810231c <HAL_Init+0xb4>)
 81022e8:	6013      	str	r3, [r2, #0]
=======
 8102140:	4b0f      	ldr	r3, [pc, #60]	; (8102180 <HAL_Init+0xa8>)
 8102142:	699b      	ldr	r3, [r3, #24]
 8102144:	f003 030f 	and.w	r3, r3, #15
 8102148:	4a0f      	ldr	r2, [pc, #60]	; (8102188 <HAL_Init+0xb0>)
 810214a:	5cd3      	ldrb	r3, [r2, r3]
 810214c:	f003 031f 	and.w	r3, r3, #31
 8102150:	687a      	ldr	r2, [r7, #4]
 8102152:	fa22 f303 	lsr.w	r3, r2, r3
 8102156:	4a0d      	ldr	r2, [pc, #52]	; (810218c <HAL_Init+0xb4>)
 8102158:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
<<<<<<< HEAD
 81022ea:	4b0c      	ldr	r3, [pc, #48]	; (810231c <HAL_Init+0xb4>)
 81022ec:	681b      	ldr	r3, [r3, #0]
 81022ee:	4a0c      	ldr	r2, [pc, #48]	; (8102320 <HAL_Init+0xb8>)
 81022f0:	6013      	str	r3, [r2, #0]
=======
 810215a:	4b0c      	ldr	r3, [pc, #48]	; (810218c <HAL_Init+0xb4>)
 810215c:	681b      	ldr	r3, [r3, #0]
 810215e:	4a0c      	ldr	r2, [pc, #48]	; (8102190 <HAL_Init+0xb8>)
 8102160:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
<<<<<<< HEAD
 81022f2:	2000      	movs	r0, #0
 81022f4:	f7ff fd18 	bl	8101d28 <HAL_InitTick>
 81022f8:	4603      	mov	r3, r0
 81022fa:	2b00      	cmp	r3, #0
 81022fc:	d001      	beq.n	8102302 <HAL_Init+0x9a>
=======
 8102162:	2000      	movs	r0, #0
 8102164:	f7ff fd86 	bl	8101c74 <HAL_InitTick>
 8102168:	4603      	mov	r3, r0
 810216a:	2b00      	cmp	r3, #0
 810216c:	d001      	beq.n	8102172 <HAL_Init+0x9a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 81022fe:	2301      	movs	r3, #1
 8102300:	e002      	b.n	8102308 <HAL_Init+0xa0>
=======
 810216e:	2301      	movs	r3, #1
 8102170:	e002      	b.n	8102178 <HAL_Init+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Init the low level hardware */
  HAL_MspInit();
<<<<<<< HEAD
 8102302:	f7ff fcf3 	bl	8101cec <HAL_MspInit>
=======
 8102172:	f7ff fd61 	bl	8101c38 <HAL_MspInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8102306:	2300      	movs	r3, #0
=======
 8102176:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8102308:	4618      	mov	r0, r3
 810230a:	3708      	adds	r7, #8
 810230c:	46bd      	mov	sp, r7
 810230e:	bd80      	pop	{r7, pc}
 8102310:	58024400 	.word	0x58024400
 8102314:	40024400 	.word	0x40024400
 8102318:	0811497c 	.word	0x0811497c
 810231c:	10000004 	.word	0x10000004
 8102320:	10000000 	.word	0x10000000
=======
 8102178:	4618      	mov	r0, r3
 810217a:	3708      	adds	r7, #8
 810217c:	46bd      	mov	sp, r7
 810217e:	bd80      	pop	{r7, pc}
 8102180:	58024400 	.word	0x58024400
 8102184:	40024400 	.word	0x40024400
 8102188:	08110998 	.word	0x08110998
 810218c:	10000004 	.word	0x10000004
 8102190:	10000000 	.word	0x10000000
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102324 <HAL_IncTick>:
=======
08102194 <HAL_IncTick>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8102324:	b480      	push	{r7}
 8102326:	af00      	add	r7, sp, #0
=======
 8102194:	b480      	push	{r7}
 8102196:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uwTick += (uint32_t)uwTickFreq;
<<<<<<< HEAD
 8102328:	4b06      	ldr	r3, [pc, #24]	; (8102344 <HAL_IncTick+0x20>)
 810232a:	781b      	ldrb	r3, [r3, #0]
 810232c:	461a      	mov	r2, r3
 810232e:	4b06      	ldr	r3, [pc, #24]	; (8102348 <HAL_IncTick+0x24>)
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	4413      	add	r3, r2
 8102334:	4a04      	ldr	r2, [pc, #16]	; (8102348 <HAL_IncTick+0x24>)
 8102336:	6013      	str	r3, [r2, #0]
=======
 8102198:	4b06      	ldr	r3, [pc, #24]	; (81021b4 <HAL_IncTick+0x20>)
 810219a:	781b      	ldrb	r3, [r3, #0]
 810219c:	461a      	mov	r2, r3
 810219e:	4b06      	ldr	r3, [pc, #24]	; (81021b8 <HAL_IncTick+0x24>)
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	4413      	add	r3, r2
 81021a4:	4a04      	ldr	r2, [pc, #16]	; (81021b8 <HAL_IncTick+0x24>)
 81021a6:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8102338:	bf00      	nop
 810233a:	46bd      	mov	sp, r7
 810233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102340:	4770      	bx	lr
 8102342:	bf00      	nop
 8102344:	1000000c 	.word	0x1000000c
 8102348:	100461f4 	.word	0x100461f4
=======
 81021a8:	bf00      	nop
 81021aa:	46bd      	mov	sp, r7
 81021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b0:	4770      	bx	lr
 81021b2:	bf00      	nop
 81021b4:	1000000c 	.word	0x1000000c
 81021b8:	10009b54 	.word	0x10009b54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810234c <HAL_GetTick>:
=======
081021bc <HAL_GetTick>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 810234c:	b480      	push	{r7}
 810234e:	af00      	add	r7, sp, #0
=======
 81021bc:	b480      	push	{r7}
 81021be:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  return uwTick;
<<<<<<< HEAD
 8102350:	4b03      	ldr	r3, [pc, #12]	; (8102360 <HAL_GetTick+0x14>)
 8102352:	681b      	ldr	r3, [r3, #0]
=======
 81021c0:	4b03      	ldr	r3, [pc, #12]	; (81021d0 <HAL_GetTick+0x14>)
 81021c2:	681b      	ldr	r3, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8102354:	4618      	mov	r0, r3
 8102356:	46bd      	mov	sp, r7
 8102358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810235c:	4770      	bx	lr
 810235e:	bf00      	nop
 8102360:	100461f4 	.word	0x100461f4
=======
 81021c4:	4618      	mov	r0, r3
 81021c6:	46bd      	mov	sp, r7
 81021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021cc:	4770      	bx	lr
 81021ce:	bf00      	nop
 81021d0:	10009b54 	.word	0x10009b54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102364 <__NVIC_SetPriorityGrouping>:
=======
081021d4 <__NVIC_SetPriorityGrouping>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8102364:	b480      	push	{r7}
 8102366:	b085      	sub	sp, #20
 8102368:	af00      	add	r7, sp, #0
 810236a:	6078      	str	r0, [r7, #4]
=======
 81021d4:	b480      	push	{r7}
 81021d6:	b085      	sub	sp, #20
 81021d8:	af00      	add	r7, sp, #0
 81021da:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
<<<<<<< HEAD
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	f003 0307 	and.w	r3, r3, #7
 8102372:	60fb      	str	r3, [r7, #12]
=======
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	f003 0307 	and.w	r3, r3, #7
 81021e2:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
<<<<<<< HEAD
 8102374:	4b0c      	ldr	r3, [pc, #48]	; (81023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8102376:	68db      	ldr	r3, [r3, #12]
 8102378:	60bb      	str	r3, [r7, #8]
=======
 81021e4:	4b0c      	ldr	r3, [pc, #48]	; (8102218 <__NVIC_SetPriorityGrouping+0x44>)
 81021e6:	68db      	ldr	r3, [r3, #12]
 81021e8:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
<<<<<<< HEAD
 810237a:	68ba      	ldr	r2, [r7, #8]
 810237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102380:	4013      	ands	r3, r2
 8102382:	60bb      	str	r3, [r7, #8]
=======
 81021ea:	68ba      	ldr	r2, [r7, #8]
 81021ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81021f0:	4013      	ands	r3, r2
 81021f2:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
<<<<<<< HEAD
 8102384:	68fb      	ldr	r3, [r7, #12]
 8102386:	021a      	lsls	r2, r3, #8
=======
 81021f4:	68fb      	ldr	r3, [r7, #12]
 81021f6:	021a      	lsls	r2, r3, #8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
<<<<<<< HEAD
 8102388:	68bb      	ldr	r3, [r7, #8]
 810238a:	4313      	orrs	r3, r2
=======
 81021f8:	68bb      	ldr	r3, [r7, #8]
 81021fa:	4313      	orrs	r3, r2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  reg_value  =  (reg_value                                   |
<<<<<<< HEAD
 810238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102394:	60bb      	str	r3, [r7, #8]
=======
 81021fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102204:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  SCB->AIRCR =  reg_value;
<<<<<<< HEAD
 8102396:	4a04      	ldr	r2, [pc, #16]	; (81023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8102398:	68bb      	ldr	r3, [r7, #8]
 810239a:	60d3      	str	r3, [r2, #12]
=======
 8102206:	4a04      	ldr	r2, [pc, #16]	; (8102218 <__NVIC_SetPriorityGrouping+0x44>)
 8102208:	68bb      	ldr	r3, [r7, #8]
 810220a:	60d3      	str	r3, [r2, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810239c:	bf00      	nop
 810239e:	3714      	adds	r7, #20
 81023a0:	46bd      	mov	sp, r7
 81023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023a6:	4770      	bx	lr
 81023a8:	e000ed00 	.word	0xe000ed00
=======
 810220c:	bf00      	nop
 810220e:	3714      	adds	r7, #20
 8102210:	46bd      	mov	sp, r7
 8102212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102216:	4770      	bx	lr
 8102218:	e000ed00 	.word	0xe000ed00
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081023ac <__NVIC_GetPriorityGrouping>:
=======
0810221c <__NVIC_GetPriorityGrouping>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 81023ac:	b480      	push	{r7}
 81023ae:	af00      	add	r7, sp, #0
=======
 810221c:	b480      	push	{r7}
 810221e:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
<<<<<<< HEAD
 81023b0:	4b04      	ldr	r3, [pc, #16]	; (81023c4 <__NVIC_GetPriorityGrouping+0x18>)
 81023b2:	68db      	ldr	r3, [r3, #12]
 81023b4:	0a1b      	lsrs	r3, r3, #8
 81023b6:	f003 0307 	and.w	r3, r3, #7
=======
 8102220:	4b04      	ldr	r3, [pc, #16]	; (8102234 <__NVIC_GetPriorityGrouping+0x18>)
 8102222:	68db      	ldr	r3, [r3, #12]
 8102224:	0a1b      	lsrs	r3, r3, #8
 8102226:	f003 0307 	and.w	r3, r3, #7
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81023ba:	4618      	mov	r0, r3
 81023bc:	46bd      	mov	sp, r7
 81023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c2:	4770      	bx	lr
 81023c4:	e000ed00 	.word	0xe000ed00
=======
 810222a:	4618      	mov	r0, r3
 810222c:	46bd      	mov	sp, r7
 810222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102232:	4770      	bx	lr
 8102234:	e000ed00 	.word	0xe000ed00
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081023c8 <__NVIC_EnableIRQ>:
=======
08102238 <__NVIC_EnableIRQ>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 81023c8:	b480      	push	{r7}
 81023ca:	b083      	sub	sp, #12
 81023cc:	af00      	add	r7, sp, #0
 81023ce:	4603      	mov	r3, r0
 81023d0:	80fb      	strh	r3, [r7, #6]
=======
 8102238:	b480      	push	{r7}
 810223a:	b083      	sub	sp, #12
 810223c:	af00      	add	r7, sp, #0
 810223e:	4603      	mov	r3, r0
 8102240:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if ((int32_t)(IRQn) >= 0)
<<<<<<< HEAD
 81023d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023d6:	2b00      	cmp	r3, #0
 81023d8:	db0b      	blt.n	81023f2 <__NVIC_EnableIRQ+0x2a>
=======
 8102242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102246:	2b00      	cmp	r3, #0
 8102248:	db0b      	blt.n	8102262 <__NVIC_EnableIRQ+0x2a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
<<<<<<< HEAD
 81023da:	88fb      	ldrh	r3, [r7, #6]
 81023dc:	f003 021f 	and.w	r2, r3, #31
 81023e0:	4907      	ldr	r1, [pc, #28]	; (8102400 <__NVIC_EnableIRQ+0x38>)
 81023e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023e6:	095b      	lsrs	r3, r3, #5
 81023e8:	2001      	movs	r0, #1
 81023ea:	fa00 f202 	lsl.w	r2, r0, r2
 81023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 810224a:	88fb      	ldrh	r3, [r7, #6]
 810224c:	f003 021f 	and.w	r2, r3, #31
 8102250:	4907      	ldr	r1, [pc, #28]	; (8102270 <__NVIC_EnableIRQ+0x38>)
 8102252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102256:	095b      	lsrs	r3, r3, #5
 8102258:	2001      	movs	r0, #1
 810225a:	fa00 f202 	lsl.w	r2, r0, r2
 810225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 81023f2:	bf00      	nop
 81023f4:	370c      	adds	r7, #12
 81023f6:	46bd      	mov	sp, r7
 81023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023fc:	4770      	bx	lr
 81023fe:	bf00      	nop
 8102400:	e000e100 	.word	0xe000e100
=======
 8102262:	bf00      	nop
 8102264:	370c      	adds	r7, #12
 8102266:	46bd      	mov	sp, r7
 8102268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810226c:	4770      	bx	lr
 810226e:	bf00      	nop
 8102270:	e000e100 	.word	0xe000e100
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102404 <__NVIC_SetPriority>:
=======
08102274 <__NVIC_SetPriority>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8102404:	b480      	push	{r7}
 8102406:	b083      	sub	sp, #12
 8102408:	af00      	add	r7, sp, #0
 810240a:	4603      	mov	r3, r0
 810240c:	6039      	str	r1, [r7, #0]
 810240e:	80fb      	strh	r3, [r7, #6]
=======
 8102274:	b480      	push	{r7}
 8102276:	b083      	sub	sp, #12
 8102278:	af00      	add	r7, sp, #0
 810227a:	4603      	mov	r3, r0
 810227c:	6039      	str	r1, [r7, #0]
 810227e:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if ((int32_t)(IRQn) >= 0)
<<<<<<< HEAD
 8102410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102414:	2b00      	cmp	r3, #0
 8102416:	db0a      	blt.n	810242e <__NVIC_SetPriority+0x2a>
=======
 8102280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102284:	2b00      	cmp	r3, #0
 8102286:	db0a      	blt.n	810229e <__NVIC_SetPriority+0x2a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 8102418:	683b      	ldr	r3, [r7, #0]
 810241a:	b2da      	uxtb	r2, r3
 810241c:	490c      	ldr	r1, [pc, #48]	; (8102450 <__NVIC_SetPriority+0x4c>)
 810241e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102422:	0112      	lsls	r2, r2, #4
 8102424:	b2d2      	uxtb	r2, r2
 8102426:	440b      	add	r3, r1
 8102428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8102288:	683b      	ldr	r3, [r7, #0]
 810228a:	b2da      	uxtb	r2, r3
 810228c:	490c      	ldr	r1, [pc, #48]	; (81022c0 <__NVIC_SetPriority+0x4c>)
 810228e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102292:	0112      	lsls	r2, r2, #4
 8102294:	b2d2      	uxtb	r2, r2
 8102296:	440b      	add	r3, r1
 8102298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 810242c:	e00a      	b.n	8102444 <__NVIC_SetPriority+0x40>
=======
 810229c:	e00a      	b.n	81022b4 <__NVIC_SetPriority+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 810242e:	683b      	ldr	r3, [r7, #0]
 8102430:	b2da      	uxtb	r2, r3
 8102432:	4908      	ldr	r1, [pc, #32]	; (8102454 <__NVIC_SetPriority+0x50>)
 8102434:	88fb      	ldrh	r3, [r7, #6]
 8102436:	f003 030f 	and.w	r3, r3, #15
 810243a:	3b04      	subs	r3, #4
 810243c:	0112      	lsls	r2, r2, #4
 810243e:	b2d2      	uxtb	r2, r2
 8102440:	440b      	add	r3, r1
 8102442:	761a      	strb	r2, [r3, #24]
=======
 810229e:	683b      	ldr	r3, [r7, #0]
 81022a0:	b2da      	uxtb	r2, r3
 81022a2:	4908      	ldr	r1, [pc, #32]	; (81022c4 <__NVIC_SetPriority+0x50>)
 81022a4:	88fb      	ldrh	r3, [r7, #6]
 81022a6:	f003 030f 	and.w	r3, r3, #15
 81022aa:	3b04      	subs	r3, #4
 81022ac:	0112      	lsls	r2, r2, #4
 81022ae:	b2d2      	uxtb	r2, r2
 81022b0:	440b      	add	r3, r1
 81022b2:	761a      	strb	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8102444:	bf00      	nop
 8102446:	370c      	adds	r7, #12
 8102448:	46bd      	mov	sp, r7
 810244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810244e:	4770      	bx	lr
 8102450:	e000e100 	.word	0xe000e100
 8102454:	e000ed00 	.word	0xe000ed00
=======
 81022b4:	bf00      	nop
 81022b6:	370c      	adds	r7, #12
 81022b8:	46bd      	mov	sp, r7
 81022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022be:	4770      	bx	lr
 81022c0:	e000e100 	.word	0xe000e100
 81022c4:	e000ed00 	.word	0xe000ed00
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102458 <NVIC_EncodePriority>:
=======
081022c8 <NVIC_EncodePriority>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8102458:	b480      	push	{r7}
 810245a:	b089      	sub	sp, #36	; 0x24
 810245c:	af00      	add	r7, sp, #0
 810245e:	60f8      	str	r0, [r7, #12]
 8102460:	60b9      	str	r1, [r7, #8]
 8102462:	607a      	str	r2, [r7, #4]
=======
 81022c8:	b480      	push	{r7}
 81022ca:	b089      	sub	sp, #36	; 0x24
 81022cc:	af00      	add	r7, sp, #0
 81022ce:	60f8      	str	r0, [r7, #12]
 81022d0:	60b9      	str	r1, [r7, #8]
 81022d2:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
<<<<<<< HEAD
 8102464:	68fb      	ldr	r3, [r7, #12]
 8102466:	f003 0307 	and.w	r3, r3, #7
 810246a:	61fb      	str	r3, [r7, #28]
=======
 81022d4:	68fb      	ldr	r3, [r7, #12]
 81022d6:	f003 0307 	and.w	r3, r3, #7
 81022da:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 810246c:	69fb      	ldr	r3, [r7, #28]
 810246e:	f1c3 0307 	rsb	r3, r3, #7
 8102472:	2b04      	cmp	r3, #4
 8102474:	bf28      	it	cs
 8102476:	2304      	movcs	r3, #4
 8102478:	61bb      	str	r3, [r7, #24]
=======
 81022dc:	69fb      	ldr	r3, [r7, #28]
 81022de:	f1c3 0307 	rsb	r3, r3, #7
 81022e2:	2b04      	cmp	r3, #4
 81022e4:	bf28      	it	cs
 81022e6:	2304      	movcs	r3, #4
 81022e8:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
<<<<<<< HEAD
 810247a:	69fb      	ldr	r3, [r7, #28]
 810247c:	3304      	adds	r3, #4
 810247e:	2b06      	cmp	r3, #6
 8102480:	d902      	bls.n	8102488 <NVIC_EncodePriority+0x30>
 8102482:	69fb      	ldr	r3, [r7, #28]
 8102484:	3b03      	subs	r3, #3
 8102486:	e000      	b.n	810248a <NVIC_EncodePriority+0x32>
 8102488:	2300      	movs	r3, #0
 810248a:	617b      	str	r3, [r7, #20]
=======
 81022ea:	69fb      	ldr	r3, [r7, #28]
 81022ec:	3304      	adds	r3, #4
 81022ee:	2b06      	cmp	r3, #6
 81022f0:	d902      	bls.n	81022f8 <NVIC_EncodePriority+0x30>
 81022f2:	69fb      	ldr	r3, [r7, #28]
 81022f4:	3b03      	subs	r3, #3
 81022f6:	e000      	b.n	81022fa <NVIC_EncodePriority+0x32>
 81022f8:	2300      	movs	r3, #0
 81022fa:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 810248c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102490:	69bb      	ldr	r3, [r7, #24]
 8102492:	fa02 f303 	lsl.w	r3, r2, r3
 8102496:	43da      	mvns	r2, r3
 8102498:	68bb      	ldr	r3, [r7, #8]
 810249a:	401a      	ands	r2, r3
 810249c:	697b      	ldr	r3, [r7, #20]
 810249e:	409a      	lsls	r2, r3
=======
 81022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8102300:	69bb      	ldr	r3, [r7, #24]
 8102302:	fa02 f303 	lsl.w	r3, r2, r3
 8102306:	43da      	mvns	r2, r3
 8102308:	68bb      	ldr	r3, [r7, #8]
 810230a:	401a      	ands	r2, r3
 810230c:	697b      	ldr	r3, [r7, #20]
 810230e:	409a      	lsls	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
<<<<<<< HEAD
 81024a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81024a4:	697b      	ldr	r3, [r7, #20]
 81024a6:	fa01 f303 	lsl.w	r3, r1, r3
 81024aa:	43d9      	mvns	r1, r3
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	400b      	ands	r3, r1
=======
 8102310:	f04f 31ff 	mov.w	r1, #4294967295
 8102314:	697b      	ldr	r3, [r7, #20]
 8102316:	fa01 f303 	lsl.w	r3, r1, r3
 810231a:	43d9      	mvns	r1, r3
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	400b      	ands	r3, r1
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 81024b0:	4313      	orrs	r3, r2
=======
 8102320:	4313      	orrs	r3, r2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
         );
}
<<<<<<< HEAD
 81024b2:	4618      	mov	r0, r3
 81024b4:	3724      	adds	r7, #36	; 0x24
 81024b6:	46bd      	mov	sp, r7
 81024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024bc:	4770      	bx	lr
=======
 8102322:	4618      	mov	r0, r3
 8102324:	3724      	adds	r7, #36	; 0x24
 8102326:	46bd      	mov	sp, r7
 8102328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810232c:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
081024c0 <__NVIC_SystemReset>:
=======
08102330 <__NVIC_SystemReset>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
<<<<<<< HEAD
 81024c0:	b480      	push	{r7}
 81024c2:	af00      	add	r7, sp, #0
=======
 8102330:	b480      	push	{r7}
 8102332:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
<<<<<<< HEAD
 81024c4:	f3bf 8f4f 	dsb	sy
}
 81024c8:	bf00      	nop
=======
 8102334:	f3bf 8f4f 	dsb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
<<<<<<< HEAD
 81024ca:	4b06      	ldr	r3, [pc, #24]	; (81024e4 <__NVIC_SystemReset+0x24>)
 81024cc:	68db      	ldr	r3, [r3, #12]
 81024ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
=======
 8102338:	4b05      	ldr	r3, [pc, #20]	; (8102350 <__NVIC_SystemReset+0x20>)
 810233a:	68db      	ldr	r3, [r3, #12]
 810233c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
<<<<<<< HEAD
 81024d2:	4904      	ldr	r1, [pc, #16]	; (81024e4 <__NVIC_SystemReset+0x24>)
 81024d4:	4b04      	ldr	r3, [pc, #16]	; (81024e8 <__NVIC_SystemReset+0x28>)
 81024d6:	4313      	orrs	r3, r2
 81024d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 81024da:	f3bf 8f4f 	dsb	sy
}
 81024de:	bf00      	nop
=======
 8102340:	4903      	ldr	r1, [pc, #12]	; (8102350 <__NVIC_SystemReset+0x20>)
 8102342:	4b04      	ldr	r3, [pc, #16]	; (8102354 <__NVIC_SystemReset+0x24>)
 8102344:	4313      	orrs	r3, r2
 8102346:	60cb      	str	r3, [r1, #12]
 8102348:	f3bf 8f4f 	dsb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
<<<<<<< HEAD
 81024e0:	bf00      	nop
 81024e2:	e7fd      	b.n	81024e0 <__NVIC_SystemReset+0x20>
 81024e4:	e000ed00 	.word	0xe000ed00
 81024e8:	05fa0004 	.word	0x05fa0004
=======
 810234c:	bf00      	nop
 810234e:	e7fd      	b.n	810234c <__NVIC_SystemReset+0x1c>
 8102350:	e000ed00 	.word	0xe000ed00
 8102354:	05fa0004 	.word	0x05fa0004
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081024ec <HAL_NVIC_SetPriorityGrouping>:
=======
08102358 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 81024ec:	b580      	push	{r7, lr}
 81024ee:	b082      	sub	sp, #8
 81024f0:	af00      	add	r7, sp, #0
 81024f2:	6078      	str	r0, [r7, #4]
=======
 8102358:	b580      	push	{r7, lr}
 810235a:	b082      	sub	sp, #8
 810235c:	af00      	add	r7, sp, #0
 810235e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 81024f4:	6878      	ldr	r0, [r7, #4]
 81024f6:	f7ff ff35 	bl	8102364 <__NVIC_SetPriorityGrouping>
=======
 8102360:	6878      	ldr	r0, [r7, #4]
 8102362:	f7ff ff37 	bl	81021d4 <__NVIC_SetPriorityGrouping>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81024fa:	bf00      	nop
 81024fc:	3708      	adds	r7, #8
 81024fe:	46bd      	mov	sp, r7
 8102500:	bd80      	pop	{r7, pc}
=======
 8102366:	bf00      	nop
 8102368:	3708      	adds	r7, #8
 810236a:	46bd      	mov	sp, r7
 810236c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102502 <HAL_NVIC_SetPriority>:
=======
0810236e <HAL_NVIC_SetPriority>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8102502:	b580      	push	{r7, lr}
 8102504:	b086      	sub	sp, #24
 8102506:	af00      	add	r7, sp, #0
 8102508:	4603      	mov	r3, r0
 810250a:	60b9      	str	r1, [r7, #8]
 810250c:	607a      	str	r2, [r7, #4]
 810250e:	81fb      	strh	r3, [r7, #14]
=======
 810236e:	b580      	push	{r7, lr}
 8102370:	b086      	sub	sp, #24
 8102372:	af00      	add	r7, sp, #0
 8102374:	4603      	mov	r3, r0
 8102376:	60b9      	str	r1, [r7, #8]
 8102378:	607a      	str	r2, [r7, #4]
 810237a:	81fb      	strh	r3, [r7, #14]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8102510:	f7ff ff4c 	bl	81023ac <__NVIC_GetPriorityGrouping>
 8102514:	6178      	str	r0, [r7, #20]
=======
 810237c:	f7ff ff4e 	bl	810221c <__NVIC_GetPriorityGrouping>
 8102380:	6178      	str	r0, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
<<<<<<< HEAD
 8102516:	687a      	ldr	r2, [r7, #4]
 8102518:	68b9      	ldr	r1, [r7, #8]
 810251a:	6978      	ldr	r0, [r7, #20]
 810251c:	f7ff ff9c 	bl	8102458 <NVIC_EncodePriority>
 8102520:	4602      	mov	r2, r0
 8102522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102526:	4611      	mov	r1, r2
 8102528:	4618      	mov	r0, r3
 810252a:	f7ff ff6b 	bl	8102404 <__NVIC_SetPriority>
=======
 8102382:	687a      	ldr	r2, [r7, #4]
 8102384:	68b9      	ldr	r1, [r7, #8]
 8102386:	6978      	ldr	r0, [r7, #20]
 8102388:	f7ff ff9e 	bl	81022c8 <NVIC_EncodePriority>
 810238c:	4602      	mov	r2, r0
 810238e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102392:	4611      	mov	r1, r2
 8102394:	4618      	mov	r0, r3
 8102396:	f7ff ff6d 	bl	8102274 <__NVIC_SetPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810252e:	bf00      	nop
 8102530:	3718      	adds	r7, #24
 8102532:	46bd      	mov	sp, r7
 8102534:	bd80      	pop	{r7, pc}
=======
 810239a:	bf00      	nop
 810239c:	3718      	adds	r7, #24
 810239e:	46bd      	mov	sp, r7
 81023a0:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102536 <HAL_NVIC_EnableIRQ>:
=======
081023a2 <HAL_NVIC_EnableIRQ>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8102536:	b580      	push	{r7, lr}
 8102538:	b082      	sub	sp, #8
 810253a:	af00      	add	r7, sp, #0
 810253c:	4603      	mov	r3, r0
 810253e:	80fb      	strh	r3, [r7, #6]
=======
 81023a2:	b580      	push	{r7, lr}
 81023a4:	b082      	sub	sp, #8
 81023a6:	af00      	add	r7, sp, #0
 81023a8:	4603      	mov	r3, r0
 81023aa:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8102540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102544:	4618      	mov	r0, r3
 8102546:	f7ff ff3f 	bl	81023c8 <__NVIC_EnableIRQ>
=======
 81023ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023b0:	4618      	mov	r0, r3
 81023b2:	f7ff ff41 	bl	8102238 <__NVIC_EnableIRQ>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810254a:	bf00      	nop
 810254c:	3708      	adds	r7, #8
 810254e:	46bd      	mov	sp, r7
 8102550:	bd80      	pop	{r7, pc}
=======
 81023b6:	bf00      	nop
 81023b8:	3708      	adds	r7, #8
 81023ba:	46bd      	mov	sp, r7
 81023bc:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102552 <HAL_NVIC_SystemReset>:
=======
081023be <HAL_NVIC_SystemReset>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
<<<<<<< HEAD
 8102552:	b580      	push	{r7, lr}
 8102554:	af00      	add	r7, sp, #0
=======
 81023be:	b580      	push	{r7, lr}
 81023c0:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* System Reset */
  NVIC_SystemReset();
<<<<<<< HEAD
 8102556:	f7ff ffb3 	bl	81024c0 <__NVIC_SystemReset>
=======
 81023c2:	f7ff ffb5 	bl	8102330 <__NVIC_SystemReset>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810255c <HAL_GetCurrentCPUID>:
=======
081023c8 <HAL_GetCurrentCPUID>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
<<<<<<< HEAD
 810255c:	b480      	push	{r7}
 810255e:	af00      	add	r7, sp, #0
=======
 81023c8:	b480      	push	{r7}
 81023ca:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
<<<<<<< HEAD
 8102560:	4b07      	ldr	r3, [pc, #28]	; (8102580 <HAL_GetCurrentCPUID+0x24>)
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	091b      	lsrs	r3, r3, #4
 8102566:	f003 030f 	and.w	r3, r3, #15
 810256a:	2b07      	cmp	r3, #7
 810256c:	d101      	bne.n	8102572 <HAL_GetCurrentCPUID+0x16>
=======
 81023cc:	4b07      	ldr	r3, [pc, #28]	; (81023ec <HAL_GetCurrentCPUID+0x24>)
 81023ce:	681b      	ldr	r3, [r3, #0]
 81023d0:	091b      	lsrs	r3, r3, #4
 81023d2:	f003 030f 	and.w	r3, r3, #15
 81023d6:	2b07      	cmp	r3, #7
 81023d8:	d101      	bne.n	81023de <HAL_GetCurrentCPUID+0x16>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return  CM7_CPUID;
<<<<<<< HEAD
 810256e:	2303      	movs	r3, #3
 8102570:	e000      	b.n	8102574 <HAL_GetCurrentCPUID+0x18>
=======
 81023da:	2303      	movs	r3, #3
 81023dc:	e000      	b.n	81023e0 <HAL_GetCurrentCPUID+0x18>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    return CM4_CPUID;
<<<<<<< HEAD
 8102572:	2301      	movs	r3, #1
=======
 81023de:	2301      	movs	r3, #1
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 8102574:	4618      	mov	r0, r3
 8102576:	46bd      	mov	sp, r7
 8102578:	f85d 7b04 	ldr.w	r7, [sp], #4
 810257c:	4770      	bx	lr
 810257e:	bf00      	nop
 8102580:	e000ed00 	.word	0xe000ed00
=======
 81023e0:	4618      	mov	r0, r3
 81023e2:	46bd      	mov	sp, r7
 81023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023e8:	4770      	bx	lr
 81023ea:	bf00      	nop
 81023ec:	e000ed00 	.word	0xe000ed00
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102584 <HAL_DMA_Init>:
=======
081023f0 <HAL_DMA_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8102584:	b580      	push	{r7, lr}
 8102586:	b086      	sub	sp, #24
 8102588:	af00      	add	r7, sp, #0
 810258a:	6078      	str	r0, [r7, #4]
=======
 81023f0:	b580      	push	{r7, lr}
 81023f2:	b086      	sub	sp, #24
 81023f4:	af00      	add	r7, sp, #0
 81023f6:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 810258c:	f7ff fede 	bl	810234c <HAL_GetTick>
 8102590:	6138      	str	r0, [r7, #16]
=======
 81023f8:	f7ff fee0 	bl	81021bc <HAL_GetTick>
 81023fc:	6138      	str	r0, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
<<<<<<< HEAD
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	2b00      	cmp	r3, #0
 8102596:	d101      	bne.n	810259c <HAL_DMA_Init+0x18>
=======
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	2b00      	cmp	r3, #0
 8102402:	d101      	bne.n	8102408 <HAL_DMA_Init+0x18>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8102598:	2301      	movs	r3, #1
 810259a:	e314      	b.n	8102bc6 <HAL_DMA_Init+0x642>
=======
 8102404:	2301      	movs	r3, #1
 8102406:	e314      	b.n	8102a32 <HAL_DMA_Init+0x642>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
<<<<<<< HEAD
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	4a66      	ldr	r2, [pc, #408]	; (810273c <HAL_DMA_Init+0x1b8>)
 81025a2:	4293      	cmp	r3, r2
 81025a4:	d04a      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	4a65      	ldr	r2, [pc, #404]	; (8102740 <HAL_DMA_Init+0x1bc>)
 81025ac:	4293      	cmp	r3, r2
 81025ae:	d045      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	4a63      	ldr	r2, [pc, #396]	; (8102744 <HAL_DMA_Init+0x1c0>)
 81025b6:	4293      	cmp	r3, r2
 81025b8:	d040      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	4a62      	ldr	r2, [pc, #392]	; (8102748 <HAL_DMA_Init+0x1c4>)
 81025c0:	4293      	cmp	r3, r2
 81025c2:	d03b      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	4a60      	ldr	r2, [pc, #384]	; (810274c <HAL_DMA_Init+0x1c8>)
 81025ca:	4293      	cmp	r3, r2
 81025cc:	d036      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	681b      	ldr	r3, [r3, #0]
 81025d2:	4a5f      	ldr	r2, [pc, #380]	; (8102750 <HAL_DMA_Init+0x1cc>)
 81025d4:	4293      	cmp	r3, r2
 81025d6:	d031      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	681b      	ldr	r3, [r3, #0]
 81025dc:	4a5d      	ldr	r2, [pc, #372]	; (8102754 <HAL_DMA_Init+0x1d0>)
 81025de:	4293      	cmp	r3, r2
 81025e0:	d02c      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	681b      	ldr	r3, [r3, #0]
 81025e6:	4a5c      	ldr	r2, [pc, #368]	; (8102758 <HAL_DMA_Init+0x1d4>)
 81025e8:	4293      	cmp	r3, r2
 81025ea:	d027      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	681b      	ldr	r3, [r3, #0]
 81025f0:	4a5a      	ldr	r2, [pc, #360]	; (810275c <HAL_DMA_Init+0x1d8>)
 81025f2:	4293      	cmp	r3, r2
 81025f4:	d022      	beq.n	810263c <HAL_DMA_Init+0xb8>
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	681b      	ldr	r3, [r3, #0]
 81025fa:	4a59      	ldr	r2, [pc, #356]	; (8102760 <HAL_DMA_Init+0x1dc>)
 81025fc:	4293      	cmp	r3, r2
 81025fe:	d01d      	beq.n	810263c <HAL_DMA_Init+0xb8>
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	681b      	ldr	r3, [r3, #0]
 8102604:	4a57      	ldr	r2, [pc, #348]	; (8102764 <HAL_DMA_Init+0x1e0>)
 8102606:	4293      	cmp	r3, r2
 8102608:	d018      	beq.n	810263c <HAL_DMA_Init+0xb8>
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	4a56      	ldr	r2, [pc, #344]	; (8102768 <HAL_DMA_Init+0x1e4>)
 8102610:	4293      	cmp	r3, r2
 8102612:	d013      	beq.n	810263c <HAL_DMA_Init+0xb8>
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	4a54      	ldr	r2, [pc, #336]	; (810276c <HAL_DMA_Init+0x1e8>)
 810261a:	4293      	cmp	r3, r2
 810261c:	d00e      	beq.n	810263c <HAL_DMA_Init+0xb8>
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	681b      	ldr	r3, [r3, #0]
 8102622:	4a53      	ldr	r2, [pc, #332]	; (8102770 <HAL_DMA_Init+0x1ec>)
 8102624:	4293      	cmp	r3, r2
 8102626:	d009      	beq.n	810263c <HAL_DMA_Init+0xb8>
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	681b      	ldr	r3, [r3, #0]
 810262c:	4a51      	ldr	r2, [pc, #324]	; (8102774 <HAL_DMA_Init+0x1f0>)
 810262e:	4293      	cmp	r3, r2
 8102630:	d004      	beq.n	810263c <HAL_DMA_Init+0xb8>
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	681b      	ldr	r3, [r3, #0]
 8102636:	4a50      	ldr	r2, [pc, #320]	; (8102778 <HAL_DMA_Init+0x1f4>)
 8102638:	4293      	cmp	r3, r2
 810263a:	d101      	bne.n	8102640 <HAL_DMA_Init+0xbc>
 810263c:	2301      	movs	r3, #1
 810263e:	e000      	b.n	8102642 <HAL_DMA_Init+0xbe>
 8102640:	2300      	movs	r3, #0
 8102642:	2b00      	cmp	r3, #0
 8102644:	f000 813b 	beq.w	81028be <HAL_DMA_Init+0x33a>
=======
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	4a66      	ldr	r2, [pc, #408]	; (81025a8 <HAL_DMA_Init+0x1b8>)
 810240e:	4293      	cmp	r3, r2
 8102410:	d04a      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	4a65      	ldr	r2, [pc, #404]	; (81025ac <HAL_DMA_Init+0x1bc>)
 8102418:	4293      	cmp	r3, r2
 810241a:	d045      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	4a63      	ldr	r2, [pc, #396]	; (81025b0 <HAL_DMA_Init+0x1c0>)
 8102422:	4293      	cmp	r3, r2
 8102424:	d040      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4a62      	ldr	r2, [pc, #392]	; (81025b4 <HAL_DMA_Init+0x1c4>)
 810242c:	4293      	cmp	r3, r2
 810242e:	d03b      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	4a60      	ldr	r2, [pc, #384]	; (81025b8 <HAL_DMA_Init+0x1c8>)
 8102436:	4293      	cmp	r3, r2
 8102438:	d036      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	4a5f      	ldr	r2, [pc, #380]	; (81025bc <HAL_DMA_Init+0x1cc>)
 8102440:	4293      	cmp	r3, r2
 8102442:	d031      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	4a5d      	ldr	r2, [pc, #372]	; (81025c0 <HAL_DMA_Init+0x1d0>)
 810244a:	4293      	cmp	r3, r2
 810244c:	d02c      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	4a5c      	ldr	r2, [pc, #368]	; (81025c4 <HAL_DMA_Init+0x1d4>)
 8102454:	4293      	cmp	r3, r2
 8102456:	d027      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	4a5a      	ldr	r2, [pc, #360]	; (81025c8 <HAL_DMA_Init+0x1d8>)
 810245e:	4293      	cmp	r3, r2
 8102460:	d022      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	4a59      	ldr	r2, [pc, #356]	; (81025cc <HAL_DMA_Init+0x1dc>)
 8102468:	4293      	cmp	r3, r2
 810246a:	d01d      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	4a57      	ldr	r2, [pc, #348]	; (81025d0 <HAL_DMA_Init+0x1e0>)
 8102472:	4293      	cmp	r3, r2
 8102474:	d018      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	4a56      	ldr	r2, [pc, #344]	; (81025d4 <HAL_DMA_Init+0x1e4>)
 810247c:	4293      	cmp	r3, r2
 810247e:	d013      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	4a54      	ldr	r2, [pc, #336]	; (81025d8 <HAL_DMA_Init+0x1e8>)
 8102486:	4293      	cmp	r3, r2
 8102488:	d00e      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	4a53      	ldr	r2, [pc, #332]	; (81025dc <HAL_DMA_Init+0x1ec>)
 8102490:	4293      	cmp	r3, r2
 8102492:	d009      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	681b      	ldr	r3, [r3, #0]
 8102498:	4a51      	ldr	r2, [pc, #324]	; (81025e0 <HAL_DMA_Init+0x1f0>)
 810249a:	4293      	cmp	r3, r2
 810249c:	d004      	beq.n	81024a8 <HAL_DMA_Init+0xb8>
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	681b      	ldr	r3, [r3, #0]
 81024a2:	4a50      	ldr	r2, [pc, #320]	; (81025e4 <HAL_DMA_Init+0x1f4>)
 81024a4:	4293      	cmp	r3, r2
 81024a6:	d101      	bne.n	81024ac <HAL_DMA_Init+0xbc>
 81024a8:	2301      	movs	r3, #1
 81024aa:	e000      	b.n	81024ae <HAL_DMA_Init+0xbe>
 81024ac:	2300      	movs	r3, #0
 81024ae:	2b00      	cmp	r3, #0
 81024b0:	f000 813b 	beq.w	810272a <HAL_DMA_Init+0x33a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	2200      	movs	r2, #0
 810264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	2200      	movs	r2, #0
 81024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	2202      	movs	r2, #2
 8102654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	2202      	movs	r2, #2
 81024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	4a37      	ldr	r2, [pc, #220]	; (810273c <HAL_DMA_Init+0x1b8>)
 810265e:	4293      	cmp	r3, r2
 8102660:	d04a      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	681b      	ldr	r3, [r3, #0]
 8102666:	4a36      	ldr	r2, [pc, #216]	; (8102740 <HAL_DMA_Init+0x1bc>)
 8102668:	4293      	cmp	r3, r2
 810266a:	d045      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	681b      	ldr	r3, [r3, #0]
 8102670:	4a34      	ldr	r2, [pc, #208]	; (8102744 <HAL_DMA_Init+0x1c0>)
 8102672:	4293      	cmp	r3, r2
 8102674:	d040      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	681b      	ldr	r3, [r3, #0]
 810267a:	4a33      	ldr	r2, [pc, #204]	; (8102748 <HAL_DMA_Init+0x1c4>)
 810267c:	4293      	cmp	r3, r2
 810267e:	d03b      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	681b      	ldr	r3, [r3, #0]
 8102684:	4a31      	ldr	r2, [pc, #196]	; (810274c <HAL_DMA_Init+0x1c8>)
 8102686:	4293      	cmp	r3, r2
 8102688:	d036      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	4a30      	ldr	r2, [pc, #192]	; (8102750 <HAL_DMA_Init+0x1cc>)
 8102690:	4293      	cmp	r3, r2
 8102692:	d031      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 8102694:	687b      	ldr	r3, [r7, #4]
 8102696:	681b      	ldr	r3, [r3, #0]
 8102698:	4a2e      	ldr	r2, [pc, #184]	; (8102754 <HAL_DMA_Init+0x1d0>)
 810269a:	4293      	cmp	r3, r2
 810269c:	d02c      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	681b      	ldr	r3, [r3, #0]
 81026a2:	4a2d      	ldr	r2, [pc, #180]	; (8102758 <HAL_DMA_Init+0x1d4>)
 81026a4:	4293      	cmp	r3, r2
 81026a6:	d027      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	681b      	ldr	r3, [r3, #0]
 81026ac:	4a2b      	ldr	r2, [pc, #172]	; (810275c <HAL_DMA_Init+0x1d8>)
 81026ae:	4293      	cmp	r3, r2
 81026b0:	d022      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	681b      	ldr	r3, [r3, #0]
 81026b6:	4a2a      	ldr	r2, [pc, #168]	; (8102760 <HAL_DMA_Init+0x1dc>)
 81026b8:	4293      	cmp	r3, r2
 81026ba:	d01d      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	681b      	ldr	r3, [r3, #0]
 81026c0:	4a28      	ldr	r2, [pc, #160]	; (8102764 <HAL_DMA_Init+0x1e0>)
 81026c2:	4293      	cmp	r3, r2
 81026c4:	d018      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	4a27      	ldr	r2, [pc, #156]	; (8102768 <HAL_DMA_Init+0x1e4>)
 81026cc:	4293      	cmp	r3, r2
 81026ce:	d013      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	681b      	ldr	r3, [r3, #0]
 81026d4:	4a25      	ldr	r2, [pc, #148]	; (810276c <HAL_DMA_Init+0x1e8>)
 81026d6:	4293      	cmp	r3, r2
 81026d8:	d00e      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	4a24      	ldr	r2, [pc, #144]	; (8102770 <HAL_DMA_Init+0x1ec>)
 81026e0:	4293      	cmp	r3, r2
 81026e2:	d009      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	681b      	ldr	r3, [r3, #0]
 81026e8:	4a22      	ldr	r2, [pc, #136]	; (8102774 <HAL_DMA_Init+0x1f0>)
 81026ea:	4293      	cmp	r3, r2
 81026ec:	d004      	beq.n	81026f8 <HAL_DMA_Init+0x174>
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	681b      	ldr	r3, [r3, #0]
 81026f2:	4a21      	ldr	r2, [pc, #132]	; (8102778 <HAL_DMA_Init+0x1f4>)
 81026f4:	4293      	cmp	r3, r2
 81026f6:	d108      	bne.n	810270a <HAL_DMA_Init+0x186>
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	681a      	ldr	r2, [r3, #0]
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	f022 0201 	bic.w	r2, r2, #1
 8102706:	601a      	str	r2, [r3, #0]
 8102708:	e007      	b.n	810271a <HAL_DMA_Init+0x196>
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	681a      	ldr	r2, [r3, #0]
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	681b      	ldr	r3, [r3, #0]
 8102714:	f022 0201 	bic.w	r2, r2, #1
 8102718:	601a      	str	r2, [r3, #0]
=======
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	4a37      	ldr	r2, [pc, #220]	; (81025a8 <HAL_DMA_Init+0x1b8>)
 81024ca:	4293      	cmp	r3, r2
 81024cc:	d04a      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	681b      	ldr	r3, [r3, #0]
 81024d2:	4a36      	ldr	r2, [pc, #216]	; (81025ac <HAL_DMA_Init+0x1bc>)
 81024d4:	4293      	cmp	r3, r2
 81024d6:	d045      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	681b      	ldr	r3, [r3, #0]
 81024dc:	4a34      	ldr	r2, [pc, #208]	; (81025b0 <HAL_DMA_Init+0x1c0>)
 81024de:	4293      	cmp	r3, r2
 81024e0:	d040      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	4a33      	ldr	r2, [pc, #204]	; (81025b4 <HAL_DMA_Init+0x1c4>)
 81024e8:	4293      	cmp	r3, r2
 81024ea:	d03b      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	4a31      	ldr	r2, [pc, #196]	; (81025b8 <HAL_DMA_Init+0x1c8>)
 81024f2:	4293      	cmp	r3, r2
 81024f4:	d036      	beq.n	8102564 <HAL_DMA_Init+0x174>
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	4a30      	ldr	r2, [pc, #192]	; (81025bc <HAL_DMA_Init+0x1cc>)
 81024fc:	4293      	cmp	r3, r2
 81024fe:	d031      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	4a2e      	ldr	r2, [pc, #184]	; (81025c0 <HAL_DMA_Init+0x1d0>)
 8102506:	4293      	cmp	r3, r2
 8102508:	d02c      	beq.n	8102564 <HAL_DMA_Init+0x174>
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	4a2d      	ldr	r2, [pc, #180]	; (81025c4 <HAL_DMA_Init+0x1d4>)
 8102510:	4293      	cmp	r3, r2
 8102512:	d027      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	4a2b      	ldr	r2, [pc, #172]	; (81025c8 <HAL_DMA_Init+0x1d8>)
 810251a:	4293      	cmp	r3, r2
 810251c:	d022      	beq.n	8102564 <HAL_DMA_Init+0x174>
 810251e:	687b      	ldr	r3, [r7, #4]
 8102520:	681b      	ldr	r3, [r3, #0]
 8102522:	4a2a      	ldr	r2, [pc, #168]	; (81025cc <HAL_DMA_Init+0x1dc>)
 8102524:	4293      	cmp	r3, r2
 8102526:	d01d      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	4a28      	ldr	r2, [pc, #160]	; (81025d0 <HAL_DMA_Init+0x1e0>)
 810252e:	4293      	cmp	r3, r2
 8102530:	d018      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	681b      	ldr	r3, [r3, #0]
 8102536:	4a27      	ldr	r2, [pc, #156]	; (81025d4 <HAL_DMA_Init+0x1e4>)
 8102538:	4293      	cmp	r3, r2
 810253a:	d013      	beq.n	8102564 <HAL_DMA_Init+0x174>
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	681b      	ldr	r3, [r3, #0]
 8102540:	4a25      	ldr	r2, [pc, #148]	; (81025d8 <HAL_DMA_Init+0x1e8>)
 8102542:	4293      	cmp	r3, r2
 8102544:	d00e      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	4a24      	ldr	r2, [pc, #144]	; (81025dc <HAL_DMA_Init+0x1ec>)
 810254c:	4293      	cmp	r3, r2
 810254e:	d009      	beq.n	8102564 <HAL_DMA_Init+0x174>
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	4a22      	ldr	r2, [pc, #136]	; (81025e0 <HAL_DMA_Init+0x1f0>)
 8102556:	4293      	cmp	r3, r2
 8102558:	d004      	beq.n	8102564 <HAL_DMA_Init+0x174>
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	4a21      	ldr	r2, [pc, #132]	; (81025e4 <HAL_DMA_Init+0x1f4>)
 8102560:	4293      	cmp	r3, r2
 8102562:	d108      	bne.n	8102576 <HAL_DMA_Init+0x186>
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	681a      	ldr	r2, [r3, #0]
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	f022 0201 	bic.w	r2, r2, #1
 8102572:	601a      	str	r2, [r3, #0]
 8102574:	e007      	b.n	8102586 <HAL_DMA_Init+0x196>
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	681a      	ldr	r2, [r3, #0]
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	f022 0201 	bic.w	r2, r2, #1
 8102584:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
<<<<<<< HEAD
 810271a:	e02f      	b.n	810277c <HAL_DMA_Init+0x1f8>
=======
 8102586:	e02f      	b.n	81025e8 <HAL_DMA_Init+0x1f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
<<<<<<< HEAD
 810271c:	f7ff fe16 	bl	810234c <HAL_GetTick>
 8102720:	4602      	mov	r2, r0
 8102722:	693b      	ldr	r3, [r7, #16]
 8102724:	1ad3      	subs	r3, r2, r3
 8102726:	2b05      	cmp	r3, #5
 8102728:	d928      	bls.n	810277c <HAL_DMA_Init+0x1f8>
=======
 8102588:	f7ff fe18 	bl	81021bc <HAL_GetTick>
 810258c:	4602      	mov	r2, r0
 810258e:	693b      	ldr	r3, [r7, #16]
 8102590:	1ad3      	subs	r3, r2, r3
 8102592:	2b05      	cmp	r3, #5
 8102594:	d928      	bls.n	81025e8 <HAL_DMA_Init+0x1f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
<<<<<<< HEAD
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	2220      	movs	r2, #32
 810272e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	2220      	movs	r2, #32
 810259a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
<<<<<<< HEAD
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	2203      	movs	r2, #3
 8102734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	2203      	movs	r2, #3
 81025a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        return HAL_ERROR;
<<<<<<< HEAD
 8102738:	2301      	movs	r3, #1
 810273a:	e244      	b.n	8102bc6 <HAL_DMA_Init+0x642>
 810273c:	40020010 	.word	0x40020010
 8102740:	40020028 	.word	0x40020028
 8102744:	40020040 	.word	0x40020040
 8102748:	40020058 	.word	0x40020058
 810274c:	40020070 	.word	0x40020070
 8102750:	40020088 	.word	0x40020088
 8102754:	400200a0 	.word	0x400200a0
 8102758:	400200b8 	.word	0x400200b8
 810275c:	40020410 	.word	0x40020410
 8102760:	40020428 	.word	0x40020428
 8102764:	40020440 	.word	0x40020440
 8102768:	40020458 	.word	0x40020458
 810276c:	40020470 	.word	0x40020470
 8102770:	40020488 	.word	0x40020488
 8102774:	400204a0 	.word	0x400204a0
 8102778:	400204b8 	.word	0x400204b8
=======
 81025a4:	2301      	movs	r3, #1
 81025a6:	e244      	b.n	8102a32 <HAL_DMA_Init+0x642>
 81025a8:	40020010 	.word	0x40020010
 81025ac:	40020028 	.word	0x40020028
 81025b0:	40020040 	.word	0x40020040
 81025b4:	40020058 	.word	0x40020058
 81025b8:	40020070 	.word	0x40020070
 81025bc:	40020088 	.word	0x40020088
 81025c0:	400200a0 	.word	0x400200a0
 81025c4:	400200b8 	.word	0x400200b8
 81025c8:	40020410 	.word	0x40020410
 81025cc:	40020428 	.word	0x40020428
 81025d0:	40020440 	.word	0x40020440
 81025d4:	40020458 	.word	0x40020458
 81025d8:	40020470 	.word	0x40020470
 81025dc:	40020488 	.word	0x40020488
 81025e0:	400204a0 	.word	0x400204a0
 81025e4:	400204b8 	.word	0x400204b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
<<<<<<< HEAD
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	f003 0301 	and.w	r3, r3, #1
 8102786:	2b00      	cmp	r3, #0
 8102788:	d1c8      	bne.n	810271c <HAL_DMA_Init+0x198>
=======
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	f003 0301 	and.w	r3, r3, #1
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	d1c8      	bne.n	8102588 <HAL_DMA_Init+0x198>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
<<<<<<< HEAD
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	681b      	ldr	r3, [r3, #0]
 810278e:	681b      	ldr	r3, [r3, #0]
 8102790:	617b      	str	r3, [r7, #20]
=======
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	681b      	ldr	r3, [r3, #0]
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
<<<<<<< HEAD
 8102792:	697a      	ldr	r2, [r7, #20]
 8102794:	4b84      	ldr	r3, [pc, #528]	; (81029a8 <HAL_DMA_Init+0x424>)
 8102796:	4013      	ands	r3, r2
 8102798:	617b      	str	r3, [r7, #20]
=======
 81025fe:	697a      	ldr	r2, [r7, #20]
 8102600:	4b84      	ldr	r3, [pc, #528]	; (8102814 <HAL_DMA_Init+0x424>)
 8102602:	4013      	ands	r3, r2
 8102604:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
<<<<<<< HEAD
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	689a      	ldr	r2, [r3, #8]
=======
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	689a      	ldr	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
<<<<<<< HEAD
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	68db      	ldr	r3, [r3, #12]
=======
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	68db      	ldr	r3, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    registerValue |=  hdma->Init.Direction           |
<<<<<<< HEAD
 81027a2:	431a      	orrs	r2, r3
=======
 810260e:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
<<<<<<< HEAD
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	691b      	ldr	r3, [r3, #16]
 81027a8:	431a      	orrs	r2, r3
=======
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	691b      	ldr	r3, [r3, #16]
 8102614:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
<<<<<<< HEAD
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	695b      	ldr	r3, [r3, #20]
=======
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	695b      	ldr	r3, [r3, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
<<<<<<< HEAD
 81027ae:	431a      	orrs	r2, r3
=======
 810261a:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
<<<<<<< HEAD
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	699b      	ldr	r3, [r3, #24]
 81027b4:	431a      	orrs	r2, r3
=======
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	699b      	ldr	r3, [r3, #24]
 8102620:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hdma->Init.Mode                | hdma->Init.Priority;
<<<<<<< HEAD
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	69db      	ldr	r3, [r3, #28]
=======
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	69db      	ldr	r3, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
<<<<<<< HEAD
 81027ba:	431a      	orrs	r2, r3
=======
 8102626:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hdma->Init.Mode                | hdma->Init.Priority;
<<<<<<< HEAD
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	6a1b      	ldr	r3, [r3, #32]
 81027c0:	4313      	orrs	r3, r2
=======
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	6a1b      	ldr	r3, [r3, #32]
 810262c:	4313      	orrs	r3, r2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    registerValue |=  hdma->Init.Direction           |
<<<<<<< HEAD
 81027c2:	697a      	ldr	r2, [r7, #20]
 81027c4:	4313      	orrs	r3, r2
 81027c6:	617b      	str	r3, [r7, #20]
=======
 810262e:	697a      	ldr	r2, [r7, #20]
 8102630:	4313      	orrs	r3, r2
 8102632:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
<<<<<<< HEAD
 81027c8:	687b      	ldr	r3, [r7, #4]
 81027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027cc:	2b04      	cmp	r3, #4
 81027ce:	d107      	bne.n	81027e0 <HAL_DMA_Init+0x25c>
=======
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102638:	2b04      	cmp	r3, #4
 810263a:	d107      	bne.n	810264c <HAL_DMA_Init+0x25c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
<<<<<<< HEAD
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81027d8:	4313      	orrs	r3, r2
 81027da:	697a      	ldr	r2, [r7, #20]
 81027dc:	4313      	orrs	r3, r2
 81027de:	617b      	str	r3, [r7, #20]
=======
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102644:	4313      	orrs	r3, r2
 8102646:	697a      	ldr	r2, [r7, #20]
 8102648:	4313      	orrs	r3, r2
 810264a:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
<<<<<<< HEAD
 81027e0:	4b72      	ldr	r3, [pc, #456]	; (81029ac <HAL_DMA_Init+0x428>)
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	0c1b      	lsrs	r3, r3, #16
 81027e6:	041b      	lsls	r3, r3, #16
 81027e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81027ec:	d328      	bcc.n	8102840 <HAL_DMA_Init+0x2bc>
=======
 810264c:	4b72      	ldr	r3, [pc, #456]	; (8102818 <HAL_DMA_Init+0x428>)
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	0c1b      	lsrs	r3, r3, #16
 8102652:	041b      	lsls	r3, r3, #16
 8102654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102658:	d328      	bcc.n	81026ac <HAL_DMA_Init+0x2bc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
<<<<<<< HEAD
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	685b      	ldr	r3, [r3, #4]
 81027f2:	2b28      	cmp	r3, #40	; 0x28
 81027f4:	d903      	bls.n	81027fe <HAL_DMA_Init+0x27a>
 81027f6:	687b      	ldr	r3, [r7, #4]
 81027f8:	685b      	ldr	r3, [r3, #4]
 81027fa:	2b2e      	cmp	r3, #46	; 0x2e
 81027fc:	d917      	bls.n	810282e <HAL_DMA_Init+0x2aa>
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	685b      	ldr	r3, [r3, #4]
 8102802:	2b3e      	cmp	r3, #62	; 0x3e
 8102804:	d903      	bls.n	810280e <HAL_DMA_Init+0x28a>
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	685b      	ldr	r3, [r3, #4]
 810280a:	2b42      	cmp	r3, #66	; 0x42
 810280c:	d90f      	bls.n	810282e <HAL_DMA_Init+0x2aa>
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	685b      	ldr	r3, [r3, #4]
 8102812:	2b46      	cmp	r3, #70	; 0x46
 8102814:	d903      	bls.n	810281e <HAL_DMA_Init+0x29a>
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	685b      	ldr	r3, [r3, #4]
 810281a:	2b48      	cmp	r3, #72	; 0x48
 810281c:	d907      	bls.n	810282e <HAL_DMA_Init+0x2aa>
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	685b      	ldr	r3, [r3, #4]
 8102822:	2b4e      	cmp	r3, #78	; 0x4e
 8102824:	d905      	bls.n	8102832 <HAL_DMA_Init+0x2ae>
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	685b      	ldr	r3, [r3, #4]
 810282a:	2b52      	cmp	r3, #82	; 0x52
 810282c:	d801      	bhi.n	8102832 <HAL_DMA_Init+0x2ae>
 810282e:	2301      	movs	r3, #1
 8102830:	e000      	b.n	8102834 <HAL_DMA_Init+0x2b0>
 8102832:	2300      	movs	r3, #0
 8102834:	2b00      	cmp	r3, #0
 8102836:	d003      	beq.n	8102840 <HAL_DMA_Init+0x2bc>
=======
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	685b      	ldr	r3, [r3, #4]
 810265e:	2b28      	cmp	r3, #40	; 0x28
 8102660:	d903      	bls.n	810266a <HAL_DMA_Init+0x27a>
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	685b      	ldr	r3, [r3, #4]
 8102666:	2b2e      	cmp	r3, #46	; 0x2e
 8102668:	d917      	bls.n	810269a <HAL_DMA_Init+0x2aa>
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	685b      	ldr	r3, [r3, #4]
 810266e:	2b3e      	cmp	r3, #62	; 0x3e
 8102670:	d903      	bls.n	810267a <HAL_DMA_Init+0x28a>
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	685b      	ldr	r3, [r3, #4]
 8102676:	2b42      	cmp	r3, #66	; 0x42
 8102678:	d90f      	bls.n	810269a <HAL_DMA_Init+0x2aa>
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	685b      	ldr	r3, [r3, #4]
 810267e:	2b46      	cmp	r3, #70	; 0x46
 8102680:	d903      	bls.n	810268a <HAL_DMA_Init+0x29a>
 8102682:	687b      	ldr	r3, [r7, #4]
 8102684:	685b      	ldr	r3, [r3, #4]
 8102686:	2b48      	cmp	r3, #72	; 0x48
 8102688:	d907      	bls.n	810269a <HAL_DMA_Init+0x2aa>
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	685b      	ldr	r3, [r3, #4]
 810268e:	2b4e      	cmp	r3, #78	; 0x4e
 8102690:	d905      	bls.n	810269e <HAL_DMA_Init+0x2ae>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	685b      	ldr	r3, [r3, #4]
 8102696:	2b52      	cmp	r3, #82	; 0x52
 8102698:	d801      	bhi.n	810269e <HAL_DMA_Init+0x2ae>
 810269a:	2301      	movs	r3, #1
 810269c:	e000      	b.n	81026a0 <HAL_DMA_Init+0x2b0>
 810269e:	2300      	movs	r3, #0
 81026a0:	2b00      	cmp	r3, #0
 81026a2:	d003      	beq.n	81026ac <HAL_DMA_Init+0x2bc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        registerValue |= DMA_SxCR_TRBUFF;
<<<<<<< HEAD
 8102838:	697b      	ldr	r3, [r7, #20]
 810283a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810283e:	617b      	str	r3, [r7, #20]
=======
 81026a4:	697b      	ldr	r3, [r7, #20]
 81026a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81026aa:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
<<<<<<< HEAD
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	681b      	ldr	r3, [r3, #0]
 8102844:	697a      	ldr	r2, [r7, #20]
 8102846:	601a      	str	r2, [r3, #0]
=======
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	697a      	ldr	r2, [r7, #20]
 81026b2:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
<<<<<<< HEAD
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	681b      	ldr	r3, [r3, #0]
 810284c:	695b      	ldr	r3, [r3, #20]
 810284e:	617b      	str	r3, [r7, #20]
=======
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	681b      	ldr	r3, [r3, #0]
 81026b8:	695b      	ldr	r3, [r3, #20]
 81026ba:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
<<<<<<< HEAD
 8102850:	697b      	ldr	r3, [r7, #20]
 8102852:	f023 0307 	bic.w	r3, r3, #7
 8102856:	617b      	str	r3, [r7, #20]
=======
 81026bc:	697b      	ldr	r3, [r7, #20]
 81026be:	f023 0307 	bic.w	r3, r3, #7
 81026c2:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
<<<<<<< HEAD
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810285c:	697a      	ldr	r2, [r7, #20]
 810285e:	4313      	orrs	r3, r2
 8102860:	617b      	str	r3, [r7, #20]
=======
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026c8:	697a      	ldr	r2, [r7, #20]
 81026ca:	4313      	orrs	r3, r2
 81026cc:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
<<<<<<< HEAD
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102866:	2b04      	cmp	r3, #4
 8102868:	d117      	bne.n	810289a <HAL_DMA_Init+0x316>
=======
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026d2:	2b04      	cmp	r3, #4
 81026d4:	d117      	bne.n	8102706 <HAL_DMA_Init+0x316>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
<<<<<<< HEAD
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810286e:	697a      	ldr	r2, [r7, #20]
 8102870:	4313      	orrs	r3, r2
 8102872:	617b      	str	r3, [r7, #20]
=======
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81026da:	697a      	ldr	r2, [r7, #20]
 81026dc:	4313      	orrs	r3, r2
 81026de:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102878:	2b00      	cmp	r3, #0
 810287a:	d00e      	beq.n	810289a <HAL_DMA_Init+0x316>
=======
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026e4:	2b00      	cmp	r3, #0
 81026e6:	d00e      	beq.n	8102706 <HAL_DMA_Init+0x316>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
<<<<<<< HEAD
 810287c:	6878      	ldr	r0, [r7, #4]
 810287e:	f002 f811 	bl	81048a4 <DMA_CheckFifoParam>
 8102882:	4603      	mov	r3, r0
 8102884:	2b00      	cmp	r3, #0
 8102886:	d008      	beq.n	810289a <HAL_DMA_Init+0x316>
=======
 81026e8:	6878      	ldr	r0, [r7, #4]
 81026ea:	f002 f811 	bl	8104710 <DMA_CheckFifoParam>
 81026ee:	4603      	mov	r3, r0
 81026f0:	2b00      	cmp	r3, #0
 81026f2:	d008      	beq.n	8102706 <HAL_DMA_Init+0x316>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
<<<<<<< HEAD
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	2240      	movs	r2, #64	; 0x40
 810288c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	2240      	movs	r2, #64	; 0x40
 81026f8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 810288e:	687b      	ldr	r3, [r7, #4]
 8102890:	2201      	movs	r2, #1
 8102892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	2201      	movs	r2, #1
 81026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          return HAL_ERROR;
<<<<<<< HEAD
 8102896:	2301      	movs	r3, #1
 8102898:	e195      	b.n	8102bc6 <HAL_DMA_Init+0x642>
=======
 8102702:	2301      	movs	r3, #1
 8102704:	e195      	b.n	8102a32 <HAL_DMA_Init+0x642>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
<<<<<<< HEAD
 810289a:	687b      	ldr	r3, [r7, #4]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	697a      	ldr	r2, [r7, #20]
 81028a0:	615a      	str	r2, [r3, #20]
=======
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	681b      	ldr	r3, [r3, #0]
 810270a:	697a      	ldr	r2, [r7, #20]
 810270c:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 81028a2:	6878      	ldr	r0, [r7, #4]
 81028a4:	f001 ff4c 	bl	8104740 <DMA_CalcBaseAndBitshift>
 81028a8:	4603      	mov	r3, r0
 81028aa:	60bb      	str	r3, [r7, #8]
=======
 810270e:	6878      	ldr	r0, [r7, #4]
 8102710:	f001 ff4c 	bl	81045ac <DMA_CalcBaseAndBitshift>
 8102714:	4603      	mov	r3, r0
 8102716:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81028b0:	f003 031f 	and.w	r3, r3, #31
 81028b4:	223f      	movs	r2, #63	; 0x3f
 81028b6:	409a      	lsls	r2, r3
 81028b8:	68bb      	ldr	r3, [r7, #8]
 81028ba:	609a      	str	r2, [r3, #8]
 81028bc:	e0cb      	b.n	8102a56 <HAL_DMA_Init+0x4d2>
=======
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810271c:	f003 031f 	and.w	r3, r3, #31
 8102720:	223f      	movs	r2, #63	; 0x3f
 8102722:	409a      	lsls	r2, r3
 8102724:	68bb      	ldr	r3, [r7, #8]
 8102726:	609a      	str	r2, [r3, #8]
 8102728:	e0cb      	b.n	81028c2 <HAL_DMA_Init+0x4d2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
<<<<<<< HEAD
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	681b      	ldr	r3, [r3, #0]
 81028c2:	4a3b      	ldr	r2, [pc, #236]	; (81029b0 <HAL_DMA_Init+0x42c>)
 81028c4:	4293      	cmp	r3, r2
 81028c6:	d022      	beq.n	810290e <HAL_DMA_Init+0x38a>
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	681b      	ldr	r3, [r3, #0]
 81028cc:	4a39      	ldr	r2, [pc, #228]	; (81029b4 <HAL_DMA_Init+0x430>)
 81028ce:	4293      	cmp	r3, r2
 81028d0:	d01d      	beq.n	810290e <HAL_DMA_Init+0x38a>
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	4a38      	ldr	r2, [pc, #224]	; (81029b8 <HAL_DMA_Init+0x434>)
 81028d8:	4293      	cmp	r3, r2
 81028da:	d018      	beq.n	810290e <HAL_DMA_Init+0x38a>
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	681b      	ldr	r3, [r3, #0]
 81028e0:	4a36      	ldr	r2, [pc, #216]	; (81029bc <HAL_DMA_Init+0x438>)
 81028e2:	4293      	cmp	r3, r2
 81028e4:	d013      	beq.n	810290e <HAL_DMA_Init+0x38a>
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	681b      	ldr	r3, [r3, #0]
 81028ea:	4a35      	ldr	r2, [pc, #212]	; (81029c0 <HAL_DMA_Init+0x43c>)
 81028ec:	4293      	cmp	r3, r2
 81028ee:	d00e      	beq.n	810290e <HAL_DMA_Init+0x38a>
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	4a33      	ldr	r2, [pc, #204]	; (81029c4 <HAL_DMA_Init+0x440>)
 81028f6:	4293      	cmp	r3, r2
 81028f8:	d009      	beq.n	810290e <HAL_DMA_Init+0x38a>
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	4a32      	ldr	r2, [pc, #200]	; (81029c8 <HAL_DMA_Init+0x444>)
 8102900:	4293      	cmp	r3, r2
 8102902:	d004      	beq.n	810290e <HAL_DMA_Init+0x38a>
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	4a30      	ldr	r2, [pc, #192]	; (81029cc <HAL_DMA_Init+0x448>)
 810290a:	4293      	cmp	r3, r2
 810290c:	d101      	bne.n	8102912 <HAL_DMA_Init+0x38e>
 810290e:	2301      	movs	r3, #1
 8102910:	e000      	b.n	8102914 <HAL_DMA_Init+0x390>
 8102912:	2300      	movs	r3, #0
 8102914:	2b00      	cmp	r3, #0
 8102916:	f000 8095 	beq.w	8102a44 <HAL_DMA_Init+0x4c0>
=======
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	681b      	ldr	r3, [r3, #0]
 810272e:	4a3b      	ldr	r2, [pc, #236]	; (810281c <HAL_DMA_Init+0x42c>)
 8102730:	4293      	cmp	r3, r2
 8102732:	d022      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	681b      	ldr	r3, [r3, #0]
 8102738:	4a39      	ldr	r2, [pc, #228]	; (8102820 <HAL_DMA_Init+0x430>)
 810273a:	4293      	cmp	r3, r2
 810273c:	d01d      	beq.n	810277a <HAL_DMA_Init+0x38a>
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	4a38      	ldr	r2, [pc, #224]	; (8102824 <HAL_DMA_Init+0x434>)
 8102744:	4293      	cmp	r3, r2
 8102746:	d018      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	4a36      	ldr	r2, [pc, #216]	; (8102828 <HAL_DMA_Init+0x438>)
 810274e:	4293      	cmp	r3, r2
 8102750:	d013      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	681b      	ldr	r3, [r3, #0]
 8102756:	4a35      	ldr	r2, [pc, #212]	; (810282c <HAL_DMA_Init+0x43c>)
 8102758:	4293      	cmp	r3, r2
 810275a:	d00e      	beq.n	810277a <HAL_DMA_Init+0x38a>
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	681b      	ldr	r3, [r3, #0]
 8102760:	4a33      	ldr	r2, [pc, #204]	; (8102830 <HAL_DMA_Init+0x440>)
 8102762:	4293      	cmp	r3, r2
 8102764:	d009      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	681b      	ldr	r3, [r3, #0]
 810276a:	4a32      	ldr	r2, [pc, #200]	; (8102834 <HAL_DMA_Init+0x444>)
 810276c:	4293      	cmp	r3, r2
 810276e:	d004      	beq.n	810277a <HAL_DMA_Init+0x38a>
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	681b      	ldr	r3, [r3, #0]
 8102774:	4a30      	ldr	r2, [pc, #192]	; (8102838 <HAL_DMA_Init+0x448>)
 8102776:	4293      	cmp	r3, r2
 8102778:	d101      	bne.n	810277e <HAL_DMA_Init+0x38e>
 810277a:	2301      	movs	r3, #1
 810277c:	e000      	b.n	8102780 <HAL_DMA_Init+0x390>
 810277e:	2300      	movs	r3, #0
 8102780:	2b00      	cmp	r3, #0
 8102782:	f000 8095 	beq.w	81028b0 <HAL_DMA_Init+0x4c0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
<<<<<<< HEAD
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	4a24      	ldr	r2, [pc, #144]	; (81029b0 <HAL_DMA_Init+0x42c>)
 8102920:	4293      	cmp	r3, r2
 8102922:	d021      	beq.n	8102968 <HAL_DMA_Init+0x3e4>
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	4a22      	ldr	r2, [pc, #136]	; (81029b4 <HAL_DMA_Init+0x430>)
 810292a:	4293      	cmp	r3, r2
 810292c:	d01c      	beq.n	8102968 <HAL_DMA_Init+0x3e4>
 810292e:	687b      	ldr	r3, [r7, #4]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	4a21      	ldr	r2, [pc, #132]	; (81029b8 <HAL_DMA_Init+0x434>)
 8102934:	4293      	cmp	r3, r2
 8102936:	d017      	beq.n	8102968 <HAL_DMA_Init+0x3e4>
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	4a1f      	ldr	r2, [pc, #124]	; (81029bc <HAL_DMA_Init+0x438>)
 810293e:	4293      	cmp	r3, r2
 8102940:	d012      	beq.n	8102968 <HAL_DMA_Init+0x3e4>
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	681b      	ldr	r3, [r3, #0]
 8102946:	4a1e      	ldr	r2, [pc, #120]	; (81029c0 <HAL_DMA_Init+0x43c>)
 8102948:	4293      	cmp	r3, r2
 810294a:	d00d      	beq.n	8102968 <HAL_DMA_Init+0x3e4>
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	681b      	ldr	r3, [r3, #0]
 8102950:	4a1c      	ldr	r2, [pc, #112]	; (81029c4 <HAL_DMA_Init+0x440>)
 8102952:	4293      	cmp	r3, r2
 8102954:	d008      	beq.n	8102968 <HAL_DMA_Init+0x3e4>
 8102956:	687b      	ldr	r3, [r7, #4]
 8102958:	681b      	ldr	r3, [r3, #0]
 810295a:	4a1b      	ldr	r2, [pc, #108]	; (81029c8 <HAL_DMA_Init+0x444>)
 810295c:	4293      	cmp	r3, r2
 810295e:	d003      	beq.n	8102968 <HAL_DMA_Init+0x3e4>
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	4a19      	ldr	r2, [pc, #100]	; (81029cc <HAL_DMA_Init+0x448>)
 8102966:	4293      	cmp	r3, r2
 8102968:	bf00      	nop
=======
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	4a24      	ldr	r2, [pc, #144]	; (810281c <HAL_DMA_Init+0x42c>)
 810278c:	4293      	cmp	r3, r2
 810278e:	d021      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	4a22      	ldr	r2, [pc, #136]	; (8102820 <HAL_DMA_Init+0x430>)
 8102796:	4293      	cmp	r3, r2
 8102798:	d01c      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	4a21      	ldr	r2, [pc, #132]	; (8102824 <HAL_DMA_Init+0x434>)
 81027a0:	4293      	cmp	r3, r2
 81027a2:	d017      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	681b      	ldr	r3, [r3, #0]
 81027a8:	4a1f      	ldr	r2, [pc, #124]	; (8102828 <HAL_DMA_Init+0x438>)
 81027aa:	4293      	cmp	r3, r2
 81027ac:	d012      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	4a1e      	ldr	r2, [pc, #120]	; (810282c <HAL_DMA_Init+0x43c>)
 81027b4:	4293      	cmp	r3, r2
 81027b6:	d00d      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	4a1c      	ldr	r2, [pc, #112]	; (8102830 <HAL_DMA_Init+0x440>)
 81027be:	4293      	cmp	r3, r2
 81027c0:	d008      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	4a1b      	ldr	r2, [pc, #108]	; (8102834 <HAL_DMA_Init+0x444>)
 81027c8:	4293      	cmp	r3, r2
 81027ca:	d003      	beq.n	81027d4 <HAL_DMA_Init+0x3e4>
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	4a19      	ldr	r2, [pc, #100]	; (8102838 <HAL_DMA_Init+0x448>)
 81027d2:	4293      	cmp	r3, r2
 81027d4:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 810296a:	687b      	ldr	r3, [r7, #4]
 810296c:	2200      	movs	r2, #0
 810296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	2200      	movs	r2, #0
 81027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	2202      	movs	r2, #2
 8102976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	2202      	movs	r2, #2
 81027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
<<<<<<< HEAD
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	617b      	str	r3, [r7, #20]
=======
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
<<<<<<< HEAD
 8102982:	697b      	ldr	r3, [r7, #20]
 8102984:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102988:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 810298c:	617b      	str	r3, [r7, #20]
=======
 81027ee:	697b      	ldr	r3, [r7, #20]
 81027f0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81027f4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81027f8:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
<<<<<<< HEAD
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	689b      	ldr	r3, [r3, #8]
 8102992:	2b40      	cmp	r3, #64	; 0x40
 8102994:	d01c      	beq.n	81029d0 <HAL_DMA_Init+0x44c>
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	689b      	ldr	r3, [r3, #8]
 810299a:	2b80      	cmp	r3, #128	; 0x80
 810299c:	d102      	bne.n	81029a4 <HAL_DMA_Init+0x420>
 810299e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81029a2:	e016      	b.n	81029d2 <HAL_DMA_Init+0x44e>
 81029a4:	2300      	movs	r3, #0
 81029a6:	e014      	b.n	81029d2 <HAL_DMA_Init+0x44e>
 81029a8:	fe10803f 	.word	0xfe10803f
 81029ac:	5c001000 	.word	0x5c001000
 81029b0:	58025408 	.word	0x58025408
 81029b4:	5802541c 	.word	0x5802541c
 81029b8:	58025430 	.word	0x58025430
 81029bc:	58025444 	.word	0x58025444
 81029c0:	58025458 	.word	0x58025458
 81029c4:	5802546c 	.word	0x5802546c
 81029c8:	58025480 	.word	0x58025480
 81029cc:	58025494 	.word	0x58025494
 81029d0:	2310      	movs	r3, #16
=======
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	689b      	ldr	r3, [r3, #8]
 81027fe:	2b40      	cmp	r3, #64	; 0x40
 8102800:	d01c      	beq.n	810283c <HAL_DMA_Init+0x44c>
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	689b      	ldr	r3, [r3, #8]
 8102806:	2b80      	cmp	r3, #128	; 0x80
 8102808:	d102      	bne.n	8102810 <HAL_DMA_Init+0x420>
 810280a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810280e:	e016      	b.n	810283e <HAL_DMA_Init+0x44e>
 8102810:	2300      	movs	r3, #0
 8102812:	e014      	b.n	810283e <HAL_DMA_Init+0x44e>
 8102814:	fe10803f 	.word	0xfe10803f
 8102818:	5c001000 	.word	0x5c001000
 810281c:	58025408 	.word	0x58025408
 8102820:	5802541c 	.word	0x5802541c
 8102824:	58025430 	.word	0x58025430
 8102828:	58025444 	.word	0x58025444
 810282c:	58025458 	.word	0x58025458
 8102830:	5802546c 	.word	0x5802546c
 8102834:	58025480 	.word	0x58025480
 8102838:	58025494 	.word	0x58025494
 810283c:	2310      	movs	r3, #16
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
<<<<<<< HEAD
 81029d2:	687a      	ldr	r2, [r7, #4]
 81029d4:	68d2      	ldr	r2, [r2, #12]
 81029d6:	08d2      	lsrs	r2, r2, #3
=======
 810283e:	687a      	ldr	r2, [r7, #4]
 8102840:	68d2      	ldr	r2, [r2, #12]
 8102842:	08d2      	lsrs	r2, r2, #3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
<<<<<<< HEAD
 81029d8:	431a      	orrs	r2, r3
=======
 8102844:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
<<<<<<< HEAD
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	691b      	ldr	r3, [r3, #16]
 81029de:	08db      	lsrs	r3, r3, #3
=======
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	691b      	ldr	r3, [r3, #16]
 810284a:	08db      	lsrs	r3, r3, #3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
<<<<<<< HEAD
 81029e0:	431a      	orrs	r2, r3
=======
 810284c:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
<<<<<<< HEAD
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	695b      	ldr	r3, [r3, #20]
 81029e6:	08db      	lsrs	r3, r3, #3
=======
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	695b      	ldr	r3, [r3, #20]
 8102852:	08db      	lsrs	r3, r3, #3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
<<<<<<< HEAD
 81029e8:	431a      	orrs	r2, r3
=======
 8102854:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
<<<<<<< HEAD
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	699b      	ldr	r3, [r3, #24]
 81029ee:	08db      	lsrs	r3, r3, #3
=======
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	699b      	ldr	r3, [r3, #24]
 810285a:	08db      	lsrs	r3, r3, #3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
<<<<<<< HEAD
 81029f0:	431a      	orrs	r2, r3
=======
 810285c:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
<<<<<<< HEAD
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	69db      	ldr	r3, [r3, #28]
 81029f6:	08db      	lsrs	r3, r3, #3
=======
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	69db      	ldr	r3, [r3, #28]
 8102862:	08db      	lsrs	r3, r3, #3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
<<<<<<< HEAD
 81029f8:	431a      	orrs	r2, r3
=======
 8102864:	431a      	orrs	r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
<<<<<<< HEAD
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	6a1b      	ldr	r3, [r3, #32]
 81029fe:	091b      	lsrs	r3, r3, #4
=======
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	6a1b      	ldr	r3, [r3, #32]
 810286a:	091b      	lsrs	r3, r3, #4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
<<<<<<< HEAD
 8102a00:	4313      	orrs	r3, r2
=======
 810286c:	4313      	orrs	r3, r2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
<<<<<<< HEAD
 8102a02:	697a      	ldr	r2, [r7, #20]
 8102a04:	4313      	orrs	r3, r2
 8102a06:	617b      	str	r3, [r7, #20]
=======
 810286e:	697a      	ldr	r2, [r7, #20]
 8102870:	4313      	orrs	r3, r2
 8102872:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
<<<<<<< HEAD
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	697a      	ldr	r2, [r7, #20]
 8102a0e:	601a      	str	r2, [r3, #0]
=======
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	697a      	ldr	r2, [r7, #20]
 810287a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
<<<<<<< HEAD
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	461a      	mov	r2, r3
 8102a16:	4b6e      	ldr	r3, [pc, #440]	; (8102bd0 <HAL_DMA_Init+0x64c>)
 8102a18:	4413      	add	r3, r2
 8102a1a:	4a6e      	ldr	r2, [pc, #440]	; (8102bd4 <HAL_DMA_Init+0x650>)
 8102a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8102a20:	091b      	lsrs	r3, r3, #4
 8102a22:	009a      	lsls	r2, r3, #2
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	65da      	str	r2, [r3, #92]	; 0x5c
=======
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	461a      	mov	r2, r3
 8102882:	4b6e      	ldr	r3, [pc, #440]	; (8102a3c <HAL_DMA_Init+0x64c>)
 8102884:	4413      	add	r3, r2
 8102886:	4a6e      	ldr	r2, [pc, #440]	; (8102a40 <HAL_DMA_Init+0x650>)
 8102888:	fba2 2303 	umull	r2, r3, r2, r3
 810288c:	091b      	lsrs	r3, r3, #4
 810288e:	009a      	lsls	r2, r3, #2
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	65da      	str	r2, [r3, #92]	; 0x5c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 8102a28:	6878      	ldr	r0, [r7, #4]
 8102a2a:	f001 fe89 	bl	8104740 <DMA_CalcBaseAndBitshift>
 8102a2e:	4603      	mov	r3, r0
 8102a30:	60fb      	str	r3, [r7, #12]
=======
 8102894:	6878      	ldr	r0, [r7, #4]
 8102896:	f001 fe89 	bl	81045ac <DMA_CalcBaseAndBitshift>
 810289a:	4603      	mov	r3, r0
 810289c:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
<<<<<<< HEAD
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a36:	f003 031f 	and.w	r3, r3, #31
 8102a3a:	2201      	movs	r2, #1
 8102a3c:	409a      	lsls	r2, r3
 8102a3e:	68fb      	ldr	r3, [r7, #12]
 8102a40:	605a      	str	r2, [r3, #4]
 8102a42:	e008      	b.n	8102a56 <HAL_DMA_Init+0x4d2>
=======
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81028a2:	f003 031f 	and.w	r3, r3, #31
 81028a6:	2201      	movs	r2, #1
 81028a8:	409a      	lsls	r2, r3
 81028aa:	68fb      	ldr	r3, [r7, #12]
 81028ac:	605a      	str	r2, [r3, #4]
 81028ae:	e008      	b.n	81028c2 <HAL_DMA_Init+0x4d2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
<<<<<<< HEAD
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	2240      	movs	r2, #64	; 0x40
 8102a48:	655a      	str	r2, [r3, #84]	; 0x54
=======
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	2240      	movs	r2, #64	; 0x40
 81028b4:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma->State     = HAL_DMA_STATE_ERROR;
<<<<<<< HEAD
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	2203      	movs	r2, #3
 8102a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	2203      	movs	r2, #3
 81028ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    return HAL_ERROR;
<<<<<<< HEAD
 8102a52:	2301      	movs	r3, #1
 8102a54:	e0b7      	b.n	8102bc6 <HAL_DMA_Init+0x642>
=======
 81028be:	2301      	movs	r3, #1
 81028c0:	e0b7      	b.n	8102a32 <HAL_DMA_Init+0x642>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
<<<<<<< HEAD
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	681b      	ldr	r3, [r3, #0]
 8102a5a:	4a5f      	ldr	r2, [pc, #380]	; (8102bd8 <HAL_DMA_Init+0x654>)
 8102a5c:	4293      	cmp	r3, r2
 8102a5e:	d072      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	4a5d      	ldr	r2, [pc, #372]	; (8102bdc <HAL_DMA_Init+0x658>)
 8102a66:	4293      	cmp	r3, r2
 8102a68:	d06d      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	4a5c      	ldr	r2, [pc, #368]	; (8102be0 <HAL_DMA_Init+0x65c>)
 8102a70:	4293      	cmp	r3, r2
 8102a72:	d068      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	4a5a      	ldr	r2, [pc, #360]	; (8102be4 <HAL_DMA_Init+0x660>)
 8102a7a:	4293      	cmp	r3, r2
 8102a7c:	d063      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	4a59      	ldr	r2, [pc, #356]	; (8102be8 <HAL_DMA_Init+0x664>)
 8102a84:	4293      	cmp	r3, r2
 8102a86:	d05e      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	4a57      	ldr	r2, [pc, #348]	; (8102bec <HAL_DMA_Init+0x668>)
 8102a8e:	4293      	cmp	r3, r2
 8102a90:	d059      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	4a56      	ldr	r2, [pc, #344]	; (8102bf0 <HAL_DMA_Init+0x66c>)
 8102a98:	4293      	cmp	r3, r2
 8102a9a:	d054      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	681b      	ldr	r3, [r3, #0]
 8102aa0:	4a54      	ldr	r2, [pc, #336]	; (8102bf4 <HAL_DMA_Init+0x670>)
 8102aa2:	4293      	cmp	r3, r2
 8102aa4:	d04f      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	681b      	ldr	r3, [r3, #0]
 8102aaa:	4a53      	ldr	r2, [pc, #332]	; (8102bf8 <HAL_DMA_Init+0x674>)
 8102aac:	4293      	cmp	r3, r2
 8102aae:	d04a      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	4a51      	ldr	r2, [pc, #324]	; (8102bfc <HAL_DMA_Init+0x678>)
 8102ab6:	4293      	cmp	r3, r2
 8102ab8:	d045      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	4a50      	ldr	r2, [pc, #320]	; (8102c00 <HAL_DMA_Init+0x67c>)
 8102ac0:	4293      	cmp	r3, r2
 8102ac2:	d040      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	681b      	ldr	r3, [r3, #0]
 8102ac8:	4a4e      	ldr	r2, [pc, #312]	; (8102c04 <HAL_DMA_Init+0x680>)
 8102aca:	4293      	cmp	r3, r2
 8102acc:	d03b      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	4a4d      	ldr	r2, [pc, #308]	; (8102c08 <HAL_DMA_Init+0x684>)
 8102ad4:	4293      	cmp	r3, r2
 8102ad6:	d036      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	681b      	ldr	r3, [r3, #0]
 8102adc:	4a4b      	ldr	r2, [pc, #300]	; (8102c0c <HAL_DMA_Init+0x688>)
 8102ade:	4293      	cmp	r3, r2
 8102ae0:	d031      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	4a4a      	ldr	r2, [pc, #296]	; (8102c10 <HAL_DMA_Init+0x68c>)
 8102ae8:	4293      	cmp	r3, r2
 8102aea:	d02c      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	681b      	ldr	r3, [r3, #0]
 8102af0:	4a48      	ldr	r2, [pc, #288]	; (8102c14 <HAL_DMA_Init+0x690>)
 8102af2:	4293      	cmp	r3, r2
 8102af4:	d027      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102af6:	687b      	ldr	r3, [r7, #4]
 8102af8:	681b      	ldr	r3, [r3, #0]
 8102afa:	4a47      	ldr	r2, [pc, #284]	; (8102c18 <HAL_DMA_Init+0x694>)
 8102afc:	4293      	cmp	r3, r2
 8102afe:	d022      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	681b      	ldr	r3, [r3, #0]
 8102b04:	4a45      	ldr	r2, [pc, #276]	; (8102c1c <HAL_DMA_Init+0x698>)
 8102b06:	4293      	cmp	r3, r2
 8102b08:	d01d      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	681b      	ldr	r3, [r3, #0]
 8102b0e:	4a44      	ldr	r2, [pc, #272]	; (8102c20 <HAL_DMA_Init+0x69c>)
 8102b10:	4293      	cmp	r3, r2
 8102b12:	d018      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	681b      	ldr	r3, [r3, #0]
 8102b18:	4a42      	ldr	r2, [pc, #264]	; (8102c24 <HAL_DMA_Init+0x6a0>)
 8102b1a:	4293      	cmp	r3, r2
 8102b1c:	d013      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102b1e:	687b      	ldr	r3, [r7, #4]
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	4a41      	ldr	r2, [pc, #260]	; (8102c28 <HAL_DMA_Init+0x6a4>)
 8102b24:	4293      	cmp	r3, r2
 8102b26:	d00e      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	4a3f      	ldr	r2, [pc, #252]	; (8102c2c <HAL_DMA_Init+0x6a8>)
 8102b2e:	4293      	cmp	r3, r2
 8102b30:	d009      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	681b      	ldr	r3, [r3, #0]
 8102b36:	4a3e      	ldr	r2, [pc, #248]	; (8102c30 <HAL_DMA_Init+0x6ac>)
 8102b38:	4293      	cmp	r3, r2
 8102b3a:	d004      	beq.n	8102b46 <HAL_DMA_Init+0x5c2>
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	4a3c      	ldr	r2, [pc, #240]	; (8102c34 <HAL_DMA_Init+0x6b0>)
 8102b42:	4293      	cmp	r3, r2
 8102b44:	d101      	bne.n	8102b4a <HAL_DMA_Init+0x5c6>
 8102b46:	2301      	movs	r3, #1
 8102b48:	e000      	b.n	8102b4c <HAL_DMA_Init+0x5c8>
 8102b4a:	2300      	movs	r3, #0
 8102b4c:	2b00      	cmp	r3, #0
 8102b4e:	d032      	beq.n	8102bb6 <HAL_DMA_Init+0x632>
=======
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	4a5f      	ldr	r2, [pc, #380]	; (8102a44 <HAL_DMA_Init+0x654>)
 81028c8:	4293      	cmp	r3, r2
 81028ca:	d072      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	4a5d      	ldr	r2, [pc, #372]	; (8102a48 <HAL_DMA_Init+0x658>)
 81028d2:	4293      	cmp	r3, r2
 81028d4:	d06d      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	681b      	ldr	r3, [r3, #0]
 81028da:	4a5c      	ldr	r2, [pc, #368]	; (8102a4c <HAL_DMA_Init+0x65c>)
 81028dc:	4293      	cmp	r3, r2
 81028de:	d068      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	4a5a      	ldr	r2, [pc, #360]	; (8102a50 <HAL_DMA_Init+0x660>)
 81028e6:	4293      	cmp	r3, r2
 81028e8:	d063      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	4a59      	ldr	r2, [pc, #356]	; (8102a54 <HAL_DMA_Init+0x664>)
 81028f0:	4293      	cmp	r3, r2
 81028f2:	d05e      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	4a57      	ldr	r2, [pc, #348]	; (8102a58 <HAL_DMA_Init+0x668>)
 81028fa:	4293      	cmp	r3, r2
 81028fc:	d059      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	681b      	ldr	r3, [r3, #0]
 8102902:	4a56      	ldr	r2, [pc, #344]	; (8102a5c <HAL_DMA_Init+0x66c>)
 8102904:	4293      	cmp	r3, r2
 8102906:	d054      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	4a54      	ldr	r2, [pc, #336]	; (8102a60 <HAL_DMA_Init+0x670>)
 810290e:	4293      	cmp	r3, r2
 8102910:	d04f      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	4a53      	ldr	r2, [pc, #332]	; (8102a64 <HAL_DMA_Init+0x674>)
 8102918:	4293      	cmp	r3, r2
 810291a:	d04a      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	4a51      	ldr	r2, [pc, #324]	; (8102a68 <HAL_DMA_Init+0x678>)
 8102922:	4293      	cmp	r3, r2
 8102924:	d045      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	681b      	ldr	r3, [r3, #0]
 810292a:	4a50      	ldr	r2, [pc, #320]	; (8102a6c <HAL_DMA_Init+0x67c>)
 810292c:	4293      	cmp	r3, r2
 810292e:	d040      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	681b      	ldr	r3, [r3, #0]
 8102934:	4a4e      	ldr	r2, [pc, #312]	; (8102a70 <HAL_DMA_Init+0x680>)
 8102936:	4293      	cmp	r3, r2
 8102938:	d03b      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	4a4d      	ldr	r2, [pc, #308]	; (8102a74 <HAL_DMA_Init+0x684>)
 8102940:	4293      	cmp	r3, r2
 8102942:	d036      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	4a4b      	ldr	r2, [pc, #300]	; (8102a78 <HAL_DMA_Init+0x688>)
 810294a:	4293      	cmp	r3, r2
 810294c:	d031      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	681b      	ldr	r3, [r3, #0]
 8102952:	4a4a      	ldr	r2, [pc, #296]	; (8102a7c <HAL_DMA_Init+0x68c>)
 8102954:	4293      	cmp	r3, r2
 8102956:	d02c      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	4a48      	ldr	r2, [pc, #288]	; (8102a80 <HAL_DMA_Init+0x690>)
 810295e:	4293      	cmp	r3, r2
 8102960:	d027      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	681b      	ldr	r3, [r3, #0]
 8102966:	4a47      	ldr	r2, [pc, #284]	; (8102a84 <HAL_DMA_Init+0x694>)
 8102968:	4293      	cmp	r3, r2
 810296a:	d022      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	4a45      	ldr	r2, [pc, #276]	; (8102a88 <HAL_DMA_Init+0x698>)
 8102972:	4293      	cmp	r3, r2
 8102974:	d01d      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	4a44      	ldr	r2, [pc, #272]	; (8102a8c <HAL_DMA_Init+0x69c>)
 810297c:	4293      	cmp	r3, r2
 810297e:	d018      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	4a42      	ldr	r2, [pc, #264]	; (8102a90 <HAL_DMA_Init+0x6a0>)
 8102986:	4293      	cmp	r3, r2
 8102988:	d013      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	4a41      	ldr	r2, [pc, #260]	; (8102a94 <HAL_DMA_Init+0x6a4>)
 8102990:	4293      	cmp	r3, r2
 8102992:	d00e      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	4a3f      	ldr	r2, [pc, #252]	; (8102a98 <HAL_DMA_Init+0x6a8>)
 810299a:	4293      	cmp	r3, r2
 810299c:	d009      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	4a3e      	ldr	r2, [pc, #248]	; (8102a9c <HAL_DMA_Init+0x6ac>)
 81029a4:	4293      	cmp	r3, r2
 81029a6:	d004      	beq.n	81029b2 <HAL_DMA_Init+0x5c2>
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	4a3c      	ldr	r2, [pc, #240]	; (8102aa0 <HAL_DMA_Init+0x6b0>)
 81029ae:	4293      	cmp	r3, r2
 81029b0:	d101      	bne.n	81029b6 <HAL_DMA_Init+0x5c6>
 81029b2:	2301      	movs	r3, #1
 81029b4:	e000      	b.n	81029b8 <HAL_DMA_Init+0x5c8>
 81029b6:	2300      	movs	r3, #0
 81029b8:	2b00      	cmp	r3, #0
 81029ba:	d032      	beq.n	8102a22 <HAL_DMA_Init+0x632>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
<<<<<<< HEAD
 8102b50:	6878      	ldr	r0, [r7, #4]
 8102b52:	f001 ff23 	bl	810499c <DMA_CalcDMAMUXChannelBaseAndMask>
=======
 81029bc:	6878      	ldr	r0, [r7, #4]
 81029be:	f001 ff23 	bl	8104808 <DMA_CalcDMAMUXChannelBaseAndMask>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
<<<<<<< HEAD
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	689b      	ldr	r3, [r3, #8]
 8102b5a:	2b80      	cmp	r3, #128	; 0x80
 8102b5c:	d102      	bne.n	8102b64 <HAL_DMA_Init+0x5e0>
=======
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	689b      	ldr	r3, [r3, #8]
 81029c6:	2b80      	cmp	r3, #128	; 0x80
 81029c8:	d102      	bne.n	81029d0 <HAL_DMA_Init+0x5e0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
<<<<<<< HEAD
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	2200      	movs	r2, #0
 8102b62:	605a      	str	r2, [r3, #4]
=======
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	2200      	movs	r2, #0
 81029ce:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
<<<<<<< HEAD
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	685a      	ldr	r2, [r3, #4]
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102b6c:	b2d2      	uxtb	r2, r2
 8102b6e:	601a      	str	r2, [r3, #0]
=======
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	685a      	ldr	r2, [r3, #4]
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81029d8:	b2d2      	uxtb	r2, r2
 81029da:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
<<<<<<< HEAD
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102b74:	687a      	ldr	r2, [r7, #4]
 8102b76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102b78:	605a      	str	r2, [r3, #4]
=======
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81029e0:	687a      	ldr	r2, [r7, #4]
 81029e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81029e4:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
<<<<<<< HEAD
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	685b      	ldr	r3, [r3, #4]
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	d010      	beq.n	8102ba4 <HAL_DMA_Init+0x620>
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	685b      	ldr	r3, [r3, #4]
 8102b86:	2b08      	cmp	r3, #8
 8102b88:	d80c      	bhi.n	8102ba4 <HAL_DMA_Init+0x620>
=======
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	685b      	ldr	r3, [r3, #4]
 81029ea:	2b00      	cmp	r3, #0
 81029ec:	d010      	beq.n	8102a10 <HAL_DMA_Init+0x620>
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	685b      	ldr	r3, [r3, #4]
 81029f2:	2b08      	cmp	r3, #8
 81029f4:	d80c      	bhi.n	8102a10 <HAL_DMA_Init+0x620>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
<<<<<<< HEAD
 8102b8a:	6878      	ldr	r0, [r7, #4]
 8102b8c:	f001 ffa0 	bl	8104ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
=======
 81029f6:	6878      	ldr	r0, [r7, #4]
 81029f8:	f001 ffa0 	bl	810493c <DMA_CalcDMAMUXRequestGenBaseAndMask>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
<<<<<<< HEAD
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102b94:	2200      	movs	r2, #0
 8102b96:	601a      	str	r2, [r3, #0]
=======
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a00:	2200      	movs	r2, #0
 8102a02:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
<<<<<<< HEAD
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102b9c:	687a      	ldr	r2, [r7, #4]
 8102b9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102ba0:	605a      	str	r2, [r3, #4]
 8102ba2:	e008      	b.n	8102bb6 <HAL_DMA_Init+0x632>
=======
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102a08:	687a      	ldr	r2, [r7, #4]
 8102a0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102a0c:	605a      	str	r2, [r3, #4]
 8102a0e:	e008      	b.n	8102a22 <HAL_DMA_Init+0x632>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
<<<<<<< HEAD
 8102ba4:	687b      	ldr	r3, [r7, #4]
 8102ba6:	2200      	movs	r2, #0
 8102ba8:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	2200      	movs	r2, #0
 8102a14:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      hdma->DMAmuxRequestGenStatus = 0U;
<<<<<<< HEAD
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	2200      	movs	r2, #0
 8102bae:	671a      	str	r2, [r3, #112]	; 0x70
=======
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	2200      	movs	r2, #0
 8102a1a:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      hdma->DMAmuxRequestGenStatusMask = 0U;
<<<<<<< HEAD
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	2200      	movs	r2, #0
 8102bb4:	675a      	str	r2, [r3, #116]	; 0x74
=======
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	2200      	movs	r2, #0
 8102a20:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	2200      	movs	r2, #0
 8102bba:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	2200      	movs	r2, #0
 8102a26:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8102bbc:	687b      	ldr	r3, [r7, #4]
 8102bbe:	2201      	movs	r2, #1
 8102bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	2201      	movs	r2, #1
 8102a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return HAL_OK;
<<<<<<< HEAD
 8102bc4:	2300      	movs	r3, #0
=======
 8102a30:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8102bc6:	4618      	mov	r0, r3
 8102bc8:	3718      	adds	r7, #24
 8102bca:	46bd      	mov	sp, r7
 8102bcc:	bd80      	pop	{r7, pc}
 8102bce:	bf00      	nop
 8102bd0:	a7fdabf8 	.word	0xa7fdabf8
 8102bd4:	cccccccd 	.word	0xcccccccd
 8102bd8:	40020010 	.word	0x40020010
 8102bdc:	40020028 	.word	0x40020028
 8102be0:	40020040 	.word	0x40020040
 8102be4:	40020058 	.word	0x40020058
 8102be8:	40020070 	.word	0x40020070
 8102bec:	40020088 	.word	0x40020088
 8102bf0:	400200a0 	.word	0x400200a0
 8102bf4:	400200b8 	.word	0x400200b8
 8102bf8:	40020410 	.word	0x40020410
 8102bfc:	40020428 	.word	0x40020428
 8102c00:	40020440 	.word	0x40020440
 8102c04:	40020458 	.word	0x40020458
 8102c08:	40020470 	.word	0x40020470
 8102c0c:	40020488 	.word	0x40020488
 8102c10:	400204a0 	.word	0x400204a0
 8102c14:	400204b8 	.word	0x400204b8
 8102c18:	58025408 	.word	0x58025408
 8102c1c:	5802541c 	.word	0x5802541c
 8102c20:	58025430 	.word	0x58025430
 8102c24:	58025444 	.word	0x58025444
 8102c28:	58025458 	.word	0x58025458
 8102c2c:	5802546c 	.word	0x5802546c
 8102c30:	58025480 	.word	0x58025480
 8102c34:	58025494 	.word	0x58025494
=======
 8102a32:	4618      	mov	r0, r3
 8102a34:	3718      	adds	r7, #24
 8102a36:	46bd      	mov	sp, r7
 8102a38:	bd80      	pop	{r7, pc}
 8102a3a:	bf00      	nop
 8102a3c:	a7fdabf8 	.word	0xa7fdabf8
 8102a40:	cccccccd 	.word	0xcccccccd
 8102a44:	40020010 	.word	0x40020010
 8102a48:	40020028 	.word	0x40020028
 8102a4c:	40020040 	.word	0x40020040
 8102a50:	40020058 	.word	0x40020058
 8102a54:	40020070 	.word	0x40020070
 8102a58:	40020088 	.word	0x40020088
 8102a5c:	400200a0 	.word	0x400200a0
 8102a60:	400200b8 	.word	0x400200b8
 8102a64:	40020410 	.word	0x40020410
 8102a68:	40020428 	.word	0x40020428
 8102a6c:	40020440 	.word	0x40020440
 8102a70:	40020458 	.word	0x40020458
 8102a74:	40020470 	.word	0x40020470
 8102a78:	40020488 	.word	0x40020488
 8102a7c:	400204a0 	.word	0x400204a0
 8102a80:	400204b8 	.word	0x400204b8
 8102a84:	58025408 	.word	0x58025408
 8102a88:	5802541c 	.word	0x5802541c
 8102a8c:	58025430 	.word	0x58025430
 8102a90:	58025444 	.word	0x58025444
 8102a94:	58025458 	.word	0x58025458
 8102a98:	5802546c 	.word	0x5802546c
 8102a9c:	58025480 	.word	0x58025480
 8102aa0:	58025494 	.word	0x58025494
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08102c38 <HAL_DMA_Start_IT>:
=======
08102aa4 <HAL_DMA_Start_IT>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8102c38:	b580      	push	{r7, lr}
 8102c3a:	b086      	sub	sp, #24
 8102c3c:	af00      	add	r7, sp, #0
 8102c3e:	60f8      	str	r0, [r7, #12]
 8102c40:	60b9      	str	r1, [r7, #8]
 8102c42:	607a      	str	r2, [r7, #4]
 8102c44:	603b      	str	r3, [r7, #0]
=======
 8102aa4:	b580      	push	{r7, lr}
 8102aa6:	b086      	sub	sp, #24
 8102aa8:	af00      	add	r7, sp, #0
 8102aaa:	60f8      	str	r0, [r7, #12]
 8102aac:	60b9      	str	r1, [r7, #8]
 8102aae:	607a      	str	r2, [r7, #4]
 8102ab0:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  HAL_StatusTypeDef status = HAL_OK;
<<<<<<< HEAD
 8102c46:	2300      	movs	r3, #0
 8102c48:	75fb      	strb	r3, [r7, #23]
=======
 8102ab2:	2300      	movs	r3, #0
 8102ab4:	75fb      	strb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
<<<<<<< HEAD
 8102c4a:	68fb      	ldr	r3, [r7, #12]
 8102c4c:	2b00      	cmp	r3, #0
 8102c4e:	d101      	bne.n	8102c54 <HAL_DMA_Start_IT+0x1c>
=======
 8102ab6:	68fb      	ldr	r3, [r7, #12]
 8102ab8:	2b00      	cmp	r3, #0
 8102aba:	d101      	bne.n	8102ac0 <HAL_DMA_Start_IT+0x1c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8102c50:	2301      	movs	r3, #1
 8102c52:	e226      	b.n	81030a2 <HAL_DMA_Start_IT+0x46a>
=======
 8102abc:	2301      	movs	r3, #1
 8102abe:	e226      	b.n	8102f0e <HAL_DMA_Start_IT+0x46a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102c5a:	2b01      	cmp	r3, #1
 8102c5c:	d101      	bne.n	8102c62 <HAL_DMA_Start_IT+0x2a>
 8102c5e:	2302      	movs	r3, #2
 8102c60:	e21f      	b.n	81030a2 <HAL_DMA_Start_IT+0x46a>
 8102c62:	68fb      	ldr	r3, [r7, #12]
 8102c64:	2201      	movs	r2, #1
 8102c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8102ac0:	68fb      	ldr	r3, [r7, #12]
 8102ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102ac6:	2b01      	cmp	r3, #1
 8102ac8:	d101      	bne.n	8102ace <HAL_DMA_Start_IT+0x2a>
 8102aca:	2302      	movs	r3, #2
 8102acc:	e21f      	b.n	8102f0e <HAL_DMA_Start_IT+0x46a>
 8102ace:	68fb      	ldr	r3, [r7, #12]
 8102ad0:	2201      	movs	r2, #1
 8102ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if(HAL_DMA_STATE_READY == hdma->State)
<<<<<<< HEAD
 8102c6a:	68fb      	ldr	r3, [r7, #12]
 8102c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102c70:	b2db      	uxtb	r3, r3
 8102c72:	2b01      	cmp	r3, #1
 8102c74:	f040 820a 	bne.w	810308c <HAL_DMA_Start_IT+0x454>
=======
 8102ad6:	68fb      	ldr	r3, [r7, #12]
 8102ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102adc:	b2db      	uxtb	r3, r3
 8102ade:	2b01      	cmp	r3, #1
 8102ae0:	f040 820a 	bne.w	8102ef8 <HAL_DMA_Start_IT+0x454>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8102c78:	68fb      	ldr	r3, [r7, #12]
 8102c7a:	2202      	movs	r2, #2
 8102c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 8102ae4:	68fb      	ldr	r3, [r7, #12]
 8102ae6:	2202      	movs	r2, #2
 8102ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	2200      	movs	r2, #0
 8102c84:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8102aec:	68fb      	ldr	r3, [r7, #12]
 8102aee:	2200      	movs	r2, #0
 8102af0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	4a68      	ldr	r2, [pc, #416]	; (8102e2c <HAL_DMA_Start_IT+0x1f4>)
 8102c8c:	4293      	cmp	r3, r2
 8102c8e:	d04a      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102c90:	68fb      	ldr	r3, [r7, #12]
 8102c92:	681b      	ldr	r3, [r3, #0]
 8102c94:	4a66      	ldr	r2, [pc, #408]	; (8102e30 <HAL_DMA_Start_IT+0x1f8>)
 8102c96:	4293      	cmp	r3, r2
 8102c98:	d045      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102c9a:	68fb      	ldr	r3, [r7, #12]
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	4a65      	ldr	r2, [pc, #404]	; (8102e34 <HAL_DMA_Start_IT+0x1fc>)
 8102ca0:	4293      	cmp	r3, r2
 8102ca2:	d040      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102ca4:	68fb      	ldr	r3, [r7, #12]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	4a63      	ldr	r2, [pc, #396]	; (8102e38 <HAL_DMA_Start_IT+0x200>)
 8102caa:	4293      	cmp	r3, r2
 8102cac:	d03b      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102cae:	68fb      	ldr	r3, [r7, #12]
 8102cb0:	681b      	ldr	r3, [r3, #0]
 8102cb2:	4a62      	ldr	r2, [pc, #392]	; (8102e3c <HAL_DMA_Start_IT+0x204>)
 8102cb4:	4293      	cmp	r3, r2
 8102cb6:	d036      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102cb8:	68fb      	ldr	r3, [r7, #12]
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	4a60      	ldr	r2, [pc, #384]	; (8102e40 <HAL_DMA_Start_IT+0x208>)
 8102cbe:	4293      	cmp	r3, r2
 8102cc0:	d031      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102cc2:	68fb      	ldr	r3, [r7, #12]
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	4a5f      	ldr	r2, [pc, #380]	; (8102e44 <HAL_DMA_Start_IT+0x20c>)
 8102cc8:	4293      	cmp	r3, r2
 8102cca:	d02c      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102ccc:	68fb      	ldr	r3, [r7, #12]
 8102cce:	681b      	ldr	r3, [r3, #0]
 8102cd0:	4a5d      	ldr	r2, [pc, #372]	; (8102e48 <HAL_DMA_Start_IT+0x210>)
 8102cd2:	4293      	cmp	r3, r2
 8102cd4:	d027      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102cd6:	68fb      	ldr	r3, [r7, #12]
 8102cd8:	681b      	ldr	r3, [r3, #0]
 8102cda:	4a5c      	ldr	r2, [pc, #368]	; (8102e4c <HAL_DMA_Start_IT+0x214>)
 8102cdc:	4293      	cmp	r3, r2
 8102cde:	d022      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102ce0:	68fb      	ldr	r3, [r7, #12]
 8102ce2:	681b      	ldr	r3, [r3, #0]
 8102ce4:	4a5a      	ldr	r2, [pc, #360]	; (8102e50 <HAL_DMA_Start_IT+0x218>)
 8102ce6:	4293      	cmp	r3, r2
 8102ce8:	d01d      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102cea:	68fb      	ldr	r3, [r7, #12]
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	4a59      	ldr	r2, [pc, #356]	; (8102e54 <HAL_DMA_Start_IT+0x21c>)
 8102cf0:	4293      	cmp	r3, r2
 8102cf2:	d018      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102cf4:	68fb      	ldr	r3, [r7, #12]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	4a57      	ldr	r2, [pc, #348]	; (8102e58 <HAL_DMA_Start_IT+0x220>)
 8102cfa:	4293      	cmp	r3, r2
 8102cfc:	d013      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102cfe:	68fb      	ldr	r3, [r7, #12]
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	4a56      	ldr	r2, [pc, #344]	; (8102e5c <HAL_DMA_Start_IT+0x224>)
 8102d04:	4293      	cmp	r3, r2
 8102d06:	d00e      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102d08:	68fb      	ldr	r3, [r7, #12]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	4a54      	ldr	r2, [pc, #336]	; (8102e60 <HAL_DMA_Start_IT+0x228>)
 8102d0e:	4293      	cmp	r3, r2
 8102d10:	d009      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102d12:	68fb      	ldr	r3, [r7, #12]
 8102d14:	681b      	ldr	r3, [r3, #0]
 8102d16:	4a53      	ldr	r2, [pc, #332]	; (8102e64 <HAL_DMA_Start_IT+0x22c>)
 8102d18:	4293      	cmp	r3, r2
 8102d1a:	d004      	beq.n	8102d26 <HAL_DMA_Start_IT+0xee>
 8102d1c:	68fb      	ldr	r3, [r7, #12]
 8102d1e:	681b      	ldr	r3, [r3, #0]
 8102d20:	4a51      	ldr	r2, [pc, #324]	; (8102e68 <HAL_DMA_Start_IT+0x230>)
 8102d22:	4293      	cmp	r3, r2
 8102d24:	d108      	bne.n	8102d38 <HAL_DMA_Start_IT+0x100>
 8102d26:	68fb      	ldr	r3, [r7, #12]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	681a      	ldr	r2, [r3, #0]
 8102d2c:	68fb      	ldr	r3, [r7, #12]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	f022 0201 	bic.w	r2, r2, #1
 8102d34:	601a      	str	r2, [r3, #0]
 8102d36:	e007      	b.n	8102d48 <HAL_DMA_Start_IT+0x110>
 8102d38:	68fb      	ldr	r3, [r7, #12]
 8102d3a:	681b      	ldr	r3, [r3, #0]
 8102d3c:	681a      	ldr	r2, [r3, #0]
 8102d3e:	68fb      	ldr	r3, [r7, #12]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	f022 0201 	bic.w	r2, r2, #1
 8102d46:	601a      	str	r2, [r3, #0]
=======
 8102af2:	68fb      	ldr	r3, [r7, #12]
 8102af4:	681b      	ldr	r3, [r3, #0]
 8102af6:	4a68      	ldr	r2, [pc, #416]	; (8102c98 <HAL_DMA_Start_IT+0x1f4>)
 8102af8:	4293      	cmp	r3, r2
 8102afa:	d04a      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102afc:	68fb      	ldr	r3, [r7, #12]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	4a66      	ldr	r2, [pc, #408]	; (8102c9c <HAL_DMA_Start_IT+0x1f8>)
 8102b02:	4293      	cmp	r3, r2
 8102b04:	d045      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b06:	68fb      	ldr	r3, [r7, #12]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	4a65      	ldr	r2, [pc, #404]	; (8102ca0 <HAL_DMA_Start_IT+0x1fc>)
 8102b0c:	4293      	cmp	r3, r2
 8102b0e:	d040      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b10:	68fb      	ldr	r3, [r7, #12]
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	4a63      	ldr	r2, [pc, #396]	; (8102ca4 <HAL_DMA_Start_IT+0x200>)
 8102b16:	4293      	cmp	r3, r2
 8102b18:	d03b      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b1a:	68fb      	ldr	r3, [r7, #12]
 8102b1c:	681b      	ldr	r3, [r3, #0]
 8102b1e:	4a62      	ldr	r2, [pc, #392]	; (8102ca8 <HAL_DMA_Start_IT+0x204>)
 8102b20:	4293      	cmp	r3, r2
 8102b22:	d036      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	4a60      	ldr	r2, [pc, #384]	; (8102cac <HAL_DMA_Start_IT+0x208>)
 8102b2a:	4293      	cmp	r3, r2
 8102b2c:	d031      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b2e:	68fb      	ldr	r3, [r7, #12]
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	4a5f      	ldr	r2, [pc, #380]	; (8102cb0 <HAL_DMA_Start_IT+0x20c>)
 8102b34:	4293      	cmp	r3, r2
 8102b36:	d02c      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b38:	68fb      	ldr	r3, [r7, #12]
 8102b3a:	681b      	ldr	r3, [r3, #0]
 8102b3c:	4a5d      	ldr	r2, [pc, #372]	; (8102cb4 <HAL_DMA_Start_IT+0x210>)
 8102b3e:	4293      	cmp	r3, r2
 8102b40:	d027      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b42:	68fb      	ldr	r3, [r7, #12]
 8102b44:	681b      	ldr	r3, [r3, #0]
 8102b46:	4a5c      	ldr	r2, [pc, #368]	; (8102cb8 <HAL_DMA_Start_IT+0x214>)
 8102b48:	4293      	cmp	r3, r2
 8102b4a:	d022      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b4c:	68fb      	ldr	r3, [r7, #12]
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	4a5a      	ldr	r2, [pc, #360]	; (8102cbc <HAL_DMA_Start_IT+0x218>)
 8102b52:	4293      	cmp	r3, r2
 8102b54:	d01d      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b56:	68fb      	ldr	r3, [r7, #12]
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	4a59      	ldr	r2, [pc, #356]	; (8102cc0 <HAL_DMA_Start_IT+0x21c>)
 8102b5c:	4293      	cmp	r3, r2
 8102b5e:	d018      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b60:	68fb      	ldr	r3, [r7, #12]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	4a57      	ldr	r2, [pc, #348]	; (8102cc4 <HAL_DMA_Start_IT+0x220>)
 8102b66:	4293      	cmp	r3, r2
 8102b68:	d013      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	4a56      	ldr	r2, [pc, #344]	; (8102cc8 <HAL_DMA_Start_IT+0x224>)
 8102b70:	4293      	cmp	r3, r2
 8102b72:	d00e      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b74:	68fb      	ldr	r3, [r7, #12]
 8102b76:	681b      	ldr	r3, [r3, #0]
 8102b78:	4a54      	ldr	r2, [pc, #336]	; (8102ccc <HAL_DMA_Start_IT+0x228>)
 8102b7a:	4293      	cmp	r3, r2
 8102b7c:	d009      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	4a53      	ldr	r2, [pc, #332]	; (8102cd0 <HAL_DMA_Start_IT+0x22c>)
 8102b84:	4293      	cmp	r3, r2
 8102b86:	d004      	beq.n	8102b92 <HAL_DMA_Start_IT+0xee>
 8102b88:	68fb      	ldr	r3, [r7, #12]
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	4a51      	ldr	r2, [pc, #324]	; (8102cd4 <HAL_DMA_Start_IT+0x230>)
 8102b8e:	4293      	cmp	r3, r2
 8102b90:	d108      	bne.n	8102ba4 <HAL_DMA_Start_IT+0x100>
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	681a      	ldr	r2, [r3, #0]
 8102b98:	68fb      	ldr	r3, [r7, #12]
 8102b9a:	681b      	ldr	r3, [r3, #0]
 8102b9c:	f022 0201 	bic.w	r2, r2, #1
 8102ba0:	601a      	str	r2, [r3, #0]
 8102ba2:	e007      	b.n	8102bb4 <HAL_DMA_Start_IT+0x110>
 8102ba4:	68fb      	ldr	r3, [r7, #12]
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	681a      	ldr	r2, [r3, #0]
 8102baa:	68fb      	ldr	r3, [r7, #12]
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	f022 0201 	bic.w	r2, r2, #1
 8102bb2:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
<<<<<<< HEAD
 8102d48:	683b      	ldr	r3, [r7, #0]
 8102d4a:	687a      	ldr	r2, [r7, #4]
 8102d4c:	68b9      	ldr	r1, [r7, #8]
 8102d4e:	68f8      	ldr	r0, [r7, #12]
 8102d50:	f001 fb4a 	bl	81043e8 <DMA_SetConfig>
=======
 8102bb4:	683b      	ldr	r3, [r7, #0]
 8102bb6:	687a      	ldr	r2, [r7, #4]
 8102bb8:	68b9      	ldr	r1, [r7, #8]
 8102bba:	68f8      	ldr	r0, [r7, #12]
 8102bbc:	f001 fb4a 	bl	8104254 <DMA_SetConfig>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
<<<<<<< HEAD
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	4a34      	ldr	r2, [pc, #208]	; (8102e2c <HAL_DMA_Start_IT+0x1f4>)
 8102d5a:	4293      	cmp	r3, r2
 8102d5c:	d04a      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	4a33      	ldr	r2, [pc, #204]	; (8102e30 <HAL_DMA_Start_IT+0x1f8>)
 8102d64:	4293      	cmp	r3, r2
 8102d66:	d045      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	4a31      	ldr	r2, [pc, #196]	; (8102e34 <HAL_DMA_Start_IT+0x1fc>)
 8102d6e:	4293      	cmp	r3, r2
 8102d70:	d040      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102d72:	68fb      	ldr	r3, [r7, #12]
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	4a30      	ldr	r2, [pc, #192]	; (8102e38 <HAL_DMA_Start_IT+0x200>)
 8102d78:	4293      	cmp	r3, r2
 8102d7a:	d03b      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	4a2e      	ldr	r2, [pc, #184]	; (8102e3c <HAL_DMA_Start_IT+0x204>)
 8102d82:	4293      	cmp	r3, r2
 8102d84:	d036      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102d86:	68fb      	ldr	r3, [r7, #12]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	4a2d      	ldr	r2, [pc, #180]	; (8102e40 <HAL_DMA_Start_IT+0x208>)
 8102d8c:	4293      	cmp	r3, r2
 8102d8e:	d031      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102d90:	68fb      	ldr	r3, [r7, #12]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	4a2b      	ldr	r2, [pc, #172]	; (8102e44 <HAL_DMA_Start_IT+0x20c>)
 8102d96:	4293      	cmp	r3, r2
 8102d98:	d02c      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4a2a      	ldr	r2, [pc, #168]	; (8102e48 <HAL_DMA_Start_IT+0x210>)
 8102da0:	4293      	cmp	r3, r2
 8102da2:	d027      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102da4:	68fb      	ldr	r3, [r7, #12]
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	4a28      	ldr	r2, [pc, #160]	; (8102e4c <HAL_DMA_Start_IT+0x214>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d022      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102dae:	68fb      	ldr	r3, [r7, #12]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a27      	ldr	r2, [pc, #156]	; (8102e50 <HAL_DMA_Start_IT+0x218>)
 8102db4:	4293      	cmp	r3, r2
 8102db6:	d01d      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a25      	ldr	r2, [pc, #148]	; (8102e54 <HAL_DMA_Start_IT+0x21c>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d018      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102dc2:	68fb      	ldr	r3, [r7, #12]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	4a24      	ldr	r2, [pc, #144]	; (8102e58 <HAL_DMA_Start_IT+0x220>)
 8102dc8:	4293      	cmp	r3, r2
 8102dca:	d013      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102dcc:	68fb      	ldr	r3, [r7, #12]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	4a22      	ldr	r2, [pc, #136]	; (8102e5c <HAL_DMA_Start_IT+0x224>)
 8102dd2:	4293      	cmp	r3, r2
 8102dd4:	d00e      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102dd6:	68fb      	ldr	r3, [r7, #12]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4a21      	ldr	r2, [pc, #132]	; (8102e60 <HAL_DMA_Start_IT+0x228>)
 8102ddc:	4293      	cmp	r3, r2
 8102dde:	d009      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a1f      	ldr	r2, [pc, #124]	; (8102e64 <HAL_DMA_Start_IT+0x22c>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d004      	beq.n	8102df4 <HAL_DMA_Start_IT+0x1bc>
 8102dea:	68fb      	ldr	r3, [r7, #12]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a1e      	ldr	r2, [pc, #120]	; (8102e68 <HAL_DMA_Start_IT+0x230>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d101      	bne.n	8102df8 <HAL_DMA_Start_IT+0x1c0>
 8102df4:	2301      	movs	r3, #1
 8102df6:	e000      	b.n	8102dfa <HAL_DMA_Start_IT+0x1c2>
 8102df8:	2300      	movs	r3, #0
 8102dfa:	2b00      	cmp	r3, #0
 8102dfc:	d036      	beq.n	8102e6c <HAL_DMA_Start_IT+0x234>
=======
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	4a34      	ldr	r2, [pc, #208]	; (8102c98 <HAL_DMA_Start_IT+0x1f4>)
 8102bc6:	4293      	cmp	r3, r2
 8102bc8:	d04a      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bca:	68fb      	ldr	r3, [r7, #12]
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	4a33      	ldr	r2, [pc, #204]	; (8102c9c <HAL_DMA_Start_IT+0x1f8>)
 8102bd0:	4293      	cmp	r3, r2
 8102bd2:	d045      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bd4:	68fb      	ldr	r3, [r7, #12]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	4a31      	ldr	r2, [pc, #196]	; (8102ca0 <HAL_DMA_Start_IT+0x1fc>)
 8102bda:	4293      	cmp	r3, r2
 8102bdc:	d040      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bde:	68fb      	ldr	r3, [r7, #12]
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	4a30      	ldr	r2, [pc, #192]	; (8102ca4 <HAL_DMA_Start_IT+0x200>)
 8102be4:	4293      	cmp	r3, r2
 8102be6:	d03b      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102be8:	68fb      	ldr	r3, [r7, #12]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	4a2e      	ldr	r2, [pc, #184]	; (8102ca8 <HAL_DMA_Start_IT+0x204>)
 8102bee:	4293      	cmp	r3, r2
 8102bf0:	d036      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bf2:	68fb      	ldr	r3, [r7, #12]
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	4a2d      	ldr	r2, [pc, #180]	; (8102cac <HAL_DMA_Start_IT+0x208>)
 8102bf8:	4293      	cmp	r3, r2
 8102bfa:	d031      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102bfc:	68fb      	ldr	r3, [r7, #12]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	4a2b      	ldr	r2, [pc, #172]	; (8102cb0 <HAL_DMA_Start_IT+0x20c>)
 8102c02:	4293      	cmp	r3, r2
 8102c04:	d02c      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c06:	68fb      	ldr	r3, [r7, #12]
 8102c08:	681b      	ldr	r3, [r3, #0]
 8102c0a:	4a2a      	ldr	r2, [pc, #168]	; (8102cb4 <HAL_DMA_Start_IT+0x210>)
 8102c0c:	4293      	cmp	r3, r2
 8102c0e:	d027      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c10:	68fb      	ldr	r3, [r7, #12]
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	4a28      	ldr	r2, [pc, #160]	; (8102cb8 <HAL_DMA_Start_IT+0x214>)
 8102c16:	4293      	cmp	r3, r2
 8102c18:	d022      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c1a:	68fb      	ldr	r3, [r7, #12]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	4a27      	ldr	r2, [pc, #156]	; (8102cbc <HAL_DMA_Start_IT+0x218>)
 8102c20:	4293      	cmp	r3, r2
 8102c22:	d01d      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c24:	68fb      	ldr	r3, [r7, #12]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	4a25      	ldr	r2, [pc, #148]	; (8102cc0 <HAL_DMA_Start_IT+0x21c>)
 8102c2a:	4293      	cmp	r3, r2
 8102c2c:	d018      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c2e:	68fb      	ldr	r3, [r7, #12]
 8102c30:	681b      	ldr	r3, [r3, #0]
 8102c32:	4a24      	ldr	r2, [pc, #144]	; (8102cc4 <HAL_DMA_Start_IT+0x220>)
 8102c34:	4293      	cmp	r3, r2
 8102c36:	d013      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c38:	68fb      	ldr	r3, [r7, #12]
 8102c3a:	681b      	ldr	r3, [r3, #0]
 8102c3c:	4a22      	ldr	r2, [pc, #136]	; (8102cc8 <HAL_DMA_Start_IT+0x224>)
 8102c3e:	4293      	cmp	r3, r2
 8102c40:	d00e      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c42:	68fb      	ldr	r3, [r7, #12]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	4a21      	ldr	r2, [pc, #132]	; (8102ccc <HAL_DMA_Start_IT+0x228>)
 8102c48:	4293      	cmp	r3, r2
 8102c4a:	d009      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c4c:	68fb      	ldr	r3, [r7, #12]
 8102c4e:	681b      	ldr	r3, [r3, #0]
 8102c50:	4a1f      	ldr	r2, [pc, #124]	; (8102cd0 <HAL_DMA_Start_IT+0x22c>)
 8102c52:	4293      	cmp	r3, r2
 8102c54:	d004      	beq.n	8102c60 <HAL_DMA_Start_IT+0x1bc>
 8102c56:	68fb      	ldr	r3, [r7, #12]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	4a1e      	ldr	r2, [pc, #120]	; (8102cd4 <HAL_DMA_Start_IT+0x230>)
 8102c5c:	4293      	cmp	r3, r2
 8102c5e:	d101      	bne.n	8102c64 <HAL_DMA_Start_IT+0x1c0>
 8102c60:	2301      	movs	r3, #1
 8102c62:	e000      	b.n	8102c66 <HAL_DMA_Start_IT+0x1c2>
 8102c64:	2300      	movs	r3, #0
 8102c66:	2b00      	cmp	r3, #0
 8102c68:	d036      	beq.n	8102cd8 <HAL_DMA_Start_IT+0x234>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
<<<<<<< HEAD
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	681b      	ldr	r3, [r3, #0]
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	f023 021e 	bic.w	r2, r3, #30
 8102e08:	68fb      	ldr	r3, [r7, #12]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	f042 0216 	orr.w	r2, r2, #22
 8102e10:	601a      	str	r2, [r3, #0]
=======
 8102c6a:	68fb      	ldr	r3, [r7, #12]
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	f023 021e 	bic.w	r2, r3, #30
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	f042 0216 	orr.w	r2, r2, #22
 8102c7c:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e16:	2b00      	cmp	r3, #0
 8102e18:	d03e      	beq.n	8102e98 <HAL_DMA_Start_IT+0x260>
=======
 8102c7e:	68fb      	ldr	r3, [r7, #12]
 8102c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c82:	2b00      	cmp	r3, #0
 8102c84:	d03e      	beq.n	8102d04 <HAL_DMA_Start_IT+0x260>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
<<<<<<< HEAD
 8102e1a:	68fb      	ldr	r3, [r7, #12]
 8102e1c:	681b      	ldr	r3, [r3, #0]
 8102e1e:	681a      	ldr	r2, [r3, #0]
 8102e20:	68fb      	ldr	r3, [r7, #12]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	f042 0208 	orr.w	r2, r2, #8
 8102e28:	601a      	str	r2, [r3, #0]
 8102e2a:	e035      	b.n	8102e98 <HAL_DMA_Start_IT+0x260>
 8102e2c:	40020010 	.word	0x40020010
 8102e30:	40020028 	.word	0x40020028
 8102e34:	40020040 	.word	0x40020040
 8102e38:	40020058 	.word	0x40020058
 8102e3c:	40020070 	.word	0x40020070
 8102e40:	40020088 	.word	0x40020088
 8102e44:	400200a0 	.word	0x400200a0
 8102e48:	400200b8 	.word	0x400200b8
 8102e4c:	40020410 	.word	0x40020410
 8102e50:	40020428 	.word	0x40020428
 8102e54:	40020440 	.word	0x40020440
 8102e58:	40020458 	.word	0x40020458
 8102e5c:	40020470 	.word	0x40020470
 8102e60:	40020488 	.word	0x40020488
 8102e64:	400204a0 	.word	0x400204a0
 8102e68:	400204b8 	.word	0x400204b8
=======
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	681a      	ldr	r2, [r3, #0]
 8102c8c:	68fb      	ldr	r3, [r7, #12]
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	f042 0208 	orr.w	r2, r2, #8
 8102c94:	601a      	str	r2, [r3, #0]
 8102c96:	e035      	b.n	8102d04 <HAL_DMA_Start_IT+0x260>
 8102c98:	40020010 	.word	0x40020010
 8102c9c:	40020028 	.word	0x40020028
 8102ca0:	40020040 	.word	0x40020040
 8102ca4:	40020058 	.word	0x40020058
 8102ca8:	40020070 	.word	0x40020070
 8102cac:	40020088 	.word	0x40020088
 8102cb0:	400200a0 	.word	0x400200a0
 8102cb4:	400200b8 	.word	0x400200b8
 8102cb8:	40020410 	.word	0x40020410
 8102cbc:	40020428 	.word	0x40020428
 8102cc0:	40020440 	.word	0x40020440
 8102cc4:	40020458 	.word	0x40020458
 8102cc8:	40020470 	.word	0x40020470
 8102ccc:	40020488 	.word	0x40020488
 8102cd0:	400204a0 	.word	0x400204a0
 8102cd4:	400204b8 	.word	0x400204b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
<<<<<<< HEAD
 8102e6c:	68fb      	ldr	r3, [r7, #12]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	f023 020e 	bic.w	r2, r3, #14
 8102e76:	68fb      	ldr	r3, [r7, #12]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	f042 020a 	orr.w	r2, r2, #10
 8102e7e:	601a      	str	r2, [r3, #0]
=======
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	f023 020e 	bic.w	r2, r3, #14
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	f042 020a 	orr.w	r2, r2, #10
 8102cea:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e84:	2b00      	cmp	r3, #0
 8102e86:	d007      	beq.n	8102e98 <HAL_DMA_Start_IT+0x260>
=======
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102cf0:	2b00      	cmp	r3, #0
 8102cf2:	d007      	beq.n	8102d04 <HAL_DMA_Start_IT+0x260>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
<<<<<<< HEAD
 8102e88:	68fb      	ldr	r3, [r7, #12]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	681a      	ldr	r2, [r3, #0]
 8102e8e:	68fb      	ldr	r3, [r7, #12]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	f042 0204 	orr.w	r2, r2, #4
 8102e96:	601a      	str	r2, [r3, #0]
=======
 8102cf4:	68fb      	ldr	r3, [r7, #12]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	681a      	ldr	r2, [r3, #0]
 8102cfa:	68fb      	ldr	r3, [r7, #12]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	f042 0204 	orr.w	r2, r2, #4
 8102d02:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
<<<<<<< HEAD
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a83      	ldr	r2, [pc, #524]	; (81030ac <HAL_DMA_Start_IT+0x474>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d072      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102ea2:	68fb      	ldr	r3, [r7, #12]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4a82      	ldr	r2, [pc, #520]	; (81030b0 <HAL_DMA_Start_IT+0x478>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d06d      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102eac:	68fb      	ldr	r3, [r7, #12]
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	4a80      	ldr	r2, [pc, #512]	; (81030b4 <HAL_DMA_Start_IT+0x47c>)
 8102eb2:	4293      	cmp	r3, r2
 8102eb4:	d068      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102eb6:	68fb      	ldr	r3, [r7, #12]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	4a7f      	ldr	r2, [pc, #508]	; (81030b8 <HAL_DMA_Start_IT+0x480>)
 8102ebc:	4293      	cmp	r3, r2
 8102ebe:	d063      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	4a7d      	ldr	r2, [pc, #500]	; (81030bc <HAL_DMA_Start_IT+0x484>)
 8102ec6:	4293      	cmp	r3, r2
 8102ec8:	d05e      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	681b      	ldr	r3, [r3, #0]
 8102ece:	4a7c      	ldr	r2, [pc, #496]	; (81030c0 <HAL_DMA_Start_IT+0x488>)
 8102ed0:	4293      	cmp	r3, r2
 8102ed2:	d059      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102ed4:	68fb      	ldr	r3, [r7, #12]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	4a7a      	ldr	r2, [pc, #488]	; (81030c4 <HAL_DMA_Start_IT+0x48c>)
 8102eda:	4293      	cmp	r3, r2
 8102edc:	d054      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102ede:	68fb      	ldr	r3, [r7, #12]
 8102ee0:	681b      	ldr	r3, [r3, #0]
 8102ee2:	4a79      	ldr	r2, [pc, #484]	; (81030c8 <HAL_DMA_Start_IT+0x490>)
 8102ee4:	4293      	cmp	r3, r2
 8102ee6:	d04f      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102ee8:	68fb      	ldr	r3, [r7, #12]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a77      	ldr	r2, [pc, #476]	; (81030cc <HAL_DMA_Start_IT+0x494>)
 8102eee:	4293      	cmp	r3, r2
 8102ef0:	d04a      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102ef2:	68fb      	ldr	r3, [r7, #12]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	4a76      	ldr	r2, [pc, #472]	; (81030d0 <HAL_DMA_Start_IT+0x498>)
 8102ef8:	4293      	cmp	r3, r2
 8102efa:	d045      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102efc:	68fb      	ldr	r3, [r7, #12]
 8102efe:	681b      	ldr	r3, [r3, #0]
 8102f00:	4a74      	ldr	r2, [pc, #464]	; (81030d4 <HAL_DMA_Start_IT+0x49c>)
 8102f02:	4293      	cmp	r3, r2
 8102f04:	d040      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	4a73      	ldr	r2, [pc, #460]	; (81030d8 <HAL_DMA_Start_IT+0x4a0>)
 8102f0c:	4293      	cmp	r3, r2
 8102f0e:	d03b      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f10:	68fb      	ldr	r3, [r7, #12]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a71      	ldr	r2, [pc, #452]	; (81030dc <HAL_DMA_Start_IT+0x4a4>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d036      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f1a:	68fb      	ldr	r3, [r7, #12]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	4a70      	ldr	r2, [pc, #448]	; (81030e0 <HAL_DMA_Start_IT+0x4a8>)
 8102f20:	4293      	cmp	r3, r2
 8102f22:	d031      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f24:	68fb      	ldr	r3, [r7, #12]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	4a6e      	ldr	r2, [pc, #440]	; (81030e4 <HAL_DMA_Start_IT+0x4ac>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d02c      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f2e:	68fb      	ldr	r3, [r7, #12]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4a6d      	ldr	r2, [pc, #436]	; (81030e8 <HAL_DMA_Start_IT+0x4b0>)
 8102f34:	4293      	cmp	r3, r2
 8102f36:	d027      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f38:	68fb      	ldr	r3, [r7, #12]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	4a6b      	ldr	r2, [pc, #428]	; (81030ec <HAL_DMA_Start_IT+0x4b4>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d022      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f42:	68fb      	ldr	r3, [r7, #12]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	4a6a      	ldr	r2, [pc, #424]	; (81030f0 <HAL_DMA_Start_IT+0x4b8>)
 8102f48:	4293      	cmp	r3, r2
 8102f4a:	d01d      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f4c:	68fb      	ldr	r3, [r7, #12]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4a68      	ldr	r2, [pc, #416]	; (81030f4 <HAL_DMA_Start_IT+0x4bc>)
 8102f52:	4293      	cmp	r3, r2
 8102f54:	d018      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f56:	68fb      	ldr	r3, [r7, #12]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	4a67      	ldr	r2, [pc, #412]	; (81030f8 <HAL_DMA_Start_IT+0x4c0>)
 8102f5c:	4293      	cmp	r3, r2
 8102f5e:	d013      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	4a65      	ldr	r2, [pc, #404]	; (81030fc <HAL_DMA_Start_IT+0x4c4>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d00e      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f6a:	68fb      	ldr	r3, [r7, #12]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	4a64      	ldr	r2, [pc, #400]	; (8103100 <HAL_DMA_Start_IT+0x4c8>)
 8102f70:	4293      	cmp	r3, r2
 8102f72:	d009      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f74:	68fb      	ldr	r3, [r7, #12]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4a62      	ldr	r2, [pc, #392]	; (8103104 <HAL_DMA_Start_IT+0x4cc>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d004      	beq.n	8102f88 <HAL_DMA_Start_IT+0x350>
 8102f7e:	68fb      	ldr	r3, [r7, #12]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	4a61      	ldr	r2, [pc, #388]	; (8103108 <HAL_DMA_Start_IT+0x4d0>)
 8102f84:	4293      	cmp	r3, r2
 8102f86:	d101      	bne.n	8102f8c <HAL_DMA_Start_IT+0x354>
 8102f88:	2301      	movs	r3, #1
 8102f8a:	e000      	b.n	8102f8e <HAL_DMA_Start_IT+0x356>
 8102f8c:	2300      	movs	r3, #0
 8102f8e:	2b00      	cmp	r3, #0
 8102f90:	d01a      	beq.n	8102fc8 <HAL_DMA_Start_IT+0x390>
=======
 8102d04:	68fb      	ldr	r3, [r7, #12]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	4a83      	ldr	r2, [pc, #524]	; (8102f18 <HAL_DMA_Start_IT+0x474>)
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d072      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d0e:	68fb      	ldr	r3, [r7, #12]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a82      	ldr	r2, [pc, #520]	; (8102f1c <HAL_DMA_Start_IT+0x478>)
 8102d14:	4293      	cmp	r3, r2
 8102d16:	d06d      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d18:	68fb      	ldr	r3, [r7, #12]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	4a80      	ldr	r2, [pc, #512]	; (8102f20 <HAL_DMA_Start_IT+0x47c>)
 8102d1e:	4293      	cmp	r3, r2
 8102d20:	d068      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d22:	68fb      	ldr	r3, [r7, #12]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	4a7f      	ldr	r2, [pc, #508]	; (8102f24 <HAL_DMA_Start_IT+0x480>)
 8102d28:	4293      	cmp	r3, r2
 8102d2a:	d063      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d2c:	68fb      	ldr	r3, [r7, #12]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	4a7d      	ldr	r2, [pc, #500]	; (8102f28 <HAL_DMA_Start_IT+0x484>)
 8102d32:	4293      	cmp	r3, r2
 8102d34:	d05e      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d36:	68fb      	ldr	r3, [r7, #12]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	4a7c      	ldr	r2, [pc, #496]	; (8102f2c <HAL_DMA_Start_IT+0x488>)
 8102d3c:	4293      	cmp	r3, r2
 8102d3e:	d059      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d40:	68fb      	ldr	r3, [r7, #12]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	4a7a      	ldr	r2, [pc, #488]	; (8102f30 <HAL_DMA_Start_IT+0x48c>)
 8102d46:	4293      	cmp	r3, r2
 8102d48:	d054      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d4a:	68fb      	ldr	r3, [r7, #12]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	4a79      	ldr	r2, [pc, #484]	; (8102f34 <HAL_DMA_Start_IT+0x490>)
 8102d50:	4293      	cmp	r3, r2
 8102d52:	d04f      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	4a77      	ldr	r2, [pc, #476]	; (8102f38 <HAL_DMA_Start_IT+0x494>)
 8102d5a:	4293      	cmp	r3, r2
 8102d5c:	d04a      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	4a76      	ldr	r2, [pc, #472]	; (8102f3c <HAL_DMA_Start_IT+0x498>)
 8102d64:	4293      	cmp	r3, r2
 8102d66:	d045      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	4a74      	ldr	r2, [pc, #464]	; (8102f40 <HAL_DMA_Start_IT+0x49c>)
 8102d6e:	4293      	cmp	r3, r2
 8102d70:	d040      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d72:	68fb      	ldr	r3, [r7, #12]
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	4a73      	ldr	r2, [pc, #460]	; (8102f44 <HAL_DMA_Start_IT+0x4a0>)
 8102d78:	4293      	cmp	r3, r2
 8102d7a:	d03b      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	4a71      	ldr	r2, [pc, #452]	; (8102f48 <HAL_DMA_Start_IT+0x4a4>)
 8102d82:	4293      	cmp	r3, r2
 8102d84:	d036      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d86:	68fb      	ldr	r3, [r7, #12]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	4a70      	ldr	r2, [pc, #448]	; (8102f4c <HAL_DMA_Start_IT+0x4a8>)
 8102d8c:	4293      	cmp	r3, r2
 8102d8e:	d031      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d90:	68fb      	ldr	r3, [r7, #12]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	4a6e      	ldr	r2, [pc, #440]	; (8102f50 <HAL_DMA_Start_IT+0x4ac>)
 8102d96:	4293      	cmp	r3, r2
 8102d98:	d02c      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4a6d      	ldr	r2, [pc, #436]	; (8102f54 <HAL_DMA_Start_IT+0x4b0>)
 8102da0:	4293      	cmp	r3, r2
 8102da2:	d027      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102da4:	68fb      	ldr	r3, [r7, #12]
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	4a6b      	ldr	r2, [pc, #428]	; (8102f58 <HAL_DMA_Start_IT+0x4b4>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d022      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dae:	68fb      	ldr	r3, [r7, #12]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a6a      	ldr	r2, [pc, #424]	; (8102f5c <HAL_DMA_Start_IT+0x4b8>)
 8102db4:	4293      	cmp	r3, r2
 8102db6:	d01d      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a68      	ldr	r2, [pc, #416]	; (8102f60 <HAL_DMA_Start_IT+0x4bc>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d018      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dc2:	68fb      	ldr	r3, [r7, #12]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	4a67      	ldr	r2, [pc, #412]	; (8102f64 <HAL_DMA_Start_IT+0x4c0>)
 8102dc8:	4293      	cmp	r3, r2
 8102dca:	d013      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dcc:	68fb      	ldr	r3, [r7, #12]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	4a65      	ldr	r2, [pc, #404]	; (8102f68 <HAL_DMA_Start_IT+0x4c4>)
 8102dd2:	4293      	cmp	r3, r2
 8102dd4:	d00e      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dd6:	68fb      	ldr	r3, [r7, #12]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4a64      	ldr	r2, [pc, #400]	; (8102f6c <HAL_DMA_Start_IT+0x4c8>)
 8102ddc:	4293      	cmp	r3, r2
 8102dde:	d009      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a62      	ldr	r2, [pc, #392]	; (8102f70 <HAL_DMA_Start_IT+0x4cc>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d004      	beq.n	8102df4 <HAL_DMA_Start_IT+0x350>
 8102dea:	68fb      	ldr	r3, [r7, #12]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a61      	ldr	r2, [pc, #388]	; (8102f74 <HAL_DMA_Start_IT+0x4d0>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d101      	bne.n	8102df8 <HAL_DMA_Start_IT+0x354>
 8102df4:	2301      	movs	r3, #1
 8102df6:	e000      	b.n	8102dfa <HAL_DMA_Start_IT+0x356>
 8102df8:	2300      	movs	r3, #0
 8102dfa:	2b00      	cmp	r3, #0
 8102dfc:	d01a      	beq.n	8102e34 <HAL_DMA_Start_IT+0x390>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
<<<<<<< HEAD
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f96:	681b      	ldr	r3, [r3, #0]
 8102f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102f9c:	2b00      	cmp	r3, #0
 8102f9e:	d007      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x378>
=======
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102e08:	2b00      	cmp	r3, #0
 8102e0a:	d007      	beq.n	8102e1c <HAL_DMA_Start_IT+0x378>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
<<<<<<< HEAD
 8102fa0:	68fb      	ldr	r3, [r7, #12]
 8102fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102fa4:	681a      	ldr	r2, [r3, #0]
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102fae:	601a      	str	r2, [r3, #0]
=======
 8102e0c:	68fb      	ldr	r3, [r7, #12]
 8102e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e10:	681a      	ldr	r2, [r3, #0]
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102e1a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }

      if(hdma->DMAmuxRequestGen != 0U)
<<<<<<< HEAD
 8102fb0:	68fb      	ldr	r3, [r7, #12]
 8102fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d007      	beq.n	8102fc8 <HAL_DMA_Start_IT+0x390>
=======
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e20:	2b00      	cmp	r3, #0
 8102e22:	d007      	beq.n	8102e34 <HAL_DMA_Start_IT+0x390>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 8102fb8:	68fb      	ldr	r3, [r7, #12]
 8102fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102fbc:	681a      	ldr	r2, [r3, #0]
 8102fbe:	68fb      	ldr	r3, [r7, #12]
 8102fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102fc6:	601a      	str	r2, [r3, #0]
=======
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e28:	681a      	ldr	r2, [r3, #0]
 8102e2a:	68fb      	ldr	r3, [r7, #12]
 8102e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102e32:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 8102fc8:	68fb      	ldr	r3, [r7, #12]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	4a37      	ldr	r2, [pc, #220]	; (81030ac <HAL_DMA_Start_IT+0x474>)
 8102fce:	4293      	cmp	r3, r2
 8102fd0:	d04a      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8102fd2:	68fb      	ldr	r3, [r7, #12]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a36      	ldr	r2, [pc, #216]	; (81030b0 <HAL_DMA_Start_IT+0x478>)
 8102fd8:	4293      	cmp	r3, r2
 8102fda:	d045      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8102fdc:	68fb      	ldr	r3, [r7, #12]
 8102fde:	681b      	ldr	r3, [r3, #0]
 8102fe0:	4a34      	ldr	r2, [pc, #208]	; (81030b4 <HAL_DMA_Start_IT+0x47c>)
 8102fe2:	4293      	cmp	r3, r2
 8102fe4:	d040      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8102fe6:	68fb      	ldr	r3, [r7, #12]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	4a33      	ldr	r2, [pc, #204]	; (81030b8 <HAL_DMA_Start_IT+0x480>)
 8102fec:	4293      	cmp	r3, r2
 8102fee:	d03b      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8102ff0:	68fb      	ldr	r3, [r7, #12]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	4a31      	ldr	r2, [pc, #196]	; (81030bc <HAL_DMA_Start_IT+0x484>)
 8102ff6:	4293      	cmp	r3, r2
 8102ff8:	d036      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8102ffa:	68fb      	ldr	r3, [r7, #12]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	4a30      	ldr	r2, [pc, #192]	; (81030c0 <HAL_DMA_Start_IT+0x488>)
 8103000:	4293      	cmp	r3, r2
 8103002:	d031      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8103004:	68fb      	ldr	r3, [r7, #12]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	4a2e      	ldr	r2, [pc, #184]	; (81030c4 <HAL_DMA_Start_IT+0x48c>)
 810300a:	4293      	cmp	r3, r2
 810300c:	d02c      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 810300e:	68fb      	ldr	r3, [r7, #12]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	4a2d      	ldr	r2, [pc, #180]	; (81030c8 <HAL_DMA_Start_IT+0x490>)
 8103014:	4293      	cmp	r3, r2
 8103016:	d027      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8103018:	68fb      	ldr	r3, [r7, #12]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	4a2b      	ldr	r2, [pc, #172]	; (81030cc <HAL_DMA_Start_IT+0x494>)
 810301e:	4293      	cmp	r3, r2
 8103020:	d022      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8103022:	68fb      	ldr	r3, [r7, #12]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a2a      	ldr	r2, [pc, #168]	; (81030d0 <HAL_DMA_Start_IT+0x498>)
 8103028:	4293      	cmp	r3, r2
 810302a:	d01d      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 810302c:	68fb      	ldr	r3, [r7, #12]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	4a28      	ldr	r2, [pc, #160]	; (81030d4 <HAL_DMA_Start_IT+0x49c>)
 8103032:	4293      	cmp	r3, r2
 8103034:	d018      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8103036:	68fb      	ldr	r3, [r7, #12]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	4a27      	ldr	r2, [pc, #156]	; (81030d8 <HAL_DMA_Start_IT+0x4a0>)
 810303c:	4293      	cmp	r3, r2
 810303e:	d013      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8103040:	68fb      	ldr	r3, [r7, #12]
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	4a25      	ldr	r2, [pc, #148]	; (81030dc <HAL_DMA_Start_IT+0x4a4>)
 8103046:	4293      	cmp	r3, r2
 8103048:	d00e      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 810304a:	68fb      	ldr	r3, [r7, #12]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	4a24      	ldr	r2, [pc, #144]	; (81030e0 <HAL_DMA_Start_IT+0x4a8>)
 8103050:	4293      	cmp	r3, r2
 8103052:	d009      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 8103054:	68fb      	ldr	r3, [r7, #12]
 8103056:	681b      	ldr	r3, [r3, #0]
 8103058:	4a22      	ldr	r2, [pc, #136]	; (81030e4 <HAL_DMA_Start_IT+0x4ac>)
 810305a:	4293      	cmp	r3, r2
 810305c:	d004      	beq.n	8103068 <HAL_DMA_Start_IT+0x430>
 810305e:	68fb      	ldr	r3, [r7, #12]
 8103060:	681b      	ldr	r3, [r3, #0]
 8103062:	4a21      	ldr	r2, [pc, #132]	; (81030e8 <HAL_DMA_Start_IT+0x4b0>)
 8103064:	4293      	cmp	r3, r2
 8103066:	d108      	bne.n	810307a <HAL_DMA_Start_IT+0x442>
 8103068:	68fb      	ldr	r3, [r7, #12]
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	681a      	ldr	r2, [r3, #0]
 810306e:	68fb      	ldr	r3, [r7, #12]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	f042 0201 	orr.w	r2, r2, #1
 8103076:	601a      	str	r2, [r3, #0]
 8103078:	e012      	b.n	81030a0 <HAL_DMA_Start_IT+0x468>
 810307a:	68fb      	ldr	r3, [r7, #12]
 810307c:	681b      	ldr	r3, [r3, #0]
 810307e:	681a      	ldr	r2, [r3, #0]
 8103080:	68fb      	ldr	r3, [r7, #12]
 8103082:	681b      	ldr	r3, [r3, #0]
 8103084:	f042 0201 	orr.w	r2, r2, #1
 8103088:	601a      	str	r2, [r3, #0]
 810308a:	e009      	b.n	81030a0 <HAL_DMA_Start_IT+0x468>
=======
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	4a37      	ldr	r2, [pc, #220]	; (8102f18 <HAL_DMA_Start_IT+0x474>)
 8102e3a:	4293      	cmp	r3, r2
 8102e3c:	d04a      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e3e:	68fb      	ldr	r3, [r7, #12]
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	4a36      	ldr	r2, [pc, #216]	; (8102f1c <HAL_DMA_Start_IT+0x478>)
 8102e44:	4293      	cmp	r3, r2
 8102e46:	d045      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e48:	68fb      	ldr	r3, [r7, #12]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	4a34      	ldr	r2, [pc, #208]	; (8102f20 <HAL_DMA_Start_IT+0x47c>)
 8102e4e:	4293      	cmp	r3, r2
 8102e50:	d040      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e52:	68fb      	ldr	r3, [r7, #12]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	4a33      	ldr	r2, [pc, #204]	; (8102f24 <HAL_DMA_Start_IT+0x480>)
 8102e58:	4293      	cmp	r3, r2
 8102e5a:	d03b      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e5c:	68fb      	ldr	r3, [r7, #12]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	4a31      	ldr	r2, [pc, #196]	; (8102f28 <HAL_DMA_Start_IT+0x484>)
 8102e62:	4293      	cmp	r3, r2
 8102e64:	d036      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e66:	68fb      	ldr	r3, [r7, #12]
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	4a30      	ldr	r2, [pc, #192]	; (8102f2c <HAL_DMA_Start_IT+0x488>)
 8102e6c:	4293      	cmp	r3, r2
 8102e6e:	d031      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e70:	68fb      	ldr	r3, [r7, #12]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a2e      	ldr	r2, [pc, #184]	; (8102f30 <HAL_DMA_Start_IT+0x48c>)
 8102e76:	4293      	cmp	r3, r2
 8102e78:	d02c      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e7a:	68fb      	ldr	r3, [r7, #12]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	4a2d      	ldr	r2, [pc, #180]	; (8102f34 <HAL_DMA_Start_IT+0x490>)
 8102e80:	4293      	cmp	r3, r2
 8102e82:	d027      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e84:	68fb      	ldr	r3, [r7, #12]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	4a2b      	ldr	r2, [pc, #172]	; (8102f38 <HAL_DMA_Start_IT+0x494>)
 8102e8a:	4293      	cmp	r3, r2
 8102e8c:	d022      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e8e:	68fb      	ldr	r3, [r7, #12]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	4a2a      	ldr	r2, [pc, #168]	; (8102f3c <HAL_DMA_Start_IT+0x498>)
 8102e94:	4293      	cmp	r3, r2
 8102e96:	d01d      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a28      	ldr	r2, [pc, #160]	; (8102f40 <HAL_DMA_Start_IT+0x49c>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d018      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102ea2:	68fb      	ldr	r3, [r7, #12]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4a27      	ldr	r2, [pc, #156]	; (8102f44 <HAL_DMA_Start_IT+0x4a0>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d013      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102eac:	68fb      	ldr	r3, [r7, #12]
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	4a25      	ldr	r2, [pc, #148]	; (8102f48 <HAL_DMA_Start_IT+0x4a4>)
 8102eb2:	4293      	cmp	r3, r2
 8102eb4:	d00e      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102eb6:	68fb      	ldr	r3, [r7, #12]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	4a24      	ldr	r2, [pc, #144]	; (8102f4c <HAL_DMA_Start_IT+0x4a8>)
 8102ebc:	4293      	cmp	r3, r2
 8102ebe:	d009      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	4a22      	ldr	r2, [pc, #136]	; (8102f50 <HAL_DMA_Start_IT+0x4ac>)
 8102ec6:	4293      	cmp	r3, r2
 8102ec8:	d004      	beq.n	8102ed4 <HAL_DMA_Start_IT+0x430>
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	681b      	ldr	r3, [r3, #0]
 8102ece:	4a21      	ldr	r2, [pc, #132]	; (8102f54 <HAL_DMA_Start_IT+0x4b0>)
 8102ed0:	4293      	cmp	r3, r2
 8102ed2:	d108      	bne.n	8102ee6 <HAL_DMA_Start_IT+0x442>
 8102ed4:	68fb      	ldr	r3, [r7, #12]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	681a      	ldr	r2, [r3, #0]
 8102eda:	68fb      	ldr	r3, [r7, #12]
 8102edc:	681b      	ldr	r3, [r3, #0]
 8102ede:	f042 0201 	orr.w	r2, r2, #1
 8102ee2:	601a      	str	r2, [r3, #0]
 8102ee4:	e012      	b.n	8102f0c <HAL_DMA_Start_IT+0x468>
 8102ee6:	68fb      	ldr	r3, [r7, #12]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	681a      	ldr	r2, [r3, #0]
 8102eec:	68fb      	ldr	r3, [r7, #12]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	f042 0201 	orr.w	r2, r2, #1
 8102ef4:	601a      	str	r2, [r3, #0]
 8102ef6:	e009      	b.n	8102f0c <HAL_DMA_Start_IT+0x468>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 810308c:	68fb      	ldr	r3, [r7, #12]
 810308e:	2200      	movs	r2, #0
 8103090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	2200      	movs	r2, #0
 8102efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
<<<<<<< HEAD
 8103094:	68fb      	ldr	r3, [r7, #12]
 8103096:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810309a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102f06:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Return error status */
    status = HAL_ERROR;
<<<<<<< HEAD
 810309c:	2301      	movs	r3, #1
 810309e:	75fb      	strb	r3, [r7, #23]
=======
 8102f08:	2301      	movs	r3, #1
 8102f0a:	75fb      	strb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  return status;
<<<<<<< HEAD
 81030a0:	7dfb      	ldrb	r3, [r7, #23]
=======
 8102f0c:	7dfb      	ldrb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81030a2:	4618      	mov	r0, r3
 81030a4:	3718      	adds	r7, #24
 81030a6:	46bd      	mov	sp, r7
 81030a8:	bd80      	pop	{r7, pc}
 81030aa:	bf00      	nop
 81030ac:	40020010 	.word	0x40020010
 81030b0:	40020028 	.word	0x40020028
 81030b4:	40020040 	.word	0x40020040
 81030b8:	40020058 	.word	0x40020058
 81030bc:	40020070 	.word	0x40020070
 81030c0:	40020088 	.word	0x40020088
 81030c4:	400200a0 	.word	0x400200a0
 81030c8:	400200b8 	.word	0x400200b8
 81030cc:	40020410 	.word	0x40020410
 81030d0:	40020428 	.word	0x40020428
 81030d4:	40020440 	.word	0x40020440
 81030d8:	40020458 	.word	0x40020458
 81030dc:	40020470 	.word	0x40020470
 81030e0:	40020488 	.word	0x40020488
 81030e4:	400204a0 	.word	0x400204a0
 81030e8:	400204b8 	.word	0x400204b8
 81030ec:	58025408 	.word	0x58025408
 81030f0:	5802541c 	.word	0x5802541c
 81030f4:	58025430 	.word	0x58025430
 81030f8:	58025444 	.word	0x58025444
 81030fc:	58025458 	.word	0x58025458
 8103100:	5802546c 	.word	0x5802546c
 8103104:	58025480 	.word	0x58025480
 8103108:	58025494 	.word	0x58025494
=======
 8102f0e:	4618      	mov	r0, r3
 8102f10:	3718      	adds	r7, #24
 8102f12:	46bd      	mov	sp, r7
 8102f14:	bd80      	pop	{r7, pc}
 8102f16:	bf00      	nop
 8102f18:	40020010 	.word	0x40020010
 8102f1c:	40020028 	.word	0x40020028
 8102f20:	40020040 	.word	0x40020040
 8102f24:	40020058 	.word	0x40020058
 8102f28:	40020070 	.word	0x40020070
 8102f2c:	40020088 	.word	0x40020088
 8102f30:	400200a0 	.word	0x400200a0
 8102f34:	400200b8 	.word	0x400200b8
 8102f38:	40020410 	.word	0x40020410
 8102f3c:	40020428 	.word	0x40020428
 8102f40:	40020440 	.word	0x40020440
 8102f44:	40020458 	.word	0x40020458
 8102f48:	40020470 	.word	0x40020470
 8102f4c:	40020488 	.word	0x40020488
 8102f50:	400204a0 	.word	0x400204a0
 8102f54:	400204b8 	.word	0x400204b8
 8102f58:	58025408 	.word	0x58025408
 8102f5c:	5802541c 	.word	0x5802541c
 8102f60:	58025430 	.word	0x58025430
 8102f64:	58025444 	.word	0x58025444
 8102f68:	58025458 	.word	0x58025458
 8102f6c:	5802546c 	.word	0x5802546c
 8102f70:	58025480 	.word	0x58025480
 8102f74:	58025494 	.word	0x58025494
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810310c <HAL_DMA_Abort_IT>:
=======
08102f78 <HAL_DMA_Abort_IT>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 810310c:	b580      	push	{r7, lr}
 810310e:	b084      	sub	sp, #16
 8103110:	af00      	add	r7, sp, #0
 8103112:	6078      	str	r0, [r7, #4]
=======
 8102f78:	b580      	push	{r7, lr}
 8102f7a:	b084      	sub	sp, #16
 8102f7c:	af00      	add	r7, sp, #0
 8102f7e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
<<<<<<< HEAD
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	2b00      	cmp	r3, #0
 8103118:	d101      	bne.n	810311e <HAL_DMA_Abort_IT+0x12>
=======
 8102f80:	687b      	ldr	r3, [r7, #4]
 8102f82:	2b00      	cmp	r3, #0
 8102f84:	d101      	bne.n	8102f8a <HAL_DMA_Abort_IT+0x12>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 810311a:	2301      	movs	r3, #1
 810311c:	e205      	b.n	810352a <HAL_DMA_Abort_IT+0x41e>
=======
 8102f86:	2301      	movs	r3, #1
 8102f88:	e205      	b.n	8103396 <HAL_DMA_Abort_IT+0x41e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103124:	b2db      	uxtb	r3, r3
 8103126:	2b02      	cmp	r3, #2
 8103128:	d004      	beq.n	8103134 <HAL_DMA_Abort_IT+0x28>
=======
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102f90:	b2db      	uxtb	r3, r3
 8102f92:	2b02      	cmp	r3, #2
 8102f94:	d004      	beq.n	8102fa0 <HAL_DMA_Abort_IT+0x28>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
<<<<<<< HEAD
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	2280      	movs	r2, #128	; 0x80
 810312e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	2280      	movs	r2, #128	; 0x80
 8102f9a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return HAL_ERROR;
<<<<<<< HEAD
 8103130:	2301      	movs	r3, #1
 8103132:	e1fa      	b.n	810352a <HAL_DMA_Abort_IT+0x41e>
=======
 8102f9c:	2301      	movs	r3, #1
 8102f9e:	e1fa      	b.n	8103396 <HAL_DMA_Abort_IT+0x41e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
<<<<<<< HEAD
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	4a8c      	ldr	r2, [pc, #560]	; (810336c <HAL_DMA_Abort_IT+0x260>)
 810313a:	4293      	cmp	r3, r2
 810313c:	d04a      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	4a8b      	ldr	r2, [pc, #556]	; (8103370 <HAL_DMA_Abort_IT+0x264>)
 8103144:	4293      	cmp	r3, r2
 8103146:	d045      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	4a89      	ldr	r2, [pc, #548]	; (8103374 <HAL_DMA_Abort_IT+0x268>)
 810314e:	4293      	cmp	r3, r2
 8103150:	d040      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	4a88      	ldr	r2, [pc, #544]	; (8103378 <HAL_DMA_Abort_IT+0x26c>)
 8103158:	4293      	cmp	r3, r2
 810315a:	d03b      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	4a86      	ldr	r2, [pc, #536]	; (810337c <HAL_DMA_Abort_IT+0x270>)
 8103162:	4293      	cmp	r3, r2
 8103164:	d036      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	4a85      	ldr	r2, [pc, #532]	; (8103380 <HAL_DMA_Abort_IT+0x274>)
 810316c:	4293      	cmp	r3, r2
 810316e:	d031      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	4a83      	ldr	r2, [pc, #524]	; (8103384 <HAL_DMA_Abort_IT+0x278>)
 8103176:	4293      	cmp	r3, r2
 8103178:	d02c      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	4a82      	ldr	r2, [pc, #520]	; (8103388 <HAL_DMA_Abort_IT+0x27c>)
 8103180:	4293      	cmp	r3, r2
 8103182:	d027      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	4a80      	ldr	r2, [pc, #512]	; (810338c <HAL_DMA_Abort_IT+0x280>)
 810318a:	4293      	cmp	r3, r2
 810318c:	d022      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	4a7f      	ldr	r2, [pc, #508]	; (8103390 <HAL_DMA_Abort_IT+0x284>)
 8103194:	4293      	cmp	r3, r2
 8103196:	d01d      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	4a7d      	ldr	r2, [pc, #500]	; (8103394 <HAL_DMA_Abort_IT+0x288>)
 810319e:	4293      	cmp	r3, r2
 81031a0:	d018      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	4a7c      	ldr	r2, [pc, #496]	; (8103398 <HAL_DMA_Abort_IT+0x28c>)
 81031a8:	4293      	cmp	r3, r2
 81031aa:	d013      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	681b      	ldr	r3, [r3, #0]
 81031b0:	4a7a      	ldr	r2, [pc, #488]	; (810339c <HAL_DMA_Abort_IT+0x290>)
 81031b2:	4293      	cmp	r3, r2
 81031b4:	d00e      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	4a79      	ldr	r2, [pc, #484]	; (81033a0 <HAL_DMA_Abort_IT+0x294>)
 81031bc:	4293      	cmp	r3, r2
 81031be:	d009      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	681b      	ldr	r3, [r3, #0]
 81031c4:	4a77      	ldr	r2, [pc, #476]	; (81033a4 <HAL_DMA_Abort_IT+0x298>)
 81031c6:	4293      	cmp	r3, r2
 81031c8:	d004      	beq.n	81031d4 <HAL_DMA_Abort_IT+0xc8>
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	4a76      	ldr	r2, [pc, #472]	; (81033a8 <HAL_DMA_Abort_IT+0x29c>)
 81031d0:	4293      	cmp	r3, r2
 81031d2:	d101      	bne.n	81031d8 <HAL_DMA_Abort_IT+0xcc>
 81031d4:	2301      	movs	r3, #1
 81031d6:	e000      	b.n	81031da <HAL_DMA_Abort_IT+0xce>
 81031d8:	2300      	movs	r3, #0
 81031da:	2b00      	cmp	r3, #0
 81031dc:	d065      	beq.n	81032aa <HAL_DMA_Abort_IT+0x19e>
=======
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	4a8c      	ldr	r2, [pc, #560]	; (81031d8 <HAL_DMA_Abort_IT+0x260>)
 8102fa6:	4293      	cmp	r3, r2
 8102fa8:	d04a      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	4a8b      	ldr	r2, [pc, #556]	; (81031dc <HAL_DMA_Abort_IT+0x264>)
 8102fb0:	4293      	cmp	r3, r2
 8102fb2:	d045      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	4a89      	ldr	r2, [pc, #548]	; (81031e0 <HAL_DMA_Abort_IT+0x268>)
 8102fba:	4293      	cmp	r3, r2
 8102fbc:	d040      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	4a88      	ldr	r2, [pc, #544]	; (81031e4 <HAL_DMA_Abort_IT+0x26c>)
 8102fc4:	4293      	cmp	r3, r2
 8102fc6:	d03b      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	4a86      	ldr	r2, [pc, #536]	; (81031e8 <HAL_DMA_Abort_IT+0x270>)
 8102fce:	4293      	cmp	r3, r2
 8102fd0:	d036      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a85      	ldr	r2, [pc, #532]	; (81031ec <HAL_DMA_Abort_IT+0x274>)
 8102fd8:	4293      	cmp	r3, r2
 8102fda:	d031      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	681b      	ldr	r3, [r3, #0]
 8102fe0:	4a83      	ldr	r2, [pc, #524]	; (81031f0 <HAL_DMA_Abort_IT+0x278>)
 8102fe2:	4293      	cmp	r3, r2
 8102fe4:	d02c      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	4a82      	ldr	r2, [pc, #520]	; (81031f4 <HAL_DMA_Abort_IT+0x27c>)
 8102fec:	4293      	cmp	r3, r2
 8102fee:	d027      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	4a80      	ldr	r2, [pc, #512]	; (81031f8 <HAL_DMA_Abort_IT+0x280>)
 8102ff6:	4293      	cmp	r3, r2
 8102ff8:	d022      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	4a7f      	ldr	r2, [pc, #508]	; (81031fc <HAL_DMA_Abort_IT+0x284>)
 8103000:	4293      	cmp	r3, r2
 8103002:	d01d      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	4a7d      	ldr	r2, [pc, #500]	; (8103200 <HAL_DMA_Abort_IT+0x288>)
 810300a:	4293      	cmp	r3, r2
 810300c:	d018      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	4a7c      	ldr	r2, [pc, #496]	; (8103204 <HAL_DMA_Abort_IT+0x28c>)
 8103014:	4293      	cmp	r3, r2
 8103016:	d013      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	4a7a      	ldr	r2, [pc, #488]	; (8103208 <HAL_DMA_Abort_IT+0x290>)
 810301e:	4293      	cmp	r3, r2
 8103020:	d00e      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a79      	ldr	r2, [pc, #484]	; (810320c <HAL_DMA_Abort_IT+0x294>)
 8103028:	4293      	cmp	r3, r2
 810302a:	d009      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	4a77      	ldr	r2, [pc, #476]	; (8103210 <HAL_DMA_Abort_IT+0x298>)
 8103032:	4293      	cmp	r3, r2
 8103034:	d004      	beq.n	8103040 <HAL_DMA_Abort_IT+0xc8>
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	4a76      	ldr	r2, [pc, #472]	; (8103214 <HAL_DMA_Abort_IT+0x29c>)
 810303c:	4293      	cmp	r3, r2
 810303e:	d101      	bne.n	8103044 <HAL_DMA_Abort_IT+0xcc>
 8103040:	2301      	movs	r3, #1
 8103042:	e000      	b.n	8103046 <HAL_DMA_Abort_IT+0xce>
 8103044:	2300      	movs	r3, #0
 8103046:	2b00      	cmp	r3, #0
 8103048:	d065      	beq.n	8103116 <HAL_DMA_Abort_IT+0x19e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	2204      	movs	r2, #4
 81031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	2204      	movs	r2, #4
 810304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	4a60      	ldr	r2, [pc, #384]	; (810336c <HAL_DMA_Abort_IT+0x260>)
 81031ec:	4293      	cmp	r3, r2
 81031ee:	d04a      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	4a5e      	ldr	r2, [pc, #376]	; (8103370 <HAL_DMA_Abort_IT+0x264>)
 81031f6:	4293      	cmp	r3, r2
 81031f8:	d045      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	4a5d      	ldr	r2, [pc, #372]	; (8103374 <HAL_DMA_Abort_IT+0x268>)
 8103200:	4293      	cmp	r3, r2
 8103202:	d040      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	4a5b      	ldr	r2, [pc, #364]	; (8103378 <HAL_DMA_Abort_IT+0x26c>)
 810320a:	4293      	cmp	r3, r2
 810320c:	d03b      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	4a5a      	ldr	r2, [pc, #360]	; (810337c <HAL_DMA_Abort_IT+0x270>)
 8103214:	4293      	cmp	r3, r2
 8103216:	d036      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	681b      	ldr	r3, [r3, #0]
 810321c:	4a58      	ldr	r2, [pc, #352]	; (8103380 <HAL_DMA_Abort_IT+0x274>)
 810321e:	4293      	cmp	r3, r2
 8103220:	d031      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	681b      	ldr	r3, [r3, #0]
 8103226:	4a57      	ldr	r2, [pc, #348]	; (8103384 <HAL_DMA_Abort_IT+0x278>)
 8103228:	4293      	cmp	r3, r2
 810322a:	d02c      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	681b      	ldr	r3, [r3, #0]
 8103230:	4a55      	ldr	r2, [pc, #340]	; (8103388 <HAL_DMA_Abort_IT+0x27c>)
 8103232:	4293      	cmp	r3, r2
 8103234:	d027      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	681b      	ldr	r3, [r3, #0]
 810323a:	4a54      	ldr	r2, [pc, #336]	; (810338c <HAL_DMA_Abort_IT+0x280>)
 810323c:	4293      	cmp	r3, r2
 810323e:	d022      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	4a52      	ldr	r2, [pc, #328]	; (8103390 <HAL_DMA_Abort_IT+0x284>)
 8103246:	4293      	cmp	r3, r2
 8103248:	d01d      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	681b      	ldr	r3, [r3, #0]
 810324e:	4a51      	ldr	r2, [pc, #324]	; (8103394 <HAL_DMA_Abort_IT+0x288>)
 8103250:	4293      	cmp	r3, r2
 8103252:	d018      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	4a4f      	ldr	r2, [pc, #316]	; (8103398 <HAL_DMA_Abort_IT+0x28c>)
 810325a:	4293      	cmp	r3, r2
 810325c:	d013      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	4a4e      	ldr	r2, [pc, #312]	; (810339c <HAL_DMA_Abort_IT+0x290>)
 8103264:	4293      	cmp	r3, r2
 8103266:	d00e      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	4a4c      	ldr	r2, [pc, #304]	; (81033a0 <HAL_DMA_Abort_IT+0x294>)
 810326e:	4293      	cmp	r3, r2
 8103270:	d009      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	4a4b      	ldr	r2, [pc, #300]	; (81033a4 <HAL_DMA_Abort_IT+0x298>)
 8103278:	4293      	cmp	r3, r2
 810327a:	d004      	beq.n	8103286 <HAL_DMA_Abort_IT+0x17a>
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	4a49      	ldr	r2, [pc, #292]	; (81033a8 <HAL_DMA_Abort_IT+0x29c>)
 8103282:	4293      	cmp	r3, r2
 8103284:	d108      	bne.n	8103298 <HAL_DMA_Abort_IT+0x18c>
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	681a      	ldr	r2, [r3, #0]
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	f022 0201 	bic.w	r2, r2, #1
 8103294:	601a      	str	r2, [r3, #0]
 8103296:	e147      	b.n	8103528 <HAL_DMA_Abort_IT+0x41c>
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	681a      	ldr	r2, [r3, #0]
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	f022 0201 	bic.w	r2, r2, #1
 81032a6:	601a      	str	r2, [r3, #0]
 81032a8:	e13e      	b.n	8103528 <HAL_DMA_Abort_IT+0x41c>
=======
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	4a60      	ldr	r2, [pc, #384]	; (81031d8 <HAL_DMA_Abort_IT+0x260>)
 8103058:	4293      	cmp	r3, r2
 810305a:	d04a      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	4a5e      	ldr	r2, [pc, #376]	; (81031dc <HAL_DMA_Abort_IT+0x264>)
 8103062:	4293      	cmp	r3, r2
 8103064:	d045      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	4a5d      	ldr	r2, [pc, #372]	; (81031e0 <HAL_DMA_Abort_IT+0x268>)
 810306c:	4293      	cmp	r3, r2
 810306e:	d040      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	4a5b      	ldr	r2, [pc, #364]	; (81031e4 <HAL_DMA_Abort_IT+0x26c>)
 8103076:	4293      	cmp	r3, r2
 8103078:	d03b      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	681b      	ldr	r3, [r3, #0]
 810307e:	4a5a      	ldr	r2, [pc, #360]	; (81031e8 <HAL_DMA_Abort_IT+0x270>)
 8103080:	4293      	cmp	r3, r2
 8103082:	d036      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	4a58      	ldr	r2, [pc, #352]	; (81031ec <HAL_DMA_Abort_IT+0x274>)
 810308a:	4293      	cmp	r3, r2
 810308c:	d031      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	4a57      	ldr	r2, [pc, #348]	; (81031f0 <HAL_DMA_Abort_IT+0x278>)
 8103094:	4293      	cmp	r3, r2
 8103096:	d02c      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	4a55      	ldr	r2, [pc, #340]	; (81031f4 <HAL_DMA_Abort_IT+0x27c>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d027      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	4a54      	ldr	r2, [pc, #336]	; (81031f8 <HAL_DMA_Abort_IT+0x280>)
 81030a8:	4293      	cmp	r3, r2
 81030aa:	d022      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	4a52      	ldr	r2, [pc, #328]	; (81031fc <HAL_DMA_Abort_IT+0x284>)
 81030b2:	4293      	cmp	r3, r2
 81030b4:	d01d      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	681b      	ldr	r3, [r3, #0]
 81030ba:	4a51      	ldr	r2, [pc, #324]	; (8103200 <HAL_DMA_Abort_IT+0x288>)
 81030bc:	4293      	cmp	r3, r2
 81030be:	d018      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	4a4f      	ldr	r2, [pc, #316]	; (8103204 <HAL_DMA_Abort_IT+0x28c>)
 81030c6:	4293      	cmp	r3, r2
 81030c8:	d013      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	4a4e      	ldr	r2, [pc, #312]	; (8103208 <HAL_DMA_Abort_IT+0x290>)
 81030d0:	4293      	cmp	r3, r2
 81030d2:	d00e      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	4a4c      	ldr	r2, [pc, #304]	; (810320c <HAL_DMA_Abort_IT+0x294>)
 81030da:	4293      	cmp	r3, r2
 81030dc:	d009      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	681b      	ldr	r3, [r3, #0]
 81030e2:	4a4b      	ldr	r2, [pc, #300]	; (8103210 <HAL_DMA_Abort_IT+0x298>)
 81030e4:	4293      	cmp	r3, r2
 81030e6:	d004      	beq.n	81030f2 <HAL_DMA_Abort_IT+0x17a>
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	4a49      	ldr	r2, [pc, #292]	; (8103214 <HAL_DMA_Abort_IT+0x29c>)
 81030ee:	4293      	cmp	r3, r2
 81030f0:	d108      	bne.n	8103104 <HAL_DMA_Abort_IT+0x18c>
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	681a      	ldr	r2, [r3, #0]
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	f022 0201 	bic.w	r2, r2, #1
 8103100:	601a      	str	r2, [r3, #0]
 8103102:	e147      	b.n	8103394 <HAL_DMA_Abort_IT+0x41c>
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	681a      	ldr	r2, [r3, #0]
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	f022 0201 	bic.w	r2, r2, #1
 8103112:	601a      	str	r2, [r3, #0]
 8103114:	e13e      	b.n	8103394 <HAL_DMA_Abort_IT+0x41c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
<<<<<<< HEAD
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	681a      	ldr	r2, [r3, #0]
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	f022 020e 	bic.w	r2, r2, #14
 81032b8:	601a      	str	r2, [r3, #0]
=======
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	681a      	ldr	r2, [r3, #0]
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	f022 020e 	bic.w	r2, r2, #14
 8103124:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	681b      	ldr	r3, [r3, #0]
 81032be:	4a2b      	ldr	r2, [pc, #172]	; (810336c <HAL_DMA_Abort_IT+0x260>)
 81032c0:	4293      	cmp	r3, r2
 81032c2:	d04a      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	681b      	ldr	r3, [r3, #0]
 81032c8:	4a29      	ldr	r2, [pc, #164]	; (8103370 <HAL_DMA_Abort_IT+0x264>)
 81032ca:	4293      	cmp	r3, r2
 81032cc:	d045      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	4a28      	ldr	r2, [pc, #160]	; (8103374 <HAL_DMA_Abort_IT+0x268>)
 81032d4:	4293      	cmp	r3, r2
 81032d6:	d040      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	681b      	ldr	r3, [r3, #0]
 81032dc:	4a26      	ldr	r2, [pc, #152]	; (8103378 <HAL_DMA_Abort_IT+0x26c>)
 81032de:	4293      	cmp	r3, r2
 81032e0:	d03b      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	681b      	ldr	r3, [r3, #0]
 81032e6:	4a25      	ldr	r2, [pc, #148]	; (810337c <HAL_DMA_Abort_IT+0x270>)
 81032e8:	4293      	cmp	r3, r2
 81032ea:	d036      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	681b      	ldr	r3, [r3, #0]
 81032f0:	4a23      	ldr	r2, [pc, #140]	; (8103380 <HAL_DMA_Abort_IT+0x274>)
 81032f2:	4293      	cmp	r3, r2
 81032f4:	d031      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 81032f6:	687b      	ldr	r3, [r7, #4]
 81032f8:	681b      	ldr	r3, [r3, #0]
 81032fa:	4a22      	ldr	r2, [pc, #136]	; (8103384 <HAL_DMA_Abort_IT+0x278>)
 81032fc:	4293      	cmp	r3, r2
 81032fe:	d02c      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	681b      	ldr	r3, [r3, #0]
 8103304:	4a20      	ldr	r2, [pc, #128]	; (8103388 <HAL_DMA_Abort_IT+0x27c>)
 8103306:	4293      	cmp	r3, r2
 8103308:	d027      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	681b      	ldr	r3, [r3, #0]
 810330e:	4a1f      	ldr	r2, [pc, #124]	; (810338c <HAL_DMA_Abort_IT+0x280>)
 8103310:	4293      	cmp	r3, r2
 8103312:	d022      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 8103314:	687b      	ldr	r3, [r7, #4]
 8103316:	681b      	ldr	r3, [r3, #0]
 8103318:	4a1d      	ldr	r2, [pc, #116]	; (8103390 <HAL_DMA_Abort_IT+0x284>)
 810331a:	4293      	cmp	r3, r2
 810331c:	d01d      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	681b      	ldr	r3, [r3, #0]
 8103322:	4a1c      	ldr	r2, [pc, #112]	; (8103394 <HAL_DMA_Abort_IT+0x288>)
 8103324:	4293      	cmp	r3, r2
 8103326:	d018      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	4a1a      	ldr	r2, [pc, #104]	; (8103398 <HAL_DMA_Abort_IT+0x28c>)
 810332e:	4293      	cmp	r3, r2
 8103330:	d013      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	4a19      	ldr	r2, [pc, #100]	; (810339c <HAL_DMA_Abort_IT+0x290>)
 8103338:	4293      	cmp	r3, r2
 810333a:	d00e      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	681b      	ldr	r3, [r3, #0]
 8103340:	4a17      	ldr	r2, [pc, #92]	; (81033a0 <HAL_DMA_Abort_IT+0x294>)
 8103342:	4293      	cmp	r3, r2
 8103344:	d009      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	681b      	ldr	r3, [r3, #0]
 810334a:	4a16      	ldr	r2, [pc, #88]	; (81033a4 <HAL_DMA_Abort_IT+0x298>)
 810334c:	4293      	cmp	r3, r2
 810334e:	d004      	beq.n	810335a <HAL_DMA_Abort_IT+0x24e>
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	4a14      	ldr	r2, [pc, #80]	; (81033a8 <HAL_DMA_Abort_IT+0x29c>)
 8103356:	4293      	cmp	r3, r2
 8103358:	d128      	bne.n	81033ac <HAL_DMA_Abort_IT+0x2a0>
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	681b      	ldr	r3, [r3, #0]
 810335e:	681a      	ldr	r2, [r3, #0]
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	f022 0201 	bic.w	r2, r2, #1
 8103368:	601a      	str	r2, [r3, #0]
 810336a:	e027      	b.n	81033bc <HAL_DMA_Abort_IT+0x2b0>
 810336c:	40020010 	.word	0x40020010
 8103370:	40020028 	.word	0x40020028
 8103374:	40020040 	.word	0x40020040
 8103378:	40020058 	.word	0x40020058
 810337c:	40020070 	.word	0x40020070
 8103380:	40020088 	.word	0x40020088
 8103384:	400200a0 	.word	0x400200a0
 8103388:	400200b8 	.word	0x400200b8
 810338c:	40020410 	.word	0x40020410
 8103390:	40020428 	.word	0x40020428
 8103394:	40020440 	.word	0x40020440
 8103398:	40020458 	.word	0x40020458
 810339c:	40020470 	.word	0x40020470
 81033a0:	40020488 	.word	0x40020488
 81033a4:	400204a0 	.word	0x400204a0
 81033a8:	400204b8 	.word	0x400204b8
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	681a      	ldr	r2, [r3, #0]
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	f022 0201 	bic.w	r2, r2, #1
 81033ba:	601a      	str	r2, [r3, #0]
=======
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	4a2b      	ldr	r2, [pc, #172]	; (81031d8 <HAL_DMA_Abort_IT+0x260>)
 810312c:	4293      	cmp	r3, r2
 810312e:	d04a      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	4a29      	ldr	r2, [pc, #164]	; (81031dc <HAL_DMA_Abort_IT+0x264>)
 8103136:	4293      	cmp	r3, r2
 8103138:	d045      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	4a28      	ldr	r2, [pc, #160]	; (81031e0 <HAL_DMA_Abort_IT+0x268>)
 8103140:	4293      	cmp	r3, r2
 8103142:	d040      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	4a26      	ldr	r2, [pc, #152]	; (81031e4 <HAL_DMA_Abort_IT+0x26c>)
 810314a:	4293      	cmp	r3, r2
 810314c:	d03b      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	4a25      	ldr	r2, [pc, #148]	; (81031e8 <HAL_DMA_Abort_IT+0x270>)
 8103154:	4293      	cmp	r3, r2
 8103156:	d036      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	681b      	ldr	r3, [r3, #0]
 810315c:	4a23      	ldr	r2, [pc, #140]	; (81031ec <HAL_DMA_Abort_IT+0x274>)
 810315e:	4293      	cmp	r3, r2
 8103160:	d031      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	4a22      	ldr	r2, [pc, #136]	; (81031f0 <HAL_DMA_Abort_IT+0x278>)
 8103168:	4293      	cmp	r3, r2
 810316a:	d02c      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	4a20      	ldr	r2, [pc, #128]	; (81031f4 <HAL_DMA_Abort_IT+0x27c>)
 8103172:	4293      	cmp	r3, r2
 8103174:	d027      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	681b      	ldr	r3, [r3, #0]
 810317a:	4a1f      	ldr	r2, [pc, #124]	; (81031f8 <HAL_DMA_Abort_IT+0x280>)
 810317c:	4293      	cmp	r3, r2
 810317e:	d022      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	4a1d      	ldr	r2, [pc, #116]	; (81031fc <HAL_DMA_Abort_IT+0x284>)
 8103186:	4293      	cmp	r3, r2
 8103188:	d01d      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	4a1c      	ldr	r2, [pc, #112]	; (8103200 <HAL_DMA_Abort_IT+0x288>)
 8103190:	4293      	cmp	r3, r2
 8103192:	d018      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	681b      	ldr	r3, [r3, #0]
 8103198:	4a1a      	ldr	r2, [pc, #104]	; (8103204 <HAL_DMA_Abort_IT+0x28c>)
 810319a:	4293      	cmp	r3, r2
 810319c:	d013      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	681b      	ldr	r3, [r3, #0]
 81031a2:	4a19      	ldr	r2, [pc, #100]	; (8103208 <HAL_DMA_Abort_IT+0x290>)
 81031a4:	4293      	cmp	r3, r2
 81031a6:	d00e      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	4a17      	ldr	r2, [pc, #92]	; (810320c <HAL_DMA_Abort_IT+0x294>)
 81031ae:	4293      	cmp	r3, r2
 81031b0:	d009      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	681b      	ldr	r3, [r3, #0]
 81031b6:	4a16      	ldr	r2, [pc, #88]	; (8103210 <HAL_DMA_Abort_IT+0x298>)
 81031b8:	4293      	cmp	r3, r2
 81031ba:	d004      	beq.n	81031c6 <HAL_DMA_Abort_IT+0x24e>
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	681b      	ldr	r3, [r3, #0]
 81031c0:	4a14      	ldr	r2, [pc, #80]	; (8103214 <HAL_DMA_Abort_IT+0x29c>)
 81031c2:	4293      	cmp	r3, r2
 81031c4:	d128      	bne.n	8103218 <HAL_DMA_Abort_IT+0x2a0>
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	681b      	ldr	r3, [r3, #0]
 81031ca:	681a      	ldr	r2, [r3, #0]
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	681b      	ldr	r3, [r3, #0]
 81031d0:	f022 0201 	bic.w	r2, r2, #1
 81031d4:	601a      	str	r2, [r3, #0]
 81031d6:	e027      	b.n	8103228 <HAL_DMA_Abort_IT+0x2b0>
 81031d8:	40020010 	.word	0x40020010
 81031dc:	40020028 	.word	0x40020028
 81031e0:	40020040 	.word	0x40020040
 81031e4:	40020058 	.word	0x40020058
 81031e8:	40020070 	.word	0x40020070
 81031ec:	40020088 	.word	0x40020088
 81031f0:	400200a0 	.word	0x400200a0
 81031f4:	400200b8 	.word	0x400200b8
 81031f8:	40020410 	.word	0x40020410
 81031fc:	40020428 	.word	0x40020428
 8103200:	40020440 	.word	0x40020440
 8103204:	40020458 	.word	0x40020458
 8103208:	40020470 	.word	0x40020470
 810320c:	40020488 	.word	0x40020488
 8103210:	400204a0 	.word	0x400204a0
 8103214:	400204b8 	.word	0x400204b8
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	681b      	ldr	r3, [r3, #0]
 810321c:	681a      	ldr	r2, [r3, #0]
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	f022 0201 	bic.w	r2, r2, #1
 8103226:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
<<<<<<< HEAD
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	4a5c      	ldr	r2, [pc, #368]	; (8103534 <HAL_DMA_Abort_IT+0x428>)
 81033c2:	4293      	cmp	r3, r2
 81033c4:	d072      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	4a5b      	ldr	r2, [pc, #364]	; (8103538 <HAL_DMA_Abort_IT+0x42c>)
 81033cc:	4293      	cmp	r3, r2
 81033ce:	d06d      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	4a59      	ldr	r2, [pc, #356]	; (810353c <HAL_DMA_Abort_IT+0x430>)
 81033d6:	4293      	cmp	r3, r2
 81033d8:	d068      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	681b      	ldr	r3, [r3, #0]
 81033de:	4a58      	ldr	r2, [pc, #352]	; (8103540 <HAL_DMA_Abort_IT+0x434>)
 81033e0:	4293      	cmp	r3, r2
 81033e2:	d063      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 81033e4:	687b      	ldr	r3, [r7, #4]
 81033e6:	681b      	ldr	r3, [r3, #0]
 81033e8:	4a56      	ldr	r2, [pc, #344]	; (8103544 <HAL_DMA_Abort_IT+0x438>)
 81033ea:	4293      	cmp	r3, r2
 81033ec:	d05e      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	681b      	ldr	r3, [r3, #0]
 81033f2:	4a55      	ldr	r2, [pc, #340]	; (8103548 <HAL_DMA_Abort_IT+0x43c>)
 81033f4:	4293      	cmp	r3, r2
 81033f6:	d059      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	4a53      	ldr	r2, [pc, #332]	; (810354c <HAL_DMA_Abort_IT+0x440>)
 81033fe:	4293      	cmp	r3, r2
 8103400:	d054      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	4a52      	ldr	r2, [pc, #328]	; (8103550 <HAL_DMA_Abort_IT+0x444>)
 8103408:	4293      	cmp	r3, r2
 810340a:	d04f      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4a50      	ldr	r2, [pc, #320]	; (8103554 <HAL_DMA_Abort_IT+0x448>)
 8103412:	4293      	cmp	r3, r2
 8103414:	d04a      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	4a4f      	ldr	r2, [pc, #316]	; (8103558 <HAL_DMA_Abort_IT+0x44c>)
 810341c:	4293      	cmp	r3, r2
 810341e:	d045      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	4a4d      	ldr	r2, [pc, #308]	; (810355c <HAL_DMA_Abort_IT+0x450>)
 8103426:	4293      	cmp	r3, r2
 8103428:	d040      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	4a4c      	ldr	r2, [pc, #304]	; (8103560 <HAL_DMA_Abort_IT+0x454>)
 8103430:	4293      	cmp	r3, r2
 8103432:	d03b      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	4a4a      	ldr	r2, [pc, #296]	; (8103564 <HAL_DMA_Abort_IT+0x458>)
 810343a:	4293      	cmp	r3, r2
 810343c:	d036      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	4a49      	ldr	r2, [pc, #292]	; (8103568 <HAL_DMA_Abort_IT+0x45c>)
 8103444:	4293      	cmp	r3, r2
 8103446:	d031      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	4a47      	ldr	r2, [pc, #284]	; (810356c <HAL_DMA_Abort_IT+0x460>)
 810344e:	4293      	cmp	r3, r2
 8103450:	d02c      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	4a46      	ldr	r2, [pc, #280]	; (8103570 <HAL_DMA_Abort_IT+0x464>)
 8103458:	4293      	cmp	r3, r2
 810345a:	d027      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	4a44      	ldr	r2, [pc, #272]	; (8103574 <HAL_DMA_Abort_IT+0x468>)
 8103462:	4293      	cmp	r3, r2
 8103464:	d022      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	4a43      	ldr	r2, [pc, #268]	; (8103578 <HAL_DMA_Abort_IT+0x46c>)
 810346c:	4293      	cmp	r3, r2
 810346e:	d01d      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	4a41      	ldr	r2, [pc, #260]	; (810357c <HAL_DMA_Abort_IT+0x470>)
 8103476:	4293      	cmp	r3, r2
 8103478:	d018      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	681b      	ldr	r3, [r3, #0]
 810347e:	4a40      	ldr	r2, [pc, #256]	; (8103580 <HAL_DMA_Abort_IT+0x474>)
 8103480:	4293      	cmp	r3, r2
 8103482:	d013      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	4a3e      	ldr	r2, [pc, #248]	; (8103584 <HAL_DMA_Abort_IT+0x478>)
 810348a:	4293      	cmp	r3, r2
 810348c:	d00e      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	4a3d      	ldr	r2, [pc, #244]	; (8103588 <HAL_DMA_Abort_IT+0x47c>)
 8103494:	4293      	cmp	r3, r2
 8103496:	d009      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	681b      	ldr	r3, [r3, #0]
 810349c:	4a3b      	ldr	r2, [pc, #236]	; (810358c <HAL_DMA_Abort_IT+0x480>)
 810349e:	4293      	cmp	r3, r2
 81034a0:	d004      	beq.n	81034ac <HAL_DMA_Abort_IT+0x3a0>
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	4a3a      	ldr	r2, [pc, #232]	; (8103590 <HAL_DMA_Abort_IT+0x484>)
 81034a8:	4293      	cmp	r3, r2
 81034aa:	d101      	bne.n	81034b0 <HAL_DMA_Abort_IT+0x3a4>
 81034ac:	2301      	movs	r3, #1
 81034ae:	e000      	b.n	81034b2 <HAL_DMA_Abort_IT+0x3a6>
 81034b0:	2300      	movs	r3, #0
 81034b2:	2b00      	cmp	r3, #0
 81034b4:	d028      	beq.n	8103508 <HAL_DMA_Abort_IT+0x3fc>
=======
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	4a5c      	ldr	r2, [pc, #368]	; (81033a0 <HAL_DMA_Abort_IT+0x428>)
 810322e:	4293      	cmp	r3, r2
 8103230:	d072      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	4a5b      	ldr	r2, [pc, #364]	; (81033a4 <HAL_DMA_Abort_IT+0x42c>)
 8103238:	4293      	cmp	r3, r2
 810323a:	d06d      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	4a59      	ldr	r2, [pc, #356]	; (81033a8 <HAL_DMA_Abort_IT+0x430>)
 8103242:	4293      	cmp	r3, r2
 8103244:	d068      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	4a58      	ldr	r2, [pc, #352]	; (81033ac <HAL_DMA_Abort_IT+0x434>)
 810324c:	4293      	cmp	r3, r2
 810324e:	d063      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	4a56      	ldr	r2, [pc, #344]	; (81033b0 <HAL_DMA_Abort_IT+0x438>)
 8103256:	4293      	cmp	r3, r2
 8103258:	d05e      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	4a55      	ldr	r2, [pc, #340]	; (81033b4 <HAL_DMA_Abort_IT+0x43c>)
 8103260:	4293      	cmp	r3, r2
 8103262:	d059      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	4a53      	ldr	r2, [pc, #332]	; (81033b8 <HAL_DMA_Abort_IT+0x440>)
 810326a:	4293      	cmp	r3, r2
 810326c:	d054      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810326e:	687b      	ldr	r3, [r7, #4]
 8103270:	681b      	ldr	r3, [r3, #0]
 8103272:	4a52      	ldr	r2, [pc, #328]	; (81033bc <HAL_DMA_Abort_IT+0x444>)
 8103274:	4293      	cmp	r3, r2
 8103276:	d04f      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	681b      	ldr	r3, [r3, #0]
 810327c:	4a50      	ldr	r2, [pc, #320]	; (81033c0 <HAL_DMA_Abort_IT+0x448>)
 810327e:	4293      	cmp	r3, r2
 8103280:	d04a      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	4a4f      	ldr	r2, [pc, #316]	; (81033c4 <HAL_DMA_Abort_IT+0x44c>)
 8103288:	4293      	cmp	r3, r2
 810328a:	d045      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	4a4d      	ldr	r2, [pc, #308]	; (81033c8 <HAL_DMA_Abort_IT+0x450>)
 8103292:	4293      	cmp	r3, r2
 8103294:	d040      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	4a4c      	ldr	r2, [pc, #304]	; (81033cc <HAL_DMA_Abort_IT+0x454>)
 810329c:	4293      	cmp	r3, r2
 810329e:	d03b      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	681b      	ldr	r3, [r3, #0]
 81032a4:	4a4a      	ldr	r2, [pc, #296]	; (81033d0 <HAL_DMA_Abort_IT+0x458>)
 81032a6:	4293      	cmp	r3, r2
 81032a8:	d036      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	4a49      	ldr	r2, [pc, #292]	; (81033d4 <HAL_DMA_Abort_IT+0x45c>)
 81032b0:	4293      	cmp	r3, r2
 81032b2:	d031      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	4a47      	ldr	r2, [pc, #284]	; (81033d8 <HAL_DMA_Abort_IT+0x460>)
 81032ba:	4293      	cmp	r3, r2
 81032bc:	d02c      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	4a46      	ldr	r2, [pc, #280]	; (81033dc <HAL_DMA_Abort_IT+0x464>)
 81032c4:	4293      	cmp	r3, r2
 81032c6:	d027      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	681b      	ldr	r3, [r3, #0]
 81032cc:	4a44      	ldr	r2, [pc, #272]	; (81033e0 <HAL_DMA_Abort_IT+0x468>)
 81032ce:	4293      	cmp	r3, r2
 81032d0:	d022      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	4a43      	ldr	r2, [pc, #268]	; (81033e4 <HAL_DMA_Abort_IT+0x46c>)
 81032d8:	4293      	cmp	r3, r2
 81032da:	d01d      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	4a41      	ldr	r2, [pc, #260]	; (81033e8 <HAL_DMA_Abort_IT+0x470>)
 81032e2:	4293      	cmp	r3, r2
 81032e4:	d018      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	4a40      	ldr	r2, [pc, #256]	; (81033ec <HAL_DMA_Abort_IT+0x474>)
 81032ec:	4293      	cmp	r3, r2
 81032ee:	d013      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	681b      	ldr	r3, [r3, #0]
 81032f4:	4a3e      	ldr	r2, [pc, #248]	; (81033f0 <HAL_DMA_Abort_IT+0x478>)
 81032f6:	4293      	cmp	r3, r2
 81032f8:	d00e      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	4a3d      	ldr	r2, [pc, #244]	; (81033f4 <HAL_DMA_Abort_IT+0x47c>)
 8103300:	4293      	cmp	r3, r2
 8103302:	d009      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	4a3b      	ldr	r2, [pc, #236]	; (81033f8 <HAL_DMA_Abort_IT+0x480>)
 810330a:	4293      	cmp	r3, r2
 810330c:	d004      	beq.n	8103318 <HAL_DMA_Abort_IT+0x3a0>
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	4a3a      	ldr	r2, [pc, #232]	; (81033fc <HAL_DMA_Abort_IT+0x484>)
 8103314:	4293      	cmp	r3, r2
 8103316:	d101      	bne.n	810331c <HAL_DMA_Abort_IT+0x3a4>
 8103318:	2301      	movs	r3, #1
 810331a:	e000      	b.n	810331e <HAL_DMA_Abort_IT+0x3a6>
 810331c:	2300      	movs	r3, #0
 810331e:	2b00      	cmp	r3, #0
 8103320:	d028      	beq.n	8103374 <HAL_DMA_Abort_IT+0x3fc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
<<<<<<< HEAD
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81034ba:	681a      	ldr	r2, [r3, #0]
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81034c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81034c4:	601a      	str	r2, [r3, #0]
=======
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103326:	681a      	ldr	r2, [r3, #0]
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810332c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103330:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
<<<<<<< HEAD
 81034c6:	687b      	ldr	r3, [r7, #4]
 81034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034ca:	60fb      	str	r3, [r7, #12]
=======
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103336:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
<<<<<<< HEAD
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034d0:	f003 031f 	and.w	r3, r3, #31
 81034d4:	2201      	movs	r2, #1
 81034d6:	409a      	lsls	r2, r3
 81034d8:	68fb      	ldr	r3, [r7, #12]
 81034da:	605a      	str	r2, [r3, #4]
=======
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810333c:	f003 031f 	and.w	r3, r3, #31
 8103340:	2201      	movs	r2, #1
 8103342:	409a      	lsls	r2, r3
 8103344:	68fb      	ldr	r3, [r7, #12]
 8103346:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
<<<<<<< HEAD
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81034e0:	687a      	ldr	r2, [r7, #4]
 81034e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81034e4:	605a      	str	r2, [r3, #4]
=======
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810334c:	687a      	ldr	r2, [r7, #4]
 810334e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103350:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        if(hdma->DMAmuxRequestGen != 0U)
<<<<<<< HEAD
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034ea:	2b00      	cmp	r3, #0
 81034ec:	d00c      	beq.n	8103508 <HAL_DMA_Abort_IT+0x3fc>
=======
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103356:	2b00      	cmp	r3, #0
 8103358:	d00c      	beq.n	8103374 <HAL_DMA_Abort_IT+0x3fc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034f2:	681a      	ldr	r2, [r3, #0]
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81034fc:	601a      	str	r2, [r3, #0]
=======
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810335e:	681a      	ldr	r2, [r3, #0]
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103368:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
<<<<<<< HEAD
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103502:	687a      	ldr	r2, [r7, #4]
 8103504:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103506:	605a      	str	r2, [r3, #4]
=======
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810336e:	687a      	ldr	r2, [r7, #4]
 8103370:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103372:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	2200      	movs	r2, #0
 810350c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	2200      	movs	r2, #0
 8103378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	2201      	movs	r2, #1
 8103514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	2201      	movs	r2, #1
 8103380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
<<<<<<< HEAD
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810351c:	2b00      	cmp	r3, #0
 810351e:	d003      	beq.n	8103528 <HAL_DMA_Abort_IT+0x41c>
=======
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103388:	2b00      	cmp	r3, #0
 810338a:	d003      	beq.n	8103394 <HAL_DMA_Abort_IT+0x41c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        hdma->XferAbortCallback(hdma);
<<<<<<< HEAD
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103524:	6878      	ldr	r0, [r7, #4]
 8103526:	4798      	blx	r3
=======
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103390:	6878      	ldr	r0, [r7, #4]
 8103392:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8103528:	2300      	movs	r3, #0
=======
 8103394:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810352a:	4618      	mov	r0, r3
 810352c:	3710      	adds	r7, #16
 810352e:	46bd      	mov	sp, r7
 8103530:	bd80      	pop	{r7, pc}
 8103532:	bf00      	nop
 8103534:	40020010 	.word	0x40020010
 8103538:	40020028 	.word	0x40020028
 810353c:	40020040 	.word	0x40020040
 8103540:	40020058 	.word	0x40020058
 8103544:	40020070 	.word	0x40020070
 8103548:	40020088 	.word	0x40020088
 810354c:	400200a0 	.word	0x400200a0
 8103550:	400200b8 	.word	0x400200b8
 8103554:	40020410 	.word	0x40020410
 8103558:	40020428 	.word	0x40020428
 810355c:	40020440 	.word	0x40020440
 8103560:	40020458 	.word	0x40020458
 8103564:	40020470 	.word	0x40020470
 8103568:	40020488 	.word	0x40020488
 810356c:	400204a0 	.word	0x400204a0
 8103570:	400204b8 	.word	0x400204b8
 8103574:	58025408 	.word	0x58025408
 8103578:	5802541c 	.word	0x5802541c
 810357c:	58025430 	.word	0x58025430
 8103580:	58025444 	.word	0x58025444
 8103584:	58025458 	.word	0x58025458
 8103588:	5802546c 	.word	0x5802546c
 810358c:	58025480 	.word	0x58025480
 8103590:	58025494 	.word	0x58025494
=======
 8103396:	4618      	mov	r0, r3
 8103398:	3710      	adds	r7, #16
 810339a:	46bd      	mov	sp, r7
 810339c:	bd80      	pop	{r7, pc}
 810339e:	bf00      	nop
 81033a0:	40020010 	.word	0x40020010
 81033a4:	40020028 	.word	0x40020028
 81033a8:	40020040 	.word	0x40020040
 81033ac:	40020058 	.word	0x40020058
 81033b0:	40020070 	.word	0x40020070
 81033b4:	40020088 	.word	0x40020088
 81033b8:	400200a0 	.word	0x400200a0
 81033bc:	400200b8 	.word	0x400200b8
 81033c0:	40020410 	.word	0x40020410
 81033c4:	40020428 	.word	0x40020428
 81033c8:	40020440 	.word	0x40020440
 81033cc:	40020458 	.word	0x40020458
 81033d0:	40020470 	.word	0x40020470
 81033d4:	40020488 	.word	0x40020488
 81033d8:	400204a0 	.word	0x400204a0
 81033dc:	400204b8 	.word	0x400204b8
 81033e0:	58025408 	.word	0x58025408
 81033e4:	5802541c 	.word	0x5802541c
 81033e8:	58025430 	.word	0x58025430
 81033ec:	58025444 	.word	0x58025444
 81033f0:	58025458 	.word	0x58025458
 81033f4:	5802546c 	.word	0x5802546c
 81033f8:	58025480 	.word	0x58025480
 81033fc:	58025494 	.word	0x58025494
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08103594 <HAL_DMA_IRQHandler>:
=======
08103400 <HAL_DMA_IRQHandler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8103594:	b580      	push	{r7, lr}
 8103596:	b08a      	sub	sp, #40	; 0x28
 8103598:	af00      	add	r7, sp, #0
 810359a:	6078      	str	r0, [r7, #4]
=======
 8103400:	b580      	push	{r7, lr}
 8103402:	b08a      	sub	sp, #40	; 0x28
 8103404:	af00      	add	r7, sp, #0
 8103406:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
<<<<<<< HEAD
 810359c:	2300      	movs	r3, #0
 810359e:	60fb      	str	r3, [r7, #12]
=======
 8103408:	2300      	movs	r3, #0
 810340a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t timeout = SystemCoreClock / 9600U;
<<<<<<< HEAD
 81035a0:	4b67      	ldr	r3, [pc, #412]	; (8103740 <HAL_DMA_IRQHandler+0x1ac>)
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	4a67      	ldr	r2, [pc, #412]	; (8103744 <HAL_DMA_IRQHandler+0x1b0>)
 81035a6:	fba2 2303 	umull	r2, r3, r2, r3
 81035aa:	0a9b      	lsrs	r3, r3, #10
 81035ac:	627b      	str	r3, [r7, #36]	; 0x24
=======
 810340c:	4b67      	ldr	r3, [pc, #412]	; (81035ac <HAL_DMA_IRQHandler+0x1ac>)
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4a67      	ldr	r2, [pc, #412]	; (81035b0 <HAL_DMA_IRQHandler+0x1b0>)
 8103412:	fba2 2303 	umull	r2, r3, r2, r3
 8103416:	0a9b      	lsrs	r3, r3, #10
 8103418:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
<<<<<<< HEAD
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81035b2:	623b      	str	r3, [r7, #32]
=======
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810341e:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
<<<<<<< HEAD
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81035b8:	61fb      	str	r3, [r7, #28]
=======
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103424:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  tmpisr_dma  = regs_dma->ISR;
<<<<<<< HEAD
 81035ba:	6a3b      	ldr	r3, [r7, #32]
 81035bc:	681b      	ldr	r3, [r3, #0]
 81035be:	61bb      	str	r3, [r7, #24]
=======
 8103426:	6a3b      	ldr	r3, [r7, #32]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  tmpisr_bdma = regs_bdma->ISR;
<<<<<<< HEAD
 81035c0:	69fb      	ldr	r3, [r7, #28]
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	617b      	str	r3, [r7, #20]
=======
 810342c:	69fb      	ldr	r3, [r7, #28]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
<<<<<<< HEAD
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	681b      	ldr	r3, [r3, #0]
 81035ca:	4a5f      	ldr	r2, [pc, #380]	; (8103748 <HAL_DMA_IRQHandler+0x1b4>)
 81035cc:	4293      	cmp	r3, r2
 81035ce:	d04a      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	4a5d      	ldr	r2, [pc, #372]	; (810374c <HAL_DMA_IRQHandler+0x1b8>)
 81035d6:	4293      	cmp	r3, r2
 81035d8:	d045      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	4a5c      	ldr	r2, [pc, #368]	; (8103750 <HAL_DMA_IRQHandler+0x1bc>)
 81035e0:	4293      	cmp	r3, r2
 81035e2:	d040      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	4a5a      	ldr	r2, [pc, #360]	; (8103754 <HAL_DMA_IRQHandler+0x1c0>)
 81035ea:	4293      	cmp	r3, r2
 81035ec:	d03b      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	681b      	ldr	r3, [r3, #0]
 81035f2:	4a59      	ldr	r2, [pc, #356]	; (8103758 <HAL_DMA_IRQHandler+0x1c4>)
 81035f4:	4293      	cmp	r3, r2
 81035f6:	d036      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	4a57      	ldr	r2, [pc, #348]	; (810375c <HAL_DMA_IRQHandler+0x1c8>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d031      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	681b      	ldr	r3, [r3, #0]
 8103606:	4a56      	ldr	r2, [pc, #344]	; (8103760 <HAL_DMA_IRQHandler+0x1cc>)
 8103608:	4293      	cmp	r3, r2
 810360a:	d02c      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	4a54      	ldr	r2, [pc, #336]	; (8103764 <HAL_DMA_IRQHandler+0x1d0>)
 8103612:	4293      	cmp	r3, r2
 8103614:	d027      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	4a53      	ldr	r2, [pc, #332]	; (8103768 <HAL_DMA_IRQHandler+0x1d4>)
 810361c:	4293      	cmp	r3, r2
 810361e:	d022      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	4a51      	ldr	r2, [pc, #324]	; (810376c <HAL_DMA_IRQHandler+0x1d8>)
 8103626:	4293      	cmp	r3, r2
 8103628:	d01d      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	4a50      	ldr	r2, [pc, #320]	; (8103770 <HAL_DMA_IRQHandler+0x1dc>)
 8103630:	4293      	cmp	r3, r2
 8103632:	d018      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a4e      	ldr	r2, [pc, #312]	; (8103774 <HAL_DMA_IRQHandler+0x1e0>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d013      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4a4d      	ldr	r2, [pc, #308]	; (8103778 <HAL_DMA_IRQHandler+0x1e4>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d00e      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	4a4b      	ldr	r2, [pc, #300]	; (810377c <HAL_DMA_IRQHandler+0x1e8>)
 810364e:	4293      	cmp	r3, r2
 8103650:	d009      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4a4a      	ldr	r2, [pc, #296]	; (8103780 <HAL_DMA_IRQHandler+0x1ec>)
 8103658:	4293      	cmp	r3, r2
 810365a:	d004      	beq.n	8103666 <HAL_DMA_IRQHandler+0xd2>
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a48      	ldr	r2, [pc, #288]	; (8103784 <HAL_DMA_IRQHandler+0x1f0>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d101      	bne.n	810366a <HAL_DMA_IRQHandler+0xd6>
 8103666:	2301      	movs	r3, #1
 8103668:	e000      	b.n	810366c <HAL_DMA_IRQHandler+0xd8>
 810366a:	2300      	movs	r3, #0
 810366c:	2b00      	cmp	r3, #0
 810366e:	f000 842b 	beq.w	8103ec8 <HAL_DMA_IRQHandler+0x934>
=======
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	4a5f      	ldr	r2, [pc, #380]	; (81035b4 <HAL_DMA_IRQHandler+0x1b4>)
 8103438:	4293      	cmp	r3, r2
 810343a:	d04a      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	4a5d      	ldr	r2, [pc, #372]	; (81035b8 <HAL_DMA_IRQHandler+0x1b8>)
 8103442:	4293      	cmp	r3, r2
 8103444:	d045      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	4a5c      	ldr	r2, [pc, #368]	; (81035bc <HAL_DMA_IRQHandler+0x1bc>)
 810344c:	4293      	cmp	r3, r2
 810344e:	d040      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	4a5a      	ldr	r2, [pc, #360]	; (81035c0 <HAL_DMA_IRQHandler+0x1c0>)
 8103456:	4293      	cmp	r3, r2
 8103458:	d03b      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	4a59      	ldr	r2, [pc, #356]	; (81035c4 <HAL_DMA_IRQHandler+0x1c4>)
 8103460:	4293      	cmp	r3, r2
 8103462:	d036      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	4a57      	ldr	r2, [pc, #348]	; (81035c8 <HAL_DMA_IRQHandler+0x1c8>)
 810346a:	4293      	cmp	r3, r2
 810346c:	d031      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	4a56      	ldr	r2, [pc, #344]	; (81035cc <HAL_DMA_IRQHandler+0x1cc>)
 8103474:	4293      	cmp	r3, r2
 8103476:	d02c      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	4a54      	ldr	r2, [pc, #336]	; (81035d0 <HAL_DMA_IRQHandler+0x1d0>)
 810347e:	4293      	cmp	r3, r2
 8103480:	d027      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	4a53      	ldr	r2, [pc, #332]	; (81035d4 <HAL_DMA_IRQHandler+0x1d4>)
 8103488:	4293      	cmp	r3, r2
 810348a:	d022      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	681b      	ldr	r3, [r3, #0]
 8103490:	4a51      	ldr	r2, [pc, #324]	; (81035d8 <HAL_DMA_IRQHandler+0x1d8>)
 8103492:	4293      	cmp	r3, r2
 8103494:	d01d      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	681b      	ldr	r3, [r3, #0]
 810349a:	4a50      	ldr	r2, [pc, #320]	; (81035dc <HAL_DMA_IRQHandler+0x1dc>)
 810349c:	4293      	cmp	r3, r2
 810349e:	d018      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	4a4e      	ldr	r2, [pc, #312]	; (81035e0 <HAL_DMA_IRQHandler+0x1e0>)
 81034a6:	4293      	cmp	r3, r2
 81034a8:	d013      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	4a4d      	ldr	r2, [pc, #308]	; (81035e4 <HAL_DMA_IRQHandler+0x1e4>)
 81034b0:	4293      	cmp	r3, r2
 81034b2:	d00e      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	4a4b      	ldr	r2, [pc, #300]	; (81035e8 <HAL_DMA_IRQHandler+0x1e8>)
 81034ba:	4293      	cmp	r3, r2
 81034bc:	d009      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	681b      	ldr	r3, [r3, #0]
 81034c2:	4a4a      	ldr	r2, [pc, #296]	; (81035ec <HAL_DMA_IRQHandler+0x1ec>)
 81034c4:	4293      	cmp	r3, r2
 81034c6:	d004      	beq.n	81034d2 <HAL_DMA_IRQHandler+0xd2>
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	4a48      	ldr	r2, [pc, #288]	; (81035f0 <HAL_DMA_IRQHandler+0x1f0>)
 81034ce:	4293      	cmp	r3, r2
 81034d0:	d101      	bne.n	81034d6 <HAL_DMA_IRQHandler+0xd6>
 81034d2:	2301      	movs	r3, #1
 81034d4:	e000      	b.n	81034d8 <HAL_DMA_IRQHandler+0xd8>
 81034d6:	2300      	movs	r3, #0
 81034d8:	2b00      	cmp	r3, #0
 81034da:	f000 842b 	beq.w	8103d34 <HAL_DMA_IRQHandler+0x934>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
<<<<<<< HEAD
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103676:	f003 031f 	and.w	r3, r3, #31
 810367a:	2208      	movs	r2, #8
 810367c:	409a      	lsls	r2, r3
 810367e:	69bb      	ldr	r3, [r7, #24]
 8103680:	4013      	ands	r3, r2
 8103682:	2b00      	cmp	r3, #0
 8103684:	f000 80a2 	beq.w	81037cc <HAL_DMA_IRQHandler+0x238>
=======
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034e2:	f003 031f 	and.w	r3, r3, #31
 81034e6:	2208      	movs	r2, #8
 81034e8:	409a      	lsls	r2, r3
 81034ea:	69bb      	ldr	r3, [r7, #24]
 81034ec:	4013      	ands	r3, r2
 81034ee:	2b00      	cmp	r3, #0
 81034f0:	f000 80a2 	beq.w	8103638 <HAL_DMA_IRQHandler+0x238>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
<<<<<<< HEAD
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	4a2e      	ldr	r2, [pc, #184]	; (8103748 <HAL_DMA_IRQHandler+0x1b4>)
 810368e:	4293      	cmp	r3, r2
 8103690:	d04a      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	681b      	ldr	r3, [r3, #0]
 8103696:	4a2d      	ldr	r2, [pc, #180]	; (810374c <HAL_DMA_IRQHandler+0x1b8>)
 8103698:	4293      	cmp	r3, r2
 810369a:	d045      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	681b      	ldr	r3, [r3, #0]
 81036a0:	4a2b      	ldr	r2, [pc, #172]	; (8103750 <HAL_DMA_IRQHandler+0x1bc>)
 81036a2:	4293      	cmp	r3, r2
 81036a4:	d040      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	4a2a      	ldr	r2, [pc, #168]	; (8103754 <HAL_DMA_IRQHandler+0x1c0>)
 81036ac:	4293      	cmp	r3, r2
 81036ae:	d03b      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	681b      	ldr	r3, [r3, #0]
 81036b4:	4a28      	ldr	r2, [pc, #160]	; (8103758 <HAL_DMA_IRQHandler+0x1c4>)
 81036b6:	4293      	cmp	r3, r2
 81036b8:	d036      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	681b      	ldr	r3, [r3, #0]
 81036be:	4a27      	ldr	r2, [pc, #156]	; (810375c <HAL_DMA_IRQHandler+0x1c8>)
 81036c0:	4293      	cmp	r3, r2
 81036c2:	d031      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036c4:	687b      	ldr	r3, [r7, #4]
 81036c6:	681b      	ldr	r3, [r3, #0]
 81036c8:	4a25      	ldr	r2, [pc, #148]	; (8103760 <HAL_DMA_IRQHandler+0x1cc>)
 81036ca:	4293      	cmp	r3, r2
 81036cc:	d02c      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	681b      	ldr	r3, [r3, #0]
 81036d2:	4a24      	ldr	r2, [pc, #144]	; (8103764 <HAL_DMA_IRQHandler+0x1d0>)
 81036d4:	4293      	cmp	r3, r2
 81036d6:	d027      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	4a22      	ldr	r2, [pc, #136]	; (8103768 <HAL_DMA_IRQHandler+0x1d4>)
 81036de:	4293      	cmp	r3, r2
 81036e0:	d022      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	4a21      	ldr	r2, [pc, #132]	; (810376c <HAL_DMA_IRQHandler+0x1d8>)
 81036e8:	4293      	cmp	r3, r2
 81036ea:	d01d      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	681b      	ldr	r3, [r3, #0]
 81036f0:	4a1f      	ldr	r2, [pc, #124]	; (8103770 <HAL_DMA_IRQHandler+0x1dc>)
 81036f2:	4293      	cmp	r3, r2
 81036f4:	d018      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	4a1e      	ldr	r2, [pc, #120]	; (8103774 <HAL_DMA_IRQHandler+0x1e0>)
 81036fc:	4293      	cmp	r3, r2
 81036fe:	d013      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	4a1c      	ldr	r2, [pc, #112]	; (8103778 <HAL_DMA_IRQHandler+0x1e4>)
 8103706:	4293      	cmp	r3, r2
 8103708:	d00e      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	681b      	ldr	r3, [r3, #0]
 810370e:	4a1b      	ldr	r2, [pc, #108]	; (810377c <HAL_DMA_IRQHandler+0x1e8>)
 8103710:	4293      	cmp	r3, r2
 8103712:	d009      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	681b      	ldr	r3, [r3, #0]
 8103718:	4a19      	ldr	r2, [pc, #100]	; (8103780 <HAL_DMA_IRQHandler+0x1ec>)
 810371a:	4293      	cmp	r3, r2
 810371c:	d004      	beq.n	8103728 <HAL_DMA_IRQHandler+0x194>
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	4a18      	ldr	r2, [pc, #96]	; (8103784 <HAL_DMA_IRQHandler+0x1f0>)
 8103724:	4293      	cmp	r3, r2
 8103726:	d12f      	bne.n	8103788 <HAL_DMA_IRQHandler+0x1f4>
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	681b      	ldr	r3, [r3, #0]
 810372e:	f003 0304 	and.w	r3, r3, #4
 8103732:	2b00      	cmp	r3, #0
 8103734:	bf14      	ite	ne
 8103736:	2301      	movne	r3, #1
 8103738:	2300      	moveq	r3, #0
 810373a:	b2db      	uxtb	r3, r3
 810373c:	e02e      	b.n	810379c <HAL_DMA_IRQHandler+0x208>
 810373e:	bf00      	nop
 8103740:	10000000 	.word	0x10000000
 8103744:	1b4e81b5 	.word	0x1b4e81b5
 8103748:	40020010 	.word	0x40020010
 810374c:	40020028 	.word	0x40020028
 8103750:	40020040 	.word	0x40020040
 8103754:	40020058 	.word	0x40020058
 8103758:	40020070 	.word	0x40020070
 810375c:	40020088 	.word	0x40020088
 8103760:	400200a0 	.word	0x400200a0
 8103764:	400200b8 	.word	0x400200b8
 8103768:	40020410 	.word	0x40020410
 810376c:	40020428 	.word	0x40020428
 8103770:	40020440 	.word	0x40020440
 8103774:	40020458 	.word	0x40020458
 8103778:	40020470 	.word	0x40020470
 810377c:	40020488 	.word	0x40020488
 8103780:	400204a0 	.word	0x400204a0
 8103784:	400204b8 	.word	0x400204b8
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	f003 0308 	and.w	r3, r3, #8
 8103792:	2b00      	cmp	r3, #0
 8103794:	bf14      	ite	ne
 8103796:	2301      	movne	r3, #1
 8103798:	2300      	moveq	r3, #0
 810379a:	b2db      	uxtb	r3, r3
 810379c:	2b00      	cmp	r3, #0
 810379e:	d015      	beq.n	81037cc <HAL_DMA_IRQHandler+0x238>
=======
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4a2e      	ldr	r2, [pc, #184]	; (81035b4 <HAL_DMA_IRQHandler+0x1b4>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d04a      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	4a2d      	ldr	r2, [pc, #180]	; (81035b8 <HAL_DMA_IRQHandler+0x1b8>)
 8103504:	4293      	cmp	r3, r2
 8103506:	d045      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	4a2b      	ldr	r2, [pc, #172]	; (81035bc <HAL_DMA_IRQHandler+0x1bc>)
 810350e:	4293      	cmp	r3, r2
 8103510:	d040      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	4a2a      	ldr	r2, [pc, #168]	; (81035c0 <HAL_DMA_IRQHandler+0x1c0>)
 8103518:	4293      	cmp	r3, r2
 810351a:	d03b      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4a28      	ldr	r2, [pc, #160]	; (81035c4 <HAL_DMA_IRQHandler+0x1c4>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d036      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a27      	ldr	r2, [pc, #156]	; (81035c8 <HAL_DMA_IRQHandler+0x1c8>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d031      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4a25      	ldr	r2, [pc, #148]	; (81035cc <HAL_DMA_IRQHandler+0x1cc>)
 8103536:	4293      	cmp	r3, r2
 8103538:	d02c      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	4a24      	ldr	r2, [pc, #144]	; (81035d0 <HAL_DMA_IRQHandler+0x1d0>)
 8103540:	4293      	cmp	r3, r2
 8103542:	d027      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	4a22      	ldr	r2, [pc, #136]	; (81035d4 <HAL_DMA_IRQHandler+0x1d4>)
 810354a:	4293      	cmp	r3, r2
 810354c:	d022      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	4a21      	ldr	r2, [pc, #132]	; (81035d8 <HAL_DMA_IRQHandler+0x1d8>)
 8103554:	4293      	cmp	r3, r2
 8103556:	d01d      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	4a1f      	ldr	r2, [pc, #124]	; (81035dc <HAL_DMA_IRQHandler+0x1dc>)
 810355e:	4293      	cmp	r3, r2
 8103560:	d018      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	681b      	ldr	r3, [r3, #0]
 8103566:	4a1e      	ldr	r2, [pc, #120]	; (81035e0 <HAL_DMA_IRQHandler+0x1e0>)
 8103568:	4293      	cmp	r3, r2
 810356a:	d013      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	4a1c      	ldr	r2, [pc, #112]	; (81035e4 <HAL_DMA_IRQHandler+0x1e4>)
 8103572:	4293      	cmp	r3, r2
 8103574:	d00e      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	681b      	ldr	r3, [r3, #0]
 810357a:	4a1b      	ldr	r2, [pc, #108]	; (81035e8 <HAL_DMA_IRQHandler+0x1e8>)
 810357c:	4293      	cmp	r3, r2
 810357e:	d009      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	4a19      	ldr	r2, [pc, #100]	; (81035ec <HAL_DMA_IRQHandler+0x1ec>)
 8103586:	4293      	cmp	r3, r2
 8103588:	d004      	beq.n	8103594 <HAL_DMA_IRQHandler+0x194>
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	681b      	ldr	r3, [r3, #0]
 810358e:	4a18      	ldr	r2, [pc, #96]	; (81035f0 <HAL_DMA_IRQHandler+0x1f0>)
 8103590:	4293      	cmp	r3, r2
 8103592:	d12f      	bne.n	81035f4 <HAL_DMA_IRQHandler+0x1f4>
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	681b      	ldr	r3, [r3, #0]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	f003 0304 	and.w	r3, r3, #4
 810359e:	2b00      	cmp	r3, #0
 81035a0:	bf14      	ite	ne
 81035a2:	2301      	movne	r3, #1
 81035a4:	2300      	moveq	r3, #0
 81035a6:	b2db      	uxtb	r3, r3
 81035a8:	e02e      	b.n	8103608 <HAL_DMA_IRQHandler+0x208>
 81035aa:	bf00      	nop
 81035ac:	10000000 	.word	0x10000000
 81035b0:	1b4e81b5 	.word	0x1b4e81b5
 81035b4:	40020010 	.word	0x40020010
 81035b8:	40020028 	.word	0x40020028
 81035bc:	40020040 	.word	0x40020040
 81035c0:	40020058 	.word	0x40020058
 81035c4:	40020070 	.word	0x40020070
 81035c8:	40020088 	.word	0x40020088
 81035cc:	400200a0 	.word	0x400200a0
 81035d0:	400200b8 	.word	0x400200b8
 81035d4:	40020410 	.word	0x40020410
 81035d8:	40020428 	.word	0x40020428
 81035dc:	40020440 	.word	0x40020440
 81035e0:	40020458 	.word	0x40020458
 81035e4:	40020470 	.word	0x40020470
 81035e8:	40020488 	.word	0x40020488
 81035ec:	400204a0 	.word	0x400204a0
 81035f0:	400204b8 	.word	0x400204b8
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	f003 0308 	and.w	r3, r3, #8
 81035fe:	2b00      	cmp	r3, #0
 8103600:	bf14      	ite	ne
 8103602:	2301      	movne	r3, #1
 8103604:	2300      	moveq	r3, #0
 8103606:	b2db      	uxtb	r3, r3
 8103608:	2b00      	cmp	r3, #0
 810360a:	d015      	beq.n	8103638 <HAL_DMA_IRQHandler+0x238>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
<<<<<<< HEAD
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	681b      	ldr	r3, [r3, #0]
 81037a4:	681a      	ldr	r2, [r3, #0]
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	f022 0204 	bic.w	r2, r2, #4
 81037ae:	601a      	str	r2, [r3, #0]
=======
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	681a      	ldr	r2, [r3, #0]
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	f022 0204 	bic.w	r2, r2, #4
 810361a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037b4:	f003 031f 	and.w	r3, r3, #31
 81037b8:	2208      	movs	r2, #8
 81037ba:	409a      	lsls	r2, r3
 81037bc:	6a3b      	ldr	r3, [r7, #32]
 81037be:	609a      	str	r2, [r3, #8]
=======
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103620:	f003 031f 	and.w	r3, r3, #31
 8103624:	2208      	movs	r2, #8
 8103626:	409a      	lsls	r2, r3
 8103628:	6a3b      	ldr	r3, [r7, #32]
 810362a:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
<<<<<<< HEAD
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037c4:	f043 0201 	orr.w	r2, r3, #1
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	655a      	str	r2, [r3, #84]	; 0x54
=======
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103630:	f043 0201 	orr.w	r2, r3, #1
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
<<<<<<< HEAD
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037d0:	f003 031f 	and.w	r3, r3, #31
 81037d4:	69ba      	ldr	r2, [r7, #24]
 81037d6:	fa22 f303 	lsr.w	r3, r2, r3
 81037da:	f003 0301 	and.w	r3, r3, #1
 81037de:	2b00      	cmp	r3, #0
 81037e0:	d06e      	beq.n	81038c0 <HAL_DMA_IRQHandler+0x32c>
=======
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810363c:	f003 031f 	and.w	r3, r3, #31
 8103640:	69ba      	ldr	r2, [r7, #24]
 8103642:	fa22 f303 	lsr.w	r3, r2, r3
 8103646:	f003 0301 	and.w	r3, r3, #1
 810364a:	2b00      	cmp	r3, #0
 810364c:	d06e      	beq.n	810372c <HAL_DMA_IRQHandler+0x32c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
<<<<<<< HEAD
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	4a69      	ldr	r2, [pc, #420]	; (810398c <HAL_DMA_IRQHandler+0x3f8>)
 81037e8:	4293      	cmp	r3, r2
 81037ea:	d04a      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	681b      	ldr	r3, [r3, #0]
 81037f0:	4a67      	ldr	r2, [pc, #412]	; (8103990 <HAL_DMA_IRQHandler+0x3fc>)
 81037f2:	4293      	cmp	r3, r2
 81037f4:	d045      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	4a66      	ldr	r2, [pc, #408]	; (8103994 <HAL_DMA_IRQHandler+0x400>)
 81037fc:	4293      	cmp	r3, r2
 81037fe:	d040      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	4a64      	ldr	r2, [pc, #400]	; (8103998 <HAL_DMA_IRQHandler+0x404>)
 8103806:	4293      	cmp	r3, r2
 8103808:	d03b      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	681b      	ldr	r3, [r3, #0]
 810380e:	4a63      	ldr	r2, [pc, #396]	; (810399c <HAL_DMA_IRQHandler+0x408>)
 8103810:	4293      	cmp	r3, r2
 8103812:	d036      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	681b      	ldr	r3, [r3, #0]
 8103818:	4a61      	ldr	r2, [pc, #388]	; (81039a0 <HAL_DMA_IRQHandler+0x40c>)
 810381a:	4293      	cmp	r3, r2
 810381c:	d031      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	681b      	ldr	r3, [r3, #0]
 8103822:	4a60      	ldr	r2, [pc, #384]	; (81039a4 <HAL_DMA_IRQHandler+0x410>)
 8103824:	4293      	cmp	r3, r2
 8103826:	d02c      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	4a5e      	ldr	r2, [pc, #376]	; (81039a8 <HAL_DMA_IRQHandler+0x414>)
 810382e:	4293      	cmp	r3, r2
 8103830:	d027      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	4a5d      	ldr	r2, [pc, #372]	; (81039ac <HAL_DMA_IRQHandler+0x418>)
 8103838:	4293      	cmp	r3, r2
 810383a:	d022      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	4a5b      	ldr	r2, [pc, #364]	; (81039b0 <HAL_DMA_IRQHandler+0x41c>)
 8103842:	4293      	cmp	r3, r2
 8103844:	d01d      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	4a5a      	ldr	r2, [pc, #360]	; (81039b4 <HAL_DMA_IRQHandler+0x420>)
 810384c:	4293      	cmp	r3, r2
 810384e:	d018      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	681b      	ldr	r3, [r3, #0]
 8103854:	4a58      	ldr	r2, [pc, #352]	; (81039b8 <HAL_DMA_IRQHandler+0x424>)
 8103856:	4293      	cmp	r3, r2
 8103858:	d013      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	4a57      	ldr	r2, [pc, #348]	; (81039bc <HAL_DMA_IRQHandler+0x428>)
 8103860:	4293      	cmp	r3, r2
 8103862:	d00e      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	681b      	ldr	r3, [r3, #0]
 8103868:	4a55      	ldr	r2, [pc, #340]	; (81039c0 <HAL_DMA_IRQHandler+0x42c>)
 810386a:	4293      	cmp	r3, r2
 810386c:	d009      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	4a54      	ldr	r2, [pc, #336]	; (81039c4 <HAL_DMA_IRQHandler+0x430>)
 8103874:	4293      	cmp	r3, r2
 8103876:	d004      	beq.n	8103882 <HAL_DMA_IRQHandler+0x2ee>
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	681b      	ldr	r3, [r3, #0]
 810387c:	4a52      	ldr	r2, [pc, #328]	; (81039c8 <HAL_DMA_IRQHandler+0x434>)
 810387e:	4293      	cmp	r3, r2
 8103880:	d10a      	bne.n	8103898 <HAL_DMA_IRQHandler+0x304>
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	681b      	ldr	r3, [r3, #0]
 8103886:	695b      	ldr	r3, [r3, #20]
 8103888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810388c:	2b00      	cmp	r3, #0
 810388e:	bf14      	ite	ne
 8103890:	2301      	movne	r3, #1
 8103892:	2300      	moveq	r3, #0
 8103894:	b2db      	uxtb	r3, r3
 8103896:	e003      	b.n	81038a0 <HAL_DMA_IRQHandler+0x30c>
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	2300      	movs	r3, #0
 81038a0:	2b00      	cmp	r3, #0
 81038a2:	d00d      	beq.n	81038c0 <HAL_DMA_IRQHandler+0x32c>
=======
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	4a69      	ldr	r2, [pc, #420]	; (81037f8 <HAL_DMA_IRQHandler+0x3f8>)
 8103654:	4293      	cmp	r3, r2
 8103656:	d04a      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4a67      	ldr	r2, [pc, #412]	; (81037fc <HAL_DMA_IRQHandler+0x3fc>)
 810365e:	4293      	cmp	r3, r2
 8103660:	d045      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	4a66      	ldr	r2, [pc, #408]	; (8103800 <HAL_DMA_IRQHandler+0x400>)
 8103668:	4293      	cmp	r3, r2
 810366a:	d040      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	4a64      	ldr	r2, [pc, #400]	; (8103804 <HAL_DMA_IRQHandler+0x404>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d03b      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	4a63      	ldr	r2, [pc, #396]	; (8103808 <HAL_DMA_IRQHandler+0x408>)
 810367c:	4293      	cmp	r3, r2
 810367e:	d036      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	4a61      	ldr	r2, [pc, #388]	; (810380c <HAL_DMA_IRQHandler+0x40c>)
 8103686:	4293      	cmp	r3, r2
 8103688:	d031      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	681b      	ldr	r3, [r3, #0]
 810368e:	4a60      	ldr	r2, [pc, #384]	; (8103810 <HAL_DMA_IRQHandler+0x410>)
 8103690:	4293      	cmp	r3, r2
 8103692:	d02c      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	4a5e      	ldr	r2, [pc, #376]	; (8103814 <HAL_DMA_IRQHandler+0x414>)
 810369a:	4293      	cmp	r3, r2
 810369c:	d027      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	681b      	ldr	r3, [r3, #0]
 81036a2:	4a5d      	ldr	r2, [pc, #372]	; (8103818 <HAL_DMA_IRQHandler+0x418>)
 81036a4:	4293      	cmp	r3, r2
 81036a6:	d022      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	4a5b      	ldr	r2, [pc, #364]	; (810381c <HAL_DMA_IRQHandler+0x41c>)
 81036ae:	4293      	cmp	r3, r2
 81036b0:	d01d      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	4a5a      	ldr	r2, [pc, #360]	; (8103820 <HAL_DMA_IRQHandler+0x420>)
 81036b8:	4293      	cmp	r3, r2
 81036ba:	d018      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	4a58      	ldr	r2, [pc, #352]	; (8103824 <HAL_DMA_IRQHandler+0x424>)
 81036c2:	4293      	cmp	r3, r2
 81036c4:	d013      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	4a57      	ldr	r2, [pc, #348]	; (8103828 <HAL_DMA_IRQHandler+0x428>)
 81036cc:	4293      	cmp	r3, r2
 81036ce:	d00e      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	4a55      	ldr	r2, [pc, #340]	; (810382c <HAL_DMA_IRQHandler+0x42c>)
 81036d6:	4293      	cmp	r3, r2
 81036d8:	d009      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	681b      	ldr	r3, [r3, #0]
 81036de:	4a54      	ldr	r2, [pc, #336]	; (8103830 <HAL_DMA_IRQHandler+0x430>)
 81036e0:	4293      	cmp	r3, r2
 81036e2:	d004      	beq.n	81036ee <HAL_DMA_IRQHandler+0x2ee>
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	681b      	ldr	r3, [r3, #0]
 81036e8:	4a52      	ldr	r2, [pc, #328]	; (8103834 <HAL_DMA_IRQHandler+0x434>)
 81036ea:	4293      	cmp	r3, r2
 81036ec:	d10a      	bne.n	8103704 <HAL_DMA_IRQHandler+0x304>
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	695b      	ldr	r3, [r3, #20]
 81036f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81036f8:	2b00      	cmp	r3, #0
 81036fa:	bf14      	ite	ne
 81036fc:	2301      	movne	r3, #1
 81036fe:	2300      	moveq	r3, #0
 8103700:	b2db      	uxtb	r3, r3
 8103702:	e003      	b.n	810370c <HAL_DMA_IRQHandler+0x30c>
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	681b      	ldr	r3, [r3, #0]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	2300      	movs	r3, #0
 810370c:	2b00      	cmp	r3, #0
 810370e:	d00d      	beq.n	810372c <HAL_DMA_IRQHandler+0x32c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81038a8:	f003 031f 	and.w	r3, r3, #31
 81038ac:	2201      	movs	r2, #1
 81038ae:	409a      	lsls	r2, r3
 81038b0:	6a3b      	ldr	r3, [r7, #32]
 81038b2:	609a      	str	r2, [r3, #8]
=======
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103714:	f003 031f 	and.w	r3, r3, #31
 8103718:	2201      	movs	r2, #1
 810371a:	409a      	lsls	r2, r3
 810371c:	6a3b      	ldr	r3, [r7, #32]
 810371e:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
<<<<<<< HEAD
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038b8:	f043 0202 	orr.w	r2, r3, #2
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8103720:	687b      	ldr	r3, [r7, #4]
 8103722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103724:	f043 0202 	orr.w	r2, r3, #2
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
<<<<<<< HEAD
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81038c4:	f003 031f 	and.w	r3, r3, #31
 81038c8:	2204      	movs	r2, #4
 81038ca:	409a      	lsls	r2, r3
 81038cc:	69bb      	ldr	r3, [r7, #24]
 81038ce:	4013      	ands	r3, r2
 81038d0:	2b00      	cmp	r3, #0
 81038d2:	f000 808f 	beq.w	81039f4 <HAL_DMA_IRQHandler+0x460>
=======
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103730:	f003 031f 	and.w	r3, r3, #31
 8103734:	2204      	movs	r2, #4
 8103736:	409a      	lsls	r2, r3
 8103738:	69bb      	ldr	r3, [r7, #24]
 810373a:	4013      	ands	r3, r2
 810373c:	2b00      	cmp	r3, #0
 810373e:	f000 808f 	beq.w	8103860 <HAL_DMA_IRQHandler+0x460>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
<<<<<<< HEAD
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	681b      	ldr	r3, [r3, #0]
 81038da:	4a2c      	ldr	r2, [pc, #176]	; (810398c <HAL_DMA_IRQHandler+0x3f8>)
 81038dc:	4293      	cmp	r3, r2
 81038de:	d04a      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 81038e0:	687b      	ldr	r3, [r7, #4]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	4a2a      	ldr	r2, [pc, #168]	; (8103990 <HAL_DMA_IRQHandler+0x3fc>)
 81038e6:	4293      	cmp	r3, r2
 81038e8:	d045      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	681b      	ldr	r3, [r3, #0]
 81038ee:	4a29      	ldr	r2, [pc, #164]	; (8103994 <HAL_DMA_IRQHandler+0x400>)
 81038f0:	4293      	cmp	r3, r2
 81038f2:	d040      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	681b      	ldr	r3, [r3, #0]
 81038f8:	4a27      	ldr	r2, [pc, #156]	; (8103998 <HAL_DMA_IRQHandler+0x404>)
 81038fa:	4293      	cmp	r3, r2
 81038fc:	d03b      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 81038fe:	687b      	ldr	r3, [r7, #4]
 8103900:	681b      	ldr	r3, [r3, #0]
 8103902:	4a26      	ldr	r2, [pc, #152]	; (810399c <HAL_DMA_IRQHandler+0x408>)
 8103904:	4293      	cmp	r3, r2
 8103906:	d036      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	681b      	ldr	r3, [r3, #0]
 810390c:	4a24      	ldr	r2, [pc, #144]	; (81039a0 <HAL_DMA_IRQHandler+0x40c>)
 810390e:	4293      	cmp	r3, r2
 8103910:	d031      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	681b      	ldr	r3, [r3, #0]
 8103916:	4a23      	ldr	r2, [pc, #140]	; (81039a4 <HAL_DMA_IRQHandler+0x410>)
 8103918:	4293      	cmp	r3, r2
 810391a:	d02c      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	4a21      	ldr	r2, [pc, #132]	; (81039a8 <HAL_DMA_IRQHandler+0x414>)
 8103922:	4293      	cmp	r3, r2
 8103924:	d027      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	681b      	ldr	r3, [r3, #0]
 810392a:	4a20      	ldr	r2, [pc, #128]	; (81039ac <HAL_DMA_IRQHandler+0x418>)
 810392c:	4293      	cmp	r3, r2
 810392e:	d022      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	4a1e      	ldr	r2, [pc, #120]	; (81039b0 <HAL_DMA_IRQHandler+0x41c>)
 8103936:	4293      	cmp	r3, r2
 8103938:	d01d      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	681b      	ldr	r3, [r3, #0]
 810393e:	4a1d      	ldr	r2, [pc, #116]	; (81039b4 <HAL_DMA_IRQHandler+0x420>)
 8103940:	4293      	cmp	r3, r2
 8103942:	d018      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	4a1b      	ldr	r2, [pc, #108]	; (81039b8 <HAL_DMA_IRQHandler+0x424>)
 810394a:	4293      	cmp	r3, r2
 810394c:	d013      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	681b      	ldr	r3, [r3, #0]
 8103952:	4a1a      	ldr	r2, [pc, #104]	; (81039bc <HAL_DMA_IRQHandler+0x428>)
 8103954:	4293      	cmp	r3, r2
 8103956:	d00e      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	4a18      	ldr	r2, [pc, #96]	; (81039c0 <HAL_DMA_IRQHandler+0x42c>)
 810395e:	4293      	cmp	r3, r2
 8103960:	d009      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	4a17      	ldr	r2, [pc, #92]	; (81039c4 <HAL_DMA_IRQHandler+0x430>)
 8103968:	4293      	cmp	r3, r2
 810396a:	d004      	beq.n	8103976 <HAL_DMA_IRQHandler+0x3e2>
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	4a15      	ldr	r2, [pc, #84]	; (81039c8 <HAL_DMA_IRQHandler+0x434>)
 8103972:	4293      	cmp	r3, r2
 8103974:	d12a      	bne.n	81039cc <HAL_DMA_IRQHandler+0x438>
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	681b      	ldr	r3, [r3, #0]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	f003 0302 	and.w	r3, r3, #2
 8103980:	2b00      	cmp	r3, #0
 8103982:	bf14      	ite	ne
 8103984:	2301      	movne	r3, #1
 8103986:	2300      	moveq	r3, #0
 8103988:	b2db      	uxtb	r3, r3
 810398a:	e023      	b.n	81039d4 <HAL_DMA_IRQHandler+0x440>
 810398c:	40020010 	.word	0x40020010
 8103990:	40020028 	.word	0x40020028
 8103994:	40020040 	.word	0x40020040
 8103998:	40020058 	.word	0x40020058
 810399c:	40020070 	.word	0x40020070
 81039a0:	40020088 	.word	0x40020088
 81039a4:	400200a0 	.word	0x400200a0
 81039a8:	400200b8 	.word	0x400200b8
 81039ac:	40020410 	.word	0x40020410
 81039b0:	40020428 	.word	0x40020428
 81039b4:	40020440 	.word	0x40020440
 81039b8:	40020458 	.word	0x40020458
 81039bc:	40020470 	.word	0x40020470
 81039c0:	40020488 	.word	0x40020488
 81039c4:	400204a0 	.word	0x400204a0
 81039c8:	400204b8 	.word	0x400204b8
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	681b      	ldr	r3, [r3, #0]
 81039d2:	2300      	movs	r3, #0
 81039d4:	2b00      	cmp	r3, #0
 81039d6:	d00d      	beq.n	81039f4 <HAL_DMA_IRQHandler+0x460>
=======
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	4a2c      	ldr	r2, [pc, #176]	; (81037f8 <HAL_DMA_IRQHandler+0x3f8>)
 8103748:	4293      	cmp	r3, r2
 810374a:	d04a      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	4a2a      	ldr	r2, [pc, #168]	; (81037fc <HAL_DMA_IRQHandler+0x3fc>)
 8103752:	4293      	cmp	r3, r2
 8103754:	d045      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	4a29      	ldr	r2, [pc, #164]	; (8103800 <HAL_DMA_IRQHandler+0x400>)
 810375c:	4293      	cmp	r3, r2
 810375e:	d040      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	4a27      	ldr	r2, [pc, #156]	; (8103804 <HAL_DMA_IRQHandler+0x404>)
 8103766:	4293      	cmp	r3, r2
 8103768:	d03b      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	4a26      	ldr	r2, [pc, #152]	; (8103808 <HAL_DMA_IRQHandler+0x408>)
 8103770:	4293      	cmp	r3, r2
 8103772:	d036      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103774:	687b      	ldr	r3, [r7, #4]
 8103776:	681b      	ldr	r3, [r3, #0]
 8103778:	4a24      	ldr	r2, [pc, #144]	; (810380c <HAL_DMA_IRQHandler+0x40c>)
 810377a:	4293      	cmp	r3, r2
 810377c:	d031      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	681b      	ldr	r3, [r3, #0]
 8103782:	4a23      	ldr	r2, [pc, #140]	; (8103810 <HAL_DMA_IRQHandler+0x410>)
 8103784:	4293      	cmp	r3, r2
 8103786:	d02c      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	4a21      	ldr	r2, [pc, #132]	; (8103814 <HAL_DMA_IRQHandler+0x414>)
 810378e:	4293      	cmp	r3, r2
 8103790:	d027      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	4a20      	ldr	r2, [pc, #128]	; (8103818 <HAL_DMA_IRQHandler+0x418>)
 8103798:	4293      	cmp	r3, r2
 810379a:	d022      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	4a1e      	ldr	r2, [pc, #120]	; (810381c <HAL_DMA_IRQHandler+0x41c>)
 81037a2:	4293      	cmp	r3, r2
 81037a4:	d01d      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	4a1d      	ldr	r2, [pc, #116]	; (8103820 <HAL_DMA_IRQHandler+0x420>)
 81037ac:	4293      	cmp	r3, r2
 81037ae:	d018      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	4a1b      	ldr	r2, [pc, #108]	; (8103824 <HAL_DMA_IRQHandler+0x424>)
 81037b6:	4293      	cmp	r3, r2
 81037b8:	d013      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	4a1a      	ldr	r2, [pc, #104]	; (8103828 <HAL_DMA_IRQHandler+0x428>)
 81037c0:	4293      	cmp	r3, r2
 81037c2:	d00e      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	4a18      	ldr	r2, [pc, #96]	; (810382c <HAL_DMA_IRQHandler+0x42c>)
 81037ca:	4293      	cmp	r3, r2
 81037cc:	d009      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	681b      	ldr	r3, [r3, #0]
 81037d2:	4a17      	ldr	r2, [pc, #92]	; (8103830 <HAL_DMA_IRQHandler+0x430>)
 81037d4:	4293      	cmp	r3, r2
 81037d6:	d004      	beq.n	81037e2 <HAL_DMA_IRQHandler+0x3e2>
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	681b      	ldr	r3, [r3, #0]
 81037dc:	4a15      	ldr	r2, [pc, #84]	; (8103834 <HAL_DMA_IRQHandler+0x434>)
 81037de:	4293      	cmp	r3, r2
 81037e0:	d12a      	bne.n	8103838 <HAL_DMA_IRQHandler+0x438>
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	681b      	ldr	r3, [r3, #0]
 81037e8:	f003 0302 	and.w	r3, r3, #2
 81037ec:	2b00      	cmp	r3, #0
 81037ee:	bf14      	ite	ne
 81037f0:	2301      	movne	r3, #1
 81037f2:	2300      	moveq	r3, #0
 81037f4:	b2db      	uxtb	r3, r3
 81037f6:	e023      	b.n	8103840 <HAL_DMA_IRQHandler+0x440>
 81037f8:	40020010 	.word	0x40020010
 81037fc:	40020028 	.word	0x40020028
 8103800:	40020040 	.word	0x40020040
 8103804:	40020058 	.word	0x40020058
 8103808:	40020070 	.word	0x40020070
 810380c:	40020088 	.word	0x40020088
 8103810:	400200a0 	.word	0x400200a0
 8103814:	400200b8 	.word	0x400200b8
 8103818:	40020410 	.word	0x40020410
 810381c:	40020428 	.word	0x40020428
 8103820:	40020440 	.word	0x40020440
 8103824:	40020458 	.word	0x40020458
 8103828:	40020470 	.word	0x40020470
 810382c:	40020488 	.word	0x40020488
 8103830:	400204a0 	.word	0x400204a0
 8103834:	400204b8 	.word	0x400204b8
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	681b      	ldr	r3, [r3, #0]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	2300      	movs	r3, #0
 8103840:	2b00      	cmp	r3, #0
 8103842:	d00d      	beq.n	8103860 <HAL_DMA_IRQHandler+0x460>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81039dc:	f003 031f 	and.w	r3, r3, #31
 81039e0:	2204      	movs	r2, #4
 81039e2:	409a      	lsls	r2, r3
 81039e4:	6a3b      	ldr	r3, [r7, #32]
 81039e6:	609a      	str	r2, [r3, #8]
=======
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103848:	f003 031f 	and.w	r3, r3, #31
 810384c:	2204      	movs	r2, #4
 810384e:	409a      	lsls	r2, r3
 8103850:	6a3b      	ldr	r3, [r7, #32]
 8103852:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
<<<<<<< HEAD
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039ec:	f043 0204 	orr.w	r2, r3, #4
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103858:	f043 0204 	orr.w	r2, r3, #4
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
<<<<<<< HEAD
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81039f8:	f003 031f 	and.w	r3, r3, #31
 81039fc:	2210      	movs	r2, #16
 81039fe:	409a      	lsls	r2, r3
 8103a00:	69bb      	ldr	r3, [r7, #24]
 8103a02:	4013      	ands	r3, r2
 8103a04:	2b00      	cmp	r3, #0
 8103a06:	f000 80a6 	beq.w	8103b56 <HAL_DMA_IRQHandler+0x5c2>
=======
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103864:	f003 031f 	and.w	r3, r3, #31
 8103868:	2210      	movs	r2, #16
 810386a:	409a      	lsls	r2, r3
 810386c:	69bb      	ldr	r3, [r7, #24]
 810386e:	4013      	ands	r3, r2
 8103870:	2b00      	cmp	r3, #0
 8103872:	f000 80a6 	beq.w	81039c2 <HAL_DMA_IRQHandler+0x5c2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
<<<<<<< HEAD
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	4a85      	ldr	r2, [pc, #532]	; (8103c24 <HAL_DMA_IRQHandler+0x690>)
 8103a10:	4293      	cmp	r3, r2
 8103a12:	d04a      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	4a83      	ldr	r2, [pc, #524]	; (8103c28 <HAL_DMA_IRQHandler+0x694>)
 8103a1a:	4293      	cmp	r3, r2
 8103a1c:	d045      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	4a82      	ldr	r2, [pc, #520]	; (8103c2c <HAL_DMA_IRQHandler+0x698>)
 8103a24:	4293      	cmp	r3, r2
 8103a26:	d040      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	4a80      	ldr	r2, [pc, #512]	; (8103c30 <HAL_DMA_IRQHandler+0x69c>)
 8103a2e:	4293      	cmp	r3, r2
 8103a30:	d03b      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	4a7f      	ldr	r2, [pc, #508]	; (8103c34 <HAL_DMA_IRQHandler+0x6a0>)
 8103a38:	4293      	cmp	r3, r2
 8103a3a:	d036      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	4a7d      	ldr	r2, [pc, #500]	; (8103c38 <HAL_DMA_IRQHandler+0x6a4>)
 8103a42:	4293      	cmp	r3, r2
 8103a44:	d031      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	4a7c      	ldr	r2, [pc, #496]	; (8103c3c <HAL_DMA_IRQHandler+0x6a8>)
 8103a4c:	4293      	cmp	r3, r2
 8103a4e:	d02c      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	4a7a      	ldr	r2, [pc, #488]	; (8103c40 <HAL_DMA_IRQHandler+0x6ac>)
 8103a56:	4293      	cmp	r3, r2
 8103a58:	d027      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4a79      	ldr	r2, [pc, #484]	; (8103c44 <HAL_DMA_IRQHandler+0x6b0>)
 8103a60:	4293      	cmp	r3, r2
 8103a62:	d022      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	4a77      	ldr	r2, [pc, #476]	; (8103c48 <HAL_DMA_IRQHandler+0x6b4>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d01d      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	4a76      	ldr	r2, [pc, #472]	; (8103c4c <HAL_DMA_IRQHandler+0x6b8>)
 8103a74:	4293      	cmp	r3, r2
 8103a76:	d018      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	4a74      	ldr	r2, [pc, #464]	; (8103c50 <HAL_DMA_IRQHandler+0x6bc>)
 8103a7e:	4293      	cmp	r3, r2
 8103a80:	d013      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	4a73      	ldr	r2, [pc, #460]	; (8103c54 <HAL_DMA_IRQHandler+0x6c0>)
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	d00e      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	4a71      	ldr	r2, [pc, #452]	; (8103c58 <HAL_DMA_IRQHandler+0x6c4>)
 8103a92:	4293      	cmp	r3, r2
 8103a94:	d009      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a70      	ldr	r2, [pc, #448]	; (8103c5c <HAL_DMA_IRQHandler+0x6c8>)
 8103a9c:	4293      	cmp	r3, r2
 8103a9e:	d004      	beq.n	8103aaa <HAL_DMA_IRQHandler+0x516>
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4a6e      	ldr	r2, [pc, #440]	; (8103c60 <HAL_DMA_IRQHandler+0x6cc>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d10a      	bne.n	8103ac0 <HAL_DMA_IRQHandler+0x52c>
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	f003 0308 	and.w	r3, r3, #8
 8103ab4:	2b00      	cmp	r3, #0
 8103ab6:	bf14      	ite	ne
 8103ab8:	2301      	movne	r3, #1
 8103aba:	2300      	moveq	r3, #0
 8103abc:	b2db      	uxtb	r3, r3
 8103abe:	e009      	b.n	8103ad4 <HAL_DMA_IRQHandler+0x540>
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	681b      	ldr	r3, [r3, #0]
 8103ac6:	f003 0304 	and.w	r3, r3, #4
 8103aca:	2b00      	cmp	r3, #0
 8103acc:	bf14      	ite	ne
 8103ace:	2301      	movne	r3, #1
 8103ad0:	2300      	moveq	r3, #0
 8103ad2:	b2db      	uxtb	r3, r3
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	d03e      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x5c2>
=======
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	4a85      	ldr	r2, [pc, #532]	; (8103a90 <HAL_DMA_IRQHandler+0x690>)
 810387c:	4293      	cmp	r3, r2
 810387e:	d04a      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	681b      	ldr	r3, [r3, #0]
 8103884:	4a83      	ldr	r2, [pc, #524]	; (8103a94 <HAL_DMA_IRQHandler+0x694>)
 8103886:	4293      	cmp	r3, r2
 8103888:	d045      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	4a82      	ldr	r2, [pc, #520]	; (8103a98 <HAL_DMA_IRQHandler+0x698>)
 8103890:	4293      	cmp	r3, r2
 8103892:	d040      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	4a80      	ldr	r2, [pc, #512]	; (8103a9c <HAL_DMA_IRQHandler+0x69c>)
 810389a:	4293      	cmp	r3, r2
 810389c:	d03b      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	4a7f      	ldr	r2, [pc, #508]	; (8103aa0 <HAL_DMA_IRQHandler+0x6a0>)
 81038a4:	4293      	cmp	r3, r2
 81038a6:	d036      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	4a7d      	ldr	r2, [pc, #500]	; (8103aa4 <HAL_DMA_IRQHandler+0x6a4>)
 81038ae:	4293      	cmp	r3, r2
 81038b0:	d031      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	4a7c      	ldr	r2, [pc, #496]	; (8103aa8 <HAL_DMA_IRQHandler+0x6a8>)
 81038b8:	4293      	cmp	r3, r2
 81038ba:	d02c      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	4a7a      	ldr	r2, [pc, #488]	; (8103aac <HAL_DMA_IRQHandler+0x6ac>)
 81038c2:	4293      	cmp	r3, r2
 81038c4:	d027      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	4a79      	ldr	r2, [pc, #484]	; (8103ab0 <HAL_DMA_IRQHandler+0x6b0>)
 81038cc:	4293      	cmp	r3, r2
 81038ce:	d022      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	4a77      	ldr	r2, [pc, #476]	; (8103ab4 <HAL_DMA_IRQHandler+0x6b4>)
 81038d6:	4293      	cmp	r3, r2
 81038d8:	d01d      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	4a76      	ldr	r2, [pc, #472]	; (8103ab8 <HAL_DMA_IRQHandler+0x6b8>)
 81038e0:	4293      	cmp	r3, r2
 81038e2:	d018      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	4a74      	ldr	r2, [pc, #464]	; (8103abc <HAL_DMA_IRQHandler+0x6bc>)
 81038ea:	4293      	cmp	r3, r2
 81038ec:	d013      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	681b      	ldr	r3, [r3, #0]
 81038f2:	4a73      	ldr	r2, [pc, #460]	; (8103ac0 <HAL_DMA_IRQHandler+0x6c0>)
 81038f4:	4293      	cmp	r3, r2
 81038f6:	d00e      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	4a71      	ldr	r2, [pc, #452]	; (8103ac4 <HAL_DMA_IRQHandler+0x6c4>)
 81038fe:	4293      	cmp	r3, r2
 8103900:	d009      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	4a70      	ldr	r2, [pc, #448]	; (8103ac8 <HAL_DMA_IRQHandler+0x6c8>)
 8103908:	4293      	cmp	r3, r2
 810390a:	d004      	beq.n	8103916 <HAL_DMA_IRQHandler+0x516>
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	4a6e      	ldr	r2, [pc, #440]	; (8103acc <HAL_DMA_IRQHandler+0x6cc>)
 8103912:	4293      	cmp	r3, r2
 8103914:	d10a      	bne.n	810392c <HAL_DMA_IRQHandler+0x52c>
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	681b      	ldr	r3, [r3, #0]
 810391c:	f003 0308 	and.w	r3, r3, #8
 8103920:	2b00      	cmp	r3, #0
 8103922:	bf14      	ite	ne
 8103924:	2301      	movne	r3, #1
 8103926:	2300      	moveq	r3, #0
 8103928:	b2db      	uxtb	r3, r3
 810392a:	e009      	b.n	8103940 <HAL_DMA_IRQHandler+0x540>
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	681b      	ldr	r3, [r3, #0]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	f003 0304 	and.w	r3, r3, #4
 8103936:	2b00      	cmp	r3, #0
 8103938:	bf14      	ite	ne
 810393a:	2301      	movne	r3, #1
 810393c:	2300      	moveq	r3, #0
 810393e:	b2db      	uxtb	r3, r3
 8103940:	2b00      	cmp	r3, #0
 8103942:	d03e      	beq.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 8103ad8:	687b      	ldr	r3, [r7, #4]
 8103ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103adc:	f003 031f 	and.w	r3, r3, #31
 8103ae0:	2210      	movs	r2, #16
 8103ae2:	409a      	lsls	r2, r3
 8103ae4:	6a3b      	ldr	r3, [r7, #32]
 8103ae6:	609a      	str	r2, [r3, #8]
=======
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103948:	f003 031f 	and.w	r3, r3, #31
 810394c:	2210      	movs	r2, #16
 810394e:	409a      	lsls	r2, r3
 8103950:	6a3b      	ldr	r3, [r7, #32]
 8103952:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
<<<<<<< HEAD
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	681b      	ldr	r3, [r3, #0]
 8103aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103af2:	2b00      	cmp	r3, #0
 8103af4:	d018      	beq.n	8103b28 <HAL_DMA_IRQHandler+0x594>
=======
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810395e:	2b00      	cmp	r3, #0
 8103960:	d018      	beq.n	8103994 <HAL_DMA_IRQHandler+0x594>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
<<<<<<< HEAD
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103b00:	2b00      	cmp	r3, #0
 8103b02:	d108      	bne.n	8103b16 <HAL_DMA_IRQHandler+0x582>
=======
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810396c:	2b00      	cmp	r3, #0
 810396e:	d108      	bne.n	8103982 <HAL_DMA_IRQHandler+0x582>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b08:	2b00      	cmp	r3, #0
 8103b0a:	d024      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x5c2>
=======
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103974:	2b00      	cmp	r3, #0
 8103976:	d024      	beq.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b10:	6878      	ldr	r0, [r7, #4]
 8103b12:	4798      	blx	r3
 8103b14:	e01f      	b.n	8103b56 <HAL_DMA_IRQHandler+0x5c2>
=======
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810397c:	6878      	ldr	r0, [r7, #4]
 810397e:	4798      	blx	r3
 8103980:	e01f      	b.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103b1a:	2b00      	cmp	r3, #0
 8103b1c:	d01b      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x5c2>
=======
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103986:	2b00      	cmp	r3, #0
 8103988:	d01b      	beq.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
<<<<<<< HEAD
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103b22:	6878      	ldr	r0, [r7, #4]
 8103b24:	4798      	blx	r3
 8103b26:	e016      	b.n	8103b56 <HAL_DMA_IRQHandler+0x5c2>
=======
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810398e:	6878      	ldr	r0, [r7, #4]
 8103990:	4798      	blx	r3
 8103992:	e016      	b.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
<<<<<<< HEAD
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103b32:	2b00      	cmp	r3, #0
 8103b34:	d107      	bne.n	8103b46 <HAL_DMA_IRQHandler+0x5b2>
=======
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810399e:	2b00      	cmp	r3, #0
 81039a0:	d107      	bne.n	81039b2 <HAL_DMA_IRQHandler+0x5b2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
<<<<<<< HEAD
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	681a      	ldr	r2, [r3, #0]
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	f022 0208 	bic.w	r2, r2, #8
 8103b44:	601a      	str	r2, [r3, #0]
=======
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	681a      	ldr	r2, [r3, #0]
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	f022 0208 	bic.w	r2, r2, #8
 81039b0:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }

          if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	d003      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x5c2>
=======
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039b6:	2b00      	cmp	r3, #0
 81039b8:	d003      	beq.n	81039c2 <HAL_DMA_IRQHandler+0x5c2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b52:	6878      	ldr	r0, [r7, #4]
 8103b54:	4798      	blx	r3
=======
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039be:	6878      	ldr	r0, [r7, #4]
 81039c0:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
<<<<<<< HEAD
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b5a:	f003 031f 	and.w	r3, r3, #31
 8103b5e:	2220      	movs	r2, #32
 8103b60:	409a      	lsls	r2, r3
 8103b62:	69bb      	ldr	r3, [r7, #24]
 8103b64:	4013      	ands	r3, r2
 8103b66:	2b00      	cmp	r3, #0
 8103b68:	f000 8110 	beq.w	8103d8c <HAL_DMA_IRQHandler+0x7f8>
=======
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81039c6:	f003 031f 	and.w	r3, r3, #31
 81039ca:	2220      	movs	r2, #32
 81039cc:	409a      	lsls	r2, r3
 81039ce:	69bb      	ldr	r3, [r7, #24]
 81039d0:	4013      	ands	r3, r2
 81039d2:	2b00      	cmp	r3, #0
 81039d4:	f000 8110 	beq.w	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
<<<<<<< HEAD
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	4a2c      	ldr	r2, [pc, #176]	; (8103c24 <HAL_DMA_IRQHandler+0x690>)
 8103b72:	4293      	cmp	r3, r2
 8103b74:	d04a      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	681b      	ldr	r3, [r3, #0]
 8103b7a:	4a2b      	ldr	r2, [pc, #172]	; (8103c28 <HAL_DMA_IRQHandler+0x694>)
 8103b7c:	4293      	cmp	r3, r2
 8103b7e:	d045      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	4a29      	ldr	r2, [pc, #164]	; (8103c2c <HAL_DMA_IRQHandler+0x698>)
 8103b86:	4293      	cmp	r3, r2
 8103b88:	d040      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	681b      	ldr	r3, [r3, #0]
 8103b8e:	4a28      	ldr	r2, [pc, #160]	; (8103c30 <HAL_DMA_IRQHandler+0x69c>)
 8103b90:	4293      	cmp	r3, r2
 8103b92:	d03b      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	4a26      	ldr	r2, [pc, #152]	; (8103c34 <HAL_DMA_IRQHandler+0x6a0>)
 8103b9a:	4293      	cmp	r3, r2
 8103b9c:	d036      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	4a25      	ldr	r2, [pc, #148]	; (8103c38 <HAL_DMA_IRQHandler+0x6a4>)
 8103ba4:	4293      	cmp	r3, r2
 8103ba6:	d031      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	4a23      	ldr	r2, [pc, #140]	; (8103c3c <HAL_DMA_IRQHandler+0x6a8>)
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d02c      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	681b      	ldr	r3, [r3, #0]
 8103bb6:	4a22      	ldr	r2, [pc, #136]	; (8103c40 <HAL_DMA_IRQHandler+0x6ac>)
 8103bb8:	4293      	cmp	r3, r2
 8103bba:	d027      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	4a20      	ldr	r2, [pc, #128]	; (8103c44 <HAL_DMA_IRQHandler+0x6b0>)
 8103bc2:	4293      	cmp	r3, r2
 8103bc4:	d022      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	4a1f      	ldr	r2, [pc, #124]	; (8103c48 <HAL_DMA_IRQHandler+0x6b4>)
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d01d      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	4a1d      	ldr	r2, [pc, #116]	; (8103c4c <HAL_DMA_IRQHandler+0x6b8>)
 8103bd6:	4293      	cmp	r3, r2
 8103bd8:	d018      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	681b      	ldr	r3, [r3, #0]
 8103bde:	4a1c      	ldr	r2, [pc, #112]	; (8103c50 <HAL_DMA_IRQHandler+0x6bc>)
 8103be0:	4293      	cmp	r3, r2
 8103be2:	d013      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	4a1a      	ldr	r2, [pc, #104]	; (8103c54 <HAL_DMA_IRQHandler+0x6c0>)
 8103bea:	4293      	cmp	r3, r2
 8103bec:	d00e      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	4a19      	ldr	r2, [pc, #100]	; (8103c58 <HAL_DMA_IRQHandler+0x6c4>)
 8103bf4:	4293      	cmp	r3, r2
 8103bf6:	d009      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	4a17      	ldr	r2, [pc, #92]	; (8103c5c <HAL_DMA_IRQHandler+0x6c8>)
 8103bfe:	4293      	cmp	r3, r2
 8103c00:	d004      	beq.n	8103c0c <HAL_DMA_IRQHandler+0x678>
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	4a16      	ldr	r2, [pc, #88]	; (8103c60 <HAL_DMA_IRQHandler+0x6cc>)
 8103c08:	4293      	cmp	r3, r2
 8103c0a:	d12b      	bne.n	8103c64 <HAL_DMA_IRQHandler+0x6d0>
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	681b      	ldr	r3, [r3, #0]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	f003 0310 	and.w	r3, r3, #16
 8103c16:	2b00      	cmp	r3, #0
 8103c18:	bf14      	ite	ne
 8103c1a:	2301      	movne	r3, #1
 8103c1c:	2300      	moveq	r3, #0
 8103c1e:	b2db      	uxtb	r3, r3
 8103c20:	e02a      	b.n	8103c78 <HAL_DMA_IRQHandler+0x6e4>
 8103c22:	bf00      	nop
 8103c24:	40020010 	.word	0x40020010
 8103c28:	40020028 	.word	0x40020028
 8103c2c:	40020040 	.word	0x40020040
 8103c30:	40020058 	.word	0x40020058
 8103c34:	40020070 	.word	0x40020070
 8103c38:	40020088 	.word	0x40020088
 8103c3c:	400200a0 	.word	0x400200a0
 8103c40:	400200b8 	.word	0x400200b8
 8103c44:	40020410 	.word	0x40020410
 8103c48:	40020428 	.word	0x40020428
 8103c4c:	40020440 	.word	0x40020440
 8103c50:	40020458 	.word	0x40020458
 8103c54:	40020470 	.word	0x40020470
 8103c58:	40020488 	.word	0x40020488
 8103c5c:	400204a0 	.word	0x400204a0
 8103c60:	400204b8 	.word	0x400204b8
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	f003 0302 	and.w	r3, r3, #2
 8103c6e:	2b00      	cmp	r3, #0
 8103c70:	bf14      	ite	ne
 8103c72:	2301      	movne	r3, #1
 8103c74:	2300      	moveq	r3, #0
 8103c76:	b2db      	uxtb	r3, r3
 8103c78:	2b00      	cmp	r3, #0
 8103c7a:	f000 8087 	beq.w	8103d8c <HAL_DMA_IRQHandler+0x7f8>
=======
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	4a2c      	ldr	r2, [pc, #176]	; (8103a90 <HAL_DMA_IRQHandler+0x690>)
 81039de:	4293      	cmp	r3, r2
 81039e0:	d04a      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	4a2b      	ldr	r2, [pc, #172]	; (8103a94 <HAL_DMA_IRQHandler+0x694>)
 81039e8:	4293      	cmp	r3, r2
 81039ea:	d045      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	681b      	ldr	r3, [r3, #0]
 81039f0:	4a29      	ldr	r2, [pc, #164]	; (8103a98 <HAL_DMA_IRQHandler+0x698>)
 81039f2:	4293      	cmp	r3, r2
 81039f4:	d040      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	681b      	ldr	r3, [r3, #0]
 81039fa:	4a28      	ldr	r2, [pc, #160]	; (8103a9c <HAL_DMA_IRQHandler+0x69c>)
 81039fc:	4293      	cmp	r3, r2
 81039fe:	d03b      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	681b      	ldr	r3, [r3, #0]
 8103a04:	4a26      	ldr	r2, [pc, #152]	; (8103aa0 <HAL_DMA_IRQHandler+0x6a0>)
 8103a06:	4293      	cmp	r3, r2
 8103a08:	d036      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	4a25      	ldr	r2, [pc, #148]	; (8103aa4 <HAL_DMA_IRQHandler+0x6a4>)
 8103a10:	4293      	cmp	r3, r2
 8103a12:	d031      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	4a23      	ldr	r2, [pc, #140]	; (8103aa8 <HAL_DMA_IRQHandler+0x6a8>)
 8103a1a:	4293      	cmp	r3, r2
 8103a1c:	d02c      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	4a22      	ldr	r2, [pc, #136]	; (8103aac <HAL_DMA_IRQHandler+0x6ac>)
 8103a24:	4293      	cmp	r3, r2
 8103a26:	d027      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	4a20      	ldr	r2, [pc, #128]	; (8103ab0 <HAL_DMA_IRQHandler+0x6b0>)
 8103a2e:	4293      	cmp	r3, r2
 8103a30:	d022      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	4a1f      	ldr	r2, [pc, #124]	; (8103ab4 <HAL_DMA_IRQHandler+0x6b4>)
 8103a38:	4293      	cmp	r3, r2
 8103a3a:	d01d      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	4a1d      	ldr	r2, [pc, #116]	; (8103ab8 <HAL_DMA_IRQHandler+0x6b8>)
 8103a42:	4293      	cmp	r3, r2
 8103a44:	d018      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	4a1c      	ldr	r2, [pc, #112]	; (8103abc <HAL_DMA_IRQHandler+0x6bc>)
 8103a4c:	4293      	cmp	r3, r2
 8103a4e:	d013      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	4a1a      	ldr	r2, [pc, #104]	; (8103ac0 <HAL_DMA_IRQHandler+0x6c0>)
 8103a56:	4293      	cmp	r3, r2
 8103a58:	d00e      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4a19      	ldr	r2, [pc, #100]	; (8103ac4 <HAL_DMA_IRQHandler+0x6c4>)
 8103a60:	4293      	cmp	r3, r2
 8103a62:	d009      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	4a17      	ldr	r2, [pc, #92]	; (8103ac8 <HAL_DMA_IRQHandler+0x6c8>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d004      	beq.n	8103a78 <HAL_DMA_IRQHandler+0x678>
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	4a16      	ldr	r2, [pc, #88]	; (8103acc <HAL_DMA_IRQHandler+0x6cc>)
 8103a74:	4293      	cmp	r3, r2
 8103a76:	d12b      	bne.n	8103ad0 <HAL_DMA_IRQHandler+0x6d0>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	f003 0310 	and.w	r3, r3, #16
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	bf14      	ite	ne
 8103a86:	2301      	movne	r3, #1
 8103a88:	2300      	moveq	r3, #0
 8103a8a:	b2db      	uxtb	r3, r3
 8103a8c:	e02a      	b.n	8103ae4 <HAL_DMA_IRQHandler+0x6e4>
 8103a8e:	bf00      	nop
 8103a90:	40020010 	.word	0x40020010
 8103a94:	40020028 	.word	0x40020028
 8103a98:	40020040 	.word	0x40020040
 8103a9c:	40020058 	.word	0x40020058
 8103aa0:	40020070 	.word	0x40020070
 8103aa4:	40020088 	.word	0x40020088
 8103aa8:	400200a0 	.word	0x400200a0
 8103aac:	400200b8 	.word	0x400200b8
 8103ab0:	40020410 	.word	0x40020410
 8103ab4:	40020428 	.word	0x40020428
 8103ab8:	40020440 	.word	0x40020440
 8103abc:	40020458 	.word	0x40020458
 8103ac0:	40020470 	.word	0x40020470
 8103ac4:	40020488 	.word	0x40020488
 8103ac8:	400204a0 	.word	0x400204a0
 8103acc:	400204b8 	.word	0x400204b8
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	f003 0302 	and.w	r3, r3, #2
 8103ada:	2b00      	cmp	r3, #0
 8103adc:	bf14      	ite	ne
 8103ade:	2301      	movne	r3, #1
 8103ae0:	2300      	moveq	r3, #0
 8103ae2:	b2db      	uxtb	r3, r3
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	f000 8087 	beq.w	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c82:	f003 031f 	and.w	r3, r3, #31
 8103c86:	2220      	movs	r2, #32
 8103c88:	409a      	lsls	r2, r3
 8103c8a:	6a3b      	ldr	r3, [r7, #32]
 8103c8c:	609a      	str	r2, [r3, #8]
=======
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103aee:	f003 031f 	and.w	r3, r3, #31
 8103af2:	2220      	movs	r2, #32
 8103af4:	409a      	lsls	r2, r3
 8103af6:	6a3b      	ldr	r3, [r7, #32]
 8103af8:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        if(HAL_DMA_STATE_ABORT == hdma->State)
<<<<<<< HEAD
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103c94:	b2db      	uxtb	r3, r3
 8103c96:	2b04      	cmp	r3, #4
 8103c98:	d139      	bne.n	8103d0e <HAL_DMA_IRQHandler+0x77a>
=======
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103b00:	b2db      	uxtb	r3, r3
 8103b02:	2b04      	cmp	r3, #4
 8103b04:	d139      	bne.n	8103b7a <HAL_DMA_IRQHandler+0x77a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	681a      	ldr	r2, [r3, #0]
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	f022 0216 	bic.w	r2, r2, #22
 8103ca8:	601a      	str	r2, [r3, #0]
=======
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	681a      	ldr	r2, [r3, #0]
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	f022 0216 	bic.w	r2, r2, #22
 8103b14:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
<<<<<<< HEAD
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	695a      	ldr	r2, [r3, #20]
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103cb8:	615a      	str	r2, [r3, #20]
=======
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	695a      	ldr	r2, [r3, #20]
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	681b      	ldr	r3, [r3, #0]
 8103b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103b24:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
<<<<<<< HEAD
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103cbe:	2b00      	cmp	r3, #0
 8103cc0:	d103      	bne.n	8103cca <HAL_DMA_IRQHandler+0x736>
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103cc6:	2b00      	cmp	r3, #0
 8103cc8:	d007      	beq.n	8103cda <HAL_DMA_IRQHandler+0x746>
=======
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b2a:	2b00      	cmp	r3, #0
 8103b2c:	d103      	bne.n	8103b36 <HAL_DMA_IRQHandler+0x736>
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103b32:	2b00      	cmp	r3, #0
 8103b34:	d007      	beq.n	8103b46 <HAL_DMA_IRQHandler+0x746>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
<<<<<<< HEAD
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	681a      	ldr	r2, [r3, #0]
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	f022 0208 	bic.w	r2, r2, #8
 8103cd8:	601a      	str	r2, [r3, #0]
=======
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	681a      	ldr	r2, [r3, #0]
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	f022 0208 	bic.w	r2, r2, #8
 8103b44:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cde:	f003 031f 	and.w	r3, r3, #31
 8103ce2:	223f      	movs	r2, #63	; 0x3f
 8103ce4:	409a      	lsls	r2, r3
 8103ce6:	6a3b      	ldr	r3, [r7, #32]
 8103ce8:	609a      	str	r2, [r3, #8]
=======
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b4a:	f003 031f 	and.w	r3, r3, #31
 8103b4e:	223f      	movs	r2, #63	; 0x3f
 8103b50:	409a      	lsls	r2, r3
 8103b52:	6a3b      	ldr	r3, [r7, #32]
 8103b54:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	2200      	movs	r2, #0
 8103cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	2200      	movs	r2, #0
 8103b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	2201      	movs	r2, #1
 8103cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	2201      	movs	r2, #1
 8103b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          if(hdma->XferAbortCallback != NULL)
<<<<<<< HEAD
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cfe:	2b00      	cmp	r3, #0
 8103d00:	f000 834a 	beq.w	8104398 <HAL_DMA_IRQHandler+0xe04>
=======
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b6a:	2b00      	cmp	r3, #0
 8103b6c:	f000 834a 	beq.w	8104204 <HAL_DMA_IRQHandler+0xe04>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            hdma->XferAbortCallback(hdma);
<<<<<<< HEAD
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d08:	6878      	ldr	r0, [r7, #4]
 8103d0a:	4798      	blx	r3
=======
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b74:	6878      	ldr	r0, [r7, #4]
 8103b76:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
          return;
<<<<<<< HEAD
 8103d0c:	e344      	b.n	8104398 <HAL_DMA_IRQHandler+0xe04>
=======
 8103b78:	e344      	b.n	8104204 <HAL_DMA_IRQHandler+0xe04>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
<<<<<<< HEAD
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103d18:	2b00      	cmp	r3, #0
 8103d1a:	d018      	beq.n	8103d4e <HAL_DMA_IRQHandler+0x7ba>
=======
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	681b      	ldr	r3, [r3, #0]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d018      	beq.n	8103bba <HAL_DMA_IRQHandler+0x7ba>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
<<<<<<< HEAD
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	681b      	ldr	r3, [r3, #0]
 8103d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103d26:	2b00      	cmp	r3, #0
 8103d28:	d108      	bne.n	8103d3c <HAL_DMA_IRQHandler+0x7a8>
=======
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	681b      	ldr	r3, [r3, #0]
 8103b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103b92:	2b00      	cmp	r3, #0
 8103b94:	d108      	bne.n	8103ba8 <HAL_DMA_IRQHandler+0x7a8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            if(hdma->XferM1CpltCallback != NULL)
<<<<<<< HEAD
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d2e:	2b00      	cmp	r3, #0
 8103d30:	d02c      	beq.n	8103d8c <HAL_DMA_IRQHandler+0x7f8>
=======
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103b9a:	2b00      	cmp	r3, #0
 8103b9c:	d02c      	beq.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
<<<<<<< HEAD
 8103d32:	687b      	ldr	r3, [r7, #4]
 8103d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d36:	6878      	ldr	r0, [r7, #4]
 8103d38:	4798      	blx	r3
 8103d3a:	e027      	b.n	8103d8c <HAL_DMA_IRQHandler+0x7f8>
=======
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ba2:	6878      	ldr	r0, [r7, #4]
 8103ba4:	4798      	blx	r3
 8103ba6:	e027      	b.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d40:	2b00      	cmp	r3, #0
 8103d42:	d023      	beq.n	8103d8c <HAL_DMA_IRQHandler+0x7f8>
=======
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bac:	2b00      	cmp	r3, #0
 8103bae:	d023      	beq.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
<<<<<<< HEAD
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d48:	6878      	ldr	r0, [r7, #4]
 8103d4a:	4798      	blx	r3
 8103d4c:	e01e      	b.n	8103d8c <HAL_DMA_IRQHandler+0x7f8>
=======
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bb4:	6878      	ldr	r0, [r7, #4]
 8103bb6:	4798      	blx	r3
 8103bb8:	e01e      	b.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
<<<<<<< HEAD
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	d10f      	bne.n	8103d7c <HAL_DMA_IRQHandler+0x7e8>
=======
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103bc4:	2b00      	cmp	r3, #0
 8103bc6:	d10f      	bne.n	8103be8 <HAL_DMA_IRQHandler+0x7e8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
<<<<<<< HEAD
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	681a      	ldr	r2, [r3, #0]
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	681b      	ldr	r3, [r3, #0]
 8103d66:	f022 0210 	bic.w	r2, r2, #16
 8103d6a:	601a      	str	r2, [r3, #0]
=======
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	681a      	ldr	r2, [r3, #0]
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	681b      	ldr	r3, [r3, #0]
 8103bd2:	f022 0210 	bic.w	r2, r2, #16
 8103bd6:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	2200      	movs	r2, #0
 8103d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	2200      	movs	r2, #0
 8103bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	2201      	movs	r2, #1
 8103d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	2201      	movs	r2, #1
 8103be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }

          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d80:	2b00      	cmp	r3, #0
 8103d82:	d003      	beq.n	8103d8c <HAL_DMA_IRQHandler+0x7f8>
=======
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bec:	2b00      	cmp	r3, #0
 8103bee:	d003      	beq.n	8103bf8 <HAL_DMA_IRQHandler+0x7f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
<<<<<<< HEAD
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d88:	6878      	ldr	r0, [r7, #4]
 8103d8a:	4798      	blx	r3
=======
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bf4:	6878      	ldr	r0, [r7, #4]
 8103bf6:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d90:	2b00      	cmp	r3, #0
 8103d92:	f000 8306 	beq.w	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	f000 8306 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
<<<<<<< HEAD
 8103d96:	687b      	ldr	r3, [r7, #4]
 8103d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d9a:	f003 0301 	and.w	r3, r3, #1
 8103d9e:	2b00      	cmp	r3, #0
 8103da0:	f000 8088 	beq.w	8103eb4 <HAL_DMA_IRQHandler+0x920>
=======
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c06:	f003 0301 	and.w	r3, r3, #1
 8103c0a:	2b00      	cmp	r3, #0
 8103c0c:	f000 8088 	beq.w	8103d20 <HAL_DMA_IRQHandler+0x920>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	2204      	movs	r2, #4
 8103da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	2204      	movs	r2, #4
 8103c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	4a7a      	ldr	r2, [pc, #488]	; (8103f9c <HAL_DMA_IRQHandler+0xa08>)
 8103db2:	4293      	cmp	r3, r2
 8103db4:	d04a      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	4a79      	ldr	r2, [pc, #484]	; (8103fa0 <HAL_DMA_IRQHandler+0xa0c>)
 8103dbc:	4293      	cmp	r3, r2
 8103dbe:	d045      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	4a77      	ldr	r2, [pc, #476]	; (8103fa4 <HAL_DMA_IRQHandler+0xa10>)
 8103dc6:	4293      	cmp	r3, r2
 8103dc8:	d040      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	4a76      	ldr	r2, [pc, #472]	; (8103fa8 <HAL_DMA_IRQHandler+0xa14>)
 8103dd0:	4293      	cmp	r3, r2
 8103dd2:	d03b      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	681b      	ldr	r3, [r3, #0]
 8103dd8:	4a74      	ldr	r2, [pc, #464]	; (8103fac <HAL_DMA_IRQHandler+0xa18>)
 8103dda:	4293      	cmp	r3, r2
 8103ddc:	d036      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	4a73      	ldr	r2, [pc, #460]	; (8103fb0 <HAL_DMA_IRQHandler+0xa1c>)
 8103de4:	4293      	cmp	r3, r2
 8103de6:	d031      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	4a71      	ldr	r2, [pc, #452]	; (8103fb4 <HAL_DMA_IRQHandler+0xa20>)
 8103dee:	4293      	cmp	r3, r2
 8103df0:	d02c      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	681b      	ldr	r3, [r3, #0]
 8103df6:	4a70      	ldr	r2, [pc, #448]	; (8103fb8 <HAL_DMA_IRQHandler+0xa24>)
 8103df8:	4293      	cmp	r3, r2
 8103dfa:	d027      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	4a6e      	ldr	r2, [pc, #440]	; (8103fbc <HAL_DMA_IRQHandler+0xa28>)
 8103e02:	4293      	cmp	r3, r2
 8103e04:	d022      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	681b      	ldr	r3, [r3, #0]
 8103e0a:	4a6d      	ldr	r2, [pc, #436]	; (8103fc0 <HAL_DMA_IRQHandler+0xa2c>)
 8103e0c:	4293      	cmp	r3, r2
 8103e0e:	d01d      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	4a6b      	ldr	r2, [pc, #428]	; (8103fc4 <HAL_DMA_IRQHandler+0xa30>)
 8103e16:	4293      	cmp	r3, r2
 8103e18:	d018      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	4a6a      	ldr	r2, [pc, #424]	; (8103fc8 <HAL_DMA_IRQHandler+0xa34>)
 8103e20:	4293      	cmp	r3, r2
 8103e22:	d013      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	4a68      	ldr	r2, [pc, #416]	; (8103fcc <HAL_DMA_IRQHandler+0xa38>)
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d00e      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	4a67      	ldr	r2, [pc, #412]	; (8103fd0 <HAL_DMA_IRQHandler+0xa3c>)
 8103e34:	4293      	cmp	r3, r2
 8103e36:	d009      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	4a65      	ldr	r2, [pc, #404]	; (8103fd4 <HAL_DMA_IRQHandler+0xa40>)
 8103e3e:	4293      	cmp	r3, r2
 8103e40:	d004      	beq.n	8103e4c <HAL_DMA_IRQHandler+0x8b8>
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	4a64      	ldr	r2, [pc, #400]	; (8103fd8 <HAL_DMA_IRQHandler+0xa44>)
 8103e48:	4293      	cmp	r3, r2
 8103e4a:	d108      	bne.n	8103e5e <HAL_DMA_IRQHandler+0x8ca>
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	681a      	ldr	r2, [r3, #0]
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	681b      	ldr	r3, [r3, #0]
 8103e56:	f022 0201 	bic.w	r2, r2, #1
 8103e5a:	601a      	str	r2, [r3, #0]
 8103e5c:	e007      	b.n	8103e6e <HAL_DMA_IRQHandler+0x8da>
 8103e5e:	687b      	ldr	r3, [r7, #4]
 8103e60:	681b      	ldr	r3, [r3, #0]
 8103e62:	681a      	ldr	r2, [r3, #0]
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	681b      	ldr	r3, [r3, #0]
 8103e68:	f022 0201 	bic.w	r2, r2, #1
 8103e6c:	601a      	str	r2, [r3, #0]
=======
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a7a      	ldr	r2, [pc, #488]	; (8103e08 <HAL_DMA_IRQHandler+0xa08>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d04a      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	681b      	ldr	r3, [r3, #0]
 8103c26:	4a79      	ldr	r2, [pc, #484]	; (8103e0c <HAL_DMA_IRQHandler+0xa0c>)
 8103c28:	4293      	cmp	r3, r2
 8103c2a:	d045      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a77      	ldr	r2, [pc, #476]	; (8103e10 <HAL_DMA_IRQHandler+0xa10>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d040      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a76      	ldr	r2, [pc, #472]	; (8103e14 <HAL_DMA_IRQHandler+0xa14>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d03b      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a74      	ldr	r2, [pc, #464]	; (8103e18 <HAL_DMA_IRQHandler+0xa18>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d036      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a73      	ldr	r2, [pc, #460]	; (8103e1c <HAL_DMA_IRQHandler+0xa1c>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d031      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a71      	ldr	r2, [pc, #452]	; (8103e20 <HAL_DMA_IRQHandler+0xa20>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d02c      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a70      	ldr	r2, [pc, #448]	; (8103e24 <HAL_DMA_IRQHandler+0xa24>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d027      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a6e      	ldr	r2, [pc, #440]	; (8103e28 <HAL_DMA_IRQHandler+0xa28>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d022      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a6d      	ldr	r2, [pc, #436]	; (8103e2c <HAL_DMA_IRQHandler+0xa2c>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d01d      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	4a6b      	ldr	r2, [pc, #428]	; (8103e30 <HAL_DMA_IRQHandler+0xa30>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d018      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4a6a      	ldr	r2, [pc, #424]	; (8103e34 <HAL_DMA_IRQHandler+0xa34>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d013      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	4a68      	ldr	r2, [pc, #416]	; (8103e38 <HAL_DMA_IRQHandler+0xa38>)
 8103c96:	4293      	cmp	r3, r2
 8103c98:	d00e      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	4a67      	ldr	r2, [pc, #412]	; (8103e3c <HAL_DMA_IRQHandler+0xa3c>)
 8103ca0:	4293      	cmp	r3, r2
 8103ca2:	d009      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a65      	ldr	r2, [pc, #404]	; (8103e40 <HAL_DMA_IRQHandler+0xa40>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d004      	beq.n	8103cb8 <HAL_DMA_IRQHandler+0x8b8>
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	4a64      	ldr	r2, [pc, #400]	; (8103e44 <HAL_DMA_IRQHandler+0xa44>)
 8103cb4:	4293      	cmp	r3, r2
 8103cb6:	d108      	bne.n	8103cca <HAL_DMA_IRQHandler+0x8ca>
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	681a      	ldr	r2, [r3, #0]
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	f022 0201 	bic.w	r2, r2, #1
 8103cc6:	601a      	str	r2, [r3, #0]
 8103cc8:	e007      	b.n	8103cda <HAL_DMA_IRQHandler+0x8da>
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	681a      	ldr	r2, [r3, #0]
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	f022 0201 	bic.w	r2, r2, #1
 8103cd8:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        do
        {
          if (++count > timeout)
<<<<<<< HEAD
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	3301      	adds	r3, #1
 8103e72:	60fb      	str	r3, [r7, #12]
 8103e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103e76:	429a      	cmp	r2, r3
 8103e78:	d307      	bcc.n	8103e8a <HAL_DMA_IRQHandler+0x8f6>
=======
 8103cda:	68fb      	ldr	r3, [r7, #12]
 8103cdc:	3301      	adds	r3, #1
 8103cde:	60fb      	str	r3, [r7, #12]
 8103ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103ce2:	429a      	cmp	r2, r3
 8103ce4:	d307      	bcc.n	8103cf6 <HAL_DMA_IRQHandler+0x8f6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
<<<<<<< HEAD
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	f003 0301 	and.w	r3, r3, #1
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	d1f2      	bne.n	8103e6e <HAL_DMA_IRQHandler+0x8da>
 8103e88:	e000      	b.n	8103e8c <HAL_DMA_IRQHandler+0x8f8>
=======
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	f003 0301 	and.w	r3, r3, #1
 8103cf0:	2b00      	cmp	r3, #0
 8103cf2:	d1f2      	bne.n	8103cda <HAL_DMA_IRQHandler+0x8da>
 8103cf4:	e000      	b.n	8103cf8 <HAL_DMA_IRQHandler+0x8f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            break;
<<<<<<< HEAD
 8103e8a:	bf00      	nop
=======
 8103cf6:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	2200      	movs	r2, #0
 8103e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	2200      	movs	r2, #0
 8103cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
<<<<<<< HEAD
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	681b      	ldr	r3, [r3, #0]
 8103e9a:	f003 0301 	and.w	r3, r3, #1
 8103e9e:	2b00      	cmp	r3, #0
 8103ea0:	d004      	beq.n	8103eac <HAL_DMA_IRQHandler+0x918>
=======
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	681b      	ldr	r3, [r3, #0]
 8103d04:	681b      	ldr	r3, [r3, #0]
 8103d06:	f003 0301 	and.w	r3, r3, #1
 8103d0a:	2b00      	cmp	r3, #0
 8103d0c:	d004      	beq.n	8103d18 <HAL_DMA_IRQHandler+0x918>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
<<<<<<< HEAD
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	2203      	movs	r2, #3
 8103ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103eaa:	e003      	b.n	8103eb4 <HAL_DMA_IRQHandler+0x920>
=======
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	2203      	movs	r2, #3
 8103d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103d16:	e003      	b.n	8103d20 <HAL_DMA_IRQHandler+0x920>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	2201      	movs	r2, #1
 8103eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	2201      	movs	r2, #1
 8103d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      }

      if(hdma->XferErrorCallback != NULL)
<<<<<<< HEAD
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	f000 8272 	beq.w	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d24:	2b00      	cmp	r3, #0
 8103d26:	f000 8272 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
<<<<<<< HEAD
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ec2:	6878      	ldr	r0, [r7, #4]
 8103ec4:	4798      	blx	r3
 8103ec6:	e26c      	b.n	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d2e:	6878      	ldr	r0, [r7, #4]
 8103d30:	4798      	blx	r3
 8103d32:	e26c      	b.n	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
<<<<<<< HEAD
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	4a43      	ldr	r2, [pc, #268]	; (8103fdc <HAL_DMA_IRQHandler+0xa48>)
 8103ece:	4293      	cmp	r3, r2
 8103ed0:	d022      	beq.n	8103f18 <HAL_DMA_IRQHandler+0x984>
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	681b      	ldr	r3, [r3, #0]
 8103ed6:	4a42      	ldr	r2, [pc, #264]	; (8103fe0 <HAL_DMA_IRQHandler+0xa4c>)
 8103ed8:	4293      	cmp	r3, r2
 8103eda:	d01d      	beq.n	8103f18 <HAL_DMA_IRQHandler+0x984>
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	4a40      	ldr	r2, [pc, #256]	; (8103fe4 <HAL_DMA_IRQHandler+0xa50>)
 8103ee2:	4293      	cmp	r3, r2
 8103ee4:	d018      	beq.n	8103f18 <HAL_DMA_IRQHandler+0x984>
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	681b      	ldr	r3, [r3, #0]
 8103eea:	4a3f      	ldr	r2, [pc, #252]	; (8103fe8 <HAL_DMA_IRQHandler+0xa54>)
 8103eec:	4293      	cmp	r3, r2
 8103eee:	d013      	beq.n	8103f18 <HAL_DMA_IRQHandler+0x984>
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	4a3d      	ldr	r2, [pc, #244]	; (8103fec <HAL_DMA_IRQHandler+0xa58>)
 8103ef6:	4293      	cmp	r3, r2
 8103ef8:	d00e      	beq.n	8103f18 <HAL_DMA_IRQHandler+0x984>
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	4a3c      	ldr	r2, [pc, #240]	; (8103ff0 <HAL_DMA_IRQHandler+0xa5c>)
 8103f00:	4293      	cmp	r3, r2
 8103f02:	d009      	beq.n	8103f18 <HAL_DMA_IRQHandler+0x984>
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	681b      	ldr	r3, [r3, #0]
 8103f08:	4a3a      	ldr	r2, [pc, #232]	; (8103ff4 <HAL_DMA_IRQHandler+0xa60>)
 8103f0a:	4293      	cmp	r3, r2
 8103f0c:	d004      	beq.n	8103f18 <HAL_DMA_IRQHandler+0x984>
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	681b      	ldr	r3, [r3, #0]
 8103f12:	4a39      	ldr	r2, [pc, #228]	; (8103ff8 <HAL_DMA_IRQHandler+0xa64>)
 8103f14:	4293      	cmp	r3, r2
 8103f16:	d101      	bne.n	8103f1c <HAL_DMA_IRQHandler+0x988>
 8103f18:	2301      	movs	r3, #1
 8103f1a:	e000      	b.n	8103f1e <HAL_DMA_IRQHandler+0x98a>
 8103f1c:	2300      	movs	r3, #0
 8103f1e:	2b00      	cmp	r3, #0
 8103f20:	f000 823f 	beq.w	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	4a43      	ldr	r2, [pc, #268]	; (8103e48 <HAL_DMA_IRQHandler+0xa48>)
 8103d3a:	4293      	cmp	r3, r2
 8103d3c:	d022      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	681b      	ldr	r3, [r3, #0]
 8103d42:	4a42      	ldr	r2, [pc, #264]	; (8103e4c <HAL_DMA_IRQHandler+0xa4c>)
 8103d44:	4293      	cmp	r3, r2
 8103d46:	d01d      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	4a40      	ldr	r2, [pc, #256]	; (8103e50 <HAL_DMA_IRQHandler+0xa50>)
 8103d4e:	4293      	cmp	r3, r2
 8103d50:	d018      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	4a3f      	ldr	r2, [pc, #252]	; (8103e54 <HAL_DMA_IRQHandler+0xa54>)
 8103d58:	4293      	cmp	r3, r2
 8103d5a:	d013      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	4a3d      	ldr	r2, [pc, #244]	; (8103e58 <HAL_DMA_IRQHandler+0xa58>)
 8103d62:	4293      	cmp	r3, r2
 8103d64:	d00e      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	4a3c      	ldr	r2, [pc, #240]	; (8103e5c <HAL_DMA_IRQHandler+0xa5c>)
 8103d6c:	4293      	cmp	r3, r2
 8103d6e:	d009      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	4a3a      	ldr	r2, [pc, #232]	; (8103e60 <HAL_DMA_IRQHandler+0xa60>)
 8103d76:	4293      	cmp	r3, r2
 8103d78:	d004      	beq.n	8103d84 <HAL_DMA_IRQHandler+0x984>
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	4a39      	ldr	r2, [pc, #228]	; (8103e64 <HAL_DMA_IRQHandler+0xa64>)
 8103d80:	4293      	cmp	r3, r2
 8103d82:	d101      	bne.n	8103d88 <HAL_DMA_IRQHandler+0x988>
 8103d84:	2301      	movs	r3, #1
 8103d86:	e000      	b.n	8103d8a <HAL_DMA_IRQHandler+0x98a>
 8103d88:	2300      	movs	r3, #0
 8103d8a:	2b00      	cmp	r3, #0
 8103d8c:	f000 823f 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
<<<<<<< HEAD
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	681b      	ldr	r3, [r3, #0]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	613b      	str	r3, [r7, #16]
=======
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
<<<<<<< HEAD
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f30:	f003 031f 	and.w	r3, r3, #31
 8103f34:	2204      	movs	r2, #4
 8103f36:	409a      	lsls	r2, r3
 8103f38:	697b      	ldr	r3, [r7, #20]
 8103f3a:	4013      	ands	r3, r2
 8103f3c:	2b00      	cmp	r3, #0
 8103f3e:	f000 80cd 	beq.w	81040dc <HAL_DMA_IRQHandler+0xb48>
 8103f42:	693b      	ldr	r3, [r7, #16]
 8103f44:	f003 0304 	and.w	r3, r3, #4
 8103f48:	2b00      	cmp	r3, #0
 8103f4a:	f000 80c7 	beq.w	81040dc <HAL_DMA_IRQHandler+0xb48>
=======
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d9c:	f003 031f 	and.w	r3, r3, #31
 8103da0:	2204      	movs	r2, #4
 8103da2:	409a      	lsls	r2, r3
 8103da4:	697b      	ldr	r3, [r7, #20]
 8103da6:	4013      	ands	r3, r2
 8103da8:	2b00      	cmp	r3, #0
 8103daa:	f000 80cd 	beq.w	8103f48 <HAL_DMA_IRQHandler+0xb48>
 8103dae:	693b      	ldr	r3, [r7, #16]
 8103db0:	f003 0304 	and.w	r3, r3, #4
 8103db4:	2b00      	cmp	r3, #0
 8103db6:	f000 80c7 	beq.w	8103f48 <HAL_DMA_IRQHandler+0xb48>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
<<<<<<< HEAD
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f52:	f003 031f 	and.w	r3, r3, #31
 8103f56:	2204      	movs	r2, #4
 8103f58:	409a      	lsls	r2, r3
 8103f5a:	69fb      	ldr	r3, [r7, #28]
 8103f5c:	605a      	str	r2, [r3, #4]
=======
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dbe:	f003 031f 	and.w	r3, r3, #31
 8103dc2:	2204      	movs	r2, #4
 8103dc4:	409a      	lsls	r2, r3
 8103dc6:	69fb      	ldr	r3, [r7, #28]
 8103dc8:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 8103f5e:	693b      	ldr	r3, [r7, #16]
 8103f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d049      	beq.n	8103ffc <HAL_DMA_IRQHandler+0xa68>
=======
 8103dca:	693b      	ldr	r3, [r7, #16]
 8103dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d049      	beq.n	8103e68 <HAL_DMA_IRQHandler+0xa68>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
<<<<<<< HEAD
 8103f68:	693b      	ldr	r3, [r7, #16]
 8103f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103f6e:	2b00      	cmp	r3, #0
 8103f70:	d109      	bne.n	8103f86 <HAL_DMA_IRQHandler+0x9f2>
=======
 8103dd4:	693b      	ldr	r3, [r7, #16]
 8103dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d109      	bne.n	8103df2 <HAL_DMA_IRQHandler+0x9f2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103f76:	2b00      	cmp	r3, #0
 8103f78:	f000 8210 	beq.w	810439c <HAL_DMA_IRQHandler+0xe08>
=======
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103de2:	2b00      	cmp	r3, #0
 8103de4:	f000 8210 	beq.w	8104208 <HAL_DMA_IRQHandler+0xe08>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
<<<<<<< HEAD
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103f80:	6878      	ldr	r0, [r7, #4]
 8103f82:	4798      	blx	r3
=======
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103dec:	6878      	ldr	r0, [r7, #4]
 8103dee:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 8103f84:	e20a      	b.n	810439c <HAL_DMA_IRQHandler+0xe08>
=======
 8103df0:	e20a      	b.n	8104208 <HAL_DMA_IRQHandler+0xe08>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	f000 8206 	beq.w	810439c <HAL_DMA_IRQHandler+0xe08>
=======
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103df6:	2b00      	cmp	r3, #0
 8103df8:	f000 8206 	beq.w	8104208 <HAL_DMA_IRQHandler+0xe08>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f94:	6878      	ldr	r0, [r7, #4]
 8103f96:	4798      	blx	r3
=======
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e00:	6878      	ldr	r0, [r7, #4]
 8103e02:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 8103f98:	e200      	b.n	810439c <HAL_DMA_IRQHandler+0xe08>
 8103f9a:	bf00      	nop
 8103f9c:	40020010 	.word	0x40020010
 8103fa0:	40020028 	.word	0x40020028
 8103fa4:	40020040 	.word	0x40020040
 8103fa8:	40020058 	.word	0x40020058
 8103fac:	40020070 	.word	0x40020070
 8103fb0:	40020088 	.word	0x40020088
 8103fb4:	400200a0 	.word	0x400200a0
 8103fb8:	400200b8 	.word	0x400200b8
 8103fbc:	40020410 	.word	0x40020410
 8103fc0:	40020428 	.word	0x40020428
 8103fc4:	40020440 	.word	0x40020440
 8103fc8:	40020458 	.word	0x40020458
 8103fcc:	40020470 	.word	0x40020470
 8103fd0:	40020488 	.word	0x40020488
 8103fd4:	400204a0 	.word	0x400204a0
 8103fd8:	400204b8 	.word	0x400204b8
 8103fdc:	58025408 	.word	0x58025408
 8103fe0:	5802541c 	.word	0x5802541c
 8103fe4:	58025430 	.word	0x58025430
 8103fe8:	58025444 	.word	0x58025444
 8103fec:	58025458 	.word	0x58025458
 8103ff0:	5802546c 	.word	0x5802546c
 8103ff4:	58025480 	.word	0x58025480
 8103ff8:	58025494 	.word	0x58025494
=======
 8103e04:	e200      	b.n	8104208 <HAL_DMA_IRQHandler+0xe08>
 8103e06:	bf00      	nop
 8103e08:	40020010 	.word	0x40020010
 8103e0c:	40020028 	.word	0x40020028
 8103e10:	40020040 	.word	0x40020040
 8103e14:	40020058 	.word	0x40020058
 8103e18:	40020070 	.word	0x40020070
 8103e1c:	40020088 	.word	0x40020088
 8103e20:	400200a0 	.word	0x400200a0
 8103e24:	400200b8 	.word	0x400200b8
 8103e28:	40020410 	.word	0x40020410
 8103e2c:	40020428 	.word	0x40020428
 8103e30:	40020440 	.word	0x40020440
 8103e34:	40020458 	.word	0x40020458
 8103e38:	40020470 	.word	0x40020470
 8103e3c:	40020488 	.word	0x40020488
 8103e40:	400204a0 	.word	0x400204a0
 8103e44:	400204b8 	.word	0x400204b8
 8103e48:	58025408 	.word	0x58025408
 8103e4c:	5802541c 	.word	0x5802541c
 8103e50:	58025430 	.word	0x58025430
 8103e54:	58025444 	.word	0x58025444
 8103e58:	58025458 	.word	0x58025458
 8103e5c:	5802546c 	.word	0x5802546c
 8103e60:	58025480 	.word	0x58025480
 8103e64:	58025494 	.word	0x58025494
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
<<<<<<< HEAD
 8103ffc:	693b      	ldr	r3, [r7, #16]
 8103ffe:	f003 0320 	and.w	r3, r3, #32
 8104002:	2b00      	cmp	r3, #0
 8104004:	d160      	bne.n	81040c8 <HAL_DMA_IRQHandler+0xb34>
=======
 8103e68:	693b      	ldr	r3, [r7, #16]
 8103e6a:	f003 0320 	and.w	r3, r3, #32
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d160      	bne.n	8103f34 <HAL_DMA_IRQHandler+0xb34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	4a8c      	ldr	r2, [pc, #560]	; (810423c <HAL_DMA_IRQHandler+0xca8>)
 810400c:	4293      	cmp	r3, r2
 810400e:	d04a      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	4a8a      	ldr	r2, [pc, #552]	; (8104240 <HAL_DMA_IRQHandler+0xcac>)
 8104016:	4293      	cmp	r3, r2
 8104018:	d045      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	4a89      	ldr	r2, [pc, #548]	; (8104244 <HAL_DMA_IRQHandler+0xcb0>)
 8104020:	4293      	cmp	r3, r2
 8104022:	d040      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	4a87      	ldr	r2, [pc, #540]	; (8104248 <HAL_DMA_IRQHandler+0xcb4>)
 810402a:	4293      	cmp	r3, r2
 810402c:	d03b      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	4a86      	ldr	r2, [pc, #536]	; (810424c <HAL_DMA_IRQHandler+0xcb8>)
 8104034:	4293      	cmp	r3, r2
 8104036:	d036      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	4a84      	ldr	r2, [pc, #528]	; (8104250 <HAL_DMA_IRQHandler+0xcbc>)
 810403e:	4293      	cmp	r3, r2
 8104040:	d031      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	4a83      	ldr	r2, [pc, #524]	; (8104254 <HAL_DMA_IRQHandler+0xcc0>)
 8104048:	4293      	cmp	r3, r2
 810404a:	d02c      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	4a81      	ldr	r2, [pc, #516]	; (8104258 <HAL_DMA_IRQHandler+0xcc4>)
 8104052:	4293      	cmp	r3, r2
 8104054:	d027      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a80      	ldr	r2, [pc, #512]	; (810425c <HAL_DMA_IRQHandler+0xcc8>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d022      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	4a7e      	ldr	r2, [pc, #504]	; (8104260 <HAL_DMA_IRQHandler+0xccc>)
 8104066:	4293      	cmp	r3, r2
 8104068:	d01d      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	4a7d      	ldr	r2, [pc, #500]	; (8104264 <HAL_DMA_IRQHandler+0xcd0>)
 8104070:	4293      	cmp	r3, r2
 8104072:	d018      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	4a7b      	ldr	r2, [pc, #492]	; (8104268 <HAL_DMA_IRQHandler+0xcd4>)
 810407a:	4293      	cmp	r3, r2
 810407c:	d013      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	4a7a      	ldr	r2, [pc, #488]	; (810426c <HAL_DMA_IRQHandler+0xcd8>)
 8104084:	4293      	cmp	r3, r2
 8104086:	d00e      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	4a78      	ldr	r2, [pc, #480]	; (8104270 <HAL_DMA_IRQHandler+0xcdc>)
 810408e:	4293      	cmp	r3, r2
 8104090:	d009      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	4a77      	ldr	r2, [pc, #476]	; (8104274 <HAL_DMA_IRQHandler+0xce0>)
 8104098:	4293      	cmp	r3, r2
 810409a:	d004      	beq.n	81040a6 <HAL_DMA_IRQHandler+0xb12>
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a75      	ldr	r2, [pc, #468]	; (8104278 <HAL_DMA_IRQHandler+0xce4>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d108      	bne.n	81040b8 <HAL_DMA_IRQHandler+0xb24>
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	681a      	ldr	r2, [r3, #0]
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	f022 0208 	bic.w	r2, r2, #8
 81040b4:	601a      	str	r2, [r3, #0]
 81040b6:	e007      	b.n	81040c8 <HAL_DMA_IRQHandler+0xb34>
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	681b      	ldr	r3, [r3, #0]
 81040bc:	681a      	ldr	r2, [r3, #0]
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	681b      	ldr	r3, [r3, #0]
 81040c2:	f022 0204 	bic.w	r2, r2, #4
 81040c6:	601a      	str	r2, [r3, #0]
=======
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	681b      	ldr	r3, [r3, #0]
 8103e76:	4a8c      	ldr	r2, [pc, #560]	; (81040a8 <HAL_DMA_IRQHandler+0xca8>)
 8103e78:	4293      	cmp	r3, r2
 8103e7a:	d04a      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	4a8a      	ldr	r2, [pc, #552]	; (81040ac <HAL_DMA_IRQHandler+0xcac>)
 8103e82:	4293      	cmp	r3, r2
 8103e84:	d045      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	4a89      	ldr	r2, [pc, #548]	; (81040b0 <HAL_DMA_IRQHandler+0xcb0>)
 8103e8c:	4293      	cmp	r3, r2
 8103e8e:	d040      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	4a87      	ldr	r2, [pc, #540]	; (81040b4 <HAL_DMA_IRQHandler+0xcb4>)
 8103e96:	4293      	cmp	r3, r2
 8103e98:	d03b      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	4a86      	ldr	r2, [pc, #536]	; (81040b8 <HAL_DMA_IRQHandler+0xcb8>)
 8103ea0:	4293      	cmp	r3, r2
 8103ea2:	d036      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	4a84      	ldr	r2, [pc, #528]	; (81040bc <HAL_DMA_IRQHandler+0xcbc>)
 8103eaa:	4293      	cmp	r3, r2
 8103eac:	d031      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	681b      	ldr	r3, [r3, #0]
 8103eb2:	4a83      	ldr	r2, [pc, #524]	; (81040c0 <HAL_DMA_IRQHandler+0xcc0>)
 8103eb4:	4293      	cmp	r3, r2
 8103eb6:	d02c      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	4a81      	ldr	r2, [pc, #516]	; (81040c4 <HAL_DMA_IRQHandler+0xcc4>)
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	d027      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	4a80      	ldr	r2, [pc, #512]	; (81040c8 <HAL_DMA_IRQHandler+0xcc8>)
 8103ec8:	4293      	cmp	r3, r2
 8103eca:	d022      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	4a7e      	ldr	r2, [pc, #504]	; (81040cc <HAL_DMA_IRQHandler+0xccc>)
 8103ed2:	4293      	cmp	r3, r2
 8103ed4:	d01d      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	4a7d      	ldr	r2, [pc, #500]	; (81040d0 <HAL_DMA_IRQHandler+0xcd0>)
 8103edc:	4293      	cmp	r3, r2
 8103ede:	d018      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	4a7b      	ldr	r2, [pc, #492]	; (81040d4 <HAL_DMA_IRQHandler+0xcd4>)
 8103ee6:	4293      	cmp	r3, r2
 8103ee8:	d013      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	4a7a      	ldr	r2, [pc, #488]	; (81040d8 <HAL_DMA_IRQHandler+0xcd8>)
 8103ef0:	4293      	cmp	r3, r2
 8103ef2:	d00e      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	4a78      	ldr	r2, [pc, #480]	; (81040dc <HAL_DMA_IRQHandler+0xcdc>)
 8103efa:	4293      	cmp	r3, r2
 8103efc:	d009      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	681b      	ldr	r3, [r3, #0]
 8103f02:	4a77      	ldr	r2, [pc, #476]	; (81040e0 <HAL_DMA_IRQHandler+0xce0>)
 8103f04:	4293      	cmp	r3, r2
 8103f06:	d004      	beq.n	8103f12 <HAL_DMA_IRQHandler+0xb12>
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	4a75      	ldr	r2, [pc, #468]	; (81040e4 <HAL_DMA_IRQHandler+0xce4>)
 8103f0e:	4293      	cmp	r3, r2
 8103f10:	d108      	bne.n	8103f24 <HAL_DMA_IRQHandler+0xb24>
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	681a      	ldr	r2, [r3, #0]
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	681b      	ldr	r3, [r3, #0]
 8103f1c:	f022 0208 	bic.w	r2, r2, #8
 8103f20:	601a      	str	r2, [r3, #0]
 8103f22:	e007      	b.n	8103f34 <HAL_DMA_IRQHandler+0xb34>
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	681b      	ldr	r3, [r3, #0]
 8103f28:	681a      	ldr	r2, [r3, #0]
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	681b      	ldr	r3, [r3, #0]
 8103f2e:	f022 0204 	bic.w	r2, r2, #4
 8103f32:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81040cc:	2b00      	cmp	r3, #0
 81040ce:	f000 8165 	beq.w	810439c <HAL_DMA_IRQHandler+0xe08>
=======
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f38:	2b00      	cmp	r3, #0
 8103f3a:	f000 8165 	beq.w	8104208 <HAL_DMA_IRQHandler+0xe08>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81040d6:	6878      	ldr	r0, [r7, #4]
 81040d8:	4798      	blx	r3
=======
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f42:	6878      	ldr	r0, [r7, #4]
 8103f44:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 81040da:	e15f      	b.n	810439c <HAL_DMA_IRQHandler+0xe08>
=======
 8103f46:	e15f      	b.n	8104208 <HAL_DMA_IRQHandler+0xe08>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
<<<<<<< HEAD
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81040e0:	f003 031f 	and.w	r3, r3, #31
 81040e4:	2202      	movs	r2, #2
 81040e6:	409a      	lsls	r2, r3
 81040e8:	697b      	ldr	r3, [r7, #20]
 81040ea:	4013      	ands	r3, r2
 81040ec:	2b00      	cmp	r3, #0
 81040ee:	f000 80c5 	beq.w	810427c <HAL_DMA_IRQHandler+0xce8>
 81040f2:	693b      	ldr	r3, [r7, #16]
 81040f4:	f003 0302 	and.w	r3, r3, #2
 81040f8:	2b00      	cmp	r3, #0
 81040fa:	f000 80bf 	beq.w	810427c <HAL_DMA_IRQHandler+0xce8>
=======
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f4c:	f003 031f 	and.w	r3, r3, #31
 8103f50:	2202      	movs	r2, #2
 8103f52:	409a      	lsls	r2, r3
 8103f54:	697b      	ldr	r3, [r7, #20]
 8103f56:	4013      	ands	r3, r2
 8103f58:	2b00      	cmp	r3, #0
 8103f5a:	f000 80c5 	beq.w	81040e8 <HAL_DMA_IRQHandler+0xce8>
 8103f5e:	693b      	ldr	r3, [r7, #16]
 8103f60:	f003 0302 	and.w	r3, r3, #2
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	f000 80bf 	beq.w	81040e8 <HAL_DMA_IRQHandler+0xce8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 81040fe:	687b      	ldr	r3, [r7, #4]
 8104100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104102:	f003 031f 	and.w	r3, r3, #31
 8104106:	2202      	movs	r2, #2
 8104108:	409a      	lsls	r2, r3
 810410a:	69fb      	ldr	r3, [r7, #28]
 810410c:	605a      	str	r2, [r3, #4]
=======
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f6e:	f003 031f 	and.w	r3, r3, #31
 8103f72:	2202      	movs	r2, #2
 8103f74:	409a      	lsls	r2, r3
 8103f76:	69fb      	ldr	r3, [r7, #28]
 8103f78:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 810410e:	693b      	ldr	r3, [r7, #16]
 8104110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104114:	2b00      	cmp	r3, #0
 8104116:	d018      	beq.n	810414a <HAL_DMA_IRQHandler+0xbb6>
=======
 8103f7a:	693b      	ldr	r3, [r7, #16]
 8103f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103f80:	2b00      	cmp	r3, #0
 8103f82:	d018      	beq.n	8103fb6 <HAL_DMA_IRQHandler+0xbb6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
<<<<<<< HEAD
 8104118:	693b      	ldr	r3, [r7, #16]
 810411a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810411e:	2b00      	cmp	r3, #0
 8104120:	d109      	bne.n	8104136 <HAL_DMA_IRQHandler+0xba2>
=======
 8103f84:	693b      	ldr	r3, [r7, #16]
 8103f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d109      	bne.n	8103fa2 <HAL_DMA_IRQHandler+0xba2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          if(hdma->XferM1CpltCallback != NULL)
<<<<<<< HEAD
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104126:	2b00      	cmp	r3, #0
 8104128:	f000 813a 	beq.w	81043a0 <HAL_DMA_IRQHandler+0xe0c>
=======
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f92:	2b00      	cmp	r3, #0
 8103f94:	f000 813a 	beq.w	810420c <HAL_DMA_IRQHandler+0xe0c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
<<<<<<< HEAD
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104130:	6878      	ldr	r0, [r7, #4]
 8104132:	4798      	blx	r3
=======
 8103f98:	687b      	ldr	r3, [r7, #4]
 8103f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f9c:	6878      	ldr	r0, [r7, #4]
 8103f9e:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 8104134:	e134      	b.n	81043a0 <HAL_DMA_IRQHandler+0xe0c>
=======
 8103fa0:	e134      	b.n	810420c <HAL_DMA_IRQHandler+0xe0c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810413a:	2b00      	cmp	r3, #0
 810413c:	f000 8130 	beq.w	81043a0 <HAL_DMA_IRQHandler+0xe0c>
=======
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103fa6:	2b00      	cmp	r3, #0
 8103fa8:	f000 8130 	beq.w	810420c <HAL_DMA_IRQHandler+0xe0c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
<<<<<<< HEAD
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104144:	6878      	ldr	r0, [r7, #4]
 8104146:	4798      	blx	r3
=======
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103fb0:	6878      	ldr	r0, [r7, #4]
 8103fb2:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 8104148:	e12a      	b.n	81043a0 <HAL_DMA_IRQHandler+0xe0c>
=======
 8103fb4:	e12a      	b.n	810420c <HAL_DMA_IRQHandler+0xe0c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
<<<<<<< HEAD
 810414a:	693b      	ldr	r3, [r7, #16]
 810414c:	f003 0320 	and.w	r3, r3, #32
 8104150:	2b00      	cmp	r3, #0
 8104152:	d168      	bne.n	8104226 <HAL_DMA_IRQHandler+0xc92>
=======
 8103fb6:	693b      	ldr	r3, [r7, #16]
 8103fb8:	f003 0320 	and.w	r3, r3, #32
 8103fbc:	2b00      	cmp	r3, #0
 8103fbe:	d168      	bne.n	8104092 <HAL_DMA_IRQHandler+0xc92>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
<<<<<<< HEAD
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	4a38      	ldr	r2, [pc, #224]	; (810423c <HAL_DMA_IRQHandler+0xca8>)
 810415a:	4293      	cmp	r3, r2
 810415c:	d04a      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	681b      	ldr	r3, [r3, #0]
 8104162:	4a37      	ldr	r2, [pc, #220]	; (8104240 <HAL_DMA_IRQHandler+0xcac>)
 8104164:	4293      	cmp	r3, r2
 8104166:	d045      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	4a35      	ldr	r2, [pc, #212]	; (8104244 <HAL_DMA_IRQHandler+0xcb0>)
 810416e:	4293      	cmp	r3, r2
 8104170:	d040      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	4a34      	ldr	r2, [pc, #208]	; (8104248 <HAL_DMA_IRQHandler+0xcb4>)
 8104178:	4293      	cmp	r3, r2
 810417a:	d03b      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	4a32      	ldr	r2, [pc, #200]	; (810424c <HAL_DMA_IRQHandler+0xcb8>)
 8104182:	4293      	cmp	r3, r2
 8104184:	d036      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	4a31      	ldr	r2, [pc, #196]	; (8104250 <HAL_DMA_IRQHandler+0xcbc>)
 810418c:	4293      	cmp	r3, r2
 810418e:	d031      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	4a2f      	ldr	r2, [pc, #188]	; (8104254 <HAL_DMA_IRQHandler+0xcc0>)
 8104196:	4293      	cmp	r3, r2
 8104198:	d02c      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 810419a:	687b      	ldr	r3, [r7, #4]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	4a2e      	ldr	r2, [pc, #184]	; (8104258 <HAL_DMA_IRQHandler+0xcc4>)
 81041a0:	4293      	cmp	r3, r2
 81041a2:	d027      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 81041a4:	687b      	ldr	r3, [r7, #4]
 81041a6:	681b      	ldr	r3, [r3, #0]
 81041a8:	4a2c      	ldr	r2, [pc, #176]	; (810425c <HAL_DMA_IRQHandler+0xcc8>)
 81041aa:	4293      	cmp	r3, r2
 81041ac:	d022      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	4a2b      	ldr	r2, [pc, #172]	; (8104260 <HAL_DMA_IRQHandler+0xccc>)
 81041b4:	4293      	cmp	r3, r2
 81041b6:	d01d      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	4a29      	ldr	r2, [pc, #164]	; (8104264 <HAL_DMA_IRQHandler+0xcd0>)
 81041be:	4293      	cmp	r3, r2
 81041c0:	d018      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 81041c2:	687b      	ldr	r3, [r7, #4]
 81041c4:	681b      	ldr	r3, [r3, #0]
 81041c6:	4a28      	ldr	r2, [pc, #160]	; (8104268 <HAL_DMA_IRQHandler+0xcd4>)
 81041c8:	4293      	cmp	r3, r2
 81041ca:	d013      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	4a26      	ldr	r2, [pc, #152]	; (810426c <HAL_DMA_IRQHandler+0xcd8>)
 81041d2:	4293      	cmp	r3, r2
 81041d4:	d00e      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	4a25      	ldr	r2, [pc, #148]	; (8104270 <HAL_DMA_IRQHandler+0xcdc>)
 81041dc:	4293      	cmp	r3, r2
 81041de:	d009      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 81041e0:	687b      	ldr	r3, [r7, #4]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	4a23      	ldr	r2, [pc, #140]	; (8104274 <HAL_DMA_IRQHandler+0xce0>)
 81041e6:	4293      	cmp	r3, r2
 81041e8:	d004      	beq.n	81041f4 <HAL_DMA_IRQHandler+0xc60>
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	4a22      	ldr	r2, [pc, #136]	; (8104278 <HAL_DMA_IRQHandler+0xce4>)
 81041f0:	4293      	cmp	r3, r2
 81041f2:	d108      	bne.n	8104206 <HAL_DMA_IRQHandler+0xc72>
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	681a      	ldr	r2, [r3, #0]
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	f022 0214 	bic.w	r2, r2, #20
 8104202:	601a      	str	r2, [r3, #0]
 8104204:	e007      	b.n	8104216 <HAL_DMA_IRQHandler+0xc82>
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	681b      	ldr	r3, [r3, #0]
 810420a:	681a      	ldr	r2, [r3, #0]
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	f022 020a 	bic.w	r2, r2, #10
 8104214:	601a      	str	r2, [r3, #0]
=======
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	4a38      	ldr	r2, [pc, #224]	; (81040a8 <HAL_DMA_IRQHandler+0xca8>)
 8103fc6:	4293      	cmp	r3, r2
 8103fc8:	d04a      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	681b      	ldr	r3, [r3, #0]
 8103fce:	4a37      	ldr	r2, [pc, #220]	; (81040ac <HAL_DMA_IRQHandler+0xcac>)
 8103fd0:	4293      	cmp	r3, r2
 8103fd2:	d045      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	4a35      	ldr	r2, [pc, #212]	; (81040b0 <HAL_DMA_IRQHandler+0xcb0>)
 8103fda:	4293      	cmp	r3, r2
 8103fdc:	d040      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103fde:	687b      	ldr	r3, [r7, #4]
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	4a34      	ldr	r2, [pc, #208]	; (81040b4 <HAL_DMA_IRQHandler+0xcb4>)
 8103fe4:	4293      	cmp	r3, r2
 8103fe6:	d03b      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	4a32      	ldr	r2, [pc, #200]	; (81040b8 <HAL_DMA_IRQHandler+0xcb8>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d036      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	4a31      	ldr	r2, [pc, #196]	; (81040bc <HAL_DMA_IRQHandler+0xcbc>)
 8103ff8:	4293      	cmp	r3, r2
 8103ffa:	d031      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	4a2f      	ldr	r2, [pc, #188]	; (81040c0 <HAL_DMA_IRQHandler+0xcc0>)
 8104002:	4293      	cmp	r3, r2
 8104004:	d02c      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	4a2e      	ldr	r2, [pc, #184]	; (81040c4 <HAL_DMA_IRQHandler+0xcc4>)
 810400c:	4293      	cmp	r3, r2
 810400e:	d027      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	4a2c      	ldr	r2, [pc, #176]	; (81040c8 <HAL_DMA_IRQHandler+0xcc8>)
 8104016:	4293      	cmp	r3, r2
 8104018:	d022      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	4a2b      	ldr	r2, [pc, #172]	; (81040cc <HAL_DMA_IRQHandler+0xccc>)
 8104020:	4293      	cmp	r3, r2
 8104022:	d01d      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	4a29      	ldr	r2, [pc, #164]	; (81040d0 <HAL_DMA_IRQHandler+0xcd0>)
 810402a:	4293      	cmp	r3, r2
 810402c:	d018      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	4a28      	ldr	r2, [pc, #160]	; (81040d4 <HAL_DMA_IRQHandler+0xcd4>)
 8104034:	4293      	cmp	r3, r2
 8104036:	d013      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	4a26      	ldr	r2, [pc, #152]	; (81040d8 <HAL_DMA_IRQHandler+0xcd8>)
 810403e:	4293      	cmp	r3, r2
 8104040:	d00e      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	4a25      	ldr	r2, [pc, #148]	; (81040dc <HAL_DMA_IRQHandler+0xcdc>)
 8104048:	4293      	cmp	r3, r2
 810404a:	d009      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	4a23      	ldr	r2, [pc, #140]	; (81040e0 <HAL_DMA_IRQHandler+0xce0>)
 8104052:	4293      	cmp	r3, r2
 8104054:	d004      	beq.n	8104060 <HAL_DMA_IRQHandler+0xc60>
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a22      	ldr	r2, [pc, #136]	; (81040e4 <HAL_DMA_IRQHandler+0xce4>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d108      	bne.n	8104072 <HAL_DMA_IRQHandler+0xc72>
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	681a      	ldr	r2, [r3, #0]
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	f022 0214 	bic.w	r2, r2, #20
 810406e:	601a      	str	r2, [r3, #0]
 8104070:	e007      	b.n	8104082 <HAL_DMA_IRQHandler+0xc82>
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	681b      	ldr	r3, [r3, #0]
 8104076:	681a      	ldr	r2, [r3, #0]
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	f022 020a 	bic.w	r2, r2, #10
 8104080:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	2200      	movs	r2, #0
 810421a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	2200      	movs	r2, #0
 8104086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	2201      	movs	r2, #1
 8104222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	2201      	movs	r2, #1
 810408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }

        if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810422a:	2b00      	cmp	r3, #0
 810422c:	f000 80b8 	beq.w	81043a0 <HAL_DMA_IRQHandler+0xe0c>
=======
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104096:	2b00      	cmp	r3, #0
 8104098:	f000 80b8 	beq.w	810420c <HAL_DMA_IRQHandler+0xe0c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
<<<<<<< HEAD
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104234:	6878      	ldr	r0, [r7, #4]
 8104236:	4798      	blx	r3
=======
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040a0:	6878      	ldr	r0, [r7, #4]
 81040a2:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 8104238:	e0b2      	b.n	81043a0 <HAL_DMA_IRQHandler+0xe0c>
 810423a:	bf00      	nop
 810423c:	40020010 	.word	0x40020010
 8104240:	40020028 	.word	0x40020028
 8104244:	40020040 	.word	0x40020040
 8104248:	40020058 	.word	0x40020058
 810424c:	40020070 	.word	0x40020070
 8104250:	40020088 	.word	0x40020088
 8104254:	400200a0 	.word	0x400200a0
 8104258:	400200b8 	.word	0x400200b8
 810425c:	40020410 	.word	0x40020410
 8104260:	40020428 	.word	0x40020428
 8104264:	40020440 	.word	0x40020440
 8104268:	40020458 	.word	0x40020458
 810426c:	40020470 	.word	0x40020470
 8104270:	40020488 	.word	0x40020488
 8104274:	400204a0 	.word	0x400204a0
 8104278:	400204b8 	.word	0x400204b8
=======
 81040a4:	e0b2      	b.n	810420c <HAL_DMA_IRQHandler+0xe0c>
 81040a6:	bf00      	nop
 81040a8:	40020010 	.word	0x40020010
 81040ac:	40020028 	.word	0x40020028
 81040b0:	40020040 	.word	0x40020040
 81040b4:	40020058 	.word	0x40020058
 81040b8:	40020070 	.word	0x40020070
 81040bc:	40020088 	.word	0x40020088
 81040c0:	400200a0 	.word	0x400200a0
 81040c4:	400200b8 	.word	0x400200b8
 81040c8:	40020410 	.word	0x40020410
 81040cc:	40020428 	.word	0x40020428
 81040d0:	40020440 	.word	0x40020440
 81040d4:	40020458 	.word	0x40020458
 81040d8:	40020470 	.word	0x40020470
 81040dc:	40020488 	.word	0x40020488
 81040e0:	400204a0 	.word	0x400204a0
 81040e4:	400204b8 	.word	0x400204b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
<<<<<<< HEAD
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104280:	f003 031f 	and.w	r3, r3, #31
 8104284:	2208      	movs	r2, #8
 8104286:	409a      	lsls	r2, r3
 8104288:	697b      	ldr	r3, [r7, #20]
 810428a:	4013      	ands	r3, r2
 810428c:	2b00      	cmp	r3, #0
 810428e:	f000 8088 	beq.w	81043a2 <HAL_DMA_IRQHandler+0xe0e>
 8104292:	693b      	ldr	r3, [r7, #16]
 8104294:	f003 0308 	and.w	r3, r3, #8
 8104298:	2b00      	cmp	r3, #0
 810429a:	f000 8082 	beq.w	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81040ec:	f003 031f 	and.w	r3, r3, #31
 81040f0:	2208      	movs	r2, #8
 81040f2:	409a      	lsls	r2, r3
 81040f4:	697b      	ldr	r3, [r7, #20]
 81040f6:	4013      	ands	r3, r2
 81040f8:	2b00      	cmp	r3, #0
 81040fa:	f000 8088 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
 81040fe:	693b      	ldr	r3, [r7, #16]
 8104100:	f003 0308 	and.w	r3, r3, #8
 8104104:	2b00      	cmp	r3, #0
 8104106:	f000 8082 	beq.w	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	4a41      	ldr	r2, [pc, #260]	; (81043a8 <HAL_DMA_IRQHandler+0xe14>)
 81042a4:	4293      	cmp	r3, r2
 81042a6:	d04a      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	4a3f      	ldr	r2, [pc, #252]	; (81043ac <HAL_DMA_IRQHandler+0xe18>)
 81042ae:	4293      	cmp	r3, r2
 81042b0:	d045      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	681b      	ldr	r3, [r3, #0]
 81042b6:	4a3e      	ldr	r2, [pc, #248]	; (81043b0 <HAL_DMA_IRQHandler+0xe1c>)
 81042b8:	4293      	cmp	r3, r2
 81042ba:	d040      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	4a3c      	ldr	r2, [pc, #240]	; (81043b4 <HAL_DMA_IRQHandler+0xe20>)
 81042c2:	4293      	cmp	r3, r2
 81042c4:	d03b      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	4a3b      	ldr	r2, [pc, #236]	; (81043b8 <HAL_DMA_IRQHandler+0xe24>)
 81042cc:	4293      	cmp	r3, r2
 81042ce:	d036      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	681b      	ldr	r3, [r3, #0]
 81042d4:	4a39      	ldr	r2, [pc, #228]	; (81043bc <HAL_DMA_IRQHandler+0xe28>)
 81042d6:	4293      	cmp	r3, r2
 81042d8:	d031      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	681b      	ldr	r3, [r3, #0]
 81042de:	4a38      	ldr	r2, [pc, #224]	; (81043c0 <HAL_DMA_IRQHandler+0xe2c>)
 81042e0:	4293      	cmp	r3, r2
 81042e2:	d02c      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042e4:	687b      	ldr	r3, [r7, #4]
 81042e6:	681b      	ldr	r3, [r3, #0]
 81042e8:	4a36      	ldr	r2, [pc, #216]	; (81043c4 <HAL_DMA_IRQHandler+0xe30>)
 81042ea:	4293      	cmp	r3, r2
 81042ec:	d027      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	681b      	ldr	r3, [r3, #0]
 81042f2:	4a35      	ldr	r2, [pc, #212]	; (81043c8 <HAL_DMA_IRQHandler+0xe34>)
 81042f4:	4293      	cmp	r3, r2
 81042f6:	d022      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	4a33      	ldr	r2, [pc, #204]	; (81043cc <HAL_DMA_IRQHandler+0xe38>)
 81042fe:	4293      	cmp	r3, r2
 8104300:	d01d      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 8104302:	687b      	ldr	r3, [r7, #4]
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	4a32      	ldr	r2, [pc, #200]	; (81043d0 <HAL_DMA_IRQHandler+0xe3c>)
 8104308:	4293      	cmp	r3, r2
 810430a:	d018      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	681b      	ldr	r3, [r3, #0]
 8104310:	4a30      	ldr	r2, [pc, #192]	; (81043d4 <HAL_DMA_IRQHandler+0xe40>)
 8104312:	4293      	cmp	r3, r2
 8104314:	d013      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	681b      	ldr	r3, [r3, #0]
 810431a:	4a2f      	ldr	r2, [pc, #188]	; (81043d8 <HAL_DMA_IRQHandler+0xe44>)
 810431c:	4293      	cmp	r3, r2
 810431e:	d00e      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	4a2d      	ldr	r2, [pc, #180]	; (81043dc <HAL_DMA_IRQHandler+0xe48>)
 8104326:	4293      	cmp	r3, r2
 8104328:	d009      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	681b      	ldr	r3, [r3, #0]
 810432e:	4a2c      	ldr	r2, [pc, #176]	; (81043e0 <HAL_DMA_IRQHandler+0xe4c>)
 8104330:	4293      	cmp	r3, r2
 8104332:	d004      	beq.n	810433e <HAL_DMA_IRQHandler+0xdaa>
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	4a2a      	ldr	r2, [pc, #168]	; (81043e4 <HAL_DMA_IRQHandler+0xe50>)
 810433a:	4293      	cmp	r3, r2
 810433c:	d108      	bne.n	8104350 <HAL_DMA_IRQHandler+0xdbc>
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	681a      	ldr	r2, [r3, #0]
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	f022 021c 	bic.w	r2, r2, #28
 810434c:	601a      	str	r2, [r3, #0]
 810434e:	e007      	b.n	8104360 <HAL_DMA_IRQHandler+0xdcc>
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	681a      	ldr	r2, [r3, #0]
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	f022 020e 	bic.w	r2, r2, #14
 810435e:	601a      	str	r2, [r3, #0]
=======
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a41      	ldr	r2, [pc, #260]	; (8104214 <HAL_DMA_IRQHandler+0xe14>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d04a      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a3f      	ldr	r2, [pc, #252]	; (8104218 <HAL_DMA_IRQHandler+0xe18>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d045      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a3e      	ldr	r2, [pc, #248]	; (810421c <HAL_DMA_IRQHandler+0xe1c>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d040      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a3c      	ldr	r2, [pc, #240]	; (8104220 <HAL_DMA_IRQHandler+0xe20>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d03b      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a3b      	ldr	r2, [pc, #236]	; (8104224 <HAL_DMA_IRQHandler+0xe24>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d036      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	4a39      	ldr	r2, [pc, #228]	; (8104228 <HAL_DMA_IRQHandler+0xe28>)
 8104142:	4293      	cmp	r3, r2
 8104144:	d031      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	681b      	ldr	r3, [r3, #0]
 810414a:	4a38      	ldr	r2, [pc, #224]	; (810422c <HAL_DMA_IRQHandler+0xe2c>)
 810414c:	4293      	cmp	r3, r2
 810414e:	d02c      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	4a36      	ldr	r2, [pc, #216]	; (8104230 <HAL_DMA_IRQHandler+0xe30>)
 8104156:	4293      	cmp	r3, r2
 8104158:	d027      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	681b      	ldr	r3, [r3, #0]
 810415e:	4a35      	ldr	r2, [pc, #212]	; (8104234 <HAL_DMA_IRQHandler+0xe34>)
 8104160:	4293      	cmp	r3, r2
 8104162:	d022      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	681b      	ldr	r3, [r3, #0]
 8104168:	4a33      	ldr	r2, [pc, #204]	; (8104238 <HAL_DMA_IRQHandler+0xe38>)
 810416a:	4293      	cmp	r3, r2
 810416c:	d01d      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	681b      	ldr	r3, [r3, #0]
 8104172:	4a32      	ldr	r2, [pc, #200]	; (810423c <HAL_DMA_IRQHandler+0xe3c>)
 8104174:	4293      	cmp	r3, r2
 8104176:	d018      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	4a30      	ldr	r2, [pc, #192]	; (8104240 <HAL_DMA_IRQHandler+0xe40>)
 810417e:	4293      	cmp	r3, r2
 8104180:	d013      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	4a2f      	ldr	r2, [pc, #188]	; (8104244 <HAL_DMA_IRQHandler+0xe44>)
 8104188:	4293      	cmp	r3, r2
 810418a:	d00e      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	681b      	ldr	r3, [r3, #0]
 8104190:	4a2d      	ldr	r2, [pc, #180]	; (8104248 <HAL_DMA_IRQHandler+0xe48>)
 8104192:	4293      	cmp	r3, r2
 8104194:	d009      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	681b      	ldr	r3, [r3, #0]
 810419a:	4a2c      	ldr	r2, [pc, #176]	; (810424c <HAL_DMA_IRQHandler+0xe4c>)
 810419c:	4293      	cmp	r3, r2
 810419e:	d004      	beq.n	81041aa <HAL_DMA_IRQHandler+0xdaa>
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	4a2a      	ldr	r2, [pc, #168]	; (8104250 <HAL_DMA_IRQHandler+0xe50>)
 81041a6:	4293      	cmp	r3, r2
 81041a8:	d108      	bne.n	81041bc <HAL_DMA_IRQHandler+0xdbc>
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	681b      	ldr	r3, [r3, #0]
 81041ae:	681a      	ldr	r2, [r3, #0]
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	f022 021c 	bic.w	r2, r2, #28
 81041b8:	601a      	str	r2, [r3, #0]
 81041ba:	e007      	b.n	81041cc <HAL_DMA_IRQHandler+0xdcc>
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	681a      	ldr	r2, [r3, #0]
 81041c2:	687b      	ldr	r3, [r7, #4]
 81041c4:	681b      	ldr	r3, [r3, #0]
 81041c6:	f022 020e 	bic.w	r2, r2, #14
 81041ca:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104364:	f003 031f 	and.w	r3, r3, #31
 8104368:	2201      	movs	r2, #1
 810436a:	409a      	lsls	r2, r3
 810436c:	69fb      	ldr	r3, [r7, #28]
 810436e:	605a      	str	r2, [r3, #4]
=======
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041d0:	f003 031f 	and.w	r3, r3, #31
 81041d4:	2201      	movs	r2, #1
 81041d6:	409a      	lsls	r2, r3
 81041d8:	69fb      	ldr	r3, [r7, #28]
 81041da:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
<<<<<<< HEAD
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	2201      	movs	r2, #1
 8104374:	655a      	str	r2, [r3, #84]	; 0x54
=======
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	2201      	movs	r2, #1
 81041e0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	2200      	movs	r2, #0
 810437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	2200      	movs	r2, #0
 81041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	2201      	movs	r2, #1
 8104382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	2201      	movs	r2, #1
 81041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      if (hdma->XferErrorCallback != NULL)
<<<<<<< HEAD
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810438a:	2b00      	cmp	r3, #0
 810438c:	d009      	beq.n	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 81041f2:	687b      	ldr	r3, [r7, #4]
 81041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041f6:	2b00      	cmp	r3, #0
 81041f8:	d009      	beq.n	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
<<<<<<< HEAD
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104392:	6878      	ldr	r0, [r7, #4]
 8104394:	4798      	blx	r3
 8104396:	e004      	b.n	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041fe:	6878      	ldr	r0, [r7, #4]
 8104200:	4798      	blx	r3
 8104202:	e004      	b.n	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          return;
<<<<<<< HEAD
 8104398:	bf00      	nop
 810439a:	e002      	b.n	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 8104204:	bf00      	nop
 8104206:	e002      	b.n	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 810439c:	bf00      	nop
 810439e:	e000      	b.n	81043a2 <HAL_DMA_IRQHandler+0xe0e>
=======
 8104208:	bf00      	nop
 810420a:	e000      	b.n	810420e <HAL_DMA_IRQHandler+0xe0e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
<<<<<<< HEAD
 81043a0:	bf00      	nop
=======
 810420c:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    /* Nothing To Do */
  }
}
<<<<<<< HEAD
 81043a2:	3728      	adds	r7, #40	; 0x28
 81043a4:	46bd      	mov	sp, r7
 81043a6:	bd80      	pop	{r7, pc}
 81043a8:	40020010 	.word	0x40020010
 81043ac:	40020028 	.word	0x40020028
 81043b0:	40020040 	.word	0x40020040
 81043b4:	40020058 	.word	0x40020058
 81043b8:	40020070 	.word	0x40020070
 81043bc:	40020088 	.word	0x40020088
 81043c0:	400200a0 	.word	0x400200a0
 81043c4:	400200b8 	.word	0x400200b8
 81043c8:	40020410 	.word	0x40020410
 81043cc:	40020428 	.word	0x40020428
 81043d0:	40020440 	.word	0x40020440
 81043d4:	40020458 	.word	0x40020458
 81043d8:	40020470 	.word	0x40020470
 81043dc:	40020488 	.word	0x40020488
 81043e0:	400204a0 	.word	0x400204a0
 81043e4:	400204b8 	.word	0x400204b8
=======
 810420e:	3728      	adds	r7, #40	; 0x28
 8104210:	46bd      	mov	sp, r7
 8104212:	bd80      	pop	{r7, pc}
 8104214:	40020010 	.word	0x40020010
 8104218:	40020028 	.word	0x40020028
 810421c:	40020040 	.word	0x40020040
 8104220:	40020058 	.word	0x40020058
 8104224:	40020070 	.word	0x40020070
 8104228:	40020088 	.word	0x40020088
 810422c:	400200a0 	.word	0x400200a0
 8104230:	400200b8 	.word	0x400200b8
 8104234:	40020410 	.word	0x40020410
 8104238:	40020428 	.word	0x40020428
 810423c:	40020440 	.word	0x40020440
 8104240:	40020458 	.word	0x40020458
 8104244:	40020470 	.word	0x40020470
 8104248:	40020488 	.word	0x40020488
 810424c:	400204a0 	.word	0x400204a0
 8104250:	400204b8 	.word	0x400204b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081043e8 <DMA_SetConfig>:
=======
08104254 <DMA_SetConfig>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 81043e8:	b480      	push	{r7}
 81043ea:	b087      	sub	sp, #28
 81043ec:	af00      	add	r7, sp, #0
 81043ee:	60f8      	str	r0, [r7, #12]
 81043f0:	60b9      	str	r1, [r7, #8]
 81043f2:	607a      	str	r2, [r7, #4]
 81043f4:	603b      	str	r3, [r7, #0]
=======
 8104254:	b480      	push	{r7}
 8104256:	b087      	sub	sp, #28
 8104258:	af00      	add	r7, sp, #0
 810425a:	60f8      	str	r0, [r7, #12]
 810425c:	60b9      	str	r1, [r7, #8]
 810425e:	607a      	str	r2, [r7, #4]
 8104260:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
<<<<<<< HEAD
 81043f6:	68fb      	ldr	r3, [r7, #12]
 81043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043fa:	617b      	str	r3, [r7, #20]
=======
 8104262:	68fb      	ldr	r3, [r7, #12]
 8104264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104266:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
<<<<<<< HEAD
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104400:	613b      	str	r3, [r7, #16]
=======
 8104268:	68fb      	ldr	r3, [r7, #12]
 810426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810426c:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
<<<<<<< HEAD
 8104402:	68fb      	ldr	r3, [r7, #12]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	4a84      	ldr	r2, [pc, #528]	; (8104618 <DMA_SetConfig+0x230>)
 8104408:	4293      	cmp	r3, r2
 810440a:	d072      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 810440c:	68fb      	ldr	r3, [r7, #12]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	4a82      	ldr	r2, [pc, #520]	; (810461c <DMA_SetConfig+0x234>)
 8104412:	4293      	cmp	r3, r2
 8104414:	d06d      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104416:	68fb      	ldr	r3, [r7, #12]
 8104418:	681b      	ldr	r3, [r3, #0]
 810441a:	4a81      	ldr	r2, [pc, #516]	; (8104620 <DMA_SetConfig+0x238>)
 810441c:	4293      	cmp	r3, r2
 810441e:	d068      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104420:	68fb      	ldr	r3, [r7, #12]
 8104422:	681b      	ldr	r3, [r3, #0]
 8104424:	4a7f      	ldr	r2, [pc, #508]	; (8104624 <DMA_SetConfig+0x23c>)
 8104426:	4293      	cmp	r3, r2
 8104428:	d063      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 810442a:	68fb      	ldr	r3, [r7, #12]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	4a7e      	ldr	r2, [pc, #504]	; (8104628 <DMA_SetConfig+0x240>)
 8104430:	4293      	cmp	r3, r2
 8104432:	d05e      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	4a7c      	ldr	r2, [pc, #496]	; (810462c <DMA_SetConfig+0x244>)
 810443a:	4293      	cmp	r3, r2
 810443c:	d059      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 810443e:	68fb      	ldr	r3, [r7, #12]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	4a7b      	ldr	r2, [pc, #492]	; (8104630 <DMA_SetConfig+0x248>)
 8104444:	4293      	cmp	r3, r2
 8104446:	d054      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104448:	68fb      	ldr	r3, [r7, #12]
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	4a79      	ldr	r2, [pc, #484]	; (8104634 <DMA_SetConfig+0x24c>)
 810444e:	4293      	cmp	r3, r2
 8104450:	d04f      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104452:	68fb      	ldr	r3, [r7, #12]
 8104454:	681b      	ldr	r3, [r3, #0]
 8104456:	4a78      	ldr	r2, [pc, #480]	; (8104638 <DMA_SetConfig+0x250>)
 8104458:	4293      	cmp	r3, r2
 810445a:	d04a      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 810445c:	68fb      	ldr	r3, [r7, #12]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	4a76      	ldr	r2, [pc, #472]	; (810463c <DMA_SetConfig+0x254>)
 8104462:	4293      	cmp	r3, r2
 8104464:	d045      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104466:	68fb      	ldr	r3, [r7, #12]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	4a75      	ldr	r2, [pc, #468]	; (8104640 <DMA_SetConfig+0x258>)
 810446c:	4293      	cmp	r3, r2
 810446e:	d040      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104470:	68fb      	ldr	r3, [r7, #12]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	4a73      	ldr	r2, [pc, #460]	; (8104644 <DMA_SetConfig+0x25c>)
 8104476:	4293      	cmp	r3, r2
 8104478:	d03b      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 810447a:	68fb      	ldr	r3, [r7, #12]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	4a72      	ldr	r2, [pc, #456]	; (8104648 <DMA_SetConfig+0x260>)
 8104480:	4293      	cmp	r3, r2
 8104482:	d036      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104484:	68fb      	ldr	r3, [r7, #12]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	4a70      	ldr	r2, [pc, #448]	; (810464c <DMA_SetConfig+0x264>)
 810448a:	4293      	cmp	r3, r2
 810448c:	d031      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 810448e:	68fb      	ldr	r3, [r7, #12]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	4a6f      	ldr	r2, [pc, #444]	; (8104650 <DMA_SetConfig+0x268>)
 8104494:	4293      	cmp	r3, r2
 8104496:	d02c      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 8104498:	68fb      	ldr	r3, [r7, #12]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	4a6d      	ldr	r2, [pc, #436]	; (8104654 <DMA_SetConfig+0x26c>)
 810449e:	4293      	cmp	r3, r2
 81044a0:	d027      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 81044a2:	68fb      	ldr	r3, [r7, #12]
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	4a6c      	ldr	r2, [pc, #432]	; (8104658 <DMA_SetConfig+0x270>)
 81044a8:	4293      	cmp	r3, r2
 81044aa:	d022      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 81044ac:	68fb      	ldr	r3, [r7, #12]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	4a6a      	ldr	r2, [pc, #424]	; (810465c <DMA_SetConfig+0x274>)
 81044b2:	4293      	cmp	r3, r2
 81044b4:	d01d      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 81044b6:	68fb      	ldr	r3, [r7, #12]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	4a69      	ldr	r2, [pc, #420]	; (8104660 <DMA_SetConfig+0x278>)
 81044bc:	4293      	cmp	r3, r2
 81044be:	d018      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 81044c0:	68fb      	ldr	r3, [r7, #12]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	4a67      	ldr	r2, [pc, #412]	; (8104664 <DMA_SetConfig+0x27c>)
 81044c6:	4293      	cmp	r3, r2
 81044c8:	d013      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 81044ca:	68fb      	ldr	r3, [r7, #12]
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	4a66      	ldr	r2, [pc, #408]	; (8104668 <DMA_SetConfig+0x280>)
 81044d0:	4293      	cmp	r3, r2
 81044d2:	d00e      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 81044d4:	68fb      	ldr	r3, [r7, #12]
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	4a64      	ldr	r2, [pc, #400]	; (810466c <DMA_SetConfig+0x284>)
 81044da:	4293      	cmp	r3, r2
 81044dc:	d009      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 81044de:	68fb      	ldr	r3, [r7, #12]
 81044e0:	681b      	ldr	r3, [r3, #0]
 81044e2:	4a63      	ldr	r2, [pc, #396]	; (8104670 <DMA_SetConfig+0x288>)
 81044e4:	4293      	cmp	r3, r2
 81044e6:	d004      	beq.n	81044f2 <DMA_SetConfig+0x10a>
 81044e8:	68fb      	ldr	r3, [r7, #12]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	4a61      	ldr	r2, [pc, #388]	; (8104674 <DMA_SetConfig+0x28c>)
 81044ee:	4293      	cmp	r3, r2
 81044f0:	d101      	bne.n	81044f6 <DMA_SetConfig+0x10e>
 81044f2:	2301      	movs	r3, #1
 81044f4:	e000      	b.n	81044f8 <DMA_SetConfig+0x110>
 81044f6:	2300      	movs	r3, #0
 81044f8:	2b00      	cmp	r3, #0
 81044fa:	d00d      	beq.n	8104518 <DMA_SetConfig+0x130>
=======
 810426e:	68fb      	ldr	r3, [r7, #12]
 8104270:	681b      	ldr	r3, [r3, #0]
 8104272:	4a84      	ldr	r2, [pc, #528]	; (8104484 <DMA_SetConfig+0x230>)
 8104274:	4293      	cmp	r3, r2
 8104276:	d072      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	4a82      	ldr	r2, [pc, #520]	; (8104488 <DMA_SetConfig+0x234>)
 810427e:	4293      	cmp	r3, r2
 8104280:	d06d      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104282:	68fb      	ldr	r3, [r7, #12]
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	4a81      	ldr	r2, [pc, #516]	; (810448c <DMA_SetConfig+0x238>)
 8104288:	4293      	cmp	r3, r2
 810428a:	d068      	beq.n	810435e <DMA_SetConfig+0x10a>
 810428c:	68fb      	ldr	r3, [r7, #12]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	4a7f      	ldr	r2, [pc, #508]	; (8104490 <DMA_SetConfig+0x23c>)
 8104292:	4293      	cmp	r3, r2
 8104294:	d063      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104296:	68fb      	ldr	r3, [r7, #12]
 8104298:	681b      	ldr	r3, [r3, #0]
 810429a:	4a7e      	ldr	r2, [pc, #504]	; (8104494 <DMA_SetConfig+0x240>)
 810429c:	4293      	cmp	r3, r2
 810429e:	d05e      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	4a7c      	ldr	r2, [pc, #496]	; (8104498 <DMA_SetConfig+0x244>)
 81042a6:	4293      	cmp	r3, r2
 81042a8:	d059      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042aa:	68fb      	ldr	r3, [r7, #12]
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	4a7b      	ldr	r2, [pc, #492]	; (810449c <DMA_SetConfig+0x248>)
 81042b0:	4293      	cmp	r3, r2
 81042b2:	d054      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042b4:	68fb      	ldr	r3, [r7, #12]
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	4a79      	ldr	r2, [pc, #484]	; (81044a0 <DMA_SetConfig+0x24c>)
 81042ba:	4293      	cmp	r3, r2
 81042bc:	d04f      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042be:	68fb      	ldr	r3, [r7, #12]
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	4a78      	ldr	r2, [pc, #480]	; (81044a4 <DMA_SetConfig+0x250>)
 81042c4:	4293      	cmp	r3, r2
 81042c6:	d04a      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042c8:	68fb      	ldr	r3, [r7, #12]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	4a76      	ldr	r2, [pc, #472]	; (81044a8 <DMA_SetConfig+0x254>)
 81042ce:	4293      	cmp	r3, r2
 81042d0:	d045      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042d2:	68fb      	ldr	r3, [r7, #12]
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	4a75      	ldr	r2, [pc, #468]	; (81044ac <DMA_SetConfig+0x258>)
 81042d8:	4293      	cmp	r3, r2
 81042da:	d040      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042dc:	68fb      	ldr	r3, [r7, #12]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	4a73      	ldr	r2, [pc, #460]	; (81044b0 <DMA_SetConfig+0x25c>)
 81042e2:	4293      	cmp	r3, r2
 81042e4:	d03b      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042e6:	68fb      	ldr	r3, [r7, #12]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	4a72      	ldr	r2, [pc, #456]	; (81044b4 <DMA_SetConfig+0x260>)
 81042ec:	4293      	cmp	r3, r2
 81042ee:	d036      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	681b      	ldr	r3, [r3, #0]
 81042f4:	4a70      	ldr	r2, [pc, #448]	; (81044b8 <DMA_SetConfig+0x264>)
 81042f6:	4293      	cmp	r3, r2
 81042f8:	d031      	beq.n	810435e <DMA_SetConfig+0x10a>
 81042fa:	68fb      	ldr	r3, [r7, #12]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	4a6f      	ldr	r2, [pc, #444]	; (81044bc <DMA_SetConfig+0x268>)
 8104300:	4293      	cmp	r3, r2
 8104302:	d02c      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	4a6d      	ldr	r2, [pc, #436]	; (81044c0 <DMA_SetConfig+0x26c>)
 810430a:	4293      	cmp	r3, r2
 810430c:	d027      	beq.n	810435e <DMA_SetConfig+0x10a>
 810430e:	68fb      	ldr	r3, [r7, #12]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	4a6c      	ldr	r2, [pc, #432]	; (81044c4 <DMA_SetConfig+0x270>)
 8104314:	4293      	cmp	r3, r2
 8104316:	d022      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104318:	68fb      	ldr	r3, [r7, #12]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	4a6a      	ldr	r2, [pc, #424]	; (81044c8 <DMA_SetConfig+0x274>)
 810431e:	4293      	cmp	r3, r2
 8104320:	d01d      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104322:	68fb      	ldr	r3, [r7, #12]
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	4a69      	ldr	r2, [pc, #420]	; (81044cc <DMA_SetConfig+0x278>)
 8104328:	4293      	cmp	r3, r2
 810432a:	d018      	beq.n	810435e <DMA_SetConfig+0x10a>
 810432c:	68fb      	ldr	r3, [r7, #12]
 810432e:	681b      	ldr	r3, [r3, #0]
 8104330:	4a67      	ldr	r2, [pc, #412]	; (81044d0 <DMA_SetConfig+0x27c>)
 8104332:	4293      	cmp	r3, r2
 8104334:	d013      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104336:	68fb      	ldr	r3, [r7, #12]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	4a66      	ldr	r2, [pc, #408]	; (81044d4 <DMA_SetConfig+0x280>)
 810433c:	4293      	cmp	r3, r2
 810433e:	d00e      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104340:	68fb      	ldr	r3, [r7, #12]
 8104342:	681b      	ldr	r3, [r3, #0]
 8104344:	4a64      	ldr	r2, [pc, #400]	; (81044d8 <DMA_SetConfig+0x284>)
 8104346:	4293      	cmp	r3, r2
 8104348:	d009      	beq.n	810435e <DMA_SetConfig+0x10a>
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	4a63      	ldr	r2, [pc, #396]	; (81044dc <DMA_SetConfig+0x288>)
 8104350:	4293      	cmp	r3, r2
 8104352:	d004      	beq.n	810435e <DMA_SetConfig+0x10a>
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	4a61      	ldr	r2, [pc, #388]	; (81044e0 <DMA_SetConfig+0x28c>)
 810435a:	4293      	cmp	r3, r2
 810435c:	d101      	bne.n	8104362 <DMA_SetConfig+0x10e>
 810435e:	2301      	movs	r3, #1
 8104360:	e000      	b.n	8104364 <DMA_SetConfig+0x110>
 8104362:	2300      	movs	r3, #0
 8104364:	2b00      	cmp	r3, #0
 8104366:	d00d      	beq.n	8104384 <DMA_SetConfig+0x130>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
<<<<<<< HEAD
 81044fc:	68fb      	ldr	r3, [r7, #12]
 81044fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104500:	68fa      	ldr	r2, [r7, #12]
 8104502:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104504:	605a      	str	r2, [r3, #4]
=======
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810436c:	68fa      	ldr	r2, [r7, #12]
 810436e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104370:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    if(hdma->DMAmuxRequestGen != 0U)
<<<<<<< HEAD
 8104506:	68fb      	ldr	r3, [r7, #12]
 8104508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810450a:	2b00      	cmp	r3, #0
 810450c:	d004      	beq.n	8104518 <DMA_SetConfig+0x130>
=======
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104376:	2b00      	cmp	r3, #0
 8104378:	d004      	beq.n	8104384 <DMA_SetConfig+0x130>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
<<<<<<< HEAD
 810450e:	68fb      	ldr	r3, [r7, #12]
 8104510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104512:	68fa      	ldr	r2, [r7, #12]
 8104514:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104516:	605a      	str	r2, [r3, #4]
=======
 810437a:	68fb      	ldr	r3, [r7, #12]
 810437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810437e:	68fa      	ldr	r2, [r7, #12]
 8104380:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104382:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
<<<<<<< HEAD
 8104518:	68fb      	ldr	r3, [r7, #12]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	4a3e      	ldr	r2, [pc, #248]	; (8104618 <DMA_SetConfig+0x230>)
 810451e:	4293      	cmp	r3, r2
 8104520:	d04a      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 8104522:	68fb      	ldr	r3, [r7, #12]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	4a3d      	ldr	r2, [pc, #244]	; (810461c <DMA_SetConfig+0x234>)
 8104528:	4293      	cmp	r3, r2
 810452a:	d045      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 810452c:	68fb      	ldr	r3, [r7, #12]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	4a3b      	ldr	r2, [pc, #236]	; (8104620 <DMA_SetConfig+0x238>)
 8104532:	4293      	cmp	r3, r2
 8104534:	d040      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 8104536:	68fb      	ldr	r3, [r7, #12]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	4a3a      	ldr	r2, [pc, #232]	; (8104624 <DMA_SetConfig+0x23c>)
 810453c:	4293      	cmp	r3, r2
 810453e:	d03b      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 8104540:	68fb      	ldr	r3, [r7, #12]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	4a38      	ldr	r2, [pc, #224]	; (8104628 <DMA_SetConfig+0x240>)
 8104546:	4293      	cmp	r3, r2
 8104548:	d036      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 810454a:	68fb      	ldr	r3, [r7, #12]
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	4a37      	ldr	r2, [pc, #220]	; (810462c <DMA_SetConfig+0x244>)
 8104550:	4293      	cmp	r3, r2
 8104552:	d031      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 8104554:	68fb      	ldr	r3, [r7, #12]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	4a35      	ldr	r2, [pc, #212]	; (8104630 <DMA_SetConfig+0x248>)
 810455a:	4293      	cmp	r3, r2
 810455c:	d02c      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	4a34      	ldr	r2, [pc, #208]	; (8104634 <DMA_SetConfig+0x24c>)
 8104564:	4293      	cmp	r3, r2
 8104566:	d027      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 8104568:	68fb      	ldr	r3, [r7, #12]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	4a32      	ldr	r2, [pc, #200]	; (8104638 <DMA_SetConfig+0x250>)
 810456e:	4293      	cmp	r3, r2
 8104570:	d022      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 8104572:	68fb      	ldr	r3, [r7, #12]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	4a31      	ldr	r2, [pc, #196]	; (810463c <DMA_SetConfig+0x254>)
 8104578:	4293      	cmp	r3, r2
 810457a:	d01d      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 810457c:	68fb      	ldr	r3, [r7, #12]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	4a2f      	ldr	r2, [pc, #188]	; (8104640 <DMA_SetConfig+0x258>)
 8104582:	4293      	cmp	r3, r2
 8104584:	d018      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 8104586:	68fb      	ldr	r3, [r7, #12]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	4a2e      	ldr	r2, [pc, #184]	; (8104644 <DMA_SetConfig+0x25c>)
 810458c:	4293      	cmp	r3, r2
 810458e:	d013      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 8104590:	68fb      	ldr	r3, [r7, #12]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	4a2c      	ldr	r2, [pc, #176]	; (8104648 <DMA_SetConfig+0x260>)
 8104596:	4293      	cmp	r3, r2
 8104598:	d00e      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 810459a:	68fb      	ldr	r3, [r7, #12]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	4a2b      	ldr	r2, [pc, #172]	; (810464c <DMA_SetConfig+0x264>)
 81045a0:	4293      	cmp	r3, r2
 81045a2:	d009      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 81045a4:	68fb      	ldr	r3, [r7, #12]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	4a29      	ldr	r2, [pc, #164]	; (8104650 <DMA_SetConfig+0x268>)
 81045aa:	4293      	cmp	r3, r2
 81045ac:	d004      	beq.n	81045b8 <DMA_SetConfig+0x1d0>
 81045ae:	68fb      	ldr	r3, [r7, #12]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	4a28      	ldr	r2, [pc, #160]	; (8104654 <DMA_SetConfig+0x26c>)
 81045b4:	4293      	cmp	r3, r2
 81045b6:	d101      	bne.n	81045bc <DMA_SetConfig+0x1d4>
 81045b8:	2301      	movs	r3, #1
 81045ba:	e000      	b.n	81045be <DMA_SetConfig+0x1d6>
 81045bc:	2300      	movs	r3, #0
 81045be:	2b00      	cmp	r3, #0
 81045c0:	d05a      	beq.n	8104678 <DMA_SetConfig+0x290>
=======
 8104384:	68fb      	ldr	r3, [r7, #12]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a3e      	ldr	r2, [pc, #248]	; (8104484 <DMA_SetConfig+0x230>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d04a      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 810438e:	68fb      	ldr	r3, [r7, #12]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	4a3d      	ldr	r2, [pc, #244]	; (8104488 <DMA_SetConfig+0x234>)
 8104394:	4293      	cmp	r3, r2
 8104396:	d045      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	4a3b      	ldr	r2, [pc, #236]	; (810448c <DMA_SetConfig+0x238>)
 810439e:	4293      	cmp	r3, r2
 81043a0:	d040      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043a2:	68fb      	ldr	r3, [r7, #12]
 81043a4:	681b      	ldr	r3, [r3, #0]
 81043a6:	4a3a      	ldr	r2, [pc, #232]	; (8104490 <DMA_SetConfig+0x23c>)
 81043a8:	4293      	cmp	r3, r2
 81043aa:	d03b      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043ac:	68fb      	ldr	r3, [r7, #12]
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	4a38      	ldr	r2, [pc, #224]	; (8104494 <DMA_SetConfig+0x240>)
 81043b2:	4293      	cmp	r3, r2
 81043b4:	d036      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	4a37      	ldr	r2, [pc, #220]	; (8104498 <DMA_SetConfig+0x244>)
 81043bc:	4293      	cmp	r3, r2
 81043be:	d031      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043c0:	68fb      	ldr	r3, [r7, #12]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4a35      	ldr	r2, [pc, #212]	; (810449c <DMA_SetConfig+0x248>)
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d02c      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043ca:	68fb      	ldr	r3, [r7, #12]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a34      	ldr	r2, [pc, #208]	; (81044a0 <DMA_SetConfig+0x24c>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d027      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	4a32      	ldr	r2, [pc, #200]	; (81044a4 <DMA_SetConfig+0x250>)
 81043da:	4293      	cmp	r3, r2
 81043dc:	d022      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043de:	68fb      	ldr	r3, [r7, #12]
 81043e0:	681b      	ldr	r3, [r3, #0]
 81043e2:	4a31      	ldr	r2, [pc, #196]	; (81044a8 <DMA_SetConfig+0x254>)
 81043e4:	4293      	cmp	r3, r2
 81043e6:	d01d      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043e8:	68fb      	ldr	r3, [r7, #12]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	4a2f      	ldr	r2, [pc, #188]	; (81044ac <DMA_SetConfig+0x258>)
 81043ee:	4293      	cmp	r3, r2
 81043f0:	d018      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	4a2e      	ldr	r2, [pc, #184]	; (81044b0 <DMA_SetConfig+0x25c>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d013      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4a2c      	ldr	r2, [pc, #176]	; (81044b4 <DMA_SetConfig+0x260>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d00e      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 8104406:	68fb      	ldr	r3, [r7, #12]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	4a2b      	ldr	r2, [pc, #172]	; (81044b8 <DMA_SetConfig+0x264>)
 810440c:	4293      	cmp	r3, r2
 810440e:	d009      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	4a29      	ldr	r2, [pc, #164]	; (81044bc <DMA_SetConfig+0x268>)
 8104416:	4293      	cmp	r3, r2
 8104418:	d004      	beq.n	8104424 <DMA_SetConfig+0x1d0>
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	681b      	ldr	r3, [r3, #0]
 810441e:	4a28      	ldr	r2, [pc, #160]	; (81044c0 <DMA_SetConfig+0x26c>)
 8104420:	4293      	cmp	r3, r2
 8104422:	d101      	bne.n	8104428 <DMA_SetConfig+0x1d4>
 8104424:	2301      	movs	r3, #1
 8104426:	e000      	b.n	810442a <DMA_SetConfig+0x1d6>
 8104428:	2300      	movs	r3, #0
 810442a:	2b00      	cmp	r3, #0
 810442c:	d05a      	beq.n	81044e4 <DMA_SetConfig+0x290>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 81045c2:	68fb      	ldr	r3, [r7, #12]
 81045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81045c6:	f003 031f 	and.w	r3, r3, #31
 81045ca:	223f      	movs	r2, #63	; 0x3f
 81045cc:	409a      	lsls	r2, r3
 81045ce:	697b      	ldr	r3, [r7, #20]
 81045d0:	609a      	str	r2, [r3, #8]
=======
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104432:	f003 031f 	and.w	r3, r3, #31
 8104436:	223f      	movs	r2, #63	; 0x3f
 8104438:	409a      	lsls	r2, r3
 810443a:	697b      	ldr	r3, [r7, #20]
 810443c:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
<<<<<<< HEAD
 81045d2:	68fb      	ldr	r3, [r7, #12]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	681a      	ldr	r2, [r3, #0]
 81045d8:	68fb      	ldr	r3, [r7, #12]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 81045e0:	601a      	str	r2, [r3, #0]
=======
 810443e:	68fb      	ldr	r3, [r7, #12]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	681a      	ldr	r2, [r3, #0]
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810444c:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
<<<<<<< HEAD
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	683a      	ldr	r2, [r7, #0]
 81045e8:	605a      	str	r2, [r3, #4]
=======
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	683a      	ldr	r2, [r7, #0]
 8104454:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
<<<<<<< HEAD
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	689b      	ldr	r3, [r3, #8]
 81045ee:	2b40      	cmp	r3, #64	; 0x40
 81045f0:	d108      	bne.n	8104604 <DMA_SetConfig+0x21c>
=======
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	689b      	ldr	r3, [r3, #8]
 810445a:	2b40      	cmp	r3, #64	; 0x40
 810445c:	d108      	bne.n	8104470 <DMA_SetConfig+0x21c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
<<<<<<< HEAD
 81045f2:	68fb      	ldr	r3, [r7, #12]
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	687a      	ldr	r2, [r7, #4]
 81045f8:	609a      	str	r2, [r3, #8]
=======
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	687a      	ldr	r2, [r7, #4]
 8104464:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
<<<<<<< HEAD
 81045fa:	68fb      	ldr	r3, [r7, #12]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	68ba      	ldr	r2, [r7, #8]
 8104600:	60da      	str	r2, [r3, #12]
=======
 8104466:	68fb      	ldr	r3, [r7, #12]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	68ba      	ldr	r2, [r7, #8]
 810446c:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    /* Nothing To Do */
  }
}
<<<<<<< HEAD
 8104602:	e087      	b.n	8104714 <DMA_SetConfig+0x32c>
=======
 810446e:	e087      	b.n	8104580 <DMA_SetConfig+0x32c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
<<<<<<< HEAD
 8104604:	68fb      	ldr	r3, [r7, #12]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	68ba      	ldr	r2, [r7, #8]
 810460a:	609a      	str	r2, [r3, #8]
=======
 8104470:	68fb      	ldr	r3, [r7, #12]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	68ba      	ldr	r2, [r7, #8]
 8104476:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
<<<<<<< HEAD
 810460c:	68fb      	ldr	r3, [r7, #12]
 810460e:	681b      	ldr	r3, [r3, #0]
 8104610:	687a      	ldr	r2, [r7, #4]
 8104612:	60da      	str	r2, [r3, #12]
=======
 8104478:	68fb      	ldr	r3, [r7, #12]
 810447a:	681b      	ldr	r3, [r3, #0]
 810447c:	687a      	ldr	r2, [r7, #4]
 810447e:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8104614:	e07e      	b.n	8104714 <DMA_SetConfig+0x32c>
 8104616:	bf00      	nop
 8104618:	40020010 	.word	0x40020010
 810461c:	40020028 	.word	0x40020028
 8104620:	40020040 	.word	0x40020040
 8104624:	40020058 	.word	0x40020058
 8104628:	40020070 	.word	0x40020070
 810462c:	40020088 	.word	0x40020088
 8104630:	400200a0 	.word	0x400200a0
 8104634:	400200b8 	.word	0x400200b8
 8104638:	40020410 	.word	0x40020410
 810463c:	40020428 	.word	0x40020428
 8104640:	40020440 	.word	0x40020440
 8104644:	40020458 	.word	0x40020458
 8104648:	40020470 	.word	0x40020470
 810464c:	40020488 	.word	0x40020488
 8104650:	400204a0 	.word	0x400204a0
 8104654:	400204b8 	.word	0x400204b8
 8104658:	58025408 	.word	0x58025408
 810465c:	5802541c 	.word	0x5802541c
 8104660:	58025430 	.word	0x58025430
 8104664:	58025444 	.word	0x58025444
 8104668:	58025458 	.word	0x58025458
 810466c:	5802546c 	.word	0x5802546c
 8104670:	58025480 	.word	0x58025480
 8104674:	58025494 	.word	0x58025494
=======
 8104480:	e07e      	b.n	8104580 <DMA_SetConfig+0x32c>
 8104482:	bf00      	nop
 8104484:	40020010 	.word	0x40020010
 8104488:	40020028 	.word	0x40020028
 810448c:	40020040 	.word	0x40020040
 8104490:	40020058 	.word	0x40020058
 8104494:	40020070 	.word	0x40020070
 8104498:	40020088 	.word	0x40020088
 810449c:	400200a0 	.word	0x400200a0
 81044a0:	400200b8 	.word	0x400200b8
 81044a4:	40020410 	.word	0x40020410
 81044a8:	40020428 	.word	0x40020428
 81044ac:	40020440 	.word	0x40020440
 81044b0:	40020458 	.word	0x40020458
 81044b4:	40020470 	.word	0x40020470
 81044b8:	40020488 	.word	0x40020488
 81044bc:	400204a0 	.word	0x400204a0
 81044c0:	400204b8 	.word	0x400204b8
 81044c4:	58025408 	.word	0x58025408
 81044c8:	5802541c 	.word	0x5802541c
 81044cc:	58025430 	.word	0x58025430
 81044d0:	58025444 	.word	0x58025444
 81044d4:	58025458 	.word	0x58025458
 81044d8:	5802546c 	.word	0x5802546c
 81044dc:	58025480 	.word	0x58025480
 81044e0:	58025494 	.word	0x58025494
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
<<<<<<< HEAD
 8104678:	68fb      	ldr	r3, [r7, #12]
 810467a:	681b      	ldr	r3, [r3, #0]
 810467c:	4a28      	ldr	r2, [pc, #160]	; (8104720 <DMA_SetConfig+0x338>)
 810467e:	4293      	cmp	r3, r2
 8104680:	d022      	beq.n	81046c8 <DMA_SetConfig+0x2e0>
 8104682:	68fb      	ldr	r3, [r7, #12]
 8104684:	681b      	ldr	r3, [r3, #0]
 8104686:	4a27      	ldr	r2, [pc, #156]	; (8104724 <DMA_SetConfig+0x33c>)
 8104688:	4293      	cmp	r3, r2
 810468a:	d01d      	beq.n	81046c8 <DMA_SetConfig+0x2e0>
 810468c:	68fb      	ldr	r3, [r7, #12]
 810468e:	681b      	ldr	r3, [r3, #0]
 8104690:	4a25      	ldr	r2, [pc, #148]	; (8104728 <DMA_SetConfig+0x340>)
 8104692:	4293      	cmp	r3, r2
 8104694:	d018      	beq.n	81046c8 <DMA_SetConfig+0x2e0>
 8104696:	68fb      	ldr	r3, [r7, #12]
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	4a24      	ldr	r2, [pc, #144]	; (810472c <DMA_SetConfig+0x344>)
 810469c:	4293      	cmp	r3, r2
 810469e:	d013      	beq.n	81046c8 <DMA_SetConfig+0x2e0>
 81046a0:	68fb      	ldr	r3, [r7, #12]
 81046a2:	681b      	ldr	r3, [r3, #0]
 81046a4:	4a22      	ldr	r2, [pc, #136]	; (8104730 <DMA_SetConfig+0x348>)
 81046a6:	4293      	cmp	r3, r2
 81046a8:	d00e      	beq.n	81046c8 <DMA_SetConfig+0x2e0>
 81046aa:	68fb      	ldr	r3, [r7, #12]
 81046ac:	681b      	ldr	r3, [r3, #0]
 81046ae:	4a21      	ldr	r2, [pc, #132]	; (8104734 <DMA_SetConfig+0x34c>)
 81046b0:	4293      	cmp	r3, r2
 81046b2:	d009      	beq.n	81046c8 <DMA_SetConfig+0x2e0>
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	4a1f      	ldr	r2, [pc, #124]	; (8104738 <DMA_SetConfig+0x350>)
 81046ba:	4293      	cmp	r3, r2
 81046bc:	d004      	beq.n	81046c8 <DMA_SetConfig+0x2e0>
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	681b      	ldr	r3, [r3, #0]
 81046c2:	4a1e      	ldr	r2, [pc, #120]	; (810473c <DMA_SetConfig+0x354>)
 81046c4:	4293      	cmp	r3, r2
 81046c6:	d101      	bne.n	81046cc <DMA_SetConfig+0x2e4>
 81046c8:	2301      	movs	r3, #1
 81046ca:	e000      	b.n	81046ce <DMA_SetConfig+0x2e6>
 81046cc:	2300      	movs	r3, #0
 81046ce:	2b00      	cmp	r3, #0
 81046d0:	d020      	beq.n	8104714 <DMA_SetConfig+0x32c>
=======
 81044e4:	68fb      	ldr	r3, [r7, #12]
 81044e6:	681b      	ldr	r3, [r3, #0]
 81044e8:	4a28      	ldr	r2, [pc, #160]	; (810458c <DMA_SetConfig+0x338>)
 81044ea:	4293      	cmp	r3, r2
 81044ec:	d022      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	4a27      	ldr	r2, [pc, #156]	; (8104590 <DMA_SetConfig+0x33c>)
 81044f4:	4293      	cmp	r3, r2
 81044f6:	d01d      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	4a25      	ldr	r2, [pc, #148]	; (8104594 <DMA_SetConfig+0x340>)
 81044fe:	4293      	cmp	r3, r2
 8104500:	d018      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	681b      	ldr	r3, [r3, #0]
 8104506:	4a24      	ldr	r2, [pc, #144]	; (8104598 <DMA_SetConfig+0x344>)
 8104508:	4293      	cmp	r3, r2
 810450a:	d013      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 810450c:	68fb      	ldr	r3, [r7, #12]
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	4a22      	ldr	r2, [pc, #136]	; (810459c <DMA_SetConfig+0x348>)
 8104512:	4293      	cmp	r3, r2
 8104514:	d00e      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 8104516:	68fb      	ldr	r3, [r7, #12]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	4a21      	ldr	r2, [pc, #132]	; (81045a0 <DMA_SetConfig+0x34c>)
 810451c:	4293      	cmp	r3, r2
 810451e:	d009      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	4a1f      	ldr	r2, [pc, #124]	; (81045a4 <DMA_SetConfig+0x350>)
 8104526:	4293      	cmp	r3, r2
 8104528:	d004      	beq.n	8104534 <DMA_SetConfig+0x2e0>
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	4a1e      	ldr	r2, [pc, #120]	; (81045a8 <DMA_SetConfig+0x354>)
 8104530:	4293      	cmp	r3, r2
 8104532:	d101      	bne.n	8104538 <DMA_SetConfig+0x2e4>
 8104534:	2301      	movs	r3, #1
 8104536:	e000      	b.n	810453a <DMA_SetConfig+0x2e6>
 8104538:	2300      	movs	r3, #0
 810453a:	2b00      	cmp	r3, #0
 810453c:	d020      	beq.n	8104580 <DMA_SetConfig+0x32c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
<<<<<<< HEAD
 81046d2:	68fb      	ldr	r3, [r7, #12]
 81046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046d6:	f003 031f 	and.w	r3, r3, #31
 81046da:	2201      	movs	r2, #1
 81046dc:	409a      	lsls	r2, r3
 81046de:	693b      	ldr	r3, [r7, #16]
 81046e0:	605a      	str	r2, [r3, #4]
=======
 810453e:	68fb      	ldr	r3, [r7, #12]
 8104540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104542:	f003 031f 	and.w	r3, r3, #31
 8104546:	2201      	movs	r2, #1
 8104548:	409a      	lsls	r2, r3
 810454a:	693b      	ldr	r3, [r7, #16]
 810454c:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
<<<<<<< HEAD
 81046e2:	68fb      	ldr	r3, [r7, #12]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	683a      	ldr	r2, [r7, #0]
 81046e8:	605a      	str	r2, [r3, #4]
=======
 810454e:	68fb      	ldr	r3, [r7, #12]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	683a      	ldr	r2, [r7, #0]
 8104554:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
<<<<<<< HEAD
 81046ea:	68fb      	ldr	r3, [r7, #12]
 81046ec:	689b      	ldr	r3, [r3, #8]
 81046ee:	2b40      	cmp	r3, #64	; 0x40
 81046f0:	d108      	bne.n	8104704 <DMA_SetConfig+0x31c>
=======
 8104556:	68fb      	ldr	r3, [r7, #12]
 8104558:	689b      	ldr	r3, [r3, #8]
 810455a:	2b40      	cmp	r3, #64	; 0x40
 810455c:	d108      	bne.n	8104570 <DMA_SetConfig+0x31c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
<<<<<<< HEAD
 81046f2:	68fb      	ldr	r3, [r7, #12]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	687a      	ldr	r2, [r7, #4]
 81046f8:	609a      	str	r2, [r3, #8]
=======
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	687a      	ldr	r2, [r7, #4]
 8104564:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
<<<<<<< HEAD
 81046fa:	68fb      	ldr	r3, [r7, #12]
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	68ba      	ldr	r2, [r7, #8]
 8104700:	60da      	str	r2, [r3, #12]
=======
 8104566:	68fb      	ldr	r3, [r7, #12]
 8104568:	681b      	ldr	r3, [r3, #0]
 810456a:	68ba      	ldr	r2, [r7, #8]
 810456c:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8104702:	e007      	b.n	8104714 <DMA_SetConfig+0x32c>
=======
 810456e:	e007      	b.n	8104580 <DMA_SetConfig+0x32c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
<<<<<<< HEAD
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	68ba      	ldr	r2, [r7, #8]
 810470a:	609a      	str	r2, [r3, #8]
=======
 8104570:	68fb      	ldr	r3, [r7, #12]
 8104572:	681b      	ldr	r3, [r3, #0]
 8104574:	68ba      	ldr	r2, [r7, #8]
 8104576:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
<<<<<<< HEAD
 810470c:	68fb      	ldr	r3, [r7, #12]
 810470e:	681b      	ldr	r3, [r3, #0]
 8104710:	687a      	ldr	r2, [r7, #4]
 8104712:	60da      	str	r2, [r3, #12]
=======
 8104578:	68fb      	ldr	r3, [r7, #12]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	687a      	ldr	r2, [r7, #4]
 810457e:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8104714:	bf00      	nop
 8104716:	371c      	adds	r7, #28
 8104718:	46bd      	mov	sp, r7
 810471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810471e:	4770      	bx	lr
 8104720:	58025408 	.word	0x58025408
 8104724:	5802541c 	.word	0x5802541c
 8104728:	58025430 	.word	0x58025430
 810472c:	58025444 	.word	0x58025444
 8104730:	58025458 	.word	0x58025458
 8104734:	5802546c 	.word	0x5802546c
 8104738:	58025480 	.word	0x58025480
 810473c:	58025494 	.word	0x58025494
=======
 8104580:	bf00      	nop
 8104582:	371c      	adds	r7, #28
 8104584:	46bd      	mov	sp, r7
 8104586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810458a:	4770      	bx	lr
 810458c:	58025408 	.word	0x58025408
 8104590:	5802541c 	.word	0x5802541c
 8104594:	58025430 	.word	0x58025430
 8104598:	58025444 	.word	0x58025444
 810459c:	58025458 	.word	0x58025458
 81045a0:	5802546c 	.word	0x5802546c
 81045a4:	58025480 	.word	0x58025480
 81045a8:	58025494 	.word	0x58025494
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08104740 <DMA_CalcBaseAndBitshift>:
=======
081045ac <DMA_CalcBaseAndBitshift>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8104740:	b480      	push	{r7}
 8104742:	b085      	sub	sp, #20
 8104744:	af00      	add	r7, sp, #0
 8104746:	6078      	str	r0, [r7, #4]
=======
 81045ac:	b480      	push	{r7}
 81045ae:	b085      	sub	sp, #20
 81045b0:	af00      	add	r7, sp, #0
 81045b2:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
<<<<<<< HEAD
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	681b      	ldr	r3, [r3, #0]
 810474c:	4a43      	ldr	r2, [pc, #268]	; (810485c <DMA_CalcBaseAndBitshift+0x11c>)
 810474e:	4293      	cmp	r3, r2
 8104750:	d04a      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 8104752:	687b      	ldr	r3, [r7, #4]
 8104754:	681b      	ldr	r3, [r3, #0]
 8104756:	4a42      	ldr	r2, [pc, #264]	; (8104860 <DMA_CalcBaseAndBitshift+0x120>)
 8104758:	4293      	cmp	r3, r2
 810475a:	d045      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	4a40      	ldr	r2, [pc, #256]	; (8104864 <DMA_CalcBaseAndBitshift+0x124>)
 8104762:	4293      	cmp	r3, r2
 8104764:	d040      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	681b      	ldr	r3, [r3, #0]
 810476a:	4a3f      	ldr	r2, [pc, #252]	; (8104868 <DMA_CalcBaseAndBitshift+0x128>)
 810476c:	4293      	cmp	r3, r2
 810476e:	d03b      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	681b      	ldr	r3, [r3, #0]
 8104774:	4a3d      	ldr	r2, [pc, #244]	; (810486c <DMA_CalcBaseAndBitshift+0x12c>)
 8104776:	4293      	cmp	r3, r2
 8104778:	d036      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	4a3c      	ldr	r2, [pc, #240]	; (8104870 <DMA_CalcBaseAndBitshift+0x130>)
 8104780:	4293      	cmp	r3, r2
 8104782:	d031      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	681b      	ldr	r3, [r3, #0]
 8104788:	4a3a      	ldr	r2, [pc, #232]	; (8104874 <DMA_CalcBaseAndBitshift+0x134>)
 810478a:	4293      	cmp	r3, r2
 810478c:	d02c      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	681b      	ldr	r3, [r3, #0]
 8104792:	4a39      	ldr	r2, [pc, #228]	; (8104878 <DMA_CalcBaseAndBitshift+0x138>)
 8104794:	4293      	cmp	r3, r2
 8104796:	d027      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	4a37      	ldr	r2, [pc, #220]	; (810487c <DMA_CalcBaseAndBitshift+0x13c>)
 810479e:	4293      	cmp	r3, r2
 81047a0:	d022      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	681b      	ldr	r3, [r3, #0]
 81047a6:	4a36      	ldr	r2, [pc, #216]	; (8104880 <DMA_CalcBaseAndBitshift+0x140>)
 81047a8:	4293      	cmp	r3, r2
 81047aa:	d01d      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	4a34      	ldr	r2, [pc, #208]	; (8104884 <DMA_CalcBaseAndBitshift+0x144>)
 81047b2:	4293      	cmp	r3, r2
 81047b4:	d018      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	681b      	ldr	r3, [r3, #0]
 81047ba:	4a33      	ldr	r2, [pc, #204]	; (8104888 <DMA_CalcBaseAndBitshift+0x148>)
 81047bc:	4293      	cmp	r3, r2
 81047be:	d013      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 81047c0:	687b      	ldr	r3, [r7, #4]
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	4a31      	ldr	r2, [pc, #196]	; (810488c <DMA_CalcBaseAndBitshift+0x14c>)
 81047c6:	4293      	cmp	r3, r2
 81047c8:	d00e      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	4a30      	ldr	r2, [pc, #192]	; (8104890 <DMA_CalcBaseAndBitshift+0x150>)
 81047d0:	4293      	cmp	r3, r2
 81047d2:	d009      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	4a2e      	ldr	r2, [pc, #184]	; (8104894 <DMA_CalcBaseAndBitshift+0x154>)
 81047da:	4293      	cmp	r3, r2
 81047dc:	d004      	beq.n	81047e8 <DMA_CalcBaseAndBitshift+0xa8>
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	4a2d      	ldr	r2, [pc, #180]	; (8104898 <DMA_CalcBaseAndBitshift+0x158>)
 81047e4:	4293      	cmp	r3, r2
 81047e6:	d101      	bne.n	81047ec <DMA_CalcBaseAndBitshift+0xac>
 81047e8:	2301      	movs	r3, #1
 81047ea:	e000      	b.n	81047ee <DMA_CalcBaseAndBitshift+0xae>
 81047ec:	2300      	movs	r3, #0
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	d026      	beq.n	8104840 <DMA_CalcBaseAndBitshift+0x100>
=======
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	4a43      	ldr	r2, [pc, #268]	; (81046c8 <DMA_CalcBaseAndBitshift+0x11c>)
 81045ba:	4293      	cmp	r3, r2
 81045bc:	d04a      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	4a42      	ldr	r2, [pc, #264]	; (81046cc <DMA_CalcBaseAndBitshift+0x120>)
 81045c4:	4293      	cmp	r3, r2
 81045c6:	d045      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	4a40      	ldr	r2, [pc, #256]	; (81046d0 <DMA_CalcBaseAndBitshift+0x124>)
 81045ce:	4293      	cmp	r3, r2
 81045d0:	d040      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	4a3f      	ldr	r2, [pc, #252]	; (81046d4 <DMA_CalcBaseAndBitshift+0x128>)
 81045d8:	4293      	cmp	r3, r2
 81045da:	d03b      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4a3d      	ldr	r2, [pc, #244]	; (81046d8 <DMA_CalcBaseAndBitshift+0x12c>)
 81045e2:	4293      	cmp	r3, r2
 81045e4:	d036      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	4a3c      	ldr	r2, [pc, #240]	; (81046dc <DMA_CalcBaseAndBitshift+0x130>)
 81045ec:	4293      	cmp	r3, r2
 81045ee:	d031      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	4a3a      	ldr	r2, [pc, #232]	; (81046e0 <DMA_CalcBaseAndBitshift+0x134>)
 81045f6:	4293      	cmp	r3, r2
 81045f8:	d02c      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	4a39      	ldr	r2, [pc, #228]	; (81046e4 <DMA_CalcBaseAndBitshift+0x138>)
 8104600:	4293      	cmp	r3, r2
 8104602:	d027      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	4a37      	ldr	r2, [pc, #220]	; (81046e8 <DMA_CalcBaseAndBitshift+0x13c>)
 810460a:	4293      	cmp	r3, r2
 810460c:	d022      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	4a36      	ldr	r2, [pc, #216]	; (81046ec <DMA_CalcBaseAndBitshift+0x140>)
 8104614:	4293      	cmp	r3, r2
 8104616:	d01d      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	4a34      	ldr	r2, [pc, #208]	; (81046f0 <DMA_CalcBaseAndBitshift+0x144>)
 810461e:	4293      	cmp	r3, r2
 8104620:	d018      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	681b      	ldr	r3, [r3, #0]
 8104626:	4a33      	ldr	r2, [pc, #204]	; (81046f4 <DMA_CalcBaseAndBitshift+0x148>)
 8104628:	4293      	cmp	r3, r2
 810462a:	d013      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	4a31      	ldr	r2, [pc, #196]	; (81046f8 <DMA_CalcBaseAndBitshift+0x14c>)
 8104632:	4293      	cmp	r3, r2
 8104634:	d00e      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	4a30      	ldr	r2, [pc, #192]	; (81046fc <DMA_CalcBaseAndBitshift+0x150>)
 810463c:	4293      	cmp	r3, r2
 810463e:	d009      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	681b      	ldr	r3, [r3, #0]
 8104644:	4a2e      	ldr	r2, [pc, #184]	; (8104700 <DMA_CalcBaseAndBitshift+0x154>)
 8104646:	4293      	cmp	r3, r2
 8104648:	d004      	beq.n	8104654 <DMA_CalcBaseAndBitshift+0xa8>
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	4a2d      	ldr	r2, [pc, #180]	; (8104704 <DMA_CalcBaseAndBitshift+0x158>)
 8104650:	4293      	cmp	r3, r2
 8104652:	d101      	bne.n	8104658 <DMA_CalcBaseAndBitshift+0xac>
 8104654:	2301      	movs	r3, #1
 8104656:	e000      	b.n	810465a <DMA_CalcBaseAndBitshift+0xae>
 8104658:	2300      	movs	r3, #0
 810465a:	2b00      	cmp	r3, #0
 810465c:	d026      	beq.n	81046ac <DMA_CalcBaseAndBitshift+0x100>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
<<<<<<< HEAD
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	b2db      	uxtb	r3, r3
 81047f8:	3b10      	subs	r3, #16
 81047fa:	4a28      	ldr	r2, [pc, #160]	; (810489c <DMA_CalcBaseAndBitshift+0x15c>)
 81047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8104800:	091b      	lsrs	r3, r3, #4
 8104802:	60fb      	str	r3, [r7, #12]
=======
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	b2db      	uxtb	r3, r3
 8104664:	3b10      	subs	r3, #16
 8104666:	4a28      	ldr	r2, [pc, #160]	; (8104708 <DMA_CalcBaseAndBitshift+0x15c>)
 8104668:	fba2 2303 	umull	r2, r3, r2, r3
 810466c:	091b      	lsrs	r3, r3, #4
 810466e:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
<<<<<<< HEAD
 8104804:	68fb      	ldr	r3, [r7, #12]
 8104806:	f003 0307 	and.w	r3, r3, #7
 810480a:	4a25      	ldr	r2, [pc, #148]	; (81048a0 <DMA_CalcBaseAndBitshift+0x160>)
 810480c:	5cd3      	ldrb	r3, [r2, r3]
 810480e:	461a      	mov	r2, r3
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	65da      	str	r2, [r3, #92]	; 0x5c
=======
 8104670:	68fb      	ldr	r3, [r7, #12]
 8104672:	f003 0307 	and.w	r3, r3, #7
 8104676:	4a25      	ldr	r2, [pc, #148]	; (810470c <DMA_CalcBaseAndBitshift+0x160>)
 8104678:	5cd3      	ldrb	r3, [r2, r3]
 810467a:	461a      	mov	r2, r3
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	65da      	str	r2, [r3, #92]	; 0x5c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    if (stream_number > 3U)
<<<<<<< HEAD
 8104814:	68fb      	ldr	r3, [r7, #12]
 8104816:	2b03      	cmp	r3, #3
 8104818:	d909      	bls.n	810482e <DMA_CalcBaseAndBitshift+0xee>
=======
 8104680:	68fb      	ldr	r3, [r7, #12]
 8104682:	2b03      	cmp	r3, #3
 8104684:	d909      	bls.n	810469a <DMA_CalcBaseAndBitshift+0xee>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
<<<<<<< HEAD
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104822:	f023 0303 	bic.w	r3, r3, #3
 8104826:	1d1a      	adds	r2, r3, #4
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	659a      	str	r2, [r3, #88]	; 0x58
 810482c:	e00e      	b.n	810484c <DMA_CalcBaseAndBitshift+0x10c>
=======
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810468e:	f023 0303 	bic.w	r3, r3, #3
 8104692:	1d1a      	adds	r2, r3, #4
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	659a      	str	r2, [r3, #88]	; 0x58
 8104698:	e00e      	b.n	81046b8 <DMA_CalcBaseAndBitshift+0x10c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104836:	f023 0303 	bic.w	r3, r3, #3
 810483a:	687a      	ldr	r2, [r7, #4]
 810483c:	6593      	str	r3, [r2, #88]	; 0x58
 810483e:	e005      	b.n	810484c <DMA_CalcBaseAndBitshift+0x10c>
=======
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81046a2:	f023 0303 	bic.w	r3, r3, #3
 81046a6:	687a      	ldr	r2, [r7, #4]
 81046a8:	6593      	str	r3, [r2, #88]	; 0x58
 81046aa:	e005      	b.n	81046b8 <DMA_CalcBaseAndBitshift+0x10c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
<<<<<<< HEAD
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	681b      	ldr	r3, [r3, #0]
 8104844:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	659a      	str	r2, [r3, #88]	; 0x58
=======
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  return hdma->StreamBaseAddress;
<<<<<<< HEAD
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
=======
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8104850:	4618      	mov	r0, r3
 8104852:	3714      	adds	r7, #20
 8104854:	46bd      	mov	sp, r7
 8104856:	f85d 7b04 	ldr.w	r7, [sp], #4
 810485a:	4770      	bx	lr
 810485c:	40020010 	.word	0x40020010
 8104860:	40020028 	.word	0x40020028
 8104864:	40020040 	.word	0x40020040
 8104868:	40020058 	.word	0x40020058
 810486c:	40020070 	.word	0x40020070
 8104870:	40020088 	.word	0x40020088
 8104874:	400200a0 	.word	0x400200a0
 8104878:	400200b8 	.word	0x400200b8
 810487c:	40020410 	.word	0x40020410
 8104880:	40020428 	.word	0x40020428
 8104884:	40020440 	.word	0x40020440
 8104888:	40020458 	.word	0x40020458
 810488c:	40020470 	.word	0x40020470
 8104890:	40020488 	.word	0x40020488
 8104894:	400204a0 	.word	0x400204a0
 8104898:	400204b8 	.word	0x400204b8
 810489c:	aaaaaaab 	.word	0xaaaaaaab
 81048a0:	0811498c 	.word	0x0811498c
=======
 81046bc:	4618      	mov	r0, r3
 81046be:	3714      	adds	r7, #20
 81046c0:	46bd      	mov	sp, r7
 81046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046c6:	4770      	bx	lr
 81046c8:	40020010 	.word	0x40020010
 81046cc:	40020028 	.word	0x40020028
 81046d0:	40020040 	.word	0x40020040
 81046d4:	40020058 	.word	0x40020058
 81046d8:	40020070 	.word	0x40020070
 81046dc:	40020088 	.word	0x40020088
 81046e0:	400200a0 	.word	0x400200a0
 81046e4:	400200b8 	.word	0x400200b8
 81046e8:	40020410 	.word	0x40020410
 81046ec:	40020428 	.word	0x40020428
 81046f0:	40020440 	.word	0x40020440
 81046f4:	40020458 	.word	0x40020458
 81046f8:	40020470 	.word	0x40020470
 81046fc:	40020488 	.word	0x40020488
 8104700:	400204a0 	.word	0x400204a0
 8104704:	400204b8 	.word	0x400204b8
 8104708:	aaaaaaab 	.word	0xaaaaaaab
 810470c:	081109a8 	.word	0x081109a8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081048a4 <DMA_CheckFifoParam>:
=======
08104710 <DMA_CheckFifoParam>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 81048a4:	b480      	push	{r7}
 81048a6:	b085      	sub	sp, #20
 81048a8:	af00      	add	r7, sp, #0
 81048aa:	6078      	str	r0, [r7, #4]
=======
 8104710:	b480      	push	{r7}
 8104712:	b085      	sub	sp, #20
 8104714:	af00      	add	r7, sp, #0
 8104716:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  HAL_StatusTypeDef status = HAL_OK;
<<<<<<< HEAD
 81048ac:	2300      	movs	r3, #0
 81048ae:	73fb      	strb	r3, [r7, #15]
=======
 8104718:	2300      	movs	r3, #0
 810471a:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
<<<<<<< HEAD
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	699b      	ldr	r3, [r3, #24]
 81048b4:	2b00      	cmp	r3, #0
 81048b6:	d120      	bne.n	81048fa <DMA_CheckFifoParam+0x56>
=======
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	699b      	ldr	r3, [r3, #24]
 8104720:	2b00      	cmp	r3, #0
 8104722:	d120      	bne.n	8104766 <DMA_CheckFifoParam+0x56>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    switch (hdma->Init.FIFOThreshold)
<<<<<<< HEAD
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048bc:	2b03      	cmp	r3, #3
 81048be:	d858      	bhi.n	8104972 <DMA_CheckFifoParam+0xce>
 81048c0:	a201      	add	r2, pc, #4	; (adr r2, 81048c8 <DMA_CheckFifoParam+0x24>)
 81048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048c6:	bf00      	nop
 81048c8:	081048d9 	.word	0x081048d9
 81048cc:	081048eb 	.word	0x081048eb
 81048d0:	081048d9 	.word	0x081048d9
 81048d4:	08104973 	.word	0x08104973
=======
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104728:	2b03      	cmp	r3, #3
 810472a:	d858      	bhi.n	81047de <DMA_CheckFifoParam+0xce>
 810472c:	a201      	add	r2, pc, #4	; (adr r2, 8104734 <DMA_CheckFifoParam+0x24>)
 810472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104732:	bf00      	nop
 8104734:	08104745 	.word	0x08104745
 8104738:	08104757 	.word	0x08104757
 810473c:	08104745 	.word	0x08104745
 8104740:	081047df 	.word	0x081047df
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81048e0:	2b00      	cmp	r3, #0
 81048e2:	d048      	beq.n	8104976 <DMA_CheckFifoParam+0xd2>
=======
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810474c:	2b00      	cmp	r3, #0
 810474e:	d048      	beq.n	81047e2 <DMA_CheckFifoParam+0xd2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          status = HAL_ERROR;
<<<<<<< HEAD
 81048e4:	2301      	movs	r3, #1
 81048e6:	73fb      	strb	r3, [r7, #15]
=======
 8104750:	2301      	movs	r3, #1
 8104752:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        break;
<<<<<<< HEAD
 81048e8:	e045      	b.n	8104976 <DMA_CheckFifoParam+0xd2>
=======
 8104754:	e045      	b.n	81047e2 <DMA_CheckFifoParam+0xd2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
<<<<<<< HEAD
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81048f2:	d142      	bne.n	810497a <DMA_CheckFifoParam+0xd6>
=======
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810475a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810475e:	d142      	bne.n	81047e6 <DMA_CheckFifoParam+0xd6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          status = HAL_ERROR;
<<<<<<< HEAD
 81048f4:	2301      	movs	r3, #1
 81048f6:	73fb      	strb	r3, [r7, #15]
=======
 8104760:	2301      	movs	r3, #1
 8104762:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        break;
<<<<<<< HEAD
 81048f8:	e03f      	b.n	810497a <DMA_CheckFifoParam+0xd6>
=======
 8104764:	e03f      	b.n	81047e6 <DMA_CheckFifoParam+0xd6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	699b      	ldr	r3, [r3, #24]
 81048fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104902:	d123      	bne.n	810494c <DMA_CheckFifoParam+0xa8>
=======
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	699b      	ldr	r3, [r3, #24]
 810476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810476e:	d123      	bne.n	81047b8 <DMA_CheckFifoParam+0xa8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    switch (hdma->Init.FIFOThreshold)
<<<<<<< HEAD
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104908:	2b03      	cmp	r3, #3
 810490a:	d838      	bhi.n	810497e <DMA_CheckFifoParam+0xda>
 810490c:	a201      	add	r2, pc, #4	; (adr r2, 8104914 <DMA_CheckFifoParam+0x70>)
 810490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104912:	bf00      	nop
 8104914:	08104925 	.word	0x08104925
 8104918:	0810492b 	.word	0x0810492b
 810491c:	08104925 	.word	0x08104925
 8104920:	0810493d 	.word	0x0810493d
=======
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104774:	2b03      	cmp	r3, #3
 8104776:	d838      	bhi.n	81047ea <DMA_CheckFifoParam+0xda>
 8104778:	a201      	add	r2, pc, #4	; (adr r2, 8104780 <DMA_CheckFifoParam+0x70>)
 810477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810477e:	bf00      	nop
 8104780:	08104791 	.word	0x08104791
 8104784:	08104797 	.word	0x08104797
 8104788:	08104791 	.word	0x08104791
 810478c:	081047a9 	.word	0x081047a9
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
<<<<<<< HEAD
 8104924:	2301      	movs	r3, #1
 8104926:	73fb      	strb	r3, [r7, #15]
=======
 8104790:	2301      	movs	r3, #1
 8104792:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8104928:	e030      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 8104794:	e030      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810492e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104932:	2b00      	cmp	r3, #0
 8104934:	d025      	beq.n	8104982 <DMA_CheckFifoParam+0xde>
=======
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810479a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810479e:	2b00      	cmp	r3, #0
 81047a0:	d025      	beq.n	81047ee <DMA_CheckFifoParam+0xde>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          status = HAL_ERROR;
<<<<<<< HEAD
 8104936:	2301      	movs	r3, #1
 8104938:	73fb      	strb	r3, [r7, #15]
=======
 81047a2:	2301      	movs	r3, #1
 81047a4:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        break;
<<<<<<< HEAD
 810493a:	e022      	b.n	8104982 <DMA_CheckFifoParam+0xde>
=======
 81047a6:	e022      	b.n	81047ee <DMA_CheckFifoParam+0xde>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
<<<<<<< HEAD
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104940:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104944:	d11f      	bne.n	8104986 <DMA_CheckFifoParam+0xe2>
=======
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81047b0:	d11f      	bne.n	81047f2 <DMA_CheckFifoParam+0xe2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          status = HAL_ERROR;
<<<<<<< HEAD
 8104946:	2301      	movs	r3, #1
 8104948:	73fb      	strb	r3, [r7, #15]
=======
 81047b2:	2301      	movs	r3, #1
 81047b4:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        break;
<<<<<<< HEAD
 810494a:	e01c      	b.n	8104986 <DMA_CheckFifoParam+0xe2>
=======
 81047b6:	e01c      	b.n	81047f2 <DMA_CheckFifoParam+0xe2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
<<<<<<< HEAD
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104950:	2b02      	cmp	r3, #2
 8104952:	d902      	bls.n	810495a <DMA_CheckFifoParam+0xb6>
 8104954:	2b03      	cmp	r3, #3
 8104956:	d003      	beq.n	8104960 <DMA_CheckFifoParam+0xbc>
=======
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047bc:	2b02      	cmp	r3, #2
 81047be:	d902      	bls.n	81047c6 <DMA_CheckFifoParam+0xb6>
 81047c0:	2b03      	cmp	r3, #3
 81047c2:	d003      	beq.n	81047cc <DMA_CheckFifoParam+0xbc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          status = HAL_ERROR;
        }
    break;

      default:
        break;
<<<<<<< HEAD
 8104958:	e018      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 81047c4:	e018      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        status = HAL_ERROR;
<<<<<<< HEAD
 810495a:	2301      	movs	r3, #1
 810495c:	73fb      	strb	r3, [r7, #15]
=======
 81047c6:	2301      	movs	r3, #1
 81047c8:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810495e:	e015      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 81047ca:	e015      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 8104960:	687b      	ldr	r3, [r7, #4]
 8104962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104968:	2b00      	cmp	r3, #0
 810496a:	d00e      	beq.n	810498a <DMA_CheckFifoParam+0xe6>
=======
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81047d4:	2b00      	cmp	r3, #0
 81047d6:	d00e      	beq.n	81047f6 <DMA_CheckFifoParam+0xe6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          status = HAL_ERROR;
<<<<<<< HEAD
 810496c:	2301      	movs	r3, #1
 810496e:	73fb      	strb	r3, [r7, #15]
=======
 81047d8:	2301      	movs	r3, #1
 81047da:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    break;
<<<<<<< HEAD
 8104970:	e00b      	b.n	810498a <DMA_CheckFifoParam+0xe6>
=======
 81047dc:	e00b      	b.n	81047f6 <DMA_CheckFifoParam+0xe6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8104972:	bf00      	nop
 8104974:	e00a      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 81047de:	bf00      	nop
 81047e0:	e00a      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8104976:	bf00      	nop
 8104978:	e008      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 81047e2:	bf00      	nop
 81047e4:	e008      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810497a:	bf00      	nop
 810497c:	e006      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 81047e6:	bf00      	nop
 81047e8:	e006      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810497e:	bf00      	nop
 8104980:	e004      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 81047ea:	bf00      	nop
 81047ec:	e004      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8104982:	bf00      	nop
 8104984:	e002      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 81047ee:	bf00      	nop
 81047f0:	e002      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8104986:	bf00      	nop
 8104988:	e000      	b.n	810498c <DMA_CheckFifoParam+0xe8>
=======
 81047f2:	bf00      	nop
 81047f4:	e000      	b.n	81047f8 <DMA_CheckFifoParam+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    break;
<<<<<<< HEAD
 810498a:	bf00      	nop
=======
 81047f6:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }

  return status;
<<<<<<< HEAD
 810498c:	7bfb      	ldrb	r3, [r7, #15]
=======
 81047f8:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810498e:	4618      	mov	r0, r3
 8104990:	3714      	adds	r7, #20
 8104992:	46bd      	mov	sp, r7
 8104994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104998:	4770      	bx	lr
 810499a:	bf00      	nop
=======
 81047fa:	4618      	mov	r0, r3
 81047fc:	3714      	adds	r7, #20
 81047fe:	46bd      	mov	sp, r7
 8104800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104804:	4770      	bx	lr
 8104806:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810499c <DMA_CalcDMAMUXChannelBaseAndMask>:
=======
08104808 <DMA_CalcDMAMUXChannelBaseAndMask>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 810499c:	b480      	push	{r7}
 810499e:	b085      	sub	sp, #20
 81049a0:	af00      	add	r7, sp, #0
 81049a2:	6078      	str	r0, [r7, #4]
=======
 8104808:	b480      	push	{r7}
 810480a:	b085      	sub	sp, #20
 810480c:	af00      	add	r7, sp, #0
 810480e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
<<<<<<< HEAD
 81049a4:	687b      	ldr	r3, [r7, #4]
 81049a6:	681b      	ldr	r3, [r3, #0]
 81049a8:	60bb      	str	r3, [r7, #8]
=======
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
<<<<<<< HEAD
 81049aa:	687b      	ldr	r3, [r7, #4]
 81049ac:	681b      	ldr	r3, [r3, #0]
 81049ae:	4a3a      	ldr	r2, [pc, #232]	; (8104a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81049b0:	4293      	cmp	r3, r2
 81049b2:	d022      	beq.n	81049fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	4a38      	ldr	r2, [pc, #224]	; (8104a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81049ba:	4293      	cmp	r3, r2
 81049bc:	d01d      	beq.n	81049fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	681b      	ldr	r3, [r3, #0]
 81049c2:	4a37      	ldr	r2, [pc, #220]	; (8104aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81049c4:	4293      	cmp	r3, r2
 81049c6:	d018      	beq.n	81049fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81049c8:	687b      	ldr	r3, [r7, #4]
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	4a35      	ldr	r2, [pc, #212]	; (8104aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 81049ce:	4293      	cmp	r3, r2
 81049d0:	d013      	beq.n	81049fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81049d2:	687b      	ldr	r3, [r7, #4]
 81049d4:	681b      	ldr	r3, [r3, #0]
 81049d6:	4a34      	ldr	r2, [pc, #208]	; (8104aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81049d8:	4293      	cmp	r3, r2
 81049da:	d00e      	beq.n	81049fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	681b      	ldr	r3, [r3, #0]
 81049e0:	4a32      	ldr	r2, [pc, #200]	; (8104aac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81049e2:	4293      	cmp	r3, r2
 81049e4:	d009      	beq.n	81049fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	4a31      	ldr	r2, [pc, #196]	; (8104ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81049ec:	4293      	cmp	r3, r2
 81049ee:	d004      	beq.n	81049fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	4a2f      	ldr	r2, [pc, #188]	; (8104ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81049f6:	4293      	cmp	r3, r2
 81049f8:	d101      	bne.n	81049fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81049fa:	2301      	movs	r3, #1
 81049fc:	e000      	b.n	8104a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81049fe:	2300      	movs	r3, #0
 8104a00:	2b00      	cmp	r3, #0
 8104a02:	d01c      	beq.n	8104a3e <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
=======
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	681b      	ldr	r3, [r3, #0]
 810481a:	4a3a      	ldr	r2, [pc, #232]	; (8104904 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810481c:	4293      	cmp	r3, r2
 810481e:	d022      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	4a38      	ldr	r2, [pc, #224]	; (8104908 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104826:	4293      	cmp	r3, r2
 8104828:	d01d      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810482a:	687b      	ldr	r3, [r7, #4]
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	4a37      	ldr	r2, [pc, #220]	; (810490c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104830:	4293      	cmp	r3, r2
 8104832:	d018      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	681b      	ldr	r3, [r3, #0]
 8104838:	4a35      	ldr	r2, [pc, #212]	; (8104910 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810483a:	4293      	cmp	r3, r2
 810483c:	d013      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	681b      	ldr	r3, [r3, #0]
 8104842:	4a34      	ldr	r2, [pc, #208]	; (8104914 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104844:	4293      	cmp	r3, r2
 8104846:	d00e      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	681b      	ldr	r3, [r3, #0]
 810484c:	4a32      	ldr	r2, [pc, #200]	; (8104918 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810484e:	4293      	cmp	r3, r2
 8104850:	d009      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	681b      	ldr	r3, [r3, #0]
 8104856:	4a31      	ldr	r2, [pc, #196]	; (810491c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104858:	4293      	cmp	r3, r2
 810485a:	d004      	beq.n	8104866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	681b      	ldr	r3, [r3, #0]
 8104860:	4a2f      	ldr	r2, [pc, #188]	; (8104920 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104862:	4293      	cmp	r3, r2
 8104864:	d101      	bne.n	810486a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104866:	2301      	movs	r3, #1
 8104868:	e000      	b.n	810486c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810486a:	2300      	movs	r3, #0
 810486c:	2b00      	cmp	r3, #0
 810486e:	d01c      	beq.n	81048aa <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
<<<<<<< HEAD
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	b2db      	uxtb	r3, r3
 8104a0a:	3b08      	subs	r3, #8
 8104a0c:	4a2a      	ldr	r2, [pc, #168]	; (8104ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8104a12:	091b      	lsrs	r3, r3, #4
 8104a14:	60fb      	str	r3, [r7, #12]
=======
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	681b      	ldr	r3, [r3, #0]
 8104874:	b2db      	uxtb	r3, r3
 8104876:	3b08      	subs	r3, #8
 8104878:	4a2a      	ldr	r2, [pc, #168]	; (8104924 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810487a:	fba2 2303 	umull	r2, r3, r2, r3
 810487e:	091b      	lsrs	r3, r3, #4
 8104880:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
<<<<<<< HEAD
 8104a16:	68fb      	ldr	r3, [r7, #12]
 8104a18:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104a1c:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104a20:	009b      	lsls	r3, r3, #2
 8104a22:	461a      	mov	r2, r3
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	661a      	str	r2, [r3, #96]	; 0x60
=======
 8104882:	68fb      	ldr	r3, [r7, #12]
 8104884:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104888:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 810488c:	009b      	lsls	r3, r3, #2
 810488e:	461a      	mov	r2, r3
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
<<<<<<< HEAD
 8104a28:	687b      	ldr	r3, [r7, #4]
 8104a2a:	4a24      	ldr	r2, [pc, #144]	; (8104abc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104a2c:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	4a24      	ldr	r2, [pc, #144]	; (8104928 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104898:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
<<<<<<< HEAD
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	f003 031f 	and.w	r3, r3, #31
 8104a34:	2201      	movs	r2, #1
 8104a36:	409a      	lsls	r2, r3
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	669a      	str	r2, [r3, #104]	; 0x68
=======
 810489a:	68fb      	ldr	r3, [r7, #12]
 810489c:	f003 031f 	and.w	r3, r3, #31
 81048a0:	2201      	movs	r2, #1
 81048a2:	409a      	lsls	r2, r3
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
<<<<<<< HEAD
 8104a3c:	e026      	b.n	8104a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
=======
 81048a8:	e026      	b.n	81048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
<<<<<<< HEAD
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	681b      	ldr	r3, [r3, #0]
 8104a42:	b2db      	uxtb	r3, r3
 8104a44:	3b10      	subs	r3, #16
 8104a46:	4a1e      	ldr	r2, [pc, #120]	; (8104ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104a48:	fba2 2303 	umull	r2, r3, r2, r3
 8104a4c:	091b      	lsrs	r3, r3, #4
 8104a4e:	60fb      	str	r3, [r7, #12]
=======
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	b2db      	uxtb	r3, r3
 81048b0:	3b10      	subs	r3, #16
 81048b2:	4a1e      	ldr	r2, [pc, #120]	; (810492c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81048b4:	fba2 2303 	umull	r2, r3, r2, r3
 81048b8:	091b      	lsrs	r3, r3, #4
 81048ba:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
<<<<<<< HEAD
 8104a50:	68bb      	ldr	r3, [r7, #8]
 8104a52:	4a1c      	ldr	r2, [pc, #112]	; (8104ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104a54:	4293      	cmp	r3, r2
 8104a56:	d806      	bhi.n	8104a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104a58:	68bb      	ldr	r3, [r7, #8]
 8104a5a:	4a1b      	ldr	r2, [pc, #108]	; (8104ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104a5c:	4293      	cmp	r3, r2
 8104a5e:	d902      	bls.n	8104a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
=======
 81048bc:	68bb      	ldr	r3, [r7, #8]
 81048be:	4a1c      	ldr	r2, [pc, #112]	; (8104930 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81048c0:	4293      	cmp	r3, r2
 81048c2:	d806      	bhi.n	81048d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81048c4:	68bb      	ldr	r3, [r7, #8]
 81048c6:	4a1b      	ldr	r2, [pc, #108]	; (8104934 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81048c8:	4293      	cmp	r3, r2
 81048ca:	d902      	bls.n	81048d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      stream_number += 8U;
<<<<<<< HEAD
 8104a60:	68fb      	ldr	r3, [r7, #12]
 8104a62:	3308      	adds	r3, #8
 8104a64:	60fb      	str	r3, [r7, #12]
=======
 81048cc:	68fb      	ldr	r3, [r7, #12]
 81048ce:	3308      	adds	r3, #8
 81048d0:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
<<<<<<< HEAD
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8104a6c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8104a70:	009b      	lsls	r3, r3, #2
 8104a72:	461a      	mov	r2, r3
 8104a74:	687b      	ldr	r3, [r7, #4]
 8104a76:	661a      	str	r2, [r3, #96]	; 0x60
=======
 81048d2:	68fb      	ldr	r3, [r7, #12]
 81048d4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81048d8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81048dc:	009b      	lsls	r3, r3, #2
 81048de:	461a      	mov	r2, r3
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
<<<<<<< HEAD
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	4a14      	ldr	r2, [pc, #80]	; (8104acc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104a7c:	665a      	str	r2, [r3, #100]	; 0x64
=======
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	4a14      	ldr	r2, [pc, #80]	; (8104938 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81048e8:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
<<<<<<< HEAD
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	f003 031f 	and.w	r3, r3, #31
 8104a84:	2201      	movs	r2, #1
 8104a86:	409a      	lsls	r2, r3
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	669a      	str	r2, [r3, #104]	; 0x68
=======
 81048ea:	68fb      	ldr	r3, [r7, #12]
 81048ec:	f003 031f 	and.w	r3, r3, #31
 81048f0:	2201      	movs	r2, #1
 81048f2:	409a      	lsls	r2, r3
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8104a8c:	bf00      	nop
 8104a8e:	3714      	adds	r7, #20
 8104a90:	46bd      	mov	sp, r7
 8104a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a96:	4770      	bx	lr
 8104a98:	58025408 	.word	0x58025408
 8104a9c:	5802541c 	.word	0x5802541c
 8104aa0:	58025430 	.word	0x58025430
 8104aa4:	58025444 	.word	0x58025444
 8104aa8:	58025458 	.word	0x58025458
 8104aac:	5802546c 	.word	0x5802546c
 8104ab0:	58025480 	.word	0x58025480
 8104ab4:	58025494 	.word	0x58025494
 8104ab8:	cccccccd 	.word	0xcccccccd
 8104abc:	58025880 	.word	0x58025880
 8104ac0:	aaaaaaab 	.word	0xaaaaaaab
 8104ac4:	400204b8 	.word	0x400204b8
 8104ac8:	4002040f 	.word	0x4002040f
 8104acc:	40020880 	.word	0x40020880
=======
 81048f8:	bf00      	nop
 81048fa:	3714      	adds	r7, #20
 81048fc:	46bd      	mov	sp, r7
 81048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104902:	4770      	bx	lr
 8104904:	58025408 	.word	0x58025408
 8104908:	5802541c 	.word	0x5802541c
 810490c:	58025430 	.word	0x58025430
 8104910:	58025444 	.word	0x58025444
 8104914:	58025458 	.word	0x58025458
 8104918:	5802546c 	.word	0x5802546c
 810491c:	58025480 	.word	0x58025480
 8104920:	58025494 	.word	0x58025494
 8104924:	cccccccd 	.word	0xcccccccd
 8104928:	58025880 	.word	0x58025880
 810492c:	aaaaaaab 	.word	0xaaaaaaab
 8104930:	400204b8 	.word	0x400204b8
 8104934:	4002040f 	.word	0x4002040f
 8104938:	40020880 	.word	0x40020880
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08104ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
=======
0810493c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8104ad0:	b480      	push	{r7}
 8104ad2:	b085      	sub	sp, #20
 8104ad4:	af00      	add	r7, sp, #0
 8104ad6:	6078      	str	r0, [r7, #4]
=======
 810493c:	b480      	push	{r7}
 810493e:	b085      	sub	sp, #20
 8104940:	af00      	add	r7, sp, #0
 8104942:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
<<<<<<< HEAD
 8104ad8:	687b      	ldr	r3, [r7, #4]
 8104ada:	685b      	ldr	r3, [r3, #4]
 8104adc:	b2db      	uxtb	r3, r3
 8104ade:	60fb      	str	r3, [r7, #12]
=======
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	685b      	ldr	r3, [r3, #4]
 8104948:	b2db      	uxtb	r3, r3
 810494a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
<<<<<<< HEAD
 8104ae0:	68fb      	ldr	r3, [r7, #12]
 8104ae2:	2b00      	cmp	r3, #0
 8104ae4:	d04a      	beq.n	8104b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104ae6:	68fb      	ldr	r3, [r7, #12]
 8104ae8:	2b08      	cmp	r3, #8
 8104aea:	d847      	bhi.n	8104b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
=======
 810494c:	68fb      	ldr	r3, [r7, #12]
 810494e:	2b00      	cmp	r3, #0
 8104950:	d04a      	beq.n	81049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	2b08      	cmp	r3, #8
 8104956:	d847      	bhi.n	81049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
<<<<<<< HEAD
 8104aec:	687b      	ldr	r3, [r7, #4]
 8104aee:	681b      	ldr	r3, [r3, #0]
 8104af0:	4a25      	ldr	r2, [pc, #148]	; (8104b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104af2:	4293      	cmp	r3, r2
 8104af4:	d022      	beq.n	8104b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	4a24      	ldr	r2, [pc, #144]	; (8104b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104afc:	4293      	cmp	r3, r2
 8104afe:	d01d      	beq.n	8104b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	4a22      	ldr	r2, [pc, #136]	; (8104b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104b06:	4293      	cmp	r3, r2
 8104b08:	d018      	beq.n	8104b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	4a21      	ldr	r2, [pc, #132]	; (8104b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104b10:	4293      	cmp	r3, r2
 8104b12:	d013      	beq.n	8104b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	4a1f      	ldr	r2, [pc, #124]	; (8104b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104b1a:	4293      	cmp	r3, r2
 8104b1c:	d00e      	beq.n	8104b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	681b      	ldr	r3, [r3, #0]
 8104b22:	4a1e      	ldr	r2, [pc, #120]	; (8104b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104b24:	4293      	cmp	r3, r2
 8104b26:	d009      	beq.n	8104b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	4a1c      	ldr	r2, [pc, #112]	; (8104ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104b2e:	4293      	cmp	r3, r2
 8104b30:	d004      	beq.n	8104b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	4a1b      	ldr	r2, [pc, #108]	; (8104ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104b38:	4293      	cmp	r3, r2
 8104b3a:	d101      	bne.n	8104b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104b3c:	2301      	movs	r3, #1
 8104b3e:	e000      	b.n	8104b42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104b40:	2300      	movs	r3, #0
 8104b42:	2b00      	cmp	r3, #0
 8104b44:	d00a      	beq.n	8104b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
=======
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	4a25      	ldr	r2, [pc, #148]	; (81049f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810495e:	4293      	cmp	r3, r2
 8104960:	d022      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	4a24      	ldr	r2, [pc, #144]	; (81049f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104968:	4293      	cmp	r3, r2
 810496a:	d01d      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	681b      	ldr	r3, [r3, #0]
 8104970:	4a22      	ldr	r2, [pc, #136]	; (81049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104972:	4293      	cmp	r3, r2
 8104974:	d018      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	4a21      	ldr	r2, [pc, #132]	; (8104a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 810497c:	4293      	cmp	r3, r2
 810497e:	d013      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	681b      	ldr	r3, [r3, #0]
 8104984:	4a1f      	ldr	r2, [pc, #124]	; (8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104986:	4293      	cmp	r3, r2
 8104988:	d00e      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	681b      	ldr	r3, [r3, #0]
 810498e:	4a1e      	ldr	r2, [pc, #120]	; (8104a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104990:	4293      	cmp	r3, r2
 8104992:	d009      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	4a1c      	ldr	r2, [pc, #112]	; (8104a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810499a:	4293      	cmp	r3, r2
 810499c:	d004      	beq.n	81049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	4a1b      	ldr	r2, [pc, #108]	; (8104a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81049a4:	4293      	cmp	r3, r2
 81049a6:	d101      	bne.n	81049ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81049a8:	2301      	movs	r3, #1
 81049aa:	e000      	b.n	81049ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81049ac:	2300      	movs	r3, #0
 81049ae:	2b00      	cmp	r3, #0
 81049b0:	d00a      	beq.n	81049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
<<<<<<< HEAD
 8104b46:	68fa      	ldr	r2, [r7, #12]
 8104b48:	4b17      	ldr	r3, [pc, #92]	; (8104ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104b4a:	4413      	add	r3, r2
 8104b4c:	009b      	lsls	r3, r3, #2
 8104b4e:	461a      	mov	r2, r3
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 81049b2:	68fa      	ldr	r2, [r7, #12]
 81049b4:	4b17      	ldr	r3, [pc, #92]	; (8104a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81049b6:	4413      	add	r3, r2
 81049b8:	009b      	lsls	r3, r3, #2
 81049ba:	461a      	mov	r2, r3
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
<<<<<<< HEAD
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	4a15      	ldr	r2, [pc, #84]	; (8104bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104b58:	671a      	str	r2, [r3, #112]	; 0x70
 8104b5a:	e009      	b.n	8104b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
=======
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	4a15      	ldr	r2, [pc, #84]	; (8104a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81049c4:	671a      	str	r2, [r3, #112]	; 0x70
 81049c6:	e009      	b.n	81049dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
<<<<<<< HEAD
 8104b5c:	68fa      	ldr	r2, [r7, #12]
 8104b5e:	4b14      	ldr	r3, [pc, #80]	; (8104bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104b60:	4413      	add	r3, r2
 8104b62:	009b      	lsls	r3, r3, #2
 8104b64:	461a      	mov	r2, r3
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 81049c8:	68fa      	ldr	r2, [r7, #12]
 81049ca:	4b14      	ldr	r3, [pc, #80]	; (8104a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81049cc:	4413      	add	r3, r2
 81049ce:	009b      	lsls	r3, r3, #2
 81049d0:	461a      	mov	r2, r3
 81049d2:	687b      	ldr	r3, [r7, #4]
 81049d4:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
<<<<<<< HEAD
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	4a11      	ldr	r2, [pc, #68]	; (8104bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104b6e:	671a      	str	r2, [r3, #112]	; 0x70
=======
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	4a11      	ldr	r2, [pc, #68]	; (8104a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81049da:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
<<<<<<< HEAD
 8104b70:	68fb      	ldr	r3, [r7, #12]
 8104b72:	3b01      	subs	r3, #1
 8104b74:	2201      	movs	r2, #1
 8104b76:	409a      	lsls	r2, r3
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	675a      	str	r2, [r3, #116]	; 0x74
=======
 81049dc:	68fb      	ldr	r3, [r7, #12]
 81049de:	3b01      	subs	r3, #1
 81049e0:	2201      	movs	r2, #1
 81049e2:	409a      	lsls	r2, r3
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 8104b7c:	bf00      	nop
 8104b7e:	3714      	adds	r7, #20
 8104b80:	46bd      	mov	sp, r7
 8104b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b86:	4770      	bx	lr
 8104b88:	58025408 	.word	0x58025408
 8104b8c:	5802541c 	.word	0x5802541c
 8104b90:	58025430 	.word	0x58025430
 8104b94:	58025444 	.word	0x58025444
 8104b98:	58025458 	.word	0x58025458
 8104b9c:	5802546c 	.word	0x5802546c
 8104ba0:	58025480 	.word	0x58025480
 8104ba4:	58025494 	.word	0x58025494
 8104ba8:	1600963f 	.word	0x1600963f
 8104bac:	58025940 	.word	0x58025940
 8104bb0:	1000823f 	.word	0x1000823f
 8104bb4:	40020940 	.word	0x40020940
=======
 81049e8:	bf00      	nop
 81049ea:	3714      	adds	r7, #20
 81049ec:	46bd      	mov	sp, r7
 81049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049f2:	4770      	bx	lr
 81049f4:	58025408 	.word	0x58025408
 81049f8:	5802541c 	.word	0x5802541c
 81049fc:	58025430 	.word	0x58025430
 8104a00:	58025444 	.word	0x58025444
 8104a04:	58025458 	.word	0x58025458
 8104a08:	5802546c 	.word	0x5802546c
 8104a0c:	58025480 	.word	0x58025480
 8104a10:	58025494 	.word	0x58025494
 8104a14:	1600963f 	.word	0x1600963f
 8104a18:	58025940 	.word	0x58025940
 8104a1c:	1000823f 	.word	0x1000823f
 8104a20:	40020940 	.word	0x40020940
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08104bb8 <HAL_GPIO_Init>:
=======
08104a24 <HAL_GPIO_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8104bb8:	b480      	push	{r7}
 8104bba:	b089      	sub	sp, #36	; 0x24
 8104bbc:	af00      	add	r7, sp, #0
 8104bbe:	6078      	str	r0, [r7, #4]
 8104bc0:	6039      	str	r1, [r7, #0]
=======
 8104a24:	b480      	push	{r7}
 8104a26:	b089      	sub	sp, #36	; 0x24
 8104a28:	af00      	add	r7, sp, #0
 8104a2a:	6078      	str	r0, [r7, #4]
 8104a2c:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t position = 0x00U;
<<<<<<< HEAD
 8104bc2:	2300      	movs	r3, #0
 8104bc4:	61fb      	str	r3, [r7, #28]
=======
 8104a2e:	2300      	movs	r3, #0
 8104a30:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
<<<<<<< HEAD
 8104bc6:	4b89      	ldr	r3, [pc, #548]	; (8104dec <HAL_GPIO_Init+0x234>)
 8104bc8:	617b      	str	r3, [r7, #20]
=======
 8104a32:	4b89      	ldr	r3, [pc, #548]	; (8104c58 <HAL_GPIO_Init+0x234>)
 8104a34:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
<<<<<<< HEAD
 8104bca:	e194      	b.n	8104ef6 <HAL_GPIO_Init+0x33e>
=======
 8104a36:	e194      	b.n	8104d62 <HAL_GPIO_Init+0x33e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
<<<<<<< HEAD
 8104bcc:	683b      	ldr	r3, [r7, #0]
 8104bce:	681a      	ldr	r2, [r3, #0]
 8104bd0:	2101      	movs	r1, #1
 8104bd2:	69fb      	ldr	r3, [r7, #28]
 8104bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8104bd8:	4013      	ands	r3, r2
 8104bda:	613b      	str	r3, [r7, #16]
=======
 8104a38:	683b      	ldr	r3, [r7, #0]
 8104a3a:	681a      	ldr	r2, [r3, #0]
 8104a3c:	2101      	movs	r1, #1
 8104a3e:	69fb      	ldr	r3, [r7, #28]
 8104a40:	fa01 f303 	lsl.w	r3, r1, r3
 8104a44:	4013      	ands	r3, r2
 8104a46:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    if (iocurrent != 0x00U)
<<<<<<< HEAD
 8104bdc:	693b      	ldr	r3, [r7, #16]
 8104bde:	2b00      	cmp	r3, #0
 8104be0:	f000 8186 	beq.w	8104ef0 <HAL_GPIO_Init+0x338>
=======
 8104a48:	693b      	ldr	r3, [r7, #16]
 8104a4a:	2b00      	cmp	r3, #0
 8104a4c:	f000 8186 	beq.w	8104d5c <HAL_GPIO_Init+0x338>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 8104be4:	683b      	ldr	r3, [r7, #0]
 8104be6:	685b      	ldr	r3, [r3, #4]
 8104be8:	2b01      	cmp	r3, #1
 8104bea:	d00b      	beq.n	8104c04 <HAL_GPIO_Init+0x4c>
 8104bec:	683b      	ldr	r3, [r7, #0]
 8104bee:	685b      	ldr	r3, [r3, #4]
 8104bf0:	2b02      	cmp	r3, #2
 8104bf2:	d007      	beq.n	8104c04 <HAL_GPIO_Init+0x4c>
=======
 8104a50:	683b      	ldr	r3, [r7, #0]
 8104a52:	685b      	ldr	r3, [r3, #4]
 8104a54:	2b01      	cmp	r3, #1
 8104a56:	d00b      	beq.n	8104a70 <HAL_GPIO_Init+0x4c>
 8104a58:	683b      	ldr	r3, [r7, #0]
 8104a5a:	685b      	ldr	r3, [r3, #4]
 8104a5c:	2b02      	cmp	r3, #2
 8104a5e:	d007      	beq.n	8104a70 <HAL_GPIO_Init+0x4c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 8104bf4:	683b      	ldr	r3, [r7, #0]
 8104bf6:	685b      	ldr	r3, [r3, #4]
=======
 8104a60:	683b      	ldr	r3, [r7, #0]
 8104a62:	685b      	ldr	r3, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 8104bf8:	2b11      	cmp	r3, #17
 8104bfa:	d003      	beq.n	8104c04 <HAL_GPIO_Init+0x4c>
=======
 8104a64:	2b11      	cmp	r3, #17
 8104a66:	d003      	beq.n	8104a70 <HAL_GPIO_Init+0x4c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 8104bfc:	683b      	ldr	r3, [r7, #0]
 8104bfe:	685b      	ldr	r3, [r3, #4]
 8104c00:	2b12      	cmp	r3, #18
 8104c02:	d130      	bne.n	8104c66 <HAL_GPIO_Init+0xae>
=======
 8104a68:	683b      	ldr	r3, [r7, #0]
 8104a6a:	685b      	ldr	r3, [r3, #4]
 8104a6c:	2b12      	cmp	r3, #18
 8104a6e:	d130      	bne.n	8104ad2 <HAL_GPIO_Init+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	689b      	ldr	r3, [r3, #8]
 8104c08:	61bb      	str	r3, [r7, #24]
=======
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	689b      	ldr	r3, [r3, #8]
 8104a74:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
<<<<<<< HEAD
 8104c0a:	69fb      	ldr	r3, [r7, #28]
 8104c0c:	005b      	lsls	r3, r3, #1
 8104c0e:	2203      	movs	r2, #3
 8104c10:	fa02 f303 	lsl.w	r3, r2, r3
 8104c14:	43db      	mvns	r3, r3
 8104c16:	69ba      	ldr	r2, [r7, #24]
 8104c18:	4013      	ands	r3, r2
 8104c1a:	61bb      	str	r3, [r7, #24]
=======
 8104a76:	69fb      	ldr	r3, [r7, #28]
 8104a78:	005b      	lsls	r3, r3, #1
 8104a7a:	2203      	movs	r2, #3
 8104a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8104a80:	43db      	mvns	r3, r3
 8104a82:	69ba      	ldr	r2, [r7, #24]
 8104a84:	4013      	ands	r3, r2
 8104a86:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp |= (GPIO_Init->Speed << (position * 2U));
<<<<<<< HEAD
 8104c1c:	683b      	ldr	r3, [r7, #0]
 8104c1e:	68da      	ldr	r2, [r3, #12]
 8104c20:	69fb      	ldr	r3, [r7, #28]
 8104c22:	005b      	lsls	r3, r3, #1
 8104c24:	fa02 f303 	lsl.w	r3, r2, r3
 8104c28:	69ba      	ldr	r2, [r7, #24]
 8104c2a:	4313      	orrs	r3, r2
 8104c2c:	61bb      	str	r3, [r7, #24]
=======
 8104a88:	683b      	ldr	r3, [r7, #0]
 8104a8a:	68da      	ldr	r2, [r3, #12]
 8104a8c:	69fb      	ldr	r3, [r7, #28]
 8104a8e:	005b      	lsls	r3, r3, #1
 8104a90:	fa02 f303 	lsl.w	r3, r2, r3
 8104a94:	69ba      	ldr	r2, [r7, #24]
 8104a96:	4313      	orrs	r3, r2
 8104a98:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        GPIOx->OSPEEDR = temp;
<<<<<<< HEAD
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	69ba      	ldr	r2, [r7, #24]
 8104c32:	609a      	str	r2, [r3, #8]
=======
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	69ba      	ldr	r2, [r7, #24]
 8104a9e:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
<<<<<<< HEAD
 8104c34:	687b      	ldr	r3, [r7, #4]
 8104c36:	685b      	ldr	r3, [r3, #4]
 8104c38:	61bb      	str	r3, [r7, #24]
=======
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	685b      	ldr	r3, [r3, #4]
 8104aa4:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
<<<<<<< HEAD
 8104c3a:	2201      	movs	r2, #1
 8104c3c:	69fb      	ldr	r3, [r7, #28]
 8104c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c42:	43db      	mvns	r3, r3
 8104c44:	69ba      	ldr	r2, [r7, #24]
 8104c46:	4013      	ands	r3, r2
 8104c48:	61bb      	str	r3, [r7, #24]
=======
 8104aa6:	2201      	movs	r2, #1
 8104aa8:	69fb      	ldr	r3, [r7, #28]
 8104aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8104aae:	43db      	mvns	r3, r3
 8104ab0:	69ba      	ldr	r2, [r7, #24]
 8104ab2:	4013      	ands	r3, r2
 8104ab4:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
<<<<<<< HEAD
 8104c4a:	683b      	ldr	r3, [r7, #0]
 8104c4c:	685b      	ldr	r3, [r3, #4]
 8104c4e:	091b      	lsrs	r3, r3, #4
 8104c50:	f003 0201 	and.w	r2, r3, #1
 8104c54:	69fb      	ldr	r3, [r7, #28]
 8104c56:	fa02 f303 	lsl.w	r3, r2, r3
 8104c5a:	69ba      	ldr	r2, [r7, #24]
 8104c5c:	4313      	orrs	r3, r2
 8104c5e:	61bb      	str	r3, [r7, #24]
=======
 8104ab6:	683b      	ldr	r3, [r7, #0]
 8104ab8:	685b      	ldr	r3, [r3, #4]
 8104aba:	091b      	lsrs	r3, r3, #4
 8104abc:	f003 0201 	and.w	r2, r3, #1
 8104ac0:	69fb      	ldr	r3, [r7, #28]
 8104ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8104ac6:	69ba      	ldr	r2, [r7, #24]
 8104ac8:	4313      	orrs	r3, r2
 8104aca:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        GPIOx->OTYPER = temp;
<<<<<<< HEAD
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	69ba      	ldr	r2, [r7, #24]
 8104c64:	605a      	str	r2, [r3, #4]
=======
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	69ba      	ldr	r2, [r7, #24]
 8104ad0:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8104c66:	687b      	ldr	r3, [r7, #4]
 8104c68:	68db      	ldr	r3, [r3, #12]
 8104c6a:	61bb      	str	r3, [r7, #24]
=======
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	68db      	ldr	r3, [r3, #12]
 8104ad6:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
<<<<<<< HEAD
 8104c6c:	69fb      	ldr	r3, [r7, #28]
 8104c6e:	005b      	lsls	r3, r3, #1
 8104c70:	2203      	movs	r2, #3
 8104c72:	fa02 f303 	lsl.w	r3, r2, r3
 8104c76:	43db      	mvns	r3, r3
 8104c78:	69ba      	ldr	r2, [r7, #24]
 8104c7a:	4013      	ands	r3, r2
 8104c7c:	61bb      	str	r3, [r7, #24]
=======
 8104ad8:	69fb      	ldr	r3, [r7, #28]
 8104ada:	005b      	lsls	r3, r3, #1
 8104adc:	2203      	movs	r2, #3
 8104ade:	fa02 f303 	lsl.w	r3, r2, r3
 8104ae2:	43db      	mvns	r3, r3
 8104ae4:	69ba      	ldr	r2, [r7, #24]
 8104ae6:	4013      	ands	r3, r2
 8104ae8:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      temp |= ((GPIO_Init->Pull) << (position * 2U));
<<<<<<< HEAD
 8104c7e:	683b      	ldr	r3, [r7, #0]
 8104c80:	689a      	ldr	r2, [r3, #8]
 8104c82:	69fb      	ldr	r3, [r7, #28]
 8104c84:	005b      	lsls	r3, r3, #1
 8104c86:	fa02 f303 	lsl.w	r3, r2, r3
 8104c8a:	69ba      	ldr	r2, [r7, #24]
 8104c8c:	4313      	orrs	r3, r2
 8104c8e:	61bb      	str	r3, [r7, #24]
=======
 8104aea:	683b      	ldr	r3, [r7, #0]
 8104aec:	689a      	ldr	r2, [r3, #8]
 8104aee:	69fb      	ldr	r3, [r7, #28]
 8104af0:	005b      	lsls	r3, r3, #1
 8104af2:	fa02 f303 	lsl.w	r3, r2, r3
 8104af6:	69ba      	ldr	r2, [r7, #24]
 8104af8:	4313      	orrs	r3, r2
 8104afa:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      GPIOx->PUPDR = temp;
<<<<<<< HEAD
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	69ba      	ldr	r2, [r7, #24]
 8104c94:	60da      	str	r2, [r3, #12]
=======
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	69ba      	ldr	r2, [r7, #24]
 8104b00:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 8104c96:	683b      	ldr	r3, [r7, #0]
 8104c98:	685b      	ldr	r3, [r3, #4]
 8104c9a:	2b02      	cmp	r3, #2
 8104c9c:	d003      	beq.n	8104ca6 <HAL_GPIO_Init+0xee>
 8104c9e:	683b      	ldr	r3, [r7, #0]
 8104ca0:	685b      	ldr	r3, [r3, #4]
 8104ca2:	2b12      	cmp	r3, #18
 8104ca4:	d123      	bne.n	8104cee <HAL_GPIO_Init+0x136>
=======
 8104b02:	683b      	ldr	r3, [r7, #0]
 8104b04:	685b      	ldr	r3, [r3, #4]
 8104b06:	2b02      	cmp	r3, #2
 8104b08:	d003      	beq.n	8104b12 <HAL_GPIO_Init+0xee>
 8104b0a:	683b      	ldr	r3, [r7, #0]
 8104b0c:	685b      	ldr	r3, [r3, #4]
 8104b0e:	2b12      	cmp	r3, #18
 8104b10:	d123      	bne.n	8104b5a <HAL_GPIO_Init+0x136>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8104ca6:	69fb      	ldr	r3, [r7, #28]
 8104ca8:	08da      	lsrs	r2, r3, #3
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	3208      	adds	r2, #8
 8104cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104cb2:	61bb      	str	r3, [r7, #24]
=======
 8104b12:	69fb      	ldr	r3, [r7, #28]
 8104b14:	08da      	lsrs	r2, r3, #3
 8104b16:	687b      	ldr	r3, [r7, #4]
 8104b18:	3208      	adds	r2, #8
 8104b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104b1e:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
<<<<<<< HEAD
 8104cb4:	69fb      	ldr	r3, [r7, #28]
 8104cb6:	f003 0307 	and.w	r3, r3, #7
 8104cba:	009b      	lsls	r3, r3, #2
 8104cbc:	220f      	movs	r2, #15
 8104cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8104cc2:	43db      	mvns	r3, r3
 8104cc4:	69ba      	ldr	r2, [r7, #24]
 8104cc6:	4013      	ands	r3, r2
 8104cc8:	61bb      	str	r3, [r7, #24]
=======
 8104b20:	69fb      	ldr	r3, [r7, #28]
 8104b22:	f003 0307 	and.w	r3, r3, #7
 8104b26:	009b      	lsls	r3, r3, #2
 8104b28:	220f      	movs	r2, #15
 8104b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8104b2e:	43db      	mvns	r3, r3
 8104b30:	69ba      	ldr	r2, [r7, #24]
 8104b32:	4013      	ands	r3, r2
 8104b34:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
<<<<<<< HEAD
 8104cca:	683b      	ldr	r3, [r7, #0]
 8104ccc:	691a      	ldr	r2, [r3, #16]
 8104cce:	69fb      	ldr	r3, [r7, #28]
 8104cd0:	f003 0307 	and.w	r3, r3, #7
 8104cd4:	009b      	lsls	r3, r3, #2
 8104cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8104cda:	69ba      	ldr	r2, [r7, #24]
 8104cdc:	4313      	orrs	r3, r2
 8104cde:	61bb      	str	r3, [r7, #24]
=======
 8104b36:	683b      	ldr	r3, [r7, #0]
 8104b38:	691a      	ldr	r2, [r3, #16]
 8104b3a:	69fb      	ldr	r3, [r7, #28]
 8104b3c:	f003 0307 	and.w	r3, r3, #7
 8104b40:	009b      	lsls	r3, r3, #2
 8104b42:	fa02 f303 	lsl.w	r3, r2, r3
 8104b46:	69ba      	ldr	r2, [r7, #24]
 8104b48:	4313      	orrs	r3, r2
 8104b4a:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        GPIOx->AFR[position >> 3U] = temp;
<<<<<<< HEAD
 8104ce0:	69fb      	ldr	r3, [r7, #28]
 8104ce2:	08da      	lsrs	r2, r3, #3
 8104ce4:	687b      	ldr	r3, [r7, #4]
 8104ce6:	3208      	adds	r2, #8
 8104ce8:	69b9      	ldr	r1, [r7, #24]
 8104cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8104b4c:	69fb      	ldr	r3, [r7, #28]
 8104b4e:	08da      	lsrs	r2, r3, #3
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	3208      	adds	r2, #8
 8104b54:	69b9      	ldr	r1, [r7, #24]
 8104b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	681b      	ldr	r3, [r3, #0]
 8104cf2:	61bb      	str	r3, [r7, #24]
=======
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
<<<<<<< HEAD
 8104cf4:	69fb      	ldr	r3, [r7, #28]
 8104cf6:	005b      	lsls	r3, r3, #1
 8104cf8:	2203      	movs	r2, #3
 8104cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8104cfe:	43db      	mvns	r3, r3
 8104d00:	69ba      	ldr	r2, [r7, #24]
 8104d02:	4013      	ands	r3, r2
 8104d04:	61bb      	str	r3, [r7, #24]
=======
 8104b60:	69fb      	ldr	r3, [r7, #28]
 8104b62:	005b      	lsls	r3, r3, #1
 8104b64:	2203      	movs	r2, #3
 8104b66:	fa02 f303 	lsl.w	r3, r2, r3
 8104b6a:	43db      	mvns	r3, r3
 8104b6c:	69ba      	ldr	r2, [r7, #24]
 8104b6e:	4013      	ands	r3, r2
 8104b70:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
<<<<<<< HEAD
 8104d06:	683b      	ldr	r3, [r7, #0]
 8104d08:	685b      	ldr	r3, [r3, #4]
 8104d0a:	f003 0203 	and.w	r2, r3, #3
 8104d0e:	69fb      	ldr	r3, [r7, #28]
 8104d10:	005b      	lsls	r3, r3, #1
 8104d12:	fa02 f303 	lsl.w	r3, r2, r3
 8104d16:	69ba      	ldr	r2, [r7, #24]
 8104d18:	4313      	orrs	r3, r2
 8104d1a:	61bb      	str	r3, [r7, #24]
=======
 8104b72:	683b      	ldr	r3, [r7, #0]
 8104b74:	685b      	ldr	r3, [r3, #4]
 8104b76:	f003 0203 	and.w	r2, r3, #3
 8104b7a:	69fb      	ldr	r3, [r7, #28]
 8104b7c:	005b      	lsls	r3, r3, #1
 8104b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8104b82:	69ba      	ldr	r2, [r7, #24]
 8104b84:	4313      	orrs	r3, r2
 8104b86:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      GPIOx->MODER = temp;
<<<<<<< HEAD
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	69ba      	ldr	r2, [r7, #24]
 8104d20:	601a      	str	r2, [r3, #0]
=======
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	69ba      	ldr	r2, [r7, #24]
 8104b8c:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8104d22:	683b      	ldr	r3, [r7, #0]
 8104d24:	685b      	ldr	r3, [r3, #4]
 8104d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104d2a:	2b00      	cmp	r3, #0
 8104d2c:	f000 80e0 	beq.w	8104ef0 <HAL_GPIO_Init+0x338>
=======
 8104b8e:	683b      	ldr	r3, [r7, #0]
 8104b90:	685b      	ldr	r3, [r3, #4]
 8104b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104b96:	2b00      	cmp	r3, #0
 8104b98:	f000 80e0 	beq.w	8104d5c <HAL_GPIO_Init+0x338>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8104d30:	4b2f      	ldr	r3, [pc, #188]	; (8104df0 <HAL_GPIO_Init+0x238>)
 8104d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104d36:	4a2e      	ldr	r2, [pc, #184]	; (8104df0 <HAL_GPIO_Init+0x238>)
 8104d38:	f043 0302 	orr.w	r3, r3, #2
 8104d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104d40:	4b2b      	ldr	r3, [pc, #172]	; (8104df0 <HAL_GPIO_Init+0x238>)
 8104d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104d46:	f003 0302 	and.w	r3, r3, #2
 8104d4a:	60fb      	str	r3, [r7, #12]
 8104d4c:	68fb      	ldr	r3, [r7, #12]
=======
 8104b9c:	4b2f      	ldr	r3, [pc, #188]	; (8104c5c <HAL_GPIO_Init+0x238>)
 8104b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104ba2:	4a2e      	ldr	r2, [pc, #184]	; (8104c5c <HAL_GPIO_Init+0x238>)
 8104ba4:	f043 0302 	orr.w	r3, r3, #2
 8104ba8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104bac:	4b2b      	ldr	r3, [pc, #172]	; (8104c5c <HAL_GPIO_Init+0x238>)
 8104bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104bb2:	f003 0302 	and.w	r3, r3, #2
 8104bb6:	60fb      	str	r3, [r7, #12]
 8104bb8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        temp = SYSCFG->EXTICR[position >> 2U];
<<<<<<< HEAD
 8104d4e:	4a29      	ldr	r2, [pc, #164]	; (8104df4 <HAL_GPIO_Init+0x23c>)
 8104d50:	69fb      	ldr	r3, [r7, #28]
 8104d52:	089b      	lsrs	r3, r3, #2
 8104d54:	3302      	adds	r3, #2
 8104d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104d5a:	61bb      	str	r3, [r7, #24]
=======
 8104bba:	4a29      	ldr	r2, [pc, #164]	; (8104c60 <HAL_GPIO_Init+0x23c>)
 8104bbc:	69fb      	ldr	r3, [r7, #28]
 8104bbe:	089b      	lsrs	r3, r3, #2
 8104bc0:	3302      	adds	r3, #2
 8104bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104bc6:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
<<<<<<< HEAD
 8104d5c:	69fb      	ldr	r3, [r7, #28]
 8104d5e:	f003 0303 	and.w	r3, r3, #3
 8104d62:	009b      	lsls	r3, r3, #2
 8104d64:	220f      	movs	r2, #15
 8104d66:	fa02 f303 	lsl.w	r3, r2, r3
 8104d6a:	43db      	mvns	r3, r3
 8104d6c:	69ba      	ldr	r2, [r7, #24]
 8104d6e:	4013      	ands	r3, r2
 8104d70:	61bb      	str	r3, [r7, #24]
=======
 8104bc8:	69fb      	ldr	r3, [r7, #28]
 8104bca:	f003 0303 	and.w	r3, r3, #3
 8104bce:	009b      	lsls	r3, r3, #2
 8104bd0:	220f      	movs	r2, #15
 8104bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8104bd6:	43db      	mvns	r3, r3
 8104bd8:	69ba      	ldr	r2, [r7, #24]
 8104bda:	4013      	ands	r3, r2
 8104bdc:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
<<<<<<< HEAD
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	4a20      	ldr	r2, [pc, #128]	; (8104df8 <HAL_GPIO_Init+0x240>)
 8104d76:	4293      	cmp	r3, r2
 8104d78:	d052      	beq.n	8104e20 <HAL_GPIO_Init+0x268>
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	4a1f      	ldr	r2, [pc, #124]	; (8104dfc <HAL_GPIO_Init+0x244>)
 8104d7e:	4293      	cmp	r3, r2
 8104d80:	d031      	beq.n	8104de6 <HAL_GPIO_Init+0x22e>
 8104d82:	687b      	ldr	r3, [r7, #4]
 8104d84:	4a1e      	ldr	r2, [pc, #120]	; (8104e00 <HAL_GPIO_Init+0x248>)
 8104d86:	4293      	cmp	r3, r2
 8104d88:	d02b      	beq.n	8104de2 <HAL_GPIO_Init+0x22a>
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	4a1d      	ldr	r2, [pc, #116]	; (8104e04 <HAL_GPIO_Init+0x24c>)
 8104d8e:	4293      	cmp	r3, r2
 8104d90:	d025      	beq.n	8104dde <HAL_GPIO_Init+0x226>
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	4a1c      	ldr	r2, [pc, #112]	; (8104e08 <HAL_GPIO_Init+0x250>)
 8104d96:	4293      	cmp	r3, r2
 8104d98:	d01f      	beq.n	8104dda <HAL_GPIO_Init+0x222>
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	4a1b      	ldr	r2, [pc, #108]	; (8104e0c <HAL_GPIO_Init+0x254>)
 8104d9e:	4293      	cmp	r3, r2
 8104da0:	d019      	beq.n	8104dd6 <HAL_GPIO_Init+0x21e>
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	4a1a      	ldr	r2, [pc, #104]	; (8104e10 <HAL_GPIO_Init+0x258>)
 8104da6:	4293      	cmp	r3, r2
 8104da8:	d013      	beq.n	8104dd2 <HAL_GPIO_Init+0x21a>
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	4a19      	ldr	r2, [pc, #100]	; (8104e14 <HAL_GPIO_Init+0x25c>)
 8104dae:	4293      	cmp	r3, r2
 8104db0:	d00d      	beq.n	8104dce <HAL_GPIO_Init+0x216>
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	4a18      	ldr	r2, [pc, #96]	; (8104e18 <HAL_GPIO_Init+0x260>)
 8104db6:	4293      	cmp	r3, r2
 8104db8:	d007      	beq.n	8104dca <HAL_GPIO_Init+0x212>
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	4a17      	ldr	r2, [pc, #92]	; (8104e1c <HAL_GPIO_Init+0x264>)
 8104dbe:	4293      	cmp	r3, r2
 8104dc0:	d101      	bne.n	8104dc6 <HAL_GPIO_Init+0x20e>
 8104dc2:	2309      	movs	r3, #9
 8104dc4:	e02d      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104dc6:	230a      	movs	r3, #10
 8104dc8:	e02b      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104dca:	2308      	movs	r3, #8
 8104dcc:	e029      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104dce:	2307      	movs	r3, #7
 8104dd0:	e027      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104dd2:	2306      	movs	r3, #6
 8104dd4:	e025      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104dd6:	2305      	movs	r3, #5
 8104dd8:	e023      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104dda:	2304      	movs	r3, #4
 8104ddc:	e021      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104dde:	2303      	movs	r3, #3
 8104de0:	e01f      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104de2:	2302      	movs	r3, #2
 8104de4:	e01d      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104de6:	2301      	movs	r3, #1
 8104de8:	e01b      	b.n	8104e22 <HAL_GPIO_Init+0x26a>
 8104dea:	bf00      	nop
 8104dec:	580000c0 	.word	0x580000c0
 8104df0:	58024400 	.word	0x58024400
 8104df4:	58000400 	.word	0x58000400
 8104df8:	58020000 	.word	0x58020000
 8104dfc:	58020400 	.word	0x58020400
 8104e00:	58020800 	.word	0x58020800
 8104e04:	58020c00 	.word	0x58020c00
 8104e08:	58021000 	.word	0x58021000
 8104e0c:	58021400 	.word	0x58021400
 8104e10:	58021800 	.word	0x58021800
 8104e14:	58021c00 	.word	0x58021c00
 8104e18:	58022000 	.word	0x58022000
 8104e1c:	58022400 	.word	0x58022400
 8104e20:	2300      	movs	r3, #0
 8104e22:	69fa      	ldr	r2, [r7, #28]
 8104e24:	f002 0203 	and.w	r2, r2, #3
 8104e28:	0092      	lsls	r2, r2, #2
 8104e2a:	4093      	lsls	r3, r2
 8104e2c:	69ba      	ldr	r2, [r7, #24]
 8104e2e:	4313      	orrs	r3, r2
 8104e30:	61bb      	str	r3, [r7, #24]
=======
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	4a20      	ldr	r2, [pc, #128]	; (8104c64 <HAL_GPIO_Init+0x240>)
 8104be2:	4293      	cmp	r3, r2
 8104be4:	d052      	beq.n	8104c8c <HAL_GPIO_Init+0x268>
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	4a1f      	ldr	r2, [pc, #124]	; (8104c68 <HAL_GPIO_Init+0x244>)
 8104bea:	4293      	cmp	r3, r2
 8104bec:	d031      	beq.n	8104c52 <HAL_GPIO_Init+0x22e>
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	4a1e      	ldr	r2, [pc, #120]	; (8104c6c <HAL_GPIO_Init+0x248>)
 8104bf2:	4293      	cmp	r3, r2
 8104bf4:	d02b      	beq.n	8104c4e <HAL_GPIO_Init+0x22a>
 8104bf6:	687b      	ldr	r3, [r7, #4]
 8104bf8:	4a1d      	ldr	r2, [pc, #116]	; (8104c70 <HAL_GPIO_Init+0x24c>)
 8104bfa:	4293      	cmp	r3, r2
 8104bfc:	d025      	beq.n	8104c4a <HAL_GPIO_Init+0x226>
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	4a1c      	ldr	r2, [pc, #112]	; (8104c74 <HAL_GPIO_Init+0x250>)
 8104c02:	4293      	cmp	r3, r2
 8104c04:	d01f      	beq.n	8104c46 <HAL_GPIO_Init+0x222>
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	4a1b      	ldr	r2, [pc, #108]	; (8104c78 <HAL_GPIO_Init+0x254>)
 8104c0a:	4293      	cmp	r3, r2
 8104c0c:	d019      	beq.n	8104c42 <HAL_GPIO_Init+0x21e>
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	4a1a      	ldr	r2, [pc, #104]	; (8104c7c <HAL_GPIO_Init+0x258>)
 8104c12:	4293      	cmp	r3, r2
 8104c14:	d013      	beq.n	8104c3e <HAL_GPIO_Init+0x21a>
 8104c16:	687b      	ldr	r3, [r7, #4]
 8104c18:	4a19      	ldr	r2, [pc, #100]	; (8104c80 <HAL_GPIO_Init+0x25c>)
 8104c1a:	4293      	cmp	r3, r2
 8104c1c:	d00d      	beq.n	8104c3a <HAL_GPIO_Init+0x216>
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	4a18      	ldr	r2, [pc, #96]	; (8104c84 <HAL_GPIO_Init+0x260>)
 8104c22:	4293      	cmp	r3, r2
 8104c24:	d007      	beq.n	8104c36 <HAL_GPIO_Init+0x212>
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	4a17      	ldr	r2, [pc, #92]	; (8104c88 <HAL_GPIO_Init+0x264>)
 8104c2a:	4293      	cmp	r3, r2
 8104c2c:	d101      	bne.n	8104c32 <HAL_GPIO_Init+0x20e>
 8104c2e:	2309      	movs	r3, #9
 8104c30:	e02d      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c32:	230a      	movs	r3, #10
 8104c34:	e02b      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c36:	2308      	movs	r3, #8
 8104c38:	e029      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c3a:	2307      	movs	r3, #7
 8104c3c:	e027      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c3e:	2306      	movs	r3, #6
 8104c40:	e025      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c42:	2305      	movs	r3, #5
 8104c44:	e023      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c46:	2304      	movs	r3, #4
 8104c48:	e021      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c4a:	2303      	movs	r3, #3
 8104c4c:	e01f      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c4e:	2302      	movs	r3, #2
 8104c50:	e01d      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c52:	2301      	movs	r3, #1
 8104c54:	e01b      	b.n	8104c8e <HAL_GPIO_Init+0x26a>
 8104c56:	bf00      	nop
 8104c58:	580000c0 	.word	0x580000c0
 8104c5c:	58024400 	.word	0x58024400
 8104c60:	58000400 	.word	0x58000400
 8104c64:	58020000 	.word	0x58020000
 8104c68:	58020400 	.word	0x58020400
 8104c6c:	58020800 	.word	0x58020800
 8104c70:	58020c00 	.word	0x58020c00
 8104c74:	58021000 	.word	0x58021000
 8104c78:	58021400 	.word	0x58021400
 8104c7c:	58021800 	.word	0x58021800
 8104c80:	58021c00 	.word	0x58021c00
 8104c84:	58022000 	.word	0x58022000
 8104c88:	58022400 	.word	0x58022400
 8104c8c:	2300      	movs	r3, #0
 8104c8e:	69fa      	ldr	r2, [r7, #28]
 8104c90:	f002 0203 	and.w	r2, r2, #3
 8104c94:	0092      	lsls	r2, r2, #2
 8104c96:	4093      	lsls	r3, r2
 8104c98:	69ba      	ldr	r2, [r7, #24]
 8104c9a:	4313      	orrs	r3, r2
 8104c9c:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        SYSCFG->EXTICR[position >> 2U] = temp;
<<<<<<< HEAD
 8104e32:	4938      	ldr	r1, [pc, #224]	; (8104f14 <HAL_GPIO_Init+0x35c>)
 8104e34:	69fb      	ldr	r3, [r7, #28]
 8104e36:	089b      	lsrs	r3, r3, #2
 8104e38:	3302      	adds	r3, #2
 8104e3a:	69ba      	ldr	r2, [r7, #24]
 8104e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8104c9e:	4938      	ldr	r1, [pc, #224]	; (8104d80 <HAL_GPIO_Init+0x35c>)
 8104ca0:	69fb      	ldr	r3, [r7, #28]
 8104ca2:	089b      	lsrs	r3, r3, #2
 8104ca4:	3302      	adds	r3, #2
 8104ca6:	69ba      	ldr	r2, [r7, #24]
 8104ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
<<<<<<< HEAD
 8104e40:	697b      	ldr	r3, [r7, #20]
 8104e42:	681b      	ldr	r3, [r3, #0]
 8104e44:	61bb      	str	r3, [r7, #24]
=======
 8104cac:	697b      	ldr	r3, [r7, #20]
 8104cae:	681b      	ldr	r3, [r3, #0]
 8104cb0:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp &= ~(iocurrent);
<<<<<<< HEAD
 8104e46:	693b      	ldr	r3, [r7, #16]
 8104e48:	43db      	mvns	r3, r3
 8104e4a:	69ba      	ldr	r2, [r7, #24]
 8104e4c:	4013      	ands	r3, r2
 8104e4e:	61bb      	str	r3, [r7, #24]
=======
 8104cb2:	693b      	ldr	r3, [r7, #16]
 8104cb4:	43db      	mvns	r3, r3
 8104cb6:	69ba      	ldr	r2, [r7, #24]
 8104cb8:	4013      	ands	r3, r2
 8104cba:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8104e50:	683b      	ldr	r3, [r7, #0]
 8104e52:	685b      	ldr	r3, [r3, #4]
 8104e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104e58:	2b00      	cmp	r3, #0
 8104e5a:	d003      	beq.n	8104e64 <HAL_GPIO_Init+0x2ac>
=======
 8104cbc:	683b      	ldr	r3, [r7, #0]
 8104cbe:	685b      	ldr	r3, [r3, #4]
 8104cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104cc4:	2b00      	cmp	r3, #0
 8104cc6:	d003      	beq.n	8104cd0 <HAL_GPIO_Init+0x2ac>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8104e5c:	69ba      	ldr	r2, [r7, #24]
 8104e5e:	693b      	ldr	r3, [r7, #16]
 8104e60:	4313      	orrs	r3, r2
 8104e62:	61bb      	str	r3, [r7, #24]
=======
 8104cc8:	69ba      	ldr	r2, [r7, #24]
 8104cca:	693b      	ldr	r3, [r7, #16]
 8104ccc:	4313      	orrs	r3, r2
 8104cce:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        EXTI_CurrentCPU->IMR1 = temp;
<<<<<<< HEAD
 8104e64:	697b      	ldr	r3, [r7, #20]
 8104e66:	69ba      	ldr	r2, [r7, #24]
 8104e68:	601a      	str	r2, [r3, #0]
=======
 8104cd0:	697b      	ldr	r3, [r7, #20]
 8104cd2:	69ba      	ldr	r2, [r7, #24]
 8104cd4:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        temp = EXTI_CurrentCPU->EMR1;
<<<<<<< HEAD
 8104e6a:	697b      	ldr	r3, [r7, #20]
 8104e6c:	685b      	ldr	r3, [r3, #4]
 8104e6e:	61bb      	str	r3, [r7, #24]
=======
 8104cd6:	697b      	ldr	r3, [r7, #20]
 8104cd8:	685b      	ldr	r3, [r3, #4]
 8104cda:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp &= ~(iocurrent);
<<<<<<< HEAD
 8104e70:	693b      	ldr	r3, [r7, #16]
 8104e72:	43db      	mvns	r3, r3
 8104e74:	69ba      	ldr	r2, [r7, #24]
 8104e76:	4013      	ands	r3, r2
 8104e78:	61bb      	str	r3, [r7, #24]
=======
 8104cdc:	693b      	ldr	r3, [r7, #16]
 8104cde:	43db      	mvns	r3, r3
 8104ce0:	69ba      	ldr	r2, [r7, #24]
 8104ce2:	4013      	ands	r3, r2
 8104ce4:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8104e7a:	683b      	ldr	r3, [r7, #0]
 8104e7c:	685b      	ldr	r3, [r3, #4]
 8104e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104e82:	2b00      	cmp	r3, #0
 8104e84:	d003      	beq.n	8104e8e <HAL_GPIO_Init+0x2d6>
=======
 8104ce6:	683b      	ldr	r3, [r7, #0]
 8104ce8:	685b      	ldr	r3, [r3, #4]
 8104cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104cee:	2b00      	cmp	r3, #0
 8104cf0:	d003      	beq.n	8104cfa <HAL_GPIO_Init+0x2d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8104e86:	69ba      	ldr	r2, [r7, #24]
 8104e88:	693b      	ldr	r3, [r7, #16]
 8104e8a:	4313      	orrs	r3, r2
 8104e8c:	61bb      	str	r3, [r7, #24]
=======
 8104cf2:	69ba      	ldr	r2, [r7, #24]
 8104cf4:	693b      	ldr	r3, [r7, #16]
 8104cf6:	4313      	orrs	r3, r2
 8104cf8:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        EXTI_CurrentCPU->EMR1 = temp;
<<<<<<< HEAD
 8104e8e:	697b      	ldr	r3, [r7, #20]
 8104e90:	69ba      	ldr	r2, [r7, #24]
 8104e92:	605a      	str	r2, [r3, #4]
=======
 8104cfa:	697b      	ldr	r3, [r7, #20]
 8104cfc:	69ba      	ldr	r2, [r7, #24]
 8104cfe:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
<<<<<<< HEAD
 8104e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	61bb      	str	r3, [r7, #24]
=======
 8104d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104d04:	681b      	ldr	r3, [r3, #0]
 8104d06:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp &= ~(iocurrent);
<<<<<<< HEAD
 8104e9c:	693b      	ldr	r3, [r7, #16]
 8104e9e:	43db      	mvns	r3, r3
 8104ea0:	69ba      	ldr	r2, [r7, #24]
 8104ea2:	4013      	ands	r3, r2
 8104ea4:	61bb      	str	r3, [r7, #24]
=======
 8104d08:	693b      	ldr	r3, [r7, #16]
 8104d0a:	43db      	mvns	r3, r3
 8104d0c:	69ba      	ldr	r2, [r7, #24]
 8104d0e:	4013      	ands	r3, r2
 8104d10:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8104ea6:	683b      	ldr	r3, [r7, #0]
 8104ea8:	685b      	ldr	r3, [r3, #4]
 8104eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104eae:	2b00      	cmp	r3, #0
 8104eb0:	d003      	beq.n	8104eba <HAL_GPIO_Init+0x302>
=======
 8104d12:	683b      	ldr	r3, [r7, #0]
 8104d14:	685b      	ldr	r3, [r3, #4]
 8104d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104d1a:	2b00      	cmp	r3, #0
 8104d1c:	d003      	beq.n	8104d26 <HAL_GPIO_Init+0x302>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8104eb2:	69ba      	ldr	r2, [r7, #24]
 8104eb4:	693b      	ldr	r3, [r7, #16]
 8104eb6:	4313      	orrs	r3, r2
 8104eb8:	61bb      	str	r3, [r7, #24]
=======
 8104d1e:	69ba      	ldr	r2, [r7, #24]
 8104d20:	693b      	ldr	r3, [r7, #16]
 8104d22:	4313      	orrs	r3, r2
 8104d24:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        EXTI->RTSR1 = temp;
<<<<<<< HEAD
 8104eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104ebe:	69bb      	ldr	r3, [r7, #24]
 8104ec0:	6013      	str	r3, [r2, #0]
=======
 8104d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104d2a:	69bb      	ldr	r3, [r7, #24]
 8104d2c:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        temp = EXTI->FTSR1;
<<<<<<< HEAD
 8104ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104ec6:	685b      	ldr	r3, [r3, #4]
 8104ec8:	61bb      	str	r3, [r7, #24]
=======
 8104d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104d32:	685b      	ldr	r3, [r3, #4]
 8104d34:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        temp &= ~(iocurrent);
<<<<<<< HEAD
 8104eca:	693b      	ldr	r3, [r7, #16]
 8104ecc:	43db      	mvns	r3, r3
 8104ece:	69ba      	ldr	r2, [r7, #24]
 8104ed0:	4013      	ands	r3, r2
 8104ed2:	61bb      	str	r3, [r7, #24]
=======
 8104d36:	693b      	ldr	r3, [r7, #16]
 8104d38:	43db      	mvns	r3, r3
 8104d3a:	69ba      	ldr	r2, [r7, #24]
 8104d3c:	4013      	ands	r3, r2
 8104d3e:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8104ed4:	683b      	ldr	r3, [r7, #0]
 8104ed6:	685b      	ldr	r3, [r3, #4]
 8104ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104edc:	2b00      	cmp	r3, #0
 8104ede:	d003      	beq.n	8104ee8 <HAL_GPIO_Init+0x330>
=======
 8104d40:	683b      	ldr	r3, [r7, #0]
 8104d42:	685b      	ldr	r3, [r3, #4]
 8104d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104d48:	2b00      	cmp	r3, #0
 8104d4a:	d003      	beq.n	8104d54 <HAL_GPIO_Init+0x330>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8104ee0:	69ba      	ldr	r2, [r7, #24]
 8104ee2:	693b      	ldr	r3, [r7, #16]
 8104ee4:	4313      	orrs	r3, r2
 8104ee6:	61bb      	str	r3, [r7, #24]
=======
 8104d4c:	69ba      	ldr	r2, [r7, #24]
 8104d4e:	693b      	ldr	r3, [r7, #16]
 8104d50:	4313      	orrs	r3, r2
 8104d52:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        EXTI->FTSR1 = temp;
<<<<<<< HEAD
 8104ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104eec:	69bb      	ldr	r3, [r7, #24]
 8104eee:	6053      	str	r3, [r2, #4]
=======
 8104d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104d58:	69bb      	ldr	r3, [r7, #24]
 8104d5a:	6053      	str	r3, [r2, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }

    position++;
<<<<<<< HEAD
 8104ef0:	69fb      	ldr	r3, [r7, #28]
 8104ef2:	3301      	adds	r3, #1
 8104ef4:	61fb      	str	r3, [r7, #28]
=======
 8104d5c:	69fb      	ldr	r3, [r7, #28]
 8104d5e:	3301      	adds	r3, #1
 8104d60:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  while (((GPIO_Init->Pin) >> position) != 0x00U)
<<<<<<< HEAD
 8104ef6:	683b      	ldr	r3, [r7, #0]
 8104ef8:	681a      	ldr	r2, [r3, #0]
 8104efa:	69fb      	ldr	r3, [r7, #28]
 8104efc:	fa22 f303 	lsr.w	r3, r2, r3
 8104f00:	2b00      	cmp	r3, #0
 8104f02:	f47f ae63 	bne.w	8104bcc <HAL_GPIO_Init+0x14>
=======
 8104d62:	683b      	ldr	r3, [r7, #0]
 8104d64:	681a      	ldr	r2, [r3, #0]
 8104d66:	69fb      	ldr	r3, [r7, #28]
 8104d68:	fa22 f303 	lsr.w	r3, r2, r3
 8104d6c:	2b00      	cmp	r3, #0
 8104d6e:	f47f ae63 	bne.w	8104a38 <HAL_GPIO_Init+0x14>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 8104f06:	bf00      	nop
 8104f08:	bf00      	nop
 8104f0a:	3724      	adds	r7, #36	; 0x24
 8104f0c:	46bd      	mov	sp, r7
 8104f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f12:	4770      	bx	lr
 8104f14:	58000400 	.word	0x58000400
=======
 8104d72:	bf00      	nop
 8104d74:	3724      	adds	r7, #36	; 0x24
 8104d76:	46bd      	mov	sp, r7
 8104d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d7c:	4770      	bx	lr
 8104d7e:	bf00      	nop
 8104d80:	58000400 	.word	0x58000400
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08104f18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
=======
08104d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8104d84:	b480      	push	{r7}
 8104d86:	b085      	sub	sp, #20
 8104d88:	af00      	add	r7, sp, #0
 8104d8a:	6078      	str	r0, [r7, #4]
 8104d8c:	460b      	mov	r3, r1
 8104d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	691a      	ldr	r2, [r3, #16]
 8104d94:	887b      	ldrh	r3, [r7, #2]
 8104d96:	4013      	ands	r3, r2
 8104d98:	2b00      	cmp	r3, #0
 8104d9a:	d002      	beq.n	8104da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8104d9c:	2301      	movs	r3, #1
 8104d9e:	73fb      	strb	r3, [r7, #15]
 8104da0:	e001      	b.n	8104da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8104da2:	2300      	movs	r3, #0
 8104da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8104da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8104da8:	4618      	mov	r0, r3
 8104daa:	3714      	adds	r7, #20
 8104dac:	46bd      	mov	sp, r7
 8104dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104db2:	4770      	bx	lr

08104db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
<<<<<<< HEAD
 8104f18:	b480      	push	{r7}
 8104f1a:	b087      	sub	sp, #28
 8104f1c:	af00      	add	r7, sp, #0
 8104f1e:	6078      	str	r0, [r7, #4]
 8104f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104f22:	2300      	movs	r3, #0
 8104f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104f26:	4b75      	ldr	r3, [pc, #468]	; (81050fc <HAL_GPIO_DeInit+0x1e4>)
 8104f28:	613b      	str	r3, [r7, #16]
=======
 8104db4:	b480      	push	{r7}
 8104db6:	b083      	sub	sp, #12
 8104db8:	af00      	add	r7, sp, #0
 8104dba:	6078      	str	r0, [r7, #4]
 8104dbc:	460b      	mov	r3, r1
 8104dbe:	807b      	strh	r3, [r7, #2]
 8104dc0:	4613      	mov	r3, r2
 8104dc2:	707b      	strb	r3, [r7, #1]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

<<<<<<< HEAD
  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8104f2a:	e0d9      	b.n	81050e0 <HAL_GPIO_DeInit+0x1c8>
=======
  if (PinState != GPIO_PIN_RESET)
 8104dc4:	787b      	ldrb	r3, [r7, #1]
 8104dc6:	2b00      	cmp	r3, #0
 8104dc8:	d003      	beq.n	8104dd2 <HAL_GPIO_WritePin+0x1e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
<<<<<<< HEAD
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8104f2c:	2201      	movs	r2, #1
 8104f2e:	697b      	ldr	r3, [r7, #20]
 8104f30:	fa02 f303 	lsl.w	r3, r2, r3
 8104f34:	683a      	ldr	r2, [r7, #0]
 8104f36:	4013      	ands	r3, r2
 8104f38:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8104f3a:	68fb      	ldr	r3, [r7, #12]
 8104f3c:	2b00      	cmp	r3, #0
 8104f3e:	f000 80cc 	beq.w	81050da <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8104f42:	4a6f      	ldr	r2, [pc, #444]	; (8105100 <HAL_GPIO_DeInit+0x1e8>)
 8104f44:	697b      	ldr	r3, [r7, #20]
 8104f46:	089b      	lsrs	r3, r3, #2
 8104f48:	3302      	adds	r3, #2
 8104f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104f4e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8104f50:	697b      	ldr	r3, [r7, #20]
 8104f52:	f003 0303 	and.w	r3, r3, #3
 8104f56:	009b      	lsls	r3, r3, #2
 8104f58:	220f      	movs	r2, #15
 8104f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8104f5e:	68ba      	ldr	r2, [r7, #8]
 8104f60:	4013      	ands	r3, r2
 8104f62:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	4a67      	ldr	r2, [pc, #412]	; (8105104 <HAL_GPIO_DeInit+0x1ec>)
 8104f68:	4293      	cmp	r3, r2
 8104f6a:	d037      	beq.n	8104fdc <HAL_GPIO_DeInit+0xc4>
 8104f6c:	687b      	ldr	r3, [r7, #4]
 8104f6e:	4a66      	ldr	r2, [pc, #408]	; (8105108 <HAL_GPIO_DeInit+0x1f0>)
 8104f70:	4293      	cmp	r3, r2
 8104f72:	d031      	beq.n	8104fd8 <HAL_GPIO_DeInit+0xc0>
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	4a65      	ldr	r2, [pc, #404]	; (810510c <HAL_GPIO_DeInit+0x1f4>)
 8104f78:	4293      	cmp	r3, r2
 8104f7a:	d02b      	beq.n	8104fd4 <HAL_GPIO_DeInit+0xbc>
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	4a64      	ldr	r2, [pc, #400]	; (8105110 <HAL_GPIO_DeInit+0x1f8>)
 8104f80:	4293      	cmp	r3, r2
 8104f82:	d025      	beq.n	8104fd0 <HAL_GPIO_DeInit+0xb8>
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	4a63      	ldr	r2, [pc, #396]	; (8105114 <HAL_GPIO_DeInit+0x1fc>)
 8104f88:	4293      	cmp	r3, r2
 8104f8a:	d01f      	beq.n	8104fcc <HAL_GPIO_DeInit+0xb4>
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	4a62      	ldr	r2, [pc, #392]	; (8105118 <HAL_GPIO_DeInit+0x200>)
 8104f90:	4293      	cmp	r3, r2
 8104f92:	d019      	beq.n	8104fc8 <HAL_GPIO_DeInit+0xb0>
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	4a61      	ldr	r2, [pc, #388]	; (810511c <HAL_GPIO_DeInit+0x204>)
 8104f98:	4293      	cmp	r3, r2
 8104f9a:	d013      	beq.n	8104fc4 <HAL_GPIO_DeInit+0xac>
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	4a60      	ldr	r2, [pc, #384]	; (8105120 <HAL_GPIO_DeInit+0x208>)
 8104fa0:	4293      	cmp	r3, r2
 8104fa2:	d00d      	beq.n	8104fc0 <HAL_GPIO_DeInit+0xa8>
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	4a5f      	ldr	r2, [pc, #380]	; (8105124 <HAL_GPIO_DeInit+0x20c>)
 8104fa8:	4293      	cmp	r3, r2
 8104faa:	d007      	beq.n	8104fbc <HAL_GPIO_DeInit+0xa4>
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	4a5e      	ldr	r2, [pc, #376]	; (8105128 <HAL_GPIO_DeInit+0x210>)
 8104fb0:	4293      	cmp	r3, r2
 8104fb2:	d101      	bne.n	8104fb8 <HAL_GPIO_DeInit+0xa0>
 8104fb4:	2309      	movs	r3, #9
 8104fb6:	e012      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fb8:	230a      	movs	r3, #10
 8104fba:	e010      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fbc:	2308      	movs	r3, #8
 8104fbe:	e00e      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fc0:	2307      	movs	r3, #7
 8104fc2:	e00c      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fc4:	2306      	movs	r3, #6
 8104fc6:	e00a      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fc8:	2305      	movs	r3, #5
 8104fca:	e008      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fcc:	2304      	movs	r3, #4
 8104fce:	e006      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fd0:	2303      	movs	r3, #3
 8104fd2:	e004      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fd4:	2302      	movs	r3, #2
 8104fd6:	e002      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fd8:	2301      	movs	r3, #1
 8104fda:	e000      	b.n	8104fde <HAL_GPIO_DeInit+0xc6>
 8104fdc:	2300      	movs	r3, #0
 8104fde:	697a      	ldr	r2, [r7, #20]
 8104fe0:	f002 0203 	and.w	r2, r2, #3
 8104fe4:	0092      	lsls	r2, r2, #2
 8104fe6:	4093      	lsls	r3, r2
 8104fe8:	68ba      	ldr	r2, [r7, #8]
 8104fea:	429a      	cmp	r2, r3
 8104fec:	d136      	bne.n	810505c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8104fee:	693b      	ldr	r3, [r7, #16]
 8104ff0:	681a      	ldr	r2, [r3, #0]
 8104ff2:	68fb      	ldr	r3, [r7, #12]
 8104ff4:	43db      	mvns	r3, r3
 8104ff6:	401a      	ands	r2, r3
 8104ff8:	693b      	ldr	r3, [r7, #16]
 8104ffa:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8104ffc:	693b      	ldr	r3, [r7, #16]
 8104ffe:	685a      	ldr	r2, [r3, #4]
 8105000:	68fb      	ldr	r3, [r7, #12]
 8105002:	43db      	mvns	r3, r3
 8105004:	401a      	ands	r2, r3
 8105006:	693b      	ldr	r3, [r7, #16]
 8105008:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 810500a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810500e:	681a      	ldr	r2, [r3, #0]
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	43db      	mvns	r3, r3
 8105014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8105018:	4013      	ands	r3, r2
 810501a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 810501c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105020:	685a      	ldr	r2, [r3, #4]
 8105022:	68fb      	ldr	r3, [r7, #12]
 8105024:	43db      	mvns	r3, r3
 8105026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 810502a:	4013      	ands	r3, r2
 810502c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 810502e:	697b      	ldr	r3, [r7, #20]
 8105030:	f003 0303 	and.w	r3, r3, #3
 8105034:	009b      	lsls	r3, r3, #2
 8105036:	220f      	movs	r2, #15
 8105038:	fa02 f303 	lsl.w	r3, r2, r3
 810503c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 810503e:	4a30      	ldr	r2, [pc, #192]	; (8105100 <HAL_GPIO_DeInit+0x1e8>)
 8105040:	697b      	ldr	r3, [r7, #20]
 8105042:	089b      	lsrs	r3, r3, #2
 8105044:	3302      	adds	r3, #2
 8105046:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 810504a:	68bb      	ldr	r3, [r7, #8]
 810504c:	43da      	mvns	r2, r3
 810504e:	482c      	ldr	r0, [pc, #176]	; (8105100 <HAL_GPIO_DeInit+0x1e8>)
 8105050:	697b      	ldr	r3, [r7, #20]
 8105052:	089b      	lsrs	r3, r3, #2
 8105054:	400a      	ands	r2, r1
 8105056:	3302      	adds	r3, #2
 8105058:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	681a      	ldr	r2, [r3, #0]
 8105060:	697b      	ldr	r3, [r7, #20]
 8105062:	005b      	lsls	r3, r3, #1
 8105064:	2103      	movs	r1, #3
 8105066:	fa01 f303 	lsl.w	r3, r1, r3
 810506a:	431a      	orrs	r2, r3
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8105070:	697b      	ldr	r3, [r7, #20]
 8105072:	08da      	lsrs	r2, r3, #3
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	3208      	adds	r2, #8
 8105078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810507c:	697b      	ldr	r3, [r7, #20]
 810507e:	f003 0307 	and.w	r3, r3, #7
 8105082:	009b      	lsls	r3, r3, #2
 8105084:	220f      	movs	r2, #15
 8105086:	fa02 f303 	lsl.w	r3, r2, r3
 810508a:	43db      	mvns	r3, r3
 810508c:	697a      	ldr	r2, [r7, #20]
 810508e:	08d2      	lsrs	r2, r2, #3
 8105090:	4019      	ands	r1, r3
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	3208      	adds	r2, #8
 8105096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	68da      	ldr	r2, [r3, #12]
 810509e:	697b      	ldr	r3, [r7, #20]
 81050a0:	005b      	lsls	r3, r3, #1
 81050a2:	2103      	movs	r1, #3
 81050a4:	fa01 f303 	lsl.w	r3, r1, r3
 81050a8:	43db      	mvns	r3, r3
 81050aa:	401a      	ands	r2, r3
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	685a      	ldr	r2, [r3, #4]
 81050b4:	2101      	movs	r1, #1
 81050b6:	697b      	ldr	r3, [r7, #20]
 81050b8:	fa01 f303 	lsl.w	r3, r1, r3
 81050bc:	43db      	mvns	r3, r3
 81050be:	401a      	ands	r2, r3
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	689a      	ldr	r2, [r3, #8]
 81050c8:	697b      	ldr	r3, [r7, #20]
 81050ca:	005b      	lsls	r3, r3, #1
 81050cc:	2103      	movs	r1, #3
 81050ce:	fa01 f303 	lsl.w	r3, r1, r3
 81050d2:	43db      	mvns	r3, r3
 81050d4:	401a      	ands	r2, r3
 81050d6:	687b      	ldr	r3, [r7, #4]
 81050d8:	609a      	str	r2, [r3, #8]
    }

    position++;
 81050da:	697b      	ldr	r3, [r7, #20]
 81050dc:	3301      	adds	r3, #1
 81050de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 81050e0:	683a      	ldr	r2, [r7, #0]
 81050e2:	697b      	ldr	r3, [r7, #20]
 81050e4:	fa22 f303 	lsr.w	r3, r2, r3
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	f47f af1f 	bne.w	8104f2c <HAL_GPIO_DeInit+0x14>
=======
    GPIOx->BSRR = GPIO_Pin;
 8104dca:	887a      	ldrh	r2, [r7, #2]
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 81050ee:	bf00      	nop
 81050f0:	bf00      	nop
 81050f2:	371c      	adds	r7, #28
 81050f4:	46bd      	mov	sp, r7
 81050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050fa:	4770      	bx	lr
 81050fc:	580000c0 	.word	0x580000c0
 8105100:	58000400 	.word	0x58000400
 8105104:	58020000 	.word	0x58020000
 8105108:	58020400 	.word	0x58020400
 810510c:	58020800 	.word	0x58020800
 8105110:	58020c00 	.word	0x58020c00
 8105114:	58021000 	.word	0x58021000
 8105118:	58021400 	.word	0x58021400
 810511c:	58021800 	.word	0x58021800
 8105120:	58021c00 	.word	0x58021c00
 8105124:	58022000 	.word	0x58022000
 8105128:	58022400 	.word	0x58022400
=======
 8104dd0:	e003      	b.n	8104dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104dd2:	887b      	ldrh	r3, [r7, #2]
 8104dd4:	041a      	lsls	r2, r3, #16
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	619a      	str	r2, [r3, #24]
}
 8104dda:	bf00      	nop
 8104ddc:	370c      	adds	r7, #12
 8104dde:	46bd      	mov	sp, r7
 8104de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104de4:	4770      	bx	lr
	...
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810512c <HAL_HSEM_Take>:
=======
08104de8 <HAL_HSEM_Take>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
<<<<<<< HEAD
 810512c:	b480      	push	{r7}
 810512e:	b083      	sub	sp, #12
 8105130:	af00      	add	r7, sp, #0
 8105132:	6078      	str	r0, [r7, #4]
 8105134:	6039      	str	r1, [r7, #0]
=======
 8104de8:	b480      	push	{r7}
 8104dea:	b083      	sub	sp, #12
 8104dec:	af00      	add	r7, sp, #0
 8104dee:	6078      	str	r0, [r7, #4]
 8104df0:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
<<<<<<< HEAD
 8105136:	490e      	ldr	r1, [pc, #56]	; (8105170 <HAL_HSEM_Take+0x44>)
 8105138:	683b      	ldr	r3, [r7, #0]
 810513a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810513e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105142:	687a      	ldr	r2, [r7, #4]
 8105144:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
=======
 8104df2:	490e      	ldr	r1, [pc, #56]	; (8104e2c <HAL_HSEM_Take+0x44>)
 8104df4:	683b      	ldr	r3, [r7, #0]
 8104df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104dfe:	687a      	ldr	r2, [r7, #4]
 8104e00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
<<<<<<< HEAD
 8105148:	4a09      	ldr	r2, [pc, #36]	; (8105170 <HAL_HSEM_Take+0x44>)
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8105150:	683b      	ldr	r3, [r7, #0]
 8105152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8105156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810515a:	429a      	cmp	r2, r3
 810515c:	d101      	bne.n	8105162 <HAL_HSEM_Take+0x36>
=======
 8104e04:	4a09      	ldr	r2, [pc, #36]	; (8104e2c <HAL_HSEM_Take+0x44>)
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8104e0c:	683b      	ldr	r3, [r7, #0]
 8104e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104e16:	429a      	cmp	r2, r3
 8104e18:	d101      	bne.n	8104e1e <HAL_HSEM_Take+0x36>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
<<<<<<< HEAD
 810515e:	2300      	movs	r3, #0
 8105160:	e000      	b.n	8105164 <HAL_HSEM_Take+0x38>
=======
 8104e1a:	2300      	movs	r3, #0
 8104e1c:	e000      	b.n	8104e20 <HAL_HSEM_Take+0x38>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
<<<<<<< HEAD
 8105162:	2301      	movs	r3, #1
=======
 8104e1e:	2301      	movs	r3, #1
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8105164:	4618      	mov	r0, r3
 8105166:	370c      	adds	r7, #12
 8105168:	46bd      	mov	sp, r7
 810516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810516e:	4770      	bx	lr
 8105170:	58026400 	.word	0x58026400
=======
 8104e20:	4618      	mov	r0, r3
 8104e22:	370c      	adds	r7, #12
 8104e24:	46bd      	mov	sp, r7
 8104e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e2a:	4770      	bx	lr
 8104e2c:	58026400 	.word	0x58026400
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08105174 <HAL_HSEM_IsSemTaken>:
=======
08104e30 <HAL_HSEM_IsSemTaken>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
<<<<<<< HEAD
 8105174:	b480      	push	{r7}
 8105176:	b083      	sub	sp, #12
 8105178:	af00      	add	r7, sp, #0
 810517a:	6078      	str	r0, [r7, #4]
=======
 8104e30:	b480      	push	{r7}
 8104e32:	b083      	sub	sp, #12
 8104e34:	af00      	add	r7, sp, #0
 8104e36:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
<<<<<<< HEAD
 810517c:	4a07      	ldr	r2, [pc, #28]	; (810519c <HAL_HSEM_IsSemTaken+0x28>)
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105184:	2b00      	cmp	r3, #0
 8105186:	da01      	bge.n	810518c <HAL_HSEM_IsSemTaken+0x18>
 8105188:	2301      	movs	r3, #1
 810518a:	e000      	b.n	810518e <HAL_HSEM_IsSemTaken+0x1a>
 810518c:	2300      	movs	r3, #0
=======
 8104e38:	4a07      	ldr	r2, [pc, #28]	; (8104e58 <HAL_HSEM_IsSemTaken+0x28>)
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104e40:	2b00      	cmp	r3, #0
 8104e42:	da01      	bge.n	8104e48 <HAL_HSEM_IsSemTaken+0x18>
 8104e44:	2301      	movs	r3, #1
 8104e46:	e000      	b.n	8104e4a <HAL_HSEM_IsSemTaken+0x1a>
 8104e48:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810518e:	4618      	mov	r0, r3
 8105190:	370c      	adds	r7, #12
 8105192:	46bd      	mov	sp, r7
 8105194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105198:	4770      	bx	lr
 810519a:	bf00      	nop
 810519c:	58026400 	.word	0x58026400
=======
 8104e4a:	4618      	mov	r0, r3
 8104e4c:	370c      	adds	r7, #12
 8104e4e:	46bd      	mov	sp, r7
 8104e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e54:	4770      	bx	lr
 8104e56:	bf00      	nop
 8104e58:	58026400 	.word	0x58026400
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081051a0 <HAL_HSEM_Release>:
=======
08104e5c <HAL_HSEM_Release>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
<<<<<<< HEAD
 81051a0:	b480      	push	{r7}
 81051a2:	b083      	sub	sp, #12
 81051a4:	af00      	add	r7, sp, #0
 81051a6:	6078      	str	r0, [r7, #4]
 81051a8:	6039      	str	r1, [r7, #0]
=======
 8104e5c:	b480      	push	{r7}
 8104e5e:	b083      	sub	sp, #12
 8104e60:	af00      	add	r7, sp, #0
 8104e62:	6078      	str	r0, [r7, #4]
 8104e64:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
<<<<<<< HEAD
 81051aa:	4906      	ldr	r1, [pc, #24]	; (81051c4 <HAL_HSEM_Release+0x24>)
 81051ac:	683b      	ldr	r3, [r7, #0]
 81051ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8104e66:	4906      	ldr	r1, [pc, #24]	; (8104e80 <HAL_HSEM_Release+0x24>)
 8104e68:	683b      	ldr	r3, [r7, #0]
 8104e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif

}
<<<<<<< HEAD
 81051b8:	bf00      	nop
 81051ba:	370c      	adds	r7, #12
 81051bc:	46bd      	mov	sp, r7
 81051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051c2:	4770      	bx	lr
 81051c4:	58026400 	.word	0x58026400
=======
 8104e74:	bf00      	nop
 8104e76:	370c      	adds	r7, #12
 8104e78:	46bd      	mov	sp, r7
 8104e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e7e:	4770      	bx	lr
 8104e80:	58026400 	.word	0x58026400
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081051c8 <HAL_HSEM_ActivateNotification>:
=======
08104e84 <HAL_HSEM_ActivateNotification>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
<<<<<<< HEAD
 81051c8:	b480      	push	{r7}
 81051ca:	b083      	sub	sp, #12
 81051cc:	af00      	add	r7, sp, #0
 81051ce:	6078      	str	r0, [r7, #4]
=======
 8104e84:	b480      	push	{r7}
 8104e86:	b083      	sub	sp, #12
 8104e88:	af00      	add	r7, sp, #0
 8104e8a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
<<<<<<< HEAD
 81051d0:	4b05      	ldr	r3, [pc, #20]	; (81051e8 <HAL_HSEM_ActivateNotification+0x20>)
 81051d2:	681a      	ldr	r2, [r3, #0]
 81051d4:	4904      	ldr	r1, [pc, #16]	; (81051e8 <HAL_HSEM_ActivateNotification+0x20>)
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	4313      	orrs	r3, r2
 81051da:	600b      	str	r3, [r1, #0]
=======
 8104e8c:	4b05      	ldr	r3, [pc, #20]	; (8104ea4 <HAL_HSEM_ActivateNotification+0x20>)
 8104e8e:	681a      	ldr	r2, [r3, #0]
 8104e90:	4904      	ldr	r1, [pc, #16]	; (8104ea4 <HAL_HSEM_ActivateNotification+0x20>)
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	4313      	orrs	r3, r2
 8104e96:	600b      	str	r3, [r1, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif
}
<<<<<<< HEAD
 81051dc:	bf00      	nop
 81051de:	370c      	adds	r7, #12
 81051e0:	46bd      	mov	sp, r7
 81051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e6:	4770      	bx	lr
 81051e8:	58026510 	.word	0x58026510
=======
 8104e98:	bf00      	nop
 8104e9a:	370c      	adds	r7, #12
 8104e9c:	46bd      	mov	sp, r7
 8104e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ea2:	4770      	bx	lr
 8104ea4:	58026510 	.word	0x58026510
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081051ec <HAL_I2C_Init>:
=======
08104ea8 <HAL_I2C_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 81051ec:	b580      	push	{r7, lr}
 81051ee:	b082      	sub	sp, #8
 81051f0:	af00      	add	r7, sp, #0
 81051f2:	6078      	str	r0, [r7, #4]
=======
 8104ea8:	b580      	push	{r7, lr}
 8104eaa:	b082      	sub	sp, #8
 8104eac:	af00      	add	r7, sp, #0
 8104eae:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	2b00      	cmp	r3, #0
 81051f8:	d101      	bne.n	81051fe <HAL_I2C_Init+0x12>
=======
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	2b00      	cmp	r3, #0
 8104eb4:	d101      	bne.n	8104eba <HAL_I2C_Init+0x12>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 81051fa:	2301      	movs	r3, #1
 81051fc:	e081      	b.n	8105302 <HAL_I2C_Init+0x116>
=======
 8104eb6:	2301      	movs	r3, #1
 8104eb8:	e081      	b.n	8104fbe <HAL_I2C_Init+0x116>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105204:	b2db      	uxtb	r3, r3
 8105206:	2b00      	cmp	r3, #0
 8105208:	d106      	bne.n	8105218 <HAL_I2C_Init+0x2c>
=======
 8104eba:	687b      	ldr	r3, [r7, #4]
 8104ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104ec0:	b2db      	uxtb	r3, r3
 8104ec2:	2b00      	cmp	r3, #0
 8104ec4:	d106      	bne.n	8104ed4 <HAL_I2C_Init+0x2c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	2200      	movs	r2, #0
 810520e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	2200      	movs	r2, #0
 8104eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8105212:	6878      	ldr	r0, [r7, #4]
 8105214:	f7fc f938 	bl	8101488 <HAL_I2C_MspInit>
=======
 8104ece:	6878      	ldr	r0, [r7, #4]
 8104ed0:	f7fc fade 	bl	8101490 <HAL_I2C_MspInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	2224      	movs	r2, #36	; 0x24
 810521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 8104ed4:	687b      	ldr	r3, [r7, #4]
 8104ed6:	2224      	movs	r2, #36	; 0x24
 8104ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	681a      	ldr	r2, [r3, #0]
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	f022 0201 	bic.w	r2, r2, #1
 810522e:	601a      	str	r2, [r3, #0]
=======
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	681a      	ldr	r2, [r3, #0]
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	681b      	ldr	r3, [r3, #0]
 8104ee6:	f022 0201 	bic.w	r2, r2, #1
 8104eea:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< HEAD
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	685a      	ldr	r2, [r3, #4]
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 810523c:	611a      	str	r2, [r3, #16]
=======
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	685a      	ldr	r2, [r3, #4]
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104ef8:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< HEAD
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	689a      	ldr	r2, [r3, #8]
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	681b      	ldr	r3, [r3, #0]
 8105248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810524c:	609a      	str	r2, [r3, #8]
=======
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	689a      	ldr	r2, [r3, #8]
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	681b      	ldr	r3, [r3, #0]
 8104f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104f08:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
<<<<<<< HEAD
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	68db      	ldr	r3, [r3, #12]
 8105252:	2b01      	cmp	r3, #1
 8105254:	d107      	bne.n	8105266 <HAL_I2C_Init+0x7a>
=======
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	68db      	ldr	r3, [r3, #12]
 8104f0e:	2b01      	cmp	r3, #1
 8104f10:	d107      	bne.n	8104f22 <HAL_I2C_Init+0x7a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
<<<<<<< HEAD
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	689a      	ldr	r2, [r3, #8]
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105262:	609a      	str	r2, [r3, #8]
 8105264:	e006      	b.n	8105274 <HAL_I2C_Init+0x88>
=======
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	689a      	ldr	r2, [r3, #8]
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	681b      	ldr	r3, [r3, #0]
 8104f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104f1e:	609a      	str	r2, [r3, #8]
 8104f20:	e006      	b.n	8104f30 <HAL_I2C_Init+0x88>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< HEAD
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	689a      	ldr	r2, [r3, #8]
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	681b      	ldr	r3, [r3, #0]
 810526e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8105272:	609a      	str	r2, [r3, #8]
=======
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	689a      	ldr	r2, [r3, #8]
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	681b      	ldr	r3, [r3, #0]
 8104f2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104f2e:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< HEAD
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	68db      	ldr	r3, [r3, #12]
 8105278:	2b02      	cmp	r3, #2
 810527a:	d104      	bne.n	8105286 <HAL_I2C_Init+0x9a>
=======
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	68db      	ldr	r3, [r3, #12]
 8104f34:	2b02      	cmp	r3, #2
 8104f36:	d104      	bne.n	8104f42 <HAL_I2C_Init+0x9a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
<<<<<<< HEAD
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	681b      	ldr	r3, [r3, #0]
 8105280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105284:	605a      	str	r2, [r3, #4]
=======
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104f40:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
<<<<<<< HEAD
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	685b      	ldr	r3, [r3, #4]
 810528c:	687a      	ldr	r2, [r7, #4]
 810528e:	6812      	ldr	r2, [r2, #0]
 8105290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8105294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8105298:	6053      	str	r3, [r2, #4]
=======
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	685b      	ldr	r3, [r3, #4]
 8104f48:	687a      	ldr	r2, [r7, #4]
 8104f4a:	6812      	ldr	r2, [r2, #0]
 8104f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104f54:	6053      	str	r3, [r2, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< HEAD
 810529a:	687b      	ldr	r3, [r7, #4]
 810529c:	681b      	ldr	r3, [r3, #0]
 810529e:	68da      	ldr	r2, [r3, #12]
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	681b      	ldr	r3, [r3, #0]
 81052a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81052a8:	60da      	str	r2, [r3, #12]
=======
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	681b      	ldr	r3, [r3, #0]
 8104f5a:	68da      	ldr	r2, [r3, #12]
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104f64:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
<<<<<<< HEAD
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	691a      	ldr	r2, [r3, #16]
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	695b      	ldr	r3, [r3, #20]
 81052b2:	ea42 0103 	orr.w	r1, r2, r3
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	699b      	ldr	r3, [r3, #24]
 81052ba:	021a      	lsls	r2, r3, #8
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	681b      	ldr	r3, [r3, #0]
 81052c0:	430a      	orrs	r2, r1
 81052c2:	60da      	str	r2, [r3, #12]
=======
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	691a      	ldr	r2, [r3, #16]
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	695b      	ldr	r3, [r3, #20]
 8104f6e:	ea42 0103 	orr.w	r1, r2, r3
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	699b      	ldr	r3, [r3, #24]
 8104f76:	021a      	lsls	r2, r3, #8
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	430a      	orrs	r2, r1
 8104f7e:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< HEAD
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	69d9      	ldr	r1, [r3, #28]
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	6a1a      	ldr	r2, [r3, #32]
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	430a      	orrs	r2, r1
 81052d2:	601a      	str	r2, [r3, #0]
=======
 8104f80:	687b      	ldr	r3, [r7, #4]
 8104f82:	69d9      	ldr	r1, [r3, #28]
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	6a1a      	ldr	r2, [r3, #32]
 8104f88:	687b      	ldr	r3, [r7, #4]
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	430a      	orrs	r2, r1
 8104f8e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
<<<<<<< HEAD
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	681a      	ldr	r2, [r3, #0]
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	681b      	ldr	r3, [r3, #0]
 81052de:	f042 0201 	orr.w	r2, r2, #1
 81052e2:	601a      	str	r2, [r3, #0]
=======
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	681a      	ldr	r2, [r3, #0]
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	f042 0201 	orr.w	r2, r2, #1
 8104f9e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
<<<<<<< HEAD
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	2200      	movs	r2, #0
 81052e8:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	2200      	movs	r2, #0
 8104fa4:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	2220      	movs	r2, #32
 81052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	2220      	movs	r2, #32
 8104faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  hi2c->PreviousState = I2C_STATE_NONE;
<<<<<<< HEAD
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	2200      	movs	r2, #0
 81052f6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	2200      	movs	r2, #0
 8104fb2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  hi2c->Mode = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	2200      	movs	r2, #0
 81052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
=======
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	2200      	movs	r2, #0
 8104fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return HAL_OK;
<<<<<<< HEAD
 8105300:	2300      	movs	r3, #0
=======
 8104fbc:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8105302:	4618      	mov	r0, r3
 8105304:	3708      	adds	r7, #8
 8105306:	46bd      	mov	sp, r7
 8105308:	bd80      	pop	{r7, pc}
=======
 8104fbe:	4618      	mov	r0, r3
 8104fc0:	3708      	adds	r7, #8
 8104fc2:	46bd      	mov	sp, r7
 8104fc4:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810530a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 810530a:	b580      	push	{r7, lr}
 810530c:	b082      	sub	sp, #8
 810530e:	af00      	add	r7, sp, #0
 8105310:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	2b00      	cmp	r3, #0
 8105316:	d101      	bne.n	810531c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8105318:	2301      	movs	r3, #1
 810531a:	e021      	b.n	8105360 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	2224      	movs	r2, #36	; 0x24
 8105320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	681b      	ldr	r3, [r3, #0]
 8105328:	681a      	ldr	r2, [r3, #0]
 810532a:	687b      	ldr	r3, [r7, #4]
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	f022 0201 	bic.w	r2, r2, #1
 8105332:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8105334:	6878      	ldr	r0, [r7, #4]
 8105336:	f7fc f983 	bl	8101640 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	2200      	movs	r2, #0
 810533e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8105340:	687b      	ldr	r3, [r7, #4]
 8105342:	2200      	movs	r2, #0
 8105344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	2200      	movs	r2, #0
 810534c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	2200      	movs	r2, #0
 8105352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	2200      	movs	r2, #0
 810535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 810535e:	2300      	movs	r3, #0
}
 8105360:	4618      	mov	r0, r3
 8105362:	3708      	adds	r7, #8
 8105364:	46bd      	mov	sp, r7
 8105366:	bd80      	pop	{r7, pc}

08105368 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105368:	b580      	push	{r7, lr}
 810536a:	b088      	sub	sp, #32
 810536c:	af02      	add	r7, sp, #8
 810536e:	60f8      	str	r0, [r7, #12]
 8105370:	607a      	str	r2, [r7, #4]
 8105372:	461a      	mov	r2, r3
 8105374:	460b      	mov	r3, r1
 8105376:	817b      	strh	r3, [r7, #10]
 8105378:	4613      	mov	r3, r2
 810537a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 810537c:	68fb      	ldr	r3, [r7, #12]
 810537e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105382:	b2db      	uxtb	r3, r3
 8105384:	2b20      	cmp	r3, #32
 8105386:	f040 80da 	bne.w	810553e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810538a:	68fb      	ldr	r3, [r7, #12]
 810538c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105390:	2b01      	cmp	r3, #1
 8105392:	d101      	bne.n	8105398 <HAL_I2C_Master_Transmit+0x30>
 8105394:	2302      	movs	r3, #2
 8105396:	e0d3      	b.n	8105540 <HAL_I2C_Master_Transmit+0x1d8>
 8105398:	68fb      	ldr	r3, [r7, #12]
 810539a:	2201      	movs	r2, #1
 810539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81053a0:	f7fc ffd4 	bl	810234c <HAL_GetTick>
 81053a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81053a6:	697b      	ldr	r3, [r7, #20]
 81053a8:	9300      	str	r3, [sp, #0]
 81053aa:	2319      	movs	r3, #25
 81053ac:	2201      	movs	r2, #1
 81053ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81053b2:	68f8      	ldr	r0, [r7, #12]
 81053b4:	f000 fdde 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 81053b8:	4603      	mov	r3, r0
 81053ba:	2b00      	cmp	r3, #0
 81053bc:	d001      	beq.n	81053c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81053be:	2301      	movs	r3, #1
 81053c0:	e0be      	b.n	8105540 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81053c2:	68fb      	ldr	r3, [r7, #12]
 81053c4:	2221      	movs	r2, #33	; 0x21
 81053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81053ca:	68fb      	ldr	r3, [r7, #12]
 81053cc:	2210      	movs	r2, #16
 81053ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81053d2:	68fb      	ldr	r3, [r7, #12]
 81053d4:	2200      	movs	r2, #0
 81053d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81053d8:	68fb      	ldr	r3, [r7, #12]
 81053da:	687a      	ldr	r2, [r7, #4]
 81053dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81053de:	68fb      	ldr	r3, [r7, #12]
 81053e0:	893a      	ldrh	r2, [r7, #8]
 81053e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	2200      	movs	r2, #0
 81053e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81053ea:	68fb      	ldr	r3, [r7, #12]
 81053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81053ee:	b29b      	uxth	r3, r3
 81053f0:	2bff      	cmp	r3, #255	; 0xff
 81053f2:	d90e      	bls.n	8105412 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81053f4:	68fb      	ldr	r3, [r7, #12]
 81053f6:	22ff      	movs	r2, #255	; 0xff
 81053f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81053fa:	68fb      	ldr	r3, [r7, #12]
 81053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81053fe:	b2da      	uxtb	r2, r3
 8105400:	8979      	ldrh	r1, [r7, #10]
 8105402:	4b51      	ldr	r3, [pc, #324]	; (8105548 <HAL_I2C_Master_Transmit+0x1e0>)
 8105404:	9300      	str	r3, [sp, #0]
 8105406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810540a:	68f8      	ldr	r0, [r7, #12]
 810540c:	f000 ff40 	bl	8106290 <I2C_TransferConfig>
 8105410:	e06c      	b.n	81054ec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105412:	68fb      	ldr	r3, [r7, #12]
 8105414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105416:	b29a      	uxth	r2, r3
 8105418:	68fb      	ldr	r3, [r7, #12]
 810541a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 810541c:	68fb      	ldr	r3, [r7, #12]
 810541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105420:	b2da      	uxtb	r2, r3
 8105422:	8979      	ldrh	r1, [r7, #10]
 8105424:	4b48      	ldr	r3, [pc, #288]	; (8105548 <HAL_I2C_Master_Transmit+0x1e0>)
 8105426:	9300      	str	r3, [sp, #0]
 8105428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810542c:	68f8      	ldr	r0, [r7, #12]
 810542e:	f000 ff2f 	bl	8106290 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8105432:	e05b      	b.n	81054ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105434:	697a      	ldr	r2, [r7, #20]
 8105436:	6a39      	ldr	r1, [r7, #32]
 8105438:	68f8      	ldr	r0, [r7, #12]
 810543a:	f000 fddb 	bl	8105ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 810543e:	4603      	mov	r3, r0
 8105440:	2b00      	cmp	r3, #0
 8105442:	d001      	beq.n	8105448 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8105444:	2301      	movs	r3, #1
 8105446:	e07b      	b.n	8105540 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105448:	68fb      	ldr	r3, [r7, #12]
 810544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810544c:	781a      	ldrb	r2, [r3, #0]
 810544e:	68fb      	ldr	r3, [r7, #12]
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105454:	68fb      	ldr	r3, [r7, #12]
 8105456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105458:	1c5a      	adds	r2, r3, #1
 810545a:	68fb      	ldr	r3, [r7, #12]
 810545c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810545e:	68fb      	ldr	r3, [r7, #12]
 8105460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105462:	b29b      	uxth	r3, r3
 8105464:	3b01      	subs	r3, #1
 8105466:	b29a      	uxth	r2, r3
 8105468:	68fb      	ldr	r3, [r7, #12]
 810546a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810546c:	68fb      	ldr	r3, [r7, #12]
 810546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105470:	3b01      	subs	r3, #1
 8105472:	b29a      	uxth	r2, r3
 8105474:	68fb      	ldr	r3, [r7, #12]
 8105476:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105478:	68fb      	ldr	r3, [r7, #12]
 810547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810547c:	b29b      	uxth	r3, r3
 810547e:	2b00      	cmp	r3, #0
 8105480:	d034      	beq.n	81054ec <HAL_I2C_Master_Transmit+0x184>
 8105482:	68fb      	ldr	r3, [r7, #12]
 8105484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105486:	2b00      	cmp	r3, #0
 8105488:	d130      	bne.n	81054ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810548a:	697b      	ldr	r3, [r7, #20]
 810548c:	9300      	str	r3, [sp, #0]
 810548e:	6a3b      	ldr	r3, [r7, #32]
 8105490:	2200      	movs	r2, #0
 8105492:	2180      	movs	r1, #128	; 0x80
 8105494:	68f8      	ldr	r0, [r7, #12]
 8105496:	f000 fd6d 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 810549a:	4603      	mov	r3, r0
 810549c:	2b00      	cmp	r3, #0
 810549e:	d001      	beq.n	81054a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 81054a0:	2301      	movs	r3, #1
 81054a2:	e04d      	b.n	8105540 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81054a4:	68fb      	ldr	r3, [r7, #12]
 81054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81054a8:	b29b      	uxth	r3, r3
 81054aa:	2bff      	cmp	r3, #255	; 0xff
 81054ac:	d90e      	bls.n	81054cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81054ae:	68fb      	ldr	r3, [r7, #12]
 81054b0:	22ff      	movs	r2, #255	; 0xff
 81054b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81054b4:	68fb      	ldr	r3, [r7, #12]
 81054b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81054b8:	b2da      	uxtb	r2, r3
 81054ba:	8979      	ldrh	r1, [r7, #10]
 81054bc:	2300      	movs	r3, #0
 81054be:	9300      	str	r3, [sp, #0]
 81054c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81054c4:	68f8      	ldr	r0, [r7, #12]
 81054c6:	f000 fee3 	bl	8106290 <I2C_TransferConfig>
 81054ca:	e00f      	b.n	81054ec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81054cc:	68fb      	ldr	r3, [r7, #12]
 81054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81054d0:	b29a      	uxth	r2, r3
 81054d2:	68fb      	ldr	r3, [r7, #12]
 81054d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81054d6:	68fb      	ldr	r3, [r7, #12]
 81054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81054da:	b2da      	uxtb	r2, r3
 81054dc:	8979      	ldrh	r1, [r7, #10]
 81054de:	2300      	movs	r3, #0
 81054e0:	9300      	str	r3, [sp, #0]
 81054e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81054e6:	68f8      	ldr	r0, [r7, #12]
 81054e8:	f000 fed2 	bl	8106290 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81054ec:	68fb      	ldr	r3, [r7, #12]
 81054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81054f0:	b29b      	uxth	r3, r3
 81054f2:	2b00      	cmp	r3, #0
 81054f4:	d19e      	bne.n	8105434 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81054f6:	697a      	ldr	r2, [r7, #20]
 81054f8:	6a39      	ldr	r1, [r7, #32]
 81054fa:	68f8      	ldr	r0, [r7, #12]
 81054fc:	f000 fdba 	bl	8106074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105500:	4603      	mov	r3, r0
 8105502:	2b00      	cmp	r3, #0
 8105504:	d001      	beq.n	810550a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8105506:	2301      	movs	r3, #1
 8105508:	e01a      	b.n	8105540 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810550a:	68fb      	ldr	r3, [r7, #12]
 810550c:	681b      	ldr	r3, [r3, #0]
 810550e:	2220      	movs	r2, #32
 8105510:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105512:	68fb      	ldr	r3, [r7, #12]
 8105514:	681b      	ldr	r3, [r3, #0]
 8105516:	6859      	ldr	r1, [r3, #4]
 8105518:	68fb      	ldr	r3, [r7, #12]
 810551a:	681a      	ldr	r2, [r3, #0]
 810551c:	4b0b      	ldr	r3, [pc, #44]	; (810554c <HAL_I2C_Master_Transmit+0x1e4>)
 810551e:	400b      	ands	r3, r1
 8105520:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105522:	68fb      	ldr	r3, [r7, #12]
 8105524:	2220      	movs	r2, #32
 8105526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810552a:	68fb      	ldr	r3, [r7, #12]
 810552c:	2200      	movs	r2, #0
 810552e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105532:	68fb      	ldr	r3, [r7, #12]
 8105534:	2200      	movs	r2, #0
 8105536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810553a:	2300      	movs	r3, #0
 810553c:	e000      	b.n	8105540 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 810553e:	2302      	movs	r3, #2
  }
}
 8105540:	4618      	mov	r0, r3
 8105542:	3718      	adds	r7, #24
 8105544:	46bd      	mov	sp, r7
 8105546:	bd80      	pop	{r7, pc}
 8105548:	80002000 	.word	0x80002000
 810554c:	fe00e800 	.word	0xfe00e800

08105550 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105550:	b580      	push	{r7, lr}
 8105552:	b088      	sub	sp, #32
 8105554:	af02      	add	r7, sp, #8
 8105556:	60f8      	str	r0, [r7, #12]
 8105558:	607a      	str	r2, [r7, #4]
 810555a:	461a      	mov	r2, r3
 810555c:	460b      	mov	r3, r1
 810555e:	817b      	strh	r3, [r7, #10]
 8105560:	4613      	mov	r3, r2
 8105562:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810556a:	b2db      	uxtb	r3, r3
 810556c:	2b20      	cmp	r3, #32
 810556e:	f040 80db 	bne.w	8105728 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105572:	68fb      	ldr	r3, [r7, #12]
 8105574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105578:	2b01      	cmp	r3, #1
 810557a:	d101      	bne.n	8105580 <HAL_I2C_Master_Receive+0x30>
 810557c:	2302      	movs	r3, #2
 810557e:	e0d4      	b.n	810572a <HAL_I2C_Master_Receive+0x1da>
 8105580:	68fb      	ldr	r3, [r7, #12]
 8105582:	2201      	movs	r2, #1
 8105584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105588:	f7fc fee0 	bl	810234c <HAL_GetTick>
 810558c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810558e:	697b      	ldr	r3, [r7, #20]
 8105590:	9300      	str	r3, [sp, #0]
 8105592:	2319      	movs	r3, #25
 8105594:	2201      	movs	r2, #1
 8105596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810559a:	68f8      	ldr	r0, [r7, #12]
 810559c:	f000 fcea 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 81055a0:	4603      	mov	r3, r0
 81055a2:	2b00      	cmp	r3, #0
 81055a4:	d001      	beq.n	81055aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81055a6:	2301      	movs	r3, #1
 81055a8:	e0bf      	b.n	810572a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81055aa:	68fb      	ldr	r3, [r7, #12]
 81055ac:	2222      	movs	r2, #34	; 0x22
 81055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81055b2:	68fb      	ldr	r3, [r7, #12]
 81055b4:	2210      	movs	r2, #16
 81055b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81055ba:	68fb      	ldr	r3, [r7, #12]
 81055bc:	2200      	movs	r2, #0
 81055be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81055c0:	68fb      	ldr	r3, [r7, #12]
 81055c2:	687a      	ldr	r2, [r7, #4]
 81055c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81055c6:	68fb      	ldr	r3, [r7, #12]
 81055c8:	893a      	ldrh	r2, [r7, #8]
 81055ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81055cc:	68fb      	ldr	r3, [r7, #12]
 81055ce:	2200      	movs	r2, #0
 81055d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81055d2:	68fb      	ldr	r3, [r7, #12]
 81055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055d6:	b29b      	uxth	r3, r3
 81055d8:	2bff      	cmp	r3, #255	; 0xff
 81055da:	d90e      	bls.n	81055fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	22ff      	movs	r2, #255	; 0xff
 81055e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81055e2:	68fb      	ldr	r3, [r7, #12]
 81055e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055e6:	b2da      	uxtb	r2, r3
 81055e8:	8979      	ldrh	r1, [r7, #10]
 81055ea:	4b52      	ldr	r3, [pc, #328]	; (8105734 <HAL_I2C_Master_Receive+0x1e4>)
 81055ec:	9300      	str	r3, [sp, #0]
 81055ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81055f2:	68f8      	ldr	r0, [r7, #12]
 81055f4:	f000 fe4c 	bl	8106290 <I2C_TransferConfig>
 81055f8:	e06d      	b.n	81056d6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81055fa:	68fb      	ldr	r3, [r7, #12]
 81055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055fe:	b29a      	uxth	r2, r3
 8105600:	68fb      	ldr	r3, [r7, #12]
 8105602:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105608:	b2da      	uxtb	r2, r3
 810560a:	8979      	ldrh	r1, [r7, #10]
 810560c:	4b49      	ldr	r3, [pc, #292]	; (8105734 <HAL_I2C_Master_Receive+0x1e4>)
 810560e:	9300      	str	r3, [sp, #0]
 8105610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105614:	68f8      	ldr	r0, [r7, #12]
 8105616:	f000 fe3b 	bl	8106290 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 810561a:	e05c      	b.n	81056d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810561c:	697a      	ldr	r2, [r7, #20]
 810561e:	6a39      	ldr	r1, [r7, #32]
 8105620:	68f8      	ldr	r0, [r7, #12]
 8105622:	f000 fd63 	bl	81060ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8105626:	4603      	mov	r3, r0
 8105628:	2b00      	cmp	r3, #0
 810562a:	d001      	beq.n	8105630 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 810562c:	2301      	movs	r3, #1
 810562e:	e07c      	b.n	810572a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105630:	68fb      	ldr	r3, [r7, #12]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105636:	68fb      	ldr	r3, [r7, #12]
 8105638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810563a:	b2d2      	uxtb	r2, r2
 810563c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810563e:	68fb      	ldr	r3, [r7, #12]
 8105640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105642:	1c5a      	adds	r2, r3, #1
 8105644:	68fb      	ldr	r3, [r7, #12]
 8105646:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105648:	68fb      	ldr	r3, [r7, #12]
 810564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810564c:	3b01      	subs	r3, #1
 810564e:	b29a      	uxth	r2, r3
 8105650:	68fb      	ldr	r3, [r7, #12]
 8105652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105654:	68fb      	ldr	r3, [r7, #12]
 8105656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105658:	b29b      	uxth	r3, r3
 810565a:	3b01      	subs	r3, #1
 810565c:	b29a      	uxth	r2, r3
 810565e:	68fb      	ldr	r3, [r7, #12]
 8105660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105662:	68fb      	ldr	r3, [r7, #12]
 8105664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105666:	b29b      	uxth	r3, r3
 8105668:	2b00      	cmp	r3, #0
 810566a:	d034      	beq.n	81056d6 <HAL_I2C_Master_Receive+0x186>
 810566c:	68fb      	ldr	r3, [r7, #12]
 810566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105670:	2b00      	cmp	r3, #0
 8105672:	d130      	bne.n	81056d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105674:	697b      	ldr	r3, [r7, #20]
 8105676:	9300      	str	r3, [sp, #0]
 8105678:	6a3b      	ldr	r3, [r7, #32]
 810567a:	2200      	movs	r2, #0
 810567c:	2180      	movs	r1, #128	; 0x80
 810567e:	68f8      	ldr	r0, [r7, #12]
 8105680:	f000 fc78 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 8105684:	4603      	mov	r3, r0
 8105686:	2b00      	cmp	r3, #0
 8105688:	d001      	beq.n	810568e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 810568a:	2301      	movs	r3, #1
 810568c:	e04d      	b.n	810572a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810568e:	68fb      	ldr	r3, [r7, #12]
 8105690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105692:	b29b      	uxth	r3, r3
 8105694:	2bff      	cmp	r3, #255	; 0xff
 8105696:	d90e      	bls.n	81056b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105698:	68fb      	ldr	r3, [r7, #12]
 810569a:	22ff      	movs	r2, #255	; 0xff
 810569c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810569e:	68fb      	ldr	r3, [r7, #12]
 81056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81056a2:	b2da      	uxtb	r2, r3
 81056a4:	8979      	ldrh	r1, [r7, #10]
 81056a6:	2300      	movs	r3, #0
 81056a8:	9300      	str	r3, [sp, #0]
 81056aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81056ae:	68f8      	ldr	r0, [r7, #12]
 81056b0:	f000 fdee 	bl	8106290 <I2C_TransferConfig>
 81056b4:	e00f      	b.n	81056d6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81056b6:	68fb      	ldr	r3, [r7, #12]
 81056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81056ba:	b29a      	uxth	r2, r3
 81056bc:	68fb      	ldr	r3, [r7, #12]
 81056be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81056c0:	68fb      	ldr	r3, [r7, #12]
 81056c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81056c4:	b2da      	uxtb	r2, r3
 81056c6:	8979      	ldrh	r1, [r7, #10]
 81056c8:	2300      	movs	r3, #0
 81056ca:	9300      	str	r3, [sp, #0]
 81056cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81056d0:	68f8      	ldr	r0, [r7, #12]
 81056d2:	f000 fddd 	bl	8106290 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81056d6:	68fb      	ldr	r3, [r7, #12]
 81056d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81056da:	b29b      	uxth	r3, r3
 81056dc:	2b00      	cmp	r3, #0
 81056de:	d19d      	bne.n	810561c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81056e0:	697a      	ldr	r2, [r7, #20]
 81056e2:	6a39      	ldr	r1, [r7, #32]
 81056e4:	68f8      	ldr	r0, [r7, #12]
 81056e6:	f000 fcc5 	bl	8106074 <I2C_WaitOnSTOPFlagUntilTimeout>
 81056ea:	4603      	mov	r3, r0
 81056ec:	2b00      	cmp	r3, #0
 81056ee:	d001      	beq.n	81056f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81056f0:	2301      	movs	r3, #1
 81056f2:	e01a      	b.n	810572a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81056f4:	68fb      	ldr	r3, [r7, #12]
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	2220      	movs	r2, #32
 81056fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81056fc:	68fb      	ldr	r3, [r7, #12]
 81056fe:	681b      	ldr	r3, [r3, #0]
 8105700:	6859      	ldr	r1, [r3, #4]
 8105702:	68fb      	ldr	r3, [r7, #12]
 8105704:	681a      	ldr	r2, [r3, #0]
 8105706:	4b0c      	ldr	r3, [pc, #48]	; (8105738 <HAL_I2C_Master_Receive+0x1e8>)
 8105708:	400b      	ands	r3, r1
 810570a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810570c:	68fb      	ldr	r3, [r7, #12]
 810570e:	2220      	movs	r2, #32
 8105710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105714:	68fb      	ldr	r3, [r7, #12]
 8105716:	2200      	movs	r2, #0
 8105718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810571c:	68fb      	ldr	r3, [r7, #12]
 810571e:	2200      	movs	r2, #0
 8105720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105724:	2300      	movs	r3, #0
 8105726:	e000      	b.n	810572a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8105728:	2302      	movs	r3, #2
  }
}
 810572a:	4618      	mov	r0, r3
 810572c:	3718      	adds	r7, #24
 810572e:	46bd      	mov	sp, r7
 8105730:	bd80      	pop	{r7, pc}
 8105732:	bf00      	nop
 8105734:	80002400 	.word	0x80002400
 8105738:	fe00e800 	.word	0xfe00e800

0810573c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810573c:	b580      	push	{r7, lr}
 810573e:	b088      	sub	sp, #32
 8105740:	af02      	add	r7, sp, #8
 8105742:	60f8      	str	r0, [r7, #12]
 8105744:	4608      	mov	r0, r1
 8105746:	4611      	mov	r1, r2
 8105748:	461a      	mov	r2, r3
 810574a:	4603      	mov	r3, r0
 810574c:	817b      	strh	r3, [r7, #10]
 810574e:	460b      	mov	r3, r1
 8105750:	813b      	strh	r3, [r7, #8]
 8105752:	4613      	mov	r3, r2
 8105754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105756:	68fb      	ldr	r3, [r7, #12]
 8105758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810575c:	b2db      	uxtb	r3, r3
 810575e:	2b20      	cmp	r3, #32
 8105760:	f040 80f9 	bne.w	8105956 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8105764:	6a3b      	ldr	r3, [r7, #32]
 8105766:	2b00      	cmp	r3, #0
 8105768:	d002      	beq.n	8105770 <HAL_I2C_Mem_Write+0x34>
 810576a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810576c:	2b00      	cmp	r3, #0
 810576e:	d105      	bne.n	810577c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8105770:	68fb      	ldr	r3, [r7, #12]
 8105772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8105776:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8105778:	2301      	movs	r3, #1
 810577a:	e0ed      	b.n	8105958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810577c:	68fb      	ldr	r3, [r7, #12]
 810577e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105782:	2b01      	cmp	r3, #1
 8105784:	d101      	bne.n	810578a <HAL_I2C_Mem_Write+0x4e>
 8105786:	2302      	movs	r3, #2
 8105788:	e0e6      	b.n	8105958 <HAL_I2C_Mem_Write+0x21c>
 810578a:	68fb      	ldr	r3, [r7, #12]
 810578c:	2201      	movs	r2, #1
 810578e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105792:	f7fc fddb 	bl	810234c <HAL_GetTick>
 8105796:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105798:	697b      	ldr	r3, [r7, #20]
 810579a:	9300      	str	r3, [sp, #0]
 810579c:	2319      	movs	r3, #25
 810579e:	2201      	movs	r2, #1
 81057a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81057a4:	68f8      	ldr	r0, [r7, #12]
 81057a6:	f000 fbe5 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 81057aa:	4603      	mov	r3, r0
 81057ac:	2b00      	cmp	r3, #0
 81057ae:	d001      	beq.n	81057b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81057b0:	2301      	movs	r3, #1
 81057b2:	e0d1      	b.n	8105958 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81057b4:	68fb      	ldr	r3, [r7, #12]
 81057b6:	2221      	movs	r2, #33	; 0x21
 81057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81057bc:	68fb      	ldr	r3, [r7, #12]
 81057be:	2240      	movs	r2, #64	; 0x40
 81057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81057c4:	68fb      	ldr	r3, [r7, #12]
 81057c6:	2200      	movs	r2, #0
 81057c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81057ca:	68fb      	ldr	r3, [r7, #12]
 81057cc:	6a3a      	ldr	r2, [r7, #32]
 81057ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81057d0:	68fb      	ldr	r3, [r7, #12]
 81057d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81057d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81057d6:	68fb      	ldr	r3, [r7, #12]
 81057d8:	2200      	movs	r2, #0
 81057da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81057dc:	88f8      	ldrh	r0, [r7, #6]
 81057de:	893a      	ldrh	r2, [r7, #8]
 81057e0:	8979      	ldrh	r1, [r7, #10]
 81057e2:	697b      	ldr	r3, [r7, #20]
 81057e4:	9301      	str	r3, [sp, #4]
 81057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057e8:	9300      	str	r3, [sp, #0]
 81057ea:	4603      	mov	r3, r0
 81057ec:	68f8      	ldr	r0, [r7, #12]
 81057ee:	f000 faf5 	bl	8105ddc <I2C_RequestMemoryWrite>
 81057f2:	4603      	mov	r3, r0
 81057f4:	2b00      	cmp	r3, #0
 81057f6:	d005      	beq.n	8105804 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81057f8:	68fb      	ldr	r3, [r7, #12]
 81057fa:	2200      	movs	r2, #0
 81057fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105800:	2301      	movs	r3, #1
 8105802:	e0a9      	b.n	8105958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105804:	68fb      	ldr	r3, [r7, #12]
 8105806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105808:	b29b      	uxth	r3, r3
 810580a:	2bff      	cmp	r3, #255	; 0xff
 810580c:	d90e      	bls.n	810582c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810580e:	68fb      	ldr	r3, [r7, #12]
 8105810:	22ff      	movs	r2, #255	; 0xff
 8105812:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105814:	68fb      	ldr	r3, [r7, #12]
 8105816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105818:	b2da      	uxtb	r2, r3
 810581a:	8979      	ldrh	r1, [r7, #10]
 810581c:	2300      	movs	r3, #0
 810581e:	9300      	str	r3, [sp, #0]
 8105820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105824:	68f8      	ldr	r0, [r7, #12]
 8105826:	f000 fd33 	bl	8106290 <I2C_TransferConfig>
 810582a:	e00f      	b.n	810584c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810582c:	68fb      	ldr	r3, [r7, #12]
 810582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105830:	b29a      	uxth	r2, r3
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105836:	68fb      	ldr	r3, [r7, #12]
 8105838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810583a:	b2da      	uxtb	r2, r3
 810583c:	8979      	ldrh	r1, [r7, #10]
 810583e:	2300      	movs	r3, #0
 8105840:	9300      	str	r3, [sp, #0]
 8105842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105846:	68f8      	ldr	r0, [r7, #12]
 8105848:	f000 fd22 	bl	8106290 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810584c:	697a      	ldr	r2, [r7, #20]
 810584e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105850:	68f8      	ldr	r0, [r7, #12]
 8105852:	f000 fbcf 	bl	8105ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8105856:	4603      	mov	r3, r0
 8105858:	2b00      	cmp	r3, #0
 810585a:	d001      	beq.n	8105860 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 810585c:	2301      	movs	r3, #1
 810585e:	e07b      	b.n	8105958 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105860:	68fb      	ldr	r3, [r7, #12]
 8105862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105864:	781a      	ldrb	r2, [r3, #0]
 8105866:	68fb      	ldr	r3, [r7, #12]
 8105868:	681b      	ldr	r3, [r3, #0]
 810586a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810586c:	68fb      	ldr	r3, [r7, #12]
 810586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105870:	1c5a      	adds	r2, r3, #1
 8105872:	68fb      	ldr	r3, [r7, #12]
 8105874:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810587a:	b29b      	uxth	r3, r3
 810587c:	3b01      	subs	r3, #1
 810587e:	b29a      	uxth	r2, r3
 8105880:	68fb      	ldr	r3, [r7, #12]
 8105882:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105888:	3b01      	subs	r3, #1
 810588a:	b29a      	uxth	r2, r3
 810588c:	68fb      	ldr	r3, [r7, #12]
 810588e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105890:	68fb      	ldr	r3, [r7, #12]
 8105892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105894:	b29b      	uxth	r3, r3
 8105896:	2b00      	cmp	r3, #0
 8105898:	d034      	beq.n	8105904 <HAL_I2C_Mem_Write+0x1c8>
 810589a:	68fb      	ldr	r3, [r7, #12]
 810589c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d130      	bne.n	8105904 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81058a2:	697b      	ldr	r3, [r7, #20]
 81058a4:	9300      	str	r3, [sp, #0]
 81058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058a8:	2200      	movs	r2, #0
 81058aa:	2180      	movs	r1, #128	; 0x80
 81058ac:	68f8      	ldr	r0, [r7, #12]
 81058ae:	f000 fb61 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 81058b2:	4603      	mov	r3, r0
 81058b4:	2b00      	cmp	r3, #0
 81058b6:	d001      	beq.n	81058bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81058b8:	2301      	movs	r3, #1
 81058ba:	e04d      	b.n	8105958 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81058bc:	68fb      	ldr	r3, [r7, #12]
 81058be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81058c0:	b29b      	uxth	r3, r3
 81058c2:	2bff      	cmp	r3, #255	; 0xff
 81058c4:	d90e      	bls.n	81058e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	22ff      	movs	r2, #255	; 0xff
 81058ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81058cc:	68fb      	ldr	r3, [r7, #12]
 81058ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81058d0:	b2da      	uxtb	r2, r3
 81058d2:	8979      	ldrh	r1, [r7, #10]
 81058d4:	2300      	movs	r3, #0
 81058d6:	9300      	str	r3, [sp, #0]
 81058d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81058dc:	68f8      	ldr	r0, [r7, #12]
 81058de:	f000 fcd7 	bl	8106290 <I2C_TransferConfig>
 81058e2:	e00f      	b.n	8105904 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81058e4:	68fb      	ldr	r3, [r7, #12]
 81058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81058e8:	b29a      	uxth	r2, r3
 81058ea:	68fb      	ldr	r3, [r7, #12]
 81058ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81058ee:	68fb      	ldr	r3, [r7, #12]
 81058f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81058f2:	b2da      	uxtb	r2, r3
 81058f4:	8979      	ldrh	r1, [r7, #10]
 81058f6:	2300      	movs	r3, #0
 81058f8:	9300      	str	r3, [sp, #0]
 81058fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81058fe:	68f8      	ldr	r0, [r7, #12]
 8105900:	f000 fcc6 	bl	8106290 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8105904:	68fb      	ldr	r3, [r7, #12]
 8105906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105908:	b29b      	uxth	r3, r3
 810590a:	2b00      	cmp	r3, #0
 810590c:	d19e      	bne.n	810584c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810590e:	697a      	ldr	r2, [r7, #20]
 8105910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105912:	68f8      	ldr	r0, [r7, #12]
 8105914:	f000 fbae 	bl	8106074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105918:	4603      	mov	r3, r0
 810591a:	2b00      	cmp	r3, #0
 810591c:	d001      	beq.n	8105922 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810591e:	2301      	movs	r3, #1
 8105920:	e01a      	b.n	8105958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105922:	68fb      	ldr	r3, [r7, #12]
 8105924:	681b      	ldr	r3, [r3, #0]
 8105926:	2220      	movs	r2, #32
 8105928:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810592a:	68fb      	ldr	r3, [r7, #12]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	6859      	ldr	r1, [r3, #4]
 8105930:	68fb      	ldr	r3, [r7, #12]
 8105932:	681a      	ldr	r2, [r3, #0]
 8105934:	4b0a      	ldr	r3, [pc, #40]	; (8105960 <HAL_I2C_Mem_Write+0x224>)
 8105936:	400b      	ands	r3, r1
 8105938:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810593a:	68fb      	ldr	r3, [r7, #12]
 810593c:	2220      	movs	r2, #32
 810593e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105942:	68fb      	ldr	r3, [r7, #12]
 8105944:	2200      	movs	r2, #0
 8105946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810594a:	68fb      	ldr	r3, [r7, #12]
 810594c:	2200      	movs	r2, #0
 810594e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105952:	2300      	movs	r3, #0
 8105954:	e000      	b.n	8105958 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8105956:	2302      	movs	r3, #2
  }
}
 8105958:	4618      	mov	r0, r3
 810595a:	3718      	adds	r7, #24
 810595c:	46bd      	mov	sp, r7
 810595e:	bd80      	pop	{r7, pc}
 8105960:	fe00e800 	.word	0xfe00e800

08105964 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105964:	b580      	push	{r7, lr}
 8105966:	b088      	sub	sp, #32
 8105968:	af02      	add	r7, sp, #8
 810596a:	60f8      	str	r0, [r7, #12]
 810596c:	4608      	mov	r0, r1
 810596e:	4611      	mov	r1, r2
 8105970:	461a      	mov	r2, r3
 8105972:	4603      	mov	r3, r0
 8105974:	817b      	strh	r3, [r7, #10]
 8105976:	460b      	mov	r3, r1
 8105978:	813b      	strh	r3, [r7, #8]
 810597a:	4613      	mov	r3, r2
 810597c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810597e:	68fb      	ldr	r3, [r7, #12]
 8105980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105984:	b2db      	uxtb	r3, r3
 8105986:	2b20      	cmp	r3, #32
 8105988:	f040 80fd 	bne.w	8105b86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810598c:	6a3b      	ldr	r3, [r7, #32]
 810598e:	2b00      	cmp	r3, #0
 8105990:	d002      	beq.n	8105998 <HAL_I2C_Mem_Read+0x34>
 8105992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8105994:	2b00      	cmp	r3, #0
 8105996:	d105      	bne.n	81059a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8105998:	68fb      	ldr	r3, [r7, #12]
 810599a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810599e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81059a0:	2301      	movs	r3, #1
 81059a2:	e0f1      	b.n	8105b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81059a4:	68fb      	ldr	r3, [r7, #12]
 81059a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81059aa:	2b01      	cmp	r3, #1
 81059ac:	d101      	bne.n	81059b2 <HAL_I2C_Mem_Read+0x4e>
 81059ae:	2302      	movs	r3, #2
 81059b0:	e0ea      	b.n	8105b88 <HAL_I2C_Mem_Read+0x224>
 81059b2:	68fb      	ldr	r3, [r7, #12]
 81059b4:	2201      	movs	r2, #1
 81059b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81059ba:	f7fc fcc7 	bl	810234c <HAL_GetTick>
 81059be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81059c0:	697b      	ldr	r3, [r7, #20]
 81059c2:	9300      	str	r3, [sp, #0]
 81059c4:	2319      	movs	r3, #25
 81059c6:	2201      	movs	r2, #1
 81059c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81059cc:	68f8      	ldr	r0, [r7, #12]
 81059ce:	f000 fad1 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 81059d2:	4603      	mov	r3, r0
 81059d4:	2b00      	cmp	r3, #0
 81059d6:	d001      	beq.n	81059dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81059d8:	2301      	movs	r3, #1
 81059da:	e0d5      	b.n	8105b88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81059dc:	68fb      	ldr	r3, [r7, #12]
 81059de:	2222      	movs	r2, #34	; 0x22
 81059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81059e4:	68fb      	ldr	r3, [r7, #12]
 81059e6:	2240      	movs	r2, #64	; 0x40
 81059e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81059ec:	68fb      	ldr	r3, [r7, #12]
 81059ee:	2200      	movs	r2, #0
 81059f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81059f2:	68fb      	ldr	r3, [r7, #12]
 81059f4:	6a3a      	ldr	r2, [r7, #32]
 81059f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81059f8:	68fb      	ldr	r3, [r7, #12]
 81059fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81059fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81059fe:	68fb      	ldr	r3, [r7, #12]
 8105a00:	2200      	movs	r2, #0
 8105a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105a04:	88f8      	ldrh	r0, [r7, #6]
 8105a06:	893a      	ldrh	r2, [r7, #8]
 8105a08:	8979      	ldrh	r1, [r7, #10]
 8105a0a:	697b      	ldr	r3, [r7, #20]
 8105a0c:	9301      	str	r3, [sp, #4]
 8105a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105a10:	9300      	str	r3, [sp, #0]
 8105a12:	4603      	mov	r3, r0
 8105a14:	68f8      	ldr	r0, [r7, #12]
 8105a16:	f000 fa35 	bl	8105e84 <I2C_RequestMemoryRead>
 8105a1a:	4603      	mov	r3, r0
 8105a1c:	2b00      	cmp	r3, #0
 8105a1e:	d005      	beq.n	8105a2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105a20:	68fb      	ldr	r3, [r7, #12]
 8105a22:	2200      	movs	r2, #0
 8105a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105a28:	2301      	movs	r3, #1
 8105a2a:	e0ad      	b.n	8105b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105a2c:	68fb      	ldr	r3, [r7, #12]
 8105a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105a30:	b29b      	uxth	r3, r3
 8105a32:	2bff      	cmp	r3, #255	; 0xff
 8105a34:	d90e      	bls.n	8105a54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105a36:	68fb      	ldr	r3, [r7, #12]
 8105a38:	22ff      	movs	r2, #255	; 0xff
 8105a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8105a3c:	68fb      	ldr	r3, [r7, #12]
 8105a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105a40:	b2da      	uxtb	r2, r3
 8105a42:	8979      	ldrh	r1, [r7, #10]
 8105a44:	4b52      	ldr	r3, [pc, #328]	; (8105b90 <HAL_I2C_Mem_Read+0x22c>)
 8105a46:	9300      	str	r3, [sp, #0]
 8105a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105a4c:	68f8      	ldr	r0, [r7, #12]
 8105a4e:	f000 fc1f 	bl	8106290 <I2C_TransferConfig>
 8105a52:	e00f      	b.n	8105a74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105a54:	68fb      	ldr	r3, [r7, #12]
 8105a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105a58:	b29a      	uxth	r2, r3
 8105a5a:	68fb      	ldr	r3, [r7, #12]
 8105a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8105a5e:	68fb      	ldr	r3, [r7, #12]
 8105a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105a62:	b2da      	uxtb	r2, r3
 8105a64:	8979      	ldrh	r1, [r7, #10]
 8105a66:	4b4a      	ldr	r3, [pc, #296]	; (8105b90 <HAL_I2C_Mem_Read+0x22c>)
 8105a68:	9300      	str	r3, [sp, #0]
 8105a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105a6e:	68f8      	ldr	r0, [r7, #12]
 8105a70:	f000 fc0e 	bl	8106290 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8105a74:	697b      	ldr	r3, [r7, #20]
 8105a76:	9300      	str	r3, [sp, #0]
 8105a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105a7a:	2200      	movs	r2, #0
 8105a7c:	2104      	movs	r1, #4
 8105a7e:	68f8      	ldr	r0, [r7, #12]
 8105a80:	f000 fa78 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 8105a84:	4603      	mov	r3, r0
 8105a86:	2b00      	cmp	r3, #0
 8105a88:	d001      	beq.n	8105a8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8105a8a:	2301      	movs	r3, #1
 8105a8c:	e07c      	b.n	8105b88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105a8e:	68fb      	ldr	r3, [r7, #12]
 8105a90:	681b      	ldr	r3, [r3, #0]
 8105a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105a94:	68fb      	ldr	r3, [r7, #12]
 8105a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105a98:	b2d2      	uxtb	r2, r2
 8105a9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105a9c:	68fb      	ldr	r3, [r7, #12]
 8105a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105aa0:	1c5a      	adds	r2, r3, #1
 8105aa2:	68fb      	ldr	r3, [r7, #12]
 8105aa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105aa6:	68fb      	ldr	r3, [r7, #12]
 8105aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105aaa:	3b01      	subs	r3, #1
 8105aac:	b29a      	uxth	r2, r3
 8105aae:	68fb      	ldr	r3, [r7, #12]
 8105ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105ab2:	68fb      	ldr	r3, [r7, #12]
 8105ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105ab6:	b29b      	uxth	r3, r3
 8105ab8:	3b01      	subs	r3, #1
 8105aba:	b29a      	uxth	r2, r3
 8105abc:	68fb      	ldr	r3, [r7, #12]
 8105abe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105ac0:	68fb      	ldr	r3, [r7, #12]
 8105ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105ac4:	b29b      	uxth	r3, r3
 8105ac6:	2b00      	cmp	r3, #0
 8105ac8:	d034      	beq.n	8105b34 <HAL_I2C_Mem_Read+0x1d0>
 8105aca:	68fb      	ldr	r3, [r7, #12]
 8105acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105ace:	2b00      	cmp	r3, #0
 8105ad0:	d130      	bne.n	8105b34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105ad2:	697b      	ldr	r3, [r7, #20]
 8105ad4:	9300      	str	r3, [sp, #0]
 8105ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105ad8:	2200      	movs	r2, #0
 8105ada:	2180      	movs	r1, #128	; 0x80
 8105adc:	68f8      	ldr	r0, [r7, #12]
 8105ade:	f000 fa49 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 8105ae2:	4603      	mov	r3, r0
 8105ae4:	2b00      	cmp	r3, #0
 8105ae6:	d001      	beq.n	8105aec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8105ae8:	2301      	movs	r3, #1
 8105aea:	e04d      	b.n	8105b88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105aec:	68fb      	ldr	r3, [r7, #12]
 8105aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105af0:	b29b      	uxth	r3, r3
 8105af2:	2bff      	cmp	r3, #255	; 0xff
 8105af4:	d90e      	bls.n	8105b14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	22ff      	movs	r2, #255	; 0xff
 8105afa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105afc:	68fb      	ldr	r3, [r7, #12]
 8105afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105b00:	b2da      	uxtb	r2, r3
 8105b02:	8979      	ldrh	r1, [r7, #10]
 8105b04:	2300      	movs	r3, #0
 8105b06:	9300      	str	r3, [sp, #0]
 8105b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105b0c:	68f8      	ldr	r0, [r7, #12]
 8105b0e:	f000 fbbf 	bl	8106290 <I2C_TransferConfig>
 8105b12:	e00f      	b.n	8105b34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105b14:	68fb      	ldr	r3, [r7, #12]
 8105b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b18:	b29a      	uxth	r2, r3
 8105b1a:	68fb      	ldr	r3, [r7, #12]
 8105b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105b1e:	68fb      	ldr	r3, [r7, #12]
 8105b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105b22:	b2da      	uxtb	r2, r3
 8105b24:	8979      	ldrh	r1, [r7, #10]
 8105b26:	2300      	movs	r3, #0
 8105b28:	9300      	str	r3, [sp, #0]
 8105b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105b2e:	68f8      	ldr	r0, [r7, #12]
 8105b30:	f000 fbae 	bl	8106290 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8105b34:	68fb      	ldr	r3, [r7, #12]
 8105b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b38:	b29b      	uxth	r3, r3
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d19a      	bne.n	8105a74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105b3e:	697a      	ldr	r2, [r7, #20]
 8105b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105b42:	68f8      	ldr	r0, [r7, #12]
 8105b44:	f000 fa96 	bl	8106074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105b48:	4603      	mov	r3, r0
 8105b4a:	2b00      	cmp	r3, #0
 8105b4c:	d001      	beq.n	8105b52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8105b4e:	2301      	movs	r3, #1
 8105b50:	e01a      	b.n	8105b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105b52:	68fb      	ldr	r3, [r7, #12]
 8105b54:	681b      	ldr	r3, [r3, #0]
 8105b56:	2220      	movs	r2, #32
 8105b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105b5a:	68fb      	ldr	r3, [r7, #12]
 8105b5c:	681b      	ldr	r3, [r3, #0]
 8105b5e:	6859      	ldr	r1, [r3, #4]
 8105b60:	68fb      	ldr	r3, [r7, #12]
 8105b62:	681a      	ldr	r2, [r3, #0]
 8105b64:	4b0b      	ldr	r3, [pc, #44]	; (8105b94 <HAL_I2C_Mem_Read+0x230>)
 8105b66:	400b      	ands	r3, r1
 8105b68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105b6a:	68fb      	ldr	r3, [r7, #12]
 8105b6c:	2220      	movs	r2, #32
 8105b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105b72:	68fb      	ldr	r3, [r7, #12]
 8105b74:	2200      	movs	r2, #0
 8105b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105b7a:	68fb      	ldr	r3, [r7, #12]
 8105b7c:	2200      	movs	r2, #0
 8105b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105b82:	2300      	movs	r3, #0
 8105b84:	e000      	b.n	8105b88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8105b86:	2302      	movs	r3, #2
  }
}
 8105b88:	4618      	mov	r0, r3
 8105b8a:	3718      	adds	r7, #24
 8105b8c:	46bd      	mov	sp, r7
 8105b8e:	bd80      	pop	{r7, pc}
 8105b90:	80002400 	.word	0x80002400
 8105b94:	fe00e800 	.word	0xfe00e800

08105b98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8105b98:	b580      	push	{r7, lr}
 8105b9a:	b08a      	sub	sp, #40	; 0x28
 8105b9c:	af02      	add	r7, sp, #8
 8105b9e:	60f8      	str	r0, [r7, #12]
 8105ba0:	607a      	str	r2, [r7, #4]
 8105ba2:	603b      	str	r3, [r7, #0]
 8105ba4:	460b      	mov	r3, r1
 8105ba6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8105ba8:	2300      	movs	r3, #0
 8105baa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105bac:	68fb      	ldr	r3, [r7, #12]
 8105bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105bb2:	b2db      	uxtb	r3, r3
 8105bb4:	2b20      	cmp	r3, #32
 8105bb6:	f040 80f1 	bne.w	8105d9c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8105bba:	68fb      	ldr	r3, [r7, #12]
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	699b      	ldr	r3, [r3, #24]
 8105bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105bc8:	d101      	bne.n	8105bce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8105bca:	2302      	movs	r3, #2
 8105bcc:	e0e7      	b.n	8105d9e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105bce:	68fb      	ldr	r3, [r7, #12]
 8105bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105bd4:	2b01      	cmp	r3, #1
 8105bd6:	d101      	bne.n	8105bdc <HAL_I2C_IsDeviceReady+0x44>
 8105bd8:	2302      	movs	r3, #2
 8105bda:	e0e0      	b.n	8105d9e <HAL_I2C_IsDeviceReady+0x206>
 8105bdc:	68fb      	ldr	r3, [r7, #12]
 8105bde:	2201      	movs	r2, #1
 8105be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105be4:	68fb      	ldr	r3, [r7, #12]
 8105be6:	2224      	movs	r2, #36	; 0x24
 8105be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105bec:	68fb      	ldr	r3, [r7, #12]
 8105bee:	2200      	movs	r2, #0
 8105bf0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8105bf2:	68fb      	ldr	r3, [r7, #12]
 8105bf4:	68db      	ldr	r3, [r3, #12]
 8105bf6:	2b01      	cmp	r3, #1
 8105bf8:	d107      	bne.n	8105c0a <HAL_I2C_IsDeviceReady+0x72>
 8105bfa:	897b      	ldrh	r3, [r7, #10]
 8105bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8105c00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8105c04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8105c08:	e004      	b.n	8105c14 <HAL_I2C_IsDeviceReady+0x7c>
 8105c0a:	897b      	ldrh	r3, [r7, #10]
 8105c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8105c10:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8105c14:	68fa      	ldr	r2, [r7, #12]
 8105c16:	6812      	ldr	r2, [r2, #0]
 8105c18:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8105c1a:	f7fc fb97 	bl	810234c <HAL_GetTick>
 8105c1e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8105c20:	68fb      	ldr	r3, [r7, #12]
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	699b      	ldr	r3, [r3, #24]
 8105c26:	f003 0320 	and.w	r3, r3, #32
 8105c2a:	2b20      	cmp	r3, #32
 8105c2c:	bf0c      	ite	eq
 8105c2e:	2301      	moveq	r3, #1
 8105c30:	2300      	movne	r3, #0
 8105c32:	b2db      	uxtb	r3, r3
 8105c34:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8105c36:	68fb      	ldr	r3, [r7, #12]
 8105c38:	681b      	ldr	r3, [r3, #0]
 8105c3a:	699b      	ldr	r3, [r3, #24]
 8105c3c:	f003 0310 	and.w	r3, r3, #16
 8105c40:	2b10      	cmp	r3, #16
 8105c42:	bf0c      	ite	eq
 8105c44:	2301      	moveq	r3, #1
 8105c46:	2300      	movne	r3, #0
 8105c48:	b2db      	uxtb	r3, r3
 8105c4a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8105c4c:	e034      	b.n	8105cb8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8105c4e:	683b      	ldr	r3, [r7, #0]
 8105c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105c54:	d01a      	beq.n	8105c8c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8105c56:	f7fc fb79 	bl	810234c <HAL_GetTick>
 8105c5a:	4602      	mov	r2, r0
 8105c5c:	69bb      	ldr	r3, [r7, #24]
 8105c5e:	1ad3      	subs	r3, r2, r3
 8105c60:	683a      	ldr	r2, [r7, #0]
 8105c62:	429a      	cmp	r2, r3
 8105c64:	d302      	bcc.n	8105c6c <HAL_I2C_IsDeviceReady+0xd4>
 8105c66:	683b      	ldr	r3, [r7, #0]
 8105c68:	2b00      	cmp	r3, #0
 8105c6a:	d10f      	bne.n	8105c8c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8105c6c:	68fb      	ldr	r3, [r7, #12]
 8105c6e:	2220      	movs	r2, #32
 8105c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105c74:	68fb      	ldr	r3, [r7, #12]
 8105c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c78:	f043 0220 	orr.w	r2, r3, #32
 8105c7c:	68fb      	ldr	r3, [r7, #12]
 8105c7e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8105c80:	68fb      	ldr	r3, [r7, #12]
 8105c82:	2200      	movs	r2, #0
 8105c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8105c88:	2301      	movs	r3, #1
 8105c8a:	e088      	b.n	8105d9e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8105c8c:	68fb      	ldr	r3, [r7, #12]
 8105c8e:	681b      	ldr	r3, [r3, #0]
 8105c90:	699b      	ldr	r3, [r3, #24]
 8105c92:	f003 0320 	and.w	r3, r3, #32
 8105c96:	2b20      	cmp	r3, #32
 8105c98:	bf0c      	ite	eq
 8105c9a:	2301      	moveq	r3, #1
 8105c9c:	2300      	movne	r3, #0
 8105c9e:	b2db      	uxtb	r3, r3
 8105ca0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8105ca2:	68fb      	ldr	r3, [r7, #12]
 8105ca4:	681b      	ldr	r3, [r3, #0]
 8105ca6:	699b      	ldr	r3, [r3, #24]
 8105ca8:	f003 0310 	and.w	r3, r3, #16
 8105cac:	2b10      	cmp	r3, #16
 8105cae:	bf0c      	ite	eq
 8105cb0:	2301      	moveq	r3, #1
 8105cb2:	2300      	movne	r3, #0
 8105cb4:	b2db      	uxtb	r3, r3
 8105cb6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8105cb8:	7ffb      	ldrb	r3, [r7, #31]
 8105cba:	2b00      	cmp	r3, #0
 8105cbc:	d102      	bne.n	8105cc4 <HAL_I2C_IsDeviceReady+0x12c>
 8105cbe:	7fbb      	ldrb	r3, [r7, #30]
 8105cc0:	2b00      	cmp	r3, #0
 8105cc2:	d0c4      	beq.n	8105c4e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8105cc4:	68fb      	ldr	r3, [r7, #12]
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	699b      	ldr	r3, [r3, #24]
 8105cca:	f003 0310 	and.w	r3, r3, #16
 8105cce:	2b10      	cmp	r3, #16
 8105cd0:	d01a      	beq.n	8105d08 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8105cd2:	69bb      	ldr	r3, [r7, #24]
 8105cd4:	9300      	str	r3, [sp, #0]
 8105cd6:	683b      	ldr	r3, [r7, #0]
 8105cd8:	2200      	movs	r2, #0
 8105cda:	2120      	movs	r1, #32
 8105cdc:	68f8      	ldr	r0, [r7, #12]
 8105cde:	f000 f949 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 8105ce2:	4603      	mov	r3, r0
 8105ce4:	2b00      	cmp	r3, #0
 8105ce6:	d001      	beq.n	8105cec <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8105ce8:	2301      	movs	r3, #1
 8105cea:	e058      	b.n	8105d9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105cec:	68fb      	ldr	r3, [r7, #12]
 8105cee:	681b      	ldr	r3, [r3, #0]
 8105cf0:	2220      	movs	r2, #32
 8105cf2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8105cf4:	68fb      	ldr	r3, [r7, #12]
 8105cf6:	2220      	movs	r2, #32
 8105cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	2200      	movs	r2, #0
 8105d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8105d04:	2300      	movs	r3, #0
 8105d06:	e04a      	b.n	8105d9e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8105d08:	69bb      	ldr	r3, [r7, #24]
 8105d0a:	9300      	str	r3, [sp, #0]
 8105d0c:	683b      	ldr	r3, [r7, #0]
 8105d0e:	2200      	movs	r2, #0
 8105d10:	2120      	movs	r1, #32
 8105d12:	68f8      	ldr	r0, [r7, #12]
 8105d14:	f000 f92e 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 8105d18:	4603      	mov	r3, r0
 8105d1a:	2b00      	cmp	r3, #0
 8105d1c:	d001      	beq.n	8105d22 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8105d1e:	2301      	movs	r3, #1
 8105d20:	e03d      	b.n	8105d9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105d22:	68fb      	ldr	r3, [r7, #12]
 8105d24:	681b      	ldr	r3, [r3, #0]
 8105d26:	2210      	movs	r2, #16
 8105d28:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105d2a:	68fb      	ldr	r3, [r7, #12]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	2220      	movs	r2, #32
 8105d30:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8105d32:	697b      	ldr	r3, [r7, #20]
 8105d34:	687a      	ldr	r2, [r7, #4]
 8105d36:	429a      	cmp	r2, r3
 8105d38:	d118      	bne.n	8105d6c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8105d3a:	68fb      	ldr	r3, [r7, #12]
 8105d3c:	681b      	ldr	r3, [r3, #0]
 8105d3e:	685a      	ldr	r2, [r3, #4]
 8105d40:	68fb      	ldr	r3, [r7, #12]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105d48:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8105d4a:	69bb      	ldr	r3, [r7, #24]
 8105d4c:	9300      	str	r3, [sp, #0]
 8105d4e:	683b      	ldr	r3, [r7, #0]
 8105d50:	2200      	movs	r2, #0
 8105d52:	2120      	movs	r1, #32
 8105d54:	68f8      	ldr	r0, [r7, #12]
 8105d56:	f000 f90d 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 8105d5a:	4603      	mov	r3, r0
 8105d5c:	2b00      	cmp	r3, #0
 8105d5e:	d001      	beq.n	8105d64 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8105d60:	2301      	movs	r3, #1
 8105d62:	e01c      	b.n	8105d9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105d64:	68fb      	ldr	r3, [r7, #12]
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	2220      	movs	r2, #32
 8105d6a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8105d6c:	697b      	ldr	r3, [r7, #20]
 8105d6e:	3301      	adds	r3, #1
 8105d70:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8105d72:	697b      	ldr	r3, [r7, #20]
 8105d74:	687a      	ldr	r2, [r7, #4]
 8105d76:	429a      	cmp	r2, r3
 8105d78:	f63f af3b 	bhi.w	8105bf2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8105d7c:	68fb      	ldr	r3, [r7, #12]
 8105d7e:	2220      	movs	r2, #32
 8105d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105d84:	68fb      	ldr	r3, [r7, #12]
 8105d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105d88:	f043 0220 	orr.w	r2, r3, #32
 8105d8c:	68fb      	ldr	r3, [r7, #12]
 8105d8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105d90:	68fb      	ldr	r3, [r7, #12]
 8105d92:	2200      	movs	r2, #0
 8105d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8105d98:	2301      	movs	r3, #1
 8105d9a:	e000      	b.n	8105d9e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8105d9c:	2302      	movs	r3, #2
  }
}
 8105d9e:	4618      	mov	r0, r3
 8105da0:	3720      	adds	r7, #32
 8105da2:	46bd      	mov	sp, r7
 8105da4:	bd80      	pop	{r7, pc}

08105da6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8105da6:	b480      	push	{r7}
 8105da8:	b083      	sub	sp, #12
 8105daa:	af00      	add	r7, sp, #0
 8105dac:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105db4:	b2db      	uxtb	r3, r3
}
 8105db6:	4618      	mov	r0, r3
 8105db8:	370c      	adds	r7, #12
 8105dba:	46bd      	mov	sp, r7
 8105dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dc0:	4770      	bx	lr

08105dc2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8105dc2:	b480      	push	{r7}
 8105dc4:	b083      	sub	sp, #12
 8105dc6:	af00      	add	r7, sp, #0
 8105dc8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8105dce:	4618      	mov	r0, r3
 8105dd0:	370c      	adds	r7, #12
 8105dd2:	46bd      	mov	sp, r7
 8105dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dd8:	4770      	bx	lr
	...

08105ddc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105ddc:	b580      	push	{r7, lr}
 8105dde:	b086      	sub	sp, #24
 8105de0:	af02      	add	r7, sp, #8
 8105de2:	60f8      	str	r0, [r7, #12]
 8105de4:	4608      	mov	r0, r1
 8105de6:	4611      	mov	r1, r2
 8105de8:	461a      	mov	r2, r3
 8105dea:	4603      	mov	r3, r0
 8105dec:	817b      	strh	r3, [r7, #10]
 8105dee:	460b      	mov	r3, r1
 8105df0:	813b      	strh	r3, [r7, #8]
 8105df2:	4613      	mov	r3, r2
 8105df4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105df6:	88fb      	ldrh	r3, [r7, #6]
 8105df8:	b2da      	uxtb	r2, r3
 8105dfa:	8979      	ldrh	r1, [r7, #10]
 8105dfc:	4b20      	ldr	r3, [pc, #128]	; (8105e80 <I2C_RequestMemoryWrite+0xa4>)
 8105dfe:	9300      	str	r3, [sp, #0]
 8105e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105e04:	68f8      	ldr	r0, [r7, #12]
 8105e06:	f000 fa43 	bl	8106290 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105e0a:	69fa      	ldr	r2, [r7, #28]
 8105e0c:	69b9      	ldr	r1, [r7, #24]
 8105e0e:	68f8      	ldr	r0, [r7, #12]
 8105e10:	f000 f8f0 	bl	8105ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8105e14:	4603      	mov	r3, r0
 8105e16:	2b00      	cmp	r3, #0
 8105e18:	d001      	beq.n	8105e1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8105e1a:	2301      	movs	r3, #1
 8105e1c:	e02c      	b.n	8105e78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105e1e:	88fb      	ldrh	r3, [r7, #6]
 8105e20:	2b01      	cmp	r3, #1
 8105e22:	d105      	bne.n	8105e30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105e24:	893b      	ldrh	r3, [r7, #8]
 8105e26:	b2da      	uxtb	r2, r3
 8105e28:	68fb      	ldr	r3, [r7, #12]
 8105e2a:	681b      	ldr	r3, [r3, #0]
 8105e2c:	629a      	str	r2, [r3, #40]	; 0x28
 8105e2e:	e015      	b.n	8105e5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105e30:	893b      	ldrh	r3, [r7, #8]
 8105e32:	0a1b      	lsrs	r3, r3, #8
 8105e34:	b29b      	uxth	r3, r3
 8105e36:	b2da      	uxtb	r2, r3
 8105e38:	68fb      	ldr	r3, [r7, #12]
 8105e3a:	681b      	ldr	r3, [r3, #0]
 8105e3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105e3e:	69fa      	ldr	r2, [r7, #28]
 8105e40:	69b9      	ldr	r1, [r7, #24]
 8105e42:	68f8      	ldr	r0, [r7, #12]
 8105e44:	f000 f8d6 	bl	8105ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8105e48:	4603      	mov	r3, r0
 8105e4a:	2b00      	cmp	r3, #0
 8105e4c:	d001      	beq.n	8105e52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8105e4e:	2301      	movs	r3, #1
 8105e50:	e012      	b.n	8105e78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105e52:	893b      	ldrh	r3, [r7, #8]
 8105e54:	b2da      	uxtb	r2, r3
 8105e56:	68fb      	ldr	r3, [r7, #12]
 8105e58:	681b      	ldr	r3, [r3, #0]
 8105e5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105e5c:	69fb      	ldr	r3, [r7, #28]
 8105e5e:	9300      	str	r3, [sp, #0]
 8105e60:	69bb      	ldr	r3, [r7, #24]
 8105e62:	2200      	movs	r2, #0
 8105e64:	2180      	movs	r1, #128	; 0x80
 8105e66:	68f8      	ldr	r0, [r7, #12]
 8105e68:	f000 f884 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 8105e6c:	4603      	mov	r3, r0
 8105e6e:	2b00      	cmp	r3, #0
 8105e70:	d001      	beq.n	8105e76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8105e72:	2301      	movs	r3, #1
 8105e74:	e000      	b.n	8105e78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8105e76:	2300      	movs	r3, #0
}
 8105e78:	4618      	mov	r0, r3
 8105e7a:	3710      	adds	r7, #16
 8105e7c:	46bd      	mov	sp, r7
 8105e7e:	bd80      	pop	{r7, pc}
 8105e80:	80002000 	.word	0x80002000

08105e84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105e84:	b580      	push	{r7, lr}
 8105e86:	b086      	sub	sp, #24
 8105e88:	af02      	add	r7, sp, #8
 8105e8a:	60f8      	str	r0, [r7, #12]
 8105e8c:	4608      	mov	r0, r1
 8105e8e:	4611      	mov	r1, r2
 8105e90:	461a      	mov	r2, r3
 8105e92:	4603      	mov	r3, r0
 8105e94:	817b      	strh	r3, [r7, #10]
 8105e96:	460b      	mov	r3, r1
 8105e98:	813b      	strh	r3, [r7, #8]
 8105e9a:	4613      	mov	r3, r2
 8105e9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8105e9e:	88fb      	ldrh	r3, [r7, #6]
 8105ea0:	b2da      	uxtb	r2, r3
 8105ea2:	8979      	ldrh	r1, [r7, #10]
 8105ea4:	4b20      	ldr	r3, [pc, #128]	; (8105f28 <I2C_RequestMemoryRead+0xa4>)
 8105ea6:	9300      	str	r3, [sp, #0]
 8105ea8:	2300      	movs	r3, #0
 8105eaa:	68f8      	ldr	r0, [r7, #12]
 8105eac:	f000 f9f0 	bl	8106290 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105eb0:	69fa      	ldr	r2, [r7, #28]
 8105eb2:	69b9      	ldr	r1, [r7, #24]
 8105eb4:	68f8      	ldr	r0, [r7, #12]
 8105eb6:	f000 f89d 	bl	8105ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8105eba:	4603      	mov	r3, r0
 8105ebc:	2b00      	cmp	r3, #0
 8105ebe:	d001      	beq.n	8105ec4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8105ec0:	2301      	movs	r3, #1
 8105ec2:	e02c      	b.n	8105f1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105ec4:	88fb      	ldrh	r3, [r7, #6]
 8105ec6:	2b01      	cmp	r3, #1
 8105ec8:	d105      	bne.n	8105ed6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105eca:	893b      	ldrh	r3, [r7, #8]
 8105ecc:	b2da      	uxtb	r2, r3
 8105ece:	68fb      	ldr	r3, [r7, #12]
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8105ed4:	e015      	b.n	8105f02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105ed6:	893b      	ldrh	r3, [r7, #8]
 8105ed8:	0a1b      	lsrs	r3, r3, #8
 8105eda:	b29b      	uxth	r3, r3
 8105edc:	b2da      	uxtb	r2, r3
 8105ede:	68fb      	ldr	r3, [r7, #12]
 8105ee0:	681b      	ldr	r3, [r3, #0]
 8105ee2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105ee4:	69fa      	ldr	r2, [r7, #28]
 8105ee6:	69b9      	ldr	r1, [r7, #24]
 8105ee8:	68f8      	ldr	r0, [r7, #12]
 8105eea:	f000 f883 	bl	8105ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8105eee:	4603      	mov	r3, r0
 8105ef0:	2b00      	cmp	r3, #0
 8105ef2:	d001      	beq.n	8105ef8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8105ef4:	2301      	movs	r3, #1
 8105ef6:	e012      	b.n	8105f1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105ef8:	893b      	ldrh	r3, [r7, #8]
 8105efa:	b2da      	uxtb	r2, r3
 8105efc:	68fb      	ldr	r3, [r7, #12]
 8105efe:	681b      	ldr	r3, [r3, #0]
 8105f00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8105f02:	69fb      	ldr	r3, [r7, #28]
 8105f04:	9300      	str	r3, [sp, #0]
 8105f06:	69bb      	ldr	r3, [r7, #24]
 8105f08:	2200      	movs	r2, #0
 8105f0a:	2140      	movs	r1, #64	; 0x40
 8105f0c:	68f8      	ldr	r0, [r7, #12]
 8105f0e:	f000 f831 	bl	8105f74 <I2C_WaitOnFlagUntilTimeout>
 8105f12:	4603      	mov	r3, r0
 8105f14:	2b00      	cmp	r3, #0
 8105f16:	d001      	beq.n	8105f1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8105f18:	2301      	movs	r3, #1
 8105f1a:	e000      	b.n	8105f1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8105f1c:	2300      	movs	r3, #0
}
 8105f1e:	4618      	mov	r0, r3
 8105f20:	3710      	adds	r7, #16
 8105f22:	46bd      	mov	sp, r7
 8105f24:	bd80      	pop	{r7, pc}
 8105f26:	bf00      	nop
 8105f28:	80002000 	.word	0x80002000

08105f2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105f2c:	b480      	push	{r7}
 8105f2e:	b083      	sub	sp, #12
 8105f30:	af00      	add	r7, sp, #0
 8105f32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	699b      	ldr	r3, [r3, #24]
 8105f3a:	f003 0302 	and.w	r3, r3, #2
 8105f3e:	2b02      	cmp	r3, #2
 8105f40:	d103      	bne.n	8105f4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	2200      	movs	r2, #0
 8105f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	681b      	ldr	r3, [r3, #0]
 8105f4e:	699b      	ldr	r3, [r3, #24]
 8105f50:	f003 0301 	and.w	r3, r3, #1
 8105f54:	2b01      	cmp	r3, #1
 8105f56:	d007      	beq.n	8105f68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105f58:	687b      	ldr	r3, [r7, #4]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	699a      	ldr	r2, [r3, #24]
 8105f5e:	687b      	ldr	r3, [r7, #4]
 8105f60:	681b      	ldr	r3, [r3, #0]
 8105f62:	f042 0201 	orr.w	r2, r2, #1
 8105f66:	619a      	str	r2, [r3, #24]
  }
}
 8105f68:	bf00      	nop
 8105f6a:	370c      	adds	r7, #12
 8105f6c:	46bd      	mov	sp, r7
 8105f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f72:	4770      	bx	lr

08105f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8105f74:	b580      	push	{r7, lr}
 8105f76:	b084      	sub	sp, #16
 8105f78:	af00      	add	r7, sp, #0
 8105f7a:	60f8      	str	r0, [r7, #12]
 8105f7c:	60b9      	str	r1, [r7, #8]
 8105f7e:	603b      	str	r3, [r7, #0]
 8105f80:	4613      	mov	r3, r2
 8105f82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105f84:	e022      	b.n	8105fcc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105f86:	683b      	ldr	r3, [r7, #0]
 8105f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105f8c:	d01e      	beq.n	8105fcc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105f8e:	f7fc f9dd 	bl	810234c <HAL_GetTick>
 8105f92:	4602      	mov	r2, r0
 8105f94:	69bb      	ldr	r3, [r7, #24]
 8105f96:	1ad3      	subs	r3, r2, r3
 8105f98:	683a      	ldr	r2, [r7, #0]
 8105f9a:	429a      	cmp	r2, r3
 8105f9c:	d302      	bcc.n	8105fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8105f9e:	683b      	ldr	r3, [r7, #0]
 8105fa0:	2b00      	cmp	r3, #0
 8105fa2:	d113      	bne.n	8105fcc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105fa4:	68fb      	ldr	r3, [r7, #12]
 8105fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105fa8:	f043 0220 	orr.w	r2, r3, #32
 8105fac:	68fb      	ldr	r3, [r7, #12]
 8105fae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105fb0:	68fb      	ldr	r3, [r7, #12]
 8105fb2:	2220      	movs	r2, #32
 8105fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105fb8:	68fb      	ldr	r3, [r7, #12]
 8105fba:	2200      	movs	r2, #0
 8105fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105fc0:	68fb      	ldr	r3, [r7, #12]
 8105fc2:	2200      	movs	r2, #0
 8105fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105fc8:	2301      	movs	r3, #1
 8105fca:	e00f      	b.n	8105fec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105fcc:	68fb      	ldr	r3, [r7, #12]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	699a      	ldr	r2, [r3, #24]
 8105fd2:	68bb      	ldr	r3, [r7, #8]
 8105fd4:	4013      	ands	r3, r2
 8105fd6:	68ba      	ldr	r2, [r7, #8]
 8105fd8:	429a      	cmp	r2, r3
 8105fda:	bf0c      	ite	eq
 8105fdc:	2301      	moveq	r3, #1
 8105fde:	2300      	movne	r3, #0
 8105fe0:	b2db      	uxtb	r3, r3
 8105fe2:	461a      	mov	r2, r3
 8105fe4:	79fb      	ldrb	r3, [r7, #7]
 8105fe6:	429a      	cmp	r2, r3
 8105fe8:	d0cd      	beq.n	8105f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105fea:	2300      	movs	r3, #0
}
 8105fec:	4618      	mov	r0, r3
 8105fee:	3710      	adds	r7, #16
 8105ff0:	46bd      	mov	sp, r7
 8105ff2:	bd80      	pop	{r7, pc}

08105ff4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105ff4:	b580      	push	{r7, lr}
 8105ff6:	b084      	sub	sp, #16
 8105ff8:	af00      	add	r7, sp, #0
 8105ffa:	60f8      	str	r0, [r7, #12]
 8105ffc:	60b9      	str	r1, [r7, #8]
 8105ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8106000:	e02c      	b.n	810605c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8106002:	687a      	ldr	r2, [r7, #4]
 8106004:	68b9      	ldr	r1, [r7, #8]
 8106006:	68f8      	ldr	r0, [r7, #12]
 8106008:	f000 f8dc 	bl	81061c4 <I2C_IsAcknowledgeFailed>
 810600c:	4603      	mov	r3, r0
 810600e:	2b00      	cmp	r3, #0
 8106010:	d001      	beq.n	8106016 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8106012:	2301      	movs	r3, #1
 8106014:	e02a      	b.n	810606c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106016:	68bb      	ldr	r3, [r7, #8]
 8106018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810601c:	d01e      	beq.n	810605c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810601e:	f7fc f995 	bl	810234c <HAL_GetTick>
 8106022:	4602      	mov	r2, r0
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	1ad3      	subs	r3, r2, r3
 8106028:	68ba      	ldr	r2, [r7, #8]
 810602a:	429a      	cmp	r2, r3
 810602c:	d302      	bcc.n	8106034 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810602e:	68bb      	ldr	r3, [r7, #8]
 8106030:	2b00      	cmp	r3, #0
 8106032:	d113      	bne.n	810605c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106034:	68fb      	ldr	r3, [r7, #12]
 8106036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106038:	f043 0220 	orr.w	r2, r3, #32
 810603c:	68fb      	ldr	r3, [r7, #12]
 810603e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8106040:	68fb      	ldr	r3, [r7, #12]
 8106042:	2220      	movs	r2, #32
 8106044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8106048:	68fb      	ldr	r3, [r7, #12]
 810604a:	2200      	movs	r2, #0
 810604c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8106050:	68fb      	ldr	r3, [r7, #12]
 8106052:	2200      	movs	r2, #0
 8106054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8106058:	2301      	movs	r3, #1
 810605a:	e007      	b.n	810606c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810605c:	68fb      	ldr	r3, [r7, #12]
 810605e:	681b      	ldr	r3, [r3, #0]
 8106060:	699b      	ldr	r3, [r3, #24]
 8106062:	f003 0302 	and.w	r3, r3, #2
 8106066:	2b02      	cmp	r3, #2
 8106068:	d1cb      	bne.n	8106002 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810606a:	2300      	movs	r3, #0
}
 810606c:	4618      	mov	r0, r3
 810606e:	3710      	adds	r7, #16
 8106070:	46bd      	mov	sp, r7
 8106072:	bd80      	pop	{r7, pc}

08106074 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8106074:	b580      	push	{r7, lr}
 8106076:	b084      	sub	sp, #16
 8106078:	af00      	add	r7, sp, #0
 810607a:	60f8      	str	r0, [r7, #12]
 810607c:	60b9      	str	r1, [r7, #8]
 810607e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8106080:	e028      	b.n	81060d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8106082:	687a      	ldr	r2, [r7, #4]
 8106084:	68b9      	ldr	r1, [r7, #8]
 8106086:	68f8      	ldr	r0, [r7, #12]
 8106088:	f000 f89c 	bl	81061c4 <I2C_IsAcknowledgeFailed>
 810608c:	4603      	mov	r3, r0
 810608e:	2b00      	cmp	r3, #0
 8106090:	d001      	beq.n	8106096 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8106092:	2301      	movs	r3, #1
 8106094:	e026      	b.n	81060e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106096:	f7fc f959 	bl	810234c <HAL_GetTick>
 810609a:	4602      	mov	r2, r0
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	1ad3      	subs	r3, r2, r3
 81060a0:	68ba      	ldr	r2, [r7, #8]
 81060a2:	429a      	cmp	r2, r3
 81060a4:	d302      	bcc.n	81060ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81060a6:	68bb      	ldr	r3, [r7, #8]
 81060a8:	2b00      	cmp	r3, #0
 81060aa:	d113      	bne.n	81060d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81060ac:	68fb      	ldr	r3, [r7, #12]
 81060ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060b0:	f043 0220 	orr.w	r2, r3, #32
 81060b4:	68fb      	ldr	r3, [r7, #12]
 81060b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81060b8:	68fb      	ldr	r3, [r7, #12]
 81060ba:	2220      	movs	r2, #32
 81060bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81060c0:	68fb      	ldr	r3, [r7, #12]
 81060c2:	2200      	movs	r2, #0
 81060c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81060c8:	68fb      	ldr	r3, [r7, #12]
 81060ca:	2200      	movs	r2, #0
 81060cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81060d0:	2301      	movs	r3, #1
 81060d2:	e007      	b.n	81060e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81060d4:	68fb      	ldr	r3, [r7, #12]
 81060d6:	681b      	ldr	r3, [r3, #0]
 81060d8:	699b      	ldr	r3, [r3, #24]
 81060da:	f003 0320 	and.w	r3, r3, #32
 81060de:	2b20      	cmp	r3, #32
 81060e0:	d1cf      	bne.n	8106082 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81060e2:	2300      	movs	r3, #0
}
 81060e4:	4618      	mov	r0, r3
 81060e6:	3710      	adds	r7, #16
 81060e8:	46bd      	mov	sp, r7
 81060ea:	bd80      	pop	{r7, pc}

081060ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81060ec:	b580      	push	{r7, lr}
 81060ee:	b084      	sub	sp, #16
 81060f0:	af00      	add	r7, sp, #0
 81060f2:	60f8      	str	r0, [r7, #12]
 81060f4:	60b9      	str	r1, [r7, #8]
 81060f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 81060f8:	e055      	b.n	81061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81060fa:	687a      	ldr	r2, [r7, #4]
 81060fc:	68b9      	ldr	r1, [r7, #8]
 81060fe:	68f8      	ldr	r0, [r7, #12]
 8106100:	f000 f860 	bl	81061c4 <I2C_IsAcknowledgeFailed>
 8106104:	4603      	mov	r3, r0
 8106106:	2b00      	cmp	r3, #0
 8106108:	d001      	beq.n	810610e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810610a:	2301      	movs	r3, #1
 810610c:	e053      	b.n	81061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810610e:	68fb      	ldr	r3, [r7, #12]
 8106110:	681b      	ldr	r3, [r3, #0]
 8106112:	699b      	ldr	r3, [r3, #24]
 8106114:	f003 0320 	and.w	r3, r3, #32
 8106118:	2b20      	cmp	r3, #32
 810611a:	d129      	bne.n	8106170 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 810611c:	68fb      	ldr	r3, [r7, #12]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	699b      	ldr	r3, [r3, #24]
 8106122:	f003 0304 	and.w	r3, r3, #4
 8106126:	2b04      	cmp	r3, #4
 8106128:	d105      	bne.n	8106136 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 810612a:	68fb      	ldr	r3, [r7, #12]
 810612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810612e:	2b00      	cmp	r3, #0
 8106130:	d001      	beq.n	8106136 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8106132:	2300      	movs	r3, #0
 8106134:	e03f      	b.n	81061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106136:	68fb      	ldr	r3, [r7, #12]
 8106138:	681b      	ldr	r3, [r3, #0]
 810613a:	2220      	movs	r2, #32
 810613c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 810613e:	68fb      	ldr	r3, [r7, #12]
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	6859      	ldr	r1, [r3, #4]
 8106144:	68fb      	ldr	r3, [r7, #12]
 8106146:	681a      	ldr	r2, [r3, #0]
 8106148:	4b1d      	ldr	r3, [pc, #116]	; (81061c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 810614a:	400b      	ands	r3, r1
 810614c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810614e:	68fb      	ldr	r3, [r7, #12]
 8106150:	2200      	movs	r2, #0
 8106152:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8106154:	68fb      	ldr	r3, [r7, #12]
 8106156:	2220      	movs	r2, #32
 8106158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810615c:	68fb      	ldr	r3, [r7, #12]
 810615e:	2200      	movs	r2, #0
 8106160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8106164:	68fb      	ldr	r3, [r7, #12]
 8106166:	2200      	movs	r2, #0
 8106168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 810616c:	2301      	movs	r3, #1
 810616e:	e022      	b.n	81061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106170:	f7fc f8ec 	bl	810234c <HAL_GetTick>
 8106174:	4602      	mov	r2, r0
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	1ad3      	subs	r3, r2, r3
 810617a:	68ba      	ldr	r2, [r7, #8]
 810617c:	429a      	cmp	r2, r3
 810617e:	d302      	bcc.n	8106186 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8106180:	68bb      	ldr	r3, [r7, #8]
 8106182:	2b00      	cmp	r3, #0
 8106184:	d10f      	bne.n	81061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106186:	68fb      	ldr	r3, [r7, #12]
 8106188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810618a:	f043 0220 	orr.w	r2, r3, #32
 810618e:	68fb      	ldr	r3, [r7, #12]
 8106190:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8106192:	68fb      	ldr	r3, [r7, #12]
 8106194:	2220      	movs	r2, #32
 8106196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810619a:	68fb      	ldr	r3, [r7, #12]
 810619c:	2200      	movs	r2, #0
 810619e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81061a2:	2301      	movs	r3, #1
 81061a4:	e007      	b.n	81061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 81061a6:	68fb      	ldr	r3, [r7, #12]
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	699b      	ldr	r3, [r3, #24]
 81061ac:	f003 0304 	and.w	r3, r3, #4
 81061b0:	2b04      	cmp	r3, #4
 81061b2:	d1a2      	bne.n	81060fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81061b4:	2300      	movs	r3, #0
}
 81061b6:	4618      	mov	r0, r3
 81061b8:	3710      	adds	r7, #16
 81061ba:	46bd      	mov	sp, r7
 81061bc:	bd80      	pop	{r7, pc}
 81061be:	bf00      	nop
 81061c0:	fe00e800 	.word	0xfe00e800

081061c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81061c4:	b580      	push	{r7, lr}
 81061c6:	b084      	sub	sp, #16
 81061c8:	af00      	add	r7, sp, #0
 81061ca:	60f8      	str	r0, [r7, #12]
 81061cc:	60b9      	str	r1, [r7, #8]
 81061ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81061d0:	68fb      	ldr	r3, [r7, #12]
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	699b      	ldr	r3, [r3, #24]
 81061d6:	f003 0310 	and.w	r3, r3, #16
 81061da:	2b10      	cmp	r3, #16
 81061dc:	d151      	bne.n	8106282 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81061de:	e022      	b.n	8106226 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81061e0:	68bb      	ldr	r3, [r7, #8]
 81061e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81061e6:	d01e      	beq.n	8106226 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81061e8:	f7fc f8b0 	bl	810234c <HAL_GetTick>
 81061ec:	4602      	mov	r2, r0
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	1ad3      	subs	r3, r2, r3
 81061f2:	68ba      	ldr	r2, [r7, #8]
 81061f4:	429a      	cmp	r2, r3
 81061f6:	d302      	bcc.n	81061fe <I2C_IsAcknowledgeFailed+0x3a>
 81061f8:	68bb      	ldr	r3, [r7, #8]
 81061fa:	2b00      	cmp	r3, #0
 81061fc:	d113      	bne.n	8106226 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81061fe:	68fb      	ldr	r3, [r7, #12]
 8106200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106202:	f043 0220 	orr.w	r2, r3, #32
 8106206:	68fb      	ldr	r3, [r7, #12]
 8106208:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810620a:	68fb      	ldr	r3, [r7, #12]
 810620c:	2220      	movs	r2, #32
 810620e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8106212:	68fb      	ldr	r3, [r7, #12]
 8106214:	2200      	movs	r2, #0
 8106216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810621a:	68fb      	ldr	r3, [r7, #12]
 810621c:	2200      	movs	r2, #0
 810621e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8106222:	2301      	movs	r3, #1
 8106224:	e02e      	b.n	8106284 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8106226:	68fb      	ldr	r3, [r7, #12]
 8106228:	681b      	ldr	r3, [r3, #0]
 810622a:	699b      	ldr	r3, [r3, #24]
 810622c:	f003 0320 	and.w	r3, r3, #32
 8106230:	2b20      	cmp	r3, #32
 8106232:	d1d5      	bne.n	81061e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106234:	68fb      	ldr	r3, [r7, #12]
 8106236:	681b      	ldr	r3, [r3, #0]
 8106238:	2210      	movs	r2, #16
 810623a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810623c:	68fb      	ldr	r3, [r7, #12]
 810623e:	681b      	ldr	r3, [r3, #0]
 8106240:	2220      	movs	r2, #32
 8106242:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8106244:	68f8      	ldr	r0, [r7, #12]
 8106246:	f7ff fe71 	bl	8105f2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810624a:	68fb      	ldr	r3, [r7, #12]
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	6859      	ldr	r1, [r3, #4]
 8106250:	68fb      	ldr	r3, [r7, #12]
 8106252:	681a      	ldr	r2, [r3, #0]
 8106254:	4b0d      	ldr	r3, [pc, #52]	; (810628c <I2C_IsAcknowledgeFailed+0xc8>)
 8106256:	400b      	ands	r3, r1
 8106258:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810625a:	68fb      	ldr	r3, [r7, #12]
 810625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810625e:	f043 0204 	orr.w	r2, r3, #4
 8106262:	68fb      	ldr	r3, [r7, #12]
 8106264:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8106266:	68fb      	ldr	r3, [r7, #12]
 8106268:	2220      	movs	r2, #32
 810626a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810626e:	68fb      	ldr	r3, [r7, #12]
 8106270:	2200      	movs	r2, #0
 8106272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106276:	68fb      	ldr	r3, [r7, #12]
 8106278:	2200      	movs	r2, #0
 810627a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 810627e:	2301      	movs	r3, #1
 8106280:	e000      	b.n	8106284 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8106282:	2300      	movs	r3, #0
}
 8106284:	4618      	mov	r0, r3
 8106286:	3710      	adds	r7, #16
 8106288:	46bd      	mov	sp, r7
 810628a:	bd80      	pop	{r7, pc}
 810628c:	fe00e800 	.word	0xfe00e800

08106290 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8106290:	b480      	push	{r7}
 8106292:	b085      	sub	sp, #20
 8106294:	af00      	add	r7, sp, #0
 8106296:	60f8      	str	r0, [r7, #12]
 8106298:	607b      	str	r3, [r7, #4]
 810629a:	460b      	mov	r3, r1
 810629c:	817b      	strh	r3, [r7, #10]
 810629e:	4613      	mov	r3, r2
 81062a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 81062a2:	68fb      	ldr	r3, [r7, #12]
 81062a4:	681b      	ldr	r3, [r3, #0]
 81062a6:	685a      	ldr	r2, [r3, #4]
 81062a8:	69bb      	ldr	r3, [r7, #24]
 81062aa:	0d5b      	lsrs	r3, r3, #21
 81062ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81062b0:	4b0d      	ldr	r3, [pc, #52]	; (81062e8 <I2C_TransferConfig+0x58>)
 81062b2:	430b      	orrs	r3, r1
 81062b4:	43db      	mvns	r3, r3
 81062b6:	ea02 0103 	and.w	r1, r2, r3
 81062ba:	897b      	ldrh	r3, [r7, #10]
 81062bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81062c0:	7a7b      	ldrb	r3, [r7, #9]
 81062c2:	041b      	lsls	r3, r3, #16
 81062c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81062c8:	431a      	orrs	r2, r3
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	431a      	orrs	r2, r3
 81062ce:	69bb      	ldr	r3, [r7, #24]
 81062d0:	431a      	orrs	r2, r3
 81062d2:	68fb      	ldr	r3, [r7, #12]
 81062d4:	681b      	ldr	r3, [r3, #0]
 81062d6:	430a      	orrs	r2, r1
 81062d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 81062da:	bf00      	nop
 81062dc:	3714      	adds	r7, #20
 81062de:	46bd      	mov	sp, r7
 81062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062e4:	4770      	bx	lr
 81062e6:	bf00      	nop
 81062e8:	03ff63ff 	.word	0x03ff63ff

081062ec <HAL_I2CEx_ConfigAnalogFilter>:
=======
08104fc6 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< HEAD
 81062ec:	b480      	push	{r7}
 81062ee:	b083      	sub	sp, #12
 81062f0:	af00      	add	r7, sp, #0
 81062f2:	6078      	str	r0, [r7, #4]
 81062f4:	6039      	str	r1, [r7, #0]
=======
 8104fc6:	b480      	push	{r7}
 8104fc8:	b083      	sub	sp, #12
 8104fca:	af00      	add	r7, sp, #0
 8104fcc:	6078      	str	r0, [r7, #4]
 8104fce:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81062fc:	b2db      	uxtb	r3, r3
 81062fe:	2b20      	cmp	r3, #32
 8106300:	d138      	bne.n	8106374 <HAL_I2CEx_ConfigAnalogFilter+0x88>
=======
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104fd6:	b2db      	uxtb	r3, r3
 8104fd8:	2b20      	cmp	r3, #32
 8104fda:	d138      	bne.n	810504e <HAL_I2CEx_ConfigAnalogFilter+0x88>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106308:	2b01      	cmp	r3, #1
 810630a:	d101      	bne.n	8106310 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810630c:	2302      	movs	r3, #2
 810630e:	e032      	b.n	8106376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8106310:	687b      	ldr	r3, [r7, #4]
 8106312:	2201      	movs	r2, #1
 8106314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104fe2:	2b01      	cmp	r3, #1
 8104fe4:	d101      	bne.n	8104fea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104fe6:	2302      	movs	r3, #2
 8104fe8:	e032      	b.n	8105050 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	2201      	movs	r2, #1
 8104fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	2224      	movs	r2, #36	; 0x24
 810631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	2224      	movs	r2, #36	; 0x24
 8104ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 8106320:	687b      	ldr	r3, [r7, #4]
 8106322:	681b      	ldr	r3, [r3, #0]
 8106324:	681a      	ldr	r2, [r3, #0]
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	f022 0201 	bic.w	r2, r2, #1
 810632e:	601a      	str	r2, [r3, #0]
=======
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	681a      	ldr	r2, [r3, #0]
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	681b      	ldr	r3, [r3, #0]
 8105004:	f022 0201 	bic.w	r2, r2, #1
 8105008:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
<<<<<<< HEAD
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	681a      	ldr	r2, [r3, #0]
 8106336:	687b      	ldr	r3, [r7, #4]
 8106338:	681b      	ldr	r3, [r3, #0]
 810633a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810633e:	601a      	str	r2, [r3, #0]
=======
 810500a:	687b      	ldr	r3, [r7, #4]
 810500c:	681b      	ldr	r3, [r3, #0]
 810500e:	681a      	ldr	r2, [r3, #0]
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8105018:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
<<<<<<< HEAD
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	681b      	ldr	r3, [r3, #0]
 8106344:	6819      	ldr	r1, [r3, #0]
 8106346:	687b      	ldr	r3, [r7, #4]
 8106348:	681b      	ldr	r3, [r3, #0]
 810634a:	683a      	ldr	r2, [r7, #0]
 810634c:	430a      	orrs	r2, r1
 810634e:	601a      	str	r2, [r3, #0]
=======
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	6819      	ldr	r1, [r3, #0]
 8105020:	687b      	ldr	r3, [r7, #4]
 8105022:	681b      	ldr	r3, [r3, #0]
 8105024:	683a      	ldr	r2, [r7, #0]
 8105026:	430a      	orrs	r2, r1
 8105028:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    __HAL_I2C_ENABLE(hi2c);
<<<<<<< HEAD
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	681b      	ldr	r3, [r3, #0]
 8106354:	681a      	ldr	r2, [r3, #0]
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	f042 0201 	orr.w	r2, r2, #1
 810635e:	601a      	str	r2, [r3, #0]
=======
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	681a      	ldr	r2, [r3, #0]
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	681b      	ldr	r3, [r3, #0]
 8105034:	f042 0201 	orr.w	r2, r2, #1
 8105038:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	2220      	movs	r2, #32
 8106364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	2220      	movs	r2, #32
 810503e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	2200      	movs	r2, #0
 810636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	2200      	movs	r2, #0
 8105046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    return HAL_OK;
<<<<<<< HEAD
 8106370:	2300      	movs	r3, #0
 8106372:	e000      	b.n	8106376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 810504a:	2300      	movs	r3, #0
 810504c:	e000      	b.n	8105050 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8106374:	2302      	movs	r3, #2
=======
 810504e:	2302      	movs	r3, #2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 8106376:	4618      	mov	r0, r3
 8106378:	370c      	adds	r7, #12
 810637a:	46bd      	mov	sp, r7
 810637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106380:	4770      	bx	lr
=======
 8105050:	4618      	mov	r0, r3
 8105052:	370c      	adds	r7, #12
 8105054:	46bd      	mov	sp, r7
 8105056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810505a:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106382 <HAL_I2CEx_ConfigDigitalFilter>:
=======
0810505c <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< HEAD
 8106382:	b480      	push	{r7}
 8106384:	b085      	sub	sp, #20
 8106386:	af00      	add	r7, sp, #0
 8106388:	6078      	str	r0, [r7, #4]
 810638a:	6039      	str	r1, [r7, #0]
=======
 810505c:	b480      	push	{r7}
 810505e:	b085      	sub	sp, #20
 8105060:	af00      	add	r7, sp, #0
 8105062:	6078      	str	r0, [r7, #4]
 8105064:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106392:	b2db      	uxtb	r3, r3
 8106394:	2b20      	cmp	r3, #32
 8106396:	d139      	bne.n	810640c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
=======
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810506c:	b2db      	uxtb	r3, r3
 810506e:	2b20      	cmp	r3, #32
 8105070:	d139      	bne.n	81050e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810639e:	2b01      	cmp	r3, #1
 81063a0:	d101      	bne.n	81063a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81063a2:	2302      	movs	r3, #2
 81063a4:	e033      	b.n	810640e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	2201      	movs	r2, #1
 81063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105078:	2b01      	cmp	r3, #1
 810507a:	d101      	bne.n	8105080 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810507c:	2302      	movs	r3, #2
 810507e:	e033      	b.n	81050e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	2201      	movs	r2, #1
 8105084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	2224      	movs	r2, #36	; 0x24
 81063b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	2224      	movs	r2, #36	; 0x24
 810508c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	681b      	ldr	r3, [r3, #0]
 81063ba:	681a      	ldr	r2, [r3, #0]
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	681b      	ldr	r3, [r3, #0]
 81063c0:	f022 0201 	bic.w	r2, r2, #1
 81063c4:	601a      	str	r2, [r3, #0]
=======
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	681a      	ldr	r2, [r3, #0]
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	f022 0201 	bic.w	r2, r2, #1
 810509e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
<<<<<<< HEAD
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	681b      	ldr	r3, [r3, #0]
 81063ca:	681b      	ldr	r3, [r3, #0]
 81063cc:	60fb      	str	r3, [r7, #12]
=======
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	681b      	ldr	r3, [r3, #0]
 81050a6:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
<<<<<<< HEAD
 81063ce:	68fb      	ldr	r3, [r7, #12]
 81063d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81063d4:	60fb      	str	r3, [r7, #12]
=======
 81050a8:	68fb      	ldr	r3, [r7, #12]
 81050aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81050ae:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
<<<<<<< HEAD
 81063d6:	683b      	ldr	r3, [r7, #0]
 81063d8:	021b      	lsls	r3, r3, #8
 81063da:	68fa      	ldr	r2, [r7, #12]
 81063dc:	4313      	orrs	r3, r2
 81063de:	60fb      	str	r3, [r7, #12]
=======
 81050b0:	683b      	ldr	r3, [r7, #0]
 81050b2:	021b      	lsls	r3, r3, #8
 81050b4:	68fa      	ldr	r2, [r7, #12]
 81050b6:	4313      	orrs	r3, r2
 81050b8:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
<<<<<<< HEAD
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	681b      	ldr	r3, [r3, #0]
 81063e4:	68fa      	ldr	r2, [r7, #12]
 81063e6:	601a      	str	r2, [r3, #0]
=======
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	681b      	ldr	r3, [r3, #0]
 81050be:	68fa      	ldr	r2, [r7, #12]
 81050c0:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    __HAL_I2C_ENABLE(hi2c);
<<<<<<< HEAD
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	681b      	ldr	r3, [r3, #0]
 81063ec:	681a      	ldr	r2, [r3, #0]
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	f042 0201 	orr.w	r2, r2, #1
 81063f6:	601a      	str	r2, [r3, #0]
=======
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	681b      	ldr	r3, [r3, #0]
 81050c6:	681a      	ldr	r2, [r3, #0]
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	681b      	ldr	r3, [r3, #0]
 81050cc:	f042 0201 	orr.w	r2, r2, #1
 81050d0:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	2220      	movs	r2, #32
 81063fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 81050d2:	687b      	ldr	r3, [r7, #4]
 81050d4:	2220      	movs	r2, #32
 81050d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	2200      	movs	r2, #0
 8106404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	2200      	movs	r2, #0
 81050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    return HAL_OK;
<<<<<<< HEAD
 8106408:	2300      	movs	r3, #0
 810640a:	e000      	b.n	810640e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 81050e2:	2300      	movs	r3, #0
 81050e4:	e000      	b.n	81050e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 810640c:	2302      	movs	r3, #2
=======
 81050e6:	2302      	movs	r3, #2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 810640e:	4618      	mov	r0, r3
 8106410:	3714      	adds	r7, #20
 8106412:	46bd      	mov	sp, r7
 8106414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106418:	4770      	bx	lr
	...
=======
 81050e8:	4618      	mov	r0, r3
 81050ea:	3714      	adds	r7, #20
 81050ec:	46bd      	mov	sp, r7
 81050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050f2:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810641c <HAL_I2CEx_EnableFastModePlus>:
=======
081050f4 <HAL_I2CEx_EnableFastModePlus>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
<<<<<<< HEAD
 810641c:	b480      	push	{r7}
 810641e:	b085      	sub	sp, #20
 8106420:	af00      	add	r7, sp, #0
 8106422:	6078      	str	r0, [r7, #4]
=======
 81050f4:	b480      	push	{r7}
 81050f6:	b085      	sub	sp, #20
 81050f8:	af00      	add	r7, sp, #0
 81050fa:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8106424:	4b0d      	ldr	r3, [pc, #52]	; (810645c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8106426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810642a:	4a0c      	ldr	r2, [pc, #48]	; (810645c <HAL_I2CEx_EnableFastModePlus+0x40>)
 810642c:	f043 0302 	orr.w	r3, r3, #2
 8106430:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8106434:	4b09      	ldr	r3, [pc, #36]	; (810645c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8106436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810643a:	f003 0302 	and.w	r3, r3, #2
 810643e:	60fb      	str	r3, [r7, #12]
 8106440:	68fb      	ldr	r3, [r7, #12]
=======
 81050fc:	4b0d      	ldr	r3, [pc, #52]	; (8105134 <HAL_I2CEx_EnableFastModePlus+0x40>)
 81050fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105102:	4a0c      	ldr	r2, [pc, #48]	; (8105134 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105104:	f043 0302 	orr.w	r3, r3, #2
 8105108:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810510c:	4b09      	ldr	r3, [pc, #36]	; (8105134 <HAL_I2CEx_EnableFastModePlus+0x40>)
 810510e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105112:	f003 0302 	and.w	r3, r3, #2
 8105116:	60fb      	str	r3, [r7, #12]
 8105118:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
<<<<<<< HEAD
 8106442:	4b07      	ldr	r3, [pc, #28]	; (8106460 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8106444:	685a      	ldr	r2, [r3, #4]
 8106446:	4906      	ldr	r1, [pc, #24]	; (8106460 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	4313      	orrs	r3, r2
 810644c:	604b      	str	r3, [r1, #4]
=======
 810511a:	4b07      	ldr	r3, [pc, #28]	; (8105138 <HAL_I2CEx_EnableFastModePlus+0x44>)
 810511c:	685a      	ldr	r2, [r3, #4]
 810511e:	4906      	ldr	r1, [pc, #24]	; (8105138 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	4313      	orrs	r3, r2
 8105124:	604b      	str	r3, [r1, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810644e:	bf00      	nop
 8106450:	3714      	adds	r7, #20
 8106452:	46bd      	mov	sp, r7
 8106454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106458:	4770      	bx	lr
 810645a:	bf00      	nop
 810645c:	58024400 	.word	0x58024400
 8106460:	58000400 	.word	0x58000400
=======
 8105126:	bf00      	nop
 8105128:	3714      	adds	r7, #20
 810512a:	46bd      	mov	sp, r7
 810512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105130:	4770      	bx	lr
 8105132:	bf00      	nop
 8105134:	58024400 	.word	0x58024400
 8105138:	58000400 	.word	0x58000400
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106464 <HAL_IWDG_Init>:
=======
0810513c <HAL_IWDG_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
<<<<<<< HEAD
 8106464:	b580      	push	{r7, lr}
 8106466:	b084      	sub	sp, #16
 8106468:	af00      	add	r7, sp, #0
 810646a:	6078      	str	r0, [r7, #4]
=======
 810513c:	b580      	push	{r7, lr}
 810513e:	b084      	sub	sp, #16
 8105140:	af00      	add	r7, sp, #0
 8105142:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
<<<<<<< HEAD
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	2b00      	cmp	r3, #0
 8106470:	d101      	bne.n	8106476 <HAL_IWDG_Init+0x12>
=======
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	2b00      	cmp	r3, #0
 8105148:	d101      	bne.n	810514e <HAL_IWDG_Init+0x12>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8106472:	2301      	movs	r3, #1
 8106474:	e038      	b.n	81064e8 <HAL_IWDG_Init+0x84>
=======
 810514a:	2301      	movs	r3, #1
 810514c:	e038      	b.n	81051c0 <HAL_IWDG_Init+0x84>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
<<<<<<< HEAD
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 810647e:	601a      	str	r2, [r3, #0]
=======
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	681b      	ldr	r3, [r3, #0]
 8105152:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8105156:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
<<<<<<< HEAD
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	681b      	ldr	r3, [r3, #0]
 8106484:	f245 5255 	movw	r2, #21845	; 0x5555
 8106488:	601a      	str	r2, [r3, #0]
=======
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	f245 5255 	movw	r2, #21845	; 0x5555
 8105160:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
<<<<<<< HEAD
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	681b      	ldr	r3, [r3, #0]
 810648e:	687a      	ldr	r2, [r7, #4]
 8106490:	6852      	ldr	r2, [r2, #4]
 8106492:	605a      	str	r2, [r3, #4]
=======
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	681b      	ldr	r3, [r3, #0]
 8105166:	687a      	ldr	r2, [r7, #4]
 8105168:	6852      	ldr	r2, [r2, #4]
 810516a:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
<<<<<<< HEAD
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	681b      	ldr	r3, [r3, #0]
 8106498:	687a      	ldr	r2, [r7, #4]
 810649a:	6892      	ldr	r2, [r2, #8]
 810649c:	609a      	str	r2, [r3, #8]
=======
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	681b      	ldr	r3, [r3, #0]
 8105170:	687a      	ldr	r2, [r7, #4]
 8105172:	6892      	ldr	r2, [r2, #8]
 8105174:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 810649e:	f7fb ff55 	bl	810234c <HAL_GetTick>
 81064a2:	60f8      	str	r0, [r7, #12]
=======
 8105176:	f7fd f821 	bl	81021bc <HAL_GetTick>
 810517a:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
<<<<<<< HEAD
 81064a4:	e008      	b.n	81064b8 <HAL_IWDG_Init+0x54>
=======
 810517c:	e008      	b.n	8105190 <HAL_IWDG_Init+0x54>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
<<<<<<< HEAD
 81064a6:	f7fb ff51 	bl	810234c <HAL_GetTick>
 81064aa:	4602      	mov	r2, r0
 81064ac:	68fb      	ldr	r3, [r7, #12]
 81064ae:	1ad3      	subs	r3, r2, r3
 81064b0:	2b30      	cmp	r3, #48	; 0x30
 81064b2:	d901      	bls.n	81064b8 <HAL_IWDG_Init+0x54>
=======
 810517e:	f7fd f81d 	bl	81021bc <HAL_GetTick>
 8105182:	4602      	mov	r2, r0
 8105184:	68fb      	ldr	r3, [r7, #12]
 8105186:	1ad3      	subs	r3, r2, r3
 8105188:	2b30      	cmp	r3, #48	; 0x30
 810518a:	d901      	bls.n	8105190 <HAL_IWDG_Init+0x54>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      return HAL_TIMEOUT;
<<<<<<< HEAD
 81064b4:	2303      	movs	r3, #3
 81064b6:	e017      	b.n	81064e8 <HAL_IWDG_Init+0x84>
=======
 810518c:	2303      	movs	r3, #3
 810518e:	e017      	b.n	81051c0 <HAL_IWDG_Init+0x84>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  while (hiwdg->Instance->SR != 0x00u)
<<<<<<< HEAD
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	681b      	ldr	r3, [r3, #0]
 81064bc:	68db      	ldr	r3, [r3, #12]
 81064be:	2b00      	cmp	r3, #0
 81064c0:	d1f1      	bne.n	81064a6 <HAL_IWDG_Init+0x42>
=======
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	68db      	ldr	r3, [r3, #12]
 8105196:	2b00      	cmp	r3, #0
 8105198:	d1f1      	bne.n	810517e <HAL_IWDG_Init+0x42>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
<<<<<<< HEAD
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	681b      	ldr	r3, [r3, #0]
 81064c6:	691a      	ldr	r2, [r3, #16]
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	68db      	ldr	r3, [r3, #12]
 81064cc:	429a      	cmp	r2, r3
 81064ce:	d005      	beq.n	81064dc <HAL_IWDG_Init+0x78>
=======
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	691a      	ldr	r2, [r3, #16]
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	68db      	ldr	r3, [r3, #12]
 81051a4:	429a      	cmp	r2, r3
 81051a6:	d005      	beq.n	81051b4 <HAL_IWDG_Init+0x78>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
<<<<<<< HEAD
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	681b      	ldr	r3, [r3, #0]
 81064d4:	687a      	ldr	r2, [r7, #4]
 81064d6:	68d2      	ldr	r2, [r2, #12]
 81064d8:	611a      	str	r2, [r3, #16]
 81064da:	e004      	b.n	81064e6 <HAL_IWDG_Init+0x82>
=======
 81051a8:	687b      	ldr	r3, [r7, #4]
 81051aa:	681b      	ldr	r3, [r3, #0]
 81051ac:	687a      	ldr	r2, [r7, #4]
 81051ae:	68d2      	ldr	r2, [r2, #12]
 81051b0:	611a      	str	r2, [r3, #16]
 81051b2:	e004      	b.n	81051be <HAL_IWDG_Init+0x82>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
<<<<<<< HEAD
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 81064e4:	601a      	str	r2, [r3, #0]
=======
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 81051bc:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 81064e6:	2300      	movs	r3, #0
=======
 81051be:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81064e8:	4618      	mov	r0, r3
 81064ea:	3710      	adds	r7, #16
 81064ec:	46bd      	mov	sp, r7
 81064ee:	bd80      	pop	{r7, pc}
=======
 81051c0:	4618      	mov	r0, r3
 81051c2:	3710      	adds	r7, #16
 81051c4:	46bd      	mov	sp, r7
 81051c6:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081064f0 <HAL_IWDG_Refresh>:
=======
081051c8 <HAL_IWDG_Refresh>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
<<<<<<< HEAD
 81064f0:	b480      	push	{r7}
 81064f2:	b083      	sub	sp, #12
 81064f4:	af00      	add	r7, sp, #0
 81064f6:	6078      	str	r0, [r7, #4]
=======
 81051c8:	b480      	push	{r7}
 81051ca:	b083      	sub	sp, #12
 81051cc:	af00      	add	r7, sp, #0
 81051ce:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
<<<<<<< HEAD
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	681b      	ldr	r3, [r3, #0]
 81064fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8106500:	601a      	str	r2, [r3, #0]
=======
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 81051d8:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8106502:	2300      	movs	r3, #0
=======
 81051da:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8106504:	4618      	mov	r0, r3
 8106506:	370c      	adds	r7, #12
 8106508:	46bd      	mov	sp, r7
 810650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810650e:	4770      	bx	lr
=======
 81051dc:	4618      	mov	r0, r3
 81051de:	370c      	adds	r7, #12
 81051e0:	46bd      	mov	sp, r7
 81051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e6:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106510 <HAL_PWREx_EnterSTOPMode>:
=======
081051e8 <HAL_PWREx_EnterSTOPMode>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
<<<<<<< HEAD
 8106510:	b580      	push	{r7, lr}
 8106512:	b084      	sub	sp, #16
 8106514:	af00      	add	r7, sp, #0
 8106516:	60f8      	str	r0, [r7, #12]
 8106518:	460b      	mov	r3, r1
 810651a:	607a      	str	r2, [r7, #4]
 810651c:	72fb      	strb	r3, [r7, #11]
=======
 81051e8:	b580      	push	{r7, lr}
 81051ea:	b084      	sub	sp, #16
 81051ec:	af00      	add	r7, sp, #0
 81051ee:	60f8      	str	r0, [r7, #12]
 81051f0:	460b      	mov	r3, r1
 81051f2:	607a      	str	r2, [r7, #4]
 81051f4:	72fb      	strb	r3, [r7, #11]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
<<<<<<< HEAD
 810651e:	4b37      	ldr	r3, [pc, #220]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106520:	681b      	ldr	r3, [r3, #0]
 8106522:	f023 0201 	bic.w	r2, r3, #1
 8106526:	4935      	ldr	r1, [pc, #212]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106528:	68fb      	ldr	r3, [r7, #12]
 810652a:	4313      	orrs	r3, r2
 810652c:	600b      	str	r3, [r1, #0]
=======
 81051f6:	4b35      	ldr	r3, [pc, #212]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81051f8:	681b      	ldr	r3, [r3, #0]
 81051fa:	f023 0201 	bic.w	r2, r3, #1
 81051fe:	4933      	ldr	r1, [pc, #204]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105200:	68fb      	ldr	r3, [r7, #12]
 8105202:	4313      	orrs	r3, r2
 8105204:	600b      	str	r3, [r1, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
<<<<<<< HEAD
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	2b00      	cmp	r3, #0
 8106532:	d123      	bne.n	810657c <HAL_PWREx_EnterSTOPMode+0x6c>
=======
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	2b00      	cmp	r3, #0
 810520a:	d121      	bne.n	8105250 <HAL_PWREx_EnterSTOPMode+0x68>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
<<<<<<< HEAD
 8106534:	f7fc f812 	bl	810255c <HAL_GetCurrentCPUID>
 8106538:	4603      	mov	r3, r0
 810653a:	2b03      	cmp	r3, #3
 810653c:	d158      	bne.n	81065f0 <HAL_PWREx_EnterSTOPMode+0xe0>
=======
 810520c:	f7fd f8dc 	bl	81023c8 <HAL_GetCurrentCPUID>
 8105210:	4603      	mov	r3, r0
 8105212:	2b03      	cmp	r3, #3
 8105214:	d154      	bne.n	81052c0 <HAL_PWREx_EnterSTOPMode+0xd8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
<<<<<<< HEAD
 810653e:	4b2f      	ldr	r3, [pc, #188]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106540:	691b      	ldr	r3, [r3, #16]
 8106542:	4a2e      	ldr	r2, [pc, #184]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106544:	f023 0301 	bic.w	r3, r3, #1
 8106548:	6113      	str	r3, [r2, #16]
=======
 8105216:	4b2d      	ldr	r3, [pc, #180]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105218:	691b      	ldr	r3, [r3, #16]
 810521a:	4a2c      	ldr	r2, [pc, #176]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 810521c:	f023 0301 	bic.w	r3, r3, #1
 8105220:	6113      	str	r3, [r2, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
<<<<<<< HEAD
 810654a:	4b2d      	ldr	r3, [pc, #180]	; (8106600 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810654c:	691b      	ldr	r3, [r3, #16]
 810654e:	4a2c      	ldr	r2, [pc, #176]	; (8106600 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106550:	f043 0304 	orr.w	r3, r3, #4
 8106554:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106556:	f3bf 8f4f 	dsb	sy
}
 810655a:	bf00      	nop
=======
 8105222:	4b2b      	ldr	r3, [pc, #172]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105224:	691b      	ldr	r3, [r3, #16]
 8105226:	4a2a      	ldr	r2, [pc, #168]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105228:	f043 0304 	orr.w	r3, r3, #4
 810522c:	6113      	str	r3, [r2, #16]
 810522e:	f3bf 8f4f 	dsb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  __ASM volatile ("isb 0xF":::"memory");
<<<<<<< HEAD
 810655c:	f3bf 8f6f 	isb	sy
}
 8106560:	bf00      	nop
=======
 8105232:	f3bf 8f6f 	isb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
<<<<<<< HEAD
 8106562:	7afb      	ldrb	r3, [r7, #11]
 8106564:	2b01      	cmp	r3, #1
 8106566:	d101      	bne.n	810656c <HAL_PWREx_EnterSTOPMode+0x5c>
=======
 8105236:	7afb      	ldrb	r3, [r7, #11]
 8105238:	2b01      	cmp	r3, #1
 810523a:	d101      	bne.n	8105240 <HAL_PWREx_EnterSTOPMode+0x58>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Request Wait For Interrupt */
      __WFI ();
<<<<<<< HEAD
 8106568:	bf30      	wfi
 810656a:	e000      	b.n	810656e <HAL_PWREx_EnterSTOPMode+0x5e>
=======
 810523c:	bf30      	wfi
 810523e:	e000      	b.n	8105242 <HAL_PWREx_EnterSTOPMode+0x5a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
<<<<<<< HEAD
 810656c:	bf20      	wfe
=======
 8105240:	bf20      	wfe
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
<<<<<<< HEAD
 810656e:	4b24      	ldr	r3, [pc, #144]	; (8106600 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106570:	691b      	ldr	r3, [r3, #16]
 8106572:	4a23      	ldr	r2, [pc, #140]	; (8106600 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106574:	f023 0304 	bic.w	r3, r3, #4
 8106578:	6113      	str	r3, [r2, #16]
 810657a:	e03c      	b.n	81065f6 <HAL_PWREx_EnterSTOPMode+0xe6>
=======
 8105242:	4b23      	ldr	r3, [pc, #140]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105244:	691b      	ldr	r3, [r3, #16]
 8105246:	4a22      	ldr	r2, [pc, #136]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105248:	f023 0304 	bic.w	r3, r3, #4
 810524c:	6113      	str	r3, [r2, #16]
 810524e:	e03a      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
<<<<<<< HEAD
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	2b01      	cmp	r3, #1
 8106580:	d123      	bne.n	81065ca <HAL_PWREx_EnterSTOPMode+0xba>
=======
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	2b01      	cmp	r3, #1
 8105254:	d121      	bne.n	810529a <HAL_PWREx_EnterSTOPMode+0xb2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
<<<<<<< HEAD
 8106582:	f7fb ffeb 	bl	810255c <HAL_GetCurrentCPUID>
 8106586:	4603      	mov	r3, r0
 8106588:	2b01      	cmp	r3, #1
 810658a:	d133      	bne.n	81065f4 <HAL_PWREx_EnterSTOPMode+0xe4>
=======
 8105256:	f7fd f8b7 	bl	81023c8 <HAL_GetCurrentCPUID>
 810525a:	4603      	mov	r3, r0
 810525c:	2b01      	cmp	r3, #1
 810525e:	d131      	bne.n	81052c4 <HAL_PWREx_EnterSTOPMode+0xdc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
<<<<<<< HEAD
 810658c:	4b1b      	ldr	r3, [pc, #108]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 810658e:	695b      	ldr	r3, [r3, #20]
 8106590:	4a1a      	ldr	r2, [pc, #104]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106592:	f023 0302 	bic.w	r3, r3, #2
 8106596:	6153      	str	r3, [r2, #20]
=======
 8105260:	4b1a      	ldr	r3, [pc, #104]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105262:	695b      	ldr	r3, [r3, #20]
 8105264:	4a19      	ldr	r2, [pc, #100]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105266:	f023 0302 	bic.w	r3, r3, #2
 810526a:	6153      	str	r3, [r2, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
<<<<<<< HEAD
 8106598:	4b19      	ldr	r3, [pc, #100]	; (8106600 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810659a:	691b      	ldr	r3, [r3, #16]
 810659c:	4a18      	ldr	r2, [pc, #96]	; (8106600 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810659e:	f043 0304 	orr.w	r3, r3, #4
 81065a2:	6113      	str	r3, [r2, #16]
=======
 810526c:	4b18      	ldr	r3, [pc, #96]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810526e:	691b      	ldr	r3, [r3, #16]
 8105270:	4a17      	ldr	r2, [pc, #92]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105272:	f043 0304 	orr.w	r3, r3, #4
 8105276:	6113      	str	r3, [r2, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  __ASM volatile ("dsb 0xF":::"memory");
<<<<<<< HEAD
 81065a4:	f3bf 8f4f 	dsb	sy
}
 81065a8:	bf00      	nop
=======
 8105278:	f3bf 8f4f 	dsb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  __ASM volatile ("isb 0xF":::"memory");
<<<<<<< HEAD
 81065aa:	f3bf 8f6f 	isb	sy
}
 81065ae:	bf00      	nop
=======
 810527c:	f3bf 8f6f 	isb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
<<<<<<< HEAD
 81065b0:	7afb      	ldrb	r3, [r7, #11]
 81065b2:	2b01      	cmp	r3, #1
 81065b4:	d101      	bne.n	81065ba <HAL_PWREx_EnterSTOPMode+0xaa>
=======
 8105280:	7afb      	ldrb	r3, [r7, #11]
 8105282:	2b01      	cmp	r3, #1
 8105284:	d101      	bne.n	810528a <HAL_PWREx_EnterSTOPMode+0xa2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Request Wait For Interrupt */
      __WFI ();
<<<<<<< HEAD
 81065b6:	bf30      	wfi
 81065b8:	e000      	b.n	81065bc <HAL_PWREx_EnterSTOPMode+0xac>
=======
 8105286:	bf30      	wfi
 8105288:	e000      	b.n	810528c <HAL_PWREx_EnterSTOPMode+0xa4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
<<<<<<< HEAD
 81065ba:	bf20      	wfe
=======
 810528a:	bf20      	wfe
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
<<<<<<< HEAD
 81065bc:	4b10      	ldr	r3, [pc, #64]	; (8106600 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81065be:	691b      	ldr	r3, [r3, #16]
 81065c0:	4a0f      	ldr	r2, [pc, #60]	; (8106600 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81065c2:	f023 0304 	bic.w	r3, r3, #4
 81065c6:	6113      	str	r3, [r2, #16]
 81065c8:	e015      	b.n	81065f6 <HAL_PWREx_EnterSTOPMode+0xe6>
=======
 810528c:	4b10      	ldr	r3, [pc, #64]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810528e:	691b      	ldr	r3, [r3, #16]
 8105290:	4a0f      	ldr	r2, [pc, #60]	; (81052d0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105292:	f023 0304 	bic.w	r3, r3, #4
 8105296:	6113      	str	r3, [r2, #16]
 8105298:	e015      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
<<<<<<< HEAD
 81065ca:	f7fb ffc7 	bl	810255c <HAL_GetCurrentCPUID>
 81065ce:	4603      	mov	r3, r0
 81065d0:	2b03      	cmp	r3, #3
 81065d2:	d106      	bne.n	81065e2 <HAL_PWREx_EnterSTOPMode+0xd2>
=======
 810529a:	f7fd f895 	bl	81023c8 <HAL_GetCurrentCPUID>
 810529e:	4603      	mov	r3, r0
 81052a0:	2b03      	cmp	r3, #3
 81052a2:	d106      	bne.n	81052b2 <HAL_PWREx_EnterSTOPMode+0xca>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
<<<<<<< HEAD
 81065d4:	4b09      	ldr	r3, [pc, #36]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 81065d6:	691b      	ldr	r3, [r3, #16]
 81065d8:	4a08      	ldr	r2, [pc, #32]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 81065da:	f023 0304 	bic.w	r3, r3, #4
 81065de:	6113      	str	r3, [r2, #16]
 81065e0:	e009      	b.n	81065f6 <HAL_PWREx_EnterSTOPMode+0xe6>
=======
 81052a4:	4b09      	ldr	r3, [pc, #36]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81052a6:	691b      	ldr	r3, [r3, #16]
 81052a8:	4a08      	ldr	r2, [pc, #32]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81052aa:	f023 0304 	bic.w	r3, r3, #4
 81052ae:	6113      	str	r3, [r2, #16]
 81052b0:	e009      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
<<<<<<< HEAD
 81065e2:	4b06      	ldr	r3, [pc, #24]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 81065e4:	695b      	ldr	r3, [r3, #20]
 81065e6:	4a05      	ldr	r2, [pc, #20]	; (81065fc <HAL_PWREx_EnterSTOPMode+0xec>)
 81065e8:	f023 0304 	bic.w	r3, r3, #4
 81065ec:	6153      	str	r3, [r2, #20]
 81065ee:	e002      	b.n	81065f6 <HAL_PWREx_EnterSTOPMode+0xe6>
=======
 81052b2:	4b06      	ldr	r3, [pc, #24]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81052b4:	695b      	ldr	r3, [r3, #20]
 81052b6:	4a05      	ldr	r2, [pc, #20]	; (81052cc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81052b8:	f023 0304 	bic.w	r3, r3, #4
 81052bc:	6153      	str	r3, [r2, #20]
 81052be:	e002      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return;
<<<<<<< HEAD
 81065f0:	bf00      	nop
 81065f2:	e000      	b.n	81065f6 <HAL_PWREx_EnterSTOPMode+0xe6>
=======
 81052c0:	bf00      	nop
 81052c2:	e000      	b.n	81052c6 <HAL_PWREx_EnterSTOPMode+0xde>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return;
<<<<<<< HEAD
 81065f4:	bf00      	nop
=======
 81052c4:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
<<<<<<< HEAD
 81065f6:	3710      	adds	r7, #16
 81065f8:	46bd      	mov	sp, r7
 81065fa:	bd80      	pop	{r7, pc}
 81065fc:	58024800 	.word	0x58024800
 8106600:	e000ed00 	.word	0xe000ed00
=======
 81052c6:	3710      	adds	r7, #16
 81052c8:	46bd      	mov	sp, r7
 81052ca:	bd80      	pop	{r7, pc}
 81052cc:	58024800 	.word	0x58024800
 81052d0:	e000ed00 	.word	0xe000ed00
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106604 <HAL_PWREx_ClearPendingEvent>:
=======
081052d4 <HAL_PWREx_ClearPendingEvent>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
<<<<<<< HEAD
 8106604:	b580      	push	{r7, lr}
 8106606:	af00      	add	r7, sp, #0
=======
 81052d4:	b580      	push	{r7, lr}
 81052d6:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
<<<<<<< HEAD
 8106608:	f7fb ffa8 	bl	810255c <HAL_GetCurrentCPUID>
 810660c:	4603      	mov	r3, r0
 810660e:	2b03      	cmp	r3, #3
 8106610:	d101      	bne.n	8106616 <HAL_PWREx_ClearPendingEvent+0x12>
=======
 81052d8:	f7fd f876 	bl	81023c8 <HAL_GetCurrentCPUID>
 81052dc:	4603      	mov	r3, r0
 81052de:	2b03      	cmp	r3, #3
 81052e0:	d101      	bne.n	81052e6 <HAL_PWREx_ClearPendingEvent+0x12>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    __WFE ();
<<<<<<< HEAD
 8106612:	bf20      	wfe
=======
 81052e2:	bf20      	wfe
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
<<<<<<< HEAD
 8106614:	e001      	b.n	810661a <HAL_PWREx_ClearPendingEvent+0x16>
=======
 81052e4:	e001      	b.n	81052ea <HAL_PWREx_ClearPendingEvent+0x16>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __SEV ();
<<<<<<< HEAD
 8106616:	bf40      	sev
=======
 81052e6:	bf40      	sev
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __WFE ();
<<<<<<< HEAD
 8106618:	bf20      	wfe
=======
 81052e8:	bf20      	wfe
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810661a:	bf00      	nop
 810661c:	bd80      	pop	{r7, pc}
=======
 81052ea:	bf00      	nop
 81052ec:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08106620 <HAL_RCC_GetSysClockFreq>:
=======
081052f0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8106620:	b480      	push	{r7}
 8106622:	b089      	sub	sp, #36	; 0x24
 8106624:	af00      	add	r7, sp, #0
=======
 81052f0:	b480      	push	{r7}
 81052f2:	b089      	sub	sp, #36	; 0x24
 81052f4:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 8106626:	4bb3      	ldr	r3, [pc, #716]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106628:	691b      	ldr	r3, [r3, #16]
 810662a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810662e:	2b18      	cmp	r3, #24
 8106630:	f200 8155 	bhi.w	81068de <HAL_RCC_GetSysClockFreq+0x2be>
 8106634:	a201      	add	r2, pc, #4	; (adr r2, 810663c <HAL_RCC_GetSysClockFreq+0x1c>)
 8106636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810663a:	bf00      	nop
 810663c:	081066a1 	.word	0x081066a1
 8106640:	081068df 	.word	0x081068df
 8106644:	081068df 	.word	0x081068df
 8106648:	081068df 	.word	0x081068df
 810664c:	081068df 	.word	0x081068df
 8106650:	081068df 	.word	0x081068df
 8106654:	081068df 	.word	0x081068df
 8106658:	081068df 	.word	0x081068df
 810665c:	081066c7 	.word	0x081066c7
 8106660:	081068df 	.word	0x081068df
 8106664:	081068df 	.word	0x081068df
 8106668:	081068df 	.word	0x081068df
 810666c:	081068df 	.word	0x081068df
 8106670:	081068df 	.word	0x081068df
 8106674:	081068df 	.word	0x081068df
 8106678:	081068df 	.word	0x081068df
 810667c:	081066cd 	.word	0x081066cd
 8106680:	081068df 	.word	0x081068df
 8106684:	081068df 	.word	0x081068df
 8106688:	081068df 	.word	0x081068df
 810668c:	081068df 	.word	0x081068df
 8106690:	081068df 	.word	0x081068df
 8106694:	081068df 	.word	0x081068df
 8106698:	081068df 	.word	0x081068df
 810669c:	081066d3 	.word	0x081066d3
=======
 81052f6:	4baf      	ldr	r3, [pc, #700]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81052f8:	691b      	ldr	r3, [r3, #16]
 81052fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81052fe:	2b18      	cmp	r3, #24
 8105300:	f200 814e 	bhi.w	81055a0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8105304:	a201      	add	r2, pc, #4	; (adr r2, 810530c <HAL_RCC_GetSysClockFreq+0x1c>)
 8105306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810530a:	bf00      	nop
 810530c:	08105371 	.word	0x08105371
 8105310:	081055a1 	.word	0x081055a1
 8105314:	081055a1 	.word	0x081055a1
 8105318:	081055a1 	.word	0x081055a1
 810531c:	081055a1 	.word	0x081055a1
 8105320:	081055a1 	.word	0x081055a1
 8105324:	081055a1 	.word	0x081055a1
 8105328:	081055a1 	.word	0x081055a1
 810532c:	08105397 	.word	0x08105397
 8105330:	081055a1 	.word	0x081055a1
 8105334:	081055a1 	.word	0x081055a1
 8105338:	081055a1 	.word	0x081055a1
 810533c:	081055a1 	.word	0x081055a1
 8105340:	081055a1 	.word	0x081055a1
 8105344:	081055a1 	.word	0x081055a1
 8105348:	081055a1 	.word	0x081055a1
 810534c:	0810539d 	.word	0x0810539d
 8105350:	081055a1 	.word	0x081055a1
 8105354:	081055a1 	.word	0x081055a1
 8105358:	081055a1 	.word	0x081055a1
 810535c:	081055a1 	.word	0x081055a1
 8105360:	081055a1 	.word	0x081055a1
 8105364:	081055a1 	.word	0x081055a1
 8105368:	081055a1 	.word	0x081055a1
 810536c:	081053a3 	.word	0x081053a3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 81066a0:	4b94      	ldr	r3, [pc, #592]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81066a2:	681b      	ldr	r3, [r3, #0]
 81066a4:	f003 0320 	and.w	r3, r3, #32
 81066a8:	2b00      	cmp	r3, #0
 81066aa:	d009      	beq.n	81066c0 <HAL_RCC_GetSysClockFreq+0xa0>
=======
 8105370:	4b90      	ldr	r3, [pc, #576]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	f003 0320 	and.w	r3, r3, #32
 8105378:	2b00      	cmp	r3, #0
 810537a:	d009      	beq.n	8105390 <HAL_RCC_GetSysClockFreq+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
<<<<<<< HEAD
 81066ac:	4b91      	ldr	r3, [pc, #580]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81066ae:	681b      	ldr	r3, [r3, #0]
 81066b0:	08db      	lsrs	r3, r3, #3
 81066b2:	f003 0303 	and.w	r3, r3, #3
 81066b6:	4a90      	ldr	r2, [pc, #576]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81066b8:	fa22 f303 	lsr.w	r3, r2, r3
 81066bc:	61bb      	str	r3, [r7, #24]
=======
 810537c:	4b8d      	ldr	r3, [pc, #564]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	08db      	lsrs	r3, r3, #3
 8105382:	f003 0303 	and.w	r3, r3, #3
 8105386:	4a8c      	ldr	r2, [pc, #560]	; (81055b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105388:	fa22 f303 	lsr.w	r3, r2, r3
 810538c:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
<<<<<<< HEAD
 81066be:	e111      	b.n	81068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 810538e:	e10a      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        sysclockfreq = (uint32_t) HSI_VALUE;
<<<<<<< HEAD
 81066c0:	4b8d      	ldr	r3, [pc, #564]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81066c2:	61bb      	str	r3, [r7, #24]
=======
 8105390:	4b89      	ldr	r3, [pc, #548]	; (81055b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105392:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    break;
<<<<<<< HEAD
 81066c4:	e10e      	b.n	81068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 8105394:	e107      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
<<<<<<< HEAD
 81066c6:	4b8d      	ldr	r3, [pc, #564]	; (81068fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81066c8:	61bb      	str	r3, [r7, #24]
=======
 8105396:	4b89      	ldr	r3, [pc, #548]	; (81055bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8105398:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    break;
<<<<<<< HEAD
 81066ca:	e10b      	b.n	81068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 810539a:	e104      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 81066cc:	4b8c      	ldr	r3, [pc, #560]	; (8106900 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81066ce:	61bb      	str	r3, [r7, #24]
=======
 810539c:	4b88      	ldr	r3, [pc, #544]	; (81055c0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 810539e:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    break;
<<<<<<< HEAD
 81066d0:	e108      	b.n	81068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 81053a0:	e101      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< HEAD
 81066d2:	4b88      	ldr	r3, [pc, #544]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066d6:	f003 0303 	and.w	r3, r3, #3
 81066da:	617b      	str	r3, [r7, #20]
=======
 81053a2:	4b84      	ldr	r3, [pc, #528]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053a6:	f003 0303 	and.w	r3, r3, #3
 81053aa:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
<<<<<<< HEAD
 81066dc:	4b85      	ldr	r3, [pc, #532]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066e0:	091b      	lsrs	r3, r3, #4
 81066e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81066e6:	613b      	str	r3, [r7, #16]
=======
 81053ac:	4b81      	ldr	r3, [pc, #516]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053b0:	091b      	lsrs	r3, r3, #4
 81053b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81053b6:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
<<<<<<< HEAD
 81066e8:	4b82      	ldr	r3, [pc, #520]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066ec:	f003 0301 	and.w	r3, r3, #1
 81066f0:	60fb      	str	r3, [r7, #12]
=======
 81053b8:	4b7e      	ldr	r3, [pc, #504]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053bc:	f003 0301 	and.w	r3, r3, #1
 81053c0:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
<<<<<<< HEAD
 81066f2:	4b80      	ldr	r3, [pc, #512]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81066f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81066f6:	08db      	lsrs	r3, r3, #3
 81066f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81066fc:	68fa      	ldr	r2, [r7, #12]
 81066fe:	fb02 f303 	mul.w	r3, r2, r3
 8106702:	ee07 3a90 	vmov	s15, r3
 8106706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810670a:	edc7 7a02 	vstr	s15, [r7, #8]
=======
 81053c2:	4b7c      	ldr	r3, [pc, #496]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81053c6:	08db      	lsrs	r3, r3, #3
 81053c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81053cc:	68fa      	ldr	r2, [r7, #12]
 81053ce:	fb02 f303 	mul.w	r3, r2, r3
 81053d2:	ee07 3a90 	vmov	s15, r3
 81053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053da:	edc7 7a02 	vstr	s15, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    if (pllm != 0U)
<<<<<<< HEAD
 810670e:	693b      	ldr	r3, [r7, #16]
 8106710:	2b00      	cmp	r3, #0
 8106712:	f000 80e1 	beq.w	81068d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8106716:	697b      	ldr	r3, [r7, #20]
 8106718:	2b02      	cmp	r3, #2
 810671a:	f000 8083 	beq.w	8106824 <HAL_RCC_GetSysClockFreq+0x204>
 810671e:	697b      	ldr	r3, [r7, #20]
 8106720:	2b02      	cmp	r3, #2
 8106722:	f200 80a1 	bhi.w	8106868 <HAL_RCC_GetSysClockFreq+0x248>
 8106726:	697b      	ldr	r3, [r7, #20]
 8106728:	2b00      	cmp	r3, #0
 810672a:	d003      	beq.n	8106734 <HAL_RCC_GetSysClockFreq+0x114>
 810672c:	697b      	ldr	r3, [r7, #20]
 810672e:	2b01      	cmp	r3, #1
 8106730:	d056      	beq.n	81067e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106732:	e099      	b.n	8106868 <HAL_RCC_GetSysClockFreq+0x248>
=======
 81053de:	693b      	ldr	r3, [r7, #16]
 81053e0:	2b00      	cmp	r3, #0
 81053e2:	f000 80da 	beq.w	810559a <HAL_RCC_GetSysClockFreq+0x2aa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      switch (pllsource)
<<<<<<< HEAD
=======
 81053e6:	697b      	ldr	r3, [r7, #20]
 81053e8:	2b01      	cmp	r3, #1
 81053ea:	d05a      	beq.n	81054a2 <HAL_RCC_GetSysClockFreq+0x1b2>
 81053ec:	2b01      	cmp	r3, #1
 81053ee:	d302      	bcc.n	81053f6 <HAL_RCC_GetSysClockFreq+0x106>
 81053f0:	2b02      	cmp	r3, #2
 81053f2:	d078      	beq.n	81054e6 <HAL_RCC_GetSysClockFreq+0x1f6>
 81053f4:	e099      	b.n	810552a <HAL_RCC_GetSysClockFreq+0x23a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 8106734:	4b6f      	ldr	r3, [pc, #444]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106736:	681b      	ldr	r3, [r3, #0]
 8106738:	f003 0320 	and.w	r3, r3, #32
 810673c:	2b00      	cmp	r3, #0
 810673e:	d02d      	beq.n	810679c <HAL_RCC_GetSysClockFreq+0x17c>
=======
 81053f6:	4b6f      	ldr	r3, [pc, #444]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	f003 0320 	and.w	r3, r3, #32
 81053fe:	2b00      	cmp	r3, #0
 8105400:	d02d      	beq.n	810545e <HAL_RCC_GetSysClockFreq+0x16e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
<<<<<<< HEAD
 8106740:	4b6c      	ldr	r3, [pc, #432]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106742:	681b      	ldr	r3, [r3, #0]
 8106744:	08db      	lsrs	r3, r3, #3
 8106746:	f003 0303 	and.w	r3, r3, #3
 810674a:	4a6b      	ldr	r2, [pc, #428]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810674c:	fa22 f303 	lsr.w	r3, r2, r3
 8106750:	607b      	str	r3, [r7, #4]
=======
 8105402:	4b6c      	ldr	r3, [pc, #432]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	08db      	lsrs	r3, r3, #3
 8105408:	f003 0303 	and.w	r3, r3, #3
 810540c:	4a6a      	ldr	r2, [pc, #424]	; (81055b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 810540e:	fa22 f303 	lsr.w	r3, r2, r3
 8105412:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	ee07 3a90 	vmov	s15, r3
 8106758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810675c:	693b      	ldr	r3, [r7, #16]
 810675e:	ee07 3a90 	vmov	s15, r3
 8106762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810676a:	4b62      	ldr	r3, [pc, #392]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810676e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106772:	ee07 3a90 	vmov	s15, r3
 8106776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810677a:	ed97 6a02 	vldr	s12, [r7, #8]
 810677e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810678a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810678e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106796:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	ee07 3a90 	vmov	s15, r3
 810541a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810541e:	693b      	ldr	r3, [r7, #16]
 8105420:	ee07 3a90 	vmov	s15, r3
 8105424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810542c:	4b61      	ldr	r3, [pc, #388]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105434:	ee07 3a90 	vmov	s15, r3
 8105438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810543c:	ed97 6a02 	vldr	s12, [r7, #8]
 8105440:	eddf 5a60 	vldr	s11, [pc, #384]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810544c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105458:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
<<<<<<< HEAD
 810679a:	e087      	b.n	81068ac <HAL_RCC_GetSysClockFreq+0x28c>
=======
 810545c:	e087      	b.n	810556e <HAL_RCC_GetSysClockFreq+0x27e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 810679c:	693b      	ldr	r3, [r7, #16]
 810679e:	ee07 3a90 	vmov	s15, r3
 81067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8106908 <HAL_RCC_GetSysClockFreq+0x2e8>
 81067aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067ae:	4b51      	ldr	r3, [pc, #324]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81067b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067b6:	ee07 3a90 	vmov	s15, r3
 81067ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067be:	ed97 6a02 	vldr	s12, [r7, #8]
 81067c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106904 <HAL_RCC_GetSysClockFreq+0x2e4>
 81067c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067da:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 810545e:	693b      	ldr	r3, [r7, #16]
 8105460:	ee07 3a90 	vmov	s15, r3
 8105464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105468:	eddf 6a57 	vldr	s13, [pc, #348]	; 81055c8 <HAL_RCC_GetSysClockFreq+0x2d8>
 810546c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105470:	4b50      	ldr	r3, [pc, #320]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105478:	ee07 3a90 	vmov	s15, r3
 810547c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105480:	ed97 6a02 	vldr	s12, [r7, #8]
 8105484:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810548c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105498:	ee67 7a27 	vmul.f32	s15, s14, s15
 810549c:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 81067de:	e065      	b.n	81068ac <HAL_RCC_GetSysClockFreq+0x28c>
=======
 81054a0:	e065      	b.n	810556e <HAL_RCC_GetSysClockFreq+0x27e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 81067e0:	693b      	ldr	r3, [r7, #16]
 81067e2:	ee07 3a90 	vmov	s15, r3
 81067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 810690c <HAL_RCC_GetSysClockFreq+0x2ec>
 81067ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067f2:	4b40      	ldr	r3, [pc, #256]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067fa:	ee07 3a90 	vmov	s15, r3
 81067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106802:	ed97 6a02 	vldr	s12, [r7, #8]
 8106806:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106904 <HAL_RCC_GetSysClockFreq+0x2e4>
 810680a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810681e:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 81054a2:	693b      	ldr	r3, [r7, #16]
 81054a4:	ee07 3a90 	vmov	s15, r3
 81054a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054ac:	eddf 6a47 	vldr	s13, [pc, #284]	; 81055cc <HAL_RCC_GetSysClockFreq+0x2dc>
 81054b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054b4:	4b3f      	ldr	r3, [pc, #252]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81054b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054bc:	ee07 3a90 	vmov	s15, r3
 81054c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054c4:	ed97 6a02 	vldr	s12, [r7, #8]
 81054c8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 81054cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054e0:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8106822:	e043      	b.n	81068ac <HAL_RCC_GetSysClockFreq+0x28c>
=======
 81054e4:	e043      	b.n	810556e <HAL_RCC_GetSysClockFreq+0x27e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106824:	693b      	ldr	r3, [r7, #16]
 8106826:	ee07 3a90 	vmov	s15, r3
 810682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810682e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8106910 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106836:	4b2f      	ldr	r3, [pc, #188]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810683e:	ee07 3a90 	vmov	s15, r3
 8106842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106846:	ed97 6a02 	vldr	s12, [r7, #8]
 810684a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106904 <HAL_RCC_GetSysClockFreq+0x2e4>
 810684e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810685a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810685e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106862:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 81054e6:	693b      	ldr	r3, [r7, #16]
 81054e8:	ee07 3a90 	vmov	s15, r3
 81054ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054f0:	eddf 6a37 	vldr	s13, [pc, #220]	; 81055d0 <HAL_RCC_GetSysClockFreq+0x2e0>
 81054f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054f8:	4b2e      	ldr	r3, [pc, #184]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105500:	ee07 3a90 	vmov	s15, r3
 8105504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105508:	ed97 6a02 	vldr	s12, [r7, #8]
 810550c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810551c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105524:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8106866:	e021      	b.n	81068ac <HAL_RCC_GetSysClockFreq+0x28c>
=======
 8105528:	e021      	b.n	810556e <HAL_RCC_GetSysClockFreq+0x27e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106868:	693b      	ldr	r3, [r7, #16]
 810686a:	ee07 3a90 	vmov	s15, r3
 810686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106872:	eddf 6a26 	vldr	s13, [pc, #152]	; 810690c <HAL_RCC_GetSysClockFreq+0x2ec>
 8106876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810687a:	4b1e      	ldr	r3, [pc, #120]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106882:	ee07 3a90 	vmov	s15, r3
 8106886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810688a:	ed97 6a02 	vldr	s12, [r7, #8]
 810688e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810689a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810689e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068a6:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 810552a:	693b      	ldr	r3, [r7, #16]
 810552c:	ee07 3a90 	vmov	s15, r3
 8105530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105534:	eddf 6a25 	vldr	s13, [pc, #148]	; 81055cc <HAL_RCC_GetSysClockFreq+0x2dc>
 8105538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810553c:	4b1d      	ldr	r3, [pc, #116]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105544:	ee07 3a90 	vmov	s15, r3
 8105548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810554c:	ed97 6a02 	vldr	s12, [r7, #8]
 8105550:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81055c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810555c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105568:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 81068aa:	bf00      	nop
=======
 810556c:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
<<<<<<< HEAD
 81068ac:	4b11      	ldr	r3, [pc, #68]	; (81068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81068b0:	0a5b      	lsrs	r3, r3, #9
 81068b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81068b6:	3301      	adds	r3, #1
 81068b8:	603b      	str	r3, [r7, #0]
=======
 810556e:	4b11      	ldr	r3, [pc, #68]	; (81055b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105572:	0a5b      	lsrs	r3, r3, #9
 8105574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105578:	3301      	adds	r3, #1
 810557a:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
<<<<<<< HEAD
 81068ba:	683b      	ldr	r3, [r7, #0]
 81068bc:	ee07 3a90 	vmov	s15, r3
 81068c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81068c4:	edd7 6a07 	vldr	s13, [r7, #28]
 81068c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81068cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81068d0:	ee17 3a90 	vmov	r3, s15
 81068d4:	61bb      	str	r3, [r7, #24]
=======
 810557c:	683b      	ldr	r3, [r7, #0]
 810557e:	ee07 3a90 	vmov	s15, r3
 8105582:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105586:	edd7 6a07 	vldr	s13, [r7, #28]
 810558a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810558e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105592:	ee17 3a90 	vmov	r3, s15
 8105596:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
<<<<<<< HEAD
 81068d6:	e005      	b.n	81068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 8105598:	e005      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      sysclockfreq = 0U;
<<<<<<< HEAD
 81068d8:	2300      	movs	r3, #0
 81068da:	61bb      	str	r3, [r7, #24]
=======
 810559a:	2300      	movs	r3, #0
 810559c:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    break;
<<<<<<< HEAD
 81068dc:	e002      	b.n	81068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 810559e:	e002      	b.n	81055a6 <HAL_RCC_GetSysClockFreq+0x2b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  default:
    sysclockfreq = CSI_VALUE;
<<<<<<< HEAD
 81068de:	4b07      	ldr	r3, [pc, #28]	; (81068fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81068e0:	61bb      	str	r3, [r7, #24]
=======
 81055a0:	4b06      	ldr	r3, [pc, #24]	; (81055bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 81055a2:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    break;
<<<<<<< HEAD
 81068e2:	bf00      	nop
=======
 81055a4:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  return sysclockfreq;
<<<<<<< HEAD
 81068e4:	69bb      	ldr	r3, [r7, #24]
=======
 81055a6:	69bb      	ldr	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81068e6:	4618      	mov	r0, r3
 81068e8:	3724      	adds	r7, #36	; 0x24
 81068ea:	46bd      	mov	sp, r7
 81068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068f0:	4770      	bx	lr
 81068f2:	bf00      	nop
 81068f4:	58024400 	.word	0x58024400
 81068f8:	03d09000 	.word	0x03d09000
 81068fc:	003d0900 	.word	0x003d0900
 8106900:	017d7840 	.word	0x017d7840
 8106904:	46000000 	.word	0x46000000
 8106908:	4c742400 	.word	0x4c742400
 810690c:	4a742400 	.word	0x4a742400
 8106910:	4bbebc20 	.word	0x4bbebc20
=======
 81055a8:	4618      	mov	r0, r3
 81055aa:	3724      	adds	r7, #36	; 0x24
 81055ac:	46bd      	mov	sp, r7
 81055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055b2:	4770      	bx	lr
 81055b4:	58024400 	.word	0x58024400
 81055b8:	03d09000 	.word	0x03d09000
 81055bc:	003d0900 	.word	0x003d0900
 81055c0:	017d7840 	.word	0x017d7840
 81055c4:	46000000 	.word	0x46000000
 81055c8:	4c742400 	.word	0x4c742400
 81055cc:	4a742400 	.word	0x4a742400
 81055d0:	4bbebc20 	.word	0x4bbebc20
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106914 <HAL_RCC_GetHCLKFreq>:
=======
081055d4 <HAL_RCC_GetHCLKFreq>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8106914:	b580      	push	{r7, lr}
 8106916:	b082      	sub	sp, #8
 8106918:	af00      	add	r7, sp, #0
=======
 81055d4:	b580      	push	{r7, lr}
 81055d6:	b082      	sub	sp, #8
 81055d8:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 810691a:	f7ff fe81 	bl	8106620 <HAL_RCC_GetSysClockFreq>
 810691e:	4602      	mov	r2, r0
 8106920:	4b11      	ldr	r3, [pc, #68]	; (8106968 <HAL_RCC_GetHCLKFreq+0x54>)
 8106922:	699b      	ldr	r3, [r3, #24]
 8106924:	0a1b      	lsrs	r3, r3, #8
 8106926:	f003 030f 	and.w	r3, r3, #15
 810692a:	4910      	ldr	r1, [pc, #64]	; (810696c <HAL_RCC_GetHCLKFreq+0x58>)
 810692c:	5ccb      	ldrb	r3, [r1, r3]
 810692e:	f003 031f 	and.w	r3, r3, #31
 8106932:	fa22 f303 	lsr.w	r3, r2, r3
 8106936:	607b      	str	r3, [r7, #4]
=======
 81055da:	f7ff fe89 	bl	81052f0 <HAL_RCC_GetSysClockFreq>
 81055de:	4601      	mov	r1, r0
 81055e0:	4b11      	ldr	r3, [pc, #68]	; (8105628 <HAL_RCC_GetHCLKFreq+0x54>)
 81055e2:	699b      	ldr	r3, [r3, #24]
 81055e4:	0a1b      	lsrs	r3, r3, #8
 81055e6:	f003 030f 	and.w	r3, r3, #15
 81055ea:	4a10      	ldr	r2, [pc, #64]	; (810562c <HAL_RCC_GetHCLKFreq+0x58>)
 81055ec:	5cd3      	ldrb	r3, [r2, r3]
 81055ee:	f003 031f 	and.w	r3, r3, #31
 81055f2:	fa21 f303 	lsr.w	r3, r1, r3
 81055f6:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< HEAD
 8106938:	4b0b      	ldr	r3, [pc, #44]	; (8106968 <HAL_RCC_GetHCLKFreq+0x54>)
 810693a:	699b      	ldr	r3, [r3, #24]
 810693c:	f003 030f 	and.w	r3, r3, #15
 8106940:	4a0a      	ldr	r2, [pc, #40]	; (810696c <HAL_RCC_GetHCLKFreq+0x58>)
 8106942:	5cd3      	ldrb	r3, [r2, r3]
 8106944:	f003 031f 	and.w	r3, r3, #31
 8106948:	687a      	ldr	r2, [r7, #4]
 810694a:	fa22 f303 	lsr.w	r3, r2, r3
 810694e:	4a08      	ldr	r2, [pc, #32]	; (8106970 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106950:	6013      	str	r3, [r2, #0]
=======
 81055f8:	4b0b      	ldr	r3, [pc, #44]	; (8105628 <HAL_RCC_GetHCLKFreq+0x54>)
 81055fa:	699b      	ldr	r3, [r3, #24]
 81055fc:	f003 030f 	and.w	r3, r3, #15
 8105600:	4a0a      	ldr	r2, [pc, #40]	; (810562c <HAL_RCC_GetHCLKFreq+0x58>)
 8105602:	5cd3      	ldrb	r3, [r2, r3]
 8105604:	f003 031f 	and.w	r3, r3, #31
 8105608:	687a      	ldr	r2, [r7, #4]
 810560a:	fa22 f303 	lsr.w	r3, r2, r3
 810560e:	4a08      	ldr	r2, [pc, #32]	; (8105630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105610:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
<<<<<<< HEAD
 8106952:	4b07      	ldr	r3, [pc, #28]	; (8106970 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106954:	681b      	ldr	r3, [r3, #0]
 8106956:	4a07      	ldr	r2, [pc, #28]	; (8106974 <HAL_RCC_GetHCLKFreq+0x60>)
 8106958:	6013      	str	r3, [r2, #0]
=======
 8105612:	4b07      	ldr	r3, [pc, #28]	; (8105630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	4a07      	ldr	r2, [pc, #28]	; (8105634 <HAL_RCC_GetHCLKFreq+0x60>)
 8105618:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
<<<<<<< HEAD
 810695a:	4b05      	ldr	r3, [pc, #20]	; (8106970 <HAL_RCC_GetHCLKFreq+0x5c>)
 810695c:	681b      	ldr	r3, [r3, #0]
=======
 810561a:	4b05      	ldr	r3, [pc, #20]	; (8105630 <HAL_RCC_GetHCLKFreq+0x5c>)
 810561c:	681b      	ldr	r3, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810695e:	4618      	mov	r0, r3
 8106960:	3708      	adds	r7, #8
 8106962:	46bd      	mov	sp, r7
 8106964:	bd80      	pop	{r7, pc}
 8106966:	bf00      	nop
 8106968:	58024400 	.word	0x58024400
 810696c:	0811497c 	.word	0x0811497c
 8106970:	10000004 	.word	0x10000004
 8106974:	10000000 	.word	0x10000000
=======
 810561e:	4618      	mov	r0, r3
 8105620:	3708      	adds	r7, #8
 8105622:	46bd      	mov	sp, r7
 8105624:	bd80      	pop	{r7, pc}
 8105626:	bf00      	nop
 8105628:	58024400 	.word	0x58024400
 810562c:	08110998 	.word	0x08110998
 8105630:	10000004 	.word	0x10000004
 8105634:	10000000 	.word	0x10000000
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106978 <HAL_RCC_GetPCLK1Freq>:
=======
08105638 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8106978:	b580      	push	{r7, lr}
 810697a:	af00      	add	r7, sp, #0
=======
 8105638:	b580      	push	{r7, lr}
 810563a:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
<<<<<<< HEAD
 810697c:	f7ff ffca 	bl	8106914 <HAL_RCC_GetHCLKFreq>
 8106980:	4602      	mov	r2, r0
 8106982:	4b06      	ldr	r3, [pc, #24]	; (810699c <HAL_RCC_GetPCLK1Freq+0x24>)
 8106984:	69db      	ldr	r3, [r3, #28]
 8106986:	091b      	lsrs	r3, r3, #4
 8106988:	f003 0307 	and.w	r3, r3, #7
 810698c:	4904      	ldr	r1, [pc, #16]	; (81069a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 810698e:	5ccb      	ldrb	r3, [r1, r3]
 8106990:	f003 031f 	and.w	r3, r3, #31
 8106994:	fa22 f303 	lsr.w	r3, r2, r3
=======
 810563c:	f7ff ffca 	bl	81055d4 <HAL_RCC_GetHCLKFreq>
 8105640:	4601      	mov	r1, r0
 8105642:	4b06      	ldr	r3, [pc, #24]	; (810565c <HAL_RCC_GetPCLK1Freq+0x24>)
 8105644:	69db      	ldr	r3, [r3, #28]
 8105646:	091b      	lsrs	r3, r3, #4
 8105648:	f003 0307 	and.w	r3, r3, #7
 810564c:	4a04      	ldr	r2, [pc, #16]	; (8105660 <HAL_RCC_GetPCLK1Freq+0x28>)
 810564e:	5cd3      	ldrb	r3, [r2, r3]
 8105650:	f003 031f 	and.w	r3, r3, #31
 8105654:	fa21 f303 	lsr.w	r3, r1, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
<<<<<<< HEAD
 8106998:	4618      	mov	r0, r3
 810699a:	bd80      	pop	{r7, pc}
 810699c:	58024400 	.word	0x58024400
 81069a0:	0811497c 	.word	0x0811497c
=======
 8105658:	4618      	mov	r0, r3
 810565a:	bd80      	pop	{r7, pc}
 810565c:	58024400 	.word	0x58024400
 8105660:	08110998 	.word	0x08110998
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081069a4 <HAL_RCC_GetPCLK2Freq>:
=======
08105664 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 81069a4:	b580      	push	{r7, lr}
 81069a6:	af00      	add	r7, sp, #0
=======
 8105664:	b580      	push	{r7, lr}
 8105666:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
<<<<<<< HEAD
 81069a8:	f7ff ffb4 	bl	8106914 <HAL_RCC_GetHCLKFreq>
 81069ac:	4602      	mov	r2, r0
 81069ae:	4b06      	ldr	r3, [pc, #24]	; (81069c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 81069b0:	69db      	ldr	r3, [r3, #28]
 81069b2:	0a1b      	lsrs	r3, r3, #8
 81069b4:	f003 0307 	and.w	r3, r3, #7
 81069b8:	4904      	ldr	r1, [pc, #16]	; (81069cc <HAL_RCC_GetPCLK2Freq+0x28>)
 81069ba:	5ccb      	ldrb	r3, [r1, r3]
 81069bc:	f003 031f 	and.w	r3, r3, #31
 81069c0:	fa22 f303 	lsr.w	r3, r2, r3
=======
 8105668:	f7ff ffb4 	bl	81055d4 <HAL_RCC_GetHCLKFreq>
 810566c:	4601      	mov	r1, r0
 810566e:	4b06      	ldr	r3, [pc, #24]	; (8105688 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105670:	69db      	ldr	r3, [r3, #28]
 8105672:	0a1b      	lsrs	r3, r3, #8
 8105674:	f003 0307 	and.w	r3, r3, #7
 8105678:	4a04      	ldr	r2, [pc, #16]	; (810568c <HAL_RCC_GetPCLK2Freq+0x28>)
 810567a:	5cd3      	ldrb	r3, [r2, r3]
 810567c:	f003 031f 	and.w	r3, r3, #31
 8105680:	fa21 f303 	lsr.w	r3, r1, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
<<<<<<< HEAD
 81069c4:	4618      	mov	r0, r3
 81069c6:	bd80      	pop	{r7, pc}
 81069c8:	58024400 	.word	0x58024400
 81069cc:	0811497c 	.word	0x0811497c
=======
 8105684:	4618      	mov	r0, r3
 8105686:	bd80      	pop	{r7, pc}
 8105688:	58024400 	.word	0x58024400
 810568c:	08110998 	.word	0x08110998
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081069d0 <HAL_RCC_GetClockConfig>:
=======
08105690 <HAL_RCC_GetClockConfig>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 81069d0:	b480      	push	{r7}
 81069d2:	b083      	sub	sp, #12
 81069d4:	af00      	add	r7, sp, #0
 81069d6:	6078      	str	r0, [r7, #4]
 81069d8:	6039      	str	r1, [r7, #0]
=======
 8105690:	b480      	push	{r7}
 8105692:	b083      	sub	sp, #12
 8105694:	af00      	add	r7, sp, #0
 8105696:	6078      	str	r0, [r7, #4]
 8105698:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
<<<<<<< HEAD
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	223f      	movs	r2, #63	; 0x3f
 81069de:	601a      	str	r2, [r3, #0]
=======
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	223f      	movs	r2, #63	; 0x3f
 810569e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
<<<<<<< HEAD
 81069e0:	4b1a      	ldr	r3, [pc, #104]	; (8106a4c <HAL_RCC_GetClockConfig+0x7c>)
 81069e2:	691b      	ldr	r3, [r3, #16]
 81069e4:	f003 0207 	and.w	r2, r3, #7
 81069e8:	687b      	ldr	r3, [r7, #4]
 81069ea:	605a      	str	r2, [r3, #4]
=======
 81056a0:	4b1a      	ldr	r3, [pc, #104]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056a2:	691b      	ldr	r3, [r3, #16]
 81056a4:	f003 0207 	and.w	r2, r3, #7
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
<<<<<<< HEAD
 81069ec:	4b17      	ldr	r3, [pc, #92]	; (8106a4c <HAL_RCC_GetClockConfig+0x7c>)
 81069ee:	699b      	ldr	r3, [r3, #24]
 81069f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	609a      	str	r2, [r3, #8]
=======
 81056ac:	4b17      	ldr	r3, [pc, #92]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056ae:	699b      	ldr	r3, [r3, #24]
 81056b0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
<<<<<<< HEAD
 81069f8:	4b14      	ldr	r3, [pc, #80]	; (8106a4c <HAL_RCC_GetClockConfig+0x7c>)
 81069fa:	699b      	ldr	r3, [r3, #24]
 81069fc:	f003 020f 	and.w	r2, r3, #15
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	60da      	str	r2, [r3, #12]
=======
 81056b8:	4b14      	ldr	r3, [pc, #80]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056ba:	699b      	ldr	r3, [r3, #24]
 81056bc:	f003 020f 	and.w	r2, r3, #15
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
<<<<<<< HEAD
 8106a04:	4b11      	ldr	r3, [pc, #68]	; (8106a4c <HAL_RCC_GetClockConfig+0x7c>)
 8106a06:	699b      	ldr	r3, [r3, #24]
 8106a08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	611a      	str	r2, [r3, #16]
=======
 81056c4:	4b11      	ldr	r3, [pc, #68]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056c6:	699b      	ldr	r3, [r3, #24]
 81056c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
<<<<<<< HEAD
 8106a10:	4b0e      	ldr	r3, [pc, #56]	; (8106a4c <HAL_RCC_GetClockConfig+0x7c>)
 8106a12:	69db      	ldr	r3, [r3, #28]
 8106a14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	615a      	str	r2, [r3, #20]
=======
 81056d0:	4b0e      	ldr	r3, [pc, #56]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056d2:	69db      	ldr	r3, [r3, #28]
 81056d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
<<<<<<< HEAD
 8106a1c:	4b0b      	ldr	r3, [pc, #44]	; (8106a4c <HAL_RCC_GetClockConfig+0x7c>)
 8106a1e:	69db      	ldr	r3, [r3, #28]
 8106a20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106a24:	687b      	ldr	r3, [r7, #4]
 8106a26:	619a      	str	r2, [r3, #24]
=======
 81056dc:	4b0b      	ldr	r3, [pc, #44]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056de:	69db      	ldr	r3, [r3, #28]
 81056e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
<<<<<<< HEAD
 8106a28:	4b08      	ldr	r3, [pc, #32]	; (8106a4c <HAL_RCC_GetClockConfig+0x7c>)
 8106a2a:	6a1b      	ldr	r3, [r3, #32]
 8106a2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	61da      	str	r2, [r3, #28]
=======
 81056e8:	4b08      	ldr	r3, [pc, #32]	; (810570c <HAL_RCC_GetClockConfig+0x7c>)
 81056ea:	6a1b      	ldr	r3, [r3, #32]
 81056ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	61da      	str	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
<<<<<<< HEAD
 8106a34:	4b06      	ldr	r3, [pc, #24]	; (8106a50 <HAL_RCC_GetClockConfig+0x80>)
 8106a36:	681b      	ldr	r3, [r3, #0]
 8106a38:	f003 020f 	and.w	r2, r3, #15
 8106a3c:	683b      	ldr	r3, [r7, #0]
 8106a3e:	601a      	str	r2, [r3, #0]
=======
 81056f4:	4b06      	ldr	r3, [pc, #24]	; (8105710 <HAL_RCC_GetClockConfig+0x80>)
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	f003 020f 	and.w	r2, r3, #15
 81056fc:	683b      	ldr	r3, [r7, #0]
 81056fe:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8106a40:	bf00      	nop
 8106a42:	370c      	adds	r7, #12
 8106a44:	46bd      	mov	sp, r7
 8106a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a4a:	4770      	bx	lr
 8106a4c:	58024400 	.word	0x58024400
 8106a50:	52002000 	.word	0x52002000
=======
 8105700:	bf00      	nop
 8105702:	370c      	adds	r7, #12
 8105704:	46bd      	mov	sp, r7
 8105706:	f85d 7b04 	ldr.w	r7, [sp], #4
 810570a:	4770      	bx	lr
 810570c:	58024400 	.word	0x58024400
 8105710:	52002000 	.word	0x52002000
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106a54 <HAL_RCCEx_GetD3PCLK1Freq>:
=======
08105714 <HAL_RCCEx_GetD3PCLK1Freq>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
<<<<<<< HEAD
 8106a54:	b580      	push	{r7, lr}
 8106a56:	af00      	add	r7, sp, #0
=======
 8105714:	b580      	push	{r7, lr}
 8105716:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
<<<<<<< HEAD
 8106a58:	f7ff ff5c 	bl	8106914 <HAL_RCC_GetHCLKFreq>
 8106a5c:	4602      	mov	r2, r0
 8106a5e:	4b06      	ldr	r3, [pc, #24]	; (8106a78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106a60:	6a1b      	ldr	r3, [r3, #32]
 8106a62:	091b      	lsrs	r3, r3, #4
 8106a64:	f003 0307 	and.w	r3, r3, #7
 8106a68:	4904      	ldr	r1, [pc, #16]	; (8106a7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106a6a:	5ccb      	ldrb	r3, [r1, r3]
 8106a6c:	f003 031f 	and.w	r3, r3, #31
 8106a70:	fa22 f303 	lsr.w	r3, r2, r3
=======
 8105718:	f7ff ff5c 	bl	81055d4 <HAL_RCC_GetHCLKFreq>
 810571c:	4601      	mov	r1, r0
 810571e:	4b06      	ldr	r3, [pc, #24]	; (8105738 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105720:	6a1b      	ldr	r3, [r3, #32]
 8105722:	091b      	lsrs	r3, r3, #4
 8105724:	f003 0307 	and.w	r3, r3, #7
 8105728:	4a04      	ldr	r2, [pc, #16]	; (810573c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810572a:	5cd3      	ldrb	r3, [r2, r3]
 810572c:	f003 031f 	and.w	r3, r3, #31
 8105730:	fa21 f303 	lsr.w	r3, r1, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
<<<<<<< HEAD
 8106a74:	4618      	mov	r0, r3
 8106a76:	bd80      	pop	{r7, pc}
 8106a78:	58024400 	.word	0x58024400
 8106a7c:	0811497c 	.word	0x0811497c
=======
 8105734:	4618      	mov	r0, r3
 8105736:	bd80      	pop	{r7, pc}
 8105738:	58024400 	.word	0x58024400
 810573c:	08110998 	.word	0x08110998
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106a80 <HAL_RCCEx_GetPLL2ClockFreq>:
=======
08105740 <HAL_RCCEx_GetPLL2ClockFreq>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
<<<<<<< HEAD
 8106a80:	b480      	push	{r7}
 8106a82:	b089      	sub	sp, #36	; 0x24
 8106a84:	af00      	add	r7, sp, #0
 8106a86:	6078      	str	r0, [r7, #4]
=======
 8105740:	b480      	push	{r7}
 8105742:	b089      	sub	sp, #36	; 0x24
 8105744:	af00      	add	r7, sp, #0
 8105746:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< HEAD
 8106a88:	4ba1      	ldr	r3, [pc, #644]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a8c:	f003 0303 	and.w	r3, r3, #3
 8106a90:	61bb      	str	r3, [r7, #24]
=======
 8105748:	4b9d      	ldr	r3, [pc, #628]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810574c:	f003 0303 	and.w	r3, r3, #3
 8105750:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
<<<<<<< HEAD
 8106a92:	4b9f      	ldr	r3, [pc, #636]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a96:	0b1b      	lsrs	r3, r3, #12
 8106a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106a9c:	617b      	str	r3, [r7, #20]
=======
 8105752:	4b9b      	ldr	r3, [pc, #620]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105756:	0b1b      	lsrs	r3, r3, #12
 8105758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810575c:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
<<<<<<< HEAD
 8106a9e:	4b9c      	ldr	r3, [pc, #624]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106aa2:	091b      	lsrs	r3, r3, #4
 8106aa4:	f003 0301 	and.w	r3, r3, #1
 8106aa8:	613b      	str	r3, [r7, #16]
=======
 810575e:	4b98      	ldr	r3, [pc, #608]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105762:	091b      	lsrs	r3, r3, #4
 8105764:	f003 0301 	and.w	r3, r3, #1
 8105768:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
<<<<<<< HEAD
 8106aaa:	4b99      	ldr	r3, [pc, #612]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106aae:	08db      	lsrs	r3, r3, #3
 8106ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106ab4:	693a      	ldr	r2, [r7, #16]
 8106ab6:	fb02 f303 	mul.w	r3, r2, r3
 8106aba:	ee07 3a90 	vmov	s15, r3
 8106abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ac2:	edc7 7a03 	vstr	s15, [r7, #12]
=======
 810576a:	4b95      	ldr	r3, [pc, #596]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810576e:	08db      	lsrs	r3, r3, #3
 8105770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105774:	693a      	ldr	r2, [r7, #16]
 8105776:	fb02 f303 	mul.w	r3, r2, r3
 810577a:	ee07 3a90 	vmov	s15, r3
 810577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105782:	edc7 7a03 	vstr	s15, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if (pll2m != 0U)
<<<<<<< HEAD
 8106ac6:	697b      	ldr	r3, [r7, #20]
 8106ac8:	2b00      	cmp	r3, #0
 8106aca:	f000 8111 	beq.w	8106cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
=======
 8105786:	697b      	ldr	r3, [r7, #20]
 8105788:	2b00      	cmp	r3, #0
 810578a:	f000 810a 	beq.w	81059a2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    switch (pllsource)
<<<<<<< HEAD
 8106ace:	69bb      	ldr	r3, [r7, #24]
 8106ad0:	2b02      	cmp	r3, #2
 8106ad2:	f000 8083 	beq.w	8106bdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106ad6:	69bb      	ldr	r3, [r7, #24]
 8106ad8:	2b02      	cmp	r3, #2
 8106ada:	f200 80a1 	bhi.w	8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106ade:	69bb      	ldr	r3, [r7, #24]
 8106ae0:	2b00      	cmp	r3, #0
 8106ae2:	d003      	beq.n	8106aec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106ae4:	69bb      	ldr	r3, [r7, #24]
 8106ae6:	2b01      	cmp	r3, #1
 8106ae8:	d056      	beq.n	8106b98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8106aea:	e099      	b.n	8106c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
=======
 810578e:	69bb      	ldr	r3, [r7, #24]
 8105790:	2b01      	cmp	r3, #1
 8105792:	d05a      	beq.n	810584a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8105794:	2b01      	cmp	r3, #1
 8105796:	d302      	bcc.n	810579e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8105798:	2b02      	cmp	r3, #2
 810579a:	d078      	beq.n	810588e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 810579c:	e099      	b.n	81058d2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 8106aec:	4b88      	ldr	r3, [pc, #544]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106aee:	681b      	ldr	r3, [r3, #0]
 8106af0:	f003 0320 	and.w	r3, r3, #32
 8106af4:	2b00      	cmp	r3, #0
 8106af6:	d02d      	beq.n	8106b54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
=======
 810579e:	4b88      	ldr	r3, [pc, #544]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81057a0:	681b      	ldr	r3, [r3, #0]
 81057a2:	f003 0320 	and.w	r3, r3, #32
 81057a6:	2b00      	cmp	r3, #0
 81057a8:	d02d      	beq.n	8105806 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
<<<<<<< HEAD
 8106af8:	4b85      	ldr	r3, [pc, #532]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106afa:	681b      	ldr	r3, [r3, #0]
 8106afc:	08db      	lsrs	r3, r3, #3
 8106afe:	f003 0303 	and.w	r3, r3, #3
 8106b02:	4a84      	ldr	r2, [pc, #528]	; (8106d14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106b04:	fa22 f303 	lsr.w	r3, r2, r3
 8106b08:	60bb      	str	r3, [r7, #8]
=======
 81057aa:	4b85      	ldr	r3, [pc, #532]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	08db      	lsrs	r3, r3, #3
 81057b0:	f003 0303 	and.w	r3, r3, #3
 81057b4:	4a83      	ldr	r2, [pc, #524]	; (81059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 81057b6:	fa22 f303 	lsr.w	r3, r2, r3
 81057ba:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106b0a:	68bb      	ldr	r3, [r7, #8]
 8106b0c:	ee07 3a90 	vmov	s15, r3
 8106b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b14:	697b      	ldr	r3, [r7, #20]
 8106b16:	ee07 3a90 	vmov	s15, r3
 8106b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b22:	4b7b      	ldr	r3, [pc, #492]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b2a:	ee07 3a90 	vmov	s15, r3
 8106b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b4e:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 81057bc:	68bb      	ldr	r3, [r7, #8]
 81057be:	ee07 3a90 	vmov	s15, r3
 81057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057c6:	697b      	ldr	r3, [r7, #20]
 81057c8:	ee07 3a90 	vmov	s15, r3
 81057cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057d4:	4b7a      	ldr	r3, [pc, #488]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81057d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057dc:	ee07 3a90 	vmov	s15, r3
 81057e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81057e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81057ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105800:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
<<<<<<< HEAD
 8106b52:	e087      	b.n	8106c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
=======
 8105804:	e087      	b.n	8105916 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106b54:	697b      	ldr	r3, [r7, #20]
 8106b56:	ee07 3a90 	vmov	s15, r3
 8106b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106d1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b66:	4b6a      	ldr	r3, [pc, #424]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b6e:	ee07 3a90 	vmov	s15, r3
 8106b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b92:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8105806:	697b      	ldr	r3, [r7, #20]
 8105808:	ee07 3a90 	vmov	s15, r3
 810580c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105810:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81059cc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8105814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105818:	4b69      	ldr	r3, [pc, #420]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810581c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105820:	ee07 3a90 	vmov	s15, r3
 8105824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105828:	ed97 6a03 	vldr	s12, [r7, #12]
 810582c:	eddf 5a66 	vldr	s11, [pc, #408]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810583c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105844:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      break;
<<<<<<< HEAD
 8106b96:	e065      	b.n	8106c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
=======
 8105848:	e065      	b.n	8105916 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106b98:	697b      	ldr	r3, [r7, #20]
 8106b9a:	ee07 3a90 	vmov	s15, r3
 8106b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ba2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106baa:	4b59      	ldr	r3, [pc, #356]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bb2:	ee07 3a90 	vmov	s15, r3
 8106bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8106bbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bd6:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 810584a:	697b      	ldr	r3, [r7, #20]
 810584c:	ee07 3a90 	vmov	s15, r3
 8105850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105854:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8105858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810585c:	4b58      	ldr	r3, [pc, #352]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105864:	ee07 3a90 	vmov	s15, r3
 8105868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810586c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105870:	eddf 5a55 	vldr	s11, [pc, #340]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810587c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105888:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      break;
<<<<<<< HEAD
 8106bda:	e043      	b.n	8106c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
=======
 810588c:	e043      	b.n	8105916 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106bdc:	697b      	ldr	r3, [r7, #20]
 8106bde:	ee07 3a90 	vmov	s15, r3
 8106be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106be6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106bee:	4b48      	ldr	r3, [pc, #288]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bf6:	ee07 3a90 	vmov	s15, r3
 8106bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c1a:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 810588e:	697b      	ldr	r3, [r7, #20]
 8105890:	ee07 3a90 	vmov	s15, r3
 8105894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105898:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 810589c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058a0:	4b47      	ldr	r3, [pc, #284]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058a8:	ee07 3a90 	vmov	s15, r3
 81058ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058b0:	ed97 6a03 	vldr	s12, [r7, #12]
 81058b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81058b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058cc:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      break;
<<<<<<< HEAD
 8106c1e:	e021      	b.n	8106c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
=======
 81058d0:	e021      	b.n	8105916 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106c20:	697b      	ldr	r3, [r7, #20]
 8106c22:	ee07 3a90 	vmov	s15, r3
 8106c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c32:	4b37      	ldr	r3, [pc, #220]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c3a:	ee07 3a90 	vmov	s15, r3
 8106c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c5e:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 81058d2:	697b      	ldr	r3, [r7, #20]
 81058d4:	ee07 3a90 	vmov	s15, r3
 81058d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81058e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058e4:	4b36      	ldr	r3, [pc, #216]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058ec:	ee07 3a90 	vmov	s15, r3
 81058f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058f4:	ed97 6a03 	vldr	s12, [r7, #12]
 81058f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 81059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81058fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810590c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105910:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      break;
<<<<<<< HEAD
 8106c62:	bf00      	nop
=======
 8105914:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
<<<<<<< HEAD
 8106c64:	4b2a      	ldr	r3, [pc, #168]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c68:	0a5b      	lsrs	r3, r3, #9
 8106c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c6e:	ee07 3a90 	vmov	s15, r3
 8106c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c8a:	ee17 2a90 	vmov	r2, s15
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	601a      	str	r2, [r3, #0]
=======
 8105916:	4b2a      	ldr	r3, [pc, #168]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810591a:	0a5b      	lsrs	r3, r3, #9
 810591c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105920:	ee07 3a90 	vmov	s15, r3
 8105924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810592c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105930:	edd7 6a07 	vldr	s13, [r7, #28]
 8105934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810593c:	ee17 2a90 	vmov	r2, s15
 8105940:	687b      	ldr	r3, [r7, #4]
 8105942:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
<<<<<<< HEAD
 8106c92:	4b1f      	ldr	r3, [pc, #124]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c96:	0c1b      	lsrs	r3, r3, #16
 8106c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c9c:	ee07 3a90 	vmov	s15, r3
 8106ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8106cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106cb8:	ee17 2a90 	vmov	r2, s15
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	605a      	str	r2, [r3, #4]
=======
 8105944:	4b1e      	ldr	r3, [pc, #120]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105948:	0c1b      	lsrs	r3, r3, #16
 810594a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810594e:	ee07 3a90 	vmov	s15, r3
 8105952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810595a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810595e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810596a:	ee17 2a90 	vmov	r2, s15
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
<<<<<<< HEAD
 8106cc0:	4b13      	ldr	r3, [pc, #76]	; (8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106cc4:	0e1b      	lsrs	r3, r3, #24
 8106cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106cca:	ee07 3a90 	vmov	s15, r3
 8106cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8106cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ce6:	ee17 2a90 	vmov	r2, s15
 8106cea:	687b      	ldr	r3, [r7, #4]
 8106cec:	609a      	str	r2, [r3, #8]
=======
 8105972:	4b13      	ldr	r3, [pc, #76]	; (81059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105976:	0e1b      	lsrs	r3, r3, #24
 8105978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810597c:	ee07 3a90 	vmov	s15, r3
 8105980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105988:	ee37 7a87 	vadd.f32	s14, s15, s14
 810598c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105998:	ee17 2a90 	vmov	r2, s15
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
<<<<<<< HEAD
 8106cee:	e008      	b.n	8106d02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
=======
 81059a0:	e008      	b.n	81059b4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL2_Clocks->PLL2_P_Frequency = 0U;
<<<<<<< HEAD
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	2200      	movs	r2, #0
 8106cf4:	601a      	str	r2, [r3, #0]
=======
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	2200      	movs	r2, #0
 81059a6:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
<<<<<<< HEAD
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	2200      	movs	r2, #0
 8106cfa:	605a      	str	r2, [r3, #4]
=======
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	2200      	movs	r2, #0
 81059ac:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL2_Clocks->PLL2_R_Frequency = 0U;
<<<<<<< HEAD
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	2200      	movs	r2, #0
 8106d00:	609a      	str	r2, [r3, #8]
=======
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	2200      	movs	r2, #0
 81059b2:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8106d02:	bf00      	nop
 8106d04:	3724      	adds	r7, #36	; 0x24
 8106d06:	46bd      	mov	sp, r7
 8106d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d0c:	4770      	bx	lr
 8106d0e:	bf00      	nop
 8106d10:	58024400 	.word	0x58024400
 8106d14:	03d09000 	.word	0x03d09000
 8106d18:	46000000 	.word	0x46000000
 8106d1c:	4c742400 	.word	0x4c742400
 8106d20:	4a742400 	.word	0x4a742400
 8106d24:	4bbebc20 	.word	0x4bbebc20
=======
 81059b4:	bf00      	nop
 81059b6:	3724      	adds	r7, #36	; 0x24
 81059b8:	46bd      	mov	sp, r7
 81059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059be:	4770      	bx	lr
 81059c0:	58024400 	.word	0x58024400
 81059c4:	03d09000 	.word	0x03d09000
 81059c8:	46000000 	.word	0x46000000
 81059cc:	4c742400 	.word	0x4c742400
 81059d0:	4a742400 	.word	0x4a742400
 81059d4:	4bbebc20 	.word	0x4bbebc20
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106d28 <HAL_RCCEx_GetPLL3ClockFreq>:
=======
081059d8 <HAL_RCCEx_GetPLL3ClockFreq>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
<<<<<<< HEAD
 8106d28:	b480      	push	{r7}
 8106d2a:	b089      	sub	sp, #36	; 0x24
 8106d2c:	af00      	add	r7, sp, #0
 8106d2e:	6078      	str	r0, [r7, #4]
=======
 81059d8:	b480      	push	{r7}
 81059da:	b089      	sub	sp, #36	; 0x24
 81059dc:	af00      	add	r7, sp, #0
 81059de:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< HEAD
 8106d30:	4ba1      	ldr	r3, [pc, #644]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d34:	f003 0303 	and.w	r3, r3, #3
 8106d38:	61bb      	str	r3, [r7, #24]
=======
 81059e0:	4b9d      	ldr	r3, [pc, #628]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059e4:	f003 0303 	and.w	r3, r3, #3
 81059e8:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
<<<<<<< HEAD
 8106d3a:	4b9f      	ldr	r3, [pc, #636]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d3e:	0d1b      	lsrs	r3, r3, #20
 8106d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106d44:	617b      	str	r3, [r7, #20]
=======
 81059ea:	4b9b      	ldr	r3, [pc, #620]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059ee:	0d1b      	lsrs	r3, r3, #20
 81059f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81059f4:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
<<<<<<< HEAD
 8106d46:	4b9c      	ldr	r3, [pc, #624]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d4a:	0a1b      	lsrs	r3, r3, #8
 8106d4c:	f003 0301 	and.w	r3, r3, #1
 8106d50:	613b      	str	r3, [r7, #16]
=======
 81059f6:	4b98      	ldr	r3, [pc, #608]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059fa:	0a1b      	lsrs	r3, r3, #8
 81059fc:	f003 0301 	and.w	r3, r3, #1
 8105a00:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
<<<<<<< HEAD
 8106d52:	4b99      	ldr	r3, [pc, #612]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d56:	08db      	lsrs	r3, r3, #3
 8106d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106d5c:	693a      	ldr	r2, [r7, #16]
 8106d5e:	fb02 f303 	mul.w	r3, r2, r3
 8106d62:	ee07 3a90 	vmov	s15, r3
 8106d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d6a:	edc7 7a03 	vstr	s15, [r7, #12]
=======
 8105a02:	4b95      	ldr	r3, [pc, #596]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105a06:	08db      	lsrs	r3, r3, #3
 8105a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105a0c:	693a      	ldr	r2, [r7, #16]
 8105a0e:	fb02 f303 	mul.w	r3, r2, r3
 8105a12:	ee07 3a90 	vmov	s15, r3
 8105a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a1a:	edc7 7a03 	vstr	s15, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if (pll3m != 0U)
<<<<<<< HEAD
 8106d6e:	697b      	ldr	r3, [r7, #20]
 8106d70:	2b00      	cmp	r3, #0
 8106d72:	f000 8111 	beq.w	8106f98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
=======
 8105a1e:	697b      	ldr	r3, [r7, #20]
 8105a20:	2b00      	cmp	r3, #0
 8105a22:	f000 810a 	beq.w	8105c3a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    switch (pllsource)
<<<<<<< HEAD
 8106d76:	69bb      	ldr	r3, [r7, #24]
 8106d78:	2b02      	cmp	r3, #2
 8106d7a:	f000 8083 	beq.w	8106e84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106d7e:	69bb      	ldr	r3, [r7, #24]
 8106d80:	2b02      	cmp	r3, #2
 8106d82:	f200 80a1 	bhi.w	8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106d86:	69bb      	ldr	r3, [r7, #24]
 8106d88:	2b00      	cmp	r3, #0
 8106d8a:	d003      	beq.n	8106d94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106d8c:	69bb      	ldr	r3, [r7, #24]
 8106d8e:	2b01      	cmp	r3, #1
 8106d90:	d056      	beq.n	8106e40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106d92:	e099      	b.n	8106ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
=======
 8105a26:	69bb      	ldr	r3, [r7, #24]
 8105a28:	2b01      	cmp	r3, #1
 8105a2a:	d05a      	beq.n	8105ae2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8105a2c:	2b01      	cmp	r3, #1
 8105a2e:	d302      	bcc.n	8105a36 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8105a30:	2b02      	cmp	r3, #2
 8105a32:	d078      	beq.n	8105b26 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8105a34:	e099      	b.n	8105b6a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 8106d94:	4b88      	ldr	r3, [pc, #544]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	f003 0320 	and.w	r3, r3, #32
 8106d9c:	2b00      	cmp	r3, #0
 8106d9e:	d02d      	beq.n	8106dfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
=======
 8105a36:	4b88      	ldr	r3, [pc, #544]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	f003 0320 	and.w	r3, r3, #32
 8105a3e:	2b00      	cmp	r3, #0
 8105a40:	d02d      	beq.n	8105a9e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
<<<<<<< HEAD
 8106da0:	4b85      	ldr	r3, [pc, #532]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106da2:	681b      	ldr	r3, [r3, #0]
 8106da4:	08db      	lsrs	r3, r3, #3
 8106da6:	f003 0303 	and.w	r3, r3, #3
 8106daa:	4a84      	ldr	r2, [pc, #528]	; (8106fbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106dac:	fa22 f303 	lsr.w	r3, r2, r3
 8106db0:	60bb      	str	r3, [r7, #8]
=======
 8105a42:	4b85      	ldr	r3, [pc, #532]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	08db      	lsrs	r3, r3, #3
 8105a48:	f003 0303 	and.w	r3, r3, #3
 8105a4c:	4a83      	ldr	r2, [pc, #524]	; (8105c5c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8105a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8105a52:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106db2:	68bb      	ldr	r3, [r7, #8]
 8106db4:	ee07 3a90 	vmov	s15, r3
 8106db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106dbc:	697b      	ldr	r3, [r7, #20]
 8106dbe:	ee07 3a90 	vmov	s15, r3
 8106dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106dca:	4b7b      	ldr	r3, [pc, #492]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106dd2:	ee07 3a90 	vmov	s15, r3
 8106dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8106dde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106df6:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8105a54:	68bb      	ldr	r3, [r7, #8]
 8105a56:	ee07 3a90 	vmov	s15, r3
 8105a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a5e:	697b      	ldr	r3, [r7, #20]
 8105a60:	ee07 3a90 	vmov	s15, r3
 8105a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a6c:	4b7a      	ldr	r3, [pc, #488]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a74:	ee07 3a90 	vmov	s15, r3
 8105a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a80:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a98:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
<<<<<<< HEAD
 8106dfa:	e087      	b.n	8106f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
=======
 8105a9c:	e087      	b.n	8105bae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106dfc:	697b      	ldr	r3, [r7, #20]
 8106dfe:	ee07 3a90 	vmov	s15, r3
 8106e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e0e:	4b6a      	ldr	r3, [pc, #424]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e16:	ee07 3a90 	vmov	s15, r3
 8106e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e3a:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8105a9e:	697b      	ldr	r3, [r7, #20]
 8105aa0:	ee07 3a90 	vmov	s15, r3
 8105aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aa8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105c64 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8105aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ab0:	4b69      	ldr	r3, [pc, #420]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ab8:	ee07 3a90 	vmov	s15, r3
 8105abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ac0:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ac4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105adc:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      break;
<<<<<<< HEAD
 8106e3e:	e065      	b.n	8106f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
=======
 8105ae0:	e065      	b.n	8105bae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106e40:	697b      	ldr	r3, [r7, #20]
 8106e42:	ee07 3a90 	vmov	s15, r3
 8106e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e52:	4b59      	ldr	r3, [pc, #356]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e5a:	ee07 3a90 	vmov	s15, r3
 8106e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e7e:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8105ae2:	697b      	ldr	r3, [r7, #20]
 8105ae4:	ee07 3a90 	vmov	s15, r3
 8105ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8105af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105af4:	4b58      	ldr	r3, [pc, #352]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105afc:	ee07 3a90 	vmov	s15, r3
 8105b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b04:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b08:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b20:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      break;
<<<<<<< HEAD
 8106e82:	e043      	b.n	8106f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
=======
 8105b24:	e043      	b.n	8105bae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106e84:	697b      	ldr	r3, [r7, #20]
 8106e86:	ee07 3a90 	vmov	s15, r3
 8106e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e96:	4b48      	ldr	r3, [pc, #288]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e9e:	ee07 3a90 	vmov	s15, r3
 8106ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106eaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ec2:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8105b26:	697b      	ldr	r3, [r7, #20]
 8105b28:	ee07 3a90 	vmov	s15, r3
 8105b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8105c6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8105b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b38:	4b47      	ldr	r3, [pc, #284]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b40:	ee07 3a90 	vmov	s15, r3
 8105b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b64:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      break;
<<<<<<< HEAD
 8106ec6:	e021      	b.n	8106f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
=======
 8105b68:	e021      	b.n	8105bae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
<<<<<<< HEAD
 8106ec8:	697b      	ldr	r3, [r7, #20]
 8106eca:	ee07 3a90 	vmov	s15, r3
 8106ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ed2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106eda:	4b37      	ldr	r3, [pc, #220]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ee2:	ee07 3a90 	vmov	s15, r3
 8106ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8106eee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106f06:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8105b6a:	697b      	ldr	r3, [r7, #20]
 8105b6c:	ee07 3a90 	vmov	s15, r3
 8105b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b74:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8105c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8105b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b7c:	4b36      	ldr	r3, [pc, #216]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b84:	ee07 3a90 	vmov	s15, r3
 8105b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b90:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105c60 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ba8:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      break;
<<<<<<< HEAD
 8106f0a:	bf00      	nop
=======
 8105bac:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
<<<<<<< HEAD
 8106f0c:	4b2a      	ldr	r3, [pc, #168]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106f10:	0a5b      	lsrs	r3, r3, #9
 8106f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106f16:	ee07 3a90 	vmov	s15, r3
 8106f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f32:	ee17 2a90 	vmov	r2, s15
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	601a      	str	r2, [r3, #0]
=======
 8105bae:	4b2a      	ldr	r3, [pc, #168]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105bb2:	0a5b      	lsrs	r3, r3, #9
 8105bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105bb8:	ee07 3a90 	vmov	s15, r3
 8105bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105bc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8105bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105bd4:	ee17 2a90 	vmov	r2, s15
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
<<<<<<< HEAD
 8106f3a:	4b1f      	ldr	r3, [pc, #124]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106f3e:	0c1b      	lsrs	r3, r3, #16
 8106f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106f44:	ee07 3a90 	vmov	s15, r3
 8106f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f60:	ee17 2a90 	vmov	r2, s15
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	605a      	str	r2, [r3, #4]
=======
 8105bdc:	4b1e      	ldr	r3, [pc, #120]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105be0:	0c1b      	lsrs	r3, r3, #16
 8105be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105be6:	ee07 3a90 	vmov	s15, r3
 8105bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8105bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c02:	ee17 2a90 	vmov	r2, s15
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
<<<<<<< HEAD
 8106f68:	4b13      	ldr	r3, [pc, #76]	; (8106fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106f6c:	0e1b      	lsrs	r3, r3, #24
 8106f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106f72:	ee07 3a90 	vmov	s15, r3
 8106f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f8e:	ee17 2a90 	vmov	r2, s15
 8106f92:	687b      	ldr	r3, [r7, #4]
 8106f94:	609a      	str	r2, [r3, #8]
=======
 8105c0a:	4b13      	ldr	r3, [pc, #76]	; (8105c58 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c0e:	0e1b      	lsrs	r3, r3, #24
 8105c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c14:	ee07 3a90 	vmov	s15, r3
 8105c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105c20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105c24:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c30:	ee17 2a90 	vmov	r2, s15
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
<<<<<<< HEAD
 8106f96:	e008      	b.n	8106faa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
=======
 8105c38:	e008      	b.n	8105c4c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL3_Clocks->PLL3_P_Frequency = 0U;
<<<<<<< HEAD
 8106f98:	687b      	ldr	r3, [r7, #4]
 8106f9a:	2200      	movs	r2, #0
 8106f9c:	601a      	str	r2, [r3, #0]
=======
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	2200      	movs	r2, #0
 8105c3e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
<<<<<<< HEAD
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	2200      	movs	r2, #0
 8106fa2:	605a      	str	r2, [r3, #4]
=======
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	2200      	movs	r2, #0
 8105c44:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    PLL3_Clocks->PLL3_R_Frequency = 0U;
<<<<<<< HEAD
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	2200      	movs	r2, #0
 8106fa8:	609a      	str	r2, [r3, #8]
=======
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	2200      	movs	r2, #0
 8105c4a:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8106faa:	bf00      	nop
 8106fac:	3724      	adds	r7, #36	; 0x24
 8106fae:	46bd      	mov	sp, r7
 8106fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fb4:	4770      	bx	lr
 8106fb6:	bf00      	nop
 8106fb8:	58024400 	.word	0x58024400
 8106fbc:	03d09000 	.word	0x03d09000
 8106fc0:	46000000 	.word	0x46000000
 8106fc4:	4c742400 	.word	0x4c742400
 8106fc8:	4a742400 	.word	0x4a742400
 8106fcc:	4bbebc20 	.word	0x4bbebc20
=======
 8105c4c:	bf00      	nop
 8105c4e:	3724      	adds	r7, #36	; 0x24
 8105c50:	46bd      	mov	sp, r7
 8105c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c56:	4770      	bx	lr
 8105c58:	58024400 	.word	0x58024400
 8105c5c:	03d09000 	.word	0x03d09000
 8105c60:	46000000 	.word	0x46000000
 8105c64:	4c742400 	.word	0x4c742400
 8105c68:	4a742400 	.word	0x4a742400
 8105c6c:	4bbebc20 	.word	0x4bbebc20
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08106fd0 <HAL_SPI_Init>:
=======
08105c70 <HAL_SPI_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8106fd0:	b580      	push	{r7, lr}
 8106fd2:	b084      	sub	sp, #16
 8106fd4:	af00      	add	r7, sp, #0
 8106fd6:	6078      	str	r0, [r7, #4]
=======
 8105c70:	b580      	push	{r7, lr}
 8105c72:	b084      	sub	sp, #16
 8105c74:	af00      	add	r7, sp, #0
 8105c76:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t crc_length = 0UL;
<<<<<<< HEAD
 8106fd8:	2300      	movs	r3, #0
 8106fda:	60fb      	str	r3, [r7, #12]
=======
 8105c78:	2300      	movs	r3, #0
 8105c7a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< HEAD
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	2b00      	cmp	r3, #0
 8106fe0:	d101      	bne.n	8106fe6 <HAL_SPI_Init+0x16>
=======
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	2b00      	cmp	r3, #0
 8105c80:	d101      	bne.n	8105c86 <HAL_SPI_Init+0x16>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8106fe2:	2301      	movs	r3, #1
 8106fe4:	e0e2      	b.n	81071ac <HAL_SPI_Init+0x1dc>
=======
 8105c82:	2301      	movs	r3, #1
 8105c84:	e0e2      	b.n	8105e4c <HAL_SPI_Init+0x1dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	2200      	movs	r2, #0
 8106fea:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8105c86:	687b      	ldr	r3, [r7, #4]
 8105c88:	2200      	movs	r2, #0
 8105c8a:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
<<<<<<< HEAD
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	681b      	ldr	r3, [r3, #0]
 8106ff0:	4a70      	ldr	r2, [pc, #448]	; (81071b4 <HAL_SPI_Init+0x1e4>)
 8106ff2:	4293      	cmp	r3, r2
 8106ff4:	d00f      	beq.n	8107016 <HAL_SPI_Init+0x46>
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	681b      	ldr	r3, [r3, #0]
 8106ffa:	4a6f      	ldr	r2, [pc, #444]	; (81071b8 <HAL_SPI_Init+0x1e8>)
 8106ffc:	4293      	cmp	r3, r2
 8106ffe:	d00a      	beq.n	8107016 <HAL_SPI_Init+0x46>
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	4a6d      	ldr	r2, [pc, #436]	; (81071bc <HAL_SPI_Init+0x1ec>)
 8107006:	4293      	cmp	r3, r2
 8107008:	d005      	beq.n	8107016 <HAL_SPI_Init+0x46>
 810700a:	687b      	ldr	r3, [r7, #4]
 810700c:	68db      	ldr	r3, [r3, #12]
 810700e:	2b0f      	cmp	r3, #15
 8107010:	d901      	bls.n	8107016 <HAL_SPI_Init+0x46>
=======
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	681b      	ldr	r3, [r3, #0]
 8105c90:	4a70      	ldr	r2, [pc, #448]	; (8105e54 <HAL_SPI_Init+0x1e4>)
 8105c92:	4293      	cmp	r3, r2
 8105c94:	d00f      	beq.n	8105cb6 <HAL_SPI_Init+0x46>
 8105c96:	687b      	ldr	r3, [r7, #4]
 8105c98:	681b      	ldr	r3, [r3, #0]
 8105c9a:	4a6f      	ldr	r2, [pc, #444]	; (8105e58 <HAL_SPI_Init+0x1e8>)
 8105c9c:	4293      	cmp	r3, r2
 8105c9e:	d00a      	beq.n	8105cb6 <HAL_SPI_Init+0x46>
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	681b      	ldr	r3, [r3, #0]
 8105ca4:	4a6d      	ldr	r2, [pc, #436]	; (8105e5c <HAL_SPI_Init+0x1ec>)
 8105ca6:	4293      	cmp	r3, r2
 8105ca8:	d005      	beq.n	8105cb6 <HAL_SPI_Init+0x46>
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	68db      	ldr	r3, [r3, #12]
 8105cae:	2b0f      	cmp	r3, #15
 8105cb0:	d901      	bls.n	8105cb6 <HAL_SPI_Init+0x46>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8107012:	2301      	movs	r3, #1
 8107014:	e0ca      	b.n	81071ac <HAL_SPI_Init+0x1dc>
=======
 8105cb2:	2301      	movs	r3, #1
 8105cb4:	e0ca      	b.n	8105e4c <HAL_SPI_Init+0x1dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
<<<<<<< HEAD
 8107016:	6878      	ldr	r0, [r7, #4]
 8107018:	f000 fb94 	bl	8107744 <SPI_GetPacketSize>
 810701c:	60b8      	str	r0, [r7, #8]
=======
 8105cb6:	6878      	ldr	r0, [r7, #4]
 8105cb8:	f000 fb96 	bl	81063e8 <SPI_GetPacketSize>
 8105cbc:	60b8      	str	r0, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
<<<<<<< HEAD
 810701e:	687b      	ldr	r3, [r7, #4]
 8107020:	681b      	ldr	r3, [r3, #0]
 8107022:	4a64      	ldr	r2, [pc, #400]	; (81071b4 <HAL_SPI_Init+0x1e4>)
 8107024:	4293      	cmp	r3, r2
 8107026:	d00c      	beq.n	8107042 <HAL_SPI_Init+0x72>
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	681b      	ldr	r3, [r3, #0]
 810702c:	4a62      	ldr	r2, [pc, #392]	; (81071b8 <HAL_SPI_Init+0x1e8>)
 810702e:	4293      	cmp	r3, r2
 8107030:	d007      	beq.n	8107042 <HAL_SPI_Init+0x72>
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	681b      	ldr	r3, [r3, #0]
 8107036:	4a61      	ldr	r2, [pc, #388]	; (81071bc <HAL_SPI_Init+0x1ec>)
 8107038:	4293      	cmp	r3, r2
 810703a:	d002      	beq.n	8107042 <HAL_SPI_Init+0x72>
 810703c:	68bb      	ldr	r3, [r7, #8]
 810703e:	2b08      	cmp	r3, #8
 8107040:	d811      	bhi.n	8107066 <HAL_SPI_Init+0x96>
=======
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	681b      	ldr	r3, [r3, #0]
 8105cc2:	4a64      	ldr	r2, [pc, #400]	; (8105e54 <HAL_SPI_Init+0x1e4>)
 8105cc4:	4293      	cmp	r3, r2
 8105cc6:	d00c      	beq.n	8105ce2 <HAL_SPI_Init+0x72>
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	4a62      	ldr	r2, [pc, #392]	; (8105e58 <HAL_SPI_Init+0x1e8>)
 8105cce:	4293      	cmp	r3, r2
 8105cd0:	d007      	beq.n	8105ce2 <HAL_SPI_Init+0x72>
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	681b      	ldr	r3, [r3, #0]
 8105cd6:	4a61      	ldr	r2, [pc, #388]	; (8105e5c <HAL_SPI_Init+0x1ec>)
 8105cd8:	4293      	cmp	r3, r2
 8105cda:	d002      	beq.n	8105ce2 <HAL_SPI_Init+0x72>
 8105cdc:	68bb      	ldr	r3, [r7, #8]
 8105cde:	2b08      	cmp	r3, #8
 8105ce0:	d811      	bhi.n	8105d06 <HAL_SPI_Init+0x96>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
<<<<<<< HEAD
 8107042:	687b      	ldr	r3, [r7, #4]
 8107044:	681b      	ldr	r3, [r3, #0]
=======
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	681b      	ldr	r3, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
<<<<<<< HEAD
 8107046:	4a5b      	ldr	r2, [pc, #364]	; (81071b4 <HAL_SPI_Init+0x1e4>)
 8107048:	4293      	cmp	r3, r2
 810704a:	d009      	beq.n	8107060 <HAL_SPI_Init+0x90>
=======
 8105ce6:	4a5b      	ldr	r2, [pc, #364]	; (8105e54 <HAL_SPI_Init+0x1e4>)
 8105ce8:	4293      	cmp	r3, r2
 8105cea:	d009      	beq.n	8105d00 <HAL_SPI_Init+0x90>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
<<<<<<< HEAD
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	681b      	ldr	r3, [r3, #0]
 8107050:	4a59      	ldr	r2, [pc, #356]	; (81071b8 <HAL_SPI_Init+0x1e8>)
 8107052:	4293      	cmp	r3, r2
 8107054:	d004      	beq.n	8107060 <HAL_SPI_Init+0x90>
 8107056:	687b      	ldr	r3, [r7, #4]
 8107058:	681b      	ldr	r3, [r3, #0]
 810705a:	4a58      	ldr	r2, [pc, #352]	; (81071bc <HAL_SPI_Init+0x1ec>)
 810705c:	4293      	cmp	r3, r2
 810705e:	d104      	bne.n	810706a <HAL_SPI_Init+0x9a>
 8107060:	68bb      	ldr	r3, [r7, #8]
 8107062:	2b10      	cmp	r3, #16
 8107064:	d901      	bls.n	810706a <HAL_SPI_Init+0x9a>
=======
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	681b      	ldr	r3, [r3, #0]
 8105cf0:	4a59      	ldr	r2, [pc, #356]	; (8105e58 <HAL_SPI_Init+0x1e8>)
 8105cf2:	4293      	cmp	r3, r2
 8105cf4:	d004      	beq.n	8105d00 <HAL_SPI_Init+0x90>
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	4a58      	ldr	r2, [pc, #352]	; (8105e5c <HAL_SPI_Init+0x1ec>)
 8105cfc:	4293      	cmp	r3, r2
 8105cfe:	d104      	bne.n	8105d0a <HAL_SPI_Init+0x9a>
 8105d00:	68bb      	ldr	r3, [r7, #8]
 8105d02:	2b10      	cmp	r3, #16
 8105d04:	d901      	bls.n	8105d0a <HAL_SPI_Init+0x9a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8107066:	2301      	movs	r3, #1
 8107068:	e0a0      	b.n	81071ac <HAL_SPI_Init+0x1dc>
=======
 8105d06:	2301      	movs	r3, #1
 8105d08:	e0a0      	b.n	8105e4c <HAL_SPI_Init+0x1dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
<<<<<<< HEAD
 810706a:	687b      	ldr	r3, [r7, #4]
 810706c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107070:	b2db      	uxtb	r3, r3
 8107072:	2b00      	cmp	r3, #0
 8107074:	d106      	bne.n	8107084 <HAL_SPI_Init+0xb4>
=======
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105d10:	b2db      	uxtb	r3, r3
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d106      	bne.n	8105d24 <HAL_SPI_Init+0xb4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	2200      	movs	r2, #0
 810707a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
=======
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	2200      	movs	r2, #0
 8105d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 810707e:	6878      	ldr	r0, [r7, #4]
 8107080:	f7fa fcca 	bl	8101a18 <HAL_SPI_MspInit>
=======
 8105d1e:	6878      	ldr	r0, [r7, #4]
 8105d20:	f7fb fe20 	bl	8101964 <HAL_SPI_MspInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	2202      	movs	r2, #2
 8107088:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
=======
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	2202      	movs	r2, #2
 8105d28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
<<<<<<< HEAD
 810708c:	687b      	ldr	r3, [r7, #4]
 810708e:	681b      	ldr	r3, [r3, #0]
 8107090:	681a      	ldr	r2, [r3, #0]
 8107092:	687b      	ldr	r3, [r7, #4]
 8107094:	681b      	ldr	r3, [r3, #0]
 8107096:	f022 0201 	bic.w	r2, r2, #1
 810709a:	601a      	str	r2, [r3, #0]
=======
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	681a      	ldr	r2, [r3, #0]
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	681b      	ldr	r3, [r3, #0]
 8105d36:	f022 0201 	bic.w	r2, r2, #1
 8105d3a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
<<<<<<< HEAD
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	699b      	ldr	r3, [r3, #24]
 81070a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81070a4:	d110      	bne.n	81070c8 <HAL_SPI_Init+0xf8>
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	685b      	ldr	r3, [r3, #4]
 81070aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81070ae:	d10b      	bne.n	81070c8 <HAL_SPI_Init+0xf8>
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81070b4:	2b00      	cmp	r3, #0
 81070b6:	d107      	bne.n	81070c8 <HAL_SPI_Init+0xf8>
=======
 8105d3c:	687b      	ldr	r3, [r7, #4]
 8105d3e:	699b      	ldr	r3, [r3, #24]
 8105d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105d44:	d110      	bne.n	8105d68 <HAL_SPI_Init+0xf8>
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	685b      	ldr	r3, [r3, #4]
 8105d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d4e:	d10b      	bne.n	8105d68 <HAL_SPI_Init+0xf8>
 8105d50:	687b      	ldr	r3, [r7, #4]
 8105d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105d54:	2b00      	cmp	r3, #0
 8105d56:	d107      	bne.n	8105d68 <HAL_SPI_Init+0xf8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
<<<<<<< HEAD
 81070b8:	687b      	ldr	r3, [r7, #4]
 81070ba:	681b      	ldr	r3, [r3, #0]
 81070bc:	681a      	ldr	r2, [r3, #0]
 81070be:	687b      	ldr	r3, [r7, #4]
 81070c0:	681b      	ldr	r3, [r3, #0]
 81070c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81070c6:	601a      	str	r2, [r3, #0]
=======
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	681a      	ldr	r2, [r3, #0]
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8105d66:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
<<<<<<< HEAD
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	69da      	ldr	r2, [r3, #28]
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81070d0:	431a      	orrs	r2, r3
 81070d2:	68fb      	ldr	r3, [r7, #12]
 81070d4:	431a      	orrs	r2, r3
 81070d6:	687b      	ldr	r3, [r7, #4]
 81070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81070da:	ea42 0103 	orr.w	r1, r2, r3
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	68da      	ldr	r2, [r3, #12]
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	430a      	orrs	r2, r1
 81070e8:	609a      	str	r2, [r3, #8]
=======
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	69da      	ldr	r2, [r3, #28]
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d70:	431a      	orrs	r2, r3
 8105d72:	68fb      	ldr	r3, [r7, #12]
 8105d74:	431a      	orrs	r2, r3
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105d7a:	ea42 0103 	orr.w	r1, r2, r3
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	68da      	ldr	r2, [r3, #12]
 8105d82:	687b      	ldr	r3, [r7, #4]
 8105d84:	681b      	ldr	r3, [r3, #0]
 8105d86:	430a      	orrs	r2, r1
 8105d88:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
<<<<<<< HEAD
 81070ea:	687b      	ldr	r3, [r7, #4]
 81070ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81070f2:	431a      	orrs	r2, r3
 81070f4:	687b      	ldr	r3, [r7, #4]
 81070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81070f8:	431a      	orrs	r2, r3
 81070fa:	687b      	ldr	r3, [r7, #4]
 81070fc:	699b      	ldr	r3, [r3, #24]
 81070fe:	431a      	orrs	r2, r3
 8107100:	687b      	ldr	r3, [r7, #4]
 8107102:	691b      	ldr	r3, [r3, #16]
 8107104:	431a      	orrs	r2, r3
 8107106:	687b      	ldr	r3, [r7, #4]
 8107108:	695b      	ldr	r3, [r3, #20]
 810710a:	431a      	orrs	r2, r3
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	6a1b      	ldr	r3, [r3, #32]
 8107110:	431a      	orrs	r2, r3
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	685b      	ldr	r3, [r3, #4]
 8107116:	431a      	orrs	r2, r3
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810711c:	431a      	orrs	r2, r3
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	689b      	ldr	r3, [r3, #8]
 8107122:	431a      	orrs	r2, r3
 8107124:	687b      	ldr	r3, [r7, #4]
 8107126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107128:	ea42 0103 	orr.w	r1, r2, r3
 810712c:	687b      	ldr	r3, [r7, #4]
 810712e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8107130:	687b      	ldr	r3, [r7, #4]
 8107132:	681b      	ldr	r3, [r3, #0]
 8107134:	430a      	orrs	r2, r1
 8107136:	60da      	str	r2, [r3, #12]
=======
 8105d8a:	687b      	ldr	r3, [r7, #4]
 8105d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d92:	431a      	orrs	r2, r3
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105d98:	431a      	orrs	r2, r3
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	699b      	ldr	r3, [r3, #24]
 8105d9e:	431a      	orrs	r2, r3
 8105da0:	687b      	ldr	r3, [r7, #4]
 8105da2:	691b      	ldr	r3, [r3, #16]
 8105da4:	431a      	orrs	r2, r3
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	695b      	ldr	r3, [r3, #20]
 8105daa:	431a      	orrs	r2, r3
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	6a1b      	ldr	r3, [r3, #32]
 8105db0:	431a      	orrs	r2, r3
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	685b      	ldr	r3, [r3, #4]
 8105db6:	431a      	orrs	r2, r3
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105dbc:	431a      	orrs	r2, r3
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	689b      	ldr	r3, [r3, #8]
 8105dc2:	431a      	orrs	r2, r3
 8105dc4:	687b      	ldr	r3, [r7, #4]
 8105dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105dc8:	ea42 0103 	orr.w	r1, r2, r3
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	681b      	ldr	r3, [r3, #0]
 8105dd4:	430a      	orrs	r2, r1
 8105dd6:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
<<<<<<< HEAD
 8107138:	687b      	ldr	r3, [r7, #4]
 810713a:	685b      	ldr	r3, [r3, #4]
 810713c:	2b00      	cmp	r3, #0
 810713e:	d113      	bne.n	8107168 <HAL_SPI_Init+0x198>
=======
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	685b      	ldr	r3, [r3, #4]
 8105ddc:	2b00      	cmp	r3, #0
 8105dde:	d113      	bne.n	8105e08 <HAL_SPI_Init+0x198>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
<<<<<<< HEAD
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	681b      	ldr	r3, [r3, #0]
 8107144:	689b      	ldr	r3, [r3, #8]
 8107146:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	681b      	ldr	r3, [r3, #0]
 810714e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107152:	609a      	str	r2, [r3, #8]
=======
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	689b      	ldr	r3, [r3, #8]
 8105de6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	681b      	ldr	r3, [r3, #0]
 8105dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105df2:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
<<<<<<< HEAD
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	689b      	ldr	r3, [r3, #8]
 810715a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	681b      	ldr	r3, [r3, #0]
 8107162:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8107166:	609a      	str	r2, [r3, #8]
=======
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	681b      	ldr	r3, [r3, #0]
 8105df8:	689b      	ldr	r3, [r3, #8]
 8105dfa:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8105e06:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8107168:	687b      	ldr	r3, [r7, #4]
 810716a:	681b      	ldr	r3, [r3, #0]
 810716c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	681b      	ldr	r3, [r3, #0]
 8107172:	f022 0201 	bic.w	r2, r2, #1
 8107176:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	681b      	ldr	r3, [r3, #0]
 8105e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	681b      	ldr	r3, [r3, #0]
 8105e12:	f022 0201 	bic.w	r2, r2, #1
 8105e16:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
<<<<<<< HEAD
 8107178:	687b      	ldr	r3, [r7, #4]
 810717a:	685b      	ldr	r3, [r3, #4]
 810717c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8107180:	2b00      	cmp	r3, #0
 8107182:	d00a      	beq.n	810719a <HAL_SPI_Init+0x1ca>
=======
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	685b      	ldr	r3, [r3, #4]
 8105e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105e20:	2b00      	cmp	r3, #0
 8105e22:	d00a      	beq.n	8105e3a <HAL_SPI_Init+0x1ca>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
<<<<<<< HEAD
 8107184:	687b      	ldr	r3, [r7, #4]
 8107186:	681b      	ldr	r3, [r3, #0]
 8107188:	68db      	ldr	r3, [r3, #12]
 810718a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810718e:	687b      	ldr	r3, [r7, #4]
 8107190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107192:	687b      	ldr	r3, [r7, #4]
 8107194:	681b      	ldr	r3, [r3, #0]
 8107196:	430a      	orrs	r2, r1
 8107198:	60da      	str	r2, [r3, #12]
=======
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	681b      	ldr	r3, [r3, #0]
 8105e28:	68db      	ldr	r3, [r3, #12]
 8105e2a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8105e2e:	687b      	ldr	r3, [r7, #4]
 8105e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	681b      	ldr	r3, [r3, #0]
 8105e36:	430a      	orrs	r2, r1
 8105e38:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	2200      	movs	r2, #0
 810719e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	2200      	movs	r2, #0
 8105e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  hspi->State     = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	2201      	movs	r2, #1
 81071a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
=======
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	2201      	movs	r2, #1
 8105e46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return HAL_OK;
<<<<<<< HEAD
 81071aa:	2300      	movs	r3, #0
=======
 8105e4a:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81071ac:	4618      	mov	r0, r3
 81071ae:	3710      	adds	r7, #16
 81071b0:	46bd      	mov	sp, r7
 81071b2:	bd80      	pop	{r7, pc}
 81071b4:	40013000 	.word	0x40013000
 81071b8:	40003800 	.word	0x40003800
 81071bc:	40003c00 	.word	0x40003c00
=======
 8105e4c:	4618      	mov	r0, r3
 8105e4e:	3710      	adds	r7, #16
 8105e50:	46bd      	mov	sp, r7
 8105e52:	bd80      	pop	{r7, pc}
 8105e54:	40013000 	.word	0x40013000
 8105e58:	40003800 	.word	0x40003800
 8105e5c:	40003c00 	.word	0x40003c00
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081071c0 <HAL_SPI_IRQHandler>:
=======
08105e60 <HAL_SPI_IRQHandler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 81071c0:	b580      	push	{r7, lr}
 81071c2:	b08a      	sub	sp, #40	; 0x28
 81071c4:	af00      	add	r7, sp, #0
 81071c6:	6078      	str	r0, [r7, #4]
=======
 8105e60:	b580      	push	{r7, lr}
 8105e62:	b08a      	sub	sp, #40	; 0x28
 8105e64:	af00      	add	r7, sp, #0
 8105e66:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t itsource = hspi->Instance->IER;
<<<<<<< HEAD
 81071c8:	687b      	ldr	r3, [r7, #4]
 81071ca:	681b      	ldr	r3, [r3, #0]
 81071cc:	691b      	ldr	r3, [r3, #16]
 81071ce:	623b      	str	r3, [r7, #32]
=======
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	681b      	ldr	r3, [r3, #0]
 8105e6c:	691b      	ldr	r3, [r3, #16]
 8105e6e:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t itflag   = hspi->Instance->SR;
<<<<<<< HEAD
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	681b      	ldr	r3, [r3, #0]
 81071d4:	695b      	ldr	r3, [r3, #20]
 81071d6:	61fb      	str	r3, [r7, #28]
=======
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	695b      	ldr	r3, [r3, #20]
 8105e76:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t trigger  = itsource & itflag;
<<<<<<< HEAD
 81071d8:	6a3a      	ldr	r2, [r7, #32]
 81071da:	69fb      	ldr	r3, [r7, #28]
 81071dc:	4013      	ands	r3, r2
 81071de:	61bb      	str	r3, [r7, #24]
=======
 8105e78:	6a3a      	ldr	r2, [r7, #32]
 8105e7a:	69fb      	ldr	r3, [r7, #28]
 8105e7c:	4013      	ands	r3, r2
 8105e7e:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t cfg1     = hspi->Instance->CFG1;
<<<<<<< HEAD
 81071e0:	687b      	ldr	r3, [r7, #4]
 81071e2:	681b      	ldr	r3, [r3, #0]
 81071e4:	689b      	ldr	r3, [r3, #8]
 81071e6:	617b      	str	r3, [r7, #20]
=======
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	681b      	ldr	r3, [r3, #0]
 8105e84:	689b      	ldr	r3, [r3, #8]
 8105e86:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t handled  = 0UL;
<<<<<<< HEAD
 81071e8:	2300      	movs	r3, #0
 81071ea:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8105e88:	2300      	movs	r3, #0
 8105e8a:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  HAL_SPI_StateTypeDef State = hspi->State;
<<<<<<< HEAD
 81071ec:	687b      	ldr	r3, [r7, #4]
 81071ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81071f2:	74fb      	strb	r3, [r7, #19]
=======
 8105e8c:	687b      	ldr	r3, [r7, #4]
 8105e8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105e92:	74fb      	strb	r3, [r7, #19]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
<<<<<<< HEAD
 81071f4:	687b      	ldr	r3, [r7, #4]
 81071f6:	681b      	ldr	r3, [r3, #0]
 81071f8:	3330      	adds	r3, #48	; 0x30
 81071fa:	60fb      	str	r3, [r7, #12]
=======
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	3330      	adds	r3, #48	; 0x30
 8105e9a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
<<<<<<< HEAD
 81071fc:	69bb      	ldr	r3, [r7, #24]
 81071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107202:	2b00      	cmp	r3, #0
 8107204:	d113      	bne.n	810722e <HAL_SPI_IRQHandler+0x6e>
 8107206:	69bb      	ldr	r3, [r7, #24]
 8107208:	f003 0320 	and.w	r3, r3, #32
 810720c:	2b00      	cmp	r3, #0
 810720e:	d10e      	bne.n	810722e <HAL_SPI_IRQHandler+0x6e>
 8107210:	69bb      	ldr	r3, [r7, #24]
 8107212:	f003 0304 	and.w	r3, r3, #4
 8107216:	2b00      	cmp	r3, #0
 8107218:	d009      	beq.n	810722e <HAL_SPI_IRQHandler+0x6e>
=======
 8105e9c:	69bb      	ldr	r3, [r7, #24]
 8105e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105ea2:	2b00      	cmp	r3, #0
 8105ea4:	d113      	bne.n	8105ece <HAL_SPI_IRQHandler+0x6e>
 8105ea6:	69bb      	ldr	r3, [r7, #24]
 8105ea8:	f003 0320 	and.w	r3, r3, #32
 8105eac:	2b00      	cmp	r3, #0
 8105eae:	d10e      	bne.n	8105ece <HAL_SPI_IRQHandler+0x6e>
 8105eb0:	69bb      	ldr	r3, [r7, #24]
 8105eb2:	f003 0304 	and.w	r3, r3, #4
 8105eb6:	2b00      	cmp	r3, #0
 8105eb8:	d009      	beq.n	8105ece <HAL_SPI_IRQHandler+0x6e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    hspi->TxISR(hspi);
<<<<<<< HEAD
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810721e:	6878      	ldr	r0, [r7, #4]
 8107220:	4798      	blx	r3
=======
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105ebe:	6878      	ldr	r0, [r7, #4]
 8105ec0:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hspi->RxISR(hspi);
<<<<<<< HEAD
 8107222:	687b      	ldr	r3, [r7, #4]
 8107224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107226:	6878      	ldr	r0, [r7, #4]
 8107228:	4798      	blx	r3
=======
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ec6:	6878      	ldr	r0, [r7, #4]
 8105ec8:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    handled = 1UL;
<<<<<<< HEAD
 810722a:	2301      	movs	r3, #1
 810722c:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8105eca:	2301      	movs	r3, #1
 8105ecc:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
<<<<<<< HEAD
 810722e:	69bb      	ldr	r3, [r7, #24]
 8107230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107234:	2b00      	cmp	r3, #0
 8107236:	d10f      	bne.n	8107258 <HAL_SPI_IRQHandler+0x98>
 8107238:	69bb      	ldr	r3, [r7, #24]
 810723a:	f003 0301 	and.w	r3, r3, #1
 810723e:	2b00      	cmp	r3, #0
 8107240:	d00a      	beq.n	8107258 <HAL_SPI_IRQHandler+0x98>
 8107242:	69bb      	ldr	r3, [r7, #24]
 8107244:	f003 0304 	and.w	r3, r3, #4
 8107248:	2b00      	cmp	r3, #0
 810724a:	d105      	bne.n	8107258 <HAL_SPI_IRQHandler+0x98>
=======
 8105ece:	69bb      	ldr	r3, [r7, #24]
 8105ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d10f      	bne.n	8105ef8 <HAL_SPI_IRQHandler+0x98>
 8105ed8:	69bb      	ldr	r3, [r7, #24]
 8105eda:	f003 0301 	and.w	r3, r3, #1
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	d00a      	beq.n	8105ef8 <HAL_SPI_IRQHandler+0x98>
 8105ee2:	69bb      	ldr	r3, [r7, #24]
 8105ee4:	f003 0304 	and.w	r3, r3, #4
 8105ee8:	2b00      	cmp	r3, #0
 8105eea:	d105      	bne.n	8105ef8 <HAL_SPI_IRQHandler+0x98>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    hspi->RxISR(hspi);
<<<<<<< HEAD
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107250:	6878      	ldr	r0, [r7, #4]
 8107252:	4798      	blx	r3
=======
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ef0:	6878      	ldr	r0, [r7, #4]
 8105ef2:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    handled = 1UL;
<<<<<<< HEAD
 8107254:	2301      	movs	r3, #1
 8107256:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8105ef4:	2301      	movs	r3, #1
 8105ef6:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
<<<<<<< HEAD
 8107258:	69bb      	ldr	r3, [r7, #24]
 810725a:	f003 0320 	and.w	r3, r3, #32
 810725e:	2b00      	cmp	r3, #0
 8107260:	d10f      	bne.n	8107282 <HAL_SPI_IRQHandler+0xc2>
 8107262:	69bb      	ldr	r3, [r7, #24]
 8107264:	f003 0302 	and.w	r3, r3, #2
 8107268:	2b00      	cmp	r3, #0
 810726a:	d00a      	beq.n	8107282 <HAL_SPI_IRQHandler+0xc2>
 810726c:	69bb      	ldr	r3, [r7, #24]
 810726e:	f003 0304 	and.w	r3, r3, #4
 8107272:	2b00      	cmp	r3, #0
 8107274:	d105      	bne.n	8107282 <HAL_SPI_IRQHandler+0xc2>
=======
 8105ef8:	69bb      	ldr	r3, [r7, #24]
 8105efa:	f003 0320 	and.w	r3, r3, #32
 8105efe:	2b00      	cmp	r3, #0
 8105f00:	d10f      	bne.n	8105f22 <HAL_SPI_IRQHandler+0xc2>
 8105f02:	69bb      	ldr	r3, [r7, #24]
 8105f04:	f003 0302 	and.w	r3, r3, #2
 8105f08:	2b00      	cmp	r3, #0
 8105f0a:	d00a      	beq.n	8105f22 <HAL_SPI_IRQHandler+0xc2>
 8105f0c:	69bb      	ldr	r3, [r7, #24]
 8105f0e:	f003 0304 	and.w	r3, r3, #4
 8105f12:	2b00      	cmp	r3, #0
 8105f14:	d105      	bne.n	8105f22 <HAL_SPI_IRQHandler+0xc2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    hspi->TxISR(hspi);
<<<<<<< HEAD
 8107276:	687b      	ldr	r3, [r7, #4]
 8107278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810727a:	6878      	ldr	r0, [r7, #4]
 810727c:	4798      	blx	r3
=======
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105f1a:	6878      	ldr	r0, [r7, #4]
 8105f1c:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    handled = 1UL;
<<<<<<< HEAD
 810727e:	2301      	movs	r3, #1
 8107280:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8105f1e:	2301      	movs	r3, #1
 8105f20:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
<<<<<<< HEAD
 8107282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107284:	2b00      	cmp	r3, #0
 8107286:	f040 8171 	bne.w	810756c <HAL_SPI_IRQHandler+0x3ac>
=======
 8105f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f24:	2b00      	cmp	r3, #0
 8105f26:	f040 8172 	bne.w	810620e <HAL_SPI_IRQHandler+0x3ae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
<<<<<<< HEAD
 810728a:	69bb      	ldr	r3, [r7, #24]
 810728c:	f003 0308 	and.w	r3, r3, #8
 8107290:	2b00      	cmp	r3, #0
 8107292:	f000 80a0 	beq.w	81073d6 <HAL_SPI_IRQHandler+0x216>
=======
 8105f2a:	69bb      	ldr	r3, [r7, #24]
 8105f2c:	f003 0308 	and.w	r3, r3, #8
 8105f30:	2b00      	cmp	r3, #0
 8105f32:	f000 80a0 	beq.w	8106076 <HAL_SPI_IRQHandler+0x216>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
<<<<<<< HEAD
 8107296:	687b      	ldr	r3, [r7, #4]
 8107298:	681b      	ldr	r3, [r3, #0]
 810729a:	699a      	ldr	r2, [r3, #24]
 810729c:	687b      	ldr	r3, [r7, #4]
 810729e:	681b      	ldr	r3, [r3, #0]
 81072a0:	f042 0208 	orr.w	r2, r2, #8
 81072a4:	619a      	str	r2, [r3, #24]
=======
 8105f36:	687b      	ldr	r3, [r7, #4]
 8105f38:	681b      	ldr	r3, [r3, #0]
 8105f3a:	699a      	ldr	r2, [r3, #24]
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	681b      	ldr	r3, [r3, #0]
 8105f40:	f042 0208 	orr.w	r2, r2, #8
 8105f44:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
<<<<<<< HEAD
 81072a6:	687b      	ldr	r3, [r7, #4]
 81072a8:	681b      	ldr	r3, [r3, #0]
 81072aa:	699a      	ldr	r2, [r3, #24]
 81072ac:	687b      	ldr	r3, [r7, #4]
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	f042 0210 	orr.w	r2, r2, #16
 81072b4:	619a      	str	r2, [r3, #24]
=======
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	699a      	ldr	r2, [r3, #24]
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	f042 0210 	orr.w	r2, r2, #16
 8105f54:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
<<<<<<< HEAD
 81072b6:	687b      	ldr	r3, [r7, #4]
 81072b8:	681b      	ldr	r3, [r3, #0]
 81072ba:	699a      	ldr	r2, [r3, #24]
 81072bc:	687b      	ldr	r3, [r7, #4]
 81072be:	681b      	ldr	r3, [r3, #0]
 81072c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81072c4:	619a      	str	r2, [r3, #24]
=======
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	681b      	ldr	r3, [r3, #0]
 8105f5a:	699a      	ldr	r2, [r3, #24]
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105f64:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
<<<<<<< HEAD
 81072c6:	687b      	ldr	r3, [r7, #4]
 81072c8:	681b      	ldr	r3, [r3, #0]
 81072ca:	691a      	ldr	r2, [r3, #16]
 81072cc:	687b      	ldr	r3, [r7, #4]
 81072ce:	681b      	ldr	r3, [r3, #0]
 81072d0:	f022 0208 	bic.w	r2, r2, #8
 81072d4:	611a      	str	r2, [r3, #16]
=======
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	681b      	ldr	r3, [r3, #0]
 8105f6a:	691a      	ldr	r2, [r3, #16]
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	f022 0208 	bic.w	r2, r2, #8
 8105f74:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
<<<<<<< HEAD
 81072d6:	697b      	ldr	r3, [r7, #20]
 81072d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 81072dc:	2b00      	cmp	r3, #0
 81072de:	d00f      	beq.n	8107300 <HAL_SPI_IRQHandler+0x140>
 81072e0:	7cfb      	ldrb	r3, [r7, #19]
 81072e2:	2b04      	cmp	r3, #4
 81072e4:	d004      	beq.n	81072f0 <HAL_SPI_IRQHandler+0x130>
=======
 8105f76:	697b      	ldr	r3, [r7, #20]
 8105f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8105f7c:	2b00      	cmp	r3, #0
 8105f7e:	d00f      	beq.n	8105fa0 <HAL_SPI_IRQHandler+0x140>
 8105f80:	7cfb      	ldrb	r3, [r7, #19]
 8105f82:	2b04      	cmp	r3, #4
 8105f84:	d004      	beq.n	8105f90 <HAL_SPI_IRQHandler+0x130>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
<<<<<<< HEAD
 81072e6:	687b      	ldr	r3, [r7, #4]
 81072e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81072ea:	69db      	ldr	r3, [r3, #28]
 81072ec:	2b00      	cmp	r3, #0
 81072ee:	d007      	beq.n	8107300 <HAL_SPI_IRQHandler+0x140>
 81072f0:	7cfb      	ldrb	r3, [r7, #19]
 81072f2:	2b03      	cmp	r3, #3
 81072f4:	d059      	beq.n	81073aa <HAL_SPI_IRQHandler+0x1ea>
=======
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105f8a:	69db      	ldr	r3, [r3, #28]
 8105f8c:	2b00      	cmp	r3, #0
 8105f8e:	d007      	beq.n	8105fa0 <HAL_SPI_IRQHandler+0x140>
 8105f90:	7cfb      	ldrb	r3, [r7, #19]
 8105f92:	2b03      	cmp	r3, #3
 8105f94:	d059      	beq.n	810604a <HAL_SPI_IRQHandler+0x1ea>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
<<<<<<< HEAD
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81072fa:	69db      	ldr	r3, [r3, #28]
 81072fc:	2b00      	cmp	r3, #0
 81072fe:	d154      	bne.n	81073aa <HAL_SPI_IRQHandler+0x1ea>
=======
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105f9a:	69db      	ldr	r3, [r3, #28]
 8105f9c:	2b00      	cmp	r3, #0
 8105f9e:	d154      	bne.n	810604a <HAL_SPI_IRQHandler+0x1ea>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
<<<<<<< HEAD
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	681b      	ldr	r3, [r3, #0]
 8107304:	689b      	ldr	r3, [r3, #8]
 8107306:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810730a:	2b00      	cmp	r3, #0
 810730c:	d13d      	bne.n	810738a <HAL_SPI_IRQHandler+0x1ca>
=======
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	681b      	ldr	r3, [r3, #0]
 8105fa4:	689b      	ldr	r3, [r3, #8]
 8105fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8105faa:	2b00      	cmp	r3, #0
 8105fac:	d13d      	bne.n	810602a <HAL_SPI_IRQHandler+0x1ca>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
<<<<<<< HEAD
 810730e:	e036      	b.n	810737e <HAL_SPI_IRQHandler+0x1be>
=======
 8105fae:	e036      	b.n	810601e <HAL_SPI_IRQHandler+0x1be>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	68db      	ldr	r3, [r3, #12]
 8107314:	2b0f      	cmp	r3, #15
 8107316:	d90b      	bls.n	8107330 <HAL_SPI_IRQHandler+0x170>
=======
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	68db      	ldr	r3, [r3, #12]
 8105fb4:	2b0f      	cmp	r3, #15
 8105fb6:	d90b      	bls.n	8105fd0 <HAL_SPI_IRQHandler+0x170>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
<<<<<<< HEAD
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	681a      	ldr	r2, [r3, #0]
 810731c:	687b      	ldr	r3, [r7, #4]
 810731e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107320:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8107322:	601a      	str	r2, [r3, #0]
=======
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	681a      	ldr	r2, [r3, #0]
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105fc2:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hspi->pRxBuffPtr += sizeof(uint32_t);
<<<<<<< HEAD
 8107324:	687b      	ldr	r3, [r7, #4]
 8107326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107328:	1d1a      	adds	r2, r3, #4
 810732a:	687b      	ldr	r3, [r7, #4]
 810732c:	665a      	str	r2, [r3, #100]	; 0x64
 810732e:	e01d      	b.n	810736c <HAL_SPI_IRQHandler+0x1ac>
=======
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fc8:	1d1a      	adds	r2, r3, #4
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	665a      	str	r2, [r3, #100]	; 0x64
 8105fce:	e01d      	b.n	810600c <HAL_SPI_IRQHandler+0x1ac>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	68db      	ldr	r3, [r3, #12]
 8107334:	2b07      	cmp	r3, #7
 8107336:	d90b      	bls.n	8107350 <HAL_SPI_IRQHandler+0x190>
=======
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	68db      	ldr	r3, [r3, #12]
 8105fd4:	2b07      	cmp	r3, #7
 8105fd6:	d90b      	bls.n	8105ff0 <HAL_SPI_IRQHandler+0x190>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
<<<<<<< HEAD
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810733c:	68fa      	ldr	r2, [r7, #12]
 810733e:	8812      	ldrh	r2, [r2, #0]
 8107340:	b292      	uxth	r2, r2
 8107342:	801a      	strh	r2, [r3, #0]
=======
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fdc:	68fa      	ldr	r2, [r7, #12]
 8105fde:	8812      	ldrh	r2, [r2, #0]
 8105fe0:	b292      	uxth	r2, r2
 8105fe2:	801a      	strh	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
<<<<<<< HEAD
 8107344:	687b      	ldr	r3, [r7, #4]
 8107346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107348:	1c9a      	adds	r2, r3, #2
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	665a      	str	r2, [r3, #100]	; 0x64
 810734e:	e00d      	b.n	810736c <HAL_SPI_IRQHandler+0x1ac>
=======
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fe8:	1c9a      	adds	r2, r3, #2
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	665a      	str	r2, [r3, #100]	; 0x64
 8105fee:	e00d      	b.n	810600c <HAL_SPI_IRQHandler+0x1ac>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
<<<<<<< HEAD
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	681b      	ldr	r3, [r3, #0]
 8107354:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8107358:	687b      	ldr	r3, [r7, #4]
 810735a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810735c:	7812      	ldrb	r2, [r2, #0]
 810735e:	b2d2      	uxtb	r2, r2
 8107360:	701a      	strb	r2, [r3, #0]
=======
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8105ff8:	687b      	ldr	r3, [r7, #4]
 8105ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105ffc:	7812      	ldrb	r2, [r2, #0]
 8105ffe:	b2d2      	uxtb	r2, r2
 8106000:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            hspi->pRxBuffPtr += sizeof(uint8_t);
<<<<<<< HEAD
 8107362:	687b      	ldr	r3, [r7, #4]
 8107364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107366:	1c5a      	adds	r2, r3, #1
 8107368:	687b      	ldr	r3, [r7, #4]
 810736a:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106006:	1c5a      	adds	r2, r3, #1
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }

          hspi->RxXferCount--;
<<<<<<< HEAD
 810736c:	687b      	ldr	r3, [r7, #4]
 810736e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107372:	b29b      	uxth	r3, r3
 8107374:	3b01      	subs	r3, #1
 8107376:	b29a      	uxth	r2, r3
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
=======
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106012:	b29b      	uxth	r3, r3
 8106014:	3b01      	subs	r3, #1
 8106016:	b29a      	uxth	r2, r3
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        while (hspi->RxXferCount != 0UL)
<<<<<<< HEAD
 810737e:	687b      	ldr	r3, [r7, #4]
 8107380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107384:	b29b      	uxth	r3, r3
 8107386:	2b00      	cmp	r3, #0
 8107388:	d1c2      	bne.n	8107310 <HAL_SPI_IRQHandler+0x150>
=======
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106024:	b29b      	uxth	r3, r3
 8106026:	2b00      	cmp	r3, #0
 8106028:	d1c2      	bne.n	8105fb0 <HAL_SPI_IRQHandler+0x150>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
<<<<<<< HEAD
 810738a:	6878      	ldr	r0, [r7, #4]
 810738c:	f000 f93a 	bl	8107604 <SPI_CloseTransfer>
=======
 810602a:	6878      	ldr	r0, [r7, #4]
 810602c:	f000 f93c 	bl	81062a8 <SPI_CloseTransfer>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 8107390:	687b      	ldr	r3, [r7, #4]
 8107392:	2201      	movs	r2, #1
 8107394:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
=======
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	2201      	movs	r2, #1
 8106034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 8107398:	687b      	ldr	r3, [r7, #4]
 810739a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810739e:	2b00      	cmp	r3, #0
 81073a0:	d003      	beq.n	81073aa <HAL_SPI_IRQHandler+0x1ea>
=======
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810603e:	2b00      	cmp	r3, #0
 8106040:	d003      	beq.n	810604a <HAL_SPI_IRQHandler+0x1ea>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 81073a2:	6878      	ldr	r0, [r7, #4]
 81073a4:	f000 f90a 	bl	81075bc <HAL_SPI_ErrorCallback>
=======
 8106042:	6878      	ldr	r0, [r7, #4]
 8106044:	f000 f90c 	bl	8106260 <HAL_SPI_ErrorCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
<<<<<<< HEAD
 81073a8:	e0e5      	b.n	8107576 <HAL_SPI_IRQHandler+0x3b6>
=======
 8106048:	e0e6      	b.n	8106218 <HAL_SPI_IRQHandler+0x3b8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
<<<<<<< HEAD
 81073aa:	7cfb      	ldrb	r3, [r7, #19]
 81073ac:	2b05      	cmp	r3, #5
 81073ae:	d103      	bne.n	81073b8 <HAL_SPI_IRQHandler+0x1f8>
=======
 810604a:	7cfb      	ldrb	r3, [r7, #19]
 810604c:	2b05      	cmp	r3, #5
 810604e:	d103      	bne.n	8106058 <HAL_SPI_IRQHandler+0x1f8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      HAL_SPI_TxRxCpltCallback(hspi);
<<<<<<< HEAD
 81073b0:	6878      	ldr	r0, [r7, #4]
 81073b2:	f000 f8f9 	bl	81075a8 <HAL_SPI_TxRxCpltCallback>
=======
 8106050:	6878      	ldr	r0, [r7, #4]
 8106052:	f000 f8fb 	bl	810624c <HAL_SPI_TxRxCpltCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
<<<<<<< HEAD
 81073b6:	e0db      	b.n	8107570 <HAL_SPI_IRQHandler+0x3b0>
=======
 8106056:	e0dc      	b.n	8106212 <HAL_SPI_IRQHandler+0x3b2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    else if (State == HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 81073b8:	7cfb      	ldrb	r3, [r7, #19]
 81073ba:	2b04      	cmp	r3, #4
 81073bc:	d103      	bne.n	81073c6 <HAL_SPI_IRQHandler+0x206>
=======
 8106058:	7cfb      	ldrb	r3, [r7, #19]
 810605a:	2b04      	cmp	r3, #4
 810605c:	d103      	bne.n	8106066 <HAL_SPI_IRQHandler+0x206>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      HAL_SPI_RxCpltCallback(hspi);
<<<<<<< HEAD
 81073be:	6878      	ldr	r0, [r7, #4]
 81073c0:	f000 f8e8 	bl	8107594 <HAL_SPI_RxCpltCallback>
=======
 810605e:	6878      	ldr	r0, [r7, #4]
 8106060:	f000 f8ea 	bl	8106238 <HAL_SPI_RxCpltCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return;
<<<<<<< HEAD
 81073c4:	e0d4      	b.n	8107570 <HAL_SPI_IRQHandler+0x3b0>
=======
 8106064:	e0d5      	b.n	8106212 <HAL_SPI_IRQHandler+0x3b2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    else if (State == HAL_SPI_STATE_BUSY_TX)
<<<<<<< HEAD
 81073c6:	7cfb      	ldrb	r3, [r7, #19]
 81073c8:	2b03      	cmp	r3, #3
 81073ca:	f040 80d1 	bne.w	8107570 <HAL_SPI_IRQHandler+0x3b0>
=======
 8106066:	7cfb      	ldrb	r3, [r7, #19]
 8106068:	2b03      	cmp	r3, #3
 810606a:	f040 80d2 	bne.w	8106212 <HAL_SPI_IRQHandler+0x3b2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      HAL_SPI_TxCpltCallback(hspi);
<<<<<<< HEAD
 81073ce:	6878      	ldr	r0, [r7, #4]
 81073d0:	f000 f8d6 	bl	8107580 <HAL_SPI_TxCpltCallback>
=======
 810606e:	6878      	ldr	r0, [r7, #4]
 8106070:	f000 f8d8 	bl	8106224 <HAL_SPI_TxCpltCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return;
<<<<<<< HEAD
 81073d4:	e0cc      	b.n	8107570 <HAL_SPI_IRQHandler+0x3b0>
=======
 8106074:	e0cd      	b.n	8106212 <HAL_SPI_IRQHandler+0x3b2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
<<<<<<< HEAD
 81073d6:	69fb      	ldr	r3, [r7, #28]
 81073d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81073dc:	2b00      	cmp	r3, #0
 81073de:	d00d      	beq.n	81073fc <HAL_SPI_IRQHandler+0x23c>
 81073e0:	6a3b      	ldr	r3, [r7, #32]
 81073e2:	f003 0308 	and.w	r3, r3, #8
 81073e6:	2b00      	cmp	r3, #0
 81073e8:	d008      	beq.n	81073fc <HAL_SPI_IRQHandler+0x23c>
=======
 8106076:	69fb      	ldr	r3, [r7, #28]
 8106078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810607c:	2b00      	cmp	r3, #0
 810607e:	d00d      	beq.n	810609c <HAL_SPI_IRQHandler+0x23c>
 8106080:	6a3b      	ldr	r3, [r7, #32]
 8106082:	f003 0308 	and.w	r3, r3, #8
 8106086:	2b00      	cmp	r3, #0
 8106088:	d008      	beq.n	810609c <HAL_SPI_IRQHandler+0x23c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
<<<<<<< HEAD
 81073ea:	687b      	ldr	r3, [r7, #4]
 81073ec:	681b      	ldr	r3, [r3, #0]
 81073ee:	699a      	ldr	r2, [r3, #24]
 81073f0:	687b      	ldr	r3, [r7, #4]
 81073f2:	681b      	ldr	r3, [r3, #0]
 81073f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81073f8:	619a      	str	r2, [r3, #24]
=======
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	681b      	ldr	r3, [r3, #0]
 810608e:	699a      	ldr	r2, [r3, #24]
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106098:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    return;
<<<<<<< HEAD
 81073fa:	e0bc      	b.n	8107576 <HAL_SPI_IRQHandler+0x3b6>
=======
 810609a:	e0bd      	b.n	8106218 <HAL_SPI_IRQHandler+0x3b8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
<<<<<<< HEAD
 81073fc:	69bb      	ldr	r3, [r7, #24]
 81073fe:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8107402:	2b00      	cmp	r3, #0
 8107404:	f000 80b7 	beq.w	8107576 <HAL_SPI_IRQHandler+0x3b6>
=======
 810609c:	69bb      	ldr	r3, [r7, #24]
 810609e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 81060a2:	2b00      	cmp	r3, #0
 81060a4:	f000 80b8 	beq.w	8106218 <HAL_SPI_IRQHandler+0x3b8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
<<<<<<< HEAD
 8107408:	69bb      	ldr	r3, [r7, #24]
 810740a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810740e:	2b00      	cmp	r3, #0
 8107410:	d00f      	beq.n	8107432 <HAL_SPI_IRQHandler+0x272>
=======
 81060a8:	69bb      	ldr	r3, [r7, #24]
 81060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81060ae:	2b00      	cmp	r3, #0
 81060b0:	d00f      	beq.n	81060d2 <HAL_SPI_IRQHandler+0x272>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
<<<<<<< HEAD
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107418:	f043 0204 	orr.w	r2, r3, #4
 810741c:	687b      	ldr	r3, [r7, #4]
 810741e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81060b8:	f043 0204 	orr.w	r2, r3, #4
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
<<<<<<< HEAD
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	681b      	ldr	r3, [r3, #0]
 8107426:	699a      	ldr	r2, [r3, #24]
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107430:	619a      	str	r2, [r3, #24]
=======
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	681b      	ldr	r3, [r3, #0]
 81060c6:	699a      	ldr	r2, [r3, #24]
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	681b      	ldr	r3, [r3, #0]
 81060cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81060d0:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
<<<<<<< HEAD
 8107432:	69bb      	ldr	r3, [r7, #24]
 8107434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8107438:	2b00      	cmp	r3, #0
 810743a:	d00f      	beq.n	810745c <HAL_SPI_IRQHandler+0x29c>
=======
 81060d2:	69bb      	ldr	r3, [r7, #24]
 81060d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81060d8:	2b00      	cmp	r3, #0
 81060da:	d00f      	beq.n	81060fc <HAL_SPI_IRQHandler+0x29c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
<<<<<<< HEAD
 810743c:	687b      	ldr	r3, [r7, #4]
 810743e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107442:	f043 0201 	orr.w	r2, r3, #1
 8107446:	687b      	ldr	r3, [r7, #4]
 8107448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81060e2:	f043 0201 	orr.w	r2, r3, #1
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
<<<<<<< HEAD
 810744c:	687b      	ldr	r3, [r7, #4]
 810744e:	681b      	ldr	r3, [r3, #0]
 8107450:	699a      	ldr	r2, [r3, #24]
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	681b      	ldr	r3, [r3, #0]
 8107456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810745a:	619a      	str	r2, [r3, #24]
=======
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	681b      	ldr	r3, [r3, #0]
 81060f0:	699a      	ldr	r2, [r3, #24]
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81060fa:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
<<<<<<< HEAD
 810745c:	69bb      	ldr	r3, [r7, #24]
 810745e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107462:	2b00      	cmp	r3, #0
 8107464:	d00f      	beq.n	8107486 <HAL_SPI_IRQHandler+0x2c6>
=======
 81060fc:	69bb      	ldr	r3, [r7, #24]
 81060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106102:	2b00      	cmp	r3, #0
 8106104:	d00f      	beq.n	8106126 <HAL_SPI_IRQHandler+0x2c6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
<<<<<<< HEAD
 8107466:	687b      	ldr	r3, [r7, #4]
 8107468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810746c:	f043 0208 	orr.w	r2, r3, #8
 8107470:	687b      	ldr	r3, [r7, #4]
 8107472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810610c:	f043 0208 	orr.w	r2, r3, #8
 8106110:	687b      	ldr	r3, [r7, #4]
 8106112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __HAL_SPI_CLEAR_FREFLAG(hspi);
<<<<<<< HEAD
 8107476:	687b      	ldr	r3, [r7, #4]
 8107478:	681b      	ldr	r3, [r3, #0]
 810747a:	699a      	ldr	r2, [r3, #24]
 810747c:	687b      	ldr	r3, [r7, #4]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107484:	619a      	str	r2, [r3, #24]
=======
 8106116:	687b      	ldr	r3, [r7, #4]
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	699a      	ldr	r2, [r3, #24]
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106124:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
<<<<<<< HEAD
 8107486:	69bb      	ldr	r3, [r7, #24]
 8107488:	f003 0320 	and.w	r3, r3, #32
 810748c:	2b00      	cmp	r3, #0
 810748e:	d00f      	beq.n	81074b0 <HAL_SPI_IRQHandler+0x2f0>
=======
 8106126:	69bb      	ldr	r3, [r7, #24]
 8106128:	f003 0320 	and.w	r3, r3, #32
 810612c:	2b00      	cmp	r3, #0
 810612e:	d00f      	beq.n	8106150 <HAL_SPI_IRQHandler+0x2f0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
<<<<<<< HEAD
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107496:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106136:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810613a:	687b      	ldr	r3, [r7, #4]
 810613c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
<<<<<<< HEAD
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	681b      	ldr	r3, [r3, #0]
 81074a4:	699a      	ldr	r2, [r3, #24]
 81074a6:	687b      	ldr	r3, [r7, #4]
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	f042 0220 	orr.w	r2, r2, #32
 81074ae:	619a      	str	r2, [r3, #24]
=======
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	681b      	ldr	r3, [r3, #0]
 8106144:	699a      	ldr	r2, [r3, #24]
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	f042 0220 	orr.w	r2, r2, #32
 810614e:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81074b6:	2b00      	cmp	r3, #0
 81074b8:	d05c      	beq.n	8107574 <HAL_SPI_IRQHandler+0x3b4>
=======
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106156:	2b00      	cmp	r3, #0
 8106158:	d05d      	beq.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
<<<<<<< HEAD
 81074ba:	687b      	ldr	r3, [r7, #4]
 81074bc:	681b      	ldr	r3, [r3, #0]
 81074be:	681a      	ldr	r2, [r3, #0]
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	f022 0201 	bic.w	r2, r2, #1
 81074c8:	601a      	str	r2, [r3, #0]
=======
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	681a      	ldr	r2, [r3, #0]
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	f022 0201 	bic.w	r2, r2, #1
 8106168:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
<<<<<<< HEAD
 81074ca:	687b      	ldr	r3, [r7, #4]
 81074cc:	681b      	ldr	r3, [r3, #0]
 81074ce:	691b      	ldr	r3, [r3, #16]
 81074d0:	687a      	ldr	r2, [r7, #4]
 81074d2:	6812      	ldr	r2, [r2, #0]
 81074d4:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 81074d8:	f023 0303 	bic.w	r3, r3, #3
 81074dc:	6113      	str	r3, [r2, #16]
=======
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	691b      	ldr	r3, [r3, #16]
 8106170:	687a      	ldr	r2, [r7, #4]
 8106172:	6812      	ldr	r2, [r2, #0]
 8106174:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8106178:	f023 0303 	bic.w	r3, r3, #3
 810617c:	6113      	str	r3, [r2, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
<<<<<<< HEAD
 81074de:	697b      	ldr	r3, [r7, #20]
 81074e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 81074e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 81074e8:	d138      	bne.n	810755c <HAL_SPI_IRQHandler+0x39c>
=======
 810617e:	697b      	ldr	r3, [r7, #20]
 8106180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106184:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8106188:	d138      	bne.n	81061fc <HAL_SPI_IRQHandler+0x39c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
<<<<<<< HEAD
 81074ea:	687b      	ldr	r3, [r7, #4]
 81074ec:	681b      	ldr	r3, [r3, #0]
 81074ee:	689a      	ldr	r2, [r3, #8]
 81074f0:	687b      	ldr	r3, [r7, #4]
 81074f2:	681b      	ldr	r3, [r3, #0]
 81074f4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81074f8:	609a      	str	r2, [r3, #8]
=======
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	689a      	ldr	r2, [r3, #8]
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106198:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
<<<<<<< HEAD
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81074fe:	2b00      	cmp	r3, #0
 8107500:	d013      	beq.n	810752a <HAL_SPI_IRQHandler+0x36a>
=======
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d013      	beq.n	81061ca <HAL_SPI_IRQHandler+0x36a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107506:	4a1d      	ldr	r2, [pc, #116]	; (810757c <HAL_SPI_IRQHandler+0x3bc>)
 8107508:	651a      	str	r2, [r3, #80]	; 0x50
=======
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81061a6:	4a1e      	ldr	r2, [pc, #120]	; (8106220 <HAL_SPI_IRQHandler+0x3c0>)
 81061a8:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
<<<<<<< HEAD
 810750a:	687b      	ldr	r3, [r7, #4]
 810750c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810750e:	4618      	mov	r0, r3
 8107510:	f7fb fdfc 	bl	810310c <HAL_DMA_Abort_IT>
 8107514:	4603      	mov	r3, r0
 8107516:	2b00      	cmp	r3, #0
 8107518:	d007      	beq.n	810752a <HAL_SPI_IRQHandler+0x36a>
=======
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81061ae:	4618      	mov	r0, r3
 81061b0:	f7fc fee2 	bl	8102f78 <HAL_DMA_Abort_IT>
 81061b4:	4603      	mov	r3, r0
 81061b6:	2b00      	cmp	r3, #0
 81061b8:	d007      	beq.n	81061ca <HAL_SPI_IRQHandler+0x36a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
<<<<<<< HEAD
 810751a:	687b      	ldr	r3, [r7, #4]
 810751c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107520:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81061c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
<<<<<<< HEAD
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810752e:	2b00      	cmp	r3, #0
 8107530:	d020      	beq.n	8107574 <HAL_SPI_IRQHandler+0x3b4>
=======
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81061ce:	2b00      	cmp	r3, #0
 81061d0:	d021      	beq.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107536:	4a11      	ldr	r2, [pc, #68]	; (810757c <HAL_SPI_IRQHandler+0x3bc>)
 8107538:	651a      	str	r2, [r3, #80]	; 0x50
=======
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81061d6:	4a12      	ldr	r2, [pc, #72]	; (8106220 <HAL_SPI_IRQHandler+0x3c0>)
 81061d8:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
<<<<<<< HEAD
 810753a:	687b      	ldr	r3, [r7, #4]
 810753c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810753e:	4618      	mov	r0, r3
 8107540:	f7fb fde4 	bl	810310c <HAL_DMA_Abort_IT>
 8107544:	4603      	mov	r3, r0
 8107546:	2b00      	cmp	r3, #0
 8107548:	d014      	beq.n	8107574 <HAL_SPI_IRQHandler+0x3b4>
=======
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81061de:	4618      	mov	r0, r3
 81061e0:	f7fc feca 	bl	8102f78 <HAL_DMA_Abort_IT>
 81061e4:	4603      	mov	r3, r0
 81061e6:	2b00      	cmp	r3, #0
 81061e8:	d015      	beq.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
<<<<<<< HEAD
 810754a:	687b      	ldr	r3, [r7, #4]
 810754c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107550:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8107554:	687b      	ldr	r3, [r7, #4]
 8107556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 81061ea:	687b      	ldr	r3, [r7, #4]
 81061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81061f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
<<<<<<< HEAD
 810755a:	e00b      	b.n	8107574 <HAL_SPI_IRQHandler+0x3b4>
=======
 81061fa:	e00c      	b.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 810755c:	687b      	ldr	r3, [r7, #4]
 810755e:	2201      	movs	r2, #1
 8107560:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
=======
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	2201      	movs	r2, #1
 8106200:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8107564:	6878      	ldr	r0, [r7, #4]
 8107566:	f000 f829 	bl	81075bc <HAL_SPI_ErrorCallback>
=======
 8106204:	6878      	ldr	r0, [r7, #4]
 8106206:	f000 f82b 	bl	8106260 <HAL_SPI_ErrorCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return;
<<<<<<< HEAD
 810756a:	e003      	b.n	8107574 <HAL_SPI_IRQHandler+0x3b4>
=======
 810620a:	bf00      	nop
 810620c:	e003      	b.n	8106216 <HAL_SPI_IRQHandler+0x3b6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return;
<<<<<<< HEAD
 810756c:	bf00      	nop
 810756e:	e002      	b.n	8107576 <HAL_SPI_IRQHandler+0x3b6>
=======
 810620e:	bf00      	nop
 8106210:	e002      	b.n	8106218 <HAL_SPI_IRQHandler+0x3b8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return;
<<<<<<< HEAD
 8107570:	bf00      	nop
 8107572:	e000      	b.n	8107576 <HAL_SPI_IRQHandler+0x3b6>
=======
 8106212:	bf00      	nop
 8106214:	e000      	b.n	8106218 <HAL_SPI_IRQHandler+0x3b8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return;
<<<<<<< HEAD
 8107574:	bf00      	nop
=======
 8106216:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 8107576:	3728      	adds	r7, #40	; 0x28
 8107578:	46bd      	mov	sp, r7
 810757a:	bd80      	pop	{r7, pc}
 810757c:	081075d1 	.word	0x081075d1
=======
 8106218:	3728      	adds	r7, #40	; 0x28
 810621a:	46bd      	mov	sp, r7
 810621c:	bd80      	pop	{r7, pc}
 810621e:	bf00      	nop
 8106220:	08106275 	.word	0x08106275
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107580 <HAL_SPI_TxCpltCallback>:
=======
08106224 <HAL_SPI_TxCpltCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8107580:	b480      	push	{r7}
 8107582:	b083      	sub	sp, #12
 8107584:	af00      	add	r7, sp, #0
 8107586:	6078      	str	r0, [r7, #4]
=======
 8106224:	b480      	push	{r7}
 8106226:	b083      	sub	sp, #12
 8106228:	af00      	add	r7, sp, #0
 810622a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 8107588:	bf00      	nop
 810758a:	370c      	adds	r7, #12
 810758c:	46bd      	mov	sp, r7
 810758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107592:	4770      	bx	lr
=======
 810622c:	bf00      	nop
 810622e:	370c      	adds	r7, #12
 8106230:	46bd      	mov	sp, r7
 8106232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106236:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107594 <HAL_SPI_RxCpltCallback>:
=======
08106238 <HAL_SPI_RxCpltCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8107594:	b480      	push	{r7}
 8107596:	b083      	sub	sp, #12
 8107598:	af00      	add	r7, sp, #0
 810759a:	6078      	str	r0, [r7, #4]
=======
 8106238:	b480      	push	{r7}
 810623a:	b083      	sub	sp, #12
 810623c:	af00      	add	r7, sp, #0
 810623e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 810759c:	bf00      	nop
 810759e:	370c      	adds	r7, #12
 81075a0:	46bd      	mov	sp, r7
 81075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075a6:	4770      	bx	lr
=======
 8106240:	bf00      	nop
 8106242:	370c      	adds	r7, #12
 8106244:	46bd      	mov	sp, r7
 8106246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810624a:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081075a8 <HAL_SPI_TxRxCpltCallback>:
=======
0810624c <HAL_SPI_TxRxCpltCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 81075a8:	b480      	push	{r7}
 81075aa:	b083      	sub	sp, #12
 81075ac:	af00      	add	r7, sp, #0
 81075ae:	6078      	str	r0, [r7, #4]
=======
 810624c:	b480      	push	{r7}
 810624e:	b083      	sub	sp, #12
 8106250:	af00      	add	r7, sp, #0
 8106252:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 81075b0:	bf00      	nop
 81075b2:	370c      	adds	r7, #12
 81075b4:	46bd      	mov	sp, r7
 81075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075ba:	4770      	bx	lr
=======
 8106254:	bf00      	nop
 8106256:	370c      	adds	r7, #12
 8106258:	46bd      	mov	sp, r7
 810625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810625e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081075bc <HAL_SPI_ErrorCallback>:
=======
08106260 <HAL_SPI_ErrorCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 81075bc:	b480      	push	{r7}
 81075be:	b083      	sub	sp, #12
 81075c0:	af00      	add	r7, sp, #0
 81075c2:	6078      	str	r0, [r7, #4]
=======
 8106260:	b480      	push	{r7}
 8106262:	b083      	sub	sp, #12
 8106264:	af00      	add	r7, sp, #0
 8106266:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< HEAD
 81075c4:	bf00      	nop
 81075c6:	370c      	adds	r7, #12
 81075c8:	46bd      	mov	sp, r7
 81075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075ce:	4770      	bx	lr
=======
 8106268:	bf00      	nop
 810626a:	370c      	adds	r7, #12
 810626c:	46bd      	mov	sp, r7
 810626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106272:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081075d0 <SPI_DMAAbortOnError>:
=======
08106274 <SPI_DMAAbortOnError>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 81075d0:	b580      	push	{r7, lr}
 81075d2:	b084      	sub	sp, #16
 81075d4:	af00      	add	r7, sp, #0
 81075d6:	6078      	str	r0, [r7, #4]
=======
 8106274:	b580      	push	{r7, lr}
 8106276:	b084      	sub	sp, #16
 8106278:	af00      	add	r7, sp, #0
 810627a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
<<<<<<< HEAD
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81075dc:	60fb      	str	r3, [r7, #12]
=======
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106280:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  hspi->RxXferCount = (uint16_t) 0UL;
<<<<<<< HEAD
 81075de:	68fb      	ldr	r3, [r7, #12]
 81075e0:	2200      	movs	r2, #0
 81075e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
=======
 8106282:	68fb      	ldr	r3, [r7, #12]
 8106284:	2200      	movs	r2, #0
 8106286:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  hspi->TxXferCount = (uint16_t) 0UL;
<<<<<<< HEAD
 81075e6:	68fb      	ldr	r3, [r7, #12]
 81075e8:	2200      	movs	r2, #0
 81075ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
=======
 810628a:	68fb      	ldr	r3, [r7, #12]
 810628c:	2200      	movs	r2, #0
 810628e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 81075ee:	68fb      	ldr	r3, [r7, #12]
 81075f0:	2201      	movs	r2, #1
 81075f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
=======
 8106292:	68fb      	ldr	r3, [r7, #12]
 8106294:	2201      	movs	r2, #1
 8106296:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 81075f6:	68f8      	ldr	r0, [r7, #12]
 81075f8:	f7ff ffe0 	bl	81075bc <HAL_SPI_ErrorCallback>
=======
 810629a:	68f8      	ldr	r0, [r7, #12]
 810629c:	f7ff ffe0 	bl	8106260 <HAL_SPI_ErrorCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 81075fc:	bf00      	nop
 81075fe:	3710      	adds	r7, #16
 8107600:	46bd      	mov	sp, r7
 8107602:	bd80      	pop	{r7, pc}
=======
 81062a0:	bf00      	nop
 81062a2:	3710      	adds	r7, #16
 81062a4:	46bd      	mov	sp, r7
 81062a6:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107604 <SPI_CloseTransfer>:
=======
081062a8 <SPI_CloseTransfer>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8107604:	b480      	push	{r7}
 8107606:	b085      	sub	sp, #20
 8107608:	af00      	add	r7, sp, #0
 810760a:	6078      	str	r0, [r7, #4]
=======
 81062a8:	b480      	push	{r7}
 81062aa:	b085      	sub	sp, #20
 81062ac:	af00      	add	r7, sp, #0
 81062ae:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t itflag = hspi->Instance->SR;
<<<<<<< HEAD
 810760c:	687b      	ldr	r3, [r7, #4]
 810760e:	681b      	ldr	r3, [r3, #0]
 8107610:	695b      	ldr	r3, [r3, #20]
 8107612:	60fb      	str	r3, [r7, #12]
=======
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	681b      	ldr	r3, [r3, #0]
 81062b4:	695b      	ldr	r3, [r3, #20]
 81062b6:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
<<<<<<< HEAD
 8107614:	687b      	ldr	r3, [r7, #4]
 8107616:	681b      	ldr	r3, [r3, #0]
 8107618:	699a      	ldr	r2, [r3, #24]
 810761a:	687b      	ldr	r3, [r7, #4]
 810761c:	681b      	ldr	r3, [r3, #0]
 810761e:	f042 0208 	orr.w	r2, r2, #8
 8107622:	619a      	str	r2, [r3, #24]
=======
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	699a      	ldr	r2, [r3, #24]
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	681b      	ldr	r3, [r3, #0]
 81062c2:	f042 0208 	orr.w	r2, r2, #8
 81062c6:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
<<<<<<< HEAD
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	681b      	ldr	r3, [r3, #0]
 8107628:	699a      	ldr	r2, [r3, #24]
 810762a:	687b      	ldr	r3, [r7, #4]
 810762c:	681b      	ldr	r3, [r3, #0]
 810762e:	f042 0210 	orr.w	r2, r2, #16
 8107632:	619a      	str	r2, [r3, #24]
=======
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	681b      	ldr	r3, [r3, #0]
 81062cc:	699a      	ldr	r2, [r3, #24]
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	681b      	ldr	r3, [r3, #0]
 81062d2:	f042 0210 	orr.w	r2, r2, #16
 81062d6:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
<<<<<<< HEAD
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	681b      	ldr	r3, [r3, #0]
 8107638:	681a      	ldr	r2, [r3, #0]
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	681b      	ldr	r3, [r3, #0]
 810763e:	f022 0201 	bic.w	r2, r2, #1
 8107642:	601a      	str	r2, [r3, #0]
=======
 81062d8:	687b      	ldr	r3, [r7, #4]
 81062da:	681b      	ldr	r3, [r3, #0]
 81062dc:	681a      	ldr	r2, [r3, #0]
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	f022 0201 	bic.w	r2, r2, #1
 81062e6:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
<<<<<<< HEAD
 8107644:	687b      	ldr	r3, [r7, #4]
 8107646:	681b      	ldr	r3, [r3, #0]
 8107648:	691b      	ldr	r3, [r3, #16]
 810764a:	687a      	ldr	r2, [r7, #4]
 810764c:	6812      	ldr	r2, [r2, #0]
 810764e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8107652:	f023 0303 	bic.w	r3, r3, #3
 8107656:	6113      	str	r3, [r2, #16]
=======
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	691b      	ldr	r3, [r3, #16]
 81062ee:	687a      	ldr	r2, [r7, #4]
 81062f0:	6812      	ldr	r2, [r2, #0]
 81062f2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 81062f6:	f023 0303 	bic.w	r3, r3, #3
 81062fa:	6113      	str	r3, [r2, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
<<<<<<< HEAD
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	689a      	ldr	r2, [r3, #8]
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	681b      	ldr	r3, [r3, #0]
 8107662:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8107666:	609a      	str	r2, [r3, #8]
=======
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	689a      	ldr	r2, [r3, #8]
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	681b      	ldr	r3, [r3, #0]
 8106306:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810630a:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 8107668:	687b      	ldr	r3, [r7, #4]
 810766a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810766e:	b2db      	uxtb	r3, r3
 8107670:	2b04      	cmp	r3, #4
 8107672:	d014      	beq.n	810769e <SPI_CloseTransfer+0x9a>
=======
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106312:	b2db      	uxtb	r3, r3
 8106314:	2b04      	cmp	r3, #4
 8106316:	d014      	beq.n	8106342 <SPI_CloseTransfer+0x9a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
<<<<<<< HEAD
 8107674:	68fb      	ldr	r3, [r7, #12]
 8107676:	f003 0320 	and.w	r3, r3, #32
 810767a:	2b00      	cmp	r3, #0
 810767c:	d00f      	beq.n	810769e <SPI_CloseTransfer+0x9a>
=======
 8106318:	68fb      	ldr	r3, [r7, #12]
 810631a:	f003 0320 	and.w	r3, r3, #32
 810631e:	2b00      	cmp	r3, #0
 8106320:	d00f      	beq.n	8106342 <SPI_CloseTransfer+0x9a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
<<<<<<< HEAD
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107684:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106328:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
<<<<<<< HEAD
 810768e:	687b      	ldr	r3, [r7, #4]
 8107690:	681b      	ldr	r3, [r3, #0]
 8107692:	699a      	ldr	r2, [r3, #24]
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	f042 0220 	orr.w	r2, r2, #32
 810769c:	619a      	str	r2, [r3, #24]
=======
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	681b      	ldr	r3, [r3, #0]
 8106336:	699a      	ldr	r2, [r3, #24]
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	f042 0220 	orr.w	r2, r2, #32
 8106340:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
<<<<<<< HEAD
 810769e:	687b      	ldr	r3, [r7, #4]
 81076a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81076a4:	b2db      	uxtb	r3, r3
 81076a6:	2b03      	cmp	r3, #3
 81076a8:	d014      	beq.n	81076d4 <SPI_CloseTransfer+0xd0>
=======
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106348:	b2db      	uxtb	r3, r3
 810634a:	2b03      	cmp	r3, #3
 810634c:	d014      	beq.n	8106378 <SPI_CloseTransfer+0xd0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
<<<<<<< HEAD
 81076aa:	68fb      	ldr	r3, [r7, #12]
 81076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81076b0:	2b00      	cmp	r3, #0
 81076b2:	d00f      	beq.n	81076d4 <SPI_CloseTransfer+0xd0>
=======
 810634e:	68fb      	ldr	r3, [r7, #12]
 8106350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106354:	2b00      	cmp	r3, #0
 8106356:	d00f      	beq.n	8106378 <SPI_CloseTransfer+0xd0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
<<<<<<< HEAD
 81076b4:	687b      	ldr	r3, [r7, #4]
 81076b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81076ba:	f043 0204 	orr.w	r2, r3, #4
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810635e:	f043 0204 	orr.w	r2, r3, #4
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
<<<<<<< HEAD
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	681b      	ldr	r3, [r3, #0]
 81076c8:	699a      	ldr	r2, [r3, #24]
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	681b      	ldr	r3, [r3, #0]
 81076ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81076d2:	619a      	str	r2, [r3, #24]
=======
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	681b      	ldr	r3, [r3, #0]
 810636c:	699a      	ldr	r2, [r3, #24]
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106376:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
<<<<<<< HEAD
 81076d4:	68fb      	ldr	r3, [r7, #12]
 81076d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81076da:	2b00      	cmp	r3, #0
 81076dc:	d00f      	beq.n	81076fe <SPI_CloseTransfer+0xfa>
=======
 8106378:	68fb      	ldr	r3, [r7, #12]
 810637a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810637e:	2b00      	cmp	r3, #0
 8106380:	d00f      	beq.n	81063a2 <SPI_CloseTransfer+0xfa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
<<<<<<< HEAD
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81076e4:	f043 0201 	orr.w	r2, r3, #1
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106388:	f043 0201 	orr.w	r2, r3, #1
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
<<<<<<< HEAD
 81076ee:	687b      	ldr	r3, [r7, #4]
 81076f0:	681b      	ldr	r3, [r3, #0]
 81076f2:	699a      	ldr	r2, [r3, #24]
 81076f4:	687b      	ldr	r3, [r7, #4]
 81076f6:	681b      	ldr	r3, [r3, #0]
 81076f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81076fc:	619a      	str	r2, [r3, #24]
=======
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	681b      	ldr	r3, [r3, #0]
 8106396:	699a      	ldr	r2, [r3, #24]
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81063a0:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
<<<<<<< HEAD
 81076fe:	68fb      	ldr	r3, [r7, #12]
 8107700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107704:	2b00      	cmp	r3, #0
 8107706:	d00f      	beq.n	8107728 <SPI_CloseTransfer+0x124>
=======
 81063a2:	68fb      	ldr	r3, [r7, #12]
 81063a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81063a8:	2b00      	cmp	r3, #0
 81063aa:	d00f      	beq.n	81063cc <SPI_CloseTransfer+0x124>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
<<<<<<< HEAD
 8107708:	687b      	ldr	r3, [r7, #4]
 810770a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810770e:	f043 0208 	orr.w	r2, r3, #8
 8107712:	687b      	ldr	r3, [r7, #4]
 8107714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81063b2:	f043 0208 	orr.w	r2, r3, #8
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __HAL_SPI_CLEAR_FREFLAG(hspi);
<<<<<<< HEAD
 8107718:	687b      	ldr	r3, [r7, #4]
 810771a:	681b      	ldr	r3, [r3, #0]
 810771c:	699a      	ldr	r2, [r3, #24]
 810771e:	687b      	ldr	r3, [r7, #4]
 8107720:	681b      	ldr	r3, [r3, #0]
 8107722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107726:	619a      	str	r2, [r3, #24]
=======
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	681b      	ldr	r3, [r3, #0]
 81063c0:	699a      	ldr	r2, [r3, #24]
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	681b      	ldr	r3, [r3, #0]
 81063c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81063ca:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  hspi->TxXferCount = (uint16_t)0UL;
<<<<<<< HEAD
 8107728:	687b      	ldr	r3, [r7, #4]
 810772a:	2200      	movs	r2, #0
 810772c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
=======
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	2200      	movs	r2, #0
 81063d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  hspi->RxXferCount = (uint16_t)0UL;
<<<<<<< HEAD
 8107730:	687b      	ldr	r3, [r7, #4]
 8107732:	2200      	movs	r2, #0
 8107734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
=======
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	2200      	movs	r2, #0
 81063d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8107738:	bf00      	nop
 810773a:	3714      	adds	r7, #20
 810773c:	46bd      	mov	sp, r7
 810773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107742:	4770      	bx	lr
=======
 81063dc:	bf00      	nop
 81063de:	3714      	adds	r7, #20
 81063e0:	46bd      	mov	sp, r7
 81063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063e6:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107744 <SPI_GetPacketSize>:
=======
081063e8 <SPI_GetPacketSize>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8107744:	b480      	push	{r7}
 8107746:	b085      	sub	sp, #20
 8107748:	af00      	add	r7, sp, #0
 810774a:	6078      	str	r0, [r7, #4]
=======
 81063e8:	b480      	push	{r7}
 81063ea:	b085      	sub	sp, #20
 81063ec:	af00      	add	r7, sp, #0
 81063ee:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
<<<<<<< HEAD
 810774c:	687b      	ldr	r3, [r7, #4]
 810774e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107750:	095b      	lsrs	r3, r3, #5
 8107752:	3301      	adds	r3, #1
 8107754:	60fb      	str	r3, [r7, #12]
=======
 81063f0:	687b      	ldr	r3, [r7, #4]
 81063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81063f4:	095b      	lsrs	r3, r3, #5
 81063f6:	3301      	adds	r3, #1
 81063f8:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
<<<<<<< HEAD
 8107756:	687b      	ldr	r3, [r7, #4]
 8107758:	68db      	ldr	r3, [r3, #12]
 810775a:	3301      	adds	r3, #1
 810775c:	60bb      	str	r3, [r7, #8]
=======
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	68db      	ldr	r3, [r3, #12]
 81063fe:	3301      	adds	r3, #1
 8106400:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
<<<<<<< HEAD
 810775e:	68bb      	ldr	r3, [r7, #8]
 8107760:	3307      	adds	r3, #7
 8107762:	08db      	lsrs	r3, r3, #3
 8107764:	60bb      	str	r3, [r7, #8]
=======
 8106402:	68bb      	ldr	r3, [r7, #8]
 8106404:	3307      	adds	r3, #7
 8106406:	08db      	lsrs	r3, r3, #3
 8106408:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return data_size * fifo_threashold;
<<<<<<< HEAD
 8107766:	68bb      	ldr	r3, [r7, #8]
 8107768:	68fa      	ldr	r2, [r7, #12]
 810776a:	fb02 f303 	mul.w	r3, r2, r3
=======
 810640a:	68bb      	ldr	r3, [r7, #8]
 810640c:	68fa      	ldr	r2, [r7, #12]
 810640e:	fb02 f303 	mul.w	r3, r2, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810776e:	4618      	mov	r0, r3
 8107770:	3714      	adds	r7, #20
 8107772:	46bd      	mov	sp, r7
 8107774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107778:	4770      	bx	lr
=======
 8106412:	4618      	mov	r0, r3
 8106414:	3714      	adds	r7, #20
 8106416:	46bd      	mov	sp, r7
 8106418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810641c:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810777a <HAL_TIM_Base_Init>:
=======
0810641e <HAL_TIM_Base_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 810777a:	b580      	push	{r7, lr}
 810777c:	b082      	sub	sp, #8
 810777e:	af00      	add	r7, sp, #0
 8107780:	6078      	str	r0, [r7, #4]
=======
 810641e:	b580      	push	{r7, lr}
 8106420:	b082      	sub	sp, #8
 8106422:	af00      	add	r7, sp, #0
 8106424:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 8107782:	687b      	ldr	r3, [r7, #4]
 8107784:	2b00      	cmp	r3, #0
 8107786:	d101      	bne.n	810778c <HAL_TIM_Base_Init+0x12>
=======
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	2b00      	cmp	r3, #0
 810642a:	d101      	bne.n	8106430 <HAL_TIM_Base_Init+0x12>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8107788:	2301      	movs	r3, #1
 810778a:	e049      	b.n	8107820 <HAL_TIM_Base_Init+0xa6>
=======
 810642c:	2301      	movs	r3, #1
 810642e:	e049      	b.n	81064c4 <HAL_TIM_Base_Init+0xa6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 810778c:	687b      	ldr	r3, [r7, #4]
 810778e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107792:	b2db      	uxtb	r3, r3
 8107794:	2b00      	cmp	r3, #0
 8107796:	d106      	bne.n	81077a6 <HAL_TIM_Base_Init+0x2c>
=======
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106436:	b2db      	uxtb	r3, r3
 8106438:	2b00      	cmp	r3, #0
 810643a:	d106      	bne.n	810644a <HAL_TIM_Base_Init+0x2c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8107798:	687b      	ldr	r3, [r7, #4]
 810779a:	2200      	movs	r2, #0
 810779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	2200      	movs	r2, #0
 8106440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 81077a0:	6878      	ldr	r0, [r7, #4]
 81077a2:	f000 f841 	bl	8107828 <HAL_TIM_Base_MspInit>
=======
 8106444:	6878      	ldr	r0, [r7, #4]
 8106446:	f000 f841 	bl	81064cc <HAL_TIM_Base_MspInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 81077a6:	687b      	ldr	r3, [r7, #4]
 81077a8:	2202      	movs	r2, #2
 81077aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	2202      	movs	r2, #2
 810644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
<<<<<<< HEAD
 81077ae:	687b      	ldr	r3, [r7, #4]
 81077b0:	681a      	ldr	r2, [r3, #0]
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	3304      	adds	r3, #4
 81077b6:	4619      	mov	r1, r3
 81077b8:	4610      	mov	r0, r2
 81077ba:	f000 f9bd 	bl	8107b38 <TIM_Base_SetConfig>
=======
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681a      	ldr	r2, [r3, #0]
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	3304      	adds	r3, #4
 810645a:	4619      	mov	r1, r3
 810645c:	4610      	mov	r0, r2
 810645e:	f000 f9bd 	bl	81067dc <TIM_Base_SetConfig>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
<<<<<<< HEAD
 81077be:	687b      	ldr	r3, [r7, #4]
 81077c0:	2201      	movs	r2, #1
 81077c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
=======
 8106462:	687b      	ldr	r3, [r7, #4]
 8106464:	2201      	movs	r2, #1
 8106466:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
<<<<<<< HEAD
 81077c6:	687b      	ldr	r3, [r7, #4]
 81077c8:	2201      	movs	r2, #1
 81077ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81077ce:	687b      	ldr	r3, [r7, #4]
 81077d0:	2201      	movs	r2, #1
 81077d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81077d6:	687b      	ldr	r3, [r7, #4]
 81077d8:	2201      	movs	r2, #1
 81077da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81077de:	687b      	ldr	r3, [r7, #4]
 81077e0:	2201      	movs	r2, #1
 81077e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	2201      	movs	r2, #1
 81077ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81077ee:	687b      	ldr	r3, [r7, #4]
 81077f0:	2201      	movs	r2, #1
 81077f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
=======
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	2201      	movs	r2, #1
 810646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	2201      	movs	r2, #1
 8106476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	2201      	movs	r2, #1
 810647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	2201      	movs	r2, #1
 8106486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	2201      	movs	r2, #1
 810648e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	2201      	movs	r2, #1
 8106496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
<<<<<<< HEAD
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	2201      	movs	r2, #1
 81077fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81077fe:	687b      	ldr	r3, [r7, #4]
 8107800:	2201      	movs	r2, #1
 8107802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107806:	687b      	ldr	r3, [r7, #4]
 8107808:	2201      	movs	r2, #1
 810780a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810780e:	687b      	ldr	r3, [r7, #4]
 8107810:	2201      	movs	r2, #1
 8107812:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
=======
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	2201      	movs	r2, #1
 810649e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	2201      	movs	r2, #1
 81064a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	2201      	movs	r2, #1
 81064ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	2201      	movs	r2, #1
 81064b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8107816:	687b      	ldr	r3, [r7, #4]
 8107818:	2201      	movs	r2, #1
 810781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 81064ba:	687b      	ldr	r3, [r7, #4]
 81064bc:	2201      	movs	r2, #1
 81064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return HAL_OK;
<<<<<<< HEAD
 810781e:	2300      	movs	r3, #0
=======
 81064c2:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8107820:	4618      	mov	r0, r3
 8107822:	3708      	adds	r7, #8
 8107824:	46bd      	mov	sp, r7
 8107826:	bd80      	pop	{r7, pc}
=======
 81064c4:	4618      	mov	r0, r3
 81064c6:	3708      	adds	r7, #8
 81064c8:	46bd      	mov	sp, r7
 81064ca:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107828 <HAL_TIM_Base_MspInit>:
=======
081064cc <HAL_TIM_Base_MspInit>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8107828:	b480      	push	{r7}
 810782a:	b083      	sub	sp, #12
 810782c:	af00      	add	r7, sp, #0
 810782e:	6078      	str	r0, [r7, #4]
=======
 81064cc:	b480      	push	{r7}
 81064ce:	b083      	sub	sp, #12
 81064d0:	af00      	add	r7, sp, #0
 81064d2:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8107830:	bf00      	nop
 8107832:	370c      	adds	r7, #12
 8107834:	46bd      	mov	sp, r7
 8107836:	f85d 7b04 	ldr.w	r7, [sp], #4
 810783a:	4770      	bx	lr
=======
 81064d4:	bf00      	nop
 81064d6:	370c      	adds	r7, #12
 81064d8:	46bd      	mov	sp, r7
 81064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064de:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810783c <HAL_TIM_Base_Start_IT>:
=======
081064e0 <HAL_TIM_Base_Start_IT>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 810783c:	b480      	push	{r7}
 810783e:	b085      	sub	sp, #20
 8107840:	af00      	add	r7, sp, #0
 8107842:	6078      	str	r0, [r7, #4]
=======
 81064e0:	b480      	push	{r7}
 81064e2:	b085      	sub	sp, #20
 81064e4:	af00      	add	r7, sp, #0
 81064e6:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810784a:	b2db      	uxtb	r3, r3
 810784c:	2b01      	cmp	r3, #1
 810784e:	d001      	beq.n	8107854 <HAL_TIM_Base_Start_IT+0x18>
=======
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81064ee:	b2db      	uxtb	r3, r3
 81064f0:	2b01      	cmp	r3, #1
 81064f2:	d001      	beq.n	81064f8 <HAL_TIM_Base_Start_IT+0x18>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8107850:	2301      	movs	r3, #1
 8107852:	e021      	b.n	8107898 <HAL_TIM_Base_Start_IT+0x5c>
=======
 81064f4:	2301      	movs	r3, #1
 81064f6:	e021      	b.n	810653c <HAL_TIM_Base_Start_IT+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	2202      	movs	r2, #2
 8107858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	2202      	movs	r2, #2
 81064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 810785c:	687b      	ldr	r3, [r7, #4]
 810785e:	681b      	ldr	r3, [r3, #0]
 8107860:	68da      	ldr	r2, [r3, #12]
 8107862:	687b      	ldr	r3, [r7, #4]
 8107864:	681b      	ldr	r3, [r3, #0]
 8107866:	f042 0201 	orr.w	r2, r2, #1
 810786a:	60da      	str	r2, [r3, #12]
=======
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	68da      	ldr	r2, [r3, #12]
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	681b      	ldr	r3, [r3, #0]
 810650a:	f042 0201 	orr.w	r2, r2, #1
 810650e:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
 810786c:	687b      	ldr	r3, [r7, #4]
 810786e:	681b      	ldr	r3, [r3, #0]
 8107870:	689a      	ldr	r2, [r3, #8]
 8107872:	4b0c      	ldr	r3, [pc, #48]	; (81078a4 <HAL_TIM_Base_Start_IT+0x68>)
 8107874:	4013      	ands	r3, r2
 8107876:	60fb      	str	r3, [r7, #12]
=======
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	681b      	ldr	r3, [r3, #0]
 8106514:	689a      	ldr	r2, [r3, #8]
 8106516:	4b0c      	ldr	r3, [pc, #48]	; (8106548 <HAL_TIM_Base_Start_IT+0x68>)
 8106518:	4013      	ands	r3, r2
 810651a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
<<<<<<< HEAD
 8107878:	68fb      	ldr	r3, [r7, #12]
 810787a:	2b06      	cmp	r3, #6
 810787c:	d00b      	beq.n	8107896 <HAL_TIM_Base_Start_IT+0x5a>
 810787e:	68fb      	ldr	r3, [r7, #12]
 8107880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107884:	d007      	beq.n	8107896 <HAL_TIM_Base_Start_IT+0x5a>
=======
 810651c:	68fb      	ldr	r3, [r7, #12]
 810651e:	2b06      	cmp	r3, #6
 8106520:	d00b      	beq.n	810653a <HAL_TIM_Base_Start_IT+0x5a>
 8106522:	68fb      	ldr	r3, [r7, #12]
 8106524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106528:	d007      	beq.n	810653a <HAL_TIM_Base_Start_IT+0x5a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8107886:	687b      	ldr	r3, [r7, #4]
 8107888:	681b      	ldr	r3, [r3, #0]
 810788a:	681a      	ldr	r2, [r3, #0]
 810788c:	687b      	ldr	r3, [r7, #4]
 810788e:	681b      	ldr	r3, [r3, #0]
 8107890:	f042 0201 	orr.w	r2, r2, #1
 8107894:	601a      	str	r2, [r3, #0]
=======
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	681a      	ldr	r2, [r3, #0]
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	f042 0201 	orr.w	r2, r2, #1
 8106538:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8107896:	2300      	movs	r3, #0
=======
 810653a:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8107898:	4618      	mov	r0, r3
 810789a:	3714      	adds	r7, #20
 810789c:	46bd      	mov	sp, r7
 810789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078a2:	4770      	bx	lr
 81078a4:	00010007 	.word	0x00010007
=======
 810653c:	4618      	mov	r0, r3
 810653e:	3714      	adds	r7, #20
 8106540:	46bd      	mov	sp, r7
 8106542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106546:	4770      	bx	lr
 8106548:	00010007 	.word	0x00010007
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081078a8 <HAL_TIM_IRQHandler>:
=======
0810654c <HAL_TIM_IRQHandler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 81078a8:	b580      	push	{r7, lr}
 81078aa:	b082      	sub	sp, #8
 81078ac:	af00      	add	r7, sp, #0
 81078ae:	6078      	str	r0, [r7, #4]
=======
 810654c:	b580      	push	{r7, lr}
 810654e:	b082      	sub	sp, #8
 8106550:	af00      	add	r7, sp, #0
 8106552:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
<<<<<<< HEAD
 81078b0:	687b      	ldr	r3, [r7, #4]
 81078b2:	681b      	ldr	r3, [r3, #0]
 81078b4:	691b      	ldr	r3, [r3, #16]
 81078b6:	f003 0302 	and.w	r3, r3, #2
 81078ba:	2b02      	cmp	r3, #2
 81078bc:	d122      	bne.n	8107904 <HAL_TIM_IRQHandler+0x5c>
=======
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	691b      	ldr	r3, [r3, #16]
 810655a:	f003 0302 	and.w	r3, r3, #2
 810655e:	2b02      	cmp	r3, #2
 8106560:	d122      	bne.n	81065a8 <HAL_TIM_IRQHandler+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
<<<<<<< HEAD
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	681b      	ldr	r3, [r3, #0]
 81078c2:	68db      	ldr	r3, [r3, #12]
 81078c4:	f003 0302 	and.w	r3, r3, #2
 81078c8:	2b02      	cmp	r3, #2
 81078ca:	d11b      	bne.n	8107904 <HAL_TIM_IRQHandler+0x5c>
=======
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	681b      	ldr	r3, [r3, #0]
 8106566:	68db      	ldr	r3, [r3, #12]
 8106568:	f003 0302 	and.w	r3, r3, #2
 810656c:	2b02      	cmp	r3, #2
 810656e:	d11b      	bne.n	81065a8 <HAL_TIM_IRQHandler+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 81078cc:	687b      	ldr	r3, [r7, #4]
 81078ce:	681b      	ldr	r3, [r3, #0]
 81078d0:	f06f 0202 	mvn.w	r2, #2
 81078d4:	611a      	str	r2, [r3, #16]
=======
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	681b      	ldr	r3, [r3, #0]
 8106574:	f06f 0202 	mvn.w	r2, #2
 8106578:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
<<<<<<< HEAD
 81078d6:	687b      	ldr	r3, [r7, #4]
 81078d8:	2201      	movs	r2, #1
 81078da:	771a      	strb	r2, [r3, #28]
=======
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	2201      	movs	r2, #1
 810657e:	771a      	strb	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
<<<<<<< HEAD
 81078dc:	687b      	ldr	r3, [r7, #4]
 81078de:	681b      	ldr	r3, [r3, #0]
 81078e0:	699b      	ldr	r3, [r3, #24]
 81078e2:	f003 0303 	and.w	r3, r3, #3
 81078e6:	2b00      	cmp	r3, #0
 81078e8:	d003      	beq.n	81078f2 <HAL_TIM_IRQHandler+0x4a>
=======
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	699b      	ldr	r3, [r3, #24]
 8106586:	f003 0303 	and.w	r3, r3, #3
 810658a:	2b00      	cmp	r3, #0
 810658c:	d003      	beq.n	8106596 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 81078ea:	6878      	ldr	r0, [r7, #4]
 81078ec:	f000 f905 	bl	8107afa <HAL_TIM_IC_CaptureCallback>
 81078f0:	e005      	b.n	81078fe <HAL_TIM_IRQHandler+0x56>
=======
 810658e:	6878      	ldr	r0, [r7, #4]
 8106590:	f000 f905 	bl	810679e <HAL_TIM_IC_CaptureCallback>
 8106594:	e005      	b.n	81065a2 <HAL_TIM_IRQHandler+0x56>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 81078f2:	6878      	ldr	r0, [r7, #4]
 81078f4:	f000 f8f7 	bl	8107ae6 <HAL_TIM_OC_DelayElapsedCallback>
=======
 8106596:	6878      	ldr	r0, [r7, #4]
 8106598:	f000 f8f7 	bl	810678a <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          HAL_TIM_PWM_PulseFinishedCallback(htim);
<<<<<<< HEAD
 81078f8:	6878      	ldr	r0, [r7, #4]
 81078fa:	f000 f908 	bl	8107b0e <HAL_TIM_PWM_PulseFinishedCallback>
=======
 810659c:	6878      	ldr	r0, [r7, #4]
 810659e:	f000 f908 	bl	81067b2 <HAL_TIM_PWM_PulseFinishedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 81078fe:	687b      	ldr	r3, [r7, #4]
 8107900:	2200      	movs	r2, #0
 8107902:	771a      	strb	r2, [r3, #28]
=======
 81065a2:	687b      	ldr	r3, [r7, #4]
 81065a4:	2200      	movs	r2, #0
 81065a6:	771a      	strb	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8107904:	687b      	ldr	r3, [r7, #4]
 8107906:	681b      	ldr	r3, [r3, #0]
 8107908:	691b      	ldr	r3, [r3, #16]
 810790a:	f003 0304 	and.w	r3, r3, #4
 810790e:	2b04      	cmp	r3, #4
 8107910:	d122      	bne.n	8107958 <HAL_TIM_IRQHandler+0xb0>
=======
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	691b      	ldr	r3, [r3, #16]
 81065ae:	f003 0304 	and.w	r3, r3, #4
 81065b2:	2b04      	cmp	r3, #4
 81065b4:	d122      	bne.n	81065fc <HAL_TIM_IRQHandler+0xb0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
<<<<<<< HEAD
 8107912:	687b      	ldr	r3, [r7, #4]
 8107914:	681b      	ldr	r3, [r3, #0]
 8107916:	68db      	ldr	r3, [r3, #12]
 8107918:	f003 0304 	and.w	r3, r3, #4
 810791c:	2b04      	cmp	r3, #4
 810791e:	d11b      	bne.n	8107958 <HAL_TIM_IRQHandler+0xb0>
=======
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	681b      	ldr	r3, [r3, #0]
 81065ba:	68db      	ldr	r3, [r3, #12]
 81065bc:	f003 0304 	and.w	r3, r3, #4
 81065c0:	2b04      	cmp	r3, #4
 81065c2:	d11b      	bne.n	81065fc <HAL_TIM_IRQHandler+0xb0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	681b      	ldr	r3, [r3, #0]
 8107924:	f06f 0204 	mvn.w	r2, #4
 8107928:	611a      	str	r2, [r3, #16]
=======
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	681b      	ldr	r3, [r3, #0]
 81065c8:	f06f 0204 	mvn.w	r2, #4
 81065cc:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
<<<<<<< HEAD
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	2202      	movs	r2, #2
 810792e:	771a      	strb	r2, [r3, #28]
=======
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	2202      	movs	r2, #2
 81065d2:	771a      	strb	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
<<<<<<< HEAD
 8107930:	687b      	ldr	r3, [r7, #4]
 8107932:	681b      	ldr	r3, [r3, #0]
 8107934:	699b      	ldr	r3, [r3, #24]
 8107936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810793a:	2b00      	cmp	r3, #0
 810793c:	d003      	beq.n	8107946 <HAL_TIM_IRQHandler+0x9e>
=======
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	681b      	ldr	r3, [r3, #0]
 81065d8:	699b      	ldr	r3, [r3, #24]
 81065da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81065de:	2b00      	cmp	r3, #0
 81065e0:	d003      	beq.n	81065ea <HAL_TIM_IRQHandler+0x9e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 810793e:	6878      	ldr	r0, [r7, #4]
 8107940:	f000 f8db 	bl	8107afa <HAL_TIM_IC_CaptureCallback>
 8107944:	e005      	b.n	8107952 <HAL_TIM_IRQHandler+0xaa>
=======
 81065e2:	6878      	ldr	r0, [r7, #4]
 81065e4:	f000 f8db 	bl	810679e <HAL_TIM_IC_CaptureCallback>
 81065e8:	e005      	b.n	81065f6 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8107946:	6878      	ldr	r0, [r7, #4]
 8107948:	f000 f8cd 	bl	8107ae6 <HAL_TIM_OC_DelayElapsedCallback>
=======
 81065ea:	6878      	ldr	r0, [r7, #4]
 81065ec:	f000 f8cd 	bl	810678a <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        HAL_TIM_PWM_PulseFinishedCallback(htim);
<<<<<<< HEAD
 810794c:	6878      	ldr	r0, [r7, #4]
 810794e:	f000 f8de 	bl	8107b0e <HAL_TIM_PWM_PulseFinishedCallback>
=======
 81065f0:	6878      	ldr	r0, [r7, #4]
 81065f2:	f000 f8de 	bl	81067b2 <HAL_TIM_PWM_PulseFinishedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	2200      	movs	r2, #0
 8107956:	771a      	strb	r2, [r3, #28]
=======
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	2200      	movs	r2, #0
 81065fa:	771a      	strb	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	681b      	ldr	r3, [r3, #0]
 810795c:	691b      	ldr	r3, [r3, #16]
 810795e:	f003 0308 	and.w	r3, r3, #8
 8107962:	2b08      	cmp	r3, #8
 8107964:	d122      	bne.n	81079ac <HAL_TIM_IRQHandler+0x104>
=======
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	691b      	ldr	r3, [r3, #16]
 8106602:	f003 0308 	and.w	r3, r3, #8
 8106606:	2b08      	cmp	r3, #8
 8106608:	d122      	bne.n	8106650 <HAL_TIM_IRQHandler+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
<<<<<<< HEAD
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	681b      	ldr	r3, [r3, #0]
 810796a:	68db      	ldr	r3, [r3, #12]
 810796c:	f003 0308 	and.w	r3, r3, #8
 8107970:	2b08      	cmp	r3, #8
 8107972:	d11b      	bne.n	81079ac <HAL_TIM_IRQHandler+0x104>
=======
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	68db      	ldr	r3, [r3, #12]
 8106610:	f003 0308 	and.w	r3, r3, #8
 8106614:	2b08      	cmp	r3, #8
 8106616:	d11b      	bne.n	8106650 <HAL_TIM_IRQHandler+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 8107974:	687b      	ldr	r3, [r7, #4]
 8107976:	681b      	ldr	r3, [r3, #0]
 8107978:	f06f 0208 	mvn.w	r2, #8
 810797c:	611a      	str	r2, [r3, #16]
=======
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	681b      	ldr	r3, [r3, #0]
 810661c:	f06f 0208 	mvn.w	r2, #8
 8106620:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
<<<<<<< HEAD
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	2204      	movs	r2, #4
 8107982:	771a      	strb	r2, [r3, #28]
=======
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	2204      	movs	r2, #4
 8106626:	771a      	strb	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
<<<<<<< HEAD
 8107984:	687b      	ldr	r3, [r7, #4]
 8107986:	681b      	ldr	r3, [r3, #0]
 8107988:	69db      	ldr	r3, [r3, #28]
 810798a:	f003 0303 	and.w	r3, r3, #3
 810798e:	2b00      	cmp	r3, #0
 8107990:	d003      	beq.n	810799a <HAL_TIM_IRQHandler+0xf2>
=======
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	69db      	ldr	r3, [r3, #28]
 810662e:	f003 0303 	and.w	r3, r3, #3
 8106632:	2b00      	cmp	r3, #0
 8106634:	d003      	beq.n	810663e <HAL_TIM_IRQHandler+0xf2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8107992:	6878      	ldr	r0, [r7, #4]
 8107994:	f000 f8b1 	bl	8107afa <HAL_TIM_IC_CaptureCallback>
 8107998:	e005      	b.n	81079a6 <HAL_TIM_IRQHandler+0xfe>
=======
 8106636:	6878      	ldr	r0, [r7, #4]
 8106638:	f000 f8b1 	bl	810679e <HAL_TIM_IC_CaptureCallback>
 810663c:	e005      	b.n	810664a <HAL_TIM_IRQHandler+0xfe>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 810799a:	6878      	ldr	r0, [r7, #4]
 810799c:	f000 f8a3 	bl	8107ae6 <HAL_TIM_OC_DelayElapsedCallback>
=======
 810663e:	6878      	ldr	r0, [r7, #4]
 8106640:	f000 f8a3 	bl	810678a <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        HAL_TIM_PWM_PulseFinishedCallback(htim);
<<<<<<< HEAD
 81079a0:	6878      	ldr	r0, [r7, #4]
 81079a2:	f000 f8b4 	bl	8107b0e <HAL_TIM_PWM_PulseFinishedCallback>
=======
 8106644:	6878      	ldr	r0, [r7, #4]
 8106646:	f000 f8b4 	bl	81067b2 <HAL_TIM_PWM_PulseFinishedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	2200      	movs	r2, #0
 81079aa:	771a      	strb	r2, [r3, #28]
=======
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	2200      	movs	r2, #0
 810664e:	771a      	strb	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 81079ac:	687b      	ldr	r3, [r7, #4]
 81079ae:	681b      	ldr	r3, [r3, #0]
 81079b0:	691b      	ldr	r3, [r3, #16]
 81079b2:	f003 0310 	and.w	r3, r3, #16
 81079b6:	2b10      	cmp	r3, #16
 81079b8:	d122      	bne.n	8107a00 <HAL_TIM_IRQHandler+0x158>
=======
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	691b      	ldr	r3, [r3, #16]
 8106656:	f003 0310 	and.w	r3, r3, #16
 810665a:	2b10      	cmp	r3, #16
 810665c:	d122      	bne.n	81066a4 <HAL_TIM_IRQHandler+0x158>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
<<<<<<< HEAD
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	681b      	ldr	r3, [r3, #0]
 81079be:	68db      	ldr	r3, [r3, #12]
 81079c0:	f003 0310 	and.w	r3, r3, #16
 81079c4:	2b10      	cmp	r3, #16
 81079c6:	d11b      	bne.n	8107a00 <HAL_TIM_IRQHandler+0x158>
=======
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	68db      	ldr	r3, [r3, #12]
 8106664:	f003 0310 	and.w	r3, r3, #16
 8106668:	2b10      	cmp	r3, #16
 810666a:	d11b      	bne.n	81066a4 <HAL_TIM_IRQHandler+0x158>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 81079c8:	687b      	ldr	r3, [r7, #4]
 81079ca:	681b      	ldr	r3, [r3, #0]
 81079cc:	f06f 0210 	mvn.w	r2, #16
 81079d0:	611a      	str	r2, [r3, #16]
=======
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	f06f 0210 	mvn.w	r2, #16
 8106674:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
<<<<<<< HEAD
 81079d2:	687b      	ldr	r3, [r7, #4]
 81079d4:	2208      	movs	r2, #8
 81079d6:	771a      	strb	r2, [r3, #28]
=======
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	2208      	movs	r2, #8
 810667a:	771a      	strb	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
<<<<<<< HEAD
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	681b      	ldr	r3, [r3, #0]
 81079dc:	69db      	ldr	r3, [r3, #28]
 81079de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81079e2:	2b00      	cmp	r3, #0
 81079e4:	d003      	beq.n	81079ee <HAL_TIM_IRQHandler+0x146>
=======
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	681b      	ldr	r3, [r3, #0]
 8106680:	69db      	ldr	r3, [r3, #28]
 8106682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106686:	2b00      	cmp	r3, #0
 8106688:	d003      	beq.n	8106692 <HAL_TIM_IRQHandler+0x146>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 81079e6:	6878      	ldr	r0, [r7, #4]
 81079e8:	f000 f887 	bl	8107afa <HAL_TIM_IC_CaptureCallback>
 81079ec:	e005      	b.n	81079fa <HAL_TIM_IRQHandler+0x152>
=======
 810668a:	6878      	ldr	r0, [r7, #4]
 810668c:	f000 f887 	bl	810679e <HAL_TIM_IC_CaptureCallback>
 8106690:	e005      	b.n	810669e <HAL_TIM_IRQHandler+0x152>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 81079ee:	6878      	ldr	r0, [r7, #4]
 81079f0:	f000 f879 	bl	8107ae6 <HAL_TIM_OC_DelayElapsedCallback>
=======
 8106692:	6878      	ldr	r0, [r7, #4]
 8106694:	f000 f879 	bl	810678a <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        HAL_TIM_PWM_PulseFinishedCallback(htim);
<<<<<<< HEAD
 81079f4:	6878      	ldr	r0, [r7, #4]
 81079f6:	f000 f88a 	bl	8107b0e <HAL_TIM_PWM_PulseFinishedCallback>
=======
 8106698:	6878      	ldr	r0, [r7, #4]
 810669a:	f000 f88a 	bl	81067b2 <HAL_TIM_PWM_PulseFinishedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 81079fa:	687b      	ldr	r3, [r7, #4]
 81079fc:	2200      	movs	r2, #0
 81079fe:	771a      	strb	r2, [r3, #28]
=======
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	2200      	movs	r2, #0
 81066a2:	771a      	strb	r2, [r3, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	681b      	ldr	r3, [r3, #0]
 8107a04:	691b      	ldr	r3, [r3, #16]
 8107a06:	f003 0301 	and.w	r3, r3, #1
 8107a0a:	2b01      	cmp	r3, #1
 8107a0c:	d10e      	bne.n	8107a2c <HAL_TIM_IRQHandler+0x184>
=======
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	681b      	ldr	r3, [r3, #0]
 81066a8:	691b      	ldr	r3, [r3, #16]
 81066aa:	f003 0301 	and.w	r3, r3, #1
 81066ae:	2b01      	cmp	r3, #1
 81066b0:	d10e      	bne.n	81066d0 <HAL_TIM_IRQHandler+0x184>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
<<<<<<< HEAD
 8107a0e:	687b      	ldr	r3, [r7, #4]
 8107a10:	681b      	ldr	r3, [r3, #0]
 8107a12:	68db      	ldr	r3, [r3, #12]
 8107a14:	f003 0301 	and.w	r3, r3, #1
 8107a18:	2b01      	cmp	r3, #1
 8107a1a:	d107      	bne.n	8107a2c <HAL_TIM_IRQHandler+0x184>
=======
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	681b      	ldr	r3, [r3, #0]
 81066b6:	68db      	ldr	r3, [r3, #12]
 81066b8:	f003 0301 	and.w	r3, r3, #1
 81066bc:	2b01      	cmp	r3, #1
 81066be:	d107      	bne.n	81066d0 <HAL_TIM_IRQHandler+0x184>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	681b      	ldr	r3, [r3, #0]
 8107a20:	f06f 0201 	mvn.w	r2, #1
 8107a24:	611a      	str	r2, [r3, #16]
=======
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	f06f 0201 	mvn.w	r2, #1
 81066c8:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8107a26:	6878      	ldr	r0, [r7, #4]
 8107a28:	f7f9 fedc 	bl	81017e4 <HAL_TIM_PeriodElapsedCallback>
=======
 81066ca:	6878      	ldr	r0, [r7, #4]
 81066cc:	f7fb f832 	bl	8101734 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	691b      	ldr	r3, [r3, #16]
 8107a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107a36:	2b80      	cmp	r3, #128	; 0x80
 8107a38:	d10e      	bne.n	8107a58 <HAL_TIM_IRQHandler+0x1b0>
=======
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	681b      	ldr	r3, [r3, #0]
 81066d4:	691b      	ldr	r3, [r3, #16]
 81066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066da:	2b80      	cmp	r3, #128	; 0x80
 81066dc:	d10e      	bne.n	81066fc <HAL_TIM_IRQHandler+0x1b0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
<<<<<<< HEAD
 8107a3a:	687b      	ldr	r3, [r7, #4]
 8107a3c:	681b      	ldr	r3, [r3, #0]
 8107a3e:	68db      	ldr	r3, [r3, #12]
 8107a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107a44:	2b80      	cmp	r3, #128	; 0x80
 8107a46:	d107      	bne.n	8107a58 <HAL_TIM_IRQHandler+0x1b0>
=======
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	681b      	ldr	r3, [r3, #0]
 81066e2:	68db      	ldr	r3, [r3, #12]
 81066e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066e8:	2b80      	cmp	r3, #128	; 0x80
 81066ea:	d107      	bne.n	81066fc <HAL_TIM_IRQHandler+0x1b0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
<<<<<<< HEAD
 8107a48:	687b      	ldr	r3, [r7, #4]
 8107a4a:	681b      	ldr	r3, [r3, #0]
 8107a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8107a50:	611a      	str	r2, [r3, #16]
=======
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81066f4:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8107a52:	6878      	ldr	r0, [r7, #4]
 8107a54:	f000 f914 	bl	8107c80 <HAL_TIMEx_BreakCallback>
=======
 81066f6:	6878      	ldr	r0, [r7, #4]
 81066f8:	f000 f914 	bl	8106924 <HAL_TIMEx_BreakCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< HEAD
 8107a58:	687b      	ldr	r3, [r7, #4]
 8107a5a:	681b      	ldr	r3, [r3, #0]
 8107a5c:	691b      	ldr	r3, [r3, #16]
 8107a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107a66:	d10e      	bne.n	8107a86 <HAL_TIM_IRQHandler+0x1de>
=======
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	681b      	ldr	r3, [r3, #0]
 8106700:	691b      	ldr	r3, [r3, #16]
 8106702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810670a:	d10e      	bne.n	810672a <HAL_TIM_IRQHandler+0x1de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
<<<<<<< HEAD
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	681b      	ldr	r3, [r3, #0]
 8107a6c:	68db      	ldr	r3, [r3, #12]
 8107a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107a72:	2b80      	cmp	r3, #128	; 0x80
 8107a74:	d107      	bne.n	8107a86 <HAL_TIM_IRQHandler+0x1de>
=======
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	681b      	ldr	r3, [r3, #0]
 8106710:	68db      	ldr	r3, [r3, #12]
 8106712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106716:	2b80      	cmp	r3, #128	; 0x80
 8106718:	d107      	bne.n	810672a <HAL_TIM_IRQHandler+0x1de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
<<<<<<< HEAD
 8107a76:	687b      	ldr	r3, [r7, #4]
 8107a78:	681b      	ldr	r3, [r3, #0]
 8107a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8107a7e:	611a      	str	r2, [r3, #16]
=======
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8106722:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 8107a80:	6878      	ldr	r0, [r7, #4]
 8107a82:	f000 f907 	bl	8107c94 <HAL_TIMEx_Break2Callback>
=======
 8106724:	6878      	ldr	r0, [r7, #4]
 8106726:	f000 f907 	bl	8106938 <HAL_TIMEx_Break2Callback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	681b      	ldr	r3, [r3, #0]
 8107a8a:	691b      	ldr	r3, [r3, #16]
 8107a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a90:	2b40      	cmp	r3, #64	; 0x40
 8107a92:	d10e      	bne.n	8107ab2 <HAL_TIM_IRQHandler+0x20a>
=======
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	681b      	ldr	r3, [r3, #0]
 810672e:	691b      	ldr	r3, [r3, #16]
 8106730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106734:	2b40      	cmp	r3, #64	; 0x40
 8106736:	d10e      	bne.n	8106756 <HAL_TIM_IRQHandler+0x20a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
<<<<<<< HEAD
 8107a94:	687b      	ldr	r3, [r7, #4]
 8107a96:	681b      	ldr	r3, [r3, #0]
 8107a98:	68db      	ldr	r3, [r3, #12]
 8107a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a9e:	2b40      	cmp	r3, #64	; 0x40
 8107aa0:	d107      	bne.n	8107ab2 <HAL_TIM_IRQHandler+0x20a>
=======
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	681b      	ldr	r3, [r3, #0]
 810673c:	68db      	ldr	r3, [r3, #12]
 810673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106742:	2b40      	cmp	r3, #64	; 0x40
 8106744:	d107      	bne.n	8106756 <HAL_TIM_IRQHandler+0x20a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
<<<<<<< HEAD
 8107aa2:	687b      	ldr	r3, [r7, #4]
 8107aa4:	681b      	ldr	r3, [r3, #0]
 8107aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8107aaa:	611a      	str	r2, [r3, #16]
=======
 8106746:	687b      	ldr	r3, [r7, #4]
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810674e:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8107aac:	6878      	ldr	r0, [r7, #4]
 8107aae:	f000 f838 	bl	8107b22 <HAL_TIM_TriggerCallback>
=======
 8106750:	6878      	ldr	r0, [r7, #4]
 8106752:	f000 f838 	bl	81067c6 <HAL_TIM_TriggerCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8107ab2:	687b      	ldr	r3, [r7, #4]
 8107ab4:	681b      	ldr	r3, [r3, #0]
 8107ab6:	691b      	ldr	r3, [r3, #16]
 8107ab8:	f003 0320 	and.w	r3, r3, #32
 8107abc:	2b20      	cmp	r3, #32
 8107abe:	d10e      	bne.n	8107ade <HAL_TIM_IRQHandler+0x236>
=======
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	691b      	ldr	r3, [r3, #16]
 810675c:	f003 0320 	and.w	r3, r3, #32
 8106760:	2b20      	cmp	r3, #32
 8106762:	d10e      	bne.n	8106782 <HAL_TIM_IRQHandler+0x236>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
<<<<<<< HEAD
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	681b      	ldr	r3, [r3, #0]
 8107ac4:	68db      	ldr	r3, [r3, #12]
 8107ac6:	f003 0320 	and.w	r3, r3, #32
 8107aca:	2b20      	cmp	r3, #32
 8107acc:	d107      	bne.n	8107ade <HAL_TIM_IRQHandler+0x236>
=======
 8106764:	687b      	ldr	r3, [r7, #4]
 8106766:	681b      	ldr	r3, [r3, #0]
 8106768:	68db      	ldr	r3, [r3, #12]
 810676a:	f003 0320 	and.w	r3, r3, #32
 810676e:	2b20      	cmp	r3, #32
 8106770:	d107      	bne.n	8106782 <HAL_TIM_IRQHandler+0x236>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
<<<<<<< HEAD
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	681b      	ldr	r3, [r3, #0]
 8107ad2:	f06f 0220 	mvn.w	r2, #32
 8107ad6:	611a      	str	r2, [r3, #16]
=======
 8106772:	687b      	ldr	r3, [r7, #4]
 8106774:	681b      	ldr	r3, [r3, #0]
 8106776:	f06f 0220 	mvn.w	r2, #32
 810677a:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8107ad8:	6878      	ldr	r0, [r7, #4]
 8107ada:	f000 f8c7 	bl	8107c6c <HAL_TIMEx_CommutCallback>
=======
 810677c:	6878      	ldr	r0, [r7, #4]
 810677e:	f000 f8c7 	bl	8106910 <HAL_TIMEx_CommutCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8107ade:	bf00      	nop
 8107ae0:	3708      	adds	r7, #8
 8107ae2:	46bd      	mov	sp, r7
 8107ae4:	bd80      	pop	{r7, pc}
=======
 8106782:	bf00      	nop
 8106784:	3708      	adds	r7, #8
 8106786:	46bd      	mov	sp, r7
 8106788:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107ae6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
0810678a <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8107ae6:	b480      	push	{r7}
 8107ae8:	b083      	sub	sp, #12
 8107aea:	af00      	add	r7, sp, #0
 8107aec:	6078      	str	r0, [r7, #4]
=======
 810678a:	b480      	push	{r7}
 810678c:	b083      	sub	sp, #12
 810678e:	af00      	add	r7, sp, #0
 8106790:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8107aee:	bf00      	nop
 8107af0:	370c      	adds	r7, #12
 8107af2:	46bd      	mov	sp, r7
 8107af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107af8:	4770      	bx	lr
=======
 8106792:	bf00      	nop
 8106794:	370c      	adds	r7, #12
 8106796:	46bd      	mov	sp, r7
 8106798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810679c:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107afa <HAL_TIM_IC_CaptureCallback>:
=======
0810679e <HAL_TIM_IC_CaptureCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8107afa:	b480      	push	{r7}
 8107afc:	b083      	sub	sp, #12
 8107afe:	af00      	add	r7, sp, #0
 8107b00:	6078      	str	r0, [r7, #4]
=======
 810679e:	b480      	push	{r7}
 81067a0:	b083      	sub	sp, #12
 81067a2:	af00      	add	r7, sp, #0
 81067a4:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8107b02:	bf00      	nop
 8107b04:	370c      	adds	r7, #12
 8107b06:	46bd      	mov	sp, r7
 8107b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b0c:	4770      	bx	lr
=======
 81067a6:	bf00      	nop
 81067a8:	370c      	adds	r7, #12
 81067aa:	46bd      	mov	sp, r7
 81067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b0:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107b0e <HAL_TIM_PWM_PulseFinishedCallback>:
=======
081067b2 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8107b0e:	b480      	push	{r7}
 8107b10:	b083      	sub	sp, #12
 8107b12:	af00      	add	r7, sp, #0
 8107b14:	6078      	str	r0, [r7, #4]
=======
 81067b2:	b480      	push	{r7}
 81067b4:	b083      	sub	sp, #12
 81067b6:	af00      	add	r7, sp, #0
 81067b8:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8107b16:	bf00      	nop
 8107b18:	370c      	adds	r7, #12
 8107b1a:	46bd      	mov	sp, r7
 8107b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b20:	4770      	bx	lr
=======
 81067ba:	bf00      	nop
 81067bc:	370c      	adds	r7, #12
 81067be:	46bd      	mov	sp, r7
 81067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067c4:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107b22 <HAL_TIM_TriggerCallback>:
=======
081067c6 <HAL_TIM_TriggerCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8107b22:	b480      	push	{r7}
 8107b24:	b083      	sub	sp, #12
 8107b26:	af00      	add	r7, sp, #0
 8107b28:	6078      	str	r0, [r7, #4]
=======
 81067c6:	b480      	push	{r7}
 81067c8:	b083      	sub	sp, #12
 81067ca:	af00      	add	r7, sp, #0
 81067cc:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8107b2a:	bf00      	nop
 8107b2c:	370c      	adds	r7, #12
 8107b2e:	46bd      	mov	sp, r7
 8107b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b34:	4770      	bx	lr
=======
 81067ce:	bf00      	nop
 81067d0:	370c      	adds	r7, #12
 81067d2:	46bd      	mov	sp, r7
 81067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067d8:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08107b38 <TIM_Base_SetConfig>:
=======
081067dc <TIM_Base_SetConfig>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8107b38:	b480      	push	{r7}
 8107b3a:	b085      	sub	sp, #20
 8107b3c:	af00      	add	r7, sp, #0
 8107b3e:	6078      	str	r0, [r7, #4]
 8107b40:	6039      	str	r1, [r7, #0]
=======
 81067dc:	b480      	push	{r7}
 81067de:	b085      	sub	sp, #20
 81067e0:	af00      	add	r7, sp, #0
 81067e2:	6078      	str	r0, [r7, #4]
 81067e4:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
<<<<<<< HEAD
 8107b42:	687b      	ldr	r3, [r7, #4]
 8107b44:	681b      	ldr	r3, [r3, #0]
 8107b46:	60fb      	str	r3, [r7, #12]
=======
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
<<<<<<< HEAD
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	4a40      	ldr	r2, [pc, #256]	; (8107c4c <TIM_Base_SetConfig+0x114>)
 8107b4c:	4293      	cmp	r3, r2
 8107b4e:	d013      	beq.n	8107b78 <TIM_Base_SetConfig+0x40>
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b56:	d00f      	beq.n	8107b78 <TIM_Base_SetConfig+0x40>
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	4a3d      	ldr	r2, [pc, #244]	; (8107c50 <TIM_Base_SetConfig+0x118>)
 8107b5c:	4293      	cmp	r3, r2
 8107b5e:	d00b      	beq.n	8107b78 <TIM_Base_SetConfig+0x40>
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	4a3c      	ldr	r2, [pc, #240]	; (8107c54 <TIM_Base_SetConfig+0x11c>)
 8107b64:	4293      	cmp	r3, r2
 8107b66:	d007      	beq.n	8107b78 <TIM_Base_SetConfig+0x40>
 8107b68:	687b      	ldr	r3, [r7, #4]
 8107b6a:	4a3b      	ldr	r2, [pc, #236]	; (8107c58 <TIM_Base_SetConfig+0x120>)
 8107b6c:	4293      	cmp	r3, r2
 8107b6e:	d003      	beq.n	8107b78 <TIM_Base_SetConfig+0x40>
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	4a3a      	ldr	r2, [pc, #232]	; (8107c5c <TIM_Base_SetConfig+0x124>)
 8107b74:	4293      	cmp	r3, r2
 8107b76:	d108      	bne.n	8107b8a <TIM_Base_SetConfig+0x52>
=======
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	4a40      	ldr	r2, [pc, #256]	; (81068f0 <TIM_Base_SetConfig+0x114>)
 81067f0:	4293      	cmp	r3, r2
 81067f2:	d013      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81067fa:	d00f      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	4a3d      	ldr	r2, [pc, #244]	; (81068f4 <TIM_Base_SetConfig+0x118>)
 8106800:	4293      	cmp	r3, r2
 8106802:	d00b      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	4a3c      	ldr	r2, [pc, #240]	; (81068f8 <TIM_Base_SetConfig+0x11c>)
 8106808:	4293      	cmp	r3, r2
 810680a:	d007      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	4a3b      	ldr	r2, [pc, #236]	; (81068fc <TIM_Base_SetConfig+0x120>)
 8106810:	4293      	cmp	r3, r2
 8106812:	d003      	beq.n	810681c <TIM_Base_SetConfig+0x40>
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	4a3a      	ldr	r2, [pc, #232]	; (8106900 <TIM_Base_SetConfig+0x124>)
 8106818:	4293      	cmp	r3, r2
 810681a:	d108      	bne.n	810682e <TIM_Base_SetConfig+0x52>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
<<<<<<< HEAD
 8107b78:	68fb      	ldr	r3, [r7, #12]
 8107b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b7e:	60fb      	str	r3, [r7, #12]
=======
 810681c:	68fb      	ldr	r3, [r7, #12]
 810681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106822:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    tmpcr1 |= Structure->CounterMode;
<<<<<<< HEAD
 8107b80:	683b      	ldr	r3, [r7, #0]
 8107b82:	685b      	ldr	r3, [r3, #4]
 8107b84:	68fa      	ldr	r2, [r7, #12]
 8107b86:	4313      	orrs	r3, r2
 8107b88:	60fb      	str	r3, [r7, #12]
=======
 8106824:	683b      	ldr	r3, [r7, #0]
 8106826:	685b      	ldr	r3, [r3, #4]
 8106828:	68fa      	ldr	r2, [r7, #12]
 810682a:	4313      	orrs	r3, r2
 810682c:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
<<<<<<< HEAD
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	4a2f      	ldr	r2, [pc, #188]	; (8107c4c <TIM_Base_SetConfig+0x114>)
 8107b8e:	4293      	cmp	r3, r2
 8107b90:	d01f      	beq.n	8107bd2 <TIM_Base_SetConfig+0x9a>
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b98:	d01b      	beq.n	8107bd2 <TIM_Base_SetConfig+0x9a>
 8107b9a:	687b      	ldr	r3, [r7, #4]
 8107b9c:	4a2c      	ldr	r2, [pc, #176]	; (8107c50 <TIM_Base_SetConfig+0x118>)
 8107b9e:	4293      	cmp	r3, r2
 8107ba0:	d017      	beq.n	8107bd2 <TIM_Base_SetConfig+0x9a>
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	4a2b      	ldr	r2, [pc, #172]	; (8107c54 <TIM_Base_SetConfig+0x11c>)
 8107ba6:	4293      	cmp	r3, r2
 8107ba8:	d013      	beq.n	8107bd2 <TIM_Base_SetConfig+0x9a>
 8107baa:	687b      	ldr	r3, [r7, #4]
 8107bac:	4a2a      	ldr	r2, [pc, #168]	; (8107c58 <TIM_Base_SetConfig+0x120>)
 8107bae:	4293      	cmp	r3, r2
 8107bb0:	d00f      	beq.n	8107bd2 <TIM_Base_SetConfig+0x9a>
 8107bb2:	687b      	ldr	r3, [r7, #4]
 8107bb4:	4a29      	ldr	r2, [pc, #164]	; (8107c5c <TIM_Base_SetConfig+0x124>)
 8107bb6:	4293      	cmp	r3, r2
 8107bb8:	d00b      	beq.n	8107bd2 <TIM_Base_SetConfig+0x9a>
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	4a28      	ldr	r2, [pc, #160]	; (8107c60 <TIM_Base_SetConfig+0x128>)
 8107bbe:	4293      	cmp	r3, r2
 8107bc0:	d007      	beq.n	8107bd2 <TIM_Base_SetConfig+0x9a>
 8107bc2:	687b      	ldr	r3, [r7, #4]
 8107bc4:	4a27      	ldr	r2, [pc, #156]	; (8107c64 <TIM_Base_SetConfig+0x12c>)
 8107bc6:	4293      	cmp	r3, r2
 8107bc8:	d003      	beq.n	8107bd2 <TIM_Base_SetConfig+0x9a>
 8107bca:	687b      	ldr	r3, [r7, #4]
 8107bcc:	4a26      	ldr	r2, [pc, #152]	; (8107c68 <TIM_Base_SetConfig+0x130>)
 8107bce:	4293      	cmp	r3, r2
 8107bd0:	d108      	bne.n	8107be4 <TIM_Base_SetConfig+0xac>
=======
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	4a2f      	ldr	r2, [pc, #188]	; (81068f0 <TIM_Base_SetConfig+0x114>)
 8106832:	4293      	cmp	r3, r2
 8106834:	d01f      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810683c:	d01b      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	4a2c      	ldr	r2, [pc, #176]	; (81068f4 <TIM_Base_SetConfig+0x118>)
 8106842:	4293      	cmp	r3, r2
 8106844:	d017      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	4a2b      	ldr	r2, [pc, #172]	; (81068f8 <TIM_Base_SetConfig+0x11c>)
 810684a:	4293      	cmp	r3, r2
 810684c:	d013      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 810684e:	687b      	ldr	r3, [r7, #4]
 8106850:	4a2a      	ldr	r2, [pc, #168]	; (81068fc <TIM_Base_SetConfig+0x120>)
 8106852:	4293      	cmp	r3, r2
 8106854:	d00f      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	4a29      	ldr	r2, [pc, #164]	; (8106900 <TIM_Base_SetConfig+0x124>)
 810685a:	4293      	cmp	r3, r2
 810685c:	d00b      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	4a28      	ldr	r2, [pc, #160]	; (8106904 <TIM_Base_SetConfig+0x128>)
 8106862:	4293      	cmp	r3, r2
 8106864:	d007      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	4a27      	ldr	r2, [pc, #156]	; (8106908 <TIM_Base_SetConfig+0x12c>)
 810686a:	4293      	cmp	r3, r2
 810686c:	d003      	beq.n	8106876 <TIM_Base_SetConfig+0x9a>
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	4a26      	ldr	r2, [pc, #152]	; (810690c <TIM_Base_SetConfig+0x130>)
 8106872:	4293      	cmp	r3, r2
 8106874:	d108      	bne.n	8106888 <TIM_Base_SetConfig+0xac>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
<<<<<<< HEAD
 8107bd2:	68fb      	ldr	r3, [r7, #12]
 8107bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107bd8:	60fb      	str	r3, [r7, #12]
=======
 8106876:	68fb      	ldr	r3, [r7, #12]
 8106878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810687c:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
<<<<<<< HEAD
 8107bda:	683b      	ldr	r3, [r7, #0]
 8107bdc:	68db      	ldr	r3, [r3, #12]
 8107bde:	68fa      	ldr	r2, [r7, #12]
 8107be0:	4313      	orrs	r3, r2
 8107be2:	60fb      	str	r3, [r7, #12]
=======
 810687e:	683b      	ldr	r3, [r7, #0]
 8106880:	68db      	ldr	r3, [r3, #12]
 8106882:	68fa      	ldr	r2, [r7, #12]
 8106884:	4313      	orrs	r3, r2
 8106886:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8107be4:	68fb      	ldr	r3, [r7, #12]
 8107be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107bea:	683b      	ldr	r3, [r7, #0]
 8107bec:	695b      	ldr	r3, [r3, #20]
 8107bee:	4313      	orrs	r3, r2
 8107bf0:	60fb      	str	r3, [r7, #12]
=======
 8106888:	68fb      	ldr	r3, [r7, #12]
 810688a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810688e:	683b      	ldr	r3, [r7, #0]
 8106890:	695b      	ldr	r3, [r3, #20]
 8106892:	4313      	orrs	r3, r2
 8106894:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  TIMx->CR1 = tmpcr1;
<<<<<<< HEAD
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	68fa      	ldr	r2, [r7, #12]
 8107bf6:	601a      	str	r2, [r3, #0]
=======
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	68fa      	ldr	r2, [r7, #12]
 810689a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
<<<<<<< HEAD
 8107bf8:	683b      	ldr	r3, [r7, #0]
 8107bfa:	689a      	ldr	r2, [r3, #8]
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 810689c:	683b      	ldr	r3, [r7, #0]
 810689e:	689a      	ldr	r2, [r3, #8]
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
<<<<<<< HEAD
 8107c00:	683b      	ldr	r3, [r7, #0]
 8107c02:	681a      	ldr	r2, [r3, #0]
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	629a      	str	r2, [r3, #40]	; 0x28
=======
 81068a4:	683b      	ldr	r3, [r7, #0]
 81068a6:	681a      	ldr	r2, [r3, #0]
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
<<<<<<< HEAD
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	4a10      	ldr	r2, [pc, #64]	; (8107c4c <TIM_Base_SetConfig+0x114>)
 8107c0c:	4293      	cmp	r3, r2
 8107c0e:	d00f      	beq.n	8107c30 <TIM_Base_SetConfig+0xf8>
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	4a12      	ldr	r2, [pc, #72]	; (8107c5c <TIM_Base_SetConfig+0x124>)
 8107c14:	4293      	cmp	r3, r2
 8107c16:	d00b      	beq.n	8107c30 <TIM_Base_SetConfig+0xf8>
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	4a11      	ldr	r2, [pc, #68]	; (8107c60 <TIM_Base_SetConfig+0x128>)
 8107c1c:	4293      	cmp	r3, r2
 8107c1e:	d007      	beq.n	8107c30 <TIM_Base_SetConfig+0xf8>
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	4a10      	ldr	r2, [pc, #64]	; (8107c64 <TIM_Base_SetConfig+0x12c>)
 8107c24:	4293      	cmp	r3, r2
 8107c26:	d003      	beq.n	8107c30 <TIM_Base_SetConfig+0xf8>
 8107c28:	687b      	ldr	r3, [r7, #4]
 8107c2a:	4a0f      	ldr	r2, [pc, #60]	; (8107c68 <TIM_Base_SetConfig+0x130>)
 8107c2c:	4293      	cmp	r3, r2
 8107c2e:	d103      	bne.n	8107c38 <TIM_Base_SetConfig+0x100>
=======
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	4a10      	ldr	r2, [pc, #64]	; (81068f0 <TIM_Base_SetConfig+0x114>)
 81068b0:	4293      	cmp	r3, r2
 81068b2:	d00f      	beq.n	81068d4 <TIM_Base_SetConfig+0xf8>
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	4a12      	ldr	r2, [pc, #72]	; (8106900 <TIM_Base_SetConfig+0x124>)
 81068b8:	4293      	cmp	r3, r2
 81068ba:	d00b      	beq.n	81068d4 <TIM_Base_SetConfig+0xf8>
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	4a11      	ldr	r2, [pc, #68]	; (8106904 <TIM_Base_SetConfig+0x128>)
 81068c0:	4293      	cmp	r3, r2
 81068c2:	d007      	beq.n	81068d4 <TIM_Base_SetConfig+0xf8>
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	4a10      	ldr	r2, [pc, #64]	; (8106908 <TIM_Base_SetConfig+0x12c>)
 81068c8:	4293      	cmp	r3, r2
 81068ca:	d003      	beq.n	81068d4 <TIM_Base_SetConfig+0xf8>
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	4a0f      	ldr	r2, [pc, #60]	; (810690c <TIM_Base_SetConfig+0x130>)
 81068d0:	4293      	cmp	r3, r2
 81068d2:	d103      	bne.n	81068dc <TIM_Base_SetConfig+0x100>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
<<<<<<< HEAD
 8107c30:	683b      	ldr	r3, [r7, #0]
 8107c32:	691a      	ldr	r2, [r3, #16]
 8107c34:	687b      	ldr	r3, [r7, #4]
 8107c36:	631a      	str	r2, [r3, #48]	; 0x30
=======
 81068d4:	683b      	ldr	r3, [r7, #0]
 81068d6:	691a      	ldr	r2, [r3, #16]
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8107c38:	687b      	ldr	r3, [r7, #4]
 8107c3a:	2201      	movs	r2, #1
 8107c3c:	615a      	str	r2, [r3, #20]
=======
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	2201      	movs	r2, #1
 81068e0:	615a      	str	r2, [r3, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8107c3e:	bf00      	nop
 8107c40:	3714      	adds	r7, #20
 8107c42:	46bd      	mov	sp, r7
 8107c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c48:	4770      	bx	lr
 8107c4a:	bf00      	nop
 8107c4c:	40010000 	.word	0x40010000
 8107c50:	40000400 	.word	0x40000400
 8107c54:	40000800 	.word	0x40000800
 8107c58:	40000c00 	.word	0x40000c00
 8107c5c:	40010400 	.word	0x40010400
 8107c60:	40014000 	.word	0x40014000
 8107c64:	40014400 	.word	0x40014400
 8107c68:	40014800 	.word	0x40014800
=======
 81068e2:	bf00      	nop
 81068e4:	3714      	adds	r7, #20
 81068e6:	46bd      	mov	sp, r7
 81068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068ec:	4770      	bx	lr
 81068ee:	bf00      	nop
 81068f0:	40010000 	.word	0x40010000
 81068f4:	40000400 	.word	0x40000400
 81068f8:	40000800 	.word	0x40000800
 81068fc:	40000c00 	.word	0x40000c00
 8106900:	40010400 	.word	0x40010400
 8106904:	40014000 	.word	0x40014000
 8106908:	40014400 	.word	0x40014400
 810690c:	40014800 	.word	0x40014800
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107c6c <HAL_TIMEx_CommutCallback>:
=======
08106910 <HAL_TIMEx_CommutCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8107c6c:	b480      	push	{r7}
 8107c6e:	b083      	sub	sp, #12
 8107c70:	af00      	add	r7, sp, #0
 8107c72:	6078      	str	r0, [r7, #4]
=======
 8106910:	b480      	push	{r7}
 8106912:	b083      	sub	sp, #12
 8106914:	af00      	add	r7, sp, #0
 8106916:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8107c74:	bf00      	nop
 8107c76:	370c      	adds	r7, #12
 8107c78:	46bd      	mov	sp, r7
 8107c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c7e:	4770      	bx	lr
=======
 8106918:	bf00      	nop
 810691a:	370c      	adds	r7, #12
 810691c:	46bd      	mov	sp, r7
 810691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106922:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107c80 <HAL_TIMEx_BreakCallback>:
=======
08106924 <HAL_TIMEx_BreakCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8107c80:	b480      	push	{r7}
 8107c82:	b083      	sub	sp, #12
 8107c84:	af00      	add	r7, sp, #0
 8107c86:	6078      	str	r0, [r7, #4]
=======
 8106924:	b480      	push	{r7}
 8106926:	b083      	sub	sp, #12
 8106928:	af00      	add	r7, sp, #0
 810692a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8107c88:	bf00      	nop
 8107c8a:	370c      	adds	r7, #12
 8107c8c:	46bd      	mov	sp, r7
 8107c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c92:	4770      	bx	lr
=======
 810692c:	bf00      	nop
 810692e:	370c      	adds	r7, #12
 8106930:	46bd      	mov	sp, r7
 8106932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106936:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107c94 <HAL_TIMEx_Break2Callback>:
=======
08106938 <HAL_TIMEx_Break2Callback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8107c94:	b480      	push	{r7}
 8107c96:	b083      	sub	sp, #12
 8107c98:	af00      	add	r7, sp, #0
 8107c9a:	6078      	str	r0, [r7, #4]
=======
 8106938:	b480      	push	{r7}
 810693a:	b083      	sub	sp, #12
 810693c:	af00      	add	r7, sp, #0
 810693e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8107c9c:	bf00      	nop
 8107c9e:	370c      	adds	r7, #12
 8107ca0:	46bd      	mov	sp, r7
 8107ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ca6:	4770      	bx	lr
=======
 8106940:	bf00      	nop
 8106942:	370c      	adds	r7, #12
 8106944:	46bd      	mov	sp, r7
 8106946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810694a:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107ca8 <HAL_UART_Init>:
=======
0810694c <HAL_UART_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8107ca8:	b580      	push	{r7, lr}
 8107caa:	b082      	sub	sp, #8
 8107cac:	af00      	add	r7, sp, #0
 8107cae:	6078      	str	r0, [r7, #4]
=======
 810694c:	b580      	push	{r7, lr}
 810694e:	b082      	sub	sp, #8
 8106950:	af00      	add	r7, sp, #0
 8106952:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the UART handle allocation */
  if (huart == NULL)
<<<<<<< HEAD
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	2b00      	cmp	r3, #0
 8107cb4:	d101      	bne.n	8107cba <HAL_UART_Init+0x12>
=======
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	2b00      	cmp	r3, #0
 8106958:	d101      	bne.n	810695e <HAL_UART_Init+0x12>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8107cb6:	2301      	movs	r3, #1
 8107cb8:	e042      	b.n	8107d40 <HAL_UART_Init+0x98>
=======
 810695a:	2301      	movs	r3, #1
 810695c:	e042      	b.n	81069e4 <HAL_UART_Init+0x98>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107cc0:	2b00      	cmp	r3, #0
 8107cc2:	d106      	bne.n	8107cd2 <HAL_UART_Init+0x2a>
=======
 810695e:	687b      	ldr	r3, [r7, #4]
 8106960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106964:	2b00      	cmp	r3, #0
 8106966:	d106      	bne.n	8106976 <HAL_UART_Init+0x2a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	2200      	movs	r2, #0
 8107cc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	2200      	movs	r2, #0
 810696c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8107ccc:	6878      	ldr	r0, [r7, #4]
 8107cce:	f7fa f9f1 	bl	81020b4 <HAL_UART_MspInit>
=======
 8106970:	6878      	ldr	r0, [r7, #4]
 8106972:	f7fb fad7 	bl	8101f24 <HAL_UART_MspInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	2224      	movs	r2, #36	; 0x24
 8107cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	2224      	movs	r2, #36	; 0x24
 810697a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  __HAL_UART_DISABLE(huart);
<<<<<<< HEAD
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	681b      	ldr	r3, [r3, #0]
 8107cde:	681a      	ldr	r2, [r3, #0]
 8107ce0:	687b      	ldr	r3, [r7, #4]
 8107ce2:	681b      	ldr	r3, [r3, #0]
 8107ce4:	f022 0201 	bic.w	r2, r2, #1
 8107ce8:	601a      	str	r2, [r3, #0]
=======
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	681b      	ldr	r3, [r3, #0]
 8106982:	681a      	ldr	r2, [r3, #0]
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	f022 0201 	bic.w	r2, r2, #1
 810698c:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 8107cea:	6878      	ldr	r0, [r7, #4]
 8107cec:	f000 f968 	bl	8107fc0 <UART_SetConfig>
 8107cf0:	4603      	mov	r3, r0
 8107cf2:	2b01      	cmp	r3, #1
 8107cf4:	d101      	bne.n	8107cfa <HAL_UART_Init+0x52>
=======
 810698e:	6878      	ldr	r0, [r7, #4]
 8106990:	f000 f968 	bl	8106c64 <UART_SetConfig>
 8106994:	4603      	mov	r3, r0
 8106996:	2b01      	cmp	r3, #1
 8106998:	d101      	bne.n	810699e <HAL_UART_Init+0x52>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8107cf6:	2301      	movs	r3, #1
 8107cf8:	e022      	b.n	8107d40 <HAL_UART_Init+0x98>
=======
 810699a:	2301      	movs	r3, #1
 810699c:	e022      	b.n	81069e4 <HAL_UART_Init+0x98>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 8107cfa:	687b      	ldr	r3, [r7, #4]
 8107cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107cfe:	2b00      	cmp	r3, #0
 8107d00:	d002      	beq.n	8107d08 <HAL_UART_Init+0x60>
=======
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069a2:	2b00      	cmp	r3, #0
 81069a4:	d002      	beq.n	81069ac <HAL_UART_Init+0x60>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    UART_AdvFeatureConfig(huart);
<<<<<<< HEAD
 8107d02:	6878      	ldr	r0, [r7, #4]
 8107d04:	f000 fec2 	bl	8108a8c <UART_AdvFeatureConfig>
=======
 81069a6:	6878      	ldr	r0, [r7, #4]
 81069a8:	f000 ff0c 	bl	81077c4 <UART_AdvFeatureConfig>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	681b      	ldr	r3, [r3, #0]
 8107d0c:	685a      	ldr	r2, [r3, #4]
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	681b      	ldr	r3, [r3, #0]
 8107d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107d16:	605a      	str	r2, [r3, #4]
=======
 81069ac:	687b      	ldr	r3, [r7, #4]
 81069ae:	681b      	ldr	r3, [r3, #0]
 81069b0:	685a      	ldr	r2, [r3, #4]
 81069b2:	687b      	ldr	r3, [r7, #4]
 81069b4:	681b      	ldr	r3, [r3, #0]
 81069b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81069ba:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
<<<<<<< HEAD
 8107d18:	687b      	ldr	r3, [r7, #4]
 8107d1a:	681b      	ldr	r3, [r3, #0]
 8107d1c:	689a      	ldr	r2, [r3, #8]
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	681b      	ldr	r3, [r3, #0]
 8107d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107d26:	609a      	str	r2, [r3, #8]
=======
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	681b      	ldr	r3, [r3, #0]
 81069c0:	689a      	ldr	r2, [r3, #8]
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	681b      	ldr	r3, [r3, #0]
 81069c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81069ca:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  __HAL_UART_ENABLE(huart);
<<<<<<< HEAD
 8107d28:	687b      	ldr	r3, [r7, #4]
 8107d2a:	681b      	ldr	r3, [r3, #0]
 8107d2c:	681a      	ldr	r2, [r3, #0]
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	681b      	ldr	r3, [r3, #0]
 8107d32:	f042 0201 	orr.w	r2, r2, #1
 8107d36:	601a      	str	r2, [r3, #0]
=======
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	681a      	ldr	r2, [r3, #0]
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	f042 0201 	orr.w	r2, r2, #1
 81069da:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
<<<<<<< HEAD
 8107d38:	6878      	ldr	r0, [r7, #4]
 8107d3a:	f000 ff49 	bl	8108bd0 <UART_CheckIdleState>
 8107d3e:	4603      	mov	r3, r0
=======
 81069dc:	6878      	ldr	r0, [r7, #4]
 81069de:	f000 ff93 	bl	8107908 <UART_CheckIdleState>
 81069e2:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8107d40:	4618      	mov	r0, r3
 8107d42:	3708      	adds	r7, #8
 8107d44:	46bd      	mov	sp, r7
 8107d46:	bd80      	pop	{r7, pc}
=======
 81069e4:	4618      	mov	r0, r3
 81069e6:	3708      	adds	r7, #8
 81069e8:	46bd      	mov	sp, r7
 81069ea:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107d48 <HAL_UART_Transmit>:
=======
081069ec <HAL_UART_Transmit>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8107d48:	b580      	push	{r7, lr}
 8107d4a:	b08a      	sub	sp, #40	; 0x28
 8107d4c:	af02      	add	r7, sp, #8
 8107d4e:	60f8      	str	r0, [r7, #12]
 8107d50:	60b9      	str	r1, [r7, #8]
 8107d52:	603b      	str	r3, [r7, #0]
 8107d54:	4613      	mov	r3, r2
 8107d56:	80fb      	strh	r3, [r7, #6]
=======
 81069ec:	b580      	push	{r7, lr}
 81069ee:	b08a      	sub	sp, #40	; 0x28
 81069f0:	af02      	add	r7, sp, #8
 81069f2:	60f8      	str	r0, [r7, #12]
 81069f4:	60b9      	str	r1, [r7, #8]
 81069f6:	603b      	str	r3, [r7, #0]
 81069f8:	4613      	mov	r3, r2
 81069fa:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 8107d58:	68fb      	ldr	r3, [r7, #12]
 8107d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107d5e:	2b20      	cmp	r3, #32
 8107d60:	f040 8083 	bne.w	8107e6a <HAL_UART_Transmit+0x122>
=======
 81069fc:	68fb      	ldr	r3, [r7, #12]
 81069fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106a02:	2b20      	cmp	r3, #32
 8106a04:	f040 8083 	bne.w	8106b0e <HAL_UART_Transmit+0x122>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if ((pData == NULL) || (Size == 0U))
<<<<<<< HEAD
 8107d64:	68bb      	ldr	r3, [r7, #8]
 8107d66:	2b00      	cmp	r3, #0
 8107d68:	d002      	beq.n	8107d70 <HAL_UART_Transmit+0x28>
 8107d6a:	88fb      	ldrh	r3, [r7, #6]
 8107d6c:	2b00      	cmp	r3, #0
 8107d6e:	d101      	bne.n	8107d74 <HAL_UART_Transmit+0x2c>
=======
 8106a08:	68bb      	ldr	r3, [r7, #8]
 8106a0a:	2b00      	cmp	r3, #0
 8106a0c:	d002      	beq.n	8106a14 <HAL_UART_Transmit+0x28>
 8106a0e:	88fb      	ldrh	r3, [r7, #6]
 8106a10:	2b00      	cmp	r3, #0
 8106a12:	d101      	bne.n	8106a18 <HAL_UART_Transmit+0x2c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      return  HAL_ERROR;
<<<<<<< HEAD
 8107d70:	2301      	movs	r3, #1
 8107d72:	e07b      	b.n	8107e6c <HAL_UART_Transmit+0x124>
=======
 8106a14:	2301      	movs	r3, #1
 8106a16:	e07b      	b.n	8106b10 <HAL_UART_Transmit+0x124>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    __HAL_LOCK(huart);
<<<<<<< HEAD
 8107d74:	68fb      	ldr	r3, [r7, #12]
 8107d76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107d7a:	2b01      	cmp	r3, #1
 8107d7c:	d101      	bne.n	8107d82 <HAL_UART_Transmit+0x3a>
 8107d7e:	2302      	movs	r3, #2
 8107d80:	e074      	b.n	8107e6c <HAL_UART_Transmit+0x124>
 8107d82:	68fb      	ldr	r3, [r7, #12]
 8107d84:	2201      	movs	r2, #1
 8107d86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8106a18:	68fb      	ldr	r3, [r7, #12]
 8106a1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8106a1e:	2b01      	cmp	r3, #1
 8106a20:	d101      	bne.n	8106a26 <HAL_UART_Transmit+0x3a>
 8106a22:	2302      	movs	r3, #2
 8106a24:	e074      	b.n	8106b10 <HAL_UART_Transmit+0x124>
 8106a26:	68fb      	ldr	r3, [r7, #12]
 8106a28:	2201      	movs	r2, #1
 8106a2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8107d8a:	68fb      	ldr	r3, [r7, #12]
 8107d8c:	2200      	movs	r2, #0
 8107d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
=======
 8106a2e:	68fb      	ldr	r3, [r7, #12]
 8106a30:	2200      	movs	r2, #0
 8106a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    huart->gState = HAL_UART_STATE_BUSY_TX;
<<<<<<< HEAD
 8107d92:	68fb      	ldr	r3, [r7, #12]
 8107d94:	2221      	movs	r2, #33	; 0x21
 8107d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8106a36:	68fb      	ldr	r3, [r7, #12]
 8106a38:	2221      	movs	r2, #33	; 0x21
 8106a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8107d9a:	f7fa fad7 	bl	810234c <HAL_GetTick>
 8107d9e:	6178      	str	r0, [r7, #20]
=======
 8106a3e:	f7fb fbbd 	bl	81021bc <HAL_GetTick>
 8106a42:	6178      	str	r0, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    huart->TxXferSize  = Size;
<<<<<<< HEAD
 8107da0:	68fb      	ldr	r3, [r7, #12]
 8107da2:	88fa      	ldrh	r2, [r7, #6]
 8107da4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
=======
 8106a44:	68fb      	ldr	r3, [r7, #12]
 8106a46:	88fa      	ldrh	r2, [r7, #6]
 8106a48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    huart->TxXferCount = Size;
<<<<<<< HEAD
 8107da8:	68fb      	ldr	r3, [r7, #12]
 8107daa:	88fa      	ldrh	r2, [r7, #6]
 8107dac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
=======
 8106a4c:	68fb      	ldr	r3, [r7, #12]
 8106a4e:	88fa      	ldrh	r2, [r7, #6]
 8106a50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8107db0:	68fb      	ldr	r3, [r7, #12]
 8107db2:	689b      	ldr	r3, [r3, #8]
 8107db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107db8:	d108      	bne.n	8107dcc <HAL_UART_Transmit+0x84>
 8107dba:	68fb      	ldr	r3, [r7, #12]
 8107dbc:	691b      	ldr	r3, [r3, #16]
 8107dbe:	2b00      	cmp	r3, #0
 8107dc0:	d104      	bne.n	8107dcc <HAL_UART_Transmit+0x84>
=======
 8106a54:	68fb      	ldr	r3, [r7, #12]
 8106a56:	689b      	ldr	r3, [r3, #8]
 8106a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106a5c:	d108      	bne.n	8106a70 <HAL_UART_Transmit+0x84>
 8106a5e:	68fb      	ldr	r3, [r7, #12]
 8106a60:	691b      	ldr	r3, [r3, #16]
 8106a62:	2b00      	cmp	r3, #0
 8106a64:	d104      	bne.n	8106a70 <HAL_UART_Transmit+0x84>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      pdata8bits  = NULL;
<<<<<<< HEAD
 8107dc2:	2300      	movs	r3, #0
 8107dc4:	61fb      	str	r3, [r7, #28]
=======
 8106a66:	2300      	movs	r3, #0
 8106a68:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      pdata16bits = (uint16_t *) pData;
<<<<<<< HEAD
 8107dc6:	68bb      	ldr	r3, [r7, #8]
 8107dc8:	61bb      	str	r3, [r7, #24]
 8107dca:	e003      	b.n	8107dd4 <HAL_UART_Transmit+0x8c>
=======
 8106a6a:	68bb      	ldr	r3, [r7, #8]
 8106a6c:	61bb      	str	r3, [r7, #24]
 8106a6e:	e003      	b.n	8106a78 <HAL_UART_Transmit+0x8c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8107dcc:	68bb      	ldr	r3, [r7, #8]
 8107dce:	61fb      	str	r3, [r7, #28]
=======
 8106a70:	68bb      	ldr	r3, [r7, #8]
 8106a72:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      pdata16bits = NULL;
<<<<<<< HEAD
 8107dd0:	2300      	movs	r3, #0
 8107dd2:	61bb      	str	r3, [r7, #24]
=======
 8106a74:	2300      	movs	r3, #0
 8106a76:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8107dd4:	68fb      	ldr	r3, [r7, #12]
 8107dd6:	2200      	movs	r2, #0
 8107dd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8106a78:	68fb      	ldr	r3, [r7, #12]
 8106a7a:	2200      	movs	r2, #0
 8106a7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 8107ddc:	e02c      	b.n	8107e38 <HAL_UART_Transmit+0xf0>
=======
 8106a80:	e02c      	b.n	8106adc <HAL_UART_Transmit+0xf0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 8107dde:	683b      	ldr	r3, [r7, #0]
 8107de0:	9300      	str	r3, [sp, #0]
 8107de2:	697b      	ldr	r3, [r7, #20]
 8107de4:	2200      	movs	r2, #0
 8107de6:	2180      	movs	r1, #128	; 0x80
 8107de8:	68f8      	ldr	r0, [r7, #12]
 8107dea:	f000 ff39 	bl	8108c60 <UART_WaitOnFlagUntilTimeout>
 8107dee:	4603      	mov	r3, r0
 8107df0:	2b00      	cmp	r3, #0
 8107df2:	d001      	beq.n	8107df8 <HAL_UART_Transmit+0xb0>
=======
 8106a82:	683b      	ldr	r3, [r7, #0]
 8106a84:	9300      	str	r3, [sp, #0]
 8106a86:	697b      	ldr	r3, [r7, #20]
 8106a88:	2200      	movs	r2, #0
 8106a8a:	2180      	movs	r1, #128	; 0x80
 8106a8c:	68f8      	ldr	r0, [r7, #12]
 8106a8e:	f000 ff83 	bl	8107998 <UART_WaitOnFlagUntilTimeout>
 8106a92:	4603      	mov	r3, r0
 8106a94:	2b00      	cmp	r3, #0
 8106a96:	d001      	beq.n	8106a9c <HAL_UART_Transmit+0xb0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        return HAL_TIMEOUT;
<<<<<<< HEAD
 8107df4:	2303      	movs	r3, #3
 8107df6:	e039      	b.n	8107e6c <HAL_UART_Transmit+0x124>
=======
 8106a98:	2303      	movs	r3, #3
 8106a9a:	e039      	b.n	8106b10 <HAL_UART_Transmit+0x124>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      if (pdata8bits == NULL)
<<<<<<< HEAD
 8107df8:	69fb      	ldr	r3, [r7, #28]
 8107dfa:	2b00      	cmp	r3, #0
 8107dfc:	d10b      	bne.n	8107e16 <HAL_UART_Transmit+0xce>
=======
 8106a9c:	69fb      	ldr	r3, [r7, #28]
 8106a9e:	2b00      	cmp	r3, #0
 8106aa0:	d10b      	bne.n	8106aba <HAL_UART_Transmit+0xce>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
<<<<<<< HEAD
 8107dfe:	69bb      	ldr	r3, [r7, #24]
 8107e00:	881b      	ldrh	r3, [r3, #0]
 8107e02:	461a      	mov	r2, r3
 8107e04:	68fb      	ldr	r3, [r7, #12]
 8107e06:	681b      	ldr	r3, [r3, #0]
 8107e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107e0c:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8106aa2:	69bb      	ldr	r3, [r7, #24]
 8106aa4:	881b      	ldrh	r3, [r3, #0]
 8106aa6:	461a      	mov	r2, r3
 8106aa8:	68fb      	ldr	r3, [r7, #12]
 8106aaa:	681b      	ldr	r3, [r3, #0]
 8106aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106ab0:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pdata16bits++;
<<<<<<< HEAD
 8107e0e:	69bb      	ldr	r3, [r7, #24]
 8107e10:	3302      	adds	r3, #2
 8107e12:	61bb      	str	r3, [r7, #24]
 8107e14:	e007      	b.n	8107e26 <HAL_UART_Transmit+0xde>
=======
 8106ab2:	69bb      	ldr	r3, [r7, #24]
 8106ab4:	3302      	adds	r3, #2
 8106ab6:	61bb      	str	r3, [r7, #24]
 8106ab8:	e007      	b.n	8106aca <HAL_UART_Transmit+0xde>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8107e16:	69fb      	ldr	r3, [r7, #28]
 8107e18:	781a      	ldrb	r2, [r3, #0]
 8107e1a:	68fb      	ldr	r3, [r7, #12]
 8107e1c:	681b      	ldr	r3, [r3, #0]
 8107e1e:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8106aba:	69fb      	ldr	r3, [r7, #28]
 8106abc:	781a      	ldrb	r2, [r3, #0]
 8106abe:	68fb      	ldr	r3, [r7, #12]
 8106ac0:	681b      	ldr	r3, [r3, #0]
 8106ac2:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pdata8bits++;
<<<<<<< HEAD
 8107e20:	69fb      	ldr	r3, [r7, #28]
 8107e22:	3301      	adds	r3, #1
 8107e24:	61fb      	str	r3, [r7, #28]
=======
 8106ac4:	69fb      	ldr	r3, [r7, #28]
 8106ac6:	3301      	adds	r3, #1
 8106ac8:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      huart->TxXferCount--;
<<<<<<< HEAD
 8107e26:	68fb      	ldr	r3, [r7, #12]
 8107e28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107e2c:	b29b      	uxth	r3, r3
 8107e2e:	3b01      	subs	r3, #1
 8107e30:	b29a      	uxth	r2, r3
 8107e32:	68fb      	ldr	r3, [r7, #12]
 8107e34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
=======
 8106aca:	68fb      	ldr	r3, [r7, #12]
 8106acc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106ad0:	b29b      	uxth	r3, r3
 8106ad2:	3b01      	subs	r3, #1
 8106ad4:	b29a      	uxth	r2, r3
 8106ad6:	68fb      	ldr	r3, [r7, #12]
 8106ad8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 8107e38:	68fb      	ldr	r3, [r7, #12]
 8107e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107e3e:	b29b      	uxth	r3, r3
 8107e40:	2b00      	cmp	r3, #0
 8107e42:	d1cc      	bne.n	8107dde <HAL_UART_Transmit+0x96>
=======
 8106adc:	68fb      	ldr	r3, [r7, #12]
 8106ade:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106ae2:	b29b      	uxth	r3, r3
 8106ae4:	2b00      	cmp	r3, #0
 8106ae6:	d1cc      	bne.n	8106a82 <HAL_UART_Transmit+0x96>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 8107e44:	683b      	ldr	r3, [r7, #0]
 8107e46:	9300      	str	r3, [sp, #0]
 8107e48:	697b      	ldr	r3, [r7, #20]
 8107e4a:	2200      	movs	r2, #0
 8107e4c:	2140      	movs	r1, #64	; 0x40
 8107e4e:	68f8      	ldr	r0, [r7, #12]
 8107e50:	f000 ff06 	bl	8108c60 <UART_WaitOnFlagUntilTimeout>
 8107e54:	4603      	mov	r3, r0
 8107e56:	2b00      	cmp	r3, #0
 8107e58:	d001      	beq.n	8107e5e <HAL_UART_Transmit+0x116>
=======
 8106ae8:	683b      	ldr	r3, [r7, #0]
 8106aea:	9300      	str	r3, [sp, #0]
 8106aec:	697b      	ldr	r3, [r7, #20]
 8106aee:	2200      	movs	r2, #0
 8106af0:	2140      	movs	r1, #64	; 0x40
 8106af2:	68f8      	ldr	r0, [r7, #12]
 8106af4:	f000 ff50 	bl	8107998 <UART_WaitOnFlagUntilTimeout>
 8106af8:	4603      	mov	r3, r0
 8106afa:	2b00      	cmp	r3, #0
 8106afc:	d001      	beq.n	8106b02 <HAL_UART_Transmit+0x116>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      return HAL_TIMEOUT;
<<<<<<< HEAD
 8107e5a:	2303      	movs	r3, #3
 8107e5c:	e006      	b.n	8107e6c <HAL_UART_Transmit+0x124>
=======
 8106afe:	2303      	movs	r3, #3
 8106b00:	e006      	b.n	8106b10 <HAL_UART_Transmit+0x124>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8107e5e:	68fb      	ldr	r3, [r7, #12]
 8107e60:	2220      	movs	r2, #32
 8107e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8106b02:	68fb      	ldr	r3, [r7, #12]
 8106b04:	2220      	movs	r2, #32
 8106b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    return HAL_OK;
<<<<<<< HEAD
 8107e66:	2300      	movs	r3, #0
 8107e68:	e000      	b.n	8107e6c <HAL_UART_Transmit+0x124>
=======
 8106b0a:	2300      	movs	r3, #0
 8106b0c:	e000      	b.n	8106b10 <HAL_UART_Transmit+0x124>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8107e6a:	2302      	movs	r3, #2
=======
 8106b0e:	2302      	movs	r3, #2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 8107e6c:	4618      	mov	r0, r3
 8107e6e:	3720      	adds	r7, #32
 8107e70:	46bd      	mov	sp, r7
 8107e72:	bd80      	pop	{r7, pc}
=======
 8106b10:	4618      	mov	r0, r3
 8106b12:	3720      	adds	r7, #32
 8106b14:	46bd      	mov	sp, r7
 8106b16:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107e74 <HAL_UART_Receive_DMA>:
=======
08106b18 <HAL_UART_Receive_DMA>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8107e74:	b580      	push	{r7, lr}
 8107e76:	b084      	sub	sp, #16
 8107e78:	af00      	add	r7, sp, #0
 8107e7a:	60f8      	str	r0, [r7, #12]
 8107e7c:	60b9      	str	r1, [r7, #8]
 8107e7e:	4613      	mov	r3, r2
 8107e80:	80fb      	strh	r3, [r7, #6]
=======
 8106b18:	b580      	push	{r7, lr}
 8106b1a:	b084      	sub	sp, #16
 8106b1c:	af00      	add	r7, sp, #0
 8106b1e:	60f8      	str	r0, [r7, #12]
 8106b20:	60b9      	str	r1, [r7, #8]
 8106b22:	4613      	mov	r3, r2
 8106b24:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 8107e82:	68fb      	ldr	r3, [r7, #12]
 8107e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107e88:	2b20      	cmp	r3, #32
 8107e8a:	d170      	bne.n	8107f6e <HAL_UART_Receive_DMA+0xfa>
=======
 8106b26:	68fb      	ldr	r3, [r7, #12]
 8106b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106b2c:	2b20      	cmp	r3, #32
 8106b2e:	d170      	bne.n	8106c12 <HAL_UART_Receive_DMA+0xfa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    if ((pData == NULL) || (Size == 0U))
<<<<<<< HEAD
 8107e8c:	68bb      	ldr	r3, [r7, #8]
 8107e8e:	2b00      	cmp	r3, #0
 8107e90:	d002      	beq.n	8107e98 <HAL_UART_Receive_DMA+0x24>
 8107e92:	88fb      	ldrh	r3, [r7, #6]
 8107e94:	2b00      	cmp	r3, #0
 8107e96:	d101      	bne.n	8107e9c <HAL_UART_Receive_DMA+0x28>
=======
 8106b30:	68bb      	ldr	r3, [r7, #8]
 8106b32:	2b00      	cmp	r3, #0
 8106b34:	d002      	beq.n	8106b3c <HAL_UART_Receive_DMA+0x24>
 8106b36:	88fb      	ldrh	r3, [r7, #6]
 8106b38:	2b00      	cmp	r3, #0
 8106b3a:	d101      	bne.n	8106b40 <HAL_UART_Receive_DMA+0x28>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8107e98:	2301      	movs	r3, #1
 8107e9a:	e069      	b.n	8107f70 <HAL_UART_Receive_DMA+0xfc>
=======
 8106b3c:	2301      	movs	r3, #1
 8106b3e:	e069      	b.n	8106c14 <HAL_UART_Receive_DMA+0xfc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    __HAL_LOCK(huart);
<<<<<<< HEAD
 8107e9c:	68fb      	ldr	r3, [r7, #12]
 8107e9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107ea2:	2b01      	cmp	r3, #1
 8107ea4:	d101      	bne.n	8107eaa <HAL_UART_Receive_DMA+0x36>
 8107ea6:	2302      	movs	r3, #2
 8107ea8:	e062      	b.n	8107f70 <HAL_UART_Receive_DMA+0xfc>
 8107eaa:	68fb      	ldr	r3, [r7, #12]
 8107eac:	2201      	movs	r2, #1
 8107eae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8106b40:	68fb      	ldr	r3, [r7, #12]
 8106b42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8106b46:	2b01      	cmp	r3, #1
 8106b48:	d101      	bne.n	8106b4e <HAL_UART_Receive_DMA+0x36>
 8106b4a:	2302      	movs	r3, #2
 8106b4c:	e062      	b.n	8106c14 <HAL_UART_Receive_DMA+0xfc>
 8106b4e:	68fb      	ldr	r3, [r7, #12]
 8106b50:	2201      	movs	r2, #1
 8106b52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    huart->pRxBuffPtr = pData;
<<<<<<< HEAD
 8107eb2:	68fb      	ldr	r3, [r7, #12]
 8107eb4:	68ba      	ldr	r2, [r7, #8]
 8107eb6:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8106b56:	68fb      	ldr	r3, [r7, #12]
 8106b58:	68ba      	ldr	r2, [r7, #8]
 8106b5a:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    huart->RxXferSize = Size;
<<<<<<< HEAD
 8107eb8:	68fb      	ldr	r3, [r7, #12]
 8107eba:	88fa      	ldrh	r2, [r7, #6]
 8107ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
=======
 8106b5c:	68fb      	ldr	r3, [r7, #12]
 8106b5e:	88fa      	ldrh	r2, [r7, #6]
 8106b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8107ec0:	68fb      	ldr	r3, [r7, #12]
 8107ec2:	2200      	movs	r2, #0
 8107ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
=======
 8106b64:	68fb      	ldr	r3, [r7, #12]
 8106b66:	2200      	movs	r2, #0
 8106b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    huart->RxState = HAL_UART_STATE_BUSY_RX;
<<<<<<< HEAD
 8107ec8:	68fb      	ldr	r3, [r7, #12]
 8107eca:	2222      	movs	r2, #34	; 0x22
 8107ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8106b6c:	68fb      	ldr	r3, [r7, #12]
 8106b6e:	2222      	movs	r2, #34	; 0x22
 8106b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    if (huart->hdmarx != NULL)
<<<<<<< HEAD
 8107ed0:	68fb      	ldr	r3, [r7, #12]
 8107ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107ed4:	2b00      	cmp	r3, #0
 8107ed6:	d02c      	beq.n	8107f32 <HAL_UART_Receive_DMA+0xbe>
=======
 8106b74:	68fb      	ldr	r3, [r7, #12]
 8106b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b78:	2b00      	cmp	r3, #0
 8106b7a:	d02c      	beq.n	8106bd6 <HAL_UART_Receive_DMA+0xbe>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
<<<<<<< HEAD
 8107ed8:	68fb      	ldr	r3, [r7, #12]
 8107eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107edc:	4a26      	ldr	r2, [pc, #152]	; (8107f78 <HAL_UART_Receive_DMA+0x104>)
 8107ede:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8106b7c:	68fb      	ldr	r3, [r7, #12]
 8106b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b80:	4a26      	ldr	r2, [pc, #152]	; (8106c1c <HAL_UART_Receive_DMA+0x104>)
 8106b82:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
<<<<<<< HEAD
 8107ee0:	68fb      	ldr	r3, [r7, #12]
 8107ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107ee4:	4a25      	ldr	r2, [pc, #148]	; (8107f7c <HAL_UART_Receive_DMA+0x108>)
 8107ee6:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8106b84:	68fb      	ldr	r3, [r7, #12]
 8106b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b88:	4a25      	ldr	r2, [pc, #148]	; (8106c20 <HAL_UART_Receive_DMA+0x108>)
 8106b8a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
<<<<<<< HEAD
 8107ee8:	68fb      	ldr	r3, [r7, #12]
 8107eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107eec:	4a24      	ldr	r2, [pc, #144]	; (8107f80 <HAL_UART_Receive_DMA+0x10c>)
 8107eee:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 8106b8c:	68fb      	ldr	r3, [r7, #12]
 8106b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b90:	4a24      	ldr	r2, [pc, #144]	; (8106c24 <HAL_UART_Receive_DMA+0x10c>)
 8106b92:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
<<<<<<< HEAD
 8107ef0:	68fb      	ldr	r3, [r7, #12]
 8107ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107ef4:	2200      	movs	r2, #0
 8107ef6:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8106b94:	68fb      	ldr	r3, [r7, #12]
 8106b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106b98:	2200      	movs	r2, #0
 8106b9a:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
<<<<<<< HEAD
 8107ef8:	68fb      	ldr	r3, [r7, #12]
 8107efa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8107efc:	68fb      	ldr	r3, [r7, #12]
 8107efe:	681b      	ldr	r3, [r3, #0]
 8107f00:	3324      	adds	r3, #36	; 0x24
 8107f02:	4619      	mov	r1, r3
 8107f04:	68fb      	ldr	r3, [r7, #12]
 8107f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107f08:	461a      	mov	r2, r3
 8107f0a:	88fb      	ldrh	r3, [r7, #6]
 8107f0c:	f7fa fe94 	bl	8102c38 <HAL_DMA_Start_IT>
 8107f10:	4603      	mov	r3, r0
 8107f12:	2b00      	cmp	r3, #0
 8107f14:	d00d      	beq.n	8107f32 <HAL_UART_Receive_DMA+0xbe>
=======
 8106b9c:	68fb      	ldr	r3, [r7, #12]
 8106b9e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	681b      	ldr	r3, [r3, #0]
 8106ba4:	3324      	adds	r3, #36	; 0x24
 8106ba6:	4619      	mov	r1, r3
 8106ba8:	68fb      	ldr	r3, [r7, #12]
 8106baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106bac:	461a      	mov	r2, r3
 8106bae:	88fb      	ldrh	r3, [r7, #6]
 8106bb0:	f7fb ff78 	bl	8102aa4 <HAL_DMA_Start_IT>
 8106bb4:	4603      	mov	r3, r0
 8106bb6:	2b00      	cmp	r3, #0
 8106bb8:	d00d      	beq.n	8106bd6 <HAL_UART_Receive_DMA+0xbe>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
<<<<<<< HEAD
 8107f16:	68fb      	ldr	r3, [r7, #12]
 8107f18:	2210      	movs	r2, #16
 8107f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
=======
 8106bba:	68fb      	ldr	r3, [r7, #12]
 8106bbc:	2210      	movs	r2, #16
 8106bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8107f1e:	68fb      	ldr	r3, [r7, #12]
 8107f20:	2200      	movs	r2, #0
 8107f22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8106bc2:	68fb      	ldr	r3, [r7, #12]
 8106bc4:	2200      	movs	r2, #0
 8106bc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8107f26:	68fb      	ldr	r3, [r7, #12]
 8107f28:	2220      	movs	r2, #32
 8107f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8106bca:	68fb      	ldr	r3, [r7, #12]
 8106bcc:	2220      	movs	r2, #32
 8106bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        return HAL_ERROR;
<<<<<<< HEAD
 8107f2e:	2301      	movs	r3, #1
 8107f30:	e01e      	b.n	8107f70 <HAL_UART_Receive_DMA+0xfc>
=======
 8106bd2:	2301      	movs	r3, #1
 8106bd4:	e01e      	b.n	8106c14 <HAL_UART_Receive_DMA+0xfc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8107f32:	68fb      	ldr	r3, [r7, #12]
 8107f34:	2200      	movs	r2, #0
 8107f36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8106bd6:	68fb      	ldr	r3, [r7, #12]
 8106bd8:	2200      	movs	r2, #0
 8106bda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
<<<<<<< HEAD
 8107f3a:	68fb      	ldr	r3, [r7, #12]
 8107f3c:	681b      	ldr	r3, [r3, #0]
 8107f3e:	681a      	ldr	r2, [r3, #0]
 8107f40:	68fb      	ldr	r3, [r7, #12]
 8107f42:	681b      	ldr	r3, [r3, #0]
 8107f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107f48:	601a      	str	r2, [r3, #0]
=======
 8106bde:	68fb      	ldr	r3, [r7, #12]
 8106be0:	681b      	ldr	r3, [r3, #0]
 8106be2:	681a      	ldr	r2, [r3, #0]
 8106be4:	68fb      	ldr	r3, [r7, #12]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106bec:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8107f4a:	68fb      	ldr	r3, [r7, #12]
 8107f4c:	681b      	ldr	r3, [r3, #0]
 8107f4e:	689a      	ldr	r2, [r3, #8]
 8107f50:	68fb      	ldr	r3, [r7, #12]
 8107f52:	681b      	ldr	r3, [r3, #0]
 8107f54:	f042 0201 	orr.w	r2, r2, #1
 8107f58:	609a      	str	r2, [r3, #8]
=======
 8106bee:	68fb      	ldr	r3, [r7, #12]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	689a      	ldr	r2, [r3, #8]
 8106bf4:	68fb      	ldr	r3, [r7, #12]
 8106bf6:	681b      	ldr	r3, [r3, #0]
 8106bf8:	f042 0201 	orr.w	r2, r2, #1
 8106bfc:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8107f5a:	68fb      	ldr	r3, [r7, #12]
 8107f5c:	681b      	ldr	r3, [r3, #0]
 8107f5e:	689a      	ldr	r2, [r3, #8]
 8107f60:	68fb      	ldr	r3, [r7, #12]
 8107f62:	681b      	ldr	r3, [r3, #0]
 8107f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107f68:	609a      	str	r2, [r3, #8]
=======
 8106bfe:	68fb      	ldr	r3, [r7, #12]
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	689a      	ldr	r2, [r3, #8]
 8106c04:	68fb      	ldr	r3, [r7, #12]
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106c0c:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    return HAL_OK;
<<<<<<< HEAD
 8107f6a:	2300      	movs	r3, #0
 8107f6c:	e000      	b.n	8107f70 <HAL_UART_Receive_DMA+0xfc>
=======
 8106c0e:	2300      	movs	r3, #0
 8106c10:	e000      	b.n	8106c14 <HAL_UART_Receive_DMA+0xfc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8107f6e:	2302      	movs	r3, #2
=======
 8106c12:	2302      	movs	r3, #2
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 8107f70:	4618      	mov	r0, r3
 8107f72:	3710      	adds	r7, #16
 8107f74:	46bd      	mov	sp, r7
 8107f76:	bd80      	pop	{r7, pc}
 8107f78:	08108de3 	.word	0x08108de3
 8107f7c:	08108e49 	.word	0x08108e49
 8107f80:	08108e65 	.word	0x08108e65
=======
 8106c14:	4618      	mov	r0, r3
 8106c16:	3710      	adds	r7, #16
 8106c18:	46bd      	mov	sp, r7
 8106c1a:	bd80      	pop	{r7, pc}
 8106c1c:	08107b1b 	.word	0x08107b1b
 8106c20:	08107b81 	.word	0x08107b81
 8106c24:	08107b9d 	.word	0x08107b9d
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107f84 <HAL_UART_RxCpltCallback>:
=======
08106c28 <HAL_UART_RxCpltCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8107f84:	b480      	push	{r7}
 8107f86:	b083      	sub	sp, #12
 8107f88:	af00      	add	r7, sp, #0
 8107f8a:	6078      	str	r0, [r7, #4]
=======
 8106c28:	b480      	push	{r7}
 8106c2a:	b083      	sub	sp, #12
 8106c2c:	af00      	add	r7, sp, #0
 8106c2e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8107f8c:	bf00      	nop
 8107f8e:	370c      	adds	r7, #12
 8107f90:	46bd      	mov	sp, r7
 8107f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f96:	4770      	bx	lr
=======
 8106c30:	bf00      	nop
 8106c32:	370c      	adds	r7, #12
 8106c34:	46bd      	mov	sp, r7
 8106c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c3a:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107f98 <HAL_UART_RxHalfCpltCallback>:
=======
08106c3c <HAL_UART_RxHalfCpltCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8107f98:	b480      	push	{r7}
 8107f9a:	b083      	sub	sp, #12
 8107f9c:	af00      	add	r7, sp, #0
 8107f9e:	6078      	str	r0, [r7, #4]
=======
 8106c3c:	b480      	push	{r7}
 8106c3e:	b083      	sub	sp, #12
 8106c40:	af00      	add	r7, sp, #0
 8106c42:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8107fa0:	bf00      	nop
 8107fa2:	370c      	adds	r7, #12
 8107fa4:	46bd      	mov	sp, r7
 8107fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107faa:	4770      	bx	lr
=======
 8106c44:	bf00      	nop
 8106c46:	370c      	adds	r7, #12
 8106c48:	46bd      	mov	sp, r7
 8106c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c4e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107fac <HAL_UART_ErrorCallback>:
=======
08106c50 <HAL_UART_ErrorCallback>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8107fac:	b480      	push	{r7}
 8107fae:	b083      	sub	sp, #12
 8107fb0:	af00      	add	r7, sp, #0
 8107fb2:	6078      	str	r0, [r7, #4]
=======
 8106c50:	b480      	push	{r7}
 8106c52:	b083      	sub	sp, #12
 8106c54:	af00      	add	r7, sp, #0
 8106c56:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8107fb4:	bf00      	nop
 8107fb6:	370c      	adds	r7, #12
 8107fb8:	46bd      	mov	sp, r7
 8107fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fbe:	4770      	bx	lr
=======
 8106c58:	bf00      	nop
 8106c5a:	370c      	adds	r7, #12
 8106c5c:	46bd      	mov	sp, r7
 8106c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c62:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08107fc0 <UART_SetConfig>:
=======
08106c64 <UART_SetConfig>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8107fc0:	b5b0      	push	{r4, r5, r7, lr}
 8107fc2:	b08e      	sub	sp, #56	; 0x38
 8107fc4:	af00      	add	r7, sp, #0
 8107fc6:	6078      	str	r0, [r7, #4]
=======
 8106c64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8106c68:	b08e      	sub	sp, #56	; 0x38
 8106c6a:	af00      	add	r7, sp, #0
 8106c6c:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 8107fc8:	2300      	movs	r3, #0
 8107fca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
=======
 8106c6e:	2300      	movs	r3, #0
 8106c70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8107fce:	687b      	ldr	r3, [r7, #4]
 8107fd0:	689a      	ldr	r2, [r3, #8]
 8107fd2:	687b      	ldr	r3, [r7, #4]
 8107fd4:	691b      	ldr	r3, [r3, #16]
 8107fd6:	431a      	orrs	r2, r3
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	695b      	ldr	r3, [r3, #20]
 8107fdc:	431a      	orrs	r2, r3
 8107fde:	687b      	ldr	r3, [r7, #4]
 8107fe0:	69db      	ldr	r3, [r3, #28]
 8107fe2:	4313      	orrs	r3, r2
 8107fe4:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	689a      	ldr	r2, [r3, #8]
 8106c78:	687b      	ldr	r3, [r7, #4]
 8106c7a:	691b      	ldr	r3, [r3, #16]
 8106c7c:	431a      	orrs	r2, r3
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	695b      	ldr	r3, [r3, #20]
 8106c82:	431a      	orrs	r2, r3
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	69db      	ldr	r3, [r3, #28]
 8106c88:	4313      	orrs	r3, r2
 8106c8a:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  tmpreg |= (uint32_t)huart->FifoMode;
<<<<<<< HEAD
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107fec:	4313      	orrs	r3, r2
 8107fee:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106c92:	4313      	orrs	r3, r2
 8106c94:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
<<<<<<< HEAD
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	681b      	ldr	r3, [r3, #0]
 8107ff4:	681a      	ldr	r2, [r3, #0]
 8107ff6:	4bc1      	ldr	r3, [pc, #772]	; (81082fc <UART_SetConfig+0x33c>)
 8107ff8:	4013      	ands	r3, r2
 8107ffa:	687a      	ldr	r2, [r7, #4]
 8107ffc:	6812      	ldr	r2, [r2, #0]
 8107ffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8108000:	430b      	orrs	r3, r1
 8108002:	6013      	str	r3, [r2, #0]
=======
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	681b      	ldr	r3, [r3, #0]
 8106c9a:	681a      	ldr	r2, [r3, #0]
 8106c9c:	4bc2      	ldr	r3, [pc, #776]	; (8106fa8 <UART_SetConfig+0x344>)
 8106c9e:	4013      	ands	r3, r2
 8106ca0:	687a      	ldr	r2, [r7, #4]
 8106ca2:	6812      	ldr	r2, [r2, #0]
 8106ca4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106ca6:	430b      	orrs	r3, r1
 8106ca8:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	681b      	ldr	r3, [r3, #0]
 8108008:	685b      	ldr	r3, [r3, #4]
 810800a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810800e:	687b      	ldr	r3, [r7, #4]
 8108010:	68da      	ldr	r2, [r3, #12]
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	430a      	orrs	r2, r1
 8108018:	605a      	str	r2, [r3, #4]
=======
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	681b      	ldr	r3, [r3, #0]
 8106cae:	685b      	ldr	r3, [r3, #4]
 8106cb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	68da      	ldr	r2, [r3, #12]
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	681b      	ldr	r3, [r3, #0]
 8106cbc:	430a      	orrs	r2, r1
 8106cbe:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	699b      	ldr	r3, [r3, #24]
 810801e:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	699b      	ldr	r3, [r3, #24]
 8106cc4:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if (!(UART_INSTANCE_LOWPOWER(huart)))
<<<<<<< HEAD
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	4ab6      	ldr	r2, [pc, #728]	; (8108300 <UART_SetConfig+0x340>)
 8108026:	4293      	cmp	r3, r2
 8108028:	d004      	beq.n	8108034 <UART_SetConfig+0x74>
=======
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	681b      	ldr	r3, [r3, #0]
 8106cca:	4ab8      	ldr	r2, [pc, #736]	; (8106fac <UART_SetConfig+0x348>)
 8106ccc:	4293      	cmp	r3, r2
 8106cce:	d004      	beq.n	8106cda <UART_SetConfig+0x76>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    tmpreg |= huart->Init.OneBitSampling;
<<<<<<< HEAD
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	6a1b      	ldr	r3, [r3, #32]
 810802e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108030:	4313      	orrs	r3, r2
 8108032:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	6a1b      	ldr	r3, [r3, #32]
 8106cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106cd6:	4313      	orrs	r3, r2
 8106cd8:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
<<<<<<< HEAD
 8108034:	687b      	ldr	r3, [r7, #4]
 8108036:	681b      	ldr	r3, [r3, #0]
 8108038:	689b      	ldr	r3, [r3, #8]
 810803a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810803e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108042:	687a      	ldr	r2, [r7, #4]
 8108044:	6812      	ldr	r2, [r2, #0]
 8108046:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8108048:	430b      	orrs	r3, r1
 810804a:	6093      	str	r3, [r2, #8]
=======
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	681b      	ldr	r3, [r3, #0]
 8106cde:	689b      	ldr	r3, [r3, #8]
 8106ce0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8106ce4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8106ce8:	687a      	ldr	r2, [r7, #4]
 8106cea:	6812      	ldr	r2, [r2, #0]
 8106cec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106cee:	430b      	orrs	r3, r1
 8106cf0:	6093      	str	r3, [r2, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< HEAD
 810804c:	687b      	ldr	r3, [r7, #4]
 810804e:	681b      	ldr	r3, [r3, #0]
 8108050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108052:	f023 010f 	bic.w	r1, r3, #15
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810805a:	687b      	ldr	r3, [r7, #4]
 810805c:	681b      	ldr	r3, [r3, #0]
 810805e:	430a      	orrs	r2, r1
 8108060:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	681b      	ldr	r3, [r3, #0]
 8106cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cf8:	f023 010f 	bic.w	r1, r3, #15
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	681b      	ldr	r3, [r3, #0]
 8106d04:	430a      	orrs	r2, r1
 8106d06:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	681b      	ldr	r3, [r3, #0]
 8108066:	4aa7      	ldr	r2, [pc, #668]	; (8108304 <UART_SetConfig+0x344>)
 8108068:	4293      	cmp	r3, r2
 810806a:	d177      	bne.n	810815c <UART_SetConfig+0x19c>
 810806c:	4ba6      	ldr	r3, [pc, #664]	; (8108308 <UART_SetConfig+0x348>)
 810806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108074:	2b28      	cmp	r3, #40	; 0x28
 8108076:	d86d      	bhi.n	8108154 <UART_SetConfig+0x194>
 8108078:	a201      	add	r2, pc, #4	; (adr r2, 8108080 <UART_SetConfig+0xc0>)
 810807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810807e:	bf00      	nop
 8108080:	08108125 	.word	0x08108125
 8108084:	08108155 	.word	0x08108155
 8108088:	08108155 	.word	0x08108155
 810808c:	08108155 	.word	0x08108155
 8108090:	08108155 	.word	0x08108155
 8108094:	08108155 	.word	0x08108155
 8108098:	08108155 	.word	0x08108155
 810809c:	08108155 	.word	0x08108155
 81080a0:	0810812d 	.word	0x0810812d
 81080a4:	08108155 	.word	0x08108155
 81080a8:	08108155 	.word	0x08108155
 81080ac:	08108155 	.word	0x08108155
 81080b0:	08108155 	.word	0x08108155
 81080b4:	08108155 	.word	0x08108155
 81080b8:	08108155 	.word	0x08108155
 81080bc:	08108155 	.word	0x08108155
 81080c0:	08108135 	.word	0x08108135
 81080c4:	08108155 	.word	0x08108155
 81080c8:	08108155 	.word	0x08108155
 81080cc:	08108155 	.word	0x08108155
 81080d0:	08108155 	.word	0x08108155
 81080d4:	08108155 	.word	0x08108155
 81080d8:	08108155 	.word	0x08108155
 81080dc:	08108155 	.word	0x08108155
 81080e0:	0810813d 	.word	0x0810813d
 81080e4:	08108155 	.word	0x08108155
 81080e8:	08108155 	.word	0x08108155
 81080ec:	08108155 	.word	0x08108155
 81080f0:	08108155 	.word	0x08108155
 81080f4:	08108155 	.word	0x08108155
 81080f8:	08108155 	.word	0x08108155
 81080fc:	08108155 	.word	0x08108155
 8108100:	08108145 	.word	0x08108145
 8108104:	08108155 	.word	0x08108155
 8108108:	08108155 	.word	0x08108155
 810810c:	08108155 	.word	0x08108155
 8108110:	08108155 	.word	0x08108155
 8108114:	08108155 	.word	0x08108155
 8108118:	08108155 	.word	0x08108155
 810811c:	08108155 	.word	0x08108155
 8108120:	0810814d 	.word	0x0810814d
 8108124:	2301      	movs	r3, #1
 8108126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810812a:	e220      	b.n	810856e <UART_SetConfig+0x5ae>
 810812c:	2304      	movs	r3, #4
 810812e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108132:	e21c      	b.n	810856e <UART_SetConfig+0x5ae>
 8108134:	2308      	movs	r3, #8
 8108136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810813a:	e218      	b.n	810856e <UART_SetConfig+0x5ae>
 810813c:	2310      	movs	r3, #16
 810813e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108142:	e214      	b.n	810856e <UART_SetConfig+0x5ae>
 8108144:	2320      	movs	r3, #32
 8108146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810814a:	e210      	b.n	810856e <UART_SetConfig+0x5ae>
 810814c:	2340      	movs	r3, #64	; 0x40
 810814e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108152:	e20c      	b.n	810856e <UART_SetConfig+0x5ae>
 8108154:	2380      	movs	r3, #128	; 0x80
 8108156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810815a:	e208      	b.n	810856e <UART_SetConfig+0x5ae>
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	681b      	ldr	r3, [r3, #0]
 8108160:	4a6a      	ldr	r2, [pc, #424]	; (810830c <UART_SetConfig+0x34c>)
 8108162:	4293      	cmp	r3, r2
 8108164:	d130      	bne.n	81081c8 <UART_SetConfig+0x208>
 8108166:	4b68      	ldr	r3, [pc, #416]	; (8108308 <UART_SetConfig+0x348>)
 8108168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810816a:	f003 0307 	and.w	r3, r3, #7
 810816e:	2b05      	cmp	r3, #5
 8108170:	d826      	bhi.n	81081c0 <UART_SetConfig+0x200>
 8108172:	a201      	add	r2, pc, #4	; (adr r2, 8108178 <UART_SetConfig+0x1b8>)
 8108174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108178:	08108191 	.word	0x08108191
 810817c:	08108199 	.word	0x08108199
 8108180:	081081a1 	.word	0x081081a1
 8108184:	081081a9 	.word	0x081081a9
 8108188:	081081b1 	.word	0x081081b1
 810818c:	081081b9 	.word	0x081081b9
 8108190:	2300      	movs	r3, #0
 8108192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108196:	e1ea      	b.n	810856e <UART_SetConfig+0x5ae>
 8108198:	2304      	movs	r3, #4
 810819a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810819e:	e1e6      	b.n	810856e <UART_SetConfig+0x5ae>
 81081a0:	2308      	movs	r3, #8
 81081a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081a6:	e1e2      	b.n	810856e <UART_SetConfig+0x5ae>
 81081a8:	2310      	movs	r3, #16
 81081aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081ae:	e1de      	b.n	810856e <UART_SetConfig+0x5ae>
 81081b0:	2320      	movs	r3, #32
 81081b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081b6:	e1da      	b.n	810856e <UART_SetConfig+0x5ae>
 81081b8:	2340      	movs	r3, #64	; 0x40
 81081ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081be:	e1d6      	b.n	810856e <UART_SetConfig+0x5ae>
 81081c0:	2380      	movs	r3, #128	; 0x80
 81081c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081c6:	e1d2      	b.n	810856e <UART_SetConfig+0x5ae>
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	681b      	ldr	r3, [r3, #0]
 81081cc:	4a50      	ldr	r2, [pc, #320]	; (8108310 <UART_SetConfig+0x350>)
 81081ce:	4293      	cmp	r3, r2
 81081d0:	d130      	bne.n	8108234 <UART_SetConfig+0x274>
 81081d2:	4b4d      	ldr	r3, [pc, #308]	; (8108308 <UART_SetConfig+0x348>)
 81081d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81081d6:	f003 0307 	and.w	r3, r3, #7
 81081da:	2b05      	cmp	r3, #5
 81081dc:	d826      	bhi.n	810822c <UART_SetConfig+0x26c>
 81081de:	a201      	add	r2, pc, #4	; (adr r2, 81081e4 <UART_SetConfig+0x224>)
 81081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081e4:	081081fd 	.word	0x081081fd
 81081e8:	08108205 	.word	0x08108205
 81081ec:	0810820d 	.word	0x0810820d
 81081f0:	08108215 	.word	0x08108215
 81081f4:	0810821d 	.word	0x0810821d
 81081f8:	08108225 	.word	0x08108225
 81081fc:	2300      	movs	r3, #0
 81081fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108202:	e1b4      	b.n	810856e <UART_SetConfig+0x5ae>
 8108204:	2304      	movs	r3, #4
 8108206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810820a:	e1b0      	b.n	810856e <UART_SetConfig+0x5ae>
 810820c:	2308      	movs	r3, #8
 810820e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108212:	e1ac      	b.n	810856e <UART_SetConfig+0x5ae>
 8108214:	2310      	movs	r3, #16
 8108216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810821a:	e1a8      	b.n	810856e <UART_SetConfig+0x5ae>
 810821c:	2320      	movs	r3, #32
 810821e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108222:	e1a4      	b.n	810856e <UART_SetConfig+0x5ae>
 8108224:	2340      	movs	r3, #64	; 0x40
 8108226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810822a:	e1a0      	b.n	810856e <UART_SetConfig+0x5ae>
 810822c:	2380      	movs	r3, #128	; 0x80
 810822e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108232:	e19c      	b.n	810856e <UART_SetConfig+0x5ae>
 8108234:	687b      	ldr	r3, [r7, #4]
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	4a36      	ldr	r2, [pc, #216]	; (8108314 <UART_SetConfig+0x354>)
 810823a:	4293      	cmp	r3, r2
 810823c:	d130      	bne.n	81082a0 <UART_SetConfig+0x2e0>
 810823e:	4b32      	ldr	r3, [pc, #200]	; (8108308 <UART_SetConfig+0x348>)
 8108240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108242:	f003 0307 	and.w	r3, r3, #7
 8108246:	2b05      	cmp	r3, #5
 8108248:	d826      	bhi.n	8108298 <UART_SetConfig+0x2d8>
 810824a:	a201      	add	r2, pc, #4	; (adr r2, 8108250 <UART_SetConfig+0x290>)
 810824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108250:	08108269 	.word	0x08108269
 8108254:	08108271 	.word	0x08108271
 8108258:	08108279 	.word	0x08108279
 810825c:	08108281 	.word	0x08108281
 8108260:	08108289 	.word	0x08108289
 8108264:	08108291 	.word	0x08108291
 8108268:	2300      	movs	r3, #0
 810826a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810826e:	e17e      	b.n	810856e <UART_SetConfig+0x5ae>
 8108270:	2304      	movs	r3, #4
 8108272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108276:	e17a      	b.n	810856e <UART_SetConfig+0x5ae>
 8108278:	2308      	movs	r3, #8
 810827a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810827e:	e176      	b.n	810856e <UART_SetConfig+0x5ae>
 8108280:	2310      	movs	r3, #16
 8108282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108286:	e172      	b.n	810856e <UART_SetConfig+0x5ae>
 8108288:	2320      	movs	r3, #32
 810828a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810828e:	e16e      	b.n	810856e <UART_SetConfig+0x5ae>
 8108290:	2340      	movs	r3, #64	; 0x40
 8108292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108296:	e16a      	b.n	810856e <UART_SetConfig+0x5ae>
 8108298:	2380      	movs	r3, #128	; 0x80
 810829a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810829e:	e166      	b.n	810856e <UART_SetConfig+0x5ae>
 81082a0:	687b      	ldr	r3, [r7, #4]
 81082a2:	681b      	ldr	r3, [r3, #0]
 81082a4:	4a1c      	ldr	r2, [pc, #112]	; (8108318 <UART_SetConfig+0x358>)
 81082a6:	4293      	cmp	r3, r2
 81082a8:	d140      	bne.n	810832c <UART_SetConfig+0x36c>
 81082aa:	4b17      	ldr	r3, [pc, #92]	; (8108308 <UART_SetConfig+0x348>)
 81082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082ae:	f003 0307 	and.w	r3, r3, #7
 81082b2:	2b05      	cmp	r3, #5
 81082b4:	d836      	bhi.n	8108324 <UART_SetConfig+0x364>
 81082b6:	a201      	add	r2, pc, #4	; (adr r2, 81082bc <UART_SetConfig+0x2fc>)
 81082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082bc:	081082d5 	.word	0x081082d5
 81082c0:	081082dd 	.word	0x081082dd
 81082c4:	081082e5 	.word	0x081082e5
 81082c8:	081082ed 	.word	0x081082ed
 81082cc:	081082f5 	.word	0x081082f5
 81082d0:	0810831d 	.word	0x0810831d
 81082d4:	2300      	movs	r3, #0
 81082d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082da:	e148      	b.n	810856e <UART_SetConfig+0x5ae>
 81082dc:	2304      	movs	r3, #4
 81082de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082e2:	e144      	b.n	810856e <UART_SetConfig+0x5ae>
 81082e4:	2308      	movs	r3, #8
 81082e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082ea:	e140      	b.n	810856e <UART_SetConfig+0x5ae>
 81082ec:	2310      	movs	r3, #16
 81082ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082f2:	e13c      	b.n	810856e <UART_SetConfig+0x5ae>
 81082f4:	2320      	movs	r3, #32
 81082f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082fa:	e138      	b.n	810856e <UART_SetConfig+0x5ae>
 81082fc:	cfff69f3 	.word	0xcfff69f3
 8108300:	58000c00 	.word	0x58000c00
 8108304:	40011000 	.word	0x40011000
 8108308:	58024400 	.word	0x58024400
 810830c:	40004400 	.word	0x40004400
 8108310:	40004800 	.word	0x40004800
 8108314:	40004c00 	.word	0x40004c00
 8108318:	40005000 	.word	0x40005000
 810831c:	2340      	movs	r3, #64	; 0x40
 810831e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108322:	e124      	b.n	810856e <UART_SetConfig+0x5ae>
 8108324:	2380      	movs	r3, #128	; 0x80
 8108326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810832a:	e120      	b.n	810856e <UART_SetConfig+0x5ae>
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	681b      	ldr	r3, [r3, #0]
 8108330:	4acc      	ldr	r2, [pc, #816]	; (8108664 <UART_SetConfig+0x6a4>)
 8108332:	4293      	cmp	r3, r2
 8108334:	d176      	bne.n	8108424 <UART_SetConfig+0x464>
 8108336:	4bcc      	ldr	r3, [pc, #816]	; (8108668 <UART_SetConfig+0x6a8>)
 8108338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810833a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810833e:	2b28      	cmp	r3, #40	; 0x28
 8108340:	d86c      	bhi.n	810841c <UART_SetConfig+0x45c>
 8108342:	a201      	add	r2, pc, #4	; (adr r2, 8108348 <UART_SetConfig+0x388>)
 8108344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108348:	081083ed 	.word	0x081083ed
 810834c:	0810841d 	.word	0x0810841d
 8108350:	0810841d 	.word	0x0810841d
 8108354:	0810841d 	.word	0x0810841d
 8108358:	0810841d 	.word	0x0810841d
 810835c:	0810841d 	.word	0x0810841d
 8108360:	0810841d 	.word	0x0810841d
 8108364:	0810841d 	.word	0x0810841d
 8108368:	081083f5 	.word	0x081083f5
 810836c:	0810841d 	.word	0x0810841d
 8108370:	0810841d 	.word	0x0810841d
 8108374:	0810841d 	.word	0x0810841d
 8108378:	0810841d 	.word	0x0810841d
 810837c:	0810841d 	.word	0x0810841d
 8108380:	0810841d 	.word	0x0810841d
 8108384:	0810841d 	.word	0x0810841d
 8108388:	081083fd 	.word	0x081083fd
 810838c:	0810841d 	.word	0x0810841d
 8108390:	0810841d 	.word	0x0810841d
 8108394:	0810841d 	.word	0x0810841d
 8108398:	0810841d 	.word	0x0810841d
 810839c:	0810841d 	.word	0x0810841d
 81083a0:	0810841d 	.word	0x0810841d
 81083a4:	0810841d 	.word	0x0810841d
 81083a8:	08108405 	.word	0x08108405
 81083ac:	0810841d 	.word	0x0810841d
 81083b0:	0810841d 	.word	0x0810841d
 81083b4:	0810841d 	.word	0x0810841d
 81083b8:	0810841d 	.word	0x0810841d
 81083bc:	0810841d 	.word	0x0810841d
 81083c0:	0810841d 	.word	0x0810841d
 81083c4:	0810841d 	.word	0x0810841d
 81083c8:	0810840d 	.word	0x0810840d
 81083cc:	0810841d 	.word	0x0810841d
 81083d0:	0810841d 	.word	0x0810841d
 81083d4:	0810841d 	.word	0x0810841d
 81083d8:	0810841d 	.word	0x0810841d
 81083dc:	0810841d 	.word	0x0810841d
 81083e0:	0810841d 	.word	0x0810841d
 81083e4:	0810841d 	.word	0x0810841d
 81083e8:	08108415 	.word	0x08108415
 81083ec:	2301      	movs	r3, #1
 81083ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083f2:	e0bc      	b.n	810856e <UART_SetConfig+0x5ae>
 81083f4:	2304      	movs	r3, #4
 81083f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083fa:	e0b8      	b.n	810856e <UART_SetConfig+0x5ae>
 81083fc:	2308      	movs	r3, #8
 81083fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108402:	e0b4      	b.n	810856e <UART_SetConfig+0x5ae>
 8108404:	2310      	movs	r3, #16
 8108406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810840a:	e0b0      	b.n	810856e <UART_SetConfig+0x5ae>
 810840c:	2320      	movs	r3, #32
 810840e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108412:	e0ac      	b.n	810856e <UART_SetConfig+0x5ae>
 8108414:	2340      	movs	r3, #64	; 0x40
 8108416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810841a:	e0a8      	b.n	810856e <UART_SetConfig+0x5ae>
 810841c:	2380      	movs	r3, #128	; 0x80
 810841e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108422:	e0a4      	b.n	810856e <UART_SetConfig+0x5ae>
 8108424:	687b      	ldr	r3, [r7, #4]
 8108426:	681b      	ldr	r3, [r3, #0]
 8108428:	4a90      	ldr	r2, [pc, #576]	; (810866c <UART_SetConfig+0x6ac>)
 810842a:	4293      	cmp	r3, r2
 810842c:	d130      	bne.n	8108490 <UART_SetConfig+0x4d0>
 810842e:	4b8e      	ldr	r3, [pc, #568]	; (8108668 <UART_SetConfig+0x6a8>)
 8108430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108432:	f003 0307 	and.w	r3, r3, #7
 8108436:	2b05      	cmp	r3, #5
 8108438:	d826      	bhi.n	8108488 <UART_SetConfig+0x4c8>
 810843a:	a201      	add	r2, pc, #4	; (adr r2, 8108440 <UART_SetConfig+0x480>)
 810843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108440:	08108459 	.word	0x08108459
 8108444:	08108461 	.word	0x08108461
 8108448:	08108469 	.word	0x08108469
 810844c:	08108471 	.word	0x08108471
 8108450:	08108479 	.word	0x08108479
 8108454:	08108481 	.word	0x08108481
 8108458:	2300      	movs	r3, #0
 810845a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810845e:	e086      	b.n	810856e <UART_SetConfig+0x5ae>
 8108460:	2304      	movs	r3, #4
 8108462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108466:	e082      	b.n	810856e <UART_SetConfig+0x5ae>
 8108468:	2308      	movs	r3, #8
 810846a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810846e:	e07e      	b.n	810856e <UART_SetConfig+0x5ae>
 8108470:	2310      	movs	r3, #16
 8108472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108476:	e07a      	b.n	810856e <UART_SetConfig+0x5ae>
 8108478:	2320      	movs	r3, #32
 810847a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810847e:	e076      	b.n	810856e <UART_SetConfig+0x5ae>
 8108480:	2340      	movs	r3, #64	; 0x40
 8108482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108486:	e072      	b.n	810856e <UART_SetConfig+0x5ae>
 8108488:	2380      	movs	r3, #128	; 0x80
 810848a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810848e:	e06e      	b.n	810856e <UART_SetConfig+0x5ae>
 8108490:	687b      	ldr	r3, [r7, #4]
 8108492:	681b      	ldr	r3, [r3, #0]
 8108494:	4a76      	ldr	r2, [pc, #472]	; (8108670 <UART_SetConfig+0x6b0>)
 8108496:	4293      	cmp	r3, r2
 8108498:	d130      	bne.n	81084fc <UART_SetConfig+0x53c>
 810849a:	4b73      	ldr	r3, [pc, #460]	; (8108668 <UART_SetConfig+0x6a8>)
 810849c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810849e:	f003 0307 	and.w	r3, r3, #7
 81084a2:	2b05      	cmp	r3, #5
 81084a4:	d826      	bhi.n	81084f4 <UART_SetConfig+0x534>
 81084a6:	a201      	add	r2, pc, #4	; (adr r2, 81084ac <UART_SetConfig+0x4ec>)
 81084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084ac:	081084c5 	.word	0x081084c5
 81084b0:	081084cd 	.word	0x081084cd
 81084b4:	081084d5 	.word	0x081084d5
 81084b8:	081084dd 	.word	0x081084dd
 81084bc:	081084e5 	.word	0x081084e5
 81084c0:	081084ed 	.word	0x081084ed
 81084c4:	2300      	movs	r3, #0
 81084c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084ca:	e050      	b.n	810856e <UART_SetConfig+0x5ae>
 81084cc:	2304      	movs	r3, #4
 81084ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084d2:	e04c      	b.n	810856e <UART_SetConfig+0x5ae>
 81084d4:	2308      	movs	r3, #8
 81084d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084da:	e048      	b.n	810856e <UART_SetConfig+0x5ae>
 81084dc:	2310      	movs	r3, #16
 81084de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084e2:	e044      	b.n	810856e <UART_SetConfig+0x5ae>
 81084e4:	2320      	movs	r3, #32
 81084e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084ea:	e040      	b.n	810856e <UART_SetConfig+0x5ae>
 81084ec:	2340      	movs	r3, #64	; 0x40
 81084ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084f2:	e03c      	b.n	810856e <UART_SetConfig+0x5ae>
 81084f4:	2380      	movs	r3, #128	; 0x80
 81084f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084fa:	e038      	b.n	810856e <UART_SetConfig+0x5ae>
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	681b      	ldr	r3, [r3, #0]
 8108500:	4a5c      	ldr	r2, [pc, #368]	; (8108674 <UART_SetConfig+0x6b4>)
 8108502:	4293      	cmp	r3, r2
 8108504:	d130      	bne.n	8108568 <UART_SetConfig+0x5a8>
 8108506:	4b58      	ldr	r3, [pc, #352]	; (8108668 <UART_SetConfig+0x6a8>)
 8108508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810850a:	f003 0307 	and.w	r3, r3, #7
 810850e:	2b05      	cmp	r3, #5
 8108510:	d826      	bhi.n	8108560 <UART_SetConfig+0x5a0>
 8108512:	a201      	add	r2, pc, #4	; (adr r2, 8108518 <UART_SetConfig+0x558>)
 8108514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108518:	08108531 	.word	0x08108531
 810851c:	08108539 	.word	0x08108539
 8108520:	08108541 	.word	0x08108541
 8108524:	08108549 	.word	0x08108549
 8108528:	08108551 	.word	0x08108551
 810852c:	08108559 	.word	0x08108559
 8108530:	2302      	movs	r3, #2
 8108532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108536:	e01a      	b.n	810856e <UART_SetConfig+0x5ae>
 8108538:	2304      	movs	r3, #4
 810853a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810853e:	e016      	b.n	810856e <UART_SetConfig+0x5ae>
 8108540:	2308      	movs	r3, #8
 8108542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108546:	e012      	b.n	810856e <UART_SetConfig+0x5ae>
 8108548:	2310      	movs	r3, #16
 810854a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810854e:	e00e      	b.n	810856e <UART_SetConfig+0x5ae>
 8108550:	2320      	movs	r3, #32
 8108552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108556:	e00a      	b.n	810856e <UART_SetConfig+0x5ae>
 8108558:	2340      	movs	r3, #64	; 0x40
 810855a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810855e:	e006      	b.n	810856e <UART_SetConfig+0x5ae>
 8108560:	2380      	movs	r3, #128	; 0x80
 8108562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108566:	e002      	b.n	810856e <UART_SetConfig+0x5ae>
 8108568:	2380      	movs	r3, #128	; 0x80
 810856a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
=======
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	681b      	ldr	r3, [r3, #0]
 8106d0c:	4aa8      	ldr	r2, [pc, #672]	; (8106fb0 <UART_SetConfig+0x34c>)
 8106d0e:	4293      	cmp	r3, r2
 8106d10:	d177      	bne.n	8106e02 <UART_SetConfig+0x19e>
 8106d12:	4ba8      	ldr	r3, [pc, #672]	; (8106fb4 <UART_SetConfig+0x350>)
 8106d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106d1a:	2b28      	cmp	r3, #40	; 0x28
 8106d1c:	d86c      	bhi.n	8106df8 <UART_SetConfig+0x194>
 8106d1e:	a201      	add	r2, pc, #4	; (adr r2, 8106d24 <UART_SetConfig+0xc0>)
 8106d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d24:	08106dc9 	.word	0x08106dc9
 8106d28:	08106df9 	.word	0x08106df9
 8106d2c:	08106df9 	.word	0x08106df9
 8106d30:	08106df9 	.word	0x08106df9
 8106d34:	08106df9 	.word	0x08106df9
 8106d38:	08106df9 	.word	0x08106df9
 8106d3c:	08106df9 	.word	0x08106df9
 8106d40:	08106df9 	.word	0x08106df9
 8106d44:	08106dd1 	.word	0x08106dd1
 8106d48:	08106df9 	.word	0x08106df9
 8106d4c:	08106df9 	.word	0x08106df9
 8106d50:	08106df9 	.word	0x08106df9
 8106d54:	08106df9 	.word	0x08106df9
 8106d58:	08106df9 	.word	0x08106df9
 8106d5c:	08106df9 	.word	0x08106df9
 8106d60:	08106df9 	.word	0x08106df9
 8106d64:	08106dd9 	.word	0x08106dd9
 8106d68:	08106df9 	.word	0x08106df9
 8106d6c:	08106df9 	.word	0x08106df9
 8106d70:	08106df9 	.word	0x08106df9
 8106d74:	08106df9 	.word	0x08106df9
 8106d78:	08106df9 	.word	0x08106df9
 8106d7c:	08106df9 	.word	0x08106df9
 8106d80:	08106df9 	.word	0x08106df9
 8106d84:	08106de1 	.word	0x08106de1
 8106d88:	08106df9 	.word	0x08106df9
 8106d8c:	08106df9 	.word	0x08106df9
 8106d90:	08106df9 	.word	0x08106df9
 8106d94:	08106df9 	.word	0x08106df9
 8106d98:	08106df9 	.word	0x08106df9
 8106d9c:	08106df9 	.word	0x08106df9
 8106da0:	08106df9 	.word	0x08106df9
 8106da4:	08106de9 	.word	0x08106de9
 8106da8:	08106df9 	.word	0x08106df9
 8106dac:	08106df9 	.word	0x08106df9
 8106db0:	08106df9 	.word	0x08106df9
 8106db4:	08106df9 	.word	0x08106df9
 8106db8:	08106df9 	.word	0x08106df9
 8106dbc:	08106df9 	.word	0x08106df9
 8106dc0:	08106df9 	.word	0x08106df9
 8106dc4:	08106df1 	.word	0x08106df1
 8106dc8:	2301      	movs	r3, #1
 8106dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dce:	e231      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106dd0:	2304      	movs	r3, #4
 8106dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dd6:	e22d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106dd8:	2308      	movs	r3, #8
 8106dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dde:	e229      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106de0:	2310      	movs	r3, #16
 8106de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106de6:	e225      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106de8:	2320      	movs	r3, #32
 8106dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dee:	e221      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106df0:	2340      	movs	r3, #64	; 0x40
 8106df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106df6:	e21d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106df8:	2380      	movs	r3, #128	; 0x80
 8106dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106dfe:	bf00      	nop
 8106e00:	e218      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	681b      	ldr	r3, [r3, #0]
 8106e06:	4a6c      	ldr	r2, [pc, #432]	; (8106fb8 <UART_SetConfig+0x354>)
 8106e08:	4293      	cmp	r3, r2
 8106e0a:	d132      	bne.n	8106e72 <UART_SetConfig+0x20e>
 8106e0c:	4b69      	ldr	r3, [pc, #420]	; (8106fb4 <UART_SetConfig+0x350>)
 8106e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106e10:	f003 0307 	and.w	r3, r3, #7
 8106e14:	2b05      	cmp	r3, #5
 8106e16:	d827      	bhi.n	8106e68 <UART_SetConfig+0x204>
 8106e18:	a201      	add	r2, pc, #4	; (adr r2, 8106e20 <UART_SetConfig+0x1bc>)
 8106e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e1e:	bf00      	nop
 8106e20:	08106e39 	.word	0x08106e39
 8106e24:	08106e41 	.word	0x08106e41
 8106e28:	08106e49 	.word	0x08106e49
 8106e2c:	08106e51 	.word	0x08106e51
 8106e30:	08106e59 	.word	0x08106e59
 8106e34:	08106e61 	.word	0x08106e61
 8106e38:	2300      	movs	r3, #0
 8106e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e3e:	e1f9      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e40:	2304      	movs	r3, #4
 8106e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e46:	e1f5      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e48:	2308      	movs	r3, #8
 8106e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e4e:	e1f1      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e50:	2310      	movs	r3, #16
 8106e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e56:	e1ed      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e58:	2320      	movs	r3, #32
 8106e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e5e:	e1e9      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e60:	2340      	movs	r3, #64	; 0x40
 8106e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e66:	e1e5      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e68:	2380      	movs	r3, #128	; 0x80
 8106e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106e6e:	bf00      	nop
 8106e70:	e1e0      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	681b      	ldr	r3, [r3, #0]
 8106e76:	4a51      	ldr	r2, [pc, #324]	; (8106fbc <UART_SetConfig+0x358>)
 8106e78:	4293      	cmp	r3, r2
 8106e7a:	d132      	bne.n	8106ee2 <UART_SetConfig+0x27e>
 8106e7c:	4b4d      	ldr	r3, [pc, #308]	; (8106fb4 <UART_SetConfig+0x350>)
 8106e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106e80:	f003 0307 	and.w	r3, r3, #7
 8106e84:	2b05      	cmp	r3, #5
 8106e86:	d827      	bhi.n	8106ed8 <UART_SetConfig+0x274>
 8106e88:	a201      	add	r2, pc, #4	; (adr r2, 8106e90 <UART_SetConfig+0x22c>)
 8106e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e8e:	bf00      	nop
 8106e90:	08106ea9 	.word	0x08106ea9
 8106e94:	08106eb1 	.word	0x08106eb1
 8106e98:	08106eb9 	.word	0x08106eb9
 8106e9c:	08106ec1 	.word	0x08106ec1
 8106ea0:	08106ec9 	.word	0x08106ec9
 8106ea4:	08106ed1 	.word	0x08106ed1
 8106ea8:	2300      	movs	r3, #0
 8106eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106eae:	e1c1      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106eb0:	2304      	movs	r3, #4
 8106eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106eb6:	e1bd      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106eb8:	2308      	movs	r3, #8
 8106eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ebe:	e1b9      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ec0:	2310      	movs	r3, #16
 8106ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ec6:	e1b5      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ec8:	2320      	movs	r3, #32
 8106eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ece:	e1b1      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ed0:	2340      	movs	r3, #64	; 0x40
 8106ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ed6:	e1ad      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ed8:	2380      	movs	r3, #128	; 0x80
 8106eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ede:	bf00      	nop
 8106ee0:	e1a8      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	681b      	ldr	r3, [r3, #0]
 8106ee6:	4a36      	ldr	r2, [pc, #216]	; (8106fc0 <UART_SetConfig+0x35c>)
 8106ee8:	4293      	cmp	r3, r2
 8106eea:	d132      	bne.n	8106f52 <UART_SetConfig+0x2ee>
 8106eec:	4b31      	ldr	r3, [pc, #196]	; (8106fb4 <UART_SetConfig+0x350>)
 8106eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ef0:	f003 0307 	and.w	r3, r3, #7
 8106ef4:	2b05      	cmp	r3, #5
 8106ef6:	d827      	bhi.n	8106f48 <UART_SetConfig+0x2e4>
 8106ef8:	a201      	add	r2, pc, #4	; (adr r2, 8106f00 <UART_SetConfig+0x29c>)
 8106efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106efe:	bf00      	nop
 8106f00:	08106f19 	.word	0x08106f19
 8106f04:	08106f21 	.word	0x08106f21
 8106f08:	08106f29 	.word	0x08106f29
 8106f0c:	08106f31 	.word	0x08106f31
 8106f10:	08106f39 	.word	0x08106f39
 8106f14:	08106f41 	.word	0x08106f41
 8106f18:	2300      	movs	r3, #0
 8106f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f1e:	e189      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f20:	2304      	movs	r3, #4
 8106f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f26:	e185      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f28:	2308      	movs	r3, #8
 8106f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f2e:	e181      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f30:	2310      	movs	r3, #16
 8106f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f36:	e17d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f38:	2320      	movs	r3, #32
 8106f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f3e:	e179      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f40:	2340      	movs	r3, #64	; 0x40
 8106f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f46:	e175      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f48:	2380      	movs	r3, #128	; 0x80
 8106f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f4e:	bf00      	nop
 8106f50:	e170      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f52:	687b      	ldr	r3, [r7, #4]
 8106f54:	681b      	ldr	r3, [r3, #0]
 8106f56:	4a1b      	ldr	r2, [pc, #108]	; (8106fc4 <UART_SetConfig+0x360>)
 8106f58:	4293      	cmp	r3, r2
 8106f5a:	d142      	bne.n	8106fe2 <UART_SetConfig+0x37e>
 8106f5c:	4b15      	ldr	r3, [pc, #84]	; (8106fb4 <UART_SetConfig+0x350>)
 8106f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106f60:	f003 0307 	and.w	r3, r3, #7
 8106f64:	2b05      	cmp	r3, #5
 8106f66:	d837      	bhi.n	8106fd8 <UART_SetConfig+0x374>
 8106f68:	a201      	add	r2, pc, #4	; (adr r2, 8106f70 <UART_SetConfig+0x30c>)
 8106f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f6e:	bf00      	nop
 8106f70:	08106f89 	.word	0x08106f89
 8106f74:	08106f91 	.word	0x08106f91
 8106f78:	08106f99 	.word	0x08106f99
 8106f7c:	08106fa1 	.word	0x08106fa1
 8106f80:	08106fc9 	.word	0x08106fc9
 8106f84:	08106fd1 	.word	0x08106fd1
 8106f88:	2300      	movs	r3, #0
 8106f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f8e:	e151      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f90:	2304      	movs	r3, #4
 8106f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f96:	e14d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106f98:	2308      	movs	r3, #8
 8106f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106f9e:	e149      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fa0:	2310      	movs	r3, #16
 8106fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106fa6:	e145      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fa8:	cfff69f3 	.word	0xcfff69f3
 8106fac:	58000c00 	.word	0x58000c00
 8106fb0:	40011000 	.word	0x40011000
 8106fb4:	58024400 	.word	0x58024400
 8106fb8:	40004400 	.word	0x40004400
 8106fbc:	40004800 	.word	0x40004800
 8106fc0:	40004c00 	.word	0x40004c00
 8106fc4:	40005000 	.word	0x40005000
 8106fc8:	2320      	movs	r3, #32
 8106fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106fce:	e131      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fd0:	2340      	movs	r3, #64	; 0x40
 8106fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106fd6:	e12d      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fd8:	2380      	movs	r3, #128	; 0x80
 8106fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106fde:	bf00      	nop
 8106fe0:	e128      	b.n	8107234 <UART_SetConfig+0x5d0>
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	681b      	ldr	r3, [r3, #0]
 8106fe6:	4ab6      	ldr	r2, [pc, #728]	; (81072c0 <UART_SetConfig+0x65c>)
 8106fe8:	4293      	cmp	r3, r2
 8106fea:	d178      	bne.n	81070de <UART_SetConfig+0x47a>
 8106fec:	4bb5      	ldr	r3, [pc, #724]	; (81072c4 <UART_SetConfig+0x660>)
 8106fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106ff4:	2b28      	cmp	r3, #40	; 0x28
 8106ff6:	d86d      	bhi.n	81070d4 <UART_SetConfig+0x470>
 8106ff8:	a201      	add	r2, pc, #4	; (adr r2, 8107000 <UART_SetConfig+0x39c>)
 8106ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ffe:	bf00      	nop
 8107000:	081070a5 	.word	0x081070a5
 8107004:	081070d5 	.word	0x081070d5
 8107008:	081070d5 	.word	0x081070d5
 810700c:	081070d5 	.word	0x081070d5
 8107010:	081070d5 	.word	0x081070d5
 8107014:	081070d5 	.word	0x081070d5
 8107018:	081070d5 	.word	0x081070d5
 810701c:	081070d5 	.word	0x081070d5
 8107020:	081070ad 	.word	0x081070ad
 8107024:	081070d5 	.word	0x081070d5
 8107028:	081070d5 	.word	0x081070d5
 810702c:	081070d5 	.word	0x081070d5
 8107030:	081070d5 	.word	0x081070d5
 8107034:	081070d5 	.word	0x081070d5
 8107038:	081070d5 	.word	0x081070d5
 810703c:	081070d5 	.word	0x081070d5
 8107040:	081070b5 	.word	0x081070b5
 8107044:	081070d5 	.word	0x081070d5
 8107048:	081070d5 	.word	0x081070d5
 810704c:	081070d5 	.word	0x081070d5
 8107050:	081070d5 	.word	0x081070d5
 8107054:	081070d5 	.word	0x081070d5
 8107058:	081070d5 	.word	0x081070d5
 810705c:	081070d5 	.word	0x081070d5
 8107060:	081070bd 	.word	0x081070bd
 8107064:	081070d5 	.word	0x081070d5
 8107068:	081070d5 	.word	0x081070d5
 810706c:	081070d5 	.word	0x081070d5
 8107070:	081070d5 	.word	0x081070d5
 8107074:	081070d5 	.word	0x081070d5
 8107078:	081070d5 	.word	0x081070d5
 810707c:	081070d5 	.word	0x081070d5
 8107080:	081070c5 	.word	0x081070c5
 8107084:	081070d5 	.word	0x081070d5
 8107088:	081070d5 	.word	0x081070d5
 810708c:	081070d5 	.word	0x081070d5
 8107090:	081070d5 	.word	0x081070d5
 8107094:	081070d5 	.word	0x081070d5
 8107098:	081070d5 	.word	0x081070d5
 810709c:	081070d5 	.word	0x081070d5
 81070a0:	081070cd 	.word	0x081070cd
 81070a4:	2301      	movs	r3, #1
 81070a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070aa:	e0c3      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070ac:	2304      	movs	r3, #4
 81070ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070b2:	e0bf      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070b4:	2308      	movs	r3, #8
 81070b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070ba:	e0bb      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070bc:	2310      	movs	r3, #16
 81070be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070c2:	e0b7      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070c4:	2320      	movs	r3, #32
 81070c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070ca:	e0b3      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070cc:	2340      	movs	r3, #64	; 0x40
 81070ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070d2:	e0af      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070d4:	2380      	movs	r3, #128	; 0x80
 81070d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070da:	bf00      	nop
 81070dc:	e0aa      	b.n	8107234 <UART_SetConfig+0x5d0>
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	681b      	ldr	r3, [r3, #0]
 81070e2:	4a79      	ldr	r2, [pc, #484]	; (81072c8 <UART_SetConfig+0x664>)
 81070e4:	4293      	cmp	r3, r2
 81070e6:	d132      	bne.n	810714e <UART_SetConfig+0x4ea>
 81070e8:	4b76      	ldr	r3, [pc, #472]	; (81072c4 <UART_SetConfig+0x660>)
 81070ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81070ec:	f003 0307 	and.w	r3, r3, #7
 81070f0:	2b05      	cmp	r3, #5
 81070f2:	d827      	bhi.n	8107144 <UART_SetConfig+0x4e0>
 81070f4:	a201      	add	r2, pc, #4	; (adr r2, 81070fc <UART_SetConfig+0x498>)
 81070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81070fa:	bf00      	nop
 81070fc:	08107115 	.word	0x08107115
 8107100:	0810711d 	.word	0x0810711d
 8107104:	08107125 	.word	0x08107125
 8107108:	0810712d 	.word	0x0810712d
 810710c:	08107135 	.word	0x08107135
 8107110:	0810713d 	.word	0x0810713d
 8107114:	2300      	movs	r3, #0
 8107116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810711a:	e08b      	b.n	8107234 <UART_SetConfig+0x5d0>
 810711c:	2304      	movs	r3, #4
 810711e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107122:	e087      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107124:	2308      	movs	r3, #8
 8107126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810712a:	e083      	b.n	8107234 <UART_SetConfig+0x5d0>
 810712c:	2310      	movs	r3, #16
 810712e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107132:	e07f      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107134:	2320      	movs	r3, #32
 8107136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810713a:	e07b      	b.n	8107234 <UART_SetConfig+0x5d0>
 810713c:	2340      	movs	r3, #64	; 0x40
 810713e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107142:	e077      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107144:	2380      	movs	r3, #128	; 0x80
 8107146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810714a:	bf00      	nop
 810714c:	e072      	b.n	8107234 <UART_SetConfig+0x5d0>
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	681b      	ldr	r3, [r3, #0]
 8107152:	4a5e      	ldr	r2, [pc, #376]	; (81072cc <UART_SetConfig+0x668>)
 8107154:	4293      	cmp	r3, r2
 8107156:	d132      	bne.n	81071be <UART_SetConfig+0x55a>
 8107158:	4b5a      	ldr	r3, [pc, #360]	; (81072c4 <UART_SetConfig+0x660>)
 810715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810715c:	f003 0307 	and.w	r3, r3, #7
 8107160:	2b05      	cmp	r3, #5
 8107162:	d827      	bhi.n	81071b4 <UART_SetConfig+0x550>
 8107164:	a201      	add	r2, pc, #4	; (adr r2, 810716c <UART_SetConfig+0x508>)
 8107166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810716a:	bf00      	nop
 810716c:	08107185 	.word	0x08107185
 8107170:	0810718d 	.word	0x0810718d
 8107174:	08107195 	.word	0x08107195
 8107178:	0810719d 	.word	0x0810719d
 810717c:	081071a5 	.word	0x081071a5
 8107180:	081071ad 	.word	0x081071ad
 8107184:	2300      	movs	r3, #0
 8107186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810718a:	e053      	b.n	8107234 <UART_SetConfig+0x5d0>
 810718c:	2304      	movs	r3, #4
 810718e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107192:	e04f      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107194:	2308      	movs	r3, #8
 8107196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810719a:	e04b      	b.n	8107234 <UART_SetConfig+0x5d0>
 810719c:	2310      	movs	r3, #16
 810719e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071a2:	e047      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071a4:	2320      	movs	r3, #32
 81071a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071aa:	e043      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071ac:	2340      	movs	r3, #64	; 0x40
 81071ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071b2:	e03f      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071b4:	2380      	movs	r3, #128	; 0x80
 81071b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071ba:	bf00      	nop
 81071bc:	e03a      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071be:	687b      	ldr	r3, [r7, #4]
 81071c0:	681b      	ldr	r3, [r3, #0]
 81071c2:	4a43      	ldr	r2, [pc, #268]	; (81072d0 <UART_SetConfig+0x66c>)
 81071c4:	4293      	cmp	r3, r2
 81071c6:	d132      	bne.n	810722e <UART_SetConfig+0x5ca>
 81071c8:	4b3e      	ldr	r3, [pc, #248]	; (81072c4 <UART_SetConfig+0x660>)
 81071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81071cc:	f003 0307 	and.w	r3, r3, #7
 81071d0:	2b05      	cmp	r3, #5
 81071d2:	d827      	bhi.n	8107224 <UART_SetConfig+0x5c0>
 81071d4:	a201      	add	r2, pc, #4	; (adr r2, 81071dc <UART_SetConfig+0x578>)
 81071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071da:	bf00      	nop
 81071dc:	081071f5 	.word	0x081071f5
 81071e0:	081071fd 	.word	0x081071fd
 81071e4:	08107205 	.word	0x08107205
 81071e8:	0810720d 	.word	0x0810720d
 81071ec:	08107215 	.word	0x08107215
 81071f0:	0810721d 	.word	0x0810721d
 81071f4:	2302      	movs	r3, #2
 81071f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071fa:	e01b      	b.n	8107234 <UART_SetConfig+0x5d0>
 81071fc:	2304      	movs	r3, #4
 81071fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107202:	e017      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107204:	2308      	movs	r3, #8
 8107206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810720a:	e013      	b.n	8107234 <UART_SetConfig+0x5d0>
 810720c:	2310      	movs	r3, #16
 810720e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107212:	e00f      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107214:	2320      	movs	r3, #32
 8107216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810721a:	e00b      	b.n	8107234 <UART_SetConfig+0x5d0>
 810721c:	2340      	movs	r3, #64	; 0x40
 810721e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107222:	e007      	b.n	8107234 <UART_SetConfig+0x5d0>
 8107224:	2380      	movs	r3, #128	; 0x80
 8107226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810722a:	bf00      	nop
 810722c:	e002      	b.n	8107234 <UART_SetConfig+0x5d0>
 810722e:	2380      	movs	r3, #128	; 0x80
 8107230:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
<<<<<<< HEAD
 810856e:	687b      	ldr	r3, [r7, #4]
 8108570:	681b      	ldr	r3, [r3, #0]
 8108572:	4a40      	ldr	r2, [pc, #256]	; (8108674 <UART_SetConfig+0x6b4>)
 8108574:	4293      	cmp	r3, r2
 8108576:	f040 80ef 	bne.w	8108758 <UART_SetConfig+0x798>
=======
 8107234:	687b      	ldr	r3, [r7, #4]
 8107236:	681b      	ldr	r3, [r3, #0]
 8107238:	4a25      	ldr	r2, [pc, #148]	; (81072d0 <UART_SetConfig+0x66c>)
 810723a:	4293      	cmp	r3, r2
 810723c:	f040 80b8 	bne.w	81073b0 <UART_SetConfig+0x74c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Retrieve frequency clock */
    switch (clocksource)
<<<<<<< HEAD
 810857a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810857e:	2b20      	cmp	r3, #32
 8108580:	dc46      	bgt.n	8108610 <UART_SetConfig+0x650>
 8108582:	2b02      	cmp	r3, #2
 8108584:	f2c0 8081 	blt.w	810868a <UART_SetConfig+0x6ca>
 8108588:	3b02      	subs	r3, #2
 810858a:	2b1e      	cmp	r3, #30
 810858c:	d87d      	bhi.n	810868a <UART_SetConfig+0x6ca>
 810858e:	a201      	add	r2, pc, #4	; (adr r2, 8108594 <UART_SetConfig+0x5d4>)
 8108590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108594:	08108617 	.word	0x08108617
 8108598:	0810868b 	.word	0x0810868b
 810859c:	0810861f 	.word	0x0810861f
 81085a0:	0810868b 	.word	0x0810868b
 81085a4:	0810868b 	.word	0x0810868b
 81085a8:	0810868b 	.word	0x0810868b
 81085ac:	0810862f 	.word	0x0810862f
 81085b0:	0810868b 	.word	0x0810868b
 81085b4:	0810868b 	.word	0x0810868b
 81085b8:	0810868b 	.word	0x0810868b
 81085bc:	0810868b 	.word	0x0810868b
 81085c0:	0810868b 	.word	0x0810868b
 81085c4:	0810868b 	.word	0x0810868b
 81085c8:	0810868b 	.word	0x0810868b
 81085cc:	0810863f 	.word	0x0810863f
 81085d0:	0810868b 	.word	0x0810868b
 81085d4:	0810868b 	.word	0x0810868b
 81085d8:	0810868b 	.word	0x0810868b
 81085dc:	0810868b 	.word	0x0810868b
 81085e0:	0810868b 	.word	0x0810868b
 81085e4:	0810868b 	.word	0x0810868b
 81085e8:	0810868b 	.word	0x0810868b
 81085ec:	0810868b 	.word	0x0810868b
 81085f0:	0810868b 	.word	0x0810868b
 81085f4:	0810868b 	.word	0x0810868b
 81085f8:	0810868b 	.word	0x0810868b
 81085fc:	0810868b 	.word	0x0810868b
 8108600:	0810868b 	.word	0x0810868b
 8108604:	0810868b 	.word	0x0810868b
 8108608:	0810868b 	.word	0x0810868b
 810860c:	0810867d 	.word	0x0810867d
 8108610:	2b40      	cmp	r3, #64	; 0x40
 8108612:	d036      	beq.n	8108682 <UART_SetConfig+0x6c2>
 8108614:	e039      	b.n	810868a <UART_SetConfig+0x6ca>
=======
 8107240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107244:	2b08      	cmp	r3, #8
 8107246:	d019      	beq.n	810727c <UART_SetConfig+0x618>
 8107248:	2b08      	cmp	r3, #8
 810724a:	dc04      	bgt.n	8107256 <UART_SetConfig+0x5f2>
 810724c:	2b02      	cmp	r3, #2
 810724e:	d009      	beq.n	8107264 <UART_SetConfig+0x600>
 8107250:	2b04      	cmp	r3, #4
 8107252:	d00b      	beq.n	810726c <UART_SetConfig+0x608>
 8107254:	e042      	b.n	81072dc <UART_SetConfig+0x678>
 8107256:	2b20      	cmp	r3, #32
 8107258:	d02b      	beq.n	81072b2 <UART_SetConfig+0x64e>
 810725a:	2b40      	cmp	r3, #64	; 0x40
 810725c:	d02c      	beq.n	81072b8 <UART_SetConfig+0x654>
 810725e:	2b10      	cmp	r3, #16
 8107260:	d014      	beq.n	810728c <UART_SetConfig+0x628>
 8107262:	e03b      	b.n	81072dc <UART_SetConfig+0x678>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
<<<<<<< HEAD
 8108616:	f7fe fa1d 	bl	8106a54 <HAL_RCCEx_GetD3PCLK1Freq>
 810861a:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 8107264:	f7fe fa56 	bl	8105714 <HAL_RCCEx_GetD3PCLK1Freq>
 8107268:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810861c:	e03b      	b.n	8108696 <UART_SetConfig+0x6d6>
=======
 810726a:	e03d      	b.n	81072e8 <UART_SetConfig+0x684>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
<<<<<<< HEAD
 810861e:	f107 0314 	add.w	r3, r7, #20
 8108622:	4618      	mov	r0, r3
 8108624:	f7fe fa2c 	bl	8106a80 <HAL_RCCEx_GetPLL2ClockFreq>
=======
 810726c:	f107 0314 	add.w	r3, r7, #20
 8107270:	4618      	mov	r0, r3
 8107272:	f7fe fa65 	bl	8105740 <HAL_RCCEx_GetPLL2ClockFreq>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pclk = pll2_clocks.PLL2_Q_Frequency;
<<<<<<< HEAD
 8108628:	69bb      	ldr	r3, [r7, #24]
 810862a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107276:	69bb      	ldr	r3, [r7, #24]
 8107278:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810862c:	e033      	b.n	8108696 <UART_SetConfig+0x6d6>
=======
 810727a:	e035      	b.n	81072e8 <UART_SetConfig+0x684>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
<<<<<<< HEAD
 810862e:	f107 0308 	add.w	r3, r7, #8
 8108632:	4618      	mov	r0, r3
 8108634:	f7fe fb78 	bl	8106d28 <HAL_RCCEx_GetPLL3ClockFreq>
=======
 810727c:	f107 0308 	add.w	r3, r7, #8
 8107280:	4618      	mov	r0, r3
 8107282:	f7fe fba9 	bl	81059d8 <HAL_RCCEx_GetPLL3ClockFreq>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pclk = pll3_clocks.PLL3_Q_Frequency;
<<<<<<< HEAD
 8108638:	68fb      	ldr	r3, [r7, #12]
 810863a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810863c:	e02b      	b.n	8108696 <UART_SetConfig+0x6d6>
=======
 810728a:	e02d      	b.n	81072e8 <UART_SetConfig+0x684>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 810863e:	4b0a      	ldr	r3, [pc, #40]	; (8108668 <UART_SetConfig+0x6a8>)
 8108640:	681b      	ldr	r3, [r3, #0]
 8108642:	f003 0320 	and.w	r3, r3, #32
 8108646:	2b00      	cmp	r3, #0
 8108648:	d009      	beq.n	810865e <UART_SetConfig+0x69e>
=======
 810728c:	4b0d      	ldr	r3, [pc, #52]	; (81072c4 <UART_SetConfig+0x660>)
 810728e:	681b      	ldr	r3, [r3, #0]
 8107290:	f003 0320 	and.w	r3, r3, #32
 8107294:	2b00      	cmp	r3, #0
 8107296:	d009      	beq.n	81072ac <UART_SetConfig+0x648>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
<<<<<<< HEAD
 810864a:	4b07      	ldr	r3, [pc, #28]	; (8108668 <UART_SetConfig+0x6a8>)
 810864c:	681b      	ldr	r3, [r3, #0]
 810864e:	08db      	lsrs	r3, r3, #3
 8108650:	f003 0303 	and.w	r3, r3, #3
 8108654:	4a08      	ldr	r2, [pc, #32]	; (8108678 <UART_SetConfig+0x6b8>)
 8108656:	fa22 f303 	lsr.w	r3, r2, r3
 810865a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107298:	4b0a      	ldr	r3, [pc, #40]	; (81072c4 <UART_SetConfig+0x660>)
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	08db      	lsrs	r3, r3, #3
 810729e:	f003 0303 	and.w	r3, r3, #3
 81072a2:	4a0c      	ldr	r2, [pc, #48]	; (81072d4 <UART_SetConfig+0x670>)
 81072a4:	fa22 f303 	lsr.w	r3, r2, r3
 81072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 810865c:	e01b      	b.n	8108696 <UART_SetConfig+0x6d6>
=======
 81072aa:	e01d      	b.n	81072e8 <UART_SetConfig+0x684>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          pclk = (uint32_t) HSI_VALUE;
<<<<<<< HEAD
 810865e:	4b06      	ldr	r3, [pc, #24]	; (8108678 <UART_SetConfig+0x6b8>)
 8108660:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 81072ac:	4b09      	ldr	r3, [pc, #36]	; (81072d4 <UART_SetConfig+0x670>)
 81072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108662:	e018      	b.n	8108696 <UART_SetConfig+0x6d6>
 8108664:	40011400 	.word	0x40011400
 8108668:	58024400 	.word	0x58024400
 810866c:	40007800 	.word	0x40007800
 8108670:	40007c00 	.word	0x40007c00
 8108674:	58000c00 	.word	0x58000c00
 8108678:	03d09000 	.word	0x03d09000
=======
 81072b0:	e01a      	b.n	81072e8 <UART_SetConfig+0x684>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
<<<<<<< HEAD
 810867c:	4bc4      	ldr	r3, [pc, #784]	; (8108990 <UART_SetConfig+0x9d0>)
 810867e:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 81072b2:	4b09      	ldr	r3, [pc, #36]	; (81072d8 <UART_SetConfig+0x674>)
 81072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108680:	e009      	b.n	8108696 <UART_SetConfig+0x6d6>
=======
 81072b6:	e017      	b.n	81072e8 <UART_SetConfig+0x684>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
<<<<<<< HEAD
 8108682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108686:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 81072b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81072bc:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108688:	e005      	b.n	8108696 <UART_SetConfig+0x6d6>
=======
 81072be:	e013      	b.n	81072e8 <UART_SetConfig+0x684>
 81072c0:	40011400 	.word	0x40011400
 81072c4:	58024400 	.word	0x58024400
 81072c8:	40007800 	.word	0x40007800
 81072cc:	40007c00 	.word	0x40007c00
 81072d0:	58000c00 	.word	0x58000c00
 81072d4:	03d09000 	.word	0x03d09000
 81072d8:	003d0900 	.word	0x003d0900
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      default:
        pclk = 0U;
<<<<<<< HEAD
 810868a:	2300      	movs	r3, #0
 810868c:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 81072dc:	2300      	movs	r3, #0
 81072de:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        ret = HAL_ERROR;
<<<<<<< HEAD
 810868e:	2301      	movs	r3, #1
 8108690:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
=======
 81072e0:	2301      	movs	r3, #1
 81072e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108694:	bf00      	nop
=======
 81072e6:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 8108696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108698:	2b00      	cmp	r3, #0
 810869a:	f000 81da 	beq.w	8108a52 <UART_SetConfig+0xa92>
=======
 81072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81072ea:	2b00      	cmp	r3, #0
 81072ec:	f000 824d 	beq.w	810778a <UART_SetConfig+0xb26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
<<<<<<< HEAD
 810869e:	687b      	ldr	r3, [r7, #4]
 81086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81086a2:	4abc      	ldr	r2, [pc, #752]	; (8108994 <UART_SetConfig+0x9d4>)
 81086a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81086a8:	461a      	mov	r2, r3
 81086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81086ac:	fbb3 f3f2 	udiv	r3, r3, r2
 81086b0:	623b      	str	r3, [r7, #32]
=======
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81072f4:	4aad      	ldr	r2, [pc, #692]	; (81075ac <UART_SetConfig+0x948>)
 81072f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81072fa:	461a      	mov	r2, r3
 81072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81072fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8107302:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
<<<<<<< HEAD
 81086b2:	687b      	ldr	r3, [r7, #4]
 81086b4:	685a      	ldr	r2, [r3, #4]
 81086b6:	4613      	mov	r3, r2
 81086b8:	005b      	lsls	r3, r3, #1
 81086ba:	4413      	add	r3, r2
 81086bc:	6a3a      	ldr	r2, [r7, #32]
 81086be:	429a      	cmp	r2, r3
 81086c0:	d305      	bcc.n	81086ce <UART_SetConfig+0x70e>
=======
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	685a      	ldr	r2, [r3, #4]
 8107308:	4613      	mov	r3, r2
 810730a:	005b      	lsls	r3, r3, #1
 810730c:	4413      	add	r3, r2
 810730e:	6a3a      	ldr	r2, [r7, #32]
 8107310:	429a      	cmp	r2, r3
 8107312:	d305      	bcc.n	8107320 <UART_SetConfig+0x6bc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
<<<<<<< HEAD
 81086c2:	687b      	ldr	r3, [r7, #4]
 81086c4:	685b      	ldr	r3, [r3, #4]
 81086c6:	031b      	lsls	r3, r3, #12
=======
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	685b      	ldr	r3, [r3, #4]
 8107318:	031b      	lsls	r3, r3, #12
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
<<<<<<< HEAD
 81086c8:	6a3a      	ldr	r2, [r7, #32]
 81086ca:	429a      	cmp	r2, r3
 81086cc:	d903      	bls.n	81086d6 <UART_SetConfig+0x716>
=======
 810731a:	6a3a      	ldr	r2, [r7, #32]
 810731c:	429a      	cmp	r2, r3
 810731e:	d903      	bls.n	8107328 <UART_SetConfig+0x6c4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 81086ce:	2301      	movs	r3, #1
 81086d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81086d4:	e1bd      	b.n	8108a52 <UART_SetConfig+0xa92>
=======
 8107320:	2301      	movs	r3, #1
 8107322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107326:	e230      	b.n	810778a <UART_SetConfig+0xb26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 81086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81086d8:	4618      	mov	r0, r3
 81086da:	f04f 0100 	mov.w	r1, #0
 81086de:	687b      	ldr	r3, [r7, #4]
 81086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81086e2:	4aac      	ldr	r2, [pc, #688]	; (8108994 <UART_SetConfig+0x9d4>)
 81086e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81086e8:	b29a      	uxth	r2, r3
 81086ea:	f04f 0300 	mov.w	r3, #0
 81086ee:	f7f8 fb93 	bl	8100e18 <__aeabi_uldivmod>
 81086f2:	4602      	mov	r2, r0
 81086f4:	460b      	mov	r3, r1
 81086f6:	4610      	mov	r0, r2
 81086f8:	4619      	mov	r1, r3
 81086fa:	f04f 0200 	mov.w	r2, #0
 81086fe:	f04f 0300 	mov.w	r3, #0
 8108702:	020b      	lsls	r3, r1, #8
 8108704:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108708:	0202      	lsls	r2, r0, #8
 810870a:	6879      	ldr	r1, [r7, #4]
 810870c:	6849      	ldr	r1, [r1, #4]
 810870e:	0849      	lsrs	r1, r1, #1
 8108710:	4608      	mov	r0, r1
 8108712:	f04f 0100 	mov.w	r1, #0
 8108716:	1814      	adds	r4, r2, r0
 8108718:	eb43 0501 	adc.w	r5, r3, r1
 810871c:	687b      	ldr	r3, [r7, #4]
 810871e:	685b      	ldr	r3, [r3, #4]
 8108720:	461a      	mov	r2, r3
 8108722:	f04f 0300 	mov.w	r3, #0
 8108726:	4620      	mov	r0, r4
 8108728:	4629      	mov	r1, r5
 810872a:	f7f8 fb75 	bl	8100e18 <__aeabi_uldivmod>
 810872e:	4602      	mov	r2, r0
 8108730:	460b      	mov	r3, r1
 8108732:	4613      	mov	r3, r2
 8108734:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8107328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810732a:	4618      	mov	r0, r3
 810732c:	f04f 0100 	mov.w	r1, #0
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107334:	4a9d      	ldr	r2, [pc, #628]	; (81075ac <UART_SetConfig+0x948>)
 8107336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810733a:	b29b      	uxth	r3, r3
 810733c:	f04f 0400 	mov.w	r4, #0
 8107340:	461a      	mov	r2, r3
 8107342:	4623      	mov	r3, r4
 8107344:	f7f9 fd68 	bl	8100e18 <__aeabi_uldivmod>
 8107348:	4603      	mov	r3, r0
 810734a:	460c      	mov	r4, r1
 810734c:	4619      	mov	r1, r3
 810734e:	4622      	mov	r2, r4
 8107350:	f04f 0300 	mov.w	r3, #0
 8107354:	f04f 0400 	mov.w	r4, #0
 8107358:	0214      	lsls	r4, r2, #8
 810735a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 810735e:	020b      	lsls	r3, r1, #8
 8107360:	687a      	ldr	r2, [r7, #4]
 8107362:	6852      	ldr	r2, [r2, #4]
 8107364:	0852      	lsrs	r2, r2, #1
 8107366:	4611      	mov	r1, r2
 8107368:	f04f 0200 	mov.w	r2, #0
 810736c:	eb13 0b01 	adds.w	fp, r3, r1
 8107370:	eb44 0c02 	adc.w	ip, r4, r2
 8107374:	4658      	mov	r0, fp
 8107376:	4661      	mov	r1, ip
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	685b      	ldr	r3, [r3, #4]
 810737c:	f04f 0400 	mov.w	r4, #0
 8107380:	461a      	mov	r2, r3
 8107382:	4623      	mov	r3, r4
 8107384:	f7f9 fd48 	bl	8100e18 <__aeabi_uldivmod>
 8107388:	4603      	mov	r3, r0
 810738a:	460c      	mov	r4, r1
 810738c:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
<<<<<<< HEAD
 8108736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810873c:	d308      	bcc.n	8108750 <UART_SetConfig+0x790>
 810873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108744:	d204      	bcs.n	8108750 <UART_SetConfig+0x790>
=======
 810738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107394:	d308      	bcc.n	81073a8 <UART_SetConfig+0x744>
 8107396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810739c:	d204      	bcs.n	81073a8 <UART_SetConfig+0x744>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          huart->Instance->BRR = usartdiv;
<<<<<<< HEAD
 8108746:	687b      	ldr	r3, [r7, #4]
 8108748:	681b      	ldr	r3, [r3, #0]
 810874a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810874c:	60da      	str	r2, [r3, #12]
 810874e:	e180      	b.n	8108a52 <UART_SetConfig+0xa92>
=======
 810739e:	687b      	ldr	r3, [r7, #4]
 81073a0:	681b      	ldr	r3, [r3, #0]
 81073a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81073a4:	60da      	str	r2, [r3, #12]
 81073a6:	e1f0      	b.n	810778a <UART_SetConfig+0xb26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 8108750:	2301      	movs	r3, #1
 8108752:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8108756:	e17c      	b.n	8108a52 <UART_SetConfig+0xa92>
=======
 81073a8:	2301      	movs	r3, #1
 81073aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81073ae:	e1ec      	b.n	810778a <UART_SetConfig+0xb26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 8108758:	687b      	ldr	r3, [r7, #4]
 810875a:	69db      	ldr	r3, [r3, #28]
 810875c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108760:	f040 80bf 	bne.w	81088e2 <UART_SetConfig+0x922>
=======
 81073b0:	687b      	ldr	r3, [r7, #4]
 81073b2:	69db      	ldr	r3, [r3, #28]
 81073b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81073b8:	f040 8100 	bne.w	81075bc <UART_SetConfig+0x958>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    switch (clocksource)
<<<<<<< HEAD
 8108764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108768:	2b20      	cmp	r3, #32
 810876a:	dc49      	bgt.n	8108800 <UART_SetConfig+0x840>
 810876c:	2b00      	cmp	r3, #0
 810876e:	db7c      	blt.n	810886a <UART_SetConfig+0x8aa>
 8108770:	2b20      	cmp	r3, #32
 8108772:	d87a      	bhi.n	810886a <UART_SetConfig+0x8aa>
 8108774:	a201      	add	r2, pc, #4	; (adr r2, 810877c <UART_SetConfig+0x7bc>)
 8108776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810877a:	bf00      	nop
 810877c:	08108807 	.word	0x08108807
 8108780:	0810880f 	.word	0x0810880f
 8108784:	0810886b 	.word	0x0810886b
 8108788:	0810886b 	.word	0x0810886b
 810878c:	08108817 	.word	0x08108817
 8108790:	0810886b 	.word	0x0810886b
 8108794:	0810886b 	.word	0x0810886b
 8108798:	0810886b 	.word	0x0810886b
 810879c:	08108827 	.word	0x08108827
 81087a0:	0810886b 	.word	0x0810886b
 81087a4:	0810886b 	.word	0x0810886b
 81087a8:	0810886b 	.word	0x0810886b
 81087ac:	0810886b 	.word	0x0810886b
 81087b0:	0810886b 	.word	0x0810886b
 81087b4:	0810886b 	.word	0x0810886b
 81087b8:	0810886b 	.word	0x0810886b
 81087bc:	08108837 	.word	0x08108837
 81087c0:	0810886b 	.word	0x0810886b
 81087c4:	0810886b 	.word	0x0810886b
 81087c8:	0810886b 	.word	0x0810886b
 81087cc:	0810886b 	.word	0x0810886b
 81087d0:	0810886b 	.word	0x0810886b
 81087d4:	0810886b 	.word	0x0810886b
 81087d8:	0810886b 	.word	0x0810886b
 81087dc:	0810886b 	.word	0x0810886b
 81087e0:	0810886b 	.word	0x0810886b
 81087e4:	0810886b 	.word	0x0810886b
 81087e8:	0810886b 	.word	0x0810886b
 81087ec:	0810886b 	.word	0x0810886b
 81087f0:	0810886b 	.word	0x0810886b
 81087f4:	0810886b 	.word	0x0810886b
 81087f8:	0810886b 	.word	0x0810886b
 81087fc:	0810885d 	.word	0x0810885d
 8108800:	2b40      	cmp	r3, #64	; 0x40
 8108802:	d02e      	beq.n	8108862 <UART_SetConfig+0x8a2>
 8108804:	e031      	b.n	810886a <UART_SetConfig+0x8aa>
=======
 81073bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81073c0:	2b40      	cmp	r3, #64	; 0x40
 81073c2:	f200 80b7 	bhi.w	8107534 <UART_SetConfig+0x8d0>
 81073c6:	a201      	add	r2, pc, #4	; (adr r2, 81073cc <UART_SetConfig+0x768>)
 81073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81073cc:	081074d1 	.word	0x081074d1
 81073d0:	081074d9 	.word	0x081074d9
 81073d4:	08107535 	.word	0x08107535
 81073d8:	08107535 	.word	0x08107535
 81073dc:	081074e1 	.word	0x081074e1
 81073e0:	08107535 	.word	0x08107535
 81073e4:	08107535 	.word	0x08107535
 81073e8:	08107535 	.word	0x08107535
 81073ec:	081074f1 	.word	0x081074f1
 81073f0:	08107535 	.word	0x08107535
 81073f4:	08107535 	.word	0x08107535
 81073f8:	08107535 	.word	0x08107535
 81073fc:	08107535 	.word	0x08107535
 8107400:	08107535 	.word	0x08107535
 8107404:	08107535 	.word	0x08107535
 8107408:	08107535 	.word	0x08107535
 810740c:	08107501 	.word	0x08107501
 8107410:	08107535 	.word	0x08107535
 8107414:	08107535 	.word	0x08107535
 8107418:	08107535 	.word	0x08107535
 810741c:	08107535 	.word	0x08107535
 8107420:	08107535 	.word	0x08107535
 8107424:	08107535 	.word	0x08107535
 8107428:	08107535 	.word	0x08107535
 810742c:	08107535 	.word	0x08107535
 8107430:	08107535 	.word	0x08107535
 8107434:	08107535 	.word	0x08107535
 8107438:	08107535 	.word	0x08107535
 810743c:	08107535 	.word	0x08107535
 8107440:	08107535 	.word	0x08107535
 8107444:	08107535 	.word	0x08107535
 8107448:	08107535 	.word	0x08107535
 810744c:	08107527 	.word	0x08107527
 8107450:	08107535 	.word	0x08107535
 8107454:	08107535 	.word	0x08107535
 8107458:	08107535 	.word	0x08107535
 810745c:	08107535 	.word	0x08107535
 8107460:	08107535 	.word	0x08107535
 8107464:	08107535 	.word	0x08107535
 8107468:	08107535 	.word	0x08107535
 810746c:	08107535 	.word	0x08107535
 8107470:	08107535 	.word	0x08107535
 8107474:	08107535 	.word	0x08107535
 8107478:	08107535 	.word	0x08107535
 810747c:	08107535 	.word	0x08107535
 8107480:	08107535 	.word	0x08107535
 8107484:	08107535 	.word	0x08107535
 8107488:	08107535 	.word	0x08107535
 810748c:	08107535 	.word	0x08107535
 8107490:	08107535 	.word	0x08107535
 8107494:	08107535 	.word	0x08107535
 8107498:	08107535 	.word	0x08107535
 810749c:	08107535 	.word	0x08107535
 81074a0:	08107535 	.word	0x08107535
 81074a4:	08107535 	.word	0x08107535
 81074a8:	08107535 	.word	0x08107535
 81074ac:	08107535 	.word	0x08107535
 81074b0:	08107535 	.word	0x08107535
 81074b4:	08107535 	.word	0x08107535
 81074b8:	08107535 	.word	0x08107535
 81074bc:	08107535 	.word	0x08107535
 81074c0:	08107535 	.word	0x08107535
 81074c4:	08107535 	.word	0x08107535
 81074c8:	08107535 	.word	0x08107535
 81074cc:	0810752d 	.word	0x0810752d
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8108806:	f7fe f8b7 	bl	8106978 <HAL_RCC_GetPCLK1Freq>
 810880a:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 81074d0:	f7fe f8b2 	bl	8105638 <HAL_RCC_GetPCLK1Freq>
 81074d4:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810880c:	e033      	b.n	8108876 <UART_SetConfig+0x8b6>
=======
 81074d6:	e033      	b.n	8107540 <UART_SetConfig+0x8dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
<<<<<<< HEAD
 810880e:	f7fe f8c9 	bl	81069a4 <HAL_RCC_GetPCLK2Freq>
 8108812:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 81074d8:	f7fe f8c4 	bl	8105664 <HAL_RCC_GetPCLK2Freq>
 81074dc:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108814:	e02f      	b.n	8108876 <UART_SetConfig+0x8b6>
=======
 81074de:	e02f      	b.n	8107540 <UART_SetConfig+0x8dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
<<<<<<< HEAD
 8108816:	f107 0314 	add.w	r3, r7, #20
 810881a:	4618      	mov	r0, r3
 810881c:	f7fe f930 	bl	8106a80 <HAL_RCCEx_GetPLL2ClockFreq>
=======
 81074e0:	f107 0314 	add.w	r3, r7, #20
 81074e4:	4618      	mov	r0, r3
 81074e6:	f7fe f92b 	bl	8105740 <HAL_RCCEx_GetPLL2ClockFreq>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pclk = pll2_clocks.PLL2_Q_Frequency;
<<<<<<< HEAD
 8108820:	69bb      	ldr	r3, [r7, #24]
 8108822:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 81074ea:	69bb      	ldr	r3, [r7, #24]
 81074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108824:	e027      	b.n	8108876 <UART_SetConfig+0x8b6>
=======
 81074ee:	e027      	b.n	8107540 <UART_SetConfig+0x8dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
<<<<<<< HEAD
 8108826:	f107 0308 	add.w	r3, r7, #8
 810882a:	4618      	mov	r0, r3
 810882c:	f7fe fa7c 	bl	8106d28 <HAL_RCCEx_GetPLL3ClockFreq>
=======
 81074f0:	f107 0308 	add.w	r3, r7, #8
 81074f4:	4618      	mov	r0, r3
 81074f6:	f7fe fa6f 	bl	81059d8 <HAL_RCCEx_GetPLL3ClockFreq>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pclk = pll3_clocks.PLL3_Q_Frequency;
<<<<<<< HEAD
 8108830:	68fb      	ldr	r3, [r7, #12]
 8108832:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 81074fa:	68fb      	ldr	r3, [r7, #12]
 81074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108834:	e01f      	b.n	8108876 <UART_SetConfig+0x8b6>
=======
 81074fe:	e01f      	b.n	8107540 <UART_SetConfig+0x8dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 8108836:	4b58      	ldr	r3, [pc, #352]	; (8108998 <UART_SetConfig+0x9d8>)
 8108838:	681b      	ldr	r3, [r3, #0]
 810883a:	f003 0320 	and.w	r3, r3, #32
 810883e:	2b00      	cmp	r3, #0
 8108840:	d009      	beq.n	8108856 <UART_SetConfig+0x896>
=======
 8107500:	4b2b      	ldr	r3, [pc, #172]	; (81075b0 <UART_SetConfig+0x94c>)
 8107502:	681b      	ldr	r3, [r3, #0]
 8107504:	f003 0320 	and.w	r3, r3, #32
 8107508:	2b00      	cmp	r3, #0
 810750a:	d009      	beq.n	8107520 <UART_SetConfig+0x8bc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
<<<<<<< HEAD
 8108842:	4b55      	ldr	r3, [pc, #340]	; (8108998 <UART_SetConfig+0x9d8>)
 8108844:	681b      	ldr	r3, [r3, #0]
 8108846:	08db      	lsrs	r3, r3, #3
 8108848:	f003 0303 	and.w	r3, r3, #3
 810884c:	4a53      	ldr	r2, [pc, #332]	; (810899c <UART_SetConfig+0x9dc>)
 810884e:	fa22 f303 	lsr.w	r3, r2, r3
 8108852:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 810750c:	4b28      	ldr	r3, [pc, #160]	; (81075b0 <UART_SetConfig+0x94c>)
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	08db      	lsrs	r3, r3, #3
 8107512:	f003 0303 	and.w	r3, r3, #3
 8107516:	4a27      	ldr	r2, [pc, #156]	; (81075b4 <UART_SetConfig+0x950>)
 8107518:	fa22 f303 	lsr.w	r3, r2, r3
 810751c:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 8108854:	e00f      	b.n	8108876 <UART_SetConfig+0x8b6>
=======
 810751e:	e00f      	b.n	8107540 <UART_SetConfig+0x8dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          pclk = (uint32_t) HSI_VALUE;
<<<<<<< HEAD
 8108856:	4b51      	ldr	r3, [pc, #324]	; (810899c <UART_SetConfig+0x9dc>)
 8108858:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107520:	4b24      	ldr	r3, [pc, #144]	; (81075b4 <UART_SetConfig+0x950>)
 8107522:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810885a:	e00c      	b.n	8108876 <UART_SetConfig+0x8b6>
=======
 8107524:	e00c      	b.n	8107540 <UART_SetConfig+0x8dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
<<<<<<< HEAD
 810885c:	4b4c      	ldr	r3, [pc, #304]	; (8108990 <UART_SetConfig+0x9d0>)
 810885e:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107526:	4b24      	ldr	r3, [pc, #144]	; (81075b8 <UART_SetConfig+0x954>)
 8107528:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108860:	e009      	b.n	8108876 <UART_SetConfig+0x8b6>
=======
 810752a:	e009      	b.n	8107540 <UART_SetConfig+0x8dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
<<<<<<< HEAD
 8108862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108866:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 810752c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107530:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108868:	e005      	b.n	8108876 <UART_SetConfig+0x8b6>
=======
 8107532:	e005      	b.n	8107540 <UART_SetConfig+0x8dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      default:
        pclk = 0U;
<<<<<<< HEAD
 810886a:	2300      	movs	r3, #0
 810886c:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107534:	2300      	movs	r3, #0
 8107536:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        ret = HAL_ERROR;
<<<<<<< HEAD
 810886e:	2301      	movs	r3, #1
 8108870:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
=======
 8107538:	2301      	movs	r3, #1
 810753a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108874:	bf00      	nop
=======
 810753e:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 8108876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108878:	2b00      	cmp	r3, #0
 810887a:	f000 80ea 	beq.w	8108a52 <UART_SetConfig+0xa92>
=======
 8107540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107542:	2b00      	cmp	r3, #0
 8107544:	f000 8121 	beq.w	810778a <UART_SetConfig+0xb26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 810887e:	687b      	ldr	r3, [r7, #4]
 8108880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108882:	4a44      	ldr	r2, [pc, #272]	; (8108994 <UART_SetConfig+0x9d4>)
 8108884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108888:	461a      	mov	r2, r3
 810888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810888c:	fbb3 f3f2 	udiv	r3, r3, r2
 8108890:	005a      	lsls	r2, r3, #1
 8108892:	687b      	ldr	r3, [r7, #4]
 8108894:	685b      	ldr	r3, [r3, #4]
 8108896:	085b      	lsrs	r3, r3, #1
 8108898:	441a      	add	r2, r3
 810889a:	687b      	ldr	r3, [r7, #4]
 810889c:	685b      	ldr	r3, [r3, #4]
 810889e:	fbb2 f3f3 	udiv	r3, r2, r3
 81088a2:	b29b      	uxth	r3, r3
 81088a4:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810754c:	4a17      	ldr	r2, [pc, #92]	; (81075ac <UART_SetConfig+0x948>)
 810754e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107552:	461a      	mov	r2, r3
 8107554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107556:	fbb3 f3f2 	udiv	r3, r3, r2
 810755a:	005a      	lsls	r2, r3, #1
 810755c:	687b      	ldr	r3, [r7, #4]
 810755e:	685b      	ldr	r3, [r3, #4]
 8107560:	085b      	lsrs	r3, r3, #1
 8107562:	441a      	add	r2, r3
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	685b      	ldr	r3, [r3, #4]
 8107568:	fbb2 f3f3 	udiv	r3, r2, r3
 810756c:	b29b      	uxth	r3, r3
 810756e:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< HEAD
 81088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088a8:	2b0f      	cmp	r3, #15
 81088aa:	d916      	bls.n	81088da <UART_SetConfig+0x91a>
 81088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81088b2:	d212      	bcs.n	81088da <UART_SetConfig+0x91a>
=======
 8107570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107572:	2b0f      	cmp	r3, #15
 8107574:	d916      	bls.n	81075a4 <UART_SetConfig+0x940>
 8107576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810757c:	d212      	bcs.n	81075a4 <UART_SetConfig+0x940>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
<<<<<<< HEAD
 81088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088b6:	b29b      	uxth	r3, r3
 81088b8:	f023 030f 	bic.w	r3, r3, #15
 81088bc:	84fb      	strh	r3, [r7, #38]	; 0x26
=======
 810757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107580:	b29b      	uxth	r3, r3
 8107582:	f023 030f 	bic.w	r3, r3, #15
 8107586:	84fb      	strh	r3, [r7, #38]	; 0x26
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
<<<<<<< HEAD
 81088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088c0:	085b      	lsrs	r3, r3, #1
 81088c2:	b29b      	uxth	r3, r3
 81088c4:	f003 0307 	and.w	r3, r3, #7
 81088c8:	b29a      	uxth	r2, r3
 81088ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81088cc:	4313      	orrs	r3, r2
 81088ce:	84fb      	strh	r3, [r7, #38]	; 0x26
=======
 8107588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810758a:	085b      	lsrs	r3, r3, #1
 810758c:	b29b      	uxth	r3, r3
 810758e:	f003 0307 	and.w	r3, r3, #7
 8107592:	b29a      	uxth	r2, r3
 8107594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8107596:	4313      	orrs	r3, r2
 8107598:	84fb      	strh	r3, [r7, #38]	; 0x26
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        huart->Instance->BRR = brrtemp;
<<<<<<< HEAD
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	681b      	ldr	r3, [r3, #0]
 81088d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81088d6:	60da      	str	r2, [r3, #12]
 81088d8:	e0bb      	b.n	8108a52 <UART_SetConfig+0xa92>
=======
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	681b      	ldr	r3, [r3, #0]
 810759e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81075a0:	60da      	str	r2, [r3, #12]
 81075a2:	e0f2      	b.n	810778a <UART_SetConfig+0xb26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 81088da:	2301      	movs	r3, #1
 81088dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81088e0:	e0b7      	b.n	8108a52 <UART_SetConfig+0xa92>
=======
 81075a4:	2301      	movs	r3, #1
 81075a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81075aa:	e0ee      	b.n	810778a <UART_SetConfig+0xb26>
 81075ac:	081109b0 	.word	0x081109b0
 81075b0:	58024400 	.word	0x58024400
 81075b4:	03d09000 	.word	0x03d09000
 81075b8:	003d0900 	.word	0x003d0900
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 81088e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81088e6:	2b20      	cmp	r3, #32
 81088e8:	dc4a      	bgt.n	8108980 <UART_SetConfig+0x9c0>
 81088ea:	2b00      	cmp	r3, #0
 81088ec:	f2c0 8086 	blt.w	81089fc <UART_SetConfig+0xa3c>
 81088f0:	2b20      	cmp	r3, #32
 81088f2:	f200 8083 	bhi.w	81089fc <UART_SetConfig+0xa3c>
 81088f6:	a201      	add	r2, pc, #4	; (adr r2, 81088fc <UART_SetConfig+0x93c>)
 81088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088fc:	08108987 	.word	0x08108987
 8108900:	081089a1 	.word	0x081089a1
 8108904:	081089fd 	.word	0x081089fd
 8108908:	081089fd 	.word	0x081089fd
 810890c:	081089a9 	.word	0x081089a9
 8108910:	081089fd 	.word	0x081089fd
 8108914:	081089fd 	.word	0x081089fd
 8108918:	081089fd 	.word	0x081089fd
 810891c:	081089b9 	.word	0x081089b9
 8108920:	081089fd 	.word	0x081089fd
 8108924:	081089fd 	.word	0x081089fd
 8108928:	081089fd 	.word	0x081089fd
 810892c:	081089fd 	.word	0x081089fd
 8108930:	081089fd 	.word	0x081089fd
 8108934:	081089fd 	.word	0x081089fd
 8108938:	081089fd 	.word	0x081089fd
 810893c:	081089c9 	.word	0x081089c9
 8108940:	081089fd 	.word	0x081089fd
 8108944:	081089fd 	.word	0x081089fd
 8108948:	081089fd 	.word	0x081089fd
 810894c:	081089fd 	.word	0x081089fd
 8108950:	081089fd 	.word	0x081089fd
 8108954:	081089fd 	.word	0x081089fd
 8108958:	081089fd 	.word	0x081089fd
 810895c:	081089fd 	.word	0x081089fd
 8108960:	081089fd 	.word	0x081089fd
 8108964:	081089fd 	.word	0x081089fd
 8108968:	081089fd 	.word	0x081089fd
 810896c:	081089fd 	.word	0x081089fd
 8108970:	081089fd 	.word	0x081089fd
 8108974:	081089fd 	.word	0x081089fd
 8108978:	081089fd 	.word	0x081089fd
 810897c:	081089ef 	.word	0x081089ef
 8108980:	2b40      	cmp	r3, #64	; 0x40
 8108982:	d037      	beq.n	81089f4 <UART_SetConfig+0xa34>
 8108984:	e03a      	b.n	81089fc <UART_SetConfig+0xa3c>
=======
 81075bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81075c0:	2b40      	cmp	r3, #64	; 0x40
 81075c2:	f200 80b7 	bhi.w	8107734 <UART_SetConfig+0xad0>
 81075c6:	a201      	add	r2, pc, #4	; (adr r2, 81075cc <UART_SetConfig+0x968>)
 81075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81075cc:	081076d1 	.word	0x081076d1
 81075d0:	081076d9 	.word	0x081076d9
 81075d4:	08107735 	.word	0x08107735
 81075d8:	08107735 	.word	0x08107735
 81075dc:	081076e1 	.word	0x081076e1
 81075e0:	08107735 	.word	0x08107735
 81075e4:	08107735 	.word	0x08107735
 81075e8:	08107735 	.word	0x08107735
 81075ec:	081076f1 	.word	0x081076f1
 81075f0:	08107735 	.word	0x08107735
 81075f4:	08107735 	.word	0x08107735
 81075f8:	08107735 	.word	0x08107735
 81075fc:	08107735 	.word	0x08107735
 8107600:	08107735 	.word	0x08107735
 8107604:	08107735 	.word	0x08107735
 8107608:	08107735 	.word	0x08107735
 810760c:	08107701 	.word	0x08107701
 8107610:	08107735 	.word	0x08107735
 8107614:	08107735 	.word	0x08107735
 8107618:	08107735 	.word	0x08107735
 810761c:	08107735 	.word	0x08107735
 8107620:	08107735 	.word	0x08107735
 8107624:	08107735 	.word	0x08107735
 8107628:	08107735 	.word	0x08107735
 810762c:	08107735 	.word	0x08107735
 8107630:	08107735 	.word	0x08107735
 8107634:	08107735 	.word	0x08107735
 8107638:	08107735 	.word	0x08107735
 810763c:	08107735 	.word	0x08107735
 8107640:	08107735 	.word	0x08107735
 8107644:	08107735 	.word	0x08107735
 8107648:	08107735 	.word	0x08107735
 810764c:	08107727 	.word	0x08107727
 8107650:	08107735 	.word	0x08107735
 8107654:	08107735 	.word	0x08107735
 8107658:	08107735 	.word	0x08107735
 810765c:	08107735 	.word	0x08107735
 8107660:	08107735 	.word	0x08107735
 8107664:	08107735 	.word	0x08107735
 8107668:	08107735 	.word	0x08107735
 810766c:	08107735 	.word	0x08107735
 8107670:	08107735 	.word	0x08107735
 8107674:	08107735 	.word	0x08107735
 8107678:	08107735 	.word	0x08107735
 810767c:	08107735 	.word	0x08107735
 8107680:	08107735 	.word	0x08107735
 8107684:	08107735 	.word	0x08107735
 8107688:	08107735 	.word	0x08107735
 810768c:	08107735 	.word	0x08107735
 8107690:	08107735 	.word	0x08107735
 8107694:	08107735 	.word	0x08107735
 8107698:	08107735 	.word	0x08107735
 810769c:	08107735 	.word	0x08107735
 81076a0:	08107735 	.word	0x08107735
 81076a4:	08107735 	.word	0x08107735
 81076a8:	08107735 	.word	0x08107735
 81076ac:	08107735 	.word	0x08107735
 81076b0:	08107735 	.word	0x08107735
 81076b4:	08107735 	.word	0x08107735
 81076b8:	08107735 	.word	0x08107735
 81076bc:	08107735 	.word	0x08107735
 81076c0:	08107735 	.word	0x08107735
 81076c4:	08107735 	.word	0x08107735
 81076c8:	08107735 	.word	0x08107735
 81076cc:	0810772d 	.word	0x0810772d
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8108986:	f7fd fff7 	bl	8106978 <HAL_RCC_GetPCLK1Freq>
 810898a:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 81076d0:	f7fd ffb2 	bl	8105638 <HAL_RCC_GetPCLK1Freq>
 81076d4:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 810898c:	e03c      	b.n	8108a08 <UART_SetConfig+0xa48>
 810898e:	bf00      	nop
 8108990:	003d0900 	.word	0x003d0900
 8108994:	08114994 	.word	0x08114994
 8108998:	58024400 	.word	0x58024400
 810899c:	03d09000 	.word	0x03d09000
=======
 81076d6:	e033      	b.n	8107740 <UART_SetConfig+0xadc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
<<<<<<< HEAD
 81089a0:	f7fe f800 	bl	81069a4 <HAL_RCC_GetPCLK2Freq>
 81089a4:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 81076d8:	f7fd ffc4 	bl	8105664 <HAL_RCC_GetPCLK2Freq>
 81076dc:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 81089a6:	e02f      	b.n	8108a08 <UART_SetConfig+0xa48>
=======
 81076de:	e02f      	b.n	8107740 <UART_SetConfig+0xadc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
<<<<<<< HEAD
 81089a8:	f107 0314 	add.w	r3, r7, #20
 81089ac:	4618      	mov	r0, r3
 81089ae:	f7fe f867 	bl	8106a80 <HAL_RCCEx_GetPLL2ClockFreq>
=======
 81076e0:	f107 0314 	add.w	r3, r7, #20
 81076e4:	4618      	mov	r0, r3
 81076e6:	f7fe f82b 	bl	8105740 <HAL_RCCEx_GetPLL2ClockFreq>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pclk = pll2_clocks.PLL2_Q_Frequency;
<<<<<<< HEAD
 81089b2:	69bb      	ldr	r3, [r7, #24]
 81089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 81076ea:	69bb      	ldr	r3, [r7, #24]
 81076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 81089b6:	e027      	b.n	8108a08 <UART_SetConfig+0xa48>
=======
 81076ee:	e027      	b.n	8107740 <UART_SetConfig+0xadc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
<<<<<<< HEAD
 81089b8:	f107 0308 	add.w	r3, r7, #8
 81089bc:	4618      	mov	r0, r3
 81089be:	f7fe f9b3 	bl	8106d28 <HAL_RCCEx_GetPLL3ClockFreq>
=======
 81076f0:	f107 0308 	add.w	r3, r7, #8
 81076f4:	4618      	mov	r0, r3
 81076f6:	f7fe f96f 	bl	81059d8 <HAL_RCCEx_GetPLL3ClockFreq>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        pclk = pll3_clocks.PLL3_Q_Frequency;
<<<<<<< HEAD
 81089c2:	68fb      	ldr	r3, [r7, #12]
 81089c4:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 81076fa:	68fb      	ldr	r3, [r7, #12]
 81076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 81089c6:	e01f      	b.n	8108a08 <UART_SetConfig+0xa48>
=======
 81076fe:	e01f      	b.n	8107740 <UART_SetConfig+0xadc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 81089c8:	4b2c      	ldr	r3, [pc, #176]	; (8108a7c <UART_SetConfig+0xabc>)
 81089ca:	681b      	ldr	r3, [r3, #0]
 81089cc:	f003 0320 	and.w	r3, r3, #32
 81089d0:	2b00      	cmp	r3, #0
 81089d2:	d009      	beq.n	81089e8 <UART_SetConfig+0xa28>
=======
 8107700:	4b2c      	ldr	r3, [pc, #176]	; (81077b4 <UART_SetConfig+0xb50>)
 8107702:	681b      	ldr	r3, [r3, #0]
 8107704:	f003 0320 	and.w	r3, r3, #32
 8107708:	2b00      	cmp	r3, #0
 810770a:	d009      	beq.n	8107720 <UART_SetConfig+0xabc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
<<<<<<< HEAD
 81089d4:	4b29      	ldr	r3, [pc, #164]	; (8108a7c <UART_SetConfig+0xabc>)
 81089d6:	681b      	ldr	r3, [r3, #0]
 81089d8:	08db      	lsrs	r3, r3, #3
 81089da:	f003 0303 	and.w	r3, r3, #3
 81089de:	4a28      	ldr	r2, [pc, #160]	; (8108a80 <UART_SetConfig+0xac0>)
 81089e0:	fa22 f303 	lsr.w	r3, r2, r3
 81089e4:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 810770c:	4b29      	ldr	r3, [pc, #164]	; (81077b4 <UART_SetConfig+0xb50>)
 810770e:	681b      	ldr	r3, [r3, #0]
 8107710:	08db      	lsrs	r3, r3, #3
 8107712:	f003 0303 	and.w	r3, r3, #3
 8107716:	4a28      	ldr	r2, [pc, #160]	; (81077b8 <UART_SetConfig+0xb54>)
 8107718:	fa22 f303 	lsr.w	r3, r2, r3
 810771c:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 81089e6:	e00f      	b.n	8108a08 <UART_SetConfig+0xa48>
=======
 810771e:	e00f      	b.n	8107740 <UART_SetConfig+0xadc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          pclk = (uint32_t) HSI_VALUE;
<<<<<<< HEAD
 81089e8:	4b25      	ldr	r3, [pc, #148]	; (8108a80 <UART_SetConfig+0xac0>)
 81089ea:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107720:	4b25      	ldr	r3, [pc, #148]	; (81077b8 <UART_SetConfig+0xb54>)
 8107722:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 81089ec:	e00c      	b.n	8108a08 <UART_SetConfig+0xa48>
=======
 8107724:	e00c      	b.n	8107740 <UART_SetConfig+0xadc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
<<<<<<< HEAD
 81089ee:	4b25      	ldr	r3, [pc, #148]	; (8108a84 <UART_SetConfig+0xac4>)
 81089f0:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107726:	4b25      	ldr	r3, [pc, #148]	; (81077bc <UART_SetConfig+0xb58>)
 8107728:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 81089f2:	e009      	b.n	8108a08 <UART_SetConfig+0xa48>
=======
 810772a:	e009      	b.n	8107740 <UART_SetConfig+0xadc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
<<<<<<< HEAD
 81089f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 810772c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107730:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 81089fa:	e005      	b.n	8108a08 <UART_SetConfig+0xa48>
=======
 8107732:	e005      	b.n	8107740 <UART_SetConfig+0xadc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      default:
        pclk = 0U;
<<<<<<< HEAD
 81089fc:	2300      	movs	r3, #0
 81089fe:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8107734:	2300      	movs	r3, #0
 8107736:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        ret = HAL_ERROR;
<<<<<<< HEAD
 8108a00:	2301      	movs	r3, #1
 8108a02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
=======
 8107738:	2301      	movs	r3, #1
 810773a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        break;
<<<<<<< HEAD
 8108a06:	bf00      	nop
=======
 810773e:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }

    if (pclk != 0U)
<<<<<<< HEAD
 8108a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108a0a:	2b00      	cmp	r3, #0
 8108a0c:	d021      	beq.n	8108a52 <UART_SetConfig+0xa92>
=======
 8107740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107742:	2b00      	cmp	r3, #0
 8107744:	d021      	beq.n	810778a <UART_SetConfig+0xb26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a12:	4a1d      	ldr	r2, [pc, #116]	; (8108a88 <UART_SetConfig+0xac8>)
 8108a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108a18:	461a      	mov	r2, r3
 8108a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108a1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8108a20:	687b      	ldr	r3, [r7, #4]
 8108a22:	685b      	ldr	r3, [r3, #4]
 8108a24:	085b      	lsrs	r3, r3, #1
 8108a26:	441a      	add	r2, r3
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	685b      	ldr	r3, [r3, #4]
 8108a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a30:	b29b      	uxth	r3, r3
 8108a32:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8107746:	687b      	ldr	r3, [r7, #4]
 8107748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810774a:	4a1d      	ldr	r2, [pc, #116]	; (81077c0 <UART_SetConfig+0xb5c>)
 810774c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107750:	461a      	mov	r2, r3
 8107752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107754:	fbb3 f2f2 	udiv	r2, r3, r2
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	685b      	ldr	r3, [r3, #4]
 810775c:	085b      	lsrs	r3, r3, #1
 810775e:	441a      	add	r2, r3
 8107760:	687b      	ldr	r3, [r7, #4]
 8107762:	685b      	ldr	r3, [r3, #4]
 8107764:	fbb2 f3f3 	udiv	r3, r2, r3
 8107768:	b29b      	uxth	r3, r3
 810776a:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< HEAD
 8108a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a36:	2b0f      	cmp	r3, #15
 8108a38:	d908      	bls.n	8108a4c <UART_SetConfig+0xa8c>
 8108a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108a40:	d204      	bcs.n	8108a4c <UART_SetConfig+0xa8c>
=======
 810776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810776e:	2b0f      	cmp	r3, #15
 8107770:	d908      	bls.n	8107784 <UART_SetConfig+0xb20>
 8107772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107778:	d204      	bcs.n	8107784 <UART_SetConfig+0xb20>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        huart->Instance->BRR = usartdiv;
<<<<<<< HEAD
 8108a42:	687b      	ldr	r3, [r7, #4]
 8108a44:	681b      	ldr	r3, [r3, #0]
 8108a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108a48:	60da      	str	r2, [r3, #12]
 8108a4a:	e002      	b.n	8108a52 <UART_SetConfig+0xa92>
=======
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107780:	60da      	str	r2, [r3, #12]
 8107782:	e002      	b.n	810778a <UART_SetConfig+0xb26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8108a4c:	2301      	movs	r3, #1
 8108a4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
=======
 8107784:	2301      	movs	r3, #1
 8107786:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< HEAD
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	2201      	movs	r2, #1
 8108a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
=======
 810778a:	687b      	ldr	r3, [r7, #4]
 810778c:	2201      	movs	r2, #1
 810778e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart->NbRxDataToProcess = 1;
<<<<<<< HEAD
 8108a5a:	687b      	ldr	r3, [r7, #4]
 8108a5c:	2201      	movs	r2, #1
 8108a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 8107792:	687b      	ldr	r3, [r7, #4]
 8107794:	2201      	movs	r2, #1
 8107796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 8108a62:	687b      	ldr	r3, [r7, #4]
 8108a64:	2200      	movs	r2, #0
 8108a66:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	2200      	movs	r2, #0
 810779e:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart->TxISR = NULL;
<<<<<<< HEAD
 8108a68:	687b      	ldr	r3, [r7, #4]
 8108a6a:	2200      	movs	r2, #0
 8108a6c:	671a      	str	r2, [r3, #112]	; 0x70
=======
 81077a0:	687b      	ldr	r3, [r7, #4]
 81077a2:	2200      	movs	r2, #0
 81077a4:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return ret;
<<<<<<< HEAD
 8108a6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
=======
 81077a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8108a72:	4618      	mov	r0, r3
 8108a74:	3738      	adds	r7, #56	; 0x38
 8108a76:	46bd      	mov	sp, r7
 8108a78:	bdb0      	pop	{r4, r5, r7, pc}
 8108a7a:	bf00      	nop
 8108a7c:	58024400 	.word	0x58024400
 8108a80:	03d09000 	.word	0x03d09000
 8108a84:	003d0900 	.word	0x003d0900
 8108a88:	08114994 	.word	0x08114994
=======
 81077aa:	4618      	mov	r0, r3
 81077ac:	3738      	adds	r7, #56	; 0x38
 81077ae:	46bd      	mov	sp, r7
 81077b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 81077b4:	58024400 	.word	0x58024400
 81077b8:	03d09000 	.word	0x03d09000
 81077bc:	003d0900 	.word	0x003d0900
 81077c0:	081109b0 	.word	0x081109b0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108a8c <UART_AdvFeatureConfig>:
=======
081077c4 <UART_AdvFeatureConfig>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8108a8c:	b480      	push	{r7}
 8108a8e:	b083      	sub	sp, #12
 8108a90:	af00      	add	r7, sp, #0
 8108a92:	6078      	str	r0, [r7, #4]
=======
 81077c4:	b480      	push	{r7}
 81077c6:	b083      	sub	sp, #12
 81077c8:	af00      	add	r7, sp, #0
 81077ca:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8108a94:	687b      	ldr	r3, [r7, #4]
 8108a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a98:	f003 0301 	and.w	r3, r3, #1
 8108a9c:	2b00      	cmp	r3, #0
 8108a9e:	d00a      	beq.n	8108ab6 <UART_AdvFeatureConfig+0x2a>
=======
 81077cc:	687b      	ldr	r3, [r7, #4]
 81077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81077d0:	f003 0301 	and.w	r3, r3, #1
 81077d4:	2b00      	cmp	r3, #0
 81077d6:	d00a      	beq.n	81077ee <UART_AdvFeatureConfig+0x2a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
<<<<<<< HEAD
 8108aa0:	687b      	ldr	r3, [r7, #4]
 8108aa2:	681b      	ldr	r3, [r3, #0]
 8108aa4:	685b      	ldr	r3, [r3, #4]
 8108aa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108aaa:	687b      	ldr	r3, [r7, #4]
 8108aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108aae:	687b      	ldr	r3, [r7, #4]
 8108ab0:	681b      	ldr	r3, [r3, #0]
 8108ab2:	430a      	orrs	r2, r1
 8108ab4:	605a      	str	r2, [r3, #4]
=======
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	681b      	ldr	r3, [r3, #0]
 81077dc:	685b      	ldr	r3, [r3, #4]
 81077de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	430a      	orrs	r2, r1
 81077ec:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 8108ab6:	687b      	ldr	r3, [r7, #4]
 8108ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108aba:	f003 0302 	and.w	r3, r3, #2
 8108abe:	2b00      	cmp	r3, #0
 8108ac0:	d00a      	beq.n	8108ad8 <UART_AdvFeatureConfig+0x4c>
=======
 81077ee:	687b      	ldr	r3, [r7, #4]
 81077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81077f2:	f003 0302 	and.w	r3, r3, #2
 81077f6:	2b00      	cmp	r3, #0
 81077f8:	d00a      	beq.n	8107810 <UART_AdvFeatureConfig+0x4c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
<<<<<<< HEAD
 8108ac2:	687b      	ldr	r3, [r7, #4]
 8108ac4:	681b      	ldr	r3, [r3, #0]
 8108ac6:	685b      	ldr	r3, [r3, #4]
 8108ac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108acc:	687b      	ldr	r3, [r7, #4]
 8108ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108ad0:	687b      	ldr	r3, [r7, #4]
 8108ad2:	681b      	ldr	r3, [r3, #0]
 8108ad4:	430a      	orrs	r2, r1
 8108ad6:	605a      	str	r2, [r3, #4]
=======
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	681b      	ldr	r3, [r3, #0]
 81077fe:	685b      	ldr	r3, [r3, #4]
 8107800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	681b      	ldr	r3, [r3, #0]
 810780c:	430a      	orrs	r2, r1
 810780e:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 8108ad8:	687b      	ldr	r3, [r7, #4]
 8108ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108adc:	f003 0304 	and.w	r3, r3, #4
 8108ae0:	2b00      	cmp	r3, #0
 8108ae2:	d00a      	beq.n	8108afa <UART_AdvFeatureConfig+0x6e>
=======
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107814:	f003 0304 	and.w	r3, r3, #4
 8107818:	2b00      	cmp	r3, #0
 810781a:	d00a      	beq.n	8107832 <UART_AdvFeatureConfig+0x6e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
<<<<<<< HEAD
 8108ae4:	687b      	ldr	r3, [r7, #4]
 8108ae6:	681b      	ldr	r3, [r3, #0]
 8108ae8:	685b      	ldr	r3, [r3, #4]
 8108aea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108aee:	687b      	ldr	r3, [r7, #4]
 8108af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108af2:	687b      	ldr	r3, [r7, #4]
 8108af4:	681b      	ldr	r3, [r3, #0]
 8108af6:	430a      	orrs	r2, r1
 8108af8:	605a      	str	r2, [r3, #4]
=======
 810781c:	687b      	ldr	r3, [r7, #4]
 810781e:	681b      	ldr	r3, [r3, #0]
 8107820:	685b      	ldr	r3, [r3, #4]
 8107822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	681b      	ldr	r3, [r3, #0]
 810782e:	430a      	orrs	r2, r1
 8107830:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 8108afa:	687b      	ldr	r3, [r7, #4]
 8108afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108afe:	f003 0308 	and.w	r3, r3, #8
 8108b02:	2b00      	cmp	r3, #0
 8108b04:	d00a      	beq.n	8108b1c <UART_AdvFeatureConfig+0x90>
=======
 8107832:	687b      	ldr	r3, [r7, #4]
 8107834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107836:	f003 0308 	and.w	r3, r3, #8
 810783a:	2b00      	cmp	r3, #0
 810783c:	d00a      	beq.n	8107854 <UART_AdvFeatureConfig+0x90>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
<<<<<<< HEAD
 8108b06:	687b      	ldr	r3, [r7, #4]
 8108b08:	681b      	ldr	r3, [r3, #0]
 8108b0a:	685b      	ldr	r3, [r3, #4]
 8108b0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108b14:	687b      	ldr	r3, [r7, #4]
 8108b16:	681b      	ldr	r3, [r3, #0]
 8108b18:	430a      	orrs	r2, r1
 8108b1a:	605a      	str	r2, [r3, #4]
=======
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	681b      	ldr	r3, [r3, #0]
 8107842:	685b      	ldr	r3, [r3, #4]
 8107844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810784c:	687b      	ldr	r3, [r7, #4]
 810784e:	681b      	ldr	r3, [r3, #0]
 8107850:	430a      	orrs	r2, r1
 8107852:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b20:	f003 0310 	and.w	r3, r3, #16
 8108b24:	2b00      	cmp	r3, #0
 8108b26:	d00a      	beq.n	8108b3e <UART_AdvFeatureConfig+0xb2>
=======
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107858:	f003 0310 	and.w	r3, r3, #16
 810785c:	2b00      	cmp	r3, #0
 810785e:	d00a      	beq.n	8107876 <UART_AdvFeatureConfig+0xb2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
<<<<<<< HEAD
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	681b      	ldr	r3, [r3, #0]
 8108b2c:	689b      	ldr	r3, [r3, #8]
 8108b2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108b36:	687b      	ldr	r3, [r7, #4]
 8108b38:	681b      	ldr	r3, [r3, #0]
 8108b3a:	430a      	orrs	r2, r1
 8108b3c:	609a      	str	r2, [r3, #8]
=======
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	681b      	ldr	r3, [r3, #0]
 8107864:	689b      	ldr	r3, [r3, #8]
 8107866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810786a:	687b      	ldr	r3, [r7, #4]
 810786c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810786e:	687b      	ldr	r3, [r7, #4]
 8107870:	681b      	ldr	r3, [r3, #0]
 8107872:	430a      	orrs	r2, r1
 8107874:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 8108b3e:	687b      	ldr	r3, [r7, #4]
 8108b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b42:	f003 0320 	and.w	r3, r3, #32
 8108b46:	2b00      	cmp	r3, #0
 8108b48:	d00a      	beq.n	8108b60 <UART_AdvFeatureConfig+0xd4>
=======
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810787a:	f003 0320 	and.w	r3, r3, #32
 810787e:	2b00      	cmp	r3, #0
 8107880:	d00a      	beq.n	8107898 <UART_AdvFeatureConfig+0xd4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
<<<<<<< HEAD
 8108b4a:	687b      	ldr	r3, [r7, #4]
 8108b4c:	681b      	ldr	r3, [r3, #0]
 8108b4e:	689b      	ldr	r3, [r3, #8]
 8108b50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108b54:	687b      	ldr	r3, [r7, #4]
 8108b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108b58:	687b      	ldr	r3, [r7, #4]
 8108b5a:	681b      	ldr	r3, [r3, #0]
 8108b5c:	430a      	orrs	r2, r1
 8108b5e:	609a      	str	r2, [r3, #8]
=======
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	681b      	ldr	r3, [r3, #0]
 8107886:	689b      	ldr	r3, [r3, #8]
 8107888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810788c:	687b      	ldr	r3, [r7, #4]
 810788e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107890:	687b      	ldr	r3, [r7, #4]
 8107892:	681b      	ldr	r3, [r3, #0]
 8107894:	430a      	orrs	r2, r1
 8107896:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108b68:	2b00      	cmp	r3, #0
 8108b6a:	d01a      	beq.n	8108ba2 <UART_AdvFeatureConfig+0x116>
=======
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81078a0:	2b00      	cmp	r3, #0
 81078a2:	d01a      	beq.n	81078da <UART_AdvFeatureConfig+0x116>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8108b6c:	687b      	ldr	r3, [r7, #4]
 8108b6e:	681b      	ldr	r3, [r3, #0]
 8108b70:	685b      	ldr	r3, [r3, #4]
 8108b72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108b76:	687b      	ldr	r3, [r7, #4]
 8108b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108b7a:	687b      	ldr	r3, [r7, #4]
 8108b7c:	681b      	ldr	r3, [r3, #0]
 8108b7e:	430a      	orrs	r2, r1
 8108b80:	605a      	str	r2, [r3, #4]
=======
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	681b      	ldr	r3, [r3, #0]
 81078a8:	685b      	ldr	r3, [r3, #4]
 81078aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81078ae:	687b      	ldr	r3, [r7, #4]
 81078b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	681b      	ldr	r3, [r3, #0]
 81078b6:	430a      	orrs	r2, r1
 81078b8:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
<<<<<<< HEAD
 8108b82:	687b      	ldr	r3, [r7, #4]
 8108b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108b8a:	d10a      	bne.n	8108ba2 <UART_AdvFeatureConfig+0x116>
=======
 81078ba:	687b      	ldr	r3, [r7, #4]
 81078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81078be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81078c2:	d10a      	bne.n	81078da <UART_AdvFeatureConfig+0x116>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
<<<<<<< HEAD
 8108b8c:	687b      	ldr	r3, [r7, #4]
 8108b8e:	681b      	ldr	r3, [r3, #0]
 8108b90:	685b      	ldr	r3, [r3, #4]
 8108b92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108b96:	687b      	ldr	r3, [r7, #4]
 8108b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108b9a:	687b      	ldr	r3, [r7, #4]
 8108b9c:	681b      	ldr	r3, [r3, #0]
 8108b9e:	430a      	orrs	r2, r1
 8108ba0:	605a      	str	r2, [r3, #4]
=======
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	681b      	ldr	r3, [r3, #0]
 81078c8:	685b      	ldr	r3, [r3, #4]
 81078ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81078ce:	687b      	ldr	r3, [r7, #4]
 81078d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81078d2:	687b      	ldr	r3, [r7, #4]
 81078d4:	681b      	ldr	r3, [r3, #0]
 81078d6:	430a      	orrs	r2, r1
 81078d8:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 8108ba2:	687b      	ldr	r3, [r7, #4]
 8108ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108baa:	2b00      	cmp	r3, #0
 8108bac:	d00a      	beq.n	8108bc4 <UART_AdvFeatureConfig+0x138>
=======
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81078de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81078e2:	2b00      	cmp	r3, #0
 81078e4:	d00a      	beq.n	81078fc <UART_AdvFeatureConfig+0x138>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
<<<<<<< HEAD
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	681b      	ldr	r3, [r3, #0]
 8108bb2:	685b      	ldr	r3, [r3, #4]
 8108bb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108bb8:	687b      	ldr	r3, [r7, #4]
 8108bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108bbc:	687b      	ldr	r3, [r7, #4]
 8108bbe:	681b      	ldr	r3, [r3, #0]
 8108bc0:	430a      	orrs	r2, r1
 8108bc2:	605a      	str	r2, [r3, #4]
=======
 81078e6:	687b      	ldr	r3, [r7, #4]
 81078e8:	681b      	ldr	r3, [r3, #0]
 81078ea:	685b      	ldr	r3, [r3, #4]
 81078ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81078f0:	687b      	ldr	r3, [r7, #4]
 81078f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81078f4:	687b      	ldr	r3, [r7, #4]
 81078f6:	681b      	ldr	r3, [r3, #0]
 81078f8:	430a      	orrs	r2, r1
 81078fa:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
}
<<<<<<< HEAD
 8108bc4:	bf00      	nop
 8108bc6:	370c      	adds	r7, #12
 8108bc8:	46bd      	mov	sp, r7
 8108bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bce:	4770      	bx	lr
=======
 81078fc:	bf00      	nop
 81078fe:	370c      	adds	r7, #12
 8107900:	46bd      	mov	sp, r7
 8107902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107906:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108bd0 <UART_CheckIdleState>:
=======
08107908 <UART_CheckIdleState>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8108bd0:	b580      	push	{r7, lr}
 8108bd2:	b086      	sub	sp, #24
 8108bd4:	af02      	add	r7, sp, #8
 8108bd6:	6078      	str	r0, [r7, #4]
=======
 8107908:	b580      	push	{r7, lr}
 810790a:	b086      	sub	sp, #24
 810790c:	af02      	add	r7, sp, #8
 810790e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8108bd8:	687b      	ldr	r3, [r7, #4]
 8108bda:	2200      	movs	r2, #0
 8108bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
=======
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	2200      	movs	r2, #0
 8107914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 8108be0:	f7f9 fbb4 	bl	810234c <HAL_GetTick>
 8108be4:	60f8      	str	r0, [r7, #12]
=======
 8107918:	f7fa fc50 	bl	81021bc <HAL_GetTick>
 810791c:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
<<<<<<< HEAD
 8108be6:	687b      	ldr	r3, [r7, #4]
 8108be8:	681b      	ldr	r3, [r3, #0]
 8108bea:	681b      	ldr	r3, [r3, #0]
 8108bec:	f003 0308 	and.w	r3, r3, #8
 8108bf0:	2b08      	cmp	r3, #8
 8108bf2:	d10e      	bne.n	8108c12 <UART_CheckIdleState+0x42>
=======
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	681b      	ldr	r3, [r3, #0]
 8107924:	f003 0308 	and.w	r3, r3, #8
 8107928:	2b08      	cmp	r3, #8
 810792a:	d10e      	bne.n	810794a <UART_CheckIdleState+0x42>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
<<<<<<< HEAD
 8108bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108bf8:	9300      	str	r3, [sp, #0]
 8108bfa:	68fb      	ldr	r3, [r7, #12]
 8108bfc:	2200      	movs	r2, #0
 8108bfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108c02:	6878      	ldr	r0, [r7, #4]
 8108c04:	f000 f82c 	bl	8108c60 <UART_WaitOnFlagUntilTimeout>
 8108c08:	4603      	mov	r3, r0
 8108c0a:	2b00      	cmp	r3, #0
 8108c0c:	d001      	beq.n	8108c12 <UART_CheckIdleState+0x42>
=======
 810792c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107930:	9300      	str	r3, [sp, #0]
 8107932:	68fb      	ldr	r3, [r7, #12]
 8107934:	2200      	movs	r2, #0
 8107936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810793a:	6878      	ldr	r0, [r7, #4]
 810793c:	f000 f82c 	bl	8107998 <UART_WaitOnFlagUntilTimeout>
 8107940:	4603      	mov	r3, r0
 8107942:	2b00      	cmp	r3, #0
 8107944:	d001      	beq.n	810794a <UART_CheckIdleState+0x42>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
<<<<<<< HEAD
 8108c0e:	2303      	movs	r3, #3
 8108c10:	e022      	b.n	8108c58 <UART_CheckIdleState+0x88>
=======
 8107946:	2303      	movs	r3, #3
 8107948:	e022      	b.n	8107990 <UART_CheckIdleState+0x88>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	681b      	ldr	r3, [r3, #0]
 8108c16:	681b      	ldr	r3, [r3, #0]
 8108c18:	f003 0304 	and.w	r3, r3, #4
 8108c1c:	2b04      	cmp	r3, #4
 8108c1e:	d10e      	bne.n	8108c3e <UART_CheckIdleState+0x6e>
=======
 810794a:	687b      	ldr	r3, [r7, #4]
 810794c:	681b      	ldr	r3, [r3, #0]
 810794e:	681b      	ldr	r3, [r3, #0]
 8107950:	f003 0304 	and.w	r3, r3, #4
 8107954:	2b04      	cmp	r3, #4
 8107956:	d10e      	bne.n	8107976 <UART_CheckIdleState+0x6e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
<<<<<<< HEAD
 8108c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108c24:	9300      	str	r3, [sp, #0]
 8108c26:	68fb      	ldr	r3, [r7, #12]
 8108c28:	2200      	movs	r2, #0
 8108c2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108c2e:	6878      	ldr	r0, [r7, #4]
 8108c30:	f000 f816 	bl	8108c60 <UART_WaitOnFlagUntilTimeout>
 8108c34:	4603      	mov	r3, r0
 8108c36:	2b00      	cmp	r3, #0
 8108c38:	d001      	beq.n	8108c3e <UART_CheckIdleState+0x6e>
=======
 8107958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810795c:	9300      	str	r3, [sp, #0]
 810795e:	68fb      	ldr	r3, [r7, #12]
 8107960:	2200      	movs	r2, #0
 8107962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107966:	6878      	ldr	r0, [r7, #4]
 8107968:	f000 f816 	bl	8107998 <UART_WaitOnFlagUntilTimeout>
 810796c:	4603      	mov	r3, r0
 810796e:	2b00      	cmp	r3, #0
 8107970:	d001      	beq.n	8107976 <UART_CheckIdleState+0x6e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
<<<<<<< HEAD
 8108c3a:	2303      	movs	r3, #3
 8108c3c:	e00c      	b.n	8108c58 <UART_CheckIdleState+0x88>
=======
 8107972:	2303      	movs	r3, #3
 8107974:	e00c      	b.n	8107990 <UART_CheckIdleState+0x88>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108c3e:	687b      	ldr	r3, [r7, #4]
 8108c40:	2220      	movs	r2, #32
 8108c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	2220      	movs	r2, #32
 810797a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	2220      	movs	r2, #32
 8108c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	2220      	movs	r2, #32
 8107982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	2200      	movs	r2, #0
 8108c52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	2200      	movs	r2, #0
 810798a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return HAL_OK;
<<<<<<< HEAD
 8108c56:	2300      	movs	r3, #0
=======
 810798e:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8108c58:	4618      	mov	r0, r3
 8108c5a:	3710      	adds	r7, #16
 8108c5c:	46bd      	mov	sp, r7
 8108c5e:	bd80      	pop	{r7, pc}
=======
 8107990:	4618      	mov	r0, r3
 8107992:	3710      	adds	r7, #16
 8107994:	46bd      	mov	sp, r7
 8107996:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108c60 <UART_WaitOnFlagUntilTimeout>:
=======
08107998 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8108c60:	b580      	push	{r7, lr}
 8108c62:	b084      	sub	sp, #16
 8108c64:	af00      	add	r7, sp, #0
 8108c66:	60f8      	str	r0, [r7, #12]
 8108c68:	60b9      	str	r1, [r7, #8]
 8108c6a:	603b      	str	r3, [r7, #0]
 8108c6c:	4613      	mov	r3, r2
 8108c6e:	71fb      	strb	r3, [r7, #7]
=======
 8107998:	b580      	push	{r7, lr}
 810799a:	b084      	sub	sp, #16
 810799c:	af00      	add	r7, sp, #0
 810799e:	60f8      	str	r0, [r7, #12]
 81079a0:	60b9      	str	r1, [r7, #8]
 81079a2:	603b      	str	r3, [r7, #0]
 81079a4:	4613      	mov	r3, r2
 81079a6:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 8108c70:	e062      	b.n	8108d38 <UART_WaitOnFlagUntilTimeout+0xd8>
=======
 81079a8:	e062      	b.n	8107a70 <UART_WaitOnFlagUntilTimeout+0xd8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8108c72:	69bb      	ldr	r3, [r7, #24]
 8108c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108c78:	d05e      	beq.n	8108d38 <UART_WaitOnFlagUntilTimeout+0xd8>
=======
 81079aa:	69bb      	ldr	r3, [r7, #24]
 81079ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81079b0:	d05e      	beq.n	8107a70 <UART_WaitOnFlagUntilTimeout+0xd8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8108c7a:	f7f9 fb67 	bl	810234c <HAL_GetTick>
 8108c7e:	4602      	mov	r2, r0
 8108c80:	683b      	ldr	r3, [r7, #0]
 8108c82:	1ad3      	subs	r3, r2, r3
 8108c84:	69ba      	ldr	r2, [r7, #24]
 8108c86:	429a      	cmp	r2, r3
 8108c88:	d302      	bcc.n	8108c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8108c8a:	69bb      	ldr	r3, [r7, #24]
 8108c8c:	2b00      	cmp	r3, #0
 8108c8e:	d11d      	bne.n	8108ccc <UART_WaitOnFlagUntilTimeout+0x6c>
=======
 81079b2:	f7fa fc03 	bl	81021bc <HAL_GetTick>
 81079b6:	4602      	mov	r2, r0
 81079b8:	683b      	ldr	r3, [r7, #0]
 81079ba:	1ad3      	subs	r3, r2, r3
 81079bc:	69ba      	ldr	r2, [r7, #24]
 81079be:	429a      	cmp	r2, r3
 81079c0:	d302      	bcc.n	81079c8 <UART_WaitOnFlagUntilTimeout+0x30>
 81079c2:	69bb      	ldr	r3, [r7, #24]
 81079c4:	2b00      	cmp	r3, #0
 81079c6:	d11d      	bne.n	8107a04 <UART_WaitOnFlagUntilTimeout+0x6c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
<<<<<<< HEAD
 8108c90:	68fb      	ldr	r3, [r7, #12]
 8108c92:	681b      	ldr	r3, [r3, #0]
 8108c94:	681a      	ldr	r2, [r3, #0]
 8108c96:	68fb      	ldr	r3, [r7, #12]
 8108c98:	681b      	ldr	r3, [r3, #0]
 8108c9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108c9e:	601a      	str	r2, [r3, #0]
=======
 81079c8:	68fb      	ldr	r3, [r7, #12]
 81079ca:	681b      	ldr	r3, [r3, #0]
 81079cc:	681a      	ldr	r2, [r3, #0]
 81079ce:	68fb      	ldr	r3, [r7, #12]
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81079d6:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8108ca0:	68fb      	ldr	r3, [r7, #12]
 8108ca2:	681b      	ldr	r3, [r3, #0]
 8108ca4:	689a      	ldr	r2, [r3, #8]
 8108ca6:	68fb      	ldr	r3, [r7, #12]
 8108ca8:	681b      	ldr	r3, [r3, #0]
 8108caa:	f022 0201 	bic.w	r2, r2, #1
 8108cae:	609a      	str	r2, [r3, #8]
=======
 81079d8:	68fb      	ldr	r3, [r7, #12]
 81079da:	681b      	ldr	r3, [r3, #0]
 81079dc:	689a      	ldr	r2, [r3, #8]
 81079de:	68fb      	ldr	r3, [r7, #12]
 81079e0:	681b      	ldr	r3, [r3, #0]
 81079e2:	f022 0201 	bic.w	r2, r2, #1
 81079e6:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108cb0:	68fb      	ldr	r3, [r7, #12]
 8108cb2:	2220      	movs	r2, #32
 8108cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 81079e8:	68fb      	ldr	r3, [r7, #12]
 81079ea:	2220      	movs	r2, #32
 81079ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108cb8:	68fb      	ldr	r3, [r7, #12]
 8108cba:	2220      	movs	r2, #32
 8108cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 81079f0:	68fb      	ldr	r3, [r7, #12]
 81079f2:	2220      	movs	r2, #32
 81079f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8108cc0:	68fb      	ldr	r3, [r7, #12]
 8108cc2:	2200      	movs	r2, #0
 8108cc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 81079f8:	68fb      	ldr	r3, [r7, #12]
 81079fa:	2200      	movs	r2, #0
 81079fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

        return HAL_TIMEOUT;
<<<<<<< HEAD
 8108cc8:	2303      	movs	r3, #3
 8108cca:	e045      	b.n	8108d58 <UART_WaitOnFlagUntilTimeout+0xf8>
=======
 8107a00:	2303      	movs	r3, #3
 8107a02:	e045      	b.n	8107a90 <UART_WaitOnFlagUntilTimeout+0xf8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
<<<<<<< HEAD
 8108ccc:	68fb      	ldr	r3, [r7, #12]
 8108cce:	681b      	ldr	r3, [r3, #0]
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	f003 0304 	and.w	r3, r3, #4
 8108cd6:	2b00      	cmp	r3, #0
 8108cd8:	d02e      	beq.n	8108d38 <UART_WaitOnFlagUntilTimeout+0xd8>
=======
 8107a04:	68fb      	ldr	r3, [r7, #12]
 8107a06:	681b      	ldr	r3, [r3, #0]
 8107a08:	681b      	ldr	r3, [r3, #0]
 8107a0a:	f003 0304 	and.w	r3, r3, #4
 8107a0e:	2b00      	cmp	r3, #0
 8107a10:	d02e      	beq.n	8107a70 <UART_WaitOnFlagUntilTimeout+0xd8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
<<<<<<< HEAD
 8108cda:	68fb      	ldr	r3, [r7, #12]
 8108cdc:	681b      	ldr	r3, [r3, #0]
 8108cde:	69db      	ldr	r3, [r3, #28]
 8108ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108ce8:	d126      	bne.n	8108d38 <UART_WaitOnFlagUntilTimeout+0xd8>
=======
 8107a12:	68fb      	ldr	r3, [r7, #12]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	69db      	ldr	r3, [r3, #28]
 8107a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107a20:	d126      	bne.n	8107a70 <UART_WaitOnFlagUntilTimeout+0xd8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
<<<<<<< HEAD
 8108cea:	68fb      	ldr	r3, [r7, #12]
 8108cec:	681b      	ldr	r3, [r3, #0]
 8108cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108cf2:	621a      	str	r2, [r3, #32]
=======
 8107a22:	68fb      	ldr	r3, [r7, #12]
 8107a24:	681b      	ldr	r3, [r3, #0]
 8107a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107a2a:	621a      	str	r2, [r3, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
<<<<<<< HEAD
 8108cf4:	68fb      	ldr	r3, [r7, #12]
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	681a      	ldr	r2, [r3, #0]
 8108cfa:	68fb      	ldr	r3, [r7, #12]
 8108cfc:	681b      	ldr	r3, [r3, #0]
 8108cfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108d02:	601a      	str	r2, [r3, #0]
=======
 8107a2c:	68fb      	ldr	r3, [r7, #12]
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	681a      	ldr	r2, [r3, #0]
 8107a32:	68fb      	ldr	r3, [r7, #12]
 8107a34:	681b      	ldr	r3, [r3, #0]
 8107a36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8107a3a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8108d04:	68fb      	ldr	r3, [r7, #12]
 8108d06:	681b      	ldr	r3, [r3, #0]
 8108d08:	689a      	ldr	r2, [r3, #8]
 8108d0a:	68fb      	ldr	r3, [r7, #12]
 8108d0c:	681b      	ldr	r3, [r3, #0]
 8108d0e:	f022 0201 	bic.w	r2, r2, #1
 8108d12:	609a      	str	r2, [r3, #8]
=======
 8107a3c:	68fb      	ldr	r3, [r7, #12]
 8107a3e:	681b      	ldr	r3, [r3, #0]
 8107a40:	689a      	ldr	r2, [r3, #8]
 8107a42:	68fb      	ldr	r3, [r7, #12]
 8107a44:	681b      	ldr	r3, [r3, #0]
 8107a46:	f022 0201 	bic.w	r2, r2, #1
 8107a4a:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108d14:	68fb      	ldr	r3, [r7, #12]
 8108d16:	2220      	movs	r2, #32
 8108d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107a4c:	68fb      	ldr	r3, [r7, #12]
 8107a4e:	2220      	movs	r2, #32
 8107a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108d1c:	68fb      	ldr	r3, [r7, #12]
 8108d1e:	2220      	movs	r2, #32
 8108d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8107a54:	68fb      	ldr	r3, [r7, #12]
 8107a56:	2220      	movs	r2, #32
 8107a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
          huart->ErrorCode = HAL_UART_ERROR_RTO;
<<<<<<< HEAD
 8108d24:	68fb      	ldr	r3, [r7, #12]
 8108d26:	2220      	movs	r2, #32
 8108d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
=======
 8107a5c:	68fb      	ldr	r3, [r7, #12]
 8107a5e:	2220      	movs	r2, #32
 8107a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8108d2c:	68fb      	ldr	r3, [r7, #12]
 8108d2e:	2200      	movs	r2, #0
 8108d30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8107a64:	68fb      	ldr	r3, [r7, #12]
 8107a66:	2200      	movs	r2, #0
 8107a68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

          return HAL_TIMEOUT;
<<<<<<< HEAD
 8108d34:	2303      	movs	r3, #3
 8108d36:	e00f      	b.n	8108d58 <UART_WaitOnFlagUntilTimeout+0xf8>
=======
 8107a6c:	2303      	movs	r3, #3
 8107a6e:	e00f      	b.n	8107a90 <UART_WaitOnFlagUntilTimeout+0xf8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 8108d38:	68fb      	ldr	r3, [r7, #12]
 8108d3a:	681b      	ldr	r3, [r3, #0]
 8108d3c:	69da      	ldr	r2, [r3, #28]
 8108d3e:	68bb      	ldr	r3, [r7, #8]
 8108d40:	4013      	ands	r3, r2
 8108d42:	68ba      	ldr	r2, [r7, #8]
 8108d44:	429a      	cmp	r2, r3
 8108d46:	bf0c      	ite	eq
 8108d48:	2301      	moveq	r3, #1
 8108d4a:	2300      	movne	r3, #0
 8108d4c:	b2db      	uxtb	r3, r3
 8108d4e:	461a      	mov	r2, r3
 8108d50:	79fb      	ldrb	r3, [r7, #7]
 8108d52:	429a      	cmp	r2, r3
 8108d54:	d08d      	beq.n	8108c72 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8107a70:	68fb      	ldr	r3, [r7, #12]
 8107a72:	681b      	ldr	r3, [r3, #0]
 8107a74:	69da      	ldr	r2, [r3, #28]
 8107a76:	68bb      	ldr	r3, [r7, #8]
 8107a78:	4013      	ands	r3, r2
 8107a7a:	68ba      	ldr	r2, [r7, #8]
 8107a7c:	429a      	cmp	r2, r3
 8107a7e:	bf0c      	ite	eq
 8107a80:	2301      	moveq	r3, #1
 8107a82:	2300      	movne	r3, #0
 8107a84:	b2db      	uxtb	r3, r3
 8107a86:	461a      	mov	r2, r3
 8107a88:	79fb      	ldrb	r3, [r7, #7]
 8107a8a:	429a      	cmp	r2, r3
 8107a8c:	d08d      	beq.n	81079aa <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8108d56:	2300      	movs	r3, #0
=======
 8107a8e:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8108d58:	4618      	mov	r0, r3
 8108d5a:	3710      	adds	r7, #16
 8108d5c:	46bd      	mov	sp, r7
 8108d5e:	bd80      	pop	{r7, pc}
=======
 8107a90:	4618      	mov	r0, r3
 8107a92:	3710      	adds	r7, #16
 8107a94:	46bd      	mov	sp, r7
 8107a96:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108d60 <UART_EndTxTransfer>:
=======
08107a98 <UART_EndTxTransfer>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8108d60:	b480      	push	{r7}
 8108d62:	b083      	sub	sp, #12
 8108d64:	af00      	add	r7, sp, #0
 8108d66:	6078      	str	r0, [r7, #4]
=======
 8107a98:	b480      	push	{r7}
 8107a9a:	b083      	sub	sp, #12
 8107a9c:	af00      	add	r7, sp, #0
 8107a9e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
<<<<<<< HEAD
 8108d68:	687b      	ldr	r3, [r7, #4]
 8108d6a:	681b      	ldr	r3, [r3, #0]
 8108d6c:	681a      	ldr	r2, [r3, #0]
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	681b      	ldr	r3, [r3, #0]
 8108d72:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8108d76:	601a      	str	r2, [r3, #0]
=======
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	681b      	ldr	r3, [r3, #0]
 8107aa4:	681a      	ldr	r2, [r3, #0]
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	681b      	ldr	r3, [r3, #0]
 8107aaa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8107aae:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
<<<<<<< HEAD
 8108d78:	687b      	ldr	r3, [r7, #4]
 8108d7a:	681b      	ldr	r3, [r3, #0]
 8108d7c:	689a      	ldr	r2, [r3, #8]
 8108d7e:	687b      	ldr	r3, [r7, #4]
 8108d80:	681b      	ldr	r3, [r3, #0]
 8108d82:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8108d86:	609a      	str	r2, [r3, #8]
=======
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	681b      	ldr	r3, [r3, #0]
 8107ab4:	689a      	ldr	r2, [r3, #8]
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8107abe:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108d88:	687b      	ldr	r3, [r7, #4]
 8108d8a:	2220      	movs	r2, #32
 8108d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	2220      	movs	r2, #32
 8107ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8108d90:	bf00      	nop
 8108d92:	370c      	adds	r7, #12
 8108d94:	46bd      	mov	sp, r7
 8108d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d9a:	4770      	bx	lr
=======
 8107ac8:	bf00      	nop
 8107aca:	370c      	adds	r7, #12
 8107acc:	46bd      	mov	sp, r7
 8107ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ad2:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108d9c <UART_EndRxTransfer>:
=======
08107ad4 <UART_EndRxTransfer>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8108d9c:	b480      	push	{r7}
 8108d9e:	b083      	sub	sp, #12
 8108da0:	af00      	add	r7, sp, #0
 8108da2:	6078      	str	r0, [r7, #4]
=======
 8107ad4:	b480      	push	{r7}
 8107ad6:	b083      	sub	sp, #12
 8107ad8:	af00      	add	r7, sp, #0
 8107ada:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	681b      	ldr	r3, [r3, #0]
 8108da8:	681a      	ldr	r2, [r3, #0]
 8108daa:	687b      	ldr	r3, [r7, #4]
 8108dac:	681b      	ldr	r3, [r3, #0]
 8108dae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8108db2:	601a      	str	r2, [r3, #0]
=======
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	681b      	ldr	r3, [r3, #0]
 8107ae0:	681a      	ldr	r2, [r3, #0]
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8107aea:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 8108db4:	687b      	ldr	r3, [r7, #4]
 8108db6:	681b      	ldr	r3, [r3, #0]
 8108db8:	689b      	ldr	r3, [r3, #8]
 8108dba:	687a      	ldr	r2, [r7, #4]
 8108dbc:	6812      	ldr	r2, [r2, #0]
 8108dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108dc2:	f023 0301 	bic.w	r3, r3, #1
 8108dc6:	6093      	str	r3, [r2, #8]
=======
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	681b      	ldr	r3, [r3, #0]
 8107af0:	689b      	ldr	r3, [r3, #8]
 8107af2:	687a      	ldr	r2, [r7, #4]
 8107af4:	6812      	ldr	r2, [r2, #0]
 8107af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107afa:	f023 0301 	bic.w	r3, r3, #1
 8107afe:	6093      	str	r3, [r2, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108dc8:	687b      	ldr	r3, [r7, #4]
 8108dca:	2220      	movs	r2, #32
 8108dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	2220      	movs	r2, #32
 8107b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
<<<<<<< HEAD
 8108dd0:	687b      	ldr	r3, [r7, #4]
 8108dd2:	2200      	movs	r2, #0
 8108dd4:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	2200      	movs	r2, #0
 8107b0c:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8108dd6:	bf00      	nop
 8108dd8:	370c      	adds	r7, #12
 8108dda:	46bd      	mov	sp, r7
 8108ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108de0:	4770      	bx	lr
=======
 8107b0e:	bf00      	nop
 8107b10:	370c      	adds	r7, #12
 8107b12:	46bd      	mov	sp, r7
 8107b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b18:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108de2 <UART_DMAReceiveCplt>:
=======
08107b1a <UART_DMAReceiveCplt>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8108de2:	b580      	push	{r7, lr}
 8108de4:	b084      	sub	sp, #16
 8108de6:	af00      	add	r7, sp, #0
 8108de8:	6078      	str	r0, [r7, #4]
=======
 8107b1a:	b580      	push	{r7, lr}
 8107b1c:	b084      	sub	sp, #16
 8107b1e:	af00      	add	r7, sp, #0
 8107b20:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
<<<<<<< HEAD
 8108dea:	687b      	ldr	r3, [r7, #4]
 8108dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108dee:	60fb      	str	r3, [r7, #12]
=======
 8107b22:	687b      	ldr	r3, [r7, #4]
 8107b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b26:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
<<<<<<< HEAD
 8108df0:	687b      	ldr	r3, [r7, #4]
 8108df2:	69db      	ldr	r3, [r3, #28]
 8108df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108df8:	d01f      	beq.n	8108e3a <UART_DMAReceiveCplt+0x58>
=======
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	69db      	ldr	r3, [r3, #28]
 8107b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107b30:	d01f      	beq.n	8107b72 <UART_DMAReceiveCplt+0x58>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    huart->RxXferCount = 0U;
<<<<<<< HEAD
 8108dfa:	68fb      	ldr	r3, [r7, #12]
 8108dfc:	2200      	movs	r2, #0
 8108dfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
=======
 8107b32:	68fb      	ldr	r3, [r7, #12]
 8107b34:	2200      	movs	r2, #0
 8107b36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
<<<<<<< HEAD
 8108e02:	68fb      	ldr	r3, [r7, #12]
 8108e04:	681b      	ldr	r3, [r3, #0]
 8108e06:	681a      	ldr	r2, [r3, #0]
 8108e08:	68fb      	ldr	r3, [r7, #12]
 8108e0a:	681b      	ldr	r3, [r3, #0]
 8108e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8108e10:	601a      	str	r2, [r3, #0]
=======
 8107b3a:	68fb      	ldr	r3, [r7, #12]
 8107b3c:	681b      	ldr	r3, [r3, #0]
 8107b3e:	681a      	ldr	r2, [r3, #0]
 8107b40:	68fb      	ldr	r3, [r7, #12]
 8107b42:	681b      	ldr	r3, [r3, #0]
 8107b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8107b48:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8108e12:	68fb      	ldr	r3, [r7, #12]
 8108e14:	681b      	ldr	r3, [r3, #0]
 8108e16:	689a      	ldr	r2, [r3, #8]
 8108e18:	68fb      	ldr	r3, [r7, #12]
 8108e1a:	681b      	ldr	r3, [r3, #0]
 8108e1c:	f022 0201 	bic.w	r2, r2, #1
 8108e20:	609a      	str	r2, [r3, #8]
=======
 8107b4a:	68fb      	ldr	r3, [r7, #12]
 8107b4c:	681b      	ldr	r3, [r3, #0]
 8107b4e:	689a      	ldr	r2, [r3, #8]
 8107b50:	68fb      	ldr	r3, [r7, #12]
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	f022 0201 	bic.w	r2, r2, #1
 8107b58:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8108e22:	68fb      	ldr	r3, [r7, #12]
 8108e24:	681b      	ldr	r3, [r3, #0]
 8108e26:	689a      	ldr	r2, [r3, #8]
 8108e28:	68fb      	ldr	r3, [r7, #12]
 8108e2a:	681b      	ldr	r3, [r3, #0]
 8108e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8108e30:	609a      	str	r2, [r3, #8]
=======
 8107b5a:	68fb      	ldr	r3, [r7, #12]
 8107b5c:	681b      	ldr	r3, [r3, #0]
 8107b5e:	689a      	ldr	r2, [r3, #8]
 8107b60:	68fb      	ldr	r3, [r7, #12]
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107b68:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108e32:	68fb      	ldr	r3, [r7, #12]
 8108e34:	2220      	movs	r2, #32
 8108e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8107b6a:	68fb      	ldr	r3, [r7, #12]
 8107b6c:	2220      	movs	r2, #32
 8107b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8108e3a:	68f8      	ldr	r0, [r7, #12]
 8108e3c:	f7ff f8a2 	bl	8107f84 <HAL_UART_RxCpltCallback>
=======
 8107b72:	68f8      	ldr	r0, [r7, #12]
 8107b74:	f7ff f858 	bl	8106c28 <HAL_UART_RxCpltCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 8108e40:	bf00      	nop
 8108e42:	3710      	adds	r7, #16
 8108e44:	46bd      	mov	sp, r7
 8108e46:	bd80      	pop	{r7, pc}
=======
 8107b78:	bf00      	nop
 8107b7a:	3710      	adds	r7, #16
 8107b7c:	46bd      	mov	sp, r7
 8107b7e:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108e48 <UART_DMARxHalfCplt>:
=======
08107b80 <UART_DMARxHalfCplt>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8108e48:	b580      	push	{r7, lr}
 8108e4a:	b084      	sub	sp, #16
 8108e4c:	af00      	add	r7, sp, #0
 8108e4e:	6078      	str	r0, [r7, #4]
=======
 8107b80:	b580      	push	{r7, lr}
 8107b82:	b084      	sub	sp, #16
 8107b84:	af00      	add	r7, sp, #0
 8107b86:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
<<<<<<< HEAD
 8108e50:	687b      	ldr	r3, [r7, #4]
 8108e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108e54:	60fb      	str	r3, [r7, #12]
=======
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b8c:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
<<<<<<< HEAD
 8108e56:	68f8      	ldr	r0, [r7, #12]
 8108e58:	f7ff f89e 	bl	8107f98 <HAL_UART_RxHalfCpltCallback>
=======
 8107b8e:	68f8      	ldr	r0, [r7, #12]
 8107b90:	f7ff f854 	bl	8106c3c <HAL_UART_RxHalfCpltCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 8108e5c:	bf00      	nop
 8108e5e:	3710      	adds	r7, #16
 8108e60:	46bd      	mov	sp, r7
 8108e62:	bd80      	pop	{r7, pc}
=======
 8107b94:	bf00      	nop
 8107b96:	3710      	adds	r7, #16
 8107b98:	46bd      	mov	sp, r7
 8107b9a:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108e64 <UART_DMAError>:
=======
08107b9c <UART_DMAError>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8108e64:	b580      	push	{r7, lr}
 8108e66:	b086      	sub	sp, #24
 8108e68:	af00      	add	r7, sp, #0
 8108e6a:	6078      	str	r0, [r7, #4]
=======
 8107b9c:	b580      	push	{r7, lr}
 8107b9e:	b086      	sub	sp, #24
 8107ba0:	af00      	add	r7, sp, #0
 8107ba2:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
<<<<<<< HEAD
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108e70:	617b      	str	r3, [r7, #20]
=======
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ba8:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  const HAL_UART_StateTypeDef gstate = huart->gState;
<<<<<<< HEAD
 8108e72:	697b      	ldr	r3, [r7, #20]
 8108e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108e78:	613b      	str	r3, [r7, #16]
=======
 8107baa:	697b      	ldr	r3, [r7, #20]
 8107bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107bb0:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
<<<<<<< HEAD
 8108e7a:	697b      	ldr	r3, [r7, #20]
 8108e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108e80:	60fb      	str	r3, [r7, #12]
=======
 8107bb2:	697b      	ldr	r3, [r7, #20]
 8107bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107bb8:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
<<<<<<< HEAD
 8108e82:	697b      	ldr	r3, [r7, #20]
 8108e84:	681b      	ldr	r3, [r3, #0]
 8108e86:	689b      	ldr	r3, [r3, #8]
 8108e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108e8c:	2b80      	cmp	r3, #128	; 0x80
 8108e8e:	d109      	bne.n	8108ea4 <UART_DMAError+0x40>
 8108e90:	693b      	ldr	r3, [r7, #16]
 8108e92:	2b21      	cmp	r3, #33	; 0x21
 8108e94:	d106      	bne.n	8108ea4 <UART_DMAError+0x40>
=======
 8107bba:	697b      	ldr	r3, [r7, #20]
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	689b      	ldr	r3, [r3, #8]
 8107bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107bc4:	2b80      	cmp	r3, #128	; 0x80
 8107bc6:	d109      	bne.n	8107bdc <UART_DMAError+0x40>
 8107bc8:	693b      	ldr	r3, [r7, #16]
 8107bca:	2b21      	cmp	r3, #33	; 0x21
 8107bcc:	d106      	bne.n	8107bdc <UART_DMAError+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
<<<<<<< HEAD
 8108e96:	697b      	ldr	r3, [r7, #20]
 8108e98:	2200      	movs	r2, #0
 8108e9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
=======
 8107bce:	697b      	ldr	r3, [r7, #20]
 8107bd0:	2200      	movs	r2, #0
 8107bd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    UART_EndTxTransfer(huart);
<<<<<<< HEAD
 8108e9e:	6978      	ldr	r0, [r7, #20]
 8108ea0:	f7ff ff5e 	bl	8108d60 <UART_EndTxTransfer>
=======
 8107bd6:	6978      	ldr	r0, [r7, #20]
 8107bd8:	f7ff ff5e 	bl	8107a98 <UART_EndTxTransfer>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
<<<<<<< HEAD
 8108ea4:	697b      	ldr	r3, [r7, #20]
 8108ea6:	681b      	ldr	r3, [r3, #0]
 8108ea8:	689b      	ldr	r3, [r3, #8]
 8108eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108eae:	2b40      	cmp	r3, #64	; 0x40
 8108eb0:	d109      	bne.n	8108ec6 <UART_DMAError+0x62>
 8108eb2:	68fb      	ldr	r3, [r7, #12]
 8108eb4:	2b22      	cmp	r3, #34	; 0x22
 8108eb6:	d106      	bne.n	8108ec6 <UART_DMAError+0x62>
=======
 8107bdc:	697b      	ldr	r3, [r7, #20]
 8107bde:	681b      	ldr	r3, [r3, #0]
 8107be0:	689b      	ldr	r3, [r3, #8]
 8107be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107be6:	2b40      	cmp	r3, #64	; 0x40
 8107be8:	d109      	bne.n	8107bfe <UART_DMAError+0x62>
 8107bea:	68fb      	ldr	r3, [r7, #12]
 8107bec:	2b22      	cmp	r3, #34	; 0x22
 8107bee:	d106      	bne.n	8107bfe <UART_DMAError+0x62>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
<<<<<<< HEAD
 8108eb8:	697b      	ldr	r3, [r7, #20]
 8108eba:	2200      	movs	r2, #0
 8108ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
=======
 8107bf0:	697b      	ldr	r3, [r7, #20]
 8107bf2:	2200      	movs	r2, #0
 8107bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8108ec0:	6978      	ldr	r0, [r7, #20]
 8108ec2:	f7ff ff6b 	bl	8108d9c <UART_EndRxTransfer>
=======
 8107bf8:	6978      	ldr	r0, [r7, #20]
 8107bfa:	f7ff ff6b 	bl	8107ad4 <UART_EndRxTransfer>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
<<<<<<< HEAD
 8108ec6:	697b      	ldr	r3, [r7, #20]
 8108ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108ecc:	f043 0210 	orr.w	r2, r3, #16
 8108ed0:	697b      	ldr	r3, [r7, #20]
 8108ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
=======
 8107bfe:	697b      	ldr	r3, [r7, #20]
 8107c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107c04:	f043 0210 	orr.w	r2, r3, #16
 8107c08:	697b      	ldr	r3, [r7, #20]
 8107c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8108ed6:	6978      	ldr	r0, [r7, #20]
 8108ed8:	f7ff f868 	bl	8107fac <HAL_UART_ErrorCallback>
=======
 8107c0e:	6978      	ldr	r0, [r7, #20]
 8107c10:	f7ff f81e 	bl	8106c50 <HAL_UART_ErrorCallback>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 8108edc:	bf00      	nop
 8108ede:	3718      	adds	r7, #24
 8108ee0:	46bd      	mov	sp, r7
 8108ee2:	bd80      	pop	{r7, pc}
=======
 8107c14:	bf00      	nop
 8107c16:	3718      	adds	r7, #24
 8107c18:	46bd      	mov	sp, r7
 8107c1a:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108ee4 <HAL_UARTEx_DisableFifoMode>:
=======
08107c1c <HAL_UARTEx_DisableFifoMode>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8108ee4:	b480      	push	{r7}
 8108ee6:	b085      	sub	sp, #20
 8108ee8:	af00      	add	r7, sp, #0
 8108eea:	6078      	str	r0, [r7, #4]
=======
 8107c1c:	b480      	push	{r7}
 8107c1e:	b085      	sub	sp, #20
 8107c20:	af00      	add	r7, sp, #0
 8107c22:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8108eec:	687b      	ldr	r3, [r7, #4]
 8108eee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108ef2:	2b01      	cmp	r3, #1
 8108ef4:	d101      	bne.n	8108efa <HAL_UARTEx_DisableFifoMode+0x16>
 8108ef6:	2302      	movs	r3, #2
 8108ef8:	e027      	b.n	8108f4a <HAL_UARTEx_DisableFifoMode+0x66>
 8108efa:	687b      	ldr	r3, [r7, #4]
 8108efc:	2201      	movs	r2, #1
 8108efe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8107c24:	687b      	ldr	r3, [r7, #4]
 8107c26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107c2a:	2b01      	cmp	r3, #1
 8107c2c:	d101      	bne.n	8107c32 <HAL_UARTEx_DisableFifoMode+0x16>
 8107c2e:	2302      	movs	r3, #2
 8107c30:	e027      	b.n	8107c82 <HAL_UARTEx_DisableFifoMode+0x66>
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	2201      	movs	r2, #1
 8107c36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8108f02:	687b      	ldr	r3, [r7, #4]
 8108f04:	2224      	movs	r2, #36	; 0x24
 8108f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107c3a:	687b      	ldr	r3, [r7, #4]
 8107c3c:	2224      	movs	r2, #36	; 0x24
 8107c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
<<<<<<< HEAD
 8108f0a:	687b      	ldr	r3, [r7, #4]
 8108f0c:	681b      	ldr	r3, [r3, #0]
 8108f0e:	681b      	ldr	r3, [r3, #0]
 8108f10:	60fb      	str	r3, [r7, #12]
=======
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	681b      	ldr	r3, [r3, #0]
 8107c48:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
<<<<<<< HEAD
 8108f12:	687b      	ldr	r3, [r7, #4]
 8108f14:	681b      	ldr	r3, [r3, #0]
 8108f16:	681a      	ldr	r2, [r3, #0]
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	681b      	ldr	r3, [r3, #0]
 8108f1c:	f022 0201 	bic.w	r2, r2, #1
 8108f20:	601a      	str	r2, [r3, #0]
=======
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	681a      	ldr	r2, [r3, #0]
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	f022 0201 	bic.w	r2, r2, #1
 8107c58:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
<<<<<<< HEAD
 8108f22:	68fb      	ldr	r3, [r7, #12]
 8108f24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108f28:	60fb      	str	r3, [r7, #12]
=======
 8107c5a:	68fb      	ldr	r3, [r7, #12]
 8107c5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8107c60:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  huart->FifoMode = UART_FIFOMODE_DISABLE;
<<<<<<< HEAD
 8108f2a:	687b      	ldr	r3, [r7, #4]
 8108f2c:	2200      	movs	r2, #0
 8108f2e:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	2200      	movs	r2, #0
 8107c66:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
<<<<<<< HEAD
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	681b      	ldr	r3, [r3, #0]
 8108f34:	68fa      	ldr	r2, [r7, #12]
 8108f36:	601a      	str	r2, [r3, #0]
=======
 8107c68:	687b      	ldr	r3, [r7, #4]
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	68fa      	ldr	r2, [r7, #12]
 8107c6e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108f38:	687b      	ldr	r3, [r7, #4]
 8108f3a:	2220      	movs	r2, #32
 8108f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107c70:	687b      	ldr	r3, [r7, #4]
 8107c72:	2220      	movs	r2, #32
 8107c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8108f40:	687b      	ldr	r3, [r7, #4]
 8108f42:	2200      	movs	r2, #0
 8108f44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	2200      	movs	r2, #0
 8107c7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return HAL_OK;
<<<<<<< HEAD
 8108f48:	2300      	movs	r3, #0
=======
 8107c80:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8108f4a:	4618      	mov	r0, r3
 8108f4c:	3714      	adds	r7, #20
 8108f4e:	46bd      	mov	sp, r7
 8108f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f54:	4770      	bx	lr
=======
 8107c82:	4618      	mov	r0, r3
 8107c84:	3714      	adds	r7, #20
 8107c86:	46bd      	mov	sp, r7
 8107c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c8c:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108f56 <HAL_UARTEx_SetTxFifoThreshold>:
=======
08107c8e <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8108f56:	b580      	push	{r7, lr}
 8108f58:	b084      	sub	sp, #16
 8108f5a:	af00      	add	r7, sp, #0
 8108f5c:	6078      	str	r0, [r7, #4]
 8108f5e:	6039      	str	r1, [r7, #0]
=======
 8107c8e:	b580      	push	{r7, lr}
 8107c90:	b084      	sub	sp, #16
 8107c92:	af00      	add	r7, sp, #0
 8107c94:	6078      	str	r0, [r7, #4]
 8107c96:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8108f60:	687b      	ldr	r3, [r7, #4]
 8108f62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108f66:	2b01      	cmp	r3, #1
 8108f68:	d101      	bne.n	8108f6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108f6a:	2302      	movs	r3, #2
 8108f6c:	e02d      	b.n	8108fca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108f6e:	687b      	ldr	r3, [r7, #4]
 8108f70:	2201      	movs	r2, #1
 8108f72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107c9e:	2b01      	cmp	r3, #1
 8107ca0:	d101      	bne.n	8107ca6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107ca2:	2302      	movs	r3, #2
 8107ca4:	e02d      	b.n	8107d02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8107ca6:	687b      	ldr	r3, [r7, #4]
 8107ca8:	2201      	movs	r2, #1
 8107caa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	2224      	movs	r2, #36	; 0x24
 8108f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	2224      	movs	r2, #36	; 0x24
 8107cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
<<<<<<< HEAD
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	681b      	ldr	r3, [r3, #0]
 8108f82:	681b      	ldr	r3, [r3, #0]
 8108f84:	60fb      	str	r3, [r7, #12]
=======
 8107cb6:	687b      	ldr	r3, [r7, #4]
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	681b      	ldr	r3, [r3, #0]
 8107cbc:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
<<<<<<< HEAD
 8108f86:	687b      	ldr	r3, [r7, #4]
 8108f88:	681b      	ldr	r3, [r3, #0]
 8108f8a:	681a      	ldr	r2, [r3, #0]
 8108f8c:	687b      	ldr	r3, [r7, #4]
 8108f8e:	681b      	ldr	r3, [r3, #0]
 8108f90:	f022 0201 	bic.w	r2, r2, #1
 8108f94:	601a      	str	r2, [r3, #0]
=======
 8107cbe:	687b      	ldr	r3, [r7, #4]
 8107cc0:	681b      	ldr	r3, [r3, #0]
 8107cc2:	681a      	ldr	r2, [r3, #0]
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	681b      	ldr	r3, [r3, #0]
 8107cc8:	f022 0201 	bic.w	r2, r2, #1
 8107ccc:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
<<<<<<< HEAD
 8108f96:	687b      	ldr	r3, [r7, #4]
 8108f98:	681b      	ldr	r3, [r3, #0]
 8108f9a:	689b      	ldr	r3, [r3, #8]
 8108f9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	681b      	ldr	r3, [r3, #0]
 8108fa4:	683a      	ldr	r2, [r7, #0]
 8108fa6:	430a      	orrs	r2, r1
 8108fa8:	609a      	str	r2, [r3, #8]
=======
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	681b      	ldr	r3, [r3, #0]
 8107cd2:	689b      	ldr	r3, [r3, #8]
 8107cd4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	681b      	ldr	r3, [r3, #0]
 8107cdc:	683a      	ldr	r2, [r7, #0]
 8107cde:	430a      	orrs	r2, r1
 8107ce0:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
<<<<<<< HEAD
 8108faa:	6878      	ldr	r0, [r7, #4]
 8108fac:	f000 f850 	bl	8109050 <UARTEx_SetNbDataToProcess>
=======
 8107ce2:	6878      	ldr	r0, [r7, #4]
 8107ce4:	f000 f850 	bl	8107d88 <UARTEx_SetNbDataToProcess>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
<<<<<<< HEAD
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	681b      	ldr	r3, [r3, #0]
 8108fb4:	68fa      	ldr	r2, [r7, #12]
 8108fb6:	601a      	str	r2, [r3, #0]
=======
 8107ce8:	687b      	ldr	r3, [r7, #4]
 8107cea:	681b      	ldr	r3, [r3, #0]
 8107cec:	68fa      	ldr	r2, [r7, #12]
 8107cee:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8108fb8:	687b      	ldr	r3, [r7, #4]
 8108fba:	2220      	movs	r2, #32
 8108fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	2220      	movs	r2, #32
 8107cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	2200      	movs	r2, #0
 8108fc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8107cf8:	687b      	ldr	r3, [r7, #4]
 8107cfa:	2200      	movs	r2, #0
 8107cfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return HAL_OK;
<<<<<<< HEAD
 8108fc8:	2300      	movs	r3, #0
=======
 8107d00:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8108fca:	4618      	mov	r0, r3
 8108fcc:	3710      	adds	r7, #16
 8108fce:	46bd      	mov	sp, r7
 8108fd0:	bd80      	pop	{r7, pc}
=======
 8107d02:	4618      	mov	r0, r3
 8107d04:	3710      	adds	r7, #16
 8107d06:	46bd      	mov	sp, r7
 8107d08:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08108fd2 <HAL_UARTEx_SetRxFifoThreshold>:
=======
08107d0a <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8108fd2:	b580      	push	{r7, lr}
 8108fd4:	b084      	sub	sp, #16
 8108fd6:	af00      	add	r7, sp, #0
 8108fd8:	6078      	str	r0, [r7, #4]
 8108fda:	6039      	str	r1, [r7, #0]
=======
 8107d0a:	b580      	push	{r7, lr}
 8107d0c:	b084      	sub	sp, #16
 8107d0e:	af00      	add	r7, sp, #0
 8107d10:	6078      	str	r0, [r7, #4]
 8107d12:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8108fdc:	687b      	ldr	r3, [r7, #4]
 8108fde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108fe2:	2b01      	cmp	r3, #1
 8108fe4:	d101      	bne.n	8108fea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108fe6:	2302      	movs	r3, #2
 8108fe8:	e02d      	b.n	8109046 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	2201      	movs	r2, #1
 8108fee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107d1a:	2b01      	cmp	r3, #1
 8107d1c:	d101      	bne.n	8107d22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8107d1e:	2302      	movs	r3, #2
 8107d20:	e02d      	b.n	8107d7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8107d22:	687b      	ldr	r3, [r7, #4]
 8107d24:	2201      	movs	r2, #1
 8107d26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	2224      	movs	r2, #36	; 0x24
 8108ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	2224      	movs	r2, #36	; 0x24
 8107d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
<<<<<<< HEAD
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	681b      	ldr	r3, [r3, #0]
 8108ffe:	681b      	ldr	r3, [r3, #0]
 8109000:	60fb      	str	r3, [r7, #12]
=======
 8107d32:	687b      	ldr	r3, [r7, #4]
 8107d34:	681b      	ldr	r3, [r3, #0]
 8107d36:	681b      	ldr	r3, [r3, #0]
 8107d38:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
<<<<<<< HEAD
 8109002:	687b      	ldr	r3, [r7, #4]
 8109004:	681b      	ldr	r3, [r3, #0]
 8109006:	681a      	ldr	r2, [r3, #0]
 8109008:	687b      	ldr	r3, [r7, #4]
 810900a:	681b      	ldr	r3, [r3, #0]
 810900c:	f022 0201 	bic.w	r2, r2, #1
 8109010:	601a      	str	r2, [r3, #0]
=======
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	681a      	ldr	r2, [r3, #0]
 8107d40:	687b      	ldr	r3, [r7, #4]
 8107d42:	681b      	ldr	r3, [r3, #0]
 8107d44:	f022 0201 	bic.w	r2, r2, #1
 8107d48:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
<<<<<<< HEAD
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	681b      	ldr	r3, [r3, #0]
 8109016:	689b      	ldr	r3, [r3, #8]
 8109018:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810901c:	687b      	ldr	r3, [r7, #4]
 810901e:	681b      	ldr	r3, [r3, #0]
 8109020:	683a      	ldr	r2, [r7, #0]
 8109022:	430a      	orrs	r2, r1
 8109024:	609a      	str	r2, [r3, #8]
=======
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	689b      	ldr	r3, [r3, #8]
 8107d50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	681b      	ldr	r3, [r3, #0]
 8107d58:	683a      	ldr	r2, [r7, #0]
 8107d5a:	430a      	orrs	r2, r1
 8107d5c:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
<<<<<<< HEAD
 8109026:	6878      	ldr	r0, [r7, #4]
 8109028:	f000 f812 	bl	8109050 <UARTEx_SetNbDataToProcess>
=======
 8107d5e:	6878      	ldr	r0, [r7, #4]
 8107d60:	f000 f812 	bl	8107d88 <UARTEx_SetNbDataToProcess>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
<<<<<<< HEAD
 810902c:	687b      	ldr	r3, [r7, #4]
 810902e:	681b      	ldr	r3, [r3, #0]
 8109030:	68fa      	ldr	r2, [r7, #12]
 8109032:	601a      	str	r2, [r3, #0]
=======
 8107d64:	687b      	ldr	r3, [r7, #4]
 8107d66:	681b      	ldr	r3, [r3, #0]
 8107d68:	68fa      	ldr	r2, [r7, #12]
 8107d6a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8109034:	687b      	ldr	r3, [r7, #4]
 8109036:	2220      	movs	r2, #32
 8109038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	2220      	movs	r2, #32
 8107d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
<<<<<<< HEAD
 810903c:	687b      	ldr	r3, [r7, #4]
 810903e:	2200      	movs	r2, #0
 8109040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
=======
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	2200      	movs	r2, #0
 8107d78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  return HAL_OK;
<<<<<<< HEAD
 8109044:	2300      	movs	r3, #0
=======
 8107d7c:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8109046:	4618      	mov	r0, r3
 8109048:	3710      	adds	r7, #16
 810904a:	46bd      	mov	sp, r7
 810904c:	bd80      	pop	{r7, pc}
=======
 8107d7e:	4618      	mov	r0, r3
 8107d80:	3710      	adds	r7, #16
 8107d82:	46bd      	mov	sp, r7
 8107d84:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08109050 <UARTEx_SetNbDataToProcess>:
=======
08107d88 <UARTEx_SetNbDataToProcess>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8109050:	b480      	push	{r7}
 8109052:	b089      	sub	sp, #36	; 0x24
 8109054:	af00      	add	r7, sp, #0
 8109056:	6078      	str	r0, [r7, #4]
=======
 8107d88:	b480      	push	{r7}
 8107d8a:	b089      	sub	sp, #36	; 0x24
 8107d8c:	af00      	add	r7, sp, #0
 8107d8e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
<<<<<<< HEAD
 8109058:	4a2f      	ldr	r2, [pc, #188]	; (8109118 <UARTEx_SetNbDataToProcess+0xc8>)
 810905a:	f107 0314 	add.w	r3, r7, #20
 810905e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8109062:	e883 0003 	stmia.w	r3, {r0, r1}
=======
 8107d90:	4a2f      	ldr	r2, [pc, #188]	; (8107e50 <UARTEx_SetNbDataToProcess+0xc8>)
 8107d92:	f107 0314 	add.w	r3, r7, #20
 8107d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8107d9a:	e883 0003 	stmia.w	r3, {r0, r1}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
<<<<<<< HEAD
 8109066:	4a2d      	ldr	r2, [pc, #180]	; (810911c <UARTEx_SetNbDataToProcess+0xcc>)
 8109068:	f107 030c 	add.w	r3, r7, #12
 810906c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8109070:	e883 0003 	stmia.w	r3, {r0, r1}
=======
 8107d9e:	4a2d      	ldr	r2, [pc, #180]	; (8107e54 <UARTEx_SetNbDataToProcess+0xcc>)
 8107da0:	f107 030c 	add.w	r3, r7, #12
 8107da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8107da8:	e883 0003 	stmia.w	r3, {r0, r1}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< HEAD
 8109074:	687b      	ldr	r3, [r7, #4]
 8109076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109078:	2b00      	cmp	r3, #0
 810907a:	d108      	bne.n	810908e <UARTEx_SetNbDataToProcess+0x3e>
=======
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107db0:	2b00      	cmp	r3, #0
 8107db2:	d108      	bne.n	8107dc6 <UARTEx_SetNbDataToProcess+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    huart->NbTxDataToProcess = 1U;
<<<<<<< HEAD
 810907c:	687b      	ldr	r3, [r7, #4]
 810907e:	2201      	movs	r2, #1
 8109080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
=======
 8107db4:	687b      	ldr	r3, [r7, #4]
 8107db6:	2201      	movs	r2, #1
 8107db8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    huart->NbRxDataToProcess = 1U;
<<<<<<< HEAD
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	2201      	movs	r2, #1
 8109088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 8107dbc:	687b      	ldr	r3, [r7, #4]
 8107dbe:	2201      	movs	r2, #1
 8107dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< HEAD
 810908c:	e03d      	b.n	810910a <UARTEx_SetNbDataToProcess+0xba>
=======
 8107dc4:	e03d      	b.n	8107e42 <UARTEx_SetNbDataToProcess+0xba>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    rx_fifo_depth = RX_FIFO_DEPTH;
<<<<<<< HEAD
 810908e:	2310      	movs	r3, #16
 8109090:	77fb      	strb	r3, [r7, #31]
=======
 8107dc6:	2310      	movs	r3, #16
 8107dc8:	77fb      	strb	r3, [r7, #31]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    tx_fifo_depth = TX_FIFO_DEPTH;
<<<<<<< HEAD
 8109092:	2310      	movs	r3, #16
 8109094:	77bb      	strb	r3, [r7, #30]
=======
 8107dca:	2310      	movs	r3, #16
 8107dcc:	77bb      	strb	r3, [r7, #30]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
<<<<<<< HEAD
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	681b      	ldr	r3, [r3, #0]
 810909a:	689b      	ldr	r3, [r3, #8]
 810909c:	0e5b      	lsrs	r3, r3, #25
 810909e:	b2db      	uxtb	r3, r3
 81090a0:	f003 0307 	and.w	r3, r3, #7
 81090a4:	777b      	strb	r3, [r7, #29]
=======
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	681b      	ldr	r3, [r3, #0]
 8107dd2:	689b      	ldr	r3, [r3, #8]
 8107dd4:	0e5b      	lsrs	r3, r3, #25
 8107dd6:	b2db      	uxtb	r3, r3
 8107dd8:	f003 0307 	and.w	r3, r3, #7
 8107ddc:	777b      	strb	r3, [r7, #29]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
<<<<<<< HEAD
 81090a6:	687b      	ldr	r3, [r7, #4]
 81090a8:	681b      	ldr	r3, [r3, #0]
 81090aa:	689b      	ldr	r3, [r3, #8]
 81090ac:	0f5b      	lsrs	r3, r3, #29
 81090ae:	b2db      	uxtb	r3, r3
 81090b0:	f003 0307 	and.w	r3, r3, #7
 81090b4:	773b      	strb	r3, [r7, #28]
=======
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	681b      	ldr	r3, [r3, #0]
 8107de2:	689b      	ldr	r3, [r3, #8]
 8107de4:	0f5b      	lsrs	r3, r3, #29
 8107de6:	b2db      	uxtb	r3, r3
 8107de8:	f003 0307 	and.w	r3, r3, #7
 8107dec:	773b      	strb	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
<<<<<<< HEAD
 81090b6:	7fbb      	ldrb	r3, [r7, #30]
 81090b8:	7f3a      	ldrb	r2, [r7, #28]
 81090ba:	f107 0120 	add.w	r1, r7, #32
 81090be:	440a      	add	r2, r1
 81090c0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81090c4:	fb02 f303 	mul.w	r3, r2, r3
 81090c8:	7f3a      	ldrb	r2, [r7, #28]
 81090ca:	f107 0120 	add.w	r1, r7, #32
 81090ce:	440a      	add	r2, r1
 81090d0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81090d4:	fb93 f3f2 	sdiv	r3, r3, r2
 81090d8:	b29a      	uxth	r2, r3
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
=======
 8107dee:	7fbb      	ldrb	r3, [r7, #30]
 8107df0:	7f3a      	ldrb	r2, [r7, #28]
 8107df2:	f107 0120 	add.w	r1, r7, #32
 8107df6:	440a      	add	r2, r1
 8107df8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8107dfc:	fb02 f303 	mul.w	r3, r2, r3
 8107e00:	7f3a      	ldrb	r2, [r7, #28]
 8107e02:	f107 0120 	add.w	r1, r7, #32
 8107e06:	440a      	add	r2, r1
 8107e08:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8107e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8107e10:	b29a      	uxth	r2, r3
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
<<<<<<< HEAD
 81090e0:	7ffb      	ldrb	r3, [r7, #31]
 81090e2:	7f7a      	ldrb	r2, [r7, #29]
 81090e4:	f107 0120 	add.w	r1, r7, #32
 81090e8:	440a      	add	r2, r1
 81090ea:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81090ee:	fb02 f303 	mul.w	r3, r2, r3
 81090f2:	7f7a      	ldrb	r2, [r7, #29]
 81090f4:	f107 0120 	add.w	r1, r7, #32
 81090f8:	440a      	add	r2, r1
 81090fa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81090fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8109102:	b29a      	uxth	r2, r3
 8109104:	687b      	ldr	r3, [r7, #4]
 8109106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 8107e18:	7ffb      	ldrb	r3, [r7, #31]
 8107e1a:	7f7a      	ldrb	r2, [r7, #29]
 8107e1c:	f107 0120 	add.w	r1, r7, #32
 8107e20:	440a      	add	r2, r1
 8107e22:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8107e26:	fb02 f303 	mul.w	r3, r2, r3
 8107e2a:	7f7a      	ldrb	r2, [r7, #29]
 8107e2c:	f107 0120 	add.w	r1, r7, #32
 8107e30:	440a      	add	r2, r1
 8107e32:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8107e36:	fb93 f3f2 	sdiv	r3, r3, r2
 8107e3a:	b29a      	uxth	r2, r3
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810910a:	bf00      	nop
 810910c:	3724      	adds	r7, #36	; 0x24
 810910e:	46bd      	mov	sp, r7
 8109110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109114:	4770      	bx	lr
 8109116:	bf00      	nop
 8109118:	08114218 	.word	0x08114218
 810911c:	08114220 	.word	0x08114220
=======
 8107e42:	bf00      	nop
 8107e44:	3724      	adds	r7, #36	; 0x24
 8107e46:	46bd      	mov	sp, r7
 8107e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e4c:	4770      	bx	lr
 8107e4e:	bf00      	nop
 8107e50:	08110508 	.word	0x08110508
 8107e54:	08110510 	.word	0x08110510
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109120 <MX_FATFS_Init>:
=======
08107e58 <MX_FATFS_Init>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
<<<<<<< HEAD
 8109120:	b580      	push	{r7, lr}
 8109122:	af00      	add	r7, sp, #0
=======
 8107e58:	b580      	push	{r7, lr}
 8107e5a:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
<<<<<<< HEAD
 8109124:	4904      	ldr	r1, [pc, #16]	; (8109138 <MX_FATFS_Init+0x18>)
 8109126:	4805      	ldr	r0, [pc, #20]	; (810913c <MX_FATFS_Init+0x1c>)
 8109128:	f000 f8b0 	bl	810928c <FATFS_LinkDriver>
 810912c:	4603      	mov	r3, r0
 810912e:	461a      	mov	r2, r3
 8109130:	4b03      	ldr	r3, [pc, #12]	; (8109140 <MX_FATFS_Init+0x20>)
 8109132:	701a      	strb	r2, [r3, #0]
=======
 8107e5c:	4904      	ldr	r1, [pc, #16]	; (8107e70 <MX_FATFS_Init+0x18>)
 8107e5e:	4805      	ldr	r0, [pc, #20]	; (8107e74 <MX_FATFS_Init+0x1c>)
 8107e60:	f000 f8b0 	bl	8107fc4 <FATFS_LinkDriver>
 8107e64:	4603      	mov	r3, r0
 8107e66:	461a      	mov	r2, r3
 8107e68:	4b03      	ldr	r3, [pc, #12]	; (8107e78 <MX_FATFS_Init+0x20>)
 8107e6a:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
<<<<<<< HEAD
 8109134:	bf00      	nop
 8109136:	bd80      	pop	{r7, pc}
 8109138:	100461f8 	.word	0x100461f8
 810913c:	10000010 	.word	0x10000010
 8109140:	100461fc 	.word	0x100461fc
=======
 8107e6c:	bf00      	nop
 8107e6e:	bd80      	pop	{r7, pc}
 8107e70:	10009b58 	.word	0x10009b58
 8107e74:	10000010 	.word	0x10000010
 8107e78:	10009b5c 	.word	0x10009b5c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109144 <USER_initialize>:
=======
08107e7c <USER_initialize>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
<<<<<<< HEAD
 8109144:	b480      	push	{r7}
 8109146:	b083      	sub	sp, #12
 8109148:	af00      	add	r7, sp, #0
 810914a:	4603      	mov	r3, r0
 810914c:	71fb      	strb	r3, [r7, #7]
=======
 8107e7c:	b480      	push	{r7}
 8107e7e:	b083      	sub	sp, #12
 8107e80:	af00      	add	r7, sp, #0
 8107e82:	4603      	mov	r3, r0
 8107e84:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
<<<<<<< HEAD
 810914e:	4b06      	ldr	r3, [pc, #24]	; (8109168 <USER_initialize+0x24>)
 8109150:	2201      	movs	r2, #1
 8109152:	701a      	strb	r2, [r3, #0]
=======
 8107e86:	4b06      	ldr	r3, [pc, #24]	; (8107ea0 <USER_initialize+0x24>)
 8107e88:	2201      	movs	r2, #1
 8107e8a:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return Stat;
<<<<<<< HEAD
 8109154:	4b04      	ldr	r3, [pc, #16]	; (8109168 <USER_initialize+0x24>)
 8109156:	781b      	ldrb	r3, [r3, #0]
 8109158:	b2db      	uxtb	r3, r3
=======
 8107e8c:	4b04      	ldr	r3, [pc, #16]	; (8107ea0 <USER_initialize+0x24>)
 8107e8e:	781b      	ldrb	r3, [r3, #0]
 8107e90:	b2db      	uxtb	r3, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE END INIT */
}
<<<<<<< HEAD
 810915a:	4618      	mov	r0, r3
 810915c:	370c      	adds	r7, #12
 810915e:	46bd      	mov	sp, r7
 8109160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109164:	4770      	bx	lr
 8109166:	bf00      	nop
 8109168:	1000000d 	.word	0x1000000d
=======
 8107e92:	4618      	mov	r0, r3
 8107e94:	370c      	adds	r7, #12
 8107e96:	46bd      	mov	sp, r7
 8107e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e9c:	4770      	bx	lr
 8107e9e:	bf00      	nop
 8107ea0:	1000000d 	.word	0x1000000d
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810916c <USER_status>:
=======
08107ea4 <USER_status>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
<<<<<<< HEAD
 810916c:	b480      	push	{r7}
 810916e:	b083      	sub	sp, #12
 8109170:	af00      	add	r7, sp, #0
 8109172:	4603      	mov	r3, r0
 8109174:	71fb      	strb	r3, [r7, #7]
=======
 8107ea4:	b480      	push	{r7}
 8107ea6:	b083      	sub	sp, #12
 8107ea8:	af00      	add	r7, sp, #0
 8107eaa:	4603      	mov	r3, r0
 8107eac:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
<<<<<<< HEAD
 8109176:	4b06      	ldr	r3, [pc, #24]	; (8109190 <USER_status+0x24>)
 8109178:	2201      	movs	r2, #1
 810917a:	701a      	strb	r2, [r3, #0]
=======
 8107eae:	4b06      	ldr	r3, [pc, #24]	; (8107ec8 <USER_status+0x24>)
 8107eb0:	2201      	movs	r2, #1
 8107eb2:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return Stat;
<<<<<<< HEAD
 810917c:	4b04      	ldr	r3, [pc, #16]	; (8109190 <USER_status+0x24>)
 810917e:	781b      	ldrb	r3, [r3, #0]
 8109180:	b2db      	uxtb	r3, r3
=======
 8107eb4:	4b04      	ldr	r3, [pc, #16]	; (8107ec8 <USER_status+0x24>)
 8107eb6:	781b      	ldrb	r3, [r3, #0]
 8107eb8:	b2db      	uxtb	r3, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE END STATUS */
}
<<<<<<< HEAD
 8109182:	4618      	mov	r0, r3
 8109184:	370c      	adds	r7, #12
 8109186:	46bd      	mov	sp, r7
 8109188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810918c:	4770      	bx	lr
 810918e:	bf00      	nop
 8109190:	1000000d 	.word	0x1000000d
=======
 8107eba:	4618      	mov	r0, r3
 8107ebc:	370c      	adds	r7, #12
 8107ebe:	46bd      	mov	sp, r7
 8107ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ec4:	4770      	bx	lr
 8107ec6:	bf00      	nop
 8107ec8:	1000000d 	.word	0x1000000d
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109194 <USER_read>:
=======
08107ecc <USER_read>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
<<<<<<< HEAD
 8109194:	b480      	push	{r7}
 8109196:	b085      	sub	sp, #20
 8109198:	af00      	add	r7, sp, #0
 810919a:	60b9      	str	r1, [r7, #8]
 810919c:	607a      	str	r2, [r7, #4]
 810919e:	603b      	str	r3, [r7, #0]
 81091a0:	4603      	mov	r3, r0
 81091a2:	73fb      	strb	r3, [r7, #15]
=======
 8107ecc:	b480      	push	{r7}
 8107ece:	b085      	sub	sp, #20
 8107ed0:	af00      	add	r7, sp, #0
 8107ed2:	60b9      	str	r1, [r7, #8]
 8107ed4:	607a      	str	r2, [r7, #4]
 8107ed6:	603b      	str	r3, [r7, #0]
 8107ed8:	4603      	mov	r3, r0
 8107eda:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN READ */
    return RES_OK;
<<<<<<< HEAD
 81091a4:	2300      	movs	r3, #0
=======
 8107edc:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE END READ */
}
<<<<<<< HEAD
 81091a6:	4618      	mov	r0, r3
 81091a8:	3714      	adds	r7, #20
 81091aa:	46bd      	mov	sp, r7
 81091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091b0:	4770      	bx	lr
=======
 8107ede:	4618      	mov	r0, r3
 8107ee0:	3714      	adds	r7, #20
 8107ee2:	46bd      	mov	sp, r7
 8107ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ee8:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081091b2 <USER_write>:
=======
08107eea <USER_write>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
<<<<<<< HEAD
 81091b2:	b480      	push	{r7}
 81091b4:	b085      	sub	sp, #20
 81091b6:	af00      	add	r7, sp, #0
 81091b8:	60b9      	str	r1, [r7, #8]
 81091ba:	607a      	str	r2, [r7, #4]
 81091bc:	603b      	str	r3, [r7, #0]
 81091be:	4603      	mov	r3, r0
 81091c0:	73fb      	strb	r3, [r7, #15]
=======
 8107eea:	b480      	push	{r7}
 8107eec:	b085      	sub	sp, #20
 8107eee:	af00      	add	r7, sp, #0
 8107ef0:	60b9      	str	r1, [r7, #8]
 8107ef2:	607a      	str	r2, [r7, #4]
 8107ef4:	603b      	str	r3, [r7, #0]
 8107ef6:	4603      	mov	r3, r0
 8107ef8:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
<<<<<<< HEAD
 81091c2:	2300      	movs	r3, #0
=======
 8107efa:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE END WRITE */
}
<<<<<<< HEAD
 81091c4:	4618      	mov	r0, r3
 81091c6:	3714      	adds	r7, #20
 81091c8:	46bd      	mov	sp, r7
 81091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091ce:	4770      	bx	lr
=======
 8107efc:	4618      	mov	r0, r3
 8107efe:	3714      	adds	r7, #20
 8107f00:	46bd      	mov	sp, r7
 8107f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f06:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081091d0 <USER_ioctl>:
=======
08107f08 <USER_ioctl>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
<<<<<<< HEAD
 81091d0:	b480      	push	{r7}
 81091d2:	b085      	sub	sp, #20
 81091d4:	af00      	add	r7, sp, #0
 81091d6:	4603      	mov	r3, r0
 81091d8:	603a      	str	r2, [r7, #0]
 81091da:	71fb      	strb	r3, [r7, #7]
 81091dc:	460b      	mov	r3, r1
 81091de:	71bb      	strb	r3, [r7, #6]
=======
 8107f08:	b480      	push	{r7}
 8107f0a:	b085      	sub	sp, #20
 8107f0c:	af00      	add	r7, sp, #0
 8107f0e:	4603      	mov	r3, r0
 8107f10:	603a      	str	r2, [r7, #0]
 8107f12:	71fb      	strb	r3, [r7, #7]
 8107f14:	460b      	mov	r3, r1
 8107f16:	71bb      	strb	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
<<<<<<< HEAD
 81091e0:	2301      	movs	r3, #1
 81091e2:	73fb      	strb	r3, [r7, #15]
=======
 8107f18:	2301      	movs	r3, #1
 8107f1a:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return res;
<<<<<<< HEAD
 81091e4:	7bfb      	ldrb	r3, [r7, #15]
=======
 8107f1c:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  /* USER CODE END IOCTL */
}
<<<<<<< HEAD
 81091e6:	4618      	mov	r0, r3
 81091e8:	3714      	adds	r7, #20
 81091ea:	46bd      	mov	sp, r7
 81091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091f0:	4770      	bx	lr
=======
 8107f1e:	4618      	mov	r0, r3
 8107f20:	3714      	adds	r7, #20
 8107f22:	46bd      	mov	sp, r7
 8107f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f28:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
081091f4 <FATFS_LinkDriverEx>:
=======
08107f2c <FATFS_LinkDriverEx>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
<<<<<<< HEAD
 81091f4:	b480      	push	{r7}
 81091f6:	b087      	sub	sp, #28
 81091f8:	af00      	add	r7, sp, #0
 81091fa:	60f8      	str	r0, [r7, #12]
 81091fc:	60b9      	str	r1, [r7, #8]
 81091fe:	4613      	mov	r3, r2
 8109200:	71fb      	strb	r3, [r7, #7]
=======
 8107f2c:	b480      	push	{r7}
 8107f2e:	b087      	sub	sp, #28
 8107f30:	af00      	add	r7, sp, #0
 8107f32:	60f8      	str	r0, [r7, #12]
 8107f34:	60b9      	str	r1, [r7, #8]
 8107f36:	4613      	mov	r3, r2
 8107f38:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint8_t ret = 1;
<<<<<<< HEAD
 8109202:	2301      	movs	r3, #1
 8109204:	75fb      	strb	r3, [r7, #23]
=======
 8107f3a:	2301      	movs	r3, #1
 8107f3c:	75fb      	strb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  uint8_t DiskNum = 0;
<<<<<<< HEAD
 8109206:	2300      	movs	r3, #0
 8109208:	75bb      	strb	r3, [r7, #22]
=======
 8107f3e:	2300      	movs	r3, #0
 8107f40:	75bb      	strb	r3, [r7, #22]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  if(disk.nbr < _VOLUMES)
<<<<<<< HEAD
 810920a:	4b1f      	ldr	r3, [pc, #124]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 810920c:	7a5b      	ldrb	r3, [r3, #9]
 810920e:	b2db      	uxtb	r3, r3
 8109210:	2b00      	cmp	r3, #0
 8109212:	d131      	bne.n	8109278 <FATFS_LinkDriverEx+0x84>
=======
 8107f42:	4b1f      	ldr	r3, [pc, #124]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f44:	7a5b      	ldrb	r3, [r3, #9]
 8107f46:	b2db      	uxtb	r3, r3
 8107f48:	2b00      	cmp	r3, #0
 8107f4a:	d131      	bne.n	8107fb0 <FATFS_LinkDriverEx+0x84>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  {
    disk.is_initialized[disk.nbr] = 0;
<<<<<<< HEAD
 8109214:	4b1c      	ldr	r3, [pc, #112]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 8109216:	7a5b      	ldrb	r3, [r3, #9]
 8109218:	b2db      	uxtb	r3, r3
 810921a:	461a      	mov	r2, r3
 810921c:	4b1a      	ldr	r3, [pc, #104]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 810921e:	2100      	movs	r1, #0
 8109220:	5499      	strb	r1, [r3, r2]
=======
 8107f4c:	4b1c      	ldr	r3, [pc, #112]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f4e:	7a5b      	ldrb	r3, [r3, #9]
 8107f50:	b2db      	uxtb	r3, r3
 8107f52:	461a      	mov	r2, r3
 8107f54:	4b1a      	ldr	r3, [pc, #104]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f56:	2100      	movs	r1, #0
 8107f58:	5499      	strb	r1, [r3, r2]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    disk.drv[disk.nbr] = drv;
<<<<<<< HEAD
 8109222:	4b19      	ldr	r3, [pc, #100]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 8109224:	7a5b      	ldrb	r3, [r3, #9]
 8109226:	b2db      	uxtb	r3, r3
 8109228:	4a17      	ldr	r2, [pc, #92]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 810922a:	009b      	lsls	r3, r3, #2
 810922c:	4413      	add	r3, r2
 810922e:	68fa      	ldr	r2, [r7, #12]
 8109230:	605a      	str	r2, [r3, #4]
=======
 8107f5a:	4b19      	ldr	r3, [pc, #100]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f5c:	7a5b      	ldrb	r3, [r3, #9]
 8107f5e:	b2db      	uxtb	r3, r3
 8107f60:	4a17      	ldr	r2, [pc, #92]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f62:	009b      	lsls	r3, r3, #2
 8107f64:	4413      	add	r3, r2
 8107f66:	68fa      	ldr	r2, [r7, #12]
 8107f68:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    disk.lun[disk.nbr] = lun;
<<<<<<< HEAD
 8109232:	4b15      	ldr	r3, [pc, #84]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 8109234:	7a5b      	ldrb	r3, [r3, #9]
 8109236:	b2db      	uxtb	r3, r3
 8109238:	461a      	mov	r2, r3
 810923a:	4b13      	ldr	r3, [pc, #76]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 810923c:	4413      	add	r3, r2
 810923e:	79fa      	ldrb	r2, [r7, #7]
 8109240:	721a      	strb	r2, [r3, #8]
=======
 8107f6a:	4b15      	ldr	r3, [pc, #84]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f6c:	7a5b      	ldrb	r3, [r3, #9]
 8107f6e:	b2db      	uxtb	r3, r3
 8107f70:	461a      	mov	r2, r3
 8107f72:	4b13      	ldr	r3, [pc, #76]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f74:	4413      	add	r3, r2
 8107f76:	79fa      	ldrb	r2, [r7, #7]
 8107f78:	721a      	strb	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    DiskNum = disk.nbr++;
<<<<<<< HEAD
 8109242:	4b11      	ldr	r3, [pc, #68]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 8109244:	7a5b      	ldrb	r3, [r3, #9]
 8109246:	b2db      	uxtb	r3, r3
 8109248:	1c5a      	adds	r2, r3, #1
 810924a:	b2d1      	uxtb	r1, r2
 810924c:	4a0e      	ldr	r2, [pc, #56]	; (8109288 <FATFS_LinkDriverEx+0x94>)
 810924e:	7251      	strb	r1, [r2, #9]
 8109250:	75bb      	strb	r3, [r7, #22]
=======
 8107f7a:	4b11      	ldr	r3, [pc, #68]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f7c:	7a5b      	ldrb	r3, [r3, #9]
 8107f7e:	b2db      	uxtb	r3, r3
 8107f80:	1c5a      	adds	r2, r3, #1
 8107f82:	b2d1      	uxtb	r1, r2
 8107f84:	4a0e      	ldr	r2, [pc, #56]	; (8107fc0 <FATFS_LinkDriverEx+0x94>)
 8107f86:	7251      	strb	r1, [r2, #9]
 8107f88:	75bb      	strb	r3, [r7, #22]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    path[0] = DiskNum + '0';
<<<<<<< HEAD
 8109252:	7dbb      	ldrb	r3, [r7, #22]
 8109254:	3330      	adds	r3, #48	; 0x30
 8109256:	b2da      	uxtb	r2, r3
 8109258:	68bb      	ldr	r3, [r7, #8]
 810925a:	701a      	strb	r2, [r3, #0]
=======
 8107f8a:	7dbb      	ldrb	r3, [r7, #22]
 8107f8c:	3330      	adds	r3, #48	; 0x30
 8107f8e:	b2da      	uxtb	r2, r3
 8107f90:	68bb      	ldr	r3, [r7, #8]
 8107f92:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    path[1] = ':';
<<<<<<< HEAD
 810925c:	68bb      	ldr	r3, [r7, #8]
 810925e:	3301      	adds	r3, #1
 8109260:	223a      	movs	r2, #58	; 0x3a
 8109262:	701a      	strb	r2, [r3, #0]
=======
 8107f94:	68bb      	ldr	r3, [r7, #8]
 8107f96:	3301      	adds	r3, #1
 8107f98:	223a      	movs	r2, #58	; 0x3a
 8107f9a:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    path[2] = '/';
<<<<<<< HEAD
 8109264:	68bb      	ldr	r3, [r7, #8]
 8109266:	3302      	adds	r3, #2
 8109268:	222f      	movs	r2, #47	; 0x2f
 810926a:	701a      	strb	r2, [r3, #0]
=======
 8107f9c:	68bb      	ldr	r3, [r7, #8]
 8107f9e:	3302      	adds	r3, #2
 8107fa0:	222f      	movs	r2, #47	; 0x2f
 8107fa2:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    path[3] = 0;
<<<<<<< HEAD
 810926c:	68bb      	ldr	r3, [r7, #8]
 810926e:	3303      	adds	r3, #3
 8109270:	2200      	movs	r2, #0
 8109272:	701a      	strb	r2, [r3, #0]
=======
 8107fa4:	68bb      	ldr	r3, [r7, #8]
 8107fa6:	3303      	adds	r3, #3
 8107fa8:	2200      	movs	r2, #0
 8107faa:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    ret = 0;
<<<<<<< HEAD
 8109274:	2300      	movs	r3, #0
 8109276:	75fb      	strb	r3, [r7, #23]
=======
 8107fac:	2300      	movs	r3, #0
 8107fae:	75fb      	strb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }

  return ret;
<<<<<<< HEAD
 8109278:	7dfb      	ldrb	r3, [r7, #23]
=======
 8107fb0:	7dfb      	ldrb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810927a:	4618      	mov	r0, r3
 810927c:	371c      	adds	r7, #28
 810927e:	46bd      	mov	sp, r7
 8109280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109284:	4770      	bx	lr
 8109286:	bf00      	nop
 8109288:	10000488 	.word	0x10000488
=======
 8107fb2:	4618      	mov	r0, r3
 8107fb4:	371c      	adds	r7, #28
 8107fb6:	46bd      	mov	sp, r7
 8107fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fbc:	4770      	bx	lr
 8107fbe:	bf00      	nop
 8107fc0:	10000478 	.word	0x10000478
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810928c <FATFS_LinkDriver>:
=======
08107fc4 <FATFS_LinkDriver>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
<<<<<<< HEAD
 810928c:	b580      	push	{r7, lr}
 810928e:	b082      	sub	sp, #8
 8109290:	af00      	add	r7, sp, #0
 8109292:	6078      	str	r0, [r7, #4]
 8109294:	6039      	str	r1, [r7, #0]
=======
 8107fc4:	b580      	push	{r7, lr}
 8107fc6:	b082      	sub	sp, #8
 8107fc8:	af00      	add	r7, sp, #0
 8107fca:	6078      	str	r0, [r7, #4]
 8107fcc:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  return FATFS_LinkDriverEx(drv, path, 0);
<<<<<<< HEAD
 8109296:	2200      	movs	r2, #0
 8109298:	6839      	ldr	r1, [r7, #0]
 810929a:	6878      	ldr	r0, [r7, #4]
 810929c:	f7ff ffaa 	bl	81091f4 <FATFS_LinkDriverEx>
 81092a0:	4603      	mov	r3, r0
=======
 8107fce:	2200      	movs	r2, #0
 8107fd0:	6839      	ldr	r1, [r7, #0]
 8107fd2:	6878      	ldr	r0, [r7, #4]
 8107fd4:	f7ff ffaa 	bl	8107f2c <FATFS_LinkDriverEx>
 8107fd8:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81092a2:	4618      	mov	r0, r3
 81092a4:	3708      	adds	r7, #8
 81092a6:	46bd      	mov	sp, r7
 81092a8:	bd80      	pop	{r7, pc}
=======
 8107fda:	4618      	mov	r0, r3
 8107fdc:	3708      	adds	r7, #8
 8107fde:	46bd      	mov	sp, r7
 8107fe0:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081092aa <makeFreeRtosPriority>:
=======
08107fe2 <makeFreeRtosPriority>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
<<<<<<< HEAD
 81092aa:	b480      	push	{r7}
 81092ac:	b085      	sub	sp, #20
 81092ae:	af00      	add	r7, sp, #0
 81092b0:	4603      	mov	r3, r0
 81092b2:	80fb      	strh	r3, [r7, #6]
=======
 8107fe2:	b480      	push	{r7}
 8107fe4:	b085      	sub	sp, #20
 8107fe6:	af00      	add	r7, sp, #0
 8107fe8:	4603      	mov	r3, r0
 8107fea:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
<<<<<<< HEAD
 81092b4:	2300      	movs	r3, #0
 81092b6:	60fb      	str	r3, [r7, #12]
=======
 8107fec:	2300      	movs	r3, #0
 8107fee:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  
  if (priority != osPriorityError) {
<<<<<<< HEAD
 81092b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81092bc:	2b84      	cmp	r3, #132	; 0x84
 81092be:	d005      	beq.n	81092cc <makeFreeRtosPriority+0x22>
=======
 8107ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8107ff4:	2b84      	cmp	r3, #132	; 0x84
 8107ff6:	d005      	beq.n	8108004 <makeFreeRtosPriority+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    fpriority += (priority - osPriorityIdle);
<<<<<<< HEAD
 81092c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 81092c4:	68fb      	ldr	r3, [r7, #12]
 81092c6:	4413      	add	r3, r2
 81092c8:	3303      	adds	r3, #3
 81092ca:	60fb      	str	r3, [r7, #12]
=======
 8107ff8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8107ffc:	68fb      	ldr	r3, [r7, #12]
 8107ffe:	4413      	add	r3, r2
 8108000:	3303      	adds	r3, #3
 8108002:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  
  return fpriority;
<<<<<<< HEAD
 81092cc:	68fb      	ldr	r3, [r7, #12]
=======
 8108004:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81092ce:	4618      	mov	r0, r3
 81092d0:	3714      	adds	r7, #20
 81092d2:	46bd      	mov	sp, r7
 81092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092d8:	4770      	bx	lr
=======
 8108006:	4618      	mov	r0, r3
 8108008:	3714      	adds	r7, #20
 810800a:	46bd      	mov	sp, r7
 810800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108010:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081092da <osKernelStart>:
=======
08108012 <osKernelStart>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< HEAD
 81092da:	b580      	push	{r7, lr}
 81092dc:	af00      	add	r7, sp, #0
=======
 8108012:	b580      	push	{r7, lr}
 8108014:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  vTaskStartScheduler();
<<<<<<< HEAD
 81092de:	f001 fc09 	bl	810aaf4 <vTaskStartScheduler>
=======
 8108016:	f001 fb59 	bl	81096cc <vTaskStartScheduler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  
  return osOK;
<<<<<<< HEAD
 81092e2:	2300      	movs	r3, #0
=======
 810801a:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81092e4:	4618      	mov	r0, r3
 81092e6:	bd80      	pop	{r7, pc}
=======
 810801c:	4618      	mov	r0, r3
 810801e:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081092e8 <osThreadCreate>:
=======
08108020 <osThreadCreate>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
<<<<<<< HEAD
 81092e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 81092ea:	b089      	sub	sp, #36	; 0x24
 81092ec:	af04      	add	r7, sp, #16
 81092ee:	6078      	str	r0, [r7, #4]
 81092f0:	6039      	str	r1, [r7, #0]
=======
 8108020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108022:	b089      	sub	sp, #36	; 0x24
 8108024:	af04      	add	r7, sp, #16
 8108026:	6078      	str	r0, [r7, #4]
 8108028:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
<<<<<<< HEAD
 81092f2:	687b      	ldr	r3, [r7, #4]
 81092f4:	695b      	ldr	r3, [r3, #20]
 81092f6:	2b00      	cmp	r3, #0
 81092f8:	d020      	beq.n	810933c <osThreadCreate+0x54>
 81092fa:	687b      	ldr	r3, [r7, #4]
 81092fc:	699b      	ldr	r3, [r3, #24]
 81092fe:	2b00      	cmp	r3, #0
 8109300:	d01c      	beq.n	810933c <osThreadCreate+0x54>
=======
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	695b      	ldr	r3, [r3, #20]
 810802e:	2b00      	cmp	r3, #0
 8108030:	d020      	beq.n	8108074 <osThreadCreate+0x54>
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	699b      	ldr	r3, [r3, #24]
 8108036:	2b00      	cmp	r3, #0
 8108038:	d01c      	beq.n	8108074 <osThreadCreate+0x54>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
<<<<<<< HEAD
 8109302:	687b      	ldr	r3, [r7, #4]
 8109304:	685c      	ldr	r4, [r3, #4]
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	681d      	ldr	r5, [r3, #0]
 810930a:	687b      	ldr	r3, [r7, #4]
 810930c:	691e      	ldr	r6, [r3, #16]
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8109314:	4618      	mov	r0, r3
 8109316:	f7ff ffc8 	bl	81092aa <makeFreeRtosPriority>
 810931a:	4601      	mov	r1, r0
=======
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	685c      	ldr	r4, [r3, #4]
 810803e:	687b      	ldr	r3, [r7, #4]
 8108040:	681d      	ldr	r5, [r3, #0]
 8108042:	687b      	ldr	r3, [r7, #4]
 8108044:	691e      	ldr	r6, [r3, #16]
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810804c:	4618      	mov	r0, r3
 810804e:	f7ff ffc8 	bl	8107fe2 <makeFreeRtosPriority>
 8108052:	4601      	mov	r1, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
<<<<<<< HEAD
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	695b      	ldr	r3, [r3, #20]
 8109320:	687a      	ldr	r2, [r7, #4]
 8109322:	6992      	ldr	r2, [r2, #24]
=======
 8108054:	687b      	ldr	r3, [r7, #4]
 8108056:	695b      	ldr	r3, [r3, #20]
 8108058:	687a      	ldr	r2, [r7, #4]
 810805a:	6992      	ldr	r2, [r2, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
<<<<<<< HEAD
 8109324:	9202      	str	r2, [sp, #8]
 8109326:	9301      	str	r3, [sp, #4]
 8109328:	9100      	str	r1, [sp, #0]
 810932a:	683b      	ldr	r3, [r7, #0]
 810932c:	4632      	mov	r2, r6
 810932e:	4629      	mov	r1, r5
 8109330:	4620      	mov	r0, r4
 8109332:	f001 f987 	bl	810a644 <xTaskCreateStatic>
 8109336:	4603      	mov	r3, r0
 8109338:	60fb      	str	r3, [r7, #12]
 810933a:	e01c      	b.n	8109376 <osThreadCreate+0x8e>
=======
 810805c:	9202      	str	r2, [sp, #8]
 810805e:	9301      	str	r3, [sp, #4]
 8108060:	9100      	str	r1, [sp, #0]
 8108062:	683b      	ldr	r3, [r7, #0]
 8108064:	4632      	mov	r2, r6
 8108066:	4629      	mov	r1, r5
 8108068:	4620      	mov	r0, r4
 810806a:	f001 f96b 	bl	8109344 <xTaskCreateStatic>
 810806e:	4603      	mov	r3, r0
 8108070:	60fb      	str	r3, [r7, #12]
 8108072:	e01c      	b.n	81080ae <osThreadCreate+0x8e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
<<<<<<< HEAD
 810933c:	687b      	ldr	r3, [r7, #4]
 810933e:	685c      	ldr	r4, [r3, #4]
 8109340:	687b      	ldr	r3, [r7, #4]
 8109342:	681d      	ldr	r5, [r3, #0]
=======
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	685c      	ldr	r4, [r3, #4]
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	681d      	ldr	r5, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
<<<<<<< HEAD
 8109344:	687b      	ldr	r3, [r7, #4]
 8109346:	691b      	ldr	r3, [r3, #16]
=======
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	691b      	ldr	r3, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
<<<<<<< HEAD
 8109348:	b29e      	uxth	r6, r3
 810934a:	687b      	ldr	r3, [r7, #4]
 810934c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8109350:	4618      	mov	r0, r3
 8109352:	f7ff ffaa 	bl	81092aa <makeFreeRtosPriority>
 8109356:	4602      	mov	r2, r0
 8109358:	f107 030c 	add.w	r3, r7, #12
 810935c:	9301      	str	r3, [sp, #4]
 810935e:	9200      	str	r2, [sp, #0]
 8109360:	683b      	ldr	r3, [r7, #0]
 8109362:	4632      	mov	r2, r6
 8109364:	4629      	mov	r1, r5
 8109366:	4620      	mov	r0, r4
 8109368:	f001 f9c9 	bl	810a6fe <xTaskCreate>
 810936c:	4603      	mov	r3, r0
 810936e:	2b01      	cmp	r3, #1
 8109370:	d001      	beq.n	8109376 <osThreadCreate+0x8e>
=======
 8108080:	b29e      	uxth	r6, r3
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8108088:	4618      	mov	r0, r3
 810808a:	f7ff ffaa 	bl	8107fe2 <makeFreeRtosPriority>
 810808e:	4602      	mov	r2, r0
 8108090:	f107 030c 	add.w	r3, r7, #12
 8108094:	9301      	str	r3, [sp, #4]
 8108096:	9200      	str	r2, [sp, #0]
 8108098:	683b      	ldr	r3, [r7, #0]
 810809a:	4632      	mov	r2, r6
 810809c:	4629      	mov	r1, r5
 810809e:	4620      	mov	r0, r4
 81080a0:	f001 f9aa 	bl	81093f8 <xTaskCreate>
 81080a4:	4603      	mov	r3, r0
 81080a6:	2b01      	cmp	r3, #1
 81080a8:	d001      	beq.n	81080ae <osThreadCreate+0x8e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
              &handle) != pdPASS)  {
      return NULL;
<<<<<<< HEAD
 8109372:	2300      	movs	r3, #0
 8109374:	e000      	b.n	8109378 <osThreadCreate+0x90>
=======
 81080aa:	2300      	movs	r3, #0
 81080ac:	e000      	b.n	81080b0 <osThreadCreate+0x90>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
<<<<<<< HEAD
 8109376:	68fb      	ldr	r3, [r7, #12]
=======
 81080ae:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8109378:	4618      	mov	r0, r3
 810937a:	3714      	adds	r7, #20
 810937c:	46bd      	mov	sp, r7
 810937e:	bdf0      	pop	{r4, r5, r6, r7, pc}
=======
 81080b0:	4618      	mov	r0, r3
 81080b2:	3714      	adds	r7, #20
 81080b4:	46bd      	mov	sp, r7
 81080b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109380 <osDelay>:
=======
081080b8 <osDelay>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
<<<<<<< HEAD
 8109380:	b580      	push	{r7, lr}
 8109382:	b084      	sub	sp, #16
 8109384:	af00      	add	r7, sp, #0
 8109386:	6078      	str	r0, [r7, #4]
=======
 81080b8:	b580      	push	{r7, lr}
 81080ba:	b084      	sub	sp, #16
 81080bc:	af00      	add	r7, sp, #0
 81080be:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
<<<<<<< HEAD
 8109388:	687b      	ldr	r3, [r7, #4]
 810938a:	60fb      	str	r3, [r7, #12]
=======
 81080c0:	687b      	ldr	r3, [r7, #4]
 81080c2:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
<<<<<<< HEAD
 810938c:	68fb      	ldr	r3, [r7, #12]
 810938e:	2b00      	cmp	r3, #0
 8109390:	d001      	beq.n	8109396 <osDelay+0x16>
 8109392:	68fb      	ldr	r3, [r7, #12]
 8109394:	e000      	b.n	8109398 <osDelay+0x18>
 8109396:	2301      	movs	r3, #1
 8109398:	4618      	mov	r0, r3
 810939a:	f001 fb77 	bl	810aa8c <vTaskDelay>
=======
 81080c4:	68fb      	ldr	r3, [r7, #12]
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d001      	beq.n	81080ce <osDelay+0x16>
 81080ca:	68fb      	ldr	r3, [r7, #12]
 81080cc:	e000      	b.n	81080d0 <osDelay+0x18>
 81080ce:	2301      	movs	r3, #1
 81080d0:	4618      	mov	r0, r3
 81080d2:	f001 fac7 	bl	8109664 <vTaskDelay>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  
  return osOK;
<<<<<<< HEAD
 810939e:	2300      	movs	r3, #0
=======
 81080d6:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
<<<<<<< HEAD
 81093a0:	4618      	mov	r0, r3
 81093a2:	3710      	adds	r7, #16
 81093a4:	46bd      	mov	sp, r7
 81093a6:	bd80      	pop	{r7, pc}
=======
 81080d8:	4618      	mov	r0, r3
 81080da:	3710      	adds	r7, #16
 81080dc:	46bd      	mov	sp, r7
 81080de:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081093a8 <osSemaphoreCreate>:
=======
081080e0 <osSemaphoreCreate>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
<<<<<<< HEAD
 81093a8:	b580      	push	{r7, lr}
 81093aa:	b086      	sub	sp, #24
 81093ac:	af02      	add	r7, sp, #8
 81093ae:	6078      	str	r0, [r7, #4]
 81093b0:	6039      	str	r1, [r7, #0]
=======
 81080e0:	b580      	push	{r7, lr}
 81080e2:	b086      	sub	sp, #24
 81080e4:	af02      	add	r7, sp, #8
 81080e6:	6078      	str	r0, [r7, #4]
 81080e8:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
<<<<<<< HEAD
 81093b2:	687b      	ldr	r3, [r7, #4]
 81093b4:	685b      	ldr	r3, [r3, #4]
 81093b6:	2b00      	cmp	r3, #0
 81093b8:	d00f      	beq.n	81093da <osSemaphoreCreate+0x32>
=======
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	685b      	ldr	r3, [r3, #4]
 81080ee:	2b00      	cmp	r3, #0
 81080f0:	d010      	beq.n	8108114 <osSemaphoreCreate+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    if (count == 1) {
<<<<<<< HEAD
 81093ba:	683b      	ldr	r3, [r7, #0]
 81093bc:	2b01      	cmp	r3, #1
 81093be:	d10a      	bne.n	81093d6 <osSemaphoreCreate+0x2e>
=======
 81080f2:	683b      	ldr	r3, [r7, #0]
 81080f4:	2b01      	cmp	r3, #1
 81080f6:	d10b      	bne.n	8108110 <osSemaphoreCreate+0x30>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
<<<<<<< HEAD
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	685b      	ldr	r3, [r3, #4]
 81093c4:	2203      	movs	r2, #3
 81093c6:	9200      	str	r2, [sp, #0]
 81093c8:	2200      	movs	r2, #0
 81093ca:	2100      	movs	r1, #0
 81093cc:	2001      	movs	r0, #1
 81093ce:	f000 fd23 	bl	8109e18 <xQueueGenericCreateStatic>
 81093d2:	4603      	mov	r3, r0
 81093d4:	e016      	b.n	8109404 <osSemaphoreCreate+0x5c>
=======
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	685a      	ldr	r2, [r3, #4]
 81080fc:	2303      	movs	r3, #3
 81080fe:	9300      	str	r3, [sp, #0]
 8108100:	4613      	mov	r3, r2
 8108102:	2200      	movs	r2, #0
 8108104:	2100      	movs	r1, #0
 8108106:	2001      	movs	r0, #1
 8108108:	f000 fd14 	bl	8108b34 <xQueueGenericCreateStatic>
 810810c:	4603      	mov	r3, r0
 810810e:	e016      	b.n	810813e <osSemaphoreCreate+0x5e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
<<<<<<< HEAD
 81093d6:	2300      	movs	r3, #0
 81093d8:	e014      	b.n	8109404 <osSemaphoreCreate+0x5c>
=======
 8108110:	2300      	movs	r3, #0
 8108112:	e014      	b.n	810813e <osSemaphoreCreate+0x5e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif
    }
  }
  else {
    if (count == 1) {
<<<<<<< HEAD
 81093da:	683b      	ldr	r3, [r7, #0]
 81093dc:	2b01      	cmp	r3, #1
 81093de:	d110      	bne.n	8109402 <osSemaphoreCreate+0x5a>
=======
 8108114:	683b      	ldr	r3, [r7, #0]
 8108116:	2b01      	cmp	r3, #1
 8108118:	d110      	bne.n	810813c <osSemaphoreCreate+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      vSemaphoreCreateBinary(sema);
<<<<<<< HEAD
 81093e0:	2203      	movs	r2, #3
 81093e2:	2100      	movs	r1, #0
 81093e4:	2001      	movs	r0, #1
 81093e6:	f000 fd8f 	bl	8109f08 <xQueueGenericCreate>
 81093ea:	60f8      	str	r0, [r7, #12]
 81093ec:	68fb      	ldr	r3, [r7, #12]
 81093ee:	2b00      	cmp	r3, #0
 81093f0:	d005      	beq.n	81093fe <osSemaphoreCreate+0x56>
 81093f2:	2300      	movs	r3, #0
 81093f4:	2200      	movs	r2, #0
 81093f6:	2100      	movs	r1, #0
 81093f8:	68f8      	ldr	r0, [r7, #12]
 81093fa:	f000 fe17 	bl	810a02c <xQueueGenericSend>
=======
 810811a:	2203      	movs	r2, #3
 810811c:	2100      	movs	r1, #0
 810811e:	2001      	movs	r0, #1
 8108120:	f000 fd7b 	bl	8108c1a <xQueueGenericCreate>
 8108124:	60f8      	str	r0, [r7, #12]
 8108126:	68fb      	ldr	r3, [r7, #12]
 8108128:	2b00      	cmp	r3, #0
 810812a:	d005      	beq.n	8108138 <osSemaphoreCreate+0x58>
 810812c:	2300      	movs	r3, #0
 810812e:	2200      	movs	r2, #0
 8108130:	2100      	movs	r1, #0
 8108132:	68f8      	ldr	r0, [r7, #12]
 8108134:	f000 fe02 	bl	8108d3c <xQueueGenericSend>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return sema;
<<<<<<< HEAD
 81093fe:	68fb      	ldr	r3, [r7, #12]
 8109400:	e000      	b.n	8109404 <osSemaphoreCreate+0x5c>
=======
 8108138:	68fb      	ldr	r3, [r7, #12]
 810813a:	e000      	b.n	810813e <osSemaphoreCreate+0x5e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
<<<<<<< HEAD
 8109402:	2300      	movs	r3, #0
=======
 810813c:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#else
    return NULL;
#endif
  }
#endif
}
<<<<<<< HEAD
 8109404:	4618      	mov	r0, r3
 8109406:	3710      	adds	r7, #16
 8109408:	46bd      	mov	sp, r7
 810940a:	bd80      	pop	{r7, pc}
=======
 810813e:	4618      	mov	r0, r3
 8108140:	3710      	adds	r7, #16
 8108142:	46bd      	mov	sp, r7
 8108144:	bd80      	pop	{r7, pc}
	...
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810940c <pvPortMalloc>:
=======
08108148 <pvPortMalloc>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 810940c:	b580      	push	{r7, lr}
 810940e:	b08a      	sub	sp, #40	; 0x28
 8109410:	af00      	add	r7, sp, #0
 8109412:	6078      	str	r0, [r7, #4]
=======
 8108148:	b580      	push	{r7, lr}
 810814a:	b08a      	sub	sp, #40	; 0x28
 810814c:	af00      	add	r7, sp, #0
 810814e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
<<<<<<< HEAD
 8109414:	2300      	movs	r3, #0
 8109416:	61fb      	str	r3, [r7, #28]
=======
 8108150:	2300      	movs	r3, #0
 8108152:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	vTaskSuspendAll();
<<<<<<< HEAD
 8109418:	f001 fbcc 	bl	810abb4 <vTaskSuspendAll>
=======
 8108154:	f001 fb18 	bl	8109788 <vTaskSuspendAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 810941c:	4b58      	ldr	r3, [pc, #352]	; (8109580 <pvPortMalloc+0x174>)
 810941e:	681b      	ldr	r3, [r3, #0]
 8109420:	2b00      	cmp	r3, #0
 8109422:	d101      	bne.n	8109428 <pvPortMalloc+0x1c>
=======
 8108158:	4b57      	ldr	r3, [pc, #348]	; (81082b8 <pvPortMalloc+0x170>)
 810815a:	681b      	ldr	r3, [r3, #0]
 810815c:	2b00      	cmp	r3, #0
 810815e:	d101      	bne.n	8108164 <pvPortMalloc+0x1c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			prvHeapInit();
<<<<<<< HEAD
 8109424:	f000 f910 	bl	8109648 <prvHeapInit>
=======
 8108160:	f000 f90c 	bl	810837c <prvHeapInit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 8109428:	4b56      	ldr	r3, [pc, #344]	; (8109584 <pvPortMalloc+0x178>)
 810942a:	681a      	ldr	r2, [r3, #0]
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	4013      	ands	r3, r2
 8109430:	2b00      	cmp	r3, #0
 8109432:	f040 808e 	bne.w	8109552 <pvPortMalloc+0x146>
=======
 8108164:	4b55      	ldr	r3, [pc, #340]	; (81082bc <pvPortMalloc+0x174>)
 8108166:	681a      	ldr	r2, [r3, #0]
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	4013      	ands	r3, r2
 810816c:	2b00      	cmp	r3, #0
 810816e:	f040 808c 	bne.w	810828a <pvPortMalloc+0x142>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 8109436:	687b      	ldr	r3, [r7, #4]
 8109438:	2b00      	cmp	r3, #0
 810943a:	d01d      	beq.n	8109478 <pvPortMalloc+0x6c>
=======
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	2b00      	cmp	r3, #0
 8108176:	d01c      	beq.n	81081b2 <pvPortMalloc+0x6a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				xWantedSize += xHeapStructSize;
<<<<<<< HEAD
 810943c:	2208      	movs	r2, #8
 810943e:	687b      	ldr	r3, [r7, #4]
 8109440:	4413      	add	r3, r2
 8109442:	607b      	str	r3, [r7, #4]
=======
 8108178:	2208      	movs	r2, #8
 810817a:	687b      	ldr	r3, [r7, #4]
 810817c:	4413      	add	r3, r2
 810817e:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	f003 0307 	and.w	r3, r3, #7
 810944a:	2b00      	cmp	r3, #0
 810944c:	d014      	beq.n	8109478 <pvPortMalloc+0x6c>
=======
 8108180:	687b      	ldr	r3, [r7, #4]
 8108182:	f003 0307 	and.w	r3, r3, #7
 8108186:	2b00      	cmp	r3, #0
 8108188:	d013      	beq.n	81081b2 <pvPortMalloc+0x6a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
<<<<<<< HEAD
 810944e:	687b      	ldr	r3, [r7, #4]
 8109450:	f023 0307 	bic.w	r3, r3, #7
 8109454:	3308      	adds	r3, #8
 8109456:	607b      	str	r3, [r7, #4]
=======
 810818a:	687b      	ldr	r3, [r7, #4]
 810818c:	f023 0307 	bic.w	r3, r3, #7
 8108190:	3308      	adds	r3, #8
 8108192:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	f003 0307 	and.w	r3, r3, #7
 810945e:	2b00      	cmp	r3, #0
 8109460:	d00a      	beq.n	8109478 <pvPortMalloc+0x6c>
=======
 8108194:	687b      	ldr	r3, [r7, #4]
 8108196:	f003 0307 	and.w	r3, r3, #7
 810819a:	2b00      	cmp	r3, #0
 810819c:	d009      	beq.n	81081b2 <pvPortMalloc+0x6a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8109462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109466:	f383 8811 	msr	BASEPRI, r3
 810946a:	f3bf 8f6f 	isb	sy
 810946e:	f3bf 8f4f 	dsb	sy
 8109472:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8109474:	bf00      	nop
 8109476:	e7fe      	b.n	8109476 <pvPortMalloc+0x6a>
=======
 810819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81081a2:	f383 8811 	msr	BASEPRI, r3
 81081a6:	f3bf 8f6f 	isb	sy
 81081aa:	f3bf 8f4f 	dsb	sy
 81081ae:	617b      	str	r3, [r7, #20]
 81081b0:	e7fe      	b.n	81081b0 <pvPortMalloc+0x68>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 8109478:	687b      	ldr	r3, [r7, #4]
 810947a:	2b00      	cmp	r3, #0
 810947c:	d069      	beq.n	8109552 <pvPortMalloc+0x146>
 810947e:	4b42      	ldr	r3, [pc, #264]	; (8109588 <pvPortMalloc+0x17c>)
 8109480:	681b      	ldr	r3, [r3, #0]
 8109482:	687a      	ldr	r2, [r7, #4]
 8109484:	429a      	cmp	r2, r3
 8109486:	d864      	bhi.n	8109552 <pvPortMalloc+0x146>
=======
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	2b00      	cmp	r3, #0
 81081b6:	d068      	beq.n	810828a <pvPortMalloc+0x142>
 81081b8:	4b41      	ldr	r3, [pc, #260]	; (81082c0 <pvPortMalloc+0x178>)
 81081ba:	681b      	ldr	r3, [r3, #0]
 81081bc:	687a      	ldr	r2, [r7, #4]
 81081be:	429a      	cmp	r2, r3
 81081c0:	d863      	bhi.n	810828a <pvPortMalloc+0x142>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 8109488:	4b40      	ldr	r3, [pc, #256]	; (810958c <pvPortMalloc+0x180>)
 810948a:	623b      	str	r3, [r7, #32]
=======
 81081c2:	4b40      	ldr	r3, [pc, #256]	; (81082c4 <pvPortMalloc+0x17c>)
 81081c4:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				pxBlock = xStart.pxNextFreeBlock;
<<<<<<< HEAD
 810948c:	4b3f      	ldr	r3, [pc, #252]	; (810958c <pvPortMalloc+0x180>)
 810948e:	681b      	ldr	r3, [r3, #0]
 8109490:	627b      	str	r3, [r7, #36]	; 0x24
=======
 81081c6:	4b3f      	ldr	r3, [pc, #252]	; (81082c4 <pvPortMalloc+0x17c>)
 81081c8:	681b      	ldr	r3, [r3, #0]
 81081ca:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
<<<<<<< HEAD
 8109492:	e004      	b.n	810949e <pvPortMalloc+0x92>
=======
 81081cc:	e004      	b.n	81081d8 <pvPortMalloc+0x90>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					pxPreviousBlock = pxBlock;
<<<<<<< HEAD
 8109494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109496:	623b      	str	r3, [r7, #32]
=======
 81081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081d0:	623b      	str	r3, [r7, #32]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					pxBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 8109498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810949a:	681b      	ldr	r3, [r3, #0]
 810949c:	627b      	str	r3, [r7, #36]	; 0x24
=======
 81081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
<<<<<<< HEAD
 810949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094a0:	685b      	ldr	r3, [r3, #4]
 81094a2:	687a      	ldr	r2, [r7, #4]
 81094a4:	429a      	cmp	r2, r3
 81094a6:	d903      	bls.n	81094b0 <pvPortMalloc+0xa4>
 81094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094aa:	681b      	ldr	r3, [r3, #0]
 81094ac:	2b00      	cmp	r3, #0
 81094ae:	d1f1      	bne.n	8109494 <pvPortMalloc+0x88>
=======
 81081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081da:	685b      	ldr	r3, [r3, #4]
 81081dc:	687a      	ldr	r2, [r7, #4]
 81081de:	429a      	cmp	r2, r3
 81081e0:	d903      	bls.n	81081ea <pvPortMalloc+0xa2>
 81081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081e4:	681b      	ldr	r3, [r3, #0]
 81081e6:	2b00      	cmp	r3, #0
 81081e8:	d1f1      	bne.n	81081ce <pvPortMalloc+0x86>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 81094b0:	4b33      	ldr	r3, [pc, #204]	; (8109580 <pvPortMalloc+0x174>)
 81094b2:	681b      	ldr	r3, [r3, #0]
 81094b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81094b6:	429a      	cmp	r2, r3
 81094b8:	d04b      	beq.n	8109552 <pvPortMalloc+0x146>
=======
 81081ea:	4b33      	ldr	r3, [pc, #204]	; (81082b8 <pvPortMalloc+0x170>)
 81081ec:	681b      	ldr	r3, [r3, #0]
 81081ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81081f0:	429a      	cmp	r2, r3
 81081f2:	d04a      	beq.n	810828a <pvPortMalloc+0x142>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 81094ba:	6a3b      	ldr	r3, [r7, #32]
 81094bc:	681b      	ldr	r3, [r3, #0]
 81094be:	2208      	movs	r2, #8
 81094c0:	4413      	add	r3, r2
 81094c2:	61fb      	str	r3, [r7, #28]
=======
 81081f4:	6a3b      	ldr	r3, [r7, #32]
 81081f6:	681b      	ldr	r3, [r3, #0]
 81081f8:	2208      	movs	r2, #8
 81081fa:	4413      	add	r3, r2
 81081fc:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 81094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094c6:	681a      	ldr	r2, [r3, #0]
 81094c8:	6a3b      	ldr	r3, [r7, #32]
 81094ca:	601a      	str	r2, [r3, #0]
=======
 81081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108200:	681a      	ldr	r2, [r3, #0]
 8108202:	6a3b      	ldr	r3, [r7, #32]
 8108204:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 81094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094ce:	685a      	ldr	r2, [r3, #4]
 81094d0:	687b      	ldr	r3, [r7, #4]
 81094d2:	1ad2      	subs	r2, r2, r3
 81094d4:	2308      	movs	r3, #8
 81094d6:	005b      	lsls	r3, r3, #1
 81094d8:	429a      	cmp	r2, r3
 81094da:	d91f      	bls.n	810951c <pvPortMalloc+0x110>
=======
 8108206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108208:	685a      	ldr	r2, [r3, #4]
 810820a:	687b      	ldr	r3, [r7, #4]
 810820c:	1ad2      	subs	r2, r2, r3
 810820e:	2308      	movs	r3, #8
 8108210:	005b      	lsls	r3, r3, #1
 8108212:	429a      	cmp	r2, r3
 8108214:	d91e      	bls.n	8108254 <pvPortMalloc+0x10c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 81094dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	4413      	add	r3, r2
 81094e2:	61bb      	str	r3, [r7, #24]
=======
 8108216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	4413      	add	r3, r2
 810821c:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 81094e4:	69bb      	ldr	r3, [r7, #24]
 81094e6:	f003 0307 	and.w	r3, r3, #7
 81094ea:	2b00      	cmp	r3, #0
 81094ec:	d00a      	beq.n	8109504 <pvPortMalloc+0xf8>
	__asm volatile
 81094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094f2:	f383 8811 	msr	BASEPRI, r3
 81094f6:	f3bf 8f6f 	isb	sy
 81094fa:	f3bf 8f4f 	dsb	sy
 81094fe:	613b      	str	r3, [r7, #16]
}
 8109500:	bf00      	nop
 8109502:	e7fe      	b.n	8109502 <pvPortMalloc+0xf6>
=======
 810821e:	69bb      	ldr	r3, [r7, #24]
 8108220:	f003 0307 	and.w	r3, r3, #7
 8108224:	2b00      	cmp	r3, #0
 8108226:	d009      	beq.n	810823c <pvPortMalloc+0xf4>
 8108228:	f04f 0350 	mov.w	r3, #80	; 0x50
 810822c:	f383 8811 	msr	BASEPRI, r3
 8108230:	f3bf 8f6f 	isb	sy
 8108234:	f3bf 8f4f 	dsb	sy
 8108238:	613b      	str	r3, [r7, #16]
 810823a:	e7fe      	b.n	810823a <pvPortMalloc+0xf2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8109504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109506:	685a      	ldr	r2, [r3, #4]
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	1ad2      	subs	r2, r2, r3
 810950c:	69bb      	ldr	r3, [r7, #24]
 810950e:	605a      	str	r2, [r3, #4]
=======
 810823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810823e:	685a      	ldr	r2, [r3, #4]
 8108240:	687b      	ldr	r3, [r7, #4]
 8108242:	1ad2      	subs	r2, r2, r3
 8108244:	69bb      	ldr	r3, [r7, #24]
 8108246:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						pxBlock->xBlockSize = xWantedSize;
<<<<<<< HEAD
 8109510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109512:	687a      	ldr	r2, [r7, #4]
 8109514:	605a      	str	r2, [r3, #4]
=======
 8108248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810824a:	687a      	ldr	r2, [r7, #4]
 810824c:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
<<<<<<< HEAD
 8109516:	69b8      	ldr	r0, [r7, #24]
 8109518:	f000 f8f8 	bl	810970c <prvInsertBlockIntoFreeList>
=======
 810824e:	69b8      	ldr	r0, [r7, #24]
 8108250:	f000 f8f6 	bl	8108440 <prvInsertBlockIntoFreeList>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 810951c:	4b1a      	ldr	r3, [pc, #104]	; (8109588 <pvPortMalloc+0x17c>)
 810951e:	681a      	ldr	r2, [r3, #0]
 8109520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109522:	685b      	ldr	r3, [r3, #4]
 8109524:	1ad3      	subs	r3, r2, r3
 8109526:	4a18      	ldr	r2, [pc, #96]	; (8109588 <pvPortMalloc+0x17c>)
 8109528:	6013      	str	r3, [r2, #0]
=======
 8108254:	4b1a      	ldr	r3, [pc, #104]	; (81082c0 <pvPortMalloc+0x178>)
 8108256:	681a      	ldr	r2, [r3, #0]
 8108258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810825a:	685b      	ldr	r3, [r3, #4]
 810825c:	1ad3      	subs	r3, r2, r3
 810825e:	4a18      	ldr	r2, [pc, #96]	; (81082c0 <pvPortMalloc+0x178>)
 8108260:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
<<<<<<< HEAD
 810952a:	4b17      	ldr	r3, [pc, #92]	; (8109588 <pvPortMalloc+0x17c>)
 810952c:	681a      	ldr	r2, [r3, #0]
 810952e:	4b18      	ldr	r3, [pc, #96]	; (8109590 <pvPortMalloc+0x184>)
 8109530:	681b      	ldr	r3, [r3, #0]
 8109532:	429a      	cmp	r2, r3
 8109534:	d203      	bcs.n	810953e <pvPortMalloc+0x132>
=======
 8108262:	4b17      	ldr	r3, [pc, #92]	; (81082c0 <pvPortMalloc+0x178>)
 8108264:	681a      	ldr	r2, [r3, #0]
 8108266:	4b18      	ldr	r3, [pc, #96]	; (81082c8 <pvPortMalloc+0x180>)
 8108268:	681b      	ldr	r3, [r3, #0]
 810826a:	429a      	cmp	r2, r3
 810826c:	d203      	bcs.n	8108276 <pvPortMalloc+0x12e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
<<<<<<< HEAD
 8109536:	4b14      	ldr	r3, [pc, #80]	; (8109588 <pvPortMalloc+0x17c>)
 8109538:	681b      	ldr	r3, [r3, #0]
 810953a:	4a15      	ldr	r2, [pc, #84]	; (8109590 <pvPortMalloc+0x184>)
 810953c:	6013      	str	r3, [r2, #0]
=======
 810826e:	4b14      	ldr	r3, [pc, #80]	; (81082c0 <pvPortMalloc+0x178>)
 8108270:	681b      	ldr	r3, [r3, #0]
 8108272:	4a15      	ldr	r2, [pc, #84]	; (81082c8 <pvPortMalloc+0x180>)
 8108274:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 810953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109540:	685a      	ldr	r2, [r3, #4]
 8109542:	4b10      	ldr	r3, [pc, #64]	; (8109584 <pvPortMalloc+0x178>)
 8109544:	681b      	ldr	r3, [r3, #0]
 8109546:	431a      	orrs	r2, r3
 8109548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810954a:	605a      	str	r2, [r3, #4]
=======
 8108276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108278:	685a      	ldr	r2, [r3, #4]
 810827a:	4b10      	ldr	r3, [pc, #64]	; (81082bc <pvPortMalloc+0x174>)
 810827c:	681b      	ldr	r3, [r3, #0]
 810827e:	431a      	orrs	r2, r3
 8108280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108282:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					pxBlock->pxNextFreeBlock = NULL;
<<<<<<< HEAD
 810954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810954e:	2200      	movs	r2, #0
 8109550:	601a      	str	r2, [r3, #0]
=======
 8108284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108286:	2200      	movs	r2, #0
 8108288:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 8109552:	f001 fb3d 	bl	810abd0 <xTaskResumeAll>
=======
 810828a:	f001 fa8b 	bl	81097a4 <xTaskResumeAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 8109556:	69fb      	ldr	r3, [r7, #28]
 8109558:	f003 0307 	and.w	r3, r3, #7
 810955c:	2b00      	cmp	r3, #0
 810955e:	d00a      	beq.n	8109576 <pvPortMalloc+0x16a>
	__asm volatile
 8109560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109564:	f383 8811 	msr	BASEPRI, r3
 8109568:	f3bf 8f6f 	isb	sy
 810956c:	f3bf 8f4f 	dsb	sy
 8109570:	60fb      	str	r3, [r7, #12]
=======
 810828e:	69fb      	ldr	r3, [r7, #28]
 8108290:	f003 0307 	and.w	r3, r3, #7
 8108294:	2b00      	cmp	r3, #0
 8108296:	d009      	beq.n	81082ac <pvPortMalloc+0x164>
 8108298:	f04f 0350 	mov.w	r3, #80	; 0x50
 810829c:	f383 8811 	msr	BASEPRI, r3
 81082a0:	f3bf 8f6f 	isb	sy
 81082a4:	f3bf 8f4f 	dsb	sy
 81082a8:	60fb      	str	r3, [r7, #12]
 81082aa:	e7fe      	b.n	81082aa <pvPortMalloc+0x162>
	return pvReturn;
 81082ac:	69fb      	ldr	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8109572:	bf00      	nop
 8109574:	e7fe      	b.n	8109574 <pvPortMalloc+0x168>
	return pvReturn;
 8109576:	69fb      	ldr	r3, [r7, #28]
}
 8109578:	4618      	mov	r0, r3
 810957a:	3728      	adds	r7, #40	; 0x28
 810957c:	46bd      	mov	sp, r7
 810957e:	bd80      	pop	{r7, pc}
 8109580:	1004049c 	.word	0x1004049c
 8109584:	100404a8 	.word	0x100404a8
 8109588:	100404a0 	.word	0x100404a0
 810958c:	10040494 	.word	0x10040494
 8109590:	100404a4 	.word	0x100404a4
=======
 81082ae:	4618      	mov	r0, r3
 81082b0:	3728      	adds	r7, #40	; 0x28
 81082b2:	46bd      	mov	sp, r7
 81082b4:	bd80      	pop	{r7, pc}
 81082b6:	bf00      	nop
 81082b8:	1000408c 	.word	0x1000408c
 81082bc:	10004098 	.word	0x10004098
 81082c0:	10004090 	.word	0x10004090
 81082c4:	10004084 	.word	0x10004084
 81082c8:	10004094 	.word	0x10004094
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109594 <vPortFree>:
=======
081082cc <vPortFree>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 8109594:	b580      	push	{r7, lr}
 8109596:	b086      	sub	sp, #24
 8109598:	af00      	add	r7, sp, #0
 810959a:	6078      	str	r0, [r7, #4]
=======
 81082cc:	b580      	push	{r7, lr}
 81082ce:	b086      	sub	sp, #24
 81082d0:	af00      	add	r7, sp, #0
 81082d2:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
uint8_t *puc = ( uint8_t * ) pv;
<<<<<<< HEAD
 810959c:	687b      	ldr	r3, [r7, #4]
 810959e:	617b      	str	r3, [r7, #20]
=======
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BlockLink_t *pxLink;

	if( pv != NULL )
<<<<<<< HEAD
 81095a0:	687b      	ldr	r3, [r7, #4]
 81095a2:	2b00      	cmp	r3, #0
 81095a4:	d048      	beq.n	8109638 <vPortFree+0xa4>
=======
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	2b00      	cmp	r3, #0
 81082dc:	d046      	beq.n	810836c <vPortFree+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 81095a6:	2308      	movs	r3, #8
 81095a8:	425b      	negs	r3, r3
 81095aa:	697a      	ldr	r2, [r7, #20]
 81095ac:	4413      	add	r3, r2
 81095ae:	617b      	str	r3, [r7, #20]
=======
 81082de:	2308      	movs	r3, #8
 81082e0:	425b      	negs	r3, r3
 81082e2:	697a      	ldr	r2, [r7, #20]
 81082e4:	4413      	add	r3, r2
 81082e6:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
<<<<<<< HEAD
 81095b0:	697b      	ldr	r3, [r7, #20]
 81095b2:	613b      	str	r3, [r7, #16]
=======
 81082e8:	697b      	ldr	r3, [r7, #20]
 81082ea:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
<<<<<<< HEAD
 81095b4:	693b      	ldr	r3, [r7, #16]
 81095b6:	685a      	ldr	r2, [r3, #4]
 81095b8:	4b21      	ldr	r3, [pc, #132]	; (8109640 <vPortFree+0xac>)
 81095ba:	681b      	ldr	r3, [r3, #0]
 81095bc:	4013      	ands	r3, r2
 81095be:	2b00      	cmp	r3, #0
 81095c0:	d10a      	bne.n	81095d8 <vPortFree+0x44>
	__asm volatile
 81095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095c6:	f383 8811 	msr	BASEPRI, r3
 81095ca:	f3bf 8f6f 	isb	sy
 81095ce:	f3bf 8f4f 	dsb	sy
 81095d2:	60fb      	str	r3, [r7, #12]
}
 81095d4:	bf00      	nop
 81095d6:	e7fe      	b.n	81095d6 <vPortFree+0x42>
=======
 81082ec:	693b      	ldr	r3, [r7, #16]
 81082ee:	685a      	ldr	r2, [r3, #4]
 81082f0:	4b20      	ldr	r3, [pc, #128]	; (8108374 <vPortFree+0xa8>)
 81082f2:	681b      	ldr	r3, [r3, #0]
 81082f4:	4013      	ands	r3, r2
 81082f6:	2b00      	cmp	r3, #0
 81082f8:	d109      	bne.n	810830e <vPortFree+0x42>
 81082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81082fe:	f383 8811 	msr	BASEPRI, r3
 8108302:	f3bf 8f6f 	isb	sy
 8108306:	f3bf 8f4f 	dsb	sy
 810830a:	60fb      	str	r3, [r7, #12]
 810830c:	e7fe      	b.n	810830c <vPortFree+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		configASSERT( pxLink->pxNextFreeBlock == NULL );
<<<<<<< HEAD
 81095d8:	693b      	ldr	r3, [r7, #16]
 81095da:	681b      	ldr	r3, [r3, #0]
 81095dc:	2b00      	cmp	r3, #0
 81095de:	d00a      	beq.n	81095f6 <vPortFree+0x62>
	__asm volatile
 81095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095e4:	f383 8811 	msr	BASEPRI, r3
 81095e8:	f3bf 8f6f 	isb	sy
 81095ec:	f3bf 8f4f 	dsb	sy
 81095f0:	60bb      	str	r3, [r7, #8]
}
 81095f2:	bf00      	nop
 81095f4:	e7fe      	b.n	81095f4 <vPortFree+0x60>
=======
 810830e:	693b      	ldr	r3, [r7, #16]
 8108310:	681b      	ldr	r3, [r3, #0]
 8108312:	2b00      	cmp	r3, #0
 8108314:	d009      	beq.n	810832a <vPortFree+0x5e>
 8108316:	f04f 0350 	mov.w	r3, #80	; 0x50
 810831a:	f383 8811 	msr	BASEPRI, r3
 810831e:	f3bf 8f6f 	isb	sy
 8108322:	f3bf 8f4f 	dsb	sy
 8108326:	60bb      	str	r3, [r7, #8]
 8108328:	e7fe      	b.n	8108328 <vPortFree+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
<<<<<<< HEAD
 81095f6:	693b      	ldr	r3, [r7, #16]
 81095f8:	685a      	ldr	r2, [r3, #4]
 81095fa:	4b11      	ldr	r3, [pc, #68]	; (8109640 <vPortFree+0xac>)
 81095fc:	681b      	ldr	r3, [r3, #0]
 81095fe:	4013      	ands	r3, r2
 8109600:	2b00      	cmp	r3, #0
 8109602:	d019      	beq.n	8109638 <vPortFree+0xa4>
=======
 810832a:	693b      	ldr	r3, [r7, #16]
 810832c:	685a      	ldr	r2, [r3, #4]
 810832e:	4b11      	ldr	r3, [pc, #68]	; (8108374 <vPortFree+0xa8>)
 8108330:	681b      	ldr	r3, [r3, #0]
 8108332:	4013      	ands	r3, r2
 8108334:	2b00      	cmp	r3, #0
 8108336:	d019      	beq.n	810836c <vPortFree+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			if( pxLink->pxNextFreeBlock == NULL )
<<<<<<< HEAD
 8109604:	693b      	ldr	r3, [r7, #16]
 8109606:	681b      	ldr	r3, [r3, #0]
 8109608:	2b00      	cmp	r3, #0
 810960a:	d115      	bne.n	8109638 <vPortFree+0xa4>
=======
 8108338:	693b      	ldr	r3, [r7, #16]
 810833a:	681b      	ldr	r3, [r3, #0]
 810833c:	2b00      	cmp	r3, #0
 810833e:	d115      	bne.n	810836c <vPortFree+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 810960c:	693b      	ldr	r3, [r7, #16]
 810960e:	685a      	ldr	r2, [r3, #4]
 8109610:	4b0b      	ldr	r3, [pc, #44]	; (8109640 <vPortFree+0xac>)
 8109612:	681b      	ldr	r3, [r3, #0]
 8109614:	43db      	mvns	r3, r3
 8109616:	401a      	ands	r2, r3
 8109618:	693b      	ldr	r3, [r7, #16]
 810961a:	605a      	str	r2, [r3, #4]
=======
 8108340:	693b      	ldr	r3, [r7, #16]
 8108342:	685a      	ldr	r2, [r3, #4]
 8108344:	4b0b      	ldr	r3, [pc, #44]	; (8108374 <vPortFree+0xa8>)
 8108346:	681b      	ldr	r3, [r3, #0]
 8108348:	43db      	mvns	r3, r3
 810834a:	401a      	ands	r2, r3
 810834c:	693b      	ldr	r3, [r7, #16]
 810834e:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

				vTaskSuspendAll();
<<<<<<< HEAD
 810961c:	f001 faca 	bl	810abb4 <vTaskSuspendAll>
=======
 8108350:	f001 fa1a 	bl	8109788 <vTaskSuspendAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
<<<<<<< HEAD
 8109620:	693b      	ldr	r3, [r7, #16]
 8109622:	685a      	ldr	r2, [r3, #4]
 8109624:	4b07      	ldr	r3, [pc, #28]	; (8109644 <vPortFree+0xb0>)
 8109626:	681b      	ldr	r3, [r3, #0]
 8109628:	4413      	add	r3, r2
 810962a:	4a06      	ldr	r2, [pc, #24]	; (8109644 <vPortFree+0xb0>)
 810962c:	6013      	str	r3, [r2, #0]
=======
 8108354:	693b      	ldr	r3, [r7, #16]
 8108356:	685a      	ldr	r2, [r3, #4]
 8108358:	4b07      	ldr	r3, [pc, #28]	; (8108378 <vPortFree+0xac>)
 810835a:	681b      	ldr	r3, [r3, #0]
 810835c:	4413      	add	r3, r2
 810835e:	4a06      	ldr	r2, [pc, #24]	; (8108378 <vPortFree+0xac>)
 8108360:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
<<<<<<< HEAD
 810962e:	6938      	ldr	r0, [r7, #16]
 8109630:	f000 f86c 	bl	810970c <prvInsertBlockIntoFreeList>
=======
 8108362:	6938      	ldr	r0, [r7, #16]
 8108364:	f000 f86c 	bl	8108440 <prvInsertBlockIntoFreeList>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}
				( void ) xTaskResumeAll();
<<<<<<< HEAD
 8109634:	f001 facc 	bl	810abd0 <xTaskResumeAll>
=======
 8108368:	f001 fa1c 	bl	81097a4 <xTaskResumeAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 8109638:	bf00      	nop
 810963a:	3718      	adds	r7, #24
 810963c:	46bd      	mov	sp, r7
 810963e:	bd80      	pop	{r7, pc}
 8109640:	100404a8 	.word	0x100404a8
 8109644:	100404a0 	.word	0x100404a0
=======
 810836c:	bf00      	nop
 810836e:	3718      	adds	r7, #24
 8108370:	46bd      	mov	sp, r7
 8108372:	bd80      	pop	{r7, pc}
 8108374:	10004098 	.word	0x10004098
 8108378:	10004090 	.word	0x10004090
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109648 <prvHeapInit>:
=======
0810837c <prvHeapInit>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 8109648:	b480      	push	{r7}
 810964a:	b085      	sub	sp, #20
 810964c:	af00      	add	r7, sp, #0
=======
 810837c:	b480      	push	{r7}
 810837e:	b085      	sub	sp, #20
 8108380:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 810964e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8109652:	60bb      	str	r3, [r7, #8]
=======
 8108382:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8108386:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
<<<<<<< HEAD
 8109654:	4b27      	ldr	r3, [pc, #156]	; (81096f4 <prvHeapInit+0xac>)
 8109656:	60fb      	str	r3, [r7, #12]
=======
 8108388:	4b27      	ldr	r3, [pc, #156]	; (8108428 <prvHeapInit+0xac>)
 810838a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
<<<<<<< HEAD
 8109658:	68fb      	ldr	r3, [r7, #12]
 810965a:	f003 0307 	and.w	r3, r3, #7
 810965e:	2b00      	cmp	r3, #0
 8109660:	d00c      	beq.n	810967c <prvHeapInit+0x34>
=======
 810838c:	68fb      	ldr	r3, [r7, #12]
 810838e:	f003 0307 	and.w	r3, r3, #7
 8108392:	2b00      	cmp	r3, #0
 8108394:	d00c      	beq.n	81083b0 <prvHeapInit+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
<<<<<<< HEAD
 8109662:	68fb      	ldr	r3, [r7, #12]
 8109664:	3307      	adds	r3, #7
 8109666:	60fb      	str	r3, [r7, #12]
=======
 8108396:	68fb      	ldr	r3, [r7, #12]
 8108398:	3307      	adds	r3, #7
 810839a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
<<<<<<< HEAD
 8109668:	68fb      	ldr	r3, [r7, #12]
 810966a:	f023 0307 	bic.w	r3, r3, #7
 810966e:	60fb      	str	r3, [r7, #12]
=======
 810839c:	68fb      	ldr	r3, [r7, #12]
 810839e:	f023 0307 	bic.w	r3, r3, #7
 81083a2:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
<<<<<<< HEAD
 8109670:	68ba      	ldr	r2, [r7, #8]
 8109672:	68fb      	ldr	r3, [r7, #12]
 8109674:	1ad3      	subs	r3, r2, r3
 8109676:	4a1f      	ldr	r2, [pc, #124]	; (81096f4 <prvHeapInit+0xac>)
 8109678:	4413      	add	r3, r2
 810967a:	60bb      	str	r3, [r7, #8]
=======
 81083a4:	68ba      	ldr	r2, [r7, #8]
 81083a6:	68fb      	ldr	r3, [r7, #12]
 81083a8:	1ad3      	subs	r3, r2, r3
 81083aa:	4a1f      	ldr	r2, [pc, #124]	; (8108428 <prvHeapInit+0xac>)
 81083ac:	4413      	add	r3, r2
 81083ae:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
<<<<<<< HEAD
 810967c:	68fb      	ldr	r3, [r7, #12]
 810967e:	607b      	str	r3, [r7, #4]
=======
 81083b0:	68fb      	ldr	r3, [r7, #12]
 81083b2:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8109680:	4a1d      	ldr	r2, [pc, #116]	; (81096f8 <prvHeapInit+0xb0>)
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	6013      	str	r3, [r2, #0]
=======
 81083b4:	4a1d      	ldr	r2, [pc, #116]	; (810842c <prvHeapInit+0xb0>)
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	xStart.xBlockSize = ( size_t ) 0;
<<<<<<< HEAD
 8109686:	4b1c      	ldr	r3, [pc, #112]	; (81096f8 <prvHeapInit+0xb0>)
 8109688:	2200      	movs	r2, #0
 810968a:	605a      	str	r2, [r3, #4]
=======
 81083ba:	4b1c      	ldr	r3, [pc, #112]	; (810842c <prvHeapInit+0xb0>)
 81083bc:	2200      	movs	r2, #0
 81083be:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 810968c:	687b      	ldr	r3, [r7, #4]
 810968e:	68ba      	ldr	r2, [r7, #8]
 8109690:	4413      	add	r3, r2
 8109692:	60fb      	str	r3, [r7, #12]
=======
 81083c0:	687b      	ldr	r3, [r7, #4]
 81083c2:	68ba      	ldr	r2, [r7, #8]
 81083c4:	4413      	add	r3, r2
 81083c6:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uxAddress -= xHeapStructSize;
<<<<<<< HEAD
 8109694:	2208      	movs	r2, #8
 8109696:	68fb      	ldr	r3, [r7, #12]
 8109698:	1a9b      	subs	r3, r3, r2
 810969a:	60fb      	str	r3, [r7, #12]
=======
 81083c8:	2208      	movs	r2, #8
 81083ca:	68fb      	ldr	r3, [r7, #12]
 81083cc:	1a9b      	subs	r3, r3, r2
 81083ce:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
<<<<<<< HEAD
 810969c:	68fb      	ldr	r3, [r7, #12]
 810969e:	f023 0307 	bic.w	r3, r3, #7
 81096a2:	60fb      	str	r3, [r7, #12]
=======
 81083d0:	68fb      	ldr	r3, [r7, #12]
 81083d2:	f023 0307 	bic.w	r3, r3, #7
 81083d6:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxEnd = ( void * ) uxAddress;
<<<<<<< HEAD
 81096a4:	68fb      	ldr	r3, [r7, #12]
 81096a6:	4a15      	ldr	r2, [pc, #84]	; (81096fc <prvHeapInit+0xb4>)
 81096a8:	6013      	str	r3, [r2, #0]
=======
 81083d8:	68fb      	ldr	r3, [r7, #12]
 81083da:	4a15      	ldr	r2, [pc, #84]	; (8108430 <prvHeapInit+0xb4>)
 81083dc:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxEnd->xBlockSize = 0;
<<<<<<< HEAD
 81096aa:	4b14      	ldr	r3, [pc, #80]	; (81096fc <prvHeapInit+0xb4>)
 81096ac:	681b      	ldr	r3, [r3, #0]
 81096ae:	2200      	movs	r2, #0
 81096b0:	605a      	str	r2, [r3, #4]
=======
 81083de:	4b14      	ldr	r3, [pc, #80]	; (8108430 <prvHeapInit+0xb4>)
 81083e0:	681b      	ldr	r3, [r3, #0]
 81083e2:	2200      	movs	r2, #0
 81083e4:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxEnd->pxNextFreeBlock = NULL;
<<<<<<< HEAD
 81096b2:	4b12      	ldr	r3, [pc, #72]	; (81096fc <prvHeapInit+0xb4>)
 81096b4:	681b      	ldr	r3, [r3, #0]
 81096b6:	2200      	movs	r2, #0
 81096b8:	601a      	str	r2, [r3, #0]
=======
 81083e6:	4b12      	ldr	r3, [pc, #72]	; (8108430 <prvHeapInit+0xb4>)
 81083e8:	681b      	ldr	r3, [r3, #0]
 81083ea:	2200      	movs	r2, #0
 81083ec:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 81096ba:	687b      	ldr	r3, [r7, #4]
 81096bc:	603b      	str	r3, [r7, #0]
=======
 81083ee:	687b      	ldr	r3, [r7, #4]
 81083f0:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
<<<<<<< HEAD
 81096be:	683b      	ldr	r3, [r7, #0]
 81096c0:	68fa      	ldr	r2, [r7, #12]
 81096c2:	1ad2      	subs	r2, r2, r3
 81096c4:	683b      	ldr	r3, [r7, #0]
 81096c6:	605a      	str	r2, [r3, #4]
=======
 81083f2:	683b      	ldr	r3, [r7, #0]
 81083f4:	68fa      	ldr	r2, [r7, #12]
 81083f6:	1ad2      	subs	r2, r2, r3
 81083f8:	683b      	ldr	r3, [r7, #0]
 81083fa:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 81096c8:	4b0c      	ldr	r3, [pc, #48]	; (81096fc <prvHeapInit+0xb4>)
 81096ca:	681a      	ldr	r2, [r3, #0]
 81096cc:	683b      	ldr	r3, [r7, #0]
 81096ce:	601a      	str	r2, [r3, #0]
=======
 81083fc:	4b0c      	ldr	r3, [pc, #48]	; (8108430 <prvHeapInit+0xb4>)
 81083fe:	681a      	ldr	r2, [r3, #0]
 8108400:	683b      	ldr	r3, [r7, #0]
 8108402:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
<<<<<<< HEAD
 81096d0:	683b      	ldr	r3, [r7, #0]
 81096d2:	685b      	ldr	r3, [r3, #4]
 81096d4:	4a0a      	ldr	r2, [pc, #40]	; (8109700 <prvHeapInit+0xb8>)
 81096d6:	6013      	str	r3, [r2, #0]
=======
 8108404:	683b      	ldr	r3, [r7, #0]
 8108406:	685b      	ldr	r3, [r3, #4]
 8108408:	4a0a      	ldr	r2, [pc, #40]	; (8108434 <prvHeapInit+0xb8>)
 810840a:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
<<<<<<< HEAD
 81096d8:	683b      	ldr	r3, [r7, #0]
 81096da:	685b      	ldr	r3, [r3, #4]
 81096dc:	4a09      	ldr	r2, [pc, #36]	; (8109704 <prvHeapInit+0xbc>)
 81096de:	6013      	str	r3, [r2, #0]
=======
 810840c:	683b      	ldr	r3, [r7, #0]
 810840e:	685b      	ldr	r3, [r3, #4]
 8108410:	4a09      	ldr	r2, [pc, #36]	; (8108438 <prvHeapInit+0xbc>)
 8108412:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
<<<<<<< HEAD
 81096e0:	4b09      	ldr	r3, [pc, #36]	; (8109708 <prvHeapInit+0xc0>)
 81096e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81096e6:	601a      	str	r2, [r3, #0]
=======
 8108414:	4b09      	ldr	r3, [pc, #36]	; (810843c <prvHeapInit+0xc0>)
 8108416:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810841a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81096e8:	bf00      	nop
 81096ea:	3714      	adds	r7, #20
 81096ec:	46bd      	mov	sp, r7
 81096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096f2:	4770      	bx	lr
 81096f4:	10000494 	.word	0x10000494
 81096f8:	10040494 	.word	0x10040494
 81096fc:	1004049c 	.word	0x1004049c
 8109700:	100404a4 	.word	0x100404a4
 8109704:	100404a0 	.word	0x100404a0
 8109708:	100404a8 	.word	0x100404a8
=======
 810841c:	bf00      	nop
 810841e:	3714      	adds	r7, #20
 8108420:	46bd      	mov	sp, r7
 8108422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108426:	4770      	bx	lr
 8108428:	10000484 	.word	0x10000484
 810842c:	10004084 	.word	0x10004084
 8108430:	1000408c 	.word	0x1000408c
 8108434:	10004094 	.word	0x10004094
 8108438:	10004090 	.word	0x10004090
 810843c:	10004098 	.word	0x10004098
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810970c <prvInsertBlockIntoFreeList>:
=======
08108440 <prvInsertBlockIntoFreeList>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 810970c:	b480      	push	{r7}
 810970e:	b085      	sub	sp, #20
 8109710:	af00      	add	r7, sp, #0
 8109712:	6078      	str	r0, [r7, #4]
=======
 8108440:	b480      	push	{r7}
 8108442:	b085      	sub	sp, #20
 8108444:	af00      	add	r7, sp, #0
 8108446:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8109714:	4b28      	ldr	r3, [pc, #160]	; (81097b8 <prvInsertBlockIntoFreeList+0xac>)
 8109716:	60fb      	str	r3, [r7, #12]
 8109718:	e002      	b.n	8109720 <prvInsertBlockIntoFreeList+0x14>
 810971a:	68fb      	ldr	r3, [r7, #12]
 810971c:	681b      	ldr	r3, [r3, #0]
 810971e:	60fb      	str	r3, [r7, #12]
 8109720:	68fb      	ldr	r3, [r7, #12]
 8109722:	681b      	ldr	r3, [r3, #0]
 8109724:	687a      	ldr	r2, [r7, #4]
 8109726:	429a      	cmp	r2, r3
 8109728:	d8f7      	bhi.n	810971a <prvInsertBlockIntoFreeList+0xe>
=======
 8108448:	4b28      	ldr	r3, [pc, #160]	; (81084ec <prvInsertBlockIntoFreeList+0xac>)
 810844a:	60fb      	str	r3, [r7, #12]
 810844c:	e002      	b.n	8108454 <prvInsertBlockIntoFreeList+0x14>
 810844e:	68fb      	ldr	r3, [r7, #12]
 8108450:	681b      	ldr	r3, [r3, #0]
 8108452:	60fb      	str	r3, [r7, #12]
 8108454:	68fb      	ldr	r3, [r7, #12]
 8108456:	681b      	ldr	r3, [r3, #0]
 8108458:	687a      	ldr	r2, [r7, #4]
 810845a:	429a      	cmp	r2, r3
 810845c:	d8f7      	bhi.n	810844e <prvInsertBlockIntoFreeList+0xe>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 810972a:	68fb      	ldr	r3, [r7, #12]
 810972c:	60bb      	str	r3, [r7, #8]
=======
 810845e:	68fb      	ldr	r3, [r7, #12]
 8108460:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
<<<<<<< HEAD
 810972e:	68fb      	ldr	r3, [r7, #12]
 8109730:	685b      	ldr	r3, [r3, #4]
 8109732:	68ba      	ldr	r2, [r7, #8]
 8109734:	4413      	add	r3, r2
 8109736:	687a      	ldr	r2, [r7, #4]
 8109738:	429a      	cmp	r2, r3
 810973a:	d108      	bne.n	810974e <prvInsertBlockIntoFreeList+0x42>
=======
 8108462:	68fb      	ldr	r3, [r7, #12]
 8108464:	685b      	ldr	r3, [r3, #4]
 8108466:	68ba      	ldr	r2, [r7, #8]
 8108468:	4413      	add	r3, r2
 810846a:	687a      	ldr	r2, [r7, #4]
 810846c:	429a      	cmp	r2, r3
 810846e:	d108      	bne.n	8108482 <prvInsertBlockIntoFreeList+0x42>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
<<<<<<< HEAD
 810973c:	68fb      	ldr	r3, [r7, #12]
 810973e:	685a      	ldr	r2, [r3, #4]
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	685b      	ldr	r3, [r3, #4]
 8109744:	441a      	add	r2, r3
 8109746:	68fb      	ldr	r3, [r7, #12]
 8109748:	605a      	str	r2, [r3, #4]
=======
 8108470:	68fb      	ldr	r3, [r7, #12]
 8108472:	685a      	ldr	r2, [r3, #4]
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	685b      	ldr	r3, [r3, #4]
 8108478:	441a      	add	r2, r3
 810847a:	68fb      	ldr	r3, [r7, #12]
 810847c:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxBlockToInsert = pxIterator;
<<<<<<< HEAD
 810974a:	68fb      	ldr	r3, [r7, #12]
 810974c:	607b      	str	r3, [r7, #4]
=======
 810847e:	68fb      	ldr	r3, [r7, #12]
 8108480:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 810974e:	687b      	ldr	r3, [r7, #4]
 8109750:	60bb      	str	r3, [r7, #8]
=======
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8109752:	687b      	ldr	r3, [r7, #4]
 8109754:	685b      	ldr	r3, [r3, #4]
 8109756:	68ba      	ldr	r2, [r7, #8]
 8109758:	441a      	add	r2, r3
 810975a:	68fb      	ldr	r3, [r7, #12]
 810975c:	681b      	ldr	r3, [r3, #0]
 810975e:	429a      	cmp	r2, r3
 8109760:	d118      	bne.n	8109794 <prvInsertBlockIntoFreeList+0x88>
=======
 8108486:	687b      	ldr	r3, [r7, #4]
 8108488:	685b      	ldr	r3, [r3, #4]
 810848a:	68ba      	ldr	r2, [r7, #8]
 810848c:	441a      	add	r2, r3
 810848e:	68fb      	ldr	r3, [r7, #12]
 8108490:	681b      	ldr	r3, [r3, #0]
 8108492:	429a      	cmp	r2, r3
 8108494:	d118      	bne.n	81084c8 <prvInsertBlockIntoFreeList+0x88>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
<<<<<<< HEAD
 8109762:	68fb      	ldr	r3, [r7, #12]
 8109764:	681a      	ldr	r2, [r3, #0]
 8109766:	4b15      	ldr	r3, [pc, #84]	; (81097bc <prvInsertBlockIntoFreeList+0xb0>)
 8109768:	681b      	ldr	r3, [r3, #0]
 810976a:	429a      	cmp	r2, r3
 810976c:	d00d      	beq.n	810978a <prvInsertBlockIntoFreeList+0x7e>
=======
 8108496:	68fb      	ldr	r3, [r7, #12]
 8108498:	681a      	ldr	r2, [r3, #0]
 810849a:	4b15      	ldr	r3, [pc, #84]	; (81084f0 <prvInsertBlockIntoFreeList+0xb0>)
 810849c:	681b      	ldr	r3, [r3, #0]
 810849e:	429a      	cmp	r2, r3
 81084a0:	d00d      	beq.n	81084be <prvInsertBlockIntoFreeList+0x7e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
<<<<<<< HEAD
 810976e:	687b      	ldr	r3, [r7, #4]
 8109770:	685a      	ldr	r2, [r3, #4]
 8109772:	68fb      	ldr	r3, [r7, #12]
 8109774:	681b      	ldr	r3, [r3, #0]
 8109776:	685b      	ldr	r3, [r3, #4]
 8109778:	441a      	add	r2, r3
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	605a      	str	r2, [r3, #4]
=======
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	685a      	ldr	r2, [r3, #4]
 81084a6:	68fb      	ldr	r3, [r7, #12]
 81084a8:	681b      	ldr	r3, [r3, #0]
 81084aa:	685b      	ldr	r3, [r3, #4]
 81084ac:	441a      	add	r2, r3
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
<<<<<<< HEAD
 810977e:	68fb      	ldr	r3, [r7, #12]
 8109780:	681b      	ldr	r3, [r3, #0]
 8109782:	681a      	ldr	r2, [r3, #0]
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	601a      	str	r2, [r3, #0]
 8109788:	e008      	b.n	810979c <prvInsertBlockIntoFreeList+0x90>
=======
 81084b2:	68fb      	ldr	r3, [r7, #12]
 81084b4:	681b      	ldr	r3, [r3, #0]
 81084b6:	681a      	ldr	r2, [r3, #0]
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	601a      	str	r2, [r3, #0]
 81084bc:	e008      	b.n	81084d0 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 810978a:	4b0c      	ldr	r3, [pc, #48]	; (81097bc <prvInsertBlockIntoFreeList+0xb0>)
 810978c:	681a      	ldr	r2, [r3, #0]
 810978e:	687b      	ldr	r3, [r7, #4]
 8109790:	601a      	str	r2, [r3, #0]
 8109792:	e003      	b.n	810979c <prvInsertBlockIntoFreeList+0x90>
=======
 81084be:	4b0c      	ldr	r3, [pc, #48]	; (81084f0 <prvInsertBlockIntoFreeList+0xb0>)
 81084c0:	681a      	ldr	r2, [r3, #0]
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	601a      	str	r2, [r3, #0]
 81084c6:	e003      	b.n	81084d0 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 8109794:	68fb      	ldr	r3, [r7, #12]
 8109796:	681a      	ldr	r2, [r3, #0]
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	601a      	str	r2, [r3, #0]
=======
 81084c8:	68fb      	ldr	r3, [r7, #12]
 81084ca:	681a      	ldr	r2, [r3, #0]
 81084cc:	687b      	ldr	r3, [r7, #4]
 81084ce:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 810979c:	68fa      	ldr	r2, [r7, #12]
 810979e:	687b      	ldr	r3, [r7, #4]
 81097a0:	429a      	cmp	r2, r3
 81097a2:	d002      	beq.n	81097aa <prvInsertBlockIntoFreeList+0x9e>
=======
 81084d0:	68fa      	ldr	r2, [r7, #12]
 81084d2:	687b      	ldr	r3, [r7, #4]
 81084d4:	429a      	cmp	r2, r3
 81084d6:	d002      	beq.n	81084de <prvInsertBlockIntoFreeList+0x9e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
<<<<<<< HEAD
 81097a4:	68fb      	ldr	r3, [r7, #12]
 81097a6:	687a      	ldr	r2, [r7, #4]
 81097a8:	601a      	str	r2, [r3, #0]
=======
 81084d8:	68fb      	ldr	r3, [r7, #12]
 81084da:	687a      	ldr	r2, [r7, #4]
 81084dc:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 81097aa:	bf00      	nop
 81097ac:	3714      	adds	r7, #20
 81097ae:	46bd      	mov	sp, r7
 81097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097b4:	4770      	bx	lr
 81097b6:	bf00      	nop
 81097b8:	10040494 	.word	0x10040494
 81097bc:	1004049c 	.word	0x1004049c
=======
 81084de:	bf00      	nop
 81084e0:	3714      	adds	r7, #20
 81084e2:	46bd      	mov	sp, r7
 81084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084e8:	4770      	bx	lr
 81084ea:	bf00      	nop
 81084ec:	10004084 	.word	0x10004084
 81084f0:	1000408c 	.word	0x1000408c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081097c0 <vListInitialise>:
=======
081084f4 <vListInitialise>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 81097c0:	b480      	push	{r7}
 81097c2:	b083      	sub	sp, #12
 81097c4:	af00      	add	r7, sp, #0
 81097c6:	6078      	str	r0, [r7, #4]
=======
 81084f4:	b480      	push	{r7}
 81084f6:	b083      	sub	sp, #12
 81084f8:	af00      	add	r7, sp, #0
 81084fa:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 81097c8:	687b      	ldr	r3, [r7, #4]
 81097ca:	f103 0208 	add.w	r2, r3, #8
 81097ce:	687b      	ldr	r3, [r7, #4]
 81097d0:	605a      	str	r2, [r3, #4]
=======
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	f103 0208 	add.w	r2, r3, #8
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 81097d2:	687b      	ldr	r3, [r7, #4]
 81097d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81097d8:	609a      	str	r2, [r3, #8]
=======
 8108506:	687b      	ldr	r3, [r7, #4]
 8108508:	f04f 32ff 	mov.w	r2, #4294967295
 810850c:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 81097da:	687b      	ldr	r3, [r7, #4]
 81097dc:	f103 0208 	add.w	r2, r3, #8
 81097e0:	687b      	ldr	r3, [r7, #4]
 81097e2:	60da      	str	r2, [r3, #12]
=======
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	f103 0208 	add.w	r2, r3, #8
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 81097e4:	687b      	ldr	r3, [r7, #4]
 81097e6:	f103 0208 	add.w	r2, r3, #8
 81097ea:	687b      	ldr	r3, [r7, #4]
 81097ec:	611a      	str	r2, [r3, #16]
=======
 8108518:	687b      	ldr	r3, [r7, #4]
 810851a:	f103 0208 	add.w	r2, r3, #8
 810851e:	687b      	ldr	r3, [r7, #4]
 8108520:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
<<<<<<< HEAD
 81097ee:	687b      	ldr	r3, [r7, #4]
 81097f0:	2200      	movs	r2, #0
 81097f2:	601a      	str	r2, [r3, #0]
=======
 8108522:	687b      	ldr	r3, [r7, #4]
 8108524:	2200      	movs	r2, #0
 8108526:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 81097f4:	bf00      	nop
 81097f6:	370c      	adds	r7, #12
 81097f8:	46bd      	mov	sp, r7
 81097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097fe:	4770      	bx	lr
=======
 8108528:	bf00      	nop
 810852a:	370c      	adds	r7, #12
 810852c:	46bd      	mov	sp, r7
 810852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108532:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109800 <vListInitialiseItem>:
=======
08108534 <vListInitialiseItem>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8109800:	b480      	push	{r7}
 8109802:	b083      	sub	sp, #12
 8109804:	af00      	add	r7, sp, #0
 8109806:	6078      	str	r0, [r7, #4]
=======
 8108534:	b480      	push	{r7}
 8108536:	b083      	sub	sp, #12
 8108538:	af00      	add	r7, sp, #0
 810853a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
<<<<<<< HEAD
 8109808:	687b      	ldr	r3, [r7, #4]
 810980a:	2200      	movs	r2, #0
 810980c:	611a      	str	r2, [r3, #16]
=======
 810853c:	687b      	ldr	r3, [r7, #4]
 810853e:	2200      	movs	r2, #0
 8108540:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 810980e:	bf00      	nop
 8109810:	370c      	adds	r7, #12
 8109812:	46bd      	mov	sp, r7
 8109814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109818:	4770      	bx	lr
=======
 8108542:	bf00      	nop
 8108544:	370c      	adds	r7, #12
 8108546:	46bd      	mov	sp, r7
 8108548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810854c:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810981a <vListInsertEnd>:
=======
0810854e <vListInsertEnd>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 810981a:	b480      	push	{r7}
 810981c:	b085      	sub	sp, #20
 810981e:	af00      	add	r7, sp, #0
 8109820:	6078      	str	r0, [r7, #4]
 8109822:	6039      	str	r1, [r7, #0]
=======
 810854e:	b480      	push	{r7}
 8108550:	b085      	sub	sp, #20
 8108552:	af00      	add	r7, sp, #0
 8108554:	6078      	str	r0, [r7, #4]
 8108556:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
ListItem_t * const pxIndex = pxList->pxIndex;
<<<<<<< HEAD
 8109824:	687b      	ldr	r3, [r7, #4]
 8109826:	685b      	ldr	r3, [r3, #4]
 8109828:	60fb      	str	r3, [r7, #12]
=======
 8108558:	687b      	ldr	r3, [r7, #4]
 810855a:	685b      	ldr	r3, [r3, #4]
 810855c:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 810982a:	683b      	ldr	r3, [r7, #0]
 810982c:	68fa      	ldr	r2, [r7, #12]
 810982e:	605a      	str	r2, [r3, #4]
=======
 810855e:	683b      	ldr	r3, [r7, #0]
 8108560:	68fa      	ldr	r2, [r7, #12]
 8108562:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
<<<<<<< HEAD
 8109830:	68fb      	ldr	r3, [r7, #12]
 8109832:	689a      	ldr	r2, [r3, #8]
 8109834:	683b      	ldr	r3, [r7, #0]
 8109836:	609a      	str	r2, [r3, #8]
=======
 8108564:	68fb      	ldr	r3, [r7, #12]
 8108566:	689a      	ldr	r2, [r3, #8]
 8108568:	683b      	ldr	r3, [r7, #0]
 810856a:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8109838:	68fb      	ldr	r3, [r7, #12]
 810983a:	689b      	ldr	r3, [r3, #8]
 810983c:	683a      	ldr	r2, [r7, #0]
 810983e:	605a      	str	r2, [r3, #4]
=======
 810856c:	68fb      	ldr	r3, [r7, #12]
 810856e:	689b      	ldr	r3, [r3, #8]
 8108570:	683a      	ldr	r2, [r7, #0]
 8108572:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxIndex->pxPrevious = pxNewListItem;
<<<<<<< HEAD
 8109840:	68fb      	ldr	r3, [r7, #12]
 8109842:	683a      	ldr	r2, [r7, #0]
 8109844:	609a      	str	r2, [r3, #8]
=======
 8108574:	68fb      	ldr	r3, [r7, #12]
 8108576:	683a      	ldr	r2, [r7, #0]
 8108578:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 8109846:	683b      	ldr	r3, [r7, #0]
 8109848:	687a      	ldr	r2, [r7, #4]
 810984a:	611a      	str	r2, [r3, #16]
=======
 810857a:	683b      	ldr	r3, [r7, #0]
 810857c:	687a      	ldr	r2, [r7, #4]
 810857e:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	( pxList->uxNumberOfItems )++;
<<<<<<< HEAD
 810984c:	687b      	ldr	r3, [r7, #4]
 810984e:	681b      	ldr	r3, [r3, #0]
 8109850:	1c5a      	adds	r2, r3, #1
 8109852:	687b      	ldr	r3, [r7, #4]
 8109854:	601a      	str	r2, [r3, #0]
=======
 8108580:	687b      	ldr	r3, [r7, #4]
 8108582:	681b      	ldr	r3, [r3, #0]
 8108584:	1c5a      	adds	r2, r3, #1
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8109856:	bf00      	nop
 8109858:	3714      	adds	r7, #20
 810985a:	46bd      	mov	sp, r7
 810985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109860:	4770      	bx	lr
=======
 810858a:	bf00      	nop
 810858c:	3714      	adds	r7, #20
 810858e:	46bd      	mov	sp, r7
 8108590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108594:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109862 <vListInsert>:
=======
08108596 <vListInsert>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8109862:	b480      	push	{r7}
 8109864:	b085      	sub	sp, #20
 8109866:	af00      	add	r7, sp, #0
 8109868:	6078      	str	r0, [r7, #4]
 810986a:	6039      	str	r1, [r7, #0]
=======
 8108596:	b480      	push	{r7}
 8108598:	b085      	sub	sp, #20
 810859a:	af00      	add	r7, sp, #0
 810859c:	6078      	str	r0, [r7, #4]
 810859e:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
<<<<<<< HEAD
 810986c:	683b      	ldr	r3, [r7, #0]
 810986e:	681b      	ldr	r3, [r3, #0]
 8109870:	60bb      	str	r3, [r7, #8]
=======
 81085a0:	683b      	ldr	r3, [r7, #0]
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8109872:	68bb      	ldr	r3, [r7, #8]
 8109874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109878:	d103      	bne.n	8109882 <vListInsert+0x20>
=======
 81085a6:	68bb      	ldr	r3, [r7, #8]
 81085a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81085ac:	d103      	bne.n	81085b6 <vListInsert+0x20>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		pxIterator = pxList->xListEnd.pxPrevious;
<<<<<<< HEAD
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	691b      	ldr	r3, [r3, #16]
 810987e:	60fb      	str	r3, [r7, #12]
 8109880:	e00c      	b.n	810989c <vListInsert+0x3a>
=======
 81085ae:	687b      	ldr	r3, [r7, #4]
 81085b0:	691b      	ldr	r3, [r3, #16]
 81085b2:	60fb      	str	r3, [r7, #12]
 81085b4:	e00c      	b.n	81085d0 <vListInsert+0x3a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8109882:	687b      	ldr	r3, [r7, #4]
 8109884:	3308      	adds	r3, #8
 8109886:	60fb      	str	r3, [r7, #12]
 8109888:	e002      	b.n	8109890 <vListInsert+0x2e>
 810988a:	68fb      	ldr	r3, [r7, #12]
 810988c:	685b      	ldr	r3, [r3, #4]
 810988e:	60fb      	str	r3, [r7, #12]
 8109890:	68fb      	ldr	r3, [r7, #12]
 8109892:	685b      	ldr	r3, [r3, #4]
 8109894:	681b      	ldr	r3, [r3, #0]
 8109896:	68ba      	ldr	r2, [r7, #8]
 8109898:	429a      	cmp	r2, r3
 810989a:	d2f6      	bcs.n	810988a <vListInsert+0x28>
=======
 81085b6:	687b      	ldr	r3, [r7, #4]
 81085b8:	3308      	adds	r3, #8
 81085ba:	60fb      	str	r3, [r7, #12]
 81085bc:	e002      	b.n	81085c4 <vListInsert+0x2e>
 81085be:	68fb      	ldr	r3, [r7, #12]
 81085c0:	685b      	ldr	r3, [r3, #4]
 81085c2:	60fb      	str	r3, [r7, #12]
 81085c4:	68fb      	ldr	r3, [r7, #12]
 81085c6:	685b      	ldr	r3, [r3, #4]
 81085c8:	681b      	ldr	r3, [r3, #0]
 81085ca:	68ba      	ldr	r2, [r7, #8]
 81085cc:	429a      	cmp	r2, r3
 81085ce:	d2f6      	bcs.n	81085be <vListInsert+0x28>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 810989c:	68fb      	ldr	r3, [r7, #12]
 810989e:	685a      	ldr	r2, [r3, #4]
 81098a0:	683b      	ldr	r3, [r7, #0]
 81098a2:	605a      	str	r2, [r3, #4]
=======
 81085d0:	68fb      	ldr	r3, [r7, #12]
 81085d2:	685a      	ldr	r2, [r3, #4]
 81085d4:	683b      	ldr	r3, [r7, #0]
 81085d6:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
<<<<<<< HEAD
 81098a4:	683b      	ldr	r3, [r7, #0]
 81098a6:	685b      	ldr	r3, [r3, #4]
 81098a8:	683a      	ldr	r2, [r7, #0]
 81098aa:	609a      	str	r2, [r3, #8]
=======
 81085d8:	683b      	ldr	r3, [r7, #0]
 81085da:	685b      	ldr	r3, [r3, #4]
 81085dc:	683a      	ldr	r2, [r7, #0]
 81085de:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxNewListItem->pxPrevious = pxIterator;
<<<<<<< HEAD
 81098ac:	683b      	ldr	r3, [r7, #0]
 81098ae:	68fa      	ldr	r2, [r7, #12]
 81098b0:	609a      	str	r2, [r3, #8]
=======
 81085e0:	683b      	ldr	r3, [r7, #0]
 81085e2:	68fa      	ldr	r2, [r7, #12]
 81085e4:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxIterator->pxNext = pxNewListItem;
<<<<<<< HEAD
 81098b2:	68fb      	ldr	r3, [r7, #12]
 81098b4:	683a      	ldr	r2, [r7, #0]
 81098b6:	605a      	str	r2, [r3, #4]
=======
 81085e6:	68fb      	ldr	r3, [r7, #12]
 81085e8:	683a      	ldr	r2, [r7, #0]
 81085ea:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 81098b8:	683b      	ldr	r3, [r7, #0]
 81098ba:	687a      	ldr	r2, [r7, #4]
 81098bc:	611a      	str	r2, [r3, #16]
=======
 81085ec:	683b      	ldr	r3, [r7, #0]
 81085ee:	687a      	ldr	r2, [r7, #4]
 81085f0:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	( pxList->uxNumberOfItems )++;
<<<<<<< HEAD
 81098be:	687b      	ldr	r3, [r7, #4]
 81098c0:	681b      	ldr	r3, [r3, #0]
 81098c2:	1c5a      	adds	r2, r3, #1
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	601a      	str	r2, [r3, #0]
=======
 81085f2:	687b      	ldr	r3, [r7, #4]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	1c5a      	adds	r2, r3, #1
 81085f8:	687b      	ldr	r3, [r7, #4]
 81085fa:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81098c8:	bf00      	nop
 81098ca:	3714      	adds	r7, #20
 81098cc:	46bd      	mov	sp, r7
 81098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098d2:	4770      	bx	lr
=======
 81085fc:	bf00      	nop
 81085fe:	3714      	adds	r7, #20
 8108600:	46bd      	mov	sp, r7
 8108602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108606:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081098d4 <uxListRemove>:
=======
08108608 <uxListRemove>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 81098d4:	b480      	push	{r7}
 81098d6:	b085      	sub	sp, #20
 81098d8:	af00      	add	r7, sp, #0
 81098da:	6078      	str	r0, [r7, #4]
=======
 8108608:	b480      	push	{r7}
 810860a:	b085      	sub	sp, #20
 810860c:	af00      	add	r7, sp, #0
 810860e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
<<<<<<< HEAD
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	691b      	ldr	r3, [r3, #16]
 81098e0:	60fb      	str	r3, [r7, #12]
=======
 8108610:	687b      	ldr	r3, [r7, #4]
 8108612:	691b      	ldr	r3, [r3, #16]
 8108614:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
<<<<<<< HEAD
 81098e2:	687b      	ldr	r3, [r7, #4]
 81098e4:	685b      	ldr	r3, [r3, #4]
 81098e6:	687a      	ldr	r2, [r7, #4]
 81098e8:	6892      	ldr	r2, [r2, #8]
 81098ea:	609a      	str	r2, [r3, #8]
=======
 8108616:	687b      	ldr	r3, [r7, #4]
 8108618:	685b      	ldr	r3, [r3, #4]
 810861a:	687a      	ldr	r2, [r7, #4]
 810861c:	6892      	ldr	r2, [r2, #8]
 810861e:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
<<<<<<< HEAD
 81098ec:	687b      	ldr	r3, [r7, #4]
 81098ee:	689b      	ldr	r3, [r3, #8]
 81098f0:	687a      	ldr	r2, [r7, #4]
 81098f2:	6852      	ldr	r2, [r2, #4]
 81098f4:	605a      	str	r2, [r3, #4]
=======
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	689b      	ldr	r3, [r3, #8]
 8108624:	687a      	ldr	r2, [r7, #4]
 8108626:	6852      	ldr	r2, [r2, #4]
 8108628:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 81098f6:	68fb      	ldr	r3, [r7, #12]
 81098f8:	685b      	ldr	r3, [r3, #4]
 81098fa:	687a      	ldr	r2, [r7, #4]
 81098fc:	429a      	cmp	r2, r3
 81098fe:	d103      	bne.n	8109908 <uxListRemove+0x34>
=======
 810862a:	68fb      	ldr	r3, [r7, #12]
 810862c:	685b      	ldr	r3, [r3, #4]
 810862e:	687a      	ldr	r2, [r7, #4]
 8108630:	429a      	cmp	r2, r3
 8108632:	d103      	bne.n	810863c <uxListRemove+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
<<<<<<< HEAD
 8109900:	687b      	ldr	r3, [r7, #4]
 8109902:	689a      	ldr	r2, [r3, #8]
 8109904:	68fb      	ldr	r3, [r7, #12]
 8109906:	605a      	str	r2, [r3, #4]
=======
 8108634:	687b      	ldr	r3, [r7, #4]
 8108636:	689a      	ldr	r2, [r3, #8]
 8108638:	68fb      	ldr	r3, [r7, #12]
 810863a:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8109908:	687b      	ldr	r3, [r7, #4]
 810990a:	2200      	movs	r2, #0
 810990c:	611a      	str	r2, [r3, #16]
=======
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	2200      	movs	r2, #0
 8108640:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	( pxList->uxNumberOfItems )--;
<<<<<<< HEAD
 810990e:	68fb      	ldr	r3, [r7, #12]
 8109910:	681b      	ldr	r3, [r3, #0]
 8109912:	1e5a      	subs	r2, r3, #1
 8109914:	68fb      	ldr	r3, [r7, #12]
 8109916:	601a      	str	r2, [r3, #0]
=======
 8108642:	68fb      	ldr	r3, [r7, #12]
 8108644:	681b      	ldr	r3, [r3, #0]
 8108646:	1e5a      	subs	r2, r3, #1
 8108648:	68fb      	ldr	r3, [r7, #12]
 810864a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	return pxList->uxNumberOfItems;
<<<<<<< HEAD
 8109918:	68fb      	ldr	r3, [r7, #12]
 810991a:	681b      	ldr	r3, [r3, #0]
=======
 810864c:	68fb      	ldr	r3, [r7, #12]
 810864e:	681b      	ldr	r3, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810991c:	4618      	mov	r0, r3
 810991e:	3714      	adds	r7, #20
 8109920:	46bd      	mov	sp, r7
 8109922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109926:	4770      	bx	lr
=======
 8108650:	4618      	mov	r0, r3
 8108652:	3714      	adds	r7, #20
 8108654:	46bd      	mov	sp, r7
 8108656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810865a:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109928 <pxPortInitialiseStack>:
=======
0810865c <pxPortInitialiseStack>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 8109928:	b480      	push	{r7}
 810992a:	b085      	sub	sp, #20
 810992c:	af00      	add	r7, sp, #0
 810992e:	60f8      	str	r0, [r7, #12]
 8109930:	60b9      	str	r1, [r7, #8]
 8109932:	607a      	str	r2, [r7, #4]
=======
 810865c:	b480      	push	{r7}
 810865e:	b085      	sub	sp, #20
 8108660:	af00      	add	r7, sp, #0
 8108662:	60f8      	str	r0, [r7, #12]
 8108664:	60b9      	str	r1, [r7, #8]
 8108666:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 8109934:	68fb      	ldr	r3, [r7, #12]
 8109936:	3b04      	subs	r3, #4
 8109938:	60fb      	str	r3, [r7, #12]
=======
 8108668:	68fb      	ldr	r3, [r7, #12]
 810866a:	3b04      	subs	r3, #4
 810866c:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
<<<<<<< HEAD
 810993a:	68fb      	ldr	r3, [r7, #12]
 810993c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8109940:	601a      	str	r2, [r3, #0]
=======
 810866e:	68fb      	ldr	r3, [r7, #12]
 8108670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8108674:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxTopOfStack--;
<<<<<<< HEAD
 8109942:	68fb      	ldr	r3, [r7, #12]
 8109944:	3b04      	subs	r3, #4
 8109946:	60fb      	str	r3, [r7, #12]
=======
 8108676:	68fb      	ldr	r3, [r7, #12]
 8108678:	3b04      	subs	r3, #4
 810867a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
<<<<<<< HEAD
 8109948:	68bb      	ldr	r3, [r7, #8]
 810994a:	f023 0201 	bic.w	r2, r3, #1
 810994e:	68fb      	ldr	r3, [r7, #12]
 8109950:	601a      	str	r2, [r3, #0]
=======
 810867c:	68bb      	ldr	r3, [r7, #8]
 810867e:	f023 0201 	bic.w	r2, r3, #1
 8108682:	68fb      	ldr	r3, [r7, #12]
 8108684:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxTopOfStack--;
<<<<<<< HEAD
 8109952:	68fb      	ldr	r3, [r7, #12]
 8109954:	3b04      	subs	r3, #4
 8109956:	60fb      	str	r3, [r7, #12]
=======
 8108686:	68fb      	ldr	r3, [r7, #12]
 8108688:	3b04      	subs	r3, #4
 810868a:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
<<<<<<< HEAD
 8109958:	4a0c      	ldr	r2, [pc, #48]	; (810998c <pxPortInitialiseStack+0x64>)
 810995a:	68fb      	ldr	r3, [r7, #12]
 810995c:	601a      	str	r2, [r3, #0]
=======
 810868c:	4a0c      	ldr	r2, [pc, #48]	; (81086c0 <pxPortInitialiseStack+0x64>)
 810868e:	68fb      	ldr	r3, [r7, #12]
 8108690:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
<<<<<<< HEAD
 810995e:	68fb      	ldr	r3, [r7, #12]
 8109960:	3b14      	subs	r3, #20
 8109962:	60fb      	str	r3, [r7, #12]
=======
 8108692:	68fb      	ldr	r3, [r7, #12]
 8108694:	3b14      	subs	r3, #20
 8108696:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
<<<<<<< HEAD
 8109964:	687a      	ldr	r2, [r7, #4]
 8109966:	68fb      	ldr	r3, [r7, #12]
 8109968:	601a      	str	r2, [r3, #0]
=======
 8108698:	687a      	ldr	r2, [r7, #4]
 810869a:	68fb      	ldr	r3, [r7, #12]
 810869c:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 810996a:	68fb      	ldr	r3, [r7, #12]
 810996c:	3b04      	subs	r3, #4
 810996e:	60fb      	str	r3, [r7, #12]
=======
 810869e:	68fb      	ldr	r3, [r7, #12]
 81086a0:	3b04      	subs	r3, #4
 81086a2:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	*pxTopOfStack = portINITIAL_EXC_RETURN;
<<<<<<< HEAD
 8109970:	68fb      	ldr	r3, [r7, #12]
 8109972:	f06f 0202 	mvn.w	r2, #2
 8109976:	601a      	str	r2, [r3, #0]
=======
 81086a4:	68fb      	ldr	r3, [r7, #12]
 81086a6:	f06f 0202 	mvn.w	r2, #2
 81086aa:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
<<<<<<< HEAD
 8109978:	68fb      	ldr	r3, [r7, #12]
 810997a:	3b20      	subs	r3, #32
 810997c:	60fb      	str	r3, [r7, #12]
=======
 81086ac:	68fb      	ldr	r3, [r7, #12]
 81086ae:	3b20      	subs	r3, #32
 81086b0:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	return pxTopOfStack;
<<<<<<< HEAD
 810997e:	68fb      	ldr	r3, [r7, #12]
=======
 81086b2:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8109980:	4618      	mov	r0, r3
 8109982:	3714      	adds	r7, #20
 8109984:	46bd      	mov	sp, r7
 8109986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810998a:	4770      	bx	lr
 810998c:	08109991 	.word	0x08109991
=======
 81086b4:	4618      	mov	r0, r3
 81086b6:	3714      	adds	r7, #20
 81086b8:	46bd      	mov	sp, r7
 81086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086be:	4770      	bx	lr
 81086c0:	081086c5 	.word	0x081086c5
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109990 <prvTaskExitError>:
=======
081086c4 <prvTaskExitError>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 8109990:	b480      	push	{r7}
 8109992:	b085      	sub	sp, #20
 8109994:	af00      	add	r7, sp, #0
=======
 81086c4:	b480      	push	{r7}
 81086c6:	b085      	sub	sp, #20
 81086c8:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
volatile uint32_t ulDummy = 0;
<<<<<<< HEAD
 8109996:	2300      	movs	r3, #0
 8109998:	607b      	str	r3, [r7, #4]
=======
 81086ca:	2300      	movs	r3, #0
 81086cc:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 810999a:	4b12      	ldr	r3, [pc, #72]	; (81099e4 <prvTaskExitError+0x54>)
 810999c:	681b      	ldr	r3, [r3, #0]
 810999e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81099a2:	d00a      	beq.n	81099ba <prvTaskExitError+0x2a>
	__asm volatile
 81099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81099a8:	f383 8811 	msr	BASEPRI, r3
 81099ac:	f3bf 8f6f 	isb	sy
 81099b0:	f3bf 8f4f 	dsb	sy
 81099b4:	60fb      	str	r3, [r7, #12]
}
 81099b6:	bf00      	nop
 81099b8:	e7fe      	b.n	81099b8 <prvTaskExitError+0x28>
	__asm volatile
 81099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81099be:	f383 8811 	msr	BASEPRI, r3
 81099c2:	f3bf 8f6f 	isb	sy
 81099c6:	f3bf 8f4f 	dsb	sy
 81099ca:	60bb      	str	r3, [r7, #8]
}
 81099cc:	bf00      	nop
=======
 81086ce:	4b11      	ldr	r3, [pc, #68]	; (8108714 <prvTaskExitError+0x50>)
 81086d0:	681b      	ldr	r3, [r3, #0]
 81086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81086d6:	d009      	beq.n	81086ec <prvTaskExitError+0x28>
 81086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81086dc:	f383 8811 	msr	BASEPRI, r3
 81086e0:	f3bf 8f6f 	isb	sy
 81086e4:	f3bf 8f4f 	dsb	sy
 81086e8:	60fb      	str	r3, [r7, #12]
 81086ea:	e7fe      	b.n	81086ea <prvTaskExitError+0x26>
 81086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81086f0:	f383 8811 	msr	BASEPRI, r3
 81086f4:	f3bf 8f6f 	isb	sy
 81086f8:	f3bf 8f4f 	dsb	sy
 81086fc:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
<<<<<<< HEAD
 81099ce:	bf00      	nop
 81099d0:	687b      	ldr	r3, [r7, #4]
 81099d2:	2b00      	cmp	r3, #0
 81099d4:	d0fc      	beq.n	81099d0 <prvTaskExitError+0x40>
=======
 81086fe:	bf00      	nop
 8108700:	687b      	ldr	r3, [r7, #4]
 8108702:	2b00      	cmp	r3, #0
 8108704:	d0fc      	beq.n	8108700 <prvTaskExitError+0x3c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 81099d6:	bf00      	nop
 81099d8:	bf00      	nop
 81099da:	3714      	adds	r7, #20
 81099dc:	46bd      	mov	sp, r7
 81099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099e2:	4770      	bx	lr
 81099e4:	10000024 	.word	0x10000024
=======
 8108706:	bf00      	nop
 8108708:	3714      	adds	r7, #20
 810870a:	46bd      	mov	sp, r7
 810870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108710:	4770      	bx	lr
 8108712:	bf00      	nop
 8108714:	10000024 	.word	0x10000024
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
081099f0 <SVC_Handler>:
=======
08108720 <SVC_Handler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 81099f0:	4b07      	ldr	r3, [pc, #28]	; (8109a10 <pxCurrentTCBConst2>)
 81099f2:	6819      	ldr	r1, [r3, #0]
 81099f4:	6808      	ldr	r0, [r1, #0]
 81099f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81099fa:	f380 8809 	msr	PSP, r0
 81099fe:	f3bf 8f6f 	isb	sy
 8109a02:	f04f 0000 	mov.w	r0, #0
 8109a06:	f380 8811 	msr	BASEPRI, r0
 8109a0a:	4770      	bx	lr
 8109a0c:	f3af 8000 	nop.w
=======
 8108720:	4b07      	ldr	r3, [pc, #28]	; (8108740 <pxCurrentTCBConst2>)
 8108722:	6819      	ldr	r1, [r3, #0]
 8108724:	6808      	ldr	r0, [r1, #0]
 8108726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810872a:	f380 8809 	msr	PSP, r0
 810872e:	f3bf 8f6f 	isb	sy
 8108732:	f04f 0000 	mov.w	r0, #0
 8108736:	f380 8811 	msr	BASEPRI, r0
 810873a:	4770      	bx	lr
 810873c:	f3af 8000 	nop.w
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109a10 <pxCurrentTCBConst2>:
 8109a10:	100404b4 	.word	0x100404b4
=======
08108740 <pxCurrentTCBConst2>:
 8108740:	100040a4 	.word	0x100040a4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 8109a14:	bf00      	nop
 8109a16:	bf00      	nop
=======
 8108744:	bf00      	nop
 8108746:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109a18 <prvPortStartFirstTask>:
=======
08108748 <prvPortStartFirstTask>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 8109a18:	4808      	ldr	r0, [pc, #32]	; (8109a3c <prvPortStartFirstTask+0x24>)
 8109a1a:	6800      	ldr	r0, [r0, #0]
 8109a1c:	6800      	ldr	r0, [r0, #0]
 8109a1e:	f380 8808 	msr	MSP, r0
 8109a22:	f04f 0000 	mov.w	r0, #0
 8109a26:	f380 8814 	msr	CONTROL, r0
 8109a2a:	b662      	cpsie	i
 8109a2c:	b661      	cpsie	f
 8109a2e:	f3bf 8f4f 	dsb	sy
 8109a32:	f3bf 8f6f 	isb	sy
 8109a36:	df00      	svc	0
 8109a38:	bf00      	nop
=======
 8108748:	4808      	ldr	r0, [pc, #32]	; (810876c <prvPortStartFirstTask+0x24>)
 810874a:	6800      	ldr	r0, [r0, #0]
 810874c:	6800      	ldr	r0, [r0, #0]
 810874e:	f380 8808 	msr	MSP, r0
 8108752:	f04f 0000 	mov.w	r0, #0
 8108756:	f380 8814 	msr	CONTROL, r0
 810875a:	b662      	cpsie	i
 810875c:	b661      	cpsie	f
 810875e:	f3bf 8f4f 	dsb	sy
 8108762:	f3bf 8f6f 	isb	sy
 8108766:	df00      	svc	0
 8108768:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 8109a3a:	bf00      	nop
 8109a3c:	e000ed08 	.word	0xe000ed08
=======
 810876a:	bf00      	nop
 810876c:	e000ed08 	.word	0xe000ed08
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109a40 <xPortStartScheduler>:
=======
08108770 <xPortStartScheduler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 8109a40:	b580      	push	{r7, lr}
 8109a42:	b086      	sub	sp, #24
 8109a44:	af00      	add	r7, sp, #0
=======
 8108770:	b580      	push	{r7, lr}
 8108772:	b086      	sub	sp, #24
 8108774:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 8109a46:	4b46      	ldr	r3, [pc, #280]	; (8109b60 <xPortStartScheduler+0x120>)
 8109a48:	681b      	ldr	r3, [r3, #0]
 8109a4a:	4a46      	ldr	r2, [pc, #280]	; (8109b64 <xPortStartScheduler+0x124>)
 8109a4c:	4293      	cmp	r3, r2
 8109a4e:	d10a      	bne.n	8109a66 <xPortStartScheduler+0x26>
	__asm volatile
 8109a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a54:	f383 8811 	msr	BASEPRI, r3
 8109a58:	f3bf 8f6f 	isb	sy
 8109a5c:	f3bf 8f4f 	dsb	sy
 8109a60:	613b      	str	r3, [r7, #16]
}
 8109a62:	bf00      	nop
 8109a64:	e7fe      	b.n	8109a64 <xPortStartScheduler+0x24>
=======
 8108776:	4b44      	ldr	r3, [pc, #272]	; (8108888 <xPortStartScheduler+0x118>)
 8108778:	681b      	ldr	r3, [r3, #0]
 810877a:	4a44      	ldr	r2, [pc, #272]	; (810888c <xPortStartScheduler+0x11c>)
 810877c:	4293      	cmp	r3, r2
 810877e:	d109      	bne.n	8108794 <xPortStartScheduler+0x24>
 8108780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108784:	f383 8811 	msr	BASEPRI, r3
 8108788:	f3bf 8f6f 	isb	sy
 810878c:	f3bf 8f4f 	dsb	sy
 8108790:	613b      	str	r3, [r7, #16]
 8108792:	e7fe      	b.n	8108792 <xPortStartScheduler+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
<<<<<<< HEAD
 8109a66:	4b3e      	ldr	r3, [pc, #248]	; (8109b60 <xPortStartScheduler+0x120>)
 8109a68:	681b      	ldr	r3, [r3, #0]
 8109a6a:	4a3f      	ldr	r2, [pc, #252]	; (8109b68 <xPortStartScheduler+0x128>)
 8109a6c:	4293      	cmp	r3, r2
 8109a6e:	d10a      	bne.n	8109a86 <xPortStartScheduler+0x46>
	__asm volatile
 8109a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a74:	f383 8811 	msr	BASEPRI, r3
 8109a78:	f3bf 8f6f 	isb	sy
 8109a7c:	f3bf 8f4f 	dsb	sy
 8109a80:	60fb      	str	r3, [r7, #12]
}
 8109a82:	bf00      	nop
 8109a84:	e7fe      	b.n	8109a84 <xPortStartScheduler+0x44>
=======
 8108794:	4b3c      	ldr	r3, [pc, #240]	; (8108888 <xPortStartScheduler+0x118>)
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	4a3d      	ldr	r2, [pc, #244]	; (8108890 <xPortStartScheduler+0x120>)
 810879a:	4293      	cmp	r3, r2
 810879c:	d109      	bne.n	81087b2 <xPortStartScheduler+0x42>
 810879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81087a2:	f383 8811 	msr	BASEPRI, r3
 81087a6:	f3bf 8f6f 	isb	sy
 81087aa:	f3bf 8f4f 	dsb	sy
 81087ae:	60fb      	str	r3, [r7, #12]
 81087b0:	e7fe      	b.n	81087b0 <xPortStartScheduler+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 8109a86:	4b39      	ldr	r3, [pc, #228]	; (8109b6c <xPortStartScheduler+0x12c>)
 8109a88:	617b      	str	r3, [r7, #20]
=======
 81087b2:	4b38      	ldr	r3, [pc, #224]	; (8108894 <xPortStartScheduler+0x124>)
 81087b4:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 8109a8a:	697b      	ldr	r3, [r7, #20]
 8109a8c:	781b      	ldrb	r3, [r3, #0]
 8109a8e:	b2db      	uxtb	r3, r3
 8109a90:	607b      	str	r3, [r7, #4]
=======
 81087b6:	697b      	ldr	r3, [r7, #20]
 81087b8:	781b      	ldrb	r3, [r3, #0]
 81087ba:	b2db      	uxtb	r3, r3
 81087bc:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 8109a92:	697b      	ldr	r3, [r7, #20]
 8109a94:	22ff      	movs	r2, #255	; 0xff
 8109a96:	701a      	strb	r2, [r3, #0]
=======
 81087be:	697b      	ldr	r3, [r7, #20]
 81087c0:	22ff      	movs	r2, #255	; 0xff
 81087c2:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 8109a98:	697b      	ldr	r3, [r7, #20]
 8109a9a:	781b      	ldrb	r3, [r3, #0]
 8109a9c:	b2db      	uxtb	r3, r3
 8109a9e:	70fb      	strb	r3, [r7, #3]
=======
 81087c4:	697b      	ldr	r3, [r7, #20]
 81087c6:	781b      	ldrb	r3, [r3, #0]
 81087c8:	b2db      	uxtb	r3, r3
 81087ca:	70fb      	strb	r3, [r7, #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
<<<<<<< HEAD
 8109aa0:	78fb      	ldrb	r3, [r7, #3]
 8109aa2:	b2db      	uxtb	r3, r3
 8109aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8109aa8:	b2da      	uxtb	r2, r3
 8109aaa:	4b31      	ldr	r3, [pc, #196]	; (8109b70 <xPortStartScheduler+0x130>)
 8109aac:	701a      	strb	r2, [r3, #0]
=======
 81087cc:	78fb      	ldrb	r3, [r7, #3]
 81087ce:	b2db      	uxtb	r3, r3
 81087d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81087d4:	b2da      	uxtb	r2, r3
 81087d6:	4b30      	ldr	r3, [pc, #192]	; (8108898 <xPortStartScheduler+0x128>)
 81087d8:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 8109aae:	4b31      	ldr	r3, [pc, #196]	; (8109b74 <xPortStartScheduler+0x134>)
 8109ab0:	2207      	movs	r2, #7
 8109ab2:	601a      	str	r2, [r3, #0]
=======
 81087da:	4b30      	ldr	r3, [pc, #192]	; (810889c <xPortStartScheduler+0x12c>)
 81087dc:	2207      	movs	r2, #7
 81087de:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
<<<<<<< HEAD
 8109ab4:	e009      	b.n	8109aca <xPortStartScheduler+0x8a>
=======
 81087e0:	e009      	b.n	81087f6 <xPortStartScheduler+0x86>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			ulMaxPRIGROUPValue--;
<<<<<<< HEAD
 8109ab6:	4b2f      	ldr	r3, [pc, #188]	; (8109b74 <xPortStartScheduler+0x134>)
 8109ab8:	681b      	ldr	r3, [r3, #0]
 8109aba:	3b01      	subs	r3, #1
 8109abc:	4a2d      	ldr	r2, [pc, #180]	; (8109b74 <xPortStartScheduler+0x134>)
 8109abe:	6013      	str	r3, [r2, #0]
=======
 81087e2:	4b2e      	ldr	r3, [pc, #184]	; (810889c <xPortStartScheduler+0x12c>)
 81087e4:	681b      	ldr	r3, [r3, #0]
 81087e6:	3b01      	subs	r3, #1
 81087e8:	4a2c      	ldr	r2, [pc, #176]	; (810889c <xPortStartScheduler+0x12c>)
 81087ea:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
<<<<<<< HEAD
 8109ac0:	78fb      	ldrb	r3, [r7, #3]
 8109ac2:	b2db      	uxtb	r3, r3
 8109ac4:	005b      	lsls	r3, r3, #1
 8109ac6:	b2db      	uxtb	r3, r3
 8109ac8:	70fb      	strb	r3, [r7, #3]
=======
 81087ec:	78fb      	ldrb	r3, [r7, #3]
 81087ee:	b2db      	uxtb	r3, r3
 81087f0:	005b      	lsls	r3, r3, #1
 81087f2:	b2db      	uxtb	r3, r3
 81087f4:	70fb      	strb	r3, [r7, #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
<<<<<<< HEAD
 8109aca:	78fb      	ldrb	r3, [r7, #3]
 8109acc:	b2db      	uxtb	r3, r3
 8109ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109ad2:	2b80      	cmp	r3, #128	; 0x80
 8109ad4:	d0ef      	beq.n	8109ab6 <xPortStartScheduler+0x76>
=======
 81087f6:	78fb      	ldrb	r3, [r7, #3]
 81087f8:	b2db      	uxtb	r3, r3
 81087fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81087fe:	2b80      	cmp	r3, #128	; 0x80
 8108800:	d0ef      	beq.n	81087e2 <xPortStartScheduler+0x72>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 8109ad6:	4b27      	ldr	r3, [pc, #156]	; (8109b74 <xPortStartScheduler+0x134>)
 8109ad8:	681b      	ldr	r3, [r3, #0]
 8109ada:	f1c3 0307 	rsb	r3, r3, #7
 8109ade:	2b04      	cmp	r3, #4
 8109ae0:	d00a      	beq.n	8109af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8109ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ae6:	f383 8811 	msr	BASEPRI, r3
 8109aea:	f3bf 8f6f 	isb	sy
 8109aee:	f3bf 8f4f 	dsb	sy
 8109af2:	60bb      	str	r3, [r7, #8]
}
 8109af4:	bf00      	nop
 8109af6:	e7fe      	b.n	8109af6 <xPortStartScheduler+0xb6>
=======
 8108802:	4b26      	ldr	r3, [pc, #152]	; (810889c <xPortStartScheduler+0x12c>)
 8108804:	681b      	ldr	r3, [r3, #0]
 8108806:	f1c3 0307 	rsb	r3, r3, #7
 810880a:	2b04      	cmp	r3, #4
 810880c:	d009      	beq.n	8108822 <xPortStartScheduler+0xb2>
 810880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108812:	f383 8811 	msr	BASEPRI, r3
 8108816:	f3bf 8f6f 	isb	sy
 810881a:	f3bf 8f4f 	dsb	sy
 810881e:	60bb      	str	r3, [r7, #8]
 8108820:	e7fe      	b.n	8108820 <xPortStartScheduler+0xb0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 8109af8:	4b1e      	ldr	r3, [pc, #120]	; (8109b74 <xPortStartScheduler+0x134>)
 8109afa:	681b      	ldr	r3, [r3, #0]
 8109afc:	021b      	lsls	r3, r3, #8
 8109afe:	4a1d      	ldr	r2, [pc, #116]	; (8109b74 <xPortStartScheduler+0x134>)
 8109b00:	6013      	str	r3, [r2, #0]
=======
 8108822:	4b1e      	ldr	r3, [pc, #120]	; (810889c <xPortStartScheduler+0x12c>)
 8108824:	681b      	ldr	r3, [r3, #0]
 8108826:	021b      	lsls	r3, r3, #8
 8108828:	4a1c      	ldr	r2, [pc, #112]	; (810889c <xPortStartScheduler+0x12c>)
 810882a:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
<<<<<<< HEAD
 8109b02:	4b1c      	ldr	r3, [pc, #112]	; (8109b74 <xPortStartScheduler+0x134>)
 8109b04:	681b      	ldr	r3, [r3, #0]
 8109b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109b0a:	4a1a      	ldr	r2, [pc, #104]	; (8109b74 <xPortStartScheduler+0x134>)
 8109b0c:	6013      	str	r3, [r2, #0]
=======
 810882c:	4b1b      	ldr	r3, [pc, #108]	; (810889c <xPortStartScheduler+0x12c>)
 810882e:	681b      	ldr	r3, [r3, #0]
 8108830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108834:	4a19      	ldr	r2, [pc, #100]	; (810889c <xPortStartScheduler+0x12c>)
 8108836:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 8109b0e:	687b      	ldr	r3, [r7, #4]
 8109b10:	b2da      	uxtb	r2, r3
 8109b12:	697b      	ldr	r3, [r7, #20]
 8109b14:	701a      	strb	r2, [r3, #0]
=======
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	b2da      	uxtb	r2, r3
 810883c:	697b      	ldr	r3, [r7, #20]
 810883e:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 8109b16:	4b18      	ldr	r3, [pc, #96]	; (8109b78 <xPortStartScheduler+0x138>)
 8109b18:	681b      	ldr	r3, [r3, #0]
 8109b1a:	4a17      	ldr	r2, [pc, #92]	; (8109b78 <xPortStartScheduler+0x138>)
 8109b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8109b20:	6013      	str	r3, [r2, #0]
=======
 8108840:	4b17      	ldr	r3, [pc, #92]	; (81088a0 <xPortStartScheduler+0x130>)
 8108842:	681b      	ldr	r3, [r3, #0]
 8108844:	4a16      	ldr	r2, [pc, #88]	; (81088a0 <xPortStartScheduler+0x130>)
 8108846:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810884a:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
<<<<<<< HEAD
 8109b22:	4b15      	ldr	r3, [pc, #84]	; (8109b78 <xPortStartScheduler+0x138>)
 8109b24:	681b      	ldr	r3, [r3, #0]
 8109b26:	4a14      	ldr	r2, [pc, #80]	; (8109b78 <xPortStartScheduler+0x138>)
 8109b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8109b2c:	6013      	str	r3, [r2, #0]
=======
 810884c:	4b14      	ldr	r3, [pc, #80]	; (81088a0 <xPortStartScheduler+0x130>)
 810884e:	681b      	ldr	r3, [r3, #0]
 8108850:	4a13      	ldr	r2, [pc, #76]	; (81088a0 <xPortStartScheduler+0x130>)
 8108852:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8108856:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 8109b2e:	f000 f8dd 	bl	8109cec <vPortSetupTimerInterrupt>
=======
 8108858:	f000 f8d6 	bl	8108a08 <vPortSetupTimerInterrupt>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
<<<<<<< HEAD
 8109b32:	4b12      	ldr	r3, [pc, #72]	; (8109b7c <xPortStartScheduler+0x13c>)
 8109b34:	2200      	movs	r2, #0
 8109b36:	601a      	str	r2, [r3, #0]
=======
 810885c:	4b11      	ldr	r3, [pc, #68]	; (81088a4 <xPortStartScheduler+0x134>)
 810885e:	2200      	movs	r2, #0
 8108860:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
<<<<<<< HEAD
 8109b38:	f000 f8fc 	bl	8109d34 <vPortEnableVFP>
=======
 8108862:	f000 f8f5 	bl	8108a50 <vPortEnableVFP>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
<<<<<<< HEAD
 8109b3c:	4b10      	ldr	r3, [pc, #64]	; (8109b80 <xPortStartScheduler+0x140>)
 8109b3e:	681b      	ldr	r3, [r3, #0]
 8109b40:	4a0f      	ldr	r2, [pc, #60]	; (8109b80 <xPortStartScheduler+0x140>)
 8109b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8109b46:	6013      	str	r3, [r2, #0]
=======
 8108866:	4b10      	ldr	r3, [pc, #64]	; (81088a8 <xPortStartScheduler+0x138>)
 8108868:	681b      	ldr	r3, [r3, #0]
 810886a:	4a0f      	ldr	r2, [pc, #60]	; (81088a8 <xPortStartScheduler+0x138>)
 810886c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8108870:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Start the first task. */
	prvPortStartFirstTask();
<<<<<<< HEAD
 8109b48:	f7ff ff66 	bl	8109a18 <prvPortStartFirstTask>
=======
 8108872:	f7ff ff69 	bl	8108748 <prvPortStartFirstTask>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 8109b4c:	f001 f994 	bl	810ae78 <vTaskSwitchContext>
=======
 8108876:	f001 f8e9 	bl	8109a4c <vTaskSwitchContext>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	prvTaskExitError();
<<<<<<< HEAD
 8109b50:	f7ff ff1e 	bl	8109990 <prvTaskExitError>
=======
 810887a:	f7ff ff23 	bl	81086c4 <prvTaskExitError>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Should not get here! */
	return 0;
<<<<<<< HEAD
 8109b54:	2300      	movs	r3, #0
=======
 810887e:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8109b56:	4618      	mov	r0, r3
 8109b58:	3718      	adds	r7, #24
 8109b5a:	46bd      	mov	sp, r7
 8109b5c:	bd80      	pop	{r7, pc}
 8109b5e:	bf00      	nop
 8109b60:	e000ed00 	.word	0xe000ed00
 8109b64:	410fc271 	.word	0x410fc271
 8109b68:	410fc270 	.word	0x410fc270
 8109b6c:	e000e400 	.word	0xe000e400
 8109b70:	100404ac 	.word	0x100404ac
 8109b74:	100404b0 	.word	0x100404b0
 8109b78:	e000ed20 	.word	0xe000ed20
 8109b7c:	10000024 	.word	0x10000024
 8109b80:	e000ef34 	.word	0xe000ef34
=======
 8108880:	4618      	mov	r0, r3
 8108882:	3718      	adds	r7, #24
 8108884:	46bd      	mov	sp, r7
 8108886:	bd80      	pop	{r7, pc}
 8108888:	e000ed00 	.word	0xe000ed00
 810888c:	410fc271 	.word	0x410fc271
 8108890:	410fc270 	.word	0x410fc270
 8108894:	e000e400 	.word	0xe000e400
 8108898:	1000409c 	.word	0x1000409c
 810889c:	100040a0 	.word	0x100040a0
 81088a0:	e000ed20 	.word	0xe000ed20
 81088a4:	10000024 	.word	0x10000024
 81088a8:	e000ef34 	.word	0xe000ef34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109b84 <vPortEnterCritical>:
=======
081088ac <vPortEnterCritical>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 8109b84:	b480      	push	{r7}
 8109b86:	b083      	sub	sp, #12
 8109b88:	af00      	add	r7, sp, #0
	__asm volatile
 8109b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b8e:	f383 8811 	msr	BASEPRI, r3
 8109b92:	f3bf 8f6f 	isb	sy
 8109b96:	f3bf 8f4f 	dsb	sy
 8109b9a:	607b      	str	r3, [r7, #4]
}
 8109b9c:	bf00      	nop
=======
 81088ac:	b480      	push	{r7}
 81088ae:	b083      	sub	sp, #12
 81088b0:	af00      	add	r7, sp, #0
 81088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81088b6:	f383 8811 	msr	BASEPRI, r3
 81088ba:	f3bf 8f6f 	isb	sy
 81088be:	f3bf 8f4f 	dsb	sy
 81088c2:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
<<<<<<< HEAD
 8109b9e:	4b0f      	ldr	r3, [pc, #60]	; (8109bdc <vPortEnterCritical+0x58>)
 8109ba0:	681b      	ldr	r3, [r3, #0]
 8109ba2:	3301      	adds	r3, #1
 8109ba4:	4a0d      	ldr	r2, [pc, #52]	; (8109bdc <vPortEnterCritical+0x58>)
 8109ba6:	6013      	str	r3, [r2, #0]
=======
 81088c4:	4b0e      	ldr	r3, [pc, #56]	; (8108900 <vPortEnterCritical+0x54>)
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	3301      	adds	r3, #1
 81088ca:	4a0d      	ldr	r2, [pc, #52]	; (8108900 <vPortEnterCritical+0x54>)
 81088cc:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 8109ba8:	4b0c      	ldr	r3, [pc, #48]	; (8109bdc <vPortEnterCritical+0x58>)
 8109baa:	681b      	ldr	r3, [r3, #0]
 8109bac:	2b01      	cmp	r3, #1
 8109bae:	d10f      	bne.n	8109bd0 <vPortEnterCritical+0x4c>
=======
 81088ce:	4b0c      	ldr	r3, [pc, #48]	; (8108900 <vPortEnterCritical+0x54>)
 81088d0:	681b      	ldr	r3, [r3, #0]
 81088d2:	2b01      	cmp	r3, #1
 81088d4:	d10e      	bne.n	81088f4 <vPortEnterCritical+0x48>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
<<<<<<< HEAD
 8109bb0:	4b0b      	ldr	r3, [pc, #44]	; (8109be0 <vPortEnterCritical+0x5c>)
 8109bb2:	681b      	ldr	r3, [r3, #0]
 8109bb4:	b2db      	uxtb	r3, r3
 8109bb6:	2b00      	cmp	r3, #0
 8109bb8:	d00a      	beq.n	8109bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8109bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109bbe:	f383 8811 	msr	BASEPRI, r3
 8109bc2:	f3bf 8f6f 	isb	sy
 8109bc6:	f3bf 8f4f 	dsb	sy
 8109bca:	603b      	str	r3, [r7, #0]
}
 8109bcc:	bf00      	nop
 8109bce:	e7fe      	b.n	8109bce <vPortEnterCritical+0x4a>
=======
 81088d6:	4b0b      	ldr	r3, [pc, #44]	; (8108904 <vPortEnterCritical+0x58>)
 81088d8:	681b      	ldr	r3, [r3, #0]
 81088da:	b2db      	uxtb	r3, r3
 81088dc:	2b00      	cmp	r3, #0
 81088de:	d009      	beq.n	81088f4 <vPortEnterCritical+0x48>
 81088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81088e4:	f383 8811 	msr	BASEPRI, r3
 81088e8:	f3bf 8f6f 	isb	sy
 81088ec:	f3bf 8f4f 	dsb	sy
 81088f0:	603b      	str	r3, [r7, #0]
 81088f2:	e7fe      	b.n	81088f2 <vPortEnterCritical+0x46>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
}
<<<<<<< HEAD
 8109bd0:	bf00      	nop
 8109bd2:	370c      	adds	r7, #12
 8109bd4:	46bd      	mov	sp, r7
 8109bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bda:	4770      	bx	lr
 8109bdc:	10000024 	.word	0x10000024
 8109be0:	e000ed04 	.word	0xe000ed04
=======
 81088f4:	bf00      	nop
 81088f6:	370c      	adds	r7, #12
 81088f8:	46bd      	mov	sp, r7
 81088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088fe:	4770      	bx	lr
 8108900:	10000024 	.word	0x10000024
 8108904:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109be4 <vPortExitCritical>:
=======
08108908 <vPortExitCritical>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 8109be4:	b480      	push	{r7}
 8109be6:	b083      	sub	sp, #12
 8109be8:	af00      	add	r7, sp, #0
=======
 8108908:	b480      	push	{r7}
 810890a:	b083      	sub	sp, #12
 810890c:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( uxCriticalNesting );
<<<<<<< HEAD
 8109bea:	4b12      	ldr	r3, [pc, #72]	; (8109c34 <vPortExitCritical+0x50>)
 8109bec:	681b      	ldr	r3, [r3, #0]
 8109bee:	2b00      	cmp	r3, #0
 8109bf0:	d10a      	bne.n	8109c08 <vPortExitCritical+0x24>
	__asm volatile
 8109bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109bf6:	f383 8811 	msr	BASEPRI, r3
 8109bfa:	f3bf 8f6f 	isb	sy
 8109bfe:	f3bf 8f4f 	dsb	sy
 8109c02:	607b      	str	r3, [r7, #4]
}
 8109c04:	bf00      	nop
 8109c06:	e7fe      	b.n	8109c06 <vPortExitCritical+0x22>
=======
 810890e:	4b11      	ldr	r3, [pc, #68]	; (8108954 <vPortExitCritical+0x4c>)
 8108910:	681b      	ldr	r3, [r3, #0]
 8108912:	2b00      	cmp	r3, #0
 8108914:	d109      	bne.n	810892a <vPortExitCritical+0x22>
 8108916:	f04f 0350 	mov.w	r3, #80	; 0x50
 810891a:	f383 8811 	msr	BASEPRI, r3
 810891e:	f3bf 8f6f 	isb	sy
 8108922:	f3bf 8f4f 	dsb	sy
 8108926:	607b      	str	r3, [r7, #4]
 8108928:	e7fe      	b.n	8108928 <vPortExitCritical+0x20>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uxCriticalNesting--;
<<<<<<< HEAD
 8109c08:	4b0a      	ldr	r3, [pc, #40]	; (8109c34 <vPortExitCritical+0x50>)
 8109c0a:	681b      	ldr	r3, [r3, #0]
 8109c0c:	3b01      	subs	r3, #1
 8109c0e:	4a09      	ldr	r2, [pc, #36]	; (8109c34 <vPortExitCritical+0x50>)
 8109c10:	6013      	str	r3, [r2, #0]
=======
 810892a:	4b0a      	ldr	r3, [pc, #40]	; (8108954 <vPortExitCritical+0x4c>)
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	3b01      	subs	r3, #1
 8108930:	4a08      	ldr	r2, [pc, #32]	; (8108954 <vPortExitCritical+0x4c>)
 8108932:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if( uxCriticalNesting == 0 )
<<<<<<< HEAD
 8109c12:	4b08      	ldr	r3, [pc, #32]	; (8109c34 <vPortExitCritical+0x50>)
 8109c14:	681b      	ldr	r3, [r3, #0]
 8109c16:	2b00      	cmp	r3, #0
 8109c18:	d105      	bne.n	8109c26 <vPortExitCritical+0x42>
 8109c1a:	2300      	movs	r3, #0
 8109c1c:	603b      	str	r3, [r7, #0]
=======
 8108934:	4b07      	ldr	r3, [pc, #28]	; (8108954 <vPortExitCritical+0x4c>)
 8108936:	681b      	ldr	r3, [r3, #0]
 8108938:	2b00      	cmp	r3, #0
 810893a:	d104      	bne.n	8108946 <vPortExitCritical+0x3e>
 810893c:	2300      	movs	r3, #0
 810893e:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 8109c1e:	683b      	ldr	r3, [r7, #0]
 8109c20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8109c24:	bf00      	nop
=======
 8108940:	683b      	ldr	r3, [r7, #0]
 8108942:	f383 8811 	msr	BASEPRI, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 8109c26:	bf00      	nop
 8109c28:	370c      	adds	r7, #12
 8109c2a:	46bd      	mov	sp, r7
 8109c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c30:	4770      	bx	lr
 8109c32:	bf00      	nop
 8109c34:	10000024 	.word	0x10000024
=======
 8108946:	bf00      	nop
 8108948:	370c      	adds	r7, #12
 810894a:	46bd      	mov	sp, r7
 810894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108950:	4770      	bx	lr
 8108952:	bf00      	nop
 8108954:	10000024 	.word	0x10000024
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08109c40 <PendSV_Handler>:
=======
08108960 <PendSV_Handler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 8109c40:	f3ef 8009 	mrs	r0, PSP
 8109c44:	f3bf 8f6f 	isb	sy
 8109c48:	4b15      	ldr	r3, [pc, #84]	; (8109ca0 <pxCurrentTCBConst>)
 8109c4a:	681a      	ldr	r2, [r3, #0]
 8109c4c:	f01e 0f10 	tst.w	lr, #16
 8109c50:	bf08      	it	eq
 8109c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8109c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109c5a:	6010      	str	r0, [r2, #0]
 8109c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8109c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8109c64:	f380 8811 	msr	BASEPRI, r0
 8109c68:	f3bf 8f4f 	dsb	sy
 8109c6c:	f3bf 8f6f 	isb	sy
 8109c70:	f001 f902 	bl	810ae78 <vTaskSwitchContext>
 8109c74:	f04f 0000 	mov.w	r0, #0
 8109c78:	f380 8811 	msr	BASEPRI, r0
 8109c7c:	bc09      	pop	{r0, r3}
 8109c7e:	6819      	ldr	r1, [r3, #0]
 8109c80:	6808      	ldr	r0, [r1, #0]
 8109c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109c86:	f01e 0f10 	tst.w	lr, #16
 8109c8a:	bf08      	it	eq
 8109c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109c90:	f380 8809 	msr	PSP, r0
 8109c94:	f3bf 8f6f 	isb	sy
 8109c98:	4770      	bx	lr
 8109c9a:	bf00      	nop
 8109c9c:	f3af 8000 	nop.w
=======
 8108960:	f3ef 8009 	mrs	r0, PSP
 8108964:	f3bf 8f6f 	isb	sy
 8108968:	4b15      	ldr	r3, [pc, #84]	; (81089c0 <pxCurrentTCBConst>)
 810896a:	681a      	ldr	r2, [r3, #0]
 810896c:	f01e 0f10 	tst.w	lr, #16
 8108970:	bf08      	it	eq
 8108972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8108976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810897a:	6010      	str	r0, [r2, #0]
 810897c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8108980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8108984:	f380 8811 	msr	BASEPRI, r0
 8108988:	f3bf 8f4f 	dsb	sy
 810898c:	f3bf 8f6f 	isb	sy
 8108990:	f001 f85c 	bl	8109a4c <vTaskSwitchContext>
 8108994:	f04f 0000 	mov.w	r0, #0
 8108998:	f380 8811 	msr	BASEPRI, r0
 810899c:	bc09      	pop	{r0, r3}
 810899e:	6819      	ldr	r1, [r3, #0]
 81089a0:	6808      	ldr	r0, [r1, #0]
 81089a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81089a6:	f01e 0f10 	tst.w	lr, #16
 81089aa:	bf08      	it	eq
 81089ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81089b0:	f380 8809 	msr	PSP, r0
 81089b4:	f3bf 8f6f 	isb	sy
 81089b8:	4770      	bx	lr
 81089ba:	bf00      	nop
 81089bc:	f3af 8000 	nop.w
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109ca0 <pxCurrentTCBConst>:
 8109ca0:	100404b4 	.word	0x100404b4
=======
081089c0 <pxCurrentTCBConst>:
 81089c0:	100040a4 	.word	0x100040a4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 8109ca4:	bf00      	nop
 8109ca6:	bf00      	nop
=======
 81089c4:	bf00      	nop
 81089c6:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109ca8 <SysTick_Handler>:
=======
081089c8 <SysTick_Handler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 8109ca8:	b580      	push	{r7, lr}
 8109caa:	b082      	sub	sp, #8
 8109cac:	af00      	add	r7, sp, #0
=======
 81089c8:	b580      	push	{r7, lr}
 81089ca:	b082      	sub	sp, #8
 81089cc:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	__asm volatile
<<<<<<< HEAD
 8109cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109cb2:	f383 8811 	msr	BASEPRI, r3
 8109cb6:	f3bf 8f6f 	isb	sy
 8109cba:	f3bf 8f4f 	dsb	sy
 8109cbe:	607b      	str	r3, [r7, #4]
}
 8109cc0:	bf00      	nop
=======
 81089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 81089d2:	f383 8811 	msr	BASEPRI, r3
 81089d6:	f3bf 8f6f 	isb	sy
 81089da:	f3bf 8f4f 	dsb	sy
 81089de:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8109cc2:	f001 f821 	bl	810ad08 <xTaskIncrementTick>
 8109cc6:	4603      	mov	r3, r0
 8109cc8:	2b00      	cmp	r3, #0
 8109cca:	d003      	beq.n	8109cd4 <SysTick_Handler+0x2c>
=======
 81089e0:	f000 ff7c 	bl	81098dc <xTaskIncrementTick>
 81089e4:	4603      	mov	r3, r0
 81089e6:	2b00      	cmp	r3, #0
 81089e8:	d003      	beq.n	81089f2 <SysTick_Handler+0x2a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 8109ccc:	4b06      	ldr	r3, [pc, #24]	; (8109ce8 <SysTick_Handler+0x40>)
 8109cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109cd2:	601a      	str	r2, [r3, #0]
 8109cd4:	2300      	movs	r3, #0
 8109cd6:	603b      	str	r3, [r7, #0]
=======
 81089ea:	4b06      	ldr	r3, [pc, #24]	; (8108a04 <SysTick_Handler+0x3c>)
 81089ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81089f0:	601a      	str	r2, [r3, #0]
 81089f2:	2300      	movs	r3, #0
 81089f4:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	__asm volatile
<<<<<<< HEAD
 8109cd8:	683b      	ldr	r3, [r7, #0]
 8109cda:	f383 8811 	msr	BASEPRI, r3
}
 8109cde:	bf00      	nop
=======
 81089f6:	683b      	ldr	r3, [r7, #0]
 81089f8:	f383 8811 	msr	BASEPRI, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 8109ce0:	bf00      	nop
 8109ce2:	3708      	adds	r7, #8
 8109ce4:	46bd      	mov	sp, r7
 8109ce6:	bd80      	pop	{r7, pc}
 8109ce8:	e000ed04 	.word	0xe000ed04
=======
 81089fc:	bf00      	nop
 81089fe:	3708      	adds	r7, #8
 8108a00:	46bd      	mov	sp, r7
 8108a02:	bd80      	pop	{r7, pc}
 8108a04:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109cec <vPortSetupTimerInterrupt>:
=======
08108a08 <vPortSetupTimerInterrupt>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 8109cec:	b480      	push	{r7}
 8109cee:	af00      	add	r7, sp, #0
=======
 8108a08:	b480      	push	{r7}
 8108a0a:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 8109cf0:	4b0b      	ldr	r3, [pc, #44]	; (8109d20 <vPortSetupTimerInterrupt+0x34>)
 8109cf2:	2200      	movs	r2, #0
 8109cf4:	601a      	str	r2, [r3, #0]
=======
 8108a0c:	4b0b      	ldr	r3, [pc, #44]	; (8108a3c <vPortSetupTimerInterrupt+0x34>)
 8108a0e:	2200      	movs	r2, #0
 8108a10:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
<<<<<<< HEAD
 8109cf6:	4b0b      	ldr	r3, [pc, #44]	; (8109d24 <vPortSetupTimerInterrupt+0x38>)
 8109cf8:	2200      	movs	r2, #0
 8109cfa:	601a      	str	r2, [r3, #0]
=======
 8108a12:	4b0b      	ldr	r3, [pc, #44]	; (8108a40 <vPortSetupTimerInterrupt+0x38>)
 8108a14:	2200      	movs	r2, #0
 8108a16:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
<<<<<<< HEAD
 8109cfc:	4b0a      	ldr	r3, [pc, #40]	; (8109d28 <vPortSetupTimerInterrupt+0x3c>)
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	4a0a      	ldr	r2, [pc, #40]	; (8109d2c <vPortSetupTimerInterrupt+0x40>)
 8109d02:	fba2 2303 	umull	r2, r3, r2, r3
 8109d06:	099b      	lsrs	r3, r3, #6
 8109d08:	4a09      	ldr	r2, [pc, #36]	; (8109d30 <vPortSetupTimerInterrupt+0x44>)
 8109d0a:	3b01      	subs	r3, #1
 8109d0c:	6013      	str	r3, [r2, #0]
=======
 8108a18:	4b0a      	ldr	r3, [pc, #40]	; (8108a44 <vPortSetupTimerInterrupt+0x3c>)
 8108a1a:	681b      	ldr	r3, [r3, #0]
 8108a1c:	4a0a      	ldr	r2, [pc, #40]	; (8108a48 <vPortSetupTimerInterrupt+0x40>)
 8108a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8108a22:	099b      	lsrs	r3, r3, #6
 8108a24:	4a09      	ldr	r2, [pc, #36]	; (8108a4c <vPortSetupTimerInterrupt+0x44>)
 8108a26:	3b01      	subs	r3, #1
 8108a28:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
<<<<<<< HEAD
 8109d0e:	4b04      	ldr	r3, [pc, #16]	; (8109d20 <vPortSetupTimerInterrupt+0x34>)
 8109d10:	2207      	movs	r2, #7
 8109d12:	601a      	str	r2, [r3, #0]
=======
 8108a2a:	4b04      	ldr	r3, [pc, #16]	; (8108a3c <vPortSetupTimerInterrupt+0x34>)
 8108a2c:	2207      	movs	r2, #7
 8108a2e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8109d14:	bf00      	nop
 8109d16:	46bd      	mov	sp, r7
 8109d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d1c:	4770      	bx	lr
 8109d1e:	bf00      	nop
 8109d20:	e000e010 	.word	0xe000e010
 8109d24:	e000e018 	.word	0xe000e018
 8109d28:	10000004 	.word	0x10000004
 8109d2c:	10624dd3 	.word	0x10624dd3
 8109d30:	e000e014 	.word	0xe000e014
=======
 8108a30:	bf00      	nop
 8108a32:	46bd      	mov	sp, r7
 8108a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a38:	4770      	bx	lr
 8108a3a:	bf00      	nop
 8108a3c:	e000e010 	.word	0xe000e010
 8108a40:	e000e018 	.word	0xe000e018
 8108a44:	10000004 	.word	0x10000004
 8108a48:	10624dd3 	.word	0x10624dd3
 8108a4c:	e000e014 	.word	0xe000e014
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109d34 <vPortEnableVFP>:
=======
08108a50 <vPortEnableVFP>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 8109d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8109d44 <vPortEnableVFP+0x10>
 8109d38:	6801      	ldr	r1, [r0, #0]
 8109d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8109d3e:	6001      	str	r1, [r0, #0]
 8109d40:	4770      	bx	lr
=======
 8108a50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8108a60 <vPortEnableVFP+0x10>
 8108a54:	6801      	ldr	r1, [r0, #0]
 8108a56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8108a5a:	6001      	str	r1, [r0, #0]
 8108a5c:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 8109d42:	bf00      	nop
 8109d44:	e000ed88 	.word	0xe000ed88
=======
 8108a5e:	bf00      	nop
 8108a60:	e000ed88 	.word	0xe000ed88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109d48 <xQueueGenericReset>:
=======
08108a64 <xQueueGenericReset>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8109d48:	b580      	push	{r7, lr}
 8109d4a:	b084      	sub	sp, #16
 8109d4c:	af00      	add	r7, sp, #0
 8109d4e:	6078      	str	r0, [r7, #4]
 8109d50:	6039      	str	r1, [r7, #0]
=======
 8108a64:	b580      	push	{r7, lr}
 8108a66:	b084      	sub	sp, #16
 8108a68:	af00      	add	r7, sp, #0
 8108a6a:	6078      	str	r0, [r7, #4]
 8108a6c:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
Queue_t * const pxQueue = xQueue;
<<<<<<< HEAD
 8109d52:	687b      	ldr	r3, [r7, #4]
 8109d54:	60fb      	str	r3, [r7, #12]
=======
 8108a6e:	687b      	ldr	r3, [r7, #4]
 8108a70:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	configASSERT( pxQueue );
<<<<<<< HEAD
 8109d56:	68fb      	ldr	r3, [r7, #12]
 8109d58:	2b00      	cmp	r3, #0
 8109d5a:	d10a      	bne.n	8109d72 <xQueueGenericReset+0x2a>
=======
 8108a72:	68fb      	ldr	r3, [r7, #12]
 8108a74:	2b00      	cmp	r3, #0
 8108a76:	d109      	bne.n	8108a8c <xQueueGenericReset+0x28>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	__asm volatile
<<<<<<< HEAD
 8109d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109d60:	f383 8811 	msr	BASEPRI, r3
 8109d64:	f3bf 8f6f 	isb	sy
 8109d68:	f3bf 8f4f 	dsb	sy
 8109d6c:	60bb      	str	r3, [r7, #8]
}
 8109d6e:	bf00      	nop
 8109d70:	e7fe      	b.n	8109d70 <xQueueGenericReset+0x28>
=======
 8108a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a7c:	f383 8811 	msr	BASEPRI, r3
 8108a80:	f3bf 8f6f 	isb	sy
 8108a84:	f3bf 8f4f 	dsb	sy
 8108a88:	60bb      	str	r3, [r7, #8]
 8108a8a:	e7fe      	b.n	8108a8a <xQueueGenericReset+0x26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	taskENTER_CRITICAL();
<<<<<<< HEAD
 8109d72:	f7ff ff07 	bl	8109b84 <vPortEnterCritical>
=======
 8108a8c:	f7ff ff0e 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
<<<<<<< HEAD
 8109d76:	68fb      	ldr	r3, [r7, #12]
 8109d78:	681a      	ldr	r2, [r3, #0]
 8109d7a:	68fb      	ldr	r3, [r7, #12]
 8109d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109d7e:	68f9      	ldr	r1, [r7, #12]
 8109d80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8109d82:	fb01 f303 	mul.w	r3, r1, r3
 8109d86:	441a      	add	r2, r3
 8109d88:	68fb      	ldr	r3, [r7, #12]
 8109d8a:	609a      	str	r2, [r3, #8]
=======
 8108a90:	68fb      	ldr	r3, [r7, #12]
 8108a92:	681a      	ldr	r2, [r3, #0]
 8108a94:	68fb      	ldr	r3, [r7, #12]
 8108a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108a98:	68f9      	ldr	r1, [r7, #12]
 8108a9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8108a9c:	fb01 f303 	mul.w	r3, r1, r3
 8108aa0:	441a      	add	r2, r3
 8108aa2:	68fb      	ldr	r3, [r7, #12]
 8108aa4:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
<<<<<<< HEAD
 8109d8c:	68fb      	ldr	r3, [r7, #12]
 8109d8e:	2200      	movs	r2, #0
 8109d90:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8108aa6:	68fb      	ldr	r3, [r7, #12]
 8108aa8:	2200      	movs	r2, #0
 8108aaa:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxQueue->pcWriteTo = pxQueue->pcHead;
<<<<<<< HEAD
 8109d92:	68fb      	ldr	r3, [r7, #12]
 8109d94:	681a      	ldr	r2, [r3, #0]
 8109d96:	68fb      	ldr	r3, [r7, #12]
 8109d98:	605a      	str	r2, [r3, #4]
=======
 8108aac:	68fb      	ldr	r3, [r7, #12]
 8108aae:	681a      	ldr	r2, [r3, #0]
 8108ab0:	68fb      	ldr	r3, [r7, #12]
 8108ab2:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
<<<<<<< HEAD
 8109d9a:	68fb      	ldr	r3, [r7, #12]
 8109d9c:	681a      	ldr	r2, [r3, #0]
 8109d9e:	68fb      	ldr	r3, [r7, #12]
 8109da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109da2:	3b01      	subs	r3, #1
 8109da4:	68f9      	ldr	r1, [r7, #12]
 8109da6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8109da8:	fb01 f303 	mul.w	r3, r1, r3
 8109dac:	441a      	add	r2, r3
 8109dae:	68fb      	ldr	r3, [r7, #12]
 8109db0:	60da      	str	r2, [r3, #12]
=======
 8108ab4:	68fb      	ldr	r3, [r7, #12]
 8108ab6:	681a      	ldr	r2, [r3, #0]
 8108ab8:	68fb      	ldr	r3, [r7, #12]
 8108aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108abc:	3b01      	subs	r3, #1
 8108abe:	68f9      	ldr	r1, [r7, #12]
 8108ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8108ac2:	fb01 f303 	mul.w	r3, r1, r3
 8108ac6:	441a      	add	r2, r3
 8108ac8:	68fb      	ldr	r3, [r7, #12]
 8108aca:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 8109db2:	68fb      	ldr	r3, [r7, #12]
 8109db4:	22ff      	movs	r2, #255	; 0xff
 8109db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
=======
 8108acc:	68fb      	ldr	r3, [r7, #12]
 8108ace:	22ff      	movs	r2, #255	; 0xff
 8108ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxQueue->cTxLock = queueUNLOCKED;
<<<<<<< HEAD
 8109dba:	68fb      	ldr	r3, [r7, #12]
 8109dbc:	22ff      	movs	r2, #255	; 0xff
 8109dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
=======
 8108ad4:	68fb      	ldr	r3, [r7, #12]
 8108ad6:	22ff      	movs	r2, #255	; 0xff
 8108ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( xNewQueue == pdFALSE )
<<<<<<< HEAD
 8109dc2:	683b      	ldr	r3, [r7, #0]
 8109dc4:	2b00      	cmp	r3, #0
 8109dc6:	d114      	bne.n	8109df2 <xQueueGenericReset+0xaa>
=======
 8108adc:	683b      	ldr	r3, [r7, #0]
 8108ade:	2b00      	cmp	r3, #0
 8108ae0:	d114      	bne.n	8108b0c <xQueueGenericReset+0xa8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8109dc8:	68fb      	ldr	r3, [r7, #12]
 8109dca:	691b      	ldr	r3, [r3, #16]
 8109dcc:	2b00      	cmp	r3, #0
 8109dce:	d01a      	beq.n	8109e06 <xQueueGenericReset+0xbe>
=======
 8108ae2:	68fb      	ldr	r3, [r7, #12]
 8108ae4:	691b      	ldr	r3, [r3, #16]
 8108ae6:	2b00      	cmp	r3, #0
 8108ae8:	d01a      	beq.n	8108b20 <xQueueGenericReset+0xbc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
<<<<<<< HEAD
 8109dd0:	68fb      	ldr	r3, [r7, #12]
 8109dd2:	3310      	adds	r3, #16
 8109dd4:	4618      	mov	r0, r3
 8109dd6:	f001 f8cf 	bl	810af78 <xTaskRemoveFromEventList>
 8109dda:	4603      	mov	r3, r0
 8109ddc:	2b00      	cmp	r3, #0
 8109dde:	d012      	beq.n	8109e06 <xQueueGenericReset+0xbe>
=======
 8108aea:	68fb      	ldr	r3, [r7, #12]
 8108aec:	3310      	adds	r3, #16
 8108aee:	4618      	mov	r0, r3
 8108af0:	f001 f82a 	bl	8109b48 <xTaskRemoveFromEventList>
 8108af4:	4603      	mov	r3, r0
 8108af6:	2b00      	cmp	r3, #0
 8108af8:	d012      	beq.n	8108b20 <xQueueGenericReset+0xbc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8109de0:	4b0c      	ldr	r3, [pc, #48]	; (8109e14 <xQueueGenericReset+0xcc>)
 8109de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109de6:	601a      	str	r2, [r3, #0]
 8109de8:	f3bf 8f4f 	dsb	sy
 8109dec:	f3bf 8f6f 	isb	sy
 8109df0:	e009      	b.n	8109e06 <xQueueGenericReset+0xbe>
=======
 8108afa:	4b0d      	ldr	r3, [pc, #52]	; (8108b30 <xQueueGenericReset+0xcc>)
 8108afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108b00:	601a      	str	r2, [r3, #0]
 8108b02:	f3bf 8f4f 	dsb	sy
 8108b06:	f3bf 8f6f 	isb	sy
 8108b0a:	e009      	b.n	8108b20 <xQueueGenericReset+0xbc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 8109df2:	68fb      	ldr	r3, [r7, #12]
 8109df4:	3310      	adds	r3, #16
 8109df6:	4618      	mov	r0, r3
 8109df8:	f7ff fce2 	bl	81097c0 <vListInitialise>
=======
 8108b0c:	68fb      	ldr	r3, [r7, #12]
 8108b0e:	3310      	adds	r3, #16
 8108b10:	4618      	mov	r0, r3
 8108b12:	f7ff fcef 	bl	81084f4 <vListInitialise>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
<<<<<<< HEAD
 8109dfc:	68fb      	ldr	r3, [r7, #12]
 8109dfe:	3324      	adds	r3, #36	; 0x24
 8109e00:	4618      	mov	r0, r3
 8109e02:	f7ff fcdd 	bl	81097c0 <vListInitialise>
=======
 8108b16:	68fb      	ldr	r3, [r7, #12]
 8108b18:	3324      	adds	r3, #36	; 0x24
 8108b1a:	4618      	mov	r0, r3
 8108b1c:	f7ff fcea 	bl	81084f4 <vListInitialise>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8109e06:	f7ff feed 	bl	8109be4 <vPortExitCritical>
=======
 8108b20:	f7ff fef2 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 8109e0a:	2301      	movs	r3, #1
=======
 8108b24:	2301      	movs	r3, #1
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8109e0c:	4618      	mov	r0, r3
 8109e0e:	3710      	adds	r7, #16
 8109e10:	46bd      	mov	sp, r7
 8109e12:	bd80      	pop	{r7, pc}
 8109e14:	e000ed04 	.word	0xe000ed04
=======
 8108b26:	4618      	mov	r0, r3
 8108b28:	3710      	adds	r7, #16
 8108b2a:	46bd      	mov	sp, r7
 8108b2c:	bd80      	pop	{r7, pc}
 8108b2e:	bf00      	nop
 8108b30:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109e18 <xQueueGenericCreateStatic>:
=======
08108b34 <xQueueGenericCreateStatic>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8109e18:	b580      	push	{r7, lr}
 8109e1a:	b08e      	sub	sp, #56	; 0x38
 8109e1c:	af02      	add	r7, sp, #8
 8109e1e:	60f8      	str	r0, [r7, #12]
 8109e20:	60b9      	str	r1, [r7, #8]
 8109e22:	607a      	str	r2, [r7, #4]
 8109e24:	603b      	str	r3, [r7, #0]
=======
 8108b34:	b580      	push	{r7, lr}
 8108b36:	b08e      	sub	sp, #56	; 0x38
 8108b38:	af02      	add	r7, sp, #8
 8108b3a:	60f8      	str	r0, [r7, #12]
 8108b3c:	60b9      	str	r1, [r7, #8]
 8108b3e:	607a      	str	r2, [r7, #4]
 8108b40:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 8109e26:	68fb      	ldr	r3, [r7, #12]
 8109e28:	2b00      	cmp	r3, #0
 8109e2a:	d10a      	bne.n	8109e42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8109e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e30:	f383 8811 	msr	BASEPRI, r3
 8109e34:	f3bf 8f6f 	isb	sy
 8109e38:	f3bf 8f4f 	dsb	sy
 8109e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8109e3e:	bf00      	nop
 8109e40:	e7fe      	b.n	8109e40 <xQueueGenericCreateStatic+0x28>
=======
 8108b42:	68fb      	ldr	r3, [r7, #12]
 8108b44:	2b00      	cmp	r3, #0
 8108b46:	d109      	bne.n	8108b5c <xQueueGenericCreateStatic+0x28>
 8108b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b4c:	f383 8811 	msr	BASEPRI, r3
 8108b50:	f3bf 8f6f 	isb	sy
 8108b54:	f3bf 8f4f 	dsb	sy
 8108b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8108b5a:	e7fe      	b.n	8108b5a <xQueueGenericCreateStatic+0x26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 8109e42:	683b      	ldr	r3, [r7, #0]
 8109e44:	2b00      	cmp	r3, #0
 8109e46:	d10a      	bne.n	8109e5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8109e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e4c:	f383 8811 	msr	BASEPRI, r3
 8109e50:	f3bf 8f6f 	isb	sy
 8109e54:	f3bf 8f4f 	dsb	sy
 8109e58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8109e5a:	bf00      	nop
 8109e5c:	e7fe      	b.n	8109e5c <xQueueGenericCreateStatic+0x44>
=======
 8108b5c:	683b      	ldr	r3, [r7, #0]
 8108b5e:	2b00      	cmp	r3, #0
 8108b60:	d109      	bne.n	8108b76 <xQueueGenericCreateStatic+0x42>
 8108b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b66:	f383 8811 	msr	BASEPRI, r3
 8108b6a:	f3bf 8f6f 	isb	sy
 8108b6e:	f3bf 8f4f 	dsb	sy
 8108b72:	627b      	str	r3, [r7, #36]	; 0x24
 8108b74:	e7fe      	b.n	8108b74 <xQueueGenericCreateStatic+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 8109e5e:	687b      	ldr	r3, [r7, #4]
 8109e60:	2b00      	cmp	r3, #0
 8109e62:	d002      	beq.n	8109e6a <xQueueGenericCreateStatic+0x52>
 8109e64:	68bb      	ldr	r3, [r7, #8]
 8109e66:	2b00      	cmp	r3, #0
 8109e68:	d001      	beq.n	8109e6e <xQueueGenericCreateStatic+0x56>
 8109e6a:	2301      	movs	r3, #1
 8109e6c:	e000      	b.n	8109e70 <xQueueGenericCreateStatic+0x58>
 8109e6e:	2300      	movs	r3, #0
 8109e70:	2b00      	cmp	r3, #0
 8109e72:	d10a      	bne.n	8109e8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8109e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e78:	f383 8811 	msr	BASEPRI, r3
 8109e7c:	f3bf 8f6f 	isb	sy
 8109e80:	f3bf 8f4f 	dsb	sy
 8109e84:	623b      	str	r3, [r7, #32]
}
 8109e86:	bf00      	nop
 8109e88:	e7fe      	b.n	8109e88 <xQueueGenericCreateStatic+0x70>
=======
 8108b76:	687b      	ldr	r3, [r7, #4]
 8108b78:	2b00      	cmp	r3, #0
 8108b7a:	d002      	beq.n	8108b82 <xQueueGenericCreateStatic+0x4e>
 8108b7c:	68bb      	ldr	r3, [r7, #8]
 8108b7e:	2b00      	cmp	r3, #0
 8108b80:	d001      	beq.n	8108b86 <xQueueGenericCreateStatic+0x52>
 8108b82:	2301      	movs	r3, #1
 8108b84:	e000      	b.n	8108b88 <xQueueGenericCreateStatic+0x54>
 8108b86:	2300      	movs	r3, #0
 8108b88:	2b00      	cmp	r3, #0
 8108b8a:	d109      	bne.n	8108ba0 <xQueueGenericCreateStatic+0x6c>
 8108b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b90:	f383 8811 	msr	BASEPRI, r3
 8108b94:	f3bf 8f6f 	isb	sy
 8108b98:	f3bf 8f4f 	dsb	sy
 8108b9c:	623b      	str	r3, [r7, #32]
 8108b9e:	e7fe      	b.n	8108b9e <xQueueGenericCreateStatic+0x6a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
<<<<<<< HEAD
 8109e8a:	687b      	ldr	r3, [r7, #4]
 8109e8c:	2b00      	cmp	r3, #0
 8109e8e:	d102      	bne.n	8109e96 <xQueueGenericCreateStatic+0x7e>
 8109e90:	68bb      	ldr	r3, [r7, #8]
 8109e92:	2b00      	cmp	r3, #0
 8109e94:	d101      	bne.n	8109e9a <xQueueGenericCreateStatic+0x82>
 8109e96:	2301      	movs	r3, #1
 8109e98:	e000      	b.n	8109e9c <xQueueGenericCreateStatic+0x84>
 8109e9a:	2300      	movs	r3, #0
 8109e9c:	2b00      	cmp	r3, #0
 8109e9e:	d10a      	bne.n	8109eb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8109ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ea4:	f383 8811 	msr	BASEPRI, r3
 8109ea8:	f3bf 8f6f 	isb	sy
 8109eac:	f3bf 8f4f 	dsb	sy
 8109eb0:	61fb      	str	r3, [r7, #28]
}
 8109eb2:	bf00      	nop
 8109eb4:	e7fe      	b.n	8109eb4 <xQueueGenericCreateStatic+0x9c>
=======
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	2b00      	cmp	r3, #0
 8108ba4:	d102      	bne.n	8108bac <xQueueGenericCreateStatic+0x78>
 8108ba6:	68bb      	ldr	r3, [r7, #8]
 8108ba8:	2b00      	cmp	r3, #0
 8108baa:	d101      	bne.n	8108bb0 <xQueueGenericCreateStatic+0x7c>
 8108bac:	2301      	movs	r3, #1
 8108bae:	e000      	b.n	8108bb2 <xQueueGenericCreateStatic+0x7e>
 8108bb0:	2300      	movs	r3, #0
 8108bb2:	2b00      	cmp	r3, #0
 8108bb4:	d109      	bne.n	8108bca <xQueueGenericCreateStatic+0x96>
 8108bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108bba:	f383 8811 	msr	BASEPRI, r3
 8108bbe:	f3bf 8f6f 	isb	sy
 8108bc2:	f3bf 8f4f 	dsb	sy
 8108bc6:	61fb      	str	r3, [r7, #28]
 8108bc8:	e7fe      	b.n	8108bc8 <xQueueGenericCreateStatic+0x94>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 8109eb6:	2348      	movs	r3, #72	; 0x48
 8109eb8:	617b      	str	r3, [r7, #20]
=======
 8108bca:	2348      	movs	r3, #72	; 0x48
 8108bcc:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			configASSERT( xSize == sizeof( Queue_t ) );
<<<<<<< HEAD
 8109eba:	697b      	ldr	r3, [r7, #20]
 8109ebc:	2b48      	cmp	r3, #72	; 0x48
 8109ebe:	d00a      	beq.n	8109ed6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8109ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ec4:	f383 8811 	msr	BASEPRI, r3
 8109ec8:	f3bf 8f6f 	isb	sy
 8109ecc:	f3bf 8f4f 	dsb	sy
 8109ed0:	61bb      	str	r3, [r7, #24]
}
 8109ed2:	bf00      	nop
 8109ed4:	e7fe      	b.n	8109ed4 <xQueueGenericCreateStatic+0xbc>
=======
 8108bce:	697b      	ldr	r3, [r7, #20]
 8108bd0:	2b48      	cmp	r3, #72	; 0x48
 8108bd2:	d009      	beq.n	8108be8 <xQueueGenericCreateStatic+0xb4>
 8108bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108bd8:	f383 8811 	msr	BASEPRI, r3
 8108bdc:	f3bf 8f6f 	isb	sy
 8108be0:	f3bf 8f4f 	dsb	sy
 8108be4:	61bb      	str	r3, [r7, #24]
 8108be6:	e7fe      	b.n	8108be6 <xQueueGenericCreateStatic+0xb2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
<<<<<<< HEAD
 8109ed6:	697b      	ldr	r3, [r7, #20]
=======
 8108be8:	697b      	ldr	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8109ed8:	683b      	ldr	r3, [r7, #0]
 8109eda:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8108bea:	683b      	ldr	r3, [r7, #0]
 8108bec:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( pxNewQueue != NULL )
<<<<<<< HEAD
 8109edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109ede:	2b00      	cmp	r3, #0
 8109ee0:	d00d      	beq.n	8109efe <xQueueGenericCreateStatic+0xe6>
=======
 8108bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108bf0:	2b00      	cmp	r3, #0
 8108bf2:	d00d      	beq.n	8108c10 <xQueueGenericCreateStatic+0xdc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8109ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109ee4:	2201      	movs	r2, #1
 8109ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 8108bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108bf6:	2201      	movs	r2, #1
 8108bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8109eea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8109eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109ef0:	9300      	str	r3, [sp, #0]
 8109ef2:	4613      	mov	r3, r2
 8109ef4:	687a      	ldr	r2, [r7, #4]
 8109ef6:	68b9      	ldr	r1, [r7, #8]
 8109ef8:	68f8      	ldr	r0, [r7, #12]
 8109efa:	f000 f845 	bl	8109f88 <prvInitialiseNewQueue>
=======
 8108bfc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8108c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c02:	9300      	str	r3, [sp, #0]
 8108c04:	4613      	mov	r3, r2
 8108c06:	687a      	ldr	r2, [r7, #4]
 8108c08:	68b9      	ldr	r1, [r7, #8]
 8108c0a:	68f8      	ldr	r0, [r7, #12]
 8108c0c:	f000 f844 	bl	8108c98 <prvInitialiseNewQueue>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8109efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
=======
 8108c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 8109f00:	4618      	mov	r0, r3
 8109f02:	3730      	adds	r7, #48	; 0x30
 8109f04:	46bd      	mov	sp, r7
 8109f06:	bd80      	pop	{r7, pc}
=======
 8108c12:	4618      	mov	r0, r3
 8108c14:	3730      	adds	r7, #48	; 0x30
 8108c16:	46bd      	mov	sp, r7
 8108c18:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109f08 <xQueueGenericCreate>:
=======
08108c1a <xQueueGenericCreate>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8109f08:	b580      	push	{r7, lr}
 8109f0a:	b08a      	sub	sp, #40	; 0x28
 8109f0c:	af02      	add	r7, sp, #8
 8109f0e:	60f8      	str	r0, [r7, #12]
 8109f10:	60b9      	str	r1, [r7, #8]
 8109f12:	4613      	mov	r3, r2
 8109f14:	71fb      	strb	r3, [r7, #7]
=======
 8108c1a:	b580      	push	{r7, lr}
 8108c1c:	b08a      	sub	sp, #40	; 0x28
 8108c1e:	af02      	add	r7, sp, #8
 8108c20:	60f8      	str	r0, [r7, #12]
 8108c22:	60b9      	str	r1, [r7, #8]
 8108c24:	4613      	mov	r3, r2
 8108c26:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 8109f16:	68fb      	ldr	r3, [r7, #12]
 8109f18:	2b00      	cmp	r3, #0
 8109f1a:	d10a      	bne.n	8109f32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8109f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f20:	f383 8811 	msr	BASEPRI, r3
 8109f24:	f3bf 8f6f 	isb	sy
 8109f28:	f3bf 8f4f 	dsb	sy
 8109f2c:	613b      	str	r3, [r7, #16]
}
 8109f2e:	bf00      	nop
 8109f30:	e7fe      	b.n	8109f30 <xQueueGenericCreate+0x28>
=======
 8108c28:	68fb      	ldr	r3, [r7, #12]
 8108c2a:	2b00      	cmp	r3, #0
 8108c2c:	d109      	bne.n	8108c42 <xQueueGenericCreate+0x28>
 8108c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108c32:	f383 8811 	msr	BASEPRI, r3
 8108c36:	f3bf 8f6f 	isb	sy
 8108c3a:	f3bf 8f4f 	dsb	sy
 8108c3e:	613b      	str	r3, [r7, #16]
 8108c40:	e7fe      	b.n	8108c40 <xQueueGenericCreate+0x26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8109f32:	68bb      	ldr	r3, [r7, #8]
 8109f34:	2b00      	cmp	r3, #0
 8109f36:	d102      	bne.n	8109f3e <xQueueGenericCreate+0x36>
=======
 8108c42:	68bb      	ldr	r3, [r7, #8]
 8108c44:	2b00      	cmp	r3, #0
 8108c46:	d102      	bne.n	8108c4e <xQueueGenericCreate+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
<<<<<<< HEAD
 8109f38:	2300      	movs	r3, #0
 8109f3a:	61fb      	str	r3, [r7, #28]
 8109f3c:	e004      	b.n	8109f48 <xQueueGenericCreate+0x40>
=======
 8108c48:	2300      	movs	r3, #0
 8108c4a:	61fb      	str	r3, [r7, #28]
 8108c4c:	e004      	b.n	8108c58 <xQueueGenericCreate+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8109f3e:	68fb      	ldr	r3, [r7, #12]
 8109f40:	68ba      	ldr	r2, [r7, #8]
 8109f42:	fb02 f303 	mul.w	r3, r2, r3
 8109f46:	61fb      	str	r3, [r7, #28]
=======
 8108c4e:	68fb      	ldr	r3, [r7, #12]
 8108c50:	68ba      	ldr	r2, [r7, #8]
 8108c52:	fb02 f303 	mul.w	r3, r2, r3
 8108c56:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< HEAD
 8109f48:	69fb      	ldr	r3, [r7, #28]
 8109f4a:	3348      	adds	r3, #72	; 0x48
 8109f4c:	4618      	mov	r0, r3
 8109f4e:	f7ff fa5d 	bl	810940c <pvPortMalloc>
 8109f52:	61b8      	str	r0, [r7, #24]
=======
 8108c58:	69fb      	ldr	r3, [r7, #28]
 8108c5a:	3348      	adds	r3, #72	; 0x48
 8108c5c:	4618      	mov	r0, r3
 8108c5e:	f7ff fa73 	bl	8108148 <pvPortMalloc>
 8108c62:	61b8      	str	r0, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( pxNewQueue != NULL )
<<<<<<< HEAD
 8109f54:	69bb      	ldr	r3, [r7, #24]
 8109f56:	2b00      	cmp	r3, #0
 8109f58:	d011      	beq.n	8109f7e <xQueueGenericCreate+0x76>
=======
 8108c64:	69bb      	ldr	r3, [r7, #24]
 8108c66:	2b00      	cmp	r3, #0
 8108c68:	d011      	beq.n	8108c8e <xQueueGenericCreate+0x74>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< HEAD
 8109f5a:	69bb      	ldr	r3, [r7, #24]
 8109f5c:	617b      	str	r3, [r7, #20]
=======
 8108c6a:	69bb      	ldr	r3, [r7, #24]
 8108c6c:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
<<<<<<< HEAD
 8109f5e:	697b      	ldr	r3, [r7, #20]
 8109f60:	3348      	adds	r3, #72	; 0x48
 8109f62:	617b      	str	r3, [r7, #20]
=======
 8108c6e:	697b      	ldr	r3, [r7, #20]
 8108c70:	3348      	adds	r3, #72	; 0x48
 8108c72:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 8109f64:	69bb      	ldr	r3, [r7, #24]
 8109f66:	2200      	movs	r2, #0
 8109f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 8108c74:	69bb      	ldr	r3, [r7, #24]
 8108c76:	2200      	movs	r2, #0
 8108c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8109f6c:	79fa      	ldrb	r2, [r7, #7]
 8109f6e:	69bb      	ldr	r3, [r7, #24]
 8109f70:	9300      	str	r3, [sp, #0]
 8109f72:	4613      	mov	r3, r2
 8109f74:	697a      	ldr	r2, [r7, #20]
 8109f76:	68b9      	ldr	r1, [r7, #8]
 8109f78:	68f8      	ldr	r0, [r7, #12]
 8109f7a:	f000 f805 	bl	8109f88 <prvInitialiseNewQueue>
=======
 8108c7c:	79fa      	ldrb	r2, [r7, #7]
 8108c7e:	69bb      	ldr	r3, [r7, #24]
 8108c80:	9300      	str	r3, [sp, #0]
 8108c82:	4613      	mov	r3, r2
 8108c84:	697a      	ldr	r2, [r7, #20]
 8108c86:	68b9      	ldr	r1, [r7, #8]
 8108c88:	68f8      	ldr	r0, [r7, #12]
 8108c8a:	f000 f805 	bl	8108c98 <prvInitialiseNewQueue>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8109f7e:	69bb      	ldr	r3, [r7, #24]
=======
 8108c8e:	69bb      	ldr	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 8109f80:	4618      	mov	r0, r3
 8109f82:	3720      	adds	r7, #32
 8109f84:	46bd      	mov	sp, r7
 8109f86:	bd80      	pop	{r7, pc}
=======
 8108c90:	4618      	mov	r0, r3
 8108c92:	3720      	adds	r7, #32
 8108c94:	46bd      	mov	sp, r7
 8108c96:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109f88 <prvInitialiseNewQueue>:
=======
08108c98 <prvInitialiseNewQueue>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 8109f88:	b580      	push	{r7, lr}
 8109f8a:	b084      	sub	sp, #16
 8109f8c:	af00      	add	r7, sp, #0
 8109f8e:	60f8      	str	r0, [r7, #12]
 8109f90:	60b9      	str	r1, [r7, #8]
 8109f92:	607a      	str	r2, [r7, #4]
 8109f94:	70fb      	strb	r3, [r7, #3]
=======
 8108c98:	b580      	push	{r7, lr}
 8108c9a:	b084      	sub	sp, #16
 8108c9c:	af00      	add	r7, sp, #0
 8108c9e:	60f8      	str	r0, [r7, #12]
 8108ca0:	60b9      	str	r1, [r7, #8]
 8108ca2:	607a      	str	r2, [r7, #4]
 8108ca4:	70fb      	strb	r3, [r7, #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8109f96:	68bb      	ldr	r3, [r7, #8]
 8109f98:	2b00      	cmp	r3, #0
 8109f9a:	d103      	bne.n	8109fa4 <prvInitialiseNewQueue+0x1c>
=======
 8108ca6:	68bb      	ldr	r3, [r7, #8]
 8108ca8:	2b00      	cmp	r3, #0
 8108caa:	d103      	bne.n	8108cb4 <prvInitialiseNewQueue+0x1c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 8109f9c:	69bb      	ldr	r3, [r7, #24]
 8109f9e:	69ba      	ldr	r2, [r7, #24]
 8109fa0:	601a      	str	r2, [r3, #0]
 8109fa2:	e002      	b.n	8109faa <prvInitialiseNewQueue+0x22>
=======
 8108cac:	69bb      	ldr	r3, [r7, #24]
 8108cae:	69ba      	ldr	r2, [r7, #24]
 8108cb0:	601a      	str	r2, [r3, #0]
 8108cb2:	e002      	b.n	8108cba <prvInitialiseNewQueue+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 8109fa4:	69bb      	ldr	r3, [r7, #24]
 8109fa6:	687a      	ldr	r2, [r7, #4]
 8109fa8:	601a      	str	r2, [r3, #0]
=======
 8108cb4:	69bb      	ldr	r3, [r7, #24]
 8108cb6:	687a      	ldr	r2, [r7, #4]
 8108cb8:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 8109faa:	69bb      	ldr	r3, [r7, #24]
 8109fac:	68fa      	ldr	r2, [r7, #12]
 8109fae:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8108cba:	69bb      	ldr	r3, [r7, #24]
 8108cbc:	68fa      	ldr	r2, [r7, #12]
 8108cbe:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxNewQueue->uxItemSize = uxItemSize;
<<<<<<< HEAD
 8109fb0:	69bb      	ldr	r3, [r7, #24]
 8109fb2:	68ba      	ldr	r2, [r7, #8]
 8109fb4:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8108cc0:	69bb      	ldr	r3, [r7, #24]
 8108cc2:	68ba      	ldr	r2, [r7, #8]
 8108cc4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
<<<<<<< HEAD
 8109fb6:	2101      	movs	r1, #1
 8109fb8:	69b8      	ldr	r0, [r7, #24]
 8109fba:	f7ff fec5 	bl	8109d48 <xQueueGenericReset>
=======
 8108cc6:	2101      	movs	r1, #1
 8108cc8:	69b8      	ldr	r0, [r7, #24]
 8108cca:	f7ff fecb 	bl	8108a64 <xQueueGenericReset>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 8109fbe:	bf00      	nop
 8109fc0:	3710      	adds	r7, #16
 8109fc2:	46bd      	mov	sp, r7
 8109fc4:	bd80      	pop	{r7, pc}
=======
 8108cce:	bf00      	nop
 8108cd0:	3710      	adds	r7, #16
 8108cd2:	46bd      	mov	sp, r7
 8108cd4:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109fc6 <prvInitialiseMutex>:
=======
08108cd6 <prvInitialiseMutex>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
<<<<<<< HEAD
 8109fc6:	b580      	push	{r7, lr}
 8109fc8:	b082      	sub	sp, #8
 8109fca:	af00      	add	r7, sp, #0
 8109fcc:	6078      	str	r0, [r7, #4]
=======
 8108cd6:	b580      	push	{r7, lr}
 8108cd8:	b082      	sub	sp, #8
 8108cda:	af00      	add	r7, sp, #0
 8108cdc:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if( pxNewQueue != NULL )
<<<<<<< HEAD
 8109fce:	687b      	ldr	r3, [r7, #4]
 8109fd0:	2b00      	cmp	r3, #0
 8109fd2:	d00e      	beq.n	8109ff2 <prvInitialiseMutex+0x2c>
=======
 8108cde:	687b      	ldr	r3, [r7, #4]
 8108ce0:	2b00      	cmp	r3, #0
 8108ce2:	d00e      	beq.n	8108d02 <prvInitialiseMutex+0x2c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
<<<<<<< HEAD
 8109fd4:	687b      	ldr	r3, [r7, #4]
 8109fd6:	2200      	movs	r2, #0
 8109fd8:	609a      	str	r2, [r3, #8]
=======
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	2200      	movs	r2, #0
 8108ce8:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
<<<<<<< HEAD
 8109fda:	687b      	ldr	r3, [r7, #4]
 8109fdc:	2200      	movs	r2, #0
 8109fde:	601a      	str	r2, [r3, #0]
=======
 8108cea:	687b      	ldr	r3, [r7, #4]
 8108cec:	2200      	movs	r2, #0
 8108cee:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
<<<<<<< HEAD
 8109fe0:	687b      	ldr	r3, [r7, #4]
 8109fe2:	2200      	movs	r2, #0
 8109fe4:	60da      	str	r2, [r3, #12]
=======
 8108cf0:	687b      	ldr	r3, [r7, #4]
 8108cf2:	2200      	movs	r2, #0
 8108cf4:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< HEAD
 8109fe6:	2300      	movs	r3, #0
 8109fe8:	2200      	movs	r2, #0
 8109fea:	2100      	movs	r1, #0
 8109fec:	6878      	ldr	r0, [r7, #4]
 8109fee:	f000 f81d 	bl	810a02c <xQueueGenericSend>
=======
 8108cf6:	2300      	movs	r3, #0
 8108cf8:	2200      	movs	r2, #0
 8108cfa:	2100      	movs	r1, #0
 8108cfc:	6878      	ldr	r0, [r7, #4]
 8108cfe:	f000 f81d 	bl	8108d3c <xQueueGenericSend>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
<<<<<<< HEAD
 8109ff2:	bf00      	nop
 8109ff4:	3708      	adds	r7, #8
 8109ff6:	46bd      	mov	sp, r7
 8109ff8:	bd80      	pop	{r7, pc}
=======
 8108d02:	bf00      	nop
 8108d04:	3708      	adds	r7, #8
 8108d06:	46bd      	mov	sp, r7
 8108d08:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08109ffa <xQueueCreateMutex>:
=======
08108d0a <xQueueCreateMutex>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8109ffa:	b580      	push	{r7, lr}
 8109ffc:	b086      	sub	sp, #24
 8109ffe:	af00      	add	r7, sp, #0
 810a000:	4603      	mov	r3, r0
 810a002:	71fb      	strb	r3, [r7, #7]
=======
 8108d0a:	b580      	push	{r7, lr}
 8108d0c:	b086      	sub	sp, #24
 8108d0e:	af00      	add	r7, sp, #0
 8108d10:	4603      	mov	r3, r0
 8108d12:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
<<<<<<< HEAD
 810a004:	2301      	movs	r3, #1
 810a006:	617b      	str	r3, [r7, #20]
 810a008:	2300      	movs	r3, #0
 810a00a:	613b      	str	r3, [r7, #16]
=======
 8108d14:	2301      	movs	r3, #1
 8108d16:	617b      	str	r3, [r7, #20]
 8108d18:	2300      	movs	r3, #0
 8108d1a:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
<<<<<<< HEAD
 810a00c:	79fb      	ldrb	r3, [r7, #7]
 810a00e:	461a      	mov	r2, r3
 810a010:	6939      	ldr	r1, [r7, #16]
 810a012:	6978      	ldr	r0, [r7, #20]
 810a014:	f7ff ff78 	bl	8109f08 <xQueueGenericCreate>
 810a018:	60f8      	str	r0, [r7, #12]
=======
 8108d1c:	79fb      	ldrb	r3, [r7, #7]
 8108d1e:	461a      	mov	r2, r3
 8108d20:	6939      	ldr	r1, [r7, #16]
 8108d22:	6978      	ldr	r0, [r7, #20]
 8108d24:	f7ff ff79 	bl	8108c1a <xQueueGenericCreate>
 8108d28:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
<<<<<<< HEAD
 810a01a:	68f8      	ldr	r0, [r7, #12]
 810a01c:	f7ff ffd3 	bl	8109fc6 <prvInitialiseMutex>
=======
 8108d2a:	68f8      	ldr	r0, [r7, #12]
 8108d2c:	f7ff ffd3 	bl	8108cd6 <prvInitialiseMutex>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		return xNewQueue;
<<<<<<< HEAD
 810a020:	68fb      	ldr	r3, [r7, #12]
=======
 8108d30:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810a022:	4618      	mov	r0, r3
 810a024:	3718      	adds	r7, #24
 810a026:	46bd      	mov	sp, r7
 810a028:	bd80      	pop	{r7, pc}
=======
 8108d32:	4618      	mov	r0, r3
 8108d34:	3718      	adds	r7, #24
 8108d36:	46bd      	mov	sp, r7
 8108d38:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810a02c <xQueueGenericSend>:
=======
08108d3c <xQueueGenericSend>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 810a02c:	b580      	push	{r7, lr}
 810a02e:	b08e      	sub	sp, #56	; 0x38
 810a030:	af00      	add	r7, sp, #0
 810a032:	60f8      	str	r0, [r7, #12]
 810a034:	60b9      	str	r1, [r7, #8]
 810a036:	607a      	str	r2, [r7, #4]
 810a038:	603b      	str	r3, [r7, #0]
=======
 8108d3c:	b580      	push	{r7, lr}
 8108d3e:	b08e      	sub	sp, #56	; 0x38
 8108d40:	af00      	add	r7, sp, #0
 8108d42:	60f8      	str	r0, [r7, #12]
 8108d44:	60b9      	str	r1, [r7, #8]
 8108d46:	607a      	str	r2, [r7, #4]
 8108d48:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
<<<<<<< HEAD
 810a03a:	2300      	movs	r3, #0
 810a03c:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8108d4a:	2300      	movs	r3, #0
 8108d4c:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
<<<<<<< HEAD
 810a03e:	68fb      	ldr	r3, [r7, #12]
 810a040:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8108d4e:	68fb      	ldr	r3, [r7, #12]
 8108d50:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	configASSERT( pxQueue );
<<<<<<< HEAD
 810a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a044:	2b00      	cmp	r3, #0
 810a046:	d10a      	bne.n	810a05e <xQueueGenericSend+0x32>
	__asm volatile
 810a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a04c:	f383 8811 	msr	BASEPRI, r3
 810a050:	f3bf 8f6f 	isb	sy
 810a054:	f3bf 8f4f 	dsb	sy
 810a058:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810a05a:	bf00      	nop
 810a05c:	e7fe      	b.n	810a05c <xQueueGenericSend+0x30>
=======
 8108d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d54:	2b00      	cmp	r3, #0
 8108d56:	d109      	bne.n	8108d6c <xQueueGenericSend+0x30>
 8108d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d5c:	f383 8811 	msr	BASEPRI, r3
 8108d60:	f3bf 8f6f 	isb	sy
 8108d64:	f3bf 8f4f 	dsb	sy
 8108d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8108d6a:	e7fe      	b.n	8108d6a <xQueueGenericSend+0x2e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 810a05e:	68bb      	ldr	r3, [r7, #8]
 810a060:	2b00      	cmp	r3, #0
 810a062:	d103      	bne.n	810a06c <xQueueGenericSend+0x40>
 810a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a068:	2b00      	cmp	r3, #0
 810a06a:	d101      	bne.n	810a070 <xQueueGenericSend+0x44>
 810a06c:	2301      	movs	r3, #1
 810a06e:	e000      	b.n	810a072 <xQueueGenericSend+0x46>
 810a070:	2300      	movs	r3, #0
 810a072:	2b00      	cmp	r3, #0
 810a074:	d10a      	bne.n	810a08c <xQueueGenericSend+0x60>
	__asm volatile
 810a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a07a:	f383 8811 	msr	BASEPRI, r3
 810a07e:	f3bf 8f6f 	isb	sy
 810a082:	f3bf 8f4f 	dsb	sy
 810a086:	627b      	str	r3, [r7, #36]	; 0x24
}
 810a088:	bf00      	nop
 810a08a:	e7fe      	b.n	810a08a <xQueueGenericSend+0x5e>
=======
 8108d6c:	68bb      	ldr	r3, [r7, #8]
 8108d6e:	2b00      	cmp	r3, #0
 8108d70:	d103      	bne.n	8108d7a <xQueueGenericSend+0x3e>
 8108d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108d76:	2b00      	cmp	r3, #0
 8108d78:	d101      	bne.n	8108d7e <xQueueGenericSend+0x42>
 8108d7a:	2301      	movs	r3, #1
 8108d7c:	e000      	b.n	8108d80 <xQueueGenericSend+0x44>
 8108d7e:	2300      	movs	r3, #0
 8108d80:	2b00      	cmp	r3, #0
 8108d82:	d109      	bne.n	8108d98 <xQueueGenericSend+0x5c>
 8108d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d88:	f383 8811 	msr	BASEPRI, r3
 8108d8c:	f3bf 8f6f 	isb	sy
 8108d90:	f3bf 8f4f 	dsb	sy
 8108d94:	627b      	str	r3, [r7, #36]	; 0x24
 8108d96:	e7fe      	b.n	8108d96 <xQueueGenericSend+0x5a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
<<<<<<< HEAD
 810a08c:	683b      	ldr	r3, [r7, #0]
 810a08e:	2b02      	cmp	r3, #2
 810a090:	d103      	bne.n	810a09a <xQueueGenericSend+0x6e>
 810a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a096:	2b01      	cmp	r3, #1
 810a098:	d101      	bne.n	810a09e <xQueueGenericSend+0x72>
 810a09a:	2301      	movs	r3, #1
 810a09c:	e000      	b.n	810a0a0 <xQueueGenericSend+0x74>
 810a09e:	2300      	movs	r3, #0
 810a0a0:	2b00      	cmp	r3, #0
 810a0a2:	d10a      	bne.n	810a0ba <xQueueGenericSend+0x8e>
	__asm volatile
 810a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0a8:	f383 8811 	msr	BASEPRI, r3
 810a0ac:	f3bf 8f6f 	isb	sy
 810a0b0:	f3bf 8f4f 	dsb	sy
 810a0b4:	623b      	str	r3, [r7, #32]
}
 810a0b6:	bf00      	nop
 810a0b8:	e7fe      	b.n	810a0b8 <xQueueGenericSend+0x8c>
=======
 8108d98:	683b      	ldr	r3, [r7, #0]
 8108d9a:	2b02      	cmp	r3, #2
 8108d9c:	d103      	bne.n	8108da6 <xQueueGenericSend+0x6a>
 8108d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108da2:	2b01      	cmp	r3, #1
 8108da4:	d101      	bne.n	8108daa <xQueueGenericSend+0x6e>
 8108da6:	2301      	movs	r3, #1
 8108da8:	e000      	b.n	8108dac <xQueueGenericSend+0x70>
 8108daa:	2300      	movs	r3, #0
 8108dac:	2b00      	cmp	r3, #0
 8108dae:	d109      	bne.n	8108dc4 <xQueueGenericSend+0x88>
 8108db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108db4:	f383 8811 	msr	BASEPRI, r3
 8108db8:	f3bf 8f6f 	isb	sy
 8108dbc:	f3bf 8f4f 	dsb	sy
 8108dc0:	623b      	str	r3, [r7, #32]
 8108dc2:	e7fe      	b.n	8108dc2 <xQueueGenericSend+0x86>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 810a0ba:	f001 f919 	bl	810b2f0 <xTaskGetSchedulerState>
 810a0be:	4603      	mov	r3, r0
 810a0c0:	2b00      	cmp	r3, #0
 810a0c2:	d102      	bne.n	810a0ca <xQueueGenericSend+0x9e>
 810a0c4:	687b      	ldr	r3, [r7, #4]
 810a0c6:	2b00      	cmp	r3, #0
 810a0c8:	d101      	bne.n	810a0ce <xQueueGenericSend+0xa2>
 810a0ca:	2301      	movs	r3, #1
 810a0cc:	e000      	b.n	810a0d0 <xQueueGenericSend+0xa4>
 810a0ce:	2300      	movs	r3, #0
 810a0d0:	2b00      	cmp	r3, #0
 810a0d2:	d10a      	bne.n	810a0ea <xQueueGenericSend+0xbe>
	__asm volatile
 810a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0d8:	f383 8811 	msr	BASEPRI, r3
 810a0dc:	f3bf 8f6f 	isb	sy
 810a0e0:	f3bf 8f4f 	dsb	sy
 810a0e4:	61fb      	str	r3, [r7, #28]
}
 810a0e6:	bf00      	nop
 810a0e8:	e7fe      	b.n	810a0e8 <xQueueGenericSend+0xbc>
=======
 8108dc4:	f001 f876 	bl	8109eb4 <xTaskGetSchedulerState>
 8108dc8:	4603      	mov	r3, r0
 8108dca:	2b00      	cmp	r3, #0
 8108dcc:	d102      	bne.n	8108dd4 <xQueueGenericSend+0x98>
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	2b00      	cmp	r3, #0
 8108dd2:	d101      	bne.n	8108dd8 <xQueueGenericSend+0x9c>
 8108dd4:	2301      	movs	r3, #1
 8108dd6:	e000      	b.n	8108dda <xQueueGenericSend+0x9e>
 8108dd8:	2300      	movs	r3, #0
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d109      	bne.n	8108df2 <xQueueGenericSend+0xb6>
 8108dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108de2:	f383 8811 	msr	BASEPRI, r3
 8108de6:	f3bf 8f6f 	isb	sy
 8108dea:	f3bf 8f4f 	dsb	sy
 8108dee:	61fb      	str	r3, [r7, #28]
 8108df0:	e7fe      	b.n	8108df0 <xQueueGenericSend+0xb4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 810a0ea:	f7ff fd4b 	bl	8109b84 <vPortEnterCritical>
=======
 8108df2:	f7ff fd5b 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 810a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a0f6:	429a      	cmp	r2, r3
 810a0f8:	d302      	bcc.n	810a100 <xQueueGenericSend+0xd4>
 810a0fa:	683b      	ldr	r3, [r7, #0]
 810a0fc:	2b02      	cmp	r3, #2
 810a0fe:	d129      	bne.n	810a154 <xQueueGenericSend+0x128>
=======
 8108df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108dfe:	429a      	cmp	r2, r3
 8108e00:	d302      	bcc.n	8108e08 <xQueueGenericSend+0xcc>
 8108e02:	683b      	ldr	r3, [r7, #0]
 8108e04:	2b02      	cmp	r3, #2
 8108e06:	d129      	bne.n	8108e5c <xQueueGenericSend+0x120>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 810a100:	683a      	ldr	r2, [r7, #0]
 810a102:	68b9      	ldr	r1, [r7, #8]
 810a104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a106:	f000 f9b3 	bl	810a470 <prvCopyDataToQueue>
 810a10a:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 8108e08:	683a      	ldr	r2, [r7, #0]
 8108e0a:	68b9      	ldr	r1, [r7, #8]
 8108e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108e0e:	f000 f9af 	bl	8109170 <prvCopyDataToQueue>
 8108e12:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 810a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a110:	2b00      	cmp	r3, #0
 810a112:	d010      	beq.n	810a136 <xQueueGenericSend+0x10a>
=======
 8108e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e18:	2b00      	cmp	r3, #0
 8108e1a:	d010      	beq.n	8108e3e <xQueueGenericSend+0x102>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
<<<<<<< HEAD
 810a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a116:	3324      	adds	r3, #36	; 0x24
 810a118:	4618      	mov	r0, r3
 810a11a:	f000 ff2d 	bl	810af78 <xTaskRemoveFromEventList>
 810a11e:	4603      	mov	r3, r0
 810a120:	2b00      	cmp	r3, #0
 810a122:	d013      	beq.n	810a14c <xQueueGenericSend+0x120>
=======
 8108e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e1e:	3324      	adds	r3, #36	; 0x24
 8108e20:	4618      	mov	r0, r3
 8108e22:	f000 fe91 	bl	8109b48 <xTaskRemoveFromEventList>
 8108e26:	4603      	mov	r3, r0
 8108e28:	2b00      	cmp	r3, #0
 8108e2a:	d013      	beq.n	8108e54 <xQueueGenericSend+0x118>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 810a124:	4b3f      	ldr	r3, [pc, #252]	; (810a224 <xQueueGenericSend+0x1f8>)
 810a126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a12a:	601a      	str	r2, [r3, #0]
 810a12c:	f3bf 8f4f 	dsb	sy
 810a130:	f3bf 8f6f 	isb	sy
 810a134:	e00a      	b.n	810a14c <xQueueGenericSend+0x120>
=======
 8108e2c:	4b3f      	ldr	r3, [pc, #252]	; (8108f2c <xQueueGenericSend+0x1f0>)
 8108e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108e32:	601a      	str	r2, [r3, #0]
 8108e34:	f3bf 8f4f 	dsb	sy
 8108e38:	f3bf 8f6f 	isb	sy
 8108e3c:	e00a      	b.n	8108e54 <xQueueGenericSend+0x118>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 810a136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a138:	2b00      	cmp	r3, #0
 810a13a:	d007      	beq.n	810a14c <xQueueGenericSend+0x120>
=======
 8108e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108e40:	2b00      	cmp	r3, #0
 8108e42:	d007      	beq.n	8108e54 <xQueueGenericSend+0x118>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 810a13c:	4b39      	ldr	r3, [pc, #228]	; (810a224 <xQueueGenericSend+0x1f8>)
 810a13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a142:	601a      	str	r2, [r3, #0]
 810a144:	f3bf 8f4f 	dsb	sy
 810a148:	f3bf 8f6f 	isb	sy
=======
 8108e44:	4b39      	ldr	r3, [pc, #228]	; (8108f2c <xQueueGenericSend+0x1f0>)
 8108e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108e4a:	601a      	str	r2, [r3, #0]
 8108e4c:	f3bf 8f4f 	dsb	sy
 8108e50:	f3bf 8f6f 	isb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a14c:	f7ff fd4a 	bl	8109be4 <vPortExitCritical>
=======
 8108e54:	f7ff fd58 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				return pdPASS;
<<<<<<< HEAD
 810a150:	2301      	movs	r3, #1
 810a152:	e063      	b.n	810a21c <xQueueGenericSend+0x1f0>
=======
 8108e58:	2301      	movs	r3, #1
 8108e5a:	e063      	b.n	8108f24 <xQueueGenericSend+0x1e8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 810a154:	687b      	ldr	r3, [r7, #4]
 810a156:	2b00      	cmp	r3, #0
 810a158:	d103      	bne.n	810a162 <xQueueGenericSend+0x136>
=======
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	2b00      	cmp	r3, #0
 8108e60:	d103      	bne.n	8108e6a <xQueueGenericSend+0x12e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a15a:	f7ff fd43 	bl	8109be4 <vPortExitCritical>
=======
 8108e62:	f7ff fd51 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 810a15e:	2300      	movs	r3, #0
 810a160:	e05c      	b.n	810a21c <xQueueGenericSend+0x1f0>
=======
 8108e66:	2300      	movs	r3, #0
 8108e68:	e05c      	b.n	8108f24 <xQueueGenericSend+0x1e8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}
				else if( xEntryTimeSet == pdFALSE )
<<<<<<< HEAD
 810a162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a164:	2b00      	cmp	r3, #0
 810a166:	d106      	bne.n	810a176 <xQueueGenericSend+0x14a>
=======
 8108e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108e6c:	2b00      	cmp	r3, #0
 8108e6e:	d106      	bne.n	8108e7e <xQueueGenericSend+0x142>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 810a168:	f107 0314 	add.w	r3, r7, #20
 810a16c:	4618      	mov	r0, r3
 810a16e:	f000 ff65 	bl	810b03c <vTaskInternalSetTimeOutState>
=======
 8108e70:	f107 0314 	add.w	r3, r7, #20
 8108e74:	4618      	mov	r0, r3
 8108e76:	f000 fec9 	bl	8109c0c <vTaskInternalSetTimeOutState>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					xEntryTimeSet = pdTRUE;
<<<<<<< HEAD
 810a172:	2301      	movs	r3, #1
 810a174:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8108e7a:	2301      	movs	r3, #1
 8108e7c:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a176:	f7ff fd35 	bl	8109be4 <vPortExitCritical>
=======
 8108e7e:	f7ff fd43 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 810a17a:	f000 fd1b 	bl	810abb4 <vTaskSuspendAll>
=======
 8108e82:	f000 fc81 	bl	8109788 <vTaskSuspendAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 810a17e:	f7ff fd01 	bl	8109b84 <vPortEnterCritical>
 810a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a188:	b25b      	sxtb	r3, r3
 810a18a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a18e:	d103      	bne.n	810a198 <xQueueGenericSend+0x16c>
 810a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a192:	2200      	movs	r2, #0
 810a194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a19a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a19e:	b25b      	sxtb	r3, r3
 810a1a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a1a4:	d103      	bne.n	810a1ae <xQueueGenericSend+0x182>
 810a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a1a8:	2200      	movs	r2, #0
 810a1aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a1ae:	f7ff fd19 	bl	8109be4 <vPortExitCritical>
=======
 8108e86:	f7ff fd11 	bl	81088ac <vPortEnterCritical>
 8108e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8108e90:	b25b      	sxtb	r3, r3
 8108e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108e96:	d103      	bne.n	8108ea0 <xQueueGenericSend+0x164>
 8108e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e9a:	2200      	movs	r2, #0
 8108e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8108ea6:	b25b      	sxtb	r3, r3
 8108ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108eac:	d103      	bne.n	8108eb6 <xQueueGenericSend+0x17a>
 8108eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108eb0:	2200      	movs	r2, #0
 8108eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108eb6:	f7ff fd27 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
<<<<<<< HEAD
 810a1b2:	1d3a      	adds	r2, r7, #4
 810a1b4:	f107 0314 	add.w	r3, r7, #20
 810a1b8:	4611      	mov	r1, r2
 810a1ba:	4618      	mov	r0, r3
 810a1bc:	f000 ff54 	bl	810b068 <xTaskCheckForTimeOut>
 810a1c0:	4603      	mov	r3, r0
 810a1c2:	2b00      	cmp	r3, #0
 810a1c4:	d124      	bne.n	810a210 <xQueueGenericSend+0x1e4>
=======
 8108eba:	1d3a      	adds	r2, r7, #4
 8108ebc:	f107 0314 	add.w	r3, r7, #20
 8108ec0:	4611      	mov	r1, r2
 8108ec2:	4618      	mov	r0, r3
 8108ec4:	f000 feb8 	bl	8109c38 <xTaskCheckForTimeOut>
 8108ec8:	4603      	mov	r3, r0
 8108eca:	2b00      	cmp	r3, #0
 8108ecc:	d124      	bne.n	8108f18 <xQueueGenericSend+0x1dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 810a1c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a1c8:	f000 fa24 	bl	810a614 <prvIsQueueFull>
 810a1cc:	4603      	mov	r3, r0
 810a1ce:	2b00      	cmp	r3, #0
 810a1d0:	d018      	beq.n	810a204 <xQueueGenericSend+0x1d8>
=======
 8108ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108ed0:	f000 fa20 	bl	8109314 <prvIsQueueFull>
 8108ed4:	4603      	mov	r3, r0
 8108ed6:	2b00      	cmp	r3, #0
 8108ed8:	d018      	beq.n	8108f0c <xQueueGenericSend+0x1d0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
<<<<<<< HEAD
 810a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a1d4:	3310      	adds	r3, #16
 810a1d6:	687a      	ldr	r2, [r7, #4]
 810a1d8:	4611      	mov	r1, r2
 810a1da:	4618      	mov	r0, r3
 810a1dc:	f000 fea8 	bl	810af30 <vTaskPlaceOnEventList>
=======
 8108eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108edc:	3310      	adds	r3, #16
 8108ede:	687a      	ldr	r2, [r7, #4]
 8108ee0:	4611      	mov	r1, r2
 8108ee2:	4618      	mov	r0, r3
 8108ee4:	f000 fe0c 	bl	8109b00 <vTaskPlaceOnEventList>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 810a1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a1e2:	f000 f9af 	bl	810a544 <prvUnlockQueue>
=======
 8108ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108eea:	f000 f9ab 	bl	8109244 <prvUnlockQueue>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 810a1e6:	f000 fcf3 	bl	810abd0 <xTaskResumeAll>
 810a1ea:	4603      	mov	r3, r0
 810a1ec:	2b00      	cmp	r3, #0
 810a1ee:	f47f af7c 	bne.w	810a0ea <xQueueGenericSend+0xbe>
=======
 8108eee:	f000 fc59 	bl	81097a4 <xTaskResumeAll>
 8108ef2:	4603      	mov	r3, r0
 8108ef4:	2b00      	cmp	r3, #0
 8108ef6:	f47f af7c 	bne.w	8108df2 <xQueueGenericSend+0xb6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 810a1f2:	4b0c      	ldr	r3, [pc, #48]	; (810a224 <xQueueGenericSend+0x1f8>)
 810a1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a1f8:	601a      	str	r2, [r3, #0]
 810a1fa:	f3bf 8f4f 	dsb	sy
 810a1fe:	f3bf 8f6f 	isb	sy
 810a202:	e772      	b.n	810a0ea <xQueueGenericSend+0xbe>
=======
 8108efa:	4b0c      	ldr	r3, [pc, #48]	; (8108f2c <xQueueGenericSend+0x1f0>)
 8108efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108f00:	601a      	str	r2, [r3, #0]
 8108f02:	f3bf 8f4f 	dsb	sy
 8108f06:	f3bf 8f6f 	isb	sy
 8108f0a:	e772      	b.n	8108df2 <xQueueGenericSend+0xb6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 810a204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a206:	f000 f99d 	bl	810a544 <prvUnlockQueue>
=======
 8108f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108f0e:	f000 f999 	bl	8109244 <prvUnlockQueue>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				( void ) xTaskResumeAll();
<<<<<<< HEAD
 810a20a:	f000 fce1 	bl	810abd0 <xTaskResumeAll>
 810a20e:	e76c      	b.n	810a0ea <xQueueGenericSend+0xbe>
=======
 8108f12:	f000 fc47 	bl	81097a4 <xTaskResumeAll>
 8108f16:	e76c      	b.n	8108df2 <xQueueGenericSend+0xb6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 810a210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a212:	f000 f997 	bl	810a544 <prvUnlockQueue>
=======
 8108f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108f1a:	f000 f993 	bl	8109244 <prvUnlockQueue>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			( void ) xTaskResumeAll();
<<<<<<< HEAD
 810a216:	f000 fcdb 	bl	810abd0 <xTaskResumeAll>
=======
 8108f1e:	f000 fc41 	bl	81097a4 <xTaskResumeAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
<<<<<<< HEAD
 810a21a:	2300      	movs	r3, #0
=======
 8108f22:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 810a21c:	4618      	mov	r0, r3
 810a21e:	3738      	adds	r7, #56	; 0x38
 810a220:	46bd      	mov	sp, r7
 810a222:	bd80      	pop	{r7, pc}
 810a224:	e000ed04 	.word	0xe000ed04
=======
 8108f24:	4618      	mov	r0, r3
 8108f26:	3738      	adds	r7, #56	; 0x38
 8108f28:	46bd      	mov	sp, r7
 8108f2a:	bd80      	pop	{r7, pc}
 8108f2c:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a228 <xQueueSemaphoreTake>:
=======
08108f30 <xQueueSemaphoreTake>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 810a228:	b580      	push	{r7, lr}
 810a22a:	b08e      	sub	sp, #56	; 0x38
 810a22c:	af00      	add	r7, sp, #0
 810a22e:	6078      	str	r0, [r7, #4]
 810a230:	6039      	str	r1, [r7, #0]
=======
 8108f30:	b580      	push	{r7, lr}
 8108f32:	b08e      	sub	sp, #56	; 0x38
 8108f34:	af00      	add	r7, sp, #0
 8108f36:	6078      	str	r0, [r7, #4]
 8108f38:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BaseType_t xEntryTimeSet = pdFALSE;
<<<<<<< HEAD
 810a232:	2300      	movs	r3, #0
 810a234:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8108f3a:	2300      	movs	r3, #0
 8108f3c:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
<<<<<<< HEAD
 810a236:	687b      	ldr	r3, [r7, #4]
 810a238:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8108f3e:	687b      	ldr	r3, [r7, #4]
 8108f40:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
<<<<<<< HEAD
 810a23a:	2300      	movs	r3, #0
 810a23c:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8108f42:	2300      	movs	r3, #0
 8108f44:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< HEAD
 810a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a240:	2b00      	cmp	r3, #0
 810a242:	d10a      	bne.n	810a25a <xQueueSemaphoreTake+0x32>
	__asm volatile
 810a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a248:	f383 8811 	msr	BASEPRI, r3
 810a24c:	f3bf 8f6f 	isb	sy
 810a250:	f3bf 8f4f 	dsb	sy
 810a254:	623b      	str	r3, [r7, #32]
}
 810a256:	bf00      	nop
 810a258:	e7fe      	b.n	810a258 <xQueueSemaphoreTake+0x30>
=======
 8108f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108f48:	2b00      	cmp	r3, #0
 8108f4a:	d109      	bne.n	8108f60 <xQueueSemaphoreTake+0x30>
 8108f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f50:	f383 8811 	msr	BASEPRI, r3
 8108f54:	f3bf 8f6f 	isb	sy
 8108f58:	f3bf 8f4f 	dsb	sy
 8108f5c:	623b      	str	r3, [r7, #32]
 8108f5e:	e7fe      	b.n	8108f5e <xQueueSemaphoreTake+0x2e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< HEAD
 810a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a25e:	2b00      	cmp	r3, #0
 810a260:	d00a      	beq.n	810a278 <xQueueSemaphoreTake+0x50>
	__asm volatile
 810a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a266:	f383 8811 	msr	BASEPRI, r3
 810a26a:	f3bf 8f6f 	isb	sy
 810a26e:	f3bf 8f4f 	dsb	sy
 810a272:	61fb      	str	r3, [r7, #28]
}
 810a274:	bf00      	nop
 810a276:	e7fe      	b.n	810a276 <xQueueSemaphoreTake+0x4e>
=======
 8108f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108f64:	2b00      	cmp	r3, #0
 8108f66:	d009      	beq.n	8108f7c <xQueueSemaphoreTake+0x4c>
 8108f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f6c:	f383 8811 	msr	BASEPRI, r3
 8108f70:	f3bf 8f6f 	isb	sy
 8108f74:	f3bf 8f4f 	dsb	sy
 8108f78:	61fb      	str	r3, [r7, #28]
 8108f7a:	e7fe      	b.n	8108f7a <xQueueSemaphoreTake+0x4a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 810a278:	f001 f83a 	bl	810b2f0 <xTaskGetSchedulerState>
 810a27c:	4603      	mov	r3, r0
 810a27e:	2b00      	cmp	r3, #0
 810a280:	d102      	bne.n	810a288 <xQueueSemaphoreTake+0x60>
 810a282:	683b      	ldr	r3, [r7, #0]
 810a284:	2b00      	cmp	r3, #0
 810a286:	d101      	bne.n	810a28c <xQueueSemaphoreTake+0x64>
 810a288:	2301      	movs	r3, #1
 810a28a:	e000      	b.n	810a28e <xQueueSemaphoreTake+0x66>
 810a28c:	2300      	movs	r3, #0
 810a28e:	2b00      	cmp	r3, #0
 810a290:	d10a      	bne.n	810a2a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 810a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a296:	f383 8811 	msr	BASEPRI, r3
 810a29a:	f3bf 8f6f 	isb	sy
 810a29e:	f3bf 8f4f 	dsb	sy
 810a2a2:	61bb      	str	r3, [r7, #24]
}
 810a2a4:	bf00      	nop
 810a2a6:	e7fe      	b.n	810a2a6 <xQueueSemaphoreTake+0x7e>
=======
 8108f7c:	f000 ff9a 	bl	8109eb4 <xTaskGetSchedulerState>
 8108f80:	4603      	mov	r3, r0
 8108f82:	2b00      	cmp	r3, #0
 8108f84:	d102      	bne.n	8108f8c <xQueueSemaphoreTake+0x5c>
 8108f86:	683b      	ldr	r3, [r7, #0]
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d101      	bne.n	8108f90 <xQueueSemaphoreTake+0x60>
 8108f8c:	2301      	movs	r3, #1
 8108f8e:	e000      	b.n	8108f92 <xQueueSemaphoreTake+0x62>
 8108f90:	2300      	movs	r3, #0
 8108f92:	2b00      	cmp	r3, #0
 8108f94:	d109      	bne.n	8108faa <xQueueSemaphoreTake+0x7a>
 8108f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f9a:	f383 8811 	msr	BASEPRI, r3
 8108f9e:	f3bf 8f6f 	isb	sy
 8108fa2:	f3bf 8f4f 	dsb	sy
 8108fa6:	61bb      	str	r3, [r7, #24]
 8108fa8:	e7fe      	b.n	8108fa8 <xQueueSemaphoreTake+0x78>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 810a2a8:	f7ff fc6c 	bl	8109b84 <vPortEnterCritical>
=======
 8108faa:	f7ff fc7f 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 810a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8108fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108fb2:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 810a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a2b4:	2b00      	cmp	r3, #0
 810a2b6:	d024      	beq.n	810a302 <xQueueSemaphoreTake+0xda>
=======
 8108fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108fb6:	2b00      	cmp	r3, #0
 8108fb8:	d024      	beq.n	8109004 <xQueueSemaphoreTake+0xd4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
<<<<<<< HEAD
 810a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a2ba:	1e5a      	subs	r2, r3, #1
 810a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2be:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8108fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108fbc:	1e5a      	subs	r2, r3, #1
 8108fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fc0:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 810a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2c2:	681b      	ldr	r3, [r3, #0]
 810a2c4:	2b00      	cmp	r3, #0
 810a2c6:	d104      	bne.n	810a2d2 <xQueueSemaphoreTake+0xaa>
=======
 8108fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fc4:	681b      	ldr	r3, [r3, #0]
 8108fc6:	2b00      	cmp	r3, #0
 8108fc8:	d104      	bne.n	8108fd4 <xQueueSemaphoreTake+0xa4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
<<<<<<< HEAD
 810a2c8:	f001 f9d0 	bl	810b66c <pvTaskIncrementMutexHeldCount>
 810a2cc:	4602      	mov	r2, r0
 810a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2d0:	609a      	str	r2, [r3, #8]
=======
 8108fca:	f001 f92d 	bl	810a228 <pvTaskIncrementMutexHeldCount>
 8108fce:	4602      	mov	r2, r0
 8108fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fd2:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 810a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2d4:	691b      	ldr	r3, [r3, #16]
 810a2d6:	2b00      	cmp	r3, #0
 810a2d8:	d00f      	beq.n	810a2fa <xQueueSemaphoreTake+0xd2>
=======
 8108fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fd6:	691b      	ldr	r3, [r3, #16]
 8108fd8:	2b00      	cmp	r3, #0
 8108fda:	d00f      	beq.n	8108ffc <xQueueSemaphoreTake+0xcc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
<<<<<<< HEAD
 810a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2dc:	3310      	adds	r3, #16
 810a2de:	4618      	mov	r0, r3
 810a2e0:	f000 fe4a 	bl	810af78 <xTaskRemoveFromEventList>
 810a2e4:	4603      	mov	r3, r0
 810a2e6:	2b00      	cmp	r3, #0
 810a2e8:	d007      	beq.n	810a2fa <xQueueSemaphoreTake+0xd2>
=======
 8108fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fde:	3310      	adds	r3, #16
 8108fe0:	4618      	mov	r0, r3
 8108fe2:	f000 fdb1 	bl	8109b48 <xTaskRemoveFromEventList>
 8108fe6:	4603      	mov	r3, r0
 8108fe8:	2b00      	cmp	r3, #0
 8108fea:	d007      	beq.n	8108ffc <xQueueSemaphoreTake+0xcc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 810a2ea:	4b54      	ldr	r3, [pc, #336]	; (810a43c <xQueueSemaphoreTake+0x214>)
 810a2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a2f0:	601a      	str	r2, [r3, #0]
 810a2f2:	f3bf 8f4f 	dsb	sy
 810a2f6:	f3bf 8f6f 	isb	sy
=======
 8108fec:	4b53      	ldr	r3, [pc, #332]	; (810913c <xQueueSemaphoreTake+0x20c>)
 8108fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108ff2:	601a      	str	r2, [r3, #0]
 8108ff4:	f3bf 8f4f 	dsb	sy
 8108ff8:	f3bf 8f6f 	isb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a2fa:	f7ff fc73 	bl	8109be4 <vPortExitCritical>
=======
 8108ffc:	f7ff fc84 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				return pdPASS;
<<<<<<< HEAD
 810a2fe:	2301      	movs	r3, #1
 810a300:	e097      	b.n	810a432 <xQueueSemaphoreTake+0x20a>
=======
 8109000:	2301      	movs	r3, #1
 8109002:	e096      	b.n	8109132 <xQueueSemaphoreTake+0x202>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 810a302:	683b      	ldr	r3, [r7, #0]
 810a304:	2b00      	cmp	r3, #0
 810a306:	d111      	bne.n	810a32c <xQueueSemaphoreTake+0x104>
=======
 8109004:	683b      	ldr	r3, [r7, #0]
 8109006:	2b00      	cmp	r3, #0
 8109008:	d110      	bne.n	810902c <xQueueSemaphoreTake+0xfc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
<<<<<<< HEAD
 810a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a30a:	2b00      	cmp	r3, #0
 810a30c:	d00a      	beq.n	810a324 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 810a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a312:	f383 8811 	msr	BASEPRI, r3
 810a316:	f3bf 8f6f 	isb	sy
 810a31a:	f3bf 8f4f 	dsb	sy
 810a31e:	617b      	str	r3, [r7, #20]
}
 810a320:	bf00      	nop
 810a322:	e7fe      	b.n	810a322 <xQueueSemaphoreTake+0xfa>
=======
 810900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810900c:	2b00      	cmp	r3, #0
 810900e:	d009      	beq.n	8109024 <xQueueSemaphoreTake+0xf4>
 8109010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109014:	f383 8811 	msr	BASEPRI, r3
 8109018:	f3bf 8f6f 	isb	sy
 810901c:	f3bf 8f4f 	dsb	sy
 8109020:	617b      	str	r3, [r7, #20]
 8109022:	e7fe      	b.n	8109022 <xQueueSemaphoreTake+0xf2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a324:	f7ff fc5e 	bl	8109be4 <vPortExitCritical>
=======
 8109024:	f7ff fc70 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
<<<<<<< HEAD
 810a328:	2300      	movs	r3, #0
 810a32a:	e082      	b.n	810a432 <xQueueSemaphoreTake+0x20a>
=======
 8109028:	2300      	movs	r3, #0
 810902a:	e082      	b.n	8109132 <xQueueSemaphoreTake+0x202>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}
				else if( xEntryTimeSet == pdFALSE )
<<<<<<< HEAD
 810a32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a32e:	2b00      	cmp	r3, #0
 810a330:	d106      	bne.n	810a340 <xQueueSemaphoreTake+0x118>
=======
 810902c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810902e:	2b00      	cmp	r3, #0
 8109030:	d106      	bne.n	8109040 <xQueueSemaphoreTake+0x110>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 810a332:	f107 030c 	add.w	r3, r7, #12
 810a336:	4618      	mov	r0, r3
 810a338:	f000 fe80 	bl	810b03c <vTaskInternalSetTimeOutState>
=======
 8109032:	f107 030c 	add.w	r3, r7, #12
 8109036:	4618      	mov	r0, r3
 8109038:	f000 fde8 	bl	8109c0c <vTaskInternalSetTimeOutState>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					xEntryTimeSet = pdTRUE;
<<<<<<< HEAD
 810a33c:	2301      	movs	r3, #1
 810a33e:	637b      	str	r3, [r7, #52]	; 0x34
=======
 810903c:	2301      	movs	r3, #1
 810903e:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a340:	f7ff fc50 	bl	8109be4 <vPortExitCritical>
=======
 8109040:	f7ff fc62 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 810a344:	f000 fc36 	bl	810abb4 <vTaskSuspendAll>
=======
 8109044:	f000 fba0 	bl	8109788 <vTaskSuspendAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 810a348:	f7ff fc1c 	bl	8109b84 <vPortEnterCritical>
 810a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a34e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a352:	b25b      	sxtb	r3, r3
 810a354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a358:	d103      	bne.n	810a362 <xQueueSemaphoreTake+0x13a>
 810a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a35c:	2200      	movs	r2, #0
 810a35e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a368:	b25b      	sxtb	r3, r3
 810a36a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a36e:	d103      	bne.n	810a378 <xQueueSemaphoreTake+0x150>
 810a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a372:	2200      	movs	r2, #0
 810a374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a378:	f7ff fc34 	bl	8109be4 <vPortExitCritical>
=======
 8109048:	f7ff fc30 	bl	81088ac <vPortEnterCritical>
 810904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810904e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109052:	b25b      	sxtb	r3, r3
 8109054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109058:	d103      	bne.n	8109062 <xQueueSemaphoreTake+0x132>
 810905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810905c:	2200      	movs	r2, #0
 810905e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109068:	b25b      	sxtb	r3, r3
 810906a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810906e:	d103      	bne.n	8109078 <xQueueSemaphoreTake+0x148>
 8109070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109072:	2200      	movs	r2, #0
 8109074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109078:	f7ff fc46 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
<<<<<<< HEAD
 810a37c:	463a      	mov	r2, r7
 810a37e:	f107 030c 	add.w	r3, r7, #12
 810a382:	4611      	mov	r1, r2
 810a384:	4618      	mov	r0, r3
 810a386:	f000 fe6f 	bl	810b068 <xTaskCheckForTimeOut>
 810a38a:	4603      	mov	r3, r0
 810a38c:	2b00      	cmp	r3, #0
 810a38e:	d132      	bne.n	810a3f6 <xQueueSemaphoreTake+0x1ce>
=======
 810907c:	463a      	mov	r2, r7
 810907e:	f107 030c 	add.w	r3, r7, #12
 8109082:	4611      	mov	r1, r2
 8109084:	4618      	mov	r0, r3
 8109086:	f000 fdd7 	bl	8109c38 <xTaskCheckForTimeOut>
 810908a:	4603      	mov	r3, r0
 810908c:	2b00      	cmp	r3, #0
 810908e:	d132      	bne.n	81090f6 <xQueueSemaphoreTake+0x1c6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 810a390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a392:	f000 f929 	bl	810a5e8 <prvIsQueueEmpty>
 810a396:	4603      	mov	r3, r0
 810a398:	2b00      	cmp	r3, #0
 810a39a:	d026      	beq.n	810a3ea <xQueueSemaphoreTake+0x1c2>
=======
 8109090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109092:	f000 f929 	bl	81092e8 <prvIsQueueEmpty>
 8109096:	4603      	mov	r3, r0
 8109098:	2b00      	cmp	r3, #0
 810909a:	d026      	beq.n	81090ea <xQueueSemaphoreTake+0x1ba>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 810a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a39e:	681b      	ldr	r3, [r3, #0]
 810a3a0:	2b00      	cmp	r3, #0
 810a3a2:	d109      	bne.n	810a3b8 <xQueueSemaphoreTake+0x190>
=======
 810909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810909e:	681b      	ldr	r3, [r3, #0]
 81090a0:	2b00      	cmp	r3, #0
 81090a2:	d109      	bne.n	81090b8 <xQueueSemaphoreTake+0x188>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						taskENTER_CRITICAL();
<<<<<<< HEAD
 810a3a4:	f7ff fbee 	bl	8109b84 <vPortEnterCritical>
=======
 81090a4:	f7ff fc02 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
<<<<<<< HEAD
 810a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3aa:	689b      	ldr	r3, [r3, #8]
 810a3ac:	4618      	mov	r0, r3
 810a3ae:	f000 ffbd 	bl	810b32c <xTaskPriorityInherit>
 810a3b2:	6338      	str	r0, [r7, #48]	; 0x30
=======
 81090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81090aa:	689b      	ldr	r3, [r3, #8]
 81090ac:	4618      	mov	r0, r3
 81090ae:	f000 ff1f 	bl	8109ef0 <xTaskPriorityInherit>
 81090b2:	6338      	str	r0, [r7, #48]	; 0x30
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						}
						taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a3b4:	f7ff fc16 	bl	8109be4 <vPortExitCritical>
=======
 81090b4:	f7ff fc28 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< HEAD
 810a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3ba:	3324      	adds	r3, #36	; 0x24
 810a3bc:	683a      	ldr	r2, [r7, #0]
 810a3be:	4611      	mov	r1, r2
 810a3c0:	4618      	mov	r0, r3
 810a3c2:	f000 fdb5 	bl	810af30 <vTaskPlaceOnEventList>
=======
 81090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81090ba:	3324      	adds	r3, #36	; 0x24
 81090bc:	683a      	ldr	r2, [r7, #0]
 81090be:	4611      	mov	r1, r2
 81090c0:	4618      	mov	r0, r3
 81090c2:	f000 fd1d 	bl	8109b00 <vTaskPlaceOnEventList>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 810a3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a3c8:	f000 f8bc 	bl	810a544 <prvUnlockQueue>
=======
 81090c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81090c8:	f000 f8bc 	bl	8109244 <prvUnlockQueue>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 810a3cc:	f000 fc00 	bl	810abd0 <xTaskResumeAll>
 810a3d0:	4603      	mov	r3, r0
 810a3d2:	2b00      	cmp	r3, #0
 810a3d4:	f47f af68 	bne.w	810a2a8 <xQueueSemaphoreTake+0x80>
=======
 81090cc:	f000 fb6a 	bl	81097a4 <xTaskResumeAll>
 81090d0:	4603      	mov	r3, r0
 81090d2:	2b00      	cmp	r3, #0
 81090d4:	f47f af69 	bne.w	8108faa <xQueueSemaphoreTake+0x7a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 810a3d8:	4b18      	ldr	r3, [pc, #96]	; (810a43c <xQueueSemaphoreTake+0x214>)
 810a3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a3de:	601a      	str	r2, [r3, #0]
 810a3e0:	f3bf 8f4f 	dsb	sy
 810a3e4:	f3bf 8f6f 	isb	sy
 810a3e8:	e75e      	b.n	810a2a8 <xQueueSemaphoreTake+0x80>
=======
 81090d8:	4b18      	ldr	r3, [pc, #96]	; (810913c <xQueueSemaphoreTake+0x20c>)
 81090da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81090de:	601a      	str	r2, [r3, #0]
 81090e0:	f3bf 8f4f 	dsb	sy
 81090e4:	f3bf 8f6f 	isb	sy
 81090e8:	e75f      	b.n	8108faa <xQueueSemaphoreTake+0x7a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 810a3ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a3ec:	f000 f8aa 	bl	810a544 <prvUnlockQueue>
=======
 81090ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81090ec:	f000 f8aa 	bl	8109244 <prvUnlockQueue>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				( void ) xTaskResumeAll();
<<<<<<< HEAD
 810a3f0:	f000 fbee 	bl	810abd0 <xTaskResumeAll>
 810a3f4:	e758      	b.n	810a2a8 <xQueueSemaphoreTake+0x80>
=======
 81090f0:	f000 fb58 	bl	81097a4 <xTaskResumeAll>
 81090f4:	e759      	b.n	8108faa <xQueueSemaphoreTake+0x7a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 810a3f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a3f8:	f000 f8a4 	bl	810a544 <prvUnlockQueue>
=======
 81090f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81090f8:	f000 f8a4 	bl	8109244 <prvUnlockQueue>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			( void ) xTaskResumeAll();
<<<<<<< HEAD
 810a3fc:	f000 fbe8 	bl	810abd0 <xTaskResumeAll>
=======
 81090fc:	f000 fb52 	bl	81097a4 <xTaskResumeAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 810a400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a402:	f000 f8f1 	bl	810a5e8 <prvIsQueueEmpty>
 810a406:	4603      	mov	r3, r0
 810a408:	2b00      	cmp	r3, #0
 810a40a:	f43f af4d 	beq.w	810a2a8 <xQueueSemaphoreTake+0x80>
=======
 8109100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109102:	f000 f8f1 	bl	81092e8 <prvIsQueueEmpty>
 8109106:	4603      	mov	r3, r0
 8109108:	2b00      	cmp	r3, #0
 810910a:	f43f af4e 	beq.w	8108faa <xQueueSemaphoreTake+0x7a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
<<<<<<< HEAD
 810a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a410:	2b00      	cmp	r3, #0
 810a412:	d00d      	beq.n	810a430 <xQueueSemaphoreTake+0x208>
=======
 810910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109110:	2b00      	cmp	r3, #0
 8109112:	d00d      	beq.n	8109130 <xQueueSemaphoreTake+0x200>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						taskENTER_CRITICAL();
<<<<<<< HEAD
 810a414:	f7ff fbb6 	bl	8109b84 <vPortEnterCritical>
=======
 8109114:	f7ff fbca 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
<<<<<<< HEAD
 810a418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a41a:	f000 f811 	bl	810a440 <prvGetDisinheritPriorityAfterTimeout>
 810a41e:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8109118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810911a:	f000 f811 	bl	8109140 <prvGetDisinheritPriorityAfterTimeout>
 810911e:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
<<<<<<< HEAD
 810a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a422:	689b      	ldr	r3, [r3, #8]
 810a424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810a426:	4618      	mov	r0, r3
 810a428:	f001 f886 	bl	810b538 <vTaskPriorityDisinheritAfterTimeout>
=======
 8109120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109122:	689b      	ldr	r3, [r3, #8]
 8109124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8109126:	4618      	mov	r0, r3
 8109128:	f000 ffe6 	bl	810a0f8 <vTaskPriorityDisinheritAfterTimeout>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						}
						taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a42c:	f7ff fbda 	bl	8109be4 <vPortExitCritical>
=======
 810912c:	f7ff fbec 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< HEAD
 810a430:	2300      	movs	r3, #0
=======
 8109130:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 810a432:	4618      	mov	r0, r3
 810a434:	3738      	adds	r7, #56	; 0x38
 810a436:	46bd      	mov	sp, r7
 810a438:	bd80      	pop	{r7, pc}
 810a43a:	bf00      	nop
 810a43c:	e000ed04 	.word	0xe000ed04
=======
 8109132:	4618      	mov	r0, r3
 8109134:	3738      	adds	r7, #56	; 0x38
 8109136:	46bd      	mov	sp, r7
 8109138:	bd80      	pop	{r7, pc}
 810913a:	bf00      	nop
 810913c:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a440 <prvGetDisinheritPriorityAfterTimeout>:
=======
08109140 <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< HEAD
 810a440:	b480      	push	{r7}
 810a442:	b085      	sub	sp, #20
 810a444:	af00      	add	r7, sp, #0
 810a446:	6078      	str	r0, [r7, #4]
=======
 8109140:	b480      	push	{r7}
 8109142:	b085      	sub	sp, #20
 8109144:	af00      	add	r7, sp, #0
 8109146:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
<<<<<<< HEAD
 810a448:	687b      	ldr	r3, [r7, #4]
 810a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a44c:	2b00      	cmp	r3, #0
 810a44e:	d006      	beq.n	810a45e <prvGetDisinheritPriorityAfterTimeout+0x1e>
=======
 8109148:	687b      	ldr	r3, [r7, #4]
 810914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810914c:	2b00      	cmp	r3, #0
 810914e:	d006      	beq.n	810915e <prvGetDisinheritPriorityAfterTimeout+0x1e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
<<<<<<< HEAD
 810a450:	687b      	ldr	r3, [r7, #4]
 810a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a454:	681b      	ldr	r3, [r3, #0]
 810a456:	f1c3 0307 	rsb	r3, r3, #7
 810a45a:	60fb      	str	r3, [r7, #12]
 810a45c:	e001      	b.n	810a462 <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 8109150:	687b      	ldr	r3, [r7, #4]
 8109152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109154:	681b      	ldr	r3, [r3, #0]
 8109156:	f1c3 0307 	rsb	r3, r3, #7
 810915a:	60fb      	str	r3, [r7, #12]
 810915c:	e001      	b.n	8109162 <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< HEAD
 810a45e:	2300      	movs	r3, #0
 810a460:	60fb      	str	r3, [r7, #12]
=======
 810915e:	2300      	movs	r3, #0
 8109160:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		return uxHighestPriorityOfWaitingTasks;
<<<<<<< HEAD
 810a462:	68fb      	ldr	r3, [r7, #12]
=======
 8109162:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810a464:	4618      	mov	r0, r3
 810a466:	3714      	adds	r7, #20
 810a468:	46bd      	mov	sp, r7
 810a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a46e:	4770      	bx	lr
=======
 8109164:	4618      	mov	r0, r3
 8109166:	3714      	adds	r7, #20
 8109168:	46bd      	mov	sp, r7
 810916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810916e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a470 <prvCopyDataToQueue>:
=======
08109170 <prvCopyDataToQueue>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 810a470:	b580      	push	{r7, lr}
 810a472:	b086      	sub	sp, #24
 810a474:	af00      	add	r7, sp, #0
 810a476:	60f8      	str	r0, [r7, #12]
 810a478:	60b9      	str	r1, [r7, #8]
 810a47a:	607a      	str	r2, [r7, #4]
=======
 8109170:	b580      	push	{r7, lr}
 8109172:	b086      	sub	sp, #24
 8109174:	af00      	add	r7, sp, #0
 8109176:	60f8      	str	r0, [r7, #12]
 8109178:	60b9      	str	r1, [r7, #8]
 810917a:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BaseType_t xReturn = pdFALSE;
<<<<<<< HEAD
 810a47c:	2300      	movs	r3, #0
 810a47e:	617b      	str	r3, [r7, #20]
=======
 810917c:	2300      	movs	r3, #0
 810917e:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 810a480:	68fb      	ldr	r3, [r7, #12]
 810a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a484:	613b      	str	r3, [r7, #16]
=======
 8109180:	68fb      	ldr	r3, [r7, #12]
 8109182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109184:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 810a486:	68fb      	ldr	r3, [r7, #12]
 810a488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a48a:	2b00      	cmp	r3, #0
 810a48c:	d10d      	bne.n	810a4aa <prvCopyDataToQueue+0x3a>
=======
 8109186:	68fb      	ldr	r3, [r7, #12]
 8109188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810918a:	2b00      	cmp	r3, #0
 810918c:	d10d      	bne.n	81091aa <prvCopyDataToQueue+0x3a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 810a48e:	68fb      	ldr	r3, [r7, #12]
 810a490:	681b      	ldr	r3, [r3, #0]
 810a492:	2b00      	cmp	r3, #0
 810a494:	d14d      	bne.n	810a532 <prvCopyDataToQueue+0xc2>
=======
 810918e:	68fb      	ldr	r3, [r7, #12]
 8109190:	681b      	ldr	r3, [r3, #0]
 8109192:	2b00      	cmp	r3, #0
 8109194:	d14d      	bne.n	8109232 <prvCopyDataToQueue+0xc2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
<<<<<<< HEAD
 810a496:	68fb      	ldr	r3, [r7, #12]
 810a498:	689b      	ldr	r3, [r3, #8]
 810a49a:	4618      	mov	r0, r3
 810a49c:	f000 ffc6 	bl	810b42c <xTaskPriorityDisinherit>
 810a4a0:	6178      	str	r0, [r7, #20]
=======
 8109196:	68fb      	ldr	r3, [r7, #12]
 8109198:	689b      	ldr	r3, [r3, #8]
 810919a:	4618      	mov	r0, r3
 810919c:	f000 ff28 	bl	8109ff0 <xTaskPriorityDisinherit>
 81091a0:	6178      	str	r0, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
<<<<<<< HEAD
 810a4a2:	68fb      	ldr	r3, [r7, #12]
 810a4a4:	2200      	movs	r2, #0
 810a4a6:	609a      	str	r2, [r3, #8]
 810a4a8:	e043      	b.n	810a532 <prvCopyDataToQueue+0xc2>
=======
 81091a2:	68fb      	ldr	r3, [r7, #12]
 81091a4:	2200      	movs	r2, #0
 81091a6:	609a      	str	r2, [r3, #8]
 81091a8:	e043      	b.n	8109232 <prvCopyDataToQueue+0xc2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 810a4aa:	687b      	ldr	r3, [r7, #4]
 810a4ac:	2b00      	cmp	r3, #0
 810a4ae:	d119      	bne.n	810a4e4 <prvCopyDataToQueue+0x74>
=======
 81091aa:	687b      	ldr	r3, [r7, #4]
 81091ac:	2b00      	cmp	r3, #0
 81091ae:	d119      	bne.n	81091e4 <prvCopyDataToQueue+0x74>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 810a4b0:	68fb      	ldr	r3, [r7, #12]
 810a4b2:	6858      	ldr	r0, [r3, #4]
 810a4b4:	68fb      	ldr	r3, [r7, #12]
 810a4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4b8:	461a      	mov	r2, r3
 810a4ba:	68b9      	ldr	r1, [r7, #8]
 810a4bc:	f006 fe54 	bl	8111168 <memcpy>
=======
 81091b0:	68fb      	ldr	r3, [r7, #12]
 81091b2:	6858      	ldr	r0, [r3, #4]
 81091b4:	68fb      	ldr	r3, [r7, #12]
 81091b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091b8:	461a      	mov	r2, r3
 81091ba:	68b9      	ldr	r1, [r7, #8]
 81091bc:	f004 ffdc 	bl	810e178 <memcpy>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
<<<<<<< HEAD
 810a4c0:	68fb      	ldr	r3, [r7, #12]
 810a4c2:	685a      	ldr	r2, [r3, #4]
 810a4c4:	68fb      	ldr	r3, [r7, #12]
 810a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4c8:	441a      	add	r2, r3
 810a4ca:	68fb      	ldr	r3, [r7, #12]
 810a4cc:	605a      	str	r2, [r3, #4]
=======
 81091c0:	68fb      	ldr	r3, [r7, #12]
 81091c2:	685a      	ldr	r2, [r3, #4]
 81091c4:	68fb      	ldr	r3, [r7, #12]
 81091c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091c8:	441a      	add	r2, r3
 81091ca:	68fb      	ldr	r3, [r7, #12]
 81091cc:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
<<<<<<< HEAD
 810a4ce:	68fb      	ldr	r3, [r7, #12]
 810a4d0:	685a      	ldr	r2, [r3, #4]
 810a4d2:	68fb      	ldr	r3, [r7, #12]
 810a4d4:	689b      	ldr	r3, [r3, #8]
 810a4d6:	429a      	cmp	r2, r3
 810a4d8:	d32b      	bcc.n	810a532 <prvCopyDataToQueue+0xc2>
=======
 81091ce:	68fb      	ldr	r3, [r7, #12]
 81091d0:	685a      	ldr	r2, [r3, #4]
 81091d2:	68fb      	ldr	r3, [r7, #12]
 81091d4:	689b      	ldr	r3, [r3, #8]
 81091d6:	429a      	cmp	r2, r3
 81091d8:	d32b      	bcc.n	8109232 <prvCopyDataToQueue+0xc2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
<<<<<<< HEAD
 810a4da:	68fb      	ldr	r3, [r7, #12]
 810a4dc:	681a      	ldr	r2, [r3, #0]
 810a4de:	68fb      	ldr	r3, [r7, #12]
 810a4e0:	605a      	str	r2, [r3, #4]
 810a4e2:	e026      	b.n	810a532 <prvCopyDataToQueue+0xc2>
=======
 81091da:	68fb      	ldr	r3, [r7, #12]
 81091dc:	681a      	ldr	r2, [r3, #0]
 81091de:	68fb      	ldr	r3, [r7, #12]
 81091e0:	605a      	str	r2, [r3, #4]
 81091e2:	e026      	b.n	8109232 <prvCopyDataToQueue+0xc2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 810a4e4:	68fb      	ldr	r3, [r7, #12]
 810a4e6:	68d8      	ldr	r0, [r3, #12]
 810a4e8:	68fb      	ldr	r3, [r7, #12]
 810a4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4ec:	461a      	mov	r2, r3
 810a4ee:	68b9      	ldr	r1, [r7, #8]
 810a4f0:	f006 fe3a 	bl	8111168 <memcpy>
=======
 81091e4:	68fb      	ldr	r3, [r7, #12]
 81091e6:	68d8      	ldr	r0, [r3, #12]
 81091e8:	68fb      	ldr	r3, [r7, #12]
 81091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091ec:	461a      	mov	r2, r3
 81091ee:	68b9      	ldr	r1, [r7, #8]
 81091f0:	f004 ffc2 	bl	810e178 <memcpy>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
<<<<<<< HEAD
 810a4f4:	68fb      	ldr	r3, [r7, #12]
 810a4f6:	68da      	ldr	r2, [r3, #12]
 810a4f8:	68fb      	ldr	r3, [r7, #12]
 810a4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4fc:	425b      	negs	r3, r3
 810a4fe:	441a      	add	r2, r3
 810a500:	68fb      	ldr	r3, [r7, #12]
 810a502:	60da      	str	r2, [r3, #12]
=======
 81091f4:	68fb      	ldr	r3, [r7, #12]
 81091f6:	68da      	ldr	r2, [r3, #12]
 81091f8:	68fb      	ldr	r3, [r7, #12]
 81091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091fc:	425b      	negs	r3, r3
 81091fe:	441a      	add	r2, r3
 8109200:	68fb      	ldr	r3, [r7, #12]
 8109202:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
<<<<<<< HEAD
 810a504:	68fb      	ldr	r3, [r7, #12]
 810a506:	68da      	ldr	r2, [r3, #12]
 810a508:	68fb      	ldr	r3, [r7, #12]
 810a50a:	681b      	ldr	r3, [r3, #0]
 810a50c:	429a      	cmp	r2, r3
 810a50e:	d207      	bcs.n	810a520 <prvCopyDataToQueue+0xb0>
=======
 8109204:	68fb      	ldr	r3, [r7, #12]
 8109206:	68da      	ldr	r2, [r3, #12]
 8109208:	68fb      	ldr	r3, [r7, #12]
 810920a:	681b      	ldr	r3, [r3, #0]
 810920c:	429a      	cmp	r2, r3
 810920e:	d207      	bcs.n	8109220 <prvCopyDataToQueue+0xb0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
<<<<<<< HEAD
 810a510:	68fb      	ldr	r3, [r7, #12]
 810a512:	689a      	ldr	r2, [r3, #8]
 810a514:	68fb      	ldr	r3, [r7, #12]
 810a516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a518:	425b      	negs	r3, r3
 810a51a:	441a      	add	r2, r3
 810a51c:	68fb      	ldr	r3, [r7, #12]
 810a51e:	60da      	str	r2, [r3, #12]
=======
 8109210:	68fb      	ldr	r3, [r7, #12]
 8109212:	689a      	ldr	r2, [r3, #8]
 8109214:	68fb      	ldr	r3, [r7, #12]
 8109216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109218:	425b      	negs	r3, r3
 810921a:	441a      	add	r2, r3
 810921c:	68fb      	ldr	r3, [r7, #12]
 810921e:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 810a520:	687b      	ldr	r3, [r7, #4]
 810a522:	2b02      	cmp	r3, #2
 810a524:	d105      	bne.n	810a532 <prvCopyDataToQueue+0xc2>
=======
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	2b02      	cmp	r3, #2
 8109224:	d105      	bne.n	8109232 <prvCopyDataToQueue+0xc2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 810a526:	693b      	ldr	r3, [r7, #16]
 810a528:	2b00      	cmp	r3, #0
 810a52a:	d002      	beq.n	810a532 <prvCopyDataToQueue+0xc2>
=======
 8109226:	693b      	ldr	r3, [r7, #16]
 8109228:	2b00      	cmp	r3, #0
 810922a:	d002      	beq.n	8109232 <prvCopyDataToQueue+0xc2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 810a52c:	693b      	ldr	r3, [r7, #16]
 810a52e:	3b01      	subs	r3, #1
 810a530:	613b      	str	r3, [r7, #16]
=======
 810922c:	693b      	ldr	r3, [r7, #16]
 810922e:	3b01      	subs	r3, #1
 8109230:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 810a532:	693b      	ldr	r3, [r7, #16]
 810a534:	1c5a      	adds	r2, r3, #1
 810a536:	68fb      	ldr	r3, [r7, #12]
 810a538:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8109232:	693b      	ldr	r3, [r7, #16]
 8109234:	1c5a      	adds	r2, r3, #1
 8109236:	68fb      	ldr	r3, [r7, #12]
 8109238:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	return xReturn;
<<<<<<< HEAD
 810a53a:	697b      	ldr	r3, [r7, #20]
=======
 810923a:	697b      	ldr	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810a53c:	4618      	mov	r0, r3
 810a53e:	3718      	adds	r7, #24
 810a540:	46bd      	mov	sp, r7
 810a542:	bd80      	pop	{r7, pc}
=======
 810923c:	4618      	mov	r0, r3
 810923e:	3718      	adds	r7, #24
 8109240:	46bd      	mov	sp, r7
 8109242:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a544 <prvUnlockQueue>:
=======
08109244 <prvUnlockQueue>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 810a544:	b580      	push	{r7, lr}
 810a546:	b084      	sub	sp, #16
 810a548:	af00      	add	r7, sp, #0
 810a54a:	6078      	str	r0, [r7, #4]
=======
 8109244:	b580      	push	{r7, lr}
 8109246:	b084      	sub	sp, #16
 8109248:	af00      	add	r7, sp, #0
 810924a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 810a54c:	f7ff fb1a 	bl	8109b84 <vPortEnterCritical>
=======
 810924c:	f7ff fb2e 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		int8_t cTxLock = pxQueue->cTxLock;
<<<<<<< HEAD
 810a550:	687b      	ldr	r3, [r7, #4]
 810a552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a556:	73fb      	strb	r3, [r7, #15]
=======
 8109250:	687b      	ldr	r3, [r7, #4]
 8109252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109256:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
 810a558:	e011      	b.n	810a57e <prvUnlockQueue+0x3a>
=======
 8109258:	e011      	b.n	810927e <prvUnlockQueue+0x3a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 810a55a:	687b      	ldr	r3, [r7, #4]
 810a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a55e:	2b00      	cmp	r3, #0
 810a560:	d012      	beq.n	810a588 <prvUnlockQueue+0x44>
=======
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810925e:	2b00      	cmp	r3, #0
 8109260:	d012      	beq.n	8109288 <prvUnlockQueue+0x44>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
<<<<<<< HEAD
 810a562:	687b      	ldr	r3, [r7, #4]
 810a564:	3324      	adds	r3, #36	; 0x24
 810a566:	4618      	mov	r0, r3
 810a568:	f000 fd06 	bl	810af78 <xTaskRemoveFromEventList>
 810a56c:	4603      	mov	r3, r0
 810a56e:	2b00      	cmp	r3, #0
 810a570:	d001      	beq.n	810a576 <prvUnlockQueue+0x32>
=======
 8109262:	687b      	ldr	r3, [r7, #4]
 8109264:	3324      	adds	r3, #36	; 0x24
 8109266:	4618      	mov	r0, r3
 8109268:	f000 fc6e 	bl	8109b48 <xTaskRemoveFromEventList>
 810926c:	4603      	mov	r3, r0
 810926e:	2b00      	cmp	r3, #0
 8109270:	d001      	beq.n	8109276 <prvUnlockQueue+0x32>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 810a572:	f000 fddb 	bl	810b12c <vTaskMissedYield>
=======
 8109272:	f000 fd41 	bl	8109cf8 <vTaskMissedYield>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 810a576:	7bfb      	ldrb	r3, [r7, #15]
 810a578:	3b01      	subs	r3, #1
 810a57a:	b2db      	uxtb	r3, r3
 810a57c:	73fb      	strb	r3, [r7, #15]
=======
 8109276:	7bfb      	ldrb	r3, [r7, #15]
 8109278:	3b01      	subs	r3, #1
 810927a:	b2db      	uxtb	r3, r3
 810927c:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		while( cTxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
 810a57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810a582:	2b00      	cmp	r3, #0
 810a584:	dce9      	bgt.n	810a55a <prvUnlockQueue+0x16>
 810a586:	e000      	b.n	810a58a <prvUnlockQueue+0x46>
=======
 810927e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8109282:	2b00      	cmp	r3, #0
 8109284:	dce9      	bgt.n	810925a <prvUnlockQueue+0x16>
 8109286:	e000      	b.n	810928a <prvUnlockQueue+0x46>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					break;
<<<<<<< HEAD
 810a588:	bf00      	nop
=======
 8109288:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		pxQueue->cTxLock = queueUNLOCKED;
<<<<<<< HEAD
 810a58a:	687b      	ldr	r3, [r7, #4]
 810a58c:	22ff      	movs	r2, #255	; 0xff
 810a58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
=======
 810928a:	687b      	ldr	r3, [r7, #4]
 810928c:	22ff      	movs	r2, #255	; 0xff
 810928e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a592:	f7ff fb27 	bl	8109be4 <vPortExitCritical>
=======
 8109292:	f7ff fb39 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 810a596:	f7ff faf5 	bl	8109b84 <vPortEnterCritical>
=======
 8109296:	f7ff fb09 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		int8_t cRxLock = pxQueue->cRxLock;
<<<<<<< HEAD
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a5a0:	73bb      	strb	r3, [r7, #14]
=======
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81092a0:	73bb      	strb	r3, [r7, #14]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		while( cRxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
 810a5a2:	e011      	b.n	810a5c8 <prvUnlockQueue+0x84>
=======
 81092a2:	e011      	b.n	81092c8 <prvUnlockQueue+0x84>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 810a5a4:	687b      	ldr	r3, [r7, #4]
 810a5a6:	691b      	ldr	r3, [r3, #16]
 810a5a8:	2b00      	cmp	r3, #0
 810a5aa:	d012      	beq.n	810a5d2 <prvUnlockQueue+0x8e>
=======
 81092a4:	687b      	ldr	r3, [r7, #4]
 81092a6:	691b      	ldr	r3, [r3, #16]
 81092a8:	2b00      	cmp	r3, #0
 81092aa:	d012      	beq.n	81092d2 <prvUnlockQueue+0x8e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
<<<<<<< HEAD
 810a5ac:	687b      	ldr	r3, [r7, #4]
 810a5ae:	3310      	adds	r3, #16
 810a5b0:	4618      	mov	r0, r3
 810a5b2:	f000 fce1 	bl	810af78 <xTaskRemoveFromEventList>
 810a5b6:	4603      	mov	r3, r0
 810a5b8:	2b00      	cmp	r3, #0
 810a5ba:	d001      	beq.n	810a5c0 <prvUnlockQueue+0x7c>
=======
 81092ac:	687b      	ldr	r3, [r7, #4]
 81092ae:	3310      	adds	r3, #16
 81092b0:	4618      	mov	r0, r3
 81092b2:	f000 fc49 	bl	8109b48 <xTaskRemoveFromEventList>
 81092b6:	4603      	mov	r3, r0
 81092b8:	2b00      	cmp	r3, #0
 81092ba:	d001      	beq.n	81092c0 <prvUnlockQueue+0x7c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					vTaskMissedYield();
<<<<<<< HEAD
 810a5bc:	f000 fdb6 	bl	810b12c <vTaskMissedYield>
=======
 81092bc:	f000 fd1c 	bl	8109cf8 <vTaskMissedYield>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 810a5c0:	7bbb      	ldrb	r3, [r7, #14]
 810a5c2:	3b01      	subs	r3, #1
 810a5c4:	b2db      	uxtb	r3, r3
 810a5c6:	73bb      	strb	r3, [r7, #14]
=======
 81092c0:	7bbb      	ldrb	r3, [r7, #14]
 81092c2:	3b01      	subs	r3, #1
 81092c4:	b2db      	uxtb	r3, r3
 81092c6:	73bb      	strb	r3, [r7, #14]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		while( cRxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
 810a5c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810a5cc:	2b00      	cmp	r3, #0
 810a5ce:	dce9      	bgt.n	810a5a4 <prvUnlockQueue+0x60>
 810a5d0:	e000      	b.n	810a5d4 <prvUnlockQueue+0x90>
=======
 81092c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81092cc:	2b00      	cmp	r3, #0
 81092ce:	dce9      	bgt.n	81092a4 <prvUnlockQueue+0x60>
 81092d0:	e000      	b.n	81092d4 <prvUnlockQueue+0x90>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
			{
				break;
<<<<<<< HEAD
 810a5d2:	bf00      	nop
=======
 81092d2:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 810a5d4:	687b      	ldr	r3, [r7, #4]
 810a5d6:	22ff      	movs	r2, #255	; 0xff
 810a5d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
=======
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	22ff      	movs	r2, #255	; 0xff
 81092d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a5dc:	f7ff fb02 	bl	8109be4 <vPortExitCritical>
=======
 81092dc:	f7ff fb14 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810a5e0:	bf00      	nop
 810a5e2:	3710      	adds	r7, #16
 810a5e4:	46bd      	mov	sp, r7
 810a5e6:	bd80      	pop	{r7, pc}
=======
 81092e0:	bf00      	nop
 81092e2:	3710      	adds	r7, #16
 81092e4:	46bd      	mov	sp, r7
 81092e6:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a5e8 <prvIsQueueEmpty>:
=======
081092e8 <prvIsQueueEmpty>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 810a5e8:	b580      	push	{r7, lr}
 810a5ea:	b084      	sub	sp, #16
 810a5ec:	af00      	add	r7, sp, #0
 810a5ee:	6078      	str	r0, [r7, #4]
=======
 81092e8:	b580      	push	{r7, lr}
 81092ea:	b084      	sub	sp, #16
 81092ec:	af00      	add	r7, sp, #0
 81092ee:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BaseType_t xReturn;

	taskENTER_CRITICAL();
<<<<<<< HEAD
 810a5f0:	f7ff fac8 	bl	8109b84 <vPortEnterCritical>
=======
 81092f0:	f7ff fadc 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
<<<<<<< HEAD
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a5f8:	2b00      	cmp	r3, #0
 810a5fa:	d102      	bne.n	810a602 <prvIsQueueEmpty+0x1a>
=======
 81092f4:	687b      	ldr	r3, [r7, #4]
 81092f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092f8:	2b00      	cmp	r3, #0
 81092fa:	d102      	bne.n	8109302 <prvIsQueueEmpty+0x1a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			xReturn = pdTRUE;
<<<<<<< HEAD
 810a5fc:	2301      	movs	r3, #1
 810a5fe:	60fb      	str	r3, [r7, #12]
 810a600:	e001      	b.n	810a606 <prvIsQueueEmpty+0x1e>
=======
 81092fc:	2301      	movs	r3, #1
 81092fe:	60fb      	str	r3, [r7, #12]
 8109300:	e001      	b.n	8109306 <prvIsQueueEmpty+0x1e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 810a602:	2300      	movs	r3, #0
 810a604:	60fb      	str	r3, [r7, #12]
=======
 8109302:	2300      	movs	r3, #0
 8109304:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a606:	f7ff faed 	bl	8109be4 <vPortExitCritical>
=======
 8109306:	f7ff faff 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	return xReturn;
<<<<<<< HEAD
 810a60a:	68fb      	ldr	r3, [r7, #12]
=======
 810930a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810a60c:	4618      	mov	r0, r3
 810a60e:	3710      	adds	r7, #16
 810a610:	46bd      	mov	sp, r7
 810a612:	bd80      	pop	{r7, pc}
=======
 810930c:	4618      	mov	r0, r3
 810930e:	3710      	adds	r7, #16
 8109310:	46bd      	mov	sp, r7
 8109312:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a614 <prvIsQueueFull>:
=======
08109314 <prvIsQueueFull>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 810a614:	b580      	push	{r7, lr}
 810a616:	b084      	sub	sp, #16
 810a618:	af00      	add	r7, sp, #0
 810a61a:	6078      	str	r0, [r7, #4]
=======
 8109314:	b580      	push	{r7, lr}
 8109316:	b084      	sub	sp, #16
 8109318:	af00      	add	r7, sp, #0
 810931a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BaseType_t xReturn;

	taskENTER_CRITICAL();
<<<<<<< HEAD
 810a61c:	f7ff fab2 	bl	8109b84 <vPortEnterCritical>
=======
 810931c:	f7ff fac6 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
<<<<<<< HEAD
 810a620:	687b      	ldr	r3, [r7, #4]
 810a622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a624:	687b      	ldr	r3, [r7, #4]
 810a626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a628:	429a      	cmp	r2, r3
 810a62a:	d102      	bne.n	810a632 <prvIsQueueFull+0x1e>
=======
 8109320:	687b      	ldr	r3, [r7, #4]
 8109322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109328:	429a      	cmp	r2, r3
 810932a:	d102      	bne.n	8109332 <prvIsQueueFull+0x1e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			xReturn = pdTRUE;
<<<<<<< HEAD
 810a62c:	2301      	movs	r3, #1
 810a62e:	60fb      	str	r3, [r7, #12]
 810a630:	e001      	b.n	810a636 <prvIsQueueFull+0x22>
=======
 810932c:	2301      	movs	r3, #1
 810932e:	60fb      	str	r3, [r7, #12]
 8109330:	e001      	b.n	8109336 <prvIsQueueFull+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 810a632:	2300      	movs	r3, #0
 810a634:	60fb      	str	r3, [r7, #12]
=======
 8109332:	2300      	movs	r3, #0
 8109334:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a636:	f7ff fad5 	bl	8109be4 <vPortExitCritical>
=======
 8109336:	f7ff fae7 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	return xReturn;
<<<<<<< HEAD
 810a63a:	68fb      	ldr	r3, [r7, #12]
=======
 810933a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810a63c:	4618      	mov	r0, r3
 810a63e:	3710      	adds	r7, #16
 810a640:	46bd      	mov	sp, r7
 810a642:	bd80      	pop	{r7, pc}
=======
 810933c:	4618      	mov	r0, r3
 810933e:	3710      	adds	r7, #16
 8109340:	46bd      	mov	sp, r7
 8109342:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a644 <xTaskCreateStatic>:
=======
08109344 <xTaskCreateStatic>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 810a644:	b580      	push	{r7, lr}
 810a646:	b08e      	sub	sp, #56	; 0x38
 810a648:	af04      	add	r7, sp, #16
 810a64a:	60f8      	str	r0, [r7, #12]
 810a64c:	60b9      	str	r1, [r7, #8]
 810a64e:	607a      	str	r2, [r7, #4]
 810a650:	603b      	str	r3, [r7, #0]
=======
 8109344:	b580      	push	{r7, lr}
 8109346:	b08e      	sub	sp, #56	; 0x38
 8109348:	af04      	add	r7, sp, #16
 810934a:	60f8      	str	r0, [r7, #12]
 810934c:	60b9      	str	r1, [r7, #8]
 810934e:	607a      	str	r2, [r7, #4]
 8109350:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 810a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a654:	2b00      	cmp	r3, #0
 810a656:	d10a      	bne.n	810a66e <xTaskCreateStatic+0x2a>
	__asm volatile
 810a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a65c:	f383 8811 	msr	BASEPRI, r3
 810a660:	f3bf 8f6f 	isb	sy
 810a664:	f3bf 8f4f 	dsb	sy
 810a668:	623b      	str	r3, [r7, #32]
}
 810a66a:	bf00      	nop
 810a66c:	e7fe      	b.n	810a66c <xTaskCreateStatic+0x28>
=======
 8109352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109354:	2b00      	cmp	r3, #0
 8109356:	d109      	bne.n	810936c <xTaskCreateStatic+0x28>
 8109358:	f04f 0350 	mov.w	r3, #80	; 0x50
 810935c:	f383 8811 	msr	BASEPRI, r3
 8109360:	f3bf 8f6f 	isb	sy
 8109364:	f3bf 8f4f 	dsb	sy
 8109368:	623b      	str	r3, [r7, #32]
 810936a:	e7fe      	b.n	810936a <xTaskCreateStatic+0x26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		configASSERT( pxTaskBuffer != NULL );
<<<<<<< HEAD
 810a66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a670:	2b00      	cmp	r3, #0
 810a672:	d10a      	bne.n	810a68a <xTaskCreateStatic+0x46>
	__asm volatile
 810a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a678:	f383 8811 	msr	BASEPRI, r3
 810a67c:	f3bf 8f6f 	isb	sy
 810a680:	f3bf 8f4f 	dsb	sy
 810a684:	61fb      	str	r3, [r7, #28]
}
 810a686:	bf00      	nop
 810a688:	e7fe      	b.n	810a688 <xTaskCreateStatic+0x44>
=======
 810936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810936e:	2b00      	cmp	r3, #0
 8109370:	d109      	bne.n	8109386 <xTaskCreateStatic+0x42>
 8109372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109376:	f383 8811 	msr	BASEPRI, r3
 810937a:	f3bf 8f6f 	isb	sy
 810937e:	f3bf 8f4f 	dsb	sy
 8109382:	61fb      	str	r3, [r7, #28]
 8109384:	e7fe      	b.n	8109384 <xTaskCreateStatic+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 810a68a:	2354      	movs	r3, #84	; 0x54
 810a68c:	613b      	str	r3, [r7, #16]
=======
 8109386:	2354      	movs	r3, #84	; 0x54
 8109388:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			configASSERT( xSize == sizeof( TCB_t ) );
<<<<<<< HEAD
 810a68e:	693b      	ldr	r3, [r7, #16]
 810a690:	2b54      	cmp	r3, #84	; 0x54
 810a692:	d00a      	beq.n	810a6aa <xTaskCreateStatic+0x66>
	__asm volatile
 810a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a698:	f383 8811 	msr	BASEPRI, r3
 810a69c:	f3bf 8f6f 	isb	sy
 810a6a0:	f3bf 8f4f 	dsb	sy
 810a6a4:	61bb      	str	r3, [r7, #24]
}
 810a6a6:	bf00      	nop
 810a6a8:	e7fe      	b.n	810a6a8 <xTaskCreateStatic+0x64>
=======
 810938a:	693b      	ldr	r3, [r7, #16]
 810938c:	2b54      	cmp	r3, #84	; 0x54
 810938e:	d009      	beq.n	81093a4 <xTaskCreateStatic+0x60>
 8109390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109394:	f383 8811 	msr	BASEPRI, r3
 8109398:	f3bf 8f6f 	isb	sy
 810939c:	f3bf 8f4f 	dsb	sy
 81093a0:	61bb      	str	r3, [r7, #24]
 81093a2:	e7fe      	b.n	81093a2 <xTaskCreateStatic+0x5e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
<<<<<<< HEAD
 810a6aa:	693b      	ldr	r3, [r7, #16]
=======
 81093a4:	693b      	ldr	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 810a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a6ae:	2b00      	cmp	r3, #0
 810a6b0:	d01e      	beq.n	810a6f0 <xTaskCreateStatic+0xac>
 810a6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a6b4:	2b00      	cmp	r3, #0
 810a6b6:	d01b      	beq.n	810a6f0 <xTaskCreateStatic+0xac>
=======
 81093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81093a8:	2b00      	cmp	r3, #0
 81093aa:	d01e      	beq.n	81093ea <xTaskCreateStatic+0xa6>
 81093ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81093ae:	2b00      	cmp	r3, #0
 81093b0:	d01b      	beq.n	81093ea <xTaskCreateStatic+0xa6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 810a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a6ba:	627b      	str	r3, [r7, #36]	; 0x24
=======
 81093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81093b4:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
<<<<<<< HEAD
 810a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a6be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a6c0:	631a      	str	r2, [r3, #48]	; 0x30
=======
 81093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81093b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81093ba:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 810a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a6c4:	2202      	movs	r2, #2
 810a6c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 81093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81093be:	2202      	movs	r2, #2
 81093c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 810a6ca:	2300      	movs	r3, #0
 810a6cc:	9303      	str	r3, [sp, #12]
 810a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a6d0:	9302      	str	r3, [sp, #8]
 810a6d2:	f107 0314 	add.w	r3, r7, #20
 810a6d6:	9301      	str	r3, [sp, #4]
 810a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a6da:	9300      	str	r3, [sp, #0]
 810a6dc:	683b      	ldr	r3, [r7, #0]
 810a6de:	687a      	ldr	r2, [r7, #4]
 810a6e0:	68b9      	ldr	r1, [r7, #8]
 810a6e2:	68f8      	ldr	r0, [r7, #12]
 810a6e4:	f000 f850 	bl	810a788 <prvInitialiseNewTask>
=======
 81093c4:	2300      	movs	r3, #0
 81093c6:	9303      	str	r3, [sp, #12]
 81093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81093ca:	9302      	str	r3, [sp, #8]
 81093cc:	f107 0314 	add.w	r3, r7, #20
 81093d0:	9301      	str	r3, [sp, #4]
 81093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81093d4:	9300      	str	r3, [sp, #0]
 81093d6:	683b      	ldr	r3, [r7, #0]
 81093d8:	687a      	ldr	r2, [r7, #4]
 81093da:	68b9      	ldr	r1, [r7, #8]
 81093dc:	68f8      	ldr	r0, [r7, #12]
 81093de:	f000 f850 	bl	8109482 <prvInitialiseNewTask>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			prvAddNewTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 810a6e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810a6ea:	f000 f8d5 	bl	810a898 <prvAddNewTaskToReadyList>
 810a6ee:	e001      	b.n	810a6f4 <xTaskCreateStatic+0xb0>
=======
 81093e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81093e4:	f000 f8d4 	bl	8109590 <prvAddNewTaskToReadyList>
 81093e8:	e001      	b.n	81093ee <xTaskCreateStatic+0xaa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 810a6f0:	2300      	movs	r3, #0
 810a6f2:	617b      	str	r3, [r7, #20]
=======
 81093ea:	2300      	movs	r3, #0
 81093ec:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		return xReturn;
<<<<<<< HEAD
 810a6f4:	697b      	ldr	r3, [r7, #20]
=======
 81093ee:	697b      	ldr	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810a6f6:	4618      	mov	r0, r3
 810a6f8:	3728      	adds	r7, #40	; 0x28
 810a6fa:	46bd      	mov	sp, r7
 810a6fc:	bd80      	pop	{r7, pc}
=======
 81093f0:	4618      	mov	r0, r3
 81093f2:	3728      	adds	r7, #40	; 0x28
 81093f4:	46bd      	mov	sp, r7
 81093f6:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a6fe <xTaskCreate>:
=======
081093f8 <xTaskCreate>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 810a6fe:	b580      	push	{r7, lr}
 810a700:	b08c      	sub	sp, #48	; 0x30
 810a702:	af04      	add	r7, sp, #16
 810a704:	60f8      	str	r0, [r7, #12]
 810a706:	60b9      	str	r1, [r7, #8]
 810a708:	603b      	str	r3, [r7, #0]
 810a70a:	4613      	mov	r3, r2
 810a70c:	80fb      	strh	r3, [r7, #6]
=======
 81093f8:	b580      	push	{r7, lr}
 81093fa:	b08c      	sub	sp, #48	; 0x30
 81093fc:	af04      	add	r7, sp, #16
 81093fe:	60f8      	str	r0, [r7, #12]
 8109400:	60b9      	str	r1, [r7, #8]
 8109402:	603b      	str	r3, [r7, #0]
 8109404:	4613      	mov	r3, r2
 8109406:	80fb      	strh	r3, [r7, #6]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 810a70e:	88fb      	ldrh	r3, [r7, #6]
 810a710:	009b      	lsls	r3, r3, #2
 810a712:	4618      	mov	r0, r3
 810a714:	f7fe fe7a 	bl	810940c <pvPortMalloc>
 810a718:	6178      	str	r0, [r7, #20]
=======
 8109408:	88fb      	ldrh	r3, [r7, #6]
 810940a:	009b      	lsls	r3, r3, #2
 810940c:	4618      	mov	r0, r3
 810940e:	f7fe fe9b 	bl	8108148 <pvPortMalloc>
 8109412:	6178      	str	r0, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			if( pxStack != NULL )
<<<<<<< HEAD
 810a71a:	697b      	ldr	r3, [r7, #20]
 810a71c:	2b00      	cmp	r3, #0
 810a71e:	d00e      	beq.n	810a73e <xTaskCreate+0x40>
=======
 8109414:	697b      	ldr	r3, [r7, #20]
 8109416:	2b00      	cmp	r3, #0
 8109418:	d00e      	beq.n	8109438 <xTaskCreate+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
<<<<<<< HEAD
 810a720:	2054      	movs	r0, #84	; 0x54
 810a722:	f7fe fe73 	bl	810940c <pvPortMalloc>
 810a726:	61f8      	str	r0, [r7, #28]
=======
 810941a:	2054      	movs	r0, #84	; 0x54
 810941c:	f7fe fe94 	bl	8108148 <pvPortMalloc>
 8109420:	61f8      	str	r0, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

				if( pxNewTCB != NULL )
<<<<<<< HEAD
 810a728:	69fb      	ldr	r3, [r7, #28]
 810a72a:	2b00      	cmp	r3, #0
 810a72c:	d003      	beq.n	810a736 <xTaskCreate+0x38>
=======
 8109422:	69fb      	ldr	r3, [r7, #28]
 8109424:	2b00      	cmp	r3, #0
 8109426:	d003      	beq.n	8109430 <xTaskCreate+0x38>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
<<<<<<< HEAD
 810a72e:	69fb      	ldr	r3, [r7, #28]
 810a730:	697a      	ldr	r2, [r7, #20]
 810a732:	631a      	str	r2, [r3, #48]	; 0x30
 810a734:	e005      	b.n	810a742 <xTaskCreate+0x44>
=======
 8109428:	69fb      	ldr	r3, [r7, #28]
 810942a:	697a      	ldr	r2, [r7, #20]
 810942c:	631a      	str	r2, [r3, #48]	; 0x30
 810942e:	e005      	b.n	810943c <xTaskCreate+0x44>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 810a736:	6978      	ldr	r0, [r7, #20]
 810a738:	f7fe ff2c 	bl	8109594 <vPortFree>
 810a73c:	e001      	b.n	810a742 <xTaskCreate+0x44>
=======
 8109430:	6978      	ldr	r0, [r7, #20]
 8109432:	f7fe ff4b 	bl	81082cc <vPortFree>
 8109436:	e001      	b.n	810943c <xTaskCreate+0x44>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 810a73e:	2300      	movs	r3, #0
 810a740:	61fb      	str	r3, [r7, #28]
=======
 8109438:	2300      	movs	r3, #0
 810943a:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 810a742:	69fb      	ldr	r3, [r7, #28]
 810a744:	2b00      	cmp	r3, #0
 810a746:	d017      	beq.n	810a778 <xTaskCreate+0x7a>
=======
 810943c:	69fb      	ldr	r3, [r7, #28]
 810943e:	2b00      	cmp	r3, #0
 8109440:	d017      	beq.n	8109472 <xTaskCreate+0x7a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 810a748:	69fb      	ldr	r3, [r7, #28]
 810a74a:	2200      	movs	r2, #0
 810a74c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8109442:	69fb      	ldr	r3, [r7, #28]
 8109444:	2200      	movs	r2, #0
 8109446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 810a750:	88fa      	ldrh	r2, [r7, #6]
 810a752:	2300      	movs	r3, #0
 810a754:	9303      	str	r3, [sp, #12]
 810a756:	69fb      	ldr	r3, [r7, #28]
 810a758:	9302      	str	r3, [sp, #8]
 810a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a75c:	9301      	str	r3, [sp, #4]
 810a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a760:	9300      	str	r3, [sp, #0]
 810a762:	683b      	ldr	r3, [r7, #0]
 810a764:	68b9      	ldr	r1, [r7, #8]
 810a766:	68f8      	ldr	r0, [r7, #12]
 810a768:	f000 f80e 	bl	810a788 <prvInitialiseNewTask>
=======
 810944a:	88fa      	ldrh	r2, [r7, #6]
 810944c:	2300      	movs	r3, #0
 810944e:	9303      	str	r3, [sp, #12]
 8109450:	69fb      	ldr	r3, [r7, #28]
 8109452:	9302      	str	r3, [sp, #8]
 8109454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109456:	9301      	str	r3, [sp, #4]
 8109458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810945a:	9300      	str	r3, [sp, #0]
 810945c:	683b      	ldr	r3, [r7, #0]
 810945e:	68b9      	ldr	r1, [r7, #8]
 8109460:	68f8      	ldr	r0, [r7, #12]
 8109462:	f000 f80e 	bl	8109482 <prvInitialiseNewTask>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			prvAddNewTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 810a76c:	69f8      	ldr	r0, [r7, #28]
 810a76e:	f000 f893 	bl	810a898 <prvAddNewTaskToReadyList>
=======
 8109466:	69f8      	ldr	r0, [r7, #28]
 8109468:	f000 f892 	bl	8109590 <prvAddNewTaskToReadyList>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			xReturn = pdPASS;
<<<<<<< HEAD
 810a772:	2301      	movs	r3, #1
 810a774:	61bb      	str	r3, [r7, #24]
 810a776:	e002      	b.n	810a77e <xTaskCreate+0x80>
=======
 810946c:	2301      	movs	r3, #1
 810946e:	61bb      	str	r3, [r7, #24]
 8109470:	e002      	b.n	8109478 <xTaskCreate+0x80>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 810a778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a77c:	61bb      	str	r3, [r7, #24]
=======
 8109472:	f04f 33ff 	mov.w	r3, #4294967295
 8109476:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		return xReturn;
<<<<<<< HEAD
 810a77e:	69bb      	ldr	r3, [r7, #24]
=======
 8109478:	69bb      	ldr	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810a780:	4618      	mov	r0, r3
 810a782:	3720      	adds	r7, #32
 810a784:	46bd      	mov	sp, r7
 810a786:	bd80      	pop	{r7, pc}
=======
 810947a:	4618      	mov	r0, r3
 810947c:	3720      	adds	r7, #32
 810947e:	46bd      	mov	sp, r7
 8109480:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a788 <prvInitialiseNewTask>:
=======
08109482 <prvInitialiseNewTask>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 810a788:	b580      	push	{r7, lr}
 810a78a:	b088      	sub	sp, #32
 810a78c:	af00      	add	r7, sp, #0
 810a78e:	60f8      	str	r0, [r7, #12]
 810a790:	60b9      	str	r1, [r7, #8]
 810a792:	607a      	str	r2, [r7, #4]
 810a794:	603b      	str	r3, [r7, #0]
=======
 8109482:	b580      	push	{r7, lr}
 8109484:	b088      	sub	sp, #32
 8109486:	af00      	add	r7, sp, #0
 8109488:	60f8      	str	r0, [r7, #12]
 810948a:	60b9      	str	r1, [r7, #8]
 810948c:	607a      	str	r2, [r7, #4]
 810948e:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 810a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a79a:	687b      	ldr	r3, [r7, #4]
 810a79c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810a7a0:	3b01      	subs	r3, #1
 810a7a2:	009b      	lsls	r3, r3, #2
 810a7a4:	4413      	add	r3, r2
 810a7a6:	61bb      	str	r3, [r7, #24]
=======
 8109490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109494:	687b      	ldr	r3, [r7, #4]
 8109496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810949a:	3b01      	subs	r3, #1
 810949c:	009b      	lsls	r3, r3, #2
 810949e:	4413      	add	r3, r2
 81094a0:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
<<<<<<< HEAD
 810a7a8:	69bb      	ldr	r3, [r7, #24]
 810a7aa:	f023 0307 	bic.w	r3, r3, #7
 810a7ae:	61bb      	str	r3, [r7, #24]
=======
 81094a2:	69bb      	ldr	r3, [r7, #24]
 81094a4:	f023 0307 	bic.w	r3, r3, #7
 81094a8:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
<<<<<<< HEAD
 810a7b0:	69bb      	ldr	r3, [r7, #24]
 810a7b2:	f003 0307 	and.w	r3, r3, #7
 810a7b6:	2b00      	cmp	r3, #0
 810a7b8:	d00a      	beq.n	810a7d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 810a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a7be:	f383 8811 	msr	BASEPRI, r3
 810a7c2:	f3bf 8f6f 	isb	sy
 810a7c6:	f3bf 8f4f 	dsb	sy
 810a7ca:	617b      	str	r3, [r7, #20]
}
 810a7cc:	bf00      	nop
 810a7ce:	e7fe      	b.n	810a7ce <prvInitialiseNewTask+0x46>
=======
 81094aa:	69bb      	ldr	r3, [r7, #24]
 81094ac:	f003 0307 	and.w	r3, r3, #7
 81094b0:	2b00      	cmp	r3, #0
 81094b2:	d009      	beq.n	81094c8 <prvInitialiseNewTask+0x46>
 81094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094b8:	f383 8811 	msr	BASEPRI, r3
 81094bc:	f3bf 8f6f 	isb	sy
 81094c0:	f3bf 8f4f 	dsb	sy
 81094c4:	617b      	str	r3, [r7, #20]
 81094c6:	e7fe      	b.n	81094c6 <prvInitialiseNewTask+0x44>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 810a7d0:	68bb      	ldr	r3, [r7, #8]
 810a7d2:	2b00      	cmp	r3, #0
 810a7d4:	d01f      	beq.n	810a816 <prvInitialiseNewTask+0x8e>
=======
 81094c8:	68bb      	ldr	r3, [r7, #8]
 81094ca:	2b00      	cmp	r3, #0
 81094cc:	d01f      	beq.n	810950e <prvInitialiseNewTask+0x8c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
 810a7d6:	2300      	movs	r3, #0
 810a7d8:	61fb      	str	r3, [r7, #28]
 810a7da:	e012      	b.n	810a802 <prvInitialiseNewTask+0x7a>
=======
 81094ce:	2300      	movs	r3, #0
 81094d0:	61fb      	str	r3, [r7, #28]
 81094d2:	e012      	b.n	81094fa <prvInitialiseNewTask+0x78>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
<<<<<<< HEAD
 810a7dc:	68ba      	ldr	r2, [r7, #8]
 810a7de:	69fb      	ldr	r3, [r7, #28]
 810a7e0:	4413      	add	r3, r2
 810a7e2:	7819      	ldrb	r1, [r3, #0]
 810a7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a7e6:	69fb      	ldr	r3, [r7, #28]
 810a7e8:	4413      	add	r3, r2
 810a7ea:	3334      	adds	r3, #52	; 0x34
 810a7ec:	460a      	mov	r2, r1
 810a7ee:	701a      	strb	r2, [r3, #0]
=======
 81094d4:	68ba      	ldr	r2, [r7, #8]
 81094d6:	69fb      	ldr	r3, [r7, #28]
 81094d8:	4413      	add	r3, r2
 81094da:	7819      	ldrb	r1, [r3, #0]
 81094dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81094de:	69fb      	ldr	r3, [r7, #28]
 81094e0:	4413      	add	r3, r2
 81094e2:	3334      	adds	r3, #52	; 0x34
 81094e4:	460a      	mov	r2, r1
 81094e6:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 810a7f0:	68ba      	ldr	r2, [r7, #8]
 810a7f2:	69fb      	ldr	r3, [r7, #28]
 810a7f4:	4413      	add	r3, r2
 810a7f6:	781b      	ldrb	r3, [r3, #0]
 810a7f8:	2b00      	cmp	r3, #0
 810a7fa:	d006      	beq.n	810a80a <prvInitialiseNewTask+0x82>
=======
 81094e8:	68ba      	ldr	r2, [r7, #8]
 81094ea:	69fb      	ldr	r3, [r7, #28]
 81094ec:	4413      	add	r3, r2
 81094ee:	781b      	ldrb	r3, [r3, #0]
 81094f0:	2b00      	cmp	r3, #0
 81094f2:	d006      	beq.n	8109502 <prvInitialiseNewTask+0x80>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
 810a7fc:	69fb      	ldr	r3, [r7, #28]
 810a7fe:	3301      	adds	r3, #1
 810a800:	61fb      	str	r3, [r7, #28]
 810a802:	69fb      	ldr	r3, [r7, #28]
 810a804:	2b0f      	cmp	r3, #15
 810a806:	d9e9      	bls.n	810a7dc <prvInitialiseNewTask+0x54>
 810a808:	e000      	b.n	810a80c <prvInitialiseNewTask+0x84>
=======
 81094f4:	69fb      	ldr	r3, [r7, #28]
 81094f6:	3301      	adds	r3, #1
 81094f8:	61fb      	str	r3, [r7, #28]
 81094fa:	69fb      	ldr	r3, [r7, #28]
 81094fc:	2b0f      	cmp	r3, #15
 81094fe:	d9e9      	bls.n	81094d4 <prvInitialiseNewTask+0x52>
 8109500:	e000      	b.n	8109504 <prvInitialiseNewTask+0x82>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				break;
<<<<<<< HEAD
 810a80a:	bf00      	nop
=======
 8109502:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 810a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a80e:	2200      	movs	r2, #0
 810a810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810a814:	e003      	b.n	810a81e <prvInitialiseNewTask+0x96>
=======
 8109504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109506:	2200      	movs	r2, #0
 8109508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810950c:	e003      	b.n	8109516 <prvInitialiseNewTask+0x94>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 810a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a818:	2200      	movs	r2, #0
 810a81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 810950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109510:	2200      	movs	r2, #0
 8109512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 810a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a820:	2b06      	cmp	r3, #6
 810a822:	d901      	bls.n	810a828 <prvInitialiseNewTask+0xa0>
=======
 8109516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109518:	2b06      	cmp	r3, #6
 810951a:	d901      	bls.n	8109520 <prvInitialiseNewTask+0x9e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
<<<<<<< HEAD
 810a824:	2306      	movs	r3, #6
 810a826:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 810951c:	2306      	movs	r3, #6
 810951e:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 810a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a82a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a82c:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8109520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109524:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
<<<<<<< HEAD
 810a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a832:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8109526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810952a:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxNewTCB->uxMutexesHeld = 0;
<<<<<<< HEAD
 810a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a836:	2200      	movs	r2, #0
 810a838:	649a      	str	r2, [r3, #72]	; 0x48
=======
 810952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810952e:	2200      	movs	r2, #0
 8109530:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 810a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a83c:	3304      	adds	r3, #4
 810a83e:	4618      	mov	r0, r3
 810a840:	f7fe ffde 	bl	8109800 <vListInitialiseItem>
=======
 8109532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109534:	3304      	adds	r3, #4
 8109536:	4618      	mov	r0, r3
 8109538:	f7fe fffc 	bl	8108534 <vListInitialiseItem>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
<<<<<<< HEAD
 810a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a846:	3318      	adds	r3, #24
 810a848:	4618      	mov	r0, r3
 810a84a:	f7fe ffd9 	bl	8109800 <vListInitialiseItem>
=======
 810953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810953e:	3318      	adds	r3, #24
 8109540:	4618      	mov	r0, r3
 8109542:	f7fe fff7 	bl	8108534 <vListInitialiseItem>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 810a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a852:	611a      	str	r2, [r3, #16]
=======
 8109546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810954a:	611a      	str	r2, [r3, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 810a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a856:	f1c3 0207 	rsb	r2, r3, #7
 810a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a85c:	619a      	str	r2, [r3, #24]
=======
 810954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810954e:	f1c3 0207 	rsb	r2, r3, #7
 8109552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109554:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
<<<<<<< HEAD
 810a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a862:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8109556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810955a:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 810a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a866:	2200      	movs	r2, #0
 810a868:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 810955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810955e:	2200      	movs	r2, #0
 8109560:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
<<<<<<< HEAD
 810a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a86c:	2200      	movs	r2, #0
 810a86e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8109562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109564:	2200      	movs	r2, #0
 8109566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 810a872:	683a      	ldr	r2, [r7, #0]
 810a874:	68f9      	ldr	r1, [r7, #12]
 810a876:	69b8      	ldr	r0, [r7, #24]
 810a878:	f7ff f856 	bl	8109928 <pxPortInitialiseStack>
 810a87c:	4602      	mov	r2, r0
 810a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a880:	601a      	str	r2, [r3, #0]
=======
 810956a:	683a      	ldr	r2, [r7, #0]
 810956c:	68f9      	ldr	r1, [r7, #12]
 810956e:	69b8      	ldr	r0, [r7, #24]
 8109570:	f7ff f874 	bl	810865c <pxPortInitialiseStack>
 8109574:	4602      	mov	r2, r0
 8109576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109578:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 810a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a884:	2b00      	cmp	r3, #0
 810a886:	d002      	beq.n	810a88e <prvInitialiseNewTask+0x106>
=======
 810957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810957c:	2b00      	cmp	r3, #0
 810957e:	d002      	beq.n	8109586 <prvInitialiseNewTask+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 810a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a88a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a88c:	601a      	str	r2, [r3, #0]
=======
 8109580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109584:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 810a88e:	bf00      	nop
 810a890:	3720      	adds	r7, #32
 810a892:	46bd      	mov	sp, r7
 810a894:	bd80      	pop	{r7, pc}
=======
 8109586:	bf00      	nop
 8109588:	3720      	adds	r7, #32
 810958a:	46bd      	mov	sp, r7
 810958c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810a898 <prvAddNewTaskToReadyList>:
=======
08109590 <prvAddNewTaskToReadyList>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 810a898:	b580      	push	{r7, lr}
 810a89a:	b082      	sub	sp, #8
 810a89c:	af00      	add	r7, sp, #0
 810a89e:	6078      	str	r0, [r7, #4]
=======
 8109590:	b580      	push	{r7, lr}
 8109592:	b082      	sub	sp, #8
 8109594:	af00      	add	r7, sp, #0
 8109596:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 810a8a0:	f7ff f970 	bl	8109b84 <vPortEnterCritical>
=======
 8109598:	f7ff f988 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		uxCurrentNumberOfTasks++;
<<<<<<< HEAD
 810a8a4:	4b2a      	ldr	r3, [pc, #168]	; (810a950 <prvAddNewTaskToReadyList+0xb8>)
 810a8a6:	681b      	ldr	r3, [r3, #0]
 810a8a8:	3301      	adds	r3, #1
 810a8aa:	4a29      	ldr	r2, [pc, #164]	; (810a950 <prvAddNewTaskToReadyList+0xb8>)
 810a8ac:	6013      	str	r3, [r2, #0]
=======
 810959c:	4b2a      	ldr	r3, [pc, #168]	; (8109648 <prvAddNewTaskToReadyList+0xb8>)
 810959e:	681b      	ldr	r3, [r3, #0]
 81095a0:	3301      	adds	r3, #1
 81095a2:	4a29      	ldr	r2, [pc, #164]	; (8109648 <prvAddNewTaskToReadyList+0xb8>)
 81095a4:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if( pxCurrentTCB == NULL )
<<<<<<< HEAD
 810a8ae:	4b29      	ldr	r3, [pc, #164]	; (810a954 <prvAddNewTaskToReadyList+0xbc>)
 810a8b0:	681b      	ldr	r3, [r3, #0]
 810a8b2:	2b00      	cmp	r3, #0
 810a8b4:	d109      	bne.n	810a8ca <prvAddNewTaskToReadyList+0x32>
=======
 81095a6:	4b29      	ldr	r3, [pc, #164]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 81095a8:	681b      	ldr	r3, [r3, #0]
 81095aa:	2b00      	cmp	r3, #0
 81095ac:	d109      	bne.n	81095c2 <prvAddNewTaskToReadyList+0x32>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 810a8b6:	4a27      	ldr	r2, [pc, #156]	; (810a954 <prvAddNewTaskToReadyList+0xbc>)
 810a8b8:	687b      	ldr	r3, [r7, #4]
 810a8ba:	6013      	str	r3, [r2, #0]
=======
 81095ae:	4a27      	ldr	r2, [pc, #156]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
<<<<<<< HEAD
 810a8bc:	4b24      	ldr	r3, [pc, #144]	; (810a950 <prvAddNewTaskToReadyList+0xb8>)
 810a8be:	681b      	ldr	r3, [r3, #0]
 810a8c0:	2b01      	cmp	r3, #1
 810a8c2:	d110      	bne.n	810a8e6 <prvAddNewTaskToReadyList+0x4e>
=======
 81095b4:	4b24      	ldr	r3, [pc, #144]	; (8109648 <prvAddNewTaskToReadyList+0xb8>)
 81095b6:	681b      	ldr	r3, [r3, #0]
 81095b8:	2b01      	cmp	r3, #1
 81095ba:	d110      	bne.n	81095de <prvAddNewTaskToReadyList+0x4e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 810a8c4:	f000 fc56 	bl	810b174 <prvInitialiseTaskLists>
 810a8c8:	e00d      	b.n	810a8e6 <prvAddNewTaskToReadyList+0x4e>
=======
 81095bc:	f000 fbc0 	bl	8109d40 <prvInitialiseTaskLists>
 81095c0:	e00d      	b.n	81095de <prvAddNewTaskToReadyList+0x4e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 810a8ca:	4b23      	ldr	r3, [pc, #140]	; (810a958 <prvAddNewTaskToReadyList+0xc0>)
 810a8cc:	681b      	ldr	r3, [r3, #0]
 810a8ce:	2b00      	cmp	r3, #0
 810a8d0:	d109      	bne.n	810a8e6 <prvAddNewTaskToReadyList+0x4e>
=======
 81095c2:	4b23      	ldr	r3, [pc, #140]	; (8109650 <prvAddNewTaskToReadyList+0xc0>)
 81095c4:	681b      	ldr	r3, [r3, #0]
 81095c6:	2b00      	cmp	r3, #0
 81095c8:	d109      	bne.n	81095de <prvAddNewTaskToReadyList+0x4e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
<<<<<<< HEAD
 810a8d2:	4b20      	ldr	r3, [pc, #128]	; (810a954 <prvAddNewTaskToReadyList+0xbc>)
 810a8d4:	681b      	ldr	r3, [r3, #0]
 810a8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a8d8:	687b      	ldr	r3, [r7, #4]
 810a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8dc:	429a      	cmp	r2, r3
 810a8de:	d802      	bhi.n	810a8e6 <prvAddNewTaskToReadyList+0x4e>
=======
 81095ca:	4b20      	ldr	r3, [pc, #128]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 81095cc:	681b      	ldr	r3, [r3, #0]
 81095ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095d4:	429a      	cmp	r2, r3
 81095d6:	d802      	bhi.n	81095de <prvAddNewTaskToReadyList+0x4e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 810a8e0:	4a1c      	ldr	r2, [pc, #112]	; (810a954 <prvAddNewTaskToReadyList+0xbc>)
 810a8e2:	687b      	ldr	r3, [r7, #4]
 810a8e4:	6013      	str	r3, [r2, #0]
=======
 81095d8:	4a1c      	ldr	r2, [pc, #112]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 810a8e6:	4b1d      	ldr	r3, [pc, #116]	; (810a95c <prvAddNewTaskToReadyList+0xc4>)
 810a8e8:	681b      	ldr	r3, [r3, #0]
 810a8ea:	3301      	adds	r3, #1
 810a8ec:	4a1b      	ldr	r2, [pc, #108]	; (810a95c <prvAddNewTaskToReadyList+0xc4>)
 810a8ee:	6013      	str	r3, [r2, #0]
=======
 81095de:	4b1d      	ldr	r3, [pc, #116]	; (8109654 <prvAddNewTaskToReadyList+0xc4>)
 81095e0:	681b      	ldr	r3, [r3, #0]
 81095e2:	3301      	adds	r3, #1
 81095e4:	4a1b      	ldr	r2, [pc, #108]	; (8109654 <prvAddNewTaskToReadyList+0xc4>)
 81095e6:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 810a8f0:	687b      	ldr	r3, [r7, #4]
 810a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8f4:	2201      	movs	r2, #1
 810a8f6:	409a      	lsls	r2, r3
 810a8f8:	4b19      	ldr	r3, [pc, #100]	; (810a960 <prvAddNewTaskToReadyList+0xc8>)
 810a8fa:	681b      	ldr	r3, [r3, #0]
 810a8fc:	4313      	orrs	r3, r2
 810a8fe:	4a18      	ldr	r2, [pc, #96]	; (810a960 <prvAddNewTaskToReadyList+0xc8>)
 810a900:	6013      	str	r3, [r2, #0]
 810a902:	687b      	ldr	r3, [r7, #4]
 810a904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a906:	4613      	mov	r3, r2
 810a908:	009b      	lsls	r3, r3, #2
 810a90a:	4413      	add	r3, r2
 810a90c:	009b      	lsls	r3, r3, #2
 810a90e:	4a15      	ldr	r2, [pc, #84]	; (810a964 <prvAddNewTaskToReadyList+0xcc>)
 810a910:	441a      	add	r2, r3
 810a912:	687b      	ldr	r3, [r7, #4]
 810a914:	3304      	adds	r3, #4
 810a916:	4619      	mov	r1, r3
 810a918:	4610      	mov	r0, r2
 810a91a:	f7fe ff7e 	bl	810981a <vListInsertEnd>
=======
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095ec:	2201      	movs	r2, #1
 81095ee:	409a      	lsls	r2, r3
 81095f0:	4b19      	ldr	r3, [pc, #100]	; (8109658 <prvAddNewTaskToReadyList+0xc8>)
 81095f2:	681b      	ldr	r3, [r3, #0]
 81095f4:	4313      	orrs	r3, r2
 81095f6:	4a18      	ldr	r2, [pc, #96]	; (8109658 <prvAddNewTaskToReadyList+0xc8>)
 81095f8:	6013      	str	r3, [r2, #0]
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81095fe:	4613      	mov	r3, r2
 8109600:	009b      	lsls	r3, r3, #2
 8109602:	4413      	add	r3, r2
 8109604:	009b      	lsls	r3, r3, #2
 8109606:	4a15      	ldr	r2, [pc, #84]	; (810965c <prvAddNewTaskToReadyList+0xcc>)
 8109608:	441a      	add	r2, r3
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	3304      	adds	r3, #4
 810960e:	4619      	mov	r1, r3
 8109610:	4610      	mov	r0, r2
 8109612:	f7fe ff9c 	bl	810854e <vListInsertEnd>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 810a91e:	f7ff f961 	bl	8109be4 <vPortExitCritical>
=======
 8109616:	f7ff f977 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	if( xSchedulerRunning != pdFALSE )
<<<<<<< HEAD
 810a922:	4b0d      	ldr	r3, [pc, #52]	; (810a958 <prvAddNewTaskToReadyList+0xc0>)
 810a924:	681b      	ldr	r3, [r3, #0]
 810a926:	2b00      	cmp	r3, #0
 810a928:	d00e      	beq.n	810a948 <prvAddNewTaskToReadyList+0xb0>
=======
 810961a:	4b0d      	ldr	r3, [pc, #52]	; (8109650 <prvAddNewTaskToReadyList+0xc0>)
 810961c:	681b      	ldr	r3, [r3, #0]
 810961e:	2b00      	cmp	r3, #0
 8109620:	d00e      	beq.n	8109640 <prvAddNewTaskToReadyList+0xb0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 810a92a:	4b0a      	ldr	r3, [pc, #40]	; (810a954 <prvAddNewTaskToReadyList+0xbc>)
 810a92c:	681b      	ldr	r3, [r3, #0]
 810a92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a930:	687b      	ldr	r3, [r7, #4]
 810a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a934:	429a      	cmp	r2, r3
 810a936:	d207      	bcs.n	810a948 <prvAddNewTaskToReadyList+0xb0>
=======
 8109622:	4b0a      	ldr	r3, [pc, #40]	; (810964c <prvAddNewTaskToReadyList+0xbc>)
 8109624:	681b      	ldr	r3, [r3, #0]
 8109626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810962c:	429a      	cmp	r2, r3
 810962e:	d207      	bcs.n	8109640 <prvAddNewTaskToReadyList+0xb0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 810a938:	4b0b      	ldr	r3, [pc, #44]	; (810a968 <prvAddNewTaskToReadyList+0xd0>)
 810a93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a93e:	601a      	str	r2, [r3, #0]
 810a940:	f3bf 8f4f 	dsb	sy
 810a944:	f3bf 8f6f 	isb	sy
=======
 8109630:	4b0b      	ldr	r3, [pc, #44]	; (8109660 <prvAddNewTaskToReadyList+0xd0>)
 8109632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109636:	601a      	str	r2, [r3, #0]
 8109638:	f3bf 8f4f 	dsb	sy
 810963c:	f3bf 8f6f 	isb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 810a948:	bf00      	nop
 810a94a:	3708      	adds	r7, #8
 810a94c:	46bd      	mov	sp, r7
 810a94e:	bd80      	pop	{r7, pc}
 810a950:	100405b4 	.word	0x100405b4
 810a954:	100404b4 	.word	0x100404b4
 810a958:	100405c0 	.word	0x100405c0
 810a95c:	100405d0 	.word	0x100405d0
 810a960:	100405bc 	.word	0x100405bc
 810a964:	100404b8 	.word	0x100404b8
 810a968:	e000ed04 	.word	0xe000ed04
=======
 8109640:	bf00      	nop
 8109642:	3708      	adds	r7, #8
 8109644:	46bd      	mov	sp, r7
 8109646:	bd80      	pop	{r7, pc}
 8109648:	100041a4 	.word	0x100041a4
 810964c:	100040a4 	.word	0x100040a4
 8109650:	100041b0 	.word	0x100041b0
 8109654:	100041c0 	.word	0x100041c0
 8109658:	100041ac 	.word	0x100041ac
 810965c:	100040a8 	.word	0x100040a8
 8109660:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810a96c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 810a96c:	b580      	push	{r7, lr}
 810a96e:	b084      	sub	sp, #16
 810a970:	af00      	add	r7, sp, #0
 810a972:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 810a974:	f7ff f906 	bl	8109b84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 810a978:	687b      	ldr	r3, [r7, #4]
 810a97a:	2b00      	cmp	r3, #0
 810a97c:	d102      	bne.n	810a984 <vTaskDelete+0x18>
 810a97e:	4b39      	ldr	r3, [pc, #228]	; (810aa64 <vTaskDelete+0xf8>)
 810a980:	681b      	ldr	r3, [r3, #0]
 810a982:	e000      	b.n	810a986 <vTaskDelete+0x1a>
 810a984:	687b      	ldr	r3, [r7, #4]
 810a986:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a988:	68fb      	ldr	r3, [r7, #12]
 810a98a:	3304      	adds	r3, #4
 810a98c:	4618      	mov	r0, r3
 810a98e:	f7fe ffa1 	bl	81098d4 <uxListRemove>
 810a992:	4603      	mov	r3, r0
 810a994:	2b00      	cmp	r3, #0
 810a996:	d115      	bne.n	810a9c4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810a998:	68fb      	ldr	r3, [r7, #12]
 810a99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a99c:	4932      	ldr	r1, [pc, #200]	; (810aa68 <vTaskDelete+0xfc>)
 810a99e:	4613      	mov	r3, r2
 810a9a0:	009b      	lsls	r3, r3, #2
 810a9a2:	4413      	add	r3, r2
 810a9a4:	009b      	lsls	r3, r3, #2
 810a9a6:	440b      	add	r3, r1
 810a9a8:	681b      	ldr	r3, [r3, #0]
 810a9aa:	2b00      	cmp	r3, #0
 810a9ac:	d10a      	bne.n	810a9c4 <vTaskDelete+0x58>
 810a9ae:	68fb      	ldr	r3, [r7, #12]
 810a9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a9b2:	2201      	movs	r2, #1
 810a9b4:	fa02 f303 	lsl.w	r3, r2, r3
 810a9b8:	43da      	mvns	r2, r3
 810a9ba:	4b2c      	ldr	r3, [pc, #176]	; (810aa6c <vTaskDelete+0x100>)
 810a9bc:	681b      	ldr	r3, [r3, #0]
 810a9be:	4013      	ands	r3, r2
 810a9c0:	4a2a      	ldr	r2, [pc, #168]	; (810aa6c <vTaskDelete+0x100>)
 810a9c2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a9c4:	68fb      	ldr	r3, [r7, #12]
 810a9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a9c8:	2b00      	cmp	r3, #0
 810a9ca:	d004      	beq.n	810a9d6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a9cc:	68fb      	ldr	r3, [r7, #12]
 810a9ce:	3318      	adds	r3, #24
 810a9d0:	4618      	mov	r0, r3
 810a9d2:	f7fe ff7f 	bl	81098d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 810a9d6:	4b26      	ldr	r3, [pc, #152]	; (810aa70 <vTaskDelete+0x104>)
 810a9d8:	681b      	ldr	r3, [r3, #0]
 810a9da:	3301      	adds	r3, #1
 810a9dc:	4a24      	ldr	r2, [pc, #144]	; (810aa70 <vTaskDelete+0x104>)
 810a9de:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 810a9e0:	4b20      	ldr	r3, [pc, #128]	; (810aa64 <vTaskDelete+0xf8>)
 810a9e2:	681b      	ldr	r3, [r3, #0]
 810a9e4:	68fa      	ldr	r2, [r7, #12]
 810a9e6:	429a      	cmp	r2, r3
 810a9e8:	d10b      	bne.n	810aa02 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 810a9ea:	68fb      	ldr	r3, [r7, #12]
 810a9ec:	3304      	adds	r3, #4
 810a9ee:	4619      	mov	r1, r3
 810a9f0:	4820      	ldr	r0, [pc, #128]	; (810aa74 <vTaskDelete+0x108>)
 810a9f2:	f7fe ff12 	bl	810981a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 810a9f6:	4b20      	ldr	r3, [pc, #128]	; (810aa78 <vTaskDelete+0x10c>)
 810a9f8:	681b      	ldr	r3, [r3, #0]
 810a9fa:	3301      	adds	r3, #1
 810a9fc:	4a1e      	ldr	r2, [pc, #120]	; (810aa78 <vTaskDelete+0x10c>)
 810a9fe:	6013      	str	r3, [r2, #0]
 810aa00:	e009      	b.n	810aa16 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 810aa02:	4b1e      	ldr	r3, [pc, #120]	; (810aa7c <vTaskDelete+0x110>)
 810aa04:	681b      	ldr	r3, [r3, #0]
 810aa06:	3b01      	subs	r3, #1
 810aa08:	4a1c      	ldr	r2, [pc, #112]	; (810aa7c <vTaskDelete+0x110>)
 810aa0a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 810aa0c:	68f8      	ldr	r0, [r7, #12]
 810aa0e:	f000 fc1f 	bl	810b250 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 810aa12:	f000 fc4d 	bl	810b2b0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 810aa16:	f7ff f8e5 	bl	8109be4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 810aa1a:	4b19      	ldr	r3, [pc, #100]	; (810aa80 <vTaskDelete+0x114>)
 810aa1c:	681b      	ldr	r3, [r3, #0]
 810aa1e:	2b00      	cmp	r3, #0
 810aa20:	d01b      	beq.n	810aa5a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 810aa22:	4b10      	ldr	r3, [pc, #64]	; (810aa64 <vTaskDelete+0xf8>)
 810aa24:	681b      	ldr	r3, [r3, #0]
 810aa26:	68fa      	ldr	r2, [r7, #12]
 810aa28:	429a      	cmp	r2, r3
 810aa2a:	d116      	bne.n	810aa5a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 810aa2c:	4b15      	ldr	r3, [pc, #84]	; (810aa84 <vTaskDelete+0x118>)
 810aa2e:	681b      	ldr	r3, [r3, #0]
 810aa30:	2b00      	cmp	r3, #0
 810aa32:	d00a      	beq.n	810aa4a <vTaskDelete+0xde>
	__asm volatile
 810aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa38:	f383 8811 	msr	BASEPRI, r3
 810aa3c:	f3bf 8f6f 	isb	sy
 810aa40:	f3bf 8f4f 	dsb	sy
 810aa44:	60bb      	str	r3, [r7, #8]
}
 810aa46:	bf00      	nop
 810aa48:	e7fe      	b.n	810aa48 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 810aa4a:	4b0f      	ldr	r3, [pc, #60]	; (810aa88 <vTaskDelete+0x11c>)
 810aa4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810aa50:	601a      	str	r2, [r3, #0]
 810aa52:	f3bf 8f4f 	dsb	sy
 810aa56:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810aa5a:	bf00      	nop
 810aa5c:	3710      	adds	r7, #16
 810aa5e:	46bd      	mov	sp, r7
 810aa60:	bd80      	pop	{r7, pc}
 810aa62:	bf00      	nop
 810aa64:	100404b4 	.word	0x100404b4
 810aa68:	100404b8 	.word	0x100404b8
 810aa6c:	100405bc 	.word	0x100405bc
 810aa70:	100405d0 	.word	0x100405d0
 810aa74:	10040588 	.word	0x10040588
 810aa78:	1004059c 	.word	0x1004059c
 810aa7c:	100405b4 	.word	0x100405b4
 810aa80:	100405c0 	.word	0x100405c0
 810aa84:	100405dc 	.word	0x100405dc
 810aa88:	e000ed04 	.word	0xe000ed04

0810aa8c <vTaskDelay>:
=======
08109664 <vTaskDelay>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 810aa8c:	b580      	push	{r7, lr}
 810aa8e:	b084      	sub	sp, #16
 810aa90:	af00      	add	r7, sp, #0
 810aa92:	6078      	str	r0, [r7, #4]
=======
 8109664:	b580      	push	{r7, lr}
 8109666:	b084      	sub	sp, #16
 8109668:	af00      	add	r7, sp, #0
 810966a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	BaseType_t xAlreadyYielded = pdFALSE;
<<<<<<< HEAD
 810aa94:	2300      	movs	r3, #0
 810aa96:	60fb      	str	r3, [r7, #12]
=======
 810966c:	2300      	movs	r3, #0
 810966e:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
<<<<<<< HEAD
 810aa98:	687b      	ldr	r3, [r7, #4]
 810aa9a:	2b00      	cmp	r3, #0
 810aa9c:	d017      	beq.n	810aace <vTaskDelay+0x42>
=======
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	2b00      	cmp	r3, #0
 8109674:	d016      	beq.n	81096a4 <vTaskDelay+0x40>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			configASSERT( uxSchedulerSuspended == 0 );
<<<<<<< HEAD
 810aa9e:	4b13      	ldr	r3, [pc, #76]	; (810aaec <vTaskDelay+0x60>)
 810aaa0:	681b      	ldr	r3, [r3, #0]
 810aaa2:	2b00      	cmp	r3, #0
 810aaa4:	d00a      	beq.n	810aabc <vTaskDelay+0x30>
	__asm volatile
 810aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aaaa:	f383 8811 	msr	BASEPRI, r3
 810aaae:	f3bf 8f6f 	isb	sy
 810aab2:	f3bf 8f4f 	dsb	sy
 810aab6:	60bb      	str	r3, [r7, #8]
}
 810aab8:	bf00      	nop
 810aaba:	e7fe      	b.n	810aaba <vTaskDelay+0x2e>
=======
 8109676:	4b13      	ldr	r3, [pc, #76]	; (81096c4 <vTaskDelay+0x60>)
 8109678:	681b      	ldr	r3, [r3, #0]
 810967a:	2b00      	cmp	r3, #0
 810967c:	d009      	beq.n	8109692 <vTaskDelay+0x2e>
 810967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109682:	f383 8811 	msr	BASEPRI, r3
 8109686:	f3bf 8f6f 	isb	sy
 810968a:	f3bf 8f4f 	dsb	sy
 810968e:	60bb      	str	r3, [r7, #8]
 8109690:	e7fe      	b.n	8109690 <vTaskDelay+0x2c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			vTaskSuspendAll();
<<<<<<< HEAD
 810aabc:	f000 f87a 	bl	810abb4 <vTaskSuspendAll>
=======
 8109692:	f000 f879 	bl	8109788 <vTaskSuspendAll>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 810aac0:	2100      	movs	r1, #0
 810aac2:	6878      	ldr	r0, [r7, #4]
 810aac4:	f000 fde6 	bl	810b694 <prvAddCurrentTaskToDelayedList>
=======
 8109696:	2100      	movs	r1, #0
 8109698:	6878      	ldr	r0, [r7, #4]
 810969a:	f000 fdd9 	bl	810a250 <prvAddCurrentTaskToDelayedList>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			xAlreadyYielded = xTaskResumeAll();
<<<<<<< HEAD
 810aac8:	f000 f882 	bl	810abd0 <xTaskResumeAll>
 810aacc:	60f8      	str	r0, [r7, #12]
=======
 810969e:	f000 f881 	bl	81097a4 <xTaskResumeAll>
 81096a2:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 810aace:	68fb      	ldr	r3, [r7, #12]
 810aad0:	2b00      	cmp	r3, #0
 810aad2:	d107      	bne.n	810aae4 <vTaskDelay+0x58>
=======
 81096a4:	68fb      	ldr	r3, [r7, #12]
 81096a6:	2b00      	cmp	r3, #0
 81096a8:	d107      	bne.n	81096ba <vTaskDelay+0x56>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			portYIELD_WITHIN_API();
<<<<<<< HEAD
 810aad4:	4b06      	ldr	r3, [pc, #24]	; (810aaf0 <vTaskDelay+0x64>)
 810aad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810aada:	601a      	str	r2, [r3, #0]
 810aadc:	f3bf 8f4f 	dsb	sy
 810aae0:	f3bf 8f6f 	isb	sy
=======
 81096aa:	4b07      	ldr	r3, [pc, #28]	; (81096c8 <vTaskDelay+0x64>)
 81096ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81096b0:	601a      	str	r2, [r3, #0]
 81096b2:	f3bf 8f4f 	dsb	sy
 81096b6:	f3bf 8f6f 	isb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 810aae4:	bf00      	nop
 810aae6:	3710      	adds	r7, #16
 810aae8:	46bd      	mov	sp, r7
 810aaea:	bd80      	pop	{r7, pc}
 810aaec:	100405dc 	.word	0x100405dc
 810aaf0:	e000ed04 	.word	0xe000ed04
=======
 81096ba:	bf00      	nop
 81096bc:	3710      	adds	r7, #16
 81096be:	46bd      	mov	sp, r7
 81096c0:	bd80      	pop	{r7, pc}
 81096c2:	bf00      	nop
 81096c4:	100041cc 	.word	0x100041cc
 81096c8:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810aaf4 <vTaskStartScheduler>:
=======
081096cc <vTaskStartScheduler>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 810aaf4:	b580      	push	{r7, lr}
 810aaf6:	b08a      	sub	sp, #40	; 0x28
 810aaf8:	af04      	add	r7, sp, #16
=======
 81096cc:	b580      	push	{r7, lr}
 81096ce:	b08a      	sub	sp, #40	; 0x28
 81096d0:	af04      	add	r7, sp, #16
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 810aafa:	2300      	movs	r3, #0
 810aafc:	60bb      	str	r3, [r7, #8]
=======
 81096d2:	2300      	movs	r3, #0
 81096d4:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		StackType_t *pxIdleTaskStackBuffer = NULL;
<<<<<<< HEAD
 810aafe:	2300      	movs	r3, #0
 810ab00:	607b      	str	r3, [r7, #4]
=======
 81096d6:	2300      	movs	r3, #0
 81096d8:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 810ab02:	463a      	mov	r2, r7
 810ab04:	1d39      	adds	r1, r7, #4
 810ab06:	f107 0308 	add.w	r3, r7, #8
 810ab0a:	4618      	mov	r0, r3
 810ab0c:	f7f6 fb64 	bl	81011d8 <vApplicationGetIdleTaskMemory>
=======
 81096da:	463a      	mov	r2, r7
 81096dc:	1d39      	adds	r1, r7, #4
 81096de:	f107 0308 	add.w	r3, r7, #8
 81096e2:	4618      	mov	r0, r3
 81096e4:	f7f7 fd7c 	bl	81011e0 <vApplicationGetIdleTaskMemory>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
<<<<<<< HEAD
 810ab10:	6839      	ldr	r1, [r7, #0]
 810ab12:	687b      	ldr	r3, [r7, #4]
 810ab14:	68ba      	ldr	r2, [r7, #8]
 810ab16:	9202      	str	r2, [sp, #8]
 810ab18:	9301      	str	r3, [sp, #4]
 810ab1a:	2300      	movs	r3, #0
 810ab1c:	9300      	str	r3, [sp, #0]
 810ab1e:	2300      	movs	r3, #0
 810ab20:	460a      	mov	r2, r1
 810ab22:	491e      	ldr	r1, [pc, #120]	; (810ab9c <vTaskStartScheduler+0xa8>)
 810ab24:	481e      	ldr	r0, [pc, #120]	; (810aba0 <vTaskStartScheduler+0xac>)
 810ab26:	f7ff fd8d 	bl	810a644 <xTaskCreateStatic>
 810ab2a:	4603      	mov	r3, r0
 810ab2c:	4a1d      	ldr	r2, [pc, #116]	; (810aba4 <vTaskStartScheduler+0xb0>)
 810ab2e:	6013      	str	r3, [r2, #0]
=======
 81096e8:	6839      	ldr	r1, [r7, #0]
 81096ea:	687b      	ldr	r3, [r7, #4]
 81096ec:	68ba      	ldr	r2, [r7, #8]
 81096ee:	9202      	str	r2, [sp, #8]
 81096f0:	9301      	str	r3, [sp, #4]
 81096f2:	2300      	movs	r3, #0
 81096f4:	9300      	str	r3, [sp, #0]
 81096f6:	2300      	movs	r3, #0
 81096f8:	460a      	mov	r2, r1
 81096fa:	491d      	ldr	r1, [pc, #116]	; (8109770 <vTaskStartScheduler+0xa4>)
 81096fc:	481d      	ldr	r0, [pc, #116]	; (8109774 <vTaskStartScheduler+0xa8>)
 81096fe:	f7ff fe21 	bl	8109344 <xTaskCreateStatic>
 8109702:	4602      	mov	r2, r0
 8109704:	4b1c      	ldr	r3, [pc, #112]	; (8109778 <vTaskStartScheduler+0xac>)
 8109706:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 810ab30:	4b1c      	ldr	r3, [pc, #112]	; (810aba4 <vTaskStartScheduler+0xb0>)
 810ab32:	681b      	ldr	r3, [r3, #0]
 810ab34:	2b00      	cmp	r3, #0
 810ab36:	d002      	beq.n	810ab3e <vTaskStartScheduler+0x4a>
=======
 8109708:	4b1b      	ldr	r3, [pc, #108]	; (8109778 <vTaskStartScheduler+0xac>)
 810970a:	681b      	ldr	r3, [r3, #0]
 810970c:	2b00      	cmp	r3, #0
 810970e:	d002      	beq.n	8109716 <vTaskStartScheduler+0x4a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			xReturn = pdPASS;
<<<<<<< HEAD
 810ab38:	2301      	movs	r3, #1
 810ab3a:	617b      	str	r3, [r7, #20]
 810ab3c:	e001      	b.n	810ab42 <vTaskStartScheduler+0x4e>
=======
 8109710:	2301      	movs	r3, #1
 8109712:	617b      	str	r3, [r7, #20]
 8109714:	e001      	b.n	810971a <vTaskStartScheduler+0x4e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 810ab3e:	2300      	movs	r3, #0
 810ab40:	617b      	str	r3, [r7, #20]
=======
 8109716:	2300      	movs	r3, #0
 8109718:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 810ab42:	697b      	ldr	r3, [r7, #20]
 810ab44:	2b01      	cmp	r3, #1
 810ab46:	d116      	bne.n	810ab76 <vTaskStartScheduler+0x82>
	__asm volatile
 810ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ab4c:	f383 8811 	msr	BASEPRI, r3
 810ab50:	f3bf 8f6f 	isb	sy
 810ab54:	f3bf 8f4f 	dsb	sy
 810ab58:	613b      	str	r3, [r7, #16]
}
 810ab5a:	bf00      	nop
=======
 810971a:	697b      	ldr	r3, [r7, #20]
 810971c:	2b01      	cmp	r3, #1
 810971e:	d115      	bne.n	810974c <vTaskStartScheduler+0x80>
 8109720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109724:	f383 8811 	msr	BASEPRI, r3
 8109728:	f3bf 8f6f 	isb	sy
 810972c:	f3bf 8f4f 	dsb	sy
 8109730:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 810ab5c:	4b12      	ldr	r3, [pc, #72]	; (810aba8 <vTaskStartScheduler+0xb4>)
 810ab5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810ab62:	601a      	str	r2, [r3, #0]
=======
 8109732:	4b12      	ldr	r3, [pc, #72]	; (810977c <vTaskStartScheduler+0xb0>)
 8109734:	f04f 32ff 	mov.w	r2, #4294967295
 8109738:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		xSchedulerRunning = pdTRUE;
<<<<<<< HEAD
 810ab64:	4b11      	ldr	r3, [pc, #68]	; (810abac <vTaskStartScheduler+0xb8>)
 810ab66:	2201      	movs	r2, #1
 810ab68:	601a      	str	r2, [r3, #0]
=======
 810973a:	4b11      	ldr	r3, [pc, #68]	; (8109780 <vTaskStartScheduler+0xb4>)
 810973c:	2201      	movs	r2, #1
 810973e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
<<<<<<< HEAD
 810ab6a:	4b11      	ldr	r3, [pc, #68]	; (810abb0 <vTaskStartScheduler+0xbc>)
 810ab6c:	2200      	movs	r2, #0
 810ab6e:	601a      	str	r2, [r3, #0]
=======
 8109740:	4b10      	ldr	r3, [pc, #64]	; (8109784 <vTaskStartScheduler+0xb8>)
 8109742:	2200      	movs	r2, #0
 8109744:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 810ab70:	f7fe ff66 	bl	8109a40 <xPortStartScheduler>
=======
 8109746:	f7ff f813 	bl	8108770 <xPortStartScheduler>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 810ab74:	e00e      	b.n	810ab94 <vTaskStartScheduler+0xa0>
=======
 810974a:	e00d      	b.n	8109768 <vTaskStartScheduler+0x9c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
<<<<<<< HEAD
 810ab76:	697b      	ldr	r3, [r7, #20]
 810ab78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810ab7c:	d10a      	bne.n	810ab94 <vTaskStartScheduler+0xa0>
	__asm volatile
 810ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ab82:	f383 8811 	msr	BASEPRI, r3
 810ab86:	f3bf 8f6f 	isb	sy
 810ab8a:	f3bf 8f4f 	dsb	sy
 810ab8e:	60fb      	str	r3, [r7, #12]
=======
 810974c:	697b      	ldr	r3, [r7, #20]
 810974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109752:	d109      	bne.n	8109768 <vTaskStartScheduler+0x9c>
 8109754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109758:	f383 8811 	msr	BASEPRI, r3
 810975c:	f3bf 8f6f 	isb	sy
 8109760:	f3bf 8f4f 	dsb	sy
 8109764:	60fb      	str	r3, [r7, #12]
 8109766:	e7fe      	b.n	8109766 <vTaskStartScheduler+0x9a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810ab90:	bf00      	nop
 810ab92:	e7fe      	b.n	810ab92 <vTaskStartScheduler+0x9e>
}
 810ab94:	bf00      	nop
 810ab96:	3718      	adds	r7, #24
 810ab98:	46bd      	mov	sp, r7
 810ab9a:	bd80      	pop	{r7, pc}
 810ab9c:	08114228 	.word	0x08114228
 810aba0:	0810b145 	.word	0x0810b145
 810aba4:	100405d8 	.word	0x100405d8
 810aba8:	100405d4 	.word	0x100405d4
 810abac:	100405c0 	.word	0x100405c0
 810abb0:	100405b8 	.word	0x100405b8
=======
 8109768:	bf00      	nop
 810976a:	3718      	adds	r7, #24
 810976c:	46bd      	mov	sp, r7
 810976e:	bd80      	pop	{r7, pc}
 8109770:	08110518 	.word	0x08110518
 8109774:	08109d11 	.word	0x08109d11
 8109778:	100041c8 	.word	0x100041c8
 810977c:	100041c4 	.word	0x100041c4
 8109780:	100041b0 	.word	0x100041b0
 8109784:	100041a8 	.word	0x100041a8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810abb4 <vTaskSuspendAll>:
=======
08109788 <vTaskSuspendAll>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 810abb4:	b480      	push	{r7}
 810abb6:	af00      	add	r7, sp, #0
=======
 8109788:	b480      	push	{r7}
 810978a:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 810abb8:	4b04      	ldr	r3, [pc, #16]	; (810abcc <vTaskSuspendAll+0x18>)
 810abba:	681b      	ldr	r3, [r3, #0]
 810abbc:	3301      	adds	r3, #1
 810abbe:	4a03      	ldr	r2, [pc, #12]	; (810abcc <vTaskSuspendAll+0x18>)
 810abc0:	6013      	str	r3, [r2, #0]
=======
 810978c:	4b04      	ldr	r3, [pc, #16]	; (81097a0 <vTaskSuspendAll+0x18>)
 810978e:	681b      	ldr	r3, [r3, #0]
 8109790:	3301      	adds	r3, #1
 8109792:	4a03      	ldr	r2, [pc, #12]	; (81097a0 <vTaskSuspendAll+0x18>)
 8109794:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 810abc2:	bf00      	nop
 810abc4:	46bd      	mov	sp, r7
 810abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abca:	4770      	bx	lr
 810abcc:	100405dc 	.word	0x100405dc
=======
 8109796:	bf00      	nop
 8109798:	46bd      	mov	sp, r7
 810979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810979e:	4770      	bx	lr
 81097a0:	100041cc 	.word	0x100041cc
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810abd0 <xTaskResumeAll>:
=======
081097a4 <xTaskResumeAll>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 810abd0:	b580      	push	{r7, lr}
 810abd2:	b084      	sub	sp, #16
 810abd4:	af00      	add	r7, sp, #0
=======
 81097a4:	b580      	push	{r7, lr}
 81097a6:	b084      	sub	sp, #16
 81097a8:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
TCB_t *pxTCB = NULL;
<<<<<<< HEAD
 810abd6:	2300      	movs	r3, #0
 810abd8:	60fb      	str	r3, [r7, #12]
=======
 81097aa:	2300      	movs	r3, #0
 81097ac:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BaseType_t xAlreadyYielded = pdFALSE;
<<<<<<< HEAD
 810abda:	2300      	movs	r3, #0
 810abdc:	60bb      	str	r3, [r7, #8]
=======
 81097ae:	2300      	movs	r3, #0
 81097b0:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 810abde:	4b41      	ldr	r3, [pc, #260]	; (810ace4 <xTaskResumeAll+0x114>)
 810abe0:	681b      	ldr	r3, [r3, #0]
 810abe2:	2b00      	cmp	r3, #0
 810abe4:	d10a      	bne.n	810abfc <xTaskResumeAll+0x2c>
	__asm volatile
 810abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810abea:	f383 8811 	msr	BASEPRI, r3
 810abee:	f3bf 8f6f 	isb	sy
 810abf2:	f3bf 8f4f 	dsb	sy
 810abf6:	603b      	str	r3, [r7, #0]
}
 810abf8:	bf00      	nop
 810abfa:	e7fe      	b.n	810abfa <xTaskResumeAll+0x2a>
=======
 81097b2:	4b41      	ldr	r3, [pc, #260]	; (81098b8 <xTaskResumeAll+0x114>)
 81097b4:	681b      	ldr	r3, [r3, #0]
 81097b6:	2b00      	cmp	r3, #0
 81097b8:	d109      	bne.n	81097ce <xTaskResumeAll+0x2a>
 81097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81097be:	f383 8811 	msr	BASEPRI, r3
 81097c2:	f3bf 8f6f 	isb	sy
 81097c6:	f3bf 8f4f 	dsb	sy
 81097ca:	603b      	str	r3, [r7, #0]
 81097cc:	e7fe      	b.n	81097cc <xTaskResumeAll+0x28>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 810abfc:	f7fe ffc2 	bl	8109b84 <vPortEnterCritical>
=======
 81097ce:	f7ff f86d 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		--uxSchedulerSuspended;
<<<<<<< HEAD
 810ac00:	4b38      	ldr	r3, [pc, #224]	; (810ace4 <xTaskResumeAll+0x114>)
 810ac02:	681b      	ldr	r3, [r3, #0]
 810ac04:	3b01      	subs	r3, #1
 810ac06:	4a37      	ldr	r2, [pc, #220]	; (810ace4 <xTaskResumeAll+0x114>)
 810ac08:	6013      	str	r3, [r2, #0]
=======
 81097d2:	4b39      	ldr	r3, [pc, #228]	; (81098b8 <xTaskResumeAll+0x114>)
 81097d4:	681b      	ldr	r3, [r3, #0]
 81097d6:	3b01      	subs	r3, #1
 81097d8:	4a37      	ldr	r2, [pc, #220]	; (81098b8 <xTaskResumeAll+0x114>)
 81097da:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 810ac0a:	4b36      	ldr	r3, [pc, #216]	; (810ace4 <xTaskResumeAll+0x114>)
 810ac0c:	681b      	ldr	r3, [r3, #0]
 810ac0e:	2b00      	cmp	r3, #0
 810ac10:	d161      	bne.n	810acd6 <xTaskResumeAll+0x106>
=======
 81097dc:	4b36      	ldr	r3, [pc, #216]	; (81098b8 <xTaskResumeAll+0x114>)
 81097de:	681b      	ldr	r3, [r3, #0]
 81097e0:	2b00      	cmp	r3, #0
 81097e2:	d161      	bne.n	81098a8 <xTaskResumeAll+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 810ac12:	4b35      	ldr	r3, [pc, #212]	; (810ace8 <xTaskResumeAll+0x118>)
 810ac14:	681b      	ldr	r3, [r3, #0]
 810ac16:	2b00      	cmp	r3, #0
 810ac18:	d05d      	beq.n	810acd6 <xTaskResumeAll+0x106>
=======
 81097e4:	4b35      	ldr	r3, [pc, #212]	; (81098bc <xTaskResumeAll+0x118>)
 81097e6:	681b      	ldr	r3, [r3, #0]
 81097e8:	2b00      	cmp	r3, #0
 81097ea:	d05d      	beq.n	81098a8 <xTaskResumeAll+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 810ac1a:	e02e      	b.n	810ac7a <xTaskResumeAll+0xaa>
=======
 81097ec:	e02e      	b.n	810984c <xTaskResumeAll+0xa8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 810ac1c:	4b33      	ldr	r3, [pc, #204]	; (810acec <xTaskResumeAll+0x11c>)
 810ac1e:	68db      	ldr	r3, [r3, #12]
 810ac20:	68db      	ldr	r3, [r3, #12]
 810ac22:	60fb      	str	r3, [r7, #12]
=======
 81097ee:	4b34      	ldr	r3, [pc, #208]	; (81098c0 <xTaskResumeAll+0x11c>)
 81097f0:	68db      	ldr	r3, [r3, #12]
 81097f2:	68db      	ldr	r3, [r3, #12]
 81097f4:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
<<<<<<< HEAD
 810ac24:	68fb      	ldr	r3, [r7, #12]
 810ac26:	3318      	adds	r3, #24
 810ac28:	4618      	mov	r0, r3
 810ac2a:	f7fe fe53 	bl	81098d4 <uxListRemove>
=======
 81097f6:	68fb      	ldr	r3, [r7, #12]
 81097f8:	3318      	adds	r3, #24
 81097fa:	4618      	mov	r0, r3
 81097fc:	f7fe ff04 	bl	8108608 <uxListRemove>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 810ac2e:	68fb      	ldr	r3, [r7, #12]
 810ac30:	3304      	adds	r3, #4
 810ac32:	4618      	mov	r0, r3
 810ac34:	f7fe fe4e 	bl	81098d4 <uxListRemove>
=======
 8109800:	68fb      	ldr	r3, [r7, #12]
 8109802:	3304      	adds	r3, #4
 8109804:	4618      	mov	r0, r3
 8109806:	f7fe feff 	bl	8108608 <uxListRemove>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 810ac38:	68fb      	ldr	r3, [r7, #12]
 810ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ac3c:	2201      	movs	r2, #1
 810ac3e:	409a      	lsls	r2, r3
 810ac40:	4b2b      	ldr	r3, [pc, #172]	; (810acf0 <xTaskResumeAll+0x120>)
 810ac42:	681b      	ldr	r3, [r3, #0]
 810ac44:	4313      	orrs	r3, r2
 810ac46:	4a2a      	ldr	r2, [pc, #168]	; (810acf0 <xTaskResumeAll+0x120>)
 810ac48:	6013      	str	r3, [r2, #0]
 810ac4a:	68fb      	ldr	r3, [r7, #12]
 810ac4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ac4e:	4613      	mov	r3, r2
 810ac50:	009b      	lsls	r3, r3, #2
 810ac52:	4413      	add	r3, r2
 810ac54:	009b      	lsls	r3, r3, #2
 810ac56:	4a27      	ldr	r2, [pc, #156]	; (810acf4 <xTaskResumeAll+0x124>)
 810ac58:	441a      	add	r2, r3
 810ac5a:	68fb      	ldr	r3, [r7, #12]
 810ac5c:	3304      	adds	r3, #4
 810ac5e:	4619      	mov	r1, r3
 810ac60:	4610      	mov	r0, r2
 810ac62:	f7fe fdda 	bl	810981a <vListInsertEnd>
=======
 810980a:	68fb      	ldr	r3, [r7, #12]
 810980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810980e:	2201      	movs	r2, #1
 8109810:	409a      	lsls	r2, r3
 8109812:	4b2c      	ldr	r3, [pc, #176]	; (81098c4 <xTaskResumeAll+0x120>)
 8109814:	681b      	ldr	r3, [r3, #0]
 8109816:	4313      	orrs	r3, r2
 8109818:	4a2a      	ldr	r2, [pc, #168]	; (81098c4 <xTaskResumeAll+0x120>)
 810981a:	6013      	str	r3, [r2, #0]
 810981c:	68fb      	ldr	r3, [r7, #12]
 810981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109820:	4613      	mov	r3, r2
 8109822:	009b      	lsls	r3, r3, #2
 8109824:	4413      	add	r3, r2
 8109826:	009b      	lsls	r3, r3, #2
 8109828:	4a27      	ldr	r2, [pc, #156]	; (81098c8 <xTaskResumeAll+0x124>)
 810982a:	441a      	add	r2, r3
 810982c:	68fb      	ldr	r3, [r7, #12]
 810982e:	3304      	adds	r3, #4
 8109830:	4619      	mov	r1, r3
 8109832:	4610      	mov	r0, r2
 8109834:	f7fe fe8b 	bl	810854e <vListInsertEnd>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 810ac66:	68fb      	ldr	r3, [r7, #12]
 810ac68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ac6a:	4b23      	ldr	r3, [pc, #140]	; (810acf8 <xTaskResumeAll+0x128>)
 810ac6c:	681b      	ldr	r3, [r3, #0]
 810ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ac70:	429a      	cmp	r2, r3
 810ac72:	d302      	bcc.n	810ac7a <xTaskResumeAll+0xaa>
=======
 8109838:	68fb      	ldr	r3, [r7, #12]
 810983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810983c:	4b23      	ldr	r3, [pc, #140]	; (81098cc <xTaskResumeAll+0x128>)
 810983e:	681b      	ldr	r3, [r3, #0]
 8109840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109842:	429a      	cmp	r2, r3
 8109844:	d302      	bcc.n	810984c <xTaskResumeAll+0xa8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						xYieldPending = pdTRUE;
<<<<<<< HEAD
 810ac74:	4b21      	ldr	r3, [pc, #132]	; (810acfc <xTaskResumeAll+0x12c>)
 810ac76:	2201      	movs	r2, #1
 810ac78:	601a      	str	r2, [r3, #0]
=======
 8109846:	4b22      	ldr	r3, [pc, #136]	; (81098d0 <xTaskResumeAll+0x12c>)
 8109848:	2201      	movs	r2, #1
 810984a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 810ac7a:	4b1c      	ldr	r3, [pc, #112]	; (810acec <xTaskResumeAll+0x11c>)
 810ac7c:	681b      	ldr	r3, [r3, #0]
 810ac7e:	2b00      	cmp	r3, #0
 810ac80:	d1cc      	bne.n	810ac1c <xTaskResumeAll+0x4c>
=======
 810984c:	4b1c      	ldr	r3, [pc, #112]	; (81098c0 <xTaskResumeAll+0x11c>)
 810984e:	681b      	ldr	r3, [r3, #0]
 8109850:	2b00      	cmp	r3, #0
 8109852:	d1cc      	bne.n	81097ee <xTaskResumeAll+0x4a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 810ac82:	68fb      	ldr	r3, [r7, #12]
 810ac84:	2b00      	cmp	r3, #0
 810ac86:	d001      	beq.n	810ac8c <xTaskResumeAll+0xbc>
=======
 8109854:	68fb      	ldr	r3, [r7, #12]
 8109856:	2b00      	cmp	r3, #0
 8109858:	d001      	beq.n	810985e <xTaskResumeAll+0xba>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 810ac88:	f000 fb12 	bl	810b2b0 <prvResetNextTaskUnblockTime>
=======
 810985a:	f000 fb0b 	bl	8109e74 <prvResetNextTaskUnblockTime>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 810ac8c:	4b1c      	ldr	r3, [pc, #112]	; (810ad00 <xTaskResumeAll+0x130>)
 810ac8e:	681b      	ldr	r3, [r3, #0]
 810ac90:	607b      	str	r3, [r7, #4]
=======
 810985e:	4b1d      	ldr	r3, [pc, #116]	; (81098d4 <xTaskResumeAll+0x130>)
 8109860:	681b      	ldr	r3, [r3, #0]
 8109862:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					if( uxPendedCounts > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 810ac92:	687b      	ldr	r3, [r7, #4]
 810ac94:	2b00      	cmp	r3, #0
 810ac96:	d010      	beq.n	810acba <xTaskResumeAll+0xea>
=======
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	2b00      	cmp	r3, #0
 8109868:	d010      	beq.n	810988c <xTaskResumeAll+0xe8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 810ac98:	f000 f836 	bl	810ad08 <xTaskIncrementTick>
 810ac9c:	4603      	mov	r3, r0
 810ac9e:	2b00      	cmp	r3, #0
 810aca0:	d002      	beq.n	810aca8 <xTaskResumeAll+0xd8>
=======
 810986a:	f000 f837 	bl	81098dc <xTaskIncrementTick>
 810986e:	4603      	mov	r3, r0
 8109870:	2b00      	cmp	r3, #0
 8109872:	d002      	beq.n	810987a <xTaskResumeAll+0xd6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
							{
								xYieldPending = pdTRUE;
<<<<<<< HEAD
 810aca2:	4b16      	ldr	r3, [pc, #88]	; (810acfc <xTaskResumeAll+0x12c>)
 810aca4:	2201      	movs	r2, #1
 810aca6:	601a      	str	r2, [r3, #0]
=======
 8109874:	4b16      	ldr	r3, [pc, #88]	; (81098d0 <xTaskResumeAll+0x12c>)
 8109876:	2201      	movs	r2, #1
 8109878:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
<<<<<<< HEAD
 810aca8:	687b      	ldr	r3, [r7, #4]
 810acaa:	3b01      	subs	r3, #1
 810acac:	607b      	str	r3, [r7, #4]
=======
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	3b01      	subs	r3, #1
 810987e:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
<<<<<<< HEAD
 810acae:	687b      	ldr	r3, [r7, #4]
 810acb0:	2b00      	cmp	r3, #0
 810acb2:	d1f1      	bne.n	810ac98 <xTaskResumeAll+0xc8>
=======
 8109880:	687b      	ldr	r3, [r7, #4]
 8109882:	2b00      	cmp	r3, #0
 8109884:	d1f1      	bne.n	810986a <xTaskResumeAll+0xc6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

						uxPendedTicks = 0;
<<<<<<< HEAD
 810acb4:	4b12      	ldr	r3, [pc, #72]	; (810ad00 <xTaskResumeAll+0x130>)
 810acb6:	2200      	movs	r2, #0
 810acb8:	601a      	str	r2, [r3, #0]
=======
 8109886:	4b13      	ldr	r3, [pc, #76]	; (81098d4 <xTaskResumeAll+0x130>)
 8109888:	2200      	movs	r2, #0
 810988a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 810acba:	4b10      	ldr	r3, [pc, #64]	; (810acfc <xTaskResumeAll+0x12c>)
 810acbc:	681b      	ldr	r3, [r3, #0]
 810acbe:	2b00      	cmp	r3, #0
 810acc0:	d009      	beq.n	810acd6 <xTaskResumeAll+0x106>
=======
 810988c:	4b10      	ldr	r3, [pc, #64]	; (81098d0 <xTaskResumeAll+0x12c>)
 810988e:	681b      	ldr	r3, [r3, #0]
 8109890:	2b00      	cmp	r3, #0
 8109892:	d009      	beq.n	81098a8 <xTaskResumeAll+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 810acc2:	2301      	movs	r3, #1
 810acc4:	60bb      	str	r3, [r7, #8]
=======
 8109894:	2301      	movs	r3, #1
 8109896:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 810acc6:	4b0f      	ldr	r3, [pc, #60]	; (810ad04 <xTaskResumeAll+0x134>)
 810acc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810accc:	601a      	str	r2, [r3, #0]
 810acce:	f3bf 8f4f 	dsb	sy
 810acd2:	f3bf 8f6f 	isb	sy
=======
 8109898:	4b0f      	ldr	r3, [pc, #60]	; (81098d8 <xTaskResumeAll+0x134>)
 810989a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810989e:	601a      	str	r2, [r3, #0]
 81098a0:	f3bf 8f4f 	dsb	sy
 81098a4:	f3bf 8f6f 	isb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 810acd6:	f7fe ff85 	bl	8109be4 <vPortExitCritical>
=======
 81098a8:	f7ff f82e 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	return xAlreadyYielded;
<<<<<<< HEAD
 810acda:	68bb      	ldr	r3, [r7, #8]
=======
 81098ac:	68bb      	ldr	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810acdc:	4618      	mov	r0, r3
 810acde:	3710      	adds	r7, #16
 810ace0:	46bd      	mov	sp, r7
 810ace2:	bd80      	pop	{r7, pc}
 810ace4:	100405dc 	.word	0x100405dc
 810ace8:	100405b4 	.word	0x100405b4
 810acec:	10040574 	.word	0x10040574
 810acf0:	100405bc 	.word	0x100405bc
 810acf4:	100404b8 	.word	0x100404b8
 810acf8:	100404b4 	.word	0x100404b4
 810acfc:	100405c8 	.word	0x100405c8
 810ad00:	100405c4 	.word	0x100405c4
 810ad04:	e000ed04 	.word	0xe000ed04
=======
 81098ae:	4618      	mov	r0, r3
 81098b0:	3710      	adds	r7, #16
 81098b2:	46bd      	mov	sp, r7
 81098b4:	bd80      	pop	{r7, pc}
 81098b6:	bf00      	nop
 81098b8:	100041cc 	.word	0x100041cc
 81098bc:	100041a4 	.word	0x100041a4
 81098c0:	10004164 	.word	0x10004164
 81098c4:	100041ac 	.word	0x100041ac
 81098c8:	100040a8 	.word	0x100040a8
 81098cc:	100040a4 	.word	0x100040a4
 81098d0:	100041b8 	.word	0x100041b8
 81098d4:	100041b4 	.word	0x100041b4
 81098d8:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ad08 <xTaskIncrementTick>:
=======
081098dc <xTaskIncrementTick>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 810ad08:	b580      	push	{r7, lr}
 810ad0a:	b086      	sub	sp, #24
 810ad0c:	af00      	add	r7, sp, #0
=======
 81098dc:	b580      	push	{r7, lr}
 81098de:	b086      	sub	sp, #24
 81098e0:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
<<<<<<< HEAD
 810ad0e:	2300      	movs	r3, #0
 810ad10:	617b      	str	r3, [r7, #20]
=======
 81098e2:	2300      	movs	r3, #0
 81098e4:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 810ad12:	4b4e      	ldr	r3, [pc, #312]	; (810ae4c <xTaskIncrementTick+0x144>)
 810ad14:	681b      	ldr	r3, [r3, #0]
 810ad16:	2b00      	cmp	r3, #0
 810ad18:	f040 8088 	bne.w	810ae2c <xTaskIncrementTick+0x124>
=======
 81098e6:	4b4e      	ldr	r3, [pc, #312]	; (8109a20 <xTaskIncrementTick+0x144>)
 81098e8:	681b      	ldr	r3, [r3, #0]
 81098ea:	2b00      	cmp	r3, #0
 81098ec:	f040 8087 	bne.w	81099fe <xTaskIncrementTick+0x122>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 810ad1c:	4b4c      	ldr	r3, [pc, #304]	; (810ae50 <xTaskIncrementTick+0x148>)
 810ad1e:	681b      	ldr	r3, [r3, #0]
 810ad20:	3301      	adds	r3, #1
 810ad22:	613b      	str	r3, [r7, #16]
=======
 81098f0:	4b4c      	ldr	r3, [pc, #304]	; (8109a24 <xTaskIncrementTick+0x148>)
 81098f2:	681b      	ldr	r3, [r3, #0]
 81098f4:	3301      	adds	r3, #1
 81098f6:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 810ad24:	4a4a      	ldr	r2, [pc, #296]	; (810ae50 <xTaskIncrementTick+0x148>)
 810ad26:	693b      	ldr	r3, [r7, #16]
 810ad28:	6013      	str	r3, [r2, #0]
=======
 81098f8:	4a4a      	ldr	r2, [pc, #296]	; (8109a24 <xTaskIncrementTick+0x148>)
 81098fa:	693b      	ldr	r3, [r7, #16]
 81098fc:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
<<<<<<< HEAD
 810ad2a:	693b      	ldr	r3, [r7, #16]
 810ad2c:	2b00      	cmp	r3, #0
 810ad2e:	d120      	bne.n	810ad72 <xTaskIncrementTick+0x6a>
=======
 81098fe:	693b      	ldr	r3, [r7, #16]
 8109900:	2b00      	cmp	r3, #0
 8109902:	d11f      	bne.n	8109944 <xTaskIncrementTick+0x68>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			taskSWITCH_DELAYED_LISTS();
<<<<<<< HEAD
 810ad30:	4b48      	ldr	r3, [pc, #288]	; (810ae54 <xTaskIncrementTick+0x14c>)
 810ad32:	681b      	ldr	r3, [r3, #0]
 810ad34:	681b      	ldr	r3, [r3, #0]
 810ad36:	2b00      	cmp	r3, #0
 810ad38:	d00a      	beq.n	810ad50 <xTaskIncrementTick+0x48>
	__asm volatile
 810ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad3e:	f383 8811 	msr	BASEPRI, r3
 810ad42:	f3bf 8f6f 	isb	sy
 810ad46:	f3bf 8f4f 	dsb	sy
 810ad4a:	603b      	str	r3, [r7, #0]
}
 810ad4c:	bf00      	nop
 810ad4e:	e7fe      	b.n	810ad4e <xTaskIncrementTick+0x46>
 810ad50:	4b40      	ldr	r3, [pc, #256]	; (810ae54 <xTaskIncrementTick+0x14c>)
 810ad52:	681b      	ldr	r3, [r3, #0]
 810ad54:	60fb      	str	r3, [r7, #12]
 810ad56:	4b40      	ldr	r3, [pc, #256]	; (810ae58 <xTaskIncrementTick+0x150>)
 810ad58:	681b      	ldr	r3, [r3, #0]
 810ad5a:	4a3e      	ldr	r2, [pc, #248]	; (810ae54 <xTaskIncrementTick+0x14c>)
 810ad5c:	6013      	str	r3, [r2, #0]
 810ad5e:	4a3e      	ldr	r2, [pc, #248]	; (810ae58 <xTaskIncrementTick+0x150>)
 810ad60:	68fb      	ldr	r3, [r7, #12]
 810ad62:	6013      	str	r3, [r2, #0]
 810ad64:	4b3d      	ldr	r3, [pc, #244]	; (810ae5c <xTaskIncrementTick+0x154>)
 810ad66:	681b      	ldr	r3, [r3, #0]
 810ad68:	3301      	adds	r3, #1
 810ad6a:	4a3c      	ldr	r2, [pc, #240]	; (810ae5c <xTaskIncrementTick+0x154>)
 810ad6c:	6013      	str	r3, [r2, #0]
 810ad6e:	f000 fa9f 	bl	810b2b0 <prvResetNextTaskUnblockTime>
=======
 8109904:	4b48      	ldr	r3, [pc, #288]	; (8109a28 <xTaskIncrementTick+0x14c>)
 8109906:	681b      	ldr	r3, [r3, #0]
 8109908:	681b      	ldr	r3, [r3, #0]
 810990a:	2b00      	cmp	r3, #0
 810990c:	d009      	beq.n	8109922 <xTaskIncrementTick+0x46>
 810990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109912:	f383 8811 	msr	BASEPRI, r3
 8109916:	f3bf 8f6f 	isb	sy
 810991a:	f3bf 8f4f 	dsb	sy
 810991e:	603b      	str	r3, [r7, #0]
 8109920:	e7fe      	b.n	8109920 <xTaskIncrementTick+0x44>
 8109922:	4b41      	ldr	r3, [pc, #260]	; (8109a28 <xTaskIncrementTick+0x14c>)
 8109924:	681b      	ldr	r3, [r3, #0]
 8109926:	60fb      	str	r3, [r7, #12]
 8109928:	4b40      	ldr	r3, [pc, #256]	; (8109a2c <xTaskIncrementTick+0x150>)
 810992a:	681b      	ldr	r3, [r3, #0]
 810992c:	4a3e      	ldr	r2, [pc, #248]	; (8109a28 <xTaskIncrementTick+0x14c>)
 810992e:	6013      	str	r3, [r2, #0]
 8109930:	4a3e      	ldr	r2, [pc, #248]	; (8109a2c <xTaskIncrementTick+0x150>)
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	6013      	str	r3, [r2, #0]
 8109936:	4b3e      	ldr	r3, [pc, #248]	; (8109a30 <xTaskIncrementTick+0x154>)
 8109938:	681b      	ldr	r3, [r3, #0]
 810993a:	3301      	adds	r3, #1
 810993c:	4a3c      	ldr	r2, [pc, #240]	; (8109a30 <xTaskIncrementTick+0x154>)
 810993e:	6013      	str	r3, [r2, #0]
 8109940:	f000 fa98 	bl	8109e74 <prvResetNextTaskUnblockTime>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 810ad72:	4b3b      	ldr	r3, [pc, #236]	; (810ae60 <xTaskIncrementTick+0x158>)
 810ad74:	681b      	ldr	r3, [r3, #0]
 810ad76:	693a      	ldr	r2, [r7, #16]
 810ad78:	429a      	cmp	r2, r3
 810ad7a:	d348      	bcc.n	810ae0e <xTaskIncrementTick+0x106>
=======
 8109944:	4b3b      	ldr	r3, [pc, #236]	; (8109a34 <xTaskIncrementTick+0x158>)
 8109946:	681b      	ldr	r3, [r3, #0]
 8109948:	693a      	ldr	r2, [r7, #16]
 810994a:	429a      	cmp	r2, r3
 810994c:	d348      	bcc.n	81099e0 <xTaskIncrementTick+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 810ad7c:	4b35      	ldr	r3, [pc, #212]	; (810ae54 <xTaskIncrementTick+0x14c>)
 810ad7e:	681b      	ldr	r3, [r3, #0]
 810ad80:	681b      	ldr	r3, [r3, #0]
 810ad82:	2b00      	cmp	r3, #0
 810ad84:	d104      	bne.n	810ad90 <xTaskIncrementTick+0x88>
=======
 810994e:	4b36      	ldr	r3, [pc, #216]	; (8109a28 <xTaskIncrementTick+0x14c>)
 8109950:	681b      	ldr	r3, [r3, #0]
 8109952:	681b      	ldr	r3, [r3, #0]
 8109954:	2b00      	cmp	r3, #0
 8109956:	d104      	bne.n	8109962 <xTaskIncrementTick+0x86>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 810ad86:	4b36      	ldr	r3, [pc, #216]	; (810ae60 <xTaskIncrementTick+0x158>)
 810ad88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810ad8c:	601a      	str	r2, [r3, #0]
=======
 8109958:	4b36      	ldr	r3, [pc, #216]	; (8109a34 <xTaskIncrementTick+0x158>)
 810995a:	f04f 32ff 	mov.w	r2, #4294967295
 810995e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					break;
<<<<<<< HEAD
 810ad8e:	e03e      	b.n	810ae0e <xTaskIncrementTick+0x106>
=======
 8109960:	e03e      	b.n	81099e0 <xTaskIncrementTick+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 810ad90:	4b30      	ldr	r3, [pc, #192]	; (810ae54 <xTaskIncrementTick+0x14c>)
 810ad92:	681b      	ldr	r3, [r3, #0]
 810ad94:	68db      	ldr	r3, [r3, #12]
 810ad96:	68db      	ldr	r3, [r3, #12]
 810ad98:	60bb      	str	r3, [r7, #8]
=======
 8109962:	4b31      	ldr	r3, [pc, #196]	; (8109a28 <xTaskIncrementTick+0x14c>)
 8109964:	681b      	ldr	r3, [r3, #0]
 8109966:	68db      	ldr	r3, [r3, #12]
 8109968:	68db      	ldr	r3, [r3, #12]
 810996a:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 810ad9a:	68bb      	ldr	r3, [r7, #8]
 810ad9c:	685b      	ldr	r3, [r3, #4]
 810ad9e:	607b      	str	r3, [r7, #4]
=======
 810996c:	68bb      	ldr	r3, [r7, #8]
 810996e:	685b      	ldr	r3, [r3, #4]
 8109970:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					if( xConstTickCount < xItemValue )
<<<<<<< HEAD
 810ada0:	693a      	ldr	r2, [r7, #16]
 810ada2:	687b      	ldr	r3, [r7, #4]
 810ada4:	429a      	cmp	r2, r3
 810ada6:	d203      	bcs.n	810adb0 <xTaskIncrementTick+0xa8>
=======
 8109972:	693a      	ldr	r2, [r7, #16]
 8109974:	687b      	ldr	r3, [r7, #4]
 8109976:	429a      	cmp	r2, r3
 8109978:	d203      	bcs.n	8109982 <xTaskIncrementTick+0xa6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 810ada8:	4a2d      	ldr	r2, [pc, #180]	; (810ae60 <xTaskIncrementTick+0x158>)
 810adaa:	687b      	ldr	r3, [r7, #4]
 810adac:	6013      	str	r3, [r2, #0]
=======
 810997a:	4a2e      	ldr	r2, [pc, #184]	; (8109a34 <xTaskIncrementTick+0x158>)
 810997c:	687b      	ldr	r3, [r7, #4]
 810997e:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
<<<<<<< HEAD
 810adae:	e02e      	b.n	810ae0e <xTaskIncrementTick+0x106>
=======
 8109980:	e02e      	b.n	81099e0 <xTaskIncrementTick+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 810adb0:	68bb      	ldr	r3, [r7, #8]
 810adb2:	3304      	adds	r3, #4
 810adb4:	4618      	mov	r0, r3
 810adb6:	f7fe fd8d 	bl	81098d4 <uxListRemove>
=======
 8109982:	68bb      	ldr	r3, [r7, #8]
 8109984:	3304      	adds	r3, #4
 8109986:	4618      	mov	r0, r3
 8109988:	f7fe fe3e 	bl	8108608 <uxListRemove>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 810adba:	68bb      	ldr	r3, [r7, #8]
 810adbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810adbe:	2b00      	cmp	r3, #0
 810adc0:	d004      	beq.n	810adcc <xTaskIncrementTick+0xc4>
=======
 810998c:	68bb      	ldr	r3, [r7, #8]
 810998e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109990:	2b00      	cmp	r3, #0
 8109992:	d004      	beq.n	810999e <xTaskIncrementTick+0xc2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
<<<<<<< HEAD
 810adc2:	68bb      	ldr	r3, [r7, #8]
 810adc4:	3318      	adds	r3, #24
 810adc6:	4618      	mov	r0, r3
 810adc8:	f7fe fd84 	bl	81098d4 <uxListRemove>
=======
 8109994:	68bb      	ldr	r3, [r7, #8]
 8109996:	3318      	adds	r3, #24
 8109998:	4618      	mov	r0, r3
 810999a:	f7fe fe35 	bl	8108608 <uxListRemove>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 810adcc:	68bb      	ldr	r3, [r7, #8]
 810adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810add0:	2201      	movs	r2, #1
 810add2:	409a      	lsls	r2, r3
 810add4:	4b23      	ldr	r3, [pc, #140]	; (810ae64 <xTaskIncrementTick+0x15c>)
 810add6:	681b      	ldr	r3, [r3, #0]
 810add8:	4313      	orrs	r3, r2
 810adda:	4a22      	ldr	r2, [pc, #136]	; (810ae64 <xTaskIncrementTick+0x15c>)
 810addc:	6013      	str	r3, [r2, #0]
 810adde:	68bb      	ldr	r3, [r7, #8]
 810ade0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ade2:	4613      	mov	r3, r2
 810ade4:	009b      	lsls	r3, r3, #2
 810ade6:	4413      	add	r3, r2
 810ade8:	009b      	lsls	r3, r3, #2
 810adea:	4a1f      	ldr	r2, [pc, #124]	; (810ae68 <xTaskIncrementTick+0x160>)
 810adec:	441a      	add	r2, r3
 810adee:	68bb      	ldr	r3, [r7, #8]
 810adf0:	3304      	adds	r3, #4
 810adf2:	4619      	mov	r1, r3
 810adf4:	4610      	mov	r0, r2
 810adf6:	f7fe fd10 	bl	810981a <vListInsertEnd>
=======
 810999e:	68bb      	ldr	r3, [r7, #8]
 81099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099a2:	2201      	movs	r2, #1
 81099a4:	409a      	lsls	r2, r3
 81099a6:	4b24      	ldr	r3, [pc, #144]	; (8109a38 <xTaskIncrementTick+0x15c>)
 81099a8:	681b      	ldr	r3, [r3, #0]
 81099aa:	4313      	orrs	r3, r2
 81099ac:	4a22      	ldr	r2, [pc, #136]	; (8109a38 <xTaskIncrementTick+0x15c>)
 81099ae:	6013      	str	r3, [r2, #0]
 81099b0:	68bb      	ldr	r3, [r7, #8]
 81099b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81099b4:	4613      	mov	r3, r2
 81099b6:	009b      	lsls	r3, r3, #2
 81099b8:	4413      	add	r3, r2
 81099ba:	009b      	lsls	r3, r3, #2
 81099bc:	4a1f      	ldr	r2, [pc, #124]	; (8109a3c <xTaskIncrementTick+0x160>)
 81099be:	441a      	add	r2, r3
 81099c0:	68bb      	ldr	r3, [r7, #8]
 81099c2:	3304      	adds	r3, #4
 81099c4:	4619      	mov	r1, r3
 81099c6:	4610      	mov	r0, r2
 81099c8:	f7fe fdc1 	bl	810854e <vListInsertEnd>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 810adfa:	68bb      	ldr	r3, [r7, #8]
 810adfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810adfe:	4b1b      	ldr	r3, [pc, #108]	; (810ae6c <xTaskIncrementTick+0x164>)
 810ae00:	681b      	ldr	r3, [r3, #0]
 810ae02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ae04:	429a      	cmp	r2, r3
 810ae06:	d3b9      	bcc.n	810ad7c <xTaskIncrementTick+0x74>
=======
 81099cc:	68bb      	ldr	r3, [r7, #8]
 81099ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81099d0:	4b1b      	ldr	r3, [pc, #108]	; (8109a40 <xTaskIncrementTick+0x164>)
 81099d2:	681b      	ldr	r3, [r3, #0]
 81099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099d6:	429a      	cmp	r2, r3
 81099d8:	d3b9      	bcc.n	810994e <xTaskIncrementTick+0x72>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						{
							xSwitchRequired = pdTRUE;
<<<<<<< HEAD
 810ae08:	2301      	movs	r3, #1
 810ae0a:	617b      	str	r3, [r7, #20]
=======
 81099da:	2301      	movs	r3, #1
 81099dc:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 810ae0c:	e7b6      	b.n	810ad7c <xTaskIncrementTick+0x74>
=======
 81099de:	e7b6      	b.n	810994e <xTaskIncrementTick+0x72>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 810ae0e:	4b17      	ldr	r3, [pc, #92]	; (810ae6c <xTaskIncrementTick+0x164>)
 810ae10:	681b      	ldr	r3, [r3, #0]
 810ae12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ae14:	4914      	ldr	r1, [pc, #80]	; (810ae68 <xTaskIncrementTick+0x160>)
 810ae16:	4613      	mov	r3, r2
 810ae18:	009b      	lsls	r3, r3, #2
 810ae1a:	4413      	add	r3, r2
 810ae1c:	009b      	lsls	r3, r3, #2
 810ae1e:	440b      	add	r3, r1
 810ae20:	681b      	ldr	r3, [r3, #0]
 810ae22:	2b01      	cmp	r3, #1
 810ae24:	d907      	bls.n	810ae36 <xTaskIncrementTick+0x12e>
=======
 81099e0:	4b17      	ldr	r3, [pc, #92]	; (8109a40 <xTaskIncrementTick+0x164>)
 81099e2:	681b      	ldr	r3, [r3, #0]
 81099e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81099e6:	4915      	ldr	r1, [pc, #84]	; (8109a3c <xTaskIncrementTick+0x160>)
 81099e8:	4613      	mov	r3, r2
 81099ea:	009b      	lsls	r3, r3, #2
 81099ec:	4413      	add	r3, r2
 81099ee:	009b      	lsls	r3, r3, #2
 81099f0:	440b      	add	r3, r1
 81099f2:	681b      	ldr	r3, [r3, #0]
 81099f4:	2b01      	cmp	r3, #1
 81099f6:	d907      	bls.n	8109a08 <xTaskIncrementTick+0x12c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				xSwitchRequired = pdTRUE;
<<<<<<< HEAD
 810ae26:	2301      	movs	r3, #1
 810ae28:	617b      	str	r3, [r7, #20]
 810ae2a:	e004      	b.n	810ae36 <xTaskIncrementTick+0x12e>
=======
 81099f8:	2301      	movs	r3, #1
 81099fa:	617b      	str	r3, [r7, #20]
 81099fc:	e004      	b.n	8109a08 <xTaskIncrementTick+0x12c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< HEAD
 810ae2c:	4b10      	ldr	r3, [pc, #64]	; (810ae70 <xTaskIncrementTick+0x168>)
 810ae2e:	681b      	ldr	r3, [r3, #0]
 810ae30:	3301      	adds	r3, #1
 810ae32:	4a0f      	ldr	r2, [pc, #60]	; (810ae70 <xTaskIncrementTick+0x168>)
 810ae34:	6013      	str	r3, [r2, #0]
=======
 81099fe:	4b11      	ldr	r3, [pc, #68]	; (8109a44 <xTaskIncrementTick+0x168>)
 8109a00:	681b      	ldr	r3, [r3, #0]
 8109a02:	3301      	adds	r3, #1
 8109a04:	4a0f      	ldr	r2, [pc, #60]	; (8109a44 <xTaskIncrementTick+0x168>)
 8109a06:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 810ae36:	4b0f      	ldr	r3, [pc, #60]	; (810ae74 <xTaskIncrementTick+0x16c>)
 810ae38:	681b      	ldr	r3, [r3, #0]
 810ae3a:	2b00      	cmp	r3, #0
 810ae3c:	d001      	beq.n	810ae42 <xTaskIncrementTick+0x13a>
=======
 8109a08:	4b0f      	ldr	r3, [pc, #60]	; (8109a48 <xTaskIncrementTick+0x16c>)
 8109a0a:	681b      	ldr	r3, [r3, #0]
 8109a0c:	2b00      	cmp	r3, #0
 8109a0e:	d001      	beq.n	8109a14 <xTaskIncrementTick+0x138>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			xSwitchRequired = pdTRUE;
<<<<<<< HEAD
 810ae3e:	2301      	movs	r3, #1
 810ae40:	617b      	str	r3, [r7, #20]
=======
 8109a10:	2301      	movs	r3, #1
 8109a12:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
<<<<<<< HEAD
 810ae42:	697b      	ldr	r3, [r7, #20]
=======
 8109a14:	697b      	ldr	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810ae44:	4618      	mov	r0, r3
 810ae46:	3718      	adds	r7, #24
 810ae48:	46bd      	mov	sp, r7
 810ae4a:	bd80      	pop	{r7, pc}
 810ae4c:	100405dc 	.word	0x100405dc
 810ae50:	100405b8 	.word	0x100405b8
 810ae54:	1004056c 	.word	0x1004056c
 810ae58:	10040570 	.word	0x10040570
 810ae5c:	100405cc 	.word	0x100405cc
 810ae60:	100405d4 	.word	0x100405d4
 810ae64:	100405bc 	.word	0x100405bc
 810ae68:	100404b8 	.word	0x100404b8
 810ae6c:	100404b4 	.word	0x100404b4
 810ae70:	100405c4 	.word	0x100405c4
 810ae74:	100405c8 	.word	0x100405c8
=======
 8109a16:	4618      	mov	r0, r3
 8109a18:	3718      	adds	r7, #24
 8109a1a:	46bd      	mov	sp, r7
 8109a1c:	bd80      	pop	{r7, pc}
 8109a1e:	bf00      	nop
 8109a20:	100041cc 	.word	0x100041cc
 8109a24:	100041a8 	.word	0x100041a8
 8109a28:	1000415c 	.word	0x1000415c
 8109a2c:	10004160 	.word	0x10004160
 8109a30:	100041bc 	.word	0x100041bc
 8109a34:	100041c4 	.word	0x100041c4
 8109a38:	100041ac 	.word	0x100041ac
 8109a3c:	100040a8 	.word	0x100040a8
 8109a40:	100040a4 	.word	0x100040a4
 8109a44:	100041b4 	.word	0x100041b4
 8109a48:	100041b8 	.word	0x100041b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ae78 <vTaskSwitchContext>:
=======
08109a4c <vTaskSwitchContext>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 810ae78:	b480      	push	{r7}
 810ae7a:	b087      	sub	sp, #28
 810ae7c:	af00      	add	r7, sp, #0
=======
 8109a4c:	b480      	push	{r7}
 8109a4e:	b087      	sub	sp, #28
 8109a50:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 810ae7e:	4b27      	ldr	r3, [pc, #156]	; (810af1c <vTaskSwitchContext+0xa4>)
 810ae80:	681b      	ldr	r3, [r3, #0]
 810ae82:	2b00      	cmp	r3, #0
 810ae84:	d003      	beq.n	810ae8e <vTaskSwitchContext+0x16>
=======
 8109a52:	4b26      	ldr	r3, [pc, #152]	; (8109aec <vTaskSwitchContext+0xa0>)
 8109a54:	681b      	ldr	r3, [r3, #0]
 8109a56:	2b00      	cmp	r3, #0
 8109a58:	d003      	beq.n	8109a62 <vTaskSwitchContext+0x16>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 810ae86:	4b26      	ldr	r3, [pc, #152]	; (810af20 <vTaskSwitchContext+0xa8>)
 810ae88:	2201      	movs	r2, #1
 810ae8a:	601a      	str	r2, [r3, #0]
=======
 8109a5a:	4b25      	ldr	r3, [pc, #148]	; (8109af0 <vTaskSwitchContext+0xa4>)
 8109a5c:	2201      	movs	r2, #1
 8109a5e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 810ae8c:	e03f      	b.n	810af0e <vTaskSwitchContext+0x96>
=======
 8109a60:	e03e      	b.n	8109ae0 <vTaskSwitchContext+0x94>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		xYieldPending = pdFALSE;
<<<<<<< HEAD
 810ae8e:	4b24      	ldr	r3, [pc, #144]	; (810af20 <vTaskSwitchContext+0xa8>)
 810ae90:	2200      	movs	r2, #0
 810ae92:	601a      	str	r2, [r3, #0]
=======
 8109a62:	4b23      	ldr	r3, [pc, #140]	; (8109af0 <vTaskSwitchContext+0xa4>)
 8109a64:	2200      	movs	r2, #0
 8109a66:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 810ae94:	4b23      	ldr	r3, [pc, #140]	; (810af24 <vTaskSwitchContext+0xac>)
 810ae96:	681b      	ldr	r3, [r3, #0]
 810ae98:	60fb      	str	r3, [r7, #12]
=======
 8109a68:	4b22      	ldr	r3, [pc, #136]	; (8109af4 <vTaskSwitchContext+0xa8>)
 8109a6a:	681b      	ldr	r3, [r3, #0]
 8109a6c:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
<<<<<<< HEAD
 810ae9a:	68fb      	ldr	r3, [r7, #12]
 810ae9c:	fab3 f383 	clz	r3, r3
 810aea0:	72fb      	strb	r3, [r7, #11]
=======
 8109a6e:	68fb      	ldr	r3, [r7, #12]
 8109a70:	fab3 f383 	clz	r3, r3
 8109a74:	72fb      	strb	r3, [r7, #11]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return ucReturn;
<<<<<<< HEAD
 810aea2:	7afb      	ldrb	r3, [r7, #11]
 810aea4:	f1c3 031f 	rsb	r3, r3, #31
 810aea8:	617b      	str	r3, [r7, #20]
 810aeaa:	491f      	ldr	r1, [pc, #124]	; (810af28 <vTaskSwitchContext+0xb0>)
 810aeac:	697a      	ldr	r2, [r7, #20]
 810aeae:	4613      	mov	r3, r2
 810aeb0:	009b      	lsls	r3, r3, #2
 810aeb2:	4413      	add	r3, r2
 810aeb4:	009b      	lsls	r3, r3, #2
 810aeb6:	440b      	add	r3, r1
 810aeb8:	681b      	ldr	r3, [r3, #0]
 810aeba:	2b00      	cmp	r3, #0
 810aebc:	d10a      	bne.n	810aed4 <vTaskSwitchContext+0x5c>
=======
 8109a76:	7afb      	ldrb	r3, [r7, #11]
 8109a78:	f1c3 031f 	rsb	r3, r3, #31
 8109a7c:	617b      	str	r3, [r7, #20]
 8109a7e:	491e      	ldr	r1, [pc, #120]	; (8109af8 <vTaskSwitchContext+0xac>)
 8109a80:	697a      	ldr	r2, [r7, #20]
 8109a82:	4613      	mov	r3, r2
 8109a84:	009b      	lsls	r3, r3, #2
 8109a86:	4413      	add	r3, r2
 8109a88:	009b      	lsls	r3, r3, #2
 8109a8a:	440b      	add	r3, r1
 8109a8c:	681b      	ldr	r3, [r3, #0]
 8109a8e:	2b00      	cmp	r3, #0
 8109a90:	d109      	bne.n	8109aa6 <vTaskSwitchContext+0x5a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	__asm volatile
<<<<<<< HEAD
 810aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aec2:	f383 8811 	msr	BASEPRI, r3
 810aec6:	f3bf 8f6f 	isb	sy
 810aeca:	f3bf 8f4f 	dsb	sy
 810aece:	607b      	str	r3, [r7, #4]
=======
 8109a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a96:	f383 8811 	msr	BASEPRI, r3
 8109a9a:	f3bf 8f6f 	isb	sy
 8109a9e:	f3bf 8f4f 	dsb	sy
 8109aa2:	607b      	str	r3, [r7, #4]
 8109aa4:	e7fe      	b.n	8109aa4 <vTaskSwitchContext+0x58>
 8109aa6:	697a      	ldr	r2, [r7, #20]
 8109aa8:	4613      	mov	r3, r2
 8109aaa:	009b      	lsls	r3, r3, #2
 8109aac:	4413      	add	r3, r2
 8109aae:	009b      	lsls	r3, r3, #2
 8109ab0:	4a11      	ldr	r2, [pc, #68]	; (8109af8 <vTaskSwitchContext+0xac>)
 8109ab2:	4413      	add	r3, r2
 8109ab4:	613b      	str	r3, [r7, #16]
 8109ab6:	693b      	ldr	r3, [r7, #16]
 8109ab8:	685b      	ldr	r3, [r3, #4]
 8109aba:	685a      	ldr	r2, [r3, #4]
 8109abc:	693b      	ldr	r3, [r7, #16]
 8109abe:	605a      	str	r2, [r3, #4]
 8109ac0:	693b      	ldr	r3, [r7, #16]
 8109ac2:	685a      	ldr	r2, [r3, #4]
 8109ac4:	693b      	ldr	r3, [r7, #16]
 8109ac6:	3308      	adds	r3, #8
 8109ac8:	429a      	cmp	r2, r3
 8109aca:	d104      	bne.n	8109ad6 <vTaskSwitchContext+0x8a>
 8109acc:	693b      	ldr	r3, [r7, #16]
 8109ace:	685b      	ldr	r3, [r3, #4]
 8109ad0:	685a      	ldr	r2, [r3, #4]
 8109ad2:	693b      	ldr	r3, [r7, #16]
 8109ad4:	605a      	str	r2, [r3, #4]
 8109ad6:	693b      	ldr	r3, [r7, #16]
 8109ad8:	685b      	ldr	r3, [r3, #4]
 8109ada:	68db      	ldr	r3, [r3, #12]
 8109adc:	4a07      	ldr	r2, [pc, #28]	; (8109afc <vTaskSwitchContext+0xb0>)
 8109ade:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810aed0:	bf00      	nop
 810aed2:	e7fe      	b.n	810aed2 <vTaskSwitchContext+0x5a>
 810aed4:	697a      	ldr	r2, [r7, #20]
 810aed6:	4613      	mov	r3, r2
 810aed8:	009b      	lsls	r3, r3, #2
 810aeda:	4413      	add	r3, r2
 810aedc:	009b      	lsls	r3, r3, #2
 810aede:	4a12      	ldr	r2, [pc, #72]	; (810af28 <vTaskSwitchContext+0xb0>)
 810aee0:	4413      	add	r3, r2
 810aee2:	613b      	str	r3, [r7, #16]
 810aee4:	693b      	ldr	r3, [r7, #16]
 810aee6:	685b      	ldr	r3, [r3, #4]
 810aee8:	685a      	ldr	r2, [r3, #4]
 810aeea:	693b      	ldr	r3, [r7, #16]
 810aeec:	605a      	str	r2, [r3, #4]
 810aeee:	693b      	ldr	r3, [r7, #16]
 810aef0:	685a      	ldr	r2, [r3, #4]
 810aef2:	693b      	ldr	r3, [r7, #16]
 810aef4:	3308      	adds	r3, #8
 810aef6:	429a      	cmp	r2, r3
 810aef8:	d104      	bne.n	810af04 <vTaskSwitchContext+0x8c>
 810aefa:	693b      	ldr	r3, [r7, #16]
 810aefc:	685b      	ldr	r3, [r3, #4]
 810aefe:	685a      	ldr	r2, [r3, #4]
 810af00:	693b      	ldr	r3, [r7, #16]
 810af02:	605a      	str	r2, [r3, #4]
 810af04:	693b      	ldr	r3, [r7, #16]
 810af06:	685b      	ldr	r3, [r3, #4]
 810af08:	68db      	ldr	r3, [r3, #12]
 810af0a:	4a08      	ldr	r2, [pc, #32]	; (810af2c <vTaskSwitchContext+0xb4>)
 810af0c:	6013      	str	r3, [r2, #0]
}
 810af0e:	bf00      	nop
 810af10:	371c      	adds	r7, #28
 810af12:	46bd      	mov	sp, r7
 810af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af18:	4770      	bx	lr
 810af1a:	bf00      	nop
 810af1c:	100405dc 	.word	0x100405dc
 810af20:	100405c8 	.word	0x100405c8
 810af24:	100405bc 	.word	0x100405bc
 810af28:	100404b8 	.word	0x100404b8
 810af2c:	100404b4 	.word	0x100404b4
=======
 8109ae0:	bf00      	nop
 8109ae2:	371c      	adds	r7, #28
 8109ae4:	46bd      	mov	sp, r7
 8109ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aea:	4770      	bx	lr
 8109aec:	100041cc 	.word	0x100041cc
 8109af0:	100041b8 	.word	0x100041b8
 8109af4:	100041ac 	.word	0x100041ac
 8109af8:	100040a8 	.word	0x100040a8
 8109afc:	100040a4 	.word	0x100040a4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810af30 <vTaskPlaceOnEventList>:
=======
08109b00 <vTaskPlaceOnEventList>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 810af30:	b580      	push	{r7, lr}
 810af32:	b084      	sub	sp, #16
 810af34:	af00      	add	r7, sp, #0
 810af36:	6078      	str	r0, [r7, #4]
 810af38:	6039      	str	r1, [r7, #0]
=======
 8109b00:	b580      	push	{r7, lr}
 8109b02:	b084      	sub	sp, #16
 8109b04:	af00      	add	r7, sp, #0
 8109b06:	6078      	str	r0, [r7, #4]
 8109b08:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( pxEventList );
<<<<<<< HEAD
 810af3a:	687b      	ldr	r3, [r7, #4]
 810af3c:	2b00      	cmp	r3, #0
 810af3e:	d10a      	bne.n	810af56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 810af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af44:	f383 8811 	msr	BASEPRI, r3
 810af48:	f3bf 8f6f 	isb	sy
 810af4c:	f3bf 8f4f 	dsb	sy
 810af50:	60fb      	str	r3, [r7, #12]
}
 810af52:	bf00      	nop
 810af54:	e7fe      	b.n	810af54 <vTaskPlaceOnEventList+0x24>
=======
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	2b00      	cmp	r3, #0
 8109b0e:	d109      	bne.n	8109b24 <vTaskPlaceOnEventList+0x24>
 8109b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b14:	f383 8811 	msr	BASEPRI, r3
 8109b18:	f3bf 8f6f 	isb	sy
 8109b1c:	f3bf 8f4f 	dsb	sy
 8109b20:	60fb      	str	r3, [r7, #12]
 8109b22:	e7fe      	b.n	8109b22 <vTaskPlaceOnEventList+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 810af56:	4b07      	ldr	r3, [pc, #28]	; (810af74 <vTaskPlaceOnEventList+0x44>)
 810af58:	681b      	ldr	r3, [r3, #0]
 810af5a:	3318      	adds	r3, #24
 810af5c:	4619      	mov	r1, r3
 810af5e:	6878      	ldr	r0, [r7, #4]
 810af60:	f7fe fc7f 	bl	8109862 <vListInsert>
=======
 8109b24:	4b07      	ldr	r3, [pc, #28]	; (8109b44 <vTaskPlaceOnEventList+0x44>)
 8109b26:	681b      	ldr	r3, [r3, #0]
 8109b28:	3318      	adds	r3, #24
 8109b2a:	4619      	mov	r1, r3
 8109b2c:	6878      	ldr	r0, [r7, #4]
 8109b2e:	f7fe fd32 	bl	8108596 <vListInsert>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
<<<<<<< HEAD
 810af64:	2101      	movs	r1, #1
 810af66:	6838      	ldr	r0, [r7, #0]
 810af68:	f000 fb94 	bl	810b694 <prvAddCurrentTaskToDelayedList>
=======
 8109b32:	2101      	movs	r1, #1
 8109b34:	6838      	ldr	r0, [r7, #0]
 8109b36:	f000 fb8b 	bl	810a250 <prvAddCurrentTaskToDelayedList>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810af6c:	bf00      	nop
 810af6e:	3710      	adds	r7, #16
 810af70:	46bd      	mov	sp, r7
 810af72:	bd80      	pop	{r7, pc}
 810af74:	100404b4 	.word	0x100404b4
=======
 8109b3a:	bf00      	nop
 8109b3c:	3710      	adds	r7, #16
 8109b3e:	46bd      	mov	sp, r7
 8109b40:	bd80      	pop	{r7, pc}
 8109b42:	bf00      	nop
 8109b44:	100040a4 	.word	0x100040a4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810af78 <xTaskRemoveFromEventList>:
=======
08109b48 <xTaskRemoveFromEventList>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 810af78:	b580      	push	{r7, lr}
 810af7a:	b086      	sub	sp, #24
 810af7c:	af00      	add	r7, sp, #0
 810af7e:	6078      	str	r0, [r7, #4]
=======
 8109b48:	b580      	push	{r7, lr}
 8109b4a:	b086      	sub	sp, #24
 8109b4c:	af00      	add	r7, sp, #0
 8109b4e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 810af80:	687b      	ldr	r3, [r7, #4]
 810af82:	68db      	ldr	r3, [r3, #12]
 810af84:	68db      	ldr	r3, [r3, #12]
 810af86:	613b      	str	r3, [r7, #16]
=======
 8109b50:	687b      	ldr	r3, [r7, #4]
 8109b52:	68db      	ldr	r3, [r3, #12]
 8109b54:	68db      	ldr	r3, [r3, #12]
 8109b56:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( pxUnblockedTCB );
<<<<<<< HEAD
 810af88:	693b      	ldr	r3, [r7, #16]
 810af8a:	2b00      	cmp	r3, #0
 810af8c:	d10a      	bne.n	810afa4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 810af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af92:	f383 8811 	msr	BASEPRI, r3
 810af96:	f3bf 8f6f 	isb	sy
 810af9a:	f3bf 8f4f 	dsb	sy
 810af9e:	60fb      	str	r3, [r7, #12]
}
 810afa0:	bf00      	nop
 810afa2:	e7fe      	b.n	810afa2 <xTaskRemoveFromEventList+0x2a>
=======
 8109b58:	693b      	ldr	r3, [r7, #16]
 8109b5a:	2b00      	cmp	r3, #0
 8109b5c:	d109      	bne.n	8109b72 <xTaskRemoveFromEventList+0x2a>
 8109b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b62:	f383 8811 	msr	BASEPRI, r3
 8109b66:	f3bf 8f6f 	isb	sy
 8109b6a:	f3bf 8f4f 	dsb	sy
 8109b6e:	60fb      	str	r3, [r7, #12]
 8109b70:	e7fe      	b.n	8109b70 <xTaskRemoveFromEventList+0x28>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 810afa4:	693b      	ldr	r3, [r7, #16]
 810afa6:	3318      	adds	r3, #24
 810afa8:	4618      	mov	r0, r3
 810afaa:	f7fe fc93 	bl	81098d4 <uxListRemove>
=======
 8109b72:	693b      	ldr	r3, [r7, #16]
 8109b74:	3318      	adds	r3, #24
 8109b76:	4618      	mov	r0, r3
 8109b78:	f7fe fd46 	bl	8108608 <uxListRemove>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 810afae:	4b1d      	ldr	r3, [pc, #116]	; (810b024 <xTaskRemoveFromEventList+0xac>)
 810afb0:	681b      	ldr	r3, [r3, #0]
 810afb2:	2b00      	cmp	r3, #0
 810afb4:	d11c      	bne.n	810aff0 <xTaskRemoveFromEventList+0x78>
=======
 8109b7c:	4b1d      	ldr	r3, [pc, #116]	; (8109bf4 <xTaskRemoveFromEventList+0xac>)
 8109b7e:	681b      	ldr	r3, [r3, #0]
 8109b80:	2b00      	cmp	r3, #0
 8109b82:	d11c      	bne.n	8109bbe <xTaskRemoveFromEventList+0x76>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
<<<<<<< HEAD
 810afb6:	693b      	ldr	r3, [r7, #16]
 810afb8:	3304      	adds	r3, #4
 810afba:	4618      	mov	r0, r3
 810afbc:	f7fe fc8a 	bl	81098d4 <uxListRemove>
=======
 8109b84:	693b      	ldr	r3, [r7, #16]
 8109b86:	3304      	adds	r3, #4
 8109b88:	4618      	mov	r0, r3
 8109b8a:	f7fe fd3d 	bl	8108608 <uxListRemove>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		prvAddTaskToReadyList( pxUnblockedTCB );
<<<<<<< HEAD
 810afc0:	693b      	ldr	r3, [r7, #16]
 810afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810afc4:	2201      	movs	r2, #1
 810afc6:	409a      	lsls	r2, r3
 810afc8:	4b17      	ldr	r3, [pc, #92]	; (810b028 <xTaskRemoveFromEventList+0xb0>)
 810afca:	681b      	ldr	r3, [r3, #0]
 810afcc:	4313      	orrs	r3, r2
 810afce:	4a16      	ldr	r2, [pc, #88]	; (810b028 <xTaskRemoveFromEventList+0xb0>)
 810afd0:	6013      	str	r3, [r2, #0]
 810afd2:	693b      	ldr	r3, [r7, #16]
 810afd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810afd6:	4613      	mov	r3, r2
 810afd8:	009b      	lsls	r3, r3, #2
 810afda:	4413      	add	r3, r2
 810afdc:	009b      	lsls	r3, r3, #2
 810afde:	4a13      	ldr	r2, [pc, #76]	; (810b02c <xTaskRemoveFromEventList+0xb4>)
 810afe0:	441a      	add	r2, r3
 810afe2:	693b      	ldr	r3, [r7, #16]
 810afe4:	3304      	adds	r3, #4
 810afe6:	4619      	mov	r1, r3
 810afe8:	4610      	mov	r0, r2
 810afea:	f7fe fc16 	bl	810981a <vListInsertEnd>
 810afee:	e005      	b.n	810affc <xTaskRemoveFromEventList+0x84>
=======
 8109b8e:	693b      	ldr	r3, [r7, #16]
 8109b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b92:	2201      	movs	r2, #1
 8109b94:	409a      	lsls	r2, r3
 8109b96:	4b18      	ldr	r3, [pc, #96]	; (8109bf8 <xTaskRemoveFromEventList+0xb0>)
 8109b98:	681b      	ldr	r3, [r3, #0]
 8109b9a:	4313      	orrs	r3, r2
 8109b9c:	4a16      	ldr	r2, [pc, #88]	; (8109bf8 <xTaskRemoveFromEventList+0xb0>)
 8109b9e:	6013      	str	r3, [r2, #0]
 8109ba0:	693b      	ldr	r3, [r7, #16]
 8109ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109ba4:	4613      	mov	r3, r2
 8109ba6:	009b      	lsls	r3, r3, #2
 8109ba8:	4413      	add	r3, r2
 8109baa:	009b      	lsls	r3, r3, #2
 8109bac:	4a13      	ldr	r2, [pc, #76]	; (8109bfc <xTaskRemoveFromEventList+0xb4>)
 8109bae:	441a      	add	r2, r3
 8109bb0:	693b      	ldr	r3, [r7, #16]
 8109bb2:	3304      	adds	r3, #4
 8109bb4:	4619      	mov	r1, r3
 8109bb6:	4610      	mov	r0, r2
 8109bb8:	f7fe fcc9 	bl	810854e <vListInsertEnd>
 8109bbc:	e005      	b.n	8109bca <xTaskRemoveFromEventList+0x82>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 810aff0:	693b      	ldr	r3, [r7, #16]
 810aff2:	3318      	adds	r3, #24
 810aff4:	4619      	mov	r1, r3
 810aff6:	480e      	ldr	r0, [pc, #56]	; (810b030 <xTaskRemoveFromEventList+0xb8>)
 810aff8:	f7fe fc0f 	bl	810981a <vListInsertEnd>
=======
 8109bbe:	693b      	ldr	r3, [r7, #16]
 8109bc0:	3318      	adds	r3, #24
 8109bc2:	4619      	mov	r1, r3
 8109bc4:	480e      	ldr	r0, [pc, #56]	; (8109c00 <xTaskRemoveFromEventList+0xb8>)
 8109bc6:	f7fe fcc2 	bl	810854e <vListInsertEnd>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 810affc:	693b      	ldr	r3, [r7, #16]
 810affe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b000:	4b0c      	ldr	r3, [pc, #48]	; (810b034 <xTaskRemoveFromEventList+0xbc>)
 810b002:	681b      	ldr	r3, [r3, #0]
 810b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b006:	429a      	cmp	r2, r3
 810b008:	d905      	bls.n	810b016 <xTaskRemoveFromEventList+0x9e>
=======
 8109bca:	693b      	ldr	r3, [r7, #16]
 8109bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109bce:	4b0d      	ldr	r3, [pc, #52]	; (8109c04 <xTaskRemoveFromEventList+0xbc>)
 8109bd0:	681b      	ldr	r3, [r3, #0]
 8109bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109bd4:	429a      	cmp	r2, r3
 8109bd6:	d905      	bls.n	8109be4 <xTaskRemoveFromEventList+0x9c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 810b00a:	2301      	movs	r3, #1
 810b00c:	617b      	str	r3, [r7, #20]
=======
 8109bd8:	2301      	movs	r3, #1
 8109bda:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 810b00e:	4b0a      	ldr	r3, [pc, #40]	; (810b038 <xTaskRemoveFromEventList+0xc0>)
 810b010:	2201      	movs	r2, #1
 810b012:	601a      	str	r2, [r3, #0]
 810b014:	e001      	b.n	810b01a <xTaskRemoveFromEventList+0xa2>
=======
 8109bdc:	4b0a      	ldr	r3, [pc, #40]	; (8109c08 <xTaskRemoveFromEventList+0xc0>)
 8109bde:	2201      	movs	r2, #1
 8109be0:	601a      	str	r2, [r3, #0]
 8109be2:	e001      	b.n	8109be8 <xTaskRemoveFromEventList+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 810b016:	2300      	movs	r3, #0
 810b018:	617b      	str	r3, [r7, #20]
=======
 8109be4:	2300      	movs	r3, #0
 8109be6:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	return xReturn;
<<<<<<< HEAD
 810b01a:	697b      	ldr	r3, [r7, #20]
=======
 8109be8:	697b      	ldr	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b01c:	4618      	mov	r0, r3
 810b01e:	3718      	adds	r7, #24
 810b020:	46bd      	mov	sp, r7
 810b022:	bd80      	pop	{r7, pc}
 810b024:	100405dc 	.word	0x100405dc
 810b028:	100405bc 	.word	0x100405bc
 810b02c:	100404b8 	.word	0x100404b8
 810b030:	10040574 	.word	0x10040574
 810b034:	100404b4 	.word	0x100404b4
 810b038:	100405c8 	.word	0x100405c8
=======
 8109bea:	4618      	mov	r0, r3
 8109bec:	3718      	adds	r7, #24
 8109bee:	46bd      	mov	sp, r7
 8109bf0:	bd80      	pop	{r7, pc}
 8109bf2:	bf00      	nop
 8109bf4:	100041cc 	.word	0x100041cc
 8109bf8:	100041ac 	.word	0x100041ac
 8109bfc:	100040a8 	.word	0x100040a8
 8109c00:	10004164 	.word	0x10004164
 8109c04:	100040a4 	.word	0x100040a4
 8109c08:	100041b8 	.word	0x100041b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b03c <vTaskInternalSetTimeOutState>:
=======
08109c0c <vTaskInternalSetTimeOutState>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 810b03c:	b480      	push	{r7}
 810b03e:	b083      	sub	sp, #12
 810b040:	af00      	add	r7, sp, #0
 810b042:	6078      	str	r0, [r7, #4]
=======
 8109c0c:	b480      	push	{r7}
 8109c0e:	b083      	sub	sp, #12
 8109c10:	af00      	add	r7, sp, #0
 8109c12:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
<<<<<<< HEAD
 810b044:	4b06      	ldr	r3, [pc, #24]	; (810b060 <vTaskInternalSetTimeOutState+0x24>)
 810b046:	681a      	ldr	r2, [r3, #0]
 810b048:	687b      	ldr	r3, [r7, #4]
 810b04a:	601a      	str	r2, [r3, #0]
=======
 8109c14:	4b06      	ldr	r3, [pc, #24]	; (8109c30 <vTaskInternalSetTimeOutState+0x24>)
 8109c16:	681a      	ldr	r2, [r3, #0]
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxTimeOut->xTimeOnEntering = xTickCount;
<<<<<<< HEAD
 810b04c:	4b05      	ldr	r3, [pc, #20]	; (810b064 <vTaskInternalSetTimeOutState+0x28>)
 810b04e:	681a      	ldr	r2, [r3, #0]
 810b050:	687b      	ldr	r3, [r7, #4]
 810b052:	605a      	str	r2, [r3, #4]
=======
 8109c1c:	4b05      	ldr	r3, [pc, #20]	; (8109c34 <vTaskInternalSetTimeOutState+0x28>)
 8109c1e:	681a      	ldr	r2, [r3, #0]
 8109c20:	687b      	ldr	r3, [r7, #4]
 8109c22:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b054:	bf00      	nop
 810b056:	370c      	adds	r7, #12
 810b058:	46bd      	mov	sp, r7
 810b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b05e:	4770      	bx	lr
 810b060:	100405cc 	.word	0x100405cc
 810b064:	100405b8 	.word	0x100405b8
=======
 8109c24:	bf00      	nop
 8109c26:	370c      	adds	r7, #12
 8109c28:	46bd      	mov	sp, r7
 8109c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c2e:	4770      	bx	lr
 8109c30:	100041bc 	.word	0x100041bc
 8109c34:	100041a8 	.word	0x100041a8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b068 <xTaskCheckForTimeOut>:
=======
08109c38 <xTaskCheckForTimeOut>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 810b068:	b580      	push	{r7, lr}
 810b06a:	b088      	sub	sp, #32
 810b06c:	af00      	add	r7, sp, #0
 810b06e:	6078      	str	r0, [r7, #4]
 810b070:	6039      	str	r1, [r7, #0]
=======
 8109c38:	b580      	push	{r7, lr}
 8109c3a:	b088      	sub	sp, #32
 8109c3c:	af00      	add	r7, sp, #0
 8109c3e:	6078      	str	r0, [r7, #4]
 8109c40:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BaseType_t xReturn;

	configASSERT( pxTimeOut );
<<<<<<< HEAD
 810b072:	687b      	ldr	r3, [r7, #4]
 810b074:	2b00      	cmp	r3, #0
 810b076:	d10a      	bne.n	810b08e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 810b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b07c:	f383 8811 	msr	BASEPRI, r3
 810b080:	f3bf 8f6f 	isb	sy
 810b084:	f3bf 8f4f 	dsb	sy
 810b088:	613b      	str	r3, [r7, #16]
}
 810b08a:	bf00      	nop
 810b08c:	e7fe      	b.n	810b08c <xTaskCheckForTimeOut+0x24>
=======
 8109c42:	687b      	ldr	r3, [r7, #4]
 8109c44:	2b00      	cmp	r3, #0
 8109c46:	d109      	bne.n	8109c5c <xTaskCheckForTimeOut+0x24>
 8109c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c4c:	f383 8811 	msr	BASEPRI, r3
 8109c50:	f3bf 8f6f 	isb	sy
 8109c54:	f3bf 8f4f 	dsb	sy
 8109c58:	613b      	str	r3, [r7, #16]
 8109c5a:	e7fe      	b.n	8109c5a <xTaskCheckForTimeOut+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	configASSERT( pxTicksToWait );
<<<<<<< HEAD
 810b08e:	683b      	ldr	r3, [r7, #0]
 810b090:	2b00      	cmp	r3, #0
 810b092:	d10a      	bne.n	810b0aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b098:	f383 8811 	msr	BASEPRI, r3
 810b09c:	f3bf 8f6f 	isb	sy
 810b0a0:	f3bf 8f4f 	dsb	sy
 810b0a4:	60fb      	str	r3, [r7, #12]
}
 810b0a6:	bf00      	nop
 810b0a8:	e7fe      	b.n	810b0a8 <xTaskCheckForTimeOut+0x40>
=======
 8109c5c:	683b      	ldr	r3, [r7, #0]
 8109c5e:	2b00      	cmp	r3, #0
 8109c60:	d109      	bne.n	8109c76 <xTaskCheckForTimeOut+0x3e>
 8109c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c66:	f383 8811 	msr	BASEPRI, r3
 8109c6a:	f3bf 8f6f 	isb	sy
 8109c6e:	f3bf 8f4f 	dsb	sy
 8109c72:	60fb      	str	r3, [r7, #12]
 8109c74:	e7fe      	b.n	8109c74 <xTaskCheckForTimeOut+0x3c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	taskENTER_CRITICAL();
<<<<<<< HEAD
 810b0aa:	f7fe fd6b 	bl	8109b84 <vPortEnterCritical>
=======
 8109c76:	f7fe fe19 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
<<<<<<< HEAD
 810b0ae:	4b1d      	ldr	r3, [pc, #116]	; (810b124 <xTaskCheckForTimeOut+0xbc>)
 810b0b0:	681b      	ldr	r3, [r3, #0]
 810b0b2:	61bb      	str	r3, [r7, #24]
=======
 8109c7a:	4b1d      	ldr	r3, [pc, #116]	; (8109cf0 <xTaskCheckForTimeOut+0xb8>)
 8109c7c:	681b      	ldr	r3, [r3, #0]
 8109c7e:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
<<<<<<< HEAD
 810b0b4:	687b      	ldr	r3, [r7, #4]
 810b0b6:	685b      	ldr	r3, [r3, #4]
 810b0b8:	69ba      	ldr	r2, [r7, #24]
 810b0ba:	1ad3      	subs	r3, r2, r3
 810b0bc:	617b      	str	r3, [r7, #20]
=======
 8109c80:	687b      	ldr	r3, [r7, #4]
 8109c82:	685b      	ldr	r3, [r3, #4]
 8109c84:	69ba      	ldr	r2, [r7, #24]
 8109c86:	1ad3      	subs	r3, r2, r3
 8109c88:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 810b0be:	683b      	ldr	r3, [r7, #0]
 810b0c0:	681b      	ldr	r3, [r3, #0]
 810b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810b0c6:	d102      	bne.n	810b0ce <xTaskCheckForTimeOut+0x66>
=======
 8109c8a:	683b      	ldr	r3, [r7, #0]
 8109c8c:	681b      	ldr	r3, [r3, #0]
 8109c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109c92:	d102      	bne.n	8109c9a <xTaskCheckForTimeOut+0x62>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 810b0c8:	2300      	movs	r3, #0
 810b0ca:	61fb      	str	r3, [r7, #28]
 810b0cc:	e023      	b.n	810b116 <xTaskCheckForTimeOut+0xae>
=======
 8109c94:	2300      	movs	r3, #0
 8109c96:	61fb      	str	r3, [r7, #28]
 8109c98:	e023      	b.n	8109ce2 <xTaskCheckForTimeOut+0xaa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 810b0ce:	687b      	ldr	r3, [r7, #4]
 810b0d0:	681a      	ldr	r2, [r3, #0]
 810b0d2:	4b15      	ldr	r3, [pc, #84]	; (810b128 <xTaskCheckForTimeOut+0xc0>)
 810b0d4:	681b      	ldr	r3, [r3, #0]
 810b0d6:	429a      	cmp	r2, r3
 810b0d8:	d007      	beq.n	810b0ea <xTaskCheckForTimeOut+0x82>
 810b0da:	687b      	ldr	r3, [r7, #4]
 810b0dc:	685b      	ldr	r3, [r3, #4]
 810b0de:	69ba      	ldr	r2, [r7, #24]
 810b0e0:	429a      	cmp	r2, r3
 810b0e2:	d302      	bcc.n	810b0ea <xTaskCheckForTimeOut+0x82>
=======
 8109c9a:	687b      	ldr	r3, [r7, #4]
 8109c9c:	681a      	ldr	r2, [r3, #0]
 8109c9e:	4b15      	ldr	r3, [pc, #84]	; (8109cf4 <xTaskCheckForTimeOut+0xbc>)
 8109ca0:	681b      	ldr	r3, [r3, #0]
 8109ca2:	429a      	cmp	r2, r3
 8109ca4:	d007      	beq.n	8109cb6 <xTaskCheckForTimeOut+0x7e>
 8109ca6:	687b      	ldr	r3, [r7, #4]
 8109ca8:	685b      	ldr	r3, [r3, #4]
 8109caa:	69ba      	ldr	r2, [r7, #24]
 8109cac:	429a      	cmp	r2, r3
 8109cae:	d302      	bcc.n	8109cb6 <xTaskCheckForTimeOut+0x7e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 810b0e4:	2301      	movs	r3, #1
 810b0e6:	61fb      	str	r3, [r7, #28]
 810b0e8:	e015      	b.n	810b116 <xTaskCheckForTimeOut+0xae>
=======
 8109cb0:	2301      	movs	r3, #1
 8109cb2:	61fb      	str	r3, [r7, #28]
 8109cb4:	e015      	b.n	8109ce2 <xTaskCheckForTimeOut+0xaa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
<<<<<<< HEAD
 810b0ea:	683b      	ldr	r3, [r7, #0]
 810b0ec:	681b      	ldr	r3, [r3, #0]
 810b0ee:	697a      	ldr	r2, [r7, #20]
 810b0f0:	429a      	cmp	r2, r3
 810b0f2:	d20b      	bcs.n	810b10c <xTaskCheckForTimeOut+0xa4>
=======
 8109cb6:	683b      	ldr	r3, [r7, #0]
 8109cb8:	681b      	ldr	r3, [r3, #0]
 8109cba:	697a      	ldr	r2, [r7, #20]
 8109cbc:	429a      	cmp	r2, r3
 8109cbe:	d20b      	bcs.n	8109cd8 <xTaskCheckForTimeOut+0xa0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
<<<<<<< HEAD
 810b0f4:	683b      	ldr	r3, [r7, #0]
 810b0f6:	681a      	ldr	r2, [r3, #0]
 810b0f8:	697b      	ldr	r3, [r7, #20]
 810b0fa:	1ad2      	subs	r2, r2, r3
 810b0fc:	683b      	ldr	r3, [r7, #0]
 810b0fe:	601a      	str	r2, [r3, #0]
=======
 8109cc0:	683b      	ldr	r3, [r7, #0]
 8109cc2:	681a      	ldr	r2, [r3, #0]
 8109cc4:	697b      	ldr	r3, [r7, #20]
 8109cc6:	1ad2      	subs	r2, r2, r3
 8109cc8:	683b      	ldr	r3, [r7, #0]
 8109cca:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			vTaskInternalSetTimeOutState( pxTimeOut );
<<<<<<< HEAD
 810b100:	6878      	ldr	r0, [r7, #4]
 810b102:	f7ff ff9b 	bl	810b03c <vTaskInternalSetTimeOutState>
=======
 8109ccc:	6878      	ldr	r0, [r7, #4]
 8109cce:	f7ff ff9d 	bl	8109c0c <vTaskInternalSetTimeOutState>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			xReturn = pdFALSE;
<<<<<<< HEAD
 810b106:	2300      	movs	r3, #0
 810b108:	61fb      	str	r3, [r7, #28]
 810b10a:	e004      	b.n	810b116 <xTaskCheckForTimeOut+0xae>
=======
 8109cd2:	2300      	movs	r3, #0
 8109cd4:	61fb      	str	r3, [r7, #28]
 8109cd6:	e004      	b.n	8109ce2 <xTaskCheckForTimeOut+0xaa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 810b10c:	683b      	ldr	r3, [r7, #0]
 810b10e:	2200      	movs	r2, #0
 810b110:	601a      	str	r2, [r3, #0]
=======
 8109cd8:	683b      	ldr	r3, [r7, #0]
 8109cda:	2200      	movs	r2, #0
 8109cdc:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			xReturn = pdTRUE;
<<<<<<< HEAD
 810b112:	2301      	movs	r3, #1
 810b114:	61fb      	str	r3, [r7, #28]
=======
 8109cde:	2301      	movs	r3, #1
 8109ce0:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 810b116:	f7fe fd65 	bl	8109be4 <vPortExitCritical>
=======
 8109ce2:	f7fe fe11 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	return xReturn;
<<<<<<< HEAD
 810b11a:	69fb      	ldr	r3, [r7, #28]
=======
 8109ce6:	69fb      	ldr	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b11c:	4618      	mov	r0, r3
 810b11e:	3720      	adds	r7, #32
 810b120:	46bd      	mov	sp, r7
 810b122:	bd80      	pop	{r7, pc}
 810b124:	100405b8 	.word	0x100405b8
 810b128:	100405cc 	.word	0x100405cc
=======
 8109ce8:	4618      	mov	r0, r3
 8109cea:	3720      	adds	r7, #32
 8109cec:	46bd      	mov	sp, r7
 8109cee:	bd80      	pop	{r7, pc}
 8109cf0:	100041a8 	.word	0x100041a8
 8109cf4:	100041bc 	.word	0x100041bc
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b12c <vTaskMissedYield>:
=======
08109cf8 <vTaskMissedYield>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 810b12c:	b480      	push	{r7}
 810b12e:	af00      	add	r7, sp, #0
=======
 8109cf8:	b480      	push	{r7}
 8109cfa:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	xYieldPending = pdTRUE;
<<<<<<< HEAD
 810b130:	4b03      	ldr	r3, [pc, #12]	; (810b140 <vTaskMissedYield+0x14>)
 810b132:	2201      	movs	r2, #1
 810b134:	601a      	str	r2, [r3, #0]
=======
 8109cfc:	4b03      	ldr	r3, [pc, #12]	; (8109d0c <vTaskMissedYield+0x14>)
 8109cfe:	2201      	movs	r2, #1
 8109d00:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b136:	bf00      	nop
 810b138:	46bd      	mov	sp, r7
 810b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b13e:	4770      	bx	lr
 810b140:	100405c8 	.word	0x100405c8
=======
 8109d02:	bf00      	nop
 8109d04:	46bd      	mov	sp, r7
 8109d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d0a:	4770      	bx	lr
 8109d0c:	100041b8 	.word	0x100041b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b144 <prvIdleTask>:
=======
08109d10 <prvIdleTask>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 810b144:	b580      	push	{r7, lr}
 810b146:	b082      	sub	sp, #8
 810b148:	af00      	add	r7, sp, #0
 810b14a:	6078      	str	r0, [r7, #4]
=======
 8109d10:	b580      	push	{r7, lr}
 8109d12:	b082      	sub	sp, #8
 8109d14:	af00      	add	r7, sp, #0
 8109d16:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 810b14c:	f000 f852 	bl	810b1f4 <prvCheckTasksWaitingTermination>
=======
 8109d18:	f000 f852 	bl	8109dc0 <prvCheckTasksWaitingTermination>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 810b150:	4b06      	ldr	r3, [pc, #24]	; (810b16c <prvIdleTask+0x28>)
 810b152:	681b      	ldr	r3, [r3, #0]
 810b154:	2b01      	cmp	r3, #1
 810b156:	d9f9      	bls.n	810b14c <prvIdleTask+0x8>
=======
 8109d1c:	4b06      	ldr	r3, [pc, #24]	; (8109d38 <prvIdleTask+0x28>)
 8109d1e:	681b      	ldr	r3, [r3, #0]
 8109d20:	2b01      	cmp	r3, #1
 8109d22:	d9f9      	bls.n	8109d18 <prvIdleTask+0x8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				taskYIELD();
<<<<<<< HEAD
 810b158:	4b05      	ldr	r3, [pc, #20]	; (810b170 <prvIdleTask+0x2c>)
 810b15a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b15e:	601a      	str	r2, [r3, #0]
 810b160:	f3bf 8f4f 	dsb	sy
 810b164:	f3bf 8f6f 	isb	sy
=======
 8109d24:	4b05      	ldr	r3, [pc, #20]	; (8109d3c <prvIdleTask+0x2c>)
 8109d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109d2a:	601a      	str	r2, [r3, #0]
 8109d2c:	f3bf 8f4f 	dsb	sy
 8109d30:	f3bf 8f6f 	isb	sy
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 810b168:	e7f0      	b.n	810b14c <prvIdleTask+0x8>
 810b16a:	bf00      	nop
 810b16c:	100404b8 	.word	0x100404b8
 810b170:	e000ed04 	.word	0xe000ed04
=======
 8109d34:	e7f0      	b.n	8109d18 <prvIdleTask+0x8>
 8109d36:	bf00      	nop
 8109d38:	100040a8 	.word	0x100040a8
 8109d3c:	e000ed04 	.word	0xe000ed04
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b174 <prvInitialiseTaskLists>:
=======
08109d40 <prvInitialiseTaskLists>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 810b174:	b580      	push	{r7, lr}
 810b176:	b082      	sub	sp, #8
 810b178:	af00      	add	r7, sp, #0
=======
 8109d40:	b580      	push	{r7, lr}
 8109d42:	b082      	sub	sp, #8
 8109d44:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
<<<<<<< HEAD
 810b17a:	2300      	movs	r3, #0
 810b17c:	607b      	str	r3, [r7, #4]
 810b17e:	e00c      	b.n	810b19a <prvInitialiseTaskLists+0x26>
=======
 8109d46:	2300      	movs	r3, #0
 8109d48:	607b      	str	r3, [r7, #4]
 8109d4a:	e00c      	b.n	8109d66 <prvInitialiseTaskLists+0x26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
<<<<<<< HEAD
 810b180:	687a      	ldr	r2, [r7, #4]
 810b182:	4613      	mov	r3, r2
 810b184:	009b      	lsls	r3, r3, #2
 810b186:	4413      	add	r3, r2
 810b188:	009b      	lsls	r3, r3, #2
 810b18a:	4a12      	ldr	r2, [pc, #72]	; (810b1d4 <prvInitialiseTaskLists+0x60>)
 810b18c:	4413      	add	r3, r2
 810b18e:	4618      	mov	r0, r3
 810b190:	f7fe fb16 	bl	81097c0 <vListInitialise>
=======
 8109d4c:	687a      	ldr	r2, [r7, #4]
 8109d4e:	4613      	mov	r3, r2
 8109d50:	009b      	lsls	r3, r3, #2
 8109d52:	4413      	add	r3, r2
 8109d54:	009b      	lsls	r3, r3, #2
 8109d56:	4a12      	ldr	r2, [pc, #72]	; (8109da0 <prvInitialiseTaskLists+0x60>)
 8109d58:	4413      	add	r3, r2
 8109d5a:	4618      	mov	r0, r3
 8109d5c:	f7fe fbca 	bl	81084f4 <vListInitialise>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
<<<<<<< HEAD
 810b194:	687b      	ldr	r3, [r7, #4]
 810b196:	3301      	adds	r3, #1
 810b198:	607b      	str	r3, [r7, #4]
 810b19a:	687b      	ldr	r3, [r7, #4]
 810b19c:	2b06      	cmp	r3, #6
 810b19e:	d9ef      	bls.n	810b180 <prvInitialiseTaskLists+0xc>
=======
 8109d60:	687b      	ldr	r3, [r7, #4]
 8109d62:	3301      	adds	r3, #1
 8109d64:	607b      	str	r3, [r7, #4]
 8109d66:	687b      	ldr	r3, [r7, #4]
 8109d68:	2b06      	cmp	r3, #6
 8109d6a:	d9ef      	bls.n	8109d4c <prvInitialiseTaskLists+0xc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	vListInitialise( &xDelayedTaskList1 );
<<<<<<< HEAD
 810b1a0:	480d      	ldr	r0, [pc, #52]	; (810b1d8 <prvInitialiseTaskLists+0x64>)
 810b1a2:	f7fe fb0d 	bl	81097c0 <vListInitialise>
=======
 8109d6c:	480d      	ldr	r0, [pc, #52]	; (8109da4 <prvInitialiseTaskLists+0x64>)
 8109d6e:	f7fe fbc1 	bl	81084f4 <vListInitialise>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	vListInitialise( &xDelayedTaskList2 );
<<<<<<< HEAD
 810b1a6:	480d      	ldr	r0, [pc, #52]	; (810b1dc <prvInitialiseTaskLists+0x68>)
 810b1a8:	f7fe fb0a 	bl	81097c0 <vListInitialise>
=======
 8109d72:	480d      	ldr	r0, [pc, #52]	; (8109da8 <prvInitialiseTaskLists+0x68>)
 8109d74:	f7fe fbbe 	bl	81084f4 <vListInitialise>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	vListInitialise( &xPendingReadyList );
<<<<<<< HEAD
 810b1ac:	480c      	ldr	r0, [pc, #48]	; (810b1e0 <prvInitialiseTaskLists+0x6c>)
 810b1ae:	f7fe fb07 	bl	81097c0 <vListInitialise>
=======
 8109d78:	480c      	ldr	r0, [pc, #48]	; (8109dac <prvInitialiseTaskLists+0x6c>)
 8109d7a:	f7fe fbbb 	bl	81084f4 <vListInitialise>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 810b1b2:	480c      	ldr	r0, [pc, #48]	; (810b1e4 <prvInitialiseTaskLists+0x70>)
 810b1b4:	f7fe fb04 	bl	81097c0 <vListInitialise>
=======
 8109d7e:	480c      	ldr	r0, [pc, #48]	; (8109db0 <prvInitialiseTaskLists+0x70>)
 8109d80:	f7fe fbb8 	bl	81084f4 <vListInitialise>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 810b1b8:	480b      	ldr	r0, [pc, #44]	; (810b1e8 <prvInitialiseTaskLists+0x74>)
 810b1ba:	f7fe fb01 	bl	81097c0 <vListInitialise>
=======
 8109d84:	480b      	ldr	r0, [pc, #44]	; (8109db4 <prvInitialiseTaskLists+0x74>)
 8109d86:	f7fe fbb5 	bl	81084f4 <vListInitialise>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 810b1be:	4b0b      	ldr	r3, [pc, #44]	; (810b1ec <prvInitialiseTaskLists+0x78>)
 810b1c0:	4a05      	ldr	r2, [pc, #20]	; (810b1d8 <prvInitialiseTaskLists+0x64>)
 810b1c2:	601a      	str	r2, [r3, #0]
=======
 8109d8a:	4b0b      	ldr	r3, [pc, #44]	; (8109db8 <prvInitialiseTaskLists+0x78>)
 8109d8c:	4a05      	ldr	r2, [pc, #20]	; (8109da4 <prvInitialiseTaskLists+0x64>)
 8109d8e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
<<<<<<< HEAD
 810b1c4:	4b0a      	ldr	r3, [pc, #40]	; (810b1f0 <prvInitialiseTaskLists+0x7c>)
 810b1c6:	4a05      	ldr	r2, [pc, #20]	; (810b1dc <prvInitialiseTaskLists+0x68>)
 810b1c8:	601a      	str	r2, [r3, #0]
=======
 8109d90:	4b0a      	ldr	r3, [pc, #40]	; (8109dbc <prvInitialiseTaskLists+0x7c>)
 8109d92:	4a05      	ldr	r2, [pc, #20]	; (8109da8 <prvInitialiseTaskLists+0x68>)
 8109d94:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b1ca:	bf00      	nop
 810b1cc:	3708      	adds	r7, #8
 810b1ce:	46bd      	mov	sp, r7
 810b1d0:	bd80      	pop	{r7, pc}
 810b1d2:	bf00      	nop
 810b1d4:	100404b8 	.word	0x100404b8
 810b1d8:	10040544 	.word	0x10040544
 810b1dc:	10040558 	.word	0x10040558
 810b1e0:	10040574 	.word	0x10040574
 810b1e4:	10040588 	.word	0x10040588
 810b1e8:	100405a0 	.word	0x100405a0
 810b1ec:	1004056c 	.word	0x1004056c
 810b1f0:	10040570 	.word	0x10040570
=======
 8109d96:	bf00      	nop
 8109d98:	3708      	adds	r7, #8
 8109d9a:	46bd      	mov	sp, r7
 8109d9c:	bd80      	pop	{r7, pc}
 8109d9e:	bf00      	nop
 8109da0:	100040a8 	.word	0x100040a8
 8109da4:	10004134 	.word	0x10004134
 8109da8:	10004148 	.word	0x10004148
 8109dac:	10004164 	.word	0x10004164
 8109db0:	10004178 	.word	0x10004178
 8109db4:	10004190 	.word	0x10004190
 8109db8:	1000415c 	.word	0x1000415c
 8109dbc:	10004160 	.word	0x10004160
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b1f4 <prvCheckTasksWaitingTermination>:
=======
08109dc0 <prvCheckTasksWaitingTermination>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 810b1f4:	b580      	push	{r7, lr}
 810b1f6:	b082      	sub	sp, #8
 810b1f8:	af00      	add	r7, sp, #0
=======
 8109dc0:	b580      	push	{r7, lr}
 8109dc2:	b082      	sub	sp, #8
 8109dc4:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 810b1fa:	e019      	b.n	810b230 <prvCheckTasksWaitingTermination+0x3c>
=======
 8109dc6:	e019      	b.n	8109dfc <prvCheckTasksWaitingTermination+0x3c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			taskENTER_CRITICAL();
<<<<<<< HEAD
 810b1fc:	f7fe fcc2 	bl	8109b84 <vPortEnterCritical>
=======
 8109dc8:	f7fe fd70 	bl	81088ac <vPortEnterCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 810b200:	4b10      	ldr	r3, [pc, #64]	; (810b244 <prvCheckTasksWaitingTermination+0x50>)
 810b202:	68db      	ldr	r3, [r3, #12]
 810b204:	68db      	ldr	r3, [r3, #12]
 810b206:	607b      	str	r3, [r7, #4]
=======
 8109dcc:	4b0f      	ldr	r3, [pc, #60]	; (8109e0c <prvCheckTasksWaitingTermination+0x4c>)
 8109dce:	68db      	ldr	r3, [r3, #12]
 8109dd0:	68db      	ldr	r3, [r3, #12]
 8109dd2:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 810b208:	687b      	ldr	r3, [r7, #4]
 810b20a:	3304      	adds	r3, #4
 810b20c:	4618      	mov	r0, r3
 810b20e:	f7fe fb61 	bl	81098d4 <uxListRemove>
=======
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	3304      	adds	r3, #4
 8109dd8:	4618      	mov	r0, r3
 8109dda:	f7fe fc15 	bl	8108608 <uxListRemove>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				--uxCurrentNumberOfTasks;
<<<<<<< HEAD
 810b212:	4b0d      	ldr	r3, [pc, #52]	; (810b248 <prvCheckTasksWaitingTermination+0x54>)
 810b214:	681b      	ldr	r3, [r3, #0]
 810b216:	3b01      	subs	r3, #1
 810b218:	4a0b      	ldr	r2, [pc, #44]	; (810b248 <prvCheckTasksWaitingTermination+0x54>)
 810b21a:	6013      	str	r3, [r2, #0]
=======
 8109dde:	4b0c      	ldr	r3, [pc, #48]	; (8109e10 <prvCheckTasksWaitingTermination+0x50>)
 8109de0:	681b      	ldr	r3, [r3, #0]
 8109de2:	3b01      	subs	r3, #1
 8109de4:	4a0a      	ldr	r2, [pc, #40]	; (8109e10 <prvCheckTasksWaitingTermination+0x50>)
 8109de6:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				--uxDeletedTasksWaitingCleanUp;
<<<<<<< HEAD
 810b21c:	4b0b      	ldr	r3, [pc, #44]	; (810b24c <prvCheckTasksWaitingTermination+0x58>)
 810b21e:	681b      	ldr	r3, [r3, #0]
 810b220:	3b01      	subs	r3, #1
 810b222:	4a0a      	ldr	r2, [pc, #40]	; (810b24c <prvCheckTasksWaitingTermination+0x58>)
 810b224:	6013      	str	r3, [r2, #0]
=======
 8109de8:	4b0a      	ldr	r3, [pc, #40]	; (8109e14 <prvCheckTasksWaitingTermination+0x54>)
 8109dea:	681b      	ldr	r3, [r3, #0]
 8109dec:	3b01      	subs	r3, #1
 8109dee:	4a09      	ldr	r2, [pc, #36]	; (8109e14 <prvCheckTasksWaitingTermination+0x54>)
 8109df0:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			taskEXIT_CRITICAL();
<<<<<<< HEAD
 810b226:	f7fe fcdd 	bl	8109be4 <vPortExitCritical>
=======
 8109df2:	f7fe fd89 	bl	8108908 <vPortExitCritical>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			prvDeleteTCB( pxTCB );
<<<<<<< HEAD
 810b22a:	6878      	ldr	r0, [r7, #4]
 810b22c:	f000 f810 	bl	810b250 <prvDeleteTCB>
=======
 8109df6:	6878      	ldr	r0, [r7, #4]
 8109df8:	f000 f80e 	bl	8109e18 <prvDeleteTCB>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 810b230:	4b06      	ldr	r3, [pc, #24]	; (810b24c <prvCheckTasksWaitingTermination+0x58>)
 810b232:	681b      	ldr	r3, [r3, #0]
 810b234:	2b00      	cmp	r3, #0
 810b236:	d1e1      	bne.n	810b1fc <prvCheckTasksWaitingTermination+0x8>
=======
 8109dfc:	4b05      	ldr	r3, [pc, #20]	; (8109e14 <prvCheckTasksWaitingTermination+0x54>)
 8109dfe:	681b      	ldr	r3, [r3, #0]
 8109e00:	2b00      	cmp	r3, #0
 8109e02:	d1e1      	bne.n	8109dc8 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 810b238:	bf00      	nop
 810b23a:	bf00      	nop
 810b23c:	3708      	adds	r7, #8
 810b23e:	46bd      	mov	sp, r7
 810b240:	bd80      	pop	{r7, pc}
 810b242:	bf00      	nop
 810b244:	10040588 	.word	0x10040588
 810b248:	100405b4 	.word	0x100405b4
 810b24c:	1004059c 	.word	0x1004059c
=======
 8109e04:	bf00      	nop
 8109e06:	3708      	adds	r7, #8
 8109e08:	46bd      	mov	sp, r7
 8109e0a:	bd80      	pop	{r7, pc}
 8109e0c:	10004178 	.word	0x10004178
 8109e10:	100041a4 	.word	0x100041a4
 8109e14:	1000418c 	.word	0x1000418c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b250 <prvDeleteTCB>:
=======
08109e18 <prvDeleteTCB>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 810b250:	b580      	push	{r7, lr}
 810b252:	b084      	sub	sp, #16
 810b254:	af00      	add	r7, sp, #0
 810b256:	6078      	str	r0, [r7, #4]
=======
 8109e18:	b580      	push	{r7, lr}
 8109e1a:	b084      	sub	sp, #16
 8109e1c:	af00      	add	r7, sp, #0
 8109e1e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 810b258:	687b      	ldr	r3, [r7, #4]
 810b25a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810b25e:	2b00      	cmp	r3, #0
 810b260:	d108      	bne.n	810b274 <prvDeleteTCB+0x24>
=======
 8109e20:	687b      	ldr	r3, [r7, #4]
 8109e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8109e26:	2b00      	cmp	r3, #0
 8109e28:	d108      	bne.n	8109e3c <prvDeleteTCB+0x24>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 810b262:	687b      	ldr	r3, [r7, #4]
 810b264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b266:	4618      	mov	r0, r3
 810b268:	f7fe f994 	bl	8109594 <vPortFree>
=======
 8109e2a:	687b      	ldr	r3, [r7, #4]
 8109e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109e2e:	4618      	mov	r0, r3
 8109e30:	f7fe fa4c 	bl	81082cc <vPortFree>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				vPortFree( pxTCB );
<<<<<<< HEAD
 810b26c:	6878      	ldr	r0, [r7, #4]
 810b26e:	f7fe f991 	bl	8109594 <vPortFree>
=======
 8109e34:	6878      	ldr	r0, [r7, #4]
 8109e36:	f7fe fa49 	bl	81082cc <vPortFree>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 810b272:	e018      	b.n	810b2a6 <prvDeleteTCB+0x56>
=======
 8109e3a:	e017      	b.n	8109e6c <prvDeleteTCB+0x54>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
<<<<<<< HEAD
 810b274:	687b      	ldr	r3, [r7, #4]
 810b276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810b27a:	2b01      	cmp	r3, #1
 810b27c:	d103      	bne.n	810b286 <prvDeleteTCB+0x36>
=======
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8109e42:	2b01      	cmp	r3, #1
 8109e44:	d103      	bne.n	8109e4e <prvDeleteTCB+0x36>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				vPortFree( pxTCB );
<<<<<<< HEAD
 810b27e:	6878      	ldr	r0, [r7, #4]
 810b280:	f7fe f988 	bl	8109594 <vPortFree>
=======
 8109e46:	6878      	ldr	r0, [r7, #4]
 8109e48:	f7fe fa40 	bl	81082cc <vPortFree>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810b284:	e00f      	b.n	810b2a6 <prvDeleteTCB+0x56>
=======
 8109e4c:	e00e      	b.n	8109e6c <prvDeleteTCB+0x54>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
<<<<<<< HEAD
 810b286:	687b      	ldr	r3, [r7, #4]
 810b288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810b28c:	2b02      	cmp	r3, #2
 810b28e:	d00a      	beq.n	810b2a6 <prvDeleteTCB+0x56>
	__asm volatile
 810b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b294:	f383 8811 	msr	BASEPRI, r3
 810b298:	f3bf 8f6f 	isb	sy
 810b29c:	f3bf 8f4f 	dsb	sy
 810b2a0:	60fb      	str	r3, [r7, #12]
}
 810b2a2:	bf00      	nop
 810b2a4:	e7fe      	b.n	810b2a4 <prvDeleteTCB+0x54>
=======
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8109e54:	2b02      	cmp	r3, #2
 8109e56:	d009      	beq.n	8109e6c <prvDeleteTCB+0x54>
 8109e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e5c:	f383 8811 	msr	BASEPRI, r3
 8109e60:	f3bf 8f6f 	isb	sy
 8109e64:	f3bf 8f4f 	dsb	sy
 8109e68:	60fb      	str	r3, [r7, #12]
 8109e6a:	e7fe      	b.n	8109e6a <prvDeleteTCB+0x52>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810b2a6:	bf00      	nop
 810b2a8:	3710      	adds	r7, #16
 810b2aa:	46bd      	mov	sp, r7
 810b2ac:	bd80      	pop	{r7, pc}
	...
=======
 8109e6c:	bf00      	nop
 8109e6e:	3710      	adds	r7, #16
 8109e70:	46bd      	mov	sp, r7
 8109e72:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b2b0 <prvResetNextTaskUnblockTime>:
=======
08109e74 <prvResetNextTaskUnblockTime>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 810b2b0:	b480      	push	{r7}
 810b2b2:	b083      	sub	sp, #12
 810b2b4:	af00      	add	r7, sp, #0
=======
 8109e74:	b480      	push	{r7}
 8109e76:	b083      	sub	sp, #12
 8109e78:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 810b2b6:	4b0c      	ldr	r3, [pc, #48]	; (810b2e8 <prvResetNextTaskUnblockTime+0x38>)
 810b2b8:	681b      	ldr	r3, [r3, #0]
 810b2ba:	681b      	ldr	r3, [r3, #0]
 810b2bc:	2b00      	cmp	r3, #0
 810b2be:	d104      	bne.n	810b2ca <prvResetNextTaskUnblockTime+0x1a>
=======
 8109e7a:	4b0c      	ldr	r3, [pc, #48]	; (8109eac <prvResetNextTaskUnblockTime+0x38>)
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	2b00      	cmp	r3, #0
 8109e82:	d104      	bne.n	8109e8e <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 810b2c0:	4b0a      	ldr	r3, [pc, #40]	; (810b2ec <prvResetNextTaskUnblockTime+0x3c>)
 810b2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810b2c6:	601a      	str	r2, [r3, #0]
=======
 8109e84:	4b0a      	ldr	r3, [pc, #40]	; (8109eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8109e86:	f04f 32ff 	mov.w	r2, #4294967295
 8109e8a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 810b2c8:	e008      	b.n	810b2dc <prvResetNextTaskUnblockTime+0x2c>
=======
 8109e8c:	e008      	b.n	8109ea0 <prvResetNextTaskUnblockTime+0x2c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 810b2ca:	4b07      	ldr	r3, [pc, #28]	; (810b2e8 <prvResetNextTaskUnblockTime+0x38>)
 810b2cc:	681b      	ldr	r3, [r3, #0]
 810b2ce:	68db      	ldr	r3, [r3, #12]
 810b2d0:	68db      	ldr	r3, [r3, #12]
 810b2d2:	607b      	str	r3, [r7, #4]
=======
 8109e8e:	4b07      	ldr	r3, [pc, #28]	; (8109eac <prvResetNextTaskUnblockTime+0x38>)
 8109e90:	681b      	ldr	r3, [r3, #0]
 8109e92:	68db      	ldr	r3, [r3, #12]
 8109e94:	68db      	ldr	r3, [r3, #12]
 8109e96:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
<<<<<<< HEAD
 810b2d4:	687b      	ldr	r3, [r7, #4]
 810b2d6:	685b      	ldr	r3, [r3, #4]
 810b2d8:	4a04      	ldr	r2, [pc, #16]	; (810b2ec <prvResetNextTaskUnblockTime+0x3c>)
 810b2da:	6013      	str	r3, [r2, #0]
=======
 8109e98:	687b      	ldr	r3, [r7, #4]
 8109e9a:	685b      	ldr	r3, [r3, #4]
 8109e9c:	4a04      	ldr	r2, [pc, #16]	; (8109eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8109e9e:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b2dc:	bf00      	nop
 810b2de:	370c      	adds	r7, #12
 810b2e0:	46bd      	mov	sp, r7
 810b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2e6:	4770      	bx	lr
 810b2e8:	1004056c 	.word	0x1004056c
 810b2ec:	100405d4 	.word	0x100405d4
=======
 8109ea0:	bf00      	nop
 8109ea2:	370c      	adds	r7, #12
 8109ea4:	46bd      	mov	sp, r7
 8109ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109eaa:	4770      	bx	lr
 8109eac:	1000415c 	.word	0x1000415c
 8109eb0:	100041c4 	.word	0x100041c4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b2f0 <xTaskGetSchedulerState>:
=======
08109eb4 <xTaskGetSchedulerState>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 810b2f0:	b480      	push	{r7}
 810b2f2:	b083      	sub	sp, #12
 810b2f4:	af00      	add	r7, sp, #0
=======
 8109eb4:	b480      	push	{r7}
 8109eb6:	b083      	sub	sp, #12
 8109eb8:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 810b2f6:	4b0b      	ldr	r3, [pc, #44]	; (810b324 <xTaskGetSchedulerState+0x34>)
 810b2f8:	681b      	ldr	r3, [r3, #0]
 810b2fa:	2b00      	cmp	r3, #0
 810b2fc:	d102      	bne.n	810b304 <xTaskGetSchedulerState+0x14>
=======
 8109eba:	4b0b      	ldr	r3, [pc, #44]	; (8109ee8 <xTaskGetSchedulerState+0x34>)
 8109ebc:	681b      	ldr	r3, [r3, #0]
 8109ebe:	2b00      	cmp	r3, #0
 8109ec0:	d102      	bne.n	8109ec8 <xTaskGetSchedulerState+0x14>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
<<<<<<< HEAD
 810b2fe:	2301      	movs	r3, #1
 810b300:	607b      	str	r3, [r7, #4]
 810b302:	e008      	b.n	810b316 <xTaskGetSchedulerState+0x26>
=======
 8109ec2:	2301      	movs	r3, #1
 8109ec4:	607b      	str	r3, [r7, #4]
 8109ec6:	e008      	b.n	8109eda <xTaskGetSchedulerState+0x26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 810b304:	4b08      	ldr	r3, [pc, #32]	; (810b328 <xTaskGetSchedulerState+0x38>)
 810b306:	681b      	ldr	r3, [r3, #0]
 810b308:	2b00      	cmp	r3, #0
 810b30a:	d102      	bne.n	810b312 <xTaskGetSchedulerState+0x22>
=======
 8109ec8:	4b08      	ldr	r3, [pc, #32]	; (8109eec <xTaskGetSchedulerState+0x38>)
 8109eca:	681b      	ldr	r3, [r3, #0]
 8109ecc:	2b00      	cmp	r3, #0
 8109ece:	d102      	bne.n	8109ed6 <xTaskGetSchedulerState+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				xReturn = taskSCHEDULER_RUNNING;
<<<<<<< HEAD
 810b30c:	2302      	movs	r3, #2
 810b30e:	607b      	str	r3, [r7, #4]
 810b310:	e001      	b.n	810b316 <xTaskGetSchedulerState+0x26>
=======
 8109ed0:	2302      	movs	r3, #2
 8109ed2:	607b      	str	r3, [r7, #4]
 8109ed4:	e001      	b.n	8109eda <xTaskGetSchedulerState+0x26>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 810b312:	2300      	movs	r3, #0
 810b314:	607b      	str	r3, [r7, #4]
=======
 8109ed6:	2300      	movs	r3, #0
 8109ed8:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}

		return xReturn;
<<<<<<< HEAD
 810b316:	687b      	ldr	r3, [r7, #4]
=======
 8109eda:	687b      	ldr	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810b318:	4618      	mov	r0, r3
 810b31a:	370c      	adds	r7, #12
 810b31c:	46bd      	mov	sp, r7
 810b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b322:	4770      	bx	lr
 810b324:	100405c0 	.word	0x100405c0
 810b328:	100405dc 	.word	0x100405dc
=======
 8109edc:	4618      	mov	r0, r3
 8109ede:	370c      	adds	r7, #12
 8109ee0:	46bd      	mov	sp, r7
 8109ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ee6:	4770      	bx	lr
 8109ee8:	100041b0 	.word	0x100041b0
 8109eec:	100041cc 	.word	0x100041cc
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b32c <xTaskPriorityInherit>:
=======
08109ef0 <xTaskPriorityInherit>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 810b32c:	b580      	push	{r7, lr}
 810b32e:	b084      	sub	sp, #16
 810b330:	af00      	add	r7, sp, #0
 810b332:	6078      	str	r0, [r7, #4]
=======
 8109ef0:	b580      	push	{r7, lr}
 8109ef2:	b084      	sub	sp, #16
 8109ef4:	af00      	add	r7, sp, #0
 8109ef6:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
<<<<<<< HEAD
 810b334:	687b      	ldr	r3, [r7, #4]
 810b336:	60bb      	str	r3, [r7, #8]
=======
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	BaseType_t xReturn = pdFALSE;
<<<<<<< HEAD
 810b338:	2300      	movs	r3, #0
 810b33a:	60fb      	str	r3, [r7, #12]
=======
 8109efc:	2300      	movs	r3, #0
 8109efe:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< HEAD
 810b33c:	687b      	ldr	r3, [r7, #4]
 810b33e:	2b00      	cmp	r3, #0
 810b340:	d069      	beq.n	810b416 <xTaskPriorityInherit+0xea>
=======
 8109f00:	687b      	ldr	r3, [r7, #4]
 8109f02:	2b00      	cmp	r3, #0
 8109f04:	d069      	beq.n	8109fda <xTaskPriorityInherit+0xea>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 810b342:	68bb      	ldr	r3, [r7, #8]
 810b344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b346:	4b36      	ldr	r3, [pc, #216]	; (810b420 <xTaskPriorityInherit+0xf4>)
 810b348:	681b      	ldr	r3, [r3, #0]
 810b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b34c:	429a      	cmp	r2, r3
 810b34e:	d259      	bcs.n	810b404 <xTaskPriorityInherit+0xd8>
=======
 8109f06:	68bb      	ldr	r3, [r7, #8]
 8109f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f0a:	4b36      	ldr	r3, [pc, #216]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109f0c:	681b      	ldr	r3, [r3, #0]
 8109f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f10:	429a      	cmp	r2, r3
 8109f12:	d259      	bcs.n	8109fc8 <xTaskPriorityInherit+0xd8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 810b350:	68bb      	ldr	r3, [r7, #8]
 810b352:	699b      	ldr	r3, [r3, #24]
 810b354:	2b00      	cmp	r3, #0
 810b356:	db06      	blt.n	810b366 <xTaskPriorityInherit+0x3a>
=======
 8109f14:	68bb      	ldr	r3, [r7, #8]
 8109f16:	699b      	ldr	r3, [r3, #24]
 8109f18:	2b00      	cmp	r3, #0
 8109f1a:	db06      	blt.n	8109f2a <xTaskPriorityInherit+0x3a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 810b358:	4b31      	ldr	r3, [pc, #196]	; (810b420 <xTaskPriorityInherit+0xf4>)
 810b35a:	681b      	ldr	r3, [r3, #0]
 810b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b35e:	f1c3 0207 	rsb	r2, r3, #7
 810b362:	68bb      	ldr	r3, [r7, #8]
 810b364:	619a      	str	r2, [r3, #24]
=======
 8109f1c:	4b31      	ldr	r3, [pc, #196]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109f1e:	681b      	ldr	r3, [r3, #0]
 8109f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f22:	f1c3 0207 	rsb	r2, r3, #7
 8109f26:	68bb      	ldr	r3, [r7, #8]
 8109f28:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 810b366:	68bb      	ldr	r3, [r7, #8]
 810b368:	6959      	ldr	r1, [r3, #20]
 810b36a:	68bb      	ldr	r3, [r7, #8]
 810b36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b36e:	4613      	mov	r3, r2
 810b370:	009b      	lsls	r3, r3, #2
 810b372:	4413      	add	r3, r2
 810b374:	009b      	lsls	r3, r3, #2
 810b376:	4a2b      	ldr	r2, [pc, #172]	; (810b424 <xTaskPriorityInherit+0xf8>)
 810b378:	4413      	add	r3, r2
 810b37a:	4299      	cmp	r1, r3
 810b37c:	d13a      	bne.n	810b3f4 <xTaskPriorityInherit+0xc8>
=======
 8109f2a:	68bb      	ldr	r3, [r7, #8]
 8109f2c:	6959      	ldr	r1, [r3, #20]
 8109f2e:	68bb      	ldr	r3, [r7, #8]
 8109f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f32:	4613      	mov	r3, r2
 8109f34:	009b      	lsls	r3, r3, #2
 8109f36:	4413      	add	r3, r2
 8109f38:	009b      	lsls	r3, r3, #2
 8109f3a:	4a2b      	ldr	r2, [pc, #172]	; (8109fe8 <xTaskPriorityInherit+0xf8>)
 8109f3c:	4413      	add	r3, r2
 8109f3e:	4299      	cmp	r1, r3
 8109f40:	d13a      	bne.n	8109fb8 <xTaskPriorityInherit+0xc8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 810b37e:	68bb      	ldr	r3, [r7, #8]
 810b380:	3304      	adds	r3, #4
 810b382:	4618      	mov	r0, r3
 810b384:	f7fe faa6 	bl	81098d4 <uxListRemove>
 810b388:	4603      	mov	r3, r0
 810b38a:	2b00      	cmp	r3, #0
 810b38c:	d115      	bne.n	810b3ba <xTaskPriorityInherit+0x8e>
=======
 8109f42:	68bb      	ldr	r3, [r7, #8]
 8109f44:	3304      	adds	r3, #4
 8109f46:	4618      	mov	r0, r3
 8109f48:	f7fe fb5e 	bl	8108608 <uxListRemove>
 8109f4c:	4603      	mov	r3, r0
 8109f4e:	2b00      	cmp	r3, #0
 8109f50:	d115      	bne.n	8109f7e <xTaskPriorityInherit+0x8e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
<<<<<<< HEAD
 810b38e:	68bb      	ldr	r3, [r7, #8]
 810b390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b392:	4924      	ldr	r1, [pc, #144]	; (810b424 <xTaskPriorityInherit+0xf8>)
 810b394:	4613      	mov	r3, r2
 810b396:	009b      	lsls	r3, r3, #2
 810b398:	4413      	add	r3, r2
 810b39a:	009b      	lsls	r3, r3, #2
 810b39c:	440b      	add	r3, r1
 810b39e:	681b      	ldr	r3, [r3, #0]
 810b3a0:	2b00      	cmp	r3, #0
 810b3a2:	d10a      	bne.n	810b3ba <xTaskPriorityInherit+0x8e>
 810b3a4:	68bb      	ldr	r3, [r7, #8]
 810b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b3a8:	2201      	movs	r2, #1
 810b3aa:	fa02 f303 	lsl.w	r3, r2, r3
 810b3ae:	43da      	mvns	r2, r3
 810b3b0:	4b1d      	ldr	r3, [pc, #116]	; (810b428 <xTaskPriorityInherit+0xfc>)
 810b3b2:	681b      	ldr	r3, [r3, #0]
 810b3b4:	4013      	ands	r3, r2
 810b3b6:	4a1c      	ldr	r2, [pc, #112]	; (810b428 <xTaskPriorityInherit+0xfc>)
 810b3b8:	6013      	str	r3, [r2, #0]
=======
 8109f52:	68bb      	ldr	r3, [r7, #8]
 8109f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f56:	4924      	ldr	r1, [pc, #144]	; (8109fe8 <xTaskPriorityInherit+0xf8>)
 8109f58:	4613      	mov	r3, r2
 8109f5a:	009b      	lsls	r3, r3, #2
 8109f5c:	4413      	add	r3, r2
 8109f5e:	009b      	lsls	r3, r3, #2
 8109f60:	440b      	add	r3, r1
 8109f62:	681b      	ldr	r3, [r3, #0]
 8109f64:	2b00      	cmp	r3, #0
 8109f66:	d10a      	bne.n	8109f7e <xTaskPriorityInherit+0x8e>
 8109f68:	68bb      	ldr	r3, [r7, #8]
 8109f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f6c:	2201      	movs	r2, #1
 8109f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8109f72:	43da      	mvns	r2, r3
 8109f74:	4b1d      	ldr	r3, [pc, #116]	; (8109fec <xTaskPriorityInherit+0xfc>)
 8109f76:	681b      	ldr	r3, [r3, #0]
 8109f78:	4013      	ands	r3, r2
 8109f7a:	4a1c      	ldr	r2, [pc, #112]	; (8109fec <xTaskPriorityInherit+0xfc>)
 8109f7c:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 810b3ba:	4b19      	ldr	r3, [pc, #100]	; (810b420 <xTaskPriorityInherit+0xf4>)
 810b3bc:	681b      	ldr	r3, [r3, #0]
 810b3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b3c0:	68bb      	ldr	r3, [r7, #8]
 810b3c2:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8109f7e:	4b19      	ldr	r3, [pc, #100]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109f80:	681b      	ldr	r3, [r3, #0]
 8109f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f84:	68bb      	ldr	r3, [r7, #8]
 8109f86:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					prvAddTaskToReadyList( pxMutexHolderTCB );
<<<<<<< HEAD
 810b3c4:	68bb      	ldr	r3, [r7, #8]
 810b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b3c8:	2201      	movs	r2, #1
 810b3ca:	409a      	lsls	r2, r3
 810b3cc:	4b16      	ldr	r3, [pc, #88]	; (810b428 <xTaskPriorityInherit+0xfc>)
 810b3ce:	681b      	ldr	r3, [r3, #0]
 810b3d0:	4313      	orrs	r3, r2
 810b3d2:	4a15      	ldr	r2, [pc, #84]	; (810b428 <xTaskPriorityInherit+0xfc>)
 810b3d4:	6013      	str	r3, [r2, #0]
 810b3d6:	68bb      	ldr	r3, [r7, #8]
 810b3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b3da:	4613      	mov	r3, r2
 810b3dc:	009b      	lsls	r3, r3, #2
 810b3de:	4413      	add	r3, r2
 810b3e0:	009b      	lsls	r3, r3, #2
 810b3e2:	4a10      	ldr	r2, [pc, #64]	; (810b424 <xTaskPriorityInherit+0xf8>)
 810b3e4:	441a      	add	r2, r3
 810b3e6:	68bb      	ldr	r3, [r7, #8]
 810b3e8:	3304      	adds	r3, #4
 810b3ea:	4619      	mov	r1, r3
 810b3ec:	4610      	mov	r0, r2
 810b3ee:	f7fe fa14 	bl	810981a <vListInsertEnd>
 810b3f2:	e004      	b.n	810b3fe <xTaskPriorityInherit+0xd2>
=======
 8109f88:	68bb      	ldr	r3, [r7, #8]
 8109f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f8c:	2201      	movs	r2, #1
 8109f8e:	409a      	lsls	r2, r3
 8109f90:	4b16      	ldr	r3, [pc, #88]	; (8109fec <xTaskPriorityInherit+0xfc>)
 8109f92:	681b      	ldr	r3, [r3, #0]
 8109f94:	4313      	orrs	r3, r2
 8109f96:	4a15      	ldr	r2, [pc, #84]	; (8109fec <xTaskPriorityInherit+0xfc>)
 8109f98:	6013      	str	r3, [r2, #0]
 8109f9a:	68bb      	ldr	r3, [r7, #8]
 8109f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f9e:	4613      	mov	r3, r2
 8109fa0:	009b      	lsls	r3, r3, #2
 8109fa2:	4413      	add	r3, r2
 8109fa4:	009b      	lsls	r3, r3, #2
 8109fa6:	4a10      	ldr	r2, [pc, #64]	; (8109fe8 <xTaskPriorityInherit+0xf8>)
 8109fa8:	441a      	add	r2, r3
 8109faa:	68bb      	ldr	r3, [r7, #8]
 8109fac:	3304      	adds	r3, #4
 8109fae:	4619      	mov	r1, r3
 8109fb0:	4610      	mov	r0, r2
 8109fb2:	f7fe facc 	bl	810854e <vListInsertEnd>
 8109fb6:	e004      	b.n	8109fc2 <xTaskPriorityInherit+0xd2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 810b3f4:	4b0a      	ldr	r3, [pc, #40]	; (810b420 <xTaskPriorityInherit+0xf4>)
 810b3f6:	681b      	ldr	r3, [r3, #0]
 810b3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b3fa:	68bb      	ldr	r3, [r7, #8]
 810b3fc:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8109fb8:	4b0a      	ldr	r3, [pc, #40]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109fba:	681b      	ldr	r3, [r3, #0]
 8109fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109fbe:	68bb      	ldr	r3, [r7, #8]
 8109fc0:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< HEAD
 810b3fe:	2301      	movs	r3, #1
 810b400:	60fb      	str	r3, [r7, #12]
 810b402:	e008      	b.n	810b416 <xTaskPriorityInherit+0xea>
=======
 8109fc2:	2301      	movs	r3, #1
 8109fc4:	60fb      	str	r3, [r7, #12]
 8109fc6:	e008      	b.n	8109fda <xTaskPriorityInherit+0xea>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 810b404:	68bb      	ldr	r3, [r7, #8]
 810b406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810b408:	4b05      	ldr	r3, [pc, #20]	; (810b420 <xTaskPriorityInherit+0xf4>)
 810b40a:	681b      	ldr	r3, [r3, #0]
 810b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b40e:	429a      	cmp	r2, r3
 810b410:	d201      	bcs.n	810b416 <xTaskPriorityInherit+0xea>
=======
 8109fc8:	68bb      	ldr	r3, [r7, #8]
 8109fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8109fcc:	4b05      	ldr	r3, [pc, #20]	; (8109fe4 <xTaskPriorityInherit+0xf4>)
 8109fce:	681b      	ldr	r3, [r3, #0]
 8109fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109fd2:	429a      	cmp	r2, r3
 8109fd4:	d201      	bcs.n	8109fda <xTaskPriorityInherit+0xea>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 810b412:	2301      	movs	r3, #1
 810b414:	60fb      	str	r3, [r7, #12]
=======
 8109fd6:	2301      	movs	r3, #1
 8109fd8:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 810b416:	68fb      	ldr	r3, [r7, #12]
=======
 8109fda:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810b418:	4618      	mov	r0, r3
 810b41a:	3710      	adds	r7, #16
 810b41c:	46bd      	mov	sp, r7
 810b41e:	bd80      	pop	{r7, pc}
 810b420:	100404b4 	.word	0x100404b4
 810b424:	100404b8 	.word	0x100404b8
 810b428:	100405bc 	.word	0x100405bc
=======
 8109fdc:	4618      	mov	r0, r3
 8109fde:	3710      	adds	r7, #16
 8109fe0:	46bd      	mov	sp, r7
 8109fe2:	bd80      	pop	{r7, pc}
 8109fe4:	100040a4 	.word	0x100040a4
 8109fe8:	100040a8 	.word	0x100040a8
 8109fec:	100041ac 	.word	0x100041ac
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b42c <xTaskPriorityDisinherit>:
=======
08109ff0 <xTaskPriorityDisinherit>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 810b42c:	b580      	push	{r7, lr}
 810b42e:	b086      	sub	sp, #24
 810b430:	af00      	add	r7, sp, #0
 810b432:	6078      	str	r0, [r7, #4]
=======
 8109ff0:	b580      	push	{r7, lr}
 8109ff2:	b086      	sub	sp, #24
 8109ff4:	af00      	add	r7, sp, #0
 8109ff6:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	TCB_t * const pxTCB = pxMutexHolder;
<<<<<<< HEAD
 810b434:	687b      	ldr	r3, [r7, #4]
 810b436:	613b      	str	r3, [r7, #16]
=======
 8109ff8:	687b      	ldr	r3, [r7, #4]
 8109ffa:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	BaseType_t xReturn = pdFALSE;
<<<<<<< HEAD
 810b438:	2300      	movs	r3, #0
 810b43a:	617b      	str	r3, [r7, #20]
=======
 8109ffc:	2300      	movs	r3, #0
 8109ffe:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( pxMutexHolder != NULL )
<<<<<<< HEAD
 810b43c:	687b      	ldr	r3, [r7, #4]
 810b43e:	2b00      	cmp	r3, #0
 810b440:	d06e      	beq.n	810b520 <xTaskPriorityDisinherit+0xf4>
=======
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	2b00      	cmp	r3, #0
 810a004:	d06c      	beq.n	810a0e0 <xTaskPriorityDisinherit+0xf0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 810b442:	4b3a      	ldr	r3, [pc, #232]	; (810b52c <xTaskPriorityDisinherit+0x100>)
 810b444:	681b      	ldr	r3, [r3, #0]
 810b446:	693a      	ldr	r2, [r7, #16]
 810b448:	429a      	cmp	r2, r3
 810b44a:	d00a      	beq.n	810b462 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 810b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b450:	f383 8811 	msr	BASEPRI, r3
 810b454:	f3bf 8f6f 	isb	sy
 810b458:	f3bf 8f4f 	dsb	sy
 810b45c:	60fb      	str	r3, [r7, #12]
}
 810b45e:	bf00      	nop
 810b460:	e7fe      	b.n	810b460 <xTaskPriorityDisinherit+0x34>
=======
 810a006:	4b39      	ldr	r3, [pc, #228]	; (810a0ec <xTaskPriorityDisinherit+0xfc>)
 810a008:	681b      	ldr	r3, [r3, #0]
 810a00a:	693a      	ldr	r2, [r7, #16]
 810a00c:	429a      	cmp	r2, r3
 810a00e:	d009      	beq.n	810a024 <xTaskPriorityDisinherit+0x34>
 810a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a014:	f383 8811 	msr	BASEPRI, r3
 810a018:	f3bf 8f6f 	isb	sy
 810a01c:	f3bf 8f4f 	dsb	sy
 810a020:	60fb      	str	r3, [r7, #12]
 810a022:	e7fe      	b.n	810a022 <xTaskPriorityDisinherit+0x32>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< HEAD
 810b462:	693b      	ldr	r3, [r7, #16]
 810b464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b466:	2b00      	cmp	r3, #0
 810b468:	d10a      	bne.n	810b480 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 810b46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b46e:	f383 8811 	msr	BASEPRI, r3
 810b472:	f3bf 8f6f 	isb	sy
 810b476:	f3bf 8f4f 	dsb	sy
 810b47a:	60bb      	str	r3, [r7, #8]
}
 810b47c:	bf00      	nop
 810b47e:	e7fe      	b.n	810b47e <xTaskPriorityDisinherit+0x52>
=======
 810a024:	693b      	ldr	r3, [r7, #16]
 810a026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a028:	2b00      	cmp	r3, #0
 810a02a:	d109      	bne.n	810a040 <xTaskPriorityDisinherit+0x50>
 810a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a030:	f383 8811 	msr	BASEPRI, r3
 810a034:	f3bf 8f6f 	isb	sy
 810a038:	f3bf 8f4f 	dsb	sy
 810a03c:	60bb      	str	r3, [r7, #8]
 810a03e:	e7fe      	b.n	810a03e <xTaskPriorityDisinherit+0x4e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			( pxTCB->uxMutexesHeld )--;
<<<<<<< HEAD
 810b480:	693b      	ldr	r3, [r7, #16]
 810b482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b484:	1e5a      	subs	r2, r3, #1
 810b486:	693b      	ldr	r3, [r7, #16]
 810b488:	649a      	str	r2, [r3, #72]	; 0x48
=======
 810a040:	693b      	ldr	r3, [r7, #16]
 810a042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a044:	1e5a      	subs	r2, r3, #1
 810a046:	693b      	ldr	r3, [r7, #16]
 810a048:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 810b48a:	693b      	ldr	r3, [r7, #16]
 810b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b48e:	693b      	ldr	r3, [r7, #16]
 810b490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b492:	429a      	cmp	r2, r3
 810b494:	d044      	beq.n	810b520 <xTaskPriorityDisinherit+0xf4>
=======
 810a04a:	693b      	ldr	r3, [r7, #16]
 810a04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a04e:	693b      	ldr	r3, [r7, #16]
 810a050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a052:	429a      	cmp	r2, r3
 810a054:	d044      	beq.n	810a0e0 <xTaskPriorityDisinherit+0xf0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 810b496:	693b      	ldr	r3, [r7, #16]
 810b498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b49a:	2b00      	cmp	r3, #0
 810b49c:	d140      	bne.n	810b520 <xTaskPriorityDisinherit+0xf4>
=======
 810a056:	693b      	ldr	r3, [r7, #16]
 810a058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a05a:	2b00      	cmp	r3, #0
 810a05c:	d140      	bne.n	810a0e0 <xTaskPriorityDisinherit+0xf0>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 810b49e:	693b      	ldr	r3, [r7, #16]
 810b4a0:	3304      	adds	r3, #4
 810b4a2:	4618      	mov	r0, r3
 810b4a4:	f7fe fa16 	bl	81098d4 <uxListRemove>
 810b4a8:	4603      	mov	r3, r0
 810b4aa:	2b00      	cmp	r3, #0
 810b4ac:	d115      	bne.n	810b4da <xTaskPriorityDisinherit+0xae>
=======
 810a05e:	693b      	ldr	r3, [r7, #16]
 810a060:	3304      	adds	r3, #4
 810a062:	4618      	mov	r0, r3
 810a064:	f7fe fad0 	bl	8108608 <uxListRemove>
 810a068:	4603      	mov	r3, r0
 810a06a:	2b00      	cmp	r3, #0
 810a06c:	d115      	bne.n	810a09a <xTaskPriorityDisinherit+0xaa>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
<<<<<<< HEAD
 810b4ae:	693b      	ldr	r3, [r7, #16]
 810b4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b4b2:	491f      	ldr	r1, [pc, #124]	; (810b530 <xTaskPriorityDisinherit+0x104>)
 810b4b4:	4613      	mov	r3, r2
 810b4b6:	009b      	lsls	r3, r3, #2
 810b4b8:	4413      	add	r3, r2
 810b4ba:	009b      	lsls	r3, r3, #2
 810b4bc:	440b      	add	r3, r1
 810b4be:	681b      	ldr	r3, [r3, #0]
 810b4c0:	2b00      	cmp	r3, #0
 810b4c2:	d10a      	bne.n	810b4da <xTaskPriorityDisinherit+0xae>
 810b4c4:	693b      	ldr	r3, [r7, #16]
 810b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b4c8:	2201      	movs	r2, #1
 810b4ca:	fa02 f303 	lsl.w	r3, r2, r3
 810b4ce:	43da      	mvns	r2, r3
 810b4d0:	4b18      	ldr	r3, [pc, #96]	; (810b534 <xTaskPriorityDisinherit+0x108>)
 810b4d2:	681b      	ldr	r3, [r3, #0]
 810b4d4:	4013      	ands	r3, r2
 810b4d6:	4a17      	ldr	r2, [pc, #92]	; (810b534 <xTaskPriorityDisinherit+0x108>)
 810b4d8:	6013      	str	r3, [r2, #0]
=======
 810a06e:	693b      	ldr	r3, [r7, #16]
 810a070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a072:	491f      	ldr	r1, [pc, #124]	; (810a0f0 <xTaskPriorityDisinherit+0x100>)
 810a074:	4613      	mov	r3, r2
 810a076:	009b      	lsls	r3, r3, #2
 810a078:	4413      	add	r3, r2
 810a07a:	009b      	lsls	r3, r3, #2
 810a07c:	440b      	add	r3, r1
 810a07e:	681b      	ldr	r3, [r3, #0]
 810a080:	2b00      	cmp	r3, #0
 810a082:	d10a      	bne.n	810a09a <xTaskPriorityDisinherit+0xaa>
 810a084:	693b      	ldr	r3, [r7, #16]
 810a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a088:	2201      	movs	r2, #1
 810a08a:	fa02 f303 	lsl.w	r3, r2, r3
 810a08e:	43da      	mvns	r2, r3
 810a090:	4b18      	ldr	r3, [pc, #96]	; (810a0f4 <xTaskPriorityDisinherit+0x104>)
 810a092:	681b      	ldr	r3, [r3, #0]
 810a094:	4013      	ands	r3, r2
 810a096:	4a17      	ldr	r2, [pc, #92]	; (810a0f4 <xTaskPriorityDisinherit+0x104>)
 810a098:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 810b4da:	693b      	ldr	r3, [r7, #16]
 810b4dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810b4de:	693b      	ldr	r3, [r7, #16]
 810b4e0:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 810a09a:	693b      	ldr	r3, [r7, #16]
 810a09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a09e:	693b      	ldr	r3, [r7, #16]
 810a0a0:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 810b4e2:	693b      	ldr	r3, [r7, #16]
 810b4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b4e6:	f1c3 0207 	rsb	r2, r3, #7
 810b4ea:	693b      	ldr	r3, [r7, #16]
 810b4ec:	619a      	str	r2, [r3, #24]
=======
 810a0a2:	693b      	ldr	r3, [r7, #16]
 810a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0a6:	f1c3 0207 	rsb	r2, r3, #7
 810a0aa:	693b      	ldr	r3, [r7, #16]
 810a0ac:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 810b4ee:	693b      	ldr	r3, [r7, #16]
 810b4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b4f2:	2201      	movs	r2, #1
 810b4f4:	409a      	lsls	r2, r3
 810b4f6:	4b0f      	ldr	r3, [pc, #60]	; (810b534 <xTaskPriorityDisinherit+0x108>)
 810b4f8:	681b      	ldr	r3, [r3, #0]
 810b4fa:	4313      	orrs	r3, r2
 810b4fc:	4a0d      	ldr	r2, [pc, #52]	; (810b534 <xTaskPriorityDisinherit+0x108>)
 810b4fe:	6013      	str	r3, [r2, #0]
 810b500:	693b      	ldr	r3, [r7, #16]
 810b502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b504:	4613      	mov	r3, r2
 810b506:	009b      	lsls	r3, r3, #2
 810b508:	4413      	add	r3, r2
 810b50a:	009b      	lsls	r3, r3, #2
 810b50c:	4a08      	ldr	r2, [pc, #32]	; (810b530 <xTaskPriorityDisinherit+0x104>)
 810b50e:	441a      	add	r2, r3
 810b510:	693b      	ldr	r3, [r7, #16]
 810b512:	3304      	adds	r3, #4
 810b514:	4619      	mov	r1, r3
 810b516:	4610      	mov	r0, r2
 810b518:	f7fe f97f 	bl	810981a <vListInsertEnd>
=======
 810a0ae:	693b      	ldr	r3, [r7, #16]
 810a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0b2:	2201      	movs	r2, #1
 810a0b4:	409a      	lsls	r2, r3
 810a0b6:	4b0f      	ldr	r3, [pc, #60]	; (810a0f4 <xTaskPriorityDisinherit+0x104>)
 810a0b8:	681b      	ldr	r3, [r3, #0]
 810a0ba:	4313      	orrs	r3, r2
 810a0bc:	4a0d      	ldr	r2, [pc, #52]	; (810a0f4 <xTaskPriorityDisinherit+0x104>)
 810a0be:	6013      	str	r3, [r2, #0]
 810a0c0:	693b      	ldr	r3, [r7, #16]
 810a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a0c4:	4613      	mov	r3, r2
 810a0c6:	009b      	lsls	r3, r3, #2
 810a0c8:	4413      	add	r3, r2
 810a0ca:	009b      	lsls	r3, r3, #2
 810a0cc:	4a08      	ldr	r2, [pc, #32]	; (810a0f0 <xTaskPriorityDisinherit+0x100>)
 810a0ce:	441a      	add	r2, r3
 810a0d0:	693b      	ldr	r3, [r7, #16]
 810a0d2:	3304      	adds	r3, #4
 810a0d4:	4619      	mov	r1, r3
 810a0d6:	4610      	mov	r0, r2
 810a0d8:	f7fe fa39 	bl	810854e <vListInsertEnd>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 810b51c:	2301      	movs	r3, #1
 810b51e:	617b      	str	r3, [r7, #20]
=======
 810a0dc:	2301      	movs	r3, #1
 810a0de:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 810b520:	697b      	ldr	r3, [r7, #20]
=======
 810a0e0:	697b      	ldr	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810b522:	4618      	mov	r0, r3
 810b524:	3718      	adds	r7, #24
 810b526:	46bd      	mov	sp, r7
 810b528:	bd80      	pop	{r7, pc}
 810b52a:	bf00      	nop
 810b52c:	100404b4 	.word	0x100404b4
 810b530:	100404b8 	.word	0x100404b8
 810b534:	100405bc 	.word	0x100405bc
=======
 810a0e2:	4618      	mov	r0, r3
 810a0e4:	3718      	adds	r7, #24
 810a0e6:	46bd      	mov	sp, r7
 810a0e8:	bd80      	pop	{r7, pc}
 810a0ea:	bf00      	nop
 810a0ec:	100040a4 	.word	0x100040a4
 810a0f0:	100040a8 	.word	0x100040a8
 810a0f4:	100041ac 	.word	0x100041ac
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b538 <vTaskPriorityDisinheritAfterTimeout>:
=======
0810a0f8 <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< HEAD
 810b538:	b580      	push	{r7, lr}
 810b53a:	b088      	sub	sp, #32
 810b53c:	af00      	add	r7, sp, #0
 810b53e:	6078      	str	r0, [r7, #4]
 810b540:	6039      	str	r1, [r7, #0]
=======
 810a0f8:	b580      	push	{r7, lr}
 810a0fa:	b088      	sub	sp, #32
 810a0fc:	af00      	add	r7, sp, #0
 810a0fe:	6078      	str	r0, [r7, #4]
 810a100:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	TCB_t * const pxTCB = pxMutexHolder;
<<<<<<< HEAD
 810b542:	687b      	ldr	r3, [r7, #4]
 810b544:	61bb      	str	r3, [r7, #24]
=======
 810a102:	687b      	ldr	r3, [r7, #4]
 810a104:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
<<<<<<< HEAD
 810b546:	2301      	movs	r3, #1
 810b548:	617b      	str	r3, [r7, #20]
=======
 810a106:	2301      	movs	r3, #1
 810a108:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if( pxMutexHolder != NULL )
<<<<<<< HEAD
 810b54a:	687b      	ldr	r3, [r7, #4]
 810b54c:	2b00      	cmp	r3, #0
 810b54e:	f000 8083 	beq.w	810b658 <vTaskPriorityDisinheritAfterTimeout+0x120>
=======
 810a10a:	687b      	ldr	r3, [r7, #4]
 810a10c:	2b00      	cmp	r3, #0
 810a10e:	f000 8081 	beq.w	810a214 <vTaskPriorityDisinheritAfterTimeout+0x11c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< HEAD
 810b552:	69bb      	ldr	r3, [r7, #24]
 810b554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b556:	2b00      	cmp	r3, #0
 810b558:	d10a      	bne.n	810b570 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 810b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b55e:	f383 8811 	msr	BASEPRI, r3
 810b562:	f3bf 8f6f 	isb	sy
 810b566:	f3bf 8f4f 	dsb	sy
 810b56a:	60fb      	str	r3, [r7, #12]
}
 810b56c:	bf00      	nop
 810b56e:	e7fe      	b.n	810b56e <vTaskPriorityDisinheritAfterTimeout+0x36>
=======
 810a112:	69bb      	ldr	r3, [r7, #24]
 810a114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a116:	2b00      	cmp	r3, #0
 810a118:	d109      	bne.n	810a12e <vTaskPriorityDisinheritAfterTimeout+0x36>
 810a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a11e:	f383 8811 	msr	BASEPRI, r3
 810a122:	f3bf 8f6f 	isb	sy
 810a126:	f3bf 8f4f 	dsb	sy
 810a12a:	60fb      	str	r3, [r7, #12]
 810a12c:	e7fe      	b.n	810a12c <vTaskPriorityDisinheritAfterTimeout+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< HEAD
 810b570:	69bb      	ldr	r3, [r7, #24]
 810b572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b574:	683a      	ldr	r2, [r7, #0]
 810b576:	429a      	cmp	r2, r3
 810b578:	d902      	bls.n	810b580 <vTaskPriorityDisinheritAfterTimeout+0x48>
=======
 810a12e:	69bb      	ldr	r3, [r7, #24]
 810a130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a132:	683a      	ldr	r2, [r7, #0]
 810a134:	429a      	cmp	r2, r3
 810a136:	d902      	bls.n	810a13e <vTaskPriorityDisinheritAfterTimeout+0x46>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
<<<<<<< HEAD
 810b57a:	683b      	ldr	r3, [r7, #0]
 810b57c:	61fb      	str	r3, [r7, #28]
 810b57e:	e002      	b.n	810b586 <vTaskPriorityDisinheritAfterTimeout+0x4e>
=======
 810a138:	683b      	ldr	r3, [r7, #0]
 810a13a:	61fb      	str	r3, [r7, #28]
 810a13c:	e002      	b.n	810a144 <vTaskPriorityDisinheritAfterTimeout+0x4c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< HEAD
 810b580:	69bb      	ldr	r3, [r7, #24]
 810b582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b584:	61fb      	str	r3, [r7, #28]
=======
 810a13e:	69bb      	ldr	r3, [r7, #24]
 810a140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a142:	61fb      	str	r3, [r7, #28]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< HEAD
 810b586:	69bb      	ldr	r3, [r7, #24]
 810b588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b58a:	69fa      	ldr	r2, [r7, #28]
 810b58c:	429a      	cmp	r2, r3
 810b58e:	d063      	beq.n	810b658 <vTaskPriorityDisinheritAfterTimeout+0x120>
=======
 810a144:	69bb      	ldr	r3, [r7, #24]
 810a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a148:	69fa      	ldr	r2, [r7, #28]
 810a14a:	429a      	cmp	r2, r3
 810a14c:	d062      	beq.n	810a214 <vTaskPriorityDisinheritAfterTimeout+0x11c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< HEAD
 810b590:	69bb      	ldr	r3, [r7, #24]
 810b592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b594:	697a      	ldr	r2, [r7, #20]
 810b596:	429a      	cmp	r2, r3
 810b598:	d15e      	bne.n	810b658 <vTaskPriorityDisinheritAfterTimeout+0x120>
=======
 810a14e:	69bb      	ldr	r3, [r7, #24]
 810a150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a152:	697a      	ldr	r2, [r7, #20]
 810a154:	429a      	cmp	r2, r3
 810a156:	d15d      	bne.n	810a214 <vTaskPriorityDisinheritAfterTimeout+0x11c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< HEAD
 810b59a:	4b31      	ldr	r3, [pc, #196]	; (810b660 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810b59c:	681b      	ldr	r3, [r3, #0]
 810b59e:	69ba      	ldr	r2, [r7, #24]
 810b5a0:	429a      	cmp	r2, r3
 810b5a2:	d10a      	bne.n	810b5ba <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 810b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b5a8:	f383 8811 	msr	BASEPRI, r3
 810b5ac:	f3bf 8f6f 	isb	sy
 810b5b0:	f3bf 8f4f 	dsb	sy
 810b5b4:	60bb      	str	r3, [r7, #8]
}
 810b5b6:	bf00      	nop
 810b5b8:	e7fe      	b.n	810b5b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
=======
 810a158:	4b30      	ldr	r3, [pc, #192]	; (810a21c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 810a15a:	681b      	ldr	r3, [r3, #0]
 810a15c:	69ba      	ldr	r2, [r7, #24]
 810a15e:	429a      	cmp	r2, r3
 810a160:	d109      	bne.n	810a176 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 810a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a166:	f383 8811 	msr	BASEPRI, r3
 810a16a:	f3bf 8f6f 	isb	sy
 810a16e:	f3bf 8f4f 	dsb	sy
 810a172:	60bb      	str	r3, [r7, #8]
 810a174:	e7fe      	b.n	810a174 <vTaskPriorityDisinheritAfterTimeout+0x7c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< HEAD
 810b5ba:	69bb      	ldr	r3, [r7, #24]
 810b5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b5be:	613b      	str	r3, [r7, #16]
=======
 810a176:	69bb      	ldr	r3, [r7, #24]
 810a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a17a:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					pxTCB->uxPriority = uxPriorityToUse;
<<<<<<< HEAD
 810b5c0:	69bb      	ldr	r3, [r7, #24]
 810b5c2:	69fa      	ldr	r2, [r7, #28]
 810b5c4:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 810a17c:	69bb      	ldr	r3, [r7, #24]
 810a17e:	69fa      	ldr	r2, [r7, #28]
 810a180:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 810b5c6:	69bb      	ldr	r3, [r7, #24]
 810b5c8:	699b      	ldr	r3, [r3, #24]
 810b5ca:	2b00      	cmp	r3, #0
 810b5cc:	db04      	blt.n	810b5d8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
=======
 810a182:	69bb      	ldr	r3, [r7, #24]
 810a184:	699b      	ldr	r3, [r3, #24]
 810a186:	2b00      	cmp	r3, #0
 810a188:	db04      	blt.n	810a194 <vTaskPriorityDisinheritAfterTimeout+0x9c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 810b5ce:	69fb      	ldr	r3, [r7, #28]
 810b5d0:	f1c3 0207 	rsb	r2, r3, #7
 810b5d4:	69bb      	ldr	r3, [r7, #24]
 810b5d6:	619a      	str	r2, [r3, #24]
=======
 810a18a:	69fb      	ldr	r3, [r7, #28]
 810a18c:	f1c3 0207 	rsb	r2, r3, #7
 810a190:	69bb      	ldr	r3, [r7, #24]
 810a192:	619a      	str	r2, [r3, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 810b5d8:	69bb      	ldr	r3, [r7, #24]
 810b5da:	6959      	ldr	r1, [r3, #20]
 810b5dc:	693a      	ldr	r2, [r7, #16]
 810b5de:	4613      	mov	r3, r2
 810b5e0:	009b      	lsls	r3, r3, #2
 810b5e2:	4413      	add	r3, r2
 810b5e4:	009b      	lsls	r3, r3, #2
 810b5e6:	4a1f      	ldr	r2, [pc, #124]	; (810b664 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b5e8:	4413      	add	r3, r2
 810b5ea:	4299      	cmp	r1, r3
 810b5ec:	d134      	bne.n	810b658 <vTaskPriorityDisinheritAfterTimeout+0x120>
=======
 810a194:	69bb      	ldr	r3, [r7, #24]
 810a196:	6959      	ldr	r1, [r3, #20]
 810a198:	693a      	ldr	r2, [r7, #16]
 810a19a:	4613      	mov	r3, r2
 810a19c:	009b      	lsls	r3, r3, #2
 810a19e:	4413      	add	r3, r2
 810a1a0:	009b      	lsls	r3, r3, #2
 810a1a2:	4a1f      	ldr	r2, [pc, #124]	; (810a220 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810a1a4:	4413      	add	r3, r2
 810a1a6:	4299      	cmp	r1, r3
 810a1a8:	d134      	bne.n	810a214 <vTaskPriorityDisinheritAfterTimeout+0x11c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 810b5ee:	69bb      	ldr	r3, [r7, #24]
 810b5f0:	3304      	adds	r3, #4
 810b5f2:	4618      	mov	r0, r3
 810b5f4:	f7fe f96e 	bl	81098d4 <uxListRemove>
 810b5f8:	4603      	mov	r3, r0
 810b5fa:	2b00      	cmp	r3, #0
 810b5fc:	d115      	bne.n	810b62a <vTaskPriorityDisinheritAfterTimeout+0xf2>
=======
 810a1aa:	69bb      	ldr	r3, [r7, #24]
 810a1ac:	3304      	adds	r3, #4
 810a1ae:	4618      	mov	r0, r3
 810a1b0:	f7fe fa2a 	bl	8108608 <uxListRemove>
 810a1b4:	4603      	mov	r3, r0
 810a1b6:	2b00      	cmp	r3, #0
 810a1b8:	d115      	bne.n	810a1e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
<<<<<<< HEAD
 810b5fe:	69bb      	ldr	r3, [r7, #24]
 810b600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b602:	4918      	ldr	r1, [pc, #96]	; (810b664 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b604:	4613      	mov	r3, r2
 810b606:	009b      	lsls	r3, r3, #2
 810b608:	4413      	add	r3, r2
 810b60a:	009b      	lsls	r3, r3, #2
 810b60c:	440b      	add	r3, r1
 810b60e:	681b      	ldr	r3, [r3, #0]
 810b610:	2b00      	cmp	r3, #0
 810b612:	d10a      	bne.n	810b62a <vTaskPriorityDisinheritAfterTimeout+0xf2>
 810b614:	69bb      	ldr	r3, [r7, #24]
 810b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b618:	2201      	movs	r2, #1
 810b61a:	fa02 f303 	lsl.w	r3, r2, r3
 810b61e:	43da      	mvns	r2, r3
 810b620:	4b11      	ldr	r3, [pc, #68]	; (810b668 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 810b622:	681b      	ldr	r3, [r3, #0]
 810b624:	4013      	ands	r3, r2
 810b626:	4a10      	ldr	r2, [pc, #64]	; (810b668 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 810b628:	6013      	str	r3, [r2, #0]
=======
 810a1ba:	69bb      	ldr	r3, [r7, #24]
 810a1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a1be:	4918      	ldr	r1, [pc, #96]	; (810a220 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810a1c0:	4613      	mov	r3, r2
 810a1c2:	009b      	lsls	r3, r3, #2
 810a1c4:	4413      	add	r3, r2
 810a1c6:	009b      	lsls	r3, r3, #2
 810a1c8:	440b      	add	r3, r1
 810a1ca:	681b      	ldr	r3, [r3, #0]
 810a1cc:	2b00      	cmp	r3, #0
 810a1ce:	d10a      	bne.n	810a1e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 810a1d0:	69bb      	ldr	r3, [r7, #24]
 810a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a1d4:	2201      	movs	r2, #1
 810a1d6:	fa02 f303 	lsl.w	r3, r2, r3
 810a1da:	43da      	mvns	r2, r3
 810a1dc:	4b11      	ldr	r3, [pc, #68]	; (810a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810a1de:	681b      	ldr	r3, [r3, #0]
 810a1e0:	4013      	ands	r3, r2
 810a1e2:	4a10      	ldr	r2, [pc, #64]	; (810a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810a1e4:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 810b62a:	69bb      	ldr	r3, [r7, #24]
 810b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b62e:	2201      	movs	r2, #1
 810b630:	409a      	lsls	r2, r3
 810b632:	4b0d      	ldr	r3, [pc, #52]	; (810b668 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 810b634:	681b      	ldr	r3, [r3, #0]
 810b636:	4313      	orrs	r3, r2
 810b638:	4a0b      	ldr	r2, [pc, #44]	; (810b668 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 810b63a:	6013      	str	r3, [r2, #0]
 810b63c:	69bb      	ldr	r3, [r7, #24]
 810b63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b640:	4613      	mov	r3, r2
 810b642:	009b      	lsls	r3, r3, #2
 810b644:	4413      	add	r3, r2
 810b646:	009b      	lsls	r3, r3, #2
 810b648:	4a06      	ldr	r2, [pc, #24]	; (810b664 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b64a:	441a      	add	r2, r3
 810b64c:	69bb      	ldr	r3, [r7, #24]
 810b64e:	3304      	adds	r3, #4
 810b650:	4619      	mov	r1, r3
 810b652:	4610      	mov	r0, r2
 810b654:	f7fe f8e1 	bl	810981a <vListInsertEnd>
=======
 810a1e6:	69bb      	ldr	r3, [r7, #24]
 810a1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a1ea:	2201      	movs	r2, #1
 810a1ec:	409a      	lsls	r2, r3
 810a1ee:	4b0d      	ldr	r3, [pc, #52]	; (810a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810a1f0:	681b      	ldr	r3, [r3, #0]
 810a1f2:	4313      	orrs	r3, r2
 810a1f4:	4a0b      	ldr	r2, [pc, #44]	; (810a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810a1f6:	6013      	str	r3, [r2, #0]
 810a1f8:	69bb      	ldr	r3, [r7, #24]
 810a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a1fc:	4613      	mov	r3, r2
 810a1fe:	009b      	lsls	r3, r3, #2
 810a200:	4413      	add	r3, r2
 810a202:	009b      	lsls	r3, r3, #2
 810a204:	4a06      	ldr	r2, [pc, #24]	; (810a220 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810a206:	441a      	add	r2, r3
 810a208:	69bb      	ldr	r3, [r7, #24]
 810a20a:	3304      	adds	r3, #4
 810a20c:	4619      	mov	r1, r3
 810a20e:	4610      	mov	r0, r2
 810a210:	f7fe f99d 	bl	810854e <vListInsertEnd>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 810b658:	bf00      	nop
 810b65a:	3720      	adds	r7, #32
 810b65c:	46bd      	mov	sp, r7
 810b65e:	bd80      	pop	{r7, pc}
 810b660:	100404b4 	.word	0x100404b4
 810b664:	100404b8 	.word	0x100404b8
 810b668:	100405bc 	.word	0x100405bc
=======
 810a214:	bf00      	nop
 810a216:	3720      	adds	r7, #32
 810a218:	46bd      	mov	sp, r7
 810a21a:	bd80      	pop	{r7, pc}
 810a21c:	100040a4 	.word	0x100040a4
 810a220:	100040a8 	.word	0x100040a8
 810a224:	100041ac 	.word	0x100041ac
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b66c <pvTaskIncrementMutexHeldCount>:
=======
0810a228 <pvTaskIncrementMutexHeldCount>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< HEAD
 810b66c:	b480      	push	{r7}
 810b66e:	af00      	add	r7, sp, #0
=======
 810a228:	b480      	push	{r7}
 810a22a:	af00      	add	r7, sp, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
<<<<<<< HEAD
 810b670:	4b07      	ldr	r3, [pc, #28]	; (810b690 <pvTaskIncrementMutexHeldCount+0x24>)
 810b672:	681b      	ldr	r3, [r3, #0]
 810b674:	2b00      	cmp	r3, #0
 810b676:	d004      	beq.n	810b682 <pvTaskIncrementMutexHeldCount+0x16>
=======
 810a22c:	4b07      	ldr	r3, [pc, #28]	; (810a24c <pvTaskIncrementMutexHeldCount+0x24>)
 810a22e:	681b      	ldr	r3, [r3, #0]
 810a230:	2b00      	cmp	r3, #0
 810a232:	d004      	beq.n	810a23e <pvTaskIncrementMutexHeldCount+0x16>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			( pxCurrentTCB->uxMutexesHeld )++;
<<<<<<< HEAD
 810b678:	4b05      	ldr	r3, [pc, #20]	; (810b690 <pvTaskIncrementMutexHeldCount+0x24>)
 810b67a:	681b      	ldr	r3, [r3, #0]
 810b67c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810b67e:	3201      	adds	r2, #1
 810b680:	649a      	str	r2, [r3, #72]	; 0x48
=======
 810a234:	4b05      	ldr	r3, [pc, #20]	; (810a24c <pvTaskIncrementMutexHeldCount+0x24>)
 810a236:	681b      	ldr	r3, [r3, #0]
 810a238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a23a:	3201      	adds	r2, #1
 810a23c:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		return pxCurrentTCB;
<<<<<<< HEAD
 810b682:	4b03      	ldr	r3, [pc, #12]	; (810b690 <pvTaskIncrementMutexHeldCount+0x24>)
 810b684:	681b      	ldr	r3, [r3, #0]
=======
 810a23e:	4b03      	ldr	r3, [pc, #12]	; (810a24c <pvTaskIncrementMutexHeldCount+0x24>)
 810a240:	681b      	ldr	r3, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810b686:	4618      	mov	r0, r3
 810b688:	46bd      	mov	sp, r7
 810b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b68e:	4770      	bx	lr
 810b690:	100404b4 	.word	0x100404b4
=======
 810a242:	4618      	mov	r0, r3
 810a244:	46bd      	mov	sp, r7
 810a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a24a:	4770      	bx	lr
 810a24c:	100040a4 	.word	0x100040a4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b694 <prvAddCurrentTaskToDelayedList>:
=======
0810a250 <prvAddCurrentTaskToDelayedList>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 810b694:	b580      	push	{r7, lr}
 810b696:	b084      	sub	sp, #16
 810b698:	af00      	add	r7, sp, #0
 810b69a:	6078      	str	r0, [r7, #4]
 810b69c:	6039      	str	r1, [r7, #0]
=======
 810a250:	b580      	push	{r7, lr}
 810a252:	b084      	sub	sp, #16
 810a254:	af00      	add	r7, sp, #0
 810a256:	6078      	str	r0, [r7, #4]
 810a258:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
<<<<<<< HEAD
 810b69e:	4b29      	ldr	r3, [pc, #164]	; (810b744 <prvAddCurrentTaskToDelayedList+0xb0>)
 810b6a0:	681b      	ldr	r3, [r3, #0]
 810b6a2:	60fb      	str	r3, [r7, #12]
=======
 810a25a:	4b29      	ldr	r3, [pc, #164]	; (810a300 <prvAddCurrentTaskToDelayedList+0xb0>)
 810a25c:	681b      	ldr	r3, [r3, #0]
 810a25e:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 810b6a4:	4b28      	ldr	r3, [pc, #160]	; (810b748 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b6a6:	681b      	ldr	r3, [r3, #0]
 810b6a8:	3304      	adds	r3, #4
 810b6aa:	4618      	mov	r0, r3
 810b6ac:	f7fe f912 	bl	81098d4 <uxListRemove>
 810b6b0:	4603      	mov	r3, r0
 810b6b2:	2b00      	cmp	r3, #0
 810b6b4:	d10b      	bne.n	810b6ce <prvAddCurrentTaskToDelayedList+0x3a>
=======
 810a260:	4b28      	ldr	r3, [pc, #160]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a262:	681b      	ldr	r3, [r3, #0]
 810a264:	3304      	adds	r3, #4
 810a266:	4618      	mov	r0, r3
 810a268:	f7fe f9ce 	bl	8108608 <uxListRemove>
 810a26c:	4603      	mov	r3, r0
 810a26e:	2b00      	cmp	r3, #0
 810a270:	d10b      	bne.n	810a28a <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
<<<<<<< HEAD
 810b6b6:	4b24      	ldr	r3, [pc, #144]	; (810b748 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b6b8:	681b      	ldr	r3, [r3, #0]
 810b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b6bc:	2201      	movs	r2, #1
 810b6be:	fa02 f303 	lsl.w	r3, r2, r3
 810b6c2:	43da      	mvns	r2, r3
 810b6c4:	4b21      	ldr	r3, [pc, #132]	; (810b74c <prvAddCurrentTaskToDelayedList+0xb8>)
 810b6c6:	681b      	ldr	r3, [r3, #0]
 810b6c8:	4013      	ands	r3, r2
 810b6ca:	4a20      	ldr	r2, [pc, #128]	; (810b74c <prvAddCurrentTaskToDelayedList+0xb8>)
 810b6cc:	6013      	str	r3, [r2, #0]
=======
 810a272:	4b24      	ldr	r3, [pc, #144]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a274:	681b      	ldr	r3, [r3, #0]
 810a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a278:	2201      	movs	r2, #1
 810a27a:	fa02 f303 	lsl.w	r3, r2, r3
 810a27e:	43da      	mvns	r2, r3
 810a280:	4b21      	ldr	r3, [pc, #132]	; (810a308 <prvAddCurrentTaskToDelayedList+0xb8>)
 810a282:	681b      	ldr	r3, [r3, #0]
 810a284:	4013      	ands	r3, r2
 810a286:	4a20      	ldr	r2, [pc, #128]	; (810a308 <prvAddCurrentTaskToDelayedList+0xb8>)
 810a288:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 810b6ce:	687b      	ldr	r3, [r7, #4]
 810b6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810b6d4:	d10a      	bne.n	810b6ec <prvAddCurrentTaskToDelayedList+0x58>
 810b6d6:	683b      	ldr	r3, [r7, #0]
 810b6d8:	2b00      	cmp	r3, #0
 810b6da:	d007      	beq.n	810b6ec <prvAddCurrentTaskToDelayedList+0x58>
=======
 810a28a:	687b      	ldr	r3, [r7, #4]
 810a28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a290:	d10a      	bne.n	810a2a8 <prvAddCurrentTaskToDelayedList+0x58>
 810a292:	683b      	ldr	r3, [r7, #0]
 810a294:	2b00      	cmp	r3, #0
 810a296:	d007      	beq.n	810a2a8 <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 810b6dc:	4b1a      	ldr	r3, [pc, #104]	; (810b748 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b6de:	681b      	ldr	r3, [r3, #0]
 810b6e0:	3304      	adds	r3, #4
 810b6e2:	4619      	mov	r1, r3
 810b6e4:	481a      	ldr	r0, [pc, #104]	; (810b750 <prvAddCurrentTaskToDelayedList+0xbc>)
 810b6e6:	f7fe f898 	bl	810981a <vListInsertEnd>
=======
 810a298:	4b1a      	ldr	r3, [pc, #104]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a29a:	681b      	ldr	r3, [r3, #0]
 810a29c:	3304      	adds	r3, #4
 810a29e:	4619      	mov	r1, r3
 810a2a0:	481a      	ldr	r0, [pc, #104]	; (810a30c <prvAddCurrentTaskToDelayedList+0xbc>)
 810a2a2:	f7fe f954 	bl	810854e <vListInsertEnd>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 810b6ea:	e026      	b.n	810b73a <prvAddCurrentTaskToDelayedList+0xa6>
=======
 810a2a6:	e026      	b.n	810a2f6 <prvAddCurrentTaskToDelayedList+0xa6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			xTimeToWake = xConstTickCount + xTicksToWait;
<<<<<<< HEAD
 810b6ec:	68fa      	ldr	r2, [r7, #12]
 810b6ee:	687b      	ldr	r3, [r7, #4]
 810b6f0:	4413      	add	r3, r2
 810b6f2:	60bb      	str	r3, [r7, #8]
=======
 810a2a8:	68fa      	ldr	r2, [r7, #12]
 810a2aa:	687b      	ldr	r3, [r7, #4]
 810a2ac:	4413      	add	r3, r2
 810a2ae:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
<<<<<<< HEAD
 810b6f4:	4b14      	ldr	r3, [pc, #80]	; (810b748 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b6f6:	681b      	ldr	r3, [r3, #0]
 810b6f8:	68ba      	ldr	r2, [r7, #8]
 810b6fa:	605a      	str	r2, [r3, #4]
=======
 810a2b0:	4b14      	ldr	r3, [pc, #80]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a2b2:	681b      	ldr	r3, [r3, #0]
 810a2b4:	68ba      	ldr	r2, [r7, #8]
 810a2b6:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			if( xTimeToWake < xConstTickCount )
<<<<<<< HEAD
 810b6fc:	68ba      	ldr	r2, [r7, #8]
 810b6fe:	68fb      	ldr	r3, [r7, #12]
 810b700:	429a      	cmp	r2, r3
 810b702:	d209      	bcs.n	810b718 <prvAddCurrentTaskToDelayedList+0x84>
=======
 810a2b8:	68ba      	ldr	r2, [r7, #8]
 810a2ba:	68fb      	ldr	r3, [r7, #12]
 810a2bc:	429a      	cmp	r2, r3
 810a2be:	d209      	bcs.n	810a2d4 <prvAddCurrentTaskToDelayedList+0x84>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 810b704:	4b13      	ldr	r3, [pc, #76]	; (810b754 <prvAddCurrentTaskToDelayedList+0xc0>)
 810b706:	681a      	ldr	r2, [r3, #0]
 810b708:	4b0f      	ldr	r3, [pc, #60]	; (810b748 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b70a:	681b      	ldr	r3, [r3, #0]
 810b70c:	3304      	adds	r3, #4
 810b70e:	4619      	mov	r1, r3
 810b710:	4610      	mov	r0, r2
 810b712:	f7fe f8a6 	bl	8109862 <vListInsert>
=======
 810a2c0:	4b13      	ldr	r3, [pc, #76]	; (810a310 <prvAddCurrentTaskToDelayedList+0xc0>)
 810a2c2:	681a      	ldr	r2, [r3, #0]
 810a2c4:	4b0f      	ldr	r3, [pc, #60]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a2c6:	681b      	ldr	r3, [r3, #0]
 810a2c8:	3304      	adds	r3, #4
 810a2ca:	4619      	mov	r1, r3
 810a2cc:	4610      	mov	r0, r2
 810a2ce:	f7fe f962 	bl	8108596 <vListInsert>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b716:	e010      	b.n	810b73a <prvAddCurrentTaskToDelayedList+0xa6>
=======
 810a2d2:	e010      	b.n	810a2f6 <prvAddCurrentTaskToDelayedList+0xa6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 810b718:	4b0f      	ldr	r3, [pc, #60]	; (810b758 <prvAddCurrentTaskToDelayedList+0xc4>)
 810b71a:	681a      	ldr	r2, [r3, #0]
 810b71c:	4b0a      	ldr	r3, [pc, #40]	; (810b748 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b71e:	681b      	ldr	r3, [r3, #0]
 810b720:	3304      	adds	r3, #4
 810b722:	4619      	mov	r1, r3
 810b724:	4610      	mov	r0, r2
 810b726:	f7fe f89c 	bl	8109862 <vListInsert>
=======
 810a2d4:	4b0f      	ldr	r3, [pc, #60]	; (810a314 <prvAddCurrentTaskToDelayedList+0xc4>)
 810a2d6:	681a      	ldr	r2, [r3, #0]
 810a2d8:	4b0a      	ldr	r3, [pc, #40]	; (810a304 <prvAddCurrentTaskToDelayedList+0xb4>)
 810a2da:	681b      	ldr	r3, [r3, #0]
 810a2dc:	3304      	adds	r3, #4
 810a2de:	4619      	mov	r1, r3
 810a2e0:	4610      	mov	r0, r2
 810a2e2:	f7fe f958 	bl	8108596 <vListInsert>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				if( xTimeToWake < xNextTaskUnblockTime )
<<<<<<< HEAD
 810b72a:	4b0c      	ldr	r3, [pc, #48]	; (810b75c <prvAddCurrentTaskToDelayedList+0xc8>)
 810b72c:	681b      	ldr	r3, [r3, #0]
 810b72e:	68ba      	ldr	r2, [r7, #8]
 810b730:	429a      	cmp	r2, r3
 810b732:	d202      	bcs.n	810b73a <prvAddCurrentTaskToDelayedList+0xa6>
=======
 810a2e6:	4b0c      	ldr	r3, [pc, #48]	; (810a318 <prvAddCurrentTaskToDelayedList+0xc8>)
 810a2e8:	681b      	ldr	r3, [r3, #0]
 810a2ea:	68ba      	ldr	r2, [r7, #8]
 810a2ec:	429a      	cmp	r2, r3
 810a2ee:	d202      	bcs.n	810a2f6 <prvAddCurrentTaskToDelayedList+0xa6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					xNextTaskUnblockTime = xTimeToWake;
<<<<<<< HEAD
 810b734:	4a09      	ldr	r2, [pc, #36]	; (810b75c <prvAddCurrentTaskToDelayedList+0xc8>)
 810b736:	68bb      	ldr	r3, [r7, #8]
 810b738:	6013      	str	r3, [r2, #0]
=======
 810a2f0:	4a09      	ldr	r2, [pc, #36]	; (810a318 <prvAddCurrentTaskToDelayedList+0xc8>)
 810a2f2:	68bb      	ldr	r3, [r7, #8]
 810a2f4:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b73a:	bf00      	nop
 810b73c:	3710      	adds	r7, #16
 810b73e:	46bd      	mov	sp, r7
 810b740:	bd80      	pop	{r7, pc}
 810b742:	bf00      	nop
 810b744:	100405b8 	.word	0x100405b8
 810b748:	100404b4 	.word	0x100404b4
 810b74c:	100405bc 	.word	0x100405bc
 810b750:	100405a0 	.word	0x100405a0
 810b754:	10040570 	.word	0x10040570
 810b758:	1004056c 	.word	0x1004056c
 810b75c:	100405d4 	.word	0x100405d4
=======
 810a2f6:	bf00      	nop
 810a2f8:	3710      	adds	r7, #16
 810a2fa:	46bd      	mov	sp, r7
 810a2fc:	bd80      	pop	{r7, pc}
 810a2fe:	bf00      	nop
 810a300:	100041a8 	.word	0x100041a8
 810a304:	100040a4 	.word	0x100040a4
 810a308:	100041ac 	.word	0x100041ac
 810a30c:	10004190 	.word	0x10004190
 810a310:	10004160 	.word	0x10004160
 810a314:	1000415c 	.word	0x1000415c
 810a318:	100041c4 	.word	0x100041c4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b760 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:
=======
0810a31c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
<<<<<<< HEAD
 810b760:	b580      	push	{r7, lr}
 810b762:	b082      	sub	sp, #8
 810b764:	af00      	add	r7, sp, #0
 810b766:	6078      	str	r0, [r7, #4]
 810b768:	6039      	str	r1, [r7, #0]
 810b76a:	687b      	ldr	r3, [r7, #4]
 810b76c:	683a      	ldr	r2, [r7, #0]
 810b76e:	601a      	str	r2, [r3, #0]
=======
 810a31c:	b580      	push	{r7, lr}
 810a31e:	b082      	sub	sp, #8
 810a320:	af00      	add	r7, sp, #0
 810a322:	6078      	str	r0, [r7, #4]
 810a324:	6039      	str	r1, [r7, #0]
 810a326:	687b      	ldr	r3, [r7, #4]
 810a328:	683a      	ldr	r2, [r7, #0]
 810a32a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	console_uart = uart;
<<<<<<< HEAD
 810b770:	687b      	ldr	r3, [r7, #4]
 810b772:	683a      	ldr	r2, [r7, #0]
 810b774:	601a      	str	r2, [r3, #0]
=======
 810a32c:	687b      	ldr	r3, [r7, #4]
 810a32e:	683a      	ldr	r2, [r7, #0]
 810a330:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
<<<<<<< HEAD
 810b776:	2103      	movs	r1, #3
 810b778:	4805      	ldr	r0, [pc, #20]	; (810b790 <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 810b77a:	f7fd fe15 	bl	81093a8 <osSemaphoreCreate>
 810b77e:	4602      	mov	r2, r0
 810b780:	687b      	ldr	r3, [r7, #4]
 810b782:	605a      	str	r2, [r3, #4]
=======
 810a332:	2103      	movs	r1, #3
 810a334:	4805      	ldr	r0, [pc, #20]	; (810a34c <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 810a336:	f7fd fed3 	bl	81080e0 <osSemaphoreCreate>
 810a33a:	4602      	mov	r2, r0
 810a33c:	687b      	ldr	r3, [r7, #4]
 810a33e:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b784:	687b      	ldr	r3, [r7, #4]
 810b786:	4618      	mov	r0, r3
 810b788:	3708      	adds	r7, #8
 810b78a:	46bd      	mov	sp, r7
 810b78c:	bd80      	pop	{r7, pc}
 810b78e:	bf00      	nop
 810b790:	081149ac 	.word	0x081149ac
=======
 810a340:	687b      	ldr	r3, [r7, #4]
 810a342:	4618      	mov	r0, r3
 810a344:	3708      	adds	r7, #8
 810a346:	46bd      	mov	sp, r7
 810a348:	bd80      	pop	{r7, pc}
 810a34a:	bf00      	nop
 810a34c:	081109c8 	.word	0x081109c8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b794 <_ZN7Console8transmitEPhm>:
=======
0810a350 <_ZN7Console8transmitEPhm>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
<<<<<<< HEAD
 810b794:	b580      	push	{r7, lr}
 810b796:	b084      	sub	sp, #16
 810b798:	af00      	add	r7, sp, #0
 810b79a:	60f8      	str	r0, [r7, #12]
 810b79c:	60b9      	str	r1, [r7, #8]
 810b79e:	607a      	str	r2, [r7, #4]
=======
 810a350:	b580      	push	{r7, lr}
 810a352:	b084      	sub	sp, #16
 810a354:	af00      	add	r7, sp, #0
 810a356:	60f8      	str	r0, [r7, #12]
 810a358:	60b9      	str	r1, [r7, #8]
 810a35a:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
<<<<<<< HEAD
 810b7a0:	2002      	movs	r0, #2
 810b7a2:	f7f9 fce7 	bl	8105174 <HAL_HSEM_IsSemTaken>
 810b7a6:	4603      	mov	r3, r0
 810b7a8:	2b00      	cmp	r3, #0
 810b7aa:	bf14      	ite	ne
 810b7ac:	2301      	movne	r3, #1
 810b7ae:	2300      	moveq	r3, #0
 810b7b0:	b2db      	uxtb	r3, r3
 810b7b2:	2b00      	cmp	r3, #0
 810b7b4:	d000      	beq.n	810b7b8 <_ZN7Console8transmitEPhm+0x24>
 810b7b6:	e7f3      	b.n	810b7a0 <_ZN7Console8transmitEPhm+0xc>
=======
 810a35c:	2002      	movs	r0, #2
 810a35e:	f7fa fd67 	bl	8104e30 <HAL_HSEM_IsSemTaken>
 810a362:	4603      	mov	r3, r0
 810a364:	2b00      	cmp	r3, #0
 810a366:	bf14      	ite	ne
 810a368:	2301      	movne	r3, #1
 810a36a:	2300      	moveq	r3, #0
 810a36c:	b2db      	uxtb	r3, r3
 810a36e:	2b00      	cmp	r3, #0
 810a370:	d000      	beq.n	810a374 <_ZN7Console8transmitEPhm+0x24>
 810a372:	e7f3      	b.n	810a35c <_ZN7Console8transmitEPhm+0xc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
<<<<<<< HEAD
 810b7b8:	2102      	movs	r1, #2
 810b7ba:	2002      	movs	r0, #2
 810b7bc:	f7f9 fcb6 	bl	810512c <HAL_HSEM_Take>
=======
 810a374:	2102      	movs	r1, #2
 810a376:	2002      	movs	r0, #2
 810a378:	f7fa fd36 	bl	8104de8 <HAL_HSEM_Take>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
<<<<<<< HEAD
 810b7c0:	68fb      	ldr	r3, [r7, #12]
 810b7c2:	6818      	ldr	r0, [r3, #0]
 810b7c4:	687b      	ldr	r3, [r7, #4]
 810b7c6:	b29a      	uxth	r2, r3
 810b7c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 810b7cc:	68b9      	ldr	r1, [r7, #8]
 810b7ce:	f7fc fabb 	bl	8107d48 <HAL_UART_Transmit>
=======
 810a37c:	68fb      	ldr	r3, [r7, #12]
 810a37e:	6818      	ldr	r0, [r3, #0]
 810a380:	687b      	ldr	r3, [r7, #4]
 810a382:	b29a      	uxth	r2, r3
 810a384:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 810a388:	68b9      	ldr	r1, [r7, #8]
 810a38a:	f7fc fb2f 	bl	81069ec <HAL_UART_Transmit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
<<<<<<< HEAD
 810b7d2:	2102      	movs	r1, #2
 810b7d4:	2002      	movs	r0, #2
 810b7d6:	f7f9 fce3 	bl	81051a0 <HAL_HSEM_Release>
=======
 810a38e:	2102      	movs	r1, #2
 810a390:	2002      	movs	r0, #2
 810a392:	f7fa fd63 	bl	8104e5c <HAL_HSEM_Release>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b7da:	bf00      	nop
 810b7dc:	3710      	adds	r7, #16
 810b7de:	46bd      	mov	sp, r7
 810b7e0:	bd80      	pop	{r7, pc}
=======
 810a396:	bf00      	nop
 810a398:	3710      	adds	r7, #16
 810a39a:	46bd      	mov	sp, r7
 810a39c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b7e2 <_ZN7Console5printEPKc>:
=======
0810a39e <_ZN7Console5printEPKc>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void Console::print(const char* buffer) {
<<<<<<< HEAD
 810b7e2:	b580      	push	{r7, lr}
 810b7e4:	b082      	sub	sp, #8
 810b7e6:	af00      	add	r7, sp, #0
 810b7e8:	6078      	str	r0, [r7, #4]
 810b7ea:	6039      	str	r1, [r7, #0]
=======
 810a39e:	b580      	push	{r7, lr}
 810a3a0:	b082      	sub	sp, #8
 810a3a2:	af00      	add	r7, sp, #0
 810a3a4:	6078      	str	r0, [r7, #4]
 810a3a6:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	transmit((uint8_t*) buffer, strlen(buffer));
<<<<<<< HEAD
 810b7ec:	6838      	ldr	r0, [r7, #0]
 810b7ee:	f7f4 fd81 	bl	81002f4 <strlen>
 810b7f2:	4603      	mov	r3, r0
 810b7f4:	461a      	mov	r2, r3
 810b7f6:	6839      	ldr	r1, [r7, #0]
 810b7f8:	6878      	ldr	r0, [r7, #4]
 810b7fa:	f7ff ffcb 	bl	810b794 <_ZN7Console8transmitEPhm>
=======
 810a3a8:	6838      	ldr	r0, [r7, #0]
 810a3aa:	f7f5 ffa3 	bl	81002f4 <strlen>
 810a3ae:	4603      	mov	r3, r0
 810a3b0:	461a      	mov	r2, r3
 810a3b2:	6839      	ldr	r1, [r7, #0]
 810a3b4:	6878      	ldr	r0, [r7, #4]
 810a3b6:	f7ff ffcb 	bl	810a350 <_ZN7Console8transmitEPhm>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b7fe:	bf00      	nop
 810b800:	3708      	adds	r7, #8
 810b802:	46bd      	mov	sp, r7
 810b804:	bd80      	pop	{r7, pc}
=======
 810a3ba:	bf00      	nop
 810a3bc:	3708      	adds	r7, #8
 810a3be:	46bd      	mov	sp, r7
 810a3c0:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b806 <_ZN7Console6printfEPKcz>:
=======
0810a3c2 <_ZN7Console6printfEPKcz>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void Console::printf(const char *format, ...) {
<<<<<<< HEAD
 810b806:	b40e      	push	{r1, r2, r3}
 810b808:	b580      	push	{r7, lr}
 810b80a:	b085      	sub	sp, #20
 810b80c:	af00      	add	r7, sp, #0
 810b80e:	6078      	str	r0, [r7, #4]
=======
 810a3c2:	b40e      	push	{r1, r2, r3}
 810a3c4:	b580      	push	{r7, lr}
 810a3c6:	b085      	sub	sp, #20
 810a3c8:	af00      	add	r7, sp, #0
 810a3ca:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	va_list args;
	va_start(args, format);
<<<<<<< HEAD
 810b810:	f107 0320 	add.w	r3, r7, #32
 810b814:	60fb      	str	r3, [r7, #12]
=======
 810a3cc:	f107 0320 	add.w	r3, r7, #32
 810a3d0:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	if(vsprintf(buffer, format, args) > 0) {
<<<<<<< HEAD
 810b816:	687b      	ldr	r3, [r7, #4]
 810b818:	3308      	adds	r3, #8
 810b81a:	68fa      	ldr	r2, [r7, #12]
 810b81c:	69f9      	ldr	r1, [r7, #28]
 810b81e:	4618      	mov	r0, r3
 810b820:	f006 fab8 	bl	8111d94 <vsiprintf>
 810b824:	4603      	mov	r3, r0
 810b826:	2b00      	cmp	r3, #0
 810b828:	bfcc      	ite	gt
 810b82a:	2301      	movgt	r3, #1
 810b82c:	2300      	movle	r3, #0
 810b82e:	b2db      	uxtb	r3, r3
 810b830:	2b00      	cmp	r3, #0
 810b832:	d005      	beq.n	810b840 <_ZN7Console6printfEPKcz+0x3a>
=======
 810a3d2:	687b      	ldr	r3, [r7, #4]
 810a3d4:	3308      	adds	r3, #8
 810a3d6:	68fa      	ldr	r2, [r7, #12]
 810a3d8:	69f9      	ldr	r1, [r7, #28]
 810a3da:	4618      	mov	r0, r3
 810a3dc:	f004 fc48 	bl	810ec70 <vsiprintf>
 810a3e0:	4603      	mov	r3, r0
 810a3e2:	2b00      	cmp	r3, #0
 810a3e4:	bfcc      	ite	gt
 810a3e6:	2301      	movgt	r3, #1
 810a3e8:	2300      	movle	r3, #0
 810a3ea:	b2db      	uxtb	r3, r3
 810a3ec:	2b00      	cmp	r3, #0
 810a3ee:	d005      	beq.n	810a3fc <_ZN7Console6printfEPKcz+0x3a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		print(buffer);
<<<<<<< HEAD
 810b834:	687b      	ldr	r3, [r7, #4]
 810b836:	3308      	adds	r3, #8
 810b838:	4619      	mov	r1, r3
 810b83a:	6878      	ldr	r0, [r7, #4]
 810b83c:	f7ff ffd1 	bl	810b7e2 <_ZN7Console5printEPKc>
=======
 810a3f0:	687b      	ldr	r3, [r7, #4]
 810a3f2:	3308      	adds	r3, #8
 810a3f4:	4619      	mov	r1, r3
 810a3f6:	6878      	ldr	r0, [r7, #4]
 810a3f8:	f7ff ffd1 	bl	810a39e <_ZN7Console5printEPKc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	va_end(args);
}
<<<<<<< HEAD
 810b840:	bf00      	nop
 810b842:	3714      	adds	r7, #20
 810b844:	46bd      	mov	sp, r7
 810b846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810b84a:	b003      	add	sp, #12
 810b84c:	4770      	bx	lr
=======
 810a3fc:	bf00      	nop
 810a3fe:	3714      	adds	r7, #20
 810a400:	46bd      	mov	sp, r7
 810a402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810a406:	b003      	add	sp, #12
 810a408:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810b850 <_Z41__static_initialization_and_destruction_0ii>:
=======
0810a40c <_Z41__static_initialization_and_destruction_0ii>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
<<<<<<< HEAD
 810b850:	b580      	push	{r7, lr}
 810b852:	b082      	sub	sp, #8
 810b854:	af00      	add	r7, sp, #0
 810b856:	6078      	str	r0, [r7, #4]
 810b858:	6039      	str	r1, [r7, #0]
 810b85a:	687b      	ldr	r3, [r7, #4]
 810b85c:	2b01      	cmp	r3, #1
 810b85e:	d108      	bne.n	810b872 <_Z41__static_initialization_and_destruction_0ii+0x22>
 810b860:	683b      	ldr	r3, [r7, #0]
 810b862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810b866:	4293      	cmp	r3, r2
 810b868:	d103      	bne.n	810b872 <_Z41__static_initialization_and_destruction_0ii+0x22>
=======
 810a40c:	b580      	push	{r7, lr}
 810a40e:	b082      	sub	sp, #8
 810a410:	af00      	add	r7, sp, #0
 810a412:	6078      	str	r0, [r7, #4]
 810a414:	6039      	str	r1, [r7, #0]
 810a416:	687b      	ldr	r3, [r7, #4]
 810a418:	2b01      	cmp	r3, #1
 810a41a:	d108      	bne.n	810a42e <_Z41__static_initialization_and_destruction_0ii+0x22>
 810a41c:	683b      	ldr	r3, [r7, #0]
 810a41e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810a422:	4293      	cmp	r3, r2
 810a424:	d103      	bne.n	810a42e <_Z41__static_initialization_and_destruction_0ii+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
Console console(&huart3);
<<<<<<< HEAD
 810b86a:	4904      	ldr	r1, [pc, #16]	; (810b87c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 810b86c:	4804      	ldr	r0, [pc, #16]	; (810b880 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 810b86e:	f7ff ff77 	bl	810b760 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
=======
 810a426:	4904      	ldr	r1, [pc, #16]	; (810a438 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 810a428:	4804      	ldr	r0, [pc, #16]	; (810a43c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 810a42a:	f7ff ff77 	bl	810a31c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
Terminal terminal;
<<<<<<< HEAD
 810b872:	bf00      	nop
 810b874:	3708      	adds	r7, #8
 810b876:	46bd      	mov	sp, r7
 810b878:	bd80      	pop	{r7, pc}
 810b87a:	bf00      	nop
 810b87c:	100460f0 	.word	0x100460f0
 810b880:	100405e0 	.word	0x100405e0
=======
 810a42e:	bf00      	nop
 810a430:	3708      	adds	r7, #8
 810a432:	46bd      	mov	sp, r7
 810a434:	bd80      	pop	{r7, pc}
 810a436:	bf00      	nop
 810a438:	10009a50 	.word	0x10009a50
 810a43c:	100041d0 	.word	0x100041d0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b884 <_GLOBAL__sub_I_console>:
 810b884:	b580      	push	{r7, lr}
 810b886:	af00      	add	r7, sp, #0
 810b888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810b88c:	2001      	movs	r0, #1
 810b88e:	f7ff ffdf 	bl	810b850 <_Z41__static_initialization_and_destruction_0ii>
 810b892:	bd80      	pop	{r7, pc}
=======
0810a440 <_GLOBAL__sub_I_console>:
 810a440:	b580      	push	{r7, lr}
 810a442:	af00      	add	r7, sp, #0
 810a444:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810a448:	2001      	movs	r0, #1
 810a44a:	f7ff ffdf 	bl	810a40c <_Z41__static_initialization_and_destruction_0ii>
 810a44e:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b894 <_ZN8Profiler6enableEv>:
=======
0810a450 <_ZN8Profiler6enableEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			profiler->depth_to_display--;
		}
	}
}

void Profiler::enable() {
<<<<<<< HEAD
 810b894:	b480      	push	{r7}
 810b896:	b085      	sub	sp, #20
 810b898:	af00      	add	r7, sp, #0
 810b89a:	6078      	str	r0, [r7, #4]
=======
 810a450:	b480      	push	{r7}
 810a452:	b085      	sub	sp, #20
 810a454:	af00      	add	r7, sp, #0
 810a456:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	profiling_requested = true;
<<<<<<< HEAD
 810b89c:	687b      	ldr	r3, [r7, #4]
 810b89e:	2201      	movs	r2, #1
 810b8a0:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
=======
 810a458:	687b      	ldr	r3, [r7, #4]
 810a45a:	2201      	movs	r2, #1
 810a45c:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
<<<<<<< HEAD
 810b8a4:	2300      	movs	r3, #0
 810b8a6:	73fb      	strb	r3, [r7, #15]
 810b8a8:	7bfb      	ldrb	r3, [r7, #15]
 810b8aa:	2b0f      	cmp	r3, #15
 810b8ac:	d80c      	bhi.n	810b8c8 <_ZN8Profiler6enableEv+0x34>
=======
 810a460:	2300      	movs	r3, #0
 810a462:	73fb      	strb	r3, [r7, #15]
 810a464:	7bfb      	ldrb	r3, [r7, #15]
 810a466:	2b0f      	cmp	r3, #15
 810a468:	d80c      	bhi.n	810a484 <_ZN8Profiler6enableEv+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		profilers[i].depth_to_display = -1;
<<<<<<< HEAD
 810b8ae:	7bfb      	ldrb	r3, [r7, #15]
 810b8b0:	687a      	ldr	r2, [r7, #4]
 810b8b2:	2134      	movs	r1, #52	; 0x34
 810b8b4:	fb01 f303 	mul.w	r3, r1, r3
 810b8b8:	4413      	add	r3, r2
 810b8ba:	3308      	adds	r3, #8
 810b8bc:	22ff      	movs	r2, #255	; 0xff
 810b8be:	701a      	strb	r2, [r3, #0]
=======
 810a46a:	7bfb      	ldrb	r3, [r7, #15]
 810a46c:	687a      	ldr	r2, [r7, #4]
 810a46e:	2134      	movs	r1, #52	; 0x34
 810a470:	fb01 f303 	mul.w	r3, r1, r3
 810a474:	4413      	add	r3, r2
 810a476:	3308      	adds	r3, #8
 810a478:	22ff      	movs	r2, #255	; 0xff
 810a47a:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
<<<<<<< HEAD
 810b8c0:	7bfb      	ldrb	r3, [r7, #15]
 810b8c2:	3301      	adds	r3, #1
 810b8c4:	73fb      	strb	r3, [r7, #15]
 810b8c6:	e7ef      	b.n	810b8a8 <_ZN8Profiler6enableEv+0x14>
=======
 810a47c:	7bfb      	ldrb	r3, [r7, #15]
 810a47e:	3301      	adds	r3, #1
 810a480:	73fb      	strb	r3, [r7, #15]
 810a482:	e7ef      	b.n	810a464 <_ZN8Profiler6enableEv+0x14>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
}
<<<<<<< HEAD
 810b8c8:	bf00      	nop
 810b8ca:	3714      	adds	r7, #20
 810b8cc:	46bd      	mov	sp, r7
 810b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8d2:	4770      	bx	lr
=======
 810a484:	bf00      	nop
 810a486:	3714      	adds	r7, #20
 810a488:	46bd      	mov	sp, r7
 810a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a48e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b8d4 <_ZN8Profiler7disableEv>:
=======
0810a490 <_ZN8Profiler7disableEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void Profiler::disable() {
<<<<<<< HEAD
 810b8d4:	b480      	push	{r7}
 810b8d6:	b083      	sub	sp, #12
 810b8d8:	af00      	add	r7, sp, #0
 810b8da:	6078      	str	r0, [r7, #4]
=======
 810a490:	b480      	push	{r7}
 810a492:	b083      	sub	sp, #12
 810a494:	af00      	add	r7, sp, #0
 810a496:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	profiling = false;
<<<<<<< HEAD
 810b8dc:	687b      	ldr	r3, [r7, #4]
 810b8de:	2200      	movs	r2, #0
 810b8e0:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
=======
 810a498:	687b      	ldr	r3, [r7, #4]
 810a49a:	2200      	movs	r2, #0
 810a49c:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b8e4:	bf00      	nop
 810b8e6:	370c      	adds	r7, #12
 810b8e8:	46bd      	mov	sp, r7
 810b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8ee:	4770      	bx	lr
=======
 810a4a0:	bf00      	nop
 810a4a2:	370c      	adds	r7, #12
 810a4a4:	46bd      	mov	sp, r7
 810a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4aa:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b8f0 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
 810b8f0:	b480      	push	{r7}
 810b8f2:	b083      	sub	sp, #12
 810b8f4:	af00      	add	r7, sp, #0
 810b8f6:	6078      	str	r0, [r7, #4]
 810b8f8:	4a04      	ldr	r2, [pc, #16]	; (810b90c <_ZN6ThreadD1Ev+0x1c>)
 810b8fa:	687b      	ldr	r3, [r7, #4]
 810b8fc:	601a      	str	r2, [r3, #0]
 810b8fe:	687b      	ldr	r3, [r7, #4]
 810b900:	4618      	mov	r0, r3
 810b902:	370c      	adds	r7, #12
 810b904:	46bd      	mov	sp, r7
 810b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b90a:	4770      	bx	lr
 810b90c:	081149d4 	.word	0x081149d4

0810b910 <_ZN6ThreadD0Ev>:
 810b910:	b580      	push	{r7, lr}
 810b912:	b082      	sub	sp, #8
 810b914:	af00      	add	r7, sp, #0
 810b916:	6078      	str	r0, [r7, #4]
 810b918:	6878      	ldr	r0, [r7, #4]
 810b91a:	f7ff ffe9 	bl	810b8f0 <_ZN6ThreadD1Ev>
 810b91e:	2110      	movs	r1, #16
 810b920:	6878      	ldr	r0, [r7, #4]
 810b922:	f005 f8bd 	bl	8110aa0 <_ZdlPvj>
 810b926:	687b      	ldr	r3, [r7, #4]
 810b928:	4618      	mov	r0, r3
 810b92a:	3708      	adds	r7, #8
 810b92c:	46bd      	mov	sp, r7
 810b92e:	bd80      	pop	{r7, pc}

0810b930 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:
=======
0810a4ac <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics


#include "Debug.h"


Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
<<<<<<< HEAD
 810b930:	b580      	push	{r7, lr}
 810b932:	b084      	sub	sp, #16
 810b934:	af00      	add	r7, sp, #0
 810b936:	60f8      	str	r0, [r7, #12]
 810b938:	60b9      	str	r1, [r7, #8]
 810b93a:	607a      	str	r2, [r7, #4]
 810b93c:	68fb      	ldr	r3, [r7, #12]
 810b93e:	4910      	ldr	r1, [pc, #64]	; (810b980 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x50>)
 810b940:	4618      	mov	r0, r3
 810b942:	f004 ff87 	bl	8110854 <_ZN6ThreadC1EPKc>
 810b946:	4a0f      	ldr	r2, [pc, #60]	; (810b984 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x54>)
 810b948:	68fb      	ldr	r3, [r7, #12]
 810b94a:	601a      	str	r2, [r3, #0]
 810b94c:	68fb      	ldr	r3, [r7, #12]
 810b94e:	68ba      	ldr	r2, [r7, #8]
 810b950:	611a      	str	r2, [r3, #16]
 810b952:	68fb      	ldr	r3, [r7, #12]
 810b954:	687a      	ldr	r2, [r7, #4]
 810b956:	615a      	str	r2, [r3, #20]
 810b958:	68fb      	ldr	r3, [r7, #12]
 810b95a:	2200      	movs	r2, #0
 810b95c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 810b960:	68fb      	ldr	r3, [r7, #12]
 810b962:	2200      	movs	r2, #0
 810b964:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
=======
 810a4ac:	b580      	push	{r7, lr}
 810a4ae:	b084      	sub	sp, #16
 810a4b0:	af00      	add	r7, sp, #0
 810a4b2:	60f8      	str	r0, [r7, #12]
 810a4b4:	60b9      	str	r1, [r7, #8]
 810a4b6:	607a      	str	r2, [r7, #4]
 810a4b8:	68fb      	ldr	r3, [r7, #12]
 810a4ba:	4910      	ldr	r1, [pc, #64]	; (810a4fc <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x50>)
 810a4bc:	4618      	mov	r0, r3
 810a4be:	f003 f9fe 	bl	810d8be <_ZN6ThreadC1EPKc>
 810a4c2:	4a0f      	ldr	r2, [pc, #60]	; (810a500 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x54>)
 810a4c4:	68fb      	ldr	r3, [r7, #12]
 810a4c6:	601a      	str	r2, [r3, #0]
 810a4c8:	68fb      	ldr	r3, [r7, #12]
 810a4ca:	68ba      	ldr	r2, [r7, #8]
 810a4cc:	60da      	str	r2, [r3, #12]
 810a4ce:	68fb      	ldr	r3, [r7, #12]
 810a4d0:	687a      	ldr	r2, [r7, #4]
 810a4d2:	611a      	str	r2, [r3, #16]
 810a4d4:	68fb      	ldr	r3, [r7, #12]
 810a4d6:	2200      	movs	r2, #0
 810a4d8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 810a4dc:	68fb      	ldr	r3, [r7, #12]
 810a4de:	2200      	movs	r2, #0
 810a4e0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
<<<<<<< HEAD
 810b968:	68fb      	ldr	r3, [r7, #12]
 810b96a:	f503 7206 	add.w	r2, r3, #536	; 0x218
 810b96e:	68fb      	ldr	r3, [r7, #12]
 810b970:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
=======
 810a4e4:	68fb      	ldr	r3, [r7, #12]
 810a4e6:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810a4ea:	68fb      	ldr	r3, [r7, #12]
 810a4ec:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b974:	68fb      	ldr	r3, [r7, #12]
 810b976:	4618      	mov	r0, r3
 810b978:	3710      	adds	r7, #16
 810b97a:	46bd      	mov	sp, r7
 810b97c:	bd80      	pop	{r7, pc}
 810b97e:	bf00      	nop
 810b980:	08114230 	.word	0x08114230
 810b984:	081149bc 	.word	0x081149bc
=======
 810a4f0:	68fb      	ldr	r3, [r7, #12]
 810a4f2:	4618      	mov	r0, r3
 810a4f4:	3710      	adds	r7, #16
 810a4f6:	46bd      	mov	sp, r7
 810a4f8:	bd80      	pop	{r7, pc}
 810a4fa:	bf00      	nop
 810a4fc:	08110520 	.word	0x08110520
 810a500:	081109d8 	.word	0x081109d8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b988 <_ZN5Shell4initEv>:
=======
0810a504 <_ZN5Shell4initEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void Shell::init() {
<<<<<<< HEAD
 810b988:	b580      	push	{r7, lr}
 810b98a:	b082      	sub	sp, #8
 810b98c:	af00      	add	r7, sp, #0
 810b98e:	6078      	str	r0, [r7, #4]
=======
 810a504:	b580      	push	{r7, lr}
 810a506:	b082      	sub	sp, #8
 810a508:	af00      	add	r7, sp, #0
 810a50a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	console.printf("\x1b[2J\x1b[H");
<<<<<<< HEAD
 810b990:	490a      	ldr	r1, [pc, #40]	; (810b9bc <_ZN5Shell4initEv+0x34>)
 810b992:	480b      	ldr	r0, [pc, #44]	; (810b9c0 <_ZN5Shell4initEv+0x38>)
 810b994:	f7ff ff37 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a50c:	490a      	ldr	r1, [pc, #40]	; (810a538 <_ZN5Shell4initEv+0x34>)
 810a50e:	480b      	ldr	r0, [pc, #44]	; (810a53c <_ZN5Shell4initEv+0x38>)
 810a510:	f7ff ff57 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	console.printf("----- EPFL Xplore Avionics Shell -----\r\n");
<<<<<<< HEAD
 810b998:	490a      	ldr	r1, [pc, #40]	; (810b9c4 <_ZN5Shell4initEv+0x3c>)
 810b99a:	4809      	ldr	r0, [pc, #36]	; (810b9c0 <_ZN5Shell4initEv+0x38>)
 810b99c:	f7ff ff33 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a514:	490a      	ldr	r1, [pc, #40]	; (810a540 <_ZN5Shell4initEv+0x3c>)
 810a516:	4809      	ldr	r0, [pc, #36]	; (810a53c <_ZN5Shell4initEv+0x38>)
 810a518:	f7ff ff53 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	HAL_UART_Receive_DMA(uart, dma_buffer, CMD_BUFFER_SIZE);
<<<<<<< HEAD
 810b9a0:	687b      	ldr	r3, [r7, #4]
 810b9a2:	6918      	ldr	r0, [r3, #16]
 810b9a4:	687b      	ldr	r3, [r7, #4]
 810b9a6:	3318      	adds	r3, #24
 810b9a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 810b9ac:	4619      	mov	r1, r3
 810b9ae:	f7fc fa61 	bl	8107e74 <HAL_UART_Receive_DMA>
=======
 810a51c:	687b      	ldr	r3, [r7, #4]
 810a51e:	68d8      	ldr	r0, [r3, #12]
 810a520:	687b      	ldr	r3, [r7, #4]
 810a522:	3314      	adds	r3, #20
 810a524:	f44f 7200 	mov.w	r2, #512	; 0x200
 810a528:	4619      	mov	r1, r3
 810a52a:	f7fc faf5 	bl	8106b18 <HAL_UART_Receive_DMA>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810b9b2:	bf00      	nop
 810b9b4:	3708      	adds	r7, #8
 810b9b6:	46bd      	mov	sp, r7
 810b9b8:	bd80      	pop	{r7, pc}
 810b9ba:	bf00      	nop
 810b9bc:	08114238 	.word	0x08114238
 810b9c0:	100405e0 	.word	0x100405e0
 810b9c4:	08114240 	.word	0x08114240
=======
 810a52e:	bf00      	nop
 810a530:	3708      	adds	r7, #8
 810a532:	46bd      	mov	sp, r7
 810a534:	bd80      	pop	{r7, pc}
 810a536:	bf00      	nop
 810a538:	08110528 	.word	0x08110528
 810a53c:	100041d0 	.word	0x100041d0
 810a540:	08110530 	.word	0x08110530
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810b9c8 <_ZN5Shell4loopEv>:
=======
0810a544 <_ZN5Shell4loopEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void Shell::loop() {
<<<<<<< HEAD
 810b9c8:	b580      	push	{r7, lr}
 810b9ca:	b082      	sub	sp, #8
 810b9cc:	af00      	add	r7, sp, #0
 810b9ce:	6078      	str	r0, [r7, #4]
=======
 810a544:	b580      	push	{r7, lr}
 810a546:	b082      	sub	sp, #8
 810a548:	af00      	add	r7, sp, #0
 810a54a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	endDmaStreamIndex = CMD_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
<<<<<<< HEAD
 810b9d0:	687b      	ldr	r3, [r7, #4]
 810b9d2:	691b      	ldr	r3, [r3, #16]
 810b9d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b9d6:	681b      	ldr	r3, [r3, #0]
 810b9d8:	4a50      	ldr	r2, [pc, #320]	; (810bb1c <_ZN5Shell4loopEv+0x154>)
 810b9da:	4293      	cmp	r3, r2
 810b9dc:	d068      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810b9de:	687b      	ldr	r3, [r7, #4]
 810b9e0:	691b      	ldr	r3, [r3, #16]
 810b9e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b9e4:	681b      	ldr	r3, [r3, #0]
 810b9e6:	4a4e      	ldr	r2, [pc, #312]	; (810bb20 <_ZN5Shell4loopEv+0x158>)
 810b9e8:	4293      	cmp	r3, r2
 810b9ea:	d061      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810b9ec:	687b      	ldr	r3, [r7, #4]
 810b9ee:	691b      	ldr	r3, [r3, #16]
 810b9f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b9f2:	681b      	ldr	r3, [r3, #0]
 810b9f4:	4a4b      	ldr	r2, [pc, #300]	; (810bb24 <_ZN5Shell4loopEv+0x15c>)
 810b9f6:	4293      	cmp	r3, r2
 810b9f8:	d05a      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810b9fa:	687b      	ldr	r3, [r7, #4]
 810b9fc:	691b      	ldr	r3, [r3, #16]
 810b9fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba00:	681b      	ldr	r3, [r3, #0]
 810ba02:	4a49      	ldr	r2, [pc, #292]	; (810bb28 <_ZN5Shell4loopEv+0x160>)
 810ba04:	4293      	cmp	r3, r2
 810ba06:	d053      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba08:	687b      	ldr	r3, [r7, #4]
 810ba0a:	691b      	ldr	r3, [r3, #16]
 810ba0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba0e:	681b      	ldr	r3, [r3, #0]
 810ba10:	4a46      	ldr	r2, [pc, #280]	; (810bb2c <_ZN5Shell4loopEv+0x164>)
 810ba12:	4293      	cmp	r3, r2
 810ba14:	d04c      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba16:	687b      	ldr	r3, [r7, #4]
 810ba18:	691b      	ldr	r3, [r3, #16]
 810ba1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba1c:	681b      	ldr	r3, [r3, #0]
 810ba1e:	4a44      	ldr	r2, [pc, #272]	; (810bb30 <_ZN5Shell4loopEv+0x168>)
 810ba20:	4293      	cmp	r3, r2
 810ba22:	d045      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba24:	687b      	ldr	r3, [r7, #4]
 810ba26:	691b      	ldr	r3, [r3, #16]
 810ba28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba2a:	681b      	ldr	r3, [r3, #0]
 810ba2c:	4a41      	ldr	r2, [pc, #260]	; (810bb34 <_ZN5Shell4loopEv+0x16c>)
 810ba2e:	4293      	cmp	r3, r2
 810ba30:	d03e      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba32:	687b      	ldr	r3, [r7, #4]
 810ba34:	691b      	ldr	r3, [r3, #16]
 810ba36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba38:	681b      	ldr	r3, [r3, #0]
 810ba3a:	4a3f      	ldr	r2, [pc, #252]	; (810bb38 <_ZN5Shell4loopEv+0x170>)
 810ba3c:	4293      	cmp	r3, r2
 810ba3e:	d037      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba40:	687b      	ldr	r3, [r7, #4]
 810ba42:	691b      	ldr	r3, [r3, #16]
 810ba44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba46:	681b      	ldr	r3, [r3, #0]
 810ba48:	4a3c      	ldr	r2, [pc, #240]	; (810bb3c <_ZN5Shell4loopEv+0x174>)
 810ba4a:	4293      	cmp	r3, r2
 810ba4c:	d030      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba4e:	687b      	ldr	r3, [r7, #4]
 810ba50:	691b      	ldr	r3, [r3, #16]
 810ba52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba54:	681b      	ldr	r3, [r3, #0]
 810ba56:	4a3a      	ldr	r2, [pc, #232]	; (810bb40 <_ZN5Shell4loopEv+0x178>)
 810ba58:	4293      	cmp	r3, r2
 810ba5a:	d029      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba5c:	687b      	ldr	r3, [r7, #4]
 810ba5e:	691b      	ldr	r3, [r3, #16]
 810ba60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba62:	681b      	ldr	r3, [r3, #0]
 810ba64:	4a37      	ldr	r2, [pc, #220]	; (810bb44 <_ZN5Shell4loopEv+0x17c>)
 810ba66:	4293      	cmp	r3, r2
 810ba68:	d022      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba6a:	687b      	ldr	r3, [r7, #4]
 810ba6c:	691b      	ldr	r3, [r3, #16]
 810ba6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba70:	681b      	ldr	r3, [r3, #0]
 810ba72:	4a35      	ldr	r2, [pc, #212]	; (810bb48 <_ZN5Shell4loopEv+0x180>)
 810ba74:	4293      	cmp	r3, r2
 810ba76:	d01b      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba78:	687b      	ldr	r3, [r7, #4]
 810ba7a:	691b      	ldr	r3, [r3, #16]
 810ba7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba7e:	681b      	ldr	r3, [r3, #0]
 810ba80:	4a32      	ldr	r2, [pc, #200]	; (810bb4c <_ZN5Shell4loopEv+0x184>)
 810ba82:	4293      	cmp	r3, r2
 810ba84:	d014      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba86:	687b      	ldr	r3, [r7, #4]
 810ba88:	691b      	ldr	r3, [r3, #16]
 810ba8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba8c:	681b      	ldr	r3, [r3, #0]
 810ba8e:	4a30      	ldr	r2, [pc, #192]	; (810bb50 <_ZN5Shell4loopEv+0x188>)
 810ba90:	4293      	cmp	r3, r2
 810ba92:	d00d      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810ba94:	687b      	ldr	r3, [r7, #4]
 810ba96:	691b      	ldr	r3, [r3, #16]
 810ba98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba9a:	681b      	ldr	r3, [r3, #0]
 810ba9c:	4a2d      	ldr	r2, [pc, #180]	; (810bb54 <_ZN5Shell4loopEv+0x18c>)
 810ba9e:	4293      	cmp	r3, r2
 810baa0:	d006      	beq.n	810bab0 <_ZN5Shell4loopEv+0xe8>
 810baa2:	687b      	ldr	r3, [r7, #4]
 810baa4:	691b      	ldr	r3, [r3, #16]
 810baa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810baa8:	681b      	ldr	r3, [r3, #0]
 810baaa:	4a2b      	ldr	r2, [pc, #172]	; (810bb58 <_ZN5Shell4loopEv+0x190>)
 810baac:	4293      	cmp	r3, r2
 810baae:	d107      	bne.n	810bac0 <_ZN5Shell4loopEv+0xf8>
 810bab0:	687b      	ldr	r3, [r7, #4]
 810bab2:	691b      	ldr	r3, [r3, #16]
 810bab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bab6:	681b      	ldr	r3, [r3, #0]
 810bab8:	685b      	ldr	r3, [r3, #4]
 810baba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810babe:	e006      	b.n	810bace <_ZN5Shell4loopEv+0x106>
 810bac0:	687b      	ldr	r3, [r7, #4]
 810bac2:	691b      	ldr	r3, [r3, #16]
 810bac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bac6:	681b      	ldr	r3, [r3, #0]
 810bac8:	685b      	ldr	r3, [r3, #4]
 810baca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810bace:	687a      	ldr	r2, [r7, #4]
 810bad0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
=======
 810a54c:	687b      	ldr	r3, [r7, #4]
 810a54e:	68db      	ldr	r3, [r3, #12]
 810a550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a552:	681b      	ldr	r3, [r3, #0]
 810a554:	4a4e      	ldr	r2, [pc, #312]	; (810a690 <_ZN5Shell4loopEv+0x14c>)
 810a556:	4293      	cmp	r3, r2
 810a558:	d068      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a55a:	687b      	ldr	r3, [r7, #4]
 810a55c:	68db      	ldr	r3, [r3, #12]
 810a55e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a560:	681b      	ldr	r3, [r3, #0]
 810a562:	4a4c      	ldr	r2, [pc, #304]	; (810a694 <_ZN5Shell4loopEv+0x150>)
 810a564:	4293      	cmp	r3, r2
 810a566:	d061      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a568:	687b      	ldr	r3, [r7, #4]
 810a56a:	68db      	ldr	r3, [r3, #12]
 810a56c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a56e:	681b      	ldr	r3, [r3, #0]
 810a570:	4a49      	ldr	r2, [pc, #292]	; (810a698 <_ZN5Shell4loopEv+0x154>)
 810a572:	4293      	cmp	r3, r2
 810a574:	d05a      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a576:	687b      	ldr	r3, [r7, #4]
 810a578:	68db      	ldr	r3, [r3, #12]
 810a57a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a57c:	681b      	ldr	r3, [r3, #0]
 810a57e:	4a47      	ldr	r2, [pc, #284]	; (810a69c <_ZN5Shell4loopEv+0x158>)
 810a580:	4293      	cmp	r3, r2
 810a582:	d053      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	68db      	ldr	r3, [r3, #12]
 810a588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a58a:	681b      	ldr	r3, [r3, #0]
 810a58c:	4a44      	ldr	r2, [pc, #272]	; (810a6a0 <_ZN5Shell4loopEv+0x15c>)
 810a58e:	4293      	cmp	r3, r2
 810a590:	d04c      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a592:	687b      	ldr	r3, [r7, #4]
 810a594:	68db      	ldr	r3, [r3, #12]
 810a596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a598:	681b      	ldr	r3, [r3, #0]
 810a59a:	4a42      	ldr	r2, [pc, #264]	; (810a6a4 <_ZN5Shell4loopEv+0x160>)
 810a59c:	4293      	cmp	r3, r2
 810a59e:	d045      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5a0:	687b      	ldr	r3, [r7, #4]
 810a5a2:	68db      	ldr	r3, [r3, #12]
 810a5a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5a6:	681b      	ldr	r3, [r3, #0]
 810a5a8:	4a3f      	ldr	r2, [pc, #252]	; (810a6a8 <_ZN5Shell4loopEv+0x164>)
 810a5aa:	4293      	cmp	r3, r2
 810a5ac:	d03e      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5ae:	687b      	ldr	r3, [r7, #4]
 810a5b0:	68db      	ldr	r3, [r3, #12]
 810a5b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5b4:	681b      	ldr	r3, [r3, #0]
 810a5b6:	4a3d      	ldr	r2, [pc, #244]	; (810a6ac <_ZN5Shell4loopEv+0x168>)
 810a5b8:	4293      	cmp	r3, r2
 810a5ba:	d037      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5bc:	687b      	ldr	r3, [r7, #4]
 810a5be:	68db      	ldr	r3, [r3, #12]
 810a5c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5c2:	681b      	ldr	r3, [r3, #0]
 810a5c4:	4a3a      	ldr	r2, [pc, #232]	; (810a6b0 <_ZN5Shell4loopEv+0x16c>)
 810a5c6:	4293      	cmp	r3, r2
 810a5c8:	d030      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5ca:	687b      	ldr	r3, [r7, #4]
 810a5cc:	68db      	ldr	r3, [r3, #12]
 810a5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5d0:	681b      	ldr	r3, [r3, #0]
 810a5d2:	4a38      	ldr	r2, [pc, #224]	; (810a6b4 <_ZN5Shell4loopEv+0x170>)
 810a5d4:	4293      	cmp	r3, r2
 810a5d6:	d029      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5d8:	687b      	ldr	r3, [r7, #4]
 810a5da:	68db      	ldr	r3, [r3, #12]
 810a5dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5de:	681b      	ldr	r3, [r3, #0]
 810a5e0:	4a35      	ldr	r2, [pc, #212]	; (810a6b8 <_ZN5Shell4loopEv+0x174>)
 810a5e2:	4293      	cmp	r3, r2
 810a5e4:	d022      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5e6:	687b      	ldr	r3, [r7, #4]
 810a5e8:	68db      	ldr	r3, [r3, #12]
 810a5ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	4a33      	ldr	r2, [pc, #204]	; (810a6bc <_ZN5Shell4loopEv+0x178>)
 810a5f0:	4293      	cmp	r3, r2
 810a5f2:	d01b      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	68db      	ldr	r3, [r3, #12]
 810a5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a5fa:	681b      	ldr	r3, [r3, #0]
 810a5fc:	4a30      	ldr	r2, [pc, #192]	; (810a6c0 <_ZN5Shell4loopEv+0x17c>)
 810a5fe:	4293      	cmp	r3, r2
 810a600:	d014      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a602:	687b      	ldr	r3, [r7, #4]
 810a604:	68db      	ldr	r3, [r3, #12]
 810a606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a608:	681b      	ldr	r3, [r3, #0]
 810a60a:	4a2e      	ldr	r2, [pc, #184]	; (810a6c4 <_ZN5Shell4loopEv+0x180>)
 810a60c:	4293      	cmp	r3, r2
 810a60e:	d00d      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a610:	687b      	ldr	r3, [r7, #4]
 810a612:	68db      	ldr	r3, [r3, #12]
 810a614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a616:	681b      	ldr	r3, [r3, #0]
 810a618:	4a2b      	ldr	r2, [pc, #172]	; (810a6c8 <_ZN5Shell4loopEv+0x184>)
 810a61a:	4293      	cmp	r3, r2
 810a61c:	d006      	beq.n	810a62c <_ZN5Shell4loopEv+0xe8>
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	68db      	ldr	r3, [r3, #12]
 810a622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a624:	681b      	ldr	r3, [r3, #0]
 810a626:	4a29      	ldr	r2, [pc, #164]	; (810a6cc <_ZN5Shell4loopEv+0x188>)
 810a628:	4293      	cmp	r3, r2
 810a62a:	d107      	bne.n	810a63c <_ZN5Shell4loopEv+0xf8>
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	68db      	ldr	r3, [r3, #12]
 810a630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a632:	681b      	ldr	r3, [r3, #0]
 810a634:	685b      	ldr	r3, [r3, #4]
 810a636:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810a63a:	e006      	b.n	810a64a <_ZN5Shell4loopEv+0x106>
 810a63c:	687b      	ldr	r3, [r7, #4]
 810a63e:	68db      	ldr	r3, [r3, #12]
 810a640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a642:	681b      	ldr	r3, [r3, #0]
 810a644:	685b      	ldr	r3, [r3, #4]
 810a646:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810a64a:	687a      	ldr	r2, [r7, #4]
 810a64c:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	while(lastDmaStreamIndex != endDmaStreamIndex) {
<<<<<<< HEAD
 810bad4:	687b      	ldr	r3, [r7, #4]
 810bad6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 810bada:	687b      	ldr	r3, [r7, #4]
 810badc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 810bae0:	429a      	cmp	r2, r3
 810bae2:	d013      	beq.n	810bb0c <_ZN5Shell4loopEv+0x144>
=======
 810a650:	687b      	ldr	r3, [r7, #4]
 810a652:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810a65c:	429a      	cmp	r2, r3
 810a65e:	d013      	beq.n	810a688 <_ZN5Shell4loopEv+0x144>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		receiveByte(dma_buffer[lastDmaStreamIndex]);
<<<<<<< HEAD
 810bae4:	687b      	ldr	r3, [r7, #4]
 810bae6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810baea:	687a      	ldr	r2, [r7, #4]
 810baec:	4413      	add	r3, r2
 810baee:	7e1b      	ldrb	r3, [r3, #24]
 810baf0:	4619      	mov	r1, r3
 810baf2:	6878      	ldr	r0, [r7, #4]
 810baf4:	f000 f832 	bl	810bb5c <_ZN5Shell11receiveByteEc>
=======
 810a660:	687b      	ldr	r3, [r7, #4]
 810a662:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810a666:	687a      	ldr	r2, [r7, #4]
 810a668:	4413      	add	r3, r2
 810a66a:	7d1b      	ldrb	r3, [r3, #20]
 810a66c:	4619      	mov	r1, r3
 810a66e:	6878      	ldr	r0, [r7, #4]
 810a670:	f000 f82e 	bl	810a6d0 <_ZN5Shell11receiveByteEc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		lastDmaStreamIndex = (lastDmaStreamIndex + 1) % CMD_BUFFER_SIZE;
<<<<<<< HEAD
 810baf8:	687b      	ldr	r3, [r7, #4]
 810bafa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810bafe:	3301      	adds	r3, #1
 810bb00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810bb04:	687b      	ldr	r3, [r7, #4]
 810bb06:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
=======
 810a674:	687b      	ldr	r3, [r7, #4]
 810a676:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810a67a:	3301      	adds	r3, #1
 810a67c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a680:	687b      	ldr	r3, [r7, #4]
 810a682:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(lastDmaStreamIndex != endDmaStreamIndex) {
<<<<<<< HEAD
 810bb0a:	e7e3      	b.n	810bad4 <_ZN5Shell4loopEv+0x10c>
=======
 810a686:	e7e3      	b.n	810a650 <_ZN5Shell4loopEv+0x10c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
=======
}
 810a688:	bf00      	nop
 810a68a:	3708      	adds	r7, #8
 810a68c:	46bd      	mov	sp, r7
 810a68e:	bd80      	pop	{r7, pc}
 810a690:	40020010 	.word	0x40020010
 810a694:	40020028 	.word	0x40020028
 810a698:	40020040 	.word	0x40020040
 810a69c:	40020058 	.word	0x40020058
 810a6a0:	40020070 	.word	0x40020070
 810a6a4:	40020088 	.word	0x40020088
 810a6a8:	400200a0 	.word	0x400200a0
 810a6ac:	400200b8 	.word	0x400200b8
 810a6b0:	40020410 	.word	0x40020410
 810a6b4:	40020428 	.word	0x40020428
 810a6b8:	40020440 	.word	0x40020440
 810a6bc:	40020458 	.word	0x40020458
 810a6c0:	40020470 	.word	0x40020470
 810a6c4:	40020488 	.word	0x40020488
 810a6c8:	400204a0 	.word	0x400204a0
 810a6cc:	400204b8 	.word	0x400204b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
	osDelay(10 / portTICK_PERIOD_MS);
 810bb0c:	200a      	movs	r0, #10
 810bb0e:	f7fd fc37 	bl	8109380 <osDelay>
}
 810bb12:	bf00      	nop
 810bb14:	3708      	adds	r7, #8
 810bb16:	46bd      	mov	sp, r7
 810bb18:	bd80      	pop	{r7, pc}
 810bb1a:	bf00      	nop
 810bb1c:	40020010 	.word	0x40020010
 810bb20:	40020028 	.word	0x40020028
 810bb24:	40020040 	.word	0x40020040
 810bb28:	40020058 	.word	0x40020058
 810bb2c:	40020070 	.word	0x40020070
 810bb30:	40020088 	.word	0x40020088
 810bb34:	400200a0 	.word	0x400200a0
 810bb38:	400200b8 	.word	0x400200b8
 810bb3c:	40020410 	.word	0x40020410
 810bb40:	40020428 	.word	0x40020428
 810bb44:	40020440 	.word	0x40020440
 810bb48:	40020458 	.word	0x40020458
 810bb4c:	40020470 	.word	0x40020470
 810bb50:	40020488 	.word	0x40020488
 810bb54:	400204a0 	.word	0x400204a0
 810bb58:	400204b8 	.word	0x400204b8

0810bb5c <_ZN5Shell11receiveByteEc>:
=======
0810a6d0 <_ZN5Shell11receiveByteEc>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics


void Shell::receiveByte(char cbuf) {
<<<<<<< HEAD
 810bb5c:	b580      	push	{r7, lr}
 810bb5e:	b084      	sub	sp, #16
 810bb60:	af00      	add	r7, sp, #0
 810bb62:	6078      	str	r0, [r7, #4]
 810bb64:	460b      	mov	r3, r1
 810bb66:	70fb      	strb	r3, [r7, #3]
=======
 810a6d0:	b580      	push	{r7, lr}
 810a6d2:	b084      	sub	sp, #16
 810a6d4:	af00      	add	r7, sp, #0
 810a6d6:	6078      	str	r0, [r7, #4]
 810a6d8:	460b      	mov	r3, r1
 810a6da:	70fb      	strb	r3, [r7, #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(cbuf == '\0') {
<<<<<<< HEAD
 810bb68:	78fb      	ldrb	r3, [r7, #3]
 810bb6a:	2b00      	cmp	r3, #0
 810bb6c:	f000 809d 	beq.w	810bcaa <_ZN5Shell11receiveByteEc+0x14e>
=======
 810a6dc:	78fb      	ldrb	r3, [r7, #3]
 810a6de:	2b00      	cmp	r3, #0
 810a6e0:	f000 809f 	beq.w	810a822 <_ZN5Shell11receiveByteEc+0x152>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return;
	}

	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
<<<<<<< HEAD
 810bb70:	78fb      	ldrb	r3, [r7, #3]
 810bb72:	2b0a      	cmp	r3, #10
 810bb74:	d04f      	beq.n	810bc16 <_ZN5Shell11receiveByteEc+0xba>
 810bb76:	78fb      	ldrb	r3, [r7, #3]
 810bb78:	2b0d      	cmp	r3, #13
 810bb7a:	d04c      	beq.n	810bc16 <_ZN5Shell11receiveByteEc+0xba>
=======
 810a6e4:	78fb      	ldrb	r3, [r7, #3]
 810a6e6:	2b0a      	cmp	r3, #10
 810a6e8:	d050      	beq.n	810a78c <_ZN5Shell11receiveByteEc+0xbc>
 810a6ea:	78fb      	ldrb	r3, [r7, #3]
 810a6ec:	2b0d      	cmp	r3, #13
 810a6ee:	d04d      	beq.n	810a78c <_ZN5Shell11receiveByteEc+0xbc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		command_buffer[command_index++] = cbuf;
<<<<<<< HEAD
 810bb7c:	687b      	ldr	r3, [r7, #4]
 810bb7e:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 810bb82:	1c5a      	adds	r2, r3, #1
 810bb84:	b2d1      	uxtb	r1, r2
 810bb86:	687a      	ldr	r2, [r7, #4]
 810bb88:	f882 1420 	strb.w	r1, [r2, #1056]	; 0x420
 810bb8c:	461a      	mov	r2, r3
 810bb8e:	687b      	ldr	r3, [r7, #4]
 810bb90:	4413      	add	r3, r2
 810bb92:	78fa      	ldrb	r2, [r7, #3]
 810bb94:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
=======
 810a6f0:	687b      	ldr	r3, [r7, #4]
 810a6f2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810a6f6:	1c5a      	adds	r2, r3, #1
 810a6f8:	b2d1      	uxtb	r1, r2
 810a6fa:	687a      	ldr	r2, [r7, #4]
 810a6fc:	f882 141c 	strb.w	r1, [r2, #1052]	; 0x41c
 810a700:	461a      	mov	r2, r3
 810a702:	687b      	ldr	r3, [r7, #4]
 810a704:	4413      	add	r3, r2
 810a706:	78fa      	ldrb	r2, [r7, #3]
 810a708:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if(cbuf == ' ') {
<<<<<<< HEAD
 810bb98:	78fb      	ldrb	r3, [r7, #3]
 810bb9a:	2b20      	cmp	r3, #32
 810bb9c:	f040 8087 	bne.w	810bcae <_ZN5Shell11receiveByteEc+0x152>
=======
 810a70c:	78fb      	ldrb	r3, [r7, #3]
 810a70e:	2b20      	cmp	r3, #32
 810a710:	f040 8089 	bne.w	810a826 <_ZN5Shell11receiveByteEc+0x156>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
<<<<<<< HEAD
 810bba0:	687b      	ldr	r3, [r7, #4]
 810bba2:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bba6:	687a      	ldr	r2, [r7, #4]
 810bba8:	3384      	adds	r3, #132	; 0x84
 810bbaa:	00db      	lsls	r3, r3, #3
 810bbac:	4413      	add	r3, r2
 810bbae:	685a      	ldr	r2, [r3, #4]
 810bbb0:	687b      	ldr	r3, [r7, #4]
 810bbb2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 810bbb6:	1ad3      	subs	r3, r2, r3
 810bbb8:	73fb      	strb	r3, [r7, #15]
=======
 810a714:	687b      	ldr	r3, [r7, #4]
 810a716:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a71a:	461a      	mov	r2, r3
 810a71c:	687b      	ldr	r3, [r7, #4]
 810a71e:	3284      	adds	r2, #132	; 0x84
 810a720:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810a724:	461a      	mov	r2, r3
 810a726:	687b      	ldr	r3, [r7, #4]
 810a728:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810a72c:	1ad3      	subs	r3, r2, r3
 810a72e:	73fb      	strb	r3, [r7, #15]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			cmd.components[cmd.num_components].length = command_index - start_index - 1;
<<<<<<< HEAD
 810bbba:	687b      	ldr	r3, [r7, #4]
 810bbbc:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 810bbc0:	7bfb      	ldrb	r3, [r7, #15]
 810bbc2:	1ad3      	subs	r3, r2, r3
 810bbc4:	b2db      	uxtb	r3, r3
 810bbc6:	687a      	ldr	r2, [r7, #4]
 810bbc8:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
 810bbcc:	4610      	mov	r0, r2
 810bbce:	3b01      	subs	r3, #1
 810bbd0:	b2d9      	uxtb	r1, r3
 810bbd2:	687a      	ldr	r2, [r7, #4]
 810bbd4:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810bbd8:	00db      	lsls	r3, r3, #3
 810bbda:	4413      	add	r3, r2
 810bbdc:	460a      	mov	r2, r1
 810bbde:	721a      	strb	r2, [r3, #8]
=======
 810a730:	687b      	ldr	r3, [r7, #4]
 810a732:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810a736:	7bfb      	ldrb	r3, [r7, #15]
 810a738:	1ad3      	subs	r3, r2, r3
 810a73a:	b2db      	uxtb	r3, r3
 810a73c:	687a      	ldr	r2, [r7, #4]
 810a73e:	f892 2460 	ldrb.w	r2, [r2, #1120]	; 0x460
 810a742:	4610      	mov	r0, r2
 810a744:	3b01      	subs	r3, #1
 810a746:	b2d9      	uxtb	r1, r3
 810a748:	687a      	ldr	r2, [r7, #4]
 810a74a:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810a74e:	00db      	lsls	r3, r3, #3
 810a750:	4413      	add	r3, r2
 810a752:	460a      	mov	r2, r1
 810a754:	711a      	strb	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			cmd.num_components++;
<<<<<<< HEAD
 810bbe0:	687b      	ldr	r3, [r7, #4]
 810bbe2:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bbe6:	3301      	adds	r3, #1
 810bbe8:	b2da      	uxtb	r2, r3
 810bbea:	687b      	ldr	r3, [r7, #4]
 810bbec:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
=======
 810a756:	687b      	ldr	r3, [r7, #4]
 810a758:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a75c:	3301      	adds	r3, #1
 810a75e:	b2da      	uxtb	r2, r3
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
<<<<<<< HEAD
 810bbf0:	687b      	ldr	r3, [r7, #4]
 810bbf2:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 810bbf6:	461a      	mov	r2, r3
 810bbf8:	687b      	ldr	r3, [r7, #4]
 810bbfa:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bbfe:	4618      	mov	r0, r3
 810bc00:	f502 7306 	add.w	r3, r2, #536	; 0x218
 810bc04:	687a      	ldr	r2, [r7, #4]
 810bc06:	441a      	add	r2, r3
 810bc08:	6879      	ldr	r1, [r7, #4]
 810bc0a:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810bc0e:	00db      	lsls	r3, r3, #3
 810bc10:	440b      	add	r3, r1
 810bc12:	605a      	str	r2, [r3, #4]
=======
 810a766:	687b      	ldr	r3, [r7, #4]
 810a768:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810a76c:	461a      	mov	r2, r3
 810a76e:	687b      	ldr	r3, [r7, #4]
 810a770:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a774:	4618      	mov	r0, r3
 810a776:	f502 7304 	add.w	r3, r2, #528	; 0x210
 810a77a:	687a      	ldr	r2, [r7, #4]
 810a77c:	4413      	add	r3, r2
 810a77e:	1d19      	adds	r1, r3, #4
 810a780:	687b      	ldr	r3, [r7, #4]
 810a782:	f100 0284 	add.w	r2, r0, #132	; 0x84
 810a786:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
<<<<<<< HEAD
 810bc14:	e04b      	b.n	810bcae <_ZN5Shell11receiveByteEc+0x152>
=======
 810a78a:	e04c      	b.n	810a826 <_ZN5Shell11receiveByteEc+0x156>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	} else {
		uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
<<<<<<< HEAD
 810bc16:	687b      	ldr	r3, [r7, #4]
 810bc18:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bc1c:	687a      	ldr	r2, [r7, #4]
 810bc1e:	3384      	adds	r3, #132	; 0x84
 810bc20:	00db      	lsls	r3, r3, #3
 810bc22:	4413      	add	r3, r2
 810bc24:	685a      	ldr	r2, [r3, #4]
 810bc26:	687b      	ldr	r3, [r7, #4]
 810bc28:	f503 7306 	add.w	r3, r3, #536	; 0x218
 810bc2c:	1ad3      	subs	r3, r2, r3
 810bc2e:	73bb      	strb	r3, [r7, #14]
=======
 810a78c:	687b      	ldr	r3, [r7, #4]
 810a78e:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a792:	461a      	mov	r2, r3
 810a794:	687b      	ldr	r3, [r7, #4]
 810a796:	3284      	adds	r2, #132	; 0x84
 810a798:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810a79c:	461a      	mov	r2, r3
 810a79e:	687b      	ldr	r3, [r7, #4]
 810a7a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810a7a4:	1ad3      	subs	r3, r2, r3
 810a7a6:	73bb      	strb	r3, [r7, #14]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		cmd.components[cmd.num_components].length = command_index - start_index;
<<<<<<< HEAD
 810bc30:	687b      	ldr	r3, [r7, #4]
 810bc32:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 810bc36:	687b      	ldr	r3, [r7, #4]
 810bc38:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bc3c:	4618      	mov	r0, r3
 810bc3e:	7bbb      	ldrb	r3, [r7, #14]
 810bc40:	1ad3      	subs	r3, r2, r3
 810bc42:	b2d9      	uxtb	r1, r3
 810bc44:	687a      	ldr	r2, [r7, #4]
 810bc46:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810bc4a:	00db      	lsls	r3, r3, #3
 810bc4c:	4413      	add	r3, r2
 810bc4e:	460a      	mov	r2, r1
 810bc50:	721a      	strb	r2, [r3, #8]
=======
 810a7a8:	687b      	ldr	r3, [r7, #4]
 810a7aa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810a7ae:	687b      	ldr	r3, [r7, #4]
 810a7b0:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a7b4:	4618      	mov	r0, r3
 810a7b6:	7bbb      	ldrb	r3, [r7, #14]
 810a7b8:	1ad3      	subs	r3, r2, r3
 810a7ba:	b2d9      	uxtb	r1, r3
 810a7bc:	687a      	ldr	r2, [r7, #4]
 810a7be:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810a7c2:	00db      	lsls	r3, r3, #3
 810a7c4:	4413      	add	r3, r2
 810a7c6:	460a      	mov	r2, r1
 810a7c8:	711a      	strb	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if(command_index - start_index > 0) {
<<<<<<< HEAD
 810bc52:	687b      	ldr	r3, [r7, #4]
 810bc54:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 810bc58:	461a      	mov	r2, r3
 810bc5a:	7bbb      	ldrb	r3, [r7, #14]
 810bc5c:	1ad3      	subs	r3, r2, r3
 810bc5e:	2b00      	cmp	r3, #0
 810bc60:	dd07      	ble.n	810bc72 <_ZN5Shell11receiveByteEc+0x116>
=======
 810a7ca:	687b      	ldr	r3, [r7, #4]
 810a7cc:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810a7d0:	461a      	mov	r2, r3
 810a7d2:	7bbb      	ldrb	r3, [r7, #14]
 810a7d4:	1ad3      	subs	r3, r2, r3
 810a7d6:	2b00      	cmp	r3, #0
 810a7d8:	dd07      	ble.n	810a7ea <_ZN5Shell11receiveByteEc+0x11a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			cmd.num_components++;
<<<<<<< HEAD
 810bc62:	687b      	ldr	r3, [r7, #4]
 810bc64:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bc68:	3301      	adds	r3, #1
 810bc6a:	b2da      	uxtb	r2, r3
 810bc6c:	687b      	ldr	r3, [r7, #4]
 810bc6e:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
=======
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810a7e0:	3301      	adds	r3, #1
 810a7e2:	b2da      	uxtb	r2, r3
 810a7e4:	687b      	ldr	r3, [r7, #4]
 810a7e6:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		terminal->execute(&cmd, &console);
<<<<<<< HEAD
 810bc72:	687b      	ldr	r3, [r7, #4]
 810bc74:	6958      	ldr	r0, [r3, #20]
 810bc76:	687b      	ldr	r3, [r7, #4]
 810bc78:	f203 4324 	addw	r3, r3, #1060	; 0x424
 810bc7c:	4a0e      	ldr	r2, [pc, #56]	; (810bcb8 <_ZN5Shell11receiveByteEc+0x15c>)
 810bc7e:	4619      	mov	r1, r3
 810bc80:	f000 f872 	bl	810bd68 <_ZN8Terminal7executeEP12ShellCommandP7Console>
=======
 810a7ea:	687b      	ldr	r3, [r7, #4]
 810a7ec:	6918      	ldr	r0, [r3, #16]
 810a7ee:	687b      	ldr	r3, [r7, #4]
 810a7f0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 810a7f4:	4a0e      	ldr	r2, [pc, #56]	; (810a830 <_ZN5Shell11receiveByteEc+0x160>)
 810a7f6:	4619      	mov	r1, r3
 810a7f8:	f000 f84e 	bl	810a898 <_ZN8Terminal7executeEP12ShellCommandP7Console>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		command_index = 0;
<<<<<<< HEAD
 810bc84:	687b      	ldr	r3, [r7, #4]
 810bc86:	2200      	movs	r2, #0
 810bc88:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
=======
 810a7fc:	687b      	ldr	r3, [r7, #4]
 810a7fe:	2200      	movs	r2, #0
 810a800:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		cmd.num_components = 0;
<<<<<<< HEAD
 810bc8c:	687b      	ldr	r3, [r7, #4]
 810bc8e:	2200      	movs	r2, #0
 810bc90:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
=======
 810a804:	687b      	ldr	r3, [r7, #4]
 810a806:	2200      	movs	r2, #0
 810a808:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		cmd.components[0].length = 0;
<<<<<<< HEAD
 810bc94:	687b      	ldr	r3, [r7, #4]
 810bc96:	2200      	movs	r2, #0
 810bc98:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
=======
 810a80c:	687b      	ldr	r3, [r7, #4]
 810a80e:	2200      	movs	r2, #0
 810a810:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		cmd.components[0].component = command_buffer;
<<<<<<< HEAD
 810bc9c:	687b      	ldr	r3, [r7, #4]
 810bc9e:	f503 7206 	add.w	r2, r3, #536	; 0x218
 810bca2:	687b      	ldr	r3, [r7, #4]
 810bca4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 810bca8:	e002      	b.n	810bcb0 <_ZN5Shell11receiveByteEc+0x154>
=======
 810a814:	687b      	ldr	r3, [r7, #4]
 810a816:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810a81a:	687b      	ldr	r3, [r7, #4]
 810a81c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 810a820:	e002      	b.n	810a828 <_ZN5Shell11receiveByteEc+0x158>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return;
<<<<<<< HEAD
 810bcaa:	bf00      	nop
 810bcac:	e000      	b.n	810bcb0 <_ZN5Shell11receiveByteEc+0x154>
=======
 810a822:	bf00      	nop
 810a824:	e000      	b.n	810a828 <_ZN5Shell11receiveByteEc+0x158>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
<<<<<<< HEAD
 810bcae:	bf00      	nop
=======
 810a826:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
}
<<<<<<< HEAD
 810bcb0:	3710      	adds	r7, #16
 810bcb2:	46bd      	mov	sp, r7
 810bcb4:	bd80      	pop	{r7, pc}
 810bcb6:	bf00      	nop
 810bcb8:	100405e0 	.word	0x100405e0
=======
 810a828:	3710      	adds	r7, #16
 810a82a:	46bd      	mov	sp, r7
 810a82c:	bd80      	pop	{r7, pc}
 810a82e:	bf00      	nop
 810a830:	100041d0 	.word	0x100041d0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810bcbc <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 512



class Shell : public Thread {
 810bcbc:	b580      	push	{r7, lr}
 810bcbe:	b082      	sub	sp, #8
 810bcc0:	af00      	add	r7, sp, #0
 810bcc2:	6078      	str	r0, [r7, #4]
 810bcc4:	4a05      	ldr	r2, [pc, #20]	; (810bcdc <_ZN5ShellD1Ev+0x20>)
 810bcc6:	687b      	ldr	r3, [r7, #4]
 810bcc8:	601a      	str	r2, [r3, #0]
 810bcca:	687b      	ldr	r3, [r7, #4]
 810bccc:	4618      	mov	r0, r3
 810bcce:	f7ff fe0f 	bl	810b8f0 <_ZN6ThreadD1Ev>
 810bcd2:	687b      	ldr	r3, [r7, #4]
 810bcd4:	4618      	mov	r0, r3
 810bcd6:	3708      	adds	r7, #8
 810bcd8:	46bd      	mov	sp, r7
 810bcda:	bd80      	pop	{r7, pc}
 810bcdc:	081149bc 	.word	0x081149bc

0810bce0 <_ZN5ShellD0Ev>:
 810bce0:	b580      	push	{r7, lr}
 810bce2:	b082      	sub	sp, #8
 810bce4:	af00      	add	r7, sp, #0
 810bce6:	6078      	str	r0, [r7, #4]
 810bce8:	6878      	ldr	r0, [r7, #4]
 810bcea:	f7ff ffe7 	bl	810bcbc <_ZN5ShellD1Ev>
 810bcee:	f44f 618d 	mov.w	r1, #1128	; 0x468
 810bcf2:	6878      	ldr	r0, [r7, #4]
 810bcf4:	f004 fed4 	bl	8110aa0 <_ZdlPvj>
 810bcf8:	687b      	ldr	r3, [r7, #4]
 810bcfa:	4618      	mov	r0, r3
 810bcfc:	3708      	adds	r7, #8
 810bcfe:	46bd      	mov	sp, r7
 810bd00:	bd80      	pop	{r7, pc}

0810bd02 <_ZN16CommandComponent7matchesEPKc>:
=======
0810a834 <_ZN16CommandComponent7matchesEPKc>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

struct CommandComponent {
	const char* component;
	uint8_t length;

	bool matches(const char* target) {
<<<<<<< HEAD
 810bd02:	b480      	push	{r7}
 810bd04:	b085      	sub	sp, #20
 810bd06:	af00      	add	r7, sp, #0
 810bd08:	6078      	str	r0, [r7, #4]
 810bd0a:	6039      	str	r1, [r7, #0]
=======
 810a834:	b480      	push	{r7}
 810a836:	b085      	sub	sp, #20
 810a838:	af00      	add	r7, sp, #0
 810a83a:	6078      	str	r0, [r7, #4]
 810a83c:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		uint8_t i;

		for(i = 0; i < length; i++) {
<<<<<<< HEAD
 810bd0c:	2300      	movs	r3, #0
 810bd0e:	73fb      	strb	r3, [r7, #15]
 810bd10:	687b      	ldr	r3, [r7, #4]
 810bd12:	791b      	ldrb	r3, [r3, #4]
 810bd14:	7bfa      	ldrb	r2, [r7, #15]
 810bd16:	429a      	cmp	r2, r3
 810bd18:	d216      	bcs.n	810bd48 <_ZN16CommandComponent7matchesEPKc+0x46>
=======
 810a83e:	2300      	movs	r3, #0
 810a840:	73fb      	strb	r3, [r7, #15]
 810a842:	687b      	ldr	r3, [r7, #4]
 810a844:	791b      	ldrb	r3, [r3, #4]
 810a846:	7bfa      	ldrb	r2, [r7, #15]
 810a848:	429a      	cmp	r2, r3
 810a84a:	d216      	bcs.n	810a87a <_ZN16CommandComponent7matchesEPKc+0x46>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			if(target[i] != component[i] || target[i] == '\0') {
<<<<<<< HEAD
 810bd1a:	7bfb      	ldrb	r3, [r7, #15]
 810bd1c:	683a      	ldr	r2, [r7, #0]
 810bd1e:	4413      	add	r3, r2
 810bd20:	781a      	ldrb	r2, [r3, #0]
 810bd22:	687b      	ldr	r3, [r7, #4]
 810bd24:	6819      	ldr	r1, [r3, #0]
 810bd26:	7bfb      	ldrb	r3, [r7, #15]
 810bd28:	440b      	add	r3, r1
 810bd2a:	781b      	ldrb	r3, [r3, #0]
 810bd2c:	429a      	cmp	r2, r3
 810bd2e:	d105      	bne.n	810bd3c <_ZN16CommandComponent7matchesEPKc+0x3a>
 810bd30:	7bfb      	ldrb	r3, [r7, #15]
 810bd32:	683a      	ldr	r2, [r7, #0]
 810bd34:	4413      	add	r3, r2
 810bd36:	781b      	ldrb	r3, [r3, #0]
 810bd38:	2b00      	cmp	r3, #0
 810bd3a:	d101      	bne.n	810bd40 <_ZN16CommandComponent7matchesEPKc+0x3e>
=======
 810a84c:	7bfb      	ldrb	r3, [r7, #15]
 810a84e:	683a      	ldr	r2, [r7, #0]
 810a850:	4413      	add	r3, r2
 810a852:	781a      	ldrb	r2, [r3, #0]
 810a854:	687b      	ldr	r3, [r7, #4]
 810a856:	6819      	ldr	r1, [r3, #0]
 810a858:	7bfb      	ldrb	r3, [r7, #15]
 810a85a:	440b      	add	r3, r1
 810a85c:	781b      	ldrb	r3, [r3, #0]
 810a85e:	429a      	cmp	r2, r3
 810a860:	d105      	bne.n	810a86e <_ZN16CommandComponent7matchesEPKc+0x3a>
 810a862:	7bfb      	ldrb	r3, [r7, #15]
 810a864:	683a      	ldr	r2, [r7, #0]
 810a866:	4413      	add	r3, r2
 810a868:	781b      	ldrb	r3, [r3, #0]
 810a86a:	2b00      	cmp	r3, #0
 810a86c:	d101      	bne.n	810a872 <_ZN16CommandComponent7matchesEPKc+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				return false;
<<<<<<< HEAD
 810bd3c:	2300      	movs	r3, #0
 810bd3e:	e00c      	b.n	810bd5a <_ZN16CommandComponent7matchesEPKc+0x58>
=======
 810a86e:	2300      	movs	r3, #0
 810a870:	e00c      	b.n	810a88c <_ZN16CommandComponent7matchesEPKc+0x58>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		for(i = 0; i < length; i++) {
<<<<<<< HEAD
 810bd40:	7bfb      	ldrb	r3, [r7, #15]
 810bd42:	3301      	adds	r3, #1
 810bd44:	73fb      	strb	r3, [r7, #15]
 810bd46:	e7e3      	b.n	810bd10 <_ZN16CommandComponent7matchesEPKc+0xe>
=======
 810a872:	7bfb      	ldrb	r3, [r7, #15]
 810a874:	3301      	adds	r3, #1
 810a876:	73fb      	strb	r3, [r7, #15]
 810a878:	e7e3      	b.n	810a842 <_ZN16CommandComponent7matchesEPKc+0xe>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}

		return target[i] == '\0';
<<<<<<< HEAD
 810bd48:	7bfb      	ldrb	r3, [r7, #15]
 810bd4a:	683a      	ldr	r2, [r7, #0]
 810bd4c:	4413      	add	r3, r2
 810bd4e:	781b      	ldrb	r3, [r3, #0]
 810bd50:	2b00      	cmp	r3, #0
 810bd52:	bf0c      	ite	eq
 810bd54:	2301      	moveq	r3, #1
 810bd56:	2300      	movne	r3, #0
 810bd58:	b2db      	uxtb	r3, r3
=======
 810a87a:	7bfb      	ldrb	r3, [r7, #15]
 810a87c:	683a      	ldr	r2, [r7, #0]
 810a87e:	4413      	add	r3, r2
 810a880:	781b      	ldrb	r3, [r3, #0]
 810a882:	2b00      	cmp	r3, #0
 810a884:	bf0c      	ite	eq
 810a886:	2301      	moveq	r3, #1
 810a888:	2300      	movne	r3, #0
 810a88a:	b2db      	uxtb	r3, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810bd5a:	4618      	mov	r0, r3
 810bd5c:	3714      	adds	r7, #20
 810bd5e:	46bd      	mov	sp, r7
 810bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd64:	4770      	bx	lr
	...
=======
 810a88c:	4618      	mov	r0, r3
 810a88e:	3714      	adds	r7, #20
 810a890:	46bd      	mov	sp, r7
 810a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a896:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810bd68 <_ZN8Terminal7executeEP12ShellCommandP7Console>:
=======
0810a898 <_ZN8Terminal7executeEP12ShellCommandP7Console>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics


#define EQUALS(index, str) (cmd->num_components > (index) && cmd->components[(index)].matches((str)))


void Terminal::execute(ShellCommand* cmd, Console* feedback) {
<<<<<<< HEAD
 810bd68:	b580      	push	{r7, lr}
 810bd6a:	b086      	sub	sp, #24
 810bd6c:	af00      	add	r7, sp, #0
 810bd6e:	60f8      	str	r0, [r7, #12]
 810bd70:	60b9      	str	r1, [r7, #8]
 810bd72:	607a      	str	r2, [r7, #4]
=======
 810a898:	b580      	push	{r7, lr}
 810a89a:	b086      	sub	sp, #24
 810a89c:	af00      	add	r7, sp, #0
 810a89e:	60f8      	str	r0, [r7, #12]
 810a8a0:	60b9      	str	r1, [r7, #8]
 810a8a2:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(cmd->num_components > 0) {
<<<<<<< HEAD
 810bd74:	68bb      	ldr	r3, [r7, #8]
 810bd76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bd7a:	2b00      	cmp	r3, #0
 810bd7c:	f000 81e3 	beq.w	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810a8a4:	68bb      	ldr	r3, [r7, #8]
 810a8a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a8aa:	2b00      	cmp	r3, #0
 810a8ac:	f000 81e3 	beq.w	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if(EQUALS(0, "help")) {
<<<<<<< HEAD
 810bd80:	68bb      	ldr	r3, [r7, #8]
 810bd82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bd86:	2b00      	cmp	r3, #0
 810bd88:	d009      	beq.n	810bd9e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810bd8a:	68bb      	ldr	r3, [r7, #8]
 810bd8c:	49a8      	ldr	r1, [pc, #672]	; (810c030 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 810bd8e:	4618      	mov	r0, r3
 810bd90:	f7ff ffb7 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810bd94:	4603      	mov	r3, r0
 810bd96:	2b00      	cmp	r3, #0
 810bd98:	d001      	beq.n	810bd9e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810bd9a:	2301      	movs	r3, #1
 810bd9c:	e000      	b.n	810bda0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x38>
 810bd9e:	2300      	movs	r3, #0
 810bda0:	2b00      	cmp	r3, #0
 810bda2:	d01c      	beq.n	810bdde <_ZN8Terminal7executeEP12ShellCommandP7Console+0x76>
=======
 810a8b0:	68bb      	ldr	r3, [r7, #8]
 810a8b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a8b6:	2b00      	cmp	r3, #0
 810a8b8:	d009      	beq.n	810a8ce <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810a8ba:	68bb      	ldr	r3, [r7, #8]
 810a8bc:	49a8      	ldr	r1, [pc, #672]	; (810ab60 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 810a8be:	4618      	mov	r0, r3
 810a8c0:	f7ff ffb8 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a8c4:	4603      	mov	r3, r0
 810a8c6:	2b00      	cmp	r3, #0
 810a8c8:	d001      	beq.n	810a8ce <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810a8ca:	2301      	movs	r3, #1
 810a8cc:	e000      	b.n	810a8d0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x38>
 810a8ce:	2300      	movs	r3, #0
 810a8d0:	2b00      	cmp	r3, #0
 810a8d2:	d01c      	beq.n	810a90e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x76>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> Xplore Avionics available commands:\r\n");
<<<<<<< HEAD
 810bda4:	49a3      	ldr	r1, [pc, #652]	; (810c034 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
 810bda6:	6878      	ldr	r0, [r7, #4]
 810bda8:	f7ff fd2d 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a8d4:	49a3      	ldr	r1, [pc, #652]	; (810ab64 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
 810a8d6:	6878      	ldr	r0, [r7, #4]
 810a8d8:	f7ff fd73 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> clear: clears the screen\r\n");
<<<<<<< HEAD
 810bdac:	49a2      	ldr	r1, [pc, #648]	; (810c038 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 810bdae:	6878      	ldr	r0, [r7, #4]
 810bdb0:	f7ff fd29 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a8dc:	49a2      	ldr	r1, [pc, #648]	; (810ab68 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 810a8de:	6878      	ldr	r0, [r7, #4]
 810a8e0:	f7ff fd6f 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> help: shows this help page\r\n");
<<<<<<< HEAD
 810bdb4:	49a1      	ldr	r1, [pc, #644]	; (810c03c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 810bdb6:	6878      	ldr	r0, [r7, #4]
 810bdb8:	f7ff fd25 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a8e4:	49a1      	ldr	r1, [pc, #644]	; (810ab6c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 810a8e6:	6878      	ldr	r0, [r7, #4]
 810a8e8:	f7ff fd6b 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> monitor: enables or disables a specific monitor\r\n");
<<<<<<< HEAD
 810bdbc:	49a0      	ldr	r1, [pc, #640]	; (810c040 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 810bdbe:	6878      	ldr	r0, [r7, #4]
 810bdc0:	f7ff fd21 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a8ec:	49a0      	ldr	r1, [pc, #640]	; (810ab70 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 810a8ee:	6878      	ldr	r0, [r7, #4]
 810a8f0:	f7ff fd67 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> profiler: enables or disables the embedded profiler\r\n");
<<<<<<< HEAD
 810bdc4:	499f      	ldr	r1, [pc, #636]	; (810c044 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 810bdc6:	6878      	ldr	r0, [r7, #4]
 810bdc8:	f7ff fd1d 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a8f4:	499f      	ldr	r1, [pc, #636]	; (810ab74 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 810a8f6:	6878      	ldr	r0, [r7, #4]
 810a8f8:	f7ff fd63 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> reset: performs a software reset of the avionics\r\n");
<<<<<<< HEAD
 810bdcc:	499e      	ldr	r1, [pc, #632]	; (810c048 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e0>)
 810bdce:	6878      	ldr	r0, [r7, #4]
 810bdd0:	f7ff fd19 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a8fc:	499e      	ldr	r1, [pc, #632]	; (810ab78 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e0>)
 810a8fe:	6878      	ldr	r0, [r7, #4]
 810a900:	f7ff fd5f 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> version: displays the current terminal version\r\n");
<<<<<<< HEAD
 810bdd4:	499d      	ldr	r1, [pc, #628]	; (810c04c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e4>)
 810bdd6:	6878      	ldr	r0, [r7, #4]
 810bdd8:	f7ff fd15 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a904:	499d      	ldr	r1, [pc, #628]	; (810ab7c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e4>)
 810a906:	6878      	ldr	r0, [r7, #4]
 810a908:	f7ff fd5b 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		} else {
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
		}
	}
}
<<<<<<< HEAD
 810bddc:	e1b3      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810a90c:	e1b3      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		} else if(EQUALS(0, "version")) {
<<<<<<< HEAD
 810bdde:	68bb      	ldr	r3, [r7, #8]
 810bde0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bde4:	2b00      	cmp	r3, #0
 810bde6:	d009      	beq.n	810bdfc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810bde8:	68bb      	ldr	r3, [r7, #8]
 810bdea:	4999      	ldr	r1, [pc, #612]	; (810c050 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e8>)
 810bdec:	4618      	mov	r0, r3
 810bdee:	f7ff ff88 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810bdf2:	4603      	mov	r3, r0
 810bdf4:	2b00      	cmp	r3, #0
 810bdf6:	d001      	beq.n	810bdfc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810bdf8:	2301      	movs	r3, #1
 810bdfa:	e000      	b.n	810bdfe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x96>
 810bdfc:	2300      	movs	r3, #0
 810bdfe:	2b00      	cmp	r3, #0
 810be00:	d004      	beq.n	810be0c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa4>
=======
 810a90e:	68bb      	ldr	r3, [r7, #8]
 810a910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a914:	2b00      	cmp	r3, #0
 810a916:	d009      	beq.n	810a92c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810a918:	68bb      	ldr	r3, [r7, #8]
 810a91a:	4999      	ldr	r1, [pc, #612]	; (810ab80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e8>)
 810a91c:	4618      	mov	r0, r3
 810a91e:	f7ff ff89 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a922:	4603      	mov	r3, r0
 810a924:	2b00      	cmp	r3, #0
 810a926:	d001      	beq.n	810a92c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810a928:	2301      	movs	r3, #1
 810a92a:	e000      	b.n	810a92e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x96>
 810a92c:	2300      	movs	r3, #0
 810a92e:	2b00      	cmp	r3, #0
 810a930:	d004      	beq.n	810a93c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> Xplore Avionics Terminal v1.0 by Arion Zimmermann\r\n");
<<<<<<< HEAD
 810be02:	4994      	ldr	r1, [pc, #592]	; (810c054 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ec>)
 810be04:	6878      	ldr	r0, [r7, #4]
 810be06:	f7ff fcfe 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a932:	4994      	ldr	r1, [pc, #592]	; (810ab84 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ec>)
 810a934:	6878      	ldr	r0, [r7, #4]
 810a936:	f7ff fd44 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810be0a:	e19c      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810a93a:	e19c      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		} else if(EQUALS(0, "reset")) {
<<<<<<< HEAD
 810be0c:	68bb      	ldr	r3, [r7, #8]
 810be0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810be12:	2b00      	cmp	r3, #0
 810be14:	d009      	beq.n	810be2a <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810be16:	68bb      	ldr	r3, [r7, #8]
 810be18:	498f      	ldr	r1, [pc, #572]	; (810c058 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f0>)
 810be1a:	4618      	mov	r0, r3
 810be1c:	f7ff ff71 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810be20:	4603      	mov	r3, r0
 810be22:	2b00      	cmp	r3, #0
 810be24:	d001      	beq.n	810be2a <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810be26:	2301      	movs	r3, #1
 810be28:	e000      	b.n	810be2c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc4>
 810be2a:	2300      	movs	r3, #0
 810be2c:	2b00      	cmp	r3, #0
 810be2e:	d002      	beq.n	810be36 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xce>
=======
 810a93c:	68bb      	ldr	r3, [r7, #8]
 810a93e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a942:	2b00      	cmp	r3, #0
 810a944:	d009      	beq.n	810a95a <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810a946:	68bb      	ldr	r3, [r7, #8]
 810a948:	498f      	ldr	r1, [pc, #572]	; (810ab88 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f0>)
 810a94a:	4618      	mov	r0, r3
 810a94c:	f7ff ff72 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a950:	4603      	mov	r3, r0
 810a952:	2b00      	cmp	r3, #0
 810a954:	d001      	beq.n	810a95a <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810a956:	2301      	movs	r3, #1
 810a958:	e000      	b.n	810a95c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc4>
 810a95a:	2300      	movs	r3, #0
 810a95c:	2b00      	cmp	r3, #0
 810a95e:	d002      	beq.n	810a966 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xce>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			HAL_NVIC_SystemReset();
<<<<<<< HEAD
 810be30:	f7f6 fb8f 	bl	8102552 <HAL_NVIC_SystemReset>
=======
 810a960:	f7f7 fd2d 	bl	81023be <HAL_NVIC_SystemReset>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810be34:	e187      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810a964:	e187      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		} else if(EQUALS(0, "time")) {
<<<<<<< HEAD
 810be36:	68bb      	ldr	r3, [r7, #8]
 810be38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810be3c:	2b00      	cmp	r3, #0
 810be3e:	d009      	beq.n	810be54 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810be40:	68bb      	ldr	r3, [r7, #8]
 810be42:	4986      	ldr	r1, [pc, #536]	; (810c05c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f4>)
 810be44:	4618      	mov	r0, r3
 810be46:	f7ff ff5c 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810be4a:	4603      	mov	r3, r0
 810be4c:	2b00      	cmp	r3, #0
 810be4e:	d001      	beq.n	810be54 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810be50:	2301      	movs	r3, #1
 810be52:	e000      	b.n	810be56 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
 810be54:	2300      	movs	r3, #0
 810be56:	2b00      	cmp	r3, #0
 810be58:	d008      	beq.n	810be6c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x104>
=======
 810a966:	68bb      	ldr	r3, [r7, #8]
 810a968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a96c:	2b00      	cmp	r3, #0
 810a96e:	d009      	beq.n	810a984 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810a970:	68bb      	ldr	r3, [r7, #8]
 810a972:	4986      	ldr	r1, [pc, #536]	; (810ab8c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f4>)
 810a974:	4618      	mov	r0, r3
 810a976:	f7ff ff5d 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a97a:	4603      	mov	r3, r0
 810a97c:	2b00      	cmp	r3, #0
 810a97e:	d001      	beq.n	810a984 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810a980:	2301      	movs	r3, #1
 810a982:	e000      	b.n	810a986 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
 810a984:	2300      	movs	r3, #0
 810a986:	2b00      	cmp	r3, #0
 810a988:	d008      	beq.n	810a99c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x104>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("%d\r\n", HAL_GetTick());
<<<<<<< HEAD
 810be5a:	f7f6 fa77 	bl	810234c <HAL_GetTick>
 810be5e:	4603      	mov	r3, r0
 810be60:	461a      	mov	r2, r3
 810be62:	497f      	ldr	r1, [pc, #508]	; (810c060 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f8>)
 810be64:	6878      	ldr	r0, [r7, #4]
 810be66:	f7ff fcce 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a98a:	f7f7 fc17 	bl	81021bc <HAL_GetTick>
 810a98e:	4603      	mov	r3, r0
 810a990:	461a      	mov	r2, r3
 810a992:	497f      	ldr	r1, [pc, #508]	; (810ab90 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f8>)
 810a994:	6878      	ldr	r0, [r7, #4]
 810a996:	f7ff fd14 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810be6a:	e16c      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810a99a:	e16c      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		} else if(EQUALS(0, "clear")) {
<<<<<<< HEAD
 810be6c:	68bb      	ldr	r3, [r7, #8]
 810be6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810be72:	2b00      	cmp	r3, #0
 810be74:	d009      	beq.n	810be8a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810be76:	68bb      	ldr	r3, [r7, #8]
 810be78:	497a      	ldr	r1, [pc, #488]	; (810c064 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2fc>)
 810be7a:	4618      	mov	r0, r3
 810be7c:	f7ff ff41 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810be80:	4603      	mov	r3, r0
 810be82:	2b00      	cmp	r3, #0
 810be84:	d001      	beq.n	810be8a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810be86:	2301      	movs	r3, #1
 810be88:	e000      	b.n	810be8c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x124>
 810be8a:	2300      	movs	r3, #0
 810be8c:	2b00      	cmp	r3, #0
 810be8e:	d004      	beq.n	810be9a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x132>
=======
 810a99c:	68bb      	ldr	r3, [r7, #8]
 810a99e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a9a2:	2b00      	cmp	r3, #0
 810a9a4:	d009      	beq.n	810a9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810a9a6:	68bb      	ldr	r3, [r7, #8]
 810a9a8:	497a      	ldr	r1, [pc, #488]	; (810ab94 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2fc>)
 810a9aa:	4618      	mov	r0, r3
 810a9ac:	f7ff ff42 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a9b0:	4603      	mov	r3, r0
 810a9b2:	2b00      	cmp	r3, #0
 810a9b4:	d001      	beq.n	810a9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810a9b6:	2301      	movs	r3, #1
 810a9b8:	e000      	b.n	810a9bc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x124>
 810a9ba:	2300      	movs	r3, #0
 810a9bc:	2b00      	cmp	r3, #0
 810a9be:	d004      	beq.n	810a9ca <_ZN8Terminal7executeEP12ShellCommandP7Console+0x132>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("\x1b[2J\x1b[H\e7");
<<<<<<< HEAD
 810be90:	4975      	ldr	r1, [pc, #468]	; (810c068 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x300>)
 810be92:	6878      	ldr	r0, [r7, #4]
 810be94:	f7ff fcb7 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810a9c0:	4975      	ldr	r1, [pc, #468]	; (810ab98 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x300>)
 810a9c2:	6878      	ldr	r0, [r7, #4]
 810a9c4:	f7ff fcfd 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810be98:	e155      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810a9c8:	e155      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		} else if(EQUALS(0, "profiler")) {
<<<<<<< HEAD
 810be9a:	68bb      	ldr	r3, [r7, #8]
 810be9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bea0:	2b00      	cmp	r3, #0
 810bea2:	d009      	beq.n	810beb8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810bea4:	68bb      	ldr	r3, [r7, #8]
 810bea6:	4971      	ldr	r1, [pc, #452]	; (810c06c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x304>)
 810bea8:	4618      	mov	r0, r3
 810beaa:	f7ff ff2a 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810beae:	4603      	mov	r3, r0
 810beb0:	2b00      	cmp	r3, #0
 810beb2:	d001      	beq.n	810beb8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810beb4:	2301      	movs	r3, #1
 810beb6:	e000      	b.n	810beba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x152>
 810beb8:	2300      	movs	r3, #0
 810beba:	2b00      	cmp	r3, #0
 810bebc:	d042      	beq.n	810bf44 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1dc>
=======
 810a9ca:	68bb      	ldr	r3, [r7, #8]
 810a9cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a9d0:	2b00      	cmp	r3, #0
 810a9d2:	d009      	beq.n	810a9e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810a9d4:	68bb      	ldr	r3, [r7, #8]
 810a9d6:	4971      	ldr	r1, [pc, #452]	; (810ab9c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x304>)
 810a9d8:	4618      	mov	r0, r3
 810a9da:	f7ff ff2b 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810a9de:	4603      	mov	r3, r0
 810a9e0:	2b00      	cmp	r3, #0
 810a9e2:	d001      	beq.n	810a9e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810a9e4:	2301      	movs	r3, #1
 810a9e6:	e000      	b.n	810a9ea <_ZN8Terminal7executeEP12ShellCommandP7Console+0x152>
 810a9e8:	2300      	movs	r3, #0
 810a9ea:	2b00      	cmp	r3, #0
 810a9ec:	d042      	beq.n	810aa74 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1dc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			if(EQUALS(1, "enable")) {
<<<<<<< HEAD
 810bebe:	68bb      	ldr	r3, [r7, #8]
 810bec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bec4:	2b01      	cmp	r3, #1
 810bec6:	d90a      	bls.n	810bede <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810bec8:	68bb      	ldr	r3, [r7, #8]
 810beca:	3308      	adds	r3, #8
 810becc:	4968      	ldr	r1, [pc, #416]	; (810c070 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810bece:	4618      	mov	r0, r3
 810bed0:	f7ff ff17 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810bed4:	4603      	mov	r3, r0
 810bed6:	2b00      	cmp	r3, #0
 810bed8:	d001      	beq.n	810bede <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810beda:	2301      	movs	r3, #1
 810bedc:	e000      	b.n	810bee0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x178>
 810bede:	2300      	movs	r3, #0
 810bee0:	2b00      	cmp	r3, #0
 810bee2:	d00b      	beq.n	810befc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x194>
=======
 810a9ee:	68bb      	ldr	r3, [r7, #8]
 810a9f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810a9f4:	2b01      	cmp	r3, #1
 810a9f6:	d90a      	bls.n	810aa0e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810a9f8:	68bb      	ldr	r3, [r7, #8]
 810a9fa:	3308      	adds	r3, #8
 810a9fc:	4968      	ldr	r1, [pc, #416]	; (810aba0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810a9fe:	4618      	mov	r0, r3
 810aa00:	f7ff ff18 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aa04:	4603      	mov	r3, r0
 810aa06:	2b00      	cmp	r3, #0
 810aa08:	d001      	beq.n	810aa0e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810aa0a:	2301      	movs	r3, #1
 810aa0c:	e000      	b.n	810aa10 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x178>
 810aa0e:	2300      	movs	r3, #0
 810aa10:	2b00      	cmp	r3, #0
 810aa12:	d00b      	beq.n	810aa2c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x194>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				profiler.enable();
<<<<<<< HEAD
 810bee4:	4863      	ldr	r0, [pc, #396]	; (810c074 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810bee6:	f7ff fcd5 	bl	810b894 <_ZN8Profiler6enableEv>
=======
 810aa14:	4863      	ldr	r0, [pc, #396]	; (810aba4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810aa16:	f7ff fd1b 	bl	810a450 <_ZN8Profiler6enableEv>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("\x1b[2J");
<<<<<<< HEAD
 810beea:	4963      	ldr	r1, [pc, #396]	; (810c078 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810beec:	6878      	ldr	r0, [r7, #4]
 810beee:	f7ff fc8a 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810aa1a:	4963      	ldr	r1, [pc, #396]	; (810aba8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810aa1c:	6878      	ldr	r0, [r7, #4]
 810aa1e:	f7ff fcd0 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("> Profiler now enabled\r\n");
<<<<<<< HEAD
 810bef2:	4962      	ldr	r1, [pc, #392]	; (810c07c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x314>)
 810bef4:	6878      	ldr	r0, [r7, #4]
 810bef6:	f7ff fc86 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810aa22:	4962      	ldr	r1, [pc, #392]	; (810abac <_ZN8Terminal7executeEP12ShellCommandP7Console+0x314>)
 810aa24:	6878      	ldr	r0, [r7, #4]
 810aa26:	f7ff fccc 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810befa:	e124      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810aa2a:	e124      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			} else if(EQUALS(1, "disable")) {
<<<<<<< HEAD
 810befc:	68bb      	ldr	r3, [r7, #8]
 810befe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bf02:	2b01      	cmp	r3, #1
 810bf04:	d90a      	bls.n	810bf1c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810bf06:	68bb      	ldr	r3, [r7, #8]
 810bf08:	3308      	adds	r3, #8
 810bf0a:	495d      	ldr	r1, [pc, #372]	; (810c080 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x318>)
 810bf0c:	4618      	mov	r0, r3
 810bf0e:	f7ff fef8 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810bf12:	4603      	mov	r3, r0
 810bf14:	2b00      	cmp	r3, #0
 810bf16:	d001      	beq.n	810bf1c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810bf18:	2301      	movs	r3, #1
 810bf1a:	e000      	b.n	810bf1e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b6>
 810bf1c:	2300      	movs	r3, #0
 810bf1e:	2b00      	cmp	r3, #0
 810bf20:	d00b      	beq.n	810bf3a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d2>
=======
 810aa2c:	68bb      	ldr	r3, [r7, #8]
 810aa2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810aa32:	2b01      	cmp	r3, #1
 810aa34:	d90a      	bls.n	810aa4c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810aa36:	68bb      	ldr	r3, [r7, #8]
 810aa38:	3308      	adds	r3, #8
 810aa3a:	495d      	ldr	r1, [pc, #372]	; (810abb0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x318>)
 810aa3c:	4618      	mov	r0, r3
 810aa3e:	f7ff fef9 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aa42:	4603      	mov	r3, r0
 810aa44:	2b00      	cmp	r3, #0
 810aa46:	d001      	beq.n	810aa4c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810aa48:	2301      	movs	r3, #1
 810aa4a:	e000      	b.n	810aa4e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b6>
 810aa4c:	2300      	movs	r3, #0
 810aa4e:	2b00      	cmp	r3, #0
 810aa50:	d00b      	beq.n	810aa6a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				profiler.disable();
<<<<<<< HEAD
 810bf22:	4854      	ldr	r0, [pc, #336]	; (810c074 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810bf24:	f7ff fcd6 	bl	810b8d4 <_ZN8Profiler7disableEv>
=======
 810aa52:	4854      	ldr	r0, [pc, #336]	; (810aba4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810aa54:	f7ff fd1c 	bl	810a490 <_ZN8Profiler7disableEv>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("\x1b[2J");
<<<<<<< HEAD
 810bf28:	4953      	ldr	r1, [pc, #332]	; (810c078 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810bf2a:	6878      	ldr	r0, [r7, #4]
 810bf2c:	f7ff fc6b 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810aa58:	4953      	ldr	r1, [pc, #332]	; (810aba8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810aa5a:	6878      	ldr	r0, [r7, #4]
 810aa5c:	f7ff fcb1 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("> Profiler now disabled\r\n");
<<<<<<< HEAD
 810bf30:	4954      	ldr	r1, [pc, #336]	; (810c084 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x31c>)
 810bf32:	6878      	ldr	r0, [r7, #4]
 810bf34:	f7ff fc67 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810aa60:	4954      	ldr	r1, [pc, #336]	; (810abb4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x31c>)
 810aa62:	6878      	ldr	r0, [r7, #4]
 810aa64:	f7ff fcad 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810bf38:	e105      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810aa68:	e105      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("> Usage: profiler { enable | disable }\r\n");
<<<<<<< HEAD
 810bf3a:	4953      	ldr	r1, [pc, #332]	; (810c088 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x320>)
 810bf3c:	6878      	ldr	r0, [r7, #4]
 810bf3e:	f7ff fc62 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810aa6a:	4953      	ldr	r1, [pc, #332]	; (810abb8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x320>)
 810aa6c:	6878      	ldr	r0, [r7, #4]
 810aa6e:	f7ff fca8 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810bf42:	e100      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810aa72:	e100      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		} else if(EQUALS(0, "verbose")) {
<<<<<<< HEAD
 810bf44:	68bb      	ldr	r3, [r7, #8]
 810bf46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bf4a:	2b00      	cmp	r3, #0
 810bf4c:	d009      	beq.n	810bf62 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810bf4e:	68bb      	ldr	r3, [r7, #8]
 810bf50:	494e      	ldr	r1, [pc, #312]	; (810c08c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x324>)
 810bf52:	4618      	mov	r0, r3
 810bf54:	f7ff fed5 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810bf58:	4603      	mov	r3, r0
 810bf5a:	2b00      	cmp	r3, #0
 810bf5c:	d001      	beq.n	810bf62 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810bf5e:	2301      	movs	r3, #1
 810bf60:	e000      	b.n	810bf64 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
 810bf62:	2300      	movs	r3, #0
 810bf64:	2b00      	cmp	r3, #0
 810bf66:	d03a      	beq.n	810bfde <_ZN8Terminal7executeEP12ShellCommandP7Console+0x276>
=======
 810aa74:	68bb      	ldr	r3, [r7, #8]
 810aa76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810aa7a:	2b00      	cmp	r3, #0
 810aa7c:	d009      	beq.n	810aa92 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810aa7e:	68bb      	ldr	r3, [r7, #8]
 810aa80:	494e      	ldr	r1, [pc, #312]	; (810abbc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x324>)
 810aa82:	4618      	mov	r0, r3
 810aa84:	f7ff fed6 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aa88:	4603      	mov	r3, r0
 810aa8a:	2b00      	cmp	r3, #0
 810aa8c:	d001      	beq.n	810aa92 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810aa8e:	2301      	movs	r3, #1
 810aa90:	e000      	b.n	810aa94 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
 810aa92:	2300      	movs	r3, #0
 810aa94:	2b00      	cmp	r3, #0
 810aa96:	d03a      	beq.n	810ab0e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x276>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			if(EQUALS(1, "on")) {
<<<<<<< HEAD
 810bf68:	68bb      	ldr	r3, [r7, #8]
 810bf6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bf6e:	2b01      	cmp	r3, #1
 810bf70:	d90a      	bls.n	810bf88 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810bf72:	68bb      	ldr	r3, [r7, #8]
 810bf74:	3308      	adds	r3, #8
 810bf76:	4946      	ldr	r1, [pc, #280]	; (810c090 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x328>)
 810bf78:	4618      	mov	r0, r3
 810bf7a:	f7ff fec2 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810bf7e:	4603      	mov	r3, r0
 810bf80:	2b00      	cmp	r3, #0
 810bf82:	d001      	beq.n	810bf88 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810bf84:	2301      	movs	r3, #1
 810bf86:	e000      	b.n	810bf8a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x222>
 810bf88:	2300      	movs	r3, #0
 810bf8a:	2b00      	cmp	r3, #0
 810bf8c:	d007      	beq.n	810bf9e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
=======
 810aa98:	68bb      	ldr	r3, [r7, #8]
 810aa9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810aa9e:	2b01      	cmp	r3, #1
 810aaa0:	d90a      	bls.n	810aab8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810aaa2:	68bb      	ldr	r3, [r7, #8]
 810aaa4:	3308      	adds	r3, #8
 810aaa6:	4946      	ldr	r1, [pc, #280]	; (810abc0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x328>)
 810aaa8:	4618      	mov	r0, r3
 810aaaa:	f7ff fec3 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aaae:	4603      	mov	r3, r0
 810aab0:	2b00      	cmp	r3, #0
 810aab2:	d001      	beq.n	810aab8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810aab4:	2301      	movs	r3, #1
 810aab6:	e000      	b.n	810aaba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x222>
 810aab8:	2300      	movs	r3, #0
 810aaba:	2b00      	cmp	r3, #0
 810aabc:	d007      	beq.n	810aace <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				verbose = true;
<<<<<<< HEAD
 810bf8e:	68fb      	ldr	r3, [r7, #12]
 810bf90:	2201      	movs	r2, #1
 810bf92:	701a      	strb	r2, [r3, #0]
=======
 810aabe:	68fb      	ldr	r3, [r7, #12]
 810aac0:	2201      	movs	r2, #1
 810aac2:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("> Verbose mode enabled\r\n");
<<<<<<< HEAD
 810bf94:	493f      	ldr	r1, [pc, #252]	; (810c094 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x32c>)
 810bf96:	6878      	ldr	r0, [r7, #4]
 810bf98:	f7ff fc35 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810aac4:	493f      	ldr	r1, [pc, #252]	; (810abc4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x32c>)
 810aac6:	6878      	ldr	r0, [r7, #4]
 810aac8:	f7ff fc7b 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810bf9c:	e0d3      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810aacc:	e0d3      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			} else if(EQUALS(1, "off")) {
<<<<<<< HEAD
 810bf9e:	68bb      	ldr	r3, [r7, #8]
 810bfa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bfa4:	2b01      	cmp	r3, #1
 810bfa6:	d90a      	bls.n	810bfbe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810bfa8:	68bb      	ldr	r3, [r7, #8]
 810bfaa:	3308      	adds	r3, #8
 810bfac:	493a      	ldr	r1, [pc, #232]	; (810c098 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x330>)
 810bfae:	4618      	mov	r0, r3
 810bfb0:	f7ff fea7 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810bfb4:	4603      	mov	r3, r0
 810bfb6:	2b00      	cmp	r3, #0
 810bfb8:	d001      	beq.n	810bfbe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810bfba:	2301      	movs	r3, #1
 810bfbc:	e000      	b.n	810bfc0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>
 810bfbe:	2300      	movs	r3, #0
 810bfc0:	2b00      	cmp	r3, #0
 810bfc2:	d007      	beq.n	810bfd4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>
=======
 810aace:	68bb      	ldr	r3, [r7, #8]
 810aad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810aad4:	2b01      	cmp	r3, #1
 810aad6:	d90a      	bls.n	810aaee <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810aad8:	68bb      	ldr	r3, [r7, #8]
 810aada:	3308      	adds	r3, #8
 810aadc:	493a      	ldr	r1, [pc, #232]	; (810abc8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x330>)
 810aade:	4618      	mov	r0, r3
 810aae0:	f7ff fea8 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810aae4:	4603      	mov	r3, r0
 810aae6:	2b00      	cmp	r3, #0
 810aae8:	d001      	beq.n	810aaee <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810aaea:	2301      	movs	r3, #1
 810aaec:	e000      	b.n	810aaf0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>
 810aaee:	2300      	movs	r3, #0
 810aaf0:	2b00      	cmp	r3, #0
 810aaf2:	d007      	beq.n	810ab04 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				verbose = false;
<<<<<<< HEAD
 810bfc4:	68fb      	ldr	r3, [r7, #12]
 810bfc6:	2200      	movs	r2, #0
 810bfc8:	701a      	strb	r2, [r3, #0]
=======
 810aaf4:	68fb      	ldr	r3, [r7, #12]
 810aaf6:	2200      	movs	r2, #0
 810aaf8:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("> Verbose mode disabled\r\n");
<<<<<<< HEAD
 810bfca:	4934      	ldr	r1, [pc, #208]	; (810c09c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x334>)
 810bfcc:	6878      	ldr	r0, [r7, #4]
 810bfce:	f7ff fc1a 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810aafa:	4934      	ldr	r1, [pc, #208]	; (810abcc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x334>)
 810aafc:	6878      	ldr	r0, [r7, #4]
 810aafe:	f7ff fc60 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810bfd2:	e0b8      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810ab02:	e0b8      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("> Usage: verbose { on | off }\r\n");
<<<<<<< HEAD
 810bfd4:	4932      	ldr	r1, [pc, #200]	; (810c0a0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x338>)
 810bfd6:	6878      	ldr	r0, [r7, #4]
 810bfd8:	f7ff fc15 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810ab04:	4932      	ldr	r1, [pc, #200]	; (810abd0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x338>)
 810ab06:	6878      	ldr	r0, [r7, #4]
 810ab08:	f7ff fc5b 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810bfdc:	e0b3      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810ab0c:	e0b3      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		} else if(EQUALS(0, "monitor")) {
<<<<<<< HEAD
 810bfde:	68bb      	ldr	r3, [r7, #8]
 810bfe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bfe4:	2b00      	cmp	r3, #0
 810bfe6:	d009      	beq.n	810bffc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810bfe8:	68bb      	ldr	r3, [r7, #8]
 810bfea:	492e      	ldr	r1, [pc, #184]	; (810c0a4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x33c>)
 810bfec:	4618      	mov	r0, r3
 810bfee:	f7ff fe88 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810bff2:	4603      	mov	r3, r0
 810bff4:	2b00      	cmp	r3, #0
 810bff6:	d001      	beq.n	810bffc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810bff8:	2301      	movs	r3, #1
 810bffa:	e000      	b.n	810bffe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x296>
 810bffc:	2300      	movs	r3, #0
 810bffe:	2b00      	cmp	r3, #0
 810c000:	f000 8098 	beq.w	810c134 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3cc>
=======
 810ab0e:	68bb      	ldr	r3, [r7, #8]
 810ab10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ab14:	2b00      	cmp	r3, #0
 810ab16:	d009      	beq.n	810ab2c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810ab18:	68bb      	ldr	r3, [r7, #8]
 810ab1a:	492e      	ldr	r1, [pc, #184]	; (810abd4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x33c>)
 810ab1c:	4618      	mov	r0, r3
 810ab1e:	f7ff fe89 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810ab22:	4603      	mov	r3, r0
 810ab24:	2b00      	cmp	r3, #0
 810ab26:	d001      	beq.n	810ab2c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810ab28:	2301      	movs	r3, #1
 810ab2a:	e000      	b.n	810ab2e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x296>
 810ab2c:	2300      	movs	r3, #0
 810ab2e:	2b00      	cmp	r3, #0
 810ab30:	f000 8098 	beq.w	810ac64 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3cc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			if(EQUALS(1, "enable") && cmd->num_components >= 3) {
<<<<<<< HEAD
 810c004:	68bb      	ldr	r3, [r7, #8]
 810c006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c00a:	2b01      	cmp	r3, #1
 810c00c:	d94c      	bls.n	810c0a8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c00e:	68bb      	ldr	r3, [r7, #8]
 810c010:	3308      	adds	r3, #8
 810c012:	4917      	ldr	r1, [pc, #92]	; (810c070 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810c014:	4618      	mov	r0, r3
 810c016:	f7ff fe74 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810c01a:	4603      	mov	r3, r0
 810c01c:	2b00      	cmp	r3, #0
 810c01e:	d043      	beq.n	810c0a8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c020:	68bb      	ldr	r3, [r7, #8]
 810c022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c026:	2b02      	cmp	r3, #2
 810c028:	d93e      	bls.n	810c0a8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c02a:	2301      	movs	r3, #1
 810c02c:	e03d      	b.n	810c0aa <_ZN8Terminal7executeEP12ShellCommandP7Console+0x342>
 810c02e:	bf00      	nop
 810c030:	0811426c 	.word	0x0811426c
 810c034:	08114274 	.word	0x08114274
 810c038:	0811429c 	.word	0x0811429c
 810c03c:	081142bc 	.word	0x081142bc
 810c040:	081142dc 	.word	0x081142dc
 810c044:	08114310 	.word	0x08114310
 810c048:	08114348 	.word	0x08114348
 810c04c:	08114380 	.word	0x08114380
 810c050:	081143b4 	.word	0x081143b4
 810c054:	081143bc 	.word	0x081143bc
 810c058:	081143f4 	.word	0x081143f4
 810c05c:	081143fc 	.word	0x081143fc
 810c060:	08114404 	.word	0x08114404
 810c064:	0811440c 	.word	0x0811440c
 810c068:	08114414 	.word	0x08114414
 810c06c:	08114420 	.word	0x08114420
 810c070:	0811442c 	.word	0x0811442c
 810c074:	100406e8 	.word	0x100406e8
 810c078:	08114434 	.word	0x08114434
 810c07c:	0811443c 	.word	0x0811443c
 810c080:	08114458 	.word	0x08114458
 810c084:	08114460 	.word	0x08114460
 810c088:	0811447c 	.word	0x0811447c
 810c08c:	081144a8 	.word	0x081144a8
 810c090:	081144b0 	.word	0x081144b0
 810c094:	081144b4 	.word	0x081144b4
 810c098:	081144d0 	.word	0x081144d0
 810c09c:	081144d4 	.word	0x081144d4
 810c0a0:	081144f0 	.word	0x081144f0
 810c0a4:	08114510 	.word	0x08114510
 810c0a8:	2300      	movs	r3, #0
 810c0aa:	2b00      	cmp	r3, #0
 810c0ac:	d020      	beq.n	810c0f0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x388>
=======
 810ab34:	68bb      	ldr	r3, [r7, #8]
 810ab36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ab3a:	2b01      	cmp	r3, #1
 810ab3c:	d94c      	bls.n	810abd8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810ab3e:	68bb      	ldr	r3, [r7, #8]
 810ab40:	3308      	adds	r3, #8
 810ab42:	4917      	ldr	r1, [pc, #92]	; (810aba0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810ab44:	4618      	mov	r0, r3
 810ab46:	f7ff fe75 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810ab4a:	4603      	mov	r3, r0
 810ab4c:	2b00      	cmp	r3, #0
 810ab4e:	d043      	beq.n	810abd8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810ab50:	68bb      	ldr	r3, [r7, #8]
 810ab52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ab56:	2b02      	cmp	r3, #2
 810ab58:	d93e      	bls.n	810abd8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810ab5a:	2301      	movs	r3, #1
 810ab5c:	e03d      	b.n	810abda <_ZN8Terminal7executeEP12ShellCommandP7Console+0x342>
 810ab5e:	bf00      	nop
 810ab60:	0811055c 	.word	0x0811055c
 810ab64:	08110564 	.word	0x08110564
 810ab68:	0811058c 	.word	0x0811058c
 810ab6c:	081105ac 	.word	0x081105ac
 810ab70:	081105cc 	.word	0x081105cc
 810ab74:	08110600 	.word	0x08110600
 810ab78:	08110638 	.word	0x08110638
 810ab7c:	08110670 	.word	0x08110670
 810ab80:	081106a4 	.word	0x081106a4
 810ab84:	081106ac 	.word	0x081106ac
 810ab88:	081106e4 	.word	0x081106e4
 810ab8c:	081106ec 	.word	0x081106ec
 810ab90:	081106f4 	.word	0x081106f4
 810ab94:	081106fc 	.word	0x081106fc
 810ab98:	08110704 	.word	0x08110704
 810ab9c:	08110710 	.word	0x08110710
 810aba0:	0811071c 	.word	0x0811071c
 810aba4:	100042d8 	.word	0x100042d8
 810aba8:	08110724 	.word	0x08110724
 810abac:	0811072c 	.word	0x0811072c
 810abb0:	08110748 	.word	0x08110748
 810abb4:	08110750 	.word	0x08110750
 810abb8:	0811076c 	.word	0x0811076c
 810abbc:	08110798 	.word	0x08110798
 810abc0:	081107a0 	.word	0x081107a0
 810abc4:	081107a4 	.word	0x081107a4
 810abc8:	081107c0 	.word	0x081107c0
 810abcc:	081107c4 	.word	0x081107c4
 810abd0:	081107e0 	.word	0x081107e0
 810abd4:	08110800 	.word	0x08110800
 810abd8:	2300      	movs	r3, #0
 810abda:	2b00      	cmp	r3, #0
 810abdc:	d020      	beq.n	810ac20 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x388>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				uint8_t location = 0;
<<<<<<< HEAD
 810c0ae:	2300      	movs	r3, #0
 810c0b0:	75fb      	strb	r3, [r7, #23]
=======
 810abde:	2300      	movs	r3, #0
 810abe0:	75fb      	strb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				uint8_t refresh_rate = 1;
<<<<<<< HEAD
 810c0b2:	2301      	movs	r3, #1
 810c0b4:	75bb      	strb	r3, [r7, #22]
=======
 810abe2:	2301      	movs	r3, #1
 810abe4:	75bb      	strb	r3, [r7, #22]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				if(cmd->num_components > 3) {
<<<<<<< HEAD
 810c0b6:	68bb      	ldr	r3, [r7, #8]
 810c0b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c0bc:	2b03      	cmp	r3, #3
 810c0be:	d906      	bls.n	810c0ce <_ZN8Terminal7executeEP12ShellCommandP7Console+0x366>
=======
 810abe6:	68bb      	ldr	r3, [r7, #8]
 810abe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810abec:	2b03      	cmp	r3, #3
 810abee:	d906      	bls.n	810abfe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x366>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					location = atoi(cmd->components[3].component);
<<<<<<< HEAD
 810c0c0:	68bb      	ldr	r3, [r7, #8]
 810c0c2:	699b      	ldr	r3, [r3, #24]
 810c0c4:	4618      	mov	r0, r3
 810c0c6:	f005 f821 	bl	811110c <atoi>
 810c0ca:	4603      	mov	r3, r0
 810c0cc:	75fb      	strb	r3, [r7, #23]
=======
 810abf0:	68bb      	ldr	r3, [r7, #8]
 810abf2:	699b      	ldr	r3, [r3, #24]
 810abf4:	4618      	mov	r0, r3
 810abf6:	f003 fa91 	bl	810e11c <atoi>
 810abfa:	4603      	mov	r3, r0
 810abfc:	75fb      	strb	r3, [r7, #23]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				if(cmd->num_components > 4) {
<<<<<<< HEAD
 810c0ce:	68bb      	ldr	r3, [r7, #8]
 810c0d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c0d4:	2b04      	cmp	r3, #4
 810c0d6:	d906      	bls.n	810c0e6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x37e>
=======
 810abfe:	68bb      	ldr	r3, [r7, #8]
 810ac00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ac04:	2b04      	cmp	r3, #4
 810ac06:	d906      	bls.n	810ac16 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x37e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					refresh_rate = atoi(cmd->components[4].component);
<<<<<<< HEAD
 810c0d8:	68bb      	ldr	r3, [r7, #8]
 810c0da:	6a1b      	ldr	r3, [r3, #32]
 810c0dc:	4618      	mov	r0, r3
 810c0de:	f005 f815 	bl	811110c <atoi>
 810c0e2:	4603      	mov	r3, r0
 810c0e4:	75bb      	strb	r3, [r7, #22]
=======
 810ac08:	68bb      	ldr	r3, [r7, #8]
 810ac0a:	6a1b      	ldr	r3, [r3, #32]
 810ac0c:	4618      	mov	r0, r3
 810ac0e:	f003 fa85 	bl	810e11c <atoi>
 810ac12:	4603      	mov	r3, r0
 810ac14:	75bb      	strb	r3, [r7, #22]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("\x1b[2J");
<<<<<<< HEAD
 810c0e6:	491a      	ldr	r1, [pc, #104]	; (810c150 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810c0e8:	6878      	ldr	r0, [r7, #4]
 810c0ea:	f7ff fb8c 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810ac16:	491a      	ldr	r1, [pc, #104]	; (810ac80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810ac18:	6878      	ldr	r0, [r7, #4]
 810ac1a:	f7ff fbd2 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810c0ee:	e02a      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810ac1e:	e02a      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			} else if(EQUALS(1, "disable") && cmd->num_components == 3) {
<<<<<<< HEAD
 810c0f0:	68bb      	ldr	r3, [r7, #8]
 810c0f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c0f6:	2b01      	cmp	r3, #1
 810c0f8:	d90f      	bls.n	810c11a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c0fa:	68bb      	ldr	r3, [r7, #8]
 810c0fc:	3308      	adds	r3, #8
 810c0fe:	4915      	ldr	r1, [pc, #84]	; (810c154 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3ec>)
 810c100:	4618      	mov	r0, r3
 810c102:	f7ff fdfe 	bl	810bd02 <_ZN16CommandComponent7matchesEPKc>
 810c106:	4603      	mov	r3, r0
 810c108:	2b00      	cmp	r3, #0
 810c10a:	d006      	beq.n	810c11a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c10c:	68bb      	ldr	r3, [r7, #8]
 810c10e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c112:	2b03      	cmp	r3, #3
 810c114:	d101      	bne.n	810c11a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c116:	2301      	movs	r3, #1
 810c118:	e000      	b.n	810c11c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b4>
 810c11a:	2300      	movs	r3, #0
 810c11c:	2b00      	cmp	r3, #0
 810c11e:	d004      	beq.n	810c12a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3c2>
=======
 810ac20:	68bb      	ldr	r3, [r7, #8]
 810ac22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ac26:	2b01      	cmp	r3, #1
 810ac28:	d90f      	bls.n	810ac4a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ac2a:	68bb      	ldr	r3, [r7, #8]
 810ac2c:	3308      	adds	r3, #8
 810ac2e:	4915      	ldr	r1, [pc, #84]	; (810ac84 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3ec>)
 810ac30:	4618      	mov	r0, r3
 810ac32:	f7ff fdff 	bl	810a834 <_ZN16CommandComponent7matchesEPKc>
 810ac36:	4603      	mov	r3, r0
 810ac38:	2b00      	cmp	r3, #0
 810ac3a:	d006      	beq.n	810ac4a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ac3c:	68bb      	ldr	r3, [r7, #8]
 810ac3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ac42:	2b03      	cmp	r3, #3
 810ac44:	d101      	bne.n	810ac4a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ac46:	2301      	movs	r3, #1
 810ac48:	e000      	b.n	810ac4c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b4>
 810ac4a:	2300      	movs	r3, #0
 810ac4c:	2b00      	cmp	r3, #0
 810ac4e:	d004      	beq.n	810ac5a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3c2>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("\x1b[2J");
<<<<<<< HEAD
 810c120:	490b      	ldr	r1, [pc, #44]	; (810c150 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810c122:	6878      	ldr	r0, [r7, #4]
 810c124:	f7ff fb6f 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810ac50:	490b      	ldr	r1, [pc, #44]	; (810ac80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810ac52:	6878      	ldr	r0, [r7, #4]
 810ac54:	f7ff fbb5 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810c128:	e00d      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810ac58:	e00d      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				feedback->printf("> Usage: monitor { enable | disable } { sensor | state | kalman | flash | can | telemetry | airbrakes } [location] [refresh rate; default: 10]\r\n");
<<<<<<< HEAD
 810c12a:	490b      	ldr	r1, [pc, #44]	; (810c158 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f0>)
 810c12c:	6878      	ldr	r0, [r7, #4]
 810c12e:	f7ff fb6a 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810ac5a:	490b      	ldr	r1, [pc, #44]	; (810ac88 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f0>)
 810ac5c:	6878      	ldr	r0, [r7, #4]
 810ac5e:	f7ff fbb0 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810c132:	e008      	b.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
=======
 810ac62:	e008      	b.n	810ac76 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
<<<<<<< HEAD
 810c134:	68bb      	ldr	r3, [r7, #8]
 810c136:	791b      	ldrb	r3, [r3, #4]
 810c138:	461a      	mov	r2, r3
 810c13a:	68bb      	ldr	r3, [r7, #8]
 810c13c:	681b      	ldr	r3, [r3, #0]
 810c13e:	4907      	ldr	r1, [pc, #28]	; (810c15c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f4>)
 810c140:	6878      	ldr	r0, [r7, #4]
 810c142:	f7ff fb60 	bl	810b806 <_ZN7Console6printfEPKcz>
=======
 810ac64:	68bb      	ldr	r3, [r7, #8]
 810ac66:	791b      	ldrb	r3, [r3, #4]
 810ac68:	461a      	mov	r2, r3
 810ac6a:	68bb      	ldr	r3, [r7, #8]
 810ac6c:	681b      	ldr	r3, [r3, #0]
 810ac6e:	4907      	ldr	r1, [pc, #28]	; (810ac8c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f4>)
 810ac70:	6878      	ldr	r0, [r7, #4]
 810ac72:	f7ff fba6 	bl	810a3c2 <_ZN7Console6printfEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810c146:	bf00      	nop
 810c148:	3718      	adds	r7, #24
 810c14a:	46bd      	mov	sp, r7
 810c14c:	bd80      	pop	{r7, pc}
 810c14e:	bf00      	nop
 810c150:	08114434 	.word	0x08114434
 810c154:	08114458 	.word	0x08114458
 810c158:	08114518 	.word	0x08114518
 810c15c:	081145ac 	.word	0x081145ac
=======
 810ac76:	bf00      	nop
 810ac78:	3718      	adds	r7, #24
 810ac7a:	46bd      	mov	sp, r7
 810ac7c:	bd80      	pop	{r7, pc}
 810ac7e:	bf00      	nop
 810ac80:	08110724 	.word	0x08110724
 810ac84:	08110748 	.word	0x08110748
 810ac88:	08110808 	.word	0x08110808
 810ac8c:	0811089c 	.word	0x0811089c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810c160 <_Znwj>:
=======
0810ac90 <_Znwj>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
<<<<<<< HEAD
 810c160:	b580      	push	{r7, lr}
 810c162:	b082      	sub	sp, #8
 810c164:	af00      	add	r7, sp, #0
 810c166:	6078      	str	r0, [r7, #4]
=======
 810ac90:	b580      	push	{r7, lr}
 810ac92:	b082      	sub	sp, #8
 810ac94:	af00      	add	r7, sp, #0
 810ac96:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    return pvPortMalloc(size);
<<<<<<< HEAD
 810c168:	6878      	ldr	r0, [r7, #4]
 810c16a:	f7fd f94f 	bl	810940c <pvPortMalloc>
 810c16e:	4603      	mov	r3, r0
=======
 810ac98:	6878      	ldr	r0, [r7, #4]
 810ac9a:	f7fd fa55 	bl	8108148 <pvPortMalloc>
 810ac9e:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810c170:	4618      	mov	r0, r3
 810c172:	3708      	adds	r7, #8
 810c174:	46bd      	mov	sp, r7
 810c176:	bd80      	pop	{r7, pc}
=======
 810aca0:	4618      	mov	r0, r3
 810aca2:	3708      	adds	r7, #8
 810aca4:	46bd      	mov	sp, r7
 810aca6:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810c178 <_ZdlPv>:
=======
0810aca8 <_ZdlPv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
<<<<<<< HEAD
 810c178:	b580      	push	{r7, lr}
 810c17a:	b082      	sub	sp, #8
 810c17c:	af00      	add	r7, sp, #0
 810c17e:	6078      	str	r0, [r7, #4]
=======
 810aca8:	b580      	push	{r7, lr}
 810acaa:	b082      	sub	sp, #8
 810acac:	af00      	add	r7, sp, #0
 810acae:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    vPortFree(ptr);
<<<<<<< HEAD
 810c180:	6878      	ldr	r0, [r7, #4]
 810c182:	f7fd fa07 	bl	8109594 <vPortFree>
=======
 810acb0:	6878      	ldr	r0, [r7, #4]
 810acb2:	f7fd fb0b 	bl	81082cc <vPortFree>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810c186:	bf00      	nop
 810c188:	3708      	adds	r7, #8
 810c18a:	46bd      	mov	sp, r7
 810c18c:	bd80      	pop	{r7, pc}

0810c18e <_ZN7ADS111313ads1113_delayEi>:

#include <Libraries/ADS1113/ads1113.h>

#define MAX_VALUE 32768

void ADS1113::ads1113_delay(int time){
 810c18e:	b580      	push	{r7, lr}
 810c190:	b082      	sub	sp, #8
 810c192:	af00      	add	r7, sp, #0
 810c194:	6078      	str	r0, [r7, #4]
 810c196:	6039      	str	r1, [r7, #0]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810c198:	683b      	ldr	r3, [r7, #0]
 810c19a:	4618      	mov	r0, r3
 810c19c:	f7fd f8f0 	bl	8109380 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810c1a0:	bf00      	nop
 810c1a2:	3708      	adds	r7, #8
 810c1a4:	46bd      	mov	sp, r7
 810c1a6:	bd80      	pop	{r7, pc}

0810c1a8 <_ZN7ADS1113C1EP19__I2C_HandleTypeDefhf>:

ADS1113::ADS1113(I2C_HandleTypeDef *hi2c, uint8_t i2cAddress, float multiplier):
 810c1a8:	b480      	push	{r7}
 810c1aa:	b085      	sub	sp, #20
 810c1ac:	af00      	add	r7, sp, #0
 810c1ae:	60f8      	str	r0, [r7, #12]
 810c1b0:	60b9      	str	r1, [r7, #8]
 810c1b2:	4613      	mov	r3, r2
 810c1b4:	ed87 0a00 	vstr	s0, [r7]
 810c1b8:	71fb      	strb	r3, [r7, #7]
	_i2cAddress(i2cAddress),
	_conversionDelay(ADS1113_CONVERSIONDELAY),
	_bitShift(0),
	_ads1113_i2c_port(hi2c),
	_multiplier(multiplier / (MAX_VALUE >> _bitShift))
 810c1ba:	68fb      	ldr	r3, [r7, #12]
 810c1bc:	79fa      	ldrb	r2, [r7, #7]
 810c1be:	701a      	strb	r2, [r3, #0]
 810c1c0:	68fb      	ldr	r3, [r7, #12]
 810c1c2:	2209      	movs	r2, #9
 810c1c4:	705a      	strb	r2, [r3, #1]
 810c1c6:	68fb      	ldr	r3, [r7, #12]
 810c1c8:	2200      	movs	r2, #0
 810c1ca:	709a      	strb	r2, [r3, #2]
 810c1cc:	68fb      	ldr	r3, [r7, #12]
 810c1ce:	68ba      	ldr	r2, [r7, #8]
 810c1d0:	605a      	str	r2, [r3, #4]
 810c1d2:	68fb      	ldr	r3, [r7, #12]
 810c1d4:	789b      	ldrb	r3, [r3, #2]
 810c1d6:	461a      	mov	r2, r3
 810c1d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c1dc:	4113      	asrs	r3, r2
 810c1de:	ee07 3a90 	vmov	s15, r3
 810c1e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810c1e6:	edd7 6a00 	vldr	s13, [r7]
 810c1ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c1ee:	68fb      	ldr	r3, [r7, #12]
 810c1f0:	edc3 7a02 	vstr	s15, [r3, #8]
{}
 810c1f4:	68fb      	ldr	r3, [r7, #12]
 810c1f6:	4618      	mov	r0, r3
 810c1f8:	3714      	adds	r7, #20
 810c1fa:	46bd      	mov	sp, r7
 810c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c200:	4770      	bx	lr

0810c202 <_ZN7ADS11135beginEv>:

bool ADS1113::begin(){
 810c202:	b580      	push	{r7, lr}
 810c204:	b082      	sub	sp, #8
 810c206:	af00      	add	r7, sp, #0
 810c208:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_Init(_ads1113_i2c_port) == HAL_OK){
 810c20a:	687b      	ldr	r3, [r7, #4]
 810c20c:	685b      	ldr	r3, [r3, #4]
 810c20e:	4618      	mov	r0, r3
 810c210:	f7f8 ffec 	bl	81051ec <HAL_I2C_Init>
 810c214:	4603      	mov	r3, r0
 810c216:	2b00      	cmp	r3, #0
 810c218:	bf0c      	ite	eq
 810c21a:	2301      	moveq	r3, #1
 810c21c:	2300      	movne	r3, #0
 810c21e:	b2db      	uxtb	r3, r3
 810c220:	2b00      	cmp	r3, #0
 810c222:	d014      	beq.n	810c24e <_ZN7ADS11135beginEv+0x4c>
		if(HAL_I2C_IsDeviceReady(_ads1113_i2c_port, (_i2cAddress<<1), 10, 100) == HAL_OK)
 810c224:	687b      	ldr	r3, [r7, #4]
 810c226:	6858      	ldr	r0, [r3, #4]
 810c228:	687b      	ldr	r3, [r7, #4]
 810c22a:	781b      	ldrb	r3, [r3, #0]
 810c22c:	b29b      	uxth	r3, r3
 810c22e:	005b      	lsls	r3, r3, #1
 810c230:	b299      	uxth	r1, r3
 810c232:	2364      	movs	r3, #100	; 0x64
 810c234:	220a      	movs	r2, #10
 810c236:	f7f9 fcaf 	bl	8105b98 <HAL_I2C_IsDeviceReady>
 810c23a:	4603      	mov	r3, r0
 810c23c:	2b00      	cmp	r3, #0
 810c23e:	bf0c      	ite	eq
 810c240:	2301      	moveq	r3, #1
 810c242:	2300      	movne	r3, #0
 810c244:	b2db      	uxtb	r3, r3
 810c246:	2b00      	cmp	r3, #0
 810c248:	d001      	beq.n	810c24e <_ZN7ADS11135beginEv+0x4c>
			return true;
 810c24a:	2301      	movs	r3, #1
 810c24c:	e000      	b.n	810c250 <_ZN7ADS11135beginEv+0x4e>
	}
	return false;
 810c24e:	2300      	movs	r3, #0
}
 810c250:	4618      	mov	r0, r3
 810c252:	3708      	adds	r7, #8
 810c254:	46bd      	mov	sp, r7
 810c256:	bd80      	pop	{r7, pc}

0810c258 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht>:

/* Write to register in ADS1113 directly */
static void writeRegister(I2C_HandleTypeDef* i2c_port, uint16_t i2cAddress, uint8_t reg, uint16_t value) {
 810c258:	b580      	push	{r7, lr}
 810c25a:	b08a      	sub	sp, #40	; 0x28
 810c25c:	af04      	add	r7, sp, #16
 810c25e:	60f8      	str	r0, [r7, #12]
 810c260:	4608      	mov	r0, r1
 810c262:	4611      	mov	r1, r2
 810c264:	461a      	mov	r2, r3
 810c266:	4603      	mov	r3, r0
 810c268:	817b      	strh	r3, [r7, #10]
 810c26a:	460b      	mov	r3, r1
 810c26c:	727b      	strb	r3, [r7, #9]
 810c26e:	4613      	mov	r3, r2
 810c270:	80fb      	strh	r3, [r7, #6]
	uint8_t pData[2];
	pData[0] = (value >> 8);
 810c272:	88fb      	ldrh	r3, [r7, #6]
 810c274:	121b      	asrs	r3, r3, #8
 810c276:	b2db      	uxtb	r3, r3
 810c278:	753b      	strb	r3, [r7, #20]
	pData[1] = value & 0xff;
 810c27a:	88fb      	ldrh	r3, [r7, #6]
 810c27c:	b2db      	uxtb	r3, r3
 810c27e:	757b      	strb	r3, [r7, #21]

	while(HAL_I2C_IsDeviceReady(i2c_port, i2cAddress << 1, 10, 10) != HAL_OK);
 810c280:	897b      	ldrh	r3, [r7, #10]
 810c282:	005b      	lsls	r3, r3, #1
 810c284:	b299      	uxth	r1, r3
 810c286:	230a      	movs	r3, #10
 810c288:	220a      	movs	r2, #10
 810c28a:	68f8      	ldr	r0, [r7, #12]
 810c28c:	f7f9 fc84 	bl	8105b98 <HAL_I2C_IsDeviceReady>
 810c290:	4603      	mov	r3, r0
 810c292:	2b00      	cmp	r3, #0
 810c294:	bf14      	ite	ne
 810c296:	2301      	movne	r3, #1
 810c298:	2300      	moveq	r3, #0
 810c29a:	b2db      	uxtb	r3, r3
 810c29c:	2b00      	cmp	r3, #0
 810c29e:	d000      	beq.n	810c2a2 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht+0x4a>
 810c2a0:	e7ee      	b.n	810c280 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht+0x28>
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(i2c_port, i2cAddress << 1, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10);
 810c2a2:	897b      	ldrh	r3, [r7, #10]
 810c2a4:	005b      	lsls	r3, r3, #1
 810c2a6:	b299      	uxth	r1, r3
 810c2a8:	7a7b      	ldrb	r3, [r7, #9]
 810c2aa:	b29a      	uxth	r2, r3
 810c2ac:	230a      	movs	r3, #10
 810c2ae:	9302      	str	r3, [sp, #8]
 810c2b0:	2302      	movs	r3, #2
 810c2b2:	9301      	str	r3, [sp, #4]
 810c2b4:	f107 0314 	add.w	r3, r7, #20
 810c2b8:	9300      	str	r3, [sp, #0]
 810c2ba:	2301      	movs	r3, #1
 810c2bc:	68f8      	ldr	r0, [r7, #12]
 810c2be:	f7f9 fa3d 	bl	810573c <HAL_I2C_Mem_Write>
 810c2c2:	4603      	mov	r3, r0
 810c2c4:	75fb      	strb	r3, [r7, #23]
}
 810c2c6:	bf00      	nop
 810c2c8:	3718      	adds	r7, #24
 810c2ca:	46bd      	mov	sp, r7
 810c2cc:	bd80      	pop	{r7, pc}

0810c2ce <_ZL12readRegisterP19__I2C_HandleTypeDefth>:

/* Read from register in ADS1113 directly */
static uint16_t readRegister(I2C_HandleTypeDef* i2c_port, uint16_t i2cAddress, uint8_t reg) {
 810c2ce:	b580      	push	{r7, lr}
 810c2d0:	b088      	sub	sp, #32
 810c2d2:	af04      	add	r7, sp, #16
 810c2d4:	6078      	str	r0, [r7, #4]
 810c2d6:	460b      	mov	r3, r1
 810c2d8:	807b      	strh	r3, [r7, #2]
 810c2da:	4613      	mov	r3, r2
 810c2dc:	707b      	strb	r3, [r7, #1]
	uint8_t pData[2];

	while(HAL_I2C_IsDeviceReady(i2c_port, i2cAddress << 1, 10, 10) != HAL_OK);
 810c2de:	887b      	ldrh	r3, [r7, #2]
 810c2e0:	005b      	lsls	r3, r3, #1
 810c2e2:	b299      	uxth	r1, r3
 810c2e4:	230a      	movs	r3, #10
 810c2e6:	220a      	movs	r2, #10
 810c2e8:	6878      	ldr	r0, [r7, #4]
 810c2ea:	f7f9 fc55 	bl	8105b98 <HAL_I2C_IsDeviceReady>
 810c2ee:	4603      	mov	r3, r0
 810c2f0:	2b00      	cmp	r3, #0
 810c2f2:	bf14      	ite	ne
 810c2f4:	2301      	movne	r3, #1
 810c2f6:	2300      	moveq	r3, #0
 810c2f8:	b2db      	uxtb	r3, r3
 810c2fa:	2b00      	cmp	r3, #0
 810c2fc:	d000      	beq.n	810c300 <_ZL12readRegisterP19__I2C_HandleTypeDefth+0x32>
 810c2fe:	e7ee      	b.n	810c2de <_ZL12readRegisterP19__I2C_HandleTypeDefth+0x10>
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(i2c_port, i2cAddress << 1, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10);
 810c300:	887b      	ldrh	r3, [r7, #2]
 810c302:	005b      	lsls	r3, r3, #1
 810c304:	b299      	uxth	r1, r3
 810c306:	787b      	ldrb	r3, [r7, #1]
 810c308:	b29a      	uxth	r2, r3
 810c30a:	230a      	movs	r3, #10
 810c30c:	9302      	str	r3, [sp, #8]
 810c30e:	2302      	movs	r3, #2
 810c310:	9301      	str	r3, [sp, #4]
 810c312:	f107 0308 	add.w	r3, r7, #8
 810c316:	9300      	str	r3, [sp, #0]
 810c318:	2301      	movs	r3, #1
 810c31a:	6878      	ldr	r0, [r7, #4]
 810c31c:	f7f9 fb22 	bl	8105964 <HAL_I2C_Mem_Read>
 810c320:	4603      	mov	r3, r0
 810c322:	73fb      	strb	r3, [r7, #15]
	uint16_t regData = ((pData[0] << 8) | pData[1]);
 810c324:	7a3b      	ldrb	r3, [r7, #8]
 810c326:	021b      	lsls	r3, r3, #8
 810c328:	b21a      	sxth	r2, r3
 810c32a:	7a7b      	ldrb	r3, [r7, #9]
 810c32c:	b21b      	sxth	r3, r3
 810c32e:	4313      	orrs	r3, r2
 810c330:	b21b      	sxth	r3, r3
 810c332:	81bb      	strh	r3, [r7, #12]
	return regData; //CHECK HERE IF THERE ARE ERRORS : inverse pData[0] and pData[1]
 810c334:	89bb      	ldrh	r3, [r7, #12]
}
 810c336:	4618      	mov	r0, r3
 810c338:	3710      	adds	r7, #16
 810c33a:	46bd      	mov	sp, r7
 810c33c:	bd80      	pop	{r7, pc}

0810c33e <_ZN7ADS111319readADC_SingleEndedEt>:

uint16_t ADS1113::readADC_SingleEnded(uint16_t sampleRate) {
 810c33e:	b580      	push	{r7, lr}
 810c340:	b084      	sub	sp, #16
 810c342:	af00      	add	r7, sp, #0
 810c344:	6078      	str	r0, [r7, #4]
 810c346:	460b      	mov	r3, r1
 810c348:	807b      	strh	r3, [r7, #2]
  // Start with default values
  uint16_t config =
 810c34a:	887b      	ldrh	r3, [r7, #2]
 810c34c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 810c350:	f043 0301 	orr.w	r3, r3, #1
 810c354:	81fb      	strh	r3, [r7, #14]
      ADS1015_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
      sampleRate 					|   // 1600 samples per second (default)
      ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;
 810c356:	89fb      	ldrh	r3, [r7, #14]
 810c358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 810c35c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 810c360:	81fb      	strh	r3, [r7, #14]

  // Write config register to the ADC
  writeRegister(_ads1113_i2c_port, _i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 810c362:	687b      	ldr	r3, [r7, #4]
 810c364:	6858      	ldr	r0, [r3, #4]
 810c366:	687b      	ldr	r3, [r7, #4]
 810c368:	781b      	ldrb	r3, [r3, #0]
 810c36a:	b299      	uxth	r1, r3
 810c36c:	89fb      	ldrh	r3, [r7, #14]
 810c36e:	2201      	movs	r2, #1
 810c370:	f7ff ff72 	bl	810c258 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht>

  // Wait for the conversion to complete
  ads1113_delay(_conversionDelay);
 810c374:	687b      	ldr	r3, [r7, #4]
 810c376:	785b      	ldrb	r3, [r3, #1]
 810c378:	4619      	mov	r1, r3
 810c37a:	6878      	ldr	r0, [r7, #4]
 810c37c:	f7ff ff07 	bl	810c18e <_ZN7ADS111313ads1113_delayEi>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(_ads1113_i2c_port, _i2cAddress, ADS1015_REG_POINTER_CONVERT) >> _bitShift;
 810c380:	687b      	ldr	r3, [r7, #4]
 810c382:	6858      	ldr	r0, [r3, #4]
 810c384:	687b      	ldr	r3, [r7, #4]
 810c386:	781b      	ldrb	r3, [r3, #0]
 810c388:	b29b      	uxth	r3, r3
 810c38a:	2200      	movs	r2, #0
 810c38c:	4619      	mov	r1, r3
 810c38e:	f7ff ff9e 	bl	810c2ce <_ZL12readRegisterP19__I2C_HandleTypeDefth>
 810c392:	4603      	mov	r3, r0
 810c394:	461a      	mov	r2, r3
 810c396:	687b      	ldr	r3, [r7, #4]
 810c398:	789b      	ldrb	r3, [r3, #2]
 810c39a:	fa42 f303 	asr.w	r3, r2, r3
 810c39e:	b29b      	uxth	r3, r3
}
 810c3a0:	4618      	mov	r0, r3
 810c3a2:	3710      	adds	r7, #16
 810c3a4:	46bd      	mov	sp, r7
 810c3a6:	bd80      	pop	{r7, pc}

0810c3a8 <_ZN7ADS111313getMultiplierEv>:
		}
	return (int16_t)res;
	}
}

float ADS1113::getMultiplier(){
 810c3a8:	b480      	push	{r7}
 810c3aa:	b083      	sub	sp, #12
 810c3ac:	af00      	add	r7, sp, #0
 810c3ae:	6078      	str	r0, [r7, #4]
	return _multiplier;
 810c3b0:	687b      	ldr	r3, [r7, #4]
 810c3b2:	689b      	ldr	r3, [r3, #8]
 810c3b4:	ee07 3a90 	vmov	s15, r3
}
 810c3b8:	eeb0 0a67 	vmov.f32	s0, s15
 810c3bc:	370c      	adds	r7, #12
 810c3be:	46bd      	mov	sp, r7
 810c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3c4:	4770      	bx	lr

0810c3c6 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 810c3c6:	b480      	push	{r7}
 810c3c8:	b083      	sub	sp, #12
 810c3ca:	af00      	add	r7, sp, #0
 810c3cc:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 810c3ce:	687b      	ldr	r3, [r7, #4]
 810c3d0:	2203      	movs	r2, #3
 810c3d2:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 810c3d4:	687b      	ldr	r3, [r7, #4]
 810c3d6:	2200      	movs	r2, #0
 810c3d8:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 810c3da:	687b      	ldr	r3, [r7, #4]
 810c3dc:	2203      	movs	r2, #3
 810c3de:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 810c3e0:	687b      	ldr	r3, [r7, #4]
 810c3e2:	2203      	movs	r2, #3
 810c3e4:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 810c3e6:	687b      	ldr	r3, [r7, #4]
 810c3e8:	2203      	movs	r2, #3
 810c3ea:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 810c3ec:	687b      	ldr	r3, [r7, #4]
 810c3ee:	2203      	movs	r2, #3
 810c3f0:	715a      	strb	r2, [r3, #5]
}
 810c3f2:	bf00      	nop
 810c3f4:	370c      	adds	r7, #12
 810c3f6:	46bd      	mov	sp, r7
 810c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3fc:	4770      	bx	lr

0810c3fe <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 810c3fe:	b580      	push	{r7, lr}
 810c400:	b08a      	sub	sp, #40	; 0x28
 810c402:	af04      	add	r7, sp, #16
 810c404:	60f8      	str	r0, [r7, #12]
 810c406:	460b      	mov	r3, r1
 810c408:	607a      	str	r2, [r7, #4]
 810c40a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 810c40c:	68fb      	ldr	r3, [r7, #12]
 810c40e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c410:	005b      	lsls	r3, r3, #1
 810c412:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 100)
 810c414:	68fb      	ldr	r3, [r7, #12]
 810c416:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810c418:	7afb      	ldrb	r3, [r7, #11]
 810c41a:	b29a      	uxth	r2, r3
 810c41c:	8af9      	ldrh	r1, [r7, #22]
 810c41e:	2364      	movs	r3, #100	; 0x64
 810c420:	9302      	str	r3, [sp, #8]
 810c422:	2302      	movs	r3, #2
 810c424:	9301      	str	r3, [sp, #4]
 810c426:	f107 0314 	add.w	r3, r7, #20
 810c42a:	9300      	str	r3, [sp, #0]
 810c42c:	2301      	movs	r3, #1
 810c42e:	f7f9 fa99 	bl	8105964 <HAL_I2C_Mem_Read>
 810c432:	4603      	mov	r3, r0
 810c434:	2b00      	cmp	r3, #0
 810c436:	d10b      	bne.n	810c450 <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 810c438:	7d7b      	ldrb	r3, [r7, #21]
 810c43a:	021b      	lsls	r3, r3, #8
 810c43c:	b21a      	sxth	r2, r3
 810c43e:	7d3b      	ldrb	r3, [r7, #20]
 810c440:	b21b      	sxth	r3, r3
 810c442:	4313      	orrs	r3, r2
 810c444:	b21b      	sxth	r3, r3
 810c446:	b29a      	uxth	r2, r3
 810c448:	687b      	ldr	r3, [r7, #4]
 810c44a:	801a      	strh	r2, [r3, #0]
		return true;
 810c44c:	2301      	movs	r3, #1
 810c44e:	e000      	b.n	810c452 <read_register16+0x54>
	} else {
		return false;
 810c450:	2300      	movs	r3, #0
	}

}
 810c452:	4618      	mov	r0, r3
 810c454:	3718      	adds	r7, #24
 810c456:	46bd      	mov	sp, r7
 810c458:	bd80      	pop	{r7, pc}

0810c45a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 810c45a:	b590      	push	{r4, r7, lr}
 810c45c:	b08b      	sub	sp, #44	; 0x2c
 810c45e:	af04      	add	r7, sp, #16
 810c460:	60f8      	str	r0, [r7, #12]
 810c462:	607a      	str	r2, [r7, #4]
 810c464:	461a      	mov	r2, r3
 810c466:	460b      	mov	r3, r1
 810c468:	72fb      	strb	r3, [r7, #11]
 810c46a:	4613      	mov	r3, r2
 810c46c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 810c46e:	68fb      	ldr	r3, [r7, #12]
 810c470:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c472:	005b      	lsls	r3, r3, #1
 810c474:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 100) == HAL_OK) {
 810c476:	68fb      	ldr	r3, [r7, #12]
 810c478:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810c47a:	7afb      	ldrb	r3, [r7, #11]
 810c47c:	b29a      	uxth	r2, r3
 810c47e:	7abb      	ldrb	r3, [r7, #10]
 810c480:	b29b      	uxth	r3, r3
 810c482:	8af9      	ldrh	r1, [r7, #22]
 810c484:	2464      	movs	r4, #100	; 0x64
 810c486:	9402      	str	r4, [sp, #8]
 810c488:	9301      	str	r3, [sp, #4]
 810c48a:	687b      	ldr	r3, [r7, #4]
 810c48c:	9300      	str	r3, [sp, #0]
 810c48e:	2301      	movs	r3, #1
 810c490:	f7f9 fa68 	bl	8105964 <HAL_I2C_Mem_Read>
 810c494:	4603      	mov	r3, r0
 810c496:	2b00      	cmp	r3, #0
 810c498:	d101      	bne.n	810c49e <read_data+0x44>
		return 0;
 810c49a:	2300      	movs	r3, #0
 810c49c:	e000      	b.n	810c4a0 <read_data+0x46>
	} else {
		return 1;
 810c49e:	2301      	movs	r3, #1
	}

}
 810c4a0:	4618      	mov	r0, r3
 810c4a2:	371c      	adds	r7, #28
 810c4a4:	46bd      	mov	sp, r7
 810c4a6:	bd90      	pop	{r4, r7, pc}

0810c4a8 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 810c4a8:	b580      	push	{r7, lr}
 810c4aa:	b082      	sub	sp, #8
 810c4ac:	af00      	add	r7, sp, #0
 810c4ae:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 810c4b0:	687b      	ldr	r3, [r7, #4]
 810c4b2:	461a      	mov	r2, r3
 810c4b4:	2188      	movs	r1, #136	; 0x88
 810c4b6:	6878      	ldr	r0, [r7, #4]
 810c4b8:	f7ff ffa1 	bl	810c3fe <read_register16>
 810c4bc:	4603      	mov	r3, r0
 810c4be:	2b00      	cmp	r3, #0
 810c4c0:	d06f      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 810c4c2:	687b      	ldr	r3, [r7, #4]
 810c4c4:	3302      	adds	r3, #2
 810c4c6:	461a      	mov	r2, r3
 810c4c8:	218a      	movs	r1, #138	; 0x8a
 810c4ca:	6878      	ldr	r0, [r7, #4]
 810c4cc:	f7ff ff97 	bl	810c3fe <read_register16>
 810c4d0:	4603      	mov	r3, r0
 810c4d2:	2b00      	cmp	r3, #0
 810c4d4:	d065      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 810c4d6:	687b      	ldr	r3, [r7, #4]
 810c4d8:	3304      	adds	r3, #4
 810c4da:	461a      	mov	r2, r3
 810c4dc:	218c      	movs	r1, #140	; 0x8c
 810c4de:	6878      	ldr	r0, [r7, #4]
 810c4e0:	f7ff ff8d 	bl	810c3fe <read_register16>
 810c4e4:	4603      	mov	r3, r0
 810c4e6:	2b00      	cmp	r3, #0
 810c4e8:	d05b      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 810c4ea:	687b      	ldr	r3, [r7, #4]
 810c4ec:	3306      	adds	r3, #6
 810c4ee:	461a      	mov	r2, r3
 810c4f0:	218e      	movs	r1, #142	; 0x8e
 810c4f2:	6878      	ldr	r0, [r7, #4]
 810c4f4:	f7ff ff83 	bl	810c3fe <read_register16>
 810c4f8:	4603      	mov	r3, r0
 810c4fa:	2b00      	cmp	r3, #0
 810c4fc:	d051      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 810c4fe:	687b      	ldr	r3, [r7, #4]
 810c500:	3308      	adds	r3, #8
 810c502:	461a      	mov	r2, r3
 810c504:	2190      	movs	r1, #144	; 0x90
 810c506:	6878      	ldr	r0, [r7, #4]
 810c508:	f7ff ff79 	bl	810c3fe <read_register16>
 810c50c:	4603      	mov	r3, r0
 810c50e:	2b00      	cmp	r3, #0
 810c510:	d047      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 810c512:	687b      	ldr	r3, [r7, #4]
 810c514:	330a      	adds	r3, #10
 810c516:	461a      	mov	r2, r3
 810c518:	2192      	movs	r1, #146	; 0x92
 810c51a:	6878      	ldr	r0, [r7, #4]
 810c51c:	f7ff ff6f 	bl	810c3fe <read_register16>
 810c520:	4603      	mov	r3, r0
 810c522:	2b00      	cmp	r3, #0
 810c524:	d03d      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 810c526:	687b      	ldr	r3, [r7, #4]
 810c528:	330c      	adds	r3, #12
 810c52a:	461a      	mov	r2, r3
 810c52c:	2194      	movs	r1, #148	; 0x94
 810c52e:	6878      	ldr	r0, [r7, #4]
 810c530:	f7ff ff65 	bl	810c3fe <read_register16>
 810c534:	4603      	mov	r3, r0
 810c536:	2b00      	cmp	r3, #0
 810c538:	d033      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 810c53a:	687b      	ldr	r3, [r7, #4]
 810c53c:	330e      	adds	r3, #14
 810c53e:	461a      	mov	r2, r3
 810c540:	2196      	movs	r1, #150	; 0x96
 810c542:	6878      	ldr	r0, [r7, #4]
 810c544:	f7ff ff5b 	bl	810c3fe <read_register16>
 810c548:	4603      	mov	r3, r0
 810c54a:	2b00      	cmp	r3, #0
 810c54c:	d029      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 810c54e:	687b      	ldr	r3, [r7, #4]
 810c550:	3310      	adds	r3, #16
 810c552:	461a      	mov	r2, r3
 810c554:	2198      	movs	r1, #152	; 0x98
 810c556:	6878      	ldr	r0, [r7, #4]
 810c558:	f7ff ff51 	bl	810c3fe <read_register16>
 810c55c:	4603      	mov	r3, r0
 810c55e:	2b00      	cmp	r3, #0
 810c560:	d01f      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 810c562:	687b      	ldr	r3, [r7, #4]
 810c564:	3312      	adds	r3, #18
 810c566:	461a      	mov	r2, r3
 810c568:	219a      	movs	r1, #154	; 0x9a
 810c56a:	6878      	ldr	r0, [r7, #4]
 810c56c:	f7ff ff47 	bl	810c3fe <read_register16>
 810c570:	4603      	mov	r3, r0
 810c572:	2b00      	cmp	r3, #0
 810c574:	d015      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 810c576:	687b      	ldr	r3, [r7, #4]
 810c578:	3314      	adds	r3, #20
 810c57a:	461a      	mov	r2, r3
 810c57c:	219c      	movs	r1, #156	; 0x9c
 810c57e:	6878      	ldr	r0, [r7, #4]
 810c580:	f7ff ff3d 	bl	810c3fe <read_register16>
 810c584:	4603      	mov	r3, r0
 810c586:	2b00      	cmp	r3, #0
 810c588:	d00b      	beq.n	810c5a2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 810c58a:	687b      	ldr	r3, [r7, #4]
 810c58c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 810c58e:	461a      	mov	r2, r3
 810c590:	219e      	movs	r1, #158	; 0x9e
 810c592:	6878      	ldr	r0, [r7, #4]
 810c594:	f7ff ff33 	bl	810c3fe <read_register16>
 810c598:	4603      	mov	r3, r0
 810c59a:	2b00      	cmp	r3, #0
 810c59c:	d001      	beq.n	810c5a2 <read_calibration_data+0xfa>

		return true;
 810c59e:	2301      	movs	r3, #1
 810c5a0:	e000      	b.n	810c5a4 <read_calibration_data+0xfc>
	}

	return false;
 810c5a2:	2300      	movs	r3, #0
}
 810c5a4:	4618      	mov	r0, r3
 810c5a6:	3708      	adds	r7, #8
 810c5a8:	46bd      	mov	sp, r7
 810c5aa:	bd80      	pop	{r7, pc}

0810c5ac <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 810c5ac:	b580      	push	{r7, lr}
 810c5ae:	b084      	sub	sp, #16
 810c5b0:	af00      	add	r7, sp, #0
 810c5b2:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 810c5b4:	687b      	ldr	r3, [r7, #4]
 810c5b6:	f103 0218 	add.w	r2, r3, #24
 810c5ba:	2301      	movs	r3, #1
 810c5bc:	21a1      	movs	r1, #161	; 0xa1
 810c5be:	6878      	ldr	r0, [r7, #4]
 810c5c0:	f7ff ff4b 	bl	810c45a <read_data>
 810c5c4:	4603      	mov	r3, r0
 810c5c6:	2b00      	cmp	r3, #0
 810c5c8:	d14b      	bne.n	810c662 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 810c5ca:	687b      	ldr	r3, [r7, #4]
 810c5cc:	331a      	adds	r3, #26
 810c5ce:	461a      	mov	r2, r3
 810c5d0:	21e1      	movs	r1, #225	; 0xe1
 810c5d2:	6878      	ldr	r0, [r7, #4]
 810c5d4:	f7ff ff13 	bl	810c3fe <read_register16>
 810c5d8:	4603      	mov	r3, r0
 810c5da:	2b00      	cmp	r3, #0
 810c5dc:	d041      	beq.n	810c662 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 810c5de:	687b      	ldr	r3, [r7, #4]
 810c5e0:	f103 021c 	add.w	r2, r3, #28
 810c5e4:	2301      	movs	r3, #1
 810c5e6:	21e3      	movs	r1, #227	; 0xe3
 810c5e8:	6878      	ldr	r0, [r7, #4]
 810c5ea:	f7ff ff36 	bl	810c45a <read_data>
 810c5ee:	4603      	mov	r3, r0
 810c5f0:	2b00      	cmp	r3, #0
 810c5f2:	d136      	bne.n	810c662 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 810c5f4:	f107 030e 	add.w	r3, r7, #14
 810c5f8:	461a      	mov	r2, r3
 810c5fa:	21e4      	movs	r1, #228	; 0xe4
 810c5fc:	6878      	ldr	r0, [r7, #4]
 810c5fe:	f7ff fefe 	bl	810c3fe <read_register16>
 810c602:	4603      	mov	r3, r0
 810c604:	2b00      	cmp	r3, #0
 810c606:	d02c      	beq.n	810c662 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 810c608:	f107 030c 	add.w	r3, r7, #12
 810c60c:	461a      	mov	r2, r3
 810c60e:	21e5      	movs	r1, #229	; 0xe5
 810c610:	6878      	ldr	r0, [r7, #4]
 810c612:	f7ff fef4 	bl	810c3fe <read_register16>
 810c616:	4603      	mov	r3, r0
 810c618:	2b00      	cmp	r3, #0
 810c61a:	d022      	beq.n	810c662 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 810c61c:	687b      	ldr	r3, [r7, #4]
 810c61e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 810c622:	2301      	movs	r3, #1
 810c624:	21e7      	movs	r1, #231	; 0xe7
 810c626:	6878      	ldr	r0, [r7, #4]
 810c628:	f7ff ff17 	bl	810c45a <read_data>
 810c62c:	4603      	mov	r3, r0
 810c62e:	2b00      	cmp	r3, #0
 810c630:	d117      	bne.n	810c662 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 810c632:	89fb      	ldrh	r3, [r7, #14]
 810c634:	011b      	lsls	r3, r3, #4
 810c636:	b21b      	sxth	r3, r3
 810c638:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 810c63c:	b21a      	sxth	r2, r3
 810c63e:	89fb      	ldrh	r3, [r7, #14]
 810c640:	121b      	asrs	r3, r3, #8
 810c642:	b21b      	sxth	r3, r3
 810c644:	f003 030f 	and.w	r3, r3, #15
 810c648:	b21b      	sxth	r3, r3
 810c64a:	4313      	orrs	r3, r2
 810c64c:	b21a      	sxth	r2, r3
 810c64e:	687b      	ldr	r3, [r7, #4]
 810c650:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 810c652:	89bb      	ldrh	r3, [r7, #12]
 810c654:	091b      	lsrs	r3, r3, #4
 810c656:	b29b      	uxth	r3, r3
 810c658:	b21a      	sxth	r2, r3
 810c65a:	687b      	ldr	r3, [r7, #4]
 810c65c:	841a      	strh	r2, [r3, #32]

		return true;
 810c65e:	2301      	movs	r3, #1
 810c660:	e000      	b.n	810c664 <read_hum_calibration_data+0xb8>
	}

	return false;
 810c662:	2300      	movs	r3, #0
}
 810c664:	4618      	mov	r0, r3
 810c666:	3710      	adds	r7, #16
 810c668:	46bd      	mov	sp, r7
 810c66a:	bd80      	pop	{r7, pc}

0810c66c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 810c66c:	b580      	push	{r7, lr}
 810c66e:	b088      	sub	sp, #32
 810c670:	af04      	add	r7, sp, #16
 810c672:	6078      	str	r0, [r7, #4]
 810c674:	460b      	mov	r3, r1
 810c676:	70fb      	strb	r3, [r7, #3]
 810c678:	4613      	mov	r3, r2
 810c67a:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 810c67c:	687b      	ldr	r3, [r7, #4]
 810c67e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c680:	005b      	lsls	r3, r3, #1
 810c682:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 810c684:	687b      	ldr	r3, [r7, #4]
 810c686:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810c688:	78fb      	ldrb	r3, [r7, #3]
 810c68a:	b29a      	uxth	r2, r3
 810c68c:	89f9      	ldrh	r1, [r7, #14]
 810c68e:	f242 7310 	movw	r3, #10000	; 0x2710
 810c692:	9302      	str	r3, [sp, #8]
 810c694:	2301      	movs	r3, #1
 810c696:	9301      	str	r3, [sp, #4]
 810c698:	1cbb      	adds	r3, r7, #2
 810c69a:	9300      	str	r3, [sp, #0]
 810c69c:	2301      	movs	r3, #1
 810c69e:	f7f9 f84d 	bl	810573c <HAL_I2C_Mem_Write>
 810c6a2:	4603      	mov	r3, r0
 810c6a4:	2b00      	cmp	r3, #0
 810c6a6:	d101      	bne.n	810c6ac <write_register8+0x40>
		return false;
 810c6a8:	2300      	movs	r3, #0
 810c6aa:	e000      	b.n	810c6ae <write_register8+0x42>
	else
		return true;
 810c6ac:	2301      	movs	r3, #1
}
 810c6ae:	4618      	mov	r0, r3
 810c6b0:	3710      	adds	r7, #16
 810c6b2:	46bd      	mov	sp, r7
 810c6b4:	bd80      	pop	{r7, pc}

0810c6b6 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 810c6b6:	b580      	push	{r7, lr}
 810c6b8:	b084      	sub	sp, #16
 810c6ba:	af00      	add	r7, sp, #0
 810c6bc:	6078      	str	r0, [r7, #4]
 810c6be:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 810c6c0:	687b      	ldr	r3, [r7, #4]
 810c6c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c6c4:	2b76      	cmp	r3, #118	; 0x76
 810c6c6:	d005      	beq.n	810c6d4 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 810c6c8:	687b      	ldr	r3, [r7, #4]
 810c6ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c6cc:	2b77      	cmp	r3, #119	; 0x77
 810c6ce:	d001      	beq.n	810c6d4 <bmp280_init+0x1e>

		return false;
 810c6d0:	2300      	movs	r3, #0
 810c6d2:	e099      	b.n	810c808 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 810c6d4:	687b      	ldr	r3, [r7, #4]
 810c6d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 810c6da:	2301      	movs	r3, #1
 810c6dc:	21d0      	movs	r1, #208	; 0xd0
 810c6de:	6878      	ldr	r0, [r7, #4]
 810c6e0:	f7ff febb 	bl	810c45a <read_data>
 810c6e4:	4603      	mov	r3, r0
 810c6e6:	2b00      	cmp	r3, #0
 810c6e8:	d001      	beq.n	810c6ee <bmp280_init+0x38>
		return false;
 810c6ea:	2300      	movs	r3, #0
 810c6ec:	e08c      	b.n	810c808 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 810c6ee:	687b      	ldr	r3, [r7, #4]
 810c6f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c6f4:	2b58      	cmp	r3, #88	; 0x58
 810c6f6:	d006      	beq.n	810c706 <bmp280_init+0x50>
 810c6f8:	687b      	ldr	r3, [r7, #4]
 810c6fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c6fe:	2b60      	cmp	r3, #96	; 0x60
 810c700:	d001      	beq.n	810c706 <bmp280_init+0x50>

		return false;
 810c702:	2300      	movs	r3, #0
 810c704:	e080      	b.n	810c808 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 810c706:	22b6      	movs	r2, #182	; 0xb6
 810c708:	21e0      	movs	r1, #224	; 0xe0
 810c70a:	6878      	ldr	r0, [r7, #4]
 810c70c:	f7ff ffae 	bl	810c66c <write_register8>
 810c710:	4603      	mov	r3, r0
 810c712:	2b00      	cmp	r3, #0
 810c714:	d001      	beq.n	810c71a <bmp280_init+0x64>
		return false;
 810c716:	2300      	movs	r3, #0
 810c718:	e076      	b.n	810c808 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 810c71a:	f107 020c 	add.w	r2, r7, #12
 810c71e:	2301      	movs	r3, #1
 810c720:	21f3      	movs	r1, #243	; 0xf3
 810c722:	6878      	ldr	r0, [r7, #4]
 810c724:	f7ff fe99 	bl	810c45a <read_data>
 810c728:	4603      	mov	r3, r0
 810c72a:	2b00      	cmp	r3, #0
 810c72c:	d1f5      	bne.n	810c71a <bmp280_init+0x64>
				&& (status & 1) == 0)
 810c72e:	7b3b      	ldrb	r3, [r7, #12]
 810c730:	f003 0301 	and.w	r3, r3, #1
 810c734:	2b00      	cmp	r3, #0
 810c736:	d1f0      	bne.n	810c71a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 810c738:	6878      	ldr	r0, [r7, #4]
 810c73a:	f7ff feb5 	bl	810c4a8 <read_calibration_data>
 810c73e:	4603      	mov	r3, r0
 810c740:	f083 0301 	eor.w	r3, r3, #1
 810c744:	b2db      	uxtb	r3, r3
 810c746:	2b00      	cmp	r3, #0
 810c748:	d100      	bne.n	810c74c <bmp280_init+0x96>
 810c74a:	e001      	b.n	810c750 <bmp280_init+0x9a>
		return false;
 810c74c:	2300      	movs	r3, #0
 810c74e:	e05b      	b.n	810c808 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 810c750:	687b      	ldr	r3, [r7, #4]
 810c752:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c756:	2b60      	cmp	r3, #96	; 0x60
 810c758:	d10a      	bne.n	810c770 <bmp280_init+0xba>
 810c75a:	6878      	ldr	r0, [r7, #4]
 810c75c:	f7ff ff26 	bl	810c5ac <read_hum_calibration_data>
 810c760:	4603      	mov	r3, r0
 810c762:	f083 0301 	eor.w	r3, r3, #1
 810c766:	b2db      	uxtb	r3, r3
 810c768:	2b00      	cmp	r3, #0
 810c76a:	d001      	beq.n	810c770 <bmp280_init+0xba>
		return false;
 810c76c:	2300      	movs	r3, #0
 810c76e:	e04b      	b.n	810c808 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 810c770:	683b      	ldr	r3, [r7, #0]
 810c772:	795b      	ldrb	r3, [r3, #5]
 810c774:	015b      	lsls	r3, r3, #5
 810c776:	b25a      	sxtb	r2, r3
 810c778:	683b      	ldr	r3, [r7, #0]
 810c77a:	785b      	ldrb	r3, [r3, #1]
 810c77c:	009b      	lsls	r3, r3, #2
 810c77e:	b25b      	sxtb	r3, r3
 810c780:	4313      	orrs	r3, r2
 810c782:	b25b      	sxtb	r3, r3
 810c784:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 810c786:	7bfb      	ldrb	r3, [r7, #15]
 810c788:	461a      	mov	r2, r3
 810c78a:	21f5      	movs	r1, #245	; 0xf5
 810c78c:	6878      	ldr	r0, [r7, #4]
 810c78e:	f7ff ff6d 	bl	810c66c <write_register8>
 810c792:	4603      	mov	r3, r0
 810c794:	2b00      	cmp	r3, #0
 810c796:	d001      	beq.n	810c79c <bmp280_init+0xe6>
		return false;
 810c798:	2300      	movs	r3, #0
 810c79a:	e035      	b.n	810c808 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 810c79c:	683b      	ldr	r3, [r7, #0]
 810c79e:	781b      	ldrb	r3, [r3, #0]
 810c7a0:	2b01      	cmp	r3, #1
 810c7a2:	d102      	bne.n	810c7aa <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 810c7a4:	683b      	ldr	r3, [r7, #0]
 810c7a6:	2200      	movs	r2, #0
 810c7a8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 810c7aa:	683b      	ldr	r3, [r7, #0]
 810c7ac:	78db      	ldrb	r3, [r3, #3]
 810c7ae:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 810c7b0:	b25a      	sxtb	r2, r3
 810c7b2:	683b      	ldr	r3, [r7, #0]
 810c7b4:	789b      	ldrb	r3, [r3, #2]
 810c7b6:	009b      	lsls	r3, r3, #2
 810c7b8:	b25b      	sxtb	r3, r3
 810c7ba:	4313      	orrs	r3, r2
 810c7bc:	b25a      	sxtb	r2, r3
 810c7be:	683b      	ldr	r3, [r7, #0]
 810c7c0:	781b      	ldrb	r3, [r3, #0]
 810c7c2:	b25b      	sxtb	r3, r3
 810c7c4:	4313      	orrs	r3, r2
 810c7c6:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 810c7c8:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 810c7ca:	687b      	ldr	r3, [r7, #4]
 810c7cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c7d0:	2b60      	cmp	r3, #96	; 0x60
 810c7d2:	d10d      	bne.n	810c7f0 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 810c7d4:	683b      	ldr	r3, [r7, #0]
 810c7d6:	791b      	ldrb	r3, [r3, #4]
 810c7d8:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 810c7da:	7b7b      	ldrb	r3, [r7, #13]
 810c7dc:	461a      	mov	r2, r3
 810c7de:	21f2      	movs	r1, #242	; 0xf2
 810c7e0:	6878      	ldr	r0, [r7, #4]
 810c7e2:	f7ff ff43 	bl	810c66c <write_register8>
 810c7e6:	4603      	mov	r3, r0
 810c7e8:	2b00      	cmp	r3, #0
 810c7ea:	d001      	beq.n	810c7f0 <bmp280_init+0x13a>
			return false;
 810c7ec:	2300      	movs	r3, #0
 810c7ee:	e00b      	b.n	810c808 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 810c7f0:	7bbb      	ldrb	r3, [r7, #14]
 810c7f2:	461a      	mov	r2, r3
 810c7f4:	21f4      	movs	r1, #244	; 0xf4
 810c7f6:	6878      	ldr	r0, [r7, #4]
 810c7f8:	f7ff ff38 	bl	810c66c <write_register8>
 810c7fc:	4603      	mov	r3, r0
 810c7fe:	2b00      	cmp	r3, #0
 810c800:	d001      	beq.n	810c806 <bmp280_init+0x150>
		return false;
 810c802:	2300      	movs	r3, #0
 810c804:	e000      	b.n	810c808 <bmp280_init+0x152>
	}

	return true;
 810c806:	2301      	movs	r3, #1
}
 810c808:	4618      	mov	r0, r3
 810c80a:	3710      	adds	r7, #16
 810c80c:	46bd      	mov	sp, r7
 810c80e:	bd80      	pop	{r7, pc}

0810c810 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 810c810:	b480      	push	{r7}
 810c812:	b087      	sub	sp, #28
 810c814:	af00      	add	r7, sp, #0
 810c816:	60f8      	str	r0, [r7, #12]
 810c818:	60b9      	str	r1, [r7, #8]
 810c81a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810c81c:	68bb      	ldr	r3, [r7, #8]
 810c81e:	10da      	asrs	r2, r3, #3
 810c820:	68fb      	ldr	r3, [r7, #12]
 810c822:	881b      	ldrh	r3, [r3, #0]
 810c824:	005b      	lsls	r3, r3, #1
 810c826:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 810c828:	68fa      	ldr	r2, [r7, #12]
 810c82a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 810c82e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810c832:	12db      	asrs	r3, r3, #11
 810c834:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810c836:	68bb      	ldr	r3, [r7, #8]
 810c838:	111b      	asrs	r3, r3, #4
 810c83a:	68fa      	ldr	r2, [r7, #12]
 810c83c:	8812      	ldrh	r2, [r2, #0]
 810c83e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 810c840:	68ba      	ldr	r2, [r7, #8]
 810c842:	1112      	asrs	r2, r2, #4
 810c844:	68f9      	ldr	r1, [r7, #12]
 810c846:	8809      	ldrh	r1, [r1, #0]
 810c848:	1a52      	subs	r2, r2, r1
 810c84a:	fb02 f303 	mul.w	r3, r2, r3
 810c84e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 810c850:	68fa      	ldr	r2, [r7, #12]
 810c852:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 810c856:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810c85a:	139b      	asrs	r3, r3, #14
 810c85c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 810c85e:	697a      	ldr	r2, [r7, #20]
 810c860:	693b      	ldr	r3, [r7, #16]
 810c862:	441a      	add	r2, r3
 810c864:	687b      	ldr	r3, [r7, #4]
 810c866:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 810c868:	687b      	ldr	r3, [r7, #4]
 810c86a:	681a      	ldr	r2, [r3, #0]
 810c86c:	4613      	mov	r3, r2
 810c86e:	009b      	lsls	r3, r3, #2
 810c870:	4413      	add	r3, r2
 810c872:	3380      	adds	r3, #128	; 0x80
 810c874:	121b      	asrs	r3, r3, #8
}
 810c876:	4618      	mov	r0, r3
 810c878:	371c      	adds	r7, #28
 810c87a:	46bd      	mov	sp, r7
 810c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c880:	4770      	bx	lr

0810c882 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 810c882:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810c886:	b09c      	sub	sp, #112	; 0x70
 810c888:	af00      	add	r7, sp, #0
 810c88a:	6578      	str	r0, [r7, #84]	; 0x54
 810c88c:	6539      	str	r1, [r7, #80]	; 0x50
 810c88e:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 810c890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810c892:	461a      	mov	r2, r3
 810c894:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810c898:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 810c89c:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 810c8a0:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 810c8a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810c8a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810c8a8:	fb03 f102 	mul.w	r1, r3, r2
 810c8ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810c8ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810c8b0:	fb03 f302 	mul.w	r3, r3, r2
 810c8b4:	18ca      	adds	r2, r1, r3
 810c8b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810c8b8:	fba3 4503 	umull	r4, r5, r3, r3
 810c8bc:	1953      	adds	r3, r2, r5
 810c8be:	461d      	mov	r5, r3
 810c8c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810c8c2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 810c8c6:	b21a      	sxth	r2, r3
 810c8c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810c8cc:	fb02 f005 	mul.w	r0, r2, r5
 810c8d0:	fb04 f103 	mul.w	r1, r4, r3
 810c8d4:	4401      	add	r1, r0
 810c8d6:	fba4 2302 	umull	r2, r3, r4, r2
 810c8da:	4419      	add	r1, r3
 810c8dc:	460b      	mov	r3, r1
 810c8de:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 810c8e2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 810c8e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810c8e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 810c8ec:	b21a      	sxth	r2, r3
 810c8ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810c8f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 810c8f4:	fb03 f001 	mul.w	r0, r3, r1
 810c8f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 810c8fa:	fb02 f101 	mul.w	r1, r2, r1
 810c8fe:	4408      	add	r0, r1
 810c900:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 810c902:	fba1 2302 	umull	r2, r3, r1, r2
 810c906:	18c1      	adds	r1, r0, r3
 810c908:	460b      	mov	r3, r1
 810c90a:	f04f 0000 	mov.w	r0, #0
 810c90e:	f04f 0100 	mov.w	r1, #0
 810c912:	0459      	lsls	r1, r3, #17
 810c914:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 810c918:	0450      	lsls	r0, r2, #17
 810c91a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810c91e:	eb12 0800 	adds.w	r8, r2, r0
 810c922:	eb43 0901 	adc.w	r9, r3, r1
 810c926:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 810c92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810c92c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 810c930:	b21a      	sxth	r2, r3
 810c932:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810c936:	f04f 0000 	mov.w	r0, #0
 810c93a:	f04f 0100 	mov.w	r1, #0
 810c93e:	00d1      	lsls	r1, r2, #3
 810c940:	2000      	movs	r0, #0
 810c942:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810c946:	1814      	adds	r4, r2, r0
 810c948:	61bc      	str	r4, [r7, #24]
 810c94a:	414b      	adcs	r3, r1
 810c94c:	61fb      	str	r3, [r7, #28]
 810c94e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810c952:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810c956:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810c958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810c95a:	fb03 f102 	mul.w	r1, r3, r2
 810c95e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810c960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810c962:	fb03 f302 	mul.w	r3, r3, r2
 810c966:	18ca      	adds	r2, r1, r3
 810c968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810c96a:	fba3 4503 	umull	r4, r5, r3, r3
 810c96e:	1953      	adds	r3, r2, r5
 810c970:	461d      	mov	r5, r3
 810c972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810c974:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 810c978:	b21a      	sxth	r2, r3
 810c97a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810c97e:	fb02 f005 	mul.w	r0, r2, r5
 810c982:	fb04 f103 	mul.w	r1, r4, r3
 810c986:	4401      	add	r1, r0
 810c988:	fba4 2302 	umull	r2, r3, r4, r2
 810c98c:	4419      	add	r1, r3
 810c98e:	460b      	mov	r3, r1
 810c990:	f04f 0800 	mov.w	r8, #0
 810c994:	f04f 0900 	mov.w	r9, #0
 810c998:	ea4f 2812 	mov.w	r8, r2, lsr #8
 810c99c:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 810c9a0:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 810c9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810c9a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810c9aa:	b21a      	sxth	r2, r3
 810c9ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810c9b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 810c9b2:	fb03 f001 	mul.w	r0, r3, r1
 810c9b6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 810c9b8:	fb02 f101 	mul.w	r1, r2, r1
 810c9bc:	1844      	adds	r4, r0, r1
 810c9be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 810c9c0:	fba1 0102 	umull	r0, r1, r1, r2
 810c9c4:	1863      	adds	r3, r4, r1
 810c9c6:	4619      	mov	r1, r3
 810c9c8:	f04f 0200 	mov.w	r2, #0
 810c9cc:	f04f 0300 	mov.w	r3, #0
 810c9d0:	030b      	lsls	r3, r1, #12
 810c9d2:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 810c9d6:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810c9d8:	eb18 0102 	adds.w	r1, r8, r2
 810c9dc:	6139      	str	r1, [r7, #16]
 810c9de:	eb49 0303 	adc.w	r3, r9, r3
 810c9e2:	617b      	str	r3, [r7, #20]
 810c9e4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 810c9e8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 810c9ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 810c9f0:	1c11      	adds	r1, r2, #0
 810c9f2:	6439      	str	r1, [r7, #64]	; 0x40
 810c9f4:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 810c9f8:	647b      	str	r3, [r7, #68]	; 0x44
 810c9fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810c9fc:	88db      	ldrh	r3, [r3, #6]
 810c9fe:	b29a      	uxth	r2, r3
 810ca00:	f04f 0300 	mov.w	r3, #0
 810ca04:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 810ca08:	4629      	mov	r1, r5
 810ca0a:	fb02 f001 	mul.w	r0, r2, r1
 810ca0e:	4621      	mov	r1, r4
 810ca10:	fb01 f103 	mul.w	r1, r1, r3
 810ca14:	4401      	add	r1, r0
 810ca16:	4620      	mov	r0, r4
 810ca18:	fba0 2302 	umull	r2, r3, r0, r2
 810ca1c:	4419      	add	r1, r3
 810ca1e:	460b      	mov	r3, r1
 810ca20:	f04f 0000 	mov.w	r0, #0
 810ca24:	f04f 0100 	mov.w	r1, #0
 810ca28:	1058      	asrs	r0, r3, #1
 810ca2a:	17d9      	asrs	r1, r3, #31
 810ca2c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 810ca30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 810ca34:	4313      	orrs	r3, r2
 810ca36:	d101      	bne.n	810ca3c <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 810ca38:	2300      	movs	r3, #0
 810ca3a:	e0e1      	b.n	810cc00 <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 810ca3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810ca3e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810ca42:	461a      	mov	r2, r3
 810ca44:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810ca48:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 810ca4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810ca4e:	105b      	asrs	r3, r3, #1
 810ca50:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ca52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810ca54:	07db      	lsls	r3, r3, #31
 810ca56:	63bb      	str	r3, [r7, #56]	; 0x38
 810ca58:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810ca5c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 810ca60:	4621      	mov	r1, r4
 810ca62:	ebb1 0a02 	subs.w	sl, r1, r2
 810ca66:	4629      	mov	r1, r5
 810ca68:	eb61 0b03 	sbc.w	fp, r1, r3
 810ca6c:	4652      	mov	r2, sl
 810ca6e:	465b      	mov	r3, fp
 810ca70:	1891      	adds	r1, r2, r2
 810ca72:	60b9      	str	r1, [r7, #8]
 810ca74:	415b      	adcs	r3, r3
 810ca76:	60fb      	str	r3, [r7, #12]
 810ca78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 810ca7c:	eb12 020a 	adds.w	r2, r2, sl
 810ca80:	eb43 030b 	adc.w	r3, r3, fp
 810ca84:	f04f 0000 	mov.w	r0, #0
 810ca88:	f04f 0100 	mov.w	r1, #0
 810ca8c:	0199      	lsls	r1, r3, #6
 810ca8e:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 810ca92:	0190      	lsls	r0, r2, #6
 810ca94:	1812      	adds	r2, r2, r0
 810ca96:	eb41 0303 	adc.w	r3, r1, r3
 810ca9a:	f04f 0000 	mov.w	r0, #0
 810ca9e:	f04f 0100 	mov.w	r1, #0
 810caa2:	0099      	lsls	r1, r3, #2
 810caa4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 810caa8:	0090      	lsls	r0, r2, #2
 810caaa:	4602      	mov	r2, r0
 810caac:	460b      	mov	r3, r1
 810caae:	eb12 020a 	adds.w	r2, r2, sl
 810cab2:	eb43 030b 	adc.w	r3, r3, fp
 810cab6:	f04f 0000 	mov.w	r0, #0
 810caba:	f04f 0100 	mov.w	r1, #0
 810cabe:	0099      	lsls	r1, r3, #2
 810cac0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 810cac4:	0090      	lsls	r0, r2, #2
 810cac6:	4602      	mov	r2, r0
 810cac8:	460b      	mov	r3, r1
 810caca:	eb12 010a 	adds.w	r1, r2, sl
 810cace:	6339      	str	r1, [r7, #48]	; 0x30
 810cad0:	eb43 030b 	adc.w	r3, r3, fp
 810cad4:	637b      	str	r3, [r7, #52]	; 0x34
 810cad6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 810cada:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810cade:	f7f4 f94b 	bl	8100d78 <__aeabi_ldivmod>
 810cae2:	4602      	mov	r2, r0
 810cae4:	460b      	mov	r3, r1
 810cae6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 810caea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810caec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 810caf0:	b218      	sxth	r0, r3
 810caf2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 810caf6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 810cafa:	f04f 0200 	mov.w	r2, #0
 810cafe:	f04f 0300 	mov.w	r3, #0
 810cb02:	0b62      	lsrs	r2, r4, #13
 810cb04:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 810cb08:	136b      	asrs	r3, r5, #13
 810cb0a:	fb02 f501 	mul.w	r5, r2, r1
 810cb0e:	fb00 f403 	mul.w	r4, r0, r3
 810cb12:	442c      	add	r4, r5
 810cb14:	fba0 0102 	umull	r0, r1, r0, r2
 810cb18:	1863      	adds	r3, r4, r1
 810cb1a:	4619      	mov	r1, r3
 810cb1c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 810cb20:	f04f 0200 	mov.w	r2, #0
 810cb24:	f04f 0300 	mov.w	r3, #0
 810cb28:	0b62      	lsrs	r2, r4, #13
 810cb2a:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 810cb2e:	136b      	asrs	r3, r5, #13
 810cb30:	fb02 f501 	mul.w	r5, r2, r1
 810cb34:	fb00 f403 	mul.w	r4, r0, r3
 810cb38:	442c      	add	r4, r5
 810cb3a:	fba0 0102 	umull	r0, r1, r0, r2
 810cb3e:	1863      	adds	r3, r4, r1
 810cb40:	4619      	mov	r1, r3
 810cb42:	f04f 0200 	mov.w	r2, #0
 810cb46:	f04f 0300 	mov.w	r3, #0
 810cb4a:	0e42      	lsrs	r2, r0, #25
 810cb4c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 810cb50:	164b      	asrs	r3, r1, #25
 810cb52:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 810cb56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810cb58:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 810cb5c:	b21a      	sxth	r2, r3
 810cb5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810cb62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810cb64:	fb03 f001 	mul.w	r0, r3, r1
 810cb68:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 810cb6a:	fb02 f101 	mul.w	r1, r2, r1
 810cb6e:	1844      	adds	r4, r0, r1
 810cb70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810cb72:	fba1 0102 	umull	r0, r1, r1, r2
 810cb76:	1863      	adds	r3, r4, r1
 810cb78:	4619      	mov	r1, r3
 810cb7a:	f04f 0200 	mov.w	r2, #0
 810cb7e:	f04f 0300 	mov.w	r3, #0
 810cb82:	0cc2      	lsrs	r2, r0, #19
 810cb84:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 810cb88:	14cb      	asrs	r3, r1, #19
 810cb8a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 810cb8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 810cb92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 810cb96:	1884      	adds	r4, r0, r2
 810cb98:	62bc      	str	r4, [r7, #40]	; 0x28
 810cb9a:	eb41 0303 	adc.w	r3, r1, r3
 810cb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 810cba0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810cba4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810cba8:	4621      	mov	r1, r4
 810cbaa:	1889      	adds	r1, r1, r2
 810cbac:	6239      	str	r1, [r7, #32]
 810cbae:	4629      	mov	r1, r5
 810cbb0:	eb43 0101 	adc.w	r1, r3, r1
 810cbb4:	6279      	str	r1, [r7, #36]	; 0x24
 810cbb6:	f04f 0000 	mov.w	r0, #0
 810cbba:	f04f 0100 	mov.w	r1, #0
 810cbbe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 810cbc2:	4623      	mov	r3, r4
 810cbc4:	0a18      	lsrs	r0, r3, #8
 810cbc6:	462b      	mov	r3, r5
 810cbc8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 810cbcc:	462b      	mov	r3, r5
 810cbce:	1219      	asrs	r1, r3, #8
 810cbd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810cbd2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 810cbd6:	b21c      	sxth	r4, r3
 810cbd8:	ea4f 75e4 	mov.w	r5, r4, asr #31
 810cbdc:	f04f 0200 	mov.w	r2, #0
 810cbe0:	f04f 0300 	mov.w	r3, #0
 810cbe4:	012b      	lsls	r3, r5, #4
 810cbe6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 810cbea:	0122      	lsls	r2, r4, #4
 810cbec:	1884      	adds	r4, r0, r2
 810cbee:	603c      	str	r4, [r7, #0]
 810cbf0:	eb41 0303 	adc.w	r3, r1, r3
 810cbf4:	607b      	str	r3, [r7, #4]
 810cbf6:	e9d7 3400 	ldrd	r3, r4, [r7]
 810cbfa:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 810cbfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 810cc00:	4618      	mov	r0, r3
 810cc02:	3770      	adds	r7, #112	; 0x70
 810cc04:	46bd      	mov	sp, r7
 810cc06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0810cc0a <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 810cc0a:	b480      	push	{r7}
 810cc0c:	b087      	sub	sp, #28
 810cc0e:	af00      	add	r7, sp, #0
 810cc10:	60f8      	str	r0, [r7, #12]
 810cc12:	60b9      	str	r1, [r7, #8]
 810cc14:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 810cc16:	687b      	ldr	r3, [r7, #4]
 810cc18:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 810cc1c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810cc1e:	68bb      	ldr	r3, [r7, #8]
 810cc20:	039a      	lsls	r2, r3, #14
 810cc22:	68fb      	ldr	r3, [r7, #12]
 810cc24:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 810cc28:	051b      	lsls	r3, r3, #20
 810cc2a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 810cc2c:	68fb      	ldr	r3, [r7, #12]
 810cc2e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 810cc32:	4619      	mov	r1, r3
 810cc34:	697b      	ldr	r3, [r7, #20]
 810cc36:	fb03 f301 	mul.w	r3, r3, r1
 810cc3a:	1ad3      	subs	r3, r2, r3
 810cc3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 810cc40:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 810cc42:	68fa      	ldr	r2, [r7, #12]
 810cc44:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 810cc48:	4611      	mov	r1, r2
 810cc4a:	697a      	ldr	r2, [r7, #20]
 810cc4c:	fb02 f201 	mul.w	r2, r2, r1
 810cc50:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810cc52:	68f9      	ldr	r1, [r7, #12]
 810cc54:	7f09      	ldrb	r1, [r1, #28]
 810cc56:	4608      	mov	r0, r1
 810cc58:	6979      	ldr	r1, [r7, #20]
 810cc5a:	fb01 f100 	mul.w	r1, r1, r0
 810cc5e:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810cc60:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810cc64:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810cc68:	1292      	asrs	r2, r2, #10
 810cc6a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 810cc6e:	68f9      	ldr	r1, [r7, #12]
 810cc70:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 810cc74:	fb01 f202 	mul.w	r2, r1, r2
 810cc78:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 810cc7c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810cc7e:	fb02 f303 	mul.w	r3, r2, r3
 810cc82:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 810cc84:	697b      	ldr	r3, [r7, #20]
 810cc86:	13db      	asrs	r3, r3, #15
 810cc88:	697a      	ldr	r2, [r7, #20]
 810cc8a:	13d2      	asrs	r2, r2, #15
 810cc8c:	fb02 f303 	mul.w	r3, r2, r3
 810cc90:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 810cc92:	68fa      	ldr	r2, [r7, #12]
 810cc94:	7e12      	ldrb	r2, [r2, #24]
 810cc96:	fb02 f303 	mul.w	r3, r2, r3
 810cc9a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 810cc9c:	697a      	ldr	r2, [r7, #20]
 810cc9e:	1ad3      	subs	r3, r2, r3
 810cca0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 810cca2:	697b      	ldr	r3, [r7, #20]
 810cca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810cca8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 810ccaa:	697b      	ldr	r3, [r7, #20]
 810ccac:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 810ccb0:	bfa8      	it	ge
 810ccb2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 810ccb6:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 810ccb8:	697b      	ldr	r3, [r7, #20]
 810ccba:	131b      	asrs	r3, r3, #12
}
 810ccbc:	4618      	mov	r0, r3
 810ccbe:	371c      	adds	r7, #28
 810ccc0:	46bd      	mov	sp, r7
 810ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccc6:	4770      	bx	lr

0810ccc8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 810ccc8:	b580      	push	{r7, lr}
 810ccca:	b08c      	sub	sp, #48	; 0x30
 810cccc:	af00      	add	r7, sp, #0
 810ccce:	60f8      	str	r0, [r7, #12]
 810ccd0:	60b9      	str	r1, [r7, #8]
 810ccd2:	607a      	str	r2, [r7, #4]
 810ccd4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 810ccd6:	68fb      	ldr	r3, [r7, #12]
 810ccd8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810ccdc:	2b60      	cmp	r3, #96	; 0x60
 810ccde:	d007      	beq.n	810ccf0 <bmp280_read_fixed+0x28>
		if (humidity)
 810cce0:	683b      	ldr	r3, [r7, #0]
 810cce2:	2b00      	cmp	r3, #0
 810cce4:	d002      	beq.n	810ccec <bmp280_read_fixed+0x24>
			*humidity = 0;
 810cce6:	683b      	ldr	r3, [r7, #0]
 810cce8:	2200      	movs	r2, #0
 810ccea:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 810ccec:	2300      	movs	r3, #0
 810ccee:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 810ccf0:	683b      	ldr	r3, [r7, #0]
 810ccf2:	2b00      	cmp	r3, #0
 810ccf4:	d001      	beq.n	810ccfa <bmp280_read_fixed+0x32>
 810ccf6:	2308      	movs	r3, #8
 810ccf8:	e000      	b.n	810ccfc <bmp280_read_fixed+0x34>
 810ccfa:	2306      	movs	r3, #6
 810ccfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 810ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cd00:	b2db      	uxtb	r3, r3
 810cd02:	f107 0218 	add.w	r2, r7, #24
 810cd06:	21f7      	movs	r1, #247	; 0xf7
 810cd08:	68f8      	ldr	r0, [r7, #12]
 810cd0a:	f7ff fba6 	bl	810c45a <read_data>
 810cd0e:	4603      	mov	r3, r0
 810cd10:	2b00      	cmp	r3, #0
 810cd12:	d001      	beq.n	810cd18 <bmp280_read_fixed+0x50>
		return false;
 810cd14:	2300      	movs	r3, #0
 810cd16:	e038      	b.n	810cd8a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 810cd18:	7e3b      	ldrb	r3, [r7, #24]
 810cd1a:	031a      	lsls	r2, r3, #12
 810cd1c:	7e7b      	ldrb	r3, [r7, #25]
 810cd1e:	011b      	lsls	r3, r3, #4
 810cd20:	4313      	orrs	r3, r2
 810cd22:	7eba      	ldrb	r2, [r7, #26]
 810cd24:	0912      	lsrs	r2, r2, #4
 810cd26:	b2d2      	uxtb	r2, r2
 810cd28:	4313      	orrs	r3, r2
 810cd2a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 810cd2c:	7efb      	ldrb	r3, [r7, #27]
 810cd2e:	031a      	lsls	r2, r3, #12
 810cd30:	7f3b      	ldrb	r3, [r7, #28]
 810cd32:	011b      	lsls	r3, r3, #4
 810cd34:	4313      	orrs	r3, r2
 810cd36:	7f7a      	ldrb	r2, [r7, #29]
 810cd38:	0912      	lsrs	r2, r2, #4
 810cd3a:	b2d2      	uxtb	r2, r2
 810cd3c:	4313      	orrs	r3, r2
 810cd3e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 810cd40:	f107 0314 	add.w	r3, r7, #20
 810cd44:	461a      	mov	r2, r3
 810cd46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810cd48:	68f8      	ldr	r0, [r7, #12]
 810cd4a:	f7ff fd61 	bl	810c810 <compensate_temperature>
 810cd4e:	4602      	mov	r2, r0
 810cd50:	68bb      	ldr	r3, [r7, #8]
 810cd52:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 810cd54:	697b      	ldr	r3, [r7, #20]
 810cd56:	461a      	mov	r2, r3
 810cd58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810cd5a:	68f8      	ldr	r0, [r7, #12]
 810cd5c:	f7ff fd91 	bl	810c882 <compensate_pressure>
 810cd60:	4602      	mov	r2, r0
 810cd62:	687b      	ldr	r3, [r7, #4]
 810cd64:	601a      	str	r2, [r3, #0]

	if (humidity) {
 810cd66:	683b      	ldr	r3, [r7, #0]
 810cd68:	2b00      	cmp	r3, #0
 810cd6a:	d00d      	beq.n	810cd88 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 810cd6c:	7fbb      	ldrb	r3, [r7, #30]
 810cd6e:	021b      	lsls	r3, r3, #8
 810cd70:	7ffa      	ldrb	r2, [r7, #31]
 810cd72:	4313      	orrs	r3, r2
 810cd74:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 810cd76:	697b      	ldr	r3, [r7, #20]
 810cd78:	461a      	mov	r2, r3
 810cd7a:	6a39      	ldr	r1, [r7, #32]
 810cd7c:	68f8      	ldr	r0, [r7, #12]
 810cd7e:	f7ff ff44 	bl	810cc0a <compensate_humidity>
 810cd82:	4602      	mov	r2, r0
 810cd84:	683b      	ldr	r3, [r7, #0]
 810cd86:	601a      	str	r2, [r3, #0]
	}

	return true;
 810cd88:	2301      	movs	r3, #1
}
 810cd8a:	4618      	mov	r0, r3
 810cd8c:	3730      	adds	r7, #48	; 0x30
 810cd8e:	46bd      	mov	sp, r7
 810cd90:	bd80      	pop	{r7, pc}
	...

0810cd94 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 810cd94:	b580      	push	{r7, lr}
 810cd96:	b088      	sub	sp, #32
 810cd98:	af00      	add	r7, sp, #0
 810cd9a:	60f8      	str	r0, [r7, #12]
 810cd9c:	60b9      	str	r1, [r7, #8]
 810cd9e:	607a      	str	r2, [r7, #4]
 810cda0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 810cda2:	683b      	ldr	r3, [r7, #0]
 810cda4:	2b00      	cmp	r3, #0
 810cda6:	d002      	beq.n	810cdae <bmp280_read_float+0x1a>
 810cda8:	f107 0314 	add.w	r3, r7, #20
 810cdac:	e000      	b.n	810cdb0 <bmp280_read_float+0x1c>
 810cdae:	2300      	movs	r3, #0
 810cdb0:	f107 0218 	add.w	r2, r7, #24
 810cdb4:	f107 011c 	add.w	r1, r7, #28
 810cdb8:	68f8      	ldr	r0, [r7, #12]
 810cdba:	f7ff ff85 	bl	810ccc8 <bmp280_read_fixed>
 810cdbe:	4603      	mov	r3, r0
 810cdc0:	2b00      	cmp	r3, #0
 810cdc2:	d028      	beq.n	810ce16 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 810cdc4:	69fb      	ldr	r3, [r7, #28]
 810cdc6:	ee07 3a90 	vmov	s15, r3
 810cdca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810cdce:	eddf 6a14 	vldr	s13, [pc, #80]	; 810ce20 <bmp280_read_float+0x8c>
 810cdd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810cdd6:	68bb      	ldr	r3, [r7, #8]
 810cdd8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 810cddc:	69bb      	ldr	r3, [r7, #24]
 810cdde:	ee07 3a90 	vmov	s15, r3
 810cde2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810cde6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 810ce24 <bmp280_read_float+0x90>
 810cdea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810cdee:	687b      	ldr	r3, [r7, #4]
 810cdf0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 810cdf4:	683b      	ldr	r3, [r7, #0]
 810cdf6:	2b00      	cmp	r3, #0
 810cdf8:	d00b      	beq.n	810ce12 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 810cdfa:	697b      	ldr	r3, [r7, #20]
 810cdfc:	ee07 3a90 	vmov	s15, r3
 810ce00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810ce04:	eddf 6a08 	vldr	s13, [pc, #32]	; 810ce28 <bmp280_read_float+0x94>
 810ce08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810ce0c:	683b      	ldr	r3, [r7, #0]
 810ce0e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 810ce12:	2301      	movs	r3, #1
 810ce14:	e000      	b.n	810ce18 <bmp280_read_float+0x84>
	}

	return false;
 810ce16:	2300      	movs	r3, #0
}
 810ce18:	4618      	mov	r0, r3
 810ce1a:	3720      	adds	r7, #32
 810ce1c:	46bd      	mov	sp, r7
 810ce1e:	bd80      	pop	{r7, pc}
 810ce20:	42c80000 	.word	0x42c80000
 810ce24:	43800000 	.word	0x43800000
 810ce28:	44800000 	.word	0x44800000

0810ce2c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810ce2c:	b580      	push	{r7, lr}
 810ce2e:	b082      	sub	sp, #8
 810ce30:	af00      	add	r7, sp, #0
 810ce32:	4603      	mov	r3, r0
 810ce34:	71fb      	strb	r3, [r7, #7]
 810ce36:	79fb      	ldrb	r3, [r7, #7]
 810ce38:	4619      	mov	r1, r3
 810ce3a:	2007      	movs	r0, #7
 810ce3c:	f000 fa8e 	bl	810d35c <bno055_writeData>
 810ce40:	bf00      	nop
 810ce42:	3708      	adds	r7, #8
 810ce44:	46bd      	mov	sp, r7
 810ce46:	bd80      	pop	{r7, pc}

0810ce48 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 810ce48:	b580      	push	{r7, lr}
 810ce4a:	b082      	sub	sp, #8
 810ce4c:	af00      	add	r7, sp, #0
 810ce4e:	4603      	mov	r3, r0
 810ce50:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810ce52:	79fb      	ldrb	r3, [r7, #7]
 810ce54:	4619      	mov	r1, r3
 810ce56:	203d      	movs	r0, #61	; 0x3d
 810ce58:	f000 fa80 	bl	810d35c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810ce5c:	79fb      	ldrb	r3, [r7, #7]
 810ce5e:	2b00      	cmp	r3, #0
 810ce60:	d103      	bne.n	810ce6a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810ce62:	2013      	movs	r0, #19
 810ce64:	f000 fa6e 	bl	810d344 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 810ce68:	e002      	b.n	810ce70 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 810ce6a:	2007      	movs	r0, #7
 810ce6c:	f000 fa6a 	bl	810d344 <bno055_delay>
}
 810ce70:	bf00      	nop
 810ce72:	3708      	adds	r7, #8
 810ce74:	46bd      	mov	sp, r7
 810ce76:	bd80      	pop	{r7, pc}

0810ce78 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 810ce78:	b580      	push	{r7, lr}
 810ce7a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810ce7c:	2000      	movs	r0, #0
 810ce7e:	f7ff ffe3 	bl	810ce48 <bno055_setOperationMode>
}
 810ce82:	bf00      	nop
 810ce84:	bd80      	pop	{r7, pc}

0810ce86 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 810ce86:	b580      	push	{r7, lr}
 810ce88:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810ce8a:	200c      	movs	r0, #12
 810ce8c:	f7ff ffdc 	bl	810ce48 <bno055_setOperationMode>
}
 810ce90:	bf00      	nop
 810ce92:	bd80      	pop	{r7, pc}

0810ce94 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 810ce94:	b580      	push	{r7, lr}
 810ce96:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810ce98:	2120      	movs	r1, #32
 810ce9a:	203f      	movs	r0, #63	; 0x3f
 810ce9c:	f000 fa5e 	bl	810d35c <bno055_writeData>
  bno055_delay(700);
 810cea0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 810cea4:	f000 fa4e 	bl	810d344 <bno055_delay>
}
 810cea8:	bf00      	nop
 810ceaa:	bd80      	pop	{r7, pc}

0810ceac <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810ceac:	b580      	push	{r7, lr}
 810ceae:	b082      	sub	sp, #8
 810ceb0:	af00      	add	r7, sp, #0
  bno055_reset();
 810ceb2:	f7ff ffef 	bl	810ce94 <bno055_reset>

  uint8_t id = 0;
 810ceb6:	2300      	movs	r3, #0
 810ceb8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810ceba:	1dfb      	adds	r3, r7, #7
 810cebc:	2201      	movs	r2, #1
 810cebe:	4619      	mov	r1, r3
 810cec0:	2000      	movs	r0, #0
 810cec2:	f000 fb37 	bl	810d534 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 810cec6:	2000      	movs	r0, #0
 810cec8:	f7ff ffb0 	bl	810ce2c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810cecc:	2100      	movs	r1, #0
 810cece:	203f      	movs	r0, #63	; 0x3f
 810ced0:	f000 fa44 	bl	810d35c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 810ced4:	f7ff ffd0 	bl	810ce78 <bno055_setOperationModeConfig>
  bno055_delay(10);
 810ced8:	200a      	movs	r0, #10
 810ceda:	f000 fa33 	bl	810d344 <bno055_delay>
}
 810cede:	bf00      	nop
 810cee0:	3708      	adds	r7, #8
 810cee2:	46bd      	mov	sp, r7
 810cee4:	bd80      	pop	{r7, pc}

0810cee6 <bno055_getSystemError>:
  res.magState = (tmp >> 1) & 0x01;
  res.accState = (tmp >> 0) & 0x01;
  return res;
}

uint8_t bno055_getSystemError() {
 810cee6:	b580      	push	{r7, lr}
 810cee8:	b082      	sub	sp, #8
 810ceea:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 810ceec:	2000      	movs	r0, #0
 810ceee:	f7ff ff9d 	bl	810ce2c <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
 810cef2:	1dfb      	adds	r3, r7, #7
 810cef4:	2201      	movs	r2, #1
 810cef6:	4619      	mov	r1, r3
 810cef8:	203a      	movs	r0, #58	; 0x3a
 810cefa:	f000 fb1b 	bl	810d534 <bno055_readData>
  return tmp;
 810cefe:	79fb      	ldrb	r3, [r7, #7]
}
 810cf00:	4618      	mov	r0, r3
 810cf02:	3708      	adds	r7, #8
 810cf04:	46bd      	mov	sp, r7
 810cf06:	bd80      	pop	{r7, pc}

0810cf08 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 810cf08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810cf0c:	b09e      	sub	sp, #120	; 0x78
 810cf0e:	af00      	add	r7, sp, #0
 810cf10:	4603      	mov	r3, r0
 810cf12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810cf16:	2000      	movs	r0, #0
 810cf18:	f7ff ff88 	bl	810ce2c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810cf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cf20:	2b20      	cmp	r3, #32
 810cf22:	d108      	bne.n	810cf36 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810cf24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810cf28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cf2c:	2208      	movs	r2, #8
 810cf2e:	4618      	mov	r0, r3
 810cf30:	f000 fb00 	bl	810d534 <bno055_readData>
 810cf34:	e007      	b.n	810cf46 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810cf36:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810cf3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cf3e:	2206      	movs	r2, #6
 810cf40:	4618      	mov	r0, r3
 810cf42:	f000 faf7 	bl	810d534 <bno055_readData>

  double scale = 1;
 810cf46:	f04f 0200 	mov.w	r2, #0
 810cf4a:	4b8b      	ldr	r3, [pc, #556]	; (810d178 <bno055_getVector+0x270>)
 810cf4c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 810cf50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cf54:	2b0e      	cmp	r3, #14
 810cf56:	d109      	bne.n	810cf6c <bno055_getVector+0x64>
    scale = magScale;
 810cf58:	4b88      	ldr	r3, [pc, #544]	; (810d17c <bno055_getVector+0x274>)
 810cf5a:	881b      	ldrh	r3, [r3, #0]
 810cf5c:	4618      	mov	r0, r3
 810cf5e:	f7f3 fb69 	bl	8100634 <__aeabi_ui2d>
 810cf62:	4602      	mov	r2, r0
 810cf64:	460b      	mov	r3, r1
 810cf66:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810cf6a:	e03e      	b.n	810cfea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810cf6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cf70:	2b08      	cmp	r3, #8
 810cf72:	d007      	beq.n	810cf84 <bno055_getVector+0x7c>
 810cf74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cf78:	2b28      	cmp	r3, #40	; 0x28
 810cf7a:	d003      	beq.n	810cf84 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810cf7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cf80:	2b2e      	cmp	r3, #46	; 0x2e
 810cf82:	d109      	bne.n	810cf98 <bno055_getVector+0x90>
    scale = accelScale;
 810cf84:	4b7e      	ldr	r3, [pc, #504]	; (810d180 <bno055_getVector+0x278>)
 810cf86:	881b      	ldrh	r3, [r3, #0]
 810cf88:	4618      	mov	r0, r3
 810cf8a:	f7f3 fb53 	bl	8100634 <__aeabi_ui2d>
 810cf8e:	4602      	mov	r2, r0
 810cf90:	460b      	mov	r3, r1
 810cf92:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810cf96:	e028      	b.n	810cfea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 810cf98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cf9c:	2b14      	cmp	r3, #20
 810cf9e:	d109      	bne.n	810cfb4 <bno055_getVector+0xac>
    scale = angularRateScale;
 810cfa0:	4b78      	ldr	r3, [pc, #480]	; (810d184 <bno055_getVector+0x27c>)
 810cfa2:	881b      	ldrh	r3, [r3, #0]
 810cfa4:	4618      	mov	r0, r3
 810cfa6:	f7f3 fb45 	bl	8100634 <__aeabi_ui2d>
 810cfaa:	4602      	mov	r2, r0
 810cfac:	460b      	mov	r3, r1
 810cfae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810cfb2:	e01a      	b.n	810cfea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 810cfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cfb8:	2b1a      	cmp	r3, #26
 810cfba:	d109      	bne.n	810cfd0 <bno055_getVector+0xc8>
    scale = eulerScale;
 810cfbc:	4b72      	ldr	r3, [pc, #456]	; (810d188 <bno055_getVector+0x280>)
 810cfbe:	881b      	ldrh	r3, [r3, #0]
 810cfc0:	4618      	mov	r0, r3
 810cfc2:	f7f3 fb37 	bl	8100634 <__aeabi_ui2d>
 810cfc6:	4602      	mov	r2, r0
 810cfc8:	460b      	mov	r3, r1
 810cfca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810cfce:	e00c      	b.n	810cfea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810cfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cfd4:	2b20      	cmp	r3, #32
 810cfd6:	d108      	bne.n	810cfea <bno055_getVector+0xe2>
    scale = quaScale;
 810cfd8:	4b6c      	ldr	r3, [pc, #432]	; (810d18c <bno055_getVector+0x284>)
 810cfda:	881b      	ldrh	r3, [r3, #0]
 810cfdc:	4618      	mov	r0, r3
 810cfde:	f7f3 fb29 	bl	8100634 <__aeabi_ui2d>
 810cfe2:	4602      	mov	r2, r0
 810cfe4:	460b      	mov	r3, r1
 810cfe6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810cfea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810cfee:	2220      	movs	r2, #32
 810cff0:	2100      	movs	r1, #0
 810cff2:	4618      	mov	r0, r3
 810cff4:	f004 f8c6 	bl	8111184 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810cff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cffc:	2b20      	cmp	r3, #32
 810cffe:	d150      	bne.n	810d0a2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810d000:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810d004:	021b      	lsls	r3, r3, #8
 810d006:	b21a      	sxth	r2, r3
 810d008:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810d00c:	b21b      	sxth	r3, r3
 810d00e:	4313      	orrs	r3, r2
 810d010:	b21b      	sxth	r3, r3
 810d012:	4618      	mov	r0, r3
 810d014:	f7f3 fb1e 	bl	8100654 <__aeabi_i2d>
 810d018:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d01c:	f7f3 fcae 	bl	810097c <__aeabi_ddiv>
 810d020:	4602      	mov	r2, r0
 810d022:	460b      	mov	r3, r1
 810d024:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810d028:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810d02c:	021b      	lsls	r3, r3, #8
 810d02e:	b21a      	sxth	r2, r3
 810d030:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810d034:	b21b      	sxth	r3, r3
 810d036:	4313      	orrs	r3, r2
 810d038:	b21b      	sxth	r3, r3
 810d03a:	4618      	mov	r0, r3
 810d03c:	f7f3 fb0a 	bl	8100654 <__aeabi_i2d>
 810d040:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d044:	f7f3 fc9a 	bl	810097c <__aeabi_ddiv>
 810d048:	4602      	mov	r2, r0
 810d04a:	460b      	mov	r3, r1
 810d04c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810d050:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810d054:	021b      	lsls	r3, r3, #8
 810d056:	b21a      	sxth	r2, r3
 810d058:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810d05c:	b21b      	sxth	r3, r3
 810d05e:	4313      	orrs	r3, r2
 810d060:	b21b      	sxth	r3, r3
 810d062:	4618      	mov	r0, r3
 810d064:	f7f3 faf6 	bl	8100654 <__aeabi_i2d>
 810d068:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d06c:	f7f3 fc86 	bl	810097c <__aeabi_ddiv>
 810d070:	4602      	mov	r2, r0
 810d072:	460b      	mov	r3, r1
 810d074:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810d078:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810d07c:	021b      	lsls	r3, r3, #8
 810d07e:	b21a      	sxth	r2, r3
 810d080:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810d084:	b21b      	sxth	r3, r3
 810d086:	4313      	orrs	r3, r2
 810d088:	b21b      	sxth	r3, r3
 810d08a:	4618      	mov	r0, r3
 810d08c:	f7f3 fae2 	bl	8100654 <__aeabi_i2d>
 810d090:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d094:	f7f3 fc72 	bl	810097c <__aeabi_ddiv>
 810d098:	4602      	mov	r2, r0
 810d09a:	460b      	mov	r3, r1
 810d09c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 810d0a0:	e03b      	b.n	810d11a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810d0a2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810d0a6:	021b      	lsls	r3, r3, #8
 810d0a8:	b21a      	sxth	r2, r3
 810d0aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810d0ae:	b21b      	sxth	r3, r3
 810d0b0:	4313      	orrs	r3, r2
 810d0b2:	b21b      	sxth	r3, r3
 810d0b4:	4618      	mov	r0, r3
 810d0b6:	f7f3 facd 	bl	8100654 <__aeabi_i2d>
 810d0ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d0be:	f7f3 fc5d 	bl	810097c <__aeabi_ddiv>
 810d0c2:	4602      	mov	r2, r0
 810d0c4:	460b      	mov	r3, r1
 810d0c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810d0ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810d0ce:	021b      	lsls	r3, r3, #8
 810d0d0:	b21a      	sxth	r2, r3
 810d0d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810d0d6:	b21b      	sxth	r3, r3
 810d0d8:	4313      	orrs	r3, r2
 810d0da:	b21b      	sxth	r3, r3
 810d0dc:	4618      	mov	r0, r3
 810d0de:	f7f3 fab9 	bl	8100654 <__aeabi_i2d>
 810d0e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d0e6:	f7f3 fc49 	bl	810097c <__aeabi_ddiv>
 810d0ea:	4602      	mov	r2, r0
 810d0ec:	460b      	mov	r3, r1
 810d0ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810d0f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810d0f6:	021b      	lsls	r3, r3, #8
 810d0f8:	b21a      	sxth	r2, r3
 810d0fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810d0fe:	b21b      	sxth	r3, r3
 810d100:	4313      	orrs	r3, r2
 810d102:	b21b      	sxth	r3, r3
 810d104:	4618      	mov	r0, r3
 810d106:	f7f3 faa5 	bl	8100654 <__aeabi_i2d>
 810d10a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d10e:	f7f3 fc35 	bl	810097c <__aeabi_ddiv>
 810d112:	4602      	mov	r2, r0
 810d114:	460b      	mov	r3, r1
 810d116:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 810d11a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810d11e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810d122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810d124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810d126:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810d12a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810d12e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810d132:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 810d136:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 810d13a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 810d13e:	ec49 8b14 	vmov	d4, r8, r9
 810d142:	ec45 4b15 	vmov	d5, r4, r5
 810d146:	ec41 0b16 	vmov	d6, r0, r1
 810d14a:	ec43 2b17 	vmov	d7, r2, r3
}
 810d14e:	eeb0 0a44 	vmov.f32	s0, s8
 810d152:	eef0 0a64 	vmov.f32	s1, s9
 810d156:	eeb0 1a45 	vmov.f32	s2, s10
 810d15a:	eef0 1a65 	vmov.f32	s3, s11
 810d15e:	eeb0 2a46 	vmov.f32	s4, s12
 810d162:	eef0 2a66 	vmov.f32	s5, s13
 810d166:	eeb0 3a47 	vmov.f32	s6, s14
 810d16a:	eef0 3a67 	vmov.f32	s7, s15
 810d16e:	3778      	adds	r7, #120	; 0x78
 810d170:	46bd      	mov	sp, r7
 810d172:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810d176:	bf00      	nop
 810d178:	3ff00000 	.word	0x3ff00000
 810d17c:	1000002e 	.word	0x1000002e
 810d180:	10000028 	.word	0x10000028
 810d184:	1000002a 	.word	0x1000002a
 810d188:	1000002c 	.word	0x1000002c
 810d18c:	10000030 	.word	0x10000030

0810d190 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 810d190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810d194:	b090      	sub	sp, #64	; 0x40
 810d196:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 810d198:	2008      	movs	r0, #8
 810d19a:	f7ff feb5 	bl	810cf08 <bno055_getVector>
 810d19e:	eeb0 4a40 	vmov.f32	s8, s0
 810d1a2:	eef0 4a60 	vmov.f32	s9, s1
 810d1a6:	eeb0 5a41 	vmov.f32	s10, s2
 810d1aa:	eef0 5a61 	vmov.f32	s11, s3
 810d1ae:	eeb0 6a42 	vmov.f32	s12, s4
 810d1b2:	eef0 6a62 	vmov.f32	s13, s5
 810d1b6:	eeb0 7a43 	vmov.f32	s14, s6
 810d1ba:	eef0 7a63 	vmov.f32	s15, s7
 810d1be:	ed87 4b08 	vstr	d4, [r7, #32]
 810d1c2:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d1c6:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d1ca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d1ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d1d2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810d1d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810d1da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 810d1de:	ec49 8b14 	vmov	d4, r8, r9
 810d1e2:	ec45 4b15 	vmov	d5, r4, r5
 810d1e6:	ec41 0b16 	vmov	d6, r0, r1
 810d1ea:	ec43 2b17 	vmov	d7, r2, r3
}
 810d1ee:	eeb0 0a44 	vmov.f32	s0, s8
 810d1f2:	eef0 0a64 	vmov.f32	s1, s9
 810d1f6:	eeb0 1a45 	vmov.f32	s2, s10
 810d1fa:	eef0 1a65 	vmov.f32	s3, s11
 810d1fe:	eeb0 2a46 	vmov.f32	s4, s12
 810d202:	eef0 2a66 	vmov.f32	s5, s13
 810d206:	eeb0 3a47 	vmov.f32	s6, s14
 810d20a:	eef0 3a67 	vmov.f32	s7, s15
 810d20e:	3740      	adds	r7, #64	; 0x40
 810d210:	46bd      	mov	sp, r7
 810d212:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0810d216 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 810d216:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810d21a:	b090      	sub	sp, #64	; 0x40
 810d21c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 810d21e:	201a      	movs	r0, #26
 810d220:	f7ff fe72 	bl	810cf08 <bno055_getVector>
 810d224:	eeb0 4a40 	vmov.f32	s8, s0
 810d228:	eef0 4a60 	vmov.f32	s9, s1
 810d22c:	eeb0 5a41 	vmov.f32	s10, s2
 810d230:	eef0 5a61 	vmov.f32	s11, s3
 810d234:	eeb0 6a42 	vmov.f32	s12, s4
 810d238:	eef0 6a62 	vmov.f32	s13, s5
 810d23c:	eeb0 7a43 	vmov.f32	s14, s6
 810d240:	eef0 7a63 	vmov.f32	s15, s7
 810d244:	ed87 4b08 	vstr	d4, [r7, #32]
 810d248:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d24c:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d250:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d254:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d258:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810d25c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810d260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 810d264:	ec49 8b14 	vmov	d4, r8, r9
 810d268:	ec45 4b15 	vmov	d5, r4, r5
 810d26c:	ec41 0b16 	vmov	d6, r0, r1
 810d270:	ec43 2b17 	vmov	d7, r2, r3
}
 810d274:	eeb0 0a44 	vmov.f32	s0, s8
 810d278:	eef0 0a64 	vmov.f32	s1, s9
 810d27c:	eeb0 1a45 	vmov.f32	s2, s10
 810d280:	eef0 1a65 	vmov.f32	s3, s11
 810d284:	eeb0 2a46 	vmov.f32	s4, s12
 810d288:	eef0 2a66 	vmov.f32	s5, s13
 810d28c:	eeb0 3a47 	vmov.f32	s6, s14
 810d290:	eef0 3a67 	vmov.f32	s7, s15
 810d294:	3740      	adds	r7, #64	; 0x40
 810d296:	46bd      	mov	sp, r7
 810d298:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0810d29c <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 810d29c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810d2a0:	b090      	sub	sp, #64	; 0x40
 810d2a2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 810d2a4:	202e      	movs	r0, #46	; 0x2e
 810d2a6:	f7ff fe2f 	bl	810cf08 <bno055_getVector>
 810d2aa:	eeb0 4a40 	vmov.f32	s8, s0
 810d2ae:	eef0 4a60 	vmov.f32	s9, s1
 810d2b2:	eeb0 5a41 	vmov.f32	s10, s2
 810d2b6:	eef0 5a61 	vmov.f32	s11, s3
 810d2ba:	eeb0 6a42 	vmov.f32	s12, s4
 810d2be:	eef0 6a62 	vmov.f32	s13, s5
 810d2c2:	eeb0 7a43 	vmov.f32	s14, s6
 810d2c6:	eef0 7a63 	vmov.f32	s15, s7
 810d2ca:	ed87 4b08 	vstr	d4, [r7, #32]
 810d2ce:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d2d2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d2d6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d2da:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d2de:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810d2e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810d2e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 810d2ea:	ec49 8b14 	vmov	d4, r8, r9
 810d2ee:	ec45 4b15 	vmov	d5, r4, r5
 810d2f2:	ec41 0b16 	vmov	d6, r0, r1
 810d2f6:	ec43 2b17 	vmov	d7, r2, r3
}
 810d2fa:	eeb0 0a44 	vmov.f32	s0, s8
 810d2fe:	eef0 0a64 	vmov.f32	s1, s9
 810d302:	eeb0 1a45 	vmov.f32	s2, s10
 810d306:	eef0 1a65 	vmov.f32	s3, s11
 810d30a:	eeb0 2a46 	vmov.f32	s4, s12
 810d30e:	eef0 2a66 	vmov.f32	s5, s13
 810d312:	eeb0 3a47 	vmov.f32	s6, s14
 810d316:	eef0 3a67 	vmov.f32	s7, s15
 810d31a:	3740      	adds	r7, #64	; 0x40
 810d31c:	46bd      	mov	sp, r7
 810d31e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
=======
 810acb6:	bf00      	nop
 810acb8:	3708      	adds	r7, #8
 810acba:	46bd      	mov	sp, r7
 810acbc:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810d324 <bno055_assignI2C>:
#include "bno055_stm32.h"
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810d324:	b480      	push	{r7}
 810d326:	b083      	sub	sp, #12
 810d328:	af00      	add	r7, sp, #0
 810d32a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810d32c:	4a04      	ldr	r2, [pc, #16]	; (810d340 <bno055_assignI2C+0x1c>)
 810d32e:	687b      	ldr	r3, [r7, #4]
 810d330:	6013      	str	r3, [r2, #0]
}
 810d332:	bf00      	nop
 810d334:	370c      	adds	r7, #12
 810d336:	46bd      	mov	sp, r7
 810d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d33c:	4770      	bx	lr
 810d33e:	bf00      	nop
 810d340:	10046664 	.word	0x10046664

0810d344 <bno055_delay>:

void bno055_delay(int time) {
 810d344:	b580      	push	{r7, lr}
 810d346:	b082      	sub	sp, #8
 810d348:	af00      	add	r7, sp, #0
 810d34a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810d34c:	6878      	ldr	r0, [r7, #4]
 810d34e:	f7fc f817 	bl	8109380 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810d352:	bf00      	nop
 810d354:	3708      	adds	r7, #8
 810d356:	46bd      	mov	sp, r7
 810d358:	bd80      	pop	{r7, pc}
	...

0810d35c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 810d35c:	b580      	push	{r7, lr}
 810d35e:	b088      	sub	sp, #32
 810d360:	af02      	add	r7, sp, #8
 810d362:	4603      	mov	r3, r0
 810d364:	460a      	mov	r2, r1
 810d366:	71fb      	strb	r3, [r7, #7]
 810d368:	4613      	mov	r3, r2
 810d36a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 810d36c:	79fb      	ldrb	r3, [r7, #7]
 810d36e:	733b      	strb	r3, [r7, #12]
 810d370:	79bb      	ldrb	r3, [r7, #6]
 810d372:	737b      	strb	r3, [r7, #13]
  uint8_t status;

  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810d374:	4b5a      	ldr	r3, [pc, #360]	; (810d4e0 <bno055_writeData+0x184>)
 810d376:	6818      	ldr	r0, [r3, #0]
 810d378:	f107 020c 	add.w	r2, r7, #12
 810d37c:	230a      	movs	r3, #10
 810d37e:	9300      	str	r3, [sp, #0]
 810d380:	2302      	movs	r3, #2
 810d382:	2150      	movs	r1, #80	; 0x50
 810d384:	f7f7 fff0 	bl	8105368 <HAL_I2C_Master_Transmit>
 810d388:	4603      	mov	r3, r0
 810d38a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);


  if (status == HAL_OK) {
 810d38c:	7dfb      	ldrb	r3, [r7, #23]
 810d38e:	2b00      	cmp	r3, #0
 810d390:	f000 80a0 	beq.w	810d4d4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 810d394:	7dfb      	ldrb	r3, [r7, #23]
 810d396:	2b01      	cmp	r3, #1
 810d398:	d103      	bne.n	810d3a2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 810d39a:	4852      	ldr	r0, [pc, #328]	; (810d4e4 <bno055_writeData+0x188>)
 810d39c:	f004 fbea 	bl	8111b74 <puts>
 810d3a0:	e012      	b.n	810d3c8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 810d3a2:	7dfb      	ldrb	r3, [r7, #23]
 810d3a4:	2b03      	cmp	r3, #3
 810d3a6:	d103      	bne.n	810d3b0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 810d3a8:	484f      	ldr	r0, [pc, #316]	; (810d4e8 <bno055_writeData+0x18c>)
 810d3aa:	f004 fbe3 	bl	8111b74 <puts>
 810d3ae:	e00b      	b.n	810d3c8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 810d3b0:	7dfb      	ldrb	r3, [r7, #23]
 810d3b2:	2b02      	cmp	r3, #2
 810d3b4:	d103      	bne.n	810d3be <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810d3b6:	484d      	ldr	r0, [pc, #308]	; (810d4ec <bno055_writeData+0x190>)
 810d3b8:	f004 fbdc 	bl	8111b74 <puts>
 810d3bc:	e004      	b.n	810d3c8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810d3be:	7dfb      	ldrb	r3, [r7, #23]
 810d3c0:	4619      	mov	r1, r3
 810d3c2:	484b      	ldr	r0, [pc, #300]	; (810d4f0 <bno055_writeData+0x194>)
 810d3c4:	f004 fb50 	bl	8111a68 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 810d3c8:	4b45      	ldr	r3, [pc, #276]	; (810d4e0 <bno055_writeData+0x184>)
 810d3ca:	681b      	ldr	r3, [r3, #0]
 810d3cc:	4618      	mov	r0, r3
 810d3ce:	f7f8 fcf8 	bl	8105dc2 <HAL_I2C_GetError>
 810d3d2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810d3d4:	693b      	ldr	r3, [r7, #16]
 810d3d6:	2b00      	cmp	r3, #0
 810d3d8:	d07e      	beq.n	810d4d8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810d3da:	693b      	ldr	r3, [r7, #16]
 810d3dc:	2b01      	cmp	r3, #1
 810d3de:	d103      	bne.n	810d3e8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 810d3e0:	4844      	ldr	r0, [pc, #272]	; (810d4f4 <bno055_writeData+0x198>)
 810d3e2:	f004 fbc7 	bl	8111b74 <puts>
 810d3e6:	e021      	b.n	810d42c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 810d3e8:	693b      	ldr	r3, [r7, #16]
 810d3ea:	2b02      	cmp	r3, #2
 810d3ec:	d103      	bne.n	810d3f6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810d3ee:	4842      	ldr	r0, [pc, #264]	; (810d4f8 <bno055_writeData+0x19c>)
 810d3f0:	f004 fbc0 	bl	8111b74 <puts>
 810d3f4:	e01a      	b.n	810d42c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 810d3f6:	693b      	ldr	r3, [r7, #16]
 810d3f8:	2b04      	cmp	r3, #4
 810d3fa:	d103      	bne.n	810d404 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810d3fc:	483f      	ldr	r0, [pc, #252]	; (810d4fc <bno055_writeData+0x1a0>)
 810d3fe:	f004 fbb9 	bl	8111b74 <puts>
 810d402:	e013      	b.n	810d42c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 810d404:	693b      	ldr	r3, [r7, #16]
 810d406:	2b08      	cmp	r3, #8
 810d408:	d103      	bne.n	810d412 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810d40a:	483d      	ldr	r0, [pc, #244]	; (810d500 <bno055_writeData+0x1a4>)
 810d40c:	f004 fbb2 	bl	8111b74 <puts>
 810d410:	e00c      	b.n	810d42c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 810d412:	693b      	ldr	r3, [r7, #16]
 810d414:	2b10      	cmp	r3, #16
 810d416:	d103      	bne.n	810d420 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 810d418:	483a      	ldr	r0, [pc, #232]	; (810d504 <bno055_writeData+0x1a8>)
 810d41a:	f004 fbab 	bl	8111b74 <puts>
 810d41e:	e005      	b.n	810d42c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 810d420:	693b      	ldr	r3, [r7, #16]
 810d422:	2b20      	cmp	r3, #32
 810d424:	d102      	bne.n	810d42c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 810d426:	4838      	ldr	r0, [pc, #224]	; (810d508 <bno055_writeData+0x1ac>)
 810d428:	f004 fba4 	bl	8111b74 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810d42c:	4b2c      	ldr	r3, [pc, #176]	; (810d4e0 <bno055_writeData+0x184>)
 810d42e:	681b      	ldr	r3, [r3, #0]
 810d430:	4618      	mov	r0, r3
 810d432:	f7f8 fcb8 	bl	8105da6 <HAL_I2C_GetState>
 810d436:	4603      	mov	r3, r0
 810d438:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810d43a:	7bfb      	ldrb	r3, [r7, #15]
 810d43c:	2b00      	cmp	r3, #0
 810d43e:	d103      	bne.n	810d448 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 810d440:	4832      	ldr	r0, [pc, #200]	; (810d50c <bno055_writeData+0x1b0>)
 810d442:	f004 fb97 	bl	8111b74 <puts>
 810d446:	e048      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 810d448:	7bfb      	ldrb	r3, [r7, #15]
 810d44a:	2b20      	cmp	r3, #32
 810d44c:	d103      	bne.n	810d456 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810d44e:	482f      	ldr	r0, [pc, #188]	; (810d50c <bno055_writeData+0x1b0>)
 810d450:	f004 fb90 	bl	8111b74 <puts>
 810d454:	e041      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 810d456:	7bfb      	ldrb	r3, [r7, #15]
 810d458:	2b24      	cmp	r3, #36	; 0x24
 810d45a:	d103      	bne.n	810d464 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 810d45c:	482c      	ldr	r0, [pc, #176]	; (810d510 <bno055_writeData+0x1b4>)
 810d45e:	f004 fb89 	bl	8111b74 <puts>
 810d462:	e03a      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 810d464:	7bfb      	ldrb	r3, [r7, #15]
 810d466:	2b21      	cmp	r3, #33	; 0x21
 810d468:	d103      	bne.n	810d472 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 810d46a:	482a      	ldr	r0, [pc, #168]	; (810d514 <bno055_writeData+0x1b8>)
 810d46c:	f004 fb82 	bl	8111b74 <puts>
 810d470:	e033      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 810d472:	7bfb      	ldrb	r3, [r7, #15]
 810d474:	2b22      	cmp	r3, #34	; 0x22
 810d476:	d103      	bne.n	810d480 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 810d478:	4827      	ldr	r0, [pc, #156]	; (810d518 <bno055_writeData+0x1bc>)
 810d47a:	f004 fb7b 	bl	8111b74 <puts>
 810d47e:	e02c      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 810d480:	7bfb      	ldrb	r3, [r7, #15]
 810d482:	2b28      	cmp	r3, #40	; 0x28
 810d484:	d103      	bne.n	810d48e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 810d486:	4825      	ldr	r0, [pc, #148]	; (810d51c <bno055_writeData+0x1c0>)
 810d488:	f004 fb74 	bl	8111b74 <puts>
 810d48c:	e025      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 810d48e:	7bfb      	ldrb	r3, [r7, #15]
 810d490:	2b29      	cmp	r3, #41	; 0x29
 810d492:	d103      	bne.n	810d49c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 810d494:	4822      	ldr	r0, [pc, #136]	; (810d520 <bno055_writeData+0x1c4>)
 810d496:	f004 fb6d 	bl	8111b74 <puts>
 810d49a:	e01e      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 810d49c:	7bfb      	ldrb	r3, [r7, #15]
 810d49e:	2b2a      	cmp	r3, #42	; 0x2a
 810d4a0:	d103      	bne.n	810d4aa <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 810d4a2:	4820      	ldr	r0, [pc, #128]	; (810d524 <bno055_writeData+0x1c8>)
 810d4a4:	f004 fb66 	bl	8111b74 <puts>
 810d4a8:	e017      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810d4aa:	7bfb      	ldrb	r3, [r7, #15]
 810d4ac:	2b60      	cmp	r3, #96	; 0x60
 810d4ae:	d103      	bne.n	810d4b8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 810d4b0:	481d      	ldr	r0, [pc, #116]	; (810d528 <bno055_writeData+0x1cc>)
 810d4b2:	f004 fb5f 	bl	8111b74 <puts>
 810d4b6:	e010      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 810d4b8:	7bfb      	ldrb	r3, [r7, #15]
 810d4ba:	2ba0      	cmp	r3, #160	; 0xa0
 810d4bc:	d103      	bne.n	810d4c6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810d4be:	481b      	ldr	r0, [pc, #108]	; (810d52c <bno055_writeData+0x1d0>)
 810d4c0:	f004 fb58 	bl	8111b74 <puts>
 810d4c4:	e009      	b.n	810d4da <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 810d4c6:	7bfb      	ldrb	r3, [r7, #15]
 810d4c8:	2be0      	cmp	r3, #224	; 0xe0
 810d4ca:	d106      	bne.n	810d4da <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810d4cc:	4818      	ldr	r0, [pc, #96]	; (810d530 <bno055_writeData+0x1d4>)
 810d4ce:	f004 fb51 	bl	8111b74 <puts>
 810d4d2:	e002      	b.n	810d4da <bno055_writeData+0x17e>
    return;
 810d4d4:	bf00      	nop
 810d4d6:	e000      	b.n	810d4da <bno055_writeData+0x17e>
    return;
 810d4d8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810d4da:	3718      	adds	r7, #24
 810d4dc:	46bd      	mov	sp, r7
 810d4de:	bd80      	pop	{r7, pc}
 810d4e0:	10046664 	.word	0x10046664
 810d4e4:	081145c8 	.word	0x081145c8
 810d4e8:	081145ec 	.word	0x081145ec
 810d4ec:	08114614 	.word	0x08114614
 810d4f0:	08114638 	.word	0x08114638
 810d4f4:	08114650 	.word	0x08114650
 810d4f8:	08114664 	.word	0x08114664
 810d4fc:	08114678 	.word	0x08114678
 810d500:	0811468c 	.word	0x0811468c
 810d504:	081146a0 	.word	0x081146a0
 810d508:	081146b4 	.word	0x081146b4
 810d50c:	081146cc 	.word	0x081146cc
 810d510:	081146e4 	.word	0x081146e4
 810d514:	081146f8 	.word	0x081146f8
 810d518:	08114710 	.word	0x08114710
 810d51c:	08114728 	.word	0x08114728
 810d520:	08114740 	.word	0x08114740
 810d524:	08114760 	.word	0x08114760
 810d528:	08114780 	.word	0x08114780
 810d52c:	08114798 	.word	0x08114798
 810d530:	081147b0 	.word	0x081147b0

0810d534 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810d534:	b580      	push	{r7, lr}
 810d536:	b084      	sub	sp, #16
 810d538:	af02      	add	r7, sp, #8
 810d53a:	4603      	mov	r3, r0
 810d53c:	6039      	str	r1, [r7, #0]
 810d53e:	71fb      	strb	r3, [r7, #7]
 810d540:	4613      	mov	r3, r2
 810d542:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810d544:	4b0b      	ldr	r3, [pc, #44]	; (810d574 <bno055_readData+0x40>)
 810d546:	6818      	ldr	r0, [r3, #0]
 810d548:	1dfa      	adds	r2, r7, #7
 810d54a:	2364      	movs	r3, #100	; 0x64
 810d54c:	9300      	str	r3, [sp, #0]
 810d54e:	2301      	movs	r3, #1
 810d550:	2150      	movs	r1, #80	; 0x50
 810d552:	f7f7 ff09 	bl	8105368 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 810d556:	4b07      	ldr	r3, [pc, #28]	; (810d574 <bno055_readData+0x40>)
 810d558:	6818      	ldr	r0, [r3, #0]
 810d55a:	79bb      	ldrb	r3, [r7, #6]
 810d55c:	b29b      	uxth	r3, r3
 810d55e:	2264      	movs	r2, #100	; 0x64
 810d560:	9200      	str	r2, [sp, #0]
 810d562:	683a      	ldr	r2, [r7, #0]
 810d564:	2150      	movs	r1, #80	; 0x50
 810d566:	f7f7 fff3 	bl	8105550 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810d56a:	bf00      	nop
 810d56c:	3708      	adds	r7, #8
 810d56e:	46bd      	mov	sp, r7
 810d570:	bd80      	pop	{r7, pc}
 810d572:	bf00      	nop
 810d574:	10046664 	.word	0x10046664

0810d578 <_ZNSt14_Function_baseC1Ev>:
=======
0810acc0 <HX711_delay_ns>:
GPIO_TypeDef *_hx711_di_gpio;
uint32_t _hx711_di_pin;

//#############################################################################################
__STATIC_INLINE void HX711_delay_ns(uint64_t nanoseconds)
{
 810acc0:	b5b0      	push	{r4, r5, r7, lr}
 810acc2:	b084      	sub	sp, #16
 810acc4:	af00      	add	r7, sp, #0
 810acc6:	e9c7 0100 	strd	r0, r1, [r7]
  uint64_t clk_cycle_start = DWT->CYCCNT;
 810acca:	4b1f      	ldr	r3, [pc, #124]	; (810ad48 <HX711_delay_ns+0x88>)
 810accc:	685b      	ldr	r3, [r3, #4]
 810acce:	f04f 0400 	mov.w	r4, #0
 810acd2:	e9c7 3402 	strd	r3, r4, [r7, #8]
  nanoseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 810acd6:	f7fa fc7d 	bl	81055d4 <HAL_RCC_GetHCLKFreq>
 810acda:	4602      	mov	r2, r0
 810acdc:	4b1b      	ldr	r3, [pc, #108]	; (810ad4c <HX711_delay_ns+0x8c>)
 810acde:	fba3 2302 	umull	r2, r3, r3, r2
 810ace2:	0c9b      	lsrs	r3, r3, #18
 810ace4:	f04f 0400 	mov.w	r4, #0
 810ace8:	687a      	ldr	r2, [r7, #4]
 810acea:	fb03 f102 	mul.w	r1, r3, r2
 810acee:	683a      	ldr	r2, [r7, #0]
 810acf0:	fb04 f202 	mul.w	r2, r4, r2
 810acf4:	440a      	add	r2, r1
 810acf6:	6839      	ldr	r1, [r7, #0]
 810acf8:	fba1 3403 	umull	r3, r4, r1, r3
 810acfc:	4422      	add	r2, r4
 810acfe:	4614      	mov	r4, r2
 810ad00:	e9c7 3400 	strd	r3, r4, [r7]
 810ad04:	e9c7 3400 	strd	r3, r4, [r7]
  while ((DWT->CYCCNT - clk_cycle_start) < nanoseconds/1000);
 810ad08:	bf00      	nop
 810ad0a:	4b0f      	ldr	r3, [pc, #60]	; (810ad48 <HX711_delay_ns+0x88>)
 810ad0c:	685b      	ldr	r3, [r3, #4]
 810ad0e:	4619      	mov	r1, r3
 810ad10:	f04f 0200 	mov.w	r2, #0
 810ad14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 810ad18:	1ac9      	subs	r1, r1, r3
 810ad1a:	eb62 0204 	sbc.w	r2, r2, r4
 810ad1e:	460c      	mov	r4, r1
 810ad20:	4615      	mov	r5, r2
 810ad22:	e9d7 0100 	ldrd	r0, r1, [r7]
 810ad26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 810ad2a:	f04f 0300 	mov.w	r3, #0
 810ad2e:	f7f6 f873 	bl	8100e18 <__aeabi_uldivmod>
 810ad32:	4602      	mov	r2, r0
 810ad34:	460b      	mov	r3, r1
 810ad36:	429d      	cmp	r5, r3
 810ad38:	bf08      	it	eq
 810ad3a:	4294      	cmpeq	r4, r2
 810ad3c:	d3e5      	bcc.n	810ad0a <HX711_delay_ns+0x4a>
}
 810ad3e:	bf00      	nop
 810ad40:	3710      	adds	r7, #16
 810ad42:	46bd      	mov	sp, r7
 810ad44:	bdb0      	pop	{r4, r5, r7, pc}
 810ad46:	bf00      	nop
 810ad48:	e0001000 	.word	0xe0001000
 810ad4c:	431bde83 	.word	0x431bde83

0810ad50 <HX711_set_pins>:
void  HX711_set_pins(GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin){
 810ad50:	b480      	push	{r7}
 810ad52:	b085      	sub	sp, #20
 810ad54:	af00      	add	r7, sp, #0
 810ad56:	60f8      	str	r0, [r7, #12]
 810ad58:	60b9      	str	r1, [r7, #8]
 810ad5a:	607a      	str	r2, [r7, #4]
 810ad5c:	603b      	str	r3, [r7, #0]
	_hx711_sck_gpio = sck_gpio;
 810ad5e:	4a09      	ldr	r2, [pc, #36]	; (810ad84 <HX711_set_pins+0x34>)
 810ad60:	68fb      	ldr	r3, [r7, #12]
 810ad62:	6013      	str	r3, [r2, #0]
	_hx711_sck_pin = sck_pin;
 810ad64:	4a08      	ldr	r2, [pc, #32]	; (810ad88 <HX711_set_pins+0x38>)
 810ad66:	68bb      	ldr	r3, [r7, #8]
 810ad68:	6013      	str	r3, [r2, #0]
	_hx711_di_gpio = di_gpio;
 810ad6a:	4a08      	ldr	r2, [pc, #32]	; (810ad8c <HX711_set_pins+0x3c>)
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	6013      	str	r3, [r2, #0]
	_hx711_di_pin = di_pin;
 810ad70:	4a07      	ldr	r2, [pc, #28]	; (810ad90 <HX711_set_pins+0x40>)
 810ad72:	683b      	ldr	r3, [r7, #0]
 810ad74:	6013      	str	r3, [r2, #0]
}
 810ad76:	bf00      	nop
 810ad78:	3714      	adds	r7, #20
 810ad7a:	46bd      	mov	sp, r7
 810ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad80:	4770      	bx	lr
 810ad82:	bf00      	nop
 810ad84:	10009fc8 	.word	0x10009fc8
 810ad88:	10009fc4 	.word	0x10009fc4
 810ad8c:	10009fd0 	.word	0x10009fd0
 810ad90:	10009fcc 	.word	0x10009fcc

0810ad94 <HX711_begin>:
//#############################################################################################
void  HX711_begin(void)
{
 810ad94:	b580      	push	{r7, lr}
 810ad96:	af00      	add	r7, sp, #0
  HX711_init();
 810ad98:	f000 f834 	bl	810ae04 <HX711_init>
  //initialise tick register
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 810ad9c:	4b15      	ldr	r3, [pc, #84]	; (810adf4 <HX711_begin+0x60>)
 810ad9e:	68db      	ldr	r3, [r3, #12]
 810ada0:	4a14      	ldr	r2, [pc, #80]	; (810adf4 <HX711_begin+0x60>)
 810ada2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810ada6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 810ada8:	4b13      	ldr	r3, [pc, #76]	; (810adf8 <HX711_begin+0x64>)
 810adaa:	2200      	movs	r2, #0
 810adac:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 810adae:	4b12      	ldr	r3, [pc, #72]	; (810adf8 <HX711_begin+0x64>)
 810adb0:	681b      	ldr	r3, [r3, #0]
 810adb2:	4a11      	ldr	r2, [pc, #68]	; (810adf8 <HX711_begin+0x64>)
 810adb4:	f043 0301 	orr.w	r3, r3, #1
 810adb8:	6013      	str	r3, [r2, #0]

  //start first reading
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810adba:	4b10      	ldr	r3, [pc, #64]	; (810adfc <HX711_begin+0x68>)
 810adbc:	6818      	ldr	r0, [r3, #0]
 810adbe:	4b10      	ldr	r3, [pc, #64]	; (810ae00 <HX711_begin+0x6c>)
 810adc0:	681b      	ldr	r3, [r3, #0]
 810adc2:	b29b      	uxth	r3, r3
 810adc4:	2201      	movs	r2, #1
 810adc6:	4619      	mov	r1, r3
 810adc8:	f7f9 fff4 	bl	8104db4 <HAL_GPIO_WritePin>
  HX711_delay(10);
 810adcc:	200a      	movs	r0, #10
 810adce:	f7fd f973 	bl	81080b8 <osDelay>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810add2:	4b0a      	ldr	r3, [pc, #40]	; (810adfc <HX711_begin+0x68>)
 810add4:	6818      	ldr	r0, [r3, #0]
 810add6:	4b0a      	ldr	r3, [pc, #40]	; (810ae00 <HX711_begin+0x6c>)
 810add8:	681b      	ldr	r3, [r3, #0]
 810adda:	b29b      	uxth	r3, r3
 810addc:	2200      	movs	r2, #0
 810adde:	4619      	mov	r1, r3
 810ade0:	f7f9 ffe8 	bl	8104db4 <HAL_GPIO_WritePin>
  HX711_delay(10);
 810ade4:	200a      	movs	r0, #10
 810ade6:	f7fd f967 	bl	81080b8 <osDelay>
  HX711_valueAve(8);
 810adea:	2008      	movs	r0, #8
 810adec:	f000 f8c2 	bl	810af74 <HX711_valueAve>
}
 810adf0:	bf00      	nop
 810adf2:	bd80      	pop	{r7, pc}
 810adf4:	e000edf0 	.word	0xe000edf0
 810adf8:	e0001000 	.word	0xe0001000
 810adfc:	10009fc8 	.word	0x10009fc8
 810ae00:	10009fc4 	.word	0x10009fc4

0810ae04 <HX711_init>:
//#############################################################################################
//setup HX711 pins
void  HX711_init(void)
{
 810ae04:	b580      	push	{r7, lr}
 810ae06:	b086      	sub	sp, #24
 810ae08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 810ae0a:	2301      	movs	r3, #1
 810ae0c:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 810ae0e:	2300      	movs	r3, #0
 810ae10:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810ae12:	2302      	movs	r3, #2
 810ae14:	613b      	str	r3, [r7, #16]
  gpio.Pin = _hx711_sck_pin;
 810ae16:	4b0f      	ldr	r3, [pc, #60]	; (810ae54 <HX711_init+0x50>)
 810ae18:	681b      	ldr	r3, [r3, #0]
 810ae1a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_hx711_sck_gpio, &gpio);
 810ae1c:	4b0e      	ldr	r3, [pc, #56]	; (810ae58 <HX711_init+0x54>)
 810ae1e:	681b      	ldr	r3, [r3, #0]
 810ae20:	1d3a      	adds	r2, r7, #4
 810ae22:	4611      	mov	r1, r2
 810ae24:	4618      	mov	r0, r3
 810ae26:	f7f9 fdfd 	bl	8104a24 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 810ae2a:	2300      	movs	r3, #0
 810ae2c:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 810ae2e:	2300      	movs	r3, #0
 810ae30:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810ae32:	2302      	movs	r3, #2
 810ae34:	613b      	str	r3, [r7, #16]
  gpio.Pin = _hx711_di_pin;
 810ae36:	4b09      	ldr	r3, [pc, #36]	; (810ae5c <HX711_init+0x58>)
 810ae38:	681b      	ldr	r3, [r3, #0]
 810ae3a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_hx711_di_gpio, &gpio);
 810ae3c:	4b08      	ldr	r3, [pc, #32]	; (810ae60 <HX711_init+0x5c>)
 810ae3e:	681b      	ldr	r3, [r3, #0]
 810ae40:	1d3a      	adds	r2, r7, #4
 810ae42:	4611      	mov	r1, r2
 810ae44:	4618      	mov	r0, r3
 810ae46:	f7f9 fded 	bl	8104a24 <HAL_GPIO_Init>

}
 810ae4a:	bf00      	nop
 810ae4c:	3718      	adds	r7, #24
 810ae4e:	46bd      	mov	sp, r7
 810ae50:	bd80      	pop	{r7, pc}
 810ae52:	bf00      	nop
 810ae54:	10009fc4 	.word	0x10009fc4
 810ae58:	10009fc8 	.word	0x10009fc8
 810ae5c:	10009fcc 	.word	0x10009fcc
 810ae60:	10009fd0 	.word	0x10009fd0

0810ae64 <HX711_value>:
//#############################################################################################
int32_t HX711_value(void)
{
 810ae64:	b590      	push	{r4, r7, lr}
 810ae66:	b085      	sub	sp, #20
 810ae68:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 810ae6a:	2300      	movs	r3, #0
 810ae6c:	60fb      	str	r3, [r7, #12]
  uint32_t  startTime = HAL_GetTick();
 810ae6e:	f7f7 f9a5 	bl	81021bc <HAL_GetTick>
 810ae72:	6078      	str	r0, [r7, #4]
  while(!HX711_isReady())
 810ae74:	e008      	b.n	810ae88 <HX711_value+0x24>
  {
    if(HAL_GetTick() - startTime > 150)
 810ae76:	f7f7 f9a1 	bl	81021bc <HAL_GetTick>
 810ae7a:	4602      	mov	r2, r0
 810ae7c:	687b      	ldr	r3, [r7, #4]
 810ae7e:	1ad3      	subs	r3, r2, r3
 810ae80:	2b96      	cmp	r3, #150	; 0x96
 810ae82:	d901      	bls.n	810ae88 <HX711_value+0x24>
      return 0;
 810ae84:	2300      	movs	r3, #0
 810ae86:	e068      	b.n	810af5a <HX711_value+0xf6>
  while(!HX711_isReady())
 810ae88:	f000 f8a8 	bl	810afdc <HX711_isReady>
 810ae8c:	4603      	mov	r3, r0
 810ae8e:	2b00      	cmp	r3, #0
 810ae90:	d0f1      	beq.n	810ae76 <HX711_value+0x12>
  }
  for(int8_t i=0; i<24 ; i++)
 810ae92:	2300      	movs	r3, #0
 810ae94:	72fb      	strb	r3, [r7, #11]
 810ae96:	e037      	b.n	810af08 <HX711_value+0xa4>
  {
    HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810ae98:	4b32      	ldr	r3, [pc, #200]	; (810af64 <HX711_value+0x100>)
 810ae9a:	6818      	ldr	r0, [r3, #0]
 810ae9c:	4b32      	ldr	r3, [pc, #200]	; (810af68 <HX711_value+0x104>)
 810ae9e:	681b      	ldr	r3, [r3, #0]
 810aea0:	b29b      	uxth	r3, r3
 810aea2:	2201      	movs	r2, #1
 810aea4:	4619      	mov	r1, r3
 810aea6:	f7f9 ff85 	bl	8104db4 <HAL_GPIO_WritePin>
    HX711_delay_ns(clockPulse);
 810aeaa:	2332      	movs	r3, #50	; 0x32
 810aeac:	f04f 0400 	mov.w	r4, #0
 810aeb0:	4618      	mov	r0, r3
 810aeb2:	4621      	mov	r1, r4
 810aeb4:	f7ff ff04 	bl	810acc0 <HX711_delay_ns>
    data = data << 1;    
 810aeb8:	68fb      	ldr	r3, [r7, #12]
 810aeba:	005b      	lsls	r3, r3, #1
 810aebc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810aebe:	4b29      	ldr	r3, [pc, #164]	; (810af64 <HX711_value+0x100>)
 810aec0:	6818      	ldr	r0, [r3, #0]
 810aec2:	4b29      	ldr	r3, [pc, #164]	; (810af68 <HX711_value+0x104>)
 810aec4:	681b      	ldr	r3, [r3, #0]
 810aec6:	b29b      	uxth	r3, r3
 810aec8:	2200      	movs	r2, #0
 810aeca:	4619      	mov	r1, r3
 810aecc:	f7f9 ff72 	bl	8104db4 <HAL_GPIO_WritePin>
    HX711_delay_ns(clockPulse);
 810aed0:	2332      	movs	r3, #50	; 0x32
 810aed2:	f04f 0400 	mov.w	r4, #0
 810aed6:	4618      	mov	r0, r3
 810aed8:	4621      	mov	r1, r4
 810aeda:	f7ff fef1 	bl	810acc0 <HX711_delay_ns>
    if(HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_SET)
 810aede:	4b23      	ldr	r3, [pc, #140]	; (810af6c <HX711_value+0x108>)
 810aee0:	681a      	ldr	r2, [r3, #0]
 810aee2:	4b23      	ldr	r3, [pc, #140]	; (810af70 <HX711_value+0x10c>)
 810aee4:	681b      	ldr	r3, [r3, #0]
 810aee6:	b29b      	uxth	r3, r3
 810aee8:	4619      	mov	r1, r3
 810aeea:	4610      	mov	r0, r2
 810aeec:	f7f9 ff4a 	bl	8104d84 <HAL_GPIO_ReadPin>
 810aef0:	4603      	mov	r3, r0
 810aef2:	2b01      	cmp	r3, #1
 810aef4:	d102      	bne.n	810aefc <HX711_value+0x98>
      data ++;
 810aef6:	68fb      	ldr	r3, [r7, #12]
 810aef8:	3301      	adds	r3, #1
 810aefa:	60fb      	str	r3, [r7, #12]
  for(int8_t i=0; i<24 ; i++)
 810aefc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810af00:	b2db      	uxtb	r3, r3
 810af02:	3301      	adds	r3, #1
 810af04:	b2db      	uxtb	r3, r3
 810af06:	72fb      	strb	r3, [r7, #11]
 810af08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810af0c:	2b17      	cmp	r3, #23
 810af0e:	ddc3      	ble.n	810ae98 <HX711_value+0x34>
  }
  data = data ^ 0x800000; 
 810af10:	68fb      	ldr	r3, [r7, #12]
 810af12:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 810af16:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810af18:	4b12      	ldr	r3, [pc, #72]	; (810af64 <HX711_value+0x100>)
 810af1a:	6818      	ldr	r0, [r3, #0]
 810af1c:	4b12      	ldr	r3, [pc, #72]	; (810af68 <HX711_value+0x104>)
 810af1e:	681b      	ldr	r3, [r3, #0]
 810af20:	b29b      	uxth	r3, r3
 810af22:	2201      	movs	r2, #1
 810af24:	4619      	mov	r1, r3
 810af26:	f7f9 ff45 	bl	8104db4 <HAL_GPIO_WritePin>
  HX711_delay_ns(clockPulse);
 810af2a:	2332      	movs	r3, #50	; 0x32
 810af2c:	f04f 0400 	mov.w	r4, #0
 810af30:	4618      	mov	r0, r3
 810af32:	4621      	mov	r1, r4
 810af34:	f7ff fec4 	bl	810acc0 <HX711_delay_ns>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810af38:	4b0a      	ldr	r3, [pc, #40]	; (810af64 <HX711_value+0x100>)
 810af3a:	6818      	ldr	r0, [r3, #0]
 810af3c:	4b0a      	ldr	r3, [pc, #40]	; (810af68 <HX711_value+0x104>)
 810af3e:	681b      	ldr	r3, [r3, #0]
 810af40:	b29b      	uxth	r3, r3
 810af42:	2200      	movs	r2, #0
 810af44:	4619      	mov	r1, r3
 810af46:	f7f9 ff35 	bl	8104db4 <HAL_GPIO_WritePin>
  HX711_delay_ns(clockPulse);
 810af4a:	2332      	movs	r3, #50	; 0x32
 810af4c:	f04f 0400 	mov.w	r4, #0
 810af50:	4618      	mov	r0, r3
 810af52:	4621      	mov	r1, r4
 810af54:	f7ff feb4 	bl	810acc0 <HX711_delay_ns>
  return data;    
 810af58:	68fb      	ldr	r3, [r7, #12]
}
 810af5a:	4618      	mov	r0, r3
 810af5c:	3714      	adds	r7, #20
 810af5e:	46bd      	mov	sp, r7
 810af60:	bd90      	pop	{r4, r7, pc}
 810af62:	bf00      	nop
 810af64:	10009fc8 	.word	0x10009fc8
 810af68:	10009fc4 	.word	0x10009fc4
 810af6c:	10009fd0 	.word	0x10009fd0
 810af70:	10009fcc 	.word	0x10009fcc

0810af74 <HX711_valueAve>:
//#############################################################################################
int32_t HX711_valueAve(uint16_t sample)
{
 810af74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 810af78:	b086      	sub	sp, #24
 810af7a:	af00      	add	r7, sp, #0
 810af7c:	4603      	mov	r3, r0
 810af7e:	80fb      	strh	r3, [r7, #6]
  int64_t  ave = 0;
 810af80:	f04f 0300 	mov.w	r3, #0
 810af84:	f04f 0400 	mov.w	r4, #0
 810af88:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 810af8c:	2300      	movs	r3, #0
 810af8e:	81fb      	strh	r3, [r7, #14]
 810af90:	e010      	b.n	810afb4 <HX711_valueAve+0x40>
    ave += HX711_value();
 810af92:	f7ff ff67 	bl	810ae64 <HX711_value>
 810af96:	4603      	mov	r3, r0
 810af98:	469b      	mov	fp, r3
 810af9a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 810af9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810afa2:	eb1b 0301 	adds.w	r3, fp, r1
 810afa6:	eb4c 0402 	adc.w	r4, ip, r2
 810afaa:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 810afae:	89fb      	ldrh	r3, [r7, #14]
 810afb0:	3301      	adds	r3, #1
 810afb2:	81fb      	strh	r3, [r7, #14]
 810afb4:	89fa      	ldrh	r2, [r7, #14]
 810afb6:	88fb      	ldrh	r3, [r7, #6]
 810afb8:	429a      	cmp	r2, r3
 810afba:	d3ea      	bcc.n	810af92 <HX711_valueAve+0x1e>
  return (int32_t)(ave / sample);
 810afbc:	88fb      	ldrh	r3, [r7, #6]
 810afbe:	f04f 0400 	mov.w	r4, #0
 810afc2:	461a      	mov	r2, r3
 810afc4:	4623      	mov	r3, r4
 810afc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 810afca:	f7f5 fed5 	bl	8100d78 <__aeabi_ldivmod>
 810afce:	4603      	mov	r3, r0
 810afd0:	460c      	mov	r4, r1
}
 810afd2:	4618      	mov	r0, r3
 810afd4:	3718      	adds	r7, #24
 810afd6:	46bd      	mov	sp, r7
 810afd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0810afdc <HX711_isReady>:
//#############################################################################################
int HX711_isReady(){
 810afdc:	b580      	push	{r7, lr}
 810afde:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_RESET;
 810afe0:	4b08      	ldr	r3, [pc, #32]	; (810b004 <HX711_isReady+0x28>)
 810afe2:	681a      	ldr	r2, [r3, #0]
 810afe4:	4b08      	ldr	r3, [pc, #32]	; (810b008 <HX711_isReady+0x2c>)
 810afe6:	681b      	ldr	r3, [r3, #0]
 810afe8:	b29b      	uxth	r3, r3
 810afea:	4619      	mov	r1, r3
 810afec:	4610      	mov	r0, r2
 810afee:	f7f9 fec9 	bl	8104d84 <HAL_GPIO_ReadPin>
 810aff2:	4603      	mov	r3, r0
 810aff4:	2b00      	cmp	r3, #0
 810aff6:	bf0c      	ite	eq
 810aff8:	2301      	moveq	r3, #1
 810affa:	2300      	movne	r3, #0
 810affc:	b2db      	uxtb	r3, r3
}
 810affe:	4618      	mov	r0, r3
 810b000:	bd80      	pop	{r7, pc}
 810b002:	bf00      	nop
 810b004:	10009fd0 	.word	0x10009fd0
 810b008:	10009fcc 	.word	0x10009fcc

0810b00c <_ZNSt14_Function_baseC1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
<<<<<<< HEAD
 810d578:	b480      	push	{r7}
 810d57a:	b083      	sub	sp, #12
 810d57c:	af00      	add	r7, sp, #0
 810d57e:	6078      	str	r0, [r7, #4]
 810d580:	687b      	ldr	r3, [r7, #4]
 810d582:	2200      	movs	r2, #0
 810d584:	609a      	str	r2, [r3, #8]
 810d586:	687b      	ldr	r3, [r7, #4]
 810d588:	4618      	mov	r0, r3
 810d58a:	370c      	adds	r7, #12
 810d58c:	46bd      	mov	sp, r7
 810d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d592:	4770      	bx	lr
=======
 810b00c:	b480      	push	{r7}
 810b00e:	b083      	sub	sp, #12
 810b010:	af00      	add	r7, sp, #0
 810b012:	6078      	str	r0, [r7, #4]
 810b014:	687b      	ldr	r3, [r7, #4]
 810b016:	2200      	movs	r2, #0
 810b018:	609a      	str	r2, [r3, #8]
 810b01a:	687b      	ldr	r3, [r7, #4]
 810b01c:	4618      	mov	r0, r3
 810b01e:	370c      	adds	r7, #12
 810b020:	46bd      	mov	sp, r7
 810b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b026:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d594 <_ZNSt14_Function_baseD1Ev>:
=======
0810b028 <_ZNSt14_Function_baseD1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    ~_Function_base()
<<<<<<< HEAD
 810d594:	b580      	push	{r7, lr}
 810d596:	b082      	sub	sp, #8
 810d598:	af00      	add	r7, sp, #0
 810d59a:	6078      	str	r0, [r7, #4]
=======
 810b028:	b580      	push	{r7, lr}
 810b02a:	b082      	sub	sp, #8
 810b02c:	af00      	add	r7, sp, #0
 810b02e:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if (_M_manager)
<<<<<<< HEAD
 810d59c:	687b      	ldr	r3, [r7, #4]
 810d59e:	689b      	ldr	r3, [r3, #8]
 810d5a0:	2b00      	cmp	r3, #0
 810d5a2:	d005      	beq.n	810d5b0 <_ZNSt14_Function_baseD1Ev+0x1c>
=======
 810b030:	687b      	ldr	r3, [r7, #4]
 810b032:	689b      	ldr	r3, [r3, #8]
 810b034:	2b00      	cmp	r3, #0
 810b036:	d005      	beq.n	810b044 <_ZNSt14_Function_baseD1Ev+0x1c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	_M_manager(_M_functor, _M_functor, __destroy_functor);
<<<<<<< HEAD
 810d5a4:	687b      	ldr	r3, [r7, #4]
 810d5a6:	689b      	ldr	r3, [r3, #8]
 810d5a8:	6878      	ldr	r0, [r7, #4]
 810d5aa:	6879      	ldr	r1, [r7, #4]
 810d5ac:	2203      	movs	r2, #3
 810d5ae:	4798      	blx	r3
=======
 810b038:	687b      	ldr	r3, [r7, #4]
 810b03a:	689b      	ldr	r3, [r3, #8]
 810b03c:	6878      	ldr	r0, [r7, #4]
 810b03e:	6879      	ldr	r1, [r7, #4]
 810b040:	2203      	movs	r2, #3
 810b042:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810d5b0:	687b      	ldr	r3, [r7, #4]
 810d5b2:	4618      	mov	r0, r3
 810d5b4:	3708      	adds	r7, #8
 810d5b6:	46bd      	mov	sp, r7
 810d5b8:	bd80      	pop	{r7, pc}
=======
 810b044:	687b      	ldr	r3, [r7, #4]
 810b046:	4618      	mov	r0, r3
 810b048:	3708      	adds	r7, #8
 810b04a:	46bd      	mov	sp, r7
 810b04c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d5ba <_ZNKSt14_Function_base8_M_emptyEv>:
=======
0810b04e <_ZNKSt14_Function_base8_M_emptyEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

    bool _M_empty() const { return !_M_manager; }
<<<<<<< HEAD
 810d5ba:	b480      	push	{r7}
 810d5bc:	b083      	sub	sp, #12
 810d5be:	af00      	add	r7, sp, #0
 810d5c0:	6078      	str	r0, [r7, #4]
 810d5c2:	687b      	ldr	r3, [r7, #4]
 810d5c4:	689b      	ldr	r3, [r3, #8]
 810d5c6:	2b00      	cmp	r3, #0
 810d5c8:	bf0c      	ite	eq
 810d5ca:	2301      	moveq	r3, #1
 810d5cc:	2300      	movne	r3, #0
 810d5ce:	b2db      	uxtb	r3, r3
 810d5d0:	4618      	mov	r0, r3
 810d5d2:	370c      	adds	r7, #12
 810d5d4:	46bd      	mov	sp, r7
 810d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5da:	4770      	bx	lr
=======
 810b04e:	b480      	push	{r7}
 810b050:	b083      	sub	sp, #12
 810b052:	af00      	add	r7, sp, #0
 810b054:	6078      	str	r0, [r7, #4]
 810b056:	687b      	ldr	r3, [r7, #4]
 810b058:	689b      	ldr	r3, [r3, #8]
 810b05a:	2b00      	cmp	r3, #0
 810b05c:	bf0c      	ite	eq
 810b05e:	2301      	moveq	r3, #1
 810b060:	2300      	movne	r3, #0
 810b062:	b2db      	uxtb	r3, r3
 810b064:	4618      	mov	r0, r3
 810b066:	370c      	adds	r7, #12
 810b068:	46bd      	mov	sp, r7
 810b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b06e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d5dc <_ZN8IODriverD1Ev>:
=======
0810b070 <_ZN8IODriverD1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
<<<<<<< HEAD
 810d5dc:	b480      	push	{r7}
 810d5de:	b083      	sub	sp, #12
 810d5e0:	af00      	add	r7, sp, #0
 810d5e2:	6078      	str	r0, [r7, #4]
 810d5e4:	4a04      	ldr	r2, [pc, #16]	; (810d5f8 <_ZN8IODriverD1Ev+0x1c>)
 810d5e6:	687b      	ldr	r3, [r7, #4]
 810d5e8:	601a      	str	r2, [r3, #0]
 810d5ea:	687b      	ldr	r3, [r7, #4]
 810d5ec:	4618      	mov	r0, r3
 810d5ee:	370c      	adds	r7, #12
 810d5f0:	46bd      	mov	sp, r7
 810d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5f6:	4770      	bx	lr
 810d5f8:	08114a28 	.word	0x08114a28
=======
 810b070:	b480      	push	{r7}
 810b072:	b083      	sub	sp, #12
 810b074:	af00      	add	r7, sp, #0
 810b076:	6078      	str	r0, [r7, #4]
 810b078:	4a04      	ldr	r2, [pc, #16]	; (810b08c <_ZN8IODriverD1Ev+0x1c>)
 810b07a:	687b      	ldr	r3, [r7, #4]
 810b07c:	601a      	str	r2, [r3, #0]
 810b07e:	687b      	ldr	r3, [r7, #4]
 810b080:	4618      	mov	r0, r3
 810b082:	370c      	adds	r7, #12
 810b084:	46bd      	mov	sp, r7
 810b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b08a:	4770      	bx	lr
 810b08c:	08110a24 	.word	0x08110a24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d5fc <_ZN8IODriverD0Ev>:
 810d5fc:	b580      	push	{r7, lr}
 810d5fe:	b082      	sub	sp, #8
 810d600:	af00      	add	r7, sp, #0
 810d602:	6078      	str	r0, [r7, #4]
 810d604:	6878      	ldr	r0, [r7, #4]
 810d606:	f7ff ffe9 	bl	810d5dc <_ZN8IODriverD1Ev>
 810d60a:	2104      	movs	r1, #4
 810d60c:	6878      	ldr	r0, [r7, #4]
 810d60e:	f003 fa47 	bl	8110aa0 <_ZdlPvj>
 810d612:	687b      	ldr	r3, [r7, #4]
 810d614:	4618      	mov	r0, r3
 810d616:	3708      	adds	r7, #8
 810d618:	46bd      	mov	sp, r7
 810d61a:	bd80      	pop	{r7, pc}
=======
0810b090 <_ZN8IODriverD0Ev>:
 810b090:	b580      	push	{r7, lr}
 810b092:	b082      	sub	sp, #8
 810b094:	af00      	add	r7, sp, #0
 810b096:	6078      	str	r0, [r7, #4]
 810b098:	6878      	ldr	r0, [r7, #4]
 810b09a:	f7ff ffe9 	bl	810b070 <_ZN8IODriverD1Ev>
 810b09e:	2104      	movs	r1, #4
 810b0a0:	6878      	ldr	r0, [r7, #4]
 810b0a2:	f002 fee4 	bl	810de6e <_ZdlPvj>
 810b0a6:	687b      	ldr	r3, [r7, #4]
 810b0a8:	4618      	mov	r0, r3
 810b0aa:	3708      	adds	r7, #8
 810b0ac:	46bd      	mov	sp, r7
 810b0ae:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d61c <_ZNSt8functionIFvhPhmEED1Ev>:
=======
0810b0b0 <_ZNSt8functionIFvhPhmEED1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
<<<<<<< HEAD
 810d61c:	b580      	push	{r7, lr}
 810d61e:	b082      	sub	sp, #8
 810d620:	af00      	add	r7, sp, #0
 810d622:	6078      	str	r0, [r7, #4]
 810d624:	687b      	ldr	r3, [r7, #4]
 810d626:	4618      	mov	r0, r3
 810d628:	f7ff ffb4 	bl	810d594 <_ZNSt14_Function_baseD1Ev>
 810d62c:	687b      	ldr	r3, [r7, #4]
 810d62e:	4618      	mov	r0, r3
 810d630:	3708      	adds	r7, #8
 810d632:	46bd      	mov	sp, r7
 810d634:	bd80      	pop	{r7, pc}
=======
 810b0b0:	b580      	push	{r7, lr}
 810b0b2:	b082      	sub	sp, #8
 810b0b4:	af00      	add	r7, sp, #0
 810b0b6:	6078      	str	r0, [r7, #4]
 810b0b8:	687b      	ldr	r3, [r7, #4]
 810b0ba:	4618      	mov	r0, r3
 810b0bc:	f7ff ffb4 	bl	810b028 <_ZNSt14_Function_baseD1Ev>
 810b0c0:	687b      	ldr	r3, [r7, #4]
 810b0c2:	4618      	mov	r0, r3
 810b0c4:	3708      	adds	r7, #8
 810b0c6:	46bd      	mov	sp, r7
 810b0c8:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810d638 <_ZN8IODriverC1Ev>:
=======
0810b0cc <_ZN8IODriverC1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
class IODriver {
<<<<<<< HEAD
 810d638:	b480      	push	{r7}
 810d63a:	b083      	sub	sp, #12
 810d63c:	af00      	add	r7, sp, #0
 810d63e:	6078      	str	r0, [r7, #4]
 810d640:	4a04      	ldr	r2, [pc, #16]	; (810d654 <_ZN8IODriverC1Ev+0x1c>)
 810d642:	687b      	ldr	r3, [r7, #4]
 810d644:	601a      	str	r2, [r3, #0]
 810d646:	687b      	ldr	r3, [r7, #4]
 810d648:	4618      	mov	r0, r3
 810d64a:	370c      	adds	r7, #12
 810d64c:	46bd      	mov	sp, r7
 810d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d652:	4770      	bx	lr
 810d654:	08114a28 	.word	0x08114a28
=======
 810b0cc:	b480      	push	{r7}
 810b0ce:	b083      	sub	sp, #12
 810b0d0:	af00      	add	r7, sp, #0
 810b0d2:	6078      	str	r0, [r7, #4]
 810b0d4:	4a04      	ldr	r2, [pc, #16]	; (810b0e8 <_ZN8IODriverC1Ev+0x1c>)
 810b0d6:	687b      	ldr	r3, [r7, #4]
 810b0d8:	601a      	str	r2, [r3, #0]
 810b0da:	687b      	ldr	r3, [r7, #4]
 810b0dc:	4618      	mov	r0, r3
 810b0de:	370c      	adds	r7, #12
 810b0e0:	46bd      	mov	sp, r7
 810b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0e6:	4770      	bx	lr
 810b0e8:	08110a24 	.word	0x08110a24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d658 <_ZN16BufferedIODriverC1EPVhS1_j>:
=======
0810b0ec <_ZN16BufferedIODriverC1EPVhS1_j>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#include <cstring>

#ifdef BUILD_WITH_BUFFERED_IO


BufferedIODriver::BufferedIODriver(volatile uint8_t* bufferStorage, volatile uint8_t* bufferControl, size_t length) : bufferStorage(bufferStorage), bufferControl(bufferControl), bufferLength(length), readIndex(0), receiverFunc(nullptr) {
<<<<<<< HEAD
 810d658:	b580      	push	{r7, lr}
 810d65a:	b084      	sub	sp, #16
 810d65c:	af00      	add	r7, sp, #0
 810d65e:	60f8      	str	r0, [r7, #12]
 810d660:	60b9      	str	r1, [r7, #8]
 810d662:	607a      	str	r2, [r7, #4]
 810d664:	603b      	str	r3, [r7, #0]
 810d666:	68fb      	ldr	r3, [r7, #12]
 810d668:	4618      	mov	r0, r3
 810d66a:	f7ff ffe5 	bl	810d638 <_ZN8IODriverC1Ev>
 810d66e:	4a11      	ldr	r2, [pc, #68]	; (810d6b4 <_ZN16BufferedIODriverC1EPVhS1_j+0x5c>)
 810d670:	68fb      	ldr	r3, [r7, #12]
 810d672:	601a      	str	r2, [r3, #0]
 810d674:	68fb      	ldr	r3, [r7, #12]
 810d676:	68ba      	ldr	r2, [r7, #8]
 810d678:	609a      	str	r2, [r3, #8]
 810d67a:	68fb      	ldr	r3, [r7, #12]
 810d67c:	687a      	ldr	r2, [r7, #4]
 810d67e:	60da      	str	r2, [r3, #12]
 810d680:	68fb      	ldr	r3, [r7, #12]
 810d682:	683a      	ldr	r2, [r7, #0]
 810d684:	611a      	str	r2, [r3, #16]
 810d686:	68fb      	ldr	r3, [r7, #12]
 810d688:	2200      	movs	r2, #0
 810d68a:	829a      	strh	r2, [r3, #20]
 810d68c:	68fb      	ldr	r3, [r7, #12]
 810d68e:	3318      	adds	r3, #24
 810d690:	2100      	movs	r1, #0
 810d692:	4618      	mov	r0, r3
 810d694:	f000 f8b1 	bl	810d7fa <_ZNSt8functionIFvhPhmEEC1EDn>
=======
 810b0ec:	b580      	push	{r7, lr}
 810b0ee:	b084      	sub	sp, #16
 810b0f0:	af00      	add	r7, sp, #0
 810b0f2:	60f8      	str	r0, [r7, #12]
 810b0f4:	60b9      	str	r1, [r7, #8]
 810b0f6:	607a      	str	r2, [r7, #4]
 810b0f8:	603b      	str	r3, [r7, #0]
 810b0fa:	68fb      	ldr	r3, [r7, #12]
 810b0fc:	4618      	mov	r0, r3
 810b0fe:	f7ff ffe5 	bl	810b0cc <_ZN8IODriverC1Ev>
 810b102:	4a11      	ldr	r2, [pc, #68]	; (810b148 <_ZN16BufferedIODriverC1EPVhS1_j+0x5c>)
 810b104:	68fb      	ldr	r3, [r7, #12]
 810b106:	601a      	str	r2, [r3, #0]
 810b108:	68fb      	ldr	r3, [r7, #12]
 810b10a:	68ba      	ldr	r2, [r7, #8]
 810b10c:	609a      	str	r2, [r3, #8]
 810b10e:	68fb      	ldr	r3, [r7, #12]
 810b110:	687a      	ldr	r2, [r7, #4]
 810b112:	60da      	str	r2, [r3, #12]
 810b114:	68fb      	ldr	r3, [r7, #12]
 810b116:	683a      	ldr	r2, [r7, #0]
 810b118:	611a      	str	r2, [r3, #16]
 810b11a:	68fb      	ldr	r3, [r7, #12]
 810b11c:	2200      	movs	r2, #0
 810b11e:	829a      	strh	r2, [r3, #20]
 810b120:	68fb      	ldr	r3, [r7, #12]
 810b122:	3318      	adds	r3, #24
 810b124:	2100      	movs	r1, #0
 810b126:	4618      	mov	r0, r3
 810b128:	f000 f8b1 	bl	810b28e <_ZNSt8functionIFvhPhmEEC1EDn>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	semaphore = xSemaphoreCreateMutex();
<<<<<<< HEAD
 810d698:	2001      	movs	r0, #1
 810d69a:	f7fc fcae 	bl	8109ffa <xQueueCreateMutex>
 810d69e:	4602      	mov	r2, r0
 810d6a0:	68fb      	ldr	r3, [r7, #12]
 810d6a2:	605a      	str	r2, [r3, #4]
=======
 810b12c:	2001      	movs	r0, #1
 810b12e:	f7fd fdec 	bl	8108d0a <xQueueCreateMutex>
 810b132:	4602      	mov	r2, r0
 810b134:	68fb      	ldr	r3, [r7, #12]
 810b136:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	*bufferControl = 0;
<<<<<<< HEAD
 810d6a4:	687b      	ldr	r3, [r7, #4]
 810d6a6:	2200      	movs	r2, #0
 810d6a8:	701a      	strb	r2, [r3, #0]
=======
 810b138:	687b      	ldr	r3, [r7, #4]
 810b13a:	2200      	movs	r2, #0
 810b13c:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810d6aa:	68fb      	ldr	r3, [r7, #12]
 810d6ac:	4618      	mov	r0, r3
 810d6ae:	3710      	adds	r7, #16
 810d6b0:	46bd      	mov	sp, r7
 810d6b2:	bd80      	pop	{r7, pc}
 810d6b4:	08114a10 	.word	0x08114a10
=======
 810b13e:	68fb      	ldr	r3, [r7, #12]
 810b140:	4618      	mov	r0, r3
 810b142:	3710      	adds	r7, #16
 810b144:	46bd      	mov	sp, r7
 810b146:	bd80      	pop	{r7, pc}
 810b148:	08110a0c 	.word	0x08110a0c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d6b8 <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:
=======
0810b14c <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
<<<<<<< HEAD
 810d6b8:	b580      	push	{r7, lr}
 810d6ba:	b082      	sub	sp, #8
 810d6bc:	af00      	add	r7, sp, #0
 810d6be:	6078      	str	r0, [r7, #4]
 810d6c0:	6039      	str	r1, [r7, #0]
=======
 810b14c:	b580      	push	{r7, lr}
 810b14e:	b082      	sub	sp, #8
 810b150:	af00      	add	r7, sp, #0
 810b152:	6078      	str	r0, [r7, #4]
 810b154:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	receiverFunc = receiver;
<<<<<<< HEAD
 810d6c2:	687b      	ldr	r3, [r7, #4]
 810d6c4:	3318      	adds	r3, #24
 810d6c6:	6839      	ldr	r1, [r7, #0]
 810d6c8:	4618      	mov	r0, r3
 810d6ca:	f000 f8a4 	bl	810d816 <_ZNSt8functionIFvhPhmEEaSERKS2_>
=======
 810b156:	687b      	ldr	r3, [r7, #4]
 810b158:	3318      	adds	r3, #24
 810b15a:	6839      	ldr	r1, [r7, #0]
 810b15c:	4618      	mov	r0, r3
 810b15e:	f000 f8a4 	bl	810b2aa <_ZNSt8functionIFvhPhmEEaSERKS2_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810d6ce:	bf00      	nop
 810d6d0:	3708      	adds	r7, #8
 810d6d2:	46bd      	mov	sp, r7
 810d6d4:	bd80      	pop	{r7, pc}
=======
 810b162:	bf00      	nop
 810b164:	3708      	adds	r7, #8
 810b166:	46bd      	mov	sp, r7
 810b168:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d6d6 <_ZN16BufferedIODriver8transmitEPhm>:
=======
0810b16a <_ZN16BufferedIODriver8transmitEPhm>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 * Assumes there is no overrun
 */
void BufferedIODriver::transmit(uint8_t* data, uint32_t length) {
<<<<<<< HEAD
 810d6d6:	b580      	push	{r7, lr}
 810d6d8:	b088      	sub	sp, #32
 810d6da:	af00      	add	r7, sp, #0
 810d6dc:	60f8      	str	r0, [r7, #12]
 810d6de:	60b9      	str	r1, [r7, #8]
 810d6e0:	607a      	str	r2, [r7, #4]
=======
 810b16a:	b580      	push	{r7, lr}
 810b16c:	b088      	sub	sp, #32
 810b16e:	af00      	add	r7, sp, #0
 810b170:	60f8      	str	r0, [r7, #12]
 810b172:	60b9      	str	r1, [r7, #8]
 810b174:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE) {
<<<<<<< HEAD
 810d6e2:	68fb      	ldr	r3, [r7, #12]
 810d6e4:	685b      	ldr	r3, [r3, #4]
 810d6e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 810d6ea:	4618      	mov	r0, r3
 810d6ec:	f7fc fd9c 	bl	810a228 <xQueueSemaphoreTake>
 810d6f0:	4603      	mov	r3, r0
 810d6f2:	2b01      	cmp	r3, #1
 810d6f4:	bf0c      	ite	eq
 810d6f6:	2301      	moveq	r3, #1
 810d6f8:	2300      	movne	r3, #0
 810d6fa:	b2db      	uxtb	r3, r3
 810d6fc:	2b00      	cmp	r3, #0
 810d6fe:	d056      	beq.n	810d7ae <_ZN16BufferedIODriver8transmitEPhm+0xd8>
=======
 810b176:	68fb      	ldr	r3, [r7, #12]
 810b178:	685b      	ldr	r3, [r3, #4]
 810b17a:	f04f 31ff 	mov.w	r1, #4294967295
 810b17e:	4618      	mov	r0, r3
 810b180:	f7fd fed6 	bl	8108f30 <xQueueSemaphoreTake>
 810b184:	4603      	mov	r3, r0
 810b186:	2b01      	cmp	r3, #1
 810b188:	bf0c      	ite	eq
 810b18a:	2301      	moveq	r3, #1
 810b18c:	2300      	movne	r3, #0
 810b18e:	b2db      	uxtb	r3, r3
 810b190:	2b00      	cmp	r3, #0
 810b192:	d056      	beq.n	810b242 <_ZN16BufferedIODriver8transmitEPhm+0xd8>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		while(HAL_HSEM_Take(1, 1) != HAL_OK);
<<<<<<< HEAD
 810d700:	2101      	movs	r1, #1
 810d702:	2001      	movs	r0, #1
 810d704:	f7f7 fd12 	bl	810512c <HAL_HSEM_Take>
 810d708:	4603      	mov	r3, r0
 810d70a:	2b00      	cmp	r3, #0
 810d70c:	bf14      	ite	ne
 810d70e:	2301      	movne	r3, #1
 810d710:	2300      	moveq	r3, #0
 810d712:	b2db      	uxtb	r3, r3
 810d714:	2b00      	cmp	r3, #0
 810d716:	d000      	beq.n	810d71a <_ZN16BufferedIODriver8transmitEPhm+0x44>
 810d718:	e7f2      	b.n	810d700 <_ZN16BufferedIODriver8transmitEPhm+0x2a>
=======
 810b194:	2101      	movs	r1, #1
 810b196:	2001      	movs	r0, #1
 810b198:	f7f9 fe26 	bl	8104de8 <HAL_HSEM_Take>
 810b19c:	4603      	mov	r3, r0
 810b19e:	2b00      	cmp	r3, #0
 810b1a0:	bf14      	ite	ne
 810b1a2:	2301      	movne	r3, #1
 810b1a4:	2300      	moveq	r3, #0
 810b1a6:	b2db      	uxtb	r3, r3
 810b1a8:	2b00      	cmp	r3, #0
 810b1aa:	d000      	beq.n	810b1ae <_ZN16BufferedIODriver8transmitEPhm+0x44>
 810b1ac:	e7f2      	b.n	810b194 <_ZN16BufferedIODriver8transmitEPhm+0x2a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		uint8_t writeIndex = *bufferControl;
<<<<<<< HEAD
 810d71a:	68fb      	ldr	r3, [r7, #12]
 810d71c:	68db      	ldr	r3, [r3, #12]
 810d71e:	781b      	ldrb	r3, [r3, #0]
 810d720:	77fb      	strb	r3, [r7, #31]
=======
 810b1ae:	68fb      	ldr	r3, [r7, #12]
 810b1b0:	68db      	ldr	r3, [r3, #12]
 810b1b2:	781b      	ldrb	r3, [r3, #0]
 810b1b4:	77fb      	strb	r3, [r7, #31]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		uint8_t* buffer = (uint8_t*) bufferStorage;
<<<<<<< HEAD
 810d722:	68fb      	ldr	r3, [r7, #12]
 810d724:	689b      	ldr	r3, [r3, #8]
 810d726:	61bb      	str	r3, [r7, #24]
=======
 810b1b6:	68fb      	ldr	r3, [r7, #12]
 810b1b8:	689b      	ldr	r3, [r3, #8]
 810b1ba:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if(writeIndex + length < bufferLength) {
<<<<<<< HEAD
 810d728:	7ffa      	ldrb	r2, [r7, #31]
 810d72a:	687b      	ldr	r3, [r7, #4]
 810d72c:	441a      	add	r2, r3
 810d72e:	68fb      	ldr	r3, [r7, #12]
 810d730:	691b      	ldr	r3, [r3, #16]
 810d732:	429a      	cmp	r2, r3
 810d734:	d20d      	bcs.n	810d752 <_ZN16BufferedIODriver8transmitEPhm+0x7c>
=======
 810b1bc:	7ffa      	ldrb	r2, [r7, #31]
 810b1be:	687b      	ldr	r3, [r7, #4]
 810b1c0:	441a      	add	r2, r3
 810b1c2:	68fb      	ldr	r3, [r7, #12]
 810b1c4:	691b      	ldr	r3, [r3, #16]
 810b1c6:	429a      	cmp	r2, r3
 810b1c8:	d20d      	bcs.n	810b1e6 <_ZN16BufferedIODriver8transmitEPhm+0x7c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			memcpy(buffer + writeIndex, data, length);
<<<<<<< HEAD
 810d736:	7ffb      	ldrb	r3, [r7, #31]
 810d738:	69ba      	ldr	r2, [r7, #24]
 810d73a:	4413      	add	r3, r2
 810d73c:	687a      	ldr	r2, [r7, #4]
 810d73e:	68b9      	ldr	r1, [r7, #8]
 810d740:	4618      	mov	r0, r3
 810d742:	f003 fd11 	bl	8111168 <memcpy>
=======
 810b1ca:	7ffb      	ldrb	r3, [r7, #31]
 810b1cc:	69ba      	ldr	r2, [r7, #24]
 810b1ce:	4413      	add	r3, r2
 810b1d0:	687a      	ldr	r2, [r7, #4]
 810b1d2:	68b9      	ldr	r1, [r7, #8]
 810b1d4:	4618      	mov	r0, r3
 810b1d6:	f002 ffcf 	bl	810e178 <memcpy>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			writeIndex += length;
<<<<<<< HEAD
 810d746:	687b      	ldr	r3, [r7, #4]
 810d748:	b2da      	uxtb	r2, r3
 810d74a:	7ffb      	ldrb	r3, [r7, #31]
 810d74c:	4413      	add	r3, r2
 810d74e:	77fb      	strb	r3, [r7, #31]
 810d750:	e01e      	b.n	810d790 <_ZN16BufferedIODriver8transmitEPhm+0xba>
=======
 810b1da:	687b      	ldr	r3, [r7, #4]
 810b1dc:	b2da      	uxtb	r2, r3
 810b1de:	7ffb      	ldrb	r3, [r7, #31]
 810b1e0:	4413      	add	r3, r2
 810b1e2:	77fb      	strb	r3, [r7, #31]
 810b1e4:	e01e      	b.n	810b224 <_ZN16BufferedIODriver8transmitEPhm+0xba>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		} else {
			uint16_t firstSize = bufferLength - writeIndex;
<<<<<<< HEAD
 810d752:	68fb      	ldr	r3, [r7, #12]
 810d754:	691b      	ldr	r3, [r3, #16]
 810d756:	b29a      	uxth	r2, r3
 810d758:	7ffb      	ldrb	r3, [r7, #31]
 810d75a:	b29b      	uxth	r3, r3
 810d75c:	1ad3      	subs	r3, r2, r3
 810d75e:	82fb      	strh	r3, [r7, #22]
=======
 810b1e6:	68fb      	ldr	r3, [r7, #12]
 810b1e8:	691b      	ldr	r3, [r3, #16]
 810b1ea:	b29a      	uxth	r2, r3
 810b1ec:	7ffb      	ldrb	r3, [r7, #31]
 810b1ee:	b29b      	uxth	r3, r3
 810b1f0:	1ad3      	subs	r3, r2, r3
 810b1f2:	82fb      	strh	r3, [r7, #22]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			memcpy(buffer + writeIndex, data, firstSize);
<<<<<<< HEAD
 810d760:	7ffb      	ldrb	r3, [r7, #31]
 810d762:	69ba      	ldr	r2, [r7, #24]
 810d764:	4413      	add	r3, r2
 810d766:	8afa      	ldrh	r2, [r7, #22]
 810d768:	68b9      	ldr	r1, [r7, #8]
 810d76a:	4618      	mov	r0, r3
 810d76c:	f003 fcfc 	bl	8111168 <memcpy>
=======
 810b1f4:	7ffb      	ldrb	r3, [r7, #31]
 810b1f6:	69ba      	ldr	r2, [r7, #24]
 810b1f8:	4413      	add	r3, r2
 810b1fa:	8afa      	ldrh	r2, [r7, #22]
 810b1fc:	68b9      	ldr	r1, [r7, #8]
 810b1fe:	4618      	mov	r0, r3
 810b200:	f002 ffba 	bl	810e178 <memcpy>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			memcpy(buffer, data + firstSize, length - firstSize);
<<<<<<< HEAD
 810d770:	8afb      	ldrh	r3, [r7, #22]
 810d772:	68ba      	ldr	r2, [r7, #8]
 810d774:	18d1      	adds	r1, r2, r3
 810d776:	8afb      	ldrh	r3, [r7, #22]
 810d778:	687a      	ldr	r2, [r7, #4]
 810d77a:	1ad3      	subs	r3, r2, r3
 810d77c:	461a      	mov	r2, r3
 810d77e:	69b8      	ldr	r0, [r7, #24]
 810d780:	f003 fcf2 	bl	8111168 <memcpy>
=======
 810b204:	8afb      	ldrh	r3, [r7, #22]
 810b206:	68ba      	ldr	r2, [r7, #8]
 810b208:	18d1      	adds	r1, r2, r3
 810b20a:	8afb      	ldrh	r3, [r7, #22]
 810b20c:	687a      	ldr	r2, [r7, #4]
 810b20e:	1ad3      	subs	r3, r2, r3
 810b210:	461a      	mov	r2, r3
 810b212:	69b8      	ldr	r0, [r7, #24]
 810b214:	f002 ffb0 	bl	810e178 <memcpy>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			writeIndex = length - firstSize;
<<<<<<< HEAD
 810d784:	687b      	ldr	r3, [r7, #4]
 810d786:	b2da      	uxtb	r2, r3
 810d788:	8afb      	ldrh	r3, [r7, #22]
 810d78a:	b2db      	uxtb	r3, r3
 810d78c:	1ad3      	subs	r3, r2, r3
 810d78e:	77fb      	strb	r3, [r7, #31]
=======
 810b218:	687b      	ldr	r3, [r7, #4]
 810b21a:	b2da      	uxtb	r2, r3
 810b21c:	8afb      	ldrh	r3, [r7, #22]
 810b21e:	b2db      	uxtb	r3, r3
 810b220:	1ad3      	subs	r3, r2, r3
 810b222:	77fb      	strb	r3, [r7, #31]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		*bufferControl = writeIndex;
<<<<<<< HEAD
 810d790:	68fb      	ldr	r3, [r7, #12]
 810d792:	68db      	ldr	r3, [r3, #12]
 810d794:	7ffa      	ldrb	r2, [r7, #31]
 810d796:	701a      	strb	r2, [r3, #0]
=======
 810b224:	68fb      	ldr	r3, [r7, #12]
 810b226:	68db      	ldr	r3, [r3, #12]
 810b228:	7ffa      	ldrb	r2, [r7, #31]
 810b22a:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		HAL_HSEM_Release(1, 1);
<<<<<<< HEAD
 810d798:	2101      	movs	r1, #1
 810d79a:	2001      	movs	r0, #1
 810d79c:	f7f7 fd00 	bl	81051a0 <HAL_HSEM_Release>
=======
 810b22c:	2101      	movs	r1, #1
 810b22e:	2001      	movs	r0, #1
 810b230:	f7f9 fe14 	bl	8104e5c <HAL_HSEM_Release>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		xSemaphoreGive(semaphore);
<<<<<<< HEAD
 810d7a0:	68fb      	ldr	r3, [r7, #12]
 810d7a2:	6858      	ldr	r0, [r3, #4]
 810d7a4:	2300      	movs	r3, #0
 810d7a6:	2200      	movs	r2, #0
 810d7a8:	2100      	movs	r1, #0
 810d7aa:	f7fc fc3f 	bl	810a02c <xQueueGenericSend>
=======
 810b234:	68fb      	ldr	r3, [r7, #12]
 810b236:	6858      	ldr	r0, [r3, #4]
 810b238:	2300      	movs	r3, #0
 810b23a:	2200      	movs	r2, #0
 810b23c:	2100      	movs	r1, #0
 810b23e:	f7fd fd7d 	bl	8108d3c <xQueueGenericSend>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
}
<<<<<<< HEAD
 810d7ae:	bf00      	nop
 810d7b0:	3720      	adds	r7, #32
 810d7b2:	46bd      	mov	sp, r7
 810d7b4:	bd80      	pop	{r7, pc}
=======
 810b242:	bf00      	nop
 810b244:	3720      	adds	r7, #32
 810b246:	46bd      	mov	sp, r7
 810b248:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d7b6 <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
=======
0810b24a <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
<<<<<<< HEAD
 810d7b6:	b580      	push	{r7, lr}
 810d7b8:	b082      	sub	sp, #8
 810d7ba:	af00      	add	r7, sp, #0
 810d7bc:	6078      	str	r0, [r7, #4]
 810d7be:	6039      	str	r1, [r7, #0]
=======
 810b24a:	b580      	push	{r7, lr}
 810b24c:	b082      	sub	sp, #8
 810b24e:	af00      	add	r7, sp, #0
 810b250:	6078      	str	r0, [r7, #4]
 810b252:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    function(const function& __x)
    : _Function_base()
<<<<<<< HEAD
 810d7c0:	687b      	ldr	r3, [r7, #4]
 810d7c2:	4618      	mov	r0, r3
 810d7c4:	f7ff fed8 	bl	810d578 <_ZNSt14_Function_baseC1Ev>
=======
 810b254:	687b      	ldr	r3, [r7, #4]
 810b256:	4618      	mov	r0, r3
 810b258:	f7ff fed8 	bl	810b00c <_ZNSt14_Function_baseC1Ev>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      if (static_cast<bool>(__x))
<<<<<<< HEAD
 810d7c8:	6838      	ldr	r0, [r7, #0]
 810d7ca:	f000 f83f 	bl	810d84c <_ZNKSt8functionIFvhPhmEEcvbEv>
 810d7ce:	4603      	mov	r3, r0
 810d7d0:	2b00      	cmp	r3, #0
 810d7d2:	d00d      	beq.n	810d7f0 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
=======
 810b25c:	6838      	ldr	r0, [r7, #0]
 810b25e:	f000 f83f 	bl	810b2e0 <_ZNKSt8functionIFvhPhmEEcvbEv>
 810b262:	4603      	mov	r3, r0
 810b264:	2b00      	cmp	r3, #0
 810b266:	d00d      	beq.n	810b284 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
<<<<<<< HEAD
 810d7d4:	683b      	ldr	r3, [r7, #0]
 810d7d6:	689b      	ldr	r3, [r3, #8]
 810d7d8:	6878      	ldr	r0, [r7, #4]
 810d7da:	6839      	ldr	r1, [r7, #0]
 810d7dc:	2202      	movs	r2, #2
 810d7de:	4798      	blx	r3
=======
 810b268:	683b      	ldr	r3, [r7, #0]
 810b26a:	689b      	ldr	r3, [r3, #8]
 810b26c:	6878      	ldr	r0, [r7, #4]
 810b26e:	6839      	ldr	r1, [r7, #0]
 810b270:	2202      	movs	r2, #2
 810b272:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	  _M_invoker = __x._M_invoker;
<<<<<<< HEAD
 810d7e0:	683b      	ldr	r3, [r7, #0]
 810d7e2:	68da      	ldr	r2, [r3, #12]
 810d7e4:	687b      	ldr	r3, [r7, #4]
 810d7e6:	60da      	str	r2, [r3, #12]
=======
 810b274:	683b      	ldr	r3, [r7, #0]
 810b276:	68da      	ldr	r2, [r3, #12]
 810b278:	687b      	ldr	r3, [r7, #4]
 810b27a:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	  _M_manager = __x._M_manager;
<<<<<<< HEAD
 810d7e8:	683b      	ldr	r3, [r7, #0]
 810d7ea:	689a      	ldr	r2, [r3, #8]
 810d7ec:	687b      	ldr	r3, [r7, #4]
 810d7ee:	609a      	str	r2, [r3, #8]
=======
 810b27c:	683b      	ldr	r3, [r7, #0]
 810b27e:	689a      	ldr	r2, [r3, #8]
 810b280:	687b      	ldr	r3, [r7, #4]
 810b282:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
    }
<<<<<<< HEAD
 810d7f0:	687b      	ldr	r3, [r7, #4]
 810d7f2:	4618      	mov	r0, r3
 810d7f4:	3708      	adds	r7, #8
 810d7f6:	46bd      	mov	sp, r7
 810d7f8:	bd80      	pop	{r7, pc}
=======
 810b284:	687b      	ldr	r3, [r7, #4]
 810b286:	4618      	mov	r0, r3
 810b288:	3708      	adds	r7, #8
 810b28a:	46bd      	mov	sp, r7
 810b28c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d7fa <_ZNSt8functionIFvhPhmEEC1EDn>:
=======
0810b28e <_ZNSt8functionIFvhPhmEEC1EDn>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      function(nullptr_t) noexcept
<<<<<<< HEAD
 810d7fa:	b580      	push	{r7, lr}
 810d7fc:	b082      	sub	sp, #8
 810d7fe:	af00      	add	r7, sp, #0
 810d800:	6078      	str	r0, [r7, #4]
 810d802:	6039      	str	r1, [r7, #0]
=======
 810b28e:	b580      	push	{r7, lr}
 810b290:	b082      	sub	sp, #8
 810b292:	af00      	add	r7, sp, #0
 810b294:	6078      	str	r0, [r7, #4]
 810b296:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      : _Function_base() { }
<<<<<<< HEAD
 810d804:	687b      	ldr	r3, [r7, #4]
 810d806:	4618      	mov	r0, r3
 810d808:	f7ff feb6 	bl	810d578 <_ZNSt14_Function_baseC1Ev>
 810d80c:	687b      	ldr	r3, [r7, #4]
 810d80e:	4618      	mov	r0, r3
 810d810:	3708      	adds	r7, #8
 810d812:	46bd      	mov	sp, r7
 810d814:	bd80      	pop	{r7, pc}
=======
 810b298:	687b      	ldr	r3, [r7, #4]
 810b29a:	4618      	mov	r0, r3
 810b29c:	f7ff feb6 	bl	810b00c <_ZNSt14_Function_baseC1Ev>
 810b2a0:	687b      	ldr	r3, [r7, #4]
 810b2a2:	4618      	mov	r0, r3
 810b2a4:	3708      	adds	r7, #8
 810b2a6:	46bd      	mov	sp, r7
 810b2a8:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d816 <_ZNSt8functionIFvhPhmEEaSERKS2_>:
=======
0810b2aa <_ZNSt8functionIFvhPhmEEaSERKS2_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      operator=(const function& __x)
<<<<<<< HEAD
 810d816:	b580      	push	{r7, lr}
 810d818:	b086      	sub	sp, #24
 810d81a:	af00      	add	r7, sp, #0
 810d81c:	6078      	str	r0, [r7, #4]
 810d81e:	6039      	str	r1, [r7, #0]
=======
 810b2aa:	b580      	push	{r7, lr}
 810b2ac:	b086      	sub	sp, #24
 810b2ae:	af00      	add	r7, sp, #0
 810b2b0:	6078      	str	r0, [r7, #4]
 810b2b2:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	function(__x).swap(*this);
<<<<<<< HEAD
 810d820:	f107 0308 	add.w	r3, r7, #8
 810d824:	6839      	ldr	r1, [r7, #0]
 810d826:	4618      	mov	r0, r3
 810d828:	f7ff ffc5 	bl	810d7b6 <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 810d82c:	f107 0308 	add.w	r3, r7, #8
 810d830:	6879      	ldr	r1, [r7, #4]
 810d832:	4618      	mov	r0, r3
 810d834:	f000 f81a 	bl	810d86c <_ZNSt8functionIFvhPhmEE4swapERS2_>
 810d838:	f107 0308 	add.w	r3, r7, #8
 810d83c:	4618      	mov	r0, r3
 810d83e:	f7ff feed 	bl	810d61c <_ZNSt8functionIFvhPhmEED1Ev>
=======
 810b2b4:	f107 0308 	add.w	r3, r7, #8
 810b2b8:	6839      	ldr	r1, [r7, #0]
 810b2ba:	4618      	mov	r0, r3
 810b2bc:	f7ff ffc5 	bl	810b24a <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 810b2c0:	f107 0308 	add.w	r3, r7, #8
 810b2c4:	6879      	ldr	r1, [r7, #4]
 810b2c6:	4618      	mov	r0, r3
 810b2c8:	f000 f81a 	bl	810b300 <_ZNSt8functionIFvhPhmEE4swapERS2_>
 810b2cc:	f107 0308 	add.w	r3, r7, #8
 810b2d0:	4618      	mov	r0, r3
 810b2d2:	f7ff feed 	bl	810b0b0 <_ZNSt8functionIFvhPhmEED1Ev>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	return *this;
<<<<<<< HEAD
 810d842:	687b      	ldr	r3, [r7, #4]
=======
 810b2d6:	687b      	ldr	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
<<<<<<< HEAD
 810d844:	4618      	mov	r0, r3
 810d846:	3718      	adds	r7, #24
 810d848:	46bd      	mov	sp, r7
 810d84a:	bd80      	pop	{r7, pc}
=======
 810b2d8:	4618      	mov	r0, r3
 810b2da:	3718      	adds	r7, #24
 810b2dc:	46bd      	mov	sp, r7
 810b2de:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d84c <_ZNKSt8functionIFvhPhmEEcvbEv>:
=======
0810b2e0 <_ZNKSt8functionIFvhPhmEEcvbEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      explicit operator bool() const noexcept
<<<<<<< HEAD
 810d84c:	b580      	push	{r7, lr}
 810d84e:	b082      	sub	sp, #8
 810d850:	af00      	add	r7, sp, #0
 810d852:	6078      	str	r0, [r7, #4]
=======
 810b2e0:	b580      	push	{r7, lr}
 810b2e2:	b082      	sub	sp, #8
 810b2e4:	af00      	add	r7, sp, #0
 810b2e6:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      { return !_M_empty(); }
<<<<<<< HEAD
 810d854:	687b      	ldr	r3, [r7, #4]
 810d856:	4618      	mov	r0, r3
 810d858:	f7ff feaf 	bl	810d5ba <_ZNKSt14_Function_base8_M_emptyEv>
 810d85c:	4603      	mov	r3, r0
 810d85e:	f083 0301 	eor.w	r3, r3, #1
 810d862:	b2db      	uxtb	r3, r3
 810d864:	4618      	mov	r0, r3
 810d866:	3708      	adds	r7, #8
 810d868:	46bd      	mov	sp, r7
 810d86a:	bd80      	pop	{r7, pc}
=======
 810b2e8:	687b      	ldr	r3, [r7, #4]
 810b2ea:	4618      	mov	r0, r3
 810b2ec:	f7ff feaf 	bl	810b04e <_ZNKSt14_Function_base8_M_emptyEv>
 810b2f0:	4603      	mov	r3, r0
 810b2f2:	f083 0301 	eor.w	r3, r3, #1
 810b2f6:	b2db      	uxtb	r3, r3
 810b2f8:	4618      	mov	r0, r3
 810b2fa:	3708      	adds	r7, #8
 810b2fc:	46bd      	mov	sp, r7
 810b2fe:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d86c <_ZNSt8functionIFvhPhmEE4swapERS2_>:
=======
0810b300 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      void swap(function& __x) noexcept
<<<<<<< HEAD
 810d86c:	b580      	push	{r7, lr}
 810d86e:	b082      	sub	sp, #8
 810d870:	af00      	add	r7, sp, #0
 810d872:	6078      	str	r0, [r7, #4]
 810d874:	6039      	str	r1, [r7, #0]
=======
 810b300:	b580      	push	{r7, lr}
 810b302:	b082      	sub	sp, #8
 810b304:	af00      	add	r7, sp, #0
 810b306:	6078      	str	r0, [r7, #4]
 810b308:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	std::swap(_M_functor, __x._M_functor);
<<<<<<< HEAD
 810d876:	687b      	ldr	r3, [r7, #4]
 810d878:	683a      	ldr	r2, [r7, #0]
 810d87a:	4611      	mov	r1, r2
 810d87c:	4618      	mov	r0, r3
 810d87e:	f000 f821 	bl	810d8c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
=======
 810b30a:	687b      	ldr	r3, [r7, #4]
 810b30c:	683a      	ldr	r2, [r7, #0]
 810b30e:	4611      	mov	r1, r2
 810b310:	4618      	mov	r0, r3
 810b312:	f000 f821 	bl	810b358 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	std::swap(_M_manager, __x._M_manager);
<<<<<<< HEAD
 810d882:	687b      	ldr	r3, [r7, #4]
 810d884:	f103 0208 	add.w	r2, r3, #8
 810d888:	683b      	ldr	r3, [r7, #0]
 810d88a:	3308      	adds	r3, #8
 810d88c:	4619      	mov	r1, r3
 810d88e:	4610      	mov	r0, r2
 810d890:	f000 f84a 	bl	810d928 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
=======
 810b316:	687b      	ldr	r3, [r7, #4]
 810b318:	f103 0208 	add.w	r2, r3, #8
 810b31c:	683b      	ldr	r3, [r7, #0]
 810b31e:	3308      	adds	r3, #8
 810b320:	4619      	mov	r1, r3
 810b322:	4610      	mov	r0, r2
 810b324:	f000 f84a 	bl	810b3bc <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	std::swap(_M_invoker, __x._M_invoker);
<<<<<<< HEAD
 810d894:	687b      	ldr	r3, [r7, #4]
 810d896:	f103 020c 	add.w	r2, r3, #12
 810d89a:	683b      	ldr	r3, [r7, #0]
 810d89c:	330c      	adds	r3, #12
 810d89e:	4619      	mov	r1, r3
 810d8a0:	4610      	mov	r0, r2
 810d8a2:	f000 f86b 	bl	810d97c <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
=======
 810b328:	687b      	ldr	r3, [r7, #4]
 810b32a:	f103 020c 	add.w	r2, r3, #12
 810b32e:	683b      	ldr	r3, [r7, #0]
 810b330:	330c      	adds	r3, #12
 810b332:	4619      	mov	r1, r3
 810b334:	4610      	mov	r0, r2
 810b336:	f000 f86b 	bl	810b410 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
<<<<<<< HEAD
 810d8a6:	bf00      	nop
 810d8a8:	3708      	adds	r7, #8
 810d8aa:	46bd      	mov	sp, r7
 810d8ac:	bd80      	pop	{r7, pc}
=======
 810b33a:	bf00      	nop
 810b33c:	3708      	adds	r7, #8
 810b33e:	46bd      	mov	sp, r7
 810b340:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d8ae <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
=======
0810b342 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
<<<<<<< HEAD
 810d8ae:	b480      	push	{r7}
 810d8b0:	b083      	sub	sp, #12
 810d8b2:	af00      	add	r7, sp, #0
 810d8b4:	6078      	str	r0, [r7, #4]
=======
 810b342:	b480      	push	{r7}
 810b344:	b083      	sub	sp, #12
 810b346:	af00      	add	r7, sp, #0
 810b348:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
<<<<<<< HEAD
 810d8b6:	687b      	ldr	r3, [r7, #4]
 810d8b8:	4618      	mov	r0, r3
 810d8ba:	370c      	adds	r7, #12
 810d8bc:	46bd      	mov	sp, r7
 810d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8c2:	4770      	bx	lr
=======
 810b34a:	687b      	ldr	r3, [r7, #4]
 810b34c:	4618      	mov	r0, r3
 810b34e:	370c      	adds	r7, #12
 810b350:	46bd      	mov	sp, r7
 810b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b356:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d8c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
=======
0810b358 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
<<<<<<< HEAD
 810d8c4:	b580      	push	{r7, lr}
 810d8c6:	b084      	sub	sp, #16
 810d8c8:	af00      	add	r7, sp, #0
 810d8ca:	6078      	str	r0, [r7, #4]
 810d8cc:	6039      	str	r1, [r7, #0]
=======
 810b358:	b580      	push	{r7, lr}
 810b35a:	b084      	sub	sp, #16
 810b35c:	af00      	add	r7, sp, #0
 810b35e:	6078      	str	r0, [r7, #4]
 810b360:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
<<<<<<< HEAD
 810d8ce:	6878      	ldr	r0, [r7, #4]
 810d8d0:	f7ff ffed 	bl	810d8ae <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810d8d4:	4602      	mov	r2, r0
 810d8d6:	f107 0308 	add.w	r3, r7, #8
 810d8da:	e892 0003 	ldmia.w	r2, {r0, r1}
 810d8de:	e883 0003 	stmia.w	r3, {r0, r1}
=======
 810b362:	6878      	ldr	r0, [r7, #4]
 810b364:	f7ff ffed 	bl	810b342 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810b368:	4602      	mov	r2, r0
 810b36a:	f107 0308 	add.w	r3, r7, #8
 810b36e:	e892 0003 	ldmia.w	r2, {r0, r1}
 810b372:	e883 0003 	stmia.w	r3, {r0, r1}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __a = _GLIBCXX_MOVE(__b);
<<<<<<< HEAD
 810d8e2:	6838      	ldr	r0, [r7, #0]
 810d8e4:	f7ff ffe3 	bl	810d8ae <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810d8e8:	4602      	mov	r2, r0
 810d8ea:	687b      	ldr	r3, [r7, #4]
 810d8ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 810d8f0:	e883 0003 	stmia.w	r3, {r0, r1}
=======
 810b376:	6838      	ldr	r0, [r7, #0]
 810b378:	f7ff ffe3 	bl	810b342 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810b37c:	4602      	mov	r2, r0
 810b37e:	687b      	ldr	r3, [r7, #4]
 810b380:	e892 0003 	ldmia.w	r2, {r0, r1}
 810b384:	e883 0003 	stmia.w	r3, {r0, r1}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __b = _GLIBCXX_MOVE(__tmp);
<<<<<<< HEAD
 810d8f4:	f107 0308 	add.w	r3, r7, #8
 810d8f8:	4618      	mov	r0, r3
 810d8fa:	f7ff ffd8 	bl	810d8ae <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810d8fe:	4602      	mov	r2, r0
 810d900:	683b      	ldr	r3, [r7, #0]
 810d902:	e892 0003 	ldmia.w	r2, {r0, r1}
 810d906:	e883 0003 	stmia.w	r3, {r0, r1}
=======
 810b388:	f107 0308 	add.w	r3, r7, #8
 810b38c:	4618      	mov	r0, r3
 810b38e:	f7ff ffd8 	bl	810b342 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810b392:	4602      	mov	r2, r0
 810b394:	683b      	ldr	r3, [r7, #0]
 810b396:	e892 0003 	ldmia.w	r2, {r0, r1}
 810b39a:	e883 0003 	stmia.w	r3, {r0, r1}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810d90a:	bf00      	nop
 810d90c:	3710      	adds	r7, #16
 810d90e:	46bd      	mov	sp, r7
 810d910:	bd80      	pop	{r7, pc}
=======
 810b39e:	bf00      	nop
 810b3a0:	3710      	adds	r7, #16
 810b3a2:	46bd      	mov	sp, r7
 810b3a4:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d912 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
=======
0810b3a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    move(_Tp&& __t) noexcept
<<<<<<< HEAD
 810d912:	b480      	push	{r7}
 810d914:	b083      	sub	sp, #12
 810d916:	af00      	add	r7, sp, #0
 810d918:	6078      	str	r0, [r7, #4]
=======
 810b3a6:	b480      	push	{r7}
 810b3a8:	b083      	sub	sp, #12
 810b3aa:	af00      	add	r7, sp, #0
 810b3ac:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
<<<<<<< HEAD
 810d91a:	687b      	ldr	r3, [r7, #4]
 810d91c:	4618      	mov	r0, r3
 810d91e:	370c      	adds	r7, #12
 810d920:	46bd      	mov	sp, r7
 810d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d926:	4770      	bx	lr
=======
 810b3ae:	687b      	ldr	r3, [r7, #4]
 810b3b0:	4618      	mov	r0, r3
 810b3b2:	370c      	adds	r7, #12
 810b3b4:	46bd      	mov	sp, r7
 810b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3ba:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d928 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
=======
0810b3bc <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    swap(_Tp& __a, _Tp& __b)
<<<<<<< HEAD
 810d928:	b580      	push	{r7, lr}
 810d92a:	b084      	sub	sp, #16
 810d92c:	af00      	add	r7, sp, #0
 810d92e:	6078      	str	r0, [r7, #4]
 810d930:	6039      	str	r1, [r7, #0]
=======
 810b3bc:	b580      	push	{r7, lr}
 810b3be:	b084      	sub	sp, #16
 810b3c0:	af00      	add	r7, sp, #0
 810b3c2:	6078      	str	r0, [r7, #4]
 810b3c4:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      _Tp __tmp = _GLIBCXX_MOVE(__a);
<<<<<<< HEAD
 810d932:	6878      	ldr	r0, [r7, #4]
 810d934:	f7ff ffed 	bl	810d912 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810d938:	4603      	mov	r3, r0
 810d93a:	681b      	ldr	r3, [r3, #0]
 810d93c:	60fb      	str	r3, [r7, #12]
=======
 810b3c6:	6878      	ldr	r0, [r7, #4]
 810b3c8:	f7ff ffed 	bl	810b3a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810b3cc:	4603      	mov	r3, r0
 810b3ce:	681b      	ldr	r3, [r3, #0]
 810b3d0:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __a = _GLIBCXX_MOVE(__b);
<<<<<<< HEAD
 810d93e:	6838      	ldr	r0, [r7, #0]
 810d940:	f7ff ffe7 	bl	810d912 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810d944:	4603      	mov	r3, r0
 810d946:	681a      	ldr	r2, [r3, #0]
 810d948:	687b      	ldr	r3, [r7, #4]
 810d94a:	601a      	str	r2, [r3, #0]
=======
 810b3d2:	6838      	ldr	r0, [r7, #0]
 810b3d4:	f7ff ffe7 	bl	810b3a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810b3d8:	4603      	mov	r3, r0
 810b3da:	681a      	ldr	r2, [r3, #0]
 810b3dc:	687b      	ldr	r3, [r7, #4]
 810b3de:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __b = _GLIBCXX_MOVE(__tmp);
<<<<<<< HEAD
 810d94c:	f107 030c 	add.w	r3, r7, #12
 810d950:	4618      	mov	r0, r3
 810d952:	f7ff ffde 	bl	810d912 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810d956:	4603      	mov	r3, r0
 810d958:	681a      	ldr	r2, [r3, #0]
 810d95a:	683b      	ldr	r3, [r7, #0]
 810d95c:	601a      	str	r2, [r3, #0]
=======
 810b3e0:	f107 030c 	add.w	r3, r7, #12
 810b3e4:	4618      	mov	r0, r3
 810b3e6:	f7ff ffde 	bl	810b3a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810b3ea:	4603      	mov	r3, r0
 810b3ec:	681a      	ldr	r2, [r3, #0]
 810b3ee:	683b      	ldr	r3, [r7, #0]
 810b3f0:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810d95e:	bf00      	nop
 810d960:	3710      	adds	r7, #16
 810d962:	46bd      	mov	sp, r7
 810d964:	bd80      	pop	{r7, pc}
=======
 810b3f2:	bf00      	nop
 810b3f4:	3710      	adds	r7, #16
 810b3f6:	46bd      	mov	sp, r7
 810b3f8:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d966 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
=======
0810b3fa <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    move(_Tp&& __t) noexcept
<<<<<<< HEAD
 810d966:	b480      	push	{r7}
 810d968:	b083      	sub	sp, #12
 810d96a:	af00      	add	r7, sp, #0
 810d96c:	6078      	str	r0, [r7, #4]
=======
 810b3fa:	b480      	push	{r7}
 810b3fc:	b083      	sub	sp, #12
 810b3fe:	af00      	add	r7, sp, #0
 810b400:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
<<<<<<< HEAD
 810d96e:	687b      	ldr	r3, [r7, #4]
 810d970:	4618      	mov	r0, r3
 810d972:	370c      	adds	r7, #12
 810d974:	46bd      	mov	sp, r7
 810d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d97a:	4770      	bx	lr
=======
 810b402:	687b      	ldr	r3, [r7, #4]
 810b404:	4618      	mov	r0, r3
 810b406:	370c      	adds	r7, #12
 810b408:	46bd      	mov	sp, r7
 810b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b40e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d97c <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
=======
0810b410 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    swap(_Tp& __a, _Tp& __b)
<<<<<<< HEAD
 810d97c:	b580      	push	{r7, lr}
 810d97e:	b084      	sub	sp, #16
 810d980:	af00      	add	r7, sp, #0
 810d982:	6078      	str	r0, [r7, #4]
 810d984:	6039      	str	r1, [r7, #0]
=======
 810b410:	b580      	push	{r7, lr}
 810b412:	b084      	sub	sp, #16
 810b414:	af00      	add	r7, sp, #0
 810b416:	6078      	str	r0, [r7, #4]
 810b418:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      _Tp __tmp = _GLIBCXX_MOVE(__a);
<<<<<<< HEAD
 810d986:	6878      	ldr	r0, [r7, #4]
 810d988:	f7ff ffed 	bl	810d966 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810d98c:	4603      	mov	r3, r0
 810d98e:	681b      	ldr	r3, [r3, #0]
 810d990:	60fb      	str	r3, [r7, #12]
=======
 810b41a:	6878      	ldr	r0, [r7, #4]
 810b41c:	f7ff ffed 	bl	810b3fa <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810b420:	4603      	mov	r3, r0
 810b422:	681b      	ldr	r3, [r3, #0]
 810b424:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __a = _GLIBCXX_MOVE(__b);
<<<<<<< HEAD
 810d992:	6838      	ldr	r0, [r7, #0]
 810d994:	f7ff ffe7 	bl	810d966 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810d998:	4603      	mov	r3, r0
 810d99a:	681a      	ldr	r2, [r3, #0]
 810d99c:	687b      	ldr	r3, [r7, #4]
 810d99e:	601a      	str	r2, [r3, #0]
=======
 810b426:	6838      	ldr	r0, [r7, #0]
 810b428:	f7ff ffe7 	bl	810b3fa <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810b42c:	4603      	mov	r3, r0
 810b42e:	681a      	ldr	r2, [r3, #0]
 810b430:	687b      	ldr	r3, [r7, #4]
 810b432:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      __b = _GLIBCXX_MOVE(__tmp);
<<<<<<< HEAD
 810d9a0:	f107 030c 	add.w	r3, r7, #12
 810d9a4:	4618      	mov	r0, r3
 810d9a6:	f7ff ffde 	bl	810d966 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810d9aa:	4603      	mov	r3, r0
 810d9ac:	681a      	ldr	r2, [r3, #0]
 810d9ae:	683b      	ldr	r3, [r7, #0]
 810d9b0:	601a      	str	r2, [r3, #0]
=======
 810b434:	f107 030c 	add.w	r3, r7, #12
 810b438:	4618      	mov	r0, r3
 810b43a:	f7ff ffde 	bl	810b3fa <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810b43e:	4603      	mov	r3, r0
 810b440:	681a      	ldr	r2, [r3, #0]
 810b442:	683b      	ldr	r3, [r7, #0]
 810b444:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810d9b2:	bf00      	nop
 810d9b4:	3710      	adds	r7, #16
 810d9b6:	46bd      	mov	sp, r7
 810d9b8:	bd80      	pop	{r7, pc}
=======
 810b446:	bf00      	nop
 810b448:	3710      	adds	r7, #16
 810b44a:	46bd      	mov	sp, r7
 810b44c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810d9bc <_ZN16BufferedIODriverD1Ev>:
=======
0810b450 <_ZN16BufferedIODriverD1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#include <cstdint>
#include <functional>



class BufferedIODriver : public IODriver {
<<<<<<< HEAD
 810d9bc:	b580      	push	{r7, lr}
 810d9be:	b082      	sub	sp, #8
 810d9c0:	af00      	add	r7, sp, #0
 810d9c2:	6078      	str	r0, [r7, #4]
 810d9c4:	4a08      	ldr	r2, [pc, #32]	; (810d9e8 <_ZN16BufferedIODriverD1Ev+0x2c>)
 810d9c6:	687b      	ldr	r3, [r7, #4]
 810d9c8:	601a      	str	r2, [r3, #0]
 810d9ca:	687b      	ldr	r3, [r7, #4]
 810d9cc:	3318      	adds	r3, #24
 810d9ce:	4618      	mov	r0, r3
 810d9d0:	f7ff fe24 	bl	810d61c <_ZNSt8functionIFvhPhmEED1Ev>
 810d9d4:	687b      	ldr	r3, [r7, #4]
 810d9d6:	4618      	mov	r0, r3
 810d9d8:	f7ff fe00 	bl	810d5dc <_ZN8IODriverD1Ev>
 810d9dc:	687b      	ldr	r3, [r7, #4]
 810d9de:	4618      	mov	r0, r3
 810d9e0:	3708      	adds	r7, #8
 810d9e2:	46bd      	mov	sp, r7
 810d9e4:	bd80      	pop	{r7, pc}
 810d9e6:	bf00      	nop
 810d9e8:	08114a10 	.word	0x08114a10
=======
 810b450:	b580      	push	{r7, lr}
 810b452:	b082      	sub	sp, #8
 810b454:	af00      	add	r7, sp, #0
 810b456:	6078      	str	r0, [r7, #4]
 810b458:	4a08      	ldr	r2, [pc, #32]	; (810b47c <_ZN16BufferedIODriverD1Ev+0x2c>)
 810b45a:	687b      	ldr	r3, [r7, #4]
 810b45c:	601a      	str	r2, [r3, #0]
 810b45e:	687b      	ldr	r3, [r7, #4]
 810b460:	3318      	adds	r3, #24
 810b462:	4618      	mov	r0, r3
 810b464:	f7ff fe24 	bl	810b0b0 <_ZNSt8functionIFvhPhmEED1Ev>
 810b468:	687b      	ldr	r3, [r7, #4]
 810b46a:	4618      	mov	r0, r3
 810b46c:	f7ff fe00 	bl	810b070 <_ZN8IODriverD1Ev>
 810b470:	687b      	ldr	r3, [r7, #4]
 810b472:	4618      	mov	r0, r3
 810b474:	3708      	adds	r7, #8
 810b476:	46bd      	mov	sp, r7
 810b478:	bd80      	pop	{r7, pc}
 810b47a:	bf00      	nop
 810b47c:	08110a0c 	.word	0x08110a0c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810d9ec <_ZN16BufferedIODriverD0Ev>:
 810d9ec:	b580      	push	{r7, lr}
 810d9ee:	b082      	sub	sp, #8
 810d9f0:	af00      	add	r7, sp, #0
 810d9f2:	6078      	str	r0, [r7, #4]
 810d9f4:	6878      	ldr	r0, [r7, #4]
 810d9f6:	f7ff ffe1 	bl	810d9bc <_ZN16BufferedIODriverD1Ev>
 810d9fa:	2128      	movs	r1, #40	; 0x28
 810d9fc:	6878      	ldr	r0, [r7, #4]
 810d9fe:	f003 f84f 	bl	8110aa0 <_ZdlPvj>
 810da02:	687b      	ldr	r3, [r7, #4]
 810da04:	4618      	mov	r0, r3
 810da06:	3708      	adds	r7, #8
 810da08:	46bd      	mov	sp, r7
 810da0a:	bd80      	pop	{r7, pc}
=======
0810b480 <_ZN16BufferedIODriverD0Ev>:
 810b480:	b580      	push	{r7, lr}
 810b482:	b082      	sub	sp, #8
 810b484:	af00      	add	r7, sp, #0
 810b486:	6078      	str	r0, [r7, #4]
 810b488:	6878      	ldr	r0, [r7, #4]
 810b48a:	f7ff ffe1 	bl	810b450 <_ZN16BufferedIODriverD1Ev>
 810b48e:	2128      	movs	r1, #40	; 0x28
 810b490:	6878      	ldr	r0, [r7, #4]
 810b492:	f002 fcec 	bl	810de6e <_ZdlPvj>
 810b496:	687b      	ldr	r3, [r7, #4]
 810b498:	4618      	mov	r0, r3
 810b49a:	3708      	adds	r7, #8
 810b49c:	46bd      	mov	sp, r7
 810b49e:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810da0c <_ZN10MessageBusD1Ev>:
=======
0810b4a0 <_ZN10MessageBusD1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
<<<<<<< HEAD
 810da0c:	b480      	push	{r7}
 810da0e:	b083      	sub	sp, #12
 810da10:	af00      	add	r7, sp, #0
 810da12:	6078      	str	r0, [r7, #4]
 810da14:	4a04      	ldr	r2, [pc, #16]	; (810da28 <_ZN10MessageBusD1Ev+0x1c>)
 810da16:	687b      	ldr	r3, [r7, #4]
 810da18:	601a      	str	r2, [r3, #0]
 810da1a:	687b      	ldr	r3, [r7, #4]
 810da1c:	4618      	mov	r0, r3
 810da1e:	370c      	adds	r7, #12
 810da20:	46bd      	mov	sp, r7
 810da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da26:	4770      	bx	lr
 810da28:	08114a8c 	.word	0x08114a8c
=======
 810b4a0:	b480      	push	{r7}
 810b4a2:	b083      	sub	sp, #12
 810b4a4:	af00      	add	r7, sp, #0
 810b4a6:	6078      	str	r0, [r7, #4]
 810b4a8:	4a04      	ldr	r2, [pc, #16]	; (810b4bc <_ZN10MessageBusD1Ev+0x1c>)
 810b4aa:	687b      	ldr	r3, [r7, #4]
 810b4ac:	601a      	str	r2, [r3, #0]
 810b4ae:	687b      	ldr	r3, [r7, #4]
 810b4b0:	4618      	mov	r0, r3
 810b4b2:	370c      	adds	r7, #12
 810b4b4:	46bd      	mov	sp, r7
 810b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4ba:	4770      	bx	lr
 810b4bc:	08110a88 	.word	0x08110a88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810da2c <_ZN10MessageBusD0Ev>:
 810da2c:	b580      	push	{r7, lr}
 810da2e:	b082      	sub	sp, #8
 810da30:	af00      	add	r7, sp, #0
 810da32:	6078      	str	r0, [r7, #4]
 810da34:	6878      	ldr	r0, [r7, #4]
 810da36:	f7ff ffe9 	bl	810da0c <_ZN10MessageBusD1Ev>
 810da3a:	f644 0104 	movw	r1, #18436	; 0x4804
 810da3e:	6878      	ldr	r0, [r7, #4]
 810da40:	f003 f82e 	bl	8110aa0 <_ZdlPvj>
 810da44:	687b      	ldr	r3, [r7, #4]
 810da46:	4618      	mov	r0, r3
 810da48:	3708      	adds	r7, #8
 810da4a:	46bd      	mov	sp, r7
 810da4c:	bd80      	pop	{r7, pc}
=======
0810b4c0 <_ZN10MessageBusD0Ev>:
 810b4c0:	b580      	push	{r7, lr}
 810b4c2:	b082      	sub	sp, #8
 810b4c4:	af00      	add	r7, sp, #0
 810b4c6:	6078      	str	r0, [r7, #4]
 810b4c8:	6878      	ldr	r0, [r7, #4]
 810b4ca:	f7ff ffe9 	bl	810b4a0 <_ZN10MessageBusD1Ev>
 810b4ce:	f644 0104 	movw	r1, #18436	; 0x4804
 810b4d2:	6878      	ldr	r0, [r7, #4]
 810b4d4:	f002 fccb 	bl	810de6e <_ZdlPvj>
 810b4d8:	687b      	ldr	r3, [r7, #4]
 810b4da:	4618      	mov	r0, r3
 810b4dc:	3708      	adds	r7, #8
 810b4de:	46bd      	mov	sp, r7
 810b4e0:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810da4e <_ZNSt9_Any_data9_M_accessEv>:
=======
0810b4e2 <_ZNSt9_Any_data9_M_accessEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    void*       _M_access()       { return &_M_pod_data[0]; }
<<<<<<< HEAD
 810da4e:	b480      	push	{r7}
 810da50:	b083      	sub	sp, #12
 810da52:	af00      	add	r7, sp, #0
 810da54:	6078      	str	r0, [r7, #4]
 810da56:	687b      	ldr	r3, [r7, #4]
 810da58:	4618      	mov	r0, r3
 810da5a:	370c      	adds	r7, #12
 810da5c:	46bd      	mov	sp, r7
 810da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da62:	4770      	bx	lr
=======
 810b4e2:	b480      	push	{r7}
 810b4e4:	b083      	sub	sp, #12
 810b4e6:	af00      	add	r7, sp, #0
 810b4e8:	6078      	str	r0, [r7, #4]
 810b4ea:	687b      	ldr	r3, [r7, #4]
 810b4ec:	4618      	mov	r0, r3
 810b4ee:	370c      	adds	r7, #12
 810b4f0:	46bd      	mov	sp, r7
 810b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4f6:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810da64 <_ZNKSt9_Any_data9_M_accessEv>:
=======
0810b4f8 <_ZNKSt9_Any_data9_M_accessEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    const void* _M_access() const { return &_M_pod_data[0]; }
<<<<<<< HEAD
 810da64:	b480      	push	{r7}
 810da66:	b083      	sub	sp, #12
 810da68:	af00      	add	r7, sp, #0
 810da6a:	6078      	str	r0, [r7, #4]
 810da6c:	687b      	ldr	r3, [r7, #4]
 810da6e:	4618      	mov	r0, r3
 810da70:	370c      	adds	r7, #12
 810da72:	46bd      	mov	sp, r7
 810da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da78:	4770      	bx	lr
=======
 810b4f8:	b480      	push	{r7}
 810b4fa:	b083      	sub	sp, #12
 810b4fc:	af00      	add	r7, sp, #0
 810b4fe:	6078      	str	r0, [r7, #4]
 810b500:	687b      	ldr	r3, [r7, #4]
 810b502:	4618      	mov	r0, r3
 810b504:	370c      	adds	r7, #12
 810b506:	46bd      	mov	sp, r7
 810b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b50c:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810da7c <_ZN10MessageBusC1Ev>:
=======
0810b510 <_ZN10MessageBusC1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
class MessageBus {
<<<<<<< HEAD
 810da7c:	b480      	push	{r7}
 810da7e:	b083      	sub	sp, #12
 810da80:	af00      	add	r7, sp, #0
 810da82:	6078      	str	r0, [r7, #4]
 810da84:	4a04      	ldr	r2, [pc, #16]	; (810da98 <_ZN10MessageBusC1Ev+0x1c>)
 810da86:	687b      	ldr	r3, [r7, #4]
 810da88:	601a      	str	r2, [r3, #0]
 810da8a:	687b      	ldr	r3, [r7, #4]
 810da8c:	4618      	mov	r0, r3
 810da8e:	370c      	adds	r7, #12
 810da90:	46bd      	mov	sp, r7
 810da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da96:	4770      	bx	lr
 810da98:	08114a8c 	.word	0x08114a8c
=======
 810b510:	b480      	push	{r7}
 810b512:	b083      	sub	sp, #12
 810b514:	af00      	add	r7, sp, #0
 810b516:	6078      	str	r0, [r7, #4]
 810b518:	4a04      	ldr	r2, [pc, #16]	; (810b52c <_ZN10MessageBusC1Ev+0x1c>)
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	601a      	str	r2, [r3, #0]
 810b51e:	687b      	ldr	r3, [r7, #4]
 810b520:	4618      	mov	r0, r3
 810b522:	370c      	adds	r7, #12
 810b524:	46bd      	mov	sp, r7
 810b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b52a:	4770      	bx	lr
 810b52c:	08110a88 	.word	0x08110a88
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810da9c <_ZN5IOBusC1EP8IODriverPhm>:
=======
0810b530 <_ZN5IOBusC1EP8IODriverPhm>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
<<<<<<< HEAD
 810da9c:	b590      	push	{r4, r7, lr}
 810da9e:	b091      	sub	sp, #68	; 0x44
 810daa0:	af02      	add	r7, sp, #8
 810daa2:	60f8      	str	r0, [r7, #12]
 810daa4:	60b9      	str	r1, [r7, #8]
 810daa6:	607a      	str	r2, [r7, #4]
 810daa8:	603b      	str	r3, [r7, #0]
 810daaa:	68fb      	ldr	r3, [r7, #12]
 810daac:	4618      	mov	r0, r3
 810daae:	f7ff ffe5 	bl	810da7c <_ZN10MessageBusC1Ev>
 810dab2:	4a24      	ldr	r2, [pc, #144]	; (810db44 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 810dab4:	68fb      	ldr	r3, [r7, #12]
 810dab6:	601a      	str	r2, [r3, #0]
=======
 810b530:	b590      	push	{r4, r7, lr}
 810b532:	b091      	sub	sp, #68	; 0x44
 810b534:	af02      	add	r7, sp, #8
 810b536:	60f8      	str	r0, [r7, #12]
 810b538:	60b9      	str	r1, [r7, #8]
 810b53a:	607a      	str	r2, [r7, #4]
 810b53c:	603b      	str	r3, [r7, #0]
 810b53e:	68fb      	ldr	r3, [r7, #12]
 810b540:	4618      	mov	r0, r3
 810b542:	f7ff ffe5 	bl	810b510 <_ZN10MessageBusC1Ev>
 810b546:	4a24      	ldr	r2, [pc, #144]	; (810b5d8 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 810b548:	68fb      	ldr	r3, [r7, #12]
 810b54a:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	this->driver = driver;
<<<<<<< HEAD
 810dab8:	68fb      	ldr	r3, [r7, #12]
 810daba:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dabe:	3304      	adds	r3, #4
 810dac0:	68ba      	ldr	r2, [r7, #8]
 810dac2:	601a      	str	r2, [r3, #0]
=======
 810b54c:	68fb      	ldr	r3, [r7, #12]
 810b54e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b552:	3304      	adds	r3, #4
 810b554:	68ba      	ldr	r2, [r7, #8]
 810b556:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	this->packet_buffer = buffer;
<<<<<<< HEAD
 810dac4:	68fb      	ldr	r3, [r7, #12]
 810dac6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810daca:	3308      	adds	r3, #8
 810dacc:	687a      	ldr	r2, [r7, #4]
 810dace:	601a      	str	r2, [r3, #0]
=======
 810b558:	68fb      	ldr	r3, [r7, #12]
 810b55a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b55e:	3308      	adds	r3, #8
 810b560:	687a      	ldr	r2, [r7, #4]
 810b562:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	this->buffer_length = length;
<<<<<<< HEAD
 810dad0:	68fb      	ldr	r3, [r7, #12]
 810dad2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dad6:	330c      	adds	r3, #12
 810dad8:	683a      	ldr	r2, [r7, #0]
 810dada:	601a      	str	r2, [r3, #0]
=======
 810b564:	68fb      	ldr	r3, [r7, #12]
 810b566:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b56a:	330c      	adds	r3, #12
 810b56c:	683a      	ldr	r2, [r7, #0]
 810b56e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	this->buffer_index = 0;
<<<<<<< HEAD
 810dadc:	68fb      	ldr	r3, [r7, #12]
 810dade:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dae2:	3310      	adds	r3, #16
 810dae4:	2200      	movs	r2, #0
 810dae6:	701a      	strb	r2, [r3, #0]
=======
 810b570:	68fb      	ldr	r3, [r7, #12]
 810b572:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b576:	3310      	adds	r3, #16
 810b578:	2200      	movs	r2, #0
 810b57a:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
<<<<<<< HEAD
 810dae8:	68bb      	ldr	r3, [r7, #8]
 810daea:	681b      	ldr	r3, [r3, #0]
 810daec:	3308      	adds	r3, #8
 810daee:	681c      	ldr	r4, [r3, #0]
 810daf0:	4b15      	ldr	r3, [pc, #84]	; (810db48 <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 810daf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 810daf4:	2300      	movs	r3, #0
 810daf6:	633b      	str	r3, [r7, #48]	; 0x30
 810daf8:	68fb      	ldr	r3, [r7, #12]
 810dafa:	637b      	str	r3, [r7, #52]	; 0x34
 810dafc:	f107 0020 	add.w	r0, r7, #32
 810db00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 810db04:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 810db08:	4b10      	ldr	r3, [pc, #64]	; (810db4c <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 810db0a:	9301      	str	r3, [sp, #4]
 810db0c:	4b10      	ldr	r3, [pc, #64]	; (810db50 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 810db0e:	9300      	str	r3, [sp, #0]
 810db10:	4b10      	ldr	r3, [pc, #64]	; (810db54 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 810db12:	f000 f8b9 	bl	810dc88 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 810db16:	f107 0220 	add.w	r2, r7, #32
 810db1a:	f107 0310 	add.w	r3, r7, #16
 810db1e:	4611      	mov	r1, r2
 810db20:	4618      	mov	r0, r3
 810db22:	f000 f90b 	bl	810dd3c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 810db26:	f107 0310 	add.w	r3, r7, #16
 810db2a:	4619      	mov	r1, r3
 810db2c:	68b8      	ldr	r0, [r7, #8]
 810db2e:	47a0      	blx	r4
 810db30:	f107 0310 	add.w	r3, r7, #16
 810db34:	4618      	mov	r0, r3
 810db36:	f7ff fd71 	bl	810d61c <_ZNSt8functionIFvhPhmEED1Ev>
=======
 810b57c:	68bb      	ldr	r3, [r7, #8]
 810b57e:	681b      	ldr	r3, [r3, #0]
 810b580:	3308      	adds	r3, #8
 810b582:	681c      	ldr	r4, [r3, #0]
 810b584:	4b15      	ldr	r3, [pc, #84]	; (810b5dc <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 810b586:	62fb      	str	r3, [r7, #44]	; 0x2c
 810b588:	2300      	movs	r3, #0
 810b58a:	633b      	str	r3, [r7, #48]	; 0x30
 810b58c:	68fb      	ldr	r3, [r7, #12]
 810b58e:	637b      	str	r3, [r7, #52]	; 0x34
 810b590:	f107 0020 	add.w	r0, r7, #32
 810b594:	f107 0234 	add.w	r2, r7, #52	; 0x34
 810b598:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 810b59c:	4b10      	ldr	r3, [pc, #64]	; (810b5e0 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 810b59e:	9301      	str	r3, [sp, #4]
 810b5a0:	4b10      	ldr	r3, [pc, #64]	; (810b5e4 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 810b5a2:	9300      	str	r3, [sp, #0]
 810b5a4:	4b10      	ldr	r3, [pc, #64]	; (810b5e8 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 810b5a6:	f000 f8f0 	bl	810b78a <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 810b5aa:	f107 0220 	add.w	r2, r7, #32
 810b5ae:	f107 0310 	add.w	r3, r7, #16
 810b5b2:	4611      	mov	r1, r2
 810b5b4:	4618      	mov	r0, r3
 810b5b6:	f000 fa45 	bl	810ba44 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 810b5ba:	f107 0310 	add.w	r3, r7, #16
 810b5be:	4619      	mov	r1, r3
 810b5c0:	68b8      	ldr	r0, [r7, #8]
 810b5c2:	47a0      	blx	r4
 810b5c4:	f107 0310 	add.w	r3, r7, #16
 810b5c8:	4618      	mov	r0, r3
 810b5ca:	f7ff fd71 	bl	810b0b0 <_ZNSt8functionIFvhPhmEED1Ev>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810db3a:	68fb      	ldr	r3, [r7, #12]
 810db3c:	4618      	mov	r0, r3
 810db3e:	373c      	adds	r7, #60	; 0x3c
 810db40:	46bd      	mov	sp, r7
 810db42:	bd90      	pop	{r4, r7, pc}
 810db44:	08114a74 	.word	0x08114a74
 810db48:	0810db59 	.word	0x0810db59
 810db4c:	08114f9a 	.word	0x08114f9a
 810db50:	08114f99 	.word	0x08114f99
 810db54:	08114f98 	.word	0x08114f98
=======
 810b5ce:	68fb      	ldr	r3, [r7, #12]
 810b5d0:	4618      	mov	r0, r3
 810b5d2:	373c      	adds	r7, #60	; 0x3c
 810b5d4:	46bd      	mov	sp, r7
 810b5d6:	bd90      	pop	{r4, r7, pc}
 810b5d8:	08110a70 	.word	0x08110a70
 810b5dc:	0810b5ed 	.word	0x0810b5ed
 810b5e0:	08110ef2 	.word	0x08110ef2
 810b5e4:	08110ef1 	.word	0x08110ef1
 810b5e8:	08110ef0 	.word	0x08110ef0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810db58 <_ZN5IOBus7receiveEhPhm>:
=======
0810b5ec <_ZN5IOBus7receiveEhPhm>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
<<<<<<< HEAD
 810db58:	b580      	push	{r7, lr}
 810db5a:	b084      	sub	sp, #16
 810db5c:	af00      	add	r7, sp, #0
 810db5e:	60f8      	str	r0, [r7, #12]
 810db60:	607a      	str	r2, [r7, #4]
 810db62:	603b      	str	r3, [r7, #0]
 810db64:	460b      	mov	r3, r1
 810db66:	72fb      	strb	r3, [r7, #11]
=======
 810b5ec:	b580      	push	{r7, lr}
 810b5ee:	b084      	sub	sp, #16
 810b5f0:	af00      	add	r7, sp, #0
 810b5f2:	60f8      	str	r0, [r7, #12]
 810b5f4:	607a      	str	r2, [r7, #4]
 810b5f6:	603b      	str	r3, [r7, #0]
 810b5f8:	460b      	mov	r3, r1
 810b5fa:	72fb      	strb	r3, [r7, #11]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(length > buffer_length) {
<<<<<<< HEAD
 810db68:	68fb      	ldr	r3, [r7, #12]
 810db6a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810db6e:	330c      	adds	r3, #12
 810db70:	681b      	ldr	r3, [r3, #0]
 810db72:	683a      	ldr	r2, [r7, #0]
 810db74:	429a      	cmp	r2, r3
 810db76:	d91a      	bls.n	810dbae <_ZN5IOBus7receiveEhPhm+0x56>
=======
 810b5fc:	68fb      	ldr	r3, [r7, #12]
 810b5fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b602:	330c      	adds	r3, #12
 810b604:	681b      	ldr	r3, [r3, #0]
 810b606:	683a      	ldr	r2, [r7, #0]
 810b608:	429a      	cmp	r2, r3
 810b60a:	d91a      	bls.n	810b642 <_ZN5IOBus7receiveEhPhm+0x56>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		MessageBus::receive(sender_id, buffer, buffer_length);
<<<<<<< HEAD
 810db78:	68f8      	ldr	r0, [r7, #12]
 810db7a:	68fb      	ldr	r3, [r7, #12]
 810db7c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810db80:	330c      	adds	r3, #12
 810db82:	681b      	ldr	r3, [r3, #0]
 810db84:	7af9      	ldrb	r1, [r7, #11]
 810db86:	687a      	ldr	r2, [r7, #4]
 810db88:	f001 fdae 	bl	810f6e8 <_ZN10MessageBus7receiveEhPhm>
=======
 810b60c:	68f8      	ldr	r0, [r7, #12]
 810b60e:	68fb      	ldr	r3, [r7, #12]
 810b610:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b614:	330c      	adds	r3, #12
 810b616:	681b      	ldr	r3, [r3, #0]
 810b618:	7af9      	ldrb	r1, [r7, #11]
 810b61a:	687a      	ldr	r2, [r7, #4]
 810b61c:	f001 fd6e 	bl	810d0fc <_ZN10MessageBus7receiveEhPhm>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		length -= buffer_length;
<<<<<<< HEAD
 810db8c:	68fb      	ldr	r3, [r7, #12]
 810db8e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810db92:	330c      	adds	r3, #12
 810db94:	681b      	ldr	r3, [r3, #0]
 810db96:	683a      	ldr	r2, [r7, #0]
 810db98:	1ad3      	subs	r3, r2, r3
 810db9a:	603b      	str	r3, [r7, #0]
=======
 810b620:	68fb      	ldr	r3, [r7, #12]
 810b622:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b626:	330c      	adds	r3, #12
 810b628:	681b      	ldr	r3, [r3, #0]
 810b62a:	683a      	ldr	r2, [r7, #0]
 810b62c:	1ad3      	subs	r3, r2, r3
 810b62e:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		buffer += buffer_length;
<<<<<<< HEAD
 810db9c:	68fb      	ldr	r3, [r7, #12]
 810db9e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dba2:	330c      	adds	r3, #12
 810dba4:	681b      	ldr	r3, [r3, #0]
 810dba6:	687a      	ldr	r2, [r7, #4]
 810dba8:	4413      	add	r3, r2
 810dbaa:	607b      	str	r3, [r7, #4]
=======
 810b630:	68fb      	ldr	r3, [r7, #12]
 810b632:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b636:	330c      	adds	r3, #12
 810b638:	681b      	ldr	r3, [r3, #0]
 810b63a:	687a      	ldr	r2, [r7, #4]
 810b63c:	4413      	add	r3, r2
 810b63e:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(length > buffer_length) {
<<<<<<< HEAD
 810dbac:	e7dc      	b.n	810db68 <_ZN5IOBus7receiveEhPhm+0x10>
=======
 810b640:	e7dc      	b.n	810b5fc <_ZN5IOBus7receiveEhPhm+0x10>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	MessageBus::receive(sender_id, buffer, length);
<<<<<<< HEAD
 810dbae:	68f8      	ldr	r0, [r7, #12]
 810dbb0:	7af9      	ldrb	r1, [r7, #11]
 810dbb2:	683b      	ldr	r3, [r7, #0]
 810dbb4:	687a      	ldr	r2, [r7, #4]
 810dbb6:	f001 fd97 	bl	810f6e8 <_ZN10MessageBus7receiveEhPhm>
=======
 810b642:	68f8      	ldr	r0, [r7, #12]
 810b644:	7af9      	ldrb	r1, [r7, #11]
 810b646:	683b      	ldr	r3, [r7, #0]
 810b648:	687a      	ldr	r2, [r7, #4]
 810b64a:	f001 fd57 	bl	810d0fc <_ZN10MessageBus7receiveEhPhm>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810dbba:	bf00      	nop
 810dbbc:	3710      	adds	r7, #16
 810dbbe:	46bd      	mov	sp, r7
 810dbc0:	bd80      	pop	{r7, pc}
=======
 810b64e:	bf00      	nop
 810b650:	3710      	adds	r7, #16
 810b652:	46bd      	mov	sp, r7
 810b654:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dbc2 <_ZN5IOBus6appendEPhm>:
=======
0810b656 <_ZN5IOBus6appendEPhm>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
<<<<<<< HEAD
 810dbc2:	b580      	push	{r7, lr}
 810dbc4:	b086      	sub	sp, #24
 810dbc6:	af00      	add	r7, sp, #0
 810dbc8:	60f8      	str	r0, [r7, #12]
 810dbca:	60b9      	str	r1, [r7, #8]
 810dbcc:	607a      	str	r2, [r7, #4]
=======
 810b656:	b580      	push	{r7, lr}
 810b658:	b086      	sub	sp, #24
 810b65a:	af00      	add	r7, sp, #0
 810b65c:	60f8      	str	r0, [r7, #12]
 810b65e:	60b9      	str	r1, [r7, #8]
 810b660:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uint32_t remaining_length = buffer_length - buffer_index;
<<<<<<< HEAD
 810dbce:	68fb      	ldr	r3, [r7, #12]
 810dbd0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dbd4:	330c      	adds	r3, #12
 810dbd6:	681a      	ldr	r2, [r3, #0]
 810dbd8:	68fb      	ldr	r3, [r7, #12]
 810dbda:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dbde:	3310      	adds	r3, #16
 810dbe0:	781b      	ldrb	r3, [r3, #0]
 810dbe2:	1ad3      	subs	r3, r2, r3
 810dbe4:	617b      	str	r3, [r7, #20]
=======
 810b662:	68fb      	ldr	r3, [r7, #12]
 810b664:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b668:	330c      	adds	r3, #12
 810b66a:	681a      	ldr	r2, [r3, #0]
 810b66c:	68fb      	ldr	r3, [r7, #12]
 810b66e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b672:	3310      	adds	r3, #16
 810b674:	781b      	ldrb	r3, [r3, #0]
 810b676:	1ad3      	subs	r3, r2, r3
 810b678:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	if(length > remaining_length) {
<<<<<<< HEAD
 810dbe6:	687a      	ldr	r2, [r7, #4]
 810dbe8:	697b      	ldr	r3, [r7, #20]
 810dbea:	429a      	cmp	r2, r3
 810dbec:	d901      	bls.n	810dbf2 <_ZN5IOBus6appendEPhm+0x30>
=======
 810b67a:	687a      	ldr	r2, [r7, #4]
 810b67c:	697b      	ldr	r3, [r7, #20]
 810b67e:	429a      	cmp	r2, r3
 810b680:	d901      	bls.n	810b686 <_ZN5IOBus6appendEPhm+0x30>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		length = remaining_length;
<<<<<<< HEAD
 810dbee:	697b      	ldr	r3, [r7, #20]
 810dbf0:	607b      	str	r3, [r7, #4]
=======
 810b682:	697b      	ldr	r3, [r7, #20]
 810b684:	607b      	str	r3, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
<<<<<<< HEAD
 810dbf2:	68fb      	ldr	r3, [r7, #12]
 810dbf4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dbf8:	3308      	adds	r3, #8
 810dbfa:	681a      	ldr	r2, [r3, #0]
 810dbfc:	68fb      	ldr	r3, [r7, #12]
 810dbfe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dc02:	3310      	adds	r3, #16
 810dc04:	781b      	ldrb	r3, [r3, #0]
 810dc06:	4413      	add	r3, r2
 810dc08:	687a      	ldr	r2, [r7, #4]
 810dc0a:	68b9      	ldr	r1, [r7, #8]
 810dc0c:	4618      	mov	r0, r3
 810dc0e:	f003 faab 	bl	8111168 <memcpy>
=======
 810b686:	68fb      	ldr	r3, [r7, #12]
 810b688:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b68c:	3308      	adds	r3, #8
 810b68e:	681a      	ldr	r2, [r3, #0]
 810b690:	68fb      	ldr	r3, [r7, #12]
 810b692:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b696:	3310      	adds	r3, #16
 810b698:	781b      	ldrb	r3, [r3, #0]
 810b69a:	4413      	add	r3, r2
 810b69c:	687a      	ldr	r2, [r7, #4]
 810b69e:	68b9      	ldr	r1, [r7, #8]
 810b6a0:	4618      	mov	r0, r3
 810b6a2:	f002 fd69 	bl	810e178 <memcpy>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	buffer_index += length;
<<<<<<< HEAD
 810dc12:	68fb      	ldr	r3, [r7, #12]
 810dc14:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dc18:	3310      	adds	r3, #16
 810dc1a:	781a      	ldrb	r2, [r3, #0]
 810dc1c:	687b      	ldr	r3, [r7, #4]
 810dc1e:	b2db      	uxtb	r3, r3
 810dc20:	4413      	add	r3, r2
 810dc22:	b2da      	uxtb	r2, r3
 810dc24:	68fb      	ldr	r3, [r7, #12]
 810dc26:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dc2a:	3310      	adds	r3, #16
 810dc2c:	701a      	strb	r2, [r3, #0]
=======
 810b6a6:	68fb      	ldr	r3, [r7, #12]
 810b6a8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6ac:	3310      	adds	r3, #16
 810b6ae:	781a      	ldrb	r2, [r3, #0]
 810b6b0:	687b      	ldr	r3, [r7, #4]
 810b6b2:	b2db      	uxtb	r3, r3
 810b6b4:	4413      	add	r3, r2
 810b6b6:	b2da      	uxtb	r2, r3
 810b6b8:	68fb      	ldr	r3, [r7, #12]
 810b6ba:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6be:	3310      	adds	r3, #16
 810b6c0:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics


	return length;
<<<<<<< HEAD
 810dc2e:	687b      	ldr	r3, [r7, #4]
 810dc30:	b2db      	uxtb	r3, r3
=======
 810b6c2:	687b      	ldr	r3, [r7, #4]
 810b6c4:	b2db      	uxtb	r3, r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810dc32:	4618      	mov	r0, r3
 810dc34:	3718      	adds	r7, #24
 810dc36:	46bd      	mov	sp, r7
 810dc38:	bd80      	pop	{r7, pc}
=======
 810b6c6:	4618      	mov	r0, r3
 810b6c8:	3718      	adds	r7, #24
 810b6ca:	46bd      	mov	sp, r7
 810b6cc:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dc3a <_ZN5IOBus8transmitEv>:
=======
0810b6ce <_ZN5IOBus8transmitEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void IOBus::transmit() {
<<<<<<< HEAD
 810dc3a:	b590      	push	{r4, r7, lr}
 810dc3c:	b083      	sub	sp, #12
 810dc3e:	af00      	add	r7, sp, #0
 810dc40:	6078      	str	r0, [r7, #4]
=======
 810b6ce:	b590      	push	{r4, r7, lr}
 810b6d0:	b083      	sub	sp, #12
 810b6d2:	af00      	add	r7, sp, #0
 810b6d4:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	driver->transmit(packet_buffer, buffer_index);
<<<<<<< HEAD
 810dc42:	687b      	ldr	r3, [r7, #4]
 810dc44:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dc48:	3304      	adds	r3, #4
 810dc4a:	6818      	ldr	r0, [r3, #0]
 810dc4c:	687b      	ldr	r3, [r7, #4]
 810dc4e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dc52:	3304      	adds	r3, #4
 810dc54:	681b      	ldr	r3, [r3, #0]
 810dc56:	681b      	ldr	r3, [r3, #0]
 810dc58:	330c      	adds	r3, #12
 810dc5a:	681c      	ldr	r4, [r3, #0]
 810dc5c:	687b      	ldr	r3, [r7, #4]
 810dc5e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dc62:	3308      	adds	r3, #8
 810dc64:	6819      	ldr	r1, [r3, #0]
 810dc66:	687b      	ldr	r3, [r7, #4]
 810dc68:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dc6c:	3310      	adds	r3, #16
 810dc6e:	781b      	ldrb	r3, [r3, #0]
 810dc70:	461a      	mov	r2, r3
 810dc72:	47a0      	blx	r4
=======
 810b6d6:	687b      	ldr	r3, [r7, #4]
 810b6d8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6dc:	3304      	adds	r3, #4
 810b6de:	6818      	ldr	r0, [r3, #0]
 810b6e0:	687b      	ldr	r3, [r7, #4]
 810b6e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6e6:	3304      	adds	r3, #4
 810b6e8:	681b      	ldr	r3, [r3, #0]
 810b6ea:	681b      	ldr	r3, [r3, #0]
 810b6ec:	330c      	adds	r3, #12
 810b6ee:	681c      	ldr	r4, [r3, #0]
 810b6f0:	687b      	ldr	r3, [r7, #4]
 810b6f2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b6f6:	3308      	adds	r3, #8
 810b6f8:	6819      	ldr	r1, [r3, #0]
 810b6fa:	687b      	ldr	r3, [r7, #4]
 810b6fc:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b700:	3310      	adds	r3, #16
 810b702:	781b      	ldrb	r3, [r3, #0]
 810b704:	461a      	mov	r2, r3
 810b706:	47a0      	blx	r4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	buffer_index = 0;
<<<<<<< HEAD
 810dc74:	687b      	ldr	r3, [r7, #4]
 810dc76:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dc7a:	3310      	adds	r3, #16
 810dc7c:	2200      	movs	r2, #0
 810dc7e:	701a      	strb	r2, [r3, #0]
=======
 810b708:	687b      	ldr	r3, [r7, #4]
 810b70a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810b70e:	3310      	adds	r3, #16
 810b710:	2200      	movs	r2, #0
 810b712:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810dc80:	bf00      	nop
 810dc82:	370c      	adds	r7, #12
 810dc84:	46bd      	mov	sp, r7
 810dc86:	bd90      	pop	{r4, r7, pc}
=======
 810b714:	bf00      	nop
 810b716:	370c      	adds	r7, #12
 810b718:	46bd      	mov	sp, r7
 810b71a:	bd90      	pop	{r4, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dc88 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
=======
0810b71c <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b71c:	b480      	push	{r7}
 810b71e:	b083      	sub	sp, #12
 810b720:	af00      	add	r7, sp, #0
 810b722:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b724:	687b      	ldr	r3, [r7, #4]
 810b726:	4618      	mov	r0, r3
 810b728:	370c      	adds	r7, #12
 810b72a:	46bd      	mov	sp, r7
 810b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b730:	4770      	bx	lr

0810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b732:	b480      	push	{r7}
 810b734:	b083      	sub	sp, #12
 810b736:	af00      	add	r7, sp, #0
 810b738:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b73a:	687b      	ldr	r3, [r7, #4]
 810b73c:	4618      	mov	r0, r3
 810b73e:	370c      	adds	r7, #12
 810b740:	46bd      	mov	sp, r7
 810b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b746:	4770      	bx	lr

0810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b748:	b480      	push	{r7}
 810b74a:	b083      	sub	sp, #12
 810b74c:	af00      	add	r7, sp, #0
 810b74e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b750:	687b      	ldr	r3, [r7, #4]
 810b752:	4618      	mov	r0, r3
 810b754:	370c      	adds	r7, #12
 810b756:	46bd      	mov	sp, r7
 810b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b75c:	4770      	bx	lr

0810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b75e:	b480      	push	{r7}
 810b760:	b083      	sub	sp, #12
 810b762:	af00      	add	r7, sp, #0
 810b764:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b766:	687b      	ldr	r3, [r7, #4]
 810b768:	4618      	mov	r0, r3
 810b76a:	370c      	adds	r7, #12
 810b76c:	46bd      	mov	sp, r7
 810b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b772:	4770      	bx	lr

0810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b774:	b480      	push	{r7}
 810b776:	b083      	sub	sp, #12
 810b778:	af00      	add	r7, sp, #0
 810b77a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b77c:	687b      	ldr	r3, [r7, #4]
 810b77e:	4618      	mov	r0, r3
 810b780:	370c      	adds	r7, #12
 810b782:	46bd      	mov	sp, r7
 810b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b788:	4770      	bx	lr

0810b78a <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
<<<<<<< HEAD
 810dc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dc8c:	b086      	sub	sp, #24
 810dc8e:	af02      	add	r7, sp, #8
 810dc90:	60f8      	str	r0, [r7, #12]
 810dc92:	60b9      	str	r1, [r7, #8]
 810dc94:	607a      	str	r2, [r7, #4]
 810dc96:	603b      	str	r3, [r7, #0]
=======
 810b78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b78e:	b086      	sub	sp, #24
 810b790:	af02      	add	r7, sp, #8
 810b792:	60f8      	str	r0, [r7, #12]
 810b794:	60b9      	str	r1, [r7, #8]
 810b796:	607a      	str	r2, [r7, #4]
 810b798:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
<<<<<<< HEAD
 810dc98:	68b8      	ldr	r0, [r7, #8]
 810dc9a:	f000 f877 	bl	810dd8c <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dc9e:	4605      	mov	r5, r0
 810dca0:	6878      	ldr	r0, [r7, #4]
 810dca2:	f000 f87e 	bl	810dda2 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810dca6:	4606      	mov	r6, r0
 810dca8:	6838      	ldr	r0, [r7, #0]
 810dcaa:	f000 f885 	bl	810ddb8 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dcae:	4680      	mov	r8, r0
 810dcb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810dcb2:	f000 f88c 	bl	810ddce <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dcb6:	4604      	mov	r4, r0
 810dcb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810dcba:	f000 f893 	bl	810dde4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dcbe:	4603      	mov	r3, r0
 810dcc0:	9301      	str	r3, [sp, #4]
 810dcc2:	9400      	str	r4, [sp, #0]
 810dcc4:	4643      	mov	r3, r8
 810dcc6:	4632      	mov	r2, r6
 810dcc8:	4629      	mov	r1, r5
 810dcca:	68f8      	ldr	r0, [r7, #12]
 810dccc:	f000 f895 	bl	810ddfa <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
=======
 810b79a:	68b8      	ldr	r0, [r7, #8]
 810b79c:	f7ff ffbe 	bl	810b71c <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b7a0:	4605      	mov	r5, r0
 810b7a2:	6878      	ldr	r0, [r7, #4]
 810b7a4:	f7ff ffc5 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810b7a8:	4606      	mov	r6, r0
 810b7aa:	6838      	ldr	r0, [r7, #0]
 810b7ac:	f7ff ffcc 	bl	810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b7b0:	4680      	mov	r8, r0
 810b7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810b7b4:	f7ff ffd3 	bl	810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b7b8:	4604      	mov	r4, r0
 810b7ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810b7bc:	f7ff ffda 	bl	810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b7c0:	4603      	mov	r3, r0
 810b7c2:	9301      	str	r3, [sp, #4]
 810b7c4:	9400      	str	r4, [sp, #0]
 810b7c6:	4643      	mov	r3, r8
 810b7c8:	4632      	mov	r2, r6
 810b7ca:	4629      	mov	r1, r5
 810b7cc:	68f8      	ldr	r0, [r7, #12]
 810b7ce:	f000 f961 	bl	810ba94 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810dcd0:	68f8      	ldr	r0, [r7, #12]
 810dcd2:	3710      	adds	r7, #16
 810dcd4:	46bd      	mov	sp, r7
 810dcd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
=======
 810b7d2:	68f8      	ldr	r0, [r7, #12]
 810b7d4:	3710      	adds	r7, #16
 810b7d6:	46bd      	mov	sp, r7
 810b7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dcda <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
=======
0810b7dc <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 810b7dc:	b480      	push	{r7}
 810b7de:	b083      	sub	sp, #12
 810b7e0:	af00      	add	r7, sp, #0
 810b7e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b7e4:	687b      	ldr	r3, [r7, #4]
 810b7e6:	4618      	mov	r0, r3
 810b7e8:	370c      	adds	r7, #12
 810b7ea:	46bd      	mov	sp, r7
 810b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b7f0:	4770      	bx	lr

0810b7f2 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810b7f2:	b580      	push	{r7, lr}
 810b7f4:	b082      	sub	sp, #8
 810b7f6:	af00      	add	r7, sp, #0
 810b7f8:	6078      	str	r0, [r7, #4]
 810b7fa:	6878      	ldr	r0, [r7, #4]
 810b7fc:	f000 f805 	bl	810b80a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 810b800:	4603      	mov	r3, r0
 810b802:	4618      	mov	r0, r3
 810b804:	3708      	adds	r7, #8
 810b806:	46bd      	mov	sp, r7
 810b808:	bd80      	pop	{r7, pc}

0810b80a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810b80a:	b480      	push	{r7}
 810b80c:	b083      	sub	sp, #12
 810b80e:	af00      	add	r7, sp, #0
 810b810:	6078      	str	r0, [r7, #4]
 810b812:	687b      	ldr	r3, [r7, #4]
 810b814:	4618      	mov	r0, r3
 810b816:	370c      	adds	r7, #12
 810b818:	46bd      	mov	sp, r7
 810b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b81e:	4770      	bx	lr

0810b820 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b820:	b480      	push	{r7}
 810b822:	b083      	sub	sp, #12
 810b824:	af00      	add	r7, sp, #0
 810b826:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b828:	687b      	ldr	r3, [r7, #4]
 810b82a:	4618      	mov	r0, r3
 810b82c:	370c      	adds	r7, #12
 810b82e:	46bd      	mov	sp, r7
 810b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b834:	4770      	bx	lr

0810b836 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
	: _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
 810b836:	b580      	push	{r7, lr}
 810b838:	b082      	sub	sp, #8
 810b83a:	af00      	add	r7, sp, #0
 810b83c:	6078      	str	r0, [r7, #4]
 810b83e:	6039      	str	r1, [r7, #0]
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 810b840:	6838      	ldr	r0, [r7, #0]
 810b842:	f7ff ffd6 	bl	810b7f2 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810b846:	4603      	mov	r3, r0
 810b848:	4618      	mov	r0, r3
 810b84a:	f7ff ffe9 	bl	810b820 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810b84e:	4603      	mov	r3, r0
 810b850:	4619      	mov	r1, r3
 810b852:	6878      	ldr	r0, [r7, #4]
 810b854:	f000 f95a 	bl	810bb0c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 810b858:	687b      	ldr	r3, [r7, #4]
 810b85a:	4618      	mov	r0, r3
 810b85c:	3708      	adds	r7, #8
 810b85e:	46bd      	mov	sp, r7
 810b860:	bd80      	pop	{r7, pc}

0810b862 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810b862:	b480      	push	{r7}
 810b864:	b083      	sub	sp, #12
 810b866:	af00      	add	r7, sp, #0
 810b868:	6078      	str	r0, [r7, #4]
 810b86a:	687b      	ldr	r3, [r7, #4]
 810b86c:	4618      	mov	r0, r3
 810b86e:	370c      	adds	r7, #12
 810b870:	46bd      	mov	sp, r7
 810b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b876:	4770      	bx	lr

0810b878 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810b878:	b580      	push	{r7, lr}
 810b87a:	b082      	sub	sp, #8
 810b87c:	af00      	add	r7, sp, #0
 810b87e:	6078      	str	r0, [r7, #4]
 810b880:	6878      	ldr	r0, [r7, #4]
 810b882:	f000 f805 	bl	810b890 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 810b886:	4603      	mov	r3, r0
 810b888:	4618      	mov	r0, r3
 810b88a:	3708      	adds	r7, #8
 810b88c:	46bd      	mov	sp, r7
 810b88e:	bd80      	pop	{r7, pc}

0810b890 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810b890:	b480      	push	{r7}
 810b892:	b083      	sub	sp, #12
 810b894:	af00      	add	r7, sp, #0
 810b896:	6078      	str	r0, [r7, #4]
 810b898:	687b      	ldr	r3, [r7, #4]
 810b89a:	4618      	mov	r0, r3
 810b89c:	370c      	adds	r7, #12
 810b89e:	46bd      	mov	sp, r7
 810b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8a4:	4770      	bx	lr

0810b8a6 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810b8a6:	b480      	push	{r7}
 810b8a8:	b083      	sub	sp, #12
 810b8aa:	af00      	add	r7, sp, #0
 810b8ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b8ae:	687b      	ldr	r3, [r7, #4]
 810b8b0:	4618      	mov	r0, r3
 810b8b2:	370c      	adds	r7, #12
 810b8b4:	46bd      	mov	sp, r7
 810b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8ba:	4770      	bx	lr

0810b8bc <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b8bc:	b480      	push	{r7}
 810b8be:	b083      	sub	sp, #12
 810b8c0:	af00      	add	r7, sp, #0
 810b8c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b8c4:	687b      	ldr	r3, [r7, #4]
 810b8c6:	4618      	mov	r0, r3
 810b8c8:	370c      	adds	r7, #12
 810b8ca:	46bd      	mov	sp, r7
 810b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8d0:	4770      	bx	lr

0810b8d2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810b8d2:	b580      	push	{r7, lr}
 810b8d4:	b082      	sub	sp, #8
 810b8d6:	af00      	add	r7, sp, #0
 810b8d8:	6078      	str	r0, [r7, #4]
 810b8da:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810b8dc:	6838      	ldr	r0, [r7, #0]
 810b8de:	f7ff ffc0 	bl	810b862 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 810b8e2:	4603      	mov	r3, r0
 810b8e4:	4618      	mov	r0, r3
 810b8e6:	f7ff ffde 	bl	810b8a6 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 810b8ea:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810b8ec:	4619      	mov	r1, r3
 810b8ee:	6878      	ldr	r0, [r7, #4]
 810b8f0:	f7ff ffa1 	bl	810b836 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 810b8f4:	6838      	ldr	r0, [r7, #0]
 810b8f6:	f7ff ffbf 	bl	810b878 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810b8fa:	4603      	mov	r3, r0
 810b8fc:	4618      	mov	r0, r3
 810b8fe:	f7ff ffdd 	bl	810b8bc <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810b902:	4603      	mov	r3, r0
 810b904:	4619      	mov	r1, r3
 810b906:	6878      	ldr	r0, [r7, #4]
 810b908:	f000 f90d 	bl	810bb26 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 810b90c:	687b      	ldr	r3, [r7, #4]
 810b90e:	4618      	mov	r0, r3
 810b910:	3708      	adds	r7, #8
 810b912:	46bd      	mov	sp, r7
 810b914:	bd80      	pop	{r7, pc}

0810b916 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810b916:	b480      	push	{r7}
 810b918:	b083      	sub	sp, #12
 810b91a:	af00      	add	r7, sp, #0
 810b91c:	6078      	str	r0, [r7, #4]
 810b91e:	687b      	ldr	r3, [r7, #4]
 810b920:	4618      	mov	r0, r3
 810b922:	370c      	adds	r7, #12
 810b924:	46bd      	mov	sp, r7
 810b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b92a:	4770      	bx	lr

0810b92c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810b92c:	b580      	push	{r7, lr}
 810b92e:	b082      	sub	sp, #8
 810b930:	af00      	add	r7, sp, #0
 810b932:	6078      	str	r0, [r7, #4]
 810b934:	6878      	ldr	r0, [r7, #4]
 810b936:	f000 f805 	bl	810b944 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 810b93a:	4603      	mov	r3, r0
 810b93c:	4618      	mov	r0, r3
 810b93e:	3708      	adds	r7, #8
 810b940:	46bd      	mov	sp, r7
 810b942:	bd80      	pop	{r7, pc}

0810b944 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810b944:	b480      	push	{r7}
 810b946:	b083      	sub	sp, #12
 810b948:	af00      	add	r7, sp, #0
 810b94a:	6078      	str	r0, [r7, #4]
 810b94c:	687b      	ldr	r3, [r7, #4]
 810b94e:	4618      	mov	r0, r3
 810b950:	370c      	adds	r7, #12
 810b952:	46bd      	mov	sp, r7
 810b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b958:	4770      	bx	lr

0810b95a <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 810b95a:	b480      	push	{r7}
 810b95c:	b083      	sub	sp, #12
 810b95e:	af00      	add	r7, sp, #0
 810b960:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b962:	687b      	ldr	r3, [r7, #4]
 810b964:	4618      	mov	r0, r3
 810b966:	370c      	adds	r7, #12
 810b968:	46bd      	mov	sp, r7
 810b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b96e:	4770      	bx	lr

0810b970 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b970:	b480      	push	{r7}
 810b972:	b083      	sub	sp, #12
 810b974:	af00      	add	r7, sp, #0
 810b976:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b978:	687b      	ldr	r3, [r7, #4]
 810b97a:	4618      	mov	r0, r3
 810b97c:	370c      	adds	r7, #12
 810b97e:	46bd      	mov	sp, r7
 810b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b984:	4770      	bx	lr

0810b986 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810b986:	b580      	push	{r7, lr}
 810b988:	b082      	sub	sp, #8
 810b98a:	af00      	add	r7, sp, #0
 810b98c:	6078      	str	r0, [r7, #4]
 810b98e:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810b990:	6838      	ldr	r0, [r7, #0]
 810b992:	f7ff ffc0 	bl	810b916 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 810b996:	4603      	mov	r3, r0
 810b998:	4618      	mov	r0, r3
 810b99a:	f7ff ffde 	bl	810b95a <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 810b99e:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810b9a0:	4619      	mov	r1, r3
 810b9a2:	6878      	ldr	r0, [r7, #4]
 810b9a4:	f7ff ff95 	bl	810b8d2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 810b9a8:	6838      	ldr	r0, [r7, #0]
 810b9aa:	f7ff ffbf 	bl	810b92c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810b9ae:	4603      	mov	r3, r0
 810b9b0:	4618      	mov	r0, r3
 810b9b2:	f7ff ffdd 	bl	810b970 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810b9b6:	4603      	mov	r3, r0
 810b9b8:	4619      	mov	r1, r3
 810b9ba:	6878      	ldr	r0, [r7, #4]
 810b9bc:	f000 f8c0 	bl	810bb40 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 810b9c0:	687b      	ldr	r3, [r7, #4]
 810b9c2:	4618      	mov	r0, r3
 810b9c4:	3708      	adds	r7, #8
 810b9c6:	46bd      	mov	sp, r7
 810b9c8:	bd80      	pop	{r7, pc}

0810b9ca <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
<<<<<<< HEAD
 810dcda:	b580      	push	{r7, lr}
 810dcdc:	b082      	sub	sp, #8
 810dcde:	af00      	add	r7, sp, #0
 810dce0:	6078      	str	r0, [r7, #4]
 810dce2:	6039      	str	r1, [r7, #0]
 810dce4:	687b      	ldr	r3, [r7, #4]
 810dce6:	683a      	ldr	r2, [r7, #0]
 810dce8:	4611      	mov	r1, r2
 810dcea:	4618      	mov	r0, r3
 810dcec:	f000 f8cc 	bl	810de88 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 810dcf0:	687b      	ldr	r3, [r7, #4]
 810dcf2:	4618      	mov	r0, r3
 810dcf4:	3708      	adds	r7, #8
 810dcf6:	46bd      	mov	sp, r7
 810dcf8:	bd80      	pop	{r7, pc}
=======
 810b9ca:	b580      	push	{r7, lr}
 810b9cc:	b082      	sub	sp, #8
 810b9ce:	af00      	add	r7, sp, #0
 810b9d0:	6078      	str	r0, [r7, #4]
 810b9d2:	6039      	str	r1, [r7, #0]
 810b9d4:	687b      	ldr	r3, [r7, #4]
 810b9d6:	683a      	ldr	r2, [r7, #0]
 810b9d8:	4611      	mov	r1, r2
 810b9da:	4618      	mov	r0, r3
 810b9dc:	f000 f8eb 	bl	810bbb6 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 810b9e0:	687b      	ldr	r3, [r7, #4]
 810b9e2:	4618      	mov	r0, r3
 810b9e4:	3708      	adds	r7, #8
 810b9e6:	46bd      	mov	sp, r7
 810b9e8:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dcfa <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
=======
0810b9ea <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      _Bind(_Bind&& __b)
<<<<<<< HEAD
 810dcfa:	b590      	push	{r4, r7, lr}
 810dcfc:	b083      	sub	sp, #12
 810dcfe:	af00      	add	r7, sp, #0
 810dd00:	6078      	str	r0, [r7, #4]
 810dd02:	6039      	str	r1, [r7, #0]
=======
 810b9ea:	b590      	push	{r4, r7, lr}
 810b9ec:	b083      	sub	sp, #12
 810b9ee:	af00      	add	r7, sp, #0
 810b9f0:	6078      	str	r0, [r7, #4]
 810b9f2:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
<<<<<<< HEAD
 810dd04:	683b      	ldr	r3, [r7, #0]
 810dd06:	4618      	mov	r0, r3
 810dd08:	f000 f8a8 	bl	810de5c <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810dd0c:	4602      	mov	r2, r0
 810dd0e:	687b      	ldr	r3, [r7, #4]
 810dd10:	e892 0003 	ldmia.w	r2, {r0, r1}
 810dd14:	e883 0003 	stmia.w	r3, {r0, r1}
 810dd18:	687b      	ldr	r3, [r7, #4]
 810dd1a:	f103 0408 	add.w	r4, r3, #8
 810dd1e:	683b      	ldr	r3, [r7, #0]
 810dd20:	3308      	adds	r3, #8
 810dd22:	4618      	mov	r0, r3
 810dd24:	f000 f8a5 	bl	810de72 <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 810dd28:	4603      	mov	r3, r0
 810dd2a:	4619      	mov	r1, r3
 810dd2c:	4620      	mov	r0, r4
 810dd2e:	f7ff ffd4 	bl	810dcda <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
=======
 810b9f4:	683b      	ldr	r3, [r7, #0]
 810b9f6:	4618      	mov	r0, r3
 810b9f8:	f000 f87d 	bl	810baf6 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810b9fc:	4602      	mov	r2, r0
 810b9fe:	687b      	ldr	r3, [r7, #4]
 810ba00:	e892 0003 	ldmia.w	r2, {r0, r1}
 810ba04:	e883 0003 	stmia.w	r3, {r0, r1}
 810ba08:	687b      	ldr	r3, [r7, #4]
 810ba0a:	f103 0408 	add.w	r4, r3, #8
 810ba0e:	683b      	ldr	r3, [r7, #0]
 810ba10:	3308      	adds	r3, #8
 810ba12:	4618      	mov	r0, r3
 810ba14:	f7ff fee2 	bl	810b7dc <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 810ba18:	4603      	mov	r3, r0
 810ba1a:	4619      	mov	r1, r3
 810ba1c:	4620      	mov	r0, r4
 810ba1e:	f7ff ffd4 	bl	810b9ca <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      { }
<<<<<<< HEAD
 810dd32:	687b      	ldr	r3, [r7, #4]
 810dd34:	4618      	mov	r0, r3
 810dd36:	370c      	adds	r7, #12
 810dd38:	46bd      	mov	sp, r7
 810dd3a:	bd90      	pop	{r4, r7, pc}
=======
 810ba22:	687b      	ldr	r3, [r7, #4]
 810ba24:	4618      	mov	r0, r3
 810ba26:	370c      	adds	r7, #12
 810ba28:	46bd      	mov	sp, r7
 810ba2a:	bd90      	pop	{r4, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dd3c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:
=======
0810ba2c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 810ba2c:	b480      	push	{r7}
 810ba2e:	b083      	sub	sp, #12
 810ba30:	af00      	add	r7, sp, #0
 810ba32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810ba34:	687b      	ldr	r3, [r7, #4]
 810ba36:	4618      	mov	r0, r3
 810ba38:	370c      	adds	r7, #12
 810ba3a:	46bd      	mov	sp, r7
 810ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba40:	4770      	bx	lr
	...

0810ba44 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
<<<<<<< HEAD
 810dd3c:	b590      	push	{r4, r7, lr}
 810dd3e:	b083      	sub	sp, #12
 810dd40:	af00      	add	r7, sp, #0
 810dd42:	6078      	str	r0, [r7, #4]
 810dd44:	6039      	str	r1, [r7, #0]
=======
 810ba44:	b590      	push	{r4, r7, lr}
 810ba46:	b083      	sub	sp, #12
 810ba48:	af00      	add	r7, sp, #0
 810ba4a:	6078      	str	r0, [r7, #4]
 810ba4c:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      function(_Functor __f)
      : _Function_base()
<<<<<<< HEAD
 810dd46:	687b      	ldr	r3, [r7, #4]
 810dd48:	4618      	mov	r0, r3
 810dd4a:	f7ff fc15 	bl	810d578 <_ZNSt14_Function_baseC1Ev>
=======
 810ba4e:	687b      	ldr	r3, [r7, #4]
 810ba50:	4618      	mov	r0, r3
 810ba52:	f7ff fadb 	bl	810b00c <_ZNSt14_Function_baseC1Ev>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
<<<<<<< HEAD
 810dd4e:	6838      	ldr	r0, [r7, #0]
 810dd50:	f000 f8bd 	bl	810dece <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 810dd54:	4603      	mov	r3, r0
 810dd56:	2b00      	cmp	r3, #0
 810dd58:	d00e      	beq.n	810dd78 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
=======
 810ba56:	6838      	ldr	r0, [r7, #0]
 810ba58:	f000 f8d0 	bl	810bbfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 810ba5c:	4603      	mov	r3, r0
 810ba5e:	2b00      	cmp	r3, #0
 810ba60:	d00e      	beq.n	810ba80 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
<<<<<<< HEAD
 810dd5a:	687c      	ldr	r4, [r7, #4]
 810dd5c:	6838      	ldr	r0, [r7, #0]
 810dd5e:	f000 f8c1 	bl	810dee4 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810dd62:	4603      	mov	r3, r0
 810dd64:	4619      	mov	r1, r3
 810dd66:	4620      	mov	r0, r4
 810dd68:	f000 f8c7 	bl	810defa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
=======
 810ba62:	687c      	ldr	r4, [r7, #4]
 810ba64:	6838      	ldr	r0, [r7, #0]
 810ba66:	f7ff ffe1 	bl	810ba2c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810ba6a:	4603      	mov	r3, r0
 810ba6c:	4619      	mov	r1, r3
 810ba6e:	4620      	mov	r0, r4
 810ba70:	f000 f8cf 	bl	810bc12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	    _M_invoker = &_My_handler::_M_invoke;
<<<<<<< HEAD
 810dd6c:	687b      	ldr	r3, [r7, #4]
 810dd6e:	4a05      	ldr	r2, [pc, #20]	; (810dd84 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 810dd70:	60da      	str	r2, [r3, #12]
=======
 810ba74:	687b      	ldr	r3, [r7, #4]
 810ba76:	4a05      	ldr	r2, [pc, #20]	; (810ba8c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 810ba78:	60da      	str	r2, [r3, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	    _M_manager = &_My_handler::_M_manager;
<<<<<<< HEAD
 810dd72:	687b      	ldr	r3, [r7, #4]
 810dd74:	4a04      	ldr	r2, [pc, #16]	; (810dd88 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 810dd76:	609a      	str	r2, [r3, #8]
=======
 810ba7a:	687b      	ldr	r3, [r7, #4]
 810ba7c:	4a04      	ldr	r2, [pc, #16]	; (810ba90 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 810ba7e:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	  }
      }
<<<<<<< HEAD
 810dd78:	687b      	ldr	r3, [r7, #4]
 810dd7a:	4618      	mov	r0, r3
 810dd7c:	370c      	adds	r7, #12
 810dd7e:	46bd      	mov	sp, r7
 810dd80:	bd90      	pop	{r4, r7, pc}
 810dd82:	bf00      	nop
 810dd84:	0810df1f 	.word	0x0810df1f
 810dd88:	0810df61 	.word	0x0810df61
=======
 810ba80:	687b      	ldr	r3, [r7, #4]
 810ba82:	4618      	mov	r0, r3
 810ba84:	370c      	adds	r7, #12
 810ba86:	46bd      	mov	sp, r7
 810ba88:	bd90      	pop	{r4, r7, pc}
 810ba8a:	bf00      	nop
 810ba8c:	0810bc79 	.word	0x0810bc79
 810ba90:	0810bcb9 	.word	0x0810bcb9
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dd8c <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810dd8c:	b480      	push	{r7}
 810dd8e:	b083      	sub	sp, #12
 810dd90:	af00      	add	r7, sp, #0
 810dd92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810dd94:	687b      	ldr	r3, [r7, #4]
 810dd96:	4618      	mov	r0, r3
 810dd98:	370c      	adds	r7, #12
 810dd9a:	46bd      	mov	sp, r7
 810dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dda0:	4770      	bx	lr

0810dda2 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810dda2:	b480      	push	{r7}
 810dda4:	b083      	sub	sp, #12
 810dda6:	af00      	add	r7, sp, #0
 810dda8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ddaa:	687b      	ldr	r3, [r7, #4]
 810ddac:	4618      	mov	r0, r3
 810ddae:	370c      	adds	r7, #12
 810ddb0:	46bd      	mov	sp, r7
 810ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ddb6:	4770      	bx	lr

0810ddb8 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ddb8:	b480      	push	{r7}
 810ddba:	b083      	sub	sp, #12
 810ddbc:	af00      	add	r7, sp, #0
 810ddbe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ddc0:	687b      	ldr	r3, [r7, #4]
 810ddc2:	4618      	mov	r0, r3
 810ddc4:	370c      	adds	r7, #12
 810ddc6:	46bd      	mov	sp, r7
 810ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ddcc:	4770      	bx	lr

0810ddce <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ddce:	b480      	push	{r7}
 810ddd0:	b083      	sub	sp, #12
 810ddd2:	af00      	add	r7, sp, #0
 810ddd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ddd6:	687b      	ldr	r3, [r7, #4]
 810ddd8:	4618      	mov	r0, r3
 810ddda:	370c      	adds	r7, #12
 810dddc:	46bd      	mov	sp, r7
 810ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dde2:	4770      	bx	lr

0810dde4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810dde4:	b480      	push	{r7}
 810dde6:	b083      	sub	sp, #12
 810dde8:	af00      	add	r7, sp, #0
 810ddea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ddec:	687b      	ldr	r3, [r7, #4]
 810ddee:	4618      	mov	r0, r3
 810ddf0:	370c      	adds	r7, #12
 810ddf2:	46bd      	mov	sp, r7
 810ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ddf8:	4770      	bx	lr

0810ddfa <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
=======
0810ba94 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	explicit _Bind(_Functor&& __f, _Args&&... __args)
<<<<<<< HEAD
 810ddfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ddfe:	b086      	sub	sp, #24
 810de00:	af02      	add	r7, sp, #8
 810de02:	60f8      	str	r0, [r7, #12]
 810de04:	60b9      	str	r1, [r7, #8]
 810de06:	607a      	str	r2, [r7, #4]
 810de08:	603b      	str	r3, [r7, #0]
=======
 810ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ba98:	b086      	sub	sp, #24
 810ba9a:	af02      	add	r7, sp, #8
 810ba9c:	60f8      	str	r0, [r7, #12]
 810ba9e:	60b9      	str	r1, [r7, #8]
 810baa0:	607a      	str	r2, [r7, #4]
 810baa2:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
<<<<<<< HEAD
 810de0a:	68b8      	ldr	r0, [r7, #8]
 810de0c:	f000 f826 	bl	810de5c <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810de10:	4602      	mov	r2, r0
 810de12:	68fb      	ldr	r3, [r7, #12]
 810de14:	e892 0003 	ldmia.w	r2, {r0, r1}
 810de18:	e883 0003 	stmia.w	r3, {r0, r1}
 810de1c:	68fb      	ldr	r3, [r7, #12]
 810de1e:	f103 0408 	add.w	r4, r3, #8
 810de22:	6878      	ldr	r0, [r7, #4]
 810de24:	f7ff ffbd 	bl	810dda2 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810de28:	4605      	mov	r5, r0
 810de2a:	6838      	ldr	r0, [r7, #0]
 810de2c:	f7ff ffc4 	bl	810ddb8 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810de30:	4606      	mov	r6, r0
 810de32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810de34:	f7ff ffcb 	bl	810ddce <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810de38:	4680      	mov	r8, r0
 810de3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810de3c:	f7ff ffd2 	bl	810dde4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810de40:	4603      	mov	r3, r0
 810de42:	9300      	str	r3, [sp, #0]
 810de44:	4643      	mov	r3, r8
 810de46:	4632      	mov	r2, r6
 810de48:	4629      	mov	r1, r5
 810de4a:	4620      	mov	r0, r4
 810de4c:	f000 f8c2 	bl	810dfd4 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
=======
 810baa4:	68b8      	ldr	r0, [r7, #8]
 810baa6:	f000 f826 	bl	810baf6 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810baaa:	4602      	mov	r2, r0
 810baac:	68fb      	ldr	r3, [r7, #12]
 810baae:	e892 0003 	ldmia.w	r2, {r0, r1}
 810bab2:	e883 0003 	stmia.w	r3, {r0, r1}
 810bab6:	68fb      	ldr	r3, [r7, #12]
 810bab8:	f103 0408 	add.w	r4, r3, #8
 810babc:	6878      	ldr	r0, [r7, #4]
 810babe:	f7ff fe38 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810bac2:	4605      	mov	r5, r0
 810bac4:	6838      	ldr	r0, [r7, #0]
 810bac6:	f7ff fe3f 	bl	810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810baca:	4606      	mov	r6, r0
 810bacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810bace:	f7ff fe46 	bl	810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bad2:	4680      	mov	r8, r0
 810bad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810bad6:	f7ff fe4d 	bl	810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bada:	4603      	mov	r3, r0
 810badc:	9300      	str	r3, [sp, #0]
 810bade:	4643      	mov	r3, r8
 810bae0:	4632      	mov	r2, r6
 810bae2:	4629      	mov	r1, r5
 810bae4:	4620      	mov	r0, r4
 810bae6:	f000 f921 	bl	810bd2c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{ }
<<<<<<< HEAD
 810de50:	68fb      	ldr	r3, [r7, #12]
 810de52:	4618      	mov	r0, r3
 810de54:	3710      	adds	r7, #16
 810de56:	46bd      	mov	sp, r7
 810de58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
=======
 810baea:	68fb      	ldr	r3, [r7, #12]
 810baec:	4618      	mov	r0, r3
 810baee:	3710      	adds	r7, #16
 810baf0:	46bd      	mov	sp, r7
 810baf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810de5c <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810de5c:	b480      	push	{r7}
 810de5e:	b083      	sub	sp, #12
 810de60:	af00      	add	r7, sp, #0
 810de62:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810de64:	687b      	ldr	r3, [r7, #4]
 810de66:	4618      	mov	r0, r3
 810de68:	370c      	adds	r7, #12
 810de6a:	46bd      	mov	sp, r7
 810de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de70:	4770      	bx	lr

0810de72 <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
=======
0810baf6 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    move(_Tp&& __t) noexcept
 810baf6:	b480      	push	{r7}
 810baf8:	b083      	sub	sp, #12
 810bafa:	af00      	add	r7, sp, #0
 810bafc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810bafe:	687b      	ldr	r3, [r7, #4]
 810bb00:	4618      	mov	r0, r3
 810bb02:	370c      	adds	r7, #12
 810bb04:	46bd      	mov	sp, r7
 810bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb0a:	4770      	bx	lr

<<<<<<< HEAD
0810de88 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810de88:	b590      	push	{r4, r7, lr}
 810de8a:	b083      	sub	sp, #12
 810de8c:	af00      	add	r7, sp, #0
 810de8e:	6078      	str	r0, [r7, #4]
 810de90:	6039      	str	r1, [r7, #0]
=======
0810bb0c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bb0c:	b580      	push	{r7, lr}
 810bb0e:	b082      	sub	sp, #8
 810bb10:	af00      	add	r7, sp, #0
 810bb12:	6078      	str	r0, [r7, #4]
 810bb14:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810bb16:	6838      	ldr	r0, [r7, #0]
 810bb18:	f7ff fe82 	bl	810b820 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810bb1c:	687b      	ldr	r3, [r7, #4]
 810bb1e:	4618      	mov	r0, r3
 810bb20:	3708      	adds	r7, #8
 810bb22:	46bd      	mov	sp, r7
 810bb24:	bd80      	pop	{r7, pc}

0810bb26 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bb26:	b580      	push	{r7, lr}
 810bb28:	b082      	sub	sp, #8
 810bb2a:	af00      	add	r7, sp, #0
 810bb2c:	6078      	str	r0, [r7, #4]
 810bb2e:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810bb30:	6838      	ldr	r0, [r7, #0]
 810bb32:	f7ff fec3 	bl	810b8bc <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810bb36:	687b      	ldr	r3, [r7, #4]
 810bb38:	4618      	mov	r0, r3
 810bb3a:	3708      	adds	r7, #8
 810bb3c:	46bd      	mov	sp, r7
 810bb3e:	bd80      	pop	{r7, pc}

0810bb40 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bb40:	b580      	push	{r7, lr}
 810bb42:	b082      	sub	sp, #8
 810bb44:	af00      	add	r7, sp, #0
 810bb46:	6078      	str	r0, [r7, #4]
 810bb48:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810bb4a:	6838      	ldr	r0, [r7, #0]
 810bb4c:	f7ff ff10 	bl	810b970 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810bb50:	687b      	ldr	r3, [r7, #4]
 810bb52:	4618      	mov	r0, r3
 810bb54:	3708      	adds	r7, #8
 810bb56:	46bd      	mov	sp, r7
 810bb58:	bd80      	pop	{r7, pc}

0810bb5a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810bb5a:	b480      	push	{r7}
 810bb5c:	b083      	sub	sp, #12
 810bb5e:	af00      	add	r7, sp, #0
 810bb60:	6078      	str	r0, [r7, #4]
 810bb62:	687b      	ldr	r3, [r7, #4]
 810bb64:	4618      	mov	r0, r3
 810bb66:	370c      	adds	r7, #12
 810bb68:	46bd      	mov	sp, r7
 810bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb6e:	4770      	bx	lr

0810bb70 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810bb70:	b580      	push	{r7, lr}
 810bb72:	b082      	sub	sp, #8
 810bb74:	af00      	add	r7, sp, #0
 810bb76:	6078      	str	r0, [r7, #4]
 810bb78:	687b      	ldr	r3, [r7, #4]
 810bb7a:	4618      	mov	r0, r3
 810bb7c:	f000 f805 	bl	810bb8a <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 810bb80:	4603      	mov	r3, r0
 810bb82:	4618      	mov	r0, r3
 810bb84:	3708      	adds	r7, #8
 810bb86:	46bd      	mov	sp, r7
 810bb88:	bd80      	pop	{r7, pc}

0810bb8a <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810bb8a:	b480      	push	{r7}
 810bb8c:	b083      	sub	sp, #12
 810bb8e:	af00      	add	r7, sp, #0
 810bb90:	6078      	str	r0, [r7, #4]
 810bb92:	687b      	ldr	r3, [r7, #4]
 810bb94:	4618      	mov	r0, r3
 810bb96:	370c      	adds	r7, #12
 810bb98:	46bd      	mov	sp, r7
 810bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb9e:	4770      	bx	lr

0810bba0 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810bba0:	b480      	push	{r7}
 810bba2:	b083      	sub	sp, #12
 810bba4:	af00      	add	r7, sp, #0
 810bba6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810bba8:	687b      	ldr	r3, [r7, #4]
 810bbaa:	4618      	mov	r0, r3
 810bbac:	370c      	adds	r7, #12
 810bbae:	46bd      	mov	sp, r7
 810bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbb4:	4770      	bx	lr

0810bbb6 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810bbb6:	b590      	push	{r4, r7, lr}
 810bbb8:	b083      	sub	sp, #12
 810bbba:	af00      	add	r7, sp, #0
 810bbbc:	6078      	str	r0, [r7, #4]
 810bbbe:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      : _Inherited(std::move(_M_tail(__in))),
<<<<<<< HEAD
 810de92:	6838      	ldr	r0, [r7, #0]
 810de94:	f000 f8c4 	bl	810e020 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 810de98:	4603      	mov	r3, r0
 810de9a:	4618      	mov	r0, r3
 810de9c:	f000 f8cb 	bl	810e036 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 810dea0:	4603      	mov	r3, r0
=======
 810bbc0:	6838      	ldr	r0, [r7, #0]
 810bbc2:	f7ff ffca 	bl	810bb5a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 810bbc6:	4603      	mov	r3, r0
 810bbc8:	4618      	mov	r0, r3
 810bbca:	f7ff ffe9 	bl	810bba0 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 810bbce:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	_Base(std::forward<_Head>(_M_head(__in))) { }
<<<<<<< HEAD
 810dea2:	4619      	mov	r1, r3
 810dea4:	6878      	ldr	r0, [r7, #4]
 810dea6:	f000 f8de 	bl	810e066 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 810deaa:	687c      	ldr	r4, [r7, #4]
 810deac:	6838      	ldr	r0, [r7, #0]
 810deae:	f000 f8cd 	bl	810e04c <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810deb2:	4603      	mov	r3, r0
 810deb4:	4618      	mov	r0, r3
 810deb6:	f7ff ff74 	bl	810dda2 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810deba:	4603      	mov	r3, r0
 810debc:	4619      	mov	r1, r3
 810debe:	4620      	mov	r0, r4
 810dec0:	f000 f8f3 	bl	810e0aa <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810dec4:	687b      	ldr	r3, [r7, #4]
 810dec6:	4618      	mov	r0, r3
 810dec8:	370c      	adds	r7, #12
 810deca:	46bd      	mov	sp, r7
 810decc:	bd90      	pop	{r4, r7, pc}
=======
 810bbd0:	4619      	mov	r1, r3
 810bbd2:	6878      	ldr	r0, [r7, #4]
 810bbd4:	f7ff fed7 	bl	810b986 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 810bbd8:	687c      	ldr	r4, [r7, #4]
 810bbda:	6838      	ldr	r0, [r7, #0]
 810bbdc:	f7ff ffc8 	bl	810bb70 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810bbe0:	4603      	mov	r3, r0
 810bbe2:	4618      	mov	r0, r3
 810bbe4:	f7ff fda5 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810bbe8:	4603      	mov	r3, r0
 810bbea:	4619      	mov	r1, r3
 810bbec:	4620      	mov	r0, r4
 810bbee:	f000 f8c3 	bl	810bd78 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810bbf2:	687b      	ldr	r3, [r7, #4]
 810bbf4:	4618      	mov	r0, r3
 810bbf6:	370c      	adds	r7, #12
 810bbf8:	46bd      	mov	sp, r7
 810bbfa:	bd90      	pop	{r4, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dece <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
=======
0810bbfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	  _M_not_empty_function(const _Tp&)
<<<<<<< HEAD
 810dece:	b480      	push	{r7}
 810ded0:	b083      	sub	sp, #12
 810ded2:	af00      	add	r7, sp, #0
 810ded4:	6078      	str	r0, [r7, #4]
=======
 810bbfc:	b480      	push	{r7}
 810bbfe:	b083      	sub	sp, #12
 810bc00:	af00      	add	r7, sp, #0
 810bc02:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	  { return true; }
<<<<<<< HEAD
 810ded6:	2301      	movs	r3, #1
 810ded8:	4618      	mov	r0, r3
 810deda:	370c      	adds	r7, #12
 810dedc:	46bd      	mov	sp, r7
 810dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dee2:	4770      	bx	lr
=======
 810bc04:	2301      	movs	r3, #1
 810bc06:	4618      	mov	r0, r3
 810bc08:	370c      	adds	r7, #12
 810bc0a:	46bd      	mov	sp, r7
 810bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc10:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dee4 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 810dee4:	b480      	push	{r7}
 810dee6:	b083      	sub	sp, #12
 810dee8:	af00      	add	r7, sp, #0
 810deea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810deec:	687b      	ldr	r3, [r7, #4]
 810deee:	4618      	mov	r0, r3
 810def0:	370c      	adds	r7, #12
 810def2:	46bd      	mov	sp, r7
 810def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810def8:	4770      	bx	lr

0810defa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
=======
0810bc12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
<<<<<<< HEAD
 810defa:	b590      	push	{r4, r7, lr}
 810defc:	b085      	sub	sp, #20
 810defe:	af00      	add	r7, sp, #0
 810df00:	6078      	str	r0, [r7, #4]
 810df02:	6039      	str	r1, [r7, #0]
=======
 810bc12:	b590      	push	{r4, r7, lr}
 810bc14:	b085      	sub	sp, #20
 810bc16:	af00      	add	r7, sp, #0
 810bc18:	6078      	str	r0, [r7, #4]
 810bc1a:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
<<<<<<< HEAD
 810df04:	6838      	ldr	r0, [r7, #0]
 810df06:	f7ff ffed 	bl	810dee4 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810df0a:	4603      	mov	r3, r0
 810df0c:	4622      	mov	r2, r4
 810df0e:	4619      	mov	r1, r3
 810df10:	6878      	ldr	r0, [r7, #4]
 810df12:	f000 f8db 	bl	810e0cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 810df16:	bf00      	nop
 810df18:	3714      	adds	r7, #20
 810df1a:	46bd      	mov	sp, r7
 810df1c:	bd90      	pop	{r4, r7, pc}
=======
 810bc1c:	6838      	ldr	r0, [r7, #0]
 810bc1e:	f7ff ff05 	bl	810ba2c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810bc22:	4603      	mov	r3, r0
 810bc24:	4622      	mov	r2, r4
 810bc26:	4619      	mov	r1, r3
 810bc28:	6878      	ldr	r0, [r7, #4]
 810bc2a:	f000 f8b6 	bl	810bd9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 810bc2e:	bf00      	nop
 810bc30:	3714      	adds	r7, #20
 810bc32:	46bd      	mov	sp, r7
 810bc34:	bd90      	pop	{r4, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810df1e <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
=======
0810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bc36:	b480      	push	{r7}
 810bc38:	b083      	sub	sp, #12
 810bc3a:	af00      	add	r7, sp, #0
 810bc3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bc3e:	687b      	ldr	r3, [r7, #4]
 810bc40:	4618      	mov	r0, r3
 810bc42:	370c      	adds	r7, #12
 810bc44:	46bd      	mov	sp, r7
 810bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc4a:	4770      	bx	lr

0810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bc4c:	b480      	push	{r7}
 810bc4e:	b083      	sub	sp, #12
 810bc50:	af00      	add	r7, sp, #0
 810bc52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bc54:	687b      	ldr	r3, [r7, #4]
 810bc56:	4618      	mov	r0, r3
 810bc58:	370c      	adds	r7, #12
 810bc5a:	46bd      	mov	sp, r7
 810bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc60:	4770      	bx	lr

0810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bc62:	b480      	push	{r7}
 810bc64:	b083      	sub	sp, #12
 810bc66:	af00      	add	r7, sp, #0
 810bc68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bc6a:	687b      	ldr	r3, [r7, #4]
 810bc6c:	4618      	mov	r0, r3
 810bc6e:	370c      	adds	r7, #12
 810bc70:	46bd      	mov	sp, r7
 810bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc76:	4770      	bx	lr

0810bc78 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
<<<<<<< HEAD
 810df1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 810df20:	b085      	sub	sp, #20
 810df22:	af00      	add	r7, sp, #0
 810df24:	60f8      	str	r0, [r7, #12]
 810df26:	60b9      	str	r1, [r7, #8]
 810df28:	607a      	str	r2, [r7, #4]
 810df2a:	603b      	str	r3, [r7, #0]
=======
 810bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 810bc7a:	b085      	sub	sp, #20
 810bc7c:	af00      	add	r7, sp, #0
 810bc7e:	60f8      	str	r0, [r7, #12]
 810bc80:	60b9      	str	r1, [r7, #8]
 810bc82:	607a      	str	r2, [r7, #4]
 810bc84:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	(*_Base::_M_get_pointer(__functor))(
<<<<<<< HEAD
 810df2c:	68f8      	ldr	r0, [r7, #12]
 810df2e:	f000 f8e9 	bl	810e104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810df32:	4604      	mov	r4, r0
 810df34:	68b8      	ldr	r0, [r7, #8]
 810df36:	f000 f8f2 	bl	810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810df3a:	4605      	mov	r5, r0
 810df3c:	6878      	ldr	r0, [r7, #4]
 810df3e:	f000 f8f9 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810df42:	4606      	mov	r6, r0
 810df44:	6838      	ldr	r0, [r7, #0]
 810df46:	f000 f900 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810df4a:	4603      	mov	r3, r0
 810df4c:	4632      	mov	r2, r6
 810df4e:	4629      	mov	r1, r5
 810df50:	4620      	mov	r0, r4
 810df52:	f000 f905 	bl	810e160 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
=======
 810bc86:	68f8      	ldr	r0, [r7, #12]
 810bc88:	f000 f8a3 	bl	810bdd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810bc8c:	4604      	mov	r4, r0
 810bc8e:	68b8      	ldr	r0, [r7, #8]
 810bc90:	f7ff ffd1 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810bc94:	4605      	mov	r5, r0
 810bc96:	6878      	ldr	r0, [r7, #4]
 810bc98:	f7ff ffd8 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810bc9c:	4606      	mov	r6, r0
 810bc9e:	6838      	ldr	r0, [r7, #0]
 810bca0:	f7ff ffdf 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810bca4:	4603      	mov	r3, r0
 810bca6:	4632      	mov	r2, r6
 810bca8:	4629      	mov	r1, r5
 810bcaa:	4620      	mov	r0, r4
 810bcac:	f000 f9a9 	bl	810c002 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      }
<<<<<<< HEAD
 810df56:	bf00      	nop
 810df58:	3714      	adds	r7, #20
 810df5a:	46bd      	mov	sp, r7
 810df5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...
=======
 810bcb0:	bf00      	nop
 810bcb2:	3714      	adds	r7, #20
 810bcb4:	46bd      	mov	sp, r7
 810bcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810df60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
=======
0810bcb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	_M_manager(_Any_data& __dest, const _Any_data& __source,
<<<<<<< HEAD
 810df60:	b5b0      	push	{r4, r5, r7, lr}
 810df62:	b086      	sub	sp, #24
 810df64:	af00      	add	r7, sp, #0
 810df66:	60f8      	str	r0, [r7, #12]
 810df68:	60b9      	str	r1, [r7, #8]
 810df6a:	4613      	mov	r3, r2
 810df6c:	71fb      	strb	r3, [r7, #7]
=======
 810bcb8:	b5b0      	push	{r4, r5, r7, lr}
 810bcba:	b086      	sub	sp, #24
 810bcbc:	af00      	add	r7, sp, #0
 810bcbe:	60f8      	str	r0, [r7, #12]
 810bcc0:	60b9      	str	r1, [r7, #8]
 810bcc2:	4613      	mov	r3, r2
 810bcc4:	71fb      	strb	r3, [r7, #7]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	  switch (__op)
<<<<<<< HEAD
 810df6e:	79fb      	ldrb	r3, [r7, #7]
 810df70:	2b03      	cmp	r3, #3
 810df72:	d827      	bhi.n	810dfc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 810df74:	a201      	add	r2, pc, #4	; (adr r2, 810df7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 810df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810df7a:	bf00      	nop
 810df7c:	0810df8d 	.word	0x0810df8d
 810df80:	0810df9b 	.word	0x0810df9b
 810df84:	0810dfaf 	.word	0x0810dfaf
 810df88:	0810dfbb 	.word	0x0810dfbb
=======
 810bcc6:	79fb      	ldrb	r3, [r7, #7]
 810bcc8:	2b03      	cmp	r3, #3
 810bcca:	d827      	bhi.n	810bd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 810bccc:	a201      	add	r2, pc, #4	; (adr r2, 810bcd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 810bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bcd2:	bf00      	nop
 810bcd4:	0810bce5 	.word	0x0810bce5
 810bcd8:	0810bcf3 	.word	0x0810bcf3
 810bcdc:	0810bd07 	.word	0x0810bd07
 810bce0:	0810bd13 	.word	0x0810bd13
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
<<<<<<< HEAD
 810df8c:	68f8      	ldr	r0, [r7, #12]
 810df8e:	f000 f90a 	bl	810e1a6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810df92:	4603      	mov	r3, r0
 810df94:	4a0e      	ldr	r2, [pc, #56]	; (810dfd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 810df96:	601a      	str	r2, [r3, #0]
=======
 810bce4:	68f8      	ldr	r0, [r7, #12]
 810bce6:	f000 f9af 	bl	810c048 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810bcea:	4602      	mov	r2, r0
 810bcec:	4b0e      	ldr	r3, [pc, #56]	; (810bd28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 810bcee:	6013      	str	r3, [r2, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	      break;
<<<<<<< HEAD
 810df98:	e014      	b.n	810dfc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
=======
 810bcf0:	e014      	b.n	810bd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
<<<<<<< HEAD
 810df9a:	68f8      	ldr	r0, [r7, #12]
 810df9c:	f000 f90f 	bl	810e1be <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810dfa0:	4604      	mov	r4, r0
 810dfa2:	68b8      	ldr	r0, [r7, #8]
 810dfa4:	f000 f8ae 	bl	810e104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810dfa8:	4603      	mov	r3, r0
 810dfaa:	6023      	str	r3, [r4, #0]
=======
 810bcf2:	68f8      	ldr	r0, [r7, #12]
 810bcf4:	f000 f9b4 	bl	810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810bcf8:	4604      	mov	r4, r0
 810bcfa:	68b8      	ldr	r0, [r7, #8]
 810bcfc:	f000 f869 	bl	810bdd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810bd00:	4603      	mov	r3, r0
 810bd02:	6023      	str	r3, [r4, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	      break;
<<<<<<< HEAD
 810dfac:	e00a      	b.n	810dfc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
=======
 810bd04:	e00a      	b.n	810bd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	      _M_clone(__dest, __source, _Local_storage());
<<<<<<< HEAD
 810dfae:	462a      	mov	r2, r5
 810dfb0:	68b9      	ldr	r1, [r7, #8]
 810dfb2:	68f8      	ldr	r0, [r7, #12]
 810dfb4:	f000 f90f 	bl	810e1d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
=======
 810bd06:	462a      	mov	r2, r5
 810bd08:	68b9      	ldr	r1, [r7, #8]
 810bd0a:	68f8      	ldr	r0, [r7, #12]
 810bd0c:	f000 f9b4 	bl	810c078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	      break;
<<<<<<< HEAD
 810dfb8:	e004      	b.n	810dfc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
=======
 810bd10:	e004      	b.n	810bd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	      _M_destroy(__dest, _Local_storage());
<<<<<<< HEAD
 810dfba:	4621      	mov	r1, r4
 810dfbc:	68f8      	ldr	r0, [r7, #12]
 810dfbe:	f000 f928 	bl	810e212 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
=======
 810bd12:	4621      	mov	r1, r4
 810bd14:	68f8      	ldr	r0, [r7, #12]
 810bd16:	f000 f9cd 	bl	810c0b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	      break;
<<<<<<< HEAD
 810dfc2:	bf00      	nop
=======
 810bd1a:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	  return false;
<<<<<<< HEAD
 810dfc4:	2300      	movs	r3, #0
=======
 810bd1c:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810dfc6:	4618      	mov	r0, r3
 810dfc8:	3718      	adds	r7, #24
 810dfca:	46bd      	mov	sp, r7
 810dfcc:	bdb0      	pop	{r4, r5, r7, pc}
 810dfce:	bf00      	nop
 810dfd0:	08114a9c 	.word	0x08114a9c
=======
 810bd1e:	4618      	mov	r0, r3
 810bd20:	3718      	adds	r7, #24
 810bd22:	46bd      	mov	sp, r7
 810bd24:	bdb0      	pop	{r4, r5, r7, pc}
 810bd26:	bf00      	nop
 810bd28:	08110a98 	.word	0x08110a98
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810dfd4 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
=======
0810bd2c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        constexpr tuple(_UElements&&... __elements)
<<<<<<< HEAD
 810dfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dfd8:	b086      	sub	sp, #24
 810dfda:	af02      	add	r7, sp, #8
 810dfdc:	60f8      	str	r0, [r7, #12]
 810dfde:	60b9      	str	r1, [r7, #8]
 810dfe0:	607a      	str	r2, [r7, #4]
 810dfe2:	603b      	str	r3, [r7, #0]
=======
 810bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bd30:	b086      	sub	sp, #24
 810bd32:	af02      	add	r7, sp, #8
 810bd34:	60f8      	str	r0, [r7, #12]
 810bd36:	60b9      	str	r1, [r7, #8]
 810bd38:	607a      	str	r2, [r7, #4]
 810bd3a:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        : _Inherited(std::forward<_UElements>(__elements)...) { }
<<<<<<< HEAD
 810dfe4:	68fc      	ldr	r4, [r7, #12]
 810dfe6:	68b8      	ldr	r0, [r7, #8]
 810dfe8:	f7ff fedb 	bl	810dda2 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810dfec:	4605      	mov	r5, r0
 810dfee:	6878      	ldr	r0, [r7, #4]
 810dff0:	f7ff fee2 	bl	810ddb8 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dff4:	4606      	mov	r6, r0
 810dff6:	6838      	ldr	r0, [r7, #0]
 810dff8:	f7ff fee9 	bl	810ddce <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dffc:	4680      	mov	r8, r0
 810dffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e000:	f7ff fef0 	bl	810dde4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e004:	4603      	mov	r3, r0
 810e006:	9300      	str	r3, [sp, #0]
 810e008:	4643      	mov	r3, r8
 810e00a:	4632      	mov	r2, r6
 810e00c:	4629      	mov	r1, r5
 810e00e:	4620      	mov	r0, r4
 810e010:	f000 f913 	bl	810e23a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 810e014:	68fb      	ldr	r3, [r7, #12]
 810e016:	4618      	mov	r0, r3
 810e018:	3710      	adds	r7, #16
 810e01a:	46bd      	mov	sp, r7
 810e01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
=======
 810bd3c:	68fc      	ldr	r4, [r7, #12]
 810bd3e:	68b8      	ldr	r0, [r7, #8]
 810bd40:	f7ff fcf7 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810bd44:	4605      	mov	r5, r0
 810bd46:	6878      	ldr	r0, [r7, #4]
 810bd48:	f7ff fcfe 	bl	810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bd4c:	4606      	mov	r6, r0
 810bd4e:	6838      	ldr	r0, [r7, #0]
 810bd50:	f7ff fd05 	bl	810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bd54:	4680      	mov	r8, r0
 810bd56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810bd58:	f7ff fd0c 	bl	810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810bd5c:	4603      	mov	r3, r0
 810bd5e:	9300      	str	r3, [sp, #0]
 810bd60:	4643      	mov	r3, r8
 810bd62:	4632      	mov	r2, r6
 810bd64:	4629      	mov	r1, r5
 810bd66:	4620      	mov	r0, r4
 810bd68:	f000 f9b6 	bl	810c0d8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 810bd6c:	68fb      	ldr	r3, [r7, #12]
 810bd6e:	4618      	mov	r0, r3
 810bd70:	3710      	adds	r7, #16
 810bd72:	46bd      	mov	sp, r7
 810bd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e020 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810e020:	b480      	push	{r7}
 810e022:	b083      	sub	sp, #12
 810e024:	af00      	add	r7, sp, #0
 810e026:	6078      	str	r0, [r7, #4]
 810e028:	687b      	ldr	r3, [r7, #4]
 810e02a:	4618      	mov	r0, r3
 810e02c:	370c      	adds	r7, #12
 810e02e:	46bd      	mov	sp, r7
 810e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e034:	4770      	bx	lr

0810e036 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810e036:	b480      	push	{r7}
 810e038:	b083      	sub	sp, #12
 810e03a:	af00      	add	r7, sp, #0
 810e03c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e03e:	687b      	ldr	r3, [r7, #4]
 810e040:	4618      	mov	r0, r3
 810e042:	370c      	adds	r7, #12
 810e044:	46bd      	mov	sp, r7
 810e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e04a:	4770      	bx	lr

0810e04c <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e04c:	b580      	push	{r7, lr}
 810e04e:	b082      	sub	sp, #8
 810e050:	af00      	add	r7, sp, #0
 810e052:	6078      	str	r0, [r7, #4]
 810e054:	687b      	ldr	r3, [r7, #4]
 810e056:	4618      	mov	r0, r3
 810e058:	f000 f915 	bl	810e286 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 810e05c:	4603      	mov	r3, r0
 810e05e:	4618      	mov	r0, r3
 810e060:	3708      	adds	r7, #8
 810e062:	46bd      	mov	sp, r7
 810e064:	bd80      	pop	{r7, pc}

0810e066 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810e066:	b580      	push	{r7, lr}
 810e068:	b082      	sub	sp, #8
 810e06a:	af00      	add	r7, sp, #0
 810e06c:	6078      	str	r0, [r7, #4]
 810e06e:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810e070:	6838      	ldr	r0, [r7, #0]
 810e072:	f000 f913 	bl	810e29c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 810e076:	4603      	mov	r3, r0
 810e078:	4618      	mov	r0, r3
 810e07a:	f000 f91a 	bl	810e2b2 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 810e07e:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810e080:	4619      	mov	r1, r3
 810e082:	6878      	ldr	r0, [r7, #4]
 810e084:	f000 f937 	bl	810e2f6 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 810e088:	6838      	ldr	r0, [r7, #0]
 810e08a:	f000 f91d 	bl	810e2c8 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810e08e:	4603      	mov	r3, r0
 810e090:	4618      	mov	r0, r3
 810e092:	f000 f925 	bl	810e2e0 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e096:	4603      	mov	r3, r0
 810e098:	4619      	mov	r1, r3
 810e09a:	6878      	ldr	r0, [r7, #4]
 810e09c:	f000 f94d 	bl	810e33a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 810e0a0:	687b      	ldr	r3, [r7, #4]
 810e0a2:	4618      	mov	r0, r3
 810e0a4:	3708      	adds	r7, #8
 810e0a6:	46bd      	mov	sp, r7
 810e0a8:	bd80      	pop	{r7, pc}

0810e0aa <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
=======
0810bd78 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
        constexpr _Head_base(_UHead&& __h)
<<<<<<< HEAD
 810e0aa:	b580      	push	{r7, lr}
 810e0ac:	b082      	sub	sp, #8
 810e0ae:	af00      	add	r7, sp, #0
 810e0b0:	6078      	str	r0, [r7, #4]
 810e0b2:	6039      	str	r1, [r7, #0]
=======
 810bd78:	b580      	push	{r7, lr}
 810bd7a:	b082      	sub	sp, #8
 810bd7c:	af00      	add	r7, sp, #0
 810bd7e:	6078      	str	r0, [r7, #4]
 810bd80:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	: _M_head_impl(std::forward<_UHead>(__h)) { }
<<<<<<< HEAD
 810e0b4:	6838      	ldr	r0, [r7, #0]
 810e0b6:	f7ff fe74 	bl	810dda2 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810e0ba:	4603      	mov	r3, r0
 810e0bc:	681a      	ldr	r2, [r3, #0]
 810e0be:	687b      	ldr	r3, [r7, #4]
 810e0c0:	601a      	str	r2, [r3, #0]
 810e0c2:	687b      	ldr	r3, [r7, #4]
 810e0c4:	4618      	mov	r0, r3
 810e0c6:	3708      	adds	r7, #8
 810e0c8:	46bd      	mov	sp, r7
 810e0ca:	bd80      	pop	{r7, pc}
=======
 810bd82:	6838      	ldr	r0, [r7, #0]
 810bd84:	f7ff fcd5 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810bd88:	4603      	mov	r3, r0
 810bd8a:	681a      	ldr	r2, [r3, #0]
 810bd8c:	687b      	ldr	r3, [r7, #4]
 810bd8e:	601a      	str	r2, [r3, #0]
 810bd90:	687b      	ldr	r3, [r7, #4]
 810bd92:	4618      	mov	r0, r3
 810bd94:	3708      	adds	r7, #8
 810bd96:	46bd      	mov	sp, r7
 810bd98:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e0cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
=======
0810bd9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
<<<<<<< HEAD
 810e0cc:	b5b0      	push	{r4, r5, r7, lr}
 810e0ce:	b084      	sub	sp, #16
 810e0d0:	af00      	add	r7, sp, #0
 810e0d2:	60f8      	str	r0, [r7, #12]
 810e0d4:	60b9      	str	r1, [r7, #8]
 810e0d6:	713a      	strb	r2, [r7, #4]
=======
 810bd9a:	b5b0      	push	{r4, r5, r7, lr}
 810bd9c:	b084      	sub	sp, #16
 810bd9e:	af00      	add	r7, sp, #0
 810bda0:	60f8      	str	r0, [r7, #12]
 810bda2:	60b9      	str	r1, [r7, #8]
 810bda4:	713a      	strb	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
<<<<<<< HEAD
 810e0d8:	68b8      	ldr	r0, [r7, #8]
 810e0da:	f7ff ff03 	bl	810dee4 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810e0de:	4605      	mov	r5, r0
 810e0e0:	200c      	movs	r0, #12
 810e0e2:	f7fe f83d 	bl	810c160 <_Znwj>
 810e0e6:	4603      	mov	r3, r0
 810e0e8:	461c      	mov	r4, r3
 810e0ea:	4629      	mov	r1, r5
 810e0ec:	4620      	mov	r0, r4
 810e0ee:	f7ff fe04 	bl	810dcfa <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 810e0f2:	68f8      	ldr	r0, [r7, #12]
 810e0f4:	f000 f863 	bl	810e1be <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810e0f8:	4603      	mov	r3, r0
 810e0fa:	601c      	str	r4, [r3, #0]
 810e0fc:	bf00      	nop
 810e0fe:	3710      	adds	r7, #16
 810e100:	46bd      	mov	sp, r7
 810e102:	bdb0      	pop	{r4, r5, r7, pc}
=======
 810bda6:	68b8      	ldr	r0, [r7, #8]
 810bda8:	f7ff fe40 	bl	810ba2c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810bdac:	4605      	mov	r5, r0
 810bdae:	200c      	movs	r0, #12
 810bdb0:	f7fe ff6e 	bl	810ac90 <_Znwj>
 810bdb4:	4603      	mov	r3, r0
 810bdb6:	461c      	mov	r4, r3
 810bdb8:	4629      	mov	r1, r5
 810bdba:	4620      	mov	r0, r4
 810bdbc:	f7ff fe15 	bl	810b9ea <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 810bdc0:	68f8      	ldr	r0, [r7, #12]
 810bdc2:	f000 f94d 	bl	810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810bdc6:	4603      	mov	r3, r0
 810bdc8:	601c      	str	r4, [r3, #0]
 810bdca:	bf00      	nop
 810bdcc:	3710      	adds	r7, #16
 810bdce:	46bd      	mov	sp, r7
 810bdd0:	bdb0      	pop	{r4, r5, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
=======
0810bdd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	_M_get_pointer(const _Any_data& __source)
<<<<<<< HEAD
 810e104:	b580      	push	{r7, lr}
 810e106:	b082      	sub	sp, #8
 810e108:	af00      	add	r7, sp, #0
 810e10a:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 810e10c:	6878      	ldr	r0, [r7, #4]
 810e10e:	f000 f921 	bl	810e354 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810e112:	4603      	mov	r3, r0
 810e114:	681b      	ldr	r3, [r3, #0]
=======
 810bdd2:	b580      	push	{r7, lr}
 810bdd4:	b084      	sub	sp, #16
 810bdd6:	af00      	add	r7, sp, #0
 810bdd8:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 810bdda:	6878      	ldr	r0, [r7, #4]
 810bddc:	f000 f9a2 	bl	810c124 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810bde0:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 810bde2:	681b      	ldr	r3, [r3, #0]
 810bde4:	60fb      	str	r3, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 810bde6:	68fb      	ldr	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810e116:	4618      	mov	r0, r3
 810e118:	3708      	adds	r7, #8
 810e11a:	46bd      	mov	sp, r7
 810e11c:	bd80      	pop	{r7, pc}
=======
 810bde8:	4618      	mov	r0, r3
 810bdea:	3710      	adds	r7, #16
 810bdec:	46bd      	mov	sp, r7
 810bdee:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e11e:	b480      	push	{r7}
 810e120:	b083      	sub	sp, #12
 810e122:	af00      	add	r7, sp, #0
 810e124:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e126:	687b      	ldr	r3, [r7, #4]
 810e128:	4618      	mov	r0, r3
 810e12a:	370c      	adds	r7, #12
 810e12c:	46bd      	mov	sp, r7
 810e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e132:	4770      	bx	lr
=======
0810bdf0 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 810bdf2:	b085      	sub	sp, #20
 810bdf4:	af00      	add	r7, sp, #0
 810bdf6:	60f8      	str	r0, [r7, #12]
 810bdf8:	60b9      	str	r1, [r7, #8]
 810bdfa:	607a      	str	r2, [r7, #4]
 810bdfc:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810bdfe:	68fc      	ldr	r4, [r7, #12]
 810be00:	68b8      	ldr	r0, [r7, #8]
 810be02:	f7ff ff18 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810be06:	4605      	mov	r5, r0
 810be08:	6878      	ldr	r0, [r7, #4]
 810be0a:	f7ff ff1f 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810be0e:	4606      	mov	r6, r0
 810be10:	6838      	ldr	r0, [r7, #0]
 810be12:	f7ff ff26 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810be16:	4603      	mov	r3, r0
 810be18:	4632      	mov	r2, r6
 810be1a:	4629      	mov	r1, r5
 810be1c:	4620      	mov	r0, r4
 810be1e:	f000 f805 	bl	810be2c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 810be22:	68fb      	ldr	r3, [r7, #12]
 810be24:	4618      	mov	r0, r3
 810be26:	3714      	adds	r7, #20
 810be28:	46bd      	mov	sp, r7
 810be2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e134:	b480      	push	{r7}
 810e136:	b083      	sub	sp, #12
 810e138:	af00      	add	r7, sp, #0
 810e13a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e13c:	687b      	ldr	r3, [r7, #4]
 810e13e:	4618      	mov	r0, r3
 810e140:	370c      	adds	r7, #12
 810e142:	46bd      	mov	sp, r7
 810e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e148:	4770      	bx	lr
=======
0810be2c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810be2c:	b5b0      	push	{r4, r5, r7, lr}
 810be2e:	b084      	sub	sp, #16
 810be30:	af00      	add	r7, sp, #0
 810be32:	60f8      	str	r0, [r7, #12]
 810be34:	60b9      	str	r1, [r7, #8]
 810be36:	607a      	str	r2, [r7, #4]
 810be38:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810be3a:	68fc      	ldr	r4, [r7, #12]
 810be3c:	6878      	ldr	r0, [r7, #4]
 810be3e:	f7ff ff05 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810be42:	4605      	mov	r5, r0
 810be44:	6838      	ldr	r0, [r7, #0]
 810be46:	f7ff ff0c 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810be4a:	4603      	mov	r3, r0
 810be4c:	461a      	mov	r2, r3
 810be4e:	4629      	mov	r1, r5
 810be50:	4620      	mov	r0, r4
 810be52:	f000 f810 	bl	810be76 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 810be56:	68fb      	ldr	r3, [r7, #12]
 810be58:	f103 0408 	add.w	r4, r3, #8
 810be5c:	68b8      	ldr	r0, [r7, #8]
 810be5e:	f7ff feea 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810be62:	4603      	mov	r3, r0
 810be64:	4619      	mov	r1, r3
 810be66:	4620      	mov	r0, r4
 810be68:	f000 f856 	bl	810bf18 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 810be6c:	68fb      	ldr	r3, [r7, #12]
 810be6e:	4618      	mov	r0, r3
 810be70:	3710      	adds	r7, #16
 810be72:	46bd      	mov	sp, r7
 810be74:	bdb0      	pop	{r4, r5, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e14a:	b480      	push	{r7}
 810e14c:	b083      	sub	sp, #12
 810e14e:	af00      	add	r7, sp, #0
 810e150:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e152:	687b      	ldr	r3, [r7, #4]
 810e154:	4618      	mov	r0, r3
 810e156:	370c      	adds	r7, #12
 810e158:	46bd      	mov	sp, r7
 810e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e15e:	4770      	bx	lr

0810e160 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 810e160:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e162:	b089      	sub	sp, #36	; 0x24
 810e164:	af00      	add	r7, sp, #0
 810e166:	60f8      	str	r0, [r7, #12]
 810e168:	60b9      	str	r1, [r7, #8]
 810e16a:	607a      	str	r2, [r7, #4]
 810e16c:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 810e16e:	68b8      	ldr	r0, [r7, #8]
 810e170:	f7ff ffd5 	bl	810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e174:	4604      	mov	r4, r0
 810e176:	6878      	ldr	r0, [r7, #4]
 810e178:	f7ff ffdc 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e17c:	4605      	mov	r5, r0
 810e17e:	6838      	ldr	r0, [r7, #0]
 810e180:	f7ff ffe3 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e184:	4603      	mov	r3, r0
 810e186:	f107 0010 	add.w	r0, r7, #16
 810e18a:	462a      	mov	r2, r5
 810e18c:	4621      	mov	r1, r4
 810e18e:	f000 f8ed 	bl	810e36c <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 810e192:	f107 0310 	add.w	r3, r7, #16
 810e196:	4632      	mov	r2, r6
 810e198:	4619      	mov	r1, r3
 810e19a:	68f8      	ldr	r0, [r7, #12]
 810e19c:	f000 f902 	bl	810e3a4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 810e1a0:	3724      	adds	r7, #36	; 0x24
 810e1a2:	46bd      	mov	sp, r7
 810e1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810e1a6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 810e1a6:	b580      	push	{r7, lr}
 810e1a8:	b082      	sub	sp, #8
 810e1aa:	af00      	add	r7, sp, #0
 810e1ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810e1ae:	6878      	ldr	r0, [r7, #4]
 810e1b0:	f7ff fc4d 	bl	810da4e <_ZNSt9_Any_data9_M_accessEv>
 810e1b4:	4603      	mov	r3, r0
 810e1b6:	4618      	mov	r0, r3
 810e1b8:	3708      	adds	r7, #8
 810e1ba:	46bd      	mov	sp, r7
 810e1bc:	bd80      	pop	{r7, pc}

0810e1be <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 810e1be:	b580      	push	{r7, lr}
 810e1c0:	b082      	sub	sp, #8
 810e1c2:	af00      	add	r7, sp, #0
 810e1c4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810e1c6:	6878      	ldr	r0, [r7, #4]
 810e1c8:	f7ff fc41 	bl	810da4e <_ZNSt9_Any_data9_M_accessEv>
 810e1cc:	4603      	mov	r3, r0
 810e1ce:	4618      	mov	r0, r3
 810e1d0:	3708      	adds	r7, #8
 810e1d2:	46bd      	mov	sp, r7
 810e1d4:	bd80      	pop	{r7, pc}

0810e1d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 810e1d6:	b5b0      	push	{r4, r5, r7, lr}
 810e1d8:	b084      	sub	sp, #16
 810e1da:	af00      	add	r7, sp, #0
 810e1dc:	60f8      	str	r0, [r7, #12]
 810e1de:	60b9      	str	r1, [r7, #8]
 810e1e0:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 810e1e2:	68b8      	ldr	r0, [r7, #8]
 810e1e4:	f000 f926 	bl	810e434 <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810e1e8:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 810e1ea:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 810e1ec:	200c      	movs	r0, #12
 810e1ee:	f7fd ffb7 	bl	810c160 <_Znwj>
 810e1f2:	4603      	mov	r3, r0
 810e1f4:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 810e1f6:	4623      	mov	r3, r4
 810e1f8:	462a      	mov	r2, r5
 810e1fa:	ca07      	ldmia	r2, {r0, r1, r2}
 810e1fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810e200:	68f8      	ldr	r0, [r7, #12]
 810e202:	f7ff ffdc 	bl	810e1be <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810e206:	4603      	mov	r3, r0
 810e208:	601c      	str	r4, [r3, #0]
	}
 810e20a:	bf00      	nop
 810e20c:	3710      	adds	r7, #16
 810e20e:	46bd      	mov	sp, r7
 810e210:	bdb0      	pop	{r4, r5, r7, pc}
=======
0810be76 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810be76:	b590      	push	{r4, r7, lr}
 810be78:	b085      	sub	sp, #20
 810be7a:	af00      	add	r7, sp, #0
 810be7c:	60f8      	str	r0, [r7, #12]
 810be7e:	60b9      	str	r1, [r7, #8]
 810be80:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 810be82:	68fc      	ldr	r4, [r7, #12]
 810be84:	6878      	ldr	r0, [r7, #4]
 810be86:	f7ff feec 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810be8a:	4603      	mov	r3, r0
 810be8c:	4619      	mov	r1, r3
 810be8e:	4620      	mov	r0, r4
 810be90:	f000 f80f 	bl	810beb2 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 810be94:	68fb      	ldr	r3, [r7, #12]
 810be96:	1d1c      	adds	r4, r3, #4
 810be98:	68b8      	ldr	r0, [r7, #8]
 810be9a:	f7ff fed7 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810be9e:	4603      	mov	r3, r0
 810bea0:	4619      	mov	r1, r3
 810bea2:	4620      	mov	r0, r4
 810bea4:	f000 f828 	bl	810bef8 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 810bea8:	68fb      	ldr	r3, [r7, #12]
 810beaa:	4618      	mov	r0, r3
 810beac:	3714      	adds	r7, #20
 810beae:	46bd      	mov	sp, r7
 810beb0:	bd90      	pop	{r4, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e212 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 810e212:	b580      	push	{r7, lr}
 810e214:	b082      	sub	sp, #8
 810e216:	af00      	add	r7, sp, #0
 810e218:	6078      	str	r0, [r7, #4]
 810e21a:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 810e21c:	6878      	ldr	r0, [r7, #4]
 810e21e:	f7ff ffce 	bl	810e1be <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810e222:	4603      	mov	r3, r0
 810e224:	681b      	ldr	r3, [r3, #0]
 810e226:	2b00      	cmp	r3, #0
 810e228:	d003      	beq.n	810e232 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 810e22a:	210c      	movs	r1, #12
 810e22c:	4618      	mov	r0, r3
 810e22e:	f002 fc37 	bl	8110aa0 <_ZdlPvj>
	}
 810e232:	bf00      	nop
 810e234:	3708      	adds	r7, #8
 810e236:	46bd      	mov	sp, r7
 810e238:	bd80      	pop	{r7, pc}
=======
0810beb2 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 810beb2:	b590      	push	{r4, r7, lr}
 810beb4:	b083      	sub	sp, #12
 810beb6:	af00      	add	r7, sp, #0
 810beb8:	6078      	str	r0, [r7, #4]
 810beba:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 810bebc:	687c      	ldr	r4, [r7, #4]
 810bebe:	6838      	ldr	r0, [r7, #0]
 810bec0:	f7ff fecf 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810bec4:	4603      	mov	r3, r0
 810bec6:	4619      	mov	r1, r3
 810bec8:	4620      	mov	r0, r4
 810beca:	f000 f805 	bl	810bed8 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 810bece:	687b      	ldr	r3, [r7, #4]
 810bed0:	4618      	mov	r0, r3
 810bed2:	370c      	adds	r7, #12
 810bed4:	46bd      	mov	sp, r7
 810bed6:	bd90      	pop	{r4, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e23a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810e23a:	b5b0      	push	{r4, r5, r7, lr}
 810e23c:	b084      	sub	sp, #16
 810e23e:	af00      	add	r7, sp, #0
 810e240:	60f8      	str	r0, [r7, #12]
 810e242:	60b9      	str	r1, [r7, #8]
 810e244:	607a      	str	r2, [r7, #4]
 810e246:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810e248:	6878      	ldr	r0, [r7, #4]
 810e24a:	f7ff fdb5 	bl	810ddb8 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e24e:	4604      	mov	r4, r0
 810e250:	6838      	ldr	r0, [r7, #0]
 810e252:	f7ff fdbc 	bl	810ddce <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e256:	4605      	mov	r5, r0
 810e258:	6a38      	ldr	r0, [r7, #32]
 810e25a:	f7ff fdc3 	bl	810dde4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e25e:	4603      	mov	r3, r0
 810e260:	462a      	mov	r2, r5
 810e262:	4621      	mov	r1, r4
 810e264:	68f8      	ldr	r0, [r7, #12]
 810e266:	f000 f8f1 	bl	810e44c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 810e26a:	68fc      	ldr	r4, [r7, #12]
 810e26c:	68b8      	ldr	r0, [r7, #8]
 810e26e:	f7ff fd98 	bl	810dda2 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810e272:	4603      	mov	r3, r0
 810e274:	4619      	mov	r1, r3
 810e276:	4620      	mov	r0, r4
 810e278:	f7ff ff17 	bl	810e0aa <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810e27c:	68fb      	ldr	r3, [r7, #12]
 810e27e:	4618      	mov	r0, r3
 810e280:	3710      	adds	r7, #16
 810e282:	46bd      	mov	sp, r7
 810e284:	bdb0      	pop	{r4, r5, r7, pc}
=======
0810bed8 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bed8:	b580      	push	{r7, lr}
 810beda:	b082      	sub	sp, #8
 810bedc:	af00      	add	r7, sp, #0
 810bede:	6078      	str	r0, [r7, #4]
 810bee0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810bee2:	6838      	ldr	r0, [r7, #0]
 810bee4:	f7ff febd 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810bee8:	4602      	mov	r2, r0
 810beea:	687b      	ldr	r3, [r7, #4]
 810beec:	601a      	str	r2, [r3, #0]
 810beee:	687b      	ldr	r3, [r7, #4]
 810bef0:	4618      	mov	r0, r3
 810bef2:	3708      	adds	r7, #8
 810bef4:	46bd      	mov	sp, r7
 810bef6:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e286 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
=======
0810bef8 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bef8:	b580      	push	{r7, lr}
 810befa:	b082      	sub	sp, #8
 810befc:	af00      	add	r7, sp, #0
 810befe:	6078      	str	r0, [r7, #4]
 810bf00:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810bf02:	6838      	ldr	r0, [r7, #0]
 810bf04:	f7ff fea2 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810bf08:	4602      	mov	r2, r0
 810bf0a:	687b      	ldr	r3, [r7, #4]
 810bf0c:	601a      	str	r2, [r3, #0]
 810bf0e:	687b      	ldr	r3, [r7, #4]
 810bf10:	4618      	mov	r0, r3
 810bf12:	3708      	adds	r7, #8
 810bf14:	46bd      	mov	sp, r7
 810bf16:	bd80      	pop	{r7, pc}

0810bf18 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810bf18:	b580      	push	{r7, lr}
 810bf1a:	b082      	sub	sp, #8
 810bf1c:	af00      	add	r7, sp, #0
 810bf1e:	6078      	str	r0, [r7, #4]
 810bf20:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810bf22:	6838      	ldr	r0, [r7, #0]
 810bf24:	f7ff fe87 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810bf28:	4602      	mov	r2, r0
 810bf2a:	687b      	ldr	r3, [r7, #4]
 810bf2c:	601a      	str	r2, [r3, #0]
 810bf2e:	687b      	ldr	r3, [r7, #4]
 810bf30:	4618      	mov	r0, r3
 810bf32:	3708      	adds	r7, #8
 810bf34:	46bd      	mov	sp, r7
 810bf36:	bd80      	pop	{r7, pc}

0810bf38 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810bf38:	b580      	push	{r7, lr}
 810bf3a:	b082      	sub	sp, #8
 810bf3c:	af00      	add	r7, sp, #0
 810bf3e:	6078      	str	r0, [r7, #4]
 810bf40:	687b      	ldr	r3, [r7, #4]
 810bf42:	4618      	mov	r0, r3
 810bf44:	f000 f805 	bl	810bf52 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 810bf48:	4603      	mov	r3, r0
 810bf4a:	4618      	mov	r0, r3
 810bf4c:	3708      	adds	r7, #8
 810bf4e:	46bd      	mov	sp, r7
 810bf50:	bd80      	pop	{r7, pc}

0810bf52 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
<<<<<<< HEAD
 810e286:	b480      	push	{r7}
 810e288:	b083      	sub	sp, #12
 810e28a:	af00      	add	r7, sp, #0
 810e28c:	6078      	str	r0, [r7, #4]
 810e28e:	687b      	ldr	r3, [r7, #4]
 810e290:	4618      	mov	r0, r3
 810e292:	370c      	adds	r7, #12
 810e294:	46bd      	mov	sp, r7
 810e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e29a:	4770      	bx	lr
=======
 810bf52:	b480      	push	{r7}
 810bf54:	b083      	sub	sp, #12
 810bf56:	af00      	add	r7, sp, #0
 810bf58:	6078      	str	r0, [r7, #4]
 810bf5a:	687b      	ldr	r3, [r7, #4]
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	4618      	mov	r0, r3
 810bf60:	370c      	adds	r7, #12
 810bf62:	46bd      	mov	sp, r7
 810bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf68:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e29c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810e29c:	b480      	push	{r7}
 810e29e:	b083      	sub	sp, #12
 810e2a0:	af00      	add	r7, sp, #0
 810e2a2:	6078      	str	r0, [r7, #4]
 810e2a4:	687b      	ldr	r3, [r7, #4]
 810e2a6:	4618      	mov	r0, r3
 810e2a8:	370c      	adds	r7, #12
 810e2aa:	46bd      	mov	sp, r7
 810e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2b0:	4770      	bx	lr
=======
0810bf6a <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bf6a:	b480      	push	{r7}
 810bf6c:	b083      	sub	sp, #12
 810bf6e:	af00      	add	r7, sp, #0
 810bf70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bf72:	687b      	ldr	r3, [r7, #4]
 810bf74:	4618      	mov	r0, r3
 810bf76:	370c      	adds	r7, #12
 810bf78:	46bd      	mov	sp, r7
 810bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf7e:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e2b2 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 810e2b2:	b480      	push	{r7}
 810e2b4:	b083      	sub	sp, #12
 810e2b6:	af00      	add	r7, sp, #0
 810e2b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e2ba:	687b      	ldr	r3, [r7, #4]
 810e2bc:	4618      	mov	r0, r3
 810e2be:	370c      	adds	r7, #12
 810e2c0:	46bd      	mov	sp, r7
 810e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2c6:	4770      	bx	lr

0810e2c8 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
=======
0810bf80 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
<<<<<<< HEAD
 810e2c8:	b580      	push	{r7, lr}
 810e2ca:	b082      	sub	sp, #8
 810e2cc:	af00      	add	r7, sp, #0
 810e2ce:	6078      	str	r0, [r7, #4]
 810e2d0:	6878      	ldr	r0, [r7, #4]
 810e2d2:	f000 f8d0 	bl	810e476 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 810e2d6:	4603      	mov	r3, r0
 810e2d8:	4618      	mov	r0, r3
 810e2da:	3708      	adds	r7, #8
 810e2dc:	46bd      	mov	sp, r7
 810e2de:	bd80      	pop	{r7, pc}

0810e2e0 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e2e0:	b480      	push	{r7}
 810e2e2:	b083      	sub	sp, #12
 810e2e4:	af00      	add	r7, sp, #0
 810e2e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e2e8:	687b      	ldr	r3, [r7, #4]
 810e2ea:	4618      	mov	r0, r3
 810e2ec:	370c      	adds	r7, #12
 810e2ee:	46bd      	mov	sp, r7
 810e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2f4:	4770      	bx	lr

0810e2f6 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810e2f6:	b580      	push	{r7, lr}
 810e2f8:	b082      	sub	sp, #8
 810e2fa:	af00      	add	r7, sp, #0
 810e2fc:	6078      	str	r0, [r7, #4]
 810e2fe:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810e300:	6838      	ldr	r0, [r7, #0]
 810e302:	f000 f8c3 	bl	810e48c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 810e306:	4603      	mov	r3, r0
 810e308:	4618      	mov	r0, r3
 810e30a:	f000 f8ca 	bl	810e4a2 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 810e30e:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810e310:	4619      	mov	r1, r3
 810e312:	6878      	ldr	r0, [r7, #4]
 810e314:	f000 f8e7 	bl	810e4e6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 810e318:	6838      	ldr	r0, [r7, #0]
 810e31a:	f000 f8cd 	bl	810e4b8 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810e31e:	4603      	mov	r3, r0
 810e320:	4618      	mov	r0, r3
 810e322:	f000 f8d5 	bl	810e4d0 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e326:	4603      	mov	r3, r0
 810e328:	4619      	mov	r1, r3
 810e32a:	6878      	ldr	r0, [r7, #4]
 810e32c:	f000 f8f1 	bl	810e512 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 810e330:	687b      	ldr	r3, [r7, #4]
 810e332:	4618      	mov	r0, r3
 810e334:	3708      	adds	r7, #8
 810e336:	46bd      	mov	sp, r7
 810e338:	bd80      	pop	{r7, pc}
=======
 810bf80:	b580      	push	{r7, lr}
 810bf82:	b082      	sub	sp, #8
 810bf84:	af00      	add	r7, sp, #0
 810bf86:	6078      	str	r0, [r7, #4]
 810bf88:	687b      	ldr	r3, [r7, #4]
 810bf8a:	3304      	adds	r3, #4
 810bf8c:	4618      	mov	r0, r3
 810bf8e:	f000 f805 	bl	810bf9c <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 810bf92:	4603      	mov	r3, r0
 810bf94:	4618      	mov	r0, r3
 810bf96:	3708      	adds	r7, #8
 810bf98:	46bd      	mov	sp, r7
 810bf9a:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e33a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e33a:	b580      	push	{r7, lr}
 810e33c:	b082      	sub	sp, #8
 810e33e:	af00      	add	r7, sp, #0
 810e340:	6078      	str	r0, [r7, #4]
 810e342:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810e344:	6838      	ldr	r0, [r7, #0]
 810e346:	f7ff ffcb 	bl	810e2e0 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e34a:	687b      	ldr	r3, [r7, #4]
 810e34c:	4618      	mov	r0, r3
 810e34e:	3708      	adds	r7, #8
 810e350:	46bd      	mov	sp, r7
 810e352:	bd80      	pop	{r7, pc}
=======
0810bf9c <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810bf9c:	b480      	push	{r7}
 810bf9e:	b083      	sub	sp, #12
 810bfa0:	af00      	add	r7, sp, #0
 810bfa2:	6078      	str	r0, [r7, #4]
 810bfa4:	687b      	ldr	r3, [r7, #4]
 810bfa6:	681b      	ldr	r3, [r3, #0]
 810bfa8:	4618      	mov	r0, r3
 810bfaa:	370c      	adds	r7, #12
 810bfac:	46bd      	mov	sp, r7
 810bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfb2:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e354 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 810e354:	b580      	push	{r7, lr}
 810e356:	b082      	sub	sp, #8
 810e358:	af00      	add	r7, sp, #0
 810e35a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 810e35c:	6878      	ldr	r0, [r7, #4]
 810e35e:	f7ff fb81 	bl	810da64 <_ZNKSt9_Any_data9_M_accessEv>
 810e362:	4603      	mov	r3, r0
 810e364:	4618      	mov	r0, r3
 810e366:	3708      	adds	r7, #8
 810e368:	46bd      	mov	sp, r7
 810e36a:	bd80      	pop	{r7, pc}
=======
0810bfb4 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bfb4:	b480      	push	{r7}
 810bfb6:	b083      	sub	sp, #12
 810bfb8:	af00      	add	r7, sp, #0
 810bfba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bfbc:	687b      	ldr	r3, [r7, #4]
 810bfbe:	4618      	mov	r0, r3
 810bfc0:	370c      	adds	r7, #12
 810bfc2:	46bd      	mov	sp, r7
 810bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfc8:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e36c <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:
=======
0810bfca <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:

>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
<<<<<<< HEAD
 810e36c:	b5b0      	push	{r4, r5, r7, lr}
 810e36e:	b084      	sub	sp, #16
 810e370:	af00      	add	r7, sp, #0
 810e372:	60f8      	str	r0, [r7, #12]
 810e374:	60b9      	str	r1, [r7, #8]
 810e376:	607a      	str	r2, [r7, #4]
 810e378:	603b      	str	r3, [r7, #0]
=======
 810bfca:	b5b0      	push	{r4, r5, r7, lr}
 810bfcc:	b084      	sub	sp, #16
 810bfce:	af00      	add	r7, sp, #0
 810bfd0:	60f8      	str	r0, [r7, #12]
 810bfd2:	60b9      	str	r1, [r7, #8]
 810bfd4:	607a      	str	r2, [r7, #4]
 810bfd6:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
<<<<<<< HEAD
 810e37a:	68b8      	ldr	r0, [r7, #8]
 810e37c:	f7ff fecf 	bl	810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e380:	4604      	mov	r4, r0
 810e382:	6878      	ldr	r0, [r7, #4]
 810e384:	f7ff fed6 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e388:	4605      	mov	r5, r0
 810e38a:	6838      	ldr	r0, [r7, #0]
 810e38c:	f7ff fedd 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e390:	4603      	mov	r3, r0
 810e392:	462a      	mov	r2, r5
 810e394:	4621      	mov	r1, r4
 810e396:	68f8      	ldr	r0, [r7, #12]
 810e398:	f000 f8c8 	bl	810e52c <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 810e39c:	68f8      	ldr	r0, [r7, #12]
 810e39e:	3710      	adds	r7, #16
 810e3a0:	46bd      	mov	sp, r7
 810e3a2:	bdb0      	pop	{r4, r5, r7, pc}
=======
 810bfd8:	68b8      	ldr	r0, [r7, #8]
 810bfda:	f7ff fe2c 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810bfde:	4604      	mov	r4, r0
 810bfe0:	6878      	ldr	r0, [r7, #4]
 810bfe2:	f7ff fe33 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810bfe6:	4605      	mov	r5, r0
 810bfe8:	6838      	ldr	r0, [r7, #0]
 810bfea:	f7ff fe3a 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810bfee:	4603      	mov	r3, r0
 810bff0:	462a      	mov	r2, r5
 810bff2:	4621      	mov	r1, r4
 810bff4:	68f8      	ldr	r0, [r7, #12]
 810bff6:	f7ff fefb 	bl	810bdf0 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 810bffa:	68f8      	ldr	r0, [r7, #12]
 810bffc:	3710      	adds	r7, #16
 810bffe:	46bd      	mov	sp, r7
 810c000:	bdb0      	pop	{r4, r5, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e3a4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 810e3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e3a8:	b08a      	sub	sp, #40	; 0x28
 810e3aa:	af02      	add	r7, sp, #8
 810e3ac:	60f8      	str	r0, [r7, #12]
 810e3ae:	60b9      	str	r1, [r7, #8]
 810e3b0:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 810e3b2:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810e3b4:	68fb      	ldr	r3, [r7, #12]
 810e3b6:	3308      	adds	r3, #8
 810e3b8:	4618      	mov	r0, r3
 810e3ba:	f000 f8d5 	bl	810e568 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810e3be:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810e3c0:	f107 0310 	add.w	r3, r7, #16
 810e3c4:	68ba      	ldr	r2, [r7, #8]
 810e3c6:	4618      	mov	r0, r3
 810e3c8:	f000 f8db 	bl	810e582 <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 810e3cc:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810e3ce:	68fb      	ldr	r3, [r7, #12]
 810e3d0:	3308      	adds	r3, #8
 810e3d2:	4618      	mov	r0, r3
 810e3d4:	f000 f8e3 	bl	810e59e <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810e3d8:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810e3da:	f107 0314 	add.w	r3, r7, #20
 810e3de:	68ba      	ldr	r2, [r7, #8]
 810e3e0:	4618      	mov	r0, r3
 810e3e2:	f000 f8e8 	bl	810e5b6 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 810e3e6:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810e3e8:	68fb      	ldr	r3, [r7, #12]
 810e3ea:	3308      	adds	r3, #8
 810e3ec:	4618      	mov	r0, r3
 810e3ee:	f000 f8f4 	bl	810e5da <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810e3f2:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810e3f4:	f107 0318 	add.w	r3, r7, #24
 810e3f8:	68ba      	ldr	r2, [r7, #8]
 810e3fa:	4618      	mov	r0, r3
 810e3fc:	f000 f8f9 	bl	810e5f2 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 810e400:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810e402:	68fb      	ldr	r3, [r7, #12]
 810e404:	3308      	adds	r3, #8
 810e406:	4618      	mov	r0, r3
 810e408:	f000 f905 	bl	810e616 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810e40c:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810e40e:	f107 031c 	add.w	r3, r7, #28
 810e412:	68ba      	ldr	r2, [r7, #8]
 810e414:	4618      	mov	r0, r3
 810e416:	f000 f90a 	bl	810e62e <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 810e41a:	4603      	mov	r3, r0
 810e41c:	9300      	str	r3, [sp, #0]
 810e41e:	4643      	mov	r3, r8
 810e420:	4632      	mov	r2, r6
 810e422:	4629      	mov	r1, r5
 810e424:	4620      	mov	r0, r4
 810e426:	f000 f914 	bl	810e652 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 810e42a:	bf00      	nop
=======
0810c002 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 810c002:	b5f0      	push	{r4, r5, r6, r7, lr}
 810c004:	b089      	sub	sp, #36	; 0x24
 810c006:	af00      	add	r7, sp, #0
 810c008:	60f8      	str	r0, [r7, #12]
 810c00a:	60b9      	str	r1, [r7, #8]
 810c00c:	607a      	str	r2, [r7, #4]
 810c00e:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 810c010:	68b8      	ldr	r0, [r7, #8]
 810c012:	f7ff fe10 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810c016:	4604      	mov	r4, r0
 810c018:	6878      	ldr	r0, [r7, #4]
 810c01a:	f7ff fe17 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c01e:	4605      	mov	r5, r0
 810c020:	6838      	ldr	r0, [r7, #0]
 810c022:	f7ff fe1e 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810c026:	4603      	mov	r3, r0
 810c028:	f107 0010 	add.w	r0, r7, #16
 810c02c:	462a      	mov	r2, r5
 810c02e:	4621      	mov	r1, r4
 810c030:	f7ff ffcb 	bl	810bfca <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 810c034:	f107 0310 	add.w	r3, r7, #16
 810c038:	4632      	mov	r2, r6
 810c03a:	4619      	mov	r1, r3
 810c03c:	68f8      	ldr	r0, [r7, #12]
 810c03e:	f000 f8a2 	bl	810c186 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 810c042:	3724      	adds	r7, #36	; 0x24
 810c044:	46bd      	mov	sp, r7
 810c046:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810c048 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 810c048:	b580      	push	{r7, lr}
 810c04a:	b082      	sub	sp, #8
 810c04c:	af00      	add	r7, sp, #0
 810c04e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810c050:	6878      	ldr	r0, [r7, #4]
 810c052:	f7ff fa46 	bl	810b4e2 <_ZNSt9_Any_data9_M_accessEv>
 810c056:	4603      	mov	r3, r0
 810c058:	4618      	mov	r0, r3
 810c05a:	3708      	adds	r7, #8
 810c05c:	46bd      	mov	sp, r7
 810c05e:	bd80      	pop	{r7, pc}

0810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 810c060:	b580      	push	{r7, lr}
 810c062:	b082      	sub	sp, #8
 810c064:	af00      	add	r7, sp, #0
 810c066:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810c068:	6878      	ldr	r0, [r7, #4]
 810c06a:	f7ff fa3a 	bl	810b4e2 <_ZNSt9_Any_data9_M_accessEv>
 810c06e:	4603      	mov	r3, r0
 810c070:	4618      	mov	r0, r3
 810c072:	3708      	adds	r7, #8
 810c074:	46bd      	mov	sp, r7
 810c076:	bd80      	pop	{r7, pc}

0810c078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 810c078:	b5b0      	push	{r4, r5, r7, lr}
 810c07a:	b084      	sub	sp, #16
 810c07c:	af00      	add	r7, sp, #0
 810c07e:	60f8      	str	r0, [r7, #12]
 810c080:	60b9      	str	r1, [r7, #8]
 810c082:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<_Functor*>());
 810c084:	68b8      	ldr	r0, [r7, #8]
 810c086:	f000 f84d 	bl	810c124 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810c08a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 810c08c:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<_Functor*>());
 810c08e:	200c      	movs	r0, #12
 810c090:	f7fe fdfe 	bl	810ac90 <_Znwj>
 810c094:	4603      	mov	r3, r0
 810c096:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 810c098:	4623      	mov	r3, r4
 810c09a:	462a      	mov	r2, r5
 810c09c:	ca07      	ldmia	r2, {r0, r1, r2}
 810c09e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810c0a2:	68f8      	ldr	r0, [r7, #12]
 810c0a4:	f7ff ffdc 	bl	810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810c0a8:	4603      	mov	r3, r0
 810c0aa:	601c      	str	r4, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810e42c:	3720      	adds	r7, #32
 810e42e:	46bd      	mov	sp, r7
 810e430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
=======
 810c0ac:	bf00      	nop
 810c0ae:	3710      	adds	r7, #16
 810c0b0:	46bd      	mov	sp, r7
 810c0b2:	bdb0      	pop	{r4, r5, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e434 <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
=======
0810c0b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 810c0b4:	b580      	push	{r7, lr}
 810c0b6:	b082      	sub	sp, #8
 810c0b8:	af00      	add	r7, sp, #0
 810c0ba:	6078      	str	r0, [r7, #4]
 810c0bc:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 810c0be:	6878      	ldr	r0, [r7, #4]
 810c0c0:	f7ff ffce 	bl	810c060 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810c0c4:	4603      	mov	r3, r0
 810c0c6:	681b      	ldr	r3, [r3, #0]
 810c0c8:	210c      	movs	r1, #12
 810c0ca:	4618      	mov	r0, r3
 810c0cc:	f001 fecf 	bl	810de6e <_ZdlPvj>
	}
 810c0d0:	bf00      	nop
 810c0d2:	3708      	adds	r7, #8
 810c0d4:	46bd      	mov	sp, r7
 810c0d6:	bd80      	pop	{r7, pc}

0810c0d8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810c0d8:	b5b0      	push	{r4, r5, r7, lr}
 810c0da:	b084      	sub	sp, #16
 810c0dc:	af00      	add	r7, sp, #0
 810c0de:	60f8      	str	r0, [r7, #12]
 810c0e0:	60b9      	str	r1, [r7, #8]
 810c0e2:	607a      	str	r2, [r7, #4]
 810c0e4:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810c0e6:	6878      	ldr	r0, [r7, #4]
 810c0e8:	f7ff fb2e 	bl	810b748 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c0ec:	4604      	mov	r4, r0
 810c0ee:	6838      	ldr	r0, [r7, #0]
 810c0f0:	f7ff fb35 	bl	810b75e <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c0f4:	4605      	mov	r5, r0
 810c0f6:	6a38      	ldr	r0, [r7, #32]
 810c0f8:	f7ff fb3c 	bl	810b774 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c0fc:	4603      	mov	r3, r0
 810c0fe:	462a      	mov	r2, r5
 810c100:	4621      	mov	r1, r4
 810c102:	68f8      	ldr	r0, [r7, #12]
 810c104:	f000 f887 	bl	810c216 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 810c108:	68fc      	ldr	r4, [r7, #12]
 810c10a:	68b8      	ldr	r0, [r7, #8]
 810c10c:	f7ff fb11 	bl	810b732 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810c110:	4603      	mov	r3, r0
 810c112:	4619      	mov	r1, r3
 810c114:	4620      	mov	r0, r4
 810c116:	f7ff fe2f 	bl	810bd78 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810c11a:	68fb      	ldr	r3, [r7, #12]
 810c11c:	4618      	mov	r0, r3
 810c11e:	3710      	adds	r7, #16
 810c120:	46bd      	mov	sp, r7
 810c122:	bdb0      	pop	{r4, r5, r7, pc}

0810c124 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      _M_access() const
<<<<<<< HEAD
 810e434:	b580      	push	{r7, lr}
 810e436:	b082      	sub	sp, #8
 810e438:	af00      	add	r7, sp, #0
 810e43a:	6078      	str	r0, [r7, #4]
=======
 810c124:	b580      	push	{r7, lr}
 810c126:	b082      	sub	sp, #8
 810c128:	af00      	add	r7, sp, #0
 810c12a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      { return *static_cast<const _Tp*>(_M_access()); }
<<<<<<< HEAD
 810e43c:	6878      	ldr	r0, [r7, #4]
 810e43e:	f7ff fb11 	bl	810da64 <_ZNKSt9_Any_data9_M_accessEv>
 810e442:	4603      	mov	r3, r0
 810e444:	4618      	mov	r0, r3
 810e446:	3708      	adds	r7, #8
 810e448:	46bd      	mov	sp, r7
 810e44a:	bd80      	pop	{r7, pc}
=======
 810c12c:	6878      	ldr	r0, [r7, #4]
 810c12e:	f7ff f9e3 	bl	810b4f8 <_ZNKSt9_Any_data9_M_accessEv>
 810c132:	4603      	mov	r3, r0
 810c134:	4618      	mov	r0, r3
 810c136:	3708      	adds	r7, #8
 810c138:	46bd      	mov	sp, r7
 810c13a:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e44c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810e44c:	b580      	push	{r7, lr}
 810e44e:	b084      	sub	sp, #16
 810e450:	af00      	add	r7, sp, #0
 810e452:	60f8      	str	r0, [r7, #12]
 810e454:	60b9      	str	r1, [r7, #8]
 810e456:	607a      	str	r2, [r7, #4]
 810e458:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 810e45a:	683a      	ldr	r2, [r7, #0]
 810e45c:	6879      	ldr	r1, [r7, #4]
 810e45e:	68f8      	ldr	r0, [r7, #12]
 810e460:	f000 f920 	bl	810e6a4 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 810e464:	68b9      	ldr	r1, [r7, #8]
 810e466:	68f8      	ldr	r0, [r7, #12]
 810e468:	f000 f92f 	bl	810e6ca <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 810e46c:	68fb      	ldr	r3, [r7, #12]
 810e46e:	4618      	mov	r0, r3
 810e470:	3710      	adds	r7, #16
 810e472:	46bd      	mov	sp, r7
 810e474:	bd80      	pop	{r7, pc}

0810e476 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810e476:	b480      	push	{r7}
 810e478:	b083      	sub	sp, #12
 810e47a:	af00      	add	r7, sp, #0
 810e47c:	6078      	str	r0, [r7, #4]
 810e47e:	687b      	ldr	r3, [r7, #4]
 810e480:	4618      	mov	r0, r3
 810e482:	370c      	adds	r7, #12
 810e484:	46bd      	mov	sp, r7
 810e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e48a:	4770      	bx	lr

0810e48c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810e48c:	b480      	push	{r7}
 810e48e:	b083      	sub	sp, #12
 810e490:	af00      	add	r7, sp, #0
 810e492:	6078      	str	r0, [r7, #4]
 810e494:	687b      	ldr	r3, [r7, #4]
 810e496:	4618      	mov	r0, r3
 810e498:	370c      	adds	r7, #12
 810e49a:	46bd      	mov	sp, r7
 810e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4a0:	4770      	bx	lr

0810e4a2 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810e4a2:	b480      	push	{r7}
 810e4a4:	b083      	sub	sp, #12
 810e4a6:	af00      	add	r7, sp, #0
 810e4a8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e4aa:	687b      	ldr	r3, [r7, #4]
 810e4ac:	4618      	mov	r0, r3
 810e4ae:	370c      	adds	r7, #12
 810e4b0:	46bd      	mov	sp, r7
 810e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4b6:	4770      	bx	lr

0810e4b8 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
=======
0810c13c <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
<<<<<<< HEAD
 810e4b8:	b580      	push	{r7, lr}
 810e4ba:	b082      	sub	sp, #8
 810e4bc:	af00      	add	r7, sp, #0
 810e4be:	6078      	str	r0, [r7, #4]
 810e4c0:	6878      	ldr	r0, [r7, #4]
 810e4c2:	f000 f90e 	bl	810e6e2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 810e4c6:	4603      	mov	r3, r0
 810e4c8:	4618      	mov	r0, r3
 810e4ca:	3708      	adds	r7, #8
 810e4cc:	46bd      	mov	sp, r7
 810e4ce:	bd80      	pop	{r7, pc}
=======
 810c13c:	b580      	push	{r7, lr}
 810c13e:	b082      	sub	sp, #8
 810c140:	af00      	add	r7, sp, #0
 810c142:	6078      	str	r0, [r7, #4]
 810c144:	687b      	ldr	r3, [r7, #4]
 810c146:	3308      	adds	r3, #8
 810c148:	4618      	mov	r0, r3
 810c14a:	f000 f805 	bl	810c158 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 810c14e:	4603      	mov	r3, r0
 810c150:	4618      	mov	r0, r3
 810c152:	3708      	adds	r7, #8
 810c154:	46bd      	mov	sp, r7
 810c156:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e4d0 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
=======
0810c158 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810c158:	b480      	push	{r7}
 810c15a:	b083      	sub	sp, #12
 810c15c:	af00      	add	r7, sp, #0
 810c15e:	6078      	str	r0, [r7, #4]
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	681b      	ldr	r3, [r3, #0]
 810c164:	4618      	mov	r0, r3
 810c166:	370c      	adds	r7, #12
 810c168:	46bd      	mov	sp, r7
 810c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c16e:	4770      	bx	lr

0810c170 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
<<<<<<< HEAD
 810e4d0:	b480      	push	{r7}
 810e4d2:	b083      	sub	sp, #12
 810e4d4:	af00      	add	r7, sp, #0
 810e4d6:	6078      	str	r0, [r7, #4]
=======
 810c170:	b480      	push	{r7}
 810c172:	b083      	sub	sp, #12
 810c174:	af00      	add	r7, sp, #0
 810c176:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return static_cast<_Tp&&>(__t); }
<<<<<<< HEAD
 810e4d8:	687b      	ldr	r3, [r7, #4]
 810e4da:	4618      	mov	r0, r3
 810e4dc:	370c      	adds	r7, #12
 810e4de:	46bd      	mov	sp, r7
 810e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4e4:	4770      	bx	lr
=======
 810c178:	687b      	ldr	r3, [r7, #4]
 810c17a:	4618      	mov	r0, r3
 810c17c:	370c      	adds	r7, #12
 810c17e:	46bd      	mov	sp, r7
 810c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c184:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e4e6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810e4e6:	b580      	push	{r7, lr}
 810e4e8:	b082      	sub	sp, #8
 810e4ea:	af00      	add	r7, sp, #0
 810e4ec:	6078      	str	r0, [r7, #4]
 810e4ee:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 810e4f0:	6838      	ldr	r0, [r7, #0]
 810e4f2:	f000 f901 	bl	810e6f8 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810e4f6:	4603      	mov	r3, r0
 810e4f8:	4618      	mov	r0, r3
 810e4fa:	f000 f909 	bl	810e710 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e4fe:	4603      	mov	r3, r0
 810e500:	4619      	mov	r1, r3
 810e502:	6878      	ldr	r0, [r7, #4]
 810e504:	f000 f90f 	bl	810e726 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 810e508:	687b      	ldr	r3, [r7, #4]
 810e50a:	4618      	mov	r0, r3
 810e50c:	3708      	adds	r7, #8
 810e50e:	46bd      	mov	sp, r7
 810e510:	bd80      	pop	{r7, pc}

0810e512 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e512:	b580      	push	{r7, lr}
 810e514:	b082      	sub	sp, #8
 810e516:	af00      	add	r7, sp, #0
 810e518:	6078      	str	r0, [r7, #4]
 810e51a:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810e51c:	6838      	ldr	r0, [r7, #0]
 810e51e:	f7ff ffd7 	bl	810e4d0 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e522:	687b      	ldr	r3, [r7, #4]
 810e524:	4618      	mov	r0, r3
 810e526:	3708      	adds	r7, #8
 810e528:	46bd      	mov	sp, r7
 810e52a:	bd80      	pop	{r7, pc}
=======
0810c186 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 810c186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c18a:	b08a      	sub	sp, #40	; 0x28
 810c18c:	af02      	add	r7, sp, #8
 810c18e:	60f8      	str	r0, [r7, #12]
 810c190:	60b9      	str	r1, [r7, #8]
 810c192:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 810c194:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810c196:	68fb      	ldr	r3, [r7, #12]
 810c198:	3308      	adds	r3, #8
 810c19a:	4618      	mov	r0, r3
 810c19c:	f000 f850 	bl	810c240 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810c1a0:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810c1a2:	f107 0310 	add.w	r3, r7, #16
 810c1a6:	68ba      	ldr	r2, [r7, #8]
 810c1a8:	4618      	mov	r0, r3
 810c1aa:	f000 f856 	bl	810c25a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 810c1ae:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810c1b0:	68fb      	ldr	r3, [r7, #12]
 810c1b2:	3308      	adds	r3, #8
 810c1b4:	4618      	mov	r0, r3
 810c1b6:	f000 f85e 	bl	810c276 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810c1ba:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810c1bc:	f107 0314 	add.w	r3, r7, #20
 810c1c0:	68ba      	ldr	r2, [r7, #8]
 810c1c2:	4618      	mov	r0, r3
 810c1c4:	f000 f86e 	bl	810c2a4 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 810c1c8:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810c1ca:	68fb      	ldr	r3, [r7, #12]
 810c1cc:	3308      	adds	r3, #8
 810c1ce:	4618      	mov	r0, r3
 810c1d0:	f000 f87a 	bl	810c2c8 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810c1d4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810c1d6:	f107 0318 	add.w	r3, r7, #24
 810c1da:	68ba      	ldr	r2, [r7, #8]
 810c1dc:	4618      	mov	r0, r3
 810c1de:	f000 f87f 	bl	810c2e0 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 810c1e2:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810c1e4:	68fb      	ldr	r3, [r7, #12]
 810c1e6:	3308      	adds	r3, #8
 810c1e8:	4618      	mov	r0, r3
 810c1ea:	f000 f88b 	bl	810c304 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810c1ee:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810c1f0:	f107 031c 	add.w	r3, r7, #28
 810c1f4:	68ba      	ldr	r2, [r7, #8]
 810c1f6:	4618      	mov	r0, r3
 810c1f8:	f000 f890 	bl	810c31c <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 810c1fc:	4603      	mov	r3, r0
 810c1fe:	9300      	str	r3, [sp, #0]
 810c200:	4643      	mov	r3, r8
 810c202:	4632      	mov	r2, r6
 810c204:	4629      	mov	r1, r5
 810c206:	4620      	mov	r0, r4
 810c208:	f000 f8b0 	bl	810c36c <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 810c20c:	bf00      	nop
	}
 810c20e:	3720      	adds	r7, #32
 810c210:	46bd      	mov	sp, r7
 810c212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e52c <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810e52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e52e:	b085      	sub	sp, #20
 810e530:	af00      	add	r7, sp, #0
 810e532:	60f8      	str	r0, [r7, #12]
 810e534:	60b9      	str	r1, [r7, #8]
 810e536:	607a      	str	r2, [r7, #4]
 810e538:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810e53a:	68fc      	ldr	r4, [r7, #12]
 810e53c:	68b8      	ldr	r0, [r7, #8]
 810e53e:	f7ff fdee 	bl	810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e542:	4605      	mov	r5, r0
 810e544:	6878      	ldr	r0, [r7, #4]
 810e546:	f7ff fdf5 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e54a:	4606      	mov	r6, r0
 810e54c:	6838      	ldr	r0, [r7, #0]
 810e54e:	f7ff fdfc 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e552:	4603      	mov	r3, r0
 810e554:	4632      	mov	r2, r6
 810e556:	4629      	mov	r1, r5
 810e558:	4620      	mov	r0, r4
 810e55a:	f000 f8f1 	bl	810e740 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 810e55e:	68fb      	ldr	r3, [r7, #12]
 810e560:	4618      	mov	r0, r3
 810e562:	3714      	adds	r7, #20
 810e564:	46bd      	mov	sp, r7
 810e566:	bdf0      	pop	{r4, r5, r6, r7, pc}
=======
0810c216 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810c216:	b580      	push	{r7, lr}
 810c218:	b084      	sub	sp, #16
 810c21a:	af00      	add	r7, sp, #0
 810c21c:	60f8      	str	r0, [r7, #12]
 810c21e:	60b9      	str	r1, [r7, #8]
 810c220:	607a      	str	r2, [r7, #4]
 810c222:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 810c224:	683a      	ldr	r2, [r7, #0]
 810c226:	6879      	ldr	r1, [r7, #4]
 810c228:	68f8      	ldr	r0, [r7, #12]
 810c22a:	f000 f8c8 	bl	810c3be <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 810c22e:	68b9      	ldr	r1, [r7, #8]
 810c230:	68f8      	ldr	r0, [r7, #12]
 810c232:	f000 f8d7 	bl	810c3e4 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 810c236:	68fb      	ldr	r3, [r7, #12]
 810c238:	4618      	mov	r0, r3
 810c23a:	3710      	adds	r7, #16
 810c23c:	46bd      	mov	sp, r7
 810c23e:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e568 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
=======
0810c240 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    get(tuple<_Elements...>& __t) noexcept
<<<<<<< HEAD
 810e568:	b580      	push	{r7, lr}
 810e56a:	b082      	sub	sp, #8
 810e56c:	af00      	add	r7, sp, #0
 810e56e:	6078      	str	r0, [r7, #4]
=======
 810c240:	b580      	push	{r7, lr}
 810c242:	b082      	sub	sp, #8
 810c244:	af00      	add	r7, sp, #0
 810c246:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return std::__get_helper<__i>(__t); }
<<<<<<< HEAD
 810e570:	687b      	ldr	r3, [r7, #4]
 810e572:	4618      	mov	r0, r3
 810e574:	f000 f932 	bl	810e7dc <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 810e578:	4603      	mov	r3, r0
 810e57a:	4618      	mov	r0, r3
 810e57c:	3708      	adds	r7, #8
 810e57e:	46bd      	mov	sp, r7
 810e580:	bd80      	pop	{r7, pc}
=======
 810c248:	687b      	ldr	r3, [r7, #4]
 810c24a:	4618      	mov	r0, r3
 810c24c:	f000 f8d6 	bl	810c3fc <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 810c250:	4603      	mov	r3, r0
 810c252:	4618      	mov	r0, r3
 810c254:	3708      	adds	r7, #8
 810c256:	46bd      	mov	sp, r7
 810c258:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e582 <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
=======
0810c25a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	operator()(_CVArg&& __arg, _Tuple&) const volatile
<<<<<<< HEAD
 810e582:	b580      	push	{r7, lr}
 810e584:	b084      	sub	sp, #16
 810e586:	af00      	add	r7, sp, #0
 810e588:	60f8      	str	r0, [r7, #12]
 810e58a:	60b9      	str	r1, [r7, #8]
 810e58c:	607a      	str	r2, [r7, #4]
=======
 810c25a:	b580      	push	{r7, lr}
 810c25c:	b084      	sub	sp, #16
 810c25e:	af00      	add	r7, sp, #0
 810c260:	60f8      	str	r0, [r7, #12]
 810c262:	60b9      	str	r1, [r7, #8]
 810c264:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	{ return std::forward<_CVArg>(__arg); }
<<<<<<< HEAD
 810e58e:	68b8      	ldr	r0, [r7, #8]
 810e590:	f000 f930 	bl	810e7f4 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810e594:	4603      	mov	r3, r0
 810e596:	4618      	mov	r0, r3
 810e598:	3710      	adds	r7, #16
 810e59a:	46bd      	mov	sp, r7
 810e59c:	bd80      	pop	{r7, pc}

0810e59e <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810e59e:	b580      	push	{r7, lr}
 810e5a0:	b082      	sub	sp, #8
 810e5a2:	af00      	add	r7, sp, #0
 810e5a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e5a6:	6878      	ldr	r0, [r7, #4]
 810e5a8:	f000 f92f 	bl	810e80a <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810e5ac:	4603      	mov	r3, r0
 810e5ae:	4618      	mov	r0, r3
 810e5b0:	3708      	adds	r7, #8
 810e5b2:	46bd      	mov	sp, r7
 810e5b4:	bd80      	pop	{r7, pc}

0810e5b6 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810e5b6:	b580      	push	{r7, lr}
 810e5b8:	b084      	sub	sp, #16
 810e5ba:	af00      	add	r7, sp, #0
 810e5bc:	60f8      	str	r0, [r7, #12]
 810e5be:	60b9      	str	r1, [r7, #8]
 810e5c0:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810e5c2:	6878      	ldr	r0, [r7, #4]
 810e5c4:	f000 f92d 	bl	810e822 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810e5c8:	4603      	mov	r3, r0
 810e5ca:	4618      	mov	r0, r3
 810e5cc:	f000 f934 	bl	810e838 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810e5d0:	4603      	mov	r3, r0
	}
 810e5d2:	4618      	mov	r0, r3
 810e5d4:	3710      	adds	r7, #16
 810e5d6:	46bd      	mov	sp, r7
 810e5d8:	bd80      	pop	{r7, pc}

0810e5da <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810e5da:	b580      	push	{r7, lr}
 810e5dc:	b082      	sub	sp, #8
 810e5de:	af00      	add	r7, sp, #0
 810e5e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e5e2:	6878      	ldr	r0, [r7, #4]
 810e5e4:	f000 f938 	bl	810e858 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810e5e8:	4603      	mov	r3, r0
 810e5ea:	4618      	mov	r0, r3
 810e5ec:	3708      	adds	r7, #8
 810e5ee:	46bd      	mov	sp, r7
 810e5f0:	bd80      	pop	{r7, pc}
=======
 810c266:	68b8      	ldr	r0, [r7, #8]
 810c268:	f000 f875 	bl	810c356 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810c26c:	4603      	mov	r3, r0
 810c26e:	4618      	mov	r0, r3
 810c270:	3710      	adds	r7, #16
 810c272:	46bd      	mov	sp, r7
 810c274:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e5f2 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810e5f2:	b580      	push	{r7, lr}
 810e5f4:	b084      	sub	sp, #16
 810e5f6:	af00      	add	r7, sp, #0
 810e5f8:	60f8      	str	r0, [r7, #12]
 810e5fa:	60b9      	str	r1, [r7, #8]
 810e5fc:	607a      	str	r2, [r7, #4]
=======
0810c276 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810c276:	b580      	push	{r7, lr}
 810c278:	b082      	sub	sp, #8
 810c27a:	af00      	add	r7, sp, #0
 810c27c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c27e:	6878      	ldr	r0, [r7, #4]
 810c280:	f000 f8c8 	bl	810c414 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810c284:	4603      	mov	r3, r0
 810c286:	4618      	mov	r0, r3
 810c288:	3708      	adds	r7, #8
 810c28a:	46bd      	mov	sp, r7
 810c28c:	bd80      	pop	{r7, pc}

0810c28e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810c28e:	b480      	push	{r7}
 810c290:	b083      	sub	sp, #12
 810c292:	af00      	add	r7, sp, #0
 810c294:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810c296:	687b      	ldr	r3, [r7, #4]
 810c298:	4618      	mov	r0, r3
 810c29a:	370c      	adds	r7, #12
 810c29c:	46bd      	mov	sp, r7
 810c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2a2:	4770      	bx	lr

0810c2a4 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810c2a4:	b580      	push	{r7, lr}
 810c2a6:	b084      	sub	sp, #16
 810c2a8:	af00      	add	r7, sp, #0
 810c2aa:	60f8      	str	r0, [r7, #12]
 810c2ac:	60b9      	str	r1, [r7, #8]
 810c2ae:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
<<<<<<< HEAD
 810e5fe:	6878      	ldr	r0, [r7, #4]
 810e600:	f000 f90f 	bl	810e822 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810e604:	4603      	mov	r3, r0
 810e606:	4618      	mov	r0, r3
 810e608:	f000 f932 	bl	810e870 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810e60c:	4603      	mov	r3, r0
=======
 810c2b0:	6878      	ldr	r0, [r7, #4]
 810c2b2:	f7ff ffec 	bl	810c28e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810c2b6:	4603      	mov	r3, r0
 810c2b8:	4618      	mov	r0, r3
 810c2ba:	f000 f8d0 	bl	810c45e <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810c2be:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810e60e:	4618      	mov	r0, r3
 810e610:	3710      	adds	r7, #16
 810e612:	46bd      	mov	sp, r7
 810e614:	bd80      	pop	{r7, pc}
=======
 810c2c0:	4618      	mov	r0, r3
 810c2c2:	3710      	adds	r7, #16
 810c2c4:	46bd      	mov	sp, r7
 810c2c6:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e616 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
=======
0810c2c8 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    get(tuple<_Elements...>& __t) noexcept
<<<<<<< HEAD
 810e616:	b580      	push	{r7, lr}
 810e618:	b082      	sub	sp, #8
 810e61a:	af00      	add	r7, sp, #0
 810e61c:	6078      	str	r0, [r7, #4]
=======
 810c2c8:	b580      	push	{r7, lr}
 810c2ca:	b082      	sub	sp, #8
 810c2cc:	af00      	add	r7, sp, #0
 810c2ce:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return std::__get_helper<__i>(__t); }
<<<<<<< HEAD
 810e61e:	6878      	ldr	r0, [r7, #4]
 810e620:	f000 f936 	bl	810e890 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 810e624:	4603      	mov	r3, r0
 810e626:	4618      	mov	r0, r3
 810e628:	3708      	adds	r7, #8
 810e62a:	46bd      	mov	sp, r7
 810e62c:	bd80      	pop	{r7, pc}
=======
 810c2d0:	6878      	ldr	r0, [r7, #4]
 810c2d2:	f000 f8d4 	bl	810c47e <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810c2d6:	4603      	mov	r3, r0
 810c2d8:	4618      	mov	r0, r3
 810c2da:	3708      	adds	r7, #8
 810c2dc:	46bd      	mov	sp, r7
 810c2de:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e62e <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
=======
0810c2e0 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
<<<<<<< HEAD
 810e62e:	b580      	push	{r7, lr}
 810e630:	b084      	sub	sp, #16
 810e632:	af00      	add	r7, sp, #0
 810e634:	60f8      	str	r0, [r7, #12]
 810e636:	60b9      	str	r1, [r7, #8]
 810e638:	607a      	str	r2, [r7, #4]
=======
 810c2e0:	b580      	push	{r7, lr}
 810c2e2:	b084      	sub	sp, #16
 810c2e4:	af00      	add	r7, sp, #0
 810c2e6:	60f8      	str	r0, [r7, #12]
 810c2e8:	60b9      	str	r1, [r7, #8]
 810c2ea:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
<<<<<<< HEAD
 810e63a:	6878      	ldr	r0, [r7, #4]
 810e63c:	f000 f8f1 	bl	810e822 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810e640:	4603      	mov	r3, r0
 810e642:	4618      	mov	r0, r3
 810e644:	f000 f930 	bl	810e8a8 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810e648:	4603      	mov	r3, r0
=======
 810c2ec:	6878      	ldr	r0, [r7, #4]
 810c2ee:	f7ff ffce 	bl	810c28e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810c2f2:	4603      	mov	r3, r0
 810c2f4:	4618      	mov	r0, r3
 810c2f6:	f000 f8e7 	bl	810c4c8 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810c2fa:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810e64a:	4618      	mov	r0, r3
 810e64c:	3710      	adds	r7, #16
 810e64e:	46bd      	mov	sp, r7
 810e650:	bd80      	pop	{r7, pc}
=======
 810c2fc:	4618      	mov	r0, r3
 810c2fe:	3710      	adds	r7, #16
 810c300:	46bd      	mov	sp, r7
 810c302:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e652 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
=======
0810c304 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810c304:	b580      	push	{r7, lr}
 810c306:	b082      	sub	sp, #8
 810c308:	af00      	add	r7, sp, #0
 810c30a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c30c:	6878      	ldr	r0, [r7, #4]
 810c30e:	f000 f8eb 	bl	810c4e8 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 810c312:	4603      	mov	r3, r0
 810c314:	4618      	mov	r0, r3
 810c316:	3708      	adds	r7, #8
 810c318:	46bd      	mov	sp, r7
 810c31a:	bd80      	pop	{r7, pc}

0810c31c <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810c31c:	b580      	push	{r7, lr}
 810c31e:	b084      	sub	sp, #16
 810c320:	af00      	add	r7, sp, #0
 810c322:	60f8      	str	r0, [r7, #12]
 810c324:	60b9      	str	r1, [r7, #8]
 810c326:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810c328:	6878      	ldr	r0, [r7, #4]
 810c32a:	f7ff ffb0 	bl	810c28e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810c32e:	4603      	mov	r3, r0
 810c330:	4618      	mov	r0, r3
 810c332:	f000 f8fe 	bl	810c532 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810c336:	4603      	mov	r3, r0
	}
 810c338:	4618      	mov	r0, r3
 810c33a:	3710      	adds	r7, #16
 810c33c:	46bd      	mov	sp, r7
 810c33e:	bd80      	pop	{r7, pc}

0810c340 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c340:	b480      	push	{r7}
 810c342:	b083      	sub	sp, #12
 810c344:	af00      	add	r7, sp, #0
 810c346:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c348:	687b      	ldr	r3, [r7, #4]
 810c34a:	4618      	mov	r0, r3
 810c34c:	370c      	adds	r7, #12
 810c34e:	46bd      	mov	sp, r7
 810c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c354:	4770      	bx	lr

0810c356 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c356:	b480      	push	{r7}
 810c358:	b083      	sub	sp, #12
 810c35a:	af00      	add	r7, sp, #0
 810c35c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c35e:	687b      	ldr	r3, [r7, #4]
 810c360:	4618      	mov	r0, r3
 810c362:	370c      	adds	r7, #12
 810c364:	46bd      	mov	sp, r7
 810c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c36a:	4770      	bx	lr

0810c36c <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
<<<<<<< HEAD
 810e652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810e656:	b089      	sub	sp, #36	; 0x24
 810e658:	af02      	add	r7, sp, #8
 810e65a:	60f8      	str	r0, [r7, #12]
 810e65c:	60b9      	str	r1, [r7, #8]
 810e65e:	607a      	str	r2, [r7, #4]
 810e660:	603b      	str	r3, [r7, #0]
=======
 810c36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c370:	b089      	sub	sp, #36	; 0x24
 810c372:	af02      	add	r7, sp, #8
 810c374:	60f8      	str	r0, [r7, #12]
 810c376:	60b9      	str	r1, [r7, #8]
 810c378:	607a      	str	r2, [r7, #4]
 810c37a:	603b      	str	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
<<<<<<< HEAD
 810e662:	68f8      	ldr	r0, [r7, #12]
 810e664:	f000 f930 	bl	810e8c8 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 810e668:	4605      	mov	r5, r0
 810e66a:	68b8      	ldr	r0, [r7, #8]
 810e66c:	f000 f8c2 	bl	810e7f4 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810e670:	4606      	mov	r6, r0
 810e672:	6878      	ldr	r0, [r7, #4]
 810e674:	f7ff fd53 	bl	810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e678:	4680      	mov	r8, r0
 810e67a:	6838      	ldr	r0, [r7, #0]
 810e67c:	f7ff fd5a 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e680:	4604      	mov	r4, r0
 810e682:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810e684:	f7ff fd61 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e688:	4603      	mov	r3, r0
 810e68a:	9301      	str	r3, [sp, #4]
 810e68c:	9400      	str	r4, [sp, #0]
 810e68e:	4643      	mov	r3, r8
 810e690:	4632      	mov	r2, r6
 810e692:	4629      	mov	r1, r5
 810e694:	4648      	mov	r0, r9
 810e696:	f000 f922 	bl	810e8de <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
=======
 810c37c:	68f8      	ldr	r0, [r7, #12]
 810c37e:	f7ff ffdf 	bl	810c340 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 810c382:	4605      	mov	r5, r0
 810c384:	68b8      	ldr	r0, [r7, #8]
 810c386:	f7ff ffe6 	bl	810c356 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810c38a:	4606      	mov	r6, r0
 810c38c:	6878      	ldr	r0, [r7, #4]
 810c38e:	f7ff fc52 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810c392:	4680      	mov	r8, r0
 810c394:	6838      	ldr	r0, [r7, #0]
 810c396:	f7ff fc59 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c39a:	4604      	mov	r4, r0
 810c39c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810c39e:	f7ff fc60 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810c3a2:	4603      	mov	r3, r0
 810c3a4:	9301      	str	r3, [sp, #4]
 810c3a6:	9400      	str	r4, [sp, #0]
 810c3a8:	4643      	mov	r3, r8
 810c3aa:	4632      	mov	r2, r6
 810c3ac:	4629      	mov	r1, r5
 810c3ae:	4648      	mov	r0, r9
 810c3b0:	f000 f8cf 	bl	810c552 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
					std::forward<_Args>(__args)...);
<<<<<<< HEAD
 810e69a:	bf00      	nop
=======
 810c3b4:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810e69c:	371c      	adds	r7, #28
 810e69e:	46bd      	mov	sp, r7
 810e6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
=======
 810c3b6:	371c      	adds	r7, #28
 810c3b8:	46bd      	mov	sp, r7
 810c3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e6a4 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
=======
0810c3be <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
<<<<<<< HEAD
 810e6a4:	b580      	push	{r7, lr}
 810e6a6:	b084      	sub	sp, #16
 810e6a8:	af00      	add	r7, sp, #0
 810e6aa:	60f8      	str	r0, [r7, #12]
 810e6ac:	60b9      	str	r1, [r7, #8]
 810e6ae:	607a      	str	r2, [r7, #4]
=======
 810c3be:	b580      	push	{r7, lr}
 810c3c0:	b084      	sub	sp, #16
 810c3c2:	af00      	add	r7, sp, #0
 810c3c4:	60f8      	str	r0, [r7, #12]
 810c3c6:	60b9      	str	r1, [r7, #8]
 810c3c8:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      : _Inherited(__tail...), _Base(__head) { }
<<<<<<< HEAD
 810e6b0:	6879      	ldr	r1, [r7, #4]
 810e6b2:	68f8      	ldr	r0, [r7, #12]
 810e6b4:	f000 f94d 	bl	810e952 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 810e6b8:	68b9      	ldr	r1, [r7, #8]
 810e6ba:	68f8      	ldr	r0, [r7, #12]
 810e6bc:	f000 f957 	bl	810e96e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 810e6c0:	68fb      	ldr	r3, [r7, #12]
 810e6c2:	4618      	mov	r0, r3
 810e6c4:	3710      	adds	r7, #16
 810e6c6:	46bd      	mov	sp, r7
 810e6c8:	bd80      	pop	{r7, pc}
=======
 810c3ca:	6879      	ldr	r1, [r7, #4]
 810c3cc:	68f8      	ldr	r0, [r7, #12]
 810c3ce:	f000 f8fa 	bl	810c5c6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 810c3d2:	68b9      	ldr	r1, [r7, #8]
 810c3d4:	68f8      	ldr	r0, [r7, #12]
 810c3d6:	f000 f904 	bl	810c5e2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 810c3da:	68fb      	ldr	r3, [r7, #12]
 810c3dc:	4618      	mov	r0, r3
 810c3de:	3710      	adds	r7, #16
 810c3e0:	46bd      	mov	sp, r7
 810c3e2:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e6ca <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
=======
0810c3e4 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      constexpr _Head_base(const _Head& __h)
<<<<<<< HEAD
 810e6ca:	b480      	push	{r7}
 810e6cc:	b083      	sub	sp, #12
 810e6ce:	af00      	add	r7, sp, #0
 810e6d0:	6078      	str	r0, [r7, #4]
 810e6d2:	6039      	str	r1, [r7, #0]
=======
 810c3e4:	b480      	push	{r7}
 810c3e6:	b083      	sub	sp, #12
 810c3e8:	af00      	add	r7, sp, #0
 810c3ea:	6078      	str	r0, [r7, #4]
 810c3ec:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      : _Head(__h) { }
<<<<<<< HEAD
 810e6d4:	687b      	ldr	r3, [r7, #4]
 810e6d6:	4618      	mov	r0, r3
 810e6d8:	370c      	adds	r7, #12
 810e6da:	46bd      	mov	sp, r7
 810e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6e0:	4770      	bx	lr
=======
 810c3ee:	687b      	ldr	r3, [r7, #4]
 810c3f0:	4618      	mov	r0, r3
 810c3f2:	370c      	adds	r7, #12
 810c3f4:	46bd      	mov	sp, r7
 810c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3fa:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e6e2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810e6e2:	b480      	push	{r7}
 810e6e4:	b083      	sub	sp, #12
 810e6e6:	af00      	add	r7, sp, #0
 810e6e8:	6078      	str	r0, [r7, #4]
 810e6ea:	687b      	ldr	r3, [r7, #4]
 810e6ec:	4618      	mov	r0, r3
 810e6ee:	370c      	adds	r7, #12
 810e6f0:	46bd      	mov	sp, r7
 810e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6f6:	4770      	bx	lr

0810e6f8 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e6f8:	b580      	push	{r7, lr}
 810e6fa:	b082      	sub	sp, #8
 810e6fc:	af00      	add	r7, sp, #0
 810e6fe:	6078      	str	r0, [r7, #4]
 810e700:	6878      	ldr	r0, [r7, #4]
 810e702:	f000 f940 	bl	810e986 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 810e706:	4603      	mov	r3, r0
 810e708:	4618      	mov	r0, r3
 810e70a:	3708      	adds	r7, #8
 810e70c:	46bd      	mov	sp, r7
 810e70e:	bd80      	pop	{r7, pc}

0810e710 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e710:	b480      	push	{r7}
 810e712:	b083      	sub	sp, #12
 810e714:	af00      	add	r7, sp, #0
 810e716:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e718:	687b      	ldr	r3, [r7, #4]
 810e71a:	4618      	mov	r0, r3
 810e71c:	370c      	adds	r7, #12
 810e71e:	46bd      	mov	sp, r7
 810e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e724:	4770      	bx	lr

0810e726 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e726:	b580      	push	{r7, lr}
 810e728:	b082      	sub	sp, #8
 810e72a:	af00      	add	r7, sp, #0
 810e72c:	6078      	str	r0, [r7, #4]
 810e72e:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810e730:	6838      	ldr	r0, [r7, #0]
 810e732:	f7ff ffed 	bl	810e710 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e736:	687b      	ldr	r3, [r7, #4]
 810e738:	4618      	mov	r0, r3
 810e73a:	3708      	adds	r7, #8
 810e73c:	46bd      	mov	sp, r7
 810e73e:	bd80      	pop	{r7, pc}

0810e740 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810e740:	b5b0      	push	{r4, r5, r7, lr}
 810e742:	b084      	sub	sp, #16
 810e744:	af00      	add	r7, sp, #0
 810e746:	60f8      	str	r0, [r7, #12]
 810e748:	60b9      	str	r1, [r7, #8]
 810e74a:	607a      	str	r2, [r7, #4]
 810e74c:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810e74e:	68fc      	ldr	r4, [r7, #12]
 810e750:	6878      	ldr	r0, [r7, #4]
 810e752:	f7ff fcef 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e756:	4605      	mov	r5, r0
 810e758:	6838      	ldr	r0, [r7, #0]
 810e75a:	f7ff fcf6 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e75e:	4603      	mov	r3, r0
 810e760:	461a      	mov	r2, r3
 810e762:	4629      	mov	r1, r5
 810e764:	4620      	mov	r0, r4
 810e766:	f000 f919 	bl	810e99c <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 810e76a:	68fb      	ldr	r3, [r7, #12]
 810e76c:	f103 0408 	add.w	r4, r3, #8
 810e770:	68b8      	ldr	r0, [r7, #8]
 810e772:	f7ff fcd4 	bl	810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e776:	4603      	mov	r3, r0
 810e778:	4619      	mov	r1, r3
 810e77a:	4620      	mov	r0, r4
 810e77c:	f000 f81e 	bl	810e7bc <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 810e780:	68fb      	ldr	r3, [r7, #12]
 810e782:	4618      	mov	r0, r3
 810e784:	3710      	adds	r7, #16
 810e786:	46bd      	mov	sp, r7
 810e788:	bdb0      	pop	{r4, r5, r7, pc}

0810e78a <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e78a:	b580      	push	{r7, lr}
 810e78c:	b082      	sub	sp, #8
 810e78e:	af00      	add	r7, sp, #0
 810e790:	6078      	str	r0, [r7, #4]
 810e792:	687b      	ldr	r3, [r7, #4]
 810e794:	3308      	adds	r3, #8
 810e796:	4618      	mov	r0, r3
 810e798:	f000 f91e 	bl	810e9d8 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 810e79c:	4603      	mov	r3, r0
 810e79e:	4618      	mov	r0, r3
 810e7a0:	3708      	adds	r7, #8
 810e7a2:	46bd      	mov	sp, r7
 810e7a4:	bd80      	pop	{r7, pc}

0810e7a6 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e7a6:	b480      	push	{r7}
 810e7a8:	b083      	sub	sp, #12
 810e7aa:	af00      	add	r7, sp, #0
 810e7ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e7ae:	687b      	ldr	r3, [r7, #4]
 810e7b0:	4618      	mov	r0, r3
 810e7b2:	370c      	adds	r7, #12
 810e7b4:	46bd      	mov	sp, r7
 810e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e7ba:	4770      	bx	lr

0810e7bc <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e7bc:	b580      	push	{r7, lr}
 810e7be:	b082      	sub	sp, #8
 810e7c0:	af00      	add	r7, sp, #0
 810e7c2:	6078      	str	r0, [r7, #4]
 810e7c4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810e7c6:	6838      	ldr	r0, [r7, #0]
 810e7c8:	f7ff fca9 	bl	810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e7cc:	4602      	mov	r2, r0
 810e7ce:	687b      	ldr	r3, [r7, #4]
 810e7d0:	601a      	str	r2, [r3, #0]
 810e7d2:	687b      	ldr	r3, [r7, #4]
 810e7d4:	4618      	mov	r0, r3
 810e7d6:	3708      	adds	r7, #8
 810e7d8:	46bd      	mov	sp, r7
 810e7da:	bd80      	pop	{r7, pc}

0810e7dc <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
=======
0810c3fc <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
<<<<<<< HEAD
 810e7dc:	b580      	push	{r7, lr}
 810e7de:	b082      	sub	sp, #8
 810e7e0:	af00      	add	r7, sp, #0
 810e7e2:	6078      	str	r0, [r7, #4]
=======
 810c3fc:	b580      	push	{r7, lr}
 810c3fe:	b082      	sub	sp, #8
 810c400:	af00      	add	r7, sp, #0
 810c402:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
<<<<<<< HEAD
 810e7e4:	6878      	ldr	r0, [r7, #4]
 810e7e6:	f7ff fc31 	bl	810e04c <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810e7ea:	4603      	mov	r3, r0
 810e7ec:	4618      	mov	r0, r3
 810e7ee:	3708      	adds	r7, #8
 810e7f0:	46bd      	mov	sp, r7
 810e7f2:	bd80      	pop	{r7, pc}
=======
 810c404:	6878      	ldr	r0, [r7, #4]
 810c406:	f7ff fbb3 	bl	810bb70 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810c40a:	4603      	mov	r3, r0
 810c40c:	4618      	mov	r0, r3
 810c40e:	3708      	adds	r7, #8
 810c410:	46bd      	mov	sp, r7
 810c412:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e7f4 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e7f4:	b480      	push	{r7}
 810e7f6:	b083      	sub	sp, #12
 810e7f8:	af00      	add	r7, sp, #0
 810e7fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e7fc:	687b      	ldr	r3, [r7, #4]
 810e7fe:	4618      	mov	r0, r3
 810e800:	370c      	adds	r7, #12
 810e802:	46bd      	mov	sp, r7
 810e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e808:	4770      	bx	lr

0810e80a <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
=======
0810c414 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
<<<<<<< HEAD
 810e80a:	b580      	push	{r7, lr}
 810e80c:	b082      	sub	sp, #8
 810e80e:	af00      	add	r7, sp, #0
 810e810:	6078      	str	r0, [r7, #4]
=======
 810c414:	b580      	push	{r7, lr}
 810c416:	b082      	sub	sp, #8
 810c418:	af00      	add	r7, sp, #0
 810c41a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
<<<<<<< HEAD
 810e812:	6878      	ldr	r0, [r7, #4]
 810e814:	f7ff fd58 	bl	810e2c8 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810e818:	4603      	mov	r3, r0
 810e81a:	4618      	mov	r0, r3
 810e81c:	3708      	adds	r7, #8
 810e81e:	46bd      	mov	sp, r7
 810e820:	bd80      	pop	{r7, pc}
=======
 810c41c:	6878      	ldr	r0, [r7, #4]
 810c41e:	f7ff fa85 	bl	810b92c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810c422:	4603      	mov	r3, r0
 810c424:	4618      	mov	r0, r3
 810c426:	3708      	adds	r7, #8
 810c428:	46bd      	mov	sp, r7
 810c42a:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e822 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810e822:	b480      	push	{r7}
 810e824:	b083      	sub	sp, #12
 810e826:	af00      	add	r7, sp, #0
 810e828:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e82a:	687b      	ldr	r3, [r7, #4]
 810e82c:	4618      	mov	r0, r3
 810e82e:	370c      	adds	r7, #12
 810e830:	46bd      	mov	sp, r7
 810e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e836:	4770      	bx	lr
=======
0810c42c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810c42c:	b580      	push	{r7, lr}
 810c42e:	b082      	sub	sp, #8
 810c430:	af00      	add	r7, sp, #0
 810c432:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c434:	687b      	ldr	r3, [r7, #4]
 810c436:	4618      	mov	r0, r3
 810c438:	f000 f805 	bl	810c446 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810c43c:	4603      	mov	r3, r0
 810c43e:	4618      	mov	r0, r3
 810c440:	3708      	adds	r7, #8
 810c442:	46bd      	mov	sp, r7
 810c444:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e838 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
=======
0810c446 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c446:	b580      	push	{r7, lr}
 810c448:	b082      	sub	sp, #8
 810c44a:	af00      	add	r7, sp, #0
 810c44c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c44e:	6878      	ldr	r0, [r7, #4]
 810c450:	f7ff fe74 	bl	810c13c <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 810c454:	4603      	mov	r3, r0
 810c456:	4618      	mov	r0, r3
 810c458:	3708      	adds	r7, #8
 810c45a:	46bd      	mov	sp, r7
 810c45c:	bd80      	pop	{r7, pc}

0810c45e <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    get(tuple<_Elements...>&& __t) noexcept
<<<<<<< HEAD
 810e838:	b580      	push	{r7, lr}
 810e83a:	b082      	sub	sp, #8
 810e83c:	af00      	add	r7, sp, #0
 810e83e:	6078      	str	r0, [r7, #4]
=======
 810c45e:	b580      	push	{r7, lr}
 810c460:	b082      	sub	sp, #8
 810c462:	af00      	add	r7, sp, #0
 810c464:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return std::forward<__element_type&&>(std::get<__i>(__t));
<<<<<<< HEAD
 810e840:	6878      	ldr	r0, [r7, #4]
 810e842:	f000 f8fe 	bl	810ea42 <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810e846:	4603      	mov	r3, r0
 810e848:	4618      	mov	r0, r3
 810e84a:	f7ff ffac 	bl	810e7a6 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e84e:	4603      	mov	r3, r0
=======
 810c466:	6878      	ldr	r0, [r7, #4]
 810c468:	f7ff ffe0 	bl	810c42c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810c46c:	4603      	mov	r3, r0
 810c46e:	4618      	mov	r0, r3
 810c470:	f7ff fe7e 	bl	810c170 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c474:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810e850:	4618      	mov	r0, r3
 810e852:	3708      	adds	r7, #8
 810e854:	46bd      	mov	sp, r7
 810e856:	bd80      	pop	{r7, pc}
=======
 810c476:	4618      	mov	r0, r3
 810c478:	3708      	adds	r7, #8
 810c47a:	46bd      	mov	sp, r7
 810c47c:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e858 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
=======
0810c47e <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
<<<<<<< HEAD
 810e858:	b580      	push	{r7, lr}
 810e85a:	b082      	sub	sp, #8
 810e85c:	af00      	add	r7, sp, #0
 810e85e:	6078      	str	r0, [r7, #4]
=======
 810c47e:	b580      	push	{r7, lr}
 810c480:	b082      	sub	sp, #8
 810c482:	af00      	add	r7, sp, #0
 810c484:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
<<<<<<< HEAD
 810e860:	6878      	ldr	r0, [r7, #4]
 810e862:	f7ff fe29 	bl	810e4b8 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810e866:	4603      	mov	r3, r0
 810e868:	4618      	mov	r0, r3
 810e86a:	3708      	adds	r7, #8
 810e86c:	46bd      	mov	sp, r7
 810e86e:	bd80      	pop	{r7, pc}
=======
 810c486:	6878      	ldr	r0, [r7, #4]
 810c488:	f7ff f9f6 	bl	810b878 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810c48c:	4603      	mov	r3, r0
 810c48e:	4618      	mov	r0, r3
 810c490:	3708      	adds	r7, #8
 810c492:	46bd      	mov	sp, r7
 810c494:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e870 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
=======
0810c496 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810c496:	b580      	push	{r7, lr}
 810c498:	b082      	sub	sp, #8
 810c49a:	af00      	add	r7, sp, #0
 810c49c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c49e:	687b      	ldr	r3, [r7, #4]
 810c4a0:	4618      	mov	r0, r3
 810c4a2:	f000 f805 	bl	810c4b0 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810c4a6:	4603      	mov	r3, r0
 810c4a8:	4618      	mov	r0, r3
 810c4aa:	3708      	adds	r7, #8
 810c4ac:	46bd      	mov	sp, r7
 810c4ae:	bd80      	pop	{r7, pc}

0810c4b0 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c4b0:	b580      	push	{r7, lr}
 810c4b2:	b082      	sub	sp, #8
 810c4b4:	af00      	add	r7, sp, #0
 810c4b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c4b8:	6878      	ldr	r0, [r7, #4]
 810c4ba:	f7ff fd61 	bl	810bf80 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 810c4be:	4603      	mov	r3, r0
 810c4c0:	4618      	mov	r0, r3
 810c4c2:	3708      	adds	r7, #8
 810c4c4:	46bd      	mov	sp, r7
 810c4c6:	bd80      	pop	{r7, pc}

0810c4c8 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    get(tuple<_Elements...>&& __t) noexcept
<<<<<<< HEAD
 810e870:	b580      	push	{r7, lr}
 810e872:	b082      	sub	sp, #8
 810e874:	af00      	add	r7, sp, #0
 810e876:	6078      	str	r0, [r7, #4]
=======
 810c4c8:	b580      	push	{r7, lr}
 810c4ca:	b082      	sub	sp, #8
 810c4cc:	af00      	add	r7, sp, #0
 810c4ce:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return std::forward<__element_type&&>(std::get<__i>(__t));
<<<<<<< HEAD
 810e878:	6878      	ldr	r0, [r7, #4]
 810e87a:	f000 f8ef 	bl	810ea5c <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810e87e:	4603      	mov	r3, r0
 810e880:	4618      	mov	r0, r3
 810e882:	f000 f8c3 	bl	810ea0c <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 810e886:	4603      	mov	r3, r0
=======
 810c4d0:	6878      	ldr	r0, [r7, #4]
 810c4d2:	f7ff ffe0 	bl	810c496 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810c4d6:	4603      	mov	r3, r0
 810c4d8:	4618      	mov	r0, r3
 810c4da:	f7ff fd6b 	bl	810bfb4 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 810c4de:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810e888:	4618      	mov	r0, r3
 810e88a:	3708      	adds	r7, #8
 810e88c:	46bd      	mov	sp, r7
 810e88e:	bd80      	pop	{r7, pc}
=======
 810c4e0:	4618      	mov	r0, r3
 810c4e2:	3708      	adds	r7, #8
 810c4e4:	46bd      	mov	sp, r7
 810c4e6:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e890 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
=======
0810c4e8 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
<<<<<<< HEAD
 810e890:	b580      	push	{r7, lr}
 810e892:	b082      	sub	sp, #8
 810e894:	af00      	add	r7, sp, #0
 810e896:	6078      	str	r0, [r7, #4]
=======
 810c4e8:	b580      	push	{r7, lr}
 810c4ea:	b082      	sub	sp, #8
 810c4ec:	af00      	add	r7, sp, #0
 810c4ee:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
<<<<<<< HEAD
 810e898:	6878      	ldr	r0, [r7, #4]
 810e89a:	f7ff ff2d 	bl	810e6f8 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810e89e:	4603      	mov	r3, r0
 810e8a0:	4618      	mov	r0, r3
 810e8a2:	3708      	adds	r7, #8
 810e8a4:	46bd      	mov	sp, r7
 810e8a6:	bd80      	pop	{r7, pc}
=======
 810c4f0:	6878      	ldr	r0, [r7, #4]
 810c4f2:	f7ff f97e 	bl	810b7f2 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810c4f6:	4603      	mov	r3, r0
 810c4f8:	4618      	mov	r0, r3
 810c4fa:	3708      	adds	r7, #8
 810c4fc:	46bd      	mov	sp, r7
 810c4fe:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e8a8 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
=======
0810c500 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810c500:	b580      	push	{r7, lr}
 810c502:	b082      	sub	sp, #8
 810c504:	af00      	add	r7, sp, #0
 810c506:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810c508:	687b      	ldr	r3, [r7, #4]
 810c50a:	4618      	mov	r0, r3
 810c50c:	f000 f805 	bl	810c51a <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 810c510:	4603      	mov	r3, r0
 810c512:	4618      	mov	r0, r3
 810c514:	3708      	adds	r7, #8
 810c516:	46bd      	mov	sp, r7
 810c518:	bd80      	pop	{r7, pc}

0810c51a <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810c51a:	b580      	push	{r7, lr}
 810c51c:	b082      	sub	sp, #8
 810c51e:	af00      	add	r7, sp, #0
 810c520:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810c522:	6878      	ldr	r0, [r7, #4]
 810c524:	f7ff fd08 	bl	810bf38 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 810c528:	4603      	mov	r3, r0
 810c52a:	4618      	mov	r0, r3
 810c52c:	3708      	adds	r7, #8
 810c52e:	46bd      	mov	sp, r7
 810c530:	bd80      	pop	{r7, pc}

0810c532 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    get(tuple<_Elements...>&& __t) noexcept
<<<<<<< HEAD
 810e8a8:	b580      	push	{r7, lr}
 810e8aa:	b082      	sub	sp, #8
 810e8ac:	af00      	add	r7, sp, #0
 810e8ae:	6078      	str	r0, [r7, #4]
=======
 810c532:	b580      	push	{r7, lr}
 810c534:	b082      	sub	sp, #8
 810c536:	af00      	add	r7, sp, #0
 810c538:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return std::forward<__element_type&&>(std::get<__i>(__t));
<<<<<<< HEAD
 810e8b0:	6878      	ldr	r0, [r7, #4]
 810e8b2:	f000 f8e0 	bl	810ea76 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810e8b6:	4603      	mov	r3, r0
 810e8b8:	4618      	mov	r0, r3
 810e8ba:	f000 f8e9 	bl	810ea90 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 810e8be:	4603      	mov	r3, r0
=======
 810c53a:	6878      	ldr	r0, [r7, #4]
 810c53c:	f7ff ffe0 	bl	810c500 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810c540:	4603      	mov	r3, r0
 810c542:	4618      	mov	r0, r3
 810c544:	f7ff fd11 	bl	810bf6a <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 810c548:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810e8c0:	4618      	mov	r0, r3
 810e8c2:	3708      	adds	r7, #8
 810e8c4:	46bd      	mov	sp, r7
 810e8c6:	bd80      	pop	{r7, pc}
=======
 810c54a:	4618      	mov	r0, r3
 810c54c:	3708      	adds	r7, #8
 810c54e:	46bd      	mov	sp, r7
 810c550:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e8c8 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e8c8:	b480      	push	{r7}
 810e8ca:	b083      	sub	sp, #12
 810e8cc:	af00      	add	r7, sp, #0
 810e8ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e8d0:	687b      	ldr	r3, [r7, #4]
 810e8d2:	4618      	mov	r0, r3
 810e8d4:	370c      	adds	r7, #12
 810e8d6:	46bd      	mov	sp, r7
 810e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8dc:	4770      	bx	lr

0810e8de <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
=======
0810c552 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
<<<<<<< HEAD
 810e8de:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e8e0:	b087      	sub	sp, #28
 810e8e2:	af00      	add	r7, sp, #0
 810e8e4:	7538      	strb	r0, [r7, #20]
 810e8e6:	6139      	str	r1, [r7, #16]
 810e8e8:	60fa      	str	r2, [r7, #12]
 810e8ea:	60bb      	str	r3, [r7, #8]
=======
 810c552:	b5f0      	push	{r4, r5, r6, r7, lr}
 810c554:	b087      	sub	sp, #28
 810c556:	af00      	add	r7, sp, #0
 810c558:	7538      	strb	r0, [r7, #20]
 810c55a:	6139      	str	r1, [r7, #16]
 810c55c:	60fa      	str	r2, [r7, #12]
 810c55e:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
<<<<<<< HEAD
 810e8ec:	68f8      	ldr	r0, [r7, #12]
 810e8ee:	f7ff ff81 	bl	810e7f4 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810e8f2:	4603      	mov	r3, r0
 810e8f4:	681b      	ldr	r3, [r3, #0]
 810e8f6:	693a      	ldr	r2, [r7, #16]
 810e8f8:	6852      	ldr	r2, [r2, #4]
 810e8fa:	1052      	asrs	r2, r2, #1
 810e8fc:	189d      	adds	r5, r3, r2
 810e8fe:	693a      	ldr	r2, [r7, #16]
 810e900:	6852      	ldr	r2, [r2, #4]
 810e902:	f002 0201 	and.w	r2, r2, #1
 810e906:	2a00      	cmp	r2, #0
 810e908:	d102      	bne.n	810e910 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 810e90a:	693b      	ldr	r3, [r7, #16]
 810e90c:	681c      	ldr	r4, [r3, #0]
 810e90e:	e008      	b.n	810e922 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 810e910:	693a      	ldr	r2, [r7, #16]
 810e912:	6852      	ldr	r2, [r2, #4]
 810e914:	1052      	asrs	r2, r2, #1
 810e916:	4413      	add	r3, r2
 810e918:	681b      	ldr	r3, [r3, #0]
 810e91a:	693a      	ldr	r2, [r7, #16]
 810e91c:	6812      	ldr	r2, [r2, #0]
 810e91e:	4413      	add	r3, r2
 810e920:	681c      	ldr	r4, [r3, #0]
 810e922:	68b8      	ldr	r0, [r7, #8]
 810e924:	f7ff fbfb 	bl	810e11e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e928:	4603      	mov	r3, r0
 810e92a:	781e      	ldrb	r6, [r3, #0]
 810e92c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810e92e:	f7ff fc01 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e932:	4603      	mov	r3, r0
 810e934:	681b      	ldr	r3, [r3, #0]
 810e936:	607b      	str	r3, [r7, #4]
 810e938:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810e93a:	f7ff fc06 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e93e:	4603      	mov	r3, r0
 810e940:	681b      	ldr	r3, [r3, #0]
 810e942:	687a      	ldr	r2, [r7, #4]
 810e944:	4631      	mov	r1, r6
 810e946:	4628      	mov	r0, r5
 810e948:	47a0      	blx	r4
 810e94a:	bf00      	nop
=======
 810c560:	68f8      	ldr	r0, [r7, #12]
 810c562:	f7ff fef8 	bl	810c356 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810c566:	4603      	mov	r3, r0
 810c568:	681b      	ldr	r3, [r3, #0]
 810c56a:	693a      	ldr	r2, [r7, #16]
 810c56c:	6852      	ldr	r2, [r2, #4]
 810c56e:	1052      	asrs	r2, r2, #1
 810c570:	189d      	adds	r5, r3, r2
 810c572:	693a      	ldr	r2, [r7, #16]
 810c574:	6852      	ldr	r2, [r2, #4]
 810c576:	f002 0201 	and.w	r2, r2, #1
 810c57a:	2a00      	cmp	r2, #0
 810c57c:	d102      	bne.n	810c584 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 810c57e:	693b      	ldr	r3, [r7, #16]
 810c580:	681c      	ldr	r4, [r3, #0]
 810c582:	e008      	b.n	810c596 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 810c584:	693a      	ldr	r2, [r7, #16]
 810c586:	6852      	ldr	r2, [r2, #4]
 810c588:	1052      	asrs	r2, r2, #1
 810c58a:	4413      	add	r3, r2
 810c58c:	681b      	ldr	r3, [r3, #0]
 810c58e:	693a      	ldr	r2, [r7, #16]
 810c590:	6812      	ldr	r2, [r2, #0]
 810c592:	4413      	add	r3, r2
 810c594:	681c      	ldr	r4, [r3, #0]
 810c596:	68b8      	ldr	r0, [r7, #8]
 810c598:	f7ff fb4d 	bl	810bc36 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810c59c:	4603      	mov	r3, r0
 810c59e:	781e      	ldrb	r6, [r3, #0]
 810c5a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810c5a2:	f7ff fb53 	bl	810bc4c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c5a6:	4603      	mov	r3, r0
 810c5a8:	681b      	ldr	r3, [r3, #0]
 810c5aa:	607b      	str	r3, [r7, #4]
 810c5ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810c5ae:	f7ff fb58 	bl	810bc62 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810c5b2:	4603      	mov	r3, r0
 810c5b4:	681b      	ldr	r3, [r3, #0]
 810c5b6:	687a      	ldr	r2, [r7, #4]
 810c5b8:	4631      	mov	r1, r6
 810c5ba:	4628      	mov	r0, r5
 810c5bc:	47a0      	blx	r4
 810c5be:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    }
<<<<<<< HEAD
 810e94c:	371c      	adds	r7, #28
 810e94e:	46bd      	mov	sp, r7
 810e950:	bdf0      	pop	{r4, r5, r6, r7, pc}
=======
 810c5c0:	371c      	adds	r7, #28
 810c5c2:	46bd      	mov	sp, r7
 810c5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e952 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
=======
0810c5c6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      constexpr _Tuple_impl(const _Head& __head)
<<<<<<< HEAD
 810e952:	b580      	push	{r7, lr}
 810e954:	b082      	sub	sp, #8
 810e956:	af00      	add	r7, sp, #0
 810e958:	6078      	str	r0, [r7, #4]
 810e95a:	6039      	str	r1, [r7, #0]
=======
 810c5c6:	b580      	push	{r7, lr}
 810c5c8:	b082      	sub	sp, #8
 810c5ca:	af00      	add	r7, sp, #0
 810c5cc:	6078      	str	r0, [r7, #4]
 810c5ce:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      : _Base(__head) { }
<<<<<<< HEAD
 810e95c:	6839      	ldr	r1, [r7, #0]
 810e95e:	6878      	ldr	r0, [r7, #4]
 810e960:	f000 f8a1 	bl	810eaa6 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 810e964:	687b      	ldr	r3, [r7, #4]
 810e966:	4618      	mov	r0, r3
 810e968:	3708      	adds	r7, #8
 810e96a:	46bd      	mov	sp, r7
 810e96c:	bd80      	pop	{r7, pc}
=======
 810c5d0:	6839      	ldr	r1, [r7, #0]
 810c5d2:	6878      	ldr	r0, [r7, #4]
 810c5d4:	f000 f811 	bl	810c5fa <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 810c5d8:	687b      	ldr	r3, [r7, #4]
 810c5da:	4618      	mov	r0, r3
 810c5dc:	3708      	adds	r7, #8
 810c5de:	46bd      	mov	sp, r7
 810c5e0:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e96e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
=======
0810c5e2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      constexpr _Head_base(const _Head& __h)
<<<<<<< HEAD
 810e96e:	b480      	push	{r7}
 810e970:	b083      	sub	sp, #12
 810e972:	af00      	add	r7, sp, #0
 810e974:	6078      	str	r0, [r7, #4]
 810e976:	6039      	str	r1, [r7, #0]
=======
 810c5e2:	b480      	push	{r7}
 810c5e4:	b083      	sub	sp, #12
 810c5e6:	af00      	add	r7, sp, #0
 810c5e8:	6078      	str	r0, [r7, #4]
 810c5ea:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      : _Head(__h) { }
<<<<<<< HEAD
 810e978:	687b      	ldr	r3, [r7, #4]
 810e97a:	4618      	mov	r0, r3
 810e97c:	370c      	adds	r7, #12
 810e97e:	46bd      	mov	sp, r7
 810e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e984:	4770      	bx	lr
=======
 810c5ec:	687b      	ldr	r3, [r7, #4]
 810c5ee:	4618      	mov	r0, r3
 810c5f0:	370c      	adds	r7, #12
 810c5f2:	46bd      	mov	sp, r7
 810c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5f8:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810e986 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810e986:	b480      	push	{r7}
 810e988:	b083      	sub	sp, #12
 810e98a:	af00      	add	r7, sp, #0
 810e98c:	6078      	str	r0, [r7, #4]
 810e98e:	687b      	ldr	r3, [r7, #4]
 810e990:	4618      	mov	r0, r3
 810e992:	370c      	adds	r7, #12
 810e994:	46bd      	mov	sp, r7
 810e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e99a:	4770      	bx	lr

0810e99c <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810e99c:	b590      	push	{r4, r7, lr}
 810e99e:	b085      	sub	sp, #20
 810e9a0:	af00      	add	r7, sp, #0
 810e9a2:	60f8      	str	r0, [r7, #12]
 810e9a4:	60b9      	str	r1, [r7, #8]
 810e9a6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 810e9a8:	68fc      	ldr	r4, [r7, #12]
 810e9aa:	6878      	ldr	r0, [r7, #4]
 810e9ac:	f7ff fbcd 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e9b0:	4603      	mov	r3, r0
 810e9b2:	4619      	mov	r1, r3
 810e9b4:	4620      	mov	r0, r4
 810e9b6:	f000 f882 	bl	810eabe <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 810e9ba:	68fb      	ldr	r3, [r7, #12]
 810e9bc:	1d1c      	adds	r4, r3, #4
 810e9be:	68b8      	ldr	r0, [r7, #8]
 810e9c0:	f7ff fbb8 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e9c4:	4603      	mov	r3, r0
 810e9c6:	4619      	mov	r1, r3
 810e9c8:	4620      	mov	r0, r4
 810e9ca:	f000 f82a 	bl	810ea22 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 810e9ce:	68fb      	ldr	r3, [r7, #12]
 810e9d0:	4618      	mov	r0, r3
 810e9d2:	3714      	adds	r7, #20
 810e9d4:	46bd      	mov	sp, r7
 810e9d6:	bd90      	pop	{r4, r7, pc}

0810e9d8 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810e9d8:	b480      	push	{r7}
 810e9da:	b083      	sub	sp, #12
 810e9dc:	af00      	add	r7, sp, #0
 810e9de:	6078      	str	r0, [r7, #4]
 810e9e0:	687b      	ldr	r3, [r7, #4]
 810e9e2:	681b      	ldr	r3, [r3, #0]
 810e9e4:	4618      	mov	r0, r3
 810e9e6:	370c      	adds	r7, #12
 810e9e8:	46bd      	mov	sp, r7
 810e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e9ee:	4770      	bx	lr

0810e9f0 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e9f0:	b580      	push	{r7, lr}
 810e9f2:	b082      	sub	sp, #8
 810e9f4:	af00      	add	r7, sp, #0
 810e9f6:	6078      	str	r0, [r7, #4]
 810e9f8:	687b      	ldr	r3, [r7, #4]
 810e9fa:	3304      	adds	r3, #4
 810e9fc:	4618      	mov	r0, r3
 810e9fe:	f000 f871 	bl	810eae4 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 810ea02:	4603      	mov	r3, r0
 810ea04:	4618      	mov	r0, r3
 810ea06:	3708      	adds	r7, #8
 810ea08:	46bd      	mov	sp, r7
 810ea0a:	bd80      	pop	{r7, pc}

0810ea0c <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ea0c:	b480      	push	{r7}
 810ea0e:	b083      	sub	sp, #12
 810ea10:	af00      	add	r7, sp, #0
 810ea12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ea14:	687b      	ldr	r3, [r7, #4]
 810ea16:	4618      	mov	r0, r3
 810ea18:	370c      	adds	r7, #12
 810ea1a:	46bd      	mov	sp, r7
 810ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea20:	4770      	bx	lr

0810ea22 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810ea22:	b580      	push	{r7, lr}
 810ea24:	b082      	sub	sp, #8
 810ea26:	af00      	add	r7, sp, #0
 810ea28:	6078      	str	r0, [r7, #4]
 810ea2a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810ea2c:	6838      	ldr	r0, [r7, #0]
 810ea2e:	f7ff fb81 	bl	810e134 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810ea32:	4602      	mov	r2, r0
 810ea34:	687b      	ldr	r3, [r7, #4]
 810ea36:	601a      	str	r2, [r3, #0]
 810ea38:	687b      	ldr	r3, [r7, #4]
 810ea3a:	4618      	mov	r0, r3
 810ea3c:	3708      	adds	r7, #8
 810ea3e:	46bd      	mov	sp, r7
 810ea40:	bd80      	pop	{r7, pc}

0810ea42 <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810ea42:	b580      	push	{r7, lr}
 810ea44:	b082      	sub	sp, #8
 810ea46:	af00      	add	r7, sp, #0
 810ea48:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810ea4a:	687b      	ldr	r3, [r7, #4]
 810ea4c:	4618      	mov	r0, r3
 810ea4e:	f000 f872 	bl	810eb36 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810ea52:	4603      	mov	r3, r0
 810ea54:	4618      	mov	r0, r3
 810ea56:	3708      	adds	r7, #8
 810ea58:	46bd      	mov	sp, r7
 810ea5a:	bd80      	pop	{r7, pc}

0810ea5c <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810ea5c:	b580      	push	{r7, lr}
 810ea5e:	b082      	sub	sp, #8
 810ea60:	af00      	add	r7, sp, #0
 810ea62:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810ea64:	687b      	ldr	r3, [r7, #4]
 810ea66:	4618      	mov	r0, r3
 810ea68:	f000 f871 	bl	810eb4e <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810ea6c:	4603      	mov	r3, r0
 810ea6e:	4618      	mov	r0, r3
 810ea70:	3708      	adds	r7, #8
 810ea72:	46bd      	mov	sp, r7
 810ea74:	bd80      	pop	{r7, pc}

0810ea76 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810ea76:	b580      	push	{r7, lr}
 810ea78:	b082      	sub	sp, #8
 810ea7a:	af00      	add	r7, sp, #0
 810ea7c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810ea7e:	687b      	ldr	r3, [r7, #4]
 810ea80:	4618      	mov	r0, r3
 810ea82:	f000 f870 	bl	810eb66 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 810ea86:	4603      	mov	r3, r0
 810ea88:	4618      	mov	r0, r3
 810ea8a:	3708      	adds	r7, #8
 810ea8c:	46bd      	mov	sp, r7
 810ea8e:	bd80      	pop	{r7, pc}

0810ea90 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ea90:	b480      	push	{r7}
 810ea92:	b083      	sub	sp, #12
 810ea94:	af00      	add	r7, sp, #0
 810ea96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ea98:	687b      	ldr	r3, [r7, #4]
 810ea9a:	4618      	mov	r0, r3
 810ea9c:	370c      	adds	r7, #12
 810ea9e:	46bd      	mov	sp, r7
 810eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eaa4:	4770      	bx	lr

0810eaa6 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
=======
0810c5fa <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      constexpr _Head_base(const _Head& __h)
<<<<<<< HEAD
 810eaa6:	b480      	push	{r7}
 810eaa8:	b083      	sub	sp, #12
 810eaaa:	af00      	add	r7, sp, #0
 810eaac:	6078      	str	r0, [r7, #4]
 810eaae:	6039      	str	r1, [r7, #0]
=======
 810c5fa:	b480      	push	{r7}
 810c5fc:	b083      	sub	sp, #12
 810c5fe:	af00      	add	r7, sp, #0
 810c600:	6078      	str	r0, [r7, #4]
 810c602:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
      : _Head(__h) { }
<<<<<<< HEAD
 810eab0:	687b      	ldr	r3, [r7, #4]
 810eab2:	4618      	mov	r0, r3
 810eab4:	370c      	adds	r7, #12
 810eab6:	46bd      	mov	sp, r7
 810eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eabc:	4770      	bx	lr

0810eabe <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 810eabe:	b590      	push	{r4, r7, lr}
 810eac0:	b083      	sub	sp, #12
 810eac2:	af00      	add	r7, sp, #0
 810eac4:	6078      	str	r0, [r7, #4]
 810eac6:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 810eac8:	687c      	ldr	r4, [r7, #4]
 810eaca:	6838      	ldr	r0, [r7, #0]
 810eacc:	f7ff fb3d 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810ead0:	4603      	mov	r3, r0
 810ead2:	4619      	mov	r1, r3
 810ead4:	4620      	mov	r0, r4
 810ead6:	f000 f81e 	bl	810eb16 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 810eada:	687b      	ldr	r3, [r7, #4]
 810eadc:	4618      	mov	r0, r3
 810eade:	370c      	adds	r7, #12
 810eae0:	46bd      	mov	sp, r7
 810eae2:	bd90      	pop	{r4, r7, pc}

0810eae4 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810eae4:	b480      	push	{r7}
 810eae6:	b083      	sub	sp, #12
 810eae8:	af00      	add	r7, sp, #0
 810eaea:	6078      	str	r0, [r7, #4]
 810eaec:	687b      	ldr	r3, [r7, #4]
 810eaee:	681b      	ldr	r3, [r3, #0]
 810eaf0:	4618      	mov	r0, r3
 810eaf2:	370c      	adds	r7, #12
 810eaf4:	46bd      	mov	sp, r7
 810eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eafa:	4770      	bx	lr

0810eafc <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810eafc:	b580      	push	{r7, lr}
 810eafe:	b082      	sub	sp, #8
 810eb00:	af00      	add	r7, sp, #0
 810eb02:	6078      	str	r0, [r7, #4]
 810eb04:	687b      	ldr	r3, [r7, #4]
 810eb06:	4618      	mov	r0, r3
 810eb08:	f000 f839 	bl	810eb7e <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 810eb0c:	4603      	mov	r3, r0
 810eb0e:	4618      	mov	r0, r3
 810eb10:	3708      	adds	r7, #8
 810eb12:	46bd      	mov	sp, r7
 810eb14:	bd80      	pop	{r7, pc}

0810eb16 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810eb16:	b580      	push	{r7, lr}
 810eb18:	b082      	sub	sp, #8
 810eb1a:	af00      	add	r7, sp, #0
 810eb1c:	6078      	str	r0, [r7, #4]
 810eb1e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810eb20:	6838      	ldr	r0, [r7, #0]
 810eb22:	f7ff fb12 	bl	810e14a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810eb26:	4602      	mov	r2, r0
 810eb28:	687b      	ldr	r3, [r7, #4]
 810eb2a:	601a      	str	r2, [r3, #0]
 810eb2c:	687b      	ldr	r3, [r7, #4]
 810eb2e:	4618      	mov	r0, r3
 810eb30:	3708      	adds	r7, #8
 810eb32:	46bd      	mov	sp, r7
 810eb34:	bd80      	pop	{r7, pc}

0810eb36 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810eb36:	b580      	push	{r7, lr}
 810eb38:	b082      	sub	sp, #8
 810eb3a:	af00      	add	r7, sp, #0
 810eb3c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810eb3e:	6878      	ldr	r0, [r7, #4]
 810eb40:	f7ff fe23 	bl	810e78a <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 810eb44:	4603      	mov	r3, r0
 810eb46:	4618      	mov	r0, r3
 810eb48:	3708      	adds	r7, #8
 810eb4a:	46bd      	mov	sp, r7
 810eb4c:	bd80      	pop	{r7, pc}

0810eb4e <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810eb4e:	b580      	push	{r7, lr}
 810eb50:	b082      	sub	sp, #8
 810eb52:	af00      	add	r7, sp, #0
 810eb54:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810eb56:	6878      	ldr	r0, [r7, #4]
 810eb58:	f7ff ff4a 	bl	810e9f0 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 810eb5c:	4603      	mov	r3, r0
 810eb5e:	4618      	mov	r0, r3
 810eb60:	3708      	adds	r7, #8
 810eb62:	46bd      	mov	sp, r7
 810eb64:	bd80      	pop	{r7, pc}

0810eb66 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810eb66:	b580      	push	{r7, lr}
 810eb68:	b082      	sub	sp, #8
 810eb6a:	af00      	add	r7, sp, #0
 810eb6c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810eb6e:	6878      	ldr	r0, [r7, #4]
 810eb70:	f7ff ffc4 	bl	810eafc <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 810eb74:	4603      	mov	r3, r0
 810eb76:	4618      	mov	r0, r3
 810eb78:	3708      	adds	r7, #8
 810eb7a:	46bd      	mov	sp, r7
 810eb7c:	bd80      	pop	{r7, pc}

0810eb7e <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810eb7e:	b480      	push	{r7}
 810eb80:	b083      	sub	sp, #12
 810eb82:	af00      	add	r7, sp, #0
 810eb84:	6078      	str	r0, [r7, #4]
 810eb86:	687b      	ldr	r3, [r7, #4]
 810eb88:	681b      	ldr	r3, [r3, #0]
 810eb8a:	4618      	mov	r0, r3
 810eb8c:	370c      	adds	r7, #12
 810eb8e:	46bd      	mov	sp, r7
 810eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb94:	4770      	bx	lr
=======
 810c604:	687b      	ldr	r3, [r7, #4]
 810c606:	4618      	mov	r0, r3
 810c608:	370c      	adds	r7, #12
 810c60a:	46bd      	mov	sp, r7
 810c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c610:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810eb98 <_ZN5IOBusD1Ev>:
=======
0810c614 <_ZN5IOBusD1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
<<<<<<< HEAD
 810eb98:	b580      	push	{r7, lr}
 810eb9a:	b082      	sub	sp, #8
 810eb9c:	af00      	add	r7, sp, #0
 810eb9e:	6078      	str	r0, [r7, #4]
 810eba0:	4a05      	ldr	r2, [pc, #20]	; (810ebb8 <_ZN5IOBusD1Ev+0x20>)
 810eba2:	687b      	ldr	r3, [r7, #4]
 810eba4:	601a      	str	r2, [r3, #0]
 810eba6:	687b      	ldr	r3, [r7, #4]
 810eba8:	4618      	mov	r0, r3
 810ebaa:	f7fe ff2f 	bl	810da0c <_ZN10MessageBusD1Ev>
 810ebae:	687b      	ldr	r3, [r7, #4]
 810ebb0:	4618      	mov	r0, r3
 810ebb2:	3708      	adds	r7, #8
 810ebb4:	46bd      	mov	sp, r7
 810ebb6:	bd80      	pop	{r7, pc}
 810ebb8:	08114a74 	.word	0x08114a74
=======
 810c614:	b580      	push	{r7, lr}
 810c616:	b082      	sub	sp, #8
 810c618:	af00      	add	r7, sp, #0
 810c61a:	6078      	str	r0, [r7, #4]
 810c61c:	4a05      	ldr	r2, [pc, #20]	; (810c634 <_ZN5IOBusD1Ev+0x20>)
 810c61e:	687b      	ldr	r3, [r7, #4]
 810c620:	601a      	str	r2, [r3, #0]
 810c622:	687b      	ldr	r3, [r7, #4]
 810c624:	4618      	mov	r0, r3
 810c626:	f7fe ff3b 	bl	810b4a0 <_ZN10MessageBusD1Ev>
 810c62a:	687b      	ldr	r3, [r7, #4]
 810c62c:	4618      	mov	r0, r3
 810c62e:	3708      	adds	r7, #8
 810c630:	46bd      	mov	sp, r7
 810c632:	bd80      	pop	{r7, pc}
 810c634:	08110a70 	.word	0x08110a70
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ebbc <_ZN5IOBusD0Ev>:
 810ebbc:	b580      	push	{r7, lr}
 810ebbe:	b082      	sub	sp, #8
 810ebc0:	af00      	add	r7, sp, #0
 810ebc2:	6078      	str	r0, [r7, #4]
 810ebc4:	6878      	ldr	r0, [r7, #4]
 810ebc6:	f7ff ffe7 	bl	810eb98 <_ZN5IOBusD1Ev>
 810ebca:	f644 0114 	movw	r1, #18452	; 0x4814
 810ebce:	6878      	ldr	r0, [r7, #4]
 810ebd0:	f001 ff66 	bl	8110aa0 <_ZdlPvj>
 810ebd4:	687b      	ldr	r3, [r7, #4]
 810ebd6:	4618      	mov	r0, r3
 810ebd8:	3708      	adds	r7, #8
 810ebda:	46bd      	mov	sp, r7
 810ebdc:	bd80      	pop	{r7, pc}
=======
0810c638 <_ZN5IOBusD0Ev>:
 810c638:	b580      	push	{r7, lr}
 810c63a:	b082      	sub	sp, #8
 810c63c:	af00      	add	r7, sp, #0
 810c63e:	6078      	str	r0, [r7, #4]
 810c640:	6878      	ldr	r0, [r7, #4]
 810c642:	f7ff ffe7 	bl	810c614 <_ZN5IOBusD1Ev>
 810c646:	f644 0114 	movw	r1, #18452	; 0x4814
 810c64a:	6878      	ldr	r0, [r7, #4]
 810c64c:	f001 fc0f 	bl	810de6e <_ZdlPvj>
 810c650:	687b      	ldr	r3, [r7, #4]
 810c652:	4618      	mov	r0, r3
 810c654:	3708      	adds	r7, #8
 810c656:	46bd      	mov	sp, r7
 810c658:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ebde <_ZNKSt9type_info4nameEv>:
=======
0810c65a <_ZNKSt9type_info4nameEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
<<<<<<< HEAD
 810ebde:	b480      	push	{r7}
 810ebe0:	b083      	sub	sp, #12
 810ebe2:	af00      	add	r7, sp, #0
 810ebe4:	6078      	str	r0, [r7, #4]
=======
 810c65a:	b480      	push	{r7}
 810c65c:	b083      	sub	sp, #12
 810c65e:	af00      	add	r7, sp, #0
 810c660:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    { return __name[0] == '*' ? __name + 1 : __name; }
<<<<<<< HEAD
 810ebe6:	687b      	ldr	r3, [r7, #4]
 810ebe8:	685b      	ldr	r3, [r3, #4]
 810ebea:	781b      	ldrb	r3, [r3, #0]
 810ebec:	2b2a      	cmp	r3, #42	; 0x2a
 810ebee:	d103      	bne.n	810ebf8 <_ZNKSt9type_info4nameEv+0x1a>
 810ebf0:	687b      	ldr	r3, [r7, #4]
 810ebf2:	685b      	ldr	r3, [r3, #4]
 810ebf4:	3301      	adds	r3, #1
 810ebf6:	e001      	b.n	810ebfc <_ZNKSt9type_info4nameEv+0x1e>
 810ebf8:	687b      	ldr	r3, [r7, #4]
 810ebfa:	685b      	ldr	r3, [r3, #4]
 810ebfc:	4618      	mov	r0, r3
 810ebfe:	370c      	adds	r7, #12
 810ec00:	46bd      	mov	sp, r7
 810ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ec06:	4770      	bx	lr
=======
 810c662:	687b      	ldr	r3, [r7, #4]
 810c664:	685b      	ldr	r3, [r3, #4]
 810c666:	781b      	ldrb	r3, [r3, #0]
 810c668:	2b2a      	cmp	r3, #42	; 0x2a
 810c66a:	d103      	bne.n	810c674 <_ZNKSt9type_info4nameEv+0x1a>
 810c66c:	687b      	ldr	r3, [r7, #4]
 810c66e:	685b      	ldr	r3, [r3, #4]
 810c670:	3301      	adds	r3, #1
 810c672:	e001      	b.n	810c678 <_ZNKSt9type_info4nameEv+0x1e>
 810c674:	687b      	ldr	r3, [r7, #4]
 810c676:	685b      	ldr	r3, [r3, #4]
 810c678:	4618      	mov	r0, r3
 810c67a:	370c      	adds	r7, #12
 810c67c:	46bd      	mov	sp, r7
 810c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c682:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ec08 <_ZNKSt9type_info9hash_codeEv>:
=======
0810c684 <_ZNKSt9type_info9hash_codeEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
<<<<<<< HEAD
 810ec08:	b590      	push	{r4, r7, lr}
 810ec0a:	b083      	sub	sp, #12
 810ec0c:	af00      	add	r7, sp, #0
 810ec0e:	6078      	str	r0, [r7, #4]
=======
 810c684:	b590      	push	{r4, r7, lr}
 810c686:	b083      	sub	sp, #12
 810c688:	af00      	add	r7, sp, #0
 810c68a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
<<<<<<< HEAD
 810ec10:	6878      	ldr	r0, [r7, #4]
 810ec12:	f7ff ffe4 	bl	810ebde <_ZNKSt9type_info4nameEv>
 810ec16:	4604      	mov	r4, r0
 810ec18:	6878      	ldr	r0, [r7, #4]
 810ec1a:	f7ff ffe0 	bl	810ebde <_ZNKSt9type_info4nameEv>
 810ec1e:	4603      	mov	r3, r0
 810ec20:	4618      	mov	r0, r3
 810ec22:	f7f1 fb67 	bl	81002f4 <strlen>
 810ec26:	4603      	mov	r3, r0
 810ec28:	4a04      	ldr	r2, [pc, #16]	; (810ec3c <_ZNKSt9type_info9hash_codeEv+0x34>)
 810ec2a:	4619      	mov	r1, r3
 810ec2c:	4620      	mov	r0, r4
 810ec2e:	f001 ff49 	bl	8110ac4 <_ZSt11_Hash_bytesPKvjj>
 810ec32:	4603      	mov	r3, r0
=======
 810c68c:	6878      	ldr	r0, [r7, #4]
 810c68e:	f7ff ffe4 	bl	810c65a <_ZNKSt9type_info4nameEv>
 810c692:	4604      	mov	r4, r0
 810c694:	6878      	ldr	r0, [r7, #4]
 810c696:	f7ff ffe0 	bl	810c65a <_ZNKSt9type_info4nameEv>
 810c69a:	4603      	mov	r3, r0
 810c69c:	4618      	mov	r0, r3
 810c69e:	f7f3 fe29 	bl	81002f4 <strlen>
 810c6a2:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			 static_cast<size_t>(0xc70f6907UL));
<<<<<<< HEAD
=======
 810c6a4:	4a04      	ldr	r2, [pc, #16]	; (810c6b8 <_ZNKSt9type_info9hash_codeEv+0x34>)
 810c6a6:	4619      	mov	r1, r3
 810c6a8:	4620      	mov	r0, r4
 810c6aa:	f001 fbe3 	bl	810de74 <_ZSt11_Hash_bytesPKvjj>
 810c6ae:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
<<<<<<< HEAD
 810ec34:	4618      	mov	r0, r3
 810ec36:	370c      	adds	r7, #12
 810ec38:	46bd      	mov	sp, r7
 810ec3a:	bd90      	pop	{r4, r7, pc}
 810ec3c:	c70f6907 	.word	0xc70f6907
=======
 810c6b0:	4618      	mov	r0, r3
 810c6b2:	370c      	adds	r7, #12
 810c6b4:	46bd      	mov	sp, r7
 810c6b6:	bd90      	pop	{r4, r7, pc}
 810c6b8:	c70f6907 	.word	0xc70f6907
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ec40 <_ZN10MessageBus6defineI10PingPacketEEbh>:
=======
0810c6bc <_ZN10MessageBus6defineI10PingPacketEEbh>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
<<<<<<< HEAD
 810ec40:	b580      	push	{r7, lr}
 810ec42:	b086      	sub	sp, #24
 810ec44:	af00      	add	r7, sp, #0
 810ec46:	6078      	str	r0, [r7, #4]
 810ec48:	460b      	mov	r3, r1
 810ec4a:	70fb      	strb	r3, [r7, #3]
=======
 810c6bc:	b580      	push	{r7, lr}
 810c6be:	b086      	sub	sp, #24
 810c6c0:	af00      	add	r7, sp, #0
 810c6c2:	6078      	str	r0, [r7, #4]
 810c6c4:	460b      	mov	r3, r1
 810c6c6:	70fb      	strb	r3, [r7, #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t struct_size = sizeof(T);
<<<<<<< HEAD
 810ec4c:	2308      	movs	r3, #8
 810ec4e:	613b      	str	r3, [r7, #16]
=======
 810c6c8:	2308      	movs	r3, #8
 810c6ca:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t hash = typeid(T).hash_code();
<<<<<<< HEAD
 810ec50:	4829      	ldr	r0, [pc, #164]	; (810ecf8 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 810ec52:	f7ff ffd9 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810ec56:	60f8      	str	r0, [r7, #12]
=======
 810c6cc:	4829      	ldr	r0, [pc, #164]	; (810c774 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 810c6ce:	f7ff ffd9 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c6d2:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	uint32_t insertion_point = hash % 256;
<<<<<<< HEAD
 810ec58:	68fb      	ldr	r3, [r7, #12]
 810ec5a:	b2db      	uxtb	r3, r3
 810ec5c:	617b      	str	r3, [r7, #20]
=======
 810c6d4:	68fb      	ldr	r3, [r7, #12]
 810c6d6:	b2db      	uxtb	r3, r3
 810c6d8:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
<<<<<<< HEAD
 810ec5e:	78fb      	ldrb	r3, [r7, #3]
 810ec60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ec64:	687a      	ldr	r2, [r7, #4]
 810ec66:	00db      	lsls	r3, r3, #3
 810ec68:	4413      	add	r3, r2
 810ec6a:	689b      	ldr	r3, [r3, #8]
 810ec6c:	2b00      	cmp	r3, #0
 810ec6e:	d001      	beq.n	810ec74 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
=======
 810c6da:	78fb      	ldrb	r3, [r7, #3]
 810c6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c6e0:	687a      	ldr	r2, [r7, #4]
 810c6e2:	00db      	lsls	r3, r3, #3
 810c6e4:	4413      	add	r3, r2
 810c6e6:	689b      	ldr	r3, [r3, #8]
 810c6e8:	2b00      	cmp	r3, #0
 810c6ea:	d001      	beq.n	810c6f0 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return false; // Packet ID already in use
<<<<<<< HEAD
 810ec70:	2300      	movs	r3, #0
 810ec72:	e03c      	b.n	810ecee <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
=======
 810c6ec:	2300      	movs	r3, #0
 810c6ee:	e03c      	b.n	810c76a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	if(struct_size > max_packet_size) {
<<<<<<< HEAD
 810ec74:	693b      	ldr	r3, [r7, #16]
 810ec76:	2bff      	cmp	r3, #255	; 0xff
 810ec78:	d901      	bls.n	810ec7e <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
=======
 810c6f0:	693b      	ldr	r3, [r7, #16]
 810c6f2:	2bff      	cmp	r3, #255	; 0xff
 810c6f4:	d901      	bls.n	810c6fa <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return false; // Packet size too large
<<<<<<< HEAD
 810ec7a:	2300      	movs	r3, #0
 810ec7c:	e037      	b.n	810ecee <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
=======
 810c6f6:	2300      	movs	r3, #0
 810c6f8:	e037      	b.n	810c76a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	while(definitions_by_type[insertion_point] != nullptr) {
<<<<<<< HEAD
 810ec7e:	687a      	ldr	r2, [r7, #4]
 810ec80:	697b      	ldr	r3, [r7, #20]
 810ec82:	3380      	adds	r3, #128	; 0x80
 810ec84:	009b      	lsls	r3, r3, #2
 810ec86:	4413      	add	r3, r2
 810ec88:	685b      	ldr	r3, [r3, #4]
 810ec8a:	2b00      	cmp	r3, #0
 810ec8c:	d015      	beq.n	810ecba <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
=======
 810c6fa:	687a      	ldr	r2, [r7, #4]
 810c6fc:	697b      	ldr	r3, [r7, #20]
 810c6fe:	3380      	adds	r3, #128	; 0x80
 810c700:	009b      	lsls	r3, r3, #2
 810c702:	4413      	add	r3, r2
 810c704:	685b      	ldr	r3, [r3, #4]
 810c706:	2b00      	cmp	r3, #0
 810c708:	d015      	beq.n	810c736 <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if(definitions_by_type[insertion_point]->hash == hash) {
<<<<<<< HEAD
 810ec8e:	687a      	ldr	r2, [r7, #4]
 810ec90:	697b      	ldr	r3, [r7, #20]
 810ec92:	3380      	adds	r3, #128	; 0x80
 810ec94:	009b      	lsls	r3, r3, #2
 810ec96:	4413      	add	r3, r2
 810ec98:	685b      	ldr	r3, [r3, #4]
 810ec9a:	685b      	ldr	r3, [r3, #4]
 810ec9c:	68fa      	ldr	r2, [r7, #12]
 810ec9e:	429a      	cmp	r2, r3
 810eca0:	d101      	bne.n	810eca6 <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
=======
 810c70a:	687a      	ldr	r2, [r7, #4]
 810c70c:	697b      	ldr	r3, [r7, #20]
 810c70e:	3380      	adds	r3, #128	; 0x80
 810c710:	009b      	lsls	r3, r3, #2
 810c712:	4413      	add	r3, r2
 810c714:	685b      	ldr	r3, [r3, #4]
 810c716:	685b      	ldr	r3, [r3, #4]
 810c718:	68fa      	ldr	r2, [r7, #12]
 810c71a:	429a      	cmp	r2, r3
 810c71c:	d101      	bne.n	810c722 <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			return false; // Packet type already defined
<<<<<<< HEAD
 810eca2:	2300      	movs	r3, #0
 810eca4:	e023      	b.n	810ecee <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
=======
 810c71e:	2300      	movs	r3, #0
 810c720:	e023      	b.n	810c76a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		insertion_point++;
<<<<<<< HEAD
 810eca6:	697b      	ldr	r3, [r7, #20]
 810eca8:	3301      	adds	r3, #1
 810ecaa:	617b      	str	r3, [r7, #20]
=======
 810c722:	697b      	ldr	r3, [r7, #20]
 810c724:	3301      	adds	r3, #1
 810c726:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if(insertion_point == 256) {
<<<<<<< HEAD
 810ecac:	697b      	ldr	r3, [r7, #20]
 810ecae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ecb2:	d1e4      	bne.n	810ec7e <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
=======
 810c728:	697b      	ldr	r3, [r7, #20]
 810c72a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c72e:	d1e4      	bne.n	810c6fa <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 810c730:	2300      	movs	r3, #0
 810c732:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810c734:	e7e1      	b.n	810c6fa <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810c736:	78fb      	ldrb	r3, [r7, #3]
 810c738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c73c:	00db      	lsls	r3, r3, #3
 810c73e:	687a      	ldr	r2, [r7, #4]
 810c740:	4413      	add	r3, r2
 810c742:	3304      	adds	r3, #4
 810c744:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 810c746:	68bb      	ldr	r3, [r7, #8]
 810c748:	78fa      	ldrb	r2, [r7, #3]
 810c74a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810c74c:	693b      	ldr	r3, [r7, #16]
 810c74e:	b2da      	uxtb	r2, r3
 810c750:	68bb      	ldr	r3, [r7, #8]
 810c752:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810c754:	68bb      	ldr	r3, [r7, #8]
 810c756:	68fa      	ldr	r2, [r7, #12]
 810c758:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 810c75a:	687a      	ldr	r2, [r7, #4]
 810c75c:	697b      	ldr	r3, [r7, #20]
 810c75e:	3380      	adds	r3, #128	; 0x80
 810c760:	009b      	lsls	r3, r3, #2
 810c762:	4413      	add	r3, r2
 810c764:	68ba      	ldr	r2, [r7, #8]
 810c766:	605a      	str	r2, [r3, #4]

	return true;
 810c768:	2301      	movs	r3, #1
}
 810c76a:	4618      	mov	r0, r3
 810c76c:	3718      	adds	r7, #24
 810c76e:	46bd      	mov	sp, r7
 810c770:	bd80      	pop	{r7, pc}
 810c772:	bf00      	nop
 810c774:	08110cec 	.word	0x08110cec

0810c778 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810c778:	b580      	push	{r7, lr}
 810c77a:	b086      	sub	sp, #24
 810c77c:	af00      	add	r7, sp, #0
 810c77e:	6078      	str	r0, [r7, #4]
 810c780:	460b      	mov	r3, r1
 810c782:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810c784:	2308      	movs	r3, #8
 810c786:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810c788:	4829      	ldr	r0, [pc, #164]	; (810c830 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 810c78a:	f7ff ff7b 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c78e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810c790:	68fb      	ldr	r3, [r7, #12]
 810c792:	b2db      	uxtb	r3, r3
 810c794:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810c796:	78fb      	ldrb	r3, [r7, #3]
 810c798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c79c:	687a      	ldr	r2, [r7, #4]
 810c79e:	00db      	lsls	r3, r3, #3
 810c7a0:	4413      	add	r3, r2
 810c7a2:	689b      	ldr	r3, [r3, #8]
 810c7a4:	2b00      	cmp	r3, #0
 810c7a6:	d001      	beq.n	810c7ac <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 810c7a8:	2300      	movs	r3, #0
 810c7aa:	e03c      	b.n	810c826 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810c7ac:	693b      	ldr	r3, [r7, #16]
 810c7ae:	2bff      	cmp	r3, #255	; 0xff
 810c7b0:	d901      	bls.n	810c7b6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 810c7b2:	2300      	movs	r3, #0
 810c7b4:	e037      	b.n	810c826 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810c7b6:	687a      	ldr	r2, [r7, #4]
 810c7b8:	697b      	ldr	r3, [r7, #20]
 810c7ba:	3380      	adds	r3, #128	; 0x80
 810c7bc:	009b      	lsls	r3, r3, #2
 810c7be:	4413      	add	r3, r2
 810c7c0:	685b      	ldr	r3, [r3, #4]
 810c7c2:	2b00      	cmp	r3, #0
 810c7c4:	d015      	beq.n	810c7f2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c7c6:	687a      	ldr	r2, [r7, #4]
 810c7c8:	697b      	ldr	r3, [r7, #20]
 810c7ca:	3380      	adds	r3, #128	; 0x80
 810c7cc:	009b      	lsls	r3, r3, #2
 810c7ce:	4413      	add	r3, r2
 810c7d0:	685b      	ldr	r3, [r3, #4]
 810c7d2:	685b      	ldr	r3, [r3, #4]
 810c7d4:	68fa      	ldr	r2, [r7, #12]
 810c7d6:	429a      	cmp	r2, r3
 810c7d8:	d101      	bne.n	810c7de <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 810c7da:	2300      	movs	r3, #0
 810c7dc:	e023      	b.n	810c826 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 810c7de:	697b      	ldr	r3, [r7, #20]
 810c7e0:	3301      	adds	r3, #1
 810c7e2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810c7e4:	697b      	ldr	r3, [r7, #20]
 810c7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c7ea:	d1e4      	bne.n	810c7b6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 810c7ec:	2300      	movs	r3, #0
 810c7ee:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810c7f0:	e7e1      	b.n	810c7b6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810c7f2:	78fb      	ldrb	r3, [r7, #3]
 810c7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c7f8:	00db      	lsls	r3, r3, #3
 810c7fa:	687a      	ldr	r2, [r7, #4]
 810c7fc:	4413      	add	r3, r2
 810c7fe:	3304      	adds	r3, #4
 810c800:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810c802:	68bb      	ldr	r3, [r7, #8]
 810c804:	78fa      	ldrb	r2, [r7, #3]
 810c806:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810c808:	693b      	ldr	r3, [r7, #16]
 810c80a:	b2da      	uxtb	r2, r3
 810c80c:	68bb      	ldr	r3, [r7, #8]
 810c80e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810c810:	68bb      	ldr	r3, [r7, #8]
 810c812:	68fa      	ldr	r2, [r7, #12]
 810c814:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810c816:	687a      	ldr	r2, [r7, #4]
 810c818:	697b      	ldr	r3, [r7, #20]
 810c81a:	3380      	adds	r3, #128	; 0x80
 810c81c:	009b      	lsls	r3, r3, #2
 810c81e:	4413      	add	r3, r2
 810c820:	68ba      	ldr	r2, [r7, #8]
 810c822:	605a      	str	r2, [r3, #4]
	return true;
 810c824:	2301      	movs	r3, #1
}
 810c826:	4618      	mov	r0, r3
 810c828:	3718      	adds	r7, #24
 810c82a:	46bd      	mov	sp, r7
 810c82c:	bd80      	pop	{r7, pc}
 810c82e:	bf00      	nop
 810c830:	08110cd4 	.word	0x08110cd4

0810c834 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810c834:	b580      	push	{r7, lr}
 810c836:	b086      	sub	sp, #24
 810c838:	af00      	add	r7, sp, #0
 810c83a:	6078      	str	r0, [r7, #4]
 810c83c:	460b      	mov	r3, r1
 810c83e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810c840:	2308      	movs	r3, #8
 810c842:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810c844:	4829      	ldr	r0, [pc, #164]	; (810c8ec <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 810c846:	f7ff ff1d 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c84a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810c84c:	68fb      	ldr	r3, [r7, #12]
 810c84e:	b2db      	uxtb	r3, r3
 810c850:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810c852:	78fb      	ldrb	r3, [r7, #3]
 810c854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c858:	687a      	ldr	r2, [r7, #4]
 810c85a:	00db      	lsls	r3, r3, #3
 810c85c:	4413      	add	r3, r2
 810c85e:	689b      	ldr	r3, [r3, #8]
 810c860:	2b00      	cmp	r3, #0
 810c862:	d001      	beq.n	810c868 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 810c864:	2300      	movs	r3, #0
 810c866:	e03c      	b.n	810c8e2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810c868:	693b      	ldr	r3, [r7, #16]
 810c86a:	2bff      	cmp	r3, #255	; 0xff
 810c86c:	d901      	bls.n	810c872 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 810c86e:	2300      	movs	r3, #0
 810c870:	e037      	b.n	810c8e2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810c872:	687a      	ldr	r2, [r7, #4]
 810c874:	697b      	ldr	r3, [r7, #20]
 810c876:	3380      	adds	r3, #128	; 0x80
 810c878:	009b      	lsls	r3, r3, #2
 810c87a:	4413      	add	r3, r2
 810c87c:	685b      	ldr	r3, [r3, #4]
 810c87e:	2b00      	cmp	r3, #0
 810c880:	d015      	beq.n	810c8ae <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c882:	687a      	ldr	r2, [r7, #4]
 810c884:	697b      	ldr	r3, [r7, #20]
 810c886:	3380      	adds	r3, #128	; 0x80
 810c888:	009b      	lsls	r3, r3, #2
 810c88a:	4413      	add	r3, r2
 810c88c:	685b      	ldr	r3, [r3, #4]
 810c88e:	685b      	ldr	r3, [r3, #4]
 810c890:	68fa      	ldr	r2, [r7, #12]
 810c892:	429a      	cmp	r2, r3
 810c894:	d101      	bne.n	810c89a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 810c896:	2300      	movs	r3, #0
 810c898:	e023      	b.n	810c8e2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 810c89a:	697b      	ldr	r3, [r7, #20]
 810c89c:	3301      	adds	r3, #1
 810c89e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810c8a0:	697b      	ldr	r3, [r7, #20]
 810c8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c8a6:	d1e4      	bne.n	810c872 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 810c8a8:	2300      	movs	r3, #0
 810c8aa:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810c8ac:	e7e1      	b.n	810c872 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810c8ae:	78fb      	ldrb	r3, [r7, #3]
 810c8b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c8b4:	00db      	lsls	r3, r3, #3
 810c8b6:	687a      	ldr	r2, [r7, #4]
 810c8b8:	4413      	add	r3, r2
 810c8ba:	3304      	adds	r3, #4
 810c8bc:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810c8be:	68bb      	ldr	r3, [r7, #8]
 810c8c0:	78fa      	ldrb	r2, [r7, #3]
 810c8c2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810c8c4:	693b      	ldr	r3, [r7, #16]
 810c8c6:	b2da      	uxtb	r2, r3
 810c8c8:	68bb      	ldr	r3, [r7, #8]
 810c8ca:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810c8cc:	68bb      	ldr	r3, [r7, #8]
 810c8ce:	68fa      	ldr	r2, [r7, #12]
 810c8d0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810c8d2:	687a      	ldr	r2, [r7, #4]
 810c8d4:	697b      	ldr	r3, [r7, #20]
 810c8d6:	3380      	adds	r3, #128	; 0x80
 810c8d8:	009b      	lsls	r3, r3, #2
 810c8da:	4413      	add	r3, r2
 810c8dc:	68ba      	ldr	r2, [r7, #8]
 810c8de:	605a      	str	r2, [r3, #4]
	return true;
 810c8e0:	2301      	movs	r3, #1
}
 810c8e2:	4618      	mov	r0, r3
 810c8e4:	3718      	adds	r7, #24
 810c8e6:	46bd      	mov	sp, r7
 810c8e8:	bd80      	pop	{r7, pc}
 810c8ea:	bf00      	nop
 810c8ec:	08110cb8 	.word	0x08110cb8

0810c8f0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810c8f0:	b580      	push	{r7, lr}
 810c8f2:	b086      	sub	sp, #24
 810c8f4:	af00      	add	r7, sp, #0
 810c8f6:	6078      	str	r0, [r7, #4]
 810c8f8:	460b      	mov	r3, r1
 810c8fa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810c8fc:	2305      	movs	r3, #5
 810c8fe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810c900:	4829      	ldr	r0, [pc, #164]	; (810c9a8 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 810c902:	f7ff febf 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c906:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810c908:	68fb      	ldr	r3, [r7, #12]
 810c90a:	b2db      	uxtb	r3, r3
 810c90c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810c90e:	78fb      	ldrb	r3, [r7, #3]
 810c910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c914:	687a      	ldr	r2, [r7, #4]
 810c916:	00db      	lsls	r3, r3, #3
 810c918:	4413      	add	r3, r2
 810c91a:	689b      	ldr	r3, [r3, #8]
 810c91c:	2b00      	cmp	r3, #0
 810c91e:	d001      	beq.n	810c924 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 810c920:	2300      	movs	r3, #0
 810c922:	e03c      	b.n	810c99e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810c924:	693b      	ldr	r3, [r7, #16]
 810c926:	2bff      	cmp	r3, #255	; 0xff
 810c928:	d901      	bls.n	810c92e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 810c92a:	2300      	movs	r3, #0
 810c92c:	e037      	b.n	810c99e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810c92e:	687a      	ldr	r2, [r7, #4]
 810c930:	697b      	ldr	r3, [r7, #20]
 810c932:	3380      	adds	r3, #128	; 0x80
 810c934:	009b      	lsls	r3, r3, #2
 810c936:	4413      	add	r3, r2
 810c938:	685b      	ldr	r3, [r3, #4]
 810c93a:	2b00      	cmp	r3, #0
 810c93c:	d015      	beq.n	810c96a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c93e:	687a      	ldr	r2, [r7, #4]
 810c940:	697b      	ldr	r3, [r7, #20]
 810c942:	3380      	adds	r3, #128	; 0x80
 810c944:	009b      	lsls	r3, r3, #2
 810c946:	4413      	add	r3, r2
 810c948:	685b      	ldr	r3, [r3, #4]
 810c94a:	685b      	ldr	r3, [r3, #4]
 810c94c:	68fa      	ldr	r2, [r7, #12]
 810c94e:	429a      	cmp	r2, r3
 810c950:	d101      	bne.n	810c956 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 810c952:	2300      	movs	r3, #0
 810c954:	e023      	b.n	810c99e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 810c956:	697b      	ldr	r3, [r7, #20]
 810c958:	3301      	adds	r3, #1
 810c95a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810c95c:	697b      	ldr	r3, [r7, #20]
 810c95e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c962:	d1e4      	bne.n	810c92e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			insertion_point = 0;
<<<<<<< HEAD
 810ecb4:	2300      	movs	r3, #0
 810ecb6:	617b      	str	r3, [r7, #20]
=======
 810c964:	2300      	movs	r3, #0
 810c966:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(definitions_by_type[insertion_point] != nullptr) {
<<<<<<< HEAD
 810ecb8:	e7e1      	b.n	810ec7e <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}
=======
 810c968:	e7e1      	b.n	810c92e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810c96a:	78fb      	ldrb	r3, [r7, #3]
 810c96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c970:	00db      	lsls	r3, r3, #3
 810c972:	687a      	ldr	r2, [r7, #4]
 810c974:	4413      	add	r3, r2
 810c976:	3304      	adds	r3, #4
 810c978:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810c97a:	68bb      	ldr	r3, [r7, #8]
 810c97c:	78fa      	ldrb	r2, [r7, #3]
 810c97e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810c980:	693b      	ldr	r3, [r7, #16]
 810c982:	b2da      	uxtb	r2, r3
 810c984:	68bb      	ldr	r3, [r7, #8]
 810c986:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810c988:	68bb      	ldr	r3, [r7, #8]
 810c98a:	68fa      	ldr	r2, [r7, #12]
 810c98c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810c98e:	687a      	ldr	r2, [r7, #4]
 810c990:	697b      	ldr	r3, [r7, #20]
 810c992:	3380      	adds	r3, #128	; 0x80
 810c994:	009b      	lsls	r3, r3, #2
 810c996:	4413      	add	r3, r2
 810c998:	68ba      	ldr	r2, [r7, #8]
 810c99a:	605a      	str	r2, [r3, #4]
	return true;
 810c99c:	2301      	movs	r3, #1
}
 810c99e:	4618      	mov	r0, r3
 810c9a0:	3718      	adds	r7, #24
 810c9a2:	46bd      	mov	sp, r7
 810c9a4:	bd80      	pop	{r7, pc}
 810c9a6:	bf00      	nop
 810c9a8:	08110c9c 	.word	0x08110c9c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ecba:	78fb      	ldrb	r3, [r7, #3]
 810ecbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ecc0:	00db      	lsls	r3, r3, #3
 810ecc2:	687a      	ldr	r2, [r7, #4]
 810ecc4:	4413      	add	r3, r2
 810ecc6:	3304      	adds	r3, #4
 810ecc8:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 810ecca:	68bb      	ldr	r3, [r7, #8]
 810eccc:	78fa      	ldrb	r2, [r7, #3]
 810ecce:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ecd0:	693b      	ldr	r3, [r7, #16]
 810ecd2:	b2da      	uxtb	r2, r3
 810ecd4:	68bb      	ldr	r3, [r7, #8]
 810ecd6:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ecd8:	68bb      	ldr	r3, [r7, #8]
 810ecda:	68fa      	ldr	r2, [r7, #12]
 810ecdc:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 810ecde:	687a      	ldr	r2, [r7, #4]
 810ece0:	697b      	ldr	r3, [r7, #20]
 810ece2:	3380      	adds	r3, #128	; 0x80
 810ece4:	009b      	lsls	r3, r3, #2
 810ece6:	4413      	add	r3, r2
 810ece8:	68ba      	ldr	r2, [r7, #8]
 810ecea:	605a      	str	r2, [r3, #4]

	return true;
 810ecec:	2301      	movs	r3, #1
}
 810ecee:	4618      	mov	r0, r3
 810ecf0:	3718      	adds	r7, #24
 810ecf2:	46bd      	mov	sp, r7
 810ecf4:	bd80      	pop	{r7, pc}
 810ecf6:	bf00      	nop
 810ecf8:	08114cf8 	.word	0x08114cf8

0810ecfc <_ZN10MessageBus6defineI13RequestPacketEEbh>:
=======
0810c9ac <_ZN10MessageBus6defineI10DataPacketEEbh>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
template<typename T> bool MessageBus::define(uint8_t identifier) {
<<<<<<< HEAD
 810ecfc:	b580      	push	{r7, lr}
 810ecfe:	b086      	sub	sp, #24
 810ed00:	af00      	add	r7, sp, #0
 810ed02:	6078      	str	r0, [r7, #4]
 810ed04:	460b      	mov	r3, r1
 810ed06:	70fb      	strb	r3, [r7, #3]
=======
 810c9ac:	b580      	push	{r7, lr}
 810c9ae:	b086      	sub	sp, #24
 810c9b0:	af00      	add	r7, sp, #0
 810c9b2:	6078      	str	r0, [r7, #4]
 810c9b4:	460b      	mov	r3, r1
 810c9b6:	70fb      	strb	r3, [r7, #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t struct_size = sizeof(T);
<<<<<<< HEAD
 810ed08:	2308      	movs	r3, #8
 810ed0a:	613b      	str	r3, [r7, #16]
=======
 810c9b8:	2304      	movs	r3, #4
 810c9ba:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t hash = typeid(T).hash_code();
<<<<<<< HEAD
 810ed0c:	4829      	ldr	r0, [pc, #164]	; (810edb4 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 810ed0e:	f7ff ff7b 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810ed12:	60f8      	str	r0, [r7, #12]
=======
 810c9bc:	4829      	ldr	r0, [pc, #164]	; (810ca64 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 810c9be:	f7ff fe61 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810c9c2:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uint32_t insertion_point = hash % 256;
<<<<<<< HEAD
 810ed14:	68fb      	ldr	r3, [r7, #12]
 810ed16:	b2db      	uxtb	r3, r3
 810ed18:	617b      	str	r3, [r7, #20]
=======
 810c9c4:	68fb      	ldr	r3, [r7, #12]
 810c9c6:	b2db      	uxtb	r3, r3
 810c9c8:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
<<<<<<< HEAD
 810ed1a:	78fb      	ldrb	r3, [r7, #3]
 810ed1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ed20:	687a      	ldr	r2, [r7, #4]
 810ed22:	00db      	lsls	r3, r3, #3
 810ed24:	4413      	add	r3, r2
 810ed26:	689b      	ldr	r3, [r3, #8]
 810ed28:	2b00      	cmp	r3, #0
 810ed2a:	d001      	beq.n	810ed30 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
=======
 810c9ca:	78fb      	ldrb	r3, [r7, #3]
 810c9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c9d0:	687a      	ldr	r2, [r7, #4]
 810c9d2:	00db      	lsls	r3, r3, #3
 810c9d4:	4413      	add	r3, r2
 810c9d6:	689b      	ldr	r3, [r3, #8]
 810c9d8:	2b00      	cmp	r3, #0
 810c9da:	d001      	beq.n	810c9e0 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return false; // Packet ID already in use
<<<<<<< HEAD
 810ed2c:	2300      	movs	r3, #0
 810ed2e:	e03c      	b.n	810edaa <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
=======
 810c9dc:	2300      	movs	r3, #0
 810c9de:	e03c      	b.n	810ca5a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(struct_size > max_packet_size) {
<<<<<<< HEAD
 810ed30:	693b      	ldr	r3, [r7, #16]
 810ed32:	2bff      	cmp	r3, #255	; 0xff
 810ed34:	d901      	bls.n	810ed3a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
=======
 810c9e0:	693b      	ldr	r3, [r7, #16]
 810c9e2:	2bff      	cmp	r3, #255	; 0xff
 810c9e4:	d901      	bls.n	810c9ea <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return false; // Packet size too large
<<<<<<< HEAD
 810ed36:	2300      	movs	r3, #0
 810ed38:	e037      	b.n	810edaa <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
=======
 810c9e6:	2300      	movs	r3, #0
 810c9e8:	e037      	b.n	810ca5a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(definitions_by_type[insertion_point] != nullptr) {
<<<<<<< HEAD
 810ed3a:	687a      	ldr	r2, [r7, #4]
 810ed3c:	697b      	ldr	r3, [r7, #20]
 810ed3e:	3380      	adds	r3, #128	; 0x80
 810ed40:	009b      	lsls	r3, r3, #2
 810ed42:	4413      	add	r3, r2
 810ed44:	685b      	ldr	r3, [r3, #4]
 810ed46:	2b00      	cmp	r3, #0
 810ed48:	d015      	beq.n	810ed76 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ed4a:	687a      	ldr	r2, [r7, #4]
 810ed4c:	697b      	ldr	r3, [r7, #20]
 810ed4e:	3380      	adds	r3, #128	; 0x80
 810ed50:	009b      	lsls	r3, r3, #2
 810ed52:	4413      	add	r3, r2
 810ed54:	685b      	ldr	r3, [r3, #4]
 810ed56:	685b      	ldr	r3, [r3, #4]
 810ed58:	68fa      	ldr	r2, [r7, #12]
 810ed5a:	429a      	cmp	r2, r3
 810ed5c:	d101      	bne.n	810ed62 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 810ed5e:	2300      	movs	r3, #0
 810ed60:	e023      	b.n	810edaa <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 810ed62:	697b      	ldr	r3, [r7, #20]
 810ed64:	3301      	adds	r3, #1
 810ed66:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ed68:	697b      	ldr	r3, [r7, #20]
 810ed6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ed6e:	d1e4      	bne.n	810ed3a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
=======
 810c9ea:	687a      	ldr	r2, [r7, #4]
 810c9ec:	697b      	ldr	r3, [r7, #20]
 810c9ee:	3380      	adds	r3, #128	; 0x80
 810c9f0:	009b      	lsls	r3, r3, #2
 810c9f2:	4413      	add	r3, r2
 810c9f4:	685b      	ldr	r3, [r3, #4]
 810c9f6:	2b00      	cmp	r3, #0
 810c9f8:	d015      	beq.n	810ca26 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810c9fa:	687a      	ldr	r2, [r7, #4]
 810c9fc:	697b      	ldr	r3, [r7, #20]
 810c9fe:	3380      	adds	r3, #128	; 0x80
 810ca00:	009b      	lsls	r3, r3, #2
 810ca02:	4413      	add	r3, r2
 810ca04:	685b      	ldr	r3, [r3, #4]
 810ca06:	685b      	ldr	r3, [r3, #4]
 810ca08:	68fa      	ldr	r2, [r7, #12]
 810ca0a:	429a      	cmp	r2, r3
 810ca0c:	d101      	bne.n	810ca12 <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 810ca0e:	2300      	movs	r3, #0
 810ca10:	e023      	b.n	810ca5a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 810ca12:	697b      	ldr	r3, [r7, #20]
 810ca14:	3301      	adds	r3, #1
 810ca16:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ca18:	697b      	ldr	r3, [r7, #20]
 810ca1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ca1e:	d1e4      	bne.n	810c9ea <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			insertion_point = 0;
<<<<<<< HEAD
 810ed70:	2300      	movs	r3, #0
 810ed72:	617b      	str	r3, [r7, #20]
=======
 810ca20:	2300      	movs	r3, #0
 810ca22:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(definitions_by_type[insertion_point] != nullptr) {
<<<<<<< HEAD
 810ed74:	e7e1      	b.n	810ed3a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
=======
 810ca24:	e7e1      	b.n	810c9ea <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
<<<<<<< HEAD
 810ed76:	78fb      	ldrb	r3, [r7, #3]
 810ed78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ed7c:	00db      	lsls	r3, r3, #3
 810ed7e:	687a      	ldr	r2, [r7, #4]
 810ed80:	4413      	add	r3, r2
 810ed82:	3304      	adds	r3, #4
 810ed84:	60bb      	str	r3, [r7, #8]
=======
 810ca26:	78fb      	ldrb	r3, [r7, #3]
 810ca28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ca2c:	00db      	lsls	r3, r3, #3
 810ca2e:	687a      	ldr	r2, [r7, #4]
 810ca30:	4413      	add	r3, r2
 810ca32:	3304      	adds	r3, #4
 810ca34:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->id = identifier;
<<<<<<< HEAD
 810ed86:	68bb      	ldr	r3, [r7, #8]
 810ed88:	78fa      	ldrb	r2, [r7, #3]
 810ed8a:	701a      	strb	r2, [r3, #0]
=======
 810ca36:	68bb      	ldr	r3, [r7, #8]
 810ca38:	78fa      	ldrb	r2, [r7, #3]
 810ca3a:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->size = (uint8_t) struct_size;
<<<<<<< HEAD
 810ed8c:	693b      	ldr	r3, [r7, #16]
 810ed8e:	b2da      	uxtb	r2, r3
 810ed90:	68bb      	ldr	r3, [r7, #8]
 810ed92:	705a      	strb	r2, [r3, #1]
=======
 810ca3c:	693b      	ldr	r3, [r7, #16]
 810ca3e:	b2da      	uxtb	r2, r3
 810ca40:	68bb      	ldr	r3, [r7, #8]
 810ca42:	705a      	strb	r2, [r3, #1]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->hash = hash;
<<<<<<< HEAD
 810ed94:	68bb      	ldr	r3, [r7, #8]
 810ed96:	68fa      	ldr	r2, [r7, #12]
 810ed98:	605a      	str	r2, [r3, #4]
=======
 810ca44:	68bb      	ldr	r3, [r7, #8]
 810ca46:	68fa      	ldr	r2, [r7, #12]
 810ca48:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	definitions_by_type[insertion_point] = def;
<<<<<<< HEAD
 810ed9a:	687a      	ldr	r2, [r7, #4]
 810ed9c:	697b      	ldr	r3, [r7, #20]
 810ed9e:	3380      	adds	r3, #128	; 0x80
 810eda0:	009b      	lsls	r3, r3, #2
 810eda2:	4413      	add	r3, r2
 810eda4:	68ba      	ldr	r2, [r7, #8]
 810eda6:	605a      	str	r2, [r3, #4]
=======
 810ca4a:	687a      	ldr	r2, [r7, #4]
 810ca4c:	697b      	ldr	r3, [r7, #20]
 810ca4e:	3380      	adds	r3, #128	; 0x80
 810ca50:	009b      	lsls	r3, r3, #2
 810ca52:	4413      	add	r3, r2
 810ca54:	68ba      	ldr	r2, [r7, #8]
 810ca56:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	return true;
<<<<<<< HEAD
 810eda8:	2301      	movs	r3, #1
=======
 810ca58:	2301      	movs	r3, #1
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810edaa:	4618      	mov	r0, r3
 810edac:	3718      	adds	r7, #24
 810edae:	46bd      	mov	sp, r7
 810edb0:	bd80      	pop	{r7, pc}
 810edb2:	bf00      	nop
 810edb4:	08114ce0 	.word	0x08114ce0
=======
 810ca5a:	4618      	mov	r0, r3
 810ca5c:	3718      	adds	r7, #24
 810ca5e:	46bd      	mov	sp, r7
 810ca60:	bd80      	pop	{r7, pc}
 810ca62:	bf00      	nop
 810ca64:	08110c84 	.word	0x08110c84
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810edb8 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
=======
0810ca68 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
template<typename T> bool MessageBus::define(uint8_t identifier) {
<<<<<<< HEAD
 810edb8:	b580      	push	{r7, lr}
 810edba:	b086      	sub	sp, #24
 810edbc:	af00      	add	r7, sp, #0
 810edbe:	6078      	str	r0, [r7, #4]
 810edc0:	460b      	mov	r3, r1
 810edc2:	70fb      	strb	r3, [r7, #3]
=======
 810ca68:	b580      	push	{r7, lr}
 810ca6a:	b086      	sub	sp, #24
 810ca6c:	af00      	add	r7, sp, #0
 810ca6e:	6078      	str	r0, [r7, #4]
 810ca70:	460b      	mov	r3, r1
 810ca72:	70fb      	strb	r3, [r7, #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t struct_size = sizeof(T);
<<<<<<< HEAD
 810edc4:	2308      	movs	r3, #8
 810edc6:	613b      	str	r3, [r7, #16]
=======
 810ca74:	2301      	movs	r3, #1
 810ca76:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t hash = typeid(T).hash_code();
<<<<<<< HEAD
 810edc8:	4829      	ldr	r0, [pc, #164]	; (810ee70 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 810edca:	f7ff ff1d 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810edce:	60f8      	str	r0, [r7, #12]
=======
 810ca78:	4829      	ldr	r0, [pc, #164]	; (810cb20 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 810ca7a:	f7ff fe03 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810ca7e:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uint32_t insertion_point = hash % 256;
<<<<<<< HEAD
 810edd0:	68fb      	ldr	r3, [r7, #12]
 810edd2:	b2db      	uxtb	r3, r3
 810edd4:	617b      	str	r3, [r7, #20]
=======
 810ca80:	68fb      	ldr	r3, [r7, #12]
 810ca82:	b2db      	uxtb	r3, r3
 810ca84:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
<<<<<<< HEAD
 810edd6:	78fb      	ldrb	r3, [r7, #3]
 810edd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810eddc:	687a      	ldr	r2, [r7, #4]
 810edde:	00db      	lsls	r3, r3, #3
 810ede0:	4413      	add	r3, r2
 810ede2:	689b      	ldr	r3, [r3, #8]
 810ede4:	2b00      	cmp	r3, #0
 810ede6:	d001      	beq.n	810edec <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
=======
 810ca86:	78fb      	ldrb	r3, [r7, #3]
 810ca88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ca8c:	687a      	ldr	r2, [r7, #4]
 810ca8e:	00db      	lsls	r3, r3, #3
 810ca90:	4413      	add	r3, r2
 810ca92:	689b      	ldr	r3, [r3, #8]
 810ca94:	2b00      	cmp	r3, #0
 810ca96:	d001      	beq.n	810ca9c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return false; // Packet ID already in use
<<<<<<< HEAD
 810ede8:	2300      	movs	r3, #0
 810edea:	e03c      	b.n	810ee66 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
=======
 810ca98:	2300      	movs	r3, #0
 810ca9a:	e03c      	b.n	810cb16 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(struct_size > max_packet_size) {
<<<<<<< HEAD
 810edec:	693b      	ldr	r3, [r7, #16]
 810edee:	2bff      	cmp	r3, #255	; 0xff
 810edf0:	d901      	bls.n	810edf6 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
=======
 810ca9c:	693b      	ldr	r3, [r7, #16]
 810ca9e:	2bff      	cmp	r3, #255	; 0xff
 810caa0:	d901      	bls.n	810caa6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return false; // Packet size too large
<<<<<<< HEAD
 810edf2:	2300      	movs	r3, #0
 810edf4:	e037      	b.n	810ee66 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
=======
 810caa2:	2300      	movs	r3, #0
 810caa4:	e037      	b.n	810cb16 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(definitions_by_type[insertion_point] != nullptr) {
<<<<<<< HEAD
 810edf6:	687a      	ldr	r2, [r7, #4]
 810edf8:	697b      	ldr	r3, [r7, #20]
 810edfa:	3380      	adds	r3, #128	; 0x80
 810edfc:	009b      	lsls	r3, r3, #2
 810edfe:	4413      	add	r3, r2
 810ee00:	685b      	ldr	r3, [r3, #4]
 810ee02:	2b00      	cmp	r3, #0
 810ee04:	d015      	beq.n	810ee32 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ee06:	687a      	ldr	r2, [r7, #4]
 810ee08:	697b      	ldr	r3, [r7, #20]
 810ee0a:	3380      	adds	r3, #128	; 0x80
 810ee0c:	009b      	lsls	r3, r3, #2
 810ee0e:	4413      	add	r3, r2
 810ee10:	685b      	ldr	r3, [r3, #4]
 810ee12:	685b      	ldr	r3, [r3, #4]
 810ee14:	68fa      	ldr	r2, [r7, #12]
 810ee16:	429a      	cmp	r2, r3
 810ee18:	d101      	bne.n	810ee1e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 810ee1a:	2300      	movs	r3, #0
 810ee1c:	e023      	b.n	810ee66 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 810ee1e:	697b      	ldr	r3, [r7, #20]
 810ee20:	3301      	adds	r3, #1
 810ee22:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ee24:	697b      	ldr	r3, [r7, #20]
 810ee26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ee2a:	d1e4      	bne.n	810edf6 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
=======
 810caa6:	687a      	ldr	r2, [r7, #4]
 810caa8:	697b      	ldr	r3, [r7, #20]
 810caaa:	3380      	adds	r3, #128	; 0x80
 810caac:	009b      	lsls	r3, r3, #2
 810caae:	4413      	add	r3, r2
 810cab0:	685b      	ldr	r3, [r3, #4]
 810cab2:	2b00      	cmp	r3, #0
 810cab4:	d015      	beq.n	810cae2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cab6:	687a      	ldr	r2, [r7, #4]
 810cab8:	697b      	ldr	r3, [r7, #20]
 810caba:	3380      	adds	r3, #128	; 0x80
 810cabc:	009b      	lsls	r3, r3, #2
 810cabe:	4413      	add	r3, r2
 810cac0:	685b      	ldr	r3, [r3, #4]
 810cac2:	685b      	ldr	r3, [r3, #4]
 810cac4:	68fa      	ldr	r2, [r7, #12]
 810cac6:	429a      	cmp	r2, r3
 810cac8:	d101      	bne.n	810cace <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 810caca:	2300      	movs	r3, #0
 810cacc:	e023      	b.n	810cb16 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 810cace:	697b      	ldr	r3, [r7, #20]
 810cad0:	3301      	adds	r3, #1
 810cad2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cad4:	697b      	ldr	r3, [r7, #20]
 810cad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cada:	d1e4      	bne.n	810caa6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			insertion_point = 0;
<<<<<<< HEAD
 810ee2c:	2300      	movs	r3, #0
 810ee2e:	617b      	str	r3, [r7, #20]
=======
 810cadc:	2300      	movs	r3, #0
 810cade:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(definitions_by_type[insertion_point] != nullptr) {
<<<<<<< HEAD
 810ee30:	e7e1      	b.n	810edf6 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
=======
 810cae0:	e7e1      	b.n	810caa6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
<<<<<<< HEAD
 810ee32:	78fb      	ldrb	r3, [r7, #3]
 810ee34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ee38:	00db      	lsls	r3, r3, #3
 810ee3a:	687a      	ldr	r2, [r7, #4]
 810ee3c:	4413      	add	r3, r2
 810ee3e:	3304      	adds	r3, #4
 810ee40:	60bb      	str	r3, [r7, #8]
=======
 810cae2:	78fb      	ldrb	r3, [r7, #3]
 810cae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cae8:	00db      	lsls	r3, r3, #3
 810caea:	687a      	ldr	r2, [r7, #4]
 810caec:	4413      	add	r3, r2
 810caee:	3304      	adds	r3, #4
 810caf0:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->id = identifier;
<<<<<<< HEAD
 810ee42:	68bb      	ldr	r3, [r7, #8]
 810ee44:	78fa      	ldrb	r2, [r7, #3]
 810ee46:	701a      	strb	r2, [r3, #0]
=======
 810caf2:	68bb      	ldr	r3, [r7, #8]
 810caf4:	78fa      	ldrb	r2, [r7, #3]
 810caf6:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->size = (uint8_t) struct_size;
<<<<<<< HEAD
 810ee48:	693b      	ldr	r3, [r7, #16]
 810ee4a:	b2da      	uxtb	r2, r3
 810ee4c:	68bb      	ldr	r3, [r7, #8]
 810ee4e:	705a      	strb	r2, [r3, #1]
=======
 810caf8:	693b      	ldr	r3, [r7, #16]
 810cafa:	b2da      	uxtb	r2, r3
 810cafc:	68bb      	ldr	r3, [r7, #8]
 810cafe:	705a      	strb	r2, [r3, #1]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->hash = hash;
<<<<<<< HEAD
 810ee50:	68bb      	ldr	r3, [r7, #8]
 810ee52:	68fa      	ldr	r2, [r7, #12]
 810ee54:	605a      	str	r2, [r3, #4]
=======
 810cb00:	68bb      	ldr	r3, [r7, #8]
 810cb02:	68fa      	ldr	r2, [r7, #12]
 810cb04:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	definitions_by_type[insertion_point] = def;
<<<<<<< HEAD
 810ee56:	687a      	ldr	r2, [r7, #4]
 810ee58:	697b      	ldr	r3, [r7, #20]
 810ee5a:	3380      	adds	r3, #128	; 0x80
 810ee5c:	009b      	lsls	r3, r3, #2
 810ee5e:	4413      	add	r3, r2
 810ee60:	68ba      	ldr	r2, [r7, #8]
 810ee62:	605a      	str	r2, [r3, #4]
=======
 810cb06:	687a      	ldr	r2, [r7, #4]
 810cb08:	697b      	ldr	r3, [r7, #20]
 810cb0a:	3380      	adds	r3, #128	; 0x80
 810cb0c:	009b      	lsls	r3, r3, #2
 810cb0e:	4413      	add	r3, r2
 810cb10:	68ba      	ldr	r2, [r7, #8]
 810cb12:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	return true;
<<<<<<< HEAD
 810ee64:	2301      	movs	r3, #1
=======
 810cb14:	2301      	movs	r3, #1
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810ee66:	4618      	mov	r0, r3
 810ee68:	3718      	adds	r7, #24
 810ee6a:	46bd      	mov	sp, r7
 810ee6c:	bd80      	pop	{r7, pc}
 810ee6e:	bf00      	nop
 810ee70:	08114cc4 	.word	0x08114cc4
=======
 810cb16:	4618      	mov	r0, r3
 810cb18:	3718      	adds	r7, #24
 810cb1a:	46bd      	mov	sp, r7
 810cb1c:	bd80      	pop	{r7, pc}
 810cb1e:	bf00      	nop
 810cb20:	08110c6c 	.word	0x08110c6c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ee74 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
=======
0810cb24 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
template<typename T> bool MessageBus::define(uint8_t identifier) {
<<<<<<< HEAD
 810ee74:	b580      	push	{r7, lr}
 810ee76:	b086      	sub	sp, #24
 810ee78:	af00      	add	r7, sp, #0
 810ee7a:	6078      	str	r0, [r7, #4]
 810ee7c:	460b      	mov	r3, r1
 810ee7e:	70fb      	strb	r3, [r7, #3]
=======
 810cb24:	b580      	push	{r7, lr}
 810cb26:	b086      	sub	sp, #24
 810cb28:	af00      	add	r7, sp, #0
 810cb2a:	6078      	str	r0, [r7, #4]
 810cb2c:	460b      	mov	r3, r1
 810cb2e:	70fb      	strb	r3, [r7, #3]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t struct_size = sizeof(T);
<<<<<<< HEAD
 810ee80:	2305      	movs	r3, #5
 810ee82:	613b      	str	r3, [r7, #16]
=======
 810cb30:	2308      	movs	r3, #8
 810cb32:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t hash = typeid(T).hash_code();
<<<<<<< HEAD
 810ee84:	4829      	ldr	r0, [pc, #164]	; (810ef2c <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 810ee86:	f7ff febf 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810ee8a:	60f8      	str	r0, [r7, #12]
=======
 810cb34:	4829      	ldr	r0, [pc, #164]	; (810cbdc <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 810cb36:	f7ff fda5 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cb3a:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uint32_t insertion_point = hash % 256;
<<<<<<< HEAD
 810ee8c:	68fb      	ldr	r3, [r7, #12]
 810ee8e:	b2db      	uxtb	r3, r3
 810ee90:	617b      	str	r3, [r7, #20]
=======
 810cb3c:	68fb      	ldr	r3, [r7, #12]
 810cb3e:	b2db      	uxtb	r3, r3
 810cb40:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
<<<<<<< HEAD
 810ee92:	78fb      	ldrb	r3, [r7, #3]
 810ee94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ee98:	687a      	ldr	r2, [r7, #4]
 810ee9a:	00db      	lsls	r3, r3, #3
 810ee9c:	4413      	add	r3, r2
 810ee9e:	689b      	ldr	r3, [r3, #8]
 810eea0:	2b00      	cmp	r3, #0
 810eea2:	d001      	beq.n	810eea8 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
=======
 810cb42:	78fb      	ldrb	r3, [r7, #3]
 810cb44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cb48:	687a      	ldr	r2, [r7, #4]
 810cb4a:	00db      	lsls	r3, r3, #3
 810cb4c:	4413      	add	r3, r2
 810cb4e:	689b      	ldr	r3, [r3, #8]
 810cb50:	2b00      	cmp	r3, #0
 810cb52:	d001      	beq.n	810cb58 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return false; // Packet ID already in use
<<<<<<< HEAD
 810eea4:	2300      	movs	r3, #0
 810eea6:	e03c      	b.n	810ef22 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
=======
 810cb54:	2300      	movs	r3, #0
 810cb56:	e03c      	b.n	810cbd2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(struct_size > max_packet_size) {
<<<<<<< HEAD
 810eea8:	693b      	ldr	r3, [r7, #16]
 810eeaa:	2bff      	cmp	r3, #255	; 0xff
 810eeac:	d901      	bls.n	810eeb2 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
=======
 810cb58:	693b      	ldr	r3, [r7, #16]
 810cb5a:	2bff      	cmp	r3, #255	; 0xff
 810cb5c:	d901      	bls.n	810cb62 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return false; // Packet size too large
<<<<<<< HEAD
 810eeae:	2300      	movs	r3, #0
 810eeb0:	e037      	b.n	810ef22 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
=======
 810cb5e:	2300      	movs	r3, #0
 810cb60:	e037      	b.n	810cbd2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(definitions_by_type[insertion_point] != nullptr) {
<<<<<<< HEAD
 810eeb2:	687a      	ldr	r2, [r7, #4]
 810eeb4:	697b      	ldr	r3, [r7, #20]
 810eeb6:	3380      	adds	r3, #128	; 0x80
 810eeb8:	009b      	lsls	r3, r3, #2
 810eeba:	4413      	add	r3, r2
 810eebc:	685b      	ldr	r3, [r3, #4]
 810eebe:	2b00      	cmp	r3, #0
 810eec0:	d015      	beq.n	810eeee <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
=======
 810cb62:	687a      	ldr	r2, [r7, #4]
 810cb64:	697b      	ldr	r3, [r7, #20]
 810cb66:	3380      	adds	r3, #128	; 0x80
 810cb68:	009b      	lsls	r3, r3, #2
 810cb6a:	4413      	add	r3, r2
 810cb6c:	685b      	ldr	r3, [r3, #4]
 810cb6e:	2b00      	cmp	r3, #0
 810cb70:	d015      	beq.n	810cb9e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if(definitions_by_type[insertion_point]->hash == hash) {
<<<<<<< HEAD
 810eec2:	687a      	ldr	r2, [r7, #4]
 810eec4:	697b      	ldr	r3, [r7, #20]
 810eec6:	3380      	adds	r3, #128	; 0x80
 810eec8:	009b      	lsls	r3, r3, #2
 810eeca:	4413      	add	r3, r2
 810eecc:	685b      	ldr	r3, [r3, #4]
 810eece:	685b      	ldr	r3, [r3, #4]
 810eed0:	68fa      	ldr	r2, [r7, #12]
 810eed2:	429a      	cmp	r2, r3
 810eed4:	d101      	bne.n	810eeda <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
=======
 810cb72:	687a      	ldr	r2, [r7, #4]
 810cb74:	697b      	ldr	r3, [r7, #20]
 810cb76:	3380      	adds	r3, #128	; 0x80
 810cb78:	009b      	lsls	r3, r3, #2
 810cb7a:	4413      	add	r3, r2
 810cb7c:	685b      	ldr	r3, [r3, #4]
 810cb7e:	685b      	ldr	r3, [r3, #4]
 810cb80:	68fa      	ldr	r2, [r7, #12]
 810cb82:	429a      	cmp	r2, r3
 810cb84:	d101      	bne.n	810cb8a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			return false; // Packet type already defined
<<<<<<< HEAD
 810eed6:	2300      	movs	r3, #0
 810eed8:	e023      	b.n	810ef22 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
=======
 810cb86:	2300      	movs	r3, #0
 810cb88:	e023      	b.n	810cbd2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		insertion_point++;
<<<<<<< HEAD
 810eeda:	697b      	ldr	r3, [r7, #20]
 810eedc:	3301      	adds	r3, #1
 810eede:	617b      	str	r3, [r7, #20]
=======
 810cb8a:	697b      	ldr	r3, [r7, #20]
 810cb8c:	3301      	adds	r3, #1
 810cb8e:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if(insertion_point == 256) {
<<<<<<< HEAD
 810eee0:	697b      	ldr	r3, [r7, #20]
 810eee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810eee6:	d1e4      	bne.n	810eeb2 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
=======
 810cb90:	697b      	ldr	r3, [r7, #20]
 810cb92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cb96:	d1e4      	bne.n	810cb62 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			insertion_point = 0;
<<<<<<< HEAD
 810eee8:	2300      	movs	r3, #0
 810eeea:	617b      	str	r3, [r7, #20]
=======
 810cb98:	2300      	movs	r3, #0
 810cb9a:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(definitions_by_type[insertion_point] != nullptr) {
<<<<<<< HEAD
 810eeec:	e7e1      	b.n	810eeb2 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
=======
 810cb9c:	e7e1      	b.n	810cb62 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
<<<<<<< HEAD
 810eeee:	78fb      	ldrb	r3, [r7, #3]
 810eef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810eef4:	00db      	lsls	r3, r3, #3
 810eef6:	687a      	ldr	r2, [r7, #4]
 810eef8:	4413      	add	r3, r2
 810eefa:	3304      	adds	r3, #4
 810eefc:	60bb      	str	r3, [r7, #8]
=======
 810cb9e:	78fb      	ldrb	r3, [r7, #3]
 810cba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cba4:	00db      	lsls	r3, r3, #3
 810cba6:	687a      	ldr	r2, [r7, #4]
 810cba8:	4413      	add	r3, r2
 810cbaa:	3304      	adds	r3, #4
 810cbac:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->id = identifier;
<<<<<<< HEAD
 810eefe:	68bb      	ldr	r3, [r7, #8]
 810ef00:	78fa      	ldrb	r2, [r7, #3]
 810ef02:	701a      	strb	r2, [r3, #0]
=======
 810cbae:	68bb      	ldr	r3, [r7, #8]
 810cbb0:	78fa      	ldrb	r2, [r7, #3]
 810cbb2:	701a      	strb	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->size = (uint8_t) struct_size;
<<<<<<< HEAD
 810ef04:	693b      	ldr	r3, [r7, #16]
 810ef06:	b2da      	uxtb	r2, r3
 810ef08:	68bb      	ldr	r3, [r7, #8]
 810ef0a:	705a      	strb	r2, [r3, #1]
=======
 810cbb4:	693b      	ldr	r3, [r7, #16]
 810cbb6:	b2da      	uxtb	r2, r3
 810cbb8:	68bb      	ldr	r3, [r7, #8]
 810cbba:	705a      	strb	r2, [r3, #1]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	def->hash = hash;
<<<<<<< HEAD
 810ef0c:	68bb      	ldr	r3, [r7, #8]
 810ef0e:	68fa      	ldr	r2, [r7, #12]
 810ef10:	605a      	str	r2, [r3, #4]
=======
 810cbbc:	68bb      	ldr	r3, [r7, #8]
 810cbbe:	68fa      	ldr	r2, [r7, #12]
 810cbc0:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	definitions_by_type[insertion_point] = def;
<<<<<<< HEAD
 810ef12:	687a      	ldr	r2, [r7, #4]
 810ef14:	697b      	ldr	r3, [r7, #20]
 810ef16:	3380      	adds	r3, #128	; 0x80
 810ef18:	009b      	lsls	r3, r3, #2
 810ef1a:	4413      	add	r3, r2
 810ef1c:	68ba      	ldr	r2, [r7, #8]
 810ef1e:	605a      	str	r2, [r3, #4]
=======
 810cbc2:	687a      	ldr	r2, [r7, #4]
 810cbc4:	697b      	ldr	r3, [r7, #20]
 810cbc6:	3380      	adds	r3, #128	; 0x80
 810cbc8:	009b      	lsls	r3, r3, #2
 810cbca:	4413      	add	r3, r2
 810cbcc:	68ba      	ldr	r2, [r7, #8]
 810cbce:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	return true;
<<<<<<< HEAD
 810ef20:	2301      	movs	r3, #1
=======
 810cbd0:	2301      	movs	r3, #1
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810ef22:	4618      	mov	r0, r3
 810ef24:	3718      	adds	r7, #24
 810ef26:	46bd      	mov	sp, r7
 810ef28:	bd80      	pop	{r7, pc}
 810ef2a:	bf00      	nop
 810ef2c:	08114ca8 	.word	0x08114ca8
=======
 810cbd2:	4618      	mov	r0, r3
 810cbd4:	3718      	adds	r7, #24
 810cbd6:	46bd      	mov	sp, r7
 810cbd8:	bd80      	pop	{r7, pc}
 810cbda:	bf00      	nop
 810cbdc:	08110c48 	.word	0x08110c48
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ef30 <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ef30:	b580      	push	{r7, lr}
 810ef32:	b086      	sub	sp, #24
 810ef34:	af00      	add	r7, sp, #0
 810ef36:	6078      	str	r0, [r7, #4]
 810ef38:	460b      	mov	r3, r1
 810ef3a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810ef3c:	2304      	movs	r3, #4
 810ef3e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ef40:	4829      	ldr	r0, [pc, #164]	; (810efe8 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 810ef42:	f7ff fe61 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810ef46:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ef48:	68fb      	ldr	r3, [r7, #12]
 810ef4a:	b2db      	uxtb	r3, r3
 810ef4c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ef4e:	78fb      	ldrb	r3, [r7, #3]
 810ef50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ef54:	687a      	ldr	r2, [r7, #4]
 810ef56:	00db      	lsls	r3, r3, #3
 810ef58:	4413      	add	r3, r2
 810ef5a:	689b      	ldr	r3, [r3, #8]
 810ef5c:	2b00      	cmp	r3, #0
 810ef5e:	d001      	beq.n	810ef64 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ef60:	2300      	movs	r3, #0
 810ef62:	e03c      	b.n	810efde <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ef64:	693b      	ldr	r3, [r7, #16]
 810ef66:	2bff      	cmp	r3, #255	; 0xff
 810ef68:	d901      	bls.n	810ef6e <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 810ef6a:	2300      	movs	r3, #0
 810ef6c:	e037      	b.n	810efde <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ef6e:	687a      	ldr	r2, [r7, #4]
 810ef70:	697b      	ldr	r3, [r7, #20]
 810ef72:	3380      	adds	r3, #128	; 0x80
 810ef74:	009b      	lsls	r3, r3, #2
 810ef76:	4413      	add	r3, r2
 810ef78:	685b      	ldr	r3, [r3, #4]
 810ef7a:	2b00      	cmp	r3, #0
 810ef7c:	d015      	beq.n	810efaa <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ef7e:	687a      	ldr	r2, [r7, #4]
 810ef80:	697b      	ldr	r3, [r7, #20]
 810ef82:	3380      	adds	r3, #128	; 0x80
 810ef84:	009b      	lsls	r3, r3, #2
 810ef86:	4413      	add	r3, r2
 810ef88:	685b      	ldr	r3, [r3, #4]
 810ef8a:	685b      	ldr	r3, [r3, #4]
 810ef8c:	68fa      	ldr	r2, [r7, #12]
 810ef8e:	429a      	cmp	r2, r3
 810ef90:	d101      	bne.n	810ef96 <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 810ef92:	2300      	movs	r3, #0
 810ef94:	e023      	b.n	810efde <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 810ef96:	697b      	ldr	r3, [r7, #20]
 810ef98:	3301      	adds	r3, #1
 810ef9a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ef9c:	697b      	ldr	r3, [r7, #20]
 810ef9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810efa2:	d1e4      	bne.n	810ef6e <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 810efa4:	2300      	movs	r3, #0
 810efa6:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810efa8:	e7e1      	b.n	810ef6e <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810efaa:	78fb      	ldrb	r3, [r7, #3]
 810efac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810efb0:	00db      	lsls	r3, r3, #3
 810efb2:	687a      	ldr	r2, [r7, #4]
 810efb4:	4413      	add	r3, r2
 810efb6:	3304      	adds	r3, #4
 810efb8:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810efba:	68bb      	ldr	r3, [r7, #8]
 810efbc:	78fa      	ldrb	r2, [r7, #3]
 810efbe:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810efc0:	693b      	ldr	r3, [r7, #16]
 810efc2:	b2da      	uxtb	r2, r3
 810efc4:	68bb      	ldr	r3, [r7, #8]
 810efc6:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810efc8:	68bb      	ldr	r3, [r7, #8]
 810efca:	68fa      	ldr	r2, [r7, #12]
 810efcc:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810efce:	687a      	ldr	r2, [r7, #4]
 810efd0:	697b      	ldr	r3, [r7, #20]
 810efd2:	3380      	adds	r3, #128	; 0x80
 810efd4:	009b      	lsls	r3, r3, #2
 810efd6:	4413      	add	r3, r2
 810efd8:	68ba      	ldr	r2, [r7, #8]
 810efda:	605a      	str	r2, [r3, #4]
	return true;
 810efdc:	2301      	movs	r3, #1
}
 810efde:	4618      	mov	r0, r3
 810efe0:	3718      	adds	r7, #24
 810efe2:	46bd      	mov	sp, r7
 810efe4:	bd80      	pop	{r7, pc}
 810efe6:	bf00      	nop
 810efe8:	08114c90 	.word	0x08114c90

0810efec <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810efec:	b580      	push	{r7, lr}
 810efee:	b086      	sub	sp, #24
 810eff0:	af00      	add	r7, sp, #0
 810eff2:	6078      	str	r0, [r7, #4]
 810eff4:	460b      	mov	r3, r1
 810eff6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810eff8:	2301      	movs	r3, #1
 810effa:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810effc:	4829      	ldr	r0, [pc, #164]	; (810f0a4 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 810effe:	f7ff fe03 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f002:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f004:	68fb      	ldr	r3, [r7, #12]
 810f006:	b2db      	uxtb	r3, r3
 810f008:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f00a:	78fb      	ldrb	r3, [r7, #3]
 810f00c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f010:	687a      	ldr	r2, [r7, #4]
 810f012:	00db      	lsls	r3, r3, #3
 810f014:	4413      	add	r3, r2
 810f016:	689b      	ldr	r3, [r3, #8]
 810f018:	2b00      	cmp	r3, #0
 810f01a:	d001      	beq.n	810f020 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f01c:	2300      	movs	r3, #0
 810f01e:	e03c      	b.n	810f09a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f020:	693b      	ldr	r3, [r7, #16]
 810f022:	2bff      	cmp	r3, #255	; 0xff
 810f024:	d901      	bls.n	810f02a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 810f026:	2300      	movs	r3, #0
 810f028:	e037      	b.n	810f09a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f02a:	687a      	ldr	r2, [r7, #4]
 810f02c:	697b      	ldr	r3, [r7, #20]
 810f02e:	3380      	adds	r3, #128	; 0x80
 810f030:	009b      	lsls	r3, r3, #2
 810f032:	4413      	add	r3, r2
 810f034:	685b      	ldr	r3, [r3, #4]
 810f036:	2b00      	cmp	r3, #0
 810f038:	d015      	beq.n	810f066 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f03a:	687a      	ldr	r2, [r7, #4]
 810f03c:	697b      	ldr	r3, [r7, #20]
 810f03e:	3380      	adds	r3, #128	; 0x80
 810f040:	009b      	lsls	r3, r3, #2
 810f042:	4413      	add	r3, r2
 810f044:	685b      	ldr	r3, [r3, #4]
 810f046:	685b      	ldr	r3, [r3, #4]
 810f048:	68fa      	ldr	r2, [r7, #12]
 810f04a:	429a      	cmp	r2, r3
 810f04c:	d101      	bne.n	810f052 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 810f04e:	2300      	movs	r3, #0
 810f050:	e023      	b.n	810f09a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 810f052:	697b      	ldr	r3, [r7, #20]
 810f054:	3301      	adds	r3, #1
 810f056:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f058:	697b      	ldr	r3, [r7, #20]
 810f05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f05e:	d1e4      	bne.n	810f02a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 810f060:	2300      	movs	r3, #0
 810f062:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f064:	e7e1      	b.n	810f02a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f066:	78fb      	ldrb	r3, [r7, #3]
 810f068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f06c:	00db      	lsls	r3, r3, #3
 810f06e:	687a      	ldr	r2, [r7, #4]
 810f070:	4413      	add	r3, r2
 810f072:	3304      	adds	r3, #4
 810f074:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f076:	68bb      	ldr	r3, [r7, #8]
 810f078:	78fa      	ldrb	r2, [r7, #3]
 810f07a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f07c:	693b      	ldr	r3, [r7, #16]
 810f07e:	b2da      	uxtb	r2, r3
 810f080:	68bb      	ldr	r3, [r7, #8]
 810f082:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f084:	68bb      	ldr	r3, [r7, #8]
 810f086:	68fa      	ldr	r2, [r7, #12]
 810f088:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f08a:	687a      	ldr	r2, [r7, #4]
 810f08c:	697b      	ldr	r3, [r7, #20]
 810f08e:	3380      	adds	r3, #128	; 0x80
 810f090:	009b      	lsls	r3, r3, #2
 810f092:	4413      	add	r3, r2
 810f094:	68ba      	ldr	r2, [r7, #8]
 810f096:	605a      	str	r2, [r3, #4]
	return true;
 810f098:	2301      	movs	r3, #1
}
 810f09a:	4618      	mov	r0, r3
 810f09c:	3718      	adds	r7, #24
 810f09e:	46bd      	mov	sp, r7
 810f0a0:	bd80      	pop	{r7, pc}
 810f0a2:	bf00      	nop
 810f0a4:	08114c78 	.word	0x08114c78

0810f0a8 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f0a8:	b580      	push	{r7, lr}
 810f0aa:	b086      	sub	sp, #24
 810f0ac:	af00      	add	r7, sp, #0
 810f0ae:	6078      	str	r0, [r7, #4]
 810f0b0:	460b      	mov	r3, r1
 810f0b2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f0b4:	2308      	movs	r3, #8
 810f0b6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f0b8:	4829      	ldr	r0, [pc, #164]	; (810f160 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 810f0ba:	f7ff fda5 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f0be:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f0c0:	68fb      	ldr	r3, [r7, #12]
 810f0c2:	b2db      	uxtb	r3, r3
 810f0c4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f0c6:	78fb      	ldrb	r3, [r7, #3]
 810f0c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f0cc:	687a      	ldr	r2, [r7, #4]
 810f0ce:	00db      	lsls	r3, r3, #3
 810f0d0:	4413      	add	r3, r2
 810f0d2:	689b      	ldr	r3, [r3, #8]
 810f0d4:	2b00      	cmp	r3, #0
 810f0d6:	d001      	beq.n	810f0dc <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f0d8:	2300      	movs	r3, #0
 810f0da:	e03c      	b.n	810f156 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f0dc:	693b      	ldr	r3, [r7, #16]
 810f0de:	2bff      	cmp	r3, #255	; 0xff
 810f0e0:	d901      	bls.n	810f0e6 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		return false; // Packet size too large
 810f0e2:	2300      	movs	r3, #0
 810f0e4:	e037      	b.n	810f156 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f0e6:	687a      	ldr	r2, [r7, #4]
 810f0e8:	697b      	ldr	r3, [r7, #20]
 810f0ea:	3380      	adds	r3, #128	; 0x80
 810f0ec:	009b      	lsls	r3, r3, #2
 810f0ee:	4413      	add	r3, r2
 810f0f0:	685b      	ldr	r3, [r3, #4]
 810f0f2:	2b00      	cmp	r3, #0
 810f0f4:	d015      	beq.n	810f122 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f0f6:	687a      	ldr	r2, [r7, #4]
 810f0f8:	697b      	ldr	r3, [r7, #20]
 810f0fa:	3380      	adds	r3, #128	; 0x80
 810f0fc:	009b      	lsls	r3, r3, #2
 810f0fe:	4413      	add	r3, r2
 810f100:	685b      	ldr	r3, [r3, #4]
 810f102:	685b      	ldr	r3, [r3, #4]
 810f104:	68fa      	ldr	r2, [r7, #12]
 810f106:	429a      	cmp	r2, r3
 810f108:	d101      	bne.n	810f10e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
			return false; // Packet type already defined
 810f10a:	2300      	movs	r3, #0
 810f10c:	e023      	b.n	810f156 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
		insertion_point++;
 810f10e:	697b      	ldr	r3, [r7, #20]
 810f110:	3301      	adds	r3, #1
 810f112:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f114:	697b      	ldr	r3, [r7, #20]
 810f116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f11a:	d1e4      	bne.n	810f0e6 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
			insertion_point = 0;
 810f11c:	2300      	movs	r3, #0
 810f11e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f120:	e7e1      	b.n	810f0e6 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f122:	78fb      	ldrb	r3, [r7, #3]
 810f124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f128:	00db      	lsls	r3, r3, #3
 810f12a:	687a      	ldr	r2, [r7, #4]
 810f12c:	4413      	add	r3, r2
 810f12e:	3304      	adds	r3, #4
 810f130:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f132:	68bb      	ldr	r3, [r7, #8]
 810f134:	78fa      	ldrb	r2, [r7, #3]
 810f136:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f138:	693b      	ldr	r3, [r7, #16]
 810f13a:	b2da      	uxtb	r2, r3
 810f13c:	68bb      	ldr	r3, [r7, #8]
 810f13e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f140:	68bb      	ldr	r3, [r7, #8]
 810f142:	68fa      	ldr	r2, [r7, #12]
 810f144:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f146:	687a      	ldr	r2, [r7, #4]
 810f148:	697b      	ldr	r3, [r7, #20]
 810f14a:	3380      	adds	r3, #128	; 0x80
 810f14c:	009b      	lsls	r3, r3, #2
 810f14e:	4413      	add	r3, r2
 810f150:	68ba      	ldr	r2, [r7, #8]
 810f152:	605a      	str	r2, [r3, #4]
	return true;
 810f154:	2301      	movs	r3, #1
}
 810f156:	4618      	mov	r0, r3
 810f158:	3718      	adds	r7, #24
 810f15a:	46bd      	mov	sp, r7
 810f15c:	bd80      	pop	{r7, pc}
 810f15e:	bf00      	nop
 810f160:	08114c54 	.word	0x08114c54

0810f164 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_>:
=======
0810cbe0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cbe0:	b580      	push	{r7, lr}
 810cbe2:	b086      	sub	sp, #24
 810cbe4:	af00      	add	r7, sp, #0
 810cbe6:	6078      	str	r0, [r7, #4]
 810cbe8:	460b      	mov	r3, r1
 810cbea:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cbec:	2324      	movs	r3, #36	; 0x24
 810cbee:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cbf0:	4829      	ldr	r0, [pc, #164]	; (810cc98 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 810cbf2:	f7ff fd47 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cbf6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cbf8:	68fb      	ldr	r3, [r7, #12]
 810cbfa:	b2db      	uxtb	r3, r3
 810cbfc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810cbfe:	78fb      	ldrb	r3, [r7, #3]
 810cc00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cc04:	687a      	ldr	r2, [r7, #4]
 810cc06:	00db      	lsls	r3, r3, #3
 810cc08:	4413      	add	r3, r2
 810cc0a:	689b      	ldr	r3, [r3, #8]
 810cc0c:	2b00      	cmp	r3, #0
 810cc0e:	d001      	beq.n	810cc14 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 810cc10:	2300      	movs	r3, #0
 810cc12:	e03c      	b.n	810cc8e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cc14:	693b      	ldr	r3, [r7, #16]
 810cc16:	2bff      	cmp	r3, #255	; 0xff
 810cc18:	d901      	bls.n	810cc1e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 810cc1a:	2300      	movs	r3, #0
 810cc1c:	e037      	b.n	810cc8e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cc1e:	687a      	ldr	r2, [r7, #4]
 810cc20:	697b      	ldr	r3, [r7, #20]
 810cc22:	3380      	adds	r3, #128	; 0x80
 810cc24:	009b      	lsls	r3, r3, #2
 810cc26:	4413      	add	r3, r2
 810cc28:	685b      	ldr	r3, [r3, #4]
 810cc2a:	2b00      	cmp	r3, #0
 810cc2c:	d015      	beq.n	810cc5a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cc2e:	687a      	ldr	r2, [r7, #4]
 810cc30:	697b      	ldr	r3, [r7, #20]
 810cc32:	3380      	adds	r3, #128	; 0x80
 810cc34:	009b      	lsls	r3, r3, #2
 810cc36:	4413      	add	r3, r2
 810cc38:	685b      	ldr	r3, [r3, #4]
 810cc3a:	685b      	ldr	r3, [r3, #4]
 810cc3c:	68fa      	ldr	r2, [r7, #12]
 810cc3e:	429a      	cmp	r2, r3
 810cc40:	d101      	bne.n	810cc46 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 810cc42:	2300      	movs	r3, #0
 810cc44:	e023      	b.n	810cc8e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 810cc46:	697b      	ldr	r3, [r7, #20]
 810cc48:	3301      	adds	r3, #1
 810cc4a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cc4c:	697b      	ldr	r3, [r7, #20]
 810cc4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cc52:	d1e4      	bne.n	810cc1e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 810cc54:	2300      	movs	r3, #0
 810cc56:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cc58:	e7e1      	b.n	810cc1e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cc5a:	78fb      	ldrb	r3, [r7, #3]
 810cc5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cc60:	00db      	lsls	r3, r3, #3
 810cc62:	687a      	ldr	r2, [r7, #4]
 810cc64:	4413      	add	r3, r2
 810cc66:	3304      	adds	r3, #4
 810cc68:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cc6a:	68bb      	ldr	r3, [r7, #8]
 810cc6c:	78fa      	ldrb	r2, [r7, #3]
 810cc6e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cc70:	693b      	ldr	r3, [r7, #16]
 810cc72:	b2da      	uxtb	r2, r3
 810cc74:	68bb      	ldr	r3, [r7, #8]
 810cc76:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cc78:	68bb      	ldr	r3, [r7, #8]
 810cc7a:	68fa      	ldr	r2, [r7, #12]
 810cc7c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cc7e:	687a      	ldr	r2, [r7, #4]
 810cc80:	697b      	ldr	r3, [r7, #20]
 810cc82:	3380      	adds	r3, #128	; 0x80
 810cc84:	009b      	lsls	r3, r3, #2
 810cc86:	4413      	add	r3, r2
 810cc88:	68ba      	ldr	r2, [r7, #8]
 810cc8a:	605a      	str	r2, [r3, #4]
	return true;
 810cc8c:	2301      	movs	r3, #1
}
 810cc8e:	4618      	mov	r0, r3
 810cc90:	3718      	adds	r7, #24
 810cc92:	46bd      	mov	sp, r7
 810cc94:	bd80      	pop	{r7, pc}
 810cc96:	bf00      	nop
 810cc98:	08110c24 	.word	0x08110c24

0810cc9c <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cc9c:	b580      	push	{r7, lr}
 810cc9e:	b086      	sub	sp, #24
 810cca0:	af00      	add	r7, sp, #0
 810cca2:	6078      	str	r0, [r7, #4]
 810cca4:	460b      	mov	r3, r1
 810cca6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cca8:	2304      	movs	r3, #4
 810ccaa:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ccac:	4829      	ldr	r0, [pc, #164]	; (810cd54 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xb8>)
 810ccae:	f7ff fce9 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810ccb2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ccb4:	68fb      	ldr	r3, [r7, #12]
 810ccb6:	b2db      	uxtb	r3, r3
 810ccb8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ccba:	78fb      	ldrb	r3, [r7, #3]
 810ccbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ccc0:	687a      	ldr	r2, [r7, #4]
 810ccc2:	00db      	lsls	r3, r3, #3
 810ccc4:	4413      	add	r3, r2
 810ccc6:	689b      	ldr	r3, [r3, #8]
 810ccc8:	2b00      	cmp	r3, #0
 810ccca:	d001      	beq.n	810ccd0 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x34>
		return false; // Packet ID already in use
 810cccc:	2300      	movs	r3, #0
 810ccce:	e03c      	b.n	810cd4a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ccd0:	693b      	ldr	r3, [r7, #16]
 810ccd2:	2bff      	cmp	r3, #255	; 0xff
 810ccd4:	d901      	bls.n	810ccda <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
		return false; // Packet size too large
 810ccd6:	2300      	movs	r3, #0
 810ccd8:	e037      	b.n	810cd4a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ccda:	687a      	ldr	r2, [r7, #4]
 810ccdc:	697b      	ldr	r3, [r7, #20]
 810ccde:	3380      	adds	r3, #128	; 0x80
 810cce0:	009b      	lsls	r3, r3, #2
 810cce2:	4413      	add	r3, r2
 810cce4:	685b      	ldr	r3, [r3, #4]
 810cce6:	2b00      	cmp	r3, #0
 810cce8:	d015      	beq.n	810cd16 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ccea:	687a      	ldr	r2, [r7, #4]
 810ccec:	697b      	ldr	r3, [r7, #20]
 810ccee:	3380      	adds	r3, #128	; 0x80
 810ccf0:	009b      	lsls	r3, r3, #2
 810ccf2:	4413      	add	r3, r2
 810ccf4:	685b      	ldr	r3, [r3, #4]
 810ccf6:	685b      	ldr	r3, [r3, #4]
 810ccf8:	68fa      	ldr	r2, [r7, #12]
 810ccfa:	429a      	cmp	r2, r3
 810ccfc:	d101      	bne.n	810cd02 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x66>
			return false; // Packet type already defined
 810ccfe:	2300      	movs	r3, #0
 810cd00:	e023      	b.n	810cd4a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
		insertion_point++;
 810cd02:	697b      	ldr	r3, [r7, #20]
 810cd04:	3301      	adds	r3, #1
 810cd06:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cd08:	697b      	ldr	r3, [r7, #20]
 810cd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cd0e:	d1e4      	bne.n	810ccda <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
			insertion_point = 0;
 810cd10:	2300      	movs	r3, #0
 810cd12:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cd14:	e7e1      	b.n	810ccda <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cd16:	78fb      	ldrb	r3, [r7, #3]
 810cd18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cd1c:	00db      	lsls	r3, r3, #3
 810cd1e:	687a      	ldr	r2, [r7, #4]
 810cd20:	4413      	add	r3, r2
 810cd22:	3304      	adds	r3, #4
 810cd24:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cd26:	68bb      	ldr	r3, [r7, #8]
 810cd28:	78fa      	ldrb	r2, [r7, #3]
 810cd2a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cd2c:	693b      	ldr	r3, [r7, #16]
 810cd2e:	b2da      	uxtb	r2, r3
 810cd30:	68bb      	ldr	r3, [r7, #8]
 810cd32:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cd34:	68bb      	ldr	r3, [r7, #8]
 810cd36:	68fa      	ldr	r2, [r7, #12]
 810cd38:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cd3a:	687a      	ldr	r2, [r7, #4]
 810cd3c:	697b      	ldr	r3, [r7, #20]
 810cd3e:	3380      	adds	r3, #128	; 0x80
 810cd40:	009b      	lsls	r3, r3, #2
 810cd42:	4413      	add	r3, r2
 810cd44:	68ba      	ldr	r2, [r7, #8]
 810cd46:	605a      	str	r2, [r3, #4]
	return true;
 810cd48:	2301      	movs	r3, #1
}
 810cd4a:	4618      	mov	r0, r3
 810cd4c:	3718      	adds	r7, #24
 810cd4e:	46bd      	mov	sp, r7
 810cd50:	bd80      	pop	{r7, pc}
 810cd52:	bf00      	nop
 810cd54:	08110c00 	.word	0x08110c00

0810cd58 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cd58:	b580      	push	{r7, lr}
 810cd5a:	b086      	sub	sp, #24
 810cd5c:	af00      	add	r7, sp, #0
 810cd5e:	6078      	str	r0, [r7, #4]
 810cd60:	460b      	mov	r3, r1
 810cd62:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cd64:	2310      	movs	r3, #16
 810cd66:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cd68:	4829      	ldr	r0, [pc, #164]	; (810ce10 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 810cd6a:	f7ff fc8b 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cd6e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cd70:	68fb      	ldr	r3, [r7, #12]
 810cd72:	b2db      	uxtb	r3, r3
 810cd74:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810cd76:	78fb      	ldrb	r3, [r7, #3]
 810cd78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cd7c:	687a      	ldr	r2, [r7, #4]
 810cd7e:	00db      	lsls	r3, r3, #3
 810cd80:	4413      	add	r3, r2
 810cd82:	689b      	ldr	r3, [r3, #8]
 810cd84:	2b00      	cmp	r3, #0
 810cd86:	d001      	beq.n	810cd8c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 810cd88:	2300      	movs	r3, #0
 810cd8a:	e03c      	b.n	810ce06 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cd8c:	693b      	ldr	r3, [r7, #16]
 810cd8e:	2bff      	cmp	r3, #255	; 0xff
 810cd90:	d901      	bls.n	810cd96 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 810cd92:	2300      	movs	r3, #0
 810cd94:	e037      	b.n	810ce06 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cd96:	687a      	ldr	r2, [r7, #4]
 810cd98:	697b      	ldr	r3, [r7, #20]
 810cd9a:	3380      	adds	r3, #128	; 0x80
 810cd9c:	009b      	lsls	r3, r3, #2
 810cd9e:	4413      	add	r3, r2
 810cda0:	685b      	ldr	r3, [r3, #4]
 810cda2:	2b00      	cmp	r3, #0
 810cda4:	d015      	beq.n	810cdd2 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cda6:	687a      	ldr	r2, [r7, #4]
 810cda8:	697b      	ldr	r3, [r7, #20]
 810cdaa:	3380      	adds	r3, #128	; 0x80
 810cdac:	009b      	lsls	r3, r3, #2
 810cdae:	4413      	add	r3, r2
 810cdb0:	685b      	ldr	r3, [r3, #4]
 810cdb2:	685b      	ldr	r3, [r3, #4]
 810cdb4:	68fa      	ldr	r2, [r7, #12]
 810cdb6:	429a      	cmp	r2, r3
 810cdb8:	d101      	bne.n	810cdbe <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 810cdba:	2300      	movs	r3, #0
 810cdbc:	e023      	b.n	810ce06 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 810cdbe:	697b      	ldr	r3, [r7, #20]
 810cdc0:	3301      	adds	r3, #1
 810cdc2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cdc4:	697b      	ldr	r3, [r7, #20]
 810cdc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cdca:	d1e4      	bne.n	810cd96 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 810cdcc:	2300      	movs	r3, #0
 810cdce:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cdd0:	e7e1      	b.n	810cd96 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cdd2:	78fb      	ldrb	r3, [r7, #3]
 810cdd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cdd8:	00db      	lsls	r3, r3, #3
 810cdda:	687a      	ldr	r2, [r7, #4]
 810cddc:	4413      	add	r3, r2
 810cdde:	3304      	adds	r3, #4
 810cde0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cde2:	68bb      	ldr	r3, [r7, #8]
 810cde4:	78fa      	ldrb	r2, [r7, #3]
 810cde6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cde8:	693b      	ldr	r3, [r7, #16]
 810cdea:	b2da      	uxtb	r2, r3
 810cdec:	68bb      	ldr	r3, [r7, #8]
 810cdee:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cdf0:	68bb      	ldr	r3, [r7, #8]
 810cdf2:	68fa      	ldr	r2, [r7, #12]
 810cdf4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cdf6:	687a      	ldr	r2, [r7, #4]
 810cdf8:	697b      	ldr	r3, [r7, #20]
 810cdfa:	3380      	adds	r3, #128	; 0x80
 810cdfc:	009b      	lsls	r3, r3, #2
 810cdfe:	4413      	add	r3, r2
 810ce00:	68ba      	ldr	r2, [r7, #8]
 810ce02:	605a      	str	r2, [r3, #4]
	return true;
 810ce04:	2301      	movs	r3, #1
}
 810ce06:	4618      	mov	r0, r3
 810ce08:	3718      	adds	r7, #24
 810ce0a:	46bd      	mov	sp, r7
 810ce0c:	bd80      	pop	{r7, pc}
 810ce0e:	bf00      	nop
 810ce10:	08110be0 	.word	0x08110be0

0810ce14 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ce14:	b580      	push	{r7, lr}
 810ce16:	b086      	sub	sp, #24
 810ce18:	af00      	add	r7, sp, #0
 810ce1a:	6078      	str	r0, [r7, #4]
 810ce1c:	460b      	mov	r3, r1
 810ce1e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810ce20:	2310      	movs	r3, #16
 810ce22:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ce24:	4829      	ldr	r0, [pc, #164]	; (810cecc <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 810ce26:	f7ff fc2d 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810ce2a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ce2c:	68fb      	ldr	r3, [r7, #12]
 810ce2e:	b2db      	uxtb	r3, r3
 810ce30:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ce32:	78fb      	ldrb	r3, [r7, #3]
 810ce34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ce38:	687a      	ldr	r2, [r7, #4]
 810ce3a:	00db      	lsls	r3, r3, #3
 810ce3c:	4413      	add	r3, r2
 810ce3e:	689b      	ldr	r3, [r3, #8]
 810ce40:	2b00      	cmp	r3, #0
 810ce42:	d001      	beq.n	810ce48 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ce44:	2300      	movs	r3, #0
 810ce46:	e03c      	b.n	810cec2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ce48:	693b      	ldr	r3, [r7, #16]
 810ce4a:	2bff      	cmp	r3, #255	; 0xff
 810ce4c:	d901      	bls.n	810ce52 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 810ce4e:	2300      	movs	r3, #0
 810ce50:	e037      	b.n	810cec2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ce52:	687a      	ldr	r2, [r7, #4]
 810ce54:	697b      	ldr	r3, [r7, #20]
 810ce56:	3380      	adds	r3, #128	; 0x80
 810ce58:	009b      	lsls	r3, r3, #2
 810ce5a:	4413      	add	r3, r2
 810ce5c:	685b      	ldr	r3, [r3, #4]
 810ce5e:	2b00      	cmp	r3, #0
 810ce60:	d015      	beq.n	810ce8e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ce62:	687a      	ldr	r2, [r7, #4]
 810ce64:	697b      	ldr	r3, [r7, #20]
 810ce66:	3380      	adds	r3, #128	; 0x80
 810ce68:	009b      	lsls	r3, r3, #2
 810ce6a:	4413      	add	r3, r2
 810ce6c:	685b      	ldr	r3, [r3, #4]
 810ce6e:	685b      	ldr	r3, [r3, #4]
 810ce70:	68fa      	ldr	r2, [r7, #12]
 810ce72:	429a      	cmp	r2, r3
 810ce74:	d101      	bne.n	810ce7a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 810ce76:	2300      	movs	r3, #0
 810ce78:	e023      	b.n	810cec2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 810ce7a:	697b      	ldr	r3, [r7, #20]
 810ce7c:	3301      	adds	r3, #1
 810ce7e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ce80:	697b      	ldr	r3, [r7, #20]
 810ce82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ce86:	d1e4      	bne.n	810ce52 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 810ce88:	2300      	movs	r3, #0
 810ce8a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ce8c:	e7e1      	b.n	810ce52 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ce8e:	78fb      	ldrb	r3, [r7, #3]
 810ce90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ce94:	00db      	lsls	r3, r3, #3
 810ce96:	687a      	ldr	r2, [r7, #4]
 810ce98:	4413      	add	r3, r2
 810ce9a:	3304      	adds	r3, #4
 810ce9c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ce9e:	68bb      	ldr	r3, [r7, #8]
 810cea0:	78fa      	ldrb	r2, [r7, #3]
 810cea2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cea4:	693b      	ldr	r3, [r7, #16]
 810cea6:	b2da      	uxtb	r2, r3
 810cea8:	68bb      	ldr	r3, [r7, #8]
 810ceaa:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ceac:	68bb      	ldr	r3, [r7, #8]
 810ceae:	68fa      	ldr	r2, [r7, #12]
 810ceb0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ceb2:	687a      	ldr	r2, [r7, #4]
 810ceb4:	697b      	ldr	r3, [r7, #20]
 810ceb6:	3380      	adds	r3, #128	; 0x80
 810ceb8:	009b      	lsls	r3, r3, #2
 810ceba:	4413      	add	r3, r2
 810cebc:	68ba      	ldr	r2, [r7, #8]
 810cebe:	605a      	str	r2, [r3, #4]
	return true;
 810cec0:	2301      	movs	r3, #1
}
 810cec2:	4618      	mov	r0, r3
 810cec4:	3718      	adds	r7, #24
 810cec6:	46bd      	mov	sp, r7
 810cec8:	bd80      	pop	{r7, pc}
 810ceca:	bf00      	nop
 810cecc:	08110bc0 	.word	0x08110bc0

0810ced0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ced0:	b580      	push	{r7, lr}
 810ced2:	b086      	sub	sp, #24
 810ced4:	af00      	add	r7, sp, #0
 810ced6:	6078      	str	r0, [r7, #4]
 810ced8:	460b      	mov	r3, r1
 810ceda:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cedc:	2305      	movs	r3, #5
 810cede:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cee0:	4829      	ldr	r0, [pc, #164]	; (810cf88 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 810cee2:	f7ff fbcf 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cee6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cee8:	68fb      	ldr	r3, [r7, #12]
 810ceea:	b2db      	uxtb	r3, r3
 810ceec:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ceee:	78fb      	ldrb	r3, [r7, #3]
 810cef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cef4:	687a      	ldr	r2, [r7, #4]
 810cef6:	00db      	lsls	r3, r3, #3
 810cef8:	4413      	add	r3, r2
 810cefa:	689b      	ldr	r3, [r3, #8]
 810cefc:	2b00      	cmp	r3, #0
 810cefe:	d001      	beq.n	810cf04 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 810cf00:	2300      	movs	r3, #0
 810cf02:	e03c      	b.n	810cf7e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cf04:	693b      	ldr	r3, [r7, #16]
 810cf06:	2bff      	cmp	r3, #255	; 0xff
 810cf08:	d901      	bls.n	810cf0e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 810cf0a:	2300      	movs	r3, #0
 810cf0c:	e037      	b.n	810cf7e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cf0e:	687a      	ldr	r2, [r7, #4]
 810cf10:	697b      	ldr	r3, [r7, #20]
 810cf12:	3380      	adds	r3, #128	; 0x80
 810cf14:	009b      	lsls	r3, r3, #2
 810cf16:	4413      	add	r3, r2
 810cf18:	685b      	ldr	r3, [r3, #4]
 810cf1a:	2b00      	cmp	r3, #0
 810cf1c:	d015      	beq.n	810cf4a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cf1e:	687a      	ldr	r2, [r7, #4]
 810cf20:	697b      	ldr	r3, [r7, #20]
 810cf22:	3380      	adds	r3, #128	; 0x80
 810cf24:	009b      	lsls	r3, r3, #2
 810cf26:	4413      	add	r3, r2
 810cf28:	685b      	ldr	r3, [r3, #4]
 810cf2a:	685b      	ldr	r3, [r3, #4]
 810cf2c:	68fa      	ldr	r2, [r7, #12]
 810cf2e:	429a      	cmp	r2, r3
 810cf30:	d101      	bne.n	810cf36 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 810cf32:	2300      	movs	r3, #0
 810cf34:	e023      	b.n	810cf7e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 810cf36:	697b      	ldr	r3, [r7, #20]
 810cf38:	3301      	adds	r3, #1
 810cf3a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cf3c:	697b      	ldr	r3, [r7, #20]
 810cf3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cf42:	d1e4      	bne.n	810cf0e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 810cf44:	2300      	movs	r3, #0
 810cf46:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810cf48:	e7e1      	b.n	810cf0e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810cf4a:	78fb      	ldrb	r3, [r7, #3]
 810cf4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cf50:	00db      	lsls	r3, r3, #3
 810cf52:	687a      	ldr	r2, [r7, #4]
 810cf54:	4413      	add	r3, r2
 810cf56:	3304      	adds	r3, #4
 810cf58:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810cf5a:	68bb      	ldr	r3, [r7, #8]
 810cf5c:	78fa      	ldrb	r2, [r7, #3]
 810cf5e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810cf60:	693b      	ldr	r3, [r7, #16]
 810cf62:	b2da      	uxtb	r2, r3
 810cf64:	68bb      	ldr	r3, [r7, #8]
 810cf66:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810cf68:	68bb      	ldr	r3, [r7, #8]
 810cf6a:	68fa      	ldr	r2, [r7, #12]
 810cf6c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810cf6e:	687a      	ldr	r2, [r7, #4]
 810cf70:	697b      	ldr	r3, [r7, #20]
 810cf72:	3380      	adds	r3, #128	; 0x80
 810cf74:	009b      	lsls	r3, r3, #2
 810cf76:	4413      	add	r3, r2
 810cf78:	68ba      	ldr	r2, [r7, #8]
 810cf7a:	605a      	str	r2, [r3, #4]
	return true;
 810cf7c:	2301      	movs	r3, #1
}
 810cf7e:	4618      	mov	r0, r3
 810cf80:	3718      	adds	r7, #24
 810cf82:	46bd      	mov	sp, r7
 810cf84:	bd80      	pop	{r7, pc}
 810cf86:	bf00      	nop
 810cf88:	08110ba0 	.word	0x08110ba0

0810cf8c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810cf8c:	b580      	push	{r7, lr}
 810cf8e:	b086      	sub	sp, #24
 810cf90:	af00      	add	r7, sp, #0
 810cf92:	6078      	str	r0, [r7, #4]
 810cf94:	460b      	mov	r3, r1
 810cf96:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810cf98:	2304      	movs	r3, #4
 810cf9a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810cf9c:	4829      	ldr	r0, [pc, #164]	; (810d044 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xb8>)
 810cf9e:	f7ff fb71 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810cfa2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810cfa4:	68fb      	ldr	r3, [r7, #12]
 810cfa6:	b2db      	uxtb	r3, r3
 810cfa8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810cfaa:	78fb      	ldrb	r3, [r7, #3]
 810cfac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cfb0:	687a      	ldr	r2, [r7, #4]
 810cfb2:	00db      	lsls	r3, r3, #3
 810cfb4:	4413      	add	r3, r2
 810cfb6:	689b      	ldr	r3, [r3, #8]
 810cfb8:	2b00      	cmp	r3, #0
 810cfba:	d001      	beq.n	810cfc0 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x34>
		return false; // Packet ID already in use
 810cfbc:	2300      	movs	r3, #0
 810cfbe:	e03c      	b.n	810d03a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810cfc0:	693b      	ldr	r3, [r7, #16]
 810cfc2:	2bff      	cmp	r3, #255	; 0xff
 810cfc4:	d901      	bls.n	810cfca <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
		return false; // Packet size too large
 810cfc6:	2300      	movs	r3, #0
 810cfc8:	e037      	b.n	810d03a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810cfca:	687a      	ldr	r2, [r7, #4]
 810cfcc:	697b      	ldr	r3, [r7, #20]
 810cfce:	3380      	adds	r3, #128	; 0x80
 810cfd0:	009b      	lsls	r3, r3, #2
 810cfd2:	4413      	add	r3, r2
 810cfd4:	685b      	ldr	r3, [r3, #4]
 810cfd6:	2b00      	cmp	r3, #0
 810cfd8:	d015      	beq.n	810d006 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810cfda:	687a      	ldr	r2, [r7, #4]
 810cfdc:	697b      	ldr	r3, [r7, #20]
 810cfde:	3380      	adds	r3, #128	; 0x80
 810cfe0:	009b      	lsls	r3, r3, #2
 810cfe2:	4413      	add	r3, r2
 810cfe4:	685b      	ldr	r3, [r3, #4]
 810cfe6:	685b      	ldr	r3, [r3, #4]
 810cfe8:	68fa      	ldr	r2, [r7, #12]
 810cfea:	429a      	cmp	r2, r3
 810cfec:	d101      	bne.n	810cff2 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x66>
			return false; // Packet type already defined
 810cfee:	2300      	movs	r3, #0
 810cff0:	e023      	b.n	810d03a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
		insertion_point++;
 810cff2:	697b      	ldr	r3, [r7, #20]
 810cff4:	3301      	adds	r3, #1
 810cff6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810cff8:	697b      	ldr	r3, [r7, #20]
 810cffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cffe:	d1e4      	bne.n	810cfca <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
			insertion_point = 0;
 810d000:	2300      	movs	r3, #0
 810d002:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810d004:	e7e1      	b.n	810cfca <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810d006:	78fb      	ldrb	r3, [r7, #3]
 810d008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d00c:	00db      	lsls	r3, r3, #3
 810d00e:	687a      	ldr	r2, [r7, #4]
 810d010:	4413      	add	r3, r2
 810d012:	3304      	adds	r3, #4
 810d014:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810d016:	68bb      	ldr	r3, [r7, #8]
 810d018:	78fa      	ldrb	r2, [r7, #3]
 810d01a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810d01c:	693b      	ldr	r3, [r7, #16]
 810d01e:	b2da      	uxtb	r2, r3
 810d020:	68bb      	ldr	r3, [r7, #8]
 810d022:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810d024:	68bb      	ldr	r3, [r7, #8]
 810d026:	68fa      	ldr	r2, [r7, #12]
 810d028:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810d02a:	687a      	ldr	r2, [r7, #4]
 810d02c:	697b      	ldr	r3, [r7, #20]
 810d02e:	3380      	adds	r3, #128	; 0x80
 810d030:	009b      	lsls	r3, r3, #2
 810d032:	4413      	add	r3, r2
 810d034:	68ba      	ldr	r2, [r7, #8]
 810d036:	605a      	str	r2, [r3, #4]
	return true;
 810d038:	2301      	movs	r3, #1
}
 810d03a:	4618      	mov	r0, r3
 810d03c:	3718      	adds	r7, #24
 810d03e:	46bd      	mov	sp, r7
 810d040:	bd80      	pop	{r7, pc}
 810d042:	bf00      	nop
 810d044:	08110b80 	.word	0x08110b80

0810d048 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}

/*
 * Sends the given message using the implemented transmission protocol.
 */
template<typename T> bool MessageBus::send(T *message) {
<<<<<<< HEAD
 810f164:	b580      	push	{r7, lr}
 810f166:	b084      	sub	sp, #16
 810f168:	af00      	add	r7, sp, #0
 810f16a:	6078      	str	r0, [r7, #4]
 810f16c:	6039      	str	r1, [r7, #0]
=======
 810d048:	b580      	push	{r7, lr}
 810d04a:	b084      	sub	sp, #16
 810d04c:	af00      	add	r7, sp, #0
 810d04e:	6078      	str	r0, [r7, #4]
 810d050:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	size_t hash = typeid(T).hash_code();
<<<<<<< HEAD
 810f16e:	4809      	ldr	r0, [pc, #36]	; (810f194 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_+0x30>)
 810f170:	f7ff fd4a 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f174:	60f8      	str	r0, [r7, #12]
=======
 810d052:	4809      	ldr	r0, [pc, #36]	; (810d078 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_+0x30>)
 810d054:	f7ff fb16 	bl	810c684 <_ZNKSt9type_info9hash_codeEv>
 810d058:	60f8      	str	r0, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	PacketDefinition* def = retrieve(hash);
<<<<<<< HEAD
 810f176:	68f9      	ldr	r1, [r7, #12]
 810f178:	6878      	ldr	r0, [r7, #4]
 810f17a:	f000 fb3b 	bl	810f7f4 <_ZN10MessageBus8retrieveEj>
 810f17e:	60b8      	str	r0, [r7, #8]
=======
 810d05a:	68f9      	ldr	r1, [r7, #12]
 810d05c:	6878      	ldr	r0, [r7, #4]
 810d05e:	f000 f8d3 	bl	810d208 <_ZN10MessageBus8retrieveEj>
 810d062:	60b8      	str	r0, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	return send(def, (uint8_t*) message);
<<<<<<< HEAD
 810f180:	683a      	ldr	r2, [r7, #0]
 810f182:	68b9      	ldr	r1, [r7, #8]
 810f184:	6878      	ldr	r0, [r7, #4]
 810f186:	f000 fa6f 	bl	810f668 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810f18a:	4603      	mov	r3, r0
=======
 810d064:	683a      	ldr	r2, [r7, #0]
 810d066:	68b9      	ldr	r1, [r7, #8]
 810d068:	6878      	ldr	r0, [r7, #4]
 810d06a:	f000 f807 	bl	810d07c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810d06e:	4603      	mov	r3, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810f18c:	4618      	mov	r0, r3
 810f18e:	3710      	adds	r7, #16
 810f190:	46bd      	mov	sp, r7
 810f192:	bd80      	pop	{r7, pc}
 810f194:	08114c54 	.word	0x08114c54
=======
 810d070:	4618      	mov	r0, r3
 810d072:	3710      	adds	r7, #16
 810d074:	46bd      	mov	sp, r7
 810d076:	bd80      	pop	{r7, pc}
 810d078:	08110b80 	.word	0x08110b80
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810f198 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f198:	b580      	push	{r7, lr}
 810f19a:	b086      	sub	sp, #24
 810f19c:	af00      	add	r7, sp, #0
 810f19e:	6078      	str	r0, [r7, #4]
 810f1a0:	460b      	mov	r3, r1
 810f1a2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f1a4:	2324      	movs	r3, #36	; 0x24
 810f1a6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f1a8:	4829      	ldr	r0, [pc, #164]	; (810f250 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 810f1aa:	f7ff fd2d 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f1ae:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f1b0:	68fb      	ldr	r3, [r7, #12]
 810f1b2:	b2db      	uxtb	r3, r3
 810f1b4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f1b6:	78fb      	ldrb	r3, [r7, #3]
 810f1b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f1bc:	687a      	ldr	r2, [r7, #4]
 810f1be:	00db      	lsls	r3, r3, #3
 810f1c0:	4413      	add	r3, r2
 810f1c2:	689b      	ldr	r3, [r3, #8]
 810f1c4:	2b00      	cmp	r3, #0
 810f1c6:	d001      	beq.n	810f1cc <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f1c8:	2300      	movs	r3, #0
 810f1ca:	e03c      	b.n	810f246 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f1cc:	693b      	ldr	r3, [r7, #16]
 810f1ce:	2bff      	cmp	r3, #255	; 0xff
 810f1d0:	d901      	bls.n	810f1d6 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 810f1d2:	2300      	movs	r3, #0
 810f1d4:	e037      	b.n	810f246 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f1d6:	687a      	ldr	r2, [r7, #4]
 810f1d8:	697b      	ldr	r3, [r7, #20]
 810f1da:	3380      	adds	r3, #128	; 0x80
 810f1dc:	009b      	lsls	r3, r3, #2
 810f1de:	4413      	add	r3, r2
 810f1e0:	685b      	ldr	r3, [r3, #4]
 810f1e2:	2b00      	cmp	r3, #0
 810f1e4:	d015      	beq.n	810f212 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f1e6:	687a      	ldr	r2, [r7, #4]
 810f1e8:	697b      	ldr	r3, [r7, #20]
 810f1ea:	3380      	adds	r3, #128	; 0x80
 810f1ec:	009b      	lsls	r3, r3, #2
 810f1ee:	4413      	add	r3, r2
 810f1f0:	685b      	ldr	r3, [r3, #4]
 810f1f2:	685b      	ldr	r3, [r3, #4]
 810f1f4:	68fa      	ldr	r2, [r7, #12]
 810f1f6:	429a      	cmp	r2, r3
 810f1f8:	d101      	bne.n	810f1fe <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 810f1fa:	2300      	movs	r3, #0
 810f1fc:	e023      	b.n	810f246 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 810f1fe:	697b      	ldr	r3, [r7, #20]
 810f200:	3301      	adds	r3, #1
 810f202:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f204:	697b      	ldr	r3, [r7, #20]
 810f206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f20a:	d1e4      	bne.n	810f1d6 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 810f20c:	2300      	movs	r3, #0
 810f20e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f210:	e7e1      	b.n	810f1d6 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f212:	78fb      	ldrb	r3, [r7, #3]
 810f214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f218:	00db      	lsls	r3, r3, #3
 810f21a:	687a      	ldr	r2, [r7, #4]
 810f21c:	4413      	add	r3, r2
 810f21e:	3304      	adds	r3, #4
 810f220:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f222:	68bb      	ldr	r3, [r7, #8]
 810f224:	78fa      	ldrb	r2, [r7, #3]
 810f226:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f228:	693b      	ldr	r3, [r7, #16]
 810f22a:	b2da      	uxtb	r2, r3
 810f22c:	68bb      	ldr	r3, [r7, #8]
 810f22e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f230:	68bb      	ldr	r3, [r7, #8]
 810f232:	68fa      	ldr	r2, [r7, #12]
 810f234:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f236:	687a      	ldr	r2, [r7, #4]
 810f238:	697b      	ldr	r3, [r7, #20]
 810f23a:	3380      	adds	r3, #128	; 0x80
 810f23c:	009b      	lsls	r3, r3, #2
 810f23e:	4413      	add	r3, r2
 810f240:	68ba      	ldr	r2, [r7, #8]
 810f242:	605a      	str	r2, [r3, #4]
	return true;
 810f244:	2301      	movs	r3, #1
}
 810f246:	4618      	mov	r0, r3
 810f248:	3718      	adds	r7, #24
 810f24a:	46bd      	mov	sp, r7
 810f24c:	bd80      	pop	{r7, pc}
 810f24e:	bf00      	nop
 810f250:	08114c30 	.word	0x08114c30

0810f254 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810f254:	b580      	push	{r7, lr}
 810f256:	b084      	sub	sp, #16
 810f258:	af00      	add	r7, sp, #0
 810f25a:	6078      	str	r0, [r7, #4]
 810f25c:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810f25e:	4809      	ldr	r0, [pc, #36]	; (810f284 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_+0x30>)
 810f260:	f7ff fcd2 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f264:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810f266:	68f9      	ldr	r1, [r7, #12]
 810f268:	6878      	ldr	r0, [r7, #4]
 810f26a:	f000 fac3 	bl	810f7f4 <_ZN10MessageBus8retrieveEj>
 810f26e:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810f270:	683a      	ldr	r2, [r7, #0]
 810f272:	68b9      	ldr	r1, [r7, #8]
 810f274:	6878      	ldr	r0, [r7, #4]
 810f276:	f000 f9f7 	bl	810f668 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810f27a:	4603      	mov	r3, r0
}
 810f27c:	4618      	mov	r0, r3
 810f27e:	3710      	adds	r7, #16
 810f280:	46bd      	mov	sp, r7
 810f282:	bd80      	pop	{r7, pc}
 810f284:	08114c30 	.word	0x08114c30

0810f288 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f288:	b580      	push	{r7, lr}
 810f28a:	b086      	sub	sp, #24
 810f28c:	af00      	add	r7, sp, #0
 810f28e:	6078      	str	r0, [r7, #4]
 810f290:	460b      	mov	r3, r1
 810f292:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f294:	2304      	movs	r3, #4
 810f296:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f298:	4829      	ldr	r0, [pc, #164]	; (810f340 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xb8>)
 810f29a:	f7ff fcb5 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f29e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f2a0:	68fb      	ldr	r3, [r7, #12]
 810f2a2:	b2db      	uxtb	r3, r3
 810f2a4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f2a6:	78fb      	ldrb	r3, [r7, #3]
 810f2a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f2ac:	687a      	ldr	r2, [r7, #4]
 810f2ae:	00db      	lsls	r3, r3, #3
 810f2b0:	4413      	add	r3, r2
 810f2b2:	689b      	ldr	r3, [r3, #8]
 810f2b4:	2b00      	cmp	r3, #0
 810f2b6:	d001      	beq.n	810f2bc <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f2b8:	2300      	movs	r3, #0
 810f2ba:	e03c      	b.n	810f336 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f2bc:	693b      	ldr	r3, [r7, #16]
 810f2be:	2bff      	cmp	r3, #255	; 0xff
 810f2c0:	d901      	bls.n	810f2c6 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
		return false; // Packet size too large
 810f2c2:	2300      	movs	r3, #0
 810f2c4:	e037      	b.n	810f336 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f2c6:	687a      	ldr	r2, [r7, #4]
 810f2c8:	697b      	ldr	r3, [r7, #20]
 810f2ca:	3380      	adds	r3, #128	; 0x80
 810f2cc:	009b      	lsls	r3, r3, #2
 810f2ce:	4413      	add	r3, r2
 810f2d0:	685b      	ldr	r3, [r3, #4]
 810f2d2:	2b00      	cmp	r3, #0
 810f2d4:	d015      	beq.n	810f302 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f2d6:	687a      	ldr	r2, [r7, #4]
 810f2d8:	697b      	ldr	r3, [r7, #20]
 810f2da:	3380      	adds	r3, #128	; 0x80
 810f2dc:	009b      	lsls	r3, r3, #2
 810f2de:	4413      	add	r3, r2
 810f2e0:	685b      	ldr	r3, [r3, #4]
 810f2e2:	685b      	ldr	r3, [r3, #4]
 810f2e4:	68fa      	ldr	r2, [r7, #12]
 810f2e6:	429a      	cmp	r2, r3
 810f2e8:	d101      	bne.n	810f2ee <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x66>
			return false; // Packet type already defined
 810f2ea:	2300      	movs	r3, #0
 810f2ec:	e023      	b.n	810f336 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
		insertion_point++;
 810f2ee:	697b      	ldr	r3, [r7, #20]
 810f2f0:	3301      	adds	r3, #1
 810f2f2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f2f4:	697b      	ldr	r3, [r7, #20]
 810f2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f2fa:	d1e4      	bne.n	810f2c6 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
			insertion_point = 0;
 810f2fc:	2300      	movs	r3, #0
 810f2fe:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f300:	e7e1      	b.n	810f2c6 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f302:	78fb      	ldrb	r3, [r7, #3]
 810f304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f308:	00db      	lsls	r3, r3, #3
 810f30a:	687a      	ldr	r2, [r7, #4]
 810f30c:	4413      	add	r3, r2
 810f30e:	3304      	adds	r3, #4
 810f310:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f312:	68bb      	ldr	r3, [r7, #8]
 810f314:	78fa      	ldrb	r2, [r7, #3]
 810f316:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f318:	693b      	ldr	r3, [r7, #16]
 810f31a:	b2da      	uxtb	r2, r3
 810f31c:	68bb      	ldr	r3, [r7, #8]
 810f31e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f320:	68bb      	ldr	r3, [r7, #8]
 810f322:	68fa      	ldr	r2, [r7, #12]
 810f324:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f326:	687a      	ldr	r2, [r7, #4]
 810f328:	697b      	ldr	r3, [r7, #20]
 810f32a:	3380      	adds	r3, #128	; 0x80
 810f32c:	009b      	lsls	r3, r3, #2
 810f32e:	4413      	add	r3, r2
 810f330:	68ba      	ldr	r2, [r7, #8]
 810f332:	605a      	str	r2, [r3, #4]
	return true;
 810f334:	2301      	movs	r3, #1
}
 810f336:	4618      	mov	r0, r3
 810f338:	3718      	adds	r7, #24
 810f33a:	46bd      	mov	sp, r7
 810f33c:	bd80      	pop	{r7, pc}
 810f33e:	bf00      	nop
 810f340:	08114c0c 	.word	0x08114c0c

0810f344 <_ZN10MessageBus4sendI22Handling_GripperPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810f344:	b580      	push	{r7, lr}
 810f346:	b084      	sub	sp, #16
 810f348:	af00      	add	r7, sp, #0
 810f34a:	6078      	str	r0, [r7, #4]
 810f34c:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810f34e:	4809      	ldr	r0, [pc, #36]	; (810f374 <_ZN10MessageBus4sendI22Handling_GripperPacketEEbPT_+0x30>)
 810f350:	f7ff fc5a 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f354:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810f356:	68f9      	ldr	r1, [r7, #12]
 810f358:	6878      	ldr	r0, [r7, #4]
 810f35a:	f000 fa4b 	bl	810f7f4 <_ZN10MessageBus8retrieveEj>
 810f35e:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810f360:	683a      	ldr	r2, [r7, #0]
 810f362:	68b9      	ldr	r1, [r7, #8]
 810f364:	6878      	ldr	r0, [r7, #4]
 810f366:	f000 f97f 	bl	810f668 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810f36a:	4603      	mov	r3, r0
}
 810f36c:	4618      	mov	r0, r3
 810f36e:	3710      	adds	r7, #16
 810f370:	46bd      	mov	sp, r7
 810f372:	bd80      	pop	{r7, pc}
 810f374:	08114c0c 	.word	0x08114c0c

0810f378 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f378:	b580      	push	{r7, lr}
 810f37a:	b086      	sub	sp, #24
 810f37c:	af00      	add	r7, sp, #0
 810f37e:	6078      	str	r0, [r7, #4]
 810f380:	460b      	mov	r3, r1
 810f382:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f384:	2310      	movs	r3, #16
 810f386:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f388:	4829      	ldr	r0, [pc, #164]	; (810f430 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 810f38a:	f7ff fc3d 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f38e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f390:	68fb      	ldr	r3, [r7, #12]
 810f392:	b2db      	uxtb	r3, r3
 810f394:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f396:	78fb      	ldrb	r3, [r7, #3]
 810f398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f39c:	687a      	ldr	r2, [r7, #4]
 810f39e:	00db      	lsls	r3, r3, #3
 810f3a0:	4413      	add	r3, r2
 810f3a2:	689b      	ldr	r3, [r3, #8]
 810f3a4:	2b00      	cmp	r3, #0
 810f3a6:	d001      	beq.n	810f3ac <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 810f3a8:	2300      	movs	r3, #0
 810f3aa:	e03c      	b.n	810f426 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f3ac:	693b      	ldr	r3, [r7, #16]
 810f3ae:	2bff      	cmp	r3, #255	; 0xff
 810f3b0:	d901      	bls.n	810f3b6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 810f3b2:	2300      	movs	r3, #0
 810f3b4:	e037      	b.n	810f426 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f3b6:	687a      	ldr	r2, [r7, #4]
 810f3b8:	697b      	ldr	r3, [r7, #20]
 810f3ba:	3380      	adds	r3, #128	; 0x80
 810f3bc:	009b      	lsls	r3, r3, #2
 810f3be:	4413      	add	r3, r2
 810f3c0:	685b      	ldr	r3, [r3, #4]
 810f3c2:	2b00      	cmp	r3, #0
 810f3c4:	d015      	beq.n	810f3f2 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f3c6:	687a      	ldr	r2, [r7, #4]
 810f3c8:	697b      	ldr	r3, [r7, #20]
 810f3ca:	3380      	adds	r3, #128	; 0x80
 810f3cc:	009b      	lsls	r3, r3, #2
 810f3ce:	4413      	add	r3, r2
 810f3d0:	685b      	ldr	r3, [r3, #4]
 810f3d2:	685b      	ldr	r3, [r3, #4]
 810f3d4:	68fa      	ldr	r2, [r7, #12]
 810f3d6:	429a      	cmp	r2, r3
 810f3d8:	d101      	bne.n	810f3de <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 810f3da:	2300      	movs	r3, #0
 810f3dc:	e023      	b.n	810f426 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 810f3de:	697b      	ldr	r3, [r7, #20]
 810f3e0:	3301      	adds	r3, #1
 810f3e2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f3e4:	697b      	ldr	r3, [r7, #20]
 810f3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f3ea:	d1e4      	bne.n	810f3b6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 810f3ec:	2300      	movs	r3, #0
 810f3ee:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f3f0:	e7e1      	b.n	810f3b6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f3f2:	78fb      	ldrb	r3, [r7, #3]
 810f3f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f3f8:	00db      	lsls	r3, r3, #3
 810f3fa:	687a      	ldr	r2, [r7, #4]
 810f3fc:	4413      	add	r3, r2
 810f3fe:	3304      	adds	r3, #4
 810f400:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f402:	68bb      	ldr	r3, [r7, #8]
 810f404:	78fa      	ldrb	r2, [r7, #3]
 810f406:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f408:	693b      	ldr	r3, [r7, #16]
 810f40a:	b2da      	uxtb	r2, r3
 810f40c:	68bb      	ldr	r3, [r7, #8]
 810f40e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f410:	68bb      	ldr	r3, [r7, #8]
 810f412:	68fa      	ldr	r2, [r7, #12]
 810f414:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f416:	687a      	ldr	r2, [r7, #4]
 810f418:	697b      	ldr	r3, [r7, #20]
 810f41a:	3380      	adds	r3, #128	; 0x80
 810f41c:	009b      	lsls	r3, r3, #2
 810f41e:	4413      	add	r3, r2
 810f420:	68ba      	ldr	r2, [r7, #8]
 810f422:	605a      	str	r2, [r3, #4]
	return true;
 810f424:	2301      	movs	r3, #1
}
 810f426:	4618      	mov	r0, r3
 810f428:	3718      	adds	r7, #24
 810f42a:	46bd      	mov	sp, r7
 810f42c:	bd80      	pop	{r7, pc}
 810f42e:	bf00      	nop
 810f430:	08114bec 	.word	0x08114bec

0810f434 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f434:	b580      	push	{r7, lr}
 810f436:	b086      	sub	sp, #24
 810f438:	af00      	add	r7, sp, #0
 810f43a:	6078      	str	r0, [r7, #4]
 810f43c:	460b      	mov	r3, r1
 810f43e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f440:	2310      	movs	r3, #16
 810f442:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f444:	4829      	ldr	r0, [pc, #164]	; (810f4ec <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 810f446:	f7ff fbdf 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f44a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f44c:	68fb      	ldr	r3, [r7, #12]
 810f44e:	b2db      	uxtb	r3, r3
 810f450:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f452:	78fb      	ldrb	r3, [r7, #3]
 810f454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f458:	687a      	ldr	r2, [r7, #4]
 810f45a:	00db      	lsls	r3, r3, #3
 810f45c:	4413      	add	r3, r2
 810f45e:	689b      	ldr	r3, [r3, #8]
 810f460:	2b00      	cmp	r3, #0
 810f462:	d001      	beq.n	810f468 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f464:	2300      	movs	r3, #0
 810f466:	e03c      	b.n	810f4e2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f468:	693b      	ldr	r3, [r7, #16]
 810f46a:	2bff      	cmp	r3, #255	; 0xff
 810f46c:	d901      	bls.n	810f472 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 810f46e:	2300      	movs	r3, #0
 810f470:	e037      	b.n	810f4e2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f472:	687a      	ldr	r2, [r7, #4]
 810f474:	697b      	ldr	r3, [r7, #20]
 810f476:	3380      	adds	r3, #128	; 0x80
 810f478:	009b      	lsls	r3, r3, #2
 810f47a:	4413      	add	r3, r2
 810f47c:	685b      	ldr	r3, [r3, #4]
 810f47e:	2b00      	cmp	r3, #0
 810f480:	d015      	beq.n	810f4ae <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f482:	687a      	ldr	r2, [r7, #4]
 810f484:	697b      	ldr	r3, [r7, #20]
 810f486:	3380      	adds	r3, #128	; 0x80
 810f488:	009b      	lsls	r3, r3, #2
 810f48a:	4413      	add	r3, r2
 810f48c:	685b      	ldr	r3, [r3, #4]
 810f48e:	685b      	ldr	r3, [r3, #4]
 810f490:	68fa      	ldr	r2, [r7, #12]
 810f492:	429a      	cmp	r2, r3
 810f494:	d101      	bne.n	810f49a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 810f496:	2300      	movs	r3, #0
 810f498:	e023      	b.n	810f4e2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 810f49a:	697b      	ldr	r3, [r7, #20]
 810f49c:	3301      	adds	r3, #1
 810f49e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f4a0:	697b      	ldr	r3, [r7, #20]
 810f4a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f4a6:	d1e4      	bne.n	810f472 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 810f4a8:	2300      	movs	r3, #0
 810f4aa:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f4ac:	e7e1      	b.n	810f472 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f4ae:	78fb      	ldrb	r3, [r7, #3]
 810f4b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f4b4:	00db      	lsls	r3, r3, #3
 810f4b6:	687a      	ldr	r2, [r7, #4]
 810f4b8:	4413      	add	r3, r2
 810f4ba:	3304      	adds	r3, #4
 810f4bc:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f4be:	68bb      	ldr	r3, [r7, #8]
 810f4c0:	78fa      	ldrb	r2, [r7, #3]
 810f4c2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f4c4:	693b      	ldr	r3, [r7, #16]
 810f4c6:	b2da      	uxtb	r2, r3
 810f4c8:	68bb      	ldr	r3, [r7, #8]
 810f4ca:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f4cc:	68bb      	ldr	r3, [r7, #8]
 810f4ce:	68fa      	ldr	r2, [r7, #12]
 810f4d0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f4d2:	687a      	ldr	r2, [r7, #4]
 810f4d4:	697b      	ldr	r3, [r7, #20]
 810f4d6:	3380      	adds	r3, #128	; 0x80
 810f4d8:	009b      	lsls	r3, r3, #2
 810f4da:	4413      	add	r3, r2
 810f4dc:	68ba      	ldr	r2, [r7, #8]
 810f4de:	605a      	str	r2, [r3, #4]
	return true;
 810f4e0:	2301      	movs	r3, #1
}
 810f4e2:	4618      	mov	r0, r3
 810f4e4:	3718      	adds	r7, #24
 810f4e6:	46bd      	mov	sp, r7
 810f4e8:	bd80      	pop	{r7, pc}
 810f4ea:	bf00      	nop
 810f4ec:	08114bcc 	.word	0x08114bcc

0810f4f0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f4f0:	b580      	push	{r7, lr}
 810f4f2:	b086      	sub	sp, #24
 810f4f4:	af00      	add	r7, sp, #0
 810f4f6:	6078      	str	r0, [r7, #4]
 810f4f8:	460b      	mov	r3, r1
 810f4fa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f4fc:	2305      	movs	r3, #5
 810f4fe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f500:	4829      	ldr	r0, [pc, #164]	; (810f5a8 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 810f502:	f7ff fb81 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f506:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f508:	68fb      	ldr	r3, [r7, #12]
 810f50a:	b2db      	uxtb	r3, r3
 810f50c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f50e:	78fb      	ldrb	r3, [r7, #3]
 810f510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f514:	687a      	ldr	r2, [r7, #4]
 810f516:	00db      	lsls	r3, r3, #3
 810f518:	4413      	add	r3, r2
 810f51a:	689b      	ldr	r3, [r3, #8]
 810f51c:	2b00      	cmp	r3, #0
 810f51e:	d001      	beq.n	810f524 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f520:	2300      	movs	r3, #0
 810f522:	e03c      	b.n	810f59e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f524:	693b      	ldr	r3, [r7, #16]
 810f526:	2bff      	cmp	r3, #255	; 0xff
 810f528:	d901      	bls.n	810f52e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 810f52a:	2300      	movs	r3, #0
 810f52c:	e037      	b.n	810f59e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f52e:	687a      	ldr	r2, [r7, #4]
 810f530:	697b      	ldr	r3, [r7, #20]
 810f532:	3380      	adds	r3, #128	; 0x80
 810f534:	009b      	lsls	r3, r3, #2
 810f536:	4413      	add	r3, r2
 810f538:	685b      	ldr	r3, [r3, #4]
 810f53a:	2b00      	cmp	r3, #0
 810f53c:	d015      	beq.n	810f56a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f53e:	687a      	ldr	r2, [r7, #4]
 810f540:	697b      	ldr	r3, [r7, #20]
 810f542:	3380      	adds	r3, #128	; 0x80
 810f544:	009b      	lsls	r3, r3, #2
 810f546:	4413      	add	r3, r2
 810f548:	685b      	ldr	r3, [r3, #4]
 810f54a:	685b      	ldr	r3, [r3, #4]
 810f54c:	68fa      	ldr	r2, [r7, #12]
 810f54e:	429a      	cmp	r2, r3
 810f550:	d101      	bne.n	810f556 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 810f552:	2300      	movs	r3, #0
 810f554:	e023      	b.n	810f59e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 810f556:	697b      	ldr	r3, [r7, #20]
 810f558:	3301      	adds	r3, #1
 810f55a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f55c:	697b      	ldr	r3, [r7, #20]
 810f55e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f562:	d1e4      	bne.n	810f52e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 810f564:	2300      	movs	r3, #0
 810f566:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f568:	e7e1      	b.n	810f52e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f56a:	78fb      	ldrb	r3, [r7, #3]
 810f56c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f570:	00db      	lsls	r3, r3, #3
 810f572:	687a      	ldr	r2, [r7, #4]
 810f574:	4413      	add	r3, r2
 810f576:	3304      	adds	r3, #4
 810f578:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f57a:	68bb      	ldr	r3, [r7, #8]
 810f57c:	78fa      	ldrb	r2, [r7, #3]
 810f57e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f580:	693b      	ldr	r3, [r7, #16]
 810f582:	b2da      	uxtb	r2, r3
 810f584:	68bb      	ldr	r3, [r7, #8]
 810f586:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f588:	68bb      	ldr	r3, [r7, #8]
 810f58a:	68fa      	ldr	r2, [r7, #12]
 810f58c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f58e:	687a      	ldr	r2, [r7, #4]
 810f590:	697b      	ldr	r3, [r7, #20]
 810f592:	3380      	adds	r3, #128	; 0x80
 810f594:	009b      	lsls	r3, r3, #2
 810f596:	4413      	add	r3, r2
 810f598:	68ba      	ldr	r2, [r7, #8]
 810f59a:	605a      	str	r2, [r3, #4]
	return true;
 810f59c:	2301      	movs	r3, #1
}
 810f59e:	4618      	mov	r0, r3
 810f5a0:	3718      	adds	r7, #24
 810f5a2:	46bd      	mov	sp, r7
 810f5a4:	bd80      	pop	{r7, pc}
 810f5a6:	bf00      	nop
 810f5a8:	08114bac 	.word	0x08114bac

0810f5ac <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f5ac:	b580      	push	{r7, lr}
 810f5ae:	b086      	sub	sp, #24
 810f5b0:	af00      	add	r7, sp, #0
 810f5b2:	6078      	str	r0, [r7, #4]
 810f5b4:	460b      	mov	r3, r1
 810f5b6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f5b8:	2304      	movs	r3, #4
 810f5ba:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f5bc:	4829      	ldr	r0, [pc, #164]	; (810f664 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xb8>)
 810f5be:	f7ff fb23 	bl	810ec08 <_ZNKSt9type_info9hash_codeEv>
 810f5c2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f5c4:	68fb      	ldr	r3, [r7, #12]
 810f5c6:	b2db      	uxtb	r3, r3
 810f5c8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f5ca:	78fb      	ldrb	r3, [r7, #3]
 810f5cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f5d0:	687a      	ldr	r2, [r7, #4]
 810f5d2:	00db      	lsls	r3, r3, #3
 810f5d4:	4413      	add	r3, r2
 810f5d6:	689b      	ldr	r3, [r3, #8]
 810f5d8:	2b00      	cmp	r3, #0
 810f5da:	d001      	beq.n	810f5e0 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x34>
		return false; // Packet ID already in use
 810f5dc:	2300      	movs	r3, #0
 810f5de:	e03c      	b.n	810f65a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f5e0:	693b      	ldr	r3, [r7, #16]
 810f5e2:	2bff      	cmp	r3, #255	; 0xff
 810f5e4:	d901      	bls.n	810f5ea <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
		return false; // Packet size too large
 810f5e6:	2300      	movs	r3, #0
 810f5e8:	e037      	b.n	810f65a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f5ea:	687a      	ldr	r2, [r7, #4]
 810f5ec:	697b      	ldr	r3, [r7, #20]
 810f5ee:	3380      	adds	r3, #128	; 0x80
 810f5f0:	009b      	lsls	r3, r3, #2
 810f5f2:	4413      	add	r3, r2
 810f5f4:	685b      	ldr	r3, [r3, #4]
 810f5f6:	2b00      	cmp	r3, #0
 810f5f8:	d015      	beq.n	810f626 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f5fa:	687a      	ldr	r2, [r7, #4]
 810f5fc:	697b      	ldr	r3, [r7, #20]
 810f5fe:	3380      	adds	r3, #128	; 0x80
 810f600:	009b      	lsls	r3, r3, #2
 810f602:	4413      	add	r3, r2
 810f604:	685b      	ldr	r3, [r3, #4]
 810f606:	685b      	ldr	r3, [r3, #4]
 810f608:	68fa      	ldr	r2, [r7, #12]
 810f60a:	429a      	cmp	r2, r3
 810f60c:	d101      	bne.n	810f612 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x66>
			return false; // Packet type already defined
 810f60e:	2300      	movs	r3, #0
 810f610:	e023      	b.n	810f65a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
		insertion_point++;
 810f612:	697b      	ldr	r3, [r7, #20]
 810f614:	3301      	adds	r3, #1
 810f616:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f618:	697b      	ldr	r3, [r7, #20]
 810f61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f61e:	d1e4      	bne.n	810f5ea <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
			insertion_point = 0;
 810f620:	2300      	movs	r3, #0
 810f622:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f624:	e7e1      	b.n	810f5ea <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f626:	78fb      	ldrb	r3, [r7, #3]
 810f628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f62c:	00db      	lsls	r3, r3, #3
 810f62e:	687a      	ldr	r2, [r7, #4]
 810f630:	4413      	add	r3, r2
 810f632:	3304      	adds	r3, #4
 810f634:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f636:	68bb      	ldr	r3, [r7, #8]
 810f638:	78fa      	ldrb	r2, [r7, #3]
 810f63a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f63c:	693b      	ldr	r3, [r7, #16]
 810f63e:	b2da      	uxtb	r2, r3
 810f640:	68bb      	ldr	r3, [r7, #8]
 810f642:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f644:	68bb      	ldr	r3, [r7, #8]
 810f646:	68fa      	ldr	r2, [r7, #12]
 810f648:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f64a:	687a      	ldr	r2, [r7, #4]
 810f64c:	697b      	ldr	r3, [r7, #20]
 810f64e:	3380      	adds	r3, #128	; 0x80
 810f650:	009b      	lsls	r3, r3, #2
 810f652:	4413      	add	r3, r2
 810f654:	68ba      	ldr	r2, [r7, #8]
 810f656:	605a      	str	r2, [r3, #4]
	return true;
 810f658:	2301      	movs	r3, #1
}
 810f65a:	4618      	mov	r0, r3
 810f65c:	3718      	adds	r7, #24
 810f65e:	46bd      	mov	sp, r7
 810f660:	bd80      	pop	{r7, pc}
 810f662:	bf00      	nop
 810f664:	08114b8c 	.word	0x08114b8c

0810f668 <_ZN10MessageBus4sendEP16PacketDefinitionPh>:
=======
0810d07c <_ZN10MessageBus4sendEP16PacketDefinitionPh>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
<<<<<<< HEAD
 810f668:	b580      	push	{r7, lr}
 810f66a:	b086      	sub	sp, #24
 810f66c:	af00      	add	r7, sp, #0
 810f66e:	60f8      	str	r0, [r7, #12]
 810f670:	60b9      	str	r1, [r7, #8]
 810f672:	607a      	str	r2, [r7, #4]
=======
 810d07c:	b580      	push	{r7, lr}
 810d07e:	b086      	sub	sp, #24
 810d080:	af00      	add	r7, sp, #0
 810d082:	60f8      	str	r0, [r7, #12]
 810d084:	60b9      	str	r1, [r7, #8]
 810d086:	607a      	str	r2, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(def != nullptr) {
<<<<<<< HEAD
 810f674:	68bb      	ldr	r3, [r7, #8]
 810f676:	2b00      	cmp	r3, #0
 810f678:	d031      	beq.n	810f6de <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
=======
 810d088:	68bb      	ldr	r3, [r7, #8]
 810d08a:	2b00      	cmp	r3, #0
 810d08c:	d031      	beq.n	810d0f2 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		uint32_t data_bytes_written = 0;
<<<<<<< HEAD
 810f67a:	2300      	movs	r3, #0
 810f67c:	617b      	str	r3, [r7, #20]
=======
 810d08e:	2300      	movs	r3, #0
 810d090:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		while(data_bytes_written < def->size) {
<<<<<<< HEAD
 810f67e:	68bb      	ldr	r3, [r7, #8]
 810f680:	785b      	ldrb	r3, [r3, #1]
 810f682:	461a      	mov	r2, r3
 810f684:	697b      	ldr	r3, [r7, #20]
 810f686:	4293      	cmp	r3, r2
 810f688:	d227      	bcs.n	810f6da <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
=======
 810d092:	68bb      	ldr	r3, [r7, #8]
 810d094:	785b      	ldrb	r3, [r3, #1]
 810d096:	461a      	mov	r2, r3
 810d098:	697b      	ldr	r3, [r7, #20]
 810d09a:	4293      	cmp	r3, r2
 810d09c:	d227      	bcs.n	810d0ee <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			append(&def->id, 1); // Write the packet ID for each transmission frame.
<<<<<<< HEAD
 810f68a:	68fb      	ldr	r3, [r7, #12]
 810f68c:	681b      	ldr	r3, [r3, #0]
 810f68e:	3308      	adds	r3, #8
 810f690:	681b      	ldr	r3, [r3, #0]
 810f692:	68b9      	ldr	r1, [r7, #8]
 810f694:	2201      	movs	r2, #1
 810f696:	68f8      	ldr	r0, [r7, #12]
 810f698:	4798      	blx	r3
=======
 810d09e:	68fb      	ldr	r3, [r7, #12]
 810d0a0:	681b      	ldr	r3, [r3, #0]
 810d0a2:	3308      	adds	r3, #8
 810d0a4:	681b      	ldr	r3, [r3, #0]
 810d0a6:	68b9      	ldr	r1, [r7, #8]
 810d0a8:	2201      	movs	r2, #1
 810d0aa:	68f8      	ldr	r0, [r7, #12]
 810d0ac:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
<<<<<<< HEAD
 810f69a:	68fb      	ldr	r3, [r7, #12]
 810f69c:	681b      	ldr	r3, [r3, #0]
 810f69e:	3308      	adds	r3, #8
 810f6a0:	681b      	ldr	r3, [r3, #0]
 810f6a2:	6879      	ldr	r1, [r7, #4]
 810f6a4:	697a      	ldr	r2, [r7, #20]
 810f6a6:	4411      	add	r1, r2
 810f6a8:	68ba      	ldr	r2, [r7, #8]
 810f6aa:	7852      	ldrb	r2, [r2, #1]
 810f6ac:	4610      	mov	r0, r2
 810f6ae:	697a      	ldr	r2, [r7, #20]
 810f6b0:	1a82      	subs	r2, r0, r2
 810f6b2:	68f8      	ldr	r0, [r7, #12]
 810f6b4:	4798      	blx	r3
 810f6b6:	4603      	mov	r3, r0
 810f6b8:	613b      	str	r3, [r7, #16]
=======
 810d0ae:	68fb      	ldr	r3, [r7, #12]
 810d0b0:	681b      	ldr	r3, [r3, #0]
 810d0b2:	3308      	adds	r3, #8
 810d0b4:	681b      	ldr	r3, [r3, #0]
 810d0b6:	6879      	ldr	r1, [r7, #4]
 810d0b8:	697a      	ldr	r2, [r7, #20]
 810d0ba:	4411      	add	r1, r2
 810d0bc:	68ba      	ldr	r2, [r7, #8]
 810d0be:	7852      	ldrb	r2, [r2, #1]
 810d0c0:	4610      	mov	r0, r2
 810d0c2:	697a      	ldr	r2, [r7, #20]
 810d0c4:	1a82      	subs	r2, r0, r2
 810d0c6:	68f8      	ldr	r0, [r7, #12]
 810d0c8:	4798      	blx	r3
 810d0ca:	4603      	mov	r3, r0
 810d0cc:	613b      	str	r3, [r7, #16]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

			if(new_bytes == 0) {
<<<<<<< HEAD
 810f6ba:	693b      	ldr	r3, [r7, #16]
 810f6bc:	2b00      	cmp	r3, #0
 810f6be:	d101      	bne.n	810f6c4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
=======
 810d0ce:	693b      	ldr	r3, [r7, #16]
 810d0d0:	2b00      	cmp	r3, #0
 810d0d2:	d101      	bne.n	810d0d8 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				return false;
<<<<<<< HEAD
 810f6c0:	2300      	movs	r3, #0
 810f6c2:	e00d      	b.n	810f6e0 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
=======
 810d0d4:	2300      	movs	r3, #0
 810d0d6:	e00d      	b.n	810d0f4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			} else {
				transmit();
<<<<<<< HEAD
 810f6c4:	68fb      	ldr	r3, [r7, #12]
 810f6c6:	681b      	ldr	r3, [r3, #0]
 810f6c8:	330c      	adds	r3, #12
 810f6ca:	681b      	ldr	r3, [r3, #0]
 810f6cc:	68f8      	ldr	r0, [r7, #12]
 810f6ce:	4798      	blx	r3
=======
 810d0d8:	68fb      	ldr	r3, [r7, #12]
 810d0da:	681b      	ldr	r3, [r3, #0]
 810d0dc:	330c      	adds	r3, #12
 810d0de:	681b      	ldr	r3, [r3, #0]
 810d0e0:	68f8      	ldr	r0, [r7, #12]
 810d0e2:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				data_bytes_written += new_bytes;
<<<<<<< HEAD
 810f6d0:	697a      	ldr	r2, [r7, #20]
 810f6d2:	693b      	ldr	r3, [r7, #16]
 810f6d4:	4413      	add	r3, r2
 810f6d6:	617b      	str	r3, [r7, #20]
=======
 810d0e4:	697a      	ldr	r2, [r7, #20]
 810d0e6:	693b      	ldr	r3, [r7, #16]
 810d0e8:	4413      	add	r3, r2
 810d0ea:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		while(data_bytes_written < def->size) {
<<<<<<< HEAD
 810f6d8:	e7d1      	b.n	810f67e <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
=======
 810d0ec:	e7d1      	b.n	810d092 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}
		}

		return true;
<<<<<<< HEAD
 810f6da:	2301      	movs	r3, #1
 810f6dc:	e000      	b.n	810f6e0 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
=======
 810d0ee:	2301      	movs	r3, #1
 810d0f0:	e000      	b.n	810d0f4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}

	return false;
<<<<<<< HEAD
 810f6de:	2300      	movs	r3, #0
=======
 810d0f2:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810f6e0:	4618      	mov	r0, r3
 810f6e2:	3718      	adds	r7, #24
 810f6e4:	46bd      	mov	sp, r7
 810f6e6:	bd80      	pop	{r7, pc}
=======
 810d0f4:	4618      	mov	r0, r3
 810d0f6:	3718      	adds	r7, #24
 810d0f8:	46bd      	mov	sp, r7
 810d0fa:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810f6e8 <_ZN10MessageBus7receiveEhPhm>:
=======
0810d0fc <_ZN10MessageBus7receiveEhPhm>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
#include "Debug/Debug.h"
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
<<<<<<< HEAD
 810f6e8:	b580      	push	{r7, lr}
 810f6ea:	b088      	sub	sp, #32
 810f6ec:	af00      	add	r7, sp, #0
 810f6ee:	60f8      	str	r0, [r7, #12]
 810f6f0:	607a      	str	r2, [r7, #4]
 810f6f2:	603b      	str	r3, [r7, #0]
 810f6f4:	460b      	mov	r3, r1
 810f6f6:	72fb      	strb	r3, [r7, #11]
=======
 810d0fc:	b580      	push	{r7, lr}
 810d0fe:	b088      	sub	sp, #32
 810d100:	af00      	add	r7, sp, #0
 810d102:	60f8      	str	r0, [r7, #12]
 810d104:	607a      	str	r2, [r7, #4]
 810d106:	603b      	str	r3, [r7, #0]
 810d108:	460b      	mov	r3, r1
 810d10a:	72fb      	strb	r3, [r7, #11]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	if(length > 0) {
<<<<<<< HEAD
 810f6f8:	683b      	ldr	r3, [r7, #0]
 810f6fa:	2b00      	cmp	r3, #0
 810f6fc:	d077      	beq.n	810f7ee <_ZN10MessageBus7receiveEhPhm+0x106>
=======
 810d10c:	683b      	ldr	r3, [r7, #0]
 810d10e:	2b00      	cmp	r3, #0
 810d110:	d077      	beq.n	810d202 <_ZN10MessageBus7receiveEhPhm+0x106>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
<<<<<<< HEAD
 810f6fe:	687b      	ldr	r3, [r7, #4]
 810f700:	1c5a      	adds	r2, r3, #1
 810f702:	607a      	str	r2, [r7, #4]
 810f704:	781b      	ldrb	r3, [r3, #0]
 810f706:	777b      	strb	r3, [r7, #29]
=======
 810d112:	687b      	ldr	r3, [r7, #4]
 810d114:	1c5a      	adds	r2, r3, #1
 810d116:	607a      	str	r2, [r7, #4]
 810d118:	781b      	ldrb	r3, [r3, #0]
 810d11a:	777b      	strb	r3, [r7, #29]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics


		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
<<<<<<< HEAD
 810f708:	7f7b      	ldrb	r3, [r7, #29]
 810f70a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f70e:	00db      	lsls	r3, r3, #3
 810f710:	68fa      	ldr	r2, [r7, #12]
 810f712:	4413      	add	r3, r2
 810f714:	3304      	adds	r3, #4
 810f716:	61bb      	str	r3, [r7, #24]
=======
 810d11c:	7f7b      	ldrb	r3, [r7, #29]
 810d11e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d122:	00db      	lsls	r3, r3, #3
 810d124:	68fa      	ldr	r2, [r7, #12]
 810d126:	4413      	add	r3, r2
 810d128:	3304      	adds	r3, #4
 810d12a:	61bb      	str	r3, [r7, #24]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
<<<<<<< HEAD
 810f718:	7afb      	ldrb	r3, [r7, #11]
 810f71a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f71e:	3306      	adds	r3, #6
 810f720:	021b      	lsls	r3, r3, #8
 810f722:	68fa      	ldr	r2, [r7, #12]
 810f724:	4413      	add	r3, r2
 810f726:	3304      	adds	r3, #4
 810f728:	617b      	str	r3, [r7, #20]
=======
 810d12c:	7afb      	ldrb	r3, [r7, #11]
 810d12e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d132:	3306      	adds	r3, #6
 810d134:	021b      	lsls	r3, r3, #8
 810d136:	68fa      	ldr	r2, [r7, #12]
 810d138:	4413      	add	r3, r2
 810d13a:	3304      	adds	r3, #4
 810d13c:	617b      	str	r3, [r7, #20]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if(indexable_buffer->index + length > max_packet_size) {
<<<<<<< HEAD
 810f72a:	697b      	ldr	r3, [r7, #20]
 810f72c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 810f730:	461a      	mov	r2, r3
 810f732:	683b      	ldr	r3, [r7, #0]
 810f734:	4413      	add	r3, r2
 810f736:	2bff      	cmp	r3, #255	; 0xff
 810f738:	d904      	bls.n	810f744 <_ZN10MessageBus7receiveEhPhm+0x5c>
=======
 810d13e:	697b      	ldr	r3, [r7, #20]
 810d140:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 810d144:	461a      	mov	r2, r3
 810d146:	683b      	ldr	r3, [r7, #0]
 810d148:	4413      	add	r3, r2
 810d14a:	2bff      	cmp	r3, #255	; 0xff
 810d14c:	d904      	bls.n	810d158 <_ZN10MessageBus7receiveEhPhm+0x5c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			indexable_buffer->index = 0; // Corrupted packet
<<<<<<< HEAD
 810f73a:	697b      	ldr	r3, [r7, #20]
 810f73c:	2200      	movs	r2, #0
 810f73e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
=======
 810d14e:	697b      	ldr	r3, [r7, #20]
 810d150:	2200      	movs	r2, #0
 810d152:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			return;
<<<<<<< HEAD
 810f742:	e054      	b.n	810f7ee <_ZN10MessageBus7receiveEhPhm+0x106>
=======
 810d156:	e054      	b.n	810d202 <_ZN10MessageBus7receiveEhPhm+0x106>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		for(uint16_t i = 0; i < length - 1; i++) {
<<<<<<< HEAD
 810f744:	2300      	movs	r3, #0
 810f746:	83fb      	strh	r3, [r7, #30]
 810f748:	8bfa      	ldrh	r2, [r7, #30]
 810f74a:	683b      	ldr	r3, [r7, #0]
 810f74c:	3b01      	subs	r3, #1
 810f74e:	429a      	cmp	r2, r3
 810f750:	d211      	bcs.n	810f776 <_ZN10MessageBus7receiveEhPhm+0x8e>
=======
 810d158:	2300      	movs	r3, #0
 810d15a:	83fb      	strh	r3, [r7, #30]
 810d15c:	8bfa      	ldrh	r2, [r7, #30]
 810d15e:	683b      	ldr	r3, [r7, #0]
 810d160:	3b01      	subs	r3, #1
 810d162:	429a      	cmp	r2, r3
 810d164:	d211      	bcs.n	810d18a <_ZN10MessageBus7receiveEhPhm+0x8e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
<<<<<<< HEAD
 810f752:	687b      	ldr	r3, [r7, #4]
 810f754:	1c5a      	adds	r2, r3, #1
 810f756:	607a      	str	r2, [r7, #4]
 810f758:	697a      	ldr	r2, [r7, #20]
 810f75a:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 810f75e:	1c51      	adds	r1, r2, #1
 810f760:	b2c8      	uxtb	r0, r1
 810f762:	6979      	ldr	r1, [r7, #20]
 810f764:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 810f768:	7819      	ldrb	r1, [r3, #0]
 810f76a:	697b      	ldr	r3, [r7, #20]
 810f76c:	5499      	strb	r1, [r3, r2]
=======
 810d166:	687b      	ldr	r3, [r7, #4]
 810d168:	1c5a      	adds	r2, r3, #1
 810d16a:	607a      	str	r2, [r7, #4]
 810d16c:	697a      	ldr	r2, [r7, #20]
 810d16e:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 810d172:	1c51      	adds	r1, r2, #1
 810d174:	b2c8      	uxtb	r0, r1
 810d176:	6979      	ldr	r1, [r7, #20]
 810d178:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 810d17c:	7819      	ldrb	r1, [r3, #0]
 810d17e:	697b      	ldr	r3, [r7, #20]
 810d180:	5499      	strb	r1, [r3, r2]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		for(uint16_t i = 0; i < length - 1; i++) {
<<<<<<< HEAD
 810f76e:	8bfb      	ldrh	r3, [r7, #30]
 810f770:	3301      	adds	r3, #1
 810f772:	83fb      	strh	r3, [r7, #30]
 810f774:	e7e8      	b.n	810f748 <_ZN10MessageBus7receiveEhPhm+0x60>
=======
 810d182:	8bfb      	ldrh	r3, [r7, #30]
 810d184:	3301      	adds	r3, #1
 810d186:	83fb      	strh	r3, [r7, #30]
 810d188:	e7e8      	b.n	810d15c <_ZN10MessageBus7receiveEhPhm+0x60>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		if(indexable_buffer->index >= def->size) {
<<<<<<< HEAD
 810f776:	697b      	ldr	r3, [r7, #20]
 810f778:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 810f77c:	69bb      	ldr	r3, [r7, #24]
 810f77e:	785b      	ldrb	r3, [r3, #1]
 810f780:	429a      	cmp	r2, r3
 810f782:	d334      	bcc.n	810f7ee <_ZN10MessageBus7receiveEhPhm+0x106>
=======
 810d18a:	697b      	ldr	r3, [r7, #20]
 810d18c:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 810d190:	69bb      	ldr	r3, [r7, #24]
 810d192:	785b      	ldrb	r3, [r3, #1]
 810d194:	429a      	cmp	r2, r3
 810d196:	d334      	bcc.n	810d202 <_ZN10MessageBus7receiveEhPhm+0x106>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
<<<<<<< HEAD
 810f784:	7f7b      	ldrb	r3, [r7, #29]
 810f786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f78a:	68fa      	ldr	r2, [r7, #12]
 810f78c:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810f790:	009b      	lsls	r3, r3, #2
 810f792:	4413      	add	r3, r2
 810f794:	685b      	ldr	r3, [r3, #4]
 810f796:	2b00      	cmp	r3, #0
 810f798:	d00c      	beq.n	810f7b4 <_ZN10MessageBus7receiveEhPhm+0xcc>
=======
 810d198:	7f7b      	ldrb	r3, [r7, #29]
 810d19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d19e:	68fa      	ldr	r2, [r7, #12]
 810d1a0:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810d1a4:	009b      	lsls	r3, r3, #2
 810d1a6:	4413      	add	r3, r2
 810d1a8:	685b      	ldr	r3, [r3, #4]
 810d1aa:	2b00      	cmp	r3, #0
 810d1ac:	d00c      	beq.n	810d1c8 <_ZN10MessageBus7receiveEhPhm+0xcc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
<<<<<<< HEAD
 810f79a:	7f7b      	ldrb	r3, [r7, #29]
 810f79c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f7a0:	68fa      	ldr	r2, [r7, #12]
 810f7a2:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810f7a6:	009b      	lsls	r3, r3, #2
 810f7a8:	4413      	add	r3, r2
 810f7aa:	685b      	ldr	r3, [r3, #4]
 810f7ac:	6979      	ldr	r1, [r7, #20]
 810f7ae:	7afa      	ldrb	r2, [r7, #11]
 810f7b0:	4610      	mov	r0, r2
 810f7b2:	4798      	blx	r3
=======
 810d1ae:	7f7b      	ldrb	r3, [r7, #29]
 810d1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d1b4:	68fa      	ldr	r2, [r7, #12]
 810d1b6:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810d1ba:	009b      	lsls	r3, r3, #2
 810d1bc:	4413      	add	r3, r2
 810d1be:	685b      	ldr	r3, [r3, #4]
 810d1c0:	6979      	ldr	r1, [r7, #20]
 810d1c2:	7afa      	ldrb	r2, [r7, #11]
 810d1c4:	4610      	mov	r0, r2
 810d1c6:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
<<<<<<< HEAD
 810f7b4:	7f7b      	ldrb	r3, [r7, #29]
 810f7b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f7ba:	68fa      	ldr	r2, [r7, #12]
 810f7bc:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810f7c0:	009b      	lsls	r3, r3, #2
 810f7c2:	4413      	add	r3, r2
 810f7c4:	685b      	ldr	r3, [r3, #4]
 810f7c6:	2b00      	cmp	r3, #0
 810f7c8:	d00d      	beq.n	810f7e6 <_ZN10MessageBus7receiveEhPhm+0xfe>
=======
 810d1c8:	7f7b      	ldrb	r3, [r7, #29]
 810d1ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d1ce:	68fa      	ldr	r2, [r7, #12]
 810d1d0:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810d1d4:	009b      	lsls	r3, r3, #2
 810d1d6:	4413      	add	r3, r2
 810d1d8:	685b      	ldr	r3, [r3, #4]
 810d1da:	2b00      	cmp	r3, #0
 810d1dc:	d00d      	beq.n	810d1fa <_ZN10MessageBus7receiveEhPhm+0xfe>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
<<<<<<< HEAD
 810f7ca:	7f7b      	ldrb	r3, [r7, #29]
 810f7cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f7d0:	68fa      	ldr	r2, [r7, #12]
 810f7d2:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810f7d6:	009b      	lsls	r3, r3, #2
 810f7d8:	4413      	add	r3, r2
 810f7da:	685b      	ldr	r3, [r3, #4]
 810f7dc:	697a      	ldr	r2, [r7, #20]
 810f7de:	69b9      	ldr	r1, [r7, #24]
 810f7e0:	4618      	mov	r0, r3
 810f7e2:	f7ff ff41 	bl	810f668 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
=======
 810d1de:	7f7b      	ldrb	r3, [r7, #29]
 810d1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d1e4:	68fa      	ldr	r2, [r7, #12]
 810d1e6:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810d1ea:	009b      	lsls	r3, r3, #2
 810d1ec:	4413      	add	r3, r2
 810d1ee:	685b      	ldr	r3, [r3, #4]
 810d1f0:	697a      	ldr	r2, [r7, #20]
 810d1f2:	69b9      	ldr	r1, [r7, #24]
 810d1f4:	4618      	mov	r0, r3
 810d1f6:	f7ff ff41 	bl	810d07c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			}

			indexable_buffer->index = 0;
<<<<<<< HEAD
 810f7e6:	697b      	ldr	r3, [r7, #20]
 810f7e8:	2200      	movs	r2, #0
 810f7ea:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
=======
 810d1fa:	697b      	ldr	r3, [r7, #20]
 810d1fc:	2200      	movs	r2, #0
 810d1fe:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}
}
<<<<<<< HEAD
 810f7ee:	3720      	adds	r7, #32
 810f7f0:	46bd      	mov	sp, r7
 810f7f2:	bd80      	pop	{r7, pc}
=======
 810d202:	3720      	adds	r7, #32
 810d204:	46bd      	mov	sp, r7
 810d206:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810f7f4 <_ZN10MessageBus8retrieveEj>:
=======
0810d208 <_ZN10MessageBus8retrieveEj>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
<<<<<<< HEAD
 810f7f4:	b480      	push	{r7}
 810f7f6:	b085      	sub	sp, #20
 810f7f8:	af00      	add	r7, sp, #0
 810f7fa:	6078      	str	r0, [r7, #4]
 810f7fc:	6039      	str	r1, [r7, #0]
=======
 810d208:	b480      	push	{r7}
 810d20a:	b085      	sub	sp, #20
 810d20c:	af00      	add	r7, sp, #0
 810d20e:	6078      	str	r0, [r7, #4]
 810d210:	6039      	str	r1, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uint32_t searchPoint = hash % 256;
<<<<<<< HEAD
 810f7fe:	683b      	ldr	r3, [r7, #0]
 810f800:	b2db      	uxtb	r3, r3
 810f802:	60fb      	str	r3, [r7, #12]
=======
 810d212:	683b      	ldr	r3, [r7, #0]
 810d214:	b2db      	uxtb	r3, r3
 810d216:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	uint32_t searchStart = searchPoint;
<<<<<<< HEAD
 810f804:	68fb      	ldr	r3, [r7, #12]
 810f806:	60bb      	str	r3, [r7, #8]
=======
 810d218:	68fb      	ldr	r3, [r7, #12]
 810d21a:	60bb      	str	r3, [r7, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	while(definitions_by_type[searchPoint] != nullptr) {
<<<<<<< HEAD
 810f808:	687a      	ldr	r2, [r7, #4]
 810f80a:	68fb      	ldr	r3, [r7, #12]
 810f80c:	3380      	adds	r3, #128	; 0x80
 810f80e:	009b      	lsls	r3, r3, #2
 810f810:	4413      	add	r3, r2
 810f812:	685b      	ldr	r3, [r3, #4]
 810f814:	2b00      	cmp	r3, #0
 810f816:	d01f      	beq.n	810f858 <_ZN10MessageBus8retrieveEj+0x64>
=======
 810d21c:	687a      	ldr	r2, [r7, #4]
 810d21e:	68fb      	ldr	r3, [r7, #12]
 810d220:	3380      	adds	r3, #128	; 0x80
 810d222:	009b      	lsls	r3, r3, #2
 810d224:	4413      	add	r3, r2
 810d226:	685b      	ldr	r3, [r3, #4]
 810d228:	2b00      	cmp	r3, #0
 810d22a:	d01f      	beq.n	810d26c <_ZN10MessageBus8retrieveEj+0x64>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		if(definitions_by_type[searchPoint]->hash == hash) {
<<<<<<< HEAD
 810f818:	687a      	ldr	r2, [r7, #4]
 810f81a:	68fb      	ldr	r3, [r7, #12]
 810f81c:	3380      	adds	r3, #128	; 0x80
 810f81e:	009b      	lsls	r3, r3, #2
 810f820:	4413      	add	r3, r2
 810f822:	685b      	ldr	r3, [r3, #4]
 810f824:	685b      	ldr	r3, [r3, #4]
 810f826:	683a      	ldr	r2, [r7, #0]
 810f828:	429a      	cmp	r2, r3
 810f82a:	d106      	bne.n	810f83a <_ZN10MessageBus8retrieveEj+0x46>
=======
 810d22c:	687a      	ldr	r2, [r7, #4]
 810d22e:	68fb      	ldr	r3, [r7, #12]
 810d230:	3380      	adds	r3, #128	; 0x80
 810d232:	009b      	lsls	r3, r3, #2
 810d234:	4413      	add	r3, r2
 810d236:	685b      	ldr	r3, [r3, #4]
 810d238:	685b      	ldr	r3, [r3, #4]
 810d23a:	683a      	ldr	r2, [r7, #0]
 810d23c:	429a      	cmp	r2, r3
 810d23e:	d106      	bne.n	810d24e <_ZN10MessageBus8retrieveEj+0x46>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			return definitions_by_type[searchPoint];
<<<<<<< HEAD
 810f82c:	687a      	ldr	r2, [r7, #4]
 810f82e:	68fb      	ldr	r3, [r7, #12]
 810f830:	3380      	adds	r3, #128	; 0x80
 810f832:	009b      	lsls	r3, r3, #2
 810f834:	4413      	add	r3, r2
 810f836:	685b      	ldr	r3, [r3, #4]
 810f838:	e00f      	b.n	810f85a <_ZN10MessageBus8retrieveEj+0x66>
=======
 810d240:	687a      	ldr	r2, [r7, #4]
 810d242:	68fb      	ldr	r3, [r7, #12]
 810d244:	3380      	adds	r3, #128	; 0x80
 810d246:	009b      	lsls	r3, r3, #2
 810d248:	4413      	add	r3, r2
 810d24a:	685b      	ldr	r3, [r3, #4]
 810d24c:	e00f      	b.n	810d26e <_ZN10MessageBus8retrieveEj+0x66>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		searchPoint++;
<<<<<<< HEAD
 810f83a:	68fb      	ldr	r3, [r7, #12]
 810f83c:	3301      	adds	r3, #1
 810f83e:	60fb      	str	r3, [r7, #12]
=======
 810d24e:	68fb      	ldr	r3, [r7, #12]
 810d250:	3301      	adds	r3, #1
 810d252:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

		if(searchPoint == 256) {
<<<<<<< HEAD
 810f840:	68fb      	ldr	r3, [r7, #12]
 810f842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f846:	d101      	bne.n	810f84c <_ZN10MessageBus8retrieveEj+0x58>
=======
 810d254:	68fb      	ldr	r3, [r7, #12]
 810d256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d25a:	d101      	bne.n	810d260 <_ZN10MessageBus8retrieveEj+0x58>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			searchPoint = 0;
<<<<<<< HEAD
 810f848:	2300      	movs	r3, #0
 810f84a:	60fb      	str	r3, [r7, #12]
=======
 810d25c:	2300      	movs	r3, #0
 810d25e:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}

		if(searchStart == searchPoint) {
<<<<<<< HEAD
 810f84c:	68ba      	ldr	r2, [r7, #8]
 810f84e:	68fb      	ldr	r3, [r7, #12]
 810f850:	429a      	cmp	r2, r3
 810f852:	d000      	beq.n	810f856 <_ZN10MessageBus8retrieveEj+0x62>
=======
 810d260:	68ba      	ldr	r2, [r7, #8]
 810d262:	68fb      	ldr	r3, [r7, #12]
 810d264:	429a      	cmp	r2, r3
 810d266:	d000      	beq.n	810d26a <_ZN10MessageBus8retrieveEj+0x62>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	while(definitions_by_type[searchPoint] != nullptr) {
<<<<<<< HEAD
 810f854:	e7d8      	b.n	810f808 <_ZN10MessageBus8retrieveEj+0x14>
=======
 810d268:	e7d8      	b.n	810d21c <_ZN10MessageBus8retrieveEj+0x14>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
			break; // No packet definition matching the given template type
<<<<<<< HEAD
 810f856:	bf00      	nop
=======
 810d26a:	bf00      	nop
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		}
	}

	return nullptr;
<<<<<<< HEAD
 810f858:	2300      	movs	r3, #0
=======
 810d26c:	2300      	movs	r3, #0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810f85a:	4618      	mov	r0, r3
 810f85c:	3714      	adds	r7, #20
 810f85e:	46bd      	mov	sp, r7
 810f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f864:	4770      	bx	lr
=======
 810d26e:	4618      	mov	r0, r3
 810d270:	3714      	adds	r7, #20
 810d272:	46bd      	mov	sp, r7
 810d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d278:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810f868 <_ZN10NetworkBusC1EP8IODriver>:
=======
0810d27c <_ZN10NetworkBusC1EP8IODriver>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
<<<<<<< HEAD
 810f868:	b580      	push	{r7, lr}
 810f86a:	b082      	sub	sp, #8
 810f86c:	af00      	add	r7, sp, #0
 810f86e:	6078      	str	r0, [r7, #4]
 810f870:	6039      	str	r1, [r7, #0]
 810f872:	6878      	ldr	r0, [r7, #4]
 810f874:	687b      	ldr	r3, [r7, #4]
 810f876:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 810f87a:	3211      	adds	r2, #17
 810f87c:	f44f 7380 	mov.w	r3, #256	; 0x100
 810f880:	6839      	ldr	r1, [r7, #0]
 810f882:	f7fe f90b 	bl	810da9c <_ZN5IOBusC1EP8IODriverPhm>
 810f886:	4a24      	ldr	r2, [pc, #144]	; (810f918 <_ZN10NetworkBusC1EP8IODriver+0xb0>)
 810f888:	687b      	ldr	r3, [r7, #4]
 810f88a:	601a      	str	r2, [r3, #0]
=======
 810d27c:	b580      	push	{r7, lr}
 810d27e:	b082      	sub	sp, #8
 810d280:	af00      	add	r7, sp, #0
 810d282:	6078      	str	r0, [r7, #4]
 810d284:	6039      	str	r1, [r7, #0]
 810d286:	6878      	ldr	r0, [r7, #4]
 810d288:	687b      	ldr	r3, [r7, #4]
 810d28a:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 810d28e:	3211      	adds	r2, #17
 810d290:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d294:	6839      	ldr	r1, [r7, #0]
 810d296:	f7fe f94b 	bl	810b530 <_ZN5IOBusC1EP8IODriverPhm>
 810d29a:	4a24      	ldr	r2, [pc, #144]	; (810d32c <_ZN10NetworkBusC1EP8IODriver+0xb0>)
 810d29c:	687b      	ldr	r3, [r7, #4]
 810d29e:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<PingPacket>(0);
<<<<<<< HEAD
 810f88c:	687b      	ldr	r3, [r7, #4]
 810f88e:	2100      	movs	r1, #0
 810f890:	4618      	mov	r0, r3
 810f892:	f7ff f9d5 	bl	810ec40 <_ZN10MessageBus6defineI10PingPacketEEbh>
=======
 810d2a0:	687b      	ldr	r3, [r7, #4]
 810d2a2:	2100      	movs	r1, #0
 810d2a4:	4618      	mov	r0, r3
 810d2a6:	f7ff fa09 	bl	810c6bc <_ZN10MessageBus6defineI10PingPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<RequestPacket>(1);
<<<<<<< HEAD
 810f896:	687b      	ldr	r3, [r7, #4]
 810f898:	2101      	movs	r1, #1
 810f89a:	4618      	mov	r0, r3
 810f89c:	f7ff fa2e 	bl	810ecfc <_ZN10MessageBus6defineI13RequestPacketEEbh>
=======
 810d2aa:	687b      	ldr	r3, [r7, #4]
 810d2ac:	2101      	movs	r1, #1
 810d2ae:	4618      	mov	r0, r3
 810d2b0:	f7ff fa62 	bl	810c778 <_ZN10MessageBus6defineI13RequestPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<ResponsePacket>(2);
<<<<<<< HEAD
 810f8a0:	687b      	ldr	r3, [r7, #4]
 810f8a2:	2102      	movs	r1, #2
 810f8a4:	4618      	mov	r0, r3
 810f8a6:	f7ff fa87 	bl	810edb8 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
=======
 810d2b4:	687b      	ldr	r3, [r7, #4]
 810d2b6:	2102      	movs	r1, #2
 810d2b8:	4618      	mov	r0, r3
 810d2ba:	f7ff fabb 	bl	810c834 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<ProgressPacket>(3);
<<<<<<< HEAD
 810f8aa:	687b      	ldr	r3, [r7, #4]
 810f8ac:	2103      	movs	r1, #3
 810f8ae:	4618      	mov	r0, r3
 810f8b0:	f7ff fae0 	bl	810ee74 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
=======
 810d2be:	687b      	ldr	r3, [r7, #4]
 810d2c0:	2103      	movs	r1, #3
 810d2c2:	4618      	mov	r0, r3
 810d2c4:	f7ff fb14 	bl	810c8f0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<DataPacket>(4);
<<<<<<< HEAD
 810f8b4:	687b      	ldr	r3, [r7, #4]
 810f8b6:	2104      	movs	r1, #4
 810f8b8:	4618      	mov	r0, r3
 810f8ba:	f7ff fb39 	bl	810ef30 <_ZN10MessageBus6defineI10DataPacketEEbh>
=======
 810d2c8:	687b      	ldr	r3, [r7, #4]
 810d2ca:	2104      	movs	r1, #4
 810d2cc:	4618      	mov	r0, r3
 810d2ce:	f7ff fb6d 	bl	810c9ac <_ZN10MessageBus6defineI10DataPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<Avionics_BaroTempPacket>(5);
<<<<<<< HEAD
 810f8be:	687b      	ldr	r3, [r7, #4]
 810f8c0:	2105      	movs	r1, #5
 810f8c2:	4618      	mov	r0, r3
 810f8c4:	f7ff fbf0 	bl	810f0a8 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
=======
 810d2d2:	687b      	ldr	r3, [r7, #4]
 810d2d4:	2105      	movs	r1, #5
 810d2d6:	4618      	mov	r0, r3
 810d2d8:	f7ff fc24 	bl	810cb24 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<Avionics_AccelMagPacket>(6);
<<<<<<< HEAD
 810f8c8:	687b      	ldr	r3, [r7, #4]
 810f8ca:	2106      	movs	r1, #6
 810f8cc:	4618      	mov	r0, r3
 810f8ce:	f7ff fc63 	bl	810f198 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
=======
 810d2dc:	687b      	ldr	r3, [r7, #4]
 810d2de:	2106      	movs	r1, #6
 810d2e0:	4618      	mov	r0, r3
 810d2e2:	f7ff fc7d 	bl	810cbe0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<Handling_GripperPacket>(7);
<<<<<<< HEAD
 810f8d2:	687b      	ldr	r3, [r7, #4]
 810f8d4:	2107      	movs	r1, #7
 810f8d6:	4618      	mov	r0, r3
 810f8d8:	f7ff fcd6 	bl	810f288 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>
=======
 810d2e6:	687b      	ldr	r3, [r7, #4]
 810d2e8:	2107      	movs	r1, #7
 810d2ea:	4618      	mov	r0, r3
 810d2ec:	f7ff fcd6 	bl	810cc9c <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<Power_VoltagePacket>(8);
<<<<<<< HEAD
 810f8dc:	687b      	ldr	r3, [r7, #4]
 810f8de:	2108      	movs	r1, #8
 810f8e0:	4618      	mov	r0, r3
 810f8e2:	f7ff fd49 	bl	810f378 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
=======
 810d2f0:	687b      	ldr	r3, [r7, #4]
 810d2f2:	2108      	movs	r1, #8
 810d2f4:	4618      	mov	r0, r3
 810d2f6:	f7ff fd2f 	bl	810cd58 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<Power_CurrentPacket>(9);
<<<<<<< HEAD
 810f8e6:	687b      	ldr	r3, [r7, #4]
 810f8e8:	2109      	movs	r1, #9
 810f8ea:	4618      	mov	r0, r3
 810f8ec:	f7ff fda2 	bl	810f434 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
=======
 810d2fa:	687b      	ldr	r3, [r7, #4]
 810d2fc:	2109      	movs	r1, #9
 810d2fe:	4618      	mov	r0, r3
 810d300:	f7ff fd88 	bl	810ce14 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<Power_SystemPacket>(10);
<<<<<<< HEAD
 810f8f0:	687b      	ldr	r3, [r7, #4]
 810f8f2:	210a      	movs	r1, #10
 810f8f4:	4618      	mov	r0, r3
 810f8f6:	f7ff fdfb 	bl	810f4f0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
=======
 810d304:	687b      	ldr	r3, [r7, #4]
 810d306:	210a      	movs	r1, #10
 810d308:	4618      	mov	r0, r3
 810d30a:	f7ff fde1 	bl	810ced0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<Science_MeasurePacket>(11);
<<<<<<< HEAD
 810f8fa:	687b      	ldr	r3, [r7, #4]
 810f8fc:	210b      	movs	r1, #11
 810f8fe:	4618      	mov	r0, r3
 810f900:	f7ff fe54 	bl	810f5ac <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>
=======
 810d30e:	687b      	ldr	r3, [r7, #4]
 810d310:	210b      	movs	r1, #11
 810d312:	4618      	mov	r0, r3
 810d314:	f7ff fe3a 	bl	810cf8c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	define<ErrorPacket>(63);
<<<<<<< HEAD
 810f904:	687b      	ldr	r3, [r7, #4]
 810f906:	213f      	movs	r1, #63	; 0x3f
 810f908:	4618      	mov	r0, r3
 810f90a:	f7ff fb6f 	bl	810efec <_ZN10MessageBus6defineI11ErrorPacketEEbh>
=======
 810d318:	687b      	ldr	r3, [r7, #4]
 810d31a:	213f      	movs	r1, #63	; 0x3f
 810d31c:	4618      	mov	r0, r3
 810d31e:	f7ff fba3 	bl	810ca68 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810f90e:	687b      	ldr	r3, [r7, #4]
 810f910:	4618      	mov	r0, r3
 810f912:	3708      	adds	r7, #8
 810f914:	46bd      	mov	sp, r7
 810f916:	bd80      	pop	{r7, pc}
 810f918:	08114d18 	.word	0x08114d18
=======
 810d322:	687b      	ldr	r3, [r7, #4]
 810d324:	4618      	mov	r0, r3
 810d326:	3708      	adds	r7, #8
 810d328:	46bd      	mov	sp, r7
 810d32a:	bd80      	pop	{r7, pc}
 810d32c:	08110d0c 	.word	0x08110d0c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810f91c <_ZN10NetworkBusD1Ev>:
=======
0810d330 <_ZN10NetworkBusD1Ev>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
<<<<<<< HEAD
 810f91c:	b580      	push	{r7, lr}
 810f91e:	b082      	sub	sp, #8
 810f920:	af00      	add	r7, sp, #0
 810f922:	6078      	str	r0, [r7, #4]
 810f924:	4a05      	ldr	r2, [pc, #20]	; (810f93c <_ZN10NetworkBusD1Ev+0x20>)
 810f926:	687b      	ldr	r3, [r7, #4]
 810f928:	601a      	str	r2, [r3, #0]
 810f92a:	687b      	ldr	r3, [r7, #4]
 810f92c:	4618      	mov	r0, r3
 810f92e:	f7ff f933 	bl	810eb98 <_ZN5IOBusD1Ev>
 810f932:	687b      	ldr	r3, [r7, #4]
 810f934:	4618      	mov	r0, r3
 810f936:	3708      	adds	r7, #8
 810f938:	46bd      	mov	sp, r7
 810f93a:	bd80      	pop	{r7, pc}
 810f93c:	08114d18 	.word	0x08114d18
=======
 810d330:	b580      	push	{r7, lr}
 810d332:	b082      	sub	sp, #8
 810d334:	af00      	add	r7, sp, #0
 810d336:	6078      	str	r0, [r7, #4]
 810d338:	4a05      	ldr	r2, [pc, #20]	; (810d350 <_ZN10NetworkBusD1Ev+0x20>)
 810d33a:	687b      	ldr	r3, [r7, #4]
 810d33c:	601a      	str	r2, [r3, #0]
 810d33e:	687b      	ldr	r3, [r7, #4]
 810d340:	4618      	mov	r0, r3
 810d342:	f7ff f967 	bl	810c614 <_ZN5IOBusD1Ev>
 810d346:	687b      	ldr	r3, [r7, #4]
 810d348:	4618      	mov	r0, r3
 810d34a:	3708      	adds	r7, #8
 810d34c:	46bd      	mov	sp, r7
 810d34e:	bd80      	pop	{r7, pc}
 810d350:	08110d0c 	.word	0x08110d0c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810f940 <_ZN10NetworkBusD0Ev>:
 810f940:	b580      	push	{r7, lr}
 810f942:	b082      	sub	sp, #8
 810f944:	af00      	add	r7, sp, #0
 810f946:	6078      	str	r0, [r7, #4]
 810f948:	6878      	ldr	r0, [r7, #4]
 810f94a:	f7ff ffe7 	bl	810f91c <_ZN10NetworkBusD1Ev>
 810f94e:	f644 1114 	movw	r1, #18708	; 0x4914
 810f952:	6878      	ldr	r0, [r7, #4]
 810f954:	f001 f8a4 	bl	8110aa0 <_ZdlPvj>
 810f958:	687b      	ldr	r3, [r7, #4]
 810f95a:	4618      	mov	r0, r3
 810f95c:	3708      	adds	r7, #8
 810f95e:	46bd      	mov	sp, r7
 810f960:	bd80      	pop	{r7, pc}
=======
0810d354 <_ZN10NetworkBusD0Ev>:
 810d354:	b580      	push	{r7, lr}
 810d356:	b082      	sub	sp, #8
 810d358:	af00      	add	r7, sp, #0
 810d35a:	6078      	str	r0, [r7, #4]
 810d35c:	6878      	ldr	r0, [r7, #4]
 810d35e:	f7ff ffe7 	bl	810d330 <_ZN10NetworkBusD1Ev>
 810d362:	f644 1114 	movw	r1, #18708	; 0x4914
 810d366:	6878      	ldr	r0, [r7, #4]
 810d368:	f000 fd81 	bl	810de6e <_ZdlPvj>
 810d36c:	687b      	ldr	r3, [r7, #4]
 810d36e:	4618      	mov	r0, r3
 810d370:	3708      	adds	r7, #8
 810d372:	46bd      	mov	sp, r7
 810d374:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810f962 <_ZN14WatchdogThread4initEv>:
=======
0810d376 <_ZN14WatchdogThread4initEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
<<<<<<< HEAD
 810f962:	b480      	push	{r7}
 810f964:	b083      	sub	sp, #12
 810f966:	af00      	add	r7, sp, #0
 810f968:	6078      	str	r0, [r7, #4]
=======
 810d376:	b480      	push	{r7}
 810d378:	b083      	sub	sp, #12
 810d37a:	af00      	add	r7, sp, #0
 810d37c:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

}
<<<<<<< HEAD
 810f96a:	bf00      	nop
 810f96c:	370c      	adds	r7, #12
 810f96e:	46bd      	mov	sp, r7
 810f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f974:	4770      	bx	lr
=======
 810d37e:	bf00      	nop
 810d380:	370c      	adds	r7, #12
 810d382:	46bd      	mov	sp, r7
 810d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d388:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810f976 <_ZN14WatchdogThread4loopEv>:
=======
0810d38a <_ZN14WatchdogThread4loopEv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void WatchdogThread::loop() {
<<<<<<< HEAD
 810f976:	b580      	push	{r7, lr}
 810f978:	b082      	sub	sp, #8
 810f97a:	af00      	add	r7, sp, #0
 810f97c:	6078      	str	r0, [r7, #4]
=======
 810d38a:	b580      	push	{r7, lr}
 810d38c:	b082      	sub	sp, #8
 810d38e:	af00      	add	r7, sp, #0
 810d390:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	HAL_IWDG_Refresh(watchdog_handle);
<<<<<<< HEAD
 810f97e:	687b      	ldr	r3, [r7, #4]
 810f980:	691b      	ldr	r3, [r3, #16]
 810f982:	4618      	mov	r0, r3
 810f984:	f7f6 fdb4 	bl	81064f0 <HAL_IWDG_Refresh>
	osDelay(100 / portTICK_PERIOD_MS);
 810f988:	2064      	movs	r0, #100	; 0x64
 810f98a:	f7f9 fcf9 	bl	8109380 <osDelay>
=======
 810d392:	687b      	ldr	r3, [r7, #4]
 810d394:	68db      	ldr	r3, [r3, #12]
 810d396:	4618      	mov	r0, r3
 810d398:	f7f7 ff16 	bl	81051c8 <HAL_IWDG_Refresh>
	osDelay(100);
 810d39c:	2064      	movs	r0, #100	; 0x64
 810d39e:	f7fa fe8b 	bl	81080b8 <osDelay>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810f98e:	bf00      	nop
 810f990:	3708      	adds	r7, #8
 810f992:	46bd      	mov	sp, r7
 810f994:	bd80      	pop	{r7, pc}
=======
 810d3a2:	bf00      	nop
 810d3a4:	3708      	adds	r7, #8
 810d3a6:	46bd      	mov	sp, r7
 810d3a8:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0810f998 <_ZN14WatchdogThreadD1Ev>:
#ifndef MISC_WATCHDOGTHREAD_H_
#define MISC_WATCHDOGTHREAD_H_

#include "../Thread.h"

class WatchdogThread : Thread {
 810f998:	b580      	push	{r7, lr}
 810f99a:	b082      	sub	sp, #8
 810f99c:	af00      	add	r7, sp, #0
 810f99e:	6078      	str	r0, [r7, #4]
 810f9a0:	4a05      	ldr	r2, [pc, #20]	; (810f9b8 <_ZN14WatchdogThreadD1Ev+0x20>)
 810f9a2:	687b      	ldr	r3, [r7, #4]
 810f9a4:	601a      	str	r2, [r3, #0]
 810f9a6:	687b      	ldr	r3, [r7, #4]
 810f9a8:	4618      	mov	r0, r3
 810f9aa:	f7fb ffa1 	bl	810b8f0 <_ZN6ThreadD1Ev>
 810f9ae:	687b      	ldr	r3, [r7, #4]
 810f9b0:	4618      	mov	r0, r3
 810f9b2:	3708      	adds	r7, #8
 810f9b4:	46bd      	mov	sp, r7
 810f9b6:	bd80      	pop	{r7, pc}
 810f9b8:	08114d4c 	.word	0x08114d4c

0810f9bc <_ZN14WatchdogThreadD0Ev>:
 810f9bc:	b580      	push	{r7, lr}
 810f9be:	b082      	sub	sp, #8
 810f9c0:	af00      	add	r7, sp, #0
 810f9c2:	6078      	str	r0, [r7, #4]
 810f9c4:	6878      	ldr	r0, [r7, #4]
 810f9c6:	f7ff ffe7 	bl	810f998 <_ZN14WatchdogThreadD1Ev>
 810f9ca:	2114      	movs	r1, #20
 810f9cc:	6878      	ldr	r0, [r7, #4]
 810f9ce:	f001 f867 	bl	8110aa0 <_ZdlPvj>
 810f9d2:	687b      	ldr	r3, [r7, #4]
 810f9d4:	4618      	mov	r0, r3
 810f9d6:	3708      	adds	r7, #8
 810f9d8:	46bd      	mov	sp, r7
 810f9da:	bd80      	pop	{r7, pc}

0810f9dc <_ZN17PotentiometerData8toStringEPc>:
=======
0810d3ac <_ZN11ScienceData8toStringEPc>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
};

struct ScienceData {
	float mass;

	char* toString(char* buffer) {
<<<<<<< HEAD
 810f9dc:	b580      	push	{r7, lr}
 810f9de:	b082      	sub	sp, #8
 810f9e0:	af00      	add	r7, sp, #0
 810f9e2:	6078      	str	r0, [r7, #4]
 810f9e4:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Voltage(V): %f", voltage);
 810f9e6:	687b      	ldr	r3, [r7, #4]
 810f9e8:	681b      	ldr	r3, [r3, #0]
 810f9ea:	4618      	mov	r0, r3
 810f9ec:	f7f0 fe44 	bl	8100678 <__aeabi_f2d>
 810f9f0:	4602      	mov	r2, r0
 810f9f2:	460b      	mov	r3, r1
 810f9f4:	4904      	ldr	r1, [pc, #16]	; (810fa08 <_ZN17PotentiometerData8toStringEPc+0x2c>)
 810f9f6:	6838      	ldr	r0, [r7, #0]
 810f9f8:	f002 f908 	bl	8111c0c <siprintf>
=======
 810d3ac:	b590      	push	{r4, r7, lr}
 810d3ae:	b083      	sub	sp, #12
 810d3b0:	af00      	add	r7, sp, #0
 810d3b2:	6078      	str	r0, [r7, #4]
 810d3b4:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Mass(kg): %f", mass);
 810d3b6:	687b      	ldr	r3, [r7, #4]
 810d3b8:	681b      	ldr	r3, [r3, #0]
 810d3ba:	4618      	mov	r0, r3
 810d3bc:	f7f3 f95c 	bl	8100678 <__aeabi_f2d>
 810d3c0:	4603      	mov	r3, r0
 810d3c2:	460c      	mov	r4, r1
 810d3c4:	461a      	mov	r2, r3
 810d3c6:	4623      	mov	r3, r4
 810d3c8:	4904      	ldr	r1, [pc, #16]	; (810d3dc <_ZN11ScienceData8toStringEPc+0x30>)
 810d3ca:	6838      	ldr	r0, [r7, #0]
 810d3cc:	f001 fb88 	bl	810eae0 <siprintf>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
		return buffer;
<<<<<<< HEAD
 810f9fc:	683b      	ldr	r3, [r7, #0]
=======
 810d3d0:	683b      	ldr	r3, [r7, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
<<<<<<< HEAD
 810f9fe:	4618      	mov	r0, r3
 810fa00:	3708      	adds	r7, #8
 810fa02:	46bd      	mov	sp, r7
 810fa04:	bd80      	pop	{r7, pc}
 810fa06:	bf00      	nop
 810fa08:	081147c8 	.word	0x081147c8
=======
 810d3d2:	4618      	mov	r0, r3
 810d3d4:	370c      	adds	r7, #12
 810d3d6:	46bd      	mov	sp, r7
 810d3d8:	bd90      	pop	{r4, r7, pc}
 810d3da:	bf00      	nop
 810d3dc:	081108b8 	.word	0x081108b8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810fa0c <_ZN17PotentiometerData7toArrayEPh>:
=======
0810d3e0 <_ZN11ScienceData7toArrayEPf>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
	uint8_t* toArray(uint8_t* buffer){
 810fa0c:	b480      	push	{r7}
 810fa0e:	b083      	sub	sp, #12
 810fa10:	af00      	add	r7, sp, #0
 810fa12:	6078      	str	r0, [r7, #4]
 810fa14:	6039      	str	r1, [r7, #0]
		*(float*)(buffer) = voltage;
 810fa16:	687b      	ldr	r3, [r7, #4]
 810fa18:	681a      	ldr	r2, [r3, #0]
 810fa1a:	683b      	ldr	r3, [r7, #0]
 810fa1c:	601a      	str	r2, [r3, #0]
		return buffer;
 810fa1e:	683b      	ldr	r3, [r7, #0]
	}
 810fa20:	4618      	mov	r0, r3
 810fa22:	370c      	adds	r7, #12
 810fa24:	46bd      	mov	sp, r7
 810fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fa2a:	4770      	bx	lr

0810fa2c <_ZN12ProberThread6getI2CEv>:
public:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", 1024), hi2c(hi2c), instance(nullptr) {}
	void init();
	void loop();
	void resetProber();
	I2C_HandleTypeDef* getI2C() { return hi2c; }
 810fa2c:	b480      	push	{r7}
 810fa2e:	b083      	sub	sp, #12
 810fa30:	af00      	add	r7, sp, #0
 810fa32:	6078      	str	r0, [r7, #4]
 810fa34:	687b      	ldr	r3, [r7, #4]
 810fa36:	691b      	ldr	r3, [r3, #16]
 810fa38:	4618      	mov	r0, r3
 810fa3a:	370c      	adds	r7, #12
 810fa3c:	46bd      	mov	sp, r7
 810fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fa42:	4770      	bx	lr

0810fa44 <_ZN11ADC16ThreadC1EP12ProberThread>:
#include "DataStructures.h"
#include "Debug/Debug.h"

static char cbuf[256];

ADC16Thread::ADC16Thread(ProberThread* parent)
 810fa44:	b590      	push	{r4, r7, lr}
 810fa46:	b083      	sub	sp, #12
 810fa48:	af00      	add	r7, sp, #0
 810fa4a:	6078      	str	r0, [r7, #4]
 810fa4c:	6039      	str	r1, [r7, #0]
: Thread("ADC16"), parent(parent), ads(parent->getI2C()), offset(0)
 810fa4e:	687b      	ldr	r3, [r7, #4]
 810fa50:	4910      	ldr	r1, [pc, #64]	; (810fa94 <_ZN11ADC16ThreadC1EP12ProberThread+0x50>)
 810fa52:	4618      	mov	r0, r3
 810fa54:	f000 fefe 	bl	8110854 <_ZN6ThreadC1EPKc>
 810fa58:	4a0f      	ldr	r2, [pc, #60]	; (810fa98 <_ZN11ADC16ThreadC1EP12ProberThread+0x54>)
 810fa5a:	687b      	ldr	r3, [r7, #4]
 810fa5c:	601a      	str	r2, [r3, #0]
 810fa5e:	687b      	ldr	r3, [r7, #4]
 810fa60:	683a      	ldr	r2, [r7, #0]
 810fa62:	611a      	str	r2, [r3, #16]
 810fa64:	687b      	ldr	r3, [r7, #4]
 810fa66:	f103 0414 	add.w	r4, r3, #20
 810fa6a:	6838      	ldr	r0, [r7, #0]
 810fa6c:	f7ff ffde 	bl	810fa2c <_ZN12ProberThread6getI2CEv>
 810fa70:	4603      	mov	r3, r0
 810fa72:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 810fa9c <_ZN11ADC16ThreadC1EP12ProberThread+0x58>
 810fa76:	2248      	movs	r2, #72	; 0x48
 810fa78:	4619      	mov	r1, r3
 810fa7a:	4620      	mov	r0, r4
 810fa7c:	f7fc fb94 	bl	810c1a8 <_ZN7ADS1113C1EP19__I2C_HandleTypeDefhf>
 810fa80:	687b      	ldr	r3, [r7, #4]
 810fa82:	f04f 0200 	mov.w	r2, #0
 810fa86:	621a      	str	r2, [r3, #32]
{}
 810fa88:	687b      	ldr	r3, [r7, #4]
 810fa8a:	4618      	mov	r0, r3
 810fa8c:	370c      	adds	r7, #12
 810fa8e:	46bd      	mov	sp, r7
 810fa90:	bd90      	pop	{r4, r7, pc}
 810fa92:	bf00      	nop
 810fa94:	081147d8 	.word	0x081147d8
 810fa98:	08114d90 	.word	0x08114d90
 810fa9c:	4003126f 	.word	0x4003126f

0810faa0 <_ZN11ADC16Thread4initEv>:

void ADC16Thread::init() {
 810faa0:	b580      	push	{r7, lr}
 810faa2:	b082      	sub	sp, #8
 810faa4:	af00      	add	r7, sp, #0
 810faa6:	6078      	str	r0, [r7, #4]
	while (!ads.begin()) {
 810faa8:	687b      	ldr	r3, [r7, #4]
 810faaa:	3314      	adds	r3, #20
 810faac:	4618      	mov	r0, r3
 810faae:	f7fc fba8 	bl	810c202 <_ZN7ADS11135beginEv>
 810fab2:	4603      	mov	r3, r0
 810fab4:	f083 0301 	eor.w	r3, r3, #1
 810fab8:	b2db      	uxtb	r3, r3
 810faba:	2b00      	cmp	r3, #0
 810fabc:	d00a      	beq.n	810fad4 <_ZN11ADC16Thread4initEv+0x34>
		println("ADS1113 initialization failed");
 810fabe:	687b      	ldr	r3, [r7, #4]
 810fac0:	4909      	ldr	r1, [pc, #36]	; (810fae8 <_ZN11ADC16Thread4initEv+0x48>)
 810fac2:	4618      	mov	r0, r3
 810fac4:	f000 ff3e 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		parent->resetProber();
 810fac8:	687b      	ldr	r3, [r7, #4]
 810faca:	691b      	ldr	r3, [r3, #16]
 810facc:	4618      	mov	r0, r3
 810face:	f000 fcd5 	bl	811047c <_ZN12ProberThread11resetProberEv>
	while (!ads.begin()) {
 810fad2:	e7e9      	b.n	810faa8 <_ZN11ADC16Thread4initEv+0x8>
	}

	println("ADS1113 initialized");
 810fad4:	687b      	ldr	r3, [r7, #4]
 810fad6:	4905      	ldr	r1, [pc, #20]	; (810faec <_ZN11ADC16Thread4initEv+0x4c>)
 810fad8:	4618      	mov	r0, r3
 810fada:	f000 ff33 	bl	8110944 <_ZN6Thread7printlnEPKcz>
}
 810fade:	bf00      	nop
 810fae0:	3708      	adds	r7, #8
 810fae2:	46bd      	mov	sp, r7
 810fae4:	bd80      	pop	{r7, pc}
 810fae6:	bf00      	nop
 810fae8:	081147e0 	.word	0x081147e0
 810faec:	08114800 	.word	0x08114800

0810faf0 <_ZN11ADC16Thread4loopEv>:

static PotentiometerData data;
static Handling_GripperPacket packet;
void ADC16Thread::loop() { //Should this send a voltage or radial position?
 810faf0:	b590      	push	{r4, r7, lr}
 810faf2:	ed2d 8b02 	vpush	{d8}
 810faf6:	b083      	sub	sp, #12
 810faf8:	af00      	add	r7, sp, #0
 810fafa:	6078      	str	r0, [r7, #4]
	data.voltage = ads.readADC_SingleEnded()*ads.getMultiplier() - offset; //voltage[uV]
 810fafc:	687b      	ldr	r3, [r7, #4]
 810fafe:	3314      	adds	r3, #20
 810fb00:	2180      	movs	r1, #128	; 0x80
 810fb02:	4618      	mov	r0, r3
 810fb04:	f7fc fc1b 	bl	810c33e <_ZN7ADS111319readADC_SingleEndedEt>
 810fb08:	4603      	mov	r3, r0
 810fb0a:	ee07 3a90 	vmov	s15, r3
 810fb0e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 810fb12:	687b      	ldr	r3, [r7, #4]
 810fb14:	3314      	adds	r3, #20
 810fb16:	4618      	mov	r0, r3
 810fb18:	f7fc fc46 	bl	810c3a8 <_ZN7ADS111313getMultiplierEv>
 810fb1c:	eef0 7a40 	vmov.f32	s15, s0
 810fb20:	ee28 7a27 	vmul.f32	s14, s16, s15
 810fb24:	687b      	ldr	r3, [r7, #4]
 810fb26:	edd3 7a08 	vldr	s15, [r3, #32]
 810fb2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fb2e:	4b22      	ldr	r3, [pc, #136]	; (810fbb8 <_ZN11ADC16Thread4loopEv+0xc8>)
 810fb30:	edc3 7a00 	vstr	s15, [r3]

	if(HAL_I2C_GetError(parent->getI2C()) == HAL_I2C_ERROR_NONE) {
 810fb34:	687b      	ldr	r3, [r7, #4]
 810fb36:	691b      	ldr	r3, [r3, #16]
 810fb38:	4618      	mov	r0, r3
 810fb3a:	f7ff ff77 	bl	810fa2c <_ZN12ProberThread6getI2CEv>
 810fb3e:	4603      	mov	r3, r0
 810fb40:	4618      	mov	r0, r3
 810fb42:	f7f6 f93e 	bl	8105dc2 <HAL_I2C_GetError>
 810fb46:	4603      	mov	r3, r0
 810fb48:	2b00      	cmp	r3, #0
 810fb4a:	bf0c      	ite	eq
 810fb4c:	2301      	moveq	r3, #1
 810fb4e:	2300      	movne	r3, #0
 810fb50:	b2db      	uxtb	r3, r3
 810fb52:	2b00      	cmp	r3, #0
 810fb54:	d01b      	beq.n	810fb8e <_ZN11ADC16Thread4loopEv+0x9e>
		println("%s", data.toString(cbuf));
 810fb56:	687c      	ldr	r4, [r7, #4]
 810fb58:	4918      	ldr	r1, [pc, #96]	; (810fbbc <_ZN11ADC16Thread4loopEv+0xcc>)
 810fb5a:	4817      	ldr	r0, [pc, #92]	; (810fbb8 <_ZN11ADC16Thread4loopEv+0xc8>)
 810fb5c:	f7ff ff3e 	bl	810f9dc <_ZN17PotentiometerData8toStringEPc>
 810fb60:	4603      	mov	r3, r0
 810fb62:	461a      	mov	r2, r3
 810fb64:	4916      	ldr	r1, [pc, #88]	; (810fbc0 <_ZN11ADC16Thread4loopEv+0xd0>)
 810fb66:	4620      	mov	r0, r4
 810fb68:	f000 feec 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		data.toArray((uint8_t*) &packet);
 810fb6c:	4915      	ldr	r1, [pc, #84]	; (810fbc4 <_ZN11ADC16Thread4loopEv+0xd4>)
 810fb6e:	4812      	ldr	r0, [pc, #72]	; (810fbb8 <_ZN11ADC16Thread4loopEv+0xc8>)
 810fb70:	f7ff ff4c 	bl	810fa0c <_ZN17PotentiometerData7toArrayEPh>
		network.send(&packet);
 810fb74:	4913      	ldr	r1, [pc, #76]	; (810fbc4 <_ZN11ADC16Thread4loopEv+0xd4>)
 810fb76:	4814      	ldr	r0, [pc, #80]	; (810fbc8 <_ZN11ADC16Thread4loopEv+0xd8>)
 810fb78:	f7ff fbe4 	bl	810f344 <_ZN10MessageBus4sendI22Handling_GripperPacketEEbPT_>
		portYIELD();
 810fb7c:	4b13      	ldr	r3, [pc, #76]	; (810fbcc <_ZN11ADC16Thread4loopEv+0xdc>)
 810fb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810fb82:	601a      	str	r2, [r3, #0]
 810fb84:	f3bf 8f4f 	dsb	sy
 810fb88:	f3bf 8f6f 	isb	sy
	} else {
		println("ADS1113 disconnected");
		terminate();
		parent->resetProber();
	}
}
 810fb8c:	e00d      	b.n	810fbaa <_ZN11ADC16Thread4loopEv+0xba>
		println("ADS1113 disconnected");
 810fb8e:	687b      	ldr	r3, [r7, #4]
 810fb90:	490f      	ldr	r1, [pc, #60]	; (810fbd0 <_ZN11ADC16Thread4loopEv+0xe0>)
 810fb92:	4618      	mov	r0, r3
 810fb94:	f000 fed6 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		terminate();
 810fb98:	687b      	ldr	r3, [r7, #4]
 810fb9a:	4618      	mov	r0, r3
 810fb9c:	f000 fec4 	bl	8110928 <_ZN6Thread9terminateEv>
		parent->resetProber();
 810fba0:	687b      	ldr	r3, [r7, #4]
 810fba2:	691b      	ldr	r3, [r3, #16]
 810fba4:	4618      	mov	r0, r3
 810fba6:	f000 fc69 	bl	811047c <_ZN12ProberThread11resetProberEv>
}
 810fbaa:	bf00      	nop
 810fbac:	370c      	adds	r7, #12
 810fbae:	46bd      	mov	sp, r7
 810fbb0:	ecbd 8b02 	vpop	{d8}
 810fbb4:	bd90      	pop	{r4, r7, pc}
 810fbb6:	bf00      	nop
 810fbb8:	10040b30 	.word	0x10040b30
 810fbbc:	10040a30 	.word	0x10040a30
 810fbc0:	08114814 	.word	0x08114814
 810fbc4:	10040b34 	.word	0x10040b34
 810fbc8:	10041280 	.word	0x10041280
 810fbcc:	e000ed04 	.word	0xe000ed04
 810fbd0:	08114818 	.word	0x08114818

0810fbd4 <_ZN11ADC16ThreadD1Ev>:
#include "DataStructures.h"
#include "Prober.h"

#include "Libraries/ADS1113/ads1113.h"

class ADC16Thread : public Thread {
 810fbd4:	b580      	push	{r7, lr}
 810fbd6:	b082      	sub	sp, #8
 810fbd8:	af00      	add	r7, sp, #0
 810fbda:	6078      	str	r0, [r7, #4]
 810fbdc:	4a05      	ldr	r2, [pc, #20]	; (810fbf4 <_ZN11ADC16ThreadD1Ev+0x20>)
 810fbde:	687b      	ldr	r3, [r7, #4]
 810fbe0:	601a      	str	r2, [r3, #0]
 810fbe2:	687b      	ldr	r3, [r7, #4]
 810fbe4:	4618      	mov	r0, r3
 810fbe6:	f7fb fe83 	bl	810b8f0 <_ZN6ThreadD1Ev>
 810fbea:	687b      	ldr	r3, [r7, #4]
 810fbec:	4618      	mov	r0, r3
 810fbee:	3708      	adds	r7, #8
 810fbf0:	46bd      	mov	sp, r7
 810fbf2:	bd80      	pop	{r7, pc}
 810fbf4:	08114d90 	.word	0x08114d90

0810fbf8 <_ZN11ADC16ThreadD0Ev>:
 810fbf8:	b580      	push	{r7, lr}
 810fbfa:	b082      	sub	sp, #8
 810fbfc:	af00      	add	r7, sp, #0
 810fbfe:	6078      	str	r0, [r7, #4]
 810fc00:	6878      	ldr	r0, [r7, #4]
 810fc02:	f7ff ffe7 	bl	810fbd4 <_ZN11ADC16ThreadD1Ev>
 810fc06:	2124      	movs	r1, #36	; 0x24
 810fc08:	6878      	ldr	r0, [r7, #4]
 810fc0a:	f000 ff49 	bl	8110aa0 <_ZdlPvj>
 810fc0e:	687b      	ldr	r3, [r7, #4]
 810fc10:	4618      	mov	r0, r3
 810fc12:	3708      	adds	r7, #8
 810fc14:	46bd      	mov	sp, r7
 810fc16:	bd80      	pop	{r7, pc}

0810fc18 <_ZN8BaroData8toStringEPc>:
	char* toString(char* buffer) {
 810fc18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810fc1c:	b086      	sub	sp, #24
 810fc1e:	af04      	add	r7, sp, #16
 810fc20:	6078      	str	r0, [r7, #4]
 810fc22:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Tmp: %f, Prs: %f, Hum: %f", temperature, pressure, humidity);
 810fc24:	687b      	ldr	r3, [r7, #4]
 810fc26:	681b      	ldr	r3, [r3, #0]
 810fc28:	4618      	mov	r0, r3
 810fc2a:	f7f0 fd25 	bl	8100678 <__aeabi_f2d>
 810fc2e:	4680      	mov	r8, r0
 810fc30:	4689      	mov	r9, r1
 810fc32:	687b      	ldr	r3, [r7, #4]
 810fc34:	685b      	ldr	r3, [r3, #4]
 810fc36:	4618      	mov	r0, r3
 810fc38:	f7f0 fd1e 	bl	8100678 <__aeabi_f2d>
 810fc3c:	4604      	mov	r4, r0
 810fc3e:	460d      	mov	r5, r1
 810fc40:	687b      	ldr	r3, [r7, #4]
 810fc42:	689b      	ldr	r3, [r3, #8]
 810fc44:	4618      	mov	r0, r3
 810fc46:	f7f0 fd17 	bl	8100678 <__aeabi_f2d>
 810fc4a:	4602      	mov	r2, r0
 810fc4c:	460b      	mov	r3, r1
 810fc4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810fc52:	e9cd 4500 	strd	r4, r5, [sp]
 810fc56:	4642      	mov	r2, r8
 810fc58:	464b      	mov	r3, r9
 810fc5a:	4905      	ldr	r1, [pc, #20]	; (810fc70 <_ZN8BaroData8toStringEPc+0x58>)
 810fc5c:	6838      	ldr	r0, [r7, #0]
 810fc5e:	f001 ffd5 	bl	8111c0c <siprintf>
		return buffer;
 810fc62:	683b      	ldr	r3, [r7, #0]
	}
 810fc64:	4618      	mov	r0, r3
 810fc66:	3708      	adds	r7, #8
 810fc68:	46bd      	mov	sp, r7
 810fc6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810fc6e:	bf00      	nop
 810fc70:	08114830 	.word	0x08114830

0810fc74 <_ZN8BaroData7toArrayEPh>:
	uint8_t* toArray(uint8_t* buffer) {
 810fc74:	b480      	push	{r7}
 810fc76:	b083      	sub	sp, #12
 810fc78:	af00      	add	r7, sp, #0
 810fc7a:	6078      	str	r0, [r7, #4]
 810fc7c:	6039      	str	r1, [r7, #0]
		*(float*)(buffer + 0) = pressure;
 810fc7e:	687b      	ldr	r3, [r7, #4]
 810fc80:	685a      	ldr	r2, [r3, #4]
 810fc82:	683b      	ldr	r3, [r7, #0]
 810fc84:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 1*4) = temperature;
 810fc86:	683b      	ldr	r3, [r7, #0]
 810fc88:	3304      	adds	r3, #4
 810fc8a:	687a      	ldr	r2, [r7, #4]
 810fc8c:	6812      	ldr	r2, [r2, #0]
 810fc8e:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 2*4) = humidity;
 810fc90:	683b      	ldr	r3, [r7, #0]
 810fc92:	3308      	adds	r3, #8
 810fc94:	687a      	ldr	r2, [r7, #4]
 810fc96:	6892      	ldr	r2, [r2, #8]
 810fc98:	601a      	str	r2, [r3, #0]
		return buffer;
 810fc9a:	683b      	ldr	r3, [r7, #0]
	}
 810fc9c:	4618      	mov	r0, r3
 810fc9e:	370c      	adds	r7, #12
 810fca0:	46bd      	mov	sp, r7
 810fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fca6:	4770      	bx	lr

0810fca8 <_ZN15BarometerThread4initEv>:
#include "Debug/Debug.h"


static char cbuf[128];

void BarometerThread::init() {
 810fca8:	b580      	push	{r7, lr}
 810fcaa:	b082      	sub	sp, #8
 810fcac:	af00      	add	r7, sp, #0
 810fcae:	6078      	str	r0, [r7, #4]
	bmp280_init_default_params(&bmp280.params);
 810fcb0:	687b      	ldr	r3, [r7, #4]
 810fcb2:	333c      	adds	r3, #60	; 0x3c
 810fcb4:	4618      	mov	r0, r3
 810fcb6:	f7fc fb86 	bl	810c3c6 <bmp280_init_default_params>

	bmp280.params.standby = BMP280_STANDBY_05;
 810fcba:	687b      	ldr	r3, [r7, #4]
 810fcbc:	2200      	movs	r2, #0
 810fcbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 810fcc2:	687b      	ldr	r3, [r7, #4]
 810fcc4:	2276      	movs	r2, #118	; 0x76
 810fcc6:	869a      	strh	r2, [r3, #52]	; 0x34
	bmp280.i2c = parent->getI2C();
 810fcc8:	687b      	ldr	r3, [r7, #4]
 810fcca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810fccc:	4618      	mov	r0, r3
 810fcce:	f7ff fead 	bl	810fa2c <_ZN12ProberThread6getI2CEv>
 810fcd2:	4602      	mov	r2, r0
 810fcd4:	687b      	ldr	r3, [r7, #4]
 810fcd6:	639a      	str	r2, [r3, #56]	; 0x38

	//portENTER_CRITICAL();
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810fcd8:	687b      	ldr	r3, [r7, #4]
 810fcda:	f103 0210 	add.w	r2, r3, #16
 810fcde:	687b      	ldr	r3, [r7, #4]
 810fce0:	333c      	adds	r3, #60	; 0x3c
 810fce2:	4619      	mov	r1, r3
 810fce4:	4610      	mov	r0, r2
 810fce6:	f7fc fce6 	bl	810c6b6 <bmp280_init>
 810fcea:	4603      	mov	r3, r0
 810fcec:	f083 0301 	eor.w	r3, r3, #1
 810fcf0:	b2db      	uxtb	r3, r3
 810fcf2:	2b00      	cmp	r3, #0
 810fcf4:	d00a      	beq.n	810fd0c <_ZN15BarometerThread4initEv+0x64>
		//portEXIT_CRITICAL();
		println("BMP280 initialization failed");
 810fcf6:	687b      	ldr	r3, [r7, #4]
 810fcf8:	4909      	ldr	r1, [pc, #36]	; (810fd20 <_ZN15BarometerThread4initEv+0x78>)
 810fcfa:	4618      	mov	r0, r3
 810fcfc:	f000 fe22 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		parent->resetProber();
 810fd00:	687b      	ldr	r3, [r7, #4]
 810fd02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810fd04:	4618      	mov	r0, r3
 810fd06:	f000 fbb9 	bl	811047c <_ZN12ProberThread11resetProberEv>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810fd0a:	e7e5      	b.n	810fcd8 <_ZN15BarometerThread4initEv+0x30>
	}
	//portEXIT_CRITICAL();

	println("BMP280 initialized");
 810fd0c:	687b      	ldr	r3, [r7, #4]
 810fd0e:	4905      	ldr	r1, [pc, #20]	; (810fd24 <_ZN15BarometerThread4initEv+0x7c>)
 810fd10:	4618      	mov	r0, r3
 810fd12:	f000 fe17 	bl	8110944 <_ZN6Thread7printlnEPKcz>
}
 810fd16:	bf00      	nop
 810fd18:	3708      	adds	r7, #8
 810fd1a:	46bd      	mov	sp, r7
 810fd1c:	bd80      	pop	{r7, pc}
 810fd1e:	bf00      	nop
 810fd20:	0811484c 	.word	0x0811484c
 810fd24:	0811486c 	.word	0x0811486c

0810fd28 <_ZN15BarometerThread4loopEv>:

static Avionics_BaroTempPacket packet;
static BaroData data;
void BarometerThread::loop() {
 810fd28:	b590      	push	{r4, r7, lr}
 810fd2a:	b083      	sub	sp, #12
 810fd2c:	af00      	add	r7, sp, #0
 810fd2e:	6078      	str	r0, [r7, #4]
	if(bmp280_read_float(&bmp280, &data.temperature, &data.pressure, &data.humidity)) {
 810fd30:	687b      	ldr	r3, [r7, #4]
 810fd32:	f103 0010 	add.w	r0, r3, #16
 810fd36:	4b1b      	ldr	r3, [pc, #108]	; (810fda4 <_ZN15BarometerThread4loopEv+0x7c>)
 810fd38:	4a1b      	ldr	r2, [pc, #108]	; (810fda8 <_ZN15BarometerThread4loopEv+0x80>)
 810fd3a:	491c      	ldr	r1, [pc, #112]	; (810fdac <_ZN15BarometerThread4loopEv+0x84>)
 810fd3c:	f7fd f82a 	bl	810cd94 <bmp280_read_float>
 810fd40:	4603      	mov	r3, r0
 810fd42:	2b00      	cmp	r3, #0
 810fd44:	d01b      	beq.n	810fd7e <_ZN15BarometerThread4loopEv+0x56>
		println("%s", data.toString(cbuf));
 810fd46:	687c      	ldr	r4, [r7, #4]
 810fd48:	4919      	ldr	r1, [pc, #100]	; (810fdb0 <_ZN15BarometerThread4loopEv+0x88>)
 810fd4a:	4818      	ldr	r0, [pc, #96]	; (810fdac <_ZN15BarometerThread4loopEv+0x84>)
 810fd4c:	f7ff ff64 	bl	810fc18 <_ZN8BaroData8toStringEPc>
 810fd50:	4603      	mov	r3, r0
 810fd52:	461a      	mov	r2, r3
 810fd54:	4917      	ldr	r1, [pc, #92]	; (810fdb4 <_ZN15BarometerThread4loopEv+0x8c>)
 810fd56:	4620      	mov	r0, r4
 810fd58:	f000 fdf4 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		data.toArray((uint8_t*) &packet);
 810fd5c:	4916      	ldr	r1, [pc, #88]	; (810fdb8 <_ZN15BarometerThread4loopEv+0x90>)
 810fd5e:	4813      	ldr	r0, [pc, #76]	; (810fdac <_ZN15BarometerThread4loopEv+0x84>)
 810fd60:	f7ff ff88 	bl	810fc74 <_ZN8BaroData7toArrayEPh>
		network.send(&packet);
 810fd64:	4914      	ldr	r1, [pc, #80]	; (810fdb8 <_ZN15BarometerThread4loopEv+0x90>)
 810fd66:	4815      	ldr	r0, [pc, #84]	; (810fdbc <_ZN15BarometerThread4loopEv+0x94>)
 810fd68:	f7ff f9fc 	bl	810f164 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_>
		portYIELD();
 810fd6c:	4b14      	ldr	r3, [pc, #80]	; (810fdc0 <_ZN15BarometerThread4loopEv+0x98>)
 810fd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810fd72:	601a      	str	r2, [r3, #0]
 810fd74:	f3bf 8f4f 	dsb	sy
 810fd78:	f3bf 8f6f 	isb	sy
	} else {
		println("BMP280 disconnected");
		terminate();
		parent->resetProber();
=======
	float* toArray(float* buffer){
 810d3e0:	b480      	push	{r7}
 810d3e2:	b083      	sub	sp, #12
 810d3e4:	af00      	add	r7, sp, #0
 810d3e6:	6078      	str	r0, [r7, #4]
 810d3e8:	6039      	str	r1, [r7, #0]
		*buffer = mass;
 810d3ea:	687b      	ldr	r3, [r7, #4]
 810d3ec:	681a      	ldr	r2, [r3, #0]
 810d3ee:	683b      	ldr	r3, [r7, #0]
 810d3f0:	601a      	str	r2, [r3, #0]
		return buffer;
 810d3f2:	683b      	ldr	r3, [r7, #0]
	}
 810d3f4:	4618      	mov	r0, r3
 810d3f6:	370c      	adds	r7, #12
 810d3f8:	46bd      	mov	sp, r7
 810d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d3fe:	4770      	bx	lr

0810d400 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m>:
#include "Debug/Debug.h"

static char cbuf[256];
const int32_t threshold = 50000;

ADC24Thread::ADC24Thread(GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin)
 810d400:	b580      	push	{r7, lr}
 810d402:	b084      	sub	sp, #16
 810d404:	af00      	add	r7, sp, #0
 810d406:	60f8      	str	r0, [r7, #12]
 810d408:	60b9      	str	r1, [r7, #8]
 810d40a:	607a      	str	r2, [r7, #4]
 810d40c:	603b      	str	r3, [r7, #0]
: Thread("ADC24"), _nSamples(4), _multiplier(1),  _zero(0)
 810d40e:	68fb      	ldr	r3, [r7, #12]
 810d410:	490d      	ldr	r1, [pc, #52]	; (810d448 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m+0x48>)
 810d412:	4618      	mov	r0, r3
 810d414:	f000 fa53 	bl	810d8be <_ZN6ThreadC1EPKc>
 810d418:	4a0c      	ldr	r2, [pc, #48]	; (810d44c <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m+0x4c>)
 810d41a:	68fb      	ldr	r3, [r7, #12]
 810d41c:	601a      	str	r2, [r3, #0]
 810d41e:	68fb      	ldr	r3, [r7, #12]
 810d420:	2204      	movs	r2, #4
 810d422:	819a      	strh	r2, [r3, #12]
 810d424:	68fb      	ldr	r3, [r7, #12]
 810d426:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 810d42a:	611a      	str	r2, [r3, #16]
 810d42c:	68fb      	ldr	r3, [r7, #12]
 810d42e:	2200      	movs	r2, #0
 810d430:	615a      	str	r2, [r3, #20]
{
	HX711_set_pins(sck_gpio, sck_pin, di_gpio, di_pin);
 810d432:	69bb      	ldr	r3, [r7, #24]
 810d434:	683a      	ldr	r2, [r7, #0]
 810d436:	6879      	ldr	r1, [r7, #4]
 810d438:	68b8      	ldr	r0, [r7, #8]
 810d43a:	f7fd fc89 	bl	810ad50 <HX711_set_pins>
}
 810d43e:	68fb      	ldr	r3, [r7, #12]
 810d440:	4618      	mov	r0, r3
 810d442:	3710      	adds	r7, #16
 810d444:	46bd      	mov	sp, r7
 810d446:	bd80      	pop	{r7, pc}
 810d448:	081108c8 	.word	0x081108c8
 810d44c:	08110d7c 	.word	0x08110d7c

0810d450 <_ZN11ADC24Thread4initEv>:

void ADC24Thread::init() {
 810d450:	b580      	push	{r7, lr}
 810d452:	b082      	sub	sp, #8
 810d454:	af00      	add	r7, sp, #0
 810d456:	6078      	str	r0, [r7, #4]
	HX711_begin();
 810d458:	f7fd fc9c 	bl	810ad94 <HX711_begin>
	while(!HX711_isReady()){
 810d45c:	f7fd fdbe 	bl	810afdc <HX711_isReady>
 810d460:	4603      	mov	r3, r0
 810d462:	2b00      	cmp	r3, #0
 810d464:	bf0c      	ite	eq
 810d466:	2301      	moveq	r3, #1
 810d468:	2300      	movne	r3, #0
 810d46a:	b2db      	uxtb	r3, r3
 810d46c:	2b00      	cmp	r3, #0
 810d46e:	d008      	beq.n	810d482 <_ZN11ADC24Thread4initEv+0x32>
		println("HX711 not responding");
 810d470:	687b      	ldr	r3, [r7, #4]
 810d472:	490c      	ldr	r1, [pc, #48]	; (810d4a4 <_ZN11ADC24Thread4initEv+0x54>)
 810d474:	4618      	mov	r0, r3
 810d476:	f000 fa77 	bl	810d968 <_ZN6Thread7printlnEPKcz>
		osDelay(100);
 810d47a:	2064      	movs	r0, #100	; 0x64
 810d47c:	f7fa fe1c 	bl	81080b8 <osDelay>
	while(!HX711_isReady()){
 810d480:	e7ec      	b.n	810d45c <_ZN11ADC24Thread4initEv+0xc>
	}
	//Ensure there is no weight on top of scale on startup
	println("HX711 is responding: ensure nothing is on scale");
 810d482:	687b      	ldr	r3, [r7, #4]
 810d484:	4908      	ldr	r1, [pc, #32]	; (810d4a8 <_ZN11ADC24Thread4initEv+0x58>)
 810d486:	4618      	mov	r0, r3
 810d488:	f000 fa6e 	bl	810d968 <_ZN6Thread7printlnEPKcz>
	calibrateMultiplier();
 810d48c:	6878      	ldr	r0, [r7, #4]
 810d48e:	f000 f84d 	bl	810d52c <_ZN11ADC24Thread19calibrateMultiplierEv>
	println("HX711 initialized");
 810d492:	687b      	ldr	r3, [r7, #4]
 810d494:	4905      	ldr	r1, [pc, #20]	; (810d4ac <_ZN11ADC24Thread4initEv+0x5c>)
 810d496:	4618      	mov	r0, r3
 810d498:	f000 fa66 	bl	810d968 <_ZN6Thread7printlnEPKcz>
}
 810d49c:	bf00      	nop
 810d49e:	3708      	adds	r7, #8
 810d4a0:	46bd      	mov	sp, r7
 810d4a2:	bd80      	pop	{r7, pc}
 810d4a4:	081108d0 	.word	0x081108d0
 810d4a8:	081108e8 	.word	0x081108e8
 810d4ac:	08110918 	.word	0x08110918

0810d4b0 <_ZN11ADC24Thread4loopEv>:

void ADC24Thread::loop() {
 810d4b0:	b590      	push	{r4, r7, lr}
 810d4b2:	b085      	sub	sp, #20
 810d4b4:	af00      	add	r7, sp, #0
 810d4b6:	6078      	str	r0, [r7, #4]
	ScienceData data;
	//__disable_irq();
	data.mass = (HX711_valueAve(_nSamples) - _zero)*_multiplier;
 810d4b8:	687b      	ldr	r3, [r7, #4]
 810d4ba:	899b      	ldrh	r3, [r3, #12]
 810d4bc:	4618      	mov	r0, r3
 810d4be:	f7fd fd59 	bl	810af74 <HX711_valueAve>
 810d4c2:	4602      	mov	r2, r0
 810d4c4:	687b      	ldr	r3, [r7, #4]
 810d4c6:	695b      	ldr	r3, [r3, #20]
 810d4c8:	1ad3      	subs	r3, r2, r3
 810d4ca:	ee07 3a90 	vmov	s15, r3
 810d4ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810d4d2:	687b      	ldr	r3, [r7, #4]
 810d4d4:	edd3 7a04 	vldr	s15, [r3, #16]
 810d4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810d4dc:	edc7 7a03 	vstr	s15, [r7, #12]
	//__enable_irq();

	println("%s", data.toString(cbuf));
 810d4e0:	687c      	ldr	r4, [r7, #4]
 810d4e2:	f107 030c 	add.w	r3, r7, #12
 810d4e6:	490e      	ldr	r1, [pc, #56]	; (810d520 <_ZN11ADC24Thread4loopEv+0x70>)
 810d4e8:	4618      	mov	r0, r3
 810d4ea:	f7ff ff5f 	bl	810d3ac <_ZN11ScienceData8toStringEPc>
 810d4ee:	4603      	mov	r3, r0
 810d4f0:	461a      	mov	r2, r3
 810d4f2:	490c      	ldr	r1, [pc, #48]	; (810d524 <_ZN11ADC24Thread4loopEv+0x74>)
 810d4f4:	4620      	mov	r0, r4
 810d4f6:	f000 fa37 	bl	810d968 <_ZN6Thread7printlnEPKcz>

	Science_MeasurePacket packet;
	data.toArray((float*) &packet);
 810d4fa:	f107 0208 	add.w	r2, r7, #8
 810d4fe:	f107 030c 	add.w	r3, r7, #12
 810d502:	4611      	mov	r1, r2
 810d504:	4618      	mov	r0, r3
 810d506:	f7ff ff6b 	bl	810d3e0 <_ZN11ScienceData7toArrayEPf>
	network.send(&packet);
 810d50a:	f107 0308 	add.w	r3, r7, #8
 810d50e:	4619      	mov	r1, r3
 810d510:	4805      	ldr	r0, [pc, #20]	; (810d528 <_ZN11ADC24Thread4loopEv+0x78>)
 810d512:	f7ff fd99 	bl	810d048 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_>

	//osDelay(10);
}
 810d516:	bf00      	nop
 810d518:	3714      	adds	r7, #20
 810d51a:	46bd      	mov	sp, r7
 810d51c:	bd90      	pop	{r4, r7, pc}
 810d51e:	bf00      	nop
 810d520:	10004620 	.word	0x10004620
 810d524:	0811092c 	.word	0x0811092c
 810d528:	10004be0 	.word	0x10004be0

0810d52c <_ZN11ADC24Thread19calibrateMultiplierEv>:

//calibrate the voltage->mass multiplier
void ADC24Thread::calibrateMultiplier(void){
 810d52c:	b590      	push	{r4, r7, lr}
 810d52e:	b085      	sub	sp, #20
 810d530:	af00      	add	r7, sp, #0
 810d532:	6078      	str	r0, [r7, #4]
	//Put 0.5kg on top of scale
	osDelay(200);
 810d534:	20c8      	movs	r0, #200	; 0xc8
 810d536:	f7fa fdbf 	bl	81080b8 <osDelay>
	tare(HX711_valueAve(_nSamples*2));
 810d53a:	687b      	ldr	r3, [r7, #4]
 810d53c:	899b      	ldrh	r3, [r3, #12]
 810d53e:	005b      	lsls	r3, r3, #1
 810d540:	b29b      	uxth	r3, r3
 810d542:	4618      	mov	r0, r3
 810d544:	f7fd fd16 	bl	810af74 <HX711_valueAve>
 810d548:	4603      	mov	r3, r0
 810d54a:	4619      	mov	r1, r3
 810d54c:	6878      	ldr	r0, [r7, #4]
 810d54e:	f000 f841 	bl	810d5d4 <_ZN11ADC24Thread4tareEl>
	println("Place 0.5kg on top of scale in order to calibrate");
 810d552:	687b      	ldr	r3, [r7, #4]
 810d554:	491c      	ldr	r1, [pc, #112]	; (810d5c8 <_ZN11ADC24Thread19calibrateMultiplierEv+0x9c>)
 810d556:	4618      	mov	r0, r3
 810d558:	f000 fa06 	bl	810d968 <_ZN6Thread7printlnEPKcz>
	while(true){
		int32_t currentVal = HX711_valueAve(_nSamples);
 810d55c:	687b      	ldr	r3, [r7, #4]
 810d55e:	899b      	ldrh	r3, [r3, #12]
 810d560:	4618      	mov	r0, r3
 810d562:	f7fd fd07 	bl	810af74 <HX711_valueAve>
 810d566:	60f8      	str	r0, [r7, #12]
		int32_t diff = currentVal - _zero;
 810d568:	687b      	ldr	r3, [r7, #4]
 810d56a:	695b      	ldr	r3, [r3, #20]
 810d56c:	68fa      	ldr	r2, [r7, #12]
 810d56e:	1ad3      	subs	r3, r2, r3
 810d570:	60bb      	str	r3, [r7, #8]
		if(diff < -threshold){
 810d572:	68bb      	ldr	r3, [r7, #8]
 810d574:	4a15      	ldr	r2, [pc, #84]	; (810d5cc <_ZN11ADC24Thread19calibrateMultiplierEv+0xa0>)
 810d576:	4293      	cmp	r3, r2
 810d578:	daf0      	bge.n	810d55c <_ZN11ADC24Thread19calibrateMultiplierEv+0x30>
			osDelay(200); // Give the weight some time to settle
 810d57a:	20c8      	movs	r0, #200	; 0xc8
 810d57c:	f7fa fd9c 	bl	81080b8 <osDelay>
			_multiplier = 0.5/(HX711_valueAve(_nSamples) - _zero);
 810d580:	687b      	ldr	r3, [r7, #4]
 810d582:	899b      	ldrh	r3, [r3, #12]
 810d584:	4618      	mov	r0, r3
 810d586:	f7fd fcf5 	bl	810af74 <HX711_valueAve>
 810d58a:	4602      	mov	r2, r0
 810d58c:	687b      	ldr	r3, [r7, #4]
 810d58e:	695b      	ldr	r3, [r3, #20]
 810d590:	1ad3      	subs	r3, r2, r3
 810d592:	4618      	mov	r0, r3
 810d594:	f7f3 f85e 	bl	8100654 <__aeabi_i2d>
 810d598:	4603      	mov	r3, r0
 810d59a:	460c      	mov	r4, r1
 810d59c:	461a      	mov	r2, r3
 810d59e:	4623      	mov	r3, r4
 810d5a0:	f04f 0000 	mov.w	r0, #0
 810d5a4:	490a      	ldr	r1, [pc, #40]	; (810d5d0 <_ZN11ADC24Thread19calibrateMultiplierEv+0xa4>)
 810d5a6:	f7f3 f9e9 	bl	810097c <__aeabi_ddiv>
 810d5aa:	4603      	mov	r3, r0
 810d5ac:	460c      	mov	r4, r1
 810d5ae:	4618      	mov	r0, r3
 810d5b0:	4621      	mov	r1, r4
 810d5b2:	f7f3 fb91 	bl	8100cd8 <__aeabi_d2f>
 810d5b6:	4602      	mov	r2, r0
 810d5b8:	687b      	ldr	r3, [r7, #4]
 810d5ba:	611a      	str	r2, [r3, #16]
			break;
 810d5bc:	bf00      	nop
		}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
}
<<<<<<< HEAD
 810fd7c:	e00d      	b.n	810fd9a <_ZN15BarometerThread4loopEv+0x72>
		println("BMP280 disconnected");
 810fd7e:	687b      	ldr	r3, [r7, #4]
 810fd80:	4910      	ldr	r1, [pc, #64]	; (810fdc4 <_ZN15BarometerThread4loopEv+0x9c>)
 810fd82:	4618      	mov	r0, r3
 810fd84:	f000 fdde 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		terminate();
 810fd88:	687b      	ldr	r3, [r7, #4]
 810fd8a:	4618      	mov	r0, r3
 810fd8c:	f000 fdcc 	bl	8110928 <_ZN6Thread9terminateEv>
		parent->resetProber();
 810fd90:	687b      	ldr	r3, [r7, #4]
 810fd92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810fd94:	4618      	mov	r0, r3
 810fd96:	f000 fb71 	bl	811047c <_ZN12ProberThread11resetProberEv>
}
 810fd9a:	bf00      	nop
 810fd9c:	370c      	adds	r7, #12
 810fd9e:	46bd      	mov	sp, r7
 810fda0:	bd90      	pop	{r4, r7, pc}
 810fda2:	bf00      	nop
 810fda4:	10040bc8 	.word	0x10040bc8
 810fda8:	10040bc4 	.word	0x10040bc4
 810fdac:	10040bc0 	.word	0x10040bc0
 810fdb0:	10040b38 	.word	0x10040b38
 810fdb4:	08114880 	.word	0x08114880
 810fdb8:	10040bb8 	.word	0x10040bb8
 810fdbc:	10041280 	.word	0x10041280
 810fdc0:	e000ed04 	.word	0xe000ed04
 810fdc4:	08114884 	.word	0x08114884
=======
 810d5be:	bf00      	nop
 810d5c0:	3714      	adds	r7, #20
 810d5c2:	46bd      	mov	sp, r7
 810d5c4:	bd90      	pop	{r4, r7, pc}
 810d5c6:	bf00      	nop
 810d5c8:	08110930 	.word	0x08110930
 810d5cc:	ffff3cb0 	.word	0xffff3cb0
 810d5d0:	3fe00000 	.word	0x3fe00000
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810fdc8 <_ZN15BarometerThreadD1Ev>:

#include "DataStructures.h"
#include "Libraries/BMP280/bmp280.h"


class BarometerThread : public Thread {
 810fdc8:	b580      	push	{r7, lr}
 810fdca:	b082      	sub	sp, #8
 810fdcc:	af00      	add	r7, sp, #0
 810fdce:	6078      	str	r0, [r7, #4]
 810fdd0:	4a05      	ldr	r2, [pc, #20]	; (810fde8 <_ZN15BarometerThreadD1Ev+0x20>)
 810fdd2:	687b      	ldr	r3, [r7, #4]
 810fdd4:	601a      	str	r2, [r3, #0]
 810fdd6:	687b      	ldr	r3, [r7, #4]
 810fdd8:	4618      	mov	r0, r3
 810fdda:	f7fb fd89 	bl	810b8f0 <_ZN6ThreadD1Ev>
 810fdde:	687b      	ldr	r3, [r7, #4]
 810fde0:	4618      	mov	r0, r3
 810fde2:	3708      	adds	r7, #8
 810fde4:	46bd      	mov	sp, r7
 810fde6:	bd80      	pop	{r7, pc}
 810fde8:	08114dc4 	.word	0x08114dc4

0810fdec <_ZN15BarometerThreadD0Ev>:
 810fdec:	b580      	push	{r7, lr}
 810fdee:	b082      	sub	sp, #8
 810fdf0:	af00      	add	r7, sp, #0
 810fdf2:	6078      	str	r0, [r7, #4]
 810fdf4:	6878      	ldr	r0, [r7, #4]
 810fdf6:	f7ff ffe7 	bl	810fdc8 <_ZN15BarometerThreadD1Ev>
 810fdfa:	2148      	movs	r1, #72	; 0x48
 810fdfc:	6878      	ldr	r0, [r7, #4]
 810fdfe:	f000 fe4f 	bl	8110aa0 <_ZdlPvj>
 810fe02:	687b      	ldr	r3, [r7, #4]
 810fe04:	4618      	mov	r0, r3
 810fe06:	3708      	adds	r7, #8
 810fe08:	46bd      	mov	sp, r7
 810fe0a:	bd80      	pop	{r7, pc}

0810fe0c <_ZN6Vector8toStringEPc>:
	char* toString(char* buffer) {
 810fe0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810fe10:	b086      	sub	sp, #24
 810fe12:	af04      	add	r7, sp, #16
 810fe14:	6078      	str	r0, [r7, #4]
 810fe16:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "[%f %f %f]", x, y, z);
 810fe18:	687b      	ldr	r3, [r7, #4]
 810fe1a:	681b      	ldr	r3, [r3, #0]
 810fe1c:	4618      	mov	r0, r3
 810fe1e:	f7f0 fc2b 	bl	8100678 <__aeabi_f2d>
 810fe22:	4680      	mov	r8, r0
 810fe24:	4689      	mov	r9, r1
 810fe26:	687b      	ldr	r3, [r7, #4]
 810fe28:	685b      	ldr	r3, [r3, #4]
 810fe2a:	4618      	mov	r0, r3
 810fe2c:	f7f0 fc24 	bl	8100678 <__aeabi_f2d>
 810fe30:	4604      	mov	r4, r0
 810fe32:	460d      	mov	r5, r1
 810fe34:	687b      	ldr	r3, [r7, #4]
 810fe36:	689b      	ldr	r3, [r3, #8]
 810fe38:	4618      	mov	r0, r3
 810fe3a:	f7f0 fc1d 	bl	8100678 <__aeabi_f2d>
 810fe3e:	4602      	mov	r2, r0
 810fe40:	460b      	mov	r3, r1
 810fe42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810fe46:	e9cd 4500 	strd	r4, r5, [sp]
 810fe4a:	4642      	mov	r2, r8
 810fe4c:	464b      	mov	r3, r9
 810fe4e:	4905      	ldr	r1, [pc, #20]	; (810fe64 <_ZN6Vector8toStringEPc+0x58>)
 810fe50:	6838      	ldr	r0, [r7, #0]
 810fe52:	f001 fedb 	bl	8111c0c <siprintf>
		return buffer;
 810fe56:	683b      	ldr	r3, [r7, #0]
	}
 810fe58:	4618      	mov	r0, r3
 810fe5a:	3708      	adds	r7, #8
 810fe5c:	46bd      	mov	sp, r7
 810fe5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810fe62:	bf00      	nop
 810fe64:	08114898 	.word	0x08114898
=======
0810d5d4 <_ZN11ADC24Thread4tareEl>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810fe68 <_ZN6Vector7toArrayEPh>:
	uint8_t* toArray(uint8_t* buffer) {
 810fe68:	b480      	push	{r7}
 810fe6a:	b083      	sub	sp, #12
 810fe6c:	af00      	add	r7, sp, #0
 810fe6e:	6078      	str	r0, [r7, #4]
 810fe70:	6039      	str	r1, [r7, #0]
		*(float*)(buffer + 0) = x;
 810fe72:	687b      	ldr	r3, [r7, #4]
 810fe74:	681a      	ldr	r2, [r3, #0]
 810fe76:	683b      	ldr	r3, [r7, #0]
 810fe78:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 1*4) = y;
 810fe7a:	683b      	ldr	r3, [r7, #0]
 810fe7c:	3304      	adds	r3, #4
 810fe7e:	687a      	ldr	r2, [r7, #4]
 810fe80:	6852      	ldr	r2, [r2, #4]
 810fe82:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 2*4) = z;
 810fe84:	683b      	ldr	r3, [r7, #0]
 810fe86:	3308      	adds	r3, #8
 810fe88:	687a      	ldr	r2, [r7, #4]
 810fe8a:	6892      	ldr	r2, [r2, #8]
 810fe8c:	601a      	str	r2, [r3, #0]
		return buffer;
 810fe8e:	683b      	ldr	r3, [r7, #0]
	}
 810fe90:	4618      	mov	r0, r3
 810fe92:	370c      	adds	r7, #12
 810fe94:	46bd      	mov	sp, r7
 810fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fe9a:	4770      	bx	lr

0810fe9c <_ZN7IMUData8toStringEPc>:
	char* toString(char* buffer) {
 810fe9c:	b5b0      	push	{r4, r5, r7, lr}
 810fe9e:	b084      	sub	sp, #16
 810fea0:	af02      	add	r7, sp, #8
 810fea2:	6078      	str	r0, [r7, #4]
 810fea4:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Acc: %s, Ang: %s, Mag: %s", accel.toString(buf), gyro.toString(buf + 32), mag.toString(buf + 64));
 810fea6:	687b      	ldr	r3, [r7, #4]
 810fea8:	4910      	ldr	r1, [pc, #64]	; (810feec <_ZN7IMUData8toStringEPc+0x50>)
 810feaa:	4618      	mov	r0, r3
 810feac:	f7ff ffae 	bl	810fe0c <_ZN6Vector8toStringEPc>
 810feb0:	4604      	mov	r4, r0
 810feb2:	687b      	ldr	r3, [r7, #4]
 810feb4:	330c      	adds	r3, #12
 810feb6:	4a0e      	ldr	r2, [pc, #56]	; (810fef0 <_ZN7IMUData8toStringEPc+0x54>)
 810feb8:	4611      	mov	r1, r2
 810feba:	4618      	mov	r0, r3
 810febc:	f7ff ffa6 	bl	810fe0c <_ZN6Vector8toStringEPc>
 810fec0:	4605      	mov	r5, r0
 810fec2:	687b      	ldr	r3, [r7, #4]
 810fec4:	3318      	adds	r3, #24
 810fec6:	4a0b      	ldr	r2, [pc, #44]	; (810fef4 <_ZN7IMUData8toStringEPc+0x58>)
 810fec8:	4611      	mov	r1, r2
 810feca:	4618      	mov	r0, r3
 810fecc:	f7ff ff9e 	bl	810fe0c <_ZN6Vector8toStringEPc>
 810fed0:	4603      	mov	r3, r0
 810fed2:	9300      	str	r3, [sp, #0]
 810fed4:	462b      	mov	r3, r5
 810fed6:	4622      	mov	r2, r4
 810fed8:	4907      	ldr	r1, [pc, #28]	; (810fef8 <_ZN7IMUData8toStringEPc+0x5c>)
 810feda:	6838      	ldr	r0, [r7, #0]
 810fedc:	f001 fe96 	bl	8111c0c <siprintf>
		return buffer;
 810fee0:	683b      	ldr	r3, [r7, #0]
	}
 810fee2:	4618      	mov	r0, r3
 810fee4:	3708      	adds	r7, #8
 810fee6:	46bd      	mov	sp, r7
 810fee8:	bdb0      	pop	{r4, r5, r7, pc}
 810feea:	bf00      	nop
 810feec:	10040bcc 	.word	0x10040bcc
 810fef0:	10040bec 	.word	0x10040bec
 810fef4:	10040c0c 	.word	0x10040c0c
 810fef8:	081148a4 	.word	0x081148a4

0810fefc <_ZN7IMUData7toArrayEPh>:
	uint8_t* toArray(uint8_t* buffer) {
 810fefc:	b580      	push	{r7, lr}
 810fefe:	b082      	sub	sp, #8
 810ff00:	af00      	add	r7, sp, #0
 810ff02:	6078      	str	r0, [r7, #4]
 810ff04:	6039      	str	r1, [r7, #0]
		accel.toArray(buffer);
 810ff06:	687b      	ldr	r3, [r7, #4]
 810ff08:	6839      	ldr	r1, [r7, #0]
 810ff0a:	4618      	mov	r0, r3
 810ff0c:	f7ff ffac 	bl	810fe68 <_ZN6Vector7toArrayEPh>
		gyro.toArray(buffer + 3*4);
 810ff10:	687b      	ldr	r3, [r7, #4]
 810ff12:	f103 020c 	add.w	r2, r3, #12
 810ff16:	683b      	ldr	r3, [r7, #0]
 810ff18:	330c      	adds	r3, #12
 810ff1a:	4619      	mov	r1, r3
 810ff1c:	4610      	mov	r0, r2
 810ff1e:	f7ff ffa3 	bl	810fe68 <_ZN6Vector7toArrayEPh>
		mag.toArray(buffer + 6*4);
 810ff22:	687b      	ldr	r3, [r7, #4]
 810ff24:	f103 0218 	add.w	r2, r3, #24
 810ff28:	683b      	ldr	r3, [r7, #0]
 810ff2a:	3318      	adds	r3, #24
 810ff2c:	4619      	mov	r1, r3
 810ff2e:	4610      	mov	r0, r2
 810ff30:	f7ff ff9a 	bl	810fe68 <_ZN6Vector7toArrayEPh>
		return buffer;
 810ff34:	683b      	ldr	r3, [r7, #0]
	}
 810ff36:	4618      	mov	r0, r3
 810ff38:	3708      	adds	r7, #8
 810ff3a:	46bd      	mov	sp, r7
 810ff3c:	bd80      	pop	{r7, pc}
	...

0810ff40 <_ZN9IMUThread4initEv>:
#include "Telemetry.h"


static char cbuf[256];

void IMUThread::init() {
 810ff40:	b580      	push	{r7, lr}
 810ff42:	b082      	sub	sp, #8
 810ff44:	af00      	add	r7, sp, #0
 810ff46:	6078      	str	r0, [r7, #4]
	bno055_assignI2C(parent->getI2C());
 810ff48:	687b      	ldr	r3, [r7, #4]
 810ff4a:	691b      	ldr	r3, [r3, #16]
 810ff4c:	4618      	mov	r0, r3
 810ff4e:	f7ff fd6d 	bl	810fa2c <_ZN12ProberThread6getI2CEv>
 810ff52:	4603      	mov	r3, r0
 810ff54:	4618      	mov	r0, r3
 810ff56:	f7fd f9e5 	bl	810d324 <bno055_assignI2C>
	bno055_setup();
 810ff5a:	f7fc ffa7 	bl	810ceac <bno055_setup>
	bno055_setOperationModeNDOF();
 810ff5e:	f7fc ff92 	bl	810ce86 <bno055_setOperationModeNDOF>

	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810ff62:	f7fc ffc0 	bl	810cee6 <bno055_getSystemError>
 810ff66:	4603      	mov	r3, r0
 810ff68:	2b00      	cmp	r3, #0
 810ff6a:	bf14      	ite	ne
 810ff6c:	2301      	movne	r3, #1
 810ff6e:	2300      	moveq	r3, #0
 810ff70:	b2db      	uxtb	r3, r3
 810ff72:	2b00      	cmp	r3, #0
 810ff74:	d00a      	beq.n	810ff8c <_ZN9IMUThread4initEv+0x4c>
		println("BNO055 initialization failed");
 810ff76:	687b      	ldr	r3, [r7, #4]
 810ff78:	4909      	ldr	r1, [pc, #36]	; (810ffa0 <_ZN9IMUThread4initEv+0x60>)
 810ff7a:	4618      	mov	r0, r3
 810ff7c:	f000 fce2 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		parent->resetProber();
 810ff80:	687b      	ldr	r3, [r7, #4]
 810ff82:	691b      	ldr	r3, [r3, #16]
 810ff84:	4618      	mov	r0, r3
 810ff86:	f000 fa79 	bl	811047c <_ZN12ProberThread11resetProberEv>
	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810ff8a:	e7ea      	b.n	810ff62 <_ZN9IMUThread4initEv+0x22>
	}

	println("BNO055 initialized");
 810ff8c:	687b      	ldr	r3, [r7, #4]
 810ff8e:	4905      	ldr	r1, [pc, #20]	; (810ffa4 <_ZN9IMUThread4initEv+0x64>)
 810ff90:	4618      	mov	r0, r3
 810ff92:	f000 fcd7 	bl	8110944 <_ZN6Thread7printlnEPKcz>
=======
void ADC24Thread::tare(int32_t zero){
 810d5d4:	b580      	push	{r7, lr}
 810d5d6:	b082      	sub	sp, #8
 810d5d8:	af00      	add	r7, sp, #0
 810d5da:	6078      	str	r0, [r7, #4]
 810d5dc:	6039      	str	r1, [r7, #0]
	_zero = zero;
 810d5de:	687b      	ldr	r3, [r7, #4]
 810d5e0:	683a      	ldr	r2, [r7, #0]
 810d5e2:	615a      	str	r2, [r3, #20]
	println("Scale successfully tared");
 810d5e4:	687b      	ldr	r3, [r7, #4]
 810d5e6:	4904      	ldr	r1, [pc, #16]	; (810d5f8 <_ZN11ADC24Thread4tareEl+0x24>)
 810d5e8:	4618      	mov	r0, r3
 810d5ea:	f000 f9bd 	bl	810d968 <_ZN6Thread7printlnEPKcz>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 810ff96:	bf00      	nop
 810ff98:	3708      	adds	r7, #8
 810ff9a:	46bd      	mov	sp, r7
 810ff9c:	bd80      	pop	{r7, pc}
 810ff9e:	bf00      	nop
 810ffa0:	081148c0 	.word	0x081148c0
 810ffa4:	081148e0 	.word	0x081148e0
=======
 810d5ee:	bf00      	nop
 810d5f0:	3708      	adds	r7, #8
 810d5f2:	46bd      	mov	sp, r7
 810d5f4:	bd80      	pop	{r7, pc}
 810d5f6:	bf00      	nop
 810d5f8:	08110964 	.word	0x08110964
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0810ffa8 <_ZN9IMUThread4loopEv>:

static IMUData data;
static Avionics_AccelMagPacket packet;
void IMUThread::loop() {
 810ffa8:	b590      	push	{r4, r7, lr}
 810ffaa:	b09b      	sub	sp, #108	; 0x6c
 810ffac:	af00      	add	r7, sp, #0
 810ffae:	6078      	str	r0, [r7, #4]
	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 810ffb0:	f7fd f8ee 	bl	810d190 <bno055_getVectorAccelerometer>
 810ffb4:	eeb0 4a40 	vmov.f32	s8, s0
 810ffb8:	eef0 4a60 	vmov.f32	s9, s1
 810ffbc:	eeb0 5a41 	vmov.f32	s10, s2
 810ffc0:	eef0 5a61 	vmov.f32	s11, s3
 810ffc4:	eeb0 6a42 	vmov.f32	s12, s4
 810ffc8:	eef0 6a62 	vmov.f32	s13, s5
 810ffcc:	eeb0 7a43 	vmov.f32	s14, s6
 810ffd0:	eef0 7a63 	vmov.f32	s15, s7
 810ffd4:	ed87 4b02 	vstr	d4, [r7, #8]
 810ffd8:	ed87 5b04 	vstr	d5, [r7, #16]
 810ffdc:	ed87 6b06 	vstr	d6, [r7, #24]
 810ffe0:	ed87 7b08 	vstr	d7, [r7, #32]
 810ffe4:	4c75      	ldr	r4, [pc, #468]	; (81101bc <_ZN9IMUThread4loopEv+0x214>)
 810ffe6:	ed97 4b02 	vldr	d4, [r7, #8]
 810ffea:	ed97 5b04 	vldr	d5, [r7, #16]
 810ffee:	ed97 6b06 	vldr	d6, [r7, #24]
 810fff2:	ed97 7b08 	vldr	d7, [r7, #32]
 810fff6:	eeb0 0a44 	vmov.f32	s0, s8
 810fffa:	eef0 0a64 	vmov.f32	s1, s9
 810fffe:	eeb0 1a45 	vmov.f32	s2, s10
 8110002:	eef0 1a65 	vmov.f32	s3, s11
 8110006:	eeb0 2a46 	vmov.f32	s4, s12
 811000a:	eef0 2a66 	vmov.f32	s5, s13
 811000e:	eeb0 3a47 	vmov.f32	s6, s14
 8110012:	eef0 3a67 	vmov.f32	s7, s15
 8110016:	6878      	ldr	r0, [r7, #4]
 8110018:	f000 f8de 	bl	81101d8 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 811001c:	eef0 6a40 	vmov.f32	s13, s0
 8110020:	eeb0 7a60 	vmov.f32	s14, s1
 8110024:	eef0 7a41 	vmov.f32	s15, s2
 8110028:	edc4 6a00 	vstr	s13, [r4]
 811002c:	ed84 7a01 	vstr	s14, [r4, #4]
 8110030:	edc4 7a02 	vstr	s15, [r4, #8]
	data.gyro = bnoVectorToVector(bno055_getVectorEuler());
 8110034:	f7fd f8ef 	bl	810d216 <bno055_getVectorEuler>
 8110038:	eeb0 4a40 	vmov.f32	s8, s0
 811003c:	eef0 4a60 	vmov.f32	s9, s1
 8110040:	eeb0 5a41 	vmov.f32	s10, s2
 8110044:	eef0 5a61 	vmov.f32	s11, s3
 8110048:	eeb0 6a42 	vmov.f32	s12, s4
 811004c:	eef0 6a62 	vmov.f32	s13, s5
 8110050:	eeb0 7a43 	vmov.f32	s14, s6
 8110054:	eef0 7a63 	vmov.f32	s15, s7
 8110058:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 811005c:	ed87 5b0c 	vstr	d5, [r7, #48]	; 0x30
 8110060:	ed87 6b0e 	vstr	d6, [r7, #56]	; 0x38
 8110064:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8110068:	4c54      	ldr	r4, [pc, #336]	; (81101bc <_ZN9IMUThread4loopEv+0x214>)
 811006a:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 811006e:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8110072:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8110076:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 811007a:	eeb0 0a44 	vmov.f32	s0, s8
 811007e:	eef0 0a64 	vmov.f32	s1, s9
 8110082:	eeb0 1a45 	vmov.f32	s2, s10
 8110086:	eef0 1a65 	vmov.f32	s3, s11
 811008a:	eeb0 2a46 	vmov.f32	s4, s12
 811008e:	eef0 2a66 	vmov.f32	s5, s13
 8110092:	eeb0 3a47 	vmov.f32	s6, s14
 8110096:	eef0 3a67 	vmov.f32	s7, s15
 811009a:	6878      	ldr	r0, [r7, #4]
 811009c:	f000 f89c 	bl	81101d8 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 81100a0:	eef0 6a40 	vmov.f32	s13, s0
 81100a4:	eeb0 7a60 	vmov.f32	s14, s1
 81100a8:	eef0 7a41 	vmov.f32	s15, s2
 81100ac:	edc4 6a03 	vstr	s13, [r4, #12]
 81100b0:	ed84 7a04 	vstr	s14, [r4, #16]
 81100b4:	edc4 7a05 	vstr	s15, [r4, #20]
	data.mag = bnoVectorToVector(bno055_getVectorGravity());
 81100b8:	f7fd f8f0 	bl	810d29c <bno055_getVectorGravity>
 81100bc:	eeb0 4a40 	vmov.f32	s8, s0
 81100c0:	eef0 4a60 	vmov.f32	s9, s1
 81100c4:	eeb0 5a41 	vmov.f32	s10, s2
 81100c8:	eef0 5a61 	vmov.f32	s11, s3
 81100cc:	eeb0 6a42 	vmov.f32	s12, s4
 81100d0:	eef0 6a62 	vmov.f32	s13, s5
 81100d4:	eeb0 7a43 	vmov.f32	s14, s6
 81100d8:	eef0 7a63 	vmov.f32	s15, s7
 81100dc:	ed87 4b12 	vstr	d4, [r7, #72]	; 0x48
 81100e0:	ed87 5b14 	vstr	d5, [r7, #80]	; 0x50
 81100e4:	ed87 6b16 	vstr	d6, [r7, #88]	; 0x58
 81100e8:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 81100ec:	4c33      	ldr	r4, [pc, #204]	; (81101bc <_ZN9IMUThread4loopEv+0x214>)
 81100ee:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 81100f2:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 81100f6:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 81100fa:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 81100fe:	eeb0 0a44 	vmov.f32	s0, s8
 8110102:	eef0 0a64 	vmov.f32	s1, s9
 8110106:	eeb0 1a45 	vmov.f32	s2, s10
 811010a:	eef0 1a65 	vmov.f32	s3, s11
 811010e:	eeb0 2a46 	vmov.f32	s4, s12
 8110112:	eef0 2a66 	vmov.f32	s5, s13
 8110116:	eeb0 3a47 	vmov.f32	s6, s14
 811011a:	eef0 3a67 	vmov.f32	s7, s15
 811011e:	6878      	ldr	r0, [r7, #4]
 8110120:	f000 f85a 	bl	81101d8 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 8110124:	eef0 6a40 	vmov.f32	s13, s0
 8110128:	eeb0 7a60 	vmov.f32	s14, s1
 811012c:	eef0 7a41 	vmov.f32	s15, s2
 8110130:	edc4 6a06 	vstr	s13, [r4, #24]
 8110134:	ed84 7a07 	vstr	s14, [r4, #28]
 8110138:	edc4 7a08 	vstr	s15, [r4, #32]

	if(HAL_I2C_GetError(parent->getI2C()) == HAL_I2C_ERROR_NONE) {
 811013c:	687b      	ldr	r3, [r7, #4]
 811013e:	691b      	ldr	r3, [r3, #16]
 8110140:	4618      	mov	r0, r3
 8110142:	f7ff fc73 	bl	810fa2c <_ZN12ProberThread6getI2CEv>
 8110146:	4603      	mov	r3, r0
 8110148:	4618      	mov	r0, r3
 811014a:	f7f5 fe3a 	bl	8105dc2 <HAL_I2C_GetError>
 811014e:	4603      	mov	r3, r0
 8110150:	2b00      	cmp	r3, #0
 8110152:	bf0c      	ite	eq
 8110154:	2301      	moveq	r3, #1
 8110156:	2300      	movne	r3, #0
 8110158:	b2db      	uxtb	r3, r3
 811015a:	2b00      	cmp	r3, #0
 811015c:	d01b      	beq.n	8110196 <_ZN9IMUThread4loopEv+0x1ee>
		println("%s", data.toString(cbuf));
 811015e:	687c      	ldr	r4, [r7, #4]
 8110160:	4917      	ldr	r1, [pc, #92]	; (81101c0 <_ZN9IMUThread4loopEv+0x218>)
 8110162:	4816      	ldr	r0, [pc, #88]	; (81101bc <_ZN9IMUThread4loopEv+0x214>)
 8110164:	f7ff fe9a 	bl	810fe9c <_ZN7IMUData8toStringEPc>
 8110168:	4603      	mov	r3, r0
 811016a:	461a      	mov	r2, r3
 811016c:	4915      	ldr	r1, [pc, #84]	; (81101c4 <_ZN9IMUThread4loopEv+0x21c>)
 811016e:	4620      	mov	r0, r4
 8110170:	f000 fbe8 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		data.toArray((uint8_t*) &packet);
 8110174:	4914      	ldr	r1, [pc, #80]	; (81101c8 <_ZN9IMUThread4loopEv+0x220>)
 8110176:	4811      	ldr	r0, [pc, #68]	; (81101bc <_ZN9IMUThread4loopEv+0x214>)
 8110178:	f7ff fec0 	bl	810fefc <_ZN7IMUData7toArrayEPh>
		network.send(&packet);
 811017c:	4912      	ldr	r1, [pc, #72]	; (81101c8 <_ZN9IMUThread4loopEv+0x220>)
 811017e:	4813      	ldr	r0, [pc, #76]	; (81101cc <_ZN9IMUThread4loopEv+0x224>)
 8110180:	f7ff f868 	bl	810f254 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_>
		portYIELD();
 8110184:	4b12      	ldr	r3, [pc, #72]	; (81101d0 <_ZN9IMUThread4loopEv+0x228>)
 8110186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 811018a:	601a      	str	r2, [r3, #0]
 811018c:	f3bf 8f4f 	dsb	sy
 8110190:	f3bf 8f6f 	isb	sy
	} else {
		println("BNO055 disconnected");
		terminate();
		parent->resetProber();
	}
}
 8110194:	e00d      	b.n	81101b2 <_ZN9IMUThread4loopEv+0x20a>
		println("BNO055 disconnected");
 8110196:	687b      	ldr	r3, [r7, #4]
 8110198:	490e      	ldr	r1, [pc, #56]	; (81101d4 <_ZN9IMUThread4loopEv+0x22c>)
 811019a:	4618      	mov	r0, r3
 811019c:	f000 fbd2 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		terminate();
 81101a0:	687b      	ldr	r3, [r7, #4]
 81101a2:	4618      	mov	r0, r3
 81101a4:	f000 fbc0 	bl	8110928 <_ZN6Thread9terminateEv>
		parent->resetProber();
 81101a8:	687b      	ldr	r3, [r7, #4]
 81101aa:	691b      	ldr	r3, [r3, #16]
 81101ac:	4618      	mov	r0, r3
 81101ae:	f000 f965 	bl	811047c <_ZN12ProberThread11resetProberEv>
}
 81101b2:	bf00      	nop
 81101b4:	376c      	adds	r7, #108	; 0x6c
 81101b6:	46bd      	mov	sp, r7
 81101b8:	bd90      	pop	{r4, r7, pc}
 81101ba:	bf00      	nop
 81101bc:	10040d2c 	.word	0x10040d2c
 81101c0:	10040c2c 	.word	0x10040c2c
 81101c4:	081148f4 	.word	0x081148f4
 81101c8:	10040d50 	.word	0x10040d50
 81101cc:	10041280 	.word	0x10041280
 81101d0:	e000ed04 	.word	0xe000ed04
 81101d4:	081148f8 	.word	0x081148f8

081101d8 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>:


Vector IMUThread::bnoVectorToVector(bno055_vector_t v) {
 81101d8:	b580      	push	{r7, lr}
 81101da:	b094      	sub	sp, #80	; 0x50
 81101dc:	af00      	add	r7, sp, #0
 81101de:	6378      	str	r0, [r7, #52]	; 0x34
 81101e0:	eeb0 4a40 	vmov.f32	s8, s0
 81101e4:	eef0 4a60 	vmov.f32	s9, s1
 81101e8:	eeb0 5a41 	vmov.f32	s10, s2
 81101ec:	eef0 5a61 	vmov.f32	s11, s3
 81101f0:	eeb0 6a42 	vmov.f32	s12, s4
 81101f4:	eef0 6a62 	vmov.f32	s13, s5
 81101f8:	eeb0 7a43 	vmov.f32	s14, s6
 81101fc:	eef0 7a63 	vmov.f32	s15, s7
 8110200:	ed87 4b04 	vstr	d4, [r7, #16]
 8110204:	ed87 5b06 	vstr	d5, [r7, #24]
 8110208:	ed87 6b08 	vstr	d6, [r7, #32]
 811020c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	Vector vector;

	vector.x = v.x;
 8110210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8110214:	4610      	mov	r0, r2
 8110216:	4619      	mov	r1, r3
 8110218:	f7f0 fd5e 	bl	8100cd8 <__aeabi_d2f>
 811021c:	4603      	mov	r3, r0
 811021e:	63bb      	str	r3, [r7, #56]	; 0x38
	vector.y = v.y;
 8110220:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8110224:	4610      	mov	r0, r2
 8110226:	4619      	mov	r1, r3
 8110228:	f7f0 fd56 	bl	8100cd8 <__aeabi_d2f>
 811022c:	4603      	mov	r3, r0
 811022e:	63fb      	str	r3, [r7, #60]	; 0x3c
	vector.z = v.z;
 8110230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8110234:	4610      	mov	r0, r2
 8110236:	4619      	mov	r1, r3
 8110238:	f7f0 fd4e 	bl	8100cd8 <__aeabi_d2f>
 811023c:	4603      	mov	r3, r0
 811023e:	643b      	str	r3, [r7, #64]	; 0x40

	return vector;
 8110240:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8110244:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8110248:	ca07      	ldmia	r2, {r0, r1, r2}
 811024a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 811024e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8110250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8110252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8110254:	ee06 1a90 	vmov	s13, r1
 8110258:	ee07 2a10 	vmov	s14, r2
 811025c:	ee07 3a90 	vmov	s15, r3
}
 8110260:	eeb0 0a66 	vmov.f32	s0, s13
 8110264:	eef0 0a47 	vmov.f32	s1, s14
 8110268:	eeb0 1a67 	vmov.f32	s2, s15
 811026c:	3750      	adds	r7, #80	; 0x50
 811026e:	46bd      	mov	sp, r7
 8110270:	bd80      	pop	{r7, pc}
	...

08110274 <_ZN9IMUThreadD1Ev>:
#include "DataStructures.h"
=======
0810d5fc <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 810d5fc:	b480      	push	{r7}
 810d5fe:	b083      	sub	sp, #12
 810d600:	af00      	add	r7, sp, #0
 810d602:	6078      	str	r0, [r7, #4]
 810d604:	4a04      	ldr	r2, [pc, #16]	; (810d618 <_ZN6ThreadD1Ev+0x1c>)
 810d606:	687b      	ldr	r3, [r7, #4]
 810d608:	601a      	str	r2, [r3, #0]
 810d60a:	687b      	ldr	r3, [r7, #4]
 810d60c:	4618      	mov	r0, r3
 810d60e:	370c      	adds	r7, #12
 810d610:	46bd      	mov	sp, r7
 810d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d616:	4770      	bx	lr
 810d618:	08110db4 	.word	0x08110db4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
#include "Libraries/BNO055/bno055_stm32.h"
#include "Libraries/BNO055/bno055.h"

class IMUThread : public Thread {
 8110274:	b580      	push	{r7, lr}
 8110276:	b082      	sub	sp, #8
 8110278:	af00      	add	r7, sp, #0
 811027a:	6078      	str	r0, [r7, #4]
 811027c:	4a05      	ldr	r2, [pc, #20]	; (8110294 <_ZN9IMUThreadD1Ev+0x20>)
 811027e:	687b      	ldr	r3, [r7, #4]
 8110280:	601a      	str	r2, [r3, #0]
 8110282:	687b      	ldr	r3, [r7, #4]
 8110284:	4618      	mov	r0, r3
 8110286:	f7fb fb33 	bl	810b8f0 <_ZN6ThreadD1Ev>
 811028a:	687b      	ldr	r3, [r7, #4]
 811028c:	4618      	mov	r0, r3
 811028e:	3708      	adds	r7, #8
 8110290:	46bd      	mov	sp, r7
 8110292:	bd80      	pop	{r7, pc}
 8110294:	08114dfc 	.word	0x08114dfc

08110298 <_ZN9IMUThreadD0Ev>:
 8110298:	b580      	push	{r7, lr}
 811029a:	b082      	sub	sp, #8
 811029c:	af00      	add	r7, sp, #0
 811029e:	6078      	str	r0, [r7, #4]
 81102a0:	6878      	ldr	r0, [r7, #4]
 81102a2:	f7ff ffe7 	bl	8110274 <_ZN9IMUThreadD1Ev>
 81102a6:	2114      	movs	r1, #20
 81102a8:	6878      	ldr	r0, [r7, #4]
 81102aa:	f000 fbf9 	bl	8110aa0 <_ZdlPvj>
 81102ae:	687b      	ldr	r3, [r7, #4]
 81102b0:	4618      	mov	r0, r3
 81102b2:	3708      	adds	r7, #8
 81102b4:	46bd      	mov	sp, r7
 81102b6:	bd80      	pop	{r7, pc}

081102b8 <_ZN15BarometerThreadC1EP12ProberThread>:
public:
	BarometerThread(ProberThread* parent) : Thread("Barometer", 512), bmp280(), parent(parent) {}
 81102b8:	b580      	push	{r7, lr}
 81102ba:	b082      	sub	sp, #8
 81102bc:	af00      	add	r7, sp, #0
 81102be:	6078      	str	r0, [r7, #4]
 81102c0:	6039      	str	r1, [r7, #0]
 81102c2:	687b      	ldr	r3, [r7, #4]
 81102c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 81102c8:	490a      	ldr	r1, [pc, #40]	; (81102f4 <_ZN15BarometerThreadC1EP12ProberThread+0x3c>)
 81102ca:	4618      	mov	r0, r3
 81102cc:	f000 fae5 	bl	811089a <_ZN6ThreadC1EPKcm>
 81102d0:	4a09      	ldr	r2, [pc, #36]	; (81102f8 <_ZN15BarometerThreadC1EP12ProberThread+0x40>)
 81102d2:	687b      	ldr	r3, [r7, #4]
 81102d4:	601a      	str	r2, [r3, #0]
 81102d6:	687b      	ldr	r3, [r7, #4]
 81102d8:	3310      	adds	r3, #16
 81102da:	2234      	movs	r2, #52	; 0x34
 81102dc:	2100      	movs	r1, #0
 81102de:	4618      	mov	r0, r3
 81102e0:	f000 ff50 	bl	8111184 <memset>
 81102e4:	687b      	ldr	r3, [r7, #4]
 81102e6:	683a      	ldr	r2, [r7, #0]
 81102e8:	645a      	str	r2, [r3, #68]	; 0x44
 81102ea:	687b      	ldr	r3, [r7, #4]
 81102ec:	4618      	mov	r0, r3
 81102ee:	3708      	adds	r7, #8
 81102f0:	46bd      	mov	sp, r7
 81102f2:	bd80      	pop	{r7, pc}
 81102f4:	0811490c 	.word	0x0811490c
 81102f8:	08114dc4 	.word	0x08114dc4

081102fc <_ZN9IMUThreadC1EP12ProberThread>:
public:
	IMUThread(ProberThread* parent) : Thread("IMU"), parent(parent) {}
 81102fc:	b580      	push	{r7, lr}
 81102fe:	b082      	sub	sp, #8
 8110300:	af00      	add	r7, sp, #0
 8110302:	6078      	str	r0, [r7, #4]
 8110304:	6039      	str	r1, [r7, #0]
 8110306:	687b      	ldr	r3, [r7, #4]
 8110308:	4907      	ldr	r1, [pc, #28]	; (8110328 <_ZN9IMUThreadC1EP12ProberThread+0x2c>)
 811030a:	4618      	mov	r0, r3
 811030c:	f000 faa2 	bl	8110854 <_ZN6ThreadC1EPKc>
 8110310:	4a06      	ldr	r2, [pc, #24]	; (811032c <_ZN9IMUThreadC1EP12ProberThread+0x30>)
 8110312:	687b      	ldr	r3, [r7, #4]
 8110314:	601a      	str	r2, [r3, #0]
 8110316:	687b      	ldr	r3, [r7, #4]
 8110318:	683a      	ldr	r2, [r7, #0]
 811031a:	611a      	str	r2, [r3, #16]
 811031c:	687b      	ldr	r3, [r7, #4]
 811031e:	4618      	mov	r0, r3
 8110320:	3708      	adds	r7, #8
 8110322:	46bd      	mov	sp, r7
 8110324:	bd80      	pop	{r7, pc}
 8110326:	bf00      	nop
 8110328:	08114918 	.word	0x08114918
 811032c:	08114dfc 	.word	0x08114dfc
=======
0810d61c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 810d61c:	b580      	push	{r7, lr}
 810d61e:	b082      	sub	sp, #8
 810d620:	af00      	add	r7, sp, #0
 810d622:	6078      	str	r0, [r7, #4]
 810d624:	6039      	str	r1, [r7, #0]
 810d626:	687b      	ldr	r3, [r7, #4]
 810d628:	4907      	ldr	r1, [pc, #28]	; (810d648 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 810d62a:	4618      	mov	r0, r3
 810d62c:	f000 f947 	bl	810d8be <_ZN6ThreadC1EPKc>
 810d630:	4a06      	ldr	r2, [pc, #24]	; (810d64c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 810d632:	687b      	ldr	r3, [r7, #4]
 810d634:	601a      	str	r2, [r3, #0]
 810d636:	687b      	ldr	r3, [r7, #4]
 810d638:	683a      	ldr	r2, [r7, #0]
 810d63a:	60da      	str	r2, [r3, #12]
 810d63c:	687b      	ldr	r3, [r7, #4]
 810d63e:	4618      	mov	r0, r3
 810d640:	3708      	adds	r7, #8
 810d642:	46bd      	mov	sp, r7
 810d644:	bd80      	pop	{r7, pc}
 810d646:	bf00      	nop
 810d648:	08110980 	.word	0x08110980
 810d64c:	08110d40 	.word	0x08110d40

0810d650 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 810d650:	b580      	push	{r7, lr}
 810d652:	b082      	sub	sp, #8
 810d654:	af00      	add	r7, sp, #0
 810d656:	6078      	str	r0, [r7, #4]
 810d658:	4a05      	ldr	r2, [pc, #20]	; (810d670 <_ZN14WatchdogThreadD1Ev+0x20>)
 810d65a:	687b      	ldr	r3, [r7, #4]
 810d65c:	601a      	str	r2, [r3, #0]
 810d65e:	687b      	ldr	r3, [r7, #4]
 810d660:	4618      	mov	r0, r3
 810d662:	f7ff ffcb 	bl	810d5fc <_ZN6ThreadD1Ev>
 810d666:	687b      	ldr	r3, [r7, #4]
 810d668:	4618      	mov	r0, r3
 810d66a:	3708      	adds	r7, #8
 810d66c:	46bd      	mov	sp, r7
 810d66e:	bd80      	pop	{r7, pc}
 810d670:	08110d40 	.word	0x08110d40
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110330 <_ZN12ProberThread4initEv>:
#include "ADC24.h"
#include "ADC16.h"

#include "Lang/Operators.h"

void ProberThread::init() {
 8110330:	b580      	push	{r7, lr}
 8110332:	b082      	sub	sp, #8
 8110334:	af00      	add	r7, sp, #0
 8110336:	6078      	str	r0, [r7, #4]
	this->semaphore = xSemaphoreCreateBinary();
 8110338:	2203      	movs	r2, #3
 811033a:	2100      	movs	r1, #0
 811033c:	2001      	movs	r0, #1
 811033e:	f7f9 fde3 	bl	8109f08 <xQueueGenericCreate>
 8110342:	4602      	mov	r2, r0
 8110344:	687b      	ldr	r3, [r7, #4]
 8110346:	615a      	str	r2, [r3, #20]
	vTaskDelay(100 / portTICK_PERIOD_MS);
 8110348:	2064      	movs	r0, #100	; 0x64
 811034a:	f7fa fb9f 	bl	810aa8c <vTaskDelay>
}
 811034e:	bf00      	nop
 8110350:	3708      	adds	r7, #8
 8110352:	46bd      	mov	sp, r7
 8110354:	bd80      	pop	{r7, pc}

08110356 <_ZN12ProberThread8probeI2CEh>:

bool ProberThread::probeI2C(uint8_t address) {
 8110356:	b580      	push	{r7, lr}
 8110358:	b082      	sub	sp, #8
 811035a:	af00      	add	r7, sp, #0
 811035c:	6078      	str	r0, [r7, #4]
 811035e:	460b      	mov	r3, r1
 8110360:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_IsDeviceReady(hi2c, address << 1, 3, 100) == HAL_OK;
 8110362:	687b      	ldr	r3, [r7, #4]
 8110364:	6918      	ldr	r0, [r3, #16]
 8110366:	78fb      	ldrb	r3, [r7, #3]
 8110368:	b29b      	uxth	r3, r3
 811036a:	005b      	lsls	r3, r3, #1
 811036c:	b299      	uxth	r1, r3
 811036e:	2364      	movs	r3, #100	; 0x64
 8110370:	2203      	movs	r2, #3
 8110372:	f7f5 fc11 	bl	8105b98 <HAL_I2C_IsDeviceReady>
 8110376:	4603      	mov	r3, r0
 8110378:	2b00      	cmp	r3, #0
 811037a:	bf0c      	ite	eq
 811037c:	2301      	moveq	r3, #1
 811037e:	2300      	movne	r3, #0
 8110380:	b2db      	uxtb	r3, r3
}
 8110382:	4618      	mov	r0, r3
 8110384:	3708      	adds	r7, #8
 8110386:	46bd      	mov	sp, r7
 8110388:	bd80      	pop	{r7, pc}
	...

0811038c <_ZN12ProberThread4loopEv>:
bool ProberThread::probeDB() {
	HX711_init();
	return HX711_isReady();
}

void ProberThread::loop() {
 811038c:	b590      	push	{r4, r7, lr}
 811038e:	b083      	sub	sp, #12
 8110390:	af00      	add	r7, sp, #0
 8110392:	6078      	str	r0, [r7, #4]
	if(probeI2C(0x76)) {
 8110394:	2176      	movs	r1, #118	; 0x76
 8110396:	6878      	ldr	r0, [r7, #4]
 8110398:	f7ff ffdd 	bl	8110356 <_ZN12ProberThread8probeI2CEh>
 811039c:	4603      	mov	r3, r0
 811039e:	2b00      	cmp	r3, #0
 81103a0:	d017      	beq.n	81103d2 <_ZN12ProberThread4loopEv+0x46>
		println("Barometer detected");
 81103a2:	687b      	ldr	r3, [r7, #4]
 81103a4:	4932      	ldr	r1, [pc, #200]	; (8110470 <_ZN12ProberThread4loopEv+0xe4>)
 81103a6:	4618      	mov	r0, r3
 81103a8:	f000 facc 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		this->instance = new BarometerThread(this);
 81103ac:	2048      	movs	r0, #72	; 0x48
 81103ae:	f7fb fed7 	bl	810c160 <_Znwj>
 81103b2:	4603      	mov	r3, r0
 81103b4:	461c      	mov	r4, r3
 81103b6:	6879      	ldr	r1, [r7, #4]
 81103b8:	4620      	mov	r0, r4
 81103ba:	f7ff ff7d 	bl	81102b8 <_ZN15BarometerThreadC1EP12ProberThread>
 81103be:	687b      	ldr	r3, [r7, #4]
 81103c0:	619c      	str	r4, [r3, #24]
		xSemaphoreTake(semaphore, portMAX_DELAY);
 81103c2:	687b      	ldr	r3, [r7, #4]
 81103c4:	695b      	ldr	r3, [r3, #20]
 81103c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81103ca:	4618      	mov	r0, r3
 81103cc:	f7f9 ff2c 	bl	810a228 <xQueueSemaphoreTake>
 81103d0:	e040      	b.n	8110454 <_ZN12ProberThread4loopEv+0xc8>
	} else if(probeI2C(0x28)) {
 81103d2:	2128      	movs	r1, #40	; 0x28
 81103d4:	6878      	ldr	r0, [r7, #4]
 81103d6:	f7ff ffbe 	bl	8110356 <_ZN12ProberThread8probeI2CEh>
 81103da:	4603      	mov	r3, r0
 81103dc:	2b00      	cmp	r3, #0
 81103de:	d017      	beq.n	8110410 <_ZN12ProberThread4loopEv+0x84>
		println("Accelerometer detected");
 81103e0:	687b      	ldr	r3, [r7, #4]
 81103e2:	4924      	ldr	r1, [pc, #144]	; (8110474 <_ZN12ProberThread4loopEv+0xe8>)
 81103e4:	4618      	mov	r0, r3
 81103e6:	f000 faad 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		this->instance = new IMUThread(this);
 81103ea:	2014      	movs	r0, #20
 81103ec:	f7fb feb8 	bl	810c160 <_Znwj>
 81103f0:	4603      	mov	r3, r0
 81103f2:	461c      	mov	r4, r3
 81103f4:	6879      	ldr	r1, [r7, #4]
 81103f6:	4620      	mov	r0, r4
 81103f8:	f7ff ff80 	bl	81102fc <_ZN9IMUThreadC1EP12ProberThread>
 81103fc:	687b      	ldr	r3, [r7, #4]
 81103fe:	619c      	str	r4, [r3, #24]
		xSemaphoreTake(semaphore, portMAX_DELAY);
 8110400:	687b      	ldr	r3, [r7, #4]
 8110402:	695b      	ldr	r3, [r3, #20]
 8110404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8110408:	4618      	mov	r0, r3
 811040a:	f7f9 ff0d 	bl	810a228 <xQueueSemaphoreTake>
 811040e:	e021      	b.n	8110454 <_ZN12ProberThread4loopEv+0xc8>
	} else if(probeI2C(0x48)) {
 8110410:	2148      	movs	r1, #72	; 0x48
 8110412:	6878      	ldr	r0, [r7, #4]
 8110414:	f7ff ff9f 	bl	8110356 <_ZN12ProberThread8probeI2CEh>
 8110418:	4603      	mov	r3, r0
 811041a:	2b00      	cmp	r3, #0
 811041c:	d017      	beq.n	811044e <_ZN12ProberThread4loopEv+0xc2>
		println("Voltmeter detected");
 811041e:	687b      	ldr	r3, [r7, #4]
 8110420:	4915      	ldr	r1, [pc, #84]	; (8110478 <_ZN12ProberThread4loopEv+0xec>)
 8110422:	4618      	mov	r0, r3
 8110424:	f000 fa8e 	bl	8110944 <_ZN6Thread7printlnEPKcz>
		this->instance = new ADC16Thread(this);
 8110428:	2024      	movs	r0, #36	; 0x24
 811042a:	f7fb fe99 	bl	810c160 <_Znwj>
 811042e:	4603      	mov	r3, r0
 8110430:	461c      	mov	r4, r3
 8110432:	6879      	ldr	r1, [r7, #4]
 8110434:	4620      	mov	r0, r4
 8110436:	f7ff fb05 	bl	810fa44 <_ZN11ADC16ThreadC1EP12ProberThread>
 811043a:	687b      	ldr	r3, [r7, #4]
 811043c:	619c      	str	r4, [r3, #24]
		xSemaphoreTake(semaphore, portMAX_DELAY);
 811043e:	687b      	ldr	r3, [r7, #4]
 8110440:	695b      	ldr	r3, [r3, #20]
 8110442:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8110446:	4618      	mov	r0, r3
 8110448:	f7f9 feee 	bl	810a228 <xQueueSemaphoreTake>
 811044c:	e002      	b.n	8110454 <_ZN12ProberThread4loopEv+0xc8>
	} else {
		vTaskDelay(100 / portTICK_PERIOD_MS);
 811044e:	2064      	movs	r0, #100	; 0x64
 8110450:	f7fa fb1c 	bl	810aa8c <vTaskDelay>
	}

	HAL_I2C_DeInit(hi2c);
 8110454:	687b      	ldr	r3, [r7, #4]
 8110456:	691b      	ldr	r3, [r3, #16]
 8110458:	4618      	mov	r0, r3
 811045a:	f7f4 ff56 	bl	810530a <HAL_I2C_DeInit>
	HAL_I2C_Init(hi2c);
 811045e:	687b      	ldr	r3, [r7, #4]
 8110460:	691b      	ldr	r3, [r3, #16]
 8110462:	4618      	mov	r0, r3
 8110464:	f7f4 fec2 	bl	81051ec <HAL_I2C_Init>
}
 8110468:	bf00      	nop
 811046a:	370c      	adds	r7, #12
 811046c:	46bd      	mov	sp, r7
 811046e:	bd90      	pop	{r4, r7, pc}
 8110470:	0811491c 	.word	0x0811491c
 8110474:	08114930 	.word	0x08114930
 8110478:	08114948 	.word	0x08114948

0811047c <_ZN12ProberThread11resetProberEv>:

void ProberThread::resetProber() {
 811047c:	b580      	push	{r7, lr}
 811047e:	b082      	sub	sp, #8
 8110480:	af00      	add	r7, sp, #0
 8110482:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(semaphore);
 8110484:	687b      	ldr	r3, [r7, #4]
 8110486:	6958      	ldr	r0, [r3, #20]
 8110488:	2300      	movs	r3, #0
 811048a:	2200      	movs	r2, #0
 811048c:	2100      	movs	r1, #0
 811048e:	f7f9 fdcd 	bl	810a02c <xQueueGenericSend>
}
 8110492:	bf00      	nop
 8110494:	3708      	adds	r7, #8
 8110496:	46bd      	mov	sp, r7
 8110498:	bd80      	pop	{r7, pc}
	...

0811049c <_ZN12ProberThreadD1Ev>:
class ProberThread : Thread {
 811049c:	b580      	push	{r7, lr}
 811049e:	b082      	sub	sp, #8
 81104a0:	af00      	add	r7, sp, #0
 81104a2:	6078      	str	r0, [r7, #4]
 81104a4:	4a05      	ldr	r2, [pc, #20]	; (81104bc <_ZN12ProberThreadD1Ev+0x20>)
 81104a6:	687b      	ldr	r3, [r7, #4]
 81104a8:	601a      	str	r2, [r3, #0]
 81104aa:	687b      	ldr	r3, [r7, #4]
 81104ac:	4618      	mov	r0, r3
 81104ae:	f7fb fa1f 	bl	810b8f0 <_ZN6ThreadD1Ev>
 81104b2:	687b      	ldr	r3, [r7, #4]
 81104b4:	4618      	mov	r0, r3
 81104b6:	3708      	adds	r7, #8
 81104b8:	46bd      	mov	sp, r7
 81104ba:	bd80      	pop	{r7, pc}
 81104bc:	08114e2c 	.word	0x08114e2c

081104c0 <_ZN12ProberThreadD0Ev>:
 81104c0:	b580      	push	{r7, lr}
 81104c2:	b082      	sub	sp, #8
 81104c4:	af00      	add	r7, sp, #0
 81104c6:	6078      	str	r0, [r7, #4]
 81104c8:	6878      	ldr	r0, [r7, #4]
 81104ca:	f7ff ffe7 	bl	811049c <_ZN12ProberThreadD1Ev>
 81104ce:	211c      	movs	r1, #28
 81104d0:	6878      	ldr	r0, [r7, #4]
 81104d2:	f000 fae5 	bl	8110aa0 <_ZdlPvj>
 81104d6:	687b      	ldr	r3, [r7, #4]
 81104d8:	4618      	mov	r0, r3
 81104da:	3708      	adds	r7, #8
 81104dc:	46bd      	mov	sp, r7
 81104de:	bd80      	pop	{r7, pc}

081104e0 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 81104e0:	b580      	push	{r7, lr}
 81104e2:	b082      	sub	sp, #8
 81104e4:	af00      	add	r7, sp, #0
 81104e6:	6078      	str	r0, [r7, #4]
 81104e8:	6039      	str	r1, [r7, #0]
 81104ea:	687b      	ldr	r3, [r7, #4]
 81104ec:	4907      	ldr	r1, [pc, #28]	; (811050c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 81104ee:	4618      	mov	r0, r3
 81104f0:	f000 f9b0 	bl	8110854 <_ZN6ThreadC1EPKc>
 81104f4:	4a06      	ldr	r2, [pc, #24]	; (8110510 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 81104f6:	687b      	ldr	r3, [r7, #4]
 81104f8:	601a      	str	r2, [r3, #0]
 81104fa:	687b      	ldr	r3, [r7, #4]
 81104fc:	683a      	ldr	r2, [r7, #0]
 81104fe:	611a      	str	r2, [r3, #16]
 8110500:	687b      	ldr	r3, [r7, #4]
 8110502:	4618      	mov	r0, r3
 8110504:	3708      	adds	r7, #8
 8110506:	46bd      	mov	sp, r7
 8110508:	bd80      	pop	{r7, pc}
 811050a:	bf00      	nop
 811050c:	0811495c 	.word	0x0811495c
 8110510:	08114d4c 	.word	0x08114d4c

08110514 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", 1024), hi2c(hi2c), instance(nullptr) {}
 8110514:	b580      	push	{r7, lr}
 8110516:	b082      	sub	sp, #8
 8110518:	af00      	add	r7, sp, #0
 811051a:	6078      	str	r0, [r7, #4]
 811051c:	6039      	str	r1, [r7, #0]
 811051e:	687b      	ldr	r3, [r7, #4]
 8110520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8110524:	4908      	ldr	r1, [pc, #32]	; (8110548 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef+0x34>)
 8110526:	4618      	mov	r0, r3
 8110528:	f000 f9b7 	bl	811089a <_ZN6ThreadC1EPKcm>
 811052c:	4a07      	ldr	r2, [pc, #28]	; (811054c <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef+0x38>)
 811052e:	687b      	ldr	r3, [r7, #4]
 8110530:	601a      	str	r2, [r3, #0]
 8110532:	687b      	ldr	r3, [r7, #4]
 8110534:	683a      	ldr	r2, [r7, #0]
 8110536:	611a      	str	r2, [r3, #16]
 8110538:	687b      	ldr	r3, [r7, #4]
 811053a:	2200      	movs	r2, #0
 811053c:	619a      	str	r2, [r3, #24]
 811053e:	687b      	ldr	r3, [r7, #4]
 8110540:	4618      	mov	r0, r3
 8110542:	3708      	adds	r7, #8
 8110544:	46bd      	mov	sp, r7
 8110546:	bd80      	pop	{r7, pc}
 8110548:	08114968 	.word	0x08114968
 811054c:	08114e2c 	.word	0x08114e2c

08110550 <__tcf_0>:
=======
0810d674 <__tcf_0>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics


#ifdef CORE_CM4
#include "i2c.h"
void initCortexM4() {
	static WatchdogThread watchdog(&hiwdg2);
<<<<<<< HEAD
 8110550:	b580      	push	{r7, lr}
 8110552:	af00      	add	r7, sp, #0
 8110554:	4801      	ldr	r0, [pc, #4]	; (811055c <__tcf_0+0xc>)
 8110556:	f7ff fa1f 	bl	810f998 <_ZN14WatchdogThreadD1Ev>
 811055a:	bd80      	pop	{r7, pc}
 811055c:	10040d74 	.word	0x10040d74
=======
 810d674:	b580      	push	{r7, lr}
 810d676:	af00      	add	r7, sp, #0
 810d678:	4801      	ldr	r0, [pc, #4]	; (810d680 <__tcf_0+0xc>)
 810d67a:	f7ff ffe9 	bl	810d650 <_ZN14WatchdogThreadD1Ev>
 810d67e:	bd80      	pop	{r7, pc}
 810d680:	10004720 	.word	0x10004720
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110560 <__tcf_1>:
=======
0810d684 <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 512



class Shell : public Thread {
 810d684:	b580      	push	{r7, lr}
 810d686:	b082      	sub	sp, #8
 810d688:	af00      	add	r7, sp, #0
 810d68a:	6078      	str	r0, [r7, #4]
 810d68c:	4a05      	ldr	r2, [pc, #20]	; (810d6a4 <_ZN5ShellD1Ev+0x20>)
 810d68e:	687b      	ldr	r3, [r7, #4]
 810d690:	601a      	str	r2, [r3, #0]
 810d692:	687b      	ldr	r3, [r7, #4]
 810d694:	4618      	mov	r0, r3
 810d696:	f7ff ffb1 	bl	810d5fc <_ZN6ThreadD1Ev>
 810d69a:	687b      	ldr	r3, [r7, #4]
 810d69c:	4618      	mov	r0, r3
 810d69e:	3708      	adds	r7, #8
 810d6a0:	46bd      	mov	sp, r7
 810d6a2:	bd80      	pop	{r7, pc}
 810d6a4:	081109d8 	.word	0x081109d8

0810d6a8 <__tcf_1>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	static Shell shell(&huart3, &terminal);
<<<<<<< HEAD
 8110560:	b580      	push	{r7, lr}
 8110562:	af00      	add	r7, sp, #0
 8110564:	4801      	ldr	r0, [pc, #4]	; (811056c <__tcf_1+0xc>)
 8110566:	f7fb fba9 	bl	810bcbc <_ZN5ShellD1Ev>
 811056a:	bd80      	pop	{r7, pc}
 811056c:	10040d8c 	.word	0x10040d8c
=======
 810d6a8:	b580      	push	{r7, lr}
 810d6aa:	af00      	add	r7, sp, #0
 810d6ac:	4801      	ldr	r0, [pc, #4]	; (810d6b4 <__tcf_1+0xc>)
 810d6ae:	f7ff ffe9 	bl	810d684 <_ZN5ShellD1Ev>
 810d6b2:	bd80      	pop	{r7, pc}
 810d6b4:	10004734 	.word	0x10004734
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110570 <__tcf_2>:
	//static IMUThread imu(&hi2c3);
	static ProberThread prober1(&hi2c1);
 8110570:	b580      	push	{r7, lr}
 8110572:	af00      	add	r7, sp, #0
 8110574:	4801      	ldr	r0, [pc, #4]	; (811057c <__tcf_2+0xc>)
 8110576:	f7ff ff91 	bl	811049c <_ZN12ProberThreadD1Ev>
 811057a:	bd80      	pop	{r7, pc}
 811057c:	100411f8 	.word	0x100411f8

08110580 <__tcf_3>:
	static ProberThread prober2(&hi2c2);
 8110580:	b580      	push	{r7, lr}
 8110582:	af00      	add	r7, sp, #0
 8110584:	4801      	ldr	r0, [pc, #4]	; (811058c <__tcf_3+0xc>)
 8110586:	f7ff ff89 	bl	811049c <_ZN12ProberThreadD1Ev>
 811058a:	bd80      	pop	{r7, pc}
 811058c:	10041218 	.word	0x10041218

08110590 <__tcf_4>:
	static ProberThread prober3(&hi2c3);
 8110590:	b580      	push	{r7, lr}
 8110592:	af00      	add	r7, sp, #0
 8110594:	4801      	ldr	r0, [pc, #4]	; (811059c <__tcf_4+0xc>)
 8110596:	f7ff ff81 	bl	811049c <_ZN12ProberThreadD1Ev>
 811059a:	bd80      	pop	{r7, pc}
 811059c:	10041238 	.word	0x10041238

081105a0 <initCortexM4>:
=======
0810d6b8 <_ZN11ADC24ThreadD1Ev>:
#include "DataStructures.h"

#include "Libraries/HX711/hx711.h"


class ADC24Thread : Thread {
 810d6b8:	b580      	push	{r7, lr}
 810d6ba:	b082      	sub	sp, #8
 810d6bc:	af00      	add	r7, sp, #0
 810d6be:	6078      	str	r0, [r7, #4]
 810d6c0:	4a05      	ldr	r2, [pc, #20]	; (810d6d8 <_ZN11ADC24ThreadD1Ev+0x20>)
 810d6c2:	687b      	ldr	r3, [r7, #4]
 810d6c4:	601a      	str	r2, [r3, #0]
 810d6c6:	687b      	ldr	r3, [r7, #4]
 810d6c8:	4618      	mov	r0, r3
 810d6ca:	f7ff ff97 	bl	810d5fc <_ZN6ThreadD1Ev>
 810d6ce:	687b      	ldr	r3, [r7, #4]
 810d6d0:	4618      	mov	r0, r3
 810d6d2:	3708      	adds	r7, #8
 810d6d4:	46bd      	mov	sp, r7
 810d6d6:	bd80      	pop	{r7, pc}
 810d6d8:	08110d7c 	.word	0x08110d7c

0810d6dc <__tcf_2>:
	//static IMUThread imu(&hi2c1);
	//static BarometerThread barometer(&hi2c1);
	static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11); //Same pins as i2c2
 810d6dc:	b580      	push	{r7, lr}
 810d6de:	af00      	add	r7, sp, #0
 810d6e0:	4801      	ldr	r0, [pc, #4]	; (810d6e8 <__tcf_2+0xc>)
 810d6e2:	f7ff ffe9 	bl	810d6b8 <_ZN11ADC24ThreadD1Ev>
 810d6e6:	bd80      	pop	{r7, pc}
 810d6e8:	10004b9c 	.word	0x10004b9c

0810d6ec <initCortexM4>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
void initCortexM4() {
<<<<<<< HEAD
 81105a0:	b580      	push	{r7, lr}
 81105a2:	af00      	add	r7, sp, #0
=======
 810d6ec:	b580      	push	{r7, lr}
 810d6ee:	b082      	sub	sp, #8
 810d6f0:	af02      	add	r7, sp, #8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	static WatchdogThread watchdog(&hiwdg2);
<<<<<<< HEAD
 81105a4:	4b58      	ldr	r3, [pc, #352]	; (8110708 <initCortexM4+0x168>)
 81105a6:	781b      	ldrb	r3, [r3, #0]
 81105a8:	f3bf 8f5b 	dmb	ish
 81105ac:	b2db      	uxtb	r3, r3
 81105ae:	f003 0301 	and.w	r3, r3, #1
 81105b2:	2b00      	cmp	r3, #0
 81105b4:	bf0c      	ite	eq
 81105b6:	2301      	moveq	r3, #1
 81105b8:	2300      	movne	r3, #0
 81105ba:	b2db      	uxtb	r3, r3
 81105bc:	2b00      	cmp	r3, #0
 81105be:	d014      	beq.n	81105ea <initCortexM4+0x4a>
 81105c0:	4851      	ldr	r0, [pc, #324]	; (8110708 <initCortexM4+0x168>)
 81105c2:	f000 fa6f 	bl	8110aa4 <__cxa_guard_acquire>
 81105c6:	4603      	mov	r3, r0
 81105c8:	2b00      	cmp	r3, #0
 81105ca:	bf14      	ite	ne
 81105cc:	2301      	movne	r3, #1
 81105ce:	2300      	moveq	r3, #0
 81105d0:	b2db      	uxtb	r3, r3
 81105d2:	2b00      	cmp	r3, #0
 81105d4:	d009      	beq.n	81105ea <initCortexM4+0x4a>
 81105d6:	494d      	ldr	r1, [pc, #308]	; (811070c <initCortexM4+0x16c>)
 81105d8:	484d      	ldr	r0, [pc, #308]	; (8110710 <initCortexM4+0x170>)
 81105da:	f7ff ff81 	bl	81104e0 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 81105de:	484a      	ldr	r0, [pc, #296]	; (8110708 <initCortexM4+0x168>)
 81105e0:	f000 fa6c 	bl	8110abc <__cxa_guard_release>
 81105e4:	484b      	ldr	r0, [pc, #300]	; (8110714 <initCortexM4+0x174>)
 81105e6:	f000 fd8b 	bl	8111100 <atexit>
=======
 810d6f2:	4b39      	ldr	r3, [pc, #228]	; (810d7d8 <initCortexM4+0xec>)
 810d6f4:	781b      	ldrb	r3, [r3, #0]
 810d6f6:	f3bf 8f5b 	dmb	ish
 810d6fa:	b2db      	uxtb	r3, r3
 810d6fc:	f003 0301 	and.w	r3, r3, #1
 810d700:	2b00      	cmp	r3, #0
 810d702:	bf0c      	ite	eq
 810d704:	2301      	moveq	r3, #1
 810d706:	2300      	movne	r3, #0
 810d708:	b2db      	uxtb	r3, r3
 810d70a:	2b00      	cmp	r3, #0
 810d70c:	d014      	beq.n	810d738 <initCortexM4+0x4c>
 810d70e:	4832      	ldr	r0, [pc, #200]	; (810d7d8 <initCortexM4+0xec>)
 810d710:	f000 fbe4 	bl	810dedc <__cxa_guard_acquire>
 810d714:	4603      	mov	r3, r0
 810d716:	2b00      	cmp	r3, #0
 810d718:	bf14      	ite	ne
 810d71a:	2301      	movne	r3, #1
 810d71c:	2300      	moveq	r3, #0
 810d71e:	b2db      	uxtb	r3, r3
 810d720:	2b00      	cmp	r3, #0
 810d722:	d009      	beq.n	810d738 <initCortexM4+0x4c>
 810d724:	492d      	ldr	r1, [pc, #180]	; (810d7dc <initCortexM4+0xf0>)
 810d726:	482e      	ldr	r0, [pc, #184]	; (810d7e0 <initCortexM4+0xf4>)
 810d728:	f7ff ff78 	bl	810d61c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 810d72c:	482a      	ldr	r0, [pc, #168]	; (810d7d8 <initCortexM4+0xec>)
 810d72e:	f000 fbe1 	bl	810def4 <__cxa_guard_release>
 810d732:	482c      	ldr	r0, [pc, #176]	; (810d7e4 <initCortexM4+0xf8>)
 810d734:	f000 fcec 	bl	810e110 <atexit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	static Shell shell(&huart3, &terminal);
<<<<<<< HEAD
 81105ea:	4b4b      	ldr	r3, [pc, #300]	; (8110718 <initCortexM4+0x178>)
 81105ec:	781b      	ldrb	r3, [r3, #0]
 81105ee:	f3bf 8f5b 	dmb	ish
 81105f2:	b2db      	uxtb	r3, r3
 81105f4:	f003 0301 	and.w	r3, r3, #1
 81105f8:	2b00      	cmp	r3, #0
 81105fa:	bf0c      	ite	eq
 81105fc:	2301      	moveq	r3, #1
 81105fe:	2300      	movne	r3, #0
 8110600:	b2db      	uxtb	r3, r3
 8110602:	2b00      	cmp	r3, #0
 8110604:	d015      	beq.n	8110632 <initCortexM4+0x92>
 8110606:	4844      	ldr	r0, [pc, #272]	; (8110718 <initCortexM4+0x178>)
 8110608:	f000 fa4c 	bl	8110aa4 <__cxa_guard_acquire>
 811060c:	4603      	mov	r3, r0
 811060e:	2b00      	cmp	r3, #0
 8110610:	bf14      	ite	ne
 8110612:	2301      	movne	r3, #1
 8110614:	2300      	moveq	r3, #0
 8110616:	b2db      	uxtb	r3, r3
 8110618:	2b00      	cmp	r3, #0
 811061a:	d00a      	beq.n	8110632 <initCortexM4+0x92>
 811061c:	4a3f      	ldr	r2, [pc, #252]	; (811071c <initCortexM4+0x17c>)
 811061e:	4940      	ldr	r1, [pc, #256]	; (8110720 <initCortexM4+0x180>)
 8110620:	4840      	ldr	r0, [pc, #256]	; (8110724 <initCortexM4+0x184>)
 8110622:	f7fb f985 	bl	810b930 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 8110626:	483c      	ldr	r0, [pc, #240]	; (8110718 <initCortexM4+0x178>)
 8110628:	f000 fa48 	bl	8110abc <__cxa_guard_release>
 811062c:	483e      	ldr	r0, [pc, #248]	; (8110728 <initCortexM4+0x188>)
 811062e:	f000 fd67 	bl	8111100 <atexit>
	static ProberThread prober1(&hi2c1);
 8110632:	4b3e      	ldr	r3, [pc, #248]	; (811072c <initCortexM4+0x18c>)
 8110634:	781b      	ldrb	r3, [r3, #0]
 8110636:	f3bf 8f5b 	dmb	ish
 811063a:	b2db      	uxtb	r3, r3
 811063c:	f003 0301 	and.w	r3, r3, #1
 8110640:	2b00      	cmp	r3, #0
 8110642:	bf0c      	ite	eq
 8110644:	2301      	moveq	r3, #1
 8110646:	2300      	movne	r3, #0
 8110648:	b2db      	uxtb	r3, r3
 811064a:	2b00      	cmp	r3, #0
 811064c:	d014      	beq.n	8110678 <initCortexM4+0xd8>
 811064e:	4837      	ldr	r0, [pc, #220]	; (811072c <initCortexM4+0x18c>)
 8110650:	f000 fa28 	bl	8110aa4 <__cxa_guard_acquire>
 8110654:	4603      	mov	r3, r0
 8110656:	2b00      	cmp	r3, #0
 8110658:	bf14      	ite	ne
 811065a:	2301      	movne	r3, #1
 811065c:	2300      	moveq	r3, #0
 811065e:	b2db      	uxtb	r3, r3
 8110660:	2b00      	cmp	r3, #0
 8110662:	d009      	beq.n	8110678 <initCortexM4+0xd8>
 8110664:	4932      	ldr	r1, [pc, #200]	; (8110730 <initCortexM4+0x190>)
 8110666:	4833      	ldr	r0, [pc, #204]	; (8110734 <initCortexM4+0x194>)
 8110668:	f7ff ff54 	bl	8110514 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>
 811066c:	482f      	ldr	r0, [pc, #188]	; (811072c <initCortexM4+0x18c>)
 811066e:	f000 fa25 	bl	8110abc <__cxa_guard_release>
 8110672:	4831      	ldr	r0, [pc, #196]	; (8110738 <initCortexM4+0x198>)
 8110674:	f000 fd44 	bl	8111100 <atexit>
	static ProberThread prober2(&hi2c2);
 8110678:	4b30      	ldr	r3, [pc, #192]	; (811073c <initCortexM4+0x19c>)
 811067a:	781b      	ldrb	r3, [r3, #0]
 811067c:	f3bf 8f5b 	dmb	ish
 8110680:	b2db      	uxtb	r3, r3
 8110682:	f003 0301 	and.w	r3, r3, #1
 8110686:	2b00      	cmp	r3, #0
 8110688:	bf0c      	ite	eq
 811068a:	2301      	moveq	r3, #1
 811068c:	2300      	movne	r3, #0
 811068e:	b2db      	uxtb	r3, r3
 8110690:	2b00      	cmp	r3, #0
 8110692:	d014      	beq.n	81106be <initCortexM4+0x11e>
 8110694:	4829      	ldr	r0, [pc, #164]	; (811073c <initCortexM4+0x19c>)
 8110696:	f000 fa05 	bl	8110aa4 <__cxa_guard_acquire>
 811069a:	4603      	mov	r3, r0
 811069c:	2b00      	cmp	r3, #0
 811069e:	bf14      	ite	ne
 81106a0:	2301      	movne	r3, #1
 81106a2:	2300      	moveq	r3, #0
 81106a4:	b2db      	uxtb	r3, r3
 81106a6:	2b00      	cmp	r3, #0
 81106a8:	d009      	beq.n	81106be <initCortexM4+0x11e>
 81106aa:	4925      	ldr	r1, [pc, #148]	; (8110740 <initCortexM4+0x1a0>)
 81106ac:	4825      	ldr	r0, [pc, #148]	; (8110744 <initCortexM4+0x1a4>)
 81106ae:	f7ff ff31 	bl	8110514 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>
 81106b2:	4822      	ldr	r0, [pc, #136]	; (811073c <initCortexM4+0x19c>)
 81106b4:	f000 fa02 	bl	8110abc <__cxa_guard_release>
 81106b8:	4823      	ldr	r0, [pc, #140]	; (8110748 <initCortexM4+0x1a8>)
 81106ba:	f000 fd21 	bl	8111100 <atexit>
	static ProberThread prober3(&hi2c3);
 81106be:	4b23      	ldr	r3, [pc, #140]	; (811074c <initCortexM4+0x1ac>)
 81106c0:	781b      	ldrb	r3, [r3, #0]
 81106c2:	f3bf 8f5b 	dmb	ish
 81106c6:	b2db      	uxtb	r3, r3
 81106c8:	f003 0301 	and.w	r3, r3, #1
 81106cc:	2b00      	cmp	r3, #0
 81106ce:	bf0c      	ite	eq
 81106d0:	2301      	moveq	r3, #1
 81106d2:	2300      	movne	r3, #0
 81106d4:	b2db      	uxtb	r3, r3
 81106d6:	2b00      	cmp	r3, #0
 81106d8:	d014      	beq.n	8110704 <initCortexM4+0x164>
 81106da:	481c      	ldr	r0, [pc, #112]	; (811074c <initCortexM4+0x1ac>)
 81106dc:	f000 f9e2 	bl	8110aa4 <__cxa_guard_acquire>
 81106e0:	4603      	mov	r3, r0
 81106e2:	2b00      	cmp	r3, #0
 81106e4:	bf14      	ite	ne
 81106e6:	2301      	movne	r3, #1
 81106e8:	2300      	moveq	r3, #0
 81106ea:	b2db      	uxtb	r3, r3
 81106ec:	2b00      	cmp	r3, #0
 81106ee:	d009      	beq.n	8110704 <initCortexM4+0x164>
 81106f0:	4917      	ldr	r1, [pc, #92]	; (8110750 <initCortexM4+0x1b0>)
 81106f2:	4818      	ldr	r0, [pc, #96]	; (8110754 <initCortexM4+0x1b4>)
 81106f4:	f7ff ff0e 	bl	8110514 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>
 81106f8:	4814      	ldr	r0, [pc, #80]	; (811074c <initCortexM4+0x1ac>)
 81106fa:	f000 f9df 	bl	8110abc <__cxa_guard_release>
 81106fe:	4816      	ldr	r0, [pc, #88]	; (8110758 <initCortexM4+0x1b8>)
 8110700:	f000 fcfe 	bl	8111100 <atexit>
	//static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11);
=======
 810d738:	4b2b      	ldr	r3, [pc, #172]	; (810d7e8 <initCortexM4+0xfc>)
 810d73a:	781b      	ldrb	r3, [r3, #0]
 810d73c:	f3bf 8f5b 	dmb	ish
 810d740:	b2db      	uxtb	r3, r3
 810d742:	f003 0301 	and.w	r3, r3, #1
 810d746:	2b00      	cmp	r3, #0
 810d748:	bf0c      	ite	eq
 810d74a:	2301      	moveq	r3, #1
 810d74c:	2300      	movne	r3, #0
 810d74e:	b2db      	uxtb	r3, r3
 810d750:	2b00      	cmp	r3, #0
 810d752:	d015      	beq.n	810d780 <initCortexM4+0x94>
 810d754:	4824      	ldr	r0, [pc, #144]	; (810d7e8 <initCortexM4+0xfc>)
 810d756:	f000 fbc1 	bl	810dedc <__cxa_guard_acquire>
 810d75a:	4603      	mov	r3, r0
 810d75c:	2b00      	cmp	r3, #0
 810d75e:	bf14      	ite	ne
 810d760:	2301      	movne	r3, #1
 810d762:	2300      	moveq	r3, #0
 810d764:	b2db      	uxtb	r3, r3
 810d766:	2b00      	cmp	r3, #0
 810d768:	d00a      	beq.n	810d780 <initCortexM4+0x94>
 810d76a:	4a20      	ldr	r2, [pc, #128]	; (810d7ec <initCortexM4+0x100>)
 810d76c:	4920      	ldr	r1, [pc, #128]	; (810d7f0 <initCortexM4+0x104>)
 810d76e:	4821      	ldr	r0, [pc, #132]	; (810d7f4 <initCortexM4+0x108>)
 810d770:	f7fc fe9c 	bl	810a4ac <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 810d774:	481c      	ldr	r0, [pc, #112]	; (810d7e8 <initCortexM4+0xfc>)
 810d776:	f000 fbbd 	bl	810def4 <__cxa_guard_release>
 810d77a:	481f      	ldr	r0, [pc, #124]	; (810d7f8 <initCortexM4+0x10c>)
 810d77c:	f000 fcc8 	bl	810e110 <atexit>
	static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11); //Same pins as i2c2
 810d780:	4b1e      	ldr	r3, [pc, #120]	; (810d7fc <initCortexM4+0x110>)
 810d782:	781b      	ldrb	r3, [r3, #0]
 810d784:	f3bf 8f5b 	dmb	ish
 810d788:	b2db      	uxtb	r3, r3
 810d78a:	f003 0301 	and.w	r3, r3, #1
 810d78e:	2b00      	cmp	r3, #0
 810d790:	bf0c      	ite	eq
 810d792:	2301      	moveq	r3, #1
 810d794:	2300      	movne	r3, #0
 810d796:	b2db      	uxtb	r3, r3
 810d798:	2b00      	cmp	r3, #0
 810d79a:	d01a      	beq.n	810d7d2 <initCortexM4+0xe6>
 810d79c:	4817      	ldr	r0, [pc, #92]	; (810d7fc <initCortexM4+0x110>)
 810d79e:	f000 fb9d 	bl	810dedc <__cxa_guard_acquire>
 810d7a2:	4603      	mov	r3, r0
 810d7a4:	2b00      	cmp	r3, #0
 810d7a6:	bf14      	ite	ne
 810d7a8:	2301      	movne	r3, #1
 810d7aa:	2300      	moveq	r3, #0
 810d7ac:	b2db      	uxtb	r3, r3
 810d7ae:	2b00      	cmp	r3, #0
 810d7b0:	d00f      	beq.n	810d7d2 <initCortexM4+0xe6>
 810d7b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d7b6:	9300      	str	r3, [sp, #0]
 810d7b8:	4b11      	ldr	r3, [pc, #68]	; (810d800 <initCortexM4+0x114>)
 810d7ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810d7be:	4910      	ldr	r1, [pc, #64]	; (810d800 <initCortexM4+0x114>)
 810d7c0:	4810      	ldr	r0, [pc, #64]	; (810d804 <initCortexM4+0x118>)
 810d7c2:	f7ff fe1d 	bl	810d400 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m>
 810d7c6:	480d      	ldr	r0, [pc, #52]	; (810d7fc <initCortexM4+0x110>)
 810d7c8:	f000 fb94 	bl	810def4 <__cxa_guard_release>
 810d7cc:	480e      	ldr	r0, [pc, #56]	; (810d808 <initCortexM4+0x11c>)
 810d7ce:	f000 fc9f 	bl	810e110 <atexit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	//static ADC16Thread potentiometer(&hi2c1);
}
<<<<<<< HEAD
 8110704:	bf00      	nop
 8110706:	bd80      	pop	{r7, pc}
 8110708:	10040d88 	.word	0x10040d88
 811070c:	10045d94 	.word	0x10045d94
 8110710:	10040d74 	.word	0x10040d74
 8110714:	08110551 	.word	0x08110551
 8110718:	100411f4 	.word	0x100411f4
 811071c:	10040a2c 	.word	0x10040a2c
 8110720:	100460f0 	.word	0x100460f0
 8110724:	10040d8c 	.word	0x10040d8c
 8110728:	08110561 	.word	0x08110561
 811072c:	10041214 	.word	0x10041214
 8110730:	10045cfc 	.word	0x10045cfc
 8110734:	100411f8 	.word	0x100411f8
 8110738:	08110571 	.word	0x08110571
 811073c:	10041234 	.word	0x10041234
 8110740:	10045d48 	.word	0x10045d48
 8110744:	10041218 	.word	0x10041218
 8110748:	08110581 	.word	0x08110581
 811074c:	10041254 	.word	0x10041254
 8110750:	10045cb0 	.word	0x10045cb0
 8110754:	10041238 	.word	0x10041238
 8110758:	08110591 	.word	0x08110591
=======
 810d7d2:	bf00      	nop
 810d7d4:	46bd      	mov	sp, r7
 810d7d6:	bd80      	pop	{r7, pc}
 810d7d8:	10004730 	.word	0x10004730
 810d7dc:	100096f4 	.word	0x100096f4
 810d7e0:	10004720 	.word	0x10004720
 810d7e4:	0810d675 	.word	0x0810d675
 810d7e8:	10004b98 	.word	0x10004b98
 810d7ec:	1000461c 	.word	0x1000461c
 810d7f0:	10009a50 	.word	0x10009a50
 810d7f4:	10004734 	.word	0x10004734
 810d7f8:	0810d6a9 	.word	0x0810d6a9
 810d7fc:	10004bb4 	.word	0x10004bb4
 810d800:	58020400 	.word	0x58020400
 810d804:	10004b9c 	.word	0x10004b9c
 810d808:	0810d6dd 	.word	0x0810d6dd
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0811075c <_Z41__static_initialization_and_destruction_0ii>:
=======
0810d80c <_Z41__static_initialization_and_destruction_0ii>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics



void setupTelemtry() {
	network.forward<PingPacket>(&network);
}
<<<<<<< HEAD
 811075c:	b580      	push	{r7, lr}
 811075e:	b082      	sub	sp, #8
 8110760:	af00      	add	r7, sp, #0
 8110762:	6078      	str	r0, [r7, #4]
 8110764:	6039      	str	r1, [r7, #0]
 8110766:	687b      	ldr	r3, [r7, #4]
 8110768:	2b01      	cmp	r3, #1
 811076a:	d111      	bne.n	8110790 <_Z41__static_initialization_and_destruction_0ii+0x34>
 811076c:	683b      	ldr	r3, [r7, #0]
 811076e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8110772:	4293      	cmp	r3, r2
 8110774:	d10c      	bne.n	8110790 <_Z41__static_initialization_and_destruction_0ii+0x34>
=======
 810d80c:	b580      	push	{r7, lr}
 810d80e:	b082      	sub	sp, #8
 810d810:	af00      	add	r7, sp, #0
 810d812:	6078      	str	r0, [r7, #4]
 810d814:	6039      	str	r1, [r7, #0]
 810d816:	687b      	ldr	r3, [r7, #4]
 810d818:	2b01      	cmp	r3, #1
 810d81a:	d111      	bne.n	810d840 <_Z41__static_initialization_and_destruction_0ii+0x34>
 810d81c:	683b      	ldr	r3, [r7, #0]
 810d81e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810d822:	4293      	cmp	r3, r2
 810d824:	d10c      	bne.n	810d840 <_Z41__static_initialization_and_destruction_0ii+0x34>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
<<<<<<< HEAD
 8110776:	4b0f      	ldr	r3, [pc, #60]	; (81107b4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8110778:	6819      	ldr	r1, [r3, #0]
 811077a:	4b0f      	ldr	r3, [pc, #60]	; (81107b8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 811077c:	681a      	ldr	r2, [r3, #0]
 811077e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110782:	480e      	ldr	r0, [pc, #56]	; (81107bc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8110784:	f7fc ff68 	bl	810d658 <_ZN16BufferedIODriverC1EPVhS1_j>
=======
 810d826:	4b0f      	ldr	r3, [pc, #60]	; (810d864 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 810d828:	6819      	ldr	r1, [r3, #0]
 810d82a:	4b0f      	ldr	r3, [pc, #60]	; (810d868 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 810d82c:	681a      	ldr	r2, [r3, #0]
 810d82e:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d832:	480e      	ldr	r0, [pc, #56]	; (810d86c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 810d834:	f7fd fc5a 	bl	810b0ec <_ZN16BufferedIODriverC1EPVhS1_j>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
NetworkBus network(&telemetryDriver);
<<<<<<< HEAD
 8110788:	490c      	ldr	r1, [pc, #48]	; (81107bc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 811078a:	480d      	ldr	r0, [pc, #52]	; (81107c0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 811078c:	f7ff f86c 	bl	810f868 <_ZN10NetworkBusC1EP8IODriver>
 8110790:	687b      	ldr	r3, [r7, #4]
 8110792:	2b00      	cmp	r3, #0
 8110794:	d10a      	bne.n	81107ac <_Z41__static_initialization_and_destruction_0ii+0x50>
 8110796:	683b      	ldr	r3, [r7, #0]
 8110798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 811079c:	4293      	cmp	r3, r2
 811079e:	d105      	bne.n	81107ac <_Z41__static_initialization_and_destruction_0ii+0x50>
 81107a0:	4807      	ldr	r0, [pc, #28]	; (81107c0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 81107a2:	f7ff f8bb 	bl	810f91c <_ZN10NetworkBusD1Ev>
=======
 810d838:	490c      	ldr	r1, [pc, #48]	; (810d86c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 810d83a:	480d      	ldr	r0, [pc, #52]	; (810d870 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 810d83c:	f7ff fd1e 	bl	810d27c <_ZN10NetworkBusC1EP8IODriver>
 810d840:	687b      	ldr	r3, [r7, #4]
 810d842:	2b00      	cmp	r3, #0
 810d844:	d10a      	bne.n	810d85c <_Z41__static_initialization_and_destruction_0ii+0x50>
 810d846:	683b      	ldr	r3, [r7, #0]
 810d848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810d84c:	4293      	cmp	r3, r2
 810d84e:	d105      	bne.n	810d85c <_Z41__static_initialization_and_destruction_0ii+0x50>
 810d850:	4807      	ldr	r0, [pc, #28]	; (810d870 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 810d852:	f7ff fd6d 	bl	810d330 <_ZN10NetworkBusD1Ev>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
<<<<<<< HEAD
 81107a6:	4805      	ldr	r0, [pc, #20]	; (81107bc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 81107a8:	f7fd f908 	bl	810d9bc <_ZN16BufferedIODriverD1Ev>
=======
 810d856:	4805      	ldr	r0, [pc, #20]	; (810d86c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 810d858:	f7fd fdfa 	bl	810b450 <_ZN16BufferedIODriverD1Ev>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 81107ac:	bf00      	nop
 81107ae:	3708      	adds	r7, #8
 81107b0:	46bd      	mov	sp, r7
 81107b2:	bd80      	pop	{r7, pc}
 81107b4:	10000038 	.word	0x10000038
 81107b8:	10000034 	.word	0x10000034
 81107bc:	10041258 	.word	0x10041258
 81107c0:	10041280 	.word	0x10041280
=======
 810d85c:	bf00      	nop
 810d85e:	3708      	adds	r7, #8
 810d860:	46bd      	mov	sp, r7
 810d862:	bd80      	pop	{r7, pc}
 810d864:	1000002c 	.word	0x1000002c
 810d868:	10000028 	.word	0x10000028
 810d86c:	10004bb8 	.word	0x10004bb8
 810d870:	10004be0 	.word	0x10004be0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081107c4 <_GLOBAL__sub_I_telemetryDriver>:
 81107c4:	b580      	push	{r7, lr}
 81107c6:	af00      	add	r7, sp, #0
 81107c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 81107cc:	2001      	movs	r0, #1
 81107ce:	f7ff ffc5 	bl	811075c <_Z41__static_initialization_and_destruction_0ii>
 81107d2:	bd80      	pop	{r7, pc}
=======
0810d874 <_GLOBAL__sub_I_telemetryDriver>:
 810d874:	b580      	push	{r7, lr}
 810d876:	af00      	add	r7, sp, #0
 810d878:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810d87c:	2001      	movs	r0, #1
 810d87e:	f7ff ffc5 	bl	810d80c <_Z41__static_initialization_and_destruction_0ii>
 810d882:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081107d4 <_GLOBAL__sub_D_telemetryDriver>:
 81107d4:	b580      	push	{r7, lr}
 81107d6:	af00      	add	r7, sp, #0
 81107d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 81107dc:	2000      	movs	r0, #0
 81107de:	f7ff ffbd 	bl	811075c <_Z41__static_initialization_and_destruction_0ii>
 81107e2:	bd80      	pop	{r7, pc}
=======
0810d884 <_GLOBAL__sub_D_telemetryDriver>:
 810d884:	b580      	push	{r7, lr}
 810d886:	af00      	add	r7, sp, #0
 810d888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810d88c:	2000      	movs	r0, #0
 810d88e:	f7ff ffbd 	bl	810d80c <_Z41__static_initialization_and_destruction_0ii>
 810d892:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081107e4 <_ZN6Thread9isRunningEv>:
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
	virtual void init() = 0;
	virtual void loop() = 0;
	osThreadId getHandle();
	bool isRunning() { return running; }
 81107e4:	b480      	push	{r7}
 81107e6:	b083      	sub	sp, #12
 81107e8:	af00      	add	r7, sp, #0
 81107ea:	6078      	str	r0, [r7, #4]
 81107ec:	687b      	ldr	r3, [r7, #4]
 81107ee:	7b1b      	ldrb	r3, [r3, #12]
 81107f0:	4618      	mov	r0, r3
 81107f2:	370c      	adds	r7, #12
 81107f4:	46bd      	mov	sp, r7
 81107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107fa:	4770      	bx	lr
=======
0810d894 <_Z10__task_runPKv>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

081107fc <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (512) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
<<<<<<< HEAD
 81107fc:	b580      	push	{r7, lr}
 81107fe:	b084      	sub	sp, #16
 8110800:	af00      	add	r7, sp, #0
 8110802:	6078      	str	r0, [r7, #4]
=======
 810d894:	b580      	push	{r7, lr}
 810d896:	b084      	sub	sp, #16
 810d898:	af00      	add	r7, sp, #0
 810d89a:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	Thread* thread = (Thread*) arg;
<<<<<<< HEAD
 8110804:	687b      	ldr	r3, [r7, #4]
 8110806:	60fb      	str	r3, [r7, #12]
=======
 810d89c:	687b      	ldr	r3, [r7, #4]
 810d89e:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	osDelay(100);
<<<<<<< HEAD
 8110808:	2064      	movs	r0, #100	; 0x64
 811080a:	f7f8 fdb9 	bl	8109380 <osDelay>
=======
 810d8a0:	2064      	movs	r0, #100	; 0x64
 810d8a2:	f7fa fc09 	bl	81080b8 <osDelay>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	thread->init();
<<<<<<< HEAD
 811080e:	68fb      	ldr	r3, [r7, #12]
 8110810:	681b      	ldr	r3, [r3, #0]
 8110812:	3308      	adds	r3, #8
 8110814:	681b      	ldr	r3, [r3, #0]
 8110816:	68f8      	ldr	r0, [r7, #12]
 8110818:	4798      	blx	r3

	while(thread->isRunning()) {
 811081a:	68f8      	ldr	r0, [r7, #12]
 811081c:	f7ff ffe2 	bl	81107e4 <_ZN6Thread9isRunningEv>
 8110820:	4603      	mov	r3, r0
 8110822:	2b00      	cmp	r3, #0
 8110824:	d006      	beq.n	8110834 <_Z10__task_runPKv+0x38>
		thread->loop();
 8110826:	68fb      	ldr	r3, [r7, #12]
 8110828:	681b      	ldr	r3, [r3, #0]
 811082a:	330c      	adds	r3, #12
 811082c:	681b      	ldr	r3, [r3, #0]
 811082e:	68f8      	ldr	r0, [r7, #12]
 8110830:	4798      	blx	r3
	while(thread->isRunning()) {
 8110832:	e7f2      	b.n	811081a <_Z10__task_runPKv+0x1e>
	}

	delete thread;
 8110834:	68fb      	ldr	r3, [r7, #12]
 8110836:	2b00      	cmp	r3, #0
 8110838:	d004      	beq.n	8110844 <_Z10__task_runPKv+0x48>
 811083a:	681a      	ldr	r2, [r3, #0]
 811083c:	3204      	adds	r2, #4
 811083e:	6812      	ldr	r2, [r2, #0]
 8110840:	4618      	mov	r0, r3
 8110842:	4790      	blx	r2

	vTaskDelete(nullptr);
 8110844:	2000      	movs	r0, #0
 8110846:	f7fa f891 	bl	810a96c <vTaskDelete>
=======
 810d8a6:	68fb      	ldr	r3, [r7, #12]
 810d8a8:	681b      	ldr	r3, [r3, #0]
 810d8aa:	681b      	ldr	r3, [r3, #0]
 810d8ac:	68f8      	ldr	r0, [r7, #12]
 810d8ae:	4798      	blx	r3
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	while(true) {
<<<<<<< HEAD
		osDelay(1000 / portTICK_PERIOD_MS);
 811084a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 811084e:	f7f8 fd97 	bl	8109380 <osDelay>
 8110852:	e7fa      	b.n	811084a <_Z10__task_runPKv+0x4e>
=======
		thread->loop();
 810d8b0:	68fb      	ldr	r3, [r7, #12]
 810d8b2:	681b      	ldr	r3, [r3, #0]
 810d8b4:	3304      	adds	r3, #4
 810d8b6:	681b      	ldr	r3, [r3, #0]
 810d8b8:	68f8      	ldr	r0, [r7, #12]
 810d8ba:	4798      	blx	r3
 810d8bc:	e7f8      	b.n	810d8b0 <_Z10__task_runPKv+0x1c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110854 <_ZN6ThreadC1EPKc>:
=======
0810d8be <_ZN6ThreadC1EPKc>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
<<<<<<< HEAD
 8110854:	b580      	push	{r7, lr}
 8110856:	b082      	sub	sp, #8
 8110858:	af00      	add	r7, sp, #0
 811085a:	6078      	str	r0, [r7, #4]
 811085c:	6039      	str	r1, [r7, #0]
 811085e:	2200      	movs	r2, #0
 8110860:	6839      	ldr	r1, [r7, #0]
 8110862:	6878      	ldr	r0, [r7, #4]
 8110864:	f000 f805 	bl	8110872 <_ZN6ThreadC1EPKc10osPriority>
=======
 810d8be:	b580      	push	{r7, lr}
 810d8c0:	b082      	sub	sp, #8
 810d8c2:	af00      	add	r7, sp, #0
 810d8c4:	6078      	str	r0, [r7, #4]
 810d8c6:	6039      	str	r1, [r7, #0]
 810d8c8:	2200      	movs	r2, #0
 810d8ca:	6839      	ldr	r1, [r7, #0]
 810d8cc:	6878      	ldr	r0, [r7, #4]
 810d8ce:	f000 f805 	bl	810d8dc <_ZN6ThreadC1EPKc10osPriority>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	;
}
<<<<<<< HEAD
 8110868:	687b      	ldr	r3, [r7, #4]
 811086a:	4618      	mov	r0, r3
 811086c:	3708      	adds	r7, #8
 811086e:	46bd      	mov	sp, r7
 8110870:	bd80      	pop	{r7, pc}
=======
 810d8d2:	687b      	ldr	r3, [r7, #4]
 810d8d4:	4618      	mov	r0, r3
 810d8d6:	3708      	adds	r7, #8
 810d8d8:	46bd      	mov	sp, r7
 810d8da:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110872 <_ZN6ThreadC1EPKc10osPriority>:
=======
0810d8dc <_ZN6ThreadC1EPKc10osPriority>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
<<<<<<< HEAD
 8110872:	b580      	push	{r7, lr}
 8110874:	b084      	sub	sp, #16
 8110876:	af00      	add	r7, sp, #0
 8110878:	60f8      	str	r0, [r7, #12]
 811087a:	60b9      	str	r1, [r7, #8]
 811087c:	4613      	mov	r3, r2
 811087e:	80fb      	strh	r3, [r7, #6]
 8110880:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8110884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8110888:	68b9      	ldr	r1, [r7, #8]
 811088a:	68f8      	ldr	r0, [r7, #12]
 811088c:	f000 f816 	bl	81108bc <_ZN6ThreadC1EPKc10osPrioritym>
=======
 810d8dc:	b580      	push	{r7, lr}
 810d8de:	b084      	sub	sp, #16
 810d8e0:	af00      	add	r7, sp, #0
 810d8e2:	60f8      	str	r0, [r7, #12]
 810d8e4:	60b9      	str	r1, [r7, #8]
 810d8e6:	4613      	mov	r3, r2
 810d8e8:	80fb      	strh	r3, [r7, #6]
 810d8ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810d8ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d8f2:	68b9      	ldr	r1, [r7, #8]
 810d8f4:	68f8      	ldr	r0, [r7, #12]
 810d8f6:	f000 f805 	bl	810d904 <_ZN6ThreadC1EPKc10osPrioritym>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	;
}
<<<<<<< HEAD
 8110890:	68fb      	ldr	r3, [r7, #12]
 8110892:	4618      	mov	r0, r3
 8110894:	3710      	adds	r7, #16
 8110896:	46bd      	mov	sp, r7
 8110898:	bd80      	pop	{r7, pc}
=======
 810d8fa:	68fb      	ldr	r3, [r7, #12]
 810d8fc:	4618      	mov	r0, r3
 810d8fe:	3710      	adds	r7, #16
 810d900:	46bd      	mov	sp, r7
 810d902:	bd80      	pop	{r7, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0811089a <_ZN6ThreadC1EPKcm>:
=======
0810d904 <_ZN6ThreadC1EPKc10osPrioritym>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
 811089a:	b580      	push	{r7, lr}
 811089c:	b084      	sub	sp, #16
 811089e:	af00      	add	r7, sp, #0
 81108a0:	60f8      	str	r0, [r7, #12]
 81108a2:	60b9      	str	r1, [r7, #8]
 81108a4:	607a      	str	r2, [r7, #4]
 81108a6:	687b      	ldr	r3, [r7, #4]
 81108a8:	2200      	movs	r2, #0
 81108aa:	68b9      	ldr	r1, [r7, #8]
 81108ac:	68f8      	ldr	r0, [r7, #12]
 81108ae:	f000 f805 	bl	81108bc <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 81108b2:	68fb      	ldr	r3, [r7, #12]
 81108b4:	4618      	mov	r0, r3
 81108b6:	3710      	adds	r7, #16
 81108b8:	46bd      	mov	sp, r7
 81108ba:	bd80      	pop	{r7, pc}

081108bc <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
<<<<<<< HEAD
 81108bc:	b580      	push	{r7, lr}
 81108be:	b08c      	sub	sp, #48	; 0x30
 81108c0:	af00      	add	r7, sp, #0
 81108c2:	60f8      	str	r0, [r7, #12]
 81108c4:	60b9      	str	r1, [r7, #8]
 81108c6:	603b      	str	r3, [r7, #0]
 81108c8:	4613      	mov	r3, r2
 81108ca:	80fb      	strh	r3, [r7, #6]
 81108cc:	4a14      	ldr	r2, [pc, #80]	; (8110920 <_ZN6ThreadC1EPKc10osPrioritym+0x64>)
 81108ce:	68fb      	ldr	r3, [r7, #12]
 81108d0:	601a      	str	r2, [r3, #0]
 81108d2:	68fb      	ldr	r3, [r7, #12]
 81108d4:	2201      	movs	r2, #1
 81108d6:	731a      	strb	r2, [r3, #12]
=======
 810d904:	b580      	push	{r7, lr}
 810d906:	b08c      	sub	sp, #48	; 0x30
 810d908:	af00      	add	r7, sp, #0
 810d90a:	60f8      	str	r0, [r7, #12]
 810d90c:	60b9      	str	r1, [r7, #8]
 810d90e:	603b      	str	r3, [r7, #0]
 810d910:	4613      	mov	r3, r2
 810d912:	80fb      	strh	r3, [r7, #6]
 810d914:	4a12      	ldr	r2, [pc, #72]	; (810d960 <_ZN6ThreadC1EPKc10osPrioritym+0x5c>)
 810d916:	68fb      	ldr	r3, [r7, #12]
 810d918:	601a      	str	r2, [r3, #0]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
<<<<<<< HEAD
 81108d8:	f107 0314 	add.w	r3, r7, #20
 81108dc:	2200      	movs	r2, #0
 81108de:	601a      	str	r2, [r3, #0]
 81108e0:	605a      	str	r2, [r3, #4]
 81108e2:	609a      	str	r2, [r3, #8]
 81108e4:	60da      	str	r2, [r3, #12]
 81108e6:	611a      	str	r2, [r3, #16]
 81108e8:	615a      	str	r2, [r3, #20]
 81108ea:	619a      	str	r2, [r3, #24]
 81108ec:	4b0d      	ldr	r3, [pc, #52]	; (8110924 <_ZN6ThreadC1EPKc10osPrioritym+0x68>)
 81108ee:	61bb      	str	r3, [r7, #24]
 81108f0:	68bb      	ldr	r3, [r7, #8]
 81108f2:	617b      	str	r3, [r7, #20]
 81108f4:	88fb      	ldrh	r3, [r7, #6]
 81108f6:	83bb      	strh	r3, [r7, #28]
 81108f8:	683b      	ldr	r3, [r7, #0]
 81108fa:	627b      	str	r3, [r7, #36]	; 0x24
=======
 810d91a:	f107 0314 	add.w	r3, r7, #20
 810d91e:	2200      	movs	r2, #0
 810d920:	601a      	str	r2, [r3, #0]
 810d922:	605a      	str	r2, [r3, #4]
 810d924:	609a      	str	r2, [r3, #8]
 810d926:	60da      	str	r2, [r3, #12]
 810d928:	611a      	str	r2, [r3, #16]
 810d92a:	615a      	str	r2, [r3, #20]
 810d92c:	619a      	str	r2, [r3, #24]
 810d92e:	4b0d      	ldr	r3, [pc, #52]	; (810d964 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 810d930:	61bb      	str	r3, [r7, #24]
 810d932:	68bb      	ldr	r3, [r7, #8]
 810d934:	617b      	str	r3, [r7, #20]
 810d936:	88fb      	ldrh	r3, [r7, #6]
 810d938:	83bb      	strh	r3, [r7, #28]
 810d93a:	683b      	ldr	r3, [r7, #0]
 810d93c:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	this->handle = osThreadCreate(&thread, this);
<<<<<<< HEAD
 81108fc:	f107 0314 	add.w	r3, r7, #20
 8110900:	68f9      	ldr	r1, [r7, #12]
 8110902:	4618      	mov	r0, r3
 8110904:	f7f8 fcf0 	bl	81092e8 <osThreadCreate>
 8110908:	4602      	mov	r2, r0
 811090a:	68fb      	ldr	r3, [r7, #12]
 811090c:	605a      	str	r2, [r3, #4]
=======
 810d93e:	f107 0314 	add.w	r3, r7, #20
 810d942:	68f9      	ldr	r1, [r7, #12]
 810d944:	4618      	mov	r0, r3
 810d946:	f7fa fb6b 	bl	8108020 <osThreadCreate>
 810d94a:	4602      	mov	r2, r0
 810d94c:	68fb      	ldr	r3, [r7, #12]
 810d94e:	605a      	str	r2, [r3, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	this->name = name;
<<<<<<< HEAD
 811090e:	68fb      	ldr	r3, [r7, #12]
 8110910:	68ba      	ldr	r2, [r7, #8]
 8110912:	609a      	str	r2, [r3, #8]
=======
 810d950:	68fb      	ldr	r3, [r7, #12]
 810d952:	68ba      	ldr	r2, [r7, #8]
 810d954:	609a      	str	r2, [r3, #8]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
}
<<<<<<< HEAD
 8110914:	68fb      	ldr	r3, [r7, #12]
 8110916:	4618      	mov	r0, r3
 8110918:	3730      	adds	r7, #48	; 0x30
 811091a:	46bd      	mov	sp, r7
 811091c:	bd80      	pop	{r7, pc}
 811091e:	bf00      	nop
 8110920:	081149d4 	.word	0x081149d4
 8110924:	081107fd 	.word	0x081107fd
=======
 810d956:	68fb      	ldr	r3, [r7, #12]
 810d958:	4618      	mov	r0, r3
 810d95a:	3730      	adds	r7, #48	; 0x30
 810d95c:	46bd      	mov	sp, r7
 810d95e:	bd80      	pop	{r7, pc}
 810d960:	08110db4 	.word	0x08110db4
 810d964:	0810d895 	.word	0x0810d895
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110928 <_ZN6Thread9terminateEv>:

osThreadId Thread::getHandle() {
	return handle;
}

void Thread::terminate() {
 8110928:	b480      	push	{r7}
 811092a:	b083      	sub	sp, #12
 811092c:	af00      	add	r7, sp, #0
 811092e:	6078      	str	r0, [r7, #4]
	this->running = false;
 8110930:	687b      	ldr	r3, [r7, #4]
 8110932:	2200      	movs	r2, #0
 8110934:	731a      	strb	r2, [r3, #12]
}
 8110936:	bf00      	nop
 8110938:	370c      	adds	r7, #12
 811093a:	46bd      	mov	sp, r7
 811093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110940:	4770      	bx	lr
	...

08110944 <_ZN6Thread7printlnEPKcz>:
=======
0810d968 <_ZN6Thread7printlnEPKcz>:
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

void Thread::println(const char* format, ...) {
<<<<<<< HEAD
 8110944:	b40e      	push	{r1, r2, r3}
 8110946:	b580      	push	{r7, lr}
 8110948:	b085      	sub	sp, #20
 811094a:	af00      	add	r7, sp, #0
 811094c:	6078      	str	r0, [r7, #4]
=======
 810d968:	b40e      	push	{r1, r2, r3}
 810d96a:	b580      	push	{r7, lr}
 810d96c:	b085      	sub	sp, #20
 810d96e:	af00      	add	r7, sp, #0
 810d970:	6078      	str	r0, [r7, #4]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	va_list args;
	va_start(args, format);
<<<<<<< HEAD
 811094e:	f107 0320 	add.w	r3, r7, #32
 8110952:	60fb      	str	r3, [r7, #12]
=======
 810d972:	f107 0320 	add.w	r3, r7, #32
 810d976:	60fb      	str	r3, [r7, #12]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	sprintf(buffer, "[%s] ", name);
<<<<<<< HEAD
 8110954:	687b      	ldr	r3, [r7, #4]
 8110956:	689b      	ldr	r3, [r3, #8]
 8110958:	461a      	mov	r2, r3
 811095a:	4913      	ldr	r1, [pc, #76]	; (81109a8 <_ZN6Thread7printlnEPKcz+0x64>)
 811095c:	4813      	ldr	r0, [pc, #76]	; (81109ac <_ZN6Thread7printlnEPKcz+0x68>)
 811095e:	f001 f955 	bl	8111c0c <siprintf>
=======
 810d978:	687b      	ldr	r3, [r7, #4]
 810d97a:	689b      	ldr	r3, [r3, #8]
 810d97c:	461a      	mov	r2, r3
 810d97e:	4913      	ldr	r1, [pc, #76]	; (810d9cc <_ZN6Thread7printlnEPKcz+0x64>)
 810d980:	4813      	ldr	r0, [pc, #76]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d982:	f001 f8ad 	bl	810eae0 <siprintf>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	vsprintf(buffer + strlen(buffer), format, args);
<<<<<<< HEAD
 8110962:	4812      	ldr	r0, [pc, #72]	; (81109ac <_ZN6Thread7printlnEPKcz+0x68>)
 8110964:	f7ef fcc6 	bl	81002f4 <strlen>
 8110968:	4603      	mov	r3, r0
 811096a:	4a10      	ldr	r2, [pc, #64]	; (81109ac <_ZN6Thread7printlnEPKcz+0x68>)
 811096c:	4413      	add	r3, r2
 811096e:	68fa      	ldr	r2, [r7, #12]
 8110970:	69f9      	ldr	r1, [r7, #28]
 8110972:	4618      	mov	r0, r3
 8110974:	f001 fa0e 	bl	8111d94 <vsiprintf>
=======
 810d986:	4812      	ldr	r0, [pc, #72]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d988:	f7f2 fcb4 	bl	81002f4 <strlen>
 810d98c:	4602      	mov	r2, r0
 810d98e:	4b10      	ldr	r3, [pc, #64]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d990:	4413      	add	r3, r2
 810d992:	68fa      	ldr	r2, [r7, #12]
 810d994:	69f9      	ldr	r1, [r7, #28]
 810d996:	4618      	mov	r0, r3
 810d998:	f001 f96a 	bl	810ec70 <vsiprintf>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	strcat(buffer, "\r\n");
<<<<<<< HEAD
 8110978:	480c      	ldr	r0, [pc, #48]	; (81109ac <_ZN6Thread7printlnEPKcz+0x68>)
 811097a:	f7ef fcbb 	bl	81002f4 <strlen>
 811097e:	4603      	mov	r3, r0
 8110980:	461a      	mov	r2, r3
 8110982:	4b0a      	ldr	r3, [pc, #40]	; (81109ac <_ZN6Thread7printlnEPKcz+0x68>)
 8110984:	4413      	add	r3, r2
 8110986:	4a0a      	ldr	r2, [pc, #40]	; (81109b0 <_ZN6Thread7printlnEPKcz+0x6c>)
 8110988:	8811      	ldrh	r1, [r2, #0]
 811098a:	7892      	ldrb	r2, [r2, #2]
 811098c:	8019      	strh	r1, [r3, #0]
 811098e:	709a      	strb	r2, [r3, #2]
=======
 810d99c:	480c      	ldr	r0, [pc, #48]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d99e:	f7f2 fca9 	bl	81002f4 <strlen>
 810d9a2:	4603      	mov	r3, r0
 810d9a4:	461a      	mov	r2, r3
 810d9a6:	4b0a      	ldr	r3, [pc, #40]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d9a8:	4413      	add	r3, r2
 810d9aa:	4a0a      	ldr	r2, [pc, #40]	; (810d9d4 <_ZN6Thread7printlnEPKcz+0x6c>)
 810d9ac:	8811      	ldrh	r1, [r2, #0]
 810d9ae:	7892      	ldrb	r2, [r2, #2]
 810d9b0:	8019      	strh	r1, [r3, #0]
 810d9b2:	709a      	strb	r2, [r3, #2]
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	console.print(buffer);
<<<<<<< HEAD
 8110990:	4906      	ldr	r1, [pc, #24]	; (81109ac <_ZN6Thread7printlnEPKcz+0x68>)
 8110992:	4808      	ldr	r0, [pc, #32]	; (81109b4 <_ZN6Thread7printlnEPKcz+0x70>)
 8110994:	f7fa ff25 	bl	810b7e2 <_ZN7Console5printEPKc>
=======
 810d9b4:	4906      	ldr	r1, [pc, #24]	; (810d9d0 <_ZN6Thread7printlnEPKcz+0x68>)
 810d9b6:	4808      	ldr	r0, [pc, #32]	; (810d9d8 <_ZN6Thread7printlnEPKcz+0x70>)
 810d9b8:	f7fc fcf1 	bl	810a39e <_ZN7Console5printEPKc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

	va_end(args);
}
<<<<<<< HEAD
 8110998:	bf00      	nop
 811099a:	3714      	adds	r7, #20
 811099c:	46bd      	mov	sp, r7
 811099e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81109a2:	b003      	add	sp, #12
 81109a4:	4770      	bx	lr
 81109a6:	bf00      	nop
 81109a8:	08114970 	.word	0x08114970
 81109ac:	10045b94 	.word	0x10045b94
 81109b0:	08114978 	.word	0x08114978
 81109b4:	100405e0 	.word	0x100405e0
=======
 810d9bc:	bf00      	nop
 810d9be:	3714      	adds	r7, #20
 810d9c0:	46bd      	mov	sp, r7
 810d9c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810d9c6:	b003      	add	sp, #12
 810d9c8:	4770      	bx	lr
 810d9ca:	bf00      	nop
 810d9cc:	0811098c 	.word	0x0811098c
 810d9d0:	100094f4 	.word	0x100094f4
 810d9d4:	08110994 	.word	0x08110994
 810d9d8:	100041d0 	.word	0x100041d0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081109b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 81109b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 81109ba:	2400      	movs	r4, #0
 81109bc:	2310      	movs	r3, #16
 81109be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 81109c2:	6803      	ldr	r3, [r0, #0]
 81109c4:	9400      	str	r4, [sp, #0]
 81109c6:	699e      	ldr	r6, [r3, #24]
 81109c8:	f88d 4004 	strb.w	r4, [sp, #4]
 81109cc:	4615      	mov	r5, r2
 81109ce:	466b      	mov	r3, sp
 81109d0:	6812      	ldr	r2, [r2, #0]
 81109d2:	47b0      	blx	r6
 81109d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 81109d8:	f003 0306 	and.w	r3, r3, #6
 81109dc:	2b06      	cmp	r3, #6
 81109de:	bf03      	ittte	eq
 81109e0:	9b00      	ldreq	r3, [sp, #0]
 81109e2:	602b      	streq	r3, [r5, #0]
 81109e4:	2001      	moveq	r0, #1
 81109e6:	4620      	movne	r0, r4
 81109e8:	b004      	add	sp, #16
 81109ea:	bd70      	pop	{r4, r5, r6, pc}
=======
0810d9dc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 810d9dc:	b510      	push	{r4, lr}
 810d9de:	4b03      	ldr	r3, [pc, #12]	; (810d9ec <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 810d9e0:	6003      	str	r3, [r0, #0]
 810d9e2:	4604      	mov	r4, r0
 810d9e4:	f000 faaa 	bl	810df3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810d9e8:	4620      	mov	r0, r4
 810d9ea:	bd10      	pop	{r4, pc}
 810d9ec:	08110df8 	.word	0x08110df8
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081109ec <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 81109ec:	9800      	ldr	r0, [sp, #0]
 81109ee:	4290      	cmp	r0, r2
 81109f0:	bf14      	ite	ne
 81109f2:	2001      	movne	r0, #1
 81109f4:	2006      	moveq	r0, #6
 81109f6:	4770      	bx	lr
=======
0810d9f0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 810d9f0:	b510      	push	{r4, lr}
 810d9f2:	4604      	mov	r4, r0
 810d9f4:	f7ff fff2 	bl	810d9dc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 810d9f8:	4620      	mov	r0, r4
 810d9fa:	2118      	movs	r1, #24
 810d9fc:	f000 fa37 	bl	810de6e <_ZdlPvj>
 810da00:	4620      	mov	r0, r4
 810da02:	bd10      	pop	{r4, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081109f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 81109f8:	b510      	push	{r4, lr}
 81109fa:	4b03      	ldr	r3, [pc, #12]	; (8110a08 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 81109fc:	6003      	str	r3, [r0, #0]
 81109fe:	4604      	mov	r4, r0
 8110a00:	f000 f917 	bl	8110c32 <_ZNSt9type_infoD1Ev>
 8110a04:	4620      	mov	r0, r4
 8110a06:	bd10      	pop	{r4, pc}
 8110a08:	08114e9c 	.word	0x08114e9c
=======
0810da04 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810da04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810da08:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 810da0c:	454a      	cmp	r2, r9
 810da0e:	4604      	mov	r4, r0
 810da10:	460f      	mov	r7, r1
 810da12:	4616      	mov	r6, r2
 810da14:	4698      	mov	r8, r3
 810da16:	d024      	beq.n	810da62 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 810da18:	68e5      	ldr	r5, [r4, #12]
 810da1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810da1e:	b355      	cbz	r5, 810da76 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x72>
 810da20:	68e3      	ldr	r3, [r4, #12]
 810da22:	079a      	lsls	r2, r3, #30
 810da24:	d524      	bpl.n	810da70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810da26:	f013 0a01 	ands.w	sl, r3, #1
 810da2a:	ea4f 2223 	mov.w	r2, r3, asr #8
 810da2e:	d003      	beq.n	810da38 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x34>
 810da30:	1cfb      	adds	r3, r7, #3
 810da32:	d01d      	beq.n	810da70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810da34:	6833      	ldr	r3, [r6, #0]
 810da36:	589a      	ldr	r2, [r3, r2]
 810da38:	68a0      	ldr	r0, [r4, #8]
 810da3a:	6803      	ldr	r3, [r0, #0]
 810da3c:	f8cd 9000 	str.w	r9, [sp]
 810da40:	f8d3 b020 	ldr.w	fp, [r3, #32]
 810da44:	4432      	add	r2, r6
 810da46:	4643      	mov	r3, r8
 810da48:	4639      	mov	r1, r7
 810da4a:	47d8      	blx	fp
 810da4c:	2803      	cmp	r0, #3
 810da4e:	d90f      	bls.n	810da70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810da50:	f1ba 0f00 	cmp.w	sl, #0
 810da54:	d002      	beq.n	810da5c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 810da56:	f040 0001 	orr.w	r0, r0, #1
 810da5a:	b2c0      	uxtb	r0, r0
 810da5c:	b003      	add	sp, #12
 810da5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810da62:	4619      	mov	r1, r3
 810da64:	f000 f9ea 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810da68:	2800      	cmp	r0, #0
 810da6a:	d0d5      	beq.n	810da18 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 810da6c:	2006      	movs	r0, #6
 810da6e:	e7f5      	b.n	810da5c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 810da70:	3d01      	subs	r5, #1
 810da72:	3c08      	subs	r4, #8
 810da74:	e7d3      	b.n	810da1e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 810da76:	2001      	movs	r0, #1
 810da78:	e7f0      	b.n	810da5c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110a0c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8110a0c:	b510      	push	{r4, lr}
 8110a0e:	4604      	mov	r4, r0
 8110a10:	f7ff fff2 	bl	81109f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8110a14:	4620      	mov	r0, r4
 8110a16:	2108      	movs	r1, #8
 8110a18:	f000 f842 	bl	8110aa0 <_ZdlPvj>
 8110a1c:	4620      	mov	r0, r4
 8110a1e:	bd10      	pop	{r4, pc}
=======
0810da7a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 810da7a:	b4f0      	push	{r4, r5, r6, r7}
 810da7c:	1e0e      	subs	r6, r1, #0
 810da7e:	9c04      	ldr	r4, [sp, #16]
 810da80:	db06      	blt.n	810da90 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 810da82:	1990      	adds	r0, r2, r6
 810da84:	4284      	cmp	r4, r0
 810da86:	bf14      	ite	ne
 810da88:	2001      	movne	r0, #1
 810da8a:	2006      	moveq	r0, #6
 810da8c:	bcf0      	pop	{r4, r5, r6, r7}
 810da8e:	4770      	bx	lr
 810da90:	3602      	adds	r6, #2
 810da92:	d004      	beq.n	810da9e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 810da94:	6804      	ldr	r4, [r0, #0]
 810da96:	6a24      	ldr	r4, [r4, #32]
 810da98:	46a4      	mov	ip, r4
 810da9a:	bcf0      	pop	{r4, r5, r6, r7}
 810da9c:	4760      	bx	ip
 810da9e:	2001      	movs	r0, #1
 810daa0:	e7f4      	b.n	810da8c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110a20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8110a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110a24:	461f      	mov	r7, r3
 8110a26:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8110a2a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8110a2e:	4598      	cmp	r8, r3
 8110a30:	4606      	mov	r6, r0
 8110a32:	4615      	mov	r5, r2
 8110a34:	d107      	bne.n	8110a46 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8110a36:	9907      	ldr	r1, [sp, #28]
 8110a38:	f000 f8fe 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110a3c:	b118      	cbz	r0, 8110a46 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8110a3e:	7165      	strb	r5, [r4, #5]
 8110a40:	2000      	movs	r0, #0
 8110a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8110a46:	4639      	mov	r1, r7
 8110a48:	4630      	mov	r0, r6
 8110a4a:	f000 f8f5 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110a4e:	2800      	cmp	r0, #0
 8110a50:	d0f6      	beq.n	8110a40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8110a52:	2301      	movs	r3, #1
 8110a54:	f8c4 8000 	str.w	r8, [r4]
 8110a58:	7125      	strb	r5, [r4, #4]
 8110a5a:	71a3      	strb	r3, [r4, #6]
 8110a5c:	e7f0      	b.n	8110a40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
=======
0810daa2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810daa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810daa6:	b091      	sub	sp, #68	; 0x44
 810daa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810daac:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 810daae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 810dab0:	68a3      	ldr	r3, [r4, #8]
 810dab2:	06dd      	lsls	r5, r3, #27
 810dab4:	bf44      	itt	mi
 810dab6:	6883      	ldrmi	r3, [r0, #8]
 810dab8:	60a3      	strmi	r3, [r4, #8]
 810daba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810dabc:	4293      	cmp	r3, r2
 810dabe:	4681      	mov	r9, r0
 810dac0:	4688      	mov	r8, r1
 810dac2:	d107      	bne.n	810dad4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 810dac4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 810dac6:	f000 f9b9 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810daca:	b118      	cbz	r0, 810dad4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 810dacc:	9b05      	ldr	r3, [sp, #20]
 810dace:	7163      	strb	r3, [r4, #5]
 810dad0:	2600      	movs	r6, #0
 810dad2:	e0fa      	b.n	810dcca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810dad4:	9906      	ldr	r1, [sp, #24]
 810dad6:	4648      	mov	r0, r9
 810dad8:	f000 f9b0 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810dadc:	4682      	mov	sl, r0
 810dade:	b1c0      	cbz	r0, 810db12 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 810dae0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810dae2:	6023      	str	r3, [r4, #0]
 810dae4:	f1b8 0f00 	cmp.w	r8, #0
 810dae8:	9b05      	ldr	r3, [sp, #20]
 810daea:	7123      	strb	r3, [r4, #4]
 810daec:	db0b      	blt.n	810db06 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 810daee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810daf0:	4498      	add	r8, r3
 810daf2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810daf4:	4543      	cmp	r3, r8
 810daf6:	bf14      	ite	ne
 810daf8:	f04f 0801 	movne.w	r8, #1
 810dafc:	f04f 0806 	moveq.w	r8, #6
 810db00:	f884 8006 	strb.w	r8, [r4, #6]
 810db04:	e7e4      	b.n	810dad0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810db06:	f118 0f02 	cmn.w	r8, #2
 810db0a:	d1e1      	bne.n	810dad0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810db0c:	2301      	movs	r3, #1
 810db0e:	71a3      	strb	r3, [r4, #6]
 810db10:	e7de      	b.n	810dad0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810db12:	f1b8 0f00 	cmp.w	r8, #0
 810db16:	bfaa      	itet	ge
 810db18:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 810db1a:	f8cd a01c 	strlt.w	sl, [sp, #28]
 810db1e:	eba3 0308 	subge.w	r3, r3, r8
 810db22:	f04f 0600 	mov.w	r6, #0
 810db26:	bfa8      	it	ge
 810db28:	9307      	strge	r3, [sp, #28]
 810db2a:	2302      	movs	r3, #2
 810db2c:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 810db30:	2301      	movs	r3, #1
 810db32:	9308      	str	r3, [sp, #32]
 810db34:	9b05      	ldr	r3, [sp, #20]
 810db36:	f043 0301 	orr.w	r3, r3, #1
 810db3a:	46b3      	mov	fp, r6
 810db3c:	930b      	str	r3, [sp, #44]	; 0x2c
 810db3e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 810db42:	9304      	str	r3, [sp, #16]
 810db44:	9b04      	ldr	r3, [sp, #16]
 810db46:	2b00      	cmp	r3, #0
 810db48:	f000 80d9 	beq.w	810dcfe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 810db4c:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
 810db50:	68a7      	ldr	r7, [r4, #8]
 810db52:	68e9      	ldr	r1, [r5, #12]
 810db54:	970f      	str	r7, [sp, #60]	; 0x3c
 810db56:	07c8      	lsls	r0, r1, #31
 810db58:	bf48      	it	mi
 810db5a:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 810db5c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 810db60:	ea4f 2321 	mov.w	r3, r1, asr #8
 810db64:	bf48      	it	mi
 810db66:	6800      	ldrmi	r0, [r0, #0]
 810db68:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
 810db6c:	bf48      	it	mi
 810db6e:	58c3      	ldrmi	r3, [r0, r3]
 810db70:	981a      	ldr	r0, [sp, #104]	; 0x68
 810db72:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
 810db76:	4403      	add	r3, r0
 810db78:	9807      	ldr	r0, [sp, #28]
 810db7a:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
 810db7e:	bf4c      	ite	mi
 810db80:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 810db82:	9a05      	ldrpl	r2, [sp, #20]
 810db84:	b148      	cbz	r0, 810db9a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 810db86:	4298      	cmp	r0, r3
 810db88:	9808      	ldr	r0, [sp, #32]
 810db8a:	bf2c      	ite	cs
 810db8c:	f04f 0c00 	movcs.w	ip, #0
 810db90:	f04f 0c01 	movcc.w	ip, #1
 810db94:	4584      	cmp	ip, r0
 810db96:	f000 80ae 	beq.w	810dcf6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 810db9a:	0789      	lsls	r1, r1, #30
 810db9c:	d407      	bmi.n	810dbae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
 810db9e:	f118 0f02 	cmn.w	r8, #2
 810dba2:	d102      	bne.n	810dbaa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 810dba4:	07bf      	lsls	r7, r7, #30
 810dba6:	f000 80a8 	beq.w	810dcfa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 810dbaa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 810dbae:	68a8      	ldr	r0, [r5, #8]
 810dbb0:	ad0d      	add	r5, sp, #52	; 0x34
 810dbb2:	6801      	ldr	r1, [r0, #0]
 810dbb4:	9503      	str	r5, [sp, #12]
 810dbb6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 810dbb8:	9502      	str	r5, [sp, #8]
 810dbba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 810dbbc:	e9cd 3500 	strd	r3, r5, [sp]
 810dbc0:	9b06      	ldr	r3, [sp, #24]
 810dbc2:	69cd      	ldr	r5, [r1, #28]
 810dbc4:	4641      	mov	r1, r8
 810dbc6:	47a8      	blx	r5
 810dbc8:	7963      	ldrb	r3, [r4, #5]
 810dbca:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 810dbce:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 810dbd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 810dbd4:	4313      	orrs	r3, r2
 810dbd6:	2d06      	cmp	r5, #6
 810dbd8:	7163      	strb	r3, [r4, #5]
 810dbda:	d001      	beq.n	810dbe0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 810dbdc:	2d02      	cmp	r5, #2
 810dbde:	d106      	bne.n	810dbee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 810dbe0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 810dbe4:	6021      	str	r1, [r4, #0]
 810dbe6:	7123      	strb	r3, [r4, #4]
 810dbe8:	71a5      	strb	r5, [r4, #6]
 810dbea:	4682      	mov	sl, r0
 810dbec:	e06c      	b.n	810dcc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810dbee:	6822      	ldr	r2, [r4, #0]
 810dbf0:	b996      	cbnz	r6, 810dc18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 810dbf2:	b99a      	cbnz	r2, 810dc1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 810dbf4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 810dbf8:	6021      	str	r1, [r4, #0]
 810dbfa:	7122      	strb	r2, [r4, #4]
 810dbfc:	b121      	cbz	r1, 810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dbfe:	b11b      	cbz	r3, 810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dc00:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810dc04:	07dd      	lsls	r5, r3, #31
 810dc06:	d5f0      	bpl.n	810dbea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 810dc08:	7963      	ldrb	r3, [r4, #5]
 810dc0a:	2b04      	cmp	r3, #4
 810dc0c:	d0ed      	beq.n	810dbea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 810dc0e:	9b04      	ldr	r3, [sp, #16]
 810dc10:	3b01      	subs	r3, #1
 810dc12:	9304      	str	r3, [sp, #16]
 810dc14:	4606      	mov	r6, r0
 810dc16:	e795      	b.n	810db44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa2>
 810dc18:	2a00      	cmp	r2, #0
 810dc1a:	d037      	beq.n	810dc8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 810dc1c:	4291      	cmp	r1, r2
 810dc1e:	d106      	bne.n	810dc2e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 810dc20:	7923      	ldrb	r3, [r4, #4]
 810dc22:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 810dc26:	4313      	orrs	r3, r2
 810dc28:	7123      	strb	r3, [r4, #4]
 810dc2a:	4630      	mov	r0, r6
 810dc2c:	e7ec      	b.n	810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dc2e:	b909      	cbnz	r1, 810dc34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 810dc30:	2800      	cmp	r0, #0
 810dc32:	d0fa      	beq.n	810dc2a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 810dc34:	2b03      	cmp	r3, #3
 810dc36:	79a7      	ldrb	r7, [r4, #6]
 810dc38:	d904      	bls.n	810dc44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 810dc3a:	07d8      	lsls	r0, r3, #31
 810dc3c:	d529      	bpl.n	810dc92 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 810dc3e:	68a3      	ldr	r3, [r4, #8]
 810dc40:	0799      	lsls	r1, r3, #30
 810dc42:	d526      	bpl.n	810dc92 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 810dc44:	b97f      	cbnz	r7, 810dc66 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 810dc46:	2d03      	cmp	r5, #3
 810dc48:	d905      	bls.n	810dc56 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 810dc4a:	07eb      	lsls	r3, r5, #31
 810dc4c:	d541      	bpl.n	810dcd2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 810dc4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810dc52:	079f      	lsls	r7, r3, #30
 810dc54:	d53d      	bpl.n	810dcd2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 810dc56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810dc58:	9300      	str	r3, [sp, #0]
 810dc5a:	4641      	mov	r1, r8
 810dc5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810dc5e:	9806      	ldr	r0, [sp, #24]
 810dc60:	f7ff ff0b 	bl	810da7a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 810dc64:	4607      	mov	r7, r0
 810dc66:	b9d5      	cbnz	r5, 810dc9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810dc68:	2f03      	cmp	r7, #3
 810dc6a:	d905      	bls.n	810dc78 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 810dc6c:	07f8      	lsls	r0, r7, #31
 810dc6e:	d532      	bpl.n	810dcd6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 810dc70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810dc74:	0799      	lsls	r1, r3, #30
 810dc76:	d52e      	bpl.n	810dcd6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 810dc78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810dc7a:	9300      	str	r3, [sp, #0]
 810dc7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810dc7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810dc80:	9806      	ldr	r0, [sp, #24]
 810dc82:	4641      	mov	r1, r8
 810dc84:	f7ff fef9 	bl	810da7a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 810dc88:	4605      	mov	r5, r0
 810dc8a:	e008      	b.n	810dc9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810dc8c:	2900      	cmp	r1, #0
 810dc8e:	d1d1      	bne.n	810dc34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 810dc90:	e7cb      	b.n	810dc2a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 810dc92:	2f00      	cmp	r7, #0
 810dc94:	bf08      	it	eq
 810dc96:	2701      	moveq	r7, #1
 810dc98:	2d00      	cmp	r5, #0
 810dc9a:	bf08      	it	eq
 810dc9c:	2501      	moveq	r5, #1
 810dc9e:	ea85 0307 	eor.w	r3, r5, r7
 810dca2:	b2db      	uxtb	r3, r3
 810dca4:	2b03      	cmp	r3, #3
 810dca6:	d918      	bls.n	810dcda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 810dca8:	2d03      	cmp	r5, #3
 810dcaa:	bf81      	itttt	hi
 810dcac:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 810dcae:	6023      	strhi	r3, [r4, #0]
 810dcb0:	462f      	movhi	r7, r5
 810dcb2:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 810dcb6:	bf86      	itte	hi
 810dcb8:	7123      	strbhi	r3, [r4, #4]
 810dcba:	2000      	movhi	r0, #0
 810dcbc:	4630      	movls	r0, r6
 810dcbe:	07ba      	lsls	r2, r7, #30
 810dcc0:	71a7      	strb	r7, [r4, #6]
 810dcc2:	d401      	bmi.n	810dcc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810dcc4:	07fb      	lsls	r3, r7, #31
 810dcc6:	d49f      	bmi.n	810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dcc8:	4656      	mov	r6, sl
 810dcca:	4630      	mov	r0, r6
 810dccc:	b011      	add	sp, #68	; 0x44
 810dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dcd2:	2701      	movs	r7, #1
 810dcd4:	e7e3      	b.n	810dc9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810dcd6:	2501      	movs	r5, #1
 810dcd8:	e7e1      	b.n	810dc9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 810dcda:	403d      	ands	r5, r7
 810dcdc:	b2ed      	uxtb	r5, r5
 810dcde:	2d03      	cmp	r5, #3
 810dce0:	f8c4 b000 	str.w	fp, [r4]
 810dce4:	d904      	bls.n	810dcf0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 810dce6:	2302      	movs	r3, #2
 810dce8:	71a3      	strb	r3, [r4, #6]
 810dcea:	f04f 0a01 	mov.w	sl, #1
 810dcee:	e7eb      	b.n	810dcc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 810dcf0:	2001      	movs	r0, #1
 810dcf2:	71a0      	strb	r0, [r4, #6]
 810dcf4:	e788      	b.n	810dc08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 810dcf6:	2301      	movs	r3, #1
 810dcf8:	9309      	str	r3, [sp, #36]	; 0x24
 810dcfa:	4630      	mov	r0, r6
 810dcfc:	e787      	b.n	810dc0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 810dcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810dd00:	2b00      	cmp	r3, #0
 810dd02:	d0e2      	beq.n	810dcca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810dd04:	9b04      	ldr	r3, [sp, #16]
 810dd06:	9308      	str	r3, [sp, #32]
 810dd08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810dd0a:	2b01      	cmp	r3, #1
 810dd0c:	d0dd      	beq.n	810dcca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810dd0e:	2301      	movs	r3, #1
 810dd10:	930a      	str	r3, [sp, #40]	; 0x28
 810dd12:	e714      	b.n	810db3e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110a5e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8110a5e:	b538      	push	{r3, r4, r5, lr}
 8110a60:	4615      	mov	r5, r2
 8110a62:	461c      	mov	r4, r3
 8110a64:	f000 f8e8 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110a68:	b120      	cbz	r0, 8110a74 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8110a6a:	2308      	movs	r3, #8
 8110a6c:	60e3      	str	r3, [r4, #12]
 8110a6e:	2306      	movs	r3, #6
 8110a70:	6025      	str	r5, [r4, #0]
 8110a72:	7123      	strb	r3, [r4, #4]
 8110a74:	bd38      	pop	{r3, r4, r5, pc}
=======
0810dd14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd18:	b089      	sub	sp, #36	; 0x24
 810dd1a:	4607      	mov	r7, r0
 810dd1c:	9102      	str	r1, [sp, #8]
 810dd1e:	4692      	mov	sl, r2
 810dd20:	461c      	mov	r4, r3
 810dd22:	f000 f93c 	bl	810df9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810dd26:	4605      	mov	r5, r0
 810dd28:	2800      	cmp	r0, #0
 810dd2a:	d159      	bne.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810dd2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 810dd30:	f8d7 900c 	ldr.w	r9, [r7, #12]
 810dd34:	f018 0f10 	tst.w	r8, #16
 810dd38:	bf18      	it	ne
 810dd3a:	f8d7 8008 	ldrne.w	r8, [r7, #8]
 810dd3e:	f008 0301 	and.w	r3, r8, #1
 810dd42:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
 810dd46:	f04f 0b00 	mov.w	fp, #0
 810dd4a:	9303      	str	r3, [sp, #12]
 810dd4c:	f1b9 0f00 	cmp.w	r9, #0
 810dd50:	d06c      	beq.n	810de2c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 810dd52:	68f2      	ldr	r2, [r6, #12]
 810dd54:	f8cd b010 	str.w	fp, [sp, #16]
 810dd58:	f002 0301 	and.w	r3, r2, #1
 810dd5c:	9300      	str	r3, [sp, #0]
 810dd5e:	f012 0302 	ands.w	r3, r2, #2
 810dd62:	f88d b014 	strb.w	fp, [sp, #20]
 810dd66:	e9cd 8b06 	strd	r8, fp, [sp, #24]
 810dd6a:	9301      	str	r3, [sp, #4]
 810dd6c:	d105      	bne.n	810dd7a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 810dd6e:	9b03      	ldr	r3, [sp, #12]
 810dd70:	b91b      	cbnz	r3, 810dd7a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 810dd72:	f109 39ff 	add.w	r9, r9, #4294967295
 810dd76:	3e08      	subs	r6, #8
 810dd78:	e7e8      	b.n	810dd4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 810dd7a:	f1ba 0f00 	cmp.w	sl, #0
 810dd7e:	d033      	beq.n	810dde8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd4>
 810dd80:	9b00      	ldr	r3, [sp, #0]
 810dd82:	1212      	asrs	r2, r2, #8
 810dd84:	b113      	cbz	r3, 810dd8c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 810dd86:	f8da 3000 	ldr.w	r3, [sl]
 810dd8a:	589a      	ldr	r2, [r3, r2]
 810dd8c:	4452      	add	r2, sl
 810dd8e:	68b0      	ldr	r0, [r6, #8]
 810dd90:	9902      	ldr	r1, [sp, #8]
 810dd92:	6803      	ldr	r3, [r0, #0]
 810dd94:	699d      	ldr	r5, [r3, #24]
 810dd96:	ab04      	add	r3, sp, #16
 810dd98:	47a8      	blx	r5
 810dd9a:	4605      	mov	r5, r0
 810dd9c:	2800      	cmp	r0, #0
 810dd9e:	d0e8      	beq.n	810dd72 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810dda0:	9b07      	ldr	r3, [sp, #28]
 810dda2:	2b08      	cmp	r3, #8
 810dda4:	d103      	bne.n	810ddae <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 810dda6:	9b00      	ldr	r3, [sp, #0]
 810dda8:	b10b      	cbz	r3, 810ddae <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 810ddaa:	68b3      	ldr	r3, [r6, #8]
 810ddac:	9307      	str	r3, [sp, #28]
 810ddae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 810ddb2:	2b03      	cmp	r3, #3
 810ddb4:	d905      	bls.n	810ddc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 810ddb6:	9a01      	ldr	r2, [sp, #4]
 810ddb8:	b91a      	cbnz	r2, 810ddc2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 810ddba:	f023 0302 	bic.w	r3, r3, #2
 810ddbe:	f88d 3014 	strb.w	r3, [sp, #20]
 810ddc2:	68e1      	ldr	r1, [r4, #12]
 810ddc4:	b9c1      	cbnz	r1, 810ddf8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 810ddc6:	ab04      	add	r3, sp, #16
 810ddc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810ddca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810ddce:	7923      	ldrb	r3, [r4, #4]
 810ddd0:	2b03      	cmp	r3, #3
 810ddd2:	d905      	bls.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810ddd4:	079a      	lsls	r2, r3, #30
 810ddd6:	d509      	bpl.n	810ddec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 810ddd8:	68bb      	ldr	r3, [r7, #8]
 810ddda:	f013 0f01 	tst.w	r3, #1
 810ddde:	d1c8      	bne.n	810dd72 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810dde0:	4628      	mov	r0, r5
 810dde2:	b009      	add	sp, #36	; 0x24
 810dde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dde8:	4652      	mov	r2, sl
 810ddea:	e7d0      	b.n	810dd8e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7a>
 810ddec:	07db      	lsls	r3, r3, #31
 810ddee:	d5f7      	bpl.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810ddf0:	68bb      	ldr	r3, [r7, #8]
 810ddf2:	f013 0f02 	tst.w	r3, #2
 810ddf6:	e7f2      	b.n	810ddde <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xca>
 810ddf8:	6823      	ldr	r3, [r4, #0]
 810ddfa:	9a04      	ldr	r2, [sp, #16]
 810ddfc:	4293      	cmp	r3, r2
 810ddfe:	d004      	beq.n	810de0a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf6>
 810de00:	2300      	movs	r3, #0
 810de02:	6023      	str	r3, [r4, #0]
 810de04:	2302      	movs	r3, #2
 810de06:	7123      	strb	r3, [r4, #4]
 810de08:	e7ea      	b.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 810de0a:	b12b      	cbz	r3, 810de18 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 810de0c:	7923      	ldrb	r3, [r4, #4]
 810de0e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 810de12:	4313      	orrs	r3, r2
 810de14:	7123      	strb	r3, [r4, #4]
 810de16:	e7ac      	b.n	810dd72 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 810de18:	9807      	ldr	r0, [sp, #28]
 810de1a:	2808      	cmp	r0, #8
 810de1c:	d0f2      	beq.n	810de04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810de1e:	2908      	cmp	r1, #8
 810de20:	d0f0      	beq.n	810de04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810de22:	f000 f80b 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810de26:	2800      	cmp	r0, #0
 810de28:	d1f0      	bne.n	810de0c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf8>
 810de2a:	e7eb      	b.n	810de04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 810de2c:	7925      	ldrb	r5, [r4, #4]
 810de2e:	3500      	adds	r5, #0
 810de30:	bf18      	it	ne
 810de32:	2501      	movne	r5, #1
 810de34:	e7d4      	b.n	810dde0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110a76 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8110a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8110a78:	4605      	mov	r5, r0
 8110a7a:	460c      	mov	r4, r1
 8110a7c:	9201      	str	r2, [sp, #4]
 8110a7e:	461e      	mov	r6, r3
 8110a80:	f000 f8da 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110a84:	b950      	cbnz	r0, 8110a9c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8110a86:	2e03      	cmp	r6, #3
 8110a88:	d808      	bhi.n	8110a9c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8110a8a:	6823      	ldr	r3, [r4, #0]
 8110a8c:	9a01      	ldr	r2, [sp, #4]
 8110a8e:	695b      	ldr	r3, [r3, #20]
 8110a90:	4629      	mov	r1, r5
 8110a92:	4620      	mov	r0, r4
 8110a94:	b002      	add	sp, #8
 8110a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8110a9a:	4718      	bx	r3
 8110a9c:	b002      	add	sp, #8
 8110a9e:	bd70      	pop	{r4, r5, r6, pc}
=======
0810de36 <_ZNSt9type_infoD1Ev>:
 810de36:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110aa0 <_ZdlPvj>:
 8110aa0:	f7fb bb6a 	b.w	810c178 <_ZdlPv>
=======
0810de38 <_ZNKSt9type_info14__is_pointer_pEv>:
 810de38:	2000      	movs	r0, #0
 810de3a:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110aa4 <__cxa_guard_acquire>:
 8110aa4:	6803      	ldr	r3, [r0, #0]
 8110aa6:	07db      	lsls	r3, r3, #31
 8110aa8:	d406      	bmi.n	8110ab8 <__cxa_guard_acquire+0x14>
 8110aaa:	7843      	ldrb	r3, [r0, #1]
 8110aac:	b103      	cbz	r3, 8110ab0 <__cxa_guard_acquire+0xc>
 8110aae:	deff      	udf	#255	; 0xff
 8110ab0:	2301      	movs	r3, #1
 8110ab2:	7043      	strb	r3, [r0, #1]
 8110ab4:	4618      	mov	r0, r3
 8110ab6:	4770      	bx	lr
 8110ab8:	2000      	movs	r0, #0
 8110aba:	4770      	bx	lr
=======
0810de3c <_ZNKSt9type_infoeqERKS_>:
 810de3c:	4281      	cmp	r1, r0
 810de3e:	b508      	push	{r3, lr}
 810de40:	d00e      	beq.n	810de60 <_ZNKSt9type_infoeqERKS_+0x24>
 810de42:	6840      	ldr	r0, [r0, #4]
 810de44:	7803      	ldrb	r3, [r0, #0]
 810de46:	2b2a      	cmp	r3, #42	; 0x2a
 810de48:	d00c      	beq.n	810de64 <_ZNKSt9type_infoeqERKS_+0x28>
 810de4a:	6849      	ldr	r1, [r1, #4]
 810de4c:	780b      	ldrb	r3, [r1, #0]
 810de4e:	2b2a      	cmp	r3, #42	; 0x2a
 810de50:	bf08      	it	eq
 810de52:	3101      	addeq	r1, #1
 810de54:	f7f2 fa44 	bl	81002e0 <strcmp>
 810de58:	fab0 f080 	clz	r0, r0
 810de5c:	0940      	lsrs	r0, r0, #5
 810de5e:	bd08      	pop	{r3, pc}
 810de60:	2001      	movs	r0, #1
 810de62:	e7fc      	b.n	810de5e <_ZNKSt9type_infoeqERKS_+0x22>
 810de64:	2000      	movs	r0, #0
 810de66:	e7fa      	b.n	810de5e <_ZNKSt9type_infoeqERKS_+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110abc <__cxa_guard_release>:
 8110abc:	2301      	movs	r3, #1
 8110abe:	6003      	str	r3, [r0, #0]
 8110ac0:	4770      	bx	lr
=======
0810de68 <__cxa_pure_virtual>:
 810de68:	b508      	push	{r3, lr}
 810de6a:	f000 f945 	bl	810e0f8 <_ZSt9terminatev>

0810de6e <_ZdlPvj>:
 810de6e:	f7fc bf1b 	b.w	810aca8 <_ZdlPv>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08110ac4 <_ZSt11_Hash_bytesPKvjj>:
 8110ac4:	4b18      	ldr	r3, [pc, #96]	; (8110b28 <_ZSt11_Hash_bytesPKvjj+0x64>)
 8110ac6:	b570      	push	{r4, r5, r6, lr}
 8110ac8:	404a      	eors	r2, r1
 8110aca:	460d      	mov	r5, r1
 8110acc:	1846      	adds	r6, r0, r1
 8110ace:	2d03      	cmp	r5, #3
 8110ad0:	eba6 0405 	sub.w	r4, r6, r5
 8110ad4:	d908      	bls.n	8110ae8 <_ZSt11_Hash_bytesPKvjj+0x24>
 8110ad6:	6824      	ldr	r4, [r4, #0]
 8110ad8:	435c      	muls	r4, r3
 8110ada:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 8110ade:	435a      	muls	r2, r3
 8110ae0:	435c      	muls	r4, r3
 8110ae2:	4062      	eors	r2, r4
 8110ae4:	3d04      	subs	r5, #4
 8110ae6:	e7f2      	b.n	8110ace <_ZSt11_Hash_bytesPKvjj+0xa>
 8110ae8:	088d      	lsrs	r5, r1, #2
 8110aea:	f06f 0403 	mvn.w	r4, #3
 8110aee:	fb04 1105 	mla	r1, r4, r5, r1
 8110af2:	2902      	cmp	r1, #2
 8110af4:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 8110af8:	d011      	beq.n	8110b1e <_ZSt11_Hash_bytesPKvjj+0x5a>
 8110afa:	2903      	cmp	r1, #3
 8110afc:	d00c      	beq.n	8110b18 <_ZSt11_Hash_bytesPKvjj+0x54>
 8110afe:	2901      	cmp	r1, #1
 8110b00:	d103      	bne.n	8110b0a <_ZSt11_Hash_bytesPKvjj+0x46>
 8110b02:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 8110b06:	4042      	eors	r2, r0
 8110b08:	435a      	muls	r2, r3
 8110b0a:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 8110b0e:	fb03 f002 	mul.w	r0, r3, r2
 8110b12:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8110b16:	bd70      	pop	{r4, r5, r6, pc}
 8110b18:	78a1      	ldrb	r1, [r4, #2]
 8110b1a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 8110b1e:	7861      	ldrb	r1, [r4, #1]
 8110b20:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 8110b24:	e7ed      	b.n	8110b02 <_ZSt11_Hash_bytesPKvjj+0x3e>
 8110b26:	bf00      	nop
 8110b28:	5bd1e995 	.word	0x5bd1e995
=======
0810de74 <_ZSt11_Hash_bytesPKvjj>:
 810de74:	4b18      	ldr	r3, [pc, #96]	; (810ded8 <_ZSt11_Hash_bytesPKvjj+0x64>)
 810de76:	b570      	push	{r4, r5, r6, lr}
 810de78:	404a      	eors	r2, r1
 810de7a:	460d      	mov	r5, r1
 810de7c:	1846      	adds	r6, r0, r1
 810de7e:	2d03      	cmp	r5, #3
 810de80:	eba6 0405 	sub.w	r4, r6, r5
 810de84:	d908      	bls.n	810de98 <_ZSt11_Hash_bytesPKvjj+0x24>
 810de86:	6824      	ldr	r4, [r4, #0]
 810de88:	435c      	muls	r4, r3
 810de8a:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 810de8e:	435a      	muls	r2, r3
 810de90:	435c      	muls	r4, r3
 810de92:	4062      	eors	r2, r4
 810de94:	3d04      	subs	r5, #4
 810de96:	e7f2      	b.n	810de7e <_ZSt11_Hash_bytesPKvjj+0xa>
 810de98:	088d      	lsrs	r5, r1, #2
 810de9a:	f06f 0403 	mvn.w	r4, #3
 810de9e:	fb04 1105 	mla	r1, r4, r5, r1
 810dea2:	2902      	cmp	r1, #2
 810dea4:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 810dea8:	d011      	beq.n	810dece <_ZSt11_Hash_bytesPKvjj+0x5a>
 810deaa:	2903      	cmp	r1, #3
 810deac:	d00c      	beq.n	810dec8 <_ZSt11_Hash_bytesPKvjj+0x54>
 810deae:	2901      	cmp	r1, #1
 810deb0:	d103      	bne.n	810deba <_ZSt11_Hash_bytesPKvjj+0x46>
 810deb2:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 810deb6:	4042      	eors	r2, r0
 810deb8:	435a      	muls	r2, r3
 810deba:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 810debe:	fb03 f002 	mul.w	r0, r3, r2
 810dec2:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 810dec6:	bd70      	pop	{r4, r5, r6, pc}
 810dec8:	78b1      	ldrb	r1, [r6, #2]
 810deca:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 810dece:	7871      	ldrb	r1, [r6, #1]
 810ded0:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 810ded4:	e7ed      	b.n	810deb2 <_ZSt11_Hash_bytesPKvjj+0x3e>
 810ded6:	bf00      	nop
 810ded8:	5bd1e995 	.word	0x5bd1e995
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110b2c <__cxa_pure_virtual>:
 8110b2c:	b508      	push	{r3, lr}
 8110b2e:	f000 fadb 	bl	81110e8 <_ZSt9terminatev>
=======
0810dedc <__cxa_guard_acquire>:
 810dedc:	6803      	ldr	r3, [r0, #0]
 810dede:	07db      	lsls	r3, r3, #31
 810dee0:	d406      	bmi.n	810def0 <__cxa_guard_acquire+0x14>
 810dee2:	7843      	ldrb	r3, [r0, #1]
 810dee4:	b103      	cbz	r3, 810dee8 <__cxa_guard_acquire+0xc>
 810dee6:	deff      	udf	#255	; 0xff
 810dee8:	2301      	movs	r3, #1
 810deea:	7043      	strb	r3, [r0, #1]
 810deec:	4618      	mov	r0, r3
 810deee:	4770      	bx	lr
 810def0:	2000      	movs	r0, #0
 810def2:	4770      	bx	lr

0810def4 <__cxa_guard_release>:
 810def4:	2301      	movs	r3, #1
 810def6:	6003      	str	r3, [r0, #0]
 810def8:	4770      	bx	lr

0810defa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 810defa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 810defc:	2400      	movs	r4, #0
 810defe:	2310      	movs	r3, #16
 810df00:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810df04:	6803      	ldr	r3, [r0, #0]
 810df06:	9400      	str	r4, [sp, #0]
 810df08:	4615      	mov	r5, r2
 810df0a:	699e      	ldr	r6, [r3, #24]
 810df0c:	f88d 4004 	strb.w	r4, [sp, #4]
 810df10:	466b      	mov	r3, sp
 810df12:	6812      	ldr	r2, [r2, #0]
 810df14:	47b0      	blx	r6
 810df16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 810df1a:	f003 0306 	and.w	r3, r3, #6
 810df1e:	2b06      	cmp	r3, #6
 810df20:	bf03      	ittte	eq
 810df22:	9b00      	ldreq	r3, [sp, #0]
 810df24:	602b      	streq	r3, [r5, #0]
 810df26:	2001      	moveq	r0, #1
 810df28:	4620      	movne	r0, r4
 810df2a:	b004      	add	sp, #16
 810df2c:	bd70      	pop	{r4, r5, r6, pc}

0810df2e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 810df2e:	9800      	ldr	r0, [sp, #0]
 810df30:	4290      	cmp	r0, r2
 810df32:	bf0c      	ite	eq
 810df34:	2006      	moveq	r0, #6
 810df36:	2001      	movne	r0, #1
 810df38:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08110b34 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8110b34:	b510      	push	{r4, lr}
 8110b36:	4b03      	ldr	r3, [pc, #12]	; (8110b44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8110b38:	6003      	str	r3, [r0, #0]
 8110b3a:	4604      	mov	r4, r0
 8110b3c:	f7ff ff5c 	bl	81109f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8110b40:	4620      	mov	r0, r4
 8110b42:	bd10      	pop	{r4, pc}
 8110b44:	08114efc 	.word	0x08114efc
=======
0810df3c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 810df3c:	b510      	push	{r4, lr}
 810df3e:	4b03      	ldr	r3, [pc, #12]	; (810df4c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 810df40:	6003      	str	r3, [r0, #0]
 810df42:	4604      	mov	r4, r0
 810df44:	f7ff ff77 	bl	810de36 <_ZNSt9type_infoD1Ev>
 810df48:	4620      	mov	r0, r4
 810df4a:	bd10      	pop	{r4, pc}
 810df4c:	08110e6c 	.word	0x08110e6c
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110b48 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8110b48:	b510      	push	{r4, lr}
 8110b4a:	4604      	mov	r4, r0
 8110b4c:	f7ff fff2 	bl	8110b34 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8110b50:	4620      	mov	r0, r4
 8110b52:	210c      	movs	r1, #12
 8110b54:	f7ff ffa4 	bl	8110aa0 <_ZdlPvj>
 8110b58:	4620      	mov	r0, r4
 8110b5a:	bd10      	pop	{r4, pc}
=======
0810df50 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 810df50:	b510      	push	{r4, lr}
 810df52:	4604      	mov	r4, r0
 810df54:	f7ff fff2 	bl	810df3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810df58:	4620      	mov	r0, r4
 810df5a:	2108      	movs	r1, #8
 810df5c:	f7ff ff87 	bl	810de6e <_ZdlPvj>
 810df60:	4620      	mov	r0, r4
 810df62:	bd10      	pop	{r4, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110b5c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8110b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8110b5e:	9f08      	ldr	r7, [sp, #32]
 8110b60:	4297      	cmp	r7, r2
 8110b62:	4605      	mov	r5, r0
 8110b64:	460e      	mov	r6, r1
 8110b66:	4614      	mov	r4, r2
 8110b68:	d00a      	beq.n	8110b80 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8110b6a:	68a8      	ldr	r0, [r5, #8]
 8110b6c:	6802      	ldr	r2, [r0, #0]
 8110b6e:	9708      	str	r7, [sp, #32]
 8110b70:	6a15      	ldr	r5, [r2, #32]
 8110b72:	4631      	mov	r1, r6
 8110b74:	4622      	mov	r2, r4
 8110b76:	46ac      	mov	ip, r5
 8110b78:	b003      	add	sp, #12
 8110b7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8110b7e:	4760      	bx	ip
 8110b80:	4619      	mov	r1, r3
 8110b82:	9301      	str	r3, [sp, #4]
 8110b84:	f000 f858 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110b88:	9b01      	ldr	r3, [sp, #4]
 8110b8a:	2800      	cmp	r0, #0
 8110b8c:	d0ed      	beq.n	8110b6a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8110b8e:	2006      	movs	r0, #6
 8110b90:	b003      	add	sp, #12
 8110b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08110b94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8110b94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110b98:	460d      	mov	r5, r1
 8110b9a:	4619      	mov	r1, r3
 8110b9c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8110ba0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8110ba4:	4681      	mov	r9, r0
 8110ba6:	4617      	mov	r7, r2
 8110ba8:	4698      	mov	r8, r3
 8110baa:	f000 f845 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110bae:	b190      	cbz	r0, 8110bd6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8110bb0:	2d00      	cmp	r5, #0
 8110bb2:	6034      	str	r4, [r6, #0]
 8110bb4:	7137      	strb	r7, [r6, #4]
 8110bb6:	db09      	blt.n	8110bcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8110bb8:	1961      	adds	r1, r4, r5
 8110bba:	458a      	cmp	sl, r1
 8110bbc:	bf0c      	ite	eq
 8110bbe:	2106      	moveq	r1, #6
 8110bc0:	2101      	movne	r1, #1
 8110bc2:	71b1      	strb	r1, [r6, #6]
 8110bc4:	2000      	movs	r0, #0
 8110bc6:	b001      	add	sp, #4
 8110bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110bcc:	3502      	adds	r5, #2
 8110bce:	d1f9      	bne.n	8110bc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8110bd0:	2301      	movs	r3, #1
 8110bd2:	71b3      	strb	r3, [r6, #6]
 8110bd4:	e7f6      	b.n	8110bc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8110bd6:	4554      	cmp	r4, sl
 8110bd8:	d106      	bne.n	8110be8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8110bda:	4659      	mov	r1, fp
 8110bdc:	4648      	mov	r0, r9
 8110bde:	f000 f82b 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110be2:	b108      	cbz	r0, 8110be8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8110be4:	7177      	strb	r7, [r6, #5]
 8110be6:	e7ed      	b.n	8110bc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8110be8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8110bec:	6803      	ldr	r3, [r0, #0]
 8110bee:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8110bf2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8110bf6:	69dc      	ldr	r4, [r3, #28]
 8110bf8:	463a      	mov	r2, r7
 8110bfa:	4643      	mov	r3, r8
 8110bfc:	4629      	mov	r1, r5
 8110bfe:	46a4      	mov	ip, r4
 8110c00:	b001      	add	sp, #4
 8110c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110c06:	4760      	bx	ip
=======
0810df64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 810df64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810df68:	4698      	mov	r8, r3
 810df6a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 810df6e:	9e06      	ldr	r6, [sp, #24]
 810df70:	429e      	cmp	r6, r3
 810df72:	4607      	mov	r7, r0
 810df74:	4615      	mov	r5, r2
 810df76:	d107      	bne.n	810df88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 810df78:	9907      	ldr	r1, [sp, #28]
 810df7a:	f7ff ff5f 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810df7e:	b118      	cbz	r0, 810df88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 810df80:	7165      	strb	r5, [r4, #5]
 810df82:	2000      	movs	r0, #0
 810df84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810df88:	4641      	mov	r1, r8
 810df8a:	4638      	mov	r0, r7
 810df8c:	f7ff ff56 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810df90:	2800      	cmp	r0, #0
 810df92:	d0f6      	beq.n	810df82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 810df94:	2301      	movs	r3, #1
 810df96:	6026      	str	r6, [r4, #0]
 810df98:	7125      	strb	r5, [r4, #4]
 810df9a:	71a3      	strb	r3, [r4, #6]
 810df9c:	e7f1      	b.n	810df82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110c08 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8110c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110c0c:	4607      	mov	r7, r0
 8110c0e:	460c      	mov	r4, r1
 8110c10:	4615      	mov	r5, r2
 8110c12:	461e      	mov	r6, r3
 8110c14:	f7ff ff23 	bl	8110a5e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8110c18:	b948      	cbnz	r0, 8110c2e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8110c1a:	68b8      	ldr	r0, [r7, #8]
 8110c1c:	6803      	ldr	r3, [r0, #0]
 8110c1e:	699f      	ldr	r7, [r3, #24]
 8110c20:	462a      	mov	r2, r5
 8110c22:	4633      	mov	r3, r6
 8110c24:	4621      	mov	r1, r4
 8110c26:	46bc      	mov	ip, r7
 8110c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8110c2c:	4760      	bx	ip
 8110c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
=======
0810df9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 810df9e:	b538      	push	{r3, r4, r5, lr}
 810dfa0:	4615      	mov	r5, r2
 810dfa2:	461c      	mov	r4, r3
 810dfa4:	f7ff ff4a 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810dfa8:	b120      	cbz	r0, 810dfb4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 810dfaa:	2308      	movs	r3, #8
 810dfac:	60e3      	str	r3, [r4, #12]
 810dfae:	2306      	movs	r3, #6
 810dfb0:	6025      	str	r5, [r4, #0]
 810dfb2:	7123      	strb	r3, [r4, #4]
 810dfb4:	bd38      	pop	{r3, r4, r5, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110c32 <_ZNSt9type_infoD1Ev>:
 8110c32:	4770      	bx	lr
=======
0810dfb6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 810dfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dfba:	4605      	mov	r5, r0
 810dfbc:	460c      	mov	r4, r1
 810dfbe:	4616      	mov	r6, r2
 810dfc0:	461f      	mov	r7, r3
 810dfc2:	f7ff ff3b 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810dfc6:	b948      	cbnz	r0, 810dfdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810dfc8:	2f03      	cmp	r7, #3
 810dfca:	d807      	bhi.n	810dfdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810dfcc:	6823      	ldr	r3, [r4, #0]
 810dfce:	4632      	mov	r2, r6
 810dfd0:	4629      	mov	r1, r5
 810dfd2:	4620      	mov	r0, r4
 810dfd4:	695b      	ldr	r3, [r3, #20]
 810dfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810dfda:	4718      	bx	r3
 810dfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110c34 <_ZNKSt9type_info14__is_pointer_pEv>:
 8110c34:	2000      	movs	r0, #0
 8110c36:	4770      	bx	lr
=======
0810dfe0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 810dfe0:	b510      	push	{r4, lr}
 810dfe2:	4b03      	ldr	r3, [pc, #12]	; (810dff0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 810dfe4:	6003      	str	r3, [r0, #0]
 810dfe6:	4604      	mov	r4, r0
 810dfe8:	f7ff ffa8 	bl	810df3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810dfec:	4620      	mov	r0, r4
 810dfee:	bd10      	pop	{r4, pc}
 810dff0:	08110ecc 	.word	0x08110ecc
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110c38 <_ZNKSt9type_infoeqERKS_>:
 8110c38:	4281      	cmp	r1, r0
 8110c3a:	b508      	push	{r3, lr}
 8110c3c:	d00e      	beq.n	8110c5c <_ZNKSt9type_infoeqERKS_+0x24>
 8110c3e:	6840      	ldr	r0, [r0, #4]
 8110c40:	7803      	ldrb	r3, [r0, #0]
 8110c42:	2b2a      	cmp	r3, #42	; 0x2a
 8110c44:	d00c      	beq.n	8110c60 <_ZNKSt9type_infoeqERKS_+0x28>
 8110c46:	6849      	ldr	r1, [r1, #4]
 8110c48:	780b      	ldrb	r3, [r1, #0]
 8110c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8110c4c:	bf08      	it	eq
 8110c4e:	3101      	addeq	r1, #1
 8110c50:	f7ef fb46 	bl	81002e0 <strcmp>
 8110c54:	fab0 f080 	clz	r0, r0
 8110c58:	0940      	lsrs	r0, r0, #5
 8110c5a:	bd08      	pop	{r3, pc}
 8110c5c:	2001      	movs	r0, #1
 8110c5e:	e7fc      	b.n	8110c5a <_ZNKSt9type_infoeqERKS_+0x22>
 8110c60:	2000      	movs	r0, #0
 8110c62:	e7fa      	b.n	8110c5a <_ZNKSt9type_infoeqERKS_+0x22>
=======
0810dff4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 810dff4:	b510      	push	{r4, lr}
 810dff6:	4604      	mov	r4, r0
 810dff8:	f7ff fff2 	bl	810dfe0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 810dffc:	4620      	mov	r0, r4
 810dffe:	210c      	movs	r1, #12
 810e000:	f7ff ff35 	bl	810de6e <_ZdlPvj>
 810e004:	4620      	mov	r0, r4
 810e006:	bd10      	pop	{r4, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110c64 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8110c64:	b510      	push	{r4, lr}
 8110c66:	4b03      	ldr	r3, [pc, #12]	; (8110c74 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8110c68:	6003      	str	r3, [r0, #0]
 8110c6a:	4604      	mov	r4, r0
 8110c6c:	f7ff fec4 	bl	81109f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8110c70:	4620      	mov	r0, r4
 8110c72:	bd10      	pop	{r4, pc}
 8110c74:	08114f74 	.word	0x08114f74
=======
0810e008 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e00c:	9e06      	ldr	r6, [sp, #24]
 810e00e:	4296      	cmp	r6, r2
 810e010:	4607      	mov	r7, r0
 810e012:	4688      	mov	r8, r1
 810e014:	4615      	mov	r5, r2
 810e016:	461c      	mov	r4, r3
 810e018:	d00a      	beq.n	810e030 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 810e01a:	68b8      	ldr	r0, [r7, #8]
 810e01c:	6803      	ldr	r3, [r0, #0]
 810e01e:	9606      	str	r6, [sp, #24]
 810e020:	6a1e      	ldr	r6, [r3, #32]
 810e022:	462a      	mov	r2, r5
 810e024:	4623      	mov	r3, r4
 810e026:	4641      	mov	r1, r8
 810e028:	46b4      	mov	ip, r6
 810e02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e02e:	4760      	bx	ip
 810e030:	4619      	mov	r1, r3
 810e032:	f7ff ff03 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810e036:	2800      	cmp	r0, #0
 810e038:	d0ef      	beq.n	810e01a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 810e03a:	2006      	movs	r0, #6
 810e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110c78 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8110c78:	b510      	push	{r4, lr}
 8110c7a:	4604      	mov	r4, r0
 8110c7c:	f7ff fff2 	bl	8110c64 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8110c80:	4620      	mov	r0, r4
 8110c82:	2118      	movs	r1, #24
 8110c84:	f7ff ff0c 	bl	8110aa0 <_ZdlPvj>
 8110c88:	4620      	mov	r0, r4
 8110c8a:	bd10      	pop	{r4, pc}
=======
0810e040 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810e040:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e044:	460e      	mov	r6, r1
 810e046:	4619      	mov	r1, r3
 810e048:	4683      	mov	fp, r0
 810e04a:	4617      	mov	r7, r2
 810e04c:	4699      	mov	r9, r3
 810e04e:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 810e052:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 810e056:	f7ff fef1 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810e05a:	b190      	cbz	r0, 810e082 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 810e05c:	2e00      	cmp	r6, #0
 810e05e:	602c      	str	r4, [r5, #0]
 810e060:	712f      	strb	r7, [r5, #4]
 810e062:	db09      	blt.n	810e078 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 810e064:	4434      	add	r4, r6
 810e066:	45a0      	cmp	r8, r4
 810e068:	bf0c      	ite	eq
 810e06a:	2406      	moveq	r4, #6
 810e06c:	2401      	movne	r4, #1
 810e06e:	71ac      	strb	r4, [r5, #6]
 810e070:	2000      	movs	r0, #0
 810e072:	b001      	add	sp, #4
 810e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e078:	3602      	adds	r6, #2
 810e07a:	d1f9      	bne.n	810e070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810e07c:	2301      	movs	r3, #1
 810e07e:	71ab      	strb	r3, [r5, #6]
 810e080:	e7f6      	b.n	810e070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810e082:	4544      	cmp	r4, r8
 810e084:	d106      	bne.n	810e094 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810e086:	4651      	mov	r1, sl
 810e088:	4658      	mov	r0, fp
 810e08a:	f7ff fed7 	bl	810de3c <_ZNKSt9type_infoeqERKS_>
 810e08e:	b108      	cbz	r0, 810e094 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810e090:	716f      	strb	r7, [r5, #5]
 810e092:	e7ed      	b.n	810e070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810e094:	f8db 0008 	ldr.w	r0, [fp, #8]
 810e098:	6803      	ldr	r3, [r0, #0]
 810e09a:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 810e09e:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 810e0a2:	69dc      	ldr	r4, [r3, #28]
 810e0a4:	463a      	mov	r2, r7
 810e0a6:	464b      	mov	r3, r9
 810e0a8:	4631      	mov	r1, r6
 810e0aa:	46a4      	mov	ip, r4
 810e0ac:	b001      	add	sp, #4
 810e0ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e0b2:	4760      	bx	ip
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110c8c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8110c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110c90:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8110c94:	454a      	cmp	r2, r9
 8110c96:	4604      	mov	r4, r0
 8110c98:	460f      	mov	r7, r1
 8110c9a:	4616      	mov	r6, r2
 8110c9c:	469a      	mov	sl, r3
 8110c9e:	d024      	beq.n	8110cea <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8110ca0:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8110ca4:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8110ca8:	f1b8 0f00 	cmp.w	r8, #0
 8110cac:	d028      	beq.n	8110d00 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 8110cae:	68e5      	ldr	r5, [r4, #12]
 8110cb0:	07aa      	lsls	r2, r5, #30
 8110cb2:	d521      	bpl.n	8110cf8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8110cb4:	122a      	asrs	r2, r5, #8
 8110cb6:	f015 0501 	ands.w	r5, r5, #1
 8110cba:	d003      	beq.n	8110cc4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 8110cbc:	1cfb      	adds	r3, r7, #3
 8110cbe:	d01b      	beq.n	8110cf8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8110cc0:	6833      	ldr	r3, [r6, #0]
 8110cc2:	589a      	ldr	r2, [r3, r2]
 8110cc4:	68a0      	ldr	r0, [r4, #8]
 8110cc6:	6803      	ldr	r3, [r0, #0]
 8110cc8:	f8cd 9000 	str.w	r9, [sp]
 8110ccc:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8110cd0:	4432      	add	r2, r6
 8110cd2:	4653      	mov	r3, sl
 8110cd4:	4639      	mov	r1, r7
 8110cd6:	47d8      	blx	fp
 8110cd8:	2803      	cmp	r0, #3
 8110cda:	d90d      	bls.n	8110cf8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8110cdc:	b115      	cbz	r5, 8110ce4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8110cde:	f040 0001 	orr.w	r0, r0, #1
 8110ce2:	b2c0      	uxtb	r0, r0
 8110ce4:	b003      	add	sp, #12
 8110ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110cea:	4619      	mov	r1, r3
 8110cec:	f7ff ffa4 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110cf0:	2800      	cmp	r0, #0
 8110cf2:	d0d5      	beq.n	8110ca0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8110cf4:	2006      	movs	r0, #6
 8110cf6:	e7f5      	b.n	8110ce4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8110cf8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8110cfc:	3c08      	subs	r4, #8
 8110cfe:	e7d3      	b.n	8110ca8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 8110d00:	2001      	movs	r0, #1
 8110d02:	e7ef      	b.n	8110ce4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
=======
0810e0b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e0b8:	4604      	mov	r4, r0
 810e0ba:	460d      	mov	r5, r1
 810e0bc:	4616      	mov	r6, r2
 810e0be:	461f      	mov	r7, r3
 810e0c0:	f7ff ff6d 	bl	810df9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810e0c4:	b948      	cbnz	r0, 810e0da <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 810e0c6:	68a0      	ldr	r0, [r4, #8]
 810e0c8:	6803      	ldr	r3, [r0, #0]
 810e0ca:	699c      	ldr	r4, [r3, #24]
 810e0cc:	4632      	mov	r2, r6
 810e0ce:	463b      	mov	r3, r7
 810e0d0:	4629      	mov	r1, r5
 810e0d2:	46a4      	mov	ip, r4
 810e0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e0d8:	4760      	bx	ip
 810e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110d04 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8110d04:	b4f0      	push	{r4, r5, r6, r7}
 8110d06:	1e0c      	subs	r4, r1, #0
 8110d08:	9e04      	ldr	r6, [sp, #16]
 8110d0a:	db06      	blt.n	8110d1a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 8110d0c:	4414      	add	r4, r2
 8110d0e:	42a6      	cmp	r6, r4
 8110d10:	bf14      	ite	ne
 8110d12:	2001      	movne	r0, #1
 8110d14:	2006      	moveq	r0, #6
 8110d16:	bcf0      	pop	{r4, r5, r6, r7}
 8110d18:	4770      	bx	lr
 8110d1a:	3402      	adds	r4, #2
 8110d1c:	d004      	beq.n	8110d28 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 8110d1e:	6804      	ldr	r4, [r0, #0]
 8110d20:	6a24      	ldr	r4, [r4, #32]
 8110d22:	46a4      	mov	ip, r4
 8110d24:	bcf0      	pop	{r4, r5, r6, r7}
 8110d26:	4760      	bx	ip
 8110d28:	2001      	movs	r0, #1
 8110d2a:	e7f4      	b.n	8110d16 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>
=======
0810e0de <_ZN10__cxxabiv111__terminateEPFvvE>:
 810e0de:	b508      	push	{r3, lr}
 810e0e0:	4780      	blx	r0
 810e0e2:	f000 f80e 	bl	810e102 <abort>
	...
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110d2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8110d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110d30:	b091      	sub	sp, #68	; 0x44
 8110d32:	469a      	mov	sl, r3
 8110d34:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8110d36:	9206      	str	r2, [sp, #24]
 8110d38:	68a3      	ldr	r3, [r4, #8]
 8110d3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8110d3c:	4688      	mov	r8, r1
 8110d3e:	06d9      	lsls	r1, r3, #27
 8110d40:	bf44      	itt	mi
 8110d42:	6883      	ldrmi	r3, [r0, #8]
 8110d44:	60a3      	strmi	r3, [r4, #8]
 8110d46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8110d48:	4293      	cmp	r3, r2
 8110d4a:	4681      	mov	r9, r0
 8110d4c:	d107      	bne.n	8110d5e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8110d4e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8110d50:	f7ff ff72 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110d54:	b118      	cbz	r0, 8110d5e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8110d56:	9b06      	ldr	r3, [sp, #24]
 8110d58:	7163      	strb	r3, [r4, #5]
 8110d5a:	2700      	movs	r7, #0
 8110d5c:	e082      	b.n	8110e64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 8110d5e:	4651      	mov	r1, sl
 8110d60:	4648      	mov	r0, r9
 8110d62:	f7ff ff69 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 8110d66:	b1c0      	cbz	r0, 8110d9a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8110d68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8110d6a:	6023      	str	r3, [r4, #0]
 8110d6c:	f1b8 0f00 	cmp.w	r8, #0
 8110d70:	9b06      	ldr	r3, [sp, #24]
 8110d72:	7123      	strb	r3, [r4, #4]
 8110d74:	db0b      	blt.n	8110d8e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
 8110d76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8110d78:	4498      	add	r8, r3
 8110d7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8110d7c:	4543      	cmp	r3, r8
 8110d7e:	bf0c      	ite	eq
 8110d80:	f04f 0806 	moveq.w	r8, #6
 8110d84:	f04f 0801 	movne.w	r8, #1
 8110d88:	f884 8006 	strb.w	r8, [r4, #6]
 8110d8c:	e7e5      	b.n	8110d5a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8110d8e:	f118 0f02 	cmn.w	r8, #2
 8110d92:	d1e2      	bne.n	8110d5a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8110d94:	2301      	movs	r3, #1
 8110d96:	71a3      	strb	r3, [r4, #6]
 8110d98:	e7df      	b.n	8110d5a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8110d9a:	f1b8 0f00 	cmp.w	r8, #0
 8110d9e:	bfa9      	itett	ge
 8110da0:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 8110da2:	9007      	strlt	r0, [sp, #28]
 8110da4:	eba3 0308 	subge.w	r3, r3, r8
 8110da8:	9307      	strge	r3, [sp, #28]
 8110daa:	2700      	movs	r7, #0
 8110dac:	2302      	movs	r3, #2
 8110dae:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 8110db2:	2301      	movs	r3, #1
 8110db4:	9308      	str	r3, [sp, #32]
 8110db6:	9b06      	ldr	r3, [sp, #24]
 8110db8:	f043 0301 	orr.w	r3, r3, #1
 8110dbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8110dbe:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8110dc2:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 8110dc6:	9305      	str	r3, [sp, #20]
 8110dc8:	f1bb 0f00 	cmp.w	fp, #0
 8110dcc:	f000 80d7 	beq.w	8110f7e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 8110dd0:	2300      	movs	r3, #0
 8110dd2:	930d      	str	r3, [sp, #52]	; 0x34
 8110dd4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8110dd8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8110ddc:	9b05      	ldr	r3, [sp, #20]
 8110dde:	68a5      	ldr	r5, [r4, #8]
 8110de0:	68db      	ldr	r3, [r3, #12]
 8110de2:	950f      	str	r5, [sp, #60]	; 0x3c
 8110de4:	07da      	lsls	r2, r3, #31
 8110de6:	bf43      	ittte	mi
 8110de8:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 8110dea:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 8110dec:	6800      	ldrmi	r0, [r0, #0]
 8110dee:	9a06      	ldrpl	r2, [sp, #24]
 8110df0:	ea4f 2123 	mov.w	r1, r3, asr #8
 8110df4:	bf48      	it	mi
 8110df6:	5841      	ldrmi	r1, [r0, r1]
 8110df8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8110dfa:	4401      	add	r1, r0
 8110dfc:	9807      	ldr	r0, [sp, #28]
 8110dfe:	b138      	cbz	r0, 8110e10 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe4>
 8110e00:	4288      	cmp	r0, r1
 8110e02:	9e08      	ldr	r6, [sp, #32]
 8110e04:	bf2c      	ite	cs
 8110e06:	2000      	movcs	r0, #0
 8110e08:	2001      	movcc	r0, #1
 8110e0a:	42b0      	cmp	r0, r6
 8110e0c:	f000 80b3 	beq.w	8110f76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24a>
 8110e10:	079b      	lsls	r3, r3, #30
 8110e12:	d407      	bmi.n	8110e24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 8110e14:	f118 0f02 	cmn.w	r8, #2
 8110e18:	d102      	bne.n	8110e20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf4>
 8110e1a:	07ae      	lsls	r6, r5, #30
 8110e1c:	f000 80ad 	beq.w	8110f7a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 8110e20:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8110e24:	9b05      	ldr	r3, [sp, #20]
 8110e26:	6898      	ldr	r0, [r3, #8]
 8110e28:	ad0d      	add	r5, sp, #52	; 0x34
 8110e2a:	6803      	ldr	r3, [r0, #0]
 8110e2c:	9503      	str	r5, [sp, #12]
 8110e2e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8110e30:	9502      	str	r5, [sp, #8]
 8110e32:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8110e34:	e9cd 1500 	strd	r1, r5, [sp]
 8110e38:	4641      	mov	r1, r8
 8110e3a:	69dd      	ldr	r5, [r3, #28]
 8110e3c:	4653      	mov	r3, sl
 8110e3e:	47a8      	blx	r5
 8110e40:	7963      	ldrb	r3, [r4, #5]
 8110e42:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8110e46:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 8110e4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8110e4c:	4313      	orrs	r3, r2
 8110e4e:	2d06      	cmp	r5, #6
 8110e50:	7163      	strb	r3, [r4, #5]
 8110e52:	d001      	beq.n	8110e58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
 8110e54:	2d02      	cmp	r5, #2
 8110e56:	d109      	bne.n	8110e6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8110e58:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8110e5c:	6021      	str	r1, [r4, #0]
 8110e5e:	7123      	strb	r3, [r4, #4]
 8110e60:	71a5      	strb	r5, [r4, #6]
 8110e62:	4607      	mov	r7, r0
 8110e64:	4638      	mov	r0, r7
 8110e66:	b011      	add	sp, #68	; 0x44
 8110e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110e6c:	6822      	ldr	r2, [r4, #0]
 8110e6e:	b9a7      	cbnz	r7, 8110e9a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 8110e70:	b9aa      	cbnz	r2, 8110e9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x172>
 8110e72:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8110e76:	6021      	str	r1, [r4, #0]
 8110e78:	7122      	strb	r2, [r4, #4]
 8110e7a:	b121      	cbz	r1, 8110e86 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8110e7c:	b11b      	cbz	r3, 8110e86 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8110e7e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8110e82:	07dd      	lsls	r5, r3, #31
 8110e84:	d5ed      	bpl.n	8110e62 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 8110e86:	7963      	ldrb	r3, [r4, #5]
 8110e88:	2b04      	cmp	r3, #4
 8110e8a:	d0ea      	beq.n	8110e62 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 8110e8c:	9b05      	ldr	r3, [sp, #20]
 8110e8e:	3b08      	subs	r3, #8
 8110e90:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8110e94:	9305      	str	r3, [sp, #20]
 8110e96:	4607      	mov	r7, r0
 8110e98:	e796      	b.n	8110dc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 8110e9a:	2a00      	cmp	r2, #0
 8110e9c:	d037      	beq.n	8110f0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 8110e9e:	4291      	cmp	r1, r2
 8110ea0:	d106      	bne.n	8110eb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 8110ea2:	7923      	ldrb	r3, [r4, #4]
 8110ea4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8110ea8:	4313      	orrs	r3, r2
 8110eaa:	7123      	strb	r3, [r4, #4]
 8110eac:	4638      	mov	r0, r7
 8110eae:	e7ea      	b.n	8110e86 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8110eb0:	b909      	cbnz	r1, 8110eb6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
 8110eb2:	2800      	cmp	r0, #0
 8110eb4:	d0fa      	beq.n	8110eac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 8110eb6:	2b03      	cmp	r3, #3
 8110eb8:	79a6      	ldrb	r6, [r4, #6]
 8110eba:	d904      	bls.n	8110ec6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19a>
 8110ebc:	07d9      	lsls	r1, r3, #31
 8110ebe:	d529      	bpl.n	8110f14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e8>
 8110ec0:	68a3      	ldr	r3, [r4, #8]
 8110ec2:	079b      	lsls	r3, r3, #30
 8110ec4:	d526      	bpl.n	8110f14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e8>
 8110ec6:	b97e      	cbnz	r6, 8110ee8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1bc>
 8110ec8:	2d03      	cmp	r5, #3
 8110eca:	d905      	bls.n	8110ed8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 8110ecc:	07ee      	lsls	r6, r5, #31
 8110ece:	d541      	bpl.n	8110f54 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8110ed0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8110ed4:	0798      	lsls	r0, r3, #30
 8110ed6:	d53d      	bpl.n	8110f54 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8110ed8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8110eda:	9300      	str	r3, [sp, #0]
 8110edc:	4641      	mov	r1, r8
 8110ede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8110ee0:	4650      	mov	r0, sl
 8110ee2:	f7ff ff0f 	bl	8110d04 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8110ee6:	4606      	mov	r6, r0
 8110ee8:	b9e5      	cbnz	r5, 8110f24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 8110eea:	2e03      	cmp	r6, #3
 8110eec:	d905      	bls.n	8110efa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ce>
 8110eee:	07f1      	lsls	r1, r6, #31
 8110ef0:	d532      	bpl.n	8110f58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8110ef2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8110ef6:	079a      	lsls	r2, r3, #30
 8110ef8:	d52e      	bpl.n	8110f58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8110efa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8110efc:	9300      	str	r3, [sp, #0]
 8110efe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8110f00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8110f02:	4641      	mov	r1, r8
 8110f04:	4650      	mov	r0, sl
 8110f06:	f7ff fefd 	bl	8110d04 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8110f0a:	4605      	mov	r5, r0
 8110f0c:	e00a      	b.n	8110f24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 8110f0e:	2900      	cmp	r1, #0
 8110f10:	d1d1      	bne.n	8110eb6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
 8110f12:	e7cb      	b.n	8110eac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 8110f14:	2e01      	cmp	r6, #1
 8110f16:	bf38      	it	cc
 8110f18:	2601      	movcc	r6, #1
 8110f1a:	2d01      	cmp	r5, #1
 8110f1c:	bf38      	it	cc
 8110f1e:	2501      	movcc	r5, #1
 8110f20:	b2f6      	uxtb	r6, r6
 8110f22:	b2ed      	uxtb	r5, r5
 8110f24:	ea85 0306 	eor.w	r3, r5, r6
 8110f28:	b2db      	uxtb	r3, r3
 8110f2a:	2b03      	cmp	r3, #3
 8110f2c:	d916      	bls.n	8110f5c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8110f2e:	2d03      	cmp	r5, #3
 8110f30:	bf81      	itttt	hi
 8110f32:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 8110f34:	6023      	strhi	r3, [r4, #0]
 8110f36:	462e      	movhi	r6, r5
 8110f38:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8110f3c:	bf86      	itte	hi
 8110f3e:	7123      	strbhi	r3, [r4, #4]
 8110f40:	2000      	movhi	r0, #0
 8110f42:	4638      	movls	r0, r7
 8110f44:	07b3      	lsls	r3, r6, #30
 8110f46:	71a6      	strb	r6, [r4, #6]
 8110f48:	d402      	bmi.n	8110f50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x224>
 8110f4a:	f016 0601 	ands.w	r6, r6, #1
 8110f4e:	d19a      	bne.n	8110e86 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8110f50:	2000      	movs	r0, #0
 8110f52:	e786      	b.n	8110e62 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 8110f54:	2601      	movs	r6, #1
 8110f56:	e7e5      	b.n	8110f24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 8110f58:	2501      	movs	r5, #1
 8110f5a:	e7e3      	b.n	8110f24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 8110f5c:	4035      	ands	r5, r6
 8110f5e:	b2ed      	uxtb	r5, r5
 8110f60:	2300      	movs	r3, #0
 8110f62:	2d03      	cmp	r5, #3
 8110f64:	6023      	str	r3, [r4, #0]
 8110f66:	d903      	bls.n	8110f70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
 8110f68:	2302      	movs	r3, #2
 8110f6a:	71a3      	strb	r3, [r4, #6]
 8110f6c:	2001      	movs	r0, #1
 8110f6e:	e778      	b.n	8110e62 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 8110f70:	2001      	movs	r0, #1
 8110f72:	71a0      	strb	r0, [r4, #6]
 8110f74:	e787      	b.n	8110e86 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8110f76:	2301      	movs	r3, #1
 8110f78:	9309      	str	r3, [sp, #36]	; 0x24
 8110f7a:	4638      	mov	r0, r7
 8110f7c:	e786      	b.n	8110e8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 8110f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110f80:	2b00      	cmp	r3, #0
 8110f82:	f43f af6f 	beq.w	8110e64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 8110f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110f88:	2b01      	cmp	r3, #1
 8110f8a:	f43f af6b 	beq.w	8110e64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 8110f8e:	2301      	movs	r3, #1
 8110f90:	930a      	str	r3, [sp, #40]	; 0x28
 8110f92:	f8cd b020 	str.w	fp, [sp, #32]
 8110f96:	e712      	b.n	8110dbe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>
=======
0810e0e8 <_ZSt13get_terminatev>:
 810e0e8:	4b02      	ldr	r3, [pc, #8]	; (810e0f4 <_ZSt13get_terminatev+0xc>)
 810e0ea:	6818      	ldr	r0, [r3, #0]
 810e0ec:	f3bf 8f5b 	dmb	ish
 810e0f0:	4770      	bx	lr
 810e0f2:	bf00      	nop
 810e0f4:	10000030 	.word	0x10000030
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08110f98 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8110f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110f9c:	ed2d 8b02 	vpush	{d8}
 8110fa0:	b089      	sub	sp, #36	; 0x24
 8110fa2:	ee08 1a10 	vmov	s16, r1
 8110fa6:	4606      	mov	r6, r0
 8110fa8:	4617      	mov	r7, r2
 8110faa:	461c      	mov	r4, r3
 8110fac:	f7ff fd57 	bl	8110a5e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8110fb0:	4605      	mov	r5, r0
 8110fb2:	2800      	cmp	r0, #0
 8110fb4:	d15f      	bne.n	8111076 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8110fb6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8110fba:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8110fbe:	f019 0f10 	tst.w	r9, #16
 8110fc2:	bf18      	it	ne
 8110fc4:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 8110fc8:	f009 0301 	and.w	r3, r9, #1
 8110fcc:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8110fd0:	9303      	str	r3, [sp, #12]
 8110fd2:	f10d 0b10 	add.w	fp, sp, #16
 8110fd6:	f1ba 0f00 	cmp.w	sl, #0
 8110fda:	d074      	beq.n	81110c6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
 8110fdc:	2300      	movs	r3, #0
 8110fde:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8110fe2:	9304      	str	r3, [sp, #16]
 8110fe4:	f88d 3014 	strb.w	r3, [sp, #20]
 8110fe8:	2300      	movs	r3, #0
 8110fea:	9307      	str	r3, [sp, #28]
 8110fec:	f002 0301 	and.w	r3, r2, #1
 8110ff0:	9301      	str	r3, [sp, #4]
 8110ff2:	f002 0302 	and.w	r3, r2, #2
 8110ff6:	9302      	str	r3, [sp, #8]
 8110ff8:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8110ffc:	430b      	orrs	r3, r1
 8110ffe:	f8cd 9018 	str.w	r9, [sp, #24]
 8111002:	d104      	bne.n	811100e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 8111004:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8111008:	f1a8 0808 	sub.w	r8, r8, #8
 811100c:	e7e3      	b.n	8110fd6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
 811100e:	2f00      	cmp	r7, #0
 8111010:	d037      	beq.n	8111082 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
 8111012:	9b01      	ldr	r3, [sp, #4]
 8111014:	1212      	asrs	r2, r2, #8
 8111016:	b10b      	cbz	r3, 811101c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 8111018:	683b      	ldr	r3, [r7, #0]
 811101a:	589a      	ldr	r2, [r3, r2]
 811101c:	443a      	add	r2, r7
 811101e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8111022:	6803      	ldr	r3, [r0, #0]
 8111024:	ee18 1a10 	vmov	r1, s16
 8111028:	699d      	ldr	r5, [r3, #24]
 811102a:	465b      	mov	r3, fp
 811102c:	47a8      	blx	r5
 811102e:	4605      	mov	r5, r0
 8111030:	2800      	cmp	r0, #0
 8111032:	d0e7      	beq.n	8111004 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8111034:	9b07      	ldr	r3, [sp, #28]
 8111036:	2b08      	cmp	r3, #8
 8111038:	d104      	bne.n	8111044 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 811103a:	9b01      	ldr	r3, [sp, #4]
 811103c:	b113      	cbz	r3, 8111044 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 811103e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8111042:	9307      	str	r3, [sp, #28]
 8111044:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8111048:	2b03      	cmp	r3, #3
 811104a:	d905      	bls.n	8111058 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 811104c:	9a02      	ldr	r2, [sp, #8]
 811104e:	b91a      	cbnz	r2, 8111058 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 8111050:	f023 0302 	bic.w	r3, r3, #2
 8111054:	f88d 3014 	strb.w	r3, [sp, #20]
 8111058:	68e1      	ldr	r1, [r4, #12]
 811105a:	b9d1      	cbnz	r1, 8111092 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
 811105c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8111060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8111064:	7923      	ldrb	r3, [r4, #4]
 8111066:	2b03      	cmp	r3, #3
 8111068:	d905      	bls.n	8111076 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 811106a:	079a      	lsls	r2, r3, #30
 811106c:	d50b      	bpl.n	8111086 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
 811106e:	68b3      	ldr	r3, [r6, #8]
 8111070:	f013 0f01 	tst.w	r3, #1
 8111074:	d1c6      	bne.n	8111004 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8111076:	4628      	mov	r0, r5
 8111078:	b009      	add	sp, #36	; 0x24
 811107a:	ecbd 8b02 	vpop	{d8}
 811107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111082:	463a      	mov	r2, r7
 8111084:	e7cb      	b.n	811101e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 8111086:	07db      	lsls	r3, r3, #31
 8111088:	d5f5      	bpl.n	8111076 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 811108a:	68b3      	ldr	r3, [r6, #8]
 811108c:	f013 0f02 	tst.w	r3, #2
 8111090:	e7f0      	b.n	8111074 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 8111092:	6823      	ldr	r3, [r4, #0]
 8111094:	9a04      	ldr	r2, [sp, #16]
 8111096:	4293      	cmp	r3, r2
 8111098:	d004      	beq.n	81110a4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 811109a:	2300      	movs	r3, #0
 811109c:	6023      	str	r3, [r4, #0]
 811109e:	2302      	movs	r3, #2
 81110a0:	7123      	strb	r3, [r4, #4]
 81110a2:	e7e8      	b.n	8111076 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 81110a4:	b12b      	cbz	r3, 81110b2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
 81110a6:	7923      	ldrb	r3, [r4, #4]
 81110a8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 81110ac:	4313      	orrs	r3, r2
 81110ae:	7123      	strb	r3, [r4, #4]
 81110b0:	e7a8      	b.n	8111004 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 81110b2:	9807      	ldr	r0, [sp, #28]
 81110b4:	2808      	cmp	r0, #8
 81110b6:	d0f2      	beq.n	811109e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 81110b8:	2908      	cmp	r1, #8
 81110ba:	d0f0      	beq.n	811109e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 81110bc:	f7ff fdbc 	bl	8110c38 <_ZNKSt9type_infoeqERKS_>
 81110c0:	2800      	cmp	r0, #0
 81110c2:	d1f0      	bne.n	81110a6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
 81110c4:	e7eb      	b.n	811109e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 81110c6:	7925      	ldrb	r5, [r4, #4]
 81110c8:	3d00      	subs	r5, #0
 81110ca:	bf18      	it	ne
 81110cc:	2501      	movne	r5, #1
 81110ce:	e7d2      	b.n	8111076 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
=======
0810e0f8 <_ZSt9terminatev>:
 810e0f8:	b508      	push	{r3, lr}
 810e0fa:	f7ff fff5 	bl	810e0e8 <_ZSt13get_terminatev>
 810e0fe:	f7ff ffee 	bl	810e0de <_ZN10__cxxabiv111__terminateEPFvvE>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081110d0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 81110d0:	b508      	push	{r3, lr}
 81110d2:	4780      	blx	r0
 81110d4:	f000 f80d 	bl	81110f2 <abort>
=======
0810e102 <abort>:
 810e102:	b508      	push	{r3, lr}
 810e104:	2006      	movs	r0, #6
 810e106:	f000 fccf 	bl	810eaa8 <raise>
 810e10a:	2001      	movs	r0, #1
 810e10c:	f7f3 fe7e 	bl	8101e0c <_exit>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081110d8 <_ZSt13get_terminatev>:
 81110d8:	4b02      	ldr	r3, [pc, #8]	; (81110e4 <_ZSt13get_terminatev+0xc>)
 81110da:	6818      	ldr	r0, [r3, #0]
 81110dc:	f3bf 8f5b 	dmb	ish
 81110e0:	4770      	bx	lr
 81110e2:	bf00      	nop
 81110e4:	1000003c 	.word	0x1000003c
=======
0810e110 <atexit>:
 810e110:	2300      	movs	r3, #0
 810e112:	4601      	mov	r1, r0
 810e114:	461a      	mov	r2, r3
 810e116:	4618      	mov	r0, r3
 810e118:	f000 bdb4 	b.w	810ec84 <__register_exitproc>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081110e8 <_ZSt9terminatev>:
 81110e8:	b508      	push	{r3, lr}
 81110ea:	f7ff fff5 	bl	81110d8 <_ZSt13get_terminatev>
 81110ee:	f7ff ffef 	bl	81110d0 <_ZN10__cxxabiv111__terminateEPFvvE>
=======
0810e11c <atoi>:
 810e11c:	220a      	movs	r2, #10
 810e11e:	2100      	movs	r1, #0
 810e120:	f000 bd7a 	b.w	810ec18 <strtol>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081110f2 <abort>:
 81110f2:	b508      	push	{r3, lr}
 81110f4:	2006      	movs	r0, #6
 81110f6:	f000 fd6d 	bl	8111bd4 <raise>
 81110fa:	2001      	movs	r0, #1
 81110fc:	f7f0 fee0 	bl	8101ec0 <_exit>
=======
0810e124 <__errno>:
 810e124:	4b01      	ldr	r3, [pc, #4]	; (810e12c <__errno+0x8>)
 810e126:	6818      	ldr	r0, [r3, #0]
 810e128:	4770      	bx	lr
 810e12a:	bf00      	nop
 810e12c:	10000034 	.word	0x10000034
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111100 <atexit>:
 8111100:	2300      	movs	r3, #0
 8111102:	4601      	mov	r1, r0
 8111104:	461a      	mov	r2, r3
 8111106:	4618      	mov	r0, r3
 8111108:	f000 bf0e 	b.w	8111f28 <__register_exitproc>
=======
0810e130 <__libc_init_array>:
 810e130:	b570      	push	{r4, r5, r6, lr}
 810e132:	4e0d      	ldr	r6, [pc, #52]	; (810e168 <__libc_init_array+0x38>)
 810e134:	4c0d      	ldr	r4, [pc, #52]	; (810e16c <__libc_init_array+0x3c>)
 810e136:	1ba4      	subs	r4, r4, r6
 810e138:	10a4      	asrs	r4, r4, #2
 810e13a:	2500      	movs	r5, #0
 810e13c:	42a5      	cmp	r5, r4
 810e13e:	d109      	bne.n	810e154 <__libc_init_array+0x24>
 810e140:	4e0b      	ldr	r6, [pc, #44]	; (810e170 <__libc_init_array+0x40>)
 810e142:	4c0c      	ldr	r4, [pc, #48]	; (810e174 <__libc_init_array+0x44>)
 810e144:	f002 f9be 	bl	81104c4 <_init>
 810e148:	1ba4      	subs	r4, r4, r6
 810e14a:	10a4      	asrs	r4, r4, #2
 810e14c:	2500      	movs	r5, #0
 810e14e:	42a5      	cmp	r5, r4
 810e150:	d105      	bne.n	810e15e <__libc_init_array+0x2e>
 810e152:	bd70      	pop	{r4, r5, r6, pc}
 810e154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810e158:	4798      	blx	r3
 810e15a:	3501      	adds	r5, #1
 810e15c:	e7ee      	b.n	810e13c <__libc_init_array+0xc>
 810e15e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810e162:	4798      	blx	r3
 810e164:	3501      	adds	r5, #1
 810e166:	e7f2      	b.n	810e14e <__libc_init_array+0x1e>
 810e168:	081111b8 	.word	0x081111b8
 810e16c:	081111b8 	.word	0x081111b8
 810e170:	081111b8 	.word	0x081111b8
 810e174:	081111c4 	.word	0x081111c4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0811110c <atoi>:
 811110c:	220a      	movs	r2, #10
 811110e:	2100      	movs	r1, #0
 8111110:	f000 be20 	b.w	8111d54 <strtol>
=======
0810e178 <memcpy>:
 810e178:	b510      	push	{r4, lr}
 810e17a:	1e43      	subs	r3, r0, #1
 810e17c:	440a      	add	r2, r1
 810e17e:	4291      	cmp	r1, r2
 810e180:	d100      	bne.n	810e184 <memcpy+0xc>
 810e182:	bd10      	pop	{r4, pc}
 810e184:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e188:	f803 4f01 	strb.w	r4, [r3, #1]!
 810e18c:	e7f7      	b.n	810e17e <memcpy+0x6>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111114 <__errno>:
 8111114:	4b01      	ldr	r3, [pc, #4]	; (811111c <__errno+0x8>)
 8111116:	6818      	ldr	r0, [r3, #0]
 8111118:	4770      	bx	lr
 811111a:	bf00      	nop
 811111c:	10000040 	.word	0x10000040
=======
0810e18e <memset>:
 810e18e:	4402      	add	r2, r0
 810e190:	4603      	mov	r3, r0
 810e192:	4293      	cmp	r3, r2
 810e194:	d100      	bne.n	810e198 <memset+0xa>
 810e196:	4770      	bx	lr
 810e198:	f803 1b01 	strb.w	r1, [r3], #1
 810e19c:	e7f9      	b.n	810e192 <memset+0x4>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111120 <__libc_init_array>:
 8111120:	b570      	push	{r4, r5, r6, lr}
 8111122:	4d0d      	ldr	r5, [pc, #52]	; (8111158 <__libc_init_array+0x38>)
 8111124:	4c0d      	ldr	r4, [pc, #52]	; (811115c <__libc_init_array+0x3c>)
 8111126:	1b64      	subs	r4, r4, r5
 8111128:	10a4      	asrs	r4, r4, #2
 811112a:	2600      	movs	r6, #0
 811112c:	42a6      	cmp	r6, r4
 811112e:	d109      	bne.n	8111144 <__libc_init_array+0x24>
 8111130:	4d0b      	ldr	r5, [pc, #44]	; (8111160 <__libc_init_array+0x40>)
 8111132:	4c0c      	ldr	r4, [pc, #48]	; (8111164 <__libc_init_array+0x44>)
 8111134:	f003 f84e 	bl	81141d4 <_init>
 8111138:	1b64      	subs	r4, r4, r5
 811113a:	10a4      	asrs	r4, r4, #2
 811113c:	2600      	movs	r6, #0
 811113e:	42a6      	cmp	r6, r4
 8111140:	d105      	bne.n	811114e <__libc_init_array+0x2e>
 8111142:	bd70      	pop	{r4, r5, r6, pc}
 8111144:	f855 3b04 	ldr.w	r3, [r5], #4
 8111148:	4798      	blx	r3
 811114a:	3601      	adds	r6, #1
 811114c:	e7ee      	b.n	811112c <__libc_init_array+0xc>
 811114e:	f855 3b04 	ldr.w	r3, [r5], #4
 8111152:	4798      	blx	r3
 8111154:	3601      	adds	r6, #1
 8111156:	e7f2      	b.n	811113e <__libc_init_array+0x1e>
 8111158:	0811538c 	.word	0x0811538c
 811115c:	0811538c 	.word	0x0811538c
 8111160:	0811538c 	.word	0x0811538c
 8111164:	08115398 	.word	0x08115398
=======
0810e19e <__cvt>:
 810e19e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810e1a2:	ec55 4b10 	vmov	r4, r5, d0
 810e1a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810e1a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810e1ac:	2d00      	cmp	r5, #0
 810e1ae:	460e      	mov	r6, r1
 810e1b0:	4691      	mov	r9, r2
 810e1b2:	4619      	mov	r1, r3
 810e1b4:	bfb8      	it	lt
 810e1b6:	4622      	movlt	r2, r4
 810e1b8:	462b      	mov	r3, r5
 810e1ba:	f027 0720 	bic.w	r7, r7, #32
 810e1be:	bfbb      	ittet	lt
 810e1c0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810e1c4:	461d      	movlt	r5, r3
 810e1c6:	2300      	movge	r3, #0
 810e1c8:	232d      	movlt	r3, #45	; 0x2d
 810e1ca:	bfb8      	it	lt
 810e1cc:	4614      	movlt	r4, r2
 810e1ce:	2f46      	cmp	r7, #70	; 0x46
 810e1d0:	700b      	strb	r3, [r1, #0]
 810e1d2:	d004      	beq.n	810e1de <__cvt+0x40>
 810e1d4:	2f45      	cmp	r7, #69	; 0x45
 810e1d6:	d100      	bne.n	810e1da <__cvt+0x3c>
 810e1d8:	3601      	adds	r6, #1
 810e1da:	2102      	movs	r1, #2
 810e1dc:	e000      	b.n	810e1e0 <__cvt+0x42>
 810e1de:	2103      	movs	r1, #3
 810e1e0:	ab03      	add	r3, sp, #12
 810e1e2:	9301      	str	r3, [sp, #4]
 810e1e4:	ab02      	add	r3, sp, #8
 810e1e6:	9300      	str	r3, [sp, #0]
 810e1e8:	4632      	mov	r2, r6
 810e1ea:	4653      	mov	r3, sl
 810e1ec:	ec45 4b10 	vmov	d0, r4, r5
 810e1f0:	f000 fe3a 	bl	810ee68 <_dtoa_r>
 810e1f4:	2f47      	cmp	r7, #71	; 0x47
 810e1f6:	4680      	mov	r8, r0
 810e1f8:	d102      	bne.n	810e200 <__cvt+0x62>
 810e1fa:	f019 0f01 	tst.w	r9, #1
 810e1fe:	d026      	beq.n	810e24e <__cvt+0xb0>
 810e200:	2f46      	cmp	r7, #70	; 0x46
 810e202:	eb08 0906 	add.w	r9, r8, r6
 810e206:	d111      	bne.n	810e22c <__cvt+0x8e>
 810e208:	f898 3000 	ldrb.w	r3, [r8]
 810e20c:	2b30      	cmp	r3, #48	; 0x30
 810e20e:	d10a      	bne.n	810e226 <__cvt+0x88>
 810e210:	2200      	movs	r2, #0
 810e212:	2300      	movs	r3, #0
 810e214:	4620      	mov	r0, r4
 810e216:	4629      	mov	r1, r5
 810e218:	f7f2 fcee 	bl	8100bf8 <__aeabi_dcmpeq>
 810e21c:	b918      	cbnz	r0, 810e226 <__cvt+0x88>
 810e21e:	f1c6 0601 	rsb	r6, r6, #1
 810e222:	f8ca 6000 	str.w	r6, [sl]
 810e226:	f8da 3000 	ldr.w	r3, [sl]
 810e22a:	4499      	add	r9, r3
 810e22c:	2200      	movs	r2, #0
 810e22e:	2300      	movs	r3, #0
 810e230:	4620      	mov	r0, r4
 810e232:	4629      	mov	r1, r5
 810e234:	f7f2 fce0 	bl	8100bf8 <__aeabi_dcmpeq>
 810e238:	b938      	cbnz	r0, 810e24a <__cvt+0xac>
 810e23a:	2230      	movs	r2, #48	; 0x30
 810e23c:	9b03      	ldr	r3, [sp, #12]
 810e23e:	454b      	cmp	r3, r9
 810e240:	d205      	bcs.n	810e24e <__cvt+0xb0>
 810e242:	1c59      	adds	r1, r3, #1
 810e244:	9103      	str	r1, [sp, #12]
 810e246:	701a      	strb	r2, [r3, #0]
 810e248:	e7f8      	b.n	810e23c <__cvt+0x9e>
 810e24a:	f8cd 900c 	str.w	r9, [sp, #12]
 810e24e:	9b03      	ldr	r3, [sp, #12]
 810e250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810e252:	eba3 0308 	sub.w	r3, r3, r8
 810e256:	4640      	mov	r0, r8
 810e258:	6013      	str	r3, [r2, #0]
 810e25a:	b004      	add	sp, #16
 810e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111168 <memcpy>:
 8111168:	440a      	add	r2, r1
 811116a:	4291      	cmp	r1, r2
 811116c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8111170:	d100      	bne.n	8111174 <memcpy+0xc>
 8111172:	4770      	bx	lr
 8111174:	b510      	push	{r4, lr}
 8111176:	f811 4b01 	ldrb.w	r4, [r1], #1
 811117a:	f803 4f01 	strb.w	r4, [r3, #1]!
 811117e:	4291      	cmp	r1, r2
 8111180:	d1f9      	bne.n	8111176 <memcpy+0xe>
 8111182:	bd10      	pop	{r4, pc}
=======
0810e260 <__exponent>:
 810e260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810e262:	2900      	cmp	r1, #0
 810e264:	4604      	mov	r4, r0
 810e266:	bfba      	itte	lt
 810e268:	4249      	neglt	r1, r1
 810e26a:	232d      	movlt	r3, #45	; 0x2d
 810e26c:	232b      	movge	r3, #43	; 0x2b
 810e26e:	2909      	cmp	r1, #9
 810e270:	f804 2b02 	strb.w	r2, [r4], #2
 810e274:	7043      	strb	r3, [r0, #1]
 810e276:	dd20      	ble.n	810e2ba <__exponent+0x5a>
 810e278:	f10d 0307 	add.w	r3, sp, #7
 810e27c:	461f      	mov	r7, r3
 810e27e:	260a      	movs	r6, #10
 810e280:	fb91 f5f6 	sdiv	r5, r1, r6
 810e284:	fb06 1115 	mls	r1, r6, r5, r1
 810e288:	3130      	adds	r1, #48	; 0x30
 810e28a:	2d09      	cmp	r5, #9
 810e28c:	f803 1c01 	strb.w	r1, [r3, #-1]
 810e290:	f103 32ff 	add.w	r2, r3, #4294967295
 810e294:	4629      	mov	r1, r5
 810e296:	dc09      	bgt.n	810e2ac <__exponent+0x4c>
 810e298:	3130      	adds	r1, #48	; 0x30
 810e29a:	3b02      	subs	r3, #2
 810e29c:	f802 1c01 	strb.w	r1, [r2, #-1]
 810e2a0:	42bb      	cmp	r3, r7
 810e2a2:	4622      	mov	r2, r4
 810e2a4:	d304      	bcc.n	810e2b0 <__exponent+0x50>
 810e2a6:	1a10      	subs	r0, r2, r0
 810e2a8:	b003      	add	sp, #12
 810e2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e2ac:	4613      	mov	r3, r2
 810e2ae:	e7e7      	b.n	810e280 <__exponent+0x20>
 810e2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e2b4:	f804 2b01 	strb.w	r2, [r4], #1
 810e2b8:	e7f2      	b.n	810e2a0 <__exponent+0x40>
 810e2ba:	2330      	movs	r3, #48	; 0x30
 810e2bc:	4419      	add	r1, r3
 810e2be:	7083      	strb	r3, [r0, #2]
 810e2c0:	1d02      	adds	r2, r0, #4
 810e2c2:	70c1      	strb	r1, [r0, #3]
 810e2c4:	e7ef      	b.n	810e2a6 <__exponent+0x46>
	...
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111184 <memset>:
 8111184:	4402      	add	r2, r0
 8111186:	4603      	mov	r3, r0
 8111188:	4293      	cmp	r3, r2
 811118a:	d100      	bne.n	811118e <memset+0xa>
 811118c:	4770      	bx	lr
 811118e:	f803 1b01 	strb.w	r1, [r3], #1
 8111192:	e7f9      	b.n	8111188 <memset+0x4>

08111194 <__cvt>:
 8111194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8111198:	ec55 4b10 	vmov	r4, r5, d0
 811119c:	2d00      	cmp	r5, #0
 811119e:	460e      	mov	r6, r1
 81111a0:	4619      	mov	r1, r3
 81111a2:	462b      	mov	r3, r5
 81111a4:	bfbb      	ittet	lt
 81111a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81111aa:	461d      	movlt	r5, r3
 81111ac:	2300      	movge	r3, #0
 81111ae:	232d      	movlt	r3, #45	; 0x2d
 81111b0:	700b      	strb	r3, [r1, #0]
 81111b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81111b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81111b8:	4691      	mov	r9, r2
 81111ba:	f023 0820 	bic.w	r8, r3, #32
 81111be:	bfbc      	itt	lt
 81111c0:	4622      	movlt	r2, r4
 81111c2:	4614      	movlt	r4, r2
 81111c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81111c8:	d005      	beq.n	81111d6 <__cvt+0x42>
 81111ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81111ce:	d100      	bne.n	81111d2 <__cvt+0x3e>
 81111d0:	3601      	adds	r6, #1
 81111d2:	2102      	movs	r1, #2
 81111d4:	e000      	b.n	81111d8 <__cvt+0x44>
 81111d6:	2103      	movs	r1, #3
 81111d8:	ab03      	add	r3, sp, #12
 81111da:	9301      	str	r3, [sp, #4]
 81111dc:	ab02      	add	r3, sp, #8
 81111de:	9300      	str	r3, [sp, #0]
 81111e0:	ec45 4b10 	vmov	d0, r4, r5
 81111e4:	4653      	mov	r3, sl
 81111e6:	4632      	mov	r2, r6
 81111e8:	f000 ff8e 	bl	8112108 <_dtoa_r>
 81111ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 81111f0:	4607      	mov	r7, r0
 81111f2:	d102      	bne.n	81111fa <__cvt+0x66>
 81111f4:	f019 0f01 	tst.w	r9, #1
 81111f8:	d022      	beq.n	8111240 <__cvt+0xac>
 81111fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81111fe:	eb07 0906 	add.w	r9, r7, r6
 8111202:	d110      	bne.n	8111226 <__cvt+0x92>
 8111204:	783b      	ldrb	r3, [r7, #0]
 8111206:	2b30      	cmp	r3, #48	; 0x30
 8111208:	d10a      	bne.n	8111220 <__cvt+0x8c>
 811120a:	2200      	movs	r2, #0
 811120c:	2300      	movs	r3, #0
 811120e:	4620      	mov	r0, r4
 8111210:	4629      	mov	r1, r5
 8111212:	f7ef fcf1 	bl	8100bf8 <__aeabi_dcmpeq>
 8111216:	b918      	cbnz	r0, 8111220 <__cvt+0x8c>
 8111218:	f1c6 0601 	rsb	r6, r6, #1
 811121c:	f8ca 6000 	str.w	r6, [sl]
 8111220:	f8da 3000 	ldr.w	r3, [sl]
 8111224:	4499      	add	r9, r3
 8111226:	2200      	movs	r2, #0
 8111228:	2300      	movs	r3, #0
 811122a:	4620      	mov	r0, r4
 811122c:	4629      	mov	r1, r5
 811122e:	f7ef fce3 	bl	8100bf8 <__aeabi_dcmpeq>
 8111232:	b108      	cbz	r0, 8111238 <__cvt+0xa4>
 8111234:	f8cd 900c 	str.w	r9, [sp, #12]
 8111238:	2230      	movs	r2, #48	; 0x30
 811123a:	9b03      	ldr	r3, [sp, #12]
 811123c:	454b      	cmp	r3, r9
 811123e:	d307      	bcc.n	8111250 <__cvt+0xbc>
 8111240:	9b03      	ldr	r3, [sp, #12]
 8111242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8111244:	1bdb      	subs	r3, r3, r7
 8111246:	4638      	mov	r0, r7
 8111248:	6013      	str	r3, [r2, #0]
 811124a:	b004      	add	sp, #16
 811124c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111250:	1c59      	adds	r1, r3, #1
 8111252:	9103      	str	r1, [sp, #12]
 8111254:	701a      	strb	r2, [r3, #0]
 8111256:	e7f0      	b.n	811123a <__cvt+0xa6>

08111258 <__exponent>:
 8111258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811125a:	4603      	mov	r3, r0
 811125c:	2900      	cmp	r1, #0
 811125e:	bfb8      	it	lt
 8111260:	4249      	neglt	r1, r1
 8111262:	f803 2b02 	strb.w	r2, [r3], #2
 8111266:	bfb4      	ite	lt
 8111268:	222d      	movlt	r2, #45	; 0x2d
 811126a:	222b      	movge	r2, #43	; 0x2b
 811126c:	2909      	cmp	r1, #9
 811126e:	7042      	strb	r2, [r0, #1]
 8111270:	dd2a      	ble.n	81112c8 <__exponent+0x70>
 8111272:	f10d 0407 	add.w	r4, sp, #7
 8111276:	46a4      	mov	ip, r4
 8111278:	270a      	movs	r7, #10
 811127a:	46a6      	mov	lr, r4
 811127c:	460a      	mov	r2, r1
 811127e:	fb91 f6f7 	sdiv	r6, r1, r7
 8111282:	fb07 1516 	mls	r5, r7, r6, r1
 8111286:	3530      	adds	r5, #48	; 0x30
 8111288:	2a63      	cmp	r2, #99	; 0x63
 811128a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 811128e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8111292:	4631      	mov	r1, r6
 8111294:	dcf1      	bgt.n	811127a <__exponent+0x22>
 8111296:	3130      	adds	r1, #48	; 0x30
 8111298:	f1ae 0502 	sub.w	r5, lr, #2
 811129c:	f804 1c01 	strb.w	r1, [r4, #-1]
 81112a0:	1c44      	adds	r4, r0, #1
 81112a2:	4629      	mov	r1, r5
 81112a4:	4561      	cmp	r1, ip
 81112a6:	d30a      	bcc.n	81112be <__exponent+0x66>
 81112a8:	f10d 0209 	add.w	r2, sp, #9
 81112ac:	eba2 020e 	sub.w	r2, r2, lr
 81112b0:	4565      	cmp	r5, ip
 81112b2:	bf88      	it	hi
 81112b4:	2200      	movhi	r2, #0
 81112b6:	4413      	add	r3, r2
 81112b8:	1a18      	subs	r0, r3, r0
 81112ba:	b003      	add	sp, #12
 81112bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81112be:	f811 2b01 	ldrb.w	r2, [r1], #1
 81112c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 81112c6:	e7ed      	b.n	81112a4 <__exponent+0x4c>
 81112c8:	2330      	movs	r3, #48	; 0x30
 81112ca:	3130      	adds	r1, #48	; 0x30
 81112cc:	7083      	strb	r3, [r0, #2]
 81112ce:	70c1      	strb	r1, [r0, #3]
 81112d0:	1d03      	adds	r3, r0, #4
 81112d2:	e7f1      	b.n	81112b8 <__exponent+0x60>
=======
0810e2c8 <_printf_float>:
 810e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e2cc:	b08d      	sub	sp, #52	; 0x34
 810e2ce:	460c      	mov	r4, r1
 810e2d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 810e2d4:	4616      	mov	r6, r2
 810e2d6:	461f      	mov	r7, r3
 810e2d8:	4605      	mov	r5, r0
 810e2da:	f001 fb81 	bl	810f9e0 <_localeconv_r>
 810e2de:	6803      	ldr	r3, [r0, #0]
 810e2e0:	9304      	str	r3, [sp, #16]
 810e2e2:	4618      	mov	r0, r3
 810e2e4:	f7f2 f806 	bl	81002f4 <strlen>
 810e2e8:	2300      	movs	r3, #0
 810e2ea:	930a      	str	r3, [sp, #40]	; 0x28
 810e2ec:	f8d8 3000 	ldr.w	r3, [r8]
 810e2f0:	9005      	str	r0, [sp, #20]
 810e2f2:	3307      	adds	r3, #7
 810e2f4:	f023 0307 	bic.w	r3, r3, #7
 810e2f8:	f103 0208 	add.w	r2, r3, #8
 810e2fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 810e300:	f8d4 b000 	ldr.w	fp, [r4]
 810e304:	f8c8 2000 	str.w	r2, [r8]
 810e308:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e30c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810e310:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810e314:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810e318:	9307      	str	r3, [sp, #28]
 810e31a:	f8cd 8018 	str.w	r8, [sp, #24]
 810e31e:	f04f 32ff 	mov.w	r2, #4294967295
 810e322:	4ba7      	ldr	r3, [pc, #668]	; (810e5c0 <_printf_float+0x2f8>)
 810e324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810e328:	f7f2 fc98 	bl	8100c5c <__aeabi_dcmpun>
 810e32c:	bb70      	cbnz	r0, 810e38c <_printf_float+0xc4>
 810e32e:	f04f 32ff 	mov.w	r2, #4294967295
 810e332:	4ba3      	ldr	r3, [pc, #652]	; (810e5c0 <_printf_float+0x2f8>)
 810e334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810e338:	f7f2 fc72 	bl	8100c20 <__aeabi_dcmple>
 810e33c:	bb30      	cbnz	r0, 810e38c <_printf_float+0xc4>
 810e33e:	2200      	movs	r2, #0
 810e340:	2300      	movs	r3, #0
 810e342:	4640      	mov	r0, r8
 810e344:	4649      	mov	r1, r9
 810e346:	f7f2 fc61 	bl	8100c0c <__aeabi_dcmplt>
 810e34a:	b110      	cbz	r0, 810e352 <_printf_float+0x8a>
 810e34c:	232d      	movs	r3, #45	; 0x2d
 810e34e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810e352:	4a9c      	ldr	r2, [pc, #624]	; (810e5c4 <_printf_float+0x2fc>)
 810e354:	4b9c      	ldr	r3, [pc, #624]	; (810e5c8 <_printf_float+0x300>)
 810e356:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810e35a:	bf8c      	ite	hi
 810e35c:	4690      	movhi	r8, r2
 810e35e:	4698      	movls	r8, r3
 810e360:	2303      	movs	r3, #3
 810e362:	f02b 0204 	bic.w	r2, fp, #4
 810e366:	6123      	str	r3, [r4, #16]
 810e368:	6022      	str	r2, [r4, #0]
 810e36a:	f04f 0900 	mov.w	r9, #0
 810e36e:	9700      	str	r7, [sp, #0]
 810e370:	4633      	mov	r3, r6
 810e372:	aa0b      	add	r2, sp, #44	; 0x2c
 810e374:	4621      	mov	r1, r4
 810e376:	4628      	mov	r0, r5
 810e378:	f000 f9e6 	bl	810e748 <_printf_common>
 810e37c:	3001      	adds	r0, #1
 810e37e:	f040 808d 	bne.w	810e49c <_printf_float+0x1d4>
 810e382:	f04f 30ff 	mov.w	r0, #4294967295
 810e386:	b00d      	add	sp, #52	; 0x34
 810e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e38c:	4642      	mov	r2, r8
 810e38e:	464b      	mov	r3, r9
 810e390:	4640      	mov	r0, r8
 810e392:	4649      	mov	r1, r9
 810e394:	f7f2 fc62 	bl	8100c5c <__aeabi_dcmpun>
 810e398:	b110      	cbz	r0, 810e3a0 <_printf_float+0xd8>
 810e39a:	4a8c      	ldr	r2, [pc, #560]	; (810e5cc <_printf_float+0x304>)
 810e39c:	4b8c      	ldr	r3, [pc, #560]	; (810e5d0 <_printf_float+0x308>)
 810e39e:	e7da      	b.n	810e356 <_printf_float+0x8e>
 810e3a0:	6861      	ldr	r1, [r4, #4]
 810e3a2:	1c4b      	adds	r3, r1, #1
 810e3a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 810e3a8:	a80a      	add	r0, sp, #40	; 0x28
 810e3aa:	d13e      	bne.n	810e42a <_printf_float+0x162>
 810e3ac:	2306      	movs	r3, #6
 810e3ae:	6063      	str	r3, [r4, #4]
 810e3b0:	2300      	movs	r3, #0
 810e3b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810e3b6:	ab09      	add	r3, sp, #36	; 0x24
 810e3b8:	9300      	str	r3, [sp, #0]
 810e3ba:	ec49 8b10 	vmov	d0, r8, r9
 810e3be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810e3c2:	6022      	str	r2, [r4, #0]
 810e3c4:	f8cd a004 	str.w	sl, [sp, #4]
 810e3c8:	6861      	ldr	r1, [r4, #4]
 810e3ca:	4628      	mov	r0, r5
 810e3cc:	f7ff fee7 	bl	810e19e <__cvt>
 810e3d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 810e3d4:	2b47      	cmp	r3, #71	; 0x47
 810e3d6:	4680      	mov	r8, r0
 810e3d8:	d109      	bne.n	810e3ee <_printf_float+0x126>
 810e3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e3dc:	1cd8      	adds	r0, r3, #3
 810e3de:	db02      	blt.n	810e3e6 <_printf_float+0x11e>
 810e3e0:	6862      	ldr	r2, [r4, #4]
 810e3e2:	4293      	cmp	r3, r2
 810e3e4:	dd47      	ble.n	810e476 <_printf_float+0x1ae>
 810e3e6:	f1aa 0a02 	sub.w	sl, sl, #2
 810e3ea:	fa5f fa8a 	uxtb.w	sl, sl
 810e3ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810e3f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 810e3f4:	d824      	bhi.n	810e440 <_printf_float+0x178>
 810e3f6:	3901      	subs	r1, #1
 810e3f8:	4652      	mov	r2, sl
 810e3fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810e3fe:	9109      	str	r1, [sp, #36]	; 0x24
 810e400:	f7ff ff2e 	bl	810e260 <__exponent>
 810e404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810e406:	1813      	adds	r3, r2, r0
 810e408:	2a01      	cmp	r2, #1
 810e40a:	4681      	mov	r9, r0
 810e40c:	6123      	str	r3, [r4, #16]
 810e40e:	dc02      	bgt.n	810e416 <_printf_float+0x14e>
 810e410:	6822      	ldr	r2, [r4, #0]
 810e412:	07d1      	lsls	r1, r2, #31
 810e414:	d501      	bpl.n	810e41a <_printf_float+0x152>
 810e416:	3301      	adds	r3, #1
 810e418:	6123      	str	r3, [r4, #16]
 810e41a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810e41e:	2b00      	cmp	r3, #0
 810e420:	d0a5      	beq.n	810e36e <_printf_float+0xa6>
 810e422:	232d      	movs	r3, #45	; 0x2d
 810e424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810e428:	e7a1      	b.n	810e36e <_printf_float+0xa6>
 810e42a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 810e42e:	f000 8177 	beq.w	810e720 <_printf_float+0x458>
 810e432:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810e436:	d1bb      	bne.n	810e3b0 <_printf_float+0xe8>
 810e438:	2900      	cmp	r1, #0
 810e43a:	d1b9      	bne.n	810e3b0 <_printf_float+0xe8>
 810e43c:	2301      	movs	r3, #1
 810e43e:	e7b6      	b.n	810e3ae <_printf_float+0xe6>
 810e440:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 810e444:	d119      	bne.n	810e47a <_printf_float+0x1b2>
 810e446:	2900      	cmp	r1, #0
 810e448:	6863      	ldr	r3, [r4, #4]
 810e44a:	dd0c      	ble.n	810e466 <_printf_float+0x19e>
 810e44c:	6121      	str	r1, [r4, #16]
 810e44e:	b913      	cbnz	r3, 810e456 <_printf_float+0x18e>
 810e450:	6822      	ldr	r2, [r4, #0]
 810e452:	07d2      	lsls	r2, r2, #31
 810e454:	d502      	bpl.n	810e45c <_printf_float+0x194>
 810e456:	3301      	adds	r3, #1
 810e458:	440b      	add	r3, r1
 810e45a:	6123      	str	r3, [r4, #16]
 810e45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e45e:	65a3      	str	r3, [r4, #88]	; 0x58
 810e460:	f04f 0900 	mov.w	r9, #0
 810e464:	e7d9      	b.n	810e41a <_printf_float+0x152>
 810e466:	b913      	cbnz	r3, 810e46e <_printf_float+0x1a6>
 810e468:	6822      	ldr	r2, [r4, #0]
 810e46a:	07d0      	lsls	r0, r2, #31
 810e46c:	d501      	bpl.n	810e472 <_printf_float+0x1aa>
 810e46e:	3302      	adds	r3, #2
 810e470:	e7f3      	b.n	810e45a <_printf_float+0x192>
 810e472:	2301      	movs	r3, #1
 810e474:	e7f1      	b.n	810e45a <_printf_float+0x192>
 810e476:	f04f 0a67 	mov.w	sl, #103	; 0x67
 810e47a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810e47e:	4293      	cmp	r3, r2
 810e480:	db05      	blt.n	810e48e <_printf_float+0x1c6>
 810e482:	6822      	ldr	r2, [r4, #0]
 810e484:	6123      	str	r3, [r4, #16]
 810e486:	07d1      	lsls	r1, r2, #31
 810e488:	d5e8      	bpl.n	810e45c <_printf_float+0x194>
 810e48a:	3301      	adds	r3, #1
 810e48c:	e7e5      	b.n	810e45a <_printf_float+0x192>
 810e48e:	2b00      	cmp	r3, #0
 810e490:	bfd4      	ite	le
 810e492:	f1c3 0302 	rsble	r3, r3, #2
 810e496:	2301      	movgt	r3, #1
 810e498:	4413      	add	r3, r2
 810e49a:	e7de      	b.n	810e45a <_printf_float+0x192>
 810e49c:	6823      	ldr	r3, [r4, #0]
 810e49e:	055a      	lsls	r2, r3, #21
 810e4a0:	d407      	bmi.n	810e4b2 <_printf_float+0x1ea>
 810e4a2:	6923      	ldr	r3, [r4, #16]
 810e4a4:	4642      	mov	r2, r8
 810e4a6:	4631      	mov	r1, r6
 810e4a8:	4628      	mov	r0, r5
 810e4aa:	47b8      	blx	r7
 810e4ac:	3001      	adds	r0, #1
 810e4ae:	d12b      	bne.n	810e508 <_printf_float+0x240>
 810e4b0:	e767      	b.n	810e382 <_printf_float+0xba>
 810e4b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810e4b6:	f240 80dc 	bls.w	810e672 <_printf_float+0x3aa>
 810e4ba:	2200      	movs	r2, #0
 810e4bc:	2300      	movs	r3, #0
 810e4be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810e4c2:	f7f2 fb99 	bl	8100bf8 <__aeabi_dcmpeq>
 810e4c6:	2800      	cmp	r0, #0
 810e4c8:	d033      	beq.n	810e532 <_printf_float+0x26a>
 810e4ca:	2301      	movs	r3, #1
 810e4cc:	4a41      	ldr	r2, [pc, #260]	; (810e5d4 <_printf_float+0x30c>)
 810e4ce:	4631      	mov	r1, r6
 810e4d0:	4628      	mov	r0, r5
 810e4d2:	47b8      	blx	r7
 810e4d4:	3001      	adds	r0, #1
 810e4d6:	f43f af54 	beq.w	810e382 <_printf_float+0xba>
 810e4da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810e4de:	429a      	cmp	r2, r3
 810e4e0:	db02      	blt.n	810e4e8 <_printf_float+0x220>
 810e4e2:	6823      	ldr	r3, [r4, #0]
 810e4e4:	07d8      	lsls	r0, r3, #31
 810e4e6:	d50f      	bpl.n	810e508 <_printf_float+0x240>
 810e4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e4ec:	4631      	mov	r1, r6
 810e4ee:	4628      	mov	r0, r5
 810e4f0:	47b8      	blx	r7
 810e4f2:	3001      	adds	r0, #1
 810e4f4:	f43f af45 	beq.w	810e382 <_printf_float+0xba>
 810e4f8:	f04f 0800 	mov.w	r8, #0
 810e4fc:	f104 091a 	add.w	r9, r4, #26
 810e500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e502:	3b01      	subs	r3, #1
 810e504:	4543      	cmp	r3, r8
 810e506:	dc09      	bgt.n	810e51c <_printf_float+0x254>
 810e508:	6823      	ldr	r3, [r4, #0]
 810e50a:	079b      	lsls	r3, r3, #30
 810e50c:	f100 8103 	bmi.w	810e716 <_printf_float+0x44e>
 810e510:	68e0      	ldr	r0, [r4, #12]
 810e512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810e514:	4298      	cmp	r0, r3
 810e516:	bfb8      	it	lt
 810e518:	4618      	movlt	r0, r3
 810e51a:	e734      	b.n	810e386 <_printf_float+0xbe>
 810e51c:	2301      	movs	r3, #1
 810e51e:	464a      	mov	r2, r9
 810e520:	4631      	mov	r1, r6
 810e522:	4628      	mov	r0, r5
 810e524:	47b8      	blx	r7
 810e526:	3001      	adds	r0, #1
 810e528:	f43f af2b 	beq.w	810e382 <_printf_float+0xba>
 810e52c:	f108 0801 	add.w	r8, r8, #1
 810e530:	e7e6      	b.n	810e500 <_printf_float+0x238>
 810e532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e534:	2b00      	cmp	r3, #0
 810e536:	dc2b      	bgt.n	810e590 <_printf_float+0x2c8>
 810e538:	2301      	movs	r3, #1
 810e53a:	4a26      	ldr	r2, [pc, #152]	; (810e5d4 <_printf_float+0x30c>)
 810e53c:	4631      	mov	r1, r6
 810e53e:	4628      	mov	r0, r5
 810e540:	47b8      	blx	r7
 810e542:	3001      	adds	r0, #1
 810e544:	f43f af1d 	beq.w	810e382 <_printf_float+0xba>
 810e548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e54a:	b923      	cbnz	r3, 810e556 <_printf_float+0x28e>
 810e54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e54e:	b913      	cbnz	r3, 810e556 <_printf_float+0x28e>
 810e550:	6823      	ldr	r3, [r4, #0]
 810e552:	07d9      	lsls	r1, r3, #31
 810e554:	d5d8      	bpl.n	810e508 <_printf_float+0x240>
 810e556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e55a:	4631      	mov	r1, r6
 810e55c:	4628      	mov	r0, r5
 810e55e:	47b8      	blx	r7
 810e560:	3001      	adds	r0, #1
 810e562:	f43f af0e 	beq.w	810e382 <_printf_float+0xba>
 810e566:	f04f 0900 	mov.w	r9, #0
 810e56a:	f104 0a1a 	add.w	sl, r4, #26
 810e56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e570:	425b      	negs	r3, r3
 810e572:	454b      	cmp	r3, r9
 810e574:	dc01      	bgt.n	810e57a <_printf_float+0x2b2>
 810e576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e578:	e794      	b.n	810e4a4 <_printf_float+0x1dc>
 810e57a:	2301      	movs	r3, #1
 810e57c:	4652      	mov	r2, sl
 810e57e:	4631      	mov	r1, r6
 810e580:	4628      	mov	r0, r5
 810e582:	47b8      	blx	r7
 810e584:	3001      	adds	r0, #1
 810e586:	f43f aefc 	beq.w	810e382 <_printf_float+0xba>
 810e58a:	f109 0901 	add.w	r9, r9, #1
 810e58e:	e7ee      	b.n	810e56e <_printf_float+0x2a6>
 810e590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810e592:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810e594:	429a      	cmp	r2, r3
 810e596:	bfa8      	it	ge
 810e598:	461a      	movge	r2, r3
 810e59a:	2a00      	cmp	r2, #0
 810e59c:	4691      	mov	r9, r2
 810e59e:	dd07      	ble.n	810e5b0 <_printf_float+0x2e8>
 810e5a0:	4613      	mov	r3, r2
 810e5a2:	4631      	mov	r1, r6
 810e5a4:	4642      	mov	r2, r8
 810e5a6:	4628      	mov	r0, r5
 810e5a8:	47b8      	blx	r7
 810e5aa:	3001      	adds	r0, #1
 810e5ac:	f43f aee9 	beq.w	810e382 <_printf_float+0xba>
 810e5b0:	f104 031a 	add.w	r3, r4, #26
 810e5b4:	f04f 0b00 	mov.w	fp, #0
 810e5b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810e5bc:	9306      	str	r3, [sp, #24]
 810e5be:	e015      	b.n	810e5ec <_printf_float+0x324>
 810e5c0:	7fefffff 	.word	0x7fefffff
 810e5c4:	08110ef7 	.word	0x08110ef7
 810e5c8:	08110ef3 	.word	0x08110ef3
 810e5cc:	08110eff 	.word	0x08110eff
 810e5d0:	08110efb 	.word	0x08110efb
 810e5d4:	08110f03 	.word	0x08110f03
 810e5d8:	2301      	movs	r3, #1
 810e5da:	9a06      	ldr	r2, [sp, #24]
 810e5dc:	4631      	mov	r1, r6
 810e5de:	4628      	mov	r0, r5
 810e5e0:	47b8      	blx	r7
 810e5e2:	3001      	adds	r0, #1
 810e5e4:	f43f aecd 	beq.w	810e382 <_printf_float+0xba>
 810e5e8:	f10b 0b01 	add.w	fp, fp, #1
 810e5ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 810e5f0:	ebaa 0309 	sub.w	r3, sl, r9
 810e5f4:	455b      	cmp	r3, fp
 810e5f6:	dcef      	bgt.n	810e5d8 <_printf_float+0x310>
 810e5f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810e5fc:	429a      	cmp	r2, r3
 810e5fe:	44d0      	add	r8, sl
 810e600:	db15      	blt.n	810e62e <_printf_float+0x366>
 810e602:	6823      	ldr	r3, [r4, #0]
 810e604:	07da      	lsls	r2, r3, #31
 810e606:	d412      	bmi.n	810e62e <_printf_float+0x366>
 810e608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e60a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810e60c:	eba3 020a 	sub.w	r2, r3, sl
 810e610:	eba3 0a01 	sub.w	sl, r3, r1
 810e614:	4592      	cmp	sl, r2
 810e616:	bfa8      	it	ge
 810e618:	4692      	movge	sl, r2
 810e61a:	f1ba 0f00 	cmp.w	sl, #0
 810e61e:	dc0e      	bgt.n	810e63e <_printf_float+0x376>
 810e620:	f04f 0800 	mov.w	r8, #0
 810e624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810e628:	f104 091a 	add.w	r9, r4, #26
 810e62c:	e019      	b.n	810e662 <_printf_float+0x39a>
 810e62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e632:	4631      	mov	r1, r6
 810e634:	4628      	mov	r0, r5
 810e636:	47b8      	blx	r7
 810e638:	3001      	adds	r0, #1
 810e63a:	d1e5      	bne.n	810e608 <_printf_float+0x340>
 810e63c:	e6a1      	b.n	810e382 <_printf_float+0xba>
 810e63e:	4653      	mov	r3, sl
 810e640:	4642      	mov	r2, r8
 810e642:	4631      	mov	r1, r6
 810e644:	4628      	mov	r0, r5
 810e646:	47b8      	blx	r7
 810e648:	3001      	adds	r0, #1
 810e64a:	d1e9      	bne.n	810e620 <_printf_float+0x358>
 810e64c:	e699      	b.n	810e382 <_printf_float+0xba>
 810e64e:	2301      	movs	r3, #1
 810e650:	464a      	mov	r2, r9
 810e652:	4631      	mov	r1, r6
 810e654:	4628      	mov	r0, r5
 810e656:	47b8      	blx	r7
 810e658:	3001      	adds	r0, #1
 810e65a:	f43f ae92 	beq.w	810e382 <_printf_float+0xba>
 810e65e:	f108 0801 	add.w	r8, r8, #1
 810e662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810e666:	1a9b      	subs	r3, r3, r2
 810e668:	eba3 030a 	sub.w	r3, r3, sl
 810e66c:	4543      	cmp	r3, r8
 810e66e:	dcee      	bgt.n	810e64e <_printf_float+0x386>
 810e670:	e74a      	b.n	810e508 <_printf_float+0x240>
 810e672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810e674:	2a01      	cmp	r2, #1
 810e676:	dc01      	bgt.n	810e67c <_printf_float+0x3b4>
 810e678:	07db      	lsls	r3, r3, #31
 810e67a:	d53a      	bpl.n	810e6f2 <_printf_float+0x42a>
 810e67c:	2301      	movs	r3, #1
 810e67e:	4642      	mov	r2, r8
 810e680:	4631      	mov	r1, r6
 810e682:	4628      	mov	r0, r5
 810e684:	47b8      	blx	r7
 810e686:	3001      	adds	r0, #1
 810e688:	f43f ae7b 	beq.w	810e382 <_printf_float+0xba>
 810e68c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e690:	4631      	mov	r1, r6
 810e692:	4628      	mov	r0, r5
 810e694:	47b8      	blx	r7
 810e696:	3001      	adds	r0, #1
 810e698:	f108 0801 	add.w	r8, r8, #1
 810e69c:	f43f ae71 	beq.w	810e382 <_printf_float+0xba>
 810e6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e6a2:	2200      	movs	r2, #0
 810e6a4:	f103 3aff 	add.w	sl, r3, #4294967295
 810e6a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810e6ac:	2300      	movs	r3, #0
 810e6ae:	f7f2 faa3 	bl	8100bf8 <__aeabi_dcmpeq>
 810e6b2:	b9c8      	cbnz	r0, 810e6e8 <_printf_float+0x420>
 810e6b4:	4653      	mov	r3, sl
 810e6b6:	4642      	mov	r2, r8
 810e6b8:	4631      	mov	r1, r6
 810e6ba:	4628      	mov	r0, r5
 810e6bc:	47b8      	blx	r7
 810e6be:	3001      	adds	r0, #1
 810e6c0:	d10e      	bne.n	810e6e0 <_printf_float+0x418>
 810e6c2:	e65e      	b.n	810e382 <_printf_float+0xba>
 810e6c4:	2301      	movs	r3, #1
 810e6c6:	4652      	mov	r2, sl
 810e6c8:	4631      	mov	r1, r6
 810e6ca:	4628      	mov	r0, r5
 810e6cc:	47b8      	blx	r7
 810e6ce:	3001      	adds	r0, #1
 810e6d0:	f43f ae57 	beq.w	810e382 <_printf_float+0xba>
 810e6d4:	f108 0801 	add.w	r8, r8, #1
 810e6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e6da:	3b01      	subs	r3, #1
 810e6dc:	4543      	cmp	r3, r8
 810e6de:	dcf1      	bgt.n	810e6c4 <_printf_float+0x3fc>
 810e6e0:	464b      	mov	r3, r9
 810e6e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810e6e6:	e6de      	b.n	810e4a6 <_printf_float+0x1de>
 810e6e8:	f04f 0800 	mov.w	r8, #0
 810e6ec:	f104 0a1a 	add.w	sl, r4, #26
 810e6f0:	e7f2      	b.n	810e6d8 <_printf_float+0x410>
 810e6f2:	2301      	movs	r3, #1
 810e6f4:	e7df      	b.n	810e6b6 <_printf_float+0x3ee>
 810e6f6:	2301      	movs	r3, #1
 810e6f8:	464a      	mov	r2, r9
 810e6fa:	4631      	mov	r1, r6
 810e6fc:	4628      	mov	r0, r5
 810e6fe:	47b8      	blx	r7
 810e700:	3001      	adds	r0, #1
 810e702:	f43f ae3e 	beq.w	810e382 <_printf_float+0xba>
 810e706:	f108 0801 	add.w	r8, r8, #1
 810e70a:	68e3      	ldr	r3, [r4, #12]
 810e70c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810e70e:	1a9b      	subs	r3, r3, r2
 810e710:	4543      	cmp	r3, r8
 810e712:	dcf0      	bgt.n	810e6f6 <_printf_float+0x42e>
 810e714:	e6fc      	b.n	810e510 <_printf_float+0x248>
 810e716:	f04f 0800 	mov.w	r8, #0
 810e71a:	f104 0919 	add.w	r9, r4, #25
 810e71e:	e7f4      	b.n	810e70a <_printf_float+0x442>
 810e720:	2900      	cmp	r1, #0
 810e722:	f43f ae8b 	beq.w	810e43c <_printf_float+0x174>
 810e726:	2300      	movs	r3, #0
 810e728:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810e72c:	ab09      	add	r3, sp, #36	; 0x24
 810e72e:	9300      	str	r3, [sp, #0]
 810e730:	ec49 8b10 	vmov	d0, r8, r9
 810e734:	6022      	str	r2, [r4, #0]
 810e736:	f8cd a004 	str.w	sl, [sp, #4]
 810e73a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810e73e:	4628      	mov	r0, r5
 810e740:	f7ff fd2d 	bl	810e19e <__cvt>
 810e744:	4680      	mov	r8, r0
 810e746:	e648      	b.n	810e3da <_printf_float+0x112>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081112d4 <_printf_float>:
 81112d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81112d8:	ed2d 8b02 	vpush	{d8}
 81112dc:	b08d      	sub	sp, #52	; 0x34
 81112de:	460c      	mov	r4, r1
 81112e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81112e4:	4616      	mov	r6, r2
 81112e6:	461f      	mov	r7, r3
 81112e8:	4605      	mov	r5, r0
 81112ea:	f001 feb1 	bl	8113050 <_localeconv_r>
 81112ee:	f8d0 a000 	ldr.w	sl, [r0]
 81112f2:	4650      	mov	r0, sl
 81112f4:	f7ee fffe 	bl	81002f4 <strlen>
 81112f8:	2300      	movs	r3, #0
 81112fa:	930a      	str	r3, [sp, #40]	; 0x28
 81112fc:	6823      	ldr	r3, [r4, #0]
 81112fe:	9305      	str	r3, [sp, #20]
 8111300:	f8d8 3000 	ldr.w	r3, [r8]
 8111304:	f894 b018 	ldrb.w	fp, [r4, #24]
 8111308:	3307      	adds	r3, #7
 811130a:	f023 0307 	bic.w	r3, r3, #7
 811130e:	f103 0208 	add.w	r2, r3, #8
 8111312:	f8c8 2000 	str.w	r2, [r8]
 8111316:	e9d3 2300 	ldrd	r2, r3, [r3]
 811131a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 811131e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8111322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8111326:	9307      	str	r3, [sp, #28]
 8111328:	f8cd 8018 	str.w	r8, [sp, #24]
 811132c:	ee08 0a10 	vmov	s16, r0
 8111330:	4b9f      	ldr	r3, [pc, #636]	; (81115b0 <_printf_float+0x2dc>)
 8111332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8111336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 811133a:	f7ef fc8f 	bl	8100c5c <__aeabi_dcmpun>
 811133e:	bb88      	cbnz	r0, 81113a4 <_printf_float+0xd0>
 8111340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8111344:	4b9a      	ldr	r3, [pc, #616]	; (81115b0 <_printf_float+0x2dc>)
 8111346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 811134a:	f7ef fc69 	bl	8100c20 <__aeabi_dcmple>
 811134e:	bb48      	cbnz	r0, 81113a4 <_printf_float+0xd0>
 8111350:	2200      	movs	r2, #0
 8111352:	2300      	movs	r3, #0
 8111354:	4640      	mov	r0, r8
 8111356:	4649      	mov	r1, r9
 8111358:	f7ef fc58 	bl	8100c0c <__aeabi_dcmplt>
 811135c:	b110      	cbz	r0, 8111364 <_printf_float+0x90>
 811135e:	232d      	movs	r3, #45	; 0x2d
 8111360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8111364:	4b93      	ldr	r3, [pc, #588]	; (81115b4 <_printf_float+0x2e0>)
 8111366:	4894      	ldr	r0, [pc, #592]	; (81115b8 <_printf_float+0x2e4>)
 8111368:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 811136c:	bf94      	ite	ls
 811136e:	4698      	movls	r8, r3
 8111370:	4680      	movhi	r8, r0
 8111372:	2303      	movs	r3, #3
 8111374:	6123      	str	r3, [r4, #16]
 8111376:	9b05      	ldr	r3, [sp, #20]
 8111378:	f023 0204 	bic.w	r2, r3, #4
 811137c:	6022      	str	r2, [r4, #0]
 811137e:	f04f 0900 	mov.w	r9, #0
 8111382:	9700      	str	r7, [sp, #0]
 8111384:	4633      	mov	r3, r6
 8111386:	aa0b      	add	r2, sp, #44	; 0x2c
 8111388:	4621      	mov	r1, r4
 811138a:	4628      	mov	r0, r5
 811138c:	f000 f9d8 	bl	8111740 <_printf_common>
 8111390:	3001      	adds	r0, #1
 8111392:	f040 8090 	bne.w	81114b6 <_printf_float+0x1e2>
 8111396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 811139a:	b00d      	add	sp, #52	; 0x34
 811139c:	ecbd 8b02 	vpop	{d8}
 81113a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81113a4:	4642      	mov	r2, r8
 81113a6:	464b      	mov	r3, r9
 81113a8:	4640      	mov	r0, r8
 81113aa:	4649      	mov	r1, r9
 81113ac:	f7ef fc56 	bl	8100c5c <__aeabi_dcmpun>
 81113b0:	b140      	cbz	r0, 81113c4 <_printf_float+0xf0>
 81113b2:	464b      	mov	r3, r9
 81113b4:	2b00      	cmp	r3, #0
 81113b6:	bfbc      	itt	lt
 81113b8:	232d      	movlt	r3, #45	; 0x2d
 81113ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81113be:	487f      	ldr	r0, [pc, #508]	; (81115bc <_printf_float+0x2e8>)
 81113c0:	4b7f      	ldr	r3, [pc, #508]	; (81115c0 <_printf_float+0x2ec>)
 81113c2:	e7d1      	b.n	8111368 <_printf_float+0x94>
 81113c4:	6863      	ldr	r3, [r4, #4]
 81113c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81113ca:	9206      	str	r2, [sp, #24]
 81113cc:	1c5a      	adds	r2, r3, #1
 81113ce:	d13f      	bne.n	8111450 <_printf_float+0x17c>
 81113d0:	2306      	movs	r3, #6
 81113d2:	6063      	str	r3, [r4, #4]
 81113d4:	9b05      	ldr	r3, [sp, #20]
 81113d6:	6861      	ldr	r1, [r4, #4]
 81113d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81113dc:	2300      	movs	r3, #0
 81113de:	9303      	str	r3, [sp, #12]
 81113e0:	ab0a      	add	r3, sp, #40	; 0x28
 81113e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 81113e6:	ab09      	add	r3, sp, #36	; 0x24
 81113e8:	ec49 8b10 	vmov	d0, r8, r9
 81113ec:	9300      	str	r3, [sp, #0]
 81113ee:	6022      	str	r2, [r4, #0]
 81113f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81113f4:	4628      	mov	r0, r5
 81113f6:	f7ff fecd 	bl	8111194 <__cvt>
 81113fa:	9b06      	ldr	r3, [sp, #24]
 81113fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 81113fe:	2b47      	cmp	r3, #71	; 0x47
 8111400:	4680      	mov	r8, r0
 8111402:	d108      	bne.n	8111416 <_printf_float+0x142>
 8111404:	1cc8      	adds	r0, r1, #3
 8111406:	db02      	blt.n	811140e <_printf_float+0x13a>
 8111408:	6863      	ldr	r3, [r4, #4]
 811140a:	4299      	cmp	r1, r3
 811140c:	dd41      	ble.n	8111492 <_printf_float+0x1be>
 811140e:	f1ab 0b02 	sub.w	fp, fp, #2
 8111412:	fa5f fb8b 	uxtb.w	fp, fp
 8111416:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 811141a:	d820      	bhi.n	811145e <_printf_float+0x18a>
 811141c:	3901      	subs	r1, #1
 811141e:	465a      	mov	r2, fp
 8111420:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8111424:	9109      	str	r1, [sp, #36]	; 0x24
 8111426:	f7ff ff17 	bl	8111258 <__exponent>
 811142a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 811142c:	1813      	adds	r3, r2, r0
 811142e:	2a01      	cmp	r2, #1
 8111430:	4681      	mov	r9, r0
 8111432:	6123      	str	r3, [r4, #16]
 8111434:	dc02      	bgt.n	811143c <_printf_float+0x168>
 8111436:	6822      	ldr	r2, [r4, #0]
 8111438:	07d2      	lsls	r2, r2, #31
 811143a:	d501      	bpl.n	8111440 <_printf_float+0x16c>
 811143c:	3301      	adds	r3, #1
 811143e:	6123      	str	r3, [r4, #16]
 8111440:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8111444:	2b00      	cmp	r3, #0
 8111446:	d09c      	beq.n	8111382 <_printf_float+0xae>
 8111448:	232d      	movs	r3, #45	; 0x2d
 811144a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 811144e:	e798      	b.n	8111382 <_printf_float+0xae>
 8111450:	9a06      	ldr	r2, [sp, #24]
 8111452:	2a47      	cmp	r2, #71	; 0x47
 8111454:	d1be      	bne.n	81113d4 <_printf_float+0x100>
 8111456:	2b00      	cmp	r3, #0
 8111458:	d1bc      	bne.n	81113d4 <_printf_float+0x100>
 811145a:	2301      	movs	r3, #1
 811145c:	e7b9      	b.n	81113d2 <_printf_float+0xfe>
 811145e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8111462:	d118      	bne.n	8111496 <_printf_float+0x1c2>
 8111464:	2900      	cmp	r1, #0
 8111466:	6863      	ldr	r3, [r4, #4]
 8111468:	dd0b      	ble.n	8111482 <_printf_float+0x1ae>
 811146a:	6121      	str	r1, [r4, #16]
 811146c:	b913      	cbnz	r3, 8111474 <_printf_float+0x1a0>
 811146e:	6822      	ldr	r2, [r4, #0]
 8111470:	07d0      	lsls	r0, r2, #31
 8111472:	d502      	bpl.n	811147a <_printf_float+0x1a6>
 8111474:	3301      	adds	r3, #1
 8111476:	440b      	add	r3, r1
 8111478:	6123      	str	r3, [r4, #16]
 811147a:	65a1      	str	r1, [r4, #88]	; 0x58
 811147c:	f04f 0900 	mov.w	r9, #0
 8111480:	e7de      	b.n	8111440 <_printf_float+0x16c>
 8111482:	b913      	cbnz	r3, 811148a <_printf_float+0x1b6>
 8111484:	6822      	ldr	r2, [r4, #0]
 8111486:	07d2      	lsls	r2, r2, #31
 8111488:	d501      	bpl.n	811148e <_printf_float+0x1ba>
 811148a:	3302      	adds	r3, #2
 811148c:	e7f4      	b.n	8111478 <_printf_float+0x1a4>
 811148e:	2301      	movs	r3, #1
 8111490:	e7f2      	b.n	8111478 <_printf_float+0x1a4>
 8111492:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8111496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8111498:	4299      	cmp	r1, r3
 811149a:	db05      	blt.n	81114a8 <_printf_float+0x1d4>
 811149c:	6823      	ldr	r3, [r4, #0]
 811149e:	6121      	str	r1, [r4, #16]
 81114a0:	07d8      	lsls	r0, r3, #31
 81114a2:	d5ea      	bpl.n	811147a <_printf_float+0x1a6>
 81114a4:	1c4b      	adds	r3, r1, #1
 81114a6:	e7e7      	b.n	8111478 <_printf_float+0x1a4>
 81114a8:	2900      	cmp	r1, #0
 81114aa:	bfd4      	ite	le
 81114ac:	f1c1 0202 	rsble	r2, r1, #2
 81114b0:	2201      	movgt	r2, #1
 81114b2:	4413      	add	r3, r2
 81114b4:	e7e0      	b.n	8111478 <_printf_float+0x1a4>
 81114b6:	6823      	ldr	r3, [r4, #0]
 81114b8:	055a      	lsls	r2, r3, #21
 81114ba:	d407      	bmi.n	81114cc <_printf_float+0x1f8>
 81114bc:	6923      	ldr	r3, [r4, #16]
 81114be:	4642      	mov	r2, r8
 81114c0:	4631      	mov	r1, r6
 81114c2:	4628      	mov	r0, r5
 81114c4:	47b8      	blx	r7
 81114c6:	3001      	adds	r0, #1
 81114c8:	d12c      	bne.n	8111524 <_printf_float+0x250>
 81114ca:	e764      	b.n	8111396 <_printf_float+0xc2>
 81114cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81114d0:	f240 80e0 	bls.w	8111694 <_printf_float+0x3c0>
 81114d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81114d8:	2200      	movs	r2, #0
 81114da:	2300      	movs	r3, #0
 81114dc:	f7ef fb8c 	bl	8100bf8 <__aeabi_dcmpeq>
 81114e0:	2800      	cmp	r0, #0
 81114e2:	d034      	beq.n	811154e <_printf_float+0x27a>
 81114e4:	4a37      	ldr	r2, [pc, #220]	; (81115c4 <_printf_float+0x2f0>)
 81114e6:	2301      	movs	r3, #1
 81114e8:	4631      	mov	r1, r6
 81114ea:	4628      	mov	r0, r5
 81114ec:	47b8      	blx	r7
 81114ee:	3001      	adds	r0, #1
 81114f0:	f43f af51 	beq.w	8111396 <_printf_float+0xc2>
 81114f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81114f8:	429a      	cmp	r2, r3
 81114fa:	db02      	blt.n	8111502 <_printf_float+0x22e>
 81114fc:	6823      	ldr	r3, [r4, #0]
 81114fe:	07d8      	lsls	r0, r3, #31
 8111500:	d510      	bpl.n	8111524 <_printf_float+0x250>
 8111502:	ee18 3a10 	vmov	r3, s16
 8111506:	4652      	mov	r2, sl
 8111508:	4631      	mov	r1, r6
 811150a:	4628      	mov	r0, r5
 811150c:	47b8      	blx	r7
 811150e:	3001      	adds	r0, #1
 8111510:	f43f af41 	beq.w	8111396 <_printf_float+0xc2>
 8111514:	f04f 0800 	mov.w	r8, #0
 8111518:	f104 091a 	add.w	r9, r4, #26
 811151c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811151e:	3b01      	subs	r3, #1
 8111520:	4543      	cmp	r3, r8
 8111522:	dc09      	bgt.n	8111538 <_printf_float+0x264>
 8111524:	6823      	ldr	r3, [r4, #0]
 8111526:	079b      	lsls	r3, r3, #30
 8111528:	f100 8105 	bmi.w	8111736 <_printf_float+0x462>
 811152c:	68e0      	ldr	r0, [r4, #12]
 811152e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8111530:	4298      	cmp	r0, r3
 8111532:	bfb8      	it	lt
 8111534:	4618      	movlt	r0, r3
 8111536:	e730      	b.n	811139a <_printf_float+0xc6>
 8111538:	2301      	movs	r3, #1
 811153a:	464a      	mov	r2, r9
 811153c:	4631      	mov	r1, r6
 811153e:	4628      	mov	r0, r5
 8111540:	47b8      	blx	r7
 8111542:	3001      	adds	r0, #1
 8111544:	f43f af27 	beq.w	8111396 <_printf_float+0xc2>
 8111548:	f108 0801 	add.w	r8, r8, #1
 811154c:	e7e6      	b.n	811151c <_printf_float+0x248>
 811154e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111550:	2b00      	cmp	r3, #0
 8111552:	dc39      	bgt.n	81115c8 <_printf_float+0x2f4>
 8111554:	4a1b      	ldr	r2, [pc, #108]	; (81115c4 <_printf_float+0x2f0>)
 8111556:	2301      	movs	r3, #1
 8111558:	4631      	mov	r1, r6
 811155a:	4628      	mov	r0, r5
 811155c:	47b8      	blx	r7
 811155e:	3001      	adds	r0, #1
 8111560:	f43f af19 	beq.w	8111396 <_printf_float+0xc2>
 8111564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8111568:	4313      	orrs	r3, r2
 811156a:	d102      	bne.n	8111572 <_printf_float+0x29e>
 811156c:	6823      	ldr	r3, [r4, #0]
 811156e:	07d9      	lsls	r1, r3, #31
 8111570:	d5d8      	bpl.n	8111524 <_printf_float+0x250>
 8111572:	ee18 3a10 	vmov	r3, s16
 8111576:	4652      	mov	r2, sl
 8111578:	4631      	mov	r1, r6
 811157a:	4628      	mov	r0, r5
 811157c:	47b8      	blx	r7
 811157e:	3001      	adds	r0, #1
 8111580:	f43f af09 	beq.w	8111396 <_printf_float+0xc2>
 8111584:	f04f 0900 	mov.w	r9, #0
 8111588:	f104 0a1a 	add.w	sl, r4, #26
 811158c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811158e:	425b      	negs	r3, r3
 8111590:	454b      	cmp	r3, r9
 8111592:	dc01      	bgt.n	8111598 <_printf_float+0x2c4>
 8111594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8111596:	e792      	b.n	81114be <_printf_float+0x1ea>
 8111598:	2301      	movs	r3, #1
 811159a:	4652      	mov	r2, sl
 811159c:	4631      	mov	r1, r6
 811159e:	4628      	mov	r0, r5
 81115a0:	47b8      	blx	r7
 81115a2:	3001      	adds	r0, #1
 81115a4:	f43f aef7 	beq.w	8111396 <_printf_float+0xc2>
 81115a8:	f109 0901 	add.w	r9, r9, #1
 81115ac:	e7ee      	b.n	811158c <_printf_float+0x2b8>
 81115ae:	bf00      	nop
 81115b0:	7fefffff 	.word	0x7fefffff
 81115b4:	08114fa0 	.word	0x08114fa0
 81115b8:	08114fa4 	.word	0x08114fa4
 81115bc:	08114fac 	.word	0x08114fac
 81115c0:	08114fa8 	.word	0x08114fa8
 81115c4:	08114fb0 	.word	0x08114fb0
 81115c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81115ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81115cc:	429a      	cmp	r2, r3
 81115ce:	bfa8      	it	ge
 81115d0:	461a      	movge	r2, r3
 81115d2:	2a00      	cmp	r2, #0
 81115d4:	4691      	mov	r9, r2
 81115d6:	dc37      	bgt.n	8111648 <_printf_float+0x374>
 81115d8:	f04f 0b00 	mov.w	fp, #0
 81115dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81115e0:	f104 021a 	add.w	r2, r4, #26
 81115e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81115e6:	9305      	str	r3, [sp, #20]
 81115e8:	eba3 0309 	sub.w	r3, r3, r9
 81115ec:	455b      	cmp	r3, fp
 81115ee:	dc33      	bgt.n	8111658 <_printf_float+0x384>
 81115f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81115f4:	429a      	cmp	r2, r3
 81115f6:	db3b      	blt.n	8111670 <_printf_float+0x39c>
 81115f8:	6823      	ldr	r3, [r4, #0]
 81115fa:	07da      	lsls	r2, r3, #31
 81115fc:	d438      	bmi.n	8111670 <_printf_float+0x39c>
 81115fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8111600:	9b05      	ldr	r3, [sp, #20]
 8111602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8111604:	1ad3      	subs	r3, r2, r3
 8111606:	eba2 0901 	sub.w	r9, r2, r1
 811160a:	4599      	cmp	r9, r3
 811160c:	bfa8      	it	ge
 811160e:	4699      	movge	r9, r3
 8111610:	f1b9 0f00 	cmp.w	r9, #0
 8111614:	dc35      	bgt.n	8111682 <_printf_float+0x3ae>
 8111616:	f04f 0800 	mov.w	r8, #0
 811161a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 811161e:	f104 0a1a 	add.w	sl, r4, #26
 8111622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8111626:	1a9b      	subs	r3, r3, r2
 8111628:	eba3 0309 	sub.w	r3, r3, r9
 811162c:	4543      	cmp	r3, r8
 811162e:	f77f af79 	ble.w	8111524 <_printf_float+0x250>
 8111632:	2301      	movs	r3, #1
 8111634:	4652      	mov	r2, sl
 8111636:	4631      	mov	r1, r6
 8111638:	4628      	mov	r0, r5
 811163a:	47b8      	blx	r7
 811163c:	3001      	adds	r0, #1
 811163e:	f43f aeaa 	beq.w	8111396 <_printf_float+0xc2>
 8111642:	f108 0801 	add.w	r8, r8, #1
 8111646:	e7ec      	b.n	8111622 <_printf_float+0x34e>
 8111648:	4613      	mov	r3, r2
 811164a:	4631      	mov	r1, r6
 811164c:	4642      	mov	r2, r8
 811164e:	4628      	mov	r0, r5
 8111650:	47b8      	blx	r7
 8111652:	3001      	adds	r0, #1
 8111654:	d1c0      	bne.n	81115d8 <_printf_float+0x304>
 8111656:	e69e      	b.n	8111396 <_printf_float+0xc2>
 8111658:	2301      	movs	r3, #1
 811165a:	4631      	mov	r1, r6
 811165c:	4628      	mov	r0, r5
 811165e:	9205      	str	r2, [sp, #20]
 8111660:	47b8      	blx	r7
 8111662:	3001      	adds	r0, #1
 8111664:	f43f ae97 	beq.w	8111396 <_printf_float+0xc2>
 8111668:	9a05      	ldr	r2, [sp, #20]
 811166a:	f10b 0b01 	add.w	fp, fp, #1
 811166e:	e7b9      	b.n	81115e4 <_printf_float+0x310>
 8111670:	ee18 3a10 	vmov	r3, s16
 8111674:	4652      	mov	r2, sl
 8111676:	4631      	mov	r1, r6
 8111678:	4628      	mov	r0, r5
 811167a:	47b8      	blx	r7
 811167c:	3001      	adds	r0, #1
 811167e:	d1be      	bne.n	81115fe <_printf_float+0x32a>
 8111680:	e689      	b.n	8111396 <_printf_float+0xc2>
 8111682:	9a05      	ldr	r2, [sp, #20]
 8111684:	464b      	mov	r3, r9
 8111686:	4442      	add	r2, r8
 8111688:	4631      	mov	r1, r6
 811168a:	4628      	mov	r0, r5
 811168c:	47b8      	blx	r7
 811168e:	3001      	adds	r0, #1
 8111690:	d1c1      	bne.n	8111616 <_printf_float+0x342>
 8111692:	e680      	b.n	8111396 <_printf_float+0xc2>
 8111694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8111696:	2a01      	cmp	r2, #1
 8111698:	dc01      	bgt.n	811169e <_printf_float+0x3ca>
 811169a:	07db      	lsls	r3, r3, #31
 811169c:	d538      	bpl.n	8111710 <_printf_float+0x43c>
 811169e:	2301      	movs	r3, #1
 81116a0:	4642      	mov	r2, r8
 81116a2:	4631      	mov	r1, r6
 81116a4:	4628      	mov	r0, r5
 81116a6:	47b8      	blx	r7
 81116a8:	3001      	adds	r0, #1
 81116aa:	f43f ae74 	beq.w	8111396 <_printf_float+0xc2>
 81116ae:	ee18 3a10 	vmov	r3, s16
 81116b2:	4652      	mov	r2, sl
 81116b4:	4631      	mov	r1, r6
 81116b6:	4628      	mov	r0, r5
 81116b8:	47b8      	blx	r7
 81116ba:	3001      	adds	r0, #1
 81116bc:	f43f ae6b 	beq.w	8111396 <_printf_float+0xc2>
 81116c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81116c4:	2200      	movs	r2, #0
 81116c6:	2300      	movs	r3, #0
 81116c8:	f7ef fa96 	bl	8100bf8 <__aeabi_dcmpeq>
 81116cc:	b9d8      	cbnz	r0, 8111706 <_printf_float+0x432>
 81116ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81116d0:	f108 0201 	add.w	r2, r8, #1
 81116d4:	3b01      	subs	r3, #1
 81116d6:	4631      	mov	r1, r6
 81116d8:	4628      	mov	r0, r5
 81116da:	47b8      	blx	r7
 81116dc:	3001      	adds	r0, #1
 81116de:	d10e      	bne.n	81116fe <_printf_float+0x42a>
 81116e0:	e659      	b.n	8111396 <_printf_float+0xc2>
 81116e2:	2301      	movs	r3, #1
 81116e4:	4652      	mov	r2, sl
 81116e6:	4631      	mov	r1, r6
 81116e8:	4628      	mov	r0, r5
 81116ea:	47b8      	blx	r7
 81116ec:	3001      	adds	r0, #1
 81116ee:	f43f ae52 	beq.w	8111396 <_printf_float+0xc2>
 81116f2:	f108 0801 	add.w	r8, r8, #1
 81116f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81116f8:	3b01      	subs	r3, #1
 81116fa:	4543      	cmp	r3, r8
 81116fc:	dcf1      	bgt.n	81116e2 <_printf_float+0x40e>
 81116fe:	464b      	mov	r3, r9
 8111700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8111704:	e6dc      	b.n	81114c0 <_printf_float+0x1ec>
 8111706:	f04f 0800 	mov.w	r8, #0
 811170a:	f104 0a1a 	add.w	sl, r4, #26
 811170e:	e7f2      	b.n	81116f6 <_printf_float+0x422>
 8111710:	2301      	movs	r3, #1
 8111712:	4642      	mov	r2, r8
 8111714:	e7df      	b.n	81116d6 <_printf_float+0x402>
 8111716:	2301      	movs	r3, #1
 8111718:	464a      	mov	r2, r9
 811171a:	4631      	mov	r1, r6
 811171c:	4628      	mov	r0, r5
 811171e:	47b8      	blx	r7
 8111720:	3001      	adds	r0, #1
 8111722:	f43f ae38 	beq.w	8111396 <_printf_float+0xc2>
 8111726:	f108 0801 	add.w	r8, r8, #1
 811172a:	68e3      	ldr	r3, [r4, #12]
 811172c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 811172e:	1a5b      	subs	r3, r3, r1
 8111730:	4543      	cmp	r3, r8
 8111732:	dcf0      	bgt.n	8111716 <_printf_float+0x442>
 8111734:	e6fa      	b.n	811152c <_printf_float+0x258>
 8111736:	f04f 0800 	mov.w	r8, #0
 811173a:	f104 0919 	add.w	r9, r4, #25
 811173e:	e7f4      	b.n	811172a <_printf_float+0x456>
=======
0810e748 <_printf_common>:
 810e748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e74c:	4691      	mov	r9, r2
 810e74e:	461f      	mov	r7, r3
 810e750:	688a      	ldr	r2, [r1, #8]
 810e752:	690b      	ldr	r3, [r1, #16]
 810e754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810e758:	4293      	cmp	r3, r2
 810e75a:	bfb8      	it	lt
 810e75c:	4613      	movlt	r3, r2
 810e75e:	f8c9 3000 	str.w	r3, [r9]
 810e762:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810e766:	4606      	mov	r6, r0
 810e768:	460c      	mov	r4, r1
 810e76a:	b112      	cbz	r2, 810e772 <_printf_common+0x2a>
 810e76c:	3301      	adds	r3, #1
 810e76e:	f8c9 3000 	str.w	r3, [r9]
 810e772:	6823      	ldr	r3, [r4, #0]
 810e774:	0699      	lsls	r1, r3, #26
 810e776:	bf42      	ittt	mi
 810e778:	f8d9 3000 	ldrmi.w	r3, [r9]
 810e77c:	3302      	addmi	r3, #2
 810e77e:	f8c9 3000 	strmi.w	r3, [r9]
 810e782:	6825      	ldr	r5, [r4, #0]
 810e784:	f015 0506 	ands.w	r5, r5, #6
 810e788:	d107      	bne.n	810e79a <_printf_common+0x52>
 810e78a:	f104 0a19 	add.w	sl, r4, #25
 810e78e:	68e3      	ldr	r3, [r4, #12]
 810e790:	f8d9 2000 	ldr.w	r2, [r9]
 810e794:	1a9b      	subs	r3, r3, r2
 810e796:	42ab      	cmp	r3, r5
 810e798:	dc28      	bgt.n	810e7ec <_printf_common+0xa4>
 810e79a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810e79e:	6822      	ldr	r2, [r4, #0]
 810e7a0:	3300      	adds	r3, #0
 810e7a2:	bf18      	it	ne
 810e7a4:	2301      	movne	r3, #1
 810e7a6:	0692      	lsls	r2, r2, #26
 810e7a8:	d42d      	bmi.n	810e806 <_printf_common+0xbe>
 810e7aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810e7ae:	4639      	mov	r1, r7
 810e7b0:	4630      	mov	r0, r6
 810e7b2:	47c0      	blx	r8
 810e7b4:	3001      	adds	r0, #1
 810e7b6:	d020      	beq.n	810e7fa <_printf_common+0xb2>
 810e7b8:	6823      	ldr	r3, [r4, #0]
 810e7ba:	68e5      	ldr	r5, [r4, #12]
 810e7bc:	f8d9 2000 	ldr.w	r2, [r9]
 810e7c0:	f003 0306 	and.w	r3, r3, #6
 810e7c4:	2b04      	cmp	r3, #4
 810e7c6:	bf08      	it	eq
 810e7c8:	1aad      	subeq	r5, r5, r2
 810e7ca:	68a3      	ldr	r3, [r4, #8]
 810e7cc:	6922      	ldr	r2, [r4, #16]
 810e7ce:	bf0c      	ite	eq
 810e7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810e7d4:	2500      	movne	r5, #0
 810e7d6:	4293      	cmp	r3, r2
 810e7d8:	bfc4      	itt	gt
 810e7da:	1a9b      	subgt	r3, r3, r2
 810e7dc:	18ed      	addgt	r5, r5, r3
 810e7de:	f04f 0900 	mov.w	r9, #0
 810e7e2:	341a      	adds	r4, #26
 810e7e4:	454d      	cmp	r5, r9
 810e7e6:	d11a      	bne.n	810e81e <_printf_common+0xd6>
 810e7e8:	2000      	movs	r0, #0
 810e7ea:	e008      	b.n	810e7fe <_printf_common+0xb6>
 810e7ec:	2301      	movs	r3, #1
 810e7ee:	4652      	mov	r2, sl
 810e7f0:	4639      	mov	r1, r7
 810e7f2:	4630      	mov	r0, r6
 810e7f4:	47c0      	blx	r8
 810e7f6:	3001      	adds	r0, #1
 810e7f8:	d103      	bne.n	810e802 <_printf_common+0xba>
 810e7fa:	f04f 30ff 	mov.w	r0, #4294967295
 810e7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e802:	3501      	adds	r5, #1
 810e804:	e7c3      	b.n	810e78e <_printf_common+0x46>
 810e806:	18e1      	adds	r1, r4, r3
 810e808:	1c5a      	adds	r2, r3, #1
 810e80a:	2030      	movs	r0, #48	; 0x30
 810e80c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810e810:	4422      	add	r2, r4
 810e812:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810e816:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810e81a:	3302      	adds	r3, #2
 810e81c:	e7c5      	b.n	810e7aa <_printf_common+0x62>
 810e81e:	2301      	movs	r3, #1
 810e820:	4622      	mov	r2, r4
 810e822:	4639      	mov	r1, r7
 810e824:	4630      	mov	r0, r6
 810e826:	47c0      	blx	r8
 810e828:	3001      	adds	r0, #1
 810e82a:	d0e6      	beq.n	810e7fa <_printf_common+0xb2>
 810e82c:	f109 0901 	add.w	r9, r9, #1
 810e830:	e7d8      	b.n	810e7e4 <_printf_common+0x9c>
	...
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111740 <_printf_common>:
 8111740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111744:	4616      	mov	r6, r2
 8111746:	4699      	mov	r9, r3
 8111748:	688a      	ldr	r2, [r1, #8]
 811174a:	690b      	ldr	r3, [r1, #16]
 811174c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8111750:	4293      	cmp	r3, r2
 8111752:	bfb8      	it	lt
 8111754:	4613      	movlt	r3, r2
 8111756:	6033      	str	r3, [r6, #0]
 8111758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 811175c:	4607      	mov	r7, r0
 811175e:	460c      	mov	r4, r1
 8111760:	b10a      	cbz	r2, 8111766 <_printf_common+0x26>
 8111762:	3301      	adds	r3, #1
 8111764:	6033      	str	r3, [r6, #0]
 8111766:	6823      	ldr	r3, [r4, #0]
 8111768:	0699      	lsls	r1, r3, #26
 811176a:	bf42      	ittt	mi
 811176c:	6833      	ldrmi	r3, [r6, #0]
 811176e:	3302      	addmi	r3, #2
 8111770:	6033      	strmi	r3, [r6, #0]
 8111772:	6825      	ldr	r5, [r4, #0]
 8111774:	f015 0506 	ands.w	r5, r5, #6
 8111778:	d106      	bne.n	8111788 <_printf_common+0x48>
 811177a:	f104 0a19 	add.w	sl, r4, #25
 811177e:	68e3      	ldr	r3, [r4, #12]
 8111780:	6832      	ldr	r2, [r6, #0]
 8111782:	1a9b      	subs	r3, r3, r2
 8111784:	42ab      	cmp	r3, r5
 8111786:	dc26      	bgt.n	81117d6 <_printf_common+0x96>
 8111788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 811178c:	1e13      	subs	r3, r2, #0
 811178e:	6822      	ldr	r2, [r4, #0]
 8111790:	bf18      	it	ne
 8111792:	2301      	movne	r3, #1
 8111794:	0692      	lsls	r2, r2, #26
 8111796:	d42b      	bmi.n	81117f0 <_printf_common+0xb0>
 8111798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 811179c:	4649      	mov	r1, r9
 811179e:	4638      	mov	r0, r7
 81117a0:	47c0      	blx	r8
 81117a2:	3001      	adds	r0, #1
 81117a4:	d01e      	beq.n	81117e4 <_printf_common+0xa4>
 81117a6:	6823      	ldr	r3, [r4, #0]
 81117a8:	68e5      	ldr	r5, [r4, #12]
 81117aa:	6832      	ldr	r2, [r6, #0]
 81117ac:	f003 0306 	and.w	r3, r3, #6
 81117b0:	2b04      	cmp	r3, #4
 81117b2:	bf08      	it	eq
 81117b4:	1aad      	subeq	r5, r5, r2
 81117b6:	68a3      	ldr	r3, [r4, #8]
 81117b8:	6922      	ldr	r2, [r4, #16]
 81117ba:	bf0c      	ite	eq
 81117bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81117c0:	2500      	movne	r5, #0
 81117c2:	4293      	cmp	r3, r2
 81117c4:	bfc4      	itt	gt
 81117c6:	1a9b      	subgt	r3, r3, r2
 81117c8:	18ed      	addgt	r5, r5, r3
 81117ca:	2600      	movs	r6, #0
 81117cc:	341a      	adds	r4, #26
 81117ce:	42b5      	cmp	r5, r6
 81117d0:	d11a      	bne.n	8111808 <_printf_common+0xc8>
 81117d2:	2000      	movs	r0, #0
 81117d4:	e008      	b.n	81117e8 <_printf_common+0xa8>
 81117d6:	2301      	movs	r3, #1
 81117d8:	4652      	mov	r2, sl
 81117da:	4649      	mov	r1, r9
 81117dc:	4638      	mov	r0, r7
 81117de:	47c0      	blx	r8
 81117e0:	3001      	adds	r0, #1
 81117e2:	d103      	bne.n	81117ec <_printf_common+0xac>
 81117e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81117e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81117ec:	3501      	adds	r5, #1
 81117ee:	e7c6      	b.n	811177e <_printf_common+0x3e>
 81117f0:	18e1      	adds	r1, r4, r3
 81117f2:	1c5a      	adds	r2, r3, #1
 81117f4:	2030      	movs	r0, #48	; 0x30
 81117f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81117fa:	4422      	add	r2, r4
 81117fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8111800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8111804:	3302      	adds	r3, #2
 8111806:	e7c7      	b.n	8111798 <_printf_common+0x58>
 8111808:	2301      	movs	r3, #1
 811180a:	4622      	mov	r2, r4
 811180c:	4649      	mov	r1, r9
 811180e:	4638      	mov	r0, r7
 8111810:	47c0      	blx	r8
 8111812:	3001      	adds	r0, #1
 8111814:	d0e6      	beq.n	81117e4 <_printf_common+0xa4>
 8111816:	3601      	adds	r6, #1
 8111818:	e7d9      	b.n	81117ce <_printf_common+0x8e>
=======
0810e834 <_printf_i>:
 810e834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810e838:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 810e83c:	460c      	mov	r4, r1
 810e83e:	7e09      	ldrb	r1, [r1, #24]
 810e840:	b085      	sub	sp, #20
 810e842:	296e      	cmp	r1, #110	; 0x6e
 810e844:	4617      	mov	r7, r2
 810e846:	4606      	mov	r6, r0
 810e848:	4698      	mov	r8, r3
 810e84a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810e84c:	f000 80b3 	beq.w	810e9b6 <_printf_i+0x182>
 810e850:	d822      	bhi.n	810e898 <_printf_i+0x64>
 810e852:	2963      	cmp	r1, #99	; 0x63
 810e854:	d036      	beq.n	810e8c4 <_printf_i+0x90>
 810e856:	d80a      	bhi.n	810e86e <_printf_i+0x3a>
 810e858:	2900      	cmp	r1, #0
 810e85a:	f000 80b9 	beq.w	810e9d0 <_printf_i+0x19c>
 810e85e:	2958      	cmp	r1, #88	; 0x58
 810e860:	f000 8083 	beq.w	810e96a <_printf_i+0x136>
 810e864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810e868:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 810e86c:	e032      	b.n	810e8d4 <_printf_i+0xa0>
 810e86e:	2964      	cmp	r1, #100	; 0x64
 810e870:	d001      	beq.n	810e876 <_printf_i+0x42>
 810e872:	2969      	cmp	r1, #105	; 0x69
 810e874:	d1f6      	bne.n	810e864 <_printf_i+0x30>
 810e876:	6820      	ldr	r0, [r4, #0]
 810e878:	6813      	ldr	r3, [r2, #0]
 810e87a:	0605      	lsls	r5, r0, #24
 810e87c:	f103 0104 	add.w	r1, r3, #4
 810e880:	d52a      	bpl.n	810e8d8 <_printf_i+0xa4>
 810e882:	681b      	ldr	r3, [r3, #0]
 810e884:	6011      	str	r1, [r2, #0]
 810e886:	2b00      	cmp	r3, #0
 810e888:	da03      	bge.n	810e892 <_printf_i+0x5e>
 810e88a:	222d      	movs	r2, #45	; 0x2d
 810e88c:	425b      	negs	r3, r3
 810e88e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 810e892:	486f      	ldr	r0, [pc, #444]	; (810ea50 <_printf_i+0x21c>)
 810e894:	220a      	movs	r2, #10
 810e896:	e039      	b.n	810e90c <_printf_i+0xd8>
 810e898:	2973      	cmp	r1, #115	; 0x73
 810e89a:	f000 809d 	beq.w	810e9d8 <_printf_i+0x1a4>
 810e89e:	d808      	bhi.n	810e8b2 <_printf_i+0x7e>
 810e8a0:	296f      	cmp	r1, #111	; 0x6f
 810e8a2:	d020      	beq.n	810e8e6 <_printf_i+0xb2>
 810e8a4:	2970      	cmp	r1, #112	; 0x70
 810e8a6:	d1dd      	bne.n	810e864 <_printf_i+0x30>
 810e8a8:	6823      	ldr	r3, [r4, #0]
 810e8aa:	f043 0320 	orr.w	r3, r3, #32
 810e8ae:	6023      	str	r3, [r4, #0]
 810e8b0:	e003      	b.n	810e8ba <_printf_i+0x86>
 810e8b2:	2975      	cmp	r1, #117	; 0x75
 810e8b4:	d017      	beq.n	810e8e6 <_printf_i+0xb2>
 810e8b6:	2978      	cmp	r1, #120	; 0x78
 810e8b8:	d1d4      	bne.n	810e864 <_printf_i+0x30>
 810e8ba:	2378      	movs	r3, #120	; 0x78
 810e8bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810e8c0:	4864      	ldr	r0, [pc, #400]	; (810ea54 <_printf_i+0x220>)
 810e8c2:	e055      	b.n	810e970 <_printf_i+0x13c>
 810e8c4:	6813      	ldr	r3, [r2, #0]
 810e8c6:	1d19      	adds	r1, r3, #4
 810e8c8:	681b      	ldr	r3, [r3, #0]
 810e8ca:	6011      	str	r1, [r2, #0]
 810e8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810e8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810e8d4:	2301      	movs	r3, #1
 810e8d6:	e08c      	b.n	810e9f2 <_printf_i+0x1be>
 810e8d8:	681b      	ldr	r3, [r3, #0]
 810e8da:	6011      	str	r1, [r2, #0]
 810e8dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 810e8e0:	bf18      	it	ne
 810e8e2:	b21b      	sxthne	r3, r3
 810e8e4:	e7cf      	b.n	810e886 <_printf_i+0x52>
 810e8e6:	6813      	ldr	r3, [r2, #0]
 810e8e8:	6825      	ldr	r5, [r4, #0]
 810e8ea:	1d18      	adds	r0, r3, #4
 810e8ec:	6010      	str	r0, [r2, #0]
 810e8ee:	0628      	lsls	r0, r5, #24
 810e8f0:	d501      	bpl.n	810e8f6 <_printf_i+0xc2>
 810e8f2:	681b      	ldr	r3, [r3, #0]
 810e8f4:	e002      	b.n	810e8fc <_printf_i+0xc8>
 810e8f6:	0668      	lsls	r0, r5, #25
 810e8f8:	d5fb      	bpl.n	810e8f2 <_printf_i+0xbe>
 810e8fa:	881b      	ldrh	r3, [r3, #0]
 810e8fc:	4854      	ldr	r0, [pc, #336]	; (810ea50 <_printf_i+0x21c>)
 810e8fe:	296f      	cmp	r1, #111	; 0x6f
 810e900:	bf14      	ite	ne
 810e902:	220a      	movne	r2, #10
 810e904:	2208      	moveq	r2, #8
 810e906:	2100      	movs	r1, #0
 810e908:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810e90c:	6865      	ldr	r5, [r4, #4]
 810e90e:	60a5      	str	r5, [r4, #8]
 810e910:	2d00      	cmp	r5, #0
 810e912:	f2c0 8095 	blt.w	810ea40 <_printf_i+0x20c>
 810e916:	6821      	ldr	r1, [r4, #0]
 810e918:	f021 0104 	bic.w	r1, r1, #4
 810e91c:	6021      	str	r1, [r4, #0]
 810e91e:	2b00      	cmp	r3, #0
 810e920:	d13d      	bne.n	810e99e <_printf_i+0x16a>
 810e922:	2d00      	cmp	r5, #0
 810e924:	f040 808e 	bne.w	810ea44 <_printf_i+0x210>
 810e928:	4665      	mov	r5, ip
 810e92a:	2a08      	cmp	r2, #8
 810e92c:	d10b      	bne.n	810e946 <_printf_i+0x112>
 810e92e:	6823      	ldr	r3, [r4, #0]
 810e930:	07db      	lsls	r3, r3, #31
 810e932:	d508      	bpl.n	810e946 <_printf_i+0x112>
 810e934:	6923      	ldr	r3, [r4, #16]
 810e936:	6862      	ldr	r2, [r4, #4]
 810e938:	429a      	cmp	r2, r3
 810e93a:	bfde      	ittt	le
 810e93c:	2330      	movle	r3, #48	; 0x30
 810e93e:	f805 3c01 	strble.w	r3, [r5, #-1]
 810e942:	f105 35ff 	addle.w	r5, r5, #4294967295
 810e946:	ebac 0305 	sub.w	r3, ip, r5
 810e94a:	6123      	str	r3, [r4, #16]
 810e94c:	f8cd 8000 	str.w	r8, [sp]
 810e950:	463b      	mov	r3, r7
 810e952:	aa03      	add	r2, sp, #12
 810e954:	4621      	mov	r1, r4
 810e956:	4630      	mov	r0, r6
 810e958:	f7ff fef6 	bl	810e748 <_printf_common>
 810e95c:	3001      	adds	r0, #1
 810e95e:	d14d      	bne.n	810e9fc <_printf_i+0x1c8>
 810e960:	f04f 30ff 	mov.w	r0, #4294967295
 810e964:	b005      	add	sp, #20
 810e966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e96a:	4839      	ldr	r0, [pc, #228]	; (810ea50 <_printf_i+0x21c>)
 810e96c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 810e970:	6813      	ldr	r3, [r2, #0]
 810e972:	6821      	ldr	r1, [r4, #0]
 810e974:	1d1d      	adds	r5, r3, #4
 810e976:	681b      	ldr	r3, [r3, #0]
 810e978:	6015      	str	r5, [r2, #0]
 810e97a:	060a      	lsls	r2, r1, #24
 810e97c:	d50b      	bpl.n	810e996 <_printf_i+0x162>
 810e97e:	07ca      	lsls	r2, r1, #31
 810e980:	bf44      	itt	mi
 810e982:	f041 0120 	orrmi.w	r1, r1, #32
 810e986:	6021      	strmi	r1, [r4, #0]
 810e988:	b91b      	cbnz	r3, 810e992 <_printf_i+0x15e>
 810e98a:	6822      	ldr	r2, [r4, #0]
 810e98c:	f022 0220 	bic.w	r2, r2, #32
 810e990:	6022      	str	r2, [r4, #0]
 810e992:	2210      	movs	r2, #16
 810e994:	e7b7      	b.n	810e906 <_printf_i+0xd2>
 810e996:	064d      	lsls	r5, r1, #25
 810e998:	bf48      	it	mi
 810e99a:	b29b      	uxthmi	r3, r3
 810e99c:	e7ef      	b.n	810e97e <_printf_i+0x14a>
 810e99e:	4665      	mov	r5, ip
 810e9a0:	fbb3 f1f2 	udiv	r1, r3, r2
 810e9a4:	fb02 3311 	mls	r3, r2, r1, r3
 810e9a8:	5cc3      	ldrb	r3, [r0, r3]
 810e9aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 810e9ae:	460b      	mov	r3, r1
 810e9b0:	2900      	cmp	r1, #0
 810e9b2:	d1f5      	bne.n	810e9a0 <_printf_i+0x16c>
 810e9b4:	e7b9      	b.n	810e92a <_printf_i+0xf6>
 810e9b6:	6813      	ldr	r3, [r2, #0]
 810e9b8:	6825      	ldr	r5, [r4, #0]
 810e9ba:	6961      	ldr	r1, [r4, #20]
 810e9bc:	1d18      	adds	r0, r3, #4
 810e9be:	6010      	str	r0, [r2, #0]
 810e9c0:	0628      	lsls	r0, r5, #24
 810e9c2:	681b      	ldr	r3, [r3, #0]
 810e9c4:	d501      	bpl.n	810e9ca <_printf_i+0x196>
 810e9c6:	6019      	str	r1, [r3, #0]
 810e9c8:	e002      	b.n	810e9d0 <_printf_i+0x19c>
 810e9ca:	066a      	lsls	r2, r5, #25
 810e9cc:	d5fb      	bpl.n	810e9c6 <_printf_i+0x192>
 810e9ce:	8019      	strh	r1, [r3, #0]
 810e9d0:	2300      	movs	r3, #0
 810e9d2:	6123      	str	r3, [r4, #16]
 810e9d4:	4665      	mov	r5, ip
 810e9d6:	e7b9      	b.n	810e94c <_printf_i+0x118>
 810e9d8:	6813      	ldr	r3, [r2, #0]
 810e9da:	1d19      	adds	r1, r3, #4
 810e9dc:	6011      	str	r1, [r2, #0]
 810e9de:	681d      	ldr	r5, [r3, #0]
 810e9e0:	6862      	ldr	r2, [r4, #4]
 810e9e2:	2100      	movs	r1, #0
 810e9e4:	4628      	mov	r0, r5
 810e9e6:	f7f1 fc93 	bl	8100310 <memchr>
 810e9ea:	b108      	cbz	r0, 810e9f0 <_printf_i+0x1bc>
 810e9ec:	1b40      	subs	r0, r0, r5
 810e9ee:	6060      	str	r0, [r4, #4]
 810e9f0:	6863      	ldr	r3, [r4, #4]
 810e9f2:	6123      	str	r3, [r4, #16]
 810e9f4:	2300      	movs	r3, #0
 810e9f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810e9fa:	e7a7      	b.n	810e94c <_printf_i+0x118>
 810e9fc:	6923      	ldr	r3, [r4, #16]
 810e9fe:	462a      	mov	r2, r5
 810ea00:	4639      	mov	r1, r7
 810ea02:	4630      	mov	r0, r6
 810ea04:	47c0      	blx	r8
 810ea06:	3001      	adds	r0, #1
 810ea08:	d0aa      	beq.n	810e960 <_printf_i+0x12c>
 810ea0a:	6823      	ldr	r3, [r4, #0]
 810ea0c:	079b      	lsls	r3, r3, #30
 810ea0e:	d413      	bmi.n	810ea38 <_printf_i+0x204>
 810ea10:	68e0      	ldr	r0, [r4, #12]
 810ea12:	9b03      	ldr	r3, [sp, #12]
 810ea14:	4298      	cmp	r0, r3
 810ea16:	bfb8      	it	lt
 810ea18:	4618      	movlt	r0, r3
 810ea1a:	e7a3      	b.n	810e964 <_printf_i+0x130>
 810ea1c:	2301      	movs	r3, #1
 810ea1e:	464a      	mov	r2, r9
 810ea20:	4639      	mov	r1, r7
 810ea22:	4630      	mov	r0, r6
 810ea24:	47c0      	blx	r8
 810ea26:	3001      	adds	r0, #1
 810ea28:	d09a      	beq.n	810e960 <_printf_i+0x12c>
 810ea2a:	3501      	adds	r5, #1
 810ea2c:	68e3      	ldr	r3, [r4, #12]
 810ea2e:	9a03      	ldr	r2, [sp, #12]
 810ea30:	1a9b      	subs	r3, r3, r2
 810ea32:	42ab      	cmp	r3, r5
 810ea34:	dcf2      	bgt.n	810ea1c <_printf_i+0x1e8>
 810ea36:	e7eb      	b.n	810ea10 <_printf_i+0x1dc>
 810ea38:	2500      	movs	r5, #0
 810ea3a:	f104 0919 	add.w	r9, r4, #25
 810ea3e:	e7f5      	b.n	810ea2c <_printf_i+0x1f8>
 810ea40:	2b00      	cmp	r3, #0
 810ea42:	d1ac      	bne.n	810e99e <_printf_i+0x16a>
 810ea44:	7803      	ldrb	r3, [r0, #0]
 810ea46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810ea4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810ea4e:	e76c      	b.n	810e92a <_printf_i+0xf6>
 810ea50:	08110f05 	.word	0x08110f05
 810ea54:	08110f16 	.word	0x08110f16

0810ea58 <_raise_r>:
 810ea58:	291f      	cmp	r1, #31
 810ea5a:	b538      	push	{r3, r4, r5, lr}
 810ea5c:	4604      	mov	r4, r0
 810ea5e:	460d      	mov	r5, r1
 810ea60:	d904      	bls.n	810ea6c <_raise_r+0x14>
 810ea62:	2316      	movs	r3, #22
 810ea64:	6003      	str	r3, [r0, #0]
 810ea66:	f04f 30ff 	mov.w	r0, #4294967295
 810ea6a:	bd38      	pop	{r3, r4, r5, pc}
 810ea6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810ea6e:	b112      	cbz	r2, 810ea76 <_raise_r+0x1e>
 810ea70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ea74:	b94b      	cbnz	r3, 810ea8a <_raise_r+0x32>
 810ea76:	4620      	mov	r0, r4
 810ea78:	f000 f830 	bl	810eadc <_getpid_r>
 810ea7c:	462a      	mov	r2, r5
 810ea7e:	4601      	mov	r1, r0
 810ea80:	4620      	mov	r0, r4
 810ea82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ea86:	f000 b817 	b.w	810eab8 <_kill_r>
 810ea8a:	2b01      	cmp	r3, #1
 810ea8c:	d00a      	beq.n	810eaa4 <_raise_r+0x4c>
 810ea8e:	1c59      	adds	r1, r3, #1
 810ea90:	d103      	bne.n	810ea9a <_raise_r+0x42>
 810ea92:	2316      	movs	r3, #22
 810ea94:	6003      	str	r3, [r0, #0]
 810ea96:	2001      	movs	r0, #1
 810ea98:	e7e7      	b.n	810ea6a <_raise_r+0x12>
 810ea9a:	2400      	movs	r4, #0
 810ea9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810eaa0:	4628      	mov	r0, r5
 810eaa2:	4798      	blx	r3
 810eaa4:	2000      	movs	r0, #0
 810eaa6:	e7e0      	b.n	810ea6a <_raise_r+0x12>

0810eaa8 <raise>:
 810eaa8:	4b02      	ldr	r3, [pc, #8]	; (810eab4 <raise+0xc>)
 810eaaa:	4601      	mov	r1, r0
 810eaac:	6818      	ldr	r0, [r3, #0]
 810eaae:	f7ff bfd3 	b.w	810ea58 <_raise_r>
 810eab2:	bf00      	nop
 810eab4:	10000034 	.word	0x10000034

0810eab8 <_kill_r>:
 810eab8:	b538      	push	{r3, r4, r5, lr}
 810eaba:	4c07      	ldr	r4, [pc, #28]	; (810ead8 <_kill_r+0x20>)
 810eabc:	2300      	movs	r3, #0
 810eabe:	4605      	mov	r5, r0
 810eac0:	4608      	mov	r0, r1
 810eac2:	4611      	mov	r1, r2
 810eac4:	6023      	str	r3, [r4, #0]
 810eac6:	f7f3 f991 	bl	8101dec <_kill>
 810eaca:	1c43      	adds	r3, r0, #1
 810eacc:	d102      	bne.n	810ead4 <_kill_r+0x1c>
 810eace:	6823      	ldr	r3, [r4, #0]
 810ead0:	b103      	cbz	r3, 810ead4 <_kill_r+0x1c>
 810ead2:	602b      	str	r3, [r5, #0]
 810ead4:	bd38      	pop	{r3, r4, r5, pc}
 810ead6:	bf00      	nop
 810ead8:	10009fd4 	.word	0x10009fd4

0810eadc <_getpid_r>:
 810eadc:	f7f3 b97e 	b.w	8101ddc <_getpid>

0810eae0 <siprintf>:
 810eae0:	b40e      	push	{r1, r2, r3}
 810eae2:	b500      	push	{lr}
 810eae4:	b09c      	sub	sp, #112	; 0x70
 810eae6:	ab1d      	add	r3, sp, #116	; 0x74
 810eae8:	9002      	str	r0, [sp, #8]
 810eaea:	9006      	str	r0, [sp, #24]
 810eaec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810eaf0:	4809      	ldr	r0, [pc, #36]	; (810eb18 <siprintf+0x38>)
 810eaf2:	9107      	str	r1, [sp, #28]
 810eaf4:	9104      	str	r1, [sp, #16]
 810eaf6:	4909      	ldr	r1, [pc, #36]	; (810eb1c <siprintf+0x3c>)
 810eaf8:	f853 2b04 	ldr.w	r2, [r3], #4
 810eafc:	9105      	str	r1, [sp, #20]
 810eafe:	6800      	ldr	r0, [r0, #0]
 810eb00:	9301      	str	r3, [sp, #4]
 810eb02:	a902      	add	r1, sp, #8
 810eb04:	f001 fb80 	bl	8110208 <_svfiprintf_r>
 810eb08:	9b02      	ldr	r3, [sp, #8]
 810eb0a:	2200      	movs	r2, #0
 810eb0c:	701a      	strb	r2, [r3, #0]
 810eb0e:	b01c      	add	sp, #112	; 0x70
 810eb10:	f85d eb04 	ldr.w	lr, [sp], #4
 810eb14:	b003      	add	sp, #12
 810eb16:	4770      	bx	lr
 810eb18:	10000034 	.word	0x10000034
 810eb1c:	ffff0208 	.word	0xffff0208

0810eb20 <_strtol_l.isra.0>:
 810eb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810eb24:	4680      	mov	r8, r0
 810eb26:	4689      	mov	r9, r1
 810eb28:	4692      	mov	sl, r2
 810eb2a:	461e      	mov	r6, r3
 810eb2c:	460f      	mov	r7, r1
 810eb2e:	463d      	mov	r5, r7
 810eb30:	9808      	ldr	r0, [sp, #32]
 810eb32:	f815 4b01 	ldrb.w	r4, [r5], #1
 810eb36:	f000 ff4f 	bl	810f9d8 <__locale_ctype_ptr_l>
 810eb3a:	4420      	add	r0, r4
 810eb3c:	7843      	ldrb	r3, [r0, #1]
 810eb3e:	f013 0308 	ands.w	r3, r3, #8
 810eb42:	d132      	bne.n	810ebaa <_strtol_l.isra.0+0x8a>
 810eb44:	2c2d      	cmp	r4, #45	; 0x2d
 810eb46:	d132      	bne.n	810ebae <_strtol_l.isra.0+0x8e>
 810eb48:	787c      	ldrb	r4, [r7, #1]
 810eb4a:	1cbd      	adds	r5, r7, #2
 810eb4c:	2201      	movs	r2, #1
 810eb4e:	2e00      	cmp	r6, #0
 810eb50:	d05d      	beq.n	810ec0e <_strtol_l.isra.0+0xee>
 810eb52:	2e10      	cmp	r6, #16
 810eb54:	d109      	bne.n	810eb6a <_strtol_l.isra.0+0x4a>
 810eb56:	2c30      	cmp	r4, #48	; 0x30
 810eb58:	d107      	bne.n	810eb6a <_strtol_l.isra.0+0x4a>
 810eb5a:	782b      	ldrb	r3, [r5, #0]
 810eb5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810eb60:	2b58      	cmp	r3, #88	; 0x58
 810eb62:	d14f      	bne.n	810ec04 <_strtol_l.isra.0+0xe4>
 810eb64:	786c      	ldrb	r4, [r5, #1]
 810eb66:	2610      	movs	r6, #16
 810eb68:	3502      	adds	r5, #2
 810eb6a:	2a00      	cmp	r2, #0
 810eb6c:	bf14      	ite	ne
 810eb6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 810eb72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 810eb76:	2700      	movs	r7, #0
 810eb78:	fbb1 fcf6 	udiv	ip, r1, r6
 810eb7c:	4638      	mov	r0, r7
 810eb7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 810eb82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 810eb86:	2b09      	cmp	r3, #9
 810eb88:	d817      	bhi.n	810ebba <_strtol_l.isra.0+0x9a>
 810eb8a:	461c      	mov	r4, r3
 810eb8c:	42a6      	cmp	r6, r4
 810eb8e:	dd23      	ble.n	810ebd8 <_strtol_l.isra.0+0xb8>
 810eb90:	1c7b      	adds	r3, r7, #1
 810eb92:	d007      	beq.n	810eba4 <_strtol_l.isra.0+0x84>
 810eb94:	4584      	cmp	ip, r0
 810eb96:	d31c      	bcc.n	810ebd2 <_strtol_l.isra.0+0xb2>
 810eb98:	d101      	bne.n	810eb9e <_strtol_l.isra.0+0x7e>
 810eb9a:	45a6      	cmp	lr, r4
 810eb9c:	db19      	blt.n	810ebd2 <_strtol_l.isra.0+0xb2>
 810eb9e:	fb00 4006 	mla	r0, r0, r6, r4
 810eba2:	2701      	movs	r7, #1
 810eba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 810eba8:	e7eb      	b.n	810eb82 <_strtol_l.isra.0+0x62>
 810ebaa:	462f      	mov	r7, r5
 810ebac:	e7bf      	b.n	810eb2e <_strtol_l.isra.0+0xe>
 810ebae:	2c2b      	cmp	r4, #43	; 0x2b
 810ebb0:	bf04      	itt	eq
 810ebb2:	1cbd      	addeq	r5, r7, #2
 810ebb4:	787c      	ldrbeq	r4, [r7, #1]
 810ebb6:	461a      	mov	r2, r3
 810ebb8:	e7c9      	b.n	810eb4e <_strtol_l.isra.0+0x2e>
 810ebba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 810ebbe:	2b19      	cmp	r3, #25
 810ebc0:	d801      	bhi.n	810ebc6 <_strtol_l.isra.0+0xa6>
 810ebc2:	3c37      	subs	r4, #55	; 0x37
 810ebc4:	e7e2      	b.n	810eb8c <_strtol_l.isra.0+0x6c>
 810ebc6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 810ebca:	2b19      	cmp	r3, #25
 810ebcc:	d804      	bhi.n	810ebd8 <_strtol_l.isra.0+0xb8>
 810ebce:	3c57      	subs	r4, #87	; 0x57
 810ebd0:	e7dc      	b.n	810eb8c <_strtol_l.isra.0+0x6c>
 810ebd2:	f04f 37ff 	mov.w	r7, #4294967295
 810ebd6:	e7e5      	b.n	810eba4 <_strtol_l.isra.0+0x84>
 810ebd8:	1c7b      	adds	r3, r7, #1
 810ebda:	d108      	bne.n	810ebee <_strtol_l.isra.0+0xce>
 810ebdc:	2322      	movs	r3, #34	; 0x22
 810ebde:	f8c8 3000 	str.w	r3, [r8]
 810ebe2:	4608      	mov	r0, r1
 810ebe4:	f1ba 0f00 	cmp.w	sl, #0
 810ebe8:	d107      	bne.n	810ebfa <_strtol_l.isra.0+0xda>
 810ebea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ebee:	b102      	cbz	r2, 810ebf2 <_strtol_l.isra.0+0xd2>
 810ebf0:	4240      	negs	r0, r0
 810ebf2:	f1ba 0f00 	cmp.w	sl, #0
 810ebf6:	d0f8      	beq.n	810ebea <_strtol_l.isra.0+0xca>
 810ebf8:	b10f      	cbz	r7, 810ebfe <_strtol_l.isra.0+0xde>
 810ebfa:	f105 39ff 	add.w	r9, r5, #4294967295
 810ebfe:	f8ca 9000 	str.w	r9, [sl]
 810ec02:	e7f2      	b.n	810ebea <_strtol_l.isra.0+0xca>
 810ec04:	2430      	movs	r4, #48	; 0x30
 810ec06:	2e00      	cmp	r6, #0
 810ec08:	d1af      	bne.n	810eb6a <_strtol_l.isra.0+0x4a>
 810ec0a:	2608      	movs	r6, #8
 810ec0c:	e7ad      	b.n	810eb6a <_strtol_l.isra.0+0x4a>
 810ec0e:	2c30      	cmp	r4, #48	; 0x30
 810ec10:	d0a3      	beq.n	810eb5a <_strtol_l.isra.0+0x3a>
 810ec12:	260a      	movs	r6, #10
 810ec14:	e7a9      	b.n	810eb6a <_strtol_l.isra.0+0x4a>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
0811181c <_printf_i>:
 811181c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8111820:	460c      	mov	r4, r1
 8111822:	4691      	mov	r9, r2
 8111824:	7e27      	ldrb	r7, [r4, #24]
 8111826:	990c      	ldr	r1, [sp, #48]	; 0x30
 8111828:	2f78      	cmp	r7, #120	; 0x78
 811182a:	4680      	mov	r8, r0
 811182c:	469a      	mov	sl, r3
 811182e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8111832:	d807      	bhi.n	8111844 <_printf_i+0x28>
 8111834:	2f62      	cmp	r7, #98	; 0x62
 8111836:	d80a      	bhi.n	811184e <_printf_i+0x32>
 8111838:	2f00      	cmp	r7, #0
 811183a:	f000 80d8 	beq.w	81119ee <_printf_i+0x1d2>
 811183e:	2f58      	cmp	r7, #88	; 0x58
 8111840:	f000 80a3 	beq.w	811198a <_printf_i+0x16e>
 8111844:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8111848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 811184c:	e03a      	b.n	81118c4 <_printf_i+0xa8>
 811184e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8111852:	2b15      	cmp	r3, #21
 8111854:	d8f6      	bhi.n	8111844 <_printf_i+0x28>
 8111856:	a001      	add	r0, pc, #4	; (adr r0, 811185c <_printf_i+0x40>)
 8111858:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 811185c:	081118b5 	.word	0x081118b5
 8111860:	081118c9 	.word	0x081118c9
 8111864:	08111845 	.word	0x08111845
 8111868:	08111845 	.word	0x08111845
 811186c:	08111845 	.word	0x08111845
 8111870:	08111845 	.word	0x08111845
 8111874:	081118c9 	.word	0x081118c9
 8111878:	08111845 	.word	0x08111845
 811187c:	08111845 	.word	0x08111845
 8111880:	08111845 	.word	0x08111845
 8111884:	08111845 	.word	0x08111845
 8111888:	081119d5 	.word	0x081119d5
 811188c:	081118f9 	.word	0x081118f9
 8111890:	081119b7 	.word	0x081119b7
 8111894:	08111845 	.word	0x08111845
 8111898:	08111845 	.word	0x08111845
 811189c:	081119f7 	.word	0x081119f7
 81118a0:	08111845 	.word	0x08111845
 81118a4:	081118f9 	.word	0x081118f9
 81118a8:	08111845 	.word	0x08111845
 81118ac:	08111845 	.word	0x08111845
 81118b0:	081119bf 	.word	0x081119bf
 81118b4:	680b      	ldr	r3, [r1, #0]
 81118b6:	1d1a      	adds	r2, r3, #4
 81118b8:	681b      	ldr	r3, [r3, #0]
 81118ba:	600a      	str	r2, [r1, #0]
 81118bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81118c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81118c4:	2301      	movs	r3, #1
 81118c6:	e0a3      	b.n	8111a10 <_printf_i+0x1f4>
 81118c8:	6825      	ldr	r5, [r4, #0]
 81118ca:	6808      	ldr	r0, [r1, #0]
 81118cc:	062e      	lsls	r6, r5, #24
 81118ce:	f100 0304 	add.w	r3, r0, #4
 81118d2:	d50a      	bpl.n	81118ea <_printf_i+0xce>
 81118d4:	6805      	ldr	r5, [r0, #0]
 81118d6:	600b      	str	r3, [r1, #0]
 81118d8:	2d00      	cmp	r5, #0
 81118da:	da03      	bge.n	81118e4 <_printf_i+0xc8>
 81118dc:	232d      	movs	r3, #45	; 0x2d
 81118de:	426d      	negs	r5, r5
 81118e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81118e4:	485e      	ldr	r0, [pc, #376]	; (8111a60 <_printf_i+0x244>)
 81118e6:	230a      	movs	r3, #10
 81118e8:	e019      	b.n	811191e <_printf_i+0x102>
 81118ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 81118ee:	6805      	ldr	r5, [r0, #0]
 81118f0:	600b      	str	r3, [r1, #0]
 81118f2:	bf18      	it	ne
 81118f4:	b22d      	sxthne	r5, r5
 81118f6:	e7ef      	b.n	81118d8 <_printf_i+0xbc>
 81118f8:	680b      	ldr	r3, [r1, #0]
 81118fa:	6825      	ldr	r5, [r4, #0]
 81118fc:	1d18      	adds	r0, r3, #4
 81118fe:	6008      	str	r0, [r1, #0]
 8111900:	0628      	lsls	r0, r5, #24
 8111902:	d501      	bpl.n	8111908 <_printf_i+0xec>
 8111904:	681d      	ldr	r5, [r3, #0]
 8111906:	e002      	b.n	811190e <_printf_i+0xf2>
 8111908:	0669      	lsls	r1, r5, #25
 811190a:	d5fb      	bpl.n	8111904 <_printf_i+0xe8>
 811190c:	881d      	ldrh	r5, [r3, #0]
 811190e:	4854      	ldr	r0, [pc, #336]	; (8111a60 <_printf_i+0x244>)
 8111910:	2f6f      	cmp	r7, #111	; 0x6f
 8111912:	bf0c      	ite	eq
 8111914:	2308      	moveq	r3, #8
 8111916:	230a      	movne	r3, #10
 8111918:	2100      	movs	r1, #0
 811191a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 811191e:	6866      	ldr	r6, [r4, #4]
 8111920:	60a6      	str	r6, [r4, #8]
 8111922:	2e00      	cmp	r6, #0
 8111924:	bfa2      	ittt	ge
 8111926:	6821      	ldrge	r1, [r4, #0]
 8111928:	f021 0104 	bicge.w	r1, r1, #4
 811192c:	6021      	strge	r1, [r4, #0]
 811192e:	b90d      	cbnz	r5, 8111934 <_printf_i+0x118>
 8111930:	2e00      	cmp	r6, #0
 8111932:	d04d      	beq.n	81119d0 <_printf_i+0x1b4>
 8111934:	4616      	mov	r6, r2
 8111936:	fbb5 f1f3 	udiv	r1, r5, r3
 811193a:	fb03 5711 	mls	r7, r3, r1, r5
 811193e:	5dc7      	ldrb	r7, [r0, r7]
 8111940:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8111944:	462f      	mov	r7, r5
 8111946:	42bb      	cmp	r3, r7
 8111948:	460d      	mov	r5, r1
 811194a:	d9f4      	bls.n	8111936 <_printf_i+0x11a>
 811194c:	2b08      	cmp	r3, #8
 811194e:	d10b      	bne.n	8111968 <_printf_i+0x14c>
 8111950:	6823      	ldr	r3, [r4, #0]
 8111952:	07df      	lsls	r7, r3, #31
 8111954:	d508      	bpl.n	8111968 <_printf_i+0x14c>
 8111956:	6923      	ldr	r3, [r4, #16]
 8111958:	6861      	ldr	r1, [r4, #4]
 811195a:	4299      	cmp	r1, r3
 811195c:	bfde      	ittt	le
 811195e:	2330      	movle	r3, #48	; 0x30
 8111960:	f806 3c01 	strble.w	r3, [r6, #-1]
 8111964:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8111968:	1b92      	subs	r2, r2, r6
 811196a:	6122      	str	r2, [r4, #16]
 811196c:	f8cd a000 	str.w	sl, [sp]
 8111970:	464b      	mov	r3, r9
 8111972:	aa03      	add	r2, sp, #12
 8111974:	4621      	mov	r1, r4
 8111976:	4640      	mov	r0, r8
 8111978:	f7ff fee2 	bl	8111740 <_printf_common>
 811197c:	3001      	adds	r0, #1
 811197e:	d14c      	bne.n	8111a1a <_printf_i+0x1fe>
 8111980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111984:	b004      	add	sp, #16
 8111986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811198a:	4835      	ldr	r0, [pc, #212]	; (8111a60 <_printf_i+0x244>)
 811198c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8111990:	6823      	ldr	r3, [r4, #0]
 8111992:	680e      	ldr	r6, [r1, #0]
 8111994:	061f      	lsls	r7, r3, #24
 8111996:	f856 5b04 	ldr.w	r5, [r6], #4
 811199a:	600e      	str	r6, [r1, #0]
 811199c:	d514      	bpl.n	81119c8 <_printf_i+0x1ac>
 811199e:	07d9      	lsls	r1, r3, #31
 81119a0:	bf44      	itt	mi
 81119a2:	f043 0320 	orrmi.w	r3, r3, #32
 81119a6:	6023      	strmi	r3, [r4, #0]
 81119a8:	b91d      	cbnz	r5, 81119b2 <_printf_i+0x196>
 81119aa:	6823      	ldr	r3, [r4, #0]
 81119ac:	f023 0320 	bic.w	r3, r3, #32
 81119b0:	6023      	str	r3, [r4, #0]
 81119b2:	2310      	movs	r3, #16
 81119b4:	e7b0      	b.n	8111918 <_printf_i+0xfc>
 81119b6:	6823      	ldr	r3, [r4, #0]
 81119b8:	f043 0320 	orr.w	r3, r3, #32
 81119bc:	6023      	str	r3, [r4, #0]
 81119be:	2378      	movs	r3, #120	; 0x78
 81119c0:	4828      	ldr	r0, [pc, #160]	; (8111a64 <_printf_i+0x248>)
 81119c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81119c6:	e7e3      	b.n	8111990 <_printf_i+0x174>
 81119c8:	065e      	lsls	r6, r3, #25
 81119ca:	bf48      	it	mi
 81119cc:	b2ad      	uxthmi	r5, r5
 81119ce:	e7e6      	b.n	811199e <_printf_i+0x182>
 81119d0:	4616      	mov	r6, r2
 81119d2:	e7bb      	b.n	811194c <_printf_i+0x130>
 81119d4:	680b      	ldr	r3, [r1, #0]
 81119d6:	6826      	ldr	r6, [r4, #0]
 81119d8:	6960      	ldr	r0, [r4, #20]
 81119da:	1d1d      	adds	r5, r3, #4
 81119dc:	600d      	str	r5, [r1, #0]
 81119de:	0635      	lsls	r5, r6, #24
 81119e0:	681b      	ldr	r3, [r3, #0]
 81119e2:	d501      	bpl.n	81119e8 <_printf_i+0x1cc>
 81119e4:	6018      	str	r0, [r3, #0]
 81119e6:	e002      	b.n	81119ee <_printf_i+0x1d2>
 81119e8:	0671      	lsls	r1, r6, #25
 81119ea:	d5fb      	bpl.n	81119e4 <_printf_i+0x1c8>
 81119ec:	8018      	strh	r0, [r3, #0]
 81119ee:	2300      	movs	r3, #0
 81119f0:	6123      	str	r3, [r4, #16]
 81119f2:	4616      	mov	r6, r2
 81119f4:	e7ba      	b.n	811196c <_printf_i+0x150>
 81119f6:	680b      	ldr	r3, [r1, #0]
 81119f8:	1d1a      	adds	r2, r3, #4
 81119fa:	600a      	str	r2, [r1, #0]
 81119fc:	681e      	ldr	r6, [r3, #0]
 81119fe:	6862      	ldr	r2, [r4, #4]
 8111a00:	2100      	movs	r1, #0
 8111a02:	4630      	mov	r0, r6
 8111a04:	f7ee fc84 	bl	8100310 <memchr>
 8111a08:	b108      	cbz	r0, 8111a0e <_printf_i+0x1f2>
 8111a0a:	1b80      	subs	r0, r0, r6
 8111a0c:	6060      	str	r0, [r4, #4]
 8111a0e:	6863      	ldr	r3, [r4, #4]
 8111a10:	6123      	str	r3, [r4, #16]
 8111a12:	2300      	movs	r3, #0
 8111a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8111a18:	e7a8      	b.n	811196c <_printf_i+0x150>
 8111a1a:	6923      	ldr	r3, [r4, #16]
 8111a1c:	4632      	mov	r2, r6
 8111a1e:	4649      	mov	r1, r9
 8111a20:	4640      	mov	r0, r8
 8111a22:	47d0      	blx	sl
 8111a24:	3001      	adds	r0, #1
 8111a26:	d0ab      	beq.n	8111980 <_printf_i+0x164>
 8111a28:	6823      	ldr	r3, [r4, #0]
 8111a2a:	079b      	lsls	r3, r3, #30
 8111a2c:	d413      	bmi.n	8111a56 <_printf_i+0x23a>
 8111a2e:	68e0      	ldr	r0, [r4, #12]
 8111a30:	9b03      	ldr	r3, [sp, #12]
 8111a32:	4298      	cmp	r0, r3
 8111a34:	bfb8      	it	lt
 8111a36:	4618      	movlt	r0, r3
 8111a38:	e7a4      	b.n	8111984 <_printf_i+0x168>
 8111a3a:	2301      	movs	r3, #1
 8111a3c:	4632      	mov	r2, r6
 8111a3e:	4649      	mov	r1, r9
 8111a40:	4640      	mov	r0, r8
 8111a42:	47d0      	blx	sl
 8111a44:	3001      	adds	r0, #1
 8111a46:	d09b      	beq.n	8111980 <_printf_i+0x164>
 8111a48:	3501      	adds	r5, #1
 8111a4a:	68e3      	ldr	r3, [r4, #12]
 8111a4c:	9903      	ldr	r1, [sp, #12]
 8111a4e:	1a5b      	subs	r3, r3, r1
 8111a50:	42ab      	cmp	r3, r5
 8111a52:	dcf2      	bgt.n	8111a3a <_printf_i+0x21e>
 8111a54:	e7eb      	b.n	8111a2e <_printf_i+0x212>
 8111a56:	2500      	movs	r5, #0
 8111a58:	f104 0619 	add.w	r6, r4, #25
 8111a5c:	e7f5      	b.n	8111a4a <_printf_i+0x22e>
 8111a5e:	bf00      	nop
 8111a60:	08114fb2 	.word	0x08114fb2
 8111a64:	08114fc3 	.word	0x08114fc3
=======
0810ec18 <strtol>:
 810ec18:	4b08      	ldr	r3, [pc, #32]	; (810ec3c <strtol+0x24>)
 810ec1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ec1c:	681c      	ldr	r4, [r3, #0]
 810ec1e:	4d08      	ldr	r5, [pc, #32]	; (810ec40 <strtol+0x28>)
 810ec20:	6a23      	ldr	r3, [r4, #32]
 810ec22:	2b00      	cmp	r3, #0
 810ec24:	bf08      	it	eq
 810ec26:	462b      	moveq	r3, r5
 810ec28:	9300      	str	r3, [sp, #0]
 810ec2a:	4613      	mov	r3, r2
 810ec2c:	460a      	mov	r2, r1
 810ec2e:	4601      	mov	r1, r0
 810ec30:	4620      	mov	r0, r4
 810ec32:	f7ff ff75 	bl	810eb20 <_strtol_l.isra.0>
 810ec36:	b003      	add	sp, #12
 810ec38:	bd30      	pop	{r4, r5, pc}
 810ec3a:	bf00      	nop
 810ec3c:	10000034 	.word	0x10000034
 810ec40:	10000098 	.word	0x10000098
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111a68 <iprintf>:
 8111a68:	b40f      	push	{r0, r1, r2, r3}
 8111a6a:	4b0a      	ldr	r3, [pc, #40]	; (8111a94 <iprintf+0x2c>)
 8111a6c:	b513      	push	{r0, r1, r4, lr}
 8111a6e:	681c      	ldr	r4, [r3, #0]
 8111a70:	b124      	cbz	r4, 8111a7c <iprintf+0x14>
 8111a72:	69a3      	ldr	r3, [r4, #24]
 8111a74:	b913      	cbnz	r3, 8111a7c <iprintf+0x14>
 8111a76:	4620      	mov	r0, r4
 8111a78:	f001 fa4c 	bl	8112f14 <__sinit>
 8111a7c:	ab05      	add	r3, sp, #20
 8111a7e:	9a04      	ldr	r2, [sp, #16]
 8111a80:	68a1      	ldr	r1, [r4, #8]
 8111a82:	9301      	str	r3, [sp, #4]
 8111a84:	4620      	mov	r0, r4
 8111a86:	f002 f915 	bl	8113cb4 <_vfiprintf_r>
 8111a8a:	b002      	add	sp, #8
 8111a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8111a90:	b004      	add	sp, #16
 8111a92:	4770      	bx	lr
 8111a94:	10000040 	.word	0x10000040
=======
0810ec44 <_vsiprintf_r>:
 810ec44:	b500      	push	{lr}
 810ec46:	b09b      	sub	sp, #108	; 0x6c
 810ec48:	9100      	str	r1, [sp, #0]
 810ec4a:	9104      	str	r1, [sp, #16]
 810ec4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810ec50:	9105      	str	r1, [sp, #20]
 810ec52:	9102      	str	r1, [sp, #8]
 810ec54:	4905      	ldr	r1, [pc, #20]	; (810ec6c <_vsiprintf_r+0x28>)
 810ec56:	9103      	str	r1, [sp, #12]
 810ec58:	4669      	mov	r1, sp
 810ec5a:	f001 fad5 	bl	8110208 <_svfiprintf_r>
 810ec5e:	9b00      	ldr	r3, [sp, #0]
 810ec60:	2200      	movs	r2, #0
 810ec62:	701a      	strb	r2, [r3, #0]
 810ec64:	b01b      	add	sp, #108	; 0x6c
 810ec66:	f85d fb04 	ldr.w	pc, [sp], #4
 810ec6a:	bf00      	nop
 810ec6c:	ffff0208 	.word	0xffff0208
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111a98 <_puts_r>:
 8111a98:	b570      	push	{r4, r5, r6, lr}
 8111a9a:	460e      	mov	r6, r1
 8111a9c:	4605      	mov	r5, r0
 8111a9e:	b118      	cbz	r0, 8111aa8 <_puts_r+0x10>
 8111aa0:	6983      	ldr	r3, [r0, #24]
 8111aa2:	b90b      	cbnz	r3, 8111aa8 <_puts_r+0x10>
 8111aa4:	f001 fa36 	bl	8112f14 <__sinit>
 8111aa8:	69ab      	ldr	r3, [r5, #24]
 8111aaa:	68ac      	ldr	r4, [r5, #8]
 8111aac:	b913      	cbnz	r3, 8111ab4 <_puts_r+0x1c>
 8111aae:	4628      	mov	r0, r5
 8111ab0:	f001 fa30 	bl	8112f14 <__sinit>
 8111ab4:	4b2c      	ldr	r3, [pc, #176]	; (8111b68 <_puts_r+0xd0>)
 8111ab6:	429c      	cmp	r4, r3
 8111ab8:	d120      	bne.n	8111afc <_puts_r+0x64>
 8111aba:	686c      	ldr	r4, [r5, #4]
 8111abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8111abe:	07db      	lsls	r3, r3, #31
 8111ac0:	d405      	bmi.n	8111ace <_puts_r+0x36>
 8111ac2:	89a3      	ldrh	r3, [r4, #12]
 8111ac4:	0598      	lsls	r0, r3, #22
 8111ac6:	d402      	bmi.n	8111ace <_puts_r+0x36>
 8111ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8111aca:	f001 fac6 	bl	811305a <__retarget_lock_acquire_recursive>
 8111ace:	89a3      	ldrh	r3, [r4, #12]
 8111ad0:	0719      	lsls	r1, r3, #28
 8111ad2:	d51d      	bpl.n	8111b10 <_puts_r+0x78>
 8111ad4:	6923      	ldr	r3, [r4, #16]
 8111ad6:	b1db      	cbz	r3, 8111b10 <_puts_r+0x78>
 8111ad8:	3e01      	subs	r6, #1
 8111ada:	68a3      	ldr	r3, [r4, #8]
 8111adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8111ae0:	3b01      	subs	r3, #1
 8111ae2:	60a3      	str	r3, [r4, #8]
 8111ae4:	bb39      	cbnz	r1, 8111b36 <_puts_r+0x9e>
 8111ae6:	2b00      	cmp	r3, #0
 8111ae8:	da38      	bge.n	8111b5c <_puts_r+0xc4>
 8111aea:	4622      	mov	r2, r4
 8111aec:	210a      	movs	r1, #10
 8111aee:	4628      	mov	r0, r5
 8111af0:	f000 f95a 	bl	8111da8 <__swbuf_r>
 8111af4:	3001      	adds	r0, #1
 8111af6:	d011      	beq.n	8111b1c <_puts_r+0x84>
 8111af8:	250a      	movs	r5, #10
 8111afa:	e011      	b.n	8111b20 <_puts_r+0x88>
 8111afc:	4b1b      	ldr	r3, [pc, #108]	; (8111b6c <_puts_r+0xd4>)
 8111afe:	429c      	cmp	r4, r3
 8111b00:	d101      	bne.n	8111b06 <_puts_r+0x6e>
 8111b02:	68ac      	ldr	r4, [r5, #8]
 8111b04:	e7da      	b.n	8111abc <_puts_r+0x24>
 8111b06:	4b1a      	ldr	r3, [pc, #104]	; (8111b70 <_puts_r+0xd8>)
 8111b08:	429c      	cmp	r4, r3
 8111b0a:	bf08      	it	eq
 8111b0c:	68ec      	ldreq	r4, [r5, #12]
 8111b0e:	e7d5      	b.n	8111abc <_puts_r+0x24>
 8111b10:	4621      	mov	r1, r4
 8111b12:	4628      	mov	r0, r5
 8111b14:	f000 f99a 	bl	8111e4c <__swsetup_r>
 8111b18:	2800      	cmp	r0, #0
 8111b1a:	d0dd      	beq.n	8111ad8 <_puts_r+0x40>
 8111b1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8111b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8111b22:	07da      	lsls	r2, r3, #31
 8111b24:	d405      	bmi.n	8111b32 <_puts_r+0x9a>
 8111b26:	89a3      	ldrh	r3, [r4, #12]
 8111b28:	059b      	lsls	r3, r3, #22
 8111b2a:	d402      	bmi.n	8111b32 <_puts_r+0x9a>
 8111b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8111b2e:	f001 fa96 	bl	811305e <__retarget_lock_release_recursive>
 8111b32:	4628      	mov	r0, r5
 8111b34:	bd70      	pop	{r4, r5, r6, pc}
 8111b36:	2b00      	cmp	r3, #0
 8111b38:	da04      	bge.n	8111b44 <_puts_r+0xac>
 8111b3a:	69a2      	ldr	r2, [r4, #24]
 8111b3c:	429a      	cmp	r2, r3
 8111b3e:	dc06      	bgt.n	8111b4e <_puts_r+0xb6>
 8111b40:	290a      	cmp	r1, #10
 8111b42:	d004      	beq.n	8111b4e <_puts_r+0xb6>
 8111b44:	6823      	ldr	r3, [r4, #0]
 8111b46:	1c5a      	adds	r2, r3, #1
 8111b48:	6022      	str	r2, [r4, #0]
 8111b4a:	7019      	strb	r1, [r3, #0]
 8111b4c:	e7c5      	b.n	8111ada <_puts_r+0x42>
 8111b4e:	4622      	mov	r2, r4
 8111b50:	4628      	mov	r0, r5
 8111b52:	f000 f929 	bl	8111da8 <__swbuf_r>
 8111b56:	3001      	adds	r0, #1
 8111b58:	d1bf      	bne.n	8111ada <_puts_r+0x42>
 8111b5a:	e7df      	b.n	8111b1c <_puts_r+0x84>
 8111b5c:	6823      	ldr	r3, [r4, #0]
 8111b5e:	250a      	movs	r5, #10
 8111b60:	1c5a      	adds	r2, r3, #1
 8111b62:	6022      	str	r2, [r4, #0]
 8111b64:	701d      	strb	r5, [r3, #0]
 8111b66:	e7db      	b.n	8111b20 <_puts_r+0x88>
 8111b68:	0811518c 	.word	0x0811518c
 8111b6c:	081151ac 	.word	0x081151ac
 8111b70:	0811516c 	.word	0x0811516c
=======
0810ec70 <vsiprintf>:
 810ec70:	4613      	mov	r3, r2
 810ec72:	460a      	mov	r2, r1
 810ec74:	4601      	mov	r1, r0
 810ec76:	4802      	ldr	r0, [pc, #8]	; (810ec80 <vsiprintf+0x10>)
 810ec78:	6800      	ldr	r0, [r0, #0]
 810ec7a:	f7ff bfe3 	b.w	810ec44 <_vsiprintf_r>
 810ec7e:	bf00      	nop
 810ec80:	10000034 	.word	0x10000034
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111b74 <puts>:
 8111b74:	4b02      	ldr	r3, [pc, #8]	; (8111b80 <puts+0xc>)
 8111b76:	4601      	mov	r1, r0
 8111b78:	6818      	ldr	r0, [r3, #0]
 8111b7a:	f7ff bf8d 	b.w	8111a98 <_puts_r>
 8111b7e:	bf00      	nop
 8111b80:	10000040 	.word	0x10000040
=======
0810ec84 <__register_exitproc>:
 810ec84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ec88:	4d2c      	ldr	r5, [pc, #176]	; (810ed3c <__register_exitproc+0xb8>)
 810ec8a:	682c      	ldr	r4, [r5, #0]
 810ec8c:	4607      	mov	r7, r0
 810ec8e:	460e      	mov	r6, r1
 810ec90:	4691      	mov	r9, r2
 810ec92:	4698      	mov	r8, r3
 810ec94:	b934      	cbnz	r4, 810eca4 <__register_exitproc+0x20>
 810ec96:	4b2a      	ldr	r3, [pc, #168]	; (810ed40 <__register_exitproc+0xbc>)
 810ec98:	4c2a      	ldr	r4, [pc, #168]	; (810ed44 <__register_exitproc+0xc0>)
 810ec9a:	602c      	str	r4, [r5, #0]
 810ec9c:	b113      	cbz	r3, 810eca4 <__register_exitproc+0x20>
 810ec9e:	681b      	ldr	r3, [r3, #0]
 810eca0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 810eca4:	6863      	ldr	r3, [r4, #4]
 810eca6:	2b1f      	cmp	r3, #31
 810eca8:	dd3d      	ble.n	810ed26 <__register_exitproc+0xa2>
 810ecaa:	4b27      	ldr	r3, [pc, #156]	; (810ed48 <__register_exitproc+0xc4>)
 810ecac:	b91b      	cbnz	r3, 810ecb6 <__register_exitproc+0x32>
 810ecae:	f04f 30ff 	mov.w	r0, #4294967295
 810ecb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ecb6:	208c      	movs	r0, #140	; 0x8c
 810ecb8:	f000 fea0 	bl	810f9fc <malloc>
 810ecbc:	4604      	mov	r4, r0
 810ecbe:	2800      	cmp	r0, #0
 810ecc0:	d0f5      	beq.n	810ecae <__register_exitproc+0x2a>
 810ecc2:	2300      	movs	r3, #0
 810ecc4:	682a      	ldr	r2, [r5, #0]
 810ecc6:	6002      	str	r2, [r0, #0]
 810ecc8:	6043      	str	r3, [r0, #4]
 810ecca:	6028      	str	r0, [r5, #0]
 810eccc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 810ecd0:	b30f      	cbz	r7, 810ed16 <__register_exitproc+0x92>
 810ecd2:	f44f 7084 	mov.w	r0, #264	; 0x108
 810ecd6:	f000 fe91 	bl	810f9fc <malloc>
 810ecda:	2800      	cmp	r0, #0
 810ecdc:	d0e7      	beq.n	810ecae <__register_exitproc+0x2a>
 810ecde:	2300      	movs	r3, #0
 810ece0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 810ece4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 810ece8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 810ecec:	6862      	ldr	r2, [r4, #4]
 810ecee:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 810ecf2:	2301      	movs	r3, #1
 810ecf4:	4093      	lsls	r3, r2
 810ecf6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 810ecfa:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 810ecfe:	431a      	orrs	r2, r3
 810ed00:	2f02      	cmp	r7, #2
 810ed02:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 810ed06:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 810ed0a:	bf02      	ittt	eq
 810ed0c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 810ed10:	4313      	orreq	r3, r2
 810ed12:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 810ed16:	6863      	ldr	r3, [r4, #4]
 810ed18:	1c5a      	adds	r2, r3, #1
 810ed1a:	3302      	adds	r3, #2
 810ed1c:	6062      	str	r2, [r4, #4]
 810ed1e:	2000      	movs	r0, #0
 810ed20:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 810ed24:	e7c5      	b.n	810ecb2 <__register_exitproc+0x2e>
 810ed26:	2f00      	cmp	r7, #0
 810ed28:	d0f5      	beq.n	810ed16 <__register_exitproc+0x92>
 810ed2a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 810ed2e:	2800      	cmp	r0, #0
 810ed30:	d1dc      	bne.n	810ecec <__register_exitproc+0x68>
 810ed32:	4b05      	ldr	r3, [pc, #20]	; (810ed48 <__register_exitproc+0xc4>)
 810ed34:	2b00      	cmp	r3, #0
 810ed36:	d0ba      	beq.n	810ecae <__register_exitproc+0x2a>
 810ed38:	e7cb      	b.n	810ecd2 <__register_exitproc+0x4e>
 810ed3a:	bf00      	nop
 810ed3c:	10009600 	.word	0x10009600
 810ed40:	00000000 	.word	0x00000000
 810ed44:	10009574 	.word	0x10009574
 810ed48:	0810f9fd 	.word	0x0810f9fd
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08111b84 <_raise_r>:
 8111b84:	291f      	cmp	r1, #31
 8111b86:	b538      	push	{r3, r4, r5, lr}
 8111b88:	4604      	mov	r4, r0
 8111b8a:	460d      	mov	r5, r1
 8111b8c:	d904      	bls.n	8111b98 <_raise_r+0x14>
 8111b8e:	2316      	movs	r3, #22
 8111b90:	6003      	str	r3, [r0, #0]
 8111b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111b96:	bd38      	pop	{r3, r4, r5, pc}
 8111b98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8111b9a:	b112      	cbz	r2, 8111ba2 <_raise_r+0x1e>
 8111b9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8111ba0:	b94b      	cbnz	r3, 8111bb6 <_raise_r+0x32>
 8111ba2:	4620      	mov	r0, r4
 8111ba4:	f000 f830 	bl	8111c08 <_getpid_r>
 8111ba8:	462a      	mov	r2, r5
 8111baa:	4601      	mov	r1, r0
 8111bac:	4620      	mov	r0, r4
 8111bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8111bb2:	f000 b817 	b.w	8111be4 <_kill_r>
 8111bb6:	2b01      	cmp	r3, #1
 8111bb8:	d00a      	beq.n	8111bd0 <_raise_r+0x4c>
 8111bba:	1c59      	adds	r1, r3, #1
 8111bbc:	d103      	bne.n	8111bc6 <_raise_r+0x42>
 8111bbe:	2316      	movs	r3, #22
 8111bc0:	6003      	str	r3, [r0, #0]
 8111bc2:	2001      	movs	r0, #1
 8111bc4:	e7e7      	b.n	8111b96 <_raise_r+0x12>
 8111bc6:	2400      	movs	r4, #0
 8111bc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8111bcc:	4628      	mov	r0, r5
 8111bce:	4798      	blx	r3
 8111bd0:	2000      	movs	r0, #0
 8111bd2:	e7e0      	b.n	8111b96 <_raise_r+0x12>

08111bd4 <raise>:
 8111bd4:	4b02      	ldr	r3, [pc, #8]	; (8111be0 <raise+0xc>)
 8111bd6:	4601      	mov	r1, r0
 8111bd8:	6818      	ldr	r0, [r3, #0]
 8111bda:	f7ff bfd3 	b.w	8111b84 <_raise_r>
 8111bde:	bf00      	nop
 8111be0:	10000040 	.word	0x10000040

08111be4 <_kill_r>:
 8111be4:	b538      	push	{r3, r4, r5, lr}
 8111be6:	4d07      	ldr	r5, [pc, #28]	; (8111c04 <_kill_r+0x20>)
 8111be8:	2300      	movs	r3, #0
 8111bea:	4604      	mov	r4, r0
 8111bec:	4608      	mov	r0, r1
 8111bee:	4611      	mov	r1, r2
 8111bf0:	602b      	str	r3, [r5, #0]
 8111bf2:	f7f0 f955 	bl	8101ea0 <_kill>
 8111bf6:	1c43      	adds	r3, r0, #1
 8111bf8:	d102      	bne.n	8111c00 <_kill_r+0x1c>
 8111bfa:	682b      	ldr	r3, [r5, #0]
 8111bfc:	b103      	cbz	r3, 8111c00 <_kill_r+0x1c>
 8111bfe:	6023      	str	r3, [r4, #0]
 8111c00:	bd38      	pop	{r3, r4, r5, pc}
 8111c02:	bf00      	nop
 8111c04:	10046674 	.word	0x10046674

08111c08 <_getpid_r>:
 8111c08:	f7f0 b942 	b.w	8101e90 <_getpid>

08111c0c <siprintf>:
 8111c0c:	b40e      	push	{r1, r2, r3}
 8111c0e:	b500      	push	{lr}
 8111c10:	b09c      	sub	sp, #112	; 0x70
 8111c12:	ab1d      	add	r3, sp, #116	; 0x74
 8111c14:	9002      	str	r0, [sp, #8]
 8111c16:	9006      	str	r0, [sp, #24]
 8111c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8111c1c:	4809      	ldr	r0, [pc, #36]	; (8111c44 <siprintf+0x38>)
 8111c1e:	9107      	str	r1, [sp, #28]
 8111c20:	9104      	str	r1, [sp, #16]
 8111c22:	4909      	ldr	r1, [pc, #36]	; (8111c48 <siprintf+0x3c>)
 8111c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8111c28:	9105      	str	r1, [sp, #20]
 8111c2a:	6800      	ldr	r0, [r0, #0]
 8111c2c:	9301      	str	r3, [sp, #4]
 8111c2e:	a902      	add	r1, sp, #8
 8111c30:	f001 ff16 	bl	8113a60 <_svfiprintf_r>
 8111c34:	9b02      	ldr	r3, [sp, #8]
 8111c36:	2200      	movs	r2, #0
 8111c38:	701a      	strb	r2, [r3, #0]
 8111c3a:	b01c      	add	sp, #112	; 0x70
 8111c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8111c40:	b003      	add	sp, #12
 8111c42:	4770      	bx	lr
 8111c44:	10000040 	.word	0x10000040
 8111c48:	ffff0208 	.word	0xffff0208

08111c4c <_strtol_l.isra.0>:
 8111c4c:	2b01      	cmp	r3, #1
 8111c4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111c52:	d001      	beq.n	8111c58 <_strtol_l.isra.0+0xc>
 8111c54:	2b24      	cmp	r3, #36	; 0x24
 8111c56:	d906      	bls.n	8111c66 <_strtol_l.isra.0+0x1a>
 8111c58:	f7ff fa5c 	bl	8111114 <__errno>
 8111c5c:	2316      	movs	r3, #22
 8111c5e:	6003      	str	r3, [r0, #0]
 8111c60:	2000      	movs	r0, #0
 8111c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111c66:	4f3a      	ldr	r7, [pc, #232]	; (8111d50 <_strtol_l.isra.0+0x104>)
 8111c68:	468e      	mov	lr, r1
 8111c6a:	4676      	mov	r6, lr
 8111c6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8111c70:	5de5      	ldrb	r5, [r4, r7]
 8111c72:	f015 0508 	ands.w	r5, r5, #8
 8111c76:	d1f8      	bne.n	8111c6a <_strtol_l.isra.0+0x1e>
 8111c78:	2c2d      	cmp	r4, #45	; 0x2d
 8111c7a:	d134      	bne.n	8111ce6 <_strtol_l.isra.0+0x9a>
 8111c7c:	f89e 4000 	ldrb.w	r4, [lr]
 8111c80:	f04f 0801 	mov.w	r8, #1
 8111c84:	f106 0e02 	add.w	lr, r6, #2
 8111c88:	2b00      	cmp	r3, #0
 8111c8a:	d05c      	beq.n	8111d46 <_strtol_l.isra.0+0xfa>
 8111c8c:	2b10      	cmp	r3, #16
 8111c8e:	d10c      	bne.n	8111caa <_strtol_l.isra.0+0x5e>
 8111c90:	2c30      	cmp	r4, #48	; 0x30
 8111c92:	d10a      	bne.n	8111caa <_strtol_l.isra.0+0x5e>
 8111c94:	f89e 4000 	ldrb.w	r4, [lr]
 8111c98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8111c9c:	2c58      	cmp	r4, #88	; 0x58
 8111c9e:	d14d      	bne.n	8111d3c <_strtol_l.isra.0+0xf0>
 8111ca0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8111ca4:	2310      	movs	r3, #16
 8111ca6:	f10e 0e02 	add.w	lr, lr, #2
 8111caa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8111cae:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8111cb2:	2600      	movs	r6, #0
 8111cb4:	fbbc f9f3 	udiv	r9, ip, r3
 8111cb8:	4635      	mov	r5, r6
 8111cba:	fb03 ca19 	mls	sl, r3, r9, ip
 8111cbe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8111cc2:	2f09      	cmp	r7, #9
 8111cc4:	d818      	bhi.n	8111cf8 <_strtol_l.isra.0+0xac>
 8111cc6:	463c      	mov	r4, r7
 8111cc8:	42a3      	cmp	r3, r4
 8111cca:	dd24      	ble.n	8111d16 <_strtol_l.isra.0+0xca>
 8111ccc:	2e00      	cmp	r6, #0
 8111cce:	db1f      	blt.n	8111d10 <_strtol_l.isra.0+0xc4>
 8111cd0:	45a9      	cmp	r9, r5
 8111cd2:	d31d      	bcc.n	8111d10 <_strtol_l.isra.0+0xc4>
 8111cd4:	d101      	bne.n	8111cda <_strtol_l.isra.0+0x8e>
 8111cd6:	45a2      	cmp	sl, r4
 8111cd8:	db1a      	blt.n	8111d10 <_strtol_l.isra.0+0xc4>
 8111cda:	fb05 4503 	mla	r5, r5, r3, r4
 8111cde:	2601      	movs	r6, #1
 8111ce0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8111ce4:	e7eb      	b.n	8111cbe <_strtol_l.isra.0+0x72>
 8111ce6:	2c2b      	cmp	r4, #43	; 0x2b
 8111ce8:	bf08      	it	eq
 8111cea:	f89e 4000 	ldrbeq.w	r4, [lr]
 8111cee:	46a8      	mov	r8, r5
 8111cf0:	bf08      	it	eq
 8111cf2:	f106 0e02 	addeq.w	lr, r6, #2
 8111cf6:	e7c7      	b.n	8111c88 <_strtol_l.isra.0+0x3c>
 8111cf8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8111cfc:	2f19      	cmp	r7, #25
 8111cfe:	d801      	bhi.n	8111d04 <_strtol_l.isra.0+0xb8>
 8111d00:	3c37      	subs	r4, #55	; 0x37
 8111d02:	e7e1      	b.n	8111cc8 <_strtol_l.isra.0+0x7c>
 8111d04:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8111d08:	2f19      	cmp	r7, #25
 8111d0a:	d804      	bhi.n	8111d16 <_strtol_l.isra.0+0xca>
 8111d0c:	3c57      	subs	r4, #87	; 0x57
 8111d0e:	e7db      	b.n	8111cc8 <_strtol_l.isra.0+0x7c>
 8111d10:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8111d14:	e7e4      	b.n	8111ce0 <_strtol_l.isra.0+0x94>
 8111d16:	2e00      	cmp	r6, #0
 8111d18:	da05      	bge.n	8111d26 <_strtol_l.isra.0+0xda>
 8111d1a:	2322      	movs	r3, #34	; 0x22
 8111d1c:	6003      	str	r3, [r0, #0]
 8111d1e:	4665      	mov	r5, ip
 8111d20:	b942      	cbnz	r2, 8111d34 <_strtol_l.isra.0+0xe8>
 8111d22:	4628      	mov	r0, r5
 8111d24:	e79d      	b.n	8111c62 <_strtol_l.isra.0+0x16>
 8111d26:	f1b8 0f00 	cmp.w	r8, #0
 8111d2a:	d000      	beq.n	8111d2e <_strtol_l.isra.0+0xe2>
 8111d2c:	426d      	negs	r5, r5
 8111d2e:	2a00      	cmp	r2, #0
 8111d30:	d0f7      	beq.n	8111d22 <_strtol_l.isra.0+0xd6>
 8111d32:	b10e      	cbz	r6, 8111d38 <_strtol_l.isra.0+0xec>
 8111d34:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8111d38:	6011      	str	r1, [r2, #0]
 8111d3a:	e7f2      	b.n	8111d22 <_strtol_l.isra.0+0xd6>
 8111d3c:	2430      	movs	r4, #48	; 0x30
 8111d3e:	2b00      	cmp	r3, #0
 8111d40:	d1b3      	bne.n	8111caa <_strtol_l.isra.0+0x5e>
 8111d42:	2308      	movs	r3, #8
 8111d44:	e7b1      	b.n	8111caa <_strtol_l.isra.0+0x5e>
 8111d46:	2c30      	cmp	r4, #48	; 0x30
 8111d48:	d0a4      	beq.n	8111c94 <_strtol_l.isra.0+0x48>
 8111d4a:	230a      	movs	r3, #10
 8111d4c:	e7ad      	b.n	8111caa <_strtol_l.isra.0+0x5e>
 8111d4e:	bf00      	nop
 8111d50:	08114fd5 	.word	0x08114fd5

08111d54 <strtol>:
 8111d54:	4613      	mov	r3, r2
 8111d56:	460a      	mov	r2, r1
 8111d58:	4601      	mov	r1, r0
 8111d5a:	4802      	ldr	r0, [pc, #8]	; (8111d64 <strtol+0x10>)
 8111d5c:	6800      	ldr	r0, [r0, #0]
 8111d5e:	f7ff bf75 	b.w	8111c4c <_strtol_l.isra.0>
 8111d62:	bf00      	nop
 8111d64:	10000040 	.word	0x10000040

08111d68 <_vsiprintf_r>:
 8111d68:	b500      	push	{lr}
 8111d6a:	b09b      	sub	sp, #108	; 0x6c
 8111d6c:	9100      	str	r1, [sp, #0]
 8111d6e:	9104      	str	r1, [sp, #16]
 8111d70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8111d74:	9105      	str	r1, [sp, #20]
 8111d76:	9102      	str	r1, [sp, #8]
 8111d78:	4905      	ldr	r1, [pc, #20]	; (8111d90 <_vsiprintf_r+0x28>)
 8111d7a:	9103      	str	r1, [sp, #12]
 8111d7c:	4669      	mov	r1, sp
 8111d7e:	f001 fe6f 	bl	8113a60 <_svfiprintf_r>
 8111d82:	9b00      	ldr	r3, [sp, #0]
 8111d84:	2200      	movs	r2, #0
 8111d86:	701a      	strb	r2, [r3, #0]
 8111d88:	b01b      	add	sp, #108	; 0x6c
 8111d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8111d8e:	bf00      	nop
 8111d90:	ffff0208 	.word	0xffff0208

08111d94 <vsiprintf>:
 8111d94:	4613      	mov	r3, r2
 8111d96:	460a      	mov	r2, r1
 8111d98:	4601      	mov	r1, r0
 8111d9a:	4802      	ldr	r0, [pc, #8]	; (8111da4 <vsiprintf+0x10>)
 8111d9c:	6800      	ldr	r0, [r0, #0]
 8111d9e:	f7ff bfe3 	b.w	8111d68 <_vsiprintf_r>
 8111da2:	bf00      	nop
 8111da4:	10000040 	.word	0x10000040

08111da8 <__swbuf_r>:
 8111da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111daa:	460e      	mov	r6, r1
 8111dac:	4614      	mov	r4, r2
 8111dae:	4605      	mov	r5, r0
 8111db0:	b118      	cbz	r0, 8111dba <__swbuf_r+0x12>
 8111db2:	6983      	ldr	r3, [r0, #24]
 8111db4:	b90b      	cbnz	r3, 8111dba <__swbuf_r+0x12>
 8111db6:	f001 f8ad 	bl	8112f14 <__sinit>
 8111dba:	4b21      	ldr	r3, [pc, #132]	; (8111e40 <__swbuf_r+0x98>)
 8111dbc:	429c      	cmp	r4, r3
 8111dbe:	d12b      	bne.n	8111e18 <__swbuf_r+0x70>
 8111dc0:	686c      	ldr	r4, [r5, #4]
 8111dc2:	69a3      	ldr	r3, [r4, #24]
 8111dc4:	60a3      	str	r3, [r4, #8]
 8111dc6:	89a3      	ldrh	r3, [r4, #12]
 8111dc8:	071a      	lsls	r2, r3, #28
 8111dca:	d52f      	bpl.n	8111e2c <__swbuf_r+0x84>
 8111dcc:	6923      	ldr	r3, [r4, #16]
 8111dce:	b36b      	cbz	r3, 8111e2c <__swbuf_r+0x84>
 8111dd0:	6923      	ldr	r3, [r4, #16]
 8111dd2:	6820      	ldr	r0, [r4, #0]
 8111dd4:	1ac0      	subs	r0, r0, r3
 8111dd6:	6963      	ldr	r3, [r4, #20]
 8111dd8:	b2f6      	uxtb	r6, r6
 8111dda:	4283      	cmp	r3, r0
 8111ddc:	4637      	mov	r7, r6
 8111dde:	dc04      	bgt.n	8111dea <__swbuf_r+0x42>
 8111de0:	4621      	mov	r1, r4
 8111de2:	4628      	mov	r0, r5
 8111de4:	f001 f802 	bl	8112dec <_fflush_r>
 8111de8:	bb30      	cbnz	r0, 8111e38 <__swbuf_r+0x90>
 8111dea:	68a3      	ldr	r3, [r4, #8]
 8111dec:	3b01      	subs	r3, #1
 8111dee:	60a3      	str	r3, [r4, #8]
 8111df0:	6823      	ldr	r3, [r4, #0]
 8111df2:	1c5a      	adds	r2, r3, #1
 8111df4:	6022      	str	r2, [r4, #0]
 8111df6:	701e      	strb	r6, [r3, #0]
 8111df8:	6963      	ldr	r3, [r4, #20]
 8111dfa:	3001      	adds	r0, #1
 8111dfc:	4283      	cmp	r3, r0
 8111dfe:	d004      	beq.n	8111e0a <__swbuf_r+0x62>
 8111e00:	89a3      	ldrh	r3, [r4, #12]
 8111e02:	07db      	lsls	r3, r3, #31
 8111e04:	d506      	bpl.n	8111e14 <__swbuf_r+0x6c>
 8111e06:	2e0a      	cmp	r6, #10
 8111e08:	d104      	bne.n	8111e14 <__swbuf_r+0x6c>
 8111e0a:	4621      	mov	r1, r4
 8111e0c:	4628      	mov	r0, r5
 8111e0e:	f000 ffed 	bl	8112dec <_fflush_r>
 8111e12:	b988      	cbnz	r0, 8111e38 <__swbuf_r+0x90>
 8111e14:	4638      	mov	r0, r7
 8111e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8111e18:	4b0a      	ldr	r3, [pc, #40]	; (8111e44 <__swbuf_r+0x9c>)
 8111e1a:	429c      	cmp	r4, r3
 8111e1c:	d101      	bne.n	8111e22 <__swbuf_r+0x7a>
 8111e1e:	68ac      	ldr	r4, [r5, #8]
 8111e20:	e7cf      	b.n	8111dc2 <__swbuf_r+0x1a>
 8111e22:	4b09      	ldr	r3, [pc, #36]	; (8111e48 <__swbuf_r+0xa0>)
 8111e24:	429c      	cmp	r4, r3
 8111e26:	bf08      	it	eq
 8111e28:	68ec      	ldreq	r4, [r5, #12]
 8111e2a:	e7ca      	b.n	8111dc2 <__swbuf_r+0x1a>
 8111e2c:	4621      	mov	r1, r4
 8111e2e:	4628      	mov	r0, r5
 8111e30:	f000 f80c 	bl	8111e4c <__swsetup_r>
 8111e34:	2800      	cmp	r0, #0
 8111e36:	d0cb      	beq.n	8111dd0 <__swbuf_r+0x28>
 8111e38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8111e3c:	e7ea      	b.n	8111e14 <__swbuf_r+0x6c>
 8111e3e:	bf00      	nop
 8111e40:	0811518c 	.word	0x0811518c
 8111e44:	081151ac 	.word	0x081151ac
 8111e48:	0811516c 	.word	0x0811516c

08111e4c <__swsetup_r>:
 8111e4c:	4b32      	ldr	r3, [pc, #200]	; (8111f18 <__swsetup_r+0xcc>)
 8111e4e:	b570      	push	{r4, r5, r6, lr}
 8111e50:	681d      	ldr	r5, [r3, #0]
 8111e52:	4606      	mov	r6, r0
 8111e54:	460c      	mov	r4, r1
 8111e56:	b125      	cbz	r5, 8111e62 <__swsetup_r+0x16>
 8111e58:	69ab      	ldr	r3, [r5, #24]
 8111e5a:	b913      	cbnz	r3, 8111e62 <__swsetup_r+0x16>
 8111e5c:	4628      	mov	r0, r5
 8111e5e:	f001 f859 	bl	8112f14 <__sinit>
 8111e62:	4b2e      	ldr	r3, [pc, #184]	; (8111f1c <__swsetup_r+0xd0>)
 8111e64:	429c      	cmp	r4, r3
 8111e66:	d10f      	bne.n	8111e88 <__swsetup_r+0x3c>
 8111e68:	686c      	ldr	r4, [r5, #4]
 8111e6a:	89a3      	ldrh	r3, [r4, #12]
 8111e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8111e70:	0719      	lsls	r1, r3, #28
 8111e72:	d42c      	bmi.n	8111ece <__swsetup_r+0x82>
 8111e74:	06dd      	lsls	r5, r3, #27
 8111e76:	d411      	bmi.n	8111e9c <__swsetup_r+0x50>
 8111e78:	2309      	movs	r3, #9
 8111e7a:	6033      	str	r3, [r6, #0]
 8111e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8111e80:	81a3      	strh	r3, [r4, #12]
 8111e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111e86:	e03e      	b.n	8111f06 <__swsetup_r+0xba>
 8111e88:	4b25      	ldr	r3, [pc, #148]	; (8111f20 <__swsetup_r+0xd4>)
 8111e8a:	429c      	cmp	r4, r3
 8111e8c:	d101      	bne.n	8111e92 <__swsetup_r+0x46>
 8111e8e:	68ac      	ldr	r4, [r5, #8]
 8111e90:	e7eb      	b.n	8111e6a <__swsetup_r+0x1e>
 8111e92:	4b24      	ldr	r3, [pc, #144]	; (8111f24 <__swsetup_r+0xd8>)
 8111e94:	429c      	cmp	r4, r3
 8111e96:	bf08      	it	eq
 8111e98:	68ec      	ldreq	r4, [r5, #12]
 8111e9a:	e7e6      	b.n	8111e6a <__swsetup_r+0x1e>
 8111e9c:	0758      	lsls	r0, r3, #29
 8111e9e:	d512      	bpl.n	8111ec6 <__swsetup_r+0x7a>
 8111ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8111ea2:	b141      	cbz	r1, 8111eb6 <__swsetup_r+0x6a>
 8111ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8111ea8:	4299      	cmp	r1, r3
 8111eaa:	d002      	beq.n	8111eb2 <__swsetup_r+0x66>
 8111eac:	4630      	mov	r0, r6
 8111eae:	f001 fcd1 	bl	8113854 <_free_r>
 8111eb2:	2300      	movs	r3, #0
 8111eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8111eb6:	89a3      	ldrh	r3, [r4, #12]
 8111eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8111ebc:	81a3      	strh	r3, [r4, #12]
 8111ebe:	2300      	movs	r3, #0
 8111ec0:	6063      	str	r3, [r4, #4]
 8111ec2:	6923      	ldr	r3, [r4, #16]
 8111ec4:	6023      	str	r3, [r4, #0]
 8111ec6:	89a3      	ldrh	r3, [r4, #12]
 8111ec8:	f043 0308 	orr.w	r3, r3, #8
 8111ecc:	81a3      	strh	r3, [r4, #12]
 8111ece:	6923      	ldr	r3, [r4, #16]
 8111ed0:	b94b      	cbnz	r3, 8111ee6 <__swsetup_r+0x9a>
 8111ed2:	89a3      	ldrh	r3, [r4, #12]
 8111ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8111ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8111edc:	d003      	beq.n	8111ee6 <__swsetup_r+0x9a>
 8111ede:	4621      	mov	r1, r4
 8111ee0:	4630      	mov	r0, r6
 8111ee2:	f001 f8e1 	bl	81130a8 <__smakebuf_r>
 8111ee6:	89a0      	ldrh	r0, [r4, #12]
 8111ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8111eec:	f010 0301 	ands.w	r3, r0, #1
 8111ef0:	d00a      	beq.n	8111f08 <__swsetup_r+0xbc>
 8111ef2:	2300      	movs	r3, #0
 8111ef4:	60a3      	str	r3, [r4, #8]
 8111ef6:	6963      	ldr	r3, [r4, #20]
 8111ef8:	425b      	negs	r3, r3
 8111efa:	61a3      	str	r3, [r4, #24]
 8111efc:	6923      	ldr	r3, [r4, #16]
 8111efe:	b943      	cbnz	r3, 8111f12 <__swsetup_r+0xc6>
 8111f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8111f04:	d1ba      	bne.n	8111e7c <__swsetup_r+0x30>
 8111f06:	bd70      	pop	{r4, r5, r6, pc}
 8111f08:	0781      	lsls	r1, r0, #30
 8111f0a:	bf58      	it	pl
 8111f0c:	6963      	ldrpl	r3, [r4, #20]
 8111f0e:	60a3      	str	r3, [r4, #8]
 8111f10:	e7f4      	b.n	8111efc <__swsetup_r+0xb0>
 8111f12:	2000      	movs	r0, #0
 8111f14:	e7f7      	b.n	8111f06 <__swsetup_r+0xba>
 8111f16:	bf00      	nop
 8111f18:	10000040 	.word	0x10000040
 8111f1c:	0811518c 	.word	0x0811518c
 8111f20:	081151ac 	.word	0x081151ac
 8111f24:	0811516c 	.word	0x0811516c

08111f28 <__register_exitproc>:
 8111f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111f2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8111fe8 <__register_exitproc+0xc0>
 8111f30:	4606      	mov	r6, r0
 8111f32:	f8d8 0000 	ldr.w	r0, [r8]
 8111f36:	461f      	mov	r7, r3
 8111f38:	460d      	mov	r5, r1
 8111f3a:	4691      	mov	r9, r2
 8111f3c:	f001 f88d 	bl	811305a <__retarget_lock_acquire_recursive>
 8111f40:	4b25      	ldr	r3, [pc, #148]	; (8111fd8 <__register_exitproc+0xb0>)
 8111f42:	681c      	ldr	r4, [r3, #0]
 8111f44:	b934      	cbnz	r4, 8111f54 <__register_exitproc+0x2c>
 8111f46:	4c25      	ldr	r4, [pc, #148]	; (8111fdc <__register_exitproc+0xb4>)
 8111f48:	601c      	str	r4, [r3, #0]
 8111f4a:	4b25      	ldr	r3, [pc, #148]	; (8111fe0 <__register_exitproc+0xb8>)
 8111f4c:	b113      	cbz	r3, 8111f54 <__register_exitproc+0x2c>
 8111f4e:	681b      	ldr	r3, [r3, #0]
 8111f50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8111f54:	6863      	ldr	r3, [r4, #4]
 8111f56:	2b1f      	cmp	r3, #31
 8111f58:	dd07      	ble.n	8111f6a <__register_exitproc+0x42>
 8111f5a:	f8d8 0000 	ldr.w	r0, [r8]
 8111f5e:	f001 f87e 	bl	811305e <__retarget_lock_release_recursive>
 8111f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111f6a:	b34e      	cbz	r6, 8111fc0 <__register_exitproc+0x98>
 8111f6c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8111f70:	b988      	cbnz	r0, 8111f96 <__register_exitproc+0x6e>
 8111f72:	4b1c      	ldr	r3, [pc, #112]	; (8111fe4 <__register_exitproc+0xbc>)
 8111f74:	b923      	cbnz	r3, 8111f80 <__register_exitproc+0x58>
 8111f76:	f8d8 0000 	ldr.w	r0, [r8]
 8111f7a:	f001 f86f 	bl	811305c <__retarget_lock_release>
 8111f7e:	e7f0      	b.n	8111f62 <__register_exitproc+0x3a>
 8111f80:	f44f 7084 	mov.w	r0, #264	; 0x108
 8111f84:	f001 f8d0 	bl	8113128 <malloc>
 8111f88:	2800      	cmp	r0, #0
 8111f8a:	d0f4      	beq.n	8111f76 <__register_exitproc+0x4e>
 8111f8c:	2300      	movs	r3, #0
 8111f8e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8111f92:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8111f96:	6863      	ldr	r3, [r4, #4]
 8111f98:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8111f9c:	2201      	movs	r2, #1
 8111f9e:	409a      	lsls	r2, r3
 8111fa0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8111fa4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8111fa8:	4313      	orrs	r3, r2
 8111faa:	2e02      	cmp	r6, #2
 8111fac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8111fb0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8111fb4:	bf02      	ittt	eq
 8111fb6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8111fba:	431a      	orreq	r2, r3
 8111fbc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8111fc0:	6863      	ldr	r3, [r4, #4]
 8111fc2:	f8d8 0000 	ldr.w	r0, [r8]
 8111fc6:	1c5a      	adds	r2, r3, #1
 8111fc8:	3302      	adds	r3, #2
 8111fca:	6062      	str	r2, [r4, #4]
 8111fcc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8111fd0:	f001 f845 	bl	811305e <__retarget_lock_release_recursive>
 8111fd4:	2000      	movs	r0, #0
 8111fd6:	e7c6      	b.n	8111f66 <__register_exitproc+0x3e>
 8111fd8:	10045ca0 	.word	0x10045ca0
 8111fdc:	10045c14 	.word	0x10045c14
 8111fe0:	00000000 	.word	0x00000000
 8111fe4:	08113129 	.word	0x08113129
 8111fe8:	100000a4 	.word	0x100000a4

08111fec <quorem>:
 8111fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111ff0:	6903      	ldr	r3, [r0, #16]
 8111ff2:	690c      	ldr	r4, [r1, #16]
 8111ff4:	42a3      	cmp	r3, r4
 8111ff6:	4607      	mov	r7, r0
 8111ff8:	f2c0 8081 	blt.w	81120fe <quorem+0x112>
 8111ffc:	3c01      	subs	r4, #1
 8111ffe:	f101 0814 	add.w	r8, r1, #20
 8112002:	f100 0514 	add.w	r5, r0, #20
 8112006:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811200a:	9301      	str	r3, [sp, #4]
 811200c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8112010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8112014:	3301      	adds	r3, #1
 8112016:	429a      	cmp	r2, r3
 8112018:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 811201c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8112020:	fbb2 f6f3 	udiv	r6, r2, r3
 8112024:	d331      	bcc.n	811208a <quorem+0x9e>
 8112026:	f04f 0e00 	mov.w	lr, #0
 811202a:	4640      	mov	r0, r8
 811202c:	46ac      	mov	ip, r5
 811202e:	46f2      	mov	sl, lr
 8112030:	f850 2b04 	ldr.w	r2, [r0], #4
 8112034:	b293      	uxth	r3, r2
 8112036:	fb06 e303 	mla	r3, r6, r3, lr
 811203a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 811203e:	b29b      	uxth	r3, r3
 8112040:	ebaa 0303 	sub.w	r3, sl, r3
 8112044:	0c12      	lsrs	r2, r2, #16
 8112046:	f8dc a000 	ldr.w	sl, [ip]
 811204a:	fb06 e202 	mla	r2, r6, r2, lr
 811204e:	fa13 f38a 	uxtah	r3, r3, sl
 8112052:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8112056:	fa1f fa82 	uxth.w	sl, r2
 811205a:	f8dc 2000 	ldr.w	r2, [ip]
 811205e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8112062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8112066:	b29b      	uxth	r3, r3
 8112068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 811206c:	4581      	cmp	r9, r0
 811206e:	f84c 3b04 	str.w	r3, [ip], #4
 8112072:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8112076:	d2db      	bcs.n	8112030 <quorem+0x44>
 8112078:	f855 300b 	ldr.w	r3, [r5, fp]
 811207c:	b92b      	cbnz	r3, 811208a <quorem+0x9e>
 811207e:	9b01      	ldr	r3, [sp, #4]
 8112080:	3b04      	subs	r3, #4
 8112082:	429d      	cmp	r5, r3
 8112084:	461a      	mov	r2, r3
 8112086:	d32e      	bcc.n	81120e6 <quorem+0xfa>
 8112088:	613c      	str	r4, [r7, #16]
 811208a:	4638      	mov	r0, r7
 811208c:	f001 fad2 	bl	8113634 <__mcmp>
 8112090:	2800      	cmp	r0, #0
 8112092:	db24      	blt.n	81120de <quorem+0xf2>
 8112094:	3601      	adds	r6, #1
 8112096:	4628      	mov	r0, r5
 8112098:	f04f 0c00 	mov.w	ip, #0
 811209c:	f858 2b04 	ldr.w	r2, [r8], #4
 81120a0:	f8d0 e000 	ldr.w	lr, [r0]
 81120a4:	b293      	uxth	r3, r2
 81120a6:	ebac 0303 	sub.w	r3, ip, r3
 81120aa:	0c12      	lsrs	r2, r2, #16
 81120ac:	fa13 f38e 	uxtah	r3, r3, lr
 81120b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 81120b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81120b8:	b29b      	uxth	r3, r3
 81120ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81120be:	45c1      	cmp	r9, r8
 81120c0:	f840 3b04 	str.w	r3, [r0], #4
 81120c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 81120c8:	d2e8      	bcs.n	811209c <quorem+0xb0>
 81120ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81120ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81120d2:	b922      	cbnz	r2, 81120de <quorem+0xf2>
 81120d4:	3b04      	subs	r3, #4
 81120d6:	429d      	cmp	r5, r3
 81120d8:	461a      	mov	r2, r3
 81120da:	d30a      	bcc.n	81120f2 <quorem+0x106>
 81120dc:	613c      	str	r4, [r7, #16]
 81120de:	4630      	mov	r0, r6
 81120e0:	b003      	add	sp, #12
 81120e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81120e6:	6812      	ldr	r2, [r2, #0]
 81120e8:	3b04      	subs	r3, #4
 81120ea:	2a00      	cmp	r2, #0
 81120ec:	d1cc      	bne.n	8112088 <quorem+0x9c>
 81120ee:	3c01      	subs	r4, #1
 81120f0:	e7c7      	b.n	8112082 <quorem+0x96>
 81120f2:	6812      	ldr	r2, [r2, #0]
 81120f4:	3b04      	subs	r3, #4
 81120f6:	2a00      	cmp	r2, #0
 81120f8:	d1f0      	bne.n	81120dc <quorem+0xf0>
 81120fa:	3c01      	subs	r4, #1
 81120fc:	e7eb      	b.n	81120d6 <quorem+0xea>
 81120fe:	2000      	movs	r0, #0
 8112100:	e7ee      	b.n	81120e0 <quorem+0xf4>
 8112102:	0000      	movs	r0, r0
 8112104:	0000      	movs	r0, r0
=======
0810ed4c <quorem>:
 810ed4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ed50:	6903      	ldr	r3, [r0, #16]
 810ed52:	690c      	ldr	r4, [r1, #16]
 810ed54:	42a3      	cmp	r3, r4
 810ed56:	4680      	mov	r8, r0
 810ed58:	f2c0 8082 	blt.w	810ee60 <quorem+0x114>
 810ed5c:	3c01      	subs	r4, #1
 810ed5e:	f101 0714 	add.w	r7, r1, #20
 810ed62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 810ed66:	f100 0614 	add.w	r6, r0, #20
 810ed6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 810ed6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 810ed72:	eb06 030c 	add.w	r3, r6, ip
 810ed76:	3501      	adds	r5, #1
 810ed78:	eb07 090c 	add.w	r9, r7, ip
 810ed7c:	9301      	str	r3, [sp, #4]
 810ed7e:	fbb0 f5f5 	udiv	r5, r0, r5
 810ed82:	b395      	cbz	r5, 810edea <quorem+0x9e>
 810ed84:	f04f 0a00 	mov.w	sl, #0
 810ed88:	4638      	mov	r0, r7
 810ed8a:	46b6      	mov	lr, r6
 810ed8c:	46d3      	mov	fp, sl
 810ed8e:	f850 2b04 	ldr.w	r2, [r0], #4
 810ed92:	b293      	uxth	r3, r2
 810ed94:	fb05 a303 	mla	r3, r5, r3, sl
 810ed98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810ed9c:	b29b      	uxth	r3, r3
 810ed9e:	ebab 0303 	sub.w	r3, fp, r3
 810eda2:	0c12      	lsrs	r2, r2, #16
 810eda4:	f8de b000 	ldr.w	fp, [lr]
 810eda8:	fb05 a202 	mla	r2, r5, r2, sl
 810edac:	fa13 f38b 	uxtah	r3, r3, fp
 810edb0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 810edb4:	fa1f fb82 	uxth.w	fp, r2
 810edb8:	f8de 2000 	ldr.w	r2, [lr]
 810edbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 810edc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810edc4:	b29b      	uxth	r3, r3
 810edc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810edca:	4581      	cmp	r9, r0
 810edcc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 810edd0:	f84e 3b04 	str.w	r3, [lr], #4
 810edd4:	d2db      	bcs.n	810ed8e <quorem+0x42>
 810edd6:	f856 300c 	ldr.w	r3, [r6, ip]
 810edda:	b933      	cbnz	r3, 810edea <quorem+0x9e>
 810eddc:	9b01      	ldr	r3, [sp, #4]
 810edde:	3b04      	subs	r3, #4
 810ede0:	429e      	cmp	r6, r3
 810ede2:	461a      	mov	r2, r3
 810ede4:	d330      	bcc.n	810ee48 <quorem+0xfc>
 810ede6:	f8c8 4010 	str.w	r4, [r8, #16]
 810edea:	4640      	mov	r0, r8
 810edec:	f001 f836 	bl	810fe5c <__mcmp>
 810edf0:	2800      	cmp	r0, #0
 810edf2:	db25      	blt.n	810ee40 <quorem+0xf4>
 810edf4:	3501      	adds	r5, #1
 810edf6:	4630      	mov	r0, r6
 810edf8:	f04f 0c00 	mov.w	ip, #0
 810edfc:	f857 2b04 	ldr.w	r2, [r7], #4
 810ee00:	f8d0 e000 	ldr.w	lr, [r0]
 810ee04:	b293      	uxth	r3, r2
 810ee06:	ebac 0303 	sub.w	r3, ip, r3
 810ee0a:	0c12      	lsrs	r2, r2, #16
 810ee0c:	fa13 f38e 	uxtah	r3, r3, lr
 810ee10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810ee14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ee18:	b29b      	uxth	r3, r3
 810ee1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ee1e:	45b9      	cmp	r9, r7
 810ee20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810ee24:	f840 3b04 	str.w	r3, [r0], #4
 810ee28:	d2e8      	bcs.n	810edfc <quorem+0xb0>
 810ee2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 810ee2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 810ee32:	b92a      	cbnz	r2, 810ee40 <quorem+0xf4>
 810ee34:	3b04      	subs	r3, #4
 810ee36:	429e      	cmp	r6, r3
 810ee38:	461a      	mov	r2, r3
 810ee3a:	d30b      	bcc.n	810ee54 <quorem+0x108>
 810ee3c:	f8c8 4010 	str.w	r4, [r8, #16]
 810ee40:	4628      	mov	r0, r5
 810ee42:	b003      	add	sp, #12
 810ee44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ee48:	6812      	ldr	r2, [r2, #0]
 810ee4a:	3b04      	subs	r3, #4
 810ee4c:	2a00      	cmp	r2, #0
 810ee4e:	d1ca      	bne.n	810ede6 <quorem+0x9a>
 810ee50:	3c01      	subs	r4, #1
 810ee52:	e7c5      	b.n	810ede0 <quorem+0x94>
 810ee54:	6812      	ldr	r2, [r2, #0]
 810ee56:	3b04      	subs	r3, #4
 810ee58:	2a00      	cmp	r2, #0
 810ee5a:	d1ef      	bne.n	810ee3c <quorem+0xf0>
 810ee5c:	3c01      	subs	r4, #1
 810ee5e:	e7ea      	b.n	810ee36 <quorem+0xea>
 810ee60:	2000      	movs	r0, #0
 810ee62:	e7ee      	b.n	810ee42 <quorem+0xf6>
 810ee64:	0000      	movs	r0, r0
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08112108 <_dtoa_r>:
 8112108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811210c:	ed2d 8b02 	vpush	{d8}
 8112110:	ec57 6b10 	vmov	r6, r7, d0
 8112114:	b095      	sub	sp, #84	; 0x54
 8112116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8112118:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 811211c:	9105      	str	r1, [sp, #20]
 811211e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8112122:	4604      	mov	r4, r0
 8112124:	9209      	str	r2, [sp, #36]	; 0x24
 8112126:	930f      	str	r3, [sp, #60]	; 0x3c
 8112128:	b975      	cbnz	r5, 8112148 <_dtoa_r+0x40>
 811212a:	2010      	movs	r0, #16
 811212c:	f000 fffc 	bl	8113128 <malloc>
 8112130:	4602      	mov	r2, r0
 8112132:	6260      	str	r0, [r4, #36]	; 0x24
 8112134:	b920      	cbnz	r0, 8112140 <_dtoa_r+0x38>
 8112136:	4bb2      	ldr	r3, [pc, #712]	; (8112400 <_dtoa_r+0x2f8>)
 8112138:	21ea      	movs	r1, #234	; 0xea
 811213a:	48b2      	ldr	r0, [pc, #712]	; (8112404 <_dtoa_r+0x2fc>)
 811213c:	f001 ff50 	bl	8113fe0 <__assert_func>
 8112140:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8112144:	6005      	str	r5, [r0, #0]
 8112146:	60c5      	str	r5, [r0, #12]
 8112148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 811214a:	6819      	ldr	r1, [r3, #0]
 811214c:	b151      	cbz	r1, 8112164 <_dtoa_r+0x5c>
 811214e:	685a      	ldr	r2, [r3, #4]
 8112150:	604a      	str	r2, [r1, #4]
 8112152:	2301      	movs	r3, #1
 8112154:	4093      	lsls	r3, r2
 8112156:	608b      	str	r3, [r1, #8]
 8112158:	4620      	mov	r0, r4
 811215a:	f001 f82d 	bl	81131b8 <_Bfree>
 811215e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8112160:	2200      	movs	r2, #0
 8112162:	601a      	str	r2, [r3, #0]
 8112164:	1e3b      	subs	r3, r7, #0
 8112166:	bfb9      	ittee	lt
 8112168:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 811216c:	9303      	strlt	r3, [sp, #12]
 811216e:	2300      	movge	r3, #0
 8112170:	f8c8 3000 	strge.w	r3, [r8]
 8112174:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8112178:	4ba3      	ldr	r3, [pc, #652]	; (8112408 <_dtoa_r+0x300>)
 811217a:	bfbc      	itt	lt
 811217c:	2201      	movlt	r2, #1
 811217e:	f8c8 2000 	strlt.w	r2, [r8]
 8112182:	ea33 0309 	bics.w	r3, r3, r9
 8112186:	d11b      	bne.n	81121c0 <_dtoa_r+0xb8>
 8112188:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 811218a:	f242 730f 	movw	r3, #9999	; 0x270f
 811218e:	6013      	str	r3, [r2, #0]
 8112190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8112194:	4333      	orrs	r3, r6
 8112196:	f000 857a 	beq.w	8112c8e <_dtoa_r+0xb86>
 811219a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 811219c:	b963      	cbnz	r3, 81121b8 <_dtoa_r+0xb0>
 811219e:	4b9b      	ldr	r3, [pc, #620]	; (811240c <_dtoa_r+0x304>)
 81121a0:	e024      	b.n	81121ec <_dtoa_r+0xe4>
 81121a2:	4b9b      	ldr	r3, [pc, #620]	; (8112410 <_dtoa_r+0x308>)
 81121a4:	9300      	str	r3, [sp, #0]
 81121a6:	3308      	adds	r3, #8
 81121a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 81121aa:	6013      	str	r3, [r2, #0]
 81121ac:	9800      	ldr	r0, [sp, #0]
 81121ae:	b015      	add	sp, #84	; 0x54
 81121b0:	ecbd 8b02 	vpop	{d8}
 81121b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81121b8:	4b94      	ldr	r3, [pc, #592]	; (811240c <_dtoa_r+0x304>)
 81121ba:	9300      	str	r3, [sp, #0]
 81121bc:	3303      	adds	r3, #3
 81121be:	e7f3      	b.n	81121a8 <_dtoa_r+0xa0>
 81121c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 81121c4:	2200      	movs	r2, #0
 81121c6:	ec51 0b17 	vmov	r0, r1, d7
 81121ca:	2300      	movs	r3, #0
 81121cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 81121d0:	f7ee fd12 	bl	8100bf8 <__aeabi_dcmpeq>
 81121d4:	4680      	mov	r8, r0
 81121d6:	b158      	cbz	r0, 81121f0 <_dtoa_r+0xe8>
 81121d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81121da:	2301      	movs	r3, #1
 81121dc:	6013      	str	r3, [r2, #0]
 81121de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81121e0:	2b00      	cmp	r3, #0
 81121e2:	f000 8551 	beq.w	8112c88 <_dtoa_r+0xb80>
 81121e6:	488b      	ldr	r0, [pc, #556]	; (8112414 <_dtoa_r+0x30c>)
 81121e8:	6018      	str	r0, [r3, #0]
 81121ea:	1e43      	subs	r3, r0, #1
 81121ec:	9300      	str	r3, [sp, #0]
 81121ee:	e7dd      	b.n	81121ac <_dtoa_r+0xa4>
 81121f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 81121f4:	aa12      	add	r2, sp, #72	; 0x48
 81121f6:	a913      	add	r1, sp, #76	; 0x4c
 81121f8:	4620      	mov	r0, r4
 81121fa:	f001 fabf 	bl	811377c <__d2b>
 81121fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8112202:	4683      	mov	fp, r0
 8112204:	2d00      	cmp	r5, #0
 8112206:	d07c      	beq.n	8112302 <_dtoa_r+0x1fa>
 8112208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 811220a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 811220e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112212:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8112216:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 811221a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 811221e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8112222:	4b7d      	ldr	r3, [pc, #500]	; (8112418 <_dtoa_r+0x310>)
 8112224:	2200      	movs	r2, #0
 8112226:	4630      	mov	r0, r6
 8112228:	4639      	mov	r1, r7
 811222a:	f7ee f8c5 	bl	81003b8 <__aeabi_dsub>
 811222e:	a36e      	add	r3, pc, #440	; (adr r3, 81123e8 <_dtoa_r+0x2e0>)
 8112230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112234:	f7ee fa78 	bl	8100728 <__aeabi_dmul>
 8112238:	a36d      	add	r3, pc, #436	; (adr r3, 81123f0 <_dtoa_r+0x2e8>)
 811223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811223e:	f7ee f8bd 	bl	81003bc <__adddf3>
 8112242:	4606      	mov	r6, r0
 8112244:	4628      	mov	r0, r5
 8112246:	460f      	mov	r7, r1
 8112248:	f7ee fa04 	bl	8100654 <__aeabi_i2d>
 811224c:	a36a      	add	r3, pc, #424	; (adr r3, 81123f8 <_dtoa_r+0x2f0>)
 811224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112252:	f7ee fa69 	bl	8100728 <__aeabi_dmul>
 8112256:	4602      	mov	r2, r0
 8112258:	460b      	mov	r3, r1
 811225a:	4630      	mov	r0, r6
 811225c:	4639      	mov	r1, r7
 811225e:	f7ee f8ad 	bl	81003bc <__adddf3>
 8112262:	4606      	mov	r6, r0
 8112264:	460f      	mov	r7, r1
 8112266:	f7ee fd0f 	bl	8100c88 <__aeabi_d2iz>
 811226a:	2200      	movs	r2, #0
 811226c:	4682      	mov	sl, r0
 811226e:	2300      	movs	r3, #0
 8112270:	4630      	mov	r0, r6
 8112272:	4639      	mov	r1, r7
 8112274:	f7ee fcca 	bl	8100c0c <__aeabi_dcmplt>
 8112278:	b148      	cbz	r0, 811228e <_dtoa_r+0x186>
 811227a:	4650      	mov	r0, sl
 811227c:	f7ee f9ea 	bl	8100654 <__aeabi_i2d>
 8112280:	4632      	mov	r2, r6
 8112282:	463b      	mov	r3, r7
 8112284:	f7ee fcb8 	bl	8100bf8 <__aeabi_dcmpeq>
 8112288:	b908      	cbnz	r0, 811228e <_dtoa_r+0x186>
 811228a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 811228e:	f1ba 0f16 	cmp.w	sl, #22
 8112292:	d854      	bhi.n	811233e <_dtoa_r+0x236>
 8112294:	4b61      	ldr	r3, [pc, #388]	; (811241c <_dtoa_r+0x314>)
 8112296:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 811229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811229e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81122a2:	f7ee fcb3 	bl	8100c0c <__aeabi_dcmplt>
 81122a6:	2800      	cmp	r0, #0
 81122a8:	d04b      	beq.n	8112342 <_dtoa_r+0x23a>
 81122aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 81122ae:	2300      	movs	r3, #0
 81122b0:	930e      	str	r3, [sp, #56]	; 0x38
 81122b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 81122b4:	1b5d      	subs	r5, r3, r5
 81122b6:	1e6b      	subs	r3, r5, #1
 81122b8:	9304      	str	r3, [sp, #16]
 81122ba:	bf43      	ittte	mi
 81122bc:	2300      	movmi	r3, #0
 81122be:	f1c5 0801 	rsbmi	r8, r5, #1
 81122c2:	9304      	strmi	r3, [sp, #16]
 81122c4:	f04f 0800 	movpl.w	r8, #0
 81122c8:	f1ba 0f00 	cmp.w	sl, #0
 81122cc:	db3b      	blt.n	8112346 <_dtoa_r+0x23e>
 81122ce:	9b04      	ldr	r3, [sp, #16]
 81122d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 81122d4:	4453      	add	r3, sl
 81122d6:	9304      	str	r3, [sp, #16]
 81122d8:	2300      	movs	r3, #0
 81122da:	9306      	str	r3, [sp, #24]
 81122dc:	9b05      	ldr	r3, [sp, #20]
 81122de:	2b09      	cmp	r3, #9
 81122e0:	d869      	bhi.n	81123b6 <_dtoa_r+0x2ae>
 81122e2:	2b05      	cmp	r3, #5
 81122e4:	bfc4      	itt	gt
 81122e6:	3b04      	subgt	r3, #4
 81122e8:	9305      	strgt	r3, [sp, #20]
 81122ea:	9b05      	ldr	r3, [sp, #20]
 81122ec:	f1a3 0302 	sub.w	r3, r3, #2
 81122f0:	bfcc      	ite	gt
 81122f2:	2500      	movgt	r5, #0
 81122f4:	2501      	movle	r5, #1
 81122f6:	2b03      	cmp	r3, #3
 81122f8:	d869      	bhi.n	81123ce <_dtoa_r+0x2c6>
 81122fa:	e8df f003 	tbb	[pc, r3]
 81122fe:	4e2c      	.short	0x4e2c
 8112300:	5a4c      	.short	0x5a4c
 8112302:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8112306:	441d      	add	r5, r3
 8112308:	f205 4332 	addw	r3, r5, #1074	; 0x432
 811230c:	2b20      	cmp	r3, #32
 811230e:	bfc1      	itttt	gt
 8112310:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8112314:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8112318:	fa09 f303 	lslgt.w	r3, r9, r3
 811231c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8112320:	bfda      	itte	le
 8112322:	f1c3 0320 	rsble	r3, r3, #32
 8112326:	fa06 f003 	lslle.w	r0, r6, r3
 811232a:	4318      	orrgt	r0, r3
 811232c:	f7ee f982 	bl	8100634 <__aeabi_ui2d>
 8112330:	2301      	movs	r3, #1
 8112332:	4606      	mov	r6, r0
 8112334:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8112338:	3d01      	subs	r5, #1
 811233a:	9310      	str	r3, [sp, #64]	; 0x40
 811233c:	e771      	b.n	8112222 <_dtoa_r+0x11a>
 811233e:	2301      	movs	r3, #1
 8112340:	e7b6      	b.n	81122b0 <_dtoa_r+0x1a8>
 8112342:	900e      	str	r0, [sp, #56]	; 0x38
 8112344:	e7b5      	b.n	81122b2 <_dtoa_r+0x1aa>
 8112346:	f1ca 0300 	rsb	r3, sl, #0
 811234a:	9306      	str	r3, [sp, #24]
 811234c:	2300      	movs	r3, #0
 811234e:	eba8 080a 	sub.w	r8, r8, sl
 8112352:	930d      	str	r3, [sp, #52]	; 0x34
 8112354:	e7c2      	b.n	81122dc <_dtoa_r+0x1d4>
 8112356:	2300      	movs	r3, #0
 8112358:	9308      	str	r3, [sp, #32]
 811235a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811235c:	2b00      	cmp	r3, #0
 811235e:	dc39      	bgt.n	81123d4 <_dtoa_r+0x2cc>
 8112360:	f04f 0901 	mov.w	r9, #1
 8112364:	f8cd 9004 	str.w	r9, [sp, #4]
 8112368:	464b      	mov	r3, r9
 811236a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 811236e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8112370:	2200      	movs	r2, #0
 8112372:	6042      	str	r2, [r0, #4]
 8112374:	2204      	movs	r2, #4
 8112376:	f102 0614 	add.w	r6, r2, #20
 811237a:	429e      	cmp	r6, r3
 811237c:	6841      	ldr	r1, [r0, #4]
 811237e:	d92f      	bls.n	81123e0 <_dtoa_r+0x2d8>
 8112380:	4620      	mov	r0, r4
 8112382:	f000 fed9 	bl	8113138 <_Balloc>
 8112386:	9000      	str	r0, [sp, #0]
 8112388:	2800      	cmp	r0, #0
 811238a:	d14b      	bne.n	8112424 <_dtoa_r+0x31c>
 811238c:	4b24      	ldr	r3, [pc, #144]	; (8112420 <_dtoa_r+0x318>)
 811238e:	4602      	mov	r2, r0
 8112390:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8112394:	e6d1      	b.n	811213a <_dtoa_r+0x32>
 8112396:	2301      	movs	r3, #1
 8112398:	e7de      	b.n	8112358 <_dtoa_r+0x250>
 811239a:	2300      	movs	r3, #0
 811239c:	9308      	str	r3, [sp, #32]
 811239e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81123a0:	eb0a 0903 	add.w	r9, sl, r3
 81123a4:	f109 0301 	add.w	r3, r9, #1
 81123a8:	2b01      	cmp	r3, #1
 81123aa:	9301      	str	r3, [sp, #4]
 81123ac:	bfb8      	it	lt
 81123ae:	2301      	movlt	r3, #1
 81123b0:	e7dd      	b.n	811236e <_dtoa_r+0x266>
 81123b2:	2301      	movs	r3, #1
 81123b4:	e7f2      	b.n	811239c <_dtoa_r+0x294>
 81123b6:	2501      	movs	r5, #1
 81123b8:	2300      	movs	r3, #0
 81123ba:	9305      	str	r3, [sp, #20]
 81123bc:	9508      	str	r5, [sp, #32]
 81123be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 81123c2:	2200      	movs	r2, #0
 81123c4:	f8cd 9004 	str.w	r9, [sp, #4]
 81123c8:	2312      	movs	r3, #18
 81123ca:	9209      	str	r2, [sp, #36]	; 0x24
 81123cc:	e7cf      	b.n	811236e <_dtoa_r+0x266>
 81123ce:	2301      	movs	r3, #1
 81123d0:	9308      	str	r3, [sp, #32]
 81123d2:	e7f4      	b.n	81123be <_dtoa_r+0x2b6>
 81123d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 81123d8:	f8cd 9004 	str.w	r9, [sp, #4]
 81123dc:	464b      	mov	r3, r9
 81123de:	e7c6      	b.n	811236e <_dtoa_r+0x266>
 81123e0:	3101      	adds	r1, #1
 81123e2:	6041      	str	r1, [r0, #4]
 81123e4:	0052      	lsls	r2, r2, #1
 81123e6:	e7c6      	b.n	8112376 <_dtoa_r+0x26e>
 81123e8:	636f4361 	.word	0x636f4361
 81123ec:	3fd287a7 	.word	0x3fd287a7
 81123f0:	8b60c8b3 	.word	0x8b60c8b3
 81123f4:	3fc68a28 	.word	0x3fc68a28
 81123f8:	509f79fb 	.word	0x509f79fb
 81123fc:	3fd34413 	.word	0x3fd34413
 8112400:	081150e2 	.word	0x081150e2
 8112404:	081150f9 	.word	0x081150f9
 8112408:	7ff00000 	.word	0x7ff00000
 811240c:	081150de 	.word	0x081150de
 8112410:	081150d5 	.word	0x081150d5
 8112414:	08114fb1 	.word	0x08114fb1
 8112418:	3ff80000 	.word	0x3ff80000
 811241c:	08115258 	.word	0x08115258
 8112420:	08115158 	.word	0x08115158
 8112424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8112426:	9a00      	ldr	r2, [sp, #0]
 8112428:	601a      	str	r2, [r3, #0]
 811242a:	9b01      	ldr	r3, [sp, #4]
 811242c:	2b0e      	cmp	r3, #14
 811242e:	f200 80ad 	bhi.w	811258c <_dtoa_r+0x484>
 8112432:	2d00      	cmp	r5, #0
 8112434:	f000 80aa 	beq.w	811258c <_dtoa_r+0x484>
 8112438:	f1ba 0f00 	cmp.w	sl, #0
 811243c:	dd36      	ble.n	81124ac <_dtoa_r+0x3a4>
 811243e:	4ac3      	ldr	r2, [pc, #780]	; (811274c <_dtoa_r+0x644>)
 8112440:	f00a 030f 	and.w	r3, sl, #15
 8112444:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8112448:	ed93 7b00 	vldr	d7, [r3]
 811244c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8112450:	ea4f 172a 	mov.w	r7, sl, asr #4
 8112454:	eeb0 8a47 	vmov.f32	s16, s14
 8112458:	eef0 8a67 	vmov.f32	s17, s15
 811245c:	d016      	beq.n	811248c <_dtoa_r+0x384>
 811245e:	4bbc      	ldr	r3, [pc, #752]	; (8112750 <_dtoa_r+0x648>)
 8112460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8112464:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8112468:	f7ee fa88 	bl	810097c <__aeabi_ddiv>
 811246c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112470:	f007 070f 	and.w	r7, r7, #15
 8112474:	2503      	movs	r5, #3
 8112476:	4eb6      	ldr	r6, [pc, #728]	; (8112750 <_dtoa_r+0x648>)
 8112478:	b957      	cbnz	r7, 8112490 <_dtoa_r+0x388>
 811247a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811247e:	ec53 2b18 	vmov	r2, r3, d8
 8112482:	f7ee fa7b 	bl	810097c <__aeabi_ddiv>
 8112486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811248a:	e029      	b.n	81124e0 <_dtoa_r+0x3d8>
 811248c:	2502      	movs	r5, #2
 811248e:	e7f2      	b.n	8112476 <_dtoa_r+0x36e>
 8112490:	07f9      	lsls	r1, r7, #31
 8112492:	d508      	bpl.n	81124a6 <_dtoa_r+0x39e>
 8112494:	ec51 0b18 	vmov	r0, r1, d8
 8112498:	e9d6 2300 	ldrd	r2, r3, [r6]
 811249c:	f7ee f944 	bl	8100728 <__aeabi_dmul>
 81124a0:	ec41 0b18 	vmov	d8, r0, r1
 81124a4:	3501      	adds	r5, #1
 81124a6:	107f      	asrs	r7, r7, #1
 81124a8:	3608      	adds	r6, #8
 81124aa:	e7e5      	b.n	8112478 <_dtoa_r+0x370>
 81124ac:	f000 80a6 	beq.w	81125fc <_dtoa_r+0x4f4>
 81124b0:	f1ca 0600 	rsb	r6, sl, #0
 81124b4:	4ba5      	ldr	r3, [pc, #660]	; (811274c <_dtoa_r+0x644>)
 81124b6:	4fa6      	ldr	r7, [pc, #664]	; (8112750 <_dtoa_r+0x648>)
 81124b8:	f006 020f 	and.w	r2, r6, #15
 81124bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81124c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81124c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81124c8:	f7ee f92e 	bl	8100728 <__aeabi_dmul>
 81124cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81124d0:	1136      	asrs	r6, r6, #4
 81124d2:	2300      	movs	r3, #0
 81124d4:	2502      	movs	r5, #2
 81124d6:	2e00      	cmp	r6, #0
 81124d8:	f040 8085 	bne.w	81125e6 <_dtoa_r+0x4de>
 81124dc:	2b00      	cmp	r3, #0
 81124de:	d1d2      	bne.n	8112486 <_dtoa_r+0x37e>
 81124e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81124e2:	2b00      	cmp	r3, #0
 81124e4:	f000 808c 	beq.w	8112600 <_dtoa_r+0x4f8>
 81124e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81124ec:	4b99      	ldr	r3, [pc, #612]	; (8112754 <_dtoa_r+0x64c>)
 81124ee:	2200      	movs	r2, #0
 81124f0:	4630      	mov	r0, r6
 81124f2:	4639      	mov	r1, r7
 81124f4:	f7ee fb8a 	bl	8100c0c <__aeabi_dcmplt>
 81124f8:	2800      	cmp	r0, #0
 81124fa:	f000 8081 	beq.w	8112600 <_dtoa_r+0x4f8>
 81124fe:	9b01      	ldr	r3, [sp, #4]
 8112500:	2b00      	cmp	r3, #0
 8112502:	d07d      	beq.n	8112600 <_dtoa_r+0x4f8>
 8112504:	f1b9 0f00 	cmp.w	r9, #0
 8112508:	dd3c      	ble.n	8112584 <_dtoa_r+0x47c>
 811250a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 811250e:	9307      	str	r3, [sp, #28]
 8112510:	2200      	movs	r2, #0
 8112512:	4b91      	ldr	r3, [pc, #580]	; (8112758 <_dtoa_r+0x650>)
 8112514:	4630      	mov	r0, r6
 8112516:	4639      	mov	r1, r7
 8112518:	f7ee f906 	bl	8100728 <__aeabi_dmul>
 811251c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112520:	3501      	adds	r5, #1
 8112522:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8112526:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 811252a:	4628      	mov	r0, r5
 811252c:	f7ee f892 	bl	8100654 <__aeabi_i2d>
 8112530:	4632      	mov	r2, r6
 8112532:	463b      	mov	r3, r7
 8112534:	f7ee f8f8 	bl	8100728 <__aeabi_dmul>
 8112538:	4b88      	ldr	r3, [pc, #544]	; (811275c <_dtoa_r+0x654>)
 811253a:	2200      	movs	r2, #0
 811253c:	f7ed ff3e 	bl	81003bc <__adddf3>
 8112540:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8112544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112548:	9303      	str	r3, [sp, #12]
 811254a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 811254c:	2b00      	cmp	r3, #0
 811254e:	d15c      	bne.n	811260a <_dtoa_r+0x502>
 8112550:	4b83      	ldr	r3, [pc, #524]	; (8112760 <_dtoa_r+0x658>)
 8112552:	2200      	movs	r2, #0
 8112554:	4630      	mov	r0, r6
 8112556:	4639      	mov	r1, r7
 8112558:	f7ed ff2e 	bl	81003b8 <__aeabi_dsub>
 811255c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112560:	4606      	mov	r6, r0
 8112562:	460f      	mov	r7, r1
 8112564:	f7ee fb70 	bl	8100c48 <__aeabi_dcmpgt>
 8112568:	2800      	cmp	r0, #0
 811256a:	f040 8296 	bne.w	8112a9a <_dtoa_r+0x992>
 811256e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8112572:	4630      	mov	r0, r6
 8112574:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8112578:	4639      	mov	r1, r7
 811257a:	f7ee fb47 	bl	8100c0c <__aeabi_dcmplt>
 811257e:	2800      	cmp	r0, #0
 8112580:	f040 8288 	bne.w	8112a94 <_dtoa_r+0x98c>
 8112584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8112588:	e9cd 2302 	strd	r2, r3, [sp, #8]
 811258c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 811258e:	2b00      	cmp	r3, #0
 8112590:	f2c0 8158 	blt.w	8112844 <_dtoa_r+0x73c>
 8112594:	f1ba 0f0e 	cmp.w	sl, #14
 8112598:	f300 8154 	bgt.w	8112844 <_dtoa_r+0x73c>
 811259c:	4b6b      	ldr	r3, [pc, #428]	; (811274c <_dtoa_r+0x644>)
 811259e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81125a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 81125a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81125a8:	2b00      	cmp	r3, #0
 81125aa:	f280 80e3 	bge.w	8112774 <_dtoa_r+0x66c>
 81125ae:	9b01      	ldr	r3, [sp, #4]
 81125b0:	2b00      	cmp	r3, #0
 81125b2:	f300 80df 	bgt.w	8112774 <_dtoa_r+0x66c>
 81125b6:	f040 826d 	bne.w	8112a94 <_dtoa_r+0x98c>
 81125ba:	4b69      	ldr	r3, [pc, #420]	; (8112760 <_dtoa_r+0x658>)
 81125bc:	2200      	movs	r2, #0
 81125be:	4640      	mov	r0, r8
 81125c0:	4649      	mov	r1, r9
 81125c2:	f7ee f8b1 	bl	8100728 <__aeabi_dmul>
 81125c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81125ca:	f7ee fb33 	bl	8100c34 <__aeabi_dcmpge>
 81125ce:	9e01      	ldr	r6, [sp, #4]
 81125d0:	4637      	mov	r7, r6
 81125d2:	2800      	cmp	r0, #0
 81125d4:	f040 8243 	bne.w	8112a5e <_dtoa_r+0x956>
 81125d8:	9d00      	ldr	r5, [sp, #0]
 81125da:	2331      	movs	r3, #49	; 0x31
 81125dc:	f805 3b01 	strb.w	r3, [r5], #1
 81125e0:	f10a 0a01 	add.w	sl, sl, #1
 81125e4:	e23f      	b.n	8112a66 <_dtoa_r+0x95e>
 81125e6:	07f2      	lsls	r2, r6, #31
 81125e8:	d505      	bpl.n	81125f6 <_dtoa_r+0x4ee>
 81125ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 81125ee:	f7ee f89b 	bl	8100728 <__aeabi_dmul>
 81125f2:	3501      	adds	r5, #1
 81125f4:	2301      	movs	r3, #1
 81125f6:	1076      	asrs	r6, r6, #1
 81125f8:	3708      	adds	r7, #8
 81125fa:	e76c      	b.n	81124d6 <_dtoa_r+0x3ce>
 81125fc:	2502      	movs	r5, #2
 81125fe:	e76f      	b.n	81124e0 <_dtoa_r+0x3d8>
 8112600:	9b01      	ldr	r3, [sp, #4]
 8112602:	f8cd a01c 	str.w	sl, [sp, #28]
 8112606:	930c      	str	r3, [sp, #48]	; 0x30
 8112608:	e78d      	b.n	8112526 <_dtoa_r+0x41e>
 811260a:	9900      	ldr	r1, [sp, #0]
 811260c:	980c      	ldr	r0, [sp, #48]	; 0x30
 811260e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8112610:	4b4e      	ldr	r3, [pc, #312]	; (811274c <_dtoa_r+0x644>)
 8112612:	ed9d 7b02 	vldr	d7, [sp, #8]
 8112616:	4401      	add	r1, r0
 8112618:	9102      	str	r1, [sp, #8]
 811261a:	9908      	ldr	r1, [sp, #32]
 811261c:	eeb0 8a47 	vmov.f32	s16, s14
 8112620:	eef0 8a67 	vmov.f32	s17, s15
 8112624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8112628:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 811262c:	2900      	cmp	r1, #0
 811262e:	d045      	beq.n	81126bc <_dtoa_r+0x5b4>
 8112630:	494c      	ldr	r1, [pc, #304]	; (8112764 <_dtoa_r+0x65c>)
 8112632:	2000      	movs	r0, #0
 8112634:	f7ee f9a2 	bl	810097c <__aeabi_ddiv>
 8112638:	ec53 2b18 	vmov	r2, r3, d8
 811263c:	f7ed febc 	bl	81003b8 <__aeabi_dsub>
 8112640:	9d00      	ldr	r5, [sp, #0]
 8112642:	ec41 0b18 	vmov	d8, r0, r1
 8112646:	4639      	mov	r1, r7
 8112648:	4630      	mov	r0, r6
 811264a:	f7ee fb1d 	bl	8100c88 <__aeabi_d2iz>
 811264e:	900c      	str	r0, [sp, #48]	; 0x30
 8112650:	f7ee f800 	bl	8100654 <__aeabi_i2d>
 8112654:	4602      	mov	r2, r0
 8112656:	460b      	mov	r3, r1
 8112658:	4630      	mov	r0, r6
 811265a:	4639      	mov	r1, r7
 811265c:	f7ed feac 	bl	81003b8 <__aeabi_dsub>
 8112660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8112662:	3330      	adds	r3, #48	; 0x30
 8112664:	f805 3b01 	strb.w	r3, [r5], #1
 8112668:	ec53 2b18 	vmov	r2, r3, d8
 811266c:	4606      	mov	r6, r0
 811266e:	460f      	mov	r7, r1
 8112670:	f7ee facc 	bl	8100c0c <__aeabi_dcmplt>
 8112674:	2800      	cmp	r0, #0
 8112676:	d165      	bne.n	8112744 <_dtoa_r+0x63c>
 8112678:	4632      	mov	r2, r6
 811267a:	463b      	mov	r3, r7
 811267c:	4935      	ldr	r1, [pc, #212]	; (8112754 <_dtoa_r+0x64c>)
 811267e:	2000      	movs	r0, #0
 8112680:	f7ed fe9a 	bl	81003b8 <__aeabi_dsub>
 8112684:	ec53 2b18 	vmov	r2, r3, d8
 8112688:	f7ee fac0 	bl	8100c0c <__aeabi_dcmplt>
 811268c:	2800      	cmp	r0, #0
 811268e:	f040 80b9 	bne.w	8112804 <_dtoa_r+0x6fc>
 8112692:	9b02      	ldr	r3, [sp, #8]
 8112694:	429d      	cmp	r5, r3
 8112696:	f43f af75 	beq.w	8112584 <_dtoa_r+0x47c>
 811269a:	4b2f      	ldr	r3, [pc, #188]	; (8112758 <_dtoa_r+0x650>)
 811269c:	ec51 0b18 	vmov	r0, r1, d8
 81126a0:	2200      	movs	r2, #0
 81126a2:	f7ee f841 	bl	8100728 <__aeabi_dmul>
 81126a6:	4b2c      	ldr	r3, [pc, #176]	; (8112758 <_dtoa_r+0x650>)
 81126a8:	ec41 0b18 	vmov	d8, r0, r1
 81126ac:	2200      	movs	r2, #0
 81126ae:	4630      	mov	r0, r6
 81126b0:	4639      	mov	r1, r7
 81126b2:	f7ee f839 	bl	8100728 <__aeabi_dmul>
 81126b6:	4606      	mov	r6, r0
 81126b8:	460f      	mov	r7, r1
 81126ba:	e7c4      	b.n	8112646 <_dtoa_r+0x53e>
 81126bc:	ec51 0b17 	vmov	r0, r1, d7
 81126c0:	f7ee f832 	bl	8100728 <__aeabi_dmul>
 81126c4:	9b02      	ldr	r3, [sp, #8]
 81126c6:	9d00      	ldr	r5, [sp, #0]
 81126c8:	930c      	str	r3, [sp, #48]	; 0x30
 81126ca:	ec41 0b18 	vmov	d8, r0, r1
 81126ce:	4639      	mov	r1, r7
 81126d0:	4630      	mov	r0, r6
 81126d2:	f7ee fad9 	bl	8100c88 <__aeabi_d2iz>
 81126d6:	9011      	str	r0, [sp, #68]	; 0x44
 81126d8:	f7ed ffbc 	bl	8100654 <__aeabi_i2d>
 81126dc:	4602      	mov	r2, r0
 81126de:	460b      	mov	r3, r1
 81126e0:	4630      	mov	r0, r6
 81126e2:	4639      	mov	r1, r7
 81126e4:	f7ed fe68 	bl	81003b8 <__aeabi_dsub>
 81126e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81126ea:	3330      	adds	r3, #48	; 0x30
 81126ec:	f805 3b01 	strb.w	r3, [r5], #1
 81126f0:	9b02      	ldr	r3, [sp, #8]
 81126f2:	429d      	cmp	r5, r3
 81126f4:	4606      	mov	r6, r0
 81126f6:	460f      	mov	r7, r1
 81126f8:	f04f 0200 	mov.w	r2, #0
 81126fc:	d134      	bne.n	8112768 <_dtoa_r+0x660>
 81126fe:	4b19      	ldr	r3, [pc, #100]	; (8112764 <_dtoa_r+0x65c>)
 8112700:	ec51 0b18 	vmov	r0, r1, d8
 8112704:	f7ed fe5a 	bl	81003bc <__adddf3>
 8112708:	4602      	mov	r2, r0
 811270a:	460b      	mov	r3, r1
 811270c:	4630      	mov	r0, r6
 811270e:	4639      	mov	r1, r7
 8112710:	f7ee fa9a 	bl	8100c48 <__aeabi_dcmpgt>
 8112714:	2800      	cmp	r0, #0
 8112716:	d175      	bne.n	8112804 <_dtoa_r+0x6fc>
 8112718:	ec53 2b18 	vmov	r2, r3, d8
 811271c:	4911      	ldr	r1, [pc, #68]	; (8112764 <_dtoa_r+0x65c>)
 811271e:	2000      	movs	r0, #0
 8112720:	f7ed fe4a 	bl	81003b8 <__aeabi_dsub>
 8112724:	4602      	mov	r2, r0
 8112726:	460b      	mov	r3, r1
 8112728:	4630      	mov	r0, r6
 811272a:	4639      	mov	r1, r7
 811272c:	f7ee fa6e 	bl	8100c0c <__aeabi_dcmplt>
 8112730:	2800      	cmp	r0, #0
 8112732:	f43f af27 	beq.w	8112584 <_dtoa_r+0x47c>
 8112736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8112738:	1e6b      	subs	r3, r5, #1
 811273a:	930c      	str	r3, [sp, #48]	; 0x30
 811273c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8112740:	2b30      	cmp	r3, #48	; 0x30
 8112742:	d0f8      	beq.n	8112736 <_dtoa_r+0x62e>
 8112744:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8112748:	e04a      	b.n	81127e0 <_dtoa_r+0x6d8>
 811274a:	bf00      	nop
 811274c:	08115258 	.word	0x08115258
 8112750:	08115230 	.word	0x08115230
 8112754:	3ff00000 	.word	0x3ff00000
 8112758:	40240000 	.word	0x40240000
 811275c:	401c0000 	.word	0x401c0000
 8112760:	40140000 	.word	0x40140000
 8112764:	3fe00000 	.word	0x3fe00000
 8112768:	4baf      	ldr	r3, [pc, #700]	; (8112a28 <_dtoa_r+0x920>)
 811276a:	f7ed ffdd 	bl	8100728 <__aeabi_dmul>
 811276e:	4606      	mov	r6, r0
 8112770:	460f      	mov	r7, r1
 8112772:	e7ac      	b.n	81126ce <_dtoa_r+0x5c6>
 8112774:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8112778:	9d00      	ldr	r5, [sp, #0]
 811277a:	4642      	mov	r2, r8
 811277c:	464b      	mov	r3, r9
 811277e:	4630      	mov	r0, r6
 8112780:	4639      	mov	r1, r7
 8112782:	f7ee f8fb 	bl	810097c <__aeabi_ddiv>
 8112786:	f7ee fa7f 	bl	8100c88 <__aeabi_d2iz>
 811278a:	9002      	str	r0, [sp, #8]
 811278c:	f7ed ff62 	bl	8100654 <__aeabi_i2d>
 8112790:	4642      	mov	r2, r8
 8112792:	464b      	mov	r3, r9
 8112794:	f7ed ffc8 	bl	8100728 <__aeabi_dmul>
 8112798:	4602      	mov	r2, r0
 811279a:	460b      	mov	r3, r1
 811279c:	4630      	mov	r0, r6
 811279e:	4639      	mov	r1, r7
 81127a0:	f7ed fe0a 	bl	81003b8 <__aeabi_dsub>
 81127a4:	9e02      	ldr	r6, [sp, #8]
 81127a6:	9f01      	ldr	r7, [sp, #4]
 81127a8:	3630      	adds	r6, #48	; 0x30
 81127aa:	f805 6b01 	strb.w	r6, [r5], #1
 81127ae:	9e00      	ldr	r6, [sp, #0]
 81127b0:	1bae      	subs	r6, r5, r6
 81127b2:	42b7      	cmp	r7, r6
 81127b4:	4602      	mov	r2, r0
 81127b6:	460b      	mov	r3, r1
 81127b8:	d137      	bne.n	811282a <_dtoa_r+0x722>
 81127ba:	f7ed fdff 	bl	81003bc <__adddf3>
 81127be:	4642      	mov	r2, r8
 81127c0:	464b      	mov	r3, r9
 81127c2:	4606      	mov	r6, r0
 81127c4:	460f      	mov	r7, r1
 81127c6:	f7ee fa3f 	bl	8100c48 <__aeabi_dcmpgt>
 81127ca:	b9c8      	cbnz	r0, 8112800 <_dtoa_r+0x6f8>
 81127cc:	4642      	mov	r2, r8
 81127ce:	464b      	mov	r3, r9
 81127d0:	4630      	mov	r0, r6
 81127d2:	4639      	mov	r1, r7
 81127d4:	f7ee fa10 	bl	8100bf8 <__aeabi_dcmpeq>
 81127d8:	b110      	cbz	r0, 81127e0 <_dtoa_r+0x6d8>
 81127da:	9b02      	ldr	r3, [sp, #8]
 81127dc:	07d9      	lsls	r1, r3, #31
 81127de:	d40f      	bmi.n	8112800 <_dtoa_r+0x6f8>
 81127e0:	4620      	mov	r0, r4
 81127e2:	4659      	mov	r1, fp
 81127e4:	f000 fce8 	bl	81131b8 <_Bfree>
 81127e8:	2300      	movs	r3, #0
 81127ea:	702b      	strb	r3, [r5, #0]
 81127ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81127ee:	f10a 0001 	add.w	r0, sl, #1
 81127f2:	6018      	str	r0, [r3, #0]
 81127f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81127f6:	2b00      	cmp	r3, #0
 81127f8:	f43f acd8 	beq.w	81121ac <_dtoa_r+0xa4>
 81127fc:	601d      	str	r5, [r3, #0]
 81127fe:	e4d5      	b.n	81121ac <_dtoa_r+0xa4>
 8112800:	f8cd a01c 	str.w	sl, [sp, #28]
 8112804:	462b      	mov	r3, r5
 8112806:	461d      	mov	r5, r3
 8112808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 811280c:	2a39      	cmp	r2, #57	; 0x39
 811280e:	d108      	bne.n	8112822 <_dtoa_r+0x71a>
 8112810:	9a00      	ldr	r2, [sp, #0]
 8112812:	429a      	cmp	r2, r3
 8112814:	d1f7      	bne.n	8112806 <_dtoa_r+0x6fe>
 8112816:	9a07      	ldr	r2, [sp, #28]
 8112818:	9900      	ldr	r1, [sp, #0]
 811281a:	3201      	adds	r2, #1
 811281c:	9207      	str	r2, [sp, #28]
 811281e:	2230      	movs	r2, #48	; 0x30
 8112820:	700a      	strb	r2, [r1, #0]
 8112822:	781a      	ldrb	r2, [r3, #0]
 8112824:	3201      	adds	r2, #1
 8112826:	701a      	strb	r2, [r3, #0]
 8112828:	e78c      	b.n	8112744 <_dtoa_r+0x63c>
 811282a:	4b7f      	ldr	r3, [pc, #508]	; (8112a28 <_dtoa_r+0x920>)
 811282c:	2200      	movs	r2, #0
 811282e:	f7ed ff7b 	bl	8100728 <__aeabi_dmul>
 8112832:	2200      	movs	r2, #0
 8112834:	2300      	movs	r3, #0
 8112836:	4606      	mov	r6, r0
 8112838:	460f      	mov	r7, r1
 811283a:	f7ee f9dd 	bl	8100bf8 <__aeabi_dcmpeq>
 811283e:	2800      	cmp	r0, #0
 8112840:	d09b      	beq.n	811277a <_dtoa_r+0x672>
 8112842:	e7cd      	b.n	81127e0 <_dtoa_r+0x6d8>
 8112844:	9a08      	ldr	r2, [sp, #32]
 8112846:	2a00      	cmp	r2, #0
 8112848:	f000 80c4 	beq.w	81129d4 <_dtoa_r+0x8cc>
 811284c:	9a05      	ldr	r2, [sp, #20]
 811284e:	2a01      	cmp	r2, #1
 8112850:	f300 80a8 	bgt.w	81129a4 <_dtoa_r+0x89c>
 8112854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8112856:	2a00      	cmp	r2, #0
 8112858:	f000 80a0 	beq.w	811299c <_dtoa_r+0x894>
 811285c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8112860:	9e06      	ldr	r6, [sp, #24]
 8112862:	4645      	mov	r5, r8
 8112864:	9a04      	ldr	r2, [sp, #16]
 8112866:	2101      	movs	r1, #1
 8112868:	441a      	add	r2, r3
 811286a:	4620      	mov	r0, r4
 811286c:	4498      	add	r8, r3
 811286e:	9204      	str	r2, [sp, #16]
 8112870:	f000 fd5e 	bl	8113330 <__i2b>
 8112874:	4607      	mov	r7, r0
 8112876:	2d00      	cmp	r5, #0
 8112878:	dd0b      	ble.n	8112892 <_dtoa_r+0x78a>
 811287a:	9b04      	ldr	r3, [sp, #16]
 811287c:	2b00      	cmp	r3, #0
 811287e:	dd08      	ble.n	8112892 <_dtoa_r+0x78a>
 8112880:	42ab      	cmp	r3, r5
 8112882:	9a04      	ldr	r2, [sp, #16]
 8112884:	bfa8      	it	ge
 8112886:	462b      	movge	r3, r5
 8112888:	eba8 0803 	sub.w	r8, r8, r3
 811288c:	1aed      	subs	r5, r5, r3
 811288e:	1ad3      	subs	r3, r2, r3
 8112890:	9304      	str	r3, [sp, #16]
 8112892:	9b06      	ldr	r3, [sp, #24]
 8112894:	b1fb      	cbz	r3, 81128d6 <_dtoa_r+0x7ce>
 8112896:	9b08      	ldr	r3, [sp, #32]
 8112898:	2b00      	cmp	r3, #0
 811289a:	f000 809f 	beq.w	81129dc <_dtoa_r+0x8d4>
 811289e:	2e00      	cmp	r6, #0
 81128a0:	dd11      	ble.n	81128c6 <_dtoa_r+0x7be>
 81128a2:	4639      	mov	r1, r7
 81128a4:	4632      	mov	r2, r6
 81128a6:	4620      	mov	r0, r4
 81128a8:	f000 fdfe 	bl	81134a8 <__pow5mult>
 81128ac:	465a      	mov	r2, fp
 81128ae:	4601      	mov	r1, r0
 81128b0:	4607      	mov	r7, r0
 81128b2:	4620      	mov	r0, r4
 81128b4:	f000 fd52 	bl	811335c <__multiply>
 81128b8:	4659      	mov	r1, fp
 81128ba:	9007      	str	r0, [sp, #28]
 81128bc:	4620      	mov	r0, r4
 81128be:	f000 fc7b 	bl	81131b8 <_Bfree>
 81128c2:	9b07      	ldr	r3, [sp, #28]
 81128c4:	469b      	mov	fp, r3
 81128c6:	9b06      	ldr	r3, [sp, #24]
 81128c8:	1b9a      	subs	r2, r3, r6
 81128ca:	d004      	beq.n	81128d6 <_dtoa_r+0x7ce>
 81128cc:	4659      	mov	r1, fp
 81128ce:	4620      	mov	r0, r4
 81128d0:	f000 fdea 	bl	81134a8 <__pow5mult>
 81128d4:	4683      	mov	fp, r0
 81128d6:	2101      	movs	r1, #1
 81128d8:	4620      	mov	r0, r4
 81128da:	f000 fd29 	bl	8113330 <__i2b>
 81128de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81128e0:	2b00      	cmp	r3, #0
 81128e2:	4606      	mov	r6, r0
 81128e4:	dd7c      	ble.n	81129e0 <_dtoa_r+0x8d8>
 81128e6:	461a      	mov	r2, r3
 81128e8:	4601      	mov	r1, r0
 81128ea:	4620      	mov	r0, r4
 81128ec:	f000 fddc 	bl	81134a8 <__pow5mult>
 81128f0:	9b05      	ldr	r3, [sp, #20]
 81128f2:	2b01      	cmp	r3, #1
 81128f4:	4606      	mov	r6, r0
 81128f6:	dd76      	ble.n	81129e6 <_dtoa_r+0x8de>
 81128f8:	2300      	movs	r3, #0
 81128fa:	9306      	str	r3, [sp, #24]
 81128fc:	6933      	ldr	r3, [r6, #16]
 81128fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8112902:	6918      	ldr	r0, [r3, #16]
 8112904:	f000 fcc4 	bl	8113290 <__hi0bits>
 8112908:	f1c0 0020 	rsb	r0, r0, #32
 811290c:	9b04      	ldr	r3, [sp, #16]
 811290e:	4418      	add	r0, r3
 8112910:	f010 001f 	ands.w	r0, r0, #31
 8112914:	f000 8086 	beq.w	8112a24 <_dtoa_r+0x91c>
 8112918:	f1c0 0320 	rsb	r3, r0, #32
 811291c:	2b04      	cmp	r3, #4
 811291e:	dd7f      	ble.n	8112a20 <_dtoa_r+0x918>
 8112920:	f1c0 001c 	rsb	r0, r0, #28
 8112924:	9b04      	ldr	r3, [sp, #16]
 8112926:	4403      	add	r3, r0
 8112928:	4480      	add	r8, r0
 811292a:	4405      	add	r5, r0
 811292c:	9304      	str	r3, [sp, #16]
 811292e:	f1b8 0f00 	cmp.w	r8, #0
 8112932:	dd05      	ble.n	8112940 <_dtoa_r+0x838>
 8112934:	4659      	mov	r1, fp
 8112936:	4642      	mov	r2, r8
 8112938:	4620      	mov	r0, r4
 811293a:	f000 fe0f 	bl	811355c <__lshift>
 811293e:	4683      	mov	fp, r0
 8112940:	9b04      	ldr	r3, [sp, #16]
 8112942:	2b00      	cmp	r3, #0
 8112944:	dd05      	ble.n	8112952 <_dtoa_r+0x84a>
 8112946:	4631      	mov	r1, r6
 8112948:	461a      	mov	r2, r3
 811294a:	4620      	mov	r0, r4
 811294c:	f000 fe06 	bl	811355c <__lshift>
 8112950:	4606      	mov	r6, r0
 8112952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8112954:	2b00      	cmp	r3, #0
 8112956:	d069      	beq.n	8112a2c <_dtoa_r+0x924>
 8112958:	4631      	mov	r1, r6
 811295a:	4658      	mov	r0, fp
 811295c:	f000 fe6a 	bl	8113634 <__mcmp>
 8112960:	2800      	cmp	r0, #0
 8112962:	da63      	bge.n	8112a2c <_dtoa_r+0x924>
 8112964:	2300      	movs	r3, #0
 8112966:	4659      	mov	r1, fp
 8112968:	220a      	movs	r2, #10
 811296a:	4620      	mov	r0, r4
 811296c:	f000 fc46 	bl	81131fc <__multadd>
 8112970:	9b08      	ldr	r3, [sp, #32]
 8112972:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8112976:	4683      	mov	fp, r0
 8112978:	2b00      	cmp	r3, #0
 811297a:	f000 818f 	beq.w	8112c9c <_dtoa_r+0xb94>
 811297e:	4639      	mov	r1, r7
 8112980:	2300      	movs	r3, #0
 8112982:	220a      	movs	r2, #10
 8112984:	4620      	mov	r0, r4
 8112986:	f000 fc39 	bl	81131fc <__multadd>
 811298a:	f1b9 0f00 	cmp.w	r9, #0
 811298e:	4607      	mov	r7, r0
 8112990:	f300 808e 	bgt.w	8112ab0 <_dtoa_r+0x9a8>
 8112994:	9b05      	ldr	r3, [sp, #20]
 8112996:	2b02      	cmp	r3, #2
 8112998:	dc50      	bgt.n	8112a3c <_dtoa_r+0x934>
 811299a:	e089      	b.n	8112ab0 <_dtoa_r+0x9a8>
 811299c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 811299e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 81129a2:	e75d      	b.n	8112860 <_dtoa_r+0x758>
 81129a4:	9b01      	ldr	r3, [sp, #4]
 81129a6:	1e5e      	subs	r6, r3, #1
 81129a8:	9b06      	ldr	r3, [sp, #24]
 81129aa:	42b3      	cmp	r3, r6
 81129ac:	bfbf      	itttt	lt
 81129ae:	9b06      	ldrlt	r3, [sp, #24]
 81129b0:	9606      	strlt	r6, [sp, #24]
 81129b2:	1af2      	sublt	r2, r6, r3
 81129b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 81129b6:	bfb6      	itet	lt
 81129b8:	189b      	addlt	r3, r3, r2
 81129ba:	1b9e      	subge	r6, r3, r6
 81129bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 81129be:	9b01      	ldr	r3, [sp, #4]
 81129c0:	bfb8      	it	lt
 81129c2:	2600      	movlt	r6, #0
 81129c4:	2b00      	cmp	r3, #0
 81129c6:	bfb5      	itete	lt
 81129c8:	eba8 0503 	sublt.w	r5, r8, r3
 81129cc:	9b01      	ldrge	r3, [sp, #4]
 81129ce:	2300      	movlt	r3, #0
 81129d0:	4645      	movge	r5, r8
 81129d2:	e747      	b.n	8112864 <_dtoa_r+0x75c>
 81129d4:	9e06      	ldr	r6, [sp, #24]
 81129d6:	9f08      	ldr	r7, [sp, #32]
 81129d8:	4645      	mov	r5, r8
 81129da:	e74c      	b.n	8112876 <_dtoa_r+0x76e>
 81129dc:	9a06      	ldr	r2, [sp, #24]
 81129de:	e775      	b.n	81128cc <_dtoa_r+0x7c4>
 81129e0:	9b05      	ldr	r3, [sp, #20]
 81129e2:	2b01      	cmp	r3, #1
 81129e4:	dc18      	bgt.n	8112a18 <_dtoa_r+0x910>
 81129e6:	9b02      	ldr	r3, [sp, #8]
 81129e8:	b9b3      	cbnz	r3, 8112a18 <_dtoa_r+0x910>
 81129ea:	9b03      	ldr	r3, [sp, #12]
 81129ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81129f0:	b9a3      	cbnz	r3, 8112a1c <_dtoa_r+0x914>
 81129f2:	9b03      	ldr	r3, [sp, #12]
 81129f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81129f8:	0d1b      	lsrs	r3, r3, #20
 81129fa:	051b      	lsls	r3, r3, #20
 81129fc:	b12b      	cbz	r3, 8112a0a <_dtoa_r+0x902>
 81129fe:	9b04      	ldr	r3, [sp, #16]
 8112a00:	3301      	adds	r3, #1
 8112a02:	9304      	str	r3, [sp, #16]
 8112a04:	f108 0801 	add.w	r8, r8, #1
 8112a08:	2301      	movs	r3, #1
 8112a0a:	9306      	str	r3, [sp, #24]
 8112a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8112a0e:	2b00      	cmp	r3, #0
 8112a10:	f47f af74 	bne.w	81128fc <_dtoa_r+0x7f4>
 8112a14:	2001      	movs	r0, #1
 8112a16:	e779      	b.n	811290c <_dtoa_r+0x804>
 8112a18:	2300      	movs	r3, #0
 8112a1a:	e7f6      	b.n	8112a0a <_dtoa_r+0x902>
 8112a1c:	9b02      	ldr	r3, [sp, #8]
 8112a1e:	e7f4      	b.n	8112a0a <_dtoa_r+0x902>
 8112a20:	d085      	beq.n	811292e <_dtoa_r+0x826>
 8112a22:	4618      	mov	r0, r3
 8112a24:	301c      	adds	r0, #28
 8112a26:	e77d      	b.n	8112924 <_dtoa_r+0x81c>
 8112a28:	40240000 	.word	0x40240000
 8112a2c:	9b01      	ldr	r3, [sp, #4]
 8112a2e:	2b00      	cmp	r3, #0
 8112a30:	dc38      	bgt.n	8112aa4 <_dtoa_r+0x99c>
 8112a32:	9b05      	ldr	r3, [sp, #20]
 8112a34:	2b02      	cmp	r3, #2
 8112a36:	dd35      	ble.n	8112aa4 <_dtoa_r+0x99c>
 8112a38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8112a3c:	f1b9 0f00 	cmp.w	r9, #0
 8112a40:	d10d      	bne.n	8112a5e <_dtoa_r+0x956>
 8112a42:	4631      	mov	r1, r6
 8112a44:	464b      	mov	r3, r9
 8112a46:	2205      	movs	r2, #5
 8112a48:	4620      	mov	r0, r4
 8112a4a:	f000 fbd7 	bl	81131fc <__multadd>
 8112a4e:	4601      	mov	r1, r0
 8112a50:	4606      	mov	r6, r0
 8112a52:	4658      	mov	r0, fp
 8112a54:	f000 fdee 	bl	8113634 <__mcmp>
 8112a58:	2800      	cmp	r0, #0
 8112a5a:	f73f adbd 	bgt.w	81125d8 <_dtoa_r+0x4d0>
 8112a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8112a60:	9d00      	ldr	r5, [sp, #0]
 8112a62:	ea6f 0a03 	mvn.w	sl, r3
 8112a66:	f04f 0800 	mov.w	r8, #0
 8112a6a:	4631      	mov	r1, r6
 8112a6c:	4620      	mov	r0, r4
 8112a6e:	f000 fba3 	bl	81131b8 <_Bfree>
 8112a72:	2f00      	cmp	r7, #0
 8112a74:	f43f aeb4 	beq.w	81127e0 <_dtoa_r+0x6d8>
 8112a78:	f1b8 0f00 	cmp.w	r8, #0
 8112a7c:	d005      	beq.n	8112a8a <_dtoa_r+0x982>
 8112a7e:	45b8      	cmp	r8, r7
 8112a80:	d003      	beq.n	8112a8a <_dtoa_r+0x982>
 8112a82:	4641      	mov	r1, r8
 8112a84:	4620      	mov	r0, r4
 8112a86:	f000 fb97 	bl	81131b8 <_Bfree>
 8112a8a:	4639      	mov	r1, r7
 8112a8c:	4620      	mov	r0, r4
 8112a8e:	f000 fb93 	bl	81131b8 <_Bfree>
 8112a92:	e6a5      	b.n	81127e0 <_dtoa_r+0x6d8>
 8112a94:	2600      	movs	r6, #0
 8112a96:	4637      	mov	r7, r6
 8112a98:	e7e1      	b.n	8112a5e <_dtoa_r+0x956>
 8112a9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8112a9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8112aa0:	4637      	mov	r7, r6
 8112aa2:	e599      	b.n	81125d8 <_dtoa_r+0x4d0>
 8112aa4:	9b08      	ldr	r3, [sp, #32]
 8112aa6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8112aaa:	2b00      	cmp	r3, #0
 8112aac:	f000 80fd 	beq.w	8112caa <_dtoa_r+0xba2>
 8112ab0:	2d00      	cmp	r5, #0
 8112ab2:	dd05      	ble.n	8112ac0 <_dtoa_r+0x9b8>
 8112ab4:	4639      	mov	r1, r7
 8112ab6:	462a      	mov	r2, r5
 8112ab8:	4620      	mov	r0, r4
 8112aba:	f000 fd4f 	bl	811355c <__lshift>
 8112abe:	4607      	mov	r7, r0
 8112ac0:	9b06      	ldr	r3, [sp, #24]
 8112ac2:	2b00      	cmp	r3, #0
 8112ac4:	d05c      	beq.n	8112b80 <_dtoa_r+0xa78>
 8112ac6:	6879      	ldr	r1, [r7, #4]
 8112ac8:	4620      	mov	r0, r4
 8112aca:	f000 fb35 	bl	8113138 <_Balloc>
 8112ace:	4605      	mov	r5, r0
 8112ad0:	b928      	cbnz	r0, 8112ade <_dtoa_r+0x9d6>
 8112ad2:	4b80      	ldr	r3, [pc, #512]	; (8112cd4 <_dtoa_r+0xbcc>)
 8112ad4:	4602      	mov	r2, r0
 8112ad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8112ada:	f7ff bb2e 	b.w	811213a <_dtoa_r+0x32>
 8112ade:	693a      	ldr	r2, [r7, #16]
 8112ae0:	3202      	adds	r2, #2
 8112ae2:	0092      	lsls	r2, r2, #2
 8112ae4:	f107 010c 	add.w	r1, r7, #12
 8112ae8:	300c      	adds	r0, #12
 8112aea:	f7fe fb3d 	bl	8111168 <memcpy>
 8112aee:	2201      	movs	r2, #1
 8112af0:	4629      	mov	r1, r5
 8112af2:	4620      	mov	r0, r4
 8112af4:	f000 fd32 	bl	811355c <__lshift>
 8112af8:	9b00      	ldr	r3, [sp, #0]
 8112afa:	3301      	adds	r3, #1
 8112afc:	9301      	str	r3, [sp, #4]
 8112afe:	9b00      	ldr	r3, [sp, #0]
 8112b00:	444b      	add	r3, r9
 8112b02:	9307      	str	r3, [sp, #28]
 8112b04:	9b02      	ldr	r3, [sp, #8]
 8112b06:	f003 0301 	and.w	r3, r3, #1
 8112b0a:	46b8      	mov	r8, r7
 8112b0c:	9306      	str	r3, [sp, #24]
 8112b0e:	4607      	mov	r7, r0
 8112b10:	9b01      	ldr	r3, [sp, #4]
 8112b12:	4631      	mov	r1, r6
 8112b14:	3b01      	subs	r3, #1
 8112b16:	4658      	mov	r0, fp
 8112b18:	9302      	str	r3, [sp, #8]
 8112b1a:	f7ff fa67 	bl	8111fec <quorem>
 8112b1e:	4603      	mov	r3, r0
 8112b20:	3330      	adds	r3, #48	; 0x30
 8112b22:	9004      	str	r0, [sp, #16]
 8112b24:	4641      	mov	r1, r8
 8112b26:	4658      	mov	r0, fp
 8112b28:	9308      	str	r3, [sp, #32]
 8112b2a:	f000 fd83 	bl	8113634 <__mcmp>
 8112b2e:	463a      	mov	r2, r7
 8112b30:	4681      	mov	r9, r0
 8112b32:	4631      	mov	r1, r6
 8112b34:	4620      	mov	r0, r4
 8112b36:	f000 fd99 	bl	811366c <__mdiff>
 8112b3a:	68c2      	ldr	r2, [r0, #12]
 8112b3c:	9b08      	ldr	r3, [sp, #32]
 8112b3e:	4605      	mov	r5, r0
 8112b40:	bb02      	cbnz	r2, 8112b84 <_dtoa_r+0xa7c>
 8112b42:	4601      	mov	r1, r0
 8112b44:	4658      	mov	r0, fp
 8112b46:	f000 fd75 	bl	8113634 <__mcmp>
 8112b4a:	9b08      	ldr	r3, [sp, #32]
 8112b4c:	4602      	mov	r2, r0
 8112b4e:	4629      	mov	r1, r5
 8112b50:	4620      	mov	r0, r4
 8112b52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8112b56:	f000 fb2f 	bl	81131b8 <_Bfree>
 8112b5a:	9b05      	ldr	r3, [sp, #20]
 8112b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8112b5e:	9d01      	ldr	r5, [sp, #4]
 8112b60:	ea43 0102 	orr.w	r1, r3, r2
 8112b64:	9b06      	ldr	r3, [sp, #24]
 8112b66:	430b      	orrs	r3, r1
 8112b68:	9b08      	ldr	r3, [sp, #32]
 8112b6a:	d10d      	bne.n	8112b88 <_dtoa_r+0xa80>
 8112b6c:	2b39      	cmp	r3, #57	; 0x39
 8112b6e:	d029      	beq.n	8112bc4 <_dtoa_r+0xabc>
 8112b70:	f1b9 0f00 	cmp.w	r9, #0
 8112b74:	dd01      	ble.n	8112b7a <_dtoa_r+0xa72>
 8112b76:	9b04      	ldr	r3, [sp, #16]
 8112b78:	3331      	adds	r3, #49	; 0x31
 8112b7a:	9a02      	ldr	r2, [sp, #8]
 8112b7c:	7013      	strb	r3, [r2, #0]
 8112b7e:	e774      	b.n	8112a6a <_dtoa_r+0x962>
 8112b80:	4638      	mov	r0, r7
 8112b82:	e7b9      	b.n	8112af8 <_dtoa_r+0x9f0>
 8112b84:	2201      	movs	r2, #1
 8112b86:	e7e2      	b.n	8112b4e <_dtoa_r+0xa46>
 8112b88:	f1b9 0f00 	cmp.w	r9, #0
 8112b8c:	db06      	blt.n	8112b9c <_dtoa_r+0xa94>
 8112b8e:	9905      	ldr	r1, [sp, #20]
 8112b90:	ea41 0909 	orr.w	r9, r1, r9
 8112b94:	9906      	ldr	r1, [sp, #24]
 8112b96:	ea59 0101 	orrs.w	r1, r9, r1
 8112b9a:	d120      	bne.n	8112bde <_dtoa_r+0xad6>
 8112b9c:	2a00      	cmp	r2, #0
 8112b9e:	ddec      	ble.n	8112b7a <_dtoa_r+0xa72>
 8112ba0:	4659      	mov	r1, fp
 8112ba2:	2201      	movs	r2, #1
 8112ba4:	4620      	mov	r0, r4
 8112ba6:	9301      	str	r3, [sp, #4]
 8112ba8:	f000 fcd8 	bl	811355c <__lshift>
 8112bac:	4631      	mov	r1, r6
 8112bae:	4683      	mov	fp, r0
 8112bb0:	f000 fd40 	bl	8113634 <__mcmp>
 8112bb4:	2800      	cmp	r0, #0
 8112bb6:	9b01      	ldr	r3, [sp, #4]
 8112bb8:	dc02      	bgt.n	8112bc0 <_dtoa_r+0xab8>
 8112bba:	d1de      	bne.n	8112b7a <_dtoa_r+0xa72>
 8112bbc:	07da      	lsls	r2, r3, #31
 8112bbe:	d5dc      	bpl.n	8112b7a <_dtoa_r+0xa72>
 8112bc0:	2b39      	cmp	r3, #57	; 0x39
 8112bc2:	d1d8      	bne.n	8112b76 <_dtoa_r+0xa6e>
 8112bc4:	9a02      	ldr	r2, [sp, #8]
 8112bc6:	2339      	movs	r3, #57	; 0x39
 8112bc8:	7013      	strb	r3, [r2, #0]
 8112bca:	462b      	mov	r3, r5
 8112bcc:	461d      	mov	r5, r3
 8112bce:	3b01      	subs	r3, #1
 8112bd0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8112bd4:	2a39      	cmp	r2, #57	; 0x39
 8112bd6:	d050      	beq.n	8112c7a <_dtoa_r+0xb72>
 8112bd8:	3201      	adds	r2, #1
 8112bda:	701a      	strb	r2, [r3, #0]
 8112bdc:	e745      	b.n	8112a6a <_dtoa_r+0x962>
 8112bde:	2a00      	cmp	r2, #0
 8112be0:	dd03      	ble.n	8112bea <_dtoa_r+0xae2>
 8112be2:	2b39      	cmp	r3, #57	; 0x39
 8112be4:	d0ee      	beq.n	8112bc4 <_dtoa_r+0xabc>
 8112be6:	3301      	adds	r3, #1
 8112be8:	e7c7      	b.n	8112b7a <_dtoa_r+0xa72>
 8112bea:	9a01      	ldr	r2, [sp, #4]
 8112bec:	9907      	ldr	r1, [sp, #28]
 8112bee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8112bf2:	428a      	cmp	r2, r1
 8112bf4:	d02a      	beq.n	8112c4c <_dtoa_r+0xb44>
 8112bf6:	4659      	mov	r1, fp
 8112bf8:	2300      	movs	r3, #0
 8112bfa:	220a      	movs	r2, #10
 8112bfc:	4620      	mov	r0, r4
 8112bfe:	f000 fafd 	bl	81131fc <__multadd>
 8112c02:	45b8      	cmp	r8, r7
 8112c04:	4683      	mov	fp, r0
 8112c06:	f04f 0300 	mov.w	r3, #0
 8112c0a:	f04f 020a 	mov.w	r2, #10
 8112c0e:	4641      	mov	r1, r8
 8112c10:	4620      	mov	r0, r4
 8112c12:	d107      	bne.n	8112c24 <_dtoa_r+0xb1c>
 8112c14:	f000 faf2 	bl	81131fc <__multadd>
 8112c18:	4680      	mov	r8, r0
 8112c1a:	4607      	mov	r7, r0
 8112c1c:	9b01      	ldr	r3, [sp, #4]
 8112c1e:	3301      	adds	r3, #1
 8112c20:	9301      	str	r3, [sp, #4]
 8112c22:	e775      	b.n	8112b10 <_dtoa_r+0xa08>
 8112c24:	f000 faea 	bl	81131fc <__multadd>
 8112c28:	4639      	mov	r1, r7
 8112c2a:	4680      	mov	r8, r0
 8112c2c:	2300      	movs	r3, #0
 8112c2e:	220a      	movs	r2, #10
 8112c30:	4620      	mov	r0, r4
 8112c32:	f000 fae3 	bl	81131fc <__multadd>
 8112c36:	4607      	mov	r7, r0
 8112c38:	e7f0      	b.n	8112c1c <_dtoa_r+0xb14>
 8112c3a:	f1b9 0f00 	cmp.w	r9, #0
 8112c3e:	9a00      	ldr	r2, [sp, #0]
 8112c40:	bfcc      	ite	gt
 8112c42:	464d      	movgt	r5, r9
 8112c44:	2501      	movle	r5, #1
 8112c46:	4415      	add	r5, r2
 8112c48:	f04f 0800 	mov.w	r8, #0
 8112c4c:	4659      	mov	r1, fp
 8112c4e:	2201      	movs	r2, #1
 8112c50:	4620      	mov	r0, r4
 8112c52:	9301      	str	r3, [sp, #4]
 8112c54:	f000 fc82 	bl	811355c <__lshift>
 8112c58:	4631      	mov	r1, r6
 8112c5a:	4683      	mov	fp, r0
 8112c5c:	f000 fcea 	bl	8113634 <__mcmp>
 8112c60:	2800      	cmp	r0, #0
 8112c62:	dcb2      	bgt.n	8112bca <_dtoa_r+0xac2>
 8112c64:	d102      	bne.n	8112c6c <_dtoa_r+0xb64>
 8112c66:	9b01      	ldr	r3, [sp, #4]
 8112c68:	07db      	lsls	r3, r3, #31
 8112c6a:	d4ae      	bmi.n	8112bca <_dtoa_r+0xac2>
 8112c6c:	462b      	mov	r3, r5
 8112c6e:	461d      	mov	r5, r3
 8112c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8112c74:	2a30      	cmp	r2, #48	; 0x30
 8112c76:	d0fa      	beq.n	8112c6e <_dtoa_r+0xb66>
 8112c78:	e6f7      	b.n	8112a6a <_dtoa_r+0x962>
 8112c7a:	9a00      	ldr	r2, [sp, #0]
 8112c7c:	429a      	cmp	r2, r3
 8112c7e:	d1a5      	bne.n	8112bcc <_dtoa_r+0xac4>
 8112c80:	f10a 0a01 	add.w	sl, sl, #1
 8112c84:	2331      	movs	r3, #49	; 0x31
 8112c86:	e779      	b.n	8112b7c <_dtoa_r+0xa74>
 8112c88:	4b13      	ldr	r3, [pc, #76]	; (8112cd8 <_dtoa_r+0xbd0>)
 8112c8a:	f7ff baaf 	b.w	81121ec <_dtoa_r+0xe4>
 8112c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8112c90:	2b00      	cmp	r3, #0
 8112c92:	f47f aa86 	bne.w	81121a2 <_dtoa_r+0x9a>
 8112c96:	4b11      	ldr	r3, [pc, #68]	; (8112cdc <_dtoa_r+0xbd4>)
 8112c98:	f7ff baa8 	b.w	81121ec <_dtoa_r+0xe4>
 8112c9c:	f1b9 0f00 	cmp.w	r9, #0
 8112ca0:	dc03      	bgt.n	8112caa <_dtoa_r+0xba2>
 8112ca2:	9b05      	ldr	r3, [sp, #20]
 8112ca4:	2b02      	cmp	r3, #2
 8112ca6:	f73f aec9 	bgt.w	8112a3c <_dtoa_r+0x934>
 8112caa:	9d00      	ldr	r5, [sp, #0]
 8112cac:	4631      	mov	r1, r6
 8112cae:	4658      	mov	r0, fp
 8112cb0:	f7ff f99c 	bl	8111fec <quorem>
 8112cb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8112cb8:	f805 3b01 	strb.w	r3, [r5], #1
 8112cbc:	9a00      	ldr	r2, [sp, #0]
 8112cbe:	1aaa      	subs	r2, r5, r2
 8112cc0:	4591      	cmp	r9, r2
 8112cc2:	ddba      	ble.n	8112c3a <_dtoa_r+0xb32>
 8112cc4:	4659      	mov	r1, fp
 8112cc6:	2300      	movs	r3, #0
 8112cc8:	220a      	movs	r2, #10
 8112cca:	4620      	mov	r0, r4
 8112ccc:	f000 fa96 	bl	81131fc <__multadd>
 8112cd0:	4683      	mov	fp, r0
 8112cd2:	e7eb      	b.n	8112cac <_dtoa_r+0xba4>
 8112cd4:	08115158 	.word	0x08115158
 8112cd8:	08114fb0 	.word	0x08114fb0
 8112cdc:	081150d5 	.word	0x081150d5

08112ce0 <__sflush_r>:
 8112ce0:	898a      	ldrh	r2, [r1, #12]
 8112ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112ce6:	4605      	mov	r5, r0
 8112ce8:	0710      	lsls	r0, r2, #28
 8112cea:	460c      	mov	r4, r1
 8112cec:	d458      	bmi.n	8112da0 <__sflush_r+0xc0>
 8112cee:	684b      	ldr	r3, [r1, #4]
 8112cf0:	2b00      	cmp	r3, #0
 8112cf2:	dc05      	bgt.n	8112d00 <__sflush_r+0x20>
 8112cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8112cf6:	2b00      	cmp	r3, #0
 8112cf8:	dc02      	bgt.n	8112d00 <__sflush_r+0x20>
 8112cfa:	2000      	movs	r0, #0
 8112cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8112d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8112d02:	2e00      	cmp	r6, #0
 8112d04:	d0f9      	beq.n	8112cfa <__sflush_r+0x1a>
 8112d06:	2300      	movs	r3, #0
 8112d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8112d0c:	682f      	ldr	r7, [r5, #0]
 8112d0e:	602b      	str	r3, [r5, #0]
 8112d10:	d032      	beq.n	8112d78 <__sflush_r+0x98>
 8112d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8112d14:	89a3      	ldrh	r3, [r4, #12]
 8112d16:	075a      	lsls	r2, r3, #29
 8112d18:	d505      	bpl.n	8112d26 <__sflush_r+0x46>
 8112d1a:	6863      	ldr	r3, [r4, #4]
 8112d1c:	1ac0      	subs	r0, r0, r3
 8112d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8112d20:	b10b      	cbz	r3, 8112d26 <__sflush_r+0x46>
 8112d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8112d24:	1ac0      	subs	r0, r0, r3
 8112d26:	2300      	movs	r3, #0
 8112d28:	4602      	mov	r2, r0
 8112d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8112d2c:	6a21      	ldr	r1, [r4, #32]
 8112d2e:	4628      	mov	r0, r5
 8112d30:	47b0      	blx	r6
 8112d32:	1c43      	adds	r3, r0, #1
 8112d34:	89a3      	ldrh	r3, [r4, #12]
 8112d36:	d106      	bne.n	8112d46 <__sflush_r+0x66>
 8112d38:	6829      	ldr	r1, [r5, #0]
 8112d3a:	291d      	cmp	r1, #29
 8112d3c:	d82c      	bhi.n	8112d98 <__sflush_r+0xb8>
 8112d3e:	4a2a      	ldr	r2, [pc, #168]	; (8112de8 <__sflush_r+0x108>)
 8112d40:	40ca      	lsrs	r2, r1
 8112d42:	07d6      	lsls	r6, r2, #31
 8112d44:	d528      	bpl.n	8112d98 <__sflush_r+0xb8>
 8112d46:	2200      	movs	r2, #0
 8112d48:	6062      	str	r2, [r4, #4]
 8112d4a:	04d9      	lsls	r1, r3, #19
 8112d4c:	6922      	ldr	r2, [r4, #16]
 8112d4e:	6022      	str	r2, [r4, #0]
 8112d50:	d504      	bpl.n	8112d5c <__sflush_r+0x7c>
 8112d52:	1c42      	adds	r2, r0, #1
 8112d54:	d101      	bne.n	8112d5a <__sflush_r+0x7a>
 8112d56:	682b      	ldr	r3, [r5, #0]
 8112d58:	b903      	cbnz	r3, 8112d5c <__sflush_r+0x7c>
 8112d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8112d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8112d5e:	602f      	str	r7, [r5, #0]
 8112d60:	2900      	cmp	r1, #0
 8112d62:	d0ca      	beq.n	8112cfa <__sflush_r+0x1a>
 8112d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8112d68:	4299      	cmp	r1, r3
 8112d6a:	d002      	beq.n	8112d72 <__sflush_r+0x92>
 8112d6c:	4628      	mov	r0, r5
 8112d6e:	f000 fd71 	bl	8113854 <_free_r>
 8112d72:	2000      	movs	r0, #0
 8112d74:	6360      	str	r0, [r4, #52]	; 0x34
 8112d76:	e7c1      	b.n	8112cfc <__sflush_r+0x1c>
 8112d78:	6a21      	ldr	r1, [r4, #32]
 8112d7a:	2301      	movs	r3, #1
 8112d7c:	4628      	mov	r0, r5
 8112d7e:	47b0      	blx	r6
 8112d80:	1c41      	adds	r1, r0, #1
 8112d82:	d1c7      	bne.n	8112d14 <__sflush_r+0x34>
 8112d84:	682b      	ldr	r3, [r5, #0]
 8112d86:	2b00      	cmp	r3, #0
 8112d88:	d0c4      	beq.n	8112d14 <__sflush_r+0x34>
 8112d8a:	2b1d      	cmp	r3, #29
 8112d8c:	d001      	beq.n	8112d92 <__sflush_r+0xb2>
 8112d8e:	2b16      	cmp	r3, #22
 8112d90:	d101      	bne.n	8112d96 <__sflush_r+0xb6>
 8112d92:	602f      	str	r7, [r5, #0]
 8112d94:	e7b1      	b.n	8112cfa <__sflush_r+0x1a>
 8112d96:	89a3      	ldrh	r3, [r4, #12]
 8112d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8112d9c:	81a3      	strh	r3, [r4, #12]
 8112d9e:	e7ad      	b.n	8112cfc <__sflush_r+0x1c>
 8112da0:	690f      	ldr	r7, [r1, #16]
 8112da2:	2f00      	cmp	r7, #0
 8112da4:	d0a9      	beq.n	8112cfa <__sflush_r+0x1a>
 8112da6:	0793      	lsls	r3, r2, #30
 8112da8:	680e      	ldr	r6, [r1, #0]
 8112daa:	bf08      	it	eq
 8112dac:	694b      	ldreq	r3, [r1, #20]
 8112dae:	600f      	str	r7, [r1, #0]
 8112db0:	bf18      	it	ne
 8112db2:	2300      	movne	r3, #0
 8112db4:	eba6 0807 	sub.w	r8, r6, r7
 8112db8:	608b      	str	r3, [r1, #8]
 8112dba:	f1b8 0f00 	cmp.w	r8, #0
 8112dbe:	dd9c      	ble.n	8112cfa <__sflush_r+0x1a>
 8112dc0:	6a21      	ldr	r1, [r4, #32]
 8112dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8112dc4:	4643      	mov	r3, r8
 8112dc6:	463a      	mov	r2, r7
 8112dc8:	4628      	mov	r0, r5
 8112dca:	47b0      	blx	r6
 8112dcc:	2800      	cmp	r0, #0
 8112dce:	dc06      	bgt.n	8112dde <__sflush_r+0xfe>
 8112dd0:	89a3      	ldrh	r3, [r4, #12]
 8112dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8112dd6:	81a3      	strh	r3, [r4, #12]
 8112dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8112ddc:	e78e      	b.n	8112cfc <__sflush_r+0x1c>
 8112dde:	4407      	add	r7, r0
 8112de0:	eba8 0800 	sub.w	r8, r8, r0
 8112de4:	e7e9      	b.n	8112dba <__sflush_r+0xda>
 8112de6:	bf00      	nop
 8112de8:	20400001 	.word	0x20400001
=======
0810ee68 <_dtoa_r>:
 810ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ee6c:	ec57 6b10 	vmov	r6, r7, d0
 810ee70:	b097      	sub	sp, #92	; 0x5c
 810ee72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810ee74:	9106      	str	r1, [sp, #24]
 810ee76:	4604      	mov	r4, r0
 810ee78:	920b      	str	r2, [sp, #44]	; 0x2c
 810ee7a:	9312      	str	r3, [sp, #72]	; 0x48
 810ee7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810ee80:	e9cd 6700 	strd	r6, r7, [sp]
 810ee84:	b93d      	cbnz	r5, 810ee96 <_dtoa_r+0x2e>
 810ee86:	2010      	movs	r0, #16
 810ee88:	f000 fdb8 	bl	810f9fc <malloc>
 810ee8c:	6260      	str	r0, [r4, #36]	; 0x24
 810ee8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810ee92:	6005      	str	r5, [r0, #0]
 810ee94:	60c5      	str	r5, [r0, #12]
 810ee96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ee98:	6819      	ldr	r1, [r3, #0]
 810ee9a:	b151      	cbz	r1, 810eeb2 <_dtoa_r+0x4a>
 810ee9c:	685a      	ldr	r2, [r3, #4]
 810ee9e:	604a      	str	r2, [r1, #4]
 810eea0:	2301      	movs	r3, #1
 810eea2:	4093      	lsls	r3, r2
 810eea4:	608b      	str	r3, [r1, #8]
 810eea6:	4620      	mov	r0, r4
 810eea8:	f000 fdf6 	bl	810fa98 <_Bfree>
 810eeac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810eeae:	2200      	movs	r2, #0
 810eeb0:	601a      	str	r2, [r3, #0]
 810eeb2:	1e3b      	subs	r3, r7, #0
 810eeb4:	bfbb      	ittet	lt
 810eeb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810eeba:	9301      	strlt	r3, [sp, #4]
 810eebc:	2300      	movge	r3, #0
 810eebe:	2201      	movlt	r2, #1
 810eec0:	bfac      	ite	ge
 810eec2:	f8c8 3000 	strge.w	r3, [r8]
 810eec6:	f8c8 2000 	strlt.w	r2, [r8]
 810eeca:	4baf      	ldr	r3, [pc, #700]	; (810f188 <_dtoa_r+0x320>)
 810eecc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 810eed0:	ea33 0308 	bics.w	r3, r3, r8
 810eed4:	d114      	bne.n	810ef00 <_dtoa_r+0x98>
 810eed6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810eed8:	f242 730f 	movw	r3, #9999	; 0x270f
 810eedc:	6013      	str	r3, [r2, #0]
 810eede:	9b00      	ldr	r3, [sp, #0]
 810eee0:	b923      	cbnz	r3, 810eeec <_dtoa_r+0x84>
 810eee2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 810eee6:	2800      	cmp	r0, #0
 810eee8:	f000 8542 	beq.w	810f970 <_dtoa_r+0xb08>
 810eeec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810eeee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 810f19c <_dtoa_r+0x334>
 810eef2:	2b00      	cmp	r3, #0
 810eef4:	f000 8544 	beq.w	810f980 <_dtoa_r+0xb18>
 810eef8:	f10b 0303 	add.w	r3, fp, #3
 810eefc:	f000 bd3e 	b.w	810f97c <_dtoa_r+0xb14>
 810ef00:	e9dd 6700 	ldrd	r6, r7, [sp]
 810ef04:	2200      	movs	r2, #0
 810ef06:	2300      	movs	r3, #0
 810ef08:	4630      	mov	r0, r6
 810ef0a:	4639      	mov	r1, r7
 810ef0c:	f7f1 fe74 	bl	8100bf8 <__aeabi_dcmpeq>
 810ef10:	4681      	mov	r9, r0
 810ef12:	b168      	cbz	r0, 810ef30 <_dtoa_r+0xc8>
 810ef14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810ef16:	2301      	movs	r3, #1
 810ef18:	6013      	str	r3, [r2, #0]
 810ef1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ef1c:	2b00      	cmp	r3, #0
 810ef1e:	f000 8524 	beq.w	810f96a <_dtoa_r+0xb02>
 810ef22:	4b9a      	ldr	r3, [pc, #616]	; (810f18c <_dtoa_r+0x324>)
 810ef24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810ef26:	f103 3bff 	add.w	fp, r3, #4294967295
 810ef2a:	6013      	str	r3, [r2, #0]
 810ef2c:	f000 bd28 	b.w	810f980 <_dtoa_r+0xb18>
 810ef30:	aa14      	add	r2, sp, #80	; 0x50
 810ef32:	a915      	add	r1, sp, #84	; 0x54
 810ef34:	ec47 6b10 	vmov	d0, r6, r7
 810ef38:	4620      	mov	r0, r4
 810ef3a:	f001 f806 	bl	810ff4a <__d2b>
 810ef3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810ef42:	9004      	str	r0, [sp, #16]
 810ef44:	2d00      	cmp	r5, #0
 810ef46:	d07c      	beq.n	810f042 <_dtoa_r+0x1da>
 810ef48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ef4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 810ef50:	46b2      	mov	sl, r6
 810ef52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 810ef56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810ef5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 810ef5e:	2200      	movs	r2, #0
 810ef60:	4b8b      	ldr	r3, [pc, #556]	; (810f190 <_dtoa_r+0x328>)
 810ef62:	4650      	mov	r0, sl
 810ef64:	4659      	mov	r1, fp
 810ef66:	f7f1 fa27 	bl	81003b8 <__aeabi_dsub>
 810ef6a:	a381      	add	r3, pc, #516	; (adr r3, 810f170 <_dtoa_r+0x308>)
 810ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ef70:	f7f1 fbda 	bl	8100728 <__aeabi_dmul>
 810ef74:	a380      	add	r3, pc, #512	; (adr r3, 810f178 <_dtoa_r+0x310>)
 810ef76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ef7a:	f7f1 fa1f 	bl	81003bc <__adddf3>
 810ef7e:	4606      	mov	r6, r0
 810ef80:	4628      	mov	r0, r5
 810ef82:	460f      	mov	r7, r1
 810ef84:	f7f1 fb66 	bl	8100654 <__aeabi_i2d>
 810ef88:	a37d      	add	r3, pc, #500	; (adr r3, 810f180 <_dtoa_r+0x318>)
 810ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ef8e:	f7f1 fbcb 	bl	8100728 <__aeabi_dmul>
 810ef92:	4602      	mov	r2, r0
 810ef94:	460b      	mov	r3, r1
 810ef96:	4630      	mov	r0, r6
 810ef98:	4639      	mov	r1, r7
 810ef9a:	f7f1 fa0f 	bl	81003bc <__adddf3>
 810ef9e:	4606      	mov	r6, r0
 810efa0:	460f      	mov	r7, r1
 810efa2:	f7f1 fe71 	bl	8100c88 <__aeabi_d2iz>
 810efa6:	2200      	movs	r2, #0
 810efa8:	4682      	mov	sl, r0
 810efaa:	2300      	movs	r3, #0
 810efac:	4630      	mov	r0, r6
 810efae:	4639      	mov	r1, r7
 810efb0:	f7f1 fe2c 	bl	8100c0c <__aeabi_dcmplt>
 810efb4:	b148      	cbz	r0, 810efca <_dtoa_r+0x162>
 810efb6:	4650      	mov	r0, sl
 810efb8:	f7f1 fb4c 	bl	8100654 <__aeabi_i2d>
 810efbc:	4632      	mov	r2, r6
 810efbe:	463b      	mov	r3, r7
 810efc0:	f7f1 fe1a 	bl	8100bf8 <__aeabi_dcmpeq>
 810efc4:	b908      	cbnz	r0, 810efca <_dtoa_r+0x162>
 810efc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810efca:	f1ba 0f16 	cmp.w	sl, #22
 810efce:	d859      	bhi.n	810f084 <_dtoa_r+0x21c>
 810efd0:	4970      	ldr	r1, [pc, #448]	; (810f194 <_dtoa_r+0x32c>)
 810efd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810efd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 810efda:	e9d1 0100 	ldrd	r0, r1, [r1]
 810efde:	f7f1 fe33 	bl	8100c48 <__aeabi_dcmpgt>
 810efe2:	2800      	cmp	r0, #0
 810efe4:	d050      	beq.n	810f088 <_dtoa_r+0x220>
 810efe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810efea:	2300      	movs	r3, #0
 810efec:	930f      	str	r3, [sp, #60]	; 0x3c
 810efee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810eff0:	1b5d      	subs	r5, r3, r5
 810eff2:	f1b5 0801 	subs.w	r8, r5, #1
 810eff6:	bf49      	itett	mi
 810eff8:	f1c5 0301 	rsbmi	r3, r5, #1
 810effc:	2300      	movpl	r3, #0
 810effe:	9305      	strmi	r3, [sp, #20]
 810f000:	f04f 0800 	movmi.w	r8, #0
 810f004:	bf58      	it	pl
 810f006:	9305      	strpl	r3, [sp, #20]
 810f008:	f1ba 0f00 	cmp.w	sl, #0
 810f00c:	db3e      	blt.n	810f08c <_dtoa_r+0x224>
 810f00e:	2300      	movs	r3, #0
 810f010:	44d0      	add	r8, sl
 810f012:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 810f016:	9307      	str	r3, [sp, #28]
 810f018:	9b06      	ldr	r3, [sp, #24]
 810f01a:	2b09      	cmp	r3, #9
 810f01c:	f200 8090 	bhi.w	810f140 <_dtoa_r+0x2d8>
 810f020:	2b05      	cmp	r3, #5
 810f022:	bfc4      	itt	gt
 810f024:	3b04      	subgt	r3, #4
 810f026:	9306      	strgt	r3, [sp, #24]
 810f028:	9b06      	ldr	r3, [sp, #24]
 810f02a:	f1a3 0302 	sub.w	r3, r3, #2
 810f02e:	bfcc      	ite	gt
 810f030:	2500      	movgt	r5, #0
 810f032:	2501      	movle	r5, #1
 810f034:	2b03      	cmp	r3, #3
 810f036:	f200 808f 	bhi.w	810f158 <_dtoa_r+0x2f0>
 810f03a:	e8df f003 	tbb	[pc, r3]
 810f03e:	7f7d      	.short	0x7f7d
 810f040:	7131      	.short	0x7131
 810f042:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 810f046:	441d      	add	r5, r3
 810f048:	f205 4032 	addw	r0, r5, #1074	; 0x432
 810f04c:	2820      	cmp	r0, #32
 810f04e:	dd13      	ble.n	810f078 <_dtoa_r+0x210>
 810f050:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 810f054:	9b00      	ldr	r3, [sp, #0]
 810f056:	fa08 f800 	lsl.w	r8, r8, r0
 810f05a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 810f05e:	fa23 f000 	lsr.w	r0, r3, r0
 810f062:	ea48 0000 	orr.w	r0, r8, r0
 810f066:	f7f1 fae5 	bl	8100634 <__aeabi_ui2d>
 810f06a:	2301      	movs	r3, #1
 810f06c:	4682      	mov	sl, r0
 810f06e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 810f072:	3d01      	subs	r5, #1
 810f074:	9313      	str	r3, [sp, #76]	; 0x4c
 810f076:	e772      	b.n	810ef5e <_dtoa_r+0xf6>
 810f078:	9b00      	ldr	r3, [sp, #0]
 810f07a:	f1c0 0020 	rsb	r0, r0, #32
 810f07e:	fa03 f000 	lsl.w	r0, r3, r0
 810f082:	e7f0      	b.n	810f066 <_dtoa_r+0x1fe>
 810f084:	2301      	movs	r3, #1
 810f086:	e7b1      	b.n	810efec <_dtoa_r+0x184>
 810f088:	900f      	str	r0, [sp, #60]	; 0x3c
 810f08a:	e7b0      	b.n	810efee <_dtoa_r+0x186>
 810f08c:	9b05      	ldr	r3, [sp, #20]
 810f08e:	eba3 030a 	sub.w	r3, r3, sl
 810f092:	9305      	str	r3, [sp, #20]
 810f094:	f1ca 0300 	rsb	r3, sl, #0
 810f098:	9307      	str	r3, [sp, #28]
 810f09a:	2300      	movs	r3, #0
 810f09c:	930e      	str	r3, [sp, #56]	; 0x38
 810f09e:	e7bb      	b.n	810f018 <_dtoa_r+0x1b0>
 810f0a0:	2301      	movs	r3, #1
 810f0a2:	930a      	str	r3, [sp, #40]	; 0x28
 810f0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f0a6:	2b00      	cmp	r3, #0
 810f0a8:	dd59      	ble.n	810f15e <_dtoa_r+0x2f6>
 810f0aa:	9302      	str	r3, [sp, #8]
 810f0ac:	4699      	mov	r9, r3
 810f0ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810f0b0:	2200      	movs	r2, #0
 810f0b2:	6072      	str	r2, [r6, #4]
 810f0b4:	2204      	movs	r2, #4
 810f0b6:	f102 0014 	add.w	r0, r2, #20
 810f0ba:	4298      	cmp	r0, r3
 810f0bc:	6871      	ldr	r1, [r6, #4]
 810f0be:	d953      	bls.n	810f168 <_dtoa_r+0x300>
 810f0c0:	4620      	mov	r0, r4
 810f0c2:	f000 fcb5 	bl	810fa30 <_Balloc>
 810f0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810f0c8:	6030      	str	r0, [r6, #0]
 810f0ca:	f1b9 0f0e 	cmp.w	r9, #14
 810f0ce:	f8d3 b000 	ldr.w	fp, [r3]
 810f0d2:	f200 80e6 	bhi.w	810f2a2 <_dtoa_r+0x43a>
 810f0d6:	2d00      	cmp	r5, #0
 810f0d8:	f000 80e3 	beq.w	810f2a2 <_dtoa_r+0x43a>
 810f0dc:	ed9d 7b00 	vldr	d7, [sp]
 810f0e0:	f1ba 0f00 	cmp.w	sl, #0
 810f0e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 810f0e8:	dd74      	ble.n	810f1d4 <_dtoa_r+0x36c>
 810f0ea:	4a2a      	ldr	r2, [pc, #168]	; (810f194 <_dtoa_r+0x32c>)
 810f0ec:	f00a 030f 	and.w	r3, sl, #15
 810f0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810f0f4:	ed93 7b00 	vldr	d7, [r3]
 810f0f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 810f0fc:	06f0      	lsls	r0, r6, #27
 810f0fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 810f102:	d565      	bpl.n	810f1d0 <_dtoa_r+0x368>
 810f104:	4b24      	ldr	r3, [pc, #144]	; (810f198 <_dtoa_r+0x330>)
 810f106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810f10a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810f10e:	f7f1 fc35 	bl	810097c <__aeabi_ddiv>
 810f112:	e9cd 0100 	strd	r0, r1, [sp]
 810f116:	f006 060f 	and.w	r6, r6, #15
 810f11a:	2503      	movs	r5, #3
 810f11c:	4f1e      	ldr	r7, [pc, #120]	; (810f198 <_dtoa_r+0x330>)
 810f11e:	e04c      	b.n	810f1ba <_dtoa_r+0x352>
 810f120:	2301      	movs	r3, #1
 810f122:	930a      	str	r3, [sp, #40]	; 0x28
 810f124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f126:	4453      	add	r3, sl
 810f128:	f103 0901 	add.w	r9, r3, #1
 810f12c:	9302      	str	r3, [sp, #8]
 810f12e:	464b      	mov	r3, r9
 810f130:	2b01      	cmp	r3, #1
 810f132:	bfb8      	it	lt
 810f134:	2301      	movlt	r3, #1
 810f136:	e7ba      	b.n	810f0ae <_dtoa_r+0x246>
 810f138:	2300      	movs	r3, #0
 810f13a:	e7b2      	b.n	810f0a2 <_dtoa_r+0x23a>
 810f13c:	2300      	movs	r3, #0
 810f13e:	e7f0      	b.n	810f122 <_dtoa_r+0x2ba>
 810f140:	2501      	movs	r5, #1
 810f142:	2300      	movs	r3, #0
 810f144:	9306      	str	r3, [sp, #24]
 810f146:	950a      	str	r5, [sp, #40]	; 0x28
 810f148:	f04f 33ff 	mov.w	r3, #4294967295
 810f14c:	9302      	str	r3, [sp, #8]
 810f14e:	4699      	mov	r9, r3
 810f150:	2200      	movs	r2, #0
 810f152:	2312      	movs	r3, #18
 810f154:	920b      	str	r2, [sp, #44]	; 0x2c
 810f156:	e7aa      	b.n	810f0ae <_dtoa_r+0x246>
 810f158:	2301      	movs	r3, #1
 810f15a:	930a      	str	r3, [sp, #40]	; 0x28
 810f15c:	e7f4      	b.n	810f148 <_dtoa_r+0x2e0>
 810f15e:	2301      	movs	r3, #1
 810f160:	9302      	str	r3, [sp, #8]
 810f162:	4699      	mov	r9, r3
 810f164:	461a      	mov	r2, r3
 810f166:	e7f5      	b.n	810f154 <_dtoa_r+0x2ec>
 810f168:	3101      	adds	r1, #1
 810f16a:	6071      	str	r1, [r6, #4]
 810f16c:	0052      	lsls	r2, r2, #1
 810f16e:	e7a2      	b.n	810f0b6 <_dtoa_r+0x24e>
 810f170:	636f4361 	.word	0x636f4361
 810f174:	3fd287a7 	.word	0x3fd287a7
 810f178:	8b60c8b3 	.word	0x8b60c8b3
 810f17c:	3fc68a28 	.word	0x3fc68a28
 810f180:	509f79fb 	.word	0x509f79fb
 810f184:	3fd34413 	.word	0x3fd34413
 810f188:	7ff00000 	.word	0x7ff00000
 810f18c:	08110f04 	.word	0x08110f04
 810f190:	3ff80000 	.word	0x3ff80000
 810f194:	08110fc8 	.word	0x08110fc8
 810f198:	08110fa0 	.word	0x08110fa0
 810f19c:	08110f30 	.word	0x08110f30
 810f1a0:	07f1      	lsls	r1, r6, #31
 810f1a2:	d508      	bpl.n	810f1b6 <_dtoa_r+0x34e>
 810f1a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810f1a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810f1ac:	f7f1 fabc 	bl	8100728 <__aeabi_dmul>
 810f1b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810f1b4:	3501      	adds	r5, #1
 810f1b6:	1076      	asrs	r6, r6, #1
 810f1b8:	3708      	adds	r7, #8
 810f1ba:	2e00      	cmp	r6, #0
 810f1bc:	d1f0      	bne.n	810f1a0 <_dtoa_r+0x338>
 810f1be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 810f1c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f1c6:	f7f1 fbd9 	bl	810097c <__aeabi_ddiv>
 810f1ca:	e9cd 0100 	strd	r0, r1, [sp]
 810f1ce:	e01a      	b.n	810f206 <_dtoa_r+0x39e>
 810f1d0:	2502      	movs	r5, #2
 810f1d2:	e7a3      	b.n	810f11c <_dtoa_r+0x2b4>
 810f1d4:	f000 80a0 	beq.w	810f318 <_dtoa_r+0x4b0>
 810f1d8:	f1ca 0600 	rsb	r6, sl, #0
 810f1dc:	4b9f      	ldr	r3, [pc, #636]	; (810f45c <_dtoa_r+0x5f4>)
 810f1de:	4fa0      	ldr	r7, [pc, #640]	; (810f460 <_dtoa_r+0x5f8>)
 810f1e0:	f006 020f 	and.w	r2, r6, #15
 810f1e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810f1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f1ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810f1f0:	f7f1 fa9a 	bl	8100728 <__aeabi_dmul>
 810f1f4:	e9cd 0100 	strd	r0, r1, [sp]
 810f1f8:	1136      	asrs	r6, r6, #4
 810f1fa:	2300      	movs	r3, #0
 810f1fc:	2502      	movs	r5, #2
 810f1fe:	2e00      	cmp	r6, #0
 810f200:	d17f      	bne.n	810f302 <_dtoa_r+0x49a>
 810f202:	2b00      	cmp	r3, #0
 810f204:	d1e1      	bne.n	810f1ca <_dtoa_r+0x362>
 810f206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810f208:	2b00      	cmp	r3, #0
 810f20a:	f000 8087 	beq.w	810f31c <_dtoa_r+0x4b4>
 810f20e:	e9dd 6700 	ldrd	r6, r7, [sp]
 810f212:	2200      	movs	r2, #0
 810f214:	4b93      	ldr	r3, [pc, #588]	; (810f464 <_dtoa_r+0x5fc>)
 810f216:	4630      	mov	r0, r6
 810f218:	4639      	mov	r1, r7
 810f21a:	f7f1 fcf7 	bl	8100c0c <__aeabi_dcmplt>
 810f21e:	2800      	cmp	r0, #0
 810f220:	d07c      	beq.n	810f31c <_dtoa_r+0x4b4>
 810f222:	f1b9 0f00 	cmp.w	r9, #0
 810f226:	d079      	beq.n	810f31c <_dtoa_r+0x4b4>
 810f228:	9b02      	ldr	r3, [sp, #8]
 810f22a:	2b00      	cmp	r3, #0
 810f22c:	dd35      	ble.n	810f29a <_dtoa_r+0x432>
 810f22e:	f10a 33ff 	add.w	r3, sl, #4294967295
 810f232:	9308      	str	r3, [sp, #32]
 810f234:	4639      	mov	r1, r7
 810f236:	2200      	movs	r2, #0
 810f238:	4b8b      	ldr	r3, [pc, #556]	; (810f468 <_dtoa_r+0x600>)
 810f23a:	4630      	mov	r0, r6
 810f23c:	f7f1 fa74 	bl	8100728 <__aeabi_dmul>
 810f240:	e9cd 0100 	strd	r0, r1, [sp]
 810f244:	9f02      	ldr	r7, [sp, #8]
 810f246:	3501      	adds	r5, #1
 810f248:	4628      	mov	r0, r5
 810f24a:	f7f1 fa03 	bl	8100654 <__aeabi_i2d>
 810f24e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f252:	f7f1 fa69 	bl	8100728 <__aeabi_dmul>
 810f256:	2200      	movs	r2, #0
 810f258:	4b84      	ldr	r3, [pc, #528]	; (810f46c <_dtoa_r+0x604>)
 810f25a:	f7f1 f8af 	bl	81003bc <__adddf3>
 810f25e:	4605      	mov	r5, r0
 810f260:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 810f264:	2f00      	cmp	r7, #0
 810f266:	d15d      	bne.n	810f324 <_dtoa_r+0x4bc>
 810f268:	2200      	movs	r2, #0
 810f26a:	4b81      	ldr	r3, [pc, #516]	; (810f470 <_dtoa_r+0x608>)
 810f26c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f270:	f7f1 f8a2 	bl	81003b8 <__aeabi_dsub>
 810f274:	462a      	mov	r2, r5
 810f276:	4633      	mov	r3, r6
 810f278:	e9cd 0100 	strd	r0, r1, [sp]
 810f27c:	f7f1 fce4 	bl	8100c48 <__aeabi_dcmpgt>
 810f280:	2800      	cmp	r0, #0
 810f282:	f040 8288 	bne.w	810f796 <_dtoa_r+0x92e>
 810f286:	462a      	mov	r2, r5
 810f288:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 810f28c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f290:	f7f1 fcbc 	bl	8100c0c <__aeabi_dcmplt>
 810f294:	2800      	cmp	r0, #0
 810f296:	f040 827c 	bne.w	810f792 <_dtoa_r+0x92a>
 810f29a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810f29e:	e9cd 2300 	strd	r2, r3, [sp]
 810f2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810f2a4:	2b00      	cmp	r3, #0
 810f2a6:	f2c0 8150 	blt.w	810f54a <_dtoa_r+0x6e2>
 810f2aa:	f1ba 0f0e 	cmp.w	sl, #14
 810f2ae:	f300 814c 	bgt.w	810f54a <_dtoa_r+0x6e2>
 810f2b2:	4b6a      	ldr	r3, [pc, #424]	; (810f45c <_dtoa_r+0x5f4>)
 810f2b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810f2b8:	ed93 7b00 	vldr	d7, [r3]
 810f2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f2be:	2b00      	cmp	r3, #0
 810f2c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 810f2c4:	f280 80d8 	bge.w	810f478 <_dtoa_r+0x610>
 810f2c8:	f1b9 0f00 	cmp.w	r9, #0
 810f2cc:	f300 80d4 	bgt.w	810f478 <_dtoa_r+0x610>
 810f2d0:	f040 825e 	bne.w	810f790 <_dtoa_r+0x928>
 810f2d4:	2200      	movs	r2, #0
 810f2d6:	4b66      	ldr	r3, [pc, #408]	; (810f470 <_dtoa_r+0x608>)
 810f2d8:	ec51 0b17 	vmov	r0, r1, d7
 810f2dc:	f7f1 fa24 	bl	8100728 <__aeabi_dmul>
 810f2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f2e4:	f7f1 fca6 	bl	8100c34 <__aeabi_dcmpge>
 810f2e8:	464f      	mov	r7, r9
 810f2ea:	464e      	mov	r6, r9
 810f2ec:	2800      	cmp	r0, #0
 810f2ee:	f040 8234 	bne.w	810f75a <_dtoa_r+0x8f2>
 810f2f2:	2331      	movs	r3, #49	; 0x31
 810f2f4:	f10b 0501 	add.w	r5, fp, #1
 810f2f8:	f88b 3000 	strb.w	r3, [fp]
 810f2fc:	f10a 0a01 	add.w	sl, sl, #1
 810f300:	e22f      	b.n	810f762 <_dtoa_r+0x8fa>
 810f302:	07f2      	lsls	r2, r6, #31
 810f304:	d505      	bpl.n	810f312 <_dtoa_r+0x4aa>
 810f306:	e9d7 2300 	ldrd	r2, r3, [r7]
 810f30a:	f7f1 fa0d 	bl	8100728 <__aeabi_dmul>
 810f30e:	3501      	adds	r5, #1
 810f310:	2301      	movs	r3, #1
 810f312:	1076      	asrs	r6, r6, #1
 810f314:	3708      	adds	r7, #8
 810f316:	e772      	b.n	810f1fe <_dtoa_r+0x396>
 810f318:	2502      	movs	r5, #2
 810f31a:	e774      	b.n	810f206 <_dtoa_r+0x39e>
 810f31c:	f8cd a020 	str.w	sl, [sp, #32]
 810f320:	464f      	mov	r7, r9
 810f322:	e791      	b.n	810f248 <_dtoa_r+0x3e0>
 810f324:	4b4d      	ldr	r3, [pc, #308]	; (810f45c <_dtoa_r+0x5f4>)
 810f326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810f32a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810f32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f330:	2b00      	cmp	r3, #0
 810f332:	d047      	beq.n	810f3c4 <_dtoa_r+0x55c>
 810f334:	4602      	mov	r2, r0
 810f336:	460b      	mov	r3, r1
 810f338:	2000      	movs	r0, #0
 810f33a:	494e      	ldr	r1, [pc, #312]	; (810f474 <_dtoa_r+0x60c>)
 810f33c:	f7f1 fb1e 	bl	810097c <__aeabi_ddiv>
 810f340:	462a      	mov	r2, r5
 810f342:	4633      	mov	r3, r6
 810f344:	f7f1 f838 	bl	81003b8 <__aeabi_dsub>
 810f348:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810f34c:	465d      	mov	r5, fp
 810f34e:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f352:	f7f1 fc99 	bl	8100c88 <__aeabi_d2iz>
 810f356:	4606      	mov	r6, r0
 810f358:	f7f1 f97c 	bl	8100654 <__aeabi_i2d>
 810f35c:	4602      	mov	r2, r0
 810f35e:	460b      	mov	r3, r1
 810f360:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f364:	f7f1 f828 	bl	81003b8 <__aeabi_dsub>
 810f368:	3630      	adds	r6, #48	; 0x30
 810f36a:	f805 6b01 	strb.w	r6, [r5], #1
 810f36e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810f372:	e9cd 0100 	strd	r0, r1, [sp]
 810f376:	f7f1 fc49 	bl	8100c0c <__aeabi_dcmplt>
 810f37a:	2800      	cmp	r0, #0
 810f37c:	d163      	bne.n	810f446 <_dtoa_r+0x5de>
 810f37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f382:	2000      	movs	r0, #0
 810f384:	4937      	ldr	r1, [pc, #220]	; (810f464 <_dtoa_r+0x5fc>)
 810f386:	f7f1 f817 	bl	81003b8 <__aeabi_dsub>
 810f38a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810f38e:	f7f1 fc3d 	bl	8100c0c <__aeabi_dcmplt>
 810f392:	2800      	cmp	r0, #0
 810f394:	f040 80b7 	bne.w	810f506 <_dtoa_r+0x69e>
 810f398:	eba5 030b 	sub.w	r3, r5, fp
 810f39c:	429f      	cmp	r7, r3
 810f39e:	f77f af7c 	ble.w	810f29a <_dtoa_r+0x432>
 810f3a2:	2200      	movs	r2, #0
 810f3a4:	4b30      	ldr	r3, [pc, #192]	; (810f468 <_dtoa_r+0x600>)
 810f3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810f3aa:	f7f1 f9bd 	bl	8100728 <__aeabi_dmul>
 810f3ae:	2200      	movs	r2, #0
 810f3b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810f3b4:	4b2c      	ldr	r3, [pc, #176]	; (810f468 <_dtoa_r+0x600>)
 810f3b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f3ba:	f7f1 f9b5 	bl	8100728 <__aeabi_dmul>
 810f3be:	e9cd 0100 	strd	r0, r1, [sp]
 810f3c2:	e7c4      	b.n	810f34e <_dtoa_r+0x4e6>
 810f3c4:	462a      	mov	r2, r5
 810f3c6:	4633      	mov	r3, r6
 810f3c8:	f7f1 f9ae 	bl	8100728 <__aeabi_dmul>
 810f3cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810f3d0:	eb0b 0507 	add.w	r5, fp, r7
 810f3d4:	465e      	mov	r6, fp
 810f3d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f3da:	f7f1 fc55 	bl	8100c88 <__aeabi_d2iz>
 810f3de:	4607      	mov	r7, r0
 810f3e0:	f7f1 f938 	bl	8100654 <__aeabi_i2d>
 810f3e4:	3730      	adds	r7, #48	; 0x30
 810f3e6:	4602      	mov	r2, r0
 810f3e8:	460b      	mov	r3, r1
 810f3ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f3ee:	f7f0 ffe3 	bl	81003b8 <__aeabi_dsub>
 810f3f2:	f806 7b01 	strb.w	r7, [r6], #1
 810f3f6:	42ae      	cmp	r6, r5
 810f3f8:	e9cd 0100 	strd	r0, r1, [sp]
 810f3fc:	f04f 0200 	mov.w	r2, #0
 810f400:	d126      	bne.n	810f450 <_dtoa_r+0x5e8>
 810f402:	4b1c      	ldr	r3, [pc, #112]	; (810f474 <_dtoa_r+0x60c>)
 810f404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810f408:	f7f0 ffd8 	bl	81003bc <__adddf3>
 810f40c:	4602      	mov	r2, r0
 810f40e:	460b      	mov	r3, r1
 810f410:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f414:	f7f1 fc18 	bl	8100c48 <__aeabi_dcmpgt>
 810f418:	2800      	cmp	r0, #0
 810f41a:	d174      	bne.n	810f506 <_dtoa_r+0x69e>
 810f41c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810f420:	2000      	movs	r0, #0
 810f422:	4914      	ldr	r1, [pc, #80]	; (810f474 <_dtoa_r+0x60c>)
 810f424:	f7f0 ffc8 	bl	81003b8 <__aeabi_dsub>
 810f428:	4602      	mov	r2, r0
 810f42a:	460b      	mov	r3, r1
 810f42c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f430:	f7f1 fbec 	bl	8100c0c <__aeabi_dcmplt>
 810f434:	2800      	cmp	r0, #0
 810f436:	f43f af30 	beq.w	810f29a <_dtoa_r+0x432>
 810f43a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810f43e:	2b30      	cmp	r3, #48	; 0x30
 810f440:	f105 32ff 	add.w	r2, r5, #4294967295
 810f444:	d002      	beq.n	810f44c <_dtoa_r+0x5e4>
 810f446:	f8dd a020 	ldr.w	sl, [sp, #32]
 810f44a:	e04a      	b.n	810f4e2 <_dtoa_r+0x67a>
 810f44c:	4615      	mov	r5, r2
 810f44e:	e7f4      	b.n	810f43a <_dtoa_r+0x5d2>
 810f450:	4b05      	ldr	r3, [pc, #20]	; (810f468 <_dtoa_r+0x600>)
 810f452:	f7f1 f969 	bl	8100728 <__aeabi_dmul>
 810f456:	e9cd 0100 	strd	r0, r1, [sp]
 810f45a:	e7bc      	b.n	810f3d6 <_dtoa_r+0x56e>
 810f45c:	08110fc8 	.word	0x08110fc8
 810f460:	08110fa0 	.word	0x08110fa0
 810f464:	3ff00000 	.word	0x3ff00000
 810f468:	40240000 	.word	0x40240000
 810f46c:	401c0000 	.word	0x401c0000
 810f470:	40140000 	.word	0x40140000
 810f474:	3fe00000 	.word	0x3fe00000
 810f478:	e9dd 6700 	ldrd	r6, r7, [sp]
 810f47c:	465d      	mov	r5, fp
 810f47e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f482:	4630      	mov	r0, r6
 810f484:	4639      	mov	r1, r7
 810f486:	f7f1 fa79 	bl	810097c <__aeabi_ddiv>
 810f48a:	f7f1 fbfd 	bl	8100c88 <__aeabi_d2iz>
 810f48e:	4680      	mov	r8, r0
 810f490:	f7f1 f8e0 	bl	8100654 <__aeabi_i2d>
 810f494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f498:	f7f1 f946 	bl	8100728 <__aeabi_dmul>
 810f49c:	4602      	mov	r2, r0
 810f49e:	460b      	mov	r3, r1
 810f4a0:	4630      	mov	r0, r6
 810f4a2:	4639      	mov	r1, r7
 810f4a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 810f4a8:	f7f0 ff86 	bl	81003b8 <__aeabi_dsub>
 810f4ac:	f805 6b01 	strb.w	r6, [r5], #1
 810f4b0:	eba5 060b 	sub.w	r6, r5, fp
 810f4b4:	45b1      	cmp	r9, r6
 810f4b6:	4602      	mov	r2, r0
 810f4b8:	460b      	mov	r3, r1
 810f4ba:	d139      	bne.n	810f530 <_dtoa_r+0x6c8>
 810f4bc:	f7f0 ff7e 	bl	81003bc <__adddf3>
 810f4c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f4c4:	4606      	mov	r6, r0
 810f4c6:	460f      	mov	r7, r1
 810f4c8:	f7f1 fbbe 	bl	8100c48 <__aeabi_dcmpgt>
 810f4cc:	b9c8      	cbnz	r0, 810f502 <_dtoa_r+0x69a>
 810f4ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f4d2:	4630      	mov	r0, r6
 810f4d4:	4639      	mov	r1, r7
 810f4d6:	f7f1 fb8f 	bl	8100bf8 <__aeabi_dcmpeq>
 810f4da:	b110      	cbz	r0, 810f4e2 <_dtoa_r+0x67a>
 810f4dc:	f018 0f01 	tst.w	r8, #1
 810f4e0:	d10f      	bne.n	810f502 <_dtoa_r+0x69a>
 810f4e2:	9904      	ldr	r1, [sp, #16]
 810f4e4:	4620      	mov	r0, r4
 810f4e6:	f000 fad7 	bl	810fa98 <_Bfree>
 810f4ea:	2300      	movs	r3, #0
 810f4ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810f4ee:	702b      	strb	r3, [r5, #0]
 810f4f0:	f10a 0301 	add.w	r3, sl, #1
 810f4f4:	6013      	str	r3, [r2, #0]
 810f4f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810f4f8:	2b00      	cmp	r3, #0
 810f4fa:	f000 8241 	beq.w	810f980 <_dtoa_r+0xb18>
 810f4fe:	601d      	str	r5, [r3, #0]
 810f500:	e23e      	b.n	810f980 <_dtoa_r+0xb18>
 810f502:	f8cd a020 	str.w	sl, [sp, #32]
 810f506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810f50a:	2a39      	cmp	r2, #57	; 0x39
 810f50c:	f105 33ff 	add.w	r3, r5, #4294967295
 810f510:	d108      	bne.n	810f524 <_dtoa_r+0x6bc>
 810f512:	459b      	cmp	fp, r3
 810f514:	d10a      	bne.n	810f52c <_dtoa_r+0x6c4>
 810f516:	9b08      	ldr	r3, [sp, #32]
 810f518:	3301      	adds	r3, #1
 810f51a:	9308      	str	r3, [sp, #32]
 810f51c:	2330      	movs	r3, #48	; 0x30
 810f51e:	f88b 3000 	strb.w	r3, [fp]
 810f522:	465b      	mov	r3, fp
 810f524:	781a      	ldrb	r2, [r3, #0]
 810f526:	3201      	adds	r2, #1
 810f528:	701a      	strb	r2, [r3, #0]
 810f52a:	e78c      	b.n	810f446 <_dtoa_r+0x5de>
 810f52c:	461d      	mov	r5, r3
 810f52e:	e7ea      	b.n	810f506 <_dtoa_r+0x69e>
 810f530:	2200      	movs	r2, #0
 810f532:	4b9b      	ldr	r3, [pc, #620]	; (810f7a0 <_dtoa_r+0x938>)
 810f534:	f7f1 f8f8 	bl	8100728 <__aeabi_dmul>
 810f538:	2200      	movs	r2, #0
 810f53a:	2300      	movs	r3, #0
 810f53c:	4606      	mov	r6, r0
 810f53e:	460f      	mov	r7, r1
 810f540:	f7f1 fb5a 	bl	8100bf8 <__aeabi_dcmpeq>
 810f544:	2800      	cmp	r0, #0
 810f546:	d09a      	beq.n	810f47e <_dtoa_r+0x616>
 810f548:	e7cb      	b.n	810f4e2 <_dtoa_r+0x67a>
 810f54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810f54c:	2a00      	cmp	r2, #0
 810f54e:	f000 808b 	beq.w	810f668 <_dtoa_r+0x800>
 810f552:	9a06      	ldr	r2, [sp, #24]
 810f554:	2a01      	cmp	r2, #1
 810f556:	dc6e      	bgt.n	810f636 <_dtoa_r+0x7ce>
 810f558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810f55a:	2a00      	cmp	r2, #0
 810f55c:	d067      	beq.n	810f62e <_dtoa_r+0x7c6>
 810f55e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810f562:	9f07      	ldr	r7, [sp, #28]
 810f564:	9d05      	ldr	r5, [sp, #20]
 810f566:	9a05      	ldr	r2, [sp, #20]
 810f568:	2101      	movs	r1, #1
 810f56a:	441a      	add	r2, r3
 810f56c:	4620      	mov	r0, r4
 810f56e:	9205      	str	r2, [sp, #20]
 810f570:	4498      	add	r8, r3
 810f572:	f000 fb31 	bl	810fbd8 <__i2b>
 810f576:	4606      	mov	r6, r0
 810f578:	2d00      	cmp	r5, #0
 810f57a:	dd0c      	ble.n	810f596 <_dtoa_r+0x72e>
 810f57c:	f1b8 0f00 	cmp.w	r8, #0
 810f580:	dd09      	ble.n	810f596 <_dtoa_r+0x72e>
 810f582:	4545      	cmp	r5, r8
 810f584:	9a05      	ldr	r2, [sp, #20]
 810f586:	462b      	mov	r3, r5
 810f588:	bfa8      	it	ge
 810f58a:	4643      	movge	r3, r8
 810f58c:	1ad2      	subs	r2, r2, r3
 810f58e:	9205      	str	r2, [sp, #20]
 810f590:	1aed      	subs	r5, r5, r3
 810f592:	eba8 0803 	sub.w	r8, r8, r3
 810f596:	9b07      	ldr	r3, [sp, #28]
 810f598:	b1eb      	cbz	r3, 810f5d6 <_dtoa_r+0x76e>
 810f59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f59c:	2b00      	cmp	r3, #0
 810f59e:	d067      	beq.n	810f670 <_dtoa_r+0x808>
 810f5a0:	b18f      	cbz	r7, 810f5c6 <_dtoa_r+0x75e>
 810f5a2:	4631      	mov	r1, r6
 810f5a4:	463a      	mov	r2, r7
 810f5a6:	4620      	mov	r0, r4
 810f5a8:	f000 fbb6 	bl	810fd18 <__pow5mult>
 810f5ac:	9a04      	ldr	r2, [sp, #16]
 810f5ae:	4601      	mov	r1, r0
 810f5b0:	4606      	mov	r6, r0
 810f5b2:	4620      	mov	r0, r4
 810f5b4:	f000 fb19 	bl	810fbea <__multiply>
 810f5b8:	9904      	ldr	r1, [sp, #16]
 810f5ba:	9008      	str	r0, [sp, #32]
 810f5bc:	4620      	mov	r0, r4
 810f5be:	f000 fa6b 	bl	810fa98 <_Bfree>
 810f5c2:	9b08      	ldr	r3, [sp, #32]
 810f5c4:	9304      	str	r3, [sp, #16]
 810f5c6:	9b07      	ldr	r3, [sp, #28]
 810f5c8:	1bda      	subs	r2, r3, r7
 810f5ca:	d004      	beq.n	810f5d6 <_dtoa_r+0x76e>
 810f5cc:	9904      	ldr	r1, [sp, #16]
 810f5ce:	4620      	mov	r0, r4
 810f5d0:	f000 fba2 	bl	810fd18 <__pow5mult>
 810f5d4:	9004      	str	r0, [sp, #16]
 810f5d6:	2101      	movs	r1, #1
 810f5d8:	4620      	mov	r0, r4
 810f5da:	f000 fafd 	bl	810fbd8 <__i2b>
 810f5de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810f5e0:	4607      	mov	r7, r0
 810f5e2:	2b00      	cmp	r3, #0
 810f5e4:	f000 81d0 	beq.w	810f988 <_dtoa_r+0xb20>
 810f5e8:	461a      	mov	r2, r3
 810f5ea:	4601      	mov	r1, r0
 810f5ec:	4620      	mov	r0, r4
 810f5ee:	f000 fb93 	bl	810fd18 <__pow5mult>
 810f5f2:	9b06      	ldr	r3, [sp, #24]
 810f5f4:	2b01      	cmp	r3, #1
 810f5f6:	4607      	mov	r7, r0
 810f5f8:	dc40      	bgt.n	810f67c <_dtoa_r+0x814>
 810f5fa:	9b00      	ldr	r3, [sp, #0]
 810f5fc:	2b00      	cmp	r3, #0
 810f5fe:	d139      	bne.n	810f674 <_dtoa_r+0x80c>
 810f600:	9b01      	ldr	r3, [sp, #4]
 810f602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810f606:	2b00      	cmp	r3, #0
 810f608:	d136      	bne.n	810f678 <_dtoa_r+0x810>
 810f60a:	9b01      	ldr	r3, [sp, #4]
 810f60c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f610:	0d1b      	lsrs	r3, r3, #20
 810f612:	051b      	lsls	r3, r3, #20
 810f614:	b12b      	cbz	r3, 810f622 <_dtoa_r+0x7ba>
 810f616:	9b05      	ldr	r3, [sp, #20]
 810f618:	3301      	adds	r3, #1
 810f61a:	9305      	str	r3, [sp, #20]
 810f61c:	f108 0801 	add.w	r8, r8, #1
 810f620:	2301      	movs	r3, #1
 810f622:	9307      	str	r3, [sp, #28]
 810f624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810f626:	2b00      	cmp	r3, #0
 810f628:	d12a      	bne.n	810f680 <_dtoa_r+0x818>
 810f62a:	2001      	movs	r0, #1
 810f62c:	e030      	b.n	810f690 <_dtoa_r+0x828>
 810f62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810f630:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810f634:	e795      	b.n	810f562 <_dtoa_r+0x6fa>
 810f636:	9b07      	ldr	r3, [sp, #28]
 810f638:	f109 37ff 	add.w	r7, r9, #4294967295
 810f63c:	42bb      	cmp	r3, r7
 810f63e:	bfbf      	itttt	lt
 810f640:	9b07      	ldrlt	r3, [sp, #28]
 810f642:	9707      	strlt	r7, [sp, #28]
 810f644:	1afa      	sublt	r2, r7, r3
 810f646:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 810f648:	bfbb      	ittet	lt
 810f64a:	189b      	addlt	r3, r3, r2
 810f64c:	930e      	strlt	r3, [sp, #56]	; 0x38
 810f64e:	1bdf      	subge	r7, r3, r7
 810f650:	2700      	movlt	r7, #0
 810f652:	f1b9 0f00 	cmp.w	r9, #0
 810f656:	bfb5      	itete	lt
 810f658:	9b05      	ldrlt	r3, [sp, #20]
 810f65a:	9d05      	ldrge	r5, [sp, #20]
 810f65c:	eba3 0509 	sublt.w	r5, r3, r9
 810f660:	464b      	movge	r3, r9
 810f662:	bfb8      	it	lt
 810f664:	2300      	movlt	r3, #0
 810f666:	e77e      	b.n	810f566 <_dtoa_r+0x6fe>
 810f668:	9f07      	ldr	r7, [sp, #28]
 810f66a:	9d05      	ldr	r5, [sp, #20]
 810f66c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 810f66e:	e783      	b.n	810f578 <_dtoa_r+0x710>
 810f670:	9a07      	ldr	r2, [sp, #28]
 810f672:	e7ab      	b.n	810f5cc <_dtoa_r+0x764>
 810f674:	2300      	movs	r3, #0
 810f676:	e7d4      	b.n	810f622 <_dtoa_r+0x7ba>
 810f678:	9b00      	ldr	r3, [sp, #0]
 810f67a:	e7d2      	b.n	810f622 <_dtoa_r+0x7ba>
 810f67c:	2300      	movs	r3, #0
 810f67e:	9307      	str	r3, [sp, #28]
 810f680:	693b      	ldr	r3, [r7, #16]
 810f682:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 810f686:	6918      	ldr	r0, [r3, #16]
 810f688:	f000 fa58 	bl	810fb3c <__hi0bits>
 810f68c:	f1c0 0020 	rsb	r0, r0, #32
 810f690:	4440      	add	r0, r8
 810f692:	f010 001f 	ands.w	r0, r0, #31
 810f696:	d047      	beq.n	810f728 <_dtoa_r+0x8c0>
 810f698:	f1c0 0320 	rsb	r3, r0, #32
 810f69c:	2b04      	cmp	r3, #4
 810f69e:	dd3b      	ble.n	810f718 <_dtoa_r+0x8b0>
 810f6a0:	9b05      	ldr	r3, [sp, #20]
 810f6a2:	f1c0 001c 	rsb	r0, r0, #28
 810f6a6:	4403      	add	r3, r0
 810f6a8:	9305      	str	r3, [sp, #20]
 810f6aa:	4405      	add	r5, r0
 810f6ac:	4480      	add	r8, r0
 810f6ae:	9b05      	ldr	r3, [sp, #20]
 810f6b0:	2b00      	cmp	r3, #0
 810f6b2:	dd05      	ble.n	810f6c0 <_dtoa_r+0x858>
 810f6b4:	461a      	mov	r2, r3
 810f6b6:	9904      	ldr	r1, [sp, #16]
 810f6b8:	4620      	mov	r0, r4
 810f6ba:	f000 fb7b 	bl	810fdb4 <__lshift>
 810f6be:	9004      	str	r0, [sp, #16]
 810f6c0:	f1b8 0f00 	cmp.w	r8, #0
 810f6c4:	dd05      	ble.n	810f6d2 <_dtoa_r+0x86a>
 810f6c6:	4639      	mov	r1, r7
 810f6c8:	4642      	mov	r2, r8
 810f6ca:	4620      	mov	r0, r4
 810f6cc:	f000 fb72 	bl	810fdb4 <__lshift>
 810f6d0:	4607      	mov	r7, r0
 810f6d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810f6d4:	b353      	cbz	r3, 810f72c <_dtoa_r+0x8c4>
 810f6d6:	4639      	mov	r1, r7
 810f6d8:	9804      	ldr	r0, [sp, #16]
 810f6da:	f000 fbbf 	bl	810fe5c <__mcmp>
 810f6de:	2800      	cmp	r0, #0
 810f6e0:	da24      	bge.n	810f72c <_dtoa_r+0x8c4>
 810f6e2:	2300      	movs	r3, #0
 810f6e4:	220a      	movs	r2, #10
 810f6e6:	9904      	ldr	r1, [sp, #16]
 810f6e8:	4620      	mov	r0, r4
 810f6ea:	f000 f9ec 	bl	810fac6 <__multadd>
 810f6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f6f0:	9004      	str	r0, [sp, #16]
 810f6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810f6f6:	2b00      	cmp	r3, #0
 810f6f8:	f000 814d 	beq.w	810f996 <_dtoa_r+0xb2e>
 810f6fc:	2300      	movs	r3, #0
 810f6fe:	4631      	mov	r1, r6
 810f700:	220a      	movs	r2, #10
 810f702:	4620      	mov	r0, r4
 810f704:	f000 f9df 	bl	810fac6 <__multadd>
 810f708:	9b02      	ldr	r3, [sp, #8]
 810f70a:	2b00      	cmp	r3, #0
 810f70c:	4606      	mov	r6, r0
 810f70e:	dc4f      	bgt.n	810f7b0 <_dtoa_r+0x948>
 810f710:	9b06      	ldr	r3, [sp, #24]
 810f712:	2b02      	cmp	r3, #2
 810f714:	dd4c      	ble.n	810f7b0 <_dtoa_r+0x948>
 810f716:	e011      	b.n	810f73c <_dtoa_r+0x8d4>
 810f718:	d0c9      	beq.n	810f6ae <_dtoa_r+0x846>
 810f71a:	9a05      	ldr	r2, [sp, #20]
 810f71c:	331c      	adds	r3, #28
 810f71e:	441a      	add	r2, r3
 810f720:	9205      	str	r2, [sp, #20]
 810f722:	441d      	add	r5, r3
 810f724:	4498      	add	r8, r3
 810f726:	e7c2      	b.n	810f6ae <_dtoa_r+0x846>
 810f728:	4603      	mov	r3, r0
 810f72a:	e7f6      	b.n	810f71a <_dtoa_r+0x8b2>
 810f72c:	f1b9 0f00 	cmp.w	r9, #0
 810f730:	dc38      	bgt.n	810f7a4 <_dtoa_r+0x93c>
 810f732:	9b06      	ldr	r3, [sp, #24]
 810f734:	2b02      	cmp	r3, #2
 810f736:	dd35      	ble.n	810f7a4 <_dtoa_r+0x93c>
 810f738:	f8cd 9008 	str.w	r9, [sp, #8]
 810f73c:	9b02      	ldr	r3, [sp, #8]
 810f73e:	b963      	cbnz	r3, 810f75a <_dtoa_r+0x8f2>
 810f740:	4639      	mov	r1, r7
 810f742:	2205      	movs	r2, #5
 810f744:	4620      	mov	r0, r4
 810f746:	f000 f9be 	bl	810fac6 <__multadd>
 810f74a:	4601      	mov	r1, r0
 810f74c:	4607      	mov	r7, r0
 810f74e:	9804      	ldr	r0, [sp, #16]
 810f750:	f000 fb84 	bl	810fe5c <__mcmp>
 810f754:	2800      	cmp	r0, #0
 810f756:	f73f adcc 	bgt.w	810f2f2 <_dtoa_r+0x48a>
 810f75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f75c:	465d      	mov	r5, fp
 810f75e:	ea6f 0a03 	mvn.w	sl, r3
 810f762:	f04f 0900 	mov.w	r9, #0
 810f766:	4639      	mov	r1, r7
 810f768:	4620      	mov	r0, r4
 810f76a:	f000 f995 	bl	810fa98 <_Bfree>
 810f76e:	2e00      	cmp	r6, #0
 810f770:	f43f aeb7 	beq.w	810f4e2 <_dtoa_r+0x67a>
 810f774:	f1b9 0f00 	cmp.w	r9, #0
 810f778:	d005      	beq.n	810f786 <_dtoa_r+0x91e>
 810f77a:	45b1      	cmp	r9, r6
 810f77c:	d003      	beq.n	810f786 <_dtoa_r+0x91e>
 810f77e:	4649      	mov	r1, r9
 810f780:	4620      	mov	r0, r4
 810f782:	f000 f989 	bl	810fa98 <_Bfree>
 810f786:	4631      	mov	r1, r6
 810f788:	4620      	mov	r0, r4
 810f78a:	f000 f985 	bl	810fa98 <_Bfree>
 810f78e:	e6a8      	b.n	810f4e2 <_dtoa_r+0x67a>
 810f790:	2700      	movs	r7, #0
 810f792:	463e      	mov	r6, r7
 810f794:	e7e1      	b.n	810f75a <_dtoa_r+0x8f2>
 810f796:	f8dd a020 	ldr.w	sl, [sp, #32]
 810f79a:	463e      	mov	r6, r7
 810f79c:	e5a9      	b.n	810f2f2 <_dtoa_r+0x48a>
 810f79e:	bf00      	nop
 810f7a0:	40240000 	.word	0x40240000
 810f7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f7a6:	f8cd 9008 	str.w	r9, [sp, #8]
 810f7aa:	2b00      	cmp	r3, #0
 810f7ac:	f000 80fa 	beq.w	810f9a4 <_dtoa_r+0xb3c>
 810f7b0:	2d00      	cmp	r5, #0
 810f7b2:	dd05      	ble.n	810f7c0 <_dtoa_r+0x958>
 810f7b4:	4631      	mov	r1, r6
 810f7b6:	462a      	mov	r2, r5
 810f7b8:	4620      	mov	r0, r4
 810f7ba:	f000 fafb 	bl	810fdb4 <__lshift>
 810f7be:	4606      	mov	r6, r0
 810f7c0:	9b07      	ldr	r3, [sp, #28]
 810f7c2:	2b00      	cmp	r3, #0
 810f7c4:	d04c      	beq.n	810f860 <_dtoa_r+0x9f8>
 810f7c6:	6871      	ldr	r1, [r6, #4]
 810f7c8:	4620      	mov	r0, r4
 810f7ca:	f000 f931 	bl	810fa30 <_Balloc>
 810f7ce:	6932      	ldr	r2, [r6, #16]
 810f7d0:	3202      	adds	r2, #2
 810f7d2:	4605      	mov	r5, r0
 810f7d4:	0092      	lsls	r2, r2, #2
 810f7d6:	f106 010c 	add.w	r1, r6, #12
 810f7da:	300c      	adds	r0, #12
 810f7dc:	f7fe fccc 	bl	810e178 <memcpy>
 810f7e0:	2201      	movs	r2, #1
 810f7e2:	4629      	mov	r1, r5
 810f7e4:	4620      	mov	r0, r4
 810f7e6:	f000 fae5 	bl	810fdb4 <__lshift>
 810f7ea:	9b00      	ldr	r3, [sp, #0]
 810f7ec:	f8cd b014 	str.w	fp, [sp, #20]
 810f7f0:	f003 0301 	and.w	r3, r3, #1
 810f7f4:	46b1      	mov	r9, r6
 810f7f6:	9307      	str	r3, [sp, #28]
 810f7f8:	4606      	mov	r6, r0
 810f7fa:	4639      	mov	r1, r7
 810f7fc:	9804      	ldr	r0, [sp, #16]
 810f7fe:	f7ff faa5 	bl	810ed4c <quorem>
 810f802:	4649      	mov	r1, r9
 810f804:	4605      	mov	r5, r0
 810f806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810f80a:	9804      	ldr	r0, [sp, #16]
 810f80c:	f000 fb26 	bl	810fe5c <__mcmp>
 810f810:	4632      	mov	r2, r6
 810f812:	9000      	str	r0, [sp, #0]
 810f814:	4639      	mov	r1, r7
 810f816:	4620      	mov	r0, r4
 810f818:	f000 fb3a 	bl	810fe90 <__mdiff>
 810f81c:	68c3      	ldr	r3, [r0, #12]
 810f81e:	4602      	mov	r2, r0
 810f820:	bb03      	cbnz	r3, 810f864 <_dtoa_r+0x9fc>
 810f822:	4601      	mov	r1, r0
 810f824:	9008      	str	r0, [sp, #32]
 810f826:	9804      	ldr	r0, [sp, #16]
 810f828:	f000 fb18 	bl	810fe5c <__mcmp>
 810f82c:	9a08      	ldr	r2, [sp, #32]
 810f82e:	4603      	mov	r3, r0
 810f830:	4611      	mov	r1, r2
 810f832:	4620      	mov	r0, r4
 810f834:	9308      	str	r3, [sp, #32]
 810f836:	f000 f92f 	bl	810fa98 <_Bfree>
 810f83a:	9b08      	ldr	r3, [sp, #32]
 810f83c:	b9a3      	cbnz	r3, 810f868 <_dtoa_r+0xa00>
 810f83e:	9a06      	ldr	r2, [sp, #24]
 810f840:	b992      	cbnz	r2, 810f868 <_dtoa_r+0xa00>
 810f842:	9a07      	ldr	r2, [sp, #28]
 810f844:	b982      	cbnz	r2, 810f868 <_dtoa_r+0xa00>
 810f846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810f84a:	d029      	beq.n	810f8a0 <_dtoa_r+0xa38>
 810f84c:	9b00      	ldr	r3, [sp, #0]
 810f84e:	2b00      	cmp	r3, #0
 810f850:	dd01      	ble.n	810f856 <_dtoa_r+0x9ee>
 810f852:	f105 0831 	add.w	r8, r5, #49	; 0x31
 810f856:	9b05      	ldr	r3, [sp, #20]
 810f858:	1c5d      	adds	r5, r3, #1
 810f85a:	f883 8000 	strb.w	r8, [r3]
 810f85e:	e782      	b.n	810f766 <_dtoa_r+0x8fe>
 810f860:	4630      	mov	r0, r6
 810f862:	e7c2      	b.n	810f7ea <_dtoa_r+0x982>
 810f864:	2301      	movs	r3, #1
 810f866:	e7e3      	b.n	810f830 <_dtoa_r+0x9c8>
 810f868:	9a00      	ldr	r2, [sp, #0]
 810f86a:	2a00      	cmp	r2, #0
 810f86c:	db04      	blt.n	810f878 <_dtoa_r+0xa10>
 810f86e:	d125      	bne.n	810f8bc <_dtoa_r+0xa54>
 810f870:	9a06      	ldr	r2, [sp, #24]
 810f872:	bb1a      	cbnz	r2, 810f8bc <_dtoa_r+0xa54>
 810f874:	9a07      	ldr	r2, [sp, #28]
 810f876:	bb0a      	cbnz	r2, 810f8bc <_dtoa_r+0xa54>
 810f878:	2b00      	cmp	r3, #0
 810f87a:	ddec      	ble.n	810f856 <_dtoa_r+0x9ee>
 810f87c:	2201      	movs	r2, #1
 810f87e:	9904      	ldr	r1, [sp, #16]
 810f880:	4620      	mov	r0, r4
 810f882:	f000 fa97 	bl	810fdb4 <__lshift>
 810f886:	4639      	mov	r1, r7
 810f888:	9004      	str	r0, [sp, #16]
 810f88a:	f000 fae7 	bl	810fe5c <__mcmp>
 810f88e:	2800      	cmp	r0, #0
 810f890:	dc03      	bgt.n	810f89a <_dtoa_r+0xa32>
 810f892:	d1e0      	bne.n	810f856 <_dtoa_r+0x9ee>
 810f894:	f018 0f01 	tst.w	r8, #1
 810f898:	d0dd      	beq.n	810f856 <_dtoa_r+0x9ee>
 810f89a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810f89e:	d1d8      	bne.n	810f852 <_dtoa_r+0x9ea>
 810f8a0:	9b05      	ldr	r3, [sp, #20]
 810f8a2:	9a05      	ldr	r2, [sp, #20]
 810f8a4:	1c5d      	adds	r5, r3, #1
 810f8a6:	2339      	movs	r3, #57	; 0x39
 810f8a8:	7013      	strb	r3, [r2, #0]
 810f8aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810f8ae:	2b39      	cmp	r3, #57	; 0x39
 810f8b0:	f105 32ff 	add.w	r2, r5, #4294967295
 810f8b4:	d04f      	beq.n	810f956 <_dtoa_r+0xaee>
 810f8b6:	3301      	adds	r3, #1
 810f8b8:	7013      	strb	r3, [r2, #0]
 810f8ba:	e754      	b.n	810f766 <_dtoa_r+0x8fe>
 810f8bc:	9a05      	ldr	r2, [sp, #20]
 810f8be:	2b00      	cmp	r3, #0
 810f8c0:	f102 0501 	add.w	r5, r2, #1
 810f8c4:	dd06      	ble.n	810f8d4 <_dtoa_r+0xa6c>
 810f8c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810f8ca:	d0e9      	beq.n	810f8a0 <_dtoa_r+0xa38>
 810f8cc:	f108 0801 	add.w	r8, r8, #1
 810f8d0:	9b05      	ldr	r3, [sp, #20]
 810f8d2:	e7c2      	b.n	810f85a <_dtoa_r+0x9f2>
 810f8d4:	9a02      	ldr	r2, [sp, #8]
 810f8d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 810f8da:	eba5 030b 	sub.w	r3, r5, fp
 810f8de:	4293      	cmp	r3, r2
 810f8e0:	d021      	beq.n	810f926 <_dtoa_r+0xabe>
 810f8e2:	2300      	movs	r3, #0
 810f8e4:	220a      	movs	r2, #10
 810f8e6:	9904      	ldr	r1, [sp, #16]
 810f8e8:	4620      	mov	r0, r4
 810f8ea:	f000 f8ec 	bl	810fac6 <__multadd>
 810f8ee:	45b1      	cmp	r9, r6
 810f8f0:	9004      	str	r0, [sp, #16]
 810f8f2:	f04f 0300 	mov.w	r3, #0
 810f8f6:	f04f 020a 	mov.w	r2, #10
 810f8fa:	4649      	mov	r1, r9
 810f8fc:	4620      	mov	r0, r4
 810f8fe:	d105      	bne.n	810f90c <_dtoa_r+0xaa4>
 810f900:	f000 f8e1 	bl	810fac6 <__multadd>
 810f904:	4681      	mov	r9, r0
 810f906:	4606      	mov	r6, r0
 810f908:	9505      	str	r5, [sp, #20]
 810f90a:	e776      	b.n	810f7fa <_dtoa_r+0x992>
 810f90c:	f000 f8db 	bl	810fac6 <__multadd>
 810f910:	4631      	mov	r1, r6
 810f912:	4681      	mov	r9, r0
 810f914:	2300      	movs	r3, #0
 810f916:	220a      	movs	r2, #10
 810f918:	4620      	mov	r0, r4
 810f91a:	f000 f8d4 	bl	810fac6 <__multadd>
 810f91e:	4606      	mov	r6, r0
 810f920:	e7f2      	b.n	810f908 <_dtoa_r+0xaa0>
 810f922:	f04f 0900 	mov.w	r9, #0
 810f926:	2201      	movs	r2, #1
 810f928:	9904      	ldr	r1, [sp, #16]
 810f92a:	4620      	mov	r0, r4
 810f92c:	f000 fa42 	bl	810fdb4 <__lshift>
 810f930:	4639      	mov	r1, r7
 810f932:	9004      	str	r0, [sp, #16]
 810f934:	f000 fa92 	bl	810fe5c <__mcmp>
 810f938:	2800      	cmp	r0, #0
 810f93a:	dcb6      	bgt.n	810f8aa <_dtoa_r+0xa42>
 810f93c:	d102      	bne.n	810f944 <_dtoa_r+0xadc>
 810f93e:	f018 0f01 	tst.w	r8, #1
 810f942:	d1b2      	bne.n	810f8aa <_dtoa_r+0xa42>
 810f944:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810f948:	2b30      	cmp	r3, #48	; 0x30
 810f94a:	f105 32ff 	add.w	r2, r5, #4294967295
 810f94e:	f47f af0a 	bne.w	810f766 <_dtoa_r+0x8fe>
 810f952:	4615      	mov	r5, r2
 810f954:	e7f6      	b.n	810f944 <_dtoa_r+0xadc>
 810f956:	4593      	cmp	fp, r2
 810f958:	d105      	bne.n	810f966 <_dtoa_r+0xafe>
 810f95a:	2331      	movs	r3, #49	; 0x31
 810f95c:	f10a 0a01 	add.w	sl, sl, #1
 810f960:	f88b 3000 	strb.w	r3, [fp]
 810f964:	e6ff      	b.n	810f766 <_dtoa_r+0x8fe>
 810f966:	4615      	mov	r5, r2
 810f968:	e79f      	b.n	810f8aa <_dtoa_r+0xa42>
 810f96a:	f8df b064 	ldr.w	fp, [pc, #100]	; 810f9d0 <_dtoa_r+0xb68>
 810f96e:	e007      	b.n	810f980 <_dtoa_r+0xb18>
 810f970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810f972:	f8df b060 	ldr.w	fp, [pc, #96]	; 810f9d4 <_dtoa_r+0xb6c>
 810f976:	b11b      	cbz	r3, 810f980 <_dtoa_r+0xb18>
 810f978:	f10b 0308 	add.w	r3, fp, #8
 810f97c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810f97e:	6013      	str	r3, [r2, #0]
 810f980:	4658      	mov	r0, fp
 810f982:	b017      	add	sp, #92	; 0x5c
 810f984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f988:	9b06      	ldr	r3, [sp, #24]
 810f98a:	2b01      	cmp	r3, #1
 810f98c:	f77f ae35 	ble.w	810f5fa <_dtoa_r+0x792>
 810f990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810f992:	9307      	str	r3, [sp, #28]
 810f994:	e649      	b.n	810f62a <_dtoa_r+0x7c2>
 810f996:	9b02      	ldr	r3, [sp, #8]
 810f998:	2b00      	cmp	r3, #0
 810f99a:	dc03      	bgt.n	810f9a4 <_dtoa_r+0xb3c>
 810f99c:	9b06      	ldr	r3, [sp, #24]
 810f99e:	2b02      	cmp	r3, #2
 810f9a0:	f73f aecc 	bgt.w	810f73c <_dtoa_r+0x8d4>
 810f9a4:	465d      	mov	r5, fp
 810f9a6:	4639      	mov	r1, r7
 810f9a8:	9804      	ldr	r0, [sp, #16]
 810f9aa:	f7ff f9cf 	bl	810ed4c <quorem>
 810f9ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810f9b2:	f805 8b01 	strb.w	r8, [r5], #1
 810f9b6:	9a02      	ldr	r2, [sp, #8]
 810f9b8:	eba5 030b 	sub.w	r3, r5, fp
 810f9bc:	429a      	cmp	r2, r3
 810f9be:	ddb0      	ble.n	810f922 <_dtoa_r+0xaba>
 810f9c0:	2300      	movs	r3, #0
 810f9c2:	220a      	movs	r2, #10
 810f9c4:	9904      	ldr	r1, [sp, #16]
 810f9c6:	4620      	mov	r0, r4
 810f9c8:	f000 f87d 	bl	810fac6 <__multadd>
 810f9cc:	9004      	str	r0, [sp, #16]
 810f9ce:	e7ea      	b.n	810f9a6 <_dtoa_r+0xb3e>
 810f9d0:	08110f03 	.word	0x08110f03
 810f9d4:	08110f27 	.word	0x08110f27

0810f9d8 <__locale_ctype_ptr_l>:
 810f9d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 810f9dc:	4770      	bx	lr
	...

0810f9e0 <_localeconv_r>:
 810f9e0:	4b04      	ldr	r3, [pc, #16]	; (810f9f4 <_localeconv_r+0x14>)
 810f9e2:	681b      	ldr	r3, [r3, #0]
 810f9e4:	6a18      	ldr	r0, [r3, #32]
 810f9e6:	4b04      	ldr	r3, [pc, #16]	; (810f9f8 <_localeconv_r+0x18>)
 810f9e8:	2800      	cmp	r0, #0
 810f9ea:	bf08      	it	eq
 810f9ec:	4618      	moveq	r0, r3
 810f9ee:	30f0      	adds	r0, #240	; 0xf0
 810f9f0:	4770      	bx	lr
 810f9f2:	bf00      	nop
 810f9f4:	10000034 	.word	0x10000034
 810f9f8:	10000098 	.word	0x10000098

0810f9fc <malloc>:
 810f9fc:	4b02      	ldr	r3, [pc, #8]	; (810fa08 <malloc+0xc>)
 810f9fe:	4601      	mov	r1, r0
 810fa00:	6818      	ldr	r0, [r3, #0]
 810fa02:	f000 bb4d 	b.w	81100a0 <_malloc_r>
 810fa06:	bf00      	nop
 810fa08:	10000034 	.word	0x10000034

0810fa0c <__ascii_mbtowc>:
 810fa0c:	b082      	sub	sp, #8
 810fa0e:	b901      	cbnz	r1, 810fa12 <__ascii_mbtowc+0x6>
 810fa10:	a901      	add	r1, sp, #4
 810fa12:	b142      	cbz	r2, 810fa26 <__ascii_mbtowc+0x1a>
 810fa14:	b14b      	cbz	r3, 810fa2a <__ascii_mbtowc+0x1e>
 810fa16:	7813      	ldrb	r3, [r2, #0]
 810fa18:	600b      	str	r3, [r1, #0]
 810fa1a:	7812      	ldrb	r2, [r2, #0]
 810fa1c:	1c10      	adds	r0, r2, #0
 810fa1e:	bf18      	it	ne
 810fa20:	2001      	movne	r0, #1
 810fa22:	b002      	add	sp, #8
 810fa24:	4770      	bx	lr
 810fa26:	4610      	mov	r0, r2
 810fa28:	e7fb      	b.n	810fa22 <__ascii_mbtowc+0x16>
 810fa2a:	f06f 0001 	mvn.w	r0, #1
 810fa2e:	e7f8      	b.n	810fa22 <__ascii_mbtowc+0x16>

0810fa30 <_Balloc>:
 810fa30:	b570      	push	{r4, r5, r6, lr}
 810fa32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810fa34:	4604      	mov	r4, r0
 810fa36:	460e      	mov	r6, r1
 810fa38:	b93d      	cbnz	r5, 810fa4a <_Balloc+0x1a>
 810fa3a:	2010      	movs	r0, #16
 810fa3c:	f7ff ffde 	bl	810f9fc <malloc>
 810fa40:	6260      	str	r0, [r4, #36]	; 0x24
 810fa42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810fa46:	6005      	str	r5, [r0, #0]
 810fa48:	60c5      	str	r5, [r0, #12]
 810fa4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810fa4c:	68eb      	ldr	r3, [r5, #12]
 810fa4e:	b183      	cbz	r3, 810fa72 <_Balloc+0x42>
 810fa50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810fa52:	68db      	ldr	r3, [r3, #12]
 810fa54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 810fa58:	b9b8      	cbnz	r0, 810fa8a <_Balloc+0x5a>
 810fa5a:	2101      	movs	r1, #1
 810fa5c:	fa01 f506 	lsl.w	r5, r1, r6
 810fa60:	1d6a      	adds	r2, r5, #5
 810fa62:	0092      	lsls	r2, r2, #2
 810fa64:	4620      	mov	r0, r4
 810fa66:	f000 fabf 	bl	810ffe8 <_calloc_r>
 810fa6a:	b160      	cbz	r0, 810fa86 <_Balloc+0x56>
 810fa6c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 810fa70:	e00e      	b.n	810fa90 <_Balloc+0x60>
 810fa72:	2221      	movs	r2, #33	; 0x21
 810fa74:	2104      	movs	r1, #4
 810fa76:	4620      	mov	r0, r4
 810fa78:	f000 fab6 	bl	810ffe8 <_calloc_r>
 810fa7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810fa7e:	60e8      	str	r0, [r5, #12]
 810fa80:	68db      	ldr	r3, [r3, #12]
 810fa82:	2b00      	cmp	r3, #0
 810fa84:	d1e4      	bne.n	810fa50 <_Balloc+0x20>
 810fa86:	2000      	movs	r0, #0
 810fa88:	bd70      	pop	{r4, r5, r6, pc}
 810fa8a:	6802      	ldr	r2, [r0, #0]
 810fa8c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 810fa90:	2300      	movs	r3, #0
 810fa92:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810fa96:	e7f7      	b.n	810fa88 <_Balloc+0x58>

0810fa98 <_Bfree>:
 810fa98:	b570      	push	{r4, r5, r6, lr}
 810fa9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810fa9c:	4606      	mov	r6, r0
 810fa9e:	460d      	mov	r5, r1
 810faa0:	b93c      	cbnz	r4, 810fab2 <_Bfree+0x1a>
 810faa2:	2010      	movs	r0, #16
 810faa4:	f7ff ffaa 	bl	810f9fc <malloc>
 810faa8:	6270      	str	r0, [r6, #36]	; 0x24
 810faaa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810faae:	6004      	str	r4, [r0, #0]
 810fab0:	60c4      	str	r4, [r0, #12]
 810fab2:	b13d      	cbz	r5, 810fac4 <_Bfree+0x2c>
 810fab4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 810fab6:	686a      	ldr	r2, [r5, #4]
 810fab8:	68db      	ldr	r3, [r3, #12]
 810faba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810fabe:	6029      	str	r1, [r5, #0]
 810fac0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 810fac4:	bd70      	pop	{r4, r5, r6, pc}

0810fac6 <__multadd>:
 810fac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810faca:	690d      	ldr	r5, [r1, #16]
 810facc:	461f      	mov	r7, r3
 810face:	4606      	mov	r6, r0
 810fad0:	460c      	mov	r4, r1
 810fad2:	f101 0c14 	add.w	ip, r1, #20
 810fad6:	2300      	movs	r3, #0
 810fad8:	f8dc 0000 	ldr.w	r0, [ip]
 810fadc:	b281      	uxth	r1, r0
 810fade:	fb02 7101 	mla	r1, r2, r1, r7
 810fae2:	0c0f      	lsrs	r7, r1, #16
 810fae4:	0c00      	lsrs	r0, r0, #16
 810fae6:	fb02 7000 	mla	r0, r2, r0, r7
 810faea:	b289      	uxth	r1, r1
 810faec:	3301      	adds	r3, #1
 810faee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 810faf2:	429d      	cmp	r5, r3
 810faf4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 810faf8:	f84c 1b04 	str.w	r1, [ip], #4
 810fafc:	dcec      	bgt.n	810fad8 <__multadd+0x12>
 810fafe:	b1d7      	cbz	r7, 810fb36 <__multadd+0x70>
 810fb00:	68a3      	ldr	r3, [r4, #8]
 810fb02:	42ab      	cmp	r3, r5
 810fb04:	dc12      	bgt.n	810fb2c <__multadd+0x66>
 810fb06:	6861      	ldr	r1, [r4, #4]
 810fb08:	4630      	mov	r0, r6
 810fb0a:	3101      	adds	r1, #1
 810fb0c:	f7ff ff90 	bl	810fa30 <_Balloc>
 810fb10:	6922      	ldr	r2, [r4, #16]
 810fb12:	3202      	adds	r2, #2
 810fb14:	f104 010c 	add.w	r1, r4, #12
 810fb18:	4680      	mov	r8, r0
 810fb1a:	0092      	lsls	r2, r2, #2
 810fb1c:	300c      	adds	r0, #12
 810fb1e:	f7fe fb2b 	bl	810e178 <memcpy>
 810fb22:	4621      	mov	r1, r4
 810fb24:	4630      	mov	r0, r6
 810fb26:	f7ff ffb7 	bl	810fa98 <_Bfree>
 810fb2a:	4644      	mov	r4, r8
 810fb2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810fb30:	3501      	adds	r5, #1
 810fb32:	615f      	str	r7, [r3, #20]
 810fb34:	6125      	str	r5, [r4, #16]
 810fb36:	4620      	mov	r0, r4
 810fb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08112dec <_fflush_r>:
 8112dec:	b538      	push	{r3, r4, r5, lr}
 8112dee:	690b      	ldr	r3, [r1, #16]
 8112df0:	4605      	mov	r5, r0
 8112df2:	460c      	mov	r4, r1
 8112df4:	b913      	cbnz	r3, 8112dfc <_fflush_r+0x10>
 8112df6:	2500      	movs	r5, #0
 8112df8:	4628      	mov	r0, r5
 8112dfa:	bd38      	pop	{r3, r4, r5, pc}
 8112dfc:	b118      	cbz	r0, 8112e06 <_fflush_r+0x1a>
 8112dfe:	6983      	ldr	r3, [r0, #24]
 8112e00:	b90b      	cbnz	r3, 8112e06 <_fflush_r+0x1a>
 8112e02:	f000 f887 	bl	8112f14 <__sinit>
 8112e06:	4b14      	ldr	r3, [pc, #80]	; (8112e58 <_fflush_r+0x6c>)
 8112e08:	429c      	cmp	r4, r3
 8112e0a:	d11b      	bne.n	8112e44 <_fflush_r+0x58>
 8112e0c:	686c      	ldr	r4, [r5, #4]
 8112e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112e12:	2b00      	cmp	r3, #0
 8112e14:	d0ef      	beq.n	8112df6 <_fflush_r+0xa>
 8112e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8112e18:	07d0      	lsls	r0, r2, #31
 8112e1a:	d404      	bmi.n	8112e26 <_fflush_r+0x3a>
 8112e1c:	0599      	lsls	r1, r3, #22
 8112e1e:	d402      	bmi.n	8112e26 <_fflush_r+0x3a>
 8112e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8112e22:	f000 f91a 	bl	811305a <__retarget_lock_acquire_recursive>
 8112e26:	4628      	mov	r0, r5
 8112e28:	4621      	mov	r1, r4
 8112e2a:	f7ff ff59 	bl	8112ce0 <__sflush_r>
 8112e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8112e30:	07da      	lsls	r2, r3, #31
 8112e32:	4605      	mov	r5, r0
 8112e34:	d4e0      	bmi.n	8112df8 <_fflush_r+0xc>
 8112e36:	89a3      	ldrh	r3, [r4, #12]
 8112e38:	059b      	lsls	r3, r3, #22
 8112e3a:	d4dd      	bmi.n	8112df8 <_fflush_r+0xc>
 8112e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8112e3e:	f000 f90e 	bl	811305e <__retarget_lock_release_recursive>
 8112e42:	e7d9      	b.n	8112df8 <_fflush_r+0xc>
 8112e44:	4b05      	ldr	r3, [pc, #20]	; (8112e5c <_fflush_r+0x70>)
 8112e46:	429c      	cmp	r4, r3
 8112e48:	d101      	bne.n	8112e4e <_fflush_r+0x62>
 8112e4a:	68ac      	ldr	r4, [r5, #8]
 8112e4c:	e7df      	b.n	8112e0e <_fflush_r+0x22>
 8112e4e:	4b04      	ldr	r3, [pc, #16]	; (8112e60 <_fflush_r+0x74>)
 8112e50:	429c      	cmp	r4, r3
 8112e52:	bf08      	it	eq
 8112e54:	68ec      	ldreq	r4, [r5, #12]
 8112e56:	e7da      	b.n	8112e0e <_fflush_r+0x22>
 8112e58:	0811518c 	.word	0x0811518c
 8112e5c:	081151ac 	.word	0x081151ac
 8112e60:	0811516c 	.word	0x0811516c
=======
0810fb3c <__hi0bits>:
 810fb3c:	0c02      	lsrs	r2, r0, #16
 810fb3e:	0412      	lsls	r2, r2, #16
 810fb40:	4603      	mov	r3, r0
 810fb42:	b9b2      	cbnz	r2, 810fb72 <__hi0bits+0x36>
 810fb44:	0403      	lsls	r3, r0, #16
 810fb46:	2010      	movs	r0, #16
 810fb48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 810fb4c:	bf04      	itt	eq
 810fb4e:	021b      	lsleq	r3, r3, #8
 810fb50:	3008      	addeq	r0, #8
 810fb52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 810fb56:	bf04      	itt	eq
 810fb58:	011b      	lsleq	r3, r3, #4
 810fb5a:	3004      	addeq	r0, #4
 810fb5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 810fb60:	bf04      	itt	eq
 810fb62:	009b      	lsleq	r3, r3, #2
 810fb64:	3002      	addeq	r0, #2
 810fb66:	2b00      	cmp	r3, #0
 810fb68:	db06      	blt.n	810fb78 <__hi0bits+0x3c>
 810fb6a:	005b      	lsls	r3, r3, #1
 810fb6c:	d503      	bpl.n	810fb76 <__hi0bits+0x3a>
 810fb6e:	3001      	adds	r0, #1
 810fb70:	4770      	bx	lr
 810fb72:	2000      	movs	r0, #0
 810fb74:	e7e8      	b.n	810fb48 <__hi0bits+0xc>
 810fb76:	2020      	movs	r0, #32
 810fb78:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08112e64 <std>:
 8112e64:	2300      	movs	r3, #0
 8112e66:	b510      	push	{r4, lr}
 8112e68:	4604      	mov	r4, r0
 8112e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8112e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8112e72:	6083      	str	r3, [r0, #8]
 8112e74:	8181      	strh	r1, [r0, #12]
 8112e76:	6643      	str	r3, [r0, #100]	; 0x64
 8112e78:	81c2      	strh	r2, [r0, #14]
 8112e7a:	6183      	str	r3, [r0, #24]
 8112e7c:	4619      	mov	r1, r3
 8112e7e:	2208      	movs	r2, #8
 8112e80:	305c      	adds	r0, #92	; 0x5c
 8112e82:	f7fe f97f 	bl	8111184 <memset>
 8112e86:	4b05      	ldr	r3, [pc, #20]	; (8112e9c <std+0x38>)
 8112e88:	6263      	str	r3, [r4, #36]	; 0x24
 8112e8a:	4b05      	ldr	r3, [pc, #20]	; (8112ea0 <std+0x3c>)
 8112e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8112e8e:	4b05      	ldr	r3, [pc, #20]	; (8112ea4 <std+0x40>)
 8112e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8112e92:	4b05      	ldr	r3, [pc, #20]	; (8112ea8 <std+0x44>)
 8112e94:	6224      	str	r4, [r4, #32]
 8112e96:	6323      	str	r3, [r4, #48]	; 0x30
 8112e98:	bd10      	pop	{r4, pc}
 8112e9a:	bf00      	nop
 8112e9c:	08113f35 	.word	0x08113f35
 8112ea0:	08113f57 	.word	0x08113f57
 8112ea4:	08113f8f 	.word	0x08113f8f
 8112ea8:	08113fb3 	.word	0x08113fb3
=======
0810fb7a <__lo0bits>:
 810fb7a:	6803      	ldr	r3, [r0, #0]
 810fb7c:	f013 0207 	ands.w	r2, r3, #7
 810fb80:	4601      	mov	r1, r0
 810fb82:	d00b      	beq.n	810fb9c <__lo0bits+0x22>
 810fb84:	07da      	lsls	r2, r3, #31
 810fb86:	d423      	bmi.n	810fbd0 <__lo0bits+0x56>
 810fb88:	0798      	lsls	r0, r3, #30
 810fb8a:	bf49      	itett	mi
 810fb8c:	085b      	lsrmi	r3, r3, #1
 810fb8e:	089b      	lsrpl	r3, r3, #2
 810fb90:	2001      	movmi	r0, #1
 810fb92:	600b      	strmi	r3, [r1, #0]
 810fb94:	bf5c      	itt	pl
 810fb96:	600b      	strpl	r3, [r1, #0]
 810fb98:	2002      	movpl	r0, #2
 810fb9a:	4770      	bx	lr
 810fb9c:	b298      	uxth	r0, r3
 810fb9e:	b9a8      	cbnz	r0, 810fbcc <__lo0bits+0x52>
 810fba0:	0c1b      	lsrs	r3, r3, #16
 810fba2:	2010      	movs	r0, #16
 810fba4:	f013 0fff 	tst.w	r3, #255	; 0xff
 810fba8:	bf04      	itt	eq
 810fbaa:	0a1b      	lsreq	r3, r3, #8
 810fbac:	3008      	addeq	r0, #8
 810fbae:	071a      	lsls	r2, r3, #28
 810fbb0:	bf04      	itt	eq
 810fbb2:	091b      	lsreq	r3, r3, #4
 810fbb4:	3004      	addeq	r0, #4
 810fbb6:	079a      	lsls	r2, r3, #30
 810fbb8:	bf04      	itt	eq
 810fbba:	089b      	lsreq	r3, r3, #2
 810fbbc:	3002      	addeq	r0, #2
 810fbbe:	07da      	lsls	r2, r3, #31
 810fbc0:	d402      	bmi.n	810fbc8 <__lo0bits+0x4e>
 810fbc2:	085b      	lsrs	r3, r3, #1
 810fbc4:	d006      	beq.n	810fbd4 <__lo0bits+0x5a>
 810fbc6:	3001      	adds	r0, #1
 810fbc8:	600b      	str	r3, [r1, #0]
 810fbca:	4770      	bx	lr
 810fbcc:	4610      	mov	r0, r2
 810fbce:	e7e9      	b.n	810fba4 <__lo0bits+0x2a>
 810fbd0:	2000      	movs	r0, #0
 810fbd2:	4770      	bx	lr
 810fbd4:	2020      	movs	r0, #32
 810fbd6:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08112eac <_cleanup_r>:
 8112eac:	4901      	ldr	r1, [pc, #4]	; (8112eb4 <_cleanup_r+0x8>)
 8112eae:	f000 b8af 	b.w	8113010 <_fwalk_reent>
 8112eb2:	bf00      	nop
 8112eb4:	08112ded 	.word	0x08112ded
=======
0810fbd8 <__i2b>:
 810fbd8:	b510      	push	{r4, lr}
 810fbda:	460c      	mov	r4, r1
 810fbdc:	2101      	movs	r1, #1
 810fbde:	f7ff ff27 	bl	810fa30 <_Balloc>
 810fbe2:	2201      	movs	r2, #1
 810fbe4:	6144      	str	r4, [r0, #20]
 810fbe6:	6102      	str	r2, [r0, #16]
 810fbe8:	bd10      	pop	{r4, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08112eb8 <__sfmoreglue>:
 8112eb8:	b570      	push	{r4, r5, r6, lr}
 8112eba:	1e4a      	subs	r2, r1, #1
 8112ebc:	2568      	movs	r5, #104	; 0x68
 8112ebe:	4355      	muls	r5, r2
 8112ec0:	460e      	mov	r6, r1
 8112ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8112ec6:	f000 fd15 	bl	81138f4 <_malloc_r>
 8112eca:	4604      	mov	r4, r0
 8112ecc:	b140      	cbz	r0, 8112ee0 <__sfmoreglue+0x28>
 8112ece:	2100      	movs	r1, #0
 8112ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8112ed4:	300c      	adds	r0, #12
 8112ed6:	60a0      	str	r0, [r4, #8]
 8112ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8112edc:	f7fe f952 	bl	8111184 <memset>
 8112ee0:	4620      	mov	r0, r4
 8112ee2:	bd70      	pop	{r4, r5, r6, pc}

08112ee4 <__sfp_lock_acquire>:
 8112ee4:	4801      	ldr	r0, [pc, #4]	; (8112eec <__sfp_lock_acquire+0x8>)
 8112ee6:	f000 b8b8 	b.w	811305a <__retarget_lock_acquire_recursive>
 8112eea:	bf00      	nop
 8112eec:	10046670 	.word	0x10046670

08112ef0 <__sfp_lock_release>:
 8112ef0:	4801      	ldr	r0, [pc, #4]	; (8112ef8 <__sfp_lock_release+0x8>)
 8112ef2:	f000 b8b4 	b.w	811305e <__retarget_lock_release_recursive>
 8112ef6:	bf00      	nop
 8112ef8:	10046670 	.word	0x10046670

08112efc <__sinit_lock_acquire>:
 8112efc:	4801      	ldr	r0, [pc, #4]	; (8112f04 <__sinit_lock_acquire+0x8>)
 8112efe:	f000 b8ac 	b.w	811305a <__retarget_lock_acquire_recursive>
 8112f02:	bf00      	nop
 8112f04:	1004666b 	.word	0x1004666b

08112f08 <__sinit_lock_release>:
 8112f08:	4801      	ldr	r0, [pc, #4]	; (8112f10 <__sinit_lock_release+0x8>)
 8112f0a:	f000 b8a8 	b.w	811305e <__retarget_lock_release_recursive>
 8112f0e:	bf00      	nop
 8112f10:	1004666b 	.word	0x1004666b

08112f14 <__sinit>:
 8112f14:	b510      	push	{r4, lr}
 8112f16:	4604      	mov	r4, r0
 8112f18:	f7ff fff0 	bl	8112efc <__sinit_lock_acquire>
 8112f1c:	69a3      	ldr	r3, [r4, #24]
 8112f1e:	b11b      	cbz	r3, 8112f28 <__sinit+0x14>
 8112f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112f24:	f7ff bff0 	b.w	8112f08 <__sinit_lock_release>
 8112f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8112f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8112f2e:	4b13      	ldr	r3, [pc, #76]	; (8112f7c <__sinit+0x68>)
 8112f30:	4a13      	ldr	r2, [pc, #76]	; (8112f80 <__sinit+0x6c>)
 8112f32:	681b      	ldr	r3, [r3, #0]
 8112f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8112f36:	42a3      	cmp	r3, r4
 8112f38:	bf04      	itt	eq
 8112f3a:	2301      	moveq	r3, #1
 8112f3c:	61a3      	streq	r3, [r4, #24]
 8112f3e:	4620      	mov	r0, r4
 8112f40:	f000 f820 	bl	8112f84 <__sfp>
 8112f44:	6060      	str	r0, [r4, #4]
 8112f46:	4620      	mov	r0, r4
 8112f48:	f000 f81c 	bl	8112f84 <__sfp>
 8112f4c:	60a0      	str	r0, [r4, #8]
 8112f4e:	4620      	mov	r0, r4
 8112f50:	f000 f818 	bl	8112f84 <__sfp>
 8112f54:	2200      	movs	r2, #0
 8112f56:	60e0      	str	r0, [r4, #12]
 8112f58:	2104      	movs	r1, #4
 8112f5a:	6860      	ldr	r0, [r4, #4]
 8112f5c:	f7ff ff82 	bl	8112e64 <std>
 8112f60:	68a0      	ldr	r0, [r4, #8]
 8112f62:	2201      	movs	r2, #1
 8112f64:	2109      	movs	r1, #9
 8112f66:	f7ff ff7d 	bl	8112e64 <std>
 8112f6a:	68e0      	ldr	r0, [r4, #12]
 8112f6c:	2202      	movs	r2, #2
 8112f6e:	2112      	movs	r1, #18
 8112f70:	f7ff ff78 	bl	8112e64 <std>
 8112f74:	2301      	movs	r3, #1
 8112f76:	61a3      	str	r3, [r4, #24]
 8112f78:	e7d2      	b.n	8112f20 <__sinit+0xc>
 8112f7a:	bf00      	nop
 8112f7c:	08114f9c 	.word	0x08114f9c
 8112f80:	08112ead 	.word	0x08112ead

08112f84 <__sfp>:
 8112f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112f86:	4607      	mov	r7, r0
 8112f88:	f7ff ffac 	bl	8112ee4 <__sfp_lock_acquire>
 8112f8c:	4b1e      	ldr	r3, [pc, #120]	; (8113008 <__sfp+0x84>)
 8112f8e:	681e      	ldr	r6, [r3, #0]
 8112f90:	69b3      	ldr	r3, [r6, #24]
 8112f92:	b913      	cbnz	r3, 8112f9a <__sfp+0x16>
 8112f94:	4630      	mov	r0, r6
 8112f96:	f7ff ffbd 	bl	8112f14 <__sinit>
 8112f9a:	3648      	adds	r6, #72	; 0x48
 8112f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8112fa0:	3b01      	subs	r3, #1
 8112fa2:	d503      	bpl.n	8112fac <__sfp+0x28>
 8112fa4:	6833      	ldr	r3, [r6, #0]
 8112fa6:	b30b      	cbz	r3, 8112fec <__sfp+0x68>
 8112fa8:	6836      	ldr	r6, [r6, #0]
 8112faa:	e7f7      	b.n	8112f9c <__sfp+0x18>
 8112fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8112fb0:	b9d5      	cbnz	r5, 8112fe8 <__sfp+0x64>
 8112fb2:	4b16      	ldr	r3, [pc, #88]	; (811300c <__sfp+0x88>)
 8112fb4:	60e3      	str	r3, [r4, #12]
 8112fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8112fba:	6665      	str	r5, [r4, #100]	; 0x64
 8112fbc:	f000 f84c 	bl	8113058 <__retarget_lock_init_recursive>
 8112fc0:	f7ff ff96 	bl	8112ef0 <__sfp_lock_release>
 8112fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8112fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8112fcc:	6025      	str	r5, [r4, #0]
 8112fce:	61a5      	str	r5, [r4, #24]
 8112fd0:	2208      	movs	r2, #8
 8112fd2:	4629      	mov	r1, r5
 8112fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8112fd8:	f7fe f8d4 	bl	8111184 <memset>
 8112fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8112fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8112fe4:	4620      	mov	r0, r4
 8112fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8112fe8:	3468      	adds	r4, #104	; 0x68
 8112fea:	e7d9      	b.n	8112fa0 <__sfp+0x1c>
 8112fec:	2104      	movs	r1, #4
 8112fee:	4638      	mov	r0, r7
 8112ff0:	f7ff ff62 	bl	8112eb8 <__sfmoreglue>
 8112ff4:	4604      	mov	r4, r0
 8112ff6:	6030      	str	r0, [r6, #0]
 8112ff8:	2800      	cmp	r0, #0
 8112ffa:	d1d5      	bne.n	8112fa8 <__sfp+0x24>
 8112ffc:	f7ff ff78 	bl	8112ef0 <__sfp_lock_release>
 8113000:	230c      	movs	r3, #12
 8113002:	603b      	str	r3, [r7, #0]
 8113004:	e7ee      	b.n	8112fe4 <__sfp+0x60>
 8113006:	bf00      	nop
 8113008:	08114f9c 	.word	0x08114f9c
 811300c:	ffff0001 	.word	0xffff0001

08113010 <_fwalk_reent>:
 8113010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113014:	4606      	mov	r6, r0
 8113016:	4688      	mov	r8, r1
 8113018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 811301c:	2700      	movs	r7, #0
 811301e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8113022:	f1b9 0901 	subs.w	r9, r9, #1
 8113026:	d505      	bpl.n	8113034 <_fwalk_reent+0x24>
 8113028:	6824      	ldr	r4, [r4, #0]
 811302a:	2c00      	cmp	r4, #0
 811302c:	d1f7      	bne.n	811301e <_fwalk_reent+0xe>
 811302e:	4638      	mov	r0, r7
 8113030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8113034:	89ab      	ldrh	r3, [r5, #12]
 8113036:	2b01      	cmp	r3, #1
 8113038:	d907      	bls.n	811304a <_fwalk_reent+0x3a>
 811303a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811303e:	3301      	adds	r3, #1
 8113040:	d003      	beq.n	811304a <_fwalk_reent+0x3a>
 8113042:	4629      	mov	r1, r5
 8113044:	4630      	mov	r0, r6
 8113046:	47c0      	blx	r8
 8113048:	4307      	orrs	r7, r0
 811304a:	3568      	adds	r5, #104	; 0x68
 811304c:	e7e9      	b.n	8113022 <_fwalk_reent+0x12>
=======
0810fbea <__multiply>:
 810fbea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810fbee:	4614      	mov	r4, r2
 810fbf0:	690a      	ldr	r2, [r1, #16]
 810fbf2:	6923      	ldr	r3, [r4, #16]
 810fbf4:	429a      	cmp	r2, r3
 810fbf6:	bfb8      	it	lt
 810fbf8:	460b      	movlt	r3, r1
 810fbfa:	4688      	mov	r8, r1
 810fbfc:	bfbc      	itt	lt
 810fbfe:	46a0      	movlt	r8, r4
 810fc00:	461c      	movlt	r4, r3
 810fc02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810fc06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810fc0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810fc0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810fc12:	eb07 0609 	add.w	r6, r7, r9
 810fc16:	42b3      	cmp	r3, r6
 810fc18:	bfb8      	it	lt
 810fc1a:	3101      	addlt	r1, #1
 810fc1c:	f7ff ff08 	bl	810fa30 <_Balloc>
 810fc20:	f100 0514 	add.w	r5, r0, #20
 810fc24:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 810fc28:	462b      	mov	r3, r5
 810fc2a:	2200      	movs	r2, #0
 810fc2c:	4573      	cmp	r3, lr
 810fc2e:	d316      	bcc.n	810fc5e <__multiply+0x74>
 810fc30:	f104 0214 	add.w	r2, r4, #20
 810fc34:	f108 0114 	add.w	r1, r8, #20
 810fc38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 810fc3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 810fc40:	9300      	str	r3, [sp, #0]
 810fc42:	9b00      	ldr	r3, [sp, #0]
 810fc44:	9201      	str	r2, [sp, #4]
 810fc46:	4293      	cmp	r3, r2
 810fc48:	d80c      	bhi.n	810fc64 <__multiply+0x7a>
 810fc4a:	2e00      	cmp	r6, #0
 810fc4c:	dd03      	ble.n	810fc56 <__multiply+0x6c>
 810fc4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 810fc52:	2b00      	cmp	r3, #0
 810fc54:	d05d      	beq.n	810fd12 <__multiply+0x128>
 810fc56:	6106      	str	r6, [r0, #16]
 810fc58:	b003      	add	sp, #12
 810fc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fc5e:	f843 2b04 	str.w	r2, [r3], #4
 810fc62:	e7e3      	b.n	810fc2c <__multiply+0x42>
 810fc64:	f8b2 b000 	ldrh.w	fp, [r2]
 810fc68:	f1bb 0f00 	cmp.w	fp, #0
 810fc6c:	d023      	beq.n	810fcb6 <__multiply+0xcc>
 810fc6e:	4689      	mov	r9, r1
 810fc70:	46ac      	mov	ip, r5
 810fc72:	f04f 0800 	mov.w	r8, #0
 810fc76:	f859 4b04 	ldr.w	r4, [r9], #4
 810fc7a:	f8dc a000 	ldr.w	sl, [ip]
 810fc7e:	b2a3      	uxth	r3, r4
 810fc80:	fa1f fa8a 	uxth.w	sl, sl
 810fc84:	fb0b a303 	mla	r3, fp, r3, sl
 810fc88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810fc8c:	f8dc 4000 	ldr.w	r4, [ip]
 810fc90:	4443      	add	r3, r8
 810fc92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810fc96:	fb0b 840a 	mla	r4, fp, sl, r8
 810fc9a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 810fc9e:	46e2      	mov	sl, ip
 810fca0:	b29b      	uxth	r3, r3
 810fca2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810fca6:	454f      	cmp	r7, r9
 810fca8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810fcac:	f84a 3b04 	str.w	r3, [sl], #4
 810fcb0:	d82b      	bhi.n	810fd0a <__multiply+0x120>
 810fcb2:	f8cc 8004 	str.w	r8, [ip, #4]
 810fcb6:	9b01      	ldr	r3, [sp, #4]
 810fcb8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 810fcbc:	3204      	adds	r2, #4
 810fcbe:	f1ba 0f00 	cmp.w	sl, #0
 810fcc2:	d020      	beq.n	810fd06 <__multiply+0x11c>
 810fcc4:	682b      	ldr	r3, [r5, #0]
 810fcc6:	4689      	mov	r9, r1
 810fcc8:	46a8      	mov	r8, r5
 810fcca:	f04f 0b00 	mov.w	fp, #0
 810fcce:	f8b9 c000 	ldrh.w	ip, [r9]
 810fcd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 810fcd6:	fb0a 440c 	mla	r4, sl, ip, r4
 810fcda:	445c      	add	r4, fp
 810fcdc:	46c4      	mov	ip, r8
 810fcde:	b29b      	uxth	r3, r3
 810fce0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810fce4:	f84c 3b04 	str.w	r3, [ip], #4
 810fce8:	f859 3b04 	ldr.w	r3, [r9], #4
 810fcec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 810fcf0:	0c1b      	lsrs	r3, r3, #16
 810fcf2:	fb0a b303 	mla	r3, sl, r3, fp
 810fcf6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 810fcfa:	454f      	cmp	r7, r9
 810fcfc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 810fd00:	d805      	bhi.n	810fd0e <__multiply+0x124>
 810fd02:	f8c8 3004 	str.w	r3, [r8, #4]
 810fd06:	3504      	adds	r5, #4
 810fd08:	e79b      	b.n	810fc42 <__multiply+0x58>
 810fd0a:	46d4      	mov	ip, sl
 810fd0c:	e7b3      	b.n	810fc76 <__multiply+0x8c>
 810fd0e:	46e0      	mov	r8, ip
 810fd10:	e7dd      	b.n	810fcce <__multiply+0xe4>
 810fd12:	3e01      	subs	r6, #1
 810fd14:	e799      	b.n	810fc4a <__multiply+0x60>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
	...

<<<<<<< HEAD
08113050 <_localeconv_r>:
 8113050:	4800      	ldr	r0, [pc, #0]	; (8113054 <_localeconv_r+0x4>)
 8113052:	4770      	bx	lr
 8113054:	10000198 	.word	0x10000198
=======
0810fd18 <__pow5mult>:
 810fd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810fd1c:	4615      	mov	r5, r2
 810fd1e:	f012 0203 	ands.w	r2, r2, #3
 810fd22:	4606      	mov	r6, r0
 810fd24:	460f      	mov	r7, r1
 810fd26:	d007      	beq.n	810fd38 <__pow5mult+0x20>
 810fd28:	3a01      	subs	r2, #1
 810fd2a:	4c21      	ldr	r4, [pc, #132]	; (810fdb0 <__pow5mult+0x98>)
 810fd2c:	2300      	movs	r3, #0
 810fd2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810fd32:	f7ff fec8 	bl	810fac6 <__multadd>
 810fd36:	4607      	mov	r7, r0
 810fd38:	10ad      	asrs	r5, r5, #2
 810fd3a:	d035      	beq.n	810fda8 <__pow5mult+0x90>
 810fd3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810fd3e:	b93c      	cbnz	r4, 810fd50 <__pow5mult+0x38>
 810fd40:	2010      	movs	r0, #16
 810fd42:	f7ff fe5b 	bl	810f9fc <malloc>
 810fd46:	6270      	str	r0, [r6, #36]	; 0x24
 810fd48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810fd4c:	6004      	str	r4, [r0, #0]
 810fd4e:	60c4      	str	r4, [r0, #12]
 810fd50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810fd54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810fd58:	b94c      	cbnz	r4, 810fd6e <__pow5mult+0x56>
 810fd5a:	f240 2171 	movw	r1, #625	; 0x271
 810fd5e:	4630      	mov	r0, r6
 810fd60:	f7ff ff3a 	bl	810fbd8 <__i2b>
 810fd64:	2300      	movs	r3, #0
 810fd66:	f8c8 0008 	str.w	r0, [r8, #8]
 810fd6a:	4604      	mov	r4, r0
 810fd6c:	6003      	str	r3, [r0, #0]
 810fd6e:	f04f 0800 	mov.w	r8, #0
 810fd72:	07eb      	lsls	r3, r5, #31
 810fd74:	d50a      	bpl.n	810fd8c <__pow5mult+0x74>
 810fd76:	4639      	mov	r1, r7
 810fd78:	4622      	mov	r2, r4
 810fd7a:	4630      	mov	r0, r6
 810fd7c:	f7ff ff35 	bl	810fbea <__multiply>
 810fd80:	4639      	mov	r1, r7
 810fd82:	4681      	mov	r9, r0
 810fd84:	4630      	mov	r0, r6
 810fd86:	f7ff fe87 	bl	810fa98 <_Bfree>
 810fd8a:	464f      	mov	r7, r9
 810fd8c:	106d      	asrs	r5, r5, #1
 810fd8e:	d00b      	beq.n	810fda8 <__pow5mult+0x90>
 810fd90:	6820      	ldr	r0, [r4, #0]
 810fd92:	b938      	cbnz	r0, 810fda4 <__pow5mult+0x8c>
 810fd94:	4622      	mov	r2, r4
 810fd96:	4621      	mov	r1, r4
 810fd98:	4630      	mov	r0, r6
 810fd9a:	f7ff ff26 	bl	810fbea <__multiply>
 810fd9e:	6020      	str	r0, [r4, #0]
 810fda0:	f8c0 8000 	str.w	r8, [r0]
 810fda4:	4604      	mov	r4, r0
 810fda6:	e7e4      	b.n	810fd72 <__pow5mult+0x5a>
 810fda8:	4638      	mov	r0, r7
 810fdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810fdae:	bf00      	nop
 810fdb0:	08111090 	.word	0x08111090
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08113058 <__retarget_lock_init_recursive>:
 8113058:	4770      	bx	lr
=======
0810fdb4 <__lshift>:
 810fdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810fdb8:	460c      	mov	r4, r1
 810fdba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810fdbe:	6923      	ldr	r3, [r4, #16]
 810fdc0:	6849      	ldr	r1, [r1, #4]
 810fdc2:	eb0a 0903 	add.w	r9, sl, r3
 810fdc6:	68a3      	ldr	r3, [r4, #8]
 810fdc8:	4607      	mov	r7, r0
 810fdca:	4616      	mov	r6, r2
 810fdcc:	f109 0501 	add.w	r5, r9, #1
 810fdd0:	42ab      	cmp	r3, r5
 810fdd2:	db32      	blt.n	810fe3a <__lshift+0x86>
 810fdd4:	4638      	mov	r0, r7
 810fdd6:	f7ff fe2b 	bl	810fa30 <_Balloc>
 810fdda:	2300      	movs	r3, #0
 810fddc:	4680      	mov	r8, r0
 810fdde:	f100 0114 	add.w	r1, r0, #20
 810fde2:	461a      	mov	r2, r3
 810fde4:	4553      	cmp	r3, sl
 810fde6:	db2b      	blt.n	810fe40 <__lshift+0x8c>
 810fde8:	6920      	ldr	r0, [r4, #16]
 810fdea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810fdee:	f104 0314 	add.w	r3, r4, #20
 810fdf2:	f016 021f 	ands.w	r2, r6, #31
 810fdf6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810fdfa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810fdfe:	d025      	beq.n	810fe4c <__lshift+0x98>
 810fe00:	f1c2 0e20 	rsb	lr, r2, #32
 810fe04:	2000      	movs	r0, #0
 810fe06:	681e      	ldr	r6, [r3, #0]
 810fe08:	468a      	mov	sl, r1
 810fe0a:	4096      	lsls	r6, r2
 810fe0c:	4330      	orrs	r0, r6
 810fe0e:	f84a 0b04 	str.w	r0, [sl], #4
 810fe12:	f853 0b04 	ldr.w	r0, [r3], #4
 810fe16:	459c      	cmp	ip, r3
 810fe18:	fa20 f00e 	lsr.w	r0, r0, lr
 810fe1c:	d814      	bhi.n	810fe48 <__lshift+0x94>
 810fe1e:	6048      	str	r0, [r1, #4]
 810fe20:	b108      	cbz	r0, 810fe26 <__lshift+0x72>
 810fe22:	f109 0502 	add.w	r5, r9, #2
 810fe26:	3d01      	subs	r5, #1
 810fe28:	4638      	mov	r0, r7
 810fe2a:	f8c8 5010 	str.w	r5, [r8, #16]
 810fe2e:	4621      	mov	r1, r4
 810fe30:	f7ff fe32 	bl	810fa98 <_Bfree>
 810fe34:	4640      	mov	r0, r8
 810fe36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fe3a:	3101      	adds	r1, #1
 810fe3c:	005b      	lsls	r3, r3, #1
 810fe3e:	e7c7      	b.n	810fdd0 <__lshift+0x1c>
 810fe40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 810fe44:	3301      	adds	r3, #1
 810fe46:	e7cd      	b.n	810fde4 <__lshift+0x30>
 810fe48:	4651      	mov	r1, sl
 810fe4a:	e7dc      	b.n	810fe06 <__lshift+0x52>
 810fe4c:	3904      	subs	r1, #4
 810fe4e:	f853 2b04 	ldr.w	r2, [r3], #4
 810fe52:	f841 2f04 	str.w	r2, [r1, #4]!
 810fe56:	459c      	cmp	ip, r3
 810fe58:	d8f9      	bhi.n	810fe4e <__lshift+0x9a>
 810fe5a:	e7e4      	b.n	810fe26 <__lshift+0x72>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0811305a <__retarget_lock_acquire_recursive>:
 811305a:	4770      	bx	lr
=======
0810fe5c <__mcmp>:
 810fe5c:	6903      	ldr	r3, [r0, #16]
 810fe5e:	690a      	ldr	r2, [r1, #16]
 810fe60:	1a9b      	subs	r3, r3, r2
 810fe62:	b530      	push	{r4, r5, lr}
 810fe64:	d10c      	bne.n	810fe80 <__mcmp+0x24>
 810fe66:	0092      	lsls	r2, r2, #2
 810fe68:	3014      	adds	r0, #20
 810fe6a:	3114      	adds	r1, #20
 810fe6c:	1884      	adds	r4, r0, r2
 810fe6e:	4411      	add	r1, r2
 810fe70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810fe74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810fe78:	4295      	cmp	r5, r2
 810fe7a:	d003      	beq.n	810fe84 <__mcmp+0x28>
 810fe7c:	d305      	bcc.n	810fe8a <__mcmp+0x2e>
 810fe7e:	2301      	movs	r3, #1
 810fe80:	4618      	mov	r0, r3
 810fe82:	bd30      	pop	{r4, r5, pc}
 810fe84:	42a0      	cmp	r0, r4
 810fe86:	d3f3      	bcc.n	810fe70 <__mcmp+0x14>
 810fe88:	e7fa      	b.n	810fe80 <__mcmp+0x24>
 810fe8a:	f04f 33ff 	mov.w	r3, #4294967295
 810fe8e:	e7f7      	b.n	810fe80 <__mcmp+0x24>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0811305c <__retarget_lock_release>:
 811305c:	4770      	bx	lr
=======
0810fe90 <__mdiff>:
 810fe90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810fe94:	460d      	mov	r5, r1
 810fe96:	4607      	mov	r7, r0
 810fe98:	4611      	mov	r1, r2
 810fe9a:	4628      	mov	r0, r5
 810fe9c:	4614      	mov	r4, r2
 810fe9e:	f7ff ffdd 	bl	810fe5c <__mcmp>
 810fea2:	1e06      	subs	r6, r0, #0
 810fea4:	d108      	bne.n	810feb8 <__mdiff+0x28>
 810fea6:	4631      	mov	r1, r6
 810fea8:	4638      	mov	r0, r7
 810feaa:	f7ff fdc1 	bl	810fa30 <_Balloc>
 810feae:	2301      	movs	r3, #1
 810feb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 810feb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810feb8:	bfa4      	itt	ge
 810feba:	4623      	movge	r3, r4
 810febc:	462c      	movge	r4, r5
 810febe:	4638      	mov	r0, r7
 810fec0:	6861      	ldr	r1, [r4, #4]
 810fec2:	bfa6      	itte	ge
 810fec4:	461d      	movge	r5, r3
 810fec6:	2600      	movge	r6, #0
 810fec8:	2601      	movlt	r6, #1
 810feca:	f7ff fdb1 	bl	810fa30 <_Balloc>
 810fece:	692b      	ldr	r3, [r5, #16]
 810fed0:	60c6      	str	r6, [r0, #12]
 810fed2:	6926      	ldr	r6, [r4, #16]
 810fed4:	f105 0914 	add.w	r9, r5, #20
 810fed8:	f104 0214 	add.w	r2, r4, #20
 810fedc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 810fee0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 810fee4:	f100 0514 	add.w	r5, r0, #20
 810fee8:	f04f 0e00 	mov.w	lr, #0
 810feec:	f852 ab04 	ldr.w	sl, [r2], #4
 810fef0:	f859 4b04 	ldr.w	r4, [r9], #4
 810fef4:	fa1e f18a 	uxtah	r1, lr, sl
 810fef8:	b2a3      	uxth	r3, r4
 810fefa:	1ac9      	subs	r1, r1, r3
 810fefc:	0c23      	lsrs	r3, r4, #16
 810fefe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 810ff02:	eb03 4321 	add.w	r3, r3, r1, asr #16
 810ff06:	b289      	uxth	r1, r1
 810ff08:	ea4f 4e23 	mov.w	lr, r3, asr #16
 810ff0c:	45c8      	cmp	r8, r9
 810ff0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810ff12:	4694      	mov	ip, r2
 810ff14:	f845 3b04 	str.w	r3, [r5], #4
 810ff18:	d8e8      	bhi.n	810feec <__mdiff+0x5c>
 810ff1a:	45bc      	cmp	ip, r7
 810ff1c:	d304      	bcc.n	810ff28 <__mdiff+0x98>
 810ff1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 810ff22:	b183      	cbz	r3, 810ff46 <__mdiff+0xb6>
 810ff24:	6106      	str	r6, [r0, #16]
 810ff26:	e7c5      	b.n	810feb4 <__mdiff+0x24>
 810ff28:	f85c 1b04 	ldr.w	r1, [ip], #4
 810ff2c:	fa1e f381 	uxtah	r3, lr, r1
 810ff30:	141a      	asrs	r2, r3, #16
 810ff32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810ff36:	b29b      	uxth	r3, r3
 810ff38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ff3c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 810ff40:	f845 3b04 	str.w	r3, [r5], #4
 810ff44:	e7e9      	b.n	810ff1a <__mdiff+0x8a>
 810ff46:	3e01      	subs	r6, #1
 810ff48:	e7e9      	b.n	810ff1e <__mdiff+0x8e>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
0811305e <__retarget_lock_release_recursive>:
 811305e:	4770      	bx	lr
=======
0810ff4a <__d2b>:
 810ff4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ff4e:	460e      	mov	r6, r1
 810ff50:	2101      	movs	r1, #1
 810ff52:	ec59 8b10 	vmov	r8, r9, d0
 810ff56:	4615      	mov	r5, r2
 810ff58:	f7ff fd6a 	bl	810fa30 <_Balloc>
 810ff5c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 810ff60:	4607      	mov	r7, r0
 810ff62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810ff66:	bb34      	cbnz	r4, 810ffb6 <__d2b+0x6c>
 810ff68:	9301      	str	r3, [sp, #4]
 810ff6a:	f1b8 0300 	subs.w	r3, r8, #0
 810ff6e:	d027      	beq.n	810ffc0 <__d2b+0x76>
 810ff70:	a802      	add	r0, sp, #8
 810ff72:	f840 3d08 	str.w	r3, [r0, #-8]!
 810ff76:	f7ff fe00 	bl	810fb7a <__lo0bits>
 810ff7a:	9900      	ldr	r1, [sp, #0]
 810ff7c:	b1f0      	cbz	r0, 810ffbc <__d2b+0x72>
 810ff7e:	9a01      	ldr	r2, [sp, #4]
 810ff80:	f1c0 0320 	rsb	r3, r0, #32
 810ff84:	fa02 f303 	lsl.w	r3, r2, r3
 810ff88:	430b      	orrs	r3, r1
 810ff8a:	40c2      	lsrs	r2, r0
 810ff8c:	617b      	str	r3, [r7, #20]
 810ff8e:	9201      	str	r2, [sp, #4]
 810ff90:	9b01      	ldr	r3, [sp, #4]
 810ff92:	61bb      	str	r3, [r7, #24]
 810ff94:	2b00      	cmp	r3, #0
 810ff96:	bf14      	ite	ne
 810ff98:	2102      	movne	r1, #2
 810ff9a:	2101      	moveq	r1, #1
 810ff9c:	6139      	str	r1, [r7, #16]
 810ff9e:	b1c4      	cbz	r4, 810ffd2 <__d2b+0x88>
 810ffa0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 810ffa4:	4404      	add	r4, r0
 810ffa6:	6034      	str	r4, [r6, #0]
 810ffa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810ffac:	6028      	str	r0, [r5, #0]
 810ffae:	4638      	mov	r0, r7
 810ffb0:	b003      	add	sp, #12
 810ffb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ffb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810ffba:	e7d5      	b.n	810ff68 <__d2b+0x1e>
 810ffbc:	6179      	str	r1, [r7, #20]
 810ffbe:	e7e7      	b.n	810ff90 <__d2b+0x46>
 810ffc0:	a801      	add	r0, sp, #4
 810ffc2:	f7ff fdda 	bl	810fb7a <__lo0bits>
 810ffc6:	9b01      	ldr	r3, [sp, #4]
 810ffc8:	617b      	str	r3, [r7, #20]
 810ffca:	2101      	movs	r1, #1
 810ffcc:	6139      	str	r1, [r7, #16]
 810ffce:	3020      	adds	r0, #32
 810ffd0:	e7e5      	b.n	810ff9e <__d2b+0x54>
 810ffd2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 810ffd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810ffda:	6030      	str	r0, [r6, #0]
 810ffdc:	6918      	ldr	r0, [r3, #16]
 810ffde:	f7ff fdad 	bl	810fb3c <__hi0bits>
 810ffe2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 810ffe6:	e7e1      	b.n	810ffac <__d2b+0x62>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08113060 <__swhatbuf_r>:
 8113060:	b570      	push	{r4, r5, r6, lr}
 8113062:	460e      	mov	r6, r1
 8113064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113068:	2900      	cmp	r1, #0
 811306a:	b096      	sub	sp, #88	; 0x58
 811306c:	4614      	mov	r4, r2
 811306e:	461d      	mov	r5, r3
 8113070:	da07      	bge.n	8113082 <__swhatbuf_r+0x22>
 8113072:	2300      	movs	r3, #0
 8113074:	602b      	str	r3, [r5, #0]
 8113076:	89b3      	ldrh	r3, [r6, #12]
 8113078:	061a      	lsls	r2, r3, #24
 811307a:	d410      	bmi.n	811309e <__swhatbuf_r+0x3e>
 811307c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8113080:	e00e      	b.n	81130a0 <__swhatbuf_r+0x40>
 8113082:	466a      	mov	r2, sp
 8113084:	f000 ffec 	bl	8114060 <_fstat_r>
 8113088:	2800      	cmp	r0, #0
 811308a:	dbf2      	blt.n	8113072 <__swhatbuf_r+0x12>
 811308c:	9a01      	ldr	r2, [sp, #4]
 811308e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8113092:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8113096:	425a      	negs	r2, r3
 8113098:	415a      	adcs	r2, r3
 811309a:	602a      	str	r2, [r5, #0]
 811309c:	e7ee      	b.n	811307c <__swhatbuf_r+0x1c>
 811309e:	2340      	movs	r3, #64	; 0x40
 81130a0:	2000      	movs	r0, #0
 81130a2:	6023      	str	r3, [r4, #0]
 81130a4:	b016      	add	sp, #88	; 0x58
 81130a6:	bd70      	pop	{r4, r5, r6, pc}
=======
0810ffe8 <_calloc_r>:
 810ffe8:	b538      	push	{r3, r4, r5, lr}
 810ffea:	fb02 f401 	mul.w	r4, r2, r1
 810ffee:	4621      	mov	r1, r4
 810fff0:	f000 f856 	bl	81100a0 <_malloc_r>
 810fff4:	4605      	mov	r5, r0
 810fff6:	b118      	cbz	r0, 8110000 <_calloc_r+0x18>
 810fff8:	4622      	mov	r2, r4
 810fffa:	2100      	movs	r1, #0
 810fffc:	f7fe f8c7 	bl	810e18e <memset>
 8110000:	4628      	mov	r0, r5
 8110002:	bd38      	pop	{r3, r4, r5, pc}
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081130a8 <__smakebuf_r>:
 81130a8:	898b      	ldrh	r3, [r1, #12]
 81130aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 81130ac:	079d      	lsls	r5, r3, #30
 81130ae:	4606      	mov	r6, r0
 81130b0:	460c      	mov	r4, r1
 81130b2:	d507      	bpl.n	81130c4 <__smakebuf_r+0x1c>
 81130b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 81130b8:	6023      	str	r3, [r4, #0]
 81130ba:	6123      	str	r3, [r4, #16]
 81130bc:	2301      	movs	r3, #1
 81130be:	6163      	str	r3, [r4, #20]
 81130c0:	b002      	add	sp, #8
 81130c2:	bd70      	pop	{r4, r5, r6, pc}
 81130c4:	ab01      	add	r3, sp, #4
 81130c6:	466a      	mov	r2, sp
 81130c8:	f7ff ffca 	bl	8113060 <__swhatbuf_r>
 81130cc:	9900      	ldr	r1, [sp, #0]
 81130ce:	4605      	mov	r5, r0
 81130d0:	4630      	mov	r0, r6
 81130d2:	f000 fc0f 	bl	81138f4 <_malloc_r>
 81130d6:	b948      	cbnz	r0, 81130ec <__smakebuf_r+0x44>
 81130d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81130dc:	059a      	lsls	r2, r3, #22
 81130de:	d4ef      	bmi.n	81130c0 <__smakebuf_r+0x18>
 81130e0:	f023 0303 	bic.w	r3, r3, #3
 81130e4:	f043 0302 	orr.w	r3, r3, #2
 81130e8:	81a3      	strh	r3, [r4, #12]
 81130ea:	e7e3      	b.n	81130b4 <__smakebuf_r+0xc>
 81130ec:	4b0d      	ldr	r3, [pc, #52]	; (8113124 <__smakebuf_r+0x7c>)
 81130ee:	62b3      	str	r3, [r6, #40]	; 0x28
 81130f0:	89a3      	ldrh	r3, [r4, #12]
 81130f2:	6020      	str	r0, [r4, #0]
 81130f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81130f8:	81a3      	strh	r3, [r4, #12]
 81130fa:	9b00      	ldr	r3, [sp, #0]
 81130fc:	6163      	str	r3, [r4, #20]
 81130fe:	9b01      	ldr	r3, [sp, #4]
 8113100:	6120      	str	r0, [r4, #16]
 8113102:	b15b      	cbz	r3, 811311c <__smakebuf_r+0x74>
 8113104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8113108:	4630      	mov	r0, r6
 811310a:	f000 ffbb 	bl	8114084 <_isatty_r>
 811310e:	b128      	cbz	r0, 811311c <__smakebuf_r+0x74>
 8113110:	89a3      	ldrh	r3, [r4, #12]
 8113112:	f023 0303 	bic.w	r3, r3, #3
 8113116:	f043 0301 	orr.w	r3, r3, #1
 811311a:	81a3      	strh	r3, [r4, #12]
 811311c:	89a0      	ldrh	r0, [r4, #12]
 811311e:	4305      	orrs	r5, r0
 8113120:	81a5      	strh	r5, [r4, #12]
 8113122:	e7cd      	b.n	81130c0 <__smakebuf_r+0x18>
 8113124:	08112ead 	.word	0x08112ead
=======
08110004 <_free_r>:
 8110004:	b538      	push	{r3, r4, r5, lr}
 8110006:	4605      	mov	r5, r0
 8110008:	2900      	cmp	r1, #0
 811000a:	d045      	beq.n	8110098 <_free_r+0x94>
 811000c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8110010:	1f0c      	subs	r4, r1, #4
 8110012:	2b00      	cmp	r3, #0
 8110014:	bfb8      	it	lt
 8110016:	18e4      	addlt	r4, r4, r3
 8110018:	f000 fa24 	bl	8110464 <__malloc_lock>
 811001c:	4a1f      	ldr	r2, [pc, #124]	; (811009c <_free_r+0x98>)
 811001e:	6813      	ldr	r3, [r2, #0]
 8110020:	4610      	mov	r0, r2
 8110022:	b933      	cbnz	r3, 8110032 <_free_r+0x2e>
 8110024:	6063      	str	r3, [r4, #4]
 8110026:	6014      	str	r4, [r2, #0]
 8110028:	4628      	mov	r0, r5
 811002a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811002e:	f000 ba1a 	b.w	8110466 <__malloc_unlock>
 8110032:	42a3      	cmp	r3, r4
 8110034:	d90c      	bls.n	8110050 <_free_r+0x4c>
 8110036:	6821      	ldr	r1, [r4, #0]
 8110038:	1862      	adds	r2, r4, r1
 811003a:	4293      	cmp	r3, r2
 811003c:	bf04      	itt	eq
 811003e:	681a      	ldreq	r2, [r3, #0]
 8110040:	685b      	ldreq	r3, [r3, #4]
 8110042:	6063      	str	r3, [r4, #4]
 8110044:	bf04      	itt	eq
 8110046:	1852      	addeq	r2, r2, r1
 8110048:	6022      	streq	r2, [r4, #0]
 811004a:	6004      	str	r4, [r0, #0]
 811004c:	e7ec      	b.n	8110028 <_free_r+0x24>
 811004e:	4613      	mov	r3, r2
 8110050:	685a      	ldr	r2, [r3, #4]
 8110052:	b10a      	cbz	r2, 8110058 <_free_r+0x54>
 8110054:	42a2      	cmp	r2, r4
 8110056:	d9fa      	bls.n	811004e <_free_r+0x4a>
 8110058:	6819      	ldr	r1, [r3, #0]
 811005a:	1858      	adds	r0, r3, r1
 811005c:	42a0      	cmp	r0, r4
 811005e:	d10b      	bne.n	8110078 <_free_r+0x74>
 8110060:	6820      	ldr	r0, [r4, #0]
 8110062:	4401      	add	r1, r0
 8110064:	1858      	adds	r0, r3, r1
 8110066:	4282      	cmp	r2, r0
 8110068:	6019      	str	r1, [r3, #0]
 811006a:	d1dd      	bne.n	8110028 <_free_r+0x24>
 811006c:	6810      	ldr	r0, [r2, #0]
 811006e:	6852      	ldr	r2, [r2, #4]
 8110070:	605a      	str	r2, [r3, #4]
 8110072:	4401      	add	r1, r0
 8110074:	6019      	str	r1, [r3, #0]
 8110076:	e7d7      	b.n	8110028 <_free_r+0x24>
 8110078:	d902      	bls.n	8110080 <_free_r+0x7c>
 811007a:	230c      	movs	r3, #12
 811007c:	602b      	str	r3, [r5, #0]
 811007e:	e7d3      	b.n	8110028 <_free_r+0x24>
 8110080:	6820      	ldr	r0, [r4, #0]
 8110082:	1821      	adds	r1, r4, r0
 8110084:	428a      	cmp	r2, r1
 8110086:	bf04      	itt	eq
 8110088:	6811      	ldreq	r1, [r2, #0]
 811008a:	6852      	ldreq	r2, [r2, #4]
 811008c:	6062      	str	r2, [r4, #4]
 811008e:	bf04      	itt	eq
 8110090:	1809      	addeq	r1, r1, r0
 8110092:	6021      	streq	r1, [r4, #0]
 8110094:	605c      	str	r4, [r3, #4]
 8110096:	e7c7      	b.n	8110028 <_free_r+0x24>
 8110098:	bd38      	pop	{r3, r4, r5, pc}
 811009a:	bf00      	nop
 811009c:	10009604 	.word	0x10009604
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08113128 <malloc>:
 8113128:	4b02      	ldr	r3, [pc, #8]	; (8113134 <malloc+0xc>)
 811312a:	4601      	mov	r1, r0
 811312c:	6818      	ldr	r0, [r3, #0]
 811312e:	f000 bbe1 	b.w	81138f4 <_malloc_r>
 8113132:	bf00      	nop
 8113134:	10000040 	.word	0x10000040
=======
081100a0 <_malloc_r>:
 81100a0:	b570      	push	{r4, r5, r6, lr}
 81100a2:	1ccd      	adds	r5, r1, #3
 81100a4:	f025 0503 	bic.w	r5, r5, #3
 81100a8:	3508      	adds	r5, #8
 81100aa:	2d0c      	cmp	r5, #12
 81100ac:	bf38      	it	cc
 81100ae:	250c      	movcc	r5, #12
 81100b0:	2d00      	cmp	r5, #0
 81100b2:	4606      	mov	r6, r0
 81100b4:	db01      	blt.n	81100ba <_malloc_r+0x1a>
 81100b6:	42a9      	cmp	r1, r5
 81100b8:	d903      	bls.n	81100c2 <_malloc_r+0x22>
 81100ba:	230c      	movs	r3, #12
 81100bc:	6033      	str	r3, [r6, #0]
 81100be:	2000      	movs	r0, #0
 81100c0:	bd70      	pop	{r4, r5, r6, pc}
 81100c2:	f000 f9cf 	bl	8110464 <__malloc_lock>
 81100c6:	4a21      	ldr	r2, [pc, #132]	; (811014c <_malloc_r+0xac>)
 81100c8:	6814      	ldr	r4, [r2, #0]
 81100ca:	4621      	mov	r1, r4
 81100cc:	b991      	cbnz	r1, 81100f4 <_malloc_r+0x54>
 81100ce:	4c20      	ldr	r4, [pc, #128]	; (8110150 <_malloc_r+0xb0>)
 81100d0:	6823      	ldr	r3, [r4, #0]
 81100d2:	b91b      	cbnz	r3, 81100dc <_malloc_r+0x3c>
 81100d4:	4630      	mov	r0, r6
 81100d6:	f000 f98f 	bl	81103f8 <_sbrk_r>
 81100da:	6020      	str	r0, [r4, #0]
 81100dc:	4629      	mov	r1, r5
 81100de:	4630      	mov	r0, r6
 81100e0:	f000 f98a 	bl	81103f8 <_sbrk_r>
 81100e4:	1c43      	adds	r3, r0, #1
 81100e6:	d124      	bne.n	8110132 <_malloc_r+0x92>
 81100e8:	230c      	movs	r3, #12
 81100ea:	6033      	str	r3, [r6, #0]
 81100ec:	4630      	mov	r0, r6
 81100ee:	f000 f9ba 	bl	8110466 <__malloc_unlock>
 81100f2:	e7e4      	b.n	81100be <_malloc_r+0x1e>
 81100f4:	680b      	ldr	r3, [r1, #0]
 81100f6:	1b5b      	subs	r3, r3, r5
 81100f8:	d418      	bmi.n	811012c <_malloc_r+0x8c>
 81100fa:	2b0b      	cmp	r3, #11
 81100fc:	d90f      	bls.n	811011e <_malloc_r+0x7e>
 81100fe:	600b      	str	r3, [r1, #0]
 8110100:	50cd      	str	r5, [r1, r3]
 8110102:	18cc      	adds	r4, r1, r3
 8110104:	4630      	mov	r0, r6
 8110106:	f000 f9ae 	bl	8110466 <__malloc_unlock>
 811010a:	f104 000b 	add.w	r0, r4, #11
 811010e:	1d23      	adds	r3, r4, #4
 8110110:	f020 0007 	bic.w	r0, r0, #7
 8110114:	1ac3      	subs	r3, r0, r3
 8110116:	d0d3      	beq.n	81100c0 <_malloc_r+0x20>
 8110118:	425a      	negs	r2, r3
 811011a:	50e2      	str	r2, [r4, r3]
 811011c:	e7d0      	b.n	81100c0 <_malloc_r+0x20>
 811011e:	428c      	cmp	r4, r1
 8110120:	684b      	ldr	r3, [r1, #4]
 8110122:	bf16      	itet	ne
 8110124:	6063      	strne	r3, [r4, #4]
 8110126:	6013      	streq	r3, [r2, #0]
 8110128:	460c      	movne	r4, r1
 811012a:	e7eb      	b.n	8110104 <_malloc_r+0x64>
 811012c:	460c      	mov	r4, r1
 811012e:	6849      	ldr	r1, [r1, #4]
 8110130:	e7cc      	b.n	81100cc <_malloc_r+0x2c>
 8110132:	1cc4      	adds	r4, r0, #3
 8110134:	f024 0403 	bic.w	r4, r4, #3
 8110138:	42a0      	cmp	r0, r4
 811013a:	d005      	beq.n	8110148 <_malloc_r+0xa8>
 811013c:	1a21      	subs	r1, r4, r0
 811013e:	4630      	mov	r0, r6
 8110140:	f000 f95a 	bl	81103f8 <_sbrk_r>
 8110144:	3001      	adds	r0, #1
 8110146:	d0cf      	beq.n	81100e8 <_malloc_r+0x48>
 8110148:	6025      	str	r5, [r4, #0]
 811014a:	e7db      	b.n	8110104 <_malloc_r+0x64>
 811014c:	10009604 	.word	0x10009604
 8110150:	10009608 	.word	0x10009608
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08113138 <_Balloc>:
 8113138:	b570      	push	{r4, r5, r6, lr}
 811313a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 811313c:	4604      	mov	r4, r0
 811313e:	460d      	mov	r5, r1
 8113140:	b976      	cbnz	r6, 8113160 <_Balloc+0x28>
 8113142:	2010      	movs	r0, #16
 8113144:	f7ff fff0 	bl	8113128 <malloc>
 8113148:	4602      	mov	r2, r0
 811314a:	6260      	str	r0, [r4, #36]	; 0x24
 811314c:	b920      	cbnz	r0, 8113158 <_Balloc+0x20>
 811314e:	4b18      	ldr	r3, [pc, #96]	; (81131b0 <_Balloc+0x78>)
 8113150:	4818      	ldr	r0, [pc, #96]	; (81131b4 <_Balloc+0x7c>)
 8113152:	2166      	movs	r1, #102	; 0x66
 8113154:	f000 ff44 	bl	8113fe0 <__assert_func>
 8113158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 811315c:	6006      	str	r6, [r0, #0]
 811315e:	60c6      	str	r6, [r0, #12]
 8113160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8113162:	68f3      	ldr	r3, [r6, #12]
 8113164:	b183      	cbz	r3, 8113188 <_Balloc+0x50>
 8113166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8113168:	68db      	ldr	r3, [r3, #12]
 811316a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 811316e:	b9b8      	cbnz	r0, 81131a0 <_Balloc+0x68>
 8113170:	2101      	movs	r1, #1
 8113172:	fa01 f605 	lsl.w	r6, r1, r5
 8113176:	1d72      	adds	r2, r6, #5
 8113178:	0092      	lsls	r2, r2, #2
 811317a:	4620      	mov	r0, r4
 811317c:	f000 fb5a 	bl	8113834 <_calloc_r>
 8113180:	b160      	cbz	r0, 811319c <_Balloc+0x64>
 8113182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8113186:	e00e      	b.n	81131a6 <_Balloc+0x6e>
 8113188:	2221      	movs	r2, #33	; 0x21
 811318a:	2104      	movs	r1, #4
 811318c:	4620      	mov	r0, r4
 811318e:	f000 fb51 	bl	8113834 <_calloc_r>
 8113192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8113194:	60f0      	str	r0, [r6, #12]
 8113196:	68db      	ldr	r3, [r3, #12]
 8113198:	2b00      	cmp	r3, #0
 811319a:	d1e4      	bne.n	8113166 <_Balloc+0x2e>
 811319c:	2000      	movs	r0, #0
 811319e:	bd70      	pop	{r4, r5, r6, pc}
 81131a0:	6802      	ldr	r2, [r0, #0]
 81131a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81131a6:	2300      	movs	r3, #0
 81131a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81131ac:	e7f7      	b.n	811319e <_Balloc+0x66>
 81131ae:	bf00      	nop
 81131b0:	081150e2 	.word	0x081150e2
 81131b4:	081151cc 	.word	0x081151cc
=======
08110154 <__ssputs_r>:
 8110154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8110158:	688e      	ldr	r6, [r1, #8]
 811015a:	429e      	cmp	r6, r3
 811015c:	4682      	mov	sl, r0
 811015e:	460c      	mov	r4, r1
 8110160:	4690      	mov	r8, r2
 8110162:	4699      	mov	r9, r3
 8110164:	d837      	bhi.n	81101d6 <__ssputs_r+0x82>
 8110166:	898a      	ldrh	r2, [r1, #12]
 8110168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 811016c:	d031      	beq.n	81101d2 <__ssputs_r+0x7e>
 811016e:	6825      	ldr	r5, [r4, #0]
 8110170:	6909      	ldr	r1, [r1, #16]
 8110172:	1a6f      	subs	r7, r5, r1
 8110174:	6965      	ldr	r5, [r4, #20]
 8110176:	2302      	movs	r3, #2
 8110178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 811017c:	fb95 f5f3 	sdiv	r5, r5, r3
 8110180:	f109 0301 	add.w	r3, r9, #1
 8110184:	443b      	add	r3, r7
 8110186:	429d      	cmp	r5, r3
 8110188:	bf38      	it	cc
 811018a:	461d      	movcc	r5, r3
 811018c:	0553      	lsls	r3, r2, #21
 811018e:	d530      	bpl.n	81101f2 <__ssputs_r+0x9e>
 8110190:	4629      	mov	r1, r5
 8110192:	f7ff ff85 	bl	81100a0 <_malloc_r>
 8110196:	4606      	mov	r6, r0
 8110198:	b950      	cbnz	r0, 81101b0 <__ssputs_r+0x5c>
 811019a:	230c      	movs	r3, #12
 811019c:	f8ca 3000 	str.w	r3, [sl]
 81101a0:	89a3      	ldrh	r3, [r4, #12]
 81101a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81101a6:	81a3      	strh	r3, [r4, #12]
 81101a8:	f04f 30ff 	mov.w	r0, #4294967295
 81101ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81101b0:	463a      	mov	r2, r7
 81101b2:	6921      	ldr	r1, [r4, #16]
 81101b4:	f7fd ffe0 	bl	810e178 <memcpy>
 81101b8:	89a3      	ldrh	r3, [r4, #12]
 81101ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81101be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81101c2:	81a3      	strh	r3, [r4, #12]
 81101c4:	6126      	str	r6, [r4, #16]
 81101c6:	6165      	str	r5, [r4, #20]
 81101c8:	443e      	add	r6, r7
 81101ca:	1bed      	subs	r5, r5, r7
 81101cc:	6026      	str	r6, [r4, #0]
 81101ce:	60a5      	str	r5, [r4, #8]
 81101d0:	464e      	mov	r6, r9
 81101d2:	454e      	cmp	r6, r9
 81101d4:	d900      	bls.n	81101d8 <__ssputs_r+0x84>
 81101d6:	464e      	mov	r6, r9
 81101d8:	4632      	mov	r2, r6
 81101da:	4641      	mov	r1, r8
 81101dc:	6820      	ldr	r0, [r4, #0]
 81101de:	f000 f928 	bl	8110432 <memmove>
 81101e2:	68a3      	ldr	r3, [r4, #8]
 81101e4:	1b9b      	subs	r3, r3, r6
 81101e6:	60a3      	str	r3, [r4, #8]
 81101e8:	6823      	ldr	r3, [r4, #0]
 81101ea:	441e      	add	r6, r3
 81101ec:	6026      	str	r6, [r4, #0]
 81101ee:	2000      	movs	r0, #0
 81101f0:	e7dc      	b.n	81101ac <__ssputs_r+0x58>
 81101f2:	462a      	mov	r2, r5
 81101f4:	f000 f938 	bl	8110468 <_realloc_r>
 81101f8:	4606      	mov	r6, r0
 81101fa:	2800      	cmp	r0, #0
 81101fc:	d1e2      	bne.n	81101c4 <__ssputs_r+0x70>
 81101fe:	6921      	ldr	r1, [r4, #16]
 8110200:	4650      	mov	r0, sl
 8110202:	f7ff feff 	bl	8110004 <_free_r>
 8110206:	e7c8      	b.n	811019a <__ssputs_r+0x46>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081131b8 <_Bfree>:
 81131b8:	b570      	push	{r4, r5, r6, lr}
 81131ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81131bc:	4605      	mov	r5, r0
 81131be:	460c      	mov	r4, r1
 81131c0:	b976      	cbnz	r6, 81131e0 <_Bfree+0x28>
 81131c2:	2010      	movs	r0, #16
 81131c4:	f7ff ffb0 	bl	8113128 <malloc>
 81131c8:	4602      	mov	r2, r0
 81131ca:	6268      	str	r0, [r5, #36]	; 0x24
 81131cc:	b920      	cbnz	r0, 81131d8 <_Bfree+0x20>
 81131ce:	4b09      	ldr	r3, [pc, #36]	; (81131f4 <_Bfree+0x3c>)
 81131d0:	4809      	ldr	r0, [pc, #36]	; (81131f8 <_Bfree+0x40>)
 81131d2:	218a      	movs	r1, #138	; 0x8a
 81131d4:	f000 ff04 	bl	8113fe0 <__assert_func>
 81131d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81131dc:	6006      	str	r6, [r0, #0]
 81131de:	60c6      	str	r6, [r0, #12]
 81131e0:	b13c      	cbz	r4, 81131f2 <_Bfree+0x3a>
 81131e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 81131e4:	6862      	ldr	r2, [r4, #4]
 81131e6:	68db      	ldr	r3, [r3, #12]
 81131e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81131ec:	6021      	str	r1, [r4, #0]
 81131ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81131f2:	bd70      	pop	{r4, r5, r6, pc}
 81131f4:	081150e2 	.word	0x081150e2
 81131f8:	081151cc 	.word	0x081151cc
=======
08110208 <_svfiprintf_r>:
 8110208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811020c:	461d      	mov	r5, r3
 811020e:	898b      	ldrh	r3, [r1, #12]
 8110210:	061f      	lsls	r7, r3, #24
 8110212:	b09d      	sub	sp, #116	; 0x74
 8110214:	4680      	mov	r8, r0
 8110216:	460c      	mov	r4, r1
 8110218:	4616      	mov	r6, r2
 811021a:	d50f      	bpl.n	811023c <_svfiprintf_r+0x34>
 811021c:	690b      	ldr	r3, [r1, #16]
 811021e:	b96b      	cbnz	r3, 811023c <_svfiprintf_r+0x34>
 8110220:	2140      	movs	r1, #64	; 0x40
 8110222:	f7ff ff3d 	bl	81100a0 <_malloc_r>
 8110226:	6020      	str	r0, [r4, #0]
 8110228:	6120      	str	r0, [r4, #16]
 811022a:	b928      	cbnz	r0, 8110238 <_svfiprintf_r+0x30>
 811022c:	230c      	movs	r3, #12
 811022e:	f8c8 3000 	str.w	r3, [r8]
 8110232:	f04f 30ff 	mov.w	r0, #4294967295
 8110236:	e0c8      	b.n	81103ca <_svfiprintf_r+0x1c2>
 8110238:	2340      	movs	r3, #64	; 0x40
 811023a:	6163      	str	r3, [r4, #20]
 811023c:	2300      	movs	r3, #0
 811023e:	9309      	str	r3, [sp, #36]	; 0x24
 8110240:	2320      	movs	r3, #32
 8110242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8110246:	2330      	movs	r3, #48	; 0x30
 8110248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 811024c:	9503      	str	r5, [sp, #12]
 811024e:	f04f 0b01 	mov.w	fp, #1
 8110252:	4637      	mov	r7, r6
 8110254:	463d      	mov	r5, r7
 8110256:	f815 3b01 	ldrb.w	r3, [r5], #1
 811025a:	b10b      	cbz	r3, 8110260 <_svfiprintf_r+0x58>
 811025c:	2b25      	cmp	r3, #37	; 0x25
 811025e:	d13e      	bne.n	81102de <_svfiprintf_r+0xd6>
 8110260:	ebb7 0a06 	subs.w	sl, r7, r6
 8110264:	d00b      	beq.n	811027e <_svfiprintf_r+0x76>
 8110266:	4653      	mov	r3, sl
 8110268:	4632      	mov	r2, r6
 811026a:	4621      	mov	r1, r4
 811026c:	4640      	mov	r0, r8
 811026e:	f7ff ff71 	bl	8110154 <__ssputs_r>
 8110272:	3001      	adds	r0, #1
 8110274:	f000 80a4 	beq.w	81103c0 <_svfiprintf_r+0x1b8>
 8110278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811027a:	4453      	add	r3, sl
 811027c:	9309      	str	r3, [sp, #36]	; 0x24
 811027e:	783b      	ldrb	r3, [r7, #0]
 8110280:	2b00      	cmp	r3, #0
 8110282:	f000 809d 	beq.w	81103c0 <_svfiprintf_r+0x1b8>
 8110286:	2300      	movs	r3, #0
 8110288:	f04f 32ff 	mov.w	r2, #4294967295
 811028c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110290:	9304      	str	r3, [sp, #16]
 8110292:	9307      	str	r3, [sp, #28]
 8110294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8110298:	931a      	str	r3, [sp, #104]	; 0x68
 811029a:	462f      	mov	r7, r5
 811029c:	2205      	movs	r2, #5
 811029e:	f817 1b01 	ldrb.w	r1, [r7], #1
 81102a2:	4850      	ldr	r0, [pc, #320]	; (81103e4 <_svfiprintf_r+0x1dc>)
 81102a4:	f7f0 f834 	bl	8100310 <memchr>
 81102a8:	9b04      	ldr	r3, [sp, #16]
 81102aa:	b9d0      	cbnz	r0, 81102e2 <_svfiprintf_r+0xda>
 81102ac:	06d9      	lsls	r1, r3, #27
 81102ae:	bf44      	itt	mi
 81102b0:	2220      	movmi	r2, #32
 81102b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81102b6:	071a      	lsls	r2, r3, #28
 81102b8:	bf44      	itt	mi
 81102ba:	222b      	movmi	r2, #43	; 0x2b
 81102bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81102c0:	782a      	ldrb	r2, [r5, #0]
 81102c2:	2a2a      	cmp	r2, #42	; 0x2a
 81102c4:	d015      	beq.n	81102f2 <_svfiprintf_r+0xea>
 81102c6:	9a07      	ldr	r2, [sp, #28]
 81102c8:	462f      	mov	r7, r5
 81102ca:	2000      	movs	r0, #0
 81102cc:	250a      	movs	r5, #10
 81102ce:	4639      	mov	r1, r7
 81102d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 81102d4:	3b30      	subs	r3, #48	; 0x30
 81102d6:	2b09      	cmp	r3, #9
 81102d8:	d94d      	bls.n	8110376 <_svfiprintf_r+0x16e>
 81102da:	b1b8      	cbz	r0, 811030c <_svfiprintf_r+0x104>
 81102dc:	e00f      	b.n	81102fe <_svfiprintf_r+0xf6>
 81102de:	462f      	mov	r7, r5
 81102e0:	e7b8      	b.n	8110254 <_svfiprintf_r+0x4c>
 81102e2:	4a40      	ldr	r2, [pc, #256]	; (81103e4 <_svfiprintf_r+0x1dc>)
 81102e4:	1a80      	subs	r0, r0, r2
 81102e6:	fa0b f000 	lsl.w	r0, fp, r0
 81102ea:	4318      	orrs	r0, r3
 81102ec:	9004      	str	r0, [sp, #16]
 81102ee:	463d      	mov	r5, r7
 81102f0:	e7d3      	b.n	811029a <_svfiprintf_r+0x92>
 81102f2:	9a03      	ldr	r2, [sp, #12]
 81102f4:	1d11      	adds	r1, r2, #4
 81102f6:	6812      	ldr	r2, [r2, #0]
 81102f8:	9103      	str	r1, [sp, #12]
 81102fa:	2a00      	cmp	r2, #0
 81102fc:	db01      	blt.n	8110302 <_svfiprintf_r+0xfa>
 81102fe:	9207      	str	r2, [sp, #28]
 8110300:	e004      	b.n	811030c <_svfiprintf_r+0x104>
 8110302:	4252      	negs	r2, r2
 8110304:	f043 0302 	orr.w	r3, r3, #2
 8110308:	9207      	str	r2, [sp, #28]
 811030a:	9304      	str	r3, [sp, #16]
 811030c:	783b      	ldrb	r3, [r7, #0]
 811030e:	2b2e      	cmp	r3, #46	; 0x2e
 8110310:	d10c      	bne.n	811032c <_svfiprintf_r+0x124>
 8110312:	787b      	ldrb	r3, [r7, #1]
 8110314:	2b2a      	cmp	r3, #42	; 0x2a
 8110316:	d133      	bne.n	8110380 <_svfiprintf_r+0x178>
 8110318:	9b03      	ldr	r3, [sp, #12]
 811031a:	1d1a      	adds	r2, r3, #4
 811031c:	681b      	ldr	r3, [r3, #0]
 811031e:	9203      	str	r2, [sp, #12]
 8110320:	2b00      	cmp	r3, #0
 8110322:	bfb8      	it	lt
 8110324:	f04f 33ff 	movlt.w	r3, #4294967295
 8110328:	3702      	adds	r7, #2
 811032a:	9305      	str	r3, [sp, #20]
 811032c:	4d2e      	ldr	r5, [pc, #184]	; (81103e8 <_svfiprintf_r+0x1e0>)
 811032e:	7839      	ldrb	r1, [r7, #0]
 8110330:	2203      	movs	r2, #3
 8110332:	4628      	mov	r0, r5
 8110334:	f7ef ffec 	bl	8100310 <memchr>
 8110338:	b138      	cbz	r0, 811034a <_svfiprintf_r+0x142>
 811033a:	2340      	movs	r3, #64	; 0x40
 811033c:	1b40      	subs	r0, r0, r5
 811033e:	fa03 f000 	lsl.w	r0, r3, r0
 8110342:	9b04      	ldr	r3, [sp, #16]
 8110344:	4303      	orrs	r3, r0
 8110346:	3701      	adds	r7, #1
 8110348:	9304      	str	r3, [sp, #16]
 811034a:	7839      	ldrb	r1, [r7, #0]
 811034c:	4827      	ldr	r0, [pc, #156]	; (81103ec <_svfiprintf_r+0x1e4>)
 811034e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8110352:	2206      	movs	r2, #6
 8110354:	1c7e      	adds	r6, r7, #1
 8110356:	f7ef ffdb 	bl	8100310 <memchr>
 811035a:	2800      	cmp	r0, #0
 811035c:	d038      	beq.n	81103d0 <_svfiprintf_r+0x1c8>
 811035e:	4b24      	ldr	r3, [pc, #144]	; (81103f0 <_svfiprintf_r+0x1e8>)
 8110360:	bb13      	cbnz	r3, 81103a8 <_svfiprintf_r+0x1a0>
 8110362:	9b03      	ldr	r3, [sp, #12]
 8110364:	3307      	adds	r3, #7
 8110366:	f023 0307 	bic.w	r3, r3, #7
 811036a:	3308      	adds	r3, #8
 811036c:	9303      	str	r3, [sp, #12]
 811036e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110370:	444b      	add	r3, r9
 8110372:	9309      	str	r3, [sp, #36]	; 0x24
 8110374:	e76d      	b.n	8110252 <_svfiprintf_r+0x4a>
 8110376:	fb05 3202 	mla	r2, r5, r2, r3
 811037a:	2001      	movs	r0, #1
 811037c:	460f      	mov	r7, r1
 811037e:	e7a6      	b.n	81102ce <_svfiprintf_r+0xc6>
 8110380:	2300      	movs	r3, #0
 8110382:	3701      	adds	r7, #1
 8110384:	9305      	str	r3, [sp, #20]
 8110386:	4619      	mov	r1, r3
 8110388:	250a      	movs	r5, #10
 811038a:	4638      	mov	r0, r7
 811038c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110390:	3a30      	subs	r2, #48	; 0x30
 8110392:	2a09      	cmp	r2, #9
 8110394:	d903      	bls.n	811039e <_svfiprintf_r+0x196>
 8110396:	2b00      	cmp	r3, #0
 8110398:	d0c8      	beq.n	811032c <_svfiprintf_r+0x124>
 811039a:	9105      	str	r1, [sp, #20]
 811039c:	e7c6      	b.n	811032c <_svfiprintf_r+0x124>
 811039e:	fb05 2101 	mla	r1, r5, r1, r2
 81103a2:	2301      	movs	r3, #1
 81103a4:	4607      	mov	r7, r0
 81103a6:	e7f0      	b.n	811038a <_svfiprintf_r+0x182>
 81103a8:	ab03      	add	r3, sp, #12
 81103aa:	9300      	str	r3, [sp, #0]
 81103ac:	4622      	mov	r2, r4
 81103ae:	4b11      	ldr	r3, [pc, #68]	; (81103f4 <_svfiprintf_r+0x1ec>)
 81103b0:	a904      	add	r1, sp, #16
 81103b2:	4640      	mov	r0, r8
 81103b4:	f7fd ff88 	bl	810e2c8 <_printf_float>
 81103b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 81103bc:	4681      	mov	r9, r0
 81103be:	d1d6      	bne.n	811036e <_svfiprintf_r+0x166>
 81103c0:	89a3      	ldrh	r3, [r4, #12]
 81103c2:	065b      	lsls	r3, r3, #25
 81103c4:	f53f af35 	bmi.w	8110232 <_svfiprintf_r+0x2a>
 81103c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 81103ca:	b01d      	add	sp, #116	; 0x74
 81103cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81103d0:	ab03      	add	r3, sp, #12
 81103d2:	9300      	str	r3, [sp, #0]
 81103d4:	4622      	mov	r2, r4
 81103d6:	4b07      	ldr	r3, [pc, #28]	; (81103f4 <_svfiprintf_r+0x1ec>)
 81103d8:	a904      	add	r1, sp, #16
 81103da:	4640      	mov	r0, r8
 81103dc:	f7fe fa2a 	bl	810e834 <_printf_i>
 81103e0:	e7ea      	b.n	81103b8 <_svfiprintf_r+0x1b0>
 81103e2:	bf00      	nop
 81103e4:	0811109c 	.word	0x0811109c
 81103e8:	081110a2 	.word	0x081110a2
 81103ec:	081110a6 	.word	0x081110a6
 81103f0:	0810e2c9 	.word	0x0810e2c9
 81103f4:	08110155 	.word	0x08110155
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081131fc <__multadd>:
 81131fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113200:	690e      	ldr	r6, [r1, #16]
 8113202:	4607      	mov	r7, r0
 8113204:	4698      	mov	r8, r3
 8113206:	460c      	mov	r4, r1
 8113208:	f101 0014 	add.w	r0, r1, #20
 811320c:	2300      	movs	r3, #0
 811320e:	6805      	ldr	r5, [r0, #0]
 8113210:	b2a9      	uxth	r1, r5
 8113212:	fb02 8101 	mla	r1, r2, r1, r8
 8113216:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 811321a:	0c2d      	lsrs	r5, r5, #16
 811321c:	fb02 c505 	mla	r5, r2, r5, ip
 8113220:	b289      	uxth	r1, r1
 8113222:	3301      	adds	r3, #1
 8113224:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8113228:	429e      	cmp	r6, r3
 811322a:	f840 1b04 	str.w	r1, [r0], #4
 811322e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8113232:	dcec      	bgt.n	811320e <__multadd+0x12>
 8113234:	f1b8 0f00 	cmp.w	r8, #0
 8113238:	d022      	beq.n	8113280 <__multadd+0x84>
 811323a:	68a3      	ldr	r3, [r4, #8]
 811323c:	42b3      	cmp	r3, r6
 811323e:	dc19      	bgt.n	8113274 <__multadd+0x78>
 8113240:	6861      	ldr	r1, [r4, #4]
 8113242:	4638      	mov	r0, r7
 8113244:	3101      	adds	r1, #1
 8113246:	f7ff ff77 	bl	8113138 <_Balloc>
 811324a:	4605      	mov	r5, r0
 811324c:	b928      	cbnz	r0, 811325a <__multadd+0x5e>
 811324e:	4602      	mov	r2, r0
 8113250:	4b0d      	ldr	r3, [pc, #52]	; (8113288 <__multadd+0x8c>)
 8113252:	480e      	ldr	r0, [pc, #56]	; (811328c <__multadd+0x90>)
 8113254:	21b5      	movs	r1, #181	; 0xb5
 8113256:	f000 fec3 	bl	8113fe0 <__assert_func>
 811325a:	6922      	ldr	r2, [r4, #16]
 811325c:	3202      	adds	r2, #2
 811325e:	f104 010c 	add.w	r1, r4, #12
 8113262:	0092      	lsls	r2, r2, #2
 8113264:	300c      	adds	r0, #12
 8113266:	f7fd ff7f 	bl	8111168 <memcpy>
 811326a:	4621      	mov	r1, r4
 811326c:	4638      	mov	r0, r7
 811326e:	f7ff ffa3 	bl	81131b8 <_Bfree>
 8113272:	462c      	mov	r4, r5
 8113274:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8113278:	3601      	adds	r6, #1
 811327a:	f8c3 8014 	str.w	r8, [r3, #20]
 811327e:	6126      	str	r6, [r4, #16]
 8113280:	4620      	mov	r0, r4
 8113282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113286:	bf00      	nop
 8113288:	08115158 	.word	0x08115158
 811328c:	081151cc 	.word	0x081151cc
=======
081103f8 <_sbrk_r>:
 81103f8:	b538      	push	{r3, r4, r5, lr}
 81103fa:	4c06      	ldr	r4, [pc, #24]	; (8110414 <_sbrk_r+0x1c>)
 81103fc:	2300      	movs	r3, #0
 81103fe:	4605      	mov	r5, r0
 8110400:	4608      	mov	r0, r1
 8110402:	6023      	str	r3, [r4, #0]
 8110404:	f7f1 fd0c 	bl	8101e20 <_sbrk>
 8110408:	1c43      	adds	r3, r0, #1
 811040a:	d102      	bne.n	8110412 <_sbrk_r+0x1a>
 811040c:	6823      	ldr	r3, [r4, #0]
 811040e:	b103      	cbz	r3, 8110412 <_sbrk_r+0x1a>
 8110410:	602b      	str	r3, [r5, #0]
 8110412:	bd38      	pop	{r3, r4, r5, pc}
 8110414:	10009fd4 	.word	0x10009fd4
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08113290 <__hi0bits>:
 8113290:	0c03      	lsrs	r3, r0, #16
 8113292:	041b      	lsls	r3, r3, #16
 8113294:	b9d3      	cbnz	r3, 81132cc <__hi0bits+0x3c>
 8113296:	0400      	lsls	r0, r0, #16
 8113298:	2310      	movs	r3, #16
 811329a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 811329e:	bf04      	itt	eq
 81132a0:	0200      	lsleq	r0, r0, #8
 81132a2:	3308      	addeq	r3, #8
 81132a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 81132a8:	bf04      	itt	eq
 81132aa:	0100      	lsleq	r0, r0, #4
 81132ac:	3304      	addeq	r3, #4
 81132ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 81132b2:	bf04      	itt	eq
 81132b4:	0080      	lsleq	r0, r0, #2
 81132b6:	3302      	addeq	r3, #2
 81132b8:	2800      	cmp	r0, #0
 81132ba:	db05      	blt.n	81132c8 <__hi0bits+0x38>
 81132bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 81132c0:	f103 0301 	add.w	r3, r3, #1
 81132c4:	bf08      	it	eq
 81132c6:	2320      	moveq	r3, #32
 81132c8:	4618      	mov	r0, r3
 81132ca:	4770      	bx	lr
 81132cc:	2300      	movs	r3, #0
 81132ce:	e7e4      	b.n	811329a <__hi0bits+0xa>

081132d0 <__lo0bits>:
 81132d0:	6803      	ldr	r3, [r0, #0]
 81132d2:	f013 0207 	ands.w	r2, r3, #7
 81132d6:	4601      	mov	r1, r0
 81132d8:	d00b      	beq.n	81132f2 <__lo0bits+0x22>
 81132da:	07da      	lsls	r2, r3, #31
 81132dc:	d424      	bmi.n	8113328 <__lo0bits+0x58>
 81132de:	0798      	lsls	r0, r3, #30
 81132e0:	bf49      	itett	mi
 81132e2:	085b      	lsrmi	r3, r3, #1
 81132e4:	089b      	lsrpl	r3, r3, #2
 81132e6:	2001      	movmi	r0, #1
 81132e8:	600b      	strmi	r3, [r1, #0]
 81132ea:	bf5c      	itt	pl
 81132ec:	600b      	strpl	r3, [r1, #0]
 81132ee:	2002      	movpl	r0, #2
 81132f0:	4770      	bx	lr
 81132f2:	b298      	uxth	r0, r3
 81132f4:	b9b0      	cbnz	r0, 8113324 <__lo0bits+0x54>
 81132f6:	0c1b      	lsrs	r3, r3, #16
 81132f8:	2010      	movs	r0, #16
 81132fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 81132fe:	bf04      	itt	eq
 8113300:	0a1b      	lsreq	r3, r3, #8
 8113302:	3008      	addeq	r0, #8
 8113304:	071a      	lsls	r2, r3, #28
 8113306:	bf04      	itt	eq
 8113308:	091b      	lsreq	r3, r3, #4
 811330a:	3004      	addeq	r0, #4
 811330c:	079a      	lsls	r2, r3, #30
 811330e:	bf04      	itt	eq
 8113310:	089b      	lsreq	r3, r3, #2
 8113312:	3002      	addeq	r0, #2
 8113314:	07da      	lsls	r2, r3, #31
 8113316:	d403      	bmi.n	8113320 <__lo0bits+0x50>
 8113318:	085b      	lsrs	r3, r3, #1
 811331a:	f100 0001 	add.w	r0, r0, #1
 811331e:	d005      	beq.n	811332c <__lo0bits+0x5c>
 8113320:	600b      	str	r3, [r1, #0]
 8113322:	4770      	bx	lr
 8113324:	4610      	mov	r0, r2
 8113326:	e7e8      	b.n	81132fa <__lo0bits+0x2a>
 8113328:	2000      	movs	r0, #0
 811332a:	4770      	bx	lr
 811332c:	2020      	movs	r0, #32
 811332e:	4770      	bx	lr

08113330 <__i2b>:
 8113330:	b510      	push	{r4, lr}
 8113332:	460c      	mov	r4, r1
 8113334:	2101      	movs	r1, #1
 8113336:	f7ff feff 	bl	8113138 <_Balloc>
 811333a:	4602      	mov	r2, r0
 811333c:	b928      	cbnz	r0, 811334a <__i2b+0x1a>
 811333e:	4b05      	ldr	r3, [pc, #20]	; (8113354 <__i2b+0x24>)
 8113340:	4805      	ldr	r0, [pc, #20]	; (8113358 <__i2b+0x28>)
 8113342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8113346:	f000 fe4b 	bl	8113fe0 <__assert_func>
 811334a:	2301      	movs	r3, #1
 811334c:	6144      	str	r4, [r0, #20]
 811334e:	6103      	str	r3, [r0, #16]
 8113350:	bd10      	pop	{r4, pc}
 8113352:	bf00      	nop
 8113354:	08115158 	.word	0x08115158
 8113358:	081151cc 	.word	0x081151cc

0811335c <__multiply>:
 811335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113360:	4614      	mov	r4, r2
 8113362:	690a      	ldr	r2, [r1, #16]
 8113364:	6923      	ldr	r3, [r4, #16]
 8113366:	429a      	cmp	r2, r3
 8113368:	bfb8      	it	lt
 811336a:	460b      	movlt	r3, r1
 811336c:	460d      	mov	r5, r1
 811336e:	bfbc      	itt	lt
 8113370:	4625      	movlt	r5, r4
 8113372:	461c      	movlt	r4, r3
 8113374:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8113378:	f8d4 9010 	ldr.w	r9, [r4, #16]
 811337c:	68ab      	ldr	r3, [r5, #8]
 811337e:	6869      	ldr	r1, [r5, #4]
 8113380:	eb0a 0709 	add.w	r7, sl, r9
 8113384:	42bb      	cmp	r3, r7
 8113386:	b085      	sub	sp, #20
 8113388:	bfb8      	it	lt
 811338a:	3101      	addlt	r1, #1
 811338c:	f7ff fed4 	bl	8113138 <_Balloc>
 8113390:	b930      	cbnz	r0, 81133a0 <__multiply+0x44>
 8113392:	4602      	mov	r2, r0
 8113394:	4b42      	ldr	r3, [pc, #264]	; (81134a0 <__multiply+0x144>)
 8113396:	4843      	ldr	r0, [pc, #268]	; (81134a4 <__multiply+0x148>)
 8113398:	f240 115d 	movw	r1, #349	; 0x15d
 811339c:	f000 fe20 	bl	8113fe0 <__assert_func>
 81133a0:	f100 0614 	add.w	r6, r0, #20
 81133a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 81133a8:	4633      	mov	r3, r6
 81133aa:	2200      	movs	r2, #0
 81133ac:	4543      	cmp	r3, r8
 81133ae:	d31e      	bcc.n	81133ee <__multiply+0x92>
 81133b0:	f105 0c14 	add.w	ip, r5, #20
 81133b4:	f104 0314 	add.w	r3, r4, #20
 81133b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 81133bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 81133c0:	9202      	str	r2, [sp, #8]
 81133c2:	ebac 0205 	sub.w	r2, ip, r5
 81133c6:	3a15      	subs	r2, #21
 81133c8:	f022 0203 	bic.w	r2, r2, #3
 81133cc:	3204      	adds	r2, #4
 81133ce:	f105 0115 	add.w	r1, r5, #21
 81133d2:	458c      	cmp	ip, r1
 81133d4:	bf38      	it	cc
 81133d6:	2204      	movcc	r2, #4
 81133d8:	9201      	str	r2, [sp, #4]
 81133da:	9a02      	ldr	r2, [sp, #8]
 81133dc:	9303      	str	r3, [sp, #12]
 81133de:	429a      	cmp	r2, r3
 81133e0:	d808      	bhi.n	81133f4 <__multiply+0x98>
 81133e2:	2f00      	cmp	r7, #0
 81133e4:	dc55      	bgt.n	8113492 <__multiply+0x136>
 81133e6:	6107      	str	r7, [r0, #16]
 81133e8:	b005      	add	sp, #20
 81133ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81133ee:	f843 2b04 	str.w	r2, [r3], #4
 81133f2:	e7db      	b.n	81133ac <__multiply+0x50>
 81133f4:	f8b3 a000 	ldrh.w	sl, [r3]
 81133f8:	f1ba 0f00 	cmp.w	sl, #0
 81133fc:	d020      	beq.n	8113440 <__multiply+0xe4>
 81133fe:	f105 0e14 	add.w	lr, r5, #20
 8113402:	46b1      	mov	r9, r6
 8113404:	2200      	movs	r2, #0
 8113406:	f85e 4b04 	ldr.w	r4, [lr], #4
 811340a:	f8d9 b000 	ldr.w	fp, [r9]
 811340e:	b2a1      	uxth	r1, r4
 8113410:	fa1f fb8b 	uxth.w	fp, fp
 8113414:	fb0a b101 	mla	r1, sl, r1, fp
 8113418:	4411      	add	r1, r2
 811341a:	f8d9 2000 	ldr.w	r2, [r9]
 811341e:	0c24      	lsrs	r4, r4, #16
 8113420:	0c12      	lsrs	r2, r2, #16
 8113422:	fb0a 2404 	mla	r4, sl, r4, r2
 8113426:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 811342a:	b289      	uxth	r1, r1
 811342c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8113430:	45f4      	cmp	ip, lr
 8113432:	f849 1b04 	str.w	r1, [r9], #4
 8113436:	ea4f 4214 	mov.w	r2, r4, lsr #16
 811343a:	d8e4      	bhi.n	8113406 <__multiply+0xaa>
 811343c:	9901      	ldr	r1, [sp, #4]
 811343e:	5072      	str	r2, [r6, r1]
 8113440:	9a03      	ldr	r2, [sp, #12]
 8113442:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8113446:	3304      	adds	r3, #4
 8113448:	f1b9 0f00 	cmp.w	r9, #0
 811344c:	d01f      	beq.n	811348e <__multiply+0x132>
 811344e:	6834      	ldr	r4, [r6, #0]
 8113450:	f105 0114 	add.w	r1, r5, #20
 8113454:	46b6      	mov	lr, r6
 8113456:	f04f 0a00 	mov.w	sl, #0
 811345a:	880a      	ldrh	r2, [r1, #0]
 811345c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8113460:	fb09 b202 	mla	r2, r9, r2, fp
 8113464:	4492      	add	sl, r2
 8113466:	b2a4      	uxth	r4, r4
 8113468:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 811346c:	f84e 4b04 	str.w	r4, [lr], #4
 8113470:	f851 4b04 	ldr.w	r4, [r1], #4
 8113474:	f8be 2000 	ldrh.w	r2, [lr]
 8113478:	0c24      	lsrs	r4, r4, #16
 811347a:	fb09 2404 	mla	r4, r9, r4, r2
 811347e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8113482:	458c      	cmp	ip, r1
 8113484:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8113488:	d8e7      	bhi.n	811345a <__multiply+0xfe>
 811348a:	9a01      	ldr	r2, [sp, #4]
 811348c:	50b4      	str	r4, [r6, r2]
 811348e:	3604      	adds	r6, #4
 8113490:	e7a3      	b.n	81133da <__multiply+0x7e>
 8113492:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8113496:	2b00      	cmp	r3, #0
 8113498:	d1a5      	bne.n	81133e6 <__multiply+0x8a>
 811349a:	3f01      	subs	r7, #1
 811349c:	e7a1      	b.n	81133e2 <__multiply+0x86>
 811349e:	bf00      	nop
 81134a0:	08115158 	.word	0x08115158
 81134a4:	081151cc 	.word	0x081151cc

081134a8 <__pow5mult>:
 81134a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81134ac:	4615      	mov	r5, r2
 81134ae:	f012 0203 	ands.w	r2, r2, #3
 81134b2:	4606      	mov	r6, r0
 81134b4:	460f      	mov	r7, r1
 81134b6:	d007      	beq.n	81134c8 <__pow5mult+0x20>
 81134b8:	4c25      	ldr	r4, [pc, #148]	; (8113550 <__pow5mult+0xa8>)
 81134ba:	3a01      	subs	r2, #1
 81134bc:	2300      	movs	r3, #0
 81134be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81134c2:	f7ff fe9b 	bl	81131fc <__multadd>
 81134c6:	4607      	mov	r7, r0
 81134c8:	10ad      	asrs	r5, r5, #2
 81134ca:	d03d      	beq.n	8113548 <__pow5mult+0xa0>
 81134cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 81134ce:	b97c      	cbnz	r4, 81134f0 <__pow5mult+0x48>
 81134d0:	2010      	movs	r0, #16
 81134d2:	f7ff fe29 	bl	8113128 <malloc>
 81134d6:	4602      	mov	r2, r0
 81134d8:	6270      	str	r0, [r6, #36]	; 0x24
 81134da:	b928      	cbnz	r0, 81134e8 <__pow5mult+0x40>
 81134dc:	4b1d      	ldr	r3, [pc, #116]	; (8113554 <__pow5mult+0xac>)
 81134de:	481e      	ldr	r0, [pc, #120]	; (8113558 <__pow5mult+0xb0>)
 81134e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 81134e4:	f000 fd7c 	bl	8113fe0 <__assert_func>
 81134e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81134ec:	6004      	str	r4, [r0, #0]
 81134ee:	60c4      	str	r4, [r0, #12]
 81134f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 81134f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 81134f8:	b94c      	cbnz	r4, 811350e <__pow5mult+0x66>
 81134fa:	f240 2171 	movw	r1, #625	; 0x271
 81134fe:	4630      	mov	r0, r6
 8113500:	f7ff ff16 	bl	8113330 <__i2b>
 8113504:	2300      	movs	r3, #0
 8113506:	f8c8 0008 	str.w	r0, [r8, #8]
 811350a:	4604      	mov	r4, r0
 811350c:	6003      	str	r3, [r0, #0]
 811350e:	f04f 0900 	mov.w	r9, #0
 8113512:	07eb      	lsls	r3, r5, #31
 8113514:	d50a      	bpl.n	811352c <__pow5mult+0x84>
 8113516:	4639      	mov	r1, r7
 8113518:	4622      	mov	r2, r4
 811351a:	4630      	mov	r0, r6
 811351c:	f7ff ff1e 	bl	811335c <__multiply>
 8113520:	4639      	mov	r1, r7
 8113522:	4680      	mov	r8, r0
 8113524:	4630      	mov	r0, r6
 8113526:	f7ff fe47 	bl	81131b8 <_Bfree>
 811352a:	4647      	mov	r7, r8
 811352c:	106d      	asrs	r5, r5, #1
 811352e:	d00b      	beq.n	8113548 <__pow5mult+0xa0>
 8113530:	6820      	ldr	r0, [r4, #0]
 8113532:	b938      	cbnz	r0, 8113544 <__pow5mult+0x9c>
 8113534:	4622      	mov	r2, r4
 8113536:	4621      	mov	r1, r4
 8113538:	4630      	mov	r0, r6
 811353a:	f7ff ff0f 	bl	811335c <__multiply>
 811353e:	6020      	str	r0, [r4, #0]
 8113540:	f8c0 9000 	str.w	r9, [r0]
 8113544:	4604      	mov	r4, r0
 8113546:	e7e4      	b.n	8113512 <__pow5mult+0x6a>
 8113548:	4638      	mov	r0, r7
 811354a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811354e:	bf00      	nop
 8113550:	08115320 	.word	0x08115320
 8113554:	081150e2 	.word	0x081150e2
 8113558:	081151cc 	.word	0x081151cc

0811355c <__lshift>:
 811355c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8113560:	460c      	mov	r4, r1
 8113562:	6849      	ldr	r1, [r1, #4]
 8113564:	6923      	ldr	r3, [r4, #16]
 8113566:	eb03 1862 	add.w	r8, r3, r2, asr #5
 811356a:	68a3      	ldr	r3, [r4, #8]
 811356c:	4607      	mov	r7, r0
 811356e:	4691      	mov	r9, r2
 8113570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8113574:	f108 0601 	add.w	r6, r8, #1
 8113578:	42b3      	cmp	r3, r6
 811357a:	db0b      	blt.n	8113594 <__lshift+0x38>
 811357c:	4638      	mov	r0, r7
 811357e:	f7ff fddb 	bl	8113138 <_Balloc>
 8113582:	4605      	mov	r5, r0
 8113584:	b948      	cbnz	r0, 811359a <__lshift+0x3e>
 8113586:	4602      	mov	r2, r0
 8113588:	4b28      	ldr	r3, [pc, #160]	; (811362c <__lshift+0xd0>)
 811358a:	4829      	ldr	r0, [pc, #164]	; (8113630 <__lshift+0xd4>)
 811358c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8113590:	f000 fd26 	bl	8113fe0 <__assert_func>
 8113594:	3101      	adds	r1, #1
 8113596:	005b      	lsls	r3, r3, #1
 8113598:	e7ee      	b.n	8113578 <__lshift+0x1c>
 811359a:	2300      	movs	r3, #0
 811359c:	f100 0114 	add.w	r1, r0, #20
 81135a0:	f100 0210 	add.w	r2, r0, #16
 81135a4:	4618      	mov	r0, r3
 81135a6:	4553      	cmp	r3, sl
 81135a8:	db33      	blt.n	8113612 <__lshift+0xb6>
 81135aa:	6920      	ldr	r0, [r4, #16]
 81135ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 81135b0:	f104 0314 	add.w	r3, r4, #20
 81135b4:	f019 091f 	ands.w	r9, r9, #31
 81135b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81135bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 81135c0:	d02b      	beq.n	811361a <__lshift+0xbe>
 81135c2:	f1c9 0e20 	rsb	lr, r9, #32
 81135c6:	468a      	mov	sl, r1
 81135c8:	2200      	movs	r2, #0
 81135ca:	6818      	ldr	r0, [r3, #0]
 81135cc:	fa00 f009 	lsl.w	r0, r0, r9
 81135d0:	4302      	orrs	r2, r0
 81135d2:	f84a 2b04 	str.w	r2, [sl], #4
 81135d6:	f853 2b04 	ldr.w	r2, [r3], #4
 81135da:	459c      	cmp	ip, r3
 81135dc:	fa22 f20e 	lsr.w	r2, r2, lr
 81135e0:	d8f3      	bhi.n	81135ca <__lshift+0x6e>
 81135e2:	ebac 0304 	sub.w	r3, ip, r4
 81135e6:	3b15      	subs	r3, #21
 81135e8:	f023 0303 	bic.w	r3, r3, #3
 81135ec:	3304      	adds	r3, #4
 81135ee:	f104 0015 	add.w	r0, r4, #21
 81135f2:	4584      	cmp	ip, r0
 81135f4:	bf38      	it	cc
 81135f6:	2304      	movcc	r3, #4
 81135f8:	50ca      	str	r2, [r1, r3]
 81135fa:	b10a      	cbz	r2, 8113600 <__lshift+0xa4>
 81135fc:	f108 0602 	add.w	r6, r8, #2
 8113600:	3e01      	subs	r6, #1
 8113602:	4638      	mov	r0, r7
 8113604:	612e      	str	r6, [r5, #16]
 8113606:	4621      	mov	r1, r4
 8113608:	f7ff fdd6 	bl	81131b8 <_Bfree>
 811360c:	4628      	mov	r0, r5
 811360e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8113612:	f842 0f04 	str.w	r0, [r2, #4]!
 8113616:	3301      	adds	r3, #1
 8113618:	e7c5      	b.n	81135a6 <__lshift+0x4a>
 811361a:	3904      	subs	r1, #4
 811361c:	f853 2b04 	ldr.w	r2, [r3], #4
 8113620:	f841 2f04 	str.w	r2, [r1, #4]!
 8113624:	459c      	cmp	ip, r3
 8113626:	d8f9      	bhi.n	811361c <__lshift+0xc0>
 8113628:	e7ea      	b.n	8113600 <__lshift+0xa4>
 811362a:	bf00      	nop
 811362c:	08115158 	.word	0x08115158
 8113630:	081151cc 	.word	0x081151cc

08113634 <__mcmp>:
 8113634:	b530      	push	{r4, r5, lr}
 8113636:	6902      	ldr	r2, [r0, #16]
 8113638:	690c      	ldr	r4, [r1, #16]
 811363a:	1b12      	subs	r2, r2, r4
 811363c:	d10e      	bne.n	811365c <__mcmp+0x28>
 811363e:	f100 0314 	add.w	r3, r0, #20
 8113642:	3114      	adds	r1, #20
 8113644:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8113648:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 811364c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8113650:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8113654:	42a5      	cmp	r5, r4
 8113656:	d003      	beq.n	8113660 <__mcmp+0x2c>
 8113658:	d305      	bcc.n	8113666 <__mcmp+0x32>
 811365a:	2201      	movs	r2, #1
 811365c:	4610      	mov	r0, r2
 811365e:	bd30      	pop	{r4, r5, pc}
 8113660:	4283      	cmp	r3, r0
 8113662:	d3f3      	bcc.n	811364c <__mcmp+0x18>
 8113664:	e7fa      	b.n	811365c <__mcmp+0x28>
 8113666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 811366a:	e7f7      	b.n	811365c <__mcmp+0x28>

0811366c <__mdiff>:
 811366c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113670:	460c      	mov	r4, r1
 8113672:	4606      	mov	r6, r0
 8113674:	4611      	mov	r1, r2
 8113676:	4620      	mov	r0, r4
 8113678:	4617      	mov	r7, r2
 811367a:	f7ff ffdb 	bl	8113634 <__mcmp>
 811367e:	1e05      	subs	r5, r0, #0
 8113680:	d110      	bne.n	81136a4 <__mdiff+0x38>
 8113682:	4629      	mov	r1, r5
 8113684:	4630      	mov	r0, r6
 8113686:	f7ff fd57 	bl	8113138 <_Balloc>
 811368a:	b930      	cbnz	r0, 811369a <__mdiff+0x2e>
 811368c:	4b39      	ldr	r3, [pc, #228]	; (8113774 <__mdiff+0x108>)
 811368e:	4602      	mov	r2, r0
 8113690:	f240 2132 	movw	r1, #562	; 0x232
 8113694:	4838      	ldr	r0, [pc, #224]	; (8113778 <__mdiff+0x10c>)
 8113696:	f000 fca3 	bl	8113fe0 <__assert_func>
 811369a:	2301      	movs	r3, #1
 811369c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 81136a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81136a4:	bfa4      	itt	ge
 81136a6:	463b      	movge	r3, r7
 81136a8:	4627      	movge	r7, r4
 81136aa:	4630      	mov	r0, r6
 81136ac:	6879      	ldr	r1, [r7, #4]
 81136ae:	bfa6      	itte	ge
 81136b0:	461c      	movge	r4, r3
 81136b2:	2500      	movge	r5, #0
 81136b4:	2501      	movlt	r5, #1
 81136b6:	f7ff fd3f 	bl	8113138 <_Balloc>
 81136ba:	b920      	cbnz	r0, 81136c6 <__mdiff+0x5a>
 81136bc:	4b2d      	ldr	r3, [pc, #180]	; (8113774 <__mdiff+0x108>)
 81136be:	4602      	mov	r2, r0
 81136c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 81136c4:	e7e6      	b.n	8113694 <__mdiff+0x28>
 81136c6:	693e      	ldr	r6, [r7, #16]
 81136c8:	60c5      	str	r5, [r0, #12]
 81136ca:	6925      	ldr	r5, [r4, #16]
 81136cc:	f107 0114 	add.w	r1, r7, #20
 81136d0:	f104 0914 	add.w	r9, r4, #20
 81136d4:	f100 0e14 	add.w	lr, r0, #20
 81136d8:	f107 0210 	add.w	r2, r7, #16
 81136dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 81136e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 81136e4:	46f2      	mov	sl, lr
 81136e6:	2700      	movs	r7, #0
 81136e8:	f859 3b04 	ldr.w	r3, [r9], #4
 81136ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 81136f0:	fa1f f883 	uxth.w	r8, r3
 81136f4:	fa17 f78b 	uxtah	r7, r7, fp
 81136f8:	0c1b      	lsrs	r3, r3, #16
 81136fa:	eba7 0808 	sub.w	r8, r7, r8
 81136fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8113702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8113706:	fa1f f888 	uxth.w	r8, r8
 811370a:	141f      	asrs	r7, r3, #16
 811370c:	454d      	cmp	r5, r9
 811370e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8113712:	f84a 3b04 	str.w	r3, [sl], #4
 8113716:	d8e7      	bhi.n	81136e8 <__mdiff+0x7c>
 8113718:	1b2b      	subs	r3, r5, r4
 811371a:	3b15      	subs	r3, #21
 811371c:	f023 0303 	bic.w	r3, r3, #3
 8113720:	3304      	adds	r3, #4
 8113722:	3415      	adds	r4, #21
 8113724:	42a5      	cmp	r5, r4
 8113726:	bf38      	it	cc
 8113728:	2304      	movcc	r3, #4
 811372a:	4419      	add	r1, r3
 811372c:	4473      	add	r3, lr
 811372e:	469e      	mov	lr, r3
 8113730:	460d      	mov	r5, r1
 8113732:	4565      	cmp	r5, ip
 8113734:	d30e      	bcc.n	8113754 <__mdiff+0xe8>
 8113736:	f10c 0203 	add.w	r2, ip, #3
 811373a:	1a52      	subs	r2, r2, r1
 811373c:	f022 0203 	bic.w	r2, r2, #3
 8113740:	3903      	subs	r1, #3
 8113742:	458c      	cmp	ip, r1
 8113744:	bf38      	it	cc
 8113746:	2200      	movcc	r2, #0
 8113748:	441a      	add	r2, r3
 811374a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 811374e:	b17b      	cbz	r3, 8113770 <__mdiff+0x104>
 8113750:	6106      	str	r6, [r0, #16]
 8113752:	e7a5      	b.n	81136a0 <__mdiff+0x34>
 8113754:	f855 8b04 	ldr.w	r8, [r5], #4
 8113758:	fa17 f488 	uxtah	r4, r7, r8
 811375c:	1422      	asrs	r2, r4, #16
 811375e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8113762:	b2a4      	uxth	r4, r4
 8113764:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8113768:	f84e 4b04 	str.w	r4, [lr], #4
 811376c:	1417      	asrs	r7, r2, #16
 811376e:	e7e0      	b.n	8113732 <__mdiff+0xc6>
 8113770:	3e01      	subs	r6, #1
 8113772:	e7ea      	b.n	811374a <__mdiff+0xde>
 8113774:	08115158 	.word	0x08115158
 8113778:	081151cc 	.word	0x081151cc

0811377c <__d2b>:
 811377c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8113780:	4689      	mov	r9, r1
 8113782:	2101      	movs	r1, #1
 8113784:	ec57 6b10 	vmov	r6, r7, d0
 8113788:	4690      	mov	r8, r2
 811378a:	f7ff fcd5 	bl	8113138 <_Balloc>
 811378e:	4604      	mov	r4, r0
 8113790:	b930      	cbnz	r0, 81137a0 <__d2b+0x24>
 8113792:	4602      	mov	r2, r0
 8113794:	4b25      	ldr	r3, [pc, #148]	; (811382c <__d2b+0xb0>)
 8113796:	4826      	ldr	r0, [pc, #152]	; (8113830 <__d2b+0xb4>)
 8113798:	f240 310a 	movw	r1, #778	; 0x30a
 811379c:	f000 fc20 	bl	8113fe0 <__assert_func>
 81137a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 81137a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 81137a8:	bb35      	cbnz	r5, 81137f8 <__d2b+0x7c>
 81137aa:	2e00      	cmp	r6, #0
 81137ac:	9301      	str	r3, [sp, #4]
 81137ae:	d028      	beq.n	8113802 <__d2b+0x86>
 81137b0:	4668      	mov	r0, sp
 81137b2:	9600      	str	r6, [sp, #0]
 81137b4:	f7ff fd8c 	bl	81132d0 <__lo0bits>
 81137b8:	9900      	ldr	r1, [sp, #0]
 81137ba:	b300      	cbz	r0, 81137fe <__d2b+0x82>
 81137bc:	9a01      	ldr	r2, [sp, #4]
 81137be:	f1c0 0320 	rsb	r3, r0, #32
 81137c2:	fa02 f303 	lsl.w	r3, r2, r3
 81137c6:	430b      	orrs	r3, r1
 81137c8:	40c2      	lsrs	r2, r0
 81137ca:	6163      	str	r3, [r4, #20]
 81137cc:	9201      	str	r2, [sp, #4]
 81137ce:	9b01      	ldr	r3, [sp, #4]
 81137d0:	61a3      	str	r3, [r4, #24]
 81137d2:	2b00      	cmp	r3, #0
 81137d4:	bf14      	ite	ne
 81137d6:	2202      	movne	r2, #2
 81137d8:	2201      	moveq	r2, #1
 81137da:	6122      	str	r2, [r4, #16]
 81137dc:	b1d5      	cbz	r5, 8113814 <__d2b+0x98>
 81137de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 81137e2:	4405      	add	r5, r0
 81137e4:	f8c9 5000 	str.w	r5, [r9]
 81137e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 81137ec:	f8c8 0000 	str.w	r0, [r8]
 81137f0:	4620      	mov	r0, r4
 81137f2:	b003      	add	sp, #12
 81137f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81137f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81137fc:	e7d5      	b.n	81137aa <__d2b+0x2e>
 81137fe:	6161      	str	r1, [r4, #20]
 8113800:	e7e5      	b.n	81137ce <__d2b+0x52>
 8113802:	a801      	add	r0, sp, #4
 8113804:	f7ff fd64 	bl	81132d0 <__lo0bits>
 8113808:	9b01      	ldr	r3, [sp, #4]
 811380a:	6163      	str	r3, [r4, #20]
 811380c:	2201      	movs	r2, #1
 811380e:	6122      	str	r2, [r4, #16]
 8113810:	3020      	adds	r0, #32
 8113812:	e7e3      	b.n	81137dc <__d2b+0x60>
 8113814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8113818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 811381c:	f8c9 0000 	str.w	r0, [r9]
 8113820:	6918      	ldr	r0, [r3, #16]
 8113822:	f7ff fd35 	bl	8113290 <__hi0bits>
 8113826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 811382a:	e7df      	b.n	81137ec <__d2b+0x70>
 811382c:	08115158 	.word	0x08115158
 8113830:	081151cc 	.word	0x081151cc

08113834 <_calloc_r>:
 8113834:	b513      	push	{r0, r1, r4, lr}
 8113836:	434a      	muls	r2, r1
 8113838:	4611      	mov	r1, r2
 811383a:	9201      	str	r2, [sp, #4]
 811383c:	f000 f85a 	bl	81138f4 <_malloc_r>
 8113840:	4604      	mov	r4, r0
 8113842:	b118      	cbz	r0, 811384c <_calloc_r+0x18>
 8113844:	9a01      	ldr	r2, [sp, #4]
 8113846:	2100      	movs	r1, #0
 8113848:	f7fd fc9c 	bl	8111184 <memset>
 811384c:	4620      	mov	r0, r4
 811384e:	b002      	add	sp, #8
 8113850:	bd10      	pop	{r4, pc}
	...
=======
08110418 <__ascii_wctomb>:
 8110418:	b149      	cbz	r1, 811042e <__ascii_wctomb+0x16>
 811041a:	2aff      	cmp	r2, #255	; 0xff
 811041c:	bf85      	ittet	hi
 811041e:	238a      	movhi	r3, #138	; 0x8a
 8110420:	6003      	strhi	r3, [r0, #0]
 8110422:	700a      	strbls	r2, [r1, #0]
 8110424:	f04f 30ff 	movhi.w	r0, #4294967295
 8110428:	bf98      	it	ls
 811042a:	2001      	movls	r0, #1
 811042c:	4770      	bx	lr
 811042e:	4608      	mov	r0, r1
 8110430:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
08113854 <_free_r>:
 8113854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8113856:	2900      	cmp	r1, #0
 8113858:	d048      	beq.n	81138ec <_free_r+0x98>
 811385a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811385e:	9001      	str	r0, [sp, #4]
 8113860:	2b00      	cmp	r3, #0
 8113862:	f1a1 0404 	sub.w	r4, r1, #4
 8113866:	bfb8      	it	lt
 8113868:	18e4      	addlt	r4, r4, r3
 811386a:	f000 fc59 	bl	8114120 <__malloc_lock>
 811386e:	4a20      	ldr	r2, [pc, #128]	; (81138f0 <_free_r+0x9c>)
 8113870:	9801      	ldr	r0, [sp, #4]
 8113872:	6813      	ldr	r3, [r2, #0]
 8113874:	4615      	mov	r5, r2
 8113876:	b933      	cbnz	r3, 8113886 <_free_r+0x32>
 8113878:	6063      	str	r3, [r4, #4]
 811387a:	6014      	str	r4, [r2, #0]
 811387c:	b003      	add	sp, #12
 811387e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8113882:	f000 bc53 	b.w	811412c <__malloc_unlock>
 8113886:	42a3      	cmp	r3, r4
 8113888:	d90b      	bls.n	81138a2 <_free_r+0x4e>
 811388a:	6821      	ldr	r1, [r4, #0]
 811388c:	1862      	adds	r2, r4, r1
 811388e:	4293      	cmp	r3, r2
 8113890:	bf04      	itt	eq
 8113892:	681a      	ldreq	r2, [r3, #0]
 8113894:	685b      	ldreq	r3, [r3, #4]
 8113896:	6063      	str	r3, [r4, #4]
 8113898:	bf04      	itt	eq
 811389a:	1852      	addeq	r2, r2, r1
 811389c:	6022      	streq	r2, [r4, #0]
 811389e:	602c      	str	r4, [r5, #0]
 81138a0:	e7ec      	b.n	811387c <_free_r+0x28>
 81138a2:	461a      	mov	r2, r3
 81138a4:	685b      	ldr	r3, [r3, #4]
 81138a6:	b10b      	cbz	r3, 81138ac <_free_r+0x58>
 81138a8:	42a3      	cmp	r3, r4
 81138aa:	d9fa      	bls.n	81138a2 <_free_r+0x4e>
 81138ac:	6811      	ldr	r1, [r2, #0]
 81138ae:	1855      	adds	r5, r2, r1
 81138b0:	42a5      	cmp	r5, r4
 81138b2:	d10b      	bne.n	81138cc <_free_r+0x78>
 81138b4:	6824      	ldr	r4, [r4, #0]
 81138b6:	4421      	add	r1, r4
 81138b8:	1854      	adds	r4, r2, r1
 81138ba:	42a3      	cmp	r3, r4
 81138bc:	6011      	str	r1, [r2, #0]
 81138be:	d1dd      	bne.n	811387c <_free_r+0x28>
 81138c0:	681c      	ldr	r4, [r3, #0]
 81138c2:	685b      	ldr	r3, [r3, #4]
 81138c4:	6053      	str	r3, [r2, #4]
 81138c6:	4421      	add	r1, r4
 81138c8:	6011      	str	r1, [r2, #0]
 81138ca:	e7d7      	b.n	811387c <_free_r+0x28>
 81138cc:	d902      	bls.n	81138d4 <_free_r+0x80>
 81138ce:	230c      	movs	r3, #12
 81138d0:	6003      	str	r3, [r0, #0]
 81138d2:	e7d3      	b.n	811387c <_free_r+0x28>
 81138d4:	6825      	ldr	r5, [r4, #0]
 81138d6:	1961      	adds	r1, r4, r5
 81138d8:	428b      	cmp	r3, r1
 81138da:	bf04      	itt	eq
 81138dc:	6819      	ldreq	r1, [r3, #0]
 81138de:	685b      	ldreq	r3, [r3, #4]
 81138e0:	6063      	str	r3, [r4, #4]
 81138e2:	bf04      	itt	eq
 81138e4:	1949      	addeq	r1, r1, r5
 81138e6:	6021      	streq	r1, [r4, #0]
 81138e8:	6054      	str	r4, [r2, #4]
 81138ea:	e7c7      	b.n	811387c <_free_r+0x28>
 81138ec:	b003      	add	sp, #12
 81138ee:	bd30      	pop	{r4, r5, pc}
 81138f0:	10045ca4 	.word	0x10045ca4
=======
08110432 <memmove>:
 8110432:	4288      	cmp	r0, r1
 8110434:	b510      	push	{r4, lr}
 8110436:	eb01 0302 	add.w	r3, r1, r2
 811043a:	d807      	bhi.n	811044c <memmove+0x1a>
 811043c:	1e42      	subs	r2, r0, #1
 811043e:	4299      	cmp	r1, r3
 8110440:	d00a      	beq.n	8110458 <memmove+0x26>
 8110442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8110446:	f802 4f01 	strb.w	r4, [r2, #1]!
 811044a:	e7f8      	b.n	811043e <memmove+0xc>
 811044c:	4283      	cmp	r3, r0
 811044e:	d9f5      	bls.n	811043c <memmove+0xa>
 8110450:	1881      	adds	r1, r0, r2
 8110452:	1ad2      	subs	r2, r2, r3
 8110454:	42d3      	cmn	r3, r2
 8110456:	d100      	bne.n	811045a <memmove+0x28>
 8110458:	bd10      	pop	{r4, pc}
 811045a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811045e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8110462:	e7f7      	b.n	8110454 <memmove+0x22>
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081138f4 <_malloc_r>:
 81138f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81138f6:	1ccd      	adds	r5, r1, #3
 81138f8:	f025 0503 	bic.w	r5, r5, #3
 81138fc:	3508      	adds	r5, #8
 81138fe:	2d0c      	cmp	r5, #12
 8113900:	bf38      	it	cc
 8113902:	250c      	movcc	r5, #12
 8113904:	2d00      	cmp	r5, #0
 8113906:	4606      	mov	r6, r0
 8113908:	db01      	blt.n	811390e <_malloc_r+0x1a>
 811390a:	42a9      	cmp	r1, r5
 811390c:	d903      	bls.n	8113916 <_malloc_r+0x22>
 811390e:	230c      	movs	r3, #12
 8113910:	6033      	str	r3, [r6, #0]
 8113912:	2000      	movs	r0, #0
 8113914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8113916:	f000 fc03 	bl	8114120 <__malloc_lock>
 811391a:	4921      	ldr	r1, [pc, #132]	; (81139a0 <_malloc_r+0xac>)
 811391c:	680a      	ldr	r2, [r1, #0]
 811391e:	4614      	mov	r4, r2
 8113920:	b99c      	cbnz	r4, 811394a <_malloc_r+0x56>
 8113922:	4f20      	ldr	r7, [pc, #128]	; (81139a4 <_malloc_r+0xb0>)
 8113924:	683b      	ldr	r3, [r7, #0]
 8113926:	b923      	cbnz	r3, 8113932 <_malloc_r+0x3e>
 8113928:	4621      	mov	r1, r4
 811392a:	4630      	mov	r0, r6
 811392c:	f000 faf2 	bl	8113f14 <_sbrk_r>
 8113930:	6038      	str	r0, [r7, #0]
 8113932:	4629      	mov	r1, r5
 8113934:	4630      	mov	r0, r6
 8113936:	f000 faed 	bl	8113f14 <_sbrk_r>
 811393a:	1c43      	adds	r3, r0, #1
 811393c:	d123      	bne.n	8113986 <_malloc_r+0x92>
 811393e:	230c      	movs	r3, #12
 8113940:	6033      	str	r3, [r6, #0]
 8113942:	4630      	mov	r0, r6
 8113944:	f000 fbf2 	bl	811412c <__malloc_unlock>
 8113948:	e7e3      	b.n	8113912 <_malloc_r+0x1e>
 811394a:	6823      	ldr	r3, [r4, #0]
 811394c:	1b5b      	subs	r3, r3, r5
 811394e:	d417      	bmi.n	8113980 <_malloc_r+0x8c>
 8113950:	2b0b      	cmp	r3, #11
 8113952:	d903      	bls.n	811395c <_malloc_r+0x68>
 8113954:	6023      	str	r3, [r4, #0]
 8113956:	441c      	add	r4, r3
 8113958:	6025      	str	r5, [r4, #0]
 811395a:	e004      	b.n	8113966 <_malloc_r+0x72>
 811395c:	6863      	ldr	r3, [r4, #4]
 811395e:	42a2      	cmp	r2, r4
 8113960:	bf0c      	ite	eq
 8113962:	600b      	streq	r3, [r1, #0]
 8113964:	6053      	strne	r3, [r2, #4]
 8113966:	4630      	mov	r0, r6
 8113968:	f000 fbe0 	bl	811412c <__malloc_unlock>
 811396c:	f104 000b 	add.w	r0, r4, #11
 8113970:	1d23      	adds	r3, r4, #4
 8113972:	f020 0007 	bic.w	r0, r0, #7
 8113976:	1ac2      	subs	r2, r0, r3
 8113978:	d0cc      	beq.n	8113914 <_malloc_r+0x20>
 811397a:	1a1b      	subs	r3, r3, r0
 811397c:	50a3      	str	r3, [r4, r2]
 811397e:	e7c9      	b.n	8113914 <_malloc_r+0x20>
 8113980:	4622      	mov	r2, r4
 8113982:	6864      	ldr	r4, [r4, #4]
 8113984:	e7cc      	b.n	8113920 <_malloc_r+0x2c>
 8113986:	1cc4      	adds	r4, r0, #3
 8113988:	f024 0403 	bic.w	r4, r4, #3
 811398c:	42a0      	cmp	r0, r4
 811398e:	d0e3      	beq.n	8113958 <_malloc_r+0x64>
 8113990:	1a21      	subs	r1, r4, r0
 8113992:	4630      	mov	r0, r6
 8113994:	f000 fabe 	bl	8113f14 <_sbrk_r>
 8113998:	3001      	adds	r0, #1
 811399a:	d1dd      	bne.n	8113958 <_malloc_r+0x64>
 811399c:	e7cf      	b.n	811393e <_malloc_r+0x4a>
 811399e:	bf00      	nop
 81139a0:	10045ca4 	.word	0x10045ca4
 81139a4:	10045ca8 	.word	0x10045ca8
=======
08110464 <__malloc_lock>:
 8110464:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics

<<<<<<< HEAD
081139a8 <__ssputs_r>:
 81139a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81139ac:	688e      	ldr	r6, [r1, #8]
 81139ae:	429e      	cmp	r6, r3
 81139b0:	4682      	mov	sl, r0
 81139b2:	460c      	mov	r4, r1
 81139b4:	4690      	mov	r8, r2
 81139b6:	461f      	mov	r7, r3
 81139b8:	d838      	bhi.n	8113a2c <__ssputs_r+0x84>
 81139ba:	898a      	ldrh	r2, [r1, #12]
 81139bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 81139c0:	d032      	beq.n	8113a28 <__ssputs_r+0x80>
 81139c2:	6825      	ldr	r5, [r4, #0]
 81139c4:	6909      	ldr	r1, [r1, #16]
 81139c6:	eba5 0901 	sub.w	r9, r5, r1
 81139ca:	6965      	ldr	r5, [r4, #20]
 81139cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81139d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81139d4:	3301      	adds	r3, #1
 81139d6:	444b      	add	r3, r9
 81139d8:	106d      	asrs	r5, r5, #1
 81139da:	429d      	cmp	r5, r3
 81139dc:	bf38      	it	cc
 81139de:	461d      	movcc	r5, r3
 81139e0:	0553      	lsls	r3, r2, #21
 81139e2:	d531      	bpl.n	8113a48 <__ssputs_r+0xa0>
 81139e4:	4629      	mov	r1, r5
 81139e6:	f7ff ff85 	bl	81138f4 <_malloc_r>
 81139ea:	4606      	mov	r6, r0
 81139ec:	b950      	cbnz	r0, 8113a04 <__ssputs_r+0x5c>
 81139ee:	230c      	movs	r3, #12
 81139f0:	f8ca 3000 	str.w	r3, [sl]
 81139f4:	89a3      	ldrh	r3, [r4, #12]
 81139f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81139fa:	81a3      	strh	r3, [r4, #12]
 81139fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8113a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8113a04:	6921      	ldr	r1, [r4, #16]
 8113a06:	464a      	mov	r2, r9
 8113a08:	f7fd fbae 	bl	8111168 <memcpy>
 8113a0c:	89a3      	ldrh	r3, [r4, #12]
 8113a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8113a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8113a16:	81a3      	strh	r3, [r4, #12]
 8113a18:	6126      	str	r6, [r4, #16]
 8113a1a:	6165      	str	r5, [r4, #20]
 8113a1c:	444e      	add	r6, r9
 8113a1e:	eba5 0509 	sub.w	r5, r5, r9
 8113a22:	6026      	str	r6, [r4, #0]
 8113a24:	60a5      	str	r5, [r4, #8]
 8113a26:	463e      	mov	r6, r7
 8113a28:	42be      	cmp	r6, r7
 8113a2a:	d900      	bls.n	8113a2e <__ssputs_r+0x86>
 8113a2c:	463e      	mov	r6, r7
 8113a2e:	4632      	mov	r2, r6
 8113a30:	6820      	ldr	r0, [r4, #0]
 8113a32:	4641      	mov	r1, r8
 8113a34:	f000 fb5a 	bl	81140ec <memmove>
 8113a38:	68a3      	ldr	r3, [r4, #8]
 8113a3a:	6822      	ldr	r2, [r4, #0]
 8113a3c:	1b9b      	subs	r3, r3, r6
 8113a3e:	4432      	add	r2, r6
 8113a40:	60a3      	str	r3, [r4, #8]
 8113a42:	6022      	str	r2, [r4, #0]
 8113a44:	2000      	movs	r0, #0
 8113a46:	e7db      	b.n	8113a00 <__ssputs_r+0x58>
 8113a48:	462a      	mov	r2, r5
 8113a4a:	f000 fb75 	bl	8114138 <_realloc_r>
 8113a4e:	4606      	mov	r6, r0
 8113a50:	2800      	cmp	r0, #0
 8113a52:	d1e1      	bne.n	8113a18 <__ssputs_r+0x70>
 8113a54:	6921      	ldr	r1, [r4, #16]
 8113a56:	4650      	mov	r0, sl
 8113a58:	f7ff fefc 	bl	8113854 <_free_r>
 8113a5c:	e7c7      	b.n	81139ee <__ssputs_r+0x46>
	...

08113a60 <_svfiprintf_r>:
 8113a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113a64:	4698      	mov	r8, r3
 8113a66:	898b      	ldrh	r3, [r1, #12]
 8113a68:	061b      	lsls	r3, r3, #24
 8113a6a:	b09d      	sub	sp, #116	; 0x74
 8113a6c:	4607      	mov	r7, r0
 8113a6e:	460d      	mov	r5, r1
 8113a70:	4614      	mov	r4, r2
 8113a72:	d50e      	bpl.n	8113a92 <_svfiprintf_r+0x32>
 8113a74:	690b      	ldr	r3, [r1, #16]
 8113a76:	b963      	cbnz	r3, 8113a92 <_svfiprintf_r+0x32>
 8113a78:	2140      	movs	r1, #64	; 0x40
 8113a7a:	f7ff ff3b 	bl	81138f4 <_malloc_r>
 8113a7e:	6028      	str	r0, [r5, #0]
 8113a80:	6128      	str	r0, [r5, #16]
 8113a82:	b920      	cbnz	r0, 8113a8e <_svfiprintf_r+0x2e>
 8113a84:	230c      	movs	r3, #12
 8113a86:	603b      	str	r3, [r7, #0]
 8113a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8113a8c:	e0d1      	b.n	8113c32 <_svfiprintf_r+0x1d2>
 8113a8e:	2340      	movs	r3, #64	; 0x40
 8113a90:	616b      	str	r3, [r5, #20]
 8113a92:	2300      	movs	r3, #0
 8113a94:	9309      	str	r3, [sp, #36]	; 0x24
 8113a96:	2320      	movs	r3, #32
 8113a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8113a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8113aa0:	2330      	movs	r3, #48	; 0x30
 8113aa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8113c4c <_svfiprintf_r+0x1ec>
 8113aa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8113aaa:	f04f 0901 	mov.w	r9, #1
 8113aae:	4623      	mov	r3, r4
 8113ab0:	469a      	mov	sl, r3
 8113ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8113ab6:	b10a      	cbz	r2, 8113abc <_svfiprintf_r+0x5c>
 8113ab8:	2a25      	cmp	r2, #37	; 0x25
 8113aba:	d1f9      	bne.n	8113ab0 <_svfiprintf_r+0x50>
 8113abc:	ebba 0b04 	subs.w	fp, sl, r4
 8113ac0:	d00b      	beq.n	8113ada <_svfiprintf_r+0x7a>
 8113ac2:	465b      	mov	r3, fp
 8113ac4:	4622      	mov	r2, r4
 8113ac6:	4629      	mov	r1, r5
 8113ac8:	4638      	mov	r0, r7
 8113aca:	f7ff ff6d 	bl	81139a8 <__ssputs_r>
 8113ace:	3001      	adds	r0, #1
 8113ad0:	f000 80aa 	beq.w	8113c28 <_svfiprintf_r+0x1c8>
 8113ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8113ad6:	445a      	add	r2, fp
 8113ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8113ada:	f89a 3000 	ldrb.w	r3, [sl]
 8113ade:	2b00      	cmp	r3, #0
 8113ae0:	f000 80a2 	beq.w	8113c28 <_svfiprintf_r+0x1c8>
 8113ae4:	2300      	movs	r3, #0
 8113ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8113aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8113aee:	f10a 0a01 	add.w	sl, sl, #1
 8113af2:	9304      	str	r3, [sp, #16]
 8113af4:	9307      	str	r3, [sp, #28]
 8113af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8113afa:	931a      	str	r3, [sp, #104]	; 0x68
 8113afc:	4654      	mov	r4, sl
 8113afe:	2205      	movs	r2, #5
 8113b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8113b04:	4851      	ldr	r0, [pc, #324]	; (8113c4c <_svfiprintf_r+0x1ec>)
 8113b06:	f7ec fc03 	bl	8100310 <memchr>
 8113b0a:	9a04      	ldr	r2, [sp, #16]
 8113b0c:	b9d8      	cbnz	r0, 8113b46 <_svfiprintf_r+0xe6>
 8113b0e:	06d0      	lsls	r0, r2, #27
 8113b10:	bf44      	itt	mi
 8113b12:	2320      	movmi	r3, #32
 8113b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8113b18:	0711      	lsls	r1, r2, #28
 8113b1a:	bf44      	itt	mi
 8113b1c:	232b      	movmi	r3, #43	; 0x2b
 8113b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8113b22:	f89a 3000 	ldrb.w	r3, [sl]
 8113b26:	2b2a      	cmp	r3, #42	; 0x2a
 8113b28:	d015      	beq.n	8113b56 <_svfiprintf_r+0xf6>
 8113b2a:	9a07      	ldr	r2, [sp, #28]
 8113b2c:	4654      	mov	r4, sl
 8113b2e:	2000      	movs	r0, #0
 8113b30:	f04f 0c0a 	mov.w	ip, #10
 8113b34:	4621      	mov	r1, r4
 8113b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8113b3a:	3b30      	subs	r3, #48	; 0x30
 8113b3c:	2b09      	cmp	r3, #9
 8113b3e:	d94e      	bls.n	8113bde <_svfiprintf_r+0x17e>
 8113b40:	b1b0      	cbz	r0, 8113b70 <_svfiprintf_r+0x110>
 8113b42:	9207      	str	r2, [sp, #28]
 8113b44:	e014      	b.n	8113b70 <_svfiprintf_r+0x110>
 8113b46:	eba0 0308 	sub.w	r3, r0, r8
 8113b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8113b4e:	4313      	orrs	r3, r2
 8113b50:	9304      	str	r3, [sp, #16]
 8113b52:	46a2      	mov	sl, r4
 8113b54:	e7d2      	b.n	8113afc <_svfiprintf_r+0x9c>
 8113b56:	9b03      	ldr	r3, [sp, #12]
 8113b58:	1d19      	adds	r1, r3, #4
 8113b5a:	681b      	ldr	r3, [r3, #0]
 8113b5c:	9103      	str	r1, [sp, #12]
 8113b5e:	2b00      	cmp	r3, #0
 8113b60:	bfbb      	ittet	lt
 8113b62:	425b      	neglt	r3, r3
 8113b64:	f042 0202 	orrlt.w	r2, r2, #2
 8113b68:	9307      	strge	r3, [sp, #28]
 8113b6a:	9307      	strlt	r3, [sp, #28]
 8113b6c:	bfb8      	it	lt
 8113b6e:	9204      	strlt	r2, [sp, #16]
 8113b70:	7823      	ldrb	r3, [r4, #0]
 8113b72:	2b2e      	cmp	r3, #46	; 0x2e
 8113b74:	d10c      	bne.n	8113b90 <_svfiprintf_r+0x130>
 8113b76:	7863      	ldrb	r3, [r4, #1]
 8113b78:	2b2a      	cmp	r3, #42	; 0x2a
 8113b7a:	d135      	bne.n	8113be8 <_svfiprintf_r+0x188>
 8113b7c:	9b03      	ldr	r3, [sp, #12]
 8113b7e:	1d1a      	adds	r2, r3, #4
 8113b80:	681b      	ldr	r3, [r3, #0]
 8113b82:	9203      	str	r2, [sp, #12]
 8113b84:	2b00      	cmp	r3, #0
 8113b86:	bfb8      	it	lt
 8113b88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8113b8c:	3402      	adds	r4, #2
 8113b8e:	9305      	str	r3, [sp, #20]
 8113b90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8113c5c <_svfiprintf_r+0x1fc>
 8113b94:	7821      	ldrb	r1, [r4, #0]
 8113b96:	2203      	movs	r2, #3
 8113b98:	4650      	mov	r0, sl
 8113b9a:	f7ec fbb9 	bl	8100310 <memchr>
 8113b9e:	b140      	cbz	r0, 8113bb2 <_svfiprintf_r+0x152>
 8113ba0:	2340      	movs	r3, #64	; 0x40
 8113ba2:	eba0 000a 	sub.w	r0, r0, sl
 8113ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8113baa:	9b04      	ldr	r3, [sp, #16]
 8113bac:	4303      	orrs	r3, r0
 8113bae:	3401      	adds	r4, #1
 8113bb0:	9304      	str	r3, [sp, #16]
 8113bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8113bb6:	4826      	ldr	r0, [pc, #152]	; (8113c50 <_svfiprintf_r+0x1f0>)
 8113bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8113bbc:	2206      	movs	r2, #6
 8113bbe:	f7ec fba7 	bl	8100310 <memchr>
 8113bc2:	2800      	cmp	r0, #0
 8113bc4:	d038      	beq.n	8113c38 <_svfiprintf_r+0x1d8>
 8113bc6:	4b23      	ldr	r3, [pc, #140]	; (8113c54 <_svfiprintf_r+0x1f4>)
 8113bc8:	bb1b      	cbnz	r3, 8113c12 <_svfiprintf_r+0x1b2>
 8113bca:	9b03      	ldr	r3, [sp, #12]
 8113bcc:	3307      	adds	r3, #7
 8113bce:	f023 0307 	bic.w	r3, r3, #7
 8113bd2:	3308      	adds	r3, #8
 8113bd4:	9303      	str	r3, [sp, #12]
 8113bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8113bd8:	4433      	add	r3, r6
 8113bda:	9309      	str	r3, [sp, #36]	; 0x24
 8113bdc:	e767      	b.n	8113aae <_svfiprintf_r+0x4e>
 8113bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8113be2:	460c      	mov	r4, r1
 8113be4:	2001      	movs	r0, #1
 8113be6:	e7a5      	b.n	8113b34 <_svfiprintf_r+0xd4>
 8113be8:	2300      	movs	r3, #0
 8113bea:	3401      	adds	r4, #1
 8113bec:	9305      	str	r3, [sp, #20]
 8113bee:	4619      	mov	r1, r3
 8113bf0:	f04f 0c0a 	mov.w	ip, #10
 8113bf4:	4620      	mov	r0, r4
 8113bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8113bfa:	3a30      	subs	r2, #48	; 0x30
 8113bfc:	2a09      	cmp	r2, #9
 8113bfe:	d903      	bls.n	8113c08 <_svfiprintf_r+0x1a8>
 8113c00:	2b00      	cmp	r3, #0
 8113c02:	d0c5      	beq.n	8113b90 <_svfiprintf_r+0x130>
 8113c04:	9105      	str	r1, [sp, #20]
 8113c06:	e7c3      	b.n	8113b90 <_svfiprintf_r+0x130>
 8113c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8113c0c:	4604      	mov	r4, r0
 8113c0e:	2301      	movs	r3, #1
 8113c10:	e7f0      	b.n	8113bf4 <_svfiprintf_r+0x194>
 8113c12:	ab03      	add	r3, sp, #12
 8113c14:	9300      	str	r3, [sp, #0]
 8113c16:	462a      	mov	r2, r5
 8113c18:	4b0f      	ldr	r3, [pc, #60]	; (8113c58 <_svfiprintf_r+0x1f8>)
 8113c1a:	a904      	add	r1, sp, #16
 8113c1c:	4638      	mov	r0, r7
 8113c1e:	f7fd fb59 	bl	81112d4 <_printf_float>
 8113c22:	1c42      	adds	r2, r0, #1
 8113c24:	4606      	mov	r6, r0
 8113c26:	d1d6      	bne.n	8113bd6 <_svfiprintf_r+0x176>
 8113c28:	89ab      	ldrh	r3, [r5, #12]
 8113c2a:	065b      	lsls	r3, r3, #25
 8113c2c:	f53f af2c 	bmi.w	8113a88 <_svfiprintf_r+0x28>
 8113c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8113c32:	b01d      	add	sp, #116	; 0x74
 8113c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113c38:	ab03      	add	r3, sp, #12
 8113c3a:	9300      	str	r3, [sp, #0]
 8113c3c:	462a      	mov	r2, r5
 8113c3e:	4b06      	ldr	r3, [pc, #24]	; (8113c58 <_svfiprintf_r+0x1f8>)
 8113c40:	a904      	add	r1, sp, #16
 8113c42:	4638      	mov	r0, r7
 8113c44:	f7fd fdea 	bl	811181c <_printf_i>
 8113c48:	e7eb      	b.n	8113c22 <_svfiprintf_r+0x1c2>
 8113c4a:	bf00      	nop
 8113c4c:	0811532c 	.word	0x0811532c
 8113c50:	08115336 	.word	0x08115336
 8113c54:	081112d5 	.word	0x081112d5
 8113c58:	081139a9 	.word	0x081139a9
 8113c5c:	08115332 	.word	0x08115332

08113c60 <__sfputc_r>:
 8113c60:	6893      	ldr	r3, [r2, #8]
 8113c62:	3b01      	subs	r3, #1
 8113c64:	2b00      	cmp	r3, #0
 8113c66:	b410      	push	{r4}
 8113c68:	6093      	str	r3, [r2, #8]
 8113c6a:	da08      	bge.n	8113c7e <__sfputc_r+0x1e>
 8113c6c:	6994      	ldr	r4, [r2, #24]
 8113c6e:	42a3      	cmp	r3, r4
 8113c70:	db01      	blt.n	8113c76 <__sfputc_r+0x16>
 8113c72:	290a      	cmp	r1, #10
 8113c74:	d103      	bne.n	8113c7e <__sfputc_r+0x1e>
 8113c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8113c7a:	f7fe b895 	b.w	8111da8 <__swbuf_r>
 8113c7e:	6813      	ldr	r3, [r2, #0]
 8113c80:	1c58      	adds	r0, r3, #1
 8113c82:	6010      	str	r0, [r2, #0]
 8113c84:	7019      	strb	r1, [r3, #0]
 8113c86:	4608      	mov	r0, r1
 8113c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8113c8c:	4770      	bx	lr

08113c8e <__sfputs_r>:
 8113c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8113c90:	4606      	mov	r6, r0
 8113c92:	460f      	mov	r7, r1
 8113c94:	4614      	mov	r4, r2
 8113c96:	18d5      	adds	r5, r2, r3
 8113c98:	42ac      	cmp	r4, r5
 8113c9a:	d101      	bne.n	8113ca0 <__sfputs_r+0x12>
 8113c9c:	2000      	movs	r0, #0
 8113c9e:	e007      	b.n	8113cb0 <__sfputs_r+0x22>
 8113ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8113ca4:	463a      	mov	r2, r7
 8113ca6:	4630      	mov	r0, r6
 8113ca8:	f7ff ffda 	bl	8113c60 <__sfputc_r>
 8113cac:	1c43      	adds	r3, r0, #1
 8113cae:	d1f3      	bne.n	8113c98 <__sfputs_r+0xa>
 8113cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08113cb4 <_vfiprintf_r>:
 8113cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113cb8:	460d      	mov	r5, r1
 8113cba:	b09d      	sub	sp, #116	; 0x74
 8113cbc:	4614      	mov	r4, r2
 8113cbe:	4698      	mov	r8, r3
 8113cc0:	4606      	mov	r6, r0
 8113cc2:	b118      	cbz	r0, 8113ccc <_vfiprintf_r+0x18>
 8113cc4:	6983      	ldr	r3, [r0, #24]
 8113cc6:	b90b      	cbnz	r3, 8113ccc <_vfiprintf_r+0x18>
 8113cc8:	f7ff f924 	bl	8112f14 <__sinit>
 8113ccc:	4b89      	ldr	r3, [pc, #548]	; (8113ef4 <_vfiprintf_r+0x240>)
 8113cce:	429d      	cmp	r5, r3
 8113cd0:	d11b      	bne.n	8113d0a <_vfiprintf_r+0x56>
 8113cd2:	6875      	ldr	r5, [r6, #4]
 8113cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8113cd6:	07d9      	lsls	r1, r3, #31
 8113cd8:	d405      	bmi.n	8113ce6 <_vfiprintf_r+0x32>
 8113cda:	89ab      	ldrh	r3, [r5, #12]
 8113cdc:	059a      	lsls	r2, r3, #22
 8113cde:	d402      	bmi.n	8113ce6 <_vfiprintf_r+0x32>
 8113ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8113ce2:	f7ff f9ba 	bl	811305a <__retarget_lock_acquire_recursive>
 8113ce6:	89ab      	ldrh	r3, [r5, #12]
 8113ce8:	071b      	lsls	r3, r3, #28
 8113cea:	d501      	bpl.n	8113cf0 <_vfiprintf_r+0x3c>
 8113cec:	692b      	ldr	r3, [r5, #16]
 8113cee:	b9eb      	cbnz	r3, 8113d2c <_vfiprintf_r+0x78>
 8113cf0:	4629      	mov	r1, r5
 8113cf2:	4630      	mov	r0, r6
 8113cf4:	f7fe f8aa 	bl	8111e4c <__swsetup_r>
 8113cf8:	b1c0      	cbz	r0, 8113d2c <_vfiprintf_r+0x78>
 8113cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8113cfc:	07dc      	lsls	r4, r3, #31
 8113cfe:	d50e      	bpl.n	8113d1e <_vfiprintf_r+0x6a>
 8113d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8113d04:	b01d      	add	sp, #116	; 0x74
 8113d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113d0a:	4b7b      	ldr	r3, [pc, #492]	; (8113ef8 <_vfiprintf_r+0x244>)
 8113d0c:	429d      	cmp	r5, r3
 8113d0e:	d101      	bne.n	8113d14 <_vfiprintf_r+0x60>
 8113d10:	68b5      	ldr	r5, [r6, #8]
 8113d12:	e7df      	b.n	8113cd4 <_vfiprintf_r+0x20>
 8113d14:	4b79      	ldr	r3, [pc, #484]	; (8113efc <_vfiprintf_r+0x248>)
 8113d16:	429d      	cmp	r5, r3
 8113d18:	bf08      	it	eq
 8113d1a:	68f5      	ldreq	r5, [r6, #12]
 8113d1c:	e7da      	b.n	8113cd4 <_vfiprintf_r+0x20>
 8113d1e:	89ab      	ldrh	r3, [r5, #12]
 8113d20:	0598      	lsls	r0, r3, #22
 8113d22:	d4ed      	bmi.n	8113d00 <_vfiprintf_r+0x4c>
 8113d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8113d26:	f7ff f99a 	bl	811305e <__retarget_lock_release_recursive>
 8113d2a:	e7e9      	b.n	8113d00 <_vfiprintf_r+0x4c>
 8113d2c:	2300      	movs	r3, #0
 8113d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8113d30:	2320      	movs	r3, #32
 8113d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8113d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8113d3a:	2330      	movs	r3, #48	; 0x30
 8113d3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8113f00 <_vfiprintf_r+0x24c>
 8113d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8113d44:	f04f 0901 	mov.w	r9, #1
 8113d48:	4623      	mov	r3, r4
 8113d4a:	469a      	mov	sl, r3
 8113d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8113d50:	b10a      	cbz	r2, 8113d56 <_vfiprintf_r+0xa2>
 8113d52:	2a25      	cmp	r2, #37	; 0x25
 8113d54:	d1f9      	bne.n	8113d4a <_vfiprintf_r+0x96>
 8113d56:	ebba 0b04 	subs.w	fp, sl, r4
 8113d5a:	d00b      	beq.n	8113d74 <_vfiprintf_r+0xc0>
 8113d5c:	465b      	mov	r3, fp
 8113d5e:	4622      	mov	r2, r4
 8113d60:	4629      	mov	r1, r5
 8113d62:	4630      	mov	r0, r6
 8113d64:	f7ff ff93 	bl	8113c8e <__sfputs_r>
 8113d68:	3001      	adds	r0, #1
 8113d6a:	f000 80aa 	beq.w	8113ec2 <_vfiprintf_r+0x20e>
 8113d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8113d70:	445a      	add	r2, fp
 8113d72:	9209      	str	r2, [sp, #36]	; 0x24
 8113d74:	f89a 3000 	ldrb.w	r3, [sl]
 8113d78:	2b00      	cmp	r3, #0
 8113d7a:	f000 80a2 	beq.w	8113ec2 <_vfiprintf_r+0x20e>
 8113d7e:	2300      	movs	r3, #0
 8113d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8113d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8113d88:	f10a 0a01 	add.w	sl, sl, #1
 8113d8c:	9304      	str	r3, [sp, #16]
 8113d8e:	9307      	str	r3, [sp, #28]
 8113d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8113d94:	931a      	str	r3, [sp, #104]	; 0x68
 8113d96:	4654      	mov	r4, sl
 8113d98:	2205      	movs	r2, #5
 8113d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8113d9e:	4858      	ldr	r0, [pc, #352]	; (8113f00 <_vfiprintf_r+0x24c>)
 8113da0:	f7ec fab6 	bl	8100310 <memchr>
 8113da4:	9a04      	ldr	r2, [sp, #16]
 8113da6:	b9d8      	cbnz	r0, 8113de0 <_vfiprintf_r+0x12c>
 8113da8:	06d1      	lsls	r1, r2, #27
 8113daa:	bf44      	itt	mi
 8113dac:	2320      	movmi	r3, #32
 8113dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8113db2:	0713      	lsls	r3, r2, #28
 8113db4:	bf44      	itt	mi
 8113db6:	232b      	movmi	r3, #43	; 0x2b
 8113db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8113dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8113dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8113dc2:	d015      	beq.n	8113df0 <_vfiprintf_r+0x13c>
 8113dc4:	9a07      	ldr	r2, [sp, #28]
 8113dc6:	4654      	mov	r4, sl
 8113dc8:	2000      	movs	r0, #0
 8113dca:	f04f 0c0a 	mov.w	ip, #10
 8113dce:	4621      	mov	r1, r4
 8113dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8113dd4:	3b30      	subs	r3, #48	; 0x30
 8113dd6:	2b09      	cmp	r3, #9
 8113dd8:	d94e      	bls.n	8113e78 <_vfiprintf_r+0x1c4>
 8113dda:	b1b0      	cbz	r0, 8113e0a <_vfiprintf_r+0x156>
 8113ddc:	9207      	str	r2, [sp, #28]
 8113dde:	e014      	b.n	8113e0a <_vfiprintf_r+0x156>
 8113de0:	eba0 0308 	sub.w	r3, r0, r8
 8113de4:	fa09 f303 	lsl.w	r3, r9, r3
 8113de8:	4313      	orrs	r3, r2
 8113dea:	9304      	str	r3, [sp, #16]
 8113dec:	46a2      	mov	sl, r4
 8113dee:	e7d2      	b.n	8113d96 <_vfiprintf_r+0xe2>
 8113df0:	9b03      	ldr	r3, [sp, #12]
 8113df2:	1d19      	adds	r1, r3, #4
 8113df4:	681b      	ldr	r3, [r3, #0]
 8113df6:	9103      	str	r1, [sp, #12]
 8113df8:	2b00      	cmp	r3, #0
 8113dfa:	bfbb      	ittet	lt
 8113dfc:	425b      	neglt	r3, r3
 8113dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8113e02:	9307      	strge	r3, [sp, #28]
 8113e04:	9307      	strlt	r3, [sp, #28]
 8113e06:	bfb8      	it	lt
 8113e08:	9204      	strlt	r2, [sp, #16]
 8113e0a:	7823      	ldrb	r3, [r4, #0]
 8113e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8113e0e:	d10c      	bne.n	8113e2a <_vfiprintf_r+0x176>
 8113e10:	7863      	ldrb	r3, [r4, #1]
 8113e12:	2b2a      	cmp	r3, #42	; 0x2a
 8113e14:	d135      	bne.n	8113e82 <_vfiprintf_r+0x1ce>
 8113e16:	9b03      	ldr	r3, [sp, #12]
 8113e18:	1d1a      	adds	r2, r3, #4
 8113e1a:	681b      	ldr	r3, [r3, #0]
 8113e1c:	9203      	str	r2, [sp, #12]
 8113e1e:	2b00      	cmp	r3, #0
 8113e20:	bfb8      	it	lt
 8113e22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8113e26:	3402      	adds	r4, #2
 8113e28:	9305      	str	r3, [sp, #20]
 8113e2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8113f10 <_vfiprintf_r+0x25c>
 8113e2e:	7821      	ldrb	r1, [r4, #0]
 8113e30:	2203      	movs	r2, #3
 8113e32:	4650      	mov	r0, sl
 8113e34:	f7ec fa6c 	bl	8100310 <memchr>
 8113e38:	b140      	cbz	r0, 8113e4c <_vfiprintf_r+0x198>
 8113e3a:	2340      	movs	r3, #64	; 0x40
 8113e3c:	eba0 000a 	sub.w	r0, r0, sl
 8113e40:	fa03 f000 	lsl.w	r0, r3, r0
 8113e44:	9b04      	ldr	r3, [sp, #16]
 8113e46:	4303      	orrs	r3, r0
 8113e48:	3401      	adds	r4, #1
 8113e4a:	9304      	str	r3, [sp, #16]
 8113e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8113e50:	482c      	ldr	r0, [pc, #176]	; (8113f04 <_vfiprintf_r+0x250>)
 8113e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8113e56:	2206      	movs	r2, #6
 8113e58:	f7ec fa5a 	bl	8100310 <memchr>
 8113e5c:	2800      	cmp	r0, #0
 8113e5e:	d03f      	beq.n	8113ee0 <_vfiprintf_r+0x22c>
 8113e60:	4b29      	ldr	r3, [pc, #164]	; (8113f08 <_vfiprintf_r+0x254>)
 8113e62:	bb1b      	cbnz	r3, 8113eac <_vfiprintf_r+0x1f8>
 8113e64:	9b03      	ldr	r3, [sp, #12]
 8113e66:	3307      	adds	r3, #7
 8113e68:	f023 0307 	bic.w	r3, r3, #7
 8113e6c:	3308      	adds	r3, #8
 8113e6e:	9303      	str	r3, [sp, #12]
 8113e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8113e72:	443b      	add	r3, r7
 8113e74:	9309      	str	r3, [sp, #36]	; 0x24
 8113e76:	e767      	b.n	8113d48 <_vfiprintf_r+0x94>
 8113e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8113e7c:	460c      	mov	r4, r1
 8113e7e:	2001      	movs	r0, #1
 8113e80:	e7a5      	b.n	8113dce <_vfiprintf_r+0x11a>
 8113e82:	2300      	movs	r3, #0
 8113e84:	3401      	adds	r4, #1
 8113e86:	9305      	str	r3, [sp, #20]
 8113e88:	4619      	mov	r1, r3
 8113e8a:	f04f 0c0a 	mov.w	ip, #10
 8113e8e:	4620      	mov	r0, r4
 8113e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8113e94:	3a30      	subs	r2, #48	; 0x30
 8113e96:	2a09      	cmp	r2, #9
 8113e98:	d903      	bls.n	8113ea2 <_vfiprintf_r+0x1ee>
 8113e9a:	2b00      	cmp	r3, #0
 8113e9c:	d0c5      	beq.n	8113e2a <_vfiprintf_r+0x176>
 8113e9e:	9105      	str	r1, [sp, #20]
 8113ea0:	e7c3      	b.n	8113e2a <_vfiprintf_r+0x176>
 8113ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8113ea6:	4604      	mov	r4, r0
 8113ea8:	2301      	movs	r3, #1
 8113eaa:	e7f0      	b.n	8113e8e <_vfiprintf_r+0x1da>
 8113eac:	ab03      	add	r3, sp, #12
 8113eae:	9300      	str	r3, [sp, #0]
 8113eb0:	462a      	mov	r2, r5
 8113eb2:	4b16      	ldr	r3, [pc, #88]	; (8113f0c <_vfiprintf_r+0x258>)
 8113eb4:	a904      	add	r1, sp, #16
 8113eb6:	4630      	mov	r0, r6
 8113eb8:	f7fd fa0c 	bl	81112d4 <_printf_float>
 8113ebc:	4607      	mov	r7, r0
 8113ebe:	1c78      	adds	r0, r7, #1
 8113ec0:	d1d6      	bne.n	8113e70 <_vfiprintf_r+0x1bc>
 8113ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8113ec4:	07d9      	lsls	r1, r3, #31
 8113ec6:	d405      	bmi.n	8113ed4 <_vfiprintf_r+0x220>
 8113ec8:	89ab      	ldrh	r3, [r5, #12]
 8113eca:	059a      	lsls	r2, r3, #22
 8113ecc:	d402      	bmi.n	8113ed4 <_vfiprintf_r+0x220>
 8113ece:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8113ed0:	f7ff f8c5 	bl	811305e <__retarget_lock_release_recursive>
 8113ed4:	89ab      	ldrh	r3, [r5, #12]
 8113ed6:	065b      	lsls	r3, r3, #25
 8113ed8:	f53f af12 	bmi.w	8113d00 <_vfiprintf_r+0x4c>
 8113edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8113ede:	e711      	b.n	8113d04 <_vfiprintf_r+0x50>
 8113ee0:	ab03      	add	r3, sp, #12
 8113ee2:	9300      	str	r3, [sp, #0]
 8113ee4:	462a      	mov	r2, r5
 8113ee6:	4b09      	ldr	r3, [pc, #36]	; (8113f0c <_vfiprintf_r+0x258>)
 8113ee8:	a904      	add	r1, sp, #16
 8113eea:	4630      	mov	r0, r6
 8113eec:	f7fd fc96 	bl	811181c <_printf_i>
 8113ef0:	e7e4      	b.n	8113ebc <_vfiprintf_r+0x208>
 8113ef2:	bf00      	nop
 8113ef4:	0811518c 	.word	0x0811518c
 8113ef8:	081151ac 	.word	0x081151ac
 8113efc:	0811516c 	.word	0x0811516c
 8113f00:	0811532c 	.word	0x0811532c
 8113f04:	08115336 	.word	0x08115336
 8113f08:	081112d5 	.word	0x081112d5
 8113f0c:	08113c8f 	.word	0x08113c8f
 8113f10:	08115332 	.word	0x08115332

08113f14 <_sbrk_r>:
 8113f14:	b538      	push	{r3, r4, r5, lr}
 8113f16:	4d06      	ldr	r5, [pc, #24]	; (8113f30 <_sbrk_r+0x1c>)
 8113f18:	2300      	movs	r3, #0
 8113f1a:	4604      	mov	r4, r0
 8113f1c:	4608      	mov	r0, r1
 8113f1e:	602b      	str	r3, [r5, #0]
 8113f20:	f7ee f846 	bl	8101fb0 <_sbrk>
 8113f24:	1c43      	adds	r3, r0, #1
 8113f26:	d102      	bne.n	8113f2e <_sbrk_r+0x1a>
 8113f28:	682b      	ldr	r3, [r5, #0]
 8113f2a:	b103      	cbz	r3, 8113f2e <_sbrk_r+0x1a>
 8113f2c:	6023      	str	r3, [r4, #0]
 8113f2e:	bd38      	pop	{r3, r4, r5, pc}
 8113f30:	10046674 	.word	0x10046674

08113f34 <__sread>:
 8113f34:	b510      	push	{r4, lr}
 8113f36:	460c      	mov	r4, r1
 8113f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113f3c:	f000 f922 	bl	8114184 <_read_r>
 8113f40:	2800      	cmp	r0, #0
 8113f42:	bfab      	itete	ge
 8113f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8113f46:	89a3      	ldrhlt	r3, [r4, #12]
 8113f48:	181b      	addge	r3, r3, r0
 8113f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8113f4e:	bfac      	ite	ge
 8113f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8113f52:	81a3      	strhlt	r3, [r4, #12]
 8113f54:	bd10      	pop	{r4, pc}

08113f56 <__swrite>:
 8113f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113f5a:	461f      	mov	r7, r3
 8113f5c:	898b      	ldrh	r3, [r1, #12]
 8113f5e:	05db      	lsls	r3, r3, #23
 8113f60:	4605      	mov	r5, r0
 8113f62:	460c      	mov	r4, r1
 8113f64:	4616      	mov	r6, r2
 8113f66:	d505      	bpl.n	8113f74 <__swrite+0x1e>
 8113f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113f6c:	2302      	movs	r3, #2
 8113f6e:	2200      	movs	r2, #0
 8113f70:	f000 f898 	bl	81140a4 <_lseek_r>
 8113f74:	89a3      	ldrh	r3, [r4, #12]
 8113f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8113f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8113f7e:	81a3      	strh	r3, [r4, #12]
 8113f80:	4632      	mov	r2, r6
 8113f82:	463b      	mov	r3, r7
 8113f84:	4628      	mov	r0, r5
 8113f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8113f8a:	f000 b817 	b.w	8113fbc <_write_r>

08113f8e <__sseek>:
 8113f8e:	b510      	push	{r4, lr}
 8113f90:	460c      	mov	r4, r1
 8113f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113f96:	f000 f885 	bl	81140a4 <_lseek_r>
 8113f9a:	1c43      	adds	r3, r0, #1
 8113f9c:	89a3      	ldrh	r3, [r4, #12]
 8113f9e:	bf15      	itete	ne
 8113fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8113fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8113fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8113faa:	81a3      	strheq	r3, [r4, #12]
 8113fac:	bf18      	it	ne
 8113fae:	81a3      	strhne	r3, [r4, #12]
 8113fb0:	bd10      	pop	{r4, pc}

08113fb2 <__sclose>:
 8113fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113fb6:	f000 b831 	b.w	811401c <_close_r>
	...

08113fbc <_write_r>:
 8113fbc:	b538      	push	{r3, r4, r5, lr}
 8113fbe:	4d07      	ldr	r5, [pc, #28]	; (8113fdc <_write_r+0x20>)
 8113fc0:	4604      	mov	r4, r0
 8113fc2:	4608      	mov	r0, r1
 8113fc4:	4611      	mov	r1, r2
 8113fc6:	2200      	movs	r2, #0
 8113fc8:	602a      	str	r2, [r5, #0]
 8113fca:	461a      	mov	r2, r3
 8113fcc:	f7ed ff9f 	bl	8101f0e <_write>
 8113fd0:	1c43      	adds	r3, r0, #1
 8113fd2:	d102      	bne.n	8113fda <_write_r+0x1e>
 8113fd4:	682b      	ldr	r3, [r5, #0]
 8113fd6:	b103      	cbz	r3, 8113fda <_write_r+0x1e>
 8113fd8:	6023      	str	r3, [r4, #0]
 8113fda:	bd38      	pop	{r3, r4, r5, pc}
 8113fdc:	10046674 	.word	0x10046674

08113fe0 <__assert_func>:
 8113fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8113fe2:	4614      	mov	r4, r2
 8113fe4:	461a      	mov	r2, r3
 8113fe6:	4b09      	ldr	r3, [pc, #36]	; (811400c <__assert_func+0x2c>)
 8113fe8:	681b      	ldr	r3, [r3, #0]
 8113fea:	4605      	mov	r5, r0
 8113fec:	68d8      	ldr	r0, [r3, #12]
 8113fee:	b14c      	cbz	r4, 8114004 <__assert_func+0x24>
 8113ff0:	4b07      	ldr	r3, [pc, #28]	; (8114010 <__assert_func+0x30>)
 8113ff2:	9100      	str	r1, [sp, #0]
 8113ff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8113ff8:	4906      	ldr	r1, [pc, #24]	; (8114014 <__assert_func+0x34>)
 8113ffa:	462b      	mov	r3, r5
 8113ffc:	f000 f81e 	bl	811403c <fiprintf>
 8114000:	f7fd f877 	bl	81110f2 <abort>
 8114004:	4b04      	ldr	r3, [pc, #16]	; (8114018 <__assert_func+0x38>)
 8114006:	461c      	mov	r4, r3
 8114008:	e7f3      	b.n	8113ff2 <__assert_func+0x12>
 811400a:	bf00      	nop
 811400c:	10000040 	.word	0x10000040
 8114010:	0811533d 	.word	0x0811533d
 8114014:	0811534a 	.word	0x0811534a
 8114018:	08115378 	.word	0x08115378

0811401c <_close_r>:
 811401c:	b538      	push	{r3, r4, r5, lr}
 811401e:	4d06      	ldr	r5, [pc, #24]	; (8114038 <_close_r+0x1c>)
 8114020:	2300      	movs	r3, #0
 8114022:	4604      	mov	r4, r0
 8114024:	4608      	mov	r0, r1
 8114026:	602b      	str	r3, [r5, #0]
 8114028:	f7ed ff8d 	bl	8101f46 <_close>
 811402c:	1c43      	adds	r3, r0, #1
 811402e:	d102      	bne.n	8114036 <_close_r+0x1a>
 8114030:	682b      	ldr	r3, [r5, #0]
 8114032:	b103      	cbz	r3, 8114036 <_close_r+0x1a>
 8114034:	6023      	str	r3, [r4, #0]
 8114036:	bd38      	pop	{r3, r4, r5, pc}
 8114038:	10046674 	.word	0x10046674

0811403c <fiprintf>:
 811403c:	b40e      	push	{r1, r2, r3}
 811403e:	b503      	push	{r0, r1, lr}
 8114040:	4601      	mov	r1, r0
 8114042:	ab03      	add	r3, sp, #12
 8114044:	4805      	ldr	r0, [pc, #20]	; (811405c <fiprintf+0x20>)
 8114046:	f853 2b04 	ldr.w	r2, [r3], #4
 811404a:	6800      	ldr	r0, [r0, #0]
 811404c:	9301      	str	r3, [sp, #4]
 811404e:	f7ff fe31 	bl	8113cb4 <_vfiprintf_r>
 8114052:	b002      	add	sp, #8
 8114054:	f85d eb04 	ldr.w	lr, [sp], #4
 8114058:	b003      	add	sp, #12
 811405a:	4770      	bx	lr
 811405c:	10000040 	.word	0x10000040

08114060 <_fstat_r>:
 8114060:	b538      	push	{r3, r4, r5, lr}
 8114062:	4d07      	ldr	r5, [pc, #28]	; (8114080 <_fstat_r+0x20>)
 8114064:	2300      	movs	r3, #0
 8114066:	4604      	mov	r4, r0
 8114068:	4608      	mov	r0, r1
 811406a:	4611      	mov	r1, r2
 811406c:	602b      	str	r3, [r5, #0]
 811406e:	f7ed ff76 	bl	8101f5e <_fstat>
 8114072:	1c43      	adds	r3, r0, #1
 8114074:	d102      	bne.n	811407c <_fstat_r+0x1c>
 8114076:	682b      	ldr	r3, [r5, #0]
 8114078:	b103      	cbz	r3, 811407c <_fstat_r+0x1c>
 811407a:	6023      	str	r3, [r4, #0]
 811407c:	bd38      	pop	{r3, r4, r5, pc}
 811407e:	bf00      	nop
 8114080:	10046674 	.word	0x10046674

08114084 <_isatty_r>:
 8114084:	b538      	push	{r3, r4, r5, lr}
 8114086:	4d06      	ldr	r5, [pc, #24]	; (81140a0 <_isatty_r+0x1c>)
 8114088:	2300      	movs	r3, #0
 811408a:	4604      	mov	r4, r0
 811408c:	4608      	mov	r0, r1
 811408e:	602b      	str	r3, [r5, #0]
 8114090:	f7ed ff75 	bl	8101f7e <_isatty>
 8114094:	1c43      	adds	r3, r0, #1
 8114096:	d102      	bne.n	811409e <_isatty_r+0x1a>
 8114098:	682b      	ldr	r3, [r5, #0]
 811409a:	b103      	cbz	r3, 811409e <_isatty_r+0x1a>
 811409c:	6023      	str	r3, [r4, #0]
 811409e:	bd38      	pop	{r3, r4, r5, pc}
 81140a0:	10046674 	.word	0x10046674

081140a4 <_lseek_r>:
 81140a4:	b538      	push	{r3, r4, r5, lr}
 81140a6:	4d07      	ldr	r5, [pc, #28]	; (81140c4 <_lseek_r+0x20>)
 81140a8:	4604      	mov	r4, r0
 81140aa:	4608      	mov	r0, r1
 81140ac:	4611      	mov	r1, r2
 81140ae:	2200      	movs	r2, #0
 81140b0:	602a      	str	r2, [r5, #0]
 81140b2:	461a      	mov	r2, r3
 81140b4:	f7ed ff6e 	bl	8101f94 <_lseek>
 81140b8:	1c43      	adds	r3, r0, #1
 81140ba:	d102      	bne.n	81140c2 <_lseek_r+0x1e>
 81140bc:	682b      	ldr	r3, [r5, #0]
 81140be:	b103      	cbz	r3, 81140c2 <_lseek_r+0x1e>
 81140c0:	6023      	str	r3, [r4, #0]
 81140c2:	bd38      	pop	{r3, r4, r5, pc}
 81140c4:	10046674 	.word	0x10046674

081140c8 <__ascii_mbtowc>:
 81140c8:	b082      	sub	sp, #8
 81140ca:	b901      	cbnz	r1, 81140ce <__ascii_mbtowc+0x6>
 81140cc:	a901      	add	r1, sp, #4
 81140ce:	b142      	cbz	r2, 81140e2 <__ascii_mbtowc+0x1a>
 81140d0:	b14b      	cbz	r3, 81140e6 <__ascii_mbtowc+0x1e>
 81140d2:	7813      	ldrb	r3, [r2, #0]
 81140d4:	600b      	str	r3, [r1, #0]
 81140d6:	7812      	ldrb	r2, [r2, #0]
 81140d8:	1e10      	subs	r0, r2, #0
 81140da:	bf18      	it	ne
 81140dc:	2001      	movne	r0, #1
 81140de:	b002      	add	sp, #8
 81140e0:	4770      	bx	lr
 81140e2:	4610      	mov	r0, r2
 81140e4:	e7fb      	b.n	81140de <__ascii_mbtowc+0x16>
 81140e6:	f06f 0001 	mvn.w	r0, #1
 81140ea:	e7f8      	b.n	81140de <__ascii_mbtowc+0x16>

081140ec <memmove>:
 81140ec:	4288      	cmp	r0, r1
 81140ee:	b510      	push	{r4, lr}
 81140f0:	eb01 0402 	add.w	r4, r1, r2
 81140f4:	d902      	bls.n	81140fc <memmove+0x10>
 81140f6:	4284      	cmp	r4, r0
 81140f8:	4623      	mov	r3, r4
 81140fa:	d807      	bhi.n	811410c <memmove+0x20>
 81140fc:	1e43      	subs	r3, r0, #1
 81140fe:	42a1      	cmp	r1, r4
 8114100:	d008      	beq.n	8114114 <memmove+0x28>
 8114102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8114106:	f803 2f01 	strb.w	r2, [r3, #1]!
 811410a:	e7f8      	b.n	81140fe <memmove+0x12>
 811410c:	4402      	add	r2, r0
 811410e:	4601      	mov	r1, r0
 8114110:	428a      	cmp	r2, r1
 8114112:	d100      	bne.n	8114116 <memmove+0x2a>
 8114114:	bd10      	pop	{r4, pc}
 8114116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811411a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 811411e:	e7f7      	b.n	8114110 <memmove+0x24>

08114120 <__malloc_lock>:
 8114120:	4801      	ldr	r0, [pc, #4]	; (8114128 <__malloc_lock+0x8>)
 8114122:	f7fe bf9a 	b.w	811305a <__retarget_lock_acquire_recursive>
 8114126:	bf00      	nop
 8114128:	1004666c 	.word	0x1004666c

0811412c <__malloc_unlock>:
 811412c:	4801      	ldr	r0, [pc, #4]	; (8114134 <__malloc_unlock+0x8>)
 811412e:	f7fe bf96 	b.w	811305e <__retarget_lock_release_recursive>
 8114132:	bf00      	nop
 8114134:	1004666c 	.word	0x1004666c

08114138 <_realloc_r>:
 8114138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811413a:	4607      	mov	r7, r0
 811413c:	4614      	mov	r4, r2
 811413e:	460e      	mov	r6, r1
 8114140:	b921      	cbnz	r1, 811414c <_realloc_r+0x14>
 8114142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8114146:	4611      	mov	r1, r2
 8114148:	f7ff bbd4 	b.w	81138f4 <_malloc_r>
 811414c:	b922      	cbnz	r2, 8114158 <_realloc_r+0x20>
 811414e:	f7ff fb81 	bl	8113854 <_free_r>
 8114152:	4625      	mov	r5, r4
 8114154:	4628      	mov	r0, r5
 8114156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8114158:	f000 f833 	bl	81141c2 <_malloc_usable_size_r>
 811415c:	42a0      	cmp	r0, r4
 811415e:	d20f      	bcs.n	8114180 <_realloc_r+0x48>
 8114160:	4621      	mov	r1, r4
 8114162:	4638      	mov	r0, r7
 8114164:	f7ff fbc6 	bl	81138f4 <_malloc_r>
 8114168:	4605      	mov	r5, r0
 811416a:	2800      	cmp	r0, #0
 811416c:	d0f2      	beq.n	8114154 <_realloc_r+0x1c>
 811416e:	4631      	mov	r1, r6
 8114170:	4622      	mov	r2, r4
 8114172:	f7fc fff9 	bl	8111168 <memcpy>
 8114176:	4631      	mov	r1, r6
 8114178:	4638      	mov	r0, r7
 811417a:	f7ff fb6b 	bl	8113854 <_free_r>
 811417e:	e7e9      	b.n	8114154 <_realloc_r+0x1c>
 8114180:	4635      	mov	r5, r6
 8114182:	e7e7      	b.n	8114154 <_realloc_r+0x1c>

08114184 <_read_r>:
 8114184:	b538      	push	{r3, r4, r5, lr}
 8114186:	4d07      	ldr	r5, [pc, #28]	; (81141a4 <_read_r+0x20>)
 8114188:	4604      	mov	r4, r0
 811418a:	4608      	mov	r0, r1
 811418c:	4611      	mov	r1, r2
 811418e:	2200      	movs	r2, #0
 8114190:	602a      	str	r2, [r5, #0]
 8114192:	461a      	mov	r2, r3
 8114194:	f7ed fe9e 	bl	8101ed4 <_read>
 8114198:	1c43      	adds	r3, r0, #1
 811419a:	d102      	bne.n	81141a2 <_read_r+0x1e>
 811419c:	682b      	ldr	r3, [r5, #0]
 811419e:	b103      	cbz	r3, 81141a2 <_read_r+0x1e>
 81141a0:	6023      	str	r3, [r4, #0]
 81141a2:	bd38      	pop	{r3, r4, r5, pc}
 81141a4:	10046674 	.word	0x10046674

081141a8 <__ascii_wctomb>:
 81141a8:	b149      	cbz	r1, 81141be <__ascii_wctomb+0x16>
 81141aa:	2aff      	cmp	r2, #255	; 0xff
 81141ac:	bf85      	ittet	hi
 81141ae:	238a      	movhi	r3, #138	; 0x8a
 81141b0:	6003      	strhi	r3, [r0, #0]
 81141b2:	700a      	strbls	r2, [r1, #0]
 81141b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 81141b8:	bf98      	it	ls
 81141ba:	2001      	movls	r0, #1
 81141bc:	4770      	bx	lr
 81141be:	4608      	mov	r0, r1
 81141c0:	4770      	bx	lr

081141c2 <_malloc_usable_size_r>:
 81141c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81141c6:	1f18      	subs	r0, r3, #4
 81141c8:	2b00      	cmp	r3, #0
 81141ca:	bfbc      	itt	lt
 81141cc:	580b      	ldrlt	r3, [r1, r0]
 81141ce:	18c0      	addlt	r0, r0, r3
 81141d0:	4770      	bx	lr
	...

081141d4 <_init>:
 81141d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81141d6:	bf00      	nop
 81141d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81141da:	bc08      	pop	{r3}
 81141dc:	469e      	mov	lr, r3
 81141de:	4770      	bx	lr

081141e0 <_fini>:
 81141e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81141e2:	bf00      	nop
 81141e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81141e6:	bc08      	pop	{r3}
 81141e8:	469e      	mov	lr, r3
 81141ea:	4770      	bx	lr
=======
08110466 <__malloc_unlock>:
 8110466:	4770      	bx	lr

08110468 <_realloc_r>:
 8110468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811046a:	4607      	mov	r7, r0
 811046c:	4614      	mov	r4, r2
 811046e:	460e      	mov	r6, r1
 8110470:	b921      	cbnz	r1, 811047c <_realloc_r+0x14>
 8110472:	4611      	mov	r1, r2
 8110474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8110478:	f7ff be12 	b.w	81100a0 <_malloc_r>
 811047c:	b922      	cbnz	r2, 8110488 <_realloc_r+0x20>
 811047e:	f7ff fdc1 	bl	8110004 <_free_r>
 8110482:	4625      	mov	r5, r4
 8110484:	4628      	mov	r0, r5
 8110486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8110488:	f000 f814 	bl	81104b4 <_malloc_usable_size_r>
 811048c:	42a0      	cmp	r0, r4
 811048e:	d20f      	bcs.n	81104b0 <_realloc_r+0x48>
 8110490:	4621      	mov	r1, r4
 8110492:	4638      	mov	r0, r7
 8110494:	f7ff fe04 	bl	81100a0 <_malloc_r>
 8110498:	4605      	mov	r5, r0
 811049a:	2800      	cmp	r0, #0
 811049c:	d0f2      	beq.n	8110484 <_realloc_r+0x1c>
 811049e:	4631      	mov	r1, r6
 81104a0:	4622      	mov	r2, r4
 81104a2:	f7fd fe69 	bl	810e178 <memcpy>
 81104a6:	4631      	mov	r1, r6
 81104a8:	4638      	mov	r0, r7
 81104aa:	f7ff fdab 	bl	8110004 <_free_r>
 81104ae:	e7e9      	b.n	8110484 <_realloc_r+0x1c>
 81104b0:	4635      	mov	r5, r6
 81104b2:	e7e7      	b.n	8110484 <_realloc_r+0x1c>

081104b4 <_malloc_usable_size_r>:
 81104b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81104b8:	1f18      	subs	r0, r3, #4
 81104ba:	2b00      	cmp	r3, #0
 81104bc:	bfbc      	itt	lt
 81104be:	580b      	ldrlt	r3, [r1, r0]
 81104c0:	18c0      	addlt	r0, r0, r3
 81104c2:	4770      	bx	lr

081104c4 <_init>:
 81104c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81104c6:	bf00      	nop
 81104c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81104ca:	bc08      	pop	{r3}
 81104cc:	469e      	mov	lr, r3
 81104ce:	4770      	bx	lr

081104d0 <_fini>:
 81104d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81104d2:	bf00      	nop
 81104d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81104d6:	bc08      	pop	{r3}
 81104d8:	469e      	mov	lr, r3
 81104da:	4770      	bx	lr
>>>>>>> branch 'master' of https://github.com/EPFLXplore/XploreAvionics
