
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ac0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e0  08114d60  08114d60  00024d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08116140  08116140  00026140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08116148  08116148  00026148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08116154  08116154  00026154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  10000000  0811615c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000e574  10000210  0811636c  00030210  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000e784  0811636c  0003e784  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 10 .debug_info   0008249d  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000dbd3  00000000  00000000  000b26dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e58  00000000  00000000  000c02b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002a60  00000000  00000000  000c3108  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004f6b6  00000000  00000000  000c5b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003dbee  00000000  00000000  0011521e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001ac8b5  00000000  00000000  00152e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002ff6c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d710  00000000  00000000  002ff73c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000210 	.word	0x10000210
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08114d48 	.word	0x08114d48

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000214 	.word	0x10000214
 81002dc:	08114d48 	.word	0x08114d48

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81004ee:	f1a4 0401 	sub.w	r4, r4, #1
 81004f2:	d1e9      	bne.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2f>:
 8100cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100ce0:	bf24      	itt	cs
 8100ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cea:	d90d      	bls.n	8100d08 <__aeabi_d2f+0x30>
 8100cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d00:	bf08      	it	eq
 8100d02:	f020 0001 	biceq.w	r0, r0, #1
 8100d06:	4770      	bx	lr
 8100d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d0c:	d121      	bne.n	8100d52 <__aeabi_d2f+0x7a>
 8100d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d12:	bfbc      	itt	lt
 8100d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d18:	4770      	bxlt	lr
 8100d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d22:	f1c2 0218 	rsb	r2, r2, #24
 8100d26:	f1c2 0c20 	rsb	ip, r2, #32
 8100d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d32:	bf18      	it	ne
 8100d34:	f040 0001 	orrne.w	r0, r0, #1
 8100d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d44:	ea40 000c 	orr.w	r0, r0, ip
 8100d48:	fa23 f302 	lsr.w	r3, r3, r2
 8100d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d50:	e7cc      	b.n	8100cec <__aeabi_d2f+0x14>
 8100d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d56:	d107      	bne.n	8100d68 <__aeabi_d2f+0x90>
 8100d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d5c:	bf1e      	ittt	ne
 8100d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d66:	4770      	bxne	lr
 8100d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d74:	4770      	bx	lr
 8100d76:	bf00      	nop

08100d78 <__aeabi_ldivmod>:
 8100d78:	b97b      	cbnz	r3, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7a:	b972      	cbnz	r2, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7c:	2900      	cmp	r1, #0
 8100d7e:	bfbe      	ittt	lt
 8100d80:	2000      	movlt	r0, #0
 8100d82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100d86:	e006      	blt.n	8100d96 <__aeabi_ldivmod+0x1e>
 8100d88:	bf08      	it	eq
 8100d8a:	2800      	cmpeq	r0, #0
 8100d8c:	bf1c      	itt	ne
 8100d8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100d92:	f04f 30ff 	movne.w	r0, #4294967295
 8100d96:	f000 b9bd 	b.w	8101114 <__aeabi_idiv0>
 8100d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100da2:	2900      	cmp	r1, #0
 8100da4:	db09      	blt.n	8100dba <__aeabi_ldivmod+0x42>
 8100da6:	2b00      	cmp	r3, #0
 8100da8:	db1a      	blt.n	8100de0 <__aeabi_ldivmod+0x68>
 8100daa:	f000 f84d 	bl	8100e48 <__udivmoddi4>
 8100dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100db6:	b004      	add	sp, #16
 8100db8:	4770      	bx	lr
 8100dba:	4240      	negs	r0, r0
 8100dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc0:	2b00      	cmp	r3, #0
 8100dc2:	db1b      	blt.n	8100dfc <__aeabi_ldivmod+0x84>
 8100dc4:	f000 f840 	bl	8100e48 <__udivmoddi4>
 8100dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dd0:	b004      	add	sp, #16
 8100dd2:	4240      	negs	r0, r0
 8100dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dd8:	4252      	negs	r2, r2
 8100dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100dde:	4770      	bx	lr
 8100de0:	4252      	negs	r2, r2
 8100de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100de6:	f000 f82f 	bl	8100e48 <__udivmoddi4>
 8100dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100df2:	b004      	add	sp, #16
 8100df4:	4240      	negs	r0, r0
 8100df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dfa:	4770      	bx	lr
 8100dfc:	4252      	negs	r2, r2
 8100dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e02:	f000 f821 	bl	8100e48 <__udivmoddi4>
 8100e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e0e:	b004      	add	sp, #16
 8100e10:	4252      	negs	r2, r2
 8100e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e16:	4770      	bx	lr

08100e18 <__aeabi_uldivmod>:
 8100e18:	b953      	cbnz	r3, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1a:	b94a      	cbnz	r2, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1c:	2900      	cmp	r1, #0
 8100e1e:	bf08      	it	eq
 8100e20:	2800      	cmpeq	r0, #0
 8100e22:	bf1c      	itt	ne
 8100e24:	f04f 31ff 	movne.w	r1, #4294967295
 8100e28:	f04f 30ff 	movne.w	r0, #4294967295
 8100e2c:	f000 b972 	b.w	8101114 <__aeabi_idiv0>
 8100e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e38:	f000 f806 	bl	8100e48 <__udivmoddi4>
 8100e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e44:	b004      	add	sp, #16
 8100e46:	4770      	bx	lr

08100e48 <__udivmoddi4>:
 8100e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e4c:	9e08      	ldr	r6, [sp, #32]
 8100e4e:	4604      	mov	r4, r0
 8100e50:	4688      	mov	r8, r1
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	d14b      	bne.n	8100eee <__udivmoddi4+0xa6>
 8100e56:	428a      	cmp	r2, r1
 8100e58:	4615      	mov	r5, r2
 8100e5a:	d967      	bls.n	8100f2c <__udivmoddi4+0xe4>
 8100e5c:	fab2 f282 	clz	r2, r2
 8100e60:	b14a      	cbz	r2, 8100e76 <__udivmoddi4+0x2e>
 8100e62:	f1c2 0720 	rsb	r7, r2, #32
 8100e66:	fa01 f302 	lsl.w	r3, r1, r2
 8100e6a:	fa20 f707 	lsr.w	r7, r0, r7
 8100e6e:	4095      	lsls	r5, r2
 8100e70:	ea47 0803 	orr.w	r8, r7, r3
 8100e74:	4094      	lsls	r4, r2
 8100e76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e7a:	0c23      	lsrs	r3, r4, #16
 8100e7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100e80:	fa1f fc85 	uxth.w	ip, r5
 8100e84:	fb0e 8817 	mls	r8, lr, r7, r8
 8100e88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100e8c:	fb07 f10c 	mul.w	r1, r7, ip
 8100e90:	4299      	cmp	r1, r3
 8100e92:	d909      	bls.n	8100ea8 <__udivmoddi4+0x60>
 8100e94:	18eb      	adds	r3, r5, r3
 8100e96:	f107 30ff 	add.w	r0, r7, #4294967295
 8100e9a:	f080 811b 	bcs.w	81010d4 <__udivmoddi4+0x28c>
 8100e9e:	4299      	cmp	r1, r3
 8100ea0:	f240 8118 	bls.w	81010d4 <__udivmoddi4+0x28c>
 8100ea4:	3f02      	subs	r7, #2
 8100ea6:	442b      	add	r3, r5
 8100ea8:	1a5b      	subs	r3, r3, r1
 8100eaa:	b2a4      	uxth	r4, r4
 8100eac:	fbb3 f0fe 	udiv	r0, r3, lr
 8100eb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100eb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100eb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100ebc:	45a4      	cmp	ip, r4
 8100ebe:	d909      	bls.n	8100ed4 <__udivmoddi4+0x8c>
 8100ec0:	192c      	adds	r4, r5, r4
 8100ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8100ec6:	f080 8107 	bcs.w	81010d8 <__udivmoddi4+0x290>
 8100eca:	45a4      	cmp	ip, r4
 8100ecc:	f240 8104 	bls.w	81010d8 <__udivmoddi4+0x290>
 8100ed0:	3802      	subs	r0, #2
 8100ed2:	442c      	add	r4, r5
 8100ed4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100ed8:	eba4 040c 	sub.w	r4, r4, ip
 8100edc:	2700      	movs	r7, #0
 8100ede:	b11e      	cbz	r6, 8100ee8 <__udivmoddi4+0xa0>
 8100ee0:	40d4      	lsrs	r4, r2
 8100ee2:	2300      	movs	r3, #0
 8100ee4:	e9c6 4300 	strd	r4, r3, [r6]
 8100ee8:	4639      	mov	r1, r7
 8100eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eee:	428b      	cmp	r3, r1
 8100ef0:	d909      	bls.n	8100f06 <__udivmoddi4+0xbe>
 8100ef2:	2e00      	cmp	r6, #0
 8100ef4:	f000 80eb 	beq.w	81010ce <__udivmoddi4+0x286>
 8100ef8:	2700      	movs	r7, #0
 8100efa:	e9c6 0100 	strd	r0, r1, [r6]
 8100efe:	4638      	mov	r0, r7
 8100f00:	4639      	mov	r1, r7
 8100f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f06:	fab3 f783 	clz	r7, r3
 8100f0a:	2f00      	cmp	r7, #0
 8100f0c:	d147      	bne.n	8100f9e <__udivmoddi4+0x156>
 8100f0e:	428b      	cmp	r3, r1
 8100f10:	d302      	bcc.n	8100f18 <__udivmoddi4+0xd0>
 8100f12:	4282      	cmp	r2, r0
 8100f14:	f200 80fa 	bhi.w	810110c <__udivmoddi4+0x2c4>
 8100f18:	1a84      	subs	r4, r0, r2
 8100f1a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f1e:	2001      	movs	r0, #1
 8100f20:	4698      	mov	r8, r3
 8100f22:	2e00      	cmp	r6, #0
 8100f24:	d0e0      	beq.n	8100ee8 <__udivmoddi4+0xa0>
 8100f26:	e9c6 4800 	strd	r4, r8, [r6]
 8100f2a:	e7dd      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8100f2c:	b902      	cbnz	r2, 8100f30 <__udivmoddi4+0xe8>
 8100f2e:	deff      	udf	#255	; 0xff
 8100f30:	fab2 f282 	clz	r2, r2
 8100f34:	2a00      	cmp	r2, #0
 8100f36:	f040 808f 	bne.w	8101058 <__udivmoddi4+0x210>
 8100f3a:	1b49      	subs	r1, r1, r5
 8100f3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100f40:	fa1f f885 	uxth.w	r8, r5
 8100f44:	2701      	movs	r7, #1
 8100f46:	fbb1 fcfe 	udiv	ip, r1, lr
 8100f4a:	0c23      	lsrs	r3, r4, #16
 8100f4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100f50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f54:	fb08 f10c 	mul.w	r1, r8, ip
 8100f58:	4299      	cmp	r1, r3
 8100f5a:	d907      	bls.n	8100f6c <__udivmoddi4+0x124>
 8100f5c:	18eb      	adds	r3, r5, r3
 8100f5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100f62:	d202      	bcs.n	8100f6a <__udivmoddi4+0x122>
 8100f64:	4299      	cmp	r1, r3
 8100f66:	f200 80cd 	bhi.w	8101104 <__udivmoddi4+0x2bc>
 8100f6a:	4684      	mov	ip, r0
 8100f6c:	1a59      	subs	r1, r3, r1
 8100f6e:	b2a3      	uxth	r3, r4
 8100f70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f74:	fb0e 1410 	mls	r4, lr, r0, r1
 8100f78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100f7c:	fb08 f800 	mul.w	r8, r8, r0
 8100f80:	45a0      	cmp	r8, r4
 8100f82:	d907      	bls.n	8100f94 <__udivmoddi4+0x14c>
 8100f84:	192c      	adds	r4, r5, r4
 8100f86:	f100 33ff 	add.w	r3, r0, #4294967295
 8100f8a:	d202      	bcs.n	8100f92 <__udivmoddi4+0x14a>
 8100f8c:	45a0      	cmp	r8, r4
 8100f8e:	f200 80b6 	bhi.w	81010fe <__udivmoddi4+0x2b6>
 8100f92:	4618      	mov	r0, r3
 8100f94:	eba4 0408 	sub.w	r4, r4, r8
 8100f98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f9c:	e79f      	b.n	8100ede <__udivmoddi4+0x96>
 8100f9e:	f1c7 0c20 	rsb	ip, r7, #32
 8100fa2:	40bb      	lsls	r3, r7
 8100fa4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100fa8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100fac:	fa01 f407 	lsl.w	r4, r1, r7
 8100fb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100fb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100fb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100fbc:	4325      	orrs	r5, r4
 8100fbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100fc2:	0c2c      	lsrs	r4, r5, #16
 8100fc4:	fb08 3319 	mls	r3, r8, r9, r3
 8100fc8:	fa1f fa8e 	uxth.w	sl, lr
 8100fcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100fd0:	fb09 f40a 	mul.w	r4, r9, sl
 8100fd4:	429c      	cmp	r4, r3
 8100fd6:	fa02 f207 	lsl.w	r2, r2, r7
 8100fda:	fa00 f107 	lsl.w	r1, r0, r7
 8100fde:	d90b      	bls.n	8100ff8 <__udivmoddi4+0x1b0>
 8100fe0:	eb1e 0303 	adds.w	r3, lr, r3
 8100fe4:	f109 30ff 	add.w	r0, r9, #4294967295
 8100fe8:	f080 8087 	bcs.w	81010fa <__udivmoddi4+0x2b2>
 8100fec:	429c      	cmp	r4, r3
 8100fee:	f240 8084 	bls.w	81010fa <__udivmoddi4+0x2b2>
 8100ff2:	f1a9 0902 	sub.w	r9, r9, #2
 8100ff6:	4473      	add	r3, lr
 8100ff8:	1b1b      	subs	r3, r3, r4
 8100ffa:	b2ad      	uxth	r5, r5
 8100ffc:	fbb3 f0f8 	udiv	r0, r3, r8
 8101000:	fb08 3310 	mls	r3, r8, r0, r3
 8101004:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8101008:	fb00 fa0a 	mul.w	sl, r0, sl
 810100c:	45a2      	cmp	sl, r4
 810100e:	d908      	bls.n	8101022 <__udivmoddi4+0x1da>
 8101010:	eb1e 0404 	adds.w	r4, lr, r4
 8101014:	f100 33ff 	add.w	r3, r0, #4294967295
 8101018:	d26b      	bcs.n	81010f2 <__udivmoddi4+0x2aa>
 810101a:	45a2      	cmp	sl, r4
 810101c:	d969      	bls.n	81010f2 <__udivmoddi4+0x2aa>
 810101e:	3802      	subs	r0, #2
 8101020:	4474      	add	r4, lr
 8101022:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101026:	fba0 8902 	umull	r8, r9, r0, r2
 810102a:	eba4 040a 	sub.w	r4, r4, sl
 810102e:	454c      	cmp	r4, r9
 8101030:	46c2      	mov	sl, r8
 8101032:	464b      	mov	r3, r9
 8101034:	d354      	bcc.n	81010e0 <__udivmoddi4+0x298>
 8101036:	d051      	beq.n	81010dc <__udivmoddi4+0x294>
 8101038:	2e00      	cmp	r6, #0
 810103a:	d069      	beq.n	8101110 <__udivmoddi4+0x2c8>
 810103c:	ebb1 050a 	subs.w	r5, r1, sl
 8101040:	eb64 0403 	sbc.w	r4, r4, r3
 8101044:	fa04 fc0c 	lsl.w	ip, r4, ip
 8101048:	40fd      	lsrs	r5, r7
 810104a:	40fc      	lsrs	r4, r7
 810104c:	ea4c 0505 	orr.w	r5, ip, r5
 8101050:	e9c6 5400 	strd	r5, r4, [r6]
 8101054:	2700      	movs	r7, #0
 8101056:	e747      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8101058:	f1c2 0320 	rsb	r3, r2, #32
 810105c:	fa20 f703 	lsr.w	r7, r0, r3
 8101060:	4095      	lsls	r5, r2
 8101062:	fa01 f002 	lsl.w	r0, r1, r2
 8101066:	fa21 f303 	lsr.w	r3, r1, r3
 810106a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810106e:	4338      	orrs	r0, r7
 8101070:	0c01      	lsrs	r1, r0, #16
 8101072:	fbb3 f7fe 	udiv	r7, r3, lr
 8101076:	fa1f f885 	uxth.w	r8, r5
 810107a:	fb0e 3317 	mls	r3, lr, r7, r3
 810107e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101082:	fb07 f308 	mul.w	r3, r7, r8
 8101086:	428b      	cmp	r3, r1
 8101088:	fa04 f402 	lsl.w	r4, r4, r2
 810108c:	d907      	bls.n	810109e <__udivmoddi4+0x256>
 810108e:	1869      	adds	r1, r5, r1
 8101090:	f107 3cff 	add.w	ip, r7, #4294967295
 8101094:	d22f      	bcs.n	81010f6 <__udivmoddi4+0x2ae>
 8101096:	428b      	cmp	r3, r1
 8101098:	d92d      	bls.n	81010f6 <__udivmoddi4+0x2ae>
 810109a:	3f02      	subs	r7, #2
 810109c:	4429      	add	r1, r5
 810109e:	1acb      	subs	r3, r1, r3
 81010a0:	b281      	uxth	r1, r0
 81010a2:	fbb3 f0fe 	udiv	r0, r3, lr
 81010a6:	fb0e 3310 	mls	r3, lr, r0, r3
 81010aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010ae:	fb00 f308 	mul.w	r3, r0, r8
 81010b2:	428b      	cmp	r3, r1
 81010b4:	d907      	bls.n	81010c6 <__udivmoddi4+0x27e>
 81010b6:	1869      	adds	r1, r5, r1
 81010b8:	f100 3cff 	add.w	ip, r0, #4294967295
 81010bc:	d217      	bcs.n	81010ee <__udivmoddi4+0x2a6>
 81010be:	428b      	cmp	r3, r1
 81010c0:	d915      	bls.n	81010ee <__udivmoddi4+0x2a6>
 81010c2:	3802      	subs	r0, #2
 81010c4:	4429      	add	r1, r5
 81010c6:	1ac9      	subs	r1, r1, r3
 81010c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 81010cc:	e73b      	b.n	8100f46 <__udivmoddi4+0xfe>
 81010ce:	4637      	mov	r7, r6
 81010d0:	4630      	mov	r0, r6
 81010d2:	e709      	b.n	8100ee8 <__udivmoddi4+0xa0>
 81010d4:	4607      	mov	r7, r0
 81010d6:	e6e7      	b.n	8100ea8 <__udivmoddi4+0x60>
 81010d8:	4618      	mov	r0, r3
 81010da:	e6fb      	b.n	8100ed4 <__udivmoddi4+0x8c>
 81010dc:	4541      	cmp	r1, r8
 81010de:	d2ab      	bcs.n	8101038 <__udivmoddi4+0x1f0>
 81010e0:	ebb8 0a02 	subs.w	sl, r8, r2
 81010e4:	eb69 020e 	sbc.w	r2, r9, lr
 81010e8:	3801      	subs	r0, #1
 81010ea:	4613      	mov	r3, r2
 81010ec:	e7a4      	b.n	8101038 <__udivmoddi4+0x1f0>
 81010ee:	4660      	mov	r0, ip
 81010f0:	e7e9      	b.n	81010c6 <__udivmoddi4+0x27e>
 81010f2:	4618      	mov	r0, r3
 81010f4:	e795      	b.n	8101022 <__udivmoddi4+0x1da>
 81010f6:	4667      	mov	r7, ip
 81010f8:	e7d1      	b.n	810109e <__udivmoddi4+0x256>
 81010fa:	4681      	mov	r9, r0
 81010fc:	e77c      	b.n	8100ff8 <__udivmoddi4+0x1b0>
 81010fe:	3802      	subs	r0, #2
 8101100:	442c      	add	r4, r5
 8101102:	e747      	b.n	8100f94 <__udivmoddi4+0x14c>
 8101104:	f1ac 0c02 	sub.w	ip, ip, #2
 8101108:	442b      	add	r3, r5
 810110a:	e72f      	b.n	8100f6c <__udivmoddi4+0x124>
 810110c:	4638      	mov	r0, r7
 810110e:	e708      	b.n	8100f22 <__udivmoddi4+0xda>
 8101110:	4637      	mov	r7, r6
 8101112:	e6e9      	b.n	8100ee8 <__udivmoddi4+0xa0>

08101114 <__aeabi_idiv0>:
 8101114:	4770      	bx	lr
 8101116:	bf00      	nop

08101118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101118:	b480      	push	{r7}
 810111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810111c:	4b0b      	ldr	r3, [pc, #44]	; (810114c <SystemInit+0x34>)
 810111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101122:	4a0a      	ldr	r2, [pc, #40]	; (810114c <SystemInit+0x34>)
 8101124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810112c:	4b07      	ldr	r3, [pc, #28]	; (810114c <SystemInit+0x34>)
 810112e:	691b      	ldr	r3, [r3, #16]
 8101130:	4a06      	ldr	r2, [pc, #24]	; (810114c <SystemInit+0x34>)
 8101132:	f043 0310 	orr.w	r3, r3, #16
 8101136:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101138:	4b04      	ldr	r3, [pc, #16]	; (810114c <SystemInit+0x34>)
 810113a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810113e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101140:	bf00      	nop
 8101142:	46bd      	mov	sp, r7
 8101144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101148:	4770      	bx	lr
 810114a:	bf00      	nop
 810114c:	e000ed00 	.word	0xe000ed00

08101150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101150:	b580      	push	{r7, lr}
 8101152:	b082      	sub	sp, #8
 8101154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101156:	4b21      	ldr	r3, [pc, #132]	; (81011dc <MX_DMA_Init+0x8c>)
 8101158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810115c:	4a1f      	ldr	r2, [pc, #124]	; (81011dc <MX_DMA_Init+0x8c>)
 810115e:	f043 0301 	orr.w	r3, r3, #1
 8101162:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101166:	4b1d      	ldr	r3, [pc, #116]	; (81011dc <MX_DMA_Init+0x8c>)
 8101168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810116c:	f003 0301 	and.w	r3, r3, #1
 8101170:	607b      	str	r3, [r7, #4]
 8101172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101174:	4b19      	ldr	r3, [pc, #100]	; (81011dc <MX_DMA_Init+0x8c>)
 8101176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810117a:	4a18      	ldr	r2, [pc, #96]	; (81011dc <MX_DMA_Init+0x8c>)
 810117c:	f043 0302 	orr.w	r3, r3, #2
 8101180:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101184:	4b15      	ldr	r3, [pc, #84]	; (81011dc <MX_DMA_Init+0x8c>)
 8101186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810118a:	f003 0302 	and.w	r3, r3, #2
 810118e:	603b      	str	r3, [r7, #0]
 8101190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101192:	2200      	movs	r2, #0
 8101194:	2105      	movs	r1, #5
 8101196:	200b      	movs	r0, #11
 8101198:	f001 f98f 	bl	81024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810119c:	200b      	movs	r0, #11
 810119e:	f001 f9a6 	bl	81024ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 81011a2:	2200      	movs	r2, #0
 81011a4:	2105      	movs	r1, #5
 81011a6:	200c      	movs	r0, #12
 81011a8:	f001 f987 	bl	81024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81011ac:	200c      	movs	r0, #12
 81011ae:	f001 f99e 	bl	81024ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 81011b2:	2200      	movs	r2, #0
 81011b4:	2105      	movs	r1, #5
 81011b6:	203a      	movs	r0, #58	; 0x3a
 81011b8:	f001 f97f 	bl	81024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 81011bc:	203a      	movs	r0, #58	; 0x3a
 81011be:	f001 f996 	bl	81024ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 81011c2:	2200      	movs	r2, #0
 81011c4:	2105      	movs	r1, #5
 81011c6:	203b      	movs	r0, #59	; 0x3b
 81011c8:	f001 f977 	bl	81024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 81011cc:	203b      	movs	r0, #59	; 0x3b
 81011ce:	f001 f98e 	bl	81024ee <HAL_NVIC_EnableIRQ>

}
 81011d2:	bf00      	nop
 81011d4:	3708      	adds	r7, #8
 81011d6:	46bd      	mov	sp, r7
 81011d8:	bd80      	pop	{r7, pc}
 81011da:	bf00      	nop
 81011dc:	58024400 	.word	0x58024400

081011e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 81011e0:	b480      	push	{r7}
 81011e2:	b085      	sub	sp, #20
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	60f8      	str	r0, [r7, #12]
 81011e8:	60b9      	str	r1, [r7, #8]
 81011ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 81011ec:	68fb      	ldr	r3, [r7, #12]
 81011ee:	4a07      	ldr	r2, [pc, #28]	; (810120c <vApplicationGetIdleTaskMemory+0x2c>)
 81011f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 81011f2:	68bb      	ldr	r3, [r7, #8]
 81011f4:	4a06      	ldr	r2, [pc, #24]	; (8101210 <vApplicationGetIdleTaskMemory+0x30>)
 81011f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	2280      	movs	r2, #128	; 0x80
 81011fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 81011fe:	bf00      	nop
 8101200:	3714      	adds	r7, #20
 8101202:	46bd      	mov	sp, r7
 8101204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101208:	4770      	bx	lr
 810120a:	bf00      	nop
 810120c:	1000022c 	.word	0x1000022c
 8101210:	10000280 	.word	0x10000280

08101214 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8101214:	b5b0      	push	{r4, r5, r7, lr}
 8101216:	b088      	sub	sp, #32
 8101218:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 128);
 810121a:	4b0b      	ldr	r3, [pc, #44]	; (8101248 <MX_FREERTOS_Init+0x34>)
 810121c:	1d3c      	adds	r4, r7, #4
 810121e:	461d      	mov	r5, r3
 8101220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8101228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 810122c:	1d3b      	adds	r3, r7, #4
 810122e:	2100      	movs	r1, #0
 8101230:	4618      	mov	r0, r3
 8101232:	f008 f897 	bl	8109364 <osThreadCreate>
 8101236:	4602      	mov	r2, r0
 8101238:	4b04      	ldr	r3, [pc, #16]	; (810124c <MX_FREERTOS_Init+0x38>)
 810123a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
 810123c:	f010 f8fc 	bl	8111438 <initCortexM4>
  /* USER CODE END RTOS_THREADS */

}
 8101240:	bf00      	nop
 8101242:	3720      	adds	r7, #32
 8101244:	46bd      	mov	sp, r7
 8101246:	bdb0      	pop	{r4, r5, r7, pc}
 8101248:	08114d6c 	.word	0x08114d6c
 810124c:	1000ddc4 	.word	0x1000ddc4

08101250 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8101250:	b580      	push	{r7, lr}
 8101252:	b082      	sub	sp, #8
 8101254:	af00      	add	r7, sp, #0
 8101256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8101258:	2001      	movs	r0, #1
 810125a:	f008 f8cf 	bl	81093fc <osDelay>
 810125e:	e7fb      	b.n	8101258 <watchdogTask+0x8>

08101260 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101260:	b480      	push	{r7}
 8101262:	b087      	sub	sp, #28
 8101264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101266:	4b28      	ldr	r3, [pc, #160]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126c:	4a26      	ldr	r2, [pc, #152]	; (8101308 <MX_GPIO_Init+0xa8>)
 810126e:	f043 0310 	orr.w	r3, r3, #16
 8101272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101276:	4b24      	ldr	r3, [pc, #144]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810127c:	f003 0310 	and.w	r3, r3, #16
 8101280:	617b      	str	r3, [r7, #20]
 8101282:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101284:	4b20      	ldr	r3, [pc, #128]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810128a:	4a1f      	ldr	r2, [pc, #124]	; (8101308 <MX_GPIO_Init+0xa8>)
 810128c:	f043 0301 	orr.w	r3, r3, #1
 8101290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101294:	4b1c      	ldr	r3, [pc, #112]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810129a:	f003 0301 	and.w	r3, r3, #1
 810129e:	613b      	str	r3, [r7, #16]
 81012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012a2:	4b19      	ldr	r3, [pc, #100]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a8:	4a17      	ldr	r2, [pc, #92]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012aa:	f043 0302 	orr.w	r3, r3, #2
 81012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b2:	4b15      	ldr	r3, [pc, #84]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b8:	f003 0302 	and.w	r3, r3, #2
 81012bc:	60fb      	str	r3, [r7, #12]
 81012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012c0:	4b11      	ldr	r3, [pc, #68]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c6:	4a10      	ldr	r2, [pc, #64]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012c8:	f043 0308 	orr.w	r3, r3, #8
 81012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012d0:	4b0d      	ldr	r3, [pc, #52]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d6:	f003 0308 	and.w	r3, r3, #8
 81012da:	60bb      	str	r3, [r7, #8]
 81012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81012de:	4b0a      	ldr	r3, [pc, #40]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e4:	4a08      	ldr	r2, [pc, #32]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012e6:	f043 0304 	orr.w	r3, r3, #4
 81012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ee:	4b06      	ldr	r3, [pc, #24]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012f4:	f003 0304 	and.w	r3, r3, #4
 81012f8:	607b      	str	r3, [r7, #4]
 81012fa:	687b      	ldr	r3, [r7, #4]

}
 81012fc:	bf00      	nop
 81012fe:	371c      	adds	r7, #28
 8101300:	46bd      	mov	sp, r7
 8101302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101306:	4770      	bx	lr
 8101308:	58024400 	.word	0x58024400

0810130c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 810130c:	b580      	push	{r7, lr}
 810130e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8101310:	4b1c      	ldr	r3, [pc, #112]	; (8101384 <MX_I2C1_Init+0x78>)
 8101312:	4a1d      	ldr	r2, [pc, #116]	; (8101388 <MX_I2C1_Init+0x7c>)
 8101314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8101316:	4b1b      	ldr	r3, [pc, #108]	; (8101384 <MX_I2C1_Init+0x78>)
 8101318:	4a1c      	ldr	r2, [pc, #112]	; (810138c <MX_I2C1_Init+0x80>)
 810131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810131c:	4b19      	ldr	r3, [pc, #100]	; (8101384 <MX_I2C1_Init+0x78>)
 810131e:	2200      	movs	r2, #0
 8101320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101322:	4b18      	ldr	r3, [pc, #96]	; (8101384 <MX_I2C1_Init+0x78>)
 8101324:	2201      	movs	r2, #1
 8101326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101328:	4b16      	ldr	r3, [pc, #88]	; (8101384 <MX_I2C1_Init+0x78>)
 810132a:	2200      	movs	r2, #0
 810132c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810132e:	4b15      	ldr	r3, [pc, #84]	; (8101384 <MX_I2C1_Init+0x78>)
 8101330:	2200      	movs	r2, #0
 8101332:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101334:	4b13      	ldr	r3, [pc, #76]	; (8101384 <MX_I2C1_Init+0x78>)
 8101336:	2200      	movs	r2, #0
 8101338:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810133a:	4b12      	ldr	r3, [pc, #72]	; (8101384 <MX_I2C1_Init+0x78>)
 810133c:	2200      	movs	r2, #0
 810133e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101340:	4b10      	ldr	r3, [pc, #64]	; (8101384 <MX_I2C1_Init+0x78>)
 8101342:	2200      	movs	r2, #0
 8101344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101346:	480f      	ldr	r0, [pc, #60]	; (8101384 <MX_I2C1_Init+0x78>)
 8101348:	f003 ff5e 	bl	8105208 <HAL_I2C_Init>
 810134c:	4603      	mov	r3, r0
 810134e:	2b00      	cmp	r3, #0
 8101350:	d001      	beq.n	8101356 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101352:	f000 fa39 	bl	81017c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101356:	2100      	movs	r1, #0
 8101358:	480a      	ldr	r0, [pc, #40]	; (8101384 <MX_I2C1_Init+0x78>)
 810135a:	f004 ffd5 	bl	8106308 <HAL_I2CEx_ConfigAnalogFilter>
 810135e:	4603      	mov	r3, r0
 8101360:	2b00      	cmp	r3, #0
 8101362:	d001      	beq.n	8101368 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101364:	f000 fa30 	bl	81017c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101368:	2100      	movs	r1, #0
 810136a:	4806      	ldr	r0, [pc, #24]	; (8101384 <MX_I2C1_Init+0x78>)
 810136c:	f005 f817 	bl	810639e <HAL_I2CEx_ConfigDigitalFilter>
 8101370:	4603      	mov	r3, r0
 8101372:	2b00      	cmp	r3, #0
 8101374:	d001      	beq.n	810137a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101376:	f000 fa27 	bl	81017c8 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 810137a:	2001      	movs	r0, #1
 810137c:	f005 f85c 	bl	8106438 <HAL_I2CEx_EnableFastModePlus>

}
 8101380:	bf00      	nop
 8101382:	bd80      	pop	{r7, pc}
 8101384:	1000de14 	.word	0x1000de14
 8101388:	40005400 	.word	0x40005400
 810138c:	00401242 	.word	0x00401242

08101390 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101390:	b580      	push	{r7, lr}
 8101392:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8101394:	4b1b      	ldr	r3, [pc, #108]	; (8101404 <MX_I2C2_Init+0x74>)
 8101396:	4a1c      	ldr	r2, [pc, #112]	; (8101408 <MX_I2C2_Init+0x78>)
 8101398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 810139a:	4b1a      	ldr	r3, [pc, #104]	; (8101404 <MX_I2C2_Init+0x74>)
 810139c:	4a1b      	ldr	r2, [pc, #108]	; (810140c <MX_I2C2_Init+0x7c>)
 810139e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81013a0:	4b18      	ldr	r3, [pc, #96]	; (8101404 <MX_I2C2_Init+0x74>)
 81013a2:	2200      	movs	r2, #0
 81013a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81013a6:	4b17      	ldr	r3, [pc, #92]	; (8101404 <MX_I2C2_Init+0x74>)
 81013a8:	2201      	movs	r2, #1
 81013aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013ac:	4b15      	ldr	r3, [pc, #84]	; (8101404 <MX_I2C2_Init+0x74>)
 81013ae:	2200      	movs	r2, #0
 81013b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81013b2:	4b14      	ldr	r3, [pc, #80]	; (8101404 <MX_I2C2_Init+0x74>)
 81013b4:	2200      	movs	r2, #0
 81013b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013b8:	4b12      	ldr	r3, [pc, #72]	; (8101404 <MX_I2C2_Init+0x74>)
 81013ba:	2200      	movs	r2, #0
 81013bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013be:	4b11      	ldr	r3, [pc, #68]	; (8101404 <MX_I2C2_Init+0x74>)
 81013c0:	2200      	movs	r2, #0
 81013c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013c4:	4b0f      	ldr	r3, [pc, #60]	; (8101404 <MX_I2C2_Init+0x74>)
 81013c6:	2200      	movs	r2, #0
 81013c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81013ca:	480e      	ldr	r0, [pc, #56]	; (8101404 <MX_I2C2_Init+0x74>)
 81013cc:	f003 ff1c 	bl	8105208 <HAL_I2C_Init>
 81013d0:	4603      	mov	r3, r0
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d001      	beq.n	81013da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81013d6:	f000 f9f7 	bl	81017c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81013da:	2100      	movs	r1, #0
 81013dc:	4809      	ldr	r0, [pc, #36]	; (8101404 <MX_I2C2_Init+0x74>)
 81013de:	f004 ff93 	bl	8106308 <HAL_I2CEx_ConfigAnalogFilter>
 81013e2:	4603      	mov	r3, r0
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d001      	beq.n	81013ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81013e8:	f000 f9ee 	bl	81017c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81013ec:	2100      	movs	r1, #0
 81013ee:	4805      	ldr	r0, [pc, #20]	; (8101404 <MX_I2C2_Init+0x74>)
 81013f0:	f004 ffd5 	bl	810639e <HAL_I2CEx_ConfigDigitalFilter>
 81013f4:	4603      	mov	r3, r0
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d001      	beq.n	81013fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81013fa:	f000 f9e5 	bl	81017c8 <Error_Handler>
  }

}
 81013fe:	bf00      	nop
 8101400:	bd80      	pop	{r7, pc}
 8101402:	bf00      	nop
 8101404:	1000de60 	.word	0x1000de60
 8101408:	40005800 	.word	0x40005800
 810140c:	10c0ecff 	.word	0x10c0ecff

08101410 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8101410:	b580      	push	{r7, lr}
 8101412:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 8101414:	4b1b      	ldr	r3, [pc, #108]	; (8101484 <MX_I2C4_Init+0x74>)
 8101416:	4a1c      	ldr	r2, [pc, #112]	; (8101488 <MX_I2C4_Init+0x78>)
 8101418:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 810141a:	4b1a      	ldr	r3, [pc, #104]	; (8101484 <MX_I2C4_Init+0x74>)
 810141c:	4a1b      	ldr	r2, [pc, #108]	; (810148c <MX_I2C4_Init+0x7c>)
 810141e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8101420:	4b18      	ldr	r3, [pc, #96]	; (8101484 <MX_I2C4_Init+0x74>)
 8101422:	2200      	movs	r2, #0
 8101424:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101426:	4b17      	ldr	r3, [pc, #92]	; (8101484 <MX_I2C4_Init+0x74>)
 8101428:	2201      	movs	r2, #1
 810142a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810142c:	4b15      	ldr	r3, [pc, #84]	; (8101484 <MX_I2C4_Init+0x74>)
 810142e:	2200      	movs	r2, #0
 8101430:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8101432:	4b14      	ldr	r3, [pc, #80]	; (8101484 <MX_I2C4_Init+0x74>)
 8101434:	2200      	movs	r2, #0
 8101436:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101438:	4b12      	ldr	r3, [pc, #72]	; (8101484 <MX_I2C4_Init+0x74>)
 810143a:	2200      	movs	r2, #0
 810143c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810143e:	4b11      	ldr	r3, [pc, #68]	; (8101484 <MX_I2C4_Init+0x74>)
 8101440:	2200      	movs	r2, #0
 8101442:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101444:	4b0f      	ldr	r3, [pc, #60]	; (8101484 <MX_I2C4_Init+0x74>)
 8101446:	2200      	movs	r2, #0
 8101448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 810144a:	480e      	ldr	r0, [pc, #56]	; (8101484 <MX_I2C4_Init+0x74>)
 810144c:	f003 fedc 	bl	8105208 <HAL_I2C_Init>
 8101450:	4603      	mov	r3, r0
 8101452:	2b00      	cmp	r3, #0
 8101454:	d001      	beq.n	810145a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8101456:	f000 f9b7 	bl	81017c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810145a:	2100      	movs	r1, #0
 810145c:	4809      	ldr	r0, [pc, #36]	; (8101484 <MX_I2C4_Init+0x74>)
 810145e:	f004 ff53 	bl	8106308 <HAL_I2CEx_ConfigAnalogFilter>
 8101462:	4603      	mov	r3, r0
 8101464:	2b00      	cmp	r3, #0
 8101466:	d001      	beq.n	810146c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8101468:	f000 f9ae 	bl	81017c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 810146c:	2100      	movs	r1, #0
 810146e:	4805      	ldr	r0, [pc, #20]	; (8101484 <MX_I2C4_Init+0x74>)
 8101470:	f004 ff95 	bl	810639e <HAL_I2CEx_ConfigDigitalFilter>
 8101474:	4603      	mov	r3, r0
 8101476:	2b00      	cmp	r3, #0
 8101478:	d001      	beq.n	810147e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 810147a:	f000 f9a5 	bl	81017c8 <Error_Handler>
  }

}
 810147e:	bf00      	nop
 8101480:	bd80      	pop	{r7, pc}
 8101482:	bf00      	nop
 8101484:	1000ddc8 	.word	0x1000ddc8
 8101488:	58001c00 	.word	0x58001c00
 810148c:	10c0ecff 	.word	0x10c0ecff

08101490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101490:	b580      	push	{r7, lr}
 8101492:	b08e      	sub	sp, #56	; 0x38
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810149c:	2200      	movs	r2, #0
 810149e:	601a      	str	r2, [r3, #0]
 81014a0:	605a      	str	r2, [r3, #4]
 81014a2:	609a      	str	r2, [r3, #8]
 81014a4:	60da      	str	r2, [r3, #12]
 81014a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	4a4f      	ldr	r2, [pc, #316]	; (81015ec <HAL_I2C_MspInit+0x15c>)
 81014ae:	4293      	cmp	r3, r2
 81014b0:	d12e      	bne.n	8101510 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014b2:	4b4f      	ldr	r3, [pc, #316]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 81014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b8:	4a4d      	ldr	r2, [pc, #308]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 81014ba:	f043 0302 	orr.w	r3, r3, #2
 81014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014c2:	4b4b      	ldr	r3, [pc, #300]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 81014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c8:	f003 0302 	and.w	r3, r3, #2
 81014cc:	623b      	str	r3, [r7, #32]
 81014ce:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81014d0:	23c0      	movs	r3, #192	; 0xc0
 81014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81014d4:	2312      	movs	r3, #18
 81014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 81014d8:	2301      	movs	r3, #1
 81014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014dc:	2300      	movs	r3, #0
 81014de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81014e0:	2304      	movs	r3, #4
 81014e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014e8:	4619      	mov	r1, r3
 81014ea:	4842      	ldr	r0, [pc, #264]	; (81015f4 <HAL_I2C_MspInit+0x164>)
 81014ec:	f003 fb40 	bl	8104b70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81014f0:	4b3f      	ldr	r3, [pc, #252]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 81014f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014f6:	4a3e      	ldr	r2, [pc, #248]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 81014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81014fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101500:	4b3b      	ldr	r3, [pc, #236]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 8101502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810150a:	61fb      	str	r3, [r7, #28]
 810150c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 810150e:	e068      	b.n	81015e2 <HAL_I2C_MspInit+0x152>
  else if(i2cHandle->Instance==I2C2)
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	4a38      	ldr	r2, [pc, #224]	; (81015f8 <HAL_I2C_MspInit+0x168>)
 8101516:	4293      	cmp	r3, r2
 8101518:	d12f      	bne.n	810157a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810151a:	4b35      	ldr	r3, [pc, #212]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 810151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101520:	4a33      	ldr	r2, [pc, #204]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 8101522:	f043 0302 	orr.w	r3, r3, #2
 8101526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810152a:	4b31      	ldr	r3, [pc, #196]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 810152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101530:	f003 0302 	and.w	r3, r3, #2
 8101534:	61bb      	str	r3, [r7, #24]
 8101536:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810153e:	2312      	movs	r3, #18
 8101540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8101542:	2301      	movs	r3, #1
 8101544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101546:	2300      	movs	r3, #0
 8101548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 810154a:	2304      	movs	r3, #4
 810154c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101552:	4619      	mov	r1, r3
 8101554:	4827      	ldr	r0, [pc, #156]	; (81015f4 <HAL_I2C_MspInit+0x164>)
 8101556:	f003 fb0b 	bl	8104b70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 810155a:	4b25      	ldr	r3, [pc, #148]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 810155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101560:	4a23      	ldr	r2, [pc, #140]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 8101562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810156a:	4b21      	ldr	r3, [pc, #132]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 810156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101574:	617b      	str	r3, [r7, #20]
 8101576:	697b      	ldr	r3, [r7, #20]
}
 8101578:	e033      	b.n	81015e2 <HAL_I2C_MspInit+0x152>
  else if(i2cHandle->Instance==I2C4)
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	681b      	ldr	r3, [r3, #0]
 810157e:	4a1f      	ldr	r2, [pc, #124]	; (81015fc <HAL_I2C_MspInit+0x16c>)
 8101580:	4293      	cmp	r3, r2
 8101582:	d12e      	bne.n	81015e2 <HAL_I2C_MspInit+0x152>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101584:	4b1a      	ldr	r3, [pc, #104]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 8101586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810158a:	4a19      	ldr	r2, [pc, #100]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 810158c:	f043 0320 	orr.w	r3, r3, #32
 8101590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101594:	4b16      	ldr	r3, [pc, #88]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 8101596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810159a:	f003 0320 	and.w	r3, r3, #32
 810159e:	613b      	str	r3, [r7, #16]
 81015a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 81015a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 81015a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015a8:	2312      	movs	r3, #18
 81015aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 81015ac:	2301      	movs	r3, #1
 81015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015b0:	2300      	movs	r3, #0
 81015b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 81015b4:	2304      	movs	r3, #4
 81015b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015bc:	4619      	mov	r1, r3
 81015be:	4810      	ldr	r0, [pc, #64]	; (8101600 <HAL_I2C_MspInit+0x170>)
 81015c0:	f003 fad6 	bl	8104b70 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 81015c4:	4b0a      	ldr	r3, [pc, #40]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 81015c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81015ca:	4a09      	ldr	r2, [pc, #36]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 81015cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81015d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81015d4:	4b06      	ldr	r3, [pc, #24]	; (81015f0 <HAL_I2C_MspInit+0x160>)
 81015d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81015de:	60fb      	str	r3, [r7, #12]
 81015e0:	68fb      	ldr	r3, [r7, #12]
}
 81015e2:	bf00      	nop
 81015e4:	3738      	adds	r7, #56	; 0x38
 81015e6:	46bd      	mov	sp, r7
 81015e8:	bd80      	pop	{r7, pc}
 81015ea:	bf00      	nop
 81015ec:	40005400 	.word	0x40005400
 81015f0:	58024400 	.word	0x58024400
 81015f4:	58020400 	.word	0x58020400
 81015f8:	40005800 	.word	0x40005800
 81015fc:	58001c00 	.word	0x58001c00
 8101600:	58021400 	.word	0x58021400

08101604 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8101604:	b580      	push	{r7, lr}
 8101606:	b082      	sub	sp, #8
 8101608:	af00      	add	r7, sp, #0
 810160a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 810160c:	687b      	ldr	r3, [r7, #4]
 810160e:	681b      	ldr	r3, [r3, #0]
 8101610:	4a23      	ldr	r2, [pc, #140]	; (81016a0 <HAL_I2C_MspDeInit+0x9c>)
 8101612:	4293      	cmp	r3, r2
 8101614:	d110      	bne.n	8101638 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8101616:	4b23      	ldr	r3, [pc, #140]	; (81016a4 <HAL_I2C_MspDeInit+0xa0>)
 8101618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810161c:	4a21      	ldr	r2, [pc, #132]	; (81016a4 <HAL_I2C_MspDeInit+0xa0>)
 810161e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8101622:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8101626:	2140      	movs	r1, #64	; 0x40
 8101628:	481f      	ldr	r0, [pc, #124]	; (81016a8 <HAL_I2C_MspDeInit+0xa4>)
 810162a:	f003 fc51 	bl	8104ed0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 810162e:	2180      	movs	r1, #128	; 0x80
 8101630:	481d      	ldr	r0, [pc, #116]	; (81016a8 <HAL_I2C_MspDeInit+0xa4>)
 8101632:	f003 fc4d 	bl	8104ed0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 8101636:	e02e      	b.n	8101696 <HAL_I2C_MspDeInit+0x92>
  else if(i2cHandle->Instance==I2C2)
 8101638:	687b      	ldr	r3, [r7, #4]
 810163a:	681b      	ldr	r3, [r3, #0]
 810163c:	4a1b      	ldr	r2, [pc, #108]	; (81016ac <HAL_I2C_MspDeInit+0xa8>)
 810163e:	4293      	cmp	r3, r2
 8101640:	d112      	bne.n	8101668 <HAL_I2C_MspDeInit+0x64>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8101642:	4b18      	ldr	r3, [pc, #96]	; (81016a4 <HAL_I2C_MspDeInit+0xa0>)
 8101644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101648:	4a16      	ldr	r2, [pc, #88]	; (81016a4 <HAL_I2C_MspDeInit+0xa0>)
 810164a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 810164e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8101652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8101656:	4814      	ldr	r0, [pc, #80]	; (81016a8 <HAL_I2C_MspDeInit+0xa4>)
 8101658:	f003 fc3a 	bl	8104ed0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 810165c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101660:	4811      	ldr	r0, [pc, #68]	; (81016a8 <HAL_I2C_MspDeInit+0xa4>)
 8101662:	f003 fc35 	bl	8104ed0 <HAL_GPIO_DeInit>
}
 8101666:	e016      	b.n	8101696 <HAL_I2C_MspDeInit+0x92>
  else if(i2cHandle->Instance==I2C4)
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	681b      	ldr	r3, [r3, #0]
 810166c:	4a10      	ldr	r2, [pc, #64]	; (81016b0 <HAL_I2C_MspDeInit+0xac>)
 810166e:	4293      	cmp	r3, r2
 8101670:	d111      	bne.n	8101696 <HAL_I2C_MspDeInit+0x92>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8101672:	4b0c      	ldr	r3, [pc, #48]	; (81016a4 <HAL_I2C_MspDeInit+0xa0>)
 8101674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101678:	4a0a      	ldr	r2, [pc, #40]	; (81016a4 <HAL_I2C_MspDeInit+0xa0>)
 810167a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810167e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8101682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101686:	480b      	ldr	r0, [pc, #44]	; (81016b4 <HAL_I2C_MspDeInit+0xb0>)
 8101688:	f003 fc22 	bl	8104ed0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 810168c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101690:	4808      	ldr	r0, [pc, #32]	; (81016b4 <HAL_I2C_MspDeInit+0xb0>)
 8101692:	f003 fc1d 	bl	8104ed0 <HAL_GPIO_DeInit>
}
 8101696:	bf00      	nop
 8101698:	3708      	adds	r7, #8
 810169a:	46bd      	mov	sp, r7
 810169c:	bd80      	pop	{r7, pc}
 810169e:	bf00      	nop
 81016a0:	40005400 	.word	0x40005400
 81016a4:	58024400 	.word	0x58024400
 81016a8:	58020400 	.word	0x58020400
 81016ac:	40005800 	.word	0x40005800
 81016b0:	58001c00 	.word	0x58001c00
 81016b4:	58021400 	.word	0x58021400

081016b8 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 81016b8:	b580      	push	{r7, lr}
 81016ba:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 81016bc:	4b0b      	ldr	r3, [pc, #44]	; (81016ec <MX_IWDG2_Init+0x34>)
 81016be:	4a0c      	ldr	r2, [pc, #48]	; (81016f0 <MX_IWDG2_Init+0x38>)
 81016c0:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 81016c2:	4b0a      	ldr	r3, [pc, #40]	; (81016ec <MX_IWDG2_Init+0x34>)
 81016c4:	2200      	movs	r2, #0
 81016c6:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 81016c8:	4b08      	ldr	r3, [pc, #32]	; (81016ec <MX_IWDG2_Init+0x34>)
 81016ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 81016ce:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 81016d0:	4b06      	ldr	r3, [pc, #24]	; (81016ec <MX_IWDG2_Init+0x34>)
 81016d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 81016d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 81016d8:	4804      	ldr	r0, [pc, #16]	; (81016ec <MX_IWDG2_Init+0x34>)
 81016da:	f004 fed1 	bl	8106480 <HAL_IWDG_Init>
 81016de:	4603      	mov	r3, r0
 81016e0:	2b00      	cmp	r3, #0
 81016e2:	d001      	beq.n	81016e8 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 81016e4:	f000 f870 	bl	81017c8 <Error_Handler>
  }

}
 81016e8:	bf00      	nop
 81016ea:	bd80      	pop	{r7, pc}
 81016ec:	1000deac 	.word	0x1000deac
 81016f0:	58004c00 	.word	0x58004c00

081016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81016f4:	b580      	push	{r7, lr}
 81016f6:	b082      	sub	sp, #8
 81016f8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81016fa:	4b27      	ldr	r3, [pc, #156]	; (8101798 <main+0xa4>)
 81016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101700:	4a25      	ldr	r2, [pc, #148]	; (8101798 <main+0xa4>)
 8101702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810170a:	4b23      	ldr	r3, [pc, #140]	; (8101798 <main+0xa4>)
 810170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101714:	607b      	str	r3, [r7, #4]
 8101716:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101718:	2001      	movs	r0, #1
 810171a:	f003 fd63 	bl	81051e4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810171e:	f004 ff7b 	bl	8106618 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101722:	2201      	movs	r2, #1
 8101724:	2102      	movs	r1, #2
 8101726:	2000      	movs	r0, #0
 8101728:	f004 ff00 	bl	810652c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810172c:	4b1b      	ldr	r3, [pc, #108]	; (810179c <main+0xa8>)
 810172e:	681b      	ldr	r3, [r3, #0]
 8101730:	091b      	lsrs	r3, r3, #4
 8101732:	f003 030f 	and.w	r3, r3, #15
 8101736:	2b07      	cmp	r3, #7
 8101738:	d108      	bne.n	810174c <main+0x58>
 810173a:	4b19      	ldr	r3, [pc, #100]	; (81017a0 <main+0xac>)
 810173c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101740:	4a17      	ldr	r2, [pc, #92]	; (81017a0 <main+0xac>)
 8101742:	f043 0301 	orr.w	r3, r3, #1
 8101746:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810174a:	e007      	b.n	810175c <main+0x68>
 810174c:	4b14      	ldr	r3, [pc, #80]	; (81017a0 <main+0xac>)
 810174e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101752:	4a13      	ldr	r2, [pc, #76]	; (81017a0 <main+0xac>)
 8101754:	f043 0301 	orr.w	r3, r3, #1
 8101758:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810175c:	f000 fd62 	bl	8102224 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101760:	f7ff fd7e 	bl	8101260 <MX_GPIO_Init>
  MX_DMA_Init();
 8101764:	f7ff fcf4 	bl	8101150 <MX_DMA_Init>
  MX_IWDG2_Init();
 8101768:	f7ff ffa6 	bl	81016b8 <MX_IWDG2_Init>
  MX_FATFS_Init();
 810176c:	f007 fd16 	bl	810919c <MX_FATFS_Init>
  MX_I2C1_Init();
 8101770:	f7ff fdcc 	bl	810130c <MX_I2C1_Init>
  MX_SPI1_Init();
 8101774:	f000 f82c 	bl	81017d0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8101778:	f000 fc2e 	bl	8101fd8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 810177c:	f7ff fe08 	bl	8101390 <MX_I2C2_Init>
  MX_I2C4_Init();
 8101780:	f7ff fe46 	bl	8101410 <MX_I2C4_Init>
  MX_SPI3_Init();
 8101784:	f000 f87a 	bl	810187c <MX_SPI3_Init>
  MX_SPI4_Init();
 8101788:	f000 f8ce 	bl	8101928 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 810178c:	f7ff fd42 	bl	8101214 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8101790:	f007 fde1 	bl	8109356 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101794:	e7fe      	b.n	8101794 <main+0xa0>
 8101796:	bf00      	nop
 8101798:	58024400 	.word	0x58024400
 810179c:	e000ed00 	.word	0xe000ed00
 81017a0:	58026400 	.word	0x58026400

081017a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81017a4:	b580      	push	{r7, lr}
 81017a6:	b082      	sub	sp, #8
 81017a8:	af00      	add	r7, sp, #0
 81017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	681b      	ldr	r3, [r3, #0]
 81017b0:	4a04      	ldr	r2, [pc, #16]	; (81017c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81017b2:	4293      	cmp	r3, r2
 81017b4:	d101      	bne.n	81017ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81017b6:	f000 fd93 	bl	81022e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81017ba:	bf00      	nop
 81017bc:	3708      	adds	r7, #8
 81017be:	46bd      	mov	sp, r7
 81017c0:	bd80      	pop	{r7, pc}
 81017c2:	bf00      	nop
 81017c4:	40010400 	.word	0x40010400

081017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81017c8:	b480      	push	{r7}
 81017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81017cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81017ce:	e7fe      	b.n	81017ce <Error_Handler+0x6>

081017d0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 81017d0:	b580      	push	{r7, lr}
 81017d2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 81017d4:	4b27      	ldr	r3, [pc, #156]	; (8101874 <MX_SPI1_Init+0xa4>)
 81017d6:	4a28      	ldr	r2, [pc, #160]	; (8101878 <MX_SPI1_Init+0xa8>)
 81017d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81017da:	4b26      	ldr	r3, [pc, #152]	; (8101874 <MX_SPI1_Init+0xa4>)
 81017dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81017e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81017e2:	4b24      	ldr	r3, [pc, #144]	; (8101874 <MX_SPI1_Init+0xa4>)
 81017e4:	2200      	movs	r2, #0
 81017e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 81017e8:	4b22      	ldr	r3, [pc, #136]	; (8101874 <MX_SPI1_Init+0xa4>)
 81017ea:	2203      	movs	r2, #3
 81017ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81017ee:	4b21      	ldr	r3, [pc, #132]	; (8101874 <MX_SPI1_Init+0xa4>)
 81017f0:	2200      	movs	r2, #0
 81017f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81017f4:	4b1f      	ldr	r3, [pc, #124]	; (8101874 <MX_SPI1_Init+0xa4>)
 81017f6:	2200      	movs	r2, #0
 81017f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81017fa:	4b1e      	ldr	r3, [pc, #120]	; (8101874 <MX_SPI1_Init+0xa4>)
 81017fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101800:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8101802:	4b1c      	ldr	r3, [pc, #112]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101808:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810180a:	4b1a      	ldr	r3, [pc, #104]	; (8101874 <MX_SPI1_Init+0xa4>)
 810180c:	2200      	movs	r2, #0
 810180e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101810:	4b18      	ldr	r3, [pc, #96]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101812:	2200      	movs	r2, #0
 8101814:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101816:	4b17      	ldr	r3, [pc, #92]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101818:	2200      	movs	r2, #0
 810181a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810181c:	4b15      	ldr	r3, [pc, #84]	; (8101874 <MX_SPI1_Init+0xa4>)
 810181e:	2200      	movs	r2, #0
 8101820:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101822:	4b14      	ldr	r3, [pc, #80]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101828:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810182a:	4b12      	ldr	r3, [pc, #72]	; (8101874 <MX_SPI1_Init+0xa4>)
 810182c:	2200      	movs	r2, #0
 810182e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101830:	4b10      	ldr	r3, [pc, #64]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101832:	2200      	movs	r2, #0
 8101834:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101836:	4b0f      	ldr	r3, [pc, #60]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101838:	2200      	movs	r2, #0
 810183a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810183c:	4b0d      	ldr	r3, [pc, #52]	; (8101874 <MX_SPI1_Init+0xa4>)
 810183e:	2200      	movs	r2, #0
 8101840:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101842:	4b0c      	ldr	r3, [pc, #48]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101844:	2200      	movs	r2, #0
 8101846:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101848:	4b0a      	ldr	r3, [pc, #40]	; (8101874 <MX_SPI1_Init+0xa4>)
 810184a:	2200      	movs	r2, #0
 810184c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810184e:	4b09      	ldr	r3, [pc, #36]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101850:	2200      	movs	r2, #0
 8101852:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101854:	4b07      	ldr	r3, [pc, #28]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101856:	2200      	movs	r2, #0
 8101858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810185a:	4b06      	ldr	r3, [pc, #24]	; (8101874 <MX_SPI1_Init+0xa4>)
 810185c:	2200      	movs	r2, #0
 810185e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101860:	4804      	ldr	r0, [pc, #16]	; (8101874 <MX_SPI1_Init+0xa4>)
 8101862:	f005 fba7 	bl	8106fb4 <HAL_SPI_Init>
 8101866:	4603      	mov	r3, r0
 8101868:	2b00      	cmp	r3, #0
 810186a:	d001      	beq.n	8101870 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 810186c:	f7ff ffac 	bl	81017c8 <Error_Handler>
  }

}
 8101870:	bf00      	nop
 8101872:	bd80      	pop	{r7, pc}
 8101874:	1000dfcc 	.word	0x1000dfcc
 8101878:	40013000 	.word	0x40013000

0810187c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 810187c:	b580      	push	{r7, lr}
 810187e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8101880:	4b27      	ldr	r3, [pc, #156]	; (8101920 <MX_SPI3_Init+0xa4>)
 8101882:	4a28      	ldr	r2, [pc, #160]	; (8101924 <MX_SPI3_Init+0xa8>)
 8101884:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8101886:	4b26      	ldr	r3, [pc, #152]	; (8101920 <MX_SPI3_Init+0xa4>)
 8101888:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810188c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 810188e:	4b24      	ldr	r3, [pc, #144]	; (8101920 <MX_SPI3_Init+0xa4>)
 8101890:	2200      	movs	r2, #0
 8101892:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8101894:	4b22      	ldr	r3, [pc, #136]	; (8101920 <MX_SPI3_Init+0xa4>)
 8101896:	2203      	movs	r2, #3
 8101898:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 810189a:	4b21      	ldr	r3, [pc, #132]	; (8101920 <MX_SPI3_Init+0xa4>)
 810189c:	2200      	movs	r2, #0
 810189e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 81018a0:	4b1f      	ldr	r3, [pc, #124]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018a2:	2200      	movs	r2, #0
 81018a4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 81018a6:	4b1e      	ldr	r3, [pc, #120]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81018ac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 81018ae:	4b1c      	ldr	r3, [pc, #112]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81018b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81018b6:	4b1a      	ldr	r3, [pc, #104]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018b8:	2200      	movs	r2, #0
 81018ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 81018bc:	4b18      	ldr	r3, [pc, #96]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018be:	2200      	movs	r2, #0
 81018c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81018c2:	4b17      	ldr	r3, [pc, #92]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018c4:	2200      	movs	r2, #0
 81018c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 81018c8:	4b15      	ldr	r3, [pc, #84]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018ca:	2200      	movs	r2, #0
 81018cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81018ce:	4b14      	ldr	r3, [pc, #80]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81018d4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81018d6:	4b12      	ldr	r3, [pc, #72]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018d8:	2200      	movs	r2, #0
 81018da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81018dc:	4b10      	ldr	r3, [pc, #64]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018de:	2200      	movs	r2, #0
 81018e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81018e2:	4b0f      	ldr	r3, [pc, #60]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018e4:	2200      	movs	r2, #0
 81018e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81018e8:	4b0d      	ldr	r3, [pc, #52]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018ea:	2200      	movs	r2, #0
 81018ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81018ee:	4b0c      	ldr	r3, [pc, #48]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018f0:	2200      	movs	r2, #0
 81018f2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81018f4:	4b0a      	ldr	r3, [pc, #40]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018f6:	2200      	movs	r2, #0
 81018f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81018fa:	4b09      	ldr	r3, [pc, #36]	; (8101920 <MX_SPI3_Init+0xa4>)
 81018fc:	2200      	movs	r2, #0
 81018fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101900:	4b07      	ldr	r3, [pc, #28]	; (8101920 <MX_SPI3_Init+0xa4>)
 8101902:	2200      	movs	r2, #0
 8101904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101906:	4b06      	ldr	r3, [pc, #24]	; (8101920 <MX_SPI3_Init+0xa4>)
 8101908:	2200      	movs	r2, #0
 810190a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 810190c:	4804      	ldr	r0, [pc, #16]	; (8101920 <MX_SPI3_Init+0xa4>)
 810190e:	f005 fb51 	bl	8106fb4 <HAL_SPI_Init>
 8101912:	4603      	mov	r3, r0
 8101914:	2b00      	cmp	r3, #0
 8101916:	d001      	beq.n	810191c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8101918:	f7ff ff56 	bl	81017c8 <Error_Handler>
  }

}
 810191c:	bf00      	nop
 810191e:	bd80      	pop	{r7, pc}
 8101920:	1000debc 	.word	0x1000debc
 8101924:	40003c00 	.word	0x40003c00

08101928 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8101928:	b580      	push	{r7, lr}
 810192a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 810192c:	4b27      	ldr	r3, [pc, #156]	; (81019cc <MX_SPI4_Init+0xa4>)
 810192e:	4a28      	ldr	r2, [pc, #160]	; (81019d0 <MX_SPI4_Init+0xa8>)
 8101930:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8101932:	4b26      	ldr	r3, [pc, #152]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101934:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101938:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 810193a:	4b24      	ldr	r3, [pc, #144]	; (81019cc <MX_SPI4_Init+0xa4>)
 810193c:	2200      	movs	r2, #0
 810193e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8101940:	4b22      	ldr	r3, [pc, #136]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101942:	2203      	movs	r2, #3
 8101944:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101946:	4b21      	ldr	r3, [pc, #132]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101948:	2200      	movs	r2, #0
 810194a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 810194c:	4b1f      	ldr	r3, [pc, #124]	; (81019cc <MX_SPI4_Init+0xa4>)
 810194e:	2200      	movs	r2, #0
 8101950:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8101952:	4b1e      	ldr	r3, [pc, #120]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101954:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101958:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 810195a:	4b1c      	ldr	r3, [pc, #112]	; (81019cc <MX_SPI4_Init+0xa4>)
 810195c:	2200      	movs	r2, #0
 810195e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101960:	4b1a      	ldr	r3, [pc, #104]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101962:	2200      	movs	r2, #0
 8101964:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8101966:	4b19      	ldr	r3, [pc, #100]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101968:	2200      	movs	r2, #0
 810196a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810196c:	4b17      	ldr	r3, [pc, #92]	; (81019cc <MX_SPI4_Init+0xa4>)
 810196e:	2200      	movs	r2, #0
 8101970:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8101972:	4b16      	ldr	r3, [pc, #88]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101974:	2200      	movs	r2, #0
 8101976:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101978:	4b14      	ldr	r3, [pc, #80]	; (81019cc <MX_SPI4_Init+0xa4>)
 810197a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810197e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101980:	4b12      	ldr	r3, [pc, #72]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101982:	2200      	movs	r2, #0
 8101984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101986:	4b11      	ldr	r3, [pc, #68]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101988:	2200      	movs	r2, #0
 810198a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810198c:	4b0f      	ldr	r3, [pc, #60]	; (81019cc <MX_SPI4_Init+0xa4>)
 810198e:	2200      	movs	r2, #0
 8101990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101992:	4b0e      	ldr	r3, [pc, #56]	; (81019cc <MX_SPI4_Init+0xa4>)
 8101994:	2200      	movs	r2, #0
 8101996:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101998:	4b0c      	ldr	r3, [pc, #48]	; (81019cc <MX_SPI4_Init+0xa4>)
 810199a:	2200      	movs	r2, #0
 810199c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810199e:	4b0b      	ldr	r3, [pc, #44]	; (81019cc <MX_SPI4_Init+0xa4>)
 81019a0:	2200      	movs	r2, #0
 81019a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81019a4:	4b09      	ldr	r3, [pc, #36]	; (81019cc <MX_SPI4_Init+0xa4>)
 81019a6:	2200      	movs	r2, #0
 81019a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81019aa:	4b08      	ldr	r3, [pc, #32]	; (81019cc <MX_SPI4_Init+0xa4>)
 81019ac:	2200      	movs	r2, #0
 81019ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81019b0:	4b06      	ldr	r3, [pc, #24]	; (81019cc <MX_SPI4_Init+0xa4>)
 81019b2:	2200      	movs	r2, #0
 81019b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 81019b6:	4805      	ldr	r0, [pc, #20]	; (81019cc <MX_SPI4_Init+0xa4>)
 81019b8:	f005 fafc 	bl	8106fb4 <HAL_SPI_Init>
 81019bc:	4603      	mov	r3, r0
 81019be:	2b00      	cmp	r3, #0
 81019c0:	d001      	beq.n	81019c6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 81019c2:	f7ff ff01 	bl	81017c8 <Error_Handler>
  }

}
 81019c6:	bf00      	nop
 81019c8:	bd80      	pop	{r7, pc}
 81019ca:	bf00      	nop
 81019cc:	1000df44 	.word	0x1000df44
 81019d0:	40013400 	.word	0x40013400

081019d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81019d4:	b580      	push	{r7, lr}
 81019d6:	b090      	sub	sp, #64	; 0x40
 81019d8:	af00      	add	r7, sp, #0
 81019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81019e0:	2200      	movs	r2, #0
 81019e2:	601a      	str	r2, [r3, #0]
 81019e4:	605a      	str	r2, [r3, #4]
 81019e6:	609a      	str	r2, [r3, #8]
 81019e8:	60da      	str	r2, [r3, #12]
 81019ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	681b      	ldr	r3, [r3, #0]
 81019f0:	4aa0      	ldr	r2, [pc, #640]	; (8101c74 <HAL_SPI_MspInit+0x2a0>)
 81019f2:	4293      	cmp	r3, r2
 81019f4:	f040 80b2 	bne.w	8101b5c <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81019f8:	4b9f      	ldr	r3, [pc, #636]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 81019fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019fe:	4a9e      	ldr	r2, [pc, #632]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101a00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101a04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101a08:	4b9b      	ldr	r3, [pc, #620]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8101a14:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a16:	4b98      	ldr	r3, [pc, #608]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a1c:	4a96      	ldr	r2, [pc, #600]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101a1e:	f043 0301 	orr.w	r3, r3, #1
 8101a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a26:	4b94      	ldr	r3, [pc, #592]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a2c:	f003 0301 	and.w	r3, r3, #1
 8101a30:	627b      	str	r3, [r7, #36]	; 0x24
 8101a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a34:	4b90      	ldr	r3, [pc, #576]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a3a:	4a8f      	ldr	r2, [pc, #572]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101a3c:	f043 0308 	orr.w	r3, r3, #8
 8101a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a44:	4b8c      	ldr	r3, [pc, #560]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a4a:	f003 0308 	and.w	r3, r3, #8
 8101a4e:	623b      	str	r3, [r7, #32]
 8101a50:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8101a52:	2360      	movs	r3, #96	; 0x60
 8101a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a56:	2302      	movs	r3, #2
 8101a58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a5a:	2300      	movs	r3, #0
 8101a5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a5e:	2300      	movs	r3, #0
 8101a60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101a62:	2305      	movs	r3, #5
 8101a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101a6a:	4619      	mov	r1, r3
 8101a6c:	4883      	ldr	r0, [pc, #524]	; (8101c7c <HAL_SPI_MspInit+0x2a8>)
 8101a6e:	f003 f87f 	bl	8104b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101a72:	2380      	movs	r3, #128	; 0x80
 8101a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a76:	2302      	movs	r3, #2
 8101a78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a7a:	2300      	movs	r3, #0
 8101a7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a7e:	2300      	movs	r3, #0
 8101a80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101a82:	2305      	movs	r3, #5
 8101a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101a8a:	4619      	mov	r1, r3
 8101a8c:	487c      	ldr	r0, [pc, #496]	; (8101c80 <HAL_SPI_MspInit+0x2ac>)
 8101a8e:	f003 f86f 	bl	8104b70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101a92:	4b7c      	ldr	r3, [pc, #496]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101a94:	4a7c      	ldr	r2, [pc, #496]	; (8101c88 <HAL_SPI_MspInit+0x2b4>)
 8101a96:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101a98:	4b7a      	ldr	r3, [pc, #488]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101a9a:	2225      	movs	r2, #37	; 0x25
 8101a9c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101a9e:	4b79      	ldr	r3, [pc, #484]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101aa0:	2200      	movs	r2, #0
 8101aa2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101aa4:	4b77      	ldr	r3, [pc, #476]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101aa6:	2200      	movs	r2, #0
 8101aa8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101aaa:	4b76      	ldr	r3, [pc, #472]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101ab0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101ab2:	4b74      	ldr	r3, [pc, #464]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101ab4:	2200      	movs	r2, #0
 8101ab6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101ab8:	4b72      	ldr	r3, [pc, #456]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101aba:	2200      	movs	r2, #0
 8101abc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8101abe:	4b71      	ldr	r3, [pc, #452]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101ac0:	2200      	movs	r2, #0
 8101ac2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101ac4:	4b6f      	ldr	r3, [pc, #444]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101ac6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101aca:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101acc:	4b6d      	ldr	r3, [pc, #436]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101ace:	2200      	movs	r2, #0
 8101ad0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101ad2:	486c      	ldr	r0, [pc, #432]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101ad4:	f000 fd32 	bl	810253c <HAL_DMA_Init>
 8101ad8:	4603      	mov	r3, r0
 8101ada:	2b00      	cmp	r3, #0
 8101adc:	d001      	beq.n	8101ae2 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8101ade:	f7ff fe73 	bl	81017c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	4a67      	ldr	r2, [pc, #412]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101ae6:	67da      	str	r2, [r3, #124]	; 0x7c
 8101ae8:	4a66      	ldr	r2, [pc, #408]	; (8101c84 <HAL_SPI_MspInit+0x2b0>)
 8101aea:	687b      	ldr	r3, [r7, #4]
 8101aec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101aee:	4b67      	ldr	r3, [pc, #412]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101af0:	4a67      	ldr	r2, [pc, #412]	; (8101c90 <HAL_SPI_MspInit+0x2bc>)
 8101af2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101af4:	4b65      	ldr	r3, [pc, #404]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101af6:	2226      	movs	r2, #38	; 0x26
 8101af8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101afa:	4b64      	ldr	r3, [pc, #400]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101afc:	2240      	movs	r2, #64	; 0x40
 8101afe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101b00:	4b62      	ldr	r3, [pc, #392]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b02:	2200      	movs	r2, #0
 8101b04:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101b06:	4b61      	ldr	r3, [pc, #388]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101b0c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101b0e:	4b5f      	ldr	r3, [pc, #380]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b10:	2200      	movs	r2, #0
 8101b12:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101b14:	4b5d      	ldr	r3, [pc, #372]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b16:	2200      	movs	r2, #0
 8101b18:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101b1a:	4b5c      	ldr	r3, [pc, #368]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b1c:	2200      	movs	r2, #0
 8101b1e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101b20:	4b5a      	ldr	r3, [pc, #360]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101b26:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101b28:	4b58      	ldr	r3, [pc, #352]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b2a:	2200      	movs	r2, #0
 8101b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101b2e:	4857      	ldr	r0, [pc, #348]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b30:	f000 fd04 	bl	810253c <HAL_DMA_Init>
 8101b34:	4603      	mov	r3, r0
 8101b36:	2b00      	cmp	r3, #0
 8101b38:	d001      	beq.n	8101b3e <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 8101b3a:	f7ff fe45 	bl	81017c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	4a52      	ldr	r2, [pc, #328]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b42:	679a      	str	r2, [r3, #120]	; 0x78
 8101b44:	4a51      	ldr	r2, [pc, #324]	; (8101c8c <HAL_SPI_MspInit+0x2b8>)
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101b4a:	2200      	movs	r2, #0
 8101b4c:	2105      	movs	r1, #5
 8101b4e:	2023      	movs	r0, #35	; 0x23
 8101b50:	f000 fcb3 	bl	81024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101b54:	2023      	movs	r0, #35	; 0x23
 8101b56:	f000 fcca 	bl	81024ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8101b5a:	e086      	b.n	8101c6a <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI3)
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	681b      	ldr	r3, [r3, #0]
 8101b60:	4a4c      	ldr	r2, [pc, #304]	; (8101c94 <HAL_SPI_MspInit+0x2c0>)
 8101b62:	4293      	cmp	r3, r2
 8101b64:	d14e      	bne.n	8101c04 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8101b66:	4b44      	ldr	r3, [pc, #272]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b6c:	4a42      	ldr	r2, [pc, #264]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101b72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b76:	4b40      	ldr	r3, [pc, #256]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101b80:	61fb      	str	r3, [r7, #28]
 8101b82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b84:	4b3c      	ldr	r3, [pc, #240]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b8a:	4a3b      	ldr	r2, [pc, #236]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101b8c:	f043 0302 	orr.w	r3, r3, #2
 8101b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b94:	4b38      	ldr	r3, [pc, #224]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b9a:	f003 0302 	and.w	r3, r3, #2
 8101b9e:	61bb      	str	r3, [r7, #24]
 8101ba0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101ba2:	4b35      	ldr	r3, [pc, #212]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ba8:	4a33      	ldr	r2, [pc, #204]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101baa:	f043 0304 	orr.w	r3, r3, #4
 8101bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bb2:	4b31      	ldr	r3, [pc, #196]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bb8:	f003 0304 	and.w	r3, r3, #4
 8101bbc:	617b      	str	r3, [r7, #20]
 8101bbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101bc0:	2304      	movs	r3, #4
 8101bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bc4:	2302      	movs	r3, #2
 8101bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bc8:	2300      	movs	r3, #0
 8101bca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bcc:	2300      	movs	r3, #0
 8101bce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8101bd0:	2307      	movs	r3, #7
 8101bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bd8:	4619      	mov	r1, r3
 8101bda:	482f      	ldr	r0, [pc, #188]	; (8101c98 <HAL_SPI_MspInit+0x2c4>)
 8101bdc:	f002 ffc8 	bl	8104b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101be0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101be6:	2302      	movs	r3, #2
 8101be8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bea:	2300      	movs	r3, #0
 8101bec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bee:	2300      	movs	r3, #0
 8101bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8101bf2:	2306      	movs	r3, #6
 8101bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bfa:	4619      	mov	r1, r3
 8101bfc:	4827      	ldr	r0, [pc, #156]	; (8101c9c <HAL_SPI_MspInit+0x2c8>)
 8101bfe:	f002 ffb7 	bl	8104b70 <HAL_GPIO_Init>
}
 8101c02:	e032      	b.n	8101c6a <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI4)
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	681b      	ldr	r3, [r3, #0]
 8101c08:	4a25      	ldr	r2, [pc, #148]	; (8101ca0 <HAL_SPI_MspInit+0x2cc>)
 8101c0a:	4293      	cmp	r3, r2
 8101c0c:	d12d      	bne.n	8101c6a <HAL_SPI_MspInit+0x296>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8101c0e:	4b1a      	ldr	r3, [pc, #104]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c14:	4a18      	ldr	r2, [pc, #96]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101c16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8101c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101c1e:	4b16      	ldr	r3, [pc, #88]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101c28:	613b      	str	r3, [r7, #16]
 8101c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101c2c:	4b12      	ldr	r3, [pc, #72]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c32:	4a11      	ldr	r2, [pc, #68]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101c34:	f043 0310 	orr.w	r3, r3, #16
 8101c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c3c:	4b0e      	ldr	r3, [pc, #56]	; (8101c78 <HAL_SPI_MspInit+0x2a4>)
 8101c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c42:	f003 0310 	and.w	r3, r3, #16
 8101c46:	60fb      	str	r3, [r7, #12]
 8101c48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8101c4a:	2364      	movs	r3, #100	; 0x64
 8101c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c4e:	2302      	movs	r3, #2
 8101c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c52:	2300      	movs	r3, #0
 8101c54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c56:	2300      	movs	r3, #0
 8101c58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101c5a:	2305      	movs	r3, #5
 8101c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101c62:	4619      	mov	r1, r3
 8101c64:	480f      	ldr	r0, [pc, #60]	; (8101ca4 <HAL_SPI_MspInit+0x2d0>)
 8101c66:	f002 ff83 	bl	8104b70 <HAL_GPIO_Init>
}
 8101c6a:	bf00      	nop
 8101c6c:	3740      	adds	r7, #64	; 0x40
 8101c6e:	46bd      	mov	sp, r7
 8101c70:	bd80      	pop	{r7, pc}
 8101c72:	bf00      	nop
 8101c74:	40013000 	.word	0x40013000
 8101c78:	58024400 	.word	0x58024400
 8101c7c:	58020000 	.word	0x58020000
 8101c80:	58020c00 	.word	0x58020c00
 8101c84:	1000e054 	.word	0x1000e054
 8101c88:	40020010 	.word	0x40020010
 8101c8c:	1000e0cc 	.word	0x1000e0cc
 8101c90:	40020028 	.word	0x40020028
 8101c94:	40003c00 	.word	0x40003c00
 8101c98:	58020400 	.word	0x58020400
 8101c9c:	58020800 	.word	0x58020800
 8101ca0:	40013400 	.word	0x40013400
 8101ca4:	58021000 	.word	0x58021000

08101ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101ca8:	b580      	push	{r7, lr}
 8101caa:	b082      	sub	sp, #8
 8101cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101cae:	4b0c      	ldr	r3, [pc, #48]	; (8101ce0 <HAL_MspInit+0x38>)
 8101cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101cb4:	4a0a      	ldr	r2, [pc, #40]	; (8101ce0 <HAL_MspInit+0x38>)
 8101cb6:	f043 0302 	orr.w	r3, r3, #2
 8101cba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101cbe:	4b08      	ldr	r3, [pc, #32]	; (8101ce0 <HAL_MspInit+0x38>)
 8101cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101cc4:	f003 0302 	and.w	r3, r3, #2
 8101cc8:	607b      	str	r3, [r7, #4]
 8101cca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101ccc:	2200      	movs	r2, #0
 8101cce:	210f      	movs	r1, #15
 8101cd0:	f06f 0001 	mvn.w	r0, #1
 8101cd4:	f000 fbf1 	bl	81024ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101cd8:	bf00      	nop
 8101cda:	3708      	adds	r7, #8
 8101cdc:	46bd      	mov	sp, r7
 8101cde:	bd80      	pop	{r7, pc}
 8101ce0:	58024400 	.word	0x58024400

08101ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101ce4:	b580      	push	{r7, lr}
 8101ce6:	b08e      	sub	sp, #56	; 0x38
 8101ce8:	af00      	add	r7, sp, #0
 8101cea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	2b0f      	cmp	r3, #15
 8101cf0:	d844      	bhi.n	8101d7c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 8101cf2:	2200      	movs	r2, #0
 8101cf4:	6879      	ldr	r1, [r7, #4]
 8101cf6:	202c      	movs	r0, #44	; 0x2c
 8101cf8:	f000 fbdf 	bl	81024ba <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8101cfc:	202c      	movs	r0, #44	; 0x2c
 8101cfe:	f000 fbf6 	bl	81024ee <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101d02:	4a24      	ldr	r2, [pc, #144]	; (8101d94 <HAL_InitTick+0xb0>)
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8101d08:	4b23      	ldr	r3, [pc, #140]	; (8101d98 <HAL_InitTick+0xb4>)
 8101d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101d0e:	4a22      	ldr	r2, [pc, #136]	; (8101d98 <HAL_InitTick+0xb4>)
 8101d10:	f043 0302 	orr.w	r3, r3, #2
 8101d14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101d18:	4b1f      	ldr	r3, [pc, #124]	; (8101d98 <HAL_InitTick+0xb4>)
 8101d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101d1e:	f003 0302 	and.w	r3, r3, #2
 8101d22:	60bb      	str	r3, [r7, #8]
 8101d24:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101d26:	f107 020c 	add.w	r2, r7, #12
 8101d2a:	f107 0310 	add.w	r3, r7, #16
 8101d2e:	4611      	mov	r1, r2
 8101d30:	4618      	mov	r0, r3
 8101d32:	f004 fe4f 	bl	81069d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8101d36:	f004 fe37 	bl	81069a8 <HAL_RCC_GetPCLK2Freq>
 8101d3a:	4603      	mov	r3, r0
 8101d3c:	005b      	lsls	r3, r3, #1
 8101d3e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d42:	4a16      	ldr	r2, [pc, #88]	; (8101d9c <HAL_InitTick+0xb8>)
 8101d44:	fba2 2303 	umull	r2, r3, r2, r3
 8101d48:	0c9b      	lsrs	r3, r3, #18
 8101d4a:	3b01      	subs	r3, #1
 8101d4c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8101d4e:	4b14      	ldr	r3, [pc, #80]	; (8101da0 <HAL_InitTick+0xbc>)
 8101d50:	4a14      	ldr	r2, [pc, #80]	; (8101da4 <HAL_InitTick+0xc0>)
 8101d52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101d54:	4b12      	ldr	r3, [pc, #72]	; (8101da0 <HAL_InitTick+0xbc>)
 8101d56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101d5a:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101d5c:	4a10      	ldr	r2, [pc, #64]	; (8101da0 <HAL_InitTick+0xbc>)
 8101d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d60:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8101d62:	4b0f      	ldr	r3, [pc, #60]	; (8101da0 <HAL_InitTick+0xbc>)
 8101d64:	2200      	movs	r2, #0
 8101d66:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101d68:	4b0d      	ldr	r3, [pc, #52]	; (8101da0 <HAL_InitTick+0xbc>)
 8101d6a:	2200      	movs	r2, #0
 8101d6c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8101d6e:	480c      	ldr	r0, [pc, #48]	; (8101da0 <HAL_InitTick+0xbc>)
 8101d70:	f005 fcf7 	bl	8107762 <HAL_TIM_Base_Init>
 8101d74:	4603      	mov	r3, r0
 8101d76:	2b00      	cmp	r3, #0
 8101d78:	d107      	bne.n	8101d8a <HAL_InitTick+0xa6>
 8101d7a:	e001      	b.n	8101d80 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8101d7c:	2301      	movs	r3, #1
 8101d7e:	e005      	b.n	8101d8c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8101d80:	4807      	ldr	r0, [pc, #28]	; (8101da0 <HAL_InitTick+0xbc>)
 8101d82:	f005 fd4f 	bl	8107824 <HAL_TIM_Base_Start_IT>
 8101d86:	4603      	mov	r3, r0
 8101d88:	e000      	b.n	8101d8c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8101d8a:	2301      	movs	r3, #1
}
 8101d8c:	4618      	mov	r0, r3
 8101d8e:	3738      	adds	r7, #56	; 0x38
 8101d90:	46bd      	mov	sp, r7
 8101d92:	bd80      	pop	{r7, pc}
 8101d94:	10000008 	.word	0x10000008
 8101d98:	58024400 	.word	0x58024400
 8101d9c:	431bde83 	.word	0x431bde83
 8101da0:	1000e144 	.word	0x1000e144
 8101da4:	40010400 	.word	0x40010400

08101da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101da8:	b480      	push	{r7}
 8101daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101dac:	e7fe      	b.n	8101dac <NMI_Handler+0x4>

08101dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101dae:	b480      	push	{r7}
 8101db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101db2:	e7fe      	b.n	8101db2 <HardFault_Handler+0x4>

08101db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101db4:	b480      	push	{r7}
 8101db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101db8:	e7fe      	b.n	8101db8 <MemManage_Handler+0x4>

08101dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101dba:	b480      	push	{r7}
 8101dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101dbe:	e7fe      	b.n	8101dbe <BusFault_Handler+0x4>

08101dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101dc0:	b480      	push	{r7}
 8101dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101dc4:	e7fe      	b.n	8101dc4 <UsageFault_Handler+0x4>

08101dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101dc6:	b480      	push	{r7}
 8101dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101dca:	bf00      	nop
 8101dcc:	46bd      	mov	sp, r7
 8101dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dd2:	4770      	bx	lr

08101dd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101dd4:	b580      	push	{r7, lr}
 8101dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101dd8:	4802      	ldr	r0, [pc, #8]	; (8101de4 <DMA1_Stream0_IRQHandler+0x10>)
 8101dda:	f001 fbb7 	bl	810354c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101dde:	bf00      	nop
 8101de0:	bd80      	pop	{r7, pc}
 8101de2:	bf00      	nop
 8101de4:	1000e054 	.word	0x1000e054

08101de8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101de8:	b580      	push	{r7, lr}
 8101dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101dec:	4802      	ldr	r0, [pc, #8]	; (8101df8 <DMA1_Stream1_IRQHandler+0x10>)
 8101dee:	f001 fbad 	bl	810354c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101df2:	bf00      	nop
 8101df4:	bd80      	pop	{r7, pc}
 8101df6:	bf00      	nop
 8101df8:	1000e0cc 	.word	0x1000e0cc

08101dfc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101dfc:	b580      	push	{r7, lr}
 8101dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101e00:	4802      	ldr	r0, [pc, #8]	; (8101e0c <SPI1_IRQHandler+0x10>)
 8101e02:	f005 f9cf 	bl	81071a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101e06:	bf00      	nop
 8101e08:	bd80      	pop	{r7, pc}
 8101e0a:	bf00      	nop
 8101e0c:	1000dfcc 	.word	0x1000dfcc

08101e10 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8101e10:	b580      	push	{r7, lr}
 8101e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8101e14:	4802      	ldr	r0, [pc, #8]	; (8101e20 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101e16:	f005 fd3b 	bl	8107890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8101e1a:	bf00      	nop
 8101e1c:	bd80      	pop	{r7, pc}
 8101e1e:	bf00      	nop
 8101e20:	1000e144 	.word	0x1000e144

08101e24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8101e24:	b580      	push	{r7, lr}
 8101e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101e28:	4802      	ldr	r0, [pc, #8]	; (8101e34 <DMA2_Stream2_IRQHandler+0x10>)
 8101e2a:	f001 fb8f 	bl	810354c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8101e2e:	bf00      	nop
 8101e30:	bd80      	pop	{r7, pc}
 8101e32:	bf00      	nop
 8101e34:	1000e190 	.word	0x1000e190

08101e38 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101e38:	b580      	push	{r7, lr}
 8101e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101e3c:	4802      	ldr	r0, [pc, #8]	; (8101e48 <DMA2_Stream3_IRQHandler+0x10>)
 8101e3e:	f001 fb85 	bl	810354c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8101e42:	bf00      	nop
 8101e44:	bd80      	pop	{r7, pc}
 8101e46:	bf00      	nop
 8101e48:	1000e294 	.word	0x1000e294

08101e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101e4c:	b480      	push	{r7}
 8101e4e:	af00      	add	r7, sp, #0
	return 1;
 8101e50:	2301      	movs	r3, #1
}
 8101e52:	4618      	mov	r0, r3
 8101e54:	46bd      	mov	sp, r7
 8101e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e5a:	4770      	bx	lr

08101e5c <_kill>:

int _kill(int pid, int sig)
{
 8101e5c:	b580      	push	{r7, lr}
 8101e5e:	b082      	sub	sp, #8
 8101e60:	af00      	add	r7, sp, #0
 8101e62:	6078      	str	r0, [r7, #4]
 8101e64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101e66:	f010 f89b 	bl	8111fa0 <__errno>
 8101e6a:	4602      	mov	r2, r0
 8101e6c:	2316      	movs	r3, #22
 8101e6e:	6013      	str	r3, [r2, #0]
	return -1;
 8101e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e74:	4618      	mov	r0, r3
 8101e76:	3708      	adds	r7, #8
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	bd80      	pop	{r7, pc}

08101e7c <_exit>:

void _exit (int status)
{
 8101e7c:	b580      	push	{r7, lr}
 8101e7e:	b082      	sub	sp, #8
 8101e80:	af00      	add	r7, sp, #0
 8101e82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101e84:	f04f 31ff 	mov.w	r1, #4294967295
 8101e88:	6878      	ldr	r0, [r7, #4]
 8101e8a:	f7ff ffe7 	bl	8101e5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8101e8e:	e7fe      	b.n	8101e8e <_exit+0x12>

08101e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101e90:	b580      	push	{r7, lr}
 8101e92:	b086      	sub	sp, #24
 8101e94:	af00      	add	r7, sp, #0
 8101e96:	60f8      	str	r0, [r7, #12]
 8101e98:	60b9      	str	r1, [r7, #8]
 8101e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e9c:	2300      	movs	r3, #0
 8101e9e:	617b      	str	r3, [r7, #20]
 8101ea0:	e00a      	b.n	8101eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101ea2:	f3af 8000 	nop.w
 8101ea6:	4601      	mov	r1, r0
 8101ea8:	68bb      	ldr	r3, [r7, #8]
 8101eaa:	1c5a      	adds	r2, r3, #1
 8101eac:	60ba      	str	r2, [r7, #8]
 8101eae:	b2ca      	uxtb	r2, r1
 8101eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101eb2:	697b      	ldr	r3, [r7, #20]
 8101eb4:	3301      	adds	r3, #1
 8101eb6:	617b      	str	r3, [r7, #20]
 8101eb8:	697a      	ldr	r2, [r7, #20]
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	429a      	cmp	r2, r3
 8101ebe:	dbf0      	blt.n	8101ea2 <_read+0x12>
	}

return len;
 8101ec0:	687b      	ldr	r3, [r7, #4]
}
 8101ec2:	4618      	mov	r0, r3
 8101ec4:	3718      	adds	r7, #24
 8101ec6:	46bd      	mov	sp, r7
 8101ec8:	bd80      	pop	{r7, pc}

08101eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101eca:	b580      	push	{r7, lr}
 8101ecc:	b086      	sub	sp, #24
 8101ece:	af00      	add	r7, sp, #0
 8101ed0:	60f8      	str	r0, [r7, #12]
 8101ed2:	60b9      	str	r1, [r7, #8]
 8101ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ed6:	2300      	movs	r3, #0
 8101ed8:	617b      	str	r3, [r7, #20]
 8101eda:	e009      	b.n	8101ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101edc:	68bb      	ldr	r3, [r7, #8]
 8101ede:	1c5a      	adds	r2, r3, #1
 8101ee0:	60ba      	str	r2, [r7, #8]
 8101ee2:	781b      	ldrb	r3, [r3, #0]
 8101ee4:	4618      	mov	r0, r3
 8101ee6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101eea:	697b      	ldr	r3, [r7, #20]
 8101eec:	3301      	adds	r3, #1
 8101eee:	617b      	str	r3, [r7, #20]
 8101ef0:	697a      	ldr	r2, [r7, #20]
 8101ef2:	687b      	ldr	r3, [r7, #4]
 8101ef4:	429a      	cmp	r2, r3
 8101ef6:	dbf1      	blt.n	8101edc <_write+0x12>
	}
	return len;
 8101ef8:	687b      	ldr	r3, [r7, #4]
}
 8101efa:	4618      	mov	r0, r3
 8101efc:	3718      	adds	r7, #24
 8101efe:	46bd      	mov	sp, r7
 8101f00:	bd80      	pop	{r7, pc}

08101f02 <_close>:

int _close(int file)
{
 8101f02:	b480      	push	{r7}
 8101f04:	b083      	sub	sp, #12
 8101f06:	af00      	add	r7, sp, #0
 8101f08:	6078      	str	r0, [r7, #4]
	return -1;
 8101f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101f0e:	4618      	mov	r0, r3
 8101f10:	370c      	adds	r7, #12
 8101f12:	46bd      	mov	sp, r7
 8101f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f18:	4770      	bx	lr

08101f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101f1a:	b480      	push	{r7}
 8101f1c:	b083      	sub	sp, #12
 8101f1e:	af00      	add	r7, sp, #0
 8101f20:	6078      	str	r0, [r7, #4]
 8101f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101f24:	683b      	ldr	r3, [r7, #0]
 8101f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8101f2c:	2300      	movs	r3, #0
}
 8101f2e:	4618      	mov	r0, r3
 8101f30:	370c      	adds	r7, #12
 8101f32:	46bd      	mov	sp, r7
 8101f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f38:	4770      	bx	lr

08101f3a <_isatty>:

int _isatty(int file)
{
 8101f3a:	b480      	push	{r7}
 8101f3c:	b083      	sub	sp, #12
 8101f3e:	af00      	add	r7, sp, #0
 8101f40:	6078      	str	r0, [r7, #4]
	return 1;
 8101f42:	2301      	movs	r3, #1
}
 8101f44:	4618      	mov	r0, r3
 8101f46:	370c      	adds	r7, #12
 8101f48:	46bd      	mov	sp, r7
 8101f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4e:	4770      	bx	lr

08101f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101f50:	b480      	push	{r7}
 8101f52:	b085      	sub	sp, #20
 8101f54:	af00      	add	r7, sp, #0
 8101f56:	60f8      	str	r0, [r7, #12]
 8101f58:	60b9      	str	r1, [r7, #8]
 8101f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8101f5c:	2300      	movs	r3, #0
}
 8101f5e:	4618      	mov	r0, r3
 8101f60:	3714      	adds	r7, #20
 8101f62:	46bd      	mov	sp, r7
 8101f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f68:	4770      	bx	lr
	...

08101f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101f6c:	b580      	push	{r7, lr}
 8101f6e:	b086      	sub	sp, #24
 8101f70:	af00      	add	r7, sp, #0
 8101f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f74:	4a14      	ldr	r2, [pc, #80]	; (8101fc8 <_sbrk+0x5c>)
 8101f76:	4b15      	ldr	r3, [pc, #84]	; (8101fcc <_sbrk+0x60>)
 8101f78:	1ad3      	subs	r3, r2, r3
 8101f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101f7c:	697b      	ldr	r3, [r7, #20]
 8101f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101f80:	4b13      	ldr	r3, [pc, #76]	; (8101fd0 <_sbrk+0x64>)
 8101f82:	681b      	ldr	r3, [r3, #0]
 8101f84:	2b00      	cmp	r3, #0
 8101f86:	d102      	bne.n	8101f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101f88:	4b11      	ldr	r3, [pc, #68]	; (8101fd0 <_sbrk+0x64>)
 8101f8a:	4a12      	ldr	r2, [pc, #72]	; (8101fd4 <_sbrk+0x68>)
 8101f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101f8e:	4b10      	ldr	r3, [pc, #64]	; (8101fd0 <_sbrk+0x64>)
 8101f90:	681a      	ldr	r2, [r3, #0]
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	4413      	add	r3, r2
 8101f96:	693a      	ldr	r2, [r7, #16]
 8101f98:	429a      	cmp	r2, r3
 8101f9a:	d207      	bcs.n	8101fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101f9c:	f010 f800 	bl	8111fa0 <__errno>
 8101fa0:	4602      	mov	r2, r0
 8101fa2:	230c      	movs	r3, #12
 8101fa4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8101fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8101faa:	e009      	b.n	8101fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101fac:	4b08      	ldr	r3, [pc, #32]	; (8101fd0 <_sbrk+0x64>)
 8101fae:	681b      	ldr	r3, [r3, #0]
 8101fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101fb2:	4b07      	ldr	r3, [pc, #28]	; (8101fd0 <_sbrk+0x64>)
 8101fb4:	681a      	ldr	r2, [r3, #0]
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	4413      	add	r3, r2
 8101fba:	4a05      	ldr	r2, [pc, #20]	; (8101fd0 <_sbrk+0x64>)
 8101fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101fbe:	68fb      	ldr	r3, [r7, #12]
}
 8101fc0:	4618      	mov	r0, r3
 8101fc2:	3718      	adds	r7, #24
 8101fc4:	46bd      	mov	sp, r7
 8101fc6:	bd80      	pop	{r7, pc}
 8101fc8:	10048000 	.word	0x10048000
 8101fcc:	00000400 	.word	0x00000400
 8101fd0:	10000480 	.word	0x10000480
 8101fd4:	1000e788 	.word	0x1000e788

08101fd8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101fd8:	b580      	push	{r7, lr}
 8101fda:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101fdc:	4b22      	ldr	r3, [pc, #136]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8101fde:	4a23      	ldr	r2, [pc, #140]	; (810206c <MX_USART3_UART_Init+0x94>)
 8101fe0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101fe2:	4b21      	ldr	r3, [pc, #132]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8101fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101fe8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101fea:	4b1f      	ldr	r3, [pc, #124]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8101fec:	2200      	movs	r2, #0
 8101fee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101ff0:	4b1d      	ldr	r3, [pc, #116]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8101ff2:	2200      	movs	r2, #0
 8101ff4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101ff6:	4b1c      	ldr	r3, [pc, #112]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8101ff8:	2200      	movs	r2, #0
 8101ffa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101ffc:	4b1a      	ldr	r3, [pc, #104]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8101ffe:	220c      	movs	r2, #12
 8102000:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102002:	4b19      	ldr	r3, [pc, #100]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8102004:	2200      	movs	r2, #0
 8102006:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102008:	4b17      	ldr	r3, [pc, #92]	; (8102068 <MX_USART3_UART_Init+0x90>)
 810200a:	2200      	movs	r2, #0
 810200c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810200e:	4b16      	ldr	r3, [pc, #88]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8102010:	2200      	movs	r2, #0
 8102012:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102014:	4b14      	ldr	r3, [pc, #80]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8102016:	2200      	movs	r2, #0
 8102018:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810201a:	4b13      	ldr	r3, [pc, #76]	; (8102068 <MX_USART3_UART_Init+0x90>)
 810201c:	2200      	movs	r2, #0
 810201e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102020:	4811      	ldr	r0, [pc, #68]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8102022:	f005 fe35 	bl	8107c90 <HAL_UART_Init>
 8102026:	4603      	mov	r3, r0
 8102028:	2b00      	cmp	r3, #0
 810202a:	d001      	beq.n	8102030 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810202c:	f7ff fbcc 	bl	81017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102030:	2100      	movs	r1, #0
 8102032:	480d      	ldr	r0, [pc, #52]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8102034:	f006 ffcd 	bl	8108fd2 <HAL_UARTEx_SetTxFifoThreshold>
 8102038:	4603      	mov	r3, r0
 810203a:	2b00      	cmp	r3, #0
 810203c:	d001      	beq.n	8102042 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810203e:	f7ff fbc3 	bl	81017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102042:	2100      	movs	r1, #0
 8102044:	4808      	ldr	r0, [pc, #32]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8102046:	f007 f802 	bl	810904e <HAL_UARTEx_SetRxFifoThreshold>
 810204a:	4603      	mov	r3, r0
 810204c:	2b00      	cmp	r3, #0
 810204e:	d001      	beq.n	8102054 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102050:	f7ff fbba 	bl	81017c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102054:	4804      	ldr	r0, [pc, #16]	; (8102068 <MX_USART3_UART_Init+0x90>)
 8102056:	f006 ff83 	bl	8108f60 <HAL_UARTEx_DisableFifoMode>
 810205a:	4603      	mov	r3, r0
 810205c:	2b00      	cmp	r3, #0
 810205e:	d001      	beq.n	8102064 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102060:	f7ff fbb2 	bl	81017c8 <Error_Handler>
  }

}
 8102064:	bf00      	nop
 8102066:	bd80      	pop	{r7, pc}
 8102068:	1000e208 	.word	0x1000e208
 810206c:	40004800 	.word	0x40004800

08102070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102070:	b580      	push	{r7, lr}
 8102072:	b08a      	sub	sp, #40	; 0x28
 8102074:	af00      	add	r7, sp, #0
 8102076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102078:	f107 0314 	add.w	r3, r7, #20
 810207c:	2200      	movs	r2, #0
 810207e:	601a      	str	r2, [r3, #0]
 8102080:	605a      	str	r2, [r3, #4]
 8102082:	609a      	str	r2, [r3, #8]
 8102084:	60da      	str	r2, [r3, #12]
 8102086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	4a49      	ldr	r2, [pc, #292]	; (81021b4 <HAL_UART_MspInit+0x144>)
 810208e:	4293      	cmp	r3, r2
 8102090:	f040 808b 	bne.w	81021aa <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102094:	4b48      	ldr	r3, [pc, #288]	; (81021b8 <HAL_UART_MspInit+0x148>)
 8102096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810209a:	4a47      	ldr	r2, [pc, #284]	; (81021b8 <HAL_UART_MspInit+0x148>)
 810209c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81020a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81020a4:	4b44      	ldr	r3, [pc, #272]	; (81021b8 <HAL_UART_MspInit+0x148>)
 81020a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81020aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81020ae:	613b      	str	r3, [r7, #16]
 81020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81020b2:	4b41      	ldr	r3, [pc, #260]	; (81021b8 <HAL_UART_MspInit+0x148>)
 81020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020b8:	4a3f      	ldr	r2, [pc, #252]	; (81021b8 <HAL_UART_MspInit+0x148>)
 81020ba:	f043 0308 	orr.w	r3, r3, #8
 81020be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020c2:	4b3d      	ldr	r3, [pc, #244]	; (81021b8 <HAL_UART_MspInit+0x148>)
 81020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020c8:	f003 0308 	and.w	r3, r3, #8
 81020cc:	60fb      	str	r3, [r7, #12]
 81020ce:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81020d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 81020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020d6:	2302      	movs	r3, #2
 81020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020da:	2300      	movs	r3, #0
 81020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020de:	2300      	movs	r3, #0
 81020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81020e2:	2307      	movs	r3, #7
 81020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81020e6:	f107 0314 	add.w	r3, r7, #20
 81020ea:	4619      	mov	r1, r3
 81020ec:	4833      	ldr	r0, [pc, #204]	; (81021bc <HAL_UART_MspInit+0x14c>)
 81020ee:	f002 fd3f 	bl	8104b70 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
 81020f2:	4b33      	ldr	r3, [pc, #204]	; (81021c0 <HAL_UART_MspInit+0x150>)
 81020f4:	4a33      	ldr	r2, [pc, #204]	; (81021c4 <HAL_UART_MspInit+0x154>)
 81020f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 81020f8:	4b31      	ldr	r3, [pc, #196]	; (81021c0 <HAL_UART_MspInit+0x150>)
 81020fa:	222d      	movs	r2, #45	; 0x2d
 81020fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81020fe:	4b30      	ldr	r3, [pc, #192]	; (81021c0 <HAL_UART_MspInit+0x150>)
 8102100:	2200      	movs	r2, #0
 8102102:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102104:	4b2e      	ldr	r3, [pc, #184]	; (81021c0 <HAL_UART_MspInit+0x150>)
 8102106:	2200      	movs	r2, #0
 8102108:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 810210a:	4b2d      	ldr	r3, [pc, #180]	; (81021c0 <HAL_UART_MspInit+0x150>)
 810210c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102110:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102112:	4b2b      	ldr	r3, [pc, #172]	; (81021c0 <HAL_UART_MspInit+0x150>)
 8102114:	2200      	movs	r2, #0
 8102116:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102118:	4b29      	ldr	r3, [pc, #164]	; (81021c0 <HAL_UART_MspInit+0x150>)
 810211a:	2200      	movs	r2, #0
 810211c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 810211e:	4b28      	ldr	r3, [pc, #160]	; (81021c0 <HAL_UART_MspInit+0x150>)
 8102120:	2200      	movs	r2, #0
 8102122:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8102124:	4b26      	ldr	r3, [pc, #152]	; (81021c0 <HAL_UART_MspInit+0x150>)
 8102126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 810212a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810212c:	4b24      	ldr	r3, [pc, #144]	; (81021c0 <HAL_UART_MspInit+0x150>)
 810212e:	2200      	movs	r2, #0
 8102130:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8102132:	4823      	ldr	r0, [pc, #140]	; (81021c0 <HAL_UART_MspInit+0x150>)
 8102134:	f000 fa02 	bl	810253c <HAL_DMA_Init>
 8102138:	4603      	mov	r3, r0
 810213a:	2b00      	cmp	r3, #0
 810213c:	d001      	beq.n	8102142 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 810213e:	f7ff fb43 	bl	81017c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	4a1e      	ldr	r2, [pc, #120]	; (81021c0 <HAL_UART_MspInit+0x150>)
 8102146:	679a      	str	r2, [r3, #120]	; 0x78
 8102148:	4a1d      	ldr	r2, [pc, #116]	; (81021c0 <HAL_UART_MspInit+0x150>)
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
 810214e:	4b1e      	ldr	r3, [pc, #120]	; (81021c8 <HAL_UART_MspInit+0x158>)
 8102150:	4a1e      	ldr	r2, [pc, #120]	; (81021cc <HAL_UART_MspInit+0x15c>)
 8102152:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102154:	4b1c      	ldr	r3, [pc, #112]	; (81021c8 <HAL_UART_MspInit+0x158>)
 8102156:	222e      	movs	r2, #46	; 0x2e
 8102158:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810215a:	4b1b      	ldr	r3, [pc, #108]	; (81021c8 <HAL_UART_MspInit+0x158>)
 810215c:	2240      	movs	r2, #64	; 0x40
 810215e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102160:	4b19      	ldr	r3, [pc, #100]	; (81021c8 <HAL_UART_MspInit+0x158>)
 8102162:	2200      	movs	r2, #0
 8102164:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102166:	4b18      	ldr	r3, [pc, #96]	; (81021c8 <HAL_UART_MspInit+0x158>)
 8102168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810216c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810216e:	4b16      	ldr	r3, [pc, #88]	; (81021c8 <HAL_UART_MspInit+0x158>)
 8102170:	2200      	movs	r2, #0
 8102172:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102174:	4b14      	ldr	r3, [pc, #80]	; (81021c8 <HAL_UART_MspInit+0x158>)
 8102176:	2200      	movs	r2, #0
 8102178:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 810217a:	4b13      	ldr	r3, [pc, #76]	; (81021c8 <HAL_UART_MspInit+0x158>)
 810217c:	2200      	movs	r2, #0
 810217e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8102180:	4b11      	ldr	r3, [pc, #68]	; (81021c8 <HAL_UART_MspInit+0x158>)
 8102182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8102186:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102188:	4b0f      	ldr	r3, [pc, #60]	; (81021c8 <HAL_UART_MspInit+0x158>)
 810218a:	2200      	movs	r2, #0
 810218c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 810218e:	480e      	ldr	r0, [pc, #56]	; (81021c8 <HAL_UART_MspInit+0x158>)
 8102190:	f000 f9d4 	bl	810253c <HAL_DMA_Init>
 8102194:	4603      	mov	r3, r0
 8102196:	2b00      	cmp	r3, #0
 8102198:	d001      	beq.n	810219e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 810219a:	f7ff fb15 	bl	81017c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	4a09      	ldr	r2, [pc, #36]	; (81021c8 <HAL_UART_MspInit+0x158>)
 81021a2:	675a      	str	r2, [r3, #116]	; 0x74
 81021a4:	4a08      	ldr	r2, [pc, #32]	; (81021c8 <HAL_UART_MspInit+0x158>)
 81021a6:	687b      	ldr	r3, [r7, #4]
 81021a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 81021aa:	bf00      	nop
 81021ac:	3728      	adds	r7, #40	; 0x28
 81021ae:	46bd      	mov	sp, r7
 81021b0:	bd80      	pop	{r7, pc}
 81021b2:	bf00      	nop
 81021b4:	40004800 	.word	0x40004800
 81021b8:	58024400 	.word	0x58024400
 81021bc:	58020c00 	.word	0x58020c00
 81021c0:	1000e190 	.word	0x1000e190
 81021c4:	40020440 	.word	0x40020440
 81021c8:	1000e294 	.word	0x1000e294
 81021cc:	40020458 	.word	0x40020458

081021d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 81021d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102208 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 81021d4:	f7fe ffa0 	bl	8101118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 81021d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 81021da:	e003      	b.n	81021e4 <LoopCopyDataInit>

081021dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 81021dc:	4b0b      	ldr	r3, [pc, #44]	; (810220c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 81021de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 81021e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 81021e2:	3104      	adds	r1, #4

081021e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 81021e4:	480a      	ldr	r0, [pc, #40]	; (8102210 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 81021e6:	4b0b      	ldr	r3, [pc, #44]	; (8102214 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 81021e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 81021ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81021ec:	d3f6      	bcc.n	81021dc <CopyDataInit>
  ldr  r2, =_sbss
 81021ee:	4a0a      	ldr	r2, [pc, #40]	; (8102218 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 81021f0:	e002      	b.n	81021f8 <LoopFillZerobss>

081021f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 81021f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81021f4:	f842 3b04 	str.w	r3, [r2], #4

081021f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81021f8:	4b08      	ldr	r3, [pc, #32]	; (810221c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 81021fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81021fc:	d3f9      	bcc.n	81021f2 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 81021fe:	f00f fed5 	bl	8111fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102202:	f7ff fa77 	bl	81016f4 <main>
  bx  lr    
 8102206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102208:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 810220c:	0811615c 	.word	0x0811615c
  ldr  r0, =_sdata
 8102210:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8102214:	10000210 	.word	0x10000210
  ldr  r2, =_sbss
 8102218:	10000210 	.word	0x10000210
  ldr  r3, = _ebss
 810221c:	1000e784 	.word	0x1000e784

08102220 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102220:	e7fe      	b.n	8102220 <ADC3_IRQHandler>
	...

08102224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102224:	b580      	push	{r7, lr}
 8102226:	b082      	sub	sp, #8
 8102228:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810222a:	4b28      	ldr	r3, [pc, #160]	; (81022cc <HAL_Init+0xa8>)
 810222c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102230:	4a26      	ldr	r2, [pc, #152]	; (81022cc <HAL_Init+0xa8>)
 8102232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102236:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810223a:	4b24      	ldr	r3, [pc, #144]	; (81022cc <HAL_Init+0xa8>)
 810223c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102244:	603b      	str	r3, [r7, #0]
 8102246:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102248:	4b21      	ldr	r3, [pc, #132]	; (81022d0 <HAL_Init+0xac>)
 810224a:	681b      	ldr	r3, [r3, #0]
 810224c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102250:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102254:	4a1e      	ldr	r2, [pc, #120]	; (81022d0 <HAL_Init+0xac>)
 8102256:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810225a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810225c:	4b1c      	ldr	r3, [pc, #112]	; (81022d0 <HAL_Init+0xac>)
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	4a1b      	ldr	r2, [pc, #108]	; (81022d0 <HAL_Init+0xac>)
 8102262:	f043 0301 	orr.w	r3, r3, #1
 8102266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102268:	2003      	movs	r0, #3
 810226a:	f000 f91b 	bl	81024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810226e:	f004 f9e1 	bl	8106634 <HAL_RCC_GetSysClockFreq>
 8102272:	4601      	mov	r1, r0
 8102274:	4b15      	ldr	r3, [pc, #84]	; (81022cc <HAL_Init+0xa8>)
 8102276:	699b      	ldr	r3, [r3, #24]
 8102278:	0a1b      	lsrs	r3, r3, #8
 810227a:	f003 030f 	and.w	r3, r3, #15
 810227e:	4a15      	ldr	r2, [pc, #84]	; (81022d4 <HAL_Init+0xb0>)
 8102280:	5cd3      	ldrb	r3, [r2, r3]
 8102282:	f003 031f 	and.w	r3, r3, #31
 8102286:	fa21 f303 	lsr.w	r3, r1, r3
 810228a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810228c:	4b0f      	ldr	r3, [pc, #60]	; (81022cc <HAL_Init+0xa8>)
 810228e:	699b      	ldr	r3, [r3, #24]
 8102290:	f003 030f 	and.w	r3, r3, #15
 8102294:	4a0f      	ldr	r2, [pc, #60]	; (81022d4 <HAL_Init+0xb0>)
 8102296:	5cd3      	ldrb	r3, [r2, r3]
 8102298:	f003 031f 	and.w	r3, r3, #31
 810229c:	687a      	ldr	r2, [r7, #4]
 810229e:	fa22 f303 	lsr.w	r3, r2, r3
 81022a2:	4a0d      	ldr	r2, [pc, #52]	; (81022d8 <HAL_Init+0xb4>)
 81022a4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81022a6:	4b0c      	ldr	r3, [pc, #48]	; (81022d8 <HAL_Init+0xb4>)
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	4a0c      	ldr	r2, [pc, #48]	; (81022dc <HAL_Init+0xb8>)
 81022ac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81022ae:	2000      	movs	r0, #0
 81022b0:	f7ff fd18 	bl	8101ce4 <HAL_InitTick>
 81022b4:	4603      	mov	r3, r0
 81022b6:	2b00      	cmp	r3, #0
 81022b8:	d001      	beq.n	81022be <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81022ba:	2301      	movs	r3, #1
 81022bc:	e002      	b.n	81022c4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81022be:	f7ff fcf3 	bl	8101ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81022c2:	2300      	movs	r3, #0
}
 81022c4:	4618      	mov	r0, r3
 81022c6:	3708      	adds	r7, #8
 81022c8:	46bd      	mov	sp, r7
 81022ca:	bd80      	pop	{r7, pc}
 81022cc:	58024400 	.word	0x58024400
 81022d0:	40024400 	.word	0x40024400
 81022d4:	08115758 	.word	0x08115758
 81022d8:	10000004 	.word	0x10000004
 81022dc:	10000000 	.word	0x10000000

081022e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81022e0:	b480      	push	{r7}
 81022e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81022e4:	4b06      	ldr	r3, [pc, #24]	; (8102300 <HAL_IncTick+0x20>)
 81022e6:	781b      	ldrb	r3, [r3, #0]
 81022e8:	461a      	mov	r2, r3
 81022ea:	4b06      	ldr	r3, [pc, #24]	; (8102304 <HAL_IncTick+0x24>)
 81022ec:	681b      	ldr	r3, [r3, #0]
 81022ee:	4413      	add	r3, r2
 81022f0:	4a04      	ldr	r2, [pc, #16]	; (8102304 <HAL_IncTick+0x24>)
 81022f2:	6013      	str	r3, [r2, #0]
}
 81022f4:	bf00      	nop
 81022f6:	46bd      	mov	sp, r7
 81022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fc:	4770      	bx	lr
 81022fe:	bf00      	nop
 8102300:	1000000c 	.word	0x1000000c
 8102304:	1000e30c 	.word	0x1000e30c

08102308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102308:	b480      	push	{r7}
 810230a:	af00      	add	r7, sp, #0
  return uwTick;
 810230c:	4b03      	ldr	r3, [pc, #12]	; (810231c <HAL_GetTick+0x14>)
 810230e:	681b      	ldr	r3, [r3, #0]
}
 8102310:	4618      	mov	r0, r3
 8102312:	46bd      	mov	sp, r7
 8102314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102318:	4770      	bx	lr
 810231a:	bf00      	nop
 810231c:	1000e30c 	.word	0x1000e30c

08102320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102320:	b480      	push	{r7}
 8102322:	b085      	sub	sp, #20
 8102324:	af00      	add	r7, sp, #0
 8102326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102328:	687b      	ldr	r3, [r7, #4]
 810232a:	f003 0307 	and.w	r3, r3, #7
 810232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102330:	4b0c      	ldr	r3, [pc, #48]	; (8102364 <__NVIC_SetPriorityGrouping+0x44>)
 8102332:	68db      	ldr	r3, [r3, #12]
 8102334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102336:	68ba      	ldr	r2, [r7, #8]
 8102338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810233c:	4013      	ands	r3, r2
 810233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102340:	68fb      	ldr	r3, [r7, #12]
 8102342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102344:	68bb      	ldr	r3, [r7, #8]
 8102346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102352:	4a04      	ldr	r2, [pc, #16]	; (8102364 <__NVIC_SetPriorityGrouping+0x44>)
 8102354:	68bb      	ldr	r3, [r7, #8]
 8102356:	60d3      	str	r3, [r2, #12]
}
 8102358:	bf00      	nop
 810235a:	3714      	adds	r7, #20
 810235c:	46bd      	mov	sp, r7
 810235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102362:	4770      	bx	lr
 8102364:	e000ed00 	.word	0xe000ed00

08102368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102368:	b480      	push	{r7}
 810236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810236c:	4b04      	ldr	r3, [pc, #16]	; (8102380 <__NVIC_GetPriorityGrouping+0x18>)
 810236e:	68db      	ldr	r3, [r3, #12]
 8102370:	0a1b      	lsrs	r3, r3, #8
 8102372:	f003 0307 	and.w	r3, r3, #7
}
 8102376:	4618      	mov	r0, r3
 8102378:	46bd      	mov	sp, r7
 810237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810237e:	4770      	bx	lr
 8102380:	e000ed00 	.word	0xe000ed00

08102384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102384:	b480      	push	{r7}
 8102386:	b083      	sub	sp, #12
 8102388:	af00      	add	r7, sp, #0
 810238a:	4603      	mov	r3, r0
 810238c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810238e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102392:	2b00      	cmp	r3, #0
 8102394:	db0b      	blt.n	81023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102396:	88fb      	ldrh	r3, [r7, #6]
 8102398:	f003 021f 	and.w	r2, r3, #31
 810239c:	4907      	ldr	r1, [pc, #28]	; (81023bc <__NVIC_EnableIRQ+0x38>)
 810239e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023a2:	095b      	lsrs	r3, r3, #5
 81023a4:	2001      	movs	r0, #1
 81023a6:	fa00 f202 	lsl.w	r2, r0, r2
 81023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 81023ae:	bf00      	nop
 81023b0:	370c      	adds	r7, #12
 81023b2:	46bd      	mov	sp, r7
 81023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023b8:	4770      	bx	lr
 81023ba:	bf00      	nop
 81023bc:	e000e100 	.word	0xe000e100

081023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81023c0:	b480      	push	{r7}
 81023c2:	b083      	sub	sp, #12
 81023c4:	af00      	add	r7, sp, #0
 81023c6:	4603      	mov	r3, r0
 81023c8:	6039      	str	r1, [r7, #0]
 81023ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81023cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023d0:	2b00      	cmp	r3, #0
 81023d2:	db0a      	blt.n	81023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81023d4:	683b      	ldr	r3, [r7, #0]
 81023d6:	b2da      	uxtb	r2, r3
 81023d8:	490c      	ldr	r1, [pc, #48]	; (810240c <__NVIC_SetPriority+0x4c>)
 81023da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023de:	0112      	lsls	r2, r2, #4
 81023e0:	b2d2      	uxtb	r2, r2
 81023e2:	440b      	add	r3, r1
 81023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81023e8:	e00a      	b.n	8102400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81023ea:	683b      	ldr	r3, [r7, #0]
 81023ec:	b2da      	uxtb	r2, r3
 81023ee:	4908      	ldr	r1, [pc, #32]	; (8102410 <__NVIC_SetPriority+0x50>)
 81023f0:	88fb      	ldrh	r3, [r7, #6]
 81023f2:	f003 030f 	and.w	r3, r3, #15
 81023f6:	3b04      	subs	r3, #4
 81023f8:	0112      	lsls	r2, r2, #4
 81023fa:	b2d2      	uxtb	r2, r2
 81023fc:	440b      	add	r3, r1
 81023fe:	761a      	strb	r2, [r3, #24]
}
 8102400:	bf00      	nop
 8102402:	370c      	adds	r7, #12
 8102404:	46bd      	mov	sp, r7
 8102406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810240a:	4770      	bx	lr
 810240c:	e000e100 	.word	0xe000e100
 8102410:	e000ed00 	.word	0xe000ed00

08102414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102414:	b480      	push	{r7}
 8102416:	b089      	sub	sp, #36	; 0x24
 8102418:	af00      	add	r7, sp, #0
 810241a:	60f8      	str	r0, [r7, #12]
 810241c:	60b9      	str	r1, [r7, #8]
 810241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102420:	68fb      	ldr	r3, [r7, #12]
 8102422:	f003 0307 	and.w	r3, r3, #7
 8102426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102428:	69fb      	ldr	r3, [r7, #28]
 810242a:	f1c3 0307 	rsb	r3, r3, #7
 810242e:	2b04      	cmp	r3, #4
 8102430:	bf28      	it	cs
 8102432:	2304      	movcs	r3, #4
 8102434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102436:	69fb      	ldr	r3, [r7, #28]
 8102438:	3304      	adds	r3, #4
 810243a:	2b06      	cmp	r3, #6
 810243c:	d902      	bls.n	8102444 <NVIC_EncodePriority+0x30>
 810243e:	69fb      	ldr	r3, [r7, #28]
 8102440:	3b03      	subs	r3, #3
 8102442:	e000      	b.n	8102446 <NVIC_EncodePriority+0x32>
 8102444:	2300      	movs	r3, #0
 8102446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102448:	f04f 32ff 	mov.w	r2, #4294967295
 810244c:	69bb      	ldr	r3, [r7, #24]
 810244e:	fa02 f303 	lsl.w	r3, r2, r3
 8102452:	43da      	mvns	r2, r3
 8102454:	68bb      	ldr	r3, [r7, #8]
 8102456:	401a      	ands	r2, r3
 8102458:	697b      	ldr	r3, [r7, #20]
 810245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810245c:	f04f 31ff 	mov.w	r1, #4294967295
 8102460:	697b      	ldr	r3, [r7, #20]
 8102462:	fa01 f303 	lsl.w	r3, r1, r3
 8102466:	43d9      	mvns	r1, r3
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810246c:	4313      	orrs	r3, r2
         );
}
 810246e:	4618      	mov	r0, r3
 8102470:	3724      	adds	r7, #36	; 0x24
 8102472:	46bd      	mov	sp, r7
 8102474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102478:	4770      	bx	lr
	...

0810247c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 810247c:	b480      	push	{r7}
 810247e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102480:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8102484:	4b05      	ldr	r3, [pc, #20]	; (810249c <__NVIC_SystemReset+0x20>)
 8102486:	68db      	ldr	r3, [r3, #12]
 8102488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 810248c:	4903      	ldr	r1, [pc, #12]	; (810249c <__NVIC_SystemReset+0x20>)
 810248e:	4b04      	ldr	r3, [pc, #16]	; (81024a0 <__NVIC_SystemReset+0x24>)
 8102490:	4313      	orrs	r3, r2
 8102492:	60cb      	str	r3, [r1, #12]
 8102494:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8102498:	bf00      	nop
 810249a:	e7fd      	b.n	8102498 <__NVIC_SystemReset+0x1c>
 810249c:	e000ed00 	.word	0xe000ed00
 81024a0:	05fa0004 	.word	0x05fa0004

081024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81024a4:	b580      	push	{r7, lr}
 81024a6:	b082      	sub	sp, #8
 81024a8:	af00      	add	r7, sp, #0
 81024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81024ac:	6878      	ldr	r0, [r7, #4]
 81024ae:	f7ff ff37 	bl	8102320 <__NVIC_SetPriorityGrouping>
}
 81024b2:	bf00      	nop
 81024b4:	3708      	adds	r7, #8
 81024b6:	46bd      	mov	sp, r7
 81024b8:	bd80      	pop	{r7, pc}

081024ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81024ba:	b580      	push	{r7, lr}
 81024bc:	b086      	sub	sp, #24
 81024be:	af00      	add	r7, sp, #0
 81024c0:	4603      	mov	r3, r0
 81024c2:	60b9      	str	r1, [r7, #8]
 81024c4:	607a      	str	r2, [r7, #4]
 81024c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81024c8:	f7ff ff4e 	bl	8102368 <__NVIC_GetPriorityGrouping>
 81024cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81024ce:	687a      	ldr	r2, [r7, #4]
 81024d0:	68b9      	ldr	r1, [r7, #8]
 81024d2:	6978      	ldr	r0, [r7, #20]
 81024d4:	f7ff ff9e 	bl	8102414 <NVIC_EncodePriority>
 81024d8:	4602      	mov	r2, r0
 81024da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81024de:	4611      	mov	r1, r2
 81024e0:	4618      	mov	r0, r3
 81024e2:	f7ff ff6d 	bl	81023c0 <__NVIC_SetPriority>
}
 81024e6:	bf00      	nop
 81024e8:	3718      	adds	r7, #24
 81024ea:	46bd      	mov	sp, r7
 81024ec:	bd80      	pop	{r7, pc}

081024ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81024ee:	b580      	push	{r7, lr}
 81024f0:	b082      	sub	sp, #8
 81024f2:	af00      	add	r7, sp, #0
 81024f4:	4603      	mov	r3, r0
 81024f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81024f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81024fc:	4618      	mov	r0, r3
 81024fe:	f7ff ff41 	bl	8102384 <__NVIC_EnableIRQ>
}
 8102502:	bf00      	nop
 8102504:	3708      	adds	r7, #8
 8102506:	46bd      	mov	sp, r7
 8102508:	bd80      	pop	{r7, pc}

0810250a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 810250a:	b580      	push	{r7, lr}
 810250c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 810250e:	f7ff ffb5 	bl	810247c <__NVIC_SystemReset>
	...

08102514 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102514:	b480      	push	{r7}
 8102516:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102518:	4b07      	ldr	r3, [pc, #28]	; (8102538 <HAL_GetCurrentCPUID+0x24>)
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	091b      	lsrs	r3, r3, #4
 810251e:	f003 030f 	and.w	r3, r3, #15
 8102522:	2b07      	cmp	r3, #7
 8102524:	d101      	bne.n	810252a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102526:	2303      	movs	r3, #3
 8102528:	e000      	b.n	810252c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810252a:	2301      	movs	r3, #1
  }
}
 810252c:	4618      	mov	r0, r3
 810252e:	46bd      	mov	sp, r7
 8102530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102534:	4770      	bx	lr
 8102536:	bf00      	nop
 8102538:	e000ed00 	.word	0xe000ed00

0810253c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810253c:	b580      	push	{r7, lr}
 810253e:	b086      	sub	sp, #24
 8102540:	af00      	add	r7, sp, #0
 8102542:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102544:	f7ff fee0 	bl	8102308 <HAL_GetTick>
 8102548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	2b00      	cmp	r3, #0
 810254e:	d101      	bne.n	8102554 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8102550:	2301      	movs	r3, #1
 8102552:	e314      	b.n	8102b7e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	4a66      	ldr	r2, [pc, #408]	; (81026f4 <HAL_DMA_Init+0x1b8>)
 810255a:	4293      	cmp	r3, r2
 810255c:	d04a      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	4a65      	ldr	r2, [pc, #404]	; (81026f8 <HAL_DMA_Init+0x1bc>)
 8102564:	4293      	cmp	r3, r2
 8102566:	d045      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	4a63      	ldr	r2, [pc, #396]	; (81026fc <HAL_DMA_Init+0x1c0>)
 810256e:	4293      	cmp	r3, r2
 8102570:	d040      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	4a62      	ldr	r2, [pc, #392]	; (8102700 <HAL_DMA_Init+0x1c4>)
 8102578:	4293      	cmp	r3, r2
 810257a:	d03b      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	4a60      	ldr	r2, [pc, #384]	; (8102704 <HAL_DMA_Init+0x1c8>)
 8102582:	4293      	cmp	r3, r2
 8102584:	d036      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	4a5f      	ldr	r2, [pc, #380]	; (8102708 <HAL_DMA_Init+0x1cc>)
 810258c:	4293      	cmp	r3, r2
 810258e:	d031      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	4a5d      	ldr	r2, [pc, #372]	; (810270c <HAL_DMA_Init+0x1d0>)
 8102596:	4293      	cmp	r3, r2
 8102598:	d02c      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	681b      	ldr	r3, [r3, #0]
 810259e:	4a5c      	ldr	r2, [pc, #368]	; (8102710 <HAL_DMA_Init+0x1d4>)
 81025a0:	4293      	cmp	r3, r2
 81025a2:	d027      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	4a5a      	ldr	r2, [pc, #360]	; (8102714 <HAL_DMA_Init+0x1d8>)
 81025aa:	4293      	cmp	r3, r2
 81025ac:	d022      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	681b      	ldr	r3, [r3, #0]
 81025b2:	4a59      	ldr	r2, [pc, #356]	; (8102718 <HAL_DMA_Init+0x1dc>)
 81025b4:	4293      	cmp	r3, r2
 81025b6:	d01d      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	4a57      	ldr	r2, [pc, #348]	; (810271c <HAL_DMA_Init+0x1e0>)
 81025be:	4293      	cmp	r3, r2
 81025c0:	d018      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	681b      	ldr	r3, [r3, #0]
 81025c6:	4a56      	ldr	r2, [pc, #344]	; (8102720 <HAL_DMA_Init+0x1e4>)
 81025c8:	4293      	cmp	r3, r2
 81025ca:	d013      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	681b      	ldr	r3, [r3, #0]
 81025d0:	4a54      	ldr	r2, [pc, #336]	; (8102724 <HAL_DMA_Init+0x1e8>)
 81025d2:	4293      	cmp	r3, r2
 81025d4:	d00e      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	681b      	ldr	r3, [r3, #0]
 81025da:	4a53      	ldr	r2, [pc, #332]	; (8102728 <HAL_DMA_Init+0x1ec>)
 81025dc:	4293      	cmp	r3, r2
 81025de:	d009      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	4a51      	ldr	r2, [pc, #324]	; (810272c <HAL_DMA_Init+0x1f0>)
 81025e6:	4293      	cmp	r3, r2
 81025e8:	d004      	beq.n	81025f4 <HAL_DMA_Init+0xb8>
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	4a50      	ldr	r2, [pc, #320]	; (8102730 <HAL_DMA_Init+0x1f4>)
 81025f0:	4293      	cmp	r3, r2
 81025f2:	d101      	bne.n	81025f8 <HAL_DMA_Init+0xbc>
 81025f4:	2301      	movs	r3, #1
 81025f6:	e000      	b.n	81025fa <HAL_DMA_Init+0xbe>
 81025f8:	2300      	movs	r3, #0
 81025fa:	2b00      	cmp	r3, #0
 81025fc:	f000 813b 	beq.w	8102876 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	2200      	movs	r2, #0
 8102604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	2202      	movs	r2, #2
 810260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	681b      	ldr	r3, [r3, #0]
 8102614:	4a37      	ldr	r2, [pc, #220]	; (81026f4 <HAL_DMA_Init+0x1b8>)
 8102616:	4293      	cmp	r3, r2
 8102618:	d04a      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	681b      	ldr	r3, [r3, #0]
 810261e:	4a36      	ldr	r2, [pc, #216]	; (81026f8 <HAL_DMA_Init+0x1bc>)
 8102620:	4293      	cmp	r3, r2
 8102622:	d045      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 8102624:	687b      	ldr	r3, [r7, #4]
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	4a34      	ldr	r2, [pc, #208]	; (81026fc <HAL_DMA_Init+0x1c0>)
 810262a:	4293      	cmp	r3, r2
 810262c:	d040      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	681b      	ldr	r3, [r3, #0]
 8102632:	4a33      	ldr	r2, [pc, #204]	; (8102700 <HAL_DMA_Init+0x1c4>)
 8102634:	4293      	cmp	r3, r2
 8102636:	d03b      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	681b      	ldr	r3, [r3, #0]
 810263c:	4a31      	ldr	r2, [pc, #196]	; (8102704 <HAL_DMA_Init+0x1c8>)
 810263e:	4293      	cmp	r3, r2
 8102640:	d036      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	4a30      	ldr	r2, [pc, #192]	; (8102708 <HAL_DMA_Init+0x1cc>)
 8102648:	4293      	cmp	r3, r2
 810264a:	d031      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	4a2e      	ldr	r2, [pc, #184]	; (810270c <HAL_DMA_Init+0x1d0>)
 8102652:	4293      	cmp	r3, r2
 8102654:	d02c      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	4a2d      	ldr	r2, [pc, #180]	; (8102710 <HAL_DMA_Init+0x1d4>)
 810265c:	4293      	cmp	r3, r2
 810265e:	d027      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	681b      	ldr	r3, [r3, #0]
 8102664:	4a2b      	ldr	r2, [pc, #172]	; (8102714 <HAL_DMA_Init+0x1d8>)
 8102666:	4293      	cmp	r3, r2
 8102668:	d022      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	4a2a      	ldr	r2, [pc, #168]	; (8102718 <HAL_DMA_Init+0x1dc>)
 8102670:	4293      	cmp	r3, r2
 8102672:	d01d      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	4a28      	ldr	r2, [pc, #160]	; (810271c <HAL_DMA_Init+0x1e0>)
 810267a:	4293      	cmp	r3, r2
 810267c:	d018      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	4a27      	ldr	r2, [pc, #156]	; (8102720 <HAL_DMA_Init+0x1e4>)
 8102684:	4293      	cmp	r3, r2
 8102686:	d013      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	4a25      	ldr	r2, [pc, #148]	; (8102724 <HAL_DMA_Init+0x1e8>)
 810268e:	4293      	cmp	r3, r2
 8102690:	d00e      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	4a24      	ldr	r2, [pc, #144]	; (8102728 <HAL_DMA_Init+0x1ec>)
 8102698:	4293      	cmp	r3, r2
 810269a:	d009      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	4a22      	ldr	r2, [pc, #136]	; (810272c <HAL_DMA_Init+0x1f0>)
 81026a2:	4293      	cmp	r3, r2
 81026a4:	d004      	beq.n	81026b0 <HAL_DMA_Init+0x174>
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	4a21      	ldr	r2, [pc, #132]	; (8102730 <HAL_DMA_Init+0x1f4>)
 81026ac:	4293      	cmp	r3, r2
 81026ae:	d108      	bne.n	81026c2 <HAL_DMA_Init+0x186>
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	681a      	ldr	r2, [r3, #0]
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	f022 0201 	bic.w	r2, r2, #1
 81026be:	601a      	str	r2, [r3, #0]
 81026c0:	e007      	b.n	81026d2 <HAL_DMA_Init+0x196>
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	681a      	ldr	r2, [r3, #0]
 81026c8:	687b      	ldr	r3, [r7, #4]
 81026ca:	681b      	ldr	r3, [r3, #0]
 81026cc:	f022 0201 	bic.w	r2, r2, #1
 81026d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81026d2:	e02f      	b.n	8102734 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81026d4:	f7ff fe18 	bl	8102308 <HAL_GetTick>
 81026d8:	4602      	mov	r2, r0
 81026da:	693b      	ldr	r3, [r7, #16]
 81026dc:	1ad3      	subs	r3, r2, r3
 81026de:	2b05      	cmp	r3, #5
 81026e0:	d928      	bls.n	8102734 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	2220      	movs	r2, #32
 81026e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	2203      	movs	r2, #3
 81026ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81026f0:	2301      	movs	r3, #1
 81026f2:	e244      	b.n	8102b7e <HAL_DMA_Init+0x642>
 81026f4:	40020010 	.word	0x40020010
 81026f8:	40020028 	.word	0x40020028
 81026fc:	40020040 	.word	0x40020040
 8102700:	40020058 	.word	0x40020058
 8102704:	40020070 	.word	0x40020070
 8102708:	40020088 	.word	0x40020088
 810270c:	400200a0 	.word	0x400200a0
 8102710:	400200b8 	.word	0x400200b8
 8102714:	40020410 	.word	0x40020410
 8102718:	40020428 	.word	0x40020428
 810271c:	40020440 	.word	0x40020440
 8102720:	40020458 	.word	0x40020458
 8102724:	40020470 	.word	0x40020470
 8102728:	40020488 	.word	0x40020488
 810272c:	400204a0 	.word	0x400204a0
 8102730:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	681b      	ldr	r3, [r3, #0]
 8102738:	681b      	ldr	r3, [r3, #0]
 810273a:	f003 0301 	and.w	r3, r3, #1
 810273e:	2b00      	cmp	r3, #0
 8102740:	d1c8      	bne.n	81026d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810274a:	697a      	ldr	r2, [r7, #20]
 810274c:	4b84      	ldr	r3, [pc, #528]	; (8102960 <HAL_DMA_Init+0x424>)
 810274e:	4013      	ands	r3, r2
 8102750:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810275a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	691b      	ldr	r3, [r3, #16]
 8102760:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102766:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	699b      	ldr	r3, [r3, #24]
 810276c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102772:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	6a1b      	ldr	r3, [r3, #32]
 8102778:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810277a:	697a      	ldr	r2, [r7, #20]
 810277c:	4313      	orrs	r3, r2
 810277e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102784:	2b04      	cmp	r3, #4
 8102786:	d107      	bne.n	8102798 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810278c:	687b      	ldr	r3, [r7, #4]
 810278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102790:	4313      	orrs	r3, r2
 8102792:	697a      	ldr	r2, [r7, #20]
 8102794:	4313      	orrs	r3, r2
 8102796:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102798:	4b72      	ldr	r3, [pc, #456]	; (8102964 <HAL_DMA_Init+0x428>)
 810279a:	681b      	ldr	r3, [r3, #0]
 810279c:	0c1b      	lsrs	r3, r3, #16
 810279e:	041b      	lsls	r3, r3, #16
 81027a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81027a4:	d328      	bcc.n	81027f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	685b      	ldr	r3, [r3, #4]
 81027aa:	2b28      	cmp	r3, #40	; 0x28
 81027ac:	d903      	bls.n	81027b6 <HAL_DMA_Init+0x27a>
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	685b      	ldr	r3, [r3, #4]
 81027b2:	2b2e      	cmp	r3, #46	; 0x2e
 81027b4:	d917      	bls.n	81027e6 <HAL_DMA_Init+0x2aa>
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	685b      	ldr	r3, [r3, #4]
 81027ba:	2b3e      	cmp	r3, #62	; 0x3e
 81027bc:	d903      	bls.n	81027c6 <HAL_DMA_Init+0x28a>
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	685b      	ldr	r3, [r3, #4]
 81027c2:	2b42      	cmp	r3, #66	; 0x42
 81027c4:	d90f      	bls.n	81027e6 <HAL_DMA_Init+0x2aa>
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	685b      	ldr	r3, [r3, #4]
 81027ca:	2b46      	cmp	r3, #70	; 0x46
 81027cc:	d903      	bls.n	81027d6 <HAL_DMA_Init+0x29a>
 81027ce:	687b      	ldr	r3, [r7, #4]
 81027d0:	685b      	ldr	r3, [r3, #4]
 81027d2:	2b48      	cmp	r3, #72	; 0x48
 81027d4:	d907      	bls.n	81027e6 <HAL_DMA_Init+0x2aa>
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	685b      	ldr	r3, [r3, #4]
 81027da:	2b4e      	cmp	r3, #78	; 0x4e
 81027dc:	d905      	bls.n	81027ea <HAL_DMA_Init+0x2ae>
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	685b      	ldr	r3, [r3, #4]
 81027e2:	2b52      	cmp	r3, #82	; 0x52
 81027e4:	d801      	bhi.n	81027ea <HAL_DMA_Init+0x2ae>
 81027e6:	2301      	movs	r3, #1
 81027e8:	e000      	b.n	81027ec <HAL_DMA_Init+0x2b0>
 81027ea:	2300      	movs	r3, #0
 81027ec:	2b00      	cmp	r3, #0
 81027ee:	d003      	beq.n	81027f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81027f0:	697b      	ldr	r3, [r7, #20]
 81027f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81027f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	697a      	ldr	r2, [r7, #20]
 81027fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	695b      	ldr	r3, [r3, #20]
 8102806:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102808:	697b      	ldr	r3, [r7, #20]
 810280a:	f023 0307 	bic.w	r3, r3, #7
 810280e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102814:	697a      	ldr	r2, [r7, #20]
 8102816:	4313      	orrs	r3, r2
 8102818:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810281e:	2b04      	cmp	r3, #4
 8102820:	d117      	bne.n	8102852 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102826:	697a      	ldr	r2, [r7, #20]
 8102828:	4313      	orrs	r3, r2
 810282a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102830:	2b00      	cmp	r3, #0
 8102832:	d00e      	beq.n	8102852 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102834:	6878      	ldr	r0, [r7, #4]
 8102836:	f002 f811 	bl	810485c <DMA_CheckFifoParam>
 810283a:	4603      	mov	r3, r0
 810283c:	2b00      	cmp	r3, #0
 810283e:	d008      	beq.n	8102852 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	2240      	movs	r2, #64	; 0x40
 8102844:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	2201      	movs	r2, #1
 810284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 810284e:	2301      	movs	r3, #1
 8102850:	e195      	b.n	8102b7e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	681b      	ldr	r3, [r3, #0]
 8102856:	697a      	ldr	r2, [r7, #20]
 8102858:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810285a:	6878      	ldr	r0, [r7, #4]
 810285c:	f001 ff4c 	bl	81046f8 <DMA_CalcBaseAndBitshift>
 8102860:	4603      	mov	r3, r0
 8102862:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102868:	f003 031f 	and.w	r3, r3, #31
 810286c:	223f      	movs	r2, #63	; 0x3f
 810286e:	409a      	lsls	r2, r3
 8102870:	68bb      	ldr	r3, [r7, #8]
 8102872:	609a      	str	r2, [r3, #8]
 8102874:	e0cb      	b.n	8102a0e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	4a3b      	ldr	r2, [pc, #236]	; (8102968 <HAL_DMA_Init+0x42c>)
 810287c:	4293      	cmp	r3, r2
 810287e:	d022      	beq.n	81028c6 <HAL_DMA_Init+0x38a>
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	4a39      	ldr	r2, [pc, #228]	; (810296c <HAL_DMA_Init+0x430>)
 8102886:	4293      	cmp	r3, r2
 8102888:	d01d      	beq.n	81028c6 <HAL_DMA_Init+0x38a>
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	4a38      	ldr	r2, [pc, #224]	; (8102970 <HAL_DMA_Init+0x434>)
 8102890:	4293      	cmp	r3, r2
 8102892:	d018      	beq.n	81028c6 <HAL_DMA_Init+0x38a>
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	4a36      	ldr	r2, [pc, #216]	; (8102974 <HAL_DMA_Init+0x438>)
 810289a:	4293      	cmp	r3, r2
 810289c:	d013      	beq.n	81028c6 <HAL_DMA_Init+0x38a>
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	681b      	ldr	r3, [r3, #0]
 81028a2:	4a35      	ldr	r2, [pc, #212]	; (8102978 <HAL_DMA_Init+0x43c>)
 81028a4:	4293      	cmp	r3, r2
 81028a6:	d00e      	beq.n	81028c6 <HAL_DMA_Init+0x38a>
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	4a33      	ldr	r2, [pc, #204]	; (810297c <HAL_DMA_Init+0x440>)
 81028ae:	4293      	cmp	r3, r2
 81028b0:	d009      	beq.n	81028c6 <HAL_DMA_Init+0x38a>
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	681b      	ldr	r3, [r3, #0]
 81028b6:	4a32      	ldr	r2, [pc, #200]	; (8102980 <HAL_DMA_Init+0x444>)
 81028b8:	4293      	cmp	r3, r2
 81028ba:	d004      	beq.n	81028c6 <HAL_DMA_Init+0x38a>
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	681b      	ldr	r3, [r3, #0]
 81028c0:	4a30      	ldr	r2, [pc, #192]	; (8102984 <HAL_DMA_Init+0x448>)
 81028c2:	4293      	cmp	r3, r2
 81028c4:	d101      	bne.n	81028ca <HAL_DMA_Init+0x38e>
 81028c6:	2301      	movs	r3, #1
 81028c8:	e000      	b.n	81028cc <HAL_DMA_Init+0x390>
 81028ca:	2300      	movs	r3, #0
 81028cc:	2b00      	cmp	r3, #0
 81028ce:	f000 8095 	beq.w	81029fc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	4a24      	ldr	r2, [pc, #144]	; (8102968 <HAL_DMA_Init+0x42c>)
 81028d8:	4293      	cmp	r3, r2
 81028da:	d021      	beq.n	8102920 <HAL_DMA_Init+0x3e4>
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	681b      	ldr	r3, [r3, #0]
 81028e0:	4a22      	ldr	r2, [pc, #136]	; (810296c <HAL_DMA_Init+0x430>)
 81028e2:	4293      	cmp	r3, r2
 81028e4:	d01c      	beq.n	8102920 <HAL_DMA_Init+0x3e4>
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	681b      	ldr	r3, [r3, #0]
 81028ea:	4a21      	ldr	r2, [pc, #132]	; (8102970 <HAL_DMA_Init+0x434>)
 81028ec:	4293      	cmp	r3, r2
 81028ee:	d017      	beq.n	8102920 <HAL_DMA_Init+0x3e4>
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	4a1f      	ldr	r2, [pc, #124]	; (8102974 <HAL_DMA_Init+0x438>)
 81028f6:	4293      	cmp	r3, r2
 81028f8:	d012      	beq.n	8102920 <HAL_DMA_Init+0x3e4>
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	4a1e      	ldr	r2, [pc, #120]	; (8102978 <HAL_DMA_Init+0x43c>)
 8102900:	4293      	cmp	r3, r2
 8102902:	d00d      	beq.n	8102920 <HAL_DMA_Init+0x3e4>
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	4a1c      	ldr	r2, [pc, #112]	; (810297c <HAL_DMA_Init+0x440>)
 810290a:	4293      	cmp	r3, r2
 810290c:	d008      	beq.n	8102920 <HAL_DMA_Init+0x3e4>
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	681b      	ldr	r3, [r3, #0]
 8102912:	4a1b      	ldr	r2, [pc, #108]	; (8102980 <HAL_DMA_Init+0x444>)
 8102914:	4293      	cmp	r3, r2
 8102916:	d003      	beq.n	8102920 <HAL_DMA_Init+0x3e4>
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	681b      	ldr	r3, [r3, #0]
 810291c:	4a19      	ldr	r2, [pc, #100]	; (8102984 <HAL_DMA_Init+0x448>)
 810291e:	4293      	cmp	r3, r2
 8102920:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	2200      	movs	r2, #0
 8102926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	2202      	movs	r2, #2
 810292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	681b      	ldr	r3, [r3, #0]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810293a:	697b      	ldr	r3, [r7, #20]
 810293c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102940:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8102944:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	689b      	ldr	r3, [r3, #8]
 810294a:	2b40      	cmp	r3, #64	; 0x40
 810294c:	d01c      	beq.n	8102988 <HAL_DMA_Init+0x44c>
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	689b      	ldr	r3, [r3, #8]
 8102952:	2b80      	cmp	r3, #128	; 0x80
 8102954:	d102      	bne.n	810295c <HAL_DMA_Init+0x420>
 8102956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810295a:	e016      	b.n	810298a <HAL_DMA_Init+0x44e>
 810295c:	2300      	movs	r3, #0
 810295e:	e014      	b.n	810298a <HAL_DMA_Init+0x44e>
 8102960:	fe10803f 	.word	0xfe10803f
 8102964:	5c001000 	.word	0x5c001000
 8102968:	58025408 	.word	0x58025408
 810296c:	5802541c 	.word	0x5802541c
 8102970:	58025430 	.word	0x58025430
 8102974:	58025444 	.word	0x58025444
 8102978:	58025458 	.word	0x58025458
 810297c:	5802546c 	.word	0x5802546c
 8102980:	58025480 	.word	0x58025480
 8102984:	58025494 	.word	0x58025494
 8102988:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810298a:	687a      	ldr	r2, [r7, #4]
 810298c:	68d2      	ldr	r2, [r2, #12]
 810298e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	691b      	ldr	r3, [r3, #16]
 8102996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	695b      	ldr	r3, [r3, #20]
 810299e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81029a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	699b      	ldr	r3, [r3, #24]
 81029a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81029a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	69db      	ldr	r3, [r3, #28]
 81029ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81029b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	6a1b      	ldr	r3, [r3, #32]
 81029b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81029b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81029ba:	697a      	ldr	r2, [r7, #20]
 81029bc:	4313      	orrs	r3, r2
 81029be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	697a      	ldr	r2, [r7, #20]
 81029c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	461a      	mov	r2, r3
 81029ce:	4b6e      	ldr	r3, [pc, #440]	; (8102b88 <HAL_DMA_Init+0x64c>)
 81029d0:	4413      	add	r3, r2
 81029d2:	4a6e      	ldr	r2, [pc, #440]	; (8102b8c <HAL_DMA_Init+0x650>)
 81029d4:	fba2 2303 	umull	r2, r3, r2, r3
 81029d8:	091b      	lsrs	r3, r3, #4
 81029da:	009a      	lsls	r2, r3, #2
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81029e0:	6878      	ldr	r0, [r7, #4]
 81029e2:	f001 fe89 	bl	81046f8 <DMA_CalcBaseAndBitshift>
 81029e6:	4603      	mov	r3, r0
 81029e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81029ee:	f003 031f 	and.w	r3, r3, #31
 81029f2:	2201      	movs	r2, #1
 81029f4:	409a      	lsls	r2, r3
 81029f6:	68fb      	ldr	r3, [r7, #12]
 81029f8:	605a      	str	r2, [r3, #4]
 81029fa:	e008      	b.n	8102a0e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	2240      	movs	r2, #64	; 0x40
 8102a00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	2203      	movs	r2, #3
 8102a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8102a0a:	2301      	movs	r3, #1
 8102a0c:	e0b7      	b.n	8102b7e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	4a5f      	ldr	r2, [pc, #380]	; (8102b90 <HAL_DMA_Init+0x654>)
 8102a14:	4293      	cmp	r3, r2
 8102a16:	d072      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	681b      	ldr	r3, [r3, #0]
 8102a1c:	4a5d      	ldr	r2, [pc, #372]	; (8102b94 <HAL_DMA_Init+0x658>)
 8102a1e:	4293      	cmp	r3, r2
 8102a20:	d06d      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	4a5c      	ldr	r2, [pc, #368]	; (8102b98 <HAL_DMA_Init+0x65c>)
 8102a28:	4293      	cmp	r3, r2
 8102a2a:	d068      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	4a5a      	ldr	r2, [pc, #360]	; (8102b9c <HAL_DMA_Init+0x660>)
 8102a32:	4293      	cmp	r3, r2
 8102a34:	d063      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	4a59      	ldr	r2, [pc, #356]	; (8102ba0 <HAL_DMA_Init+0x664>)
 8102a3c:	4293      	cmp	r3, r2
 8102a3e:	d05e      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	4a57      	ldr	r2, [pc, #348]	; (8102ba4 <HAL_DMA_Init+0x668>)
 8102a46:	4293      	cmp	r3, r2
 8102a48:	d059      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	4a56      	ldr	r2, [pc, #344]	; (8102ba8 <HAL_DMA_Init+0x66c>)
 8102a50:	4293      	cmp	r3, r2
 8102a52:	d054      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	4a54      	ldr	r2, [pc, #336]	; (8102bac <HAL_DMA_Init+0x670>)
 8102a5a:	4293      	cmp	r3, r2
 8102a5c:	d04f      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	4a53      	ldr	r2, [pc, #332]	; (8102bb0 <HAL_DMA_Init+0x674>)
 8102a64:	4293      	cmp	r3, r2
 8102a66:	d04a      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	681b      	ldr	r3, [r3, #0]
 8102a6c:	4a51      	ldr	r2, [pc, #324]	; (8102bb4 <HAL_DMA_Init+0x678>)
 8102a6e:	4293      	cmp	r3, r2
 8102a70:	d045      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	4a50      	ldr	r2, [pc, #320]	; (8102bb8 <HAL_DMA_Init+0x67c>)
 8102a78:	4293      	cmp	r3, r2
 8102a7a:	d040      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	4a4e      	ldr	r2, [pc, #312]	; (8102bbc <HAL_DMA_Init+0x680>)
 8102a82:	4293      	cmp	r3, r2
 8102a84:	d03b      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	4a4d      	ldr	r2, [pc, #308]	; (8102bc0 <HAL_DMA_Init+0x684>)
 8102a8c:	4293      	cmp	r3, r2
 8102a8e:	d036      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	4a4b      	ldr	r2, [pc, #300]	; (8102bc4 <HAL_DMA_Init+0x688>)
 8102a96:	4293      	cmp	r3, r2
 8102a98:	d031      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	681b      	ldr	r3, [r3, #0]
 8102a9e:	4a4a      	ldr	r2, [pc, #296]	; (8102bc8 <HAL_DMA_Init+0x68c>)
 8102aa0:	4293      	cmp	r3, r2
 8102aa2:	d02c      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	4a48      	ldr	r2, [pc, #288]	; (8102bcc <HAL_DMA_Init+0x690>)
 8102aaa:	4293      	cmp	r3, r2
 8102aac:	d027      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	681b      	ldr	r3, [r3, #0]
 8102ab2:	4a47      	ldr	r2, [pc, #284]	; (8102bd0 <HAL_DMA_Init+0x694>)
 8102ab4:	4293      	cmp	r3, r2
 8102ab6:	d022      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	4a45      	ldr	r2, [pc, #276]	; (8102bd4 <HAL_DMA_Init+0x698>)
 8102abe:	4293      	cmp	r3, r2
 8102ac0:	d01d      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	4a44      	ldr	r2, [pc, #272]	; (8102bd8 <HAL_DMA_Init+0x69c>)
 8102ac8:	4293      	cmp	r3, r2
 8102aca:	d018      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	4a42      	ldr	r2, [pc, #264]	; (8102bdc <HAL_DMA_Init+0x6a0>)
 8102ad2:	4293      	cmp	r3, r2
 8102ad4:	d013      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102ad6:	687b      	ldr	r3, [r7, #4]
 8102ad8:	681b      	ldr	r3, [r3, #0]
 8102ada:	4a41      	ldr	r2, [pc, #260]	; (8102be0 <HAL_DMA_Init+0x6a4>)
 8102adc:	4293      	cmp	r3, r2
 8102ade:	d00e      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	4a3f      	ldr	r2, [pc, #252]	; (8102be4 <HAL_DMA_Init+0x6a8>)
 8102ae6:	4293      	cmp	r3, r2
 8102ae8:	d009      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	681b      	ldr	r3, [r3, #0]
 8102aee:	4a3e      	ldr	r2, [pc, #248]	; (8102be8 <HAL_DMA_Init+0x6ac>)
 8102af0:	4293      	cmp	r3, r2
 8102af2:	d004      	beq.n	8102afe <HAL_DMA_Init+0x5c2>
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	4a3c      	ldr	r2, [pc, #240]	; (8102bec <HAL_DMA_Init+0x6b0>)
 8102afa:	4293      	cmp	r3, r2
 8102afc:	d101      	bne.n	8102b02 <HAL_DMA_Init+0x5c6>
 8102afe:	2301      	movs	r3, #1
 8102b00:	e000      	b.n	8102b04 <HAL_DMA_Init+0x5c8>
 8102b02:	2300      	movs	r3, #0
 8102b04:	2b00      	cmp	r3, #0
 8102b06:	d032      	beq.n	8102b6e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102b08:	6878      	ldr	r0, [r7, #4]
 8102b0a:	f001 ff23 	bl	8104954 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	689b      	ldr	r3, [r3, #8]
 8102b12:	2b80      	cmp	r3, #128	; 0x80
 8102b14:	d102      	bne.n	8102b1c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	2200      	movs	r2, #0
 8102b1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	685a      	ldr	r2, [r3, #4]
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102b24:	b2d2      	uxtb	r2, r2
 8102b26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102b2c:	687a      	ldr	r2, [r7, #4]
 8102b2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102b30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	685b      	ldr	r3, [r3, #4]
 8102b36:	2b00      	cmp	r3, #0
 8102b38:	d010      	beq.n	8102b5c <HAL_DMA_Init+0x620>
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	685b      	ldr	r3, [r3, #4]
 8102b3e:	2b08      	cmp	r3, #8
 8102b40:	d80c      	bhi.n	8102b5c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102b42:	6878      	ldr	r0, [r7, #4]
 8102b44:	f001 ffa0 	bl	8104a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102b48:	687b      	ldr	r3, [r7, #4]
 8102b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102b4c:	2200      	movs	r2, #0
 8102b4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102b54:	687a      	ldr	r2, [r7, #4]
 8102b56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102b58:	605a      	str	r2, [r3, #4]
 8102b5a:	e008      	b.n	8102b6e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	2200      	movs	r2, #0
 8102b60:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	2200      	movs	r2, #0
 8102b66:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	2200      	movs	r2, #0
 8102b6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	2200      	movs	r2, #0
 8102b72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	2201      	movs	r2, #1
 8102b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102b7c:	2300      	movs	r3, #0
}
 8102b7e:	4618      	mov	r0, r3
 8102b80:	3718      	adds	r7, #24
 8102b82:	46bd      	mov	sp, r7
 8102b84:	bd80      	pop	{r7, pc}
 8102b86:	bf00      	nop
 8102b88:	a7fdabf8 	.word	0xa7fdabf8
 8102b8c:	cccccccd 	.word	0xcccccccd
 8102b90:	40020010 	.word	0x40020010
 8102b94:	40020028 	.word	0x40020028
 8102b98:	40020040 	.word	0x40020040
 8102b9c:	40020058 	.word	0x40020058
 8102ba0:	40020070 	.word	0x40020070
 8102ba4:	40020088 	.word	0x40020088
 8102ba8:	400200a0 	.word	0x400200a0
 8102bac:	400200b8 	.word	0x400200b8
 8102bb0:	40020410 	.word	0x40020410
 8102bb4:	40020428 	.word	0x40020428
 8102bb8:	40020440 	.word	0x40020440
 8102bbc:	40020458 	.word	0x40020458
 8102bc0:	40020470 	.word	0x40020470
 8102bc4:	40020488 	.word	0x40020488
 8102bc8:	400204a0 	.word	0x400204a0
 8102bcc:	400204b8 	.word	0x400204b8
 8102bd0:	58025408 	.word	0x58025408
 8102bd4:	5802541c 	.word	0x5802541c
 8102bd8:	58025430 	.word	0x58025430
 8102bdc:	58025444 	.word	0x58025444
 8102be0:	58025458 	.word	0x58025458
 8102be4:	5802546c 	.word	0x5802546c
 8102be8:	58025480 	.word	0x58025480
 8102bec:	58025494 	.word	0x58025494

08102bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102bf0:	b580      	push	{r7, lr}
 8102bf2:	b086      	sub	sp, #24
 8102bf4:	af00      	add	r7, sp, #0
 8102bf6:	60f8      	str	r0, [r7, #12]
 8102bf8:	60b9      	str	r1, [r7, #8]
 8102bfa:	607a      	str	r2, [r7, #4]
 8102bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102bfe:	2300      	movs	r3, #0
 8102c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102c02:	68fb      	ldr	r3, [r7, #12]
 8102c04:	2b00      	cmp	r3, #0
 8102c06:	d101      	bne.n	8102c0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102c08:	2301      	movs	r3, #1
 8102c0a:	e226      	b.n	810305a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102c12:	2b01      	cmp	r3, #1
 8102c14:	d101      	bne.n	8102c1a <HAL_DMA_Start_IT+0x2a>
 8102c16:	2302      	movs	r3, #2
 8102c18:	e21f      	b.n	810305a <HAL_DMA_Start_IT+0x46a>
 8102c1a:	68fb      	ldr	r3, [r7, #12]
 8102c1c:	2201      	movs	r2, #1
 8102c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102c22:	68fb      	ldr	r3, [r7, #12]
 8102c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102c28:	b2db      	uxtb	r3, r3
 8102c2a:	2b01      	cmp	r3, #1
 8102c2c:	f040 820a 	bne.w	8103044 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102c30:	68fb      	ldr	r3, [r7, #12]
 8102c32:	2202      	movs	r2, #2
 8102c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102c38:	68fb      	ldr	r3, [r7, #12]
 8102c3a:	2200      	movs	r2, #0
 8102c3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102c3e:	68fb      	ldr	r3, [r7, #12]
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	4a68      	ldr	r2, [pc, #416]	; (8102de4 <HAL_DMA_Start_IT+0x1f4>)
 8102c44:	4293      	cmp	r3, r2
 8102c46:	d04a      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c48:	68fb      	ldr	r3, [r7, #12]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	4a66      	ldr	r2, [pc, #408]	; (8102de8 <HAL_DMA_Start_IT+0x1f8>)
 8102c4e:	4293      	cmp	r3, r2
 8102c50:	d045      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c52:	68fb      	ldr	r3, [r7, #12]
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	4a65      	ldr	r2, [pc, #404]	; (8102dec <HAL_DMA_Start_IT+0x1fc>)
 8102c58:	4293      	cmp	r3, r2
 8102c5a:	d040      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c5c:	68fb      	ldr	r3, [r7, #12]
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	4a63      	ldr	r2, [pc, #396]	; (8102df0 <HAL_DMA_Start_IT+0x200>)
 8102c62:	4293      	cmp	r3, r2
 8102c64:	d03b      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c66:	68fb      	ldr	r3, [r7, #12]
 8102c68:	681b      	ldr	r3, [r3, #0]
 8102c6a:	4a62      	ldr	r2, [pc, #392]	; (8102df4 <HAL_DMA_Start_IT+0x204>)
 8102c6c:	4293      	cmp	r3, r2
 8102c6e:	d036      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c70:	68fb      	ldr	r3, [r7, #12]
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	4a60      	ldr	r2, [pc, #384]	; (8102df8 <HAL_DMA_Start_IT+0x208>)
 8102c76:	4293      	cmp	r3, r2
 8102c78:	d031      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c7a:	68fb      	ldr	r3, [r7, #12]
 8102c7c:	681b      	ldr	r3, [r3, #0]
 8102c7e:	4a5f      	ldr	r2, [pc, #380]	; (8102dfc <HAL_DMA_Start_IT+0x20c>)
 8102c80:	4293      	cmp	r3, r2
 8102c82:	d02c      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c84:	68fb      	ldr	r3, [r7, #12]
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	4a5d      	ldr	r2, [pc, #372]	; (8102e00 <HAL_DMA_Start_IT+0x210>)
 8102c8a:	4293      	cmp	r3, r2
 8102c8c:	d027      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c8e:	68fb      	ldr	r3, [r7, #12]
 8102c90:	681b      	ldr	r3, [r3, #0]
 8102c92:	4a5c      	ldr	r2, [pc, #368]	; (8102e04 <HAL_DMA_Start_IT+0x214>)
 8102c94:	4293      	cmp	r3, r2
 8102c96:	d022      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102c98:	68fb      	ldr	r3, [r7, #12]
 8102c9a:	681b      	ldr	r3, [r3, #0]
 8102c9c:	4a5a      	ldr	r2, [pc, #360]	; (8102e08 <HAL_DMA_Start_IT+0x218>)
 8102c9e:	4293      	cmp	r3, r2
 8102ca0:	d01d      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102ca2:	68fb      	ldr	r3, [r7, #12]
 8102ca4:	681b      	ldr	r3, [r3, #0]
 8102ca6:	4a59      	ldr	r2, [pc, #356]	; (8102e0c <HAL_DMA_Start_IT+0x21c>)
 8102ca8:	4293      	cmp	r3, r2
 8102caa:	d018      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102cac:	68fb      	ldr	r3, [r7, #12]
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	4a57      	ldr	r2, [pc, #348]	; (8102e10 <HAL_DMA_Start_IT+0x220>)
 8102cb2:	4293      	cmp	r3, r2
 8102cb4:	d013      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102cb6:	68fb      	ldr	r3, [r7, #12]
 8102cb8:	681b      	ldr	r3, [r3, #0]
 8102cba:	4a56      	ldr	r2, [pc, #344]	; (8102e14 <HAL_DMA_Start_IT+0x224>)
 8102cbc:	4293      	cmp	r3, r2
 8102cbe:	d00e      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102cc0:	68fb      	ldr	r3, [r7, #12]
 8102cc2:	681b      	ldr	r3, [r3, #0]
 8102cc4:	4a54      	ldr	r2, [pc, #336]	; (8102e18 <HAL_DMA_Start_IT+0x228>)
 8102cc6:	4293      	cmp	r3, r2
 8102cc8:	d009      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102cca:	68fb      	ldr	r3, [r7, #12]
 8102ccc:	681b      	ldr	r3, [r3, #0]
 8102cce:	4a53      	ldr	r2, [pc, #332]	; (8102e1c <HAL_DMA_Start_IT+0x22c>)
 8102cd0:	4293      	cmp	r3, r2
 8102cd2:	d004      	beq.n	8102cde <HAL_DMA_Start_IT+0xee>
 8102cd4:	68fb      	ldr	r3, [r7, #12]
 8102cd6:	681b      	ldr	r3, [r3, #0]
 8102cd8:	4a51      	ldr	r2, [pc, #324]	; (8102e20 <HAL_DMA_Start_IT+0x230>)
 8102cda:	4293      	cmp	r3, r2
 8102cdc:	d108      	bne.n	8102cf0 <HAL_DMA_Start_IT+0x100>
 8102cde:	68fb      	ldr	r3, [r7, #12]
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	681a      	ldr	r2, [r3, #0]
 8102ce4:	68fb      	ldr	r3, [r7, #12]
 8102ce6:	681b      	ldr	r3, [r3, #0]
 8102ce8:	f022 0201 	bic.w	r2, r2, #1
 8102cec:	601a      	str	r2, [r3, #0]
 8102cee:	e007      	b.n	8102d00 <HAL_DMA_Start_IT+0x110>
 8102cf0:	68fb      	ldr	r3, [r7, #12]
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	681a      	ldr	r2, [r3, #0]
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	f022 0201 	bic.w	r2, r2, #1
 8102cfe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102d00:	683b      	ldr	r3, [r7, #0]
 8102d02:	687a      	ldr	r2, [r7, #4]
 8102d04:	68b9      	ldr	r1, [r7, #8]
 8102d06:	68f8      	ldr	r0, [r7, #12]
 8102d08:	f001 fb4a 	bl	81043a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102d0c:	68fb      	ldr	r3, [r7, #12]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	4a34      	ldr	r2, [pc, #208]	; (8102de4 <HAL_DMA_Start_IT+0x1f4>)
 8102d12:	4293      	cmp	r3, r2
 8102d14:	d04a      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d16:	68fb      	ldr	r3, [r7, #12]
 8102d18:	681b      	ldr	r3, [r3, #0]
 8102d1a:	4a33      	ldr	r2, [pc, #204]	; (8102de8 <HAL_DMA_Start_IT+0x1f8>)
 8102d1c:	4293      	cmp	r3, r2
 8102d1e:	d045      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d20:	68fb      	ldr	r3, [r7, #12]
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	4a31      	ldr	r2, [pc, #196]	; (8102dec <HAL_DMA_Start_IT+0x1fc>)
 8102d26:	4293      	cmp	r3, r2
 8102d28:	d040      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d2a:	68fb      	ldr	r3, [r7, #12]
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	4a30      	ldr	r2, [pc, #192]	; (8102df0 <HAL_DMA_Start_IT+0x200>)
 8102d30:	4293      	cmp	r3, r2
 8102d32:	d03b      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d34:	68fb      	ldr	r3, [r7, #12]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	4a2e      	ldr	r2, [pc, #184]	; (8102df4 <HAL_DMA_Start_IT+0x204>)
 8102d3a:	4293      	cmp	r3, r2
 8102d3c:	d036      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d3e:	68fb      	ldr	r3, [r7, #12]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	4a2d      	ldr	r2, [pc, #180]	; (8102df8 <HAL_DMA_Start_IT+0x208>)
 8102d44:	4293      	cmp	r3, r2
 8102d46:	d031      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d48:	68fb      	ldr	r3, [r7, #12]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	4a2b      	ldr	r2, [pc, #172]	; (8102dfc <HAL_DMA_Start_IT+0x20c>)
 8102d4e:	4293      	cmp	r3, r2
 8102d50:	d02c      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d52:	68fb      	ldr	r3, [r7, #12]
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	4a2a      	ldr	r2, [pc, #168]	; (8102e00 <HAL_DMA_Start_IT+0x210>)
 8102d58:	4293      	cmp	r3, r2
 8102d5a:	d027      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d5c:	68fb      	ldr	r3, [r7, #12]
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	4a28      	ldr	r2, [pc, #160]	; (8102e04 <HAL_DMA_Start_IT+0x214>)
 8102d62:	4293      	cmp	r3, r2
 8102d64:	d022      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d66:	68fb      	ldr	r3, [r7, #12]
 8102d68:	681b      	ldr	r3, [r3, #0]
 8102d6a:	4a27      	ldr	r2, [pc, #156]	; (8102e08 <HAL_DMA_Start_IT+0x218>)
 8102d6c:	4293      	cmp	r3, r2
 8102d6e:	d01d      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d70:	68fb      	ldr	r3, [r7, #12]
 8102d72:	681b      	ldr	r3, [r3, #0]
 8102d74:	4a25      	ldr	r2, [pc, #148]	; (8102e0c <HAL_DMA_Start_IT+0x21c>)
 8102d76:	4293      	cmp	r3, r2
 8102d78:	d018      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d7a:	68fb      	ldr	r3, [r7, #12]
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	4a24      	ldr	r2, [pc, #144]	; (8102e10 <HAL_DMA_Start_IT+0x220>)
 8102d80:	4293      	cmp	r3, r2
 8102d82:	d013      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d84:	68fb      	ldr	r3, [r7, #12]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	4a22      	ldr	r2, [pc, #136]	; (8102e14 <HAL_DMA_Start_IT+0x224>)
 8102d8a:	4293      	cmp	r3, r2
 8102d8c:	d00e      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d8e:	68fb      	ldr	r3, [r7, #12]
 8102d90:	681b      	ldr	r3, [r3, #0]
 8102d92:	4a21      	ldr	r2, [pc, #132]	; (8102e18 <HAL_DMA_Start_IT+0x228>)
 8102d94:	4293      	cmp	r3, r2
 8102d96:	d009      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102d98:	68fb      	ldr	r3, [r7, #12]
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	4a1f      	ldr	r2, [pc, #124]	; (8102e1c <HAL_DMA_Start_IT+0x22c>)
 8102d9e:	4293      	cmp	r3, r2
 8102da0:	d004      	beq.n	8102dac <HAL_DMA_Start_IT+0x1bc>
 8102da2:	68fb      	ldr	r3, [r7, #12]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	4a1e      	ldr	r2, [pc, #120]	; (8102e20 <HAL_DMA_Start_IT+0x230>)
 8102da8:	4293      	cmp	r3, r2
 8102daa:	d101      	bne.n	8102db0 <HAL_DMA_Start_IT+0x1c0>
 8102dac:	2301      	movs	r3, #1
 8102dae:	e000      	b.n	8102db2 <HAL_DMA_Start_IT+0x1c2>
 8102db0:	2300      	movs	r3, #0
 8102db2:	2b00      	cmp	r3, #0
 8102db4:	d036      	beq.n	8102e24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102db6:	68fb      	ldr	r3, [r7, #12]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	f023 021e 	bic.w	r2, r3, #30
 8102dc0:	68fb      	ldr	r3, [r7, #12]
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	f042 0216 	orr.w	r2, r2, #22
 8102dc8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102dca:	68fb      	ldr	r3, [r7, #12]
 8102dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102dce:	2b00      	cmp	r3, #0
 8102dd0:	d03e      	beq.n	8102e50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102dd2:	68fb      	ldr	r3, [r7, #12]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	681a      	ldr	r2, [r3, #0]
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	681b      	ldr	r3, [r3, #0]
 8102ddc:	f042 0208 	orr.w	r2, r2, #8
 8102de0:	601a      	str	r2, [r3, #0]
 8102de2:	e035      	b.n	8102e50 <HAL_DMA_Start_IT+0x260>
 8102de4:	40020010 	.word	0x40020010
 8102de8:	40020028 	.word	0x40020028
 8102dec:	40020040 	.word	0x40020040
 8102df0:	40020058 	.word	0x40020058
 8102df4:	40020070 	.word	0x40020070
 8102df8:	40020088 	.word	0x40020088
 8102dfc:	400200a0 	.word	0x400200a0
 8102e00:	400200b8 	.word	0x400200b8
 8102e04:	40020410 	.word	0x40020410
 8102e08:	40020428 	.word	0x40020428
 8102e0c:	40020440 	.word	0x40020440
 8102e10:	40020458 	.word	0x40020458
 8102e14:	40020470 	.word	0x40020470
 8102e18:	40020488 	.word	0x40020488
 8102e1c:	400204a0 	.word	0x400204a0
 8102e20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	f023 020e 	bic.w	r2, r3, #14
 8102e2e:	68fb      	ldr	r3, [r7, #12]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	f042 020a 	orr.w	r2, r2, #10
 8102e36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102e38:	68fb      	ldr	r3, [r7, #12]
 8102e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e3c:	2b00      	cmp	r3, #0
 8102e3e:	d007      	beq.n	8102e50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102e40:	68fb      	ldr	r3, [r7, #12]
 8102e42:	681b      	ldr	r3, [r3, #0]
 8102e44:	681a      	ldr	r2, [r3, #0]
 8102e46:	68fb      	ldr	r3, [r7, #12]
 8102e48:	681b      	ldr	r3, [r3, #0]
 8102e4a:	f042 0204 	orr.w	r2, r2, #4
 8102e4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102e50:	68fb      	ldr	r3, [r7, #12]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	4a83      	ldr	r2, [pc, #524]	; (8103064 <HAL_DMA_Start_IT+0x474>)
 8102e56:	4293      	cmp	r3, r2
 8102e58:	d072      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102e5a:	68fb      	ldr	r3, [r7, #12]
 8102e5c:	681b      	ldr	r3, [r3, #0]
 8102e5e:	4a82      	ldr	r2, [pc, #520]	; (8103068 <HAL_DMA_Start_IT+0x478>)
 8102e60:	4293      	cmp	r3, r2
 8102e62:	d06d      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102e64:	68fb      	ldr	r3, [r7, #12]
 8102e66:	681b      	ldr	r3, [r3, #0]
 8102e68:	4a80      	ldr	r2, [pc, #512]	; (810306c <HAL_DMA_Start_IT+0x47c>)
 8102e6a:	4293      	cmp	r3, r2
 8102e6c:	d068      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102e6e:	68fb      	ldr	r3, [r7, #12]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	4a7f      	ldr	r2, [pc, #508]	; (8103070 <HAL_DMA_Start_IT+0x480>)
 8102e74:	4293      	cmp	r3, r2
 8102e76:	d063      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102e78:	68fb      	ldr	r3, [r7, #12]
 8102e7a:	681b      	ldr	r3, [r3, #0]
 8102e7c:	4a7d      	ldr	r2, [pc, #500]	; (8103074 <HAL_DMA_Start_IT+0x484>)
 8102e7e:	4293      	cmp	r3, r2
 8102e80:	d05e      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102e82:	68fb      	ldr	r3, [r7, #12]
 8102e84:	681b      	ldr	r3, [r3, #0]
 8102e86:	4a7c      	ldr	r2, [pc, #496]	; (8103078 <HAL_DMA_Start_IT+0x488>)
 8102e88:	4293      	cmp	r3, r2
 8102e8a:	d059      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102e8c:	68fb      	ldr	r3, [r7, #12]
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	4a7a      	ldr	r2, [pc, #488]	; (810307c <HAL_DMA_Start_IT+0x48c>)
 8102e92:	4293      	cmp	r3, r2
 8102e94:	d054      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102e96:	68fb      	ldr	r3, [r7, #12]
 8102e98:	681b      	ldr	r3, [r3, #0]
 8102e9a:	4a79      	ldr	r2, [pc, #484]	; (8103080 <HAL_DMA_Start_IT+0x490>)
 8102e9c:	4293      	cmp	r3, r2
 8102e9e:	d04f      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	4a77      	ldr	r2, [pc, #476]	; (8103084 <HAL_DMA_Start_IT+0x494>)
 8102ea6:	4293      	cmp	r3, r2
 8102ea8:	d04a      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102eaa:	68fb      	ldr	r3, [r7, #12]
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	4a76      	ldr	r2, [pc, #472]	; (8103088 <HAL_DMA_Start_IT+0x498>)
 8102eb0:	4293      	cmp	r3, r2
 8102eb2:	d045      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102eb4:	68fb      	ldr	r3, [r7, #12]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	4a74      	ldr	r2, [pc, #464]	; (810308c <HAL_DMA_Start_IT+0x49c>)
 8102eba:	4293      	cmp	r3, r2
 8102ebc:	d040      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102ebe:	68fb      	ldr	r3, [r7, #12]
 8102ec0:	681b      	ldr	r3, [r3, #0]
 8102ec2:	4a73      	ldr	r2, [pc, #460]	; (8103090 <HAL_DMA_Start_IT+0x4a0>)
 8102ec4:	4293      	cmp	r3, r2
 8102ec6:	d03b      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102ec8:	68fb      	ldr	r3, [r7, #12]
 8102eca:	681b      	ldr	r3, [r3, #0]
 8102ecc:	4a71      	ldr	r2, [pc, #452]	; (8103094 <HAL_DMA_Start_IT+0x4a4>)
 8102ece:	4293      	cmp	r3, r2
 8102ed0:	d036      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102ed2:	68fb      	ldr	r3, [r7, #12]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	4a70      	ldr	r2, [pc, #448]	; (8103098 <HAL_DMA_Start_IT+0x4a8>)
 8102ed8:	4293      	cmp	r3, r2
 8102eda:	d031      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	4a6e      	ldr	r2, [pc, #440]	; (810309c <HAL_DMA_Start_IT+0x4ac>)
 8102ee2:	4293      	cmp	r3, r2
 8102ee4:	d02c      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102ee6:	68fb      	ldr	r3, [r7, #12]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	4a6d      	ldr	r2, [pc, #436]	; (81030a0 <HAL_DMA_Start_IT+0x4b0>)
 8102eec:	4293      	cmp	r3, r2
 8102eee:	d027      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102ef0:	68fb      	ldr	r3, [r7, #12]
 8102ef2:	681b      	ldr	r3, [r3, #0]
 8102ef4:	4a6b      	ldr	r2, [pc, #428]	; (81030a4 <HAL_DMA_Start_IT+0x4b4>)
 8102ef6:	4293      	cmp	r3, r2
 8102ef8:	d022      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102efa:	68fb      	ldr	r3, [r7, #12]
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	4a6a      	ldr	r2, [pc, #424]	; (81030a8 <HAL_DMA_Start_IT+0x4b8>)
 8102f00:	4293      	cmp	r3, r2
 8102f02:	d01d      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102f04:	68fb      	ldr	r3, [r7, #12]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	4a68      	ldr	r2, [pc, #416]	; (81030ac <HAL_DMA_Start_IT+0x4bc>)
 8102f0a:	4293      	cmp	r3, r2
 8102f0c:	d018      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102f0e:	68fb      	ldr	r3, [r7, #12]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	4a67      	ldr	r2, [pc, #412]	; (81030b0 <HAL_DMA_Start_IT+0x4c0>)
 8102f14:	4293      	cmp	r3, r2
 8102f16:	d013      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102f18:	68fb      	ldr	r3, [r7, #12]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	4a65      	ldr	r2, [pc, #404]	; (81030b4 <HAL_DMA_Start_IT+0x4c4>)
 8102f1e:	4293      	cmp	r3, r2
 8102f20:	d00e      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102f22:	68fb      	ldr	r3, [r7, #12]
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	4a64      	ldr	r2, [pc, #400]	; (81030b8 <HAL_DMA_Start_IT+0x4c8>)
 8102f28:	4293      	cmp	r3, r2
 8102f2a:	d009      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102f2c:	68fb      	ldr	r3, [r7, #12]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	4a62      	ldr	r2, [pc, #392]	; (81030bc <HAL_DMA_Start_IT+0x4cc>)
 8102f32:	4293      	cmp	r3, r2
 8102f34:	d004      	beq.n	8102f40 <HAL_DMA_Start_IT+0x350>
 8102f36:	68fb      	ldr	r3, [r7, #12]
 8102f38:	681b      	ldr	r3, [r3, #0]
 8102f3a:	4a61      	ldr	r2, [pc, #388]	; (81030c0 <HAL_DMA_Start_IT+0x4d0>)
 8102f3c:	4293      	cmp	r3, r2
 8102f3e:	d101      	bne.n	8102f44 <HAL_DMA_Start_IT+0x354>
 8102f40:	2301      	movs	r3, #1
 8102f42:	e000      	b.n	8102f46 <HAL_DMA_Start_IT+0x356>
 8102f44:	2300      	movs	r3, #0
 8102f46:	2b00      	cmp	r3, #0
 8102f48:	d01a      	beq.n	8102f80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102f4a:	68fb      	ldr	r3, [r7, #12]
 8102f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102f54:	2b00      	cmp	r3, #0
 8102f56:	d007      	beq.n	8102f68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102f58:	68fb      	ldr	r3, [r7, #12]
 8102f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f5c:	681a      	ldr	r2, [r3, #0]
 8102f5e:	68fb      	ldr	r3, [r7, #12]
 8102f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102f68:	68fb      	ldr	r3, [r7, #12]
 8102f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f6c:	2b00      	cmp	r3, #0
 8102f6e:	d007      	beq.n	8102f80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102f70:	68fb      	ldr	r3, [r7, #12]
 8102f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f74:	681a      	ldr	r2, [r3, #0]
 8102f76:	68fb      	ldr	r3, [r7, #12]
 8102f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102f80:	68fb      	ldr	r3, [r7, #12]
 8102f82:	681b      	ldr	r3, [r3, #0]
 8102f84:	4a37      	ldr	r2, [pc, #220]	; (8103064 <HAL_DMA_Start_IT+0x474>)
 8102f86:	4293      	cmp	r3, r2
 8102f88:	d04a      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102f8a:	68fb      	ldr	r3, [r7, #12]
 8102f8c:	681b      	ldr	r3, [r3, #0]
 8102f8e:	4a36      	ldr	r2, [pc, #216]	; (8103068 <HAL_DMA_Start_IT+0x478>)
 8102f90:	4293      	cmp	r3, r2
 8102f92:	d045      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102f94:	68fb      	ldr	r3, [r7, #12]
 8102f96:	681b      	ldr	r3, [r3, #0]
 8102f98:	4a34      	ldr	r2, [pc, #208]	; (810306c <HAL_DMA_Start_IT+0x47c>)
 8102f9a:	4293      	cmp	r3, r2
 8102f9c:	d040      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102f9e:	68fb      	ldr	r3, [r7, #12]
 8102fa0:	681b      	ldr	r3, [r3, #0]
 8102fa2:	4a33      	ldr	r2, [pc, #204]	; (8103070 <HAL_DMA_Start_IT+0x480>)
 8102fa4:	4293      	cmp	r3, r2
 8102fa6:	d03b      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102fa8:	68fb      	ldr	r3, [r7, #12]
 8102faa:	681b      	ldr	r3, [r3, #0]
 8102fac:	4a31      	ldr	r2, [pc, #196]	; (8103074 <HAL_DMA_Start_IT+0x484>)
 8102fae:	4293      	cmp	r3, r2
 8102fb0:	d036      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102fb2:	68fb      	ldr	r3, [r7, #12]
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	4a30      	ldr	r2, [pc, #192]	; (8103078 <HAL_DMA_Start_IT+0x488>)
 8102fb8:	4293      	cmp	r3, r2
 8102fba:	d031      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102fbc:	68fb      	ldr	r3, [r7, #12]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	4a2e      	ldr	r2, [pc, #184]	; (810307c <HAL_DMA_Start_IT+0x48c>)
 8102fc2:	4293      	cmp	r3, r2
 8102fc4:	d02c      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102fc6:	68fb      	ldr	r3, [r7, #12]
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	4a2d      	ldr	r2, [pc, #180]	; (8103080 <HAL_DMA_Start_IT+0x490>)
 8102fcc:	4293      	cmp	r3, r2
 8102fce:	d027      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102fd0:	68fb      	ldr	r3, [r7, #12]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	4a2b      	ldr	r2, [pc, #172]	; (8103084 <HAL_DMA_Start_IT+0x494>)
 8102fd6:	4293      	cmp	r3, r2
 8102fd8:	d022      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102fda:	68fb      	ldr	r3, [r7, #12]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	4a2a      	ldr	r2, [pc, #168]	; (8103088 <HAL_DMA_Start_IT+0x498>)
 8102fe0:	4293      	cmp	r3, r2
 8102fe2:	d01d      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102fe4:	68fb      	ldr	r3, [r7, #12]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	4a28      	ldr	r2, [pc, #160]	; (810308c <HAL_DMA_Start_IT+0x49c>)
 8102fea:	4293      	cmp	r3, r2
 8102fec:	d018      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102fee:	68fb      	ldr	r3, [r7, #12]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	4a27      	ldr	r2, [pc, #156]	; (8103090 <HAL_DMA_Start_IT+0x4a0>)
 8102ff4:	4293      	cmp	r3, r2
 8102ff6:	d013      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8102ff8:	68fb      	ldr	r3, [r7, #12]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	4a25      	ldr	r2, [pc, #148]	; (8103094 <HAL_DMA_Start_IT+0x4a4>)
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d00e      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8103002:	68fb      	ldr	r3, [r7, #12]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	4a24      	ldr	r2, [pc, #144]	; (8103098 <HAL_DMA_Start_IT+0x4a8>)
 8103008:	4293      	cmp	r3, r2
 810300a:	d009      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 810300c:	68fb      	ldr	r3, [r7, #12]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	4a22      	ldr	r2, [pc, #136]	; (810309c <HAL_DMA_Start_IT+0x4ac>)
 8103012:	4293      	cmp	r3, r2
 8103014:	d004      	beq.n	8103020 <HAL_DMA_Start_IT+0x430>
 8103016:	68fb      	ldr	r3, [r7, #12]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4a21      	ldr	r2, [pc, #132]	; (81030a0 <HAL_DMA_Start_IT+0x4b0>)
 810301c:	4293      	cmp	r3, r2
 810301e:	d108      	bne.n	8103032 <HAL_DMA_Start_IT+0x442>
 8103020:	68fb      	ldr	r3, [r7, #12]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	681a      	ldr	r2, [r3, #0]
 8103026:	68fb      	ldr	r3, [r7, #12]
 8103028:	681b      	ldr	r3, [r3, #0]
 810302a:	f042 0201 	orr.w	r2, r2, #1
 810302e:	601a      	str	r2, [r3, #0]
 8103030:	e012      	b.n	8103058 <HAL_DMA_Start_IT+0x468>
 8103032:	68fb      	ldr	r3, [r7, #12]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	681a      	ldr	r2, [r3, #0]
 8103038:	68fb      	ldr	r3, [r7, #12]
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	f042 0201 	orr.w	r2, r2, #1
 8103040:	601a      	str	r2, [r3, #0]
 8103042:	e009      	b.n	8103058 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8103044:	68fb      	ldr	r3, [r7, #12]
 8103046:	2200      	movs	r2, #0
 8103048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 810304c:	68fb      	ldr	r3, [r7, #12]
 810304e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103052:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8103054:	2301      	movs	r3, #1
 8103056:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8103058:	7dfb      	ldrb	r3, [r7, #23]
}
 810305a:	4618      	mov	r0, r3
 810305c:	3718      	adds	r7, #24
 810305e:	46bd      	mov	sp, r7
 8103060:	bd80      	pop	{r7, pc}
 8103062:	bf00      	nop
 8103064:	40020010 	.word	0x40020010
 8103068:	40020028 	.word	0x40020028
 810306c:	40020040 	.word	0x40020040
 8103070:	40020058 	.word	0x40020058
 8103074:	40020070 	.word	0x40020070
 8103078:	40020088 	.word	0x40020088
 810307c:	400200a0 	.word	0x400200a0
 8103080:	400200b8 	.word	0x400200b8
 8103084:	40020410 	.word	0x40020410
 8103088:	40020428 	.word	0x40020428
 810308c:	40020440 	.word	0x40020440
 8103090:	40020458 	.word	0x40020458
 8103094:	40020470 	.word	0x40020470
 8103098:	40020488 	.word	0x40020488
 810309c:	400204a0 	.word	0x400204a0
 81030a0:	400204b8 	.word	0x400204b8
 81030a4:	58025408 	.word	0x58025408
 81030a8:	5802541c 	.word	0x5802541c
 81030ac:	58025430 	.word	0x58025430
 81030b0:	58025444 	.word	0x58025444
 81030b4:	58025458 	.word	0x58025458
 81030b8:	5802546c 	.word	0x5802546c
 81030bc:	58025480 	.word	0x58025480
 81030c0:	58025494 	.word	0x58025494

081030c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81030c4:	b580      	push	{r7, lr}
 81030c6:	b084      	sub	sp, #16
 81030c8:	af00      	add	r7, sp, #0
 81030ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	2b00      	cmp	r3, #0
 81030d0:	d101      	bne.n	81030d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81030d2:	2301      	movs	r3, #1
 81030d4:	e205      	b.n	81034e2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81030dc:	b2db      	uxtb	r3, r3
 81030de:	2b02      	cmp	r3, #2
 81030e0:	d004      	beq.n	81030ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	2280      	movs	r2, #128	; 0x80
 81030e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81030e8:	2301      	movs	r3, #1
 81030ea:	e1fa      	b.n	81034e2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	4a8c      	ldr	r2, [pc, #560]	; (8103324 <HAL_DMA_Abort_IT+0x260>)
 81030f2:	4293      	cmp	r3, r2
 81030f4:	d04a      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	4a8b      	ldr	r2, [pc, #556]	; (8103328 <HAL_DMA_Abort_IT+0x264>)
 81030fc:	4293      	cmp	r3, r2
 81030fe:	d045      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	4a89      	ldr	r2, [pc, #548]	; (810332c <HAL_DMA_Abort_IT+0x268>)
 8103106:	4293      	cmp	r3, r2
 8103108:	d040      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	4a88      	ldr	r2, [pc, #544]	; (8103330 <HAL_DMA_Abort_IT+0x26c>)
 8103110:	4293      	cmp	r3, r2
 8103112:	d03b      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	4a86      	ldr	r2, [pc, #536]	; (8103334 <HAL_DMA_Abort_IT+0x270>)
 810311a:	4293      	cmp	r3, r2
 810311c:	d036      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	4a85      	ldr	r2, [pc, #532]	; (8103338 <HAL_DMA_Abort_IT+0x274>)
 8103124:	4293      	cmp	r3, r2
 8103126:	d031      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	4a83      	ldr	r2, [pc, #524]	; (810333c <HAL_DMA_Abort_IT+0x278>)
 810312e:	4293      	cmp	r3, r2
 8103130:	d02c      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	4a82      	ldr	r2, [pc, #520]	; (8103340 <HAL_DMA_Abort_IT+0x27c>)
 8103138:	4293      	cmp	r3, r2
 810313a:	d027      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	4a80      	ldr	r2, [pc, #512]	; (8103344 <HAL_DMA_Abort_IT+0x280>)
 8103142:	4293      	cmp	r3, r2
 8103144:	d022      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103146:	687b      	ldr	r3, [r7, #4]
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	4a7f      	ldr	r2, [pc, #508]	; (8103348 <HAL_DMA_Abort_IT+0x284>)
 810314c:	4293      	cmp	r3, r2
 810314e:	d01d      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	4a7d      	ldr	r2, [pc, #500]	; (810334c <HAL_DMA_Abort_IT+0x288>)
 8103156:	4293      	cmp	r3, r2
 8103158:	d018      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	4a7c      	ldr	r2, [pc, #496]	; (8103350 <HAL_DMA_Abort_IT+0x28c>)
 8103160:	4293      	cmp	r3, r2
 8103162:	d013      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	4a7a      	ldr	r2, [pc, #488]	; (8103354 <HAL_DMA_Abort_IT+0x290>)
 810316a:	4293      	cmp	r3, r2
 810316c:	d00e      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	681b      	ldr	r3, [r3, #0]
 8103172:	4a79      	ldr	r2, [pc, #484]	; (8103358 <HAL_DMA_Abort_IT+0x294>)
 8103174:	4293      	cmp	r3, r2
 8103176:	d009      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	681b      	ldr	r3, [r3, #0]
 810317c:	4a77      	ldr	r2, [pc, #476]	; (810335c <HAL_DMA_Abort_IT+0x298>)
 810317e:	4293      	cmp	r3, r2
 8103180:	d004      	beq.n	810318c <HAL_DMA_Abort_IT+0xc8>
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	681b      	ldr	r3, [r3, #0]
 8103186:	4a76      	ldr	r2, [pc, #472]	; (8103360 <HAL_DMA_Abort_IT+0x29c>)
 8103188:	4293      	cmp	r3, r2
 810318a:	d101      	bne.n	8103190 <HAL_DMA_Abort_IT+0xcc>
 810318c:	2301      	movs	r3, #1
 810318e:	e000      	b.n	8103192 <HAL_DMA_Abort_IT+0xce>
 8103190:	2300      	movs	r3, #0
 8103192:	2b00      	cmp	r3, #0
 8103194:	d065      	beq.n	8103262 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	2204      	movs	r2, #4
 810319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	681b      	ldr	r3, [r3, #0]
 81031a2:	4a60      	ldr	r2, [pc, #384]	; (8103324 <HAL_DMA_Abort_IT+0x260>)
 81031a4:	4293      	cmp	r3, r2
 81031a6:	d04a      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	4a5e      	ldr	r2, [pc, #376]	; (8103328 <HAL_DMA_Abort_IT+0x264>)
 81031ae:	4293      	cmp	r3, r2
 81031b0:	d045      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	681b      	ldr	r3, [r3, #0]
 81031b6:	4a5d      	ldr	r2, [pc, #372]	; (810332c <HAL_DMA_Abort_IT+0x268>)
 81031b8:	4293      	cmp	r3, r2
 81031ba:	d040      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	681b      	ldr	r3, [r3, #0]
 81031c0:	4a5b      	ldr	r2, [pc, #364]	; (8103330 <HAL_DMA_Abort_IT+0x26c>)
 81031c2:	4293      	cmp	r3, r2
 81031c4:	d03b      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	681b      	ldr	r3, [r3, #0]
 81031ca:	4a5a      	ldr	r2, [pc, #360]	; (8103334 <HAL_DMA_Abort_IT+0x270>)
 81031cc:	4293      	cmp	r3, r2
 81031ce:	d036      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031d0:	687b      	ldr	r3, [r7, #4]
 81031d2:	681b      	ldr	r3, [r3, #0]
 81031d4:	4a58      	ldr	r2, [pc, #352]	; (8103338 <HAL_DMA_Abort_IT+0x274>)
 81031d6:	4293      	cmp	r3, r2
 81031d8:	d031      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	681b      	ldr	r3, [r3, #0]
 81031de:	4a57      	ldr	r2, [pc, #348]	; (810333c <HAL_DMA_Abort_IT+0x278>)
 81031e0:	4293      	cmp	r3, r2
 81031e2:	d02c      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	681b      	ldr	r3, [r3, #0]
 81031e8:	4a55      	ldr	r2, [pc, #340]	; (8103340 <HAL_DMA_Abort_IT+0x27c>)
 81031ea:	4293      	cmp	r3, r2
 81031ec:	d027      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	681b      	ldr	r3, [r3, #0]
 81031f2:	4a54      	ldr	r2, [pc, #336]	; (8103344 <HAL_DMA_Abort_IT+0x280>)
 81031f4:	4293      	cmp	r3, r2
 81031f6:	d022      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	681b      	ldr	r3, [r3, #0]
 81031fc:	4a52      	ldr	r2, [pc, #328]	; (8103348 <HAL_DMA_Abort_IT+0x284>)
 81031fe:	4293      	cmp	r3, r2
 8103200:	d01d      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	4a51      	ldr	r2, [pc, #324]	; (810334c <HAL_DMA_Abort_IT+0x288>)
 8103208:	4293      	cmp	r3, r2
 810320a:	d018      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	4a4f      	ldr	r2, [pc, #316]	; (8103350 <HAL_DMA_Abort_IT+0x28c>)
 8103212:	4293      	cmp	r3, r2
 8103214:	d013      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	4a4e      	ldr	r2, [pc, #312]	; (8103354 <HAL_DMA_Abort_IT+0x290>)
 810321c:	4293      	cmp	r3, r2
 810321e:	d00e      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	4a4c      	ldr	r2, [pc, #304]	; (8103358 <HAL_DMA_Abort_IT+0x294>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d009      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a4b      	ldr	r2, [pc, #300]	; (810335c <HAL_DMA_Abort_IT+0x298>)
 8103230:	4293      	cmp	r3, r2
 8103232:	d004      	beq.n	810323e <HAL_DMA_Abort_IT+0x17a>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a49      	ldr	r2, [pc, #292]	; (8103360 <HAL_DMA_Abort_IT+0x29c>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d108      	bne.n	8103250 <HAL_DMA_Abort_IT+0x18c>
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	681a      	ldr	r2, [r3, #0]
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	681b      	ldr	r3, [r3, #0]
 8103248:	f022 0201 	bic.w	r2, r2, #1
 810324c:	601a      	str	r2, [r3, #0]
 810324e:	e147      	b.n	81034e0 <HAL_DMA_Abort_IT+0x41c>
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	681a      	ldr	r2, [r3, #0]
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	f022 0201 	bic.w	r2, r2, #1
 810325e:	601a      	str	r2, [r3, #0]
 8103260:	e13e      	b.n	81034e0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	681b      	ldr	r3, [r3, #0]
 8103266:	681a      	ldr	r2, [r3, #0]
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	f022 020e 	bic.w	r2, r2, #14
 8103270:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	4a2b      	ldr	r2, [pc, #172]	; (8103324 <HAL_DMA_Abort_IT+0x260>)
 8103278:	4293      	cmp	r3, r2
 810327a:	d04a      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	4a29      	ldr	r2, [pc, #164]	; (8103328 <HAL_DMA_Abort_IT+0x264>)
 8103282:	4293      	cmp	r3, r2
 8103284:	d045      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	4a28      	ldr	r2, [pc, #160]	; (810332c <HAL_DMA_Abort_IT+0x268>)
 810328c:	4293      	cmp	r3, r2
 810328e:	d040      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	4a26      	ldr	r2, [pc, #152]	; (8103330 <HAL_DMA_Abort_IT+0x26c>)
 8103296:	4293      	cmp	r3, r2
 8103298:	d03b      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	4a25      	ldr	r2, [pc, #148]	; (8103334 <HAL_DMA_Abort_IT+0x270>)
 81032a0:	4293      	cmp	r3, r2
 81032a2:	d036      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	4a23      	ldr	r2, [pc, #140]	; (8103338 <HAL_DMA_Abort_IT+0x274>)
 81032aa:	4293      	cmp	r3, r2
 81032ac:	d031      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	4a22      	ldr	r2, [pc, #136]	; (810333c <HAL_DMA_Abort_IT+0x278>)
 81032b4:	4293      	cmp	r3, r2
 81032b6:	d02c      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	4a20      	ldr	r2, [pc, #128]	; (8103340 <HAL_DMA_Abort_IT+0x27c>)
 81032be:	4293      	cmp	r3, r2
 81032c0:	d027      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	681b      	ldr	r3, [r3, #0]
 81032c6:	4a1f      	ldr	r2, [pc, #124]	; (8103344 <HAL_DMA_Abort_IT+0x280>)
 81032c8:	4293      	cmp	r3, r2
 81032ca:	d022      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	4a1d      	ldr	r2, [pc, #116]	; (8103348 <HAL_DMA_Abort_IT+0x284>)
 81032d2:	4293      	cmp	r3, r2
 81032d4:	d01d      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	4a1c      	ldr	r2, [pc, #112]	; (810334c <HAL_DMA_Abort_IT+0x288>)
 81032dc:	4293      	cmp	r3, r2
 81032de:	d018      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	4a1a      	ldr	r2, [pc, #104]	; (8103350 <HAL_DMA_Abort_IT+0x28c>)
 81032e6:	4293      	cmp	r3, r2
 81032e8:	d013      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	4a19      	ldr	r2, [pc, #100]	; (8103354 <HAL_DMA_Abort_IT+0x290>)
 81032f0:	4293      	cmp	r3, r2
 81032f2:	d00e      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	4a17      	ldr	r2, [pc, #92]	; (8103358 <HAL_DMA_Abort_IT+0x294>)
 81032fa:	4293      	cmp	r3, r2
 81032fc:	d009      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	681b      	ldr	r3, [r3, #0]
 8103302:	4a16      	ldr	r2, [pc, #88]	; (810335c <HAL_DMA_Abort_IT+0x298>)
 8103304:	4293      	cmp	r3, r2
 8103306:	d004      	beq.n	8103312 <HAL_DMA_Abort_IT+0x24e>
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	4a14      	ldr	r2, [pc, #80]	; (8103360 <HAL_DMA_Abort_IT+0x29c>)
 810330e:	4293      	cmp	r3, r2
 8103310:	d128      	bne.n	8103364 <HAL_DMA_Abort_IT+0x2a0>
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	681a      	ldr	r2, [r3, #0]
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	f022 0201 	bic.w	r2, r2, #1
 8103320:	601a      	str	r2, [r3, #0]
 8103322:	e027      	b.n	8103374 <HAL_DMA_Abort_IT+0x2b0>
 8103324:	40020010 	.word	0x40020010
 8103328:	40020028 	.word	0x40020028
 810332c:	40020040 	.word	0x40020040
 8103330:	40020058 	.word	0x40020058
 8103334:	40020070 	.word	0x40020070
 8103338:	40020088 	.word	0x40020088
 810333c:	400200a0 	.word	0x400200a0
 8103340:	400200b8 	.word	0x400200b8
 8103344:	40020410 	.word	0x40020410
 8103348:	40020428 	.word	0x40020428
 810334c:	40020440 	.word	0x40020440
 8103350:	40020458 	.word	0x40020458
 8103354:	40020470 	.word	0x40020470
 8103358:	40020488 	.word	0x40020488
 810335c:	400204a0 	.word	0x400204a0
 8103360:	400204b8 	.word	0x400204b8
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	681a      	ldr	r2, [r3, #0]
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	f022 0201 	bic.w	r2, r2, #1
 8103372:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	4a5c      	ldr	r2, [pc, #368]	; (81034ec <HAL_DMA_Abort_IT+0x428>)
 810337a:	4293      	cmp	r3, r2
 810337c:	d072      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	4a5b      	ldr	r2, [pc, #364]	; (81034f0 <HAL_DMA_Abort_IT+0x42c>)
 8103384:	4293      	cmp	r3, r2
 8103386:	d06d      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 8103388:	687b      	ldr	r3, [r7, #4]
 810338a:	681b      	ldr	r3, [r3, #0]
 810338c:	4a59      	ldr	r2, [pc, #356]	; (81034f4 <HAL_DMA_Abort_IT+0x430>)
 810338e:	4293      	cmp	r3, r2
 8103390:	d068      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	4a58      	ldr	r2, [pc, #352]	; (81034f8 <HAL_DMA_Abort_IT+0x434>)
 8103398:	4293      	cmp	r3, r2
 810339a:	d063      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	4a56      	ldr	r2, [pc, #344]	; (81034fc <HAL_DMA_Abort_IT+0x438>)
 81033a2:	4293      	cmp	r3, r2
 81033a4:	d05e      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	4a55      	ldr	r2, [pc, #340]	; (8103500 <HAL_DMA_Abort_IT+0x43c>)
 81033ac:	4293      	cmp	r3, r2
 81033ae:	d059      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	4a53      	ldr	r2, [pc, #332]	; (8103504 <HAL_DMA_Abort_IT+0x440>)
 81033b6:	4293      	cmp	r3, r2
 81033b8:	d054      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	681b      	ldr	r3, [r3, #0]
 81033be:	4a52      	ldr	r2, [pc, #328]	; (8103508 <HAL_DMA_Abort_IT+0x444>)
 81033c0:	4293      	cmp	r3, r2
 81033c2:	d04f      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	681b      	ldr	r3, [r3, #0]
 81033c8:	4a50      	ldr	r2, [pc, #320]	; (810350c <HAL_DMA_Abort_IT+0x448>)
 81033ca:	4293      	cmp	r3, r2
 81033cc:	d04a      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	4a4f      	ldr	r2, [pc, #316]	; (8103510 <HAL_DMA_Abort_IT+0x44c>)
 81033d4:	4293      	cmp	r3, r2
 81033d6:	d045      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	4a4d      	ldr	r2, [pc, #308]	; (8103514 <HAL_DMA_Abort_IT+0x450>)
 81033de:	4293      	cmp	r3, r2
 81033e0:	d040      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	4a4c      	ldr	r2, [pc, #304]	; (8103518 <HAL_DMA_Abort_IT+0x454>)
 81033e8:	4293      	cmp	r3, r2
 81033ea:	d03b      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	4a4a      	ldr	r2, [pc, #296]	; (810351c <HAL_DMA_Abort_IT+0x458>)
 81033f2:	4293      	cmp	r3, r2
 81033f4:	d036      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	4a49      	ldr	r2, [pc, #292]	; (8103520 <HAL_DMA_Abort_IT+0x45c>)
 81033fc:	4293      	cmp	r3, r2
 81033fe:	d031      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	4a47      	ldr	r2, [pc, #284]	; (8103524 <HAL_DMA_Abort_IT+0x460>)
 8103406:	4293      	cmp	r3, r2
 8103408:	d02c      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	4a46      	ldr	r2, [pc, #280]	; (8103528 <HAL_DMA_Abort_IT+0x464>)
 8103410:	4293      	cmp	r3, r2
 8103412:	d027      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	4a44      	ldr	r2, [pc, #272]	; (810352c <HAL_DMA_Abort_IT+0x468>)
 810341a:	4293      	cmp	r3, r2
 810341c:	d022      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	4a43      	ldr	r2, [pc, #268]	; (8103530 <HAL_DMA_Abort_IT+0x46c>)
 8103424:	4293      	cmp	r3, r2
 8103426:	d01d      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	4a41      	ldr	r2, [pc, #260]	; (8103534 <HAL_DMA_Abort_IT+0x470>)
 810342e:	4293      	cmp	r3, r2
 8103430:	d018      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	4a40      	ldr	r2, [pc, #256]	; (8103538 <HAL_DMA_Abort_IT+0x474>)
 8103438:	4293      	cmp	r3, r2
 810343a:	d013      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	4a3e      	ldr	r2, [pc, #248]	; (810353c <HAL_DMA_Abort_IT+0x478>)
 8103442:	4293      	cmp	r3, r2
 8103444:	d00e      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	4a3d      	ldr	r2, [pc, #244]	; (8103540 <HAL_DMA_Abort_IT+0x47c>)
 810344c:	4293      	cmp	r3, r2
 810344e:	d009      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	4a3b      	ldr	r2, [pc, #236]	; (8103544 <HAL_DMA_Abort_IT+0x480>)
 8103456:	4293      	cmp	r3, r2
 8103458:	d004      	beq.n	8103464 <HAL_DMA_Abort_IT+0x3a0>
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	4a3a      	ldr	r2, [pc, #232]	; (8103548 <HAL_DMA_Abort_IT+0x484>)
 8103460:	4293      	cmp	r3, r2
 8103462:	d101      	bne.n	8103468 <HAL_DMA_Abort_IT+0x3a4>
 8103464:	2301      	movs	r3, #1
 8103466:	e000      	b.n	810346a <HAL_DMA_Abort_IT+0x3a6>
 8103468:	2300      	movs	r3, #0
 810346a:	2b00      	cmp	r3, #0
 810346c:	d028      	beq.n	81034c0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103472:	681a      	ldr	r2, [r3, #0]
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810347c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103482:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103488:	f003 031f 	and.w	r3, r3, #31
 810348c:	2201      	movs	r2, #1
 810348e:	409a      	lsls	r2, r3
 8103490:	68fb      	ldr	r3, [r7, #12]
 8103492:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103498:	687a      	ldr	r2, [r7, #4]
 810349a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810349c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034a2:	2b00      	cmp	r3, #0
 81034a4:	d00c      	beq.n	81034c0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81034a6:	687b      	ldr	r3, [r7, #4]
 81034a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034aa:	681a      	ldr	r2, [r3, #0]
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81034b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81034ba:	687a      	ldr	r2, [r7, #4]
 81034bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81034be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	2200      	movs	r2, #0
 81034c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	2201      	movs	r2, #1
 81034cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81034d0:	687b      	ldr	r3, [r7, #4]
 81034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034d4:	2b00      	cmp	r3, #0
 81034d6:	d003      	beq.n	81034e0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034dc:	6878      	ldr	r0, [r7, #4]
 81034de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81034e0:	2300      	movs	r3, #0
}
 81034e2:	4618      	mov	r0, r3
 81034e4:	3710      	adds	r7, #16
 81034e6:	46bd      	mov	sp, r7
 81034e8:	bd80      	pop	{r7, pc}
 81034ea:	bf00      	nop
 81034ec:	40020010 	.word	0x40020010
 81034f0:	40020028 	.word	0x40020028
 81034f4:	40020040 	.word	0x40020040
 81034f8:	40020058 	.word	0x40020058
 81034fc:	40020070 	.word	0x40020070
 8103500:	40020088 	.word	0x40020088
 8103504:	400200a0 	.word	0x400200a0
 8103508:	400200b8 	.word	0x400200b8
 810350c:	40020410 	.word	0x40020410
 8103510:	40020428 	.word	0x40020428
 8103514:	40020440 	.word	0x40020440
 8103518:	40020458 	.word	0x40020458
 810351c:	40020470 	.word	0x40020470
 8103520:	40020488 	.word	0x40020488
 8103524:	400204a0 	.word	0x400204a0
 8103528:	400204b8 	.word	0x400204b8
 810352c:	58025408 	.word	0x58025408
 8103530:	5802541c 	.word	0x5802541c
 8103534:	58025430 	.word	0x58025430
 8103538:	58025444 	.word	0x58025444
 810353c:	58025458 	.word	0x58025458
 8103540:	5802546c 	.word	0x5802546c
 8103544:	58025480 	.word	0x58025480
 8103548:	58025494 	.word	0x58025494

0810354c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 810354c:	b580      	push	{r7, lr}
 810354e:	b08a      	sub	sp, #40	; 0x28
 8103550:	af00      	add	r7, sp, #0
 8103552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103554:	2300      	movs	r3, #0
 8103556:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103558:	4b67      	ldr	r3, [pc, #412]	; (81036f8 <HAL_DMA_IRQHandler+0x1ac>)
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	4a67      	ldr	r2, [pc, #412]	; (81036fc <HAL_DMA_IRQHandler+0x1b0>)
 810355e:	fba2 2303 	umull	r2, r3, r2, r3
 8103562:	0a9b      	lsrs	r3, r3, #10
 8103564:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810356a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103570:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103572:	6a3b      	ldr	r3, [r7, #32]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103578:	69fb      	ldr	r3, [r7, #28]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	4a5f      	ldr	r2, [pc, #380]	; (8103700 <HAL_DMA_IRQHandler+0x1b4>)
 8103584:	4293      	cmp	r3, r2
 8103586:	d04a      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	4a5d      	ldr	r2, [pc, #372]	; (8103704 <HAL_DMA_IRQHandler+0x1b8>)
 810358e:	4293      	cmp	r3, r2
 8103590:	d045      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 8103592:	687b      	ldr	r3, [r7, #4]
 8103594:	681b      	ldr	r3, [r3, #0]
 8103596:	4a5c      	ldr	r2, [pc, #368]	; (8103708 <HAL_DMA_IRQHandler+0x1bc>)
 8103598:	4293      	cmp	r3, r2
 810359a:	d040      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	681b      	ldr	r3, [r3, #0]
 81035a0:	4a5a      	ldr	r2, [pc, #360]	; (810370c <HAL_DMA_IRQHandler+0x1c0>)
 81035a2:	4293      	cmp	r3, r2
 81035a4:	d03b      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	681b      	ldr	r3, [r3, #0]
 81035aa:	4a59      	ldr	r2, [pc, #356]	; (8103710 <HAL_DMA_IRQHandler+0x1c4>)
 81035ac:	4293      	cmp	r3, r2
 81035ae:	d036      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035b0:	687b      	ldr	r3, [r7, #4]
 81035b2:	681b      	ldr	r3, [r3, #0]
 81035b4:	4a57      	ldr	r2, [pc, #348]	; (8103714 <HAL_DMA_IRQHandler+0x1c8>)
 81035b6:	4293      	cmp	r3, r2
 81035b8:	d031      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	681b      	ldr	r3, [r3, #0]
 81035be:	4a56      	ldr	r2, [pc, #344]	; (8103718 <HAL_DMA_IRQHandler+0x1cc>)
 81035c0:	4293      	cmp	r3, r2
 81035c2:	d02c      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	4a54      	ldr	r2, [pc, #336]	; (810371c <HAL_DMA_IRQHandler+0x1d0>)
 81035ca:	4293      	cmp	r3, r2
 81035cc:	d027      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	681b      	ldr	r3, [r3, #0]
 81035d2:	4a53      	ldr	r2, [pc, #332]	; (8103720 <HAL_DMA_IRQHandler+0x1d4>)
 81035d4:	4293      	cmp	r3, r2
 81035d6:	d022      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035d8:	687b      	ldr	r3, [r7, #4]
 81035da:	681b      	ldr	r3, [r3, #0]
 81035dc:	4a51      	ldr	r2, [pc, #324]	; (8103724 <HAL_DMA_IRQHandler+0x1d8>)
 81035de:	4293      	cmp	r3, r2
 81035e0:	d01d      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	4a50      	ldr	r2, [pc, #320]	; (8103728 <HAL_DMA_IRQHandler+0x1dc>)
 81035e8:	4293      	cmp	r3, r2
 81035ea:	d018      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	4a4e      	ldr	r2, [pc, #312]	; (810372c <HAL_DMA_IRQHandler+0x1e0>)
 81035f2:	4293      	cmp	r3, r2
 81035f4:	d013      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	4a4d      	ldr	r2, [pc, #308]	; (8103730 <HAL_DMA_IRQHandler+0x1e4>)
 81035fc:	4293      	cmp	r3, r2
 81035fe:	d00e      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	4a4b      	ldr	r2, [pc, #300]	; (8103734 <HAL_DMA_IRQHandler+0x1e8>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d009      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	4a4a      	ldr	r2, [pc, #296]	; (8103738 <HAL_DMA_IRQHandler+0x1ec>)
 8103610:	4293      	cmp	r3, r2
 8103612:	d004      	beq.n	810361e <HAL_DMA_IRQHandler+0xd2>
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	4a48      	ldr	r2, [pc, #288]	; (810373c <HAL_DMA_IRQHandler+0x1f0>)
 810361a:	4293      	cmp	r3, r2
 810361c:	d101      	bne.n	8103622 <HAL_DMA_IRQHandler+0xd6>
 810361e:	2301      	movs	r3, #1
 8103620:	e000      	b.n	8103624 <HAL_DMA_IRQHandler+0xd8>
 8103622:	2300      	movs	r3, #0
 8103624:	2b00      	cmp	r3, #0
 8103626:	f000 842b 	beq.w	8103e80 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810362e:	f003 031f 	and.w	r3, r3, #31
 8103632:	2208      	movs	r2, #8
 8103634:	409a      	lsls	r2, r3
 8103636:	69bb      	ldr	r3, [r7, #24]
 8103638:	4013      	ands	r3, r2
 810363a:	2b00      	cmp	r3, #0
 810363c:	f000 80a2 	beq.w	8103784 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	681b      	ldr	r3, [r3, #0]
 8103644:	4a2e      	ldr	r2, [pc, #184]	; (8103700 <HAL_DMA_IRQHandler+0x1b4>)
 8103646:	4293      	cmp	r3, r2
 8103648:	d04a      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	681b      	ldr	r3, [r3, #0]
 810364e:	4a2d      	ldr	r2, [pc, #180]	; (8103704 <HAL_DMA_IRQHandler+0x1b8>)
 8103650:	4293      	cmp	r3, r2
 8103652:	d045      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	4a2b      	ldr	r2, [pc, #172]	; (8103708 <HAL_DMA_IRQHandler+0x1bc>)
 810365a:	4293      	cmp	r3, r2
 810365c:	d040      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	4a2a      	ldr	r2, [pc, #168]	; (810370c <HAL_DMA_IRQHandler+0x1c0>)
 8103664:	4293      	cmp	r3, r2
 8103666:	d03b      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	681b      	ldr	r3, [r3, #0]
 810366c:	4a28      	ldr	r2, [pc, #160]	; (8103710 <HAL_DMA_IRQHandler+0x1c4>)
 810366e:	4293      	cmp	r3, r2
 8103670:	d036      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	4a27      	ldr	r2, [pc, #156]	; (8103714 <HAL_DMA_IRQHandler+0x1c8>)
 8103678:	4293      	cmp	r3, r2
 810367a:	d031      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	681b      	ldr	r3, [r3, #0]
 8103680:	4a25      	ldr	r2, [pc, #148]	; (8103718 <HAL_DMA_IRQHandler+0x1cc>)
 8103682:	4293      	cmp	r3, r2
 8103684:	d02c      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	681b      	ldr	r3, [r3, #0]
 810368a:	4a24      	ldr	r2, [pc, #144]	; (810371c <HAL_DMA_IRQHandler+0x1d0>)
 810368c:	4293      	cmp	r3, r2
 810368e:	d027      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	4a22      	ldr	r2, [pc, #136]	; (8103720 <HAL_DMA_IRQHandler+0x1d4>)
 8103696:	4293      	cmp	r3, r2
 8103698:	d022      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 810369a:	687b      	ldr	r3, [r7, #4]
 810369c:	681b      	ldr	r3, [r3, #0]
 810369e:	4a21      	ldr	r2, [pc, #132]	; (8103724 <HAL_DMA_IRQHandler+0x1d8>)
 81036a0:	4293      	cmp	r3, r2
 81036a2:	d01d      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	681b      	ldr	r3, [r3, #0]
 81036a8:	4a1f      	ldr	r2, [pc, #124]	; (8103728 <HAL_DMA_IRQHandler+0x1dc>)
 81036aa:	4293      	cmp	r3, r2
 81036ac:	d018      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 81036ae:	687b      	ldr	r3, [r7, #4]
 81036b0:	681b      	ldr	r3, [r3, #0]
 81036b2:	4a1e      	ldr	r2, [pc, #120]	; (810372c <HAL_DMA_IRQHandler+0x1e0>)
 81036b4:	4293      	cmp	r3, r2
 81036b6:	d013      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	681b      	ldr	r3, [r3, #0]
 81036bc:	4a1c      	ldr	r2, [pc, #112]	; (8103730 <HAL_DMA_IRQHandler+0x1e4>)
 81036be:	4293      	cmp	r3, r2
 81036c0:	d00e      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 81036c2:	687b      	ldr	r3, [r7, #4]
 81036c4:	681b      	ldr	r3, [r3, #0]
 81036c6:	4a1b      	ldr	r2, [pc, #108]	; (8103734 <HAL_DMA_IRQHandler+0x1e8>)
 81036c8:	4293      	cmp	r3, r2
 81036ca:	d009      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	4a19      	ldr	r2, [pc, #100]	; (8103738 <HAL_DMA_IRQHandler+0x1ec>)
 81036d2:	4293      	cmp	r3, r2
 81036d4:	d004      	beq.n	81036e0 <HAL_DMA_IRQHandler+0x194>
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	681b      	ldr	r3, [r3, #0]
 81036da:	4a18      	ldr	r2, [pc, #96]	; (810373c <HAL_DMA_IRQHandler+0x1f0>)
 81036dc:	4293      	cmp	r3, r2
 81036de:	d12f      	bne.n	8103740 <HAL_DMA_IRQHandler+0x1f4>
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	f003 0304 	and.w	r3, r3, #4
 81036ea:	2b00      	cmp	r3, #0
 81036ec:	bf14      	ite	ne
 81036ee:	2301      	movne	r3, #1
 81036f0:	2300      	moveq	r3, #0
 81036f2:	b2db      	uxtb	r3, r3
 81036f4:	e02e      	b.n	8103754 <HAL_DMA_IRQHandler+0x208>
 81036f6:	bf00      	nop
 81036f8:	10000000 	.word	0x10000000
 81036fc:	1b4e81b5 	.word	0x1b4e81b5
 8103700:	40020010 	.word	0x40020010
 8103704:	40020028 	.word	0x40020028
 8103708:	40020040 	.word	0x40020040
 810370c:	40020058 	.word	0x40020058
 8103710:	40020070 	.word	0x40020070
 8103714:	40020088 	.word	0x40020088
 8103718:	400200a0 	.word	0x400200a0
 810371c:	400200b8 	.word	0x400200b8
 8103720:	40020410 	.word	0x40020410
 8103724:	40020428 	.word	0x40020428
 8103728:	40020440 	.word	0x40020440
 810372c:	40020458 	.word	0x40020458
 8103730:	40020470 	.word	0x40020470
 8103734:	40020488 	.word	0x40020488
 8103738:	400204a0 	.word	0x400204a0
 810373c:	400204b8 	.word	0x400204b8
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	681b      	ldr	r3, [r3, #0]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	f003 0308 	and.w	r3, r3, #8
 810374a:	2b00      	cmp	r3, #0
 810374c:	bf14      	ite	ne
 810374e:	2301      	movne	r3, #1
 8103750:	2300      	moveq	r3, #0
 8103752:	b2db      	uxtb	r3, r3
 8103754:	2b00      	cmp	r3, #0
 8103756:	d015      	beq.n	8103784 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	681b      	ldr	r3, [r3, #0]
 810375c:	681a      	ldr	r2, [r3, #0]
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	f022 0204 	bic.w	r2, r2, #4
 8103766:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810376c:	f003 031f 	and.w	r3, r3, #31
 8103770:	2208      	movs	r2, #8
 8103772:	409a      	lsls	r2, r3
 8103774:	6a3b      	ldr	r3, [r7, #32]
 8103776:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810377c:	f043 0201 	orr.w	r2, r3, #1
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103788:	f003 031f 	and.w	r3, r3, #31
 810378c:	69ba      	ldr	r2, [r7, #24]
 810378e:	fa22 f303 	lsr.w	r3, r2, r3
 8103792:	f003 0301 	and.w	r3, r3, #1
 8103796:	2b00      	cmp	r3, #0
 8103798:	d06e      	beq.n	8103878 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	681b      	ldr	r3, [r3, #0]
 810379e:	4a69      	ldr	r2, [pc, #420]	; (8103944 <HAL_DMA_IRQHandler+0x3f8>)
 81037a0:	4293      	cmp	r3, r2
 81037a2:	d04a      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	681b      	ldr	r3, [r3, #0]
 81037a8:	4a67      	ldr	r2, [pc, #412]	; (8103948 <HAL_DMA_IRQHandler+0x3fc>)
 81037aa:	4293      	cmp	r3, r2
 81037ac:	d045      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	4a66      	ldr	r2, [pc, #408]	; (810394c <HAL_DMA_IRQHandler+0x400>)
 81037b4:	4293      	cmp	r3, r2
 81037b6:	d040      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037b8:	687b      	ldr	r3, [r7, #4]
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	4a64      	ldr	r2, [pc, #400]	; (8103950 <HAL_DMA_IRQHandler+0x404>)
 81037be:	4293      	cmp	r3, r2
 81037c0:	d03b      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4a63      	ldr	r2, [pc, #396]	; (8103954 <HAL_DMA_IRQHandler+0x408>)
 81037c8:	4293      	cmp	r3, r2
 81037ca:	d036      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4a61      	ldr	r2, [pc, #388]	; (8103958 <HAL_DMA_IRQHandler+0x40c>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d031      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a60      	ldr	r2, [pc, #384]	; (810395c <HAL_DMA_IRQHandler+0x410>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d02c      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	4a5e      	ldr	r2, [pc, #376]	; (8103960 <HAL_DMA_IRQHandler+0x414>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d027      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	4a5d      	ldr	r2, [pc, #372]	; (8103964 <HAL_DMA_IRQHandler+0x418>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d022      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	4a5b      	ldr	r2, [pc, #364]	; (8103968 <HAL_DMA_IRQHandler+0x41c>)
 81037fa:	4293      	cmp	r3, r2
 81037fc:	d01d      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	4a5a      	ldr	r2, [pc, #360]	; (810396c <HAL_DMA_IRQHandler+0x420>)
 8103804:	4293      	cmp	r3, r2
 8103806:	d018      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	4a58      	ldr	r2, [pc, #352]	; (8103970 <HAL_DMA_IRQHandler+0x424>)
 810380e:	4293      	cmp	r3, r2
 8103810:	d013      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	4a57      	ldr	r2, [pc, #348]	; (8103974 <HAL_DMA_IRQHandler+0x428>)
 8103818:	4293      	cmp	r3, r2
 810381a:	d00e      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	681b      	ldr	r3, [r3, #0]
 8103820:	4a55      	ldr	r2, [pc, #340]	; (8103978 <HAL_DMA_IRQHandler+0x42c>)
 8103822:	4293      	cmp	r3, r2
 8103824:	d009      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	4a54      	ldr	r2, [pc, #336]	; (810397c <HAL_DMA_IRQHandler+0x430>)
 810382c:	4293      	cmp	r3, r2
 810382e:	d004      	beq.n	810383a <HAL_DMA_IRQHandler+0x2ee>
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	4a52      	ldr	r2, [pc, #328]	; (8103980 <HAL_DMA_IRQHandler+0x434>)
 8103836:	4293      	cmp	r3, r2
 8103838:	d10a      	bne.n	8103850 <HAL_DMA_IRQHandler+0x304>
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	695b      	ldr	r3, [r3, #20]
 8103840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103844:	2b00      	cmp	r3, #0
 8103846:	bf14      	ite	ne
 8103848:	2301      	movne	r3, #1
 810384a:	2300      	moveq	r3, #0
 810384c:	b2db      	uxtb	r3, r3
 810384e:	e003      	b.n	8103858 <HAL_DMA_IRQHandler+0x30c>
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	681b      	ldr	r3, [r3, #0]
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	2300      	movs	r3, #0
 8103858:	2b00      	cmp	r3, #0
 810385a:	d00d      	beq.n	8103878 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103860:	f003 031f 	and.w	r3, r3, #31
 8103864:	2201      	movs	r2, #1
 8103866:	409a      	lsls	r2, r3
 8103868:	6a3b      	ldr	r3, [r7, #32]
 810386a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103870:	f043 0202 	orr.w	r2, r3, #2
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810387c:	f003 031f 	and.w	r3, r3, #31
 8103880:	2204      	movs	r2, #4
 8103882:	409a      	lsls	r2, r3
 8103884:	69bb      	ldr	r3, [r7, #24]
 8103886:	4013      	ands	r3, r2
 8103888:	2b00      	cmp	r3, #0
 810388a:	f000 808f 	beq.w	81039ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	4a2c      	ldr	r2, [pc, #176]	; (8103944 <HAL_DMA_IRQHandler+0x3f8>)
 8103894:	4293      	cmp	r3, r2
 8103896:	d04a      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	4a2a      	ldr	r2, [pc, #168]	; (8103948 <HAL_DMA_IRQHandler+0x3fc>)
 810389e:	4293      	cmp	r3, r2
 81038a0:	d045      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	4a29      	ldr	r2, [pc, #164]	; (810394c <HAL_DMA_IRQHandler+0x400>)
 81038a8:	4293      	cmp	r3, r2
 81038aa:	d040      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	4a27      	ldr	r2, [pc, #156]	; (8103950 <HAL_DMA_IRQHandler+0x404>)
 81038b2:	4293      	cmp	r3, r2
 81038b4:	d03b      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	4a26      	ldr	r2, [pc, #152]	; (8103954 <HAL_DMA_IRQHandler+0x408>)
 81038bc:	4293      	cmp	r3, r2
 81038be:	d036      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	4a24      	ldr	r2, [pc, #144]	; (8103958 <HAL_DMA_IRQHandler+0x40c>)
 81038c6:	4293      	cmp	r3, r2
 81038c8:	d031      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	4a23      	ldr	r2, [pc, #140]	; (810395c <HAL_DMA_IRQHandler+0x410>)
 81038d0:	4293      	cmp	r3, r2
 81038d2:	d02c      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	4a21      	ldr	r2, [pc, #132]	; (8103960 <HAL_DMA_IRQHandler+0x414>)
 81038da:	4293      	cmp	r3, r2
 81038dc:	d027      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	4a20      	ldr	r2, [pc, #128]	; (8103964 <HAL_DMA_IRQHandler+0x418>)
 81038e4:	4293      	cmp	r3, r2
 81038e6:	d022      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	4a1e      	ldr	r2, [pc, #120]	; (8103968 <HAL_DMA_IRQHandler+0x41c>)
 81038ee:	4293      	cmp	r3, r2
 81038f0:	d01d      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	681b      	ldr	r3, [r3, #0]
 81038f6:	4a1d      	ldr	r2, [pc, #116]	; (810396c <HAL_DMA_IRQHandler+0x420>)
 81038f8:	4293      	cmp	r3, r2
 81038fa:	d018      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	4a1b      	ldr	r2, [pc, #108]	; (8103970 <HAL_DMA_IRQHandler+0x424>)
 8103902:	4293      	cmp	r3, r2
 8103904:	d013      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	681b      	ldr	r3, [r3, #0]
 810390a:	4a1a      	ldr	r2, [pc, #104]	; (8103974 <HAL_DMA_IRQHandler+0x428>)
 810390c:	4293      	cmp	r3, r2
 810390e:	d00e      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	681b      	ldr	r3, [r3, #0]
 8103914:	4a18      	ldr	r2, [pc, #96]	; (8103978 <HAL_DMA_IRQHandler+0x42c>)
 8103916:	4293      	cmp	r3, r2
 8103918:	d009      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	681b      	ldr	r3, [r3, #0]
 810391e:	4a17      	ldr	r2, [pc, #92]	; (810397c <HAL_DMA_IRQHandler+0x430>)
 8103920:	4293      	cmp	r3, r2
 8103922:	d004      	beq.n	810392e <HAL_DMA_IRQHandler+0x3e2>
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	4a15      	ldr	r2, [pc, #84]	; (8103980 <HAL_DMA_IRQHandler+0x434>)
 810392a:	4293      	cmp	r3, r2
 810392c:	d12a      	bne.n	8103984 <HAL_DMA_IRQHandler+0x438>
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	f003 0302 	and.w	r3, r3, #2
 8103938:	2b00      	cmp	r3, #0
 810393a:	bf14      	ite	ne
 810393c:	2301      	movne	r3, #1
 810393e:	2300      	moveq	r3, #0
 8103940:	b2db      	uxtb	r3, r3
 8103942:	e023      	b.n	810398c <HAL_DMA_IRQHandler+0x440>
 8103944:	40020010 	.word	0x40020010
 8103948:	40020028 	.word	0x40020028
 810394c:	40020040 	.word	0x40020040
 8103950:	40020058 	.word	0x40020058
 8103954:	40020070 	.word	0x40020070
 8103958:	40020088 	.word	0x40020088
 810395c:	400200a0 	.word	0x400200a0
 8103960:	400200b8 	.word	0x400200b8
 8103964:	40020410 	.word	0x40020410
 8103968:	40020428 	.word	0x40020428
 810396c:	40020440 	.word	0x40020440
 8103970:	40020458 	.word	0x40020458
 8103974:	40020470 	.word	0x40020470
 8103978:	40020488 	.word	0x40020488
 810397c:	400204a0 	.word	0x400204a0
 8103980:	400204b8 	.word	0x400204b8
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	681b      	ldr	r3, [r3, #0]
 810398a:	2300      	movs	r3, #0
 810398c:	2b00      	cmp	r3, #0
 810398e:	d00d      	beq.n	81039ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103994:	f003 031f 	and.w	r3, r3, #31
 8103998:	2204      	movs	r2, #4
 810399a:	409a      	lsls	r2, r3
 810399c:	6a3b      	ldr	r3, [r7, #32]
 810399e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039a4:	f043 0204 	orr.w	r2, r3, #4
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81039b0:	f003 031f 	and.w	r3, r3, #31
 81039b4:	2210      	movs	r2, #16
 81039b6:	409a      	lsls	r2, r3
 81039b8:	69bb      	ldr	r3, [r7, #24]
 81039ba:	4013      	ands	r3, r2
 81039bc:	2b00      	cmp	r3, #0
 81039be:	f000 80a6 	beq.w	8103b0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	4a85      	ldr	r2, [pc, #532]	; (8103bdc <HAL_DMA_IRQHandler+0x690>)
 81039c8:	4293      	cmp	r3, r2
 81039ca:	d04a      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	4a83      	ldr	r2, [pc, #524]	; (8103be0 <HAL_DMA_IRQHandler+0x694>)
 81039d2:	4293      	cmp	r3, r2
 81039d4:	d045      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	681b      	ldr	r3, [r3, #0]
 81039da:	4a82      	ldr	r2, [pc, #520]	; (8103be4 <HAL_DMA_IRQHandler+0x698>)
 81039dc:	4293      	cmp	r3, r2
 81039de:	d040      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	4a80      	ldr	r2, [pc, #512]	; (8103be8 <HAL_DMA_IRQHandler+0x69c>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d03b      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	4a7f      	ldr	r2, [pc, #508]	; (8103bec <HAL_DMA_IRQHandler+0x6a0>)
 81039f0:	4293      	cmp	r3, r2
 81039f2:	d036      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	4a7d      	ldr	r2, [pc, #500]	; (8103bf0 <HAL_DMA_IRQHandler+0x6a4>)
 81039fa:	4293      	cmp	r3, r2
 81039fc:	d031      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	4a7c      	ldr	r2, [pc, #496]	; (8103bf4 <HAL_DMA_IRQHandler+0x6a8>)
 8103a04:	4293      	cmp	r3, r2
 8103a06:	d02c      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	4a7a      	ldr	r2, [pc, #488]	; (8103bf8 <HAL_DMA_IRQHandler+0x6ac>)
 8103a0e:	4293      	cmp	r3, r2
 8103a10:	d027      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	681b      	ldr	r3, [r3, #0]
 8103a16:	4a79      	ldr	r2, [pc, #484]	; (8103bfc <HAL_DMA_IRQHandler+0x6b0>)
 8103a18:	4293      	cmp	r3, r2
 8103a1a:	d022      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	4a77      	ldr	r2, [pc, #476]	; (8103c00 <HAL_DMA_IRQHandler+0x6b4>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d01d      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	681b      	ldr	r3, [r3, #0]
 8103a2a:	4a76      	ldr	r2, [pc, #472]	; (8103c04 <HAL_DMA_IRQHandler+0x6b8>)
 8103a2c:	4293      	cmp	r3, r2
 8103a2e:	d018      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	4a74      	ldr	r2, [pc, #464]	; (8103c08 <HAL_DMA_IRQHandler+0x6bc>)
 8103a36:	4293      	cmp	r3, r2
 8103a38:	d013      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	4a73      	ldr	r2, [pc, #460]	; (8103c0c <HAL_DMA_IRQHandler+0x6c0>)
 8103a40:	4293      	cmp	r3, r2
 8103a42:	d00e      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	681b      	ldr	r3, [r3, #0]
 8103a48:	4a71      	ldr	r2, [pc, #452]	; (8103c10 <HAL_DMA_IRQHandler+0x6c4>)
 8103a4a:	4293      	cmp	r3, r2
 8103a4c:	d009      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	4a70      	ldr	r2, [pc, #448]	; (8103c14 <HAL_DMA_IRQHandler+0x6c8>)
 8103a54:	4293      	cmp	r3, r2
 8103a56:	d004      	beq.n	8103a62 <HAL_DMA_IRQHandler+0x516>
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	681b      	ldr	r3, [r3, #0]
 8103a5c:	4a6e      	ldr	r2, [pc, #440]	; (8103c18 <HAL_DMA_IRQHandler+0x6cc>)
 8103a5e:	4293      	cmp	r3, r2
 8103a60:	d10a      	bne.n	8103a78 <HAL_DMA_IRQHandler+0x52c>
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	f003 0308 	and.w	r3, r3, #8
 8103a6c:	2b00      	cmp	r3, #0
 8103a6e:	bf14      	ite	ne
 8103a70:	2301      	movne	r3, #1
 8103a72:	2300      	moveq	r3, #0
 8103a74:	b2db      	uxtb	r3, r3
 8103a76:	e009      	b.n	8103a8c <HAL_DMA_IRQHandler+0x540>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	f003 0304 	and.w	r3, r3, #4
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	bf14      	ite	ne
 8103a86:	2301      	movne	r3, #1
 8103a88:	2300      	moveq	r3, #0
 8103a8a:	b2db      	uxtb	r3, r3
 8103a8c:	2b00      	cmp	r3, #0
 8103a8e:	d03e      	beq.n	8103b0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a94:	f003 031f 	and.w	r3, r3, #31
 8103a98:	2210      	movs	r2, #16
 8103a9a:	409a      	lsls	r2, r3
 8103a9c:	6a3b      	ldr	r3, [r7, #32]
 8103a9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103aaa:	2b00      	cmp	r3, #0
 8103aac:	d018      	beq.n	8103ae0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	681b      	ldr	r3, [r3, #0]
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103ab8:	2b00      	cmp	r3, #0
 8103aba:	d108      	bne.n	8103ace <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ac0:	2b00      	cmp	r3, #0
 8103ac2:	d024      	beq.n	8103b0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ac8:	6878      	ldr	r0, [r7, #4]
 8103aca:	4798      	blx	r3
 8103acc:	e01f      	b.n	8103b0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ad2:	2b00      	cmp	r3, #0
 8103ad4:	d01b      	beq.n	8103b0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ada:	6878      	ldr	r0, [r7, #4]
 8103adc:	4798      	blx	r3
 8103ade:	e016      	b.n	8103b0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	681b      	ldr	r3, [r3, #0]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103aea:	2b00      	cmp	r3, #0
 8103aec:	d107      	bne.n	8103afe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	681b      	ldr	r3, [r3, #0]
 8103af2:	681a      	ldr	r2, [r3, #0]
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	f022 0208 	bic.w	r2, r2, #8
 8103afc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	d003      	beq.n	8103b0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b0a:	6878      	ldr	r0, [r7, #4]
 8103b0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b12:	f003 031f 	and.w	r3, r3, #31
 8103b16:	2220      	movs	r2, #32
 8103b18:	409a      	lsls	r2, r3
 8103b1a:	69bb      	ldr	r3, [r7, #24]
 8103b1c:	4013      	ands	r3, r2
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	f000 8110 	beq.w	8103d44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	4a2c      	ldr	r2, [pc, #176]	; (8103bdc <HAL_DMA_IRQHandler+0x690>)
 8103b2a:	4293      	cmp	r3, r2
 8103b2c:	d04a      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	4a2b      	ldr	r2, [pc, #172]	; (8103be0 <HAL_DMA_IRQHandler+0x694>)
 8103b34:	4293      	cmp	r3, r2
 8103b36:	d045      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	681b      	ldr	r3, [r3, #0]
 8103b3c:	4a29      	ldr	r2, [pc, #164]	; (8103be4 <HAL_DMA_IRQHandler+0x698>)
 8103b3e:	4293      	cmp	r3, r2
 8103b40:	d040      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	4a28      	ldr	r2, [pc, #160]	; (8103be8 <HAL_DMA_IRQHandler+0x69c>)
 8103b48:	4293      	cmp	r3, r2
 8103b4a:	d03b      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	4a26      	ldr	r2, [pc, #152]	; (8103bec <HAL_DMA_IRQHandler+0x6a0>)
 8103b52:	4293      	cmp	r3, r2
 8103b54:	d036      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	4a25      	ldr	r2, [pc, #148]	; (8103bf0 <HAL_DMA_IRQHandler+0x6a4>)
 8103b5c:	4293      	cmp	r3, r2
 8103b5e:	d031      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	4a23      	ldr	r2, [pc, #140]	; (8103bf4 <HAL_DMA_IRQHandler+0x6a8>)
 8103b66:	4293      	cmp	r3, r2
 8103b68:	d02c      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	4a22      	ldr	r2, [pc, #136]	; (8103bf8 <HAL_DMA_IRQHandler+0x6ac>)
 8103b70:	4293      	cmp	r3, r2
 8103b72:	d027      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	4a20      	ldr	r2, [pc, #128]	; (8103bfc <HAL_DMA_IRQHandler+0x6b0>)
 8103b7a:	4293      	cmp	r3, r2
 8103b7c:	d022      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	4a1f      	ldr	r2, [pc, #124]	; (8103c00 <HAL_DMA_IRQHandler+0x6b4>)
 8103b84:	4293      	cmp	r3, r2
 8103b86:	d01d      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	4a1d      	ldr	r2, [pc, #116]	; (8103c04 <HAL_DMA_IRQHandler+0x6b8>)
 8103b8e:	4293      	cmp	r3, r2
 8103b90:	d018      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	681b      	ldr	r3, [r3, #0]
 8103b96:	4a1c      	ldr	r2, [pc, #112]	; (8103c08 <HAL_DMA_IRQHandler+0x6bc>)
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	d013      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	4a1a      	ldr	r2, [pc, #104]	; (8103c0c <HAL_DMA_IRQHandler+0x6c0>)
 8103ba2:	4293      	cmp	r3, r2
 8103ba4:	d00e      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	4a19      	ldr	r2, [pc, #100]	; (8103c10 <HAL_DMA_IRQHandler+0x6c4>)
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d009      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	4a17      	ldr	r2, [pc, #92]	; (8103c14 <HAL_DMA_IRQHandler+0x6c8>)
 8103bb6:	4293      	cmp	r3, r2
 8103bb8:	d004      	beq.n	8103bc4 <HAL_DMA_IRQHandler+0x678>
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	4a16      	ldr	r2, [pc, #88]	; (8103c18 <HAL_DMA_IRQHandler+0x6cc>)
 8103bc0:	4293      	cmp	r3, r2
 8103bc2:	d12b      	bne.n	8103c1c <HAL_DMA_IRQHandler+0x6d0>
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	f003 0310 	and.w	r3, r3, #16
 8103bce:	2b00      	cmp	r3, #0
 8103bd0:	bf14      	ite	ne
 8103bd2:	2301      	movne	r3, #1
 8103bd4:	2300      	moveq	r3, #0
 8103bd6:	b2db      	uxtb	r3, r3
 8103bd8:	e02a      	b.n	8103c30 <HAL_DMA_IRQHandler+0x6e4>
 8103bda:	bf00      	nop
 8103bdc:	40020010 	.word	0x40020010
 8103be0:	40020028 	.word	0x40020028
 8103be4:	40020040 	.word	0x40020040
 8103be8:	40020058 	.word	0x40020058
 8103bec:	40020070 	.word	0x40020070
 8103bf0:	40020088 	.word	0x40020088
 8103bf4:	400200a0 	.word	0x400200a0
 8103bf8:	400200b8 	.word	0x400200b8
 8103bfc:	40020410 	.word	0x40020410
 8103c00:	40020428 	.word	0x40020428
 8103c04:	40020440 	.word	0x40020440
 8103c08:	40020458 	.word	0x40020458
 8103c0c:	40020470 	.word	0x40020470
 8103c10:	40020488 	.word	0x40020488
 8103c14:	400204a0 	.word	0x400204a0
 8103c18:	400204b8 	.word	0x400204b8
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	681b      	ldr	r3, [r3, #0]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	f003 0302 	and.w	r3, r3, #2
 8103c26:	2b00      	cmp	r3, #0
 8103c28:	bf14      	ite	ne
 8103c2a:	2301      	movne	r3, #1
 8103c2c:	2300      	moveq	r3, #0
 8103c2e:	b2db      	uxtb	r3, r3
 8103c30:	2b00      	cmp	r3, #0
 8103c32:	f000 8087 	beq.w	8103d44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c3a:	f003 031f 	and.w	r3, r3, #31
 8103c3e:	2220      	movs	r2, #32
 8103c40:	409a      	lsls	r2, r3
 8103c42:	6a3b      	ldr	r3, [r7, #32]
 8103c44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103c4c:	b2db      	uxtb	r3, r3
 8103c4e:	2b04      	cmp	r3, #4
 8103c50:	d139      	bne.n	8103cc6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	681a      	ldr	r2, [r3, #0]
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	f022 0216 	bic.w	r2, r2, #22
 8103c60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	695a      	ldr	r2, [r3, #20]
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103c70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103c76:	2b00      	cmp	r3, #0
 8103c78:	d103      	bne.n	8103c82 <HAL_DMA_IRQHandler+0x736>
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c7e:	2b00      	cmp	r3, #0
 8103c80:	d007      	beq.n	8103c92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	681a      	ldr	r2, [r3, #0]
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	f022 0208 	bic.w	r2, r2, #8
 8103c90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c96:	f003 031f 	and.w	r3, r3, #31
 8103c9a:	223f      	movs	r2, #63	; 0x3f
 8103c9c:	409a      	lsls	r2, r3
 8103c9e:	6a3b      	ldr	r3, [r7, #32]
 8103ca0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	2200      	movs	r2, #0
 8103ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	2201      	movs	r2, #1
 8103cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	f000 834a 	beq.w	8104350 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cc0:	6878      	ldr	r0, [r7, #4]
 8103cc2:	4798      	blx	r3
          }
          return;
 8103cc4:	e344      	b.n	8104350 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103cd0:	2b00      	cmp	r3, #0
 8103cd2:	d018      	beq.n	8103d06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	681b      	ldr	r3, [r3, #0]
 8103cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103cde:	2b00      	cmp	r3, #0
 8103ce0:	d108      	bne.n	8103cf4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103ce2:	687b      	ldr	r3, [r7, #4]
 8103ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ce6:	2b00      	cmp	r3, #0
 8103ce8:	d02c      	beq.n	8103d44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103cee:	6878      	ldr	r0, [r7, #4]
 8103cf0:	4798      	blx	r3
 8103cf2:	e027      	b.n	8103d44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cf8:	2b00      	cmp	r3, #0
 8103cfa:	d023      	beq.n	8103d44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d00:	6878      	ldr	r0, [r7, #4]
 8103d02:	4798      	blx	r3
 8103d04:	e01e      	b.n	8103d44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	681b      	ldr	r3, [r3, #0]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d10f      	bne.n	8103d34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	681a      	ldr	r2, [r3, #0]
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	681b      	ldr	r3, [r3, #0]
 8103d1e:	f022 0210 	bic.w	r2, r2, #16
 8103d22:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	2200      	movs	r2, #0
 8103d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	2201      	movs	r2, #1
 8103d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d38:	2b00      	cmp	r3, #0
 8103d3a:	d003      	beq.n	8103d44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d40:	6878      	ldr	r0, [r7, #4]
 8103d42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d48:	2b00      	cmp	r3, #0
 8103d4a:	f000 8306 	beq.w	810435a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d52:	f003 0301 	and.w	r3, r3, #1
 8103d56:	2b00      	cmp	r3, #0
 8103d58:	f000 8088 	beq.w	8103e6c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	2204      	movs	r2, #4
 8103d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	681b      	ldr	r3, [r3, #0]
 8103d68:	4a7a      	ldr	r2, [pc, #488]	; (8103f54 <HAL_DMA_IRQHandler+0xa08>)
 8103d6a:	4293      	cmp	r3, r2
 8103d6c:	d04a      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	4a79      	ldr	r2, [pc, #484]	; (8103f58 <HAL_DMA_IRQHandler+0xa0c>)
 8103d74:	4293      	cmp	r3, r2
 8103d76:	d045      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	681b      	ldr	r3, [r3, #0]
 8103d7c:	4a77      	ldr	r2, [pc, #476]	; (8103f5c <HAL_DMA_IRQHandler+0xa10>)
 8103d7e:	4293      	cmp	r3, r2
 8103d80:	d040      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	681b      	ldr	r3, [r3, #0]
 8103d86:	4a76      	ldr	r2, [pc, #472]	; (8103f60 <HAL_DMA_IRQHandler+0xa14>)
 8103d88:	4293      	cmp	r3, r2
 8103d8a:	d03b      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	681b      	ldr	r3, [r3, #0]
 8103d90:	4a74      	ldr	r2, [pc, #464]	; (8103f64 <HAL_DMA_IRQHandler+0xa18>)
 8103d92:	4293      	cmp	r3, r2
 8103d94:	d036      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103d96:	687b      	ldr	r3, [r7, #4]
 8103d98:	681b      	ldr	r3, [r3, #0]
 8103d9a:	4a73      	ldr	r2, [pc, #460]	; (8103f68 <HAL_DMA_IRQHandler+0xa1c>)
 8103d9c:	4293      	cmp	r3, r2
 8103d9e:	d031      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	4a71      	ldr	r2, [pc, #452]	; (8103f6c <HAL_DMA_IRQHandler+0xa20>)
 8103da6:	4293      	cmp	r3, r2
 8103da8:	d02c      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	681b      	ldr	r3, [r3, #0]
 8103dae:	4a70      	ldr	r2, [pc, #448]	; (8103f70 <HAL_DMA_IRQHandler+0xa24>)
 8103db0:	4293      	cmp	r3, r2
 8103db2:	d027      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	681b      	ldr	r3, [r3, #0]
 8103db8:	4a6e      	ldr	r2, [pc, #440]	; (8103f74 <HAL_DMA_IRQHandler+0xa28>)
 8103dba:	4293      	cmp	r3, r2
 8103dbc:	d022      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	681b      	ldr	r3, [r3, #0]
 8103dc2:	4a6d      	ldr	r2, [pc, #436]	; (8103f78 <HAL_DMA_IRQHandler+0xa2c>)
 8103dc4:	4293      	cmp	r3, r2
 8103dc6:	d01d      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103dc8:	687b      	ldr	r3, [r7, #4]
 8103dca:	681b      	ldr	r3, [r3, #0]
 8103dcc:	4a6b      	ldr	r2, [pc, #428]	; (8103f7c <HAL_DMA_IRQHandler+0xa30>)
 8103dce:	4293      	cmp	r3, r2
 8103dd0:	d018      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	4a6a      	ldr	r2, [pc, #424]	; (8103f80 <HAL_DMA_IRQHandler+0xa34>)
 8103dd8:	4293      	cmp	r3, r2
 8103dda:	d013      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	681b      	ldr	r3, [r3, #0]
 8103de0:	4a68      	ldr	r2, [pc, #416]	; (8103f84 <HAL_DMA_IRQHandler+0xa38>)
 8103de2:	4293      	cmp	r3, r2
 8103de4:	d00e      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103de6:	687b      	ldr	r3, [r7, #4]
 8103de8:	681b      	ldr	r3, [r3, #0]
 8103dea:	4a67      	ldr	r2, [pc, #412]	; (8103f88 <HAL_DMA_IRQHandler+0xa3c>)
 8103dec:	4293      	cmp	r3, r2
 8103dee:	d009      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	681b      	ldr	r3, [r3, #0]
 8103df4:	4a65      	ldr	r2, [pc, #404]	; (8103f8c <HAL_DMA_IRQHandler+0xa40>)
 8103df6:	4293      	cmp	r3, r2
 8103df8:	d004      	beq.n	8103e04 <HAL_DMA_IRQHandler+0x8b8>
 8103dfa:	687b      	ldr	r3, [r7, #4]
 8103dfc:	681b      	ldr	r3, [r3, #0]
 8103dfe:	4a64      	ldr	r2, [pc, #400]	; (8103f90 <HAL_DMA_IRQHandler+0xa44>)
 8103e00:	4293      	cmp	r3, r2
 8103e02:	d108      	bne.n	8103e16 <HAL_DMA_IRQHandler+0x8ca>
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	681a      	ldr	r2, [r3, #0]
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	f022 0201 	bic.w	r2, r2, #1
 8103e12:	601a      	str	r2, [r3, #0]
 8103e14:	e007      	b.n	8103e26 <HAL_DMA_IRQHandler+0x8da>
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	681b      	ldr	r3, [r3, #0]
 8103e1a:	681a      	ldr	r2, [r3, #0]
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	f022 0201 	bic.w	r2, r2, #1
 8103e24:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8103e26:	68fb      	ldr	r3, [r7, #12]
 8103e28:	3301      	adds	r3, #1
 8103e2a:	60fb      	str	r3, [r7, #12]
 8103e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103e2e:	429a      	cmp	r2, r3
 8103e30:	d307      	bcc.n	8103e42 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	681b      	ldr	r3, [r3, #0]
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	f003 0301 	and.w	r3, r3, #1
 8103e3c:	2b00      	cmp	r3, #0
 8103e3e:	d1f2      	bne.n	8103e26 <HAL_DMA_IRQHandler+0x8da>
 8103e40:	e000      	b.n	8103e44 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103e42:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	2200      	movs	r2, #0
 8103e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	f003 0301 	and.w	r3, r3, #1
 8103e56:	2b00      	cmp	r3, #0
 8103e58:	d004      	beq.n	8103e64 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	2203      	movs	r2, #3
 8103e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103e62:	e003      	b.n	8103e6c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	2201      	movs	r2, #1
 8103e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e70:	2b00      	cmp	r3, #0
 8103e72:	f000 8272 	beq.w	810435a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e7a:	6878      	ldr	r0, [r7, #4]
 8103e7c:	4798      	blx	r3
 8103e7e:	e26c      	b.n	810435a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	4a43      	ldr	r2, [pc, #268]	; (8103f94 <HAL_DMA_IRQHandler+0xa48>)
 8103e86:	4293      	cmp	r3, r2
 8103e88:	d022      	beq.n	8103ed0 <HAL_DMA_IRQHandler+0x984>
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	4a42      	ldr	r2, [pc, #264]	; (8103f98 <HAL_DMA_IRQHandler+0xa4c>)
 8103e90:	4293      	cmp	r3, r2
 8103e92:	d01d      	beq.n	8103ed0 <HAL_DMA_IRQHandler+0x984>
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	4a40      	ldr	r2, [pc, #256]	; (8103f9c <HAL_DMA_IRQHandler+0xa50>)
 8103e9a:	4293      	cmp	r3, r2
 8103e9c:	d018      	beq.n	8103ed0 <HAL_DMA_IRQHandler+0x984>
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	4a3f      	ldr	r2, [pc, #252]	; (8103fa0 <HAL_DMA_IRQHandler+0xa54>)
 8103ea4:	4293      	cmp	r3, r2
 8103ea6:	d013      	beq.n	8103ed0 <HAL_DMA_IRQHandler+0x984>
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	4a3d      	ldr	r2, [pc, #244]	; (8103fa4 <HAL_DMA_IRQHandler+0xa58>)
 8103eae:	4293      	cmp	r3, r2
 8103eb0:	d00e      	beq.n	8103ed0 <HAL_DMA_IRQHandler+0x984>
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	681b      	ldr	r3, [r3, #0]
 8103eb6:	4a3c      	ldr	r2, [pc, #240]	; (8103fa8 <HAL_DMA_IRQHandler+0xa5c>)
 8103eb8:	4293      	cmp	r3, r2
 8103eba:	d009      	beq.n	8103ed0 <HAL_DMA_IRQHandler+0x984>
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	681b      	ldr	r3, [r3, #0]
 8103ec0:	4a3a      	ldr	r2, [pc, #232]	; (8103fac <HAL_DMA_IRQHandler+0xa60>)
 8103ec2:	4293      	cmp	r3, r2
 8103ec4:	d004      	beq.n	8103ed0 <HAL_DMA_IRQHandler+0x984>
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	681b      	ldr	r3, [r3, #0]
 8103eca:	4a39      	ldr	r2, [pc, #228]	; (8103fb0 <HAL_DMA_IRQHandler+0xa64>)
 8103ecc:	4293      	cmp	r3, r2
 8103ece:	d101      	bne.n	8103ed4 <HAL_DMA_IRQHandler+0x988>
 8103ed0:	2301      	movs	r3, #1
 8103ed2:	e000      	b.n	8103ed6 <HAL_DMA_IRQHandler+0x98a>
 8103ed4:	2300      	movs	r3, #0
 8103ed6:	2b00      	cmp	r3, #0
 8103ed8:	f000 823f 	beq.w	810435a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ee8:	f003 031f 	and.w	r3, r3, #31
 8103eec:	2204      	movs	r2, #4
 8103eee:	409a      	lsls	r2, r3
 8103ef0:	697b      	ldr	r3, [r7, #20]
 8103ef2:	4013      	ands	r3, r2
 8103ef4:	2b00      	cmp	r3, #0
 8103ef6:	f000 80cd 	beq.w	8104094 <HAL_DMA_IRQHandler+0xb48>
 8103efa:	693b      	ldr	r3, [r7, #16]
 8103efc:	f003 0304 	and.w	r3, r3, #4
 8103f00:	2b00      	cmp	r3, #0
 8103f02:	f000 80c7 	beq.w	8104094 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103f06:	687b      	ldr	r3, [r7, #4]
 8103f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f0a:	f003 031f 	and.w	r3, r3, #31
 8103f0e:	2204      	movs	r2, #4
 8103f10:	409a      	lsls	r2, r3
 8103f12:	69fb      	ldr	r3, [r7, #28]
 8103f14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103f16:	693b      	ldr	r3, [r7, #16]
 8103f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103f1c:	2b00      	cmp	r3, #0
 8103f1e:	d049      	beq.n	8103fb4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103f20:	693b      	ldr	r3, [r7, #16]
 8103f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103f26:	2b00      	cmp	r3, #0
 8103f28:	d109      	bne.n	8103f3e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103f2e:	2b00      	cmp	r3, #0
 8103f30:	f000 8210 	beq.w	8104354 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103f38:	6878      	ldr	r0, [r7, #4]
 8103f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103f3c:	e20a      	b.n	8104354 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f42:	2b00      	cmp	r3, #0
 8103f44:	f000 8206 	beq.w	8104354 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f4c:	6878      	ldr	r0, [r7, #4]
 8103f4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103f50:	e200      	b.n	8104354 <HAL_DMA_IRQHandler+0xe08>
 8103f52:	bf00      	nop
 8103f54:	40020010 	.word	0x40020010
 8103f58:	40020028 	.word	0x40020028
 8103f5c:	40020040 	.word	0x40020040
 8103f60:	40020058 	.word	0x40020058
 8103f64:	40020070 	.word	0x40020070
 8103f68:	40020088 	.word	0x40020088
 8103f6c:	400200a0 	.word	0x400200a0
 8103f70:	400200b8 	.word	0x400200b8
 8103f74:	40020410 	.word	0x40020410
 8103f78:	40020428 	.word	0x40020428
 8103f7c:	40020440 	.word	0x40020440
 8103f80:	40020458 	.word	0x40020458
 8103f84:	40020470 	.word	0x40020470
 8103f88:	40020488 	.word	0x40020488
 8103f8c:	400204a0 	.word	0x400204a0
 8103f90:	400204b8 	.word	0x400204b8
 8103f94:	58025408 	.word	0x58025408
 8103f98:	5802541c 	.word	0x5802541c
 8103f9c:	58025430 	.word	0x58025430
 8103fa0:	58025444 	.word	0x58025444
 8103fa4:	58025458 	.word	0x58025458
 8103fa8:	5802546c 	.word	0x5802546c
 8103fac:	58025480 	.word	0x58025480
 8103fb0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103fb4:	693b      	ldr	r3, [r7, #16]
 8103fb6:	f003 0320 	and.w	r3, r3, #32
 8103fba:	2b00      	cmp	r3, #0
 8103fbc:	d160      	bne.n	8104080 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	4a8c      	ldr	r2, [pc, #560]	; (81041f4 <HAL_DMA_IRQHandler+0xca8>)
 8103fc4:	4293      	cmp	r3, r2
 8103fc6:	d04a      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	4a8a      	ldr	r2, [pc, #552]	; (81041f8 <HAL_DMA_IRQHandler+0xcac>)
 8103fce:	4293      	cmp	r3, r2
 8103fd0:	d045      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	4a89      	ldr	r2, [pc, #548]	; (81041fc <HAL_DMA_IRQHandler+0xcb0>)
 8103fd8:	4293      	cmp	r3, r2
 8103fda:	d040      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	681b      	ldr	r3, [r3, #0]
 8103fe0:	4a87      	ldr	r2, [pc, #540]	; (8104200 <HAL_DMA_IRQHandler+0xcb4>)
 8103fe2:	4293      	cmp	r3, r2
 8103fe4:	d03b      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	4a86      	ldr	r2, [pc, #536]	; (8104204 <HAL_DMA_IRQHandler+0xcb8>)
 8103fec:	4293      	cmp	r3, r2
 8103fee:	d036      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8103ff0:	687b      	ldr	r3, [r7, #4]
 8103ff2:	681b      	ldr	r3, [r3, #0]
 8103ff4:	4a84      	ldr	r2, [pc, #528]	; (8104208 <HAL_DMA_IRQHandler+0xcbc>)
 8103ff6:	4293      	cmp	r3, r2
 8103ff8:	d031      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	681b      	ldr	r3, [r3, #0]
 8103ffe:	4a83      	ldr	r2, [pc, #524]	; (810420c <HAL_DMA_IRQHandler+0xcc0>)
 8104000:	4293      	cmp	r3, r2
 8104002:	d02c      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	681b      	ldr	r3, [r3, #0]
 8104008:	4a81      	ldr	r2, [pc, #516]	; (8104210 <HAL_DMA_IRQHandler+0xcc4>)
 810400a:	4293      	cmp	r3, r2
 810400c:	d027      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 810400e:	687b      	ldr	r3, [r7, #4]
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	4a80      	ldr	r2, [pc, #512]	; (8104214 <HAL_DMA_IRQHandler+0xcc8>)
 8104014:	4293      	cmp	r3, r2
 8104016:	d022      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	4a7e      	ldr	r2, [pc, #504]	; (8104218 <HAL_DMA_IRQHandler+0xccc>)
 810401e:	4293      	cmp	r3, r2
 8104020:	d01d      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	4a7d      	ldr	r2, [pc, #500]	; (810421c <HAL_DMA_IRQHandler+0xcd0>)
 8104028:	4293      	cmp	r3, r2
 810402a:	d018      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 810402c:	687b      	ldr	r3, [r7, #4]
 810402e:	681b      	ldr	r3, [r3, #0]
 8104030:	4a7b      	ldr	r2, [pc, #492]	; (8104220 <HAL_DMA_IRQHandler+0xcd4>)
 8104032:	4293      	cmp	r3, r2
 8104034:	d013      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	681b      	ldr	r3, [r3, #0]
 810403a:	4a7a      	ldr	r2, [pc, #488]	; (8104224 <HAL_DMA_IRQHandler+0xcd8>)
 810403c:	4293      	cmp	r3, r2
 810403e:	d00e      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	4a78      	ldr	r2, [pc, #480]	; (8104228 <HAL_DMA_IRQHandler+0xcdc>)
 8104046:	4293      	cmp	r3, r2
 8104048:	d009      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	4a77      	ldr	r2, [pc, #476]	; (810422c <HAL_DMA_IRQHandler+0xce0>)
 8104050:	4293      	cmp	r3, r2
 8104052:	d004      	beq.n	810405e <HAL_DMA_IRQHandler+0xb12>
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	681b      	ldr	r3, [r3, #0]
 8104058:	4a75      	ldr	r2, [pc, #468]	; (8104230 <HAL_DMA_IRQHandler+0xce4>)
 810405a:	4293      	cmp	r3, r2
 810405c:	d108      	bne.n	8104070 <HAL_DMA_IRQHandler+0xb24>
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	681b      	ldr	r3, [r3, #0]
 8104062:	681a      	ldr	r2, [r3, #0]
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	f022 0208 	bic.w	r2, r2, #8
 810406c:	601a      	str	r2, [r3, #0]
 810406e:	e007      	b.n	8104080 <HAL_DMA_IRQHandler+0xb34>
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	681a      	ldr	r2, [r3, #0]
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	681b      	ldr	r3, [r3, #0]
 810407a:	f022 0204 	bic.w	r2, r2, #4
 810407e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104084:	2b00      	cmp	r3, #0
 8104086:	f000 8165 	beq.w	8104354 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810408e:	6878      	ldr	r0, [r7, #4]
 8104090:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104092:	e15f      	b.n	8104354 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104098:	f003 031f 	and.w	r3, r3, #31
 810409c:	2202      	movs	r2, #2
 810409e:	409a      	lsls	r2, r3
 81040a0:	697b      	ldr	r3, [r7, #20]
 81040a2:	4013      	ands	r3, r2
 81040a4:	2b00      	cmp	r3, #0
 81040a6:	f000 80c5 	beq.w	8104234 <HAL_DMA_IRQHandler+0xce8>
 81040aa:	693b      	ldr	r3, [r7, #16]
 81040ac:	f003 0302 	and.w	r3, r3, #2
 81040b0:	2b00      	cmp	r3, #0
 81040b2:	f000 80bf 	beq.w	8104234 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81040ba:	f003 031f 	and.w	r3, r3, #31
 81040be:	2202      	movs	r2, #2
 81040c0:	409a      	lsls	r2, r3
 81040c2:	69fb      	ldr	r3, [r7, #28]
 81040c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81040c6:	693b      	ldr	r3, [r7, #16]
 81040c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81040cc:	2b00      	cmp	r3, #0
 81040ce:	d018      	beq.n	8104102 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81040d0:	693b      	ldr	r3, [r7, #16]
 81040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81040d6:	2b00      	cmp	r3, #0
 81040d8:	d109      	bne.n	81040ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81040da:	687b      	ldr	r3, [r7, #4]
 81040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81040de:	2b00      	cmp	r3, #0
 81040e0:	f000 813a 	beq.w	8104358 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81040e8:	6878      	ldr	r0, [r7, #4]
 81040ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81040ec:	e134      	b.n	8104358 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040f2:	2b00      	cmp	r3, #0
 81040f4:	f000 8130 	beq.w	8104358 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040fc:	6878      	ldr	r0, [r7, #4]
 81040fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104100:	e12a      	b.n	8104358 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104102:	693b      	ldr	r3, [r7, #16]
 8104104:	f003 0320 	and.w	r3, r3, #32
 8104108:	2b00      	cmp	r3, #0
 810410a:	d168      	bne.n	81041de <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	681b      	ldr	r3, [r3, #0]
 8104110:	4a38      	ldr	r2, [pc, #224]	; (81041f4 <HAL_DMA_IRQHandler+0xca8>)
 8104112:	4293      	cmp	r3, r2
 8104114:	d04a      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104116:	687b      	ldr	r3, [r7, #4]
 8104118:	681b      	ldr	r3, [r3, #0]
 810411a:	4a37      	ldr	r2, [pc, #220]	; (81041f8 <HAL_DMA_IRQHandler+0xcac>)
 810411c:	4293      	cmp	r3, r2
 810411e:	d045      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	4a35      	ldr	r2, [pc, #212]	; (81041fc <HAL_DMA_IRQHandler+0xcb0>)
 8104126:	4293      	cmp	r3, r2
 8104128:	d040      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 810412a:	687b      	ldr	r3, [r7, #4]
 810412c:	681b      	ldr	r3, [r3, #0]
 810412e:	4a34      	ldr	r2, [pc, #208]	; (8104200 <HAL_DMA_IRQHandler+0xcb4>)
 8104130:	4293      	cmp	r3, r2
 8104132:	d03b      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	4a32      	ldr	r2, [pc, #200]	; (8104204 <HAL_DMA_IRQHandler+0xcb8>)
 810413a:	4293      	cmp	r3, r2
 810413c:	d036      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	681b      	ldr	r3, [r3, #0]
 8104142:	4a31      	ldr	r2, [pc, #196]	; (8104208 <HAL_DMA_IRQHandler+0xcbc>)
 8104144:	4293      	cmp	r3, r2
 8104146:	d031      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	681b      	ldr	r3, [r3, #0]
 810414c:	4a2f      	ldr	r2, [pc, #188]	; (810420c <HAL_DMA_IRQHandler+0xcc0>)
 810414e:	4293      	cmp	r3, r2
 8104150:	d02c      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	4a2e      	ldr	r2, [pc, #184]	; (8104210 <HAL_DMA_IRQHandler+0xcc4>)
 8104158:	4293      	cmp	r3, r2
 810415a:	d027      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 810415c:	687b      	ldr	r3, [r7, #4]
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	4a2c      	ldr	r2, [pc, #176]	; (8104214 <HAL_DMA_IRQHandler+0xcc8>)
 8104162:	4293      	cmp	r3, r2
 8104164:	d022      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	4a2b      	ldr	r2, [pc, #172]	; (8104218 <HAL_DMA_IRQHandler+0xccc>)
 810416c:	4293      	cmp	r3, r2
 810416e:	d01d      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	4a29      	ldr	r2, [pc, #164]	; (810421c <HAL_DMA_IRQHandler+0xcd0>)
 8104176:	4293      	cmp	r3, r2
 8104178:	d018      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	4a28      	ldr	r2, [pc, #160]	; (8104220 <HAL_DMA_IRQHandler+0xcd4>)
 8104180:	4293      	cmp	r3, r2
 8104182:	d013      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104184:	687b      	ldr	r3, [r7, #4]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	4a26      	ldr	r2, [pc, #152]	; (8104224 <HAL_DMA_IRQHandler+0xcd8>)
 810418a:	4293      	cmp	r3, r2
 810418c:	d00e      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	681b      	ldr	r3, [r3, #0]
 8104192:	4a25      	ldr	r2, [pc, #148]	; (8104228 <HAL_DMA_IRQHandler+0xcdc>)
 8104194:	4293      	cmp	r3, r2
 8104196:	d009      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	4a23      	ldr	r2, [pc, #140]	; (810422c <HAL_DMA_IRQHandler+0xce0>)
 810419e:	4293      	cmp	r3, r2
 81041a0:	d004      	beq.n	81041ac <HAL_DMA_IRQHandler+0xc60>
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	4a22      	ldr	r2, [pc, #136]	; (8104230 <HAL_DMA_IRQHandler+0xce4>)
 81041a8:	4293      	cmp	r3, r2
 81041aa:	d108      	bne.n	81041be <HAL_DMA_IRQHandler+0xc72>
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	681a      	ldr	r2, [r3, #0]
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	681b      	ldr	r3, [r3, #0]
 81041b6:	f022 0214 	bic.w	r2, r2, #20
 81041ba:	601a      	str	r2, [r3, #0]
 81041bc:	e007      	b.n	81041ce <HAL_DMA_IRQHandler+0xc82>
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	681b      	ldr	r3, [r3, #0]
 81041c2:	681a      	ldr	r2, [r3, #0]
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	f022 020a 	bic.w	r2, r2, #10
 81041cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	2200      	movs	r2, #0
 81041d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	2201      	movs	r2, #1
 81041da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81041e2:	2b00      	cmp	r3, #0
 81041e4:	f000 80b8 	beq.w	8104358 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81041ec:	6878      	ldr	r0, [r7, #4]
 81041ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81041f0:	e0b2      	b.n	8104358 <HAL_DMA_IRQHandler+0xe0c>
 81041f2:	bf00      	nop
 81041f4:	40020010 	.word	0x40020010
 81041f8:	40020028 	.word	0x40020028
 81041fc:	40020040 	.word	0x40020040
 8104200:	40020058 	.word	0x40020058
 8104204:	40020070 	.word	0x40020070
 8104208:	40020088 	.word	0x40020088
 810420c:	400200a0 	.word	0x400200a0
 8104210:	400200b8 	.word	0x400200b8
 8104214:	40020410 	.word	0x40020410
 8104218:	40020428 	.word	0x40020428
 810421c:	40020440 	.word	0x40020440
 8104220:	40020458 	.word	0x40020458
 8104224:	40020470 	.word	0x40020470
 8104228:	40020488 	.word	0x40020488
 810422c:	400204a0 	.word	0x400204a0
 8104230:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104238:	f003 031f 	and.w	r3, r3, #31
 810423c:	2208      	movs	r2, #8
 810423e:	409a      	lsls	r2, r3
 8104240:	697b      	ldr	r3, [r7, #20]
 8104242:	4013      	ands	r3, r2
 8104244:	2b00      	cmp	r3, #0
 8104246:	f000 8088 	beq.w	810435a <HAL_DMA_IRQHandler+0xe0e>
 810424a:	693b      	ldr	r3, [r7, #16]
 810424c:	f003 0308 	and.w	r3, r3, #8
 8104250:	2b00      	cmp	r3, #0
 8104252:	f000 8082 	beq.w	810435a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	681b      	ldr	r3, [r3, #0]
 810425a:	4a41      	ldr	r2, [pc, #260]	; (8104360 <HAL_DMA_IRQHandler+0xe14>)
 810425c:	4293      	cmp	r3, r2
 810425e:	d04a      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	4a3f      	ldr	r2, [pc, #252]	; (8104364 <HAL_DMA_IRQHandler+0xe18>)
 8104266:	4293      	cmp	r3, r2
 8104268:	d045      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	4a3e      	ldr	r2, [pc, #248]	; (8104368 <HAL_DMA_IRQHandler+0xe1c>)
 8104270:	4293      	cmp	r3, r2
 8104272:	d040      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	681b      	ldr	r3, [r3, #0]
 8104278:	4a3c      	ldr	r2, [pc, #240]	; (810436c <HAL_DMA_IRQHandler+0xe20>)
 810427a:	4293      	cmp	r3, r2
 810427c:	d03b      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	4a3b      	ldr	r2, [pc, #236]	; (8104370 <HAL_DMA_IRQHandler+0xe24>)
 8104284:	4293      	cmp	r3, r2
 8104286:	d036      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	4a39      	ldr	r2, [pc, #228]	; (8104374 <HAL_DMA_IRQHandler+0xe28>)
 810428e:	4293      	cmp	r3, r2
 8104290:	d031      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a38      	ldr	r2, [pc, #224]	; (8104378 <HAL_DMA_IRQHandler+0xe2c>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d02c      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	4a36      	ldr	r2, [pc, #216]	; (810437c <HAL_DMA_IRQHandler+0xe30>)
 81042a2:	4293      	cmp	r3, r2
 81042a4:	d027      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	4a35      	ldr	r2, [pc, #212]	; (8104380 <HAL_DMA_IRQHandler+0xe34>)
 81042ac:	4293      	cmp	r3, r2
 81042ae:	d022      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	4a33      	ldr	r2, [pc, #204]	; (8104384 <HAL_DMA_IRQHandler+0xe38>)
 81042b6:	4293      	cmp	r3, r2
 81042b8:	d01d      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a32      	ldr	r2, [pc, #200]	; (8104388 <HAL_DMA_IRQHandler+0xe3c>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d018      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	4a30      	ldr	r2, [pc, #192]	; (810438c <HAL_DMA_IRQHandler+0xe40>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d013      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	4a2f      	ldr	r2, [pc, #188]	; (8104390 <HAL_DMA_IRQHandler+0xe44>)
 81042d4:	4293      	cmp	r3, r2
 81042d6:	d00e      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	4a2d      	ldr	r2, [pc, #180]	; (8104394 <HAL_DMA_IRQHandler+0xe48>)
 81042de:	4293      	cmp	r3, r2
 81042e0:	d009      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	4a2c      	ldr	r2, [pc, #176]	; (8104398 <HAL_DMA_IRQHandler+0xe4c>)
 81042e8:	4293      	cmp	r3, r2
 81042ea:	d004      	beq.n	81042f6 <HAL_DMA_IRQHandler+0xdaa>
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	4a2a      	ldr	r2, [pc, #168]	; (810439c <HAL_DMA_IRQHandler+0xe50>)
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d108      	bne.n	8104308 <HAL_DMA_IRQHandler+0xdbc>
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	681a      	ldr	r2, [r3, #0]
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	f022 021c 	bic.w	r2, r2, #28
 8104304:	601a      	str	r2, [r3, #0]
 8104306:	e007      	b.n	8104318 <HAL_DMA_IRQHandler+0xdcc>
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	681a      	ldr	r2, [r3, #0]
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	f022 020e 	bic.w	r2, r2, #14
 8104316:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810431c:	f003 031f 	and.w	r3, r3, #31
 8104320:	2201      	movs	r2, #1
 8104322:	409a      	lsls	r2, r3
 8104324:	69fb      	ldr	r3, [r7, #28]
 8104326:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	2201      	movs	r2, #1
 810432c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	2200      	movs	r2, #0
 8104332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	2201      	movs	r2, #1
 810433a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104342:	2b00      	cmp	r3, #0
 8104344:	d009      	beq.n	810435a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810434a:	6878      	ldr	r0, [r7, #4]
 810434c:	4798      	blx	r3
 810434e:	e004      	b.n	810435a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8104350:	bf00      	nop
 8104352:	e002      	b.n	810435a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104354:	bf00      	nop
 8104356:	e000      	b.n	810435a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104358:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810435a:	3728      	adds	r7, #40	; 0x28
 810435c:	46bd      	mov	sp, r7
 810435e:	bd80      	pop	{r7, pc}
 8104360:	40020010 	.word	0x40020010
 8104364:	40020028 	.word	0x40020028
 8104368:	40020040 	.word	0x40020040
 810436c:	40020058 	.word	0x40020058
 8104370:	40020070 	.word	0x40020070
 8104374:	40020088 	.word	0x40020088
 8104378:	400200a0 	.word	0x400200a0
 810437c:	400200b8 	.word	0x400200b8
 8104380:	40020410 	.word	0x40020410
 8104384:	40020428 	.word	0x40020428
 8104388:	40020440 	.word	0x40020440
 810438c:	40020458 	.word	0x40020458
 8104390:	40020470 	.word	0x40020470
 8104394:	40020488 	.word	0x40020488
 8104398:	400204a0 	.word	0x400204a0
 810439c:	400204b8 	.word	0x400204b8

081043a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81043a0:	b480      	push	{r7}
 81043a2:	b087      	sub	sp, #28
 81043a4:	af00      	add	r7, sp, #0
 81043a6:	60f8      	str	r0, [r7, #12]
 81043a8:	60b9      	str	r1, [r7, #8]
 81043aa:	607a      	str	r2, [r7, #4]
 81043ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81043b4:	68fb      	ldr	r3, [r7, #12]
 81043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81043ba:	68fb      	ldr	r3, [r7, #12]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	4a84      	ldr	r2, [pc, #528]	; (81045d0 <DMA_SetConfig+0x230>)
 81043c0:	4293      	cmp	r3, r2
 81043c2:	d072      	beq.n	81044aa <DMA_SetConfig+0x10a>
 81043c4:	68fb      	ldr	r3, [r7, #12]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	4a82      	ldr	r2, [pc, #520]	; (81045d4 <DMA_SetConfig+0x234>)
 81043ca:	4293      	cmp	r3, r2
 81043cc:	d06d      	beq.n	81044aa <DMA_SetConfig+0x10a>
 81043ce:	68fb      	ldr	r3, [r7, #12]
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	4a81      	ldr	r2, [pc, #516]	; (81045d8 <DMA_SetConfig+0x238>)
 81043d4:	4293      	cmp	r3, r2
 81043d6:	d068      	beq.n	81044aa <DMA_SetConfig+0x10a>
 81043d8:	68fb      	ldr	r3, [r7, #12]
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	4a7f      	ldr	r2, [pc, #508]	; (81045dc <DMA_SetConfig+0x23c>)
 81043de:	4293      	cmp	r3, r2
 81043e0:	d063      	beq.n	81044aa <DMA_SetConfig+0x10a>
 81043e2:	68fb      	ldr	r3, [r7, #12]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	4a7e      	ldr	r2, [pc, #504]	; (81045e0 <DMA_SetConfig+0x240>)
 81043e8:	4293      	cmp	r3, r2
 81043ea:	d05e      	beq.n	81044aa <DMA_SetConfig+0x10a>
 81043ec:	68fb      	ldr	r3, [r7, #12]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	4a7c      	ldr	r2, [pc, #496]	; (81045e4 <DMA_SetConfig+0x244>)
 81043f2:	4293      	cmp	r3, r2
 81043f4:	d059      	beq.n	81044aa <DMA_SetConfig+0x10a>
 81043f6:	68fb      	ldr	r3, [r7, #12]
 81043f8:	681b      	ldr	r3, [r3, #0]
 81043fa:	4a7b      	ldr	r2, [pc, #492]	; (81045e8 <DMA_SetConfig+0x248>)
 81043fc:	4293      	cmp	r3, r2
 81043fe:	d054      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104400:	68fb      	ldr	r3, [r7, #12]
 8104402:	681b      	ldr	r3, [r3, #0]
 8104404:	4a79      	ldr	r2, [pc, #484]	; (81045ec <DMA_SetConfig+0x24c>)
 8104406:	4293      	cmp	r3, r2
 8104408:	d04f      	beq.n	81044aa <DMA_SetConfig+0x10a>
 810440a:	68fb      	ldr	r3, [r7, #12]
 810440c:	681b      	ldr	r3, [r3, #0]
 810440e:	4a78      	ldr	r2, [pc, #480]	; (81045f0 <DMA_SetConfig+0x250>)
 8104410:	4293      	cmp	r3, r2
 8104412:	d04a      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104414:	68fb      	ldr	r3, [r7, #12]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	4a76      	ldr	r2, [pc, #472]	; (81045f4 <DMA_SetConfig+0x254>)
 810441a:	4293      	cmp	r3, r2
 810441c:	d045      	beq.n	81044aa <DMA_SetConfig+0x10a>
 810441e:	68fb      	ldr	r3, [r7, #12]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	4a75      	ldr	r2, [pc, #468]	; (81045f8 <DMA_SetConfig+0x258>)
 8104424:	4293      	cmp	r3, r2
 8104426:	d040      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104428:	68fb      	ldr	r3, [r7, #12]
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	4a73      	ldr	r2, [pc, #460]	; (81045fc <DMA_SetConfig+0x25c>)
 810442e:	4293      	cmp	r3, r2
 8104430:	d03b      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104432:	68fb      	ldr	r3, [r7, #12]
 8104434:	681b      	ldr	r3, [r3, #0]
 8104436:	4a72      	ldr	r2, [pc, #456]	; (8104600 <DMA_SetConfig+0x260>)
 8104438:	4293      	cmp	r3, r2
 810443a:	d036      	beq.n	81044aa <DMA_SetConfig+0x10a>
 810443c:	68fb      	ldr	r3, [r7, #12]
 810443e:	681b      	ldr	r3, [r3, #0]
 8104440:	4a70      	ldr	r2, [pc, #448]	; (8104604 <DMA_SetConfig+0x264>)
 8104442:	4293      	cmp	r3, r2
 8104444:	d031      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104446:	68fb      	ldr	r3, [r7, #12]
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	4a6f      	ldr	r2, [pc, #444]	; (8104608 <DMA_SetConfig+0x268>)
 810444c:	4293      	cmp	r3, r2
 810444e:	d02c      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104450:	68fb      	ldr	r3, [r7, #12]
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	4a6d      	ldr	r2, [pc, #436]	; (810460c <DMA_SetConfig+0x26c>)
 8104456:	4293      	cmp	r3, r2
 8104458:	d027      	beq.n	81044aa <DMA_SetConfig+0x10a>
 810445a:	68fb      	ldr	r3, [r7, #12]
 810445c:	681b      	ldr	r3, [r3, #0]
 810445e:	4a6c      	ldr	r2, [pc, #432]	; (8104610 <DMA_SetConfig+0x270>)
 8104460:	4293      	cmp	r3, r2
 8104462:	d022      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104464:	68fb      	ldr	r3, [r7, #12]
 8104466:	681b      	ldr	r3, [r3, #0]
 8104468:	4a6a      	ldr	r2, [pc, #424]	; (8104614 <DMA_SetConfig+0x274>)
 810446a:	4293      	cmp	r3, r2
 810446c:	d01d      	beq.n	81044aa <DMA_SetConfig+0x10a>
 810446e:	68fb      	ldr	r3, [r7, #12]
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	4a69      	ldr	r2, [pc, #420]	; (8104618 <DMA_SetConfig+0x278>)
 8104474:	4293      	cmp	r3, r2
 8104476:	d018      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104478:	68fb      	ldr	r3, [r7, #12]
 810447a:	681b      	ldr	r3, [r3, #0]
 810447c:	4a67      	ldr	r2, [pc, #412]	; (810461c <DMA_SetConfig+0x27c>)
 810447e:	4293      	cmp	r3, r2
 8104480:	d013      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104482:	68fb      	ldr	r3, [r7, #12]
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	4a66      	ldr	r2, [pc, #408]	; (8104620 <DMA_SetConfig+0x280>)
 8104488:	4293      	cmp	r3, r2
 810448a:	d00e      	beq.n	81044aa <DMA_SetConfig+0x10a>
 810448c:	68fb      	ldr	r3, [r7, #12]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	4a64      	ldr	r2, [pc, #400]	; (8104624 <DMA_SetConfig+0x284>)
 8104492:	4293      	cmp	r3, r2
 8104494:	d009      	beq.n	81044aa <DMA_SetConfig+0x10a>
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	681b      	ldr	r3, [r3, #0]
 810449a:	4a63      	ldr	r2, [pc, #396]	; (8104628 <DMA_SetConfig+0x288>)
 810449c:	4293      	cmp	r3, r2
 810449e:	d004      	beq.n	81044aa <DMA_SetConfig+0x10a>
 81044a0:	68fb      	ldr	r3, [r7, #12]
 81044a2:	681b      	ldr	r3, [r3, #0]
 81044a4:	4a61      	ldr	r2, [pc, #388]	; (810462c <DMA_SetConfig+0x28c>)
 81044a6:	4293      	cmp	r3, r2
 81044a8:	d101      	bne.n	81044ae <DMA_SetConfig+0x10e>
 81044aa:	2301      	movs	r3, #1
 81044ac:	e000      	b.n	81044b0 <DMA_SetConfig+0x110>
 81044ae:	2300      	movs	r3, #0
 81044b0:	2b00      	cmp	r3, #0
 81044b2:	d00d      	beq.n	81044d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81044b4:	68fb      	ldr	r3, [r7, #12]
 81044b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81044b8:	68fa      	ldr	r2, [r7, #12]
 81044ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81044bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81044be:	68fb      	ldr	r3, [r7, #12]
 81044c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81044c2:	2b00      	cmp	r3, #0
 81044c4:	d004      	beq.n	81044d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81044c6:	68fb      	ldr	r3, [r7, #12]
 81044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81044ca:	68fa      	ldr	r2, [r7, #12]
 81044cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81044ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81044d0:	68fb      	ldr	r3, [r7, #12]
 81044d2:	681b      	ldr	r3, [r3, #0]
 81044d4:	4a3e      	ldr	r2, [pc, #248]	; (81045d0 <DMA_SetConfig+0x230>)
 81044d6:	4293      	cmp	r3, r2
 81044d8:	d04a      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 81044da:	68fb      	ldr	r3, [r7, #12]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	4a3d      	ldr	r2, [pc, #244]	; (81045d4 <DMA_SetConfig+0x234>)
 81044e0:	4293      	cmp	r3, r2
 81044e2:	d045      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 81044e4:	68fb      	ldr	r3, [r7, #12]
 81044e6:	681b      	ldr	r3, [r3, #0]
 81044e8:	4a3b      	ldr	r2, [pc, #236]	; (81045d8 <DMA_SetConfig+0x238>)
 81044ea:	4293      	cmp	r3, r2
 81044ec:	d040      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	4a3a      	ldr	r2, [pc, #232]	; (81045dc <DMA_SetConfig+0x23c>)
 81044f4:	4293      	cmp	r3, r2
 81044f6:	d03b      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	4a38      	ldr	r2, [pc, #224]	; (81045e0 <DMA_SetConfig+0x240>)
 81044fe:	4293      	cmp	r3, r2
 8104500:	d036      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	681b      	ldr	r3, [r3, #0]
 8104506:	4a37      	ldr	r2, [pc, #220]	; (81045e4 <DMA_SetConfig+0x244>)
 8104508:	4293      	cmp	r3, r2
 810450a:	d031      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 810450c:	68fb      	ldr	r3, [r7, #12]
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	4a35      	ldr	r2, [pc, #212]	; (81045e8 <DMA_SetConfig+0x248>)
 8104512:	4293      	cmp	r3, r2
 8104514:	d02c      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 8104516:	68fb      	ldr	r3, [r7, #12]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	4a34      	ldr	r2, [pc, #208]	; (81045ec <DMA_SetConfig+0x24c>)
 810451c:	4293      	cmp	r3, r2
 810451e:	d027      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	4a32      	ldr	r2, [pc, #200]	; (81045f0 <DMA_SetConfig+0x250>)
 8104526:	4293      	cmp	r3, r2
 8104528:	d022      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	4a31      	ldr	r2, [pc, #196]	; (81045f4 <DMA_SetConfig+0x254>)
 8104530:	4293      	cmp	r3, r2
 8104532:	d01d      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 8104534:	68fb      	ldr	r3, [r7, #12]
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	4a2f      	ldr	r2, [pc, #188]	; (81045f8 <DMA_SetConfig+0x258>)
 810453a:	4293      	cmp	r3, r2
 810453c:	d018      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 810453e:	68fb      	ldr	r3, [r7, #12]
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	4a2e      	ldr	r2, [pc, #184]	; (81045fc <DMA_SetConfig+0x25c>)
 8104544:	4293      	cmp	r3, r2
 8104546:	d013      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 8104548:	68fb      	ldr	r3, [r7, #12]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	4a2c      	ldr	r2, [pc, #176]	; (8104600 <DMA_SetConfig+0x260>)
 810454e:	4293      	cmp	r3, r2
 8104550:	d00e      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 8104552:	68fb      	ldr	r3, [r7, #12]
 8104554:	681b      	ldr	r3, [r3, #0]
 8104556:	4a2b      	ldr	r2, [pc, #172]	; (8104604 <DMA_SetConfig+0x264>)
 8104558:	4293      	cmp	r3, r2
 810455a:	d009      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 810455c:	68fb      	ldr	r3, [r7, #12]
 810455e:	681b      	ldr	r3, [r3, #0]
 8104560:	4a29      	ldr	r2, [pc, #164]	; (8104608 <DMA_SetConfig+0x268>)
 8104562:	4293      	cmp	r3, r2
 8104564:	d004      	beq.n	8104570 <DMA_SetConfig+0x1d0>
 8104566:	68fb      	ldr	r3, [r7, #12]
 8104568:	681b      	ldr	r3, [r3, #0]
 810456a:	4a28      	ldr	r2, [pc, #160]	; (810460c <DMA_SetConfig+0x26c>)
 810456c:	4293      	cmp	r3, r2
 810456e:	d101      	bne.n	8104574 <DMA_SetConfig+0x1d4>
 8104570:	2301      	movs	r3, #1
 8104572:	e000      	b.n	8104576 <DMA_SetConfig+0x1d6>
 8104574:	2300      	movs	r3, #0
 8104576:	2b00      	cmp	r3, #0
 8104578:	d05a      	beq.n	8104630 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810457a:	68fb      	ldr	r3, [r7, #12]
 810457c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810457e:	f003 031f 	and.w	r3, r3, #31
 8104582:	223f      	movs	r2, #63	; 0x3f
 8104584:	409a      	lsls	r2, r3
 8104586:	697b      	ldr	r3, [r7, #20]
 8104588:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810458a:	68fb      	ldr	r3, [r7, #12]
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	681a      	ldr	r2, [r3, #0]
 8104590:	68fb      	ldr	r3, [r7, #12]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104598:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810459a:	68fb      	ldr	r3, [r7, #12]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	683a      	ldr	r2, [r7, #0]
 81045a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81045a2:	68fb      	ldr	r3, [r7, #12]
 81045a4:	689b      	ldr	r3, [r3, #8]
 81045a6:	2b40      	cmp	r3, #64	; 0x40
 81045a8:	d108      	bne.n	81045bc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	687a      	ldr	r2, [r7, #4]
 81045b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 81045b2:	68fb      	ldr	r3, [r7, #12]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	68ba      	ldr	r2, [r7, #8]
 81045b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 81045ba:	e087      	b.n	81046cc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81045bc:	68fb      	ldr	r3, [r7, #12]
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	68ba      	ldr	r2, [r7, #8]
 81045c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81045c4:	68fb      	ldr	r3, [r7, #12]
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	687a      	ldr	r2, [r7, #4]
 81045ca:	60da      	str	r2, [r3, #12]
}
 81045cc:	e07e      	b.n	81046cc <DMA_SetConfig+0x32c>
 81045ce:	bf00      	nop
 81045d0:	40020010 	.word	0x40020010
 81045d4:	40020028 	.word	0x40020028
 81045d8:	40020040 	.word	0x40020040
 81045dc:	40020058 	.word	0x40020058
 81045e0:	40020070 	.word	0x40020070
 81045e4:	40020088 	.word	0x40020088
 81045e8:	400200a0 	.word	0x400200a0
 81045ec:	400200b8 	.word	0x400200b8
 81045f0:	40020410 	.word	0x40020410
 81045f4:	40020428 	.word	0x40020428
 81045f8:	40020440 	.word	0x40020440
 81045fc:	40020458 	.word	0x40020458
 8104600:	40020470 	.word	0x40020470
 8104604:	40020488 	.word	0x40020488
 8104608:	400204a0 	.word	0x400204a0
 810460c:	400204b8 	.word	0x400204b8
 8104610:	58025408 	.word	0x58025408
 8104614:	5802541c 	.word	0x5802541c
 8104618:	58025430 	.word	0x58025430
 810461c:	58025444 	.word	0x58025444
 8104620:	58025458 	.word	0x58025458
 8104624:	5802546c 	.word	0x5802546c
 8104628:	58025480 	.word	0x58025480
 810462c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8104630:	68fb      	ldr	r3, [r7, #12]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	4a28      	ldr	r2, [pc, #160]	; (81046d8 <DMA_SetConfig+0x338>)
 8104636:	4293      	cmp	r3, r2
 8104638:	d022      	beq.n	8104680 <DMA_SetConfig+0x2e0>
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	4a27      	ldr	r2, [pc, #156]	; (81046dc <DMA_SetConfig+0x33c>)
 8104640:	4293      	cmp	r3, r2
 8104642:	d01d      	beq.n	8104680 <DMA_SetConfig+0x2e0>
 8104644:	68fb      	ldr	r3, [r7, #12]
 8104646:	681b      	ldr	r3, [r3, #0]
 8104648:	4a25      	ldr	r2, [pc, #148]	; (81046e0 <DMA_SetConfig+0x340>)
 810464a:	4293      	cmp	r3, r2
 810464c:	d018      	beq.n	8104680 <DMA_SetConfig+0x2e0>
 810464e:	68fb      	ldr	r3, [r7, #12]
 8104650:	681b      	ldr	r3, [r3, #0]
 8104652:	4a24      	ldr	r2, [pc, #144]	; (81046e4 <DMA_SetConfig+0x344>)
 8104654:	4293      	cmp	r3, r2
 8104656:	d013      	beq.n	8104680 <DMA_SetConfig+0x2e0>
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	681b      	ldr	r3, [r3, #0]
 810465c:	4a22      	ldr	r2, [pc, #136]	; (81046e8 <DMA_SetConfig+0x348>)
 810465e:	4293      	cmp	r3, r2
 8104660:	d00e      	beq.n	8104680 <DMA_SetConfig+0x2e0>
 8104662:	68fb      	ldr	r3, [r7, #12]
 8104664:	681b      	ldr	r3, [r3, #0]
 8104666:	4a21      	ldr	r2, [pc, #132]	; (81046ec <DMA_SetConfig+0x34c>)
 8104668:	4293      	cmp	r3, r2
 810466a:	d009      	beq.n	8104680 <DMA_SetConfig+0x2e0>
 810466c:	68fb      	ldr	r3, [r7, #12]
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	4a1f      	ldr	r2, [pc, #124]	; (81046f0 <DMA_SetConfig+0x350>)
 8104672:	4293      	cmp	r3, r2
 8104674:	d004      	beq.n	8104680 <DMA_SetConfig+0x2e0>
 8104676:	68fb      	ldr	r3, [r7, #12]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	4a1e      	ldr	r2, [pc, #120]	; (81046f4 <DMA_SetConfig+0x354>)
 810467c:	4293      	cmp	r3, r2
 810467e:	d101      	bne.n	8104684 <DMA_SetConfig+0x2e4>
 8104680:	2301      	movs	r3, #1
 8104682:	e000      	b.n	8104686 <DMA_SetConfig+0x2e6>
 8104684:	2300      	movs	r3, #0
 8104686:	2b00      	cmp	r3, #0
 8104688:	d020      	beq.n	81046cc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810468a:	68fb      	ldr	r3, [r7, #12]
 810468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810468e:	f003 031f 	and.w	r3, r3, #31
 8104692:	2201      	movs	r2, #1
 8104694:	409a      	lsls	r2, r3
 8104696:	693b      	ldr	r3, [r7, #16]
 8104698:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810469a:	68fb      	ldr	r3, [r7, #12]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	683a      	ldr	r2, [r7, #0]
 81046a0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81046a2:	68fb      	ldr	r3, [r7, #12]
 81046a4:	689b      	ldr	r3, [r3, #8]
 81046a6:	2b40      	cmp	r3, #64	; 0x40
 81046a8:	d108      	bne.n	81046bc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 81046aa:	68fb      	ldr	r3, [r7, #12]
 81046ac:	681b      	ldr	r3, [r3, #0]
 81046ae:	687a      	ldr	r2, [r7, #4]
 81046b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 81046b2:	68fb      	ldr	r3, [r7, #12]
 81046b4:	681b      	ldr	r3, [r3, #0]
 81046b6:	68ba      	ldr	r2, [r7, #8]
 81046b8:	60da      	str	r2, [r3, #12]
}
 81046ba:	e007      	b.n	81046cc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 81046bc:	68fb      	ldr	r3, [r7, #12]
 81046be:	681b      	ldr	r3, [r3, #0]
 81046c0:	68ba      	ldr	r2, [r7, #8]
 81046c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 81046c4:	68fb      	ldr	r3, [r7, #12]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	687a      	ldr	r2, [r7, #4]
 81046ca:	60da      	str	r2, [r3, #12]
}
 81046cc:	bf00      	nop
 81046ce:	371c      	adds	r7, #28
 81046d0:	46bd      	mov	sp, r7
 81046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046d6:	4770      	bx	lr
 81046d8:	58025408 	.word	0x58025408
 81046dc:	5802541c 	.word	0x5802541c
 81046e0:	58025430 	.word	0x58025430
 81046e4:	58025444 	.word	0x58025444
 81046e8:	58025458 	.word	0x58025458
 81046ec:	5802546c 	.word	0x5802546c
 81046f0:	58025480 	.word	0x58025480
 81046f4:	58025494 	.word	0x58025494

081046f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81046f8:	b480      	push	{r7}
 81046fa:	b085      	sub	sp, #20
 81046fc:	af00      	add	r7, sp, #0
 81046fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	4a43      	ldr	r2, [pc, #268]	; (8104814 <DMA_CalcBaseAndBitshift+0x11c>)
 8104706:	4293      	cmp	r3, r2
 8104708:	d04a      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	4a42      	ldr	r2, [pc, #264]	; (8104818 <DMA_CalcBaseAndBitshift+0x120>)
 8104710:	4293      	cmp	r3, r2
 8104712:	d045      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	681b      	ldr	r3, [r3, #0]
 8104718:	4a40      	ldr	r2, [pc, #256]	; (810481c <DMA_CalcBaseAndBitshift+0x124>)
 810471a:	4293      	cmp	r3, r2
 810471c:	d040      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	4a3f      	ldr	r2, [pc, #252]	; (8104820 <DMA_CalcBaseAndBitshift+0x128>)
 8104724:	4293      	cmp	r3, r2
 8104726:	d03b      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	681b      	ldr	r3, [r3, #0]
 810472c:	4a3d      	ldr	r2, [pc, #244]	; (8104824 <DMA_CalcBaseAndBitshift+0x12c>)
 810472e:	4293      	cmp	r3, r2
 8104730:	d036      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	681b      	ldr	r3, [r3, #0]
 8104736:	4a3c      	ldr	r2, [pc, #240]	; (8104828 <DMA_CalcBaseAndBitshift+0x130>)
 8104738:	4293      	cmp	r3, r2
 810473a:	d031      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	681b      	ldr	r3, [r3, #0]
 8104740:	4a3a      	ldr	r2, [pc, #232]	; (810482c <DMA_CalcBaseAndBitshift+0x134>)
 8104742:	4293      	cmp	r3, r2
 8104744:	d02c      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104746:	687b      	ldr	r3, [r7, #4]
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	4a39      	ldr	r2, [pc, #228]	; (8104830 <DMA_CalcBaseAndBitshift+0x138>)
 810474c:	4293      	cmp	r3, r2
 810474e:	d027      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	4a37      	ldr	r2, [pc, #220]	; (8104834 <DMA_CalcBaseAndBitshift+0x13c>)
 8104756:	4293      	cmp	r3, r2
 8104758:	d022      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	4a36      	ldr	r2, [pc, #216]	; (8104838 <DMA_CalcBaseAndBitshift+0x140>)
 8104760:	4293      	cmp	r3, r2
 8104762:	d01d      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4a34      	ldr	r2, [pc, #208]	; (810483c <DMA_CalcBaseAndBitshift+0x144>)
 810476a:	4293      	cmp	r3, r2
 810476c:	d018      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	4a33      	ldr	r2, [pc, #204]	; (8104840 <DMA_CalcBaseAndBitshift+0x148>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d013      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	4a31      	ldr	r2, [pc, #196]	; (8104844 <DMA_CalcBaseAndBitshift+0x14c>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d00e      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	4a30      	ldr	r2, [pc, #192]	; (8104848 <DMA_CalcBaseAndBitshift+0x150>)
 8104788:	4293      	cmp	r3, r2
 810478a:	d009      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	4a2e      	ldr	r2, [pc, #184]	; (810484c <DMA_CalcBaseAndBitshift+0x154>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d004      	beq.n	81047a0 <DMA_CalcBaseAndBitshift+0xa8>
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	4a2d      	ldr	r2, [pc, #180]	; (8104850 <DMA_CalcBaseAndBitshift+0x158>)
 810479c:	4293      	cmp	r3, r2
 810479e:	d101      	bne.n	81047a4 <DMA_CalcBaseAndBitshift+0xac>
 81047a0:	2301      	movs	r3, #1
 81047a2:	e000      	b.n	81047a6 <DMA_CalcBaseAndBitshift+0xae>
 81047a4:	2300      	movs	r3, #0
 81047a6:	2b00      	cmp	r3, #0
 81047a8:	d026      	beq.n	81047f8 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	b2db      	uxtb	r3, r3
 81047b0:	3b10      	subs	r3, #16
 81047b2:	4a28      	ldr	r2, [pc, #160]	; (8104854 <DMA_CalcBaseAndBitshift+0x15c>)
 81047b4:	fba2 2303 	umull	r2, r3, r2, r3
 81047b8:	091b      	lsrs	r3, r3, #4
 81047ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81047bc:	68fb      	ldr	r3, [r7, #12]
 81047be:	f003 0307 	and.w	r3, r3, #7
 81047c2:	4a25      	ldr	r2, [pc, #148]	; (8104858 <DMA_CalcBaseAndBitshift+0x160>)
 81047c4:	5cd3      	ldrb	r3, [r2, r3]
 81047c6:	461a      	mov	r2, r3
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 81047cc:	68fb      	ldr	r3, [r7, #12]
 81047ce:	2b03      	cmp	r3, #3
 81047d0:	d909      	bls.n	81047e6 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81047da:	f023 0303 	bic.w	r3, r3, #3
 81047de:	1d1a      	adds	r2, r3, #4
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	659a      	str	r2, [r3, #88]	; 0x58
 81047e4:	e00e      	b.n	8104804 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81047ee:	f023 0303 	bic.w	r3, r3, #3
 81047f2:	687a      	ldr	r2, [r7, #4]
 81047f4:	6593      	str	r3, [r2, #88]	; 0x58
 81047f6:	e005      	b.n	8104804 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104808:	4618      	mov	r0, r3
 810480a:	3714      	adds	r7, #20
 810480c:	46bd      	mov	sp, r7
 810480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104812:	4770      	bx	lr
 8104814:	40020010 	.word	0x40020010
 8104818:	40020028 	.word	0x40020028
 810481c:	40020040 	.word	0x40020040
 8104820:	40020058 	.word	0x40020058
 8104824:	40020070 	.word	0x40020070
 8104828:	40020088 	.word	0x40020088
 810482c:	400200a0 	.word	0x400200a0
 8104830:	400200b8 	.word	0x400200b8
 8104834:	40020410 	.word	0x40020410
 8104838:	40020428 	.word	0x40020428
 810483c:	40020440 	.word	0x40020440
 8104840:	40020458 	.word	0x40020458
 8104844:	40020470 	.word	0x40020470
 8104848:	40020488 	.word	0x40020488
 810484c:	400204a0 	.word	0x400204a0
 8104850:	400204b8 	.word	0x400204b8
 8104854:	aaaaaaab 	.word	0xaaaaaaab
 8104858:	08115768 	.word	0x08115768

0810485c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 810485c:	b480      	push	{r7}
 810485e:	b085      	sub	sp, #20
 8104860:	af00      	add	r7, sp, #0
 8104862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104864:	2300      	movs	r3, #0
 8104866:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	699b      	ldr	r3, [r3, #24]
 810486c:	2b00      	cmp	r3, #0
 810486e:	d120      	bne.n	81048b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104874:	2b03      	cmp	r3, #3
 8104876:	d858      	bhi.n	810492a <DMA_CheckFifoParam+0xce>
 8104878:	a201      	add	r2, pc, #4	; (adr r2, 8104880 <DMA_CheckFifoParam+0x24>)
 810487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810487e:	bf00      	nop
 8104880:	08104891 	.word	0x08104891
 8104884:	081048a3 	.word	0x081048a3
 8104888:	08104891 	.word	0x08104891
 810488c:	0810492b 	.word	0x0810492b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104898:	2b00      	cmp	r3, #0
 810489a:	d048      	beq.n	810492e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810489c:	2301      	movs	r3, #1
 810489e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81048a0:	e045      	b.n	810492e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81048aa:	d142      	bne.n	8104932 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81048ac:	2301      	movs	r3, #1
 81048ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81048b0:	e03f      	b.n	8104932 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	699b      	ldr	r3, [r3, #24]
 81048b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81048ba:	d123      	bne.n	8104904 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048c0:	2b03      	cmp	r3, #3
 81048c2:	d838      	bhi.n	8104936 <DMA_CheckFifoParam+0xda>
 81048c4:	a201      	add	r2, pc, #4	; (adr r2, 81048cc <DMA_CheckFifoParam+0x70>)
 81048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048ca:	bf00      	nop
 81048cc:	081048dd 	.word	0x081048dd
 81048d0:	081048e3 	.word	0x081048e3
 81048d4:	081048dd 	.word	0x081048dd
 81048d8:	081048f5 	.word	0x081048f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81048dc:	2301      	movs	r3, #1
 81048de:	73fb      	strb	r3, [r7, #15]
        break;
 81048e0:	e030      	b.n	8104944 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81048ea:	2b00      	cmp	r3, #0
 81048ec:	d025      	beq.n	810493a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81048ee:	2301      	movs	r3, #1
 81048f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81048f2:	e022      	b.n	810493a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81048fc:	d11f      	bne.n	810493e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81048fe:	2301      	movs	r3, #1
 8104900:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104902:	e01c      	b.n	810493e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104908:	2b02      	cmp	r3, #2
 810490a:	d902      	bls.n	8104912 <DMA_CheckFifoParam+0xb6>
 810490c:	2b03      	cmp	r3, #3
 810490e:	d003      	beq.n	8104918 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104910:	e018      	b.n	8104944 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104912:	2301      	movs	r3, #1
 8104914:	73fb      	strb	r3, [r7, #15]
        break;
 8104916:	e015      	b.n	8104944 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810491c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104920:	2b00      	cmp	r3, #0
 8104922:	d00e      	beq.n	8104942 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104924:	2301      	movs	r3, #1
 8104926:	73fb      	strb	r3, [r7, #15]
    break;
 8104928:	e00b      	b.n	8104942 <DMA_CheckFifoParam+0xe6>
        break;
 810492a:	bf00      	nop
 810492c:	e00a      	b.n	8104944 <DMA_CheckFifoParam+0xe8>
        break;
 810492e:	bf00      	nop
 8104930:	e008      	b.n	8104944 <DMA_CheckFifoParam+0xe8>
        break;
 8104932:	bf00      	nop
 8104934:	e006      	b.n	8104944 <DMA_CheckFifoParam+0xe8>
        break;
 8104936:	bf00      	nop
 8104938:	e004      	b.n	8104944 <DMA_CheckFifoParam+0xe8>
        break;
 810493a:	bf00      	nop
 810493c:	e002      	b.n	8104944 <DMA_CheckFifoParam+0xe8>
        break;
 810493e:	bf00      	nop
 8104940:	e000      	b.n	8104944 <DMA_CheckFifoParam+0xe8>
    break;
 8104942:	bf00      	nop
    }
  }

  return status;
 8104944:	7bfb      	ldrb	r3, [r7, #15]
}
 8104946:	4618      	mov	r0, r3
 8104948:	3714      	adds	r7, #20
 810494a:	46bd      	mov	sp, r7
 810494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104950:	4770      	bx	lr
 8104952:	bf00      	nop

08104954 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104954:	b480      	push	{r7}
 8104956:	b085      	sub	sp, #20
 8104958:	af00      	add	r7, sp, #0
 810495a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	4a3a      	ldr	r2, [pc, #232]	; (8104a50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104968:	4293      	cmp	r3, r2
 810496a:	d022      	beq.n	81049b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	681b      	ldr	r3, [r3, #0]
 8104970:	4a38      	ldr	r2, [pc, #224]	; (8104a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104972:	4293      	cmp	r3, r2
 8104974:	d01d      	beq.n	81049b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	4a37      	ldr	r2, [pc, #220]	; (8104a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810497c:	4293      	cmp	r3, r2
 810497e:	d018      	beq.n	81049b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	681b      	ldr	r3, [r3, #0]
 8104984:	4a35      	ldr	r2, [pc, #212]	; (8104a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104986:	4293      	cmp	r3, r2
 8104988:	d013      	beq.n	81049b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	681b      	ldr	r3, [r3, #0]
 810498e:	4a34      	ldr	r2, [pc, #208]	; (8104a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104990:	4293      	cmp	r3, r2
 8104992:	d00e      	beq.n	81049b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	4a32      	ldr	r2, [pc, #200]	; (8104a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810499a:	4293      	cmp	r3, r2
 810499c:	d009      	beq.n	81049b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	4a31      	ldr	r2, [pc, #196]	; (8104a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81049a4:	4293      	cmp	r3, r2
 81049a6:	d004      	beq.n	81049b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	681b      	ldr	r3, [r3, #0]
 81049ac:	4a2f      	ldr	r2, [pc, #188]	; (8104a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81049ae:	4293      	cmp	r3, r2
 81049b0:	d101      	bne.n	81049b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81049b2:	2301      	movs	r3, #1
 81049b4:	e000      	b.n	81049b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81049b6:	2300      	movs	r3, #0
 81049b8:	2b00      	cmp	r3, #0
 81049ba:	d01c      	beq.n	81049f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	681b      	ldr	r3, [r3, #0]
 81049c0:	b2db      	uxtb	r3, r3
 81049c2:	3b08      	subs	r3, #8
 81049c4:	4a2a      	ldr	r2, [pc, #168]	; (8104a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81049c6:	fba2 2303 	umull	r2, r3, r2, r3
 81049ca:	091b      	lsrs	r3, r3, #4
 81049cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81049ce:	68fb      	ldr	r3, [r7, #12]
 81049d0:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81049d4:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81049d8:	009b      	lsls	r3, r3, #2
 81049da:	461a      	mov	r2, r3
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	4a24      	ldr	r2, [pc, #144]	; (8104a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81049e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	f003 031f 	and.w	r3, r3, #31
 81049ec:	2201      	movs	r2, #1
 81049ee:	409a      	lsls	r2, r3
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81049f4:	e026      	b.n	8104a44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	681b      	ldr	r3, [r3, #0]
 81049fa:	b2db      	uxtb	r3, r3
 81049fc:	3b10      	subs	r3, #16
 81049fe:	4a1e      	ldr	r2, [pc, #120]	; (8104a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104a00:	fba2 2303 	umull	r2, r3, r2, r3
 8104a04:	091b      	lsrs	r3, r3, #4
 8104a06:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104a08:	68bb      	ldr	r3, [r7, #8]
 8104a0a:	4a1c      	ldr	r2, [pc, #112]	; (8104a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104a0c:	4293      	cmp	r3, r2
 8104a0e:	d806      	bhi.n	8104a1e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104a10:	68bb      	ldr	r3, [r7, #8]
 8104a12:	4a1b      	ldr	r2, [pc, #108]	; (8104a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104a14:	4293      	cmp	r3, r2
 8104a16:	d902      	bls.n	8104a1e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	3308      	adds	r3, #8
 8104a1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8104a1e:	68fb      	ldr	r3, [r7, #12]
 8104a20:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8104a24:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8104a28:	009b      	lsls	r3, r3, #2
 8104a2a:	461a      	mov	r2, r3
 8104a2c:	687b      	ldr	r3, [r7, #4]
 8104a2e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104a30:	687b      	ldr	r3, [r7, #4]
 8104a32:	4a14      	ldr	r2, [pc, #80]	; (8104a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104a34:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104a36:	68fb      	ldr	r3, [r7, #12]
 8104a38:	f003 031f 	and.w	r3, r3, #31
 8104a3c:	2201      	movs	r2, #1
 8104a3e:	409a      	lsls	r2, r3
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	669a      	str	r2, [r3, #104]	; 0x68
}
 8104a44:	bf00      	nop
 8104a46:	3714      	adds	r7, #20
 8104a48:	46bd      	mov	sp, r7
 8104a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a4e:	4770      	bx	lr
 8104a50:	58025408 	.word	0x58025408
 8104a54:	5802541c 	.word	0x5802541c
 8104a58:	58025430 	.word	0x58025430
 8104a5c:	58025444 	.word	0x58025444
 8104a60:	58025458 	.word	0x58025458
 8104a64:	5802546c 	.word	0x5802546c
 8104a68:	58025480 	.word	0x58025480
 8104a6c:	58025494 	.word	0x58025494
 8104a70:	cccccccd 	.word	0xcccccccd
 8104a74:	58025880 	.word	0x58025880
 8104a78:	aaaaaaab 	.word	0xaaaaaaab
 8104a7c:	400204b8 	.word	0x400204b8
 8104a80:	4002040f 	.word	0x4002040f
 8104a84:	40020880 	.word	0x40020880

08104a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104a88:	b480      	push	{r7}
 8104a8a:	b085      	sub	sp, #20
 8104a8c:	af00      	add	r7, sp, #0
 8104a8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	685b      	ldr	r3, [r3, #4]
 8104a94:	b2db      	uxtb	r3, r3
 8104a96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	2b00      	cmp	r3, #0
 8104a9c:	d04a      	beq.n	8104b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104a9e:	68fb      	ldr	r3, [r7, #12]
 8104aa0:	2b08      	cmp	r3, #8
 8104aa2:	d847      	bhi.n	8104b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	4a25      	ldr	r2, [pc, #148]	; (8104b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104aaa:	4293      	cmp	r3, r2
 8104aac:	d022      	beq.n	8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	4a24      	ldr	r2, [pc, #144]	; (8104b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104ab4:	4293      	cmp	r3, r2
 8104ab6:	d01d      	beq.n	8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	4a22      	ldr	r2, [pc, #136]	; (8104b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104abe:	4293      	cmp	r3, r2
 8104ac0:	d018      	beq.n	8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104ac2:	687b      	ldr	r3, [r7, #4]
 8104ac4:	681b      	ldr	r3, [r3, #0]
 8104ac6:	4a21      	ldr	r2, [pc, #132]	; (8104b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104ac8:	4293      	cmp	r3, r2
 8104aca:	d013      	beq.n	8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	681b      	ldr	r3, [r3, #0]
 8104ad0:	4a1f      	ldr	r2, [pc, #124]	; (8104b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104ad2:	4293      	cmp	r3, r2
 8104ad4:	d00e      	beq.n	8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	4a1e      	ldr	r2, [pc, #120]	; (8104b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104adc:	4293      	cmp	r3, r2
 8104ade:	d009      	beq.n	8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	681b      	ldr	r3, [r3, #0]
 8104ae4:	4a1c      	ldr	r2, [pc, #112]	; (8104b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104ae6:	4293      	cmp	r3, r2
 8104ae8:	d004      	beq.n	8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	681b      	ldr	r3, [r3, #0]
 8104aee:	4a1b      	ldr	r2, [pc, #108]	; (8104b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104af0:	4293      	cmp	r3, r2
 8104af2:	d101      	bne.n	8104af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104af4:	2301      	movs	r3, #1
 8104af6:	e000      	b.n	8104afa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104af8:	2300      	movs	r3, #0
 8104afa:	2b00      	cmp	r3, #0
 8104afc:	d00a      	beq.n	8104b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104afe:	68fa      	ldr	r2, [r7, #12]
 8104b00:	4b17      	ldr	r3, [pc, #92]	; (8104b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104b02:	4413      	add	r3, r2
 8104b04:	009b      	lsls	r3, r3, #2
 8104b06:	461a      	mov	r2, r3
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	4a15      	ldr	r2, [pc, #84]	; (8104b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104b10:	671a      	str	r2, [r3, #112]	; 0x70
 8104b12:	e009      	b.n	8104b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104b14:	68fa      	ldr	r2, [r7, #12]
 8104b16:	4b14      	ldr	r3, [pc, #80]	; (8104b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104b18:	4413      	add	r3, r2
 8104b1a:	009b      	lsls	r3, r3, #2
 8104b1c:	461a      	mov	r2, r3
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	4a11      	ldr	r2, [pc, #68]	; (8104b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104b26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104b28:	68fb      	ldr	r3, [r7, #12]
 8104b2a:	3b01      	subs	r3, #1
 8104b2c:	2201      	movs	r2, #1
 8104b2e:	409a      	lsls	r2, r3
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104b34:	bf00      	nop
 8104b36:	3714      	adds	r7, #20
 8104b38:	46bd      	mov	sp, r7
 8104b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b3e:	4770      	bx	lr
 8104b40:	58025408 	.word	0x58025408
 8104b44:	5802541c 	.word	0x5802541c
 8104b48:	58025430 	.word	0x58025430
 8104b4c:	58025444 	.word	0x58025444
 8104b50:	58025458 	.word	0x58025458
 8104b54:	5802546c 	.word	0x5802546c
 8104b58:	58025480 	.word	0x58025480
 8104b5c:	58025494 	.word	0x58025494
 8104b60:	1600963f 	.word	0x1600963f
 8104b64:	58025940 	.word	0x58025940
 8104b68:	1000823f 	.word	0x1000823f
 8104b6c:	40020940 	.word	0x40020940

08104b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104b70:	b480      	push	{r7}
 8104b72:	b089      	sub	sp, #36	; 0x24
 8104b74:	af00      	add	r7, sp, #0
 8104b76:	6078      	str	r0, [r7, #4]
 8104b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104b7a:	2300      	movs	r3, #0
 8104b7c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104b7e:	4b89      	ldr	r3, [pc, #548]	; (8104da4 <HAL_GPIO_Init+0x234>)
 8104b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104b82:	e194      	b.n	8104eae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104b84:	683b      	ldr	r3, [r7, #0]
 8104b86:	681a      	ldr	r2, [r3, #0]
 8104b88:	2101      	movs	r1, #1
 8104b8a:	69fb      	ldr	r3, [r7, #28]
 8104b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8104b90:	4013      	ands	r3, r2
 8104b92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104b94:	693b      	ldr	r3, [r7, #16]
 8104b96:	2b00      	cmp	r3, #0
 8104b98:	f000 8186 	beq.w	8104ea8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104b9c:	683b      	ldr	r3, [r7, #0]
 8104b9e:	685b      	ldr	r3, [r3, #4]
 8104ba0:	2b01      	cmp	r3, #1
 8104ba2:	d00b      	beq.n	8104bbc <HAL_GPIO_Init+0x4c>
 8104ba4:	683b      	ldr	r3, [r7, #0]
 8104ba6:	685b      	ldr	r3, [r3, #4]
 8104ba8:	2b02      	cmp	r3, #2
 8104baa:	d007      	beq.n	8104bbc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104bac:	683b      	ldr	r3, [r7, #0]
 8104bae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104bb0:	2b11      	cmp	r3, #17
 8104bb2:	d003      	beq.n	8104bbc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104bb4:	683b      	ldr	r3, [r7, #0]
 8104bb6:	685b      	ldr	r3, [r3, #4]
 8104bb8:	2b12      	cmp	r3, #18
 8104bba:	d130      	bne.n	8104c1e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	689b      	ldr	r3, [r3, #8]
 8104bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104bc2:	69fb      	ldr	r3, [r7, #28]
 8104bc4:	005b      	lsls	r3, r3, #1
 8104bc6:	2203      	movs	r2, #3
 8104bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8104bcc:	43db      	mvns	r3, r3
 8104bce:	69ba      	ldr	r2, [r7, #24]
 8104bd0:	4013      	ands	r3, r2
 8104bd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104bd4:	683b      	ldr	r3, [r7, #0]
 8104bd6:	68da      	ldr	r2, [r3, #12]
 8104bd8:	69fb      	ldr	r3, [r7, #28]
 8104bda:	005b      	lsls	r3, r3, #1
 8104bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8104be0:	69ba      	ldr	r2, [r7, #24]
 8104be2:	4313      	orrs	r3, r2
 8104be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	69ba      	ldr	r2, [r7, #24]
 8104bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	685b      	ldr	r3, [r3, #4]
 8104bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104bf2:	2201      	movs	r2, #1
 8104bf4:	69fb      	ldr	r3, [r7, #28]
 8104bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8104bfa:	43db      	mvns	r3, r3
 8104bfc:	69ba      	ldr	r2, [r7, #24]
 8104bfe:	4013      	ands	r3, r2
 8104c00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104c02:	683b      	ldr	r3, [r7, #0]
 8104c04:	685b      	ldr	r3, [r3, #4]
 8104c06:	091b      	lsrs	r3, r3, #4
 8104c08:	f003 0201 	and.w	r2, r3, #1
 8104c0c:	69fb      	ldr	r3, [r7, #28]
 8104c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c12:	69ba      	ldr	r2, [r7, #24]
 8104c14:	4313      	orrs	r3, r2
 8104c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	69ba      	ldr	r2, [r7, #24]
 8104c1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	68db      	ldr	r3, [r3, #12]
 8104c22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104c24:	69fb      	ldr	r3, [r7, #28]
 8104c26:	005b      	lsls	r3, r3, #1
 8104c28:	2203      	movs	r2, #3
 8104c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8104c2e:	43db      	mvns	r3, r3
 8104c30:	69ba      	ldr	r2, [r7, #24]
 8104c32:	4013      	ands	r3, r2
 8104c34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104c36:	683b      	ldr	r3, [r7, #0]
 8104c38:	689a      	ldr	r2, [r3, #8]
 8104c3a:	69fb      	ldr	r3, [r7, #28]
 8104c3c:	005b      	lsls	r3, r3, #1
 8104c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c42:	69ba      	ldr	r2, [r7, #24]
 8104c44:	4313      	orrs	r3, r2
 8104c46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	69ba      	ldr	r2, [r7, #24]
 8104c4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104c4e:	683b      	ldr	r3, [r7, #0]
 8104c50:	685b      	ldr	r3, [r3, #4]
 8104c52:	2b02      	cmp	r3, #2
 8104c54:	d003      	beq.n	8104c5e <HAL_GPIO_Init+0xee>
 8104c56:	683b      	ldr	r3, [r7, #0]
 8104c58:	685b      	ldr	r3, [r3, #4]
 8104c5a:	2b12      	cmp	r3, #18
 8104c5c:	d123      	bne.n	8104ca6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104c5e:	69fb      	ldr	r3, [r7, #28]
 8104c60:	08da      	lsrs	r2, r3, #3
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	3208      	adds	r2, #8
 8104c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104c6c:	69fb      	ldr	r3, [r7, #28]
 8104c6e:	f003 0307 	and.w	r3, r3, #7
 8104c72:	009b      	lsls	r3, r3, #2
 8104c74:	220f      	movs	r2, #15
 8104c76:	fa02 f303 	lsl.w	r3, r2, r3
 8104c7a:	43db      	mvns	r3, r3
 8104c7c:	69ba      	ldr	r2, [r7, #24]
 8104c7e:	4013      	ands	r3, r2
 8104c80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104c82:	683b      	ldr	r3, [r7, #0]
 8104c84:	691a      	ldr	r2, [r3, #16]
 8104c86:	69fb      	ldr	r3, [r7, #28]
 8104c88:	f003 0307 	and.w	r3, r3, #7
 8104c8c:	009b      	lsls	r3, r3, #2
 8104c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c92:	69ba      	ldr	r2, [r7, #24]
 8104c94:	4313      	orrs	r3, r2
 8104c96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104c98:	69fb      	ldr	r3, [r7, #28]
 8104c9a:	08da      	lsrs	r2, r3, #3
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	3208      	adds	r2, #8
 8104ca0:	69b9      	ldr	r1, [r7, #24]
 8104ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104cac:	69fb      	ldr	r3, [r7, #28]
 8104cae:	005b      	lsls	r3, r3, #1
 8104cb0:	2203      	movs	r2, #3
 8104cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8104cb6:	43db      	mvns	r3, r3
 8104cb8:	69ba      	ldr	r2, [r7, #24]
 8104cba:	4013      	ands	r3, r2
 8104cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104cbe:	683b      	ldr	r3, [r7, #0]
 8104cc0:	685b      	ldr	r3, [r3, #4]
 8104cc2:	f003 0203 	and.w	r2, r3, #3
 8104cc6:	69fb      	ldr	r3, [r7, #28]
 8104cc8:	005b      	lsls	r3, r3, #1
 8104cca:	fa02 f303 	lsl.w	r3, r2, r3
 8104cce:	69ba      	ldr	r2, [r7, #24]
 8104cd0:	4313      	orrs	r3, r2
 8104cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104cd4:	687b      	ldr	r3, [r7, #4]
 8104cd6:	69ba      	ldr	r2, [r7, #24]
 8104cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8104cda:	683b      	ldr	r3, [r7, #0]
 8104cdc:	685b      	ldr	r3, [r3, #4]
 8104cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104ce2:	2b00      	cmp	r3, #0
 8104ce4:	f000 80e0 	beq.w	8104ea8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104ce8:	4b2f      	ldr	r3, [pc, #188]	; (8104da8 <HAL_GPIO_Init+0x238>)
 8104cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104cee:	4a2e      	ldr	r2, [pc, #184]	; (8104da8 <HAL_GPIO_Init+0x238>)
 8104cf0:	f043 0302 	orr.w	r3, r3, #2
 8104cf4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104cf8:	4b2b      	ldr	r3, [pc, #172]	; (8104da8 <HAL_GPIO_Init+0x238>)
 8104cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104cfe:	f003 0302 	and.w	r3, r3, #2
 8104d02:	60fb      	str	r3, [r7, #12]
 8104d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104d06:	4a29      	ldr	r2, [pc, #164]	; (8104dac <HAL_GPIO_Init+0x23c>)
 8104d08:	69fb      	ldr	r3, [r7, #28]
 8104d0a:	089b      	lsrs	r3, r3, #2
 8104d0c:	3302      	adds	r3, #2
 8104d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104d14:	69fb      	ldr	r3, [r7, #28]
 8104d16:	f003 0303 	and.w	r3, r3, #3
 8104d1a:	009b      	lsls	r3, r3, #2
 8104d1c:	220f      	movs	r2, #15
 8104d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8104d22:	43db      	mvns	r3, r3
 8104d24:	69ba      	ldr	r2, [r7, #24]
 8104d26:	4013      	ands	r3, r2
 8104d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	4a20      	ldr	r2, [pc, #128]	; (8104db0 <HAL_GPIO_Init+0x240>)
 8104d2e:	4293      	cmp	r3, r2
 8104d30:	d052      	beq.n	8104dd8 <HAL_GPIO_Init+0x268>
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	4a1f      	ldr	r2, [pc, #124]	; (8104db4 <HAL_GPIO_Init+0x244>)
 8104d36:	4293      	cmp	r3, r2
 8104d38:	d031      	beq.n	8104d9e <HAL_GPIO_Init+0x22e>
 8104d3a:	687b      	ldr	r3, [r7, #4]
 8104d3c:	4a1e      	ldr	r2, [pc, #120]	; (8104db8 <HAL_GPIO_Init+0x248>)
 8104d3e:	4293      	cmp	r3, r2
 8104d40:	d02b      	beq.n	8104d9a <HAL_GPIO_Init+0x22a>
 8104d42:	687b      	ldr	r3, [r7, #4]
 8104d44:	4a1d      	ldr	r2, [pc, #116]	; (8104dbc <HAL_GPIO_Init+0x24c>)
 8104d46:	4293      	cmp	r3, r2
 8104d48:	d025      	beq.n	8104d96 <HAL_GPIO_Init+0x226>
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	4a1c      	ldr	r2, [pc, #112]	; (8104dc0 <HAL_GPIO_Init+0x250>)
 8104d4e:	4293      	cmp	r3, r2
 8104d50:	d01f      	beq.n	8104d92 <HAL_GPIO_Init+0x222>
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	4a1b      	ldr	r2, [pc, #108]	; (8104dc4 <HAL_GPIO_Init+0x254>)
 8104d56:	4293      	cmp	r3, r2
 8104d58:	d019      	beq.n	8104d8e <HAL_GPIO_Init+0x21e>
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	4a1a      	ldr	r2, [pc, #104]	; (8104dc8 <HAL_GPIO_Init+0x258>)
 8104d5e:	4293      	cmp	r3, r2
 8104d60:	d013      	beq.n	8104d8a <HAL_GPIO_Init+0x21a>
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	4a19      	ldr	r2, [pc, #100]	; (8104dcc <HAL_GPIO_Init+0x25c>)
 8104d66:	4293      	cmp	r3, r2
 8104d68:	d00d      	beq.n	8104d86 <HAL_GPIO_Init+0x216>
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	4a18      	ldr	r2, [pc, #96]	; (8104dd0 <HAL_GPIO_Init+0x260>)
 8104d6e:	4293      	cmp	r3, r2
 8104d70:	d007      	beq.n	8104d82 <HAL_GPIO_Init+0x212>
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	4a17      	ldr	r2, [pc, #92]	; (8104dd4 <HAL_GPIO_Init+0x264>)
 8104d76:	4293      	cmp	r3, r2
 8104d78:	d101      	bne.n	8104d7e <HAL_GPIO_Init+0x20e>
 8104d7a:	2309      	movs	r3, #9
 8104d7c:	e02d      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d7e:	230a      	movs	r3, #10
 8104d80:	e02b      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d82:	2308      	movs	r3, #8
 8104d84:	e029      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d86:	2307      	movs	r3, #7
 8104d88:	e027      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d8a:	2306      	movs	r3, #6
 8104d8c:	e025      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d8e:	2305      	movs	r3, #5
 8104d90:	e023      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d92:	2304      	movs	r3, #4
 8104d94:	e021      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d96:	2303      	movs	r3, #3
 8104d98:	e01f      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d9a:	2302      	movs	r3, #2
 8104d9c:	e01d      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104d9e:	2301      	movs	r3, #1
 8104da0:	e01b      	b.n	8104dda <HAL_GPIO_Init+0x26a>
 8104da2:	bf00      	nop
 8104da4:	580000c0 	.word	0x580000c0
 8104da8:	58024400 	.word	0x58024400
 8104dac:	58000400 	.word	0x58000400
 8104db0:	58020000 	.word	0x58020000
 8104db4:	58020400 	.word	0x58020400
 8104db8:	58020800 	.word	0x58020800
 8104dbc:	58020c00 	.word	0x58020c00
 8104dc0:	58021000 	.word	0x58021000
 8104dc4:	58021400 	.word	0x58021400
 8104dc8:	58021800 	.word	0x58021800
 8104dcc:	58021c00 	.word	0x58021c00
 8104dd0:	58022000 	.word	0x58022000
 8104dd4:	58022400 	.word	0x58022400
 8104dd8:	2300      	movs	r3, #0
 8104dda:	69fa      	ldr	r2, [r7, #28]
 8104ddc:	f002 0203 	and.w	r2, r2, #3
 8104de0:	0092      	lsls	r2, r2, #2
 8104de2:	4093      	lsls	r3, r2
 8104de4:	69ba      	ldr	r2, [r7, #24]
 8104de6:	4313      	orrs	r3, r2
 8104de8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104dea:	4938      	ldr	r1, [pc, #224]	; (8104ecc <HAL_GPIO_Init+0x35c>)
 8104dec:	69fb      	ldr	r3, [r7, #28]
 8104dee:	089b      	lsrs	r3, r3, #2
 8104df0:	3302      	adds	r3, #2
 8104df2:	69ba      	ldr	r2, [r7, #24]
 8104df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104df8:	697b      	ldr	r3, [r7, #20]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104dfe:	693b      	ldr	r3, [r7, #16]
 8104e00:	43db      	mvns	r3, r3
 8104e02:	69ba      	ldr	r2, [r7, #24]
 8104e04:	4013      	ands	r3, r2
 8104e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104e08:	683b      	ldr	r3, [r7, #0]
 8104e0a:	685b      	ldr	r3, [r3, #4]
 8104e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104e10:	2b00      	cmp	r3, #0
 8104e12:	d003      	beq.n	8104e1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104e14:	69ba      	ldr	r2, [r7, #24]
 8104e16:	693b      	ldr	r3, [r7, #16]
 8104e18:	4313      	orrs	r3, r2
 8104e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104e1c:	697b      	ldr	r3, [r7, #20]
 8104e1e:	69ba      	ldr	r2, [r7, #24]
 8104e20:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8104e22:	697b      	ldr	r3, [r7, #20]
 8104e24:	685b      	ldr	r3, [r3, #4]
 8104e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104e28:	693b      	ldr	r3, [r7, #16]
 8104e2a:	43db      	mvns	r3, r3
 8104e2c:	69ba      	ldr	r2, [r7, #24]
 8104e2e:	4013      	ands	r3, r2
 8104e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8104e32:	683b      	ldr	r3, [r7, #0]
 8104e34:	685b      	ldr	r3, [r3, #4]
 8104e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104e3a:	2b00      	cmp	r3, #0
 8104e3c:	d003      	beq.n	8104e46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8104e3e:	69ba      	ldr	r2, [r7, #24]
 8104e40:	693b      	ldr	r3, [r7, #16]
 8104e42:	4313      	orrs	r3, r2
 8104e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104e46:	697b      	ldr	r3, [r7, #20]
 8104e48:	69ba      	ldr	r2, [r7, #24]
 8104e4a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104e54:	693b      	ldr	r3, [r7, #16]
 8104e56:	43db      	mvns	r3, r3
 8104e58:	69ba      	ldr	r2, [r7, #24]
 8104e5a:	4013      	ands	r3, r2
 8104e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8104e5e:	683b      	ldr	r3, [r7, #0]
 8104e60:	685b      	ldr	r3, [r3, #4]
 8104e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104e66:	2b00      	cmp	r3, #0
 8104e68:	d003      	beq.n	8104e72 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8104e6a:	69ba      	ldr	r2, [r7, #24]
 8104e6c:	693b      	ldr	r3, [r7, #16]
 8104e6e:	4313      	orrs	r3, r2
 8104e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104e76:	69bb      	ldr	r3, [r7, #24]
 8104e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104e7e:	685b      	ldr	r3, [r3, #4]
 8104e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104e82:	693b      	ldr	r3, [r7, #16]
 8104e84:	43db      	mvns	r3, r3
 8104e86:	69ba      	ldr	r2, [r7, #24]
 8104e88:	4013      	ands	r3, r2
 8104e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104e8c:	683b      	ldr	r3, [r7, #0]
 8104e8e:	685b      	ldr	r3, [r3, #4]
 8104e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104e94:	2b00      	cmp	r3, #0
 8104e96:	d003      	beq.n	8104ea0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8104e98:	69ba      	ldr	r2, [r7, #24]
 8104e9a:	693b      	ldr	r3, [r7, #16]
 8104e9c:	4313      	orrs	r3, r2
 8104e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104ea4:	69bb      	ldr	r3, [r7, #24]
 8104ea6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8104ea8:	69fb      	ldr	r3, [r7, #28]
 8104eaa:	3301      	adds	r3, #1
 8104eac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104eae:	683b      	ldr	r3, [r7, #0]
 8104eb0:	681a      	ldr	r2, [r3, #0]
 8104eb2:	69fb      	ldr	r3, [r7, #28]
 8104eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8104eb8:	2b00      	cmp	r3, #0
 8104eba:	f47f ae63 	bne.w	8104b84 <HAL_GPIO_Init+0x14>
  }
}
 8104ebe:	bf00      	nop
 8104ec0:	3724      	adds	r7, #36	; 0x24
 8104ec2:	46bd      	mov	sp, r7
 8104ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec8:	4770      	bx	lr
 8104eca:	bf00      	nop
 8104ecc:	58000400 	.word	0x58000400

08104ed0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8104ed0:	b480      	push	{r7}
 8104ed2:	b087      	sub	sp, #28
 8104ed4:	af00      	add	r7, sp, #0
 8104ed6:	6078      	str	r0, [r7, #4]
 8104ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104eda:	2300      	movs	r3, #0
 8104edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104ede:	4b75      	ldr	r3, [pc, #468]	; (81050b4 <HAL_GPIO_DeInit+0x1e4>)
 8104ee0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8104ee2:	e0d9      	b.n	8105098 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8104ee4:	2201      	movs	r2, #1
 8104ee6:	697b      	ldr	r3, [r7, #20]
 8104ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8104eec:	683a      	ldr	r2, [r7, #0]
 8104eee:	4013      	ands	r3, r2
 8104ef0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8104ef2:	68fb      	ldr	r3, [r7, #12]
 8104ef4:	2b00      	cmp	r3, #0
 8104ef6:	f000 80cc 	beq.w	8105092 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8104efa:	4a6f      	ldr	r2, [pc, #444]	; (81050b8 <HAL_GPIO_DeInit+0x1e8>)
 8104efc:	697b      	ldr	r3, [r7, #20]
 8104efe:	089b      	lsrs	r3, r3, #2
 8104f00:	3302      	adds	r3, #2
 8104f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104f06:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8104f08:	697b      	ldr	r3, [r7, #20]
 8104f0a:	f003 0303 	and.w	r3, r3, #3
 8104f0e:	009b      	lsls	r3, r3, #2
 8104f10:	220f      	movs	r2, #15
 8104f12:	fa02 f303 	lsl.w	r3, r2, r3
 8104f16:	68ba      	ldr	r2, [r7, #8]
 8104f18:	4013      	ands	r3, r2
 8104f1a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	4a67      	ldr	r2, [pc, #412]	; (81050bc <HAL_GPIO_DeInit+0x1ec>)
 8104f20:	4293      	cmp	r3, r2
 8104f22:	d037      	beq.n	8104f94 <HAL_GPIO_DeInit+0xc4>
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	4a66      	ldr	r2, [pc, #408]	; (81050c0 <HAL_GPIO_DeInit+0x1f0>)
 8104f28:	4293      	cmp	r3, r2
 8104f2a:	d031      	beq.n	8104f90 <HAL_GPIO_DeInit+0xc0>
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	4a65      	ldr	r2, [pc, #404]	; (81050c4 <HAL_GPIO_DeInit+0x1f4>)
 8104f30:	4293      	cmp	r3, r2
 8104f32:	d02b      	beq.n	8104f8c <HAL_GPIO_DeInit+0xbc>
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	4a64      	ldr	r2, [pc, #400]	; (81050c8 <HAL_GPIO_DeInit+0x1f8>)
 8104f38:	4293      	cmp	r3, r2
 8104f3a:	d025      	beq.n	8104f88 <HAL_GPIO_DeInit+0xb8>
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	4a63      	ldr	r2, [pc, #396]	; (81050cc <HAL_GPIO_DeInit+0x1fc>)
 8104f40:	4293      	cmp	r3, r2
 8104f42:	d01f      	beq.n	8104f84 <HAL_GPIO_DeInit+0xb4>
 8104f44:	687b      	ldr	r3, [r7, #4]
 8104f46:	4a62      	ldr	r2, [pc, #392]	; (81050d0 <HAL_GPIO_DeInit+0x200>)
 8104f48:	4293      	cmp	r3, r2
 8104f4a:	d019      	beq.n	8104f80 <HAL_GPIO_DeInit+0xb0>
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	4a61      	ldr	r2, [pc, #388]	; (81050d4 <HAL_GPIO_DeInit+0x204>)
 8104f50:	4293      	cmp	r3, r2
 8104f52:	d013      	beq.n	8104f7c <HAL_GPIO_DeInit+0xac>
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	4a60      	ldr	r2, [pc, #384]	; (81050d8 <HAL_GPIO_DeInit+0x208>)
 8104f58:	4293      	cmp	r3, r2
 8104f5a:	d00d      	beq.n	8104f78 <HAL_GPIO_DeInit+0xa8>
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	4a5f      	ldr	r2, [pc, #380]	; (81050dc <HAL_GPIO_DeInit+0x20c>)
 8104f60:	4293      	cmp	r3, r2
 8104f62:	d007      	beq.n	8104f74 <HAL_GPIO_DeInit+0xa4>
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	4a5e      	ldr	r2, [pc, #376]	; (81050e0 <HAL_GPIO_DeInit+0x210>)
 8104f68:	4293      	cmp	r3, r2
 8104f6a:	d101      	bne.n	8104f70 <HAL_GPIO_DeInit+0xa0>
 8104f6c:	2309      	movs	r3, #9
 8104f6e:	e012      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f70:	230a      	movs	r3, #10
 8104f72:	e010      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f74:	2308      	movs	r3, #8
 8104f76:	e00e      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f78:	2307      	movs	r3, #7
 8104f7a:	e00c      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f7c:	2306      	movs	r3, #6
 8104f7e:	e00a      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f80:	2305      	movs	r3, #5
 8104f82:	e008      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f84:	2304      	movs	r3, #4
 8104f86:	e006      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f88:	2303      	movs	r3, #3
 8104f8a:	e004      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f8c:	2302      	movs	r3, #2
 8104f8e:	e002      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f90:	2301      	movs	r3, #1
 8104f92:	e000      	b.n	8104f96 <HAL_GPIO_DeInit+0xc6>
 8104f94:	2300      	movs	r3, #0
 8104f96:	697a      	ldr	r2, [r7, #20]
 8104f98:	f002 0203 	and.w	r2, r2, #3
 8104f9c:	0092      	lsls	r2, r2, #2
 8104f9e:	4093      	lsls	r3, r2
 8104fa0:	68ba      	ldr	r2, [r7, #8]
 8104fa2:	429a      	cmp	r2, r3
 8104fa4:	d136      	bne.n	8105014 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8104fa6:	693b      	ldr	r3, [r7, #16]
 8104fa8:	681a      	ldr	r2, [r3, #0]
 8104faa:	68fb      	ldr	r3, [r7, #12]
 8104fac:	43db      	mvns	r3, r3
 8104fae:	401a      	ands	r2, r3
 8104fb0:	693b      	ldr	r3, [r7, #16]
 8104fb2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8104fb4:	693b      	ldr	r3, [r7, #16]
 8104fb6:	685a      	ldr	r2, [r3, #4]
 8104fb8:	68fb      	ldr	r3, [r7, #12]
 8104fba:	43db      	mvns	r3, r3
 8104fbc:	401a      	ands	r2, r3
 8104fbe:	693b      	ldr	r3, [r7, #16]
 8104fc0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8104fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104fc6:	681a      	ldr	r2, [r3, #0]
 8104fc8:	68fb      	ldr	r3, [r7, #12]
 8104fca:	43db      	mvns	r3, r3
 8104fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8104fd0:	4013      	ands	r3, r2
 8104fd2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8104fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104fd8:	685a      	ldr	r2, [r3, #4]
 8104fda:	68fb      	ldr	r3, [r7, #12]
 8104fdc:	43db      	mvns	r3, r3
 8104fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8104fe2:	4013      	ands	r3, r2
 8104fe4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8104fe6:	697b      	ldr	r3, [r7, #20]
 8104fe8:	f003 0303 	and.w	r3, r3, #3
 8104fec:	009b      	lsls	r3, r3, #2
 8104fee:	220f      	movs	r2, #15
 8104ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8104ff4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8104ff6:	4a30      	ldr	r2, [pc, #192]	; (81050b8 <HAL_GPIO_DeInit+0x1e8>)
 8104ff8:	697b      	ldr	r3, [r7, #20]
 8104ffa:	089b      	lsrs	r3, r3, #2
 8104ffc:	3302      	adds	r3, #2
 8104ffe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8105002:	68bb      	ldr	r3, [r7, #8]
 8105004:	43da      	mvns	r2, r3
 8105006:	482c      	ldr	r0, [pc, #176]	; (81050b8 <HAL_GPIO_DeInit+0x1e8>)
 8105008:	697b      	ldr	r3, [r7, #20]
 810500a:	089b      	lsrs	r3, r3, #2
 810500c:	400a      	ands	r2, r1
 810500e:	3302      	adds	r3, #2
 8105010:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	681a      	ldr	r2, [r3, #0]
 8105018:	697b      	ldr	r3, [r7, #20]
 810501a:	005b      	lsls	r3, r3, #1
 810501c:	2103      	movs	r1, #3
 810501e:	fa01 f303 	lsl.w	r3, r1, r3
 8105022:	431a      	orrs	r2, r3
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8105028:	697b      	ldr	r3, [r7, #20]
 810502a:	08da      	lsrs	r2, r3, #3
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	3208      	adds	r2, #8
 8105030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8105034:	697b      	ldr	r3, [r7, #20]
 8105036:	f003 0307 	and.w	r3, r3, #7
 810503a:	009b      	lsls	r3, r3, #2
 810503c:	220f      	movs	r2, #15
 810503e:	fa02 f303 	lsl.w	r3, r2, r3
 8105042:	43db      	mvns	r3, r3
 8105044:	697a      	ldr	r2, [r7, #20]
 8105046:	08d2      	lsrs	r2, r2, #3
 8105048:	4019      	ands	r1, r3
 810504a:	687b      	ldr	r3, [r7, #4]
 810504c:	3208      	adds	r2, #8
 810504e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105052:	687b      	ldr	r3, [r7, #4]
 8105054:	68da      	ldr	r2, [r3, #12]
 8105056:	697b      	ldr	r3, [r7, #20]
 8105058:	005b      	lsls	r3, r3, #1
 810505a:	2103      	movs	r1, #3
 810505c:	fa01 f303 	lsl.w	r3, r1, r3
 8105060:	43db      	mvns	r3, r3
 8105062:	401a      	ands	r2, r3
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	685a      	ldr	r2, [r3, #4]
 810506c:	2101      	movs	r1, #1
 810506e:	697b      	ldr	r3, [r7, #20]
 8105070:	fa01 f303 	lsl.w	r3, r1, r3
 8105074:	43db      	mvns	r3, r3
 8105076:	401a      	ands	r2, r3
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	689a      	ldr	r2, [r3, #8]
 8105080:	697b      	ldr	r3, [r7, #20]
 8105082:	005b      	lsls	r3, r3, #1
 8105084:	2103      	movs	r1, #3
 8105086:	fa01 f303 	lsl.w	r3, r1, r3
 810508a:	43db      	mvns	r3, r3
 810508c:	401a      	ands	r2, r3
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	609a      	str	r2, [r3, #8]
    }

    position++;
 8105092:	697b      	ldr	r3, [r7, #20]
 8105094:	3301      	adds	r3, #1
 8105096:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8105098:	683a      	ldr	r2, [r7, #0]
 810509a:	697b      	ldr	r3, [r7, #20]
 810509c:	fa22 f303 	lsr.w	r3, r2, r3
 81050a0:	2b00      	cmp	r3, #0
 81050a2:	f47f af1f 	bne.w	8104ee4 <HAL_GPIO_DeInit+0x14>
  }
}
 81050a6:	bf00      	nop
 81050a8:	371c      	adds	r7, #28
 81050aa:	46bd      	mov	sp, r7
 81050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050b0:	4770      	bx	lr
 81050b2:	bf00      	nop
 81050b4:	580000c0 	.word	0x580000c0
 81050b8:	58000400 	.word	0x58000400
 81050bc:	58020000 	.word	0x58020000
 81050c0:	58020400 	.word	0x58020400
 81050c4:	58020800 	.word	0x58020800
 81050c8:	58020c00 	.word	0x58020c00
 81050cc:	58021000 	.word	0x58021000
 81050d0:	58021400 	.word	0x58021400
 81050d4:	58021800 	.word	0x58021800
 81050d8:	58021c00 	.word	0x58021c00
 81050dc:	58022000 	.word	0x58022000
 81050e0:	58022400 	.word	0x58022400

081050e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81050e4:	b480      	push	{r7}
 81050e6:	b085      	sub	sp, #20
 81050e8:	af00      	add	r7, sp, #0
 81050ea:	6078      	str	r0, [r7, #4]
 81050ec:	460b      	mov	r3, r1
 81050ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	691a      	ldr	r2, [r3, #16]
 81050f4:	887b      	ldrh	r3, [r7, #2]
 81050f6:	4013      	ands	r3, r2
 81050f8:	2b00      	cmp	r3, #0
 81050fa:	d002      	beq.n	8105102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 81050fc:	2301      	movs	r3, #1
 81050fe:	73fb      	strb	r3, [r7, #15]
 8105100:	e001      	b.n	8105106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8105102:	2300      	movs	r3, #0
 8105104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8105106:	7bfb      	ldrb	r3, [r7, #15]
}
 8105108:	4618      	mov	r0, r3
 810510a:	3714      	adds	r7, #20
 810510c:	46bd      	mov	sp, r7
 810510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105112:	4770      	bx	lr

08105114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105114:	b480      	push	{r7}
 8105116:	b083      	sub	sp, #12
 8105118:	af00      	add	r7, sp, #0
 810511a:	6078      	str	r0, [r7, #4]
 810511c:	460b      	mov	r3, r1
 810511e:	807b      	strh	r3, [r7, #2]
 8105120:	4613      	mov	r3, r2
 8105122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105124:	787b      	ldrb	r3, [r7, #1]
 8105126:	2b00      	cmp	r3, #0
 8105128:	d003      	beq.n	8105132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810512a:	887a      	ldrh	r2, [r7, #2]
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105130:	e003      	b.n	810513a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105132:	887b      	ldrh	r3, [r7, #2]
 8105134:	041a      	lsls	r2, r3, #16
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	619a      	str	r2, [r3, #24]
}
 810513a:	bf00      	nop
 810513c:	370c      	adds	r7, #12
 810513e:	46bd      	mov	sp, r7
 8105140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105144:	4770      	bx	lr
	...

08105148 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8105148:	b480      	push	{r7}
 810514a:	b083      	sub	sp, #12
 810514c:	af00      	add	r7, sp, #0
 810514e:	6078      	str	r0, [r7, #4]
 8105150:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8105152:	490e      	ldr	r1, [pc, #56]	; (810518c <HAL_HSEM_Take+0x44>)
 8105154:	683b      	ldr	r3, [r7, #0]
 8105156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810515a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810515e:	687a      	ldr	r2, [r7, #4]
 8105160:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8105164:	4a09      	ldr	r2, [pc, #36]	; (810518c <HAL_HSEM_Take+0x44>)
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810516c:	683b      	ldr	r3, [r7, #0]
 810516e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8105172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105176:	429a      	cmp	r2, r3
 8105178:	d101      	bne.n	810517e <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810517a:	2300      	movs	r3, #0
 810517c:	e000      	b.n	8105180 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810517e:	2301      	movs	r3, #1
}
 8105180:	4618      	mov	r0, r3
 8105182:	370c      	adds	r7, #12
 8105184:	46bd      	mov	sp, r7
 8105186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810518a:	4770      	bx	lr
 810518c:	58026400 	.word	0x58026400

08105190 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8105190:	b480      	push	{r7}
 8105192:	b083      	sub	sp, #12
 8105194:	af00      	add	r7, sp, #0
 8105196:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8105198:	4a07      	ldr	r2, [pc, #28]	; (81051b8 <HAL_HSEM_IsSemTaken+0x28>)
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81051a0:	2b00      	cmp	r3, #0
 81051a2:	da01      	bge.n	81051a8 <HAL_HSEM_IsSemTaken+0x18>
 81051a4:	2301      	movs	r3, #1
 81051a6:	e000      	b.n	81051aa <HAL_HSEM_IsSemTaken+0x1a>
 81051a8:	2300      	movs	r3, #0
}
 81051aa:	4618      	mov	r0, r3
 81051ac:	370c      	adds	r7, #12
 81051ae:	46bd      	mov	sp, r7
 81051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051b4:	4770      	bx	lr
 81051b6:	bf00      	nop
 81051b8:	58026400 	.word	0x58026400

081051bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81051bc:	b480      	push	{r7}
 81051be:	b083      	sub	sp, #12
 81051c0:	af00      	add	r7, sp, #0
 81051c2:	6078      	str	r0, [r7, #4]
 81051c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81051c6:	4906      	ldr	r1, [pc, #24]	; (81051e0 <HAL_HSEM_Release+0x24>)
 81051c8:	683b      	ldr	r3, [r7, #0]
 81051ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81051ce:	687b      	ldr	r3, [r7, #4]
 81051d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81051d4:	bf00      	nop
 81051d6:	370c      	adds	r7, #12
 81051d8:	46bd      	mov	sp, r7
 81051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051de:	4770      	bx	lr
 81051e0:	58026400 	.word	0x58026400

081051e4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81051e4:	b480      	push	{r7}
 81051e6:	b083      	sub	sp, #12
 81051e8:	af00      	add	r7, sp, #0
 81051ea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81051ec:	4b05      	ldr	r3, [pc, #20]	; (8105204 <HAL_HSEM_ActivateNotification+0x20>)
 81051ee:	681a      	ldr	r2, [r3, #0]
 81051f0:	4904      	ldr	r1, [pc, #16]	; (8105204 <HAL_HSEM_ActivateNotification+0x20>)
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	4313      	orrs	r3, r2
 81051f6:	600b      	str	r3, [r1, #0]
#endif
}
 81051f8:	bf00      	nop
 81051fa:	370c      	adds	r7, #12
 81051fc:	46bd      	mov	sp, r7
 81051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105202:	4770      	bx	lr
 8105204:	58026510 	.word	0x58026510

08105208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8105208:	b580      	push	{r7, lr}
 810520a:	b082      	sub	sp, #8
 810520c:	af00      	add	r7, sp, #0
 810520e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	2b00      	cmp	r3, #0
 8105214:	d101      	bne.n	810521a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8105216:	2301      	movs	r3, #1
 8105218:	e081      	b.n	810531e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810521a:	687b      	ldr	r3, [r7, #4]
 810521c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105220:	b2db      	uxtb	r3, r3
 8105222:	2b00      	cmp	r3, #0
 8105224:	d106      	bne.n	8105234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	2200      	movs	r2, #0
 810522a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810522e:	6878      	ldr	r0, [r7, #4]
 8105230:	f7fc f92e 	bl	8101490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	2224      	movs	r2, #36	; 0x24
 8105238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	681a      	ldr	r2, [r3, #0]
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	f022 0201 	bic.w	r2, r2, #1
 810524a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	685a      	ldr	r2, [r3, #4]
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	681b      	ldr	r3, [r3, #0]
 8105254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8105258:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	689a      	ldr	r2, [r3, #8]
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105268:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	68db      	ldr	r3, [r3, #12]
 810526e:	2b01      	cmp	r3, #1
 8105270:	d107      	bne.n	8105282 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	689a      	ldr	r2, [r3, #8]
 8105276:	687b      	ldr	r3, [r7, #4]
 8105278:	681b      	ldr	r3, [r3, #0]
 810527a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810527e:	609a      	str	r2, [r3, #8]
 8105280:	e006      	b.n	8105290 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	689a      	ldr	r2, [r3, #8]
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810528e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	68db      	ldr	r3, [r3, #12]
 8105294:	2b02      	cmp	r3, #2
 8105296:	d104      	bne.n	81052a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	681b      	ldr	r3, [r3, #0]
 810529c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81052a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	681b      	ldr	r3, [r3, #0]
 81052a6:	685b      	ldr	r3, [r3, #4]
 81052a8:	687a      	ldr	r2, [r7, #4]
 81052aa:	6812      	ldr	r2, [r2, #0]
 81052ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81052b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81052b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	68da      	ldr	r2, [r3, #12]
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	681b      	ldr	r3, [r3, #0]
 81052c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81052c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	691a      	ldr	r2, [r3, #16]
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	695b      	ldr	r3, [r3, #20]
 81052ce:	ea42 0103 	orr.w	r1, r2, r3
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	699b      	ldr	r3, [r3, #24]
 81052d6:	021a      	lsls	r2, r3, #8
 81052d8:	687b      	ldr	r3, [r7, #4]
 81052da:	681b      	ldr	r3, [r3, #0]
 81052dc:	430a      	orrs	r2, r1
 81052de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	69d9      	ldr	r1, [r3, #28]
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	6a1a      	ldr	r2, [r3, #32]
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	681b      	ldr	r3, [r3, #0]
 81052ec:	430a      	orrs	r2, r1
 81052ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	681a      	ldr	r2, [r3, #0]
 81052f6:	687b      	ldr	r3, [r7, #4]
 81052f8:	681b      	ldr	r3, [r3, #0]
 81052fa:	f042 0201 	orr.w	r2, r2, #1
 81052fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	2200      	movs	r2, #0
 8105304:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	2220      	movs	r2, #32
 810530a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	2200      	movs	r2, #0
 8105312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	2200      	movs	r2, #0
 8105318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 810531c:	2300      	movs	r3, #0
}
 810531e:	4618      	mov	r0, r3
 8105320:	3708      	adds	r7, #8
 8105322:	46bd      	mov	sp, r7
 8105324:	bd80      	pop	{r7, pc}

08105326 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8105326:	b580      	push	{r7, lr}
 8105328:	b082      	sub	sp, #8
 810532a:	af00      	add	r7, sp, #0
 810532c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	2b00      	cmp	r3, #0
 8105332:	d101      	bne.n	8105338 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8105334:	2301      	movs	r3, #1
 8105336:	e021      	b.n	810537c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	2224      	movs	r2, #36	; 0x24
 810533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8105340:	687b      	ldr	r3, [r7, #4]
 8105342:	681b      	ldr	r3, [r3, #0]
 8105344:	681a      	ldr	r2, [r3, #0]
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	681b      	ldr	r3, [r3, #0]
 810534a:	f022 0201 	bic.w	r2, r2, #1
 810534e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8105350:	6878      	ldr	r0, [r7, #4]
 8105352:	f7fc f957 	bl	8101604 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	2200      	movs	r2, #0
 810535a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 810535c:	687b      	ldr	r3, [r7, #4]
 810535e:	2200      	movs	r2, #0
 8105360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	2200      	movs	r2, #0
 8105368:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	2200      	movs	r2, #0
 810536e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	2200      	movs	r2, #0
 8105376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 810537a:	2300      	movs	r3, #0
}
 810537c:	4618      	mov	r0, r3
 810537e:	3708      	adds	r7, #8
 8105380:	46bd      	mov	sp, r7
 8105382:	bd80      	pop	{r7, pc}

08105384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105384:	b580      	push	{r7, lr}
 8105386:	b088      	sub	sp, #32
 8105388:	af02      	add	r7, sp, #8
 810538a:	60f8      	str	r0, [r7, #12]
 810538c:	607a      	str	r2, [r7, #4]
 810538e:	461a      	mov	r2, r3
 8105390:	460b      	mov	r3, r1
 8105392:	817b      	strh	r3, [r7, #10]
 8105394:	4613      	mov	r3, r2
 8105396:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105398:	68fb      	ldr	r3, [r7, #12]
 810539a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810539e:	b2db      	uxtb	r3, r3
 81053a0:	2b20      	cmp	r3, #32
 81053a2:	f040 80da 	bne.w	810555a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81053a6:	68fb      	ldr	r3, [r7, #12]
 81053a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81053ac:	2b01      	cmp	r3, #1
 81053ae:	d101      	bne.n	81053b4 <HAL_I2C_Master_Transmit+0x30>
 81053b0:	2302      	movs	r3, #2
 81053b2:	e0d3      	b.n	810555c <HAL_I2C_Master_Transmit+0x1d8>
 81053b4:	68fb      	ldr	r3, [r7, #12]
 81053b6:	2201      	movs	r2, #1
 81053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81053bc:	f7fc ffa4 	bl	8102308 <HAL_GetTick>
 81053c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81053c2:	697b      	ldr	r3, [r7, #20]
 81053c4:	9300      	str	r3, [sp, #0]
 81053c6:	2319      	movs	r3, #25
 81053c8:	2201      	movs	r2, #1
 81053ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81053ce:	68f8      	ldr	r0, [r7, #12]
 81053d0:	f000 fdde 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 81053d4:	4603      	mov	r3, r0
 81053d6:	2b00      	cmp	r3, #0
 81053d8:	d001      	beq.n	81053de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81053da:	2301      	movs	r3, #1
 81053dc:	e0be      	b.n	810555c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81053de:	68fb      	ldr	r3, [r7, #12]
 81053e0:	2221      	movs	r2, #33	; 0x21
 81053e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81053e6:	68fb      	ldr	r3, [r7, #12]
 81053e8:	2210      	movs	r2, #16
 81053ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81053ee:	68fb      	ldr	r3, [r7, #12]
 81053f0:	2200      	movs	r2, #0
 81053f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81053f4:	68fb      	ldr	r3, [r7, #12]
 81053f6:	687a      	ldr	r2, [r7, #4]
 81053f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81053fa:	68fb      	ldr	r3, [r7, #12]
 81053fc:	893a      	ldrh	r2, [r7, #8]
 81053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105400:	68fb      	ldr	r3, [r7, #12]
 8105402:	2200      	movs	r2, #0
 8105404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105406:	68fb      	ldr	r3, [r7, #12]
 8105408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810540a:	b29b      	uxth	r3, r3
 810540c:	2bff      	cmp	r3, #255	; 0xff
 810540e:	d90e      	bls.n	810542e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105410:	68fb      	ldr	r3, [r7, #12]
 8105412:	22ff      	movs	r2, #255	; 0xff
 8105414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105416:	68fb      	ldr	r3, [r7, #12]
 8105418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810541a:	b2da      	uxtb	r2, r3
 810541c:	8979      	ldrh	r1, [r7, #10]
 810541e:	4b51      	ldr	r3, [pc, #324]	; (8105564 <HAL_I2C_Master_Transmit+0x1e0>)
 8105420:	9300      	str	r3, [sp, #0]
 8105422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105426:	68f8      	ldr	r0, [r7, #12]
 8105428:	f000 ff40 	bl	81062ac <I2C_TransferConfig>
 810542c:	e06c      	b.n	8105508 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810542e:	68fb      	ldr	r3, [r7, #12]
 8105430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105432:	b29a      	uxth	r2, r3
 8105434:	68fb      	ldr	r3, [r7, #12]
 8105436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810543c:	b2da      	uxtb	r2, r3
 810543e:	8979      	ldrh	r1, [r7, #10]
 8105440:	4b48      	ldr	r3, [pc, #288]	; (8105564 <HAL_I2C_Master_Transmit+0x1e0>)
 8105442:	9300      	str	r3, [sp, #0]
 8105444:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105448:	68f8      	ldr	r0, [r7, #12]
 810544a:	f000 ff2f 	bl	81062ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 810544e:	e05b      	b.n	8105508 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105450:	697a      	ldr	r2, [r7, #20]
 8105452:	6a39      	ldr	r1, [r7, #32]
 8105454:	68f8      	ldr	r0, [r7, #12]
 8105456:	f000 fddb 	bl	8106010 <I2C_WaitOnTXISFlagUntilTimeout>
 810545a:	4603      	mov	r3, r0
 810545c:	2b00      	cmp	r3, #0
 810545e:	d001      	beq.n	8105464 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8105460:	2301      	movs	r3, #1
 8105462:	e07b      	b.n	810555c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105468:	781a      	ldrb	r2, [r3, #0]
 810546a:	68fb      	ldr	r3, [r7, #12]
 810546c:	681b      	ldr	r3, [r3, #0]
 810546e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105470:	68fb      	ldr	r3, [r7, #12]
 8105472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105474:	1c5a      	adds	r2, r3, #1
 8105476:	68fb      	ldr	r3, [r7, #12]
 8105478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810547a:	68fb      	ldr	r3, [r7, #12]
 810547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810547e:	b29b      	uxth	r3, r3
 8105480:	3b01      	subs	r3, #1
 8105482:	b29a      	uxth	r2, r3
 8105484:	68fb      	ldr	r3, [r7, #12]
 8105486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8105488:	68fb      	ldr	r3, [r7, #12]
 810548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810548c:	3b01      	subs	r3, #1
 810548e:	b29a      	uxth	r2, r3
 8105490:	68fb      	ldr	r3, [r7, #12]
 8105492:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105494:	68fb      	ldr	r3, [r7, #12]
 8105496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105498:	b29b      	uxth	r3, r3
 810549a:	2b00      	cmp	r3, #0
 810549c:	d034      	beq.n	8105508 <HAL_I2C_Master_Transmit+0x184>
 810549e:	68fb      	ldr	r3, [r7, #12]
 81054a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81054a2:	2b00      	cmp	r3, #0
 81054a4:	d130      	bne.n	8105508 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81054a6:	697b      	ldr	r3, [r7, #20]
 81054a8:	9300      	str	r3, [sp, #0]
 81054aa:	6a3b      	ldr	r3, [r7, #32]
 81054ac:	2200      	movs	r2, #0
 81054ae:	2180      	movs	r1, #128	; 0x80
 81054b0:	68f8      	ldr	r0, [r7, #12]
 81054b2:	f000 fd6d 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 81054b6:	4603      	mov	r3, r0
 81054b8:	2b00      	cmp	r3, #0
 81054ba:	d001      	beq.n	81054c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 81054bc:	2301      	movs	r3, #1
 81054be:	e04d      	b.n	810555c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81054c0:	68fb      	ldr	r3, [r7, #12]
 81054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81054c4:	b29b      	uxth	r3, r3
 81054c6:	2bff      	cmp	r3, #255	; 0xff
 81054c8:	d90e      	bls.n	81054e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81054ca:	68fb      	ldr	r3, [r7, #12]
 81054cc:	22ff      	movs	r2, #255	; 0xff
 81054ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81054d0:	68fb      	ldr	r3, [r7, #12]
 81054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81054d4:	b2da      	uxtb	r2, r3
 81054d6:	8979      	ldrh	r1, [r7, #10]
 81054d8:	2300      	movs	r3, #0
 81054da:	9300      	str	r3, [sp, #0]
 81054dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81054e0:	68f8      	ldr	r0, [r7, #12]
 81054e2:	f000 fee3 	bl	81062ac <I2C_TransferConfig>
 81054e6:	e00f      	b.n	8105508 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81054e8:	68fb      	ldr	r3, [r7, #12]
 81054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81054ec:	b29a      	uxth	r2, r3
 81054ee:	68fb      	ldr	r3, [r7, #12]
 81054f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81054f2:	68fb      	ldr	r3, [r7, #12]
 81054f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81054f6:	b2da      	uxtb	r2, r3
 81054f8:	8979      	ldrh	r1, [r7, #10]
 81054fa:	2300      	movs	r3, #0
 81054fc:	9300      	str	r3, [sp, #0]
 81054fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105502:	68f8      	ldr	r0, [r7, #12]
 8105504:	f000 fed2 	bl	81062ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8105508:	68fb      	ldr	r3, [r7, #12]
 810550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810550c:	b29b      	uxth	r3, r3
 810550e:	2b00      	cmp	r3, #0
 8105510:	d19e      	bne.n	8105450 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105512:	697a      	ldr	r2, [r7, #20]
 8105514:	6a39      	ldr	r1, [r7, #32]
 8105516:	68f8      	ldr	r0, [r7, #12]
 8105518:	f000 fdba 	bl	8106090 <I2C_WaitOnSTOPFlagUntilTimeout>
 810551c:	4603      	mov	r3, r0
 810551e:	2b00      	cmp	r3, #0
 8105520:	d001      	beq.n	8105526 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8105522:	2301      	movs	r3, #1
 8105524:	e01a      	b.n	810555c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105526:	68fb      	ldr	r3, [r7, #12]
 8105528:	681b      	ldr	r3, [r3, #0]
 810552a:	2220      	movs	r2, #32
 810552c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810552e:	68fb      	ldr	r3, [r7, #12]
 8105530:	681b      	ldr	r3, [r3, #0]
 8105532:	6859      	ldr	r1, [r3, #4]
 8105534:	68fb      	ldr	r3, [r7, #12]
 8105536:	681a      	ldr	r2, [r3, #0]
 8105538:	4b0b      	ldr	r3, [pc, #44]	; (8105568 <HAL_I2C_Master_Transmit+0x1e4>)
 810553a:	400b      	ands	r3, r1
 810553c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810553e:	68fb      	ldr	r3, [r7, #12]
 8105540:	2220      	movs	r2, #32
 8105542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105546:	68fb      	ldr	r3, [r7, #12]
 8105548:	2200      	movs	r2, #0
 810554a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810554e:	68fb      	ldr	r3, [r7, #12]
 8105550:	2200      	movs	r2, #0
 8105552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105556:	2300      	movs	r3, #0
 8105558:	e000      	b.n	810555c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 810555a:	2302      	movs	r3, #2
  }
}
 810555c:	4618      	mov	r0, r3
 810555e:	3718      	adds	r7, #24
 8105560:	46bd      	mov	sp, r7
 8105562:	bd80      	pop	{r7, pc}
 8105564:	80002000 	.word	0x80002000
 8105568:	fe00e800 	.word	0xfe00e800

0810556c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810556c:	b580      	push	{r7, lr}
 810556e:	b088      	sub	sp, #32
 8105570:	af02      	add	r7, sp, #8
 8105572:	60f8      	str	r0, [r7, #12]
 8105574:	607a      	str	r2, [r7, #4]
 8105576:	461a      	mov	r2, r3
 8105578:	460b      	mov	r3, r1
 810557a:	817b      	strh	r3, [r7, #10]
 810557c:	4613      	mov	r3, r2
 810557e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105580:	68fb      	ldr	r3, [r7, #12]
 8105582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105586:	b2db      	uxtb	r3, r3
 8105588:	2b20      	cmp	r3, #32
 810558a:	f040 80db 	bne.w	8105744 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810558e:	68fb      	ldr	r3, [r7, #12]
 8105590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105594:	2b01      	cmp	r3, #1
 8105596:	d101      	bne.n	810559c <HAL_I2C_Master_Receive+0x30>
 8105598:	2302      	movs	r3, #2
 810559a:	e0d4      	b.n	8105746 <HAL_I2C_Master_Receive+0x1da>
 810559c:	68fb      	ldr	r3, [r7, #12]
 810559e:	2201      	movs	r2, #1
 81055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81055a4:	f7fc feb0 	bl	8102308 <HAL_GetTick>
 81055a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81055aa:	697b      	ldr	r3, [r7, #20]
 81055ac:	9300      	str	r3, [sp, #0]
 81055ae:	2319      	movs	r3, #25
 81055b0:	2201      	movs	r2, #1
 81055b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81055b6:	68f8      	ldr	r0, [r7, #12]
 81055b8:	f000 fcea 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 81055bc:	4603      	mov	r3, r0
 81055be:	2b00      	cmp	r3, #0
 81055c0:	d001      	beq.n	81055c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81055c2:	2301      	movs	r3, #1
 81055c4:	e0bf      	b.n	8105746 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81055c6:	68fb      	ldr	r3, [r7, #12]
 81055c8:	2222      	movs	r2, #34	; 0x22
 81055ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81055ce:	68fb      	ldr	r3, [r7, #12]
 81055d0:	2210      	movs	r2, #16
 81055d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81055d6:	68fb      	ldr	r3, [r7, #12]
 81055d8:	2200      	movs	r2, #0
 81055da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	687a      	ldr	r2, [r7, #4]
 81055e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81055e2:	68fb      	ldr	r3, [r7, #12]
 81055e4:	893a      	ldrh	r2, [r7, #8]
 81055e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81055e8:	68fb      	ldr	r3, [r7, #12]
 81055ea:	2200      	movs	r2, #0
 81055ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81055ee:	68fb      	ldr	r3, [r7, #12]
 81055f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055f2:	b29b      	uxth	r3, r3
 81055f4:	2bff      	cmp	r3, #255	; 0xff
 81055f6:	d90e      	bls.n	8105616 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81055f8:	68fb      	ldr	r3, [r7, #12]
 81055fa:	22ff      	movs	r2, #255	; 0xff
 81055fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81055fe:	68fb      	ldr	r3, [r7, #12]
 8105600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105602:	b2da      	uxtb	r2, r3
 8105604:	8979      	ldrh	r1, [r7, #10]
 8105606:	4b52      	ldr	r3, [pc, #328]	; (8105750 <HAL_I2C_Master_Receive+0x1e4>)
 8105608:	9300      	str	r3, [sp, #0]
 810560a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810560e:	68f8      	ldr	r0, [r7, #12]
 8105610:	f000 fe4c 	bl	81062ac <I2C_TransferConfig>
 8105614:	e06d      	b.n	81056f2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105616:	68fb      	ldr	r3, [r7, #12]
 8105618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810561a:	b29a      	uxth	r2, r3
 810561c:	68fb      	ldr	r3, [r7, #12]
 810561e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8105620:	68fb      	ldr	r3, [r7, #12]
 8105622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105624:	b2da      	uxtb	r2, r3
 8105626:	8979      	ldrh	r1, [r7, #10]
 8105628:	4b49      	ldr	r3, [pc, #292]	; (8105750 <HAL_I2C_Master_Receive+0x1e4>)
 810562a:	9300      	str	r3, [sp, #0]
 810562c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105630:	68f8      	ldr	r0, [r7, #12]
 8105632:	f000 fe3b 	bl	81062ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8105636:	e05c      	b.n	81056f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105638:	697a      	ldr	r2, [r7, #20]
 810563a:	6a39      	ldr	r1, [r7, #32]
 810563c:	68f8      	ldr	r0, [r7, #12]
 810563e:	f000 fd63 	bl	8106108 <I2C_WaitOnRXNEFlagUntilTimeout>
 8105642:	4603      	mov	r3, r0
 8105644:	2b00      	cmp	r3, #0
 8105646:	d001      	beq.n	810564c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8105648:	2301      	movs	r3, #1
 810564a:	e07c      	b.n	8105746 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810564c:	68fb      	ldr	r3, [r7, #12]
 810564e:	681b      	ldr	r3, [r3, #0]
 8105650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105652:	68fb      	ldr	r3, [r7, #12]
 8105654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105656:	b2d2      	uxtb	r2, r2
 8105658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810565a:	68fb      	ldr	r3, [r7, #12]
 810565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810565e:	1c5a      	adds	r2, r3, #1
 8105660:	68fb      	ldr	r3, [r7, #12]
 8105662:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105664:	68fb      	ldr	r3, [r7, #12]
 8105666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105668:	3b01      	subs	r3, #1
 810566a:	b29a      	uxth	r2, r3
 810566c:	68fb      	ldr	r3, [r7, #12]
 810566e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105670:	68fb      	ldr	r3, [r7, #12]
 8105672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105674:	b29b      	uxth	r3, r3
 8105676:	3b01      	subs	r3, #1
 8105678:	b29a      	uxth	r2, r3
 810567a:	68fb      	ldr	r3, [r7, #12]
 810567c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810567e:	68fb      	ldr	r3, [r7, #12]
 8105680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105682:	b29b      	uxth	r3, r3
 8105684:	2b00      	cmp	r3, #0
 8105686:	d034      	beq.n	81056f2 <HAL_I2C_Master_Receive+0x186>
 8105688:	68fb      	ldr	r3, [r7, #12]
 810568a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810568c:	2b00      	cmp	r3, #0
 810568e:	d130      	bne.n	81056f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105690:	697b      	ldr	r3, [r7, #20]
 8105692:	9300      	str	r3, [sp, #0]
 8105694:	6a3b      	ldr	r3, [r7, #32]
 8105696:	2200      	movs	r2, #0
 8105698:	2180      	movs	r1, #128	; 0x80
 810569a:	68f8      	ldr	r0, [r7, #12]
 810569c:	f000 fc78 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 81056a0:	4603      	mov	r3, r0
 81056a2:	2b00      	cmp	r3, #0
 81056a4:	d001      	beq.n	81056aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81056a6:	2301      	movs	r3, #1
 81056a8:	e04d      	b.n	8105746 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81056aa:	68fb      	ldr	r3, [r7, #12]
 81056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81056ae:	b29b      	uxth	r3, r3
 81056b0:	2bff      	cmp	r3, #255	; 0xff
 81056b2:	d90e      	bls.n	81056d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81056b4:	68fb      	ldr	r3, [r7, #12]
 81056b6:	22ff      	movs	r2, #255	; 0xff
 81056b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81056ba:	68fb      	ldr	r3, [r7, #12]
 81056bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81056be:	b2da      	uxtb	r2, r3
 81056c0:	8979      	ldrh	r1, [r7, #10]
 81056c2:	2300      	movs	r3, #0
 81056c4:	9300      	str	r3, [sp, #0]
 81056c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81056ca:	68f8      	ldr	r0, [r7, #12]
 81056cc:	f000 fdee 	bl	81062ac <I2C_TransferConfig>
 81056d0:	e00f      	b.n	81056f2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81056d2:	68fb      	ldr	r3, [r7, #12]
 81056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81056d6:	b29a      	uxth	r2, r3
 81056d8:	68fb      	ldr	r3, [r7, #12]
 81056da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81056dc:	68fb      	ldr	r3, [r7, #12]
 81056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81056e0:	b2da      	uxtb	r2, r3
 81056e2:	8979      	ldrh	r1, [r7, #10]
 81056e4:	2300      	movs	r3, #0
 81056e6:	9300      	str	r3, [sp, #0]
 81056e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81056ec:	68f8      	ldr	r0, [r7, #12]
 81056ee:	f000 fddd 	bl	81062ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81056f2:	68fb      	ldr	r3, [r7, #12]
 81056f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81056f6:	b29b      	uxth	r3, r3
 81056f8:	2b00      	cmp	r3, #0
 81056fa:	d19d      	bne.n	8105638 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81056fc:	697a      	ldr	r2, [r7, #20]
 81056fe:	6a39      	ldr	r1, [r7, #32]
 8105700:	68f8      	ldr	r0, [r7, #12]
 8105702:	f000 fcc5 	bl	8106090 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105706:	4603      	mov	r3, r0
 8105708:	2b00      	cmp	r3, #0
 810570a:	d001      	beq.n	8105710 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 810570c:	2301      	movs	r3, #1
 810570e:	e01a      	b.n	8105746 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105710:	68fb      	ldr	r3, [r7, #12]
 8105712:	681b      	ldr	r3, [r3, #0]
 8105714:	2220      	movs	r2, #32
 8105716:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105718:	68fb      	ldr	r3, [r7, #12]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	6859      	ldr	r1, [r3, #4]
 810571e:	68fb      	ldr	r3, [r7, #12]
 8105720:	681a      	ldr	r2, [r3, #0]
 8105722:	4b0c      	ldr	r3, [pc, #48]	; (8105754 <HAL_I2C_Master_Receive+0x1e8>)
 8105724:	400b      	ands	r3, r1
 8105726:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105728:	68fb      	ldr	r3, [r7, #12]
 810572a:	2220      	movs	r2, #32
 810572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105730:	68fb      	ldr	r3, [r7, #12]
 8105732:	2200      	movs	r2, #0
 8105734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105738:	68fb      	ldr	r3, [r7, #12]
 810573a:	2200      	movs	r2, #0
 810573c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105740:	2300      	movs	r3, #0
 8105742:	e000      	b.n	8105746 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8105744:	2302      	movs	r3, #2
  }
}
 8105746:	4618      	mov	r0, r3
 8105748:	3718      	adds	r7, #24
 810574a:	46bd      	mov	sp, r7
 810574c:	bd80      	pop	{r7, pc}
 810574e:	bf00      	nop
 8105750:	80002400 	.word	0x80002400
 8105754:	fe00e800 	.word	0xfe00e800

08105758 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105758:	b580      	push	{r7, lr}
 810575a:	b088      	sub	sp, #32
 810575c:	af02      	add	r7, sp, #8
 810575e:	60f8      	str	r0, [r7, #12]
 8105760:	4608      	mov	r0, r1
 8105762:	4611      	mov	r1, r2
 8105764:	461a      	mov	r2, r3
 8105766:	4603      	mov	r3, r0
 8105768:	817b      	strh	r3, [r7, #10]
 810576a:	460b      	mov	r3, r1
 810576c:	813b      	strh	r3, [r7, #8]
 810576e:	4613      	mov	r3, r2
 8105770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105772:	68fb      	ldr	r3, [r7, #12]
 8105774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105778:	b2db      	uxtb	r3, r3
 810577a:	2b20      	cmp	r3, #32
 810577c:	f040 80f9 	bne.w	8105972 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8105780:	6a3b      	ldr	r3, [r7, #32]
 8105782:	2b00      	cmp	r3, #0
 8105784:	d002      	beq.n	810578c <HAL_I2C_Mem_Write+0x34>
 8105786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8105788:	2b00      	cmp	r3, #0
 810578a:	d105      	bne.n	8105798 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810578c:	68fb      	ldr	r3, [r7, #12]
 810578e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8105792:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8105794:	2301      	movs	r3, #1
 8105796:	e0ed      	b.n	8105974 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105798:	68fb      	ldr	r3, [r7, #12]
 810579a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810579e:	2b01      	cmp	r3, #1
 81057a0:	d101      	bne.n	81057a6 <HAL_I2C_Mem_Write+0x4e>
 81057a2:	2302      	movs	r3, #2
 81057a4:	e0e6      	b.n	8105974 <HAL_I2C_Mem_Write+0x21c>
 81057a6:	68fb      	ldr	r3, [r7, #12]
 81057a8:	2201      	movs	r2, #1
 81057aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81057ae:	f7fc fdab 	bl	8102308 <HAL_GetTick>
 81057b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81057b4:	697b      	ldr	r3, [r7, #20]
 81057b6:	9300      	str	r3, [sp, #0]
 81057b8:	2319      	movs	r3, #25
 81057ba:	2201      	movs	r2, #1
 81057bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81057c0:	68f8      	ldr	r0, [r7, #12]
 81057c2:	f000 fbe5 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 81057c6:	4603      	mov	r3, r0
 81057c8:	2b00      	cmp	r3, #0
 81057ca:	d001      	beq.n	81057d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81057cc:	2301      	movs	r3, #1
 81057ce:	e0d1      	b.n	8105974 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81057d0:	68fb      	ldr	r3, [r7, #12]
 81057d2:	2221      	movs	r2, #33	; 0x21
 81057d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81057d8:	68fb      	ldr	r3, [r7, #12]
 81057da:	2240      	movs	r2, #64	; 0x40
 81057dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81057e0:	68fb      	ldr	r3, [r7, #12]
 81057e2:	2200      	movs	r2, #0
 81057e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81057e6:	68fb      	ldr	r3, [r7, #12]
 81057e8:	6a3a      	ldr	r2, [r7, #32]
 81057ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81057ec:	68fb      	ldr	r3, [r7, #12]
 81057ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81057f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81057f2:	68fb      	ldr	r3, [r7, #12]
 81057f4:	2200      	movs	r2, #0
 81057f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81057f8:	88f8      	ldrh	r0, [r7, #6]
 81057fa:	893a      	ldrh	r2, [r7, #8]
 81057fc:	8979      	ldrh	r1, [r7, #10]
 81057fe:	697b      	ldr	r3, [r7, #20]
 8105800:	9301      	str	r3, [sp, #4]
 8105802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105804:	9300      	str	r3, [sp, #0]
 8105806:	4603      	mov	r3, r0
 8105808:	68f8      	ldr	r0, [r7, #12]
 810580a:	f000 faf5 	bl	8105df8 <I2C_RequestMemoryWrite>
 810580e:	4603      	mov	r3, r0
 8105810:	2b00      	cmp	r3, #0
 8105812:	d005      	beq.n	8105820 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105814:	68fb      	ldr	r3, [r7, #12]
 8105816:	2200      	movs	r2, #0
 8105818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810581c:	2301      	movs	r3, #1
 810581e:	e0a9      	b.n	8105974 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105820:	68fb      	ldr	r3, [r7, #12]
 8105822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105824:	b29b      	uxth	r3, r3
 8105826:	2bff      	cmp	r3, #255	; 0xff
 8105828:	d90e      	bls.n	8105848 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810582a:	68fb      	ldr	r3, [r7, #12]
 810582c:	22ff      	movs	r2, #255	; 0xff
 810582e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105830:	68fb      	ldr	r3, [r7, #12]
 8105832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105834:	b2da      	uxtb	r2, r3
 8105836:	8979      	ldrh	r1, [r7, #10]
 8105838:	2300      	movs	r3, #0
 810583a:	9300      	str	r3, [sp, #0]
 810583c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105840:	68f8      	ldr	r0, [r7, #12]
 8105842:	f000 fd33 	bl	81062ac <I2C_TransferConfig>
 8105846:	e00f      	b.n	8105868 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105848:	68fb      	ldr	r3, [r7, #12]
 810584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810584c:	b29a      	uxth	r2, r3
 810584e:	68fb      	ldr	r3, [r7, #12]
 8105850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105856:	b2da      	uxtb	r2, r3
 8105858:	8979      	ldrh	r1, [r7, #10]
 810585a:	2300      	movs	r3, #0
 810585c:	9300      	str	r3, [sp, #0]
 810585e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105862:	68f8      	ldr	r0, [r7, #12]
 8105864:	f000 fd22 	bl	81062ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105868:	697a      	ldr	r2, [r7, #20]
 810586a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810586c:	68f8      	ldr	r0, [r7, #12]
 810586e:	f000 fbcf 	bl	8106010 <I2C_WaitOnTXISFlagUntilTimeout>
 8105872:	4603      	mov	r3, r0
 8105874:	2b00      	cmp	r3, #0
 8105876:	d001      	beq.n	810587c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8105878:	2301      	movs	r3, #1
 810587a:	e07b      	b.n	8105974 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810587c:	68fb      	ldr	r3, [r7, #12]
 810587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105880:	781a      	ldrb	r2, [r3, #0]
 8105882:	68fb      	ldr	r3, [r7, #12]
 8105884:	681b      	ldr	r3, [r3, #0]
 8105886:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105888:	68fb      	ldr	r3, [r7, #12]
 810588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810588c:	1c5a      	adds	r2, r3, #1
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8105892:	68fb      	ldr	r3, [r7, #12]
 8105894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105896:	b29b      	uxth	r3, r3
 8105898:	3b01      	subs	r3, #1
 810589a:	b29a      	uxth	r2, r3
 810589c:	68fb      	ldr	r3, [r7, #12]
 810589e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81058a0:	68fb      	ldr	r3, [r7, #12]
 81058a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81058a4:	3b01      	subs	r3, #1
 81058a6:	b29a      	uxth	r2, r3
 81058a8:	68fb      	ldr	r3, [r7, #12]
 81058aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81058ac:	68fb      	ldr	r3, [r7, #12]
 81058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81058b0:	b29b      	uxth	r3, r3
 81058b2:	2b00      	cmp	r3, #0
 81058b4:	d034      	beq.n	8105920 <HAL_I2C_Mem_Write+0x1c8>
 81058b6:	68fb      	ldr	r3, [r7, #12]
 81058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81058ba:	2b00      	cmp	r3, #0
 81058bc:	d130      	bne.n	8105920 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81058be:	697b      	ldr	r3, [r7, #20]
 81058c0:	9300      	str	r3, [sp, #0]
 81058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058c4:	2200      	movs	r2, #0
 81058c6:	2180      	movs	r1, #128	; 0x80
 81058c8:	68f8      	ldr	r0, [r7, #12]
 81058ca:	f000 fb61 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 81058ce:	4603      	mov	r3, r0
 81058d0:	2b00      	cmp	r3, #0
 81058d2:	d001      	beq.n	81058d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81058d4:	2301      	movs	r3, #1
 81058d6:	e04d      	b.n	8105974 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81058d8:	68fb      	ldr	r3, [r7, #12]
 81058da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81058dc:	b29b      	uxth	r3, r3
 81058de:	2bff      	cmp	r3, #255	; 0xff
 81058e0:	d90e      	bls.n	8105900 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81058e2:	68fb      	ldr	r3, [r7, #12]
 81058e4:	22ff      	movs	r2, #255	; 0xff
 81058e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81058e8:	68fb      	ldr	r3, [r7, #12]
 81058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81058ec:	b2da      	uxtb	r2, r3
 81058ee:	8979      	ldrh	r1, [r7, #10]
 81058f0:	2300      	movs	r3, #0
 81058f2:	9300      	str	r3, [sp, #0]
 81058f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81058f8:	68f8      	ldr	r0, [r7, #12]
 81058fa:	f000 fcd7 	bl	81062ac <I2C_TransferConfig>
 81058fe:	e00f      	b.n	8105920 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105900:	68fb      	ldr	r3, [r7, #12]
 8105902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105904:	b29a      	uxth	r2, r3
 8105906:	68fb      	ldr	r3, [r7, #12]
 8105908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810590a:	68fb      	ldr	r3, [r7, #12]
 810590c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810590e:	b2da      	uxtb	r2, r3
 8105910:	8979      	ldrh	r1, [r7, #10]
 8105912:	2300      	movs	r3, #0
 8105914:	9300      	str	r3, [sp, #0]
 8105916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810591a:	68f8      	ldr	r0, [r7, #12]
 810591c:	f000 fcc6 	bl	81062ac <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8105920:	68fb      	ldr	r3, [r7, #12]
 8105922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105924:	b29b      	uxth	r3, r3
 8105926:	2b00      	cmp	r3, #0
 8105928:	d19e      	bne.n	8105868 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810592a:	697a      	ldr	r2, [r7, #20]
 810592c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810592e:	68f8      	ldr	r0, [r7, #12]
 8105930:	f000 fbae 	bl	8106090 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105934:	4603      	mov	r3, r0
 8105936:	2b00      	cmp	r3, #0
 8105938:	d001      	beq.n	810593e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810593a:	2301      	movs	r3, #1
 810593c:	e01a      	b.n	8105974 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810593e:	68fb      	ldr	r3, [r7, #12]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	2220      	movs	r2, #32
 8105944:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105946:	68fb      	ldr	r3, [r7, #12]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	6859      	ldr	r1, [r3, #4]
 810594c:	68fb      	ldr	r3, [r7, #12]
 810594e:	681a      	ldr	r2, [r3, #0]
 8105950:	4b0a      	ldr	r3, [pc, #40]	; (810597c <HAL_I2C_Mem_Write+0x224>)
 8105952:	400b      	ands	r3, r1
 8105954:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105956:	68fb      	ldr	r3, [r7, #12]
 8105958:	2220      	movs	r2, #32
 810595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	2200      	movs	r2, #0
 8105962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105966:	68fb      	ldr	r3, [r7, #12]
 8105968:	2200      	movs	r2, #0
 810596a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810596e:	2300      	movs	r3, #0
 8105970:	e000      	b.n	8105974 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8105972:	2302      	movs	r3, #2
  }
}
 8105974:	4618      	mov	r0, r3
 8105976:	3718      	adds	r7, #24
 8105978:	46bd      	mov	sp, r7
 810597a:	bd80      	pop	{r7, pc}
 810597c:	fe00e800 	.word	0xfe00e800

08105980 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105980:	b580      	push	{r7, lr}
 8105982:	b088      	sub	sp, #32
 8105984:	af02      	add	r7, sp, #8
 8105986:	60f8      	str	r0, [r7, #12]
 8105988:	4608      	mov	r0, r1
 810598a:	4611      	mov	r1, r2
 810598c:	461a      	mov	r2, r3
 810598e:	4603      	mov	r3, r0
 8105990:	817b      	strh	r3, [r7, #10]
 8105992:	460b      	mov	r3, r1
 8105994:	813b      	strh	r3, [r7, #8]
 8105996:	4613      	mov	r3, r2
 8105998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810599a:	68fb      	ldr	r3, [r7, #12]
 810599c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81059a0:	b2db      	uxtb	r3, r3
 81059a2:	2b20      	cmp	r3, #32
 81059a4:	f040 80fd 	bne.w	8105ba2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81059a8:	6a3b      	ldr	r3, [r7, #32]
 81059aa:	2b00      	cmp	r3, #0
 81059ac:	d002      	beq.n	81059b4 <HAL_I2C_Mem_Read+0x34>
 81059ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81059b0:	2b00      	cmp	r3, #0
 81059b2:	d105      	bne.n	81059c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81059b4:	68fb      	ldr	r3, [r7, #12]
 81059b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81059ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81059bc:	2301      	movs	r3, #1
 81059be:	e0f1      	b.n	8105ba4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81059c0:	68fb      	ldr	r3, [r7, #12]
 81059c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81059c6:	2b01      	cmp	r3, #1
 81059c8:	d101      	bne.n	81059ce <HAL_I2C_Mem_Read+0x4e>
 81059ca:	2302      	movs	r3, #2
 81059cc:	e0ea      	b.n	8105ba4 <HAL_I2C_Mem_Read+0x224>
 81059ce:	68fb      	ldr	r3, [r7, #12]
 81059d0:	2201      	movs	r2, #1
 81059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81059d6:	f7fc fc97 	bl	8102308 <HAL_GetTick>
 81059da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81059dc:	697b      	ldr	r3, [r7, #20]
 81059de:	9300      	str	r3, [sp, #0]
 81059e0:	2319      	movs	r3, #25
 81059e2:	2201      	movs	r2, #1
 81059e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81059e8:	68f8      	ldr	r0, [r7, #12]
 81059ea:	f000 fad1 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 81059ee:	4603      	mov	r3, r0
 81059f0:	2b00      	cmp	r3, #0
 81059f2:	d001      	beq.n	81059f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81059f4:	2301      	movs	r3, #1
 81059f6:	e0d5      	b.n	8105ba4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81059f8:	68fb      	ldr	r3, [r7, #12]
 81059fa:	2222      	movs	r2, #34	; 0x22
 81059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8105a00:	68fb      	ldr	r3, [r7, #12]
 8105a02:	2240      	movs	r2, #64	; 0x40
 8105a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105a08:	68fb      	ldr	r3, [r7, #12]
 8105a0a:	2200      	movs	r2, #0
 8105a0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105a0e:	68fb      	ldr	r3, [r7, #12]
 8105a10:	6a3a      	ldr	r2, [r7, #32]
 8105a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8105a14:	68fb      	ldr	r3, [r7, #12]
 8105a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8105a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105a1a:	68fb      	ldr	r3, [r7, #12]
 8105a1c:	2200      	movs	r2, #0
 8105a1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105a20:	88f8      	ldrh	r0, [r7, #6]
 8105a22:	893a      	ldrh	r2, [r7, #8]
 8105a24:	8979      	ldrh	r1, [r7, #10]
 8105a26:	697b      	ldr	r3, [r7, #20]
 8105a28:	9301      	str	r3, [sp, #4]
 8105a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105a2c:	9300      	str	r3, [sp, #0]
 8105a2e:	4603      	mov	r3, r0
 8105a30:	68f8      	ldr	r0, [r7, #12]
 8105a32:	f000 fa35 	bl	8105ea0 <I2C_RequestMemoryRead>
 8105a36:	4603      	mov	r3, r0
 8105a38:	2b00      	cmp	r3, #0
 8105a3a:	d005      	beq.n	8105a48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105a3c:	68fb      	ldr	r3, [r7, #12]
 8105a3e:	2200      	movs	r2, #0
 8105a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105a44:	2301      	movs	r3, #1
 8105a46:	e0ad      	b.n	8105ba4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105a48:	68fb      	ldr	r3, [r7, #12]
 8105a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105a4c:	b29b      	uxth	r3, r3
 8105a4e:	2bff      	cmp	r3, #255	; 0xff
 8105a50:	d90e      	bls.n	8105a70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105a52:	68fb      	ldr	r3, [r7, #12]
 8105a54:	22ff      	movs	r2, #255	; 0xff
 8105a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8105a58:	68fb      	ldr	r3, [r7, #12]
 8105a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105a5c:	b2da      	uxtb	r2, r3
 8105a5e:	8979      	ldrh	r1, [r7, #10]
 8105a60:	4b52      	ldr	r3, [pc, #328]	; (8105bac <HAL_I2C_Mem_Read+0x22c>)
 8105a62:	9300      	str	r3, [sp, #0]
 8105a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105a68:	68f8      	ldr	r0, [r7, #12]
 8105a6a:	f000 fc1f 	bl	81062ac <I2C_TransferConfig>
 8105a6e:	e00f      	b.n	8105a90 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105a70:	68fb      	ldr	r3, [r7, #12]
 8105a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105a74:	b29a      	uxth	r2, r3
 8105a76:	68fb      	ldr	r3, [r7, #12]
 8105a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8105a7a:	68fb      	ldr	r3, [r7, #12]
 8105a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105a7e:	b2da      	uxtb	r2, r3
 8105a80:	8979      	ldrh	r1, [r7, #10]
 8105a82:	4b4a      	ldr	r3, [pc, #296]	; (8105bac <HAL_I2C_Mem_Read+0x22c>)
 8105a84:	9300      	str	r3, [sp, #0]
 8105a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105a8a:	68f8      	ldr	r0, [r7, #12]
 8105a8c:	f000 fc0e 	bl	81062ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8105a90:	697b      	ldr	r3, [r7, #20]
 8105a92:	9300      	str	r3, [sp, #0]
 8105a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105a96:	2200      	movs	r2, #0
 8105a98:	2104      	movs	r1, #4
 8105a9a:	68f8      	ldr	r0, [r7, #12]
 8105a9c:	f000 fa78 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 8105aa0:	4603      	mov	r3, r0
 8105aa2:	2b00      	cmp	r3, #0
 8105aa4:	d001      	beq.n	8105aaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8105aa6:	2301      	movs	r3, #1
 8105aa8:	e07c      	b.n	8105ba4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105aaa:	68fb      	ldr	r3, [r7, #12]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105ab0:	68fb      	ldr	r3, [r7, #12]
 8105ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ab4:	b2d2      	uxtb	r2, r2
 8105ab6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105ab8:	68fb      	ldr	r3, [r7, #12]
 8105aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105abc:	1c5a      	adds	r2, r3, #1
 8105abe:	68fb      	ldr	r3, [r7, #12]
 8105ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105ac2:	68fb      	ldr	r3, [r7, #12]
 8105ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105ac6:	3b01      	subs	r3, #1
 8105ac8:	b29a      	uxth	r2, r3
 8105aca:	68fb      	ldr	r3, [r7, #12]
 8105acc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105ace:	68fb      	ldr	r3, [r7, #12]
 8105ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105ad2:	b29b      	uxth	r3, r3
 8105ad4:	3b01      	subs	r3, #1
 8105ad6:	b29a      	uxth	r2, r3
 8105ad8:	68fb      	ldr	r3, [r7, #12]
 8105ada:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105adc:	68fb      	ldr	r3, [r7, #12]
 8105ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105ae0:	b29b      	uxth	r3, r3
 8105ae2:	2b00      	cmp	r3, #0
 8105ae4:	d034      	beq.n	8105b50 <HAL_I2C_Mem_Read+0x1d0>
 8105ae6:	68fb      	ldr	r3, [r7, #12]
 8105ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105aea:	2b00      	cmp	r3, #0
 8105aec:	d130      	bne.n	8105b50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105aee:	697b      	ldr	r3, [r7, #20]
 8105af0:	9300      	str	r3, [sp, #0]
 8105af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105af4:	2200      	movs	r2, #0
 8105af6:	2180      	movs	r1, #128	; 0x80
 8105af8:	68f8      	ldr	r0, [r7, #12]
 8105afa:	f000 fa49 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 8105afe:	4603      	mov	r3, r0
 8105b00:	2b00      	cmp	r3, #0
 8105b02:	d001      	beq.n	8105b08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8105b04:	2301      	movs	r3, #1
 8105b06:	e04d      	b.n	8105ba4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105b08:	68fb      	ldr	r3, [r7, #12]
 8105b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b0c:	b29b      	uxth	r3, r3
 8105b0e:	2bff      	cmp	r3, #255	; 0xff
 8105b10:	d90e      	bls.n	8105b30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105b12:	68fb      	ldr	r3, [r7, #12]
 8105b14:	22ff      	movs	r2, #255	; 0xff
 8105b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105b18:	68fb      	ldr	r3, [r7, #12]
 8105b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105b1c:	b2da      	uxtb	r2, r3
 8105b1e:	8979      	ldrh	r1, [r7, #10]
 8105b20:	2300      	movs	r3, #0
 8105b22:	9300      	str	r3, [sp, #0]
 8105b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105b28:	68f8      	ldr	r0, [r7, #12]
 8105b2a:	f000 fbbf 	bl	81062ac <I2C_TransferConfig>
 8105b2e:	e00f      	b.n	8105b50 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105b30:	68fb      	ldr	r3, [r7, #12]
 8105b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b34:	b29a      	uxth	r2, r3
 8105b36:	68fb      	ldr	r3, [r7, #12]
 8105b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105b3a:	68fb      	ldr	r3, [r7, #12]
 8105b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105b3e:	b2da      	uxtb	r2, r3
 8105b40:	8979      	ldrh	r1, [r7, #10]
 8105b42:	2300      	movs	r3, #0
 8105b44:	9300      	str	r3, [sp, #0]
 8105b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105b4a:	68f8      	ldr	r0, [r7, #12]
 8105b4c:	f000 fbae 	bl	81062ac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8105b50:	68fb      	ldr	r3, [r7, #12]
 8105b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b54:	b29b      	uxth	r3, r3
 8105b56:	2b00      	cmp	r3, #0
 8105b58:	d19a      	bne.n	8105a90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105b5a:	697a      	ldr	r2, [r7, #20]
 8105b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105b5e:	68f8      	ldr	r0, [r7, #12]
 8105b60:	f000 fa96 	bl	8106090 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105b64:	4603      	mov	r3, r0
 8105b66:	2b00      	cmp	r3, #0
 8105b68:	d001      	beq.n	8105b6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8105b6a:	2301      	movs	r3, #1
 8105b6c:	e01a      	b.n	8105ba4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105b6e:	68fb      	ldr	r3, [r7, #12]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	2220      	movs	r2, #32
 8105b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105b76:	68fb      	ldr	r3, [r7, #12]
 8105b78:	681b      	ldr	r3, [r3, #0]
 8105b7a:	6859      	ldr	r1, [r3, #4]
 8105b7c:	68fb      	ldr	r3, [r7, #12]
 8105b7e:	681a      	ldr	r2, [r3, #0]
 8105b80:	4b0b      	ldr	r3, [pc, #44]	; (8105bb0 <HAL_I2C_Mem_Read+0x230>)
 8105b82:	400b      	ands	r3, r1
 8105b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105b86:	68fb      	ldr	r3, [r7, #12]
 8105b88:	2220      	movs	r2, #32
 8105b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105b8e:	68fb      	ldr	r3, [r7, #12]
 8105b90:	2200      	movs	r2, #0
 8105b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105b96:	68fb      	ldr	r3, [r7, #12]
 8105b98:	2200      	movs	r2, #0
 8105b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105b9e:	2300      	movs	r3, #0
 8105ba0:	e000      	b.n	8105ba4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8105ba2:	2302      	movs	r3, #2
  }
}
 8105ba4:	4618      	mov	r0, r3
 8105ba6:	3718      	adds	r7, #24
 8105ba8:	46bd      	mov	sp, r7
 8105baa:	bd80      	pop	{r7, pc}
 8105bac:	80002400 	.word	0x80002400
 8105bb0:	fe00e800 	.word	0xfe00e800

08105bb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8105bb4:	b580      	push	{r7, lr}
 8105bb6:	b08a      	sub	sp, #40	; 0x28
 8105bb8:	af02      	add	r7, sp, #8
 8105bba:	60f8      	str	r0, [r7, #12]
 8105bbc:	607a      	str	r2, [r7, #4]
 8105bbe:	603b      	str	r3, [r7, #0]
 8105bc0:	460b      	mov	r3, r1
 8105bc2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8105bc4:	2300      	movs	r3, #0
 8105bc6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105bc8:	68fb      	ldr	r3, [r7, #12]
 8105bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105bce:	b2db      	uxtb	r3, r3
 8105bd0:	2b20      	cmp	r3, #32
 8105bd2:	f040 80f1 	bne.w	8105db8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8105bd6:	68fb      	ldr	r3, [r7, #12]
 8105bd8:	681b      	ldr	r3, [r3, #0]
 8105bda:	699b      	ldr	r3, [r3, #24]
 8105bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105be4:	d101      	bne.n	8105bea <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8105be6:	2302      	movs	r3, #2
 8105be8:	e0e7      	b.n	8105dba <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105bea:	68fb      	ldr	r3, [r7, #12]
 8105bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105bf0:	2b01      	cmp	r3, #1
 8105bf2:	d101      	bne.n	8105bf8 <HAL_I2C_IsDeviceReady+0x44>
 8105bf4:	2302      	movs	r3, #2
 8105bf6:	e0e0      	b.n	8105dba <HAL_I2C_IsDeviceReady+0x206>
 8105bf8:	68fb      	ldr	r3, [r7, #12]
 8105bfa:	2201      	movs	r2, #1
 8105bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105c00:	68fb      	ldr	r3, [r7, #12]
 8105c02:	2224      	movs	r2, #36	; 0x24
 8105c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105c08:	68fb      	ldr	r3, [r7, #12]
 8105c0a:	2200      	movs	r2, #0
 8105c0c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8105c0e:	68fb      	ldr	r3, [r7, #12]
 8105c10:	68db      	ldr	r3, [r3, #12]
 8105c12:	2b01      	cmp	r3, #1
 8105c14:	d107      	bne.n	8105c26 <HAL_I2C_IsDeviceReady+0x72>
 8105c16:	897b      	ldrh	r3, [r7, #10]
 8105c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8105c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8105c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8105c24:	e004      	b.n	8105c30 <HAL_I2C_IsDeviceReady+0x7c>
 8105c26:	897b      	ldrh	r3, [r7, #10]
 8105c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8105c2c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8105c30:	68fa      	ldr	r2, [r7, #12]
 8105c32:	6812      	ldr	r2, [r2, #0]
 8105c34:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8105c36:	f7fc fb67 	bl	8102308 <HAL_GetTick>
 8105c3a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8105c3c:	68fb      	ldr	r3, [r7, #12]
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	699b      	ldr	r3, [r3, #24]
 8105c42:	f003 0320 	and.w	r3, r3, #32
 8105c46:	2b20      	cmp	r3, #32
 8105c48:	bf0c      	ite	eq
 8105c4a:	2301      	moveq	r3, #1
 8105c4c:	2300      	movne	r3, #0
 8105c4e:	b2db      	uxtb	r3, r3
 8105c50:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8105c52:	68fb      	ldr	r3, [r7, #12]
 8105c54:	681b      	ldr	r3, [r3, #0]
 8105c56:	699b      	ldr	r3, [r3, #24]
 8105c58:	f003 0310 	and.w	r3, r3, #16
 8105c5c:	2b10      	cmp	r3, #16
 8105c5e:	bf0c      	ite	eq
 8105c60:	2301      	moveq	r3, #1
 8105c62:	2300      	movne	r3, #0
 8105c64:	b2db      	uxtb	r3, r3
 8105c66:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8105c68:	e034      	b.n	8105cd4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8105c6a:	683b      	ldr	r3, [r7, #0]
 8105c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105c70:	d01a      	beq.n	8105ca8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8105c72:	f7fc fb49 	bl	8102308 <HAL_GetTick>
 8105c76:	4602      	mov	r2, r0
 8105c78:	69bb      	ldr	r3, [r7, #24]
 8105c7a:	1ad3      	subs	r3, r2, r3
 8105c7c:	683a      	ldr	r2, [r7, #0]
 8105c7e:	429a      	cmp	r2, r3
 8105c80:	d302      	bcc.n	8105c88 <HAL_I2C_IsDeviceReady+0xd4>
 8105c82:	683b      	ldr	r3, [r7, #0]
 8105c84:	2b00      	cmp	r3, #0
 8105c86:	d10f      	bne.n	8105ca8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8105c88:	68fb      	ldr	r3, [r7, #12]
 8105c8a:	2220      	movs	r2, #32
 8105c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105c90:	68fb      	ldr	r3, [r7, #12]
 8105c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c94:	f043 0220 	orr.w	r2, r3, #32
 8105c98:	68fb      	ldr	r3, [r7, #12]
 8105c9a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8105c9c:	68fb      	ldr	r3, [r7, #12]
 8105c9e:	2200      	movs	r2, #0
 8105ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8105ca4:	2301      	movs	r3, #1
 8105ca6:	e088      	b.n	8105dba <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8105ca8:	68fb      	ldr	r3, [r7, #12]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	699b      	ldr	r3, [r3, #24]
 8105cae:	f003 0320 	and.w	r3, r3, #32
 8105cb2:	2b20      	cmp	r3, #32
 8105cb4:	bf0c      	ite	eq
 8105cb6:	2301      	moveq	r3, #1
 8105cb8:	2300      	movne	r3, #0
 8105cba:	b2db      	uxtb	r3, r3
 8105cbc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8105cbe:	68fb      	ldr	r3, [r7, #12]
 8105cc0:	681b      	ldr	r3, [r3, #0]
 8105cc2:	699b      	ldr	r3, [r3, #24]
 8105cc4:	f003 0310 	and.w	r3, r3, #16
 8105cc8:	2b10      	cmp	r3, #16
 8105cca:	bf0c      	ite	eq
 8105ccc:	2301      	moveq	r3, #1
 8105cce:	2300      	movne	r3, #0
 8105cd0:	b2db      	uxtb	r3, r3
 8105cd2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8105cd4:	7ffb      	ldrb	r3, [r7, #31]
 8105cd6:	2b00      	cmp	r3, #0
 8105cd8:	d102      	bne.n	8105ce0 <HAL_I2C_IsDeviceReady+0x12c>
 8105cda:	7fbb      	ldrb	r3, [r7, #30]
 8105cdc:	2b00      	cmp	r3, #0
 8105cde:	d0c4      	beq.n	8105c6a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8105ce0:	68fb      	ldr	r3, [r7, #12]
 8105ce2:	681b      	ldr	r3, [r3, #0]
 8105ce4:	699b      	ldr	r3, [r3, #24]
 8105ce6:	f003 0310 	and.w	r3, r3, #16
 8105cea:	2b10      	cmp	r3, #16
 8105cec:	d01a      	beq.n	8105d24 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8105cee:	69bb      	ldr	r3, [r7, #24]
 8105cf0:	9300      	str	r3, [sp, #0]
 8105cf2:	683b      	ldr	r3, [r7, #0]
 8105cf4:	2200      	movs	r2, #0
 8105cf6:	2120      	movs	r1, #32
 8105cf8:	68f8      	ldr	r0, [r7, #12]
 8105cfa:	f000 f949 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 8105cfe:	4603      	mov	r3, r0
 8105d00:	2b00      	cmp	r3, #0
 8105d02:	d001      	beq.n	8105d08 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8105d04:	2301      	movs	r3, #1
 8105d06:	e058      	b.n	8105dba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105d08:	68fb      	ldr	r3, [r7, #12]
 8105d0a:	681b      	ldr	r3, [r3, #0]
 8105d0c:	2220      	movs	r2, #32
 8105d0e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8105d10:	68fb      	ldr	r3, [r7, #12]
 8105d12:	2220      	movs	r2, #32
 8105d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105d18:	68fb      	ldr	r3, [r7, #12]
 8105d1a:	2200      	movs	r2, #0
 8105d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8105d20:	2300      	movs	r3, #0
 8105d22:	e04a      	b.n	8105dba <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8105d24:	69bb      	ldr	r3, [r7, #24]
 8105d26:	9300      	str	r3, [sp, #0]
 8105d28:	683b      	ldr	r3, [r7, #0]
 8105d2a:	2200      	movs	r2, #0
 8105d2c:	2120      	movs	r1, #32
 8105d2e:	68f8      	ldr	r0, [r7, #12]
 8105d30:	f000 f92e 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 8105d34:	4603      	mov	r3, r0
 8105d36:	2b00      	cmp	r3, #0
 8105d38:	d001      	beq.n	8105d3e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8105d3a:	2301      	movs	r3, #1
 8105d3c:	e03d      	b.n	8105dba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105d3e:	68fb      	ldr	r3, [r7, #12]
 8105d40:	681b      	ldr	r3, [r3, #0]
 8105d42:	2210      	movs	r2, #16
 8105d44:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105d46:	68fb      	ldr	r3, [r7, #12]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	2220      	movs	r2, #32
 8105d4c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8105d4e:	697b      	ldr	r3, [r7, #20]
 8105d50:	687a      	ldr	r2, [r7, #4]
 8105d52:	429a      	cmp	r2, r3
 8105d54:	d118      	bne.n	8105d88 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8105d56:	68fb      	ldr	r3, [r7, #12]
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	685a      	ldr	r2, [r3, #4]
 8105d5c:	68fb      	ldr	r3, [r7, #12]
 8105d5e:	681b      	ldr	r3, [r3, #0]
 8105d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105d64:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8105d66:	69bb      	ldr	r3, [r7, #24]
 8105d68:	9300      	str	r3, [sp, #0]
 8105d6a:	683b      	ldr	r3, [r7, #0]
 8105d6c:	2200      	movs	r2, #0
 8105d6e:	2120      	movs	r1, #32
 8105d70:	68f8      	ldr	r0, [r7, #12]
 8105d72:	f000 f90d 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 8105d76:	4603      	mov	r3, r0
 8105d78:	2b00      	cmp	r3, #0
 8105d7a:	d001      	beq.n	8105d80 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8105d7c:	2301      	movs	r3, #1
 8105d7e:	e01c      	b.n	8105dba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105d80:	68fb      	ldr	r3, [r7, #12]
 8105d82:	681b      	ldr	r3, [r3, #0]
 8105d84:	2220      	movs	r2, #32
 8105d86:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8105d88:	697b      	ldr	r3, [r7, #20]
 8105d8a:	3301      	adds	r3, #1
 8105d8c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8105d8e:	697b      	ldr	r3, [r7, #20]
 8105d90:	687a      	ldr	r2, [r7, #4]
 8105d92:	429a      	cmp	r2, r3
 8105d94:	f63f af3b 	bhi.w	8105c0e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8105d98:	68fb      	ldr	r3, [r7, #12]
 8105d9a:	2220      	movs	r2, #32
 8105d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105da0:	68fb      	ldr	r3, [r7, #12]
 8105da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105da4:	f043 0220 	orr.w	r2, r3, #32
 8105da8:	68fb      	ldr	r3, [r7, #12]
 8105daa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105dac:	68fb      	ldr	r3, [r7, #12]
 8105dae:	2200      	movs	r2, #0
 8105db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8105db4:	2301      	movs	r3, #1
 8105db6:	e000      	b.n	8105dba <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8105db8:	2302      	movs	r3, #2
  }
}
 8105dba:	4618      	mov	r0, r3
 8105dbc:	3720      	adds	r7, #32
 8105dbe:	46bd      	mov	sp, r7
 8105dc0:	bd80      	pop	{r7, pc}

08105dc2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8105dc2:	b480      	push	{r7}
 8105dc4:	b083      	sub	sp, #12
 8105dc6:	af00      	add	r7, sp, #0
 8105dc8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105dd0:	b2db      	uxtb	r3, r3
}
 8105dd2:	4618      	mov	r0, r3
 8105dd4:	370c      	adds	r7, #12
 8105dd6:	46bd      	mov	sp, r7
 8105dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ddc:	4770      	bx	lr

08105dde <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8105dde:	b480      	push	{r7}
 8105de0:	b083      	sub	sp, #12
 8105de2:	af00      	add	r7, sp, #0
 8105de4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8105dea:	4618      	mov	r0, r3
 8105dec:	370c      	adds	r7, #12
 8105dee:	46bd      	mov	sp, r7
 8105df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105df4:	4770      	bx	lr
	...

08105df8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105df8:	b580      	push	{r7, lr}
 8105dfa:	b086      	sub	sp, #24
 8105dfc:	af02      	add	r7, sp, #8
 8105dfe:	60f8      	str	r0, [r7, #12]
 8105e00:	4608      	mov	r0, r1
 8105e02:	4611      	mov	r1, r2
 8105e04:	461a      	mov	r2, r3
 8105e06:	4603      	mov	r3, r0
 8105e08:	817b      	strh	r3, [r7, #10]
 8105e0a:	460b      	mov	r3, r1
 8105e0c:	813b      	strh	r3, [r7, #8]
 8105e0e:	4613      	mov	r3, r2
 8105e10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105e12:	88fb      	ldrh	r3, [r7, #6]
 8105e14:	b2da      	uxtb	r2, r3
 8105e16:	8979      	ldrh	r1, [r7, #10]
 8105e18:	4b20      	ldr	r3, [pc, #128]	; (8105e9c <I2C_RequestMemoryWrite+0xa4>)
 8105e1a:	9300      	str	r3, [sp, #0]
 8105e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105e20:	68f8      	ldr	r0, [r7, #12]
 8105e22:	f000 fa43 	bl	81062ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105e26:	69fa      	ldr	r2, [r7, #28]
 8105e28:	69b9      	ldr	r1, [r7, #24]
 8105e2a:	68f8      	ldr	r0, [r7, #12]
 8105e2c:	f000 f8f0 	bl	8106010 <I2C_WaitOnTXISFlagUntilTimeout>
 8105e30:	4603      	mov	r3, r0
 8105e32:	2b00      	cmp	r3, #0
 8105e34:	d001      	beq.n	8105e3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8105e36:	2301      	movs	r3, #1
 8105e38:	e02c      	b.n	8105e94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105e3a:	88fb      	ldrh	r3, [r7, #6]
 8105e3c:	2b01      	cmp	r3, #1
 8105e3e:	d105      	bne.n	8105e4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105e40:	893b      	ldrh	r3, [r7, #8]
 8105e42:	b2da      	uxtb	r2, r3
 8105e44:	68fb      	ldr	r3, [r7, #12]
 8105e46:	681b      	ldr	r3, [r3, #0]
 8105e48:	629a      	str	r2, [r3, #40]	; 0x28
 8105e4a:	e015      	b.n	8105e78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105e4c:	893b      	ldrh	r3, [r7, #8]
 8105e4e:	0a1b      	lsrs	r3, r3, #8
 8105e50:	b29b      	uxth	r3, r3
 8105e52:	b2da      	uxtb	r2, r3
 8105e54:	68fb      	ldr	r3, [r7, #12]
 8105e56:	681b      	ldr	r3, [r3, #0]
 8105e58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105e5a:	69fa      	ldr	r2, [r7, #28]
 8105e5c:	69b9      	ldr	r1, [r7, #24]
 8105e5e:	68f8      	ldr	r0, [r7, #12]
 8105e60:	f000 f8d6 	bl	8106010 <I2C_WaitOnTXISFlagUntilTimeout>
 8105e64:	4603      	mov	r3, r0
 8105e66:	2b00      	cmp	r3, #0
 8105e68:	d001      	beq.n	8105e6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8105e6a:	2301      	movs	r3, #1
 8105e6c:	e012      	b.n	8105e94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105e6e:	893b      	ldrh	r3, [r7, #8]
 8105e70:	b2da      	uxtb	r2, r3
 8105e72:	68fb      	ldr	r3, [r7, #12]
 8105e74:	681b      	ldr	r3, [r3, #0]
 8105e76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105e78:	69fb      	ldr	r3, [r7, #28]
 8105e7a:	9300      	str	r3, [sp, #0]
 8105e7c:	69bb      	ldr	r3, [r7, #24]
 8105e7e:	2200      	movs	r2, #0
 8105e80:	2180      	movs	r1, #128	; 0x80
 8105e82:	68f8      	ldr	r0, [r7, #12]
 8105e84:	f000 f884 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 8105e88:	4603      	mov	r3, r0
 8105e8a:	2b00      	cmp	r3, #0
 8105e8c:	d001      	beq.n	8105e92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8105e8e:	2301      	movs	r3, #1
 8105e90:	e000      	b.n	8105e94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8105e92:	2300      	movs	r3, #0
}
 8105e94:	4618      	mov	r0, r3
 8105e96:	3710      	adds	r7, #16
 8105e98:	46bd      	mov	sp, r7
 8105e9a:	bd80      	pop	{r7, pc}
 8105e9c:	80002000 	.word	0x80002000

08105ea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105ea0:	b580      	push	{r7, lr}
 8105ea2:	b086      	sub	sp, #24
 8105ea4:	af02      	add	r7, sp, #8
 8105ea6:	60f8      	str	r0, [r7, #12]
 8105ea8:	4608      	mov	r0, r1
 8105eaa:	4611      	mov	r1, r2
 8105eac:	461a      	mov	r2, r3
 8105eae:	4603      	mov	r3, r0
 8105eb0:	817b      	strh	r3, [r7, #10]
 8105eb2:	460b      	mov	r3, r1
 8105eb4:	813b      	strh	r3, [r7, #8]
 8105eb6:	4613      	mov	r3, r2
 8105eb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8105eba:	88fb      	ldrh	r3, [r7, #6]
 8105ebc:	b2da      	uxtb	r2, r3
 8105ebe:	8979      	ldrh	r1, [r7, #10]
 8105ec0:	4b20      	ldr	r3, [pc, #128]	; (8105f44 <I2C_RequestMemoryRead+0xa4>)
 8105ec2:	9300      	str	r3, [sp, #0]
 8105ec4:	2300      	movs	r3, #0
 8105ec6:	68f8      	ldr	r0, [r7, #12]
 8105ec8:	f000 f9f0 	bl	81062ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105ecc:	69fa      	ldr	r2, [r7, #28]
 8105ece:	69b9      	ldr	r1, [r7, #24]
 8105ed0:	68f8      	ldr	r0, [r7, #12]
 8105ed2:	f000 f89d 	bl	8106010 <I2C_WaitOnTXISFlagUntilTimeout>
 8105ed6:	4603      	mov	r3, r0
 8105ed8:	2b00      	cmp	r3, #0
 8105eda:	d001      	beq.n	8105ee0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8105edc:	2301      	movs	r3, #1
 8105ede:	e02c      	b.n	8105f3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105ee0:	88fb      	ldrh	r3, [r7, #6]
 8105ee2:	2b01      	cmp	r3, #1
 8105ee4:	d105      	bne.n	8105ef2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105ee6:	893b      	ldrh	r3, [r7, #8]
 8105ee8:	b2da      	uxtb	r2, r3
 8105eea:	68fb      	ldr	r3, [r7, #12]
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	629a      	str	r2, [r3, #40]	; 0x28
 8105ef0:	e015      	b.n	8105f1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105ef2:	893b      	ldrh	r3, [r7, #8]
 8105ef4:	0a1b      	lsrs	r3, r3, #8
 8105ef6:	b29b      	uxth	r3, r3
 8105ef8:	b2da      	uxtb	r2, r3
 8105efa:	68fb      	ldr	r3, [r7, #12]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105f00:	69fa      	ldr	r2, [r7, #28]
 8105f02:	69b9      	ldr	r1, [r7, #24]
 8105f04:	68f8      	ldr	r0, [r7, #12]
 8105f06:	f000 f883 	bl	8106010 <I2C_WaitOnTXISFlagUntilTimeout>
 8105f0a:	4603      	mov	r3, r0
 8105f0c:	2b00      	cmp	r3, #0
 8105f0e:	d001      	beq.n	8105f14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8105f10:	2301      	movs	r3, #1
 8105f12:	e012      	b.n	8105f3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105f14:	893b      	ldrh	r3, [r7, #8]
 8105f16:	b2da      	uxtb	r2, r3
 8105f18:	68fb      	ldr	r3, [r7, #12]
 8105f1a:	681b      	ldr	r3, [r3, #0]
 8105f1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8105f1e:	69fb      	ldr	r3, [r7, #28]
 8105f20:	9300      	str	r3, [sp, #0]
 8105f22:	69bb      	ldr	r3, [r7, #24]
 8105f24:	2200      	movs	r2, #0
 8105f26:	2140      	movs	r1, #64	; 0x40
 8105f28:	68f8      	ldr	r0, [r7, #12]
 8105f2a:	f000 f831 	bl	8105f90 <I2C_WaitOnFlagUntilTimeout>
 8105f2e:	4603      	mov	r3, r0
 8105f30:	2b00      	cmp	r3, #0
 8105f32:	d001      	beq.n	8105f38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8105f34:	2301      	movs	r3, #1
 8105f36:	e000      	b.n	8105f3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8105f38:	2300      	movs	r3, #0
}
 8105f3a:	4618      	mov	r0, r3
 8105f3c:	3710      	adds	r7, #16
 8105f3e:	46bd      	mov	sp, r7
 8105f40:	bd80      	pop	{r7, pc}
 8105f42:	bf00      	nop
 8105f44:	80002000 	.word	0x80002000

08105f48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105f48:	b480      	push	{r7}
 8105f4a:	b083      	sub	sp, #12
 8105f4c:	af00      	add	r7, sp, #0
 8105f4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	681b      	ldr	r3, [r3, #0]
 8105f54:	699b      	ldr	r3, [r3, #24]
 8105f56:	f003 0302 	and.w	r3, r3, #2
 8105f5a:	2b02      	cmp	r3, #2
 8105f5c:	d103      	bne.n	8105f66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105f5e:	687b      	ldr	r3, [r7, #4]
 8105f60:	681b      	ldr	r3, [r3, #0]
 8105f62:	2200      	movs	r2, #0
 8105f64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	681b      	ldr	r3, [r3, #0]
 8105f6a:	699b      	ldr	r3, [r3, #24]
 8105f6c:	f003 0301 	and.w	r3, r3, #1
 8105f70:	2b01      	cmp	r3, #1
 8105f72:	d007      	beq.n	8105f84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	681b      	ldr	r3, [r3, #0]
 8105f78:	699a      	ldr	r2, [r3, #24]
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	681b      	ldr	r3, [r3, #0]
 8105f7e:	f042 0201 	orr.w	r2, r2, #1
 8105f82:	619a      	str	r2, [r3, #24]
  }
}
 8105f84:	bf00      	nop
 8105f86:	370c      	adds	r7, #12
 8105f88:	46bd      	mov	sp, r7
 8105f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f8e:	4770      	bx	lr

08105f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8105f90:	b580      	push	{r7, lr}
 8105f92:	b084      	sub	sp, #16
 8105f94:	af00      	add	r7, sp, #0
 8105f96:	60f8      	str	r0, [r7, #12]
 8105f98:	60b9      	str	r1, [r7, #8]
 8105f9a:	603b      	str	r3, [r7, #0]
 8105f9c:	4613      	mov	r3, r2
 8105f9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105fa0:	e022      	b.n	8105fe8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105fa2:	683b      	ldr	r3, [r7, #0]
 8105fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105fa8:	d01e      	beq.n	8105fe8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105faa:	f7fc f9ad 	bl	8102308 <HAL_GetTick>
 8105fae:	4602      	mov	r2, r0
 8105fb0:	69bb      	ldr	r3, [r7, #24]
 8105fb2:	1ad3      	subs	r3, r2, r3
 8105fb4:	683a      	ldr	r2, [r7, #0]
 8105fb6:	429a      	cmp	r2, r3
 8105fb8:	d302      	bcc.n	8105fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8105fba:	683b      	ldr	r3, [r7, #0]
 8105fbc:	2b00      	cmp	r3, #0
 8105fbe:	d113      	bne.n	8105fe8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105fc0:	68fb      	ldr	r3, [r7, #12]
 8105fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105fc4:	f043 0220 	orr.w	r2, r3, #32
 8105fc8:	68fb      	ldr	r3, [r7, #12]
 8105fca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105fcc:	68fb      	ldr	r3, [r7, #12]
 8105fce:	2220      	movs	r2, #32
 8105fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105fd4:	68fb      	ldr	r3, [r7, #12]
 8105fd6:	2200      	movs	r2, #0
 8105fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105fdc:	68fb      	ldr	r3, [r7, #12]
 8105fde:	2200      	movs	r2, #0
 8105fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105fe4:	2301      	movs	r3, #1
 8105fe6:	e00f      	b.n	8106008 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105fe8:	68fb      	ldr	r3, [r7, #12]
 8105fea:	681b      	ldr	r3, [r3, #0]
 8105fec:	699a      	ldr	r2, [r3, #24]
 8105fee:	68bb      	ldr	r3, [r7, #8]
 8105ff0:	4013      	ands	r3, r2
 8105ff2:	68ba      	ldr	r2, [r7, #8]
 8105ff4:	429a      	cmp	r2, r3
 8105ff6:	bf0c      	ite	eq
 8105ff8:	2301      	moveq	r3, #1
 8105ffa:	2300      	movne	r3, #0
 8105ffc:	b2db      	uxtb	r3, r3
 8105ffe:	461a      	mov	r2, r3
 8106000:	79fb      	ldrb	r3, [r7, #7]
 8106002:	429a      	cmp	r2, r3
 8106004:	d0cd      	beq.n	8105fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8106006:	2300      	movs	r3, #0
}
 8106008:	4618      	mov	r0, r3
 810600a:	3710      	adds	r7, #16
 810600c:	46bd      	mov	sp, r7
 810600e:	bd80      	pop	{r7, pc}

08106010 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8106010:	b580      	push	{r7, lr}
 8106012:	b084      	sub	sp, #16
 8106014:	af00      	add	r7, sp, #0
 8106016:	60f8      	str	r0, [r7, #12]
 8106018:	60b9      	str	r1, [r7, #8]
 810601a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810601c:	e02c      	b.n	8106078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810601e:	687a      	ldr	r2, [r7, #4]
 8106020:	68b9      	ldr	r1, [r7, #8]
 8106022:	68f8      	ldr	r0, [r7, #12]
 8106024:	f000 f8dc 	bl	81061e0 <I2C_IsAcknowledgeFailed>
 8106028:	4603      	mov	r3, r0
 810602a:	2b00      	cmp	r3, #0
 810602c:	d001      	beq.n	8106032 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810602e:	2301      	movs	r3, #1
 8106030:	e02a      	b.n	8106088 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106032:	68bb      	ldr	r3, [r7, #8]
 8106034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106038:	d01e      	beq.n	8106078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810603a:	f7fc f965 	bl	8102308 <HAL_GetTick>
 810603e:	4602      	mov	r2, r0
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	1ad3      	subs	r3, r2, r3
 8106044:	68ba      	ldr	r2, [r7, #8]
 8106046:	429a      	cmp	r2, r3
 8106048:	d302      	bcc.n	8106050 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810604a:	68bb      	ldr	r3, [r7, #8]
 810604c:	2b00      	cmp	r3, #0
 810604e:	d113      	bne.n	8106078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106050:	68fb      	ldr	r3, [r7, #12]
 8106052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106054:	f043 0220 	orr.w	r2, r3, #32
 8106058:	68fb      	ldr	r3, [r7, #12]
 810605a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810605c:	68fb      	ldr	r3, [r7, #12]
 810605e:	2220      	movs	r2, #32
 8106060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8106064:	68fb      	ldr	r3, [r7, #12]
 8106066:	2200      	movs	r2, #0
 8106068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810606c:	68fb      	ldr	r3, [r7, #12]
 810606e:	2200      	movs	r2, #0
 8106070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8106074:	2301      	movs	r3, #1
 8106076:	e007      	b.n	8106088 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8106078:	68fb      	ldr	r3, [r7, #12]
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	699b      	ldr	r3, [r3, #24]
 810607e:	f003 0302 	and.w	r3, r3, #2
 8106082:	2b02      	cmp	r3, #2
 8106084:	d1cb      	bne.n	810601e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8106086:	2300      	movs	r3, #0
}
 8106088:	4618      	mov	r0, r3
 810608a:	3710      	adds	r7, #16
 810608c:	46bd      	mov	sp, r7
 810608e:	bd80      	pop	{r7, pc}

08106090 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8106090:	b580      	push	{r7, lr}
 8106092:	b084      	sub	sp, #16
 8106094:	af00      	add	r7, sp, #0
 8106096:	60f8      	str	r0, [r7, #12]
 8106098:	60b9      	str	r1, [r7, #8]
 810609a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810609c:	e028      	b.n	81060f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810609e:	687a      	ldr	r2, [r7, #4]
 81060a0:	68b9      	ldr	r1, [r7, #8]
 81060a2:	68f8      	ldr	r0, [r7, #12]
 81060a4:	f000 f89c 	bl	81061e0 <I2C_IsAcknowledgeFailed>
 81060a8:	4603      	mov	r3, r0
 81060aa:	2b00      	cmp	r3, #0
 81060ac:	d001      	beq.n	81060b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81060ae:	2301      	movs	r3, #1
 81060b0:	e026      	b.n	8106100 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81060b2:	f7fc f929 	bl	8102308 <HAL_GetTick>
 81060b6:	4602      	mov	r2, r0
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	1ad3      	subs	r3, r2, r3
 81060bc:	68ba      	ldr	r2, [r7, #8]
 81060be:	429a      	cmp	r2, r3
 81060c0:	d302      	bcc.n	81060c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81060c2:	68bb      	ldr	r3, [r7, #8]
 81060c4:	2b00      	cmp	r3, #0
 81060c6:	d113      	bne.n	81060f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81060c8:	68fb      	ldr	r3, [r7, #12]
 81060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060cc:	f043 0220 	orr.w	r2, r3, #32
 81060d0:	68fb      	ldr	r3, [r7, #12]
 81060d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81060d4:	68fb      	ldr	r3, [r7, #12]
 81060d6:	2220      	movs	r2, #32
 81060d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81060dc:	68fb      	ldr	r3, [r7, #12]
 81060de:	2200      	movs	r2, #0
 81060e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81060e4:	68fb      	ldr	r3, [r7, #12]
 81060e6:	2200      	movs	r2, #0
 81060e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81060ec:	2301      	movs	r3, #1
 81060ee:	e007      	b.n	8106100 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81060f0:	68fb      	ldr	r3, [r7, #12]
 81060f2:	681b      	ldr	r3, [r3, #0]
 81060f4:	699b      	ldr	r3, [r3, #24]
 81060f6:	f003 0320 	and.w	r3, r3, #32
 81060fa:	2b20      	cmp	r3, #32
 81060fc:	d1cf      	bne.n	810609e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81060fe:	2300      	movs	r3, #0
}
 8106100:	4618      	mov	r0, r3
 8106102:	3710      	adds	r7, #16
 8106104:	46bd      	mov	sp, r7
 8106106:	bd80      	pop	{r7, pc}

08106108 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8106108:	b580      	push	{r7, lr}
 810610a:	b084      	sub	sp, #16
 810610c:	af00      	add	r7, sp, #0
 810610e:	60f8      	str	r0, [r7, #12]
 8106110:	60b9      	str	r1, [r7, #8]
 8106112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8106114:	e055      	b.n	81061c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8106116:	687a      	ldr	r2, [r7, #4]
 8106118:	68b9      	ldr	r1, [r7, #8]
 810611a:	68f8      	ldr	r0, [r7, #12]
 810611c:	f000 f860 	bl	81061e0 <I2C_IsAcknowledgeFailed>
 8106120:	4603      	mov	r3, r0
 8106122:	2b00      	cmp	r3, #0
 8106124:	d001      	beq.n	810612a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8106126:	2301      	movs	r3, #1
 8106128:	e053      	b.n	81061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810612a:	68fb      	ldr	r3, [r7, #12]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	699b      	ldr	r3, [r3, #24]
 8106130:	f003 0320 	and.w	r3, r3, #32
 8106134:	2b20      	cmp	r3, #32
 8106136:	d129      	bne.n	810618c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8106138:	68fb      	ldr	r3, [r7, #12]
 810613a:	681b      	ldr	r3, [r3, #0]
 810613c:	699b      	ldr	r3, [r3, #24]
 810613e:	f003 0304 	and.w	r3, r3, #4
 8106142:	2b04      	cmp	r3, #4
 8106144:	d105      	bne.n	8106152 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8106146:	68fb      	ldr	r3, [r7, #12]
 8106148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810614a:	2b00      	cmp	r3, #0
 810614c:	d001      	beq.n	8106152 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 810614e:	2300      	movs	r3, #0
 8106150:	e03f      	b.n	81061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106152:	68fb      	ldr	r3, [r7, #12]
 8106154:	681b      	ldr	r3, [r3, #0]
 8106156:	2220      	movs	r2, #32
 8106158:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 810615a:	68fb      	ldr	r3, [r7, #12]
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	6859      	ldr	r1, [r3, #4]
 8106160:	68fb      	ldr	r3, [r7, #12]
 8106162:	681a      	ldr	r2, [r3, #0]
 8106164:	4b1d      	ldr	r3, [pc, #116]	; (81061dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8106166:	400b      	ands	r3, r1
 8106168:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810616a:	68fb      	ldr	r3, [r7, #12]
 810616c:	2200      	movs	r2, #0
 810616e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8106170:	68fb      	ldr	r3, [r7, #12]
 8106172:	2220      	movs	r2, #32
 8106174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8106178:	68fb      	ldr	r3, [r7, #12]
 810617a:	2200      	movs	r2, #0
 810617c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8106180:	68fb      	ldr	r3, [r7, #12]
 8106182:	2200      	movs	r2, #0
 8106184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8106188:	2301      	movs	r3, #1
 810618a:	e022      	b.n	81061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810618c:	f7fc f8bc 	bl	8102308 <HAL_GetTick>
 8106190:	4602      	mov	r2, r0
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	1ad3      	subs	r3, r2, r3
 8106196:	68ba      	ldr	r2, [r7, #8]
 8106198:	429a      	cmp	r2, r3
 810619a:	d302      	bcc.n	81061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 810619c:	68bb      	ldr	r3, [r7, #8]
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d10f      	bne.n	81061c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81061a2:	68fb      	ldr	r3, [r7, #12]
 81061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81061a6:	f043 0220 	orr.w	r2, r3, #32
 81061aa:	68fb      	ldr	r3, [r7, #12]
 81061ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81061ae:	68fb      	ldr	r3, [r7, #12]
 81061b0:	2220      	movs	r2, #32
 81061b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81061b6:	68fb      	ldr	r3, [r7, #12]
 81061b8:	2200      	movs	r2, #0
 81061ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81061be:	2301      	movs	r3, #1
 81061c0:	e007      	b.n	81061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 81061c2:	68fb      	ldr	r3, [r7, #12]
 81061c4:	681b      	ldr	r3, [r3, #0]
 81061c6:	699b      	ldr	r3, [r3, #24]
 81061c8:	f003 0304 	and.w	r3, r3, #4
 81061cc:	2b04      	cmp	r3, #4
 81061ce:	d1a2      	bne.n	8106116 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81061d0:	2300      	movs	r3, #0
}
 81061d2:	4618      	mov	r0, r3
 81061d4:	3710      	adds	r7, #16
 81061d6:	46bd      	mov	sp, r7
 81061d8:	bd80      	pop	{r7, pc}
 81061da:	bf00      	nop
 81061dc:	fe00e800 	.word	0xfe00e800

081061e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81061e0:	b580      	push	{r7, lr}
 81061e2:	b084      	sub	sp, #16
 81061e4:	af00      	add	r7, sp, #0
 81061e6:	60f8      	str	r0, [r7, #12]
 81061e8:	60b9      	str	r1, [r7, #8]
 81061ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81061ec:	68fb      	ldr	r3, [r7, #12]
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	699b      	ldr	r3, [r3, #24]
 81061f2:	f003 0310 	and.w	r3, r3, #16
 81061f6:	2b10      	cmp	r3, #16
 81061f8:	d151      	bne.n	810629e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81061fa:	e022      	b.n	8106242 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81061fc:	68bb      	ldr	r3, [r7, #8]
 81061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106202:	d01e      	beq.n	8106242 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106204:	f7fc f880 	bl	8102308 <HAL_GetTick>
 8106208:	4602      	mov	r2, r0
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	1ad3      	subs	r3, r2, r3
 810620e:	68ba      	ldr	r2, [r7, #8]
 8106210:	429a      	cmp	r2, r3
 8106212:	d302      	bcc.n	810621a <I2C_IsAcknowledgeFailed+0x3a>
 8106214:	68bb      	ldr	r3, [r7, #8]
 8106216:	2b00      	cmp	r3, #0
 8106218:	d113      	bne.n	8106242 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810621a:	68fb      	ldr	r3, [r7, #12]
 810621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810621e:	f043 0220 	orr.w	r2, r3, #32
 8106222:	68fb      	ldr	r3, [r7, #12]
 8106224:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8106226:	68fb      	ldr	r3, [r7, #12]
 8106228:	2220      	movs	r2, #32
 810622a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810622e:	68fb      	ldr	r3, [r7, #12]
 8106230:	2200      	movs	r2, #0
 8106232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8106236:	68fb      	ldr	r3, [r7, #12]
 8106238:	2200      	movs	r2, #0
 810623a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 810623e:	2301      	movs	r3, #1
 8106240:	e02e      	b.n	81062a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8106242:	68fb      	ldr	r3, [r7, #12]
 8106244:	681b      	ldr	r3, [r3, #0]
 8106246:	699b      	ldr	r3, [r3, #24]
 8106248:	f003 0320 	and.w	r3, r3, #32
 810624c:	2b20      	cmp	r3, #32
 810624e:	d1d5      	bne.n	81061fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106250:	68fb      	ldr	r3, [r7, #12]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	2210      	movs	r2, #16
 8106256:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106258:	68fb      	ldr	r3, [r7, #12]
 810625a:	681b      	ldr	r3, [r3, #0]
 810625c:	2220      	movs	r2, #32
 810625e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8106260:	68f8      	ldr	r0, [r7, #12]
 8106262:	f7ff fe71 	bl	8105f48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106266:	68fb      	ldr	r3, [r7, #12]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	6859      	ldr	r1, [r3, #4]
 810626c:	68fb      	ldr	r3, [r7, #12]
 810626e:	681a      	ldr	r2, [r3, #0]
 8106270:	4b0d      	ldr	r3, [pc, #52]	; (81062a8 <I2C_IsAcknowledgeFailed+0xc8>)
 8106272:	400b      	ands	r3, r1
 8106274:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8106276:	68fb      	ldr	r3, [r7, #12]
 8106278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810627a:	f043 0204 	orr.w	r2, r3, #4
 810627e:	68fb      	ldr	r3, [r7, #12]
 8106280:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8106282:	68fb      	ldr	r3, [r7, #12]
 8106284:	2220      	movs	r2, #32
 8106286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810628a:	68fb      	ldr	r3, [r7, #12]
 810628c:	2200      	movs	r2, #0
 810628e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106292:	68fb      	ldr	r3, [r7, #12]
 8106294:	2200      	movs	r2, #0
 8106296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 810629a:	2301      	movs	r3, #1
 810629c:	e000      	b.n	81062a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 810629e:	2300      	movs	r3, #0
}
 81062a0:	4618      	mov	r0, r3
 81062a2:	3710      	adds	r7, #16
 81062a4:	46bd      	mov	sp, r7
 81062a6:	bd80      	pop	{r7, pc}
 81062a8:	fe00e800 	.word	0xfe00e800

081062ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 81062ac:	b480      	push	{r7}
 81062ae:	b085      	sub	sp, #20
 81062b0:	af00      	add	r7, sp, #0
 81062b2:	60f8      	str	r0, [r7, #12]
 81062b4:	607b      	str	r3, [r7, #4]
 81062b6:	460b      	mov	r3, r1
 81062b8:	817b      	strh	r3, [r7, #10]
 81062ba:	4613      	mov	r3, r2
 81062bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 81062be:	68fb      	ldr	r3, [r7, #12]
 81062c0:	681b      	ldr	r3, [r3, #0]
 81062c2:	685a      	ldr	r2, [r3, #4]
 81062c4:	69bb      	ldr	r3, [r7, #24]
 81062c6:	0d5b      	lsrs	r3, r3, #21
 81062c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81062cc:	4b0d      	ldr	r3, [pc, #52]	; (8106304 <I2C_TransferConfig+0x58>)
 81062ce:	430b      	orrs	r3, r1
 81062d0:	43db      	mvns	r3, r3
 81062d2:	ea02 0103 	and.w	r1, r2, r3
 81062d6:	897b      	ldrh	r3, [r7, #10]
 81062d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81062dc:	7a7b      	ldrb	r3, [r7, #9]
 81062de:	041b      	lsls	r3, r3, #16
 81062e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81062e4:	431a      	orrs	r2, r3
 81062e6:	687b      	ldr	r3, [r7, #4]
 81062e8:	431a      	orrs	r2, r3
 81062ea:	69bb      	ldr	r3, [r7, #24]
 81062ec:	431a      	orrs	r2, r3
 81062ee:	68fb      	ldr	r3, [r7, #12]
 81062f0:	681b      	ldr	r3, [r3, #0]
 81062f2:	430a      	orrs	r2, r1
 81062f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 81062f6:	bf00      	nop
 81062f8:	3714      	adds	r7, #20
 81062fa:	46bd      	mov	sp, r7
 81062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106300:	4770      	bx	lr
 8106302:	bf00      	nop
 8106304:	03ff63ff 	.word	0x03ff63ff

08106308 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8106308:	b480      	push	{r7}
 810630a:	b083      	sub	sp, #12
 810630c:	af00      	add	r7, sp, #0
 810630e:	6078      	str	r0, [r7, #4]
 8106310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106318:	b2db      	uxtb	r3, r3
 810631a:	2b20      	cmp	r3, #32
 810631c:	d138      	bne.n	8106390 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106324:	2b01      	cmp	r3, #1
 8106326:	d101      	bne.n	810632c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8106328:	2302      	movs	r3, #2
 810632a:	e032      	b.n	8106392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	2201      	movs	r2, #1
 8106330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	2224      	movs	r2, #36	; 0x24
 8106338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	681b      	ldr	r3, [r3, #0]
 8106340:	681a      	ldr	r2, [r3, #0]
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	681b      	ldr	r3, [r3, #0]
 8106346:	f022 0201 	bic.w	r2, r2, #1
 810634a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810634c:	687b      	ldr	r3, [r7, #4]
 810634e:	681b      	ldr	r3, [r3, #0]
 8106350:	681a      	ldr	r2, [r3, #0]
 8106352:	687b      	ldr	r3, [r7, #4]
 8106354:	681b      	ldr	r3, [r3, #0]
 8106356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810635a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810635c:	687b      	ldr	r3, [r7, #4]
 810635e:	681b      	ldr	r3, [r3, #0]
 8106360:	6819      	ldr	r1, [r3, #0]
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	683a      	ldr	r2, [r7, #0]
 8106368:	430a      	orrs	r2, r1
 810636a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	681a      	ldr	r2, [r3, #0]
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	f042 0201 	orr.w	r2, r2, #1
 810637a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	2220      	movs	r2, #32
 8106380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	2200      	movs	r2, #0
 8106388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810638c:	2300      	movs	r3, #0
 810638e:	e000      	b.n	8106392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8106390:	2302      	movs	r3, #2
  }
}
 8106392:	4618      	mov	r0, r3
 8106394:	370c      	adds	r7, #12
 8106396:	46bd      	mov	sp, r7
 8106398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810639c:	4770      	bx	lr

0810639e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810639e:	b480      	push	{r7}
 81063a0:	b085      	sub	sp, #20
 81063a2:	af00      	add	r7, sp, #0
 81063a4:	6078      	str	r0, [r7, #4]
 81063a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81063a8:	687b      	ldr	r3, [r7, #4]
 81063aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81063ae:	b2db      	uxtb	r3, r3
 81063b0:	2b20      	cmp	r3, #32
 81063b2:	d139      	bne.n	8106428 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81063ba:	2b01      	cmp	r3, #1
 81063bc:	d101      	bne.n	81063c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81063be:	2302      	movs	r3, #2
 81063c0:	e033      	b.n	810642a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	2201      	movs	r2, #1
 81063c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	2224      	movs	r2, #36	; 0x24
 81063ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	681b      	ldr	r3, [r3, #0]
 81063d6:	681a      	ldr	r2, [r3, #0]
 81063d8:	687b      	ldr	r3, [r7, #4]
 81063da:	681b      	ldr	r3, [r3, #0]
 81063dc:	f022 0201 	bic.w	r2, r2, #1
 81063e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	681b      	ldr	r3, [r3, #0]
 81063e6:	681b      	ldr	r3, [r3, #0]
 81063e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81063ea:	68fb      	ldr	r3, [r7, #12]
 81063ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81063f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81063f2:	683b      	ldr	r3, [r7, #0]
 81063f4:	021b      	lsls	r3, r3, #8
 81063f6:	68fa      	ldr	r2, [r7, #12]
 81063f8:	4313      	orrs	r3, r2
 81063fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	681b      	ldr	r3, [r3, #0]
 8106400:	68fa      	ldr	r2, [r7, #12]
 8106402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	681b      	ldr	r3, [r3, #0]
 8106408:	681a      	ldr	r2, [r3, #0]
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	681b      	ldr	r3, [r3, #0]
 810640e:	f042 0201 	orr.w	r2, r2, #1
 8106412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	2220      	movs	r2, #32
 8106418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810641c:	687b      	ldr	r3, [r7, #4]
 810641e:	2200      	movs	r2, #0
 8106420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106424:	2300      	movs	r3, #0
 8106426:	e000      	b.n	810642a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8106428:	2302      	movs	r3, #2
  }
}
 810642a:	4618      	mov	r0, r3
 810642c:	3714      	adds	r7, #20
 810642e:	46bd      	mov	sp, r7
 8106430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106434:	4770      	bx	lr
	...

08106438 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8106438:	b480      	push	{r7}
 810643a:	b085      	sub	sp, #20
 810643c:	af00      	add	r7, sp, #0
 810643e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106440:	4b0d      	ldr	r3, [pc, #52]	; (8106478 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8106442:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106446:	4a0c      	ldr	r2, [pc, #48]	; (8106478 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8106448:	f043 0302 	orr.w	r3, r3, #2
 810644c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8106450:	4b09      	ldr	r3, [pc, #36]	; (8106478 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8106452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106456:	f003 0302 	and.w	r3, r3, #2
 810645a:	60fb      	str	r3, [r7, #12]
 810645c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 810645e:	4b07      	ldr	r3, [pc, #28]	; (810647c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8106460:	685a      	ldr	r2, [r3, #4]
 8106462:	4906      	ldr	r1, [pc, #24]	; (810647c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	4313      	orrs	r3, r2
 8106468:	604b      	str	r3, [r1, #4]
}
 810646a:	bf00      	nop
 810646c:	3714      	adds	r7, #20
 810646e:	46bd      	mov	sp, r7
 8106470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106474:	4770      	bx	lr
 8106476:	bf00      	nop
 8106478:	58024400 	.word	0x58024400
 810647c:	58000400 	.word	0x58000400

08106480 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8106480:	b580      	push	{r7, lr}
 8106482:	b084      	sub	sp, #16
 8106484:	af00      	add	r7, sp, #0
 8106486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	2b00      	cmp	r3, #0
 810648c:	d101      	bne.n	8106492 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 810648e:	2301      	movs	r3, #1
 8106490:	e038      	b.n	8106504 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 810649a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	f245 5255 	movw	r2, #21845	; 0x5555
 81064a4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	681b      	ldr	r3, [r3, #0]
 81064aa:	687a      	ldr	r2, [r7, #4]
 81064ac:	6852      	ldr	r2, [r2, #4]
 81064ae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 81064b0:	687b      	ldr	r3, [r7, #4]
 81064b2:	681b      	ldr	r3, [r3, #0]
 81064b4:	687a      	ldr	r2, [r7, #4]
 81064b6:	6892      	ldr	r2, [r2, #8]
 81064b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 81064ba:	f7fb ff25 	bl	8102308 <HAL_GetTick>
 81064be:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 81064c0:	e008      	b.n	81064d4 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 81064c2:	f7fb ff21 	bl	8102308 <HAL_GetTick>
 81064c6:	4602      	mov	r2, r0
 81064c8:	68fb      	ldr	r3, [r7, #12]
 81064ca:	1ad3      	subs	r3, r2, r3
 81064cc:	2b30      	cmp	r3, #48	; 0x30
 81064ce:	d901      	bls.n	81064d4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 81064d0:	2303      	movs	r3, #3
 81064d2:	e017      	b.n	8106504 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	681b      	ldr	r3, [r3, #0]
 81064d8:	68db      	ldr	r3, [r3, #12]
 81064da:	2b00      	cmp	r3, #0
 81064dc:	d1f1      	bne.n	81064c2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	691a      	ldr	r2, [r3, #16]
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	68db      	ldr	r3, [r3, #12]
 81064e8:	429a      	cmp	r2, r3
 81064ea:	d005      	beq.n	81064f8 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 81064ec:	687b      	ldr	r3, [r7, #4]
 81064ee:	681b      	ldr	r3, [r3, #0]
 81064f0:	687a      	ldr	r2, [r7, #4]
 81064f2:	68d2      	ldr	r2, [r2, #12]
 81064f4:	611a      	str	r2, [r3, #16]
 81064f6:	e004      	b.n	8106502 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	681b      	ldr	r3, [r3, #0]
 81064fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8106500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8106502:	2300      	movs	r3, #0
}
 8106504:	4618      	mov	r0, r3
 8106506:	3710      	adds	r7, #16
 8106508:	46bd      	mov	sp, r7
 810650a:	bd80      	pop	{r7, pc}

0810650c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 810650c:	b480      	push	{r7}
 810650e:	b083      	sub	sp, #12
 8106510:	af00      	add	r7, sp, #0
 8106512:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 810651c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 810651e:	2300      	movs	r3, #0
}
 8106520:	4618      	mov	r0, r3
 8106522:	370c      	adds	r7, #12
 8106524:	46bd      	mov	sp, r7
 8106526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810652a:	4770      	bx	lr

0810652c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810652c:	b580      	push	{r7, lr}
 810652e:	b084      	sub	sp, #16
 8106530:	af00      	add	r7, sp, #0
 8106532:	60f8      	str	r0, [r7, #12]
 8106534:	460b      	mov	r3, r1
 8106536:	607a      	str	r2, [r7, #4]
 8106538:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810653a:	4b35      	ldr	r3, [pc, #212]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	f023 0201 	bic.w	r2, r3, #1
 8106542:	4933      	ldr	r1, [pc, #204]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106544:	68fb      	ldr	r3, [r7, #12]
 8106546:	4313      	orrs	r3, r2
 8106548:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	2b00      	cmp	r3, #0
 810654e:	d121      	bne.n	8106594 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106550:	f7fb ffe0 	bl	8102514 <HAL_GetCurrentCPUID>
 8106554:	4603      	mov	r3, r0
 8106556:	2b03      	cmp	r3, #3
 8106558:	d154      	bne.n	8106604 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810655a:	4b2d      	ldr	r3, [pc, #180]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810655c:	691b      	ldr	r3, [r3, #16]
 810655e:	4a2c      	ldr	r2, [pc, #176]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106560:	f023 0301 	bic.w	r3, r3, #1
 8106564:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106566:	4b2b      	ldr	r3, [pc, #172]	; (8106614 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106568:	691b      	ldr	r3, [r3, #16]
 810656a:	4a2a      	ldr	r2, [pc, #168]	; (8106614 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810656c:	f043 0304 	orr.w	r3, r3, #4
 8106570:	6113      	str	r3, [r2, #16]
 8106572:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8106576:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810657a:	7afb      	ldrb	r3, [r7, #11]
 810657c:	2b01      	cmp	r3, #1
 810657e:	d101      	bne.n	8106584 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106580:	bf30      	wfi
 8106582:	e000      	b.n	8106586 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106584:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106586:	4b23      	ldr	r3, [pc, #140]	; (8106614 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106588:	691b      	ldr	r3, [r3, #16]
 810658a:	4a22      	ldr	r2, [pc, #136]	; (8106614 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810658c:	f023 0304 	bic.w	r3, r3, #4
 8106590:	6113      	str	r3, [r2, #16]
 8106592:	e03a      	b.n	810660a <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	2b01      	cmp	r3, #1
 8106598:	d121      	bne.n	81065de <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810659a:	f7fb ffbb 	bl	8102514 <HAL_GetCurrentCPUID>
 810659e:	4603      	mov	r3, r0
 81065a0:	2b01      	cmp	r3, #1
 81065a2:	d131      	bne.n	8106608 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81065a4:	4b1a      	ldr	r3, [pc, #104]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81065a6:	695b      	ldr	r3, [r3, #20]
 81065a8:	4a19      	ldr	r2, [pc, #100]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81065aa:	f023 0302 	bic.w	r3, r3, #2
 81065ae:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81065b0:	4b18      	ldr	r3, [pc, #96]	; (8106614 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81065b2:	691b      	ldr	r3, [r3, #16]
 81065b4:	4a17      	ldr	r2, [pc, #92]	; (8106614 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81065b6:	f043 0304 	orr.w	r3, r3, #4
 81065ba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81065bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81065c0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81065c4:	7afb      	ldrb	r3, [r7, #11]
 81065c6:	2b01      	cmp	r3, #1
 81065c8:	d101      	bne.n	81065ce <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81065ca:	bf30      	wfi
 81065cc:	e000      	b.n	81065d0 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81065ce:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81065d0:	4b10      	ldr	r3, [pc, #64]	; (8106614 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81065d2:	691b      	ldr	r3, [r3, #16]
 81065d4:	4a0f      	ldr	r2, [pc, #60]	; (8106614 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81065d6:	f023 0304 	bic.w	r3, r3, #4
 81065da:	6113      	str	r3, [r2, #16]
 81065dc:	e015      	b.n	810660a <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81065de:	f7fb ff99 	bl	8102514 <HAL_GetCurrentCPUID>
 81065e2:	4603      	mov	r3, r0
 81065e4:	2b03      	cmp	r3, #3
 81065e6:	d106      	bne.n	81065f6 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81065e8:	4b09      	ldr	r3, [pc, #36]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81065ea:	691b      	ldr	r3, [r3, #16]
 81065ec:	4a08      	ldr	r2, [pc, #32]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81065ee:	f023 0304 	bic.w	r3, r3, #4
 81065f2:	6113      	str	r3, [r2, #16]
 81065f4:	e009      	b.n	810660a <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81065f6:	4b06      	ldr	r3, [pc, #24]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81065f8:	695b      	ldr	r3, [r3, #20]
 81065fa:	4a05      	ldr	r2, [pc, #20]	; (8106610 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81065fc:	f023 0304 	bic.w	r3, r3, #4
 8106600:	6153      	str	r3, [r2, #20]
 8106602:	e002      	b.n	810660a <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8106604:	bf00      	nop
 8106606:	e000      	b.n	810660a <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8106608:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810660a:	3710      	adds	r7, #16
 810660c:	46bd      	mov	sp, r7
 810660e:	bd80      	pop	{r7, pc}
 8106610:	58024800 	.word	0x58024800
 8106614:	e000ed00 	.word	0xe000ed00

08106618 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106618:	b580      	push	{r7, lr}
 810661a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810661c:	f7fb ff7a 	bl	8102514 <HAL_GetCurrentCPUID>
 8106620:	4603      	mov	r3, r0
 8106622:	2b03      	cmp	r3, #3
 8106624:	d101      	bne.n	810662a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106626:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106628:	e001      	b.n	810662e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810662a:	bf40      	sev
    __WFE ();
 810662c:	bf20      	wfe
}
 810662e:	bf00      	nop
 8106630:	bd80      	pop	{r7, pc}
	...

08106634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106634:	b480      	push	{r7}
 8106636:	b089      	sub	sp, #36	; 0x24
 8106638:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810663a:	4baf      	ldr	r3, [pc, #700]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810663c:	691b      	ldr	r3, [r3, #16]
 810663e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106642:	2b18      	cmp	r3, #24
 8106644:	f200 814e 	bhi.w	81068e4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8106648:	a201      	add	r2, pc, #4	; (adr r2, 8106650 <HAL_RCC_GetSysClockFreq+0x1c>)
 810664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810664e:	bf00      	nop
 8106650:	081066b5 	.word	0x081066b5
 8106654:	081068e5 	.word	0x081068e5
 8106658:	081068e5 	.word	0x081068e5
 810665c:	081068e5 	.word	0x081068e5
 8106660:	081068e5 	.word	0x081068e5
 8106664:	081068e5 	.word	0x081068e5
 8106668:	081068e5 	.word	0x081068e5
 810666c:	081068e5 	.word	0x081068e5
 8106670:	081066db 	.word	0x081066db
 8106674:	081068e5 	.word	0x081068e5
 8106678:	081068e5 	.word	0x081068e5
 810667c:	081068e5 	.word	0x081068e5
 8106680:	081068e5 	.word	0x081068e5
 8106684:	081068e5 	.word	0x081068e5
 8106688:	081068e5 	.word	0x081068e5
 810668c:	081068e5 	.word	0x081068e5
 8106690:	081066e1 	.word	0x081066e1
 8106694:	081068e5 	.word	0x081068e5
 8106698:	081068e5 	.word	0x081068e5
 810669c:	081068e5 	.word	0x081068e5
 81066a0:	081068e5 	.word	0x081068e5
 81066a4:	081068e5 	.word	0x081068e5
 81066a8:	081068e5 	.word	0x081068e5
 81066ac:	081068e5 	.word	0x081068e5
 81066b0:	081066e7 	.word	0x081066e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81066b4:	4b90      	ldr	r3, [pc, #576]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066b6:	681b      	ldr	r3, [r3, #0]
 81066b8:	f003 0320 	and.w	r3, r3, #32
 81066bc:	2b00      	cmp	r3, #0
 81066be:	d009      	beq.n	81066d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81066c0:	4b8d      	ldr	r3, [pc, #564]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	08db      	lsrs	r3, r3, #3
 81066c6:	f003 0303 	and.w	r3, r3, #3
 81066ca:	4a8c      	ldr	r2, [pc, #560]	; (81068fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 81066cc:	fa22 f303 	lsr.w	r3, r2, r3
 81066d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81066d2:	e10a      	b.n	81068ea <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81066d4:	4b89      	ldr	r3, [pc, #548]	; (81068fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 81066d6:	61bb      	str	r3, [r7, #24]
    break;
 81066d8:	e107      	b.n	81068ea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81066da:	4b89      	ldr	r3, [pc, #548]	; (8106900 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81066dc:	61bb      	str	r3, [r7, #24]
    break;
 81066de:	e104      	b.n	81068ea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81066e0:	4b88      	ldr	r3, [pc, #544]	; (8106904 <HAL_RCC_GetSysClockFreq+0x2d0>)
 81066e2:	61bb      	str	r3, [r7, #24]
    break;
 81066e4:	e101      	b.n	81068ea <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81066e6:	4b84      	ldr	r3, [pc, #528]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066ea:	f003 0303 	and.w	r3, r3, #3
 81066ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81066f0:	4b81      	ldr	r3, [pc, #516]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066f4:	091b      	lsrs	r3, r3, #4
 81066f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81066fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81066fc:	4b7e      	ldr	r3, [pc, #504]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106700:	f003 0301 	and.w	r3, r3, #1
 8106704:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8106706:	4b7c      	ldr	r3, [pc, #496]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810670a:	08db      	lsrs	r3, r3, #3
 810670c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106710:	68fa      	ldr	r2, [r7, #12]
 8106712:	fb02 f303 	mul.w	r3, r2, r3
 8106716:	ee07 3a90 	vmov	s15, r3
 810671a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810671e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8106722:	693b      	ldr	r3, [r7, #16]
 8106724:	2b00      	cmp	r3, #0
 8106726:	f000 80da 	beq.w	81068de <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 810672a:	697b      	ldr	r3, [r7, #20]
 810672c:	2b01      	cmp	r3, #1
 810672e:	d05a      	beq.n	81067e6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8106730:	2b01      	cmp	r3, #1
 8106732:	d302      	bcc.n	810673a <HAL_RCC_GetSysClockFreq+0x106>
 8106734:	2b02      	cmp	r3, #2
 8106736:	d078      	beq.n	810682a <HAL_RCC_GetSysClockFreq+0x1f6>
 8106738:	e099      	b.n	810686e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810673a:	4b6f      	ldr	r3, [pc, #444]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810673c:	681b      	ldr	r3, [r3, #0]
 810673e:	f003 0320 	and.w	r3, r3, #32
 8106742:	2b00      	cmp	r3, #0
 8106744:	d02d      	beq.n	81067a2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106746:	4b6c      	ldr	r3, [pc, #432]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	08db      	lsrs	r3, r3, #3
 810674c:	f003 0303 	and.w	r3, r3, #3
 8106750:	4a6a      	ldr	r2, [pc, #424]	; (81068fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8106752:	fa22 f303 	lsr.w	r3, r2, r3
 8106756:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	ee07 3a90 	vmov	s15, r3
 810675e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106762:	693b      	ldr	r3, [r7, #16]
 8106764:	ee07 3a90 	vmov	s15, r3
 8106768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810676c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106770:	4b61      	ldr	r3, [pc, #388]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106778:	ee07 3a90 	vmov	s15, r3
 810677c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106780:	ed97 6a02 	vldr	s12, [r7, #8]
 8106784:	eddf 5a60 	vldr	s11, [pc, #384]	; 8106908 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810678c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106798:	ee67 7a27 	vmul.f32	s15, s14, s15
 810679c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81067a0:	e087      	b.n	81068b2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81067a2:	693b      	ldr	r3, [r7, #16]
 81067a4:	ee07 3a90 	vmov	s15, r3
 81067a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067ac:	eddf 6a57 	vldr	s13, [pc, #348]	; 810690c <HAL_RCC_GetSysClockFreq+0x2d8>
 81067b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067b4:	4b50      	ldr	r3, [pc, #320]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81067b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067bc:	ee07 3a90 	vmov	s15, r3
 81067c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067c4:	ed97 6a02 	vldr	s12, [r7, #8]
 81067c8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8106908 <HAL_RCC_GetSysClockFreq+0x2d4>
 81067cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81067e4:	e065      	b.n	81068b2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81067e6:	693b      	ldr	r3, [r7, #16]
 81067e8:	ee07 3a90 	vmov	s15, r3
 81067ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067f0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8106910 <HAL_RCC_GetSysClockFreq+0x2dc>
 81067f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067f8:	4b3f      	ldr	r3, [pc, #252]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81067fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106800:	ee07 3a90 	vmov	s15, r3
 8106804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106808:	ed97 6a02 	vldr	s12, [r7, #8]
 810680c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8106908 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810681c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106824:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106828:	e043      	b.n	81068b2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810682a:	693b      	ldr	r3, [r7, #16]
 810682c:	ee07 3a90 	vmov	s15, r3
 8106830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106834:	eddf 6a37 	vldr	s13, [pc, #220]	; 8106914 <HAL_RCC_GetSysClockFreq+0x2e0>
 8106838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810683c:	4b2e      	ldr	r3, [pc, #184]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106844:	ee07 3a90 	vmov	s15, r3
 8106848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810684c:	ed97 6a02 	vldr	s12, [r7, #8]
 8106850:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8106908 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810685c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106868:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810686c:	e021      	b.n	81068b2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810686e:	693b      	ldr	r3, [r7, #16]
 8106870:	ee07 3a90 	vmov	s15, r3
 8106874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106878:	eddf 6a25 	vldr	s13, [pc, #148]	; 8106910 <HAL_RCC_GetSysClockFreq+0x2dc>
 810687c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106880:	4b1d      	ldr	r3, [pc, #116]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106888:	ee07 3a90 	vmov	s15, r3
 810688c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106890:	ed97 6a02 	vldr	s12, [r7, #8]
 8106894:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8106908 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810689c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81068b0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81068b2:	4b11      	ldr	r3, [pc, #68]	; (81068f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81068b6:	0a5b      	lsrs	r3, r3, #9
 81068b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81068bc:	3301      	adds	r3, #1
 81068be:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81068c0:	683b      	ldr	r3, [r7, #0]
 81068c2:	ee07 3a90 	vmov	s15, r3
 81068c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81068ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81068ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81068d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81068d6:	ee17 3a90 	vmov	r3, s15
 81068da:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81068dc:	e005      	b.n	81068ea <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 81068de:	2300      	movs	r3, #0
 81068e0:	61bb      	str	r3, [r7, #24]
    break;
 81068e2:	e002      	b.n	81068ea <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 81068e4:	4b06      	ldr	r3, [pc, #24]	; (8106900 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81068e6:	61bb      	str	r3, [r7, #24]
    break;
 81068e8:	bf00      	nop
  }

  return sysclockfreq;
 81068ea:	69bb      	ldr	r3, [r7, #24]
}
 81068ec:	4618      	mov	r0, r3
 81068ee:	3724      	adds	r7, #36	; 0x24
 81068f0:	46bd      	mov	sp, r7
 81068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068f6:	4770      	bx	lr
 81068f8:	58024400 	.word	0x58024400
 81068fc:	03d09000 	.word	0x03d09000
 8106900:	003d0900 	.word	0x003d0900
 8106904:	017d7840 	.word	0x017d7840
 8106908:	46000000 	.word	0x46000000
 810690c:	4c742400 	.word	0x4c742400
 8106910:	4a742400 	.word	0x4a742400
 8106914:	4bbebc20 	.word	0x4bbebc20

08106918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106918:	b580      	push	{r7, lr}
 810691a:	b082      	sub	sp, #8
 810691c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810691e:	f7ff fe89 	bl	8106634 <HAL_RCC_GetSysClockFreq>
 8106922:	4601      	mov	r1, r0
 8106924:	4b11      	ldr	r3, [pc, #68]	; (810696c <HAL_RCC_GetHCLKFreq+0x54>)
 8106926:	699b      	ldr	r3, [r3, #24]
 8106928:	0a1b      	lsrs	r3, r3, #8
 810692a:	f003 030f 	and.w	r3, r3, #15
 810692e:	4a10      	ldr	r2, [pc, #64]	; (8106970 <HAL_RCC_GetHCLKFreq+0x58>)
 8106930:	5cd3      	ldrb	r3, [r2, r3]
 8106932:	f003 031f 	and.w	r3, r3, #31
 8106936:	fa21 f303 	lsr.w	r3, r1, r3
 810693a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810693c:	4b0b      	ldr	r3, [pc, #44]	; (810696c <HAL_RCC_GetHCLKFreq+0x54>)
 810693e:	699b      	ldr	r3, [r3, #24]
 8106940:	f003 030f 	and.w	r3, r3, #15
 8106944:	4a0a      	ldr	r2, [pc, #40]	; (8106970 <HAL_RCC_GetHCLKFreq+0x58>)
 8106946:	5cd3      	ldrb	r3, [r2, r3]
 8106948:	f003 031f 	and.w	r3, r3, #31
 810694c:	687a      	ldr	r2, [r7, #4]
 810694e:	fa22 f303 	lsr.w	r3, r2, r3
 8106952:	4a08      	ldr	r2, [pc, #32]	; (8106974 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106954:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106956:	4b07      	ldr	r3, [pc, #28]	; (8106974 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106958:	681b      	ldr	r3, [r3, #0]
 810695a:	4a07      	ldr	r2, [pc, #28]	; (8106978 <HAL_RCC_GetHCLKFreq+0x60>)
 810695c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810695e:	4b05      	ldr	r3, [pc, #20]	; (8106974 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106960:	681b      	ldr	r3, [r3, #0]
}
 8106962:	4618      	mov	r0, r3
 8106964:	3708      	adds	r7, #8
 8106966:	46bd      	mov	sp, r7
 8106968:	bd80      	pop	{r7, pc}
 810696a:	bf00      	nop
 810696c:	58024400 	.word	0x58024400
 8106970:	08115758 	.word	0x08115758
 8106974:	10000004 	.word	0x10000004
 8106978:	10000000 	.word	0x10000000

0810697c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810697c:	b580      	push	{r7, lr}
 810697e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106980:	f7ff ffca 	bl	8106918 <HAL_RCC_GetHCLKFreq>
 8106984:	4601      	mov	r1, r0
 8106986:	4b06      	ldr	r3, [pc, #24]	; (81069a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106988:	69db      	ldr	r3, [r3, #28]
 810698a:	091b      	lsrs	r3, r3, #4
 810698c:	f003 0307 	and.w	r3, r3, #7
 8106990:	4a04      	ldr	r2, [pc, #16]	; (81069a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106992:	5cd3      	ldrb	r3, [r2, r3]
 8106994:	f003 031f 	and.w	r3, r3, #31
 8106998:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810699c:	4618      	mov	r0, r3
 810699e:	bd80      	pop	{r7, pc}
 81069a0:	58024400 	.word	0x58024400
 81069a4:	08115758 	.word	0x08115758

081069a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81069a8:	b580      	push	{r7, lr}
 81069aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81069ac:	f7ff ffb4 	bl	8106918 <HAL_RCC_GetHCLKFreq>
 81069b0:	4601      	mov	r1, r0
 81069b2:	4b06      	ldr	r3, [pc, #24]	; (81069cc <HAL_RCC_GetPCLK2Freq+0x24>)
 81069b4:	69db      	ldr	r3, [r3, #28]
 81069b6:	0a1b      	lsrs	r3, r3, #8
 81069b8:	f003 0307 	and.w	r3, r3, #7
 81069bc:	4a04      	ldr	r2, [pc, #16]	; (81069d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81069be:	5cd3      	ldrb	r3, [r2, r3]
 81069c0:	f003 031f 	and.w	r3, r3, #31
 81069c4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81069c8:	4618      	mov	r0, r3
 81069ca:	bd80      	pop	{r7, pc}
 81069cc:	58024400 	.word	0x58024400
 81069d0:	08115758 	.word	0x08115758

081069d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81069d4:	b480      	push	{r7}
 81069d6:	b083      	sub	sp, #12
 81069d8:	af00      	add	r7, sp, #0
 81069da:	6078      	str	r0, [r7, #4]
 81069dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81069de:	687b      	ldr	r3, [r7, #4]
 81069e0:	223f      	movs	r2, #63	; 0x3f
 81069e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81069e4:	4b1a      	ldr	r3, [pc, #104]	; (8106a50 <HAL_RCC_GetClockConfig+0x7c>)
 81069e6:	691b      	ldr	r3, [r3, #16]
 81069e8:	f003 0207 	and.w	r2, r3, #7
 81069ec:	687b      	ldr	r3, [r7, #4]
 81069ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81069f0:	4b17      	ldr	r3, [pc, #92]	; (8106a50 <HAL_RCC_GetClockConfig+0x7c>)
 81069f2:	699b      	ldr	r3, [r3, #24]
 81069f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81069fc:	4b14      	ldr	r3, [pc, #80]	; (8106a50 <HAL_RCC_GetClockConfig+0x7c>)
 81069fe:	699b      	ldr	r3, [r3, #24]
 8106a00:	f003 020f 	and.w	r2, r3, #15
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8106a08:	4b11      	ldr	r3, [pc, #68]	; (8106a50 <HAL_RCC_GetClockConfig+0x7c>)
 8106a0a:	699b      	ldr	r3, [r3, #24]
 8106a0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106a14:	4b0e      	ldr	r3, [pc, #56]	; (8106a50 <HAL_RCC_GetClockConfig+0x7c>)
 8106a16:	69db      	ldr	r3, [r3, #28]
 8106a18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8106a20:	4b0b      	ldr	r3, [pc, #44]	; (8106a50 <HAL_RCC_GetClockConfig+0x7c>)
 8106a22:	69db      	ldr	r3, [r3, #28]
 8106a24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8106a2c:	4b08      	ldr	r3, [pc, #32]	; (8106a50 <HAL_RCC_GetClockConfig+0x7c>)
 8106a2e:	6a1b      	ldr	r3, [r3, #32]
 8106a30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8106a38:	4b06      	ldr	r3, [pc, #24]	; (8106a54 <HAL_RCC_GetClockConfig+0x80>)
 8106a3a:	681b      	ldr	r3, [r3, #0]
 8106a3c:	f003 020f 	and.w	r2, r3, #15
 8106a40:	683b      	ldr	r3, [r7, #0]
 8106a42:	601a      	str	r2, [r3, #0]
}
 8106a44:	bf00      	nop
 8106a46:	370c      	adds	r7, #12
 8106a48:	46bd      	mov	sp, r7
 8106a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a4e:	4770      	bx	lr
 8106a50:	58024400 	.word	0x58024400
 8106a54:	52002000 	.word	0x52002000

08106a58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106a58:	b580      	push	{r7, lr}
 8106a5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106a5c:	f7ff ff5c 	bl	8106918 <HAL_RCC_GetHCLKFreq>
 8106a60:	4601      	mov	r1, r0
 8106a62:	4b06      	ldr	r3, [pc, #24]	; (8106a7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106a64:	6a1b      	ldr	r3, [r3, #32]
 8106a66:	091b      	lsrs	r3, r3, #4
 8106a68:	f003 0307 	and.w	r3, r3, #7
 8106a6c:	4a04      	ldr	r2, [pc, #16]	; (8106a80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106a6e:	5cd3      	ldrb	r3, [r2, r3]
 8106a70:	f003 031f 	and.w	r3, r3, #31
 8106a74:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106a78:	4618      	mov	r0, r3
 8106a7a:	bd80      	pop	{r7, pc}
 8106a7c:	58024400 	.word	0x58024400
 8106a80:	08115758 	.word	0x08115758

08106a84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106a84:	b480      	push	{r7}
 8106a86:	b089      	sub	sp, #36	; 0x24
 8106a88:	af00      	add	r7, sp, #0
 8106a8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106a8c:	4b9d      	ldr	r3, [pc, #628]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a90:	f003 0303 	and.w	r3, r3, #3
 8106a94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106a96:	4b9b      	ldr	r3, [pc, #620]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a9a:	0b1b      	lsrs	r3, r3, #12
 8106a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106aa0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106aa2:	4b98      	ldr	r3, [pc, #608]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106aa6:	091b      	lsrs	r3, r3, #4
 8106aa8:	f003 0301 	and.w	r3, r3, #1
 8106aac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106aae:	4b95      	ldr	r3, [pc, #596]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106ab2:	08db      	lsrs	r3, r3, #3
 8106ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106ab8:	693a      	ldr	r2, [r7, #16]
 8106aba:	fb02 f303 	mul.w	r3, r2, r3
 8106abe:	ee07 3a90 	vmov	s15, r3
 8106ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ac6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106aca:	697b      	ldr	r3, [r7, #20]
 8106acc:	2b00      	cmp	r3, #0
 8106ace:	f000 810a 	beq.w	8106ce6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8106ad2:	69bb      	ldr	r3, [r7, #24]
 8106ad4:	2b01      	cmp	r3, #1
 8106ad6:	d05a      	beq.n	8106b8e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8106ad8:	2b01      	cmp	r3, #1
 8106ada:	d302      	bcc.n	8106ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8106adc:	2b02      	cmp	r3, #2
 8106ade:	d078      	beq.n	8106bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8106ae0:	e099      	b.n	8106c16 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106ae2:	4b88      	ldr	r3, [pc, #544]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106ae4:	681b      	ldr	r3, [r3, #0]
 8106ae6:	f003 0320 	and.w	r3, r3, #32
 8106aea:	2b00      	cmp	r3, #0
 8106aec:	d02d      	beq.n	8106b4a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106aee:	4b85      	ldr	r3, [pc, #532]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106af0:	681b      	ldr	r3, [r3, #0]
 8106af2:	08db      	lsrs	r3, r3, #3
 8106af4:	f003 0303 	and.w	r3, r3, #3
 8106af8:	4a83      	ldr	r2, [pc, #524]	; (8106d08 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8106afa:	fa22 f303 	lsr.w	r3, r2, r3
 8106afe:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106b00:	68bb      	ldr	r3, [r7, #8]
 8106b02:	ee07 3a90 	vmov	s15, r3
 8106b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b0a:	697b      	ldr	r3, [r7, #20]
 8106b0c:	ee07 3a90 	vmov	s15, r3
 8106b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b18:	4b7a      	ldr	r3, [pc, #488]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b20:	ee07 3a90 	vmov	s15, r3
 8106b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b28:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106d0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b44:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106b48:	e087      	b.n	8106c5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106b4a:	697b      	ldr	r3, [r7, #20]
 8106b4c:	ee07 3a90 	vmov	s15, r3
 8106b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106d10 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8106b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b5c:	4b69      	ldr	r3, [pc, #420]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b64:	ee07 3a90 	vmov	s15, r3
 8106b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b70:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106d0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b8c:	e065      	b.n	8106c5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106b8e:	697b      	ldr	r3, [r7, #20]
 8106b90:	ee07 3a90 	vmov	s15, r3
 8106b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ba0:	4b58      	ldr	r3, [pc, #352]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ba8:	ee07 3a90 	vmov	s15, r3
 8106bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8106bb4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106d0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106bd0:	e043      	b.n	8106c5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106bd2:	697b      	ldr	r3, [r7, #20]
 8106bd4:	ee07 3a90 	vmov	s15, r3
 8106bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bdc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106d18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8106be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106be4:	4b47      	ldr	r3, [pc, #284]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bec:	ee07 3a90 	vmov	s15, r3
 8106bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8106bf8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106d0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106c14:	e021      	b.n	8106c5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106c16:	697b      	ldr	r3, [r7, #20]
 8106c18:	ee07 3a90 	vmov	s15, r3
 8106c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c20:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c28:	4b36      	ldr	r3, [pc, #216]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c30:	ee07 3a90 	vmov	s15, r3
 8106c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c38:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106d0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106c58:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106c5a:	4b2a      	ldr	r3, [pc, #168]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c5e:	0a5b      	lsrs	r3, r3, #9
 8106c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c64:	ee07 3a90 	vmov	s15, r3
 8106c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c80:	ee17 2a90 	vmov	r2, s15
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106c88:	4b1e      	ldr	r3, [pc, #120]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c8c:	0c1b      	lsrs	r3, r3, #16
 8106c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c92:	ee07 3a90 	vmov	s15, r3
 8106c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8106ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106cae:	ee17 2a90 	vmov	r2, s15
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106cb6:	4b13      	ldr	r3, [pc, #76]	; (8106d04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106cba:	0e1b      	lsrs	r3, r3, #24
 8106cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106cc0:	ee07 3a90 	vmov	s15, r3
 8106cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8106cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106cdc:	ee17 2a90 	vmov	r2, s15
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106ce4:	e008      	b.n	8106cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	2200      	movs	r2, #0
 8106cea:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	2200      	movs	r2, #0
 8106cf0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	2200      	movs	r2, #0
 8106cf6:	609a      	str	r2, [r3, #8]
}
 8106cf8:	bf00      	nop
 8106cfa:	3724      	adds	r7, #36	; 0x24
 8106cfc:	46bd      	mov	sp, r7
 8106cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d02:	4770      	bx	lr
 8106d04:	58024400 	.word	0x58024400
 8106d08:	03d09000 	.word	0x03d09000
 8106d0c:	46000000 	.word	0x46000000
 8106d10:	4c742400 	.word	0x4c742400
 8106d14:	4a742400 	.word	0x4a742400
 8106d18:	4bbebc20 	.word	0x4bbebc20

08106d1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8106d1c:	b480      	push	{r7}
 8106d1e:	b089      	sub	sp, #36	; 0x24
 8106d20:	af00      	add	r7, sp, #0
 8106d22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106d24:	4b9d      	ldr	r3, [pc, #628]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d28:	f003 0303 	and.w	r3, r3, #3
 8106d2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8106d2e:	4b9b      	ldr	r3, [pc, #620]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d32:	0d1b      	lsrs	r3, r3, #20
 8106d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106d38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106d3a:	4b98      	ldr	r3, [pc, #608]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d3e:	0a1b      	lsrs	r3, r3, #8
 8106d40:	f003 0301 	and.w	r3, r3, #1
 8106d44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8106d46:	4b95      	ldr	r3, [pc, #596]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d4a:	08db      	lsrs	r3, r3, #3
 8106d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106d50:	693a      	ldr	r2, [r7, #16]
 8106d52:	fb02 f303 	mul.w	r3, r2, r3
 8106d56:	ee07 3a90 	vmov	s15, r3
 8106d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106d62:	697b      	ldr	r3, [r7, #20]
 8106d64:	2b00      	cmp	r3, #0
 8106d66:	f000 810a 	beq.w	8106f7e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8106d6a:	69bb      	ldr	r3, [r7, #24]
 8106d6c:	2b01      	cmp	r3, #1
 8106d6e:	d05a      	beq.n	8106e26 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8106d70:	2b01      	cmp	r3, #1
 8106d72:	d302      	bcc.n	8106d7a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8106d74:	2b02      	cmp	r3, #2
 8106d76:	d078      	beq.n	8106e6a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8106d78:	e099      	b.n	8106eae <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106d7a:	4b88      	ldr	r3, [pc, #544]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d7c:	681b      	ldr	r3, [r3, #0]
 8106d7e:	f003 0320 	and.w	r3, r3, #32
 8106d82:	2b00      	cmp	r3, #0
 8106d84:	d02d      	beq.n	8106de2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106d86:	4b85      	ldr	r3, [pc, #532]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d88:	681b      	ldr	r3, [r3, #0]
 8106d8a:	08db      	lsrs	r3, r3, #3
 8106d8c:	f003 0303 	and.w	r3, r3, #3
 8106d90:	4a83      	ldr	r2, [pc, #524]	; (8106fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8106d92:	fa22 f303 	lsr.w	r3, r2, r3
 8106d96:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106d98:	68bb      	ldr	r3, [r7, #8]
 8106d9a:	ee07 3a90 	vmov	s15, r3
 8106d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106da2:	697b      	ldr	r3, [r7, #20]
 8106da4:	ee07 3a90 	vmov	s15, r3
 8106da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106db0:	4b7a      	ldr	r3, [pc, #488]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106db8:	ee07 3a90 	vmov	s15, r3
 8106dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8106dc4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106de0:	e087      	b.n	8106ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106de2:	697b      	ldr	r3, [r7, #20]
 8106de4:	ee07 3a90 	vmov	s15, r3
 8106de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106dec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8106df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106df4:	4b69      	ldr	r3, [pc, #420]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106dfc:	ee07 3a90 	vmov	s15, r3
 8106e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e08:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106e24:	e065      	b.n	8106ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106e26:	697b      	ldr	r3, [r7, #20]
 8106e28:	ee07 3a90 	vmov	s15, r3
 8106e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8106e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e38:	4b58      	ldr	r3, [pc, #352]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e40:	ee07 3a90 	vmov	s15, r3
 8106e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106e68:	e043      	b.n	8106ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106e6a:	697b      	ldr	r3, [r7, #20]
 8106e6c:	ee07 3a90 	vmov	s15, r3
 8106e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8106e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e7c:	4b47      	ldr	r3, [pc, #284]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e84:	ee07 3a90 	vmov	s15, r3
 8106e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e90:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106eac:	e021      	b.n	8106ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106eae:	697b      	ldr	r3, [r7, #20]
 8106eb0:	ee07 3a90 	vmov	s15, r3
 8106eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106eb8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8106ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ec0:	4b36      	ldr	r3, [pc, #216]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ec8:	ee07 3a90 	vmov	s15, r3
 8106ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ed4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106eec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106ef0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106ef2:	4b2a      	ldr	r3, [pc, #168]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ef6:	0a5b      	lsrs	r3, r3, #9
 8106ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106efc:	ee07 3a90 	vmov	s15, r3
 8106f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106f08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f18:	ee17 2a90 	vmov	r2, s15
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106f20:	4b1e      	ldr	r3, [pc, #120]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106f24:	0c1b      	lsrs	r3, r3, #16
 8106f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106f2a:	ee07 3a90 	vmov	s15, r3
 8106f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f46:	ee17 2a90 	vmov	r2, s15
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106f4e:	4b13      	ldr	r3, [pc, #76]	; (8106f9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106f52:	0e1b      	lsrs	r3, r3, #24
 8106f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106f58:	ee07 3a90 	vmov	s15, r3
 8106f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f74:	ee17 2a90 	vmov	r2, s15
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106f7c:	e008      	b.n	8106f90 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	2200      	movs	r2, #0
 8106f82:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	2200      	movs	r2, #0
 8106f88:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	2200      	movs	r2, #0
 8106f8e:	609a      	str	r2, [r3, #8]
}
 8106f90:	bf00      	nop
 8106f92:	3724      	adds	r7, #36	; 0x24
 8106f94:	46bd      	mov	sp, r7
 8106f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f9a:	4770      	bx	lr
 8106f9c:	58024400 	.word	0x58024400
 8106fa0:	03d09000 	.word	0x03d09000
 8106fa4:	46000000 	.word	0x46000000
 8106fa8:	4c742400 	.word	0x4c742400
 8106fac:	4a742400 	.word	0x4a742400
 8106fb0:	4bbebc20 	.word	0x4bbebc20

08106fb4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106fb4:	b580      	push	{r7, lr}
 8106fb6:	b084      	sub	sp, #16
 8106fb8:	af00      	add	r7, sp, #0
 8106fba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8106fbc:	2300      	movs	r3, #0
 8106fbe:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	2b00      	cmp	r3, #0
 8106fc4:	d101      	bne.n	8106fca <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8106fc6:	2301      	movs	r3, #1
 8106fc8:	e0e2      	b.n	8107190 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	2200      	movs	r2, #0
 8106fce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106fd0:	687b      	ldr	r3, [r7, #4]
 8106fd2:	681b      	ldr	r3, [r3, #0]
 8106fd4:	4a70      	ldr	r2, [pc, #448]	; (8107198 <HAL_SPI_Init+0x1e4>)
 8106fd6:	4293      	cmp	r3, r2
 8106fd8:	d00f      	beq.n	8106ffa <HAL_SPI_Init+0x46>
 8106fda:	687b      	ldr	r3, [r7, #4]
 8106fdc:	681b      	ldr	r3, [r3, #0]
 8106fde:	4a6f      	ldr	r2, [pc, #444]	; (810719c <HAL_SPI_Init+0x1e8>)
 8106fe0:	4293      	cmp	r3, r2
 8106fe2:	d00a      	beq.n	8106ffa <HAL_SPI_Init+0x46>
 8106fe4:	687b      	ldr	r3, [r7, #4]
 8106fe6:	681b      	ldr	r3, [r3, #0]
 8106fe8:	4a6d      	ldr	r2, [pc, #436]	; (81071a0 <HAL_SPI_Init+0x1ec>)
 8106fea:	4293      	cmp	r3, r2
 8106fec:	d005      	beq.n	8106ffa <HAL_SPI_Init+0x46>
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	68db      	ldr	r3, [r3, #12]
 8106ff2:	2b0f      	cmp	r3, #15
 8106ff4:	d901      	bls.n	8106ffa <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8106ff6:	2301      	movs	r3, #1
 8106ff8:	e0ca      	b.n	8107190 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8106ffa:	6878      	ldr	r0, [r7, #4]
 8106ffc:	f000 fb96 	bl	810772c <SPI_GetPacketSize>
 8107000:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	681b      	ldr	r3, [r3, #0]
 8107006:	4a64      	ldr	r2, [pc, #400]	; (8107198 <HAL_SPI_Init+0x1e4>)
 8107008:	4293      	cmp	r3, r2
 810700a:	d00c      	beq.n	8107026 <HAL_SPI_Init+0x72>
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	681b      	ldr	r3, [r3, #0]
 8107010:	4a62      	ldr	r2, [pc, #392]	; (810719c <HAL_SPI_Init+0x1e8>)
 8107012:	4293      	cmp	r3, r2
 8107014:	d007      	beq.n	8107026 <HAL_SPI_Init+0x72>
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	681b      	ldr	r3, [r3, #0]
 810701a:	4a61      	ldr	r2, [pc, #388]	; (81071a0 <HAL_SPI_Init+0x1ec>)
 810701c:	4293      	cmp	r3, r2
 810701e:	d002      	beq.n	8107026 <HAL_SPI_Init+0x72>
 8107020:	68bb      	ldr	r3, [r7, #8]
 8107022:	2b08      	cmp	r3, #8
 8107024:	d811      	bhi.n	810704a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810702a:	4a5b      	ldr	r2, [pc, #364]	; (8107198 <HAL_SPI_Init+0x1e4>)
 810702c:	4293      	cmp	r3, r2
 810702e:	d009      	beq.n	8107044 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	681b      	ldr	r3, [r3, #0]
 8107034:	4a59      	ldr	r2, [pc, #356]	; (810719c <HAL_SPI_Init+0x1e8>)
 8107036:	4293      	cmp	r3, r2
 8107038:	d004      	beq.n	8107044 <HAL_SPI_Init+0x90>
 810703a:	687b      	ldr	r3, [r7, #4]
 810703c:	681b      	ldr	r3, [r3, #0]
 810703e:	4a58      	ldr	r2, [pc, #352]	; (81071a0 <HAL_SPI_Init+0x1ec>)
 8107040:	4293      	cmp	r3, r2
 8107042:	d104      	bne.n	810704e <HAL_SPI_Init+0x9a>
 8107044:	68bb      	ldr	r3, [r7, #8]
 8107046:	2b10      	cmp	r3, #16
 8107048:	d901      	bls.n	810704e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810704a:	2301      	movs	r3, #1
 810704c:	e0a0      	b.n	8107190 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107054:	b2db      	uxtb	r3, r3
 8107056:	2b00      	cmp	r3, #0
 8107058:	d106      	bne.n	8107068 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	2200      	movs	r2, #0
 810705e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8107062:	6878      	ldr	r0, [r7, #4]
 8107064:	f7fa fcb6 	bl	81019d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	2202      	movs	r2, #2
 810706c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	681b      	ldr	r3, [r3, #0]
 8107074:	681a      	ldr	r2, [r3, #0]
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	681b      	ldr	r3, [r3, #0]
 810707a:	f022 0201 	bic.w	r2, r2, #1
 810707e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	699b      	ldr	r3, [r3, #24]
 8107084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107088:	d110      	bne.n	81070ac <HAL_SPI_Init+0xf8>
 810708a:	687b      	ldr	r3, [r7, #4]
 810708c:	685b      	ldr	r3, [r3, #4]
 810708e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107092:	d10b      	bne.n	81070ac <HAL_SPI_Init+0xf8>
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107098:	2b00      	cmp	r3, #0
 810709a:	d107      	bne.n	81070ac <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	681a      	ldr	r2, [r3, #0]
 81070a2:	687b      	ldr	r3, [r7, #4]
 81070a4:	681b      	ldr	r3, [r3, #0]
 81070a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81070aa:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	69da      	ldr	r2, [r3, #28]
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81070b4:	431a      	orrs	r2, r3
 81070b6:	68fb      	ldr	r3, [r7, #12]
 81070b8:	431a      	orrs	r2, r3
 81070ba:	687b      	ldr	r3, [r7, #4]
 81070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81070be:	ea42 0103 	orr.w	r1, r2, r3
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	68da      	ldr	r2, [r3, #12]
 81070c6:	687b      	ldr	r3, [r7, #4]
 81070c8:	681b      	ldr	r3, [r3, #0]
 81070ca:	430a      	orrs	r2, r1
 81070cc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81070d2:	687b      	ldr	r3, [r7, #4]
 81070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81070d6:	431a      	orrs	r2, r3
 81070d8:	687b      	ldr	r3, [r7, #4]
 81070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81070dc:	431a      	orrs	r2, r3
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	699b      	ldr	r3, [r3, #24]
 81070e2:	431a      	orrs	r2, r3
 81070e4:	687b      	ldr	r3, [r7, #4]
 81070e6:	691b      	ldr	r3, [r3, #16]
 81070e8:	431a      	orrs	r2, r3
 81070ea:	687b      	ldr	r3, [r7, #4]
 81070ec:	695b      	ldr	r3, [r3, #20]
 81070ee:	431a      	orrs	r2, r3
 81070f0:	687b      	ldr	r3, [r7, #4]
 81070f2:	6a1b      	ldr	r3, [r3, #32]
 81070f4:	431a      	orrs	r2, r3
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	685b      	ldr	r3, [r3, #4]
 81070fa:	431a      	orrs	r2, r3
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107100:	431a      	orrs	r2, r3
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	689b      	ldr	r3, [r3, #8]
 8107106:	431a      	orrs	r2, r3
 8107108:	687b      	ldr	r3, [r7, #4]
 810710a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810710c:	ea42 0103 	orr.w	r1, r2, r3
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8107114:	687b      	ldr	r3, [r7, #4]
 8107116:	681b      	ldr	r3, [r3, #0]
 8107118:	430a      	orrs	r2, r1
 810711a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	685b      	ldr	r3, [r3, #4]
 8107120:	2b00      	cmp	r3, #0
 8107122:	d113      	bne.n	810714c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8107124:	687b      	ldr	r3, [r7, #4]
 8107126:	681b      	ldr	r3, [r3, #0]
 8107128:	689b      	ldr	r3, [r3, #8]
 810712a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	681b      	ldr	r3, [r3, #0]
 8107132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107136:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8107138:	687b      	ldr	r3, [r7, #4]
 810713a:	681b      	ldr	r3, [r3, #0]
 810713c:	689b      	ldr	r3, [r3, #8]
 810713e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8107142:	687b      	ldr	r3, [r7, #4]
 8107144:	681b      	ldr	r3, [r3, #0]
 8107146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810714a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	681b      	ldr	r3, [r3, #0]
 8107150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	681b      	ldr	r3, [r3, #0]
 8107156:	f022 0201 	bic.w	r2, r2, #1
 810715a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810715c:	687b      	ldr	r3, [r7, #4]
 810715e:	685b      	ldr	r3, [r3, #4]
 8107160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8107164:	2b00      	cmp	r3, #0
 8107166:	d00a      	beq.n	810717e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107168:	687b      	ldr	r3, [r7, #4]
 810716a:	681b      	ldr	r3, [r3, #0]
 810716c:	68db      	ldr	r3, [r3, #12]
 810716e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8107172:	687b      	ldr	r3, [r7, #4]
 8107174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	681b      	ldr	r3, [r3, #0]
 810717a:	430a      	orrs	r2, r1
 810717c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	2200      	movs	r2, #0
 8107182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	2201      	movs	r2, #1
 810718a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810718e:	2300      	movs	r3, #0
}
 8107190:	4618      	mov	r0, r3
 8107192:	3710      	adds	r7, #16
 8107194:	46bd      	mov	sp, r7
 8107196:	bd80      	pop	{r7, pc}
 8107198:	40013000 	.word	0x40013000
 810719c:	40003800 	.word	0x40003800
 81071a0:	40003c00 	.word	0x40003c00

081071a4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 81071a4:	b580      	push	{r7, lr}
 81071a6:	b08a      	sub	sp, #40	; 0x28
 81071a8:	af00      	add	r7, sp, #0
 81071aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	681b      	ldr	r3, [r3, #0]
 81071b0:	691b      	ldr	r3, [r3, #16]
 81071b2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 81071b4:	687b      	ldr	r3, [r7, #4]
 81071b6:	681b      	ldr	r3, [r3, #0]
 81071b8:	695b      	ldr	r3, [r3, #20]
 81071ba:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 81071bc:	6a3a      	ldr	r2, [r7, #32]
 81071be:	69fb      	ldr	r3, [r7, #28]
 81071c0:	4013      	ands	r3, r2
 81071c2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 81071c4:	687b      	ldr	r3, [r7, #4]
 81071c6:	681b      	ldr	r3, [r3, #0]
 81071c8:	689b      	ldr	r3, [r3, #8]
 81071ca:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 81071cc:	2300      	movs	r3, #0
 81071ce:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81071d6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81071d8:	687b      	ldr	r3, [r7, #4]
 81071da:	681b      	ldr	r3, [r3, #0]
 81071dc:	3330      	adds	r3, #48	; 0x30
 81071de:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 81071e0:	69bb      	ldr	r3, [r7, #24]
 81071e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81071e6:	2b00      	cmp	r3, #0
 81071e8:	d113      	bne.n	8107212 <HAL_SPI_IRQHandler+0x6e>
 81071ea:	69bb      	ldr	r3, [r7, #24]
 81071ec:	f003 0320 	and.w	r3, r3, #32
 81071f0:	2b00      	cmp	r3, #0
 81071f2:	d10e      	bne.n	8107212 <HAL_SPI_IRQHandler+0x6e>
 81071f4:	69bb      	ldr	r3, [r7, #24]
 81071f6:	f003 0304 	and.w	r3, r3, #4
 81071fa:	2b00      	cmp	r3, #0
 81071fc:	d009      	beq.n	8107212 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107202:	6878      	ldr	r0, [r7, #4]
 8107204:	4798      	blx	r3
    hspi->RxISR(hspi);
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810720a:	6878      	ldr	r0, [r7, #4]
 810720c:	4798      	blx	r3
    handled = 1UL;
 810720e:	2301      	movs	r3, #1
 8107210:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8107212:	69bb      	ldr	r3, [r7, #24]
 8107214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107218:	2b00      	cmp	r3, #0
 810721a:	d10f      	bne.n	810723c <HAL_SPI_IRQHandler+0x98>
 810721c:	69bb      	ldr	r3, [r7, #24]
 810721e:	f003 0301 	and.w	r3, r3, #1
 8107222:	2b00      	cmp	r3, #0
 8107224:	d00a      	beq.n	810723c <HAL_SPI_IRQHandler+0x98>
 8107226:	69bb      	ldr	r3, [r7, #24]
 8107228:	f003 0304 	and.w	r3, r3, #4
 810722c:	2b00      	cmp	r3, #0
 810722e:	d105      	bne.n	810723c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107234:	6878      	ldr	r0, [r7, #4]
 8107236:	4798      	blx	r3
    handled = 1UL;
 8107238:	2301      	movs	r3, #1
 810723a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810723c:	69bb      	ldr	r3, [r7, #24]
 810723e:	f003 0320 	and.w	r3, r3, #32
 8107242:	2b00      	cmp	r3, #0
 8107244:	d10f      	bne.n	8107266 <HAL_SPI_IRQHandler+0xc2>
 8107246:	69bb      	ldr	r3, [r7, #24]
 8107248:	f003 0302 	and.w	r3, r3, #2
 810724c:	2b00      	cmp	r3, #0
 810724e:	d00a      	beq.n	8107266 <HAL_SPI_IRQHandler+0xc2>
 8107250:	69bb      	ldr	r3, [r7, #24]
 8107252:	f003 0304 	and.w	r3, r3, #4
 8107256:	2b00      	cmp	r3, #0
 8107258:	d105      	bne.n	8107266 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810725a:	687b      	ldr	r3, [r7, #4]
 810725c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810725e:	6878      	ldr	r0, [r7, #4]
 8107260:	4798      	blx	r3
    handled = 1UL;
 8107262:	2301      	movs	r3, #1
 8107264:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8107266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107268:	2b00      	cmp	r3, #0
 810726a:	f040 8172 	bne.w	8107552 <HAL_SPI_IRQHandler+0x3ae>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810726e:	69bb      	ldr	r3, [r7, #24]
 8107270:	f003 0308 	and.w	r3, r3, #8
 8107274:	2b00      	cmp	r3, #0
 8107276:	f000 80a0 	beq.w	81073ba <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	699a      	ldr	r2, [r3, #24]
 8107280:	687b      	ldr	r3, [r7, #4]
 8107282:	681b      	ldr	r3, [r3, #0]
 8107284:	f042 0208 	orr.w	r2, r2, #8
 8107288:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	681b      	ldr	r3, [r3, #0]
 810728e:	699a      	ldr	r2, [r3, #24]
 8107290:	687b      	ldr	r3, [r7, #4]
 8107292:	681b      	ldr	r3, [r3, #0]
 8107294:	f042 0210 	orr.w	r2, r2, #16
 8107298:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810729a:	687b      	ldr	r3, [r7, #4]
 810729c:	681b      	ldr	r3, [r3, #0]
 810729e:	699a      	ldr	r2, [r3, #24]
 81072a0:	687b      	ldr	r3, [r7, #4]
 81072a2:	681b      	ldr	r3, [r3, #0]
 81072a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81072a8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	681b      	ldr	r3, [r3, #0]
 81072ae:	691a      	ldr	r2, [r3, #16]
 81072b0:	687b      	ldr	r3, [r7, #4]
 81072b2:	681b      	ldr	r3, [r3, #0]
 81072b4:	f022 0208 	bic.w	r2, r2, #8
 81072b8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 81072ba:	697b      	ldr	r3, [r7, #20]
 81072bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 81072c0:	2b00      	cmp	r3, #0
 81072c2:	d00f      	beq.n	81072e4 <HAL_SPI_IRQHandler+0x140>
 81072c4:	7cfb      	ldrb	r3, [r7, #19]
 81072c6:	2b04      	cmp	r3, #4
 81072c8:	d004      	beq.n	81072d4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 81072ca:	687b      	ldr	r3, [r7, #4]
 81072cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81072ce:	69db      	ldr	r3, [r3, #28]
 81072d0:	2b00      	cmp	r3, #0
 81072d2:	d007      	beq.n	81072e4 <HAL_SPI_IRQHandler+0x140>
 81072d4:	7cfb      	ldrb	r3, [r7, #19]
 81072d6:	2b03      	cmp	r3, #3
 81072d8:	d059      	beq.n	810738e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 81072da:	687b      	ldr	r3, [r7, #4]
 81072dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81072de:	69db      	ldr	r3, [r3, #28]
 81072e0:	2b00      	cmp	r3, #0
 81072e2:	d154      	bne.n	810738e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81072e4:	687b      	ldr	r3, [r7, #4]
 81072e6:	681b      	ldr	r3, [r3, #0]
 81072e8:	689b      	ldr	r3, [r3, #8]
 81072ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 81072ee:	2b00      	cmp	r3, #0
 81072f0:	d13d      	bne.n	810736e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 81072f2:	e036      	b.n	8107362 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81072f4:	687b      	ldr	r3, [r7, #4]
 81072f6:	68db      	ldr	r3, [r3, #12]
 81072f8:	2b0f      	cmp	r3, #15
 81072fa:	d90b      	bls.n	8107314 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81072fc:	687b      	ldr	r3, [r7, #4]
 81072fe:	681a      	ldr	r2, [r3, #0]
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107304:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8107306:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810730c:	1d1a      	adds	r2, r3, #4
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	665a      	str	r2, [r3, #100]	; 0x64
 8107312:	e01d      	b.n	8107350 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	68db      	ldr	r3, [r3, #12]
 8107318:	2b07      	cmp	r3, #7
 810731a:	d90b      	bls.n	8107334 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810731c:	687b      	ldr	r3, [r7, #4]
 810731e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107320:	68fa      	ldr	r2, [r7, #12]
 8107322:	8812      	ldrh	r2, [r2, #0]
 8107324:	b292      	uxth	r2, r2
 8107326:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810732c:	1c9a      	adds	r2, r3, #2
 810732e:	687b      	ldr	r3, [r7, #4]
 8107330:	665a      	str	r2, [r3, #100]	; 0x64
 8107332:	e00d      	b.n	8107350 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107334:	687b      	ldr	r3, [r7, #4]
 8107336:	681b      	ldr	r3, [r3, #0]
 8107338:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810733c:	687b      	ldr	r3, [r7, #4]
 810733e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107340:	7812      	ldrb	r2, [r2, #0]
 8107342:	b2d2      	uxtb	r2, r2
 8107344:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810734a:	1c5a      	adds	r2, r3, #1
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107356:	b29b      	uxth	r3, r3
 8107358:	3b01      	subs	r3, #1
 810735a:	b29a      	uxth	r2, r3
 810735c:	687b      	ldr	r3, [r7, #4]
 810735e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8107362:	687b      	ldr	r3, [r7, #4]
 8107364:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107368:	b29b      	uxth	r3, r3
 810736a:	2b00      	cmp	r3, #0
 810736c:	d1c2      	bne.n	81072f4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810736e:	6878      	ldr	r0, [r7, #4]
 8107370:	f000 f93c 	bl	81075ec <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8107374:	687b      	ldr	r3, [r7, #4]
 8107376:	2201      	movs	r2, #1
 8107378:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810737c:	687b      	ldr	r3, [r7, #4]
 810737e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107382:	2b00      	cmp	r3, #0
 8107384:	d003      	beq.n	810738e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8107386:	6878      	ldr	r0, [r7, #4]
 8107388:	f000 f90c 	bl	81075a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810738c:	e0e6      	b.n	810755c <HAL_SPI_IRQHandler+0x3b8>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810738e:	7cfb      	ldrb	r3, [r7, #19]
 8107390:	2b05      	cmp	r3, #5
 8107392:	d103      	bne.n	810739c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8107394:	6878      	ldr	r0, [r7, #4]
 8107396:	f000 f8fb 	bl	8107590 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 810739a:	e0dc      	b.n	8107556 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810739c:	7cfb      	ldrb	r3, [r7, #19]
 810739e:	2b04      	cmp	r3, #4
 81073a0:	d103      	bne.n	81073aa <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 81073a2:	6878      	ldr	r0, [r7, #4]
 81073a4:	f000 f8ea 	bl	810757c <HAL_SPI_RxCpltCallback>
    return;
 81073a8:	e0d5      	b.n	8107556 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 81073aa:	7cfb      	ldrb	r3, [r7, #19]
 81073ac:	2b03      	cmp	r3, #3
 81073ae:	f040 80d2 	bne.w	8107556 <HAL_SPI_IRQHandler+0x3b2>
      HAL_SPI_TxCpltCallback(hspi);
 81073b2:	6878      	ldr	r0, [r7, #4]
 81073b4:	f000 f8d8 	bl	8107568 <HAL_SPI_TxCpltCallback>
    return;
 81073b8:	e0cd      	b.n	8107556 <HAL_SPI_IRQHandler+0x3b2>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 81073ba:	69fb      	ldr	r3, [r7, #28]
 81073bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d00d      	beq.n	81073e0 <HAL_SPI_IRQHandler+0x23c>
 81073c4:	6a3b      	ldr	r3, [r7, #32]
 81073c6:	f003 0308 	and.w	r3, r3, #8
 81073ca:	2b00      	cmp	r3, #0
 81073cc:	d008      	beq.n	81073e0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	699a      	ldr	r2, [r3, #24]
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	681b      	ldr	r3, [r3, #0]
 81073d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81073dc:	619a      	str	r2, [r3, #24]

    return;
 81073de:	e0bd      	b.n	810755c <HAL_SPI_IRQHandler+0x3b8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 81073e0:	69bb      	ldr	r3, [r7, #24]
 81073e2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 81073e6:	2b00      	cmp	r3, #0
 81073e8:	f000 80b8 	beq.w	810755c <HAL_SPI_IRQHandler+0x3b8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 81073ec:	69bb      	ldr	r3, [r7, #24]
 81073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81073f2:	2b00      	cmp	r3, #0
 81073f4:	d00f      	beq.n	8107416 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81073f6:	687b      	ldr	r3, [r7, #4]
 81073f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81073fc:	f043 0204 	orr.w	r2, r3, #4
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	681b      	ldr	r3, [r3, #0]
 810740a:	699a      	ldr	r2, [r3, #24]
 810740c:	687b      	ldr	r3, [r7, #4]
 810740e:	681b      	ldr	r3, [r3, #0]
 8107410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107414:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8107416:	69bb      	ldr	r3, [r7, #24]
 8107418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810741c:	2b00      	cmp	r3, #0
 810741e:	d00f      	beq.n	8107440 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8107420:	687b      	ldr	r3, [r7, #4]
 8107422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107426:	f043 0201 	orr.w	r2, r3, #1
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8107430:	687b      	ldr	r3, [r7, #4]
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	699a      	ldr	r2, [r3, #24]
 8107436:	687b      	ldr	r3, [r7, #4]
 8107438:	681b      	ldr	r3, [r3, #0]
 810743a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810743e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8107440:	69bb      	ldr	r3, [r7, #24]
 8107442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107446:	2b00      	cmp	r3, #0
 8107448:	d00f      	beq.n	810746a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107450:	f043 0208 	orr.w	r2, r3, #8
 8107454:	687b      	ldr	r3, [r7, #4]
 8107456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	681b      	ldr	r3, [r3, #0]
 810745e:	699a      	ldr	r2, [r3, #24]
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	681b      	ldr	r3, [r3, #0]
 8107464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107468:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810746a:	69bb      	ldr	r3, [r7, #24]
 810746c:	f003 0320 	and.w	r3, r3, #32
 8107470:	2b00      	cmp	r3, #0
 8107472:	d00f      	beq.n	8107494 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8107474:	687b      	ldr	r3, [r7, #4]
 8107476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810747a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810747e:	687b      	ldr	r3, [r7, #4]
 8107480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	681b      	ldr	r3, [r3, #0]
 8107488:	699a      	ldr	r2, [r3, #24]
 810748a:	687b      	ldr	r3, [r7, #4]
 810748c:	681b      	ldr	r3, [r3, #0]
 810748e:	f042 0220 	orr.w	r2, r2, #32
 8107492:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810749a:	2b00      	cmp	r3, #0
 810749c:	d05d      	beq.n	810755a <HAL_SPI_IRQHandler+0x3b6>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810749e:	687b      	ldr	r3, [r7, #4]
 81074a0:	681b      	ldr	r3, [r3, #0]
 81074a2:	681a      	ldr	r2, [r3, #0]
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	f022 0201 	bic.w	r2, r2, #1
 81074ac:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 81074ae:	687b      	ldr	r3, [r7, #4]
 81074b0:	681b      	ldr	r3, [r3, #0]
 81074b2:	691b      	ldr	r3, [r3, #16]
 81074b4:	687a      	ldr	r2, [r7, #4]
 81074b6:	6812      	ldr	r2, [r2, #0]
 81074b8:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 81074bc:	f023 0303 	bic.w	r3, r3, #3
 81074c0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81074c2:	697b      	ldr	r3, [r7, #20]
 81074c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 81074c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 81074cc:	d138      	bne.n	8107540 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81074ce:	687b      	ldr	r3, [r7, #4]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	689a      	ldr	r2, [r3, #8]
 81074d4:	687b      	ldr	r3, [r7, #4]
 81074d6:	681b      	ldr	r3, [r3, #0]
 81074d8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81074dc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81074e2:	2b00      	cmp	r3, #0
 81074e4:	d013      	beq.n	810750e <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81074ea:	4a1e      	ldr	r2, [pc, #120]	; (8107564 <HAL_SPI_IRQHandler+0x3c0>)
 81074ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81074f2:	4618      	mov	r0, r3
 81074f4:	f7fb fde6 	bl	81030c4 <HAL_DMA_Abort_IT>
 81074f8:	4603      	mov	r3, r0
 81074fa:	2b00      	cmp	r3, #0
 81074fc:	d007      	beq.n	810750e <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81074fe:	687b      	ldr	r3, [r7, #4]
 8107500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107504:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8107508:	687b      	ldr	r3, [r7, #4]
 810750a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810750e:	687b      	ldr	r3, [r7, #4]
 8107510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107512:	2b00      	cmp	r3, #0
 8107514:	d021      	beq.n	810755a <HAL_SPI_IRQHandler+0x3b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810751a:	4a12      	ldr	r2, [pc, #72]	; (8107564 <HAL_SPI_IRQHandler+0x3c0>)
 810751c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107522:	4618      	mov	r0, r3
 8107524:	f7fb fdce 	bl	81030c4 <HAL_DMA_Abort_IT>
 8107528:	4603      	mov	r3, r0
 810752a:	2b00      	cmp	r3, #0
 810752c:	d015      	beq.n	810755a <HAL_SPI_IRQHandler+0x3b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810752e:	687b      	ldr	r3, [r7, #4]
 8107530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107534:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810753e:	e00c      	b.n	810755a <HAL_SPI_IRQHandler+0x3b6>
        hspi->State = HAL_SPI_STATE_READY;
 8107540:	687b      	ldr	r3, [r7, #4]
 8107542:	2201      	movs	r2, #1
 8107544:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8107548:	6878      	ldr	r0, [r7, #4]
 810754a:	f000 f82b 	bl	81075a4 <HAL_SPI_ErrorCallback>
    return;
 810754e:	bf00      	nop
 8107550:	e003      	b.n	810755a <HAL_SPI_IRQHandler+0x3b6>
    return;
 8107552:	bf00      	nop
 8107554:	e002      	b.n	810755c <HAL_SPI_IRQHandler+0x3b8>
    return;
 8107556:	bf00      	nop
 8107558:	e000      	b.n	810755c <HAL_SPI_IRQHandler+0x3b8>
    return;
 810755a:	bf00      	nop
  }
}
 810755c:	3728      	adds	r7, #40	; 0x28
 810755e:	46bd      	mov	sp, r7
 8107560:	bd80      	pop	{r7, pc}
 8107562:	bf00      	nop
 8107564:	081075b9 	.word	0x081075b9

08107568 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8107568:	b480      	push	{r7}
 810756a:	b083      	sub	sp, #12
 810756c:	af00      	add	r7, sp, #0
 810756e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8107570:	bf00      	nop
 8107572:	370c      	adds	r7, #12
 8107574:	46bd      	mov	sp, r7
 8107576:	f85d 7b04 	ldr.w	r7, [sp], #4
 810757a:	4770      	bx	lr

0810757c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810757c:	b480      	push	{r7}
 810757e:	b083      	sub	sp, #12
 8107580:	af00      	add	r7, sp, #0
 8107582:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8107584:	bf00      	nop
 8107586:	370c      	adds	r7, #12
 8107588:	46bd      	mov	sp, r7
 810758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810758e:	4770      	bx	lr

08107590 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8107590:	b480      	push	{r7}
 8107592:	b083      	sub	sp, #12
 8107594:	af00      	add	r7, sp, #0
 8107596:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8107598:	bf00      	nop
 810759a:	370c      	adds	r7, #12
 810759c:	46bd      	mov	sp, r7
 810759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075a2:	4770      	bx	lr

081075a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 81075a4:	b480      	push	{r7}
 81075a6:	b083      	sub	sp, #12
 81075a8:	af00      	add	r7, sp, #0
 81075aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 81075ac:	bf00      	nop
 81075ae:	370c      	adds	r7, #12
 81075b0:	46bd      	mov	sp, r7
 81075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075b6:	4770      	bx	lr

081075b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81075b8:	b580      	push	{r7, lr}
 81075ba:	b084      	sub	sp, #16
 81075bc:	af00      	add	r7, sp, #0
 81075be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81075c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 81075c6:	68fb      	ldr	r3, [r7, #12]
 81075c8:	2200      	movs	r2, #0
 81075ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 81075ce:	68fb      	ldr	r3, [r7, #12]
 81075d0:	2200      	movs	r2, #0
 81075d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	2201      	movs	r2, #1
 81075da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 81075de:	68f8      	ldr	r0, [r7, #12]
 81075e0:	f7ff ffe0 	bl	81075a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 81075e4:	bf00      	nop
 81075e6:	3710      	adds	r7, #16
 81075e8:	46bd      	mov	sp, r7
 81075ea:	bd80      	pop	{r7, pc}

081075ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81075ec:	b480      	push	{r7}
 81075ee:	b085      	sub	sp, #20
 81075f0:	af00      	add	r7, sp, #0
 81075f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	681b      	ldr	r3, [r3, #0]
 81075f8:	695b      	ldr	r3, [r3, #20]
 81075fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	681b      	ldr	r3, [r3, #0]
 8107600:	699a      	ldr	r2, [r3, #24]
 8107602:	687b      	ldr	r3, [r7, #4]
 8107604:	681b      	ldr	r3, [r3, #0]
 8107606:	f042 0208 	orr.w	r2, r2, #8
 810760a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810760c:	687b      	ldr	r3, [r7, #4]
 810760e:	681b      	ldr	r3, [r3, #0]
 8107610:	699a      	ldr	r2, [r3, #24]
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	681b      	ldr	r3, [r3, #0]
 8107616:	f042 0210 	orr.w	r2, r2, #16
 810761a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810761c:	687b      	ldr	r3, [r7, #4]
 810761e:	681b      	ldr	r3, [r3, #0]
 8107620:	681a      	ldr	r2, [r3, #0]
 8107622:	687b      	ldr	r3, [r7, #4]
 8107624:	681b      	ldr	r3, [r3, #0]
 8107626:	f022 0201 	bic.w	r2, r2, #1
 810762a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810762c:	687b      	ldr	r3, [r7, #4]
 810762e:	681b      	ldr	r3, [r3, #0]
 8107630:	691b      	ldr	r3, [r3, #16]
 8107632:	687a      	ldr	r2, [r7, #4]
 8107634:	6812      	ldr	r2, [r2, #0]
 8107636:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810763a:	f023 0303 	bic.w	r3, r3, #3
 810763e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	681b      	ldr	r3, [r3, #0]
 8107644:	689a      	ldr	r2, [r3, #8]
 8107646:	687b      	ldr	r3, [r7, #4]
 8107648:	681b      	ldr	r3, [r3, #0]
 810764a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810764e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8107650:	687b      	ldr	r3, [r7, #4]
 8107652:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107656:	b2db      	uxtb	r3, r3
 8107658:	2b04      	cmp	r3, #4
 810765a:	d014      	beq.n	8107686 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810765c:	68fb      	ldr	r3, [r7, #12]
 810765e:	f003 0320 	and.w	r3, r3, #32
 8107662:	2b00      	cmp	r3, #0
 8107664:	d00f      	beq.n	8107686 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810766c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8107670:	687b      	ldr	r3, [r7, #4]
 8107672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8107676:	687b      	ldr	r3, [r7, #4]
 8107678:	681b      	ldr	r3, [r3, #0]
 810767a:	699a      	ldr	r2, [r3, #24]
 810767c:	687b      	ldr	r3, [r7, #4]
 810767e:	681b      	ldr	r3, [r3, #0]
 8107680:	f042 0220 	orr.w	r2, r2, #32
 8107684:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8107686:	687b      	ldr	r3, [r7, #4]
 8107688:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810768c:	b2db      	uxtb	r3, r3
 810768e:	2b03      	cmp	r3, #3
 8107690:	d014      	beq.n	81076bc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8107692:	68fb      	ldr	r3, [r7, #12]
 8107694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107698:	2b00      	cmp	r3, #0
 810769a:	d00f      	beq.n	81076bc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81076a2:	f043 0204 	orr.w	r2, r3, #4
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	681b      	ldr	r3, [r3, #0]
 81076b0:	699a      	ldr	r2, [r3, #24]
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	681b      	ldr	r3, [r3, #0]
 81076b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81076ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81076bc:	68fb      	ldr	r3, [r7, #12]
 81076be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81076c2:	2b00      	cmp	r3, #0
 81076c4:	d00f      	beq.n	81076e6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81076c6:	687b      	ldr	r3, [r7, #4]
 81076c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81076cc:	f043 0201 	orr.w	r2, r3, #1
 81076d0:	687b      	ldr	r3, [r7, #4]
 81076d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	681b      	ldr	r3, [r3, #0]
 81076da:	699a      	ldr	r2, [r3, #24]
 81076dc:	687b      	ldr	r3, [r7, #4]
 81076de:	681b      	ldr	r3, [r3, #0]
 81076e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81076e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81076e6:	68fb      	ldr	r3, [r7, #12]
 81076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81076ec:	2b00      	cmp	r3, #0
 81076ee:	d00f      	beq.n	8107710 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81076f6:	f043 0208 	orr.w	r2, r3, #8
 81076fa:	687b      	ldr	r3, [r7, #4]
 81076fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	681b      	ldr	r3, [r3, #0]
 8107704:	699a      	ldr	r2, [r3, #24]
 8107706:	687b      	ldr	r3, [r7, #4]
 8107708:	681b      	ldr	r3, [r3, #0]
 810770a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810770e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	2200      	movs	r2, #0
 8107714:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8107718:	687b      	ldr	r3, [r7, #4]
 810771a:	2200      	movs	r2, #0
 810771c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8107720:	bf00      	nop
 8107722:	3714      	adds	r7, #20
 8107724:	46bd      	mov	sp, r7
 8107726:	f85d 7b04 	ldr.w	r7, [sp], #4
 810772a:	4770      	bx	lr

0810772c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810772c:	b480      	push	{r7}
 810772e:	b085      	sub	sp, #20
 8107730:	af00      	add	r7, sp, #0
 8107732:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107738:	095b      	lsrs	r3, r3, #5
 810773a:	3301      	adds	r3, #1
 810773c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810773e:	687b      	ldr	r3, [r7, #4]
 8107740:	68db      	ldr	r3, [r3, #12]
 8107742:	3301      	adds	r3, #1
 8107744:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8107746:	68bb      	ldr	r3, [r7, #8]
 8107748:	3307      	adds	r3, #7
 810774a:	08db      	lsrs	r3, r3, #3
 810774c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810774e:	68bb      	ldr	r3, [r7, #8]
 8107750:	68fa      	ldr	r2, [r7, #12]
 8107752:	fb02 f303 	mul.w	r3, r2, r3
}
 8107756:	4618      	mov	r0, r3
 8107758:	3714      	adds	r7, #20
 810775a:	46bd      	mov	sp, r7
 810775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107760:	4770      	bx	lr

08107762 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107762:	b580      	push	{r7, lr}
 8107764:	b082      	sub	sp, #8
 8107766:	af00      	add	r7, sp, #0
 8107768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	2b00      	cmp	r3, #0
 810776e:	d101      	bne.n	8107774 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107770:	2301      	movs	r3, #1
 8107772:	e049      	b.n	8107808 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810777a:	b2db      	uxtb	r3, r3
 810777c:	2b00      	cmp	r3, #0
 810777e:	d106      	bne.n	810778e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107780:	687b      	ldr	r3, [r7, #4]
 8107782:	2200      	movs	r2, #0
 8107784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107788:	6878      	ldr	r0, [r7, #4]
 810778a:	f000 f841 	bl	8107810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810778e:	687b      	ldr	r3, [r7, #4]
 8107790:	2202      	movs	r2, #2
 8107792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107796:	687b      	ldr	r3, [r7, #4]
 8107798:	681a      	ldr	r2, [r3, #0]
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	3304      	adds	r3, #4
 810779e:	4619      	mov	r1, r3
 81077a0:	4610      	mov	r0, r2
 81077a2:	f000 f9bd 	bl	8107b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81077a6:	687b      	ldr	r3, [r7, #4]
 81077a8:	2201      	movs	r2, #1
 81077aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81077ae:	687b      	ldr	r3, [r7, #4]
 81077b0:	2201      	movs	r2, #1
 81077b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81077b6:	687b      	ldr	r3, [r7, #4]
 81077b8:	2201      	movs	r2, #1
 81077ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81077be:	687b      	ldr	r3, [r7, #4]
 81077c0:	2201      	movs	r2, #1
 81077c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81077c6:	687b      	ldr	r3, [r7, #4]
 81077c8:	2201      	movs	r2, #1
 81077ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81077ce:	687b      	ldr	r3, [r7, #4]
 81077d0:	2201      	movs	r2, #1
 81077d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81077d6:	687b      	ldr	r3, [r7, #4]
 81077d8:	2201      	movs	r2, #1
 81077da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81077de:	687b      	ldr	r3, [r7, #4]
 81077e0:	2201      	movs	r2, #1
 81077e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	2201      	movs	r2, #1
 81077ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81077ee:	687b      	ldr	r3, [r7, #4]
 81077f0:	2201      	movs	r2, #1
 81077f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	2201      	movs	r2, #1
 81077fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81077fe:	687b      	ldr	r3, [r7, #4]
 8107800:	2201      	movs	r2, #1
 8107802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107806:	2300      	movs	r3, #0
}
 8107808:	4618      	mov	r0, r3
 810780a:	3708      	adds	r7, #8
 810780c:	46bd      	mov	sp, r7
 810780e:	bd80      	pop	{r7, pc}

08107810 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8107810:	b480      	push	{r7}
 8107812:	b083      	sub	sp, #12
 8107814:	af00      	add	r7, sp, #0
 8107816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8107818:	bf00      	nop
 810781a:	370c      	adds	r7, #12
 810781c:	46bd      	mov	sp, r7
 810781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107822:	4770      	bx	lr

08107824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8107824:	b480      	push	{r7}
 8107826:	b085      	sub	sp, #20
 8107828:	af00      	add	r7, sp, #0
 810782a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107832:	b2db      	uxtb	r3, r3
 8107834:	2b01      	cmp	r3, #1
 8107836:	d001      	beq.n	810783c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8107838:	2301      	movs	r3, #1
 810783a:	e021      	b.n	8107880 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810783c:	687b      	ldr	r3, [r7, #4]
 810783e:	2202      	movs	r2, #2
 8107840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	681b      	ldr	r3, [r3, #0]
 8107848:	68da      	ldr	r2, [r3, #12]
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	681b      	ldr	r3, [r3, #0]
 810784e:	f042 0201 	orr.w	r2, r2, #1
 8107852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	681b      	ldr	r3, [r3, #0]
 8107858:	689a      	ldr	r2, [r3, #8]
 810785a:	4b0c      	ldr	r3, [pc, #48]	; (810788c <HAL_TIM_Base_Start_IT+0x68>)
 810785c:	4013      	ands	r3, r2
 810785e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107860:	68fb      	ldr	r3, [r7, #12]
 8107862:	2b06      	cmp	r3, #6
 8107864:	d00b      	beq.n	810787e <HAL_TIM_Base_Start_IT+0x5a>
 8107866:	68fb      	ldr	r3, [r7, #12]
 8107868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810786c:	d007      	beq.n	810787e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810786e:	687b      	ldr	r3, [r7, #4]
 8107870:	681b      	ldr	r3, [r3, #0]
 8107872:	681a      	ldr	r2, [r3, #0]
 8107874:	687b      	ldr	r3, [r7, #4]
 8107876:	681b      	ldr	r3, [r3, #0]
 8107878:	f042 0201 	orr.w	r2, r2, #1
 810787c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810787e:	2300      	movs	r3, #0
}
 8107880:	4618      	mov	r0, r3
 8107882:	3714      	adds	r7, #20
 8107884:	46bd      	mov	sp, r7
 8107886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810788a:	4770      	bx	lr
 810788c:	00010007 	.word	0x00010007

08107890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8107890:	b580      	push	{r7, lr}
 8107892:	b082      	sub	sp, #8
 8107894:	af00      	add	r7, sp, #0
 8107896:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	681b      	ldr	r3, [r3, #0]
 810789c:	691b      	ldr	r3, [r3, #16]
 810789e:	f003 0302 	and.w	r3, r3, #2
 81078a2:	2b02      	cmp	r3, #2
 81078a4:	d122      	bne.n	81078ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81078a6:	687b      	ldr	r3, [r7, #4]
 81078a8:	681b      	ldr	r3, [r3, #0]
 81078aa:	68db      	ldr	r3, [r3, #12]
 81078ac:	f003 0302 	and.w	r3, r3, #2
 81078b0:	2b02      	cmp	r3, #2
 81078b2:	d11b      	bne.n	81078ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	681b      	ldr	r3, [r3, #0]
 81078b8:	f06f 0202 	mvn.w	r2, #2
 81078bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	2201      	movs	r2, #1
 81078c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	681b      	ldr	r3, [r3, #0]
 81078c8:	699b      	ldr	r3, [r3, #24]
 81078ca:	f003 0303 	and.w	r3, r3, #3
 81078ce:	2b00      	cmp	r3, #0
 81078d0:	d003      	beq.n	81078da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81078d2:	6878      	ldr	r0, [r7, #4]
 81078d4:	f000 f905 	bl	8107ae2 <HAL_TIM_IC_CaptureCallback>
 81078d8:	e005      	b.n	81078e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81078da:	6878      	ldr	r0, [r7, #4]
 81078dc:	f000 f8f7 	bl	8107ace <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81078e0:	6878      	ldr	r0, [r7, #4]
 81078e2:	f000 f908 	bl	8107af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81078e6:	687b      	ldr	r3, [r7, #4]
 81078e8:	2200      	movs	r2, #0
 81078ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	681b      	ldr	r3, [r3, #0]
 81078f0:	691b      	ldr	r3, [r3, #16]
 81078f2:	f003 0304 	and.w	r3, r3, #4
 81078f6:	2b04      	cmp	r3, #4
 81078f8:	d122      	bne.n	8107940 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	681b      	ldr	r3, [r3, #0]
 81078fe:	68db      	ldr	r3, [r3, #12]
 8107900:	f003 0304 	and.w	r3, r3, #4
 8107904:	2b04      	cmp	r3, #4
 8107906:	d11b      	bne.n	8107940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	f06f 0204 	mvn.w	r2, #4
 8107910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8107912:	687b      	ldr	r3, [r7, #4]
 8107914:	2202      	movs	r2, #2
 8107916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	681b      	ldr	r3, [r3, #0]
 810791c:	699b      	ldr	r3, [r3, #24]
 810791e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8107922:	2b00      	cmp	r3, #0
 8107924:	d003      	beq.n	810792e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107926:	6878      	ldr	r0, [r7, #4]
 8107928:	f000 f8db 	bl	8107ae2 <HAL_TIM_IC_CaptureCallback>
 810792c:	e005      	b.n	810793a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810792e:	6878      	ldr	r0, [r7, #4]
 8107930:	f000 f8cd 	bl	8107ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107934:	6878      	ldr	r0, [r7, #4]
 8107936:	f000 f8de 	bl	8107af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810793a:	687b      	ldr	r3, [r7, #4]
 810793c:	2200      	movs	r2, #0
 810793e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	681b      	ldr	r3, [r3, #0]
 8107944:	691b      	ldr	r3, [r3, #16]
 8107946:	f003 0308 	and.w	r3, r3, #8
 810794a:	2b08      	cmp	r3, #8
 810794c:	d122      	bne.n	8107994 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810794e:	687b      	ldr	r3, [r7, #4]
 8107950:	681b      	ldr	r3, [r3, #0]
 8107952:	68db      	ldr	r3, [r3, #12]
 8107954:	f003 0308 	and.w	r3, r3, #8
 8107958:	2b08      	cmp	r3, #8
 810795a:	d11b      	bne.n	8107994 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	681b      	ldr	r3, [r3, #0]
 8107960:	f06f 0208 	mvn.w	r2, #8
 8107964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	2204      	movs	r2, #4
 810796a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	681b      	ldr	r3, [r3, #0]
 8107970:	69db      	ldr	r3, [r3, #28]
 8107972:	f003 0303 	and.w	r3, r3, #3
 8107976:	2b00      	cmp	r3, #0
 8107978:	d003      	beq.n	8107982 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810797a:	6878      	ldr	r0, [r7, #4]
 810797c:	f000 f8b1 	bl	8107ae2 <HAL_TIM_IC_CaptureCallback>
 8107980:	e005      	b.n	810798e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107982:	6878      	ldr	r0, [r7, #4]
 8107984:	f000 f8a3 	bl	8107ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107988:	6878      	ldr	r0, [r7, #4]
 810798a:	f000 f8b4 	bl	8107af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810798e:	687b      	ldr	r3, [r7, #4]
 8107990:	2200      	movs	r2, #0
 8107992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	681b      	ldr	r3, [r3, #0]
 8107998:	691b      	ldr	r3, [r3, #16]
 810799a:	f003 0310 	and.w	r3, r3, #16
 810799e:	2b10      	cmp	r3, #16
 81079a0:	d122      	bne.n	81079e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	68db      	ldr	r3, [r3, #12]
 81079a8:	f003 0310 	and.w	r3, r3, #16
 81079ac:	2b10      	cmp	r3, #16
 81079ae:	d11b      	bne.n	81079e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	f06f 0210 	mvn.w	r2, #16
 81079b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	2208      	movs	r2, #8
 81079be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81079c0:	687b      	ldr	r3, [r7, #4]
 81079c2:	681b      	ldr	r3, [r3, #0]
 81079c4:	69db      	ldr	r3, [r3, #28]
 81079c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81079ca:	2b00      	cmp	r3, #0
 81079cc:	d003      	beq.n	81079d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81079ce:	6878      	ldr	r0, [r7, #4]
 81079d0:	f000 f887 	bl	8107ae2 <HAL_TIM_IC_CaptureCallback>
 81079d4:	e005      	b.n	81079e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81079d6:	6878      	ldr	r0, [r7, #4]
 81079d8:	f000 f879 	bl	8107ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81079dc:	6878      	ldr	r0, [r7, #4]
 81079de:	f000 f88a 	bl	8107af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81079e2:	687b      	ldr	r3, [r7, #4]
 81079e4:	2200      	movs	r2, #0
 81079e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	681b      	ldr	r3, [r3, #0]
 81079ec:	691b      	ldr	r3, [r3, #16]
 81079ee:	f003 0301 	and.w	r3, r3, #1
 81079f2:	2b01      	cmp	r3, #1
 81079f4:	d10e      	bne.n	8107a14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	681b      	ldr	r3, [r3, #0]
 81079fa:	68db      	ldr	r3, [r3, #12]
 81079fc:	f003 0301 	and.w	r3, r3, #1
 8107a00:	2b01      	cmp	r3, #1
 8107a02:	d107      	bne.n	8107a14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8107a04:	687b      	ldr	r3, [r7, #4]
 8107a06:	681b      	ldr	r3, [r3, #0]
 8107a08:	f06f 0201 	mvn.w	r2, #1
 8107a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8107a0e:	6878      	ldr	r0, [r7, #4]
 8107a10:	f7f9 fec8 	bl	81017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8107a14:	687b      	ldr	r3, [r7, #4]
 8107a16:	681b      	ldr	r3, [r3, #0]
 8107a18:	691b      	ldr	r3, [r3, #16]
 8107a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107a1e:	2b80      	cmp	r3, #128	; 0x80
 8107a20:	d10e      	bne.n	8107a40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107a22:	687b      	ldr	r3, [r7, #4]
 8107a24:	681b      	ldr	r3, [r3, #0]
 8107a26:	68db      	ldr	r3, [r3, #12]
 8107a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107a2c:	2b80      	cmp	r3, #128	; 0x80
 8107a2e:	d107      	bne.n	8107a40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8107a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8107a3a:	6878      	ldr	r0, [r7, #4]
 8107a3c:	f000 f914 	bl	8107c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	681b      	ldr	r3, [r3, #0]
 8107a44:	691b      	ldr	r3, [r3, #16]
 8107a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107a4e:	d10e      	bne.n	8107a6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107a50:	687b      	ldr	r3, [r7, #4]
 8107a52:	681b      	ldr	r3, [r3, #0]
 8107a54:	68db      	ldr	r3, [r3, #12]
 8107a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107a5a:	2b80      	cmp	r3, #128	; 0x80
 8107a5c:	d107      	bne.n	8107a6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8107a5e:	687b      	ldr	r3, [r7, #4]
 8107a60:	681b      	ldr	r3, [r3, #0]
 8107a62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8107a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107a68:	6878      	ldr	r0, [r7, #4]
 8107a6a:	f000 f907 	bl	8107c7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8107a6e:	687b      	ldr	r3, [r7, #4]
 8107a70:	681b      	ldr	r3, [r3, #0]
 8107a72:	691b      	ldr	r3, [r3, #16]
 8107a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a78:	2b40      	cmp	r3, #64	; 0x40
 8107a7a:	d10e      	bne.n	8107a9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	68db      	ldr	r3, [r3, #12]
 8107a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a86:	2b40      	cmp	r3, #64	; 0x40
 8107a88:	d107      	bne.n	8107a9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	681b      	ldr	r3, [r3, #0]
 8107a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8107a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8107a94:	6878      	ldr	r0, [r7, #4]
 8107a96:	f000 f838 	bl	8107b0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8107a9a:	687b      	ldr	r3, [r7, #4]
 8107a9c:	681b      	ldr	r3, [r3, #0]
 8107a9e:	691b      	ldr	r3, [r3, #16]
 8107aa0:	f003 0320 	and.w	r3, r3, #32
 8107aa4:	2b20      	cmp	r3, #32
 8107aa6:	d10e      	bne.n	8107ac6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	681b      	ldr	r3, [r3, #0]
 8107aac:	68db      	ldr	r3, [r3, #12]
 8107aae:	f003 0320 	and.w	r3, r3, #32
 8107ab2:	2b20      	cmp	r3, #32
 8107ab4:	d107      	bne.n	8107ac6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	f06f 0220 	mvn.w	r2, #32
 8107abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107ac0:	6878      	ldr	r0, [r7, #4]
 8107ac2:	f000 f8c7 	bl	8107c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107ac6:	bf00      	nop
 8107ac8:	3708      	adds	r7, #8
 8107aca:	46bd      	mov	sp, r7
 8107acc:	bd80      	pop	{r7, pc}

08107ace <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107ace:	b480      	push	{r7}
 8107ad0:	b083      	sub	sp, #12
 8107ad2:	af00      	add	r7, sp, #0
 8107ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107ad6:	bf00      	nop
 8107ad8:	370c      	adds	r7, #12
 8107ada:	46bd      	mov	sp, r7
 8107adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ae0:	4770      	bx	lr

08107ae2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8107ae2:	b480      	push	{r7}
 8107ae4:	b083      	sub	sp, #12
 8107ae6:	af00      	add	r7, sp, #0
 8107ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107aea:	bf00      	nop
 8107aec:	370c      	adds	r7, #12
 8107aee:	46bd      	mov	sp, r7
 8107af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107af4:	4770      	bx	lr

08107af6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107af6:	b480      	push	{r7}
 8107af8:	b083      	sub	sp, #12
 8107afa:	af00      	add	r7, sp, #0
 8107afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107afe:	bf00      	nop
 8107b00:	370c      	adds	r7, #12
 8107b02:	46bd      	mov	sp, r7
 8107b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b08:	4770      	bx	lr

08107b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107b0a:	b480      	push	{r7}
 8107b0c:	b083      	sub	sp, #12
 8107b0e:	af00      	add	r7, sp, #0
 8107b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107b12:	bf00      	nop
 8107b14:	370c      	adds	r7, #12
 8107b16:	46bd      	mov	sp, r7
 8107b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b1c:	4770      	bx	lr
	...

08107b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107b20:	b480      	push	{r7}
 8107b22:	b085      	sub	sp, #20
 8107b24:	af00      	add	r7, sp, #0
 8107b26:	6078      	str	r0, [r7, #4]
 8107b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107b2a:	687b      	ldr	r3, [r7, #4]
 8107b2c:	681b      	ldr	r3, [r3, #0]
 8107b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107b30:	687b      	ldr	r3, [r7, #4]
 8107b32:	4a40      	ldr	r2, [pc, #256]	; (8107c34 <TIM_Base_SetConfig+0x114>)
 8107b34:	4293      	cmp	r3, r2
 8107b36:	d013      	beq.n	8107b60 <TIM_Base_SetConfig+0x40>
 8107b38:	687b      	ldr	r3, [r7, #4]
 8107b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b3e:	d00f      	beq.n	8107b60 <TIM_Base_SetConfig+0x40>
 8107b40:	687b      	ldr	r3, [r7, #4]
 8107b42:	4a3d      	ldr	r2, [pc, #244]	; (8107c38 <TIM_Base_SetConfig+0x118>)
 8107b44:	4293      	cmp	r3, r2
 8107b46:	d00b      	beq.n	8107b60 <TIM_Base_SetConfig+0x40>
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	4a3c      	ldr	r2, [pc, #240]	; (8107c3c <TIM_Base_SetConfig+0x11c>)
 8107b4c:	4293      	cmp	r3, r2
 8107b4e:	d007      	beq.n	8107b60 <TIM_Base_SetConfig+0x40>
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	4a3b      	ldr	r2, [pc, #236]	; (8107c40 <TIM_Base_SetConfig+0x120>)
 8107b54:	4293      	cmp	r3, r2
 8107b56:	d003      	beq.n	8107b60 <TIM_Base_SetConfig+0x40>
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	4a3a      	ldr	r2, [pc, #232]	; (8107c44 <TIM_Base_SetConfig+0x124>)
 8107b5c:	4293      	cmp	r3, r2
 8107b5e:	d108      	bne.n	8107b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107b60:	68fb      	ldr	r3, [r7, #12]
 8107b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107b68:	683b      	ldr	r3, [r7, #0]
 8107b6a:	685b      	ldr	r3, [r3, #4]
 8107b6c:	68fa      	ldr	r2, [r7, #12]
 8107b6e:	4313      	orrs	r3, r2
 8107b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	4a2f      	ldr	r2, [pc, #188]	; (8107c34 <TIM_Base_SetConfig+0x114>)
 8107b76:	4293      	cmp	r3, r2
 8107b78:	d01f      	beq.n	8107bba <TIM_Base_SetConfig+0x9a>
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b80:	d01b      	beq.n	8107bba <TIM_Base_SetConfig+0x9a>
 8107b82:	687b      	ldr	r3, [r7, #4]
 8107b84:	4a2c      	ldr	r2, [pc, #176]	; (8107c38 <TIM_Base_SetConfig+0x118>)
 8107b86:	4293      	cmp	r3, r2
 8107b88:	d017      	beq.n	8107bba <TIM_Base_SetConfig+0x9a>
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	4a2b      	ldr	r2, [pc, #172]	; (8107c3c <TIM_Base_SetConfig+0x11c>)
 8107b8e:	4293      	cmp	r3, r2
 8107b90:	d013      	beq.n	8107bba <TIM_Base_SetConfig+0x9a>
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	4a2a      	ldr	r2, [pc, #168]	; (8107c40 <TIM_Base_SetConfig+0x120>)
 8107b96:	4293      	cmp	r3, r2
 8107b98:	d00f      	beq.n	8107bba <TIM_Base_SetConfig+0x9a>
 8107b9a:	687b      	ldr	r3, [r7, #4]
 8107b9c:	4a29      	ldr	r2, [pc, #164]	; (8107c44 <TIM_Base_SetConfig+0x124>)
 8107b9e:	4293      	cmp	r3, r2
 8107ba0:	d00b      	beq.n	8107bba <TIM_Base_SetConfig+0x9a>
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	4a28      	ldr	r2, [pc, #160]	; (8107c48 <TIM_Base_SetConfig+0x128>)
 8107ba6:	4293      	cmp	r3, r2
 8107ba8:	d007      	beq.n	8107bba <TIM_Base_SetConfig+0x9a>
 8107baa:	687b      	ldr	r3, [r7, #4]
 8107bac:	4a27      	ldr	r2, [pc, #156]	; (8107c4c <TIM_Base_SetConfig+0x12c>)
 8107bae:	4293      	cmp	r3, r2
 8107bb0:	d003      	beq.n	8107bba <TIM_Base_SetConfig+0x9a>
 8107bb2:	687b      	ldr	r3, [r7, #4]
 8107bb4:	4a26      	ldr	r2, [pc, #152]	; (8107c50 <TIM_Base_SetConfig+0x130>)
 8107bb6:	4293      	cmp	r3, r2
 8107bb8:	d108      	bne.n	8107bcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107bba:	68fb      	ldr	r3, [r7, #12]
 8107bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107bc2:	683b      	ldr	r3, [r7, #0]
 8107bc4:	68db      	ldr	r3, [r3, #12]
 8107bc6:	68fa      	ldr	r2, [r7, #12]
 8107bc8:	4313      	orrs	r3, r2
 8107bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107bcc:	68fb      	ldr	r3, [r7, #12]
 8107bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107bd2:	683b      	ldr	r3, [r7, #0]
 8107bd4:	695b      	ldr	r3, [r3, #20]
 8107bd6:	4313      	orrs	r3, r2
 8107bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	68fa      	ldr	r2, [r7, #12]
 8107bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107be0:	683b      	ldr	r3, [r7, #0]
 8107be2:	689a      	ldr	r2, [r3, #8]
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107be8:	683b      	ldr	r3, [r7, #0]
 8107bea:	681a      	ldr	r2, [r3, #0]
 8107bec:	687b      	ldr	r3, [r7, #4]
 8107bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	4a10      	ldr	r2, [pc, #64]	; (8107c34 <TIM_Base_SetConfig+0x114>)
 8107bf4:	4293      	cmp	r3, r2
 8107bf6:	d00f      	beq.n	8107c18 <TIM_Base_SetConfig+0xf8>
 8107bf8:	687b      	ldr	r3, [r7, #4]
 8107bfa:	4a12      	ldr	r2, [pc, #72]	; (8107c44 <TIM_Base_SetConfig+0x124>)
 8107bfc:	4293      	cmp	r3, r2
 8107bfe:	d00b      	beq.n	8107c18 <TIM_Base_SetConfig+0xf8>
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	4a11      	ldr	r2, [pc, #68]	; (8107c48 <TIM_Base_SetConfig+0x128>)
 8107c04:	4293      	cmp	r3, r2
 8107c06:	d007      	beq.n	8107c18 <TIM_Base_SetConfig+0xf8>
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	4a10      	ldr	r2, [pc, #64]	; (8107c4c <TIM_Base_SetConfig+0x12c>)
 8107c0c:	4293      	cmp	r3, r2
 8107c0e:	d003      	beq.n	8107c18 <TIM_Base_SetConfig+0xf8>
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	4a0f      	ldr	r2, [pc, #60]	; (8107c50 <TIM_Base_SetConfig+0x130>)
 8107c14:	4293      	cmp	r3, r2
 8107c16:	d103      	bne.n	8107c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107c18:	683b      	ldr	r3, [r7, #0]
 8107c1a:	691a      	ldr	r2, [r3, #16]
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	2201      	movs	r2, #1
 8107c24:	615a      	str	r2, [r3, #20]
}
 8107c26:	bf00      	nop
 8107c28:	3714      	adds	r7, #20
 8107c2a:	46bd      	mov	sp, r7
 8107c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c30:	4770      	bx	lr
 8107c32:	bf00      	nop
 8107c34:	40010000 	.word	0x40010000
 8107c38:	40000400 	.word	0x40000400
 8107c3c:	40000800 	.word	0x40000800
 8107c40:	40000c00 	.word	0x40000c00
 8107c44:	40010400 	.word	0x40010400
 8107c48:	40014000 	.word	0x40014000
 8107c4c:	40014400 	.word	0x40014400
 8107c50:	40014800 	.word	0x40014800

08107c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107c54:	b480      	push	{r7}
 8107c56:	b083      	sub	sp, #12
 8107c58:	af00      	add	r7, sp, #0
 8107c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107c5c:	bf00      	nop
 8107c5e:	370c      	adds	r7, #12
 8107c60:	46bd      	mov	sp, r7
 8107c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c66:	4770      	bx	lr

08107c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107c68:	b480      	push	{r7}
 8107c6a:	b083      	sub	sp, #12
 8107c6c:	af00      	add	r7, sp, #0
 8107c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107c70:	bf00      	nop
 8107c72:	370c      	adds	r7, #12
 8107c74:	46bd      	mov	sp, r7
 8107c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c7a:	4770      	bx	lr

08107c7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107c7c:	b480      	push	{r7}
 8107c7e:	b083      	sub	sp, #12
 8107c80:	af00      	add	r7, sp, #0
 8107c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107c84:	bf00      	nop
 8107c86:	370c      	adds	r7, #12
 8107c88:	46bd      	mov	sp, r7
 8107c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c8e:	4770      	bx	lr

08107c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107c90:	b580      	push	{r7, lr}
 8107c92:	b082      	sub	sp, #8
 8107c94:	af00      	add	r7, sp, #0
 8107c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	2b00      	cmp	r3, #0
 8107c9c:	d101      	bne.n	8107ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107c9e:	2301      	movs	r3, #1
 8107ca0:	e042      	b.n	8107d28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107ca2:	687b      	ldr	r3, [r7, #4]
 8107ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107ca8:	2b00      	cmp	r3, #0
 8107caa:	d106      	bne.n	8107cba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	2200      	movs	r2, #0
 8107cb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107cb4:	6878      	ldr	r0, [r7, #4]
 8107cb6:	f7fa f9db 	bl	8102070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	2224      	movs	r2, #36	; 0x24
 8107cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	681b      	ldr	r3, [r3, #0]
 8107cc6:	681a      	ldr	r2, [r3, #0]
 8107cc8:	687b      	ldr	r3, [r7, #4]
 8107cca:	681b      	ldr	r3, [r3, #0]
 8107ccc:	f022 0201 	bic.w	r2, r2, #1
 8107cd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107cd2:	6878      	ldr	r0, [r7, #4]
 8107cd4:	f000 f968 	bl	8107fa8 <UART_SetConfig>
 8107cd8:	4603      	mov	r3, r0
 8107cda:	2b01      	cmp	r3, #1
 8107cdc:	d101      	bne.n	8107ce2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107cde:	2301      	movs	r3, #1
 8107ce0:	e022      	b.n	8107d28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ce6:	2b00      	cmp	r3, #0
 8107ce8:	d002      	beq.n	8107cf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107cea:	6878      	ldr	r0, [r7, #4]
 8107cec:	f000 ff0c 	bl	8108b08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	681b      	ldr	r3, [r3, #0]
 8107cf4:	685a      	ldr	r2, [r3, #4]
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	681b      	ldr	r3, [r3, #0]
 8107cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	681b      	ldr	r3, [r3, #0]
 8107d04:	689a      	ldr	r2, [r3, #8]
 8107d06:	687b      	ldr	r3, [r7, #4]
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	681b      	ldr	r3, [r3, #0]
 8107d14:	681a      	ldr	r2, [r3, #0]
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	681b      	ldr	r3, [r3, #0]
 8107d1a:	f042 0201 	orr.w	r2, r2, #1
 8107d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107d20:	6878      	ldr	r0, [r7, #4]
 8107d22:	f000 ff93 	bl	8108c4c <UART_CheckIdleState>
 8107d26:	4603      	mov	r3, r0
}
 8107d28:	4618      	mov	r0, r3
 8107d2a:	3708      	adds	r7, #8
 8107d2c:	46bd      	mov	sp, r7
 8107d2e:	bd80      	pop	{r7, pc}

08107d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107d30:	b580      	push	{r7, lr}
 8107d32:	b08a      	sub	sp, #40	; 0x28
 8107d34:	af02      	add	r7, sp, #8
 8107d36:	60f8      	str	r0, [r7, #12]
 8107d38:	60b9      	str	r1, [r7, #8]
 8107d3a:	603b      	str	r3, [r7, #0]
 8107d3c:	4613      	mov	r3, r2
 8107d3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107d40:	68fb      	ldr	r3, [r7, #12]
 8107d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107d46:	2b20      	cmp	r3, #32
 8107d48:	f040 8083 	bne.w	8107e52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8107d4c:	68bb      	ldr	r3, [r7, #8]
 8107d4e:	2b00      	cmp	r3, #0
 8107d50:	d002      	beq.n	8107d58 <HAL_UART_Transmit+0x28>
 8107d52:	88fb      	ldrh	r3, [r7, #6]
 8107d54:	2b00      	cmp	r3, #0
 8107d56:	d101      	bne.n	8107d5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107d58:	2301      	movs	r3, #1
 8107d5a:	e07b      	b.n	8107e54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8107d5c:	68fb      	ldr	r3, [r7, #12]
 8107d5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107d62:	2b01      	cmp	r3, #1
 8107d64:	d101      	bne.n	8107d6a <HAL_UART_Transmit+0x3a>
 8107d66:	2302      	movs	r3, #2
 8107d68:	e074      	b.n	8107e54 <HAL_UART_Transmit+0x124>
 8107d6a:	68fb      	ldr	r3, [r7, #12]
 8107d6c:	2201      	movs	r2, #1
 8107d6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107d72:	68fb      	ldr	r3, [r7, #12]
 8107d74:	2200      	movs	r2, #0
 8107d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107d7a:	68fb      	ldr	r3, [r7, #12]
 8107d7c:	2221      	movs	r2, #33	; 0x21
 8107d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8107d82:	f7fa fac1 	bl	8102308 <HAL_GetTick>
 8107d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107d88:	68fb      	ldr	r3, [r7, #12]
 8107d8a:	88fa      	ldrh	r2, [r7, #6]
 8107d8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8107d90:	68fb      	ldr	r3, [r7, #12]
 8107d92:	88fa      	ldrh	r2, [r7, #6]
 8107d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107d98:	68fb      	ldr	r3, [r7, #12]
 8107d9a:	689b      	ldr	r3, [r3, #8]
 8107d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107da0:	d108      	bne.n	8107db4 <HAL_UART_Transmit+0x84>
 8107da2:	68fb      	ldr	r3, [r7, #12]
 8107da4:	691b      	ldr	r3, [r3, #16]
 8107da6:	2b00      	cmp	r3, #0
 8107da8:	d104      	bne.n	8107db4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8107daa:	2300      	movs	r3, #0
 8107dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8107dae:	68bb      	ldr	r3, [r7, #8]
 8107db0:	61bb      	str	r3, [r7, #24]
 8107db2:	e003      	b.n	8107dbc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8107db4:	68bb      	ldr	r3, [r7, #8]
 8107db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107db8:	2300      	movs	r3, #0
 8107dba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8107dbc:	68fb      	ldr	r3, [r7, #12]
 8107dbe:	2200      	movs	r2, #0
 8107dc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8107dc4:	e02c      	b.n	8107e20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107dc6:	683b      	ldr	r3, [r7, #0]
 8107dc8:	9300      	str	r3, [sp, #0]
 8107dca:	697b      	ldr	r3, [r7, #20]
 8107dcc:	2200      	movs	r2, #0
 8107dce:	2180      	movs	r1, #128	; 0x80
 8107dd0:	68f8      	ldr	r0, [r7, #12]
 8107dd2:	f000 ff83 	bl	8108cdc <UART_WaitOnFlagUntilTimeout>
 8107dd6:	4603      	mov	r3, r0
 8107dd8:	2b00      	cmp	r3, #0
 8107dda:	d001      	beq.n	8107de0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8107ddc:	2303      	movs	r3, #3
 8107dde:	e039      	b.n	8107e54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8107de0:	69fb      	ldr	r3, [r7, #28]
 8107de2:	2b00      	cmp	r3, #0
 8107de4:	d10b      	bne.n	8107dfe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107de6:	69bb      	ldr	r3, [r7, #24]
 8107de8:	881b      	ldrh	r3, [r3, #0]
 8107dea:	461a      	mov	r2, r3
 8107dec:	68fb      	ldr	r3, [r7, #12]
 8107dee:	681b      	ldr	r3, [r3, #0]
 8107df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107df4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107df6:	69bb      	ldr	r3, [r7, #24]
 8107df8:	3302      	adds	r3, #2
 8107dfa:	61bb      	str	r3, [r7, #24]
 8107dfc:	e007      	b.n	8107e0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107dfe:	69fb      	ldr	r3, [r7, #28]
 8107e00:	781a      	ldrb	r2, [r3, #0]
 8107e02:	68fb      	ldr	r3, [r7, #12]
 8107e04:	681b      	ldr	r3, [r3, #0]
 8107e06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107e08:	69fb      	ldr	r3, [r7, #28]
 8107e0a:	3301      	adds	r3, #1
 8107e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107e0e:	68fb      	ldr	r3, [r7, #12]
 8107e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107e14:	b29b      	uxth	r3, r3
 8107e16:	3b01      	subs	r3, #1
 8107e18:	b29a      	uxth	r2, r3
 8107e1a:	68fb      	ldr	r3, [r7, #12]
 8107e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107e20:	68fb      	ldr	r3, [r7, #12]
 8107e22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107e26:	b29b      	uxth	r3, r3
 8107e28:	2b00      	cmp	r3, #0
 8107e2a:	d1cc      	bne.n	8107dc6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107e2c:	683b      	ldr	r3, [r7, #0]
 8107e2e:	9300      	str	r3, [sp, #0]
 8107e30:	697b      	ldr	r3, [r7, #20]
 8107e32:	2200      	movs	r2, #0
 8107e34:	2140      	movs	r1, #64	; 0x40
 8107e36:	68f8      	ldr	r0, [r7, #12]
 8107e38:	f000 ff50 	bl	8108cdc <UART_WaitOnFlagUntilTimeout>
 8107e3c:	4603      	mov	r3, r0
 8107e3e:	2b00      	cmp	r3, #0
 8107e40:	d001      	beq.n	8107e46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107e42:	2303      	movs	r3, #3
 8107e44:	e006      	b.n	8107e54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107e46:	68fb      	ldr	r3, [r7, #12]
 8107e48:	2220      	movs	r2, #32
 8107e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8107e4e:	2300      	movs	r3, #0
 8107e50:	e000      	b.n	8107e54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8107e52:	2302      	movs	r3, #2
  }
}
 8107e54:	4618      	mov	r0, r3
 8107e56:	3720      	adds	r7, #32
 8107e58:	46bd      	mov	sp, r7
 8107e5a:	bd80      	pop	{r7, pc}

08107e5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107e5c:	b580      	push	{r7, lr}
 8107e5e:	b084      	sub	sp, #16
 8107e60:	af00      	add	r7, sp, #0
 8107e62:	60f8      	str	r0, [r7, #12]
 8107e64:	60b9      	str	r1, [r7, #8]
 8107e66:	4613      	mov	r3, r2
 8107e68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8107e6a:	68fb      	ldr	r3, [r7, #12]
 8107e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107e70:	2b20      	cmp	r3, #32
 8107e72:	d170      	bne.n	8107f56 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8107e74:	68bb      	ldr	r3, [r7, #8]
 8107e76:	2b00      	cmp	r3, #0
 8107e78:	d002      	beq.n	8107e80 <HAL_UART_Receive_DMA+0x24>
 8107e7a:	88fb      	ldrh	r3, [r7, #6]
 8107e7c:	2b00      	cmp	r3, #0
 8107e7e:	d101      	bne.n	8107e84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8107e80:	2301      	movs	r3, #1
 8107e82:	e069      	b.n	8107f58 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8107e84:	68fb      	ldr	r3, [r7, #12]
 8107e86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107e8a:	2b01      	cmp	r3, #1
 8107e8c:	d101      	bne.n	8107e92 <HAL_UART_Receive_DMA+0x36>
 8107e8e:	2302      	movs	r3, #2
 8107e90:	e062      	b.n	8107f58 <HAL_UART_Receive_DMA+0xfc>
 8107e92:	68fb      	ldr	r3, [r7, #12]
 8107e94:	2201      	movs	r2, #1
 8107e96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8107e9a:	68fb      	ldr	r3, [r7, #12]
 8107e9c:	68ba      	ldr	r2, [r7, #8]
 8107e9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8107ea0:	68fb      	ldr	r3, [r7, #12]
 8107ea2:	88fa      	ldrh	r2, [r7, #6]
 8107ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107ea8:	68fb      	ldr	r3, [r7, #12]
 8107eaa:	2200      	movs	r2, #0
 8107eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8107eb0:	68fb      	ldr	r3, [r7, #12]
 8107eb2:	2222      	movs	r2, #34	; 0x22
 8107eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8107eb8:	68fb      	ldr	r3, [r7, #12]
 8107eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107ebc:	2b00      	cmp	r3, #0
 8107ebe:	d02c      	beq.n	8107f1a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8107ec0:	68fb      	ldr	r3, [r7, #12]
 8107ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107ec4:	4a26      	ldr	r2, [pc, #152]	; (8107f60 <HAL_UART_Receive_DMA+0x104>)
 8107ec6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8107ec8:	68fb      	ldr	r3, [r7, #12]
 8107eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107ecc:	4a25      	ldr	r2, [pc, #148]	; (8107f64 <HAL_UART_Receive_DMA+0x108>)
 8107ece:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8107ed0:	68fb      	ldr	r3, [r7, #12]
 8107ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107ed4:	4a24      	ldr	r2, [pc, #144]	; (8107f68 <HAL_UART_Receive_DMA+0x10c>)
 8107ed6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8107ed8:	68fb      	ldr	r3, [r7, #12]
 8107eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107edc:	2200      	movs	r2, #0
 8107ede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8107ee0:	68fb      	ldr	r3, [r7, #12]
 8107ee2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8107ee4:	68fb      	ldr	r3, [r7, #12]
 8107ee6:	681b      	ldr	r3, [r3, #0]
 8107ee8:	3324      	adds	r3, #36	; 0x24
 8107eea:	4619      	mov	r1, r3
 8107eec:	68fb      	ldr	r3, [r7, #12]
 8107eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107ef0:	461a      	mov	r2, r3
 8107ef2:	88fb      	ldrh	r3, [r7, #6]
 8107ef4:	f7fa fe7c 	bl	8102bf0 <HAL_DMA_Start_IT>
 8107ef8:	4603      	mov	r3, r0
 8107efa:	2b00      	cmp	r3, #0
 8107efc:	d00d      	beq.n	8107f1a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8107efe:	68fb      	ldr	r3, [r7, #12]
 8107f00:	2210      	movs	r2, #16
 8107f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107f06:	68fb      	ldr	r3, [r7, #12]
 8107f08:	2200      	movs	r2, #0
 8107f0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8107f0e:	68fb      	ldr	r3, [r7, #12]
 8107f10:	2220      	movs	r2, #32
 8107f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8107f16:	2301      	movs	r3, #1
 8107f18:	e01e      	b.n	8107f58 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8107f1a:	68fb      	ldr	r3, [r7, #12]
 8107f1c:	2200      	movs	r2, #0
 8107f1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107f22:	68fb      	ldr	r3, [r7, #12]
 8107f24:	681b      	ldr	r3, [r3, #0]
 8107f26:	681a      	ldr	r2, [r3, #0]
 8107f28:	68fb      	ldr	r3, [r7, #12]
 8107f2a:	681b      	ldr	r3, [r3, #0]
 8107f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107f30:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107f32:	68fb      	ldr	r3, [r7, #12]
 8107f34:	681b      	ldr	r3, [r3, #0]
 8107f36:	689a      	ldr	r2, [r3, #8]
 8107f38:	68fb      	ldr	r3, [r7, #12]
 8107f3a:	681b      	ldr	r3, [r3, #0]
 8107f3c:	f042 0201 	orr.w	r2, r2, #1
 8107f40:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8107f42:	68fb      	ldr	r3, [r7, #12]
 8107f44:	681b      	ldr	r3, [r3, #0]
 8107f46:	689a      	ldr	r2, [r3, #8]
 8107f48:	68fb      	ldr	r3, [r7, #12]
 8107f4a:	681b      	ldr	r3, [r3, #0]
 8107f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107f50:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8107f52:	2300      	movs	r3, #0
 8107f54:	e000      	b.n	8107f58 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8107f56:	2302      	movs	r3, #2
  }
}
 8107f58:	4618      	mov	r0, r3
 8107f5a:	3710      	adds	r7, #16
 8107f5c:	46bd      	mov	sp, r7
 8107f5e:	bd80      	pop	{r7, pc}
 8107f60:	08108e5f 	.word	0x08108e5f
 8107f64:	08108ec5 	.word	0x08108ec5
 8107f68:	08108ee1 	.word	0x08108ee1

08107f6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8107f6c:	b480      	push	{r7}
 8107f6e:	b083      	sub	sp, #12
 8107f70:	af00      	add	r7, sp, #0
 8107f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8107f74:	bf00      	nop
 8107f76:	370c      	adds	r7, #12
 8107f78:	46bd      	mov	sp, r7
 8107f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f7e:	4770      	bx	lr

08107f80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8107f80:	b480      	push	{r7}
 8107f82:	b083      	sub	sp, #12
 8107f84:	af00      	add	r7, sp, #0
 8107f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8107f88:	bf00      	nop
 8107f8a:	370c      	adds	r7, #12
 8107f8c:	46bd      	mov	sp, r7
 8107f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f92:	4770      	bx	lr

08107f94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8107f94:	b480      	push	{r7}
 8107f96:	b083      	sub	sp, #12
 8107f98:	af00      	add	r7, sp, #0
 8107f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8107f9c:	bf00      	nop
 8107f9e:	370c      	adds	r7, #12
 8107fa0:	46bd      	mov	sp, r7
 8107fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fa6:	4770      	bx	lr

08107fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107fa8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8107fac:	b08e      	sub	sp, #56	; 0x38
 8107fae:	af00      	add	r7, sp, #0
 8107fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107fb2:	2300      	movs	r3, #0
 8107fb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107fb8:	687b      	ldr	r3, [r7, #4]
 8107fba:	689a      	ldr	r2, [r3, #8]
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	691b      	ldr	r3, [r3, #16]
 8107fc0:	431a      	orrs	r2, r3
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	695b      	ldr	r3, [r3, #20]
 8107fc6:	431a      	orrs	r2, r3
 8107fc8:	687b      	ldr	r3, [r7, #4]
 8107fca:	69db      	ldr	r3, [r3, #28]
 8107fcc:	4313      	orrs	r3, r2
 8107fce:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107fd6:	4313      	orrs	r3, r2
 8107fd8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107fda:	687b      	ldr	r3, [r7, #4]
 8107fdc:	681b      	ldr	r3, [r3, #0]
 8107fde:	681a      	ldr	r2, [r3, #0]
 8107fe0:	4bc2      	ldr	r3, [pc, #776]	; (81082ec <UART_SetConfig+0x344>)
 8107fe2:	4013      	ands	r3, r2
 8107fe4:	687a      	ldr	r2, [r7, #4]
 8107fe6:	6812      	ldr	r2, [r2, #0]
 8107fe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107fea:	430b      	orrs	r3, r1
 8107fec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	681b      	ldr	r3, [r3, #0]
 8107ff2:	685b      	ldr	r3, [r3, #4]
 8107ff4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	68da      	ldr	r2, [r3, #12]
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	681b      	ldr	r3, [r3, #0]
 8108000:	430a      	orrs	r2, r1
 8108002:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	699b      	ldr	r3, [r3, #24]
 8108008:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810800a:	687b      	ldr	r3, [r7, #4]
 810800c:	681b      	ldr	r3, [r3, #0]
 810800e:	4ab8      	ldr	r2, [pc, #736]	; (81082f0 <UART_SetConfig+0x348>)
 8108010:	4293      	cmp	r3, r2
 8108012:	d004      	beq.n	810801e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	6a1b      	ldr	r3, [r3, #32]
 8108018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810801a:	4313      	orrs	r3, r2
 810801c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	681b      	ldr	r3, [r3, #0]
 8108022:	689b      	ldr	r3, [r3, #8]
 8108024:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8108028:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810802c:	687a      	ldr	r2, [r7, #4]
 810802e:	6812      	ldr	r2, [r2, #0]
 8108030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8108032:	430b      	orrs	r3, r1
 8108034:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	681b      	ldr	r3, [r3, #0]
 810803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810803c:	f023 010f 	bic.w	r1, r3, #15
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108044:	687b      	ldr	r3, [r7, #4]
 8108046:	681b      	ldr	r3, [r3, #0]
 8108048:	430a      	orrs	r2, r1
 810804a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810804c:	687b      	ldr	r3, [r7, #4]
 810804e:	681b      	ldr	r3, [r3, #0]
 8108050:	4aa8      	ldr	r2, [pc, #672]	; (81082f4 <UART_SetConfig+0x34c>)
 8108052:	4293      	cmp	r3, r2
 8108054:	d177      	bne.n	8108146 <UART_SetConfig+0x19e>
 8108056:	4ba8      	ldr	r3, [pc, #672]	; (81082f8 <UART_SetConfig+0x350>)
 8108058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810805a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810805e:	2b28      	cmp	r3, #40	; 0x28
 8108060:	d86c      	bhi.n	810813c <UART_SetConfig+0x194>
 8108062:	a201      	add	r2, pc, #4	; (adr r2, 8108068 <UART_SetConfig+0xc0>)
 8108064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108068:	0810810d 	.word	0x0810810d
 810806c:	0810813d 	.word	0x0810813d
 8108070:	0810813d 	.word	0x0810813d
 8108074:	0810813d 	.word	0x0810813d
 8108078:	0810813d 	.word	0x0810813d
 810807c:	0810813d 	.word	0x0810813d
 8108080:	0810813d 	.word	0x0810813d
 8108084:	0810813d 	.word	0x0810813d
 8108088:	08108115 	.word	0x08108115
 810808c:	0810813d 	.word	0x0810813d
 8108090:	0810813d 	.word	0x0810813d
 8108094:	0810813d 	.word	0x0810813d
 8108098:	0810813d 	.word	0x0810813d
 810809c:	0810813d 	.word	0x0810813d
 81080a0:	0810813d 	.word	0x0810813d
 81080a4:	0810813d 	.word	0x0810813d
 81080a8:	0810811d 	.word	0x0810811d
 81080ac:	0810813d 	.word	0x0810813d
 81080b0:	0810813d 	.word	0x0810813d
 81080b4:	0810813d 	.word	0x0810813d
 81080b8:	0810813d 	.word	0x0810813d
 81080bc:	0810813d 	.word	0x0810813d
 81080c0:	0810813d 	.word	0x0810813d
 81080c4:	0810813d 	.word	0x0810813d
 81080c8:	08108125 	.word	0x08108125
 81080cc:	0810813d 	.word	0x0810813d
 81080d0:	0810813d 	.word	0x0810813d
 81080d4:	0810813d 	.word	0x0810813d
 81080d8:	0810813d 	.word	0x0810813d
 81080dc:	0810813d 	.word	0x0810813d
 81080e0:	0810813d 	.word	0x0810813d
 81080e4:	0810813d 	.word	0x0810813d
 81080e8:	0810812d 	.word	0x0810812d
 81080ec:	0810813d 	.word	0x0810813d
 81080f0:	0810813d 	.word	0x0810813d
 81080f4:	0810813d 	.word	0x0810813d
 81080f8:	0810813d 	.word	0x0810813d
 81080fc:	0810813d 	.word	0x0810813d
 8108100:	0810813d 	.word	0x0810813d
 8108104:	0810813d 	.word	0x0810813d
 8108108:	08108135 	.word	0x08108135
 810810c:	2301      	movs	r3, #1
 810810e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108112:	e231      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108114:	2304      	movs	r3, #4
 8108116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810811a:	e22d      	b.n	8108578 <UART_SetConfig+0x5d0>
 810811c:	2308      	movs	r3, #8
 810811e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108122:	e229      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108124:	2310      	movs	r3, #16
 8108126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810812a:	e225      	b.n	8108578 <UART_SetConfig+0x5d0>
 810812c:	2320      	movs	r3, #32
 810812e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108132:	e221      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108134:	2340      	movs	r3, #64	; 0x40
 8108136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810813a:	e21d      	b.n	8108578 <UART_SetConfig+0x5d0>
 810813c:	2380      	movs	r3, #128	; 0x80
 810813e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108142:	bf00      	nop
 8108144:	e218      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108146:	687b      	ldr	r3, [r7, #4]
 8108148:	681b      	ldr	r3, [r3, #0]
 810814a:	4a6c      	ldr	r2, [pc, #432]	; (81082fc <UART_SetConfig+0x354>)
 810814c:	4293      	cmp	r3, r2
 810814e:	d132      	bne.n	81081b6 <UART_SetConfig+0x20e>
 8108150:	4b69      	ldr	r3, [pc, #420]	; (81082f8 <UART_SetConfig+0x350>)
 8108152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108154:	f003 0307 	and.w	r3, r3, #7
 8108158:	2b05      	cmp	r3, #5
 810815a:	d827      	bhi.n	81081ac <UART_SetConfig+0x204>
 810815c:	a201      	add	r2, pc, #4	; (adr r2, 8108164 <UART_SetConfig+0x1bc>)
 810815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108162:	bf00      	nop
 8108164:	0810817d 	.word	0x0810817d
 8108168:	08108185 	.word	0x08108185
 810816c:	0810818d 	.word	0x0810818d
 8108170:	08108195 	.word	0x08108195
 8108174:	0810819d 	.word	0x0810819d
 8108178:	081081a5 	.word	0x081081a5
 810817c:	2300      	movs	r3, #0
 810817e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108182:	e1f9      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108184:	2304      	movs	r3, #4
 8108186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810818a:	e1f5      	b.n	8108578 <UART_SetConfig+0x5d0>
 810818c:	2308      	movs	r3, #8
 810818e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108192:	e1f1      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108194:	2310      	movs	r3, #16
 8108196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810819a:	e1ed      	b.n	8108578 <UART_SetConfig+0x5d0>
 810819c:	2320      	movs	r3, #32
 810819e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081a2:	e1e9      	b.n	8108578 <UART_SetConfig+0x5d0>
 81081a4:	2340      	movs	r3, #64	; 0x40
 81081a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081aa:	e1e5      	b.n	8108578 <UART_SetConfig+0x5d0>
 81081ac:	2380      	movs	r3, #128	; 0x80
 81081ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081b2:	bf00      	nop
 81081b4:	e1e0      	b.n	8108578 <UART_SetConfig+0x5d0>
 81081b6:	687b      	ldr	r3, [r7, #4]
 81081b8:	681b      	ldr	r3, [r3, #0]
 81081ba:	4a51      	ldr	r2, [pc, #324]	; (8108300 <UART_SetConfig+0x358>)
 81081bc:	4293      	cmp	r3, r2
 81081be:	d132      	bne.n	8108226 <UART_SetConfig+0x27e>
 81081c0:	4b4d      	ldr	r3, [pc, #308]	; (81082f8 <UART_SetConfig+0x350>)
 81081c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81081c4:	f003 0307 	and.w	r3, r3, #7
 81081c8:	2b05      	cmp	r3, #5
 81081ca:	d827      	bhi.n	810821c <UART_SetConfig+0x274>
 81081cc:	a201      	add	r2, pc, #4	; (adr r2, 81081d4 <UART_SetConfig+0x22c>)
 81081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081d2:	bf00      	nop
 81081d4:	081081ed 	.word	0x081081ed
 81081d8:	081081f5 	.word	0x081081f5
 81081dc:	081081fd 	.word	0x081081fd
 81081e0:	08108205 	.word	0x08108205
 81081e4:	0810820d 	.word	0x0810820d
 81081e8:	08108215 	.word	0x08108215
 81081ec:	2300      	movs	r3, #0
 81081ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081f2:	e1c1      	b.n	8108578 <UART_SetConfig+0x5d0>
 81081f4:	2304      	movs	r3, #4
 81081f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081fa:	e1bd      	b.n	8108578 <UART_SetConfig+0x5d0>
 81081fc:	2308      	movs	r3, #8
 81081fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108202:	e1b9      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108204:	2310      	movs	r3, #16
 8108206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810820a:	e1b5      	b.n	8108578 <UART_SetConfig+0x5d0>
 810820c:	2320      	movs	r3, #32
 810820e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108212:	e1b1      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108214:	2340      	movs	r3, #64	; 0x40
 8108216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810821a:	e1ad      	b.n	8108578 <UART_SetConfig+0x5d0>
 810821c:	2380      	movs	r3, #128	; 0x80
 810821e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108222:	bf00      	nop
 8108224:	e1a8      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108226:	687b      	ldr	r3, [r7, #4]
 8108228:	681b      	ldr	r3, [r3, #0]
 810822a:	4a36      	ldr	r2, [pc, #216]	; (8108304 <UART_SetConfig+0x35c>)
 810822c:	4293      	cmp	r3, r2
 810822e:	d132      	bne.n	8108296 <UART_SetConfig+0x2ee>
 8108230:	4b31      	ldr	r3, [pc, #196]	; (81082f8 <UART_SetConfig+0x350>)
 8108232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108234:	f003 0307 	and.w	r3, r3, #7
 8108238:	2b05      	cmp	r3, #5
 810823a:	d827      	bhi.n	810828c <UART_SetConfig+0x2e4>
 810823c:	a201      	add	r2, pc, #4	; (adr r2, 8108244 <UART_SetConfig+0x29c>)
 810823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108242:	bf00      	nop
 8108244:	0810825d 	.word	0x0810825d
 8108248:	08108265 	.word	0x08108265
 810824c:	0810826d 	.word	0x0810826d
 8108250:	08108275 	.word	0x08108275
 8108254:	0810827d 	.word	0x0810827d
 8108258:	08108285 	.word	0x08108285
 810825c:	2300      	movs	r3, #0
 810825e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108262:	e189      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108264:	2304      	movs	r3, #4
 8108266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810826a:	e185      	b.n	8108578 <UART_SetConfig+0x5d0>
 810826c:	2308      	movs	r3, #8
 810826e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108272:	e181      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108274:	2310      	movs	r3, #16
 8108276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810827a:	e17d      	b.n	8108578 <UART_SetConfig+0x5d0>
 810827c:	2320      	movs	r3, #32
 810827e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108282:	e179      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108284:	2340      	movs	r3, #64	; 0x40
 8108286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810828a:	e175      	b.n	8108578 <UART_SetConfig+0x5d0>
 810828c:	2380      	movs	r3, #128	; 0x80
 810828e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108292:	bf00      	nop
 8108294:	e170      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108296:	687b      	ldr	r3, [r7, #4]
 8108298:	681b      	ldr	r3, [r3, #0]
 810829a:	4a1b      	ldr	r2, [pc, #108]	; (8108308 <UART_SetConfig+0x360>)
 810829c:	4293      	cmp	r3, r2
 810829e:	d142      	bne.n	8108326 <UART_SetConfig+0x37e>
 81082a0:	4b15      	ldr	r3, [pc, #84]	; (81082f8 <UART_SetConfig+0x350>)
 81082a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082a4:	f003 0307 	and.w	r3, r3, #7
 81082a8:	2b05      	cmp	r3, #5
 81082aa:	d837      	bhi.n	810831c <UART_SetConfig+0x374>
 81082ac:	a201      	add	r2, pc, #4	; (adr r2, 81082b4 <UART_SetConfig+0x30c>)
 81082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082b2:	bf00      	nop
 81082b4:	081082cd 	.word	0x081082cd
 81082b8:	081082d5 	.word	0x081082d5
 81082bc:	081082dd 	.word	0x081082dd
 81082c0:	081082e5 	.word	0x081082e5
 81082c4:	0810830d 	.word	0x0810830d
 81082c8:	08108315 	.word	0x08108315
 81082cc:	2300      	movs	r3, #0
 81082ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082d2:	e151      	b.n	8108578 <UART_SetConfig+0x5d0>
 81082d4:	2304      	movs	r3, #4
 81082d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082da:	e14d      	b.n	8108578 <UART_SetConfig+0x5d0>
 81082dc:	2308      	movs	r3, #8
 81082de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082e2:	e149      	b.n	8108578 <UART_SetConfig+0x5d0>
 81082e4:	2310      	movs	r3, #16
 81082e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082ea:	e145      	b.n	8108578 <UART_SetConfig+0x5d0>
 81082ec:	cfff69f3 	.word	0xcfff69f3
 81082f0:	58000c00 	.word	0x58000c00
 81082f4:	40011000 	.word	0x40011000
 81082f8:	58024400 	.word	0x58024400
 81082fc:	40004400 	.word	0x40004400
 8108300:	40004800 	.word	0x40004800
 8108304:	40004c00 	.word	0x40004c00
 8108308:	40005000 	.word	0x40005000
 810830c:	2320      	movs	r3, #32
 810830e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108312:	e131      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108314:	2340      	movs	r3, #64	; 0x40
 8108316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810831a:	e12d      	b.n	8108578 <UART_SetConfig+0x5d0>
 810831c:	2380      	movs	r3, #128	; 0x80
 810831e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108322:	bf00      	nop
 8108324:	e128      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	681b      	ldr	r3, [r3, #0]
 810832a:	4ab6      	ldr	r2, [pc, #728]	; (8108604 <UART_SetConfig+0x65c>)
 810832c:	4293      	cmp	r3, r2
 810832e:	d178      	bne.n	8108422 <UART_SetConfig+0x47a>
 8108330:	4bb5      	ldr	r3, [pc, #724]	; (8108608 <UART_SetConfig+0x660>)
 8108332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108338:	2b28      	cmp	r3, #40	; 0x28
 810833a:	d86d      	bhi.n	8108418 <UART_SetConfig+0x470>
 810833c:	a201      	add	r2, pc, #4	; (adr r2, 8108344 <UART_SetConfig+0x39c>)
 810833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108342:	bf00      	nop
 8108344:	081083e9 	.word	0x081083e9
 8108348:	08108419 	.word	0x08108419
 810834c:	08108419 	.word	0x08108419
 8108350:	08108419 	.word	0x08108419
 8108354:	08108419 	.word	0x08108419
 8108358:	08108419 	.word	0x08108419
 810835c:	08108419 	.word	0x08108419
 8108360:	08108419 	.word	0x08108419
 8108364:	081083f1 	.word	0x081083f1
 8108368:	08108419 	.word	0x08108419
 810836c:	08108419 	.word	0x08108419
 8108370:	08108419 	.word	0x08108419
 8108374:	08108419 	.word	0x08108419
 8108378:	08108419 	.word	0x08108419
 810837c:	08108419 	.word	0x08108419
 8108380:	08108419 	.word	0x08108419
 8108384:	081083f9 	.word	0x081083f9
 8108388:	08108419 	.word	0x08108419
 810838c:	08108419 	.word	0x08108419
 8108390:	08108419 	.word	0x08108419
 8108394:	08108419 	.word	0x08108419
 8108398:	08108419 	.word	0x08108419
 810839c:	08108419 	.word	0x08108419
 81083a0:	08108419 	.word	0x08108419
 81083a4:	08108401 	.word	0x08108401
 81083a8:	08108419 	.word	0x08108419
 81083ac:	08108419 	.word	0x08108419
 81083b0:	08108419 	.word	0x08108419
 81083b4:	08108419 	.word	0x08108419
 81083b8:	08108419 	.word	0x08108419
 81083bc:	08108419 	.word	0x08108419
 81083c0:	08108419 	.word	0x08108419
 81083c4:	08108409 	.word	0x08108409
 81083c8:	08108419 	.word	0x08108419
 81083cc:	08108419 	.word	0x08108419
 81083d0:	08108419 	.word	0x08108419
 81083d4:	08108419 	.word	0x08108419
 81083d8:	08108419 	.word	0x08108419
 81083dc:	08108419 	.word	0x08108419
 81083e0:	08108419 	.word	0x08108419
 81083e4:	08108411 	.word	0x08108411
 81083e8:	2301      	movs	r3, #1
 81083ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083ee:	e0c3      	b.n	8108578 <UART_SetConfig+0x5d0>
 81083f0:	2304      	movs	r3, #4
 81083f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083f6:	e0bf      	b.n	8108578 <UART_SetConfig+0x5d0>
 81083f8:	2308      	movs	r3, #8
 81083fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083fe:	e0bb      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108400:	2310      	movs	r3, #16
 8108402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108406:	e0b7      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108408:	2320      	movs	r3, #32
 810840a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810840e:	e0b3      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108410:	2340      	movs	r3, #64	; 0x40
 8108412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108416:	e0af      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108418:	2380      	movs	r3, #128	; 0x80
 810841a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810841e:	bf00      	nop
 8108420:	e0aa      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108422:	687b      	ldr	r3, [r7, #4]
 8108424:	681b      	ldr	r3, [r3, #0]
 8108426:	4a79      	ldr	r2, [pc, #484]	; (810860c <UART_SetConfig+0x664>)
 8108428:	4293      	cmp	r3, r2
 810842a:	d132      	bne.n	8108492 <UART_SetConfig+0x4ea>
 810842c:	4b76      	ldr	r3, [pc, #472]	; (8108608 <UART_SetConfig+0x660>)
 810842e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108430:	f003 0307 	and.w	r3, r3, #7
 8108434:	2b05      	cmp	r3, #5
 8108436:	d827      	bhi.n	8108488 <UART_SetConfig+0x4e0>
 8108438:	a201      	add	r2, pc, #4	; (adr r2, 8108440 <UART_SetConfig+0x498>)
 810843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810843e:	bf00      	nop
 8108440:	08108459 	.word	0x08108459
 8108444:	08108461 	.word	0x08108461
 8108448:	08108469 	.word	0x08108469
 810844c:	08108471 	.word	0x08108471
 8108450:	08108479 	.word	0x08108479
 8108454:	08108481 	.word	0x08108481
 8108458:	2300      	movs	r3, #0
 810845a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810845e:	e08b      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108460:	2304      	movs	r3, #4
 8108462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108466:	e087      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108468:	2308      	movs	r3, #8
 810846a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810846e:	e083      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108470:	2310      	movs	r3, #16
 8108472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108476:	e07f      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108478:	2320      	movs	r3, #32
 810847a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810847e:	e07b      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108480:	2340      	movs	r3, #64	; 0x40
 8108482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108486:	e077      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108488:	2380      	movs	r3, #128	; 0x80
 810848a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810848e:	bf00      	nop
 8108490:	e072      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108492:	687b      	ldr	r3, [r7, #4]
 8108494:	681b      	ldr	r3, [r3, #0]
 8108496:	4a5e      	ldr	r2, [pc, #376]	; (8108610 <UART_SetConfig+0x668>)
 8108498:	4293      	cmp	r3, r2
 810849a:	d132      	bne.n	8108502 <UART_SetConfig+0x55a>
 810849c:	4b5a      	ldr	r3, [pc, #360]	; (8108608 <UART_SetConfig+0x660>)
 810849e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81084a0:	f003 0307 	and.w	r3, r3, #7
 81084a4:	2b05      	cmp	r3, #5
 81084a6:	d827      	bhi.n	81084f8 <UART_SetConfig+0x550>
 81084a8:	a201      	add	r2, pc, #4	; (adr r2, 81084b0 <UART_SetConfig+0x508>)
 81084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084ae:	bf00      	nop
 81084b0:	081084c9 	.word	0x081084c9
 81084b4:	081084d1 	.word	0x081084d1
 81084b8:	081084d9 	.word	0x081084d9
 81084bc:	081084e1 	.word	0x081084e1
 81084c0:	081084e9 	.word	0x081084e9
 81084c4:	081084f1 	.word	0x081084f1
 81084c8:	2300      	movs	r3, #0
 81084ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084ce:	e053      	b.n	8108578 <UART_SetConfig+0x5d0>
 81084d0:	2304      	movs	r3, #4
 81084d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084d6:	e04f      	b.n	8108578 <UART_SetConfig+0x5d0>
 81084d8:	2308      	movs	r3, #8
 81084da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084de:	e04b      	b.n	8108578 <UART_SetConfig+0x5d0>
 81084e0:	2310      	movs	r3, #16
 81084e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084e6:	e047      	b.n	8108578 <UART_SetConfig+0x5d0>
 81084e8:	2320      	movs	r3, #32
 81084ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084ee:	e043      	b.n	8108578 <UART_SetConfig+0x5d0>
 81084f0:	2340      	movs	r3, #64	; 0x40
 81084f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084f6:	e03f      	b.n	8108578 <UART_SetConfig+0x5d0>
 81084f8:	2380      	movs	r3, #128	; 0x80
 81084fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084fe:	bf00      	nop
 8108500:	e03a      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	681b      	ldr	r3, [r3, #0]
 8108506:	4a43      	ldr	r2, [pc, #268]	; (8108614 <UART_SetConfig+0x66c>)
 8108508:	4293      	cmp	r3, r2
 810850a:	d132      	bne.n	8108572 <UART_SetConfig+0x5ca>
 810850c:	4b3e      	ldr	r3, [pc, #248]	; (8108608 <UART_SetConfig+0x660>)
 810850e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108510:	f003 0307 	and.w	r3, r3, #7
 8108514:	2b05      	cmp	r3, #5
 8108516:	d827      	bhi.n	8108568 <UART_SetConfig+0x5c0>
 8108518:	a201      	add	r2, pc, #4	; (adr r2, 8108520 <UART_SetConfig+0x578>)
 810851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810851e:	bf00      	nop
 8108520:	08108539 	.word	0x08108539
 8108524:	08108541 	.word	0x08108541
 8108528:	08108549 	.word	0x08108549
 810852c:	08108551 	.word	0x08108551
 8108530:	08108559 	.word	0x08108559
 8108534:	08108561 	.word	0x08108561
 8108538:	2302      	movs	r3, #2
 810853a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810853e:	e01b      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108540:	2304      	movs	r3, #4
 8108542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108546:	e017      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108548:	2308      	movs	r3, #8
 810854a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810854e:	e013      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108550:	2310      	movs	r3, #16
 8108552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108556:	e00f      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108558:	2320      	movs	r3, #32
 810855a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810855e:	e00b      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108560:	2340      	movs	r3, #64	; 0x40
 8108562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108566:	e007      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108568:	2380      	movs	r3, #128	; 0x80
 810856a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810856e:	bf00      	nop
 8108570:	e002      	b.n	8108578 <UART_SetConfig+0x5d0>
 8108572:	2380      	movs	r3, #128	; 0x80
 8108574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108578:	687b      	ldr	r3, [r7, #4]
 810857a:	681b      	ldr	r3, [r3, #0]
 810857c:	4a25      	ldr	r2, [pc, #148]	; (8108614 <UART_SetConfig+0x66c>)
 810857e:	4293      	cmp	r3, r2
 8108580:	f040 80b8 	bne.w	81086f4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108584:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108588:	2b08      	cmp	r3, #8
 810858a:	d019      	beq.n	81085c0 <UART_SetConfig+0x618>
 810858c:	2b08      	cmp	r3, #8
 810858e:	dc04      	bgt.n	810859a <UART_SetConfig+0x5f2>
 8108590:	2b02      	cmp	r3, #2
 8108592:	d009      	beq.n	81085a8 <UART_SetConfig+0x600>
 8108594:	2b04      	cmp	r3, #4
 8108596:	d00b      	beq.n	81085b0 <UART_SetConfig+0x608>
 8108598:	e042      	b.n	8108620 <UART_SetConfig+0x678>
 810859a:	2b20      	cmp	r3, #32
 810859c:	d02b      	beq.n	81085f6 <UART_SetConfig+0x64e>
 810859e:	2b40      	cmp	r3, #64	; 0x40
 81085a0:	d02c      	beq.n	81085fc <UART_SetConfig+0x654>
 81085a2:	2b10      	cmp	r3, #16
 81085a4:	d014      	beq.n	81085d0 <UART_SetConfig+0x628>
 81085a6:	e03b      	b.n	8108620 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81085a8:	f7fe fa56 	bl	8106a58 <HAL_RCCEx_GetD3PCLK1Freq>
 81085ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81085ae:	e03d      	b.n	810862c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81085b0:	f107 0314 	add.w	r3, r7, #20
 81085b4:	4618      	mov	r0, r3
 81085b6:	f7fe fa65 	bl	8106a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81085ba:	69bb      	ldr	r3, [r7, #24]
 81085bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81085be:	e035      	b.n	810862c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81085c0:	f107 0308 	add.w	r3, r7, #8
 81085c4:	4618      	mov	r0, r3
 81085c6:	f7fe fba9 	bl	8106d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81085ca:	68fb      	ldr	r3, [r7, #12]
 81085cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81085ce:	e02d      	b.n	810862c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81085d0:	4b0d      	ldr	r3, [pc, #52]	; (8108608 <UART_SetConfig+0x660>)
 81085d2:	681b      	ldr	r3, [r3, #0]
 81085d4:	f003 0320 	and.w	r3, r3, #32
 81085d8:	2b00      	cmp	r3, #0
 81085da:	d009      	beq.n	81085f0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81085dc:	4b0a      	ldr	r3, [pc, #40]	; (8108608 <UART_SetConfig+0x660>)
 81085de:	681b      	ldr	r3, [r3, #0]
 81085e0:	08db      	lsrs	r3, r3, #3
 81085e2:	f003 0303 	and.w	r3, r3, #3
 81085e6:	4a0c      	ldr	r2, [pc, #48]	; (8108618 <UART_SetConfig+0x670>)
 81085e8:	fa22 f303 	lsr.w	r3, r2, r3
 81085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81085ee:	e01d      	b.n	810862c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 81085f0:	4b09      	ldr	r3, [pc, #36]	; (8108618 <UART_SetConfig+0x670>)
 81085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81085f4:	e01a      	b.n	810862c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81085f6:	4b09      	ldr	r3, [pc, #36]	; (810861c <UART_SetConfig+0x674>)
 81085f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81085fa:	e017      	b.n	810862c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81085fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108602:	e013      	b.n	810862c <UART_SetConfig+0x684>
 8108604:	40011400 	.word	0x40011400
 8108608:	58024400 	.word	0x58024400
 810860c:	40007800 	.word	0x40007800
 8108610:	40007c00 	.word	0x40007c00
 8108614:	58000c00 	.word	0x58000c00
 8108618:	03d09000 	.word	0x03d09000
 810861c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8108620:	2300      	movs	r3, #0
 8108622:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108624:	2301      	movs	r3, #1
 8108626:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810862a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810862e:	2b00      	cmp	r3, #0
 8108630:	f000 824d 	beq.w	8108ace <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108634:	687b      	ldr	r3, [r7, #4]
 8108636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108638:	4aad      	ldr	r2, [pc, #692]	; (81088f0 <UART_SetConfig+0x948>)
 810863a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810863e:	461a      	mov	r2, r3
 8108640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108642:	fbb3 f3f2 	udiv	r3, r3, r2
 8108646:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108648:	687b      	ldr	r3, [r7, #4]
 810864a:	685a      	ldr	r2, [r3, #4]
 810864c:	4613      	mov	r3, r2
 810864e:	005b      	lsls	r3, r3, #1
 8108650:	4413      	add	r3, r2
 8108652:	6a3a      	ldr	r2, [r7, #32]
 8108654:	429a      	cmp	r2, r3
 8108656:	d305      	bcc.n	8108664 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	685b      	ldr	r3, [r3, #4]
 810865c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810865e:	6a3a      	ldr	r2, [r7, #32]
 8108660:	429a      	cmp	r2, r3
 8108662:	d903      	bls.n	810866c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8108664:	2301      	movs	r3, #1
 8108666:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810866a:	e230      	b.n	8108ace <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810866e:	4618      	mov	r0, r3
 8108670:	f04f 0100 	mov.w	r1, #0
 8108674:	687b      	ldr	r3, [r7, #4]
 8108676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108678:	4a9d      	ldr	r2, [pc, #628]	; (81088f0 <UART_SetConfig+0x948>)
 810867a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810867e:	b29b      	uxth	r3, r3
 8108680:	f04f 0400 	mov.w	r4, #0
 8108684:	461a      	mov	r2, r3
 8108686:	4623      	mov	r3, r4
 8108688:	f7f8 fbc6 	bl	8100e18 <__aeabi_uldivmod>
 810868c:	4603      	mov	r3, r0
 810868e:	460c      	mov	r4, r1
 8108690:	4619      	mov	r1, r3
 8108692:	4622      	mov	r2, r4
 8108694:	f04f 0300 	mov.w	r3, #0
 8108698:	f04f 0400 	mov.w	r4, #0
 810869c:	0214      	lsls	r4, r2, #8
 810869e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 81086a2:	020b      	lsls	r3, r1, #8
 81086a4:	687a      	ldr	r2, [r7, #4]
 81086a6:	6852      	ldr	r2, [r2, #4]
 81086a8:	0852      	lsrs	r2, r2, #1
 81086aa:	4611      	mov	r1, r2
 81086ac:	f04f 0200 	mov.w	r2, #0
 81086b0:	eb13 0b01 	adds.w	fp, r3, r1
 81086b4:	eb44 0c02 	adc.w	ip, r4, r2
 81086b8:	4658      	mov	r0, fp
 81086ba:	4661      	mov	r1, ip
 81086bc:	687b      	ldr	r3, [r7, #4]
 81086be:	685b      	ldr	r3, [r3, #4]
 81086c0:	f04f 0400 	mov.w	r4, #0
 81086c4:	461a      	mov	r2, r3
 81086c6:	4623      	mov	r3, r4
 81086c8:	f7f8 fba6 	bl	8100e18 <__aeabi_uldivmod>
 81086cc:	4603      	mov	r3, r0
 81086ce:	460c      	mov	r4, r1
 81086d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81086d8:	d308      	bcc.n	81086ec <UART_SetConfig+0x744>
 81086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81086e0:	d204      	bcs.n	81086ec <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 81086e2:	687b      	ldr	r3, [r7, #4]
 81086e4:	681b      	ldr	r3, [r3, #0]
 81086e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81086e8:	60da      	str	r2, [r3, #12]
 81086ea:	e1f0      	b.n	8108ace <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 81086ec:	2301      	movs	r3, #1
 81086ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81086f2:	e1ec      	b.n	8108ace <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	69db      	ldr	r3, [r3, #28]
 81086f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81086fc:	f040 8100 	bne.w	8108900 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8108700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108704:	2b40      	cmp	r3, #64	; 0x40
 8108706:	f200 80b7 	bhi.w	8108878 <UART_SetConfig+0x8d0>
 810870a:	a201      	add	r2, pc, #4	; (adr r2, 8108710 <UART_SetConfig+0x768>)
 810870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108710:	08108815 	.word	0x08108815
 8108714:	0810881d 	.word	0x0810881d
 8108718:	08108879 	.word	0x08108879
 810871c:	08108879 	.word	0x08108879
 8108720:	08108825 	.word	0x08108825
 8108724:	08108879 	.word	0x08108879
 8108728:	08108879 	.word	0x08108879
 810872c:	08108879 	.word	0x08108879
 8108730:	08108835 	.word	0x08108835
 8108734:	08108879 	.word	0x08108879
 8108738:	08108879 	.word	0x08108879
 810873c:	08108879 	.word	0x08108879
 8108740:	08108879 	.word	0x08108879
 8108744:	08108879 	.word	0x08108879
 8108748:	08108879 	.word	0x08108879
 810874c:	08108879 	.word	0x08108879
 8108750:	08108845 	.word	0x08108845
 8108754:	08108879 	.word	0x08108879
 8108758:	08108879 	.word	0x08108879
 810875c:	08108879 	.word	0x08108879
 8108760:	08108879 	.word	0x08108879
 8108764:	08108879 	.word	0x08108879
 8108768:	08108879 	.word	0x08108879
 810876c:	08108879 	.word	0x08108879
 8108770:	08108879 	.word	0x08108879
 8108774:	08108879 	.word	0x08108879
 8108778:	08108879 	.word	0x08108879
 810877c:	08108879 	.word	0x08108879
 8108780:	08108879 	.word	0x08108879
 8108784:	08108879 	.word	0x08108879
 8108788:	08108879 	.word	0x08108879
 810878c:	08108879 	.word	0x08108879
 8108790:	0810886b 	.word	0x0810886b
 8108794:	08108879 	.word	0x08108879
 8108798:	08108879 	.word	0x08108879
 810879c:	08108879 	.word	0x08108879
 81087a0:	08108879 	.word	0x08108879
 81087a4:	08108879 	.word	0x08108879
 81087a8:	08108879 	.word	0x08108879
 81087ac:	08108879 	.word	0x08108879
 81087b0:	08108879 	.word	0x08108879
 81087b4:	08108879 	.word	0x08108879
 81087b8:	08108879 	.word	0x08108879
 81087bc:	08108879 	.word	0x08108879
 81087c0:	08108879 	.word	0x08108879
 81087c4:	08108879 	.word	0x08108879
 81087c8:	08108879 	.word	0x08108879
 81087cc:	08108879 	.word	0x08108879
 81087d0:	08108879 	.word	0x08108879
 81087d4:	08108879 	.word	0x08108879
 81087d8:	08108879 	.word	0x08108879
 81087dc:	08108879 	.word	0x08108879
 81087e0:	08108879 	.word	0x08108879
 81087e4:	08108879 	.word	0x08108879
 81087e8:	08108879 	.word	0x08108879
 81087ec:	08108879 	.word	0x08108879
 81087f0:	08108879 	.word	0x08108879
 81087f4:	08108879 	.word	0x08108879
 81087f8:	08108879 	.word	0x08108879
 81087fc:	08108879 	.word	0x08108879
 8108800:	08108879 	.word	0x08108879
 8108804:	08108879 	.word	0x08108879
 8108808:	08108879 	.word	0x08108879
 810880c:	08108879 	.word	0x08108879
 8108810:	08108871 	.word	0x08108871
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108814:	f7fe f8b2 	bl	810697c <HAL_RCC_GetPCLK1Freq>
 8108818:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810881a:	e033      	b.n	8108884 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810881c:	f7fe f8c4 	bl	81069a8 <HAL_RCC_GetPCLK2Freq>
 8108820:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108822:	e02f      	b.n	8108884 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108824:	f107 0314 	add.w	r3, r7, #20
 8108828:	4618      	mov	r0, r3
 810882a:	f7fe f92b 	bl	8106a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810882e:	69bb      	ldr	r3, [r7, #24]
 8108830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108832:	e027      	b.n	8108884 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108834:	f107 0308 	add.w	r3, r7, #8
 8108838:	4618      	mov	r0, r3
 810883a:	f7fe fa6f 	bl	8106d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810883e:	68fb      	ldr	r3, [r7, #12]
 8108840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108842:	e01f      	b.n	8108884 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108844:	4b2b      	ldr	r3, [pc, #172]	; (81088f4 <UART_SetConfig+0x94c>)
 8108846:	681b      	ldr	r3, [r3, #0]
 8108848:	f003 0320 	and.w	r3, r3, #32
 810884c:	2b00      	cmp	r3, #0
 810884e:	d009      	beq.n	8108864 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108850:	4b28      	ldr	r3, [pc, #160]	; (81088f4 <UART_SetConfig+0x94c>)
 8108852:	681b      	ldr	r3, [r3, #0]
 8108854:	08db      	lsrs	r3, r3, #3
 8108856:	f003 0303 	and.w	r3, r3, #3
 810885a:	4a27      	ldr	r2, [pc, #156]	; (81088f8 <UART_SetConfig+0x950>)
 810885c:	fa22 f303 	lsr.w	r3, r2, r3
 8108860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108862:	e00f      	b.n	8108884 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8108864:	4b24      	ldr	r3, [pc, #144]	; (81088f8 <UART_SetConfig+0x950>)
 8108866:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108868:	e00c      	b.n	8108884 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810886a:	4b24      	ldr	r3, [pc, #144]	; (81088fc <UART_SetConfig+0x954>)
 810886c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810886e:	e009      	b.n	8108884 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108876:	e005      	b.n	8108884 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8108878:	2300      	movs	r3, #0
 810887a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810887c:	2301      	movs	r3, #1
 810887e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108882:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108886:	2b00      	cmp	r3, #0
 8108888:	f000 8121 	beq.w	8108ace <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810888c:	687b      	ldr	r3, [r7, #4]
 810888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108890:	4a17      	ldr	r2, [pc, #92]	; (81088f0 <UART_SetConfig+0x948>)
 8108892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108896:	461a      	mov	r2, r3
 8108898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810889a:	fbb3 f3f2 	udiv	r3, r3, r2
 810889e:	005a      	lsls	r2, r3, #1
 81088a0:	687b      	ldr	r3, [r7, #4]
 81088a2:	685b      	ldr	r3, [r3, #4]
 81088a4:	085b      	lsrs	r3, r3, #1
 81088a6:	441a      	add	r2, r3
 81088a8:	687b      	ldr	r3, [r7, #4]
 81088aa:	685b      	ldr	r3, [r3, #4]
 81088ac:	fbb2 f3f3 	udiv	r3, r2, r3
 81088b0:	b29b      	uxth	r3, r3
 81088b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088b6:	2b0f      	cmp	r3, #15
 81088b8:	d916      	bls.n	81088e8 <UART_SetConfig+0x940>
 81088ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81088c0:	d212      	bcs.n	81088e8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088c4:	b29b      	uxth	r3, r3
 81088c6:	f023 030f 	bic.w	r3, r3, #15
 81088ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088ce:	085b      	lsrs	r3, r3, #1
 81088d0:	b29b      	uxth	r3, r3
 81088d2:	f003 0307 	and.w	r3, r3, #7
 81088d6:	b29a      	uxth	r2, r3
 81088d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81088da:	4313      	orrs	r3, r2
 81088dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 81088de:	687b      	ldr	r3, [r7, #4]
 81088e0:	681b      	ldr	r3, [r3, #0]
 81088e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81088e4:	60da      	str	r2, [r3, #12]
 81088e6:	e0f2      	b.n	8108ace <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 81088e8:	2301      	movs	r3, #1
 81088ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81088ee:	e0ee      	b.n	8108ace <UART_SetConfig+0xb26>
 81088f0:	08115770 	.word	0x08115770
 81088f4:	58024400 	.word	0x58024400
 81088f8:	03d09000 	.word	0x03d09000
 81088fc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8108900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108904:	2b40      	cmp	r3, #64	; 0x40
 8108906:	f200 80b7 	bhi.w	8108a78 <UART_SetConfig+0xad0>
 810890a:	a201      	add	r2, pc, #4	; (adr r2, 8108910 <UART_SetConfig+0x968>)
 810890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108910:	08108a15 	.word	0x08108a15
 8108914:	08108a1d 	.word	0x08108a1d
 8108918:	08108a79 	.word	0x08108a79
 810891c:	08108a79 	.word	0x08108a79
 8108920:	08108a25 	.word	0x08108a25
 8108924:	08108a79 	.word	0x08108a79
 8108928:	08108a79 	.word	0x08108a79
 810892c:	08108a79 	.word	0x08108a79
 8108930:	08108a35 	.word	0x08108a35
 8108934:	08108a79 	.word	0x08108a79
 8108938:	08108a79 	.word	0x08108a79
 810893c:	08108a79 	.word	0x08108a79
 8108940:	08108a79 	.word	0x08108a79
 8108944:	08108a79 	.word	0x08108a79
 8108948:	08108a79 	.word	0x08108a79
 810894c:	08108a79 	.word	0x08108a79
 8108950:	08108a45 	.word	0x08108a45
 8108954:	08108a79 	.word	0x08108a79
 8108958:	08108a79 	.word	0x08108a79
 810895c:	08108a79 	.word	0x08108a79
 8108960:	08108a79 	.word	0x08108a79
 8108964:	08108a79 	.word	0x08108a79
 8108968:	08108a79 	.word	0x08108a79
 810896c:	08108a79 	.word	0x08108a79
 8108970:	08108a79 	.word	0x08108a79
 8108974:	08108a79 	.word	0x08108a79
 8108978:	08108a79 	.word	0x08108a79
 810897c:	08108a79 	.word	0x08108a79
 8108980:	08108a79 	.word	0x08108a79
 8108984:	08108a79 	.word	0x08108a79
 8108988:	08108a79 	.word	0x08108a79
 810898c:	08108a79 	.word	0x08108a79
 8108990:	08108a6b 	.word	0x08108a6b
 8108994:	08108a79 	.word	0x08108a79
 8108998:	08108a79 	.word	0x08108a79
 810899c:	08108a79 	.word	0x08108a79
 81089a0:	08108a79 	.word	0x08108a79
 81089a4:	08108a79 	.word	0x08108a79
 81089a8:	08108a79 	.word	0x08108a79
 81089ac:	08108a79 	.word	0x08108a79
 81089b0:	08108a79 	.word	0x08108a79
 81089b4:	08108a79 	.word	0x08108a79
 81089b8:	08108a79 	.word	0x08108a79
 81089bc:	08108a79 	.word	0x08108a79
 81089c0:	08108a79 	.word	0x08108a79
 81089c4:	08108a79 	.word	0x08108a79
 81089c8:	08108a79 	.word	0x08108a79
 81089cc:	08108a79 	.word	0x08108a79
 81089d0:	08108a79 	.word	0x08108a79
 81089d4:	08108a79 	.word	0x08108a79
 81089d8:	08108a79 	.word	0x08108a79
 81089dc:	08108a79 	.word	0x08108a79
 81089e0:	08108a79 	.word	0x08108a79
 81089e4:	08108a79 	.word	0x08108a79
 81089e8:	08108a79 	.word	0x08108a79
 81089ec:	08108a79 	.word	0x08108a79
 81089f0:	08108a79 	.word	0x08108a79
 81089f4:	08108a79 	.word	0x08108a79
 81089f8:	08108a79 	.word	0x08108a79
 81089fc:	08108a79 	.word	0x08108a79
 8108a00:	08108a79 	.word	0x08108a79
 8108a04:	08108a79 	.word	0x08108a79
 8108a08:	08108a79 	.word	0x08108a79
 8108a0c:	08108a79 	.word	0x08108a79
 8108a10:	08108a71 	.word	0x08108a71
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108a14:	f7fd ffb2 	bl	810697c <HAL_RCC_GetPCLK1Freq>
 8108a18:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108a1a:	e033      	b.n	8108a84 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108a1c:	f7fd ffc4 	bl	81069a8 <HAL_RCC_GetPCLK2Freq>
 8108a20:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108a22:	e02f      	b.n	8108a84 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108a24:	f107 0314 	add.w	r3, r7, #20
 8108a28:	4618      	mov	r0, r3
 8108a2a:	f7fe f82b 	bl	8106a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108a2e:	69bb      	ldr	r3, [r7, #24]
 8108a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a32:	e027      	b.n	8108a84 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108a34:	f107 0308 	add.w	r3, r7, #8
 8108a38:	4618      	mov	r0, r3
 8108a3a:	f7fe f96f 	bl	8106d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108a3e:	68fb      	ldr	r3, [r7, #12]
 8108a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a42:	e01f      	b.n	8108a84 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108a44:	4b2c      	ldr	r3, [pc, #176]	; (8108af8 <UART_SetConfig+0xb50>)
 8108a46:	681b      	ldr	r3, [r3, #0]
 8108a48:	f003 0320 	and.w	r3, r3, #32
 8108a4c:	2b00      	cmp	r3, #0
 8108a4e:	d009      	beq.n	8108a64 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108a50:	4b29      	ldr	r3, [pc, #164]	; (8108af8 <UART_SetConfig+0xb50>)
 8108a52:	681b      	ldr	r3, [r3, #0]
 8108a54:	08db      	lsrs	r3, r3, #3
 8108a56:	f003 0303 	and.w	r3, r3, #3
 8108a5a:	4a28      	ldr	r2, [pc, #160]	; (8108afc <UART_SetConfig+0xb54>)
 8108a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8108a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108a62:	e00f      	b.n	8108a84 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8108a64:	4b25      	ldr	r3, [pc, #148]	; (8108afc <UART_SetConfig+0xb54>)
 8108a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a68:	e00c      	b.n	8108a84 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108a6a:	4b25      	ldr	r3, [pc, #148]	; (8108b00 <UART_SetConfig+0xb58>)
 8108a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a6e:	e009      	b.n	8108a84 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a76:	e005      	b.n	8108a84 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8108a78:	2300      	movs	r3, #0
 8108a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108a7c:	2301      	movs	r3, #1
 8108a7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108a82:	bf00      	nop
    }

    if (pclk != 0U)
 8108a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108a86:	2b00      	cmp	r3, #0
 8108a88:	d021      	beq.n	8108ace <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108a8a:	687b      	ldr	r3, [r7, #4]
 8108a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a8e:	4a1d      	ldr	r2, [pc, #116]	; (8108b04 <UART_SetConfig+0xb5c>)
 8108a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108a94:	461a      	mov	r2, r3
 8108a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108a98:	fbb3 f2f2 	udiv	r2, r3, r2
 8108a9c:	687b      	ldr	r3, [r7, #4]
 8108a9e:	685b      	ldr	r3, [r3, #4]
 8108aa0:	085b      	lsrs	r3, r3, #1
 8108aa2:	441a      	add	r2, r3
 8108aa4:	687b      	ldr	r3, [r7, #4]
 8108aa6:	685b      	ldr	r3, [r3, #4]
 8108aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8108aac:	b29b      	uxth	r3, r3
 8108aae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ab2:	2b0f      	cmp	r3, #15
 8108ab4:	d908      	bls.n	8108ac8 <UART_SetConfig+0xb20>
 8108ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108abc:	d204      	bcs.n	8108ac8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	681b      	ldr	r3, [r3, #0]
 8108ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108ac4:	60da      	str	r2, [r3, #12]
 8108ac6:	e002      	b.n	8108ace <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8108ac8:	2301      	movs	r3, #1
 8108aca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108ace:	687b      	ldr	r3, [r7, #4]
 8108ad0:	2201      	movs	r2, #1
 8108ad2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108ad6:	687b      	ldr	r3, [r7, #4]
 8108ad8:	2201      	movs	r2, #1
 8108ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108ade:	687b      	ldr	r3, [r7, #4]
 8108ae0:	2200      	movs	r2, #0
 8108ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8108ae4:	687b      	ldr	r3, [r7, #4]
 8108ae6:	2200      	movs	r2, #0
 8108ae8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8108aea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8108aee:	4618      	mov	r0, r3
 8108af0:	3738      	adds	r7, #56	; 0x38
 8108af2:	46bd      	mov	sp, r7
 8108af4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8108af8:	58024400 	.word	0x58024400
 8108afc:	03d09000 	.word	0x03d09000
 8108b00:	003d0900 	.word	0x003d0900
 8108b04:	08115770 	.word	0x08115770

08108b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108b08:	b480      	push	{r7}
 8108b0a:	b083      	sub	sp, #12
 8108b0c:	af00      	add	r7, sp, #0
 8108b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b14:	f003 0301 	and.w	r3, r3, #1
 8108b18:	2b00      	cmp	r3, #0
 8108b1a:	d00a      	beq.n	8108b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	681b      	ldr	r3, [r3, #0]
 8108b20:	685b      	ldr	r3, [r3, #4]
 8108b22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108b26:	687b      	ldr	r3, [r7, #4]
 8108b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	681b      	ldr	r3, [r3, #0]
 8108b2e:	430a      	orrs	r2, r1
 8108b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b36:	f003 0302 	and.w	r3, r3, #2
 8108b3a:	2b00      	cmp	r3, #0
 8108b3c:	d00a      	beq.n	8108b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108b3e:	687b      	ldr	r3, [r7, #4]
 8108b40:	681b      	ldr	r3, [r3, #0]
 8108b42:	685b      	ldr	r3, [r3, #4]
 8108b44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108b48:	687b      	ldr	r3, [r7, #4]
 8108b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108b4c:	687b      	ldr	r3, [r7, #4]
 8108b4e:	681b      	ldr	r3, [r3, #0]
 8108b50:	430a      	orrs	r2, r1
 8108b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108b54:	687b      	ldr	r3, [r7, #4]
 8108b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b58:	f003 0304 	and.w	r3, r3, #4
 8108b5c:	2b00      	cmp	r3, #0
 8108b5e:	d00a      	beq.n	8108b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	681b      	ldr	r3, [r3, #0]
 8108b64:	685b      	ldr	r3, [r3, #4]
 8108b66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108b6a:	687b      	ldr	r3, [r7, #4]
 8108b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108b6e:	687b      	ldr	r3, [r7, #4]
 8108b70:	681b      	ldr	r3, [r3, #0]
 8108b72:	430a      	orrs	r2, r1
 8108b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108b76:	687b      	ldr	r3, [r7, #4]
 8108b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b7a:	f003 0308 	and.w	r3, r3, #8
 8108b7e:	2b00      	cmp	r3, #0
 8108b80:	d00a      	beq.n	8108b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108b82:	687b      	ldr	r3, [r7, #4]
 8108b84:	681b      	ldr	r3, [r3, #0]
 8108b86:	685b      	ldr	r3, [r3, #4]
 8108b88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108b8c:	687b      	ldr	r3, [r7, #4]
 8108b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108b90:	687b      	ldr	r3, [r7, #4]
 8108b92:	681b      	ldr	r3, [r3, #0]
 8108b94:	430a      	orrs	r2, r1
 8108b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108b98:	687b      	ldr	r3, [r7, #4]
 8108b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b9c:	f003 0310 	and.w	r3, r3, #16
 8108ba0:	2b00      	cmp	r3, #0
 8108ba2:	d00a      	beq.n	8108bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	681b      	ldr	r3, [r3, #0]
 8108ba8:	689b      	ldr	r3, [r3, #8]
 8108baa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108bb2:	687b      	ldr	r3, [r7, #4]
 8108bb4:	681b      	ldr	r3, [r3, #0]
 8108bb6:	430a      	orrs	r2, r1
 8108bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108bba:	687b      	ldr	r3, [r7, #4]
 8108bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108bbe:	f003 0320 	and.w	r3, r3, #32
 8108bc2:	2b00      	cmp	r3, #0
 8108bc4:	d00a      	beq.n	8108bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108bc6:	687b      	ldr	r3, [r7, #4]
 8108bc8:	681b      	ldr	r3, [r3, #0]
 8108bca:	689b      	ldr	r3, [r3, #8]
 8108bcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108bd0:	687b      	ldr	r3, [r7, #4]
 8108bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108bd4:	687b      	ldr	r3, [r7, #4]
 8108bd6:	681b      	ldr	r3, [r3, #0]
 8108bd8:	430a      	orrs	r2, r1
 8108bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108bdc:	687b      	ldr	r3, [r7, #4]
 8108bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108be4:	2b00      	cmp	r3, #0
 8108be6:	d01a      	beq.n	8108c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108be8:	687b      	ldr	r3, [r7, #4]
 8108bea:	681b      	ldr	r3, [r3, #0]
 8108bec:	685b      	ldr	r3, [r3, #4]
 8108bee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108bf2:	687b      	ldr	r3, [r7, #4]
 8108bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108bf6:	687b      	ldr	r3, [r7, #4]
 8108bf8:	681b      	ldr	r3, [r3, #0]
 8108bfa:	430a      	orrs	r2, r1
 8108bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108c06:	d10a      	bne.n	8108c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108c08:	687b      	ldr	r3, [r7, #4]
 8108c0a:	681b      	ldr	r3, [r3, #0]
 8108c0c:	685b      	ldr	r3, [r3, #4]
 8108c0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108c16:	687b      	ldr	r3, [r7, #4]
 8108c18:	681b      	ldr	r3, [r3, #0]
 8108c1a:	430a      	orrs	r2, r1
 8108c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108c1e:	687b      	ldr	r3, [r7, #4]
 8108c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108c26:	2b00      	cmp	r3, #0
 8108c28:	d00a      	beq.n	8108c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108c2a:	687b      	ldr	r3, [r7, #4]
 8108c2c:	681b      	ldr	r3, [r3, #0]
 8108c2e:	685b      	ldr	r3, [r3, #4]
 8108c30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108c38:	687b      	ldr	r3, [r7, #4]
 8108c3a:	681b      	ldr	r3, [r3, #0]
 8108c3c:	430a      	orrs	r2, r1
 8108c3e:	605a      	str	r2, [r3, #4]
  }
}
 8108c40:	bf00      	nop
 8108c42:	370c      	adds	r7, #12
 8108c44:	46bd      	mov	sp, r7
 8108c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c4a:	4770      	bx	lr

08108c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108c4c:	b580      	push	{r7, lr}
 8108c4e:	b086      	sub	sp, #24
 8108c50:	af02      	add	r7, sp, #8
 8108c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	2200      	movs	r2, #0
 8108c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8108c5c:	f7f9 fb54 	bl	8102308 <HAL_GetTick>
 8108c60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	681b      	ldr	r3, [r3, #0]
 8108c66:	681b      	ldr	r3, [r3, #0]
 8108c68:	f003 0308 	and.w	r3, r3, #8
 8108c6c:	2b08      	cmp	r3, #8
 8108c6e:	d10e      	bne.n	8108c8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108c74:	9300      	str	r3, [sp, #0]
 8108c76:	68fb      	ldr	r3, [r7, #12]
 8108c78:	2200      	movs	r2, #0
 8108c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108c7e:	6878      	ldr	r0, [r7, #4]
 8108c80:	f000 f82c 	bl	8108cdc <UART_WaitOnFlagUntilTimeout>
 8108c84:	4603      	mov	r3, r0
 8108c86:	2b00      	cmp	r3, #0
 8108c88:	d001      	beq.n	8108c8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108c8a:	2303      	movs	r3, #3
 8108c8c:	e022      	b.n	8108cd4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108c8e:	687b      	ldr	r3, [r7, #4]
 8108c90:	681b      	ldr	r3, [r3, #0]
 8108c92:	681b      	ldr	r3, [r3, #0]
 8108c94:	f003 0304 	and.w	r3, r3, #4
 8108c98:	2b04      	cmp	r3, #4
 8108c9a:	d10e      	bne.n	8108cba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108ca0:	9300      	str	r3, [sp, #0]
 8108ca2:	68fb      	ldr	r3, [r7, #12]
 8108ca4:	2200      	movs	r2, #0
 8108ca6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108caa:	6878      	ldr	r0, [r7, #4]
 8108cac:	f000 f816 	bl	8108cdc <UART_WaitOnFlagUntilTimeout>
 8108cb0:	4603      	mov	r3, r0
 8108cb2:	2b00      	cmp	r3, #0
 8108cb4:	d001      	beq.n	8108cba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108cb6:	2303      	movs	r3, #3
 8108cb8:	e00c      	b.n	8108cd4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	2220      	movs	r2, #32
 8108cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8108cc2:	687b      	ldr	r3, [r7, #4]
 8108cc4:	2220      	movs	r2, #32
 8108cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	2200      	movs	r2, #0
 8108cce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108cd2:	2300      	movs	r3, #0
}
 8108cd4:	4618      	mov	r0, r3
 8108cd6:	3710      	adds	r7, #16
 8108cd8:	46bd      	mov	sp, r7
 8108cda:	bd80      	pop	{r7, pc}

08108cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108cdc:	b580      	push	{r7, lr}
 8108cde:	b084      	sub	sp, #16
 8108ce0:	af00      	add	r7, sp, #0
 8108ce2:	60f8      	str	r0, [r7, #12]
 8108ce4:	60b9      	str	r1, [r7, #8]
 8108ce6:	603b      	str	r3, [r7, #0]
 8108ce8:	4613      	mov	r3, r2
 8108cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108cec:	e062      	b.n	8108db4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108cee:	69bb      	ldr	r3, [r7, #24]
 8108cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108cf4:	d05e      	beq.n	8108db4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108cf6:	f7f9 fb07 	bl	8102308 <HAL_GetTick>
 8108cfa:	4602      	mov	r2, r0
 8108cfc:	683b      	ldr	r3, [r7, #0]
 8108cfe:	1ad3      	subs	r3, r2, r3
 8108d00:	69ba      	ldr	r2, [r7, #24]
 8108d02:	429a      	cmp	r2, r3
 8108d04:	d302      	bcc.n	8108d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8108d06:	69bb      	ldr	r3, [r7, #24]
 8108d08:	2b00      	cmp	r3, #0
 8108d0a:	d11d      	bne.n	8108d48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108d0c:	68fb      	ldr	r3, [r7, #12]
 8108d0e:	681b      	ldr	r3, [r3, #0]
 8108d10:	681a      	ldr	r2, [r3, #0]
 8108d12:	68fb      	ldr	r3, [r7, #12]
 8108d14:	681b      	ldr	r3, [r3, #0]
 8108d16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108d1a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108d1c:	68fb      	ldr	r3, [r7, #12]
 8108d1e:	681b      	ldr	r3, [r3, #0]
 8108d20:	689a      	ldr	r2, [r3, #8]
 8108d22:	68fb      	ldr	r3, [r7, #12]
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	f022 0201 	bic.w	r2, r2, #1
 8108d2a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8108d2c:	68fb      	ldr	r3, [r7, #12]
 8108d2e:	2220      	movs	r2, #32
 8108d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8108d34:	68fb      	ldr	r3, [r7, #12]
 8108d36:	2220      	movs	r2, #32
 8108d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8108d3c:	68fb      	ldr	r3, [r7, #12]
 8108d3e:	2200      	movs	r2, #0
 8108d40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8108d44:	2303      	movs	r3, #3
 8108d46:	e045      	b.n	8108dd4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108d48:	68fb      	ldr	r3, [r7, #12]
 8108d4a:	681b      	ldr	r3, [r3, #0]
 8108d4c:	681b      	ldr	r3, [r3, #0]
 8108d4e:	f003 0304 	and.w	r3, r3, #4
 8108d52:	2b00      	cmp	r3, #0
 8108d54:	d02e      	beq.n	8108db4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108d56:	68fb      	ldr	r3, [r7, #12]
 8108d58:	681b      	ldr	r3, [r3, #0]
 8108d5a:	69db      	ldr	r3, [r3, #28]
 8108d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108d64:	d126      	bne.n	8108db4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108d66:	68fb      	ldr	r3, [r7, #12]
 8108d68:	681b      	ldr	r3, [r3, #0]
 8108d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108d6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108d70:	68fb      	ldr	r3, [r7, #12]
 8108d72:	681b      	ldr	r3, [r3, #0]
 8108d74:	681a      	ldr	r2, [r3, #0]
 8108d76:	68fb      	ldr	r3, [r7, #12]
 8108d78:	681b      	ldr	r3, [r3, #0]
 8108d7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108d7e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108d80:	68fb      	ldr	r3, [r7, #12]
 8108d82:	681b      	ldr	r3, [r3, #0]
 8108d84:	689a      	ldr	r2, [r3, #8]
 8108d86:	68fb      	ldr	r3, [r7, #12]
 8108d88:	681b      	ldr	r3, [r3, #0]
 8108d8a:	f022 0201 	bic.w	r2, r2, #1
 8108d8e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8108d90:	68fb      	ldr	r3, [r7, #12]
 8108d92:	2220      	movs	r2, #32
 8108d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8108d98:	68fb      	ldr	r3, [r7, #12]
 8108d9a:	2220      	movs	r2, #32
 8108d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108da0:	68fb      	ldr	r3, [r7, #12]
 8108da2:	2220      	movs	r2, #32
 8108da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108da8:	68fb      	ldr	r3, [r7, #12]
 8108daa:	2200      	movs	r2, #0
 8108dac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8108db0:	2303      	movs	r3, #3
 8108db2:	e00f      	b.n	8108dd4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108db4:	68fb      	ldr	r3, [r7, #12]
 8108db6:	681b      	ldr	r3, [r3, #0]
 8108db8:	69da      	ldr	r2, [r3, #28]
 8108dba:	68bb      	ldr	r3, [r7, #8]
 8108dbc:	4013      	ands	r3, r2
 8108dbe:	68ba      	ldr	r2, [r7, #8]
 8108dc0:	429a      	cmp	r2, r3
 8108dc2:	bf0c      	ite	eq
 8108dc4:	2301      	moveq	r3, #1
 8108dc6:	2300      	movne	r3, #0
 8108dc8:	b2db      	uxtb	r3, r3
 8108dca:	461a      	mov	r2, r3
 8108dcc:	79fb      	ldrb	r3, [r7, #7]
 8108dce:	429a      	cmp	r2, r3
 8108dd0:	d08d      	beq.n	8108cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108dd2:	2300      	movs	r3, #0
}
 8108dd4:	4618      	mov	r0, r3
 8108dd6:	3710      	adds	r7, #16
 8108dd8:	46bd      	mov	sp, r7
 8108dda:	bd80      	pop	{r7, pc}

08108ddc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8108ddc:	b480      	push	{r7}
 8108dde:	b083      	sub	sp, #12
 8108de0:	af00      	add	r7, sp, #0
 8108de2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8108de4:	687b      	ldr	r3, [r7, #4]
 8108de6:	681b      	ldr	r3, [r3, #0]
 8108de8:	681a      	ldr	r2, [r3, #0]
 8108dea:	687b      	ldr	r3, [r7, #4]
 8108dec:	681b      	ldr	r3, [r3, #0]
 8108dee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8108df2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8108df4:	687b      	ldr	r3, [r7, #4]
 8108df6:	681b      	ldr	r3, [r3, #0]
 8108df8:	689a      	ldr	r2, [r3, #8]
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	681b      	ldr	r3, [r3, #0]
 8108dfe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8108e02:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	2220      	movs	r2, #32
 8108e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8108e0c:	bf00      	nop
 8108e0e:	370c      	adds	r7, #12
 8108e10:	46bd      	mov	sp, r7
 8108e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e16:	4770      	bx	lr

08108e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108e18:	b480      	push	{r7}
 8108e1a:	b083      	sub	sp, #12
 8108e1c:	af00      	add	r7, sp, #0
 8108e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108e20:	687b      	ldr	r3, [r7, #4]
 8108e22:	681b      	ldr	r3, [r3, #0]
 8108e24:	681a      	ldr	r2, [r3, #0]
 8108e26:	687b      	ldr	r3, [r7, #4]
 8108e28:	681b      	ldr	r3, [r3, #0]
 8108e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8108e2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108e30:	687b      	ldr	r3, [r7, #4]
 8108e32:	681b      	ldr	r3, [r3, #0]
 8108e34:	689b      	ldr	r3, [r3, #8]
 8108e36:	687a      	ldr	r2, [r7, #4]
 8108e38:	6812      	ldr	r2, [r2, #0]
 8108e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108e3e:	f023 0301 	bic.w	r3, r3, #1
 8108e42:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	2220      	movs	r2, #32
 8108e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108e4c:	687b      	ldr	r3, [r7, #4]
 8108e4e:	2200      	movs	r2, #0
 8108e50:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8108e52:	bf00      	nop
 8108e54:	370c      	adds	r7, #12
 8108e56:	46bd      	mov	sp, r7
 8108e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e5c:	4770      	bx	lr

08108e5e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8108e5e:	b580      	push	{r7, lr}
 8108e60:	b084      	sub	sp, #16
 8108e62:	af00      	add	r7, sp, #0
 8108e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108e6a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	69db      	ldr	r3, [r3, #28]
 8108e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108e74:	d01f      	beq.n	8108eb6 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8108e76:	68fb      	ldr	r3, [r7, #12]
 8108e78:	2200      	movs	r2, #0
 8108e7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108e7e:	68fb      	ldr	r3, [r7, #12]
 8108e80:	681b      	ldr	r3, [r3, #0]
 8108e82:	681a      	ldr	r2, [r3, #0]
 8108e84:	68fb      	ldr	r3, [r7, #12]
 8108e86:	681b      	ldr	r3, [r3, #0]
 8108e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8108e8c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108e8e:	68fb      	ldr	r3, [r7, #12]
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	689a      	ldr	r2, [r3, #8]
 8108e94:	68fb      	ldr	r3, [r7, #12]
 8108e96:	681b      	ldr	r3, [r3, #0]
 8108e98:	f022 0201 	bic.w	r2, r2, #1
 8108e9c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108e9e:	68fb      	ldr	r3, [r7, #12]
 8108ea0:	681b      	ldr	r3, [r3, #0]
 8108ea2:	689a      	ldr	r2, [r3, #8]
 8108ea4:	68fb      	ldr	r3, [r7, #12]
 8108ea6:	681b      	ldr	r3, [r3, #0]
 8108ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8108eac:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8108eae:	68fb      	ldr	r3, [r7, #12]
 8108eb0:	2220      	movs	r2, #32
 8108eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8108eb6:	68f8      	ldr	r0, [r7, #12]
 8108eb8:	f7ff f858 	bl	8107f6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108ebc:	bf00      	nop
 8108ebe:	3710      	adds	r7, #16
 8108ec0:	46bd      	mov	sp, r7
 8108ec2:	bd80      	pop	{r7, pc}

08108ec4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8108ec4:	b580      	push	{r7, lr}
 8108ec6:	b084      	sub	sp, #16
 8108ec8:	af00      	add	r7, sp, #0
 8108eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108ed0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8108ed2:	68f8      	ldr	r0, [r7, #12]
 8108ed4:	f7ff f854 	bl	8107f80 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108ed8:	bf00      	nop
 8108eda:	3710      	adds	r7, #16
 8108edc:	46bd      	mov	sp, r7
 8108ede:	bd80      	pop	{r7, pc}

08108ee0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8108ee0:	b580      	push	{r7, lr}
 8108ee2:	b086      	sub	sp, #24
 8108ee4:	af00      	add	r7, sp, #0
 8108ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108eec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8108eee:	697b      	ldr	r3, [r7, #20]
 8108ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108ef4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8108ef6:	697b      	ldr	r3, [r7, #20]
 8108ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108efc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8108efe:	697b      	ldr	r3, [r7, #20]
 8108f00:	681b      	ldr	r3, [r3, #0]
 8108f02:	689b      	ldr	r3, [r3, #8]
 8108f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108f08:	2b80      	cmp	r3, #128	; 0x80
 8108f0a:	d109      	bne.n	8108f20 <UART_DMAError+0x40>
 8108f0c:	693b      	ldr	r3, [r7, #16]
 8108f0e:	2b21      	cmp	r3, #33	; 0x21
 8108f10:	d106      	bne.n	8108f20 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8108f12:	697b      	ldr	r3, [r7, #20]
 8108f14:	2200      	movs	r2, #0
 8108f16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8108f1a:	6978      	ldr	r0, [r7, #20]
 8108f1c:	f7ff ff5e 	bl	8108ddc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8108f20:	697b      	ldr	r3, [r7, #20]
 8108f22:	681b      	ldr	r3, [r3, #0]
 8108f24:	689b      	ldr	r3, [r3, #8]
 8108f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108f2a:	2b40      	cmp	r3, #64	; 0x40
 8108f2c:	d109      	bne.n	8108f42 <UART_DMAError+0x62>
 8108f2e:	68fb      	ldr	r3, [r7, #12]
 8108f30:	2b22      	cmp	r3, #34	; 0x22
 8108f32:	d106      	bne.n	8108f42 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8108f34:	697b      	ldr	r3, [r7, #20]
 8108f36:	2200      	movs	r2, #0
 8108f38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8108f3c:	6978      	ldr	r0, [r7, #20]
 8108f3e:	f7ff ff6b 	bl	8108e18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8108f42:	697b      	ldr	r3, [r7, #20]
 8108f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108f48:	f043 0210 	orr.w	r2, r3, #16
 8108f4c:	697b      	ldr	r3, [r7, #20]
 8108f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8108f52:	6978      	ldr	r0, [r7, #20]
 8108f54:	f7ff f81e 	bl	8107f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108f58:	bf00      	nop
 8108f5a:	3718      	adds	r7, #24
 8108f5c:	46bd      	mov	sp, r7
 8108f5e:	bd80      	pop	{r7, pc}

08108f60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108f60:	b480      	push	{r7}
 8108f62:	b085      	sub	sp, #20
 8108f64:	af00      	add	r7, sp, #0
 8108f66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108f68:	687b      	ldr	r3, [r7, #4]
 8108f6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108f6e:	2b01      	cmp	r3, #1
 8108f70:	d101      	bne.n	8108f76 <HAL_UARTEx_DisableFifoMode+0x16>
 8108f72:	2302      	movs	r3, #2
 8108f74:	e027      	b.n	8108fc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	2201      	movs	r2, #1
 8108f7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	2224      	movs	r2, #36	; 0x24
 8108f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108f86:	687b      	ldr	r3, [r7, #4]
 8108f88:	681b      	ldr	r3, [r3, #0]
 8108f8a:	681b      	ldr	r3, [r3, #0]
 8108f8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108f8e:	687b      	ldr	r3, [r7, #4]
 8108f90:	681b      	ldr	r3, [r3, #0]
 8108f92:	681a      	ldr	r2, [r3, #0]
 8108f94:	687b      	ldr	r3, [r7, #4]
 8108f96:	681b      	ldr	r3, [r3, #0]
 8108f98:	f022 0201 	bic.w	r2, r2, #1
 8108f9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108f9e:	68fb      	ldr	r3, [r7, #12]
 8108fa0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108fa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108fa6:	687b      	ldr	r3, [r7, #4]
 8108fa8:	2200      	movs	r2, #0
 8108faa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108fac:	687b      	ldr	r3, [r7, #4]
 8108fae:	681b      	ldr	r3, [r3, #0]
 8108fb0:	68fa      	ldr	r2, [r7, #12]
 8108fb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108fb4:	687b      	ldr	r3, [r7, #4]
 8108fb6:	2220      	movs	r2, #32
 8108fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	2200      	movs	r2, #0
 8108fc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108fc4:	2300      	movs	r3, #0
}
 8108fc6:	4618      	mov	r0, r3
 8108fc8:	3714      	adds	r7, #20
 8108fca:	46bd      	mov	sp, r7
 8108fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fd0:	4770      	bx	lr

08108fd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108fd2:	b580      	push	{r7, lr}
 8108fd4:	b084      	sub	sp, #16
 8108fd6:	af00      	add	r7, sp, #0
 8108fd8:	6078      	str	r0, [r7, #4]
 8108fda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108fdc:	687b      	ldr	r3, [r7, #4]
 8108fde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108fe2:	2b01      	cmp	r3, #1
 8108fe4:	d101      	bne.n	8108fea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108fe6:	2302      	movs	r3, #2
 8108fe8:	e02d      	b.n	8109046 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	2201      	movs	r2, #1
 8108fee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	2224      	movs	r2, #36	; 0x24
 8108ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	681b      	ldr	r3, [r3, #0]
 8108ffe:	681b      	ldr	r3, [r3, #0]
 8109000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109002:	687b      	ldr	r3, [r7, #4]
 8109004:	681b      	ldr	r3, [r3, #0]
 8109006:	681a      	ldr	r2, [r3, #0]
 8109008:	687b      	ldr	r3, [r7, #4]
 810900a:	681b      	ldr	r3, [r3, #0]
 810900c:	f022 0201 	bic.w	r2, r2, #1
 8109010:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	681b      	ldr	r3, [r3, #0]
 8109016:	689b      	ldr	r3, [r3, #8]
 8109018:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810901c:	687b      	ldr	r3, [r7, #4]
 810901e:	681b      	ldr	r3, [r3, #0]
 8109020:	683a      	ldr	r2, [r7, #0]
 8109022:	430a      	orrs	r2, r1
 8109024:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109026:	6878      	ldr	r0, [r7, #4]
 8109028:	f000 f850 	bl	81090cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810902c:	687b      	ldr	r3, [r7, #4]
 810902e:	681b      	ldr	r3, [r3, #0]
 8109030:	68fa      	ldr	r2, [r7, #12]
 8109032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109034:	687b      	ldr	r3, [r7, #4]
 8109036:	2220      	movs	r2, #32
 8109038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810903c:	687b      	ldr	r3, [r7, #4]
 810903e:	2200      	movs	r2, #0
 8109040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8109044:	2300      	movs	r3, #0
}
 8109046:	4618      	mov	r0, r3
 8109048:	3710      	adds	r7, #16
 810904a:	46bd      	mov	sp, r7
 810904c:	bd80      	pop	{r7, pc}

0810904e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810904e:	b580      	push	{r7, lr}
 8109050:	b084      	sub	sp, #16
 8109052:	af00      	add	r7, sp, #0
 8109054:	6078      	str	r0, [r7, #4]
 8109056:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109058:	687b      	ldr	r3, [r7, #4]
 810905a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810905e:	2b01      	cmp	r3, #1
 8109060:	d101      	bne.n	8109066 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109062:	2302      	movs	r3, #2
 8109064:	e02d      	b.n	81090c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109066:	687b      	ldr	r3, [r7, #4]
 8109068:	2201      	movs	r2, #1
 810906a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810906e:	687b      	ldr	r3, [r7, #4]
 8109070:	2224      	movs	r2, #36	; 0x24
 8109072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109076:	687b      	ldr	r3, [r7, #4]
 8109078:	681b      	ldr	r3, [r3, #0]
 810907a:	681b      	ldr	r3, [r3, #0]
 810907c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810907e:	687b      	ldr	r3, [r7, #4]
 8109080:	681b      	ldr	r3, [r3, #0]
 8109082:	681a      	ldr	r2, [r3, #0]
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	681b      	ldr	r3, [r3, #0]
 8109088:	f022 0201 	bic.w	r2, r2, #1
 810908c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810908e:	687b      	ldr	r3, [r7, #4]
 8109090:	681b      	ldr	r3, [r3, #0]
 8109092:	689b      	ldr	r3, [r3, #8]
 8109094:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8109098:	687b      	ldr	r3, [r7, #4]
 810909a:	681b      	ldr	r3, [r3, #0]
 810909c:	683a      	ldr	r2, [r7, #0]
 810909e:	430a      	orrs	r2, r1
 81090a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81090a2:	6878      	ldr	r0, [r7, #4]
 81090a4:	f000 f812 	bl	81090cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81090a8:	687b      	ldr	r3, [r7, #4]
 81090aa:	681b      	ldr	r3, [r3, #0]
 81090ac:	68fa      	ldr	r2, [r7, #12]
 81090ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81090b0:	687b      	ldr	r3, [r7, #4]
 81090b2:	2220      	movs	r2, #32
 81090b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81090b8:	687b      	ldr	r3, [r7, #4]
 81090ba:	2200      	movs	r2, #0
 81090bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81090c0:	2300      	movs	r3, #0
}
 81090c2:	4618      	mov	r0, r3
 81090c4:	3710      	adds	r7, #16
 81090c6:	46bd      	mov	sp, r7
 81090c8:	bd80      	pop	{r7, pc}
	...

081090cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81090cc:	b480      	push	{r7}
 81090ce:	b089      	sub	sp, #36	; 0x24
 81090d0:	af00      	add	r7, sp, #0
 81090d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 81090d4:	4a2f      	ldr	r2, [pc, #188]	; (8109194 <UARTEx_SetNbDataToProcess+0xc8>)
 81090d6:	f107 0314 	add.w	r3, r7, #20
 81090da:	e892 0003 	ldmia.w	r2, {r0, r1}
 81090de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 81090e2:	4a2d      	ldr	r2, [pc, #180]	; (8109198 <UARTEx_SetNbDataToProcess+0xcc>)
 81090e4:	f107 030c 	add.w	r3, r7, #12
 81090e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 81090ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81090f0:	687b      	ldr	r3, [r7, #4]
 81090f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81090f4:	2b00      	cmp	r3, #0
 81090f6:	d108      	bne.n	810910a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 81090f8:	687b      	ldr	r3, [r7, #4]
 81090fa:	2201      	movs	r2, #1
 81090fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8109100:	687b      	ldr	r3, [r7, #4]
 8109102:	2201      	movs	r2, #1
 8109104:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109108:	e03d      	b.n	8109186 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810910a:	2310      	movs	r3, #16
 810910c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810910e:	2310      	movs	r3, #16
 8109110:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109112:	687b      	ldr	r3, [r7, #4]
 8109114:	681b      	ldr	r3, [r3, #0]
 8109116:	689b      	ldr	r3, [r3, #8]
 8109118:	0e5b      	lsrs	r3, r3, #25
 810911a:	b2db      	uxtb	r3, r3
 810911c:	f003 0307 	and.w	r3, r3, #7
 8109120:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109122:	687b      	ldr	r3, [r7, #4]
 8109124:	681b      	ldr	r3, [r3, #0]
 8109126:	689b      	ldr	r3, [r3, #8]
 8109128:	0f5b      	lsrs	r3, r3, #29
 810912a:	b2db      	uxtb	r3, r3
 810912c:	f003 0307 	and.w	r3, r3, #7
 8109130:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8109132:	7fbb      	ldrb	r3, [r7, #30]
 8109134:	7f3a      	ldrb	r2, [r7, #28]
 8109136:	f107 0120 	add.w	r1, r7, #32
 810913a:	440a      	add	r2, r1
 810913c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8109140:	fb02 f303 	mul.w	r3, r2, r3
 8109144:	7f3a      	ldrb	r2, [r7, #28]
 8109146:	f107 0120 	add.w	r1, r7, #32
 810914a:	440a      	add	r2, r1
 810914c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8109150:	fb93 f3f2 	sdiv	r3, r3, r2
 8109154:	b29a      	uxth	r2, r3
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 810915c:	7ffb      	ldrb	r3, [r7, #31]
 810915e:	7f7a      	ldrb	r2, [r7, #29]
 8109160:	f107 0120 	add.w	r1, r7, #32
 8109164:	440a      	add	r2, r1
 8109166:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810916a:	fb02 f303 	mul.w	r3, r2, r3
 810916e:	7f7a      	ldrb	r2, [r7, #29]
 8109170:	f107 0120 	add.w	r1, r7, #32
 8109174:	440a      	add	r2, r1
 8109176:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810917a:	fb93 f3f2 	sdiv	r3, r3, r2
 810917e:	b29a      	uxth	r2, r3
 8109180:	687b      	ldr	r3, [r7, #4]
 8109182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109186:	bf00      	nop
 8109188:	3724      	adds	r7, #36	; 0x24
 810918a:	46bd      	mov	sp, r7
 810918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109190:	4770      	bx	lr
 8109192:	bf00      	nop
 8109194:	08114d88 	.word	0x08114d88
 8109198:	08114d90 	.word	0x08114d90

0810919c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 810919c:	b580      	push	{r7, lr}
 810919e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 81091a0:	4904      	ldr	r1, [pc, #16]	; (81091b4 <MX_FATFS_Init+0x18>)
 81091a2:	4805      	ldr	r0, [pc, #20]	; (81091b8 <MX_FATFS_Init+0x1c>)
 81091a4:	f000 f8b0 	bl	8109308 <FATFS_LinkDriver>
 81091a8:	4603      	mov	r3, r0
 81091aa:	461a      	mov	r2, r3
 81091ac:	4b03      	ldr	r3, [pc, #12]	; (81091bc <MX_FATFS_Init+0x20>)
 81091ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 81091b0:	bf00      	nop
 81091b2:	bd80      	pop	{r7, pc}
 81091b4:	1000e310 	.word	0x1000e310
 81091b8:	10000010 	.word	0x10000010
 81091bc:	1000e314 	.word	0x1000e314

081091c0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 81091c0:	b480      	push	{r7}
 81091c2:	b083      	sub	sp, #12
 81091c4:	af00      	add	r7, sp, #0
 81091c6:	4603      	mov	r3, r0
 81091c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 81091ca:	4b06      	ldr	r3, [pc, #24]	; (81091e4 <USER_initialize+0x24>)
 81091cc:	2201      	movs	r2, #1
 81091ce:	701a      	strb	r2, [r3, #0]
    return Stat;
 81091d0:	4b04      	ldr	r3, [pc, #16]	; (81091e4 <USER_initialize+0x24>)
 81091d2:	781b      	ldrb	r3, [r3, #0]
 81091d4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 81091d6:	4618      	mov	r0, r3
 81091d8:	370c      	adds	r7, #12
 81091da:	46bd      	mov	sp, r7
 81091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091e0:	4770      	bx	lr
 81091e2:	bf00      	nop
 81091e4:	1000000d 	.word	0x1000000d

081091e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 81091e8:	b480      	push	{r7}
 81091ea:	b083      	sub	sp, #12
 81091ec:	af00      	add	r7, sp, #0
 81091ee:	4603      	mov	r3, r0
 81091f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 81091f2:	4b06      	ldr	r3, [pc, #24]	; (810920c <USER_status+0x24>)
 81091f4:	2201      	movs	r2, #1
 81091f6:	701a      	strb	r2, [r3, #0]
    return Stat;
 81091f8:	4b04      	ldr	r3, [pc, #16]	; (810920c <USER_status+0x24>)
 81091fa:	781b      	ldrb	r3, [r3, #0]
 81091fc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 81091fe:	4618      	mov	r0, r3
 8109200:	370c      	adds	r7, #12
 8109202:	46bd      	mov	sp, r7
 8109204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109208:	4770      	bx	lr
 810920a:	bf00      	nop
 810920c:	1000000d 	.word	0x1000000d

08109210 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8109210:	b480      	push	{r7}
 8109212:	b085      	sub	sp, #20
 8109214:	af00      	add	r7, sp, #0
 8109216:	60b9      	str	r1, [r7, #8]
 8109218:	607a      	str	r2, [r7, #4]
 810921a:	603b      	str	r3, [r7, #0]
 810921c:	4603      	mov	r3, r0
 810921e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8109220:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8109222:	4618      	mov	r0, r3
 8109224:	3714      	adds	r7, #20
 8109226:	46bd      	mov	sp, r7
 8109228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810922c:	4770      	bx	lr

0810922e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 810922e:	b480      	push	{r7}
 8109230:	b085      	sub	sp, #20
 8109232:	af00      	add	r7, sp, #0
 8109234:	60b9      	str	r1, [r7, #8]
 8109236:	607a      	str	r2, [r7, #4]
 8109238:	603b      	str	r3, [r7, #0]
 810923a:	4603      	mov	r3, r0
 810923c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 810923e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8109240:	4618      	mov	r0, r3
 8109242:	3714      	adds	r7, #20
 8109244:	46bd      	mov	sp, r7
 8109246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810924a:	4770      	bx	lr

0810924c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 810924c:	b480      	push	{r7}
 810924e:	b085      	sub	sp, #20
 8109250:	af00      	add	r7, sp, #0
 8109252:	4603      	mov	r3, r0
 8109254:	603a      	str	r2, [r7, #0]
 8109256:	71fb      	strb	r3, [r7, #7]
 8109258:	460b      	mov	r3, r1
 810925a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 810925c:	2301      	movs	r3, #1
 810925e:	73fb      	strb	r3, [r7, #15]
    return res;
 8109260:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8109262:	4618      	mov	r0, r3
 8109264:	3714      	adds	r7, #20
 8109266:	46bd      	mov	sp, r7
 8109268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810926c:	4770      	bx	lr
	...

08109270 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8109270:	b480      	push	{r7}
 8109272:	b087      	sub	sp, #28
 8109274:	af00      	add	r7, sp, #0
 8109276:	60f8      	str	r0, [r7, #12]
 8109278:	60b9      	str	r1, [r7, #8]
 810927a:	4613      	mov	r3, r2
 810927c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 810927e:	2301      	movs	r3, #1
 8109280:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8109282:	2300      	movs	r3, #0
 8109284:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8109286:	4b1f      	ldr	r3, [pc, #124]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 8109288:	7a5b      	ldrb	r3, [r3, #9]
 810928a:	b2db      	uxtb	r3, r3
 810928c:	2b00      	cmp	r3, #0
 810928e:	d131      	bne.n	81092f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8109290:	4b1c      	ldr	r3, [pc, #112]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 8109292:	7a5b      	ldrb	r3, [r3, #9]
 8109294:	b2db      	uxtb	r3, r3
 8109296:	461a      	mov	r2, r3
 8109298:	4b1a      	ldr	r3, [pc, #104]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 810929a:	2100      	movs	r1, #0
 810929c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 810929e:	4b19      	ldr	r3, [pc, #100]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 81092a0:	7a5b      	ldrb	r3, [r3, #9]
 81092a2:	b2db      	uxtb	r3, r3
 81092a4:	4a17      	ldr	r2, [pc, #92]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 81092a6:	009b      	lsls	r3, r3, #2
 81092a8:	4413      	add	r3, r2
 81092aa:	68fa      	ldr	r2, [r7, #12]
 81092ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 81092ae:	4b15      	ldr	r3, [pc, #84]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 81092b0:	7a5b      	ldrb	r3, [r3, #9]
 81092b2:	b2db      	uxtb	r3, r3
 81092b4:	461a      	mov	r2, r3
 81092b6:	4b13      	ldr	r3, [pc, #76]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 81092b8:	4413      	add	r3, r2
 81092ba:	79fa      	ldrb	r2, [r7, #7]
 81092bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 81092be:	4b11      	ldr	r3, [pc, #68]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 81092c0:	7a5b      	ldrb	r3, [r3, #9]
 81092c2:	b2db      	uxtb	r3, r3
 81092c4:	1c5a      	adds	r2, r3, #1
 81092c6:	b2d1      	uxtb	r1, r2
 81092c8:	4a0e      	ldr	r2, [pc, #56]	; (8109304 <FATFS_LinkDriverEx+0x94>)
 81092ca:	7251      	strb	r1, [r2, #9]
 81092cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 81092ce:	7dbb      	ldrb	r3, [r7, #22]
 81092d0:	3330      	adds	r3, #48	; 0x30
 81092d2:	b2da      	uxtb	r2, r3
 81092d4:	68bb      	ldr	r3, [r7, #8]
 81092d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 81092d8:	68bb      	ldr	r3, [r7, #8]
 81092da:	3301      	adds	r3, #1
 81092dc:	223a      	movs	r2, #58	; 0x3a
 81092de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 81092e0:	68bb      	ldr	r3, [r7, #8]
 81092e2:	3302      	adds	r3, #2
 81092e4:	222f      	movs	r2, #47	; 0x2f
 81092e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 81092e8:	68bb      	ldr	r3, [r7, #8]
 81092ea:	3303      	adds	r3, #3
 81092ec:	2200      	movs	r2, #0
 81092ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 81092f0:	2300      	movs	r3, #0
 81092f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 81092f4:	7dfb      	ldrb	r3, [r7, #23]
}
 81092f6:	4618      	mov	r0, r3
 81092f8:	371c      	adds	r7, #28
 81092fa:	46bd      	mov	sp, r7
 81092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109300:	4770      	bx	lr
 8109302:	bf00      	nop
 8109304:	10000484 	.word	0x10000484

08109308 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8109308:	b580      	push	{r7, lr}
 810930a:	b082      	sub	sp, #8
 810930c:	af00      	add	r7, sp, #0
 810930e:	6078      	str	r0, [r7, #4]
 8109310:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8109312:	2200      	movs	r2, #0
 8109314:	6839      	ldr	r1, [r7, #0]
 8109316:	6878      	ldr	r0, [r7, #4]
 8109318:	f7ff ffaa 	bl	8109270 <FATFS_LinkDriverEx>
 810931c:	4603      	mov	r3, r0
}
 810931e:	4618      	mov	r0, r3
 8109320:	3708      	adds	r7, #8
 8109322:	46bd      	mov	sp, r7
 8109324:	bd80      	pop	{r7, pc}

08109326 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8109326:	b480      	push	{r7}
 8109328:	b085      	sub	sp, #20
 810932a:	af00      	add	r7, sp, #0
 810932c:	4603      	mov	r3, r0
 810932e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8109330:	2300      	movs	r3, #0
 8109332:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8109334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8109338:	2b84      	cmp	r3, #132	; 0x84
 810933a:	d005      	beq.n	8109348 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 810933c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8109340:	68fb      	ldr	r3, [r7, #12]
 8109342:	4413      	add	r3, r2
 8109344:	3303      	adds	r3, #3
 8109346:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8109348:	68fb      	ldr	r3, [r7, #12]
}
 810934a:	4618      	mov	r0, r3
 810934c:	3714      	adds	r7, #20
 810934e:	46bd      	mov	sp, r7
 8109350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109354:	4770      	bx	lr

08109356 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8109356:	b580      	push	{r7, lr}
 8109358:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 810935a:	f001 fbe5 	bl	810ab28 <vTaskStartScheduler>
  
  return osOK;
 810935e:	2300      	movs	r3, #0
}
 8109360:	4618      	mov	r0, r3
 8109362:	bd80      	pop	{r7, pc}

08109364 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8109364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8109366:	b089      	sub	sp, #36	; 0x24
 8109368:	af04      	add	r7, sp, #16
 810936a:	6078      	str	r0, [r7, #4]
 810936c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 810936e:	687b      	ldr	r3, [r7, #4]
 8109370:	695b      	ldr	r3, [r3, #20]
 8109372:	2b00      	cmp	r3, #0
 8109374:	d020      	beq.n	81093b8 <osThreadCreate+0x54>
 8109376:	687b      	ldr	r3, [r7, #4]
 8109378:	699b      	ldr	r3, [r3, #24]
 810937a:	2b00      	cmp	r3, #0
 810937c:	d01c      	beq.n	81093b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810937e:	687b      	ldr	r3, [r7, #4]
 8109380:	685c      	ldr	r4, [r3, #4]
 8109382:	687b      	ldr	r3, [r7, #4]
 8109384:	681d      	ldr	r5, [r3, #0]
 8109386:	687b      	ldr	r3, [r7, #4]
 8109388:	691e      	ldr	r6, [r3, #16]
 810938a:	687b      	ldr	r3, [r7, #4]
 810938c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8109390:	4618      	mov	r0, r3
 8109392:	f7ff ffc8 	bl	8109326 <makeFreeRtosPriority>
 8109396:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8109398:	687b      	ldr	r3, [r7, #4]
 810939a:	695b      	ldr	r3, [r3, #20]
 810939c:	687a      	ldr	r2, [r7, #4]
 810939e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81093a0:	9202      	str	r2, [sp, #8]
 81093a2:	9301      	str	r3, [sp, #4]
 81093a4:	9100      	str	r1, [sp, #0]
 81093a6:	683b      	ldr	r3, [r7, #0]
 81093a8:	4632      	mov	r2, r6
 81093aa:	4629      	mov	r1, r5
 81093ac:	4620      	mov	r0, r4
 81093ae:	f001 f969 	bl	810a684 <xTaskCreateStatic>
 81093b2:	4603      	mov	r3, r0
 81093b4:	60fb      	str	r3, [r7, #12]
 81093b6:	e01c      	b.n	81093f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	685c      	ldr	r4, [r3, #4]
 81093bc:	687b      	ldr	r3, [r7, #4]
 81093be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81093c4:	b29e      	uxth	r6, r3
 81093c6:	687b      	ldr	r3, [r7, #4]
 81093c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 81093cc:	4618      	mov	r0, r3
 81093ce:	f7ff ffaa 	bl	8109326 <makeFreeRtosPriority>
 81093d2:	4602      	mov	r2, r0
 81093d4:	f107 030c 	add.w	r3, r7, #12
 81093d8:	9301      	str	r3, [sp, #4]
 81093da:	9200      	str	r2, [sp, #0]
 81093dc:	683b      	ldr	r3, [r7, #0]
 81093de:	4632      	mov	r2, r6
 81093e0:	4629      	mov	r1, r5
 81093e2:	4620      	mov	r0, r4
 81093e4:	f001 f9a8 	bl	810a738 <xTaskCreate>
 81093e8:	4603      	mov	r3, r0
 81093ea:	2b01      	cmp	r3, #1
 81093ec:	d001      	beq.n	81093f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 81093ee:	2300      	movs	r3, #0
 81093f0:	e000      	b.n	81093f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 81093f2:	68fb      	ldr	r3, [r7, #12]
}
 81093f4:	4618      	mov	r0, r3
 81093f6:	3714      	adds	r7, #20
 81093f8:	46bd      	mov	sp, r7
 81093fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

081093fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 81093fc:	b580      	push	{r7, lr}
 81093fe:	b084      	sub	sp, #16
 8109400:	af00      	add	r7, sp, #0
 8109402:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8109404:	687b      	ldr	r3, [r7, #4]
 8109406:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8109408:	68fb      	ldr	r3, [r7, #12]
 810940a:	2b00      	cmp	r3, #0
 810940c:	d001      	beq.n	8109412 <osDelay+0x16>
 810940e:	68fb      	ldr	r3, [r7, #12]
 8109410:	e000      	b.n	8109414 <osDelay+0x18>
 8109412:	2301      	movs	r3, #1
 8109414:	4618      	mov	r0, r3
 8109416:	f001 fb53 	bl	810aac0 <vTaskDelay>
  
  return osOK;
 810941a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 810941c:	4618      	mov	r0, r3
 810941e:	3710      	adds	r7, #16
 8109420:	46bd      	mov	sp, r7
 8109422:	bd80      	pop	{r7, pc}

08109424 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8109424:	b580      	push	{r7, lr}
 8109426:	b086      	sub	sp, #24
 8109428:	af02      	add	r7, sp, #8
 810942a:	6078      	str	r0, [r7, #4]
 810942c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 810942e:	687b      	ldr	r3, [r7, #4]
 8109430:	685b      	ldr	r3, [r3, #4]
 8109432:	2b00      	cmp	r3, #0
 8109434:	d010      	beq.n	8109458 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8109436:	683b      	ldr	r3, [r7, #0]
 8109438:	2b01      	cmp	r3, #1
 810943a:	d10b      	bne.n	8109454 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	685a      	ldr	r2, [r3, #4]
 8109440:	2303      	movs	r3, #3
 8109442:	9300      	str	r3, [sp, #0]
 8109444:	4613      	mov	r3, r2
 8109446:	2200      	movs	r2, #0
 8109448:	2100      	movs	r1, #0
 810944a:	2001      	movs	r0, #1
 810944c:	f000 fd12 	bl	8109e74 <xQueueGenericCreateStatic>
 8109450:	4603      	mov	r3, r0
 8109452:	e016      	b.n	8109482 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8109454:	2300      	movs	r3, #0
 8109456:	e014      	b.n	8109482 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8109458:	683b      	ldr	r3, [r7, #0]
 810945a:	2b01      	cmp	r3, #1
 810945c:	d110      	bne.n	8109480 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 810945e:	2203      	movs	r2, #3
 8109460:	2100      	movs	r1, #0
 8109462:	2001      	movs	r0, #1
 8109464:	f000 fd79 	bl	8109f5a <xQueueGenericCreate>
 8109468:	60f8      	str	r0, [r7, #12]
 810946a:	68fb      	ldr	r3, [r7, #12]
 810946c:	2b00      	cmp	r3, #0
 810946e:	d005      	beq.n	810947c <osSemaphoreCreate+0x58>
 8109470:	2300      	movs	r3, #0
 8109472:	2200      	movs	r2, #0
 8109474:	2100      	movs	r1, #0
 8109476:	68f8      	ldr	r0, [r7, #12]
 8109478:	f000 fe00 	bl	810a07c <xQueueGenericSend>
      return sema;
 810947c:	68fb      	ldr	r3, [r7, #12]
 810947e:	e000      	b.n	8109482 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8109480:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8109482:	4618      	mov	r0, r3
 8109484:	3710      	adds	r7, #16
 8109486:	46bd      	mov	sp, r7
 8109488:	bd80      	pop	{r7, pc}
	...

0810948c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810948c:	b580      	push	{r7, lr}
 810948e:	b08a      	sub	sp, #40	; 0x28
 8109490:	af00      	add	r7, sp, #0
 8109492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8109494:	2300      	movs	r3, #0
 8109496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8109498:	f001 fba4 	bl	810abe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810949c:	4b57      	ldr	r3, [pc, #348]	; (81095fc <pvPortMalloc+0x170>)
 810949e:	681b      	ldr	r3, [r3, #0]
 81094a0:	2b00      	cmp	r3, #0
 81094a2:	d101      	bne.n	81094a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81094a4:	f000 f90c 	bl	81096c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81094a8:	4b55      	ldr	r3, [pc, #340]	; (8109600 <pvPortMalloc+0x174>)
 81094aa:	681a      	ldr	r2, [r3, #0]
 81094ac:	687b      	ldr	r3, [r7, #4]
 81094ae:	4013      	ands	r3, r2
 81094b0:	2b00      	cmp	r3, #0
 81094b2:	f040 808c 	bne.w	81095ce <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81094b6:	687b      	ldr	r3, [r7, #4]
 81094b8:	2b00      	cmp	r3, #0
 81094ba:	d01c      	beq.n	81094f6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 81094bc:	2208      	movs	r2, #8
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	4413      	add	r3, r2
 81094c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81094c4:	687b      	ldr	r3, [r7, #4]
 81094c6:	f003 0307 	and.w	r3, r3, #7
 81094ca:	2b00      	cmp	r3, #0
 81094cc:	d013      	beq.n	81094f6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81094ce:	687b      	ldr	r3, [r7, #4]
 81094d0:	f023 0307 	bic.w	r3, r3, #7
 81094d4:	3308      	adds	r3, #8
 81094d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81094d8:	687b      	ldr	r3, [r7, #4]
 81094da:	f003 0307 	and.w	r3, r3, #7
 81094de:	2b00      	cmp	r3, #0
 81094e0:	d009      	beq.n	81094f6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094e6:	f383 8811 	msr	BASEPRI, r3
 81094ea:	f3bf 8f6f 	isb	sy
 81094ee:	f3bf 8f4f 	dsb	sy
 81094f2:	617b      	str	r3, [r7, #20]
 81094f4:	e7fe      	b.n	81094f4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81094f6:	687b      	ldr	r3, [r7, #4]
 81094f8:	2b00      	cmp	r3, #0
 81094fa:	d068      	beq.n	81095ce <pvPortMalloc+0x142>
 81094fc:	4b41      	ldr	r3, [pc, #260]	; (8109604 <pvPortMalloc+0x178>)
 81094fe:	681b      	ldr	r3, [r3, #0]
 8109500:	687a      	ldr	r2, [r7, #4]
 8109502:	429a      	cmp	r2, r3
 8109504:	d863      	bhi.n	81095ce <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8109506:	4b40      	ldr	r3, [pc, #256]	; (8109608 <pvPortMalloc+0x17c>)
 8109508:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810950a:	4b3f      	ldr	r3, [pc, #252]	; (8109608 <pvPortMalloc+0x17c>)
 810950c:	681b      	ldr	r3, [r3, #0]
 810950e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109510:	e004      	b.n	810951c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8109512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109514:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8109516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109518:	681b      	ldr	r3, [r3, #0]
 810951a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810951e:	685b      	ldr	r3, [r3, #4]
 8109520:	687a      	ldr	r2, [r7, #4]
 8109522:	429a      	cmp	r2, r3
 8109524:	d903      	bls.n	810952e <pvPortMalloc+0xa2>
 8109526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109528:	681b      	ldr	r3, [r3, #0]
 810952a:	2b00      	cmp	r3, #0
 810952c:	d1f1      	bne.n	8109512 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810952e:	4b33      	ldr	r3, [pc, #204]	; (81095fc <pvPortMalloc+0x170>)
 8109530:	681b      	ldr	r3, [r3, #0]
 8109532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109534:	429a      	cmp	r2, r3
 8109536:	d04a      	beq.n	81095ce <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8109538:	6a3b      	ldr	r3, [r7, #32]
 810953a:	681b      	ldr	r3, [r3, #0]
 810953c:	2208      	movs	r2, #8
 810953e:	4413      	add	r3, r2
 8109540:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8109542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109544:	681a      	ldr	r2, [r3, #0]
 8109546:	6a3b      	ldr	r3, [r7, #32]
 8109548:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810954c:	685a      	ldr	r2, [r3, #4]
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	1ad2      	subs	r2, r2, r3
 8109552:	2308      	movs	r3, #8
 8109554:	005b      	lsls	r3, r3, #1
 8109556:	429a      	cmp	r2, r3
 8109558:	d91e      	bls.n	8109598 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810955a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810955c:	687b      	ldr	r3, [r7, #4]
 810955e:	4413      	add	r3, r2
 8109560:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8109562:	69bb      	ldr	r3, [r7, #24]
 8109564:	f003 0307 	and.w	r3, r3, #7
 8109568:	2b00      	cmp	r3, #0
 810956a:	d009      	beq.n	8109580 <pvPortMalloc+0xf4>
 810956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109570:	f383 8811 	msr	BASEPRI, r3
 8109574:	f3bf 8f6f 	isb	sy
 8109578:	f3bf 8f4f 	dsb	sy
 810957c:	613b      	str	r3, [r7, #16]
 810957e:	e7fe      	b.n	810957e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8109580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109582:	685a      	ldr	r2, [r3, #4]
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	1ad2      	subs	r2, r2, r3
 8109588:	69bb      	ldr	r3, [r7, #24]
 810958a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810958e:	687a      	ldr	r2, [r7, #4]
 8109590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8109592:	69b8      	ldr	r0, [r7, #24]
 8109594:	f000 f8f6 	bl	8109784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8109598:	4b1a      	ldr	r3, [pc, #104]	; (8109604 <pvPortMalloc+0x178>)
 810959a:	681a      	ldr	r2, [r3, #0]
 810959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810959e:	685b      	ldr	r3, [r3, #4]
 81095a0:	1ad3      	subs	r3, r2, r3
 81095a2:	4a18      	ldr	r2, [pc, #96]	; (8109604 <pvPortMalloc+0x178>)
 81095a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81095a6:	4b17      	ldr	r3, [pc, #92]	; (8109604 <pvPortMalloc+0x178>)
 81095a8:	681a      	ldr	r2, [r3, #0]
 81095aa:	4b18      	ldr	r3, [pc, #96]	; (810960c <pvPortMalloc+0x180>)
 81095ac:	681b      	ldr	r3, [r3, #0]
 81095ae:	429a      	cmp	r2, r3
 81095b0:	d203      	bcs.n	81095ba <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81095b2:	4b14      	ldr	r3, [pc, #80]	; (8109604 <pvPortMalloc+0x178>)
 81095b4:	681b      	ldr	r3, [r3, #0]
 81095b6:	4a15      	ldr	r2, [pc, #84]	; (810960c <pvPortMalloc+0x180>)
 81095b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095bc:	685a      	ldr	r2, [r3, #4]
 81095be:	4b10      	ldr	r3, [pc, #64]	; (8109600 <pvPortMalloc+0x174>)
 81095c0:	681b      	ldr	r3, [r3, #0]
 81095c2:	431a      	orrs	r2, r3
 81095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095ca:	2200      	movs	r2, #0
 81095cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81095ce:	f001 fb17 	bl	810ac00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81095d2:	69fb      	ldr	r3, [r7, #28]
 81095d4:	f003 0307 	and.w	r3, r3, #7
 81095d8:	2b00      	cmp	r3, #0
 81095da:	d009      	beq.n	81095f0 <pvPortMalloc+0x164>
 81095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095e0:	f383 8811 	msr	BASEPRI, r3
 81095e4:	f3bf 8f6f 	isb	sy
 81095e8:	f3bf 8f4f 	dsb	sy
 81095ec:	60fb      	str	r3, [r7, #12]
 81095ee:	e7fe      	b.n	81095ee <pvPortMalloc+0x162>
	return pvReturn;
 81095f0:	69fb      	ldr	r3, [r7, #28]
}
 81095f2:	4618      	mov	r0, r3
 81095f4:	3728      	adds	r7, #40	; 0x28
 81095f6:	46bd      	mov	sp, r7
 81095f8:	bd80      	pop	{r7, pc}
 81095fa:	bf00      	nop
 81095fc:	10008498 	.word	0x10008498
 8109600:	100084a4 	.word	0x100084a4
 8109604:	1000849c 	.word	0x1000849c
 8109608:	10008490 	.word	0x10008490
 810960c:	100084a0 	.word	0x100084a0

08109610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8109610:	b580      	push	{r7, lr}
 8109612:	b086      	sub	sp, #24
 8109614:	af00      	add	r7, sp, #0
 8109616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8109618:	687b      	ldr	r3, [r7, #4]
 810961a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810961c:	687b      	ldr	r3, [r7, #4]
 810961e:	2b00      	cmp	r3, #0
 8109620:	d046      	beq.n	81096b0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8109622:	2308      	movs	r3, #8
 8109624:	425b      	negs	r3, r3
 8109626:	697a      	ldr	r2, [r7, #20]
 8109628:	4413      	add	r3, r2
 810962a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810962c:	697b      	ldr	r3, [r7, #20]
 810962e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8109630:	693b      	ldr	r3, [r7, #16]
 8109632:	685a      	ldr	r2, [r3, #4]
 8109634:	4b20      	ldr	r3, [pc, #128]	; (81096b8 <vPortFree+0xa8>)
 8109636:	681b      	ldr	r3, [r3, #0]
 8109638:	4013      	ands	r3, r2
 810963a:	2b00      	cmp	r3, #0
 810963c:	d109      	bne.n	8109652 <vPortFree+0x42>
 810963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109642:	f383 8811 	msr	BASEPRI, r3
 8109646:	f3bf 8f6f 	isb	sy
 810964a:	f3bf 8f4f 	dsb	sy
 810964e:	60fb      	str	r3, [r7, #12]
 8109650:	e7fe      	b.n	8109650 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8109652:	693b      	ldr	r3, [r7, #16]
 8109654:	681b      	ldr	r3, [r3, #0]
 8109656:	2b00      	cmp	r3, #0
 8109658:	d009      	beq.n	810966e <vPortFree+0x5e>
 810965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810965e:	f383 8811 	msr	BASEPRI, r3
 8109662:	f3bf 8f6f 	isb	sy
 8109666:	f3bf 8f4f 	dsb	sy
 810966a:	60bb      	str	r3, [r7, #8]
 810966c:	e7fe      	b.n	810966c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810966e:	693b      	ldr	r3, [r7, #16]
 8109670:	685a      	ldr	r2, [r3, #4]
 8109672:	4b11      	ldr	r3, [pc, #68]	; (81096b8 <vPortFree+0xa8>)
 8109674:	681b      	ldr	r3, [r3, #0]
 8109676:	4013      	ands	r3, r2
 8109678:	2b00      	cmp	r3, #0
 810967a:	d019      	beq.n	81096b0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810967c:	693b      	ldr	r3, [r7, #16]
 810967e:	681b      	ldr	r3, [r3, #0]
 8109680:	2b00      	cmp	r3, #0
 8109682:	d115      	bne.n	81096b0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8109684:	693b      	ldr	r3, [r7, #16]
 8109686:	685a      	ldr	r2, [r3, #4]
 8109688:	4b0b      	ldr	r3, [pc, #44]	; (81096b8 <vPortFree+0xa8>)
 810968a:	681b      	ldr	r3, [r3, #0]
 810968c:	43db      	mvns	r3, r3
 810968e:	401a      	ands	r2, r3
 8109690:	693b      	ldr	r3, [r7, #16]
 8109692:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8109694:	f001 faa6 	bl	810abe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8109698:	693b      	ldr	r3, [r7, #16]
 810969a:	685a      	ldr	r2, [r3, #4]
 810969c:	4b07      	ldr	r3, [pc, #28]	; (81096bc <vPortFree+0xac>)
 810969e:	681b      	ldr	r3, [r3, #0]
 81096a0:	4413      	add	r3, r2
 81096a2:	4a06      	ldr	r2, [pc, #24]	; (81096bc <vPortFree+0xac>)
 81096a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81096a6:	6938      	ldr	r0, [r7, #16]
 81096a8:	f000 f86c 	bl	8109784 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 81096ac:	f001 faa8 	bl	810ac00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81096b0:	bf00      	nop
 81096b2:	3718      	adds	r7, #24
 81096b4:	46bd      	mov	sp, r7
 81096b6:	bd80      	pop	{r7, pc}
 81096b8:	100084a4 	.word	0x100084a4
 81096bc:	1000849c 	.word	0x1000849c

081096c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81096c0:	b480      	push	{r7}
 81096c2:	b085      	sub	sp, #20
 81096c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81096c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81096ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81096cc:	4b27      	ldr	r3, [pc, #156]	; (810976c <prvHeapInit+0xac>)
 81096ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81096d0:	68fb      	ldr	r3, [r7, #12]
 81096d2:	f003 0307 	and.w	r3, r3, #7
 81096d6:	2b00      	cmp	r3, #0
 81096d8:	d00c      	beq.n	81096f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81096da:	68fb      	ldr	r3, [r7, #12]
 81096dc:	3307      	adds	r3, #7
 81096de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81096e0:	68fb      	ldr	r3, [r7, #12]
 81096e2:	f023 0307 	bic.w	r3, r3, #7
 81096e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81096e8:	68ba      	ldr	r2, [r7, #8]
 81096ea:	68fb      	ldr	r3, [r7, #12]
 81096ec:	1ad3      	subs	r3, r2, r3
 81096ee:	4a1f      	ldr	r2, [pc, #124]	; (810976c <prvHeapInit+0xac>)
 81096f0:	4413      	add	r3, r2
 81096f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81096f4:	68fb      	ldr	r3, [r7, #12]
 81096f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81096f8:	4a1d      	ldr	r2, [pc, #116]	; (8109770 <prvHeapInit+0xb0>)
 81096fa:	687b      	ldr	r3, [r7, #4]
 81096fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81096fe:	4b1c      	ldr	r3, [pc, #112]	; (8109770 <prvHeapInit+0xb0>)
 8109700:	2200      	movs	r2, #0
 8109702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8109704:	687b      	ldr	r3, [r7, #4]
 8109706:	68ba      	ldr	r2, [r7, #8]
 8109708:	4413      	add	r3, r2
 810970a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810970c:	2208      	movs	r2, #8
 810970e:	68fb      	ldr	r3, [r7, #12]
 8109710:	1a9b      	subs	r3, r3, r2
 8109712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109714:	68fb      	ldr	r3, [r7, #12]
 8109716:	f023 0307 	bic.w	r3, r3, #7
 810971a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810971c:	68fb      	ldr	r3, [r7, #12]
 810971e:	4a15      	ldr	r2, [pc, #84]	; (8109774 <prvHeapInit+0xb4>)
 8109720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8109722:	4b14      	ldr	r3, [pc, #80]	; (8109774 <prvHeapInit+0xb4>)
 8109724:	681b      	ldr	r3, [r3, #0]
 8109726:	2200      	movs	r2, #0
 8109728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810972a:	4b12      	ldr	r3, [pc, #72]	; (8109774 <prvHeapInit+0xb4>)
 810972c:	681b      	ldr	r3, [r3, #0]
 810972e:	2200      	movs	r2, #0
 8109730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8109732:	687b      	ldr	r3, [r7, #4]
 8109734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8109736:	683b      	ldr	r3, [r7, #0]
 8109738:	68fa      	ldr	r2, [r7, #12]
 810973a:	1ad2      	subs	r2, r2, r3
 810973c:	683b      	ldr	r3, [r7, #0]
 810973e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8109740:	4b0c      	ldr	r3, [pc, #48]	; (8109774 <prvHeapInit+0xb4>)
 8109742:	681a      	ldr	r2, [r3, #0]
 8109744:	683b      	ldr	r3, [r7, #0]
 8109746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109748:	683b      	ldr	r3, [r7, #0]
 810974a:	685b      	ldr	r3, [r3, #4]
 810974c:	4a0a      	ldr	r2, [pc, #40]	; (8109778 <prvHeapInit+0xb8>)
 810974e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109750:	683b      	ldr	r3, [r7, #0]
 8109752:	685b      	ldr	r3, [r3, #4]
 8109754:	4a09      	ldr	r2, [pc, #36]	; (810977c <prvHeapInit+0xbc>)
 8109756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8109758:	4b09      	ldr	r3, [pc, #36]	; (8109780 <prvHeapInit+0xc0>)
 810975a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810975e:	601a      	str	r2, [r3, #0]
}
 8109760:	bf00      	nop
 8109762:	3714      	adds	r7, #20
 8109764:	46bd      	mov	sp, r7
 8109766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810976a:	4770      	bx	lr
 810976c:	10000490 	.word	0x10000490
 8109770:	10008490 	.word	0x10008490
 8109774:	10008498 	.word	0x10008498
 8109778:	100084a0 	.word	0x100084a0
 810977c:	1000849c 	.word	0x1000849c
 8109780:	100084a4 	.word	0x100084a4

08109784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8109784:	b480      	push	{r7}
 8109786:	b085      	sub	sp, #20
 8109788:	af00      	add	r7, sp, #0
 810978a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810978c:	4b28      	ldr	r3, [pc, #160]	; (8109830 <prvInsertBlockIntoFreeList+0xac>)
 810978e:	60fb      	str	r3, [r7, #12]
 8109790:	e002      	b.n	8109798 <prvInsertBlockIntoFreeList+0x14>
 8109792:	68fb      	ldr	r3, [r7, #12]
 8109794:	681b      	ldr	r3, [r3, #0]
 8109796:	60fb      	str	r3, [r7, #12]
 8109798:	68fb      	ldr	r3, [r7, #12]
 810979a:	681b      	ldr	r3, [r3, #0]
 810979c:	687a      	ldr	r2, [r7, #4]
 810979e:	429a      	cmp	r2, r3
 81097a0:	d8f7      	bhi.n	8109792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81097a2:	68fb      	ldr	r3, [r7, #12]
 81097a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81097a6:	68fb      	ldr	r3, [r7, #12]
 81097a8:	685b      	ldr	r3, [r3, #4]
 81097aa:	68ba      	ldr	r2, [r7, #8]
 81097ac:	4413      	add	r3, r2
 81097ae:	687a      	ldr	r2, [r7, #4]
 81097b0:	429a      	cmp	r2, r3
 81097b2:	d108      	bne.n	81097c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81097b4:	68fb      	ldr	r3, [r7, #12]
 81097b6:	685a      	ldr	r2, [r3, #4]
 81097b8:	687b      	ldr	r3, [r7, #4]
 81097ba:	685b      	ldr	r3, [r3, #4]
 81097bc:	441a      	add	r2, r3
 81097be:	68fb      	ldr	r3, [r7, #12]
 81097c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81097c2:	68fb      	ldr	r3, [r7, #12]
 81097c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81097c6:	687b      	ldr	r3, [r7, #4]
 81097c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81097ca:	687b      	ldr	r3, [r7, #4]
 81097cc:	685b      	ldr	r3, [r3, #4]
 81097ce:	68ba      	ldr	r2, [r7, #8]
 81097d0:	441a      	add	r2, r3
 81097d2:	68fb      	ldr	r3, [r7, #12]
 81097d4:	681b      	ldr	r3, [r3, #0]
 81097d6:	429a      	cmp	r2, r3
 81097d8:	d118      	bne.n	810980c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81097da:	68fb      	ldr	r3, [r7, #12]
 81097dc:	681a      	ldr	r2, [r3, #0]
 81097de:	4b15      	ldr	r3, [pc, #84]	; (8109834 <prvInsertBlockIntoFreeList+0xb0>)
 81097e0:	681b      	ldr	r3, [r3, #0]
 81097e2:	429a      	cmp	r2, r3
 81097e4:	d00d      	beq.n	8109802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81097e6:	687b      	ldr	r3, [r7, #4]
 81097e8:	685a      	ldr	r2, [r3, #4]
 81097ea:	68fb      	ldr	r3, [r7, #12]
 81097ec:	681b      	ldr	r3, [r3, #0]
 81097ee:	685b      	ldr	r3, [r3, #4]
 81097f0:	441a      	add	r2, r3
 81097f2:	687b      	ldr	r3, [r7, #4]
 81097f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81097f6:	68fb      	ldr	r3, [r7, #12]
 81097f8:	681b      	ldr	r3, [r3, #0]
 81097fa:	681a      	ldr	r2, [r3, #0]
 81097fc:	687b      	ldr	r3, [r7, #4]
 81097fe:	601a      	str	r2, [r3, #0]
 8109800:	e008      	b.n	8109814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8109802:	4b0c      	ldr	r3, [pc, #48]	; (8109834 <prvInsertBlockIntoFreeList+0xb0>)
 8109804:	681a      	ldr	r2, [r3, #0]
 8109806:	687b      	ldr	r3, [r7, #4]
 8109808:	601a      	str	r2, [r3, #0]
 810980a:	e003      	b.n	8109814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810980c:	68fb      	ldr	r3, [r7, #12]
 810980e:	681a      	ldr	r2, [r3, #0]
 8109810:	687b      	ldr	r3, [r7, #4]
 8109812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8109814:	68fa      	ldr	r2, [r7, #12]
 8109816:	687b      	ldr	r3, [r7, #4]
 8109818:	429a      	cmp	r2, r3
 810981a:	d002      	beq.n	8109822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810981c:	68fb      	ldr	r3, [r7, #12]
 810981e:	687a      	ldr	r2, [r7, #4]
 8109820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109822:	bf00      	nop
 8109824:	3714      	adds	r7, #20
 8109826:	46bd      	mov	sp, r7
 8109828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810982c:	4770      	bx	lr
 810982e:	bf00      	nop
 8109830:	10008490 	.word	0x10008490
 8109834:	10008498 	.word	0x10008498

08109838 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8109838:	b480      	push	{r7}
 810983a:	b083      	sub	sp, #12
 810983c:	af00      	add	r7, sp, #0
 810983e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109840:	687b      	ldr	r3, [r7, #4]
 8109842:	f103 0208 	add.w	r2, r3, #8
 8109846:	687b      	ldr	r3, [r7, #4]
 8109848:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	f04f 32ff 	mov.w	r2, #4294967295
 8109850:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109852:	687b      	ldr	r3, [r7, #4]
 8109854:	f103 0208 	add.w	r2, r3, #8
 8109858:	687b      	ldr	r3, [r7, #4]
 810985a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810985c:	687b      	ldr	r3, [r7, #4]
 810985e:	f103 0208 	add.w	r2, r3, #8
 8109862:	687b      	ldr	r3, [r7, #4]
 8109864:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8109866:	687b      	ldr	r3, [r7, #4]
 8109868:	2200      	movs	r2, #0
 810986a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810986c:	bf00      	nop
 810986e:	370c      	adds	r7, #12
 8109870:	46bd      	mov	sp, r7
 8109872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109876:	4770      	bx	lr

08109878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8109878:	b480      	push	{r7}
 810987a:	b083      	sub	sp, #12
 810987c:	af00      	add	r7, sp, #0
 810987e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8109880:	687b      	ldr	r3, [r7, #4]
 8109882:	2200      	movs	r2, #0
 8109884:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8109886:	bf00      	nop
 8109888:	370c      	adds	r7, #12
 810988a:	46bd      	mov	sp, r7
 810988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109890:	4770      	bx	lr

08109892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8109892:	b480      	push	{r7}
 8109894:	b085      	sub	sp, #20
 8109896:	af00      	add	r7, sp, #0
 8109898:	6078      	str	r0, [r7, #4]
 810989a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810989c:	687b      	ldr	r3, [r7, #4]
 810989e:	685b      	ldr	r3, [r3, #4]
 81098a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81098a2:	683b      	ldr	r3, [r7, #0]
 81098a4:	68fa      	ldr	r2, [r7, #12]
 81098a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81098a8:	68fb      	ldr	r3, [r7, #12]
 81098aa:	689a      	ldr	r2, [r3, #8]
 81098ac:	683b      	ldr	r3, [r7, #0]
 81098ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81098b0:	68fb      	ldr	r3, [r7, #12]
 81098b2:	689b      	ldr	r3, [r3, #8]
 81098b4:	683a      	ldr	r2, [r7, #0]
 81098b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81098b8:	68fb      	ldr	r3, [r7, #12]
 81098ba:	683a      	ldr	r2, [r7, #0]
 81098bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81098be:	683b      	ldr	r3, [r7, #0]
 81098c0:	687a      	ldr	r2, [r7, #4]
 81098c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	681b      	ldr	r3, [r3, #0]
 81098c8:	1c5a      	adds	r2, r3, #1
 81098ca:	687b      	ldr	r3, [r7, #4]
 81098cc:	601a      	str	r2, [r3, #0]
}
 81098ce:	bf00      	nop
 81098d0:	3714      	adds	r7, #20
 81098d2:	46bd      	mov	sp, r7
 81098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098d8:	4770      	bx	lr

081098da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81098da:	b480      	push	{r7}
 81098dc:	b085      	sub	sp, #20
 81098de:	af00      	add	r7, sp, #0
 81098e0:	6078      	str	r0, [r7, #4]
 81098e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81098e4:	683b      	ldr	r3, [r7, #0]
 81098e6:	681b      	ldr	r3, [r3, #0]
 81098e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81098ea:	68bb      	ldr	r3, [r7, #8]
 81098ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81098f0:	d103      	bne.n	81098fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81098f2:	687b      	ldr	r3, [r7, #4]
 81098f4:	691b      	ldr	r3, [r3, #16]
 81098f6:	60fb      	str	r3, [r7, #12]
 81098f8:	e00c      	b.n	8109914 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81098fa:	687b      	ldr	r3, [r7, #4]
 81098fc:	3308      	adds	r3, #8
 81098fe:	60fb      	str	r3, [r7, #12]
 8109900:	e002      	b.n	8109908 <vListInsert+0x2e>
 8109902:	68fb      	ldr	r3, [r7, #12]
 8109904:	685b      	ldr	r3, [r3, #4]
 8109906:	60fb      	str	r3, [r7, #12]
 8109908:	68fb      	ldr	r3, [r7, #12]
 810990a:	685b      	ldr	r3, [r3, #4]
 810990c:	681b      	ldr	r3, [r3, #0]
 810990e:	68ba      	ldr	r2, [r7, #8]
 8109910:	429a      	cmp	r2, r3
 8109912:	d2f6      	bcs.n	8109902 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8109914:	68fb      	ldr	r3, [r7, #12]
 8109916:	685a      	ldr	r2, [r3, #4]
 8109918:	683b      	ldr	r3, [r7, #0]
 810991a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810991c:	683b      	ldr	r3, [r7, #0]
 810991e:	685b      	ldr	r3, [r3, #4]
 8109920:	683a      	ldr	r2, [r7, #0]
 8109922:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8109924:	683b      	ldr	r3, [r7, #0]
 8109926:	68fa      	ldr	r2, [r7, #12]
 8109928:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810992a:	68fb      	ldr	r3, [r7, #12]
 810992c:	683a      	ldr	r2, [r7, #0]
 810992e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8109930:	683b      	ldr	r3, [r7, #0]
 8109932:	687a      	ldr	r2, [r7, #4]
 8109934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109936:	687b      	ldr	r3, [r7, #4]
 8109938:	681b      	ldr	r3, [r3, #0]
 810993a:	1c5a      	adds	r2, r3, #1
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	601a      	str	r2, [r3, #0]
}
 8109940:	bf00      	nop
 8109942:	3714      	adds	r7, #20
 8109944:	46bd      	mov	sp, r7
 8109946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810994a:	4770      	bx	lr

0810994c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810994c:	b480      	push	{r7}
 810994e:	b085      	sub	sp, #20
 8109950:	af00      	add	r7, sp, #0
 8109952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8109954:	687b      	ldr	r3, [r7, #4]
 8109956:	691b      	ldr	r3, [r3, #16]
 8109958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810995a:	687b      	ldr	r3, [r7, #4]
 810995c:	685b      	ldr	r3, [r3, #4]
 810995e:	687a      	ldr	r2, [r7, #4]
 8109960:	6892      	ldr	r2, [r2, #8]
 8109962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8109964:	687b      	ldr	r3, [r7, #4]
 8109966:	689b      	ldr	r3, [r3, #8]
 8109968:	687a      	ldr	r2, [r7, #4]
 810996a:	6852      	ldr	r2, [r2, #4]
 810996c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810996e:	68fb      	ldr	r3, [r7, #12]
 8109970:	685b      	ldr	r3, [r3, #4]
 8109972:	687a      	ldr	r2, [r7, #4]
 8109974:	429a      	cmp	r2, r3
 8109976:	d103      	bne.n	8109980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8109978:	687b      	ldr	r3, [r7, #4]
 810997a:	689a      	ldr	r2, [r3, #8]
 810997c:	68fb      	ldr	r3, [r7, #12]
 810997e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8109980:	687b      	ldr	r3, [r7, #4]
 8109982:	2200      	movs	r2, #0
 8109984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8109986:	68fb      	ldr	r3, [r7, #12]
 8109988:	681b      	ldr	r3, [r3, #0]
 810998a:	1e5a      	subs	r2, r3, #1
 810998c:	68fb      	ldr	r3, [r7, #12]
 810998e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8109990:	68fb      	ldr	r3, [r7, #12]
 8109992:	681b      	ldr	r3, [r3, #0]
}
 8109994:	4618      	mov	r0, r3
 8109996:	3714      	adds	r7, #20
 8109998:	46bd      	mov	sp, r7
 810999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810999e:	4770      	bx	lr

081099a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81099a0:	b480      	push	{r7}
 81099a2:	b085      	sub	sp, #20
 81099a4:	af00      	add	r7, sp, #0
 81099a6:	60f8      	str	r0, [r7, #12]
 81099a8:	60b9      	str	r1, [r7, #8]
 81099aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81099ac:	68fb      	ldr	r3, [r7, #12]
 81099ae:	3b04      	subs	r3, #4
 81099b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81099b2:	68fb      	ldr	r3, [r7, #12]
 81099b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81099b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81099ba:	68fb      	ldr	r3, [r7, #12]
 81099bc:	3b04      	subs	r3, #4
 81099be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81099c0:	68bb      	ldr	r3, [r7, #8]
 81099c2:	f023 0201 	bic.w	r2, r3, #1
 81099c6:	68fb      	ldr	r3, [r7, #12]
 81099c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81099ca:	68fb      	ldr	r3, [r7, #12]
 81099cc:	3b04      	subs	r3, #4
 81099ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81099d0:	4a0c      	ldr	r2, [pc, #48]	; (8109a04 <pxPortInitialiseStack+0x64>)
 81099d2:	68fb      	ldr	r3, [r7, #12]
 81099d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81099d6:	68fb      	ldr	r3, [r7, #12]
 81099d8:	3b14      	subs	r3, #20
 81099da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81099dc:	687a      	ldr	r2, [r7, #4]
 81099de:	68fb      	ldr	r3, [r7, #12]
 81099e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81099e2:	68fb      	ldr	r3, [r7, #12]
 81099e4:	3b04      	subs	r3, #4
 81099e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81099e8:	68fb      	ldr	r3, [r7, #12]
 81099ea:	f06f 0202 	mvn.w	r2, #2
 81099ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81099f0:	68fb      	ldr	r3, [r7, #12]
 81099f2:	3b20      	subs	r3, #32
 81099f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81099f6:	68fb      	ldr	r3, [r7, #12]
}
 81099f8:	4618      	mov	r0, r3
 81099fa:	3714      	adds	r7, #20
 81099fc:	46bd      	mov	sp, r7
 81099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a02:	4770      	bx	lr
 8109a04:	08109a09 	.word	0x08109a09

08109a08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8109a08:	b480      	push	{r7}
 8109a0a:	b085      	sub	sp, #20
 8109a0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8109a0e:	2300      	movs	r3, #0
 8109a10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8109a12:	4b11      	ldr	r3, [pc, #68]	; (8109a58 <prvTaskExitError+0x50>)
 8109a14:	681b      	ldr	r3, [r3, #0]
 8109a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109a1a:	d009      	beq.n	8109a30 <prvTaskExitError+0x28>
 8109a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a20:	f383 8811 	msr	BASEPRI, r3
 8109a24:	f3bf 8f6f 	isb	sy
 8109a28:	f3bf 8f4f 	dsb	sy
 8109a2c:	60fb      	str	r3, [r7, #12]
 8109a2e:	e7fe      	b.n	8109a2e <prvTaskExitError+0x26>
 8109a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a34:	f383 8811 	msr	BASEPRI, r3
 8109a38:	f3bf 8f6f 	isb	sy
 8109a3c:	f3bf 8f4f 	dsb	sy
 8109a40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8109a42:	bf00      	nop
 8109a44:	687b      	ldr	r3, [r7, #4]
 8109a46:	2b00      	cmp	r3, #0
 8109a48:	d0fc      	beq.n	8109a44 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8109a4a:	bf00      	nop
 8109a4c:	3714      	adds	r7, #20
 8109a4e:	46bd      	mov	sp, r7
 8109a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a54:	4770      	bx	lr
 8109a56:	bf00      	nop
 8109a58:	10000024 	.word	0x10000024
 8109a5c:	00000000 	.word	0x00000000

08109a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8109a60:	4b07      	ldr	r3, [pc, #28]	; (8109a80 <pxCurrentTCBConst2>)
 8109a62:	6819      	ldr	r1, [r3, #0]
 8109a64:	6808      	ldr	r0, [r1, #0]
 8109a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109a6a:	f380 8809 	msr	PSP, r0
 8109a6e:	f3bf 8f6f 	isb	sy
 8109a72:	f04f 0000 	mov.w	r0, #0
 8109a76:	f380 8811 	msr	BASEPRI, r0
 8109a7a:	4770      	bx	lr
 8109a7c:	f3af 8000 	nop.w

08109a80 <pxCurrentTCBConst2>:
 8109a80:	100084b0 	.word	0x100084b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8109a84:	bf00      	nop
 8109a86:	bf00      	nop

08109a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8109a88:	4808      	ldr	r0, [pc, #32]	; (8109aac <prvPortStartFirstTask+0x24>)
 8109a8a:	6800      	ldr	r0, [r0, #0]
 8109a8c:	6800      	ldr	r0, [r0, #0]
 8109a8e:	f380 8808 	msr	MSP, r0
 8109a92:	f04f 0000 	mov.w	r0, #0
 8109a96:	f380 8814 	msr	CONTROL, r0
 8109a9a:	b662      	cpsie	i
 8109a9c:	b661      	cpsie	f
 8109a9e:	f3bf 8f4f 	dsb	sy
 8109aa2:	f3bf 8f6f 	isb	sy
 8109aa6:	df00      	svc	0
 8109aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8109aaa:	bf00      	nop
 8109aac:	e000ed08 	.word	0xe000ed08

08109ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8109ab0:	b580      	push	{r7, lr}
 8109ab2:	b086      	sub	sp, #24
 8109ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8109ab6:	4b44      	ldr	r3, [pc, #272]	; (8109bc8 <xPortStartScheduler+0x118>)
 8109ab8:	681b      	ldr	r3, [r3, #0]
 8109aba:	4a44      	ldr	r2, [pc, #272]	; (8109bcc <xPortStartScheduler+0x11c>)
 8109abc:	4293      	cmp	r3, r2
 8109abe:	d109      	bne.n	8109ad4 <xPortStartScheduler+0x24>
 8109ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ac4:	f383 8811 	msr	BASEPRI, r3
 8109ac8:	f3bf 8f6f 	isb	sy
 8109acc:	f3bf 8f4f 	dsb	sy
 8109ad0:	613b      	str	r3, [r7, #16]
 8109ad2:	e7fe      	b.n	8109ad2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8109ad4:	4b3c      	ldr	r3, [pc, #240]	; (8109bc8 <xPortStartScheduler+0x118>)
 8109ad6:	681b      	ldr	r3, [r3, #0]
 8109ad8:	4a3d      	ldr	r2, [pc, #244]	; (8109bd0 <xPortStartScheduler+0x120>)
 8109ada:	4293      	cmp	r3, r2
 8109adc:	d109      	bne.n	8109af2 <xPortStartScheduler+0x42>
 8109ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ae2:	f383 8811 	msr	BASEPRI, r3
 8109ae6:	f3bf 8f6f 	isb	sy
 8109aea:	f3bf 8f4f 	dsb	sy
 8109aee:	60fb      	str	r3, [r7, #12]
 8109af0:	e7fe      	b.n	8109af0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8109af2:	4b38      	ldr	r3, [pc, #224]	; (8109bd4 <xPortStartScheduler+0x124>)
 8109af4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8109af6:	697b      	ldr	r3, [r7, #20]
 8109af8:	781b      	ldrb	r3, [r3, #0]
 8109afa:	b2db      	uxtb	r3, r3
 8109afc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8109afe:	697b      	ldr	r3, [r7, #20]
 8109b00:	22ff      	movs	r2, #255	; 0xff
 8109b02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8109b04:	697b      	ldr	r3, [r7, #20]
 8109b06:	781b      	ldrb	r3, [r3, #0]
 8109b08:	b2db      	uxtb	r3, r3
 8109b0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8109b0c:	78fb      	ldrb	r3, [r7, #3]
 8109b0e:	b2db      	uxtb	r3, r3
 8109b10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8109b14:	b2da      	uxtb	r2, r3
 8109b16:	4b30      	ldr	r3, [pc, #192]	; (8109bd8 <xPortStartScheduler+0x128>)
 8109b18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8109b1a:	4b30      	ldr	r3, [pc, #192]	; (8109bdc <xPortStartScheduler+0x12c>)
 8109b1c:	2207      	movs	r2, #7
 8109b1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109b20:	e009      	b.n	8109b36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8109b22:	4b2e      	ldr	r3, [pc, #184]	; (8109bdc <xPortStartScheduler+0x12c>)
 8109b24:	681b      	ldr	r3, [r3, #0]
 8109b26:	3b01      	subs	r3, #1
 8109b28:	4a2c      	ldr	r2, [pc, #176]	; (8109bdc <xPortStartScheduler+0x12c>)
 8109b2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8109b2c:	78fb      	ldrb	r3, [r7, #3]
 8109b2e:	b2db      	uxtb	r3, r3
 8109b30:	005b      	lsls	r3, r3, #1
 8109b32:	b2db      	uxtb	r3, r3
 8109b34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109b36:	78fb      	ldrb	r3, [r7, #3]
 8109b38:	b2db      	uxtb	r3, r3
 8109b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109b3e:	2b80      	cmp	r3, #128	; 0x80
 8109b40:	d0ef      	beq.n	8109b22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8109b42:	4b26      	ldr	r3, [pc, #152]	; (8109bdc <xPortStartScheduler+0x12c>)
 8109b44:	681b      	ldr	r3, [r3, #0]
 8109b46:	f1c3 0307 	rsb	r3, r3, #7
 8109b4a:	2b04      	cmp	r3, #4
 8109b4c:	d009      	beq.n	8109b62 <xPortStartScheduler+0xb2>
 8109b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b52:	f383 8811 	msr	BASEPRI, r3
 8109b56:	f3bf 8f6f 	isb	sy
 8109b5a:	f3bf 8f4f 	dsb	sy
 8109b5e:	60bb      	str	r3, [r7, #8]
 8109b60:	e7fe      	b.n	8109b60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8109b62:	4b1e      	ldr	r3, [pc, #120]	; (8109bdc <xPortStartScheduler+0x12c>)
 8109b64:	681b      	ldr	r3, [r3, #0]
 8109b66:	021b      	lsls	r3, r3, #8
 8109b68:	4a1c      	ldr	r2, [pc, #112]	; (8109bdc <xPortStartScheduler+0x12c>)
 8109b6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8109b6c:	4b1b      	ldr	r3, [pc, #108]	; (8109bdc <xPortStartScheduler+0x12c>)
 8109b6e:	681b      	ldr	r3, [r3, #0]
 8109b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109b74:	4a19      	ldr	r2, [pc, #100]	; (8109bdc <xPortStartScheduler+0x12c>)
 8109b76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8109b78:	687b      	ldr	r3, [r7, #4]
 8109b7a:	b2da      	uxtb	r2, r3
 8109b7c:	697b      	ldr	r3, [r7, #20]
 8109b7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8109b80:	4b17      	ldr	r3, [pc, #92]	; (8109be0 <xPortStartScheduler+0x130>)
 8109b82:	681b      	ldr	r3, [r3, #0]
 8109b84:	4a16      	ldr	r2, [pc, #88]	; (8109be0 <xPortStartScheduler+0x130>)
 8109b86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8109b8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8109b8c:	4b14      	ldr	r3, [pc, #80]	; (8109be0 <xPortStartScheduler+0x130>)
 8109b8e:	681b      	ldr	r3, [r3, #0]
 8109b90:	4a13      	ldr	r2, [pc, #76]	; (8109be0 <xPortStartScheduler+0x130>)
 8109b92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8109b96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8109b98:	f000 f8d6 	bl	8109d48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8109b9c:	4b11      	ldr	r3, [pc, #68]	; (8109be4 <xPortStartScheduler+0x134>)
 8109b9e:	2200      	movs	r2, #0
 8109ba0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8109ba2:	f000 f8f5 	bl	8109d90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8109ba6:	4b10      	ldr	r3, [pc, #64]	; (8109be8 <xPortStartScheduler+0x138>)
 8109ba8:	681b      	ldr	r3, [r3, #0]
 8109baa:	4a0f      	ldr	r2, [pc, #60]	; (8109be8 <xPortStartScheduler+0x138>)
 8109bac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8109bb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8109bb2:	f7ff ff69 	bl	8109a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8109bb6:	f001 f977 	bl	810aea8 <vTaskSwitchContext>
	prvTaskExitError();
 8109bba:	f7ff ff25 	bl	8109a08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8109bbe:	2300      	movs	r3, #0
}
 8109bc0:	4618      	mov	r0, r3
 8109bc2:	3718      	adds	r7, #24
 8109bc4:	46bd      	mov	sp, r7
 8109bc6:	bd80      	pop	{r7, pc}
 8109bc8:	e000ed00 	.word	0xe000ed00
 8109bcc:	410fc271 	.word	0x410fc271
 8109bd0:	410fc270 	.word	0x410fc270
 8109bd4:	e000e400 	.word	0xe000e400
 8109bd8:	100084a8 	.word	0x100084a8
 8109bdc:	100084ac 	.word	0x100084ac
 8109be0:	e000ed20 	.word	0xe000ed20
 8109be4:	10000024 	.word	0x10000024
 8109be8:	e000ef34 	.word	0xe000ef34

08109bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8109bec:	b480      	push	{r7}
 8109bee:	b083      	sub	sp, #12
 8109bf0:	af00      	add	r7, sp, #0
 8109bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109bf6:	f383 8811 	msr	BASEPRI, r3
 8109bfa:	f3bf 8f6f 	isb	sy
 8109bfe:	f3bf 8f4f 	dsb	sy
 8109c02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8109c04:	4b0e      	ldr	r3, [pc, #56]	; (8109c40 <vPortEnterCritical+0x54>)
 8109c06:	681b      	ldr	r3, [r3, #0]
 8109c08:	3301      	adds	r3, #1
 8109c0a:	4a0d      	ldr	r2, [pc, #52]	; (8109c40 <vPortEnterCritical+0x54>)
 8109c0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8109c0e:	4b0c      	ldr	r3, [pc, #48]	; (8109c40 <vPortEnterCritical+0x54>)
 8109c10:	681b      	ldr	r3, [r3, #0]
 8109c12:	2b01      	cmp	r3, #1
 8109c14:	d10e      	bne.n	8109c34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8109c16:	4b0b      	ldr	r3, [pc, #44]	; (8109c44 <vPortEnterCritical+0x58>)
 8109c18:	681b      	ldr	r3, [r3, #0]
 8109c1a:	b2db      	uxtb	r3, r3
 8109c1c:	2b00      	cmp	r3, #0
 8109c1e:	d009      	beq.n	8109c34 <vPortEnterCritical+0x48>
 8109c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c24:	f383 8811 	msr	BASEPRI, r3
 8109c28:	f3bf 8f6f 	isb	sy
 8109c2c:	f3bf 8f4f 	dsb	sy
 8109c30:	603b      	str	r3, [r7, #0]
 8109c32:	e7fe      	b.n	8109c32 <vPortEnterCritical+0x46>
	}
}
 8109c34:	bf00      	nop
 8109c36:	370c      	adds	r7, #12
 8109c38:	46bd      	mov	sp, r7
 8109c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c3e:	4770      	bx	lr
 8109c40:	10000024 	.word	0x10000024
 8109c44:	e000ed04 	.word	0xe000ed04

08109c48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8109c48:	b480      	push	{r7}
 8109c4a:	b083      	sub	sp, #12
 8109c4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8109c4e:	4b11      	ldr	r3, [pc, #68]	; (8109c94 <vPortExitCritical+0x4c>)
 8109c50:	681b      	ldr	r3, [r3, #0]
 8109c52:	2b00      	cmp	r3, #0
 8109c54:	d109      	bne.n	8109c6a <vPortExitCritical+0x22>
 8109c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c5a:	f383 8811 	msr	BASEPRI, r3
 8109c5e:	f3bf 8f6f 	isb	sy
 8109c62:	f3bf 8f4f 	dsb	sy
 8109c66:	607b      	str	r3, [r7, #4]
 8109c68:	e7fe      	b.n	8109c68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8109c6a:	4b0a      	ldr	r3, [pc, #40]	; (8109c94 <vPortExitCritical+0x4c>)
 8109c6c:	681b      	ldr	r3, [r3, #0]
 8109c6e:	3b01      	subs	r3, #1
 8109c70:	4a08      	ldr	r2, [pc, #32]	; (8109c94 <vPortExitCritical+0x4c>)
 8109c72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8109c74:	4b07      	ldr	r3, [pc, #28]	; (8109c94 <vPortExitCritical+0x4c>)
 8109c76:	681b      	ldr	r3, [r3, #0]
 8109c78:	2b00      	cmp	r3, #0
 8109c7a:	d104      	bne.n	8109c86 <vPortExitCritical+0x3e>
 8109c7c:	2300      	movs	r3, #0
 8109c7e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8109c80:	683b      	ldr	r3, [r7, #0]
 8109c82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8109c86:	bf00      	nop
 8109c88:	370c      	adds	r7, #12
 8109c8a:	46bd      	mov	sp, r7
 8109c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c90:	4770      	bx	lr
 8109c92:	bf00      	nop
 8109c94:	10000024 	.word	0x10000024
	...

08109ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8109ca0:	f3ef 8009 	mrs	r0, PSP
 8109ca4:	f3bf 8f6f 	isb	sy
 8109ca8:	4b15      	ldr	r3, [pc, #84]	; (8109d00 <pxCurrentTCBConst>)
 8109caa:	681a      	ldr	r2, [r3, #0]
 8109cac:	f01e 0f10 	tst.w	lr, #16
 8109cb0:	bf08      	it	eq
 8109cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8109cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109cba:	6010      	str	r0, [r2, #0]
 8109cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8109cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8109cc4:	f380 8811 	msr	BASEPRI, r0
 8109cc8:	f3bf 8f4f 	dsb	sy
 8109ccc:	f3bf 8f6f 	isb	sy
 8109cd0:	f001 f8ea 	bl	810aea8 <vTaskSwitchContext>
 8109cd4:	f04f 0000 	mov.w	r0, #0
 8109cd8:	f380 8811 	msr	BASEPRI, r0
 8109cdc:	bc09      	pop	{r0, r3}
 8109cde:	6819      	ldr	r1, [r3, #0]
 8109ce0:	6808      	ldr	r0, [r1, #0]
 8109ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109ce6:	f01e 0f10 	tst.w	lr, #16
 8109cea:	bf08      	it	eq
 8109cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109cf0:	f380 8809 	msr	PSP, r0
 8109cf4:	f3bf 8f6f 	isb	sy
 8109cf8:	4770      	bx	lr
 8109cfa:	bf00      	nop
 8109cfc:	f3af 8000 	nop.w

08109d00 <pxCurrentTCBConst>:
 8109d00:	100084b0 	.word	0x100084b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109d04:	bf00      	nop
 8109d06:	bf00      	nop

08109d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109d08:	b580      	push	{r7, lr}
 8109d0a:	b082      	sub	sp, #8
 8109d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8109d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109d12:	f383 8811 	msr	BASEPRI, r3
 8109d16:	f3bf 8f6f 	isb	sy
 8109d1a:	f3bf 8f4f 	dsb	sy
 8109d1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109d20:	f001 f80a 	bl	810ad38 <xTaskIncrementTick>
 8109d24:	4603      	mov	r3, r0
 8109d26:	2b00      	cmp	r3, #0
 8109d28:	d003      	beq.n	8109d32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8109d2a:	4b06      	ldr	r3, [pc, #24]	; (8109d44 <SysTick_Handler+0x3c>)
 8109d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109d30:	601a      	str	r2, [r3, #0]
 8109d32:	2300      	movs	r3, #0
 8109d34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109d36:	683b      	ldr	r3, [r7, #0]
 8109d38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8109d3c:	bf00      	nop
 8109d3e:	3708      	adds	r7, #8
 8109d40:	46bd      	mov	sp, r7
 8109d42:	bd80      	pop	{r7, pc}
 8109d44:	e000ed04 	.word	0xe000ed04

08109d48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8109d48:	b480      	push	{r7}
 8109d4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8109d4c:	4b0b      	ldr	r3, [pc, #44]	; (8109d7c <vPortSetupTimerInterrupt+0x34>)
 8109d4e:	2200      	movs	r2, #0
 8109d50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109d52:	4b0b      	ldr	r3, [pc, #44]	; (8109d80 <vPortSetupTimerInterrupt+0x38>)
 8109d54:	2200      	movs	r2, #0
 8109d56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8109d58:	4b0a      	ldr	r3, [pc, #40]	; (8109d84 <vPortSetupTimerInterrupt+0x3c>)
 8109d5a:	681b      	ldr	r3, [r3, #0]
 8109d5c:	4a0a      	ldr	r2, [pc, #40]	; (8109d88 <vPortSetupTimerInterrupt+0x40>)
 8109d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8109d62:	099b      	lsrs	r3, r3, #6
 8109d64:	4a09      	ldr	r2, [pc, #36]	; (8109d8c <vPortSetupTimerInterrupt+0x44>)
 8109d66:	3b01      	subs	r3, #1
 8109d68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8109d6a:	4b04      	ldr	r3, [pc, #16]	; (8109d7c <vPortSetupTimerInterrupt+0x34>)
 8109d6c:	2207      	movs	r2, #7
 8109d6e:	601a      	str	r2, [r3, #0]
}
 8109d70:	bf00      	nop
 8109d72:	46bd      	mov	sp, r7
 8109d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d78:	4770      	bx	lr
 8109d7a:	bf00      	nop
 8109d7c:	e000e010 	.word	0xe000e010
 8109d80:	e000e018 	.word	0xe000e018
 8109d84:	10000004 	.word	0x10000004
 8109d88:	10624dd3 	.word	0x10624dd3
 8109d8c:	e000e014 	.word	0xe000e014

08109d90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8109d90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8109da0 <vPortEnableVFP+0x10>
 8109d94:	6801      	ldr	r1, [r0, #0]
 8109d96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8109d9a:	6001      	str	r1, [r0, #0]
 8109d9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8109d9e:	bf00      	nop
 8109da0:	e000ed88 	.word	0xe000ed88

08109da4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8109da4:	b580      	push	{r7, lr}
 8109da6:	b084      	sub	sp, #16
 8109da8:	af00      	add	r7, sp, #0
 8109daa:	6078      	str	r0, [r7, #4]
 8109dac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8109dae:	687b      	ldr	r3, [r7, #4]
 8109db0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8109db2:	68fb      	ldr	r3, [r7, #12]
 8109db4:	2b00      	cmp	r3, #0
 8109db6:	d109      	bne.n	8109dcc <xQueueGenericReset+0x28>
	__asm volatile
 8109db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109dbc:	f383 8811 	msr	BASEPRI, r3
 8109dc0:	f3bf 8f6f 	isb	sy
 8109dc4:	f3bf 8f4f 	dsb	sy
 8109dc8:	60bb      	str	r3, [r7, #8]
 8109dca:	e7fe      	b.n	8109dca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8109dcc:	f7ff ff0e 	bl	8109bec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109dd0:	68fb      	ldr	r3, [r7, #12]
 8109dd2:	681a      	ldr	r2, [r3, #0]
 8109dd4:	68fb      	ldr	r3, [r7, #12]
 8109dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109dd8:	68f9      	ldr	r1, [r7, #12]
 8109dda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8109ddc:	fb01 f303 	mul.w	r3, r1, r3
 8109de0:	441a      	add	r2, r3
 8109de2:	68fb      	ldr	r3, [r7, #12]
 8109de4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8109de6:	68fb      	ldr	r3, [r7, #12]
 8109de8:	2200      	movs	r2, #0
 8109dea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8109dec:	68fb      	ldr	r3, [r7, #12]
 8109dee:	681a      	ldr	r2, [r3, #0]
 8109df0:	68fb      	ldr	r3, [r7, #12]
 8109df2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109df4:	68fb      	ldr	r3, [r7, #12]
 8109df6:	681a      	ldr	r2, [r3, #0]
 8109df8:	68fb      	ldr	r3, [r7, #12]
 8109dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109dfc:	3b01      	subs	r3, #1
 8109dfe:	68f9      	ldr	r1, [r7, #12]
 8109e00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8109e02:	fb01 f303 	mul.w	r3, r1, r3
 8109e06:	441a      	add	r2, r3
 8109e08:	68fb      	ldr	r3, [r7, #12]
 8109e0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8109e0c:	68fb      	ldr	r3, [r7, #12]
 8109e0e:	22ff      	movs	r2, #255	; 0xff
 8109e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8109e14:	68fb      	ldr	r3, [r7, #12]
 8109e16:	22ff      	movs	r2, #255	; 0xff
 8109e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8109e1c:	683b      	ldr	r3, [r7, #0]
 8109e1e:	2b00      	cmp	r3, #0
 8109e20:	d114      	bne.n	8109e4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109e22:	68fb      	ldr	r3, [r7, #12]
 8109e24:	691b      	ldr	r3, [r3, #16]
 8109e26:	2b00      	cmp	r3, #0
 8109e28:	d01a      	beq.n	8109e60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109e2a:	68fb      	ldr	r3, [r7, #12]
 8109e2c:	3310      	adds	r3, #16
 8109e2e:	4618      	mov	r0, r3
 8109e30:	f001 f8b8 	bl	810afa4 <xTaskRemoveFromEventList>
 8109e34:	4603      	mov	r3, r0
 8109e36:	2b00      	cmp	r3, #0
 8109e38:	d012      	beq.n	8109e60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8109e3a:	4b0d      	ldr	r3, [pc, #52]	; (8109e70 <xQueueGenericReset+0xcc>)
 8109e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109e40:	601a      	str	r2, [r3, #0]
 8109e42:	f3bf 8f4f 	dsb	sy
 8109e46:	f3bf 8f6f 	isb	sy
 8109e4a:	e009      	b.n	8109e60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8109e4c:	68fb      	ldr	r3, [r7, #12]
 8109e4e:	3310      	adds	r3, #16
 8109e50:	4618      	mov	r0, r3
 8109e52:	f7ff fcf1 	bl	8109838 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8109e56:	68fb      	ldr	r3, [r7, #12]
 8109e58:	3324      	adds	r3, #36	; 0x24
 8109e5a:	4618      	mov	r0, r3
 8109e5c:	f7ff fcec 	bl	8109838 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8109e60:	f7ff fef2 	bl	8109c48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8109e64:	2301      	movs	r3, #1
}
 8109e66:	4618      	mov	r0, r3
 8109e68:	3710      	adds	r7, #16
 8109e6a:	46bd      	mov	sp, r7
 8109e6c:	bd80      	pop	{r7, pc}
 8109e6e:	bf00      	nop
 8109e70:	e000ed04 	.word	0xe000ed04

08109e74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8109e74:	b580      	push	{r7, lr}
 8109e76:	b08e      	sub	sp, #56	; 0x38
 8109e78:	af02      	add	r7, sp, #8
 8109e7a:	60f8      	str	r0, [r7, #12]
 8109e7c:	60b9      	str	r1, [r7, #8]
 8109e7e:	607a      	str	r2, [r7, #4]
 8109e80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109e82:	68fb      	ldr	r3, [r7, #12]
 8109e84:	2b00      	cmp	r3, #0
 8109e86:	d109      	bne.n	8109e9c <xQueueGenericCreateStatic+0x28>
 8109e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e8c:	f383 8811 	msr	BASEPRI, r3
 8109e90:	f3bf 8f6f 	isb	sy
 8109e94:	f3bf 8f4f 	dsb	sy
 8109e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8109e9a:	e7fe      	b.n	8109e9a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8109e9c:	683b      	ldr	r3, [r7, #0]
 8109e9e:	2b00      	cmp	r3, #0
 8109ea0:	d109      	bne.n	8109eb6 <xQueueGenericCreateStatic+0x42>
 8109ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ea6:	f383 8811 	msr	BASEPRI, r3
 8109eaa:	f3bf 8f6f 	isb	sy
 8109eae:	f3bf 8f4f 	dsb	sy
 8109eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8109eb4:	e7fe      	b.n	8109eb4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8109eb6:	687b      	ldr	r3, [r7, #4]
 8109eb8:	2b00      	cmp	r3, #0
 8109eba:	d002      	beq.n	8109ec2 <xQueueGenericCreateStatic+0x4e>
 8109ebc:	68bb      	ldr	r3, [r7, #8]
 8109ebe:	2b00      	cmp	r3, #0
 8109ec0:	d001      	beq.n	8109ec6 <xQueueGenericCreateStatic+0x52>
 8109ec2:	2301      	movs	r3, #1
 8109ec4:	e000      	b.n	8109ec8 <xQueueGenericCreateStatic+0x54>
 8109ec6:	2300      	movs	r3, #0
 8109ec8:	2b00      	cmp	r3, #0
 8109eca:	d109      	bne.n	8109ee0 <xQueueGenericCreateStatic+0x6c>
 8109ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ed0:	f383 8811 	msr	BASEPRI, r3
 8109ed4:	f3bf 8f6f 	isb	sy
 8109ed8:	f3bf 8f4f 	dsb	sy
 8109edc:	623b      	str	r3, [r7, #32]
 8109ede:	e7fe      	b.n	8109ede <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8109ee0:	687b      	ldr	r3, [r7, #4]
 8109ee2:	2b00      	cmp	r3, #0
 8109ee4:	d102      	bne.n	8109eec <xQueueGenericCreateStatic+0x78>
 8109ee6:	68bb      	ldr	r3, [r7, #8]
 8109ee8:	2b00      	cmp	r3, #0
 8109eea:	d101      	bne.n	8109ef0 <xQueueGenericCreateStatic+0x7c>
 8109eec:	2301      	movs	r3, #1
 8109eee:	e000      	b.n	8109ef2 <xQueueGenericCreateStatic+0x7e>
 8109ef0:	2300      	movs	r3, #0
 8109ef2:	2b00      	cmp	r3, #0
 8109ef4:	d109      	bne.n	8109f0a <xQueueGenericCreateStatic+0x96>
 8109ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109efa:	f383 8811 	msr	BASEPRI, r3
 8109efe:	f3bf 8f6f 	isb	sy
 8109f02:	f3bf 8f4f 	dsb	sy
 8109f06:	61fb      	str	r3, [r7, #28]
 8109f08:	e7fe      	b.n	8109f08 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8109f0a:	2348      	movs	r3, #72	; 0x48
 8109f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8109f0e:	697b      	ldr	r3, [r7, #20]
 8109f10:	2b48      	cmp	r3, #72	; 0x48
 8109f12:	d009      	beq.n	8109f28 <xQueueGenericCreateStatic+0xb4>
 8109f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f18:	f383 8811 	msr	BASEPRI, r3
 8109f1c:	f3bf 8f6f 	isb	sy
 8109f20:	f3bf 8f4f 	dsb	sy
 8109f24:	61bb      	str	r3, [r7, #24]
 8109f26:	e7fe      	b.n	8109f26 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8109f28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109f2a:	683b      	ldr	r3, [r7, #0]
 8109f2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8109f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109f30:	2b00      	cmp	r3, #0
 8109f32:	d00d      	beq.n	8109f50 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8109f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109f36:	2201      	movs	r2, #1
 8109f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109f3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8109f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109f42:	9300      	str	r3, [sp, #0]
 8109f44:	4613      	mov	r3, r2
 8109f46:	687a      	ldr	r2, [r7, #4]
 8109f48:	68b9      	ldr	r1, [r7, #8]
 8109f4a:	68f8      	ldr	r0, [r7, #12]
 8109f4c:	f000 f844 	bl	8109fd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8109f52:	4618      	mov	r0, r3
 8109f54:	3730      	adds	r7, #48	; 0x30
 8109f56:	46bd      	mov	sp, r7
 8109f58:	bd80      	pop	{r7, pc}

08109f5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8109f5a:	b580      	push	{r7, lr}
 8109f5c:	b08a      	sub	sp, #40	; 0x28
 8109f5e:	af02      	add	r7, sp, #8
 8109f60:	60f8      	str	r0, [r7, #12]
 8109f62:	60b9      	str	r1, [r7, #8]
 8109f64:	4613      	mov	r3, r2
 8109f66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109f68:	68fb      	ldr	r3, [r7, #12]
 8109f6a:	2b00      	cmp	r3, #0
 8109f6c:	d109      	bne.n	8109f82 <xQueueGenericCreate+0x28>
 8109f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f72:	f383 8811 	msr	BASEPRI, r3
 8109f76:	f3bf 8f6f 	isb	sy
 8109f7a:	f3bf 8f4f 	dsb	sy
 8109f7e:	613b      	str	r3, [r7, #16]
 8109f80:	e7fe      	b.n	8109f80 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8109f82:	68bb      	ldr	r3, [r7, #8]
 8109f84:	2b00      	cmp	r3, #0
 8109f86:	d102      	bne.n	8109f8e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8109f88:	2300      	movs	r3, #0
 8109f8a:	61fb      	str	r3, [r7, #28]
 8109f8c:	e004      	b.n	8109f98 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109f8e:	68fb      	ldr	r3, [r7, #12]
 8109f90:	68ba      	ldr	r2, [r7, #8]
 8109f92:	fb02 f303 	mul.w	r3, r2, r3
 8109f96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8109f98:	69fb      	ldr	r3, [r7, #28]
 8109f9a:	3348      	adds	r3, #72	; 0x48
 8109f9c:	4618      	mov	r0, r3
 8109f9e:	f7ff fa75 	bl	810948c <pvPortMalloc>
 8109fa2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8109fa4:	69bb      	ldr	r3, [r7, #24]
 8109fa6:	2b00      	cmp	r3, #0
 8109fa8:	d011      	beq.n	8109fce <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8109faa:	69bb      	ldr	r3, [r7, #24]
 8109fac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109fae:	697b      	ldr	r3, [r7, #20]
 8109fb0:	3348      	adds	r3, #72	; 0x48
 8109fb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8109fb4:	69bb      	ldr	r3, [r7, #24]
 8109fb6:	2200      	movs	r2, #0
 8109fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109fbc:	79fa      	ldrb	r2, [r7, #7]
 8109fbe:	69bb      	ldr	r3, [r7, #24]
 8109fc0:	9300      	str	r3, [sp, #0]
 8109fc2:	4613      	mov	r3, r2
 8109fc4:	697a      	ldr	r2, [r7, #20]
 8109fc6:	68b9      	ldr	r1, [r7, #8]
 8109fc8:	68f8      	ldr	r0, [r7, #12]
 8109fca:	f000 f805 	bl	8109fd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109fce:	69bb      	ldr	r3, [r7, #24]
	}
 8109fd0:	4618      	mov	r0, r3
 8109fd2:	3720      	adds	r7, #32
 8109fd4:	46bd      	mov	sp, r7
 8109fd6:	bd80      	pop	{r7, pc}

08109fd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8109fd8:	b580      	push	{r7, lr}
 8109fda:	b084      	sub	sp, #16
 8109fdc:	af00      	add	r7, sp, #0
 8109fde:	60f8      	str	r0, [r7, #12]
 8109fe0:	60b9      	str	r1, [r7, #8]
 8109fe2:	607a      	str	r2, [r7, #4]
 8109fe4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8109fe6:	68bb      	ldr	r3, [r7, #8]
 8109fe8:	2b00      	cmp	r3, #0
 8109fea:	d103      	bne.n	8109ff4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8109fec:	69bb      	ldr	r3, [r7, #24]
 8109fee:	69ba      	ldr	r2, [r7, #24]
 8109ff0:	601a      	str	r2, [r3, #0]
 8109ff2:	e002      	b.n	8109ffa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8109ff4:	69bb      	ldr	r3, [r7, #24]
 8109ff6:	687a      	ldr	r2, [r7, #4]
 8109ff8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8109ffa:	69bb      	ldr	r3, [r7, #24]
 8109ffc:	68fa      	ldr	r2, [r7, #12]
 8109ffe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810a000:	69bb      	ldr	r3, [r7, #24]
 810a002:	68ba      	ldr	r2, [r7, #8]
 810a004:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810a006:	2101      	movs	r1, #1
 810a008:	69b8      	ldr	r0, [r7, #24]
 810a00a:	f7ff fecb 	bl	8109da4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810a00e:	bf00      	nop
 810a010:	3710      	adds	r7, #16
 810a012:	46bd      	mov	sp, r7
 810a014:	bd80      	pop	{r7, pc}

0810a016 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 810a016:	b580      	push	{r7, lr}
 810a018:	b082      	sub	sp, #8
 810a01a:	af00      	add	r7, sp, #0
 810a01c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 810a01e:	687b      	ldr	r3, [r7, #4]
 810a020:	2b00      	cmp	r3, #0
 810a022:	d00e      	beq.n	810a042 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 810a024:	687b      	ldr	r3, [r7, #4]
 810a026:	2200      	movs	r2, #0
 810a028:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	2200      	movs	r2, #0
 810a02e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 810a030:	687b      	ldr	r3, [r7, #4]
 810a032:	2200      	movs	r2, #0
 810a034:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 810a036:	2300      	movs	r3, #0
 810a038:	2200      	movs	r2, #0
 810a03a:	2100      	movs	r1, #0
 810a03c:	6878      	ldr	r0, [r7, #4]
 810a03e:	f000 f81d 	bl	810a07c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 810a042:	bf00      	nop
 810a044:	3708      	adds	r7, #8
 810a046:	46bd      	mov	sp, r7
 810a048:	bd80      	pop	{r7, pc}

0810a04a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 810a04a:	b580      	push	{r7, lr}
 810a04c:	b086      	sub	sp, #24
 810a04e:	af00      	add	r7, sp, #0
 810a050:	4603      	mov	r3, r0
 810a052:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810a054:	2301      	movs	r3, #1
 810a056:	617b      	str	r3, [r7, #20]
 810a058:	2300      	movs	r3, #0
 810a05a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 810a05c:	79fb      	ldrb	r3, [r7, #7]
 810a05e:	461a      	mov	r2, r3
 810a060:	6939      	ldr	r1, [r7, #16]
 810a062:	6978      	ldr	r0, [r7, #20]
 810a064:	f7ff ff79 	bl	8109f5a <xQueueGenericCreate>
 810a068:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810a06a:	68f8      	ldr	r0, [r7, #12]
 810a06c:	f7ff ffd3 	bl	810a016 <prvInitialiseMutex>

		return xNewQueue;
 810a070:	68fb      	ldr	r3, [r7, #12]
	}
 810a072:	4618      	mov	r0, r3
 810a074:	3718      	adds	r7, #24
 810a076:	46bd      	mov	sp, r7
 810a078:	bd80      	pop	{r7, pc}
	...

0810a07c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810a07c:	b580      	push	{r7, lr}
 810a07e:	b08e      	sub	sp, #56	; 0x38
 810a080:	af00      	add	r7, sp, #0
 810a082:	60f8      	str	r0, [r7, #12]
 810a084:	60b9      	str	r1, [r7, #8]
 810a086:	607a      	str	r2, [r7, #4]
 810a088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810a08a:	2300      	movs	r3, #0
 810a08c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810a08e:	68fb      	ldr	r3, [r7, #12]
 810a090:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a094:	2b00      	cmp	r3, #0
 810a096:	d109      	bne.n	810a0ac <xQueueGenericSend+0x30>
 810a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a09c:	f383 8811 	msr	BASEPRI, r3
 810a0a0:	f3bf 8f6f 	isb	sy
 810a0a4:	f3bf 8f4f 	dsb	sy
 810a0a8:	62bb      	str	r3, [r7, #40]	; 0x28
 810a0aa:	e7fe      	b.n	810a0aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a0ac:	68bb      	ldr	r3, [r7, #8]
 810a0ae:	2b00      	cmp	r3, #0
 810a0b0:	d103      	bne.n	810a0ba <xQueueGenericSend+0x3e>
 810a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a0b6:	2b00      	cmp	r3, #0
 810a0b8:	d101      	bne.n	810a0be <xQueueGenericSend+0x42>
 810a0ba:	2301      	movs	r3, #1
 810a0bc:	e000      	b.n	810a0c0 <xQueueGenericSend+0x44>
 810a0be:	2300      	movs	r3, #0
 810a0c0:	2b00      	cmp	r3, #0
 810a0c2:	d109      	bne.n	810a0d8 <xQueueGenericSend+0x5c>
 810a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0c8:	f383 8811 	msr	BASEPRI, r3
 810a0cc:	f3bf 8f6f 	isb	sy
 810a0d0:	f3bf 8f4f 	dsb	sy
 810a0d4:	627b      	str	r3, [r7, #36]	; 0x24
 810a0d6:	e7fe      	b.n	810a0d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810a0d8:	683b      	ldr	r3, [r7, #0]
 810a0da:	2b02      	cmp	r3, #2
 810a0dc:	d103      	bne.n	810a0e6 <xQueueGenericSend+0x6a>
 810a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a0e2:	2b01      	cmp	r3, #1
 810a0e4:	d101      	bne.n	810a0ea <xQueueGenericSend+0x6e>
 810a0e6:	2301      	movs	r3, #1
 810a0e8:	e000      	b.n	810a0ec <xQueueGenericSend+0x70>
 810a0ea:	2300      	movs	r3, #0
 810a0ec:	2b00      	cmp	r3, #0
 810a0ee:	d109      	bne.n	810a104 <xQueueGenericSend+0x88>
 810a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0f4:	f383 8811 	msr	BASEPRI, r3
 810a0f8:	f3bf 8f6f 	isb	sy
 810a0fc:	f3bf 8f4f 	dsb	sy
 810a100:	623b      	str	r3, [r7, #32]
 810a102:	e7fe      	b.n	810a102 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810a104:	f001 f904 	bl	810b310 <xTaskGetSchedulerState>
 810a108:	4603      	mov	r3, r0
 810a10a:	2b00      	cmp	r3, #0
 810a10c:	d102      	bne.n	810a114 <xQueueGenericSend+0x98>
 810a10e:	687b      	ldr	r3, [r7, #4]
 810a110:	2b00      	cmp	r3, #0
 810a112:	d101      	bne.n	810a118 <xQueueGenericSend+0x9c>
 810a114:	2301      	movs	r3, #1
 810a116:	e000      	b.n	810a11a <xQueueGenericSend+0x9e>
 810a118:	2300      	movs	r3, #0
 810a11a:	2b00      	cmp	r3, #0
 810a11c:	d109      	bne.n	810a132 <xQueueGenericSend+0xb6>
 810a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a122:	f383 8811 	msr	BASEPRI, r3
 810a126:	f3bf 8f6f 	isb	sy
 810a12a:	f3bf 8f4f 	dsb	sy
 810a12e:	61fb      	str	r3, [r7, #28]
 810a130:	e7fe      	b.n	810a130 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810a132:	f7ff fd5b 	bl	8109bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a13e:	429a      	cmp	r2, r3
 810a140:	d302      	bcc.n	810a148 <xQueueGenericSend+0xcc>
 810a142:	683b      	ldr	r3, [r7, #0]
 810a144:	2b02      	cmp	r3, #2
 810a146:	d129      	bne.n	810a19c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810a148:	683a      	ldr	r2, [r7, #0]
 810a14a:	68b9      	ldr	r1, [r7, #8]
 810a14c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a14e:	f000 f9af 	bl	810a4b0 <prvCopyDataToQueue>
 810a152:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a158:	2b00      	cmp	r3, #0
 810a15a:	d010      	beq.n	810a17e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a15e:	3324      	adds	r3, #36	; 0x24
 810a160:	4618      	mov	r0, r3
 810a162:	f000 ff1f 	bl	810afa4 <xTaskRemoveFromEventList>
 810a166:	4603      	mov	r3, r0
 810a168:	2b00      	cmp	r3, #0
 810a16a:	d013      	beq.n	810a194 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810a16c:	4b3f      	ldr	r3, [pc, #252]	; (810a26c <xQueueGenericSend+0x1f0>)
 810a16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a172:	601a      	str	r2, [r3, #0]
 810a174:	f3bf 8f4f 	dsb	sy
 810a178:	f3bf 8f6f 	isb	sy
 810a17c:	e00a      	b.n	810a194 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a180:	2b00      	cmp	r3, #0
 810a182:	d007      	beq.n	810a194 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810a184:	4b39      	ldr	r3, [pc, #228]	; (810a26c <xQueueGenericSend+0x1f0>)
 810a186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a18a:	601a      	str	r2, [r3, #0]
 810a18c:	f3bf 8f4f 	dsb	sy
 810a190:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810a194:	f7ff fd58 	bl	8109c48 <vPortExitCritical>
				return pdPASS;
 810a198:	2301      	movs	r3, #1
 810a19a:	e063      	b.n	810a264 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810a19c:	687b      	ldr	r3, [r7, #4]
 810a19e:	2b00      	cmp	r3, #0
 810a1a0:	d103      	bne.n	810a1aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810a1a2:	f7ff fd51 	bl	8109c48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810a1a6:	2300      	movs	r3, #0
 810a1a8:	e05c      	b.n	810a264 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a1ac:	2b00      	cmp	r3, #0
 810a1ae:	d106      	bne.n	810a1be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810a1b0:	f107 0314 	add.w	r3, r7, #20
 810a1b4:	4618      	mov	r0, r3
 810a1b6:	f000 ff57 	bl	810b068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810a1ba:	2301      	movs	r3, #1
 810a1bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810a1be:	f7ff fd43 	bl	8109c48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810a1c2:	f000 fd0f 	bl	810abe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810a1c6:	f7ff fd11 	bl	8109bec <vPortEnterCritical>
 810a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a1cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a1d0:	b25b      	sxtb	r3, r3
 810a1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a1d6:	d103      	bne.n	810a1e0 <xQueueGenericSend+0x164>
 810a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a1da:	2200      	movs	r2, #0
 810a1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a1e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a1e6:	b25b      	sxtb	r3, r3
 810a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a1ec:	d103      	bne.n	810a1f6 <xQueueGenericSend+0x17a>
 810a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a1f0:	2200      	movs	r2, #0
 810a1f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a1f6:	f7ff fd27 	bl	8109c48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810a1fa:	1d3a      	adds	r2, r7, #4
 810a1fc:	f107 0314 	add.w	r3, r7, #20
 810a200:	4611      	mov	r1, r2
 810a202:	4618      	mov	r0, r3
 810a204:	f000 ff46 	bl	810b094 <xTaskCheckForTimeOut>
 810a208:	4603      	mov	r3, r0
 810a20a:	2b00      	cmp	r3, #0
 810a20c:	d124      	bne.n	810a258 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810a20e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a210:	f000 fa20 	bl	810a654 <prvIsQueueFull>
 810a214:	4603      	mov	r3, r0
 810a216:	2b00      	cmp	r3, #0
 810a218:	d018      	beq.n	810a24c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a21c:	3310      	adds	r3, #16
 810a21e:	687a      	ldr	r2, [r7, #4]
 810a220:	4611      	mov	r1, r2
 810a222:	4618      	mov	r0, r3
 810a224:	f000 fe9a 	bl	810af5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810a228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a22a:	f000 f9ab 	bl	810a584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810a22e:	f000 fce7 	bl	810ac00 <xTaskResumeAll>
 810a232:	4603      	mov	r3, r0
 810a234:	2b00      	cmp	r3, #0
 810a236:	f47f af7c 	bne.w	810a132 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 810a23a:	4b0c      	ldr	r3, [pc, #48]	; (810a26c <xQueueGenericSend+0x1f0>)
 810a23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a240:	601a      	str	r2, [r3, #0]
 810a242:	f3bf 8f4f 	dsb	sy
 810a246:	f3bf 8f6f 	isb	sy
 810a24a:	e772      	b.n	810a132 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810a24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a24e:	f000 f999 	bl	810a584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810a252:	f000 fcd5 	bl	810ac00 <xTaskResumeAll>
 810a256:	e76c      	b.n	810a132 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810a258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a25a:	f000 f993 	bl	810a584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810a25e:	f000 fccf 	bl	810ac00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810a262:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810a264:	4618      	mov	r0, r3
 810a266:	3738      	adds	r7, #56	; 0x38
 810a268:	46bd      	mov	sp, r7
 810a26a:	bd80      	pop	{r7, pc}
 810a26c:	e000ed04 	.word	0xe000ed04

0810a270 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810a270:	b580      	push	{r7, lr}
 810a272:	b08e      	sub	sp, #56	; 0x38
 810a274:	af00      	add	r7, sp, #0
 810a276:	6078      	str	r0, [r7, #4]
 810a278:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810a27a:	2300      	movs	r3, #0
 810a27c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810a282:	2300      	movs	r3, #0
 810a284:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a288:	2b00      	cmp	r3, #0
 810a28a:	d109      	bne.n	810a2a0 <xQueueSemaphoreTake+0x30>
 810a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a290:	f383 8811 	msr	BASEPRI, r3
 810a294:	f3bf 8f6f 	isb	sy
 810a298:	f3bf 8f4f 	dsb	sy
 810a29c:	623b      	str	r3, [r7, #32]
 810a29e:	e7fe      	b.n	810a29e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a2a4:	2b00      	cmp	r3, #0
 810a2a6:	d009      	beq.n	810a2bc <xQueueSemaphoreTake+0x4c>
 810a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a2ac:	f383 8811 	msr	BASEPRI, r3
 810a2b0:	f3bf 8f6f 	isb	sy
 810a2b4:	f3bf 8f4f 	dsb	sy
 810a2b8:	61fb      	str	r3, [r7, #28]
 810a2ba:	e7fe      	b.n	810a2ba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810a2bc:	f001 f828 	bl	810b310 <xTaskGetSchedulerState>
 810a2c0:	4603      	mov	r3, r0
 810a2c2:	2b00      	cmp	r3, #0
 810a2c4:	d102      	bne.n	810a2cc <xQueueSemaphoreTake+0x5c>
 810a2c6:	683b      	ldr	r3, [r7, #0]
 810a2c8:	2b00      	cmp	r3, #0
 810a2ca:	d101      	bne.n	810a2d0 <xQueueSemaphoreTake+0x60>
 810a2cc:	2301      	movs	r3, #1
 810a2ce:	e000      	b.n	810a2d2 <xQueueSemaphoreTake+0x62>
 810a2d0:	2300      	movs	r3, #0
 810a2d2:	2b00      	cmp	r3, #0
 810a2d4:	d109      	bne.n	810a2ea <xQueueSemaphoreTake+0x7a>
 810a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a2da:	f383 8811 	msr	BASEPRI, r3
 810a2de:	f3bf 8f6f 	isb	sy
 810a2e2:	f3bf 8f4f 	dsb	sy
 810a2e6:	61bb      	str	r3, [r7, #24]
 810a2e8:	e7fe      	b.n	810a2e8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810a2ea:	f7ff fc7f 	bl	8109bec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a2f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a2f6:	2b00      	cmp	r3, #0
 810a2f8:	d024      	beq.n	810a344 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a2fc:	1e5a      	subs	r2, r3, #1
 810a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a300:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a304:	681b      	ldr	r3, [r3, #0]
 810a306:	2b00      	cmp	r3, #0
 810a308:	d104      	bne.n	810a314 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810a30a:	f001 f9bb 	bl	810b684 <pvTaskIncrementMutexHeldCount>
 810a30e:	4602      	mov	r2, r0
 810a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a312:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a316:	691b      	ldr	r3, [r3, #16]
 810a318:	2b00      	cmp	r3, #0
 810a31a:	d00f      	beq.n	810a33c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a31e:	3310      	adds	r3, #16
 810a320:	4618      	mov	r0, r3
 810a322:	f000 fe3f 	bl	810afa4 <xTaskRemoveFromEventList>
 810a326:	4603      	mov	r3, r0
 810a328:	2b00      	cmp	r3, #0
 810a32a:	d007      	beq.n	810a33c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810a32c:	4b53      	ldr	r3, [pc, #332]	; (810a47c <xQueueSemaphoreTake+0x20c>)
 810a32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a332:	601a      	str	r2, [r3, #0]
 810a334:	f3bf 8f4f 	dsb	sy
 810a338:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810a33c:	f7ff fc84 	bl	8109c48 <vPortExitCritical>
				return pdPASS;
 810a340:	2301      	movs	r3, #1
 810a342:	e096      	b.n	810a472 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810a344:	683b      	ldr	r3, [r7, #0]
 810a346:	2b00      	cmp	r3, #0
 810a348:	d110      	bne.n	810a36c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a34c:	2b00      	cmp	r3, #0
 810a34e:	d009      	beq.n	810a364 <xQueueSemaphoreTake+0xf4>
 810a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a354:	f383 8811 	msr	BASEPRI, r3
 810a358:	f3bf 8f6f 	isb	sy
 810a35c:	f3bf 8f4f 	dsb	sy
 810a360:	617b      	str	r3, [r7, #20]
 810a362:	e7fe      	b.n	810a362 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810a364:	f7ff fc70 	bl	8109c48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810a368:	2300      	movs	r3, #0
 810a36a:	e082      	b.n	810a472 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 810a36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a36e:	2b00      	cmp	r3, #0
 810a370:	d106      	bne.n	810a380 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810a372:	f107 030c 	add.w	r3, r7, #12
 810a376:	4618      	mov	r0, r3
 810a378:	f000 fe76 	bl	810b068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810a37c:	2301      	movs	r3, #1
 810a37e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810a380:	f7ff fc62 	bl	8109c48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810a384:	f000 fc2e 	bl	810abe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810a388:	f7ff fc30 	bl	8109bec <vPortEnterCritical>
 810a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a38e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a392:	b25b      	sxtb	r3, r3
 810a394:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a398:	d103      	bne.n	810a3a2 <xQueueSemaphoreTake+0x132>
 810a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a39c:	2200      	movs	r2, #0
 810a39e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a3a8:	b25b      	sxtb	r3, r3
 810a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a3ae:	d103      	bne.n	810a3b8 <xQueueSemaphoreTake+0x148>
 810a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3b2:	2200      	movs	r2, #0
 810a3b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a3b8:	f7ff fc46 	bl	8109c48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810a3bc:	463a      	mov	r2, r7
 810a3be:	f107 030c 	add.w	r3, r7, #12
 810a3c2:	4611      	mov	r1, r2
 810a3c4:	4618      	mov	r0, r3
 810a3c6:	f000 fe65 	bl	810b094 <xTaskCheckForTimeOut>
 810a3ca:	4603      	mov	r3, r0
 810a3cc:	2b00      	cmp	r3, #0
 810a3ce:	d132      	bne.n	810a436 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810a3d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a3d2:	f000 f929 	bl	810a628 <prvIsQueueEmpty>
 810a3d6:	4603      	mov	r3, r0
 810a3d8:	2b00      	cmp	r3, #0
 810a3da:	d026      	beq.n	810a42a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3de:	681b      	ldr	r3, [r3, #0]
 810a3e0:	2b00      	cmp	r3, #0
 810a3e2:	d109      	bne.n	810a3f8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 810a3e4:	f7ff fc02 	bl	8109bec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3ea:	689b      	ldr	r3, [r3, #8]
 810a3ec:	4618      	mov	r0, r3
 810a3ee:	f000 ffad 	bl	810b34c <xTaskPriorityInherit>
 810a3f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 810a3f4:	f7ff fc28 	bl	8109c48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810a3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3fa:	3324      	adds	r3, #36	; 0x24
 810a3fc:	683a      	ldr	r2, [r7, #0]
 810a3fe:	4611      	mov	r1, r2
 810a400:	4618      	mov	r0, r3
 810a402:	f000 fdab 	bl	810af5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810a406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a408:	f000 f8bc 	bl	810a584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810a40c:	f000 fbf8 	bl	810ac00 <xTaskResumeAll>
 810a410:	4603      	mov	r3, r0
 810a412:	2b00      	cmp	r3, #0
 810a414:	f47f af69 	bne.w	810a2ea <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 810a418:	4b18      	ldr	r3, [pc, #96]	; (810a47c <xQueueSemaphoreTake+0x20c>)
 810a41a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a41e:	601a      	str	r2, [r3, #0]
 810a420:	f3bf 8f4f 	dsb	sy
 810a424:	f3bf 8f6f 	isb	sy
 810a428:	e75f      	b.n	810a2ea <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810a42a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a42c:	f000 f8aa 	bl	810a584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810a430:	f000 fbe6 	bl	810ac00 <xTaskResumeAll>
 810a434:	e759      	b.n	810a2ea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810a436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a438:	f000 f8a4 	bl	810a584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810a43c:	f000 fbe0 	bl	810ac00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810a440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a442:	f000 f8f1 	bl	810a628 <prvIsQueueEmpty>
 810a446:	4603      	mov	r3, r0
 810a448:	2b00      	cmp	r3, #0
 810a44a:	f43f af4e 	beq.w	810a2ea <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a450:	2b00      	cmp	r3, #0
 810a452:	d00d      	beq.n	810a470 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 810a454:	f7ff fbca 	bl	8109bec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810a458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810a45a:	f000 f811 	bl	810a480 <prvGetDisinheritPriorityAfterTimeout>
 810a45e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a462:	689b      	ldr	r3, [r3, #8]
 810a464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810a466:	4618      	mov	r0, r3
 810a468:	f001 f874 	bl	810b554 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810a46c:	f7ff fbec 	bl	8109c48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810a470:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810a472:	4618      	mov	r0, r3
 810a474:	3738      	adds	r7, #56	; 0x38
 810a476:	46bd      	mov	sp, r7
 810a478:	bd80      	pop	{r7, pc}
 810a47a:	bf00      	nop
 810a47c:	e000ed04 	.word	0xe000ed04

0810a480 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810a480:	b480      	push	{r7}
 810a482:	b085      	sub	sp, #20
 810a484:	af00      	add	r7, sp, #0
 810a486:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810a488:	687b      	ldr	r3, [r7, #4]
 810a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a48c:	2b00      	cmp	r3, #0
 810a48e:	d006      	beq.n	810a49e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810a490:	687b      	ldr	r3, [r7, #4]
 810a492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a494:	681b      	ldr	r3, [r3, #0]
 810a496:	f1c3 0307 	rsb	r3, r3, #7
 810a49a:	60fb      	str	r3, [r7, #12]
 810a49c:	e001      	b.n	810a4a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810a49e:	2300      	movs	r3, #0
 810a4a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810a4a2:	68fb      	ldr	r3, [r7, #12]
	}
 810a4a4:	4618      	mov	r0, r3
 810a4a6:	3714      	adds	r7, #20
 810a4a8:	46bd      	mov	sp, r7
 810a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4ae:	4770      	bx	lr

0810a4b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810a4b0:	b580      	push	{r7, lr}
 810a4b2:	b086      	sub	sp, #24
 810a4b4:	af00      	add	r7, sp, #0
 810a4b6:	60f8      	str	r0, [r7, #12]
 810a4b8:	60b9      	str	r1, [r7, #8]
 810a4ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810a4bc:	2300      	movs	r3, #0
 810a4be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a4c0:	68fb      	ldr	r3, [r7, #12]
 810a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a4c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810a4c6:	68fb      	ldr	r3, [r7, #12]
 810a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4ca:	2b00      	cmp	r3, #0
 810a4cc:	d10d      	bne.n	810a4ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810a4ce:	68fb      	ldr	r3, [r7, #12]
 810a4d0:	681b      	ldr	r3, [r3, #0]
 810a4d2:	2b00      	cmp	r3, #0
 810a4d4:	d14d      	bne.n	810a572 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810a4d6:	68fb      	ldr	r3, [r7, #12]
 810a4d8:	689b      	ldr	r3, [r3, #8]
 810a4da:	4618      	mov	r0, r3
 810a4dc:	f000 ffb6 	bl	810b44c <xTaskPriorityDisinherit>
 810a4e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810a4e2:	68fb      	ldr	r3, [r7, #12]
 810a4e4:	2200      	movs	r2, #0
 810a4e6:	609a      	str	r2, [r3, #8]
 810a4e8:	e043      	b.n	810a572 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810a4ea:	687b      	ldr	r3, [r7, #4]
 810a4ec:	2b00      	cmp	r3, #0
 810a4ee:	d119      	bne.n	810a524 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810a4f0:	68fb      	ldr	r3, [r7, #12]
 810a4f2:	6858      	ldr	r0, [r3, #4]
 810a4f4:	68fb      	ldr	r3, [r7, #12]
 810a4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4f8:	461a      	mov	r2, r3
 810a4fa:	68b9      	ldr	r1, [r7, #8]
 810a4fc:	f007 fd7a 	bl	8111ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810a500:	68fb      	ldr	r3, [r7, #12]
 810a502:	685a      	ldr	r2, [r3, #4]
 810a504:	68fb      	ldr	r3, [r7, #12]
 810a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a508:	441a      	add	r2, r3
 810a50a:	68fb      	ldr	r3, [r7, #12]
 810a50c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a50e:	68fb      	ldr	r3, [r7, #12]
 810a510:	685a      	ldr	r2, [r3, #4]
 810a512:	68fb      	ldr	r3, [r7, #12]
 810a514:	689b      	ldr	r3, [r3, #8]
 810a516:	429a      	cmp	r2, r3
 810a518:	d32b      	bcc.n	810a572 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810a51a:	68fb      	ldr	r3, [r7, #12]
 810a51c:	681a      	ldr	r2, [r3, #0]
 810a51e:	68fb      	ldr	r3, [r7, #12]
 810a520:	605a      	str	r2, [r3, #4]
 810a522:	e026      	b.n	810a572 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810a524:	68fb      	ldr	r3, [r7, #12]
 810a526:	68d8      	ldr	r0, [r3, #12]
 810a528:	68fb      	ldr	r3, [r7, #12]
 810a52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a52c:	461a      	mov	r2, r3
 810a52e:	68b9      	ldr	r1, [r7, #8]
 810a530:	f007 fd60 	bl	8111ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810a534:	68fb      	ldr	r3, [r7, #12]
 810a536:	68da      	ldr	r2, [r3, #12]
 810a538:	68fb      	ldr	r3, [r7, #12]
 810a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a53c:	425b      	negs	r3, r3
 810a53e:	441a      	add	r2, r3
 810a540:	68fb      	ldr	r3, [r7, #12]
 810a542:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a544:	68fb      	ldr	r3, [r7, #12]
 810a546:	68da      	ldr	r2, [r3, #12]
 810a548:	68fb      	ldr	r3, [r7, #12]
 810a54a:	681b      	ldr	r3, [r3, #0]
 810a54c:	429a      	cmp	r2, r3
 810a54e:	d207      	bcs.n	810a560 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810a550:	68fb      	ldr	r3, [r7, #12]
 810a552:	689a      	ldr	r2, [r3, #8]
 810a554:	68fb      	ldr	r3, [r7, #12]
 810a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a558:	425b      	negs	r3, r3
 810a55a:	441a      	add	r2, r3
 810a55c:	68fb      	ldr	r3, [r7, #12]
 810a55e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810a560:	687b      	ldr	r3, [r7, #4]
 810a562:	2b02      	cmp	r3, #2
 810a564:	d105      	bne.n	810a572 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a566:	693b      	ldr	r3, [r7, #16]
 810a568:	2b00      	cmp	r3, #0
 810a56a:	d002      	beq.n	810a572 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810a56c:	693b      	ldr	r3, [r7, #16]
 810a56e:	3b01      	subs	r3, #1
 810a570:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810a572:	693b      	ldr	r3, [r7, #16]
 810a574:	1c5a      	adds	r2, r3, #1
 810a576:	68fb      	ldr	r3, [r7, #12]
 810a578:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810a57a:	697b      	ldr	r3, [r7, #20]
}
 810a57c:	4618      	mov	r0, r3
 810a57e:	3718      	adds	r7, #24
 810a580:	46bd      	mov	sp, r7
 810a582:	bd80      	pop	{r7, pc}

0810a584 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810a584:	b580      	push	{r7, lr}
 810a586:	b084      	sub	sp, #16
 810a588:	af00      	add	r7, sp, #0
 810a58a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810a58c:	f7ff fb2e 	bl	8109bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810a590:	687b      	ldr	r3, [r7, #4]
 810a592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810a598:	e011      	b.n	810a5be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a59e:	2b00      	cmp	r3, #0
 810a5a0:	d012      	beq.n	810a5c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a5a2:	687b      	ldr	r3, [r7, #4]
 810a5a4:	3324      	adds	r3, #36	; 0x24
 810a5a6:	4618      	mov	r0, r3
 810a5a8:	f000 fcfc 	bl	810afa4 <xTaskRemoveFromEventList>
 810a5ac:	4603      	mov	r3, r0
 810a5ae:	2b00      	cmp	r3, #0
 810a5b0:	d001      	beq.n	810a5b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810a5b2:	f000 fdcf 	bl	810b154 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810a5b6:	7bfb      	ldrb	r3, [r7, #15]
 810a5b8:	3b01      	subs	r3, #1
 810a5ba:	b2db      	uxtb	r3, r3
 810a5bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810a5be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810a5c2:	2b00      	cmp	r3, #0
 810a5c4:	dce9      	bgt.n	810a59a <prvUnlockQueue+0x16>
 810a5c6:	e000      	b.n	810a5ca <prvUnlockQueue+0x46>
					break;
 810a5c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810a5ca:	687b      	ldr	r3, [r7, #4]
 810a5cc:	22ff      	movs	r2, #255	; 0xff
 810a5ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810a5d2:	f7ff fb39 	bl	8109c48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810a5d6:	f7ff fb09 	bl	8109bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810a5da:	687b      	ldr	r3, [r7, #4]
 810a5dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a5e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810a5e2:	e011      	b.n	810a608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	691b      	ldr	r3, [r3, #16]
 810a5e8:	2b00      	cmp	r3, #0
 810a5ea:	d012      	beq.n	810a612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a5ec:	687b      	ldr	r3, [r7, #4]
 810a5ee:	3310      	adds	r3, #16
 810a5f0:	4618      	mov	r0, r3
 810a5f2:	f000 fcd7 	bl	810afa4 <xTaskRemoveFromEventList>
 810a5f6:	4603      	mov	r3, r0
 810a5f8:	2b00      	cmp	r3, #0
 810a5fa:	d001      	beq.n	810a600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810a5fc:	f000 fdaa 	bl	810b154 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810a600:	7bbb      	ldrb	r3, [r7, #14]
 810a602:	3b01      	subs	r3, #1
 810a604:	b2db      	uxtb	r3, r3
 810a606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810a608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810a60c:	2b00      	cmp	r3, #0
 810a60e:	dce9      	bgt.n	810a5e4 <prvUnlockQueue+0x60>
 810a610:	e000      	b.n	810a614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810a612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810a614:	687b      	ldr	r3, [r7, #4]
 810a616:	22ff      	movs	r2, #255	; 0xff
 810a618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810a61c:	f7ff fb14 	bl	8109c48 <vPortExitCritical>
}
 810a620:	bf00      	nop
 810a622:	3710      	adds	r7, #16
 810a624:	46bd      	mov	sp, r7
 810a626:	bd80      	pop	{r7, pc}

0810a628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810a628:	b580      	push	{r7, lr}
 810a62a:	b084      	sub	sp, #16
 810a62c:	af00      	add	r7, sp, #0
 810a62e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810a630:	f7ff fadc 	bl	8109bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810a634:	687b      	ldr	r3, [r7, #4]
 810a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a638:	2b00      	cmp	r3, #0
 810a63a:	d102      	bne.n	810a642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810a63c:	2301      	movs	r3, #1
 810a63e:	60fb      	str	r3, [r7, #12]
 810a640:	e001      	b.n	810a646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810a642:	2300      	movs	r3, #0
 810a644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810a646:	f7ff faff 	bl	8109c48 <vPortExitCritical>

	return xReturn;
 810a64a:	68fb      	ldr	r3, [r7, #12]
}
 810a64c:	4618      	mov	r0, r3
 810a64e:	3710      	adds	r7, #16
 810a650:	46bd      	mov	sp, r7
 810a652:	bd80      	pop	{r7, pc}

0810a654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810a654:	b580      	push	{r7, lr}
 810a656:	b084      	sub	sp, #16
 810a658:	af00      	add	r7, sp, #0
 810a65a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810a65c:	f7ff fac6 	bl	8109bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810a660:	687b      	ldr	r3, [r7, #4]
 810a662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a664:	687b      	ldr	r3, [r7, #4]
 810a666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a668:	429a      	cmp	r2, r3
 810a66a:	d102      	bne.n	810a672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810a66c:	2301      	movs	r3, #1
 810a66e:	60fb      	str	r3, [r7, #12]
 810a670:	e001      	b.n	810a676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810a672:	2300      	movs	r3, #0
 810a674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810a676:	f7ff fae7 	bl	8109c48 <vPortExitCritical>

	return xReturn;
 810a67a:	68fb      	ldr	r3, [r7, #12]
}
 810a67c:	4618      	mov	r0, r3
 810a67e:	3710      	adds	r7, #16
 810a680:	46bd      	mov	sp, r7
 810a682:	bd80      	pop	{r7, pc}

0810a684 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810a684:	b580      	push	{r7, lr}
 810a686:	b08e      	sub	sp, #56	; 0x38
 810a688:	af04      	add	r7, sp, #16
 810a68a:	60f8      	str	r0, [r7, #12]
 810a68c:	60b9      	str	r1, [r7, #8]
 810a68e:	607a      	str	r2, [r7, #4]
 810a690:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810a692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a694:	2b00      	cmp	r3, #0
 810a696:	d109      	bne.n	810a6ac <xTaskCreateStatic+0x28>
 810a698:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a69c:	f383 8811 	msr	BASEPRI, r3
 810a6a0:	f3bf 8f6f 	isb	sy
 810a6a4:	f3bf 8f4f 	dsb	sy
 810a6a8:	623b      	str	r3, [r7, #32]
 810a6aa:	e7fe      	b.n	810a6aa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 810a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a6ae:	2b00      	cmp	r3, #0
 810a6b0:	d109      	bne.n	810a6c6 <xTaskCreateStatic+0x42>
 810a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a6b6:	f383 8811 	msr	BASEPRI, r3
 810a6ba:	f3bf 8f6f 	isb	sy
 810a6be:	f3bf 8f4f 	dsb	sy
 810a6c2:	61fb      	str	r3, [r7, #28]
 810a6c4:	e7fe      	b.n	810a6c4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810a6c6:	2354      	movs	r3, #84	; 0x54
 810a6c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810a6ca:	693b      	ldr	r3, [r7, #16]
 810a6cc:	2b54      	cmp	r3, #84	; 0x54
 810a6ce:	d009      	beq.n	810a6e4 <xTaskCreateStatic+0x60>
 810a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a6d4:	f383 8811 	msr	BASEPRI, r3
 810a6d8:	f3bf 8f6f 	isb	sy
 810a6dc:	f3bf 8f4f 	dsb	sy
 810a6e0:	61bb      	str	r3, [r7, #24]
 810a6e2:	e7fe      	b.n	810a6e2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810a6e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a6e8:	2b00      	cmp	r3, #0
 810a6ea:	d01e      	beq.n	810a72a <xTaskCreateStatic+0xa6>
 810a6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a6ee:	2b00      	cmp	r3, #0
 810a6f0:	d01b      	beq.n	810a72a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a6f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a6fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a6fe:	2202      	movs	r2, #2
 810a700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810a704:	2300      	movs	r3, #0
 810a706:	9303      	str	r3, [sp, #12]
 810a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a70a:	9302      	str	r3, [sp, #8]
 810a70c:	f107 0314 	add.w	r3, r7, #20
 810a710:	9301      	str	r3, [sp, #4]
 810a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a714:	9300      	str	r3, [sp, #0]
 810a716:	683b      	ldr	r3, [r7, #0]
 810a718:	687a      	ldr	r2, [r7, #4]
 810a71a:	68b9      	ldr	r1, [r7, #8]
 810a71c:	68f8      	ldr	r0, [r7, #12]
 810a71e:	f000 f850 	bl	810a7c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810a724:	f000 f8d4 	bl	810a8d0 <prvAddNewTaskToReadyList>
 810a728:	e001      	b.n	810a72e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810a72a:	2300      	movs	r3, #0
 810a72c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810a72e:	697b      	ldr	r3, [r7, #20]
	}
 810a730:	4618      	mov	r0, r3
 810a732:	3728      	adds	r7, #40	; 0x28
 810a734:	46bd      	mov	sp, r7
 810a736:	bd80      	pop	{r7, pc}

0810a738 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810a738:	b580      	push	{r7, lr}
 810a73a:	b08c      	sub	sp, #48	; 0x30
 810a73c:	af04      	add	r7, sp, #16
 810a73e:	60f8      	str	r0, [r7, #12]
 810a740:	60b9      	str	r1, [r7, #8]
 810a742:	603b      	str	r3, [r7, #0]
 810a744:	4613      	mov	r3, r2
 810a746:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810a748:	88fb      	ldrh	r3, [r7, #6]
 810a74a:	009b      	lsls	r3, r3, #2
 810a74c:	4618      	mov	r0, r3
 810a74e:	f7fe fe9d 	bl	810948c <pvPortMalloc>
 810a752:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810a754:	697b      	ldr	r3, [r7, #20]
 810a756:	2b00      	cmp	r3, #0
 810a758:	d00e      	beq.n	810a778 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810a75a:	2054      	movs	r0, #84	; 0x54
 810a75c:	f7fe fe96 	bl	810948c <pvPortMalloc>
 810a760:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810a762:	69fb      	ldr	r3, [r7, #28]
 810a764:	2b00      	cmp	r3, #0
 810a766:	d003      	beq.n	810a770 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810a768:	69fb      	ldr	r3, [r7, #28]
 810a76a:	697a      	ldr	r2, [r7, #20]
 810a76c:	631a      	str	r2, [r3, #48]	; 0x30
 810a76e:	e005      	b.n	810a77c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810a770:	6978      	ldr	r0, [r7, #20]
 810a772:	f7fe ff4d 	bl	8109610 <vPortFree>
 810a776:	e001      	b.n	810a77c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810a778:	2300      	movs	r3, #0
 810a77a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810a77c:	69fb      	ldr	r3, [r7, #28]
 810a77e:	2b00      	cmp	r3, #0
 810a780:	d017      	beq.n	810a7b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810a782:	69fb      	ldr	r3, [r7, #28]
 810a784:	2200      	movs	r2, #0
 810a786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810a78a:	88fa      	ldrh	r2, [r7, #6]
 810a78c:	2300      	movs	r3, #0
 810a78e:	9303      	str	r3, [sp, #12]
 810a790:	69fb      	ldr	r3, [r7, #28]
 810a792:	9302      	str	r3, [sp, #8]
 810a794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a796:	9301      	str	r3, [sp, #4]
 810a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a79a:	9300      	str	r3, [sp, #0]
 810a79c:	683b      	ldr	r3, [r7, #0]
 810a79e:	68b9      	ldr	r1, [r7, #8]
 810a7a0:	68f8      	ldr	r0, [r7, #12]
 810a7a2:	f000 f80e 	bl	810a7c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a7a6:	69f8      	ldr	r0, [r7, #28]
 810a7a8:	f000 f892 	bl	810a8d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810a7ac:	2301      	movs	r3, #1
 810a7ae:	61bb      	str	r3, [r7, #24]
 810a7b0:	e002      	b.n	810a7b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810a7b2:	f04f 33ff 	mov.w	r3, #4294967295
 810a7b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810a7b8:	69bb      	ldr	r3, [r7, #24]
	}
 810a7ba:	4618      	mov	r0, r3
 810a7bc:	3720      	adds	r7, #32
 810a7be:	46bd      	mov	sp, r7
 810a7c0:	bd80      	pop	{r7, pc}

0810a7c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810a7c2:	b580      	push	{r7, lr}
 810a7c4:	b088      	sub	sp, #32
 810a7c6:	af00      	add	r7, sp, #0
 810a7c8:	60f8      	str	r0, [r7, #12]
 810a7ca:	60b9      	str	r1, [r7, #8]
 810a7cc:	607a      	str	r2, [r7, #4]
 810a7ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a7d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a7d4:	687b      	ldr	r3, [r7, #4]
 810a7d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810a7da:	3b01      	subs	r3, #1
 810a7dc:	009b      	lsls	r3, r3, #2
 810a7de:	4413      	add	r3, r2
 810a7e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810a7e2:	69bb      	ldr	r3, [r7, #24]
 810a7e4:	f023 0307 	bic.w	r3, r3, #7
 810a7e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810a7ea:	69bb      	ldr	r3, [r7, #24]
 810a7ec:	f003 0307 	and.w	r3, r3, #7
 810a7f0:	2b00      	cmp	r3, #0
 810a7f2:	d009      	beq.n	810a808 <prvInitialiseNewTask+0x46>
 810a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a7f8:	f383 8811 	msr	BASEPRI, r3
 810a7fc:	f3bf 8f6f 	isb	sy
 810a800:	f3bf 8f4f 	dsb	sy
 810a804:	617b      	str	r3, [r7, #20]
 810a806:	e7fe      	b.n	810a806 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810a808:	68bb      	ldr	r3, [r7, #8]
 810a80a:	2b00      	cmp	r3, #0
 810a80c:	d01f      	beq.n	810a84e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a80e:	2300      	movs	r3, #0
 810a810:	61fb      	str	r3, [r7, #28]
 810a812:	e012      	b.n	810a83a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810a814:	68ba      	ldr	r2, [r7, #8]
 810a816:	69fb      	ldr	r3, [r7, #28]
 810a818:	4413      	add	r3, r2
 810a81a:	7819      	ldrb	r1, [r3, #0]
 810a81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a81e:	69fb      	ldr	r3, [r7, #28]
 810a820:	4413      	add	r3, r2
 810a822:	3334      	adds	r3, #52	; 0x34
 810a824:	460a      	mov	r2, r1
 810a826:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810a828:	68ba      	ldr	r2, [r7, #8]
 810a82a:	69fb      	ldr	r3, [r7, #28]
 810a82c:	4413      	add	r3, r2
 810a82e:	781b      	ldrb	r3, [r3, #0]
 810a830:	2b00      	cmp	r3, #0
 810a832:	d006      	beq.n	810a842 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a834:	69fb      	ldr	r3, [r7, #28]
 810a836:	3301      	adds	r3, #1
 810a838:	61fb      	str	r3, [r7, #28]
 810a83a:	69fb      	ldr	r3, [r7, #28]
 810a83c:	2b0f      	cmp	r3, #15
 810a83e:	d9e9      	bls.n	810a814 <prvInitialiseNewTask+0x52>
 810a840:	e000      	b.n	810a844 <prvInitialiseNewTask+0x82>
			{
				break;
 810a842:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a846:	2200      	movs	r2, #0
 810a848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810a84c:	e003      	b.n	810a856 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a850:	2200      	movs	r2, #0
 810a852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a858:	2b06      	cmp	r3, #6
 810a85a:	d901      	bls.n	810a860 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810a85c:	2306      	movs	r3, #6
 810a85e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a864:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a86a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 810a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a86e:	2200      	movs	r2, #0
 810a870:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a874:	3304      	adds	r3, #4
 810a876:	4618      	mov	r0, r3
 810a878:	f7fe fffe 	bl	8109878 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a87e:	3318      	adds	r3, #24
 810a880:	4618      	mov	r0, r3
 810a882:	f7fe fff9 	bl	8109878 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a88a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a88e:	f1c3 0207 	rsb	r2, r3, #7
 810a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a894:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a89a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a89e:	2200      	movs	r2, #0
 810a8a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a8a4:	2200      	movs	r2, #0
 810a8a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810a8aa:	683a      	ldr	r2, [r7, #0]
 810a8ac:	68f9      	ldr	r1, [r7, #12]
 810a8ae:	69b8      	ldr	r0, [r7, #24]
 810a8b0:	f7ff f876 	bl	81099a0 <pxPortInitialiseStack>
 810a8b4:	4602      	mov	r2, r0
 810a8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a8b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a8bc:	2b00      	cmp	r3, #0
 810a8be:	d002      	beq.n	810a8c6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a8c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a8c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a8c6:	bf00      	nop
 810a8c8:	3720      	adds	r7, #32
 810a8ca:	46bd      	mov	sp, r7
 810a8cc:	bd80      	pop	{r7, pc}
	...

0810a8d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810a8d0:	b580      	push	{r7, lr}
 810a8d2:	b082      	sub	sp, #8
 810a8d4:	af00      	add	r7, sp, #0
 810a8d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810a8d8:	f7ff f988 	bl	8109bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810a8dc:	4b2a      	ldr	r3, [pc, #168]	; (810a988 <prvAddNewTaskToReadyList+0xb8>)
 810a8de:	681b      	ldr	r3, [r3, #0]
 810a8e0:	3301      	adds	r3, #1
 810a8e2:	4a29      	ldr	r2, [pc, #164]	; (810a988 <prvAddNewTaskToReadyList+0xb8>)
 810a8e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810a8e6:	4b29      	ldr	r3, [pc, #164]	; (810a98c <prvAddNewTaskToReadyList+0xbc>)
 810a8e8:	681b      	ldr	r3, [r3, #0]
 810a8ea:	2b00      	cmp	r3, #0
 810a8ec:	d109      	bne.n	810a902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810a8ee:	4a27      	ldr	r2, [pc, #156]	; (810a98c <prvAddNewTaskToReadyList+0xbc>)
 810a8f0:	687b      	ldr	r3, [r7, #4]
 810a8f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810a8f4:	4b24      	ldr	r3, [pc, #144]	; (810a988 <prvAddNewTaskToReadyList+0xb8>)
 810a8f6:	681b      	ldr	r3, [r3, #0]
 810a8f8:	2b01      	cmp	r3, #1
 810a8fa:	d110      	bne.n	810a91e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810a8fc:	f000 fc4e 	bl	810b19c <prvInitialiseTaskLists>
 810a900:	e00d      	b.n	810a91e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810a902:	4b23      	ldr	r3, [pc, #140]	; (810a990 <prvAddNewTaskToReadyList+0xc0>)
 810a904:	681b      	ldr	r3, [r3, #0]
 810a906:	2b00      	cmp	r3, #0
 810a908:	d109      	bne.n	810a91e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810a90a:	4b20      	ldr	r3, [pc, #128]	; (810a98c <prvAddNewTaskToReadyList+0xbc>)
 810a90c:	681b      	ldr	r3, [r3, #0]
 810a90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a910:	687b      	ldr	r3, [r7, #4]
 810a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a914:	429a      	cmp	r2, r3
 810a916:	d802      	bhi.n	810a91e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810a918:	4a1c      	ldr	r2, [pc, #112]	; (810a98c <prvAddNewTaskToReadyList+0xbc>)
 810a91a:	687b      	ldr	r3, [r7, #4]
 810a91c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810a91e:	4b1d      	ldr	r3, [pc, #116]	; (810a994 <prvAddNewTaskToReadyList+0xc4>)
 810a920:	681b      	ldr	r3, [r3, #0]
 810a922:	3301      	adds	r3, #1
 810a924:	4a1b      	ldr	r2, [pc, #108]	; (810a994 <prvAddNewTaskToReadyList+0xc4>)
 810a926:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810a928:	687b      	ldr	r3, [r7, #4]
 810a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a92c:	2201      	movs	r2, #1
 810a92e:	409a      	lsls	r2, r3
 810a930:	4b19      	ldr	r3, [pc, #100]	; (810a998 <prvAddNewTaskToReadyList+0xc8>)
 810a932:	681b      	ldr	r3, [r3, #0]
 810a934:	4313      	orrs	r3, r2
 810a936:	4a18      	ldr	r2, [pc, #96]	; (810a998 <prvAddNewTaskToReadyList+0xc8>)
 810a938:	6013      	str	r3, [r2, #0]
 810a93a:	687b      	ldr	r3, [r7, #4]
 810a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a93e:	4613      	mov	r3, r2
 810a940:	009b      	lsls	r3, r3, #2
 810a942:	4413      	add	r3, r2
 810a944:	009b      	lsls	r3, r3, #2
 810a946:	4a15      	ldr	r2, [pc, #84]	; (810a99c <prvAddNewTaskToReadyList+0xcc>)
 810a948:	441a      	add	r2, r3
 810a94a:	687b      	ldr	r3, [r7, #4]
 810a94c:	3304      	adds	r3, #4
 810a94e:	4619      	mov	r1, r3
 810a950:	4610      	mov	r0, r2
 810a952:	f7fe ff9e 	bl	8109892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810a956:	f7ff f977 	bl	8109c48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810a95a:	4b0d      	ldr	r3, [pc, #52]	; (810a990 <prvAddNewTaskToReadyList+0xc0>)
 810a95c:	681b      	ldr	r3, [r3, #0]
 810a95e:	2b00      	cmp	r3, #0
 810a960:	d00e      	beq.n	810a980 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810a962:	4b0a      	ldr	r3, [pc, #40]	; (810a98c <prvAddNewTaskToReadyList+0xbc>)
 810a964:	681b      	ldr	r3, [r3, #0]
 810a966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a968:	687b      	ldr	r3, [r7, #4]
 810a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a96c:	429a      	cmp	r2, r3
 810a96e:	d207      	bcs.n	810a980 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810a970:	4b0b      	ldr	r3, [pc, #44]	; (810a9a0 <prvAddNewTaskToReadyList+0xd0>)
 810a972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a976:	601a      	str	r2, [r3, #0]
 810a978:	f3bf 8f4f 	dsb	sy
 810a97c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a980:	bf00      	nop
 810a982:	3708      	adds	r7, #8
 810a984:	46bd      	mov	sp, r7
 810a986:	bd80      	pop	{r7, pc}
 810a988:	100085b0 	.word	0x100085b0
 810a98c:	100084b0 	.word	0x100084b0
 810a990:	100085bc 	.word	0x100085bc
 810a994:	100085cc 	.word	0x100085cc
 810a998:	100085b8 	.word	0x100085b8
 810a99c:	100084b4 	.word	0x100084b4
 810a9a0:	e000ed04 	.word	0xe000ed04

0810a9a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 810a9a4:	b580      	push	{r7, lr}
 810a9a6:	b084      	sub	sp, #16
 810a9a8:	af00      	add	r7, sp, #0
 810a9aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 810a9ac:	f7ff f91e 	bl	8109bec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 810a9b0:	687b      	ldr	r3, [r7, #4]
 810a9b2:	2b00      	cmp	r3, #0
 810a9b4:	d102      	bne.n	810a9bc <vTaskDelete+0x18>
 810a9b6:	4b38      	ldr	r3, [pc, #224]	; (810aa98 <vTaskDelete+0xf4>)
 810a9b8:	681b      	ldr	r3, [r3, #0]
 810a9ba:	e000      	b.n	810a9be <vTaskDelete+0x1a>
 810a9bc:	687b      	ldr	r3, [r7, #4]
 810a9be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a9c0:	68fb      	ldr	r3, [r7, #12]
 810a9c2:	3304      	adds	r3, #4
 810a9c4:	4618      	mov	r0, r3
 810a9c6:	f7fe ffc1 	bl	810994c <uxListRemove>
 810a9ca:	4603      	mov	r3, r0
 810a9cc:	2b00      	cmp	r3, #0
 810a9ce:	d115      	bne.n	810a9fc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810a9d0:	68fb      	ldr	r3, [r7, #12]
 810a9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a9d4:	4931      	ldr	r1, [pc, #196]	; (810aa9c <vTaskDelete+0xf8>)
 810a9d6:	4613      	mov	r3, r2
 810a9d8:	009b      	lsls	r3, r3, #2
 810a9da:	4413      	add	r3, r2
 810a9dc:	009b      	lsls	r3, r3, #2
 810a9de:	440b      	add	r3, r1
 810a9e0:	681b      	ldr	r3, [r3, #0]
 810a9e2:	2b00      	cmp	r3, #0
 810a9e4:	d10a      	bne.n	810a9fc <vTaskDelete+0x58>
 810a9e6:	68fb      	ldr	r3, [r7, #12]
 810a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a9ea:	2201      	movs	r2, #1
 810a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 810a9f0:	43da      	mvns	r2, r3
 810a9f2:	4b2b      	ldr	r3, [pc, #172]	; (810aaa0 <vTaskDelete+0xfc>)
 810a9f4:	681b      	ldr	r3, [r3, #0]
 810a9f6:	4013      	ands	r3, r2
 810a9f8:	4a29      	ldr	r2, [pc, #164]	; (810aaa0 <vTaskDelete+0xfc>)
 810a9fa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a9fc:	68fb      	ldr	r3, [r7, #12]
 810a9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa00:	2b00      	cmp	r3, #0
 810aa02:	d004      	beq.n	810aa0e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810aa04:	68fb      	ldr	r3, [r7, #12]
 810aa06:	3318      	adds	r3, #24
 810aa08:	4618      	mov	r0, r3
 810aa0a:	f7fe ff9f 	bl	810994c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 810aa0e:	4b25      	ldr	r3, [pc, #148]	; (810aaa4 <vTaskDelete+0x100>)
 810aa10:	681b      	ldr	r3, [r3, #0]
 810aa12:	3301      	adds	r3, #1
 810aa14:	4a23      	ldr	r2, [pc, #140]	; (810aaa4 <vTaskDelete+0x100>)
 810aa16:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 810aa18:	4b1f      	ldr	r3, [pc, #124]	; (810aa98 <vTaskDelete+0xf4>)
 810aa1a:	681b      	ldr	r3, [r3, #0]
 810aa1c:	68fa      	ldr	r2, [r7, #12]
 810aa1e:	429a      	cmp	r2, r3
 810aa20:	d10b      	bne.n	810aa3a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 810aa22:	68fb      	ldr	r3, [r7, #12]
 810aa24:	3304      	adds	r3, #4
 810aa26:	4619      	mov	r1, r3
 810aa28:	481f      	ldr	r0, [pc, #124]	; (810aaa8 <vTaskDelete+0x104>)
 810aa2a:	f7fe ff32 	bl	8109892 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 810aa2e:	4b1f      	ldr	r3, [pc, #124]	; (810aaac <vTaskDelete+0x108>)
 810aa30:	681b      	ldr	r3, [r3, #0]
 810aa32:	3301      	adds	r3, #1
 810aa34:	4a1d      	ldr	r2, [pc, #116]	; (810aaac <vTaskDelete+0x108>)
 810aa36:	6013      	str	r3, [r2, #0]
 810aa38:	e009      	b.n	810aa4e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 810aa3a:	4b1d      	ldr	r3, [pc, #116]	; (810aab0 <vTaskDelete+0x10c>)
 810aa3c:	681b      	ldr	r3, [r3, #0]
 810aa3e:	3b01      	subs	r3, #1
 810aa40:	4a1b      	ldr	r2, [pc, #108]	; (810aab0 <vTaskDelete+0x10c>)
 810aa42:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 810aa44:	68f8      	ldr	r0, [r7, #12]
 810aa46:	f000 fc15 	bl	810b274 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 810aa4a:	f000 fc41 	bl	810b2d0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 810aa4e:	f7ff f8fb 	bl	8109c48 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 810aa52:	4b18      	ldr	r3, [pc, #96]	; (810aab4 <vTaskDelete+0x110>)
 810aa54:	681b      	ldr	r3, [r3, #0]
 810aa56:	2b00      	cmp	r3, #0
 810aa58:	d01a      	beq.n	810aa90 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 810aa5a:	4b0f      	ldr	r3, [pc, #60]	; (810aa98 <vTaskDelete+0xf4>)
 810aa5c:	681b      	ldr	r3, [r3, #0]
 810aa5e:	68fa      	ldr	r2, [r7, #12]
 810aa60:	429a      	cmp	r2, r3
 810aa62:	d115      	bne.n	810aa90 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 810aa64:	4b14      	ldr	r3, [pc, #80]	; (810aab8 <vTaskDelete+0x114>)
 810aa66:	681b      	ldr	r3, [r3, #0]
 810aa68:	2b00      	cmp	r3, #0
 810aa6a:	d009      	beq.n	810aa80 <vTaskDelete+0xdc>
 810aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa70:	f383 8811 	msr	BASEPRI, r3
 810aa74:	f3bf 8f6f 	isb	sy
 810aa78:	f3bf 8f4f 	dsb	sy
 810aa7c:	60bb      	str	r3, [r7, #8]
 810aa7e:	e7fe      	b.n	810aa7e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 810aa80:	4b0e      	ldr	r3, [pc, #56]	; (810aabc <vTaskDelete+0x118>)
 810aa82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810aa86:	601a      	str	r2, [r3, #0]
 810aa88:	f3bf 8f4f 	dsb	sy
 810aa8c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810aa90:	bf00      	nop
 810aa92:	3710      	adds	r7, #16
 810aa94:	46bd      	mov	sp, r7
 810aa96:	bd80      	pop	{r7, pc}
 810aa98:	100084b0 	.word	0x100084b0
 810aa9c:	100084b4 	.word	0x100084b4
 810aaa0:	100085b8 	.word	0x100085b8
 810aaa4:	100085cc 	.word	0x100085cc
 810aaa8:	10008584 	.word	0x10008584
 810aaac:	10008598 	.word	0x10008598
 810aab0:	100085b0 	.word	0x100085b0
 810aab4:	100085bc 	.word	0x100085bc
 810aab8:	100085d8 	.word	0x100085d8
 810aabc:	e000ed04 	.word	0xe000ed04

0810aac0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810aac0:	b580      	push	{r7, lr}
 810aac2:	b084      	sub	sp, #16
 810aac4:	af00      	add	r7, sp, #0
 810aac6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810aac8:	2300      	movs	r3, #0
 810aaca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810aacc:	687b      	ldr	r3, [r7, #4]
 810aace:	2b00      	cmp	r3, #0
 810aad0:	d016      	beq.n	810ab00 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810aad2:	4b13      	ldr	r3, [pc, #76]	; (810ab20 <vTaskDelay+0x60>)
 810aad4:	681b      	ldr	r3, [r3, #0]
 810aad6:	2b00      	cmp	r3, #0
 810aad8:	d009      	beq.n	810aaee <vTaskDelay+0x2e>
 810aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aade:	f383 8811 	msr	BASEPRI, r3
 810aae2:	f3bf 8f6f 	isb	sy
 810aae6:	f3bf 8f4f 	dsb	sy
 810aaea:	60bb      	str	r3, [r7, #8]
 810aaec:	e7fe      	b.n	810aaec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 810aaee:	f000 f879 	bl	810abe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810aaf2:	2100      	movs	r1, #0
 810aaf4:	6878      	ldr	r0, [r7, #4]
 810aaf6:	f000 fdd9 	bl	810b6ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810aafa:	f000 f881 	bl	810ac00 <xTaskResumeAll>
 810aafe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810ab00:	68fb      	ldr	r3, [r7, #12]
 810ab02:	2b00      	cmp	r3, #0
 810ab04:	d107      	bne.n	810ab16 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 810ab06:	4b07      	ldr	r3, [pc, #28]	; (810ab24 <vTaskDelay+0x64>)
 810ab08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ab0c:	601a      	str	r2, [r3, #0]
 810ab0e:	f3bf 8f4f 	dsb	sy
 810ab12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810ab16:	bf00      	nop
 810ab18:	3710      	adds	r7, #16
 810ab1a:	46bd      	mov	sp, r7
 810ab1c:	bd80      	pop	{r7, pc}
 810ab1e:	bf00      	nop
 810ab20:	100085d8 	.word	0x100085d8
 810ab24:	e000ed04 	.word	0xe000ed04

0810ab28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810ab28:	b580      	push	{r7, lr}
 810ab2a:	b08a      	sub	sp, #40	; 0x28
 810ab2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810ab2e:	2300      	movs	r3, #0
 810ab30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810ab32:	2300      	movs	r3, #0
 810ab34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810ab36:	463a      	mov	r2, r7
 810ab38:	1d39      	adds	r1, r7, #4
 810ab3a:	f107 0308 	add.w	r3, r7, #8
 810ab3e:	4618      	mov	r0, r3
 810ab40:	f7f6 fb4e 	bl	81011e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810ab44:	6839      	ldr	r1, [r7, #0]
 810ab46:	687b      	ldr	r3, [r7, #4]
 810ab48:	68ba      	ldr	r2, [r7, #8]
 810ab4a:	9202      	str	r2, [sp, #8]
 810ab4c:	9301      	str	r3, [sp, #4]
 810ab4e:	2300      	movs	r3, #0
 810ab50:	9300      	str	r3, [sp, #0]
 810ab52:	2300      	movs	r3, #0
 810ab54:	460a      	mov	r2, r1
 810ab56:	491d      	ldr	r1, [pc, #116]	; (810abcc <vTaskStartScheduler+0xa4>)
 810ab58:	481d      	ldr	r0, [pc, #116]	; (810abd0 <vTaskStartScheduler+0xa8>)
 810ab5a:	f7ff fd93 	bl	810a684 <xTaskCreateStatic>
 810ab5e:	4602      	mov	r2, r0
 810ab60:	4b1c      	ldr	r3, [pc, #112]	; (810abd4 <vTaskStartScheduler+0xac>)
 810ab62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810ab64:	4b1b      	ldr	r3, [pc, #108]	; (810abd4 <vTaskStartScheduler+0xac>)
 810ab66:	681b      	ldr	r3, [r3, #0]
 810ab68:	2b00      	cmp	r3, #0
 810ab6a:	d002      	beq.n	810ab72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810ab6c:	2301      	movs	r3, #1
 810ab6e:	617b      	str	r3, [r7, #20]
 810ab70:	e001      	b.n	810ab76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810ab72:	2300      	movs	r3, #0
 810ab74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810ab76:	697b      	ldr	r3, [r7, #20]
 810ab78:	2b01      	cmp	r3, #1
 810ab7a:	d115      	bne.n	810aba8 <vTaskStartScheduler+0x80>
 810ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ab80:	f383 8811 	msr	BASEPRI, r3
 810ab84:	f3bf 8f6f 	isb	sy
 810ab88:	f3bf 8f4f 	dsb	sy
 810ab8c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810ab8e:	4b12      	ldr	r3, [pc, #72]	; (810abd8 <vTaskStartScheduler+0xb0>)
 810ab90:	f04f 32ff 	mov.w	r2, #4294967295
 810ab94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810ab96:	4b11      	ldr	r3, [pc, #68]	; (810abdc <vTaskStartScheduler+0xb4>)
 810ab98:	2201      	movs	r2, #1
 810ab9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810ab9c:	4b10      	ldr	r3, [pc, #64]	; (810abe0 <vTaskStartScheduler+0xb8>)
 810ab9e:	2200      	movs	r2, #0
 810aba0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810aba2:	f7fe ff85 	bl	8109ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810aba6:	e00d      	b.n	810abc4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810aba8:	697b      	ldr	r3, [r7, #20]
 810abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 810abae:	d109      	bne.n	810abc4 <vTaskStartScheduler+0x9c>
 810abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810abb4:	f383 8811 	msr	BASEPRI, r3
 810abb8:	f3bf 8f6f 	isb	sy
 810abbc:	f3bf 8f4f 	dsb	sy
 810abc0:	60fb      	str	r3, [r7, #12]
 810abc2:	e7fe      	b.n	810abc2 <vTaskStartScheduler+0x9a>
}
 810abc4:	bf00      	nop
 810abc6:	3718      	adds	r7, #24
 810abc8:	46bd      	mov	sp, r7
 810abca:	bd80      	pop	{r7, pc}
 810abcc:	08114d98 	.word	0x08114d98
 810abd0:	0810b16d 	.word	0x0810b16d
 810abd4:	100085d4 	.word	0x100085d4
 810abd8:	100085d0 	.word	0x100085d0
 810abdc:	100085bc 	.word	0x100085bc
 810abe0:	100085b4 	.word	0x100085b4

0810abe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810abe4:	b480      	push	{r7}
 810abe6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 810abe8:	4b04      	ldr	r3, [pc, #16]	; (810abfc <vTaskSuspendAll+0x18>)
 810abea:	681b      	ldr	r3, [r3, #0]
 810abec:	3301      	adds	r3, #1
 810abee:	4a03      	ldr	r2, [pc, #12]	; (810abfc <vTaskSuspendAll+0x18>)
 810abf0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 810abf2:	bf00      	nop
 810abf4:	46bd      	mov	sp, r7
 810abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abfa:	4770      	bx	lr
 810abfc:	100085d8 	.word	0x100085d8

0810ac00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810ac00:	b580      	push	{r7, lr}
 810ac02:	b084      	sub	sp, #16
 810ac04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810ac06:	2300      	movs	r3, #0
 810ac08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810ac0a:	2300      	movs	r3, #0
 810ac0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810ac0e:	4b41      	ldr	r3, [pc, #260]	; (810ad14 <xTaskResumeAll+0x114>)
 810ac10:	681b      	ldr	r3, [r3, #0]
 810ac12:	2b00      	cmp	r3, #0
 810ac14:	d109      	bne.n	810ac2a <xTaskResumeAll+0x2a>
 810ac16:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac1a:	f383 8811 	msr	BASEPRI, r3
 810ac1e:	f3bf 8f6f 	isb	sy
 810ac22:	f3bf 8f4f 	dsb	sy
 810ac26:	603b      	str	r3, [r7, #0]
 810ac28:	e7fe      	b.n	810ac28 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810ac2a:	f7fe ffdf 	bl	8109bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810ac2e:	4b39      	ldr	r3, [pc, #228]	; (810ad14 <xTaskResumeAll+0x114>)
 810ac30:	681b      	ldr	r3, [r3, #0]
 810ac32:	3b01      	subs	r3, #1
 810ac34:	4a37      	ldr	r2, [pc, #220]	; (810ad14 <xTaskResumeAll+0x114>)
 810ac36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ac38:	4b36      	ldr	r3, [pc, #216]	; (810ad14 <xTaskResumeAll+0x114>)
 810ac3a:	681b      	ldr	r3, [r3, #0]
 810ac3c:	2b00      	cmp	r3, #0
 810ac3e:	d161      	bne.n	810ad04 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810ac40:	4b35      	ldr	r3, [pc, #212]	; (810ad18 <xTaskResumeAll+0x118>)
 810ac42:	681b      	ldr	r3, [r3, #0]
 810ac44:	2b00      	cmp	r3, #0
 810ac46:	d05d      	beq.n	810ad04 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810ac48:	e02e      	b.n	810aca8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ac4a:	4b34      	ldr	r3, [pc, #208]	; (810ad1c <xTaskResumeAll+0x11c>)
 810ac4c:	68db      	ldr	r3, [r3, #12]
 810ac4e:	68db      	ldr	r3, [r3, #12]
 810ac50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810ac52:	68fb      	ldr	r3, [r7, #12]
 810ac54:	3318      	adds	r3, #24
 810ac56:	4618      	mov	r0, r3
 810ac58:	f7fe fe78 	bl	810994c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ac5c:	68fb      	ldr	r3, [r7, #12]
 810ac5e:	3304      	adds	r3, #4
 810ac60:	4618      	mov	r0, r3
 810ac62:	f7fe fe73 	bl	810994c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810ac66:	68fb      	ldr	r3, [r7, #12]
 810ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ac6a:	2201      	movs	r2, #1
 810ac6c:	409a      	lsls	r2, r3
 810ac6e:	4b2c      	ldr	r3, [pc, #176]	; (810ad20 <xTaskResumeAll+0x120>)
 810ac70:	681b      	ldr	r3, [r3, #0]
 810ac72:	4313      	orrs	r3, r2
 810ac74:	4a2a      	ldr	r2, [pc, #168]	; (810ad20 <xTaskResumeAll+0x120>)
 810ac76:	6013      	str	r3, [r2, #0]
 810ac78:	68fb      	ldr	r3, [r7, #12]
 810ac7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ac7c:	4613      	mov	r3, r2
 810ac7e:	009b      	lsls	r3, r3, #2
 810ac80:	4413      	add	r3, r2
 810ac82:	009b      	lsls	r3, r3, #2
 810ac84:	4a27      	ldr	r2, [pc, #156]	; (810ad24 <xTaskResumeAll+0x124>)
 810ac86:	441a      	add	r2, r3
 810ac88:	68fb      	ldr	r3, [r7, #12]
 810ac8a:	3304      	adds	r3, #4
 810ac8c:	4619      	mov	r1, r3
 810ac8e:	4610      	mov	r0, r2
 810ac90:	f7fe fdff 	bl	8109892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810ac94:	68fb      	ldr	r3, [r7, #12]
 810ac96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ac98:	4b23      	ldr	r3, [pc, #140]	; (810ad28 <xTaskResumeAll+0x128>)
 810ac9a:	681b      	ldr	r3, [r3, #0]
 810ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ac9e:	429a      	cmp	r2, r3
 810aca0:	d302      	bcc.n	810aca8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 810aca2:	4b22      	ldr	r3, [pc, #136]	; (810ad2c <xTaskResumeAll+0x12c>)
 810aca4:	2201      	movs	r2, #1
 810aca6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810aca8:	4b1c      	ldr	r3, [pc, #112]	; (810ad1c <xTaskResumeAll+0x11c>)
 810acaa:	681b      	ldr	r3, [r3, #0]
 810acac:	2b00      	cmp	r3, #0
 810acae:	d1cc      	bne.n	810ac4a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810acb0:	68fb      	ldr	r3, [r7, #12]
 810acb2:	2b00      	cmp	r3, #0
 810acb4:	d001      	beq.n	810acba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810acb6:	f000 fb0b 	bl	810b2d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810acba:	4b1d      	ldr	r3, [pc, #116]	; (810ad30 <xTaskResumeAll+0x130>)
 810acbc:	681b      	ldr	r3, [r3, #0]
 810acbe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 810acc0:	687b      	ldr	r3, [r7, #4]
 810acc2:	2b00      	cmp	r3, #0
 810acc4:	d010      	beq.n	810ace8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810acc6:	f000 f837 	bl	810ad38 <xTaskIncrementTick>
 810acca:	4603      	mov	r3, r0
 810accc:	2b00      	cmp	r3, #0
 810acce:	d002      	beq.n	810acd6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 810acd0:	4b16      	ldr	r3, [pc, #88]	; (810ad2c <xTaskResumeAll+0x12c>)
 810acd2:	2201      	movs	r2, #1
 810acd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 810acd6:	687b      	ldr	r3, [r7, #4]
 810acd8:	3b01      	subs	r3, #1
 810acda:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810acdc:	687b      	ldr	r3, [r7, #4]
 810acde:	2b00      	cmp	r3, #0
 810ace0:	d1f1      	bne.n	810acc6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 810ace2:	4b13      	ldr	r3, [pc, #76]	; (810ad30 <xTaskResumeAll+0x130>)
 810ace4:	2200      	movs	r2, #0
 810ace6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810ace8:	4b10      	ldr	r3, [pc, #64]	; (810ad2c <xTaskResumeAll+0x12c>)
 810acea:	681b      	ldr	r3, [r3, #0]
 810acec:	2b00      	cmp	r3, #0
 810acee:	d009      	beq.n	810ad04 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810acf0:	2301      	movs	r3, #1
 810acf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810acf4:	4b0f      	ldr	r3, [pc, #60]	; (810ad34 <xTaskResumeAll+0x134>)
 810acf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810acfa:	601a      	str	r2, [r3, #0]
 810acfc:	f3bf 8f4f 	dsb	sy
 810ad00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810ad04:	f7fe ffa0 	bl	8109c48 <vPortExitCritical>

	return xAlreadyYielded;
 810ad08:	68bb      	ldr	r3, [r7, #8]
}
 810ad0a:	4618      	mov	r0, r3
 810ad0c:	3710      	adds	r7, #16
 810ad0e:	46bd      	mov	sp, r7
 810ad10:	bd80      	pop	{r7, pc}
 810ad12:	bf00      	nop
 810ad14:	100085d8 	.word	0x100085d8
 810ad18:	100085b0 	.word	0x100085b0
 810ad1c:	10008570 	.word	0x10008570
 810ad20:	100085b8 	.word	0x100085b8
 810ad24:	100084b4 	.word	0x100084b4
 810ad28:	100084b0 	.word	0x100084b0
 810ad2c:	100085c4 	.word	0x100085c4
 810ad30:	100085c0 	.word	0x100085c0
 810ad34:	e000ed04 	.word	0xe000ed04

0810ad38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810ad38:	b580      	push	{r7, lr}
 810ad3a:	b086      	sub	sp, #24
 810ad3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810ad3e:	2300      	movs	r3, #0
 810ad40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ad42:	4b4e      	ldr	r3, [pc, #312]	; (810ae7c <xTaskIncrementTick+0x144>)
 810ad44:	681b      	ldr	r3, [r3, #0]
 810ad46:	2b00      	cmp	r3, #0
 810ad48:	f040 8087 	bne.w	810ae5a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810ad4c:	4b4c      	ldr	r3, [pc, #304]	; (810ae80 <xTaskIncrementTick+0x148>)
 810ad4e:	681b      	ldr	r3, [r3, #0]
 810ad50:	3301      	adds	r3, #1
 810ad52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810ad54:	4a4a      	ldr	r2, [pc, #296]	; (810ae80 <xTaskIncrementTick+0x148>)
 810ad56:	693b      	ldr	r3, [r7, #16]
 810ad58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810ad5a:	693b      	ldr	r3, [r7, #16]
 810ad5c:	2b00      	cmp	r3, #0
 810ad5e:	d11f      	bne.n	810ada0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 810ad60:	4b48      	ldr	r3, [pc, #288]	; (810ae84 <xTaskIncrementTick+0x14c>)
 810ad62:	681b      	ldr	r3, [r3, #0]
 810ad64:	681b      	ldr	r3, [r3, #0]
 810ad66:	2b00      	cmp	r3, #0
 810ad68:	d009      	beq.n	810ad7e <xTaskIncrementTick+0x46>
 810ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad6e:	f383 8811 	msr	BASEPRI, r3
 810ad72:	f3bf 8f6f 	isb	sy
 810ad76:	f3bf 8f4f 	dsb	sy
 810ad7a:	603b      	str	r3, [r7, #0]
 810ad7c:	e7fe      	b.n	810ad7c <xTaskIncrementTick+0x44>
 810ad7e:	4b41      	ldr	r3, [pc, #260]	; (810ae84 <xTaskIncrementTick+0x14c>)
 810ad80:	681b      	ldr	r3, [r3, #0]
 810ad82:	60fb      	str	r3, [r7, #12]
 810ad84:	4b40      	ldr	r3, [pc, #256]	; (810ae88 <xTaskIncrementTick+0x150>)
 810ad86:	681b      	ldr	r3, [r3, #0]
 810ad88:	4a3e      	ldr	r2, [pc, #248]	; (810ae84 <xTaskIncrementTick+0x14c>)
 810ad8a:	6013      	str	r3, [r2, #0]
 810ad8c:	4a3e      	ldr	r2, [pc, #248]	; (810ae88 <xTaskIncrementTick+0x150>)
 810ad8e:	68fb      	ldr	r3, [r7, #12]
 810ad90:	6013      	str	r3, [r2, #0]
 810ad92:	4b3e      	ldr	r3, [pc, #248]	; (810ae8c <xTaskIncrementTick+0x154>)
 810ad94:	681b      	ldr	r3, [r3, #0]
 810ad96:	3301      	adds	r3, #1
 810ad98:	4a3c      	ldr	r2, [pc, #240]	; (810ae8c <xTaskIncrementTick+0x154>)
 810ad9a:	6013      	str	r3, [r2, #0]
 810ad9c:	f000 fa98 	bl	810b2d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810ada0:	4b3b      	ldr	r3, [pc, #236]	; (810ae90 <xTaskIncrementTick+0x158>)
 810ada2:	681b      	ldr	r3, [r3, #0]
 810ada4:	693a      	ldr	r2, [r7, #16]
 810ada6:	429a      	cmp	r2, r3
 810ada8:	d348      	bcc.n	810ae3c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810adaa:	4b36      	ldr	r3, [pc, #216]	; (810ae84 <xTaskIncrementTick+0x14c>)
 810adac:	681b      	ldr	r3, [r3, #0]
 810adae:	681b      	ldr	r3, [r3, #0]
 810adb0:	2b00      	cmp	r3, #0
 810adb2:	d104      	bne.n	810adbe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810adb4:	4b36      	ldr	r3, [pc, #216]	; (810ae90 <xTaskIncrementTick+0x158>)
 810adb6:	f04f 32ff 	mov.w	r2, #4294967295
 810adba:	601a      	str	r2, [r3, #0]
					break;
 810adbc:	e03e      	b.n	810ae3c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810adbe:	4b31      	ldr	r3, [pc, #196]	; (810ae84 <xTaskIncrementTick+0x14c>)
 810adc0:	681b      	ldr	r3, [r3, #0]
 810adc2:	68db      	ldr	r3, [r3, #12]
 810adc4:	68db      	ldr	r3, [r3, #12]
 810adc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810adc8:	68bb      	ldr	r3, [r7, #8]
 810adca:	685b      	ldr	r3, [r3, #4]
 810adcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810adce:	693a      	ldr	r2, [r7, #16]
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	429a      	cmp	r2, r3
 810add4:	d203      	bcs.n	810adde <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810add6:	4a2e      	ldr	r2, [pc, #184]	; (810ae90 <xTaskIncrementTick+0x158>)
 810add8:	687b      	ldr	r3, [r7, #4]
 810adda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810addc:	e02e      	b.n	810ae3c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810adde:	68bb      	ldr	r3, [r7, #8]
 810ade0:	3304      	adds	r3, #4
 810ade2:	4618      	mov	r0, r3
 810ade4:	f7fe fdb2 	bl	810994c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810ade8:	68bb      	ldr	r3, [r7, #8]
 810adea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810adec:	2b00      	cmp	r3, #0
 810adee:	d004      	beq.n	810adfa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810adf0:	68bb      	ldr	r3, [r7, #8]
 810adf2:	3318      	adds	r3, #24
 810adf4:	4618      	mov	r0, r3
 810adf6:	f7fe fda9 	bl	810994c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810adfa:	68bb      	ldr	r3, [r7, #8]
 810adfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810adfe:	2201      	movs	r2, #1
 810ae00:	409a      	lsls	r2, r3
 810ae02:	4b24      	ldr	r3, [pc, #144]	; (810ae94 <xTaskIncrementTick+0x15c>)
 810ae04:	681b      	ldr	r3, [r3, #0]
 810ae06:	4313      	orrs	r3, r2
 810ae08:	4a22      	ldr	r2, [pc, #136]	; (810ae94 <xTaskIncrementTick+0x15c>)
 810ae0a:	6013      	str	r3, [r2, #0]
 810ae0c:	68bb      	ldr	r3, [r7, #8]
 810ae0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ae10:	4613      	mov	r3, r2
 810ae12:	009b      	lsls	r3, r3, #2
 810ae14:	4413      	add	r3, r2
 810ae16:	009b      	lsls	r3, r3, #2
 810ae18:	4a1f      	ldr	r2, [pc, #124]	; (810ae98 <xTaskIncrementTick+0x160>)
 810ae1a:	441a      	add	r2, r3
 810ae1c:	68bb      	ldr	r3, [r7, #8]
 810ae1e:	3304      	adds	r3, #4
 810ae20:	4619      	mov	r1, r3
 810ae22:	4610      	mov	r0, r2
 810ae24:	f7fe fd35 	bl	8109892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810ae28:	68bb      	ldr	r3, [r7, #8]
 810ae2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ae2c:	4b1b      	ldr	r3, [pc, #108]	; (810ae9c <xTaskIncrementTick+0x164>)
 810ae2e:	681b      	ldr	r3, [r3, #0]
 810ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ae32:	429a      	cmp	r2, r3
 810ae34:	d3b9      	bcc.n	810adaa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 810ae36:	2301      	movs	r3, #1
 810ae38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ae3a:	e7b6      	b.n	810adaa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810ae3c:	4b17      	ldr	r3, [pc, #92]	; (810ae9c <xTaskIncrementTick+0x164>)
 810ae3e:	681b      	ldr	r3, [r3, #0]
 810ae40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ae42:	4915      	ldr	r1, [pc, #84]	; (810ae98 <xTaskIncrementTick+0x160>)
 810ae44:	4613      	mov	r3, r2
 810ae46:	009b      	lsls	r3, r3, #2
 810ae48:	4413      	add	r3, r2
 810ae4a:	009b      	lsls	r3, r3, #2
 810ae4c:	440b      	add	r3, r1
 810ae4e:	681b      	ldr	r3, [r3, #0]
 810ae50:	2b01      	cmp	r3, #1
 810ae52:	d907      	bls.n	810ae64 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 810ae54:	2301      	movs	r3, #1
 810ae56:	617b      	str	r3, [r7, #20]
 810ae58:	e004      	b.n	810ae64 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 810ae5a:	4b11      	ldr	r3, [pc, #68]	; (810aea0 <xTaskIncrementTick+0x168>)
 810ae5c:	681b      	ldr	r3, [r3, #0]
 810ae5e:	3301      	adds	r3, #1
 810ae60:	4a0f      	ldr	r2, [pc, #60]	; (810aea0 <xTaskIncrementTick+0x168>)
 810ae62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 810ae64:	4b0f      	ldr	r3, [pc, #60]	; (810aea4 <xTaskIncrementTick+0x16c>)
 810ae66:	681b      	ldr	r3, [r3, #0]
 810ae68:	2b00      	cmp	r3, #0
 810ae6a:	d001      	beq.n	810ae70 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 810ae6c:	2301      	movs	r3, #1
 810ae6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 810ae70:	697b      	ldr	r3, [r7, #20]
}
 810ae72:	4618      	mov	r0, r3
 810ae74:	3718      	adds	r7, #24
 810ae76:	46bd      	mov	sp, r7
 810ae78:	bd80      	pop	{r7, pc}
 810ae7a:	bf00      	nop
 810ae7c:	100085d8 	.word	0x100085d8
 810ae80:	100085b4 	.word	0x100085b4
 810ae84:	10008568 	.word	0x10008568
 810ae88:	1000856c 	.word	0x1000856c
 810ae8c:	100085c8 	.word	0x100085c8
 810ae90:	100085d0 	.word	0x100085d0
 810ae94:	100085b8 	.word	0x100085b8
 810ae98:	100084b4 	.word	0x100084b4
 810ae9c:	100084b0 	.word	0x100084b0
 810aea0:	100085c0 	.word	0x100085c0
 810aea4:	100085c4 	.word	0x100085c4

0810aea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810aea8:	b480      	push	{r7}
 810aeaa:	b087      	sub	sp, #28
 810aeac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810aeae:	4b26      	ldr	r3, [pc, #152]	; (810af48 <vTaskSwitchContext+0xa0>)
 810aeb0:	681b      	ldr	r3, [r3, #0]
 810aeb2:	2b00      	cmp	r3, #0
 810aeb4:	d003      	beq.n	810aebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810aeb6:	4b25      	ldr	r3, [pc, #148]	; (810af4c <vTaskSwitchContext+0xa4>)
 810aeb8:	2201      	movs	r2, #1
 810aeba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810aebc:	e03e      	b.n	810af3c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 810aebe:	4b23      	ldr	r3, [pc, #140]	; (810af4c <vTaskSwitchContext+0xa4>)
 810aec0:	2200      	movs	r2, #0
 810aec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810aec4:	4b22      	ldr	r3, [pc, #136]	; (810af50 <vTaskSwitchContext+0xa8>)
 810aec6:	681b      	ldr	r3, [r3, #0]
 810aec8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 810aeca:	68fb      	ldr	r3, [r7, #12]
 810aecc:	fab3 f383 	clz	r3, r3
 810aed0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 810aed2:	7afb      	ldrb	r3, [r7, #11]
 810aed4:	f1c3 031f 	rsb	r3, r3, #31
 810aed8:	617b      	str	r3, [r7, #20]
 810aeda:	491e      	ldr	r1, [pc, #120]	; (810af54 <vTaskSwitchContext+0xac>)
 810aedc:	697a      	ldr	r2, [r7, #20]
 810aede:	4613      	mov	r3, r2
 810aee0:	009b      	lsls	r3, r3, #2
 810aee2:	4413      	add	r3, r2
 810aee4:	009b      	lsls	r3, r3, #2
 810aee6:	440b      	add	r3, r1
 810aee8:	681b      	ldr	r3, [r3, #0]
 810aeea:	2b00      	cmp	r3, #0
 810aeec:	d109      	bne.n	810af02 <vTaskSwitchContext+0x5a>
	__asm volatile
 810aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aef2:	f383 8811 	msr	BASEPRI, r3
 810aef6:	f3bf 8f6f 	isb	sy
 810aefa:	f3bf 8f4f 	dsb	sy
 810aefe:	607b      	str	r3, [r7, #4]
 810af00:	e7fe      	b.n	810af00 <vTaskSwitchContext+0x58>
 810af02:	697a      	ldr	r2, [r7, #20]
 810af04:	4613      	mov	r3, r2
 810af06:	009b      	lsls	r3, r3, #2
 810af08:	4413      	add	r3, r2
 810af0a:	009b      	lsls	r3, r3, #2
 810af0c:	4a11      	ldr	r2, [pc, #68]	; (810af54 <vTaskSwitchContext+0xac>)
 810af0e:	4413      	add	r3, r2
 810af10:	613b      	str	r3, [r7, #16]
 810af12:	693b      	ldr	r3, [r7, #16]
 810af14:	685b      	ldr	r3, [r3, #4]
 810af16:	685a      	ldr	r2, [r3, #4]
 810af18:	693b      	ldr	r3, [r7, #16]
 810af1a:	605a      	str	r2, [r3, #4]
 810af1c:	693b      	ldr	r3, [r7, #16]
 810af1e:	685a      	ldr	r2, [r3, #4]
 810af20:	693b      	ldr	r3, [r7, #16]
 810af22:	3308      	adds	r3, #8
 810af24:	429a      	cmp	r2, r3
 810af26:	d104      	bne.n	810af32 <vTaskSwitchContext+0x8a>
 810af28:	693b      	ldr	r3, [r7, #16]
 810af2a:	685b      	ldr	r3, [r3, #4]
 810af2c:	685a      	ldr	r2, [r3, #4]
 810af2e:	693b      	ldr	r3, [r7, #16]
 810af30:	605a      	str	r2, [r3, #4]
 810af32:	693b      	ldr	r3, [r7, #16]
 810af34:	685b      	ldr	r3, [r3, #4]
 810af36:	68db      	ldr	r3, [r3, #12]
 810af38:	4a07      	ldr	r2, [pc, #28]	; (810af58 <vTaskSwitchContext+0xb0>)
 810af3a:	6013      	str	r3, [r2, #0]
}
 810af3c:	bf00      	nop
 810af3e:	371c      	adds	r7, #28
 810af40:	46bd      	mov	sp, r7
 810af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af46:	4770      	bx	lr
 810af48:	100085d8 	.word	0x100085d8
 810af4c:	100085c4 	.word	0x100085c4
 810af50:	100085b8 	.word	0x100085b8
 810af54:	100084b4 	.word	0x100084b4
 810af58:	100084b0 	.word	0x100084b0

0810af5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810af5c:	b580      	push	{r7, lr}
 810af5e:	b084      	sub	sp, #16
 810af60:	af00      	add	r7, sp, #0
 810af62:	6078      	str	r0, [r7, #4]
 810af64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810af66:	687b      	ldr	r3, [r7, #4]
 810af68:	2b00      	cmp	r3, #0
 810af6a:	d109      	bne.n	810af80 <vTaskPlaceOnEventList+0x24>
 810af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af70:	f383 8811 	msr	BASEPRI, r3
 810af74:	f3bf 8f6f 	isb	sy
 810af78:	f3bf 8f4f 	dsb	sy
 810af7c:	60fb      	str	r3, [r7, #12]
 810af7e:	e7fe      	b.n	810af7e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810af80:	4b07      	ldr	r3, [pc, #28]	; (810afa0 <vTaskPlaceOnEventList+0x44>)
 810af82:	681b      	ldr	r3, [r3, #0]
 810af84:	3318      	adds	r3, #24
 810af86:	4619      	mov	r1, r3
 810af88:	6878      	ldr	r0, [r7, #4]
 810af8a:	f7fe fca6 	bl	81098da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810af8e:	2101      	movs	r1, #1
 810af90:	6838      	ldr	r0, [r7, #0]
 810af92:	f000 fb8b 	bl	810b6ac <prvAddCurrentTaskToDelayedList>
}
 810af96:	bf00      	nop
 810af98:	3710      	adds	r7, #16
 810af9a:	46bd      	mov	sp, r7
 810af9c:	bd80      	pop	{r7, pc}
 810af9e:	bf00      	nop
 810afa0:	100084b0 	.word	0x100084b0

0810afa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810afa4:	b580      	push	{r7, lr}
 810afa6:	b086      	sub	sp, #24
 810afa8:	af00      	add	r7, sp, #0
 810afaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810afac:	687b      	ldr	r3, [r7, #4]
 810afae:	68db      	ldr	r3, [r3, #12]
 810afb0:	68db      	ldr	r3, [r3, #12]
 810afb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810afb4:	693b      	ldr	r3, [r7, #16]
 810afb6:	2b00      	cmp	r3, #0
 810afb8:	d109      	bne.n	810afce <xTaskRemoveFromEventList+0x2a>
 810afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 810afbe:	f383 8811 	msr	BASEPRI, r3
 810afc2:	f3bf 8f6f 	isb	sy
 810afc6:	f3bf 8f4f 	dsb	sy
 810afca:	60fb      	str	r3, [r7, #12]
 810afcc:	e7fe      	b.n	810afcc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810afce:	693b      	ldr	r3, [r7, #16]
 810afd0:	3318      	adds	r3, #24
 810afd2:	4618      	mov	r0, r3
 810afd4:	f7fe fcba 	bl	810994c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810afd8:	4b1d      	ldr	r3, [pc, #116]	; (810b050 <xTaskRemoveFromEventList+0xac>)
 810afda:	681b      	ldr	r3, [r3, #0]
 810afdc:	2b00      	cmp	r3, #0
 810afde:	d11c      	bne.n	810b01a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810afe0:	693b      	ldr	r3, [r7, #16]
 810afe2:	3304      	adds	r3, #4
 810afe4:	4618      	mov	r0, r3
 810afe6:	f7fe fcb1 	bl	810994c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810afea:	693b      	ldr	r3, [r7, #16]
 810afec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810afee:	2201      	movs	r2, #1
 810aff0:	409a      	lsls	r2, r3
 810aff2:	4b18      	ldr	r3, [pc, #96]	; (810b054 <xTaskRemoveFromEventList+0xb0>)
 810aff4:	681b      	ldr	r3, [r3, #0]
 810aff6:	4313      	orrs	r3, r2
 810aff8:	4a16      	ldr	r2, [pc, #88]	; (810b054 <xTaskRemoveFromEventList+0xb0>)
 810affa:	6013      	str	r3, [r2, #0]
 810affc:	693b      	ldr	r3, [r7, #16]
 810affe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b000:	4613      	mov	r3, r2
 810b002:	009b      	lsls	r3, r3, #2
 810b004:	4413      	add	r3, r2
 810b006:	009b      	lsls	r3, r3, #2
 810b008:	4a13      	ldr	r2, [pc, #76]	; (810b058 <xTaskRemoveFromEventList+0xb4>)
 810b00a:	441a      	add	r2, r3
 810b00c:	693b      	ldr	r3, [r7, #16]
 810b00e:	3304      	adds	r3, #4
 810b010:	4619      	mov	r1, r3
 810b012:	4610      	mov	r0, r2
 810b014:	f7fe fc3d 	bl	8109892 <vListInsertEnd>
 810b018:	e005      	b.n	810b026 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810b01a:	693b      	ldr	r3, [r7, #16]
 810b01c:	3318      	adds	r3, #24
 810b01e:	4619      	mov	r1, r3
 810b020:	480e      	ldr	r0, [pc, #56]	; (810b05c <xTaskRemoveFromEventList+0xb8>)
 810b022:	f7fe fc36 	bl	8109892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810b026:	693b      	ldr	r3, [r7, #16]
 810b028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b02a:	4b0d      	ldr	r3, [pc, #52]	; (810b060 <xTaskRemoveFromEventList+0xbc>)
 810b02c:	681b      	ldr	r3, [r3, #0]
 810b02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b030:	429a      	cmp	r2, r3
 810b032:	d905      	bls.n	810b040 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810b034:	2301      	movs	r3, #1
 810b036:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810b038:	4b0a      	ldr	r3, [pc, #40]	; (810b064 <xTaskRemoveFromEventList+0xc0>)
 810b03a:	2201      	movs	r2, #1
 810b03c:	601a      	str	r2, [r3, #0]
 810b03e:	e001      	b.n	810b044 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 810b040:	2300      	movs	r3, #0
 810b042:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810b044:	697b      	ldr	r3, [r7, #20]
}
 810b046:	4618      	mov	r0, r3
 810b048:	3718      	adds	r7, #24
 810b04a:	46bd      	mov	sp, r7
 810b04c:	bd80      	pop	{r7, pc}
 810b04e:	bf00      	nop
 810b050:	100085d8 	.word	0x100085d8
 810b054:	100085b8 	.word	0x100085b8
 810b058:	100084b4 	.word	0x100084b4
 810b05c:	10008570 	.word	0x10008570
 810b060:	100084b0 	.word	0x100084b0
 810b064:	100085c4 	.word	0x100085c4

0810b068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810b068:	b480      	push	{r7}
 810b06a:	b083      	sub	sp, #12
 810b06c:	af00      	add	r7, sp, #0
 810b06e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810b070:	4b06      	ldr	r3, [pc, #24]	; (810b08c <vTaskInternalSetTimeOutState+0x24>)
 810b072:	681a      	ldr	r2, [r3, #0]
 810b074:	687b      	ldr	r3, [r7, #4]
 810b076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810b078:	4b05      	ldr	r3, [pc, #20]	; (810b090 <vTaskInternalSetTimeOutState+0x28>)
 810b07a:	681a      	ldr	r2, [r3, #0]
 810b07c:	687b      	ldr	r3, [r7, #4]
 810b07e:	605a      	str	r2, [r3, #4]
}
 810b080:	bf00      	nop
 810b082:	370c      	adds	r7, #12
 810b084:	46bd      	mov	sp, r7
 810b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b08a:	4770      	bx	lr
 810b08c:	100085c8 	.word	0x100085c8
 810b090:	100085b4 	.word	0x100085b4

0810b094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810b094:	b580      	push	{r7, lr}
 810b096:	b088      	sub	sp, #32
 810b098:	af00      	add	r7, sp, #0
 810b09a:	6078      	str	r0, [r7, #4]
 810b09c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810b09e:	687b      	ldr	r3, [r7, #4]
 810b0a0:	2b00      	cmp	r3, #0
 810b0a2:	d109      	bne.n	810b0b8 <xTaskCheckForTimeOut+0x24>
 810b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b0a8:	f383 8811 	msr	BASEPRI, r3
 810b0ac:	f3bf 8f6f 	isb	sy
 810b0b0:	f3bf 8f4f 	dsb	sy
 810b0b4:	613b      	str	r3, [r7, #16]
 810b0b6:	e7fe      	b.n	810b0b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 810b0b8:	683b      	ldr	r3, [r7, #0]
 810b0ba:	2b00      	cmp	r3, #0
 810b0bc:	d109      	bne.n	810b0d2 <xTaskCheckForTimeOut+0x3e>
 810b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b0c2:	f383 8811 	msr	BASEPRI, r3
 810b0c6:	f3bf 8f6f 	isb	sy
 810b0ca:	f3bf 8f4f 	dsb	sy
 810b0ce:	60fb      	str	r3, [r7, #12]
 810b0d0:	e7fe      	b.n	810b0d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 810b0d2:	f7fe fd8b 	bl	8109bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810b0d6:	4b1d      	ldr	r3, [pc, #116]	; (810b14c <xTaskCheckForTimeOut+0xb8>)
 810b0d8:	681b      	ldr	r3, [r3, #0]
 810b0da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810b0dc:	687b      	ldr	r3, [r7, #4]
 810b0de:	685b      	ldr	r3, [r3, #4]
 810b0e0:	69ba      	ldr	r2, [r7, #24]
 810b0e2:	1ad3      	subs	r3, r2, r3
 810b0e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810b0e6:	683b      	ldr	r3, [r7, #0]
 810b0e8:	681b      	ldr	r3, [r3, #0]
 810b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b0ee:	d102      	bne.n	810b0f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810b0f0:	2300      	movs	r3, #0
 810b0f2:	61fb      	str	r3, [r7, #28]
 810b0f4:	e023      	b.n	810b13e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810b0f6:	687b      	ldr	r3, [r7, #4]
 810b0f8:	681a      	ldr	r2, [r3, #0]
 810b0fa:	4b15      	ldr	r3, [pc, #84]	; (810b150 <xTaskCheckForTimeOut+0xbc>)
 810b0fc:	681b      	ldr	r3, [r3, #0]
 810b0fe:	429a      	cmp	r2, r3
 810b100:	d007      	beq.n	810b112 <xTaskCheckForTimeOut+0x7e>
 810b102:	687b      	ldr	r3, [r7, #4]
 810b104:	685b      	ldr	r3, [r3, #4]
 810b106:	69ba      	ldr	r2, [r7, #24]
 810b108:	429a      	cmp	r2, r3
 810b10a:	d302      	bcc.n	810b112 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810b10c:	2301      	movs	r3, #1
 810b10e:	61fb      	str	r3, [r7, #28]
 810b110:	e015      	b.n	810b13e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810b112:	683b      	ldr	r3, [r7, #0]
 810b114:	681b      	ldr	r3, [r3, #0]
 810b116:	697a      	ldr	r2, [r7, #20]
 810b118:	429a      	cmp	r2, r3
 810b11a:	d20b      	bcs.n	810b134 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810b11c:	683b      	ldr	r3, [r7, #0]
 810b11e:	681a      	ldr	r2, [r3, #0]
 810b120:	697b      	ldr	r3, [r7, #20]
 810b122:	1ad2      	subs	r2, r2, r3
 810b124:	683b      	ldr	r3, [r7, #0]
 810b126:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810b128:	6878      	ldr	r0, [r7, #4]
 810b12a:	f7ff ff9d 	bl	810b068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810b12e:	2300      	movs	r3, #0
 810b130:	61fb      	str	r3, [r7, #28]
 810b132:	e004      	b.n	810b13e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810b134:	683b      	ldr	r3, [r7, #0]
 810b136:	2200      	movs	r2, #0
 810b138:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810b13a:	2301      	movs	r3, #1
 810b13c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810b13e:	f7fe fd83 	bl	8109c48 <vPortExitCritical>

	return xReturn;
 810b142:	69fb      	ldr	r3, [r7, #28]
}
 810b144:	4618      	mov	r0, r3
 810b146:	3720      	adds	r7, #32
 810b148:	46bd      	mov	sp, r7
 810b14a:	bd80      	pop	{r7, pc}
 810b14c:	100085b4 	.word	0x100085b4
 810b150:	100085c8 	.word	0x100085c8

0810b154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810b154:	b480      	push	{r7}
 810b156:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810b158:	4b03      	ldr	r3, [pc, #12]	; (810b168 <vTaskMissedYield+0x14>)
 810b15a:	2201      	movs	r2, #1
 810b15c:	601a      	str	r2, [r3, #0]
}
 810b15e:	bf00      	nop
 810b160:	46bd      	mov	sp, r7
 810b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b166:	4770      	bx	lr
 810b168:	100085c4 	.word	0x100085c4

0810b16c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810b16c:	b580      	push	{r7, lr}
 810b16e:	b082      	sub	sp, #8
 810b170:	af00      	add	r7, sp, #0
 810b172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810b174:	f000 f852 	bl	810b21c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810b178:	4b06      	ldr	r3, [pc, #24]	; (810b194 <prvIdleTask+0x28>)
 810b17a:	681b      	ldr	r3, [r3, #0]
 810b17c:	2b01      	cmp	r3, #1
 810b17e:	d9f9      	bls.n	810b174 <prvIdleTask+0x8>
			{
				taskYIELD();
 810b180:	4b05      	ldr	r3, [pc, #20]	; (810b198 <prvIdleTask+0x2c>)
 810b182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b186:	601a      	str	r2, [r3, #0]
 810b188:	f3bf 8f4f 	dsb	sy
 810b18c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810b190:	e7f0      	b.n	810b174 <prvIdleTask+0x8>
 810b192:	bf00      	nop
 810b194:	100084b4 	.word	0x100084b4
 810b198:	e000ed04 	.word	0xe000ed04

0810b19c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810b19c:	b580      	push	{r7, lr}
 810b19e:	b082      	sub	sp, #8
 810b1a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810b1a2:	2300      	movs	r3, #0
 810b1a4:	607b      	str	r3, [r7, #4]
 810b1a6:	e00c      	b.n	810b1c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810b1a8:	687a      	ldr	r2, [r7, #4]
 810b1aa:	4613      	mov	r3, r2
 810b1ac:	009b      	lsls	r3, r3, #2
 810b1ae:	4413      	add	r3, r2
 810b1b0:	009b      	lsls	r3, r3, #2
 810b1b2:	4a12      	ldr	r2, [pc, #72]	; (810b1fc <prvInitialiseTaskLists+0x60>)
 810b1b4:	4413      	add	r3, r2
 810b1b6:	4618      	mov	r0, r3
 810b1b8:	f7fe fb3e 	bl	8109838 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810b1bc:	687b      	ldr	r3, [r7, #4]
 810b1be:	3301      	adds	r3, #1
 810b1c0:	607b      	str	r3, [r7, #4]
 810b1c2:	687b      	ldr	r3, [r7, #4]
 810b1c4:	2b06      	cmp	r3, #6
 810b1c6:	d9ef      	bls.n	810b1a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810b1c8:	480d      	ldr	r0, [pc, #52]	; (810b200 <prvInitialiseTaskLists+0x64>)
 810b1ca:	f7fe fb35 	bl	8109838 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810b1ce:	480d      	ldr	r0, [pc, #52]	; (810b204 <prvInitialiseTaskLists+0x68>)
 810b1d0:	f7fe fb32 	bl	8109838 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810b1d4:	480c      	ldr	r0, [pc, #48]	; (810b208 <prvInitialiseTaskLists+0x6c>)
 810b1d6:	f7fe fb2f 	bl	8109838 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810b1da:	480c      	ldr	r0, [pc, #48]	; (810b20c <prvInitialiseTaskLists+0x70>)
 810b1dc:	f7fe fb2c 	bl	8109838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810b1e0:	480b      	ldr	r0, [pc, #44]	; (810b210 <prvInitialiseTaskLists+0x74>)
 810b1e2:	f7fe fb29 	bl	8109838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810b1e6:	4b0b      	ldr	r3, [pc, #44]	; (810b214 <prvInitialiseTaskLists+0x78>)
 810b1e8:	4a05      	ldr	r2, [pc, #20]	; (810b200 <prvInitialiseTaskLists+0x64>)
 810b1ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810b1ec:	4b0a      	ldr	r3, [pc, #40]	; (810b218 <prvInitialiseTaskLists+0x7c>)
 810b1ee:	4a05      	ldr	r2, [pc, #20]	; (810b204 <prvInitialiseTaskLists+0x68>)
 810b1f0:	601a      	str	r2, [r3, #0]
}
 810b1f2:	bf00      	nop
 810b1f4:	3708      	adds	r7, #8
 810b1f6:	46bd      	mov	sp, r7
 810b1f8:	bd80      	pop	{r7, pc}
 810b1fa:	bf00      	nop
 810b1fc:	100084b4 	.word	0x100084b4
 810b200:	10008540 	.word	0x10008540
 810b204:	10008554 	.word	0x10008554
 810b208:	10008570 	.word	0x10008570
 810b20c:	10008584 	.word	0x10008584
 810b210:	1000859c 	.word	0x1000859c
 810b214:	10008568 	.word	0x10008568
 810b218:	1000856c 	.word	0x1000856c

0810b21c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810b21c:	b580      	push	{r7, lr}
 810b21e:	b082      	sub	sp, #8
 810b220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810b222:	e019      	b.n	810b258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810b224:	f7fe fce2 	bl	8109bec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b228:	4b0f      	ldr	r3, [pc, #60]	; (810b268 <prvCheckTasksWaitingTermination+0x4c>)
 810b22a:	68db      	ldr	r3, [r3, #12]
 810b22c:	68db      	ldr	r3, [r3, #12]
 810b22e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b230:	687b      	ldr	r3, [r7, #4]
 810b232:	3304      	adds	r3, #4
 810b234:	4618      	mov	r0, r3
 810b236:	f7fe fb89 	bl	810994c <uxListRemove>
				--uxCurrentNumberOfTasks;
 810b23a:	4b0c      	ldr	r3, [pc, #48]	; (810b26c <prvCheckTasksWaitingTermination+0x50>)
 810b23c:	681b      	ldr	r3, [r3, #0]
 810b23e:	3b01      	subs	r3, #1
 810b240:	4a0a      	ldr	r2, [pc, #40]	; (810b26c <prvCheckTasksWaitingTermination+0x50>)
 810b242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810b244:	4b0a      	ldr	r3, [pc, #40]	; (810b270 <prvCheckTasksWaitingTermination+0x54>)
 810b246:	681b      	ldr	r3, [r3, #0]
 810b248:	3b01      	subs	r3, #1
 810b24a:	4a09      	ldr	r2, [pc, #36]	; (810b270 <prvCheckTasksWaitingTermination+0x54>)
 810b24c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810b24e:	f7fe fcfb 	bl	8109c48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810b252:	6878      	ldr	r0, [r7, #4]
 810b254:	f000 f80e 	bl	810b274 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810b258:	4b05      	ldr	r3, [pc, #20]	; (810b270 <prvCheckTasksWaitingTermination+0x54>)
 810b25a:	681b      	ldr	r3, [r3, #0]
 810b25c:	2b00      	cmp	r3, #0
 810b25e:	d1e1      	bne.n	810b224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810b260:	bf00      	nop
 810b262:	3708      	adds	r7, #8
 810b264:	46bd      	mov	sp, r7
 810b266:	bd80      	pop	{r7, pc}
 810b268:	10008584 	.word	0x10008584
 810b26c:	100085b0 	.word	0x100085b0
 810b270:	10008598 	.word	0x10008598

0810b274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810b274:	b580      	push	{r7, lr}
 810b276:	b084      	sub	sp, #16
 810b278:	af00      	add	r7, sp, #0
 810b27a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810b27c:	687b      	ldr	r3, [r7, #4]
 810b27e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810b282:	2b00      	cmp	r3, #0
 810b284:	d108      	bne.n	810b298 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810b286:	687b      	ldr	r3, [r7, #4]
 810b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b28a:	4618      	mov	r0, r3
 810b28c:	f7fe f9c0 	bl	8109610 <vPortFree>
				vPortFree( pxTCB );
 810b290:	6878      	ldr	r0, [r7, #4]
 810b292:	f7fe f9bd 	bl	8109610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810b296:	e017      	b.n	810b2c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810b298:	687b      	ldr	r3, [r7, #4]
 810b29a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810b29e:	2b01      	cmp	r3, #1
 810b2a0:	d103      	bne.n	810b2aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810b2a2:	6878      	ldr	r0, [r7, #4]
 810b2a4:	f7fe f9b4 	bl	8109610 <vPortFree>
	}
 810b2a8:	e00e      	b.n	810b2c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810b2aa:	687b      	ldr	r3, [r7, #4]
 810b2ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810b2b0:	2b02      	cmp	r3, #2
 810b2b2:	d009      	beq.n	810b2c8 <prvDeleteTCB+0x54>
 810b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b2b8:	f383 8811 	msr	BASEPRI, r3
 810b2bc:	f3bf 8f6f 	isb	sy
 810b2c0:	f3bf 8f4f 	dsb	sy
 810b2c4:	60fb      	str	r3, [r7, #12]
 810b2c6:	e7fe      	b.n	810b2c6 <prvDeleteTCB+0x52>
	}
 810b2c8:	bf00      	nop
 810b2ca:	3710      	adds	r7, #16
 810b2cc:	46bd      	mov	sp, r7
 810b2ce:	bd80      	pop	{r7, pc}

0810b2d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810b2d0:	b480      	push	{r7}
 810b2d2:	b083      	sub	sp, #12
 810b2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810b2d6:	4b0c      	ldr	r3, [pc, #48]	; (810b308 <prvResetNextTaskUnblockTime+0x38>)
 810b2d8:	681b      	ldr	r3, [r3, #0]
 810b2da:	681b      	ldr	r3, [r3, #0]
 810b2dc:	2b00      	cmp	r3, #0
 810b2de:	d104      	bne.n	810b2ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810b2e0:	4b0a      	ldr	r3, [pc, #40]	; (810b30c <prvResetNextTaskUnblockTime+0x3c>)
 810b2e2:	f04f 32ff 	mov.w	r2, #4294967295
 810b2e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810b2e8:	e008      	b.n	810b2fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b2ea:	4b07      	ldr	r3, [pc, #28]	; (810b308 <prvResetNextTaskUnblockTime+0x38>)
 810b2ec:	681b      	ldr	r3, [r3, #0]
 810b2ee:	68db      	ldr	r3, [r3, #12]
 810b2f0:	68db      	ldr	r3, [r3, #12]
 810b2f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810b2f4:	687b      	ldr	r3, [r7, #4]
 810b2f6:	685b      	ldr	r3, [r3, #4]
 810b2f8:	4a04      	ldr	r2, [pc, #16]	; (810b30c <prvResetNextTaskUnblockTime+0x3c>)
 810b2fa:	6013      	str	r3, [r2, #0]
}
 810b2fc:	bf00      	nop
 810b2fe:	370c      	adds	r7, #12
 810b300:	46bd      	mov	sp, r7
 810b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b306:	4770      	bx	lr
 810b308:	10008568 	.word	0x10008568
 810b30c:	100085d0 	.word	0x100085d0

0810b310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810b310:	b480      	push	{r7}
 810b312:	b083      	sub	sp, #12
 810b314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810b316:	4b0b      	ldr	r3, [pc, #44]	; (810b344 <xTaskGetSchedulerState+0x34>)
 810b318:	681b      	ldr	r3, [r3, #0]
 810b31a:	2b00      	cmp	r3, #0
 810b31c:	d102      	bne.n	810b324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810b31e:	2301      	movs	r3, #1
 810b320:	607b      	str	r3, [r7, #4]
 810b322:	e008      	b.n	810b336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b324:	4b08      	ldr	r3, [pc, #32]	; (810b348 <xTaskGetSchedulerState+0x38>)
 810b326:	681b      	ldr	r3, [r3, #0]
 810b328:	2b00      	cmp	r3, #0
 810b32a:	d102      	bne.n	810b332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810b32c:	2302      	movs	r3, #2
 810b32e:	607b      	str	r3, [r7, #4]
 810b330:	e001      	b.n	810b336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810b332:	2300      	movs	r3, #0
 810b334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810b336:	687b      	ldr	r3, [r7, #4]
	}
 810b338:	4618      	mov	r0, r3
 810b33a:	370c      	adds	r7, #12
 810b33c:	46bd      	mov	sp, r7
 810b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b342:	4770      	bx	lr
 810b344:	100085bc 	.word	0x100085bc
 810b348:	100085d8 	.word	0x100085d8

0810b34c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810b34c:	b580      	push	{r7, lr}
 810b34e:	b084      	sub	sp, #16
 810b350:	af00      	add	r7, sp, #0
 810b352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810b354:	687b      	ldr	r3, [r7, #4]
 810b356:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810b358:	2300      	movs	r3, #0
 810b35a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810b35c:	687b      	ldr	r3, [r7, #4]
 810b35e:	2b00      	cmp	r3, #0
 810b360:	d069      	beq.n	810b436 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810b362:	68bb      	ldr	r3, [r7, #8]
 810b364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b366:	4b36      	ldr	r3, [pc, #216]	; (810b440 <xTaskPriorityInherit+0xf4>)
 810b368:	681b      	ldr	r3, [r3, #0]
 810b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b36c:	429a      	cmp	r2, r3
 810b36e:	d259      	bcs.n	810b424 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810b370:	68bb      	ldr	r3, [r7, #8]
 810b372:	699b      	ldr	r3, [r3, #24]
 810b374:	2b00      	cmp	r3, #0
 810b376:	db06      	blt.n	810b386 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b378:	4b31      	ldr	r3, [pc, #196]	; (810b440 <xTaskPriorityInherit+0xf4>)
 810b37a:	681b      	ldr	r3, [r3, #0]
 810b37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b37e:	f1c3 0207 	rsb	r2, r3, #7
 810b382:	68bb      	ldr	r3, [r7, #8]
 810b384:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810b386:	68bb      	ldr	r3, [r7, #8]
 810b388:	6959      	ldr	r1, [r3, #20]
 810b38a:	68bb      	ldr	r3, [r7, #8]
 810b38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b38e:	4613      	mov	r3, r2
 810b390:	009b      	lsls	r3, r3, #2
 810b392:	4413      	add	r3, r2
 810b394:	009b      	lsls	r3, r3, #2
 810b396:	4a2b      	ldr	r2, [pc, #172]	; (810b444 <xTaskPriorityInherit+0xf8>)
 810b398:	4413      	add	r3, r2
 810b39a:	4299      	cmp	r1, r3
 810b39c:	d13a      	bne.n	810b414 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b39e:	68bb      	ldr	r3, [r7, #8]
 810b3a0:	3304      	adds	r3, #4
 810b3a2:	4618      	mov	r0, r3
 810b3a4:	f7fe fad2 	bl	810994c <uxListRemove>
 810b3a8:	4603      	mov	r3, r0
 810b3aa:	2b00      	cmp	r3, #0
 810b3ac:	d115      	bne.n	810b3da <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 810b3ae:	68bb      	ldr	r3, [r7, #8]
 810b3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b3b2:	4924      	ldr	r1, [pc, #144]	; (810b444 <xTaskPriorityInherit+0xf8>)
 810b3b4:	4613      	mov	r3, r2
 810b3b6:	009b      	lsls	r3, r3, #2
 810b3b8:	4413      	add	r3, r2
 810b3ba:	009b      	lsls	r3, r3, #2
 810b3bc:	440b      	add	r3, r1
 810b3be:	681b      	ldr	r3, [r3, #0]
 810b3c0:	2b00      	cmp	r3, #0
 810b3c2:	d10a      	bne.n	810b3da <xTaskPriorityInherit+0x8e>
 810b3c4:	68bb      	ldr	r3, [r7, #8]
 810b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b3c8:	2201      	movs	r2, #1
 810b3ca:	fa02 f303 	lsl.w	r3, r2, r3
 810b3ce:	43da      	mvns	r2, r3
 810b3d0:	4b1d      	ldr	r3, [pc, #116]	; (810b448 <xTaskPriorityInherit+0xfc>)
 810b3d2:	681b      	ldr	r3, [r3, #0]
 810b3d4:	4013      	ands	r3, r2
 810b3d6:	4a1c      	ldr	r2, [pc, #112]	; (810b448 <xTaskPriorityInherit+0xfc>)
 810b3d8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810b3da:	4b19      	ldr	r3, [pc, #100]	; (810b440 <xTaskPriorityInherit+0xf4>)
 810b3dc:	681b      	ldr	r3, [r3, #0]
 810b3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b3e0:	68bb      	ldr	r3, [r7, #8]
 810b3e2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810b3e4:	68bb      	ldr	r3, [r7, #8]
 810b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b3e8:	2201      	movs	r2, #1
 810b3ea:	409a      	lsls	r2, r3
 810b3ec:	4b16      	ldr	r3, [pc, #88]	; (810b448 <xTaskPriorityInherit+0xfc>)
 810b3ee:	681b      	ldr	r3, [r3, #0]
 810b3f0:	4313      	orrs	r3, r2
 810b3f2:	4a15      	ldr	r2, [pc, #84]	; (810b448 <xTaskPriorityInherit+0xfc>)
 810b3f4:	6013      	str	r3, [r2, #0]
 810b3f6:	68bb      	ldr	r3, [r7, #8]
 810b3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b3fa:	4613      	mov	r3, r2
 810b3fc:	009b      	lsls	r3, r3, #2
 810b3fe:	4413      	add	r3, r2
 810b400:	009b      	lsls	r3, r3, #2
 810b402:	4a10      	ldr	r2, [pc, #64]	; (810b444 <xTaskPriorityInherit+0xf8>)
 810b404:	441a      	add	r2, r3
 810b406:	68bb      	ldr	r3, [r7, #8]
 810b408:	3304      	adds	r3, #4
 810b40a:	4619      	mov	r1, r3
 810b40c:	4610      	mov	r0, r2
 810b40e:	f7fe fa40 	bl	8109892 <vListInsertEnd>
 810b412:	e004      	b.n	810b41e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810b414:	4b0a      	ldr	r3, [pc, #40]	; (810b440 <xTaskPriorityInherit+0xf4>)
 810b416:	681b      	ldr	r3, [r3, #0]
 810b418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b41a:	68bb      	ldr	r3, [r7, #8]
 810b41c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810b41e:	2301      	movs	r3, #1
 810b420:	60fb      	str	r3, [r7, #12]
 810b422:	e008      	b.n	810b436 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810b424:	68bb      	ldr	r3, [r7, #8]
 810b426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810b428:	4b05      	ldr	r3, [pc, #20]	; (810b440 <xTaskPriorityInherit+0xf4>)
 810b42a:	681b      	ldr	r3, [r3, #0]
 810b42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b42e:	429a      	cmp	r2, r3
 810b430:	d201      	bcs.n	810b436 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810b432:	2301      	movs	r3, #1
 810b434:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810b436:	68fb      	ldr	r3, [r7, #12]
	}
 810b438:	4618      	mov	r0, r3
 810b43a:	3710      	adds	r7, #16
 810b43c:	46bd      	mov	sp, r7
 810b43e:	bd80      	pop	{r7, pc}
 810b440:	100084b0 	.word	0x100084b0
 810b444:	100084b4 	.word	0x100084b4
 810b448:	100085b8 	.word	0x100085b8

0810b44c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810b44c:	b580      	push	{r7, lr}
 810b44e:	b086      	sub	sp, #24
 810b450:	af00      	add	r7, sp, #0
 810b452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810b454:	687b      	ldr	r3, [r7, #4]
 810b456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810b458:	2300      	movs	r3, #0
 810b45a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810b45c:	687b      	ldr	r3, [r7, #4]
 810b45e:	2b00      	cmp	r3, #0
 810b460:	d06c      	beq.n	810b53c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810b462:	4b39      	ldr	r3, [pc, #228]	; (810b548 <xTaskPriorityDisinherit+0xfc>)
 810b464:	681b      	ldr	r3, [r3, #0]
 810b466:	693a      	ldr	r2, [r7, #16]
 810b468:	429a      	cmp	r2, r3
 810b46a:	d009      	beq.n	810b480 <xTaskPriorityDisinherit+0x34>
 810b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b470:	f383 8811 	msr	BASEPRI, r3
 810b474:	f3bf 8f6f 	isb	sy
 810b478:	f3bf 8f4f 	dsb	sy
 810b47c:	60fb      	str	r3, [r7, #12]
 810b47e:	e7fe      	b.n	810b47e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 810b480:	693b      	ldr	r3, [r7, #16]
 810b482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b484:	2b00      	cmp	r3, #0
 810b486:	d109      	bne.n	810b49c <xTaskPriorityDisinherit+0x50>
 810b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b48c:	f383 8811 	msr	BASEPRI, r3
 810b490:	f3bf 8f6f 	isb	sy
 810b494:	f3bf 8f4f 	dsb	sy
 810b498:	60bb      	str	r3, [r7, #8]
 810b49a:	e7fe      	b.n	810b49a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810b49c:	693b      	ldr	r3, [r7, #16]
 810b49e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b4a0:	1e5a      	subs	r2, r3, #1
 810b4a2:	693b      	ldr	r3, [r7, #16]
 810b4a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810b4a6:	693b      	ldr	r3, [r7, #16]
 810b4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b4aa:	693b      	ldr	r3, [r7, #16]
 810b4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b4ae:	429a      	cmp	r2, r3
 810b4b0:	d044      	beq.n	810b53c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810b4b2:	693b      	ldr	r3, [r7, #16]
 810b4b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b4b6:	2b00      	cmp	r3, #0
 810b4b8:	d140      	bne.n	810b53c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b4ba:	693b      	ldr	r3, [r7, #16]
 810b4bc:	3304      	adds	r3, #4
 810b4be:	4618      	mov	r0, r3
 810b4c0:	f7fe fa44 	bl	810994c <uxListRemove>
 810b4c4:	4603      	mov	r3, r0
 810b4c6:	2b00      	cmp	r3, #0
 810b4c8:	d115      	bne.n	810b4f6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810b4ca:	693b      	ldr	r3, [r7, #16]
 810b4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b4ce:	491f      	ldr	r1, [pc, #124]	; (810b54c <xTaskPriorityDisinherit+0x100>)
 810b4d0:	4613      	mov	r3, r2
 810b4d2:	009b      	lsls	r3, r3, #2
 810b4d4:	4413      	add	r3, r2
 810b4d6:	009b      	lsls	r3, r3, #2
 810b4d8:	440b      	add	r3, r1
 810b4da:	681b      	ldr	r3, [r3, #0]
 810b4dc:	2b00      	cmp	r3, #0
 810b4de:	d10a      	bne.n	810b4f6 <xTaskPriorityDisinherit+0xaa>
 810b4e0:	693b      	ldr	r3, [r7, #16]
 810b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b4e4:	2201      	movs	r2, #1
 810b4e6:	fa02 f303 	lsl.w	r3, r2, r3
 810b4ea:	43da      	mvns	r2, r3
 810b4ec:	4b18      	ldr	r3, [pc, #96]	; (810b550 <xTaskPriorityDisinherit+0x104>)
 810b4ee:	681b      	ldr	r3, [r3, #0]
 810b4f0:	4013      	ands	r3, r2
 810b4f2:	4a17      	ldr	r2, [pc, #92]	; (810b550 <xTaskPriorityDisinherit+0x104>)
 810b4f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810b4f6:	693b      	ldr	r3, [r7, #16]
 810b4f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810b4fa:	693b      	ldr	r3, [r7, #16]
 810b4fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b4fe:	693b      	ldr	r3, [r7, #16]
 810b500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b502:	f1c3 0207 	rsb	r2, r3, #7
 810b506:	693b      	ldr	r3, [r7, #16]
 810b508:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810b50a:	693b      	ldr	r3, [r7, #16]
 810b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b50e:	2201      	movs	r2, #1
 810b510:	409a      	lsls	r2, r3
 810b512:	4b0f      	ldr	r3, [pc, #60]	; (810b550 <xTaskPriorityDisinherit+0x104>)
 810b514:	681b      	ldr	r3, [r3, #0]
 810b516:	4313      	orrs	r3, r2
 810b518:	4a0d      	ldr	r2, [pc, #52]	; (810b550 <xTaskPriorityDisinherit+0x104>)
 810b51a:	6013      	str	r3, [r2, #0]
 810b51c:	693b      	ldr	r3, [r7, #16]
 810b51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b520:	4613      	mov	r3, r2
 810b522:	009b      	lsls	r3, r3, #2
 810b524:	4413      	add	r3, r2
 810b526:	009b      	lsls	r3, r3, #2
 810b528:	4a08      	ldr	r2, [pc, #32]	; (810b54c <xTaskPriorityDisinherit+0x100>)
 810b52a:	441a      	add	r2, r3
 810b52c:	693b      	ldr	r3, [r7, #16]
 810b52e:	3304      	adds	r3, #4
 810b530:	4619      	mov	r1, r3
 810b532:	4610      	mov	r0, r2
 810b534:	f7fe f9ad 	bl	8109892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810b538:	2301      	movs	r3, #1
 810b53a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810b53c:	697b      	ldr	r3, [r7, #20]
	}
 810b53e:	4618      	mov	r0, r3
 810b540:	3718      	adds	r7, #24
 810b542:	46bd      	mov	sp, r7
 810b544:	bd80      	pop	{r7, pc}
 810b546:	bf00      	nop
 810b548:	100084b0 	.word	0x100084b0
 810b54c:	100084b4 	.word	0x100084b4
 810b550:	100085b8 	.word	0x100085b8

0810b554 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810b554:	b580      	push	{r7, lr}
 810b556:	b088      	sub	sp, #32
 810b558:	af00      	add	r7, sp, #0
 810b55a:	6078      	str	r0, [r7, #4]
 810b55c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810b55e:	687b      	ldr	r3, [r7, #4]
 810b560:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810b562:	2301      	movs	r3, #1
 810b564:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810b566:	687b      	ldr	r3, [r7, #4]
 810b568:	2b00      	cmp	r3, #0
 810b56a:	f000 8081 	beq.w	810b670 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810b56e:	69bb      	ldr	r3, [r7, #24]
 810b570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b572:	2b00      	cmp	r3, #0
 810b574:	d109      	bne.n	810b58a <vTaskPriorityDisinheritAfterTimeout+0x36>
 810b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b57a:	f383 8811 	msr	BASEPRI, r3
 810b57e:	f3bf 8f6f 	isb	sy
 810b582:	f3bf 8f4f 	dsb	sy
 810b586:	60fb      	str	r3, [r7, #12]
 810b588:	e7fe      	b.n	810b588 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810b58a:	69bb      	ldr	r3, [r7, #24]
 810b58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b58e:	683a      	ldr	r2, [r7, #0]
 810b590:	429a      	cmp	r2, r3
 810b592:	d902      	bls.n	810b59a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810b594:	683b      	ldr	r3, [r7, #0]
 810b596:	61fb      	str	r3, [r7, #28]
 810b598:	e002      	b.n	810b5a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810b59a:	69bb      	ldr	r3, [r7, #24]
 810b59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b59e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810b5a0:	69bb      	ldr	r3, [r7, #24]
 810b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b5a4:	69fa      	ldr	r2, [r7, #28]
 810b5a6:	429a      	cmp	r2, r3
 810b5a8:	d062      	beq.n	810b670 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810b5aa:	69bb      	ldr	r3, [r7, #24]
 810b5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810b5ae:	697a      	ldr	r2, [r7, #20]
 810b5b0:	429a      	cmp	r2, r3
 810b5b2:	d15d      	bne.n	810b670 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810b5b4:	4b30      	ldr	r3, [pc, #192]	; (810b678 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 810b5b6:	681b      	ldr	r3, [r3, #0]
 810b5b8:	69ba      	ldr	r2, [r7, #24]
 810b5ba:	429a      	cmp	r2, r3
 810b5bc:	d109      	bne.n	810b5d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 810b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b5c2:	f383 8811 	msr	BASEPRI, r3
 810b5c6:	f3bf 8f6f 	isb	sy
 810b5ca:	f3bf 8f4f 	dsb	sy
 810b5ce:	60bb      	str	r3, [r7, #8]
 810b5d0:	e7fe      	b.n	810b5d0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810b5d2:	69bb      	ldr	r3, [r7, #24]
 810b5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b5d6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810b5d8:	69bb      	ldr	r3, [r7, #24]
 810b5da:	69fa      	ldr	r2, [r7, #28]
 810b5dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810b5de:	69bb      	ldr	r3, [r7, #24]
 810b5e0:	699b      	ldr	r3, [r3, #24]
 810b5e2:	2b00      	cmp	r3, #0
 810b5e4:	db04      	blt.n	810b5f0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b5e6:	69fb      	ldr	r3, [r7, #28]
 810b5e8:	f1c3 0207 	rsb	r2, r3, #7
 810b5ec:	69bb      	ldr	r3, [r7, #24]
 810b5ee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810b5f0:	69bb      	ldr	r3, [r7, #24]
 810b5f2:	6959      	ldr	r1, [r3, #20]
 810b5f4:	693a      	ldr	r2, [r7, #16]
 810b5f6:	4613      	mov	r3, r2
 810b5f8:	009b      	lsls	r3, r3, #2
 810b5fa:	4413      	add	r3, r2
 810b5fc:	009b      	lsls	r3, r3, #2
 810b5fe:	4a1f      	ldr	r2, [pc, #124]	; (810b67c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810b600:	4413      	add	r3, r2
 810b602:	4299      	cmp	r1, r3
 810b604:	d134      	bne.n	810b670 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b606:	69bb      	ldr	r3, [r7, #24]
 810b608:	3304      	adds	r3, #4
 810b60a:	4618      	mov	r0, r3
 810b60c:	f7fe f99e 	bl	810994c <uxListRemove>
 810b610:	4603      	mov	r3, r0
 810b612:	2b00      	cmp	r3, #0
 810b614:	d115      	bne.n	810b642 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810b616:	69bb      	ldr	r3, [r7, #24]
 810b618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b61a:	4918      	ldr	r1, [pc, #96]	; (810b67c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810b61c:	4613      	mov	r3, r2
 810b61e:	009b      	lsls	r3, r3, #2
 810b620:	4413      	add	r3, r2
 810b622:	009b      	lsls	r3, r3, #2
 810b624:	440b      	add	r3, r1
 810b626:	681b      	ldr	r3, [r3, #0]
 810b628:	2b00      	cmp	r3, #0
 810b62a:	d10a      	bne.n	810b642 <vTaskPriorityDisinheritAfterTimeout+0xee>
 810b62c:	69bb      	ldr	r3, [r7, #24]
 810b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b630:	2201      	movs	r2, #1
 810b632:	fa02 f303 	lsl.w	r3, r2, r3
 810b636:	43da      	mvns	r2, r3
 810b638:	4b11      	ldr	r3, [pc, #68]	; (810b680 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b63a:	681b      	ldr	r3, [r3, #0]
 810b63c:	4013      	ands	r3, r2
 810b63e:	4a10      	ldr	r2, [pc, #64]	; (810b680 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b640:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810b642:	69bb      	ldr	r3, [r7, #24]
 810b644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b646:	2201      	movs	r2, #1
 810b648:	409a      	lsls	r2, r3
 810b64a:	4b0d      	ldr	r3, [pc, #52]	; (810b680 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b64c:	681b      	ldr	r3, [r3, #0]
 810b64e:	4313      	orrs	r3, r2
 810b650:	4a0b      	ldr	r2, [pc, #44]	; (810b680 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b652:	6013      	str	r3, [r2, #0]
 810b654:	69bb      	ldr	r3, [r7, #24]
 810b656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b658:	4613      	mov	r3, r2
 810b65a:	009b      	lsls	r3, r3, #2
 810b65c:	4413      	add	r3, r2
 810b65e:	009b      	lsls	r3, r3, #2
 810b660:	4a06      	ldr	r2, [pc, #24]	; (810b67c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810b662:	441a      	add	r2, r3
 810b664:	69bb      	ldr	r3, [r7, #24]
 810b666:	3304      	adds	r3, #4
 810b668:	4619      	mov	r1, r3
 810b66a:	4610      	mov	r0, r2
 810b66c:	f7fe f911 	bl	8109892 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810b670:	bf00      	nop
 810b672:	3720      	adds	r7, #32
 810b674:	46bd      	mov	sp, r7
 810b676:	bd80      	pop	{r7, pc}
 810b678:	100084b0 	.word	0x100084b0
 810b67c:	100084b4 	.word	0x100084b4
 810b680:	100085b8 	.word	0x100085b8

0810b684 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810b684:	b480      	push	{r7}
 810b686:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810b688:	4b07      	ldr	r3, [pc, #28]	; (810b6a8 <pvTaskIncrementMutexHeldCount+0x24>)
 810b68a:	681b      	ldr	r3, [r3, #0]
 810b68c:	2b00      	cmp	r3, #0
 810b68e:	d004      	beq.n	810b69a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810b690:	4b05      	ldr	r3, [pc, #20]	; (810b6a8 <pvTaskIncrementMutexHeldCount+0x24>)
 810b692:	681b      	ldr	r3, [r3, #0]
 810b694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810b696:	3201      	adds	r2, #1
 810b698:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 810b69a:	4b03      	ldr	r3, [pc, #12]	; (810b6a8 <pvTaskIncrementMutexHeldCount+0x24>)
 810b69c:	681b      	ldr	r3, [r3, #0]
	}
 810b69e:	4618      	mov	r0, r3
 810b6a0:	46bd      	mov	sp, r7
 810b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6a6:	4770      	bx	lr
 810b6a8:	100084b0 	.word	0x100084b0

0810b6ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810b6ac:	b580      	push	{r7, lr}
 810b6ae:	b084      	sub	sp, #16
 810b6b0:	af00      	add	r7, sp, #0
 810b6b2:	6078      	str	r0, [r7, #4]
 810b6b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810b6b6:	4b29      	ldr	r3, [pc, #164]	; (810b75c <prvAddCurrentTaskToDelayedList+0xb0>)
 810b6b8:	681b      	ldr	r3, [r3, #0]
 810b6ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b6bc:	4b28      	ldr	r3, [pc, #160]	; (810b760 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b6be:	681b      	ldr	r3, [r3, #0]
 810b6c0:	3304      	adds	r3, #4
 810b6c2:	4618      	mov	r0, r3
 810b6c4:	f7fe f942 	bl	810994c <uxListRemove>
 810b6c8:	4603      	mov	r3, r0
 810b6ca:	2b00      	cmp	r3, #0
 810b6cc:	d10b      	bne.n	810b6e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 810b6ce:	4b24      	ldr	r3, [pc, #144]	; (810b760 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b6d0:	681b      	ldr	r3, [r3, #0]
 810b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b6d4:	2201      	movs	r2, #1
 810b6d6:	fa02 f303 	lsl.w	r3, r2, r3
 810b6da:	43da      	mvns	r2, r3
 810b6dc:	4b21      	ldr	r3, [pc, #132]	; (810b764 <prvAddCurrentTaskToDelayedList+0xb8>)
 810b6de:	681b      	ldr	r3, [r3, #0]
 810b6e0:	4013      	ands	r3, r2
 810b6e2:	4a20      	ldr	r2, [pc, #128]	; (810b764 <prvAddCurrentTaskToDelayedList+0xb8>)
 810b6e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810b6e6:	687b      	ldr	r3, [r7, #4]
 810b6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b6ec:	d10a      	bne.n	810b704 <prvAddCurrentTaskToDelayedList+0x58>
 810b6ee:	683b      	ldr	r3, [r7, #0]
 810b6f0:	2b00      	cmp	r3, #0
 810b6f2:	d007      	beq.n	810b704 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b6f4:	4b1a      	ldr	r3, [pc, #104]	; (810b760 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b6f6:	681b      	ldr	r3, [r3, #0]
 810b6f8:	3304      	adds	r3, #4
 810b6fa:	4619      	mov	r1, r3
 810b6fc:	481a      	ldr	r0, [pc, #104]	; (810b768 <prvAddCurrentTaskToDelayedList+0xbc>)
 810b6fe:	f7fe f8c8 	bl	8109892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810b702:	e026      	b.n	810b752 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810b704:	68fa      	ldr	r2, [r7, #12]
 810b706:	687b      	ldr	r3, [r7, #4]
 810b708:	4413      	add	r3, r2
 810b70a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810b70c:	4b14      	ldr	r3, [pc, #80]	; (810b760 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b70e:	681b      	ldr	r3, [r3, #0]
 810b710:	68ba      	ldr	r2, [r7, #8]
 810b712:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810b714:	68ba      	ldr	r2, [r7, #8]
 810b716:	68fb      	ldr	r3, [r7, #12]
 810b718:	429a      	cmp	r2, r3
 810b71a:	d209      	bcs.n	810b730 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b71c:	4b13      	ldr	r3, [pc, #76]	; (810b76c <prvAddCurrentTaskToDelayedList+0xc0>)
 810b71e:	681a      	ldr	r2, [r3, #0]
 810b720:	4b0f      	ldr	r3, [pc, #60]	; (810b760 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b722:	681b      	ldr	r3, [r3, #0]
 810b724:	3304      	adds	r3, #4
 810b726:	4619      	mov	r1, r3
 810b728:	4610      	mov	r0, r2
 810b72a:	f7fe f8d6 	bl	81098da <vListInsert>
}
 810b72e:	e010      	b.n	810b752 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b730:	4b0f      	ldr	r3, [pc, #60]	; (810b770 <prvAddCurrentTaskToDelayedList+0xc4>)
 810b732:	681a      	ldr	r2, [r3, #0]
 810b734:	4b0a      	ldr	r3, [pc, #40]	; (810b760 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b736:	681b      	ldr	r3, [r3, #0]
 810b738:	3304      	adds	r3, #4
 810b73a:	4619      	mov	r1, r3
 810b73c:	4610      	mov	r0, r2
 810b73e:	f7fe f8cc 	bl	81098da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810b742:	4b0c      	ldr	r3, [pc, #48]	; (810b774 <prvAddCurrentTaskToDelayedList+0xc8>)
 810b744:	681b      	ldr	r3, [r3, #0]
 810b746:	68ba      	ldr	r2, [r7, #8]
 810b748:	429a      	cmp	r2, r3
 810b74a:	d202      	bcs.n	810b752 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 810b74c:	4a09      	ldr	r2, [pc, #36]	; (810b774 <prvAddCurrentTaskToDelayedList+0xc8>)
 810b74e:	68bb      	ldr	r3, [r7, #8]
 810b750:	6013      	str	r3, [r2, #0]
}
 810b752:	bf00      	nop
 810b754:	3710      	adds	r7, #16
 810b756:	46bd      	mov	sp, r7
 810b758:	bd80      	pop	{r7, pc}
 810b75a:	bf00      	nop
 810b75c:	100085b4 	.word	0x100085b4
 810b760:	100084b0 	.word	0x100084b0
 810b764:	100085b8 	.word	0x100085b8
 810b768:	1000859c 	.word	0x1000859c
 810b76c:	1000856c 	.word	0x1000856c
 810b770:	10008568 	.word	0x10008568
 810b774:	100085d0 	.word	0x100085d0

0810b778 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 810b778:	b580      	push	{r7, lr}
 810b77a:	b082      	sub	sp, #8
 810b77c:	af00      	add	r7, sp, #0
 810b77e:	6078      	str	r0, [r7, #4]
 810b780:	6039      	str	r1, [r7, #0]
 810b782:	687b      	ldr	r3, [r7, #4]
 810b784:	683a      	ldr	r2, [r7, #0]
 810b786:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 810b788:	687b      	ldr	r3, [r7, #4]
 810b78a:	683a      	ldr	r2, [r7, #0]
 810b78c:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 810b78e:	2103      	movs	r1, #3
 810b790:	4805      	ldr	r0, [pc, #20]	; (810b7a8 <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 810b792:	f7fd fe47 	bl	8109424 <osSemaphoreCreate>
 810b796:	4602      	mov	r2, r0
 810b798:	687b      	ldr	r3, [r7, #4]
 810b79a:	605a      	str	r2, [r3, #4]
}
 810b79c:	687b      	ldr	r3, [r7, #4]
 810b79e:	4618      	mov	r0, r3
 810b7a0:	3708      	adds	r7, #8
 810b7a2:	46bd      	mov	sp, r7
 810b7a4:	bd80      	pop	{r7, pc}
 810b7a6:	bf00      	nop
 810b7a8:	08115788 	.word	0x08115788

0810b7ac <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 810b7ac:	b580      	push	{r7, lr}
 810b7ae:	b084      	sub	sp, #16
 810b7b0:	af00      	add	r7, sp, #0
 810b7b2:	60f8      	str	r0, [r7, #12]
 810b7b4:	60b9      	str	r1, [r7, #8]
 810b7b6:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 810b7b8:	2002      	movs	r0, #2
 810b7ba:	f7f9 fce9 	bl	8105190 <HAL_HSEM_IsSemTaken>
 810b7be:	4603      	mov	r3, r0
 810b7c0:	2b00      	cmp	r3, #0
 810b7c2:	bf14      	ite	ne
 810b7c4:	2301      	movne	r3, #1
 810b7c6:	2300      	moveq	r3, #0
 810b7c8:	b2db      	uxtb	r3, r3
 810b7ca:	2b00      	cmp	r3, #0
 810b7cc:	d000      	beq.n	810b7d0 <_ZN7Console8transmitEPhm+0x24>
 810b7ce:	e7f3      	b.n	810b7b8 <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 810b7d0:	2102      	movs	r1, #2
 810b7d2:	2002      	movs	r0, #2
 810b7d4:	f7f9 fcb8 	bl	8105148 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 810b7d8:	68fb      	ldr	r3, [r7, #12]
 810b7da:	6818      	ldr	r0, [r3, #0]
 810b7dc:	687b      	ldr	r3, [r7, #4]
 810b7de:	b29a      	uxth	r2, r3
 810b7e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 810b7e4:	68b9      	ldr	r1, [r7, #8]
 810b7e6:	f7fc faa3 	bl	8107d30 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 810b7ea:	2102      	movs	r1, #2
 810b7ec:	2002      	movs	r0, #2
 810b7ee:	f7f9 fce5 	bl	81051bc <HAL_HSEM_Release>
}
 810b7f2:	bf00      	nop
 810b7f4:	3710      	adds	r7, #16
 810b7f6:	46bd      	mov	sp, r7
 810b7f8:	bd80      	pop	{r7, pc}

0810b7fa <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 810b7fa:	b580      	push	{r7, lr}
 810b7fc:	b082      	sub	sp, #8
 810b7fe:	af00      	add	r7, sp, #0
 810b800:	6078      	str	r0, [r7, #4]
 810b802:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 810b804:	6838      	ldr	r0, [r7, #0]
 810b806:	f7f4 fd75 	bl	81002f4 <strlen>
 810b80a:	4603      	mov	r3, r0
 810b80c:	461a      	mov	r2, r3
 810b80e:	6839      	ldr	r1, [r7, #0]
 810b810:	6878      	ldr	r0, [r7, #4]
 810b812:	f7ff ffcb 	bl	810b7ac <_ZN7Console8transmitEPhm>
}
 810b816:	bf00      	nop
 810b818:	3708      	adds	r7, #8
 810b81a:	46bd      	mov	sp, r7
 810b81c:	bd80      	pop	{r7, pc}

0810b81e <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 810b81e:	b40e      	push	{r1, r2, r3}
 810b820:	b580      	push	{r7, lr}
 810b822:	b085      	sub	sp, #20
 810b824:	af00      	add	r7, sp, #0
 810b826:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810b828:	f107 0320 	add.w	r3, r7, #32
 810b82c:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 810b82e:	687b      	ldr	r3, [r7, #4]
 810b830:	3308      	adds	r3, #8
 810b832:	68fa      	ldr	r2, [r7, #12]
 810b834:	69f9      	ldr	r1, [r7, #28]
 810b836:	4618      	mov	r0, r3
 810b838:	f007 f9d4 	bl	8112be4 <vsiprintf>
 810b83c:	4603      	mov	r3, r0
 810b83e:	2b00      	cmp	r3, #0
 810b840:	bfcc      	ite	gt
 810b842:	2301      	movgt	r3, #1
 810b844:	2300      	movle	r3, #0
 810b846:	b2db      	uxtb	r3, r3
 810b848:	2b00      	cmp	r3, #0
 810b84a:	d005      	beq.n	810b858 <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 810b84c:	687b      	ldr	r3, [r7, #4]
 810b84e:	3308      	adds	r3, #8
 810b850:	4619      	mov	r1, r3
 810b852:	6878      	ldr	r0, [r7, #4]
 810b854:	f7ff ffd1 	bl	810b7fa <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 810b858:	bf00      	nop
 810b85a:	3714      	adds	r7, #20
 810b85c:	46bd      	mov	sp, r7
 810b85e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810b862:	b003      	add	sp, #12
 810b864:	4770      	bx	lr
	...

0810b868 <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 810b868:	b580      	push	{r7, lr}
 810b86a:	b082      	sub	sp, #8
 810b86c:	af00      	add	r7, sp, #0
 810b86e:	6078      	str	r0, [r7, #4]
 810b870:	6039      	str	r1, [r7, #0]
 810b872:	687b      	ldr	r3, [r7, #4]
 810b874:	2b01      	cmp	r3, #1
 810b876:	d108      	bne.n	810b88a <_Z41__static_initialization_and_destruction_0ii+0x22>
 810b878:	683b      	ldr	r3, [r7, #0]
 810b87a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810b87e:	4293      	cmp	r3, r2
 810b880:	d103      	bne.n	810b88a <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 810b882:	4904      	ldr	r1, [pc, #16]	; (810b894 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 810b884:	4804      	ldr	r0, [pc, #16]	; (810b898 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 810b886:	f7ff ff77 	bl	810b778 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 810b88a:	bf00      	nop
 810b88c:	3708      	adds	r7, #8
 810b88e:	46bd      	mov	sp, r7
 810b890:	bd80      	pop	{r7, pc}
 810b892:	bf00      	nop
 810b894:	1000e208 	.word	0x1000e208
 810b898:	100085dc 	.word	0x100085dc

0810b89c <_GLOBAL__sub_I_console>:
 810b89c:	b580      	push	{r7, lr}
 810b89e:	af00      	add	r7, sp, #0
 810b8a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810b8a4:	2001      	movs	r0, #1
 810b8a6:	f7ff ffdf 	bl	810b868 <_Z41__static_initialization_and_destruction_0ii>
 810b8aa:	bd80      	pop	{r7, pc}

0810b8ac <_ZN8Profiler6enableEv>:
			profiler->depth_to_display--;
		}
	}
}

void Profiler::enable() {
 810b8ac:	b480      	push	{r7}
 810b8ae:	b085      	sub	sp, #20
 810b8b0:	af00      	add	r7, sp, #0
 810b8b2:	6078      	str	r0, [r7, #4]
	profiling_requested = true;
 810b8b4:	687b      	ldr	r3, [r7, #4]
 810b8b6:	2201      	movs	r2, #1
 810b8b8:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340

	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810b8bc:	2300      	movs	r3, #0
 810b8be:	73fb      	strb	r3, [r7, #15]
 810b8c0:	7bfb      	ldrb	r3, [r7, #15]
 810b8c2:	2b0f      	cmp	r3, #15
 810b8c4:	d80c      	bhi.n	810b8e0 <_ZN8Profiler6enableEv+0x34>
		profilers[i].depth_to_display = -1;
 810b8c6:	7bfb      	ldrb	r3, [r7, #15]
 810b8c8:	687a      	ldr	r2, [r7, #4]
 810b8ca:	2134      	movs	r1, #52	; 0x34
 810b8cc:	fb01 f303 	mul.w	r3, r1, r3
 810b8d0:	4413      	add	r3, r2
 810b8d2:	3308      	adds	r3, #8
 810b8d4:	22ff      	movs	r2, #255	; 0xff
 810b8d6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810b8d8:	7bfb      	ldrb	r3, [r7, #15]
 810b8da:	3301      	adds	r3, #1
 810b8dc:	73fb      	strb	r3, [r7, #15]
 810b8de:	e7ef      	b.n	810b8c0 <_ZN8Profiler6enableEv+0x14>
	}
}
 810b8e0:	bf00      	nop
 810b8e2:	3714      	adds	r7, #20
 810b8e4:	46bd      	mov	sp, r7
 810b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8ea:	4770      	bx	lr

0810b8ec <_ZN8Profiler7disableEv>:

void Profiler::disable() {
 810b8ec:	b480      	push	{r7}
 810b8ee:	b083      	sub	sp, #12
 810b8f0:	af00      	add	r7, sp, #0
 810b8f2:	6078      	str	r0, [r7, #4]
	profiling = false;
 810b8f4:	687b      	ldr	r3, [r7, #4]
 810b8f6:	2200      	movs	r2, #0
 810b8f8:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
}
 810b8fc:	bf00      	nop
 810b8fe:	370c      	adds	r7, #12
 810b900:	46bd      	mov	sp, r7
 810b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b906:	4770      	bx	lr

0810b908 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
 810b908:	b480      	push	{r7}
 810b90a:	b083      	sub	sp, #12
 810b90c:	af00      	add	r7, sp, #0
 810b90e:	6078      	str	r0, [r7, #4]
 810b910:	4a04      	ldr	r2, [pc, #16]	; (810b924 <_ZN6ThreadD1Ev+0x1c>)
 810b912:	687b      	ldr	r3, [r7, #4]
 810b914:	601a      	str	r2, [r3, #0]
 810b916:	687b      	ldr	r3, [r7, #4]
 810b918:	4618      	mov	r0, r3
 810b91a:	370c      	adds	r7, #12
 810b91c:	46bd      	mov	sp, r7
 810b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b922:	4770      	bx	lr
 810b924:	081157b0 	.word	0x081157b0

0810b928 <_ZN6ThreadD0Ev>:
 810b928:	b580      	push	{r7, lr}
 810b92a:	b082      	sub	sp, #8
 810b92c:	af00      	add	r7, sp, #0
 810b92e:	6078      	str	r0, [r7, #4]
 810b930:	6878      	ldr	r0, [r7, #4]
 810b932:	f7ff ffe9 	bl	810b908 <_ZN6ThreadD1Ev>
 810b936:	2110      	movs	r1, #16
 810b938:	6878      	ldr	r0, [r7, #4]
 810b93a:	f006 f9d6 	bl	8111cea <_ZdlPvj>
 810b93e:	687b      	ldr	r3, [r7, #4]
 810b940:	4618      	mov	r0, r3
 810b942:	3708      	adds	r7, #8
 810b944:	46bd      	mov	sp, r7
 810b946:	bd80      	pop	{r7, pc}

0810b948 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:


#include "Debug.h"


Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 810b948:	b580      	push	{r7, lr}
 810b94a:	b084      	sub	sp, #16
 810b94c:	af00      	add	r7, sp, #0
 810b94e:	60f8      	str	r0, [r7, #12]
 810b950:	60b9      	str	r1, [r7, #8]
 810b952:	607a      	str	r2, [r7, #4]
 810b954:	68fb      	ldr	r3, [r7, #12]
 810b956:	4910      	ldr	r1, [pc, #64]	; (810b998 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x50>)
 810b958:	4618      	mov	r0, r3
 810b95a:	f005 fecb 	bl	81116f4 <_ZN6ThreadC1EPKc>
 810b95e:	4a0f      	ldr	r2, [pc, #60]	; (810b99c <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x54>)
 810b960:	68fb      	ldr	r3, [r7, #12]
 810b962:	601a      	str	r2, [r3, #0]
 810b964:	68fb      	ldr	r3, [r7, #12]
 810b966:	68ba      	ldr	r2, [r7, #8]
 810b968:	611a      	str	r2, [r3, #16]
 810b96a:	68fb      	ldr	r3, [r7, #12]
 810b96c:	687a      	ldr	r2, [r7, #4]
 810b96e:	615a      	str	r2, [r3, #20]
 810b970:	68fb      	ldr	r3, [r7, #12]
 810b972:	2200      	movs	r2, #0
 810b974:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 810b978:	68fb      	ldr	r3, [r7, #12]
 810b97a:	2200      	movs	r2, #0
 810b97c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
 810b980:	68fb      	ldr	r3, [r7, #12]
 810b982:	f503 7206 	add.w	r2, r3, #536	; 0x218
 810b986:	68fb      	ldr	r3, [r7, #12]
 810b988:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
}
 810b98c:	68fb      	ldr	r3, [r7, #12]
 810b98e:	4618      	mov	r0, r3
 810b990:	3710      	adds	r7, #16
 810b992:	46bd      	mov	sp, r7
 810b994:	bd80      	pop	{r7, pc}
 810b996:	bf00      	nop
 810b998:	08114da0 	.word	0x08114da0
 810b99c:	08115798 	.word	0x08115798

0810b9a0 <_ZN5Shell4initEv>:

void Shell::init() {
 810b9a0:	b580      	push	{r7, lr}
 810b9a2:	b082      	sub	sp, #8
 810b9a4:	af00      	add	r7, sp, #0
 810b9a6:	6078      	str	r0, [r7, #4]
	console.printf("\x1b[2J\x1b[H");
 810b9a8:	490a      	ldr	r1, [pc, #40]	; (810b9d4 <_ZN5Shell4initEv+0x34>)
 810b9aa:	480b      	ldr	r0, [pc, #44]	; (810b9d8 <_ZN5Shell4initEv+0x38>)
 810b9ac:	f7ff ff37 	bl	810b81e <_ZN7Console6printfEPKcz>
	console.printf("----- EPFL Xplore Avionics Shell -----\r\n");
 810b9b0:	490a      	ldr	r1, [pc, #40]	; (810b9dc <_ZN5Shell4initEv+0x3c>)
 810b9b2:	4809      	ldr	r0, [pc, #36]	; (810b9d8 <_ZN5Shell4initEv+0x38>)
 810b9b4:	f7ff ff33 	bl	810b81e <_ZN7Console6printfEPKcz>
	HAL_UART_Receive_DMA(uart, dma_buffer, CMD_BUFFER_SIZE);
 810b9b8:	687b      	ldr	r3, [r7, #4]
 810b9ba:	6918      	ldr	r0, [r3, #16]
 810b9bc:	687b      	ldr	r3, [r7, #4]
 810b9be:	3318      	adds	r3, #24
 810b9c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 810b9c4:	4619      	mov	r1, r3
 810b9c6:	f7fc fa49 	bl	8107e5c <HAL_UART_Receive_DMA>
}
 810b9ca:	bf00      	nop
 810b9cc:	3708      	adds	r7, #8
 810b9ce:	46bd      	mov	sp, r7
 810b9d0:	bd80      	pop	{r7, pc}
 810b9d2:	bf00      	nop
 810b9d4:	08114da8 	.word	0x08114da8
 810b9d8:	100085dc 	.word	0x100085dc
 810b9dc:	08114db0 	.word	0x08114db0

0810b9e0 <_ZN5Shell4loopEv>:

void Shell::loop() {
 810b9e0:	b580      	push	{r7, lr}
 810b9e2:	b082      	sub	sp, #8
 810b9e4:	af00      	add	r7, sp, #0
 810b9e6:	6078      	str	r0, [r7, #4]
	endDmaStreamIndex = CMD_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 810b9e8:	687b      	ldr	r3, [r7, #4]
 810b9ea:	691b      	ldr	r3, [r3, #16]
 810b9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b9ee:	681b      	ldr	r3, [r3, #0]
 810b9f0:	4a50      	ldr	r2, [pc, #320]	; (810bb34 <_ZN5Shell4loopEv+0x154>)
 810b9f2:	4293      	cmp	r3, r2
 810b9f4:	d068      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810b9f6:	687b      	ldr	r3, [r7, #4]
 810b9f8:	691b      	ldr	r3, [r3, #16]
 810b9fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b9fc:	681b      	ldr	r3, [r3, #0]
 810b9fe:	4a4e      	ldr	r2, [pc, #312]	; (810bb38 <_ZN5Shell4loopEv+0x158>)
 810ba00:	4293      	cmp	r3, r2
 810ba02:	d061      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba04:	687b      	ldr	r3, [r7, #4]
 810ba06:	691b      	ldr	r3, [r3, #16]
 810ba08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba0a:	681b      	ldr	r3, [r3, #0]
 810ba0c:	4a4b      	ldr	r2, [pc, #300]	; (810bb3c <_ZN5Shell4loopEv+0x15c>)
 810ba0e:	4293      	cmp	r3, r2
 810ba10:	d05a      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba12:	687b      	ldr	r3, [r7, #4]
 810ba14:	691b      	ldr	r3, [r3, #16]
 810ba16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba18:	681b      	ldr	r3, [r3, #0]
 810ba1a:	4a49      	ldr	r2, [pc, #292]	; (810bb40 <_ZN5Shell4loopEv+0x160>)
 810ba1c:	4293      	cmp	r3, r2
 810ba1e:	d053      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba20:	687b      	ldr	r3, [r7, #4]
 810ba22:	691b      	ldr	r3, [r3, #16]
 810ba24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba26:	681b      	ldr	r3, [r3, #0]
 810ba28:	4a46      	ldr	r2, [pc, #280]	; (810bb44 <_ZN5Shell4loopEv+0x164>)
 810ba2a:	4293      	cmp	r3, r2
 810ba2c:	d04c      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba2e:	687b      	ldr	r3, [r7, #4]
 810ba30:	691b      	ldr	r3, [r3, #16]
 810ba32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba34:	681b      	ldr	r3, [r3, #0]
 810ba36:	4a44      	ldr	r2, [pc, #272]	; (810bb48 <_ZN5Shell4loopEv+0x168>)
 810ba38:	4293      	cmp	r3, r2
 810ba3a:	d045      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba3c:	687b      	ldr	r3, [r7, #4]
 810ba3e:	691b      	ldr	r3, [r3, #16]
 810ba40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba42:	681b      	ldr	r3, [r3, #0]
 810ba44:	4a41      	ldr	r2, [pc, #260]	; (810bb4c <_ZN5Shell4loopEv+0x16c>)
 810ba46:	4293      	cmp	r3, r2
 810ba48:	d03e      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba4a:	687b      	ldr	r3, [r7, #4]
 810ba4c:	691b      	ldr	r3, [r3, #16]
 810ba4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba50:	681b      	ldr	r3, [r3, #0]
 810ba52:	4a3f      	ldr	r2, [pc, #252]	; (810bb50 <_ZN5Shell4loopEv+0x170>)
 810ba54:	4293      	cmp	r3, r2
 810ba56:	d037      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba58:	687b      	ldr	r3, [r7, #4]
 810ba5a:	691b      	ldr	r3, [r3, #16]
 810ba5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba5e:	681b      	ldr	r3, [r3, #0]
 810ba60:	4a3c      	ldr	r2, [pc, #240]	; (810bb54 <_ZN5Shell4loopEv+0x174>)
 810ba62:	4293      	cmp	r3, r2
 810ba64:	d030      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba66:	687b      	ldr	r3, [r7, #4]
 810ba68:	691b      	ldr	r3, [r3, #16]
 810ba6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba6c:	681b      	ldr	r3, [r3, #0]
 810ba6e:	4a3a      	ldr	r2, [pc, #232]	; (810bb58 <_ZN5Shell4loopEv+0x178>)
 810ba70:	4293      	cmp	r3, r2
 810ba72:	d029      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba74:	687b      	ldr	r3, [r7, #4]
 810ba76:	691b      	ldr	r3, [r3, #16]
 810ba78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba7a:	681b      	ldr	r3, [r3, #0]
 810ba7c:	4a37      	ldr	r2, [pc, #220]	; (810bb5c <_ZN5Shell4loopEv+0x17c>)
 810ba7e:	4293      	cmp	r3, r2
 810ba80:	d022      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba82:	687b      	ldr	r3, [r7, #4]
 810ba84:	691b      	ldr	r3, [r3, #16]
 810ba86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba88:	681b      	ldr	r3, [r3, #0]
 810ba8a:	4a35      	ldr	r2, [pc, #212]	; (810bb60 <_ZN5Shell4loopEv+0x180>)
 810ba8c:	4293      	cmp	r3, r2
 810ba8e:	d01b      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba90:	687b      	ldr	r3, [r7, #4]
 810ba92:	691b      	ldr	r3, [r3, #16]
 810ba94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba96:	681b      	ldr	r3, [r3, #0]
 810ba98:	4a32      	ldr	r2, [pc, #200]	; (810bb64 <_ZN5Shell4loopEv+0x184>)
 810ba9a:	4293      	cmp	r3, r2
 810ba9c:	d014      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810ba9e:	687b      	ldr	r3, [r7, #4]
 810baa0:	691b      	ldr	r3, [r3, #16]
 810baa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810baa4:	681b      	ldr	r3, [r3, #0]
 810baa6:	4a30      	ldr	r2, [pc, #192]	; (810bb68 <_ZN5Shell4loopEv+0x188>)
 810baa8:	4293      	cmp	r3, r2
 810baaa:	d00d      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810baac:	687b      	ldr	r3, [r7, #4]
 810baae:	691b      	ldr	r3, [r3, #16]
 810bab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bab2:	681b      	ldr	r3, [r3, #0]
 810bab4:	4a2d      	ldr	r2, [pc, #180]	; (810bb6c <_ZN5Shell4loopEv+0x18c>)
 810bab6:	4293      	cmp	r3, r2
 810bab8:	d006      	beq.n	810bac8 <_ZN5Shell4loopEv+0xe8>
 810baba:	687b      	ldr	r3, [r7, #4]
 810babc:	691b      	ldr	r3, [r3, #16]
 810babe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bac0:	681b      	ldr	r3, [r3, #0]
 810bac2:	4a2b      	ldr	r2, [pc, #172]	; (810bb70 <_ZN5Shell4loopEv+0x190>)
 810bac4:	4293      	cmp	r3, r2
 810bac6:	d107      	bne.n	810bad8 <_ZN5Shell4loopEv+0xf8>
 810bac8:	687b      	ldr	r3, [r7, #4]
 810baca:	691b      	ldr	r3, [r3, #16]
 810bacc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bace:	681b      	ldr	r3, [r3, #0]
 810bad0:	685b      	ldr	r3, [r3, #4]
 810bad2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810bad6:	e006      	b.n	810bae6 <_ZN5Shell4loopEv+0x106>
 810bad8:	687b      	ldr	r3, [r7, #4]
 810bada:	691b      	ldr	r3, [r3, #16]
 810badc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bade:	681b      	ldr	r3, [r3, #0]
 810bae0:	685b      	ldr	r3, [r3, #4]
 810bae2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810bae6:	687a      	ldr	r2, [r7, #4]
 810bae8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c

	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810baec:	687b      	ldr	r3, [r7, #4]
 810baee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 810baf2:	687b      	ldr	r3, [r7, #4]
 810baf4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 810baf8:	429a      	cmp	r2, r3
 810bafa:	d013      	beq.n	810bb24 <_ZN5Shell4loopEv+0x144>
		receiveByte(dma_buffer[lastDmaStreamIndex]);
 810bafc:	687b      	ldr	r3, [r7, #4]
 810bafe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810bb02:	687a      	ldr	r2, [r7, #4]
 810bb04:	4413      	add	r3, r2
 810bb06:	7e1b      	ldrb	r3, [r3, #24]
 810bb08:	4619      	mov	r1, r3
 810bb0a:	6878      	ldr	r0, [r7, #4]
 810bb0c:	f000 f832 	bl	810bb74 <_ZN5Shell11receiveByteEc>
		lastDmaStreamIndex = (lastDmaStreamIndex + 1) % CMD_BUFFER_SIZE;
 810bb10:	687b      	ldr	r3, [r7, #4]
 810bb12:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810bb16:	3301      	adds	r3, #1
 810bb18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810bb1c:	687b      	ldr	r3, [r7, #4]
 810bb1e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810bb22:	e7e3      	b.n	810baec <_ZN5Shell4loopEv+0x10c>
	}

	osDelay(10 / portTICK_PERIOD_MS);
 810bb24:	200a      	movs	r0, #10
 810bb26:	f7fd fc69 	bl	81093fc <osDelay>
}
 810bb2a:	bf00      	nop
 810bb2c:	3708      	adds	r7, #8
 810bb2e:	46bd      	mov	sp, r7
 810bb30:	bd80      	pop	{r7, pc}
 810bb32:	bf00      	nop
 810bb34:	40020010 	.word	0x40020010
 810bb38:	40020028 	.word	0x40020028
 810bb3c:	40020040 	.word	0x40020040
 810bb40:	40020058 	.word	0x40020058
 810bb44:	40020070 	.word	0x40020070
 810bb48:	40020088 	.word	0x40020088
 810bb4c:	400200a0 	.word	0x400200a0
 810bb50:	400200b8 	.word	0x400200b8
 810bb54:	40020410 	.word	0x40020410
 810bb58:	40020428 	.word	0x40020428
 810bb5c:	40020440 	.word	0x40020440
 810bb60:	40020458 	.word	0x40020458
 810bb64:	40020470 	.word	0x40020470
 810bb68:	40020488 	.word	0x40020488
 810bb6c:	400204a0 	.word	0x400204a0
 810bb70:	400204b8 	.word	0x400204b8

0810bb74 <_ZN5Shell11receiveByteEc>:


void Shell::receiveByte(char cbuf) {
 810bb74:	b580      	push	{r7, lr}
 810bb76:	b084      	sub	sp, #16
 810bb78:	af00      	add	r7, sp, #0
 810bb7a:	6078      	str	r0, [r7, #4]
 810bb7c:	460b      	mov	r3, r1
 810bb7e:	70fb      	strb	r3, [r7, #3]
	if(cbuf == '\0') {
 810bb80:	78fb      	ldrb	r3, [r7, #3]
 810bb82:	2b00      	cmp	r3, #0
 810bb84:	f000 809f 	beq.w	810bcc6 <_ZN5Shell11receiveByteEc+0x152>
		return;
	}

	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
 810bb88:	78fb      	ldrb	r3, [r7, #3]
 810bb8a:	2b0a      	cmp	r3, #10
 810bb8c:	d050      	beq.n	810bc30 <_ZN5Shell11receiveByteEc+0xbc>
 810bb8e:	78fb      	ldrb	r3, [r7, #3]
 810bb90:	2b0d      	cmp	r3, #13
 810bb92:	d04d      	beq.n	810bc30 <_ZN5Shell11receiveByteEc+0xbc>
		command_buffer[command_index++] = cbuf;
 810bb94:	687b      	ldr	r3, [r7, #4]
 810bb96:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 810bb9a:	1c5a      	adds	r2, r3, #1
 810bb9c:	b2d1      	uxtb	r1, r2
 810bb9e:	687a      	ldr	r2, [r7, #4]
 810bba0:	f882 1420 	strb.w	r1, [r2, #1056]	; 0x420
 810bba4:	461a      	mov	r2, r3
 810bba6:	687b      	ldr	r3, [r7, #4]
 810bba8:	4413      	add	r3, r2
 810bbaa:	78fa      	ldrb	r2, [r7, #3]
 810bbac:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

		if(cbuf == ' ') {
 810bbb0:	78fb      	ldrb	r3, [r7, #3]
 810bbb2:	2b20      	cmp	r3, #32
 810bbb4:	f040 8089 	bne.w	810bcca <_ZN5Shell11receiveByteEc+0x156>
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810bbb8:	687b      	ldr	r3, [r7, #4]
 810bbba:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bbbe:	687a      	ldr	r2, [r7, #4]
 810bbc0:	3384      	adds	r3, #132	; 0x84
 810bbc2:	00db      	lsls	r3, r3, #3
 810bbc4:	4413      	add	r3, r2
 810bbc6:	685b      	ldr	r3, [r3, #4]
 810bbc8:	461a      	mov	r2, r3
 810bbca:	687b      	ldr	r3, [r7, #4]
 810bbcc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 810bbd0:	1ad3      	subs	r3, r2, r3
 810bbd2:	73fb      	strb	r3, [r7, #15]

			cmd.components[cmd.num_components].length = command_index - start_index - 1;
 810bbd4:	687b      	ldr	r3, [r7, #4]
 810bbd6:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 810bbda:	7bfb      	ldrb	r3, [r7, #15]
 810bbdc:	1ad3      	subs	r3, r2, r3
 810bbde:	b2db      	uxtb	r3, r3
 810bbe0:	687a      	ldr	r2, [r7, #4]
 810bbe2:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
 810bbe6:	4610      	mov	r0, r2
 810bbe8:	3b01      	subs	r3, #1
 810bbea:	b2d9      	uxtb	r1, r3
 810bbec:	687a      	ldr	r2, [r7, #4]
 810bbee:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810bbf2:	00db      	lsls	r3, r3, #3
 810bbf4:	4413      	add	r3, r2
 810bbf6:	460a      	mov	r2, r1
 810bbf8:	721a      	strb	r2, [r3, #8]
			cmd.num_components++;
 810bbfa:	687b      	ldr	r3, [r7, #4]
 810bbfc:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bc00:	3301      	adds	r3, #1
 810bc02:	b2da      	uxtb	r2, r3
 810bc04:	687b      	ldr	r3, [r7, #4]
 810bc06:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
 810bc0a:	687b      	ldr	r3, [r7, #4]
 810bc0c:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 810bc10:	461a      	mov	r2, r3
 810bc12:	687b      	ldr	r3, [r7, #4]
 810bc14:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bc18:	4618      	mov	r0, r3
 810bc1a:	f502 7306 	add.w	r3, r2, #536	; 0x218
 810bc1e:	687a      	ldr	r2, [r7, #4]
 810bc20:	441a      	add	r2, r3
 810bc22:	6879      	ldr	r1, [r7, #4]
 810bc24:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810bc28:	00db      	lsls	r3, r3, #3
 810bc2a:	440b      	add	r3, r1
 810bc2c:	605a      	str	r2, [r3, #4]
		}
 810bc2e:	e04c      	b.n	810bcca <_ZN5Shell11receiveByteEc+0x156>
	} else {
		uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810bc30:	687b      	ldr	r3, [r7, #4]
 810bc32:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bc36:	687a      	ldr	r2, [r7, #4]
 810bc38:	3384      	adds	r3, #132	; 0x84
 810bc3a:	00db      	lsls	r3, r3, #3
 810bc3c:	4413      	add	r3, r2
 810bc3e:	685b      	ldr	r3, [r3, #4]
 810bc40:	461a      	mov	r2, r3
 810bc42:	687b      	ldr	r3, [r7, #4]
 810bc44:	f503 7306 	add.w	r3, r3, #536	; 0x218
 810bc48:	1ad3      	subs	r3, r2, r3
 810bc4a:	73bb      	strb	r3, [r7, #14]
		cmd.components[cmd.num_components].length = command_index - start_index;
 810bc4c:	687b      	ldr	r3, [r7, #4]
 810bc4e:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 810bc52:	687b      	ldr	r3, [r7, #4]
 810bc54:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bc58:	4618      	mov	r0, r3
 810bc5a:	7bbb      	ldrb	r3, [r7, #14]
 810bc5c:	1ad3      	subs	r3, r2, r3
 810bc5e:	b2d9      	uxtb	r1, r3
 810bc60:	687a      	ldr	r2, [r7, #4]
 810bc62:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810bc66:	00db      	lsls	r3, r3, #3
 810bc68:	4413      	add	r3, r2
 810bc6a:	460a      	mov	r2, r1
 810bc6c:	721a      	strb	r2, [r3, #8]

		if(command_index - start_index > 0) {
 810bc6e:	687b      	ldr	r3, [r7, #4]
 810bc70:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 810bc74:	461a      	mov	r2, r3
 810bc76:	7bbb      	ldrb	r3, [r7, #14]
 810bc78:	1ad3      	subs	r3, r2, r3
 810bc7a:	2b00      	cmp	r3, #0
 810bc7c:	dd07      	ble.n	810bc8e <_ZN5Shell11receiveByteEc+0x11a>
			cmd.num_components++;
 810bc7e:	687b      	ldr	r3, [r7, #4]
 810bc80:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 810bc84:	3301      	adds	r3, #1
 810bc86:	b2da      	uxtb	r2, r3
 810bc88:	687b      	ldr	r3, [r7, #4]
 810bc8a:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
		}

		terminal->execute(&cmd, &console);
 810bc8e:	687b      	ldr	r3, [r7, #4]
 810bc90:	6958      	ldr	r0, [r3, #20]
 810bc92:	687b      	ldr	r3, [r7, #4]
 810bc94:	f203 4324 	addw	r3, r3, #1060	; 0x424
 810bc98:	4a0e      	ldr	r2, [pc, #56]	; (810bcd4 <_ZN5Shell11receiveByteEc+0x160>)
 810bc9a:	4619      	mov	r1, r3
 810bc9c:	f000 f872 	bl	810bd84 <_ZN8Terminal7executeEP12ShellCommandP7Console>

		command_index = 0;
 810bca0:	687b      	ldr	r3, [r7, #4]
 810bca2:	2200      	movs	r2, #0
 810bca4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		cmd.num_components = 0;
 810bca8:	687b      	ldr	r3, [r7, #4]
 810bcaa:	2200      	movs	r2, #0
 810bcac:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
		cmd.components[0].length = 0;
 810bcb0:	687b      	ldr	r3, [r7, #4]
 810bcb2:	2200      	movs	r2, #0
 810bcb4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
		cmd.components[0].component = command_buffer;
 810bcb8:	687b      	ldr	r3, [r7, #4]
 810bcba:	f503 7206 	add.w	r2, r3, #536	; 0x218
 810bcbe:	687b      	ldr	r3, [r7, #4]
 810bcc0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 810bcc4:	e002      	b.n	810bccc <_ZN5Shell11receiveByteEc+0x158>
		return;
 810bcc6:	bf00      	nop
 810bcc8:	e000      	b.n	810bccc <_ZN5Shell11receiveByteEc+0x158>
		}
 810bcca:	bf00      	nop
	}
}
 810bccc:	3710      	adds	r7, #16
 810bcce:	46bd      	mov	sp, r7
 810bcd0:	bd80      	pop	{r7, pc}
 810bcd2:	bf00      	nop
 810bcd4:	100085dc 	.word	0x100085dc

0810bcd8 <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 512



class Shell : public Thread {
 810bcd8:	b580      	push	{r7, lr}
 810bcda:	b082      	sub	sp, #8
 810bcdc:	af00      	add	r7, sp, #0
 810bcde:	6078      	str	r0, [r7, #4]
 810bce0:	4a05      	ldr	r2, [pc, #20]	; (810bcf8 <_ZN5ShellD1Ev+0x20>)
 810bce2:	687b      	ldr	r3, [r7, #4]
 810bce4:	601a      	str	r2, [r3, #0]
 810bce6:	687b      	ldr	r3, [r7, #4]
 810bce8:	4618      	mov	r0, r3
 810bcea:	f7ff fe0d 	bl	810b908 <_ZN6ThreadD1Ev>
 810bcee:	687b      	ldr	r3, [r7, #4]
 810bcf0:	4618      	mov	r0, r3
 810bcf2:	3708      	adds	r7, #8
 810bcf4:	46bd      	mov	sp, r7
 810bcf6:	bd80      	pop	{r7, pc}
 810bcf8:	08115798 	.word	0x08115798

0810bcfc <_ZN5ShellD0Ev>:
 810bcfc:	b580      	push	{r7, lr}
 810bcfe:	b082      	sub	sp, #8
 810bd00:	af00      	add	r7, sp, #0
 810bd02:	6078      	str	r0, [r7, #4]
 810bd04:	6878      	ldr	r0, [r7, #4]
 810bd06:	f7ff ffe7 	bl	810bcd8 <_ZN5ShellD1Ev>
 810bd0a:	f44f 618d 	mov.w	r1, #1128	; 0x468
 810bd0e:	6878      	ldr	r0, [r7, #4]
 810bd10:	f005 ffeb 	bl	8111cea <_ZdlPvj>
 810bd14:	687b      	ldr	r3, [r7, #4]
 810bd16:	4618      	mov	r0, r3
 810bd18:	3708      	adds	r7, #8
 810bd1a:	46bd      	mov	sp, r7
 810bd1c:	bd80      	pop	{r7, pc}

0810bd1e <_ZN16CommandComponent7matchesEPKc>:

struct CommandComponent {
	const char* component;
	uint8_t length;

	bool matches(const char* target) {
 810bd1e:	b480      	push	{r7}
 810bd20:	b085      	sub	sp, #20
 810bd22:	af00      	add	r7, sp, #0
 810bd24:	6078      	str	r0, [r7, #4]
 810bd26:	6039      	str	r1, [r7, #0]
		uint8_t i;

		for(i = 0; i < length; i++) {
 810bd28:	2300      	movs	r3, #0
 810bd2a:	73fb      	strb	r3, [r7, #15]
 810bd2c:	687b      	ldr	r3, [r7, #4]
 810bd2e:	791b      	ldrb	r3, [r3, #4]
 810bd30:	7bfa      	ldrb	r2, [r7, #15]
 810bd32:	429a      	cmp	r2, r3
 810bd34:	d216      	bcs.n	810bd64 <_ZN16CommandComponent7matchesEPKc+0x46>
			if(target[i] != component[i] || target[i] == '\0') {
 810bd36:	7bfb      	ldrb	r3, [r7, #15]
 810bd38:	683a      	ldr	r2, [r7, #0]
 810bd3a:	4413      	add	r3, r2
 810bd3c:	781a      	ldrb	r2, [r3, #0]
 810bd3e:	687b      	ldr	r3, [r7, #4]
 810bd40:	6819      	ldr	r1, [r3, #0]
 810bd42:	7bfb      	ldrb	r3, [r7, #15]
 810bd44:	440b      	add	r3, r1
 810bd46:	781b      	ldrb	r3, [r3, #0]
 810bd48:	429a      	cmp	r2, r3
 810bd4a:	d105      	bne.n	810bd58 <_ZN16CommandComponent7matchesEPKc+0x3a>
 810bd4c:	7bfb      	ldrb	r3, [r7, #15]
 810bd4e:	683a      	ldr	r2, [r7, #0]
 810bd50:	4413      	add	r3, r2
 810bd52:	781b      	ldrb	r3, [r3, #0]
 810bd54:	2b00      	cmp	r3, #0
 810bd56:	d101      	bne.n	810bd5c <_ZN16CommandComponent7matchesEPKc+0x3e>
				return false;
 810bd58:	2300      	movs	r3, #0
 810bd5a:	e00c      	b.n	810bd76 <_ZN16CommandComponent7matchesEPKc+0x58>
		for(i = 0; i < length; i++) {
 810bd5c:	7bfb      	ldrb	r3, [r7, #15]
 810bd5e:	3301      	adds	r3, #1
 810bd60:	73fb      	strb	r3, [r7, #15]
 810bd62:	e7e3      	b.n	810bd2c <_ZN16CommandComponent7matchesEPKc+0xe>
			}
		}

		return target[i] == '\0';
 810bd64:	7bfb      	ldrb	r3, [r7, #15]
 810bd66:	683a      	ldr	r2, [r7, #0]
 810bd68:	4413      	add	r3, r2
 810bd6a:	781b      	ldrb	r3, [r3, #0]
 810bd6c:	2b00      	cmp	r3, #0
 810bd6e:	bf0c      	ite	eq
 810bd70:	2301      	moveq	r3, #1
 810bd72:	2300      	movne	r3, #0
 810bd74:	b2db      	uxtb	r3, r3
	}
 810bd76:	4618      	mov	r0, r3
 810bd78:	3714      	adds	r7, #20
 810bd7a:	46bd      	mov	sp, r7
 810bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd80:	4770      	bx	lr
	...

0810bd84 <_ZN8Terminal7executeEP12ShellCommandP7Console>:


#define EQUALS(index, str) (cmd->num_components > (index) && cmd->components[(index)].matches((str)))


void Terminal::execute(ShellCommand* cmd, Console* feedback) {
 810bd84:	b580      	push	{r7, lr}
 810bd86:	b086      	sub	sp, #24
 810bd88:	af00      	add	r7, sp, #0
 810bd8a:	60f8      	str	r0, [r7, #12]
 810bd8c:	60b9      	str	r1, [r7, #8]
 810bd8e:	607a      	str	r2, [r7, #4]
	if(cmd->num_components > 0) {
 810bd90:	68bb      	ldr	r3, [r7, #8]
 810bd92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bd96:	2b00      	cmp	r3, #0
 810bd98:	f000 81e3 	beq.w	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		if(EQUALS(0, "help")) {
 810bd9c:	68bb      	ldr	r3, [r7, #8]
 810bd9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bda2:	2b00      	cmp	r3, #0
 810bda4:	d009      	beq.n	810bdba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810bda6:	68bb      	ldr	r3, [r7, #8]
 810bda8:	49a8      	ldr	r1, [pc, #672]	; (810c04c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 810bdaa:	4618      	mov	r0, r3
 810bdac:	f7ff ffb7 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810bdb0:	4603      	mov	r3, r0
 810bdb2:	2b00      	cmp	r3, #0
 810bdb4:	d001      	beq.n	810bdba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810bdb6:	2301      	movs	r3, #1
 810bdb8:	e000      	b.n	810bdbc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x38>
 810bdba:	2300      	movs	r3, #0
 810bdbc:	2b00      	cmp	r3, #0
 810bdbe:	d01c      	beq.n	810bdfa <_ZN8Terminal7executeEP12ShellCommandP7Console+0x76>
			feedback->printf("> Xplore Avionics available commands:\r\n");
 810bdc0:	49a3      	ldr	r1, [pc, #652]	; (810c050 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
 810bdc2:	6878      	ldr	r0, [r7, #4]
 810bdc4:	f7ff fd2b 	bl	810b81e <_ZN7Console6printfEPKcz>
			feedback->printf("> clear: clears the screen\r\n");
 810bdc8:	49a2      	ldr	r1, [pc, #648]	; (810c054 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 810bdca:	6878      	ldr	r0, [r7, #4]
 810bdcc:	f7ff fd27 	bl	810b81e <_ZN7Console6printfEPKcz>
			feedback->printf("> help: shows this help page\r\n");
 810bdd0:	49a1      	ldr	r1, [pc, #644]	; (810c058 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 810bdd2:	6878      	ldr	r0, [r7, #4]
 810bdd4:	f7ff fd23 	bl	810b81e <_ZN7Console6printfEPKcz>
			feedback->printf("> monitor: enables or disables a specific monitor\r\n");
 810bdd8:	49a0      	ldr	r1, [pc, #640]	; (810c05c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 810bdda:	6878      	ldr	r0, [r7, #4]
 810bddc:	f7ff fd1f 	bl	810b81e <_ZN7Console6printfEPKcz>
			feedback->printf("> profiler: enables or disables the embedded profiler\r\n");
 810bde0:	499f      	ldr	r1, [pc, #636]	; (810c060 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 810bde2:	6878      	ldr	r0, [r7, #4]
 810bde4:	f7ff fd1b 	bl	810b81e <_ZN7Console6printfEPKcz>
			feedback->printf("> reset: performs a software reset of the avionics\r\n");
 810bde8:	499e      	ldr	r1, [pc, #632]	; (810c064 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e0>)
 810bdea:	6878      	ldr	r0, [r7, #4]
 810bdec:	f7ff fd17 	bl	810b81e <_ZN7Console6printfEPKcz>
			feedback->printf("> version: displays the current terminal version\r\n");
 810bdf0:	499d      	ldr	r1, [pc, #628]	; (810c068 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e4>)
 810bdf2:	6878      	ldr	r0, [r7, #4]
 810bdf4:	f7ff fd13 	bl	810b81e <_ZN7Console6printfEPKcz>
			}
		} else {
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
		}
	}
}
 810bdf8:	e1b3      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "version")) {
 810bdfa:	68bb      	ldr	r3, [r7, #8]
 810bdfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810be00:	2b00      	cmp	r3, #0
 810be02:	d009      	beq.n	810be18 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810be04:	68bb      	ldr	r3, [r7, #8]
 810be06:	4999      	ldr	r1, [pc, #612]	; (810c06c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e8>)
 810be08:	4618      	mov	r0, r3
 810be0a:	f7ff ff88 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810be0e:	4603      	mov	r3, r0
 810be10:	2b00      	cmp	r3, #0
 810be12:	d001      	beq.n	810be18 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810be14:	2301      	movs	r3, #1
 810be16:	e000      	b.n	810be1a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x96>
 810be18:	2300      	movs	r3, #0
 810be1a:	2b00      	cmp	r3, #0
 810be1c:	d004      	beq.n	810be28 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa4>
			feedback->printf("> Xplore Avionics Terminal v1.0 by Arion Zimmermann\r\n");
 810be1e:	4994      	ldr	r1, [pc, #592]	; (810c070 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ec>)
 810be20:	6878      	ldr	r0, [r7, #4]
 810be22:	f7ff fcfc 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810be26:	e19c      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "reset")) {
 810be28:	68bb      	ldr	r3, [r7, #8]
 810be2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810be2e:	2b00      	cmp	r3, #0
 810be30:	d009      	beq.n	810be46 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810be32:	68bb      	ldr	r3, [r7, #8]
 810be34:	498f      	ldr	r1, [pc, #572]	; (810c074 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f0>)
 810be36:	4618      	mov	r0, r3
 810be38:	f7ff ff71 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810be3c:	4603      	mov	r3, r0
 810be3e:	2b00      	cmp	r3, #0
 810be40:	d001      	beq.n	810be46 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810be42:	2301      	movs	r3, #1
 810be44:	e000      	b.n	810be48 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc4>
 810be46:	2300      	movs	r3, #0
 810be48:	2b00      	cmp	r3, #0
 810be4a:	d002      	beq.n	810be52 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xce>
			HAL_NVIC_SystemReset();
 810be4c:	f7f6 fb5d 	bl	810250a <HAL_NVIC_SystemReset>
}
 810be50:	e187      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "time")) {
 810be52:	68bb      	ldr	r3, [r7, #8]
 810be54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810be58:	2b00      	cmp	r3, #0
 810be5a:	d009      	beq.n	810be70 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810be5c:	68bb      	ldr	r3, [r7, #8]
 810be5e:	4986      	ldr	r1, [pc, #536]	; (810c078 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f4>)
 810be60:	4618      	mov	r0, r3
 810be62:	f7ff ff5c 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810be66:	4603      	mov	r3, r0
 810be68:	2b00      	cmp	r3, #0
 810be6a:	d001      	beq.n	810be70 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810be6c:	2301      	movs	r3, #1
 810be6e:	e000      	b.n	810be72 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
 810be70:	2300      	movs	r3, #0
 810be72:	2b00      	cmp	r3, #0
 810be74:	d008      	beq.n	810be88 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x104>
			feedback->printf("%d\r\n", HAL_GetTick());
 810be76:	f7f6 fa47 	bl	8102308 <HAL_GetTick>
 810be7a:	4603      	mov	r3, r0
 810be7c:	461a      	mov	r2, r3
 810be7e:	497f      	ldr	r1, [pc, #508]	; (810c07c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f8>)
 810be80:	6878      	ldr	r0, [r7, #4]
 810be82:	f7ff fccc 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810be86:	e16c      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "clear")) {
 810be88:	68bb      	ldr	r3, [r7, #8]
 810be8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810be8e:	2b00      	cmp	r3, #0
 810be90:	d009      	beq.n	810bea6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810be92:	68bb      	ldr	r3, [r7, #8]
 810be94:	497a      	ldr	r1, [pc, #488]	; (810c080 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2fc>)
 810be96:	4618      	mov	r0, r3
 810be98:	f7ff ff41 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810be9c:	4603      	mov	r3, r0
 810be9e:	2b00      	cmp	r3, #0
 810bea0:	d001      	beq.n	810bea6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810bea2:	2301      	movs	r3, #1
 810bea4:	e000      	b.n	810bea8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x124>
 810bea6:	2300      	movs	r3, #0
 810bea8:	2b00      	cmp	r3, #0
 810beaa:	d004      	beq.n	810beb6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x132>
			feedback->printf("\x1b[2J\x1b[H\e7");
 810beac:	4975      	ldr	r1, [pc, #468]	; (810c084 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x300>)
 810beae:	6878      	ldr	r0, [r7, #4]
 810beb0:	f7ff fcb5 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810beb4:	e155      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "profiler")) {
 810beb6:	68bb      	ldr	r3, [r7, #8]
 810beb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bebc:	2b00      	cmp	r3, #0
 810bebe:	d009      	beq.n	810bed4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810bec0:	68bb      	ldr	r3, [r7, #8]
 810bec2:	4971      	ldr	r1, [pc, #452]	; (810c088 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x304>)
 810bec4:	4618      	mov	r0, r3
 810bec6:	f7ff ff2a 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810beca:	4603      	mov	r3, r0
 810becc:	2b00      	cmp	r3, #0
 810bece:	d001      	beq.n	810bed4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810bed0:	2301      	movs	r3, #1
 810bed2:	e000      	b.n	810bed6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x152>
 810bed4:	2300      	movs	r3, #0
 810bed6:	2b00      	cmp	r3, #0
 810bed8:	d042      	beq.n	810bf60 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1dc>
			if(EQUALS(1, "enable")) {
 810beda:	68bb      	ldr	r3, [r7, #8]
 810bedc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bee0:	2b01      	cmp	r3, #1
 810bee2:	d90a      	bls.n	810befa <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810bee4:	68bb      	ldr	r3, [r7, #8]
 810bee6:	3308      	adds	r3, #8
 810bee8:	4968      	ldr	r1, [pc, #416]	; (810c08c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810beea:	4618      	mov	r0, r3
 810beec:	f7ff ff17 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810bef0:	4603      	mov	r3, r0
 810bef2:	2b00      	cmp	r3, #0
 810bef4:	d001      	beq.n	810befa <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810bef6:	2301      	movs	r3, #1
 810bef8:	e000      	b.n	810befc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x178>
 810befa:	2300      	movs	r3, #0
 810befc:	2b00      	cmp	r3, #0
 810befe:	d00b      	beq.n	810bf18 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x194>
				profiler.enable();
 810bf00:	4863      	ldr	r0, [pc, #396]	; (810c090 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810bf02:	f7ff fcd3 	bl	810b8ac <_ZN8Profiler6enableEv>
				feedback->printf("\x1b[2J");
 810bf06:	4963      	ldr	r1, [pc, #396]	; (810c094 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810bf08:	6878      	ldr	r0, [r7, #4]
 810bf0a:	f7ff fc88 	bl	810b81e <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now enabled\r\n");
 810bf0e:	4962      	ldr	r1, [pc, #392]	; (810c098 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x314>)
 810bf10:	6878      	ldr	r0, [r7, #4]
 810bf12:	f7ff fc84 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810bf16:	e124      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable")) {
 810bf18:	68bb      	ldr	r3, [r7, #8]
 810bf1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bf1e:	2b01      	cmp	r3, #1
 810bf20:	d90a      	bls.n	810bf38 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810bf22:	68bb      	ldr	r3, [r7, #8]
 810bf24:	3308      	adds	r3, #8
 810bf26:	495d      	ldr	r1, [pc, #372]	; (810c09c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x318>)
 810bf28:	4618      	mov	r0, r3
 810bf2a:	f7ff fef8 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810bf2e:	4603      	mov	r3, r0
 810bf30:	2b00      	cmp	r3, #0
 810bf32:	d001      	beq.n	810bf38 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810bf34:	2301      	movs	r3, #1
 810bf36:	e000      	b.n	810bf3a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b6>
 810bf38:	2300      	movs	r3, #0
 810bf3a:	2b00      	cmp	r3, #0
 810bf3c:	d00b      	beq.n	810bf56 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d2>
				profiler.disable();
 810bf3e:	4854      	ldr	r0, [pc, #336]	; (810c090 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810bf40:	f7ff fcd4 	bl	810b8ec <_ZN8Profiler7disableEv>
				feedback->printf("\x1b[2J");
 810bf44:	4953      	ldr	r1, [pc, #332]	; (810c094 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810bf46:	6878      	ldr	r0, [r7, #4]
 810bf48:	f7ff fc69 	bl	810b81e <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now disabled\r\n");
 810bf4c:	4954      	ldr	r1, [pc, #336]	; (810c0a0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x31c>)
 810bf4e:	6878      	ldr	r0, [r7, #4]
 810bf50:	f7ff fc65 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810bf54:	e105      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: profiler { enable | disable }\r\n");
 810bf56:	4953      	ldr	r1, [pc, #332]	; (810c0a4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x320>)
 810bf58:	6878      	ldr	r0, [r7, #4]
 810bf5a:	f7ff fc60 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810bf5e:	e100      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "verbose")) {
 810bf60:	68bb      	ldr	r3, [r7, #8]
 810bf62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bf66:	2b00      	cmp	r3, #0
 810bf68:	d009      	beq.n	810bf7e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810bf6a:	68bb      	ldr	r3, [r7, #8]
 810bf6c:	494e      	ldr	r1, [pc, #312]	; (810c0a8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x324>)
 810bf6e:	4618      	mov	r0, r3
 810bf70:	f7ff fed5 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810bf74:	4603      	mov	r3, r0
 810bf76:	2b00      	cmp	r3, #0
 810bf78:	d001      	beq.n	810bf7e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810bf7a:	2301      	movs	r3, #1
 810bf7c:	e000      	b.n	810bf80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
 810bf7e:	2300      	movs	r3, #0
 810bf80:	2b00      	cmp	r3, #0
 810bf82:	d03a      	beq.n	810bffa <_ZN8Terminal7executeEP12ShellCommandP7Console+0x276>
			if(EQUALS(1, "on")) {
 810bf84:	68bb      	ldr	r3, [r7, #8]
 810bf86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bf8a:	2b01      	cmp	r3, #1
 810bf8c:	d90a      	bls.n	810bfa4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810bf8e:	68bb      	ldr	r3, [r7, #8]
 810bf90:	3308      	adds	r3, #8
 810bf92:	4946      	ldr	r1, [pc, #280]	; (810c0ac <_ZN8Terminal7executeEP12ShellCommandP7Console+0x328>)
 810bf94:	4618      	mov	r0, r3
 810bf96:	f7ff fec2 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810bf9a:	4603      	mov	r3, r0
 810bf9c:	2b00      	cmp	r3, #0
 810bf9e:	d001      	beq.n	810bfa4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810bfa0:	2301      	movs	r3, #1
 810bfa2:	e000      	b.n	810bfa6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x222>
 810bfa4:	2300      	movs	r3, #0
 810bfa6:	2b00      	cmp	r3, #0
 810bfa8:	d007      	beq.n	810bfba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
				verbose = true;
 810bfaa:	68fb      	ldr	r3, [r7, #12]
 810bfac:	2201      	movs	r2, #1
 810bfae:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode enabled\r\n");
 810bfb0:	493f      	ldr	r1, [pc, #252]	; (810c0b0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x32c>)
 810bfb2:	6878      	ldr	r0, [r7, #4]
 810bfb4:	f7ff fc33 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810bfb8:	e0d3      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "off")) {
 810bfba:	68bb      	ldr	r3, [r7, #8]
 810bfbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810bfc0:	2b01      	cmp	r3, #1
 810bfc2:	d90a      	bls.n	810bfda <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810bfc4:	68bb      	ldr	r3, [r7, #8]
 810bfc6:	3308      	adds	r3, #8
 810bfc8:	493a      	ldr	r1, [pc, #232]	; (810c0b4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x330>)
 810bfca:	4618      	mov	r0, r3
 810bfcc:	f7ff fea7 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810bfd0:	4603      	mov	r3, r0
 810bfd2:	2b00      	cmp	r3, #0
 810bfd4:	d001      	beq.n	810bfda <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810bfd6:	2301      	movs	r3, #1
 810bfd8:	e000      	b.n	810bfdc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>
 810bfda:	2300      	movs	r3, #0
 810bfdc:	2b00      	cmp	r3, #0
 810bfde:	d007      	beq.n	810bff0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>
				verbose = false;
 810bfe0:	68fb      	ldr	r3, [r7, #12]
 810bfe2:	2200      	movs	r2, #0
 810bfe4:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode disabled\r\n");
 810bfe6:	4934      	ldr	r1, [pc, #208]	; (810c0b8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x334>)
 810bfe8:	6878      	ldr	r0, [r7, #4]
 810bfea:	f7ff fc18 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810bfee:	e0b8      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: verbose { on | off }\r\n");
 810bff0:	4932      	ldr	r1, [pc, #200]	; (810c0bc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x338>)
 810bff2:	6878      	ldr	r0, [r7, #4]
 810bff4:	f7ff fc13 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810bff8:	e0b3      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "monitor")) {
 810bffa:	68bb      	ldr	r3, [r7, #8]
 810bffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c000:	2b00      	cmp	r3, #0
 810c002:	d009      	beq.n	810c018 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810c004:	68bb      	ldr	r3, [r7, #8]
 810c006:	492e      	ldr	r1, [pc, #184]	; (810c0c0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x33c>)
 810c008:	4618      	mov	r0, r3
 810c00a:	f7ff fe88 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810c00e:	4603      	mov	r3, r0
 810c010:	2b00      	cmp	r3, #0
 810c012:	d001      	beq.n	810c018 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810c014:	2301      	movs	r3, #1
 810c016:	e000      	b.n	810c01a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x296>
 810c018:	2300      	movs	r3, #0
 810c01a:	2b00      	cmp	r3, #0
 810c01c:	f000 8098 	beq.w	810c150 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3cc>
			if(EQUALS(1, "enable") && cmd->num_components >= 3) {
 810c020:	68bb      	ldr	r3, [r7, #8]
 810c022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c026:	2b01      	cmp	r3, #1
 810c028:	d94c      	bls.n	810c0c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c02a:	68bb      	ldr	r3, [r7, #8]
 810c02c:	3308      	adds	r3, #8
 810c02e:	4917      	ldr	r1, [pc, #92]	; (810c08c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810c030:	4618      	mov	r0, r3
 810c032:	f7ff fe74 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810c036:	4603      	mov	r3, r0
 810c038:	2b00      	cmp	r3, #0
 810c03a:	d043      	beq.n	810c0c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c03c:	68bb      	ldr	r3, [r7, #8]
 810c03e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c042:	2b02      	cmp	r3, #2
 810c044:	d93e      	bls.n	810c0c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c046:	2301      	movs	r3, #1
 810c048:	e03d      	b.n	810c0c6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x342>
 810c04a:	bf00      	nop
 810c04c:	08114ddc 	.word	0x08114ddc
 810c050:	08114de4 	.word	0x08114de4
 810c054:	08114e0c 	.word	0x08114e0c
 810c058:	08114e2c 	.word	0x08114e2c
 810c05c:	08114e4c 	.word	0x08114e4c
 810c060:	08114e80 	.word	0x08114e80
 810c064:	08114eb8 	.word	0x08114eb8
 810c068:	08114ef0 	.word	0x08114ef0
 810c06c:	08114f24 	.word	0x08114f24
 810c070:	08114f2c 	.word	0x08114f2c
 810c074:	08114f64 	.word	0x08114f64
 810c078:	08114f6c 	.word	0x08114f6c
 810c07c:	08114f74 	.word	0x08114f74
 810c080:	08114f7c 	.word	0x08114f7c
 810c084:	08114f84 	.word	0x08114f84
 810c088:	08114f90 	.word	0x08114f90
 810c08c:	08114f9c 	.word	0x08114f9c
 810c090:	100086e4 	.word	0x100086e4
 810c094:	08114fa4 	.word	0x08114fa4
 810c098:	08114fac 	.word	0x08114fac
 810c09c:	08114fc8 	.word	0x08114fc8
 810c0a0:	08114fd0 	.word	0x08114fd0
 810c0a4:	08114fec 	.word	0x08114fec
 810c0a8:	08115018 	.word	0x08115018
 810c0ac:	08115020 	.word	0x08115020
 810c0b0:	08115024 	.word	0x08115024
 810c0b4:	08115040 	.word	0x08115040
 810c0b8:	08115044 	.word	0x08115044
 810c0bc:	08115060 	.word	0x08115060
 810c0c0:	08115080 	.word	0x08115080
 810c0c4:	2300      	movs	r3, #0
 810c0c6:	2b00      	cmp	r3, #0
 810c0c8:	d020      	beq.n	810c10c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x388>
				uint8_t location = 0;
 810c0ca:	2300      	movs	r3, #0
 810c0cc:	75fb      	strb	r3, [r7, #23]
				uint8_t refresh_rate = 1;
 810c0ce:	2301      	movs	r3, #1
 810c0d0:	75bb      	strb	r3, [r7, #22]
				if(cmd->num_components > 3) {
 810c0d2:	68bb      	ldr	r3, [r7, #8]
 810c0d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c0d8:	2b03      	cmp	r3, #3
 810c0da:	d906      	bls.n	810c0ea <_ZN8Terminal7executeEP12ShellCommandP7Console+0x366>
					location = atoi(cmd->components[3].component);
 810c0dc:	68bb      	ldr	r3, [r7, #8]
 810c0de:	699b      	ldr	r3, [r3, #24]
 810c0e0:	4618      	mov	r0, r3
 810c0e2:	f005 ff59 	bl	8111f98 <atoi>
 810c0e6:	4603      	mov	r3, r0
 810c0e8:	75fb      	strb	r3, [r7, #23]
				if(cmd->num_components > 4) {
 810c0ea:	68bb      	ldr	r3, [r7, #8]
 810c0ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c0f0:	2b04      	cmp	r3, #4
 810c0f2:	d906      	bls.n	810c102 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x37e>
					refresh_rate = atoi(cmd->components[4].component);
 810c0f4:	68bb      	ldr	r3, [r7, #8]
 810c0f6:	6a1b      	ldr	r3, [r3, #32]
 810c0f8:	4618      	mov	r0, r3
 810c0fa:	f005 ff4d 	bl	8111f98 <atoi>
 810c0fe:	4603      	mov	r3, r0
 810c100:	75bb      	strb	r3, [r7, #22]
				feedback->printf("\x1b[2J");
 810c102:	491a      	ldr	r1, [pc, #104]	; (810c16c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810c104:	6878      	ldr	r0, [r7, #4]
 810c106:	f7ff fb8a 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810c10a:	e02a      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable") && cmd->num_components == 3) {
 810c10c:	68bb      	ldr	r3, [r7, #8]
 810c10e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c112:	2b01      	cmp	r3, #1
 810c114:	d90f      	bls.n	810c136 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c116:	68bb      	ldr	r3, [r7, #8]
 810c118:	3308      	adds	r3, #8
 810c11a:	4915      	ldr	r1, [pc, #84]	; (810c170 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3ec>)
 810c11c:	4618      	mov	r0, r3
 810c11e:	f7ff fdfe 	bl	810bd1e <_ZN16CommandComponent7matchesEPKc>
 810c122:	4603      	mov	r3, r0
 810c124:	2b00      	cmp	r3, #0
 810c126:	d006      	beq.n	810c136 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c128:	68bb      	ldr	r3, [r7, #8]
 810c12a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c12e:	2b03      	cmp	r3, #3
 810c130:	d101      	bne.n	810c136 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c132:	2301      	movs	r3, #1
 810c134:	e000      	b.n	810c138 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b4>
 810c136:	2300      	movs	r3, #0
 810c138:	2b00      	cmp	r3, #0
 810c13a:	d004      	beq.n	810c146 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3c2>
				feedback->printf("\x1b[2J");
 810c13c:	490b      	ldr	r1, [pc, #44]	; (810c16c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810c13e:	6878      	ldr	r0, [r7, #4]
 810c140:	f7ff fb6d 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810c144:	e00d      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: monitor { enable | disable } { sensor | state | kalman | flash | can | telemetry | airbrakes } [location] [refresh rate; default: 10]\r\n");
 810c146:	490b      	ldr	r1, [pc, #44]	; (810c174 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f0>)
 810c148:	6878      	ldr	r0, [r7, #4]
 810c14a:	f7ff fb68 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810c14e:	e008      	b.n	810c162 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
 810c150:	68bb      	ldr	r3, [r7, #8]
 810c152:	791b      	ldrb	r3, [r3, #4]
 810c154:	461a      	mov	r2, r3
 810c156:	68bb      	ldr	r3, [r7, #8]
 810c158:	681b      	ldr	r3, [r3, #0]
 810c15a:	4907      	ldr	r1, [pc, #28]	; (810c178 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f4>)
 810c15c:	6878      	ldr	r0, [r7, #4]
 810c15e:	f7ff fb5e 	bl	810b81e <_ZN7Console6printfEPKcz>
}
 810c162:	bf00      	nop
 810c164:	3718      	adds	r7, #24
 810c166:	46bd      	mov	sp, r7
 810c168:	bd80      	pop	{r7, pc}
 810c16a:	bf00      	nop
 810c16c:	08114fa4 	.word	0x08114fa4
 810c170:	08114fc8 	.word	0x08114fc8
 810c174:	08115088 	.word	0x08115088
 810c178:	0811511c 	.word	0x0811511c

0810c17c <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 810c17c:	b580      	push	{r7, lr}
 810c17e:	b082      	sub	sp, #8
 810c180:	af00      	add	r7, sp, #0
 810c182:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 810c184:	6878      	ldr	r0, [r7, #4]
 810c186:	f7fd f981 	bl	810948c <pvPortMalloc>
 810c18a:	4603      	mov	r3, r0
}
 810c18c:	4618      	mov	r0, r3
 810c18e:	3708      	adds	r7, #8
 810c190:	46bd      	mov	sp, r7
 810c192:	bd80      	pop	{r7, pc}

0810c194 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 810c194:	b580      	push	{r7, lr}
 810c196:	b082      	sub	sp, #8
 810c198:	af00      	add	r7, sp, #0
 810c19a:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 810c19c:	6878      	ldr	r0, [r7, #4]
 810c19e:	f7fd fa37 	bl	8109610 <vPortFree>
}
 810c1a2:	bf00      	nop
 810c1a4:	3708      	adds	r7, #8
 810c1a6:	46bd      	mov	sp, r7
 810c1a8:	bd80      	pop	{r7, pc}

0810c1aa <_ZN7ADS111313ads1113_delayEi>:

#include <Libraries/ADS1113/ads1113.h>

#define MAX_VALUE 32768

void ADS1113::ads1113_delay(int time){
 810c1aa:	b580      	push	{r7, lr}
 810c1ac:	b082      	sub	sp, #8
 810c1ae:	af00      	add	r7, sp, #0
 810c1b0:	6078      	str	r0, [r7, #4]
 810c1b2:	6039      	str	r1, [r7, #0]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810c1b4:	683b      	ldr	r3, [r7, #0]
 810c1b6:	4618      	mov	r0, r3
 810c1b8:	f7fd f920 	bl	81093fc <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810c1bc:	bf00      	nop
 810c1be:	3708      	adds	r7, #8
 810c1c0:	46bd      	mov	sp, r7
 810c1c2:	bd80      	pop	{r7, pc}

0810c1c4 <_ZN7ADS1113C1EP19__I2C_HandleTypeDefhf>:

ADS1113::ADS1113(I2C_HandleTypeDef *hi2c, uint8_t i2cAddress, float multiplier):
 810c1c4:	b480      	push	{r7}
 810c1c6:	b085      	sub	sp, #20
 810c1c8:	af00      	add	r7, sp, #0
 810c1ca:	60f8      	str	r0, [r7, #12]
 810c1cc:	60b9      	str	r1, [r7, #8]
 810c1ce:	4613      	mov	r3, r2
 810c1d0:	ed87 0a00 	vstr	s0, [r7]
 810c1d4:	71fb      	strb	r3, [r7, #7]
	_i2cAddress(i2cAddress),
	_conversionDelay(ADS1113_CONVERSIONDELAY),
	_bitShift(0),
	_ads1113_i2c_port(hi2c),
	_multiplier(multiplier / (MAX_VALUE >> _bitShift))
 810c1d6:	68fb      	ldr	r3, [r7, #12]
 810c1d8:	79fa      	ldrb	r2, [r7, #7]
 810c1da:	701a      	strb	r2, [r3, #0]
 810c1dc:	68fb      	ldr	r3, [r7, #12]
 810c1de:	2209      	movs	r2, #9
 810c1e0:	705a      	strb	r2, [r3, #1]
 810c1e2:	68fb      	ldr	r3, [r7, #12]
 810c1e4:	2200      	movs	r2, #0
 810c1e6:	709a      	strb	r2, [r3, #2]
 810c1e8:	68fb      	ldr	r3, [r7, #12]
 810c1ea:	68ba      	ldr	r2, [r7, #8]
 810c1ec:	605a      	str	r2, [r3, #4]
 810c1ee:	68fb      	ldr	r3, [r7, #12]
 810c1f0:	789b      	ldrb	r3, [r3, #2]
 810c1f2:	461a      	mov	r2, r3
 810c1f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c1f8:	4113      	asrs	r3, r2
 810c1fa:	ee07 3a90 	vmov	s15, r3
 810c1fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810c202:	edd7 6a00 	vldr	s13, [r7]
 810c206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c20a:	68fb      	ldr	r3, [r7, #12]
 810c20c:	edc3 7a02 	vstr	s15, [r3, #8]
{
	//while(!init());
}
 810c210:	68fb      	ldr	r3, [r7, #12]
 810c212:	4618      	mov	r0, r3
 810c214:	3714      	adds	r7, #20
 810c216:	46bd      	mov	sp, r7
 810c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c21c:	4770      	bx	lr

0810c21e <_ZN7ADS11135beginEv>:

bool ADS1113::begin(){
 810c21e:	b580      	push	{r7, lr}
 810c220:	b082      	sub	sp, #8
 810c222:	af00      	add	r7, sp, #0
 810c224:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_Init(_ads1113_i2c_port) == HAL_OK){
 810c226:	687b      	ldr	r3, [r7, #4]
 810c228:	685b      	ldr	r3, [r3, #4]
 810c22a:	4618      	mov	r0, r3
 810c22c:	f7f8 ffec 	bl	8105208 <HAL_I2C_Init>
 810c230:	4603      	mov	r3, r0
 810c232:	2b00      	cmp	r3, #0
 810c234:	bf0c      	ite	eq
 810c236:	2301      	moveq	r3, #1
 810c238:	2300      	movne	r3, #0
 810c23a:	b2db      	uxtb	r3, r3
 810c23c:	2b00      	cmp	r3, #0
 810c23e:	d014      	beq.n	810c26a <_ZN7ADS11135beginEv+0x4c>
		if(HAL_I2C_IsDeviceReady(_ads1113_i2c_port, (_i2cAddress<<1), 10, 100) == HAL_OK)
 810c240:	687b      	ldr	r3, [r7, #4]
 810c242:	6858      	ldr	r0, [r3, #4]
 810c244:	687b      	ldr	r3, [r7, #4]
 810c246:	781b      	ldrb	r3, [r3, #0]
 810c248:	b29b      	uxth	r3, r3
 810c24a:	005b      	lsls	r3, r3, #1
 810c24c:	b299      	uxth	r1, r3
 810c24e:	2364      	movs	r3, #100	; 0x64
 810c250:	220a      	movs	r2, #10
 810c252:	f7f9 fcaf 	bl	8105bb4 <HAL_I2C_IsDeviceReady>
 810c256:	4603      	mov	r3, r0
 810c258:	2b00      	cmp	r3, #0
 810c25a:	bf0c      	ite	eq
 810c25c:	2301      	moveq	r3, #1
 810c25e:	2300      	movne	r3, #0
 810c260:	b2db      	uxtb	r3, r3
 810c262:	2b00      	cmp	r3, #0
 810c264:	d001      	beq.n	810c26a <_ZN7ADS11135beginEv+0x4c>
			return true;
 810c266:	2301      	movs	r3, #1
 810c268:	e000      	b.n	810c26c <_ZN7ADS11135beginEv+0x4e>
	}
	return false;
 810c26a:	2300      	movs	r3, #0
}
 810c26c:	4618      	mov	r0, r3
 810c26e:	3708      	adds	r7, #8
 810c270:	46bd      	mov	sp, r7
 810c272:	bd80      	pop	{r7, pc}

0810c274 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht>:

	return true;
}

/* Write to register in ADS1113 directly */
static bool writeRegister(I2C_HandleTypeDef* i2c_port, uint16_t i2cAddress, uint8_t reg, uint16_t value) {
 810c274:	b580      	push	{r7, lr}
 810c276:	b08a      	sub	sp, #40	; 0x28
 810c278:	af04      	add	r7, sp, #16
 810c27a:	60f8      	str	r0, [r7, #12]
 810c27c:	4608      	mov	r0, r1
 810c27e:	4611      	mov	r1, r2
 810c280:	461a      	mov	r2, r3
 810c282:	4603      	mov	r3, r0
 810c284:	817b      	strh	r3, [r7, #10]
 810c286:	460b      	mov	r3, r1
 810c288:	727b      	strb	r3, [r7, #9]
 810c28a:	4613      	mov	r3, r2
 810c28c:	80fb      	strh	r3, [r7, #6]
	uint8_t pData[2];
	pData[0] = (value >> 8);
 810c28e:	88fb      	ldrh	r3, [r7, #6]
 810c290:	121b      	asrs	r3, r3, #8
 810c292:	b2db      	uxtb	r3, r3
 810c294:	753b      	strb	r3, [r7, #20]
	pData[1] = value & 0xff;
 810c296:	88fb      	ldrh	r3, [r7, #6]
 810c298:	b2db      	uxtb	r3, r3
 810c29a:	757b      	strb	r3, [r7, #21]

	if(HAL_I2C_IsDeviceReady(i2c_port, i2cAddress << 1, 10, 10) != HAL_OK) {
 810c29c:	897b      	ldrh	r3, [r7, #10]
 810c29e:	005b      	lsls	r3, r3, #1
 810c2a0:	b299      	uxth	r1, r3
 810c2a2:	230a      	movs	r3, #10
 810c2a4:	220a      	movs	r2, #10
 810c2a6:	68f8      	ldr	r0, [r7, #12]
 810c2a8:	f7f9 fc84 	bl	8105bb4 <HAL_I2C_IsDeviceReady>
 810c2ac:	4603      	mov	r3, r0
 810c2ae:	2b00      	cmp	r3, #0
 810c2b0:	bf14      	ite	ne
 810c2b2:	2301      	movne	r3, #1
 810c2b4:	2300      	moveq	r3, #0
 810c2b6:	b2db      	uxtb	r3, r3
 810c2b8:	2b00      	cmp	r3, #0
 810c2ba:	d001      	beq.n	810c2c0 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht+0x4c>
		return false;
 810c2bc:	2300      	movs	r3, #0
 810c2be:	e015      	b.n	810c2ec <_ZL13writeRegisterP19__I2C_HandleTypeDeftht+0x78>
	}

	return HAL_I2C_Mem_Write(i2c_port, i2cAddress << 1, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) == HAL_OK;
 810c2c0:	897b      	ldrh	r3, [r7, #10]
 810c2c2:	005b      	lsls	r3, r3, #1
 810c2c4:	b299      	uxth	r1, r3
 810c2c6:	7a7b      	ldrb	r3, [r7, #9]
 810c2c8:	b29a      	uxth	r2, r3
 810c2ca:	230a      	movs	r3, #10
 810c2cc:	9302      	str	r3, [sp, #8]
 810c2ce:	2302      	movs	r3, #2
 810c2d0:	9301      	str	r3, [sp, #4]
 810c2d2:	f107 0314 	add.w	r3, r7, #20
 810c2d6:	9300      	str	r3, [sp, #0]
 810c2d8:	2301      	movs	r3, #1
 810c2da:	68f8      	ldr	r0, [r7, #12]
 810c2dc:	f7f9 fa3c 	bl	8105758 <HAL_I2C_Mem_Write>
 810c2e0:	4603      	mov	r3, r0
 810c2e2:	2b00      	cmp	r3, #0
 810c2e4:	bf0c      	ite	eq
 810c2e6:	2301      	moveq	r3, #1
 810c2e8:	2300      	movne	r3, #0
 810c2ea:	b2db      	uxtb	r3, r3
}
 810c2ec:	4618      	mov	r0, r3
 810c2ee:	3718      	adds	r7, #24
 810c2f0:	46bd      	mov	sp, r7
 810c2f2:	bd80      	pop	{r7, pc}

0810c2f4 <_ZL12readRegisterP19__I2C_HandleTypeDefth>:

/* Read from register in ADS1113 directly */
static uint16_t readRegister(I2C_HandleTypeDef* i2c_port, uint16_t i2cAddress, uint8_t reg) {
 810c2f4:	b580      	push	{r7, lr}
 810c2f6:	b088      	sub	sp, #32
 810c2f8:	af04      	add	r7, sp, #16
 810c2fa:	6078      	str	r0, [r7, #4]
 810c2fc:	460b      	mov	r3, r1
 810c2fe:	807b      	strh	r3, [r7, #2]
 810c300:	4613      	mov	r3, r2
 810c302:	707b      	strb	r3, [r7, #1]
	uint8_t pData[2];

	if(HAL_I2C_IsDeviceReady(i2c_port, i2cAddress << 1, 10, 10) != HAL_OK) {
 810c304:	887b      	ldrh	r3, [r7, #2]
 810c306:	005b      	lsls	r3, r3, #1
 810c308:	b299      	uxth	r1, r3
 810c30a:	230a      	movs	r3, #10
 810c30c:	220a      	movs	r2, #10
 810c30e:	6878      	ldr	r0, [r7, #4]
 810c310:	f7f9 fc50 	bl	8105bb4 <HAL_I2C_IsDeviceReady>
 810c314:	4603      	mov	r3, r0
 810c316:	2b00      	cmp	r3, #0
 810c318:	bf14      	ite	ne
 810c31a:	2301      	movne	r3, #1
 810c31c:	2300      	moveq	r3, #0
 810c31e:	b2db      	uxtb	r3, r3
 810c320:	2b00      	cmp	r3, #0
 810c322:	d001      	beq.n	810c328 <_ZL12readRegisterP19__I2C_HandleTypeDefth+0x34>
		return false;
 810c324:	2300      	movs	r3, #0
 810c326:	e022      	b.n	810c36e <_ZL12readRegisterP19__I2C_HandleTypeDefth+0x7a>
	}

	if(HAL_I2C_Mem_Read(i2c_port, i2cAddress << 1, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) != HAL_OK) {
 810c328:	887b      	ldrh	r3, [r7, #2]
 810c32a:	005b      	lsls	r3, r3, #1
 810c32c:	b299      	uxth	r1, r3
 810c32e:	787b      	ldrb	r3, [r7, #1]
 810c330:	b29a      	uxth	r2, r3
 810c332:	230a      	movs	r3, #10
 810c334:	9302      	str	r3, [sp, #8]
 810c336:	2302      	movs	r3, #2
 810c338:	9301      	str	r3, [sp, #4]
 810c33a:	f107 030c 	add.w	r3, r7, #12
 810c33e:	9300      	str	r3, [sp, #0]
 810c340:	2301      	movs	r3, #1
 810c342:	6878      	ldr	r0, [r7, #4]
 810c344:	f7f9 fb1c 	bl	8105980 <HAL_I2C_Mem_Read>
 810c348:	4603      	mov	r3, r0
 810c34a:	2b00      	cmp	r3, #0
 810c34c:	bf14      	ite	ne
 810c34e:	2301      	movne	r3, #1
 810c350:	2300      	moveq	r3, #0
 810c352:	b2db      	uxtb	r3, r3
 810c354:	2b00      	cmp	r3, #0
 810c356:	d001      	beq.n	810c35c <_ZL12readRegisterP19__I2C_HandleTypeDefth+0x68>
		return false;
 810c358:	2300      	movs	r3, #0
 810c35a:	e008      	b.n	810c36e <_ZL12readRegisterP19__I2C_HandleTypeDefth+0x7a>
	}

	uint16_t regData = ((pData[0] << 8) | pData[1]);
 810c35c:	7b3b      	ldrb	r3, [r7, #12]
 810c35e:	021b      	lsls	r3, r3, #8
 810c360:	b21a      	sxth	r2, r3
 810c362:	7b7b      	ldrb	r3, [r7, #13]
 810c364:	b21b      	sxth	r3, r3
 810c366:	4313      	orrs	r3, r2
 810c368:	b21b      	sxth	r3, r3
 810c36a:	81fb      	strh	r3, [r7, #14]

	return regData; //CHECK HERE IF THERE ARE ERRORS : inverse pData[0] and pData[1]
 810c36c:	89fb      	ldrh	r3, [r7, #14]
}
 810c36e:	4618      	mov	r0, r3
 810c370:	3710      	adds	r7, #16
 810c372:	46bd      	mov	sp, r7
 810c374:	bd80      	pop	{r7, pc}

0810c376 <_ZN7ADS111324readADC_Differential_0_1ERst>:
  // Shift 12-bit results right 4 bits for the ADS1X15
  raw = readRegister(_ads1113_i2c_port, _i2cAddress, ADS1X15_REG_POINTER_CONVERT) >> _bitShift;
  return true;
}

bool ADS1113::readADC_Differential_0_1(int16_t& raw, uint16_t sampleRate) {
 810c376:	b580      	push	{r7, lr}
 810c378:	b086      	sub	sp, #24
 810c37a:	af00      	add	r7, sp, #0
 810c37c:	60f8      	str	r0, [r7, #12]
 810c37e:	60b9      	str	r1, [r7, #8]
 810c380:	4613      	mov	r3, r2
 810c382:	80fb      	strh	r3, [r7, #6]
  // Start with default values
  uint16_t config =
 810c384:	f240 1303 	movw	r3, #259	; 0x103
 810c388:	82bb      	strh	r3, [r7, #20]
      ADS1X15_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
      ADS1X15_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
      ADS1X15_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set data rate
  config |= sampleRate;
 810c38a:	8aba      	ldrh	r2, [r7, #20]
 810c38c:	88fb      	ldrh	r3, [r7, #6]
 810c38e:	4313      	orrs	r3, r2
 810c390:	82bb      	strh	r3, [r7, #20]

  // Set channels
  config |= ADS1X15_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N

  // Set 'start single-conversion' bit
  config |= ADS1X15_REG_CONFIG_OS_SINGLE;
 810c392:	8abb      	ldrh	r3, [r7, #20]
 810c394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 810c398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 810c39c:	82bb      	strh	r3, [r7, #20]

  // Write config register to the ADC
  if(!writeRegister(_ads1113_i2c_port, _i2cAddress, ADS1X15_REG_POINTER_CONFIG, config)) {
 810c39e:	68fb      	ldr	r3, [r7, #12]
 810c3a0:	6858      	ldr	r0, [r3, #4]
 810c3a2:	68fb      	ldr	r3, [r7, #12]
 810c3a4:	781b      	ldrb	r3, [r3, #0]
 810c3a6:	b299      	uxth	r1, r3
 810c3a8:	8abb      	ldrh	r3, [r7, #20]
 810c3aa:	2201      	movs	r2, #1
 810c3ac:	f7ff ff62 	bl	810c274 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht>
 810c3b0:	4603      	mov	r3, r0
 810c3b2:	f083 0301 	eor.w	r3, r3, #1
 810c3b6:	b2db      	uxtb	r3, r3
 810c3b8:	2b00      	cmp	r3, #0
 810c3ba:	d001      	beq.n	810c3c0 <_ZN7ADS111324readADC_Differential_0_1ERst+0x4a>
	  return false;
 810c3bc:	2300      	movs	r3, #0
 810c3be:	e017      	b.n	810c3f0 <_ZN7ADS111324readADC_Differential_0_1ERst+0x7a>
  }

  // Wait for the conversion to complete
  for(uint8_t i = 0; i < 100; i++) {
 810c3c0:	2300      	movs	r3, #0
 810c3c2:	75fb      	strb	r3, [r7, #23]
 810c3c4:	7dfb      	ldrb	r3, [r7, #23]
 810c3c6:	2b63      	cmp	r3, #99	; 0x63
 810c3c8:	d80a      	bhi.n	810c3e0 <_ZN7ADS111324readADC_Differential_0_1ERst+0x6a>
  	  if(conversionComplete()) {
 810c3ca:	68f8      	ldr	r0, [r7, #12]
 810c3cc:	f000 f84b 	bl	810c466 <_ZN7ADS111318conversionCompleteEv>
 810c3d0:	4603      	mov	r3, r0
 810c3d2:	2b00      	cmp	r3, #0
 810c3d4:	d103      	bne.n	810c3de <_ZN7ADS111324readADC_Differential_0_1ERst+0x68>
  for(uint8_t i = 0; i < 100; i++) {
 810c3d6:	7dfb      	ldrb	r3, [r7, #23]
 810c3d8:	3301      	adds	r3, #1
 810c3da:	75fb      	strb	r3, [r7, #23]
 810c3dc:	e7f2      	b.n	810c3c4 <_ZN7ADS111324readADC_Differential_0_1ERst+0x4e>
  		  break;
 810c3de:	bf00      	nop
  	  }
    }

  // Read the conversion results
  raw = getLastConversionResults();
 810c3e0:	68f8      	ldr	r0, [r7, #12]
 810c3e2:	f000 f809 	bl	810c3f8 <_ZN7ADS111324getLastConversionResultsEv>
 810c3e6:	4603      	mov	r3, r0
 810c3e8:	461a      	mov	r2, r3
 810c3ea:	68bb      	ldr	r3, [r7, #8]
 810c3ec:	801a      	strh	r2, [r3, #0]
  return true;
 810c3ee:	2301      	movs	r3, #1
}
 810c3f0:	4618      	mov	r0, r3
 810c3f2:	3718      	adds	r7, #24
 810c3f4:	46bd      	mov	sp, r7
 810c3f6:	bd80      	pop	{r7, pc}

0810c3f8 <_ZN7ADS111324getLastConversionResultsEv>:

int16_t ADS1113::getLastConversionResults() {
 810c3f8:	b580      	push	{r7, lr}
 810c3fa:	b084      	sub	sp, #16
 810c3fc:	af00      	add	r7, sp, #0
 810c3fe:	6078      	str	r0, [r7, #4]
	// Wait for the conversion to complete
	ads1113_delay(_conversionDelay);
 810c400:	687b      	ldr	r3, [r7, #4]
 810c402:	785b      	ldrb	r3, [r3, #1]
 810c404:	4619      	mov	r1, r3
 810c406:	6878      	ldr	r0, [r7, #4]
 810c408:	f7ff fecf 	bl	810c1aa <_ZN7ADS111313ads1113_delayEi>

	// Read the conversion results
	uint16_t res = readRegister(_ads1113_i2c_port, _i2cAddress, ADS1X15_REG_POINTER_CONVERT) >> _bitShift;
 810c40c:	687b      	ldr	r3, [r7, #4]
 810c40e:	6858      	ldr	r0, [r3, #4]
 810c410:	687b      	ldr	r3, [r7, #4]
 810c412:	781b      	ldrb	r3, [r3, #0]
 810c414:	b29b      	uxth	r3, r3
 810c416:	2200      	movs	r2, #0
 810c418:	4619      	mov	r1, r3
 810c41a:	f7ff ff6b 	bl	810c2f4 <_ZL12readRegisterP19__I2C_HandleTypeDefth>
 810c41e:	4603      	mov	r3, r0
 810c420:	461a      	mov	r2, r3
 810c422:	687b      	ldr	r3, [r7, #4]
 810c424:	789b      	ldrb	r3, [r3, #2]
 810c426:	fa42 f303 	asr.w	r3, r2, r3
 810c42a:	81fb      	strh	r3, [r7, #14]
	if(res == 0) res++;
 810c42c:	89fb      	ldrh	r3, [r7, #14]
 810c42e:	2b00      	cmp	r3, #0
 810c430:	d102      	bne.n	810c438 <_ZN7ADS111324getLastConversionResultsEv+0x40>
 810c432:	89fb      	ldrh	r3, [r7, #14]
 810c434:	3301      	adds	r3, #1
 810c436:	81fb      	strh	r3, [r7, #14]

	if (_bitShift == 0) {
 810c438:	687b      	ldr	r3, [r7, #4]
 810c43a:	789b      	ldrb	r3, [r3, #2]
 810c43c:	2b00      	cmp	r3, #0
 810c43e:	d102      	bne.n	810c446 <_ZN7ADS111324getLastConversionResultsEv+0x4e>
		return (int16_t)res;
 810c440:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810c444:	e00b      	b.n	810c45e <_ZN7ADS111324getLastConversionResultsEv+0x66>
	}
	else {
	// Shift 12-bit results right 4 bits for the ADS1X15,
	// making sure we keep the sign bit intact
		if (res > 0x07FF) {
 810c446:	89fb      	ldrh	r3, [r7, #14]
 810c448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810c44c:	d305      	bcc.n	810c45a <_ZN7ADS111324getLastConversionResultsEv+0x62>
			// negative number - extend the sign to 16th bit
			res |= 0xF000;
 810c44e:	89fb      	ldrh	r3, [r7, #14]
 810c450:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 810c454:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 810c458:	81fb      	strh	r3, [r7, #14]
		}
	return (int16_t)res;
 810c45a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	}
}
 810c45e:	4618      	mov	r0, r3
 810c460:	3710      	adds	r7, #16
 810c462:	46bd      	mov	sp, r7
 810c464:	bd80      	pop	{r7, pc}

0810c466 <_ZN7ADS111318conversionCompleteEv>:

bool ADS1113::conversionComplete() {
 810c466:	b580      	push	{r7, lr}
 810c468:	b082      	sub	sp, #8
 810c46a:	af00      	add	r7, sp, #0
 810c46c:	6078      	str	r0, [r7, #4]
  return (readRegister(_ads1113_i2c_port, _i2cAddress, ADS1X15_REG_POINTER_CONFIG) & 0x8000) != 0;
 810c46e:	687b      	ldr	r3, [r7, #4]
 810c470:	6858      	ldr	r0, [r3, #4]
 810c472:	687b      	ldr	r3, [r7, #4]
 810c474:	781b      	ldrb	r3, [r3, #0]
 810c476:	b29b      	uxth	r3, r3
 810c478:	2201      	movs	r2, #1
 810c47a:	4619      	mov	r1, r3
 810c47c:	f7ff ff3a 	bl	810c2f4 <_ZL12readRegisterP19__I2C_HandleTypeDefth>
 810c480:	4603      	mov	r3, r0
 810c482:	b21b      	sxth	r3, r3
 810c484:	b29b      	uxth	r3, r3
 810c486:	0bdb      	lsrs	r3, r3, #15
 810c488:	b2db      	uxtb	r3, r3
}
 810c48a:	4618      	mov	r0, r3
 810c48c:	3708      	adds	r7, #8
 810c48e:	46bd      	mov	sp, r7
 810c490:	bd80      	pop	{r7, pc}

0810c492 <_ZN7ADS111313getMultiplierEv>:

float ADS1113::getMultiplier(){
 810c492:	b480      	push	{r7}
 810c494:	b083      	sub	sp, #12
 810c496:	af00      	add	r7, sp, #0
 810c498:	6078      	str	r0, [r7, #4]
	return _multiplier;
 810c49a:	687b      	ldr	r3, [r7, #4]
 810c49c:	689b      	ldr	r3, [r3, #8]
 810c49e:	ee07 3a90 	vmov	s15, r3
}
 810c4a2:	eeb0 0a67 	vmov.f32	s0, s15
 810c4a6:	370c      	adds	r7, #12
 810c4a8:	46bd      	mov	sp, r7
 810c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4ae:	4770      	bx	lr

0810c4b0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 810c4b0:	b480      	push	{r7}
 810c4b2:	b083      	sub	sp, #12
 810c4b4:	af00      	add	r7, sp, #0
 810c4b6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 810c4b8:	687b      	ldr	r3, [r7, #4]
 810c4ba:	2203      	movs	r2, #3
 810c4bc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 810c4be:	687b      	ldr	r3, [r7, #4]
 810c4c0:	2200      	movs	r2, #0
 810c4c2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 810c4c4:	687b      	ldr	r3, [r7, #4]
 810c4c6:	2203      	movs	r2, #3
 810c4c8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 810c4ca:	687b      	ldr	r3, [r7, #4]
 810c4cc:	2203      	movs	r2, #3
 810c4ce:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 810c4d0:	687b      	ldr	r3, [r7, #4]
 810c4d2:	2203      	movs	r2, #3
 810c4d4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 810c4d6:	687b      	ldr	r3, [r7, #4]
 810c4d8:	2203      	movs	r2, #3
 810c4da:	715a      	strb	r2, [r3, #5]
}
 810c4dc:	bf00      	nop
 810c4de:	370c      	adds	r7, #12
 810c4e0:	46bd      	mov	sp, r7
 810c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4e6:	4770      	bx	lr

0810c4e8 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 810c4e8:	b580      	push	{r7, lr}
 810c4ea:	b08a      	sub	sp, #40	; 0x28
 810c4ec:	af04      	add	r7, sp, #16
 810c4ee:	60f8      	str	r0, [r7, #12]
 810c4f0:	460b      	mov	r3, r1
 810c4f2:	607a      	str	r2, [r7, #4]
 810c4f4:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 810c4f6:	68fb      	ldr	r3, [r7, #12]
 810c4f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c4fa:	005b      	lsls	r3, r3, #1
 810c4fc:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 100)
 810c4fe:	68fb      	ldr	r3, [r7, #12]
 810c500:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810c502:	7afb      	ldrb	r3, [r7, #11]
 810c504:	b29a      	uxth	r2, r3
 810c506:	8af9      	ldrh	r1, [r7, #22]
 810c508:	2364      	movs	r3, #100	; 0x64
 810c50a:	9302      	str	r3, [sp, #8]
 810c50c:	2302      	movs	r3, #2
 810c50e:	9301      	str	r3, [sp, #4]
 810c510:	f107 0314 	add.w	r3, r7, #20
 810c514:	9300      	str	r3, [sp, #0]
 810c516:	2301      	movs	r3, #1
 810c518:	f7f9 fa32 	bl	8105980 <HAL_I2C_Mem_Read>
 810c51c:	4603      	mov	r3, r0
 810c51e:	2b00      	cmp	r3, #0
 810c520:	d10b      	bne.n	810c53a <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 810c522:	7d7b      	ldrb	r3, [r7, #21]
 810c524:	021b      	lsls	r3, r3, #8
 810c526:	b21a      	sxth	r2, r3
 810c528:	7d3b      	ldrb	r3, [r7, #20]
 810c52a:	b21b      	sxth	r3, r3
 810c52c:	4313      	orrs	r3, r2
 810c52e:	b21b      	sxth	r3, r3
 810c530:	b29a      	uxth	r2, r3
 810c532:	687b      	ldr	r3, [r7, #4]
 810c534:	801a      	strh	r2, [r3, #0]
		return true;
 810c536:	2301      	movs	r3, #1
 810c538:	e000      	b.n	810c53c <read_register16+0x54>
	} else {
		return false;
 810c53a:	2300      	movs	r3, #0
	}

}
 810c53c:	4618      	mov	r0, r3
 810c53e:	3718      	adds	r7, #24
 810c540:	46bd      	mov	sp, r7
 810c542:	bd80      	pop	{r7, pc}

0810c544 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 810c544:	b590      	push	{r4, r7, lr}
 810c546:	b08b      	sub	sp, #44	; 0x2c
 810c548:	af04      	add	r7, sp, #16
 810c54a:	60f8      	str	r0, [r7, #12]
 810c54c:	607a      	str	r2, [r7, #4]
 810c54e:	461a      	mov	r2, r3
 810c550:	460b      	mov	r3, r1
 810c552:	72fb      	strb	r3, [r7, #11]
 810c554:	4613      	mov	r3, r2
 810c556:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 810c558:	68fb      	ldr	r3, [r7, #12]
 810c55a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c55c:	005b      	lsls	r3, r3, #1
 810c55e:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 100) == HAL_OK) {
 810c560:	68fb      	ldr	r3, [r7, #12]
 810c562:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810c564:	7afb      	ldrb	r3, [r7, #11]
 810c566:	b29c      	uxth	r4, r3
 810c568:	7abb      	ldrb	r3, [r7, #10]
 810c56a:	b29b      	uxth	r3, r3
 810c56c:	8af9      	ldrh	r1, [r7, #22]
 810c56e:	2264      	movs	r2, #100	; 0x64
 810c570:	9202      	str	r2, [sp, #8]
 810c572:	9301      	str	r3, [sp, #4]
 810c574:	687b      	ldr	r3, [r7, #4]
 810c576:	9300      	str	r3, [sp, #0]
 810c578:	2301      	movs	r3, #1
 810c57a:	4622      	mov	r2, r4
 810c57c:	f7f9 fa00 	bl	8105980 <HAL_I2C_Mem_Read>
 810c580:	4603      	mov	r3, r0
 810c582:	2b00      	cmp	r3, #0
 810c584:	d101      	bne.n	810c58a <read_data+0x46>
		return 0;
 810c586:	2300      	movs	r3, #0
 810c588:	e000      	b.n	810c58c <read_data+0x48>
	} else {
		return 1;
 810c58a:	2301      	movs	r3, #1
	}

}
 810c58c:	4618      	mov	r0, r3
 810c58e:	371c      	adds	r7, #28
 810c590:	46bd      	mov	sp, r7
 810c592:	bd90      	pop	{r4, r7, pc}

0810c594 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 810c594:	b580      	push	{r7, lr}
 810c596:	b082      	sub	sp, #8
 810c598:	af00      	add	r7, sp, #0
 810c59a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 810c59c:	687b      	ldr	r3, [r7, #4]
 810c59e:	461a      	mov	r2, r3
 810c5a0:	2188      	movs	r1, #136	; 0x88
 810c5a2:	6878      	ldr	r0, [r7, #4]
 810c5a4:	f7ff ffa0 	bl	810c4e8 <read_register16>
 810c5a8:	4603      	mov	r3, r0
 810c5aa:	2b00      	cmp	r3, #0
 810c5ac:	d06f      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 810c5ae:	687b      	ldr	r3, [r7, #4]
 810c5b0:	3302      	adds	r3, #2
 810c5b2:	461a      	mov	r2, r3
 810c5b4:	218a      	movs	r1, #138	; 0x8a
 810c5b6:	6878      	ldr	r0, [r7, #4]
 810c5b8:	f7ff ff96 	bl	810c4e8 <read_register16>
 810c5bc:	4603      	mov	r3, r0
 810c5be:	2b00      	cmp	r3, #0
 810c5c0:	d065      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 810c5c2:	687b      	ldr	r3, [r7, #4]
 810c5c4:	3304      	adds	r3, #4
 810c5c6:	461a      	mov	r2, r3
 810c5c8:	218c      	movs	r1, #140	; 0x8c
 810c5ca:	6878      	ldr	r0, [r7, #4]
 810c5cc:	f7ff ff8c 	bl	810c4e8 <read_register16>
 810c5d0:	4603      	mov	r3, r0
 810c5d2:	2b00      	cmp	r3, #0
 810c5d4:	d05b      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 810c5d6:	687b      	ldr	r3, [r7, #4]
 810c5d8:	3306      	adds	r3, #6
 810c5da:	461a      	mov	r2, r3
 810c5dc:	218e      	movs	r1, #142	; 0x8e
 810c5de:	6878      	ldr	r0, [r7, #4]
 810c5e0:	f7ff ff82 	bl	810c4e8 <read_register16>
 810c5e4:	4603      	mov	r3, r0
 810c5e6:	2b00      	cmp	r3, #0
 810c5e8:	d051      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 810c5ea:	687b      	ldr	r3, [r7, #4]
 810c5ec:	3308      	adds	r3, #8
 810c5ee:	461a      	mov	r2, r3
 810c5f0:	2190      	movs	r1, #144	; 0x90
 810c5f2:	6878      	ldr	r0, [r7, #4]
 810c5f4:	f7ff ff78 	bl	810c4e8 <read_register16>
 810c5f8:	4603      	mov	r3, r0
 810c5fa:	2b00      	cmp	r3, #0
 810c5fc:	d047      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 810c5fe:	687b      	ldr	r3, [r7, #4]
 810c600:	330a      	adds	r3, #10
 810c602:	461a      	mov	r2, r3
 810c604:	2192      	movs	r1, #146	; 0x92
 810c606:	6878      	ldr	r0, [r7, #4]
 810c608:	f7ff ff6e 	bl	810c4e8 <read_register16>
 810c60c:	4603      	mov	r3, r0
 810c60e:	2b00      	cmp	r3, #0
 810c610:	d03d      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 810c612:	687b      	ldr	r3, [r7, #4]
 810c614:	330c      	adds	r3, #12
 810c616:	461a      	mov	r2, r3
 810c618:	2194      	movs	r1, #148	; 0x94
 810c61a:	6878      	ldr	r0, [r7, #4]
 810c61c:	f7ff ff64 	bl	810c4e8 <read_register16>
 810c620:	4603      	mov	r3, r0
 810c622:	2b00      	cmp	r3, #0
 810c624:	d033      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 810c626:	687b      	ldr	r3, [r7, #4]
 810c628:	330e      	adds	r3, #14
 810c62a:	461a      	mov	r2, r3
 810c62c:	2196      	movs	r1, #150	; 0x96
 810c62e:	6878      	ldr	r0, [r7, #4]
 810c630:	f7ff ff5a 	bl	810c4e8 <read_register16>
 810c634:	4603      	mov	r3, r0
 810c636:	2b00      	cmp	r3, #0
 810c638:	d029      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 810c63a:	687b      	ldr	r3, [r7, #4]
 810c63c:	3310      	adds	r3, #16
 810c63e:	461a      	mov	r2, r3
 810c640:	2198      	movs	r1, #152	; 0x98
 810c642:	6878      	ldr	r0, [r7, #4]
 810c644:	f7ff ff50 	bl	810c4e8 <read_register16>
 810c648:	4603      	mov	r3, r0
 810c64a:	2b00      	cmp	r3, #0
 810c64c:	d01f      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 810c64e:	687b      	ldr	r3, [r7, #4]
 810c650:	3312      	adds	r3, #18
 810c652:	461a      	mov	r2, r3
 810c654:	219a      	movs	r1, #154	; 0x9a
 810c656:	6878      	ldr	r0, [r7, #4]
 810c658:	f7ff ff46 	bl	810c4e8 <read_register16>
 810c65c:	4603      	mov	r3, r0
 810c65e:	2b00      	cmp	r3, #0
 810c660:	d015      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 810c662:	687b      	ldr	r3, [r7, #4]
 810c664:	3314      	adds	r3, #20
 810c666:	461a      	mov	r2, r3
 810c668:	219c      	movs	r1, #156	; 0x9c
 810c66a:	6878      	ldr	r0, [r7, #4]
 810c66c:	f7ff ff3c 	bl	810c4e8 <read_register16>
 810c670:	4603      	mov	r3, r0
 810c672:	2b00      	cmp	r3, #0
 810c674:	d00b      	beq.n	810c68e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 810c676:	687b      	ldr	r3, [r7, #4]
 810c678:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 810c67a:	461a      	mov	r2, r3
 810c67c:	219e      	movs	r1, #158	; 0x9e
 810c67e:	6878      	ldr	r0, [r7, #4]
 810c680:	f7ff ff32 	bl	810c4e8 <read_register16>
 810c684:	4603      	mov	r3, r0
 810c686:	2b00      	cmp	r3, #0
 810c688:	d001      	beq.n	810c68e <read_calibration_data+0xfa>

		return true;
 810c68a:	2301      	movs	r3, #1
 810c68c:	e000      	b.n	810c690 <read_calibration_data+0xfc>
	}

	return false;
 810c68e:	2300      	movs	r3, #0
}
 810c690:	4618      	mov	r0, r3
 810c692:	3708      	adds	r7, #8
 810c694:	46bd      	mov	sp, r7
 810c696:	bd80      	pop	{r7, pc}

0810c698 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 810c698:	b580      	push	{r7, lr}
 810c69a:	b084      	sub	sp, #16
 810c69c:	af00      	add	r7, sp, #0
 810c69e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 810c6a0:	687b      	ldr	r3, [r7, #4]
 810c6a2:	f103 0218 	add.w	r2, r3, #24
 810c6a6:	2301      	movs	r3, #1
 810c6a8:	21a1      	movs	r1, #161	; 0xa1
 810c6aa:	6878      	ldr	r0, [r7, #4]
 810c6ac:	f7ff ff4a 	bl	810c544 <read_data>
 810c6b0:	4603      	mov	r3, r0
 810c6b2:	2b00      	cmp	r3, #0
 810c6b4:	d14b      	bne.n	810c74e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 810c6b6:	687b      	ldr	r3, [r7, #4]
 810c6b8:	331a      	adds	r3, #26
 810c6ba:	461a      	mov	r2, r3
 810c6bc:	21e1      	movs	r1, #225	; 0xe1
 810c6be:	6878      	ldr	r0, [r7, #4]
 810c6c0:	f7ff ff12 	bl	810c4e8 <read_register16>
 810c6c4:	4603      	mov	r3, r0
 810c6c6:	2b00      	cmp	r3, #0
 810c6c8:	d041      	beq.n	810c74e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 810c6ca:	687b      	ldr	r3, [r7, #4]
 810c6cc:	f103 021c 	add.w	r2, r3, #28
 810c6d0:	2301      	movs	r3, #1
 810c6d2:	21e3      	movs	r1, #227	; 0xe3
 810c6d4:	6878      	ldr	r0, [r7, #4]
 810c6d6:	f7ff ff35 	bl	810c544 <read_data>
 810c6da:	4603      	mov	r3, r0
 810c6dc:	2b00      	cmp	r3, #0
 810c6de:	d136      	bne.n	810c74e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 810c6e0:	f107 030e 	add.w	r3, r7, #14
 810c6e4:	461a      	mov	r2, r3
 810c6e6:	21e4      	movs	r1, #228	; 0xe4
 810c6e8:	6878      	ldr	r0, [r7, #4]
 810c6ea:	f7ff fefd 	bl	810c4e8 <read_register16>
 810c6ee:	4603      	mov	r3, r0
 810c6f0:	2b00      	cmp	r3, #0
 810c6f2:	d02c      	beq.n	810c74e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 810c6f4:	f107 030c 	add.w	r3, r7, #12
 810c6f8:	461a      	mov	r2, r3
 810c6fa:	21e5      	movs	r1, #229	; 0xe5
 810c6fc:	6878      	ldr	r0, [r7, #4]
 810c6fe:	f7ff fef3 	bl	810c4e8 <read_register16>
 810c702:	4603      	mov	r3, r0
 810c704:	2b00      	cmp	r3, #0
 810c706:	d022      	beq.n	810c74e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 810c708:	687b      	ldr	r3, [r7, #4]
 810c70a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 810c70e:	2301      	movs	r3, #1
 810c710:	21e7      	movs	r1, #231	; 0xe7
 810c712:	6878      	ldr	r0, [r7, #4]
 810c714:	f7ff ff16 	bl	810c544 <read_data>
 810c718:	4603      	mov	r3, r0
 810c71a:	2b00      	cmp	r3, #0
 810c71c:	d117      	bne.n	810c74e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 810c71e:	89fb      	ldrh	r3, [r7, #14]
 810c720:	011b      	lsls	r3, r3, #4
 810c722:	b21b      	sxth	r3, r3
 810c724:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 810c728:	b21a      	sxth	r2, r3
 810c72a:	89fb      	ldrh	r3, [r7, #14]
 810c72c:	121b      	asrs	r3, r3, #8
 810c72e:	b21b      	sxth	r3, r3
 810c730:	f003 030f 	and.w	r3, r3, #15
 810c734:	b21b      	sxth	r3, r3
 810c736:	4313      	orrs	r3, r2
 810c738:	b21a      	sxth	r2, r3
 810c73a:	687b      	ldr	r3, [r7, #4]
 810c73c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 810c73e:	89bb      	ldrh	r3, [r7, #12]
 810c740:	091b      	lsrs	r3, r3, #4
 810c742:	b29b      	uxth	r3, r3
 810c744:	b21a      	sxth	r2, r3
 810c746:	687b      	ldr	r3, [r7, #4]
 810c748:	841a      	strh	r2, [r3, #32]

		return true;
 810c74a:	2301      	movs	r3, #1
 810c74c:	e000      	b.n	810c750 <read_hum_calibration_data+0xb8>
	}

	return false;
 810c74e:	2300      	movs	r3, #0
}
 810c750:	4618      	mov	r0, r3
 810c752:	3710      	adds	r7, #16
 810c754:	46bd      	mov	sp, r7
 810c756:	bd80      	pop	{r7, pc}

0810c758 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 810c758:	b580      	push	{r7, lr}
 810c75a:	b088      	sub	sp, #32
 810c75c:	af04      	add	r7, sp, #16
 810c75e:	6078      	str	r0, [r7, #4]
 810c760:	460b      	mov	r3, r1
 810c762:	70fb      	strb	r3, [r7, #3]
 810c764:	4613      	mov	r3, r2
 810c766:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 810c768:	687b      	ldr	r3, [r7, #4]
 810c76a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c76c:	005b      	lsls	r3, r3, #1
 810c76e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 810c770:	687b      	ldr	r3, [r7, #4]
 810c772:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810c774:	78fb      	ldrb	r3, [r7, #3]
 810c776:	b29a      	uxth	r2, r3
 810c778:	89f9      	ldrh	r1, [r7, #14]
 810c77a:	f242 7310 	movw	r3, #10000	; 0x2710
 810c77e:	9302      	str	r3, [sp, #8]
 810c780:	2301      	movs	r3, #1
 810c782:	9301      	str	r3, [sp, #4]
 810c784:	1cbb      	adds	r3, r7, #2
 810c786:	9300      	str	r3, [sp, #0]
 810c788:	2301      	movs	r3, #1
 810c78a:	f7f8 ffe5 	bl	8105758 <HAL_I2C_Mem_Write>
 810c78e:	4603      	mov	r3, r0
 810c790:	2b00      	cmp	r3, #0
 810c792:	d101      	bne.n	810c798 <write_register8+0x40>
		return false;
 810c794:	2300      	movs	r3, #0
 810c796:	e000      	b.n	810c79a <write_register8+0x42>
	else
		return true;
 810c798:	2301      	movs	r3, #1
}
 810c79a:	4618      	mov	r0, r3
 810c79c:	3710      	adds	r7, #16
 810c79e:	46bd      	mov	sp, r7
 810c7a0:	bd80      	pop	{r7, pc}

0810c7a2 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 810c7a2:	b580      	push	{r7, lr}
 810c7a4:	b084      	sub	sp, #16
 810c7a6:	af00      	add	r7, sp, #0
 810c7a8:	6078      	str	r0, [r7, #4]
 810c7aa:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 810c7ac:	687b      	ldr	r3, [r7, #4]
 810c7ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c7b0:	2b76      	cmp	r3, #118	; 0x76
 810c7b2:	d005      	beq.n	810c7c0 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 810c7b4:	687b      	ldr	r3, [r7, #4]
 810c7b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c7b8:	2b77      	cmp	r3, #119	; 0x77
 810c7ba:	d001      	beq.n	810c7c0 <bmp280_init+0x1e>

		return false;
 810c7bc:	2300      	movs	r3, #0
 810c7be:	e099      	b.n	810c8f4 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 810c7c0:	687b      	ldr	r3, [r7, #4]
 810c7c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 810c7c6:	2301      	movs	r3, #1
 810c7c8:	21d0      	movs	r1, #208	; 0xd0
 810c7ca:	6878      	ldr	r0, [r7, #4]
 810c7cc:	f7ff feba 	bl	810c544 <read_data>
 810c7d0:	4603      	mov	r3, r0
 810c7d2:	2b00      	cmp	r3, #0
 810c7d4:	d001      	beq.n	810c7da <bmp280_init+0x38>
		return false;
 810c7d6:	2300      	movs	r3, #0
 810c7d8:	e08c      	b.n	810c8f4 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 810c7da:	687b      	ldr	r3, [r7, #4]
 810c7dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c7e0:	2b58      	cmp	r3, #88	; 0x58
 810c7e2:	d006      	beq.n	810c7f2 <bmp280_init+0x50>
 810c7e4:	687b      	ldr	r3, [r7, #4]
 810c7e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c7ea:	2b60      	cmp	r3, #96	; 0x60
 810c7ec:	d001      	beq.n	810c7f2 <bmp280_init+0x50>

		return false;
 810c7ee:	2300      	movs	r3, #0
 810c7f0:	e080      	b.n	810c8f4 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 810c7f2:	22b6      	movs	r2, #182	; 0xb6
 810c7f4:	21e0      	movs	r1, #224	; 0xe0
 810c7f6:	6878      	ldr	r0, [r7, #4]
 810c7f8:	f7ff ffae 	bl	810c758 <write_register8>
 810c7fc:	4603      	mov	r3, r0
 810c7fe:	2b00      	cmp	r3, #0
 810c800:	d001      	beq.n	810c806 <bmp280_init+0x64>
		return false;
 810c802:	2300      	movs	r3, #0
 810c804:	e076      	b.n	810c8f4 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 810c806:	f107 020c 	add.w	r2, r7, #12
 810c80a:	2301      	movs	r3, #1
 810c80c:	21f3      	movs	r1, #243	; 0xf3
 810c80e:	6878      	ldr	r0, [r7, #4]
 810c810:	f7ff fe98 	bl	810c544 <read_data>
 810c814:	4603      	mov	r3, r0
 810c816:	2b00      	cmp	r3, #0
 810c818:	d1f5      	bne.n	810c806 <bmp280_init+0x64>
				&& (status & 1) == 0)
 810c81a:	7b3b      	ldrb	r3, [r7, #12]
 810c81c:	f003 0301 	and.w	r3, r3, #1
 810c820:	2b00      	cmp	r3, #0
 810c822:	d1f0      	bne.n	810c806 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 810c824:	6878      	ldr	r0, [r7, #4]
 810c826:	f7ff feb5 	bl	810c594 <read_calibration_data>
 810c82a:	4603      	mov	r3, r0
 810c82c:	f083 0301 	eor.w	r3, r3, #1
 810c830:	b2db      	uxtb	r3, r3
 810c832:	2b00      	cmp	r3, #0
 810c834:	d100      	bne.n	810c838 <bmp280_init+0x96>
 810c836:	e001      	b.n	810c83c <bmp280_init+0x9a>
		return false;
 810c838:	2300      	movs	r3, #0
 810c83a:	e05b      	b.n	810c8f4 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 810c83c:	687b      	ldr	r3, [r7, #4]
 810c83e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c842:	2b60      	cmp	r3, #96	; 0x60
 810c844:	d10a      	bne.n	810c85c <bmp280_init+0xba>
 810c846:	6878      	ldr	r0, [r7, #4]
 810c848:	f7ff ff26 	bl	810c698 <read_hum_calibration_data>
 810c84c:	4603      	mov	r3, r0
 810c84e:	f083 0301 	eor.w	r3, r3, #1
 810c852:	b2db      	uxtb	r3, r3
 810c854:	2b00      	cmp	r3, #0
 810c856:	d001      	beq.n	810c85c <bmp280_init+0xba>
		return false;
 810c858:	2300      	movs	r3, #0
 810c85a:	e04b      	b.n	810c8f4 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 810c85c:	683b      	ldr	r3, [r7, #0]
 810c85e:	795b      	ldrb	r3, [r3, #5]
 810c860:	015b      	lsls	r3, r3, #5
 810c862:	b25a      	sxtb	r2, r3
 810c864:	683b      	ldr	r3, [r7, #0]
 810c866:	785b      	ldrb	r3, [r3, #1]
 810c868:	009b      	lsls	r3, r3, #2
 810c86a:	b25b      	sxtb	r3, r3
 810c86c:	4313      	orrs	r3, r2
 810c86e:	b25b      	sxtb	r3, r3
 810c870:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 810c872:	7bfb      	ldrb	r3, [r7, #15]
 810c874:	461a      	mov	r2, r3
 810c876:	21f5      	movs	r1, #245	; 0xf5
 810c878:	6878      	ldr	r0, [r7, #4]
 810c87a:	f7ff ff6d 	bl	810c758 <write_register8>
 810c87e:	4603      	mov	r3, r0
 810c880:	2b00      	cmp	r3, #0
 810c882:	d001      	beq.n	810c888 <bmp280_init+0xe6>
		return false;
 810c884:	2300      	movs	r3, #0
 810c886:	e035      	b.n	810c8f4 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 810c888:	683b      	ldr	r3, [r7, #0]
 810c88a:	781b      	ldrb	r3, [r3, #0]
 810c88c:	2b01      	cmp	r3, #1
 810c88e:	d102      	bne.n	810c896 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 810c890:	683b      	ldr	r3, [r7, #0]
 810c892:	2200      	movs	r2, #0
 810c894:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 810c896:	683b      	ldr	r3, [r7, #0]
 810c898:	78db      	ldrb	r3, [r3, #3]
 810c89a:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 810c89c:	b25a      	sxtb	r2, r3
 810c89e:	683b      	ldr	r3, [r7, #0]
 810c8a0:	789b      	ldrb	r3, [r3, #2]
 810c8a2:	009b      	lsls	r3, r3, #2
 810c8a4:	b25b      	sxtb	r3, r3
 810c8a6:	4313      	orrs	r3, r2
 810c8a8:	b25a      	sxtb	r2, r3
 810c8aa:	683b      	ldr	r3, [r7, #0]
 810c8ac:	781b      	ldrb	r3, [r3, #0]
 810c8ae:	b25b      	sxtb	r3, r3
 810c8b0:	4313      	orrs	r3, r2
 810c8b2:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 810c8b4:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 810c8b6:	687b      	ldr	r3, [r7, #4]
 810c8b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c8bc:	2b60      	cmp	r3, #96	; 0x60
 810c8be:	d10d      	bne.n	810c8dc <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 810c8c0:	683b      	ldr	r3, [r7, #0]
 810c8c2:	791b      	ldrb	r3, [r3, #4]
 810c8c4:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 810c8c6:	7b7b      	ldrb	r3, [r7, #13]
 810c8c8:	461a      	mov	r2, r3
 810c8ca:	21f2      	movs	r1, #242	; 0xf2
 810c8cc:	6878      	ldr	r0, [r7, #4]
 810c8ce:	f7ff ff43 	bl	810c758 <write_register8>
 810c8d2:	4603      	mov	r3, r0
 810c8d4:	2b00      	cmp	r3, #0
 810c8d6:	d001      	beq.n	810c8dc <bmp280_init+0x13a>
			return false;
 810c8d8:	2300      	movs	r3, #0
 810c8da:	e00b      	b.n	810c8f4 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 810c8dc:	7bbb      	ldrb	r3, [r7, #14]
 810c8de:	461a      	mov	r2, r3
 810c8e0:	21f4      	movs	r1, #244	; 0xf4
 810c8e2:	6878      	ldr	r0, [r7, #4]
 810c8e4:	f7ff ff38 	bl	810c758 <write_register8>
 810c8e8:	4603      	mov	r3, r0
 810c8ea:	2b00      	cmp	r3, #0
 810c8ec:	d001      	beq.n	810c8f2 <bmp280_init+0x150>
		return false;
 810c8ee:	2300      	movs	r3, #0
 810c8f0:	e000      	b.n	810c8f4 <bmp280_init+0x152>
	}

	return true;
 810c8f2:	2301      	movs	r3, #1
}
 810c8f4:	4618      	mov	r0, r3
 810c8f6:	3710      	adds	r7, #16
 810c8f8:	46bd      	mov	sp, r7
 810c8fa:	bd80      	pop	{r7, pc}

0810c8fc <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 810c8fc:	b480      	push	{r7}
 810c8fe:	b087      	sub	sp, #28
 810c900:	af00      	add	r7, sp, #0
 810c902:	60f8      	str	r0, [r7, #12]
 810c904:	60b9      	str	r1, [r7, #8]
 810c906:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810c908:	68bb      	ldr	r3, [r7, #8]
 810c90a:	10da      	asrs	r2, r3, #3
 810c90c:	68fb      	ldr	r3, [r7, #12]
 810c90e:	881b      	ldrh	r3, [r3, #0]
 810c910:	005b      	lsls	r3, r3, #1
 810c912:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 810c914:	68fa      	ldr	r2, [r7, #12]
 810c916:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 810c91a:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810c91e:	12db      	asrs	r3, r3, #11
 810c920:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810c922:	68bb      	ldr	r3, [r7, #8]
 810c924:	111b      	asrs	r3, r3, #4
 810c926:	68fa      	ldr	r2, [r7, #12]
 810c928:	8812      	ldrh	r2, [r2, #0]
 810c92a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 810c92c:	68ba      	ldr	r2, [r7, #8]
 810c92e:	1112      	asrs	r2, r2, #4
 810c930:	68f9      	ldr	r1, [r7, #12]
 810c932:	8809      	ldrh	r1, [r1, #0]
 810c934:	1a52      	subs	r2, r2, r1
 810c936:	fb02 f303 	mul.w	r3, r2, r3
 810c93a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 810c93c:	68fa      	ldr	r2, [r7, #12]
 810c93e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 810c942:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810c946:	139b      	asrs	r3, r3, #14
 810c948:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 810c94a:	697a      	ldr	r2, [r7, #20]
 810c94c:	693b      	ldr	r3, [r7, #16]
 810c94e:	441a      	add	r2, r3
 810c950:	687b      	ldr	r3, [r7, #4]
 810c952:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 810c954:	687b      	ldr	r3, [r7, #4]
 810c956:	681a      	ldr	r2, [r3, #0]
 810c958:	4613      	mov	r3, r2
 810c95a:	009b      	lsls	r3, r3, #2
 810c95c:	4413      	add	r3, r2
 810c95e:	3380      	adds	r3, #128	; 0x80
 810c960:	121b      	asrs	r3, r3, #8
}
 810c962:	4618      	mov	r0, r3
 810c964:	371c      	adds	r7, #28
 810c966:	46bd      	mov	sp, r7
 810c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c96c:	4770      	bx	lr

0810c96e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 810c96e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 810c972:	b08a      	sub	sp, #40	; 0x28
 810c974:	af00      	add	r7, sp, #0
 810c976:	60f8      	str	r0, [r7, #12]
 810c978:	60b9      	str	r1, [r7, #8]
 810c97a:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 810c97c:	687b      	ldr	r3, [r7, #4]
 810c97e:	4619      	mov	r1, r3
 810c980:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810c984:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 810c988:	f142 34ff 	adc.w	r4, r2, #4294967295
 810c98c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 810c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c992:	6a3a      	ldr	r2, [r7, #32]
 810c994:	fb02 f203 	mul.w	r2, r2, r3
 810c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c99a:	6a39      	ldr	r1, [r7, #32]
 810c99c:	fb01 f303 	mul.w	r3, r1, r3
 810c9a0:	441a      	add	r2, r3
 810c9a2:	6a39      	ldr	r1, [r7, #32]
 810c9a4:	6a3b      	ldr	r3, [r7, #32]
 810c9a6:	fba1 3403 	umull	r3, r4, r1, r3
 810c9aa:	4422      	add	r2, r4
 810c9ac:	4614      	mov	r4, r2
 810c9ae:	68fa      	ldr	r2, [r7, #12]
 810c9b0:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 810c9b4:	b211      	sxth	r1, r2
 810c9b6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810c9ba:	fb01 f504 	mul.w	r5, r1, r4
 810c9be:	fb03 f002 	mul.w	r0, r3, r2
 810c9c2:	4428      	add	r0, r5
 810c9c4:	fba3 3401 	umull	r3, r4, r3, r1
 810c9c8:	1902      	adds	r2, r0, r4
 810c9ca:	4614      	mov	r4, r2
 810c9cc:	e9c7 3406 	strd	r3, r4, [r7, #24]
 810c9d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 810c9d4:	68fb      	ldr	r3, [r7, #12]
 810c9d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 810c9da:	b21b      	sxth	r3, r3
 810c9dc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810c9e0:	6a3a      	ldr	r2, [r7, #32]
 810c9e2:	fb04 f102 	mul.w	r1, r4, r2
 810c9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c9e8:	fb03 f202 	mul.w	r2, r3, r2
 810c9ec:	1888      	adds	r0, r1, r2
 810c9ee:	6a3a      	ldr	r2, [r7, #32]
 810c9f0:	fba2 1203 	umull	r1, r2, r2, r3
 810c9f4:	1883      	adds	r3, r0, r2
 810c9f6:	461a      	mov	r2, r3
 810c9f8:	f04f 0500 	mov.w	r5, #0
 810c9fc:	f04f 0600 	mov.w	r6, #0
 810ca00:	0456      	lsls	r6, r2, #17
 810ca02:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 810ca06:	044d      	lsls	r5, r1, #17
 810ca08:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810ca0c:	186b      	adds	r3, r5, r1
 810ca0e:	eb46 0402 	adc.w	r4, r6, r2
 810ca12:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 810ca16:	68fb      	ldr	r3, [r7, #12]
 810ca18:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 810ca1c:	b219      	sxth	r1, r3
 810ca1e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810ca22:	f04f 0500 	mov.w	r5, #0
 810ca26:	f04f 0600 	mov.w	r6, #0
 810ca2a:	00ce      	lsls	r6, r1, #3
 810ca2c:	2500      	movs	r5, #0
 810ca2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810ca32:	186b      	adds	r3, r5, r1
 810ca34:	eb46 0402 	adc.w	r4, r6, r2
 810ca38:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ca3e:	6a3a      	ldr	r2, [r7, #32]
 810ca40:	fb02 f203 	mul.w	r2, r2, r3
 810ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ca46:	6a39      	ldr	r1, [r7, #32]
 810ca48:	fb01 f303 	mul.w	r3, r1, r3
 810ca4c:	441a      	add	r2, r3
 810ca4e:	6a39      	ldr	r1, [r7, #32]
 810ca50:	6a3b      	ldr	r3, [r7, #32]
 810ca52:	fba1 3403 	umull	r3, r4, r1, r3
 810ca56:	4422      	add	r2, r4
 810ca58:	4614      	mov	r4, r2
 810ca5a:	68fa      	ldr	r2, [r7, #12]
 810ca5c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 810ca60:	b211      	sxth	r1, r2
 810ca62:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810ca66:	fb01 f504 	mul.w	r5, r1, r4
 810ca6a:	fb03 f002 	mul.w	r0, r3, r2
 810ca6e:	4428      	add	r0, r5
 810ca70:	fba3 3401 	umull	r3, r4, r3, r1
 810ca74:	1902      	adds	r2, r0, r4
 810ca76:	4614      	mov	r4, r2
 810ca78:	f04f 0100 	mov.w	r1, #0
 810ca7c:	f04f 0200 	mov.w	r2, #0
 810ca80:	0a19      	lsrs	r1, r3, #8
 810ca82:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 810ca86:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 810ca88:	68fb      	ldr	r3, [r7, #12]
 810ca8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810ca8e:	b21b      	sxth	r3, r3
 810ca90:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810ca94:	6a38      	ldr	r0, [r7, #32]
 810ca96:	fb04 f500 	mul.w	r5, r4, r0
 810ca9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810ca9c:	fb03 f000 	mul.w	r0, r3, r0
 810caa0:	4428      	add	r0, r5
 810caa2:	6a3d      	ldr	r5, [r7, #32]
 810caa4:	fba5 5603 	umull	r5, r6, r5, r3
 810caa8:	1983      	adds	r3, r0, r6
 810caaa:	461e      	mov	r6, r3
 810caac:	f04f 0b00 	mov.w	fp, #0
 810cab0:	f04f 0c00 	mov.w	ip, #0
 810cab4:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 810cab8:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 810cabc:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810cac0:	eb1b 0301 	adds.w	r3, fp, r1
 810cac4:	eb4c 0402 	adc.w	r4, ip, r2
 810cac8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 810cacc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810cad0:	1c19      	adds	r1, r3, #0
 810cad2:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 810cad6:	68fb      	ldr	r3, [r7, #12]
 810cad8:	88db      	ldrh	r3, [r3, #6]
 810cada:	b29b      	uxth	r3, r3
 810cadc:	f04f 0400 	mov.w	r4, #0
 810cae0:	fb03 f502 	mul.w	r5, r3, r2
 810cae4:	fb01 f004 	mul.w	r0, r1, r4
 810cae8:	4428      	add	r0, r5
 810caea:	fba1 3403 	umull	r3, r4, r1, r3
 810caee:	1902      	adds	r2, r0, r4
 810caf0:	4614      	mov	r4, r2
 810caf2:	f04f 0100 	mov.w	r1, #0
 810caf6:	f04f 0200 	mov.w	r2, #0
 810cafa:	1061      	asrs	r1, r4, #1
 810cafc:	17e2      	asrs	r2, r4, #31
 810cafe:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 810cb02:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810cb06:	4323      	orrs	r3, r4
 810cb08:	d101      	bne.n	810cb0e <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 810cb0a:	2300      	movs	r3, #0
 810cb0c:	e0d4      	b.n	810ccb8 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 810cb0e:	68bb      	ldr	r3, [r7, #8]
 810cb10:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810cb14:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810cb18:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 810cb1c:	693b      	ldr	r3, [r7, #16]
 810cb1e:	ea4f 0963 	mov.w	r9, r3, asr #1
 810cb22:	693b      	ldr	r3, [r7, #16]
 810cb24:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 810cb28:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810cb2c:	4645      	mov	r5, r8
 810cb2e:	464e      	mov	r6, r9
 810cb30:	1aed      	subs	r5, r5, r3
 810cb32:	eb66 0604 	sbc.w	r6, r6, r4
 810cb36:	46a8      	mov	r8, r5
 810cb38:	46b1      	mov	r9, r6
 810cb3a:	eb18 0308 	adds.w	r3, r8, r8
 810cb3e:	eb49 0409 	adc.w	r4, r9, r9
 810cb42:	4698      	mov	r8, r3
 810cb44:	46a1      	mov	r9, r4
 810cb46:	eb18 0805 	adds.w	r8, r8, r5
 810cb4a:	eb49 0906 	adc.w	r9, r9, r6
 810cb4e:	f04f 0100 	mov.w	r1, #0
 810cb52:	f04f 0200 	mov.w	r2, #0
 810cb56:	ea4f 1289 	mov.w	r2, r9, lsl #6
 810cb5a:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 810cb5e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 810cb62:	eb18 0801 	adds.w	r8, r8, r1
 810cb66:	eb49 0902 	adc.w	r9, r9, r2
 810cb6a:	f04f 0100 	mov.w	r1, #0
 810cb6e:	f04f 0200 	mov.w	r2, #0
 810cb72:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810cb76:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810cb7a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810cb7e:	4688      	mov	r8, r1
 810cb80:	4691      	mov	r9, r2
 810cb82:	eb18 0805 	adds.w	r8, r8, r5
 810cb86:	eb49 0906 	adc.w	r9, r9, r6
 810cb8a:	f04f 0100 	mov.w	r1, #0
 810cb8e:	f04f 0200 	mov.w	r2, #0
 810cb92:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810cb96:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810cb9a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810cb9e:	4688      	mov	r8, r1
 810cba0:	4691      	mov	r9, r2
 810cba2:	eb18 0005 	adds.w	r0, r8, r5
 810cba6:	eb49 0106 	adc.w	r1, r9, r6
 810cbaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810cbae:	f7f4 f8e3 	bl	8100d78 <__aeabi_ldivmod>
 810cbb2:	4603      	mov	r3, r0
 810cbb4:	460c      	mov	r4, r1
 810cbb6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 810cbba:	68fb      	ldr	r3, [r7, #12]
 810cbbc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 810cbc0:	b219      	sxth	r1, r3
 810cbc2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810cbc6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810cbca:	f04f 0300 	mov.w	r3, #0
 810cbce:	f04f 0400 	mov.w	r4, #0
 810cbd2:	0b6b      	lsrs	r3, r5, #13
 810cbd4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810cbd8:	1374      	asrs	r4, r6, #13
 810cbda:	fb03 f502 	mul.w	r5, r3, r2
 810cbde:	fb01 f004 	mul.w	r0, r1, r4
 810cbe2:	4428      	add	r0, r5
 810cbe4:	fba1 1203 	umull	r1, r2, r1, r3
 810cbe8:	1883      	adds	r3, r0, r2
 810cbea:	461a      	mov	r2, r3
 810cbec:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810cbf0:	f04f 0300 	mov.w	r3, #0
 810cbf4:	f04f 0400 	mov.w	r4, #0
 810cbf8:	0b6b      	lsrs	r3, r5, #13
 810cbfa:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810cbfe:	1374      	asrs	r4, r6, #13
 810cc00:	fb03 f502 	mul.w	r5, r3, r2
 810cc04:	fb01 f004 	mul.w	r0, r1, r4
 810cc08:	4428      	add	r0, r5
 810cc0a:	fba1 1203 	umull	r1, r2, r1, r3
 810cc0e:	1883      	adds	r3, r0, r2
 810cc10:	461a      	mov	r2, r3
 810cc12:	f04f 0300 	mov.w	r3, #0
 810cc16:	f04f 0400 	mov.w	r4, #0
 810cc1a:	0e4b      	lsrs	r3, r1, #25
 810cc1c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 810cc20:	1654      	asrs	r4, r2, #25
 810cc22:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 810cc26:	68fb      	ldr	r3, [r7, #12]
 810cc28:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 810cc2c:	b21b      	sxth	r3, r3
 810cc2e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810cc32:	693a      	ldr	r2, [r7, #16]
 810cc34:	fb04 f102 	mul.w	r1, r4, r2
 810cc38:	697a      	ldr	r2, [r7, #20]
 810cc3a:	fb03 f202 	mul.w	r2, r3, r2
 810cc3e:	1888      	adds	r0, r1, r2
 810cc40:	693a      	ldr	r2, [r7, #16]
 810cc42:	fba2 1203 	umull	r1, r2, r2, r3
 810cc46:	1883      	adds	r3, r0, r2
 810cc48:	461a      	mov	r2, r3
 810cc4a:	f04f 0300 	mov.w	r3, #0
 810cc4e:	f04f 0400 	mov.w	r4, #0
 810cc52:	0ccb      	lsrs	r3, r1, #19
 810cc54:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 810cc58:	14d4      	asrs	r4, r2, #19
 810cc5a:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 810cc5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810cc62:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810cc66:	eb11 0803 	adds.w	r8, r1, r3
 810cc6a:	eb42 0904 	adc.w	r9, r2, r4
 810cc6e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810cc72:	eb13 0508 	adds.w	r5, r3, r8
 810cc76:	eb44 0609 	adc.w	r6, r4, r9
 810cc7a:	f04f 0100 	mov.w	r1, #0
 810cc7e:	f04f 0200 	mov.w	r2, #0
 810cc82:	0a29      	lsrs	r1, r5, #8
 810cc84:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 810cc88:	1232      	asrs	r2, r6, #8
 810cc8a:	68fb      	ldr	r3, [r7, #12]
 810cc8c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 810cc90:	b21d      	sxth	r5, r3
 810cc92:	ea4f 76e5 	mov.w	r6, r5, asr #31
 810cc96:	f04f 0800 	mov.w	r8, #0
 810cc9a:	f04f 0900 	mov.w	r9, #0
 810cc9e:	ea4f 1906 	mov.w	r9, r6, lsl #4
 810cca2:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 810cca6:	ea4f 1805 	mov.w	r8, r5, lsl #4
 810ccaa:	eb18 0301 	adds.w	r3, r8, r1
 810ccae:	eb49 0402 	adc.w	r4, r9, r2
 810ccb2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 810ccb6:	693b      	ldr	r3, [r7, #16]
}
 810ccb8:	4618      	mov	r0, r3
 810ccba:	3728      	adds	r7, #40	; 0x28
 810ccbc:	46bd      	mov	sp, r7
 810ccbe:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0810ccc2 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 810ccc2:	b480      	push	{r7}
 810ccc4:	b087      	sub	sp, #28
 810ccc6:	af00      	add	r7, sp, #0
 810ccc8:	60f8      	str	r0, [r7, #12]
 810ccca:	60b9      	str	r1, [r7, #8]
 810cccc:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 810ccce:	687b      	ldr	r3, [r7, #4]
 810ccd0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 810ccd4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810ccd6:	68bb      	ldr	r3, [r7, #8]
 810ccd8:	039a      	lsls	r2, r3, #14
 810ccda:	68fb      	ldr	r3, [r7, #12]
 810ccdc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 810cce0:	051b      	lsls	r3, r3, #20
 810cce2:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 810cce4:	68fb      	ldr	r3, [r7, #12]
 810cce6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 810ccea:	4619      	mov	r1, r3
 810ccec:	697b      	ldr	r3, [r7, #20]
 810ccee:	fb03 f301 	mul.w	r3, r3, r1
 810ccf2:	1ad3      	subs	r3, r2, r3
 810ccf4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 810ccf8:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 810ccfa:	68fa      	ldr	r2, [r7, #12]
 810ccfc:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 810cd00:	4611      	mov	r1, r2
 810cd02:	697a      	ldr	r2, [r7, #20]
 810cd04:	fb02 f201 	mul.w	r2, r2, r1
 810cd08:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810cd0a:	68f9      	ldr	r1, [r7, #12]
 810cd0c:	7f09      	ldrb	r1, [r1, #28]
 810cd0e:	4608      	mov	r0, r1
 810cd10:	6979      	ldr	r1, [r7, #20]
 810cd12:	fb01 f100 	mul.w	r1, r1, r0
 810cd16:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810cd18:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810cd1c:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810cd20:	1292      	asrs	r2, r2, #10
 810cd22:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 810cd26:	68f9      	ldr	r1, [r7, #12]
 810cd28:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 810cd2c:	fb01 f202 	mul.w	r2, r1, r2
 810cd30:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 810cd34:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810cd36:	fb02 f303 	mul.w	r3, r2, r3
 810cd3a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 810cd3c:	697b      	ldr	r3, [r7, #20]
 810cd3e:	13db      	asrs	r3, r3, #15
 810cd40:	697a      	ldr	r2, [r7, #20]
 810cd42:	13d2      	asrs	r2, r2, #15
 810cd44:	fb02 f303 	mul.w	r3, r2, r3
 810cd48:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 810cd4a:	68fa      	ldr	r2, [r7, #12]
 810cd4c:	7e12      	ldrb	r2, [r2, #24]
 810cd4e:	fb02 f303 	mul.w	r3, r2, r3
 810cd52:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 810cd54:	697a      	ldr	r2, [r7, #20]
 810cd56:	1ad3      	subs	r3, r2, r3
 810cd58:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 810cd5a:	697b      	ldr	r3, [r7, #20]
 810cd5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810cd60:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 810cd62:	697b      	ldr	r3, [r7, #20]
 810cd64:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 810cd68:	bfa8      	it	ge
 810cd6a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 810cd6e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 810cd70:	697b      	ldr	r3, [r7, #20]
 810cd72:	131b      	asrs	r3, r3, #12
}
 810cd74:	4618      	mov	r0, r3
 810cd76:	371c      	adds	r7, #28
 810cd78:	46bd      	mov	sp, r7
 810cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd7e:	4770      	bx	lr

0810cd80 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 810cd80:	b580      	push	{r7, lr}
 810cd82:	b08c      	sub	sp, #48	; 0x30
 810cd84:	af00      	add	r7, sp, #0
 810cd86:	60f8      	str	r0, [r7, #12]
 810cd88:	60b9      	str	r1, [r7, #8]
 810cd8a:	607a      	str	r2, [r7, #4]
 810cd8c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 810cd8e:	68fb      	ldr	r3, [r7, #12]
 810cd90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810cd94:	2b60      	cmp	r3, #96	; 0x60
 810cd96:	d007      	beq.n	810cda8 <bmp280_read_fixed+0x28>
		if (humidity)
 810cd98:	683b      	ldr	r3, [r7, #0]
 810cd9a:	2b00      	cmp	r3, #0
 810cd9c:	d002      	beq.n	810cda4 <bmp280_read_fixed+0x24>
			*humidity = 0;
 810cd9e:	683b      	ldr	r3, [r7, #0]
 810cda0:	2200      	movs	r2, #0
 810cda2:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 810cda4:	2300      	movs	r3, #0
 810cda6:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 810cda8:	683b      	ldr	r3, [r7, #0]
 810cdaa:	2b00      	cmp	r3, #0
 810cdac:	d001      	beq.n	810cdb2 <bmp280_read_fixed+0x32>
 810cdae:	2308      	movs	r3, #8
 810cdb0:	e000      	b.n	810cdb4 <bmp280_read_fixed+0x34>
 810cdb2:	2306      	movs	r3, #6
 810cdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 810cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cdb8:	b2db      	uxtb	r3, r3
 810cdba:	f107 0218 	add.w	r2, r7, #24
 810cdbe:	21f7      	movs	r1, #247	; 0xf7
 810cdc0:	68f8      	ldr	r0, [r7, #12]
 810cdc2:	f7ff fbbf 	bl	810c544 <read_data>
 810cdc6:	4603      	mov	r3, r0
 810cdc8:	2b00      	cmp	r3, #0
 810cdca:	d001      	beq.n	810cdd0 <bmp280_read_fixed+0x50>
		return false;
 810cdcc:	2300      	movs	r3, #0
 810cdce:	e038      	b.n	810ce42 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 810cdd0:	7e3b      	ldrb	r3, [r7, #24]
 810cdd2:	031a      	lsls	r2, r3, #12
 810cdd4:	7e7b      	ldrb	r3, [r7, #25]
 810cdd6:	011b      	lsls	r3, r3, #4
 810cdd8:	4313      	orrs	r3, r2
 810cdda:	7eba      	ldrb	r2, [r7, #26]
 810cddc:	0912      	lsrs	r2, r2, #4
 810cdde:	b2d2      	uxtb	r2, r2
 810cde0:	4313      	orrs	r3, r2
 810cde2:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 810cde4:	7efb      	ldrb	r3, [r7, #27]
 810cde6:	031a      	lsls	r2, r3, #12
 810cde8:	7f3b      	ldrb	r3, [r7, #28]
 810cdea:	011b      	lsls	r3, r3, #4
 810cdec:	4313      	orrs	r3, r2
 810cdee:	7f7a      	ldrb	r2, [r7, #29]
 810cdf0:	0912      	lsrs	r2, r2, #4
 810cdf2:	b2d2      	uxtb	r2, r2
 810cdf4:	4313      	orrs	r3, r2
 810cdf6:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 810cdf8:	f107 0314 	add.w	r3, r7, #20
 810cdfc:	461a      	mov	r2, r3
 810cdfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810ce00:	68f8      	ldr	r0, [r7, #12]
 810ce02:	f7ff fd7b 	bl	810c8fc <compensate_temperature>
 810ce06:	4602      	mov	r2, r0
 810ce08:	68bb      	ldr	r3, [r7, #8]
 810ce0a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 810ce0c:	697b      	ldr	r3, [r7, #20]
 810ce0e:	461a      	mov	r2, r3
 810ce10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810ce12:	68f8      	ldr	r0, [r7, #12]
 810ce14:	f7ff fdab 	bl	810c96e <compensate_pressure>
 810ce18:	4602      	mov	r2, r0
 810ce1a:	687b      	ldr	r3, [r7, #4]
 810ce1c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 810ce1e:	683b      	ldr	r3, [r7, #0]
 810ce20:	2b00      	cmp	r3, #0
 810ce22:	d00d      	beq.n	810ce40 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 810ce24:	7fbb      	ldrb	r3, [r7, #30]
 810ce26:	021b      	lsls	r3, r3, #8
 810ce28:	7ffa      	ldrb	r2, [r7, #31]
 810ce2a:	4313      	orrs	r3, r2
 810ce2c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 810ce2e:	697b      	ldr	r3, [r7, #20]
 810ce30:	461a      	mov	r2, r3
 810ce32:	6a39      	ldr	r1, [r7, #32]
 810ce34:	68f8      	ldr	r0, [r7, #12]
 810ce36:	f7ff ff44 	bl	810ccc2 <compensate_humidity>
 810ce3a:	4602      	mov	r2, r0
 810ce3c:	683b      	ldr	r3, [r7, #0]
 810ce3e:	601a      	str	r2, [r3, #0]
	}

	return true;
 810ce40:	2301      	movs	r3, #1
}
 810ce42:	4618      	mov	r0, r3
 810ce44:	3730      	adds	r7, #48	; 0x30
 810ce46:	46bd      	mov	sp, r7
 810ce48:	bd80      	pop	{r7, pc}
	...

0810ce4c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 810ce4c:	b580      	push	{r7, lr}
 810ce4e:	b088      	sub	sp, #32
 810ce50:	af00      	add	r7, sp, #0
 810ce52:	60f8      	str	r0, [r7, #12]
 810ce54:	60b9      	str	r1, [r7, #8]
 810ce56:	607a      	str	r2, [r7, #4]
 810ce58:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 810ce5a:	683b      	ldr	r3, [r7, #0]
 810ce5c:	2b00      	cmp	r3, #0
 810ce5e:	d002      	beq.n	810ce66 <bmp280_read_float+0x1a>
 810ce60:	f107 0314 	add.w	r3, r7, #20
 810ce64:	e000      	b.n	810ce68 <bmp280_read_float+0x1c>
 810ce66:	2300      	movs	r3, #0
 810ce68:	f107 0218 	add.w	r2, r7, #24
 810ce6c:	f107 011c 	add.w	r1, r7, #28
 810ce70:	68f8      	ldr	r0, [r7, #12]
 810ce72:	f7ff ff85 	bl	810cd80 <bmp280_read_fixed>
 810ce76:	4603      	mov	r3, r0
 810ce78:	2b00      	cmp	r3, #0
 810ce7a:	d028      	beq.n	810cece <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 810ce7c:	69fb      	ldr	r3, [r7, #28]
 810ce7e:	ee07 3a90 	vmov	s15, r3
 810ce82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810ce86:	eddf 6a14 	vldr	s13, [pc, #80]	; 810ced8 <bmp280_read_float+0x8c>
 810ce8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810ce8e:	68bb      	ldr	r3, [r7, #8]
 810ce90:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 810ce94:	69bb      	ldr	r3, [r7, #24]
 810ce96:	ee07 3a90 	vmov	s15, r3
 810ce9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810ce9e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 810cedc <bmp280_read_float+0x90>
 810cea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810cea6:	687b      	ldr	r3, [r7, #4]
 810cea8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 810ceac:	683b      	ldr	r3, [r7, #0]
 810ceae:	2b00      	cmp	r3, #0
 810ceb0:	d00b      	beq.n	810ceca <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 810ceb2:	697b      	ldr	r3, [r7, #20]
 810ceb4:	ee07 3a90 	vmov	s15, r3
 810ceb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810cebc:	eddf 6a08 	vldr	s13, [pc, #32]	; 810cee0 <bmp280_read_float+0x94>
 810cec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810cec4:	683b      	ldr	r3, [r7, #0]
 810cec6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 810ceca:	2301      	movs	r3, #1
 810cecc:	e000      	b.n	810ced0 <bmp280_read_float+0x84>
	}

	return false;
 810cece:	2300      	movs	r3, #0
}
 810ced0:	4618      	mov	r0, r3
 810ced2:	3720      	adds	r7, #32
 810ced4:	46bd      	mov	sp, r7
 810ced6:	bd80      	pop	{r7, pc}
 810ced8:	42c80000 	.word	0x42c80000
 810cedc:	43800000 	.word	0x43800000
 810cee0:	44800000 	.word	0x44800000

0810cee4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810cee4:	b580      	push	{r7, lr}
 810cee6:	b082      	sub	sp, #8
 810cee8:	af00      	add	r7, sp, #0
 810ceea:	4603      	mov	r3, r0
 810ceec:	71fb      	strb	r3, [r7, #7]
 810ceee:	79fb      	ldrb	r3, [r7, #7]
 810cef0:	4619      	mov	r1, r3
 810cef2:	2007      	movs	r0, #7
 810cef4:	f000 fa8e 	bl	810d414 <bno055_writeData>
 810cef8:	bf00      	nop
 810cefa:	3708      	adds	r7, #8
 810cefc:	46bd      	mov	sp, r7
 810cefe:	bd80      	pop	{r7, pc}

0810cf00 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 810cf00:	b580      	push	{r7, lr}
 810cf02:	b082      	sub	sp, #8
 810cf04:	af00      	add	r7, sp, #0
 810cf06:	4603      	mov	r3, r0
 810cf08:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810cf0a:	79fb      	ldrb	r3, [r7, #7]
 810cf0c:	4619      	mov	r1, r3
 810cf0e:	203d      	movs	r0, #61	; 0x3d
 810cf10:	f000 fa80 	bl	810d414 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810cf14:	79fb      	ldrb	r3, [r7, #7]
 810cf16:	2b00      	cmp	r3, #0
 810cf18:	d103      	bne.n	810cf22 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810cf1a:	2013      	movs	r0, #19
 810cf1c:	f000 fa6e 	bl	810d3fc <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 810cf20:	e002      	b.n	810cf28 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 810cf22:	2007      	movs	r0, #7
 810cf24:	f000 fa6a 	bl	810d3fc <bno055_delay>
}
 810cf28:	bf00      	nop
 810cf2a:	3708      	adds	r7, #8
 810cf2c:	46bd      	mov	sp, r7
 810cf2e:	bd80      	pop	{r7, pc}

0810cf30 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 810cf30:	b580      	push	{r7, lr}
 810cf32:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810cf34:	2000      	movs	r0, #0
 810cf36:	f7ff ffe3 	bl	810cf00 <bno055_setOperationMode>
}
 810cf3a:	bf00      	nop
 810cf3c:	bd80      	pop	{r7, pc}

0810cf3e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 810cf3e:	b580      	push	{r7, lr}
 810cf40:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810cf42:	200c      	movs	r0, #12
 810cf44:	f7ff ffdc 	bl	810cf00 <bno055_setOperationMode>
}
 810cf48:	bf00      	nop
 810cf4a:	bd80      	pop	{r7, pc}

0810cf4c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 810cf4c:	b580      	push	{r7, lr}
 810cf4e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810cf50:	2120      	movs	r1, #32
 810cf52:	203f      	movs	r0, #63	; 0x3f
 810cf54:	f000 fa5e 	bl	810d414 <bno055_writeData>
  bno055_delay(700);
 810cf58:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 810cf5c:	f000 fa4e 	bl	810d3fc <bno055_delay>
}
 810cf60:	bf00      	nop
 810cf62:	bd80      	pop	{r7, pc}

0810cf64 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810cf64:	b580      	push	{r7, lr}
 810cf66:	b082      	sub	sp, #8
 810cf68:	af00      	add	r7, sp, #0
  bno055_reset();
 810cf6a:	f7ff ffef 	bl	810cf4c <bno055_reset>

  uint8_t id = 0;
 810cf6e:	2300      	movs	r3, #0
 810cf70:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810cf72:	1dfb      	adds	r3, r7, #7
 810cf74:	2201      	movs	r2, #1
 810cf76:	4619      	mov	r1, r3
 810cf78:	2000      	movs	r0, #0
 810cf7a:	f000 fb37 	bl	810d5ec <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 810cf7e:	2000      	movs	r0, #0
 810cf80:	f7ff ffb0 	bl	810cee4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810cf84:	2100      	movs	r1, #0
 810cf86:	203f      	movs	r0, #63	; 0x3f
 810cf88:	f000 fa44 	bl	810d414 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 810cf8c:	f7ff ffd0 	bl	810cf30 <bno055_setOperationModeConfig>
  bno055_delay(10);
 810cf90:	200a      	movs	r0, #10
 810cf92:	f000 fa33 	bl	810d3fc <bno055_delay>
}
 810cf96:	bf00      	nop
 810cf98:	3708      	adds	r7, #8
 810cf9a:	46bd      	mov	sp, r7
 810cf9c:	bd80      	pop	{r7, pc}

0810cf9e <bno055_getSystemError>:
  res.magState = (tmp >> 1) & 0x01;
  res.accState = (tmp >> 0) & 0x01;
  return res;
}

uint8_t bno055_getSystemError() {
 810cf9e:	b580      	push	{r7, lr}
 810cfa0:	b082      	sub	sp, #8
 810cfa2:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 810cfa4:	2000      	movs	r0, #0
 810cfa6:	f7ff ff9d 	bl	810cee4 <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
 810cfaa:	1dfb      	adds	r3, r7, #7
 810cfac:	2201      	movs	r2, #1
 810cfae:	4619      	mov	r1, r3
 810cfb0:	203a      	movs	r0, #58	; 0x3a
 810cfb2:	f000 fb1b 	bl	810d5ec <bno055_readData>
  return tmp;
 810cfb6:	79fb      	ldrb	r3, [r7, #7]
}
 810cfb8:	4618      	mov	r0, r3
 810cfba:	3708      	adds	r7, #8
 810cfbc:	46bd      	mov	sp, r7
 810cfbe:	bd80      	pop	{r7, pc}

0810cfc0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 810cfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810cfc4:	b09f      	sub	sp, #124	; 0x7c
 810cfc6:	af00      	add	r7, sp, #0
 810cfc8:	4603      	mov	r3, r0
 810cfca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810cfce:	2000      	movs	r0, #0
 810cfd0:	f7ff ff88 	bl	810cee4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810cfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cfd8:	2b20      	cmp	r3, #32
 810cfda:	d108      	bne.n	810cfee <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810cfdc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810cfe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cfe4:	2208      	movs	r2, #8
 810cfe6:	4618      	mov	r0, r3
 810cfe8:	f000 fb00 	bl	810d5ec <bno055_readData>
 810cfec:	e007      	b.n	810cffe <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810cfee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810cff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810cff6:	2206      	movs	r2, #6
 810cff8:	4618      	mov	r0, r3
 810cffa:	f000 faf7 	bl	810d5ec <bno055_readData>

  double scale = 1;
 810cffe:	f04f 0300 	mov.w	r3, #0
 810d002:	4c8b      	ldr	r4, [pc, #556]	; (810d230 <bno055_getVector+0x270>)
 810d004:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 810d008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d00c:	2b0e      	cmp	r3, #14
 810d00e:	d109      	bne.n	810d024 <bno055_getVector+0x64>
    scale = magScale;
 810d010:	4b88      	ldr	r3, [pc, #544]	; (810d234 <bno055_getVector+0x274>)
 810d012:	881b      	ldrh	r3, [r3, #0]
 810d014:	4618      	mov	r0, r3
 810d016:	f7f3 fb0d 	bl	8100634 <__aeabi_ui2d>
 810d01a:	4603      	mov	r3, r0
 810d01c:	460c      	mov	r4, r1
 810d01e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810d022:	e03e      	b.n	810d0a2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810d024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d028:	2b08      	cmp	r3, #8
 810d02a:	d007      	beq.n	810d03c <bno055_getVector+0x7c>
 810d02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d030:	2b28      	cmp	r3, #40	; 0x28
 810d032:	d003      	beq.n	810d03c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810d034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d038:	2b2e      	cmp	r3, #46	; 0x2e
 810d03a:	d109      	bne.n	810d050 <bno055_getVector+0x90>
    scale = accelScale;
 810d03c:	4b7e      	ldr	r3, [pc, #504]	; (810d238 <bno055_getVector+0x278>)
 810d03e:	881b      	ldrh	r3, [r3, #0]
 810d040:	4618      	mov	r0, r3
 810d042:	f7f3 faf7 	bl	8100634 <__aeabi_ui2d>
 810d046:	4603      	mov	r3, r0
 810d048:	460c      	mov	r4, r1
 810d04a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810d04e:	e028      	b.n	810d0a2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 810d050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d054:	2b14      	cmp	r3, #20
 810d056:	d109      	bne.n	810d06c <bno055_getVector+0xac>
    scale = angularRateScale;
 810d058:	4b78      	ldr	r3, [pc, #480]	; (810d23c <bno055_getVector+0x27c>)
 810d05a:	881b      	ldrh	r3, [r3, #0]
 810d05c:	4618      	mov	r0, r3
 810d05e:	f7f3 fae9 	bl	8100634 <__aeabi_ui2d>
 810d062:	4603      	mov	r3, r0
 810d064:	460c      	mov	r4, r1
 810d066:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810d06a:	e01a      	b.n	810d0a2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 810d06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d070:	2b1a      	cmp	r3, #26
 810d072:	d109      	bne.n	810d088 <bno055_getVector+0xc8>
    scale = eulerScale;
 810d074:	4b72      	ldr	r3, [pc, #456]	; (810d240 <bno055_getVector+0x280>)
 810d076:	881b      	ldrh	r3, [r3, #0]
 810d078:	4618      	mov	r0, r3
 810d07a:	f7f3 fadb 	bl	8100634 <__aeabi_ui2d>
 810d07e:	4603      	mov	r3, r0
 810d080:	460c      	mov	r4, r1
 810d082:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810d086:	e00c      	b.n	810d0a2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810d088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d08c:	2b20      	cmp	r3, #32
 810d08e:	d108      	bne.n	810d0a2 <bno055_getVector+0xe2>
    scale = quaScale;
 810d090:	4b6c      	ldr	r3, [pc, #432]	; (810d244 <bno055_getVector+0x284>)
 810d092:	881b      	ldrh	r3, [r3, #0]
 810d094:	4618      	mov	r0, r3
 810d096:	f7f3 facd 	bl	8100634 <__aeabi_ui2d>
 810d09a:	4603      	mov	r3, r0
 810d09c:	460c      	mov	r4, r1
 810d09e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810d0a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810d0a6:	2220      	movs	r2, #32
 810d0a8:	2100      	movs	r1, #0
 810d0aa:	4618      	mov	r0, r3
 810d0ac:	f004 ffad 	bl	811200a <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810d0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d0b4:	2b20      	cmp	r3, #32
 810d0b6:	d150      	bne.n	810d15a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810d0b8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810d0bc:	021b      	lsls	r3, r3, #8
 810d0be:	b21a      	sxth	r2, r3
 810d0c0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810d0c4:	b21b      	sxth	r3, r3
 810d0c6:	4313      	orrs	r3, r2
 810d0c8:	b21b      	sxth	r3, r3
 810d0ca:	4618      	mov	r0, r3
 810d0cc:	f7f3 fac2 	bl	8100654 <__aeabi_i2d>
 810d0d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d0d4:	f7f3 fc52 	bl	810097c <__aeabi_ddiv>
 810d0d8:	4603      	mov	r3, r0
 810d0da:	460c      	mov	r4, r1
 810d0dc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810d0e0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810d0e4:	021b      	lsls	r3, r3, #8
 810d0e6:	b21a      	sxth	r2, r3
 810d0e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810d0ec:	b21b      	sxth	r3, r3
 810d0ee:	4313      	orrs	r3, r2
 810d0f0:	b21b      	sxth	r3, r3
 810d0f2:	4618      	mov	r0, r3
 810d0f4:	f7f3 faae 	bl	8100654 <__aeabi_i2d>
 810d0f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d0fc:	f7f3 fc3e 	bl	810097c <__aeabi_ddiv>
 810d100:	4603      	mov	r3, r0
 810d102:	460c      	mov	r4, r1
 810d104:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810d108:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810d10c:	021b      	lsls	r3, r3, #8
 810d10e:	b21a      	sxth	r2, r3
 810d110:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810d114:	b21b      	sxth	r3, r3
 810d116:	4313      	orrs	r3, r2
 810d118:	b21b      	sxth	r3, r3
 810d11a:	4618      	mov	r0, r3
 810d11c:	f7f3 fa9a 	bl	8100654 <__aeabi_i2d>
 810d120:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d124:	f7f3 fc2a 	bl	810097c <__aeabi_ddiv>
 810d128:	4603      	mov	r3, r0
 810d12a:	460c      	mov	r4, r1
 810d12c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810d130:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810d134:	021b      	lsls	r3, r3, #8
 810d136:	b21a      	sxth	r2, r3
 810d138:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810d13c:	b21b      	sxth	r3, r3
 810d13e:	4313      	orrs	r3, r2
 810d140:	b21b      	sxth	r3, r3
 810d142:	4618      	mov	r0, r3
 810d144:	f7f3 fa86 	bl	8100654 <__aeabi_i2d>
 810d148:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d14c:	f7f3 fc16 	bl	810097c <__aeabi_ddiv>
 810d150:	4603      	mov	r3, r0
 810d152:	460c      	mov	r4, r1
 810d154:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 810d158:	e03b      	b.n	810d1d2 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810d15a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810d15e:	021b      	lsls	r3, r3, #8
 810d160:	b21a      	sxth	r2, r3
 810d162:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810d166:	b21b      	sxth	r3, r3
 810d168:	4313      	orrs	r3, r2
 810d16a:	b21b      	sxth	r3, r3
 810d16c:	4618      	mov	r0, r3
 810d16e:	f7f3 fa71 	bl	8100654 <__aeabi_i2d>
 810d172:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d176:	f7f3 fc01 	bl	810097c <__aeabi_ddiv>
 810d17a:	4603      	mov	r3, r0
 810d17c:	460c      	mov	r4, r1
 810d17e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810d182:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810d186:	021b      	lsls	r3, r3, #8
 810d188:	b21a      	sxth	r2, r3
 810d18a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810d18e:	b21b      	sxth	r3, r3
 810d190:	4313      	orrs	r3, r2
 810d192:	b21b      	sxth	r3, r3
 810d194:	4618      	mov	r0, r3
 810d196:	f7f3 fa5d 	bl	8100654 <__aeabi_i2d>
 810d19a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d19e:	f7f3 fbed 	bl	810097c <__aeabi_ddiv>
 810d1a2:	4603      	mov	r3, r0
 810d1a4:	460c      	mov	r4, r1
 810d1a6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810d1aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810d1ae:	021b      	lsls	r3, r3, #8
 810d1b0:	b21a      	sxth	r2, r3
 810d1b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810d1b6:	b21b      	sxth	r3, r3
 810d1b8:	4313      	orrs	r3, r2
 810d1ba:	b21b      	sxth	r3, r3
 810d1bc:	4618      	mov	r0, r3
 810d1be:	f7f3 fa49 	bl	8100654 <__aeabi_i2d>
 810d1c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d1c6:	f7f3 fbd9 	bl	810097c <__aeabi_ddiv>
 810d1ca:	4603      	mov	r3, r0
 810d1cc:	460c      	mov	r4, r1
 810d1ce:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  return xyz;
 810d1d2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810d1d6:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810d1da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810d1dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810d1de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810d1e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810d1e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810d1ea:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 810d1ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 810d1f2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 810d1f6:	ec49 8b14 	vmov	d4, r8, r9
 810d1fa:	ec46 5b15 	vmov	d5, r5, r6
 810d1fe:	ec42 1b16 	vmov	d6, r1, r2
 810d202:	ec44 3b17 	vmov	d7, r3, r4
}
 810d206:	eeb0 0a44 	vmov.f32	s0, s8
 810d20a:	eef0 0a64 	vmov.f32	s1, s9
 810d20e:	eeb0 1a45 	vmov.f32	s2, s10
 810d212:	eef0 1a65 	vmov.f32	s3, s11
 810d216:	eeb0 2a46 	vmov.f32	s4, s12
 810d21a:	eef0 2a66 	vmov.f32	s5, s13
 810d21e:	eeb0 3a47 	vmov.f32	s6, s14
 810d222:	eef0 3a67 	vmov.f32	s7, s15
 810d226:	377c      	adds	r7, #124	; 0x7c
 810d228:	46bd      	mov	sp, r7
 810d22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d22e:	bf00      	nop
 810d230:	3ff00000 	.word	0x3ff00000
 810d234:	1000002e 	.word	0x1000002e
 810d238:	10000028 	.word	0x10000028
 810d23c:	1000002a 	.word	0x1000002a
 810d240:	1000002c 	.word	0x1000002c
 810d244:	10000030 	.word	0x10000030

0810d248 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 810d248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d24c:	b091      	sub	sp, #68	; 0x44
 810d24e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 810d250:	2008      	movs	r0, #8
 810d252:	f7ff feb5 	bl	810cfc0 <bno055_getVector>
 810d256:	eeb0 4a40 	vmov.f32	s8, s0
 810d25a:	eef0 4a60 	vmov.f32	s9, s1
 810d25e:	eeb0 5a41 	vmov.f32	s10, s2
 810d262:	eef0 5a61 	vmov.f32	s11, s3
 810d266:	eeb0 6a42 	vmov.f32	s12, s4
 810d26a:	eef0 6a62 	vmov.f32	s13, s5
 810d26e:	eeb0 7a43 	vmov.f32	s14, s6
 810d272:	eef0 7a63 	vmov.f32	s15, s7
 810d276:	ed87 4b08 	vstr	d4, [r7, #32]
 810d27a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d27e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d282:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d286:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d28a:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810d28e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810d292:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810d296:	ec49 8b14 	vmov	d4, r8, r9
 810d29a:	ec46 5b15 	vmov	d5, r5, r6
 810d29e:	ec42 1b16 	vmov	d6, r1, r2
 810d2a2:	ec44 3b17 	vmov	d7, r3, r4
}
 810d2a6:	eeb0 0a44 	vmov.f32	s0, s8
 810d2aa:	eef0 0a64 	vmov.f32	s1, s9
 810d2ae:	eeb0 1a45 	vmov.f32	s2, s10
 810d2b2:	eef0 1a65 	vmov.f32	s3, s11
 810d2b6:	eeb0 2a46 	vmov.f32	s4, s12
 810d2ba:	eef0 2a66 	vmov.f32	s5, s13
 810d2be:	eeb0 3a47 	vmov.f32	s6, s14
 810d2c2:	eef0 3a67 	vmov.f32	s7, s15
 810d2c6:	3744      	adds	r7, #68	; 0x44
 810d2c8:	46bd      	mov	sp, r7
 810d2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810d2ce <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 810d2ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d2d2:	b091      	sub	sp, #68	; 0x44
 810d2d4:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 810d2d6:	201a      	movs	r0, #26
 810d2d8:	f7ff fe72 	bl	810cfc0 <bno055_getVector>
 810d2dc:	eeb0 4a40 	vmov.f32	s8, s0
 810d2e0:	eef0 4a60 	vmov.f32	s9, s1
 810d2e4:	eeb0 5a41 	vmov.f32	s10, s2
 810d2e8:	eef0 5a61 	vmov.f32	s11, s3
 810d2ec:	eeb0 6a42 	vmov.f32	s12, s4
 810d2f0:	eef0 6a62 	vmov.f32	s13, s5
 810d2f4:	eeb0 7a43 	vmov.f32	s14, s6
 810d2f8:	eef0 7a63 	vmov.f32	s15, s7
 810d2fc:	ed87 4b08 	vstr	d4, [r7, #32]
 810d300:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d304:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d308:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d30c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d310:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810d314:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810d318:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810d31c:	ec49 8b14 	vmov	d4, r8, r9
 810d320:	ec46 5b15 	vmov	d5, r5, r6
 810d324:	ec42 1b16 	vmov	d6, r1, r2
 810d328:	ec44 3b17 	vmov	d7, r3, r4
}
 810d32c:	eeb0 0a44 	vmov.f32	s0, s8
 810d330:	eef0 0a64 	vmov.f32	s1, s9
 810d334:	eeb0 1a45 	vmov.f32	s2, s10
 810d338:	eef0 1a65 	vmov.f32	s3, s11
 810d33c:	eeb0 2a46 	vmov.f32	s4, s12
 810d340:	eef0 2a66 	vmov.f32	s5, s13
 810d344:	eeb0 3a47 	vmov.f32	s6, s14
 810d348:	eef0 3a67 	vmov.f32	s7, s15
 810d34c:	3744      	adds	r7, #68	; 0x44
 810d34e:	46bd      	mov	sp, r7
 810d350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810d354 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 810d354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d358:	b091      	sub	sp, #68	; 0x44
 810d35a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 810d35c:	202e      	movs	r0, #46	; 0x2e
 810d35e:	f7ff fe2f 	bl	810cfc0 <bno055_getVector>
 810d362:	eeb0 4a40 	vmov.f32	s8, s0
 810d366:	eef0 4a60 	vmov.f32	s9, s1
 810d36a:	eeb0 5a41 	vmov.f32	s10, s2
 810d36e:	eef0 5a61 	vmov.f32	s11, s3
 810d372:	eeb0 6a42 	vmov.f32	s12, s4
 810d376:	eef0 6a62 	vmov.f32	s13, s5
 810d37a:	eeb0 7a43 	vmov.f32	s14, s6
 810d37e:	eef0 7a63 	vmov.f32	s15, s7
 810d382:	ed87 4b08 	vstr	d4, [r7, #32]
 810d386:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d38a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d38e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d392:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d396:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810d39a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810d39e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810d3a2:	ec49 8b14 	vmov	d4, r8, r9
 810d3a6:	ec46 5b15 	vmov	d5, r5, r6
 810d3aa:	ec42 1b16 	vmov	d6, r1, r2
 810d3ae:	ec44 3b17 	vmov	d7, r3, r4
}
 810d3b2:	eeb0 0a44 	vmov.f32	s0, s8
 810d3b6:	eef0 0a64 	vmov.f32	s1, s9
 810d3ba:	eeb0 1a45 	vmov.f32	s2, s10
 810d3be:	eef0 1a65 	vmov.f32	s3, s11
 810d3c2:	eeb0 2a46 	vmov.f32	s4, s12
 810d3c6:	eef0 2a66 	vmov.f32	s5, s13
 810d3ca:	eeb0 3a47 	vmov.f32	s6, s14
 810d3ce:	eef0 3a67 	vmov.f32	s7, s15
 810d3d2:	3744      	adds	r7, #68	; 0x44
 810d3d4:	46bd      	mov	sp, r7
 810d3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0810d3dc <bno055_assignI2C>:
#include "bno055_stm32.h"
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810d3dc:	b480      	push	{r7}
 810d3de:	b083      	sub	sp, #12
 810d3e0:	af00      	add	r7, sp, #0
 810d3e2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810d3e4:	4a04      	ldr	r2, [pc, #16]	; (810d3f8 <bno055_assignI2C+0x1c>)
 810d3e6:	687b      	ldr	r3, [r7, #4]
 810d3e8:	6013      	str	r3, [r2, #0]
}
 810d3ea:	bf00      	nop
 810d3ec:	370c      	adds	r7, #12
 810d3ee:	46bd      	mov	sp, r7
 810d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d3f4:	4770      	bx	lr
 810d3f6:	bf00      	nop
 810d3f8:	1000e77c 	.word	0x1000e77c

0810d3fc <bno055_delay>:

void bno055_delay(int time) {
 810d3fc:	b580      	push	{r7, lr}
 810d3fe:	b082      	sub	sp, #8
 810d400:	af00      	add	r7, sp, #0
 810d402:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810d404:	6878      	ldr	r0, [r7, #4]
 810d406:	f7fb fff9 	bl	81093fc <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810d40a:	bf00      	nop
 810d40c:	3708      	adds	r7, #8
 810d40e:	46bd      	mov	sp, r7
 810d410:	bd80      	pop	{r7, pc}
	...

0810d414 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 810d414:	b580      	push	{r7, lr}
 810d416:	b088      	sub	sp, #32
 810d418:	af02      	add	r7, sp, #8
 810d41a:	4603      	mov	r3, r0
 810d41c:	460a      	mov	r2, r1
 810d41e:	71fb      	strb	r3, [r7, #7]
 810d420:	4613      	mov	r3, r2
 810d422:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 810d424:	79fb      	ldrb	r3, [r7, #7]
 810d426:	733b      	strb	r3, [r7, #12]
 810d428:	79bb      	ldrb	r3, [r7, #6]
 810d42a:	737b      	strb	r3, [r7, #13]
  uint8_t status;

  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810d42c:	4b5a      	ldr	r3, [pc, #360]	; (810d598 <bno055_writeData+0x184>)
 810d42e:	6818      	ldr	r0, [r3, #0]
 810d430:	f107 020c 	add.w	r2, r7, #12
 810d434:	230a      	movs	r3, #10
 810d436:	9300      	str	r3, [sp, #0]
 810d438:	2302      	movs	r3, #2
 810d43a:	2150      	movs	r1, #80	; 0x50
 810d43c:	f7f7 ffa2 	bl	8105384 <HAL_I2C_Master_Transmit>
 810d440:	4603      	mov	r3, r0
 810d442:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);


  if (status == HAL_OK) {
 810d444:	7dfb      	ldrb	r3, [r7, #23]
 810d446:	2b00      	cmp	r3, #0
 810d448:	f000 80a0 	beq.w	810d58c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 810d44c:	7dfb      	ldrb	r3, [r7, #23]
 810d44e:	2b01      	cmp	r3, #1
 810d450:	d103      	bne.n	810d45a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 810d452:	4852      	ldr	r0, [pc, #328]	; (810d59c <bno055_writeData+0x188>)
 810d454:	f005 fab2 	bl	81129bc <puts>
 810d458:	e012      	b.n	810d480 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 810d45a:	7dfb      	ldrb	r3, [r7, #23]
 810d45c:	2b03      	cmp	r3, #3
 810d45e:	d103      	bne.n	810d468 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 810d460:	484f      	ldr	r0, [pc, #316]	; (810d5a0 <bno055_writeData+0x18c>)
 810d462:	f005 faab 	bl	81129bc <puts>
 810d466:	e00b      	b.n	810d480 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 810d468:	7dfb      	ldrb	r3, [r7, #23]
 810d46a:	2b02      	cmp	r3, #2
 810d46c:	d103      	bne.n	810d476 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810d46e:	484d      	ldr	r0, [pc, #308]	; (810d5a4 <bno055_writeData+0x190>)
 810d470:	f005 faa4 	bl	81129bc <puts>
 810d474:	e004      	b.n	810d480 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810d476:	7dfb      	ldrb	r3, [r7, #23]
 810d478:	4619      	mov	r1, r3
 810d47a:	484b      	ldr	r0, [pc, #300]	; (810d5a8 <bno055_writeData+0x194>)
 810d47c:	f005 fa2a 	bl	81128d4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 810d480:	4b45      	ldr	r3, [pc, #276]	; (810d598 <bno055_writeData+0x184>)
 810d482:	681b      	ldr	r3, [r3, #0]
 810d484:	4618      	mov	r0, r3
 810d486:	f7f8 fcaa 	bl	8105dde <HAL_I2C_GetError>
 810d48a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810d48c:	693b      	ldr	r3, [r7, #16]
 810d48e:	2b00      	cmp	r3, #0
 810d490:	d07e      	beq.n	810d590 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810d492:	693b      	ldr	r3, [r7, #16]
 810d494:	2b01      	cmp	r3, #1
 810d496:	d103      	bne.n	810d4a0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 810d498:	4844      	ldr	r0, [pc, #272]	; (810d5ac <bno055_writeData+0x198>)
 810d49a:	f005 fa8f 	bl	81129bc <puts>
 810d49e:	e021      	b.n	810d4e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 810d4a0:	693b      	ldr	r3, [r7, #16]
 810d4a2:	2b02      	cmp	r3, #2
 810d4a4:	d103      	bne.n	810d4ae <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810d4a6:	4842      	ldr	r0, [pc, #264]	; (810d5b0 <bno055_writeData+0x19c>)
 810d4a8:	f005 fa88 	bl	81129bc <puts>
 810d4ac:	e01a      	b.n	810d4e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 810d4ae:	693b      	ldr	r3, [r7, #16]
 810d4b0:	2b04      	cmp	r3, #4
 810d4b2:	d103      	bne.n	810d4bc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810d4b4:	483f      	ldr	r0, [pc, #252]	; (810d5b4 <bno055_writeData+0x1a0>)
 810d4b6:	f005 fa81 	bl	81129bc <puts>
 810d4ba:	e013      	b.n	810d4e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 810d4bc:	693b      	ldr	r3, [r7, #16]
 810d4be:	2b08      	cmp	r3, #8
 810d4c0:	d103      	bne.n	810d4ca <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810d4c2:	483d      	ldr	r0, [pc, #244]	; (810d5b8 <bno055_writeData+0x1a4>)
 810d4c4:	f005 fa7a 	bl	81129bc <puts>
 810d4c8:	e00c      	b.n	810d4e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 810d4ca:	693b      	ldr	r3, [r7, #16]
 810d4cc:	2b10      	cmp	r3, #16
 810d4ce:	d103      	bne.n	810d4d8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 810d4d0:	483a      	ldr	r0, [pc, #232]	; (810d5bc <bno055_writeData+0x1a8>)
 810d4d2:	f005 fa73 	bl	81129bc <puts>
 810d4d6:	e005      	b.n	810d4e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 810d4d8:	693b      	ldr	r3, [r7, #16]
 810d4da:	2b20      	cmp	r3, #32
 810d4dc:	d102      	bne.n	810d4e4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 810d4de:	4838      	ldr	r0, [pc, #224]	; (810d5c0 <bno055_writeData+0x1ac>)
 810d4e0:	f005 fa6c 	bl	81129bc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810d4e4:	4b2c      	ldr	r3, [pc, #176]	; (810d598 <bno055_writeData+0x184>)
 810d4e6:	681b      	ldr	r3, [r3, #0]
 810d4e8:	4618      	mov	r0, r3
 810d4ea:	f7f8 fc6a 	bl	8105dc2 <HAL_I2C_GetState>
 810d4ee:	4603      	mov	r3, r0
 810d4f0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810d4f2:	7bfb      	ldrb	r3, [r7, #15]
 810d4f4:	2b00      	cmp	r3, #0
 810d4f6:	d103      	bne.n	810d500 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 810d4f8:	4832      	ldr	r0, [pc, #200]	; (810d5c4 <bno055_writeData+0x1b0>)
 810d4fa:	f005 fa5f 	bl	81129bc <puts>
 810d4fe:	e048      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 810d500:	7bfb      	ldrb	r3, [r7, #15]
 810d502:	2b20      	cmp	r3, #32
 810d504:	d103      	bne.n	810d50e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810d506:	482f      	ldr	r0, [pc, #188]	; (810d5c4 <bno055_writeData+0x1b0>)
 810d508:	f005 fa58 	bl	81129bc <puts>
 810d50c:	e041      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 810d50e:	7bfb      	ldrb	r3, [r7, #15]
 810d510:	2b24      	cmp	r3, #36	; 0x24
 810d512:	d103      	bne.n	810d51c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 810d514:	482c      	ldr	r0, [pc, #176]	; (810d5c8 <bno055_writeData+0x1b4>)
 810d516:	f005 fa51 	bl	81129bc <puts>
 810d51a:	e03a      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 810d51c:	7bfb      	ldrb	r3, [r7, #15]
 810d51e:	2b21      	cmp	r3, #33	; 0x21
 810d520:	d103      	bne.n	810d52a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 810d522:	482a      	ldr	r0, [pc, #168]	; (810d5cc <bno055_writeData+0x1b8>)
 810d524:	f005 fa4a 	bl	81129bc <puts>
 810d528:	e033      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 810d52a:	7bfb      	ldrb	r3, [r7, #15]
 810d52c:	2b22      	cmp	r3, #34	; 0x22
 810d52e:	d103      	bne.n	810d538 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 810d530:	4827      	ldr	r0, [pc, #156]	; (810d5d0 <bno055_writeData+0x1bc>)
 810d532:	f005 fa43 	bl	81129bc <puts>
 810d536:	e02c      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 810d538:	7bfb      	ldrb	r3, [r7, #15]
 810d53a:	2b28      	cmp	r3, #40	; 0x28
 810d53c:	d103      	bne.n	810d546 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 810d53e:	4825      	ldr	r0, [pc, #148]	; (810d5d4 <bno055_writeData+0x1c0>)
 810d540:	f005 fa3c 	bl	81129bc <puts>
 810d544:	e025      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 810d546:	7bfb      	ldrb	r3, [r7, #15]
 810d548:	2b29      	cmp	r3, #41	; 0x29
 810d54a:	d103      	bne.n	810d554 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 810d54c:	4822      	ldr	r0, [pc, #136]	; (810d5d8 <bno055_writeData+0x1c4>)
 810d54e:	f005 fa35 	bl	81129bc <puts>
 810d552:	e01e      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 810d554:	7bfb      	ldrb	r3, [r7, #15]
 810d556:	2b2a      	cmp	r3, #42	; 0x2a
 810d558:	d103      	bne.n	810d562 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 810d55a:	4820      	ldr	r0, [pc, #128]	; (810d5dc <bno055_writeData+0x1c8>)
 810d55c:	f005 fa2e 	bl	81129bc <puts>
 810d560:	e017      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810d562:	7bfb      	ldrb	r3, [r7, #15]
 810d564:	2b60      	cmp	r3, #96	; 0x60
 810d566:	d103      	bne.n	810d570 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 810d568:	481d      	ldr	r0, [pc, #116]	; (810d5e0 <bno055_writeData+0x1cc>)
 810d56a:	f005 fa27 	bl	81129bc <puts>
 810d56e:	e010      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 810d570:	7bfb      	ldrb	r3, [r7, #15]
 810d572:	2ba0      	cmp	r3, #160	; 0xa0
 810d574:	d103      	bne.n	810d57e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810d576:	481b      	ldr	r0, [pc, #108]	; (810d5e4 <bno055_writeData+0x1d0>)
 810d578:	f005 fa20 	bl	81129bc <puts>
 810d57c:	e009      	b.n	810d592 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 810d57e:	7bfb      	ldrb	r3, [r7, #15]
 810d580:	2be0      	cmp	r3, #224	; 0xe0
 810d582:	d106      	bne.n	810d592 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810d584:	4818      	ldr	r0, [pc, #96]	; (810d5e8 <bno055_writeData+0x1d4>)
 810d586:	f005 fa19 	bl	81129bc <puts>
 810d58a:	e002      	b.n	810d592 <bno055_writeData+0x17e>
    return;
 810d58c:	bf00      	nop
 810d58e:	e000      	b.n	810d592 <bno055_writeData+0x17e>
    return;
 810d590:	bf00      	nop
  }
}
 810d592:	3718      	adds	r7, #24
 810d594:	46bd      	mov	sp, r7
 810d596:	bd80      	pop	{r7, pc}
 810d598:	1000e77c 	.word	0x1000e77c
 810d59c:	08115138 	.word	0x08115138
 810d5a0:	0811515c 	.word	0x0811515c
 810d5a4:	08115184 	.word	0x08115184
 810d5a8:	081151a8 	.word	0x081151a8
 810d5ac:	081151c0 	.word	0x081151c0
 810d5b0:	081151d4 	.word	0x081151d4
 810d5b4:	081151e8 	.word	0x081151e8
 810d5b8:	081151fc 	.word	0x081151fc
 810d5bc:	08115210 	.word	0x08115210
 810d5c0:	08115224 	.word	0x08115224
 810d5c4:	0811523c 	.word	0x0811523c
 810d5c8:	08115254 	.word	0x08115254
 810d5cc:	08115268 	.word	0x08115268
 810d5d0:	08115280 	.word	0x08115280
 810d5d4:	08115298 	.word	0x08115298
 810d5d8:	081152b0 	.word	0x081152b0
 810d5dc:	081152d0 	.word	0x081152d0
 810d5e0:	081152f0 	.word	0x081152f0
 810d5e4:	08115308 	.word	0x08115308
 810d5e8:	08115320 	.word	0x08115320

0810d5ec <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810d5ec:	b580      	push	{r7, lr}
 810d5ee:	b084      	sub	sp, #16
 810d5f0:	af02      	add	r7, sp, #8
 810d5f2:	4603      	mov	r3, r0
 810d5f4:	6039      	str	r1, [r7, #0]
 810d5f6:	71fb      	strb	r3, [r7, #7]
 810d5f8:	4613      	mov	r3, r2
 810d5fa:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810d5fc:	4b0b      	ldr	r3, [pc, #44]	; (810d62c <bno055_readData+0x40>)
 810d5fe:	6818      	ldr	r0, [r3, #0]
 810d600:	1dfa      	adds	r2, r7, #7
 810d602:	2364      	movs	r3, #100	; 0x64
 810d604:	9300      	str	r3, [sp, #0]
 810d606:	2301      	movs	r3, #1
 810d608:	2150      	movs	r1, #80	; 0x50
 810d60a:	f7f7 febb 	bl	8105384 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 810d60e:	4b07      	ldr	r3, [pc, #28]	; (810d62c <bno055_readData+0x40>)
 810d610:	6818      	ldr	r0, [r3, #0]
 810d612:	79bb      	ldrb	r3, [r7, #6]
 810d614:	b29a      	uxth	r2, r3
 810d616:	2364      	movs	r3, #100	; 0x64
 810d618:	9300      	str	r3, [sp, #0]
 810d61a:	4613      	mov	r3, r2
 810d61c:	683a      	ldr	r2, [r7, #0]
 810d61e:	2150      	movs	r1, #80	; 0x50
 810d620:	f7f7 ffa4 	bl	810556c <HAL_I2C_Master_Receive>
                         100);
}
 810d624:	bf00      	nop
 810d626:	3708      	adds	r7, #8
 810d628:	46bd      	mov	sp, r7
 810d62a:	bd80      	pop	{r7, pc}
 810d62c:	1000e77c 	.word	0x1000e77c

0810d630 <HX711_delay_ns>:
#define	TIMEOUT 150 //cpu ticks
const uint32_t clockPulse = 200; //ns

//#############################################################################################
__STATIC_INLINE void HX711_delay_ns(uint64_t nanoseconds)
{
 810d630:	b5b0      	push	{r4, r5, r7, lr}
 810d632:	b084      	sub	sp, #16
 810d634:	af00      	add	r7, sp, #0
 810d636:	e9c7 0100 	strd	r0, r1, [r7]
  uint64_t clk_cycle_start = DWT->CYCCNT;
 810d63a:	4b1f      	ldr	r3, [pc, #124]	; (810d6b8 <HX711_delay_ns+0x88>)
 810d63c:	685b      	ldr	r3, [r3, #4]
 810d63e:	f04f 0400 	mov.w	r4, #0
 810d642:	e9c7 3402 	strd	r3, r4, [r7, #8]
  nanoseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 810d646:	f7f9 f967 	bl	8106918 <HAL_RCC_GetHCLKFreq>
 810d64a:	4602      	mov	r2, r0
 810d64c:	4b1b      	ldr	r3, [pc, #108]	; (810d6bc <HX711_delay_ns+0x8c>)
 810d64e:	fba3 2302 	umull	r2, r3, r3, r2
 810d652:	0c9b      	lsrs	r3, r3, #18
 810d654:	f04f 0400 	mov.w	r4, #0
 810d658:	687a      	ldr	r2, [r7, #4]
 810d65a:	fb03 f102 	mul.w	r1, r3, r2
 810d65e:	683a      	ldr	r2, [r7, #0]
 810d660:	fb04 f202 	mul.w	r2, r4, r2
 810d664:	440a      	add	r2, r1
 810d666:	6839      	ldr	r1, [r7, #0]
 810d668:	fba1 3403 	umull	r3, r4, r1, r3
 810d66c:	4422      	add	r2, r4
 810d66e:	4614      	mov	r4, r2
 810d670:	e9c7 3400 	strd	r3, r4, [r7]
 810d674:	e9c7 3400 	strd	r3, r4, [r7]
  while ((DWT->CYCCNT - clk_cycle_start) < nanoseconds/1000);
 810d678:	bf00      	nop
 810d67a:	4b0f      	ldr	r3, [pc, #60]	; (810d6b8 <HX711_delay_ns+0x88>)
 810d67c:	685b      	ldr	r3, [r3, #4]
 810d67e:	4619      	mov	r1, r3
 810d680:	f04f 0200 	mov.w	r2, #0
 810d684:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 810d688:	1ac9      	subs	r1, r1, r3
 810d68a:	eb62 0204 	sbc.w	r2, r2, r4
 810d68e:	460c      	mov	r4, r1
 810d690:	4615      	mov	r5, r2
 810d692:	e9d7 0100 	ldrd	r0, r1, [r7]
 810d696:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 810d69a:	f04f 0300 	mov.w	r3, #0
 810d69e:	f7f3 fbbb 	bl	8100e18 <__aeabi_uldivmod>
 810d6a2:	4602      	mov	r2, r0
 810d6a4:	460b      	mov	r3, r1
 810d6a6:	429d      	cmp	r5, r3
 810d6a8:	bf08      	it	eq
 810d6aa:	4294      	cmpeq	r4, r2
 810d6ac:	d3e5      	bcc.n	810d67a <HX711_delay_ns+0x4a>
}
 810d6ae:	bf00      	nop
 810d6b0:	3710      	adds	r7, #16
 810d6b2:	46bd      	mov	sp, r7
 810d6b4:	bdb0      	pop	{r4, r5, r7, pc}
 810d6b6:	bf00      	nop
 810d6b8:	e0001000 	.word	0xe0001000
 810d6bc:	431bde83 	.word	0x431bde83

0810d6c0 <HX711_begin>:

//#############################################################################################
void  HX711_begin(struct HX711 hx711)
{
 810d6c0:	b590      	push	{r4, r7, lr}
 810d6c2:	b087      	sub	sp, #28
 810d6c4:	af02      	add	r7, sp, #8
 810d6c6:	463c      	mov	r4, r7
 810d6c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HX711_init(hx711);
 810d6cc:	463b      	mov	r3, r7
 810d6ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810d6d0:	f000 f834 	bl	810d73c <HX711_init>
  //initialise tick register
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 810d6d4:	4b17      	ldr	r3, [pc, #92]	; (810d734 <HX711_begin+0x74>)
 810d6d6:	68db      	ldr	r3, [r3, #12]
 810d6d8:	4a16      	ldr	r2, [pc, #88]	; (810d734 <HX711_begin+0x74>)
 810d6da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810d6de:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 810d6e0:	4b15      	ldr	r3, [pc, #84]	; (810d738 <HX711_begin+0x78>)
 810d6e2:	2200      	movs	r2, #0
 810d6e4:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 810d6e6:	4b14      	ldr	r3, [pc, #80]	; (810d738 <HX711_begin+0x78>)
 810d6e8:	681b      	ldr	r3, [r3, #0]
 810d6ea:	4a13      	ldr	r2, [pc, #76]	; (810d738 <HX711_begin+0x78>)
 810d6ec:	f043 0301 	orr.w	r3, r3, #1
 810d6f0:	6013      	str	r3, [r2, #0]

  //start first reahx711.ding
  HAL_GPIO_WritePin(hx711.sck_gpio, hx711.sck_pin, GPIO_PIN_SET);
 810d6f2:	683b      	ldr	r3, [r7, #0]
 810d6f4:	687a      	ldr	r2, [r7, #4]
 810d6f6:	b291      	uxth	r1, r2
 810d6f8:	2201      	movs	r2, #1
 810d6fa:	4618      	mov	r0, r3
 810d6fc:	f7f7 fd0a 	bl	8105114 <HAL_GPIO_WritePin>
  HX711_delay(10);
 810d700:	200a      	movs	r0, #10
 810d702:	f7fb fe7b 	bl	81093fc <osDelay>
  HAL_GPIO_WritePin(hx711.sck_gpio, hx711.sck_pin, GPIO_PIN_RESET);
 810d706:	683b      	ldr	r3, [r7, #0]
 810d708:	687a      	ldr	r2, [r7, #4]
 810d70a:	b291      	uxth	r1, r2
 810d70c:	2200      	movs	r2, #0
 810d70e:	4618      	mov	r0, r3
 810d710:	f7f7 fd00 	bl	8105114 <HAL_GPIO_WritePin>
  HX711_delay(10);
 810d714:	200a      	movs	r0, #10
 810d716:	f7fb fe71 	bl	81093fc <osDelay>
  HX711_valueAve(hx711, 8);
 810d71a:	2308      	movs	r3, #8
 810d71c:	9300      	str	r3, [sp, #0]
 810d71e:	463b      	mov	r3, r7
 810d720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810d722:	f000 f8cc 	bl	810d8be <HX711_valueAve>
  HX711_delay(100);
 810d726:	2064      	movs	r0, #100	; 0x64
 810d728:	f7fb fe68 	bl	81093fc <osDelay>
}
 810d72c:	bf00      	nop
 810d72e:	3714      	adds	r7, #20
 810d730:	46bd      	mov	sp, r7
 810d732:	bd90      	pop	{r4, r7, pc}
 810d734:	e000edf0 	.word	0xe000edf0
 810d738:	e0001000 	.word	0xe0001000

0810d73c <HX711_init>:
//#############################################################################################
//setup HX711 pins
void  HX711_init(struct HX711 hx711)
{
 810d73c:	b590      	push	{r4, r7, lr}
 810d73e:	b08b      	sub	sp, #44	; 0x2c
 810d740:	af00      	add	r7, sp, #0
 810d742:	463c      	mov	r4, r7
 810d744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 810d748:	2301      	movs	r3, #1
 810d74a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 810d74c:	2300      	movs	r3, #0
 810d74e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810d750:	2302      	movs	r3, #2
 810d752:	623b      	str	r3, [r7, #32]
  gpio.Pin = hx711.sck_pin;
 810d754:	687b      	ldr	r3, [r7, #4]
 810d756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(hx711.sck_gpio, &gpio);
 810d758:	683b      	ldr	r3, [r7, #0]
 810d75a:	f107 0214 	add.w	r2, r7, #20
 810d75e:	4611      	mov	r1, r2
 810d760:	4618      	mov	r0, r3
 810d762:	f7f7 fa05 	bl	8104b70 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 810d766:	2300      	movs	r3, #0
 810d768:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 810d76a:	2301      	movs	r3, #1
 810d76c:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810d76e:	2302      	movs	r3, #2
 810d770:	623b      	str	r3, [r7, #32]
  gpio.Pin = hx711.di_pin;
 810d772:	68fb      	ldr	r3, [r7, #12]
 810d774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(hx711.di_gpio, &gpio);
 810d776:	68bb      	ldr	r3, [r7, #8]
 810d778:	f107 0214 	add.w	r2, r7, #20
 810d77c:	4611      	mov	r1, r2
 810d77e:	4618      	mov	r0, r3
 810d780:	f7f7 f9f6 	bl	8104b70 <HAL_GPIO_Init>

}
 810d784:	bf00      	nop
 810d786:	372c      	adds	r7, #44	; 0x2c
 810d788:	46bd      	mov	sp, r7
 810d78a:	bd90      	pop	{r4, r7, pc}

0810d78c <HX711_checkReadiness>:

bool HX711_checkReadiness(struct HX711 hx711)
{
 810d78c:	b590      	push	{r4, r7, lr}
 810d78e:	b087      	sub	sp, #28
 810d790:	af00      	add	r7, sp, #0
 810d792:	463c      	mov	r4, r7
 810d794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t startTime = HAL_GetTick();
 810d798:	f7f4 fdb6 	bl	8102308 <HAL_GetTick>
 810d79c:	6178      	str	r0, [r7, #20]

	while(!HX711_isReady(hx711)) {
 810d79e:	e008      	b.n	810d7b2 <HX711_checkReadiness+0x26>
		if(HAL_GetTick() - startTime > TIMEOUT) {
 810d7a0:	f7f4 fdb2 	bl	8102308 <HAL_GetTick>
 810d7a4:	4602      	mov	r2, r0
 810d7a6:	697b      	ldr	r3, [r7, #20]
 810d7a8:	1ad3      	subs	r3, r2, r3
 810d7aa:	2b96      	cmp	r3, #150	; 0x96
 810d7ac:	d901      	bls.n	810d7b2 <HX711_checkReadiness+0x26>
			return false;
 810d7ae:	2300      	movs	r3, #0
 810d7b0:	e007      	b.n	810d7c2 <HX711_checkReadiness+0x36>
	while(!HX711_isReady(hx711)) {
 810d7b2:	463b      	mov	r3, r7
 810d7b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810d7b6:	f000 f8b9 	bl	810d92c <HX711_isReady>
 810d7ba:	4603      	mov	r3, r0
 810d7bc:	2b00      	cmp	r3, #0
 810d7be:	d0ef      	beq.n	810d7a0 <HX711_checkReadiness+0x14>
		}
	}

	return true;
 810d7c0:	2301      	movs	r3, #1
}
 810d7c2:	4618      	mov	r0, r3
 810d7c4:	371c      	adds	r7, #28
 810d7c6:	46bd      	mov	sp, r7
 810d7c8:	bd90      	pop	{r4, r7, pc}

0810d7ca <HX711_value>:
//#############################################################################################
int32_t HX711_value(struct HX711 hx711)
{
 810d7ca:	b590      	push	{r4, r7, lr}
 810d7cc:	b089      	sub	sp, #36	; 0x24
 810d7ce:	af00      	add	r7, sp, #0
 810d7d0:	463c      	mov	r4, r7
 810d7d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t data = 0;
 810d7d6:	2300      	movs	r3, #0
 810d7d8:	61fb      	str	r3, [r7, #28]
  uint32_t  startTime = HAL_GetTick();
 810d7da:	f7f4 fd95 	bl	8102308 <HAL_GetTick>
 810d7de:	6178      	str	r0, [r7, #20]
  while(!HX711_isReady(hx711))
 810d7e0:	e008      	b.n	810d7f4 <HX711_value+0x2a>
    {
      if(HAL_GetTick() - startTime > TIMEOUT)
 810d7e2:	f7f4 fd91 	bl	8102308 <HAL_GetTick>
 810d7e6:	4602      	mov	r2, r0
 810d7e8:	697b      	ldr	r3, [r7, #20]
 810d7ea:	1ad3      	subs	r3, r2, r3
 810d7ec:	2b96      	cmp	r3, #150	; 0x96
 810d7ee:	d901      	bls.n	810d7f4 <HX711_value+0x2a>
        return 0;
 810d7f0:	2300      	movs	r3, #0
 810d7f2:	e060      	b.n	810d8b6 <HX711_value+0xec>
  while(!HX711_isReady(hx711))
 810d7f4:	463b      	mov	r3, r7
 810d7f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810d7f8:	f000 f898 	bl	810d92c <HX711_isReady>
 810d7fc:	4603      	mov	r3, r0
 810d7fe:	2b00      	cmp	r3, #0
 810d800:	d0ef      	beq.n	810d7e2 <HX711_value+0x18>
    }
  for(int8_t i=0; i<24 ; i++)
 810d802:	2300      	movs	r3, #0
 810d804:	76fb      	strb	r3, [r7, #27]
 810d806:	e031      	b.n	810d86c <HX711_value+0xa2>
  {
    HAL_GPIO_WritePin(hx711.sck_gpio, hx711.sck_pin, GPIO_PIN_SET);
 810d808:	683b      	ldr	r3, [r7, #0]
 810d80a:	687a      	ldr	r2, [r7, #4]
 810d80c:	b291      	uxth	r1, r2
 810d80e:	2201      	movs	r2, #1
 810d810:	4618      	mov	r0, r3
 810d812:	f7f7 fc7f 	bl	8105114 <HAL_GPIO_WritePin>
    HX711_delay_ns(clockPulse);
 810d816:	23c8      	movs	r3, #200	; 0xc8
 810d818:	f04f 0400 	mov.w	r4, #0
 810d81c:	4618      	mov	r0, r3
 810d81e:	4621      	mov	r1, r4
 810d820:	f7ff ff06 	bl	810d630 <HX711_delay_ns>
    data = data << 1;    
 810d824:	69fb      	ldr	r3, [r7, #28]
 810d826:	005b      	lsls	r3, r3, #1
 810d828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_WritePin(hx711.sck_gpio, hx711.sck_pin, GPIO_PIN_RESET);
 810d82a:	683b      	ldr	r3, [r7, #0]
 810d82c:	687a      	ldr	r2, [r7, #4]
 810d82e:	b291      	uxth	r1, r2
 810d830:	2200      	movs	r2, #0
 810d832:	4618      	mov	r0, r3
 810d834:	f7f7 fc6e 	bl	8105114 <HAL_GPIO_WritePin>
    HX711_delay_ns(clockPulse);
 810d838:	23c8      	movs	r3, #200	; 0xc8
 810d83a:	f04f 0400 	mov.w	r4, #0
 810d83e:	4618      	mov	r0, r3
 810d840:	4621      	mov	r1, r4
 810d842:	f7ff fef5 	bl	810d630 <HX711_delay_ns>
    if(HAL_GPIO_ReadPin(hx711.di_gpio, hx711.di_pin) == GPIO_PIN_SET)
 810d846:	68bb      	ldr	r3, [r7, #8]
 810d848:	68fa      	ldr	r2, [r7, #12]
 810d84a:	b292      	uxth	r2, r2
 810d84c:	4611      	mov	r1, r2
 810d84e:	4618      	mov	r0, r3
 810d850:	f7f7 fc48 	bl	81050e4 <HAL_GPIO_ReadPin>
 810d854:	4603      	mov	r3, r0
 810d856:	2b01      	cmp	r3, #1
 810d858:	d102      	bne.n	810d860 <HX711_value+0x96>
      data ++;
 810d85a:	69fb      	ldr	r3, [r7, #28]
 810d85c:	3301      	adds	r3, #1
 810d85e:	61fb      	str	r3, [r7, #28]
  for(int8_t i=0; i<24 ; i++)
 810d860:	f997 301b 	ldrsb.w	r3, [r7, #27]
 810d864:	b2db      	uxtb	r3, r3
 810d866:	3301      	adds	r3, #1
 810d868:	b2db      	uxtb	r3, r3
 810d86a:	76fb      	strb	r3, [r7, #27]
 810d86c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 810d870:	2b17      	cmp	r3, #23
 810d872:	ddc9      	ble.n	810d808 <HX711_value+0x3e>
  }
  data = data ^ 0x800000; 
 810d874:	69fb      	ldr	r3, [r7, #28]
 810d876:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 810d87a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_WritePin(hx711.sck_gpio, hx711.sck_pin, GPIO_PIN_SET);
 810d87c:	683b      	ldr	r3, [r7, #0]
 810d87e:	687a      	ldr	r2, [r7, #4]
 810d880:	b291      	uxth	r1, r2
 810d882:	2201      	movs	r2, #1
 810d884:	4618      	mov	r0, r3
 810d886:	f7f7 fc45 	bl	8105114 <HAL_GPIO_WritePin>
  HX711_delay_ns(clockPulse);
 810d88a:	23c8      	movs	r3, #200	; 0xc8
 810d88c:	f04f 0400 	mov.w	r4, #0
 810d890:	4618      	mov	r0, r3
 810d892:	4621      	mov	r1, r4
 810d894:	f7ff fecc 	bl	810d630 <HX711_delay_ns>
  HAL_GPIO_WritePin(hx711.sck_gpio, hx711.sck_pin, GPIO_PIN_RESET);
 810d898:	683b      	ldr	r3, [r7, #0]
 810d89a:	687a      	ldr	r2, [r7, #4]
 810d89c:	b291      	uxth	r1, r2
 810d89e:	2200      	movs	r2, #0
 810d8a0:	4618      	mov	r0, r3
 810d8a2:	f7f7 fc37 	bl	8105114 <HAL_GPIO_WritePin>
  HX711_delay_ns(clockPulse);
 810d8a6:	23c8      	movs	r3, #200	; 0xc8
 810d8a8:	f04f 0400 	mov.w	r4, #0
 810d8ac:	4618      	mov	r0, r3
 810d8ae:	4621      	mov	r1, r4
 810d8b0:	f7ff febe 	bl	810d630 <HX711_delay_ns>
  return data;    
 810d8b4:	69fb      	ldr	r3, [r7, #28]
}
 810d8b6:	4618      	mov	r0, r3
 810d8b8:	3724      	adds	r7, #36	; 0x24
 810d8ba:	46bd      	mov	sp, r7
 810d8bc:	bd90      	pop	{r4, r7, pc}

0810d8be <HX711_valueAve>:
//#############################################################################################
int32_t HX711_valueAve(struct HX711 hx711, uint16_t sample)
{
 810d8be:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 810d8c2:	b088      	sub	sp, #32
 810d8c4:	af00      	add	r7, sp, #0
 810d8c6:	463c      	mov	r4, r7
 810d8c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int64_t  ave = 0;
 810d8cc:	f04f 0300 	mov.w	r3, #0
 810d8d0:	f04f 0400 	mov.w	r4, #0
 810d8d4:	e9c7 3406 	strd	r3, r4, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 810d8d8:	2300      	movs	r3, #0
 810d8da:	82fb      	strh	r3, [r7, #22]
 810d8dc:	e012      	b.n	810d904 <HX711_valueAve+0x46>
    ave += HX711_value(hx711);
 810d8de:	463b      	mov	r3, r7
 810d8e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810d8e2:	f7ff ff72 	bl	810d7ca <HX711_value>
 810d8e6:	4603      	mov	r3, r0
 810d8e8:	469b      	mov	fp, r3
 810d8ea:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 810d8ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810d8f2:	eb1b 0301 	adds.w	r3, fp, r1
 810d8f6:	eb4c 0402 	adc.w	r4, ip, r2
 810d8fa:	e9c7 3406 	strd	r3, r4, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 810d8fe:	8afb      	ldrh	r3, [r7, #22]
 810d900:	3301      	adds	r3, #1
 810d902:	82fb      	strh	r3, [r7, #22]
 810d904:	8afa      	ldrh	r2, [r7, #22]
 810d906:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 810d908:	429a      	cmp	r2, r3
 810d90a:	d3e8      	bcc.n	810d8de <HX711_valueAve+0x20>

  return (int32_t)(ave / sample);
 810d90c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 810d90e:	f04f 0400 	mov.w	r4, #0
 810d912:	461a      	mov	r2, r3
 810d914:	4623      	mov	r3, r4
 810d916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 810d91a:	f7f3 fa2d 	bl	8100d78 <__aeabi_ldivmod>
 810d91e:	4603      	mov	r3, r0
 810d920:	460c      	mov	r4, r1
}
 810d922:	4618      	mov	r0, r3
 810d924:	3720      	adds	r7, #32
 810d926:	46bd      	mov	sp, r7
 810d928:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0810d92c <HX711_isReady>:
//#############################################################################################
int HX711_isReady(struct HX711 hx711) {
 810d92c:	b590      	push	{r4, r7, lr}
 810d92e:	b085      	sub	sp, #20
 810d930:	af00      	add	r7, sp, #0
 810d932:	463c      	mov	r4, r7
 810d934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return HAL_GPIO_ReadPin(hx711.di_gpio, hx711.di_pin) == GPIO_PIN_RESET;
 810d938:	68bb      	ldr	r3, [r7, #8]
 810d93a:	68fa      	ldr	r2, [r7, #12]
 810d93c:	b292      	uxth	r2, r2
 810d93e:	4611      	mov	r1, r2
 810d940:	4618      	mov	r0, r3
 810d942:	f7f7 fbcf 	bl	81050e4 <HAL_GPIO_ReadPin>
 810d946:	4603      	mov	r3, r0
 810d948:	2b00      	cmp	r3, #0
 810d94a:	bf0c      	ite	eq
 810d94c:	2301      	moveq	r3, #1
 810d94e:	2300      	movne	r3, #0
 810d950:	b2db      	uxtb	r3, r3
}
 810d952:	4618      	mov	r0, r3
 810d954:	3714      	adds	r7, #20
 810d956:	46bd      	mov	sp, r7
 810d958:	bd90      	pop	{r4, r7, pc}

0810d95a <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 810d95a:	b480      	push	{r7}
 810d95c:	b083      	sub	sp, #12
 810d95e:	af00      	add	r7, sp, #0
 810d960:	6078      	str	r0, [r7, #4]
 810d962:	687b      	ldr	r3, [r7, #4]
 810d964:	2200      	movs	r2, #0
 810d966:	609a      	str	r2, [r3, #8]
 810d968:	687b      	ldr	r3, [r7, #4]
 810d96a:	4618      	mov	r0, r3
 810d96c:	370c      	adds	r7, #12
 810d96e:	46bd      	mov	sp, r7
 810d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d974:	4770      	bx	lr

0810d976 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 810d976:	b580      	push	{r7, lr}
 810d978:	b082      	sub	sp, #8
 810d97a:	af00      	add	r7, sp, #0
 810d97c:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 810d97e:	687b      	ldr	r3, [r7, #4]
 810d980:	689b      	ldr	r3, [r3, #8]
 810d982:	2b00      	cmp	r3, #0
 810d984:	d005      	beq.n	810d992 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 810d986:	687b      	ldr	r3, [r7, #4]
 810d988:	689b      	ldr	r3, [r3, #8]
 810d98a:	6878      	ldr	r0, [r7, #4]
 810d98c:	6879      	ldr	r1, [r7, #4]
 810d98e:	2203      	movs	r2, #3
 810d990:	4798      	blx	r3
    }
 810d992:	687b      	ldr	r3, [r7, #4]
 810d994:	4618      	mov	r0, r3
 810d996:	3708      	adds	r7, #8
 810d998:	46bd      	mov	sp, r7
 810d99a:	bd80      	pop	{r7, pc}

0810d99c <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 810d99c:	b480      	push	{r7}
 810d99e:	b083      	sub	sp, #12
 810d9a0:	af00      	add	r7, sp, #0
 810d9a2:	6078      	str	r0, [r7, #4]
 810d9a4:	687b      	ldr	r3, [r7, #4]
 810d9a6:	689b      	ldr	r3, [r3, #8]
 810d9a8:	2b00      	cmp	r3, #0
 810d9aa:	bf0c      	ite	eq
 810d9ac:	2301      	moveq	r3, #1
 810d9ae:	2300      	movne	r3, #0
 810d9b0:	b2db      	uxtb	r3, r3
 810d9b2:	4618      	mov	r0, r3
 810d9b4:	370c      	adds	r7, #12
 810d9b6:	46bd      	mov	sp, r7
 810d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9bc:	4770      	bx	lr
	...

0810d9c0 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 810d9c0:	b480      	push	{r7}
 810d9c2:	b083      	sub	sp, #12
 810d9c4:	af00      	add	r7, sp, #0
 810d9c6:	6078      	str	r0, [r7, #4]
 810d9c8:	4a04      	ldr	r2, [pc, #16]	; (810d9dc <_ZN8IODriverD1Ev+0x1c>)
 810d9ca:	687b      	ldr	r3, [r7, #4]
 810d9cc:	601a      	str	r2, [r3, #0]
 810d9ce:	687b      	ldr	r3, [r7, #4]
 810d9d0:	4618      	mov	r0, r3
 810d9d2:	370c      	adds	r7, #12
 810d9d4:	46bd      	mov	sp, r7
 810d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9da:	4770      	bx	lr
 810d9dc:	08115804 	.word	0x08115804

0810d9e0 <_ZN8IODriverD0Ev>:
 810d9e0:	b580      	push	{r7, lr}
 810d9e2:	b082      	sub	sp, #8
 810d9e4:	af00      	add	r7, sp, #0
 810d9e6:	6078      	str	r0, [r7, #4]
 810d9e8:	6878      	ldr	r0, [r7, #4]
 810d9ea:	f7ff ffe9 	bl	810d9c0 <_ZN8IODriverD1Ev>
 810d9ee:	2104      	movs	r1, #4
 810d9f0:	6878      	ldr	r0, [r7, #4]
 810d9f2:	f004 f97a 	bl	8111cea <_ZdlPvj>
 810d9f6:	687b      	ldr	r3, [r7, #4]
 810d9f8:	4618      	mov	r0, r3
 810d9fa:	3708      	adds	r7, #8
 810d9fc:	46bd      	mov	sp, r7
 810d9fe:	bd80      	pop	{r7, pc}

0810da00 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 810da00:	b580      	push	{r7, lr}
 810da02:	b082      	sub	sp, #8
 810da04:	af00      	add	r7, sp, #0
 810da06:	6078      	str	r0, [r7, #4]
 810da08:	687b      	ldr	r3, [r7, #4]
 810da0a:	4618      	mov	r0, r3
 810da0c:	f7ff ffb3 	bl	810d976 <_ZNSt14_Function_baseD1Ev>
 810da10:	687b      	ldr	r3, [r7, #4]
 810da12:	4618      	mov	r0, r3
 810da14:	3708      	adds	r7, #8
 810da16:	46bd      	mov	sp, r7
 810da18:	bd80      	pop	{r7, pc}
	...

0810da1c <_ZN8IODriverC1Ev>:
class IODriver {
 810da1c:	b480      	push	{r7}
 810da1e:	b083      	sub	sp, #12
 810da20:	af00      	add	r7, sp, #0
 810da22:	6078      	str	r0, [r7, #4]
 810da24:	4a04      	ldr	r2, [pc, #16]	; (810da38 <_ZN8IODriverC1Ev+0x1c>)
 810da26:	687b      	ldr	r3, [r7, #4]
 810da28:	601a      	str	r2, [r3, #0]
 810da2a:	687b      	ldr	r3, [r7, #4]
 810da2c:	4618      	mov	r0, r3
 810da2e:	370c      	adds	r7, #12
 810da30:	46bd      	mov	sp, r7
 810da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da36:	4770      	bx	lr
 810da38:	08115804 	.word	0x08115804

0810da3c <_ZN16BufferedIODriverC1EPVhS1_j>:
#include <cstring>

#ifdef BUILD_WITH_BUFFERED_IO


BufferedIODriver::BufferedIODriver(volatile uint8_t* bufferStorage, volatile uint8_t* bufferControl, size_t length) : bufferStorage(bufferStorage), bufferControl(bufferControl), bufferLength(length), readIndex(0), receiverFunc(nullptr) {
 810da3c:	b580      	push	{r7, lr}
 810da3e:	b084      	sub	sp, #16
 810da40:	af00      	add	r7, sp, #0
 810da42:	60f8      	str	r0, [r7, #12]
 810da44:	60b9      	str	r1, [r7, #8]
 810da46:	607a      	str	r2, [r7, #4]
 810da48:	603b      	str	r3, [r7, #0]
 810da4a:	68fb      	ldr	r3, [r7, #12]
 810da4c:	4618      	mov	r0, r3
 810da4e:	f7ff ffe5 	bl	810da1c <_ZN8IODriverC1Ev>
 810da52:	4a11      	ldr	r2, [pc, #68]	; (810da98 <_ZN16BufferedIODriverC1EPVhS1_j+0x5c>)
 810da54:	68fb      	ldr	r3, [r7, #12]
 810da56:	601a      	str	r2, [r3, #0]
 810da58:	68fb      	ldr	r3, [r7, #12]
 810da5a:	68ba      	ldr	r2, [r7, #8]
 810da5c:	609a      	str	r2, [r3, #8]
 810da5e:	68fb      	ldr	r3, [r7, #12]
 810da60:	687a      	ldr	r2, [r7, #4]
 810da62:	60da      	str	r2, [r3, #12]
 810da64:	68fb      	ldr	r3, [r7, #12]
 810da66:	683a      	ldr	r2, [r7, #0]
 810da68:	611a      	str	r2, [r3, #16]
 810da6a:	68fb      	ldr	r3, [r7, #12]
 810da6c:	2200      	movs	r2, #0
 810da6e:	829a      	strh	r2, [r3, #20]
 810da70:	68fb      	ldr	r3, [r7, #12]
 810da72:	3318      	adds	r3, #24
 810da74:	2100      	movs	r1, #0
 810da76:	4618      	mov	r0, r3
 810da78:	f000 f8b1 	bl	810dbde <_ZNSt8functionIFvhPhmEEC1EDn>
	semaphore = xSemaphoreCreateMutex();
 810da7c:	2001      	movs	r0, #1
 810da7e:	f7fc fae4 	bl	810a04a <xQueueCreateMutex>
 810da82:	4602      	mov	r2, r0
 810da84:	68fb      	ldr	r3, [r7, #12]
 810da86:	605a      	str	r2, [r3, #4]
	*bufferControl = 0;
 810da88:	687b      	ldr	r3, [r7, #4]
 810da8a:	2200      	movs	r2, #0
 810da8c:	701a      	strb	r2, [r3, #0]
}
 810da8e:	68fb      	ldr	r3, [r7, #12]
 810da90:	4618      	mov	r0, r3
 810da92:	3710      	adds	r7, #16
 810da94:	46bd      	mov	sp, r7
 810da96:	bd80      	pop	{r7, pc}
 810da98:	081157ec 	.word	0x081157ec

0810da9c <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 810da9c:	b580      	push	{r7, lr}
 810da9e:	b082      	sub	sp, #8
 810daa0:	af00      	add	r7, sp, #0
 810daa2:	6078      	str	r0, [r7, #4]
 810daa4:	6039      	str	r1, [r7, #0]
	receiverFunc = receiver;
 810daa6:	687b      	ldr	r3, [r7, #4]
 810daa8:	3318      	adds	r3, #24
 810daaa:	6839      	ldr	r1, [r7, #0]
 810daac:	4618      	mov	r0, r3
 810daae:	f000 f8a4 	bl	810dbfa <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 810dab2:	bf00      	nop
 810dab4:	3708      	adds	r7, #8
 810dab6:	46bd      	mov	sp, r7
 810dab8:	bd80      	pop	{r7, pc}

0810daba <_ZN16BufferedIODriver8transmitEPhm>:
/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 * Assumes there is no overrun
 */
void BufferedIODriver::transmit(uint8_t* data, uint32_t length) {
 810daba:	b580      	push	{r7, lr}
 810dabc:	b088      	sub	sp, #32
 810dabe:	af00      	add	r7, sp, #0
 810dac0:	60f8      	str	r0, [r7, #12]
 810dac2:	60b9      	str	r1, [r7, #8]
 810dac4:	607a      	str	r2, [r7, #4]
	if(xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE) {
 810dac6:	68fb      	ldr	r3, [r7, #12]
 810dac8:	685b      	ldr	r3, [r3, #4]
 810daca:	f04f 31ff 	mov.w	r1, #4294967295
 810dace:	4618      	mov	r0, r3
 810dad0:	f7fc fbce 	bl	810a270 <xQueueSemaphoreTake>
 810dad4:	4603      	mov	r3, r0
 810dad6:	2b01      	cmp	r3, #1
 810dad8:	bf0c      	ite	eq
 810dada:	2301      	moveq	r3, #1
 810dadc:	2300      	movne	r3, #0
 810dade:	b2db      	uxtb	r3, r3
 810dae0:	2b00      	cmp	r3, #0
 810dae2:	d056      	beq.n	810db92 <_ZN16BufferedIODriver8transmitEPhm+0xd8>
		while(HAL_HSEM_Take(1, 1) != HAL_OK);
 810dae4:	2101      	movs	r1, #1
 810dae6:	2001      	movs	r0, #1
 810dae8:	f7f7 fb2e 	bl	8105148 <HAL_HSEM_Take>
 810daec:	4603      	mov	r3, r0
 810daee:	2b00      	cmp	r3, #0
 810daf0:	bf14      	ite	ne
 810daf2:	2301      	movne	r3, #1
 810daf4:	2300      	moveq	r3, #0
 810daf6:	b2db      	uxtb	r3, r3
 810daf8:	2b00      	cmp	r3, #0
 810dafa:	d000      	beq.n	810dafe <_ZN16BufferedIODriver8transmitEPhm+0x44>
 810dafc:	e7f2      	b.n	810dae4 <_ZN16BufferedIODriver8transmitEPhm+0x2a>

		uint8_t writeIndex = *bufferControl;
 810dafe:	68fb      	ldr	r3, [r7, #12]
 810db00:	68db      	ldr	r3, [r3, #12]
 810db02:	781b      	ldrb	r3, [r3, #0]
 810db04:	77fb      	strb	r3, [r7, #31]
		uint8_t* buffer = (uint8_t*) bufferStorage;
 810db06:	68fb      	ldr	r3, [r7, #12]
 810db08:	689b      	ldr	r3, [r3, #8]
 810db0a:	61bb      	str	r3, [r7, #24]

		if(writeIndex + length < bufferLength) {
 810db0c:	7ffa      	ldrb	r2, [r7, #31]
 810db0e:	687b      	ldr	r3, [r7, #4]
 810db10:	441a      	add	r2, r3
 810db12:	68fb      	ldr	r3, [r7, #12]
 810db14:	691b      	ldr	r3, [r3, #16]
 810db16:	429a      	cmp	r2, r3
 810db18:	d20d      	bcs.n	810db36 <_ZN16BufferedIODriver8transmitEPhm+0x7c>
			memcpy(buffer + writeIndex, data, length);
 810db1a:	7ffb      	ldrb	r3, [r7, #31]
 810db1c:	69ba      	ldr	r2, [r7, #24]
 810db1e:	4413      	add	r3, r2
 810db20:	687a      	ldr	r2, [r7, #4]
 810db22:	68b9      	ldr	r1, [r7, #8]
 810db24:	4618      	mov	r0, r3
 810db26:	f004 fa65 	bl	8111ff4 <memcpy>
			writeIndex += length;
 810db2a:	687b      	ldr	r3, [r7, #4]
 810db2c:	b2da      	uxtb	r2, r3
 810db2e:	7ffb      	ldrb	r3, [r7, #31]
 810db30:	4413      	add	r3, r2
 810db32:	77fb      	strb	r3, [r7, #31]
 810db34:	e01e      	b.n	810db74 <_ZN16BufferedIODriver8transmitEPhm+0xba>
		} else {
			uint16_t firstSize = bufferLength - writeIndex;
 810db36:	68fb      	ldr	r3, [r7, #12]
 810db38:	691b      	ldr	r3, [r3, #16]
 810db3a:	b29a      	uxth	r2, r3
 810db3c:	7ffb      	ldrb	r3, [r7, #31]
 810db3e:	b29b      	uxth	r3, r3
 810db40:	1ad3      	subs	r3, r2, r3
 810db42:	82fb      	strh	r3, [r7, #22]
			memcpy(buffer + writeIndex, data, firstSize);
 810db44:	7ffb      	ldrb	r3, [r7, #31]
 810db46:	69ba      	ldr	r2, [r7, #24]
 810db48:	4413      	add	r3, r2
 810db4a:	8afa      	ldrh	r2, [r7, #22]
 810db4c:	68b9      	ldr	r1, [r7, #8]
 810db4e:	4618      	mov	r0, r3
 810db50:	f004 fa50 	bl	8111ff4 <memcpy>
			memcpy(buffer, data + firstSize, length - firstSize);
 810db54:	8afb      	ldrh	r3, [r7, #22]
 810db56:	68ba      	ldr	r2, [r7, #8]
 810db58:	18d1      	adds	r1, r2, r3
 810db5a:	8afb      	ldrh	r3, [r7, #22]
 810db5c:	687a      	ldr	r2, [r7, #4]
 810db5e:	1ad3      	subs	r3, r2, r3
 810db60:	461a      	mov	r2, r3
 810db62:	69b8      	ldr	r0, [r7, #24]
 810db64:	f004 fa46 	bl	8111ff4 <memcpy>
			writeIndex = length - firstSize;
 810db68:	687b      	ldr	r3, [r7, #4]
 810db6a:	b2da      	uxtb	r2, r3
 810db6c:	8afb      	ldrh	r3, [r7, #22]
 810db6e:	b2db      	uxtb	r3, r3
 810db70:	1ad3      	subs	r3, r2, r3
 810db72:	77fb      	strb	r3, [r7, #31]
		}

		*bufferControl = writeIndex;
 810db74:	68fb      	ldr	r3, [r7, #12]
 810db76:	68db      	ldr	r3, [r3, #12]
 810db78:	7ffa      	ldrb	r2, [r7, #31]
 810db7a:	701a      	strb	r2, [r3, #0]

		HAL_HSEM_Release(1, 1);
 810db7c:	2101      	movs	r1, #1
 810db7e:	2001      	movs	r0, #1
 810db80:	f7f7 fb1c 	bl	81051bc <HAL_HSEM_Release>
		xSemaphoreGive(semaphore);
 810db84:	68fb      	ldr	r3, [r7, #12]
 810db86:	6858      	ldr	r0, [r3, #4]
 810db88:	2300      	movs	r3, #0
 810db8a:	2200      	movs	r2, #0
 810db8c:	2100      	movs	r1, #0
 810db8e:	f7fc fa75 	bl	810a07c <xQueueGenericSend>
	}
}
 810db92:	bf00      	nop
 810db94:	3720      	adds	r7, #32
 810db96:	46bd      	mov	sp, r7
 810db98:	bd80      	pop	{r7, pc}

0810db9a <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 810db9a:	b580      	push	{r7, lr}
 810db9c:	b082      	sub	sp, #8
 810db9e:	af00      	add	r7, sp, #0
 810dba0:	6078      	str	r0, [r7, #4]
 810dba2:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 810dba4:	687b      	ldr	r3, [r7, #4]
 810dba6:	4618      	mov	r0, r3
 810dba8:	f7ff fed7 	bl	810d95a <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 810dbac:	6838      	ldr	r0, [r7, #0]
 810dbae:	f000 f83f 	bl	810dc30 <_ZNKSt8functionIFvhPhmEEcvbEv>
 810dbb2:	4603      	mov	r3, r0
 810dbb4:	2b00      	cmp	r3, #0
 810dbb6:	d00d      	beq.n	810dbd4 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 810dbb8:	683b      	ldr	r3, [r7, #0]
 810dbba:	689b      	ldr	r3, [r3, #8]
 810dbbc:	6878      	ldr	r0, [r7, #4]
 810dbbe:	6839      	ldr	r1, [r7, #0]
 810dbc0:	2202      	movs	r2, #2
 810dbc2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 810dbc4:	683b      	ldr	r3, [r7, #0]
 810dbc6:	68da      	ldr	r2, [r3, #12]
 810dbc8:	687b      	ldr	r3, [r7, #4]
 810dbca:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 810dbcc:	683b      	ldr	r3, [r7, #0]
 810dbce:	689a      	ldr	r2, [r3, #8]
 810dbd0:	687b      	ldr	r3, [r7, #4]
 810dbd2:	609a      	str	r2, [r3, #8]
	}
    }
 810dbd4:	687b      	ldr	r3, [r7, #4]
 810dbd6:	4618      	mov	r0, r3
 810dbd8:	3708      	adds	r7, #8
 810dbda:	46bd      	mov	sp, r7
 810dbdc:	bd80      	pop	{r7, pc}

0810dbde <_ZNSt8functionIFvhPhmEEC1EDn>:
      function(nullptr_t) noexcept
 810dbde:	b580      	push	{r7, lr}
 810dbe0:	b082      	sub	sp, #8
 810dbe2:	af00      	add	r7, sp, #0
 810dbe4:	6078      	str	r0, [r7, #4]
 810dbe6:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 810dbe8:	687b      	ldr	r3, [r7, #4]
 810dbea:	4618      	mov	r0, r3
 810dbec:	f7ff feb5 	bl	810d95a <_ZNSt14_Function_baseC1Ev>
 810dbf0:	687b      	ldr	r3, [r7, #4]
 810dbf2:	4618      	mov	r0, r3
 810dbf4:	3708      	adds	r7, #8
 810dbf6:	46bd      	mov	sp, r7
 810dbf8:	bd80      	pop	{r7, pc}

0810dbfa <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 810dbfa:	b580      	push	{r7, lr}
 810dbfc:	b086      	sub	sp, #24
 810dbfe:	af00      	add	r7, sp, #0
 810dc00:	6078      	str	r0, [r7, #4]
 810dc02:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 810dc04:	f107 0308 	add.w	r3, r7, #8
 810dc08:	6839      	ldr	r1, [r7, #0]
 810dc0a:	4618      	mov	r0, r3
 810dc0c:	f7ff ffc5 	bl	810db9a <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 810dc10:	f107 0308 	add.w	r3, r7, #8
 810dc14:	6879      	ldr	r1, [r7, #4]
 810dc16:	4618      	mov	r0, r3
 810dc18:	f000 f81a 	bl	810dc50 <_ZNSt8functionIFvhPhmEE4swapERS2_>
 810dc1c:	f107 0308 	add.w	r3, r7, #8
 810dc20:	4618      	mov	r0, r3
 810dc22:	f7ff feed 	bl	810da00 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 810dc26:	687b      	ldr	r3, [r7, #4]
      }
 810dc28:	4618      	mov	r0, r3
 810dc2a:	3718      	adds	r7, #24
 810dc2c:	46bd      	mov	sp, r7
 810dc2e:	bd80      	pop	{r7, pc}

0810dc30 <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 810dc30:	b580      	push	{r7, lr}
 810dc32:	b082      	sub	sp, #8
 810dc34:	af00      	add	r7, sp, #0
 810dc36:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 810dc38:	687b      	ldr	r3, [r7, #4]
 810dc3a:	4618      	mov	r0, r3
 810dc3c:	f7ff feae 	bl	810d99c <_ZNKSt14_Function_base8_M_emptyEv>
 810dc40:	4603      	mov	r3, r0
 810dc42:	f083 0301 	eor.w	r3, r3, #1
 810dc46:	b2db      	uxtb	r3, r3
 810dc48:	4618      	mov	r0, r3
 810dc4a:	3708      	adds	r7, #8
 810dc4c:	46bd      	mov	sp, r7
 810dc4e:	bd80      	pop	{r7, pc}

0810dc50 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 810dc50:	b580      	push	{r7, lr}
 810dc52:	b082      	sub	sp, #8
 810dc54:	af00      	add	r7, sp, #0
 810dc56:	6078      	str	r0, [r7, #4]
 810dc58:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 810dc5a:	687b      	ldr	r3, [r7, #4]
 810dc5c:	683a      	ldr	r2, [r7, #0]
 810dc5e:	4611      	mov	r1, r2
 810dc60:	4618      	mov	r0, r3
 810dc62:	f000 f821 	bl	810dca8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 810dc66:	687b      	ldr	r3, [r7, #4]
 810dc68:	f103 0208 	add.w	r2, r3, #8
 810dc6c:	683b      	ldr	r3, [r7, #0]
 810dc6e:	3308      	adds	r3, #8
 810dc70:	4619      	mov	r1, r3
 810dc72:	4610      	mov	r0, r2
 810dc74:	f000 f84a 	bl	810dd0c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 810dc78:	687b      	ldr	r3, [r7, #4]
 810dc7a:	f103 020c 	add.w	r2, r3, #12
 810dc7e:	683b      	ldr	r3, [r7, #0]
 810dc80:	330c      	adds	r3, #12
 810dc82:	4619      	mov	r1, r3
 810dc84:	4610      	mov	r0, r2
 810dc86:	f000 f86b 	bl	810dd60 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 810dc8a:	bf00      	nop
 810dc8c:	3708      	adds	r7, #8
 810dc8e:	46bd      	mov	sp, r7
 810dc90:	bd80      	pop	{r7, pc}

0810dc92 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 810dc92:	b480      	push	{r7}
 810dc94:	b083      	sub	sp, #12
 810dc96:	af00      	add	r7, sp, #0
 810dc98:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810dc9a:	687b      	ldr	r3, [r7, #4]
 810dc9c:	4618      	mov	r0, r3
 810dc9e:	370c      	adds	r7, #12
 810dca0:	46bd      	mov	sp, r7
 810dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dca6:	4770      	bx	lr

0810dca8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 810dca8:	b580      	push	{r7, lr}
 810dcaa:	b084      	sub	sp, #16
 810dcac:	af00      	add	r7, sp, #0
 810dcae:	6078      	str	r0, [r7, #4]
 810dcb0:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810dcb2:	6878      	ldr	r0, [r7, #4]
 810dcb4:	f7ff ffed 	bl	810dc92 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810dcb8:	4602      	mov	r2, r0
 810dcba:	f107 0308 	add.w	r3, r7, #8
 810dcbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 810dcc2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 810dcc6:	6838      	ldr	r0, [r7, #0]
 810dcc8:	f7ff ffe3 	bl	810dc92 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810dccc:	4602      	mov	r2, r0
 810dcce:	687b      	ldr	r3, [r7, #4]
 810dcd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 810dcd4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 810dcd8:	f107 0308 	add.w	r3, r7, #8
 810dcdc:	4618      	mov	r0, r3
 810dcde:	f7ff ffd8 	bl	810dc92 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810dce2:	4602      	mov	r2, r0
 810dce4:	683b      	ldr	r3, [r7, #0]
 810dce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 810dcea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 810dcee:	bf00      	nop
 810dcf0:	3710      	adds	r7, #16
 810dcf2:	46bd      	mov	sp, r7
 810dcf4:	bd80      	pop	{r7, pc}

0810dcf6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 810dcf6:	b480      	push	{r7}
 810dcf8:	b083      	sub	sp, #12
 810dcfa:	af00      	add	r7, sp, #0
 810dcfc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810dcfe:	687b      	ldr	r3, [r7, #4]
 810dd00:	4618      	mov	r0, r3
 810dd02:	370c      	adds	r7, #12
 810dd04:	46bd      	mov	sp, r7
 810dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd0a:	4770      	bx	lr

0810dd0c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 810dd0c:	b580      	push	{r7, lr}
 810dd0e:	b084      	sub	sp, #16
 810dd10:	af00      	add	r7, sp, #0
 810dd12:	6078      	str	r0, [r7, #4]
 810dd14:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810dd16:	6878      	ldr	r0, [r7, #4]
 810dd18:	f7ff ffed 	bl	810dcf6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810dd1c:	4603      	mov	r3, r0
 810dd1e:	681b      	ldr	r3, [r3, #0]
 810dd20:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810dd22:	6838      	ldr	r0, [r7, #0]
 810dd24:	f7ff ffe7 	bl	810dcf6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810dd28:	4603      	mov	r3, r0
 810dd2a:	681a      	ldr	r2, [r3, #0]
 810dd2c:	687b      	ldr	r3, [r7, #4]
 810dd2e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810dd30:	f107 030c 	add.w	r3, r7, #12
 810dd34:	4618      	mov	r0, r3
 810dd36:	f7ff ffde 	bl	810dcf6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810dd3a:	4603      	mov	r3, r0
 810dd3c:	681a      	ldr	r2, [r3, #0]
 810dd3e:	683b      	ldr	r3, [r7, #0]
 810dd40:	601a      	str	r2, [r3, #0]
    }
 810dd42:	bf00      	nop
 810dd44:	3710      	adds	r7, #16
 810dd46:	46bd      	mov	sp, r7
 810dd48:	bd80      	pop	{r7, pc}

0810dd4a <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 810dd4a:	b480      	push	{r7}
 810dd4c:	b083      	sub	sp, #12
 810dd4e:	af00      	add	r7, sp, #0
 810dd50:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810dd52:	687b      	ldr	r3, [r7, #4]
 810dd54:	4618      	mov	r0, r3
 810dd56:	370c      	adds	r7, #12
 810dd58:	46bd      	mov	sp, r7
 810dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd5e:	4770      	bx	lr

0810dd60 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 810dd60:	b580      	push	{r7, lr}
 810dd62:	b084      	sub	sp, #16
 810dd64:	af00      	add	r7, sp, #0
 810dd66:	6078      	str	r0, [r7, #4]
 810dd68:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810dd6a:	6878      	ldr	r0, [r7, #4]
 810dd6c:	f7ff ffed 	bl	810dd4a <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810dd70:	4603      	mov	r3, r0
 810dd72:	681b      	ldr	r3, [r3, #0]
 810dd74:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810dd76:	6838      	ldr	r0, [r7, #0]
 810dd78:	f7ff ffe7 	bl	810dd4a <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810dd7c:	4603      	mov	r3, r0
 810dd7e:	681a      	ldr	r2, [r3, #0]
 810dd80:	687b      	ldr	r3, [r7, #4]
 810dd82:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810dd84:	f107 030c 	add.w	r3, r7, #12
 810dd88:	4618      	mov	r0, r3
 810dd8a:	f7ff ffde 	bl	810dd4a <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810dd8e:	4603      	mov	r3, r0
 810dd90:	681a      	ldr	r2, [r3, #0]
 810dd92:	683b      	ldr	r3, [r7, #0]
 810dd94:	601a      	str	r2, [r3, #0]
    }
 810dd96:	bf00      	nop
 810dd98:	3710      	adds	r7, #16
 810dd9a:	46bd      	mov	sp, r7
 810dd9c:	bd80      	pop	{r7, pc}
	...

0810dda0 <_ZN16BufferedIODriverD1Ev>:
#include <cstdint>
#include <functional>



class BufferedIODriver : public IODriver {
 810dda0:	b580      	push	{r7, lr}
 810dda2:	b082      	sub	sp, #8
 810dda4:	af00      	add	r7, sp, #0
 810dda6:	6078      	str	r0, [r7, #4]
 810dda8:	4a08      	ldr	r2, [pc, #32]	; (810ddcc <_ZN16BufferedIODriverD1Ev+0x2c>)
 810ddaa:	687b      	ldr	r3, [r7, #4]
 810ddac:	601a      	str	r2, [r3, #0]
 810ddae:	687b      	ldr	r3, [r7, #4]
 810ddb0:	3318      	adds	r3, #24
 810ddb2:	4618      	mov	r0, r3
 810ddb4:	f7ff fe24 	bl	810da00 <_ZNSt8functionIFvhPhmEED1Ev>
 810ddb8:	687b      	ldr	r3, [r7, #4]
 810ddba:	4618      	mov	r0, r3
 810ddbc:	f7ff fe00 	bl	810d9c0 <_ZN8IODriverD1Ev>
 810ddc0:	687b      	ldr	r3, [r7, #4]
 810ddc2:	4618      	mov	r0, r3
 810ddc4:	3708      	adds	r7, #8
 810ddc6:	46bd      	mov	sp, r7
 810ddc8:	bd80      	pop	{r7, pc}
 810ddca:	bf00      	nop
 810ddcc:	081157ec 	.word	0x081157ec

0810ddd0 <_ZN16BufferedIODriverD0Ev>:
 810ddd0:	b580      	push	{r7, lr}
 810ddd2:	b082      	sub	sp, #8
 810ddd4:	af00      	add	r7, sp, #0
 810ddd6:	6078      	str	r0, [r7, #4]
 810ddd8:	6878      	ldr	r0, [r7, #4]
 810ddda:	f7ff ffe1 	bl	810dda0 <_ZN16BufferedIODriverD1Ev>
 810ddde:	2128      	movs	r1, #40	; 0x28
 810dde0:	6878      	ldr	r0, [r7, #4]
 810dde2:	f003 ff82 	bl	8111cea <_ZdlPvj>
 810dde6:	687b      	ldr	r3, [r7, #4]
 810dde8:	4618      	mov	r0, r3
 810ddea:	3708      	adds	r7, #8
 810ddec:	46bd      	mov	sp, r7
 810ddee:	bd80      	pop	{r7, pc}

0810ddf0 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 810ddf0:	b480      	push	{r7}
 810ddf2:	b083      	sub	sp, #12
 810ddf4:	af00      	add	r7, sp, #0
 810ddf6:	6078      	str	r0, [r7, #4]
 810ddf8:	4a04      	ldr	r2, [pc, #16]	; (810de0c <_ZN10MessageBusD1Ev+0x1c>)
 810ddfa:	687b      	ldr	r3, [r7, #4]
 810ddfc:	601a      	str	r2, [r3, #0]
 810ddfe:	687b      	ldr	r3, [r7, #4]
 810de00:	4618      	mov	r0, r3
 810de02:	370c      	adds	r7, #12
 810de04:	46bd      	mov	sp, r7
 810de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de0a:	4770      	bx	lr
 810de0c:	08115868 	.word	0x08115868

0810de10 <_ZN10MessageBusD0Ev>:
 810de10:	b580      	push	{r7, lr}
 810de12:	b082      	sub	sp, #8
 810de14:	af00      	add	r7, sp, #0
 810de16:	6078      	str	r0, [r7, #4]
 810de18:	6878      	ldr	r0, [r7, #4]
 810de1a:	f7ff ffe9 	bl	810ddf0 <_ZN10MessageBusD1Ev>
 810de1e:	f644 0104 	movw	r1, #18436	; 0x4804
 810de22:	6878      	ldr	r0, [r7, #4]
 810de24:	f003 ff61 	bl	8111cea <_ZdlPvj>
 810de28:	687b      	ldr	r3, [r7, #4]
 810de2a:	4618      	mov	r0, r3
 810de2c:	3708      	adds	r7, #8
 810de2e:	46bd      	mov	sp, r7
 810de30:	bd80      	pop	{r7, pc}

0810de32 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 810de32:	b480      	push	{r7}
 810de34:	b083      	sub	sp, #12
 810de36:	af00      	add	r7, sp, #0
 810de38:	6078      	str	r0, [r7, #4]
 810de3a:	687b      	ldr	r3, [r7, #4]
 810de3c:	4618      	mov	r0, r3
 810de3e:	370c      	adds	r7, #12
 810de40:	46bd      	mov	sp, r7
 810de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de46:	4770      	bx	lr

0810de48 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 810de48:	b480      	push	{r7}
 810de4a:	b083      	sub	sp, #12
 810de4c:	af00      	add	r7, sp, #0
 810de4e:	6078      	str	r0, [r7, #4]
 810de50:	687b      	ldr	r3, [r7, #4]
 810de52:	4618      	mov	r0, r3
 810de54:	370c      	adds	r7, #12
 810de56:	46bd      	mov	sp, r7
 810de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de5c:	4770      	bx	lr
	...

0810de60 <_ZN10MessageBusC1Ev>:
class MessageBus {
 810de60:	b480      	push	{r7}
 810de62:	b083      	sub	sp, #12
 810de64:	af00      	add	r7, sp, #0
 810de66:	6078      	str	r0, [r7, #4]
 810de68:	4a04      	ldr	r2, [pc, #16]	; (810de7c <_ZN10MessageBusC1Ev+0x1c>)
 810de6a:	687b      	ldr	r3, [r7, #4]
 810de6c:	601a      	str	r2, [r3, #0]
 810de6e:	687b      	ldr	r3, [r7, #4]
 810de70:	4618      	mov	r0, r3
 810de72:	370c      	adds	r7, #12
 810de74:	46bd      	mov	sp, r7
 810de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de7a:	4770      	bx	lr
 810de7c:	08115868 	.word	0x08115868

0810de80 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 810de80:	b590      	push	{r4, r7, lr}
 810de82:	b091      	sub	sp, #68	; 0x44
 810de84:	af02      	add	r7, sp, #8
 810de86:	60f8      	str	r0, [r7, #12]
 810de88:	60b9      	str	r1, [r7, #8]
 810de8a:	607a      	str	r2, [r7, #4]
 810de8c:	603b      	str	r3, [r7, #0]
 810de8e:	68fb      	ldr	r3, [r7, #12]
 810de90:	4618      	mov	r0, r3
 810de92:	f7ff ffe5 	bl	810de60 <_ZN10MessageBusC1Ev>
 810de96:	4a24      	ldr	r2, [pc, #144]	; (810df28 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 810de98:	68fb      	ldr	r3, [r7, #12]
 810de9a:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 810de9c:	68fb      	ldr	r3, [r7, #12]
 810de9e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dea2:	3304      	adds	r3, #4
 810dea4:	68ba      	ldr	r2, [r7, #8]
 810dea6:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 810dea8:	68fb      	ldr	r3, [r7, #12]
 810deaa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810deae:	3308      	adds	r3, #8
 810deb0:	687a      	ldr	r2, [r7, #4]
 810deb2:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 810deb4:	68fb      	ldr	r3, [r7, #12]
 810deb6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810deba:	330c      	adds	r3, #12
 810debc:	683a      	ldr	r2, [r7, #0]
 810debe:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 810dec0:	68fb      	ldr	r3, [r7, #12]
 810dec2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dec6:	3310      	adds	r3, #16
 810dec8:	2200      	movs	r2, #0
 810deca:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 810decc:	68bb      	ldr	r3, [r7, #8]
 810dece:	681b      	ldr	r3, [r3, #0]
 810ded0:	3308      	adds	r3, #8
 810ded2:	681c      	ldr	r4, [r3, #0]
 810ded4:	4b15      	ldr	r3, [pc, #84]	; (810df2c <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 810ded6:	62fb      	str	r3, [r7, #44]	; 0x2c
 810ded8:	2300      	movs	r3, #0
 810deda:	633b      	str	r3, [r7, #48]	; 0x30
 810dedc:	68fb      	ldr	r3, [r7, #12]
 810dede:	637b      	str	r3, [r7, #52]	; 0x34
 810dee0:	f107 0020 	add.w	r0, r7, #32
 810dee4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 810dee8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 810deec:	4b10      	ldr	r3, [pc, #64]	; (810df30 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 810deee:	9301      	str	r3, [sp, #4]
 810def0:	4b10      	ldr	r3, [pc, #64]	; (810df34 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 810def2:	9300      	str	r3, [sp, #0]
 810def4:	4b10      	ldr	r3, [pc, #64]	; (810df38 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 810def6:	f000 f8f0 	bl	810e0da <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 810defa:	f107 0220 	add.w	r2, r7, #32
 810defe:	f107 0310 	add.w	r3, r7, #16
 810df02:	4611      	mov	r1, r2
 810df04:	4618      	mov	r0, r3
 810df06:	f000 fa45 	bl	810e394 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 810df0a:	f107 0310 	add.w	r3, r7, #16
 810df0e:	4619      	mov	r1, r3
 810df10:	68b8      	ldr	r0, [r7, #8]
 810df12:	47a0      	blx	r4
 810df14:	f107 0310 	add.w	r3, r7, #16
 810df18:	4618      	mov	r0, r3
 810df1a:	f7ff fd71 	bl	810da00 <_ZNSt8functionIFvhPhmEED1Ev>
}
 810df1e:	68fb      	ldr	r3, [r7, #12]
 810df20:	4618      	mov	r0, r3
 810df22:	373c      	adds	r7, #60	; 0x3c
 810df24:	46bd      	mov	sp, r7
 810df26:	bd90      	pop	{r4, r7, pc}
 810df28:	08115850 	.word	0x08115850
 810df2c:	0810df3d 	.word	0x0810df3d
 810df30:	08115e76 	.word	0x08115e76
 810df34:	08115e75 	.word	0x08115e75
 810df38:	08115e74 	.word	0x08115e74

0810df3c <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 810df3c:	b580      	push	{r7, lr}
 810df3e:	b084      	sub	sp, #16
 810df40:	af00      	add	r7, sp, #0
 810df42:	60f8      	str	r0, [r7, #12]
 810df44:	607a      	str	r2, [r7, #4]
 810df46:	603b      	str	r3, [r7, #0]
 810df48:	460b      	mov	r3, r1
 810df4a:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 810df4c:	68fb      	ldr	r3, [r7, #12]
 810df4e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810df52:	330c      	adds	r3, #12
 810df54:	681b      	ldr	r3, [r3, #0]
 810df56:	683a      	ldr	r2, [r7, #0]
 810df58:	429a      	cmp	r2, r3
 810df5a:	d91a      	bls.n	810df92 <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 810df5c:	68f8      	ldr	r0, [r7, #12]
 810df5e:	68fb      	ldr	r3, [r7, #12]
 810df60:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810df64:	330c      	adds	r3, #12
 810df66:	681b      	ldr	r3, [r3, #0]
 810df68:	7af9      	ldrb	r1, [r7, #11]
 810df6a:	687a      	ldr	r2, [r7, #4]
 810df6c:	f002 f84e 	bl	811000c <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 810df70:	68fb      	ldr	r3, [r7, #12]
 810df72:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810df76:	330c      	adds	r3, #12
 810df78:	681b      	ldr	r3, [r3, #0]
 810df7a:	683a      	ldr	r2, [r7, #0]
 810df7c:	1ad3      	subs	r3, r2, r3
 810df7e:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 810df80:	68fb      	ldr	r3, [r7, #12]
 810df82:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810df86:	330c      	adds	r3, #12
 810df88:	681b      	ldr	r3, [r3, #0]
 810df8a:	687a      	ldr	r2, [r7, #4]
 810df8c:	4413      	add	r3, r2
 810df8e:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 810df90:	e7dc      	b.n	810df4c <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 810df92:	68f8      	ldr	r0, [r7, #12]
 810df94:	7af9      	ldrb	r1, [r7, #11]
 810df96:	683b      	ldr	r3, [r7, #0]
 810df98:	687a      	ldr	r2, [r7, #4]
 810df9a:	f002 f837 	bl	811000c <_ZN10MessageBus7receiveEhPhm>
}
 810df9e:	bf00      	nop
 810dfa0:	3710      	adds	r7, #16
 810dfa2:	46bd      	mov	sp, r7
 810dfa4:	bd80      	pop	{r7, pc}

0810dfa6 <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 810dfa6:	b580      	push	{r7, lr}
 810dfa8:	b086      	sub	sp, #24
 810dfaa:	af00      	add	r7, sp, #0
 810dfac:	60f8      	str	r0, [r7, #12]
 810dfae:	60b9      	str	r1, [r7, #8]
 810dfb0:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 810dfb2:	68fb      	ldr	r3, [r7, #12]
 810dfb4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dfb8:	330c      	adds	r3, #12
 810dfba:	681a      	ldr	r2, [r3, #0]
 810dfbc:	68fb      	ldr	r3, [r7, #12]
 810dfbe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dfc2:	3310      	adds	r3, #16
 810dfc4:	781b      	ldrb	r3, [r3, #0]
 810dfc6:	1ad3      	subs	r3, r2, r3
 810dfc8:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 810dfca:	687a      	ldr	r2, [r7, #4]
 810dfcc:	697b      	ldr	r3, [r7, #20]
 810dfce:	429a      	cmp	r2, r3
 810dfd0:	d901      	bls.n	810dfd6 <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 810dfd2:	697b      	ldr	r3, [r7, #20]
 810dfd4:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 810dfd6:	68fb      	ldr	r3, [r7, #12]
 810dfd8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dfdc:	3308      	adds	r3, #8
 810dfde:	681a      	ldr	r2, [r3, #0]
 810dfe0:	68fb      	ldr	r3, [r7, #12]
 810dfe2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dfe6:	3310      	adds	r3, #16
 810dfe8:	781b      	ldrb	r3, [r3, #0]
 810dfea:	4413      	add	r3, r2
 810dfec:	687a      	ldr	r2, [r7, #4]
 810dfee:	68b9      	ldr	r1, [r7, #8]
 810dff0:	4618      	mov	r0, r3
 810dff2:	f003 ffff 	bl	8111ff4 <memcpy>

	buffer_index += length;
 810dff6:	68fb      	ldr	r3, [r7, #12]
 810dff8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810dffc:	3310      	adds	r3, #16
 810dffe:	781a      	ldrb	r2, [r3, #0]
 810e000:	687b      	ldr	r3, [r7, #4]
 810e002:	b2db      	uxtb	r3, r3
 810e004:	4413      	add	r3, r2
 810e006:	b2da      	uxtb	r2, r3
 810e008:	68fb      	ldr	r3, [r7, #12]
 810e00a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810e00e:	3310      	adds	r3, #16
 810e010:	701a      	strb	r2, [r3, #0]


	return length;
 810e012:	687b      	ldr	r3, [r7, #4]
 810e014:	b2db      	uxtb	r3, r3
}
 810e016:	4618      	mov	r0, r3
 810e018:	3718      	adds	r7, #24
 810e01a:	46bd      	mov	sp, r7
 810e01c:	bd80      	pop	{r7, pc}

0810e01e <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 810e01e:	b590      	push	{r4, r7, lr}
 810e020:	b083      	sub	sp, #12
 810e022:	af00      	add	r7, sp, #0
 810e024:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 810e026:	687b      	ldr	r3, [r7, #4]
 810e028:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810e02c:	3304      	adds	r3, #4
 810e02e:	6818      	ldr	r0, [r3, #0]
 810e030:	687b      	ldr	r3, [r7, #4]
 810e032:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810e036:	3304      	adds	r3, #4
 810e038:	681b      	ldr	r3, [r3, #0]
 810e03a:	681b      	ldr	r3, [r3, #0]
 810e03c:	330c      	adds	r3, #12
 810e03e:	681c      	ldr	r4, [r3, #0]
 810e040:	687b      	ldr	r3, [r7, #4]
 810e042:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810e046:	3308      	adds	r3, #8
 810e048:	6819      	ldr	r1, [r3, #0]
 810e04a:	687b      	ldr	r3, [r7, #4]
 810e04c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810e050:	3310      	adds	r3, #16
 810e052:	781b      	ldrb	r3, [r3, #0]
 810e054:	461a      	mov	r2, r3
 810e056:	47a0      	blx	r4
	buffer_index = 0;
 810e058:	687b      	ldr	r3, [r7, #4]
 810e05a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810e05e:	3310      	adds	r3, #16
 810e060:	2200      	movs	r2, #0
 810e062:	701a      	strb	r2, [r3, #0]
}
 810e064:	bf00      	nop
 810e066:	370c      	adds	r7, #12
 810e068:	46bd      	mov	sp, r7
 810e06a:	bd90      	pop	{r4, r7, pc}

0810e06c <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e06c:	b480      	push	{r7}
 810e06e:	b083      	sub	sp, #12
 810e070:	af00      	add	r7, sp, #0
 810e072:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e074:	687b      	ldr	r3, [r7, #4]
 810e076:	4618      	mov	r0, r3
 810e078:	370c      	adds	r7, #12
 810e07a:	46bd      	mov	sp, r7
 810e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e080:	4770      	bx	lr

0810e082 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e082:	b480      	push	{r7}
 810e084:	b083      	sub	sp, #12
 810e086:	af00      	add	r7, sp, #0
 810e088:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e08a:	687b      	ldr	r3, [r7, #4]
 810e08c:	4618      	mov	r0, r3
 810e08e:	370c      	adds	r7, #12
 810e090:	46bd      	mov	sp, r7
 810e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e096:	4770      	bx	lr

0810e098 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e098:	b480      	push	{r7}
 810e09a:	b083      	sub	sp, #12
 810e09c:	af00      	add	r7, sp, #0
 810e09e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e0a0:	687b      	ldr	r3, [r7, #4]
 810e0a2:	4618      	mov	r0, r3
 810e0a4:	370c      	adds	r7, #12
 810e0a6:	46bd      	mov	sp, r7
 810e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0ac:	4770      	bx	lr

0810e0ae <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e0ae:	b480      	push	{r7}
 810e0b0:	b083      	sub	sp, #12
 810e0b2:	af00      	add	r7, sp, #0
 810e0b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e0b6:	687b      	ldr	r3, [r7, #4]
 810e0b8:	4618      	mov	r0, r3
 810e0ba:	370c      	adds	r7, #12
 810e0bc:	46bd      	mov	sp, r7
 810e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0c2:	4770      	bx	lr

0810e0c4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e0c4:	b480      	push	{r7}
 810e0c6:	b083      	sub	sp, #12
 810e0c8:	af00      	add	r7, sp, #0
 810e0ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e0cc:	687b      	ldr	r3, [r7, #4]
 810e0ce:	4618      	mov	r0, r3
 810e0d0:	370c      	adds	r7, #12
 810e0d2:	46bd      	mov	sp, r7
 810e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0d8:	4770      	bx	lr

0810e0da <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 810e0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e0de:	b086      	sub	sp, #24
 810e0e0:	af02      	add	r7, sp, #8
 810e0e2:	60f8      	str	r0, [r7, #12]
 810e0e4:	60b9      	str	r1, [r7, #8]
 810e0e6:	607a      	str	r2, [r7, #4]
 810e0e8:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 810e0ea:	68b8      	ldr	r0, [r7, #8]
 810e0ec:	f7ff ffbe 	bl	810e06c <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e0f0:	4605      	mov	r5, r0
 810e0f2:	6878      	ldr	r0, [r7, #4]
 810e0f4:	f7ff ffc5 	bl	810e082 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810e0f8:	4606      	mov	r6, r0
 810e0fa:	6838      	ldr	r0, [r7, #0]
 810e0fc:	f7ff ffcc 	bl	810e098 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e100:	4680      	mov	r8, r0
 810e102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e104:	f7ff ffd3 	bl	810e0ae <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e108:	4604      	mov	r4, r0
 810e10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810e10c:	f7ff ffda 	bl	810e0c4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e110:	4603      	mov	r3, r0
 810e112:	9301      	str	r3, [sp, #4]
 810e114:	9400      	str	r4, [sp, #0]
 810e116:	4643      	mov	r3, r8
 810e118:	4632      	mov	r2, r6
 810e11a:	4629      	mov	r1, r5
 810e11c:	68f8      	ldr	r0, [r7, #12]
 810e11e:	f000 f961 	bl	810e3e4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 810e122:	68f8      	ldr	r0, [r7, #12]
 810e124:	3710      	adds	r7, #16
 810e126:	46bd      	mov	sp, r7
 810e128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810e12c <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 810e12c:	b480      	push	{r7}
 810e12e:	b083      	sub	sp, #12
 810e130:	af00      	add	r7, sp, #0
 810e132:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e134:	687b      	ldr	r3, [r7, #4]
 810e136:	4618      	mov	r0, r3
 810e138:	370c      	adds	r7, #12
 810e13a:	46bd      	mov	sp, r7
 810e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e140:	4770      	bx	lr

0810e142 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e142:	b580      	push	{r7, lr}
 810e144:	b082      	sub	sp, #8
 810e146:	af00      	add	r7, sp, #0
 810e148:	6078      	str	r0, [r7, #4]
 810e14a:	6878      	ldr	r0, [r7, #4]
 810e14c:	f000 f805 	bl	810e15a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 810e150:	4603      	mov	r3, r0
 810e152:	4618      	mov	r0, r3
 810e154:	3708      	adds	r7, #8
 810e156:	46bd      	mov	sp, r7
 810e158:	bd80      	pop	{r7, pc}

0810e15a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810e15a:	b480      	push	{r7}
 810e15c:	b083      	sub	sp, #12
 810e15e:	af00      	add	r7, sp, #0
 810e160:	6078      	str	r0, [r7, #4]
 810e162:	687b      	ldr	r3, [r7, #4]
 810e164:	4618      	mov	r0, r3
 810e166:	370c      	adds	r7, #12
 810e168:	46bd      	mov	sp, r7
 810e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e16e:	4770      	bx	lr

0810e170 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e170:	b480      	push	{r7}
 810e172:	b083      	sub	sp, #12
 810e174:	af00      	add	r7, sp, #0
 810e176:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e178:	687b      	ldr	r3, [r7, #4]
 810e17a:	4618      	mov	r0, r3
 810e17c:	370c      	adds	r7, #12
 810e17e:	46bd      	mov	sp, r7
 810e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e184:	4770      	bx	lr

0810e186 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
	: _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
 810e186:	b580      	push	{r7, lr}
 810e188:	b082      	sub	sp, #8
 810e18a:	af00      	add	r7, sp, #0
 810e18c:	6078      	str	r0, [r7, #4]
 810e18e:	6039      	str	r1, [r7, #0]
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 810e190:	6838      	ldr	r0, [r7, #0]
 810e192:	f7ff ffd6 	bl	810e142 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810e196:	4603      	mov	r3, r0
 810e198:	4618      	mov	r0, r3
 810e19a:	f7ff ffe9 	bl	810e170 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e19e:	4603      	mov	r3, r0
 810e1a0:	4619      	mov	r1, r3
 810e1a2:	6878      	ldr	r0, [r7, #4]
 810e1a4:	f000 f95a 	bl	810e45c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 810e1a8:	687b      	ldr	r3, [r7, #4]
 810e1aa:	4618      	mov	r0, r3
 810e1ac:	3708      	adds	r7, #8
 810e1ae:	46bd      	mov	sp, r7
 810e1b0:	bd80      	pop	{r7, pc}

0810e1b2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810e1b2:	b480      	push	{r7}
 810e1b4:	b083      	sub	sp, #12
 810e1b6:	af00      	add	r7, sp, #0
 810e1b8:	6078      	str	r0, [r7, #4]
 810e1ba:	687b      	ldr	r3, [r7, #4]
 810e1bc:	4618      	mov	r0, r3
 810e1be:	370c      	adds	r7, #12
 810e1c0:	46bd      	mov	sp, r7
 810e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1c6:	4770      	bx	lr

0810e1c8 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e1c8:	b580      	push	{r7, lr}
 810e1ca:	b082      	sub	sp, #8
 810e1cc:	af00      	add	r7, sp, #0
 810e1ce:	6078      	str	r0, [r7, #4]
 810e1d0:	6878      	ldr	r0, [r7, #4]
 810e1d2:	f000 f805 	bl	810e1e0 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 810e1d6:	4603      	mov	r3, r0
 810e1d8:	4618      	mov	r0, r3
 810e1da:	3708      	adds	r7, #8
 810e1dc:	46bd      	mov	sp, r7
 810e1de:	bd80      	pop	{r7, pc}

0810e1e0 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810e1e0:	b480      	push	{r7}
 810e1e2:	b083      	sub	sp, #12
 810e1e4:	af00      	add	r7, sp, #0
 810e1e6:	6078      	str	r0, [r7, #4]
 810e1e8:	687b      	ldr	r3, [r7, #4]
 810e1ea:	4618      	mov	r0, r3
 810e1ec:	370c      	adds	r7, #12
 810e1ee:	46bd      	mov	sp, r7
 810e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1f4:	4770      	bx	lr

0810e1f6 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810e1f6:	b480      	push	{r7}
 810e1f8:	b083      	sub	sp, #12
 810e1fa:	af00      	add	r7, sp, #0
 810e1fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e1fe:	687b      	ldr	r3, [r7, #4]
 810e200:	4618      	mov	r0, r3
 810e202:	370c      	adds	r7, #12
 810e204:	46bd      	mov	sp, r7
 810e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e20a:	4770      	bx	lr

0810e20c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e20c:	b480      	push	{r7}
 810e20e:	b083      	sub	sp, #12
 810e210:	af00      	add	r7, sp, #0
 810e212:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e214:	687b      	ldr	r3, [r7, #4]
 810e216:	4618      	mov	r0, r3
 810e218:	370c      	adds	r7, #12
 810e21a:	46bd      	mov	sp, r7
 810e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e220:	4770      	bx	lr

0810e222 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810e222:	b580      	push	{r7, lr}
 810e224:	b082      	sub	sp, #8
 810e226:	af00      	add	r7, sp, #0
 810e228:	6078      	str	r0, [r7, #4]
 810e22a:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810e22c:	6838      	ldr	r0, [r7, #0]
 810e22e:	f7ff ffc0 	bl	810e1b2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 810e232:	4603      	mov	r3, r0
 810e234:	4618      	mov	r0, r3
 810e236:	f7ff ffde 	bl	810e1f6 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 810e23a:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810e23c:	4619      	mov	r1, r3
 810e23e:	6878      	ldr	r0, [r7, #4]
 810e240:	f7ff ffa1 	bl	810e186 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 810e244:	6838      	ldr	r0, [r7, #0]
 810e246:	f7ff ffbf 	bl	810e1c8 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810e24a:	4603      	mov	r3, r0
 810e24c:	4618      	mov	r0, r3
 810e24e:	f7ff ffdd 	bl	810e20c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e252:	4603      	mov	r3, r0
 810e254:	4619      	mov	r1, r3
 810e256:	6878      	ldr	r0, [r7, #4]
 810e258:	f000 f90d 	bl	810e476 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	4618      	mov	r0, r3
 810e260:	3708      	adds	r7, #8
 810e262:	46bd      	mov	sp, r7
 810e264:	bd80      	pop	{r7, pc}

0810e266 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810e266:	b480      	push	{r7}
 810e268:	b083      	sub	sp, #12
 810e26a:	af00      	add	r7, sp, #0
 810e26c:	6078      	str	r0, [r7, #4]
 810e26e:	687b      	ldr	r3, [r7, #4]
 810e270:	4618      	mov	r0, r3
 810e272:	370c      	adds	r7, #12
 810e274:	46bd      	mov	sp, r7
 810e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e27a:	4770      	bx	lr

0810e27c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e27c:	b580      	push	{r7, lr}
 810e27e:	b082      	sub	sp, #8
 810e280:	af00      	add	r7, sp, #0
 810e282:	6078      	str	r0, [r7, #4]
 810e284:	6878      	ldr	r0, [r7, #4]
 810e286:	f000 f805 	bl	810e294 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 810e28a:	4603      	mov	r3, r0
 810e28c:	4618      	mov	r0, r3
 810e28e:	3708      	adds	r7, #8
 810e290:	46bd      	mov	sp, r7
 810e292:	bd80      	pop	{r7, pc}

0810e294 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810e294:	b480      	push	{r7}
 810e296:	b083      	sub	sp, #12
 810e298:	af00      	add	r7, sp, #0
 810e29a:	6078      	str	r0, [r7, #4]
 810e29c:	687b      	ldr	r3, [r7, #4]
 810e29e:	4618      	mov	r0, r3
 810e2a0:	370c      	adds	r7, #12
 810e2a2:	46bd      	mov	sp, r7
 810e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2a8:	4770      	bx	lr

0810e2aa <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 810e2aa:	b480      	push	{r7}
 810e2ac:	b083      	sub	sp, #12
 810e2ae:	af00      	add	r7, sp, #0
 810e2b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e2b2:	687b      	ldr	r3, [r7, #4]
 810e2b4:	4618      	mov	r0, r3
 810e2b6:	370c      	adds	r7, #12
 810e2b8:	46bd      	mov	sp, r7
 810e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2be:	4770      	bx	lr

0810e2c0 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e2c0:	b480      	push	{r7}
 810e2c2:	b083      	sub	sp, #12
 810e2c4:	af00      	add	r7, sp, #0
 810e2c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e2c8:	687b      	ldr	r3, [r7, #4]
 810e2ca:	4618      	mov	r0, r3
 810e2cc:	370c      	adds	r7, #12
 810e2ce:	46bd      	mov	sp, r7
 810e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2d4:	4770      	bx	lr

0810e2d6 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810e2d6:	b580      	push	{r7, lr}
 810e2d8:	b082      	sub	sp, #8
 810e2da:	af00      	add	r7, sp, #0
 810e2dc:	6078      	str	r0, [r7, #4]
 810e2de:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810e2e0:	6838      	ldr	r0, [r7, #0]
 810e2e2:	f7ff ffc0 	bl	810e266 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 810e2e6:	4603      	mov	r3, r0
 810e2e8:	4618      	mov	r0, r3
 810e2ea:	f7ff ffde 	bl	810e2aa <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 810e2ee:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810e2f0:	4619      	mov	r1, r3
 810e2f2:	6878      	ldr	r0, [r7, #4]
 810e2f4:	f7ff ff95 	bl	810e222 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 810e2f8:	6838      	ldr	r0, [r7, #0]
 810e2fa:	f7ff ffbf 	bl	810e27c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810e2fe:	4603      	mov	r3, r0
 810e300:	4618      	mov	r0, r3
 810e302:	f7ff ffdd 	bl	810e2c0 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e306:	4603      	mov	r3, r0
 810e308:	4619      	mov	r1, r3
 810e30a:	6878      	ldr	r0, [r7, #4]
 810e30c:	f000 f8c0 	bl	810e490 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 810e310:	687b      	ldr	r3, [r7, #4]
 810e312:	4618      	mov	r0, r3
 810e314:	3708      	adds	r7, #8
 810e316:	46bd      	mov	sp, r7
 810e318:	bd80      	pop	{r7, pc}

0810e31a <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 810e31a:	b580      	push	{r7, lr}
 810e31c:	b082      	sub	sp, #8
 810e31e:	af00      	add	r7, sp, #0
 810e320:	6078      	str	r0, [r7, #4]
 810e322:	6039      	str	r1, [r7, #0]
 810e324:	687b      	ldr	r3, [r7, #4]
 810e326:	683a      	ldr	r2, [r7, #0]
 810e328:	4611      	mov	r1, r2
 810e32a:	4618      	mov	r0, r3
 810e32c:	f000 f8eb 	bl	810e506 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 810e330:	687b      	ldr	r3, [r7, #4]
 810e332:	4618      	mov	r0, r3
 810e334:	3708      	adds	r7, #8
 810e336:	46bd      	mov	sp, r7
 810e338:	bd80      	pop	{r7, pc}

0810e33a <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 810e33a:	b590      	push	{r4, r7, lr}
 810e33c:	b083      	sub	sp, #12
 810e33e:	af00      	add	r7, sp, #0
 810e340:	6078      	str	r0, [r7, #4]
 810e342:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 810e344:	683b      	ldr	r3, [r7, #0]
 810e346:	4618      	mov	r0, r3
 810e348:	f000 f87d 	bl	810e446 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810e34c:	4602      	mov	r2, r0
 810e34e:	687b      	ldr	r3, [r7, #4]
 810e350:	e892 0003 	ldmia.w	r2, {r0, r1}
 810e354:	e883 0003 	stmia.w	r3, {r0, r1}
 810e358:	687b      	ldr	r3, [r7, #4]
 810e35a:	f103 0408 	add.w	r4, r3, #8
 810e35e:	683b      	ldr	r3, [r7, #0]
 810e360:	3308      	adds	r3, #8
 810e362:	4618      	mov	r0, r3
 810e364:	f7ff fee2 	bl	810e12c <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 810e368:	4603      	mov	r3, r0
 810e36a:	4619      	mov	r1, r3
 810e36c:	4620      	mov	r0, r4
 810e36e:	f7ff ffd4 	bl	810e31a <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 810e372:	687b      	ldr	r3, [r7, #4]
 810e374:	4618      	mov	r0, r3
 810e376:	370c      	adds	r7, #12
 810e378:	46bd      	mov	sp, r7
 810e37a:	bd90      	pop	{r4, r7, pc}

0810e37c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 810e37c:	b480      	push	{r7}
 810e37e:	b083      	sub	sp, #12
 810e380:	af00      	add	r7, sp, #0
 810e382:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e384:	687b      	ldr	r3, [r7, #4]
 810e386:	4618      	mov	r0, r3
 810e388:	370c      	adds	r7, #12
 810e38a:	46bd      	mov	sp, r7
 810e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e390:	4770      	bx	lr
	...

0810e394 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 810e394:	b590      	push	{r4, r7, lr}
 810e396:	b083      	sub	sp, #12
 810e398:	af00      	add	r7, sp, #0
 810e39a:	6078      	str	r0, [r7, #4]
 810e39c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 810e39e:	687b      	ldr	r3, [r7, #4]
 810e3a0:	4618      	mov	r0, r3
 810e3a2:	f7ff fada 	bl	810d95a <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 810e3a6:	6838      	ldr	r0, [r7, #0]
 810e3a8:	f000 f8d0 	bl	810e54c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 810e3ac:	4603      	mov	r3, r0
 810e3ae:	2b00      	cmp	r3, #0
 810e3b0:	d00e      	beq.n	810e3d0 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 810e3b2:	687c      	ldr	r4, [r7, #4]
 810e3b4:	6838      	ldr	r0, [r7, #0]
 810e3b6:	f7ff ffe1 	bl	810e37c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810e3ba:	4603      	mov	r3, r0
 810e3bc:	4619      	mov	r1, r3
 810e3be:	4620      	mov	r0, r4
 810e3c0:	f000 f8cf 	bl	810e562 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 810e3c4:	687b      	ldr	r3, [r7, #4]
 810e3c6:	4a05      	ldr	r2, [pc, #20]	; (810e3dc <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 810e3c8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 810e3ca:	687b      	ldr	r3, [r7, #4]
 810e3cc:	4a04      	ldr	r2, [pc, #16]	; (810e3e0 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 810e3ce:	609a      	str	r2, [r3, #8]
	  }
      }
 810e3d0:	687b      	ldr	r3, [r7, #4]
 810e3d2:	4618      	mov	r0, r3
 810e3d4:	370c      	adds	r7, #12
 810e3d6:	46bd      	mov	sp, r7
 810e3d8:	bd90      	pop	{r4, r7, pc}
 810e3da:	bf00      	nop
 810e3dc:	0810e5c9 	.word	0x0810e5c9
 810e3e0:	0810e609 	.word	0x0810e609

0810e3e4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 810e3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e3e8:	b086      	sub	sp, #24
 810e3ea:	af02      	add	r7, sp, #8
 810e3ec:	60f8      	str	r0, [r7, #12]
 810e3ee:	60b9      	str	r1, [r7, #8]
 810e3f0:	607a      	str	r2, [r7, #4]
 810e3f2:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 810e3f4:	68b8      	ldr	r0, [r7, #8]
 810e3f6:	f000 f826 	bl	810e446 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810e3fa:	4602      	mov	r2, r0
 810e3fc:	68fb      	ldr	r3, [r7, #12]
 810e3fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 810e402:	e883 0003 	stmia.w	r3, {r0, r1}
 810e406:	68fb      	ldr	r3, [r7, #12]
 810e408:	f103 0408 	add.w	r4, r3, #8
 810e40c:	6878      	ldr	r0, [r7, #4]
 810e40e:	f7ff fe38 	bl	810e082 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810e412:	4605      	mov	r5, r0
 810e414:	6838      	ldr	r0, [r7, #0]
 810e416:	f7ff fe3f 	bl	810e098 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e41a:	4606      	mov	r6, r0
 810e41c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e41e:	f7ff fe46 	bl	810e0ae <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e422:	4680      	mov	r8, r0
 810e424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810e426:	f7ff fe4d 	bl	810e0c4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e42a:	4603      	mov	r3, r0
 810e42c:	9300      	str	r3, [sp, #0]
 810e42e:	4643      	mov	r3, r8
 810e430:	4632      	mov	r2, r6
 810e432:	4629      	mov	r1, r5
 810e434:	4620      	mov	r0, r4
 810e436:	f000 f921 	bl	810e67c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 810e43a:	68fb      	ldr	r3, [r7, #12]
 810e43c:	4618      	mov	r0, r3
 810e43e:	3710      	adds	r7, #16
 810e440:	46bd      	mov	sp, r7
 810e442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810e446 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810e446:	b480      	push	{r7}
 810e448:	b083      	sub	sp, #12
 810e44a:	af00      	add	r7, sp, #0
 810e44c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e44e:	687b      	ldr	r3, [r7, #4]
 810e450:	4618      	mov	r0, r3
 810e452:	370c      	adds	r7, #12
 810e454:	46bd      	mov	sp, r7
 810e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e45a:	4770      	bx	lr

0810e45c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e45c:	b580      	push	{r7, lr}
 810e45e:	b082      	sub	sp, #8
 810e460:	af00      	add	r7, sp, #0
 810e462:	6078      	str	r0, [r7, #4]
 810e464:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810e466:	6838      	ldr	r0, [r7, #0]
 810e468:	f7ff fe82 	bl	810e170 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e46c:	687b      	ldr	r3, [r7, #4]
 810e46e:	4618      	mov	r0, r3
 810e470:	3708      	adds	r7, #8
 810e472:	46bd      	mov	sp, r7
 810e474:	bd80      	pop	{r7, pc}

0810e476 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e476:	b580      	push	{r7, lr}
 810e478:	b082      	sub	sp, #8
 810e47a:	af00      	add	r7, sp, #0
 810e47c:	6078      	str	r0, [r7, #4]
 810e47e:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810e480:	6838      	ldr	r0, [r7, #0]
 810e482:	f7ff fec3 	bl	810e20c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e486:	687b      	ldr	r3, [r7, #4]
 810e488:	4618      	mov	r0, r3
 810e48a:	3708      	adds	r7, #8
 810e48c:	46bd      	mov	sp, r7
 810e48e:	bd80      	pop	{r7, pc}

0810e490 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e490:	b580      	push	{r7, lr}
 810e492:	b082      	sub	sp, #8
 810e494:	af00      	add	r7, sp, #0
 810e496:	6078      	str	r0, [r7, #4]
 810e498:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810e49a:	6838      	ldr	r0, [r7, #0]
 810e49c:	f7ff ff10 	bl	810e2c0 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810e4a0:	687b      	ldr	r3, [r7, #4]
 810e4a2:	4618      	mov	r0, r3
 810e4a4:	3708      	adds	r7, #8
 810e4a6:	46bd      	mov	sp, r7
 810e4a8:	bd80      	pop	{r7, pc}

0810e4aa <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810e4aa:	b480      	push	{r7}
 810e4ac:	b083      	sub	sp, #12
 810e4ae:	af00      	add	r7, sp, #0
 810e4b0:	6078      	str	r0, [r7, #4]
 810e4b2:	687b      	ldr	r3, [r7, #4]
 810e4b4:	4618      	mov	r0, r3
 810e4b6:	370c      	adds	r7, #12
 810e4b8:	46bd      	mov	sp, r7
 810e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4be:	4770      	bx	lr

0810e4c0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e4c0:	b580      	push	{r7, lr}
 810e4c2:	b082      	sub	sp, #8
 810e4c4:	af00      	add	r7, sp, #0
 810e4c6:	6078      	str	r0, [r7, #4]
 810e4c8:	687b      	ldr	r3, [r7, #4]
 810e4ca:	4618      	mov	r0, r3
 810e4cc:	f000 f805 	bl	810e4da <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 810e4d0:	4603      	mov	r3, r0
 810e4d2:	4618      	mov	r0, r3
 810e4d4:	3708      	adds	r7, #8
 810e4d6:	46bd      	mov	sp, r7
 810e4d8:	bd80      	pop	{r7, pc}

0810e4da <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810e4da:	b480      	push	{r7}
 810e4dc:	b083      	sub	sp, #12
 810e4de:	af00      	add	r7, sp, #0
 810e4e0:	6078      	str	r0, [r7, #4]
 810e4e2:	687b      	ldr	r3, [r7, #4]
 810e4e4:	4618      	mov	r0, r3
 810e4e6:	370c      	adds	r7, #12
 810e4e8:	46bd      	mov	sp, r7
 810e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4ee:	4770      	bx	lr

0810e4f0 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810e4f0:	b480      	push	{r7}
 810e4f2:	b083      	sub	sp, #12
 810e4f4:	af00      	add	r7, sp, #0
 810e4f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e4f8:	687b      	ldr	r3, [r7, #4]
 810e4fa:	4618      	mov	r0, r3
 810e4fc:	370c      	adds	r7, #12
 810e4fe:	46bd      	mov	sp, r7
 810e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e504:	4770      	bx	lr

0810e506 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810e506:	b590      	push	{r4, r7, lr}
 810e508:	b083      	sub	sp, #12
 810e50a:	af00      	add	r7, sp, #0
 810e50c:	6078      	str	r0, [r7, #4]
 810e50e:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810e510:	6838      	ldr	r0, [r7, #0]
 810e512:	f7ff ffca 	bl	810e4aa <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 810e516:	4603      	mov	r3, r0
 810e518:	4618      	mov	r0, r3
 810e51a:	f7ff ffe9 	bl	810e4f0 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 810e51e:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810e520:	4619      	mov	r1, r3
 810e522:	6878      	ldr	r0, [r7, #4]
 810e524:	f7ff fed7 	bl	810e2d6 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 810e528:	687c      	ldr	r4, [r7, #4]
 810e52a:	6838      	ldr	r0, [r7, #0]
 810e52c:	f7ff ffc8 	bl	810e4c0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810e530:	4603      	mov	r3, r0
 810e532:	4618      	mov	r0, r3
 810e534:	f7ff fda5 	bl	810e082 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810e538:	4603      	mov	r3, r0
 810e53a:	4619      	mov	r1, r3
 810e53c:	4620      	mov	r0, r4
 810e53e:	f000 f8c3 	bl	810e6c8 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810e542:	687b      	ldr	r3, [r7, #4]
 810e544:	4618      	mov	r0, r3
 810e546:	370c      	adds	r7, #12
 810e548:	46bd      	mov	sp, r7
 810e54a:	bd90      	pop	{r4, r7, pc}

0810e54c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 810e54c:	b480      	push	{r7}
 810e54e:	b083      	sub	sp, #12
 810e550:	af00      	add	r7, sp, #0
 810e552:	6078      	str	r0, [r7, #4]
	  { return true; }
 810e554:	2301      	movs	r3, #1
 810e556:	4618      	mov	r0, r3
 810e558:	370c      	adds	r7, #12
 810e55a:	46bd      	mov	sp, r7
 810e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e560:	4770      	bx	lr

0810e562 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 810e562:	b590      	push	{r4, r7, lr}
 810e564:	b085      	sub	sp, #20
 810e566:	af00      	add	r7, sp, #0
 810e568:	6078      	str	r0, [r7, #4]
 810e56a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 810e56c:	6838      	ldr	r0, [r7, #0]
 810e56e:	f7ff ff05 	bl	810e37c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810e572:	4603      	mov	r3, r0
 810e574:	4622      	mov	r2, r4
 810e576:	4619      	mov	r1, r3
 810e578:	6878      	ldr	r0, [r7, #4]
 810e57a:	f000 f8b6 	bl	810e6ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 810e57e:	bf00      	nop
 810e580:	3714      	adds	r7, #20
 810e582:	46bd      	mov	sp, r7
 810e584:	bd90      	pop	{r4, r7, pc}

0810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e586:	b480      	push	{r7}
 810e588:	b083      	sub	sp, #12
 810e58a:	af00      	add	r7, sp, #0
 810e58c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e58e:	687b      	ldr	r3, [r7, #4]
 810e590:	4618      	mov	r0, r3
 810e592:	370c      	adds	r7, #12
 810e594:	46bd      	mov	sp, r7
 810e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e59a:	4770      	bx	lr

0810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e59c:	b480      	push	{r7}
 810e59e:	b083      	sub	sp, #12
 810e5a0:	af00      	add	r7, sp, #0
 810e5a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e5a4:	687b      	ldr	r3, [r7, #4]
 810e5a6:	4618      	mov	r0, r3
 810e5a8:	370c      	adds	r7, #12
 810e5aa:	46bd      	mov	sp, r7
 810e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5b0:	4770      	bx	lr

0810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e5b2:	b480      	push	{r7}
 810e5b4:	b083      	sub	sp, #12
 810e5b6:	af00      	add	r7, sp, #0
 810e5b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e5ba:	687b      	ldr	r3, [r7, #4]
 810e5bc:	4618      	mov	r0, r3
 810e5be:	370c      	adds	r7, #12
 810e5c0:	46bd      	mov	sp, r7
 810e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5c6:	4770      	bx	lr

0810e5c8 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 810e5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e5ca:	b085      	sub	sp, #20
 810e5cc:	af00      	add	r7, sp, #0
 810e5ce:	60f8      	str	r0, [r7, #12]
 810e5d0:	60b9      	str	r1, [r7, #8]
 810e5d2:	607a      	str	r2, [r7, #4]
 810e5d4:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 810e5d6:	68f8      	ldr	r0, [r7, #12]
 810e5d8:	f000 f8a3 	bl	810e722 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810e5dc:	4604      	mov	r4, r0
 810e5de:	68b8      	ldr	r0, [r7, #8]
 810e5e0:	f7ff ffd1 	bl	810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e5e4:	4605      	mov	r5, r0
 810e5e6:	6878      	ldr	r0, [r7, #4]
 810e5e8:	f7ff ffd8 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e5ec:	4606      	mov	r6, r0
 810e5ee:	6838      	ldr	r0, [r7, #0]
 810e5f0:	f7ff ffdf 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e5f4:	4603      	mov	r3, r0
 810e5f6:	4632      	mov	r2, r6
 810e5f8:	4629      	mov	r1, r5
 810e5fa:	4620      	mov	r0, r4
 810e5fc:	f000 f9a9 	bl	810e952 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 810e600:	bf00      	nop
 810e602:	3714      	adds	r7, #20
 810e604:	46bd      	mov	sp, r7
 810e606:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810e608 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810e608:	b5b0      	push	{r4, r5, r7, lr}
 810e60a:	b086      	sub	sp, #24
 810e60c:	af00      	add	r7, sp, #0
 810e60e:	60f8      	str	r0, [r7, #12]
 810e610:	60b9      	str	r1, [r7, #8]
 810e612:	4613      	mov	r3, r2
 810e614:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810e616:	79fb      	ldrb	r3, [r7, #7]
 810e618:	2b03      	cmp	r3, #3
 810e61a:	d827      	bhi.n	810e66c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 810e61c:	a201      	add	r2, pc, #4	; (adr r2, 810e624 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 810e61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e622:	bf00      	nop
 810e624:	0810e635 	.word	0x0810e635
 810e628:	0810e643 	.word	0x0810e643
 810e62c:	0810e657 	.word	0x0810e657
 810e630:	0810e663 	.word	0x0810e663
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 810e634:	68f8      	ldr	r0, [r7, #12]
 810e636:	f000 f9af 	bl	810e998 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810e63a:	4602      	mov	r2, r0
 810e63c:	4b0e      	ldr	r3, [pc, #56]	; (810e678 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 810e63e:	6013      	str	r3, [r2, #0]
	      break;
 810e640:	e014      	b.n	810e66c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810e642:	68f8      	ldr	r0, [r7, #12]
 810e644:	f000 f9b4 	bl	810e9b0 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810e648:	4604      	mov	r4, r0
 810e64a:	68b8      	ldr	r0, [r7, #8]
 810e64c:	f000 f869 	bl	810e722 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810e650:	4603      	mov	r3, r0
 810e652:	6023      	str	r3, [r4, #0]
	      break;
 810e654:	e00a      	b.n	810e66c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 810e656:	462a      	mov	r2, r5
 810e658:	68b9      	ldr	r1, [r7, #8]
 810e65a:	68f8      	ldr	r0, [r7, #12]
 810e65c:	f000 f9b4 	bl	810e9c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 810e660:	e004      	b.n	810e66c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 810e662:	4621      	mov	r1, r4
 810e664:	68f8      	ldr	r0, [r7, #12]
 810e666:	f000 f9cd 	bl	810ea04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 810e66a:	bf00      	nop
	  return false;
 810e66c:	2300      	movs	r3, #0
	}
 810e66e:	4618      	mov	r0, r3
 810e670:	3718      	adds	r7, #24
 810e672:	46bd      	mov	sp, r7
 810e674:	bdb0      	pop	{r4, r5, r7, pc}
 810e676:	bf00      	nop
 810e678:	08115878 	.word	0x08115878

0810e67c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e680:	b086      	sub	sp, #24
 810e682:	af02      	add	r7, sp, #8
 810e684:	60f8      	str	r0, [r7, #12]
 810e686:	60b9      	str	r1, [r7, #8]
 810e688:	607a      	str	r2, [r7, #4]
 810e68a:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810e68c:	68fc      	ldr	r4, [r7, #12]
 810e68e:	68b8      	ldr	r0, [r7, #8]
 810e690:	f7ff fcf7 	bl	810e082 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810e694:	4605      	mov	r5, r0
 810e696:	6878      	ldr	r0, [r7, #4]
 810e698:	f7ff fcfe 	bl	810e098 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e69c:	4606      	mov	r6, r0
 810e69e:	6838      	ldr	r0, [r7, #0]
 810e6a0:	f7ff fd05 	bl	810e0ae <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e6a4:	4680      	mov	r8, r0
 810e6a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e6a8:	f7ff fd0c 	bl	810e0c4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e6ac:	4603      	mov	r3, r0
 810e6ae:	9300      	str	r3, [sp, #0]
 810e6b0:	4643      	mov	r3, r8
 810e6b2:	4632      	mov	r2, r6
 810e6b4:	4629      	mov	r1, r5
 810e6b6:	4620      	mov	r0, r4
 810e6b8:	f000 f9b6 	bl	810ea28 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 810e6bc:	68fb      	ldr	r3, [r7, #12]
 810e6be:	4618      	mov	r0, r3
 810e6c0:	3710      	adds	r7, #16
 810e6c2:	46bd      	mov	sp, r7
 810e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810e6c8 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e6c8:	b580      	push	{r7, lr}
 810e6ca:	b082      	sub	sp, #8
 810e6cc:	af00      	add	r7, sp, #0
 810e6ce:	6078      	str	r0, [r7, #4]
 810e6d0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810e6d2:	6838      	ldr	r0, [r7, #0]
 810e6d4:	f7ff fcd5 	bl	810e082 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810e6d8:	4603      	mov	r3, r0
 810e6da:	681a      	ldr	r2, [r3, #0]
 810e6dc:	687b      	ldr	r3, [r7, #4]
 810e6de:	601a      	str	r2, [r3, #0]
 810e6e0:	687b      	ldr	r3, [r7, #4]
 810e6e2:	4618      	mov	r0, r3
 810e6e4:	3708      	adds	r7, #8
 810e6e6:	46bd      	mov	sp, r7
 810e6e8:	bd80      	pop	{r7, pc}

0810e6ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 810e6ea:	b5b0      	push	{r4, r5, r7, lr}
 810e6ec:	b084      	sub	sp, #16
 810e6ee:	af00      	add	r7, sp, #0
 810e6f0:	60f8      	str	r0, [r7, #12]
 810e6f2:	60b9      	str	r1, [r7, #8]
 810e6f4:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 810e6f6:	68b8      	ldr	r0, [r7, #8]
 810e6f8:	f7ff fe40 	bl	810e37c <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810e6fc:	4605      	mov	r5, r0
 810e6fe:	200c      	movs	r0, #12
 810e700:	f7fd fd3c 	bl	810c17c <_Znwj>
 810e704:	4603      	mov	r3, r0
 810e706:	461c      	mov	r4, r3
 810e708:	4629      	mov	r1, r5
 810e70a:	4620      	mov	r0, r4
 810e70c:	f7ff fe15 	bl	810e33a <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 810e710:	68f8      	ldr	r0, [r7, #12]
 810e712:	f000 f94d 	bl	810e9b0 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810e716:	4603      	mov	r3, r0
 810e718:	601c      	str	r4, [r3, #0]
 810e71a:	bf00      	nop
 810e71c:	3710      	adds	r7, #16
 810e71e:	46bd      	mov	sp, r7
 810e720:	bdb0      	pop	{r4, r5, r7, pc}

0810e722 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 810e722:	b580      	push	{r7, lr}
 810e724:	b084      	sub	sp, #16
 810e726:	af00      	add	r7, sp, #0
 810e728:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 810e72a:	6878      	ldr	r0, [r7, #4]
 810e72c:	f000 f9a2 	bl	810ea74 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810e730:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 810e732:	681b      	ldr	r3, [r3, #0]
 810e734:	60fb      	str	r3, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 810e736:	68fb      	ldr	r3, [r7, #12]
	}
 810e738:	4618      	mov	r0, r3
 810e73a:	3710      	adds	r7, #16
 810e73c:	46bd      	mov	sp, r7
 810e73e:	bd80      	pop	{r7, pc}

0810e740 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810e740:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e742:	b085      	sub	sp, #20
 810e744:	af00      	add	r7, sp, #0
 810e746:	60f8      	str	r0, [r7, #12]
 810e748:	60b9      	str	r1, [r7, #8]
 810e74a:	607a      	str	r2, [r7, #4]
 810e74c:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810e74e:	68fc      	ldr	r4, [r7, #12]
 810e750:	68b8      	ldr	r0, [r7, #8]
 810e752:	f7ff ff18 	bl	810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e756:	4605      	mov	r5, r0
 810e758:	6878      	ldr	r0, [r7, #4]
 810e75a:	f7ff ff1f 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e75e:	4606      	mov	r6, r0
 810e760:	6838      	ldr	r0, [r7, #0]
 810e762:	f7ff ff26 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e766:	4603      	mov	r3, r0
 810e768:	4632      	mov	r2, r6
 810e76a:	4629      	mov	r1, r5
 810e76c:	4620      	mov	r0, r4
 810e76e:	f000 f805 	bl	810e77c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 810e772:	68fb      	ldr	r3, [r7, #12]
 810e774:	4618      	mov	r0, r3
 810e776:	3714      	adds	r7, #20
 810e778:	46bd      	mov	sp, r7
 810e77a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810e77c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810e77c:	b5b0      	push	{r4, r5, r7, lr}
 810e77e:	b084      	sub	sp, #16
 810e780:	af00      	add	r7, sp, #0
 810e782:	60f8      	str	r0, [r7, #12]
 810e784:	60b9      	str	r1, [r7, #8]
 810e786:	607a      	str	r2, [r7, #4]
 810e788:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810e78a:	68fc      	ldr	r4, [r7, #12]
 810e78c:	6878      	ldr	r0, [r7, #4]
 810e78e:	f7ff ff05 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e792:	4605      	mov	r5, r0
 810e794:	6838      	ldr	r0, [r7, #0]
 810e796:	f7ff ff0c 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e79a:	4603      	mov	r3, r0
 810e79c:	461a      	mov	r2, r3
 810e79e:	4629      	mov	r1, r5
 810e7a0:	4620      	mov	r0, r4
 810e7a2:	f000 f810 	bl	810e7c6 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 810e7a6:	68fb      	ldr	r3, [r7, #12]
 810e7a8:	f103 0408 	add.w	r4, r3, #8
 810e7ac:	68b8      	ldr	r0, [r7, #8]
 810e7ae:	f7ff feea 	bl	810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e7b2:	4603      	mov	r3, r0
 810e7b4:	4619      	mov	r1, r3
 810e7b6:	4620      	mov	r0, r4
 810e7b8:	f000 f856 	bl	810e868 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 810e7bc:	68fb      	ldr	r3, [r7, #12]
 810e7be:	4618      	mov	r0, r3
 810e7c0:	3710      	adds	r7, #16
 810e7c2:	46bd      	mov	sp, r7
 810e7c4:	bdb0      	pop	{r4, r5, r7, pc}

0810e7c6 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810e7c6:	b590      	push	{r4, r7, lr}
 810e7c8:	b085      	sub	sp, #20
 810e7ca:	af00      	add	r7, sp, #0
 810e7cc:	60f8      	str	r0, [r7, #12]
 810e7ce:	60b9      	str	r1, [r7, #8]
 810e7d0:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 810e7d2:	68fc      	ldr	r4, [r7, #12]
 810e7d4:	6878      	ldr	r0, [r7, #4]
 810e7d6:	f7ff feec 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e7da:	4603      	mov	r3, r0
 810e7dc:	4619      	mov	r1, r3
 810e7de:	4620      	mov	r0, r4
 810e7e0:	f000 f80f 	bl	810e802 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 810e7e4:	68fb      	ldr	r3, [r7, #12]
 810e7e6:	1d1c      	adds	r4, r3, #4
 810e7e8:	68b8      	ldr	r0, [r7, #8]
 810e7ea:	f7ff fed7 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e7ee:	4603      	mov	r3, r0
 810e7f0:	4619      	mov	r1, r3
 810e7f2:	4620      	mov	r0, r4
 810e7f4:	f000 f828 	bl	810e848 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 810e7f8:	68fb      	ldr	r3, [r7, #12]
 810e7fa:	4618      	mov	r0, r3
 810e7fc:	3714      	adds	r7, #20
 810e7fe:	46bd      	mov	sp, r7
 810e800:	bd90      	pop	{r4, r7, pc}

0810e802 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 810e802:	b590      	push	{r4, r7, lr}
 810e804:	b083      	sub	sp, #12
 810e806:	af00      	add	r7, sp, #0
 810e808:	6078      	str	r0, [r7, #4]
 810e80a:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 810e80c:	687c      	ldr	r4, [r7, #4]
 810e80e:	6838      	ldr	r0, [r7, #0]
 810e810:	f7ff fecf 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e814:	4603      	mov	r3, r0
 810e816:	4619      	mov	r1, r3
 810e818:	4620      	mov	r0, r4
 810e81a:	f000 f805 	bl	810e828 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 810e81e:	687b      	ldr	r3, [r7, #4]
 810e820:	4618      	mov	r0, r3
 810e822:	370c      	adds	r7, #12
 810e824:	46bd      	mov	sp, r7
 810e826:	bd90      	pop	{r4, r7, pc}

0810e828 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e828:	b580      	push	{r7, lr}
 810e82a:	b082      	sub	sp, #8
 810e82c:	af00      	add	r7, sp, #0
 810e82e:	6078      	str	r0, [r7, #4]
 810e830:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810e832:	6838      	ldr	r0, [r7, #0]
 810e834:	f7ff febd 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e838:	4602      	mov	r2, r0
 810e83a:	687b      	ldr	r3, [r7, #4]
 810e83c:	601a      	str	r2, [r3, #0]
 810e83e:	687b      	ldr	r3, [r7, #4]
 810e840:	4618      	mov	r0, r3
 810e842:	3708      	adds	r7, #8
 810e844:	46bd      	mov	sp, r7
 810e846:	bd80      	pop	{r7, pc}

0810e848 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e848:	b580      	push	{r7, lr}
 810e84a:	b082      	sub	sp, #8
 810e84c:	af00      	add	r7, sp, #0
 810e84e:	6078      	str	r0, [r7, #4]
 810e850:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810e852:	6838      	ldr	r0, [r7, #0]
 810e854:	f7ff fea2 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e858:	4602      	mov	r2, r0
 810e85a:	687b      	ldr	r3, [r7, #4]
 810e85c:	601a      	str	r2, [r3, #0]
 810e85e:	687b      	ldr	r3, [r7, #4]
 810e860:	4618      	mov	r0, r3
 810e862:	3708      	adds	r7, #8
 810e864:	46bd      	mov	sp, r7
 810e866:	bd80      	pop	{r7, pc}

0810e868 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810e868:	b580      	push	{r7, lr}
 810e86a:	b082      	sub	sp, #8
 810e86c:	af00      	add	r7, sp, #0
 810e86e:	6078      	str	r0, [r7, #4]
 810e870:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810e872:	6838      	ldr	r0, [r7, #0]
 810e874:	f7ff fe87 	bl	810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e878:	4602      	mov	r2, r0
 810e87a:	687b      	ldr	r3, [r7, #4]
 810e87c:	601a      	str	r2, [r3, #0]
 810e87e:	687b      	ldr	r3, [r7, #4]
 810e880:	4618      	mov	r0, r3
 810e882:	3708      	adds	r7, #8
 810e884:	46bd      	mov	sp, r7
 810e886:	bd80      	pop	{r7, pc}

0810e888 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e888:	b580      	push	{r7, lr}
 810e88a:	b082      	sub	sp, #8
 810e88c:	af00      	add	r7, sp, #0
 810e88e:	6078      	str	r0, [r7, #4]
 810e890:	687b      	ldr	r3, [r7, #4]
 810e892:	4618      	mov	r0, r3
 810e894:	f000 f805 	bl	810e8a2 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 810e898:	4603      	mov	r3, r0
 810e89a:	4618      	mov	r0, r3
 810e89c:	3708      	adds	r7, #8
 810e89e:	46bd      	mov	sp, r7
 810e8a0:	bd80      	pop	{r7, pc}

0810e8a2 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810e8a2:	b480      	push	{r7}
 810e8a4:	b083      	sub	sp, #12
 810e8a6:	af00      	add	r7, sp, #0
 810e8a8:	6078      	str	r0, [r7, #4]
 810e8aa:	687b      	ldr	r3, [r7, #4]
 810e8ac:	681b      	ldr	r3, [r3, #0]
 810e8ae:	4618      	mov	r0, r3
 810e8b0:	370c      	adds	r7, #12
 810e8b2:	46bd      	mov	sp, r7
 810e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8b8:	4770      	bx	lr

0810e8ba <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e8ba:	b480      	push	{r7}
 810e8bc:	b083      	sub	sp, #12
 810e8be:	af00      	add	r7, sp, #0
 810e8c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e8c2:	687b      	ldr	r3, [r7, #4]
 810e8c4:	4618      	mov	r0, r3
 810e8c6:	370c      	adds	r7, #12
 810e8c8:	46bd      	mov	sp, r7
 810e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8ce:	4770      	bx	lr

0810e8d0 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e8d0:	b580      	push	{r7, lr}
 810e8d2:	b082      	sub	sp, #8
 810e8d4:	af00      	add	r7, sp, #0
 810e8d6:	6078      	str	r0, [r7, #4]
 810e8d8:	687b      	ldr	r3, [r7, #4]
 810e8da:	3304      	adds	r3, #4
 810e8dc:	4618      	mov	r0, r3
 810e8de:	f000 f805 	bl	810e8ec <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 810e8e2:	4603      	mov	r3, r0
 810e8e4:	4618      	mov	r0, r3
 810e8e6:	3708      	adds	r7, #8
 810e8e8:	46bd      	mov	sp, r7
 810e8ea:	bd80      	pop	{r7, pc}

0810e8ec <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810e8ec:	b480      	push	{r7}
 810e8ee:	b083      	sub	sp, #12
 810e8f0:	af00      	add	r7, sp, #0
 810e8f2:	6078      	str	r0, [r7, #4]
 810e8f4:	687b      	ldr	r3, [r7, #4]
 810e8f6:	681b      	ldr	r3, [r3, #0]
 810e8f8:	4618      	mov	r0, r3
 810e8fa:	370c      	adds	r7, #12
 810e8fc:	46bd      	mov	sp, r7
 810e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e902:	4770      	bx	lr

0810e904 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e904:	b480      	push	{r7}
 810e906:	b083      	sub	sp, #12
 810e908:	af00      	add	r7, sp, #0
 810e90a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e90c:	687b      	ldr	r3, [r7, #4]
 810e90e:	4618      	mov	r0, r3
 810e910:	370c      	adds	r7, #12
 810e912:	46bd      	mov	sp, r7
 810e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e918:	4770      	bx	lr

0810e91a <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 810e91a:	b5b0      	push	{r4, r5, r7, lr}
 810e91c:	b084      	sub	sp, #16
 810e91e:	af00      	add	r7, sp, #0
 810e920:	60f8      	str	r0, [r7, #12]
 810e922:	60b9      	str	r1, [r7, #8]
 810e924:	607a      	str	r2, [r7, #4]
 810e926:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 810e928:	68b8      	ldr	r0, [r7, #8]
 810e92a:	f7ff fe2c 	bl	810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e92e:	4604      	mov	r4, r0
 810e930:	6878      	ldr	r0, [r7, #4]
 810e932:	f7ff fe33 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e936:	4605      	mov	r5, r0
 810e938:	6838      	ldr	r0, [r7, #0]
 810e93a:	f7ff fe3a 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e93e:	4603      	mov	r3, r0
 810e940:	462a      	mov	r2, r5
 810e942:	4621      	mov	r1, r4
 810e944:	68f8      	ldr	r0, [r7, #12]
 810e946:	f7ff fefb 	bl	810e740 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 810e94a:	68f8      	ldr	r0, [r7, #12]
 810e94c:	3710      	adds	r7, #16
 810e94e:	46bd      	mov	sp, r7
 810e950:	bdb0      	pop	{r4, r5, r7, pc}

0810e952 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 810e952:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e954:	b089      	sub	sp, #36	; 0x24
 810e956:	af00      	add	r7, sp, #0
 810e958:	60f8      	str	r0, [r7, #12]
 810e95a:	60b9      	str	r1, [r7, #8]
 810e95c:	607a      	str	r2, [r7, #4]
 810e95e:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 810e960:	68b8      	ldr	r0, [r7, #8]
 810e962:	f7ff fe10 	bl	810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e966:	4604      	mov	r4, r0
 810e968:	6878      	ldr	r0, [r7, #4]
 810e96a:	f7ff fe17 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e96e:	4605      	mov	r5, r0
 810e970:	6838      	ldr	r0, [r7, #0]
 810e972:	f7ff fe1e 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e976:	4603      	mov	r3, r0
 810e978:	f107 0010 	add.w	r0, r7, #16
 810e97c:	462a      	mov	r2, r5
 810e97e:	4621      	mov	r1, r4
 810e980:	f7ff ffcb 	bl	810e91a <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 810e984:	f107 0310 	add.w	r3, r7, #16
 810e988:	4632      	mov	r2, r6
 810e98a:	4619      	mov	r1, r3
 810e98c:	68f8      	ldr	r0, [r7, #12]
 810e98e:	f000 f8a2 	bl	810ead6 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 810e992:	3724      	adds	r7, #36	; 0x24
 810e994:	46bd      	mov	sp, r7
 810e996:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810e998 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 810e998:	b580      	push	{r7, lr}
 810e99a:	b082      	sub	sp, #8
 810e99c:	af00      	add	r7, sp, #0
 810e99e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810e9a0:	6878      	ldr	r0, [r7, #4]
 810e9a2:	f7ff fa46 	bl	810de32 <_ZNSt9_Any_data9_M_accessEv>
 810e9a6:	4603      	mov	r3, r0
 810e9a8:	4618      	mov	r0, r3
 810e9aa:	3708      	adds	r7, #8
 810e9ac:	46bd      	mov	sp, r7
 810e9ae:	bd80      	pop	{r7, pc}

0810e9b0 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 810e9b0:	b580      	push	{r7, lr}
 810e9b2:	b082      	sub	sp, #8
 810e9b4:	af00      	add	r7, sp, #0
 810e9b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810e9b8:	6878      	ldr	r0, [r7, #4]
 810e9ba:	f7ff fa3a 	bl	810de32 <_ZNSt9_Any_data9_M_accessEv>
 810e9be:	4603      	mov	r3, r0
 810e9c0:	4618      	mov	r0, r3
 810e9c2:	3708      	adds	r7, #8
 810e9c4:	46bd      	mov	sp, r7
 810e9c6:	bd80      	pop	{r7, pc}

0810e9c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 810e9c8:	b5b0      	push	{r4, r5, r7, lr}
 810e9ca:	b084      	sub	sp, #16
 810e9cc:	af00      	add	r7, sp, #0
 810e9ce:	60f8      	str	r0, [r7, #12]
 810e9d0:	60b9      	str	r1, [r7, #8]
 810e9d2:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<_Functor*>());
 810e9d4:	68b8      	ldr	r0, [r7, #8]
 810e9d6:	f000 f84d 	bl	810ea74 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810e9da:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 810e9dc:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<_Functor*>());
 810e9de:	200c      	movs	r0, #12
 810e9e0:	f7fd fbcc 	bl	810c17c <_Znwj>
 810e9e4:	4603      	mov	r3, r0
 810e9e6:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 810e9e8:	4623      	mov	r3, r4
 810e9ea:	462a      	mov	r2, r5
 810e9ec:	ca07      	ldmia	r2, {r0, r1, r2}
 810e9ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810e9f2:	68f8      	ldr	r0, [r7, #12]
 810e9f4:	f7ff ffdc 	bl	810e9b0 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810e9f8:	4603      	mov	r3, r0
 810e9fa:	601c      	str	r4, [r3, #0]
	}
 810e9fc:	bf00      	nop
 810e9fe:	3710      	adds	r7, #16
 810ea00:	46bd      	mov	sp, r7
 810ea02:	bdb0      	pop	{r4, r5, r7, pc}

0810ea04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 810ea04:	b580      	push	{r7, lr}
 810ea06:	b082      	sub	sp, #8
 810ea08:	af00      	add	r7, sp, #0
 810ea0a:	6078      	str	r0, [r7, #4]
 810ea0c:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 810ea0e:	6878      	ldr	r0, [r7, #4]
 810ea10:	f7ff ffce 	bl	810e9b0 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810ea14:	4603      	mov	r3, r0
 810ea16:	681b      	ldr	r3, [r3, #0]
 810ea18:	210c      	movs	r1, #12
 810ea1a:	4618      	mov	r0, r3
 810ea1c:	f003 f965 	bl	8111cea <_ZdlPvj>
	}
 810ea20:	bf00      	nop
 810ea22:	3708      	adds	r7, #8
 810ea24:	46bd      	mov	sp, r7
 810ea26:	bd80      	pop	{r7, pc}

0810ea28 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810ea28:	b5b0      	push	{r4, r5, r7, lr}
 810ea2a:	b084      	sub	sp, #16
 810ea2c:	af00      	add	r7, sp, #0
 810ea2e:	60f8      	str	r0, [r7, #12]
 810ea30:	60b9      	str	r1, [r7, #8]
 810ea32:	607a      	str	r2, [r7, #4]
 810ea34:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810ea36:	6878      	ldr	r0, [r7, #4]
 810ea38:	f7ff fb2e 	bl	810e098 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810ea3c:	4604      	mov	r4, r0
 810ea3e:	6838      	ldr	r0, [r7, #0]
 810ea40:	f7ff fb35 	bl	810e0ae <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810ea44:	4605      	mov	r5, r0
 810ea46:	6a38      	ldr	r0, [r7, #32]
 810ea48:	f7ff fb3c 	bl	810e0c4 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810ea4c:	4603      	mov	r3, r0
 810ea4e:	462a      	mov	r2, r5
 810ea50:	4621      	mov	r1, r4
 810ea52:	68f8      	ldr	r0, [r7, #12]
 810ea54:	f000 f887 	bl	810eb66 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 810ea58:	68fc      	ldr	r4, [r7, #12]
 810ea5a:	68b8      	ldr	r0, [r7, #8]
 810ea5c:	f7ff fb11 	bl	810e082 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810ea60:	4603      	mov	r3, r0
 810ea62:	4619      	mov	r1, r3
 810ea64:	4620      	mov	r0, r4
 810ea66:	f7ff fe2f 	bl	810e6c8 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810ea6a:	68fb      	ldr	r3, [r7, #12]
 810ea6c:	4618      	mov	r0, r3
 810ea6e:	3710      	adds	r7, #16
 810ea70:	46bd      	mov	sp, r7
 810ea72:	bdb0      	pop	{r4, r5, r7, pc}

0810ea74 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 810ea74:	b580      	push	{r7, lr}
 810ea76:	b082      	sub	sp, #8
 810ea78:	af00      	add	r7, sp, #0
 810ea7a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 810ea7c:	6878      	ldr	r0, [r7, #4]
 810ea7e:	f7ff f9e3 	bl	810de48 <_ZNKSt9_Any_data9_M_accessEv>
 810ea82:	4603      	mov	r3, r0
 810ea84:	4618      	mov	r0, r3
 810ea86:	3708      	adds	r7, #8
 810ea88:	46bd      	mov	sp, r7
 810ea8a:	bd80      	pop	{r7, pc}

0810ea8c <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810ea8c:	b580      	push	{r7, lr}
 810ea8e:	b082      	sub	sp, #8
 810ea90:	af00      	add	r7, sp, #0
 810ea92:	6078      	str	r0, [r7, #4]
 810ea94:	687b      	ldr	r3, [r7, #4]
 810ea96:	3308      	adds	r3, #8
 810ea98:	4618      	mov	r0, r3
 810ea9a:	f000 f805 	bl	810eaa8 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 810ea9e:	4603      	mov	r3, r0
 810eaa0:	4618      	mov	r0, r3
 810eaa2:	3708      	adds	r7, #8
 810eaa4:	46bd      	mov	sp, r7
 810eaa6:	bd80      	pop	{r7, pc}

0810eaa8 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810eaa8:	b480      	push	{r7}
 810eaaa:	b083      	sub	sp, #12
 810eaac:	af00      	add	r7, sp, #0
 810eaae:	6078      	str	r0, [r7, #4]
 810eab0:	687b      	ldr	r3, [r7, #4]
 810eab2:	681b      	ldr	r3, [r3, #0]
 810eab4:	4618      	mov	r0, r3
 810eab6:	370c      	adds	r7, #12
 810eab8:	46bd      	mov	sp, r7
 810eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eabe:	4770      	bx	lr

0810eac0 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810eac0:	b480      	push	{r7}
 810eac2:	b083      	sub	sp, #12
 810eac4:	af00      	add	r7, sp, #0
 810eac6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810eac8:	687b      	ldr	r3, [r7, #4]
 810eaca:	4618      	mov	r0, r3
 810eacc:	370c      	adds	r7, #12
 810eace:	46bd      	mov	sp, r7
 810ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ead4:	4770      	bx	lr

0810ead6 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 810ead6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810eada:	b08a      	sub	sp, #40	; 0x28
 810eadc:	af02      	add	r7, sp, #8
 810eade:	60f8      	str	r0, [r7, #12]
 810eae0:	60b9      	str	r1, [r7, #8]
 810eae2:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 810eae4:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810eae6:	68fb      	ldr	r3, [r7, #12]
 810eae8:	3308      	adds	r3, #8
 810eaea:	4618      	mov	r0, r3
 810eaec:	f000 f850 	bl	810eb90 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810eaf0:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810eaf2:	f107 0310 	add.w	r3, r7, #16
 810eaf6:	68ba      	ldr	r2, [r7, #8]
 810eaf8:	4618      	mov	r0, r3
 810eafa:	f000 f856 	bl	810ebaa <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 810eafe:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810eb00:	68fb      	ldr	r3, [r7, #12]
 810eb02:	3308      	adds	r3, #8
 810eb04:	4618      	mov	r0, r3
 810eb06:	f000 f85e 	bl	810ebc6 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810eb0a:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810eb0c:	f107 0314 	add.w	r3, r7, #20
 810eb10:	68ba      	ldr	r2, [r7, #8]
 810eb12:	4618      	mov	r0, r3
 810eb14:	f000 f86e 	bl	810ebf4 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 810eb18:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810eb1a:	68fb      	ldr	r3, [r7, #12]
 810eb1c:	3308      	adds	r3, #8
 810eb1e:	4618      	mov	r0, r3
 810eb20:	f000 f87a 	bl	810ec18 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810eb24:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810eb26:	f107 0318 	add.w	r3, r7, #24
 810eb2a:	68ba      	ldr	r2, [r7, #8]
 810eb2c:	4618      	mov	r0, r3
 810eb2e:	f000 f87f 	bl	810ec30 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 810eb32:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810eb34:	68fb      	ldr	r3, [r7, #12]
 810eb36:	3308      	adds	r3, #8
 810eb38:	4618      	mov	r0, r3
 810eb3a:	f000 f88b 	bl	810ec54 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810eb3e:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810eb40:	f107 031c 	add.w	r3, r7, #28
 810eb44:	68ba      	ldr	r2, [r7, #8]
 810eb46:	4618      	mov	r0, r3
 810eb48:	f000 f890 	bl	810ec6c <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 810eb4c:	4603      	mov	r3, r0
 810eb4e:	9300      	str	r3, [sp, #0]
 810eb50:	4643      	mov	r3, r8
 810eb52:	4632      	mov	r2, r6
 810eb54:	4629      	mov	r1, r5
 810eb56:	4620      	mov	r0, r4
 810eb58:	f000 f8b0 	bl	810ecbc <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 810eb5c:	bf00      	nop
	}
 810eb5e:	3720      	adds	r7, #32
 810eb60:	46bd      	mov	sp, r7
 810eb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810eb66 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810eb66:	b580      	push	{r7, lr}
 810eb68:	b084      	sub	sp, #16
 810eb6a:	af00      	add	r7, sp, #0
 810eb6c:	60f8      	str	r0, [r7, #12]
 810eb6e:	60b9      	str	r1, [r7, #8]
 810eb70:	607a      	str	r2, [r7, #4]
 810eb72:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 810eb74:	683a      	ldr	r2, [r7, #0]
 810eb76:	6879      	ldr	r1, [r7, #4]
 810eb78:	68f8      	ldr	r0, [r7, #12]
 810eb7a:	f000 f8c8 	bl	810ed0e <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 810eb7e:	68b9      	ldr	r1, [r7, #8]
 810eb80:	68f8      	ldr	r0, [r7, #12]
 810eb82:	f000 f8d7 	bl	810ed34 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 810eb86:	68fb      	ldr	r3, [r7, #12]
 810eb88:	4618      	mov	r0, r3
 810eb8a:	3710      	adds	r7, #16
 810eb8c:	46bd      	mov	sp, r7
 810eb8e:	bd80      	pop	{r7, pc}

0810eb90 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810eb90:	b580      	push	{r7, lr}
 810eb92:	b082      	sub	sp, #8
 810eb94:	af00      	add	r7, sp, #0
 810eb96:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810eb98:	687b      	ldr	r3, [r7, #4]
 810eb9a:	4618      	mov	r0, r3
 810eb9c:	f000 f8d6 	bl	810ed4c <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 810eba0:	4603      	mov	r3, r0
 810eba2:	4618      	mov	r0, r3
 810eba4:	3708      	adds	r7, #8
 810eba6:	46bd      	mov	sp, r7
 810eba8:	bd80      	pop	{r7, pc}

0810ebaa <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 810ebaa:	b580      	push	{r7, lr}
 810ebac:	b084      	sub	sp, #16
 810ebae:	af00      	add	r7, sp, #0
 810ebb0:	60f8      	str	r0, [r7, #12]
 810ebb2:	60b9      	str	r1, [r7, #8]
 810ebb4:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 810ebb6:	68b8      	ldr	r0, [r7, #8]
 810ebb8:	f000 f875 	bl	810eca6 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810ebbc:	4603      	mov	r3, r0
 810ebbe:	4618      	mov	r0, r3
 810ebc0:	3710      	adds	r7, #16
 810ebc2:	46bd      	mov	sp, r7
 810ebc4:	bd80      	pop	{r7, pc}

0810ebc6 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810ebc6:	b580      	push	{r7, lr}
 810ebc8:	b082      	sub	sp, #8
 810ebca:	af00      	add	r7, sp, #0
 810ebcc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810ebce:	6878      	ldr	r0, [r7, #4]
 810ebd0:	f000 f8c8 	bl	810ed64 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810ebd4:	4603      	mov	r3, r0
 810ebd6:	4618      	mov	r0, r3
 810ebd8:	3708      	adds	r7, #8
 810ebda:	46bd      	mov	sp, r7
 810ebdc:	bd80      	pop	{r7, pc}

0810ebde <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810ebde:	b480      	push	{r7}
 810ebe0:	b083      	sub	sp, #12
 810ebe2:	af00      	add	r7, sp, #0
 810ebe4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810ebe6:	687b      	ldr	r3, [r7, #4]
 810ebe8:	4618      	mov	r0, r3
 810ebea:	370c      	adds	r7, #12
 810ebec:	46bd      	mov	sp, r7
 810ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ebf2:	4770      	bx	lr

0810ebf4 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810ebf4:	b580      	push	{r7, lr}
 810ebf6:	b084      	sub	sp, #16
 810ebf8:	af00      	add	r7, sp, #0
 810ebfa:	60f8      	str	r0, [r7, #12]
 810ebfc:	60b9      	str	r1, [r7, #8]
 810ebfe:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810ec00:	6878      	ldr	r0, [r7, #4]
 810ec02:	f7ff ffec 	bl	810ebde <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810ec06:	4603      	mov	r3, r0
 810ec08:	4618      	mov	r0, r3
 810ec0a:	f000 f8d0 	bl	810edae <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810ec0e:	4603      	mov	r3, r0
	}
 810ec10:	4618      	mov	r0, r3
 810ec12:	3710      	adds	r7, #16
 810ec14:	46bd      	mov	sp, r7
 810ec16:	bd80      	pop	{r7, pc}

0810ec18 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810ec18:	b580      	push	{r7, lr}
 810ec1a:	b082      	sub	sp, #8
 810ec1c:	af00      	add	r7, sp, #0
 810ec1e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810ec20:	6878      	ldr	r0, [r7, #4]
 810ec22:	f000 f8d4 	bl	810edce <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810ec26:	4603      	mov	r3, r0
 810ec28:	4618      	mov	r0, r3
 810ec2a:	3708      	adds	r7, #8
 810ec2c:	46bd      	mov	sp, r7
 810ec2e:	bd80      	pop	{r7, pc}

0810ec30 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810ec30:	b580      	push	{r7, lr}
 810ec32:	b084      	sub	sp, #16
 810ec34:	af00      	add	r7, sp, #0
 810ec36:	60f8      	str	r0, [r7, #12]
 810ec38:	60b9      	str	r1, [r7, #8]
 810ec3a:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810ec3c:	6878      	ldr	r0, [r7, #4]
 810ec3e:	f7ff ffce 	bl	810ebde <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810ec42:	4603      	mov	r3, r0
 810ec44:	4618      	mov	r0, r3
 810ec46:	f000 f8e7 	bl	810ee18 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810ec4a:	4603      	mov	r3, r0
	}
 810ec4c:	4618      	mov	r0, r3
 810ec4e:	3710      	adds	r7, #16
 810ec50:	46bd      	mov	sp, r7
 810ec52:	bd80      	pop	{r7, pc}

0810ec54 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810ec54:	b580      	push	{r7, lr}
 810ec56:	b082      	sub	sp, #8
 810ec58:	af00      	add	r7, sp, #0
 810ec5a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810ec5c:	6878      	ldr	r0, [r7, #4]
 810ec5e:	f000 f8eb 	bl	810ee38 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 810ec62:	4603      	mov	r3, r0
 810ec64:	4618      	mov	r0, r3
 810ec66:	3708      	adds	r7, #8
 810ec68:	46bd      	mov	sp, r7
 810ec6a:	bd80      	pop	{r7, pc}

0810ec6c <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810ec6c:	b580      	push	{r7, lr}
 810ec6e:	b084      	sub	sp, #16
 810ec70:	af00      	add	r7, sp, #0
 810ec72:	60f8      	str	r0, [r7, #12]
 810ec74:	60b9      	str	r1, [r7, #8]
 810ec76:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810ec78:	6878      	ldr	r0, [r7, #4]
 810ec7a:	f7ff ffb0 	bl	810ebde <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810ec7e:	4603      	mov	r3, r0
 810ec80:	4618      	mov	r0, r3
 810ec82:	f000 f8fe 	bl	810ee82 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810ec86:	4603      	mov	r3, r0
	}
 810ec88:	4618      	mov	r0, r3
 810ec8a:	3710      	adds	r7, #16
 810ec8c:	46bd      	mov	sp, r7
 810ec8e:	bd80      	pop	{r7, pc}

0810ec90 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ec90:	b480      	push	{r7}
 810ec92:	b083      	sub	sp, #12
 810ec94:	af00      	add	r7, sp, #0
 810ec96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ec98:	687b      	ldr	r3, [r7, #4]
 810ec9a:	4618      	mov	r0, r3
 810ec9c:	370c      	adds	r7, #12
 810ec9e:	46bd      	mov	sp, r7
 810eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eca4:	4770      	bx	lr

0810eca6 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810eca6:	b480      	push	{r7}
 810eca8:	b083      	sub	sp, #12
 810ecaa:	af00      	add	r7, sp, #0
 810ecac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ecae:	687b      	ldr	r3, [r7, #4]
 810ecb0:	4618      	mov	r0, r3
 810ecb2:	370c      	adds	r7, #12
 810ecb4:	46bd      	mov	sp, r7
 810ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ecba:	4770      	bx	lr

0810ecbc <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 810ecbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810ecc0:	b089      	sub	sp, #36	; 0x24
 810ecc2:	af02      	add	r7, sp, #8
 810ecc4:	60f8      	str	r0, [r7, #12]
 810ecc6:	60b9      	str	r1, [r7, #8]
 810ecc8:	607a      	str	r2, [r7, #4]
 810ecca:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 810eccc:	68f8      	ldr	r0, [r7, #12]
 810ecce:	f7ff ffdf 	bl	810ec90 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 810ecd2:	4605      	mov	r5, r0
 810ecd4:	68b8      	ldr	r0, [r7, #8]
 810ecd6:	f7ff ffe6 	bl	810eca6 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810ecda:	4606      	mov	r6, r0
 810ecdc:	6878      	ldr	r0, [r7, #4]
 810ecde:	f7ff fc52 	bl	810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810ece2:	4680      	mov	r8, r0
 810ece4:	6838      	ldr	r0, [r7, #0]
 810ece6:	f7ff fc59 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810ecea:	4604      	mov	r4, r0
 810ecec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810ecee:	f7ff fc60 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810ecf2:	4603      	mov	r3, r0
 810ecf4:	9301      	str	r3, [sp, #4]
 810ecf6:	9400      	str	r4, [sp, #0]
 810ecf8:	4643      	mov	r3, r8
 810ecfa:	4632      	mov	r2, r6
 810ecfc:	4629      	mov	r1, r5
 810ecfe:	4648      	mov	r0, r9
 810ed00:	f000 f8cf 	bl	810eea2 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 810ed04:	bf00      	nop
    }
 810ed06:	371c      	adds	r7, #28
 810ed08:	46bd      	mov	sp, r7
 810ed0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810ed0e <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810ed0e:	b580      	push	{r7, lr}
 810ed10:	b084      	sub	sp, #16
 810ed12:	af00      	add	r7, sp, #0
 810ed14:	60f8      	str	r0, [r7, #12]
 810ed16:	60b9      	str	r1, [r7, #8]
 810ed18:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 810ed1a:	6879      	ldr	r1, [r7, #4]
 810ed1c:	68f8      	ldr	r0, [r7, #12]
 810ed1e:	f000 f8fa 	bl	810ef16 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 810ed22:	68b9      	ldr	r1, [r7, #8]
 810ed24:	68f8      	ldr	r0, [r7, #12]
 810ed26:	f000 f904 	bl	810ef32 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 810ed2a:	68fb      	ldr	r3, [r7, #12]
 810ed2c:	4618      	mov	r0, r3
 810ed2e:	3710      	adds	r7, #16
 810ed30:	46bd      	mov	sp, r7
 810ed32:	bd80      	pop	{r7, pc}

0810ed34 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810ed34:	b480      	push	{r7}
 810ed36:	b083      	sub	sp, #12
 810ed38:	af00      	add	r7, sp, #0
 810ed3a:	6078      	str	r0, [r7, #4]
 810ed3c:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810ed3e:	687b      	ldr	r3, [r7, #4]
 810ed40:	4618      	mov	r0, r3
 810ed42:	370c      	adds	r7, #12
 810ed44:	46bd      	mov	sp, r7
 810ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed4a:	4770      	bx	lr

0810ed4c <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810ed4c:	b580      	push	{r7, lr}
 810ed4e:	b082      	sub	sp, #8
 810ed50:	af00      	add	r7, sp, #0
 810ed52:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810ed54:	6878      	ldr	r0, [r7, #4]
 810ed56:	f7ff fbb3 	bl	810e4c0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810ed5a:	4603      	mov	r3, r0
 810ed5c:	4618      	mov	r0, r3
 810ed5e:	3708      	adds	r7, #8
 810ed60:	46bd      	mov	sp, r7
 810ed62:	bd80      	pop	{r7, pc}

0810ed64 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810ed64:	b580      	push	{r7, lr}
 810ed66:	b082      	sub	sp, #8
 810ed68:	af00      	add	r7, sp, #0
 810ed6a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810ed6c:	6878      	ldr	r0, [r7, #4]
 810ed6e:	f7ff fa85 	bl	810e27c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810ed72:	4603      	mov	r3, r0
 810ed74:	4618      	mov	r0, r3
 810ed76:	3708      	adds	r7, #8
 810ed78:	46bd      	mov	sp, r7
 810ed7a:	bd80      	pop	{r7, pc}

0810ed7c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810ed7c:	b580      	push	{r7, lr}
 810ed7e:	b082      	sub	sp, #8
 810ed80:	af00      	add	r7, sp, #0
 810ed82:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810ed84:	687b      	ldr	r3, [r7, #4]
 810ed86:	4618      	mov	r0, r3
 810ed88:	f000 f805 	bl	810ed96 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810ed8c:	4603      	mov	r3, r0
 810ed8e:	4618      	mov	r0, r3
 810ed90:	3708      	adds	r7, #8
 810ed92:	46bd      	mov	sp, r7
 810ed94:	bd80      	pop	{r7, pc}

0810ed96 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810ed96:	b580      	push	{r7, lr}
 810ed98:	b082      	sub	sp, #8
 810ed9a:	af00      	add	r7, sp, #0
 810ed9c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810ed9e:	6878      	ldr	r0, [r7, #4]
 810eda0:	f7ff fe74 	bl	810ea8c <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 810eda4:	4603      	mov	r3, r0
 810eda6:	4618      	mov	r0, r3
 810eda8:	3708      	adds	r7, #8
 810edaa:	46bd      	mov	sp, r7
 810edac:	bd80      	pop	{r7, pc}

0810edae <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810edae:	b580      	push	{r7, lr}
 810edb0:	b082      	sub	sp, #8
 810edb2:	af00      	add	r7, sp, #0
 810edb4:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810edb6:	6878      	ldr	r0, [r7, #4]
 810edb8:	f7ff ffe0 	bl	810ed7c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810edbc:	4603      	mov	r3, r0
 810edbe:	4618      	mov	r0, r3
 810edc0:	f7ff fe7e 	bl	810eac0 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 810edc4:	4603      	mov	r3, r0
    }
 810edc6:	4618      	mov	r0, r3
 810edc8:	3708      	adds	r7, #8
 810edca:	46bd      	mov	sp, r7
 810edcc:	bd80      	pop	{r7, pc}

0810edce <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810edce:	b580      	push	{r7, lr}
 810edd0:	b082      	sub	sp, #8
 810edd2:	af00      	add	r7, sp, #0
 810edd4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810edd6:	6878      	ldr	r0, [r7, #4]
 810edd8:	f7ff f9f6 	bl	810e1c8 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810eddc:	4603      	mov	r3, r0
 810edde:	4618      	mov	r0, r3
 810ede0:	3708      	adds	r7, #8
 810ede2:	46bd      	mov	sp, r7
 810ede4:	bd80      	pop	{r7, pc}

0810ede6 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810ede6:	b580      	push	{r7, lr}
 810ede8:	b082      	sub	sp, #8
 810edea:	af00      	add	r7, sp, #0
 810edec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810edee:	687b      	ldr	r3, [r7, #4]
 810edf0:	4618      	mov	r0, r3
 810edf2:	f000 f805 	bl	810ee00 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810edf6:	4603      	mov	r3, r0
 810edf8:	4618      	mov	r0, r3
 810edfa:	3708      	adds	r7, #8
 810edfc:	46bd      	mov	sp, r7
 810edfe:	bd80      	pop	{r7, pc}

0810ee00 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810ee00:	b580      	push	{r7, lr}
 810ee02:	b082      	sub	sp, #8
 810ee04:	af00      	add	r7, sp, #0
 810ee06:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810ee08:	6878      	ldr	r0, [r7, #4]
 810ee0a:	f7ff fd61 	bl	810e8d0 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 810ee0e:	4603      	mov	r3, r0
 810ee10:	4618      	mov	r0, r3
 810ee12:	3708      	adds	r7, #8
 810ee14:	46bd      	mov	sp, r7
 810ee16:	bd80      	pop	{r7, pc}

0810ee18 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810ee18:	b580      	push	{r7, lr}
 810ee1a:	b082      	sub	sp, #8
 810ee1c:	af00      	add	r7, sp, #0
 810ee1e:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810ee20:	6878      	ldr	r0, [r7, #4]
 810ee22:	f7ff ffe0 	bl	810ede6 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810ee26:	4603      	mov	r3, r0
 810ee28:	4618      	mov	r0, r3
 810ee2a:	f7ff fd6b 	bl	810e904 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 810ee2e:	4603      	mov	r3, r0
    }
 810ee30:	4618      	mov	r0, r3
 810ee32:	3708      	adds	r7, #8
 810ee34:	46bd      	mov	sp, r7
 810ee36:	bd80      	pop	{r7, pc}

0810ee38 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810ee38:	b580      	push	{r7, lr}
 810ee3a:	b082      	sub	sp, #8
 810ee3c:	af00      	add	r7, sp, #0
 810ee3e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810ee40:	6878      	ldr	r0, [r7, #4]
 810ee42:	f7ff f97e 	bl	810e142 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810ee46:	4603      	mov	r3, r0
 810ee48:	4618      	mov	r0, r3
 810ee4a:	3708      	adds	r7, #8
 810ee4c:	46bd      	mov	sp, r7
 810ee4e:	bd80      	pop	{r7, pc}

0810ee50 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810ee50:	b580      	push	{r7, lr}
 810ee52:	b082      	sub	sp, #8
 810ee54:	af00      	add	r7, sp, #0
 810ee56:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810ee58:	687b      	ldr	r3, [r7, #4]
 810ee5a:	4618      	mov	r0, r3
 810ee5c:	f000 f805 	bl	810ee6a <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 810ee60:	4603      	mov	r3, r0
 810ee62:	4618      	mov	r0, r3
 810ee64:	3708      	adds	r7, #8
 810ee66:	46bd      	mov	sp, r7
 810ee68:	bd80      	pop	{r7, pc}

0810ee6a <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810ee6a:	b580      	push	{r7, lr}
 810ee6c:	b082      	sub	sp, #8
 810ee6e:	af00      	add	r7, sp, #0
 810ee70:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810ee72:	6878      	ldr	r0, [r7, #4]
 810ee74:	f7ff fd08 	bl	810e888 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 810ee78:	4603      	mov	r3, r0
 810ee7a:	4618      	mov	r0, r3
 810ee7c:	3708      	adds	r7, #8
 810ee7e:	46bd      	mov	sp, r7
 810ee80:	bd80      	pop	{r7, pc}

0810ee82 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810ee82:	b580      	push	{r7, lr}
 810ee84:	b082      	sub	sp, #8
 810ee86:	af00      	add	r7, sp, #0
 810ee88:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810ee8a:	6878      	ldr	r0, [r7, #4]
 810ee8c:	f7ff ffe0 	bl	810ee50 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810ee90:	4603      	mov	r3, r0
 810ee92:	4618      	mov	r0, r3
 810ee94:	f7ff fd11 	bl	810e8ba <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 810ee98:	4603      	mov	r3, r0
    }
 810ee9a:	4618      	mov	r0, r3
 810ee9c:	3708      	adds	r7, #8
 810ee9e:	46bd      	mov	sp, r7
 810eea0:	bd80      	pop	{r7, pc}

0810eea2 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 810eea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 810eea4:	b087      	sub	sp, #28
 810eea6:	af00      	add	r7, sp, #0
 810eea8:	7538      	strb	r0, [r7, #20]
 810eeaa:	6139      	str	r1, [r7, #16]
 810eeac:	60fa      	str	r2, [r7, #12]
 810eeae:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 810eeb0:	68f8      	ldr	r0, [r7, #12]
 810eeb2:	f7ff fef8 	bl	810eca6 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810eeb6:	4603      	mov	r3, r0
 810eeb8:	681b      	ldr	r3, [r3, #0]
 810eeba:	693a      	ldr	r2, [r7, #16]
 810eebc:	6852      	ldr	r2, [r2, #4]
 810eebe:	1052      	asrs	r2, r2, #1
 810eec0:	189d      	adds	r5, r3, r2
 810eec2:	693a      	ldr	r2, [r7, #16]
 810eec4:	6852      	ldr	r2, [r2, #4]
 810eec6:	f002 0201 	and.w	r2, r2, #1
 810eeca:	2a00      	cmp	r2, #0
 810eecc:	d102      	bne.n	810eed4 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 810eece:	693b      	ldr	r3, [r7, #16]
 810eed0:	681c      	ldr	r4, [r3, #0]
 810eed2:	e008      	b.n	810eee6 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 810eed4:	693a      	ldr	r2, [r7, #16]
 810eed6:	6852      	ldr	r2, [r2, #4]
 810eed8:	1052      	asrs	r2, r2, #1
 810eeda:	4413      	add	r3, r2
 810eedc:	681b      	ldr	r3, [r3, #0]
 810eede:	693a      	ldr	r2, [r7, #16]
 810eee0:	6812      	ldr	r2, [r2, #0]
 810eee2:	4413      	add	r3, r2
 810eee4:	681c      	ldr	r4, [r3, #0]
 810eee6:	68b8      	ldr	r0, [r7, #8]
 810eee8:	f7ff fb4d 	bl	810e586 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810eeec:	4603      	mov	r3, r0
 810eeee:	781e      	ldrb	r6, [r3, #0]
 810eef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810eef2:	f7ff fb53 	bl	810e59c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810eef6:	4603      	mov	r3, r0
 810eef8:	681b      	ldr	r3, [r3, #0]
 810eefa:	607b      	str	r3, [r7, #4]
 810eefc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810eefe:	f7ff fb58 	bl	810e5b2 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810ef02:	4603      	mov	r3, r0
 810ef04:	681b      	ldr	r3, [r3, #0]
 810ef06:	687a      	ldr	r2, [r7, #4]
 810ef08:	4631      	mov	r1, r6
 810ef0a:	4628      	mov	r0, r5
 810ef0c:	47a0      	blx	r4
 810ef0e:	bf00      	nop
    }
 810ef10:	371c      	adds	r7, #28
 810ef12:	46bd      	mov	sp, r7
 810ef14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810ef16 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 810ef16:	b580      	push	{r7, lr}
 810ef18:	b082      	sub	sp, #8
 810ef1a:	af00      	add	r7, sp, #0
 810ef1c:	6078      	str	r0, [r7, #4]
 810ef1e:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 810ef20:	6839      	ldr	r1, [r7, #0]
 810ef22:	6878      	ldr	r0, [r7, #4]
 810ef24:	f000 f811 	bl	810ef4a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 810ef28:	687b      	ldr	r3, [r7, #4]
 810ef2a:	4618      	mov	r0, r3
 810ef2c:	3708      	adds	r7, #8
 810ef2e:	46bd      	mov	sp, r7
 810ef30:	bd80      	pop	{r7, pc}

0810ef32 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810ef32:	b480      	push	{r7}
 810ef34:	b083      	sub	sp, #12
 810ef36:	af00      	add	r7, sp, #0
 810ef38:	6078      	str	r0, [r7, #4]
 810ef3a:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810ef3c:	687b      	ldr	r3, [r7, #4]
 810ef3e:	4618      	mov	r0, r3
 810ef40:	370c      	adds	r7, #12
 810ef42:	46bd      	mov	sp, r7
 810ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef48:	4770      	bx	lr

0810ef4a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810ef4a:	b480      	push	{r7}
 810ef4c:	b083      	sub	sp, #12
 810ef4e:	af00      	add	r7, sp, #0
 810ef50:	6078      	str	r0, [r7, #4]
 810ef52:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810ef54:	687b      	ldr	r3, [r7, #4]
 810ef56:	4618      	mov	r0, r3
 810ef58:	370c      	adds	r7, #12
 810ef5a:	46bd      	mov	sp, r7
 810ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef60:	4770      	bx	lr
	...

0810ef64 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 810ef64:	b580      	push	{r7, lr}
 810ef66:	b082      	sub	sp, #8
 810ef68:	af00      	add	r7, sp, #0
 810ef6a:	6078      	str	r0, [r7, #4]
 810ef6c:	4a05      	ldr	r2, [pc, #20]	; (810ef84 <_ZN5IOBusD1Ev+0x20>)
 810ef6e:	687b      	ldr	r3, [r7, #4]
 810ef70:	601a      	str	r2, [r3, #0]
 810ef72:	687b      	ldr	r3, [r7, #4]
 810ef74:	4618      	mov	r0, r3
 810ef76:	f7fe ff3b 	bl	810ddf0 <_ZN10MessageBusD1Ev>
 810ef7a:	687b      	ldr	r3, [r7, #4]
 810ef7c:	4618      	mov	r0, r3
 810ef7e:	3708      	adds	r7, #8
 810ef80:	46bd      	mov	sp, r7
 810ef82:	bd80      	pop	{r7, pc}
 810ef84:	08115850 	.word	0x08115850

0810ef88 <_ZN5IOBusD0Ev>:
 810ef88:	b580      	push	{r7, lr}
 810ef8a:	b082      	sub	sp, #8
 810ef8c:	af00      	add	r7, sp, #0
 810ef8e:	6078      	str	r0, [r7, #4]
 810ef90:	6878      	ldr	r0, [r7, #4]
 810ef92:	f7ff ffe7 	bl	810ef64 <_ZN5IOBusD1Ev>
 810ef96:	f644 0114 	movw	r1, #18452	; 0x4814
 810ef9a:	6878      	ldr	r0, [r7, #4]
 810ef9c:	f002 fea5 	bl	8111cea <_ZdlPvj>
 810efa0:	687b      	ldr	r3, [r7, #4]
 810efa2:	4618      	mov	r0, r3
 810efa4:	3708      	adds	r7, #8
 810efa6:	46bd      	mov	sp, r7
 810efa8:	bd80      	pop	{r7, pc}

0810efaa <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 810efaa:	b480      	push	{r7}
 810efac:	b083      	sub	sp, #12
 810efae:	af00      	add	r7, sp, #0
 810efb0:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 810efb2:	687b      	ldr	r3, [r7, #4]
 810efb4:	685b      	ldr	r3, [r3, #4]
 810efb6:	781b      	ldrb	r3, [r3, #0]
 810efb8:	2b2a      	cmp	r3, #42	; 0x2a
 810efba:	d103      	bne.n	810efc4 <_ZNKSt9type_info4nameEv+0x1a>
 810efbc:	687b      	ldr	r3, [r7, #4]
 810efbe:	685b      	ldr	r3, [r3, #4]
 810efc0:	3301      	adds	r3, #1
 810efc2:	e001      	b.n	810efc8 <_ZNKSt9type_info4nameEv+0x1e>
 810efc4:	687b      	ldr	r3, [r7, #4]
 810efc6:	685b      	ldr	r3, [r3, #4]
 810efc8:	4618      	mov	r0, r3
 810efca:	370c      	adds	r7, #12
 810efcc:	46bd      	mov	sp, r7
 810efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810efd2:	4770      	bx	lr

0810efd4 <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 810efd4:	b590      	push	{r4, r7, lr}
 810efd6:	b083      	sub	sp, #12
 810efd8:	af00      	add	r7, sp, #0
 810efda:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 810efdc:	6878      	ldr	r0, [r7, #4]
 810efde:	f7ff ffe4 	bl	810efaa <_ZNKSt9type_info4nameEv>
 810efe2:	4604      	mov	r4, r0
 810efe4:	6878      	ldr	r0, [r7, #4]
 810efe6:	f7ff ffe0 	bl	810efaa <_ZNKSt9type_info4nameEv>
 810efea:	4603      	mov	r3, r0
 810efec:	4618      	mov	r0, r3
 810efee:	f7f1 f981 	bl	81002f4 <strlen>
 810eff2:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
 810eff4:	4a04      	ldr	r2, [pc, #16]	; (810f008 <_ZNKSt9type_info9hash_codeEv+0x34>)
 810eff6:	4619      	mov	r1, r3
 810eff8:	4620      	mov	r0, r4
 810effa:	f002 fe79 	bl	8111cf0 <_ZSt11_Hash_bytesPKvjj>
 810effe:	4603      	mov	r3, r0
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 810f000:	4618      	mov	r0, r3
 810f002:	370c      	adds	r7, #12
 810f004:	46bd      	mov	sp, r7
 810f006:	bd90      	pop	{r4, r7, pc}
 810f008:	c70f6907 	.word	0xc70f6907

0810f00c <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f00c:	b580      	push	{r7, lr}
 810f00e:	b086      	sub	sp, #24
 810f010:	af00      	add	r7, sp, #0
 810f012:	6078      	str	r0, [r7, #4]
 810f014:	460b      	mov	r3, r1
 810f016:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f018:	2308      	movs	r3, #8
 810f01a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f01c:	4829      	ldr	r0, [pc, #164]	; (810f0c4 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 810f01e:	f7ff ffd9 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f022:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 810f024:	68fb      	ldr	r3, [r7, #12]
 810f026:	b2db      	uxtb	r3, r3
 810f028:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f02a:	78fb      	ldrb	r3, [r7, #3]
 810f02c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f030:	687a      	ldr	r2, [r7, #4]
 810f032:	00db      	lsls	r3, r3, #3
 810f034:	4413      	add	r3, r2
 810f036:	689b      	ldr	r3, [r3, #8]
 810f038:	2b00      	cmp	r3, #0
 810f03a:	d001      	beq.n	810f040 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f03c:	2300      	movs	r3, #0
 810f03e:	e03c      	b.n	810f0ba <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 810f040:	693b      	ldr	r3, [r7, #16]
 810f042:	2bff      	cmp	r3, #255	; 0xff
 810f044:	d901      	bls.n	810f04a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		return false; // Packet size too large
 810f046:	2300      	movs	r3, #0
 810f048:	e037      	b.n	810f0ba <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 810f04a:	687a      	ldr	r2, [r7, #4]
 810f04c:	697b      	ldr	r3, [r7, #20]
 810f04e:	3380      	adds	r3, #128	; 0x80
 810f050:	009b      	lsls	r3, r3, #2
 810f052:	4413      	add	r3, r2
 810f054:	685b      	ldr	r3, [r3, #4]
 810f056:	2b00      	cmp	r3, #0
 810f058:	d015      	beq.n	810f086 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f05a:	687a      	ldr	r2, [r7, #4]
 810f05c:	697b      	ldr	r3, [r7, #20]
 810f05e:	3380      	adds	r3, #128	; 0x80
 810f060:	009b      	lsls	r3, r3, #2
 810f062:	4413      	add	r3, r2
 810f064:	685b      	ldr	r3, [r3, #4]
 810f066:	685b      	ldr	r3, [r3, #4]
 810f068:	68fa      	ldr	r2, [r7, #12]
 810f06a:	429a      	cmp	r2, r3
 810f06c:	d101      	bne.n	810f072 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
			return false; // Packet type already defined
 810f06e:	2300      	movs	r3, #0
 810f070:	e023      	b.n	810f0ba <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
		}

		insertion_point++;
 810f072:	697b      	ldr	r3, [r7, #20]
 810f074:	3301      	adds	r3, #1
 810f076:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 810f078:	697b      	ldr	r3, [r7, #20]
 810f07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f07e:	d1e4      	bne.n	810f04a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
			insertion_point = 0;
 810f080:	2300      	movs	r3, #0
 810f082:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f084:	e7e1      	b.n	810f04a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f086:	78fb      	ldrb	r3, [r7, #3]
 810f088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f08c:	00db      	lsls	r3, r3, #3
 810f08e:	687a      	ldr	r2, [r7, #4]
 810f090:	4413      	add	r3, r2
 810f092:	3304      	adds	r3, #4
 810f094:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 810f096:	68bb      	ldr	r3, [r7, #8]
 810f098:	78fa      	ldrb	r2, [r7, #3]
 810f09a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f09c:	693b      	ldr	r3, [r7, #16]
 810f09e:	b2da      	uxtb	r2, r3
 810f0a0:	68bb      	ldr	r3, [r7, #8]
 810f0a2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f0a4:	68bb      	ldr	r3, [r7, #8]
 810f0a6:	68fa      	ldr	r2, [r7, #12]
 810f0a8:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 810f0aa:	687a      	ldr	r2, [r7, #4]
 810f0ac:	697b      	ldr	r3, [r7, #20]
 810f0ae:	3380      	adds	r3, #128	; 0x80
 810f0b0:	009b      	lsls	r3, r3, #2
 810f0b2:	4413      	add	r3, r2
 810f0b4:	68ba      	ldr	r2, [r7, #8]
 810f0b6:	605a      	str	r2, [r3, #4]

	return true;
 810f0b8:	2301      	movs	r3, #1
}
 810f0ba:	4618      	mov	r0, r3
 810f0bc:	3718      	adds	r7, #24
 810f0be:	46bd      	mov	sp, r7
 810f0c0:	bd80      	pop	{r7, pc}
 810f0c2:	bf00      	nop
 810f0c4:	08115b94 	.word	0x08115b94

0810f0c8 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_>:
}

/*
 * Sends the given message using the implemented transmission protocol.
 */
template<typename T> bool MessageBus::send(T *message) {
 810f0c8:	b580      	push	{r7, lr}
 810f0ca:	b084      	sub	sp, #16
 810f0cc:	af00      	add	r7, sp, #0
 810f0ce:	6078      	str	r0, [r7, #4]
 810f0d0:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810f0d2:	4809      	ldr	r0, [pc, #36]	; (810f0f8 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_+0x30>)
 810f0d4:	f7ff ff7e 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f0d8:	60f8      	str	r0, [r7, #12]

	PacketDefinition* def = retrieve(hash);
 810f0da:	68f9      	ldr	r1, [r7, #12]
 810f0dc:	6878      	ldr	r0, [r7, #4]
 810f0de:	f001 f81b 	bl	8110118 <_ZN10MessageBus8retrieveEj>
 810f0e2:	60b8      	str	r0, [r7, #8]

	return send(def, (uint8_t*) message);
 810f0e4:	683a      	ldr	r2, [r7, #0]
 810f0e6:	68b9      	ldr	r1, [r7, #8]
 810f0e8:	6878      	ldr	r0, [r7, #4]
 810f0ea:	f000 ff4f 	bl	810ff8c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810f0ee:	4603      	mov	r3, r0
}
 810f0f0:	4618      	mov	r0, r3
 810f0f2:	3710      	adds	r7, #16
 810f0f4:	46bd      	mov	sp, r7
 810f0f6:	bd80      	pop	{r7, pc}
 810f0f8:	08115b94 	.word	0x08115b94

0810f0fc <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f0fc:	b580      	push	{r7, lr}
 810f0fe:	b086      	sub	sp, #24
 810f100:	af00      	add	r7, sp, #0
 810f102:	6078      	str	r0, [r7, #4]
 810f104:	460b      	mov	r3, r1
 810f106:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f108:	2324      	movs	r3, #36	; 0x24
 810f10a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f10c:	4829      	ldr	r0, [pc, #164]	; (810f1b4 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 810f10e:	f7ff ff61 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f112:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f114:	68fb      	ldr	r3, [r7, #12]
 810f116:	b2db      	uxtb	r3, r3
 810f118:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f11a:	78fb      	ldrb	r3, [r7, #3]
 810f11c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f120:	687a      	ldr	r2, [r7, #4]
 810f122:	00db      	lsls	r3, r3, #3
 810f124:	4413      	add	r3, r2
 810f126:	689b      	ldr	r3, [r3, #8]
 810f128:	2b00      	cmp	r3, #0
 810f12a:	d001      	beq.n	810f130 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f12c:	2300      	movs	r3, #0
 810f12e:	e03c      	b.n	810f1aa <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f130:	693b      	ldr	r3, [r7, #16]
 810f132:	2bff      	cmp	r3, #255	; 0xff
 810f134:	d901      	bls.n	810f13a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 810f136:	2300      	movs	r3, #0
 810f138:	e037      	b.n	810f1aa <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f13a:	687a      	ldr	r2, [r7, #4]
 810f13c:	697b      	ldr	r3, [r7, #20]
 810f13e:	3380      	adds	r3, #128	; 0x80
 810f140:	009b      	lsls	r3, r3, #2
 810f142:	4413      	add	r3, r2
 810f144:	685b      	ldr	r3, [r3, #4]
 810f146:	2b00      	cmp	r3, #0
 810f148:	d015      	beq.n	810f176 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f14a:	687a      	ldr	r2, [r7, #4]
 810f14c:	697b      	ldr	r3, [r7, #20]
 810f14e:	3380      	adds	r3, #128	; 0x80
 810f150:	009b      	lsls	r3, r3, #2
 810f152:	4413      	add	r3, r2
 810f154:	685b      	ldr	r3, [r3, #4]
 810f156:	685b      	ldr	r3, [r3, #4]
 810f158:	68fa      	ldr	r2, [r7, #12]
 810f15a:	429a      	cmp	r2, r3
 810f15c:	d101      	bne.n	810f162 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 810f15e:	2300      	movs	r3, #0
 810f160:	e023      	b.n	810f1aa <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 810f162:	697b      	ldr	r3, [r7, #20]
 810f164:	3301      	adds	r3, #1
 810f166:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f168:	697b      	ldr	r3, [r7, #20]
 810f16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f16e:	d1e4      	bne.n	810f13a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 810f170:	2300      	movs	r3, #0
 810f172:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f174:	e7e1      	b.n	810f13a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f176:	78fb      	ldrb	r3, [r7, #3]
 810f178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f17c:	00db      	lsls	r3, r3, #3
 810f17e:	687a      	ldr	r2, [r7, #4]
 810f180:	4413      	add	r3, r2
 810f182:	3304      	adds	r3, #4
 810f184:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f186:	68bb      	ldr	r3, [r7, #8]
 810f188:	78fa      	ldrb	r2, [r7, #3]
 810f18a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f18c:	693b      	ldr	r3, [r7, #16]
 810f18e:	b2da      	uxtb	r2, r3
 810f190:	68bb      	ldr	r3, [r7, #8]
 810f192:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f194:	68bb      	ldr	r3, [r7, #8]
 810f196:	68fa      	ldr	r2, [r7, #12]
 810f198:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f19a:	687a      	ldr	r2, [r7, #4]
 810f19c:	697b      	ldr	r3, [r7, #20]
 810f19e:	3380      	adds	r3, #128	; 0x80
 810f1a0:	009b      	lsls	r3, r3, #2
 810f1a2:	4413      	add	r3, r2
 810f1a4:	68ba      	ldr	r2, [r7, #8]
 810f1a6:	605a      	str	r2, [r3, #4]
	return true;
 810f1a8:	2301      	movs	r3, #1
}
 810f1aa:	4618      	mov	r0, r3
 810f1ac:	3718      	adds	r7, #24
 810f1ae:	46bd      	mov	sp, r7
 810f1b0:	bd80      	pop	{r7, pc}
 810f1b2:	bf00      	nop
 810f1b4:	08115b70 	.word	0x08115b70

0810f1b8 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810f1b8:	b580      	push	{r7, lr}
 810f1ba:	b084      	sub	sp, #16
 810f1bc:	af00      	add	r7, sp, #0
 810f1be:	6078      	str	r0, [r7, #4]
 810f1c0:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810f1c2:	4809      	ldr	r0, [pc, #36]	; (810f1e8 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_+0x30>)
 810f1c4:	f7ff ff06 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f1c8:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810f1ca:	68f9      	ldr	r1, [r7, #12]
 810f1cc:	6878      	ldr	r0, [r7, #4]
 810f1ce:	f000 ffa3 	bl	8110118 <_ZN10MessageBus8retrieveEj>
 810f1d2:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810f1d4:	683a      	ldr	r2, [r7, #0]
 810f1d6:	68b9      	ldr	r1, [r7, #8]
 810f1d8:	6878      	ldr	r0, [r7, #4]
 810f1da:	f000 fed7 	bl	810ff8c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810f1de:	4603      	mov	r3, r0
}
 810f1e0:	4618      	mov	r0, r3
 810f1e2:	3710      	adds	r7, #16
 810f1e4:	46bd      	mov	sp, r7
 810f1e6:	bd80      	pop	{r7, pc}
 810f1e8:	08115b70 	.word	0x08115b70

0810f1ec <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f1ec:	b580      	push	{r7, lr}
 810f1ee:	b086      	sub	sp, #24
 810f1f0:	af00      	add	r7, sp, #0
 810f1f2:	6078      	str	r0, [r7, #4]
 810f1f4:	460b      	mov	r3, r1
 810f1f6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f1f8:	2305      	movs	r3, #5
 810f1fa:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f1fc:	4829      	ldr	r0, [pc, #164]	; (810f2a4 <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0xb8>)
 810f1fe:	f7ff fee9 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f202:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f204:	68fb      	ldr	r3, [r7, #12]
 810f206:	b2db      	uxtb	r3, r3
 810f208:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f20a:	78fb      	ldrb	r3, [r7, #3]
 810f20c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f210:	687a      	ldr	r2, [r7, #4]
 810f212:	00db      	lsls	r3, r3, #3
 810f214:	4413      	add	r3, r2
 810f216:	689b      	ldr	r3, [r3, #8]
 810f218:	2b00      	cmp	r3, #0
 810f21a:	d001      	beq.n	810f220 <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f21c:	2300      	movs	r3, #0
 810f21e:	e03c      	b.n	810f29a <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f220:	693b      	ldr	r3, [r7, #16]
 810f222:	2bff      	cmp	r3, #255	; 0xff
 810f224:	d901      	bls.n	810f22a <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0x3e>
		return false; // Packet size too large
 810f226:	2300      	movs	r3, #0
 810f228:	e037      	b.n	810f29a <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f22a:	687a      	ldr	r2, [r7, #4]
 810f22c:	697b      	ldr	r3, [r7, #20]
 810f22e:	3380      	adds	r3, #128	; 0x80
 810f230:	009b      	lsls	r3, r3, #2
 810f232:	4413      	add	r3, r2
 810f234:	685b      	ldr	r3, [r3, #4]
 810f236:	2b00      	cmp	r3, #0
 810f238:	d015      	beq.n	810f266 <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f23a:	687a      	ldr	r2, [r7, #4]
 810f23c:	697b      	ldr	r3, [r7, #20]
 810f23e:	3380      	adds	r3, #128	; 0x80
 810f240:	009b      	lsls	r3, r3, #2
 810f242:	4413      	add	r3, r2
 810f244:	685b      	ldr	r3, [r3, #4]
 810f246:	685b      	ldr	r3, [r3, #4]
 810f248:	68fa      	ldr	r2, [r7, #12]
 810f24a:	429a      	cmp	r2, r3
 810f24c:	d101      	bne.n	810f252 <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0x66>
			return false; // Packet type already defined
 810f24e:	2300      	movs	r3, #0
 810f250:	e023      	b.n	810f29a <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0xae>
		insertion_point++;
 810f252:	697b      	ldr	r3, [r7, #20]
 810f254:	3301      	adds	r3, #1
 810f256:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f258:	697b      	ldr	r3, [r7, #20]
 810f25a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f25e:	d1e4      	bne.n	810f22a <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0x3e>
			insertion_point = 0;
 810f260:	2300      	movs	r3, #0
 810f262:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f264:	e7e1      	b.n	810f22a <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f266:	78fb      	ldrb	r3, [r7, #3]
 810f268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f26c:	00db      	lsls	r3, r3, #3
 810f26e:	687a      	ldr	r2, [r7, #4]
 810f270:	4413      	add	r3, r2
 810f272:	3304      	adds	r3, #4
 810f274:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f276:	68bb      	ldr	r3, [r7, #8]
 810f278:	78fa      	ldrb	r2, [r7, #3]
 810f27a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f27c:	693b      	ldr	r3, [r7, #16]
 810f27e:	b2da      	uxtb	r2, r3
 810f280:	68bb      	ldr	r3, [r7, #8]
 810f282:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f284:	68bb      	ldr	r3, [r7, #8]
 810f286:	68fa      	ldr	r2, [r7, #12]
 810f288:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f28a:	687a      	ldr	r2, [r7, #4]
 810f28c:	697b      	ldr	r3, [r7, #20]
 810f28e:	3380      	adds	r3, #128	; 0x80
 810f290:	009b      	lsls	r3, r3, #2
 810f292:	4413      	add	r3, r2
 810f294:	68ba      	ldr	r2, [r7, #8]
 810f296:	605a      	str	r2, [r3, #4]
	return true;
 810f298:	2301      	movs	r3, #1
}
 810f29a:	4618      	mov	r0, r3
 810f29c:	3718      	adds	r7, #24
 810f29e:	46bd      	mov	sp, r7
 810f2a0:	bd80      	pop	{r7, pc}
 810f2a2:	bf00      	nop
 810f2a4:	08115b50 	.word	0x08115b50

0810f2a8 <_ZN10MessageBus4sendI18Avionics_ADCPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810f2a8:	b580      	push	{r7, lr}
 810f2aa:	b084      	sub	sp, #16
 810f2ac:	af00      	add	r7, sp, #0
 810f2ae:	6078      	str	r0, [r7, #4]
 810f2b0:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810f2b2:	4809      	ldr	r0, [pc, #36]	; (810f2d8 <_ZN10MessageBus4sendI18Avionics_ADCPacketEEbPT_+0x30>)
 810f2b4:	f7ff fe8e 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f2b8:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810f2ba:	68f9      	ldr	r1, [r7, #12]
 810f2bc:	6878      	ldr	r0, [r7, #4]
 810f2be:	f000 ff2b 	bl	8110118 <_ZN10MessageBus8retrieveEj>
 810f2c2:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810f2c4:	683a      	ldr	r2, [r7, #0]
 810f2c6:	68b9      	ldr	r1, [r7, #8]
 810f2c8:	6878      	ldr	r0, [r7, #4]
 810f2ca:	f000 fe5f 	bl	810ff8c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810f2ce:	4603      	mov	r3, r0
}
 810f2d0:	4618      	mov	r0, r3
 810f2d2:	3710      	adds	r7, #16
 810f2d4:	46bd      	mov	sp, r7
 810f2d6:	bd80      	pop	{r7, pc}
 810f2d8:	08115b50 	.word	0x08115b50

0810f2dc <_ZN10MessageBus6defineI18Science_MassPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f2dc:	b580      	push	{r7, lr}
 810f2de:	b086      	sub	sp, #24
 810f2e0:	af00      	add	r7, sp, #0
 810f2e2:	6078      	str	r0, [r7, #4]
 810f2e4:	460b      	mov	r3, r1
 810f2e6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f2e8:	2304      	movs	r3, #4
 810f2ea:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f2ec:	4829      	ldr	r0, [pc, #164]	; (810f394 <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0xb8>)
 810f2ee:	f7ff fe71 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f2f2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f2f4:	68fb      	ldr	r3, [r7, #12]
 810f2f6:	b2db      	uxtb	r3, r3
 810f2f8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f2fa:	78fb      	ldrb	r3, [r7, #3]
 810f2fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f300:	687a      	ldr	r2, [r7, #4]
 810f302:	00db      	lsls	r3, r3, #3
 810f304:	4413      	add	r3, r2
 810f306:	689b      	ldr	r3, [r3, #8]
 810f308:	2b00      	cmp	r3, #0
 810f30a:	d001      	beq.n	810f310 <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f30c:	2300      	movs	r3, #0
 810f30e:	e03c      	b.n	810f38a <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f310:	693b      	ldr	r3, [r7, #16]
 810f312:	2bff      	cmp	r3, #255	; 0xff
 810f314:	d901      	bls.n	810f31a <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0x3e>
		return false; // Packet size too large
 810f316:	2300      	movs	r3, #0
 810f318:	e037      	b.n	810f38a <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f31a:	687a      	ldr	r2, [r7, #4]
 810f31c:	697b      	ldr	r3, [r7, #20]
 810f31e:	3380      	adds	r3, #128	; 0x80
 810f320:	009b      	lsls	r3, r3, #2
 810f322:	4413      	add	r3, r2
 810f324:	685b      	ldr	r3, [r3, #4]
 810f326:	2b00      	cmp	r3, #0
 810f328:	d015      	beq.n	810f356 <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f32a:	687a      	ldr	r2, [r7, #4]
 810f32c:	697b      	ldr	r3, [r7, #20]
 810f32e:	3380      	adds	r3, #128	; 0x80
 810f330:	009b      	lsls	r3, r3, #2
 810f332:	4413      	add	r3, r2
 810f334:	685b      	ldr	r3, [r3, #4]
 810f336:	685b      	ldr	r3, [r3, #4]
 810f338:	68fa      	ldr	r2, [r7, #12]
 810f33a:	429a      	cmp	r2, r3
 810f33c:	d101      	bne.n	810f342 <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0x66>
			return false; // Packet type already defined
 810f33e:	2300      	movs	r3, #0
 810f340:	e023      	b.n	810f38a <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0xae>
		insertion_point++;
 810f342:	697b      	ldr	r3, [r7, #20]
 810f344:	3301      	adds	r3, #1
 810f346:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f348:	697b      	ldr	r3, [r7, #20]
 810f34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f34e:	d1e4      	bne.n	810f31a <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0x3e>
			insertion_point = 0;
 810f350:	2300      	movs	r3, #0
 810f352:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f354:	e7e1      	b.n	810f31a <_ZN10MessageBus6defineI18Science_MassPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f356:	78fb      	ldrb	r3, [r7, #3]
 810f358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f35c:	00db      	lsls	r3, r3, #3
 810f35e:	687a      	ldr	r2, [r7, #4]
 810f360:	4413      	add	r3, r2
 810f362:	3304      	adds	r3, #4
 810f364:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f366:	68bb      	ldr	r3, [r7, #8]
 810f368:	78fa      	ldrb	r2, [r7, #3]
 810f36a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f36c:	693b      	ldr	r3, [r7, #16]
 810f36e:	b2da      	uxtb	r2, r3
 810f370:	68bb      	ldr	r3, [r7, #8]
 810f372:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f374:	68bb      	ldr	r3, [r7, #8]
 810f376:	68fa      	ldr	r2, [r7, #12]
 810f378:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f37a:	687a      	ldr	r2, [r7, #4]
 810f37c:	697b      	ldr	r3, [r7, #20]
 810f37e:	3380      	adds	r3, #128	; 0x80
 810f380:	009b      	lsls	r3, r3, #2
 810f382:	4413      	add	r3, r2
 810f384:	68ba      	ldr	r2, [r7, #8]
 810f386:	605a      	str	r2, [r3, #4]
	return true;
 810f388:	2301      	movs	r3, #1
}
 810f38a:	4618      	mov	r0, r3
 810f38c:	3718      	adds	r7, #24
 810f38e:	46bd      	mov	sp, r7
 810f390:	bd80      	pop	{r7, pc}
 810f392:	bf00      	nop
 810f394:	08115b30 	.word	0x08115b30

0810f398 <_ZN10MessageBus4sendI18Science_MassPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810f398:	b580      	push	{r7, lr}
 810f39a:	b084      	sub	sp, #16
 810f39c:	af00      	add	r7, sp, #0
 810f39e:	6078      	str	r0, [r7, #4]
 810f3a0:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810f3a2:	4809      	ldr	r0, [pc, #36]	; (810f3c8 <_ZN10MessageBus4sendI18Science_MassPacketEEbPT_+0x30>)
 810f3a4:	f7ff fe16 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f3a8:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810f3aa:	68f9      	ldr	r1, [r7, #12]
 810f3ac:	6878      	ldr	r0, [r7, #4]
 810f3ae:	f000 feb3 	bl	8110118 <_ZN10MessageBus8retrieveEj>
 810f3b2:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810f3b4:	683a      	ldr	r2, [r7, #0]
 810f3b6:	68b9      	ldr	r1, [r7, #8]
 810f3b8:	6878      	ldr	r0, [r7, #4]
 810f3ba:	f000 fde7 	bl	810ff8c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810f3be:	4603      	mov	r3, r0
}
 810f3c0:	4618      	mov	r0, r3
 810f3c2:	3710      	adds	r7, #16
 810f3c4:	46bd      	mov	sp, r7
 810f3c6:	bd80      	pop	{r7, pc}
 810f3c8:	08115b30 	.word	0x08115b30

0810f3cc <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f3cc:	b580      	push	{r7, lr}
 810f3ce:	b086      	sub	sp, #24
 810f3d0:	af00      	add	r7, sp, #0
 810f3d2:	6078      	str	r0, [r7, #4]
 810f3d4:	460b      	mov	r3, r1
 810f3d6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f3d8:	2305      	movs	r3, #5
 810f3da:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f3dc:	4829      	ldr	r0, [pc, #164]	; (810f484 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 810f3de:	f7ff fdf9 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f3e2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f3e4:	68fb      	ldr	r3, [r7, #12]
 810f3e6:	b2db      	uxtb	r3, r3
 810f3e8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f3ea:	78fb      	ldrb	r3, [r7, #3]
 810f3ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f3f0:	687a      	ldr	r2, [r7, #4]
 810f3f2:	00db      	lsls	r3, r3, #3
 810f3f4:	4413      	add	r3, r2
 810f3f6:	689b      	ldr	r3, [r3, #8]
 810f3f8:	2b00      	cmp	r3, #0
 810f3fa:	d001      	beq.n	810f400 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f3fc:	2300      	movs	r3, #0
 810f3fe:	e03c      	b.n	810f47a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f400:	693b      	ldr	r3, [r7, #16]
 810f402:	2bff      	cmp	r3, #255	; 0xff
 810f404:	d901      	bls.n	810f40a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 810f406:	2300      	movs	r3, #0
 810f408:	e037      	b.n	810f47a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f40a:	687a      	ldr	r2, [r7, #4]
 810f40c:	697b      	ldr	r3, [r7, #20]
 810f40e:	3380      	adds	r3, #128	; 0x80
 810f410:	009b      	lsls	r3, r3, #2
 810f412:	4413      	add	r3, r2
 810f414:	685b      	ldr	r3, [r3, #4]
 810f416:	2b00      	cmp	r3, #0
 810f418:	d015      	beq.n	810f446 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f41a:	687a      	ldr	r2, [r7, #4]
 810f41c:	697b      	ldr	r3, [r7, #20]
 810f41e:	3380      	adds	r3, #128	; 0x80
 810f420:	009b      	lsls	r3, r3, #2
 810f422:	4413      	add	r3, r2
 810f424:	685b      	ldr	r3, [r3, #4]
 810f426:	685b      	ldr	r3, [r3, #4]
 810f428:	68fa      	ldr	r2, [r7, #12]
 810f42a:	429a      	cmp	r2, r3
 810f42c:	d101      	bne.n	810f432 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 810f42e:	2300      	movs	r3, #0
 810f430:	e023      	b.n	810f47a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 810f432:	697b      	ldr	r3, [r7, #20]
 810f434:	3301      	adds	r3, #1
 810f436:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f438:	697b      	ldr	r3, [r7, #20]
 810f43a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f43e:	d1e4      	bne.n	810f40a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 810f440:	2300      	movs	r3, #0
 810f442:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f444:	e7e1      	b.n	810f40a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f446:	78fb      	ldrb	r3, [r7, #3]
 810f448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f44c:	00db      	lsls	r3, r3, #3
 810f44e:	687a      	ldr	r2, [r7, #4]
 810f450:	4413      	add	r3, r2
 810f452:	3304      	adds	r3, #4
 810f454:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f456:	68bb      	ldr	r3, [r7, #8]
 810f458:	78fa      	ldrb	r2, [r7, #3]
 810f45a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f45c:	693b      	ldr	r3, [r7, #16]
 810f45e:	b2da      	uxtb	r2, r3
 810f460:	68bb      	ldr	r3, [r7, #8]
 810f462:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f464:	68bb      	ldr	r3, [r7, #8]
 810f466:	68fa      	ldr	r2, [r7, #12]
 810f468:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f46a:	687a      	ldr	r2, [r7, #4]
 810f46c:	697b      	ldr	r3, [r7, #20]
 810f46e:	3380      	adds	r3, #128	; 0x80
 810f470:	009b      	lsls	r3, r3, #2
 810f472:	4413      	add	r3, r2
 810f474:	68ba      	ldr	r2, [r7, #8]
 810f476:	605a      	str	r2, [r3, #4]
	return true;
 810f478:	2301      	movs	r3, #1
}
 810f47a:	4618      	mov	r0, r3
 810f47c:	3718      	adds	r7, #24
 810f47e:	46bd      	mov	sp, r7
 810f480:	bd80      	pop	{r7, pc}
 810f482:	bf00      	nop
 810f484:	08115b10 	.word	0x08115b10

0810f488 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f488:	b580      	push	{r7, lr}
 810f48a:	b086      	sub	sp, #24
 810f48c:	af00      	add	r7, sp, #0
 810f48e:	6078      	str	r0, [r7, #4]
 810f490:	460b      	mov	r3, r1
 810f492:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f494:	2310      	movs	r3, #16
 810f496:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f498:	4829      	ldr	r0, [pc, #164]	; (810f540 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 810f49a:	f7ff fd9b 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f49e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f4a0:	68fb      	ldr	r3, [r7, #12]
 810f4a2:	b2db      	uxtb	r3, r3
 810f4a4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f4a6:	78fb      	ldrb	r3, [r7, #3]
 810f4a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f4ac:	687a      	ldr	r2, [r7, #4]
 810f4ae:	00db      	lsls	r3, r3, #3
 810f4b0:	4413      	add	r3, r2
 810f4b2:	689b      	ldr	r3, [r3, #8]
 810f4b4:	2b00      	cmp	r3, #0
 810f4b6:	d001      	beq.n	810f4bc <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 810f4b8:	2300      	movs	r3, #0
 810f4ba:	e03c      	b.n	810f536 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f4bc:	693b      	ldr	r3, [r7, #16]
 810f4be:	2bff      	cmp	r3, #255	; 0xff
 810f4c0:	d901      	bls.n	810f4c6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 810f4c2:	2300      	movs	r3, #0
 810f4c4:	e037      	b.n	810f536 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f4c6:	687a      	ldr	r2, [r7, #4]
 810f4c8:	697b      	ldr	r3, [r7, #20]
 810f4ca:	3380      	adds	r3, #128	; 0x80
 810f4cc:	009b      	lsls	r3, r3, #2
 810f4ce:	4413      	add	r3, r2
 810f4d0:	685b      	ldr	r3, [r3, #4]
 810f4d2:	2b00      	cmp	r3, #0
 810f4d4:	d015      	beq.n	810f502 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f4d6:	687a      	ldr	r2, [r7, #4]
 810f4d8:	697b      	ldr	r3, [r7, #20]
 810f4da:	3380      	adds	r3, #128	; 0x80
 810f4dc:	009b      	lsls	r3, r3, #2
 810f4de:	4413      	add	r3, r2
 810f4e0:	685b      	ldr	r3, [r3, #4]
 810f4e2:	685b      	ldr	r3, [r3, #4]
 810f4e4:	68fa      	ldr	r2, [r7, #12]
 810f4e6:	429a      	cmp	r2, r3
 810f4e8:	d101      	bne.n	810f4ee <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 810f4ea:	2300      	movs	r3, #0
 810f4ec:	e023      	b.n	810f536 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 810f4ee:	697b      	ldr	r3, [r7, #20]
 810f4f0:	3301      	adds	r3, #1
 810f4f2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f4f4:	697b      	ldr	r3, [r7, #20]
 810f4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f4fa:	d1e4      	bne.n	810f4c6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 810f4fc:	2300      	movs	r3, #0
 810f4fe:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f500:	e7e1      	b.n	810f4c6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f502:	78fb      	ldrb	r3, [r7, #3]
 810f504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f508:	00db      	lsls	r3, r3, #3
 810f50a:	687a      	ldr	r2, [r7, #4]
 810f50c:	4413      	add	r3, r2
 810f50e:	3304      	adds	r3, #4
 810f510:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f512:	68bb      	ldr	r3, [r7, #8]
 810f514:	78fa      	ldrb	r2, [r7, #3]
 810f516:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f518:	693b      	ldr	r3, [r7, #16]
 810f51a:	b2da      	uxtb	r2, r3
 810f51c:	68bb      	ldr	r3, [r7, #8]
 810f51e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f520:	68bb      	ldr	r3, [r7, #8]
 810f522:	68fa      	ldr	r2, [r7, #12]
 810f524:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f526:	687a      	ldr	r2, [r7, #4]
 810f528:	697b      	ldr	r3, [r7, #20]
 810f52a:	3380      	adds	r3, #128	; 0x80
 810f52c:	009b      	lsls	r3, r3, #2
 810f52e:	4413      	add	r3, r2
 810f530:	68ba      	ldr	r2, [r7, #8]
 810f532:	605a      	str	r2, [r3, #4]
	return true;
 810f534:	2301      	movs	r3, #1
}
 810f536:	4618      	mov	r0, r3
 810f538:	3718      	adds	r7, #24
 810f53a:	46bd      	mov	sp, r7
 810f53c:	bd80      	pop	{r7, pc}
 810f53e:	bf00      	nop
 810f540:	08115af0 	.word	0x08115af0

0810f544 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f544:	b580      	push	{r7, lr}
 810f546:	b086      	sub	sp, #24
 810f548:	af00      	add	r7, sp, #0
 810f54a:	6078      	str	r0, [r7, #4]
 810f54c:	460b      	mov	r3, r1
 810f54e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f550:	2310      	movs	r3, #16
 810f552:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f554:	4829      	ldr	r0, [pc, #164]	; (810f5fc <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 810f556:	f7ff fd3d 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f55a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f55c:	68fb      	ldr	r3, [r7, #12]
 810f55e:	b2db      	uxtb	r3, r3
 810f560:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f562:	78fb      	ldrb	r3, [r7, #3]
 810f564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f568:	687a      	ldr	r2, [r7, #4]
 810f56a:	00db      	lsls	r3, r3, #3
 810f56c:	4413      	add	r3, r2
 810f56e:	689b      	ldr	r3, [r3, #8]
 810f570:	2b00      	cmp	r3, #0
 810f572:	d001      	beq.n	810f578 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f574:	2300      	movs	r3, #0
 810f576:	e03c      	b.n	810f5f2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f578:	693b      	ldr	r3, [r7, #16]
 810f57a:	2bff      	cmp	r3, #255	; 0xff
 810f57c:	d901      	bls.n	810f582 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 810f57e:	2300      	movs	r3, #0
 810f580:	e037      	b.n	810f5f2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f582:	687a      	ldr	r2, [r7, #4]
 810f584:	697b      	ldr	r3, [r7, #20]
 810f586:	3380      	adds	r3, #128	; 0x80
 810f588:	009b      	lsls	r3, r3, #2
 810f58a:	4413      	add	r3, r2
 810f58c:	685b      	ldr	r3, [r3, #4]
 810f58e:	2b00      	cmp	r3, #0
 810f590:	d015      	beq.n	810f5be <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f592:	687a      	ldr	r2, [r7, #4]
 810f594:	697b      	ldr	r3, [r7, #20]
 810f596:	3380      	adds	r3, #128	; 0x80
 810f598:	009b      	lsls	r3, r3, #2
 810f59a:	4413      	add	r3, r2
 810f59c:	685b      	ldr	r3, [r3, #4]
 810f59e:	685b      	ldr	r3, [r3, #4]
 810f5a0:	68fa      	ldr	r2, [r7, #12]
 810f5a2:	429a      	cmp	r2, r3
 810f5a4:	d101      	bne.n	810f5aa <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 810f5a6:	2300      	movs	r3, #0
 810f5a8:	e023      	b.n	810f5f2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 810f5aa:	697b      	ldr	r3, [r7, #20]
 810f5ac:	3301      	adds	r3, #1
 810f5ae:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f5b0:	697b      	ldr	r3, [r7, #20]
 810f5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f5b6:	d1e4      	bne.n	810f582 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 810f5b8:	2300      	movs	r3, #0
 810f5ba:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f5bc:	e7e1      	b.n	810f582 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f5be:	78fb      	ldrb	r3, [r7, #3]
 810f5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f5c4:	00db      	lsls	r3, r3, #3
 810f5c6:	687a      	ldr	r2, [r7, #4]
 810f5c8:	4413      	add	r3, r2
 810f5ca:	3304      	adds	r3, #4
 810f5cc:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f5ce:	68bb      	ldr	r3, [r7, #8]
 810f5d0:	78fa      	ldrb	r2, [r7, #3]
 810f5d2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f5d4:	693b      	ldr	r3, [r7, #16]
 810f5d6:	b2da      	uxtb	r2, r3
 810f5d8:	68bb      	ldr	r3, [r7, #8]
 810f5da:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f5dc:	68bb      	ldr	r3, [r7, #8]
 810f5de:	68fa      	ldr	r2, [r7, #12]
 810f5e0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f5e2:	687a      	ldr	r2, [r7, #4]
 810f5e4:	697b      	ldr	r3, [r7, #20]
 810f5e6:	3380      	adds	r3, #128	; 0x80
 810f5e8:	009b      	lsls	r3, r3, #2
 810f5ea:	4413      	add	r3, r2
 810f5ec:	68ba      	ldr	r2, [r7, #8]
 810f5ee:	605a      	str	r2, [r3, #4]
	return true;
 810f5f0:	2301      	movs	r3, #1
}
 810f5f2:	4618      	mov	r0, r3
 810f5f4:	3718      	adds	r7, #24
 810f5f6:	46bd      	mov	sp, r7
 810f5f8:	bd80      	pop	{r7, pc}
 810f5fa:	bf00      	nop
 810f5fc:	08115ad0 	.word	0x08115ad0

0810f600 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f600:	b580      	push	{r7, lr}
 810f602:	b086      	sub	sp, #24
 810f604:	af00      	add	r7, sp, #0
 810f606:	6078      	str	r0, [r7, #4]
 810f608:	460b      	mov	r3, r1
 810f60a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f60c:	2301      	movs	r3, #1
 810f60e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f610:	4829      	ldr	r0, [pc, #164]	; (810f6b8 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0xb8>)
 810f612:	f7ff fcdf 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f616:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f618:	68fb      	ldr	r3, [r7, #12]
 810f61a:	b2db      	uxtb	r3, r3
 810f61c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f61e:	78fb      	ldrb	r3, [r7, #3]
 810f620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f624:	687a      	ldr	r2, [r7, #4]
 810f626:	00db      	lsls	r3, r3, #3
 810f628:	4413      	add	r3, r2
 810f62a:	689b      	ldr	r3, [r3, #8]
 810f62c:	2b00      	cmp	r3, #0
 810f62e:	d001      	beq.n	810f634 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f630:	2300      	movs	r3, #0
 810f632:	e03c      	b.n	810f6ae <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f634:	693b      	ldr	r3, [r7, #16]
 810f636:	2bff      	cmp	r3, #255	; 0xff
 810f638:	d901      	bls.n	810f63e <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x3e>
		return false; // Packet size too large
 810f63a:	2300      	movs	r3, #0
 810f63c:	e037      	b.n	810f6ae <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f63e:	687a      	ldr	r2, [r7, #4]
 810f640:	697b      	ldr	r3, [r7, #20]
 810f642:	3380      	adds	r3, #128	; 0x80
 810f644:	009b      	lsls	r3, r3, #2
 810f646:	4413      	add	r3, r2
 810f648:	685b      	ldr	r3, [r3, #4]
 810f64a:	2b00      	cmp	r3, #0
 810f64c:	d015      	beq.n	810f67a <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f64e:	687a      	ldr	r2, [r7, #4]
 810f650:	697b      	ldr	r3, [r7, #20]
 810f652:	3380      	adds	r3, #128	; 0x80
 810f654:	009b      	lsls	r3, r3, #2
 810f656:	4413      	add	r3, r2
 810f658:	685b      	ldr	r3, [r3, #4]
 810f65a:	685b      	ldr	r3, [r3, #4]
 810f65c:	68fa      	ldr	r2, [r7, #12]
 810f65e:	429a      	cmp	r2, r3
 810f660:	d101      	bne.n	810f666 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x66>
			return false; // Packet type already defined
 810f662:	2300      	movs	r3, #0
 810f664:	e023      	b.n	810f6ae <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0xae>
		insertion_point++;
 810f666:	697b      	ldr	r3, [r7, #20]
 810f668:	3301      	adds	r3, #1
 810f66a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f66c:	697b      	ldr	r3, [r7, #20]
 810f66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f672:	d1e4      	bne.n	810f63e <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x3e>
			insertion_point = 0;
 810f674:	2300      	movs	r3, #0
 810f676:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f678:	e7e1      	b.n	810f63e <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f67a:	78fb      	ldrb	r3, [r7, #3]
 810f67c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f680:	00db      	lsls	r3, r3, #3
 810f682:	687a      	ldr	r2, [r7, #4]
 810f684:	4413      	add	r3, r2
 810f686:	3304      	adds	r3, #4
 810f688:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f68a:	68bb      	ldr	r3, [r7, #8]
 810f68c:	78fa      	ldrb	r2, [r7, #3]
 810f68e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f690:	693b      	ldr	r3, [r7, #16]
 810f692:	b2da      	uxtb	r2, r3
 810f694:	68bb      	ldr	r3, [r7, #8]
 810f696:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f698:	68bb      	ldr	r3, [r7, #8]
 810f69a:	68fa      	ldr	r2, [r7, #12]
 810f69c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f69e:	687a      	ldr	r2, [r7, #4]
 810f6a0:	697b      	ldr	r3, [r7, #20]
 810f6a2:	3380      	adds	r3, #128	; 0x80
 810f6a4:	009b      	lsls	r3, r3, #2
 810f6a6:	4413      	add	r3, r2
 810f6a8:	68ba      	ldr	r2, [r7, #8]
 810f6aa:	605a      	str	r2, [r3, #4]
	return true;
 810f6ac:	2301      	movs	r3, #1
}
 810f6ae:	4618      	mov	r0, r3
 810f6b0:	3718      	adds	r7, #24
 810f6b2:	46bd      	mov	sp, r7
 810f6b4:	bd80      	pop	{r7, pc}
 810f6b6:	bf00      	nop
 810f6b8:	08115aac 	.word	0x08115aac

0810f6bc <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f6bc:	b580      	push	{r7, lr}
 810f6be:	b086      	sub	sp, #24
 810f6c0:	af00      	add	r7, sp, #0
 810f6c2:	6078      	str	r0, [r7, #4]
 810f6c4:	460b      	mov	r3, r1
 810f6c6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f6c8:	2301      	movs	r3, #1
 810f6ca:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f6cc:	4829      	ldr	r0, [pc, #164]	; (810f774 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0xb8>)
 810f6ce:	f7ff fc81 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f6d2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f6d4:	68fb      	ldr	r3, [r7, #12]
 810f6d6:	b2db      	uxtb	r3, r3
 810f6d8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f6da:	78fb      	ldrb	r3, [r7, #3]
 810f6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f6e0:	687a      	ldr	r2, [r7, #4]
 810f6e2:	00db      	lsls	r3, r3, #3
 810f6e4:	4413      	add	r3, r2
 810f6e6:	689b      	ldr	r3, [r3, #8]
 810f6e8:	2b00      	cmp	r3, #0
 810f6ea:	d001      	beq.n	810f6f0 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f6ec:	2300      	movs	r3, #0
 810f6ee:	e03c      	b.n	810f76a <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f6f0:	693b      	ldr	r3, [r7, #16]
 810f6f2:	2bff      	cmp	r3, #255	; 0xff
 810f6f4:	d901      	bls.n	810f6fa <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x3e>
		return false; // Packet size too large
 810f6f6:	2300      	movs	r3, #0
 810f6f8:	e037      	b.n	810f76a <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f6fa:	687a      	ldr	r2, [r7, #4]
 810f6fc:	697b      	ldr	r3, [r7, #20]
 810f6fe:	3380      	adds	r3, #128	; 0x80
 810f700:	009b      	lsls	r3, r3, #2
 810f702:	4413      	add	r3, r2
 810f704:	685b      	ldr	r3, [r3, #4]
 810f706:	2b00      	cmp	r3, #0
 810f708:	d015      	beq.n	810f736 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f70a:	687a      	ldr	r2, [r7, #4]
 810f70c:	697b      	ldr	r3, [r7, #20]
 810f70e:	3380      	adds	r3, #128	; 0x80
 810f710:	009b      	lsls	r3, r3, #2
 810f712:	4413      	add	r3, r2
 810f714:	685b      	ldr	r3, [r3, #4]
 810f716:	685b      	ldr	r3, [r3, #4]
 810f718:	68fa      	ldr	r2, [r7, #12]
 810f71a:	429a      	cmp	r2, r3
 810f71c:	d101      	bne.n	810f722 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x66>
			return false; // Packet type already defined
 810f71e:	2300      	movs	r3, #0
 810f720:	e023      	b.n	810f76a <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0xae>
		insertion_point++;
 810f722:	697b      	ldr	r3, [r7, #20]
 810f724:	3301      	adds	r3, #1
 810f726:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f728:	697b      	ldr	r3, [r7, #20]
 810f72a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f72e:	d1e4      	bne.n	810f6fa <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x3e>
			insertion_point = 0;
 810f730:	2300      	movs	r3, #0
 810f732:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f734:	e7e1      	b.n	810f6fa <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f736:	78fb      	ldrb	r3, [r7, #3]
 810f738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f73c:	00db      	lsls	r3, r3, #3
 810f73e:	687a      	ldr	r2, [r7, #4]
 810f740:	4413      	add	r3, r2
 810f742:	3304      	adds	r3, #4
 810f744:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f746:	68bb      	ldr	r3, [r7, #8]
 810f748:	78fa      	ldrb	r2, [r7, #3]
 810f74a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f74c:	693b      	ldr	r3, [r7, #16]
 810f74e:	b2da      	uxtb	r2, r3
 810f750:	68bb      	ldr	r3, [r7, #8]
 810f752:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f754:	68bb      	ldr	r3, [r7, #8]
 810f756:	68fa      	ldr	r2, [r7, #12]
 810f758:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f75a:	687a      	ldr	r2, [r7, #4]
 810f75c:	697b      	ldr	r3, [r7, #20]
 810f75e:	3380      	adds	r3, #128	; 0x80
 810f760:	009b      	lsls	r3, r3, #2
 810f762:	4413      	add	r3, r2
 810f764:	68ba      	ldr	r2, [r7, #8]
 810f766:	605a      	str	r2, [r3, #4]
	return true;
 810f768:	2301      	movs	r3, #1
}
 810f76a:	4618      	mov	r0, r3
 810f76c:	3718      	adds	r7, #24
 810f76e:	46bd      	mov	sp, r7
 810f770:	bd80      	pop	{r7, pc}
 810f772:	bf00      	nop
 810f774:	08115a8c 	.word	0x08115a8c

0810f778 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f778:	b580      	push	{r7, lr}
 810f77a:	b086      	sub	sp, #24
 810f77c:	af00      	add	r7, sp, #0
 810f77e:	6078      	str	r0, [r7, #4]
 810f780:	460b      	mov	r3, r1
 810f782:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f784:	2301      	movs	r3, #1
 810f786:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f788:	4829      	ldr	r0, [pc, #164]	; (810f830 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0xb8>)
 810f78a:	f7ff fc23 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f78e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f790:	68fb      	ldr	r3, [r7, #12]
 810f792:	b2db      	uxtb	r3, r3
 810f794:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f796:	78fb      	ldrb	r3, [r7, #3]
 810f798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f79c:	687a      	ldr	r2, [r7, #4]
 810f79e:	00db      	lsls	r3, r3, #3
 810f7a0:	4413      	add	r3, r2
 810f7a2:	689b      	ldr	r3, [r3, #8]
 810f7a4:	2b00      	cmp	r3, #0
 810f7a6:	d001      	beq.n	810f7ac <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f7a8:	2300      	movs	r3, #0
 810f7aa:	e03c      	b.n	810f826 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f7ac:	693b      	ldr	r3, [r7, #16]
 810f7ae:	2bff      	cmp	r3, #255	; 0xff
 810f7b0:	d901      	bls.n	810f7b6 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x3e>
		return false; // Packet size too large
 810f7b2:	2300      	movs	r3, #0
 810f7b4:	e037      	b.n	810f826 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f7b6:	687a      	ldr	r2, [r7, #4]
 810f7b8:	697b      	ldr	r3, [r7, #20]
 810f7ba:	3380      	adds	r3, #128	; 0x80
 810f7bc:	009b      	lsls	r3, r3, #2
 810f7be:	4413      	add	r3, r2
 810f7c0:	685b      	ldr	r3, [r3, #4]
 810f7c2:	2b00      	cmp	r3, #0
 810f7c4:	d015      	beq.n	810f7f2 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f7c6:	687a      	ldr	r2, [r7, #4]
 810f7c8:	697b      	ldr	r3, [r7, #20]
 810f7ca:	3380      	adds	r3, #128	; 0x80
 810f7cc:	009b      	lsls	r3, r3, #2
 810f7ce:	4413      	add	r3, r2
 810f7d0:	685b      	ldr	r3, [r3, #4]
 810f7d2:	685b      	ldr	r3, [r3, #4]
 810f7d4:	68fa      	ldr	r2, [r7, #12]
 810f7d6:	429a      	cmp	r2, r3
 810f7d8:	d101      	bne.n	810f7de <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x66>
			return false; // Packet type already defined
 810f7da:	2300      	movs	r3, #0
 810f7dc:	e023      	b.n	810f826 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0xae>
		insertion_point++;
 810f7de:	697b      	ldr	r3, [r7, #20]
 810f7e0:	3301      	adds	r3, #1
 810f7e2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f7e4:	697b      	ldr	r3, [r7, #20]
 810f7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f7ea:	d1e4      	bne.n	810f7b6 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x3e>
			insertion_point = 0;
 810f7ec:	2300      	movs	r3, #0
 810f7ee:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f7f0:	e7e1      	b.n	810f7b6 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f7f2:	78fb      	ldrb	r3, [r7, #3]
 810f7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f7f8:	00db      	lsls	r3, r3, #3
 810f7fa:	687a      	ldr	r2, [r7, #4]
 810f7fc:	4413      	add	r3, r2
 810f7fe:	3304      	adds	r3, #4
 810f800:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f802:	68bb      	ldr	r3, [r7, #8]
 810f804:	78fa      	ldrb	r2, [r7, #3]
 810f806:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f808:	693b      	ldr	r3, [r7, #16]
 810f80a:	b2da      	uxtb	r2, r3
 810f80c:	68bb      	ldr	r3, [r7, #8]
 810f80e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f810:	68bb      	ldr	r3, [r7, #8]
 810f812:	68fa      	ldr	r2, [r7, #12]
 810f814:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f816:	687a      	ldr	r2, [r7, #4]
 810f818:	697b      	ldr	r3, [r7, #20]
 810f81a:	3380      	adds	r3, #128	; 0x80
 810f81c:	009b      	lsls	r3, r3, #2
 810f81e:	4413      	add	r3, r2
 810f820:	68ba      	ldr	r2, [r7, #8]
 810f822:	605a      	str	r2, [r3, #4]
	return true;
 810f824:	2301      	movs	r3, #1
}
 810f826:	4618      	mov	r0, r3
 810f828:	3718      	adds	r7, #24
 810f82a:	46bd      	mov	sp, r7
 810f82c:	bd80      	pop	{r7, pc}
 810f82e:	bf00      	nop
 810f830:	08115a6c 	.word	0x08115a6c

0810f834 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f834:	b580      	push	{r7, lr}
 810f836:	b086      	sub	sp, #24
 810f838:	af00      	add	r7, sp, #0
 810f83a:	6078      	str	r0, [r7, #4]
 810f83c:	460b      	mov	r3, r1
 810f83e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f840:	2301      	movs	r3, #1
 810f842:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f844:	4829      	ldr	r0, [pc, #164]	; (810f8ec <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0xb8>)
 810f846:	f7ff fbc5 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f84a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f84c:	68fb      	ldr	r3, [r7, #12]
 810f84e:	b2db      	uxtb	r3, r3
 810f850:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f852:	78fb      	ldrb	r3, [r7, #3]
 810f854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f858:	687a      	ldr	r2, [r7, #4]
 810f85a:	00db      	lsls	r3, r3, #3
 810f85c:	4413      	add	r3, r2
 810f85e:	689b      	ldr	r3, [r3, #8]
 810f860:	2b00      	cmp	r3, #0
 810f862:	d001      	beq.n	810f868 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f864:	2300      	movs	r3, #0
 810f866:	e03c      	b.n	810f8e2 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f868:	693b      	ldr	r3, [r7, #16]
 810f86a:	2bff      	cmp	r3, #255	; 0xff
 810f86c:	d901      	bls.n	810f872 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x3e>
		return false; // Packet size too large
 810f86e:	2300      	movs	r3, #0
 810f870:	e037      	b.n	810f8e2 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f872:	687a      	ldr	r2, [r7, #4]
 810f874:	697b      	ldr	r3, [r7, #20]
 810f876:	3380      	adds	r3, #128	; 0x80
 810f878:	009b      	lsls	r3, r3, #2
 810f87a:	4413      	add	r3, r2
 810f87c:	685b      	ldr	r3, [r3, #4]
 810f87e:	2b00      	cmp	r3, #0
 810f880:	d015      	beq.n	810f8ae <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f882:	687a      	ldr	r2, [r7, #4]
 810f884:	697b      	ldr	r3, [r7, #20]
 810f886:	3380      	adds	r3, #128	; 0x80
 810f888:	009b      	lsls	r3, r3, #2
 810f88a:	4413      	add	r3, r2
 810f88c:	685b      	ldr	r3, [r3, #4]
 810f88e:	685b      	ldr	r3, [r3, #4]
 810f890:	68fa      	ldr	r2, [r7, #12]
 810f892:	429a      	cmp	r2, r3
 810f894:	d101      	bne.n	810f89a <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x66>
			return false; // Packet type already defined
 810f896:	2300      	movs	r3, #0
 810f898:	e023      	b.n	810f8e2 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0xae>
		insertion_point++;
 810f89a:	697b      	ldr	r3, [r7, #20]
 810f89c:	3301      	adds	r3, #1
 810f89e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f8a0:	697b      	ldr	r3, [r7, #20]
 810f8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f8a6:	d1e4      	bne.n	810f872 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x3e>
			insertion_point = 0;
 810f8a8:	2300      	movs	r3, #0
 810f8aa:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f8ac:	e7e1      	b.n	810f872 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f8ae:	78fb      	ldrb	r3, [r7, #3]
 810f8b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f8b4:	00db      	lsls	r3, r3, #3
 810f8b6:	687a      	ldr	r2, [r7, #4]
 810f8b8:	4413      	add	r3, r2
 810f8ba:	3304      	adds	r3, #4
 810f8bc:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f8be:	68bb      	ldr	r3, [r7, #8]
 810f8c0:	78fa      	ldrb	r2, [r7, #3]
 810f8c2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f8c4:	693b      	ldr	r3, [r7, #16]
 810f8c6:	b2da      	uxtb	r2, r3
 810f8c8:	68bb      	ldr	r3, [r7, #8]
 810f8ca:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f8cc:	68bb      	ldr	r3, [r7, #8]
 810f8ce:	68fa      	ldr	r2, [r7, #12]
 810f8d0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f8d2:	687a      	ldr	r2, [r7, #4]
 810f8d4:	697b      	ldr	r3, [r7, #20]
 810f8d6:	3380      	adds	r3, #128	; 0x80
 810f8d8:	009b      	lsls	r3, r3, #2
 810f8da:	4413      	add	r3, r2
 810f8dc:	68ba      	ldr	r2, [r7, #8]
 810f8de:	605a      	str	r2, [r3, #4]
	return true;
 810f8e0:	2301      	movs	r3, #1
}
 810f8e2:	4618      	mov	r0, r3
 810f8e4:	3718      	adds	r7, #24
 810f8e6:	46bd      	mov	sp, r7
 810f8e8:	bd80      	pop	{r7, pc}
 810f8ea:	bf00      	nop
 810f8ec:	08115a4c 	.word	0x08115a4c

0810f8f0 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f8f0:	b580      	push	{r7, lr}
 810f8f2:	b086      	sub	sp, #24
 810f8f4:	af00      	add	r7, sp, #0
 810f8f6:	6078      	str	r0, [r7, #4]
 810f8f8:	460b      	mov	r3, r1
 810f8fa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f8fc:	2301      	movs	r3, #1
 810f8fe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f900:	4829      	ldr	r0, [pc, #164]	; (810f9a8 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0xb8>)
 810f902:	f7ff fb67 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f906:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f908:	68fb      	ldr	r3, [r7, #12]
 810f90a:	b2db      	uxtb	r3, r3
 810f90c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f90e:	78fb      	ldrb	r3, [r7, #3]
 810f910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f914:	687a      	ldr	r2, [r7, #4]
 810f916:	00db      	lsls	r3, r3, #3
 810f918:	4413      	add	r3, r2
 810f91a:	689b      	ldr	r3, [r3, #8]
 810f91c:	2b00      	cmp	r3, #0
 810f91e:	d001      	beq.n	810f924 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f920:	2300      	movs	r3, #0
 810f922:	e03c      	b.n	810f99e <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f924:	693b      	ldr	r3, [r7, #16]
 810f926:	2bff      	cmp	r3, #255	; 0xff
 810f928:	d901      	bls.n	810f92e <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x3e>
		return false; // Packet size too large
 810f92a:	2300      	movs	r3, #0
 810f92c:	e037      	b.n	810f99e <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f92e:	687a      	ldr	r2, [r7, #4]
 810f930:	697b      	ldr	r3, [r7, #20]
 810f932:	3380      	adds	r3, #128	; 0x80
 810f934:	009b      	lsls	r3, r3, #2
 810f936:	4413      	add	r3, r2
 810f938:	685b      	ldr	r3, [r3, #4]
 810f93a:	2b00      	cmp	r3, #0
 810f93c:	d015      	beq.n	810f96a <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f93e:	687a      	ldr	r2, [r7, #4]
 810f940:	697b      	ldr	r3, [r7, #20]
 810f942:	3380      	adds	r3, #128	; 0x80
 810f944:	009b      	lsls	r3, r3, #2
 810f946:	4413      	add	r3, r2
 810f948:	685b      	ldr	r3, [r3, #4]
 810f94a:	685b      	ldr	r3, [r3, #4]
 810f94c:	68fa      	ldr	r2, [r7, #12]
 810f94e:	429a      	cmp	r2, r3
 810f950:	d101      	bne.n	810f956 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x66>
			return false; // Packet type already defined
 810f952:	2300      	movs	r3, #0
 810f954:	e023      	b.n	810f99e <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0xae>
		insertion_point++;
 810f956:	697b      	ldr	r3, [r7, #20]
 810f958:	3301      	adds	r3, #1
 810f95a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f95c:	697b      	ldr	r3, [r7, #20]
 810f95e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f962:	d1e4      	bne.n	810f92e <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x3e>
			insertion_point = 0;
 810f964:	2300      	movs	r3, #0
 810f966:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f968:	e7e1      	b.n	810f92e <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f96a:	78fb      	ldrb	r3, [r7, #3]
 810f96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f970:	00db      	lsls	r3, r3, #3
 810f972:	687a      	ldr	r2, [r7, #4]
 810f974:	4413      	add	r3, r2
 810f976:	3304      	adds	r3, #4
 810f978:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f97a:	68bb      	ldr	r3, [r7, #8]
 810f97c:	78fa      	ldrb	r2, [r7, #3]
 810f97e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f980:	693b      	ldr	r3, [r7, #16]
 810f982:	b2da      	uxtb	r2, r3
 810f984:	68bb      	ldr	r3, [r7, #8]
 810f986:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f988:	68bb      	ldr	r3, [r7, #8]
 810f98a:	68fa      	ldr	r2, [r7, #12]
 810f98c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f98e:	687a      	ldr	r2, [r7, #4]
 810f990:	697b      	ldr	r3, [r7, #20]
 810f992:	3380      	adds	r3, #128	; 0x80
 810f994:	009b      	lsls	r3, r3, #2
 810f996:	4413      	add	r3, r2
 810f998:	68ba      	ldr	r2, [r7, #8]
 810f99a:	605a      	str	r2, [r3, #4]
	return true;
 810f99c:	2301      	movs	r3, #1
}
 810f99e:	4618      	mov	r0, r3
 810f9a0:	3718      	adds	r7, #24
 810f9a2:	46bd      	mov	sp, r7
 810f9a4:	bd80      	pop	{r7, pc}
 810f9a6:	bf00      	nop
 810f9a8:	08115a2c 	.word	0x08115a2c

0810f9ac <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f9ac:	b580      	push	{r7, lr}
 810f9ae:	b086      	sub	sp, #24
 810f9b0:	af00      	add	r7, sp, #0
 810f9b2:	6078      	str	r0, [r7, #4]
 810f9b4:	460b      	mov	r3, r1
 810f9b6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f9b8:	2301      	movs	r3, #1
 810f9ba:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f9bc:	4829      	ldr	r0, [pc, #164]	; (810fa64 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0xb8>)
 810f9be:	f7ff fb09 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810f9c2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f9c4:	68fb      	ldr	r3, [r7, #12]
 810f9c6:	b2db      	uxtb	r3, r3
 810f9c8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f9ca:	78fb      	ldrb	r3, [r7, #3]
 810f9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f9d0:	687a      	ldr	r2, [r7, #4]
 810f9d2:	00db      	lsls	r3, r3, #3
 810f9d4:	4413      	add	r3, r2
 810f9d6:	689b      	ldr	r3, [r3, #8]
 810f9d8:	2b00      	cmp	r3, #0
 810f9da:	d001      	beq.n	810f9e0 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f9dc:	2300      	movs	r3, #0
 810f9de:	e03c      	b.n	810fa5a <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f9e0:	693b      	ldr	r3, [r7, #16]
 810f9e2:	2bff      	cmp	r3, #255	; 0xff
 810f9e4:	d901      	bls.n	810f9ea <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x3e>
		return false; // Packet size too large
 810f9e6:	2300      	movs	r3, #0
 810f9e8:	e037      	b.n	810fa5a <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f9ea:	687a      	ldr	r2, [r7, #4]
 810f9ec:	697b      	ldr	r3, [r7, #20]
 810f9ee:	3380      	adds	r3, #128	; 0x80
 810f9f0:	009b      	lsls	r3, r3, #2
 810f9f2:	4413      	add	r3, r2
 810f9f4:	685b      	ldr	r3, [r3, #4]
 810f9f6:	2b00      	cmp	r3, #0
 810f9f8:	d015      	beq.n	810fa26 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f9fa:	687a      	ldr	r2, [r7, #4]
 810f9fc:	697b      	ldr	r3, [r7, #20]
 810f9fe:	3380      	adds	r3, #128	; 0x80
 810fa00:	009b      	lsls	r3, r3, #2
 810fa02:	4413      	add	r3, r2
 810fa04:	685b      	ldr	r3, [r3, #4]
 810fa06:	685b      	ldr	r3, [r3, #4]
 810fa08:	68fa      	ldr	r2, [r7, #12]
 810fa0a:	429a      	cmp	r2, r3
 810fa0c:	d101      	bne.n	810fa12 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x66>
			return false; // Packet type already defined
 810fa0e:	2300      	movs	r3, #0
 810fa10:	e023      	b.n	810fa5a <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0xae>
		insertion_point++;
 810fa12:	697b      	ldr	r3, [r7, #20]
 810fa14:	3301      	adds	r3, #1
 810fa16:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810fa18:	697b      	ldr	r3, [r7, #20]
 810fa1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810fa1e:	d1e4      	bne.n	810f9ea <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x3e>
			insertion_point = 0;
 810fa20:	2300      	movs	r3, #0
 810fa22:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810fa24:	e7e1      	b.n	810f9ea <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810fa26:	78fb      	ldrb	r3, [r7, #3]
 810fa28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fa2c:	00db      	lsls	r3, r3, #3
 810fa2e:	687a      	ldr	r2, [r7, #4]
 810fa30:	4413      	add	r3, r2
 810fa32:	3304      	adds	r3, #4
 810fa34:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810fa36:	68bb      	ldr	r3, [r7, #8]
 810fa38:	78fa      	ldrb	r2, [r7, #3]
 810fa3a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810fa3c:	693b      	ldr	r3, [r7, #16]
 810fa3e:	b2da      	uxtb	r2, r3
 810fa40:	68bb      	ldr	r3, [r7, #8]
 810fa42:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810fa44:	68bb      	ldr	r3, [r7, #8]
 810fa46:	68fa      	ldr	r2, [r7, #12]
 810fa48:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810fa4a:	687a      	ldr	r2, [r7, #4]
 810fa4c:	697b      	ldr	r3, [r7, #20]
 810fa4e:	3380      	adds	r3, #128	; 0x80
 810fa50:	009b      	lsls	r3, r3, #2
 810fa52:	4413      	add	r3, r2
 810fa54:	68ba      	ldr	r2, [r7, #8]
 810fa56:	605a      	str	r2, [r3, #4]
	return true;
 810fa58:	2301      	movs	r3, #1
}
 810fa5a:	4618      	mov	r0, r3
 810fa5c:	3718      	adds	r7, #24
 810fa5e:	46bd      	mov	sp, r7
 810fa60:	bd80      	pop	{r7, pc}
 810fa62:	bf00      	nop
 810fa64:	08115a0c 	.word	0x08115a0c

0810fa68 <_ZN10MessageBus6defineI9FsmPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810fa68:	b580      	push	{r7, lr}
 810fa6a:	b086      	sub	sp, #24
 810fa6c:	af00      	add	r7, sp, #0
 810fa6e:	6078      	str	r0, [r7, #4]
 810fa70:	460b      	mov	r3, r1
 810fa72:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810fa74:	2304      	movs	r3, #4
 810fa76:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810fa78:	4829      	ldr	r0, [pc, #164]	; (810fb20 <_ZN10MessageBus6defineI9FsmPacketEEbh+0xb8>)
 810fa7a:	f7ff faab 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810fa7e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810fa80:	68fb      	ldr	r3, [r7, #12]
 810fa82:	b2db      	uxtb	r3, r3
 810fa84:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810fa86:	78fb      	ldrb	r3, [r7, #3]
 810fa88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fa8c:	687a      	ldr	r2, [r7, #4]
 810fa8e:	00db      	lsls	r3, r3, #3
 810fa90:	4413      	add	r3, r2
 810fa92:	689b      	ldr	r3, [r3, #8]
 810fa94:	2b00      	cmp	r3, #0
 810fa96:	d001      	beq.n	810fa9c <_ZN10MessageBus6defineI9FsmPacketEEbh+0x34>
		return false; // Packet ID already in use
 810fa98:	2300      	movs	r3, #0
 810fa9a:	e03c      	b.n	810fb16 <_ZN10MessageBus6defineI9FsmPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810fa9c:	693b      	ldr	r3, [r7, #16]
 810fa9e:	2bff      	cmp	r3, #255	; 0xff
 810faa0:	d901      	bls.n	810faa6 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x3e>
		return false; // Packet size too large
 810faa2:	2300      	movs	r3, #0
 810faa4:	e037      	b.n	810fb16 <_ZN10MessageBus6defineI9FsmPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810faa6:	687a      	ldr	r2, [r7, #4]
 810faa8:	697b      	ldr	r3, [r7, #20]
 810faaa:	3380      	adds	r3, #128	; 0x80
 810faac:	009b      	lsls	r3, r3, #2
 810faae:	4413      	add	r3, r2
 810fab0:	685b      	ldr	r3, [r3, #4]
 810fab2:	2b00      	cmp	r3, #0
 810fab4:	d015      	beq.n	810fae2 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810fab6:	687a      	ldr	r2, [r7, #4]
 810fab8:	697b      	ldr	r3, [r7, #20]
 810faba:	3380      	adds	r3, #128	; 0x80
 810fabc:	009b      	lsls	r3, r3, #2
 810fabe:	4413      	add	r3, r2
 810fac0:	685b      	ldr	r3, [r3, #4]
 810fac2:	685b      	ldr	r3, [r3, #4]
 810fac4:	68fa      	ldr	r2, [r7, #12]
 810fac6:	429a      	cmp	r2, r3
 810fac8:	d101      	bne.n	810face <_ZN10MessageBus6defineI9FsmPacketEEbh+0x66>
			return false; // Packet type already defined
 810faca:	2300      	movs	r3, #0
 810facc:	e023      	b.n	810fb16 <_ZN10MessageBus6defineI9FsmPacketEEbh+0xae>
		insertion_point++;
 810face:	697b      	ldr	r3, [r7, #20]
 810fad0:	3301      	adds	r3, #1
 810fad2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810fad4:	697b      	ldr	r3, [r7, #20]
 810fad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810fada:	d1e4      	bne.n	810faa6 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x3e>
			insertion_point = 0;
 810fadc:	2300      	movs	r3, #0
 810fade:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810fae0:	e7e1      	b.n	810faa6 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810fae2:	78fb      	ldrb	r3, [r7, #3]
 810fae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fae8:	00db      	lsls	r3, r3, #3
 810faea:	687a      	ldr	r2, [r7, #4]
 810faec:	4413      	add	r3, r2
 810faee:	3304      	adds	r3, #4
 810faf0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810faf2:	68bb      	ldr	r3, [r7, #8]
 810faf4:	78fa      	ldrb	r2, [r7, #3]
 810faf6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810faf8:	693b      	ldr	r3, [r7, #16]
 810fafa:	b2da      	uxtb	r2, r3
 810fafc:	68bb      	ldr	r3, [r7, #8]
 810fafe:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810fb00:	68bb      	ldr	r3, [r7, #8]
 810fb02:	68fa      	ldr	r2, [r7, #12]
 810fb04:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810fb06:	687a      	ldr	r2, [r7, #4]
 810fb08:	697b      	ldr	r3, [r7, #20]
 810fb0a:	3380      	adds	r3, #128	; 0x80
 810fb0c:	009b      	lsls	r3, r3, #2
 810fb0e:	4413      	add	r3, r2
 810fb10:	68ba      	ldr	r2, [r7, #8]
 810fb12:	605a      	str	r2, [r3, #4]
	return true;
 810fb14:	2301      	movs	r3, #1
}
 810fb16:	4618      	mov	r0, r3
 810fb18:	3718      	adds	r7, #24
 810fb1a:	46bd      	mov	sp, r7
 810fb1c:	bd80      	pop	{r7, pc}
 810fb1e:	bf00      	nop
 810fb20:	081159f8 	.word	0x081159f8

0810fb24 <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810fb24:	b580      	push	{r7, lr}
 810fb26:	b086      	sub	sp, #24
 810fb28:	af00      	add	r7, sp, #0
 810fb2a:	6078      	str	r0, [r7, #4]
 810fb2c:	460b      	mov	r3, r1
 810fb2e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810fb30:	2304      	movs	r3, #4
 810fb32:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810fb34:	4829      	ldr	r0, [pc, #164]	; (810fbdc <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 810fb36:	f7ff fa4d 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810fb3a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810fb3c:	68fb      	ldr	r3, [r7, #12]
 810fb3e:	b2db      	uxtb	r3, r3
 810fb40:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810fb42:	78fb      	ldrb	r3, [r7, #3]
 810fb44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fb48:	687a      	ldr	r2, [r7, #4]
 810fb4a:	00db      	lsls	r3, r3, #3
 810fb4c:	4413      	add	r3, r2
 810fb4e:	689b      	ldr	r3, [r3, #8]
 810fb50:	2b00      	cmp	r3, #0
 810fb52:	d001      	beq.n	810fb58 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 810fb54:	2300      	movs	r3, #0
 810fb56:	e03c      	b.n	810fbd2 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810fb58:	693b      	ldr	r3, [r7, #16]
 810fb5a:	2bff      	cmp	r3, #255	; 0xff
 810fb5c:	d901      	bls.n	810fb62 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 810fb5e:	2300      	movs	r3, #0
 810fb60:	e037      	b.n	810fbd2 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810fb62:	687a      	ldr	r2, [r7, #4]
 810fb64:	697b      	ldr	r3, [r7, #20]
 810fb66:	3380      	adds	r3, #128	; 0x80
 810fb68:	009b      	lsls	r3, r3, #2
 810fb6a:	4413      	add	r3, r2
 810fb6c:	685b      	ldr	r3, [r3, #4]
 810fb6e:	2b00      	cmp	r3, #0
 810fb70:	d015      	beq.n	810fb9e <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810fb72:	687a      	ldr	r2, [r7, #4]
 810fb74:	697b      	ldr	r3, [r7, #20]
 810fb76:	3380      	adds	r3, #128	; 0x80
 810fb78:	009b      	lsls	r3, r3, #2
 810fb7a:	4413      	add	r3, r2
 810fb7c:	685b      	ldr	r3, [r3, #4]
 810fb7e:	685b      	ldr	r3, [r3, #4]
 810fb80:	68fa      	ldr	r2, [r7, #12]
 810fb82:	429a      	cmp	r2, r3
 810fb84:	d101      	bne.n	810fb8a <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 810fb86:	2300      	movs	r3, #0
 810fb88:	e023      	b.n	810fbd2 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 810fb8a:	697b      	ldr	r3, [r7, #20]
 810fb8c:	3301      	adds	r3, #1
 810fb8e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810fb90:	697b      	ldr	r3, [r7, #20]
 810fb92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810fb96:	d1e4      	bne.n	810fb62 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 810fb98:	2300      	movs	r3, #0
 810fb9a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810fb9c:	e7e1      	b.n	810fb62 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810fb9e:	78fb      	ldrb	r3, [r7, #3]
 810fba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fba4:	00db      	lsls	r3, r3, #3
 810fba6:	687a      	ldr	r2, [r7, #4]
 810fba8:	4413      	add	r3, r2
 810fbaa:	3304      	adds	r3, #4
 810fbac:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810fbae:	68bb      	ldr	r3, [r7, #8]
 810fbb0:	78fa      	ldrb	r2, [r7, #3]
 810fbb2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810fbb4:	693b      	ldr	r3, [r7, #16]
 810fbb6:	b2da      	uxtb	r2, r3
 810fbb8:	68bb      	ldr	r3, [r7, #8]
 810fbba:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810fbbc:	68bb      	ldr	r3, [r7, #8]
 810fbbe:	68fa      	ldr	r2, [r7, #12]
 810fbc0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810fbc2:	687a      	ldr	r2, [r7, #4]
 810fbc4:	697b      	ldr	r3, [r7, #20]
 810fbc6:	3380      	adds	r3, #128	; 0x80
 810fbc8:	009b      	lsls	r3, r3, #2
 810fbca:	4413      	add	r3, r2
 810fbcc:	68ba      	ldr	r2, [r7, #8]
 810fbce:	605a      	str	r2, [r3, #4]
	return true;
 810fbd0:	2301      	movs	r3, #1
}
 810fbd2:	4618      	mov	r0, r3
 810fbd4:	3718      	adds	r7, #24
 810fbd6:	46bd      	mov	sp, r7
 810fbd8:	bd80      	pop	{r7, pc}
 810fbda:	bf00      	nop
 810fbdc:	081159e0 	.word	0x081159e0

0810fbe0 <_ZN10MessageBus6defineI10PingPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810fbe0:	b580      	push	{r7, lr}
 810fbe2:	b086      	sub	sp, #24
 810fbe4:	af00      	add	r7, sp, #0
 810fbe6:	6078      	str	r0, [r7, #4]
 810fbe8:	460b      	mov	r3, r1
 810fbea:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810fbec:	2308      	movs	r3, #8
 810fbee:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810fbf0:	4829      	ldr	r0, [pc, #164]	; (810fc98 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 810fbf2:	f7ff f9ef 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810fbf6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810fbf8:	68fb      	ldr	r3, [r7, #12]
 810fbfa:	b2db      	uxtb	r3, r3
 810fbfc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810fbfe:	78fb      	ldrb	r3, [r7, #3]
 810fc00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fc04:	687a      	ldr	r2, [r7, #4]
 810fc06:	00db      	lsls	r3, r3, #3
 810fc08:	4413      	add	r3, r2
 810fc0a:	689b      	ldr	r3, [r3, #8]
 810fc0c:	2b00      	cmp	r3, #0
 810fc0e:	d001      	beq.n	810fc14 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 810fc10:	2300      	movs	r3, #0
 810fc12:	e03c      	b.n	810fc8e <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810fc14:	693b      	ldr	r3, [r7, #16]
 810fc16:	2bff      	cmp	r3, #255	; 0xff
 810fc18:	d901      	bls.n	810fc1e <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 810fc1a:	2300      	movs	r3, #0
 810fc1c:	e037      	b.n	810fc8e <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810fc1e:	687a      	ldr	r2, [r7, #4]
 810fc20:	697b      	ldr	r3, [r7, #20]
 810fc22:	3380      	adds	r3, #128	; 0x80
 810fc24:	009b      	lsls	r3, r3, #2
 810fc26:	4413      	add	r3, r2
 810fc28:	685b      	ldr	r3, [r3, #4]
 810fc2a:	2b00      	cmp	r3, #0
 810fc2c:	d015      	beq.n	810fc5a <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810fc2e:	687a      	ldr	r2, [r7, #4]
 810fc30:	697b      	ldr	r3, [r7, #20]
 810fc32:	3380      	adds	r3, #128	; 0x80
 810fc34:	009b      	lsls	r3, r3, #2
 810fc36:	4413      	add	r3, r2
 810fc38:	685b      	ldr	r3, [r3, #4]
 810fc3a:	685b      	ldr	r3, [r3, #4]
 810fc3c:	68fa      	ldr	r2, [r7, #12]
 810fc3e:	429a      	cmp	r2, r3
 810fc40:	d101      	bne.n	810fc46 <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 810fc42:	2300      	movs	r3, #0
 810fc44:	e023      	b.n	810fc8e <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		insertion_point++;
 810fc46:	697b      	ldr	r3, [r7, #20]
 810fc48:	3301      	adds	r3, #1
 810fc4a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810fc4c:	697b      	ldr	r3, [r7, #20]
 810fc4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810fc52:	d1e4      	bne.n	810fc1e <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 810fc54:	2300      	movs	r3, #0
 810fc56:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810fc58:	e7e1      	b.n	810fc1e <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810fc5a:	78fb      	ldrb	r3, [r7, #3]
 810fc5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fc60:	00db      	lsls	r3, r3, #3
 810fc62:	687a      	ldr	r2, [r7, #4]
 810fc64:	4413      	add	r3, r2
 810fc66:	3304      	adds	r3, #4
 810fc68:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810fc6a:	68bb      	ldr	r3, [r7, #8]
 810fc6c:	78fa      	ldrb	r2, [r7, #3]
 810fc6e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810fc70:	693b      	ldr	r3, [r7, #16]
 810fc72:	b2da      	uxtb	r2, r3
 810fc74:	68bb      	ldr	r3, [r7, #8]
 810fc76:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810fc78:	68bb      	ldr	r3, [r7, #8]
 810fc7a:	68fa      	ldr	r2, [r7, #12]
 810fc7c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810fc7e:	687a      	ldr	r2, [r7, #4]
 810fc80:	697b      	ldr	r3, [r7, #20]
 810fc82:	3380      	adds	r3, #128	; 0x80
 810fc84:	009b      	lsls	r3, r3, #2
 810fc86:	4413      	add	r3, r2
 810fc88:	68ba      	ldr	r2, [r7, #8]
 810fc8a:	605a      	str	r2, [r3, #4]
	return true;
 810fc8c:	2301      	movs	r3, #1
}
 810fc8e:	4618      	mov	r0, r3
 810fc90:	3718      	adds	r7, #24
 810fc92:	46bd      	mov	sp, r7
 810fc94:	bd80      	pop	{r7, pc}
 810fc96:	bf00      	nop
 810fc98:	081159c8 	.word	0x081159c8

0810fc9c <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810fc9c:	b580      	push	{r7, lr}
 810fc9e:	b086      	sub	sp, #24
 810fca0:	af00      	add	r7, sp, #0
 810fca2:	6078      	str	r0, [r7, #4]
 810fca4:	460b      	mov	r3, r1
 810fca6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810fca8:	2301      	movs	r3, #1
 810fcaa:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810fcac:	4829      	ldr	r0, [pc, #164]	; (810fd54 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 810fcae:	f7ff f991 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810fcb2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810fcb4:	68fb      	ldr	r3, [r7, #12]
 810fcb6:	b2db      	uxtb	r3, r3
 810fcb8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810fcba:	78fb      	ldrb	r3, [r7, #3]
 810fcbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fcc0:	687a      	ldr	r2, [r7, #4]
 810fcc2:	00db      	lsls	r3, r3, #3
 810fcc4:	4413      	add	r3, r2
 810fcc6:	689b      	ldr	r3, [r3, #8]
 810fcc8:	2b00      	cmp	r3, #0
 810fcca:	d001      	beq.n	810fcd0 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 810fccc:	2300      	movs	r3, #0
 810fcce:	e03c      	b.n	810fd4a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810fcd0:	693b      	ldr	r3, [r7, #16]
 810fcd2:	2bff      	cmp	r3, #255	; 0xff
 810fcd4:	d901      	bls.n	810fcda <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 810fcd6:	2300      	movs	r3, #0
 810fcd8:	e037      	b.n	810fd4a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810fcda:	687a      	ldr	r2, [r7, #4]
 810fcdc:	697b      	ldr	r3, [r7, #20]
 810fcde:	3380      	adds	r3, #128	; 0x80
 810fce0:	009b      	lsls	r3, r3, #2
 810fce2:	4413      	add	r3, r2
 810fce4:	685b      	ldr	r3, [r3, #4]
 810fce6:	2b00      	cmp	r3, #0
 810fce8:	d015      	beq.n	810fd16 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810fcea:	687a      	ldr	r2, [r7, #4]
 810fcec:	697b      	ldr	r3, [r7, #20]
 810fcee:	3380      	adds	r3, #128	; 0x80
 810fcf0:	009b      	lsls	r3, r3, #2
 810fcf2:	4413      	add	r3, r2
 810fcf4:	685b      	ldr	r3, [r3, #4]
 810fcf6:	685b      	ldr	r3, [r3, #4]
 810fcf8:	68fa      	ldr	r2, [r7, #12]
 810fcfa:	429a      	cmp	r2, r3
 810fcfc:	d101      	bne.n	810fd02 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 810fcfe:	2300      	movs	r3, #0
 810fd00:	e023      	b.n	810fd4a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 810fd02:	697b      	ldr	r3, [r7, #20]
 810fd04:	3301      	adds	r3, #1
 810fd06:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810fd08:	697b      	ldr	r3, [r7, #20]
 810fd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810fd0e:	d1e4      	bne.n	810fcda <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 810fd10:	2300      	movs	r3, #0
 810fd12:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810fd14:	e7e1      	b.n	810fcda <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810fd16:	78fb      	ldrb	r3, [r7, #3]
 810fd18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fd1c:	00db      	lsls	r3, r3, #3
 810fd1e:	687a      	ldr	r2, [r7, #4]
 810fd20:	4413      	add	r3, r2
 810fd22:	3304      	adds	r3, #4
 810fd24:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810fd26:	68bb      	ldr	r3, [r7, #8]
 810fd28:	78fa      	ldrb	r2, [r7, #3]
 810fd2a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810fd2c:	693b      	ldr	r3, [r7, #16]
 810fd2e:	b2da      	uxtb	r2, r3
 810fd30:	68bb      	ldr	r3, [r7, #8]
 810fd32:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810fd34:	68bb      	ldr	r3, [r7, #8]
 810fd36:	68fa      	ldr	r2, [r7, #12]
 810fd38:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810fd3a:	687a      	ldr	r2, [r7, #4]
 810fd3c:	697b      	ldr	r3, [r7, #20]
 810fd3e:	3380      	adds	r3, #128	; 0x80
 810fd40:	009b      	lsls	r3, r3, #2
 810fd42:	4413      	add	r3, r2
 810fd44:	68ba      	ldr	r2, [r7, #8]
 810fd46:	605a      	str	r2, [r3, #4]
	return true;
 810fd48:	2301      	movs	r3, #1
}
 810fd4a:	4618      	mov	r0, r3
 810fd4c:	3718      	adds	r7, #24
 810fd4e:	46bd      	mov	sp, r7
 810fd50:	bd80      	pop	{r7, pc}
 810fd52:	bf00      	nop
 810fd54:	081159b0 	.word	0x081159b0

0810fd58 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810fd58:	b580      	push	{r7, lr}
 810fd5a:	b086      	sub	sp, #24
 810fd5c:	af00      	add	r7, sp, #0
 810fd5e:	6078      	str	r0, [r7, #4]
 810fd60:	460b      	mov	r3, r1
 810fd62:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810fd64:	2308      	movs	r3, #8
 810fd66:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810fd68:	4829      	ldr	r0, [pc, #164]	; (810fe10 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 810fd6a:	f7ff f933 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810fd6e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810fd70:	68fb      	ldr	r3, [r7, #12]
 810fd72:	b2db      	uxtb	r3, r3
 810fd74:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810fd76:	78fb      	ldrb	r3, [r7, #3]
 810fd78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fd7c:	687a      	ldr	r2, [r7, #4]
 810fd7e:	00db      	lsls	r3, r3, #3
 810fd80:	4413      	add	r3, r2
 810fd82:	689b      	ldr	r3, [r3, #8]
 810fd84:	2b00      	cmp	r3, #0
 810fd86:	d001      	beq.n	810fd8c <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 810fd88:	2300      	movs	r3, #0
 810fd8a:	e03c      	b.n	810fe06 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810fd8c:	693b      	ldr	r3, [r7, #16]
 810fd8e:	2bff      	cmp	r3, #255	; 0xff
 810fd90:	d901      	bls.n	810fd96 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 810fd92:	2300      	movs	r3, #0
 810fd94:	e037      	b.n	810fe06 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810fd96:	687a      	ldr	r2, [r7, #4]
 810fd98:	697b      	ldr	r3, [r7, #20]
 810fd9a:	3380      	adds	r3, #128	; 0x80
 810fd9c:	009b      	lsls	r3, r3, #2
 810fd9e:	4413      	add	r3, r2
 810fda0:	685b      	ldr	r3, [r3, #4]
 810fda2:	2b00      	cmp	r3, #0
 810fda4:	d015      	beq.n	810fdd2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810fda6:	687a      	ldr	r2, [r7, #4]
 810fda8:	697b      	ldr	r3, [r7, #20]
 810fdaa:	3380      	adds	r3, #128	; 0x80
 810fdac:	009b      	lsls	r3, r3, #2
 810fdae:	4413      	add	r3, r2
 810fdb0:	685b      	ldr	r3, [r3, #4]
 810fdb2:	685b      	ldr	r3, [r3, #4]
 810fdb4:	68fa      	ldr	r2, [r7, #12]
 810fdb6:	429a      	cmp	r2, r3
 810fdb8:	d101      	bne.n	810fdbe <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 810fdba:	2300      	movs	r3, #0
 810fdbc:	e023      	b.n	810fe06 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 810fdbe:	697b      	ldr	r3, [r7, #20]
 810fdc0:	3301      	adds	r3, #1
 810fdc2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810fdc4:	697b      	ldr	r3, [r7, #20]
 810fdc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810fdca:	d1e4      	bne.n	810fd96 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 810fdcc:	2300      	movs	r3, #0
 810fdce:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810fdd0:	e7e1      	b.n	810fd96 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810fdd2:	78fb      	ldrb	r3, [r7, #3]
 810fdd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fdd8:	00db      	lsls	r3, r3, #3
 810fdda:	687a      	ldr	r2, [r7, #4]
 810fddc:	4413      	add	r3, r2
 810fdde:	3304      	adds	r3, #4
 810fde0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810fde2:	68bb      	ldr	r3, [r7, #8]
 810fde4:	78fa      	ldrb	r2, [r7, #3]
 810fde6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810fde8:	693b      	ldr	r3, [r7, #16]
 810fdea:	b2da      	uxtb	r2, r3
 810fdec:	68bb      	ldr	r3, [r7, #8]
 810fdee:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810fdf0:	68bb      	ldr	r3, [r7, #8]
 810fdf2:	68fa      	ldr	r2, [r7, #12]
 810fdf4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810fdf6:	687a      	ldr	r2, [r7, #4]
 810fdf8:	697b      	ldr	r3, [r7, #20]
 810fdfa:	3380      	adds	r3, #128	; 0x80
 810fdfc:	009b      	lsls	r3, r3, #2
 810fdfe:	4413      	add	r3, r2
 810fe00:	68ba      	ldr	r2, [r7, #8]
 810fe02:	605a      	str	r2, [r3, #4]
	return true;
 810fe04:	2301      	movs	r3, #1
}
 810fe06:	4618      	mov	r0, r3
 810fe08:	3718      	adds	r7, #24
 810fe0a:	46bd      	mov	sp, r7
 810fe0c:	bd80      	pop	{r7, pc}
 810fe0e:	bf00      	nop
 810fe10:	08115998 	.word	0x08115998

0810fe14 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810fe14:	b580      	push	{r7, lr}
 810fe16:	b086      	sub	sp, #24
 810fe18:	af00      	add	r7, sp, #0
 810fe1a:	6078      	str	r0, [r7, #4]
 810fe1c:	460b      	mov	r3, r1
 810fe1e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810fe20:	2308      	movs	r3, #8
 810fe22:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810fe24:	4829      	ldr	r0, [pc, #164]	; (810fecc <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 810fe26:	f7ff f8d5 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810fe2a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810fe2c:	68fb      	ldr	r3, [r7, #12]
 810fe2e:	b2db      	uxtb	r3, r3
 810fe30:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810fe32:	78fb      	ldrb	r3, [r7, #3]
 810fe34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fe38:	687a      	ldr	r2, [r7, #4]
 810fe3a:	00db      	lsls	r3, r3, #3
 810fe3c:	4413      	add	r3, r2
 810fe3e:	689b      	ldr	r3, [r3, #8]
 810fe40:	2b00      	cmp	r3, #0
 810fe42:	d001      	beq.n	810fe48 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 810fe44:	2300      	movs	r3, #0
 810fe46:	e03c      	b.n	810fec2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810fe48:	693b      	ldr	r3, [r7, #16]
 810fe4a:	2bff      	cmp	r3, #255	; 0xff
 810fe4c:	d901      	bls.n	810fe52 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 810fe4e:	2300      	movs	r3, #0
 810fe50:	e037      	b.n	810fec2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810fe52:	687a      	ldr	r2, [r7, #4]
 810fe54:	697b      	ldr	r3, [r7, #20]
 810fe56:	3380      	adds	r3, #128	; 0x80
 810fe58:	009b      	lsls	r3, r3, #2
 810fe5a:	4413      	add	r3, r2
 810fe5c:	685b      	ldr	r3, [r3, #4]
 810fe5e:	2b00      	cmp	r3, #0
 810fe60:	d015      	beq.n	810fe8e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810fe62:	687a      	ldr	r2, [r7, #4]
 810fe64:	697b      	ldr	r3, [r7, #20]
 810fe66:	3380      	adds	r3, #128	; 0x80
 810fe68:	009b      	lsls	r3, r3, #2
 810fe6a:	4413      	add	r3, r2
 810fe6c:	685b      	ldr	r3, [r3, #4]
 810fe6e:	685b      	ldr	r3, [r3, #4]
 810fe70:	68fa      	ldr	r2, [r7, #12]
 810fe72:	429a      	cmp	r2, r3
 810fe74:	d101      	bne.n	810fe7a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 810fe76:	2300      	movs	r3, #0
 810fe78:	e023      	b.n	810fec2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 810fe7a:	697b      	ldr	r3, [r7, #20]
 810fe7c:	3301      	adds	r3, #1
 810fe7e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810fe80:	697b      	ldr	r3, [r7, #20]
 810fe82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810fe86:	d1e4      	bne.n	810fe52 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 810fe88:	2300      	movs	r3, #0
 810fe8a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810fe8c:	e7e1      	b.n	810fe52 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810fe8e:	78fb      	ldrb	r3, [r7, #3]
 810fe90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fe94:	00db      	lsls	r3, r3, #3
 810fe96:	687a      	ldr	r2, [r7, #4]
 810fe98:	4413      	add	r3, r2
 810fe9a:	3304      	adds	r3, #4
 810fe9c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810fe9e:	68bb      	ldr	r3, [r7, #8]
 810fea0:	78fa      	ldrb	r2, [r7, #3]
 810fea2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810fea4:	693b      	ldr	r3, [r7, #16]
 810fea6:	b2da      	uxtb	r2, r3
 810fea8:	68bb      	ldr	r3, [r7, #8]
 810feaa:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810feac:	68bb      	ldr	r3, [r7, #8]
 810feae:	68fa      	ldr	r2, [r7, #12]
 810feb0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810feb2:	687a      	ldr	r2, [r7, #4]
 810feb4:	697b      	ldr	r3, [r7, #20]
 810feb6:	3380      	adds	r3, #128	; 0x80
 810feb8:	009b      	lsls	r3, r3, #2
 810feba:	4413      	add	r3, r2
 810febc:	68ba      	ldr	r2, [r7, #8]
 810febe:	605a      	str	r2, [r3, #4]
	return true;
 810fec0:	2301      	movs	r3, #1
}
 810fec2:	4618      	mov	r0, r3
 810fec4:	3718      	adds	r7, #24
 810fec6:	46bd      	mov	sp, r7
 810fec8:	bd80      	pop	{r7, pc}
 810feca:	bf00      	nop
 810fecc:	0811597c 	.word	0x0811597c

0810fed0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810fed0:	b580      	push	{r7, lr}
 810fed2:	b086      	sub	sp, #24
 810fed4:	af00      	add	r7, sp, #0
 810fed6:	6078      	str	r0, [r7, #4]
 810fed8:	460b      	mov	r3, r1
 810feda:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810fedc:	2305      	movs	r3, #5
 810fede:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810fee0:	4829      	ldr	r0, [pc, #164]	; (810ff88 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 810fee2:	f7ff f877 	bl	810efd4 <_ZNKSt9type_info9hash_codeEv>
 810fee6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810fee8:	68fb      	ldr	r3, [r7, #12]
 810feea:	b2db      	uxtb	r3, r3
 810feec:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810feee:	78fb      	ldrb	r3, [r7, #3]
 810fef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810fef4:	687a      	ldr	r2, [r7, #4]
 810fef6:	00db      	lsls	r3, r3, #3
 810fef8:	4413      	add	r3, r2
 810fefa:	689b      	ldr	r3, [r3, #8]
 810fefc:	2b00      	cmp	r3, #0
 810fefe:	d001      	beq.n	810ff04 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ff00:	2300      	movs	r3, #0
 810ff02:	e03c      	b.n	810ff7e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ff04:	693b      	ldr	r3, [r7, #16]
 810ff06:	2bff      	cmp	r3, #255	; 0xff
 810ff08:	d901      	bls.n	810ff0e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 810ff0a:	2300      	movs	r3, #0
 810ff0c:	e037      	b.n	810ff7e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ff0e:	687a      	ldr	r2, [r7, #4]
 810ff10:	697b      	ldr	r3, [r7, #20]
 810ff12:	3380      	adds	r3, #128	; 0x80
 810ff14:	009b      	lsls	r3, r3, #2
 810ff16:	4413      	add	r3, r2
 810ff18:	685b      	ldr	r3, [r3, #4]
 810ff1a:	2b00      	cmp	r3, #0
 810ff1c:	d015      	beq.n	810ff4a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ff1e:	687a      	ldr	r2, [r7, #4]
 810ff20:	697b      	ldr	r3, [r7, #20]
 810ff22:	3380      	adds	r3, #128	; 0x80
 810ff24:	009b      	lsls	r3, r3, #2
 810ff26:	4413      	add	r3, r2
 810ff28:	685b      	ldr	r3, [r3, #4]
 810ff2a:	685b      	ldr	r3, [r3, #4]
 810ff2c:	68fa      	ldr	r2, [r7, #12]
 810ff2e:	429a      	cmp	r2, r3
 810ff30:	d101      	bne.n	810ff36 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 810ff32:	2300      	movs	r3, #0
 810ff34:	e023      	b.n	810ff7e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 810ff36:	697b      	ldr	r3, [r7, #20]
 810ff38:	3301      	adds	r3, #1
 810ff3a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ff3c:	697b      	ldr	r3, [r7, #20]
 810ff3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ff42:	d1e4      	bne.n	810ff0e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 810ff44:	2300      	movs	r3, #0
 810ff46:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ff48:	e7e1      	b.n	810ff0e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ff4a:	78fb      	ldrb	r3, [r7, #3]
 810ff4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ff50:	00db      	lsls	r3, r3, #3
 810ff52:	687a      	ldr	r2, [r7, #4]
 810ff54:	4413      	add	r3, r2
 810ff56:	3304      	adds	r3, #4
 810ff58:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ff5a:	68bb      	ldr	r3, [r7, #8]
 810ff5c:	78fa      	ldrb	r2, [r7, #3]
 810ff5e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ff60:	693b      	ldr	r3, [r7, #16]
 810ff62:	b2da      	uxtb	r2, r3
 810ff64:	68bb      	ldr	r3, [r7, #8]
 810ff66:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ff68:	68bb      	ldr	r3, [r7, #8]
 810ff6a:	68fa      	ldr	r2, [r7, #12]
 810ff6c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ff6e:	687a      	ldr	r2, [r7, #4]
 810ff70:	697b      	ldr	r3, [r7, #20]
 810ff72:	3380      	adds	r3, #128	; 0x80
 810ff74:	009b      	lsls	r3, r3, #2
 810ff76:	4413      	add	r3, r2
 810ff78:	68ba      	ldr	r2, [r7, #8]
 810ff7a:	605a      	str	r2, [r3, #4]
	return true;
 810ff7c:	2301      	movs	r3, #1
}
 810ff7e:	4618      	mov	r0, r3
 810ff80:	3718      	adds	r7, #24
 810ff82:	46bd      	mov	sp, r7
 810ff84:	bd80      	pop	{r7, pc}
 810ff86:	bf00      	nop
 810ff88:	08115960 	.word	0x08115960

0810ff8c <_ZN10MessageBus4sendEP16PacketDefinitionPh>:

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 810ff8c:	b580      	push	{r7, lr}
 810ff8e:	b086      	sub	sp, #24
 810ff90:	af00      	add	r7, sp, #0
 810ff92:	60f8      	str	r0, [r7, #12]
 810ff94:	60b9      	str	r1, [r7, #8]
 810ff96:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 810ff98:	68bb      	ldr	r3, [r7, #8]
 810ff9a:	2b00      	cmp	r3, #0
 810ff9c:	d031      	beq.n	8110002 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 810ff9e:	2300      	movs	r3, #0
 810ffa0:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 810ffa2:	68bb      	ldr	r3, [r7, #8]
 810ffa4:	785b      	ldrb	r3, [r3, #1]
 810ffa6:	461a      	mov	r2, r3
 810ffa8:	697b      	ldr	r3, [r7, #20]
 810ffaa:	4293      	cmp	r3, r2
 810ffac:	d227      	bcs.n	810fffe <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 810ffae:	68fb      	ldr	r3, [r7, #12]
 810ffb0:	681b      	ldr	r3, [r3, #0]
 810ffb2:	3308      	adds	r3, #8
 810ffb4:	681b      	ldr	r3, [r3, #0]
 810ffb6:	68b9      	ldr	r1, [r7, #8]
 810ffb8:	2201      	movs	r2, #1
 810ffba:	68f8      	ldr	r0, [r7, #12]
 810ffbc:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 810ffbe:	68fb      	ldr	r3, [r7, #12]
 810ffc0:	681b      	ldr	r3, [r3, #0]
 810ffc2:	3308      	adds	r3, #8
 810ffc4:	681b      	ldr	r3, [r3, #0]
 810ffc6:	6879      	ldr	r1, [r7, #4]
 810ffc8:	697a      	ldr	r2, [r7, #20]
 810ffca:	4411      	add	r1, r2
 810ffcc:	68ba      	ldr	r2, [r7, #8]
 810ffce:	7852      	ldrb	r2, [r2, #1]
 810ffd0:	4610      	mov	r0, r2
 810ffd2:	697a      	ldr	r2, [r7, #20]
 810ffd4:	1a82      	subs	r2, r0, r2
 810ffd6:	68f8      	ldr	r0, [r7, #12]
 810ffd8:	4798      	blx	r3
 810ffda:	4603      	mov	r3, r0
 810ffdc:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 810ffde:	693b      	ldr	r3, [r7, #16]
 810ffe0:	2b00      	cmp	r3, #0
 810ffe2:	d101      	bne.n	810ffe8 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 810ffe4:	2300      	movs	r3, #0
 810ffe6:	e00d      	b.n	8110004 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 810ffe8:	68fb      	ldr	r3, [r7, #12]
 810ffea:	681b      	ldr	r3, [r3, #0]
 810ffec:	330c      	adds	r3, #12
 810ffee:	681b      	ldr	r3, [r3, #0]
 810fff0:	68f8      	ldr	r0, [r7, #12]
 810fff2:	4798      	blx	r3
				data_bytes_written += new_bytes;
 810fff4:	697a      	ldr	r2, [r7, #20]
 810fff6:	693b      	ldr	r3, [r7, #16]
 810fff8:	4413      	add	r3, r2
 810fffa:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 810fffc:	e7d1      	b.n	810ffa2 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 810fffe:	2301      	movs	r3, #1
 8110000:	e000      	b.n	8110004 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 8110002:	2300      	movs	r3, #0
}
 8110004:	4618      	mov	r0, r3
 8110006:	3718      	adds	r7, #24
 8110008:	46bd      	mov	sp, r7
 811000a:	bd80      	pop	{r7, pc}

0811000c <_ZN10MessageBus7receiveEhPhm>:
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
#include "Debug/Debug.h"
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 811000c:	b580      	push	{r7, lr}
 811000e:	b088      	sub	sp, #32
 8110010:	af00      	add	r7, sp, #0
 8110012:	60f8      	str	r0, [r7, #12]
 8110014:	607a      	str	r2, [r7, #4]
 8110016:	603b      	str	r3, [r7, #0]
 8110018:	460b      	mov	r3, r1
 811001a:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 811001c:	683b      	ldr	r3, [r7, #0]
 811001e:	2b00      	cmp	r3, #0
 8110020:	d077      	beq.n	8110112 <_ZN10MessageBus7receiveEhPhm+0x106>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 8110022:	687b      	ldr	r3, [r7, #4]
 8110024:	1c5a      	adds	r2, r3, #1
 8110026:	607a      	str	r2, [r7, #4]
 8110028:	781b      	ldrb	r3, [r3, #0]
 811002a:	777b      	strb	r3, [r7, #29]


		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 811002c:	7f7b      	ldrb	r3, [r7, #29]
 811002e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8110032:	00db      	lsls	r3, r3, #3
 8110034:	68fa      	ldr	r2, [r7, #12]
 8110036:	4413      	add	r3, r2
 8110038:	3304      	adds	r3, #4
 811003a:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 811003c:	7afb      	ldrb	r3, [r7, #11]
 811003e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8110042:	3306      	adds	r3, #6
 8110044:	021b      	lsls	r3, r3, #8
 8110046:	68fa      	ldr	r2, [r7, #12]
 8110048:	4413      	add	r3, r2
 811004a:	3304      	adds	r3, #4
 811004c:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 811004e:	697b      	ldr	r3, [r7, #20]
 8110050:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8110054:	461a      	mov	r2, r3
 8110056:	683b      	ldr	r3, [r7, #0]
 8110058:	4413      	add	r3, r2
 811005a:	2bff      	cmp	r3, #255	; 0xff
 811005c:	d904      	bls.n	8110068 <_ZN10MessageBus7receiveEhPhm+0x5c>
			indexable_buffer->index = 0; // Corrupted packet
 811005e:	697b      	ldr	r3, [r7, #20]
 8110060:	2200      	movs	r2, #0
 8110062:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 8110066:	e054      	b.n	8110112 <_ZN10MessageBus7receiveEhPhm+0x106>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 8110068:	2300      	movs	r3, #0
 811006a:	83fb      	strh	r3, [r7, #30]
 811006c:	8bfa      	ldrh	r2, [r7, #30]
 811006e:	683b      	ldr	r3, [r7, #0]
 8110070:	3b01      	subs	r3, #1
 8110072:	429a      	cmp	r2, r3
 8110074:	d211      	bcs.n	811009a <_ZN10MessageBus7receiveEhPhm+0x8e>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 8110076:	687b      	ldr	r3, [r7, #4]
 8110078:	1c5a      	adds	r2, r3, #1
 811007a:	607a      	str	r2, [r7, #4]
 811007c:	697a      	ldr	r2, [r7, #20]
 811007e:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 8110082:	1c51      	adds	r1, r2, #1
 8110084:	b2c8      	uxtb	r0, r1
 8110086:	6979      	ldr	r1, [r7, #20]
 8110088:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 811008c:	7819      	ldrb	r1, [r3, #0]
 811008e:	697b      	ldr	r3, [r7, #20]
 8110090:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 8110092:	8bfb      	ldrh	r3, [r7, #30]
 8110094:	3301      	adds	r3, #1
 8110096:	83fb      	strh	r3, [r7, #30]
 8110098:	e7e8      	b.n	811006c <_ZN10MessageBus7receiveEhPhm+0x60>
		}

		if(indexable_buffer->index >= def->size) {
 811009a:	697b      	ldr	r3, [r7, #20]
 811009c:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 81100a0:	69bb      	ldr	r3, [r7, #24]
 81100a2:	785b      	ldrb	r3, [r3, #1]
 81100a4:	429a      	cmp	r2, r3
 81100a6:	d334      	bcc.n	8110112 <_ZN10MessageBus7receiveEhPhm+0x106>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 81100a8:	7f7b      	ldrb	r3, [r7, #29]
 81100aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81100ae:	68fa      	ldr	r2, [r7, #12]
 81100b0:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 81100b4:	009b      	lsls	r3, r3, #2
 81100b6:	4413      	add	r3, r2
 81100b8:	685b      	ldr	r3, [r3, #4]
 81100ba:	2b00      	cmp	r3, #0
 81100bc:	d00c      	beq.n	81100d8 <_ZN10MessageBus7receiveEhPhm+0xcc>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 81100be:	7f7b      	ldrb	r3, [r7, #29]
 81100c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81100c4:	68fa      	ldr	r2, [r7, #12]
 81100c6:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 81100ca:	009b      	lsls	r3, r3, #2
 81100cc:	4413      	add	r3, r2
 81100ce:	685b      	ldr	r3, [r3, #4]
 81100d0:	6979      	ldr	r1, [r7, #20]
 81100d2:	7afa      	ldrb	r2, [r7, #11]
 81100d4:	4610      	mov	r0, r2
 81100d6:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 81100d8:	7f7b      	ldrb	r3, [r7, #29]
 81100da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81100de:	68fa      	ldr	r2, [r7, #12]
 81100e0:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 81100e4:	009b      	lsls	r3, r3, #2
 81100e6:	4413      	add	r3, r2
 81100e8:	685b      	ldr	r3, [r3, #4]
 81100ea:	2b00      	cmp	r3, #0
 81100ec:	d00d      	beq.n	811010a <_ZN10MessageBus7receiveEhPhm+0xfe>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 81100ee:	7f7b      	ldrb	r3, [r7, #29]
 81100f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81100f4:	68fa      	ldr	r2, [r7, #12]
 81100f6:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 81100fa:	009b      	lsls	r3, r3, #2
 81100fc:	4413      	add	r3, r2
 81100fe:	685b      	ldr	r3, [r3, #4]
 8110100:	697a      	ldr	r2, [r7, #20]
 8110102:	69b9      	ldr	r1, [r7, #24]
 8110104:	4618      	mov	r0, r3
 8110106:	f7ff ff41 	bl	810ff8c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 811010a:	697b      	ldr	r3, [r7, #20]
 811010c:	2200      	movs	r2, #0
 811010e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 8110112:	3720      	adds	r7, #32
 8110114:	46bd      	mov	sp, r7
 8110116:	bd80      	pop	{r7, pc}

08110118 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 8110118:	b480      	push	{r7}
 811011a:	b085      	sub	sp, #20
 811011c:	af00      	add	r7, sp, #0
 811011e:	6078      	str	r0, [r7, #4]
 8110120:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 8110122:	683b      	ldr	r3, [r7, #0]
 8110124:	b2db      	uxtb	r3, r3
 8110126:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 8110128:	68fb      	ldr	r3, [r7, #12]
 811012a:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 811012c:	687a      	ldr	r2, [r7, #4]
 811012e:	68fb      	ldr	r3, [r7, #12]
 8110130:	3380      	adds	r3, #128	; 0x80
 8110132:	009b      	lsls	r3, r3, #2
 8110134:	4413      	add	r3, r2
 8110136:	685b      	ldr	r3, [r3, #4]
 8110138:	2b00      	cmp	r3, #0
 811013a:	d01f      	beq.n	811017c <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
 811013c:	687a      	ldr	r2, [r7, #4]
 811013e:	68fb      	ldr	r3, [r7, #12]
 8110140:	3380      	adds	r3, #128	; 0x80
 8110142:	009b      	lsls	r3, r3, #2
 8110144:	4413      	add	r3, r2
 8110146:	685b      	ldr	r3, [r3, #4]
 8110148:	685b      	ldr	r3, [r3, #4]
 811014a:	683a      	ldr	r2, [r7, #0]
 811014c:	429a      	cmp	r2, r3
 811014e:	d106      	bne.n	811015e <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
 8110150:	687a      	ldr	r2, [r7, #4]
 8110152:	68fb      	ldr	r3, [r7, #12]
 8110154:	3380      	adds	r3, #128	; 0x80
 8110156:	009b      	lsls	r3, r3, #2
 8110158:	4413      	add	r3, r2
 811015a:	685b      	ldr	r3, [r3, #4]
 811015c:	e00f      	b.n	811017e <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
 811015e:	68fb      	ldr	r3, [r7, #12]
 8110160:	3301      	adds	r3, #1
 8110162:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 8110164:	68fb      	ldr	r3, [r7, #12]
 8110166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 811016a:	d101      	bne.n	8110170 <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
 811016c:	2300      	movs	r3, #0
 811016e:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 8110170:	68ba      	ldr	r2, [r7, #8]
 8110172:	68fb      	ldr	r3, [r7, #12]
 8110174:	429a      	cmp	r2, r3
 8110176:	d000      	beq.n	811017a <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
 8110178:	e7d8      	b.n	811012c <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
 811017a:	bf00      	nop
		}
	}

	return nullptr;
 811017c:	2300      	movs	r3, #0
}
 811017e:	4618      	mov	r0, r3
 8110180:	3714      	adds	r7, #20
 8110182:	46bd      	mov	sp, r7
 8110184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110188:	4770      	bx	lr
	...

0811018c <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 811018c:	b580      	push	{r7, lr}
 811018e:	b082      	sub	sp, #8
 8110190:	af00      	add	r7, sp, #0
 8110192:	6078      	str	r0, [r7, #4]
 8110194:	6039      	str	r1, [r7, #0]
 8110196:	6878      	ldr	r0, [r7, #4]
 8110198:	687b      	ldr	r3, [r7, #4]
 811019a:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 811019e:	3211      	adds	r2, #17
 81101a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 81101a4:	6839      	ldr	r1, [r7, #0]
 81101a6:	f7fd fe6b 	bl	810de80 <_ZN5IOBusC1EP8IODriverPhm>
 81101aa:	4a36      	ldr	r2, [pc, #216]	; (8110284 <_ZN10NetworkBusC1EP8IODriver+0xf8>)
 81101ac:	687b      	ldr	r3, [r7, #4]
 81101ae:	601a      	str	r2, [r3, #0]

	// avionics
	define<Avionics_BaroTempPacket>(0);
 81101b0:	687b      	ldr	r3, [r7, #4]
 81101b2:	2100      	movs	r1, #0
 81101b4:	4618      	mov	r0, r3
 81101b6:	f7fe ff29 	bl	810f00c <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
	define<Avionics_AccelMagPacket>(1);
 81101ba:	687b      	ldr	r3, [r7, #4]
 81101bc:	2101      	movs	r1, #1
 81101be:	4618      	mov	r0, r3
 81101c0:	f7fe ff9c 	bl	810f0fc <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
	define<Avionics_ADCPacket>(2);
 81101c4:	687b      	ldr	r3, [r7, #4]
 81101c6:	2102      	movs	r1, #2
 81101c8:	4618      	mov	r0, r3
 81101ca:	f7ff f80f 	bl	810f1ec <_ZN10MessageBus6defineI18Avionics_ADCPacketEEbh>
	define<Science_MassPacket>(3);
 81101ce:	687b      	ldr	r3, [r7, #4]
 81101d0:	2103      	movs	r1, #3
 81101d2:	4618      	mov	r0, r3
 81101d4:	f7ff f882 	bl	810f2dc <_ZN10MessageBus6defineI18Science_MassPacketEEbh>


	// power supply
	define<Power_SystemPacket>(8);
 81101d8:	687b      	ldr	r3, [r7, #4]
 81101da:	2108      	movs	r1, #8
 81101dc:	4618      	mov	r0, r3
 81101de:	f7ff f8f5 	bl	810f3cc <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Power_VoltagePacket>(9);
 81101e2:	687b      	ldr	r3, [r7, #4]
 81101e4:	2109      	movs	r1, #9
 81101e6:	4618      	mov	r0, r3
 81101e8:	f7ff f94e 	bl	810f488 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(10);
 81101ec:	687b      	ldr	r3, [r7, #4]
 81101ee:	210a      	movs	r1, #10
 81101f0:	4618      	mov	r0, r3
 81101f2:	f7ff f9a7 	bl	810f544 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>

	define<Reset_PowerSupplyPacket>(13);
 81101f6:	687b      	ldr	r3, [r7, #4]
 81101f8:	210d      	movs	r1, #13
 81101fa:	4618      	mov	r0, r3
 81101fc:	f7ff fa00 	bl	810f600 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh>
	define<Switch_AvionicsPacket>(14);
 8110200:	687b      	ldr	r3, [r7, #4]
 8110202:	210e      	movs	r1, #14
 8110204:	4618      	mov	r0, r3
 8110206:	f7ff fa59 	bl	810f6bc <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh>
	define<Switch_RamanPacket>(15);
 811020a:	687b      	ldr	r3, [r7, #4]
 811020c:	210f      	movs	r1, #15
 811020e:	4618      	mov	r0, r3
 8110210:	f7ff fab2 	bl	810f778 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh>
	define<Switch_JetsonPacket>(16);
 8110214:	687b      	ldr	r3, [r7, #4]
 8110216:	2110      	movs	r1, #16
 8110218:	4618      	mov	r0, r3
 811021a:	f7ff fb0b 	bl	810f834 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh>
	define<Switch_LidarPacket>(17);
 811021e:	687b      	ldr	r3, [r7, #4]
 8110220:	2111      	movs	r1, #17
 8110222:	4618      	mov	r0, r3
 8110224:	f7ff fb64 	bl	810f8f0 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh>
	define<Switch_EthernetPacket>(18);
 8110228:	687b      	ldr	r3, [r7, #4]
 811022a:	2112      	movs	r1, #18
 811022c:	4618      	mov	r0, r3
 811022e:	f7ff fbbd 	bl	810f9ac <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh>

	// finite state machine
	define<FsmPacket>(22);
 8110232:	687b      	ldr	r3, [r7, #4]
 8110234:	2116      	movs	r1, #22
 8110236:	4618      	mov	r0, r3
 8110238:	f7ff fc16 	bl	810fa68 <_ZN10MessageBus6defineI9FsmPacketEEbh>

	// general packets
	define<DataPacket>(58);
 811023c:	687b      	ldr	r3, [r7, #4]
 811023e:	213a      	movs	r1, #58	; 0x3a
 8110240:	4618      	mov	r0, r3
 8110242:	f7ff fc6f 	bl	810fb24 <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<PingPacket>(59);
 8110246:	687b      	ldr	r3, [r7, #4]
 8110248:	213b      	movs	r1, #59	; 0x3b
 811024a:	4618      	mov	r0, r3
 811024c:	f7ff fcc8 	bl	810fbe0 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<ErrorPacket>(60);
 8110250:	687b      	ldr	r3, [r7, #4]
 8110252:	213c      	movs	r1, #60	; 0x3c
 8110254:	4618      	mov	r0, r3
 8110256:	f7ff fd21 	bl	810fc9c <_ZN10MessageBus6defineI11ErrorPacketEEbh>
	define<RequestPacket>(61);
 811025a:	687b      	ldr	r3, [r7, #4]
 811025c:	213d      	movs	r1, #61	; 0x3d
 811025e:	4618      	mov	r0, r3
 8110260:	f7ff fd7a 	bl	810fd58 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(62);
 8110264:	687b      	ldr	r3, [r7, #4]
 8110266:	213e      	movs	r1, #62	; 0x3e
 8110268:	4618      	mov	r0, r3
 811026a:	f7ff fdd3 	bl	810fe14 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(63);
 811026e:	687b      	ldr	r3, [r7, #4]
 8110270:	213f      	movs	r1, #63	; 0x3f
 8110272:	4618      	mov	r0, r3
 8110274:	f7ff fe2c 	bl	810fed0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
}
 8110278:	687b      	ldr	r3, [r7, #4]
 811027a:	4618      	mov	r0, r3
 811027c:	3708      	adds	r7, #8
 811027e:	46bd      	mov	sp, r7
 8110280:	bd80      	pop	{r7, pc}
 8110282:	bf00      	nop
 8110284:	08115bc0 	.word	0x08115bc0

08110288 <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 8110288:	b580      	push	{r7, lr}
 811028a:	b082      	sub	sp, #8
 811028c:	af00      	add	r7, sp, #0
 811028e:	6078      	str	r0, [r7, #4]
 8110290:	4a05      	ldr	r2, [pc, #20]	; (81102a8 <_ZN10NetworkBusD1Ev+0x20>)
 8110292:	687b      	ldr	r3, [r7, #4]
 8110294:	601a      	str	r2, [r3, #0]
 8110296:	687b      	ldr	r3, [r7, #4]
 8110298:	4618      	mov	r0, r3
 811029a:	f7fe fe63 	bl	810ef64 <_ZN5IOBusD1Ev>
 811029e:	687b      	ldr	r3, [r7, #4]
 81102a0:	4618      	mov	r0, r3
 81102a2:	3708      	adds	r7, #8
 81102a4:	46bd      	mov	sp, r7
 81102a6:	bd80      	pop	{r7, pc}
 81102a8:	08115bc0 	.word	0x08115bc0

081102ac <_ZN10NetworkBusD0Ev>:
 81102ac:	b580      	push	{r7, lr}
 81102ae:	b082      	sub	sp, #8
 81102b0:	af00      	add	r7, sp, #0
 81102b2:	6078      	str	r0, [r7, #4]
 81102b4:	6878      	ldr	r0, [r7, #4]
 81102b6:	f7ff ffe7 	bl	8110288 <_ZN10NetworkBusD1Ev>
 81102ba:	f644 1114 	movw	r1, #18708	; 0x4914
 81102be:	6878      	ldr	r0, [r7, #4]
 81102c0:	f001 fd13 	bl	8111cea <_ZdlPvj>
 81102c4:	687b      	ldr	r3, [r7, #4]
 81102c6:	4618      	mov	r0, r3
 81102c8:	3708      	adds	r7, #8
 81102ca:	46bd      	mov	sp, r7
 81102cc:	bd80      	pop	{r7, pc}

081102ce <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 81102ce:	b480      	push	{r7}
 81102d0:	b083      	sub	sp, #12
 81102d2:	af00      	add	r7, sp, #0
 81102d4:	6078      	str	r0, [r7, #4]

}
 81102d6:	bf00      	nop
 81102d8:	370c      	adds	r7, #12
 81102da:	46bd      	mov	sp, r7
 81102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81102e0:	4770      	bx	lr

081102e2 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 81102e2:	b580      	push	{r7, lr}
 81102e4:	b082      	sub	sp, #8
 81102e6:	af00      	add	r7, sp, #0
 81102e8:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 81102ea:	687b      	ldr	r3, [r7, #4]
 81102ec:	691b      	ldr	r3, [r3, #16]
 81102ee:	4618      	mov	r0, r3
 81102f0:	f7f6 f90c 	bl	810650c <HAL_IWDG_Refresh>
	osDelay(100 / portTICK_PERIOD_MS);
 81102f4:	2064      	movs	r0, #100	; 0x64
 81102f6:	f7f9 f881 	bl	81093fc <osDelay>
}
 81102fa:	bf00      	nop
 81102fc:	3708      	adds	r7, #8
 81102fe:	46bd      	mov	sp, r7
 8110300:	bd80      	pop	{r7, pc}
	...

08110304 <_ZN14WatchdogThreadD1Ev>:
#ifndef MISC_WATCHDOGTHREAD_H_
#define MISC_WATCHDOGTHREAD_H_

#include "../Thread.h"

class WatchdogThread : Thread {
 8110304:	b580      	push	{r7, lr}
 8110306:	b082      	sub	sp, #8
 8110308:	af00      	add	r7, sp, #0
 811030a:	6078      	str	r0, [r7, #4]
 811030c:	4a05      	ldr	r2, [pc, #20]	; (8110324 <_ZN14WatchdogThreadD1Ev+0x20>)
 811030e:	687b      	ldr	r3, [r7, #4]
 8110310:	601a      	str	r2, [r3, #0]
 8110312:	687b      	ldr	r3, [r7, #4]
 8110314:	4618      	mov	r0, r3
 8110316:	f7fb faf7 	bl	810b908 <_ZN6ThreadD1Ev>
 811031a:	687b      	ldr	r3, [r7, #4]
 811031c:	4618      	mov	r0, r3
 811031e:	3708      	adds	r7, #8
 8110320:	46bd      	mov	sp, r7
 8110322:	bd80      	pop	{r7, pc}
 8110324:	08115bf4 	.word	0x08115bf4

08110328 <_ZN14WatchdogThreadD0Ev>:
 8110328:	b580      	push	{r7, lr}
 811032a:	b082      	sub	sp, #8
 811032c:	af00      	add	r7, sp, #0
 811032e:	6078      	str	r0, [r7, #4]
 8110330:	6878      	ldr	r0, [r7, #4]
 8110332:	f7ff ffe7 	bl	8110304 <_ZN14WatchdogThreadD1Ev>
 8110336:	2114      	movs	r1, #20
 8110338:	6878      	ldr	r0, [r7, #4]
 811033a:	f001 fcd6 	bl	8111cea <_ZdlPvj>
 811033e:	687b      	ldr	r3, [r7, #4]
 8110340:	4618      	mov	r0, r3
 8110342:	3708      	adds	r7, #8
 8110344:	46bd      	mov	sp, r7
 8110346:	bd80      	pop	{r7, pc}

08110348 <_ZN17PotentiometerData8toStringEPc>:

struct PotentiometerData {
	uint8_t portNum;
	float voltage;

	char* toString(char* buffer) {
 8110348:	b5b0      	push	{r4, r5, r7, lr}
 811034a:	b084      	sub	sp, #16
 811034c:	af02      	add	r7, sp, #8
 811034e:	6078      	str	r0, [r7, #4]
 8110350:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "[i2c%d] Voltage(V): %f", portNum, voltage);
 8110352:	687b      	ldr	r3, [r7, #4]
 8110354:	781b      	ldrb	r3, [r3, #0]
 8110356:	461d      	mov	r5, r3
 8110358:	687b      	ldr	r3, [r7, #4]
 811035a:	685b      	ldr	r3, [r3, #4]
 811035c:	4618      	mov	r0, r3
 811035e:	f7f0 f98b 	bl	8100678 <__aeabi_f2d>
 8110362:	4603      	mov	r3, r0
 8110364:	460c      	mov	r4, r1
 8110366:	e9cd 3400 	strd	r3, r4, [sp]
 811036a:	462a      	mov	r2, r5
 811036c:	4904      	ldr	r1, [pc, #16]	; (8110380 <_ZN17PotentiometerData8toStringEPc+0x38>)
 811036e:	6838      	ldr	r0, [r7, #0]
 8110370:	f002 fb70 	bl	8112a54 <siprintf>
		return buffer;
 8110374:	683b      	ldr	r3, [r7, #0]
	}
 8110376:	4618      	mov	r0, r3
 8110378:	3708      	adds	r7, #8
 811037a:	46bd      	mov	sp, r7
 811037c:	bdb0      	pop	{r4, r5, r7, pc}
 811037e:	bf00      	nop
 8110380:	08115338 	.word	0x08115338

08110384 <_ZN17PotentiometerData7toArrayEPh>:

	uint8_t* toArray(uint8_t* buffer){
 8110384:	b480      	push	{r7}
 8110386:	b083      	sub	sp, #12
 8110388:	af00      	add	r7, sp, #0
 811038a:	6078      	str	r0, [r7, #4]
 811038c:	6039      	str	r1, [r7, #0]
		*(uint8_t*)(buffer) = portNum;
 811038e:	683b      	ldr	r3, [r7, #0]
 8110390:	687a      	ldr	r2, [r7, #4]
 8110392:	7812      	ldrb	r2, [r2, #0]
 8110394:	701a      	strb	r2, [r3, #0]
		*(float*)(buffer + 1) = voltage;
 8110396:	683b      	ldr	r3, [r7, #0]
 8110398:	3301      	adds	r3, #1
 811039a:	687a      	ldr	r2, [r7, #4]
 811039c:	6852      	ldr	r2, [r2, #4]
 811039e:	601a      	str	r2, [r3, #0]
		return buffer;
 81103a0:	683b      	ldr	r3, [r7, #0]
	}
 81103a2:	4618      	mov	r0, r3
 81103a4:	370c      	adds	r7, #12
 81103a6:	46bd      	mov	sp, r7
 81103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81103ac:	4770      	bx	lr

081103ae <_ZN12ProberThread6getI2CEv>:
public:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", 1024), hi2c(hi2c), instance(nullptr), i2cNum(0) {}
	void init();
	void loop();
	void resetProber();
	I2C_HandleTypeDef* getI2C() { return hi2c; }
 81103ae:	b480      	push	{r7}
 81103b0:	b083      	sub	sp, #12
 81103b2:	af00      	add	r7, sp, #0
 81103b4:	6078      	str	r0, [r7, #4]
 81103b6:	687b      	ldr	r3, [r7, #4]
 81103b8:	691b      	ldr	r3, [r3, #16]
 81103ba:	4618      	mov	r0, r3
 81103bc:	370c      	adds	r7, #12
 81103be:	46bd      	mov	sp, r7
 81103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81103c4:	4770      	bx	lr

081103c6 <_ZN12ProberThread9getI2CNumEv>:
	uint8_t getI2CNum() {return i2cNum; }
 81103c6:	b480      	push	{r7}
 81103c8:	b083      	sub	sp, #12
 81103ca:	af00      	add	r7, sp, #0
 81103cc:	6078      	str	r0, [r7, #4]
 81103ce:	687b      	ldr	r3, [r7, #4]
 81103d0:	7f1b      	ldrb	r3, [r3, #28]
 81103d2:	4618      	mov	r0, r3
 81103d4:	370c      	adds	r7, #12
 81103d6:	46bd      	mov	sp, r7
 81103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81103dc:	4770      	bx	lr
	...

081103e0 <_ZN11ADC16ThreadC1EP12ProberThread>:
#include "DataStructures.h"
#include "Debug/Debug.h"

static char cbuf[256];

ADC16Thread::ADC16Thread(ProberThread* parent)
 81103e0:	b590      	push	{r4, r7, lr}
 81103e2:	b083      	sub	sp, #12
 81103e4:	af00      	add	r7, sp, #0
 81103e6:	6078      	str	r0, [r7, #4]
 81103e8:	6039      	str	r1, [r7, #0]
: Thread("ADC16"), parent(parent), ads(parent->getI2C()), portNum(parent->getI2CNum()), offset(0)
 81103ea:	687b      	ldr	r3, [r7, #4]
 81103ec:	4914      	ldr	r1, [pc, #80]	; (8110440 <_ZN11ADC16ThreadC1EP12ProberThread+0x60>)
 81103ee:	4618      	mov	r0, r3
 81103f0:	f001 f980 	bl	81116f4 <_ZN6ThreadC1EPKc>
 81103f4:	4a13      	ldr	r2, [pc, #76]	; (8110444 <_ZN11ADC16ThreadC1EP12ProberThread+0x64>)
 81103f6:	687b      	ldr	r3, [r7, #4]
 81103f8:	601a      	str	r2, [r3, #0]
 81103fa:	687b      	ldr	r3, [r7, #4]
 81103fc:	683a      	ldr	r2, [r7, #0]
 81103fe:	611a      	str	r2, [r3, #16]
 8110400:	687b      	ldr	r3, [r7, #4]
 8110402:	f103 0414 	add.w	r4, r3, #20
 8110406:	6838      	ldr	r0, [r7, #0]
 8110408:	f7ff ffd1 	bl	81103ae <_ZN12ProberThread6getI2CEv>
 811040c:	4603      	mov	r3, r0
 811040e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8110448 <_ZN11ADC16ThreadC1EP12ProberThread+0x68>
 8110412:	2248      	movs	r2, #72	; 0x48
 8110414:	4619      	mov	r1, r3
 8110416:	4620      	mov	r0, r4
 8110418:	f7fb fed4 	bl	810c1c4 <_ZN7ADS1113C1EP19__I2C_HandleTypeDefhf>
 811041c:	6838      	ldr	r0, [r7, #0]
 811041e:	f7ff ffd2 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 8110422:	4603      	mov	r3, r0
 8110424:	461a      	mov	r2, r3
 8110426:	687b      	ldr	r3, [r7, #4]
 8110428:	f883 2020 	strb.w	r2, [r3, #32]
 811042c:	687b      	ldr	r3, [r7, #4]
 811042e:	f04f 0200 	mov.w	r2, #0
 8110432:	625a      	str	r2, [r3, #36]	; 0x24
{}
 8110434:	687b      	ldr	r3, [r7, #4]
 8110436:	4618      	mov	r0, r3
 8110438:	370c      	adds	r7, #12
 811043a:	46bd      	mov	sp, r7
 811043c:	bd90      	pop	{r4, r7, pc}
 811043e:	bf00      	nop
 8110440:	08115350 	.word	0x08115350
 8110444:	08115c38 	.word	0x08115c38
 8110448:	4003126f 	.word	0x4003126f

0811044c <_ZN11ADC16Thread4initEv>:

void ADC16Thread::init() {
 811044c:	b580      	push	{r7, lr}
 811044e:	b082      	sub	sp, #8
 8110450:	af00      	add	r7, sp, #0
 8110452:	6078      	str	r0, [r7, #4]
	if(!ads.begin()) {
 8110454:	687b      	ldr	r3, [r7, #4]
 8110456:	3314      	adds	r3, #20
 8110458:	4618      	mov	r0, r3
 811045a:	f7fb fee0 	bl	810c21e <_ZN7ADS11135beginEv>
 811045e:	4603      	mov	r3, r0
 8110460:	f083 0301 	eor.w	r3, r3, #1
 8110464:	b2db      	uxtb	r3, r3
 8110466:	2b00      	cmp	r3, #0
 8110468:	d011      	beq.n	811048e <_ZN11ADC16Thread4initEv+0x42>
		println("[i2c%d] ADS1113 initialisation failed", portNum);
 811046a:	6878      	ldr	r0, [r7, #4]
 811046c:	687b      	ldr	r3, [r7, #4]
 811046e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8110472:	461a      	mov	r2, r3
 8110474:	490b      	ldr	r1, [pc, #44]	; (81104a4 <_ZN11ADC16Thread4initEv+0x58>)
 8110476:	f001 f9b5 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		terminate();
 811047a:	687b      	ldr	r3, [r7, #4]
 811047c:	4618      	mov	r0, r3
 811047e:	f001 f9a3 	bl	81117c8 <_ZN6Thread9terminateEv>
		parent->resetProber();
 8110482:	687b      	ldr	r3, [r7, #4]
 8110484:	691b      	ldr	r3, [r3, #16]
 8110486:	4618      	mov	r0, r3
 8110488:	f000 fea2 	bl	81111d0 <_ZN12ProberThread11resetProberEv>
		return;
 811048c:	e007      	b.n	811049e <_ZN11ADC16Thread4initEv+0x52>
	}

	println("[i2c%d] ADS1113 initialised", portNum);
 811048e:	6878      	ldr	r0, [r7, #4]
 8110490:	687b      	ldr	r3, [r7, #4]
 8110492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8110496:	461a      	mov	r2, r3
 8110498:	4903      	ldr	r1, [pc, #12]	; (81104a8 <_ZN11ADC16Thread4initEv+0x5c>)
 811049a:	f001 f9a3 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
}
 811049e:	3708      	adds	r7, #8
 81104a0:	46bd      	mov	sp, r7
 81104a2:	bd80      	pop	{r7, pc}
 81104a4:	08115358 	.word	0x08115358
 81104a8:	08115380 	.word	0x08115380

081104ac <_ZN11ADC16Thread4loopEv>:

static PotentiometerData data;
static Avionics_ADCPacket packet;
void ADC16Thread::loop() { //Should this send a voltage or radial position?
 81104ac:	b590      	push	{r4, r7, lr}
 81104ae:	ed2d 8b02 	vpush	{d8}
 81104b2:	b085      	sub	sp, #20
 81104b4:	af00      	add	r7, sp, #0
 81104b6:	6078      	str	r0, [r7, #4]

	int16_t raw = 0;
 81104b8:	2300      	movs	r3, #0
 81104ba:	81fb      	strh	r3, [r7, #14]

	if(ads.readADC_Differential_0_1(raw)) {
 81104bc:	687b      	ldr	r3, [r7, #4]
 81104be:	3314      	adds	r3, #20
 81104c0:	f107 010e 	add.w	r1, r7, #14
 81104c4:	2280      	movs	r2, #128	; 0x80
 81104c6:	4618      	mov	r0, r3
 81104c8:	f7fb ff55 	bl	810c376 <_ZN7ADS111324readADC_Differential_0_1ERst>
 81104cc:	4603      	mov	r3, r0
 81104ce:	2b00      	cmp	r3, #0
 81104d0:	d037      	beq.n	8110542 <_ZN11ADC16Thread4loopEv+0x96>
		data.portNum = portNum;
 81104d2:	687b      	ldr	r3, [r7, #4]
 81104d4:	f893 2020 	ldrb.w	r2, [r3, #32]
 81104d8:	4b25      	ldr	r3, [pc, #148]	; (8110570 <_ZN11ADC16Thread4loopEv+0xc4>)
 81104da:	701a      	strb	r2, [r3, #0]
		data.voltage = raw*ads.getMultiplier() - offset; //voltage[V]
 81104dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81104e0:	ee07 3a90 	vmov	s15, r3
 81104e4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 81104e8:	687b      	ldr	r3, [r7, #4]
 81104ea:	3314      	adds	r3, #20
 81104ec:	4618      	mov	r0, r3
 81104ee:	f7fb ffd0 	bl	810c492 <_ZN7ADS111313getMultiplierEv>
 81104f2:	eef0 7a40 	vmov.f32	s15, s0
 81104f6:	ee28 7a27 	vmul.f32	s14, s16, s15
 81104fa:	687b      	ldr	r3, [r7, #4]
 81104fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8110500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8110504:	4b1a      	ldr	r3, [pc, #104]	; (8110570 <_ZN11ADC16Thread4loopEv+0xc4>)
 8110506:	edc3 7a01 	vstr	s15, [r3, #4]
		println("%s", data.toString(cbuf));
 811050a:	687c      	ldr	r4, [r7, #4]
 811050c:	4919      	ldr	r1, [pc, #100]	; (8110574 <_ZN11ADC16Thread4loopEv+0xc8>)
 811050e:	4818      	ldr	r0, [pc, #96]	; (8110570 <_ZN11ADC16Thread4loopEv+0xc4>)
 8110510:	f7ff ff1a 	bl	8110348 <_ZN17PotentiometerData8toStringEPc>
 8110514:	4603      	mov	r3, r0
 8110516:	461a      	mov	r2, r3
 8110518:	4917      	ldr	r1, [pc, #92]	; (8110578 <_ZN11ADC16Thread4loopEv+0xcc>)
 811051a:	4620      	mov	r0, r4
 811051c:	f001 f962 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		data.toArray((uint8_t*) &packet);
 8110520:	4916      	ldr	r1, [pc, #88]	; (811057c <_ZN11ADC16Thread4loopEv+0xd0>)
 8110522:	4813      	ldr	r0, [pc, #76]	; (8110570 <_ZN11ADC16Thread4loopEv+0xc4>)
 8110524:	f7ff ff2e 	bl	8110384 <_ZN17PotentiometerData7toArrayEPh>
		network.send(&packet);
 8110528:	4914      	ldr	r1, [pc, #80]	; (811057c <_ZN11ADC16Thread4loopEv+0xd0>)
 811052a:	4815      	ldr	r0, [pc, #84]	; (8110580 <_ZN11ADC16Thread4loopEv+0xd4>)
 811052c:	f7fe febc 	bl	810f2a8 <_ZN10MessageBus4sendI18Avionics_ADCPacketEEbPT_>
		portYIELD();
 8110530:	4b14      	ldr	r3, [pc, #80]	; (8110584 <_ZN11ADC16Thread4loopEv+0xd8>)
 8110532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8110536:	601a      	str	r2, [r3, #0]
 8110538:	f3bf 8f4f 	dsb	sy
 811053c:	f3bf 8f6f 	isb	sy
	} else {
		println("[i2c%d] ADS1113 disconnected", portNum);
		terminate();
		parent->resetProber();
	}
}
 8110540:	e010      	b.n	8110564 <_ZN11ADC16Thread4loopEv+0xb8>
		println("[i2c%d] ADS1113 disconnected", portNum);
 8110542:	6878      	ldr	r0, [r7, #4]
 8110544:	687b      	ldr	r3, [r7, #4]
 8110546:	f893 3020 	ldrb.w	r3, [r3, #32]
 811054a:	461a      	mov	r2, r3
 811054c:	490e      	ldr	r1, [pc, #56]	; (8110588 <_ZN11ADC16Thread4loopEv+0xdc>)
 811054e:	f001 f949 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		terminate();
 8110552:	687b      	ldr	r3, [r7, #4]
 8110554:	4618      	mov	r0, r3
 8110556:	f001 f937 	bl	81117c8 <_ZN6Thread9terminateEv>
		parent->resetProber();
 811055a:	687b      	ldr	r3, [r7, #4]
 811055c:	691b      	ldr	r3, [r3, #16]
 811055e:	4618      	mov	r0, r3
 8110560:	f000 fe36 	bl	81111d0 <_ZN12ProberThread11resetProberEv>
}
 8110564:	bf00      	nop
 8110566:	3714      	adds	r7, #20
 8110568:	46bd      	mov	sp, r7
 811056a:	ecbd 8b02 	vpop	{d8}
 811056e:	bd90      	pop	{r4, r7, pc}
 8110570:	10008b2c 	.word	0x10008b2c
 8110574:	10008a2c 	.word	0x10008a2c
 8110578:	0811539c 	.word	0x0811539c
 811057c:	10008b34 	.word	0x10008b34
 8110580:	10009398 	.word	0x10009398
 8110584:	e000ed04 	.word	0xe000ed04
 8110588:	081153a0 	.word	0x081153a0

0811058c <_ZN11ADC16ThreadD1Ev>:
#include "DataStructures.h"
#include "Prober.h"

#include "Libraries/ADS1113/ads1113.h"

class ADC16Thread : public Thread {
 811058c:	b580      	push	{r7, lr}
 811058e:	b082      	sub	sp, #8
 8110590:	af00      	add	r7, sp, #0
 8110592:	6078      	str	r0, [r7, #4]
 8110594:	4a05      	ldr	r2, [pc, #20]	; (81105ac <_ZN11ADC16ThreadD1Ev+0x20>)
 8110596:	687b      	ldr	r3, [r7, #4]
 8110598:	601a      	str	r2, [r3, #0]
 811059a:	687b      	ldr	r3, [r7, #4]
 811059c:	4618      	mov	r0, r3
 811059e:	f7fb f9b3 	bl	810b908 <_ZN6ThreadD1Ev>
 81105a2:	687b      	ldr	r3, [r7, #4]
 81105a4:	4618      	mov	r0, r3
 81105a6:	3708      	adds	r7, #8
 81105a8:	46bd      	mov	sp, r7
 81105aa:	bd80      	pop	{r7, pc}
 81105ac:	08115c38 	.word	0x08115c38

081105b0 <_ZN11ADC16ThreadD0Ev>:
 81105b0:	b580      	push	{r7, lr}
 81105b2:	b082      	sub	sp, #8
 81105b4:	af00      	add	r7, sp, #0
 81105b6:	6078      	str	r0, [r7, #4]
 81105b8:	6878      	ldr	r0, [r7, #4]
 81105ba:	f7ff ffe7 	bl	811058c <_ZN11ADC16ThreadD1Ev>
 81105be:	2128      	movs	r1, #40	; 0x28
 81105c0:	6878      	ldr	r0, [r7, #4]
 81105c2:	f001 fb92 	bl	8111cea <_ZdlPvj>
 81105c6:	687b      	ldr	r3, [r7, #4]
 81105c8:	4618      	mov	r0, r3
 81105ca:	3708      	adds	r7, #8
 81105cc:	46bd      	mov	sp, r7
 81105ce:	bd80      	pop	{r7, pc}

081105d0 <_ZN11ScienceData8toStringEPc>:
	char* toString(char* buffer) {
 81105d0:	b590      	push	{r4, r7, lr}
 81105d2:	b083      	sub	sp, #12
 81105d4:	af00      	add	r7, sp, #0
 81105d6:	6078      	str	r0, [r7, #4]
 81105d8:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Mass(g): %f", mass);
 81105da:	687b      	ldr	r3, [r7, #4]
 81105dc:	681b      	ldr	r3, [r3, #0]
 81105de:	4618      	mov	r0, r3
 81105e0:	f7f0 f84a 	bl	8100678 <__aeabi_f2d>
 81105e4:	4603      	mov	r3, r0
 81105e6:	460c      	mov	r4, r1
 81105e8:	461a      	mov	r2, r3
 81105ea:	4623      	mov	r3, r4
 81105ec:	4904      	ldr	r1, [pc, #16]	; (8110600 <_ZN11ScienceData8toStringEPc+0x30>)
 81105ee:	6838      	ldr	r0, [r7, #0]
 81105f0:	f002 fa30 	bl	8112a54 <siprintf>
		return buffer;
 81105f4:	683b      	ldr	r3, [r7, #0]
	}
 81105f6:	4618      	mov	r0, r3
 81105f8:	370c      	adds	r7, #12
 81105fa:	46bd      	mov	sp, r7
 81105fc:	bd90      	pop	{r4, r7, pc}
 81105fe:	bf00      	nop
 8110600:	081153e4 	.word	0x081153e4

08110604 <_ZN11ScienceData7toArrayEPh>:
	uint8_t* toArray(uint8_t* buffer){
 8110604:	b480      	push	{r7}
 8110606:	b083      	sub	sp, #12
 8110608:	af00      	add	r7, sp, #0
 811060a:	6078      	str	r0, [r7, #4]
 811060c:	6039      	str	r1, [r7, #0]
		*(float*)(buffer) = mass;
 811060e:	683b      	ldr	r3, [r7, #0]
 8110610:	687a      	ldr	r2, [r7, #4]
 8110612:	6812      	ldr	r2, [r2, #0]
 8110614:	601a      	str	r2, [r3, #0]
		return buffer;
 8110616:	683b      	ldr	r3, [r7, #0]
	}
 8110618:	4618      	mov	r0, r3
 811061a:	370c      	adds	r7, #12
 811061c:	46bd      	mov	sp, r7
 811061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110622:	4770      	bx	lr

08110624 <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m>:
#define TIMEOUT 30*1000  //ms

static char cbuf[256];
const int32_t threshold = 50000;

ADC24Thread::ADC24Thread(ProberThread* parent, GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin)
 8110624:	b580      	push	{r7, lr}
 8110626:	b084      	sub	sp, #16
 8110628:	af00      	add	r7, sp, #0
 811062a:	60f8      	str	r0, [r7, #12]
 811062c:	60b9      	str	r1, [r7, #8]
 811062e:	607a      	str	r2, [r7, #4]
 8110630:	603b      	str	r3, [r7, #0]
: Thread("ADC24", 1024), parent(parent), portNum(parent->getI2CNum()), _nSamples(4),
  _multiplier(0.00048667),  _zero(8032150), _hx711({sck_gpio, sck_pin, di_gpio, di_pin})
 8110632:	68fb      	ldr	r3, [r7, #12]
 8110634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8110638:	4915      	ldr	r1, [pc, #84]	; (8110690 <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m+0x6c>)
 811063a:	4618      	mov	r0, r3
 811063c:	f001 f87d 	bl	811173a <_ZN6ThreadC1EPKcm>
 8110640:	4a14      	ldr	r2, [pc, #80]	; (8110694 <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m+0x70>)
 8110642:	68fb      	ldr	r3, [r7, #12]
 8110644:	601a      	str	r2, [r3, #0]
 8110646:	68fb      	ldr	r3, [r7, #12]
 8110648:	68ba      	ldr	r2, [r7, #8]
 811064a:	611a      	str	r2, [r3, #16]
: Thread("ADC24", 1024), parent(parent), portNum(parent->getI2CNum()), _nSamples(4),
 811064c:	68b8      	ldr	r0, [r7, #8]
 811064e:	f7ff feba 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 8110652:	4603      	mov	r3, r0
 8110654:	461a      	mov	r2, r3
  _multiplier(0.00048667),  _zero(8032150), _hx711({sck_gpio, sck_pin, di_gpio, di_pin})
 8110656:	68fb      	ldr	r3, [r7, #12]
 8110658:	751a      	strb	r2, [r3, #20]
 811065a:	68fb      	ldr	r3, [r7, #12]
 811065c:	2204      	movs	r2, #4
 811065e:	82da      	strh	r2, [r3, #22]
 8110660:	68fb      	ldr	r3, [r7, #12]
 8110662:	4a0d      	ldr	r2, [pc, #52]	; (8110698 <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m+0x74>)
 8110664:	619a      	str	r2, [r3, #24]
 8110666:	68fb      	ldr	r3, [r7, #12]
 8110668:	4a0c      	ldr	r2, [pc, #48]	; (811069c <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m+0x78>)
 811066a:	61da      	str	r2, [r3, #28]
 811066c:	68fb      	ldr	r3, [r7, #12]
 811066e:	687a      	ldr	r2, [r7, #4]
 8110670:	621a      	str	r2, [r3, #32]
 8110672:	68fb      	ldr	r3, [r7, #12]
 8110674:	683a      	ldr	r2, [r7, #0]
 8110676:	625a      	str	r2, [r3, #36]	; 0x24
 8110678:	68fb      	ldr	r3, [r7, #12]
 811067a:	69ba      	ldr	r2, [r7, #24]
 811067c:	629a      	str	r2, [r3, #40]	; 0x28
 811067e:	68fb      	ldr	r3, [r7, #12]
 8110680:	69fa      	ldr	r2, [r7, #28]
 8110682:	62da      	str	r2, [r3, #44]	; 0x2c
{ }
 8110684:	68fb      	ldr	r3, [r7, #12]
 8110686:	4618      	mov	r0, r3
 8110688:	3710      	adds	r7, #16
 811068a:	46bd      	mov	sp, r7
 811068c:	bd80      	pop	{r7, pc}
 811068e:	bf00      	nop
 8110690:	081153f0 	.word	0x081153f0
 8110694:	08115c6c 	.word	0x08115c6c
 8110698:	39ff27be 	.word	0x39ff27be
 811069c:	007a8f96 	.word	0x007a8f96

081106a0 <_ZN11ADC24Thread4initEv>:



void ADC24Thread::init() {
 81106a0:	b580      	push	{r7, lr}
 81106a2:	b082      	sub	sp, #8
 81106a4:	af00      	add	r7, sp, #0
 81106a6:	6078      	str	r0, [r7, #4]
	HX711_begin(_hx711);
 81106a8:	687b      	ldr	r3, [r7, #4]
 81106aa:	3320      	adds	r3, #32
 81106ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81106ae:	f7fd f807 	bl	810d6c0 <HX711_begin>

	if(!HX711_checkReadiness(_hx711)) {
 81106b2:	687b      	ldr	r3, [r7, #4]
 81106b4:	3320      	adds	r3, #32
 81106b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81106b8:	f7fd f868 	bl	810d78c <HX711_checkReadiness>
 81106bc:	4603      	mov	r3, r0
 81106be:	f083 0301 	eor.w	r3, r3, #1
 81106c2:	b2db      	uxtb	r3, r3
 81106c4:	2b00      	cmp	r3, #0
 81106c6:	d010      	beq.n	81106ea <_ZN11ADC24Thread4initEv+0x4a>
		println("[i2c%d] HX711 initialisation failed", portNum);
 81106c8:	6878      	ldr	r0, [r7, #4]
 81106ca:	687b      	ldr	r3, [r7, #4]
 81106cc:	7d1b      	ldrb	r3, [r3, #20]
 81106ce:	461a      	mov	r2, r3
 81106d0:	490b      	ldr	r1, [pc, #44]	; (8110700 <_ZN11ADC24Thread4initEv+0x60>)
 81106d2:	f001 f887 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		terminate();
 81106d6:	687b      	ldr	r3, [r7, #4]
 81106d8:	4618      	mov	r0, r3
 81106da:	f001 f875 	bl	81117c8 <_ZN6Thread9terminateEv>
		parent->resetProber();
 81106de:	687b      	ldr	r3, [r7, #4]
 81106e0:	691b      	ldr	r3, [r3, #16]
 81106e2:	4618      	mov	r0, r3
 81106e4:	f000 fd74 	bl	81111d0 <_ZN12ProberThread11resetProberEv>
		return;
 81106e8:	e006      	b.n	81106f8 <_ZN11ADC24Thread4initEv+0x58>
	}
	//Ensure there is no weight on top of scale on startup
	//calibrateMultiplier(); //In order to manually calibrate the scale, empirical values are taken as default values already
	println("[i2c%d] HX711 initialised", portNum);
 81106ea:	6878      	ldr	r0, [r7, #4]
 81106ec:	687b      	ldr	r3, [r7, #4]
 81106ee:	7d1b      	ldrb	r3, [r3, #20]
 81106f0:	461a      	mov	r2, r3
 81106f2:	4904      	ldr	r1, [pc, #16]	; (8110704 <_ZN11ADC24Thread4initEv+0x64>)
 81106f4:	f001 f876 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
}
 81106f8:	3708      	adds	r7, #8
 81106fa:	46bd      	mov	sp, r7
 81106fc:	bd80      	pop	{r7, pc}
 81106fe:	bf00      	nop
 8110700:	081153f8 	.word	0x081153f8
 8110704:	0811541c 	.word	0x0811541c

08110708 <_ZN11ADC24Thread4loopEv>:

static ScienceData data;
static Science_MassPacket packet;
void ADC24Thread::loop() {
 8110708:	b5b0      	push	{r4, r5, r7, lr}
 811070a:	b084      	sub	sp, #16
 811070c:	af02      	add	r7, sp, #8
 811070e:	6078      	str	r0, [r7, #4]
	if(HX711_checkReadiness(_hx711)) { //check sensor is still responding
 8110710:	687b      	ldr	r3, [r7, #4]
 8110712:	3320      	adds	r3, #32
 8110714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8110716:	f7fd f839 	bl	810d78c <HX711_checkReadiness>
 811071a:	4603      	mov	r3, r0
 811071c:	2b00      	cmp	r3, #0
 811071e:	d036      	beq.n	811078e <_ZN11ADC24Thread4loopEv+0x86>
		data.mass = (HX711_valueAve(_hx711, _nSamples) - _zero)*_multiplier;
 8110720:	687b      	ldr	r3, [r7, #4]
 8110722:	8ada      	ldrh	r2, [r3, #22]
 8110724:	687b      	ldr	r3, [r7, #4]
 8110726:	9200      	str	r2, [sp, #0]
 8110728:	3320      	adds	r3, #32
 811072a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 811072c:	f7fd f8c7 	bl	810d8be <HX711_valueAve>
 8110730:	4602      	mov	r2, r0
 8110732:	687b      	ldr	r3, [r7, #4]
 8110734:	69db      	ldr	r3, [r3, #28]
 8110736:	1ad3      	subs	r3, r2, r3
 8110738:	ee07 3a90 	vmov	s15, r3
 811073c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8110740:	687b      	ldr	r3, [r7, #4]
 8110742:	edd3 7a06 	vldr	s15, [r3, #24]
 8110746:	ee67 7a27 	vmul.f32	s15, s14, s15
 811074a:	4b1b      	ldr	r3, [pc, #108]	; (81107b8 <_ZN11ADC24Thread4loopEv+0xb0>)
 811074c:	edc3 7a00 	vstr	s15, [r3]
		println("[i2c%d] %s", portNum, data.toString(cbuf));
 8110750:	687c      	ldr	r4, [r7, #4]
 8110752:	687b      	ldr	r3, [r7, #4]
 8110754:	7d1b      	ldrb	r3, [r3, #20]
 8110756:	461d      	mov	r5, r3
 8110758:	4918      	ldr	r1, [pc, #96]	; (81107bc <_ZN11ADC24Thread4loopEv+0xb4>)
 811075a:	4817      	ldr	r0, [pc, #92]	; (81107b8 <_ZN11ADC24Thread4loopEv+0xb0>)
 811075c:	f7ff ff38 	bl	81105d0 <_ZN11ScienceData8toStringEPc>
 8110760:	4603      	mov	r3, r0
 8110762:	462a      	mov	r2, r5
 8110764:	4916      	ldr	r1, [pc, #88]	; (81107c0 <_ZN11ADC24Thread4loopEv+0xb8>)
 8110766:	4620      	mov	r0, r4
 8110768:	f001 f83c 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		data.toArray((uint8_t*) &packet);
 811076c:	4915      	ldr	r1, [pc, #84]	; (81107c4 <_ZN11ADC24Thread4loopEv+0xbc>)
 811076e:	4812      	ldr	r0, [pc, #72]	; (81107b8 <_ZN11ADC24Thread4loopEv+0xb0>)
 8110770:	f7ff ff48 	bl	8110604 <_ZN11ScienceData7toArrayEPh>
		network.send(&packet);
 8110774:	4913      	ldr	r1, [pc, #76]	; (81107c4 <_ZN11ADC24Thread4loopEv+0xbc>)
 8110776:	4814      	ldr	r0, [pc, #80]	; (81107c8 <_ZN11ADC24Thread4loopEv+0xc0>)
 8110778:	f7fe fe0e 	bl	810f398 <_ZN10MessageBus4sendI18Science_MassPacketEEbPT_>
		portYIELD();
 811077c:	4b13      	ldr	r3, [pc, #76]	; (81107cc <_ZN11ADC24Thread4loopEv+0xc4>)
 811077e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8110782:	601a      	str	r2, [r3, #0]
 8110784:	f3bf 8f4f 	dsb	sy
 8110788:	f3bf 8f6f 	isb	sy
	} else {
		println("[i2c%d] HX711 disconnected", portNum);
		terminate();
		parent->resetProber();
	}
}
 811078c:	e00f      	b.n	81107ae <_ZN11ADC24Thread4loopEv+0xa6>
		println("[i2c%d] HX711 disconnected", portNum);
 811078e:	6878      	ldr	r0, [r7, #4]
 8110790:	687b      	ldr	r3, [r7, #4]
 8110792:	7d1b      	ldrb	r3, [r3, #20]
 8110794:	461a      	mov	r2, r3
 8110796:	490e      	ldr	r1, [pc, #56]	; (81107d0 <_ZN11ADC24Thread4loopEv+0xc8>)
 8110798:	f001 f824 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		terminate();
 811079c:	687b      	ldr	r3, [r7, #4]
 811079e:	4618      	mov	r0, r3
 81107a0:	f001 f812 	bl	81117c8 <_ZN6Thread9terminateEv>
		parent->resetProber();
 81107a4:	687b      	ldr	r3, [r7, #4]
 81107a6:	691b      	ldr	r3, [r3, #16]
 81107a8:	4618      	mov	r0, r3
 81107aa:	f000 fd11 	bl	81111d0 <_ZN12ProberThread11resetProberEv>
}
 81107ae:	bf00      	nop
 81107b0:	3708      	adds	r7, #8
 81107b2:	46bd      	mov	sp, r7
 81107b4:	bdb0      	pop	{r4, r5, r7, pc}
 81107b6:	bf00      	nop
 81107b8:	10008c3c 	.word	0x10008c3c
 81107bc:	10008b3c 	.word	0x10008b3c
 81107c0:	08115438 	.word	0x08115438
 81107c4:	10008c40 	.word	0x10008c40
 81107c8:	10009398 	.word	0x10009398
 81107cc:	e000ed04 	.word	0xe000ed04
 81107d0:	08115444 	.word	0x08115444

081107d4 <_ZN11ADC24ThreadD1Ev>:
#include "DataStructures.h"
#include "Prober.h"

#include "Libraries/HX711/hx711.h"

class ADC24Thread : public Thread {
 81107d4:	b580      	push	{r7, lr}
 81107d6:	b082      	sub	sp, #8
 81107d8:	af00      	add	r7, sp, #0
 81107da:	6078      	str	r0, [r7, #4]
 81107dc:	4a05      	ldr	r2, [pc, #20]	; (81107f4 <_ZN11ADC24ThreadD1Ev+0x20>)
 81107de:	687b      	ldr	r3, [r7, #4]
 81107e0:	601a      	str	r2, [r3, #0]
 81107e2:	687b      	ldr	r3, [r7, #4]
 81107e4:	4618      	mov	r0, r3
 81107e6:	f7fb f88f 	bl	810b908 <_ZN6ThreadD1Ev>
 81107ea:	687b      	ldr	r3, [r7, #4]
 81107ec:	4618      	mov	r0, r3
 81107ee:	3708      	adds	r7, #8
 81107f0:	46bd      	mov	sp, r7
 81107f2:	bd80      	pop	{r7, pc}
 81107f4:	08115c6c 	.word	0x08115c6c

081107f8 <_ZN11ADC24ThreadD0Ev>:
 81107f8:	b580      	push	{r7, lr}
 81107fa:	b082      	sub	sp, #8
 81107fc:	af00      	add	r7, sp, #0
 81107fe:	6078      	str	r0, [r7, #4]
 8110800:	6878      	ldr	r0, [r7, #4]
 8110802:	f7ff ffe7 	bl	81107d4 <_ZN11ADC24ThreadD1Ev>
 8110806:	2130      	movs	r1, #48	; 0x30
 8110808:	6878      	ldr	r0, [r7, #4]
 811080a:	f001 fa6e 	bl	8111cea <_ZdlPvj>
 811080e:	687b      	ldr	r3, [r7, #4]
 8110810:	4618      	mov	r0, r3
 8110812:	3708      	adds	r7, #8
 8110814:	46bd      	mov	sp, r7
 8110816:	bd80      	pop	{r7, pc}

08110818 <_ZN8BaroData8toStringEPc>:
	char* toString(char* buffer) {
 8110818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 811081c:	b086      	sub	sp, #24
 811081e:	af04      	add	r7, sp, #16
 8110820:	6078      	str	r0, [r7, #4]
 8110822:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Tmp: %f, Prs: %f, Hum: %f", temperature, pressure, humidity);
 8110824:	687b      	ldr	r3, [r7, #4]
 8110826:	681b      	ldr	r3, [r3, #0]
 8110828:	4618      	mov	r0, r3
 811082a:	f7ef ff25 	bl	8100678 <__aeabi_f2d>
 811082e:	4680      	mov	r8, r0
 8110830:	4689      	mov	r9, r1
 8110832:	687b      	ldr	r3, [r7, #4]
 8110834:	685b      	ldr	r3, [r3, #4]
 8110836:	4618      	mov	r0, r3
 8110838:	f7ef ff1e 	bl	8100678 <__aeabi_f2d>
 811083c:	4604      	mov	r4, r0
 811083e:	460d      	mov	r5, r1
 8110840:	687b      	ldr	r3, [r7, #4]
 8110842:	689b      	ldr	r3, [r3, #8]
 8110844:	4618      	mov	r0, r3
 8110846:	f7ef ff17 	bl	8100678 <__aeabi_f2d>
 811084a:	4602      	mov	r2, r0
 811084c:	460b      	mov	r3, r1
 811084e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110852:	e9cd 4500 	strd	r4, r5, [sp]
 8110856:	4642      	mov	r2, r8
 8110858:	464b      	mov	r3, r9
 811085a:	4905      	ldr	r1, [pc, #20]	; (8110870 <_ZN8BaroData8toStringEPc+0x58>)
 811085c:	6838      	ldr	r0, [r7, #0]
 811085e:	f002 f8f9 	bl	8112a54 <siprintf>
		return buffer;
 8110862:	683b      	ldr	r3, [r7, #0]
	}
 8110864:	4618      	mov	r0, r3
 8110866:	3708      	adds	r7, #8
 8110868:	46bd      	mov	sp, r7
 811086a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 811086e:	bf00      	nop
 8110870:	0811555c 	.word	0x0811555c

08110874 <_ZN8BaroData7toArrayEPh>:
	uint8_t* toArray(uint8_t* buffer) {
 8110874:	b480      	push	{r7}
 8110876:	b083      	sub	sp, #12
 8110878:	af00      	add	r7, sp, #0
 811087a:	6078      	str	r0, [r7, #4]
 811087c:	6039      	str	r1, [r7, #0]
		*(float*)(buffer + 0) = pressure;
 811087e:	687b      	ldr	r3, [r7, #4]
 8110880:	685a      	ldr	r2, [r3, #4]
 8110882:	683b      	ldr	r3, [r7, #0]
 8110884:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 1*4) = temperature;
 8110886:	683b      	ldr	r3, [r7, #0]
 8110888:	3304      	adds	r3, #4
 811088a:	687a      	ldr	r2, [r7, #4]
 811088c:	6812      	ldr	r2, [r2, #0]
 811088e:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 2*4) = humidity;
 8110890:	683b      	ldr	r3, [r7, #0]
 8110892:	3308      	adds	r3, #8
 8110894:	687a      	ldr	r2, [r7, #4]
 8110896:	6892      	ldr	r2, [r2, #8]
 8110898:	601a      	str	r2, [r3, #0]
		return buffer;
 811089a:	683b      	ldr	r3, [r7, #0]
	}
 811089c:	4618      	mov	r0, r3
 811089e:	370c      	adds	r7, #12
 81108a0:	46bd      	mov	sp, r7
 81108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81108a6:	4770      	bx	lr

081108a8 <_ZN15BarometerThread4initEv>:
#include "Debug/Debug.h"


static char cbuf[128];

void BarometerThread::init() {
 81108a8:	b580      	push	{r7, lr}
 81108aa:	b082      	sub	sp, #8
 81108ac:	af00      	add	r7, sp, #0
 81108ae:	6078      	str	r0, [r7, #4]
	bmp280_init_default_params(&bmp280.params);
 81108b0:	687b      	ldr	r3, [r7, #4]
 81108b2:	333c      	adds	r3, #60	; 0x3c
 81108b4:	4618      	mov	r0, r3
 81108b6:	f7fb fdfb 	bl	810c4b0 <bmp280_init_default_params>

	bmp280.params.standby = BMP280_STANDBY_05;
 81108ba:	687b      	ldr	r3, [r7, #4]
 81108bc:	2200      	movs	r2, #0
 81108be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 81108c2:	687b      	ldr	r3, [r7, #4]
 81108c4:	2276      	movs	r2, #118	; 0x76
 81108c6:	869a      	strh	r2, [r3, #52]	; 0x34
	bmp280.i2c = parent->getI2C();
 81108c8:	687b      	ldr	r3, [r7, #4]
 81108ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81108cc:	4618      	mov	r0, r3
 81108ce:	f7ff fd6e 	bl	81103ae <_ZN12ProberThread6getI2CEv>
 81108d2:	4602      	mov	r2, r0
 81108d4:	687b      	ldr	r3, [r7, #4]
 81108d6:	639a      	str	r2, [r3, #56]	; 0x38

	//portENTER_CRITICAL();
	if(!bmp280_init(&bmp280, &bmp280.params)) {
 81108d8:	687b      	ldr	r3, [r7, #4]
 81108da:	f103 0210 	add.w	r2, r3, #16
 81108de:	687b      	ldr	r3, [r7, #4]
 81108e0:	333c      	adds	r3, #60	; 0x3c
 81108e2:	4619      	mov	r1, r3
 81108e4:	4610      	mov	r0, r2
 81108e6:	f7fb ff5c 	bl	810c7a2 <bmp280_init>
 81108ea:	4603      	mov	r3, r0
 81108ec:	f083 0301 	eor.w	r3, r3, #1
 81108f0:	b2db      	uxtb	r3, r3
 81108f2:	2b00      	cmp	r3, #0
 81108f4:	d011      	beq.n	811091a <_ZN15BarometerThread4initEv+0x72>
		//portEXIT_CRITICAL();
		println("[i2c%d] BMP280 initialisation failed", portNum);
 81108f6:	6878      	ldr	r0, [r7, #4]
 81108f8:	687b      	ldr	r3, [r7, #4]
 81108fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 81108fe:	461a      	mov	r2, r3
 8110900:	490b      	ldr	r1, [pc, #44]	; (8110930 <_ZN15BarometerThread4initEv+0x88>)
 8110902:	f000 ff6f 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		terminate();
 8110906:	687b      	ldr	r3, [r7, #4]
 8110908:	4618      	mov	r0, r3
 811090a:	f000 ff5d 	bl	81117c8 <_ZN6Thread9terminateEv>
		parent->resetProber();
 811090e:	687b      	ldr	r3, [r7, #4]
 8110910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8110912:	4618      	mov	r0, r3
 8110914:	f000 fc5c 	bl	81111d0 <_ZN12ProberThread11resetProberEv>
		return;
 8110918:	e007      	b.n	811092a <_ZN15BarometerThread4initEv+0x82>
	}
	//portEXIT_CRITICAL();

	println("[i2c%d] BMP280 initialised", portNum);
 811091a:	6878      	ldr	r0, [r7, #4]
 811091c:	687b      	ldr	r3, [r7, #4]
 811091e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8110922:	461a      	mov	r2, r3
 8110924:	4903      	ldr	r1, [pc, #12]	; (8110934 <_ZN15BarometerThread4initEv+0x8c>)
 8110926:	f000 ff5d 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
}
 811092a:	3708      	adds	r7, #8
 811092c:	46bd      	mov	sp, r7
 811092e:	bd80      	pop	{r7, pc}
 8110930:	08115578 	.word	0x08115578
 8110934:	081155a0 	.word	0x081155a0

08110938 <_ZN15BarometerThread4loopEv>:

static Avionics_BaroTempPacket packet;
static BaroData data;
void BarometerThread::loop() {
 8110938:	b5b0      	push	{r4, r5, r7, lr}
 811093a:	b082      	sub	sp, #8
 811093c:	af00      	add	r7, sp, #0
 811093e:	6078      	str	r0, [r7, #4]
	if(bmp280_read_float(&bmp280, &data.temperature, &data.pressure, &data.humidity)) {
 8110940:	687b      	ldr	r3, [r7, #4]
 8110942:	f103 0010 	add.w	r0, r3, #16
 8110946:	4b1e      	ldr	r3, [pc, #120]	; (81109c0 <_ZN15BarometerThread4loopEv+0x88>)
 8110948:	4a1e      	ldr	r2, [pc, #120]	; (81109c4 <_ZN15BarometerThread4loopEv+0x8c>)
 811094a:	491f      	ldr	r1, [pc, #124]	; (81109c8 <_ZN15BarometerThread4loopEv+0x90>)
 811094c:	f7fc fa7e 	bl	810ce4c <bmp280_read_float>
 8110950:	4603      	mov	r3, r0
 8110952:	2b00      	cmp	r3, #0
 8110954:	d01f      	beq.n	8110996 <_ZN15BarometerThread4loopEv+0x5e>
		println("[i2c%d] %s", portNum, data.toString(cbuf));
 8110956:	687c      	ldr	r4, [r7, #4]
 8110958:	687b      	ldr	r3, [r7, #4]
 811095a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 811095e:	461d      	mov	r5, r3
 8110960:	491a      	ldr	r1, [pc, #104]	; (81109cc <_ZN15BarometerThread4loopEv+0x94>)
 8110962:	4819      	ldr	r0, [pc, #100]	; (81109c8 <_ZN15BarometerThread4loopEv+0x90>)
 8110964:	f7ff ff58 	bl	8110818 <_ZN8BaroData8toStringEPc>
 8110968:	4603      	mov	r3, r0
 811096a:	462a      	mov	r2, r5
 811096c:	4918      	ldr	r1, [pc, #96]	; (81109d0 <_ZN15BarometerThread4loopEv+0x98>)
 811096e:	4620      	mov	r0, r4
 8110970:	f000 ff38 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		data.toArray((uint8_t*) &packet);
 8110974:	4917      	ldr	r1, [pc, #92]	; (81109d4 <_ZN15BarometerThread4loopEv+0x9c>)
 8110976:	4814      	ldr	r0, [pc, #80]	; (81109c8 <_ZN15BarometerThread4loopEv+0x90>)
 8110978:	f7ff ff7c 	bl	8110874 <_ZN8BaroData7toArrayEPh>
		network.send(&packet);
 811097c:	4915      	ldr	r1, [pc, #84]	; (81109d4 <_ZN15BarometerThread4loopEv+0x9c>)
 811097e:	4816      	ldr	r0, [pc, #88]	; (81109d8 <_ZN15BarometerThread4loopEv+0xa0>)
 8110980:	f7fe fba2 	bl	810f0c8 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_>
		portYIELD();
 8110984:	4b15      	ldr	r3, [pc, #84]	; (81109dc <_ZN15BarometerThread4loopEv+0xa4>)
 8110986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 811098a:	601a      	str	r2, [r3, #0]
 811098c:	f3bf 8f4f 	dsb	sy
 8110990:	f3bf 8f6f 	isb	sy
	} else {
		println("[i2c%d] BMP280 disconnected", portNum);
		terminate();
		parent->resetProber();
	}
}
 8110994:	e010      	b.n	81109b8 <_ZN15BarometerThread4loopEv+0x80>
		println("[i2c%d] BMP280 disconnected", portNum);
 8110996:	6878      	ldr	r0, [r7, #4]
 8110998:	687b      	ldr	r3, [r7, #4]
 811099a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 811099e:	461a      	mov	r2, r3
 81109a0:	490f      	ldr	r1, [pc, #60]	; (81109e0 <_ZN15BarometerThread4loopEv+0xa8>)
 81109a2:	f000 ff1f 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		terminate();
 81109a6:	687b      	ldr	r3, [r7, #4]
 81109a8:	4618      	mov	r0, r3
 81109aa:	f000 ff0d 	bl	81117c8 <_ZN6Thread9terminateEv>
		parent->resetProber();
 81109ae:	687b      	ldr	r3, [r7, #4]
 81109b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81109b2:	4618      	mov	r0, r3
 81109b4:	f000 fc0c 	bl	81111d0 <_ZN12ProberThread11resetProberEv>
}
 81109b8:	bf00      	nop
 81109ba:	3708      	adds	r7, #8
 81109bc:	46bd      	mov	sp, r7
 81109be:	bdb0      	pop	{r4, r5, r7, pc}
 81109c0:	10008cd4 	.word	0x10008cd4
 81109c4:	10008cd0 	.word	0x10008cd0
 81109c8:	10008ccc 	.word	0x10008ccc
 81109cc:	10008c44 	.word	0x10008c44
 81109d0:	081155bc 	.word	0x081155bc
 81109d4:	10008cc4 	.word	0x10008cc4
 81109d8:	10009398 	.word	0x10009398
 81109dc:	e000ed04 	.word	0xe000ed04
 81109e0:	081155c8 	.word	0x081155c8

081109e4 <_ZN15BarometerThreadD1Ev>:

#include "DataStructures.h"
#include "Libraries/BMP280/bmp280.h"


class BarometerThread : public Thread {
 81109e4:	b580      	push	{r7, lr}
 81109e6:	b082      	sub	sp, #8
 81109e8:	af00      	add	r7, sp, #0
 81109ea:	6078      	str	r0, [r7, #4]
 81109ec:	4a05      	ldr	r2, [pc, #20]	; (8110a04 <_ZN15BarometerThreadD1Ev+0x20>)
 81109ee:	687b      	ldr	r3, [r7, #4]
 81109f0:	601a      	str	r2, [r3, #0]
 81109f2:	687b      	ldr	r3, [r7, #4]
 81109f4:	4618      	mov	r0, r3
 81109f6:	f7fa ff87 	bl	810b908 <_ZN6ThreadD1Ev>
 81109fa:	687b      	ldr	r3, [r7, #4]
 81109fc:	4618      	mov	r0, r3
 81109fe:	3708      	adds	r7, #8
 8110a00:	46bd      	mov	sp, r7
 8110a02:	bd80      	pop	{r7, pc}
 8110a04:	08115ca0 	.word	0x08115ca0

08110a08 <_ZN15BarometerThreadD0Ev>:
 8110a08:	b580      	push	{r7, lr}
 8110a0a:	b082      	sub	sp, #8
 8110a0c:	af00      	add	r7, sp, #0
 8110a0e:	6078      	str	r0, [r7, #4]
 8110a10:	6878      	ldr	r0, [r7, #4]
 8110a12:	f7ff ffe7 	bl	81109e4 <_ZN15BarometerThreadD1Ev>
 8110a16:	214c      	movs	r1, #76	; 0x4c
 8110a18:	6878      	ldr	r0, [r7, #4]
 8110a1a:	f001 f966 	bl	8111cea <_ZdlPvj>
 8110a1e:	687b      	ldr	r3, [r7, #4]
 8110a20:	4618      	mov	r0, r3
 8110a22:	3708      	adds	r7, #8
 8110a24:	46bd      	mov	sp, r7
 8110a26:	bd80      	pop	{r7, pc}

08110a28 <_ZN6Vector8toStringEPc>:
	char* toString(char* buffer) {
 8110a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8110a2c:	b086      	sub	sp, #24
 8110a2e:	af04      	add	r7, sp, #16
 8110a30:	6078      	str	r0, [r7, #4]
 8110a32:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "[%f %f %f]", x, y, z);
 8110a34:	687b      	ldr	r3, [r7, #4]
 8110a36:	681b      	ldr	r3, [r3, #0]
 8110a38:	4618      	mov	r0, r3
 8110a3a:	f7ef fe1d 	bl	8100678 <__aeabi_f2d>
 8110a3e:	4680      	mov	r8, r0
 8110a40:	4689      	mov	r9, r1
 8110a42:	687b      	ldr	r3, [r7, #4]
 8110a44:	685b      	ldr	r3, [r3, #4]
 8110a46:	4618      	mov	r0, r3
 8110a48:	f7ef fe16 	bl	8100678 <__aeabi_f2d>
 8110a4c:	4604      	mov	r4, r0
 8110a4e:	460d      	mov	r5, r1
 8110a50:	687b      	ldr	r3, [r7, #4]
 8110a52:	689b      	ldr	r3, [r3, #8]
 8110a54:	4618      	mov	r0, r3
 8110a56:	f7ef fe0f 	bl	8100678 <__aeabi_f2d>
 8110a5a:	4602      	mov	r2, r0
 8110a5c:	460b      	mov	r3, r1
 8110a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110a62:	e9cd 4500 	strd	r4, r5, [sp]
 8110a66:	4642      	mov	r2, r8
 8110a68:	464b      	mov	r3, r9
 8110a6a:	4905      	ldr	r1, [pc, #20]	; (8110a80 <_ZN6Vector8toStringEPc+0x58>)
 8110a6c:	6838      	ldr	r0, [r7, #0]
 8110a6e:	f001 fff1 	bl	8112a54 <siprintf>
		return buffer;
 8110a72:	683b      	ldr	r3, [r7, #0]
	}
 8110a74:	4618      	mov	r0, r3
 8110a76:	3708      	adds	r7, #8
 8110a78:	46bd      	mov	sp, r7
 8110a7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8110a7e:	bf00      	nop
 8110a80:	081155e4 	.word	0x081155e4

08110a84 <_ZN6Vector7toArrayEPh>:
	uint8_t* toArray(uint8_t* buffer) {
 8110a84:	b480      	push	{r7}
 8110a86:	b083      	sub	sp, #12
 8110a88:	af00      	add	r7, sp, #0
 8110a8a:	6078      	str	r0, [r7, #4]
 8110a8c:	6039      	str	r1, [r7, #0]
		*(float*)(buffer + 0) = x;
 8110a8e:	687b      	ldr	r3, [r7, #4]
 8110a90:	681a      	ldr	r2, [r3, #0]
 8110a92:	683b      	ldr	r3, [r7, #0]
 8110a94:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 1*4) = y;
 8110a96:	683b      	ldr	r3, [r7, #0]
 8110a98:	3304      	adds	r3, #4
 8110a9a:	687a      	ldr	r2, [r7, #4]
 8110a9c:	6852      	ldr	r2, [r2, #4]
 8110a9e:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 2*4) = z;
 8110aa0:	683b      	ldr	r3, [r7, #0]
 8110aa2:	3308      	adds	r3, #8
 8110aa4:	687a      	ldr	r2, [r7, #4]
 8110aa6:	6892      	ldr	r2, [r2, #8]
 8110aa8:	601a      	str	r2, [r3, #0]
		return buffer;
 8110aaa:	683b      	ldr	r3, [r7, #0]
	}
 8110aac:	4618      	mov	r0, r3
 8110aae:	370c      	adds	r7, #12
 8110ab0:	46bd      	mov	sp, r7
 8110ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110ab6:	4770      	bx	lr

08110ab8 <_ZN7IMUData8toStringEPc>:
	char* toString(char* buffer) {
 8110ab8:	b5b0      	push	{r4, r5, r7, lr}
 8110aba:	b084      	sub	sp, #16
 8110abc:	af02      	add	r7, sp, #8
 8110abe:	6078      	str	r0, [r7, #4]
 8110ac0:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Acc: %s, Ang: %s, Mag: %s", accel.toString(buf), gyro.toString(buf + 32), mag.toString(buf + 64));
 8110ac2:	687b      	ldr	r3, [r7, #4]
 8110ac4:	4910      	ldr	r1, [pc, #64]	; (8110b08 <_ZN7IMUData8toStringEPc+0x50>)
 8110ac6:	4618      	mov	r0, r3
 8110ac8:	f7ff ffae 	bl	8110a28 <_ZN6Vector8toStringEPc>
 8110acc:	4604      	mov	r4, r0
 8110ace:	687b      	ldr	r3, [r7, #4]
 8110ad0:	330c      	adds	r3, #12
 8110ad2:	4a0e      	ldr	r2, [pc, #56]	; (8110b0c <_ZN7IMUData8toStringEPc+0x54>)
 8110ad4:	4611      	mov	r1, r2
 8110ad6:	4618      	mov	r0, r3
 8110ad8:	f7ff ffa6 	bl	8110a28 <_ZN6Vector8toStringEPc>
 8110adc:	4605      	mov	r5, r0
 8110ade:	687b      	ldr	r3, [r7, #4]
 8110ae0:	3318      	adds	r3, #24
 8110ae2:	4a0b      	ldr	r2, [pc, #44]	; (8110b10 <_ZN7IMUData8toStringEPc+0x58>)
 8110ae4:	4611      	mov	r1, r2
 8110ae6:	4618      	mov	r0, r3
 8110ae8:	f7ff ff9e 	bl	8110a28 <_ZN6Vector8toStringEPc>
 8110aec:	4603      	mov	r3, r0
 8110aee:	9300      	str	r3, [sp, #0]
 8110af0:	462b      	mov	r3, r5
 8110af2:	4622      	mov	r2, r4
 8110af4:	4907      	ldr	r1, [pc, #28]	; (8110b14 <_ZN7IMUData8toStringEPc+0x5c>)
 8110af6:	6838      	ldr	r0, [r7, #0]
 8110af8:	f001 ffac 	bl	8112a54 <siprintf>
		return buffer;
 8110afc:	683b      	ldr	r3, [r7, #0]
	}
 8110afe:	4618      	mov	r0, r3
 8110b00:	3708      	adds	r7, #8
 8110b02:	46bd      	mov	sp, r7
 8110b04:	bdb0      	pop	{r4, r5, r7, pc}
 8110b06:	bf00      	nop
 8110b08:	10008cd8 	.word	0x10008cd8
 8110b0c:	10008cf8 	.word	0x10008cf8
 8110b10:	10008d18 	.word	0x10008d18
 8110b14:	081155f0 	.word	0x081155f0

08110b18 <_ZN7IMUData7toArrayEPh>:
	uint8_t* toArray(uint8_t* buffer) {
 8110b18:	b580      	push	{r7, lr}
 8110b1a:	b082      	sub	sp, #8
 8110b1c:	af00      	add	r7, sp, #0
 8110b1e:	6078      	str	r0, [r7, #4]
 8110b20:	6039      	str	r1, [r7, #0]
		accel.toArray(buffer);
 8110b22:	687b      	ldr	r3, [r7, #4]
 8110b24:	6839      	ldr	r1, [r7, #0]
 8110b26:	4618      	mov	r0, r3
 8110b28:	f7ff ffac 	bl	8110a84 <_ZN6Vector7toArrayEPh>
		gyro.toArray(buffer + 3*4);
 8110b2c:	687b      	ldr	r3, [r7, #4]
 8110b2e:	f103 020c 	add.w	r2, r3, #12
 8110b32:	683b      	ldr	r3, [r7, #0]
 8110b34:	330c      	adds	r3, #12
 8110b36:	4619      	mov	r1, r3
 8110b38:	4610      	mov	r0, r2
 8110b3a:	f7ff ffa3 	bl	8110a84 <_ZN6Vector7toArrayEPh>
		mag.toArray(buffer + 6*4);
 8110b3e:	687b      	ldr	r3, [r7, #4]
 8110b40:	f103 0218 	add.w	r2, r3, #24
 8110b44:	683b      	ldr	r3, [r7, #0]
 8110b46:	3318      	adds	r3, #24
 8110b48:	4619      	mov	r1, r3
 8110b4a:	4610      	mov	r0, r2
 8110b4c:	f7ff ff9a 	bl	8110a84 <_ZN6Vector7toArrayEPh>
		return buffer;
 8110b50:	683b      	ldr	r3, [r7, #0]
	}
 8110b52:	4618      	mov	r0, r3
 8110b54:	3708      	adds	r7, #8
 8110b56:	46bd      	mov	sp, r7
 8110b58:	bd80      	pop	{r7, pc}
	...

08110b5c <_ZN9IMUThread4initEv>:
#include "Telemetry.h"


static char cbuf[256];

void IMUThread::init() {
 8110b5c:	b580      	push	{r7, lr}
 8110b5e:	b082      	sub	sp, #8
 8110b60:	af00      	add	r7, sp, #0
 8110b62:	6078      	str	r0, [r7, #4]
	bno055_assignI2C(parent->getI2C());
 8110b64:	687b      	ldr	r3, [r7, #4]
 8110b66:	691b      	ldr	r3, [r3, #16]
 8110b68:	4618      	mov	r0, r3
 8110b6a:	f7ff fc20 	bl	81103ae <_ZN12ProberThread6getI2CEv>
 8110b6e:	4603      	mov	r3, r0
 8110b70:	4618      	mov	r0, r3
 8110b72:	f7fc fc33 	bl	810d3dc <bno055_assignI2C>
	bno055_setup();
 8110b76:	f7fc f9f5 	bl	810cf64 <bno055_setup>
	bno055_setOperationModeNDOF();
 8110b7a:	f7fc f9e0 	bl	810cf3e <bno055_setOperationModeNDOF>

	if(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 8110b7e:	f7fc fa0e 	bl	810cf9e <bno055_getSystemError>
 8110b82:	4603      	mov	r3, r0
 8110b84:	2b00      	cmp	r3, #0
 8110b86:	bf14      	ite	ne
 8110b88:	2301      	movne	r3, #1
 8110b8a:	2300      	moveq	r3, #0
 8110b8c:	b2db      	uxtb	r3, r3
 8110b8e:	2b00      	cmp	r3, #0
 8110b90:	d010      	beq.n	8110bb4 <_ZN9IMUThread4initEv+0x58>
		println("[%d] BNO055 initialization failed", portNum);
 8110b92:	6878      	ldr	r0, [r7, #4]
 8110b94:	687b      	ldr	r3, [r7, #4]
 8110b96:	7d1b      	ldrb	r3, [r3, #20]
 8110b98:	461a      	mov	r2, r3
 8110b9a:	490b      	ldr	r1, [pc, #44]	; (8110bc8 <_ZN9IMUThread4initEv+0x6c>)
 8110b9c:	f000 fe22 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		terminate();
 8110ba0:	687b      	ldr	r3, [r7, #4]
 8110ba2:	4618      	mov	r0, r3
 8110ba4:	f000 fe10 	bl	81117c8 <_ZN6Thread9terminateEv>
		parent->resetProber();
 8110ba8:	687b      	ldr	r3, [r7, #4]
 8110baa:	691b      	ldr	r3, [r3, #16]
 8110bac:	4618      	mov	r0, r3
 8110bae:	f000 fb0f 	bl	81111d0 <_ZN12ProberThread11resetProberEv>
		return;
 8110bb2:	e006      	b.n	8110bc2 <_ZN9IMUThread4initEv+0x66>
	}

	println("[%d] BNO055 initialized", portNum);
 8110bb4:	6878      	ldr	r0, [r7, #4]
 8110bb6:	687b      	ldr	r3, [r7, #4]
 8110bb8:	7d1b      	ldrb	r3, [r3, #20]
 8110bba:	461a      	mov	r2, r3
 8110bbc:	4903      	ldr	r1, [pc, #12]	; (8110bcc <_ZN9IMUThread4initEv+0x70>)
 8110bbe:	f000 fe11 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
}
 8110bc2:	3708      	adds	r7, #8
 8110bc4:	46bd      	mov	sp, r7
 8110bc6:	bd80      	pop	{r7, pc}
 8110bc8:	0811560c 	.word	0x0811560c
 8110bcc:	08115630 	.word	0x08115630

08110bd0 <_ZN9IMUThread4loopEv>:

static IMUData data;
static Avionics_AccelMagPacket packet;
void IMUThread::loop() {
 8110bd0:	b5b0      	push	{r4, r5, r7, lr}
 8110bd2:	b09a      	sub	sp, #104	; 0x68
 8110bd4:	af00      	add	r7, sp, #0
 8110bd6:	6078      	str	r0, [r7, #4]
	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 8110bd8:	f7fc fb36 	bl	810d248 <bno055_getVectorAccelerometer>
 8110bdc:	eeb0 4a40 	vmov.f32	s8, s0
 8110be0:	eef0 4a60 	vmov.f32	s9, s1
 8110be4:	eeb0 5a41 	vmov.f32	s10, s2
 8110be8:	eef0 5a61 	vmov.f32	s11, s3
 8110bec:	eeb0 6a42 	vmov.f32	s12, s4
 8110bf0:	eef0 6a62 	vmov.f32	s13, s5
 8110bf4:	eeb0 7a43 	vmov.f32	s14, s6
 8110bf8:	eef0 7a63 	vmov.f32	s15, s7
 8110bfc:	ed87 4b02 	vstr	d4, [r7, #8]
 8110c00:	ed87 5b04 	vstr	d5, [r7, #16]
 8110c04:	ed87 6b06 	vstr	d6, [r7, #24]
 8110c08:	ed87 7b08 	vstr	d7, [r7, #32]
 8110c0c:	4c77      	ldr	r4, [pc, #476]	; (8110dec <_ZN9IMUThread4loopEv+0x21c>)
 8110c0e:	ed97 4b02 	vldr	d4, [r7, #8]
 8110c12:	ed97 5b04 	vldr	d5, [r7, #16]
 8110c16:	ed97 6b06 	vldr	d6, [r7, #24]
 8110c1a:	ed97 7b08 	vldr	d7, [r7, #32]
 8110c1e:	eeb0 0a44 	vmov.f32	s0, s8
 8110c22:	eef0 0a64 	vmov.f32	s1, s9
 8110c26:	eeb0 1a45 	vmov.f32	s2, s10
 8110c2a:	eef0 1a65 	vmov.f32	s3, s11
 8110c2e:	eeb0 2a46 	vmov.f32	s4, s12
 8110c32:	eef0 2a66 	vmov.f32	s5, s13
 8110c36:	eeb0 3a47 	vmov.f32	s6, s14
 8110c3a:	eef0 3a67 	vmov.f32	s7, s15
 8110c3e:	6878      	ldr	r0, [r7, #4]
 8110c40:	f000 f8e2 	bl	8110e08 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 8110c44:	eef0 6a40 	vmov.f32	s13, s0
 8110c48:	eeb0 7a60 	vmov.f32	s14, s1
 8110c4c:	eef0 7a41 	vmov.f32	s15, s2
 8110c50:	edc4 6a00 	vstr	s13, [r4]
 8110c54:	ed84 7a01 	vstr	s14, [r4, #4]
 8110c58:	edc4 7a02 	vstr	s15, [r4, #8]
	data.gyro = bnoVectorToVector(bno055_getVectorEuler());
 8110c5c:	f7fc fb37 	bl	810d2ce <bno055_getVectorEuler>
 8110c60:	eeb0 4a40 	vmov.f32	s8, s0
 8110c64:	eef0 4a60 	vmov.f32	s9, s1
 8110c68:	eeb0 5a41 	vmov.f32	s10, s2
 8110c6c:	eef0 5a61 	vmov.f32	s11, s3
 8110c70:	eeb0 6a42 	vmov.f32	s12, s4
 8110c74:	eef0 6a62 	vmov.f32	s13, s5
 8110c78:	eeb0 7a43 	vmov.f32	s14, s6
 8110c7c:	eef0 7a63 	vmov.f32	s15, s7
 8110c80:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 8110c84:	ed87 5b0c 	vstr	d5, [r7, #48]	; 0x30
 8110c88:	ed87 6b0e 	vstr	d6, [r7, #56]	; 0x38
 8110c8c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8110c90:	4c56      	ldr	r4, [pc, #344]	; (8110dec <_ZN9IMUThread4loopEv+0x21c>)
 8110c92:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 8110c96:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8110c9a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8110c9e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8110ca2:	eeb0 0a44 	vmov.f32	s0, s8
 8110ca6:	eef0 0a64 	vmov.f32	s1, s9
 8110caa:	eeb0 1a45 	vmov.f32	s2, s10
 8110cae:	eef0 1a65 	vmov.f32	s3, s11
 8110cb2:	eeb0 2a46 	vmov.f32	s4, s12
 8110cb6:	eef0 2a66 	vmov.f32	s5, s13
 8110cba:	eeb0 3a47 	vmov.f32	s6, s14
 8110cbe:	eef0 3a67 	vmov.f32	s7, s15
 8110cc2:	6878      	ldr	r0, [r7, #4]
 8110cc4:	f000 f8a0 	bl	8110e08 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 8110cc8:	eef0 6a40 	vmov.f32	s13, s0
 8110ccc:	eeb0 7a60 	vmov.f32	s14, s1
 8110cd0:	eef0 7a41 	vmov.f32	s15, s2
 8110cd4:	edc4 6a03 	vstr	s13, [r4, #12]
 8110cd8:	ed84 7a04 	vstr	s14, [r4, #16]
 8110cdc:	edc4 7a05 	vstr	s15, [r4, #20]
	data.mag = bnoVectorToVector(bno055_getVectorGravity());
 8110ce0:	f7fc fb38 	bl	810d354 <bno055_getVectorGravity>
 8110ce4:	eeb0 4a40 	vmov.f32	s8, s0
 8110ce8:	eef0 4a60 	vmov.f32	s9, s1
 8110cec:	eeb0 5a41 	vmov.f32	s10, s2
 8110cf0:	eef0 5a61 	vmov.f32	s11, s3
 8110cf4:	eeb0 6a42 	vmov.f32	s12, s4
 8110cf8:	eef0 6a62 	vmov.f32	s13, s5
 8110cfc:	eeb0 7a43 	vmov.f32	s14, s6
 8110d00:	eef0 7a63 	vmov.f32	s15, s7
 8110d04:	ed87 4b12 	vstr	d4, [r7, #72]	; 0x48
 8110d08:	ed87 5b14 	vstr	d5, [r7, #80]	; 0x50
 8110d0c:	ed87 6b16 	vstr	d6, [r7, #88]	; 0x58
 8110d10:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 8110d14:	4c35      	ldr	r4, [pc, #212]	; (8110dec <_ZN9IMUThread4loopEv+0x21c>)
 8110d16:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 8110d1a:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8110d1e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8110d22:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8110d26:	eeb0 0a44 	vmov.f32	s0, s8
 8110d2a:	eef0 0a64 	vmov.f32	s1, s9
 8110d2e:	eeb0 1a45 	vmov.f32	s2, s10
 8110d32:	eef0 1a65 	vmov.f32	s3, s11
 8110d36:	eeb0 2a46 	vmov.f32	s4, s12
 8110d3a:	eef0 2a66 	vmov.f32	s5, s13
 8110d3e:	eeb0 3a47 	vmov.f32	s6, s14
 8110d42:	eef0 3a67 	vmov.f32	s7, s15
 8110d46:	6878      	ldr	r0, [r7, #4]
 8110d48:	f000 f85e 	bl	8110e08 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 8110d4c:	eef0 6a40 	vmov.f32	s13, s0
 8110d50:	eeb0 7a60 	vmov.f32	s14, s1
 8110d54:	eef0 7a41 	vmov.f32	s15, s2
 8110d58:	edc4 6a06 	vstr	s13, [r4, #24]
 8110d5c:	ed84 7a07 	vstr	s14, [r4, #28]
 8110d60:	edc4 7a08 	vstr	s15, [r4, #32]

	if(HAL_I2C_GetError(parent->getI2C()) == HAL_I2C_ERROR_NONE) {
 8110d64:	687b      	ldr	r3, [r7, #4]
 8110d66:	691b      	ldr	r3, [r3, #16]
 8110d68:	4618      	mov	r0, r3
 8110d6a:	f7ff fb20 	bl	81103ae <_ZN12ProberThread6getI2CEv>
 8110d6e:	4603      	mov	r3, r0
 8110d70:	4618      	mov	r0, r3
 8110d72:	f7f5 f834 	bl	8105dde <HAL_I2C_GetError>
 8110d76:	4603      	mov	r3, r0
 8110d78:	2b00      	cmp	r3, #0
 8110d7a:	bf0c      	ite	eq
 8110d7c:	2301      	moveq	r3, #1
 8110d7e:	2300      	movne	r3, #0
 8110d80:	b2db      	uxtb	r3, r3
 8110d82:	2b00      	cmp	r3, #0
 8110d84:	d01e      	beq.n	8110dc4 <_ZN9IMUThread4loopEv+0x1f4>
		println("[i2c%d] %s", portNum, data.toString(cbuf));
 8110d86:	687c      	ldr	r4, [r7, #4]
 8110d88:	687b      	ldr	r3, [r7, #4]
 8110d8a:	7d1b      	ldrb	r3, [r3, #20]
 8110d8c:	461d      	mov	r5, r3
 8110d8e:	4918      	ldr	r1, [pc, #96]	; (8110df0 <_ZN9IMUThread4loopEv+0x220>)
 8110d90:	4816      	ldr	r0, [pc, #88]	; (8110dec <_ZN9IMUThread4loopEv+0x21c>)
 8110d92:	f7ff fe91 	bl	8110ab8 <_ZN7IMUData8toStringEPc>
 8110d96:	4603      	mov	r3, r0
 8110d98:	462a      	mov	r2, r5
 8110d9a:	4916      	ldr	r1, [pc, #88]	; (8110df4 <_ZN9IMUThread4loopEv+0x224>)
 8110d9c:	4620      	mov	r0, r4
 8110d9e:	f000 fd21 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		data.toArray((uint8_t*) &packet);
 8110da2:	4915      	ldr	r1, [pc, #84]	; (8110df8 <_ZN9IMUThread4loopEv+0x228>)
 8110da4:	4811      	ldr	r0, [pc, #68]	; (8110dec <_ZN9IMUThread4loopEv+0x21c>)
 8110da6:	f7ff feb7 	bl	8110b18 <_ZN7IMUData7toArrayEPh>
		network.send(&packet);
 8110daa:	4913      	ldr	r1, [pc, #76]	; (8110df8 <_ZN9IMUThread4loopEv+0x228>)
 8110dac:	4813      	ldr	r0, [pc, #76]	; (8110dfc <_ZN9IMUThread4loopEv+0x22c>)
 8110dae:	f7fe fa03 	bl	810f1b8 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_>
		portYIELD();
 8110db2:	4b13      	ldr	r3, [pc, #76]	; (8110e00 <_ZN9IMUThread4loopEv+0x230>)
 8110db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8110db8:	601a      	str	r2, [r3, #0]
 8110dba:	f3bf 8f4f 	dsb	sy
 8110dbe:	f3bf 8f6f 	isb	sy
	} else {
		println("[i2c%d] BNO055 disconnected", portNum);
		terminate();
		parent->resetProber();
	}
}
 8110dc2:	e00f      	b.n	8110de4 <_ZN9IMUThread4loopEv+0x214>
		println("[i2c%d] BNO055 disconnected", portNum);
 8110dc4:	6878      	ldr	r0, [r7, #4]
 8110dc6:	687b      	ldr	r3, [r7, #4]
 8110dc8:	7d1b      	ldrb	r3, [r3, #20]
 8110dca:	461a      	mov	r2, r3
 8110dcc:	490d      	ldr	r1, [pc, #52]	; (8110e04 <_ZN9IMUThread4loopEv+0x234>)
 8110dce:	f000 fd09 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		terminate();
 8110dd2:	687b      	ldr	r3, [r7, #4]
 8110dd4:	4618      	mov	r0, r3
 8110dd6:	f000 fcf7 	bl	81117c8 <_ZN6Thread9terminateEv>
		parent->resetProber();
 8110dda:	687b      	ldr	r3, [r7, #4]
 8110ddc:	691b      	ldr	r3, [r3, #16]
 8110dde:	4618      	mov	r0, r3
 8110de0:	f000 f9f6 	bl	81111d0 <_ZN12ProberThread11resetProberEv>
}
 8110de4:	bf00      	nop
 8110de6:	3768      	adds	r7, #104	; 0x68
 8110de8:	46bd      	mov	sp, r7
 8110dea:	bdb0      	pop	{r4, r5, r7, pc}
 8110dec:	10008e38 	.word	0x10008e38
 8110df0:	10008d38 	.word	0x10008d38
 8110df4:	08115648 	.word	0x08115648
 8110df8:	10008e5c 	.word	0x10008e5c
 8110dfc:	10009398 	.word	0x10009398
 8110e00:	e000ed04 	.word	0xe000ed04
 8110e04:	08115654 	.word	0x08115654

08110e08 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>:


Vector IMUThread::bnoVectorToVector(bno055_vector_t v) {
 8110e08:	b590      	push	{r4, r7, lr}
 8110e0a:	b095      	sub	sp, #84	; 0x54
 8110e0c:	af00      	add	r7, sp, #0
 8110e0e:	6378      	str	r0, [r7, #52]	; 0x34
 8110e10:	eeb0 4a40 	vmov.f32	s8, s0
 8110e14:	eef0 4a60 	vmov.f32	s9, s1
 8110e18:	eeb0 5a41 	vmov.f32	s10, s2
 8110e1c:	eef0 5a61 	vmov.f32	s11, s3
 8110e20:	eeb0 6a42 	vmov.f32	s12, s4
 8110e24:	eef0 6a62 	vmov.f32	s13, s5
 8110e28:	eeb0 7a43 	vmov.f32	s14, s6
 8110e2c:	eef0 7a63 	vmov.f32	s15, s7
 8110e30:	ed87 4b04 	vstr	d4, [r7, #16]
 8110e34:	ed87 5b06 	vstr	d5, [r7, #24]
 8110e38:	ed87 6b08 	vstr	d6, [r7, #32]
 8110e3c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	Vector vector;

	vector.x = v.x;
 8110e40:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8110e44:	4618      	mov	r0, r3
 8110e46:	4621      	mov	r1, r4
 8110e48:	f7ef ff46 	bl	8100cd8 <__aeabi_d2f>
 8110e4c:	4603      	mov	r3, r0
 8110e4e:	63bb      	str	r3, [r7, #56]	; 0x38
	vector.y = v.y;
 8110e50:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8110e54:	4618      	mov	r0, r3
 8110e56:	4621      	mov	r1, r4
 8110e58:	f7ef ff3e 	bl	8100cd8 <__aeabi_d2f>
 8110e5c:	4603      	mov	r3, r0
 8110e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	vector.z = v.z;
 8110e60:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8110e64:	4618      	mov	r0, r3
 8110e66:	4621      	mov	r1, r4
 8110e68:	f7ef ff36 	bl	8100cd8 <__aeabi_d2f>
 8110e6c:	4603      	mov	r3, r0
 8110e6e:	643b      	str	r3, [r7, #64]	; 0x40

	return vector;
 8110e70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8110e74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8110e78:	ca07      	ldmia	r2, {r0, r1, r2}
 8110e7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8110e7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8110e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8110e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8110e84:	ee06 1a90 	vmov	s13, r1
 8110e88:	ee07 2a10 	vmov	s14, r2
 8110e8c:	ee07 3a90 	vmov	s15, r3
}
 8110e90:	eeb0 0a66 	vmov.f32	s0, s13
 8110e94:	eef0 0a47 	vmov.f32	s1, s14
 8110e98:	eeb0 1a67 	vmov.f32	s2, s15
 8110e9c:	3754      	adds	r7, #84	; 0x54
 8110e9e:	46bd      	mov	sp, r7
 8110ea0:	bd90      	pop	{r4, r7, pc}
	...

08110ea4 <_ZN9IMUThreadD1Ev>:
#include "DataStructures.h"

#include "Libraries/BNO055/bno055_stm32.h"
#include "Libraries/BNO055/bno055.h"

class IMUThread : public Thread {
 8110ea4:	b580      	push	{r7, lr}
 8110ea6:	b082      	sub	sp, #8
 8110ea8:	af00      	add	r7, sp, #0
 8110eaa:	6078      	str	r0, [r7, #4]
 8110eac:	4a05      	ldr	r2, [pc, #20]	; (8110ec4 <_ZN9IMUThreadD1Ev+0x20>)
 8110eae:	687b      	ldr	r3, [r7, #4]
 8110eb0:	601a      	str	r2, [r3, #0]
 8110eb2:	687b      	ldr	r3, [r7, #4]
 8110eb4:	4618      	mov	r0, r3
 8110eb6:	f7fa fd27 	bl	810b908 <_ZN6ThreadD1Ev>
 8110eba:	687b      	ldr	r3, [r7, #4]
 8110ebc:	4618      	mov	r0, r3
 8110ebe:	3708      	adds	r7, #8
 8110ec0:	46bd      	mov	sp, r7
 8110ec2:	bd80      	pop	{r7, pc}
 8110ec4:	08115cd8 	.word	0x08115cd8

08110ec8 <_ZN9IMUThreadD0Ev>:
 8110ec8:	b580      	push	{r7, lr}
 8110eca:	b082      	sub	sp, #8
 8110ecc:	af00      	add	r7, sp, #0
 8110ece:	6078      	str	r0, [r7, #4]
 8110ed0:	6878      	ldr	r0, [r7, #4]
 8110ed2:	f7ff ffe7 	bl	8110ea4 <_ZN9IMUThreadD1Ev>
 8110ed6:	2118      	movs	r1, #24
 8110ed8:	6878      	ldr	r0, [r7, #4]
 8110eda:	f000 ff06 	bl	8111cea <_ZdlPvj>
 8110ede:	687b      	ldr	r3, [r7, #4]
 8110ee0:	4618      	mov	r0, r3
 8110ee2:	3708      	adds	r7, #8
 8110ee4:	46bd      	mov	sp, r7
 8110ee6:	bd80      	pop	{r7, pc}

08110ee8 <_ZN15BarometerThreadC1EP12ProberThread>:
public:
	BarometerThread(ProberThread* parent) : Thread("Barometer", 512), bmp280(), parent(parent), portNum(parent->getI2CNum()) {}
 8110ee8:	b580      	push	{r7, lr}
 8110eea:	b082      	sub	sp, #8
 8110eec:	af00      	add	r7, sp, #0
 8110eee:	6078      	str	r0, [r7, #4]
 8110ef0:	6039      	str	r1, [r7, #0]
 8110ef2:	687b      	ldr	r3, [r7, #4]
 8110ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8110ef8:	490e      	ldr	r1, [pc, #56]	; (8110f34 <_ZN15BarometerThreadC1EP12ProberThread+0x4c>)
 8110efa:	4618      	mov	r0, r3
 8110efc:	f000 fc1d 	bl	811173a <_ZN6ThreadC1EPKcm>
 8110f00:	4a0d      	ldr	r2, [pc, #52]	; (8110f38 <_ZN15BarometerThreadC1EP12ProberThread+0x50>)
 8110f02:	687b      	ldr	r3, [r7, #4]
 8110f04:	601a      	str	r2, [r3, #0]
 8110f06:	687b      	ldr	r3, [r7, #4]
 8110f08:	3310      	adds	r3, #16
 8110f0a:	2234      	movs	r2, #52	; 0x34
 8110f0c:	2100      	movs	r1, #0
 8110f0e:	4618      	mov	r0, r3
 8110f10:	f001 f87b 	bl	811200a <memset>
 8110f14:	687b      	ldr	r3, [r7, #4]
 8110f16:	683a      	ldr	r2, [r7, #0]
 8110f18:	645a      	str	r2, [r3, #68]	; 0x44
 8110f1a:	6838      	ldr	r0, [r7, #0]
 8110f1c:	f7ff fa53 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 8110f20:	4603      	mov	r3, r0
 8110f22:	461a      	mov	r2, r3
 8110f24:	687b      	ldr	r3, [r7, #4]
 8110f26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8110f2a:	687b      	ldr	r3, [r7, #4]
 8110f2c:	4618      	mov	r0, r3
 8110f2e:	3708      	adds	r7, #8
 8110f30:	46bd      	mov	sp, r7
 8110f32:	bd80      	pop	{r7, pc}
 8110f34:	08115670 	.word	0x08115670
 8110f38:	08115ca0 	.word	0x08115ca0

08110f3c <_ZN9IMUThreadC1EP12ProberThread>:
public:
	IMUThread(ProberThread* parent) : Thread("IMU"), parent(parent), portNum(parent->getI2CNum()) {}
 8110f3c:	b580      	push	{r7, lr}
 8110f3e:	b082      	sub	sp, #8
 8110f40:	af00      	add	r7, sp, #0
 8110f42:	6078      	str	r0, [r7, #4]
 8110f44:	6039      	str	r1, [r7, #0]
 8110f46:	687b      	ldr	r3, [r7, #4]
 8110f48:	490a      	ldr	r1, [pc, #40]	; (8110f74 <_ZN9IMUThreadC1EP12ProberThread+0x38>)
 8110f4a:	4618      	mov	r0, r3
 8110f4c:	f000 fbd2 	bl	81116f4 <_ZN6ThreadC1EPKc>
 8110f50:	4a09      	ldr	r2, [pc, #36]	; (8110f78 <_ZN9IMUThreadC1EP12ProberThread+0x3c>)
 8110f52:	687b      	ldr	r3, [r7, #4]
 8110f54:	601a      	str	r2, [r3, #0]
 8110f56:	687b      	ldr	r3, [r7, #4]
 8110f58:	683a      	ldr	r2, [r7, #0]
 8110f5a:	611a      	str	r2, [r3, #16]
 8110f5c:	6838      	ldr	r0, [r7, #0]
 8110f5e:	f7ff fa32 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 8110f62:	4603      	mov	r3, r0
 8110f64:	461a      	mov	r2, r3
 8110f66:	687b      	ldr	r3, [r7, #4]
 8110f68:	751a      	strb	r2, [r3, #20]
 8110f6a:	687b      	ldr	r3, [r7, #4]
 8110f6c:	4618      	mov	r0, r3
 8110f6e:	3708      	adds	r7, #8
 8110f70:	46bd      	mov	sp, r7
 8110f72:	bd80      	pop	{r7, pc}
 8110f74:	0811567c 	.word	0x0811567c
 8110f78:	08115cd8 	.word	0x08115cd8

08110f7c <_ZN12ProberThread4initEv>:

#include "i2c.h"

#include "Lang/Operators.h"

void ProberThread::init() {
 8110f7c:	b580      	push	{r7, lr}
 8110f7e:	b082      	sub	sp, #8
 8110f80:	af00      	add	r7, sp, #0
 8110f82:	6078      	str	r0, [r7, #4]
	this->semaphore = xSemaphoreCreateBinary();
 8110f84:	2203      	movs	r2, #3
 8110f86:	2100      	movs	r1, #0
 8110f88:	2001      	movs	r0, #1
 8110f8a:	f7f8 ffe6 	bl	8109f5a <xQueueGenericCreate>
 8110f8e:	4602      	mov	r2, r0
 8110f90:	687b      	ldr	r3, [r7, #4]
 8110f92:	615a      	str	r2, [r3, #20]
	vTaskDelay(100 / portTICK_PERIOD_MS);
 8110f94:	2064      	movs	r0, #100	; 0x64
 8110f96:	f7f9 fd93 	bl	810aac0 <vTaskDelay>
	this->i2cNum = checkI2CPort(hi2c);
 8110f9a:	687b      	ldr	r3, [r7, #4]
 8110f9c:	691b      	ldr	r3, [r3, #16]
 8110f9e:	4619      	mov	r1, r3
 8110fa0:	6878      	ldr	r0, [r7, #4]
 8110fa2:	f000 f993 	bl	81112cc <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef>
 8110fa6:	4603      	mov	r3, r0
 8110fa8:	461a      	mov	r2, r3
 8110faa:	687b      	ldr	r3, [r7, #4]
 8110fac:	771a      	strb	r2, [r3, #28]
}
 8110fae:	bf00      	nop
 8110fb0:	3708      	adds	r7, #8
 8110fb2:	46bd      	mov	sp, r7
 8110fb4:	bd80      	pop	{r7, pc}

08110fb6 <_ZN12ProberThread8probeI2CEh>:

bool ProberThread::probeI2C(uint8_t address) {
 8110fb6:	b580      	push	{r7, lr}
 8110fb8:	b082      	sub	sp, #8
 8110fba:	af00      	add	r7, sp, #0
 8110fbc:	6078      	str	r0, [r7, #4]
 8110fbe:	460b      	mov	r3, r1
 8110fc0:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_IsDeviceReady(hi2c, address << 1, 3, 100) == HAL_OK;
 8110fc2:	687b      	ldr	r3, [r7, #4]
 8110fc4:	6918      	ldr	r0, [r3, #16]
 8110fc6:	78fb      	ldrb	r3, [r7, #3]
 8110fc8:	b29b      	uxth	r3, r3
 8110fca:	005b      	lsls	r3, r3, #1
 8110fcc:	b299      	uxth	r1, r3
 8110fce:	2364      	movs	r3, #100	; 0x64
 8110fd0:	2203      	movs	r2, #3
 8110fd2:	f7f4 fdef 	bl	8105bb4 <HAL_I2C_IsDeviceReady>
 8110fd6:	4603      	mov	r3, r0
 8110fd8:	2b00      	cmp	r3, #0
 8110fda:	bf0c      	ite	eq
 8110fdc:	2301      	moveq	r3, #1
 8110fde:	2300      	movne	r3, #0
 8110fe0:	b2db      	uxtb	r3, r3
}
 8110fe2:	4618      	mov	r0, r3
 8110fe4:	3708      	adds	r7, #8
 8110fe6:	46bd      	mov	sp, r7
 8110fe8:	bd80      	pop	{r7, pc}
	...

08110fec <_ZN12ProberThread7probeDBEv>:

bool ProberThread::probeDB() {
 8110fec:	b590      	push	{r4, r7, lr}
 8110fee:	b087      	sub	sp, #28
 8110ff0:	af00      	add	r7, sp, #0
 8110ff2:	6078      	str	r0, [r7, #4]
	struct HX711 hx711;
	if(i2cNum == 1)
 8110ff4:	687b      	ldr	r3, [r7, #4]
 8110ff6:	7f1b      	ldrb	r3, [r3, #28]
 8110ff8:	2b01      	cmp	r3, #1
 8110ffa:	d106      	bne.n	811100a <_ZN12ProberThread7probeDBEv+0x1e>
		hx711 = {GPIOB, GPIO_PIN_6, GPIOB, GPIO_PIN_7};
 8110ffc:	4b1c      	ldr	r3, [pc, #112]	; (8111070 <_ZN12ProberThread7probeDBEv+0x84>)
 8110ffe:	f107 0408 	add.w	r4, r7, #8
 8111002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8111004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8111008:	e022      	b.n	8111050 <_ZN12ProberThread7probeDBEv+0x64>
	else if(i2cNum == 2)
 811100a:	687b      	ldr	r3, [r7, #4]
 811100c:	7f1b      	ldrb	r3, [r3, #28]
 811100e:	2b02      	cmp	r3, #2
 8111010:	d106      	bne.n	8111020 <_ZN12ProberThread7probeDBEv+0x34>
		hx711 = {GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11};
 8111012:	4b18      	ldr	r3, [pc, #96]	; (8111074 <_ZN12ProberThread7probeDBEv+0x88>)
 8111014:	f107 0408 	add.w	r4, r7, #8
 8111018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 811101a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 811101e:	e017      	b.n	8111050 <_ZN12ProberThread7probeDBEv+0x64>
	else if(i2cNum == 3)
 8111020:	687b      	ldr	r3, [r7, #4]
 8111022:	7f1b      	ldrb	r3, [r3, #28]
 8111024:	2b03      	cmp	r3, #3
 8111026:	d106      	bne.n	8111036 <_ZN12ProberThread7probeDBEv+0x4a>
		hx711 = {GPIOA, GPIO_PIN_8, GPIOC, GPIO_PIN_9};
 8111028:	4b13      	ldr	r3, [pc, #76]	; (8111078 <_ZN12ProberThread7probeDBEv+0x8c>)
 811102a:	f107 0408 	add.w	r4, r7, #8
 811102e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8111030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8111034:	e00c      	b.n	8111050 <_ZN12ProberThread7probeDBEv+0x64>
	else if(i2cNum == 4)
 8111036:	687b      	ldr	r3, [r7, #4]
 8111038:	7f1b      	ldrb	r3, [r3, #28]
 811103a:	2b04      	cmp	r3, #4
 811103c:	d106      	bne.n	811104c <_ZN12ProberThread7probeDBEv+0x60>
		hx711 = {GPIOF, GPIO_PIN_14, GPIOF, GPIO_PIN_15};
 811103e:	4b0f      	ldr	r3, [pc, #60]	; (811107c <_ZN12ProberThread7probeDBEv+0x90>)
 8111040:	f107 0408 	add.w	r4, r7, #8
 8111044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8111046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 811104a:	e001      	b.n	8111050 <_ZN12ProberThread7probeDBEv+0x64>
	else
		return false;
 811104c:	2300      	movs	r3, #0
 811104e:	e00a      	b.n	8111066 <_ZN12ProberThread7probeDBEv+0x7a>

	HX711_init(hx711);
 8111050:	f107 0308 	add.w	r3, r7, #8
 8111054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8111056:	f7fc fb71 	bl	810d73c <HX711_init>
	return HX711_checkReadiness(hx711);
 811105a:	f107 0308 	add.w	r3, r7, #8
 811105e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8111060:	f7fc fb94 	bl	810d78c <HX711_checkReadiness>
 8111064:	4603      	mov	r3, r0
}
 8111066:	4618      	mov	r0, r3
 8111068:	371c      	adds	r7, #28
 811106a:	46bd      	mov	sp, r7
 811106c:	bd90      	pop	{r4, r7, pc}
 811106e:	bf00      	nop
 8111070:	08115680 	.word	0x08115680
 8111074:	08115690 	.word	0x08115690
 8111078:	081156a0 	.word	0x081156a0
 811107c:	081156b0 	.word	0x081156b0

08111080 <_ZN12ProberThread4loopEv>:

void ProberThread::loop() {
 8111080:	b590      	push	{r4, r7, lr}
 8111082:	b083      	sub	sp, #12
 8111084:	af00      	add	r7, sp, #0
 8111086:	6078      	str	r0, [r7, #4]
	if(probeI2C(0x76)) {
 8111088:	2176      	movs	r1, #118	; 0x76
 811108a:	6878      	ldr	r0, [r7, #4]
 811108c:	f7ff ff93 	bl	8110fb6 <_ZN12ProberThread8probeI2CEh>
 8111090:	4603      	mov	r3, r0
 8111092:	2b00      	cmp	r3, #0
 8111094:	d01c      	beq.n	81110d0 <_ZN12ProberThread4loopEv+0x50>
		println("[i2c%u] Barometer detected", getI2CNum());
 8111096:	687c      	ldr	r4, [r7, #4]
 8111098:	6878      	ldr	r0, [r7, #4]
 811109a:	f7ff f994 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 811109e:	4603      	mov	r3, r0
 81110a0:	461a      	mov	r2, r3
 81110a2:	4947      	ldr	r1, [pc, #284]	; (81111c0 <_ZN12ProberThread4loopEv+0x140>)
 81110a4:	4620      	mov	r0, r4
 81110a6:	f000 fb9d 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		this->instance = new BarometerThread(this);
 81110aa:	204c      	movs	r0, #76	; 0x4c
 81110ac:	f7fb f866 	bl	810c17c <_Znwj>
 81110b0:	4603      	mov	r3, r0
 81110b2:	461c      	mov	r4, r3
 81110b4:	6879      	ldr	r1, [r7, #4]
 81110b6:	4620      	mov	r0, r4
 81110b8:	f7ff ff16 	bl	8110ee8 <_ZN15BarometerThreadC1EP12ProberThread>
 81110bc:	687b      	ldr	r3, [r7, #4]
 81110be:	619c      	str	r4, [r3, #24]
		xSemaphoreTake(semaphore, portMAX_DELAY);
 81110c0:	687b      	ldr	r3, [r7, #4]
 81110c2:	695b      	ldr	r3, [r3, #20]
 81110c4:	f04f 31ff 	mov.w	r1, #4294967295
 81110c8:	4618      	mov	r0, r3
 81110ca:	f7f9 f8d1 	bl	810a270 <xQueueSemaphoreTake>
 81110ce:	e068      	b.n	81111a2 <_ZN12ProberThread4loopEv+0x122>
	} else if(probeI2C(0x28)) {
 81110d0:	2128      	movs	r1, #40	; 0x28
 81110d2:	6878      	ldr	r0, [r7, #4]
 81110d4:	f7ff ff6f 	bl	8110fb6 <_ZN12ProberThread8probeI2CEh>
 81110d8:	4603      	mov	r3, r0
 81110da:	2b00      	cmp	r3, #0
 81110dc:	d01c      	beq.n	8111118 <_ZN12ProberThread4loopEv+0x98>
		println("[i2c%u] Accelerometer detected", getI2CNum());
 81110de:	687c      	ldr	r4, [r7, #4]
 81110e0:	6878      	ldr	r0, [r7, #4]
 81110e2:	f7ff f970 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 81110e6:	4603      	mov	r3, r0
 81110e8:	461a      	mov	r2, r3
 81110ea:	4936      	ldr	r1, [pc, #216]	; (81111c4 <_ZN12ProberThread4loopEv+0x144>)
 81110ec:	4620      	mov	r0, r4
 81110ee:	f000 fb79 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		this->instance = new IMUThread(this);
 81110f2:	2018      	movs	r0, #24
 81110f4:	f7fb f842 	bl	810c17c <_Znwj>
 81110f8:	4603      	mov	r3, r0
 81110fa:	461c      	mov	r4, r3
 81110fc:	6879      	ldr	r1, [r7, #4]
 81110fe:	4620      	mov	r0, r4
 8111100:	f7ff ff1c 	bl	8110f3c <_ZN9IMUThreadC1EP12ProberThread>
 8111104:	687b      	ldr	r3, [r7, #4]
 8111106:	619c      	str	r4, [r3, #24]
		xSemaphoreTake(semaphore, portMAX_DELAY);
 8111108:	687b      	ldr	r3, [r7, #4]
 811110a:	695b      	ldr	r3, [r3, #20]
 811110c:	f04f 31ff 	mov.w	r1, #4294967295
 8111110:	4618      	mov	r0, r3
 8111112:	f7f9 f8ad 	bl	810a270 <xQueueSemaphoreTake>
 8111116:	e044      	b.n	81111a2 <_ZN12ProberThread4loopEv+0x122>
	} else if(probeI2C(0x48)) {
 8111118:	2148      	movs	r1, #72	; 0x48
 811111a:	6878      	ldr	r0, [r7, #4]
 811111c:	f7ff ff4b 	bl	8110fb6 <_ZN12ProberThread8probeI2CEh>
 8111120:	4603      	mov	r3, r0
 8111122:	2b00      	cmp	r3, #0
 8111124:	d01c      	beq.n	8111160 <_ZN12ProberThread4loopEv+0xe0>
		println("[i2c%u] Voltmeter detected", getI2CNum());
 8111126:	687c      	ldr	r4, [r7, #4]
 8111128:	6878      	ldr	r0, [r7, #4]
 811112a:	f7ff f94c 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 811112e:	4603      	mov	r3, r0
 8111130:	461a      	mov	r2, r3
 8111132:	4925      	ldr	r1, [pc, #148]	; (81111c8 <_ZN12ProberThread4loopEv+0x148>)
 8111134:	4620      	mov	r0, r4
 8111136:	f000 fb55 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		this->instance = new ADC16Thread(this);
 811113a:	2028      	movs	r0, #40	; 0x28
 811113c:	f7fb f81e 	bl	810c17c <_Znwj>
 8111140:	4603      	mov	r3, r0
 8111142:	461c      	mov	r4, r3
 8111144:	6879      	ldr	r1, [r7, #4]
 8111146:	4620      	mov	r0, r4
 8111148:	f7ff f94a 	bl	81103e0 <_ZN11ADC16ThreadC1EP12ProberThread>
 811114c:	687b      	ldr	r3, [r7, #4]
 811114e:	619c      	str	r4, [r3, #24]
		xSemaphoreTake(semaphore, portMAX_DELAY);
 8111150:	687b      	ldr	r3, [r7, #4]
 8111152:	695b      	ldr	r3, [r3, #20]
 8111154:	f04f 31ff 	mov.w	r1, #4294967295
 8111158:	4618      	mov	r0, r3
 811115a:	f7f9 f889 	bl	810a270 <xQueueSemaphoreTake>
 811115e:	e020      	b.n	81111a2 <_ZN12ProberThread4loopEv+0x122>
	} else if(probeDB()) {
 8111160:	6878      	ldr	r0, [r7, #4]
 8111162:	f7ff ff43 	bl	8110fec <_ZN12ProberThread7probeDBEv>
 8111166:	4603      	mov	r3, r0
 8111168:	2b00      	cmp	r3, #0
 811116a:	d017      	beq.n	811119c <_ZN12ProberThread4loopEv+0x11c>
		println("[i2c%u] Mass sensor detected", getI2CNum());
 811116c:	687c      	ldr	r4, [r7, #4]
 811116e:	6878      	ldr	r0, [r7, #4]
 8111170:	f7ff f929 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 8111174:	4603      	mov	r3, r0
 8111176:	461a      	mov	r2, r3
 8111178:	4914      	ldr	r1, [pc, #80]	; (81111cc <_ZN12ProberThread4loopEv+0x14c>)
 811117a:	4620      	mov	r0, r4
 811117c:	f000 fb32 	bl	81117e4 <_ZN6Thread7printlnEPKcz>
		this->instance = instantiateHX711();
 8111180:	6878      	ldr	r0, [r7, #4]
 8111182:	f000 f835 	bl	81111f0 <_ZN12ProberThread16instantiateHX711Ev>
 8111186:	4602      	mov	r2, r0
 8111188:	687b      	ldr	r3, [r7, #4]
 811118a:	619a      	str	r2, [r3, #24]
		xSemaphoreTake(semaphore, portMAX_DELAY);
 811118c:	687b      	ldr	r3, [r7, #4]
 811118e:	695b      	ldr	r3, [r3, #20]
 8111190:	f04f 31ff 	mov.w	r1, #4294967295
 8111194:	4618      	mov	r0, r3
 8111196:	f7f9 f86b 	bl	810a270 <xQueueSemaphoreTake>
 811119a:	e002      	b.n	81111a2 <_ZN12ProberThread4loopEv+0x122>
	} else {
		vTaskDelay(100 / portTICK_PERIOD_MS);
 811119c:	2064      	movs	r0, #100	; 0x64
 811119e:	f7f9 fc8f 	bl	810aac0 <vTaskDelay>
	}

	HAL_I2C_DeInit(hi2c);
 81111a2:	687b      	ldr	r3, [r7, #4]
 81111a4:	691b      	ldr	r3, [r3, #16]
 81111a6:	4618      	mov	r0, r3
 81111a8:	f7f4 f8bd 	bl	8105326 <HAL_I2C_DeInit>
	HAL_I2C_Init(hi2c);
 81111ac:	687b      	ldr	r3, [r7, #4]
 81111ae:	691b      	ldr	r3, [r3, #16]
 81111b0:	4618      	mov	r0, r3
 81111b2:	f7f4 f829 	bl	8105208 <HAL_I2C_Init>
}
 81111b6:	bf00      	nop
 81111b8:	370c      	adds	r7, #12
 81111ba:	46bd      	mov	sp, r7
 81111bc:	bd90      	pop	{r4, r7, pc}
 81111be:	bf00      	nop
 81111c0:	081156c0 	.word	0x081156c0
 81111c4:	081156dc 	.word	0x081156dc
 81111c8:	081156fc 	.word	0x081156fc
 81111cc:	08115718 	.word	0x08115718

081111d0 <_ZN12ProberThread11resetProberEv>:

void ProberThread::resetProber() {
 81111d0:	b580      	push	{r7, lr}
 81111d2:	b082      	sub	sp, #8
 81111d4:	af00      	add	r7, sp, #0
 81111d6:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(semaphore);
 81111d8:	687b      	ldr	r3, [r7, #4]
 81111da:	6958      	ldr	r0, [r3, #20]
 81111dc:	2300      	movs	r3, #0
 81111de:	2200      	movs	r2, #0
 81111e0:	2100      	movs	r1, #0
 81111e2:	f7f8 ff4b 	bl	810a07c <xQueueGenericSend>
}
 81111e6:	bf00      	nop
 81111e8:	3708      	adds	r7, #8
 81111ea:	46bd      	mov	sp, r7
 81111ec:	bd80      	pop	{r7, pc}
	...

081111f0 <_ZN12ProberThread16instantiateHX711Ev>:

Thread* ProberThread::instantiateHX711(){
 81111f0:	b590      	push	{r4, r7, lr}
 81111f2:	b085      	sub	sp, #20
 81111f4:	af02      	add	r7, sp, #8
 81111f6:	6078      	str	r0, [r7, #4]
	switch(getI2CNum()){
 81111f8:	6878      	ldr	r0, [r7, #4]
 81111fa:	f7ff f8e4 	bl	81103c6 <_ZN12ProberThread9getI2CNumEv>
 81111fe:	4603      	mov	r3, r0
 8111200:	3b01      	subs	r3, #1
 8111202:	2b03      	cmp	r3, #3
 8111204:	d854      	bhi.n	81112b0 <_ZN12ProberThread16instantiateHX711Ev+0xc0>
 8111206:	a201      	add	r2, pc, #4	; (adr r2, 811120c <_ZN12ProberThread16instantiateHX711Ev+0x1c>)
 8111208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811120c:	0811121d 	.word	0x0811121d
 8111210:	0811123f 	.word	0x0811123f
 8111214:	08111265 	.word	0x08111265
 8111218:	0811128b 	.word	0x0811128b
	case 1:
		return new ADC24Thread(this, GPIOB, GPIO_PIN_6, GPIOB, GPIO_PIN_7); break;
 811121c:	2030      	movs	r0, #48	; 0x30
 811121e:	f7fa ffad 	bl	810c17c <_Znwj>
 8111222:	4603      	mov	r3, r0
 8111224:	461c      	mov	r4, r3
 8111226:	2380      	movs	r3, #128	; 0x80
 8111228:	9301      	str	r3, [sp, #4]
 811122a:	4b24      	ldr	r3, [pc, #144]	; (81112bc <_ZN12ProberThread16instantiateHX711Ev+0xcc>)
 811122c:	9300      	str	r3, [sp, #0]
 811122e:	2340      	movs	r3, #64	; 0x40
 8111230:	4a22      	ldr	r2, [pc, #136]	; (81112bc <_ZN12ProberThread16instantiateHX711Ev+0xcc>)
 8111232:	6879      	ldr	r1, [r7, #4]
 8111234:	4620      	mov	r0, r4
 8111236:	f7ff f9f5 	bl	8110624 <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m>
 811123a:	4623      	mov	r3, r4
 811123c:	e039      	b.n	81112b2 <_ZN12ProberThread16instantiateHX711Ev+0xc2>
	case 2:
		return new ADC24Thread(this, GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11); break;
 811123e:	2030      	movs	r0, #48	; 0x30
 8111240:	f7fa ff9c 	bl	810c17c <_Znwj>
 8111244:	4603      	mov	r3, r0
 8111246:	461c      	mov	r4, r3
 8111248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 811124c:	9301      	str	r3, [sp, #4]
 811124e:	4b1b      	ldr	r3, [pc, #108]	; (81112bc <_ZN12ProberThread16instantiateHX711Ev+0xcc>)
 8111250:	9300      	str	r3, [sp, #0]
 8111252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8111256:	4a19      	ldr	r2, [pc, #100]	; (81112bc <_ZN12ProberThread16instantiateHX711Ev+0xcc>)
 8111258:	6879      	ldr	r1, [r7, #4]
 811125a:	4620      	mov	r0, r4
 811125c:	f7ff f9e2 	bl	8110624 <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m>
 8111260:	4623      	mov	r3, r4
 8111262:	e026      	b.n	81112b2 <_ZN12ProberThread16instantiateHX711Ev+0xc2>
	case 3:
		return new ADC24Thread(this, GPIOA, GPIO_PIN_8, GPIOC, GPIO_PIN_9); break;
 8111264:	2030      	movs	r0, #48	; 0x30
 8111266:	f7fa ff89 	bl	810c17c <_Znwj>
 811126a:	4603      	mov	r3, r0
 811126c:	461c      	mov	r4, r3
 811126e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8111272:	9301      	str	r3, [sp, #4]
 8111274:	4b12      	ldr	r3, [pc, #72]	; (81112c0 <_ZN12ProberThread16instantiateHX711Ev+0xd0>)
 8111276:	9300      	str	r3, [sp, #0]
 8111278:	f44f 7380 	mov.w	r3, #256	; 0x100
 811127c:	4a11      	ldr	r2, [pc, #68]	; (81112c4 <_ZN12ProberThread16instantiateHX711Ev+0xd4>)
 811127e:	6879      	ldr	r1, [r7, #4]
 8111280:	4620      	mov	r0, r4
 8111282:	f7ff f9cf 	bl	8110624 <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m>
 8111286:	4623      	mov	r3, r4
 8111288:	e013      	b.n	81112b2 <_ZN12ProberThread16instantiateHX711Ev+0xc2>
	case 4:
		return new ADC24Thread(this, GPIOF, GPIO_PIN_14, GPIOF, GPIO_PIN_15); break;
 811128a:	2030      	movs	r0, #48	; 0x30
 811128c:	f7fa ff76 	bl	810c17c <_Znwj>
 8111290:	4603      	mov	r3, r0
 8111292:	461c      	mov	r4, r3
 8111294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8111298:	9301      	str	r3, [sp, #4]
 811129a:	4b0b      	ldr	r3, [pc, #44]	; (81112c8 <_ZN12ProberThread16instantiateHX711Ev+0xd8>)
 811129c:	9300      	str	r3, [sp, #0]
 811129e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81112a2:	4a09      	ldr	r2, [pc, #36]	; (81112c8 <_ZN12ProberThread16instantiateHX711Ev+0xd8>)
 81112a4:	6879      	ldr	r1, [r7, #4]
 81112a6:	4620      	mov	r0, r4
 81112a8:	f7ff f9bc 	bl	8110624 <_ZN11ADC24ThreadC1EP12ProberThreadP12GPIO_TypeDefmS3_m>
 81112ac:	4623      	mov	r3, r4
 81112ae:	e000      	b.n	81112b2 <_ZN12ProberThread16instantiateHX711Ev+0xc2>
	default:
		return NULL;
 81112b0:	2300      	movs	r3, #0
	}
}
 81112b2:	4618      	mov	r0, r3
 81112b4:	370c      	adds	r7, #12
 81112b6:	46bd      	mov	sp, r7
 81112b8:	bd90      	pop	{r4, r7, pc}
 81112ba:	bf00      	nop
 81112bc:	58020400 	.word	0x58020400
 81112c0:	58020800 	.word	0x58020800
 81112c4:	58020000 	.word	0x58020000
 81112c8:	58021400 	.word	0x58021400

081112cc <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef>:

uint8_t ProberThread::checkI2CPort(I2C_HandleTypeDef* hi2c){
 81112cc:	b480      	push	{r7}
 81112ce:	b083      	sub	sp, #12
 81112d0:	af00      	add	r7, sp, #0
 81112d2:	6078      	str	r0, [r7, #4]
 81112d4:	6039      	str	r1, [r7, #0]
	if(hi2c->Instance==I2C1)
 81112d6:	683b      	ldr	r3, [r7, #0]
 81112d8:	681b      	ldr	r3, [r3, #0]
 81112da:	4a10      	ldr	r2, [pc, #64]	; (811131c <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x50>)
 81112dc:	4293      	cmp	r3, r2
 81112de:	d101      	bne.n	81112e4 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x18>
		return 1;
 81112e0:	2301      	movs	r3, #1
 81112e2:	e015      	b.n	8111310 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x44>
	else if(hi2c->Instance==I2C2)
 81112e4:	683b      	ldr	r3, [r7, #0]
 81112e6:	681b      	ldr	r3, [r3, #0]
 81112e8:	4a0d      	ldr	r2, [pc, #52]	; (8111320 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x54>)
 81112ea:	4293      	cmp	r3, r2
 81112ec:	d101      	bne.n	81112f2 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x26>
		return 2;
 81112ee:	2302      	movs	r3, #2
 81112f0:	e00e      	b.n	8111310 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x44>
	else if(hi2c->Instance==I2C3)
 81112f2:	683b      	ldr	r3, [r7, #0]
 81112f4:	681b      	ldr	r3, [r3, #0]
 81112f6:	4a0b      	ldr	r2, [pc, #44]	; (8111324 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x58>)
 81112f8:	4293      	cmp	r3, r2
 81112fa:	d101      	bne.n	8111300 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x34>
		return 3;
 81112fc:	2303      	movs	r3, #3
 81112fe:	e007      	b.n	8111310 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x44>
	else if(hi2c->Instance==I2C4)
 8111300:	683b      	ldr	r3, [r7, #0]
 8111302:	681b      	ldr	r3, [r3, #0]
 8111304:	4a08      	ldr	r2, [pc, #32]	; (8111328 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x5c>)
 8111306:	4293      	cmp	r3, r2
 8111308:	d101      	bne.n	811130e <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x42>
		return 4;
 811130a:	2304      	movs	r3, #4
 811130c:	e000      	b.n	8111310 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x44>
	else
		return -1;
 811130e:	23ff      	movs	r3, #255	; 0xff
}
 8111310:	4618      	mov	r0, r3
 8111312:	370c      	adds	r7, #12
 8111314:	46bd      	mov	sp, r7
 8111316:	f85d 7b04 	ldr.w	r7, [sp], #4
 811131a:	4770      	bx	lr
 811131c:	40005400 	.word	0x40005400
 8111320:	40005800 	.word	0x40005800
 8111324:	40005c00 	.word	0x40005c00
 8111328:	58001c00 	.word	0x58001c00

0811132c <_ZN12ProberThreadD1Ev>:
class ProberThread : Thread {
 811132c:	b580      	push	{r7, lr}
 811132e:	b082      	sub	sp, #8
 8111330:	af00      	add	r7, sp, #0
 8111332:	6078      	str	r0, [r7, #4]
 8111334:	4a05      	ldr	r2, [pc, #20]	; (811134c <_ZN12ProberThreadD1Ev+0x20>)
 8111336:	687b      	ldr	r3, [r7, #4]
 8111338:	601a      	str	r2, [r3, #0]
 811133a:	687b      	ldr	r3, [r7, #4]
 811133c:	4618      	mov	r0, r3
 811133e:	f7fa fae3 	bl	810b908 <_ZN6ThreadD1Ev>
 8111342:	687b      	ldr	r3, [r7, #4]
 8111344:	4618      	mov	r0, r3
 8111346:	3708      	adds	r7, #8
 8111348:	46bd      	mov	sp, r7
 811134a:	bd80      	pop	{r7, pc}
 811134c:	08115d08 	.word	0x08115d08

08111350 <_ZN12ProberThreadD0Ev>:
 8111350:	b580      	push	{r7, lr}
 8111352:	b082      	sub	sp, #8
 8111354:	af00      	add	r7, sp, #0
 8111356:	6078      	str	r0, [r7, #4]
 8111358:	6878      	ldr	r0, [r7, #4]
 811135a:	f7ff ffe7 	bl	811132c <_ZN12ProberThreadD1Ev>
 811135e:	2120      	movs	r1, #32
 8111360:	6878      	ldr	r0, [r7, #4]
 8111362:	f000 fcc2 	bl	8111cea <_ZdlPvj>
 8111366:	687b      	ldr	r3, [r7, #4]
 8111368:	4618      	mov	r0, r3
 811136a:	3708      	adds	r7, #8
 811136c:	46bd      	mov	sp, r7
 811136e:	bd80      	pop	{r7, pc}

08111370 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 8111370:	b580      	push	{r7, lr}
 8111372:	b082      	sub	sp, #8
 8111374:	af00      	add	r7, sp, #0
 8111376:	6078      	str	r0, [r7, #4]
 8111378:	6039      	str	r1, [r7, #0]
 811137a:	687b      	ldr	r3, [r7, #4]
 811137c:	4907      	ldr	r1, [pc, #28]	; (811139c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 811137e:	4618      	mov	r0, r3
 8111380:	f000 f9b8 	bl	81116f4 <_ZN6ThreadC1EPKc>
 8111384:	4a06      	ldr	r2, [pc, #24]	; (81113a0 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 8111386:	687b      	ldr	r3, [r7, #4]
 8111388:	601a      	str	r2, [r3, #0]
 811138a:	687b      	ldr	r3, [r7, #4]
 811138c:	683a      	ldr	r2, [r7, #0]
 811138e:	611a      	str	r2, [r3, #16]
 8111390:	687b      	ldr	r3, [r7, #4]
 8111392:	4618      	mov	r0, r3
 8111394:	3708      	adds	r7, #8
 8111396:	46bd      	mov	sp, r7
 8111398:	bd80      	pop	{r7, pc}
 811139a:	bf00      	nop
 811139c:	08115738 	.word	0x08115738
 81113a0:	08115bf4 	.word	0x08115bf4

081113a4 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", 1024), hi2c(hi2c), instance(nullptr), i2cNum(0) {}
 81113a4:	b580      	push	{r7, lr}
 81113a6:	b082      	sub	sp, #8
 81113a8:	af00      	add	r7, sp, #0
 81113aa:	6078      	str	r0, [r7, #4]
 81113ac:	6039      	str	r1, [r7, #0]
 81113ae:	687b      	ldr	r3, [r7, #4]
 81113b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81113b4:	490a      	ldr	r1, [pc, #40]	; (81113e0 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef+0x3c>)
 81113b6:	4618      	mov	r0, r3
 81113b8:	f000 f9bf 	bl	811173a <_ZN6ThreadC1EPKcm>
 81113bc:	4a09      	ldr	r2, [pc, #36]	; (81113e4 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef+0x40>)
 81113be:	687b      	ldr	r3, [r7, #4]
 81113c0:	601a      	str	r2, [r3, #0]
 81113c2:	687b      	ldr	r3, [r7, #4]
 81113c4:	683a      	ldr	r2, [r7, #0]
 81113c6:	611a      	str	r2, [r3, #16]
 81113c8:	687b      	ldr	r3, [r7, #4]
 81113ca:	2200      	movs	r2, #0
 81113cc:	619a      	str	r2, [r3, #24]
 81113ce:	687b      	ldr	r3, [r7, #4]
 81113d0:	2200      	movs	r2, #0
 81113d2:	771a      	strb	r2, [r3, #28]
 81113d4:	687b      	ldr	r3, [r7, #4]
 81113d6:	4618      	mov	r0, r3
 81113d8:	3708      	adds	r7, #8
 81113da:	46bd      	mov	sp, r7
 81113dc:	bd80      	pop	{r7, pc}
 81113de:	bf00      	nop
 81113e0:	08115744 	.word	0x08115744
 81113e4:	08115d08 	.word	0x08115d08

081113e8 <__tcf_0>:


#ifdef CORE_CM4
#include "i2c.h"
void initCortexM4() {
	static WatchdogThread watchdog(&hiwdg2);
 81113e8:	b580      	push	{r7, lr}
 81113ea:	af00      	add	r7, sp, #0
 81113ec:	4801      	ldr	r0, [pc, #4]	; (81113f4 <__tcf_0+0xc>)
 81113ee:	f7fe ff89 	bl	8110304 <_ZN14WatchdogThreadD1Ev>
 81113f2:	bd80      	pop	{r7, pc}
 81113f4:	10008e80 	.word	0x10008e80

081113f8 <__tcf_1>:
	static Shell shell(&huart3, &terminal);
 81113f8:	b580      	push	{r7, lr}
 81113fa:	af00      	add	r7, sp, #0
 81113fc:	4801      	ldr	r0, [pc, #4]	; (8111404 <__tcf_1+0xc>)
 81113fe:	f7fa fc6b 	bl	810bcd8 <_ZN5ShellD1Ev>
 8111402:	bd80      	pop	{r7, pc}
 8111404:	10008e98 	.word	0x10008e98

08111408 <__tcf_2>:

	static ProberThread prober1(&hi2c1);
 8111408:	b580      	push	{r7, lr}
 811140a:	af00      	add	r7, sp, #0
 811140c:	4801      	ldr	r0, [pc, #4]	; (8111414 <__tcf_2+0xc>)
 811140e:	f7ff ff8d 	bl	811132c <_ZN12ProberThreadD1Ev>
 8111412:	bd80      	pop	{r7, pc}
 8111414:	10009304 	.word	0x10009304

08111418 <__tcf_3>:
	static ProberThread prober2(&hi2c2);
 8111418:	b580      	push	{r7, lr}
 811141a:	af00      	add	r7, sp, #0
 811141c:	4801      	ldr	r0, [pc, #4]	; (8111424 <__tcf_3+0xc>)
 811141e:	f7ff ff85 	bl	811132c <_ZN12ProberThreadD1Ev>
 8111422:	bd80      	pop	{r7, pc}
 8111424:	10009328 	.word	0x10009328

08111428 <__tcf_4>:
	static ProberThread prober3(&hi2c4);
 8111428:	b580      	push	{r7, lr}
 811142a:	af00      	add	r7, sp, #0
 811142c:	4801      	ldr	r0, [pc, #4]	; (8111434 <__tcf_4+0xc>)
 811142e:	f7ff ff7d 	bl	811132c <_ZN12ProberThreadD1Ev>
 8111432:	bd80      	pop	{r7, pc}
 8111434:	1000934c 	.word	0x1000934c

08111438 <initCortexM4>:
void initCortexM4() {
 8111438:	b580      	push	{r7, lr}
 811143a:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg2);
 811143c:	4b58      	ldr	r3, [pc, #352]	; (81115a0 <initCortexM4+0x168>)
 811143e:	781b      	ldrb	r3, [r3, #0]
 8111440:	f3bf 8f5b 	dmb	ish
 8111444:	b2db      	uxtb	r3, r3
 8111446:	f003 0301 	and.w	r3, r3, #1
 811144a:	2b00      	cmp	r3, #0
 811144c:	bf0c      	ite	eq
 811144e:	2301      	moveq	r3, #1
 8111450:	2300      	movne	r3, #0
 8111452:	b2db      	uxtb	r3, r3
 8111454:	2b00      	cmp	r3, #0
 8111456:	d014      	beq.n	8111482 <initCortexM4+0x4a>
 8111458:	4851      	ldr	r0, [pc, #324]	; (81115a0 <initCortexM4+0x168>)
 811145a:	f000 fc7d 	bl	8111d58 <__cxa_guard_acquire>
 811145e:	4603      	mov	r3, r0
 8111460:	2b00      	cmp	r3, #0
 8111462:	bf14      	ite	ne
 8111464:	2301      	movne	r3, #1
 8111466:	2300      	moveq	r3, #0
 8111468:	b2db      	uxtb	r3, r3
 811146a:	2b00      	cmp	r3, #0
 811146c:	d009      	beq.n	8111482 <initCortexM4+0x4a>
 811146e:	494d      	ldr	r1, [pc, #308]	; (81115a4 <initCortexM4+0x16c>)
 8111470:	484d      	ldr	r0, [pc, #308]	; (81115a8 <initCortexM4+0x170>)
 8111472:	f7ff ff7d 	bl	8111370 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 8111476:	484a      	ldr	r0, [pc, #296]	; (81115a0 <initCortexM4+0x168>)
 8111478:	f000 fc7a 	bl	8111d70 <__cxa_guard_release>
 811147c:	484b      	ldr	r0, [pc, #300]	; (81115ac <initCortexM4+0x174>)
 811147e:	f000 fd85 	bl	8111f8c <atexit>
	static Shell shell(&huart3, &terminal);
 8111482:	4b4b      	ldr	r3, [pc, #300]	; (81115b0 <initCortexM4+0x178>)
 8111484:	781b      	ldrb	r3, [r3, #0]
 8111486:	f3bf 8f5b 	dmb	ish
 811148a:	b2db      	uxtb	r3, r3
 811148c:	f003 0301 	and.w	r3, r3, #1
 8111490:	2b00      	cmp	r3, #0
 8111492:	bf0c      	ite	eq
 8111494:	2301      	moveq	r3, #1
 8111496:	2300      	movne	r3, #0
 8111498:	b2db      	uxtb	r3, r3
 811149a:	2b00      	cmp	r3, #0
 811149c:	d015      	beq.n	81114ca <initCortexM4+0x92>
 811149e:	4844      	ldr	r0, [pc, #272]	; (81115b0 <initCortexM4+0x178>)
 81114a0:	f000 fc5a 	bl	8111d58 <__cxa_guard_acquire>
 81114a4:	4603      	mov	r3, r0
 81114a6:	2b00      	cmp	r3, #0
 81114a8:	bf14      	ite	ne
 81114aa:	2301      	movne	r3, #1
 81114ac:	2300      	moveq	r3, #0
 81114ae:	b2db      	uxtb	r3, r3
 81114b0:	2b00      	cmp	r3, #0
 81114b2:	d00a      	beq.n	81114ca <initCortexM4+0x92>
 81114b4:	4a3f      	ldr	r2, [pc, #252]	; (81115b4 <initCortexM4+0x17c>)
 81114b6:	4940      	ldr	r1, [pc, #256]	; (81115b8 <initCortexM4+0x180>)
 81114b8:	4840      	ldr	r0, [pc, #256]	; (81115bc <initCortexM4+0x184>)
 81114ba:	f7fa fa45 	bl	810b948 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 81114be:	483c      	ldr	r0, [pc, #240]	; (81115b0 <initCortexM4+0x178>)
 81114c0:	f000 fc56 	bl	8111d70 <__cxa_guard_release>
 81114c4:	483e      	ldr	r0, [pc, #248]	; (81115c0 <initCortexM4+0x188>)
 81114c6:	f000 fd61 	bl	8111f8c <atexit>
	static ProberThread prober1(&hi2c1);
 81114ca:	4b3e      	ldr	r3, [pc, #248]	; (81115c4 <initCortexM4+0x18c>)
 81114cc:	781b      	ldrb	r3, [r3, #0]
 81114ce:	f3bf 8f5b 	dmb	ish
 81114d2:	b2db      	uxtb	r3, r3
 81114d4:	f003 0301 	and.w	r3, r3, #1
 81114d8:	2b00      	cmp	r3, #0
 81114da:	bf0c      	ite	eq
 81114dc:	2301      	moveq	r3, #1
 81114de:	2300      	movne	r3, #0
 81114e0:	b2db      	uxtb	r3, r3
 81114e2:	2b00      	cmp	r3, #0
 81114e4:	d014      	beq.n	8111510 <initCortexM4+0xd8>
 81114e6:	4837      	ldr	r0, [pc, #220]	; (81115c4 <initCortexM4+0x18c>)
 81114e8:	f000 fc36 	bl	8111d58 <__cxa_guard_acquire>
 81114ec:	4603      	mov	r3, r0
 81114ee:	2b00      	cmp	r3, #0
 81114f0:	bf14      	ite	ne
 81114f2:	2301      	movne	r3, #1
 81114f4:	2300      	moveq	r3, #0
 81114f6:	b2db      	uxtb	r3, r3
 81114f8:	2b00      	cmp	r3, #0
 81114fa:	d009      	beq.n	8111510 <initCortexM4+0xd8>
 81114fc:	4932      	ldr	r1, [pc, #200]	; (81115c8 <initCortexM4+0x190>)
 81114fe:	4833      	ldr	r0, [pc, #204]	; (81115cc <initCortexM4+0x194>)
 8111500:	f7ff ff50 	bl	81113a4 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>
 8111504:	482f      	ldr	r0, [pc, #188]	; (81115c4 <initCortexM4+0x18c>)
 8111506:	f000 fc33 	bl	8111d70 <__cxa_guard_release>
 811150a:	4831      	ldr	r0, [pc, #196]	; (81115d0 <initCortexM4+0x198>)
 811150c:	f000 fd3e 	bl	8111f8c <atexit>
	static ProberThread prober2(&hi2c2);
 8111510:	4b30      	ldr	r3, [pc, #192]	; (81115d4 <initCortexM4+0x19c>)
 8111512:	781b      	ldrb	r3, [r3, #0]
 8111514:	f3bf 8f5b 	dmb	ish
 8111518:	b2db      	uxtb	r3, r3
 811151a:	f003 0301 	and.w	r3, r3, #1
 811151e:	2b00      	cmp	r3, #0
 8111520:	bf0c      	ite	eq
 8111522:	2301      	moveq	r3, #1
 8111524:	2300      	movne	r3, #0
 8111526:	b2db      	uxtb	r3, r3
 8111528:	2b00      	cmp	r3, #0
 811152a:	d014      	beq.n	8111556 <initCortexM4+0x11e>
 811152c:	4829      	ldr	r0, [pc, #164]	; (81115d4 <initCortexM4+0x19c>)
 811152e:	f000 fc13 	bl	8111d58 <__cxa_guard_acquire>
 8111532:	4603      	mov	r3, r0
 8111534:	2b00      	cmp	r3, #0
 8111536:	bf14      	ite	ne
 8111538:	2301      	movne	r3, #1
 811153a:	2300      	moveq	r3, #0
 811153c:	b2db      	uxtb	r3, r3
 811153e:	2b00      	cmp	r3, #0
 8111540:	d009      	beq.n	8111556 <initCortexM4+0x11e>
 8111542:	4925      	ldr	r1, [pc, #148]	; (81115d8 <initCortexM4+0x1a0>)
 8111544:	4825      	ldr	r0, [pc, #148]	; (81115dc <initCortexM4+0x1a4>)
 8111546:	f7ff ff2d 	bl	81113a4 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>
 811154a:	4822      	ldr	r0, [pc, #136]	; (81115d4 <initCortexM4+0x19c>)
 811154c:	f000 fc10 	bl	8111d70 <__cxa_guard_release>
 8111550:	4823      	ldr	r0, [pc, #140]	; (81115e0 <initCortexM4+0x1a8>)
 8111552:	f000 fd1b 	bl	8111f8c <atexit>
	static ProberThread prober3(&hi2c4);
 8111556:	4b23      	ldr	r3, [pc, #140]	; (81115e4 <initCortexM4+0x1ac>)
 8111558:	781b      	ldrb	r3, [r3, #0]
 811155a:	f3bf 8f5b 	dmb	ish
 811155e:	b2db      	uxtb	r3, r3
 8111560:	f003 0301 	and.w	r3, r3, #1
 8111564:	2b00      	cmp	r3, #0
 8111566:	bf0c      	ite	eq
 8111568:	2301      	moveq	r3, #1
 811156a:	2300      	movne	r3, #0
 811156c:	b2db      	uxtb	r3, r3
 811156e:	2b00      	cmp	r3, #0
 8111570:	d014      	beq.n	811159c <initCortexM4+0x164>
 8111572:	481c      	ldr	r0, [pc, #112]	; (81115e4 <initCortexM4+0x1ac>)
 8111574:	f000 fbf0 	bl	8111d58 <__cxa_guard_acquire>
 8111578:	4603      	mov	r3, r0
 811157a:	2b00      	cmp	r3, #0
 811157c:	bf14      	ite	ne
 811157e:	2301      	movne	r3, #1
 8111580:	2300      	moveq	r3, #0
 8111582:	b2db      	uxtb	r3, r3
 8111584:	2b00      	cmp	r3, #0
 8111586:	d009      	beq.n	811159c <initCortexM4+0x164>
 8111588:	4917      	ldr	r1, [pc, #92]	; (81115e8 <initCortexM4+0x1b0>)
 811158a:	4818      	ldr	r0, [pc, #96]	; (81115ec <initCortexM4+0x1b4>)
 811158c:	f7ff ff0a 	bl	81113a4 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>
 8111590:	4814      	ldr	r0, [pc, #80]	; (81115e4 <initCortexM4+0x1ac>)
 8111592:	f000 fbed 	bl	8111d70 <__cxa_guard_release>
 8111596:	4816      	ldr	r0, [pc, #88]	; (81115f0 <initCortexM4+0x1b8>)
 8111598:	f000 fcf8 	bl	8111f8c <atexit>
}
 811159c:	bf00      	nop
 811159e:	bd80      	pop	{r7, pc}
 81115a0:	10008e94 	.word	0x10008e94
 81115a4:	1000deac 	.word	0x1000deac
 81115a8:	10008e80 	.word	0x10008e80
 81115ac:	081113e9 	.word	0x081113e9
 81115b0:	10009300 	.word	0x10009300
 81115b4:	10008a28 	.word	0x10008a28
 81115b8:	1000e208 	.word	0x1000e208
 81115bc:	10008e98 	.word	0x10008e98
 81115c0:	081113f9 	.word	0x081113f9
 81115c4:	10009324 	.word	0x10009324
 81115c8:	1000de14 	.word	0x1000de14
 81115cc:	10009304 	.word	0x10009304
 81115d0:	08111409 	.word	0x08111409
 81115d4:	10009348 	.word	0x10009348
 81115d8:	1000de60 	.word	0x1000de60
 81115dc:	10009328 	.word	0x10009328
 81115e0:	08111419 	.word	0x08111419
 81115e4:	1000936c 	.word	0x1000936c
 81115e8:	1000ddc8 	.word	0x1000ddc8
 81115ec:	1000934c 	.word	0x1000934c
 81115f0:	08111429 	.word	0x08111429

081115f4 <_Z41__static_initialization_and_destruction_0ii>:



void setupTelemtry() {
	network.forward<PingPacket>(&network);
}
 81115f4:	b580      	push	{r7, lr}
 81115f6:	b082      	sub	sp, #8
 81115f8:	af00      	add	r7, sp, #0
 81115fa:	6078      	str	r0, [r7, #4]
 81115fc:	6039      	str	r1, [r7, #0]
 81115fe:	687b      	ldr	r3, [r7, #4]
 8111600:	2b01      	cmp	r3, #1
 8111602:	d111      	bne.n	8111628 <_Z41__static_initialization_and_destruction_0ii+0x34>
 8111604:	683b      	ldr	r3, [r7, #0]
 8111606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 811160a:	4293      	cmp	r3, r2
 811160c:	d10c      	bne.n	8111628 <_Z41__static_initialization_and_destruction_0ii+0x34>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 811160e:	4b0f      	ldr	r3, [pc, #60]	; (811164c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8111610:	6819      	ldr	r1, [r3, #0]
 8111612:	4b0f      	ldr	r3, [pc, #60]	; (8111650 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8111614:	681a      	ldr	r2, [r3, #0]
 8111616:	f44f 7380 	mov.w	r3, #256	; 0x100
 811161a:	480e      	ldr	r0, [pc, #56]	; (8111654 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 811161c:	f7fc fa0e 	bl	810da3c <_ZN16BufferedIODriverC1EPVhS1_j>
NetworkBus network(&telemetryDriver);
 8111620:	490c      	ldr	r1, [pc, #48]	; (8111654 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8111622:	480d      	ldr	r0, [pc, #52]	; (8111658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8111624:	f7fe fdb2 	bl	811018c <_ZN10NetworkBusC1EP8IODriver>
 8111628:	687b      	ldr	r3, [r7, #4]
 811162a:	2b00      	cmp	r3, #0
 811162c:	d10a      	bne.n	8111644 <_Z41__static_initialization_and_destruction_0ii+0x50>
 811162e:	683b      	ldr	r3, [r7, #0]
 8111630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8111634:	4293      	cmp	r3, r2
 8111636:	d105      	bne.n	8111644 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8111638:	4807      	ldr	r0, [pc, #28]	; (8111658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 811163a:	f7fe fe25 	bl	8110288 <_ZN10NetworkBusD1Ev>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 811163e:	4805      	ldr	r0, [pc, #20]	; (8111654 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8111640:	f7fc fbae 	bl	810dda0 <_ZN16BufferedIODriverD1Ev>
}
 8111644:	bf00      	nop
 8111646:	3708      	adds	r7, #8
 8111648:	46bd      	mov	sp, r7
 811164a:	bd80      	pop	{r7, pc}
 811164c:	10000038 	.word	0x10000038
 8111650:	10000034 	.word	0x10000034
 8111654:	10009370 	.word	0x10009370
 8111658:	10009398 	.word	0x10009398

0811165c <_GLOBAL__sub_I_telemetryDriver>:
 811165c:	b580      	push	{r7, lr}
 811165e:	af00      	add	r7, sp, #0
 8111660:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8111664:	2001      	movs	r0, #1
 8111666:	f7ff ffc5 	bl	81115f4 <_Z41__static_initialization_and_destruction_0ii>
 811166a:	bd80      	pop	{r7, pc}

0811166c <_GLOBAL__sub_D_telemetryDriver>:
 811166c:	b580      	push	{r7, lr}
 811166e:	af00      	add	r7, sp, #0
 8111670:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8111674:	2000      	movs	r0, #0
 8111676:	f7ff ffbd 	bl	81115f4 <_Z41__static_initialization_and_destruction_0ii>
 811167a:	bd80      	pop	{r7, pc}

0811167c <_ZN6Thread9isRunningEv>:
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
	virtual void init() = 0;
	virtual void loop() = 0;
	osThreadId getHandle();
	bool isRunning() { return running; }
 811167c:	b480      	push	{r7}
 811167e:	b083      	sub	sp, #12
 8111680:	af00      	add	r7, sp, #0
 8111682:	6078      	str	r0, [r7, #4]
 8111684:	687b      	ldr	r3, [r7, #4]
 8111686:	7b1b      	ldrb	r3, [r3, #12]
 8111688:	4618      	mov	r0, r3
 811168a:	370c      	adds	r7, #12
 811168c:	46bd      	mov	sp, r7
 811168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111692:	4770      	bx	lr

08111694 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (512) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 8111694:	b580      	push	{r7, lr}
 8111696:	b084      	sub	sp, #16
 8111698:	af00      	add	r7, sp, #0
 811169a:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 811169c:	687b      	ldr	r3, [r7, #4]
 811169e:	60fb      	str	r3, [r7, #12]

	osDelay(100 / portTICK_PERIOD_MS);
 81116a0:	2064      	movs	r0, #100	; 0x64
 81116a2:	f7f7 feab 	bl	81093fc <osDelay>

	thread->init();
 81116a6:	68fb      	ldr	r3, [r7, #12]
 81116a8:	681b      	ldr	r3, [r3, #0]
 81116aa:	3308      	adds	r3, #8
 81116ac:	681b      	ldr	r3, [r3, #0]
 81116ae:	68f8      	ldr	r0, [r7, #12]
 81116b0:	4798      	blx	r3

	while(thread->isRunning()) {
 81116b2:	68f8      	ldr	r0, [r7, #12]
 81116b4:	f7ff ffe2 	bl	811167c <_ZN6Thread9isRunningEv>
 81116b8:	4603      	mov	r3, r0
 81116ba:	2b00      	cmp	r3, #0
 81116bc:	d009      	beq.n	81116d2 <_Z10__task_runPKv+0x3e>
		thread->loop();
 81116be:	68fb      	ldr	r3, [r7, #12]
 81116c0:	681b      	ldr	r3, [r3, #0]
 81116c2:	330c      	adds	r3, #12
 81116c4:	681b      	ldr	r3, [r3, #0]
 81116c6:	68f8      	ldr	r0, [r7, #12]
 81116c8:	4798      	blx	r3
		osDelay(10 / portTICK_PERIOD_MS);
 81116ca:	200a      	movs	r0, #10
 81116cc:	f7f7 fe96 	bl	81093fc <osDelay>
	while(thread->isRunning()) {
 81116d0:	e7ef      	b.n	81116b2 <_Z10__task_runPKv+0x1e>
	}

	delete thread;
 81116d2:	68fb      	ldr	r3, [r7, #12]
 81116d4:	2b00      	cmp	r3, #0
 81116d6:	d005      	beq.n	81116e4 <_Z10__task_runPKv+0x50>
 81116d8:	68fb      	ldr	r3, [r7, #12]
 81116da:	681b      	ldr	r3, [r3, #0]
 81116dc:	3304      	adds	r3, #4
 81116de:	681b      	ldr	r3, [r3, #0]
 81116e0:	68f8      	ldr	r0, [r7, #12]
 81116e2:	4798      	blx	r3

	vTaskDelete(nullptr);
 81116e4:	2000      	movs	r0, #0
 81116e6:	f7f9 f95d 	bl	810a9a4 <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 81116ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81116ee:	f7f7 fe85 	bl	81093fc <osDelay>
 81116f2:	e7fa      	b.n	81116ea <_Z10__task_runPKv+0x56>

081116f4 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 81116f4:	b580      	push	{r7, lr}
 81116f6:	b082      	sub	sp, #8
 81116f8:	af00      	add	r7, sp, #0
 81116fa:	6078      	str	r0, [r7, #4]
 81116fc:	6039      	str	r1, [r7, #0]
 81116fe:	2200      	movs	r2, #0
 8111700:	6839      	ldr	r1, [r7, #0]
 8111702:	6878      	ldr	r0, [r7, #4]
 8111704:	f000 f805 	bl	8111712 <_ZN6ThreadC1EPKc10osPriority>
	;
}
 8111708:	687b      	ldr	r3, [r7, #4]
 811170a:	4618      	mov	r0, r3
 811170c:	3708      	adds	r7, #8
 811170e:	46bd      	mov	sp, r7
 8111710:	bd80      	pop	{r7, pc}

08111712 <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 8111712:	b580      	push	{r7, lr}
 8111714:	b084      	sub	sp, #16
 8111716:	af00      	add	r7, sp, #0
 8111718:	60f8      	str	r0, [r7, #12]
 811171a:	60b9      	str	r1, [r7, #8]
 811171c:	4613      	mov	r3, r2
 811171e:	80fb      	strh	r3, [r7, #6]
 8111720:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8111724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8111728:	68b9      	ldr	r1, [r7, #8]
 811172a:	68f8      	ldr	r0, [r7, #12]
 811172c:	f000 f816 	bl	811175c <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 8111730:	68fb      	ldr	r3, [r7, #12]
 8111732:	4618      	mov	r0, r3
 8111734:	3710      	adds	r7, #16
 8111736:	46bd      	mov	sp, r7
 8111738:	bd80      	pop	{r7, pc}

0811173a <_ZN6ThreadC1EPKcm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
 811173a:	b580      	push	{r7, lr}
 811173c:	b084      	sub	sp, #16
 811173e:	af00      	add	r7, sp, #0
 8111740:	60f8      	str	r0, [r7, #12]
 8111742:	60b9      	str	r1, [r7, #8]
 8111744:	607a      	str	r2, [r7, #4]
 8111746:	687b      	ldr	r3, [r7, #4]
 8111748:	2200      	movs	r2, #0
 811174a:	68b9      	ldr	r1, [r7, #8]
 811174c:	68f8      	ldr	r0, [r7, #12]
 811174e:	f000 f805 	bl	811175c <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 8111752:	68fb      	ldr	r3, [r7, #12]
 8111754:	4618      	mov	r0, r3
 8111756:	3710      	adds	r7, #16
 8111758:	46bd      	mov	sp, r7
 811175a:	bd80      	pop	{r7, pc}

0811175c <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 811175c:	b580      	push	{r7, lr}
 811175e:	b08c      	sub	sp, #48	; 0x30
 8111760:	af00      	add	r7, sp, #0
 8111762:	60f8      	str	r0, [r7, #12]
 8111764:	60b9      	str	r1, [r7, #8]
 8111766:	603b      	str	r3, [r7, #0]
 8111768:	4613      	mov	r3, r2
 811176a:	80fb      	strh	r3, [r7, #6]
 811176c:	4a14      	ldr	r2, [pc, #80]	; (81117c0 <_ZN6ThreadC1EPKc10osPrioritym+0x64>)
 811176e:	68fb      	ldr	r3, [r7, #12]
 8111770:	601a      	str	r2, [r3, #0]
 8111772:	68fb      	ldr	r3, [r7, #12]
 8111774:	2201      	movs	r2, #1
 8111776:	731a      	strb	r2, [r3, #12]
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 8111778:	f107 0314 	add.w	r3, r7, #20
 811177c:	2200      	movs	r2, #0
 811177e:	601a      	str	r2, [r3, #0]
 8111780:	605a      	str	r2, [r3, #4]
 8111782:	609a      	str	r2, [r3, #8]
 8111784:	60da      	str	r2, [r3, #12]
 8111786:	611a      	str	r2, [r3, #16]
 8111788:	615a      	str	r2, [r3, #20]
 811178a:	619a      	str	r2, [r3, #24]
 811178c:	4b0d      	ldr	r3, [pc, #52]	; (81117c4 <_ZN6ThreadC1EPKc10osPrioritym+0x68>)
 811178e:	61bb      	str	r3, [r7, #24]
 8111790:	68bb      	ldr	r3, [r7, #8]
 8111792:	617b      	str	r3, [r7, #20]
 8111794:	88fb      	ldrh	r3, [r7, #6]
 8111796:	83bb      	strh	r3, [r7, #28]
 8111798:	683b      	ldr	r3, [r7, #0]
 811179a:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(&thread, this);
 811179c:	f107 0314 	add.w	r3, r7, #20
 81117a0:	68f9      	ldr	r1, [r7, #12]
 81117a2:	4618      	mov	r0, r3
 81117a4:	f7f7 fdde 	bl	8109364 <osThreadCreate>
 81117a8:	4602      	mov	r2, r0
 81117aa:	68fb      	ldr	r3, [r7, #12]
 81117ac:	605a      	str	r2, [r3, #4]
	this->name = name;
 81117ae:	68fb      	ldr	r3, [r7, #12]
 81117b0:	68ba      	ldr	r2, [r7, #8]
 81117b2:	609a      	str	r2, [r3, #8]
}
 81117b4:	68fb      	ldr	r3, [r7, #12]
 81117b6:	4618      	mov	r0, r3
 81117b8:	3730      	adds	r7, #48	; 0x30
 81117ba:	46bd      	mov	sp, r7
 81117bc:	bd80      	pop	{r7, pc}
 81117be:	bf00      	nop
 81117c0:	081157b0 	.word	0x081157b0
 81117c4:	08111695 	.word	0x08111695

081117c8 <_ZN6Thread9terminateEv>:

osThreadId Thread::getHandle() {
	return handle;
}

void Thread::terminate() {
 81117c8:	b480      	push	{r7}
 81117ca:	b083      	sub	sp, #12
 81117cc:	af00      	add	r7, sp, #0
 81117ce:	6078      	str	r0, [r7, #4]
	this->running = false;
 81117d0:	687b      	ldr	r3, [r7, #4]
 81117d2:	2200      	movs	r2, #0
 81117d4:	731a      	strb	r2, [r3, #12]
}
 81117d6:	bf00      	nop
 81117d8:	370c      	adds	r7, #12
 81117da:	46bd      	mov	sp, r7
 81117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81117e0:	4770      	bx	lr
	...

081117e4 <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 81117e4:	b40e      	push	{r1, r2, r3}
 81117e6:	b580      	push	{r7, lr}
 81117e8:	b085      	sub	sp, #20
 81117ea:	af00      	add	r7, sp, #0
 81117ec:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 81117ee:	f107 0320 	add.w	r3, r7, #32
 81117f2:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 81117f4:	687b      	ldr	r3, [r7, #4]
 81117f6:	689b      	ldr	r3, [r3, #8]
 81117f8:	461a      	mov	r2, r3
 81117fa:	4913      	ldr	r1, [pc, #76]	; (8111848 <_ZN6Thread7printlnEPKcz+0x64>)
 81117fc:	4813      	ldr	r0, [pc, #76]	; (811184c <_ZN6Thread7printlnEPKcz+0x68>)
 81117fe:	f001 f929 	bl	8112a54 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 8111802:	4812      	ldr	r0, [pc, #72]	; (811184c <_ZN6Thread7printlnEPKcz+0x68>)
 8111804:	f7ee fd76 	bl	81002f4 <strlen>
 8111808:	4602      	mov	r2, r0
 811180a:	4b10      	ldr	r3, [pc, #64]	; (811184c <_ZN6Thread7printlnEPKcz+0x68>)
 811180c:	4413      	add	r3, r2
 811180e:	68fa      	ldr	r2, [r7, #12]
 8111810:	69f9      	ldr	r1, [r7, #28]
 8111812:	4618      	mov	r0, r3
 8111814:	f001 f9e6 	bl	8112be4 <vsiprintf>
	strcat(buffer, "\r\n");
 8111818:	480c      	ldr	r0, [pc, #48]	; (811184c <_ZN6Thread7printlnEPKcz+0x68>)
 811181a:	f7ee fd6b 	bl	81002f4 <strlen>
 811181e:	4603      	mov	r3, r0
 8111820:	461a      	mov	r2, r3
 8111822:	4b0a      	ldr	r3, [pc, #40]	; (811184c <_ZN6Thread7printlnEPKcz+0x68>)
 8111824:	4413      	add	r3, r2
 8111826:	4a0a      	ldr	r2, [pc, #40]	; (8111850 <_ZN6Thread7printlnEPKcz+0x6c>)
 8111828:	8811      	ldrh	r1, [r2, #0]
 811182a:	7892      	ldrb	r2, [r2, #2]
 811182c:	8019      	strh	r1, [r3, #0]
 811182e:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 8111830:	4906      	ldr	r1, [pc, #24]	; (811184c <_ZN6Thread7printlnEPKcz+0x68>)
 8111832:	4808      	ldr	r0, [pc, #32]	; (8111854 <_ZN6Thread7printlnEPKcz+0x70>)
 8111834:	f7f9 ffe1 	bl	810b7fa <_ZN7Console5printEPKc>

	va_end(args);
}
 8111838:	bf00      	nop
 811183a:	3714      	adds	r7, #20
 811183c:	46bd      	mov	sp, r7
 811183e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8111842:	b003      	add	sp, #12
 8111844:	4770      	bx	lr
 8111846:	bf00      	nop
 8111848:	0811574c 	.word	0x0811574c
 811184c:	1000dcac 	.word	0x1000dcac
 8111850:	08115754 	.word	0x08115754
 8111854:	100085dc 	.word	0x100085dc

08111858 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8111858:	b510      	push	{r4, lr}
 811185a:	4b03      	ldr	r3, [pc, #12]	; (8111868 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 811185c:	6003      	str	r3, [r0, #0]
 811185e:	4604      	mov	r4, r0
 8111860:	f000 faaa 	bl	8111db8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8111864:	4620      	mov	r0, r4
 8111866:	bd10      	pop	{r4, pc}
 8111868:	08115d7c 	.word	0x08115d7c

0811186c <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 811186c:	b510      	push	{r4, lr}
 811186e:	4604      	mov	r4, r0
 8111870:	f7ff fff2 	bl	8111858 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8111874:	4620      	mov	r0, r4
 8111876:	2118      	movs	r1, #24
 8111878:	f000 fa37 	bl	8111cea <_ZdlPvj>
 811187c:	4620      	mov	r0, r4
 811187e:	bd10      	pop	{r4, pc}

08111880 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8111880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111884:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8111888:	454a      	cmp	r2, r9
 811188a:	4604      	mov	r4, r0
 811188c:	460f      	mov	r7, r1
 811188e:	4616      	mov	r6, r2
 8111890:	4698      	mov	r8, r3
 8111892:	d024      	beq.n	81118de <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8111894:	68e5      	ldr	r5, [r4, #12]
 8111896:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 811189a:	b355      	cbz	r5, 81118f2 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x72>
 811189c:	68e3      	ldr	r3, [r4, #12]
 811189e:	079a      	lsls	r2, r3, #30
 81118a0:	d524      	bpl.n	81118ec <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 81118a2:	f013 0a01 	ands.w	sl, r3, #1
 81118a6:	ea4f 2223 	mov.w	r2, r3, asr #8
 81118aa:	d003      	beq.n	81118b4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x34>
 81118ac:	1cfb      	adds	r3, r7, #3
 81118ae:	d01d      	beq.n	81118ec <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 81118b0:	6833      	ldr	r3, [r6, #0]
 81118b2:	589a      	ldr	r2, [r3, r2]
 81118b4:	68a0      	ldr	r0, [r4, #8]
 81118b6:	6803      	ldr	r3, [r0, #0]
 81118b8:	f8cd 9000 	str.w	r9, [sp]
 81118bc:	f8d3 b020 	ldr.w	fp, [r3, #32]
 81118c0:	4432      	add	r2, r6
 81118c2:	4643      	mov	r3, r8
 81118c4:	4639      	mov	r1, r7
 81118c6:	47d8      	blx	fp
 81118c8:	2803      	cmp	r0, #3
 81118ca:	d90f      	bls.n	81118ec <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 81118cc:	f1ba 0f00 	cmp.w	sl, #0
 81118d0:	d002      	beq.n	81118d8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 81118d2:	f040 0001 	orr.w	r0, r0, #1
 81118d6:	b2c0      	uxtb	r0, r0
 81118d8:	b003      	add	sp, #12
 81118da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81118de:	4619      	mov	r1, r3
 81118e0:	f000 f9ea 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 81118e4:	2800      	cmp	r0, #0
 81118e6:	d0d5      	beq.n	8111894 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 81118e8:	2006      	movs	r0, #6
 81118ea:	e7f5      	b.n	81118d8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 81118ec:	3d01      	subs	r5, #1
 81118ee:	3c08      	subs	r4, #8
 81118f0:	e7d3      	b.n	811189a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 81118f2:	2001      	movs	r0, #1
 81118f4:	e7f0      	b.n	81118d8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

081118f6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 81118f6:	b4f0      	push	{r4, r5, r6, r7}
 81118f8:	1e0e      	subs	r6, r1, #0
 81118fa:	9c04      	ldr	r4, [sp, #16]
 81118fc:	db06      	blt.n	811190c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 81118fe:	1990      	adds	r0, r2, r6
 8111900:	4284      	cmp	r4, r0
 8111902:	bf14      	ite	ne
 8111904:	2001      	movne	r0, #1
 8111906:	2006      	moveq	r0, #6
 8111908:	bcf0      	pop	{r4, r5, r6, r7}
 811190a:	4770      	bx	lr
 811190c:	3602      	adds	r6, #2
 811190e:	d004      	beq.n	811191a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 8111910:	6804      	ldr	r4, [r0, #0]
 8111912:	6a24      	ldr	r4, [r4, #32]
 8111914:	46a4      	mov	ip, r4
 8111916:	bcf0      	pop	{r4, r5, r6, r7}
 8111918:	4760      	bx	ip
 811191a:	2001      	movs	r0, #1
 811191c:	e7f4      	b.n	8111908 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0811191e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 811191e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111922:	b091      	sub	sp, #68	; 0x44
 8111924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8111928:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 811192a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 811192c:	68a3      	ldr	r3, [r4, #8]
 811192e:	06dd      	lsls	r5, r3, #27
 8111930:	bf44      	itt	mi
 8111932:	6883      	ldrmi	r3, [r0, #8]
 8111934:	60a3      	strmi	r3, [r4, #8]
 8111936:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8111938:	4293      	cmp	r3, r2
 811193a:	4681      	mov	r9, r0
 811193c:	4688      	mov	r8, r1
 811193e:	d107      	bne.n	8111950 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8111940:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8111942:	f000 f9b9 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111946:	b118      	cbz	r0, 8111950 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8111948:	9b05      	ldr	r3, [sp, #20]
 811194a:	7163      	strb	r3, [r4, #5]
 811194c:	2600      	movs	r6, #0
 811194e:	e0fa      	b.n	8111b46 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8111950:	9906      	ldr	r1, [sp, #24]
 8111952:	4648      	mov	r0, r9
 8111954:	f000 f9b0 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111958:	4682      	mov	sl, r0
 811195a:	b1c0      	cbz	r0, 811198e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 811195c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 811195e:	6023      	str	r3, [r4, #0]
 8111960:	f1b8 0f00 	cmp.w	r8, #0
 8111964:	9b05      	ldr	r3, [sp, #20]
 8111966:	7123      	strb	r3, [r4, #4]
 8111968:	db0b      	blt.n	8111982 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 811196a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 811196c:	4498      	add	r8, r3
 811196e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8111970:	4543      	cmp	r3, r8
 8111972:	bf14      	ite	ne
 8111974:	f04f 0801 	movne.w	r8, #1
 8111978:	f04f 0806 	moveq.w	r8, #6
 811197c:	f884 8006 	strb.w	r8, [r4, #6]
 8111980:	e7e4      	b.n	811194c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8111982:	f118 0f02 	cmn.w	r8, #2
 8111986:	d1e1      	bne.n	811194c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8111988:	2301      	movs	r3, #1
 811198a:	71a3      	strb	r3, [r4, #6]
 811198c:	e7de      	b.n	811194c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 811198e:	f1b8 0f00 	cmp.w	r8, #0
 8111992:	bfaa      	itet	ge
 8111994:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 8111996:	f8cd a01c 	strlt.w	sl, [sp, #28]
 811199a:	eba3 0308 	subge.w	r3, r3, r8
 811199e:	f04f 0600 	mov.w	r6, #0
 81119a2:	bfa8      	it	ge
 81119a4:	9307      	strge	r3, [sp, #28]
 81119a6:	2302      	movs	r3, #2
 81119a8:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 81119ac:	2301      	movs	r3, #1
 81119ae:	9308      	str	r3, [sp, #32]
 81119b0:	9b05      	ldr	r3, [sp, #20]
 81119b2:	f043 0301 	orr.w	r3, r3, #1
 81119b6:	46b3      	mov	fp, r6
 81119b8:	930b      	str	r3, [sp, #44]	; 0x2c
 81119ba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 81119be:	9304      	str	r3, [sp, #16]
 81119c0:	9b04      	ldr	r3, [sp, #16]
 81119c2:	2b00      	cmp	r3, #0
 81119c4:	f000 80d9 	beq.w	8111b7a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 81119c8:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
 81119cc:	68a7      	ldr	r7, [r4, #8]
 81119ce:	68e9      	ldr	r1, [r5, #12]
 81119d0:	970f      	str	r7, [sp, #60]	; 0x3c
 81119d2:	07c8      	lsls	r0, r1, #31
 81119d4:	bf48      	it	mi
 81119d6:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 81119d8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 81119dc:	ea4f 2321 	mov.w	r3, r1, asr #8
 81119e0:	bf48      	it	mi
 81119e2:	6800      	ldrmi	r0, [r0, #0]
 81119e4:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
 81119e8:	bf48      	it	mi
 81119ea:	58c3      	ldrmi	r3, [r0, r3]
 81119ec:	981a      	ldr	r0, [sp, #104]	; 0x68
 81119ee:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
 81119f2:	4403      	add	r3, r0
 81119f4:	9807      	ldr	r0, [sp, #28]
 81119f6:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
 81119fa:	bf4c      	ite	mi
 81119fc:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 81119fe:	9a05      	ldrpl	r2, [sp, #20]
 8111a00:	b148      	cbz	r0, 8111a16 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 8111a02:	4298      	cmp	r0, r3
 8111a04:	9808      	ldr	r0, [sp, #32]
 8111a06:	bf2c      	ite	cs
 8111a08:	f04f 0c00 	movcs.w	ip, #0
 8111a0c:	f04f 0c01 	movcc.w	ip, #1
 8111a10:	4584      	cmp	ip, r0
 8111a12:	f000 80ae 	beq.w	8111b72 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 8111a16:	0789      	lsls	r1, r1, #30
 8111a18:	d407      	bmi.n	8111a2a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
 8111a1a:	f118 0f02 	cmn.w	r8, #2
 8111a1e:	d102      	bne.n	8111a26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 8111a20:	07bf      	lsls	r7, r7, #30
 8111a22:	f000 80a8 	beq.w	8111b76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 8111a26:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8111a2a:	68a8      	ldr	r0, [r5, #8]
 8111a2c:	ad0d      	add	r5, sp, #52	; 0x34
 8111a2e:	6801      	ldr	r1, [r0, #0]
 8111a30:	9503      	str	r5, [sp, #12]
 8111a32:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8111a34:	9502      	str	r5, [sp, #8]
 8111a36:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8111a38:	e9cd 3500 	strd	r3, r5, [sp]
 8111a3c:	9b06      	ldr	r3, [sp, #24]
 8111a3e:	69cd      	ldr	r5, [r1, #28]
 8111a40:	4641      	mov	r1, r8
 8111a42:	47a8      	blx	r5
 8111a44:	7963      	ldrb	r3, [r4, #5]
 8111a46:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8111a4a:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 8111a4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8111a50:	4313      	orrs	r3, r2
 8111a52:	2d06      	cmp	r5, #6
 8111a54:	7163      	strb	r3, [r4, #5]
 8111a56:	d001      	beq.n	8111a5c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8111a58:	2d02      	cmp	r5, #2
 8111a5a:	d106      	bne.n	8111a6a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 8111a5c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8111a60:	6021      	str	r1, [r4, #0]
 8111a62:	7123      	strb	r3, [r4, #4]
 8111a64:	71a5      	strb	r5, [r4, #6]
 8111a66:	4682      	mov	sl, r0
 8111a68:	e06c      	b.n	8111b44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 8111a6a:	6822      	ldr	r2, [r4, #0]
 8111a6c:	b996      	cbnz	r6, 8111a94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 8111a6e:	b99a      	cbnz	r2, 8111a98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 8111a70:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8111a74:	6021      	str	r1, [r4, #0]
 8111a76:	7122      	strb	r2, [r4, #4]
 8111a78:	b121      	cbz	r1, 8111a84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8111a7a:	b11b      	cbz	r3, 8111a84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8111a7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8111a80:	07dd      	lsls	r5, r3, #31
 8111a82:	d5f0      	bpl.n	8111a66 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 8111a84:	7963      	ldrb	r3, [r4, #5]
 8111a86:	2b04      	cmp	r3, #4
 8111a88:	d0ed      	beq.n	8111a66 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 8111a8a:	9b04      	ldr	r3, [sp, #16]
 8111a8c:	3b01      	subs	r3, #1
 8111a8e:	9304      	str	r3, [sp, #16]
 8111a90:	4606      	mov	r6, r0
 8111a92:	e795      	b.n	81119c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa2>
 8111a94:	2a00      	cmp	r2, #0
 8111a96:	d037      	beq.n	8111b08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 8111a98:	4291      	cmp	r1, r2
 8111a9a:	d106      	bne.n	8111aaa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 8111a9c:	7923      	ldrb	r3, [r4, #4]
 8111a9e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8111aa2:	4313      	orrs	r3, r2
 8111aa4:	7123      	strb	r3, [r4, #4]
 8111aa6:	4630      	mov	r0, r6
 8111aa8:	e7ec      	b.n	8111a84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8111aaa:	b909      	cbnz	r1, 8111ab0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 8111aac:	2800      	cmp	r0, #0
 8111aae:	d0fa      	beq.n	8111aa6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8111ab0:	2b03      	cmp	r3, #3
 8111ab2:	79a7      	ldrb	r7, [r4, #6]
 8111ab4:	d904      	bls.n	8111ac0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 8111ab6:	07d8      	lsls	r0, r3, #31
 8111ab8:	d529      	bpl.n	8111b0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8111aba:	68a3      	ldr	r3, [r4, #8]
 8111abc:	0799      	lsls	r1, r3, #30
 8111abe:	d526      	bpl.n	8111b0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8111ac0:	b97f      	cbnz	r7, 8111ae2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 8111ac2:	2d03      	cmp	r5, #3
 8111ac4:	d905      	bls.n	8111ad2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 8111ac6:	07eb      	lsls	r3, r5, #31
 8111ac8:	d541      	bpl.n	8111b4e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8111aca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8111ace:	079f      	lsls	r7, r3, #30
 8111ad0:	d53d      	bpl.n	8111b4e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8111ad2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8111ad4:	9300      	str	r3, [sp, #0]
 8111ad6:	4641      	mov	r1, r8
 8111ad8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8111ada:	9806      	ldr	r0, [sp, #24]
 8111adc:	f7ff ff0b 	bl	81118f6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8111ae0:	4607      	mov	r7, r0
 8111ae2:	b9d5      	cbnz	r5, 8111b1a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8111ae4:	2f03      	cmp	r7, #3
 8111ae6:	d905      	bls.n	8111af4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 8111ae8:	07f8      	lsls	r0, r7, #31
 8111aea:	d532      	bpl.n	8111b52 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8111aec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8111af0:	0799      	lsls	r1, r3, #30
 8111af2:	d52e      	bpl.n	8111b52 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8111af4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8111af6:	9300      	str	r3, [sp, #0]
 8111af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8111afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8111afc:	9806      	ldr	r0, [sp, #24]
 8111afe:	4641      	mov	r1, r8
 8111b00:	f7ff fef9 	bl	81118f6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8111b04:	4605      	mov	r5, r0
 8111b06:	e008      	b.n	8111b1a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8111b08:	2900      	cmp	r1, #0
 8111b0a:	d1d1      	bne.n	8111ab0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 8111b0c:	e7cb      	b.n	8111aa6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8111b0e:	2f00      	cmp	r7, #0
 8111b10:	bf08      	it	eq
 8111b12:	2701      	moveq	r7, #1
 8111b14:	2d00      	cmp	r5, #0
 8111b16:	bf08      	it	eq
 8111b18:	2501      	moveq	r5, #1
 8111b1a:	ea85 0307 	eor.w	r3, r5, r7
 8111b1e:	b2db      	uxtb	r3, r3
 8111b20:	2b03      	cmp	r3, #3
 8111b22:	d918      	bls.n	8111b56 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 8111b24:	2d03      	cmp	r5, #3
 8111b26:	bf81      	itttt	hi
 8111b28:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 8111b2a:	6023      	strhi	r3, [r4, #0]
 8111b2c:	462f      	movhi	r7, r5
 8111b2e:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8111b32:	bf86      	itte	hi
 8111b34:	7123      	strbhi	r3, [r4, #4]
 8111b36:	2000      	movhi	r0, #0
 8111b38:	4630      	movls	r0, r6
 8111b3a:	07ba      	lsls	r2, r7, #30
 8111b3c:	71a7      	strb	r7, [r4, #6]
 8111b3e:	d401      	bmi.n	8111b44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 8111b40:	07fb      	lsls	r3, r7, #31
 8111b42:	d49f      	bmi.n	8111a84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8111b44:	4656      	mov	r6, sl
 8111b46:	4630      	mov	r0, r6
 8111b48:	b011      	add	sp, #68	; 0x44
 8111b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111b4e:	2701      	movs	r7, #1
 8111b50:	e7e3      	b.n	8111b1a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8111b52:	2501      	movs	r5, #1
 8111b54:	e7e1      	b.n	8111b1a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8111b56:	403d      	ands	r5, r7
 8111b58:	b2ed      	uxtb	r5, r5
 8111b5a:	2d03      	cmp	r5, #3
 8111b5c:	f8c4 b000 	str.w	fp, [r4]
 8111b60:	d904      	bls.n	8111b6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 8111b62:	2302      	movs	r3, #2
 8111b64:	71a3      	strb	r3, [r4, #6]
 8111b66:	f04f 0a01 	mov.w	sl, #1
 8111b6a:	e7eb      	b.n	8111b44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 8111b6c:	2001      	movs	r0, #1
 8111b6e:	71a0      	strb	r0, [r4, #6]
 8111b70:	e788      	b.n	8111a84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8111b72:	2301      	movs	r3, #1
 8111b74:	9309      	str	r3, [sp, #36]	; 0x24
 8111b76:	4630      	mov	r0, r6
 8111b78:	e787      	b.n	8111a8a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 8111b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111b7c:	2b00      	cmp	r3, #0
 8111b7e:	d0e2      	beq.n	8111b46 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8111b80:	9b04      	ldr	r3, [sp, #16]
 8111b82:	9308      	str	r3, [sp, #32]
 8111b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8111b86:	2b01      	cmp	r3, #1
 8111b88:	d0dd      	beq.n	8111b46 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8111b8a:	2301      	movs	r3, #1
 8111b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8111b8e:	e714      	b.n	81119ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>

08111b90 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8111b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111b94:	b089      	sub	sp, #36	; 0x24
 8111b96:	4607      	mov	r7, r0
 8111b98:	9102      	str	r1, [sp, #8]
 8111b9a:	4692      	mov	sl, r2
 8111b9c:	461c      	mov	r4, r3
 8111b9e:	f000 f93c 	bl	8111e1a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8111ba2:	4605      	mov	r5, r0
 8111ba4:	2800      	cmp	r0, #0
 8111ba6:	d159      	bne.n	8111c5c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8111ba8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8111bac:	f8d7 900c 	ldr.w	r9, [r7, #12]
 8111bb0:	f018 0f10 	tst.w	r8, #16
 8111bb4:	bf18      	it	ne
 8111bb6:	f8d7 8008 	ldrne.w	r8, [r7, #8]
 8111bba:	f008 0301 	and.w	r3, r8, #1
 8111bbe:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
 8111bc2:	f04f 0b00 	mov.w	fp, #0
 8111bc6:	9303      	str	r3, [sp, #12]
 8111bc8:	f1b9 0f00 	cmp.w	r9, #0
 8111bcc:	d06c      	beq.n	8111ca8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 8111bce:	68f2      	ldr	r2, [r6, #12]
 8111bd0:	f8cd b010 	str.w	fp, [sp, #16]
 8111bd4:	f002 0301 	and.w	r3, r2, #1
 8111bd8:	9300      	str	r3, [sp, #0]
 8111bda:	f012 0302 	ands.w	r3, r2, #2
 8111bde:	f88d b014 	strb.w	fp, [sp, #20]
 8111be2:	e9cd 8b06 	strd	r8, fp, [sp, #24]
 8111be6:	9301      	str	r3, [sp, #4]
 8111be8:	d105      	bne.n	8111bf6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 8111bea:	9b03      	ldr	r3, [sp, #12]
 8111bec:	b91b      	cbnz	r3, 8111bf6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 8111bee:	f109 39ff 	add.w	r9, r9, #4294967295
 8111bf2:	3e08      	subs	r6, #8
 8111bf4:	e7e8      	b.n	8111bc8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 8111bf6:	f1ba 0f00 	cmp.w	sl, #0
 8111bfa:	d033      	beq.n	8111c64 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd4>
 8111bfc:	9b00      	ldr	r3, [sp, #0]
 8111bfe:	1212      	asrs	r2, r2, #8
 8111c00:	b113      	cbz	r3, 8111c08 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 8111c02:	f8da 3000 	ldr.w	r3, [sl]
 8111c06:	589a      	ldr	r2, [r3, r2]
 8111c08:	4452      	add	r2, sl
 8111c0a:	68b0      	ldr	r0, [r6, #8]
 8111c0c:	9902      	ldr	r1, [sp, #8]
 8111c0e:	6803      	ldr	r3, [r0, #0]
 8111c10:	699d      	ldr	r5, [r3, #24]
 8111c12:	ab04      	add	r3, sp, #16
 8111c14:	47a8      	blx	r5
 8111c16:	4605      	mov	r5, r0
 8111c18:	2800      	cmp	r0, #0
 8111c1a:	d0e8      	beq.n	8111bee <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 8111c1c:	9b07      	ldr	r3, [sp, #28]
 8111c1e:	2b08      	cmp	r3, #8
 8111c20:	d103      	bne.n	8111c2a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 8111c22:	9b00      	ldr	r3, [sp, #0]
 8111c24:	b10b      	cbz	r3, 8111c2a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 8111c26:	68b3      	ldr	r3, [r6, #8]
 8111c28:	9307      	str	r3, [sp, #28]
 8111c2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8111c2e:	2b03      	cmp	r3, #3
 8111c30:	d905      	bls.n	8111c3e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 8111c32:	9a01      	ldr	r2, [sp, #4]
 8111c34:	b91a      	cbnz	r2, 8111c3e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 8111c36:	f023 0302 	bic.w	r3, r3, #2
 8111c3a:	f88d 3014 	strb.w	r3, [sp, #20]
 8111c3e:	68e1      	ldr	r1, [r4, #12]
 8111c40:	b9c1      	cbnz	r1, 8111c74 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 8111c42:	ab04      	add	r3, sp, #16
 8111c44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8111c46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8111c4a:	7923      	ldrb	r3, [r4, #4]
 8111c4c:	2b03      	cmp	r3, #3
 8111c4e:	d905      	bls.n	8111c5c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8111c50:	079a      	lsls	r2, r3, #30
 8111c52:	d509      	bpl.n	8111c68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8111c54:	68bb      	ldr	r3, [r7, #8]
 8111c56:	f013 0f01 	tst.w	r3, #1
 8111c5a:	d1c8      	bne.n	8111bee <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 8111c5c:	4628      	mov	r0, r5
 8111c5e:	b009      	add	sp, #36	; 0x24
 8111c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111c64:	4652      	mov	r2, sl
 8111c66:	e7d0      	b.n	8111c0a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7a>
 8111c68:	07db      	lsls	r3, r3, #31
 8111c6a:	d5f7      	bpl.n	8111c5c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8111c6c:	68bb      	ldr	r3, [r7, #8]
 8111c6e:	f013 0f02 	tst.w	r3, #2
 8111c72:	e7f2      	b.n	8111c5a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xca>
 8111c74:	6823      	ldr	r3, [r4, #0]
 8111c76:	9a04      	ldr	r2, [sp, #16]
 8111c78:	4293      	cmp	r3, r2
 8111c7a:	d004      	beq.n	8111c86 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf6>
 8111c7c:	2300      	movs	r3, #0
 8111c7e:	6023      	str	r3, [r4, #0]
 8111c80:	2302      	movs	r3, #2
 8111c82:	7123      	strb	r3, [r4, #4]
 8111c84:	e7ea      	b.n	8111c5c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8111c86:	b12b      	cbz	r3, 8111c94 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 8111c88:	7923      	ldrb	r3, [r4, #4]
 8111c8a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8111c8e:	4313      	orrs	r3, r2
 8111c90:	7123      	strb	r3, [r4, #4]
 8111c92:	e7ac      	b.n	8111bee <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 8111c94:	9807      	ldr	r0, [sp, #28]
 8111c96:	2808      	cmp	r0, #8
 8111c98:	d0f2      	beq.n	8111c80 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 8111c9a:	2908      	cmp	r1, #8
 8111c9c:	d0f0      	beq.n	8111c80 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 8111c9e:	f000 f80b 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111ca2:	2800      	cmp	r0, #0
 8111ca4:	d1f0      	bne.n	8111c88 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf8>
 8111ca6:	e7eb      	b.n	8111c80 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 8111ca8:	7925      	ldrb	r5, [r4, #4]
 8111caa:	3500      	adds	r5, #0
 8111cac:	bf18      	it	ne
 8111cae:	2501      	movne	r5, #1
 8111cb0:	e7d4      	b.n	8111c5c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>

08111cb2 <_ZNSt9type_infoD1Ev>:
 8111cb2:	4770      	bx	lr

08111cb4 <_ZNKSt9type_info14__is_pointer_pEv>:
 8111cb4:	2000      	movs	r0, #0
 8111cb6:	4770      	bx	lr

08111cb8 <_ZNKSt9type_infoeqERKS_>:
 8111cb8:	4281      	cmp	r1, r0
 8111cba:	b508      	push	{r3, lr}
 8111cbc:	d00e      	beq.n	8111cdc <_ZNKSt9type_infoeqERKS_+0x24>
 8111cbe:	6840      	ldr	r0, [r0, #4]
 8111cc0:	7803      	ldrb	r3, [r0, #0]
 8111cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8111cc4:	d00c      	beq.n	8111ce0 <_ZNKSt9type_infoeqERKS_+0x28>
 8111cc6:	6849      	ldr	r1, [r1, #4]
 8111cc8:	780b      	ldrb	r3, [r1, #0]
 8111cca:	2b2a      	cmp	r3, #42	; 0x2a
 8111ccc:	bf08      	it	eq
 8111cce:	3101      	addeq	r1, #1
 8111cd0:	f7ee fb06 	bl	81002e0 <strcmp>
 8111cd4:	fab0 f080 	clz	r0, r0
 8111cd8:	0940      	lsrs	r0, r0, #5
 8111cda:	bd08      	pop	{r3, pc}
 8111cdc:	2001      	movs	r0, #1
 8111cde:	e7fc      	b.n	8111cda <_ZNKSt9type_infoeqERKS_+0x22>
 8111ce0:	2000      	movs	r0, #0
 8111ce2:	e7fa      	b.n	8111cda <_ZNKSt9type_infoeqERKS_+0x22>

08111ce4 <__cxa_pure_virtual>:
 8111ce4:	b508      	push	{r3, lr}
 8111ce6:	f000 f945 	bl	8111f74 <_ZSt9terminatev>

08111cea <_ZdlPvj>:
 8111cea:	f7fa ba53 	b.w	810c194 <_ZdlPv>
	...

08111cf0 <_ZSt11_Hash_bytesPKvjj>:
 8111cf0:	4b18      	ldr	r3, [pc, #96]	; (8111d54 <_ZSt11_Hash_bytesPKvjj+0x64>)
 8111cf2:	b570      	push	{r4, r5, r6, lr}
 8111cf4:	404a      	eors	r2, r1
 8111cf6:	460d      	mov	r5, r1
 8111cf8:	1846      	adds	r6, r0, r1
 8111cfa:	2d03      	cmp	r5, #3
 8111cfc:	eba6 0405 	sub.w	r4, r6, r5
 8111d00:	d908      	bls.n	8111d14 <_ZSt11_Hash_bytesPKvjj+0x24>
 8111d02:	6824      	ldr	r4, [r4, #0]
 8111d04:	435c      	muls	r4, r3
 8111d06:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 8111d0a:	435a      	muls	r2, r3
 8111d0c:	435c      	muls	r4, r3
 8111d0e:	4062      	eors	r2, r4
 8111d10:	3d04      	subs	r5, #4
 8111d12:	e7f2      	b.n	8111cfa <_ZSt11_Hash_bytesPKvjj+0xa>
 8111d14:	088d      	lsrs	r5, r1, #2
 8111d16:	f06f 0403 	mvn.w	r4, #3
 8111d1a:	fb04 1105 	mla	r1, r4, r5, r1
 8111d1e:	2902      	cmp	r1, #2
 8111d20:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 8111d24:	d011      	beq.n	8111d4a <_ZSt11_Hash_bytesPKvjj+0x5a>
 8111d26:	2903      	cmp	r1, #3
 8111d28:	d00c      	beq.n	8111d44 <_ZSt11_Hash_bytesPKvjj+0x54>
 8111d2a:	2901      	cmp	r1, #1
 8111d2c:	d103      	bne.n	8111d36 <_ZSt11_Hash_bytesPKvjj+0x46>
 8111d2e:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 8111d32:	4042      	eors	r2, r0
 8111d34:	435a      	muls	r2, r3
 8111d36:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 8111d3a:	fb03 f002 	mul.w	r0, r3, r2
 8111d3e:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8111d42:	bd70      	pop	{r4, r5, r6, pc}
 8111d44:	78b1      	ldrb	r1, [r6, #2]
 8111d46:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 8111d4a:	7871      	ldrb	r1, [r6, #1]
 8111d4c:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 8111d50:	e7ed      	b.n	8111d2e <_ZSt11_Hash_bytesPKvjj+0x3e>
 8111d52:	bf00      	nop
 8111d54:	5bd1e995 	.word	0x5bd1e995

08111d58 <__cxa_guard_acquire>:
 8111d58:	6803      	ldr	r3, [r0, #0]
 8111d5a:	07db      	lsls	r3, r3, #31
 8111d5c:	d406      	bmi.n	8111d6c <__cxa_guard_acquire+0x14>
 8111d5e:	7843      	ldrb	r3, [r0, #1]
 8111d60:	b103      	cbz	r3, 8111d64 <__cxa_guard_acquire+0xc>
 8111d62:	deff      	udf	#255	; 0xff
 8111d64:	2301      	movs	r3, #1
 8111d66:	7043      	strb	r3, [r0, #1]
 8111d68:	4618      	mov	r0, r3
 8111d6a:	4770      	bx	lr
 8111d6c:	2000      	movs	r0, #0
 8111d6e:	4770      	bx	lr

08111d70 <__cxa_guard_release>:
 8111d70:	2301      	movs	r3, #1
 8111d72:	6003      	str	r3, [r0, #0]
 8111d74:	4770      	bx	lr

08111d76 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8111d76:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8111d78:	2400      	movs	r4, #0
 8111d7a:	2310      	movs	r3, #16
 8111d7c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8111d80:	6803      	ldr	r3, [r0, #0]
 8111d82:	9400      	str	r4, [sp, #0]
 8111d84:	4615      	mov	r5, r2
 8111d86:	699e      	ldr	r6, [r3, #24]
 8111d88:	f88d 4004 	strb.w	r4, [sp, #4]
 8111d8c:	466b      	mov	r3, sp
 8111d8e:	6812      	ldr	r2, [r2, #0]
 8111d90:	47b0      	blx	r6
 8111d92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8111d96:	f003 0306 	and.w	r3, r3, #6
 8111d9a:	2b06      	cmp	r3, #6
 8111d9c:	bf03      	ittte	eq
 8111d9e:	9b00      	ldreq	r3, [sp, #0]
 8111da0:	602b      	streq	r3, [r5, #0]
 8111da2:	2001      	moveq	r0, #1
 8111da4:	4620      	movne	r0, r4
 8111da6:	b004      	add	sp, #16
 8111da8:	bd70      	pop	{r4, r5, r6, pc}

08111daa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8111daa:	9800      	ldr	r0, [sp, #0]
 8111dac:	4290      	cmp	r0, r2
 8111dae:	bf0c      	ite	eq
 8111db0:	2006      	moveq	r0, #6
 8111db2:	2001      	movne	r0, #1
 8111db4:	4770      	bx	lr
	...

08111db8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8111db8:	b510      	push	{r4, lr}
 8111dba:	4b03      	ldr	r3, [pc, #12]	; (8111dc8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8111dbc:	6003      	str	r3, [r0, #0]
 8111dbe:	4604      	mov	r4, r0
 8111dc0:	f7ff ff77 	bl	8111cb2 <_ZNSt9type_infoD1Ev>
 8111dc4:	4620      	mov	r0, r4
 8111dc6:	bd10      	pop	{r4, pc}
 8111dc8:	08115df0 	.word	0x08115df0

08111dcc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8111dcc:	b510      	push	{r4, lr}
 8111dce:	4604      	mov	r4, r0
 8111dd0:	f7ff fff2 	bl	8111db8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8111dd4:	4620      	mov	r0, r4
 8111dd6:	2108      	movs	r1, #8
 8111dd8:	f7ff ff87 	bl	8111cea <_ZdlPvj>
 8111ddc:	4620      	mov	r0, r4
 8111dde:	bd10      	pop	{r4, pc}

08111de0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8111de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111de4:	4698      	mov	r8, r3
 8111de6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8111dea:	9e06      	ldr	r6, [sp, #24]
 8111dec:	429e      	cmp	r6, r3
 8111dee:	4607      	mov	r7, r0
 8111df0:	4615      	mov	r5, r2
 8111df2:	d107      	bne.n	8111e04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8111df4:	9907      	ldr	r1, [sp, #28]
 8111df6:	f7ff ff5f 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111dfa:	b118      	cbz	r0, 8111e04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8111dfc:	7165      	strb	r5, [r4, #5]
 8111dfe:	2000      	movs	r0, #0
 8111e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8111e04:	4641      	mov	r1, r8
 8111e06:	4638      	mov	r0, r7
 8111e08:	f7ff ff56 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111e0c:	2800      	cmp	r0, #0
 8111e0e:	d0f6      	beq.n	8111dfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 8111e10:	2301      	movs	r3, #1
 8111e12:	6026      	str	r6, [r4, #0]
 8111e14:	7125      	strb	r5, [r4, #4]
 8111e16:	71a3      	strb	r3, [r4, #6]
 8111e18:	e7f1      	b.n	8111dfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

08111e1a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8111e1a:	b538      	push	{r3, r4, r5, lr}
 8111e1c:	4615      	mov	r5, r2
 8111e1e:	461c      	mov	r4, r3
 8111e20:	f7ff ff4a 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111e24:	b120      	cbz	r0, 8111e30 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8111e26:	2308      	movs	r3, #8
 8111e28:	60e3      	str	r3, [r4, #12]
 8111e2a:	2306      	movs	r3, #6
 8111e2c:	6025      	str	r5, [r4, #0]
 8111e2e:	7123      	strb	r3, [r4, #4]
 8111e30:	bd38      	pop	{r3, r4, r5, pc}

08111e32 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8111e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111e36:	4605      	mov	r5, r0
 8111e38:	460c      	mov	r4, r1
 8111e3a:	4616      	mov	r6, r2
 8111e3c:	461f      	mov	r7, r3
 8111e3e:	f7ff ff3b 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111e42:	b948      	cbnz	r0, 8111e58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8111e44:	2f03      	cmp	r7, #3
 8111e46:	d807      	bhi.n	8111e58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8111e48:	6823      	ldr	r3, [r4, #0]
 8111e4a:	4632      	mov	r2, r6
 8111e4c:	4629      	mov	r1, r5
 8111e4e:	4620      	mov	r0, r4
 8111e50:	695b      	ldr	r3, [r3, #20]
 8111e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8111e56:	4718      	bx	r3
 8111e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08111e5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8111e5c:	b510      	push	{r4, lr}
 8111e5e:	4b03      	ldr	r3, [pc, #12]	; (8111e6c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8111e60:	6003      	str	r3, [r0, #0]
 8111e62:	4604      	mov	r4, r0
 8111e64:	f7ff ffa8 	bl	8111db8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8111e68:	4620      	mov	r0, r4
 8111e6a:	bd10      	pop	{r4, pc}
 8111e6c:	08115e50 	.word	0x08115e50

08111e70 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8111e70:	b510      	push	{r4, lr}
 8111e72:	4604      	mov	r4, r0
 8111e74:	f7ff fff2 	bl	8111e5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8111e78:	4620      	mov	r0, r4
 8111e7a:	210c      	movs	r1, #12
 8111e7c:	f7ff ff35 	bl	8111cea <_ZdlPvj>
 8111e80:	4620      	mov	r0, r4
 8111e82:	bd10      	pop	{r4, pc}

08111e84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8111e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111e88:	9e06      	ldr	r6, [sp, #24]
 8111e8a:	4296      	cmp	r6, r2
 8111e8c:	4607      	mov	r7, r0
 8111e8e:	4688      	mov	r8, r1
 8111e90:	4615      	mov	r5, r2
 8111e92:	461c      	mov	r4, r3
 8111e94:	d00a      	beq.n	8111eac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 8111e96:	68b8      	ldr	r0, [r7, #8]
 8111e98:	6803      	ldr	r3, [r0, #0]
 8111e9a:	9606      	str	r6, [sp, #24]
 8111e9c:	6a1e      	ldr	r6, [r3, #32]
 8111e9e:	462a      	mov	r2, r5
 8111ea0:	4623      	mov	r3, r4
 8111ea2:	4641      	mov	r1, r8
 8111ea4:	46b4      	mov	ip, r6
 8111ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8111eaa:	4760      	bx	ip
 8111eac:	4619      	mov	r1, r3
 8111eae:	f7ff ff03 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111eb2:	2800      	cmp	r0, #0
 8111eb4:	d0ef      	beq.n	8111e96 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 8111eb6:	2006      	movs	r0, #6
 8111eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08111ebc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8111ebc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111ec0:	460e      	mov	r6, r1
 8111ec2:	4619      	mov	r1, r3
 8111ec4:	4683      	mov	fp, r0
 8111ec6:	4617      	mov	r7, r2
 8111ec8:	4699      	mov	r9, r3
 8111eca:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 8111ece:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8111ed2:	f7ff fef1 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111ed6:	b190      	cbz	r0, 8111efe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8111ed8:	2e00      	cmp	r6, #0
 8111eda:	602c      	str	r4, [r5, #0]
 8111edc:	712f      	strb	r7, [r5, #4]
 8111ede:	db09      	blt.n	8111ef4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8111ee0:	4434      	add	r4, r6
 8111ee2:	45a0      	cmp	r8, r4
 8111ee4:	bf0c      	ite	eq
 8111ee6:	2406      	moveq	r4, #6
 8111ee8:	2401      	movne	r4, #1
 8111eea:	71ac      	strb	r4, [r5, #6]
 8111eec:	2000      	movs	r0, #0
 8111eee:	b001      	add	sp, #4
 8111ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111ef4:	3602      	adds	r6, #2
 8111ef6:	d1f9      	bne.n	8111eec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8111ef8:	2301      	movs	r3, #1
 8111efa:	71ab      	strb	r3, [r5, #6]
 8111efc:	e7f6      	b.n	8111eec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8111efe:	4544      	cmp	r4, r8
 8111f00:	d106      	bne.n	8111f10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8111f02:	4651      	mov	r1, sl
 8111f04:	4658      	mov	r0, fp
 8111f06:	f7ff fed7 	bl	8111cb8 <_ZNKSt9type_infoeqERKS_>
 8111f0a:	b108      	cbz	r0, 8111f10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8111f0c:	716f      	strb	r7, [r5, #5]
 8111f0e:	e7ed      	b.n	8111eec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8111f10:	f8db 0008 	ldr.w	r0, [fp, #8]
 8111f14:	6803      	ldr	r3, [r0, #0]
 8111f16:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 8111f1a:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8111f1e:	69dc      	ldr	r4, [r3, #28]
 8111f20:	463a      	mov	r2, r7
 8111f22:	464b      	mov	r3, r9
 8111f24:	4631      	mov	r1, r6
 8111f26:	46a4      	mov	ip, r4
 8111f28:	b001      	add	sp, #4
 8111f2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111f2e:	4760      	bx	ip

08111f30 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8111f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111f34:	4604      	mov	r4, r0
 8111f36:	460d      	mov	r5, r1
 8111f38:	4616      	mov	r6, r2
 8111f3a:	461f      	mov	r7, r3
 8111f3c:	f7ff ff6d 	bl	8111e1a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8111f40:	b948      	cbnz	r0, 8111f56 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8111f42:	68a0      	ldr	r0, [r4, #8]
 8111f44:	6803      	ldr	r3, [r0, #0]
 8111f46:	699c      	ldr	r4, [r3, #24]
 8111f48:	4632      	mov	r2, r6
 8111f4a:	463b      	mov	r3, r7
 8111f4c:	4629      	mov	r1, r5
 8111f4e:	46a4      	mov	ip, r4
 8111f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8111f54:	4760      	bx	ip
 8111f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08111f5a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8111f5a:	b508      	push	{r3, lr}
 8111f5c:	4780      	blx	r0
 8111f5e:	f000 f80e 	bl	8111f7e <abort>
	...

08111f64 <_ZSt13get_terminatev>:
 8111f64:	4b02      	ldr	r3, [pc, #8]	; (8111f70 <_ZSt13get_terminatev+0xc>)
 8111f66:	6818      	ldr	r0, [r3, #0]
 8111f68:	f3bf 8f5b 	dmb	ish
 8111f6c:	4770      	bx	lr
 8111f6e:	bf00      	nop
 8111f70:	1000003c 	.word	0x1000003c

08111f74 <_ZSt9terminatev>:
 8111f74:	b508      	push	{r3, lr}
 8111f76:	f7ff fff5 	bl	8111f64 <_ZSt13get_terminatev>
 8111f7a:	f7ff ffee 	bl	8111f5a <_ZN10__cxxabiv111__terminateEPFvvE>

08111f7e <abort>:
 8111f7e:	b508      	push	{r3, lr}
 8111f80:	2006      	movs	r0, #6
 8111f82:	f000 fd4b 	bl	8112a1c <raise>
 8111f86:	2001      	movs	r0, #1
 8111f88:	f7ef ff78 	bl	8101e7c <_exit>

08111f8c <atexit>:
 8111f8c:	2300      	movs	r3, #0
 8111f8e:	4601      	mov	r1, r0
 8111f90:	461a      	mov	r2, r3
 8111f92:	4618      	mov	r0, r3
 8111f94:	f000 bef0 	b.w	8112d78 <__register_exitproc>

08111f98 <atoi>:
 8111f98:	220a      	movs	r2, #10
 8111f9a:	2100      	movs	r1, #0
 8111f9c:	f000 bdf6 	b.w	8112b8c <strtol>

08111fa0 <__errno>:
 8111fa0:	4b01      	ldr	r3, [pc, #4]	; (8111fa8 <__errno+0x8>)
 8111fa2:	6818      	ldr	r0, [r3, #0]
 8111fa4:	4770      	bx	lr
 8111fa6:	bf00      	nop
 8111fa8:	10000040 	.word	0x10000040

08111fac <__libc_init_array>:
 8111fac:	b570      	push	{r4, r5, r6, lr}
 8111fae:	4e0d      	ldr	r6, [pc, #52]	; (8111fe4 <__libc_init_array+0x38>)
 8111fb0:	4c0d      	ldr	r4, [pc, #52]	; (8111fe8 <__libc_init_array+0x3c>)
 8111fb2:	1ba4      	subs	r4, r4, r6
 8111fb4:	10a4      	asrs	r4, r4, #2
 8111fb6:	2500      	movs	r5, #0
 8111fb8:	42a5      	cmp	r5, r4
 8111fba:	d109      	bne.n	8111fd0 <__libc_init_array+0x24>
 8111fbc:	4e0b      	ldr	r6, [pc, #44]	; (8111fec <__libc_init_array+0x40>)
 8111fbe:	4c0c      	ldr	r4, [pc, #48]	; (8111ff0 <__libc_init_array+0x44>)
 8111fc0:	f002 fec2 	bl	8114d48 <_init>
 8111fc4:	1ba4      	subs	r4, r4, r6
 8111fc6:	10a4      	asrs	r4, r4, #2
 8111fc8:	2500      	movs	r5, #0
 8111fca:	42a5      	cmp	r5, r4
 8111fcc:	d105      	bne.n	8111fda <__libc_init_array+0x2e>
 8111fce:	bd70      	pop	{r4, r5, r6, pc}
 8111fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8111fd4:	4798      	blx	r3
 8111fd6:	3501      	adds	r5, #1
 8111fd8:	e7ee      	b.n	8111fb8 <__libc_init_array+0xc>
 8111fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8111fde:	4798      	blx	r3
 8111fe0:	3501      	adds	r5, #1
 8111fe2:	e7f2      	b.n	8111fca <__libc_init_array+0x1e>
 8111fe4:	08116148 	.word	0x08116148
 8111fe8:	08116148 	.word	0x08116148
 8111fec:	08116148 	.word	0x08116148
 8111ff0:	08116154 	.word	0x08116154

08111ff4 <memcpy>:
 8111ff4:	b510      	push	{r4, lr}
 8111ff6:	1e43      	subs	r3, r0, #1
 8111ff8:	440a      	add	r2, r1
 8111ffa:	4291      	cmp	r1, r2
 8111ffc:	d100      	bne.n	8112000 <memcpy+0xc>
 8111ffe:	bd10      	pop	{r4, pc}
 8112000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8112004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8112008:	e7f7      	b.n	8111ffa <memcpy+0x6>

0811200a <memset>:
 811200a:	4402      	add	r2, r0
 811200c:	4603      	mov	r3, r0
 811200e:	4293      	cmp	r3, r2
 8112010:	d100      	bne.n	8112014 <memset+0xa>
 8112012:	4770      	bx	lr
 8112014:	f803 1b01 	strb.w	r1, [r3], #1
 8112018:	e7f9      	b.n	811200e <memset+0x4>

0811201a <__cvt>:
 811201a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 811201e:	ec55 4b10 	vmov	r4, r5, d0
 8112022:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8112024:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8112028:	2d00      	cmp	r5, #0
 811202a:	460e      	mov	r6, r1
 811202c:	4691      	mov	r9, r2
 811202e:	4619      	mov	r1, r3
 8112030:	bfb8      	it	lt
 8112032:	4622      	movlt	r2, r4
 8112034:	462b      	mov	r3, r5
 8112036:	f027 0720 	bic.w	r7, r7, #32
 811203a:	bfbb      	ittet	lt
 811203c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8112040:	461d      	movlt	r5, r3
 8112042:	2300      	movge	r3, #0
 8112044:	232d      	movlt	r3, #45	; 0x2d
 8112046:	bfb8      	it	lt
 8112048:	4614      	movlt	r4, r2
 811204a:	2f46      	cmp	r7, #70	; 0x46
 811204c:	700b      	strb	r3, [r1, #0]
 811204e:	d004      	beq.n	811205a <__cvt+0x40>
 8112050:	2f45      	cmp	r7, #69	; 0x45
 8112052:	d100      	bne.n	8112056 <__cvt+0x3c>
 8112054:	3601      	adds	r6, #1
 8112056:	2102      	movs	r1, #2
 8112058:	e000      	b.n	811205c <__cvt+0x42>
 811205a:	2103      	movs	r1, #3
 811205c:	ab03      	add	r3, sp, #12
 811205e:	9301      	str	r3, [sp, #4]
 8112060:	ab02      	add	r3, sp, #8
 8112062:	9300      	str	r3, [sp, #0]
 8112064:	4632      	mov	r2, r6
 8112066:	4653      	mov	r3, sl
 8112068:	ec45 4b10 	vmov	d0, r4, r5
 811206c:	f000 ff74 	bl	8112f58 <_dtoa_r>
 8112070:	2f47      	cmp	r7, #71	; 0x47
 8112072:	4680      	mov	r8, r0
 8112074:	d102      	bne.n	811207c <__cvt+0x62>
 8112076:	f019 0f01 	tst.w	r9, #1
 811207a:	d026      	beq.n	81120ca <__cvt+0xb0>
 811207c:	2f46      	cmp	r7, #70	; 0x46
 811207e:	eb08 0906 	add.w	r9, r8, r6
 8112082:	d111      	bne.n	81120a8 <__cvt+0x8e>
 8112084:	f898 3000 	ldrb.w	r3, [r8]
 8112088:	2b30      	cmp	r3, #48	; 0x30
 811208a:	d10a      	bne.n	81120a2 <__cvt+0x88>
 811208c:	2200      	movs	r2, #0
 811208e:	2300      	movs	r3, #0
 8112090:	4620      	mov	r0, r4
 8112092:	4629      	mov	r1, r5
 8112094:	f7ee fdb0 	bl	8100bf8 <__aeabi_dcmpeq>
 8112098:	b918      	cbnz	r0, 81120a2 <__cvt+0x88>
 811209a:	f1c6 0601 	rsb	r6, r6, #1
 811209e:	f8ca 6000 	str.w	r6, [sl]
 81120a2:	f8da 3000 	ldr.w	r3, [sl]
 81120a6:	4499      	add	r9, r3
 81120a8:	2200      	movs	r2, #0
 81120aa:	2300      	movs	r3, #0
 81120ac:	4620      	mov	r0, r4
 81120ae:	4629      	mov	r1, r5
 81120b0:	f7ee fda2 	bl	8100bf8 <__aeabi_dcmpeq>
 81120b4:	b938      	cbnz	r0, 81120c6 <__cvt+0xac>
 81120b6:	2230      	movs	r2, #48	; 0x30
 81120b8:	9b03      	ldr	r3, [sp, #12]
 81120ba:	454b      	cmp	r3, r9
 81120bc:	d205      	bcs.n	81120ca <__cvt+0xb0>
 81120be:	1c59      	adds	r1, r3, #1
 81120c0:	9103      	str	r1, [sp, #12]
 81120c2:	701a      	strb	r2, [r3, #0]
 81120c4:	e7f8      	b.n	81120b8 <__cvt+0x9e>
 81120c6:	f8cd 900c 	str.w	r9, [sp, #12]
 81120ca:	9b03      	ldr	r3, [sp, #12]
 81120cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81120ce:	eba3 0308 	sub.w	r3, r3, r8
 81120d2:	4640      	mov	r0, r8
 81120d4:	6013      	str	r3, [r2, #0]
 81120d6:	b004      	add	sp, #16
 81120d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

081120dc <__exponent>:
 81120dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81120de:	2900      	cmp	r1, #0
 81120e0:	4604      	mov	r4, r0
 81120e2:	bfba      	itte	lt
 81120e4:	4249      	neglt	r1, r1
 81120e6:	232d      	movlt	r3, #45	; 0x2d
 81120e8:	232b      	movge	r3, #43	; 0x2b
 81120ea:	2909      	cmp	r1, #9
 81120ec:	f804 2b02 	strb.w	r2, [r4], #2
 81120f0:	7043      	strb	r3, [r0, #1]
 81120f2:	dd20      	ble.n	8112136 <__exponent+0x5a>
 81120f4:	f10d 0307 	add.w	r3, sp, #7
 81120f8:	461f      	mov	r7, r3
 81120fa:	260a      	movs	r6, #10
 81120fc:	fb91 f5f6 	sdiv	r5, r1, r6
 8112100:	fb06 1115 	mls	r1, r6, r5, r1
 8112104:	3130      	adds	r1, #48	; 0x30
 8112106:	2d09      	cmp	r5, #9
 8112108:	f803 1c01 	strb.w	r1, [r3, #-1]
 811210c:	f103 32ff 	add.w	r2, r3, #4294967295
 8112110:	4629      	mov	r1, r5
 8112112:	dc09      	bgt.n	8112128 <__exponent+0x4c>
 8112114:	3130      	adds	r1, #48	; 0x30
 8112116:	3b02      	subs	r3, #2
 8112118:	f802 1c01 	strb.w	r1, [r2, #-1]
 811211c:	42bb      	cmp	r3, r7
 811211e:	4622      	mov	r2, r4
 8112120:	d304      	bcc.n	811212c <__exponent+0x50>
 8112122:	1a10      	subs	r0, r2, r0
 8112124:	b003      	add	sp, #12
 8112126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8112128:	4613      	mov	r3, r2
 811212a:	e7e7      	b.n	81120fc <__exponent+0x20>
 811212c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8112130:	f804 2b01 	strb.w	r2, [r4], #1
 8112134:	e7f2      	b.n	811211c <__exponent+0x40>
 8112136:	2330      	movs	r3, #48	; 0x30
 8112138:	4419      	add	r1, r3
 811213a:	7083      	strb	r3, [r0, #2]
 811213c:	1d02      	adds	r2, r0, #4
 811213e:	70c1      	strb	r1, [r0, #3]
 8112140:	e7ef      	b.n	8112122 <__exponent+0x46>
	...

08112144 <_printf_float>:
 8112144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112148:	b08d      	sub	sp, #52	; 0x34
 811214a:	460c      	mov	r4, r1
 811214c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8112150:	4616      	mov	r6, r2
 8112152:	461f      	mov	r7, r3
 8112154:	4605      	mov	r5, r0
 8112156:	f001 fe35 	bl	8113dc4 <_localeconv_r>
 811215a:	6803      	ldr	r3, [r0, #0]
 811215c:	9304      	str	r3, [sp, #16]
 811215e:	4618      	mov	r0, r3
 8112160:	f7ee f8c8 	bl	81002f4 <strlen>
 8112164:	2300      	movs	r3, #0
 8112166:	930a      	str	r3, [sp, #40]	; 0x28
 8112168:	f8d8 3000 	ldr.w	r3, [r8]
 811216c:	9005      	str	r0, [sp, #20]
 811216e:	3307      	adds	r3, #7
 8112170:	f023 0307 	bic.w	r3, r3, #7
 8112174:	f103 0208 	add.w	r2, r3, #8
 8112178:	f894 a018 	ldrb.w	sl, [r4, #24]
 811217c:	f8d4 b000 	ldr.w	fp, [r4]
 8112180:	f8c8 2000 	str.w	r2, [r8]
 8112184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112188:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 811218c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8112190:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8112194:	9307      	str	r3, [sp, #28]
 8112196:	f8cd 8018 	str.w	r8, [sp, #24]
 811219a:	f04f 32ff 	mov.w	r2, #4294967295
 811219e:	4ba7      	ldr	r3, [pc, #668]	; (811243c <_printf_float+0x2f8>)
 81121a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81121a4:	f7ee fd5a 	bl	8100c5c <__aeabi_dcmpun>
 81121a8:	bb70      	cbnz	r0, 8112208 <_printf_float+0xc4>
 81121aa:	f04f 32ff 	mov.w	r2, #4294967295
 81121ae:	4ba3      	ldr	r3, [pc, #652]	; (811243c <_printf_float+0x2f8>)
 81121b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81121b4:	f7ee fd34 	bl	8100c20 <__aeabi_dcmple>
 81121b8:	bb30      	cbnz	r0, 8112208 <_printf_float+0xc4>
 81121ba:	2200      	movs	r2, #0
 81121bc:	2300      	movs	r3, #0
 81121be:	4640      	mov	r0, r8
 81121c0:	4649      	mov	r1, r9
 81121c2:	f7ee fd23 	bl	8100c0c <__aeabi_dcmplt>
 81121c6:	b110      	cbz	r0, 81121ce <_printf_float+0x8a>
 81121c8:	232d      	movs	r3, #45	; 0x2d
 81121ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81121ce:	4a9c      	ldr	r2, [pc, #624]	; (8112440 <_printf_float+0x2fc>)
 81121d0:	4b9c      	ldr	r3, [pc, #624]	; (8112444 <_printf_float+0x300>)
 81121d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 81121d6:	bf8c      	ite	hi
 81121d8:	4690      	movhi	r8, r2
 81121da:	4698      	movls	r8, r3
 81121dc:	2303      	movs	r3, #3
 81121de:	f02b 0204 	bic.w	r2, fp, #4
 81121e2:	6123      	str	r3, [r4, #16]
 81121e4:	6022      	str	r2, [r4, #0]
 81121e6:	f04f 0900 	mov.w	r9, #0
 81121ea:	9700      	str	r7, [sp, #0]
 81121ec:	4633      	mov	r3, r6
 81121ee:	aa0b      	add	r2, sp, #44	; 0x2c
 81121f0:	4621      	mov	r1, r4
 81121f2:	4628      	mov	r0, r5
 81121f4:	f000 f9e6 	bl	81125c4 <_printf_common>
 81121f8:	3001      	adds	r0, #1
 81121fa:	f040 808d 	bne.w	8112318 <_printf_float+0x1d4>
 81121fe:	f04f 30ff 	mov.w	r0, #4294967295
 8112202:	b00d      	add	sp, #52	; 0x34
 8112204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112208:	4642      	mov	r2, r8
 811220a:	464b      	mov	r3, r9
 811220c:	4640      	mov	r0, r8
 811220e:	4649      	mov	r1, r9
 8112210:	f7ee fd24 	bl	8100c5c <__aeabi_dcmpun>
 8112214:	b110      	cbz	r0, 811221c <_printf_float+0xd8>
 8112216:	4a8c      	ldr	r2, [pc, #560]	; (8112448 <_printf_float+0x304>)
 8112218:	4b8c      	ldr	r3, [pc, #560]	; (811244c <_printf_float+0x308>)
 811221a:	e7da      	b.n	81121d2 <_printf_float+0x8e>
 811221c:	6861      	ldr	r1, [r4, #4]
 811221e:	1c4b      	adds	r3, r1, #1
 8112220:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8112224:	a80a      	add	r0, sp, #40	; 0x28
 8112226:	d13e      	bne.n	81122a6 <_printf_float+0x162>
 8112228:	2306      	movs	r3, #6
 811222a:	6063      	str	r3, [r4, #4]
 811222c:	2300      	movs	r3, #0
 811222e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8112232:	ab09      	add	r3, sp, #36	; 0x24
 8112234:	9300      	str	r3, [sp, #0]
 8112236:	ec49 8b10 	vmov	d0, r8, r9
 811223a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 811223e:	6022      	str	r2, [r4, #0]
 8112240:	f8cd a004 	str.w	sl, [sp, #4]
 8112244:	6861      	ldr	r1, [r4, #4]
 8112246:	4628      	mov	r0, r5
 8112248:	f7ff fee7 	bl	811201a <__cvt>
 811224c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8112250:	2b47      	cmp	r3, #71	; 0x47
 8112252:	4680      	mov	r8, r0
 8112254:	d109      	bne.n	811226a <_printf_float+0x126>
 8112256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8112258:	1cd8      	adds	r0, r3, #3
 811225a:	db02      	blt.n	8112262 <_printf_float+0x11e>
 811225c:	6862      	ldr	r2, [r4, #4]
 811225e:	4293      	cmp	r3, r2
 8112260:	dd47      	ble.n	81122f2 <_printf_float+0x1ae>
 8112262:	f1aa 0a02 	sub.w	sl, sl, #2
 8112266:	fa5f fa8a 	uxtb.w	sl, sl
 811226a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 811226e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8112270:	d824      	bhi.n	81122bc <_printf_float+0x178>
 8112272:	3901      	subs	r1, #1
 8112274:	4652      	mov	r2, sl
 8112276:	f104 0050 	add.w	r0, r4, #80	; 0x50
 811227a:	9109      	str	r1, [sp, #36]	; 0x24
 811227c:	f7ff ff2e 	bl	81120dc <__exponent>
 8112280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8112282:	1813      	adds	r3, r2, r0
 8112284:	2a01      	cmp	r2, #1
 8112286:	4681      	mov	r9, r0
 8112288:	6123      	str	r3, [r4, #16]
 811228a:	dc02      	bgt.n	8112292 <_printf_float+0x14e>
 811228c:	6822      	ldr	r2, [r4, #0]
 811228e:	07d1      	lsls	r1, r2, #31
 8112290:	d501      	bpl.n	8112296 <_printf_float+0x152>
 8112292:	3301      	adds	r3, #1
 8112294:	6123      	str	r3, [r4, #16]
 8112296:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 811229a:	2b00      	cmp	r3, #0
 811229c:	d0a5      	beq.n	81121ea <_printf_float+0xa6>
 811229e:	232d      	movs	r3, #45	; 0x2d
 81122a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81122a4:	e7a1      	b.n	81121ea <_printf_float+0xa6>
 81122a6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 81122aa:	f000 8177 	beq.w	811259c <_printf_float+0x458>
 81122ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 81122b2:	d1bb      	bne.n	811222c <_printf_float+0xe8>
 81122b4:	2900      	cmp	r1, #0
 81122b6:	d1b9      	bne.n	811222c <_printf_float+0xe8>
 81122b8:	2301      	movs	r3, #1
 81122ba:	e7b6      	b.n	811222a <_printf_float+0xe6>
 81122bc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 81122c0:	d119      	bne.n	81122f6 <_printf_float+0x1b2>
 81122c2:	2900      	cmp	r1, #0
 81122c4:	6863      	ldr	r3, [r4, #4]
 81122c6:	dd0c      	ble.n	81122e2 <_printf_float+0x19e>
 81122c8:	6121      	str	r1, [r4, #16]
 81122ca:	b913      	cbnz	r3, 81122d2 <_printf_float+0x18e>
 81122cc:	6822      	ldr	r2, [r4, #0]
 81122ce:	07d2      	lsls	r2, r2, #31
 81122d0:	d502      	bpl.n	81122d8 <_printf_float+0x194>
 81122d2:	3301      	adds	r3, #1
 81122d4:	440b      	add	r3, r1
 81122d6:	6123      	str	r3, [r4, #16]
 81122d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81122da:	65a3      	str	r3, [r4, #88]	; 0x58
 81122dc:	f04f 0900 	mov.w	r9, #0
 81122e0:	e7d9      	b.n	8112296 <_printf_float+0x152>
 81122e2:	b913      	cbnz	r3, 81122ea <_printf_float+0x1a6>
 81122e4:	6822      	ldr	r2, [r4, #0]
 81122e6:	07d0      	lsls	r0, r2, #31
 81122e8:	d501      	bpl.n	81122ee <_printf_float+0x1aa>
 81122ea:	3302      	adds	r3, #2
 81122ec:	e7f3      	b.n	81122d6 <_printf_float+0x192>
 81122ee:	2301      	movs	r3, #1
 81122f0:	e7f1      	b.n	81122d6 <_printf_float+0x192>
 81122f2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 81122f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 81122fa:	4293      	cmp	r3, r2
 81122fc:	db05      	blt.n	811230a <_printf_float+0x1c6>
 81122fe:	6822      	ldr	r2, [r4, #0]
 8112300:	6123      	str	r3, [r4, #16]
 8112302:	07d1      	lsls	r1, r2, #31
 8112304:	d5e8      	bpl.n	81122d8 <_printf_float+0x194>
 8112306:	3301      	adds	r3, #1
 8112308:	e7e5      	b.n	81122d6 <_printf_float+0x192>
 811230a:	2b00      	cmp	r3, #0
 811230c:	bfd4      	ite	le
 811230e:	f1c3 0302 	rsble	r3, r3, #2
 8112312:	2301      	movgt	r3, #1
 8112314:	4413      	add	r3, r2
 8112316:	e7de      	b.n	81122d6 <_printf_float+0x192>
 8112318:	6823      	ldr	r3, [r4, #0]
 811231a:	055a      	lsls	r2, r3, #21
 811231c:	d407      	bmi.n	811232e <_printf_float+0x1ea>
 811231e:	6923      	ldr	r3, [r4, #16]
 8112320:	4642      	mov	r2, r8
 8112322:	4631      	mov	r1, r6
 8112324:	4628      	mov	r0, r5
 8112326:	47b8      	blx	r7
 8112328:	3001      	adds	r0, #1
 811232a:	d12b      	bne.n	8112384 <_printf_float+0x240>
 811232c:	e767      	b.n	81121fe <_printf_float+0xba>
 811232e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8112332:	f240 80dc 	bls.w	81124ee <_printf_float+0x3aa>
 8112336:	2200      	movs	r2, #0
 8112338:	2300      	movs	r3, #0
 811233a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 811233e:	f7ee fc5b 	bl	8100bf8 <__aeabi_dcmpeq>
 8112342:	2800      	cmp	r0, #0
 8112344:	d033      	beq.n	81123ae <_printf_float+0x26a>
 8112346:	2301      	movs	r3, #1
 8112348:	4a41      	ldr	r2, [pc, #260]	; (8112450 <_printf_float+0x30c>)
 811234a:	4631      	mov	r1, r6
 811234c:	4628      	mov	r0, r5
 811234e:	47b8      	blx	r7
 8112350:	3001      	adds	r0, #1
 8112352:	f43f af54 	beq.w	81121fe <_printf_float+0xba>
 8112356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 811235a:	429a      	cmp	r2, r3
 811235c:	db02      	blt.n	8112364 <_printf_float+0x220>
 811235e:	6823      	ldr	r3, [r4, #0]
 8112360:	07d8      	lsls	r0, r3, #31
 8112362:	d50f      	bpl.n	8112384 <_printf_float+0x240>
 8112364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8112368:	4631      	mov	r1, r6
 811236a:	4628      	mov	r0, r5
 811236c:	47b8      	blx	r7
 811236e:	3001      	adds	r0, #1
 8112370:	f43f af45 	beq.w	81121fe <_printf_float+0xba>
 8112374:	f04f 0800 	mov.w	r8, #0
 8112378:	f104 091a 	add.w	r9, r4, #26
 811237c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811237e:	3b01      	subs	r3, #1
 8112380:	4543      	cmp	r3, r8
 8112382:	dc09      	bgt.n	8112398 <_printf_float+0x254>
 8112384:	6823      	ldr	r3, [r4, #0]
 8112386:	079b      	lsls	r3, r3, #30
 8112388:	f100 8103 	bmi.w	8112592 <_printf_float+0x44e>
 811238c:	68e0      	ldr	r0, [r4, #12]
 811238e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8112390:	4298      	cmp	r0, r3
 8112392:	bfb8      	it	lt
 8112394:	4618      	movlt	r0, r3
 8112396:	e734      	b.n	8112202 <_printf_float+0xbe>
 8112398:	2301      	movs	r3, #1
 811239a:	464a      	mov	r2, r9
 811239c:	4631      	mov	r1, r6
 811239e:	4628      	mov	r0, r5
 81123a0:	47b8      	blx	r7
 81123a2:	3001      	adds	r0, #1
 81123a4:	f43f af2b 	beq.w	81121fe <_printf_float+0xba>
 81123a8:	f108 0801 	add.w	r8, r8, #1
 81123ac:	e7e6      	b.n	811237c <_printf_float+0x238>
 81123ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81123b0:	2b00      	cmp	r3, #0
 81123b2:	dc2b      	bgt.n	811240c <_printf_float+0x2c8>
 81123b4:	2301      	movs	r3, #1
 81123b6:	4a26      	ldr	r2, [pc, #152]	; (8112450 <_printf_float+0x30c>)
 81123b8:	4631      	mov	r1, r6
 81123ba:	4628      	mov	r0, r5
 81123bc:	47b8      	blx	r7
 81123be:	3001      	adds	r0, #1
 81123c0:	f43f af1d 	beq.w	81121fe <_printf_float+0xba>
 81123c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81123c6:	b923      	cbnz	r3, 81123d2 <_printf_float+0x28e>
 81123c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81123ca:	b913      	cbnz	r3, 81123d2 <_printf_float+0x28e>
 81123cc:	6823      	ldr	r3, [r4, #0]
 81123ce:	07d9      	lsls	r1, r3, #31
 81123d0:	d5d8      	bpl.n	8112384 <_printf_float+0x240>
 81123d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81123d6:	4631      	mov	r1, r6
 81123d8:	4628      	mov	r0, r5
 81123da:	47b8      	blx	r7
 81123dc:	3001      	adds	r0, #1
 81123de:	f43f af0e 	beq.w	81121fe <_printf_float+0xba>
 81123e2:	f04f 0900 	mov.w	r9, #0
 81123e6:	f104 0a1a 	add.w	sl, r4, #26
 81123ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81123ec:	425b      	negs	r3, r3
 81123ee:	454b      	cmp	r3, r9
 81123f0:	dc01      	bgt.n	81123f6 <_printf_float+0x2b2>
 81123f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81123f4:	e794      	b.n	8112320 <_printf_float+0x1dc>
 81123f6:	2301      	movs	r3, #1
 81123f8:	4652      	mov	r2, sl
 81123fa:	4631      	mov	r1, r6
 81123fc:	4628      	mov	r0, r5
 81123fe:	47b8      	blx	r7
 8112400:	3001      	adds	r0, #1
 8112402:	f43f aefc 	beq.w	81121fe <_printf_float+0xba>
 8112406:	f109 0901 	add.w	r9, r9, #1
 811240a:	e7ee      	b.n	81123ea <_printf_float+0x2a6>
 811240c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 811240e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8112410:	429a      	cmp	r2, r3
 8112412:	bfa8      	it	ge
 8112414:	461a      	movge	r2, r3
 8112416:	2a00      	cmp	r2, #0
 8112418:	4691      	mov	r9, r2
 811241a:	dd07      	ble.n	811242c <_printf_float+0x2e8>
 811241c:	4613      	mov	r3, r2
 811241e:	4631      	mov	r1, r6
 8112420:	4642      	mov	r2, r8
 8112422:	4628      	mov	r0, r5
 8112424:	47b8      	blx	r7
 8112426:	3001      	adds	r0, #1
 8112428:	f43f aee9 	beq.w	81121fe <_printf_float+0xba>
 811242c:	f104 031a 	add.w	r3, r4, #26
 8112430:	f04f 0b00 	mov.w	fp, #0
 8112434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8112438:	9306      	str	r3, [sp, #24]
 811243a:	e015      	b.n	8112468 <_printf_float+0x324>
 811243c:	7fefffff 	.word	0x7fefffff
 8112440:	08115e80 	.word	0x08115e80
 8112444:	08115e7c 	.word	0x08115e7c
 8112448:	08115e88 	.word	0x08115e88
 811244c:	08115e84 	.word	0x08115e84
 8112450:	08115e8c 	.word	0x08115e8c
 8112454:	2301      	movs	r3, #1
 8112456:	9a06      	ldr	r2, [sp, #24]
 8112458:	4631      	mov	r1, r6
 811245a:	4628      	mov	r0, r5
 811245c:	47b8      	blx	r7
 811245e:	3001      	adds	r0, #1
 8112460:	f43f aecd 	beq.w	81121fe <_printf_float+0xba>
 8112464:	f10b 0b01 	add.w	fp, fp, #1
 8112468:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 811246c:	ebaa 0309 	sub.w	r3, sl, r9
 8112470:	455b      	cmp	r3, fp
 8112472:	dcef      	bgt.n	8112454 <_printf_float+0x310>
 8112474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8112478:	429a      	cmp	r2, r3
 811247a:	44d0      	add	r8, sl
 811247c:	db15      	blt.n	81124aa <_printf_float+0x366>
 811247e:	6823      	ldr	r3, [r4, #0]
 8112480:	07da      	lsls	r2, r3, #31
 8112482:	d412      	bmi.n	81124aa <_printf_float+0x366>
 8112484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8112486:	9909      	ldr	r1, [sp, #36]	; 0x24
 8112488:	eba3 020a 	sub.w	r2, r3, sl
 811248c:	eba3 0a01 	sub.w	sl, r3, r1
 8112490:	4592      	cmp	sl, r2
 8112492:	bfa8      	it	ge
 8112494:	4692      	movge	sl, r2
 8112496:	f1ba 0f00 	cmp.w	sl, #0
 811249a:	dc0e      	bgt.n	81124ba <_printf_float+0x376>
 811249c:	f04f 0800 	mov.w	r8, #0
 81124a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 81124a4:	f104 091a 	add.w	r9, r4, #26
 81124a8:	e019      	b.n	81124de <_printf_float+0x39a>
 81124aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81124ae:	4631      	mov	r1, r6
 81124b0:	4628      	mov	r0, r5
 81124b2:	47b8      	blx	r7
 81124b4:	3001      	adds	r0, #1
 81124b6:	d1e5      	bne.n	8112484 <_printf_float+0x340>
 81124b8:	e6a1      	b.n	81121fe <_printf_float+0xba>
 81124ba:	4653      	mov	r3, sl
 81124bc:	4642      	mov	r2, r8
 81124be:	4631      	mov	r1, r6
 81124c0:	4628      	mov	r0, r5
 81124c2:	47b8      	blx	r7
 81124c4:	3001      	adds	r0, #1
 81124c6:	d1e9      	bne.n	811249c <_printf_float+0x358>
 81124c8:	e699      	b.n	81121fe <_printf_float+0xba>
 81124ca:	2301      	movs	r3, #1
 81124cc:	464a      	mov	r2, r9
 81124ce:	4631      	mov	r1, r6
 81124d0:	4628      	mov	r0, r5
 81124d2:	47b8      	blx	r7
 81124d4:	3001      	adds	r0, #1
 81124d6:	f43f ae92 	beq.w	81121fe <_printf_float+0xba>
 81124da:	f108 0801 	add.w	r8, r8, #1
 81124de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81124e2:	1a9b      	subs	r3, r3, r2
 81124e4:	eba3 030a 	sub.w	r3, r3, sl
 81124e8:	4543      	cmp	r3, r8
 81124ea:	dcee      	bgt.n	81124ca <_printf_float+0x386>
 81124ec:	e74a      	b.n	8112384 <_printf_float+0x240>
 81124ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81124f0:	2a01      	cmp	r2, #1
 81124f2:	dc01      	bgt.n	81124f8 <_printf_float+0x3b4>
 81124f4:	07db      	lsls	r3, r3, #31
 81124f6:	d53a      	bpl.n	811256e <_printf_float+0x42a>
 81124f8:	2301      	movs	r3, #1
 81124fa:	4642      	mov	r2, r8
 81124fc:	4631      	mov	r1, r6
 81124fe:	4628      	mov	r0, r5
 8112500:	47b8      	blx	r7
 8112502:	3001      	adds	r0, #1
 8112504:	f43f ae7b 	beq.w	81121fe <_printf_float+0xba>
 8112508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811250c:	4631      	mov	r1, r6
 811250e:	4628      	mov	r0, r5
 8112510:	47b8      	blx	r7
 8112512:	3001      	adds	r0, #1
 8112514:	f108 0801 	add.w	r8, r8, #1
 8112518:	f43f ae71 	beq.w	81121fe <_printf_float+0xba>
 811251c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811251e:	2200      	movs	r2, #0
 8112520:	f103 3aff 	add.w	sl, r3, #4294967295
 8112524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8112528:	2300      	movs	r3, #0
 811252a:	f7ee fb65 	bl	8100bf8 <__aeabi_dcmpeq>
 811252e:	b9c8      	cbnz	r0, 8112564 <_printf_float+0x420>
 8112530:	4653      	mov	r3, sl
 8112532:	4642      	mov	r2, r8
 8112534:	4631      	mov	r1, r6
 8112536:	4628      	mov	r0, r5
 8112538:	47b8      	blx	r7
 811253a:	3001      	adds	r0, #1
 811253c:	d10e      	bne.n	811255c <_printf_float+0x418>
 811253e:	e65e      	b.n	81121fe <_printf_float+0xba>
 8112540:	2301      	movs	r3, #1
 8112542:	4652      	mov	r2, sl
 8112544:	4631      	mov	r1, r6
 8112546:	4628      	mov	r0, r5
 8112548:	47b8      	blx	r7
 811254a:	3001      	adds	r0, #1
 811254c:	f43f ae57 	beq.w	81121fe <_printf_float+0xba>
 8112550:	f108 0801 	add.w	r8, r8, #1
 8112554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8112556:	3b01      	subs	r3, #1
 8112558:	4543      	cmp	r3, r8
 811255a:	dcf1      	bgt.n	8112540 <_printf_float+0x3fc>
 811255c:	464b      	mov	r3, r9
 811255e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8112562:	e6de      	b.n	8112322 <_printf_float+0x1de>
 8112564:	f04f 0800 	mov.w	r8, #0
 8112568:	f104 0a1a 	add.w	sl, r4, #26
 811256c:	e7f2      	b.n	8112554 <_printf_float+0x410>
 811256e:	2301      	movs	r3, #1
 8112570:	e7df      	b.n	8112532 <_printf_float+0x3ee>
 8112572:	2301      	movs	r3, #1
 8112574:	464a      	mov	r2, r9
 8112576:	4631      	mov	r1, r6
 8112578:	4628      	mov	r0, r5
 811257a:	47b8      	blx	r7
 811257c:	3001      	adds	r0, #1
 811257e:	f43f ae3e 	beq.w	81121fe <_printf_float+0xba>
 8112582:	f108 0801 	add.w	r8, r8, #1
 8112586:	68e3      	ldr	r3, [r4, #12]
 8112588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 811258a:	1a9b      	subs	r3, r3, r2
 811258c:	4543      	cmp	r3, r8
 811258e:	dcf0      	bgt.n	8112572 <_printf_float+0x42e>
 8112590:	e6fc      	b.n	811238c <_printf_float+0x248>
 8112592:	f04f 0800 	mov.w	r8, #0
 8112596:	f104 0919 	add.w	r9, r4, #25
 811259a:	e7f4      	b.n	8112586 <_printf_float+0x442>
 811259c:	2900      	cmp	r1, #0
 811259e:	f43f ae8b 	beq.w	81122b8 <_printf_float+0x174>
 81125a2:	2300      	movs	r3, #0
 81125a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 81125a8:	ab09      	add	r3, sp, #36	; 0x24
 81125aa:	9300      	str	r3, [sp, #0]
 81125ac:	ec49 8b10 	vmov	d0, r8, r9
 81125b0:	6022      	str	r2, [r4, #0]
 81125b2:	f8cd a004 	str.w	sl, [sp, #4]
 81125b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81125ba:	4628      	mov	r0, r5
 81125bc:	f7ff fd2d 	bl	811201a <__cvt>
 81125c0:	4680      	mov	r8, r0
 81125c2:	e648      	b.n	8112256 <_printf_float+0x112>

081125c4 <_printf_common>:
 81125c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81125c8:	4691      	mov	r9, r2
 81125ca:	461f      	mov	r7, r3
 81125cc:	688a      	ldr	r2, [r1, #8]
 81125ce:	690b      	ldr	r3, [r1, #16]
 81125d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81125d4:	4293      	cmp	r3, r2
 81125d6:	bfb8      	it	lt
 81125d8:	4613      	movlt	r3, r2
 81125da:	f8c9 3000 	str.w	r3, [r9]
 81125de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81125e2:	4606      	mov	r6, r0
 81125e4:	460c      	mov	r4, r1
 81125e6:	b112      	cbz	r2, 81125ee <_printf_common+0x2a>
 81125e8:	3301      	adds	r3, #1
 81125ea:	f8c9 3000 	str.w	r3, [r9]
 81125ee:	6823      	ldr	r3, [r4, #0]
 81125f0:	0699      	lsls	r1, r3, #26
 81125f2:	bf42      	ittt	mi
 81125f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 81125f8:	3302      	addmi	r3, #2
 81125fa:	f8c9 3000 	strmi.w	r3, [r9]
 81125fe:	6825      	ldr	r5, [r4, #0]
 8112600:	f015 0506 	ands.w	r5, r5, #6
 8112604:	d107      	bne.n	8112616 <_printf_common+0x52>
 8112606:	f104 0a19 	add.w	sl, r4, #25
 811260a:	68e3      	ldr	r3, [r4, #12]
 811260c:	f8d9 2000 	ldr.w	r2, [r9]
 8112610:	1a9b      	subs	r3, r3, r2
 8112612:	42ab      	cmp	r3, r5
 8112614:	dc28      	bgt.n	8112668 <_printf_common+0xa4>
 8112616:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 811261a:	6822      	ldr	r2, [r4, #0]
 811261c:	3300      	adds	r3, #0
 811261e:	bf18      	it	ne
 8112620:	2301      	movne	r3, #1
 8112622:	0692      	lsls	r2, r2, #26
 8112624:	d42d      	bmi.n	8112682 <_printf_common+0xbe>
 8112626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 811262a:	4639      	mov	r1, r7
 811262c:	4630      	mov	r0, r6
 811262e:	47c0      	blx	r8
 8112630:	3001      	adds	r0, #1
 8112632:	d020      	beq.n	8112676 <_printf_common+0xb2>
 8112634:	6823      	ldr	r3, [r4, #0]
 8112636:	68e5      	ldr	r5, [r4, #12]
 8112638:	f8d9 2000 	ldr.w	r2, [r9]
 811263c:	f003 0306 	and.w	r3, r3, #6
 8112640:	2b04      	cmp	r3, #4
 8112642:	bf08      	it	eq
 8112644:	1aad      	subeq	r5, r5, r2
 8112646:	68a3      	ldr	r3, [r4, #8]
 8112648:	6922      	ldr	r2, [r4, #16]
 811264a:	bf0c      	ite	eq
 811264c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8112650:	2500      	movne	r5, #0
 8112652:	4293      	cmp	r3, r2
 8112654:	bfc4      	itt	gt
 8112656:	1a9b      	subgt	r3, r3, r2
 8112658:	18ed      	addgt	r5, r5, r3
 811265a:	f04f 0900 	mov.w	r9, #0
 811265e:	341a      	adds	r4, #26
 8112660:	454d      	cmp	r5, r9
 8112662:	d11a      	bne.n	811269a <_printf_common+0xd6>
 8112664:	2000      	movs	r0, #0
 8112666:	e008      	b.n	811267a <_printf_common+0xb6>
 8112668:	2301      	movs	r3, #1
 811266a:	4652      	mov	r2, sl
 811266c:	4639      	mov	r1, r7
 811266e:	4630      	mov	r0, r6
 8112670:	47c0      	blx	r8
 8112672:	3001      	adds	r0, #1
 8112674:	d103      	bne.n	811267e <_printf_common+0xba>
 8112676:	f04f 30ff 	mov.w	r0, #4294967295
 811267a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811267e:	3501      	adds	r5, #1
 8112680:	e7c3      	b.n	811260a <_printf_common+0x46>
 8112682:	18e1      	adds	r1, r4, r3
 8112684:	1c5a      	adds	r2, r3, #1
 8112686:	2030      	movs	r0, #48	; 0x30
 8112688:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 811268c:	4422      	add	r2, r4
 811268e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8112692:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8112696:	3302      	adds	r3, #2
 8112698:	e7c5      	b.n	8112626 <_printf_common+0x62>
 811269a:	2301      	movs	r3, #1
 811269c:	4622      	mov	r2, r4
 811269e:	4639      	mov	r1, r7
 81126a0:	4630      	mov	r0, r6
 81126a2:	47c0      	blx	r8
 81126a4:	3001      	adds	r0, #1
 81126a6:	d0e6      	beq.n	8112676 <_printf_common+0xb2>
 81126a8:	f109 0901 	add.w	r9, r9, #1
 81126ac:	e7d8      	b.n	8112660 <_printf_common+0x9c>
	...

081126b0 <_printf_i>:
 81126b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81126b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 81126b8:	460c      	mov	r4, r1
 81126ba:	7e09      	ldrb	r1, [r1, #24]
 81126bc:	b085      	sub	sp, #20
 81126be:	296e      	cmp	r1, #110	; 0x6e
 81126c0:	4617      	mov	r7, r2
 81126c2:	4606      	mov	r6, r0
 81126c4:	4698      	mov	r8, r3
 81126c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81126c8:	f000 80b3 	beq.w	8112832 <_printf_i+0x182>
 81126cc:	d822      	bhi.n	8112714 <_printf_i+0x64>
 81126ce:	2963      	cmp	r1, #99	; 0x63
 81126d0:	d036      	beq.n	8112740 <_printf_i+0x90>
 81126d2:	d80a      	bhi.n	81126ea <_printf_i+0x3a>
 81126d4:	2900      	cmp	r1, #0
 81126d6:	f000 80b9 	beq.w	811284c <_printf_i+0x19c>
 81126da:	2958      	cmp	r1, #88	; 0x58
 81126dc:	f000 8083 	beq.w	81127e6 <_printf_i+0x136>
 81126e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81126e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 81126e8:	e032      	b.n	8112750 <_printf_i+0xa0>
 81126ea:	2964      	cmp	r1, #100	; 0x64
 81126ec:	d001      	beq.n	81126f2 <_printf_i+0x42>
 81126ee:	2969      	cmp	r1, #105	; 0x69
 81126f0:	d1f6      	bne.n	81126e0 <_printf_i+0x30>
 81126f2:	6820      	ldr	r0, [r4, #0]
 81126f4:	6813      	ldr	r3, [r2, #0]
 81126f6:	0605      	lsls	r5, r0, #24
 81126f8:	f103 0104 	add.w	r1, r3, #4
 81126fc:	d52a      	bpl.n	8112754 <_printf_i+0xa4>
 81126fe:	681b      	ldr	r3, [r3, #0]
 8112700:	6011      	str	r1, [r2, #0]
 8112702:	2b00      	cmp	r3, #0
 8112704:	da03      	bge.n	811270e <_printf_i+0x5e>
 8112706:	222d      	movs	r2, #45	; 0x2d
 8112708:	425b      	negs	r3, r3
 811270a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 811270e:	486f      	ldr	r0, [pc, #444]	; (81128cc <_printf_i+0x21c>)
 8112710:	220a      	movs	r2, #10
 8112712:	e039      	b.n	8112788 <_printf_i+0xd8>
 8112714:	2973      	cmp	r1, #115	; 0x73
 8112716:	f000 809d 	beq.w	8112854 <_printf_i+0x1a4>
 811271a:	d808      	bhi.n	811272e <_printf_i+0x7e>
 811271c:	296f      	cmp	r1, #111	; 0x6f
 811271e:	d020      	beq.n	8112762 <_printf_i+0xb2>
 8112720:	2970      	cmp	r1, #112	; 0x70
 8112722:	d1dd      	bne.n	81126e0 <_printf_i+0x30>
 8112724:	6823      	ldr	r3, [r4, #0]
 8112726:	f043 0320 	orr.w	r3, r3, #32
 811272a:	6023      	str	r3, [r4, #0]
 811272c:	e003      	b.n	8112736 <_printf_i+0x86>
 811272e:	2975      	cmp	r1, #117	; 0x75
 8112730:	d017      	beq.n	8112762 <_printf_i+0xb2>
 8112732:	2978      	cmp	r1, #120	; 0x78
 8112734:	d1d4      	bne.n	81126e0 <_printf_i+0x30>
 8112736:	2378      	movs	r3, #120	; 0x78
 8112738:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 811273c:	4864      	ldr	r0, [pc, #400]	; (81128d0 <_printf_i+0x220>)
 811273e:	e055      	b.n	81127ec <_printf_i+0x13c>
 8112740:	6813      	ldr	r3, [r2, #0]
 8112742:	1d19      	adds	r1, r3, #4
 8112744:	681b      	ldr	r3, [r3, #0]
 8112746:	6011      	str	r1, [r2, #0]
 8112748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 811274c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8112750:	2301      	movs	r3, #1
 8112752:	e08c      	b.n	811286e <_printf_i+0x1be>
 8112754:	681b      	ldr	r3, [r3, #0]
 8112756:	6011      	str	r1, [r2, #0]
 8112758:	f010 0f40 	tst.w	r0, #64	; 0x40
 811275c:	bf18      	it	ne
 811275e:	b21b      	sxthne	r3, r3
 8112760:	e7cf      	b.n	8112702 <_printf_i+0x52>
 8112762:	6813      	ldr	r3, [r2, #0]
 8112764:	6825      	ldr	r5, [r4, #0]
 8112766:	1d18      	adds	r0, r3, #4
 8112768:	6010      	str	r0, [r2, #0]
 811276a:	0628      	lsls	r0, r5, #24
 811276c:	d501      	bpl.n	8112772 <_printf_i+0xc2>
 811276e:	681b      	ldr	r3, [r3, #0]
 8112770:	e002      	b.n	8112778 <_printf_i+0xc8>
 8112772:	0668      	lsls	r0, r5, #25
 8112774:	d5fb      	bpl.n	811276e <_printf_i+0xbe>
 8112776:	881b      	ldrh	r3, [r3, #0]
 8112778:	4854      	ldr	r0, [pc, #336]	; (81128cc <_printf_i+0x21c>)
 811277a:	296f      	cmp	r1, #111	; 0x6f
 811277c:	bf14      	ite	ne
 811277e:	220a      	movne	r2, #10
 8112780:	2208      	moveq	r2, #8
 8112782:	2100      	movs	r1, #0
 8112784:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8112788:	6865      	ldr	r5, [r4, #4]
 811278a:	60a5      	str	r5, [r4, #8]
 811278c:	2d00      	cmp	r5, #0
 811278e:	f2c0 8095 	blt.w	81128bc <_printf_i+0x20c>
 8112792:	6821      	ldr	r1, [r4, #0]
 8112794:	f021 0104 	bic.w	r1, r1, #4
 8112798:	6021      	str	r1, [r4, #0]
 811279a:	2b00      	cmp	r3, #0
 811279c:	d13d      	bne.n	811281a <_printf_i+0x16a>
 811279e:	2d00      	cmp	r5, #0
 81127a0:	f040 808e 	bne.w	81128c0 <_printf_i+0x210>
 81127a4:	4665      	mov	r5, ip
 81127a6:	2a08      	cmp	r2, #8
 81127a8:	d10b      	bne.n	81127c2 <_printf_i+0x112>
 81127aa:	6823      	ldr	r3, [r4, #0]
 81127ac:	07db      	lsls	r3, r3, #31
 81127ae:	d508      	bpl.n	81127c2 <_printf_i+0x112>
 81127b0:	6923      	ldr	r3, [r4, #16]
 81127b2:	6862      	ldr	r2, [r4, #4]
 81127b4:	429a      	cmp	r2, r3
 81127b6:	bfde      	ittt	le
 81127b8:	2330      	movle	r3, #48	; 0x30
 81127ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 81127be:	f105 35ff 	addle.w	r5, r5, #4294967295
 81127c2:	ebac 0305 	sub.w	r3, ip, r5
 81127c6:	6123      	str	r3, [r4, #16]
 81127c8:	f8cd 8000 	str.w	r8, [sp]
 81127cc:	463b      	mov	r3, r7
 81127ce:	aa03      	add	r2, sp, #12
 81127d0:	4621      	mov	r1, r4
 81127d2:	4630      	mov	r0, r6
 81127d4:	f7ff fef6 	bl	81125c4 <_printf_common>
 81127d8:	3001      	adds	r0, #1
 81127da:	d14d      	bne.n	8112878 <_printf_i+0x1c8>
 81127dc:	f04f 30ff 	mov.w	r0, #4294967295
 81127e0:	b005      	add	sp, #20
 81127e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81127e6:	4839      	ldr	r0, [pc, #228]	; (81128cc <_printf_i+0x21c>)
 81127e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 81127ec:	6813      	ldr	r3, [r2, #0]
 81127ee:	6821      	ldr	r1, [r4, #0]
 81127f0:	1d1d      	adds	r5, r3, #4
 81127f2:	681b      	ldr	r3, [r3, #0]
 81127f4:	6015      	str	r5, [r2, #0]
 81127f6:	060a      	lsls	r2, r1, #24
 81127f8:	d50b      	bpl.n	8112812 <_printf_i+0x162>
 81127fa:	07ca      	lsls	r2, r1, #31
 81127fc:	bf44      	itt	mi
 81127fe:	f041 0120 	orrmi.w	r1, r1, #32
 8112802:	6021      	strmi	r1, [r4, #0]
 8112804:	b91b      	cbnz	r3, 811280e <_printf_i+0x15e>
 8112806:	6822      	ldr	r2, [r4, #0]
 8112808:	f022 0220 	bic.w	r2, r2, #32
 811280c:	6022      	str	r2, [r4, #0]
 811280e:	2210      	movs	r2, #16
 8112810:	e7b7      	b.n	8112782 <_printf_i+0xd2>
 8112812:	064d      	lsls	r5, r1, #25
 8112814:	bf48      	it	mi
 8112816:	b29b      	uxthmi	r3, r3
 8112818:	e7ef      	b.n	81127fa <_printf_i+0x14a>
 811281a:	4665      	mov	r5, ip
 811281c:	fbb3 f1f2 	udiv	r1, r3, r2
 8112820:	fb02 3311 	mls	r3, r2, r1, r3
 8112824:	5cc3      	ldrb	r3, [r0, r3]
 8112826:	f805 3d01 	strb.w	r3, [r5, #-1]!
 811282a:	460b      	mov	r3, r1
 811282c:	2900      	cmp	r1, #0
 811282e:	d1f5      	bne.n	811281c <_printf_i+0x16c>
 8112830:	e7b9      	b.n	81127a6 <_printf_i+0xf6>
 8112832:	6813      	ldr	r3, [r2, #0]
 8112834:	6825      	ldr	r5, [r4, #0]
 8112836:	6961      	ldr	r1, [r4, #20]
 8112838:	1d18      	adds	r0, r3, #4
 811283a:	6010      	str	r0, [r2, #0]
 811283c:	0628      	lsls	r0, r5, #24
 811283e:	681b      	ldr	r3, [r3, #0]
 8112840:	d501      	bpl.n	8112846 <_printf_i+0x196>
 8112842:	6019      	str	r1, [r3, #0]
 8112844:	e002      	b.n	811284c <_printf_i+0x19c>
 8112846:	066a      	lsls	r2, r5, #25
 8112848:	d5fb      	bpl.n	8112842 <_printf_i+0x192>
 811284a:	8019      	strh	r1, [r3, #0]
 811284c:	2300      	movs	r3, #0
 811284e:	6123      	str	r3, [r4, #16]
 8112850:	4665      	mov	r5, ip
 8112852:	e7b9      	b.n	81127c8 <_printf_i+0x118>
 8112854:	6813      	ldr	r3, [r2, #0]
 8112856:	1d19      	adds	r1, r3, #4
 8112858:	6011      	str	r1, [r2, #0]
 811285a:	681d      	ldr	r5, [r3, #0]
 811285c:	6862      	ldr	r2, [r4, #4]
 811285e:	2100      	movs	r1, #0
 8112860:	4628      	mov	r0, r5
 8112862:	f7ed fd55 	bl	8100310 <memchr>
 8112866:	b108      	cbz	r0, 811286c <_printf_i+0x1bc>
 8112868:	1b40      	subs	r0, r0, r5
 811286a:	6060      	str	r0, [r4, #4]
 811286c:	6863      	ldr	r3, [r4, #4]
 811286e:	6123      	str	r3, [r4, #16]
 8112870:	2300      	movs	r3, #0
 8112872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8112876:	e7a7      	b.n	81127c8 <_printf_i+0x118>
 8112878:	6923      	ldr	r3, [r4, #16]
 811287a:	462a      	mov	r2, r5
 811287c:	4639      	mov	r1, r7
 811287e:	4630      	mov	r0, r6
 8112880:	47c0      	blx	r8
 8112882:	3001      	adds	r0, #1
 8112884:	d0aa      	beq.n	81127dc <_printf_i+0x12c>
 8112886:	6823      	ldr	r3, [r4, #0]
 8112888:	079b      	lsls	r3, r3, #30
 811288a:	d413      	bmi.n	81128b4 <_printf_i+0x204>
 811288c:	68e0      	ldr	r0, [r4, #12]
 811288e:	9b03      	ldr	r3, [sp, #12]
 8112890:	4298      	cmp	r0, r3
 8112892:	bfb8      	it	lt
 8112894:	4618      	movlt	r0, r3
 8112896:	e7a3      	b.n	81127e0 <_printf_i+0x130>
 8112898:	2301      	movs	r3, #1
 811289a:	464a      	mov	r2, r9
 811289c:	4639      	mov	r1, r7
 811289e:	4630      	mov	r0, r6
 81128a0:	47c0      	blx	r8
 81128a2:	3001      	adds	r0, #1
 81128a4:	d09a      	beq.n	81127dc <_printf_i+0x12c>
 81128a6:	3501      	adds	r5, #1
 81128a8:	68e3      	ldr	r3, [r4, #12]
 81128aa:	9a03      	ldr	r2, [sp, #12]
 81128ac:	1a9b      	subs	r3, r3, r2
 81128ae:	42ab      	cmp	r3, r5
 81128b0:	dcf2      	bgt.n	8112898 <_printf_i+0x1e8>
 81128b2:	e7eb      	b.n	811288c <_printf_i+0x1dc>
 81128b4:	2500      	movs	r5, #0
 81128b6:	f104 0919 	add.w	r9, r4, #25
 81128ba:	e7f5      	b.n	81128a8 <_printf_i+0x1f8>
 81128bc:	2b00      	cmp	r3, #0
 81128be:	d1ac      	bne.n	811281a <_printf_i+0x16a>
 81128c0:	7803      	ldrb	r3, [r0, #0]
 81128c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81128c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81128ca:	e76c      	b.n	81127a6 <_printf_i+0xf6>
 81128cc:	08115e8e 	.word	0x08115e8e
 81128d0:	08115e9f 	.word	0x08115e9f

081128d4 <iprintf>:
 81128d4:	b40f      	push	{r0, r1, r2, r3}
 81128d6:	4b0a      	ldr	r3, [pc, #40]	; (8112900 <iprintf+0x2c>)
 81128d8:	b513      	push	{r0, r1, r4, lr}
 81128da:	681c      	ldr	r4, [r3, #0]
 81128dc:	b124      	cbz	r4, 81128e8 <iprintf+0x14>
 81128de:	69a3      	ldr	r3, [r4, #24]
 81128e0:	b913      	cbnz	r3, 81128e8 <iprintf+0x14>
 81128e2:	4620      	mov	r0, r4
 81128e4:	f001 f9e0 	bl	8113ca8 <__sinit>
 81128e8:	ab05      	add	r3, sp, #20
 81128ea:	9a04      	ldr	r2, [sp, #16]
 81128ec:	68a1      	ldr	r1, [r4, #8]
 81128ee:	9301      	str	r3, [sp, #4]
 81128f0:	4620      	mov	r0, r4
 81128f2:	f002 f801 	bl	81148f8 <_vfiprintf_r>
 81128f6:	b002      	add	sp, #8
 81128f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81128fc:	b004      	add	sp, #16
 81128fe:	4770      	bx	lr
 8112900:	10000040 	.word	0x10000040

08112904 <_puts_r>:
 8112904:	b570      	push	{r4, r5, r6, lr}
 8112906:	460e      	mov	r6, r1
 8112908:	4605      	mov	r5, r0
 811290a:	b118      	cbz	r0, 8112914 <_puts_r+0x10>
 811290c:	6983      	ldr	r3, [r0, #24]
 811290e:	b90b      	cbnz	r3, 8112914 <_puts_r+0x10>
 8112910:	f001 f9ca 	bl	8113ca8 <__sinit>
 8112914:	69ab      	ldr	r3, [r5, #24]
 8112916:	68ac      	ldr	r4, [r5, #8]
 8112918:	b913      	cbnz	r3, 8112920 <_puts_r+0x1c>
 811291a:	4628      	mov	r0, r5
 811291c:	f001 f9c4 	bl	8113ca8 <__sinit>
 8112920:	4b23      	ldr	r3, [pc, #140]	; (81129b0 <_puts_r+0xac>)
 8112922:	429c      	cmp	r4, r3
 8112924:	d117      	bne.n	8112956 <_puts_r+0x52>
 8112926:	686c      	ldr	r4, [r5, #4]
 8112928:	89a3      	ldrh	r3, [r4, #12]
 811292a:	071b      	lsls	r3, r3, #28
 811292c:	d51d      	bpl.n	811296a <_puts_r+0x66>
 811292e:	6923      	ldr	r3, [r4, #16]
 8112930:	b1db      	cbz	r3, 811296a <_puts_r+0x66>
 8112932:	3e01      	subs	r6, #1
 8112934:	68a3      	ldr	r3, [r4, #8]
 8112936:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 811293a:	3b01      	subs	r3, #1
 811293c:	60a3      	str	r3, [r4, #8]
 811293e:	b9e9      	cbnz	r1, 811297c <_puts_r+0x78>
 8112940:	2b00      	cmp	r3, #0
 8112942:	da2e      	bge.n	81129a2 <_puts_r+0x9e>
 8112944:	4622      	mov	r2, r4
 8112946:	210a      	movs	r1, #10
 8112948:	4628      	mov	r0, r5
 811294a:	f000 f955 	bl	8112bf8 <__swbuf_r>
 811294e:	3001      	adds	r0, #1
 8112950:	d011      	beq.n	8112976 <_puts_r+0x72>
 8112952:	200a      	movs	r0, #10
 8112954:	e011      	b.n	811297a <_puts_r+0x76>
 8112956:	4b17      	ldr	r3, [pc, #92]	; (81129b4 <_puts_r+0xb0>)
 8112958:	429c      	cmp	r4, r3
 811295a:	d101      	bne.n	8112960 <_puts_r+0x5c>
 811295c:	68ac      	ldr	r4, [r5, #8]
 811295e:	e7e3      	b.n	8112928 <_puts_r+0x24>
 8112960:	4b15      	ldr	r3, [pc, #84]	; (81129b8 <_puts_r+0xb4>)
 8112962:	429c      	cmp	r4, r3
 8112964:	bf08      	it	eq
 8112966:	68ec      	ldreq	r4, [r5, #12]
 8112968:	e7de      	b.n	8112928 <_puts_r+0x24>
 811296a:	4621      	mov	r1, r4
 811296c:	4628      	mov	r0, r5
 811296e:	f000 f995 	bl	8112c9c <__swsetup_r>
 8112972:	2800      	cmp	r0, #0
 8112974:	d0dd      	beq.n	8112932 <_puts_r+0x2e>
 8112976:	f04f 30ff 	mov.w	r0, #4294967295
 811297a:	bd70      	pop	{r4, r5, r6, pc}
 811297c:	2b00      	cmp	r3, #0
 811297e:	da04      	bge.n	811298a <_puts_r+0x86>
 8112980:	69a2      	ldr	r2, [r4, #24]
 8112982:	429a      	cmp	r2, r3
 8112984:	dc06      	bgt.n	8112994 <_puts_r+0x90>
 8112986:	290a      	cmp	r1, #10
 8112988:	d004      	beq.n	8112994 <_puts_r+0x90>
 811298a:	6823      	ldr	r3, [r4, #0]
 811298c:	1c5a      	adds	r2, r3, #1
 811298e:	6022      	str	r2, [r4, #0]
 8112990:	7019      	strb	r1, [r3, #0]
 8112992:	e7cf      	b.n	8112934 <_puts_r+0x30>
 8112994:	4622      	mov	r2, r4
 8112996:	4628      	mov	r0, r5
 8112998:	f000 f92e 	bl	8112bf8 <__swbuf_r>
 811299c:	3001      	adds	r0, #1
 811299e:	d1c9      	bne.n	8112934 <_puts_r+0x30>
 81129a0:	e7e9      	b.n	8112976 <_puts_r+0x72>
 81129a2:	6823      	ldr	r3, [r4, #0]
 81129a4:	200a      	movs	r0, #10
 81129a6:	1c5a      	adds	r2, r3, #1
 81129a8:	6022      	str	r2, [r4, #0]
 81129aa:	7018      	strb	r0, [r3, #0]
 81129ac:	e7e5      	b.n	811297a <_puts_r+0x76>
 81129ae:	bf00      	nop
 81129b0:	08115ee0 	.word	0x08115ee0
 81129b4:	08115f00 	.word	0x08115f00
 81129b8:	08115ec0 	.word	0x08115ec0

081129bc <puts>:
 81129bc:	4b02      	ldr	r3, [pc, #8]	; (81129c8 <puts+0xc>)
 81129be:	4601      	mov	r1, r0
 81129c0:	6818      	ldr	r0, [r3, #0]
 81129c2:	f7ff bf9f 	b.w	8112904 <_puts_r>
 81129c6:	bf00      	nop
 81129c8:	10000040 	.word	0x10000040

081129cc <_raise_r>:
 81129cc:	291f      	cmp	r1, #31
 81129ce:	b538      	push	{r3, r4, r5, lr}
 81129d0:	4604      	mov	r4, r0
 81129d2:	460d      	mov	r5, r1
 81129d4:	d904      	bls.n	81129e0 <_raise_r+0x14>
 81129d6:	2316      	movs	r3, #22
 81129d8:	6003      	str	r3, [r0, #0]
 81129da:	f04f 30ff 	mov.w	r0, #4294967295
 81129de:	bd38      	pop	{r3, r4, r5, pc}
 81129e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 81129e2:	b112      	cbz	r2, 81129ea <_raise_r+0x1e>
 81129e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 81129e8:	b94b      	cbnz	r3, 81129fe <_raise_r+0x32>
 81129ea:	4620      	mov	r0, r4
 81129ec:	f000 f830 	bl	8112a50 <_getpid_r>
 81129f0:	462a      	mov	r2, r5
 81129f2:	4601      	mov	r1, r0
 81129f4:	4620      	mov	r0, r4
 81129f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81129fa:	f000 b817 	b.w	8112a2c <_kill_r>
 81129fe:	2b01      	cmp	r3, #1
 8112a00:	d00a      	beq.n	8112a18 <_raise_r+0x4c>
 8112a02:	1c59      	adds	r1, r3, #1
 8112a04:	d103      	bne.n	8112a0e <_raise_r+0x42>
 8112a06:	2316      	movs	r3, #22
 8112a08:	6003      	str	r3, [r0, #0]
 8112a0a:	2001      	movs	r0, #1
 8112a0c:	e7e7      	b.n	81129de <_raise_r+0x12>
 8112a0e:	2400      	movs	r4, #0
 8112a10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8112a14:	4628      	mov	r0, r5
 8112a16:	4798      	blx	r3
 8112a18:	2000      	movs	r0, #0
 8112a1a:	e7e0      	b.n	81129de <_raise_r+0x12>

08112a1c <raise>:
 8112a1c:	4b02      	ldr	r3, [pc, #8]	; (8112a28 <raise+0xc>)
 8112a1e:	4601      	mov	r1, r0
 8112a20:	6818      	ldr	r0, [r3, #0]
 8112a22:	f7ff bfd3 	b.w	81129cc <_raise_r>
 8112a26:	bf00      	nop
 8112a28:	10000040 	.word	0x10000040

08112a2c <_kill_r>:
 8112a2c:	b538      	push	{r3, r4, r5, lr}
 8112a2e:	4c07      	ldr	r4, [pc, #28]	; (8112a4c <_kill_r+0x20>)
 8112a30:	2300      	movs	r3, #0
 8112a32:	4605      	mov	r5, r0
 8112a34:	4608      	mov	r0, r1
 8112a36:	4611      	mov	r1, r2
 8112a38:	6023      	str	r3, [r4, #0]
 8112a3a:	f7ef fa0f 	bl	8101e5c <_kill>
 8112a3e:	1c43      	adds	r3, r0, #1
 8112a40:	d102      	bne.n	8112a48 <_kill_r+0x1c>
 8112a42:	6823      	ldr	r3, [r4, #0]
 8112a44:	b103      	cbz	r3, 8112a48 <_kill_r+0x1c>
 8112a46:	602b      	str	r3, [r5, #0]
 8112a48:	bd38      	pop	{r3, r4, r5, pc}
 8112a4a:	bf00      	nop
 8112a4c:	1000e780 	.word	0x1000e780

08112a50 <_getpid_r>:
 8112a50:	f7ef b9fc 	b.w	8101e4c <_getpid>

08112a54 <siprintf>:
 8112a54:	b40e      	push	{r1, r2, r3}
 8112a56:	b500      	push	{lr}
 8112a58:	b09c      	sub	sp, #112	; 0x70
 8112a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8112a5c:	9002      	str	r0, [sp, #8]
 8112a5e:	9006      	str	r0, [sp, #24]
 8112a60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8112a64:	4809      	ldr	r0, [pc, #36]	; (8112a8c <siprintf+0x38>)
 8112a66:	9107      	str	r1, [sp, #28]
 8112a68:	9104      	str	r1, [sp, #16]
 8112a6a:	4909      	ldr	r1, [pc, #36]	; (8112a90 <siprintf+0x3c>)
 8112a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8112a70:	9105      	str	r1, [sp, #20]
 8112a72:	6800      	ldr	r0, [r0, #0]
 8112a74:	9301      	str	r3, [sp, #4]
 8112a76:	a902      	add	r1, sp, #8
 8112a78:	f001 fe1c 	bl	81146b4 <_svfiprintf_r>
 8112a7c:	9b02      	ldr	r3, [sp, #8]
 8112a7e:	2200      	movs	r2, #0
 8112a80:	701a      	strb	r2, [r3, #0]
 8112a82:	b01c      	add	sp, #112	; 0x70
 8112a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8112a88:	b003      	add	sp, #12
 8112a8a:	4770      	bx	lr
 8112a8c:	10000040 	.word	0x10000040
 8112a90:	ffff0208 	.word	0xffff0208

08112a94 <_strtol_l.isra.0>:
 8112a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8112a98:	4680      	mov	r8, r0
 8112a9a:	4689      	mov	r9, r1
 8112a9c:	4692      	mov	sl, r2
 8112a9e:	461e      	mov	r6, r3
 8112aa0:	460f      	mov	r7, r1
 8112aa2:	463d      	mov	r5, r7
 8112aa4:	9808      	ldr	r0, [sp, #32]
 8112aa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8112aaa:	f001 f987 	bl	8113dbc <__locale_ctype_ptr_l>
 8112aae:	4420      	add	r0, r4
 8112ab0:	7843      	ldrb	r3, [r0, #1]
 8112ab2:	f013 0308 	ands.w	r3, r3, #8
 8112ab6:	d132      	bne.n	8112b1e <_strtol_l.isra.0+0x8a>
 8112ab8:	2c2d      	cmp	r4, #45	; 0x2d
 8112aba:	d132      	bne.n	8112b22 <_strtol_l.isra.0+0x8e>
 8112abc:	787c      	ldrb	r4, [r7, #1]
 8112abe:	1cbd      	adds	r5, r7, #2
 8112ac0:	2201      	movs	r2, #1
 8112ac2:	2e00      	cmp	r6, #0
 8112ac4:	d05d      	beq.n	8112b82 <_strtol_l.isra.0+0xee>
 8112ac6:	2e10      	cmp	r6, #16
 8112ac8:	d109      	bne.n	8112ade <_strtol_l.isra.0+0x4a>
 8112aca:	2c30      	cmp	r4, #48	; 0x30
 8112acc:	d107      	bne.n	8112ade <_strtol_l.isra.0+0x4a>
 8112ace:	782b      	ldrb	r3, [r5, #0]
 8112ad0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8112ad4:	2b58      	cmp	r3, #88	; 0x58
 8112ad6:	d14f      	bne.n	8112b78 <_strtol_l.isra.0+0xe4>
 8112ad8:	786c      	ldrb	r4, [r5, #1]
 8112ada:	2610      	movs	r6, #16
 8112adc:	3502      	adds	r5, #2
 8112ade:	2a00      	cmp	r2, #0
 8112ae0:	bf14      	ite	ne
 8112ae2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8112ae6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8112aea:	2700      	movs	r7, #0
 8112aec:	fbb1 fcf6 	udiv	ip, r1, r6
 8112af0:	4638      	mov	r0, r7
 8112af2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8112af6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8112afa:	2b09      	cmp	r3, #9
 8112afc:	d817      	bhi.n	8112b2e <_strtol_l.isra.0+0x9a>
 8112afe:	461c      	mov	r4, r3
 8112b00:	42a6      	cmp	r6, r4
 8112b02:	dd23      	ble.n	8112b4c <_strtol_l.isra.0+0xb8>
 8112b04:	1c7b      	adds	r3, r7, #1
 8112b06:	d007      	beq.n	8112b18 <_strtol_l.isra.0+0x84>
 8112b08:	4584      	cmp	ip, r0
 8112b0a:	d31c      	bcc.n	8112b46 <_strtol_l.isra.0+0xb2>
 8112b0c:	d101      	bne.n	8112b12 <_strtol_l.isra.0+0x7e>
 8112b0e:	45a6      	cmp	lr, r4
 8112b10:	db19      	blt.n	8112b46 <_strtol_l.isra.0+0xb2>
 8112b12:	fb00 4006 	mla	r0, r0, r6, r4
 8112b16:	2701      	movs	r7, #1
 8112b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8112b1c:	e7eb      	b.n	8112af6 <_strtol_l.isra.0+0x62>
 8112b1e:	462f      	mov	r7, r5
 8112b20:	e7bf      	b.n	8112aa2 <_strtol_l.isra.0+0xe>
 8112b22:	2c2b      	cmp	r4, #43	; 0x2b
 8112b24:	bf04      	itt	eq
 8112b26:	1cbd      	addeq	r5, r7, #2
 8112b28:	787c      	ldrbeq	r4, [r7, #1]
 8112b2a:	461a      	mov	r2, r3
 8112b2c:	e7c9      	b.n	8112ac2 <_strtol_l.isra.0+0x2e>
 8112b2e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8112b32:	2b19      	cmp	r3, #25
 8112b34:	d801      	bhi.n	8112b3a <_strtol_l.isra.0+0xa6>
 8112b36:	3c37      	subs	r4, #55	; 0x37
 8112b38:	e7e2      	b.n	8112b00 <_strtol_l.isra.0+0x6c>
 8112b3a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8112b3e:	2b19      	cmp	r3, #25
 8112b40:	d804      	bhi.n	8112b4c <_strtol_l.isra.0+0xb8>
 8112b42:	3c57      	subs	r4, #87	; 0x57
 8112b44:	e7dc      	b.n	8112b00 <_strtol_l.isra.0+0x6c>
 8112b46:	f04f 37ff 	mov.w	r7, #4294967295
 8112b4a:	e7e5      	b.n	8112b18 <_strtol_l.isra.0+0x84>
 8112b4c:	1c7b      	adds	r3, r7, #1
 8112b4e:	d108      	bne.n	8112b62 <_strtol_l.isra.0+0xce>
 8112b50:	2322      	movs	r3, #34	; 0x22
 8112b52:	f8c8 3000 	str.w	r3, [r8]
 8112b56:	4608      	mov	r0, r1
 8112b58:	f1ba 0f00 	cmp.w	sl, #0
 8112b5c:	d107      	bne.n	8112b6e <_strtol_l.isra.0+0xda>
 8112b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112b62:	b102      	cbz	r2, 8112b66 <_strtol_l.isra.0+0xd2>
 8112b64:	4240      	negs	r0, r0
 8112b66:	f1ba 0f00 	cmp.w	sl, #0
 8112b6a:	d0f8      	beq.n	8112b5e <_strtol_l.isra.0+0xca>
 8112b6c:	b10f      	cbz	r7, 8112b72 <_strtol_l.isra.0+0xde>
 8112b6e:	f105 39ff 	add.w	r9, r5, #4294967295
 8112b72:	f8ca 9000 	str.w	r9, [sl]
 8112b76:	e7f2      	b.n	8112b5e <_strtol_l.isra.0+0xca>
 8112b78:	2430      	movs	r4, #48	; 0x30
 8112b7a:	2e00      	cmp	r6, #0
 8112b7c:	d1af      	bne.n	8112ade <_strtol_l.isra.0+0x4a>
 8112b7e:	2608      	movs	r6, #8
 8112b80:	e7ad      	b.n	8112ade <_strtol_l.isra.0+0x4a>
 8112b82:	2c30      	cmp	r4, #48	; 0x30
 8112b84:	d0a3      	beq.n	8112ace <_strtol_l.isra.0+0x3a>
 8112b86:	260a      	movs	r6, #10
 8112b88:	e7a9      	b.n	8112ade <_strtol_l.isra.0+0x4a>
	...

08112b8c <strtol>:
 8112b8c:	4b08      	ldr	r3, [pc, #32]	; (8112bb0 <strtol+0x24>)
 8112b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8112b90:	681c      	ldr	r4, [r3, #0]
 8112b92:	4d08      	ldr	r5, [pc, #32]	; (8112bb4 <strtol+0x28>)
 8112b94:	6a23      	ldr	r3, [r4, #32]
 8112b96:	2b00      	cmp	r3, #0
 8112b98:	bf08      	it	eq
 8112b9a:	462b      	moveq	r3, r5
 8112b9c:	9300      	str	r3, [sp, #0]
 8112b9e:	4613      	mov	r3, r2
 8112ba0:	460a      	mov	r2, r1
 8112ba2:	4601      	mov	r1, r0
 8112ba4:	4620      	mov	r0, r4
 8112ba6:	f7ff ff75 	bl	8112a94 <_strtol_l.isra.0>
 8112baa:	b003      	add	sp, #12
 8112bac:	bd30      	pop	{r4, r5, pc}
 8112bae:	bf00      	nop
 8112bb0:	10000040 	.word	0x10000040
 8112bb4:	100000a4 	.word	0x100000a4

08112bb8 <_vsiprintf_r>:
 8112bb8:	b500      	push	{lr}
 8112bba:	b09b      	sub	sp, #108	; 0x6c
 8112bbc:	9100      	str	r1, [sp, #0]
 8112bbe:	9104      	str	r1, [sp, #16]
 8112bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8112bc4:	9105      	str	r1, [sp, #20]
 8112bc6:	9102      	str	r1, [sp, #8]
 8112bc8:	4905      	ldr	r1, [pc, #20]	; (8112be0 <_vsiprintf_r+0x28>)
 8112bca:	9103      	str	r1, [sp, #12]
 8112bcc:	4669      	mov	r1, sp
 8112bce:	f001 fd71 	bl	81146b4 <_svfiprintf_r>
 8112bd2:	9b00      	ldr	r3, [sp, #0]
 8112bd4:	2200      	movs	r2, #0
 8112bd6:	701a      	strb	r2, [r3, #0]
 8112bd8:	b01b      	add	sp, #108	; 0x6c
 8112bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8112bde:	bf00      	nop
 8112be0:	ffff0208 	.word	0xffff0208

08112be4 <vsiprintf>:
 8112be4:	4613      	mov	r3, r2
 8112be6:	460a      	mov	r2, r1
 8112be8:	4601      	mov	r1, r0
 8112bea:	4802      	ldr	r0, [pc, #8]	; (8112bf4 <vsiprintf+0x10>)
 8112bec:	6800      	ldr	r0, [r0, #0]
 8112bee:	f7ff bfe3 	b.w	8112bb8 <_vsiprintf_r>
 8112bf2:	bf00      	nop
 8112bf4:	10000040 	.word	0x10000040

08112bf8 <__swbuf_r>:
 8112bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112bfa:	460e      	mov	r6, r1
 8112bfc:	4614      	mov	r4, r2
 8112bfe:	4605      	mov	r5, r0
 8112c00:	b118      	cbz	r0, 8112c0a <__swbuf_r+0x12>
 8112c02:	6983      	ldr	r3, [r0, #24]
 8112c04:	b90b      	cbnz	r3, 8112c0a <__swbuf_r+0x12>
 8112c06:	f001 f84f 	bl	8113ca8 <__sinit>
 8112c0a:	4b21      	ldr	r3, [pc, #132]	; (8112c90 <__swbuf_r+0x98>)
 8112c0c:	429c      	cmp	r4, r3
 8112c0e:	d12a      	bne.n	8112c66 <__swbuf_r+0x6e>
 8112c10:	686c      	ldr	r4, [r5, #4]
 8112c12:	69a3      	ldr	r3, [r4, #24]
 8112c14:	60a3      	str	r3, [r4, #8]
 8112c16:	89a3      	ldrh	r3, [r4, #12]
 8112c18:	071a      	lsls	r2, r3, #28
 8112c1a:	d52e      	bpl.n	8112c7a <__swbuf_r+0x82>
 8112c1c:	6923      	ldr	r3, [r4, #16]
 8112c1e:	b363      	cbz	r3, 8112c7a <__swbuf_r+0x82>
 8112c20:	6923      	ldr	r3, [r4, #16]
 8112c22:	6820      	ldr	r0, [r4, #0]
 8112c24:	1ac0      	subs	r0, r0, r3
 8112c26:	6963      	ldr	r3, [r4, #20]
 8112c28:	b2f6      	uxtb	r6, r6
 8112c2a:	4283      	cmp	r3, r0
 8112c2c:	4637      	mov	r7, r6
 8112c2e:	dc04      	bgt.n	8112c3a <__swbuf_r+0x42>
 8112c30:	4621      	mov	r1, r4
 8112c32:	4628      	mov	r0, r5
 8112c34:	f000 ffce 	bl	8113bd4 <_fflush_r>
 8112c38:	bb28      	cbnz	r0, 8112c86 <__swbuf_r+0x8e>
 8112c3a:	68a3      	ldr	r3, [r4, #8]
 8112c3c:	3b01      	subs	r3, #1
 8112c3e:	60a3      	str	r3, [r4, #8]
 8112c40:	6823      	ldr	r3, [r4, #0]
 8112c42:	1c5a      	adds	r2, r3, #1
 8112c44:	6022      	str	r2, [r4, #0]
 8112c46:	701e      	strb	r6, [r3, #0]
 8112c48:	6963      	ldr	r3, [r4, #20]
 8112c4a:	3001      	adds	r0, #1
 8112c4c:	4283      	cmp	r3, r0
 8112c4e:	d004      	beq.n	8112c5a <__swbuf_r+0x62>
 8112c50:	89a3      	ldrh	r3, [r4, #12]
 8112c52:	07db      	lsls	r3, r3, #31
 8112c54:	d519      	bpl.n	8112c8a <__swbuf_r+0x92>
 8112c56:	2e0a      	cmp	r6, #10
 8112c58:	d117      	bne.n	8112c8a <__swbuf_r+0x92>
 8112c5a:	4621      	mov	r1, r4
 8112c5c:	4628      	mov	r0, r5
 8112c5e:	f000 ffb9 	bl	8113bd4 <_fflush_r>
 8112c62:	b190      	cbz	r0, 8112c8a <__swbuf_r+0x92>
 8112c64:	e00f      	b.n	8112c86 <__swbuf_r+0x8e>
 8112c66:	4b0b      	ldr	r3, [pc, #44]	; (8112c94 <__swbuf_r+0x9c>)
 8112c68:	429c      	cmp	r4, r3
 8112c6a:	d101      	bne.n	8112c70 <__swbuf_r+0x78>
 8112c6c:	68ac      	ldr	r4, [r5, #8]
 8112c6e:	e7d0      	b.n	8112c12 <__swbuf_r+0x1a>
 8112c70:	4b09      	ldr	r3, [pc, #36]	; (8112c98 <__swbuf_r+0xa0>)
 8112c72:	429c      	cmp	r4, r3
 8112c74:	bf08      	it	eq
 8112c76:	68ec      	ldreq	r4, [r5, #12]
 8112c78:	e7cb      	b.n	8112c12 <__swbuf_r+0x1a>
 8112c7a:	4621      	mov	r1, r4
 8112c7c:	4628      	mov	r0, r5
 8112c7e:	f000 f80d 	bl	8112c9c <__swsetup_r>
 8112c82:	2800      	cmp	r0, #0
 8112c84:	d0cc      	beq.n	8112c20 <__swbuf_r+0x28>
 8112c86:	f04f 37ff 	mov.w	r7, #4294967295
 8112c8a:	4638      	mov	r0, r7
 8112c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8112c8e:	bf00      	nop
 8112c90:	08115ee0 	.word	0x08115ee0
 8112c94:	08115f00 	.word	0x08115f00
 8112c98:	08115ec0 	.word	0x08115ec0

08112c9c <__swsetup_r>:
 8112c9c:	4b32      	ldr	r3, [pc, #200]	; (8112d68 <__swsetup_r+0xcc>)
 8112c9e:	b570      	push	{r4, r5, r6, lr}
 8112ca0:	681d      	ldr	r5, [r3, #0]
 8112ca2:	4606      	mov	r6, r0
 8112ca4:	460c      	mov	r4, r1
 8112ca6:	b125      	cbz	r5, 8112cb2 <__swsetup_r+0x16>
 8112ca8:	69ab      	ldr	r3, [r5, #24]
 8112caa:	b913      	cbnz	r3, 8112cb2 <__swsetup_r+0x16>
 8112cac:	4628      	mov	r0, r5
 8112cae:	f000 fffb 	bl	8113ca8 <__sinit>
 8112cb2:	4b2e      	ldr	r3, [pc, #184]	; (8112d6c <__swsetup_r+0xd0>)
 8112cb4:	429c      	cmp	r4, r3
 8112cb6:	d10f      	bne.n	8112cd8 <__swsetup_r+0x3c>
 8112cb8:	686c      	ldr	r4, [r5, #4]
 8112cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112cbe:	b29a      	uxth	r2, r3
 8112cc0:	0715      	lsls	r5, r2, #28
 8112cc2:	d42c      	bmi.n	8112d1e <__swsetup_r+0x82>
 8112cc4:	06d0      	lsls	r0, r2, #27
 8112cc6:	d411      	bmi.n	8112cec <__swsetup_r+0x50>
 8112cc8:	2209      	movs	r2, #9
 8112cca:	6032      	str	r2, [r6, #0]
 8112ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8112cd0:	81a3      	strh	r3, [r4, #12]
 8112cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8112cd6:	e03e      	b.n	8112d56 <__swsetup_r+0xba>
 8112cd8:	4b25      	ldr	r3, [pc, #148]	; (8112d70 <__swsetup_r+0xd4>)
 8112cda:	429c      	cmp	r4, r3
 8112cdc:	d101      	bne.n	8112ce2 <__swsetup_r+0x46>
 8112cde:	68ac      	ldr	r4, [r5, #8]
 8112ce0:	e7eb      	b.n	8112cba <__swsetup_r+0x1e>
 8112ce2:	4b24      	ldr	r3, [pc, #144]	; (8112d74 <__swsetup_r+0xd8>)
 8112ce4:	429c      	cmp	r4, r3
 8112ce6:	bf08      	it	eq
 8112ce8:	68ec      	ldreq	r4, [r5, #12]
 8112cea:	e7e6      	b.n	8112cba <__swsetup_r+0x1e>
 8112cec:	0751      	lsls	r1, r2, #29
 8112cee:	d512      	bpl.n	8112d16 <__swsetup_r+0x7a>
 8112cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8112cf2:	b141      	cbz	r1, 8112d06 <__swsetup_r+0x6a>
 8112cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8112cf8:	4299      	cmp	r1, r3
 8112cfa:	d002      	beq.n	8112d02 <__swsetup_r+0x66>
 8112cfc:	4630      	mov	r0, r6
 8112cfe:	f001 fbd7 	bl	81144b0 <_free_r>
 8112d02:	2300      	movs	r3, #0
 8112d04:	6363      	str	r3, [r4, #52]	; 0x34
 8112d06:	89a3      	ldrh	r3, [r4, #12]
 8112d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8112d0c:	81a3      	strh	r3, [r4, #12]
 8112d0e:	2300      	movs	r3, #0
 8112d10:	6063      	str	r3, [r4, #4]
 8112d12:	6923      	ldr	r3, [r4, #16]
 8112d14:	6023      	str	r3, [r4, #0]
 8112d16:	89a3      	ldrh	r3, [r4, #12]
 8112d18:	f043 0308 	orr.w	r3, r3, #8
 8112d1c:	81a3      	strh	r3, [r4, #12]
 8112d1e:	6923      	ldr	r3, [r4, #16]
 8112d20:	b94b      	cbnz	r3, 8112d36 <__swsetup_r+0x9a>
 8112d22:	89a3      	ldrh	r3, [r4, #12]
 8112d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8112d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8112d2c:	d003      	beq.n	8112d36 <__swsetup_r+0x9a>
 8112d2e:	4621      	mov	r1, r4
 8112d30:	4630      	mov	r0, r6
 8112d32:	f001 f879 	bl	8113e28 <__smakebuf_r>
 8112d36:	89a2      	ldrh	r2, [r4, #12]
 8112d38:	f012 0301 	ands.w	r3, r2, #1
 8112d3c:	d00c      	beq.n	8112d58 <__swsetup_r+0xbc>
 8112d3e:	2300      	movs	r3, #0
 8112d40:	60a3      	str	r3, [r4, #8]
 8112d42:	6963      	ldr	r3, [r4, #20]
 8112d44:	425b      	negs	r3, r3
 8112d46:	61a3      	str	r3, [r4, #24]
 8112d48:	6923      	ldr	r3, [r4, #16]
 8112d4a:	b953      	cbnz	r3, 8112d62 <__swsetup_r+0xc6>
 8112d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112d50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8112d54:	d1ba      	bne.n	8112ccc <__swsetup_r+0x30>
 8112d56:	bd70      	pop	{r4, r5, r6, pc}
 8112d58:	0792      	lsls	r2, r2, #30
 8112d5a:	bf58      	it	pl
 8112d5c:	6963      	ldrpl	r3, [r4, #20]
 8112d5e:	60a3      	str	r3, [r4, #8]
 8112d60:	e7f2      	b.n	8112d48 <__swsetup_r+0xac>
 8112d62:	2000      	movs	r0, #0
 8112d64:	e7f7      	b.n	8112d56 <__swsetup_r+0xba>
 8112d66:	bf00      	nop
 8112d68:	10000040 	.word	0x10000040
 8112d6c:	08115ee0 	.word	0x08115ee0
 8112d70:	08115f00 	.word	0x08115f00
 8112d74:	08115ec0 	.word	0x08115ec0

08112d78 <__register_exitproc>:
 8112d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8112d7c:	4d2c      	ldr	r5, [pc, #176]	; (8112e30 <__register_exitproc+0xb8>)
 8112d7e:	682c      	ldr	r4, [r5, #0]
 8112d80:	4607      	mov	r7, r0
 8112d82:	460e      	mov	r6, r1
 8112d84:	4691      	mov	r9, r2
 8112d86:	4698      	mov	r8, r3
 8112d88:	b934      	cbnz	r4, 8112d98 <__register_exitproc+0x20>
 8112d8a:	4b2a      	ldr	r3, [pc, #168]	; (8112e34 <__register_exitproc+0xbc>)
 8112d8c:	4c2a      	ldr	r4, [pc, #168]	; (8112e38 <__register_exitproc+0xc0>)
 8112d8e:	602c      	str	r4, [r5, #0]
 8112d90:	b113      	cbz	r3, 8112d98 <__register_exitproc+0x20>
 8112d92:	681b      	ldr	r3, [r3, #0]
 8112d94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8112d98:	6863      	ldr	r3, [r4, #4]
 8112d9a:	2b1f      	cmp	r3, #31
 8112d9c:	dd3d      	ble.n	8112e1a <__register_exitproc+0xa2>
 8112d9e:	4b27      	ldr	r3, [pc, #156]	; (8112e3c <__register_exitproc+0xc4>)
 8112da0:	b91b      	cbnz	r3, 8112daa <__register_exitproc+0x32>
 8112da2:	f04f 30ff 	mov.w	r0, #4294967295
 8112da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8112daa:	208c      	movs	r0, #140	; 0x8c
 8112dac:	f001 f87c 	bl	8113ea8 <malloc>
 8112db0:	4604      	mov	r4, r0
 8112db2:	2800      	cmp	r0, #0
 8112db4:	d0f5      	beq.n	8112da2 <__register_exitproc+0x2a>
 8112db6:	2300      	movs	r3, #0
 8112db8:	682a      	ldr	r2, [r5, #0]
 8112dba:	6002      	str	r2, [r0, #0]
 8112dbc:	6043      	str	r3, [r0, #4]
 8112dbe:	6028      	str	r0, [r5, #0]
 8112dc0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8112dc4:	b30f      	cbz	r7, 8112e0a <__register_exitproc+0x92>
 8112dc6:	f44f 7084 	mov.w	r0, #264	; 0x108
 8112dca:	f001 f86d 	bl	8113ea8 <malloc>
 8112dce:	2800      	cmp	r0, #0
 8112dd0:	d0e7      	beq.n	8112da2 <__register_exitproc+0x2a>
 8112dd2:	2300      	movs	r3, #0
 8112dd4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8112dd8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8112ddc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8112de0:	6862      	ldr	r2, [r4, #4]
 8112de2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8112de6:	2301      	movs	r3, #1
 8112de8:	4093      	lsls	r3, r2
 8112dea:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8112dee:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8112df2:	431a      	orrs	r2, r3
 8112df4:	2f02      	cmp	r7, #2
 8112df6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8112dfa:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8112dfe:	bf02      	ittt	eq
 8112e00:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8112e04:	4313      	orreq	r3, r2
 8112e06:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8112e0a:	6863      	ldr	r3, [r4, #4]
 8112e0c:	1c5a      	adds	r2, r3, #1
 8112e0e:	3302      	adds	r3, #2
 8112e10:	6062      	str	r2, [r4, #4]
 8112e12:	2000      	movs	r0, #0
 8112e14:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8112e18:	e7c5      	b.n	8112da6 <__register_exitproc+0x2e>
 8112e1a:	2f00      	cmp	r7, #0
 8112e1c:	d0f5      	beq.n	8112e0a <__register_exitproc+0x92>
 8112e1e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8112e22:	2800      	cmp	r0, #0
 8112e24:	d1dc      	bne.n	8112de0 <__register_exitproc+0x68>
 8112e26:	4b05      	ldr	r3, [pc, #20]	; (8112e3c <__register_exitproc+0xc4>)
 8112e28:	2b00      	cmp	r3, #0
 8112e2a:	d0ba      	beq.n	8112da2 <__register_exitproc+0x2a>
 8112e2c:	e7cb      	b.n	8112dc6 <__register_exitproc+0x4e>
 8112e2e:	bf00      	nop
 8112e30:	1000ddb8 	.word	0x1000ddb8
 8112e34:	00000000 	.word	0x00000000
 8112e38:	1000dd2c 	.word	0x1000dd2c
 8112e3c:	08113ea9 	.word	0x08113ea9

08112e40 <quorem>:
 8112e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112e44:	6903      	ldr	r3, [r0, #16]
 8112e46:	690c      	ldr	r4, [r1, #16]
 8112e48:	42a3      	cmp	r3, r4
 8112e4a:	4680      	mov	r8, r0
 8112e4c:	f2c0 8082 	blt.w	8112f54 <quorem+0x114>
 8112e50:	3c01      	subs	r4, #1
 8112e52:	f101 0714 	add.w	r7, r1, #20
 8112e56:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8112e5a:	f100 0614 	add.w	r6, r0, #20
 8112e5e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8112e62:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8112e66:	eb06 030c 	add.w	r3, r6, ip
 8112e6a:	3501      	adds	r5, #1
 8112e6c:	eb07 090c 	add.w	r9, r7, ip
 8112e70:	9301      	str	r3, [sp, #4]
 8112e72:	fbb0 f5f5 	udiv	r5, r0, r5
 8112e76:	b395      	cbz	r5, 8112ede <quorem+0x9e>
 8112e78:	f04f 0a00 	mov.w	sl, #0
 8112e7c:	4638      	mov	r0, r7
 8112e7e:	46b6      	mov	lr, r6
 8112e80:	46d3      	mov	fp, sl
 8112e82:	f850 2b04 	ldr.w	r2, [r0], #4
 8112e86:	b293      	uxth	r3, r2
 8112e88:	fb05 a303 	mla	r3, r5, r3, sl
 8112e8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8112e90:	b29b      	uxth	r3, r3
 8112e92:	ebab 0303 	sub.w	r3, fp, r3
 8112e96:	0c12      	lsrs	r2, r2, #16
 8112e98:	f8de b000 	ldr.w	fp, [lr]
 8112e9c:	fb05 a202 	mla	r2, r5, r2, sl
 8112ea0:	fa13 f38b 	uxtah	r3, r3, fp
 8112ea4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8112ea8:	fa1f fb82 	uxth.w	fp, r2
 8112eac:	f8de 2000 	ldr.w	r2, [lr]
 8112eb0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8112eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8112eb8:	b29b      	uxth	r3, r3
 8112eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8112ebe:	4581      	cmp	r9, r0
 8112ec0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8112ec4:	f84e 3b04 	str.w	r3, [lr], #4
 8112ec8:	d2db      	bcs.n	8112e82 <quorem+0x42>
 8112eca:	f856 300c 	ldr.w	r3, [r6, ip]
 8112ece:	b933      	cbnz	r3, 8112ede <quorem+0x9e>
 8112ed0:	9b01      	ldr	r3, [sp, #4]
 8112ed2:	3b04      	subs	r3, #4
 8112ed4:	429e      	cmp	r6, r3
 8112ed6:	461a      	mov	r2, r3
 8112ed8:	d330      	bcc.n	8112f3c <quorem+0xfc>
 8112eda:	f8c8 4010 	str.w	r4, [r8, #16]
 8112ede:	4640      	mov	r0, r8
 8112ee0:	f001 fa12 	bl	8114308 <__mcmp>
 8112ee4:	2800      	cmp	r0, #0
 8112ee6:	db25      	blt.n	8112f34 <quorem+0xf4>
 8112ee8:	3501      	adds	r5, #1
 8112eea:	4630      	mov	r0, r6
 8112eec:	f04f 0c00 	mov.w	ip, #0
 8112ef0:	f857 2b04 	ldr.w	r2, [r7], #4
 8112ef4:	f8d0 e000 	ldr.w	lr, [r0]
 8112ef8:	b293      	uxth	r3, r2
 8112efa:	ebac 0303 	sub.w	r3, ip, r3
 8112efe:	0c12      	lsrs	r2, r2, #16
 8112f00:	fa13 f38e 	uxtah	r3, r3, lr
 8112f04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8112f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8112f0c:	b29b      	uxth	r3, r3
 8112f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8112f12:	45b9      	cmp	r9, r7
 8112f14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8112f18:	f840 3b04 	str.w	r3, [r0], #4
 8112f1c:	d2e8      	bcs.n	8112ef0 <quorem+0xb0>
 8112f1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8112f22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8112f26:	b92a      	cbnz	r2, 8112f34 <quorem+0xf4>
 8112f28:	3b04      	subs	r3, #4
 8112f2a:	429e      	cmp	r6, r3
 8112f2c:	461a      	mov	r2, r3
 8112f2e:	d30b      	bcc.n	8112f48 <quorem+0x108>
 8112f30:	f8c8 4010 	str.w	r4, [r8, #16]
 8112f34:	4628      	mov	r0, r5
 8112f36:	b003      	add	sp, #12
 8112f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112f3c:	6812      	ldr	r2, [r2, #0]
 8112f3e:	3b04      	subs	r3, #4
 8112f40:	2a00      	cmp	r2, #0
 8112f42:	d1ca      	bne.n	8112eda <quorem+0x9a>
 8112f44:	3c01      	subs	r4, #1
 8112f46:	e7c5      	b.n	8112ed4 <quorem+0x94>
 8112f48:	6812      	ldr	r2, [r2, #0]
 8112f4a:	3b04      	subs	r3, #4
 8112f4c:	2a00      	cmp	r2, #0
 8112f4e:	d1ef      	bne.n	8112f30 <quorem+0xf0>
 8112f50:	3c01      	subs	r4, #1
 8112f52:	e7ea      	b.n	8112f2a <quorem+0xea>
 8112f54:	2000      	movs	r0, #0
 8112f56:	e7ee      	b.n	8112f36 <quorem+0xf6>

08112f58 <_dtoa_r>:
 8112f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112f5c:	ec57 6b10 	vmov	r6, r7, d0
 8112f60:	b097      	sub	sp, #92	; 0x5c
 8112f62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8112f64:	9106      	str	r1, [sp, #24]
 8112f66:	4604      	mov	r4, r0
 8112f68:	920b      	str	r2, [sp, #44]	; 0x2c
 8112f6a:	9312      	str	r3, [sp, #72]	; 0x48
 8112f6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8112f70:	e9cd 6700 	strd	r6, r7, [sp]
 8112f74:	b93d      	cbnz	r5, 8112f86 <_dtoa_r+0x2e>
 8112f76:	2010      	movs	r0, #16
 8112f78:	f000 ff96 	bl	8113ea8 <malloc>
 8112f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8112f7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8112f82:	6005      	str	r5, [r0, #0]
 8112f84:	60c5      	str	r5, [r0, #12]
 8112f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8112f88:	6819      	ldr	r1, [r3, #0]
 8112f8a:	b151      	cbz	r1, 8112fa2 <_dtoa_r+0x4a>
 8112f8c:	685a      	ldr	r2, [r3, #4]
 8112f8e:	604a      	str	r2, [r1, #4]
 8112f90:	2301      	movs	r3, #1
 8112f92:	4093      	lsls	r3, r2
 8112f94:	608b      	str	r3, [r1, #8]
 8112f96:	4620      	mov	r0, r4
 8112f98:	f000 ffd4 	bl	8113f44 <_Bfree>
 8112f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8112f9e:	2200      	movs	r2, #0
 8112fa0:	601a      	str	r2, [r3, #0]
 8112fa2:	1e3b      	subs	r3, r7, #0
 8112fa4:	bfbb      	ittet	lt
 8112fa6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8112faa:	9301      	strlt	r3, [sp, #4]
 8112fac:	2300      	movge	r3, #0
 8112fae:	2201      	movlt	r2, #1
 8112fb0:	bfac      	ite	ge
 8112fb2:	f8c8 3000 	strge.w	r3, [r8]
 8112fb6:	f8c8 2000 	strlt.w	r2, [r8]
 8112fba:	4baf      	ldr	r3, [pc, #700]	; (8113278 <_dtoa_r+0x320>)
 8112fbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8112fc0:	ea33 0308 	bics.w	r3, r3, r8
 8112fc4:	d114      	bne.n	8112ff0 <_dtoa_r+0x98>
 8112fc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8112fc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8112fcc:	6013      	str	r3, [r2, #0]
 8112fce:	9b00      	ldr	r3, [sp, #0]
 8112fd0:	b923      	cbnz	r3, 8112fdc <_dtoa_r+0x84>
 8112fd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8112fd6:	2800      	cmp	r0, #0
 8112fd8:	f000 8542 	beq.w	8113a60 <_dtoa_r+0xb08>
 8112fdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8112fde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 811328c <_dtoa_r+0x334>
 8112fe2:	2b00      	cmp	r3, #0
 8112fe4:	f000 8544 	beq.w	8113a70 <_dtoa_r+0xb18>
 8112fe8:	f10b 0303 	add.w	r3, fp, #3
 8112fec:	f000 bd3e 	b.w	8113a6c <_dtoa_r+0xb14>
 8112ff0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8112ff4:	2200      	movs	r2, #0
 8112ff6:	2300      	movs	r3, #0
 8112ff8:	4630      	mov	r0, r6
 8112ffa:	4639      	mov	r1, r7
 8112ffc:	f7ed fdfc 	bl	8100bf8 <__aeabi_dcmpeq>
 8113000:	4681      	mov	r9, r0
 8113002:	b168      	cbz	r0, 8113020 <_dtoa_r+0xc8>
 8113004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8113006:	2301      	movs	r3, #1
 8113008:	6013      	str	r3, [r2, #0]
 811300a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 811300c:	2b00      	cmp	r3, #0
 811300e:	f000 8524 	beq.w	8113a5a <_dtoa_r+0xb02>
 8113012:	4b9a      	ldr	r3, [pc, #616]	; (811327c <_dtoa_r+0x324>)
 8113014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8113016:	f103 3bff 	add.w	fp, r3, #4294967295
 811301a:	6013      	str	r3, [r2, #0]
 811301c:	f000 bd28 	b.w	8113a70 <_dtoa_r+0xb18>
 8113020:	aa14      	add	r2, sp, #80	; 0x50
 8113022:	a915      	add	r1, sp, #84	; 0x54
 8113024:	ec47 6b10 	vmov	d0, r6, r7
 8113028:	4620      	mov	r0, r4
 811302a:	f001 f9e4 	bl	81143f6 <__d2b>
 811302e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8113032:	9004      	str	r0, [sp, #16]
 8113034:	2d00      	cmp	r5, #0
 8113036:	d07c      	beq.n	8113132 <_dtoa_r+0x1da>
 8113038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 811303c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8113040:	46b2      	mov	sl, r6
 8113042:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8113046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 811304a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 811304e:	2200      	movs	r2, #0
 8113050:	4b8b      	ldr	r3, [pc, #556]	; (8113280 <_dtoa_r+0x328>)
 8113052:	4650      	mov	r0, sl
 8113054:	4659      	mov	r1, fp
 8113056:	f7ed f9af 	bl	81003b8 <__aeabi_dsub>
 811305a:	a381      	add	r3, pc, #516	; (adr r3, 8113260 <_dtoa_r+0x308>)
 811305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113060:	f7ed fb62 	bl	8100728 <__aeabi_dmul>
 8113064:	a380      	add	r3, pc, #512	; (adr r3, 8113268 <_dtoa_r+0x310>)
 8113066:	e9d3 2300 	ldrd	r2, r3, [r3]
 811306a:	f7ed f9a7 	bl	81003bc <__adddf3>
 811306e:	4606      	mov	r6, r0
 8113070:	4628      	mov	r0, r5
 8113072:	460f      	mov	r7, r1
 8113074:	f7ed faee 	bl	8100654 <__aeabi_i2d>
 8113078:	a37d      	add	r3, pc, #500	; (adr r3, 8113270 <_dtoa_r+0x318>)
 811307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811307e:	f7ed fb53 	bl	8100728 <__aeabi_dmul>
 8113082:	4602      	mov	r2, r0
 8113084:	460b      	mov	r3, r1
 8113086:	4630      	mov	r0, r6
 8113088:	4639      	mov	r1, r7
 811308a:	f7ed f997 	bl	81003bc <__adddf3>
 811308e:	4606      	mov	r6, r0
 8113090:	460f      	mov	r7, r1
 8113092:	f7ed fdf9 	bl	8100c88 <__aeabi_d2iz>
 8113096:	2200      	movs	r2, #0
 8113098:	4682      	mov	sl, r0
 811309a:	2300      	movs	r3, #0
 811309c:	4630      	mov	r0, r6
 811309e:	4639      	mov	r1, r7
 81130a0:	f7ed fdb4 	bl	8100c0c <__aeabi_dcmplt>
 81130a4:	b148      	cbz	r0, 81130ba <_dtoa_r+0x162>
 81130a6:	4650      	mov	r0, sl
 81130a8:	f7ed fad4 	bl	8100654 <__aeabi_i2d>
 81130ac:	4632      	mov	r2, r6
 81130ae:	463b      	mov	r3, r7
 81130b0:	f7ed fda2 	bl	8100bf8 <__aeabi_dcmpeq>
 81130b4:	b908      	cbnz	r0, 81130ba <_dtoa_r+0x162>
 81130b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 81130ba:	f1ba 0f16 	cmp.w	sl, #22
 81130be:	d859      	bhi.n	8113174 <_dtoa_r+0x21c>
 81130c0:	4970      	ldr	r1, [pc, #448]	; (8113284 <_dtoa_r+0x32c>)
 81130c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 81130c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 81130ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 81130ce:	f7ed fdbb 	bl	8100c48 <__aeabi_dcmpgt>
 81130d2:	2800      	cmp	r0, #0
 81130d4:	d050      	beq.n	8113178 <_dtoa_r+0x220>
 81130d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 81130da:	2300      	movs	r3, #0
 81130dc:	930f      	str	r3, [sp, #60]	; 0x3c
 81130de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 81130e0:	1b5d      	subs	r5, r3, r5
 81130e2:	f1b5 0801 	subs.w	r8, r5, #1
 81130e6:	bf49      	itett	mi
 81130e8:	f1c5 0301 	rsbmi	r3, r5, #1
 81130ec:	2300      	movpl	r3, #0
 81130ee:	9305      	strmi	r3, [sp, #20]
 81130f0:	f04f 0800 	movmi.w	r8, #0
 81130f4:	bf58      	it	pl
 81130f6:	9305      	strpl	r3, [sp, #20]
 81130f8:	f1ba 0f00 	cmp.w	sl, #0
 81130fc:	db3e      	blt.n	811317c <_dtoa_r+0x224>
 81130fe:	2300      	movs	r3, #0
 8113100:	44d0      	add	r8, sl
 8113102:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8113106:	9307      	str	r3, [sp, #28]
 8113108:	9b06      	ldr	r3, [sp, #24]
 811310a:	2b09      	cmp	r3, #9
 811310c:	f200 8090 	bhi.w	8113230 <_dtoa_r+0x2d8>
 8113110:	2b05      	cmp	r3, #5
 8113112:	bfc4      	itt	gt
 8113114:	3b04      	subgt	r3, #4
 8113116:	9306      	strgt	r3, [sp, #24]
 8113118:	9b06      	ldr	r3, [sp, #24]
 811311a:	f1a3 0302 	sub.w	r3, r3, #2
 811311e:	bfcc      	ite	gt
 8113120:	2500      	movgt	r5, #0
 8113122:	2501      	movle	r5, #1
 8113124:	2b03      	cmp	r3, #3
 8113126:	f200 808f 	bhi.w	8113248 <_dtoa_r+0x2f0>
 811312a:	e8df f003 	tbb	[pc, r3]
 811312e:	7f7d      	.short	0x7f7d
 8113130:	7131      	.short	0x7131
 8113132:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8113136:	441d      	add	r5, r3
 8113138:	f205 4032 	addw	r0, r5, #1074	; 0x432
 811313c:	2820      	cmp	r0, #32
 811313e:	dd13      	ble.n	8113168 <_dtoa_r+0x210>
 8113140:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8113144:	9b00      	ldr	r3, [sp, #0]
 8113146:	fa08 f800 	lsl.w	r8, r8, r0
 811314a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 811314e:	fa23 f000 	lsr.w	r0, r3, r0
 8113152:	ea48 0000 	orr.w	r0, r8, r0
 8113156:	f7ed fa6d 	bl	8100634 <__aeabi_ui2d>
 811315a:	2301      	movs	r3, #1
 811315c:	4682      	mov	sl, r0
 811315e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8113162:	3d01      	subs	r5, #1
 8113164:	9313      	str	r3, [sp, #76]	; 0x4c
 8113166:	e772      	b.n	811304e <_dtoa_r+0xf6>
 8113168:	9b00      	ldr	r3, [sp, #0]
 811316a:	f1c0 0020 	rsb	r0, r0, #32
 811316e:	fa03 f000 	lsl.w	r0, r3, r0
 8113172:	e7f0      	b.n	8113156 <_dtoa_r+0x1fe>
 8113174:	2301      	movs	r3, #1
 8113176:	e7b1      	b.n	81130dc <_dtoa_r+0x184>
 8113178:	900f      	str	r0, [sp, #60]	; 0x3c
 811317a:	e7b0      	b.n	81130de <_dtoa_r+0x186>
 811317c:	9b05      	ldr	r3, [sp, #20]
 811317e:	eba3 030a 	sub.w	r3, r3, sl
 8113182:	9305      	str	r3, [sp, #20]
 8113184:	f1ca 0300 	rsb	r3, sl, #0
 8113188:	9307      	str	r3, [sp, #28]
 811318a:	2300      	movs	r3, #0
 811318c:	930e      	str	r3, [sp, #56]	; 0x38
 811318e:	e7bb      	b.n	8113108 <_dtoa_r+0x1b0>
 8113190:	2301      	movs	r3, #1
 8113192:	930a      	str	r3, [sp, #40]	; 0x28
 8113194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8113196:	2b00      	cmp	r3, #0
 8113198:	dd59      	ble.n	811324e <_dtoa_r+0x2f6>
 811319a:	9302      	str	r3, [sp, #8]
 811319c:	4699      	mov	r9, r3
 811319e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 81131a0:	2200      	movs	r2, #0
 81131a2:	6072      	str	r2, [r6, #4]
 81131a4:	2204      	movs	r2, #4
 81131a6:	f102 0014 	add.w	r0, r2, #20
 81131aa:	4298      	cmp	r0, r3
 81131ac:	6871      	ldr	r1, [r6, #4]
 81131ae:	d953      	bls.n	8113258 <_dtoa_r+0x300>
 81131b0:	4620      	mov	r0, r4
 81131b2:	f000 fe93 	bl	8113edc <_Balloc>
 81131b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81131b8:	6030      	str	r0, [r6, #0]
 81131ba:	f1b9 0f0e 	cmp.w	r9, #14
 81131be:	f8d3 b000 	ldr.w	fp, [r3]
 81131c2:	f200 80e6 	bhi.w	8113392 <_dtoa_r+0x43a>
 81131c6:	2d00      	cmp	r5, #0
 81131c8:	f000 80e3 	beq.w	8113392 <_dtoa_r+0x43a>
 81131cc:	ed9d 7b00 	vldr	d7, [sp]
 81131d0:	f1ba 0f00 	cmp.w	sl, #0
 81131d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 81131d8:	dd74      	ble.n	81132c4 <_dtoa_r+0x36c>
 81131da:	4a2a      	ldr	r2, [pc, #168]	; (8113284 <_dtoa_r+0x32c>)
 81131dc:	f00a 030f 	and.w	r3, sl, #15
 81131e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81131e4:	ed93 7b00 	vldr	d7, [r3]
 81131e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 81131ec:	06f0      	lsls	r0, r6, #27
 81131ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 81131f2:	d565      	bpl.n	81132c0 <_dtoa_r+0x368>
 81131f4:	4b24      	ldr	r3, [pc, #144]	; (8113288 <_dtoa_r+0x330>)
 81131f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 81131fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81131fe:	f7ed fbbd 	bl	810097c <__aeabi_ddiv>
 8113202:	e9cd 0100 	strd	r0, r1, [sp]
 8113206:	f006 060f 	and.w	r6, r6, #15
 811320a:	2503      	movs	r5, #3
 811320c:	4f1e      	ldr	r7, [pc, #120]	; (8113288 <_dtoa_r+0x330>)
 811320e:	e04c      	b.n	81132aa <_dtoa_r+0x352>
 8113210:	2301      	movs	r3, #1
 8113212:	930a      	str	r3, [sp, #40]	; 0x28
 8113214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8113216:	4453      	add	r3, sl
 8113218:	f103 0901 	add.w	r9, r3, #1
 811321c:	9302      	str	r3, [sp, #8]
 811321e:	464b      	mov	r3, r9
 8113220:	2b01      	cmp	r3, #1
 8113222:	bfb8      	it	lt
 8113224:	2301      	movlt	r3, #1
 8113226:	e7ba      	b.n	811319e <_dtoa_r+0x246>
 8113228:	2300      	movs	r3, #0
 811322a:	e7b2      	b.n	8113192 <_dtoa_r+0x23a>
 811322c:	2300      	movs	r3, #0
 811322e:	e7f0      	b.n	8113212 <_dtoa_r+0x2ba>
 8113230:	2501      	movs	r5, #1
 8113232:	2300      	movs	r3, #0
 8113234:	9306      	str	r3, [sp, #24]
 8113236:	950a      	str	r5, [sp, #40]	; 0x28
 8113238:	f04f 33ff 	mov.w	r3, #4294967295
 811323c:	9302      	str	r3, [sp, #8]
 811323e:	4699      	mov	r9, r3
 8113240:	2200      	movs	r2, #0
 8113242:	2312      	movs	r3, #18
 8113244:	920b      	str	r2, [sp, #44]	; 0x2c
 8113246:	e7aa      	b.n	811319e <_dtoa_r+0x246>
 8113248:	2301      	movs	r3, #1
 811324a:	930a      	str	r3, [sp, #40]	; 0x28
 811324c:	e7f4      	b.n	8113238 <_dtoa_r+0x2e0>
 811324e:	2301      	movs	r3, #1
 8113250:	9302      	str	r3, [sp, #8]
 8113252:	4699      	mov	r9, r3
 8113254:	461a      	mov	r2, r3
 8113256:	e7f5      	b.n	8113244 <_dtoa_r+0x2ec>
 8113258:	3101      	adds	r1, #1
 811325a:	6071      	str	r1, [r6, #4]
 811325c:	0052      	lsls	r2, r2, #1
 811325e:	e7a2      	b.n	81131a6 <_dtoa_r+0x24e>
 8113260:	636f4361 	.word	0x636f4361
 8113264:	3fd287a7 	.word	0x3fd287a7
 8113268:	8b60c8b3 	.word	0x8b60c8b3
 811326c:	3fc68a28 	.word	0x3fc68a28
 8113270:	509f79fb 	.word	0x509f79fb
 8113274:	3fd34413 	.word	0x3fd34413
 8113278:	7ff00000 	.word	0x7ff00000
 811327c:	08115e8d 	.word	0x08115e8d
 8113280:	3ff80000 	.word	0x3ff80000
 8113284:	08115f58 	.word	0x08115f58
 8113288:	08115f30 	.word	0x08115f30
 811328c:	08115eb9 	.word	0x08115eb9
 8113290:	07f1      	lsls	r1, r6, #31
 8113292:	d508      	bpl.n	81132a6 <_dtoa_r+0x34e>
 8113294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8113298:	e9d7 2300 	ldrd	r2, r3, [r7]
 811329c:	f7ed fa44 	bl	8100728 <__aeabi_dmul>
 81132a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81132a4:	3501      	adds	r5, #1
 81132a6:	1076      	asrs	r6, r6, #1
 81132a8:	3708      	adds	r7, #8
 81132aa:	2e00      	cmp	r6, #0
 81132ac:	d1f0      	bne.n	8113290 <_dtoa_r+0x338>
 81132ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 81132b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 81132b6:	f7ed fb61 	bl	810097c <__aeabi_ddiv>
 81132ba:	e9cd 0100 	strd	r0, r1, [sp]
 81132be:	e01a      	b.n	81132f6 <_dtoa_r+0x39e>
 81132c0:	2502      	movs	r5, #2
 81132c2:	e7a3      	b.n	811320c <_dtoa_r+0x2b4>
 81132c4:	f000 80a0 	beq.w	8113408 <_dtoa_r+0x4b0>
 81132c8:	f1ca 0600 	rsb	r6, sl, #0
 81132cc:	4b9f      	ldr	r3, [pc, #636]	; (811354c <_dtoa_r+0x5f4>)
 81132ce:	4fa0      	ldr	r7, [pc, #640]	; (8113550 <_dtoa_r+0x5f8>)
 81132d0:	f006 020f 	and.w	r2, r6, #15
 81132d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81132d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81132dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 81132e0:	f7ed fa22 	bl	8100728 <__aeabi_dmul>
 81132e4:	e9cd 0100 	strd	r0, r1, [sp]
 81132e8:	1136      	asrs	r6, r6, #4
 81132ea:	2300      	movs	r3, #0
 81132ec:	2502      	movs	r5, #2
 81132ee:	2e00      	cmp	r6, #0
 81132f0:	d17f      	bne.n	81133f2 <_dtoa_r+0x49a>
 81132f2:	2b00      	cmp	r3, #0
 81132f4:	d1e1      	bne.n	81132ba <_dtoa_r+0x362>
 81132f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81132f8:	2b00      	cmp	r3, #0
 81132fa:	f000 8087 	beq.w	811340c <_dtoa_r+0x4b4>
 81132fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8113302:	2200      	movs	r2, #0
 8113304:	4b93      	ldr	r3, [pc, #588]	; (8113554 <_dtoa_r+0x5fc>)
 8113306:	4630      	mov	r0, r6
 8113308:	4639      	mov	r1, r7
 811330a:	f7ed fc7f 	bl	8100c0c <__aeabi_dcmplt>
 811330e:	2800      	cmp	r0, #0
 8113310:	d07c      	beq.n	811340c <_dtoa_r+0x4b4>
 8113312:	f1b9 0f00 	cmp.w	r9, #0
 8113316:	d079      	beq.n	811340c <_dtoa_r+0x4b4>
 8113318:	9b02      	ldr	r3, [sp, #8]
 811331a:	2b00      	cmp	r3, #0
 811331c:	dd35      	ble.n	811338a <_dtoa_r+0x432>
 811331e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8113322:	9308      	str	r3, [sp, #32]
 8113324:	4639      	mov	r1, r7
 8113326:	2200      	movs	r2, #0
 8113328:	4b8b      	ldr	r3, [pc, #556]	; (8113558 <_dtoa_r+0x600>)
 811332a:	4630      	mov	r0, r6
 811332c:	f7ed f9fc 	bl	8100728 <__aeabi_dmul>
 8113330:	e9cd 0100 	strd	r0, r1, [sp]
 8113334:	9f02      	ldr	r7, [sp, #8]
 8113336:	3501      	adds	r5, #1
 8113338:	4628      	mov	r0, r5
 811333a:	f7ed f98b 	bl	8100654 <__aeabi_i2d>
 811333e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8113342:	f7ed f9f1 	bl	8100728 <__aeabi_dmul>
 8113346:	2200      	movs	r2, #0
 8113348:	4b84      	ldr	r3, [pc, #528]	; (811355c <_dtoa_r+0x604>)
 811334a:	f7ed f837 	bl	81003bc <__adddf3>
 811334e:	4605      	mov	r5, r0
 8113350:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8113354:	2f00      	cmp	r7, #0
 8113356:	d15d      	bne.n	8113414 <_dtoa_r+0x4bc>
 8113358:	2200      	movs	r2, #0
 811335a:	4b81      	ldr	r3, [pc, #516]	; (8113560 <_dtoa_r+0x608>)
 811335c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8113360:	f7ed f82a 	bl	81003b8 <__aeabi_dsub>
 8113364:	462a      	mov	r2, r5
 8113366:	4633      	mov	r3, r6
 8113368:	e9cd 0100 	strd	r0, r1, [sp]
 811336c:	f7ed fc6c 	bl	8100c48 <__aeabi_dcmpgt>
 8113370:	2800      	cmp	r0, #0
 8113372:	f040 8288 	bne.w	8113886 <_dtoa_r+0x92e>
 8113376:	462a      	mov	r2, r5
 8113378:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 811337c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8113380:	f7ed fc44 	bl	8100c0c <__aeabi_dcmplt>
 8113384:	2800      	cmp	r0, #0
 8113386:	f040 827c 	bne.w	8113882 <_dtoa_r+0x92a>
 811338a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 811338e:	e9cd 2300 	strd	r2, r3, [sp]
 8113392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8113394:	2b00      	cmp	r3, #0
 8113396:	f2c0 8150 	blt.w	811363a <_dtoa_r+0x6e2>
 811339a:	f1ba 0f0e 	cmp.w	sl, #14
 811339e:	f300 814c 	bgt.w	811363a <_dtoa_r+0x6e2>
 81133a2:	4b6a      	ldr	r3, [pc, #424]	; (811354c <_dtoa_r+0x5f4>)
 81133a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81133a8:	ed93 7b00 	vldr	d7, [r3]
 81133ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81133ae:	2b00      	cmp	r3, #0
 81133b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 81133b4:	f280 80d8 	bge.w	8113568 <_dtoa_r+0x610>
 81133b8:	f1b9 0f00 	cmp.w	r9, #0
 81133bc:	f300 80d4 	bgt.w	8113568 <_dtoa_r+0x610>
 81133c0:	f040 825e 	bne.w	8113880 <_dtoa_r+0x928>
 81133c4:	2200      	movs	r2, #0
 81133c6:	4b66      	ldr	r3, [pc, #408]	; (8113560 <_dtoa_r+0x608>)
 81133c8:	ec51 0b17 	vmov	r0, r1, d7
 81133cc:	f7ed f9ac 	bl	8100728 <__aeabi_dmul>
 81133d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 81133d4:	f7ed fc2e 	bl	8100c34 <__aeabi_dcmpge>
 81133d8:	464f      	mov	r7, r9
 81133da:	464e      	mov	r6, r9
 81133dc:	2800      	cmp	r0, #0
 81133de:	f040 8234 	bne.w	811384a <_dtoa_r+0x8f2>
 81133e2:	2331      	movs	r3, #49	; 0x31
 81133e4:	f10b 0501 	add.w	r5, fp, #1
 81133e8:	f88b 3000 	strb.w	r3, [fp]
 81133ec:	f10a 0a01 	add.w	sl, sl, #1
 81133f0:	e22f      	b.n	8113852 <_dtoa_r+0x8fa>
 81133f2:	07f2      	lsls	r2, r6, #31
 81133f4:	d505      	bpl.n	8113402 <_dtoa_r+0x4aa>
 81133f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81133fa:	f7ed f995 	bl	8100728 <__aeabi_dmul>
 81133fe:	3501      	adds	r5, #1
 8113400:	2301      	movs	r3, #1
 8113402:	1076      	asrs	r6, r6, #1
 8113404:	3708      	adds	r7, #8
 8113406:	e772      	b.n	81132ee <_dtoa_r+0x396>
 8113408:	2502      	movs	r5, #2
 811340a:	e774      	b.n	81132f6 <_dtoa_r+0x39e>
 811340c:	f8cd a020 	str.w	sl, [sp, #32]
 8113410:	464f      	mov	r7, r9
 8113412:	e791      	b.n	8113338 <_dtoa_r+0x3e0>
 8113414:	4b4d      	ldr	r3, [pc, #308]	; (811354c <_dtoa_r+0x5f4>)
 8113416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 811341a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 811341e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8113420:	2b00      	cmp	r3, #0
 8113422:	d047      	beq.n	81134b4 <_dtoa_r+0x55c>
 8113424:	4602      	mov	r2, r0
 8113426:	460b      	mov	r3, r1
 8113428:	2000      	movs	r0, #0
 811342a:	494e      	ldr	r1, [pc, #312]	; (8113564 <_dtoa_r+0x60c>)
 811342c:	f7ed faa6 	bl	810097c <__aeabi_ddiv>
 8113430:	462a      	mov	r2, r5
 8113432:	4633      	mov	r3, r6
 8113434:	f7ec ffc0 	bl	81003b8 <__aeabi_dsub>
 8113438:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 811343c:	465d      	mov	r5, fp
 811343e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8113442:	f7ed fc21 	bl	8100c88 <__aeabi_d2iz>
 8113446:	4606      	mov	r6, r0
 8113448:	f7ed f904 	bl	8100654 <__aeabi_i2d>
 811344c:	4602      	mov	r2, r0
 811344e:	460b      	mov	r3, r1
 8113450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8113454:	f7ec ffb0 	bl	81003b8 <__aeabi_dsub>
 8113458:	3630      	adds	r6, #48	; 0x30
 811345a:	f805 6b01 	strb.w	r6, [r5], #1
 811345e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8113462:	e9cd 0100 	strd	r0, r1, [sp]
 8113466:	f7ed fbd1 	bl	8100c0c <__aeabi_dcmplt>
 811346a:	2800      	cmp	r0, #0
 811346c:	d163      	bne.n	8113536 <_dtoa_r+0x5de>
 811346e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8113472:	2000      	movs	r0, #0
 8113474:	4937      	ldr	r1, [pc, #220]	; (8113554 <_dtoa_r+0x5fc>)
 8113476:	f7ec ff9f 	bl	81003b8 <__aeabi_dsub>
 811347a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 811347e:	f7ed fbc5 	bl	8100c0c <__aeabi_dcmplt>
 8113482:	2800      	cmp	r0, #0
 8113484:	f040 80b7 	bne.w	81135f6 <_dtoa_r+0x69e>
 8113488:	eba5 030b 	sub.w	r3, r5, fp
 811348c:	429f      	cmp	r7, r3
 811348e:	f77f af7c 	ble.w	811338a <_dtoa_r+0x432>
 8113492:	2200      	movs	r2, #0
 8113494:	4b30      	ldr	r3, [pc, #192]	; (8113558 <_dtoa_r+0x600>)
 8113496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 811349a:	f7ed f945 	bl	8100728 <__aeabi_dmul>
 811349e:	2200      	movs	r2, #0
 81134a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 81134a4:	4b2c      	ldr	r3, [pc, #176]	; (8113558 <_dtoa_r+0x600>)
 81134a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 81134aa:	f7ed f93d 	bl	8100728 <__aeabi_dmul>
 81134ae:	e9cd 0100 	strd	r0, r1, [sp]
 81134b2:	e7c4      	b.n	811343e <_dtoa_r+0x4e6>
 81134b4:	462a      	mov	r2, r5
 81134b6:	4633      	mov	r3, r6
 81134b8:	f7ed f936 	bl	8100728 <__aeabi_dmul>
 81134bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 81134c0:	eb0b 0507 	add.w	r5, fp, r7
 81134c4:	465e      	mov	r6, fp
 81134c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 81134ca:	f7ed fbdd 	bl	8100c88 <__aeabi_d2iz>
 81134ce:	4607      	mov	r7, r0
 81134d0:	f7ed f8c0 	bl	8100654 <__aeabi_i2d>
 81134d4:	3730      	adds	r7, #48	; 0x30
 81134d6:	4602      	mov	r2, r0
 81134d8:	460b      	mov	r3, r1
 81134da:	e9dd 0100 	ldrd	r0, r1, [sp]
 81134de:	f7ec ff6b 	bl	81003b8 <__aeabi_dsub>
 81134e2:	f806 7b01 	strb.w	r7, [r6], #1
 81134e6:	42ae      	cmp	r6, r5
 81134e8:	e9cd 0100 	strd	r0, r1, [sp]
 81134ec:	f04f 0200 	mov.w	r2, #0
 81134f0:	d126      	bne.n	8113540 <_dtoa_r+0x5e8>
 81134f2:	4b1c      	ldr	r3, [pc, #112]	; (8113564 <_dtoa_r+0x60c>)
 81134f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81134f8:	f7ec ff60 	bl	81003bc <__adddf3>
 81134fc:	4602      	mov	r2, r0
 81134fe:	460b      	mov	r3, r1
 8113500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8113504:	f7ed fba0 	bl	8100c48 <__aeabi_dcmpgt>
 8113508:	2800      	cmp	r0, #0
 811350a:	d174      	bne.n	81135f6 <_dtoa_r+0x69e>
 811350c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8113510:	2000      	movs	r0, #0
 8113512:	4914      	ldr	r1, [pc, #80]	; (8113564 <_dtoa_r+0x60c>)
 8113514:	f7ec ff50 	bl	81003b8 <__aeabi_dsub>
 8113518:	4602      	mov	r2, r0
 811351a:	460b      	mov	r3, r1
 811351c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8113520:	f7ed fb74 	bl	8100c0c <__aeabi_dcmplt>
 8113524:	2800      	cmp	r0, #0
 8113526:	f43f af30 	beq.w	811338a <_dtoa_r+0x432>
 811352a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 811352e:	2b30      	cmp	r3, #48	; 0x30
 8113530:	f105 32ff 	add.w	r2, r5, #4294967295
 8113534:	d002      	beq.n	811353c <_dtoa_r+0x5e4>
 8113536:	f8dd a020 	ldr.w	sl, [sp, #32]
 811353a:	e04a      	b.n	81135d2 <_dtoa_r+0x67a>
 811353c:	4615      	mov	r5, r2
 811353e:	e7f4      	b.n	811352a <_dtoa_r+0x5d2>
 8113540:	4b05      	ldr	r3, [pc, #20]	; (8113558 <_dtoa_r+0x600>)
 8113542:	f7ed f8f1 	bl	8100728 <__aeabi_dmul>
 8113546:	e9cd 0100 	strd	r0, r1, [sp]
 811354a:	e7bc      	b.n	81134c6 <_dtoa_r+0x56e>
 811354c:	08115f58 	.word	0x08115f58
 8113550:	08115f30 	.word	0x08115f30
 8113554:	3ff00000 	.word	0x3ff00000
 8113558:	40240000 	.word	0x40240000
 811355c:	401c0000 	.word	0x401c0000
 8113560:	40140000 	.word	0x40140000
 8113564:	3fe00000 	.word	0x3fe00000
 8113568:	e9dd 6700 	ldrd	r6, r7, [sp]
 811356c:	465d      	mov	r5, fp
 811356e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8113572:	4630      	mov	r0, r6
 8113574:	4639      	mov	r1, r7
 8113576:	f7ed fa01 	bl	810097c <__aeabi_ddiv>
 811357a:	f7ed fb85 	bl	8100c88 <__aeabi_d2iz>
 811357e:	4680      	mov	r8, r0
 8113580:	f7ed f868 	bl	8100654 <__aeabi_i2d>
 8113584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8113588:	f7ed f8ce 	bl	8100728 <__aeabi_dmul>
 811358c:	4602      	mov	r2, r0
 811358e:	460b      	mov	r3, r1
 8113590:	4630      	mov	r0, r6
 8113592:	4639      	mov	r1, r7
 8113594:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8113598:	f7ec ff0e 	bl	81003b8 <__aeabi_dsub>
 811359c:	f805 6b01 	strb.w	r6, [r5], #1
 81135a0:	eba5 060b 	sub.w	r6, r5, fp
 81135a4:	45b1      	cmp	r9, r6
 81135a6:	4602      	mov	r2, r0
 81135a8:	460b      	mov	r3, r1
 81135aa:	d139      	bne.n	8113620 <_dtoa_r+0x6c8>
 81135ac:	f7ec ff06 	bl	81003bc <__adddf3>
 81135b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81135b4:	4606      	mov	r6, r0
 81135b6:	460f      	mov	r7, r1
 81135b8:	f7ed fb46 	bl	8100c48 <__aeabi_dcmpgt>
 81135bc:	b9c8      	cbnz	r0, 81135f2 <_dtoa_r+0x69a>
 81135be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81135c2:	4630      	mov	r0, r6
 81135c4:	4639      	mov	r1, r7
 81135c6:	f7ed fb17 	bl	8100bf8 <__aeabi_dcmpeq>
 81135ca:	b110      	cbz	r0, 81135d2 <_dtoa_r+0x67a>
 81135cc:	f018 0f01 	tst.w	r8, #1
 81135d0:	d10f      	bne.n	81135f2 <_dtoa_r+0x69a>
 81135d2:	9904      	ldr	r1, [sp, #16]
 81135d4:	4620      	mov	r0, r4
 81135d6:	f000 fcb5 	bl	8113f44 <_Bfree>
 81135da:	2300      	movs	r3, #0
 81135dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81135de:	702b      	strb	r3, [r5, #0]
 81135e0:	f10a 0301 	add.w	r3, sl, #1
 81135e4:	6013      	str	r3, [r2, #0]
 81135e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81135e8:	2b00      	cmp	r3, #0
 81135ea:	f000 8241 	beq.w	8113a70 <_dtoa_r+0xb18>
 81135ee:	601d      	str	r5, [r3, #0]
 81135f0:	e23e      	b.n	8113a70 <_dtoa_r+0xb18>
 81135f2:	f8cd a020 	str.w	sl, [sp, #32]
 81135f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 81135fa:	2a39      	cmp	r2, #57	; 0x39
 81135fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8113600:	d108      	bne.n	8113614 <_dtoa_r+0x6bc>
 8113602:	459b      	cmp	fp, r3
 8113604:	d10a      	bne.n	811361c <_dtoa_r+0x6c4>
 8113606:	9b08      	ldr	r3, [sp, #32]
 8113608:	3301      	adds	r3, #1
 811360a:	9308      	str	r3, [sp, #32]
 811360c:	2330      	movs	r3, #48	; 0x30
 811360e:	f88b 3000 	strb.w	r3, [fp]
 8113612:	465b      	mov	r3, fp
 8113614:	781a      	ldrb	r2, [r3, #0]
 8113616:	3201      	adds	r2, #1
 8113618:	701a      	strb	r2, [r3, #0]
 811361a:	e78c      	b.n	8113536 <_dtoa_r+0x5de>
 811361c:	461d      	mov	r5, r3
 811361e:	e7ea      	b.n	81135f6 <_dtoa_r+0x69e>
 8113620:	2200      	movs	r2, #0
 8113622:	4b9b      	ldr	r3, [pc, #620]	; (8113890 <_dtoa_r+0x938>)
 8113624:	f7ed f880 	bl	8100728 <__aeabi_dmul>
 8113628:	2200      	movs	r2, #0
 811362a:	2300      	movs	r3, #0
 811362c:	4606      	mov	r6, r0
 811362e:	460f      	mov	r7, r1
 8113630:	f7ed fae2 	bl	8100bf8 <__aeabi_dcmpeq>
 8113634:	2800      	cmp	r0, #0
 8113636:	d09a      	beq.n	811356e <_dtoa_r+0x616>
 8113638:	e7cb      	b.n	81135d2 <_dtoa_r+0x67a>
 811363a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 811363c:	2a00      	cmp	r2, #0
 811363e:	f000 808b 	beq.w	8113758 <_dtoa_r+0x800>
 8113642:	9a06      	ldr	r2, [sp, #24]
 8113644:	2a01      	cmp	r2, #1
 8113646:	dc6e      	bgt.n	8113726 <_dtoa_r+0x7ce>
 8113648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 811364a:	2a00      	cmp	r2, #0
 811364c:	d067      	beq.n	811371e <_dtoa_r+0x7c6>
 811364e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8113652:	9f07      	ldr	r7, [sp, #28]
 8113654:	9d05      	ldr	r5, [sp, #20]
 8113656:	9a05      	ldr	r2, [sp, #20]
 8113658:	2101      	movs	r1, #1
 811365a:	441a      	add	r2, r3
 811365c:	4620      	mov	r0, r4
 811365e:	9205      	str	r2, [sp, #20]
 8113660:	4498      	add	r8, r3
 8113662:	f000 fd0f 	bl	8114084 <__i2b>
 8113666:	4606      	mov	r6, r0
 8113668:	2d00      	cmp	r5, #0
 811366a:	dd0c      	ble.n	8113686 <_dtoa_r+0x72e>
 811366c:	f1b8 0f00 	cmp.w	r8, #0
 8113670:	dd09      	ble.n	8113686 <_dtoa_r+0x72e>
 8113672:	4545      	cmp	r5, r8
 8113674:	9a05      	ldr	r2, [sp, #20]
 8113676:	462b      	mov	r3, r5
 8113678:	bfa8      	it	ge
 811367a:	4643      	movge	r3, r8
 811367c:	1ad2      	subs	r2, r2, r3
 811367e:	9205      	str	r2, [sp, #20]
 8113680:	1aed      	subs	r5, r5, r3
 8113682:	eba8 0803 	sub.w	r8, r8, r3
 8113686:	9b07      	ldr	r3, [sp, #28]
 8113688:	b1eb      	cbz	r3, 81136c6 <_dtoa_r+0x76e>
 811368a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811368c:	2b00      	cmp	r3, #0
 811368e:	d067      	beq.n	8113760 <_dtoa_r+0x808>
 8113690:	b18f      	cbz	r7, 81136b6 <_dtoa_r+0x75e>
 8113692:	4631      	mov	r1, r6
 8113694:	463a      	mov	r2, r7
 8113696:	4620      	mov	r0, r4
 8113698:	f000 fd94 	bl	81141c4 <__pow5mult>
 811369c:	9a04      	ldr	r2, [sp, #16]
 811369e:	4601      	mov	r1, r0
 81136a0:	4606      	mov	r6, r0
 81136a2:	4620      	mov	r0, r4
 81136a4:	f000 fcf7 	bl	8114096 <__multiply>
 81136a8:	9904      	ldr	r1, [sp, #16]
 81136aa:	9008      	str	r0, [sp, #32]
 81136ac:	4620      	mov	r0, r4
 81136ae:	f000 fc49 	bl	8113f44 <_Bfree>
 81136b2:	9b08      	ldr	r3, [sp, #32]
 81136b4:	9304      	str	r3, [sp, #16]
 81136b6:	9b07      	ldr	r3, [sp, #28]
 81136b8:	1bda      	subs	r2, r3, r7
 81136ba:	d004      	beq.n	81136c6 <_dtoa_r+0x76e>
 81136bc:	9904      	ldr	r1, [sp, #16]
 81136be:	4620      	mov	r0, r4
 81136c0:	f000 fd80 	bl	81141c4 <__pow5mult>
 81136c4:	9004      	str	r0, [sp, #16]
 81136c6:	2101      	movs	r1, #1
 81136c8:	4620      	mov	r0, r4
 81136ca:	f000 fcdb 	bl	8114084 <__i2b>
 81136ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81136d0:	4607      	mov	r7, r0
 81136d2:	2b00      	cmp	r3, #0
 81136d4:	f000 81d0 	beq.w	8113a78 <_dtoa_r+0xb20>
 81136d8:	461a      	mov	r2, r3
 81136da:	4601      	mov	r1, r0
 81136dc:	4620      	mov	r0, r4
 81136de:	f000 fd71 	bl	81141c4 <__pow5mult>
 81136e2:	9b06      	ldr	r3, [sp, #24]
 81136e4:	2b01      	cmp	r3, #1
 81136e6:	4607      	mov	r7, r0
 81136e8:	dc40      	bgt.n	811376c <_dtoa_r+0x814>
 81136ea:	9b00      	ldr	r3, [sp, #0]
 81136ec:	2b00      	cmp	r3, #0
 81136ee:	d139      	bne.n	8113764 <_dtoa_r+0x80c>
 81136f0:	9b01      	ldr	r3, [sp, #4]
 81136f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81136f6:	2b00      	cmp	r3, #0
 81136f8:	d136      	bne.n	8113768 <_dtoa_r+0x810>
 81136fa:	9b01      	ldr	r3, [sp, #4]
 81136fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8113700:	0d1b      	lsrs	r3, r3, #20
 8113702:	051b      	lsls	r3, r3, #20
 8113704:	b12b      	cbz	r3, 8113712 <_dtoa_r+0x7ba>
 8113706:	9b05      	ldr	r3, [sp, #20]
 8113708:	3301      	adds	r3, #1
 811370a:	9305      	str	r3, [sp, #20]
 811370c:	f108 0801 	add.w	r8, r8, #1
 8113710:	2301      	movs	r3, #1
 8113712:	9307      	str	r3, [sp, #28]
 8113714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8113716:	2b00      	cmp	r3, #0
 8113718:	d12a      	bne.n	8113770 <_dtoa_r+0x818>
 811371a:	2001      	movs	r0, #1
 811371c:	e030      	b.n	8113780 <_dtoa_r+0x828>
 811371e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8113720:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8113724:	e795      	b.n	8113652 <_dtoa_r+0x6fa>
 8113726:	9b07      	ldr	r3, [sp, #28]
 8113728:	f109 37ff 	add.w	r7, r9, #4294967295
 811372c:	42bb      	cmp	r3, r7
 811372e:	bfbf      	itttt	lt
 8113730:	9b07      	ldrlt	r3, [sp, #28]
 8113732:	9707      	strlt	r7, [sp, #28]
 8113734:	1afa      	sublt	r2, r7, r3
 8113736:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8113738:	bfbb      	ittet	lt
 811373a:	189b      	addlt	r3, r3, r2
 811373c:	930e      	strlt	r3, [sp, #56]	; 0x38
 811373e:	1bdf      	subge	r7, r3, r7
 8113740:	2700      	movlt	r7, #0
 8113742:	f1b9 0f00 	cmp.w	r9, #0
 8113746:	bfb5      	itete	lt
 8113748:	9b05      	ldrlt	r3, [sp, #20]
 811374a:	9d05      	ldrge	r5, [sp, #20]
 811374c:	eba3 0509 	sublt.w	r5, r3, r9
 8113750:	464b      	movge	r3, r9
 8113752:	bfb8      	it	lt
 8113754:	2300      	movlt	r3, #0
 8113756:	e77e      	b.n	8113656 <_dtoa_r+0x6fe>
 8113758:	9f07      	ldr	r7, [sp, #28]
 811375a:	9d05      	ldr	r5, [sp, #20]
 811375c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 811375e:	e783      	b.n	8113668 <_dtoa_r+0x710>
 8113760:	9a07      	ldr	r2, [sp, #28]
 8113762:	e7ab      	b.n	81136bc <_dtoa_r+0x764>
 8113764:	2300      	movs	r3, #0
 8113766:	e7d4      	b.n	8113712 <_dtoa_r+0x7ba>
 8113768:	9b00      	ldr	r3, [sp, #0]
 811376a:	e7d2      	b.n	8113712 <_dtoa_r+0x7ba>
 811376c:	2300      	movs	r3, #0
 811376e:	9307      	str	r3, [sp, #28]
 8113770:	693b      	ldr	r3, [r7, #16]
 8113772:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8113776:	6918      	ldr	r0, [r3, #16]
 8113778:	f000 fc36 	bl	8113fe8 <__hi0bits>
 811377c:	f1c0 0020 	rsb	r0, r0, #32
 8113780:	4440      	add	r0, r8
 8113782:	f010 001f 	ands.w	r0, r0, #31
 8113786:	d047      	beq.n	8113818 <_dtoa_r+0x8c0>
 8113788:	f1c0 0320 	rsb	r3, r0, #32
 811378c:	2b04      	cmp	r3, #4
 811378e:	dd3b      	ble.n	8113808 <_dtoa_r+0x8b0>
 8113790:	9b05      	ldr	r3, [sp, #20]
 8113792:	f1c0 001c 	rsb	r0, r0, #28
 8113796:	4403      	add	r3, r0
 8113798:	9305      	str	r3, [sp, #20]
 811379a:	4405      	add	r5, r0
 811379c:	4480      	add	r8, r0
 811379e:	9b05      	ldr	r3, [sp, #20]
 81137a0:	2b00      	cmp	r3, #0
 81137a2:	dd05      	ble.n	81137b0 <_dtoa_r+0x858>
 81137a4:	461a      	mov	r2, r3
 81137a6:	9904      	ldr	r1, [sp, #16]
 81137a8:	4620      	mov	r0, r4
 81137aa:	f000 fd59 	bl	8114260 <__lshift>
 81137ae:	9004      	str	r0, [sp, #16]
 81137b0:	f1b8 0f00 	cmp.w	r8, #0
 81137b4:	dd05      	ble.n	81137c2 <_dtoa_r+0x86a>
 81137b6:	4639      	mov	r1, r7
 81137b8:	4642      	mov	r2, r8
 81137ba:	4620      	mov	r0, r4
 81137bc:	f000 fd50 	bl	8114260 <__lshift>
 81137c0:	4607      	mov	r7, r0
 81137c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81137c4:	b353      	cbz	r3, 811381c <_dtoa_r+0x8c4>
 81137c6:	4639      	mov	r1, r7
 81137c8:	9804      	ldr	r0, [sp, #16]
 81137ca:	f000 fd9d 	bl	8114308 <__mcmp>
 81137ce:	2800      	cmp	r0, #0
 81137d0:	da24      	bge.n	811381c <_dtoa_r+0x8c4>
 81137d2:	2300      	movs	r3, #0
 81137d4:	220a      	movs	r2, #10
 81137d6:	9904      	ldr	r1, [sp, #16]
 81137d8:	4620      	mov	r0, r4
 81137da:	f000 fbca 	bl	8113f72 <__multadd>
 81137de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81137e0:	9004      	str	r0, [sp, #16]
 81137e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81137e6:	2b00      	cmp	r3, #0
 81137e8:	f000 814d 	beq.w	8113a86 <_dtoa_r+0xb2e>
 81137ec:	2300      	movs	r3, #0
 81137ee:	4631      	mov	r1, r6
 81137f0:	220a      	movs	r2, #10
 81137f2:	4620      	mov	r0, r4
 81137f4:	f000 fbbd 	bl	8113f72 <__multadd>
 81137f8:	9b02      	ldr	r3, [sp, #8]
 81137fa:	2b00      	cmp	r3, #0
 81137fc:	4606      	mov	r6, r0
 81137fe:	dc4f      	bgt.n	81138a0 <_dtoa_r+0x948>
 8113800:	9b06      	ldr	r3, [sp, #24]
 8113802:	2b02      	cmp	r3, #2
 8113804:	dd4c      	ble.n	81138a0 <_dtoa_r+0x948>
 8113806:	e011      	b.n	811382c <_dtoa_r+0x8d4>
 8113808:	d0c9      	beq.n	811379e <_dtoa_r+0x846>
 811380a:	9a05      	ldr	r2, [sp, #20]
 811380c:	331c      	adds	r3, #28
 811380e:	441a      	add	r2, r3
 8113810:	9205      	str	r2, [sp, #20]
 8113812:	441d      	add	r5, r3
 8113814:	4498      	add	r8, r3
 8113816:	e7c2      	b.n	811379e <_dtoa_r+0x846>
 8113818:	4603      	mov	r3, r0
 811381a:	e7f6      	b.n	811380a <_dtoa_r+0x8b2>
 811381c:	f1b9 0f00 	cmp.w	r9, #0
 8113820:	dc38      	bgt.n	8113894 <_dtoa_r+0x93c>
 8113822:	9b06      	ldr	r3, [sp, #24]
 8113824:	2b02      	cmp	r3, #2
 8113826:	dd35      	ble.n	8113894 <_dtoa_r+0x93c>
 8113828:	f8cd 9008 	str.w	r9, [sp, #8]
 811382c:	9b02      	ldr	r3, [sp, #8]
 811382e:	b963      	cbnz	r3, 811384a <_dtoa_r+0x8f2>
 8113830:	4639      	mov	r1, r7
 8113832:	2205      	movs	r2, #5
 8113834:	4620      	mov	r0, r4
 8113836:	f000 fb9c 	bl	8113f72 <__multadd>
 811383a:	4601      	mov	r1, r0
 811383c:	4607      	mov	r7, r0
 811383e:	9804      	ldr	r0, [sp, #16]
 8113840:	f000 fd62 	bl	8114308 <__mcmp>
 8113844:	2800      	cmp	r0, #0
 8113846:	f73f adcc 	bgt.w	81133e2 <_dtoa_r+0x48a>
 811384a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 811384c:	465d      	mov	r5, fp
 811384e:	ea6f 0a03 	mvn.w	sl, r3
 8113852:	f04f 0900 	mov.w	r9, #0
 8113856:	4639      	mov	r1, r7
 8113858:	4620      	mov	r0, r4
 811385a:	f000 fb73 	bl	8113f44 <_Bfree>
 811385e:	2e00      	cmp	r6, #0
 8113860:	f43f aeb7 	beq.w	81135d2 <_dtoa_r+0x67a>
 8113864:	f1b9 0f00 	cmp.w	r9, #0
 8113868:	d005      	beq.n	8113876 <_dtoa_r+0x91e>
 811386a:	45b1      	cmp	r9, r6
 811386c:	d003      	beq.n	8113876 <_dtoa_r+0x91e>
 811386e:	4649      	mov	r1, r9
 8113870:	4620      	mov	r0, r4
 8113872:	f000 fb67 	bl	8113f44 <_Bfree>
 8113876:	4631      	mov	r1, r6
 8113878:	4620      	mov	r0, r4
 811387a:	f000 fb63 	bl	8113f44 <_Bfree>
 811387e:	e6a8      	b.n	81135d2 <_dtoa_r+0x67a>
 8113880:	2700      	movs	r7, #0
 8113882:	463e      	mov	r6, r7
 8113884:	e7e1      	b.n	811384a <_dtoa_r+0x8f2>
 8113886:	f8dd a020 	ldr.w	sl, [sp, #32]
 811388a:	463e      	mov	r6, r7
 811388c:	e5a9      	b.n	81133e2 <_dtoa_r+0x48a>
 811388e:	bf00      	nop
 8113890:	40240000 	.word	0x40240000
 8113894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8113896:	f8cd 9008 	str.w	r9, [sp, #8]
 811389a:	2b00      	cmp	r3, #0
 811389c:	f000 80fa 	beq.w	8113a94 <_dtoa_r+0xb3c>
 81138a0:	2d00      	cmp	r5, #0
 81138a2:	dd05      	ble.n	81138b0 <_dtoa_r+0x958>
 81138a4:	4631      	mov	r1, r6
 81138a6:	462a      	mov	r2, r5
 81138a8:	4620      	mov	r0, r4
 81138aa:	f000 fcd9 	bl	8114260 <__lshift>
 81138ae:	4606      	mov	r6, r0
 81138b0:	9b07      	ldr	r3, [sp, #28]
 81138b2:	2b00      	cmp	r3, #0
 81138b4:	d04c      	beq.n	8113950 <_dtoa_r+0x9f8>
 81138b6:	6871      	ldr	r1, [r6, #4]
 81138b8:	4620      	mov	r0, r4
 81138ba:	f000 fb0f 	bl	8113edc <_Balloc>
 81138be:	6932      	ldr	r2, [r6, #16]
 81138c0:	3202      	adds	r2, #2
 81138c2:	4605      	mov	r5, r0
 81138c4:	0092      	lsls	r2, r2, #2
 81138c6:	f106 010c 	add.w	r1, r6, #12
 81138ca:	300c      	adds	r0, #12
 81138cc:	f7fe fb92 	bl	8111ff4 <memcpy>
 81138d0:	2201      	movs	r2, #1
 81138d2:	4629      	mov	r1, r5
 81138d4:	4620      	mov	r0, r4
 81138d6:	f000 fcc3 	bl	8114260 <__lshift>
 81138da:	9b00      	ldr	r3, [sp, #0]
 81138dc:	f8cd b014 	str.w	fp, [sp, #20]
 81138e0:	f003 0301 	and.w	r3, r3, #1
 81138e4:	46b1      	mov	r9, r6
 81138e6:	9307      	str	r3, [sp, #28]
 81138e8:	4606      	mov	r6, r0
 81138ea:	4639      	mov	r1, r7
 81138ec:	9804      	ldr	r0, [sp, #16]
 81138ee:	f7ff faa7 	bl	8112e40 <quorem>
 81138f2:	4649      	mov	r1, r9
 81138f4:	4605      	mov	r5, r0
 81138f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 81138fa:	9804      	ldr	r0, [sp, #16]
 81138fc:	f000 fd04 	bl	8114308 <__mcmp>
 8113900:	4632      	mov	r2, r6
 8113902:	9000      	str	r0, [sp, #0]
 8113904:	4639      	mov	r1, r7
 8113906:	4620      	mov	r0, r4
 8113908:	f000 fd18 	bl	811433c <__mdiff>
 811390c:	68c3      	ldr	r3, [r0, #12]
 811390e:	4602      	mov	r2, r0
 8113910:	bb03      	cbnz	r3, 8113954 <_dtoa_r+0x9fc>
 8113912:	4601      	mov	r1, r0
 8113914:	9008      	str	r0, [sp, #32]
 8113916:	9804      	ldr	r0, [sp, #16]
 8113918:	f000 fcf6 	bl	8114308 <__mcmp>
 811391c:	9a08      	ldr	r2, [sp, #32]
 811391e:	4603      	mov	r3, r0
 8113920:	4611      	mov	r1, r2
 8113922:	4620      	mov	r0, r4
 8113924:	9308      	str	r3, [sp, #32]
 8113926:	f000 fb0d 	bl	8113f44 <_Bfree>
 811392a:	9b08      	ldr	r3, [sp, #32]
 811392c:	b9a3      	cbnz	r3, 8113958 <_dtoa_r+0xa00>
 811392e:	9a06      	ldr	r2, [sp, #24]
 8113930:	b992      	cbnz	r2, 8113958 <_dtoa_r+0xa00>
 8113932:	9a07      	ldr	r2, [sp, #28]
 8113934:	b982      	cbnz	r2, 8113958 <_dtoa_r+0xa00>
 8113936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 811393a:	d029      	beq.n	8113990 <_dtoa_r+0xa38>
 811393c:	9b00      	ldr	r3, [sp, #0]
 811393e:	2b00      	cmp	r3, #0
 8113940:	dd01      	ble.n	8113946 <_dtoa_r+0x9ee>
 8113942:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8113946:	9b05      	ldr	r3, [sp, #20]
 8113948:	1c5d      	adds	r5, r3, #1
 811394a:	f883 8000 	strb.w	r8, [r3]
 811394e:	e782      	b.n	8113856 <_dtoa_r+0x8fe>
 8113950:	4630      	mov	r0, r6
 8113952:	e7c2      	b.n	81138da <_dtoa_r+0x982>
 8113954:	2301      	movs	r3, #1
 8113956:	e7e3      	b.n	8113920 <_dtoa_r+0x9c8>
 8113958:	9a00      	ldr	r2, [sp, #0]
 811395a:	2a00      	cmp	r2, #0
 811395c:	db04      	blt.n	8113968 <_dtoa_r+0xa10>
 811395e:	d125      	bne.n	81139ac <_dtoa_r+0xa54>
 8113960:	9a06      	ldr	r2, [sp, #24]
 8113962:	bb1a      	cbnz	r2, 81139ac <_dtoa_r+0xa54>
 8113964:	9a07      	ldr	r2, [sp, #28]
 8113966:	bb0a      	cbnz	r2, 81139ac <_dtoa_r+0xa54>
 8113968:	2b00      	cmp	r3, #0
 811396a:	ddec      	ble.n	8113946 <_dtoa_r+0x9ee>
 811396c:	2201      	movs	r2, #1
 811396e:	9904      	ldr	r1, [sp, #16]
 8113970:	4620      	mov	r0, r4
 8113972:	f000 fc75 	bl	8114260 <__lshift>
 8113976:	4639      	mov	r1, r7
 8113978:	9004      	str	r0, [sp, #16]
 811397a:	f000 fcc5 	bl	8114308 <__mcmp>
 811397e:	2800      	cmp	r0, #0
 8113980:	dc03      	bgt.n	811398a <_dtoa_r+0xa32>
 8113982:	d1e0      	bne.n	8113946 <_dtoa_r+0x9ee>
 8113984:	f018 0f01 	tst.w	r8, #1
 8113988:	d0dd      	beq.n	8113946 <_dtoa_r+0x9ee>
 811398a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 811398e:	d1d8      	bne.n	8113942 <_dtoa_r+0x9ea>
 8113990:	9b05      	ldr	r3, [sp, #20]
 8113992:	9a05      	ldr	r2, [sp, #20]
 8113994:	1c5d      	adds	r5, r3, #1
 8113996:	2339      	movs	r3, #57	; 0x39
 8113998:	7013      	strb	r3, [r2, #0]
 811399a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 811399e:	2b39      	cmp	r3, #57	; 0x39
 81139a0:	f105 32ff 	add.w	r2, r5, #4294967295
 81139a4:	d04f      	beq.n	8113a46 <_dtoa_r+0xaee>
 81139a6:	3301      	adds	r3, #1
 81139a8:	7013      	strb	r3, [r2, #0]
 81139aa:	e754      	b.n	8113856 <_dtoa_r+0x8fe>
 81139ac:	9a05      	ldr	r2, [sp, #20]
 81139ae:	2b00      	cmp	r3, #0
 81139b0:	f102 0501 	add.w	r5, r2, #1
 81139b4:	dd06      	ble.n	81139c4 <_dtoa_r+0xa6c>
 81139b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 81139ba:	d0e9      	beq.n	8113990 <_dtoa_r+0xa38>
 81139bc:	f108 0801 	add.w	r8, r8, #1
 81139c0:	9b05      	ldr	r3, [sp, #20]
 81139c2:	e7c2      	b.n	811394a <_dtoa_r+0x9f2>
 81139c4:	9a02      	ldr	r2, [sp, #8]
 81139c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 81139ca:	eba5 030b 	sub.w	r3, r5, fp
 81139ce:	4293      	cmp	r3, r2
 81139d0:	d021      	beq.n	8113a16 <_dtoa_r+0xabe>
 81139d2:	2300      	movs	r3, #0
 81139d4:	220a      	movs	r2, #10
 81139d6:	9904      	ldr	r1, [sp, #16]
 81139d8:	4620      	mov	r0, r4
 81139da:	f000 faca 	bl	8113f72 <__multadd>
 81139de:	45b1      	cmp	r9, r6
 81139e0:	9004      	str	r0, [sp, #16]
 81139e2:	f04f 0300 	mov.w	r3, #0
 81139e6:	f04f 020a 	mov.w	r2, #10
 81139ea:	4649      	mov	r1, r9
 81139ec:	4620      	mov	r0, r4
 81139ee:	d105      	bne.n	81139fc <_dtoa_r+0xaa4>
 81139f0:	f000 fabf 	bl	8113f72 <__multadd>
 81139f4:	4681      	mov	r9, r0
 81139f6:	4606      	mov	r6, r0
 81139f8:	9505      	str	r5, [sp, #20]
 81139fa:	e776      	b.n	81138ea <_dtoa_r+0x992>
 81139fc:	f000 fab9 	bl	8113f72 <__multadd>
 8113a00:	4631      	mov	r1, r6
 8113a02:	4681      	mov	r9, r0
 8113a04:	2300      	movs	r3, #0
 8113a06:	220a      	movs	r2, #10
 8113a08:	4620      	mov	r0, r4
 8113a0a:	f000 fab2 	bl	8113f72 <__multadd>
 8113a0e:	4606      	mov	r6, r0
 8113a10:	e7f2      	b.n	81139f8 <_dtoa_r+0xaa0>
 8113a12:	f04f 0900 	mov.w	r9, #0
 8113a16:	2201      	movs	r2, #1
 8113a18:	9904      	ldr	r1, [sp, #16]
 8113a1a:	4620      	mov	r0, r4
 8113a1c:	f000 fc20 	bl	8114260 <__lshift>
 8113a20:	4639      	mov	r1, r7
 8113a22:	9004      	str	r0, [sp, #16]
 8113a24:	f000 fc70 	bl	8114308 <__mcmp>
 8113a28:	2800      	cmp	r0, #0
 8113a2a:	dcb6      	bgt.n	811399a <_dtoa_r+0xa42>
 8113a2c:	d102      	bne.n	8113a34 <_dtoa_r+0xadc>
 8113a2e:	f018 0f01 	tst.w	r8, #1
 8113a32:	d1b2      	bne.n	811399a <_dtoa_r+0xa42>
 8113a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8113a38:	2b30      	cmp	r3, #48	; 0x30
 8113a3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8113a3e:	f47f af0a 	bne.w	8113856 <_dtoa_r+0x8fe>
 8113a42:	4615      	mov	r5, r2
 8113a44:	e7f6      	b.n	8113a34 <_dtoa_r+0xadc>
 8113a46:	4593      	cmp	fp, r2
 8113a48:	d105      	bne.n	8113a56 <_dtoa_r+0xafe>
 8113a4a:	2331      	movs	r3, #49	; 0x31
 8113a4c:	f10a 0a01 	add.w	sl, sl, #1
 8113a50:	f88b 3000 	strb.w	r3, [fp]
 8113a54:	e6ff      	b.n	8113856 <_dtoa_r+0x8fe>
 8113a56:	4615      	mov	r5, r2
 8113a58:	e79f      	b.n	811399a <_dtoa_r+0xa42>
 8113a5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8113ac0 <_dtoa_r+0xb68>
 8113a5e:	e007      	b.n	8113a70 <_dtoa_r+0xb18>
 8113a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8113a62:	f8df b060 	ldr.w	fp, [pc, #96]	; 8113ac4 <_dtoa_r+0xb6c>
 8113a66:	b11b      	cbz	r3, 8113a70 <_dtoa_r+0xb18>
 8113a68:	f10b 0308 	add.w	r3, fp, #8
 8113a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8113a6e:	6013      	str	r3, [r2, #0]
 8113a70:	4658      	mov	r0, fp
 8113a72:	b017      	add	sp, #92	; 0x5c
 8113a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113a78:	9b06      	ldr	r3, [sp, #24]
 8113a7a:	2b01      	cmp	r3, #1
 8113a7c:	f77f ae35 	ble.w	81136ea <_dtoa_r+0x792>
 8113a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8113a82:	9307      	str	r3, [sp, #28]
 8113a84:	e649      	b.n	811371a <_dtoa_r+0x7c2>
 8113a86:	9b02      	ldr	r3, [sp, #8]
 8113a88:	2b00      	cmp	r3, #0
 8113a8a:	dc03      	bgt.n	8113a94 <_dtoa_r+0xb3c>
 8113a8c:	9b06      	ldr	r3, [sp, #24]
 8113a8e:	2b02      	cmp	r3, #2
 8113a90:	f73f aecc 	bgt.w	811382c <_dtoa_r+0x8d4>
 8113a94:	465d      	mov	r5, fp
 8113a96:	4639      	mov	r1, r7
 8113a98:	9804      	ldr	r0, [sp, #16]
 8113a9a:	f7ff f9d1 	bl	8112e40 <quorem>
 8113a9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8113aa2:	f805 8b01 	strb.w	r8, [r5], #1
 8113aa6:	9a02      	ldr	r2, [sp, #8]
 8113aa8:	eba5 030b 	sub.w	r3, r5, fp
 8113aac:	429a      	cmp	r2, r3
 8113aae:	ddb0      	ble.n	8113a12 <_dtoa_r+0xaba>
 8113ab0:	2300      	movs	r3, #0
 8113ab2:	220a      	movs	r2, #10
 8113ab4:	9904      	ldr	r1, [sp, #16]
 8113ab6:	4620      	mov	r0, r4
 8113ab8:	f000 fa5b 	bl	8113f72 <__multadd>
 8113abc:	9004      	str	r0, [sp, #16]
 8113abe:	e7ea      	b.n	8113a96 <_dtoa_r+0xb3e>
 8113ac0:	08115e8c 	.word	0x08115e8c
 8113ac4:	08115eb0 	.word	0x08115eb0

08113ac8 <__sflush_r>:
 8113ac8:	898a      	ldrh	r2, [r1, #12]
 8113aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113ace:	4605      	mov	r5, r0
 8113ad0:	0710      	lsls	r0, r2, #28
 8113ad2:	460c      	mov	r4, r1
 8113ad4:	d458      	bmi.n	8113b88 <__sflush_r+0xc0>
 8113ad6:	684b      	ldr	r3, [r1, #4]
 8113ad8:	2b00      	cmp	r3, #0
 8113ada:	dc05      	bgt.n	8113ae8 <__sflush_r+0x20>
 8113adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8113ade:	2b00      	cmp	r3, #0
 8113ae0:	dc02      	bgt.n	8113ae8 <__sflush_r+0x20>
 8113ae2:	2000      	movs	r0, #0
 8113ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8113aea:	2e00      	cmp	r6, #0
 8113aec:	d0f9      	beq.n	8113ae2 <__sflush_r+0x1a>
 8113aee:	2300      	movs	r3, #0
 8113af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8113af4:	682f      	ldr	r7, [r5, #0]
 8113af6:	6a21      	ldr	r1, [r4, #32]
 8113af8:	602b      	str	r3, [r5, #0]
 8113afa:	d032      	beq.n	8113b62 <__sflush_r+0x9a>
 8113afc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8113afe:	89a3      	ldrh	r3, [r4, #12]
 8113b00:	075a      	lsls	r2, r3, #29
 8113b02:	d505      	bpl.n	8113b10 <__sflush_r+0x48>
 8113b04:	6863      	ldr	r3, [r4, #4]
 8113b06:	1ac0      	subs	r0, r0, r3
 8113b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8113b0a:	b10b      	cbz	r3, 8113b10 <__sflush_r+0x48>
 8113b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8113b0e:	1ac0      	subs	r0, r0, r3
 8113b10:	2300      	movs	r3, #0
 8113b12:	4602      	mov	r2, r0
 8113b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8113b16:	6a21      	ldr	r1, [r4, #32]
 8113b18:	4628      	mov	r0, r5
 8113b1a:	47b0      	blx	r6
 8113b1c:	1c43      	adds	r3, r0, #1
 8113b1e:	89a3      	ldrh	r3, [r4, #12]
 8113b20:	d106      	bne.n	8113b30 <__sflush_r+0x68>
 8113b22:	6829      	ldr	r1, [r5, #0]
 8113b24:	291d      	cmp	r1, #29
 8113b26:	d848      	bhi.n	8113bba <__sflush_r+0xf2>
 8113b28:	4a29      	ldr	r2, [pc, #164]	; (8113bd0 <__sflush_r+0x108>)
 8113b2a:	40ca      	lsrs	r2, r1
 8113b2c:	07d6      	lsls	r6, r2, #31
 8113b2e:	d544      	bpl.n	8113bba <__sflush_r+0xf2>
 8113b30:	2200      	movs	r2, #0
 8113b32:	6062      	str	r2, [r4, #4]
 8113b34:	04d9      	lsls	r1, r3, #19
 8113b36:	6922      	ldr	r2, [r4, #16]
 8113b38:	6022      	str	r2, [r4, #0]
 8113b3a:	d504      	bpl.n	8113b46 <__sflush_r+0x7e>
 8113b3c:	1c42      	adds	r2, r0, #1
 8113b3e:	d101      	bne.n	8113b44 <__sflush_r+0x7c>
 8113b40:	682b      	ldr	r3, [r5, #0]
 8113b42:	b903      	cbnz	r3, 8113b46 <__sflush_r+0x7e>
 8113b44:	6560      	str	r0, [r4, #84]	; 0x54
 8113b46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8113b48:	602f      	str	r7, [r5, #0]
 8113b4a:	2900      	cmp	r1, #0
 8113b4c:	d0c9      	beq.n	8113ae2 <__sflush_r+0x1a>
 8113b4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8113b52:	4299      	cmp	r1, r3
 8113b54:	d002      	beq.n	8113b5c <__sflush_r+0x94>
 8113b56:	4628      	mov	r0, r5
 8113b58:	f000 fcaa 	bl	81144b0 <_free_r>
 8113b5c:	2000      	movs	r0, #0
 8113b5e:	6360      	str	r0, [r4, #52]	; 0x34
 8113b60:	e7c0      	b.n	8113ae4 <__sflush_r+0x1c>
 8113b62:	2301      	movs	r3, #1
 8113b64:	4628      	mov	r0, r5
 8113b66:	47b0      	blx	r6
 8113b68:	1c41      	adds	r1, r0, #1
 8113b6a:	d1c8      	bne.n	8113afe <__sflush_r+0x36>
 8113b6c:	682b      	ldr	r3, [r5, #0]
 8113b6e:	2b00      	cmp	r3, #0
 8113b70:	d0c5      	beq.n	8113afe <__sflush_r+0x36>
 8113b72:	2b1d      	cmp	r3, #29
 8113b74:	d001      	beq.n	8113b7a <__sflush_r+0xb2>
 8113b76:	2b16      	cmp	r3, #22
 8113b78:	d101      	bne.n	8113b7e <__sflush_r+0xb6>
 8113b7a:	602f      	str	r7, [r5, #0]
 8113b7c:	e7b1      	b.n	8113ae2 <__sflush_r+0x1a>
 8113b7e:	89a3      	ldrh	r3, [r4, #12]
 8113b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8113b84:	81a3      	strh	r3, [r4, #12]
 8113b86:	e7ad      	b.n	8113ae4 <__sflush_r+0x1c>
 8113b88:	690f      	ldr	r7, [r1, #16]
 8113b8a:	2f00      	cmp	r7, #0
 8113b8c:	d0a9      	beq.n	8113ae2 <__sflush_r+0x1a>
 8113b8e:	0793      	lsls	r3, r2, #30
 8113b90:	680e      	ldr	r6, [r1, #0]
 8113b92:	bf08      	it	eq
 8113b94:	694b      	ldreq	r3, [r1, #20]
 8113b96:	600f      	str	r7, [r1, #0]
 8113b98:	bf18      	it	ne
 8113b9a:	2300      	movne	r3, #0
 8113b9c:	eba6 0807 	sub.w	r8, r6, r7
 8113ba0:	608b      	str	r3, [r1, #8]
 8113ba2:	f1b8 0f00 	cmp.w	r8, #0
 8113ba6:	dd9c      	ble.n	8113ae2 <__sflush_r+0x1a>
 8113ba8:	4643      	mov	r3, r8
 8113baa:	463a      	mov	r2, r7
 8113bac:	6a21      	ldr	r1, [r4, #32]
 8113bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8113bb0:	4628      	mov	r0, r5
 8113bb2:	47b0      	blx	r6
 8113bb4:	2800      	cmp	r0, #0
 8113bb6:	dc06      	bgt.n	8113bc6 <__sflush_r+0xfe>
 8113bb8:	89a3      	ldrh	r3, [r4, #12]
 8113bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8113bbe:	81a3      	strh	r3, [r4, #12]
 8113bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8113bc4:	e78e      	b.n	8113ae4 <__sflush_r+0x1c>
 8113bc6:	4407      	add	r7, r0
 8113bc8:	eba8 0800 	sub.w	r8, r8, r0
 8113bcc:	e7e9      	b.n	8113ba2 <__sflush_r+0xda>
 8113bce:	bf00      	nop
 8113bd0:	20400001 	.word	0x20400001

08113bd4 <_fflush_r>:
 8113bd4:	b538      	push	{r3, r4, r5, lr}
 8113bd6:	690b      	ldr	r3, [r1, #16]
 8113bd8:	4605      	mov	r5, r0
 8113bda:	460c      	mov	r4, r1
 8113bdc:	b1db      	cbz	r3, 8113c16 <_fflush_r+0x42>
 8113bde:	b118      	cbz	r0, 8113be8 <_fflush_r+0x14>
 8113be0:	6983      	ldr	r3, [r0, #24]
 8113be2:	b90b      	cbnz	r3, 8113be8 <_fflush_r+0x14>
 8113be4:	f000 f860 	bl	8113ca8 <__sinit>
 8113be8:	4b0c      	ldr	r3, [pc, #48]	; (8113c1c <_fflush_r+0x48>)
 8113bea:	429c      	cmp	r4, r3
 8113bec:	d109      	bne.n	8113c02 <_fflush_r+0x2e>
 8113bee:	686c      	ldr	r4, [r5, #4]
 8113bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8113bf4:	b17b      	cbz	r3, 8113c16 <_fflush_r+0x42>
 8113bf6:	4621      	mov	r1, r4
 8113bf8:	4628      	mov	r0, r5
 8113bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8113bfe:	f7ff bf63 	b.w	8113ac8 <__sflush_r>
 8113c02:	4b07      	ldr	r3, [pc, #28]	; (8113c20 <_fflush_r+0x4c>)
 8113c04:	429c      	cmp	r4, r3
 8113c06:	d101      	bne.n	8113c0c <_fflush_r+0x38>
 8113c08:	68ac      	ldr	r4, [r5, #8]
 8113c0a:	e7f1      	b.n	8113bf0 <_fflush_r+0x1c>
 8113c0c:	4b05      	ldr	r3, [pc, #20]	; (8113c24 <_fflush_r+0x50>)
 8113c0e:	429c      	cmp	r4, r3
 8113c10:	bf08      	it	eq
 8113c12:	68ec      	ldreq	r4, [r5, #12]
 8113c14:	e7ec      	b.n	8113bf0 <_fflush_r+0x1c>
 8113c16:	2000      	movs	r0, #0
 8113c18:	bd38      	pop	{r3, r4, r5, pc}
 8113c1a:	bf00      	nop
 8113c1c:	08115ee0 	.word	0x08115ee0
 8113c20:	08115f00 	.word	0x08115f00
 8113c24:	08115ec0 	.word	0x08115ec0

08113c28 <std>:
 8113c28:	2300      	movs	r3, #0
 8113c2a:	b510      	push	{r4, lr}
 8113c2c:	4604      	mov	r4, r0
 8113c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8113c32:	6083      	str	r3, [r0, #8]
 8113c34:	8181      	strh	r1, [r0, #12]
 8113c36:	6643      	str	r3, [r0, #100]	; 0x64
 8113c38:	81c2      	strh	r2, [r0, #14]
 8113c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8113c3e:	6183      	str	r3, [r0, #24]
 8113c40:	4619      	mov	r1, r3
 8113c42:	2208      	movs	r2, #8
 8113c44:	305c      	adds	r0, #92	; 0x5c
 8113c46:	f7fe f9e0 	bl	811200a <memset>
 8113c4a:	4b05      	ldr	r3, [pc, #20]	; (8113c60 <std+0x38>)
 8113c4c:	6263      	str	r3, [r4, #36]	; 0x24
 8113c4e:	4b05      	ldr	r3, [pc, #20]	; (8113c64 <std+0x3c>)
 8113c50:	62a3      	str	r3, [r4, #40]	; 0x28
 8113c52:	4b05      	ldr	r3, [pc, #20]	; (8113c68 <std+0x40>)
 8113c54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8113c56:	4b05      	ldr	r3, [pc, #20]	; (8113c6c <std+0x44>)
 8113c58:	6224      	str	r4, [r4, #32]
 8113c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8113c5c:	bd10      	pop	{r4, pc}
 8113c5e:	bf00      	nop
 8113c60:	08114b45 	.word	0x08114b45
 8113c64:	08114b67 	.word	0x08114b67
 8113c68:	08114b9f 	.word	0x08114b9f
 8113c6c:	08114bc3 	.word	0x08114bc3

08113c70 <_cleanup_r>:
 8113c70:	4901      	ldr	r1, [pc, #4]	; (8113c78 <_cleanup_r+0x8>)
 8113c72:	f000 b885 	b.w	8113d80 <_fwalk_reent>
 8113c76:	bf00      	nop
 8113c78:	08113bd5 	.word	0x08113bd5

08113c7c <__sfmoreglue>:
 8113c7c:	b570      	push	{r4, r5, r6, lr}
 8113c7e:	1e4a      	subs	r2, r1, #1
 8113c80:	2568      	movs	r5, #104	; 0x68
 8113c82:	4355      	muls	r5, r2
 8113c84:	460e      	mov	r6, r1
 8113c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8113c8a:	f000 fc5f 	bl	811454c <_malloc_r>
 8113c8e:	4604      	mov	r4, r0
 8113c90:	b140      	cbz	r0, 8113ca4 <__sfmoreglue+0x28>
 8113c92:	2100      	movs	r1, #0
 8113c94:	e9c0 1600 	strd	r1, r6, [r0]
 8113c98:	300c      	adds	r0, #12
 8113c9a:	60a0      	str	r0, [r4, #8]
 8113c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8113ca0:	f7fe f9b3 	bl	811200a <memset>
 8113ca4:	4620      	mov	r0, r4
 8113ca6:	bd70      	pop	{r4, r5, r6, pc}

08113ca8 <__sinit>:
 8113ca8:	6983      	ldr	r3, [r0, #24]
 8113caa:	b510      	push	{r4, lr}
 8113cac:	4604      	mov	r4, r0
 8113cae:	bb33      	cbnz	r3, 8113cfe <__sinit+0x56>
 8113cb0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8113cb4:	6503      	str	r3, [r0, #80]	; 0x50
 8113cb6:	4b12      	ldr	r3, [pc, #72]	; (8113d00 <__sinit+0x58>)
 8113cb8:	4a12      	ldr	r2, [pc, #72]	; (8113d04 <__sinit+0x5c>)
 8113cba:	681b      	ldr	r3, [r3, #0]
 8113cbc:	6282      	str	r2, [r0, #40]	; 0x28
 8113cbe:	4298      	cmp	r0, r3
 8113cc0:	bf04      	itt	eq
 8113cc2:	2301      	moveq	r3, #1
 8113cc4:	6183      	streq	r3, [r0, #24]
 8113cc6:	f000 f81f 	bl	8113d08 <__sfp>
 8113cca:	6060      	str	r0, [r4, #4]
 8113ccc:	4620      	mov	r0, r4
 8113cce:	f000 f81b 	bl	8113d08 <__sfp>
 8113cd2:	60a0      	str	r0, [r4, #8]
 8113cd4:	4620      	mov	r0, r4
 8113cd6:	f000 f817 	bl	8113d08 <__sfp>
 8113cda:	2200      	movs	r2, #0
 8113cdc:	60e0      	str	r0, [r4, #12]
 8113cde:	2104      	movs	r1, #4
 8113ce0:	6860      	ldr	r0, [r4, #4]
 8113ce2:	f7ff ffa1 	bl	8113c28 <std>
 8113ce6:	2201      	movs	r2, #1
 8113ce8:	2109      	movs	r1, #9
 8113cea:	68a0      	ldr	r0, [r4, #8]
 8113cec:	f7ff ff9c 	bl	8113c28 <std>
 8113cf0:	2202      	movs	r2, #2
 8113cf2:	2112      	movs	r1, #18
 8113cf4:	68e0      	ldr	r0, [r4, #12]
 8113cf6:	f7ff ff97 	bl	8113c28 <std>
 8113cfa:	2301      	movs	r3, #1
 8113cfc:	61a3      	str	r3, [r4, #24]
 8113cfe:	bd10      	pop	{r4, pc}
 8113d00:	08115e78 	.word	0x08115e78
 8113d04:	08113c71 	.word	0x08113c71

08113d08 <__sfp>:
 8113d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8113d0a:	4b1b      	ldr	r3, [pc, #108]	; (8113d78 <__sfp+0x70>)
 8113d0c:	681e      	ldr	r6, [r3, #0]
 8113d0e:	69b3      	ldr	r3, [r6, #24]
 8113d10:	4607      	mov	r7, r0
 8113d12:	b913      	cbnz	r3, 8113d1a <__sfp+0x12>
 8113d14:	4630      	mov	r0, r6
 8113d16:	f7ff ffc7 	bl	8113ca8 <__sinit>
 8113d1a:	3648      	adds	r6, #72	; 0x48
 8113d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8113d20:	3b01      	subs	r3, #1
 8113d22:	d503      	bpl.n	8113d2c <__sfp+0x24>
 8113d24:	6833      	ldr	r3, [r6, #0]
 8113d26:	b133      	cbz	r3, 8113d36 <__sfp+0x2e>
 8113d28:	6836      	ldr	r6, [r6, #0]
 8113d2a:	e7f7      	b.n	8113d1c <__sfp+0x14>
 8113d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8113d30:	b16d      	cbz	r5, 8113d4e <__sfp+0x46>
 8113d32:	3468      	adds	r4, #104	; 0x68
 8113d34:	e7f4      	b.n	8113d20 <__sfp+0x18>
 8113d36:	2104      	movs	r1, #4
 8113d38:	4638      	mov	r0, r7
 8113d3a:	f7ff ff9f 	bl	8113c7c <__sfmoreglue>
 8113d3e:	6030      	str	r0, [r6, #0]
 8113d40:	2800      	cmp	r0, #0
 8113d42:	d1f1      	bne.n	8113d28 <__sfp+0x20>
 8113d44:	230c      	movs	r3, #12
 8113d46:	603b      	str	r3, [r7, #0]
 8113d48:	4604      	mov	r4, r0
 8113d4a:	4620      	mov	r0, r4
 8113d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8113d4e:	4b0b      	ldr	r3, [pc, #44]	; (8113d7c <__sfp+0x74>)
 8113d50:	6665      	str	r5, [r4, #100]	; 0x64
 8113d52:	e9c4 5500 	strd	r5, r5, [r4]
 8113d56:	60a5      	str	r5, [r4, #8]
 8113d58:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8113d5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8113d60:	2208      	movs	r2, #8
 8113d62:	4629      	mov	r1, r5
 8113d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8113d68:	f7fe f94f 	bl	811200a <memset>
 8113d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8113d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8113d74:	e7e9      	b.n	8113d4a <__sfp+0x42>
 8113d76:	bf00      	nop
 8113d78:	08115e78 	.word	0x08115e78
 8113d7c:	ffff0001 	.word	0xffff0001

08113d80 <_fwalk_reent>:
 8113d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113d84:	4680      	mov	r8, r0
 8113d86:	4689      	mov	r9, r1
 8113d88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8113d8c:	2600      	movs	r6, #0
 8113d8e:	b914      	cbnz	r4, 8113d96 <_fwalk_reent+0x16>
 8113d90:	4630      	mov	r0, r6
 8113d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8113d96:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8113d9a:	3f01      	subs	r7, #1
 8113d9c:	d501      	bpl.n	8113da2 <_fwalk_reent+0x22>
 8113d9e:	6824      	ldr	r4, [r4, #0]
 8113da0:	e7f5      	b.n	8113d8e <_fwalk_reent+0xe>
 8113da2:	89ab      	ldrh	r3, [r5, #12]
 8113da4:	2b01      	cmp	r3, #1
 8113da6:	d907      	bls.n	8113db8 <_fwalk_reent+0x38>
 8113da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8113dac:	3301      	adds	r3, #1
 8113dae:	d003      	beq.n	8113db8 <_fwalk_reent+0x38>
 8113db0:	4629      	mov	r1, r5
 8113db2:	4640      	mov	r0, r8
 8113db4:	47c8      	blx	r9
 8113db6:	4306      	orrs	r6, r0
 8113db8:	3568      	adds	r5, #104	; 0x68
 8113dba:	e7ee      	b.n	8113d9a <_fwalk_reent+0x1a>

08113dbc <__locale_ctype_ptr_l>:
 8113dbc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8113dc0:	4770      	bx	lr
	...

08113dc4 <_localeconv_r>:
 8113dc4:	4b04      	ldr	r3, [pc, #16]	; (8113dd8 <_localeconv_r+0x14>)
 8113dc6:	681b      	ldr	r3, [r3, #0]
 8113dc8:	6a18      	ldr	r0, [r3, #32]
 8113dca:	4b04      	ldr	r3, [pc, #16]	; (8113ddc <_localeconv_r+0x18>)
 8113dcc:	2800      	cmp	r0, #0
 8113dce:	bf08      	it	eq
 8113dd0:	4618      	moveq	r0, r3
 8113dd2:	30f0      	adds	r0, #240	; 0xf0
 8113dd4:	4770      	bx	lr
 8113dd6:	bf00      	nop
 8113dd8:	10000040 	.word	0x10000040
 8113ddc:	100000a4 	.word	0x100000a4

08113de0 <__swhatbuf_r>:
 8113de0:	b570      	push	{r4, r5, r6, lr}
 8113de2:	460e      	mov	r6, r1
 8113de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113de8:	2900      	cmp	r1, #0
 8113dea:	b096      	sub	sp, #88	; 0x58
 8113dec:	4614      	mov	r4, r2
 8113dee:	461d      	mov	r5, r3
 8113df0:	da07      	bge.n	8113e02 <__swhatbuf_r+0x22>
 8113df2:	2300      	movs	r3, #0
 8113df4:	602b      	str	r3, [r5, #0]
 8113df6:	89b3      	ldrh	r3, [r6, #12]
 8113df8:	061a      	lsls	r2, r3, #24
 8113dfa:	d410      	bmi.n	8113e1e <__swhatbuf_r+0x3e>
 8113dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8113e00:	e00e      	b.n	8113e20 <__swhatbuf_r+0x40>
 8113e02:	466a      	mov	r2, sp
 8113e04:	f000 ff10 	bl	8114c28 <_fstat_r>
 8113e08:	2800      	cmp	r0, #0
 8113e0a:	dbf2      	blt.n	8113df2 <__swhatbuf_r+0x12>
 8113e0c:	9a01      	ldr	r2, [sp, #4]
 8113e0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8113e12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8113e16:	425a      	negs	r2, r3
 8113e18:	415a      	adcs	r2, r3
 8113e1a:	602a      	str	r2, [r5, #0]
 8113e1c:	e7ee      	b.n	8113dfc <__swhatbuf_r+0x1c>
 8113e1e:	2340      	movs	r3, #64	; 0x40
 8113e20:	2000      	movs	r0, #0
 8113e22:	6023      	str	r3, [r4, #0]
 8113e24:	b016      	add	sp, #88	; 0x58
 8113e26:	bd70      	pop	{r4, r5, r6, pc}

08113e28 <__smakebuf_r>:
 8113e28:	898b      	ldrh	r3, [r1, #12]
 8113e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8113e2c:	079d      	lsls	r5, r3, #30
 8113e2e:	4606      	mov	r6, r0
 8113e30:	460c      	mov	r4, r1
 8113e32:	d507      	bpl.n	8113e44 <__smakebuf_r+0x1c>
 8113e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8113e38:	6023      	str	r3, [r4, #0]
 8113e3a:	6123      	str	r3, [r4, #16]
 8113e3c:	2301      	movs	r3, #1
 8113e3e:	6163      	str	r3, [r4, #20]
 8113e40:	b002      	add	sp, #8
 8113e42:	bd70      	pop	{r4, r5, r6, pc}
 8113e44:	ab01      	add	r3, sp, #4
 8113e46:	466a      	mov	r2, sp
 8113e48:	f7ff ffca 	bl	8113de0 <__swhatbuf_r>
 8113e4c:	9900      	ldr	r1, [sp, #0]
 8113e4e:	4605      	mov	r5, r0
 8113e50:	4630      	mov	r0, r6
 8113e52:	f000 fb7b 	bl	811454c <_malloc_r>
 8113e56:	b948      	cbnz	r0, 8113e6c <__smakebuf_r+0x44>
 8113e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8113e5c:	059a      	lsls	r2, r3, #22
 8113e5e:	d4ef      	bmi.n	8113e40 <__smakebuf_r+0x18>
 8113e60:	f023 0303 	bic.w	r3, r3, #3
 8113e64:	f043 0302 	orr.w	r3, r3, #2
 8113e68:	81a3      	strh	r3, [r4, #12]
 8113e6a:	e7e3      	b.n	8113e34 <__smakebuf_r+0xc>
 8113e6c:	4b0d      	ldr	r3, [pc, #52]	; (8113ea4 <__smakebuf_r+0x7c>)
 8113e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8113e70:	89a3      	ldrh	r3, [r4, #12]
 8113e72:	6020      	str	r0, [r4, #0]
 8113e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8113e78:	81a3      	strh	r3, [r4, #12]
 8113e7a:	9b00      	ldr	r3, [sp, #0]
 8113e7c:	6163      	str	r3, [r4, #20]
 8113e7e:	9b01      	ldr	r3, [sp, #4]
 8113e80:	6120      	str	r0, [r4, #16]
 8113e82:	b15b      	cbz	r3, 8113e9c <__smakebuf_r+0x74>
 8113e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8113e88:	4630      	mov	r0, r6
 8113e8a:	f000 fedf 	bl	8114c4c <_isatty_r>
 8113e8e:	b128      	cbz	r0, 8113e9c <__smakebuf_r+0x74>
 8113e90:	89a3      	ldrh	r3, [r4, #12]
 8113e92:	f023 0303 	bic.w	r3, r3, #3
 8113e96:	f043 0301 	orr.w	r3, r3, #1
 8113e9a:	81a3      	strh	r3, [r4, #12]
 8113e9c:	89a3      	ldrh	r3, [r4, #12]
 8113e9e:	431d      	orrs	r5, r3
 8113ea0:	81a5      	strh	r5, [r4, #12]
 8113ea2:	e7cd      	b.n	8113e40 <__smakebuf_r+0x18>
 8113ea4:	08113c71 	.word	0x08113c71

08113ea8 <malloc>:
 8113ea8:	4b02      	ldr	r3, [pc, #8]	; (8113eb4 <malloc+0xc>)
 8113eaa:	4601      	mov	r1, r0
 8113eac:	6818      	ldr	r0, [r3, #0]
 8113eae:	f000 bb4d 	b.w	811454c <_malloc_r>
 8113eb2:	bf00      	nop
 8113eb4:	10000040 	.word	0x10000040

08113eb8 <__ascii_mbtowc>:
 8113eb8:	b082      	sub	sp, #8
 8113eba:	b901      	cbnz	r1, 8113ebe <__ascii_mbtowc+0x6>
 8113ebc:	a901      	add	r1, sp, #4
 8113ebe:	b142      	cbz	r2, 8113ed2 <__ascii_mbtowc+0x1a>
 8113ec0:	b14b      	cbz	r3, 8113ed6 <__ascii_mbtowc+0x1e>
 8113ec2:	7813      	ldrb	r3, [r2, #0]
 8113ec4:	600b      	str	r3, [r1, #0]
 8113ec6:	7812      	ldrb	r2, [r2, #0]
 8113ec8:	1c10      	adds	r0, r2, #0
 8113eca:	bf18      	it	ne
 8113ecc:	2001      	movne	r0, #1
 8113ece:	b002      	add	sp, #8
 8113ed0:	4770      	bx	lr
 8113ed2:	4610      	mov	r0, r2
 8113ed4:	e7fb      	b.n	8113ece <__ascii_mbtowc+0x16>
 8113ed6:	f06f 0001 	mvn.w	r0, #1
 8113eda:	e7f8      	b.n	8113ece <__ascii_mbtowc+0x16>

08113edc <_Balloc>:
 8113edc:	b570      	push	{r4, r5, r6, lr}
 8113ede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8113ee0:	4604      	mov	r4, r0
 8113ee2:	460e      	mov	r6, r1
 8113ee4:	b93d      	cbnz	r5, 8113ef6 <_Balloc+0x1a>
 8113ee6:	2010      	movs	r0, #16
 8113ee8:	f7ff ffde 	bl	8113ea8 <malloc>
 8113eec:	6260      	str	r0, [r4, #36]	; 0x24
 8113eee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8113ef2:	6005      	str	r5, [r0, #0]
 8113ef4:	60c5      	str	r5, [r0, #12]
 8113ef6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8113ef8:	68eb      	ldr	r3, [r5, #12]
 8113efa:	b183      	cbz	r3, 8113f1e <_Balloc+0x42>
 8113efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8113efe:	68db      	ldr	r3, [r3, #12]
 8113f00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8113f04:	b9b8      	cbnz	r0, 8113f36 <_Balloc+0x5a>
 8113f06:	2101      	movs	r1, #1
 8113f08:	fa01 f506 	lsl.w	r5, r1, r6
 8113f0c:	1d6a      	adds	r2, r5, #5
 8113f0e:	0092      	lsls	r2, r2, #2
 8113f10:	4620      	mov	r0, r4
 8113f12:	f000 fabf 	bl	8114494 <_calloc_r>
 8113f16:	b160      	cbz	r0, 8113f32 <_Balloc+0x56>
 8113f18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8113f1c:	e00e      	b.n	8113f3c <_Balloc+0x60>
 8113f1e:	2221      	movs	r2, #33	; 0x21
 8113f20:	2104      	movs	r1, #4
 8113f22:	4620      	mov	r0, r4
 8113f24:	f000 fab6 	bl	8114494 <_calloc_r>
 8113f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8113f2a:	60e8      	str	r0, [r5, #12]
 8113f2c:	68db      	ldr	r3, [r3, #12]
 8113f2e:	2b00      	cmp	r3, #0
 8113f30:	d1e4      	bne.n	8113efc <_Balloc+0x20>
 8113f32:	2000      	movs	r0, #0
 8113f34:	bd70      	pop	{r4, r5, r6, pc}
 8113f36:	6802      	ldr	r2, [r0, #0]
 8113f38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8113f3c:	2300      	movs	r3, #0
 8113f3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8113f42:	e7f7      	b.n	8113f34 <_Balloc+0x58>

08113f44 <_Bfree>:
 8113f44:	b570      	push	{r4, r5, r6, lr}
 8113f46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8113f48:	4606      	mov	r6, r0
 8113f4a:	460d      	mov	r5, r1
 8113f4c:	b93c      	cbnz	r4, 8113f5e <_Bfree+0x1a>
 8113f4e:	2010      	movs	r0, #16
 8113f50:	f7ff ffaa 	bl	8113ea8 <malloc>
 8113f54:	6270      	str	r0, [r6, #36]	; 0x24
 8113f56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8113f5a:	6004      	str	r4, [r0, #0]
 8113f5c:	60c4      	str	r4, [r0, #12]
 8113f5e:	b13d      	cbz	r5, 8113f70 <_Bfree+0x2c>
 8113f60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8113f62:	686a      	ldr	r2, [r5, #4]
 8113f64:	68db      	ldr	r3, [r3, #12]
 8113f66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8113f6a:	6029      	str	r1, [r5, #0]
 8113f6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8113f70:	bd70      	pop	{r4, r5, r6, pc}

08113f72 <__multadd>:
 8113f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113f76:	690d      	ldr	r5, [r1, #16]
 8113f78:	461f      	mov	r7, r3
 8113f7a:	4606      	mov	r6, r0
 8113f7c:	460c      	mov	r4, r1
 8113f7e:	f101 0c14 	add.w	ip, r1, #20
 8113f82:	2300      	movs	r3, #0
 8113f84:	f8dc 0000 	ldr.w	r0, [ip]
 8113f88:	b281      	uxth	r1, r0
 8113f8a:	fb02 7101 	mla	r1, r2, r1, r7
 8113f8e:	0c0f      	lsrs	r7, r1, #16
 8113f90:	0c00      	lsrs	r0, r0, #16
 8113f92:	fb02 7000 	mla	r0, r2, r0, r7
 8113f96:	b289      	uxth	r1, r1
 8113f98:	3301      	adds	r3, #1
 8113f9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8113f9e:	429d      	cmp	r5, r3
 8113fa0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8113fa4:	f84c 1b04 	str.w	r1, [ip], #4
 8113fa8:	dcec      	bgt.n	8113f84 <__multadd+0x12>
 8113faa:	b1d7      	cbz	r7, 8113fe2 <__multadd+0x70>
 8113fac:	68a3      	ldr	r3, [r4, #8]
 8113fae:	42ab      	cmp	r3, r5
 8113fb0:	dc12      	bgt.n	8113fd8 <__multadd+0x66>
 8113fb2:	6861      	ldr	r1, [r4, #4]
 8113fb4:	4630      	mov	r0, r6
 8113fb6:	3101      	adds	r1, #1
 8113fb8:	f7ff ff90 	bl	8113edc <_Balloc>
 8113fbc:	6922      	ldr	r2, [r4, #16]
 8113fbe:	3202      	adds	r2, #2
 8113fc0:	f104 010c 	add.w	r1, r4, #12
 8113fc4:	4680      	mov	r8, r0
 8113fc6:	0092      	lsls	r2, r2, #2
 8113fc8:	300c      	adds	r0, #12
 8113fca:	f7fe f813 	bl	8111ff4 <memcpy>
 8113fce:	4621      	mov	r1, r4
 8113fd0:	4630      	mov	r0, r6
 8113fd2:	f7ff ffb7 	bl	8113f44 <_Bfree>
 8113fd6:	4644      	mov	r4, r8
 8113fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8113fdc:	3501      	adds	r5, #1
 8113fde:	615f      	str	r7, [r3, #20]
 8113fe0:	6125      	str	r5, [r4, #16]
 8113fe2:	4620      	mov	r0, r4
 8113fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08113fe8 <__hi0bits>:
 8113fe8:	0c02      	lsrs	r2, r0, #16
 8113fea:	0412      	lsls	r2, r2, #16
 8113fec:	4603      	mov	r3, r0
 8113fee:	b9b2      	cbnz	r2, 811401e <__hi0bits+0x36>
 8113ff0:	0403      	lsls	r3, r0, #16
 8113ff2:	2010      	movs	r0, #16
 8113ff4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8113ff8:	bf04      	itt	eq
 8113ffa:	021b      	lsleq	r3, r3, #8
 8113ffc:	3008      	addeq	r0, #8
 8113ffe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8114002:	bf04      	itt	eq
 8114004:	011b      	lsleq	r3, r3, #4
 8114006:	3004      	addeq	r0, #4
 8114008:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 811400c:	bf04      	itt	eq
 811400e:	009b      	lsleq	r3, r3, #2
 8114010:	3002      	addeq	r0, #2
 8114012:	2b00      	cmp	r3, #0
 8114014:	db06      	blt.n	8114024 <__hi0bits+0x3c>
 8114016:	005b      	lsls	r3, r3, #1
 8114018:	d503      	bpl.n	8114022 <__hi0bits+0x3a>
 811401a:	3001      	adds	r0, #1
 811401c:	4770      	bx	lr
 811401e:	2000      	movs	r0, #0
 8114020:	e7e8      	b.n	8113ff4 <__hi0bits+0xc>
 8114022:	2020      	movs	r0, #32
 8114024:	4770      	bx	lr

08114026 <__lo0bits>:
 8114026:	6803      	ldr	r3, [r0, #0]
 8114028:	f013 0207 	ands.w	r2, r3, #7
 811402c:	4601      	mov	r1, r0
 811402e:	d00b      	beq.n	8114048 <__lo0bits+0x22>
 8114030:	07da      	lsls	r2, r3, #31
 8114032:	d423      	bmi.n	811407c <__lo0bits+0x56>
 8114034:	0798      	lsls	r0, r3, #30
 8114036:	bf49      	itett	mi
 8114038:	085b      	lsrmi	r3, r3, #1
 811403a:	089b      	lsrpl	r3, r3, #2
 811403c:	2001      	movmi	r0, #1
 811403e:	600b      	strmi	r3, [r1, #0]
 8114040:	bf5c      	itt	pl
 8114042:	600b      	strpl	r3, [r1, #0]
 8114044:	2002      	movpl	r0, #2
 8114046:	4770      	bx	lr
 8114048:	b298      	uxth	r0, r3
 811404a:	b9a8      	cbnz	r0, 8114078 <__lo0bits+0x52>
 811404c:	0c1b      	lsrs	r3, r3, #16
 811404e:	2010      	movs	r0, #16
 8114050:	f013 0fff 	tst.w	r3, #255	; 0xff
 8114054:	bf04      	itt	eq
 8114056:	0a1b      	lsreq	r3, r3, #8
 8114058:	3008      	addeq	r0, #8
 811405a:	071a      	lsls	r2, r3, #28
 811405c:	bf04      	itt	eq
 811405e:	091b      	lsreq	r3, r3, #4
 8114060:	3004      	addeq	r0, #4
 8114062:	079a      	lsls	r2, r3, #30
 8114064:	bf04      	itt	eq
 8114066:	089b      	lsreq	r3, r3, #2
 8114068:	3002      	addeq	r0, #2
 811406a:	07da      	lsls	r2, r3, #31
 811406c:	d402      	bmi.n	8114074 <__lo0bits+0x4e>
 811406e:	085b      	lsrs	r3, r3, #1
 8114070:	d006      	beq.n	8114080 <__lo0bits+0x5a>
 8114072:	3001      	adds	r0, #1
 8114074:	600b      	str	r3, [r1, #0]
 8114076:	4770      	bx	lr
 8114078:	4610      	mov	r0, r2
 811407a:	e7e9      	b.n	8114050 <__lo0bits+0x2a>
 811407c:	2000      	movs	r0, #0
 811407e:	4770      	bx	lr
 8114080:	2020      	movs	r0, #32
 8114082:	4770      	bx	lr

08114084 <__i2b>:
 8114084:	b510      	push	{r4, lr}
 8114086:	460c      	mov	r4, r1
 8114088:	2101      	movs	r1, #1
 811408a:	f7ff ff27 	bl	8113edc <_Balloc>
 811408e:	2201      	movs	r2, #1
 8114090:	6144      	str	r4, [r0, #20]
 8114092:	6102      	str	r2, [r0, #16]
 8114094:	bd10      	pop	{r4, pc}

08114096 <__multiply>:
 8114096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811409a:	4614      	mov	r4, r2
 811409c:	690a      	ldr	r2, [r1, #16]
 811409e:	6923      	ldr	r3, [r4, #16]
 81140a0:	429a      	cmp	r2, r3
 81140a2:	bfb8      	it	lt
 81140a4:	460b      	movlt	r3, r1
 81140a6:	4688      	mov	r8, r1
 81140a8:	bfbc      	itt	lt
 81140aa:	46a0      	movlt	r8, r4
 81140ac:	461c      	movlt	r4, r3
 81140ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 81140b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 81140b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81140ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 81140be:	eb07 0609 	add.w	r6, r7, r9
 81140c2:	42b3      	cmp	r3, r6
 81140c4:	bfb8      	it	lt
 81140c6:	3101      	addlt	r1, #1
 81140c8:	f7ff ff08 	bl	8113edc <_Balloc>
 81140cc:	f100 0514 	add.w	r5, r0, #20
 81140d0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 81140d4:	462b      	mov	r3, r5
 81140d6:	2200      	movs	r2, #0
 81140d8:	4573      	cmp	r3, lr
 81140da:	d316      	bcc.n	811410a <__multiply+0x74>
 81140dc:	f104 0214 	add.w	r2, r4, #20
 81140e0:	f108 0114 	add.w	r1, r8, #20
 81140e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 81140e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 81140ec:	9300      	str	r3, [sp, #0]
 81140ee:	9b00      	ldr	r3, [sp, #0]
 81140f0:	9201      	str	r2, [sp, #4]
 81140f2:	4293      	cmp	r3, r2
 81140f4:	d80c      	bhi.n	8114110 <__multiply+0x7a>
 81140f6:	2e00      	cmp	r6, #0
 81140f8:	dd03      	ble.n	8114102 <__multiply+0x6c>
 81140fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 81140fe:	2b00      	cmp	r3, #0
 8114100:	d05d      	beq.n	81141be <__multiply+0x128>
 8114102:	6106      	str	r6, [r0, #16]
 8114104:	b003      	add	sp, #12
 8114106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811410a:	f843 2b04 	str.w	r2, [r3], #4
 811410e:	e7e3      	b.n	81140d8 <__multiply+0x42>
 8114110:	f8b2 b000 	ldrh.w	fp, [r2]
 8114114:	f1bb 0f00 	cmp.w	fp, #0
 8114118:	d023      	beq.n	8114162 <__multiply+0xcc>
 811411a:	4689      	mov	r9, r1
 811411c:	46ac      	mov	ip, r5
 811411e:	f04f 0800 	mov.w	r8, #0
 8114122:	f859 4b04 	ldr.w	r4, [r9], #4
 8114126:	f8dc a000 	ldr.w	sl, [ip]
 811412a:	b2a3      	uxth	r3, r4
 811412c:	fa1f fa8a 	uxth.w	sl, sl
 8114130:	fb0b a303 	mla	r3, fp, r3, sl
 8114134:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8114138:	f8dc 4000 	ldr.w	r4, [ip]
 811413c:	4443      	add	r3, r8
 811413e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8114142:	fb0b 840a 	mla	r4, fp, sl, r8
 8114146:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 811414a:	46e2      	mov	sl, ip
 811414c:	b29b      	uxth	r3, r3
 811414e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8114152:	454f      	cmp	r7, r9
 8114154:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8114158:	f84a 3b04 	str.w	r3, [sl], #4
 811415c:	d82b      	bhi.n	81141b6 <__multiply+0x120>
 811415e:	f8cc 8004 	str.w	r8, [ip, #4]
 8114162:	9b01      	ldr	r3, [sp, #4]
 8114164:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8114168:	3204      	adds	r2, #4
 811416a:	f1ba 0f00 	cmp.w	sl, #0
 811416e:	d020      	beq.n	81141b2 <__multiply+0x11c>
 8114170:	682b      	ldr	r3, [r5, #0]
 8114172:	4689      	mov	r9, r1
 8114174:	46a8      	mov	r8, r5
 8114176:	f04f 0b00 	mov.w	fp, #0
 811417a:	f8b9 c000 	ldrh.w	ip, [r9]
 811417e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8114182:	fb0a 440c 	mla	r4, sl, ip, r4
 8114186:	445c      	add	r4, fp
 8114188:	46c4      	mov	ip, r8
 811418a:	b29b      	uxth	r3, r3
 811418c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8114190:	f84c 3b04 	str.w	r3, [ip], #4
 8114194:	f859 3b04 	ldr.w	r3, [r9], #4
 8114198:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 811419c:	0c1b      	lsrs	r3, r3, #16
 811419e:	fb0a b303 	mla	r3, sl, r3, fp
 81141a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 81141a6:	454f      	cmp	r7, r9
 81141a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 81141ac:	d805      	bhi.n	81141ba <__multiply+0x124>
 81141ae:	f8c8 3004 	str.w	r3, [r8, #4]
 81141b2:	3504      	adds	r5, #4
 81141b4:	e79b      	b.n	81140ee <__multiply+0x58>
 81141b6:	46d4      	mov	ip, sl
 81141b8:	e7b3      	b.n	8114122 <__multiply+0x8c>
 81141ba:	46e0      	mov	r8, ip
 81141bc:	e7dd      	b.n	811417a <__multiply+0xe4>
 81141be:	3e01      	subs	r6, #1
 81141c0:	e799      	b.n	81140f6 <__multiply+0x60>
	...

081141c4 <__pow5mult>:
 81141c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81141c8:	4615      	mov	r5, r2
 81141ca:	f012 0203 	ands.w	r2, r2, #3
 81141ce:	4606      	mov	r6, r0
 81141d0:	460f      	mov	r7, r1
 81141d2:	d007      	beq.n	81141e4 <__pow5mult+0x20>
 81141d4:	3a01      	subs	r2, #1
 81141d6:	4c21      	ldr	r4, [pc, #132]	; (811425c <__pow5mult+0x98>)
 81141d8:	2300      	movs	r3, #0
 81141da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81141de:	f7ff fec8 	bl	8113f72 <__multadd>
 81141e2:	4607      	mov	r7, r0
 81141e4:	10ad      	asrs	r5, r5, #2
 81141e6:	d035      	beq.n	8114254 <__pow5mult+0x90>
 81141e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 81141ea:	b93c      	cbnz	r4, 81141fc <__pow5mult+0x38>
 81141ec:	2010      	movs	r0, #16
 81141ee:	f7ff fe5b 	bl	8113ea8 <malloc>
 81141f2:	6270      	str	r0, [r6, #36]	; 0x24
 81141f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81141f8:	6004      	str	r4, [r0, #0]
 81141fa:	60c4      	str	r4, [r0, #12]
 81141fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8114200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8114204:	b94c      	cbnz	r4, 811421a <__pow5mult+0x56>
 8114206:	f240 2171 	movw	r1, #625	; 0x271
 811420a:	4630      	mov	r0, r6
 811420c:	f7ff ff3a 	bl	8114084 <__i2b>
 8114210:	2300      	movs	r3, #0
 8114212:	f8c8 0008 	str.w	r0, [r8, #8]
 8114216:	4604      	mov	r4, r0
 8114218:	6003      	str	r3, [r0, #0]
 811421a:	f04f 0800 	mov.w	r8, #0
 811421e:	07eb      	lsls	r3, r5, #31
 8114220:	d50a      	bpl.n	8114238 <__pow5mult+0x74>
 8114222:	4639      	mov	r1, r7
 8114224:	4622      	mov	r2, r4
 8114226:	4630      	mov	r0, r6
 8114228:	f7ff ff35 	bl	8114096 <__multiply>
 811422c:	4639      	mov	r1, r7
 811422e:	4681      	mov	r9, r0
 8114230:	4630      	mov	r0, r6
 8114232:	f7ff fe87 	bl	8113f44 <_Bfree>
 8114236:	464f      	mov	r7, r9
 8114238:	106d      	asrs	r5, r5, #1
 811423a:	d00b      	beq.n	8114254 <__pow5mult+0x90>
 811423c:	6820      	ldr	r0, [r4, #0]
 811423e:	b938      	cbnz	r0, 8114250 <__pow5mult+0x8c>
 8114240:	4622      	mov	r2, r4
 8114242:	4621      	mov	r1, r4
 8114244:	4630      	mov	r0, r6
 8114246:	f7ff ff26 	bl	8114096 <__multiply>
 811424a:	6020      	str	r0, [r4, #0]
 811424c:	f8c0 8000 	str.w	r8, [r0]
 8114250:	4604      	mov	r4, r0
 8114252:	e7e4      	b.n	811421e <__pow5mult+0x5a>
 8114254:	4638      	mov	r0, r7
 8114256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811425a:	bf00      	nop
 811425c:	08116020 	.word	0x08116020

08114260 <__lshift>:
 8114260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114264:	460c      	mov	r4, r1
 8114266:	ea4f 1a62 	mov.w	sl, r2, asr #5
 811426a:	6923      	ldr	r3, [r4, #16]
 811426c:	6849      	ldr	r1, [r1, #4]
 811426e:	eb0a 0903 	add.w	r9, sl, r3
 8114272:	68a3      	ldr	r3, [r4, #8]
 8114274:	4607      	mov	r7, r0
 8114276:	4616      	mov	r6, r2
 8114278:	f109 0501 	add.w	r5, r9, #1
 811427c:	42ab      	cmp	r3, r5
 811427e:	db32      	blt.n	81142e6 <__lshift+0x86>
 8114280:	4638      	mov	r0, r7
 8114282:	f7ff fe2b 	bl	8113edc <_Balloc>
 8114286:	2300      	movs	r3, #0
 8114288:	4680      	mov	r8, r0
 811428a:	f100 0114 	add.w	r1, r0, #20
 811428e:	461a      	mov	r2, r3
 8114290:	4553      	cmp	r3, sl
 8114292:	db2b      	blt.n	81142ec <__lshift+0x8c>
 8114294:	6920      	ldr	r0, [r4, #16]
 8114296:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 811429a:	f104 0314 	add.w	r3, r4, #20
 811429e:	f016 021f 	ands.w	r2, r6, #31
 81142a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81142a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 81142aa:	d025      	beq.n	81142f8 <__lshift+0x98>
 81142ac:	f1c2 0e20 	rsb	lr, r2, #32
 81142b0:	2000      	movs	r0, #0
 81142b2:	681e      	ldr	r6, [r3, #0]
 81142b4:	468a      	mov	sl, r1
 81142b6:	4096      	lsls	r6, r2
 81142b8:	4330      	orrs	r0, r6
 81142ba:	f84a 0b04 	str.w	r0, [sl], #4
 81142be:	f853 0b04 	ldr.w	r0, [r3], #4
 81142c2:	459c      	cmp	ip, r3
 81142c4:	fa20 f00e 	lsr.w	r0, r0, lr
 81142c8:	d814      	bhi.n	81142f4 <__lshift+0x94>
 81142ca:	6048      	str	r0, [r1, #4]
 81142cc:	b108      	cbz	r0, 81142d2 <__lshift+0x72>
 81142ce:	f109 0502 	add.w	r5, r9, #2
 81142d2:	3d01      	subs	r5, #1
 81142d4:	4638      	mov	r0, r7
 81142d6:	f8c8 5010 	str.w	r5, [r8, #16]
 81142da:	4621      	mov	r1, r4
 81142dc:	f7ff fe32 	bl	8113f44 <_Bfree>
 81142e0:	4640      	mov	r0, r8
 81142e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81142e6:	3101      	adds	r1, #1
 81142e8:	005b      	lsls	r3, r3, #1
 81142ea:	e7c7      	b.n	811427c <__lshift+0x1c>
 81142ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 81142f0:	3301      	adds	r3, #1
 81142f2:	e7cd      	b.n	8114290 <__lshift+0x30>
 81142f4:	4651      	mov	r1, sl
 81142f6:	e7dc      	b.n	81142b2 <__lshift+0x52>
 81142f8:	3904      	subs	r1, #4
 81142fa:	f853 2b04 	ldr.w	r2, [r3], #4
 81142fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8114302:	459c      	cmp	ip, r3
 8114304:	d8f9      	bhi.n	81142fa <__lshift+0x9a>
 8114306:	e7e4      	b.n	81142d2 <__lshift+0x72>

08114308 <__mcmp>:
 8114308:	6903      	ldr	r3, [r0, #16]
 811430a:	690a      	ldr	r2, [r1, #16]
 811430c:	1a9b      	subs	r3, r3, r2
 811430e:	b530      	push	{r4, r5, lr}
 8114310:	d10c      	bne.n	811432c <__mcmp+0x24>
 8114312:	0092      	lsls	r2, r2, #2
 8114314:	3014      	adds	r0, #20
 8114316:	3114      	adds	r1, #20
 8114318:	1884      	adds	r4, r0, r2
 811431a:	4411      	add	r1, r2
 811431c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8114320:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8114324:	4295      	cmp	r5, r2
 8114326:	d003      	beq.n	8114330 <__mcmp+0x28>
 8114328:	d305      	bcc.n	8114336 <__mcmp+0x2e>
 811432a:	2301      	movs	r3, #1
 811432c:	4618      	mov	r0, r3
 811432e:	bd30      	pop	{r4, r5, pc}
 8114330:	42a0      	cmp	r0, r4
 8114332:	d3f3      	bcc.n	811431c <__mcmp+0x14>
 8114334:	e7fa      	b.n	811432c <__mcmp+0x24>
 8114336:	f04f 33ff 	mov.w	r3, #4294967295
 811433a:	e7f7      	b.n	811432c <__mcmp+0x24>

0811433c <__mdiff>:
 811433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114340:	460d      	mov	r5, r1
 8114342:	4607      	mov	r7, r0
 8114344:	4611      	mov	r1, r2
 8114346:	4628      	mov	r0, r5
 8114348:	4614      	mov	r4, r2
 811434a:	f7ff ffdd 	bl	8114308 <__mcmp>
 811434e:	1e06      	subs	r6, r0, #0
 8114350:	d108      	bne.n	8114364 <__mdiff+0x28>
 8114352:	4631      	mov	r1, r6
 8114354:	4638      	mov	r0, r7
 8114356:	f7ff fdc1 	bl	8113edc <_Balloc>
 811435a:	2301      	movs	r3, #1
 811435c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8114360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8114364:	bfa4      	itt	ge
 8114366:	4623      	movge	r3, r4
 8114368:	462c      	movge	r4, r5
 811436a:	4638      	mov	r0, r7
 811436c:	6861      	ldr	r1, [r4, #4]
 811436e:	bfa6      	itte	ge
 8114370:	461d      	movge	r5, r3
 8114372:	2600      	movge	r6, #0
 8114374:	2601      	movlt	r6, #1
 8114376:	f7ff fdb1 	bl	8113edc <_Balloc>
 811437a:	692b      	ldr	r3, [r5, #16]
 811437c:	60c6      	str	r6, [r0, #12]
 811437e:	6926      	ldr	r6, [r4, #16]
 8114380:	f105 0914 	add.w	r9, r5, #20
 8114384:	f104 0214 	add.w	r2, r4, #20
 8114388:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 811438c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8114390:	f100 0514 	add.w	r5, r0, #20
 8114394:	f04f 0e00 	mov.w	lr, #0
 8114398:	f852 ab04 	ldr.w	sl, [r2], #4
 811439c:	f859 4b04 	ldr.w	r4, [r9], #4
 81143a0:	fa1e f18a 	uxtah	r1, lr, sl
 81143a4:	b2a3      	uxth	r3, r4
 81143a6:	1ac9      	subs	r1, r1, r3
 81143a8:	0c23      	lsrs	r3, r4, #16
 81143aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 81143ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 81143b2:	b289      	uxth	r1, r1
 81143b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 81143b8:	45c8      	cmp	r8, r9
 81143ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 81143be:	4694      	mov	ip, r2
 81143c0:	f845 3b04 	str.w	r3, [r5], #4
 81143c4:	d8e8      	bhi.n	8114398 <__mdiff+0x5c>
 81143c6:	45bc      	cmp	ip, r7
 81143c8:	d304      	bcc.n	81143d4 <__mdiff+0x98>
 81143ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 81143ce:	b183      	cbz	r3, 81143f2 <__mdiff+0xb6>
 81143d0:	6106      	str	r6, [r0, #16]
 81143d2:	e7c5      	b.n	8114360 <__mdiff+0x24>
 81143d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 81143d8:	fa1e f381 	uxtah	r3, lr, r1
 81143dc:	141a      	asrs	r2, r3, #16
 81143de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 81143e2:	b29b      	uxth	r3, r3
 81143e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81143e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 81143ec:	f845 3b04 	str.w	r3, [r5], #4
 81143f0:	e7e9      	b.n	81143c6 <__mdiff+0x8a>
 81143f2:	3e01      	subs	r6, #1
 81143f4:	e7e9      	b.n	81143ca <__mdiff+0x8e>

081143f6 <__d2b>:
 81143f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81143fa:	460e      	mov	r6, r1
 81143fc:	2101      	movs	r1, #1
 81143fe:	ec59 8b10 	vmov	r8, r9, d0
 8114402:	4615      	mov	r5, r2
 8114404:	f7ff fd6a 	bl	8113edc <_Balloc>
 8114408:	f3c9 540a 	ubfx	r4, r9, #20, #11
 811440c:	4607      	mov	r7, r0
 811440e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8114412:	bb34      	cbnz	r4, 8114462 <__d2b+0x6c>
 8114414:	9301      	str	r3, [sp, #4]
 8114416:	f1b8 0300 	subs.w	r3, r8, #0
 811441a:	d027      	beq.n	811446c <__d2b+0x76>
 811441c:	a802      	add	r0, sp, #8
 811441e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8114422:	f7ff fe00 	bl	8114026 <__lo0bits>
 8114426:	9900      	ldr	r1, [sp, #0]
 8114428:	b1f0      	cbz	r0, 8114468 <__d2b+0x72>
 811442a:	9a01      	ldr	r2, [sp, #4]
 811442c:	f1c0 0320 	rsb	r3, r0, #32
 8114430:	fa02 f303 	lsl.w	r3, r2, r3
 8114434:	430b      	orrs	r3, r1
 8114436:	40c2      	lsrs	r2, r0
 8114438:	617b      	str	r3, [r7, #20]
 811443a:	9201      	str	r2, [sp, #4]
 811443c:	9b01      	ldr	r3, [sp, #4]
 811443e:	61bb      	str	r3, [r7, #24]
 8114440:	2b00      	cmp	r3, #0
 8114442:	bf14      	ite	ne
 8114444:	2102      	movne	r1, #2
 8114446:	2101      	moveq	r1, #1
 8114448:	6139      	str	r1, [r7, #16]
 811444a:	b1c4      	cbz	r4, 811447e <__d2b+0x88>
 811444c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8114450:	4404      	add	r4, r0
 8114452:	6034      	str	r4, [r6, #0]
 8114454:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8114458:	6028      	str	r0, [r5, #0]
 811445a:	4638      	mov	r0, r7
 811445c:	b003      	add	sp, #12
 811445e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8114462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8114466:	e7d5      	b.n	8114414 <__d2b+0x1e>
 8114468:	6179      	str	r1, [r7, #20]
 811446a:	e7e7      	b.n	811443c <__d2b+0x46>
 811446c:	a801      	add	r0, sp, #4
 811446e:	f7ff fdda 	bl	8114026 <__lo0bits>
 8114472:	9b01      	ldr	r3, [sp, #4]
 8114474:	617b      	str	r3, [r7, #20]
 8114476:	2101      	movs	r1, #1
 8114478:	6139      	str	r1, [r7, #16]
 811447a:	3020      	adds	r0, #32
 811447c:	e7e5      	b.n	811444a <__d2b+0x54>
 811447e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8114482:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8114486:	6030      	str	r0, [r6, #0]
 8114488:	6918      	ldr	r0, [r3, #16]
 811448a:	f7ff fdad 	bl	8113fe8 <__hi0bits>
 811448e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8114492:	e7e1      	b.n	8114458 <__d2b+0x62>

08114494 <_calloc_r>:
 8114494:	b538      	push	{r3, r4, r5, lr}
 8114496:	fb02 f401 	mul.w	r4, r2, r1
 811449a:	4621      	mov	r1, r4
 811449c:	f000 f856 	bl	811454c <_malloc_r>
 81144a0:	4605      	mov	r5, r0
 81144a2:	b118      	cbz	r0, 81144ac <_calloc_r+0x18>
 81144a4:	4622      	mov	r2, r4
 81144a6:	2100      	movs	r1, #0
 81144a8:	f7fd fdaf 	bl	811200a <memset>
 81144ac:	4628      	mov	r0, r5
 81144ae:	bd38      	pop	{r3, r4, r5, pc}

081144b0 <_free_r>:
 81144b0:	b538      	push	{r3, r4, r5, lr}
 81144b2:	4605      	mov	r5, r0
 81144b4:	2900      	cmp	r1, #0
 81144b6:	d045      	beq.n	8114544 <_free_r+0x94>
 81144b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81144bc:	1f0c      	subs	r4, r1, #4
 81144be:	2b00      	cmp	r3, #0
 81144c0:	bfb8      	it	lt
 81144c2:	18e4      	addlt	r4, r4, r3
 81144c4:	f000 fbfd 	bl	8114cc2 <__malloc_lock>
 81144c8:	4a1f      	ldr	r2, [pc, #124]	; (8114548 <_free_r+0x98>)
 81144ca:	6813      	ldr	r3, [r2, #0]
 81144cc:	4610      	mov	r0, r2
 81144ce:	b933      	cbnz	r3, 81144de <_free_r+0x2e>
 81144d0:	6063      	str	r3, [r4, #4]
 81144d2:	6014      	str	r4, [r2, #0]
 81144d4:	4628      	mov	r0, r5
 81144d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81144da:	f000 bbf3 	b.w	8114cc4 <__malloc_unlock>
 81144de:	42a3      	cmp	r3, r4
 81144e0:	d90c      	bls.n	81144fc <_free_r+0x4c>
 81144e2:	6821      	ldr	r1, [r4, #0]
 81144e4:	1862      	adds	r2, r4, r1
 81144e6:	4293      	cmp	r3, r2
 81144e8:	bf04      	itt	eq
 81144ea:	681a      	ldreq	r2, [r3, #0]
 81144ec:	685b      	ldreq	r3, [r3, #4]
 81144ee:	6063      	str	r3, [r4, #4]
 81144f0:	bf04      	itt	eq
 81144f2:	1852      	addeq	r2, r2, r1
 81144f4:	6022      	streq	r2, [r4, #0]
 81144f6:	6004      	str	r4, [r0, #0]
 81144f8:	e7ec      	b.n	81144d4 <_free_r+0x24>
 81144fa:	4613      	mov	r3, r2
 81144fc:	685a      	ldr	r2, [r3, #4]
 81144fe:	b10a      	cbz	r2, 8114504 <_free_r+0x54>
 8114500:	42a2      	cmp	r2, r4
 8114502:	d9fa      	bls.n	81144fa <_free_r+0x4a>
 8114504:	6819      	ldr	r1, [r3, #0]
 8114506:	1858      	adds	r0, r3, r1
 8114508:	42a0      	cmp	r0, r4
 811450a:	d10b      	bne.n	8114524 <_free_r+0x74>
 811450c:	6820      	ldr	r0, [r4, #0]
 811450e:	4401      	add	r1, r0
 8114510:	1858      	adds	r0, r3, r1
 8114512:	4282      	cmp	r2, r0
 8114514:	6019      	str	r1, [r3, #0]
 8114516:	d1dd      	bne.n	81144d4 <_free_r+0x24>
 8114518:	6810      	ldr	r0, [r2, #0]
 811451a:	6852      	ldr	r2, [r2, #4]
 811451c:	605a      	str	r2, [r3, #4]
 811451e:	4401      	add	r1, r0
 8114520:	6019      	str	r1, [r3, #0]
 8114522:	e7d7      	b.n	81144d4 <_free_r+0x24>
 8114524:	d902      	bls.n	811452c <_free_r+0x7c>
 8114526:	230c      	movs	r3, #12
 8114528:	602b      	str	r3, [r5, #0]
 811452a:	e7d3      	b.n	81144d4 <_free_r+0x24>
 811452c:	6820      	ldr	r0, [r4, #0]
 811452e:	1821      	adds	r1, r4, r0
 8114530:	428a      	cmp	r2, r1
 8114532:	bf04      	itt	eq
 8114534:	6811      	ldreq	r1, [r2, #0]
 8114536:	6852      	ldreq	r2, [r2, #4]
 8114538:	6062      	str	r2, [r4, #4]
 811453a:	bf04      	itt	eq
 811453c:	1809      	addeq	r1, r1, r0
 811453e:	6021      	streq	r1, [r4, #0]
 8114540:	605c      	str	r4, [r3, #4]
 8114542:	e7c7      	b.n	81144d4 <_free_r+0x24>
 8114544:	bd38      	pop	{r3, r4, r5, pc}
 8114546:	bf00      	nop
 8114548:	1000ddbc 	.word	0x1000ddbc

0811454c <_malloc_r>:
 811454c:	b570      	push	{r4, r5, r6, lr}
 811454e:	1ccd      	adds	r5, r1, #3
 8114550:	f025 0503 	bic.w	r5, r5, #3
 8114554:	3508      	adds	r5, #8
 8114556:	2d0c      	cmp	r5, #12
 8114558:	bf38      	it	cc
 811455a:	250c      	movcc	r5, #12
 811455c:	2d00      	cmp	r5, #0
 811455e:	4606      	mov	r6, r0
 8114560:	db01      	blt.n	8114566 <_malloc_r+0x1a>
 8114562:	42a9      	cmp	r1, r5
 8114564:	d903      	bls.n	811456e <_malloc_r+0x22>
 8114566:	230c      	movs	r3, #12
 8114568:	6033      	str	r3, [r6, #0]
 811456a:	2000      	movs	r0, #0
 811456c:	bd70      	pop	{r4, r5, r6, pc}
 811456e:	f000 fba8 	bl	8114cc2 <__malloc_lock>
 8114572:	4a21      	ldr	r2, [pc, #132]	; (81145f8 <_malloc_r+0xac>)
 8114574:	6814      	ldr	r4, [r2, #0]
 8114576:	4621      	mov	r1, r4
 8114578:	b991      	cbnz	r1, 81145a0 <_malloc_r+0x54>
 811457a:	4c20      	ldr	r4, [pc, #128]	; (81145fc <_malloc_r+0xb0>)
 811457c:	6823      	ldr	r3, [r4, #0]
 811457e:	b91b      	cbnz	r3, 8114588 <_malloc_r+0x3c>
 8114580:	4630      	mov	r0, r6
 8114582:	f000 facf 	bl	8114b24 <_sbrk_r>
 8114586:	6020      	str	r0, [r4, #0]
 8114588:	4629      	mov	r1, r5
 811458a:	4630      	mov	r0, r6
 811458c:	f000 faca 	bl	8114b24 <_sbrk_r>
 8114590:	1c43      	adds	r3, r0, #1
 8114592:	d124      	bne.n	81145de <_malloc_r+0x92>
 8114594:	230c      	movs	r3, #12
 8114596:	6033      	str	r3, [r6, #0]
 8114598:	4630      	mov	r0, r6
 811459a:	f000 fb93 	bl	8114cc4 <__malloc_unlock>
 811459e:	e7e4      	b.n	811456a <_malloc_r+0x1e>
 81145a0:	680b      	ldr	r3, [r1, #0]
 81145a2:	1b5b      	subs	r3, r3, r5
 81145a4:	d418      	bmi.n	81145d8 <_malloc_r+0x8c>
 81145a6:	2b0b      	cmp	r3, #11
 81145a8:	d90f      	bls.n	81145ca <_malloc_r+0x7e>
 81145aa:	600b      	str	r3, [r1, #0]
 81145ac:	50cd      	str	r5, [r1, r3]
 81145ae:	18cc      	adds	r4, r1, r3
 81145b0:	4630      	mov	r0, r6
 81145b2:	f000 fb87 	bl	8114cc4 <__malloc_unlock>
 81145b6:	f104 000b 	add.w	r0, r4, #11
 81145ba:	1d23      	adds	r3, r4, #4
 81145bc:	f020 0007 	bic.w	r0, r0, #7
 81145c0:	1ac3      	subs	r3, r0, r3
 81145c2:	d0d3      	beq.n	811456c <_malloc_r+0x20>
 81145c4:	425a      	negs	r2, r3
 81145c6:	50e2      	str	r2, [r4, r3]
 81145c8:	e7d0      	b.n	811456c <_malloc_r+0x20>
 81145ca:	428c      	cmp	r4, r1
 81145cc:	684b      	ldr	r3, [r1, #4]
 81145ce:	bf16      	itet	ne
 81145d0:	6063      	strne	r3, [r4, #4]
 81145d2:	6013      	streq	r3, [r2, #0]
 81145d4:	460c      	movne	r4, r1
 81145d6:	e7eb      	b.n	81145b0 <_malloc_r+0x64>
 81145d8:	460c      	mov	r4, r1
 81145da:	6849      	ldr	r1, [r1, #4]
 81145dc:	e7cc      	b.n	8114578 <_malloc_r+0x2c>
 81145de:	1cc4      	adds	r4, r0, #3
 81145e0:	f024 0403 	bic.w	r4, r4, #3
 81145e4:	42a0      	cmp	r0, r4
 81145e6:	d005      	beq.n	81145f4 <_malloc_r+0xa8>
 81145e8:	1a21      	subs	r1, r4, r0
 81145ea:	4630      	mov	r0, r6
 81145ec:	f000 fa9a 	bl	8114b24 <_sbrk_r>
 81145f0:	3001      	adds	r0, #1
 81145f2:	d0cf      	beq.n	8114594 <_malloc_r+0x48>
 81145f4:	6025      	str	r5, [r4, #0]
 81145f6:	e7db      	b.n	81145b0 <_malloc_r+0x64>
 81145f8:	1000ddbc 	.word	0x1000ddbc
 81145fc:	1000ddc0 	.word	0x1000ddc0

08114600 <__ssputs_r>:
 8114600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114604:	688e      	ldr	r6, [r1, #8]
 8114606:	429e      	cmp	r6, r3
 8114608:	4682      	mov	sl, r0
 811460a:	460c      	mov	r4, r1
 811460c:	4690      	mov	r8, r2
 811460e:	4699      	mov	r9, r3
 8114610:	d837      	bhi.n	8114682 <__ssputs_r+0x82>
 8114612:	898a      	ldrh	r2, [r1, #12]
 8114614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8114618:	d031      	beq.n	811467e <__ssputs_r+0x7e>
 811461a:	6825      	ldr	r5, [r4, #0]
 811461c:	6909      	ldr	r1, [r1, #16]
 811461e:	1a6f      	subs	r7, r5, r1
 8114620:	6965      	ldr	r5, [r4, #20]
 8114622:	2302      	movs	r3, #2
 8114624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8114628:	fb95 f5f3 	sdiv	r5, r5, r3
 811462c:	f109 0301 	add.w	r3, r9, #1
 8114630:	443b      	add	r3, r7
 8114632:	429d      	cmp	r5, r3
 8114634:	bf38      	it	cc
 8114636:	461d      	movcc	r5, r3
 8114638:	0553      	lsls	r3, r2, #21
 811463a:	d530      	bpl.n	811469e <__ssputs_r+0x9e>
 811463c:	4629      	mov	r1, r5
 811463e:	f7ff ff85 	bl	811454c <_malloc_r>
 8114642:	4606      	mov	r6, r0
 8114644:	b950      	cbnz	r0, 811465c <__ssputs_r+0x5c>
 8114646:	230c      	movs	r3, #12
 8114648:	f8ca 3000 	str.w	r3, [sl]
 811464c:	89a3      	ldrh	r3, [r4, #12]
 811464e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8114652:	81a3      	strh	r3, [r4, #12]
 8114654:	f04f 30ff 	mov.w	r0, #4294967295
 8114658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811465c:	463a      	mov	r2, r7
 811465e:	6921      	ldr	r1, [r4, #16]
 8114660:	f7fd fcc8 	bl	8111ff4 <memcpy>
 8114664:	89a3      	ldrh	r3, [r4, #12]
 8114666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 811466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 811466e:	81a3      	strh	r3, [r4, #12]
 8114670:	6126      	str	r6, [r4, #16]
 8114672:	6165      	str	r5, [r4, #20]
 8114674:	443e      	add	r6, r7
 8114676:	1bed      	subs	r5, r5, r7
 8114678:	6026      	str	r6, [r4, #0]
 811467a:	60a5      	str	r5, [r4, #8]
 811467c:	464e      	mov	r6, r9
 811467e:	454e      	cmp	r6, r9
 8114680:	d900      	bls.n	8114684 <__ssputs_r+0x84>
 8114682:	464e      	mov	r6, r9
 8114684:	4632      	mov	r2, r6
 8114686:	4641      	mov	r1, r8
 8114688:	6820      	ldr	r0, [r4, #0]
 811468a:	f000 fb01 	bl	8114c90 <memmove>
 811468e:	68a3      	ldr	r3, [r4, #8]
 8114690:	1b9b      	subs	r3, r3, r6
 8114692:	60a3      	str	r3, [r4, #8]
 8114694:	6823      	ldr	r3, [r4, #0]
 8114696:	441e      	add	r6, r3
 8114698:	6026      	str	r6, [r4, #0]
 811469a:	2000      	movs	r0, #0
 811469c:	e7dc      	b.n	8114658 <__ssputs_r+0x58>
 811469e:	462a      	mov	r2, r5
 81146a0:	f000 fb11 	bl	8114cc6 <_realloc_r>
 81146a4:	4606      	mov	r6, r0
 81146a6:	2800      	cmp	r0, #0
 81146a8:	d1e2      	bne.n	8114670 <__ssputs_r+0x70>
 81146aa:	6921      	ldr	r1, [r4, #16]
 81146ac:	4650      	mov	r0, sl
 81146ae:	f7ff feff 	bl	81144b0 <_free_r>
 81146b2:	e7c8      	b.n	8114646 <__ssputs_r+0x46>

081146b4 <_svfiprintf_r>:
 81146b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81146b8:	461d      	mov	r5, r3
 81146ba:	898b      	ldrh	r3, [r1, #12]
 81146bc:	061f      	lsls	r7, r3, #24
 81146be:	b09d      	sub	sp, #116	; 0x74
 81146c0:	4680      	mov	r8, r0
 81146c2:	460c      	mov	r4, r1
 81146c4:	4616      	mov	r6, r2
 81146c6:	d50f      	bpl.n	81146e8 <_svfiprintf_r+0x34>
 81146c8:	690b      	ldr	r3, [r1, #16]
 81146ca:	b96b      	cbnz	r3, 81146e8 <_svfiprintf_r+0x34>
 81146cc:	2140      	movs	r1, #64	; 0x40
 81146ce:	f7ff ff3d 	bl	811454c <_malloc_r>
 81146d2:	6020      	str	r0, [r4, #0]
 81146d4:	6120      	str	r0, [r4, #16]
 81146d6:	b928      	cbnz	r0, 81146e4 <_svfiprintf_r+0x30>
 81146d8:	230c      	movs	r3, #12
 81146da:	f8c8 3000 	str.w	r3, [r8]
 81146de:	f04f 30ff 	mov.w	r0, #4294967295
 81146e2:	e0c8      	b.n	8114876 <_svfiprintf_r+0x1c2>
 81146e4:	2340      	movs	r3, #64	; 0x40
 81146e6:	6163      	str	r3, [r4, #20]
 81146e8:	2300      	movs	r3, #0
 81146ea:	9309      	str	r3, [sp, #36]	; 0x24
 81146ec:	2320      	movs	r3, #32
 81146ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81146f2:	2330      	movs	r3, #48	; 0x30
 81146f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81146f8:	9503      	str	r5, [sp, #12]
 81146fa:	f04f 0b01 	mov.w	fp, #1
 81146fe:	4637      	mov	r7, r6
 8114700:	463d      	mov	r5, r7
 8114702:	f815 3b01 	ldrb.w	r3, [r5], #1
 8114706:	b10b      	cbz	r3, 811470c <_svfiprintf_r+0x58>
 8114708:	2b25      	cmp	r3, #37	; 0x25
 811470a:	d13e      	bne.n	811478a <_svfiprintf_r+0xd6>
 811470c:	ebb7 0a06 	subs.w	sl, r7, r6
 8114710:	d00b      	beq.n	811472a <_svfiprintf_r+0x76>
 8114712:	4653      	mov	r3, sl
 8114714:	4632      	mov	r2, r6
 8114716:	4621      	mov	r1, r4
 8114718:	4640      	mov	r0, r8
 811471a:	f7ff ff71 	bl	8114600 <__ssputs_r>
 811471e:	3001      	adds	r0, #1
 8114720:	f000 80a4 	beq.w	811486c <_svfiprintf_r+0x1b8>
 8114724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8114726:	4453      	add	r3, sl
 8114728:	9309      	str	r3, [sp, #36]	; 0x24
 811472a:	783b      	ldrb	r3, [r7, #0]
 811472c:	2b00      	cmp	r3, #0
 811472e:	f000 809d 	beq.w	811486c <_svfiprintf_r+0x1b8>
 8114732:	2300      	movs	r3, #0
 8114734:	f04f 32ff 	mov.w	r2, #4294967295
 8114738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811473c:	9304      	str	r3, [sp, #16]
 811473e:	9307      	str	r3, [sp, #28]
 8114740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8114744:	931a      	str	r3, [sp, #104]	; 0x68
 8114746:	462f      	mov	r7, r5
 8114748:	2205      	movs	r2, #5
 811474a:	f817 1b01 	ldrb.w	r1, [r7], #1
 811474e:	4850      	ldr	r0, [pc, #320]	; (8114890 <_svfiprintf_r+0x1dc>)
 8114750:	f7eb fdde 	bl	8100310 <memchr>
 8114754:	9b04      	ldr	r3, [sp, #16]
 8114756:	b9d0      	cbnz	r0, 811478e <_svfiprintf_r+0xda>
 8114758:	06d9      	lsls	r1, r3, #27
 811475a:	bf44      	itt	mi
 811475c:	2220      	movmi	r2, #32
 811475e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8114762:	071a      	lsls	r2, r3, #28
 8114764:	bf44      	itt	mi
 8114766:	222b      	movmi	r2, #43	; 0x2b
 8114768:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 811476c:	782a      	ldrb	r2, [r5, #0]
 811476e:	2a2a      	cmp	r2, #42	; 0x2a
 8114770:	d015      	beq.n	811479e <_svfiprintf_r+0xea>
 8114772:	9a07      	ldr	r2, [sp, #28]
 8114774:	462f      	mov	r7, r5
 8114776:	2000      	movs	r0, #0
 8114778:	250a      	movs	r5, #10
 811477a:	4639      	mov	r1, r7
 811477c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8114780:	3b30      	subs	r3, #48	; 0x30
 8114782:	2b09      	cmp	r3, #9
 8114784:	d94d      	bls.n	8114822 <_svfiprintf_r+0x16e>
 8114786:	b1b8      	cbz	r0, 81147b8 <_svfiprintf_r+0x104>
 8114788:	e00f      	b.n	81147aa <_svfiprintf_r+0xf6>
 811478a:	462f      	mov	r7, r5
 811478c:	e7b8      	b.n	8114700 <_svfiprintf_r+0x4c>
 811478e:	4a40      	ldr	r2, [pc, #256]	; (8114890 <_svfiprintf_r+0x1dc>)
 8114790:	1a80      	subs	r0, r0, r2
 8114792:	fa0b f000 	lsl.w	r0, fp, r0
 8114796:	4318      	orrs	r0, r3
 8114798:	9004      	str	r0, [sp, #16]
 811479a:	463d      	mov	r5, r7
 811479c:	e7d3      	b.n	8114746 <_svfiprintf_r+0x92>
 811479e:	9a03      	ldr	r2, [sp, #12]
 81147a0:	1d11      	adds	r1, r2, #4
 81147a2:	6812      	ldr	r2, [r2, #0]
 81147a4:	9103      	str	r1, [sp, #12]
 81147a6:	2a00      	cmp	r2, #0
 81147a8:	db01      	blt.n	81147ae <_svfiprintf_r+0xfa>
 81147aa:	9207      	str	r2, [sp, #28]
 81147ac:	e004      	b.n	81147b8 <_svfiprintf_r+0x104>
 81147ae:	4252      	negs	r2, r2
 81147b0:	f043 0302 	orr.w	r3, r3, #2
 81147b4:	9207      	str	r2, [sp, #28]
 81147b6:	9304      	str	r3, [sp, #16]
 81147b8:	783b      	ldrb	r3, [r7, #0]
 81147ba:	2b2e      	cmp	r3, #46	; 0x2e
 81147bc:	d10c      	bne.n	81147d8 <_svfiprintf_r+0x124>
 81147be:	787b      	ldrb	r3, [r7, #1]
 81147c0:	2b2a      	cmp	r3, #42	; 0x2a
 81147c2:	d133      	bne.n	811482c <_svfiprintf_r+0x178>
 81147c4:	9b03      	ldr	r3, [sp, #12]
 81147c6:	1d1a      	adds	r2, r3, #4
 81147c8:	681b      	ldr	r3, [r3, #0]
 81147ca:	9203      	str	r2, [sp, #12]
 81147cc:	2b00      	cmp	r3, #0
 81147ce:	bfb8      	it	lt
 81147d0:	f04f 33ff 	movlt.w	r3, #4294967295
 81147d4:	3702      	adds	r7, #2
 81147d6:	9305      	str	r3, [sp, #20]
 81147d8:	4d2e      	ldr	r5, [pc, #184]	; (8114894 <_svfiprintf_r+0x1e0>)
 81147da:	7839      	ldrb	r1, [r7, #0]
 81147dc:	2203      	movs	r2, #3
 81147de:	4628      	mov	r0, r5
 81147e0:	f7eb fd96 	bl	8100310 <memchr>
 81147e4:	b138      	cbz	r0, 81147f6 <_svfiprintf_r+0x142>
 81147e6:	2340      	movs	r3, #64	; 0x40
 81147e8:	1b40      	subs	r0, r0, r5
 81147ea:	fa03 f000 	lsl.w	r0, r3, r0
 81147ee:	9b04      	ldr	r3, [sp, #16]
 81147f0:	4303      	orrs	r3, r0
 81147f2:	3701      	adds	r7, #1
 81147f4:	9304      	str	r3, [sp, #16]
 81147f6:	7839      	ldrb	r1, [r7, #0]
 81147f8:	4827      	ldr	r0, [pc, #156]	; (8114898 <_svfiprintf_r+0x1e4>)
 81147fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81147fe:	2206      	movs	r2, #6
 8114800:	1c7e      	adds	r6, r7, #1
 8114802:	f7eb fd85 	bl	8100310 <memchr>
 8114806:	2800      	cmp	r0, #0
 8114808:	d038      	beq.n	811487c <_svfiprintf_r+0x1c8>
 811480a:	4b24      	ldr	r3, [pc, #144]	; (811489c <_svfiprintf_r+0x1e8>)
 811480c:	bb13      	cbnz	r3, 8114854 <_svfiprintf_r+0x1a0>
 811480e:	9b03      	ldr	r3, [sp, #12]
 8114810:	3307      	adds	r3, #7
 8114812:	f023 0307 	bic.w	r3, r3, #7
 8114816:	3308      	adds	r3, #8
 8114818:	9303      	str	r3, [sp, #12]
 811481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811481c:	444b      	add	r3, r9
 811481e:	9309      	str	r3, [sp, #36]	; 0x24
 8114820:	e76d      	b.n	81146fe <_svfiprintf_r+0x4a>
 8114822:	fb05 3202 	mla	r2, r5, r2, r3
 8114826:	2001      	movs	r0, #1
 8114828:	460f      	mov	r7, r1
 811482a:	e7a6      	b.n	811477a <_svfiprintf_r+0xc6>
 811482c:	2300      	movs	r3, #0
 811482e:	3701      	adds	r7, #1
 8114830:	9305      	str	r3, [sp, #20]
 8114832:	4619      	mov	r1, r3
 8114834:	250a      	movs	r5, #10
 8114836:	4638      	mov	r0, r7
 8114838:	f810 2b01 	ldrb.w	r2, [r0], #1
 811483c:	3a30      	subs	r2, #48	; 0x30
 811483e:	2a09      	cmp	r2, #9
 8114840:	d903      	bls.n	811484a <_svfiprintf_r+0x196>
 8114842:	2b00      	cmp	r3, #0
 8114844:	d0c8      	beq.n	81147d8 <_svfiprintf_r+0x124>
 8114846:	9105      	str	r1, [sp, #20]
 8114848:	e7c6      	b.n	81147d8 <_svfiprintf_r+0x124>
 811484a:	fb05 2101 	mla	r1, r5, r1, r2
 811484e:	2301      	movs	r3, #1
 8114850:	4607      	mov	r7, r0
 8114852:	e7f0      	b.n	8114836 <_svfiprintf_r+0x182>
 8114854:	ab03      	add	r3, sp, #12
 8114856:	9300      	str	r3, [sp, #0]
 8114858:	4622      	mov	r2, r4
 811485a:	4b11      	ldr	r3, [pc, #68]	; (81148a0 <_svfiprintf_r+0x1ec>)
 811485c:	a904      	add	r1, sp, #16
 811485e:	4640      	mov	r0, r8
 8114860:	f7fd fc70 	bl	8112144 <_printf_float>
 8114864:	f1b0 3fff 	cmp.w	r0, #4294967295
 8114868:	4681      	mov	r9, r0
 811486a:	d1d6      	bne.n	811481a <_svfiprintf_r+0x166>
 811486c:	89a3      	ldrh	r3, [r4, #12]
 811486e:	065b      	lsls	r3, r3, #25
 8114870:	f53f af35 	bmi.w	81146de <_svfiprintf_r+0x2a>
 8114874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8114876:	b01d      	add	sp, #116	; 0x74
 8114878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811487c:	ab03      	add	r3, sp, #12
 811487e:	9300      	str	r3, [sp, #0]
 8114880:	4622      	mov	r2, r4
 8114882:	4b07      	ldr	r3, [pc, #28]	; (81148a0 <_svfiprintf_r+0x1ec>)
 8114884:	a904      	add	r1, sp, #16
 8114886:	4640      	mov	r0, r8
 8114888:	f7fd ff12 	bl	81126b0 <_printf_i>
 811488c:	e7ea      	b.n	8114864 <_svfiprintf_r+0x1b0>
 811488e:	bf00      	nop
 8114890:	0811602c 	.word	0x0811602c
 8114894:	08116032 	.word	0x08116032
 8114898:	08116036 	.word	0x08116036
 811489c:	08112145 	.word	0x08112145
 81148a0:	08114601 	.word	0x08114601

081148a4 <__sfputc_r>:
 81148a4:	6893      	ldr	r3, [r2, #8]
 81148a6:	3b01      	subs	r3, #1
 81148a8:	2b00      	cmp	r3, #0
 81148aa:	b410      	push	{r4}
 81148ac:	6093      	str	r3, [r2, #8]
 81148ae:	da08      	bge.n	81148c2 <__sfputc_r+0x1e>
 81148b0:	6994      	ldr	r4, [r2, #24]
 81148b2:	42a3      	cmp	r3, r4
 81148b4:	db01      	blt.n	81148ba <__sfputc_r+0x16>
 81148b6:	290a      	cmp	r1, #10
 81148b8:	d103      	bne.n	81148c2 <__sfputc_r+0x1e>
 81148ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 81148be:	f7fe b99b 	b.w	8112bf8 <__swbuf_r>
 81148c2:	6813      	ldr	r3, [r2, #0]
 81148c4:	1c58      	adds	r0, r3, #1
 81148c6:	6010      	str	r0, [r2, #0]
 81148c8:	7019      	strb	r1, [r3, #0]
 81148ca:	4608      	mov	r0, r1
 81148cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 81148d0:	4770      	bx	lr

081148d2 <__sfputs_r>:
 81148d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81148d4:	4606      	mov	r6, r0
 81148d6:	460f      	mov	r7, r1
 81148d8:	4614      	mov	r4, r2
 81148da:	18d5      	adds	r5, r2, r3
 81148dc:	42ac      	cmp	r4, r5
 81148de:	d101      	bne.n	81148e4 <__sfputs_r+0x12>
 81148e0:	2000      	movs	r0, #0
 81148e2:	e007      	b.n	81148f4 <__sfputs_r+0x22>
 81148e4:	463a      	mov	r2, r7
 81148e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 81148ea:	4630      	mov	r0, r6
 81148ec:	f7ff ffda 	bl	81148a4 <__sfputc_r>
 81148f0:	1c43      	adds	r3, r0, #1
 81148f2:	d1f3      	bne.n	81148dc <__sfputs_r+0xa>
 81148f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081148f8 <_vfiprintf_r>:
 81148f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81148fc:	460c      	mov	r4, r1
 81148fe:	b09d      	sub	sp, #116	; 0x74
 8114900:	4617      	mov	r7, r2
 8114902:	461d      	mov	r5, r3
 8114904:	4606      	mov	r6, r0
 8114906:	b118      	cbz	r0, 8114910 <_vfiprintf_r+0x18>
 8114908:	6983      	ldr	r3, [r0, #24]
 811490a:	b90b      	cbnz	r3, 8114910 <_vfiprintf_r+0x18>
 811490c:	f7ff f9cc 	bl	8113ca8 <__sinit>
 8114910:	4b7c      	ldr	r3, [pc, #496]	; (8114b04 <_vfiprintf_r+0x20c>)
 8114912:	429c      	cmp	r4, r3
 8114914:	d158      	bne.n	81149c8 <_vfiprintf_r+0xd0>
 8114916:	6874      	ldr	r4, [r6, #4]
 8114918:	89a3      	ldrh	r3, [r4, #12]
 811491a:	0718      	lsls	r0, r3, #28
 811491c:	d55e      	bpl.n	81149dc <_vfiprintf_r+0xe4>
 811491e:	6923      	ldr	r3, [r4, #16]
 8114920:	2b00      	cmp	r3, #0
 8114922:	d05b      	beq.n	81149dc <_vfiprintf_r+0xe4>
 8114924:	2300      	movs	r3, #0
 8114926:	9309      	str	r3, [sp, #36]	; 0x24
 8114928:	2320      	movs	r3, #32
 811492a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 811492e:	2330      	movs	r3, #48	; 0x30
 8114930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8114934:	9503      	str	r5, [sp, #12]
 8114936:	f04f 0b01 	mov.w	fp, #1
 811493a:	46b8      	mov	r8, r7
 811493c:	4645      	mov	r5, r8
 811493e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8114942:	b10b      	cbz	r3, 8114948 <_vfiprintf_r+0x50>
 8114944:	2b25      	cmp	r3, #37	; 0x25
 8114946:	d154      	bne.n	81149f2 <_vfiprintf_r+0xfa>
 8114948:	ebb8 0a07 	subs.w	sl, r8, r7
 811494c:	d00b      	beq.n	8114966 <_vfiprintf_r+0x6e>
 811494e:	4653      	mov	r3, sl
 8114950:	463a      	mov	r2, r7
 8114952:	4621      	mov	r1, r4
 8114954:	4630      	mov	r0, r6
 8114956:	f7ff ffbc 	bl	81148d2 <__sfputs_r>
 811495a:	3001      	adds	r0, #1
 811495c:	f000 80c2 	beq.w	8114ae4 <_vfiprintf_r+0x1ec>
 8114960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8114962:	4453      	add	r3, sl
 8114964:	9309      	str	r3, [sp, #36]	; 0x24
 8114966:	f898 3000 	ldrb.w	r3, [r8]
 811496a:	2b00      	cmp	r3, #0
 811496c:	f000 80ba 	beq.w	8114ae4 <_vfiprintf_r+0x1ec>
 8114970:	2300      	movs	r3, #0
 8114972:	f04f 32ff 	mov.w	r2, #4294967295
 8114976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811497a:	9304      	str	r3, [sp, #16]
 811497c:	9307      	str	r3, [sp, #28]
 811497e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8114982:	931a      	str	r3, [sp, #104]	; 0x68
 8114984:	46a8      	mov	r8, r5
 8114986:	2205      	movs	r2, #5
 8114988:	f818 1b01 	ldrb.w	r1, [r8], #1
 811498c:	485e      	ldr	r0, [pc, #376]	; (8114b08 <_vfiprintf_r+0x210>)
 811498e:	f7eb fcbf 	bl	8100310 <memchr>
 8114992:	9b04      	ldr	r3, [sp, #16]
 8114994:	bb78      	cbnz	r0, 81149f6 <_vfiprintf_r+0xfe>
 8114996:	06d9      	lsls	r1, r3, #27
 8114998:	bf44      	itt	mi
 811499a:	2220      	movmi	r2, #32
 811499c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81149a0:	071a      	lsls	r2, r3, #28
 81149a2:	bf44      	itt	mi
 81149a4:	222b      	movmi	r2, #43	; 0x2b
 81149a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81149aa:	782a      	ldrb	r2, [r5, #0]
 81149ac:	2a2a      	cmp	r2, #42	; 0x2a
 81149ae:	d02a      	beq.n	8114a06 <_vfiprintf_r+0x10e>
 81149b0:	9a07      	ldr	r2, [sp, #28]
 81149b2:	46a8      	mov	r8, r5
 81149b4:	2000      	movs	r0, #0
 81149b6:	250a      	movs	r5, #10
 81149b8:	4641      	mov	r1, r8
 81149ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 81149be:	3b30      	subs	r3, #48	; 0x30
 81149c0:	2b09      	cmp	r3, #9
 81149c2:	d969      	bls.n	8114a98 <_vfiprintf_r+0x1a0>
 81149c4:	b360      	cbz	r0, 8114a20 <_vfiprintf_r+0x128>
 81149c6:	e024      	b.n	8114a12 <_vfiprintf_r+0x11a>
 81149c8:	4b50      	ldr	r3, [pc, #320]	; (8114b0c <_vfiprintf_r+0x214>)
 81149ca:	429c      	cmp	r4, r3
 81149cc:	d101      	bne.n	81149d2 <_vfiprintf_r+0xda>
 81149ce:	68b4      	ldr	r4, [r6, #8]
 81149d0:	e7a2      	b.n	8114918 <_vfiprintf_r+0x20>
 81149d2:	4b4f      	ldr	r3, [pc, #316]	; (8114b10 <_vfiprintf_r+0x218>)
 81149d4:	429c      	cmp	r4, r3
 81149d6:	bf08      	it	eq
 81149d8:	68f4      	ldreq	r4, [r6, #12]
 81149da:	e79d      	b.n	8114918 <_vfiprintf_r+0x20>
 81149dc:	4621      	mov	r1, r4
 81149de:	4630      	mov	r0, r6
 81149e0:	f7fe f95c 	bl	8112c9c <__swsetup_r>
 81149e4:	2800      	cmp	r0, #0
 81149e6:	d09d      	beq.n	8114924 <_vfiprintf_r+0x2c>
 81149e8:	f04f 30ff 	mov.w	r0, #4294967295
 81149ec:	b01d      	add	sp, #116	; 0x74
 81149ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81149f2:	46a8      	mov	r8, r5
 81149f4:	e7a2      	b.n	811493c <_vfiprintf_r+0x44>
 81149f6:	4a44      	ldr	r2, [pc, #272]	; (8114b08 <_vfiprintf_r+0x210>)
 81149f8:	1a80      	subs	r0, r0, r2
 81149fa:	fa0b f000 	lsl.w	r0, fp, r0
 81149fe:	4318      	orrs	r0, r3
 8114a00:	9004      	str	r0, [sp, #16]
 8114a02:	4645      	mov	r5, r8
 8114a04:	e7be      	b.n	8114984 <_vfiprintf_r+0x8c>
 8114a06:	9a03      	ldr	r2, [sp, #12]
 8114a08:	1d11      	adds	r1, r2, #4
 8114a0a:	6812      	ldr	r2, [r2, #0]
 8114a0c:	9103      	str	r1, [sp, #12]
 8114a0e:	2a00      	cmp	r2, #0
 8114a10:	db01      	blt.n	8114a16 <_vfiprintf_r+0x11e>
 8114a12:	9207      	str	r2, [sp, #28]
 8114a14:	e004      	b.n	8114a20 <_vfiprintf_r+0x128>
 8114a16:	4252      	negs	r2, r2
 8114a18:	f043 0302 	orr.w	r3, r3, #2
 8114a1c:	9207      	str	r2, [sp, #28]
 8114a1e:	9304      	str	r3, [sp, #16]
 8114a20:	f898 3000 	ldrb.w	r3, [r8]
 8114a24:	2b2e      	cmp	r3, #46	; 0x2e
 8114a26:	d10e      	bne.n	8114a46 <_vfiprintf_r+0x14e>
 8114a28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8114a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8114a2e:	d138      	bne.n	8114aa2 <_vfiprintf_r+0x1aa>
 8114a30:	9b03      	ldr	r3, [sp, #12]
 8114a32:	1d1a      	adds	r2, r3, #4
 8114a34:	681b      	ldr	r3, [r3, #0]
 8114a36:	9203      	str	r2, [sp, #12]
 8114a38:	2b00      	cmp	r3, #0
 8114a3a:	bfb8      	it	lt
 8114a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8114a40:	f108 0802 	add.w	r8, r8, #2
 8114a44:	9305      	str	r3, [sp, #20]
 8114a46:	4d33      	ldr	r5, [pc, #204]	; (8114b14 <_vfiprintf_r+0x21c>)
 8114a48:	f898 1000 	ldrb.w	r1, [r8]
 8114a4c:	2203      	movs	r2, #3
 8114a4e:	4628      	mov	r0, r5
 8114a50:	f7eb fc5e 	bl	8100310 <memchr>
 8114a54:	b140      	cbz	r0, 8114a68 <_vfiprintf_r+0x170>
 8114a56:	2340      	movs	r3, #64	; 0x40
 8114a58:	1b40      	subs	r0, r0, r5
 8114a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8114a5e:	9b04      	ldr	r3, [sp, #16]
 8114a60:	4303      	orrs	r3, r0
 8114a62:	f108 0801 	add.w	r8, r8, #1
 8114a66:	9304      	str	r3, [sp, #16]
 8114a68:	f898 1000 	ldrb.w	r1, [r8]
 8114a6c:	482a      	ldr	r0, [pc, #168]	; (8114b18 <_vfiprintf_r+0x220>)
 8114a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8114a72:	2206      	movs	r2, #6
 8114a74:	f108 0701 	add.w	r7, r8, #1
 8114a78:	f7eb fc4a 	bl	8100310 <memchr>
 8114a7c:	2800      	cmp	r0, #0
 8114a7e:	d037      	beq.n	8114af0 <_vfiprintf_r+0x1f8>
 8114a80:	4b26      	ldr	r3, [pc, #152]	; (8114b1c <_vfiprintf_r+0x224>)
 8114a82:	bb1b      	cbnz	r3, 8114acc <_vfiprintf_r+0x1d4>
 8114a84:	9b03      	ldr	r3, [sp, #12]
 8114a86:	3307      	adds	r3, #7
 8114a88:	f023 0307 	bic.w	r3, r3, #7
 8114a8c:	3308      	adds	r3, #8
 8114a8e:	9303      	str	r3, [sp, #12]
 8114a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8114a92:	444b      	add	r3, r9
 8114a94:	9309      	str	r3, [sp, #36]	; 0x24
 8114a96:	e750      	b.n	811493a <_vfiprintf_r+0x42>
 8114a98:	fb05 3202 	mla	r2, r5, r2, r3
 8114a9c:	2001      	movs	r0, #1
 8114a9e:	4688      	mov	r8, r1
 8114aa0:	e78a      	b.n	81149b8 <_vfiprintf_r+0xc0>
 8114aa2:	2300      	movs	r3, #0
 8114aa4:	f108 0801 	add.w	r8, r8, #1
 8114aa8:	9305      	str	r3, [sp, #20]
 8114aaa:	4619      	mov	r1, r3
 8114aac:	250a      	movs	r5, #10
 8114aae:	4640      	mov	r0, r8
 8114ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8114ab4:	3a30      	subs	r2, #48	; 0x30
 8114ab6:	2a09      	cmp	r2, #9
 8114ab8:	d903      	bls.n	8114ac2 <_vfiprintf_r+0x1ca>
 8114aba:	2b00      	cmp	r3, #0
 8114abc:	d0c3      	beq.n	8114a46 <_vfiprintf_r+0x14e>
 8114abe:	9105      	str	r1, [sp, #20]
 8114ac0:	e7c1      	b.n	8114a46 <_vfiprintf_r+0x14e>
 8114ac2:	fb05 2101 	mla	r1, r5, r1, r2
 8114ac6:	2301      	movs	r3, #1
 8114ac8:	4680      	mov	r8, r0
 8114aca:	e7f0      	b.n	8114aae <_vfiprintf_r+0x1b6>
 8114acc:	ab03      	add	r3, sp, #12
 8114ace:	9300      	str	r3, [sp, #0]
 8114ad0:	4622      	mov	r2, r4
 8114ad2:	4b13      	ldr	r3, [pc, #76]	; (8114b20 <_vfiprintf_r+0x228>)
 8114ad4:	a904      	add	r1, sp, #16
 8114ad6:	4630      	mov	r0, r6
 8114ad8:	f7fd fb34 	bl	8112144 <_printf_float>
 8114adc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8114ae0:	4681      	mov	r9, r0
 8114ae2:	d1d5      	bne.n	8114a90 <_vfiprintf_r+0x198>
 8114ae4:	89a3      	ldrh	r3, [r4, #12]
 8114ae6:	065b      	lsls	r3, r3, #25
 8114ae8:	f53f af7e 	bmi.w	81149e8 <_vfiprintf_r+0xf0>
 8114aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8114aee:	e77d      	b.n	81149ec <_vfiprintf_r+0xf4>
 8114af0:	ab03      	add	r3, sp, #12
 8114af2:	9300      	str	r3, [sp, #0]
 8114af4:	4622      	mov	r2, r4
 8114af6:	4b0a      	ldr	r3, [pc, #40]	; (8114b20 <_vfiprintf_r+0x228>)
 8114af8:	a904      	add	r1, sp, #16
 8114afa:	4630      	mov	r0, r6
 8114afc:	f7fd fdd8 	bl	81126b0 <_printf_i>
 8114b00:	e7ec      	b.n	8114adc <_vfiprintf_r+0x1e4>
 8114b02:	bf00      	nop
 8114b04:	08115ee0 	.word	0x08115ee0
 8114b08:	0811602c 	.word	0x0811602c
 8114b0c:	08115f00 	.word	0x08115f00
 8114b10:	08115ec0 	.word	0x08115ec0
 8114b14:	08116032 	.word	0x08116032
 8114b18:	08116036 	.word	0x08116036
 8114b1c:	08112145 	.word	0x08112145
 8114b20:	081148d3 	.word	0x081148d3

08114b24 <_sbrk_r>:
 8114b24:	b538      	push	{r3, r4, r5, lr}
 8114b26:	4c06      	ldr	r4, [pc, #24]	; (8114b40 <_sbrk_r+0x1c>)
 8114b28:	2300      	movs	r3, #0
 8114b2a:	4605      	mov	r5, r0
 8114b2c:	4608      	mov	r0, r1
 8114b2e:	6023      	str	r3, [r4, #0]
 8114b30:	f7ed fa1c 	bl	8101f6c <_sbrk>
 8114b34:	1c43      	adds	r3, r0, #1
 8114b36:	d102      	bne.n	8114b3e <_sbrk_r+0x1a>
 8114b38:	6823      	ldr	r3, [r4, #0]
 8114b3a:	b103      	cbz	r3, 8114b3e <_sbrk_r+0x1a>
 8114b3c:	602b      	str	r3, [r5, #0]
 8114b3e:	bd38      	pop	{r3, r4, r5, pc}
 8114b40:	1000e780 	.word	0x1000e780

08114b44 <__sread>:
 8114b44:	b510      	push	{r4, lr}
 8114b46:	460c      	mov	r4, r1
 8114b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8114b4c:	f000 f8e2 	bl	8114d14 <_read_r>
 8114b50:	2800      	cmp	r0, #0
 8114b52:	bfab      	itete	ge
 8114b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8114b56:	89a3      	ldrhlt	r3, [r4, #12]
 8114b58:	181b      	addge	r3, r3, r0
 8114b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8114b5e:	bfac      	ite	ge
 8114b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8114b62:	81a3      	strhlt	r3, [r4, #12]
 8114b64:	bd10      	pop	{r4, pc}

08114b66 <__swrite>:
 8114b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8114b6a:	461f      	mov	r7, r3
 8114b6c:	898b      	ldrh	r3, [r1, #12]
 8114b6e:	05db      	lsls	r3, r3, #23
 8114b70:	4605      	mov	r5, r0
 8114b72:	460c      	mov	r4, r1
 8114b74:	4616      	mov	r6, r2
 8114b76:	d505      	bpl.n	8114b84 <__swrite+0x1e>
 8114b78:	2302      	movs	r3, #2
 8114b7a:	2200      	movs	r2, #0
 8114b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8114b80:	f000 f874 	bl	8114c6c <_lseek_r>
 8114b84:	89a3      	ldrh	r3, [r4, #12]
 8114b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8114b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8114b8e:	81a3      	strh	r3, [r4, #12]
 8114b90:	4632      	mov	r2, r6
 8114b92:	463b      	mov	r3, r7
 8114b94:	4628      	mov	r0, r5
 8114b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8114b9a:	f000 b823 	b.w	8114be4 <_write_r>

08114b9e <__sseek>:
 8114b9e:	b510      	push	{r4, lr}
 8114ba0:	460c      	mov	r4, r1
 8114ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8114ba6:	f000 f861 	bl	8114c6c <_lseek_r>
 8114baa:	1c43      	adds	r3, r0, #1
 8114bac:	89a3      	ldrh	r3, [r4, #12]
 8114bae:	bf15      	itete	ne
 8114bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8114bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8114bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8114bba:	81a3      	strheq	r3, [r4, #12]
 8114bbc:	bf18      	it	ne
 8114bbe:	81a3      	strhne	r3, [r4, #12]
 8114bc0:	bd10      	pop	{r4, pc}

08114bc2 <__sclose>:
 8114bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8114bc6:	f000 b81f 	b.w	8114c08 <_close_r>

08114bca <__ascii_wctomb>:
 8114bca:	b149      	cbz	r1, 8114be0 <__ascii_wctomb+0x16>
 8114bcc:	2aff      	cmp	r2, #255	; 0xff
 8114bce:	bf85      	ittet	hi
 8114bd0:	238a      	movhi	r3, #138	; 0x8a
 8114bd2:	6003      	strhi	r3, [r0, #0]
 8114bd4:	700a      	strbls	r2, [r1, #0]
 8114bd6:	f04f 30ff 	movhi.w	r0, #4294967295
 8114bda:	bf98      	it	ls
 8114bdc:	2001      	movls	r0, #1
 8114bde:	4770      	bx	lr
 8114be0:	4608      	mov	r0, r1
 8114be2:	4770      	bx	lr

08114be4 <_write_r>:
 8114be4:	b538      	push	{r3, r4, r5, lr}
 8114be6:	4c07      	ldr	r4, [pc, #28]	; (8114c04 <_write_r+0x20>)
 8114be8:	4605      	mov	r5, r0
 8114bea:	4608      	mov	r0, r1
 8114bec:	4611      	mov	r1, r2
 8114bee:	2200      	movs	r2, #0
 8114bf0:	6022      	str	r2, [r4, #0]
 8114bf2:	461a      	mov	r2, r3
 8114bf4:	f7ed f969 	bl	8101eca <_write>
 8114bf8:	1c43      	adds	r3, r0, #1
 8114bfa:	d102      	bne.n	8114c02 <_write_r+0x1e>
 8114bfc:	6823      	ldr	r3, [r4, #0]
 8114bfe:	b103      	cbz	r3, 8114c02 <_write_r+0x1e>
 8114c00:	602b      	str	r3, [r5, #0]
 8114c02:	bd38      	pop	{r3, r4, r5, pc}
 8114c04:	1000e780 	.word	0x1000e780

08114c08 <_close_r>:
 8114c08:	b538      	push	{r3, r4, r5, lr}
 8114c0a:	4c06      	ldr	r4, [pc, #24]	; (8114c24 <_close_r+0x1c>)
 8114c0c:	2300      	movs	r3, #0
 8114c0e:	4605      	mov	r5, r0
 8114c10:	4608      	mov	r0, r1
 8114c12:	6023      	str	r3, [r4, #0]
 8114c14:	f7ed f975 	bl	8101f02 <_close>
 8114c18:	1c43      	adds	r3, r0, #1
 8114c1a:	d102      	bne.n	8114c22 <_close_r+0x1a>
 8114c1c:	6823      	ldr	r3, [r4, #0]
 8114c1e:	b103      	cbz	r3, 8114c22 <_close_r+0x1a>
 8114c20:	602b      	str	r3, [r5, #0]
 8114c22:	bd38      	pop	{r3, r4, r5, pc}
 8114c24:	1000e780 	.word	0x1000e780

08114c28 <_fstat_r>:
 8114c28:	b538      	push	{r3, r4, r5, lr}
 8114c2a:	4c07      	ldr	r4, [pc, #28]	; (8114c48 <_fstat_r+0x20>)
 8114c2c:	2300      	movs	r3, #0
 8114c2e:	4605      	mov	r5, r0
 8114c30:	4608      	mov	r0, r1
 8114c32:	4611      	mov	r1, r2
 8114c34:	6023      	str	r3, [r4, #0]
 8114c36:	f7ed f970 	bl	8101f1a <_fstat>
 8114c3a:	1c43      	adds	r3, r0, #1
 8114c3c:	d102      	bne.n	8114c44 <_fstat_r+0x1c>
 8114c3e:	6823      	ldr	r3, [r4, #0]
 8114c40:	b103      	cbz	r3, 8114c44 <_fstat_r+0x1c>
 8114c42:	602b      	str	r3, [r5, #0]
 8114c44:	bd38      	pop	{r3, r4, r5, pc}
 8114c46:	bf00      	nop
 8114c48:	1000e780 	.word	0x1000e780

08114c4c <_isatty_r>:
 8114c4c:	b538      	push	{r3, r4, r5, lr}
 8114c4e:	4c06      	ldr	r4, [pc, #24]	; (8114c68 <_isatty_r+0x1c>)
 8114c50:	2300      	movs	r3, #0
 8114c52:	4605      	mov	r5, r0
 8114c54:	4608      	mov	r0, r1
 8114c56:	6023      	str	r3, [r4, #0]
 8114c58:	f7ed f96f 	bl	8101f3a <_isatty>
 8114c5c:	1c43      	adds	r3, r0, #1
 8114c5e:	d102      	bne.n	8114c66 <_isatty_r+0x1a>
 8114c60:	6823      	ldr	r3, [r4, #0]
 8114c62:	b103      	cbz	r3, 8114c66 <_isatty_r+0x1a>
 8114c64:	602b      	str	r3, [r5, #0]
 8114c66:	bd38      	pop	{r3, r4, r5, pc}
 8114c68:	1000e780 	.word	0x1000e780

08114c6c <_lseek_r>:
 8114c6c:	b538      	push	{r3, r4, r5, lr}
 8114c6e:	4c07      	ldr	r4, [pc, #28]	; (8114c8c <_lseek_r+0x20>)
 8114c70:	4605      	mov	r5, r0
 8114c72:	4608      	mov	r0, r1
 8114c74:	4611      	mov	r1, r2
 8114c76:	2200      	movs	r2, #0
 8114c78:	6022      	str	r2, [r4, #0]
 8114c7a:	461a      	mov	r2, r3
 8114c7c:	f7ed f968 	bl	8101f50 <_lseek>
 8114c80:	1c43      	adds	r3, r0, #1
 8114c82:	d102      	bne.n	8114c8a <_lseek_r+0x1e>
 8114c84:	6823      	ldr	r3, [r4, #0]
 8114c86:	b103      	cbz	r3, 8114c8a <_lseek_r+0x1e>
 8114c88:	602b      	str	r3, [r5, #0]
 8114c8a:	bd38      	pop	{r3, r4, r5, pc}
 8114c8c:	1000e780 	.word	0x1000e780

08114c90 <memmove>:
 8114c90:	4288      	cmp	r0, r1
 8114c92:	b510      	push	{r4, lr}
 8114c94:	eb01 0302 	add.w	r3, r1, r2
 8114c98:	d807      	bhi.n	8114caa <memmove+0x1a>
 8114c9a:	1e42      	subs	r2, r0, #1
 8114c9c:	4299      	cmp	r1, r3
 8114c9e:	d00a      	beq.n	8114cb6 <memmove+0x26>
 8114ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8114ca4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8114ca8:	e7f8      	b.n	8114c9c <memmove+0xc>
 8114caa:	4283      	cmp	r3, r0
 8114cac:	d9f5      	bls.n	8114c9a <memmove+0xa>
 8114cae:	1881      	adds	r1, r0, r2
 8114cb0:	1ad2      	subs	r2, r2, r3
 8114cb2:	42d3      	cmn	r3, r2
 8114cb4:	d100      	bne.n	8114cb8 <memmove+0x28>
 8114cb6:	bd10      	pop	{r4, pc}
 8114cb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8114cbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8114cc0:	e7f7      	b.n	8114cb2 <memmove+0x22>

08114cc2 <__malloc_lock>:
 8114cc2:	4770      	bx	lr

08114cc4 <__malloc_unlock>:
 8114cc4:	4770      	bx	lr

08114cc6 <_realloc_r>:
 8114cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8114cc8:	4607      	mov	r7, r0
 8114cca:	4614      	mov	r4, r2
 8114ccc:	460e      	mov	r6, r1
 8114cce:	b921      	cbnz	r1, 8114cda <_realloc_r+0x14>
 8114cd0:	4611      	mov	r1, r2
 8114cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8114cd6:	f7ff bc39 	b.w	811454c <_malloc_r>
 8114cda:	b922      	cbnz	r2, 8114ce6 <_realloc_r+0x20>
 8114cdc:	f7ff fbe8 	bl	81144b0 <_free_r>
 8114ce0:	4625      	mov	r5, r4
 8114ce2:	4628      	mov	r0, r5
 8114ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8114ce6:	f000 f827 	bl	8114d38 <_malloc_usable_size_r>
 8114cea:	42a0      	cmp	r0, r4
 8114cec:	d20f      	bcs.n	8114d0e <_realloc_r+0x48>
 8114cee:	4621      	mov	r1, r4
 8114cf0:	4638      	mov	r0, r7
 8114cf2:	f7ff fc2b 	bl	811454c <_malloc_r>
 8114cf6:	4605      	mov	r5, r0
 8114cf8:	2800      	cmp	r0, #0
 8114cfa:	d0f2      	beq.n	8114ce2 <_realloc_r+0x1c>
 8114cfc:	4631      	mov	r1, r6
 8114cfe:	4622      	mov	r2, r4
 8114d00:	f7fd f978 	bl	8111ff4 <memcpy>
 8114d04:	4631      	mov	r1, r6
 8114d06:	4638      	mov	r0, r7
 8114d08:	f7ff fbd2 	bl	81144b0 <_free_r>
 8114d0c:	e7e9      	b.n	8114ce2 <_realloc_r+0x1c>
 8114d0e:	4635      	mov	r5, r6
 8114d10:	e7e7      	b.n	8114ce2 <_realloc_r+0x1c>
	...

08114d14 <_read_r>:
 8114d14:	b538      	push	{r3, r4, r5, lr}
 8114d16:	4c07      	ldr	r4, [pc, #28]	; (8114d34 <_read_r+0x20>)
 8114d18:	4605      	mov	r5, r0
 8114d1a:	4608      	mov	r0, r1
 8114d1c:	4611      	mov	r1, r2
 8114d1e:	2200      	movs	r2, #0
 8114d20:	6022      	str	r2, [r4, #0]
 8114d22:	461a      	mov	r2, r3
 8114d24:	f7ed f8b4 	bl	8101e90 <_read>
 8114d28:	1c43      	adds	r3, r0, #1
 8114d2a:	d102      	bne.n	8114d32 <_read_r+0x1e>
 8114d2c:	6823      	ldr	r3, [r4, #0]
 8114d2e:	b103      	cbz	r3, 8114d32 <_read_r+0x1e>
 8114d30:	602b      	str	r3, [r5, #0]
 8114d32:	bd38      	pop	{r3, r4, r5, pc}
 8114d34:	1000e780 	.word	0x1000e780

08114d38 <_malloc_usable_size_r>:
 8114d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8114d3c:	1f18      	subs	r0, r3, #4
 8114d3e:	2b00      	cmp	r3, #0
 8114d40:	bfbc      	itt	lt
 8114d42:	580b      	ldrlt	r3, [r1, r0]
 8114d44:	18c0      	addlt	r0, r0, r3
 8114d46:	4770      	bx	lr

08114d48 <_init>:
 8114d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8114d4a:	bf00      	nop
 8114d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8114d4e:	bc08      	pop	{r3}
 8114d50:	469e      	mov	lr, r3
 8114d52:	4770      	bx	lr

08114d54 <_fini>:
 8114d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8114d56:	bf00      	nop
 8114d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8114d5a:	bc08      	pop	{r3}
 8114d5c:	469e      	mov	lr, r3
 8114d5e:	4770      	bx	lr
