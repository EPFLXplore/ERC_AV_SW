
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011008  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  081112a8  081112a8  000212a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08111c88  08111c88  00021c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08111c90  08111c90  00021c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08111c98  08111c98  00021c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  10000000  08111c9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005fc8  10000208  08111ea4  00030208  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100061d0  08111ea4  000361d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005a438  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000097e6  00000000  00000000  0008a670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002770  00000000  00000000  00093e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000023f8  00000000  00000000  000965c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004ad55  00000000  00000000  000989c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00031e61  00000000  00000000  000e3715  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001ab574  00000000  00000000  00115576  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002c0aea  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b6c0  00000000  00000000  002c0b68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000208 	.word	0x10000208
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08111290 	.word	0x08111290

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000020c 	.word	0x1000020c
 81002dc:	08111290 	.word	0x08111290

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81004ce:	f1a4 0401 	sub.w	r4, r4, #1
 81004d2:	d1e9      	bne.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2f>:
 8100cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100cc0:	bf24      	itt	cs
 8100cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cca:	d90d      	bls.n	8100ce8 <__aeabi_d2f+0x30>
 8100ccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100ce0:	bf08      	it	eq
 8100ce2:	f020 0001 	biceq.w	r0, r0, #1
 8100ce6:	4770      	bx	lr
 8100ce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100cec:	d121      	bne.n	8100d32 <__aeabi_d2f+0x7a>
 8100cee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100cf2:	bfbc      	itt	lt
 8100cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100cf8:	4770      	bxlt	lr
 8100cfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d02:	f1c2 0218 	rsb	r2, r2, #24
 8100d06:	f1c2 0c20 	rsb	ip, r2, #32
 8100d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d12:	bf18      	it	ne
 8100d14:	f040 0001 	orrne.w	r0, r0, #1
 8100d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d24:	ea40 000c 	orr.w	r0, r0, ip
 8100d28:	fa23 f302 	lsr.w	r3, r3, r2
 8100d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d30:	e7cc      	b.n	8100ccc <__aeabi_d2f+0x14>
 8100d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d36:	d107      	bne.n	8100d48 <__aeabi_d2f+0x90>
 8100d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d3c:	bf1e      	ittt	ne
 8100d3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d46:	4770      	bxne	lr
 8100d48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d54:	4770      	bx	lr
 8100d56:	bf00      	nop

08100d58 <__aeabi_ldivmod>:
 8100d58:	b97b      	cbnz	r3, 8100d7a <__aeabi_ldivmod+0x22>
 8100d5a:	b972      	cbnz	r2, 8100d7a <__aeabi_ldivmod+0x22>
 8100d5c:	2900      	cmp	r1, #0
 8100d5e:	bfbe      	ittt	lt
 8100d60:	2000      	movlt	r0, #0
 8100d62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100d66:	e006      	blt.n	8100d76 <__aeabi_ldivmod+0x1e>
 8100d68:	bf08      	it	eq
 8100d6a:	2800      	cmpeq	r0, #0
 8100d6c:	bf1c      	itt	ne
 8100d6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100d72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100d76:	f000 b9bd 	b.w	81010f4 <__aeabi_idiv0>
 8100d7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d82:	2900      	cmp	r1, #0
 8100d84:	db09      	blt.n	8100d9a <__aeabi_ldivmod+0x42>
 8100d86:	2b00      	cmp	r3, #0
 8100d88:	db1a      	blt.n	8100dc0 <__aeabi_ldivmod+0x68>
 8100d8a:	f000 f84d 	bl	8100e28 <__udivmoddi4>
 8100d8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d96:	b004      	add	sp, #16
 8100d98:	4770      	bx	lr
 8100d9a:	4240      	negs	r0, r0
 8100d9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100da0:	2b00      	cmp	r3, #0
 8100da2:	db1b      	blt.n	8100ddc <__aeabi_ldivmod+0x84>
 8100da4:	f000 f840 	bl	8100e28 <__udivmoddi4>
 8100da8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100db0:	b004      	add	sp, #16
 8100db2:	4240      	negs	r0, r0
 8100db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100db8:	4252      	negs	r2, r2
 8100dba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100dbe:	4770      	bx	lr
 8100dc0:	4252      	negs	r2, r2
 8100dc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100dc6:	f000 f82f 	bl	8100e28 <__udivmoddi4>
 8100dca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dd2:	b004      	add	sp, #16
 8100dd4:	4240      	negs	r0, r0
 8100dd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dda:	4770      	bx	lr
 8100ddc:	4252      	negs	r2, r2
 8100dde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100de2:	f000 f821 	bl	8100e28 <__udivmoddi4>
 8100de6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dee:	b004      	add	sp, #16
 8100df0:	4252      	negs	r2, r2
 8100df2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100df6:	4770      	bx	lr

08100df8 <__aeabi_uldivmod>:
 8100df8:	b953      	cbnz	r3, 8100e10 <__aeabi_uldivmod+0x18>
 8100dfa:	b94a      	cbnz	r2, 8100e10 <__aeabi_uldivmod+0x18>
 8100dfc:	2900      	cmp	r1, #0
 8100dfe:	bf08      	it	eq
 8100e00:	2800      	cmpeq	r0, #0
 8100e02:	bf1c      	itt	ne
 8100e04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100e08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100e0c:	f000 b972 	b.w	81010f4 <__aeabi_idiv0>
 8100e10:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e18:	f000 f806 	bl	8100e28 <__udivmoddi4>
 8100e1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e24:	b004      	add	sp, #16
 8100e26:	4770      	bx	lr

08100e28 <__udivmoddi4>:
 8100e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e2c:	9e08      	ldr	r6, [sp, #32]
 8100e2e:	4604      	mov	r4, r0
 8100e30:	4688      	mov	r8, r1
 8100e32:	2b00      	cmp	r3, #0
 8100e34:	d14b      	bne.n	8100ece <__udivmoddi4+0xa6>
 8100e36:	428a      	cmp	r2, r1
 8100e38:	4615      	mov	r5, r2
 8100e3a:	d967      	bls.n	8100f0c <__udivmoddi4+0xe4>
 8100e3c:	fab2 f282 	clz	r2, r2
 8100e40:	b14a      	cbz	r2, 8100e56 <__udivmoddi4+0x2e>
 8100e42:	f1c2 0720 	rsb	r7, r2, #32
 8100e46:	fa01 f302 	lsl.w	r3, r1, r2
 8100e4a:	fa20 f707 	lsr.w	r7, r0, r7
 8100e4e:	4095      	lsls	r5, r2
 8100e50:	ea47 0803 	orr.w	r8, r7, r3
 8100e54:	4094      	lsls	r4, r2
 8100e56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e5a:	0c23      	lsrs	r3, r4, #16
 8100e5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100e60:	fa1f fc85 	uxth.w	ip, r5
 8100e64:	fb0e 8817 	mls	r8, lr, r7, r8
 8100e68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100e6c:	fb07 f10c 	mul.w	r1, r7, ip
 8100e70:	4299      	cmp	r1, r3
 8100e72:	d909      	bls.n	8100e88 <__udivmoddi4+0x60>
 8100e74:	18eb      	adds	r3, r5, r3
 8100e76:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8100e7a:	f080 811b 	bcs.w	81010b4 <__udivmoddi4+0x28c>
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	f240 8118 	bls.w	81010b4 <__udivmoddi4+0x28c>
 8100e84:	3f02      	subs	r7, #2
 8100e86:	442b      	add	r3, r5
 8100e88:	1a5b      	subs	r3, r3, r1
 8100e8a:	b2a4      	uxth	r4, r4
 8100e8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8100e90:	fb0e 3310 	mls	r3, lr, r0, r3
 8100e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100e98:	fb00 fc0c 	mul.w	ip, r0, ip
 8100e9c:	45a4      	cmp	ip, r4
 8100e9e:	d909      	bls.n	8100eb4 <__udivmoddi4+0x8c>
 8100ea0:	192c      	adds	r4, r5, r4
 8100ea2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100ea6:	f080 8107 	bcs.w	81010b8 <__udivmoddi4+0x290>
 8100eaa:	45a4      	cmp	ip, r4
 8100eac:	f240 8104 	bls.w	81010b8 <__udivmoddi4+0x290>
 8100eb0:	3802      	subs	r0, #2
 8100eb2:	442c      	add	r4, r5
 8100eb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100eb8:	eba4 040c 	sub.w	r4, r4, ip
 8100ebc:	2700      	movs	r7, #0
 8100ebe:	b11e      	cbz	r6, 8100ec8 <__udivmoddi4+0xa0>
 8100ec0:	40d4      	lsrs	r4, r2
 8100ec2:	2300      	movs	r3, #0
 8100ec4:	e9c6 4300 	strd	r4, r3, [r6]
 8100ec8:	4639      	mov	r1, r7
 8100eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ece:	428b      	cmp	r3, r1
 8100ed0:	d909      	bls.n	8100ee6 <__udivmoddi4+0xbe>
 8100ed2:	2e00      	cmp	r6, #0
 8100ed4:	f000 80eb 	beq.w	81010ae <__udivmoddi4+0x286>
 8100ed8:	2700      	movs	r7, #0
 8100eda:	e9c6 0100 	strd	r0, r1, [r6]
 8100ede:	4638      	mov	r0, r7
 8100ee0:	4639      	mov	r1, r7
 8100ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ee6:	fab3 f783 	clz	r7, r3
 8100eea:	2f00      	cmp	r7, #0
 8100eec:	d147      	bne.n	8100f7e <__udivmoddi4+0x156>
 8100eee:	428b      	cmp	r3, r1
 8100ef0:	d302      	bcc.n	8100ef8 <__udivmoddi4+0xd0>
 8100ef2:	4282      	cmp	r2, r0
 8100ef4:	f200 80fa 	bhi.w	81010ec <__udivmoddi4+0x2c4>
 8100ef8:	1a84      	subs	r4, r0, r2
 8100efa:	eb61 0303 	sbc.w	r3, r1, r3
 8100efe:	2001      	movs	r0, #1
 8100f00:	4698      	mov	r8, r3
 8100f02:	2e00      	cmp	r6, #0
 8100f04:	d0e0      	beq.n	8100ec8 <__udivmoddi4+0xa0>
 8100f06:	e9c6 4800 	strd	r4, r8, [r6]
 8100f0a:	e7dd      	b.n	8100ec8 <__udivmoddi4+0xa0>
 8100f0c:	b902      	cbnz	r2, 8100f10 <__udivmoddi4+0xe8>
 8100f0e:	deff      	udf	#255	; 0xff
 8100f10:	fab2 f282 	clz	r2, r2
 8100f14:	2a00      	cmp	r2, #0
 8100f16:	f040 808f 	bne.w	8101038 <__udivmoddi4+0x210>
 8100f1a:	1b49      	subs	r1, r1, r5
 8100f1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100f20:	fa1f f885 	uxth.w	r8, r5
 8100f24:	2701      	movs	r7, #1
 8100f26:	fbb1 fcfe 	udiv	ip, r1, lr
 8100f2a:	0c23      	lsrs	r3, r4, #16
 8100f2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100f30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f34:	fb08 f10c 	mul.w	r1, r8, ip
 8100f38:	4299      	cmp	r1, r3
 8100f3a:	d907      	bls.n	8100f4c <__udivmoddi4+0x124>
 8100f3c:	18eb      	adds	r3, r5, r3
 8100f3e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8100f42:	d202      	bcs.n	8100f4a <__udivmoddi4+0x122>
 8100f44:	4299      	cmp	r1, r3
 8100f46:	f200 80cd 	bhi.w	81010e4 <__udivmoddi4+0x2bc>
 8100f4a:	4684      	mov	ip, r0
 8100f4c:	1a59      	subs	r1, r3, r1
 8100f4e:	b2a3      	uxth	r3, r4
 8100f50:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f54:	fb0e 1410 	mls	r4, lr, r0, r1
 8100f58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100f5c:	fb08 f800 	mul.w	r8, r8, r0
 8100f60:	45a0      	cmp	r8, r4
 8100f62:	d907      	bls.n	8100f74 <__udivmoddi4+0x14c>
 8100f64:	192c      	adds	r4, r5, r4
 8100f66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100f6a:	d202      	bcs.n	8100f72 <__udivmoddi4+0x14a>
 8100f6c:	45a0      	cmp	r8, r4
 8100f6e:	f200 80b6 	bhi.w	81010de <__udivmoddi4+0x2b6>
 8100f72:	4618      	mov	r0, r3
 8100f74:	eba4 0408 	sub.w	r4, r4, r8
 8100f78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f7c:	e79f      	b.n	8100ebe <__udivmoddi4+0x96>
 8100f7e:	f1c7 0c20 	rsb	ip, r7, #32
 8100f82:	40bb      	lsls	r3, r7
 8100f84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100f88:	ea4e 0e03 	orr.w	lr, lr, r3
 8100f8c:	fa01 f407 	lsl.w	r4, r1, r7
 8100f90:	fa20 f50c 	lsr.w	r5, r0, ip
 8100f94:	fa21 f30c 	lsr.w	r3, r1, ip
 8100f98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100f9c:	4325      	orrs	r5, r4
 8100f9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8100fa2:	0c2c      	lsrs	r4, r5, #16
 8100fa4:	fb08 3319 	mls	r3, r8, r9, r3
 8100fa8:	fa1f fa8e 	uxth.w	sl, lr
 8100fac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100fb0:	fb09 f40a 	mul.w	r4, r9, sl
 8100fb4:	429c      	cmp	r4, r3
 8100fb6:	fa02 f207 	lsl.w	r2, r2, r7
 8100fba:	fa00 f107 	lsl.w	r1, r0, r7
 8100fbe:	d90b      	bls.n	8100fd8 <__udivmoddi4+0x1b0>
 8100fc0:	eb1e 0303 	adds.w	r3, lr, r3
 8100fc4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8100fc8:	f080 8087 	bcs.w	81010da <__udivmoddi4+0x2b2>
 8100fcc:	429c      	cmp	r4, r3
 8100fce:	f240 8084 	bls.w	81010da <__udivmoddi4+0x2b2>
 8100fd2:	f1a9 0902 	sub.w	r9, r9, #2
 8100fd6:	4473      	add	r3, lr
 8100fd8:	1b1b      	subs	r3, r3, r4
 8100fda:	b2ad      	uxth	r5, r5
 8100fdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fe0:	fb08 3310 	mls	r3, r8, r0, r3
 8100fe4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8100fe8:	fb00 fa0a 	mul.w	sl, r0, sl
 8100fec:	45a2      	cmp	sl, r4
 8100fee:	d908      	bls.n	8101002 <__udivmoddi4+0x1da>
 8100ff0:	eb1e 0404 	adds.w	r4, lr, r4
 8100ff4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100ff8:	d26b      	bcs.n	81010d2 <__udivmoddi4+0x2aa>
 8100ffa:	45a2      	cmp	sl, r4
 8100ffc:	d969      	bls.n	81010d2 <__udivmoddi4+0x2aa>
 8100ffe:	3802      	subs	r0, #2
 8101000:	4474      	add	r4, lr
 8101002:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101006:	fba0 8902 	umull	r8, r9, r0, r2
 810100a:	eba4 040a 	sub.w	r4, r4, sl
 810100e:	454c      	cmp	r4, r9
 8101010:	46c2      	mov	sl, r8
 8101012:	464b      	mov	r3, r9
 8101014:	d354      	bcc.n	81010c0 <__udivmoddi4+0x298>
 8101016:	d051      	beq.n	81010bc <__udivmoddi4+0x294>
 8101018:	2e00      	cmp	r6, #0
 810101a:	d069      	beq.n	81010f0 <__udivmoddi4+0x2c8>
 810101c:	ebb1 050a 	subs.w	r5, r1, sl
 8101020:	eb64 0403 	sbc.w	r4, r4, r3
 8101024:	fa04 fc0c 	lsl.w	ip, r4, ip
 8101028:	40fd      	lsrs	r5, r7
 810102a:	40fc      	lsrs	r4, r7
 810102c:	ea4c 0505 	orr.w	r5, ip, r5
 8101030:	e9c6 5400 	strd	r5, r4, [r6]
 8101034:	2700      	movs	r7, #0
 8101036:	e747      	b.n	8100ec8 <__udivmoddi4+0xa0>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f703 	lsr.w	r7, r0, r3
 8101040:	4095      	lsls	r5, r2
 8101042:	fa01 f002 	lsl.w	r0, r1, r2
 8101046:	fa21 f303 	lsr.w	r3, r1, r3
 810104a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810104e:	4338      	orrs	r0, r7
 8101050:	0c01      	lsrs	r1, r0, #16
 8101052:	fbb3 f7fe 	udiv	r7, r3, lr
 8101056:	fa1f f885 	uxth.w	r8, r5
 810105a:	fb0e 3317 	mls	r3, lr, r7, r3
 810105e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101062:	fb07 f308 	mul.w	r3, r7, r8
 8101066:	428b      	cmp	r3, r1
 8101068:	fa04 f402 	lsl.w	r4, r4, r2
 810106c:	d907      	bls.n	810107e <__udivmoddi4+0x256>
 810106e:	1869      	adds	r1, r5, r1
 8101070:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8101074:	d22f      	bcs.n	81010d6 <__udivmoddi4+0x2ae>
 8101076:	428b      	cmp	r3, r1
 8101078:	d92d      	bls.n	81010d6 <__udivmoddi4+0x2ae>
 810107a:	3f02      	subs	r7, #2
 810107c:	4429      	add	r1, r5
 810107e:	1acb      	subs	r3, r1, r3
 8101080:	b281      	uxth	r1, r0
 8101082:	fbb3 f0fe 	udiv	r0, r3, lr
 8101086:	fb0e 3310 	mls	r3, lr, r0, r3
 810108a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810108e:	fb00 f308 	mul.w	r3, r0, r8
 8101092:	428b      	cmp	r3, r1
 8101094:	d907      	bls.n	81010a6 <__udivmoddi4+0x27e>
 8101096:	1869      	adds	r1, r5, r1
 8101098:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 810109c:	d217      	bcs.n	81010ce <__udivmoddi4+0x2a6>
 810109e:	428b      	cmp	r3, r1
 81010a0:	d915      	bls.n	81010ce <__udivmoddi4+0x2a6>
 81010a2:	3802      	subs	r0, #2
 81010a4:	4429      	add	r1, r5
 81010a6:	1ac9      	subs	r1, r1, r3
 81010a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 81010ac:	e73b      	b.n	8100f26 <__udivmoddi4+0xfe>
 81010ae:	4637      	mov	r7, r6
 81010b0:	4630      	mov	r0, r6
 81010b2:	e709      	b.n	8100ec8 <__udivmoddi4+0xa0>
 81010b4:	4607      	mov	r7, r0
 81010b6:	e6e7      	b.n	8100e88 <__udivmoddi4+0x60>
 81010b8:	4618      	mov	r0, r3
 81010ba:	e6fb      	b.n	8100eb4 <__udivmoddi4+0x8c>
 81010bc:	4541      	cmp	r1, r8
 81010be:	d2ab      	bcs.n	8101018 <__udivmoddi4+0x1f0>
 81010c0:	ebb8 0a02 	subs.w	sl, r8, r2
 81010c4:	eb69 020e 	sbc.w	r2, r9, lr
 81010c8:	3801      	subs	r0, #1
 81010ca:	4613      	mov	r3, r2
 81010cc:	e7a4      	b.n	8101018 <__udivmoddi4+0x1f0>
 81010ce:	4660      	mov	r0, ip
 81010d0:	e7e9      	b.n	81010a6 <__udivmoddi4+0x27e>
 81010d2:	4618      	mov	r0, r3
 81010d4:	e795      	b.n	8101002 <__udivmoddi4+0x1da>
 81010d6:	4667      	mov	r7, ip
 81010d8:	e7d1      	b.n	810107e <__udivmoddi4+0x256>
 81010da:	4681      	mov	r9, r0
 81010dc:	e77c      	b.n	8100fd8 <__udivmoddi4+0x1b0>
 81010de:	3802      	subs	r0, #2
 81010e0:	442c      	add	r4, r5
 81010e2:	e747      	b.n	8100f74 <__udivmoddi4+0x14c>
 81010e4:	f1ac 0c02 	sub.w	ip, ip, #2
 81010e8:	442b      	add	r3, r5
 81010ea:	e72f      	b.n	8100f4c <__udivmoddi4+0x124>
 81010ec:	4638      	mov	r0, r7
 81010ee:	e708      	b.n	8100f02 <__udivmoddi4+0xda>
 81010f0:	4637      	mov	r7, r6
 81010f2:	e6e9      	b.n	8100ec8 <__udivmoddi4+0xa0>

081010f4 <__aeabi_idiv0>:
 81010f4:	4770      	bx	lr
 81010f6:	bf00      	nop

081010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f8:	b480      	push	{r7}
 81010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010fc:	4b0b      	ldr	r3, [pc, #44]	; (810112c <SystemInit+0x34>)
 81010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101102:	4a0a      	ldr	r2, [pc, #40]	; (810112c <SystemInit+0x34>)
 8101104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810110c:	4b07      	ldr	r3, [pc, #28]	; (810112c <SystemInit+0x34>)
 810110e:	691b      	ldr	r3, [r3, #16]
 8101110:	4a06      	ldr	r2, [pc, #24]	; (810112c <SystemInit+0x34>)
 8101112:	f043 0310 	orr.w	r3, r3, #16
 8101116:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101118:	4b04      	ldr	r3, [pc, #16]	; (810112c <SystemInit+0x34>)
 810111a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810111e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr
 810112a:	bf00      	nop
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101130:	b580      	push	{r7, lr}
 8101132:	b082      	sub	sp, #8
 8101134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101136:	4b21      	ldr	r3, [pc, #132]	; (81011bc <MX_DMA_Init+0x8c>)
 8101138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810113c:	4a1f      	ldr	r2, [pc, #124]	; (81011bc <MX_DMA_Init+0x8c>)
 810113e:	f043 0301 	orr.w	r3, r3, #1
 8101142:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101146:	4b1d      	ldr	r3, [pc, #116]	; (81011bc <MX_DMA_Init+0x8c>)
 8101148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810114c:	f003 0301 	and.w	r3, r3, #1
 8101150:	607b      	str	r3, [r7, #4]
 8101152:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101154:	4b19      	ldr	r3, [pc, #100]	; (81011bc <MX_DMA_Init+0x8c>)
 8101156:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810115a:	4a18      	ldr	r2, [pc, #96]	; (81011bc <MX_DMA_Init+0x8c>)
 810115c:	f043 0302 	orr.w	r3, r3, #2
 8101160:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101164:	4b15      	ldr	r3, [pc, #84]	; (81011bc <MX_DMA_Init+0x8c>)
 8101166:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810116a:	f003 0302 	and.w	r3, r3, #2
 810116e:	603b      	str	r3, [r7, #0]
 8101170:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101172:	2200      	movs	r2, #0
 8101174:	2105      	movs	r1, #5
 8101176:	200b      	movs	r0, #11
 8101178:	f001 f875 	bl	8102266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810117c:	200b      	movs	r0, #11
 810117e:	f001 f88c 	bl	810229a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8101182:	2200      	movs	r2, #0
 8101184:	2105      	movs	r1, #5
 8101186:	200c      	movs	r0, #12
 8101188:	f001 f86d 	bl	8102266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 810118c:	200c      	movs	r0, #12
 810118e:	f001 f884 	bl	810229a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8101192:	2200      	movs	r2, #0
 8101194:	2105      	movs	r1, #5
 8101196:	203a      	movs	r0, #58	; 0x3a
 8101198:	f001 f865 	bl	8102266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 810119c:	203a      	movs	r0, #58	; 0x3a
 810119e:	f001 f87c 	bl	810229a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 81011a2:	2200      	movs	r2, #0
 81011a4:	2105      	movs	r1, #5
 81011a6:	203b      	movs	r0, #59	; 0x3b
 81011a8:	f001 f85d 	bl	8102266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 81011ac:	203b      	movs	r0, #59	; 0x3b
 81011ae:	f001 f874 	bl	810229a <HAL_NVIC_EnableIRQ>

}
 81011b2:	bf00      	nop
 81011b4:	3708      	adds	r7, #8
 81011b6:	46bd      	mov	sp, r7
 81011b8:	bd80      	pop	{r7, pc}
 81011ba:	bf00      	nop
 81011bc:	58024400 	.word	0x58024400

081011c0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 81011c0:	b580      	push	{r7, lr}
 81011c2:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 81011c4:	4b2e      	ldr	r3, [pc, #184]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011c6:	4a2f      	ldr	r2, [pc, #188]	; (8101284 <MX_FDCAN1_Init+0xc4>)
 81011c8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81011ca:	4b2d      	ldr	r3, [pc, #180]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011cc:	2200      	movs	r2, #0
 81011ce:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 81011d0:	4b2b      	ldr	r3, [pc, #172]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011d2:	2200      	movs	r2, #0
 81011d4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 81011d6:	4b2a      	ldr	r3, [pc, #168]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011d8:	2200      	movs	r2, #0
 81011da:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 81011dc:	4b28      	ldr	r3, [pc, #160]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011de:	2200      	movs	r2, #0
 81011e0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 81011e2:	4b27      	ldr	r3, [pc, #156]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011e4:	2200      	movs	r2, #0
 81011e6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 81011e8:	4b25      	ldr	r3, [pc, #148]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011ea:	2201      	movs	r2, #1
 81011ec:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 81011ee:	4b24      	ldr	r3, [pc, #144]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011f0:	2201      	movs	r2, #1
 81011f2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 81011f4:	4b22      	ldr	r3, [pc, #136]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011f6:	2202      	movs	r2, #2
 81011f8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 81011fa:	4b21      	ldr	r3, [pc, #132]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 81011fc:	2202      	movs	r2, #2
 81011fe:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8101200:	4b1f      	ldr	r3, [pc, #124]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101202:	2201      	movs	r2, #1
 8101204:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8101206:	4b1e      	ldr	r3, [pc, #120]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101208:	2201      	movs	r2, #1
 810120a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 810120c:	4b1c      	ldr	r3, [pc, #112]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 810120e:	2201      	movs	r2, #1
 8101210:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8101212:	4b1b      	ldr	r3, [pc, #108]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101214:	2201      	movs	r2, #1
 8101216:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8101218:	4b19      	ldr	r3, [pc, #100]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 810121a:	2200      	movs	r2, #0
 810121c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 810121e:	4b18      	ldr	r3, [pc, #96]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101220:	2200      	movs	r2, #0
 8101222:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8101224:	4b16      	ldr	r3, [pc, #88]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101226:	2200      	movs	r2, #0
 8101228:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 810122a:	4b15      	ldr	r3, [pc, #84]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 810122c:	2200      	movs	r2, #0
 810122e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8101230:	4b13      	ldr	r3, [pc, #76]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101232:	2204      	movs	r2, #4
 8101234:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8101236:	4b12      	ldr	r3, [pc, #72]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101238:	2200      	movs	r2, #0
 810123a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 810123c:	4b10      	ldr	r3, [pc, #64]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 810123e:	2204      	movs	r2, #4
 8101240:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8101242:	4b0f      	ldr	r3, [pc, #60]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101244:	2200      	movs	r2, #0
 8101246:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8101248:	4b0d      	ldr	r3, [pc, #52]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 810124a:	2204      	movs	r2, #4
 810124c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 810124e:	4b0c      	ldr	r3, [pc, #48]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101250:	2200      	movs	r2, #0
 8101252:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8101254:	4b0a      	ldr	r3, [pc, #40]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101256:	2200      	movs	r2, #0
 8101258:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 810125a:	4b09      	ldr	r3, [pc, #36]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 810125c:	2200      	movs	r2, #0
 810125e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8101260:	4b07      	ldr	r3, [pc, #28]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101262:	2200      	movs	r2, #0
 8101264:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8101266:	4b06      	ldr	r3, [pc, #24]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 8101268:	2204      	movs	r2, #4
 810126a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 810126c:	4804      	ldr	r0, [pc, #16]	; (8101280 <MX_FDCAN1_Init+0xc0>)
 810126e:	f003 fb55 	bl	810491c <HAL_FDCAN_Init>
 8101272:	4603      	mov	r3, r0
 8101274:	2b00      	cmp	r3, #0
 8101276:	d001      	beq.n	810127c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8101278:	f000 fa2c 	bl	81016d4 <Error_Handler>
  }

}
 810127c:	bf00      	nop
 810127e:	bd80      	pop	{r7, pc}
 8101280:	10005808 	.word	0x10005808
 8101284:	4000a000 	.word	0x4000a000

08101288 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8101288:	b580      	push	{r7, lr}
 810128a:	b08a      	sub	sp, #40	; 0x28
 810128c:	af00      	add	r7, sp, #0
 810128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101290:	f107 0314 	add.w	r3, r7, #20
 8101294:	2200      	movs	r2, #0
 8101296:	601a      	str	r2, [r3, #0]
 8101298:	605a      	str	r2, [r3, #4]
 810129a:	609a      	str	r2, [r3, #8]
 810129c:	60da      	str	r2, [r3, #12]
 810129e:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 81012a0:	687b      	ldr	r3, [r7, #4]
 81012a2:	681b      	ldr	r3, [r3, #0]
 81012a4:	4a1a      	ldr	r2, [pc, #104]	; (8101310 <HAL_FDCAN_MspInit+0x88>)
 81012a6:	4293      	cmp	r3, r2
 81012a8:	d12e      	bne.n	8101308 <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 81012aa:	4b1a      	ldr	r3, [pc, #104]	; (8101314 <HAL_FDCAN_MspInit+0x8c>)
 81012ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81012b0:	4a18      	ldr	r2, [pc, #96]	; (8101314 <HAL_FDCAN_MspInit+0x8c>)
 81012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81012b6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 81012ba:	4b16      	ldr	r3, [pc, #88]	; (8101314 <HAL_FDCAN_MspInit+0x8c>)
 81012bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81012c4:	613b      	str	r3, [r7, #16]
 81012c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81012c8:	4b12      	ldr	r3, [pc, #72]	; (8101314 <HAL_FDCAN_MspInit+0x8c>)
 81012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ce:	4a11      	ldr	r2, [pc, #68]	; (8101314 <HAL_FDCAN_MspInit+0x8c>)
 81012d0:	f043 0301 	orr.w	r3, r3, #1
 81012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012d8:	4b0e      	ldr	r3, [pc, #56]	; (8101314 <HAL_FDCAN_MspInit+0x8c>)
 81012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012de:	f003 0301 	and.w	r3, r3, #1
 81012e2:	60fb      	str	r3, [r7, #12]
 81012e4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 81012e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012ec:	2302      	movs	r3, #2
 81012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012f0:	2300      	movs	r3, #0
 81012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012f4:	2303      	movs	r3, #3
 81012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 81012f8:	2309      	movs	r3, #9
 81012fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81012fc:	f107 0314 	add.w	r3, r7, #20
 8101300:	4619      	mov	r1, r3
 8101302:	4805      	ldr	r0, [pc, #20]	; (8101318 <HAL_FDCAN_MspInit+0x90>)
 8101304:	f003 fe7c 	bl	8105000 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8101308:	bf00      	nop
 810130a:	3728      	adds	r7, #40	; 0x28
 810130c:	46bd      	mov	sp, r7
 810130e:	bd80      	pop	{r7, pc}
 8101310:	4000a000 	.word	0x4000a000
 8101314:	58024400 	.word	0x58024400
 8101318:	58020000 	.word	0x58020000

0810131c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 810131c:	b580      	push	{r7, lr}
 810131e:	af00      	add	r7, sp, #0

  /* Create the thread(s) */
  /* creation of watchdog */

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
 8101320:	f00c ffa0 	bl	810e264 <initCortexM4>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8101324:	bf00      	nop
 8101326:	bd80      	pop	{r7, pc}

08101328 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101328:	b480      	push	{r7}
 810132a:	b085      	sub	sp, #20
 810132c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810132e:	4b21      	ldr	r3, [pc, #132]	; (81013b4 <MX_GPIO_Init+0x8c>)
 8101330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101334:	4a1f      	ldr	r2, [pc, #124]	; (81013b4 <MX_GPIO_Init+0x8c>)
 8101336:	f043 0320 	orr.w	r3, r3, #32
 810133a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810133e:	4b1d      	ldr	r3, [pc, #116]	; (81013b4 <MX_GPIO_Init+0x8c>)
 8101340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101344:	f003 0320 	and.w	r3, r3, #32
 8101348:	60fb      	str	r3, [r7, #12]
 810134a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810134c:	4b19      	ldr	r3, [pc, #100]	; (81013b4 <MX_GPIO_Init+0x8c>)
 810134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101352:	4a18      	ldr	r2, [pc, #96]	; (81013b4 <MX_GPIO_Init+0x8c>)
 8101354:	f043 0301 	orr.w	r3, r3, #1
 8101358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810135c:	4b15      	ldr	r3, [pc, #84]	; (81013b4 <MX_GPIO_Init+0x8c>)
 810135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101362:	f003 0301 	and.w	r3, r3, #1
 8101366:	60bb      	str	r3, [r7, #8]
 8101368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810136a:	4b12      	ldr	r3, [pc, #72]	; (81013b4 <MX_GPIO_Init+0x8c>)
 810136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101370:	4a10      	ldr	r2, [pc, #64]	; (81013b4 <MX_GPIO_Init+0x8c>)
 8101372:	f043 0308 	orr.w	r3, r3, #8
 8101376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810137a:	4b0e      	ldr	r3, [pc, #56]	; (81013b4 <MX_GPIO_Init+0x8c>)
 810137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101380:	f003 0308 	and.w	r3, r3, #8
 8101384:	607b      	str	r3, [r7, #4]
 8101386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101388:	4b0a      	ldr	r3, [pc, #40]	; (81013b4 <MX_GPIO_Init+0x8c>)
 810138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810138e:	4a09      	ldr	r2, [pc, #36]	; (81013b4 <MX_GPIO_Init+0x8c>)
 8101390:	f043 0302 	orr.w	r3, r3, #2
 8101394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101398:	4b06      	ldr	r3, [pc, #24]	; (81013b4 <MX_GPIO_Init+0x8c>)
 810139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810139e:	f003 0302 	and.w	r3, r3, #2
 81013a2:	603b      	str	r3, [r7, #0]
 81013a4:	683b      	ldr	r3, [r7, #0]

}
 81013a6:	bf00      	nop
 81013a8:	3714      	adds	r7, #20
 81013aa:	46bd      	mov	sp, r7
 81013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013b0:	4770      	bx	lr
 81013b2:	bf00      	nop
 81013b4:	58024400 	.word	0x58024400

081013b8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 81013b8:	b580      	push	{r7, lr}
 81013ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 81013bc:	4b1c      	ldr	r3, [pc, #112]	; (8101430 <MX_I2C1_Init+0x78>)
 81013be:	4a1d      	ldr	r2, [pc, #116]	; (8101434 <MX_I2C1_Init+0x7c>)
 81013c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 81013c2:	4b1b      	ldr	r3, [pc, #108]	; (8101430 <MX_I2C1_Init+0x78>)
 81013c4:	4a1c      	ldr	r2, [pc, #112]	; (8101438 <MX_I2C1_Init+0x80>)
 81013c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81013c8:	4b19      	ldr	r3, [pc, #100]	; (8101430 <MX_I2C1_Init+0x78>)
 81013ca:	2200      	movs	r2, #0
 81013cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81013ce:	4b18      	ldr	r3, [pc, #96]	; (8101430 <MX_I2C1_Init+0x78>)
 81013d0:	2201      	movs	r2, #1
 81013d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013d4:	4b16      	ldr	r3, [pc, #88]	; (8101430 <MX_I2C1_Init+0x78>)
 81013d6:	2200      	movs	r2, #0
 81013d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81013da:	4b15      	ldr	r3, [pc, #84]	; (8101430 <MX_I2C1_Init+0x78>)
 81013dc:	2200      	movs	r2, #0
 81013de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013e0:	4b13      	ldr	r3, [pc, #76]	; (8101430 <MX_I2C1_Init+0x78>)
 81013e2:	2200      	movs	r2, #0
 81013e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013e6:	4b12      	ldr	r3, [pc, #72]	; (8101430 <MX_I2C1_Init+0x78>)
 81013e8:	2200      	movs	r2, #0
 81013ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013ec:	4b10      	ldr	r3, [pc, #64]	; (8101430 <MX_I2C1_Init+0x78>)
 81013ee:	2200      	movs	r2, #0
 81013f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81013f2:	480f      	ldr	r0, [pc, #60]	; (8101430 <MX_I2C1_Init+0x78>)
 81013f4:	f004 f814 	bl	8105420 <HAL_I2C_Init>
 81013f8:	4603      	mov	r3, r0
 81013fa:	2b00      	cmp	r3, #0
 81013fc:	d001      	beq.n	8101402 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81013fe:	f000 f969 	bl	81016d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101402:	2100      	movs	r1, #0
 8101404:	480a      	ldr	r0, [pc, #40]	; (8101430 <MX_I2C1_Init+0x78>)
 8101406:	f004 ff55 	bl	81062b4 <HAL_I2CEx_ConfigAnalogFilter>
 810140a:	4603      	mov	r3, r0
 810140c:	2b00      	cmp	r3, #0
 810140e:	d001      	beq.n	8101414 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101410:	f000 f960 	bl	81016d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101414:	2100      	movs	r1, #0
 8101416:	4806      	ldr	r0, [pc, #24]	; (8101430 <MX_I2C1_Init+0x78>)
 8101418:	f004 ff97 	bl	810634a <HAL_I2CEx_ConfigDigitalFilter>
 810141c:	4603      	mov	r3, r0
 810141e:	2b00      	cmp	r3, #0
 8101420:	d001      	beq.n	8101426 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101422:	f000 f957 	bl	81016d4 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8101426:	2001      	movs	r0, #1
 8101428:	f004 ffdc 	bl	81063e4 <HAL_I2CEx_EnableFastModePlus>

}
 810142c:	bf00      	nop
 810142e:	bd80      	pop	{r7, pc}
 8101430:	100058f4 	.word	0x100058f4
 8101434:	40005400 	.word	0x40005400
 8101438:	00401242 	.word	0x00401242

0810143c <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 810143c:	b580      	push	{r7, lr}
 810143e:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 8101440:	4b1b      	ldr	r3, [pc, #108]	; (81014b0 <MX_I2C4_Init+0x74>)
 8101442:	4a1c      	ldr	r2, [pc, #112]	; (81014b4 <MX_I2C4_Init+0x78>)
 8101444:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8101446:	4b1a      	ldr	r3, [pc, #104]	; (81014b0 <MX_I2C4_Init+0x74>)
 8101448:	4a1b      	ldr	r2, [pc, #108]	; (81014b8 <MX_I2C4_Init+0x7c>)
 810144a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 810144c:	4b18      	ldr	r3, [pc, #96]	; (81014b0 <MX_I2C4_Init+0x74>)
 810144e:	2200      	movs	r2, #0
 8101450:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101452:	4b17      	ldr	r3, [pc, #92]	; (81014b0 <MX_I2C4_Init+0x74>)
 8101454:	2201      	movs	r2, #1
 8101456:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101458:	4b15      	ldr	r3, [pc, #84]	; (81014b0 <MX_I2C4_Init+0x74>)
 810145a:	2200      	movs	r2, #0
 810145c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 810145e:	4b14      	ldr	r3, [pc, #80]	; (81014b0 <MX_I2C4_Init+0x74>)
 8101460:	2200      	movs	r2, #0
 8101462:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101464:	4b12      	ldr	r3, [pc, #72]	; (81014b0 <MX_I2C4_Init+0x74>)
 8101466:	2200      	movs	r2, #0
 8101468:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810146a:	4b11      	ldr	r3, [pc, #68]	; (81014b0 <MX_I2C4_Init+0x74>)
 810146c:	2200      	movs	r2, #0
 810146e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101470:	4b0f      	ldr	r3, [pc, #60]	; (81014b0 <MX_I2C4_Init+0x74>)
 8101472:	2200      	movs	r2, #0
 8101474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8101476:	480e      	ldr	r0, [pc, #56]	; (81014b0 <MX_I2C4_Init+0x74>)
 8101478:	f003 ffd2 	bl	8105420 <HAL_I2C_Init>
 810147c:	4603      	mov	r3, r0
 810147e:	2b00      	cmp	r3, #0
 8101480:	d001      	beq.n	8101486 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8101482:	f000 f927 	bl	81016d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101486:	2100      	movs	r1, #0
 8101488:	4809      	ldr	r0, [pc, #36]	; (81014b0 <MX_I2C4_Init+0x74>)
 810148a:	f004 ff13 	bl	81062b4 <HAL_I2CEx_ConfigAnalogFilter>
 810148e:	4603      	mov	r3, r0
 8101490:	2b00      	cmp	r3, #0
 8101492:	d001      	beq.n	8101498 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8101494:	f000 f91e 	bl	81016d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8101498:	2100      	movs	r1, #0
 810149a:	4805      	ldr	r0, [pc, #20]	; (81014b0 <MX_I2C4_Init+0x74>)
 810149c:	f004 ff55 	bl	810634a <HAL_I2CEx_ConfigDigitalFilter>
 81014a0:	4603      	mov	r3, r0
 81014a2:	2b00      	cmp	r3, #0
 81014a4:	d001      	beq.n	81014aa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 81014a6:	f000 f915 	bl	81016d4 <Error_Handler>
  }

}
 81014aa:	bf00      	nop
 81014ac:	bd80      	pop	{r7, pc}
 81014ae:	bf00      	nop
 81014b0:	100058a8 	.word	0x100058a8
 81014b4:	58001c00 	.word	0x58001c00
 81014b8:	10c0ecff 	.word	0x10c0ecff

081014bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81014bc:	b580      	push	{r7, lr}
 81014be:	b08c      	sub	sp, #48	; 0x30
 81014c0:	af00      	add	r7, sp, #0
 81014c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81014c4:	f107 031c 	add.w	r3, r7, #28
 81014c8:	2200      	movs	r2, #0
 81014ca:	601a      	str	r2, [r3, #0]
 81014cc:	605a      	str	r2, [r3, #4]
 81014ce:	609a      	str	r2, [r3, #8]
 81014d0:	60da      	str	r2, [r3, #12]
 81014d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81014d4:	687b      	ldr	r3, [r7, #4]
 81014d6:	681b      	ldr	r3, [r3, #0]
 81014d8:	4a35      	ldr	r2, [pc, #212]	; (81015b0 <HAL_I2C_MspInit+0xf4>)
 81014da:	4293      	cmp	r3, r2
 81014dc:	d12f      	bne.n	810153e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014de:	4b35      	ldr	r3, [pc, #212]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 81014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014e4:	4a33      	ldr	r2, [pc, #204]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 81014e6:	f043 0302 	orr.w	r3, r3, #2
 81014ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014ee:	4b31      	ldr	r3, [pc, #196]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 81014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014f4:	f003 0302 	and.w	r3, r3, #2
 81014f8:	61bb      	str	r3, [r7, #24]
 81014fa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 81014fc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8101500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101502:	2312      	movs	r3, #18
 8101504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101506:	2300      	movs	r3, #0
 8101508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810150a:	2300      	movs	r3, #0
 810150c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810150e:	2304      	movs	r3, #4
 8101510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101512:	f107 031c 	add.w	r3, r7, #28
 8101516:	4619      	mov	r1, r3
 8101518:	4827      	ldr	r0, [pc, #156]	; (81015b8 <HAL_I2C_MspInit+0xfc>)
 810151a:	f003 fd71 	bl	8105000 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810151e:	4b25      	ldr	r3, [pc, #148]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 8101520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101524:	4a23      	ldr	r2, [pc, #140]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 8101526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810152a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810152e:	4b21      	ldr	r3, [pc, #132]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 8101530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101538:	617b      	str	r3, [r7, #20]
 810153a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 810153c:	e033      	b.n	81015a6 <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C4)
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	681b      	ldr	r3, [r3, #0]
 8101542:	4a1e      	ldr	r2, [pc, #120]	; (81015bc <HAL_I2C_MspInit+0x100>)
 8101544:	4293      	cmp	r3, r2
 8101546:	d12e      	bne.n	81015a6 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101548:	4b1a      	ldr	r3, [pc, #104]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 810154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810154e:	4a19      	ldr	r2, [pc, #100]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 8101550:	f043 0320 	orr.w	r3, r3, #32
 8101554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101558:	4b16      	ldr	r3, [pc, #88]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 810155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810155e:	f003 0320 	and.w	r3, r3, #32
 8101562:	613b      	str	r3, [r7, #16]
 8101564:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8101566:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 810156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810156c:	2312      	movs	r3, #18
 810156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101570:	2300      	movs	r3, #0
 8101572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101574:	2300      	movs	r3, #0
 8101576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8101578:	2304      	movs	r3, #4
 810157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810157c:	f107 031c 	add.w	r3, r7, #28
 8101580:	4619      	mov	r1, r3
 8101582:	480f      	ldr	r0, [pc, #60]	; (81015c0 <HAL_I2C_MspInit+0x104>)
 8101584:	f003 fd3c 	bl	8105000 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8101588:	4b0a      	ldr	r3, [pc, #40]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 810158a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810158e:	4a09      	ldr	r2, [pc, #36]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 8101590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101594:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101598:	4b06      	ldr	r3, [pc, #24]	; (81015b4 <HAL_I2C_MspInit+0xf8>)
 810159a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810159e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81015a2:	60fb      	str	r3, [r7, #12]
 81015a4:	68fb      	ldr	r3, [r7, #12]
}
 81015a6:	bf00      	nop
 81015a8:	3730      	adds	r7, #48	; 0x30
 81015aa:	46bd      	mov	sp, r7
 81015ac:	bd80      	pop	{r7, pc}
 81015ae:	bf00      	nop
 81015b0:	40005400 	.word	0x40005400
 81015b4:	58024400 	.word	0x58024400
 81015b8:	58020400 	.word	0x58020400
 81015bc:	58001c00 	.word	0x58001c00
 81015c0:	58021400 	.word	0x58021400

081015c4 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 81015c4:	b580      	push	{r7, lr}
 81015c6:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 81015c8:	4b0b      	ldr	r3, [pc, #44]	; (81015f8 <MX_IWDG2_Init+0x34>)
 81015ca:	4a0c      	ldr	r2, [pc, #48]	; (81015fc <MX_IWDG2_Init+0x38>)
 81015cc:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 81015ce:	4b0a      	ldr	r3, [pc, #40]	; (81015f8 <MX_IWDG2_Init+0x34>)
 81015d0:	2200      	movs	r2, #0
 81015d2:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 81015d4:	4b08      	ldr	r3, [pc, #32]	; (81015f8 <MX_IWDG2_Init+0x34>)
 81015d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 81015da:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 81015dc:	4b06      	ldr	r3, [pc, #24]	; (81015f8 <MX_IWDG2_Init+0x34>)
 81015de:	f640 72ff 	movw	r2, #4095	; 0xfff
 81015e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 81015e4:	4804      	ldr	r0, [pc, #16]	; (81015f8 <MX_IWDG2_Init+0x34>)
 81015e6:	f004 ff21 	bl	810642c <HAL_IWDG_Init>
 81015ea:	4603      	mov	r3, r0
 81015ec:	2b00      	cmp	r3, #0
 81015ee:	d001      	beq.n	81015f4 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 81015f0:	f000 f870 	bl	81016d4 <Error_Handler>
  }

}
 81015f4:	bf00      	nop
 81015f6:	bd80      	pop	{r7, pc}
 81015f8:	10005940 	.word	0x10005940
 81015fc:	58004c00 	.word	0x58004c00

08101600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101600:	b580      	push	{r7, lr}
 8101602:	b082      	sub	sp, #8
 8101604:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101606:	4b27      	ldr	r3, [pc, #156]	; (81016a4 <main+0xa4>)
 8101608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810160c:	4a25      	ldr	r2, [pc, #148]	; (81016a4 <main+0xa4>)
 810160e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101616:	4b23      	ldr	r3, [pc, #140]	; (81016a4 <main+0xa4>)
 8101618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101620:	607b      	str	r3, [r7, #4]
 8101622:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101624:	2001      	movs	r0, #1
 8101626:	f003 fee9 	bl	81053fc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810162a:	f004 ffcb 	bl	81065c4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810162e:	2201      	movs	r2, #1
 8101630:	2102      	movs	r1, #2
 8101632:	2000      	movs	r0, #0
 8101634:	f004 ff50 	bl	81064d8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101638:	4b1b      	ldr	r3, [pc, #108]	; (81016a8 <main+0xa8>)
 810163a:	681b      	ldr	r3, [r3, #0]
 810163c:	091b      	lsrs	r3, r3, #4
 810163e:	f003 030f 	and.w	r3, r3, #15
 8101642:	2b07      	cmp	r3, #7
 8101644:	d108      	bne.n	8101658 <main+0x58>
 8101646:	4b19      	ldr	r3, [pc, #100]	; (81016ac <main+0xac>)
 8101648:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810164c:	4a17      	ldr	r2, [pc, #92]	; (81016ac <main+0xac>)
 810164e:	f043 0301 	orr.w	r3, r3, #1
 8101652:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101656:	e007      	b.n	8101668 <main+0x68>
 8101658:	4b14      	ldr	r3, [pc, #80]	; (81016ac <main+0xac>)
 810165a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810165e:	4a13      	ldr	r2, [pc, #76]	; (81016ac <main+0xac>)
 8101660:	f043 0301 	orr.w	r3, r3, #1
 8101664:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101668:	f000 fcb2 	bl	8101fd0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810166c:	f7ff fe5c 	bl	8101328 <MX_GPIO_Init>
  MX_DMA_Init();
 8101670:	f7ff fd5e 	bl	8101130 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8101674:	f7ff fda4 	bl	81011c0 <MX_FDCAN1_Init>
  MX_IWDG2_Init();
 8101678:	f7ff ffa4 	bl	81015c4 <MX_IWDG2_Init>
  MX_SPI5_Init();
 810167c:	f000 f884 	bl	8101788 <MX_SPI5_Init>
  MX_FATFS_Init();
 8101680:	f007 fd62 	bl	8109148 <MX_FATFS_Init>
  MX_I2C1_Init();
 8101684:	f7ff fe98 	bl	81013b8 <MX_I2C1_Init>
  MX_I2C4_Init();
 8101688:	f7ff fed8 	bl	810143c <MX_I2C4_Init>
  MX_SPI1_Init();
 810168c:	f000 f826 	bl	81016dc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8101690:	f000 fb78 	bl	8101d84 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8101694:	f007 fe24 	bl	81092e0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8101698:	f7ff fe40 	bl	810131c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 810169c:	f007 fe54 	bl	8109348 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81016a0:	e7fe      	b.n	81016a0 <main+0xa0>
 81016a2:	bf00      	nop
 81016a4:	58024400 	.word	0x58024400
 81016a8:	e000ed00 	.word	0xe000ed00
 81016ac:	58026400 	.word	0x58026400

081016b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81016b0:	b580      	push	{r7, lr}
 81016b2:	b082      	sub	sp, #8
 81016b4:	af00      	add	r7, sp, #0
 81016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 81016b8:	687b      	ldr	r3, [r7, #4]
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	4a04      	ldr	r2, [pc, #16]	; (81016d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81016be:	4293      	cmp	r3, r2
 81016c0:	d101      	bne.n	81016c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81016c2:	f000 fce3 	bl	810208c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81016c6:	bf00      	nop
 81016c8:	3708      	adds	r7, #8
 81016ca:	46bd      	mov	sp, r7
 81016cc:	bd80      	pop	{r7, pc}
 81016ce:	bf00      	nop
 81016d0:	40010400 	.word	0x40010400

081016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81016d4:	b480      	push	{r7}
 81016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81016d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81016da:	e7fe      	b.n	81016da <Error_Handler+0x6>

081016dc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 81016dc:	b580      	push	{r7, lr}
 81016de:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 81016e0:	4b27      	ldr	r3, [pc, #156]	; (8101780 <MX_SPI1_Init+0xa4>)
 81016e2:	4a28      	ldr	r2, [pc, #160]	; (8101784 <MX_SPI1_Init+0xa8>)
 81016e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81016e6:	4b26      	ldr	r3, [pc, #152]	; (8101780 <MX_SPI1_Init+0xa4>)
 81016e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81016ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81016ee:	4b24      	ldr	r3, [pc, #144]	; (8101780 <MX_SPI1_Init+0xa4>)
 81016f0:	2200      	movs	r2, #0
 81016f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 81016f4:	4b22      	ldr	r3, [pc, #136]	; (8101780 <MX_SPI1_Init+0xa4>)
 81016f6:	2203      	movs	r2, #3
 81016f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81016fa:	4b21      	ldr	r3, [pc, #132]	; (8101780 <MX_SPI1_Init+0xa4>)
 81016fc:	2200      	movs	r2, #0
 81016fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101700:	4b1f      	ldr	r3, [pc, #124]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101702:	2200      	movs	r2, #0
 8101704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101706:	4b1e      	ldr	r3, [pc, #120]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101708:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810170c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 810170e:	4b1c      	ldr	r3, [pc, #112]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101714:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101716:	4b1a      	ldr	r3, [pc, #104]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101718:	2200      	movs	r2, #0
 810171a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810171c:	4b18      	ldr	r3, [pc, #96]	; (8101780 <MX_SPI1_Init+0xa4>)
 810171e:	2200      	movs	r2, #0
 8101720:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101722:	4b17      	ldr	r3, [pc, #92]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101724:	2200      	movs	r2, #0
 8101726:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101728:	4b15      	ldr	r3, [pc, #84]	; (8101780 <MX_SPI1_Init+0xa4>)
 810172a:	2200      	movs	r2, #0
 810172c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810172e:	4b14      	ldr	r3, [pc, #80]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101734:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101736:	4b12      	ldr	r3, [pc, #72]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101738:	2200      	movs	r2, #0
 810173a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810173c:	4b10      	ldr	r3, [pc, #64]	; (8101780 <MX_SPI1_Init+0xa4>)
 810173e:	2200      	movs	r2, #0
 8101740:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101742:	4b0f      	ldr	r3, [pc, #60]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101744:	2200      	movs	r2, #0
 8101746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101748:	4b0d      	ldr	r3, [pc, #52]	; (8101780 <MX_SPI1_Init+0xa4>)
 810174a:	2200      	movs	r2, #0
 810174c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810174e:	4b0c      	ldr	r3, [pc, #48]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101750:	2200      	movs	r2, #0
 8101752:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101754:	4b0a      	ldr	r3, [pc, #40]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101756:	2200      	movs	r2, #0
 8101758:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810175a:	4b09      	ldr	r3, [pc, #36]	; (8101780 <MX_SPI1_Init+0xa4>)
 810175c:	2200      	movs	r2, #0
 810175e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101760:	4b07      	ldr	r3, [pc, #28]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101762:	2200      	movs	r2, #0
 8101764:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101766:	4b06      	ldr	r3, [pc, #24]	; (8101780 <MX_SPI1_Init+0xa4>)
 8101768:	2200      	movs	r2, #0
 810176a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 810176c:	4804      	ldr	r0, [pc, #16]	; (8101780 <MX_SPI1_Init+0xa4>)
 810176e:	f005 fbf7 	bl	8106f60 <HAL_SPI_Init>
 8101772:	4603      	mov	r3, r0
 8101774:	2b00      	cmp	r3, #0
 8101776:	d001      	beq.n	810177c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8101778:	f7ff ffac 	bl	81016d4 <Error_Handler>
  }

}
 810177c:	bf00      	nop
 810177e:	bd80      	pop	{r7, pc}
 8101780:	100059d8 	.word	0x100059d8
 8101784:	40013000 	.word	0x40013000

08101788 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8101788:	b580      	push	{r7, lr}
 810178a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 810178c:	4b27      	ldr	r3, [pc, #156]	; (810182c <MX_SPI5_Init+0xa4>)
 810178e:	4a28      	ldr	r2, [pc, #160]	; (8101830 <MX_SPI5_Init+0xa8>)
 8101790:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8101792:	4b26      	ldr	r3, [pc, #152]	; (810182c <MX_SPI5_Init+0xa4>)
 8101794:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101798:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 810179a:	4b24      	ldr	r3, [pc, #144]	; (810182c <MX_SPI5_Init+0xa4>)
 810179c:	2200      	movs	r2, #0
 810179e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 81017a0:	4b22      	ldr	r3, [pc, #136]	; (810182c <MX_SPI5_Init+0xa4>)
 81017a2:	2203      	movs	r2, #3
 81017a4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 81017a6:	4b21      	ldr	r3, [pc, #132]	; (810182c <MX_SPI5_Init+0xa4>)
 81017a8:	2200      	movs	r2, #0
 81017aa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 81017ac:	4b1f      	ldr	r3, [pc, #124]	; (810182c <MX_SPI5_Init+0xa4>)
 81017ae:	2200      	movs	r2, #0
 81017b0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 81017b2:	4b1e      	ldr	r3, [pc, #120]	; (810182c <MX_SPI5_Init+0xa4>)
 81017b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81017b8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 81017ba:	4b1c      	ldr	r3, [pc, #112]	; (810182c <MX_SPI5_Init+0xa4>)
 81017bc:	2200      	movs	r2, #0
 81017be:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81017c0:	4b1a      	ldr	r3, [pc, #104]	; (810182c <MX_SPI5_Init+0xa4>)
 81017c2:	2200      	movs	r2, #0
 81017c4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 81017c6:	4b19      	ldr	r3, [pc, #100]	; (810182c <MX_SPI5_Init+0xa4>)
 81017c8:	2200      	movs	r2, #0
 81017ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81017cc:	4b17      	ldr	r3, [pc, #92]	; (810182c <MX_SPI5_Init+0xa4>)
 81017ce:	2200      	movs	r2, #0
 81017d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 81017d2:	4b16      	ldr	r3, [pc, #88]	; (810182c <MX_SPI5_Init+0xa4>)
 81017d4:	2200      	movs	r2, #0
 81017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81017d8:	4b14      	ldr	r3, [pc, #80]	; (810182c <MX_SPI5_Init+0xa4>)
 81017da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81017de:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81017e0:	4b12      	ldr	r3, [pc, #72]	; (810182c <MX_SPI5_Init+0xa4>)
 81017e2:	2200      	movs	r2, #0
 81017e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81017e6:	4b11      	ldr	r3, [pc, #68]	; (810182c <MX_SPI5_Init+0xa4>)
 81017e8:	2200      	movs	r2, #0
 81017ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017ec:	4b0f      	ldr	r3, [pc, #60]	; (810182c <MX_SPI5_Init+0xa4>)
 81017ee:	2200      	movs	r2, #0
 81017f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017f2:	4b0e      	ldr	r3, [pc, #56]	; (810182c <MX_SPI5_Init+0xa4>)
 81017f4:	2200      	movs	r2, #0
 81017f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81017f8:	4b0c      	ldr	r3, [pc, #48]	; (810182c <MX_SPI5_Init+0xa4>)
 81017fa:	2200      	movs	r2, #0
 81017fc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81017fe:	4b0b      	ldr	r3, [pc, #44]	; (810182c <MX_SPI5_Init+0xa4>)
 8101800:	2200      	movs	r2, #0
 8101802:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101804:	4b09      	ldr	r3, [pc, #36]	; (810182c <MX_SPI5_Init+0xa4>)
 8101806:	2200      	movs	r2, #0
 8101808:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810180a:	4b08      	ldr	r3, [pc, #32]	; (810182c <MX_SPI5_Init+0xa4>)
 810180c:	2200      	movs	r2, #0
 810180e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101810:	4b06      	ldr	r3, [pc, #24]	; (810182c <MX_SPI5_Init+0xa4>)
 8101812:	2200      	movs	r2, #0
 8101814:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8101816:	4805      	ldr	r0, [pc, #20]	; (810182c <MX_SPI5_Init+0xa4>)
 8101818:	f005 fba2 	bl	8106f60 <HAL_SPI_Init>
 810181c:	4603      	mov	r3, r0
 810181e:	2b00      	cmp	r3, #0
 8101820:	d001      	beq.n	8101826 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8101822:	f7ff ff57 	bl	81016d4 <Error_Handler>
  }

}
 8101826:	bf00      	nop
 8101828:	bd80      	pop	{r7, pc}
 810182a:	bf00      	nop
 810182c:	10005950 	.word	0x10005950
 8101830:	40015000 	.word	0x40015000

08101834 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101834:	b580      	push	{r7, lr}
 8101836:	b08c      	sub	sp, #48	; 0x30
 8101838:	af00      	add	r7, sp, #0
 810183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810183c:	f107 031c 	add.w	r3, r7, #28
 8101840:	2200      	movs	r2, #0
 8101842:	601a      	str	r2, [r3, #0]
 8101844:	605a      	str	r2, [r3, #4]
 8101846:	609a      	str	r2, [r3, #8]
 8101848:	60da      	str	r2, [r3, #12]
 810184a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 810184c:	687b      	ldr	r3, [r7, #4]
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	4a76      	ldr	r2, [pc, #472]	; (8101a2c <HAL_SPI_MspInit+0x1f8>)
 8101852:	4293      	cmp	r3, r2
 8101854:	f040 80b2 	bne.w	81019bc <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101858:	4b75      	ldr	r3, [pc, #468]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 810185a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810185e:	4a74      	ldr	r2, [pc, #464]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 8101860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101864:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101868:	4b71      	ldr	r3, [pc, #452]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 810186a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810186e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101872:	61bb      	str	r3, [r7, #24]
 8101874:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101876:	4b6e      	ldr	r3, [pc, #440]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 8101878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810187c:	4a6c      	ldr	r2, [pc, #432]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 810187e:	f043 0301 	orr.w	r3, r3, #1
 8101882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101886:	4b6a      	ldr	r3, [pc, #424]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 8101888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810188c:	f003 0301 	and.w	r3, r3, #1
 8101890:	617b      	str	r3, [r7, #20]
 8101892:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101894:	4b66      	ldr	r3, [pc, #408]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 8101896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810189a:	4a65      	ldr	r2, [pc, #404]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 810189c:	f043 0308 	orr.w	r3, r3, #8
 81018a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018a4:	4b62      	ldr	r3, [pc, #392]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 81018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018aa:	f003 0308 	and.w	r3, r3, #8
 81018ae:	613b      	str	r3, [r7, #16]
 81018b0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81018b2:	2360      	movs	r3, #96	; 0x60
 81018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018b6:	2302      	movs	r3, #2
 81018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018ba:	2300      	movs	r3, #0
 81018bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018be:	2300      	movs	r3, #0
 81018c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81018c2:	2305      	movs	r3, #5
 81018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81018c6:	f107 031c 	add.w	r3, r7, #28
 81018ca:	4619      	mov	r1, r3
 81018cc:	4859      	ldr	r0, [pc, #356]	; (8101a34 <HAL_SPI_MspInit+0x200>)
 81018ce:	f003 fb97 	bl	8105000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81018d2:	2380      	movs	r3, #128	; 0x80
 81018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018d6:	2302      	movs	r3, #2
 81018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018da:	2300      	movs	r3, #0
 81018dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018de:	2300      	movs	r3, #0
 81018e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81018e2:	2305      	movs	r3, #5
 81018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81018e6:	f107 031c 	add.w	r3, r7, #28
 81018ea:	4619      	mov	r1, r3
 81018ec:	4852      	ldr	r0, [pc, #328]	; (8101a38 <HAL_SPI_MspInit+0x204>)
 81018ee:	f003 fb87 	bl	8105000 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 81018f2:	4b52      	ldr	r3, [pc, #328]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 81018f4:	4a52      	ldr	r2, [pc, #328]	; (8101a40 <HAL_SPI_MspInit+0x20c>)
 81018f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 81018f8:	4b50      	ldr	r3, [pc, #320]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 81018fa:	2225      	movs	r2, #37	; 0x25
 81018fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81018fe:	4b4f      	ldr	r3, [pc, #316]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 8101900:	2200      	movs	r2, #0
 8101902:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101904:	4b4d      	ldr	r3, [pc, #308]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 8101906:	2200      	movs	r2, #0
 8101908:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810190a:	4b4c      	ldr	r3, [pc, #304]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 810190c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101910:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101912:	4b4a      	ldr	r3, [pc, #296]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 8101914:	2200      	movs	r2, #0
 8101916:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101918:	4b48      	ldr	r3, [pc, #288]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 810191a:	2200      	movs	r2, #0
 810191c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 810191e:	4b47      	ldr	r3, [pc, #284]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 8101920:	2200      	movs	r2, #0
 8101922:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101924:	4b45      	ldr	r3, [pc, #276]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 8101926:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 810192a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810192c:	4b43      	ldr	r3, [pc, #268]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 810192e:	2200      	movs	r2, #0
 8101930:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101932:	4842      	ldr	r0, [pc, #264]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 8101934:	f000 fcd8 	bl	81022e8 <HAL_DMA_Init>
 8101938:	4603      	mov	r3, r0
 810193a:	2b00      	cmp	r3, #0
 810193c:	d001      	beq.n	8101942 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 810193e:	f7ff fec9 	bl	81016d4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	4a3d      	ldr	r2, [pc, #244]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 8101946:	67da      	str	r2, [r3, #124]	; 0x7c
 8101948:	4a3c      	ldr	r2, [pc, #240]	; (8101a3c <HAL_SPI_MspInit+0x208>)
 810194a:	687b      	ldr	r3, [r7, #4]
 810194c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 810194e:	4b3d      	ldr	r3, [pc, #244]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 8101950:	4a3d      	ldr	r2, [pc, #244]	; (8101a48 <HAL_SPI_MspInit+0x214>)
 8101952:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101954:	4b3b      	ldr	r3, [pc, #236]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 8101956:	2226      	movs	r2, #38	; 0x26
 8101958:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810195a:	4b3a      	ldr	r3, [pc, #232]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 810195c:	2240      	movs	r2, #64	; 0x40
 810195e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101960:	4b38      	ldr	r3, [pc, #224]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 8101962:	2200      	movs	r2, #0
 8101964:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101966:	4b37      	ldr	r3, [pc, #220]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 8101968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810196c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810196e:	4b35      	ldr	r3, [pc, #212]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 8101970:	2200      	movs	r2, #0
 8101972:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101974:	4b33      	ldr	r3, [pc, #204]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 8101976:	2200      	movs	r2, #0
 8101978:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 810197a:	4b32      	ldr	r3, [pc, #200]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 810197c:	2200      	movs	r2, #0
 810197e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101980:	4b30      	ldr	r3, [pc, #192]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 8101982:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101986:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101988:	4b2e      	ldr	r3, [pc, #184]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 810198a:	2200      	movs	r2, #0
 810198c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 810198e:	482d      	ldr	r0, [pc, #180]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 8101990:	f000 fcaa 	bl	81022e8 <HAL_DMA_Init>
 8101994:	4603      	mov	r3, r0
 8101996:	2b00      	cmp	r3, #0
 8101998:	d001      	beq.n	810199e <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 810199a:	f7ff fe9b 	bl	81016d4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	4a28      	ldr	r2, [pc, #160]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 81019a2:	679a      	str	r2, [r3, #120]	; 0x78
 81019a4:	4a27      	ldr	r2, [pc, #156]	; (8101a44 <HAL_SPI_MspInit+0x210>)
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 81019aa:	2200      	movs	r2, #0
 81019ac:	2105      	movs	r1, #5
 81019ae:	2023      	movs	r0, #35	; 0x23
 81019b0:	f000 fc59 	bl	8102266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 81019b4:	2023      	movs	r0, #35	; 0x23
 81019b6:	f000 fc70 	bl	810229a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 81019ba:	e033      	b.n	8101a24 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI5)
 81019bc:	687b      	ldr	r3, [r7, #4]
 81019be:	681b      	ldr	r3, [r3, #0]
 81019c0:	4a22      	ldr	r2, [pc, #136]	; (8101a4c <HAL_SPI_MspInit+0x218>)
 81019c2:	4293      	cmp	r3, r2
 81019c4:	d12e      	bne.n	8101a24 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 81019c6:	4b1a      	ldr	r3, [pc, #104]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 81019c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019cc:	4a18      	ldr	r2, [pc, #96]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 81019ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81019d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81019d6:	4b16      	ldr	r3, [pc, #88]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 81019d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81019e0:	60fb      	str	r3, [r7, #12]
 81019e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81019e4:	4b12      	ldr	r3, [pc, #72]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 81019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ea:	4a11      	ldr	r2, [pc, #68]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 81019ec:	f043 0320 	orr.w	r3, r3, #32
 81019f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019f4:	4b0e      	ldr	r3, [pc, #56]	; (8101a30 <HAL_SPI_MspInit+0x1fc>)
 81019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019fa:	f003 0320 	and.w	r3, r3, #32
 81019fe:	60bb      	str	r3, [r7, #8]
 8101a00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8101a02:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8101a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a08:	2302      	movs	r3, #2
 8101a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a0c:	2300      	movs	r3, #0
 8101a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a10:	2300      	movs	r3, #0
 8101a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101a14:	2305      	movs	r3, #5
 8101a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101a18:	f107 031c 	add.w	r3, r7, #28
 8101a1c:	4619      	mov	r1, r3
 8101a1e:	480c      	ldr	r0, [pc, #48]	; (8101a50 <HAL_SPI_MspInit+0x21c>)
 8101a20:	f003 faee 	bl	8105000 <HAL_GPIO_Init>
}
 8101a24:	bf00      	nop
 8101a26:	3730      	adds	r7, #48	; 0x30
 8101a28:	46bd      	mov	sp, r7
 8101a2a:	bd80      	pop	{r7, pc}
 8101a2c:	40013000 	.word	0x40013000
 8101a30:	58024400 	.word	0x58024400
 8101a34:	58020000 	.word	0x58020000
 8101a38:	58020c00 	.word	0x58020c00
 8101a3c:	10005a60 	.word	0x10005a60
 8101a40:	40020010 	.word	0x40020010
 8101a44:	10005ad8 	.word	0x10005ad8
 8101a48:	40020028 	.word	0x40020028
 8101a4c:	40015000 	.word	0x40015000
 8101a50:	58021400 	.word	0x58021400

08101a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101a54:	b580      	push	{r7, lr}
 8101a56:	b082      	sub	sp, #8
 8101a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a5a:	4b0c      	ldr	r3, [pc, #48]	; (8101a8c <HAL_MspInit+0x38>)
 8101a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a60:	4a0a      	ldr	r2, [pc, #40]	; (8101a8c <HAL_MspInit+0x38>)
 8101a62:	f043 0302 	orr.w	r3, r3, #2
 8101a66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101a6a:	4b08      	ldr	r3, [pc, #32]	; (8101a8c <HAL_MspInit+0x38>)
 8101a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a70:	f003 0302 	and.w	r3, r3, #2
 8101a74:	607b      	str	r3, [r7, #4]
 8101a76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101a78:	2200      	movs	r2, #0
 8101a7a:	210f      	movs	r1, #15
 8101a7c:	f06f 0001 	mvn.w	r0, #1
 8101a80:	f000 fbf1 	bl	8102266 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101a84:	bf00      	nop
 8101a86:	3708      	adds	r7, #8
 8101a88:	46bd      	mov	sp, r7
 8101a8a:	bd80      	pop	{r7, pc}
 8101a8c:	58024400 	.word	0x58024400

08101a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101a90:	b580      	push	{r7, lr}
 8101a92:	b08e      	sub	sp, #56	; 0x38
 8101a94:	af00      	add	r7, sp, #0
 8101a96:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	2b0f      	cmp	r3, #15
 8101a9c:	d844      	bhi.n	8101b28 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 8101a9e:	2200      	movs	r2, #0
 8101aa0:	6879      	ldr	r1, [r7, #4]
 8101aa2:	202c      	movs	r0, #44	; 0x2c
 8101aa4:	f000 fbdf 	bl	8102266 <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8101aa8:	202c      	movs	r0, #44	; 0x2c
 8101aaa:	f000 fbf6 	bl	810229a <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101aae:	4a24      	ldr	r2, [pc, #144]	; (8101b40 <HAL_InitTick+0xb0>)
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8101ab4:	4b23      	ldr	r3, [pc, #140]	; (8101b44 <HAL_InitTick+0xb4>)
 8101ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101aba:	4a22      	ldr	r2, [pc, #136]	; (8101b44 <HAL_InitTick+0xb4>)
 8101abc:	f043 0302 	orr.w	r3, r3, #2
 8101ac0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ac4:	4b1f      	ldr	r3, [pc, #124]	; (8101b44 <HAL_InitTick+0xb4>)
 8101ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101aca:	f003 0302 	and.w	r3, r3, #2
 8101ace:	60bb      	str	r3, [r7, #8]
 8101ad0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101ad2:	f107 020c 	add.w	r2, r7, #12
 8101ad6:	f107 0310 	add.w	r3, r7, #16
 8101ada:	4611      	mov	r1, r2
 8101adc:	4618      	mov	r0, r3
 8101ade:	f004 ff4f 	bl	8106980 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8101ae2:	f004 ff37 	bl	8106954 <HAL_RCC_GetPCLK2Freq>
 8101ae6:	4603      	mov	r3, r0
 8101ae8:	005b      	lsls	r3, r3, #1
 8101aea:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101aee:	4a16      	ldr	r2, [pc, #88]	; (8101b48 <HAL_InitTick+0xb8>)
 8101af0:	fba2 2303 	umull	r2, r3, r2, r3
 8101af4:	0c9b      	lsrs	r3, r3, #18
 8101af6:	3b01      	subs	r3, #1
 8101af8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8101afa:	4b14      	ldr	r3, [pc, #80]	; (8101b4c <HAL_InitTick+0xbc>)
 8101afc:	4a14      	ldr	r2, [pc, #80]	; (8101b50 <HAL_InitTick+0xc0>)
 8101afe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101b00:	4b12      	ldr	r3, [pc, #72]	; (8101b4c <HAL_InitTick+0xbc>)
 8101b02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101b06:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101b08:	4a10      	ldr	r2, [pc, #64]	; (8101b4c <HAL_InitTick+0xbc>)
 8101b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101b0c:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8101b0e:	4b0f      	ldr	r3, [pc, #60]	; (8101b4c <HAL_InitTick+0xbc>)
 8101b10:	2200      	movs	r2, #0
 8101b12:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101b14:	4b0d      	ldr	r3, [pc, #52]	; (8101b4c <HAL_InitTick+0xbc>)
 8101b16:	2200      	movs	r2, #0
 8101b18:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8101b1a:	480c      	ldr	r0, [pc, #48]	; (8101b4c <HAL_InitTick+0xbc>)
 8101b1c:	f005 fdf7 	bl	810770e <HAL_TIM_Base_Init>
 8101b20:	4603      	mov	r3, r0
 8101b22:	2b00      	cmp	r3, #0
 8101b24:	d107      	bne.n	8101b36 <HAL_InitTick+0xa6>
 8101b26:	e001      	b.n	8101b2c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8101b28:	2301      	movs	r3, #1
 8101b2a:	e005      	b.n	8101b38 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8101b2c:	4807      	ldr	r0, [pc, #28]	; (8101b4c <HAL_InitTick+0xbc>)
 8101b2e:	f005 fe4f 	bl	81077d0 <HAL_TIM_Base_Start_IT>
 8101b32:	4603      	mov	r3, r0
 8101b34:	e000      	b.n	8101b38 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8101b36:	2301      	movs	r3, #1
}
 8101b38:	4618      	mov	r0, r3
 8101b3a:	3738      	adds	r7, #56	; 0x38
 8101b3c:	46bd      	mov	sp, r7
 8101b3e:	bd80      	pop	{r7, pc}
 8101b40:	10000008 	.word	0x10000008
 8101b44:	58024400 	.word	0x58024400
 8101b48:	431bde83 	.word	0x431bde83
 8101b4c:	10005b50 	.word	0x10005b50
 8101b50:	40010400 	.word	0x40010400

08101b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101b54:	b480      	push	{r7}
 8101b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101b58:	e7fe      	b.n	8101b58 <NMI_Handler+0x4>

08101b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101b5a:	b480      	push	{r7}
 8101b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101b5e:	e7fe      	b.n	8101b5e <HardFault_Handler+0x4>

08101b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101b60:	b480      	push	{r7}
 8101b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101b64:	e7fe      	b.n	8101b64 <MemManage_Handler+0x4>

08101b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101b66:	b480      	push	{r7}
 8101b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101b6a:	e7fe      	b.n	8101b6a <BusFault_Handler+0x4>

08101b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101b6c:	b480      	push	{r7}
 8101b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101b70:	e7fe      	b.n	8101b70 <UsageFault_Handler+0x4>

08101b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101b72:	b480      	push	{r7}
 8101b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101b76:	bf00      	nop
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7e:	4770      	bx	lr

08101b80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101b80:	b580      	push	{r7, lr}
 8101b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101b84:	4802      	ldr	r0, [pc, #8]	; (8101b90 <DMA1_Stream0_IRQHandler+0x10>)
 8101b86:	f001 fbb7 	bl	81032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101b8a:	bf00      	nop
 8101b8c:	bd80      	pop	{r7, pc}
 8101b8e:	bf00      	nop
 8101b90:	10005a60 	.word	0x10005a60

08101b94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101b94:	b580      	push	{r7, lr}
 8101b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101b98:	4802      	ldr	r0, [pc, #8]	; (8101ba4 <DMA1_Stream1_IRQHandler+0x10>)
 8101b9a:	f001 fbad 	bl	81032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101b9e:	bf00      	nop
 8101ba0:	bd80      	pop	{r7, pc}
 8101ba2:	bf00      	nop
 8101ba4:	10005ad8 	.word	0x10005ad8

08101ba8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101ba8:	b580      	push	{r7, lr}
 8101baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101bac:	4802      	ldr	r0, [pc, #8]	; (8101bb8 <SPI1_IRQHandler+0x10>)
 8101bae:	f005 facf 	bl	8107150 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101bb2:	bf00      	nop
 8101bb4:	bd80      	pop	{r7, pc}
 8101bb6:	bf00      	nop
 8101bb8:	100059d8 	.word	0x100059d8

08101bbc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8101bbc:	b580      	push	{r7, lr}
 8101bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8101bc0:	4802      	ldr	r0, [pc, #8]	; (8101bcc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101bc2:	f005 fe3b 	bl	810783c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8101bc6:	bf00      	nop
 8101bc8:	bd80      	pop	{r7, pc}
 8101bca:	bf00      	nop
 8101bcc:	10005b50 	.word	0x10005b50

08101bd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8101bd0:	b580      	push	{r7, lr}
 8101bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101bd4:	4802      	ldr	r0, [pc, #8]	; (8101be0 <DMA2_Stream2_IRQHandler+0x10>)
 8101bd6:	f001 fb8f 	bl	81032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8101bda:	bf00      	nop
 8101bdc:	bd80      	pop	{r7, pc}
 8101bde:	bf00      	nop
 8101be0:	10005b9c 	.word	0x10005b9c

08101be4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101be4:	b580      	push	{r7, lr}
 8101be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101be8:	4802      	ldr	r0, [pc, #8]	; (8101bf4 <DMA2_Stream3_IRQHandler+0x10>)
 8101bea:	f001 fb85 	bl	81032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8101bee:	bf00      	nop
 8101bf0:	bd80      	pop	{r7, pc}
 8101bf2:	bf00      	nop
 8101bf4:	10005ca0 	.word	0x10005ca0

08101bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101bf8:	b480      	push	{r7}
 8101bfa:	af00      	add	r7, sp, #0
	return 1;
 8101bfc:	2301      	movs	r3, #1
}
 8101bfe:	4618      	mov	r0, r3
 8101c00:	46bd      	mov	sp, r7
 8101c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c06:	4770      	bx	lr

08101c08 <_kill>:

int _kill(int pid, int sig)
{
 8101c08:	b580      	push	{r7, lr}
 8101c0a:	b082      	sub	sp, #8
 8101c0c:	af00      	add	r7, sp, #0
 8101c0e:	6078      	str	r0, [r7, #4]
 8101c10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101c12:	f00c fc69 	bl	810e4e8 <__errno>
 8101c16:	4602      	mov	r2, r0
 8101c18:	2316      	movs	r3, #22
 8101c1a:	6013      	str	r3, [r2, #0]
	return -1;
 8101c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101c20:	4618      	mov	r0, r3
 8101c22:	3708      	adds	r7, #8
 8101c24:	46bd      	mov	sp, r7
 8101c26:	bd80      	pop	{r7, pc}

08101c28 <_exit>:

void _exit (int status)
{
 8101c28:	b580      	push	{r7, lr}
 8101c2a:	b082      	sub	sp, #8
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101c34:	6878      	ldr	r0, [r7, #4]
 8101c36:	f7ff ffe7 	bl	8101c08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101c3a:	e7fe      	b.n	8101c3a <_exit+0x12>

08101c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101c3c:	b580      	push	{r7, lr}
 8101c3e:	b086      	sub	sp, #24
 8101c40:	af00      	add	r7, sp, #0
 8101c42:	60f8      	str	r0, [r7, #12]
 8101c44:	60b9      	str	r1, [r7, #8]
 8101c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c48:	2300      	movs	r3, #0
 8101c4a:	617b      	str	r3, [r7, #20]
 8101c4c:	e00a      	b.n	8101c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101c4e:	f3af 8000 	nop.w
 8101c52:	4601      	mov	r1, r0
 8101c54:	68bb      	ldr	r3, [r7, #8]
 8101c56:	1c5a      	adds	r2, r3, #1
 8101c58:	60ba      	str	r2, [r7, #8]
 8101c5a:	b2ca      	uxtb	r2, r1
 8101c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c5e:	697b      	ldr	r3, [r7, #20]
 8101c60:	3301      	adds	r3, #1
 8101c62:	617b      	str	r3, [r7, #20]
 8101c64:	697a      	ldr	r2, [r7, #20]
 8101c66:	687b      	ldr	r3, [r7, #4]
 8101c68:	429a      	cmp	r2, r3
 8101c6a:	dbf0      	blt.n	8101c4e <_read+0x12>
	}

return len;
 8101c6c:	687b      	ldr	r3, [r7, #4]
}
 8101c6e:	4618      	mov	r0, r3
 8101c70:	3718      	adds	r7, #24
 8101c72:	46bd      	mov	sp, r7
 8101c74:	bd80      	pop	{r7, pc}

08101c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101c76:	b580      	push	{r7, lr}
 8101c78:	b086      	sub	sp, #24
 8101c7a:	af00      	add	r7, sp, #0
 8101c7c:	60f8      	str	r0, [r7, #12]
 8101c7e:	60b9      	str	r1, [r7, #8]
 8101c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c82:	2300      	movs	r3, #0
 8101c84:	617b      	str	r3, [r7, #20]
 8101c86:	e009      	b.n	8101c9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101c88:	68bb      	ldr	r3, [r7, #8]
 8101c8a:	1c5a      	adds	r2, r3, #1
 8101c8c:	60ba      	str	r2, [r7, #8]
 8101c8e:	781b      	ldrb	r3, [r3, #0]
 8101c90:	4618      	mov	r0, r3
 8101c92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c96:	697b      	ldr	r3, [r7, #20]
 8101c98:	3301      	adds	r3, #1
 8101c9a:	617b      	str	r3, [r7, #20]
 8101c9c:	697a      	ldr	r2, [r7, #20]
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	429a      	cmp	r2, r3
 8101ca2:	dbf1      	blt.n	8101c88 <_write+0x12>
	}
	return len;
 8101ca4:	687b      	ldr	r3, [r7, #4]
}
 8101ca6:	4618      	mov	r0, r3
 8101ca8:	3718      	adds	r7, #24
 8101caa:	46bd      	mov	sp, r7
 8101cac:	bd80      	pop	{r7, pc}

08101cae <_close>:

int _close(int file)
{
 8101cae:	b480      	push	{r7}
 8101cb0:	b083      	sub	sp, #12
 8101cb2:	af00      	add	r7, sp, #0
 8101cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8101cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101cba:	4618      	mov	r0, r3
 8101cbc:	370c      	adds	r7, #12
 8101cbe:	46bd      	mov	sp, r7
 8101cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cc4:	4770      	bx	lr

08101cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101cc6:	b480      	push	{r7}
 8101cc8:	b083      	sub	sp, #12
 8101cca:	af00      	add	r7, sp, #0
 8101ccc:	6078      	str	r0, [r7, #4]
 8101cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101cd0:	683b      	ldr	r3, [r7, #0]
 8101cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8101cd8:	2300      	movs	r3, #0
}
 8101cda:	4618      	mov	r0, r3
 8101cdc:	370c      	adds	r7, #12
 8101cde:	46bd      	mov	sp, r7
 8101ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce4:	4770      	bx	lr

08101ce6 <_isatty>:

int _isatty(int file)
{
 8101ce6:	b480      	push	{r7}
 8101ce8:	b083      	sub	sp, #12
 8101cea:	af00      	add	r7, sp, #0
 8101cec:	6078      	str	r0, [r7, #4]
	return 1;
 8101cee:	2301      	movs	r3, #1
}
 8101cf0:	4618      	mov	r0, r3
 8101cf2:	370c      	adds	r7, #12
 8101cf4:	46bd      	mov	sp, r7
 8101cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cfa:	4770      	bx	lr

08101cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101cfc:	b480      	push	{r7}
 8101cfe:	b085      	sub	sp, #20
 8101d00:	af00      	add	r7, sp, #0
 8101d02:	60f8      	str	r0, [r7, #12]
 8101d04:	60b9      	str	r1, [r7, #8]
 8101d06:	607a      	str	r2, [r7, #4]
	return 0;
 8101d08:	2300      	movs	r3, #0
}
 8101d0a:	4618      	mov	r0, r3
 8101d0c:	3714      	adds	r7, #20
 8101d0e:	46bd      	mov	sp, r7
 8101d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d14:	4770      	bx	lr
	...

08101d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101d18:	b580      	push	{r7, lr}
 8101d1a:	b086      	sub	sp, #24
 8101d1c:	af00      	add	r7, sp, #0
 8101d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101d20:	4a14      	ldr	r2, [pc, #80]	; (8101d74 <_sbrk+0x5c>)
 8101d22:	4b15      	ldr	r3, [pc, #84]	; (8101d78 <_sbrk+0x60>)
 8101d24:	1ad3      	subs	r3, r2, r3
 8101d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101d28:	697b      	ldr	r3, [r7, #20]
 8101d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101d2c:	4b13      	ldr	r3, [pc, #76]	; (8101d7c <_sbrk+0x64>)
 8101d2e:	681b      	ldr	r3, [r3, #0]
 8101d30:	2b00      	cmp	r3, #0
 8101d32:	d102      	bne.n	8101d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101d34:	4b11      	ldr	r3, [pc, #68]	; (8101d7c <_sbrk+0x64>)
 8101d36:	4a12      	ldr	r2, [pc, #72]	; (8101d80 <_sbrk+0x68>)
 8101d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101d3a:	4b10      	ldr	r3, [pc, #64]	; (8101d7c <_sbrk+0x64>)
 8101d3c:	681a      	ldr	r2, [r3, #0]
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	4413      	add	r3, r2
 8101d42:	693a      	ldr	r2, [r7, #16]
 8101d44:	429a      	cmp	r2, r3
 8101d46:	d207      	bcs.n	8101d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101d48:	f00c fbce 	bl	810e4e8 <__errno>
 8101d4c:	4602      	mov	r2, r0
 8101d4e:	230c      	movs	r3, #12
 8101d50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8101d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101d56:	e009      	b.n	8101d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101d58:	4b08      	ldr	r3, [pc, #32]	; (8101d7c <_sbrk+0x64>)
 8101d5a:	681b      	ldr	r3, [r3, #0]
 8101d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101d5e:	4b07      	ldr	r3, [pc, #28]	; (8101d7c <_sbrk+0x64>)
 8101d60:	681a      	ldr	r2, [r3, #0]
 8101d62:	687b      	ldr	r3, [r7, #4]
 8101d64:	4413      	add	r3, r2
 8101d66:	4a05      	ldr	r2, [pc, #20]	; (8101d7c <_sbrk+0x64>)
 8101d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101d6a:	68fb      	ldr	r3, [r7, #12]
}
 8101d6c:	4618      	mov	r0, r3
 8101d6e:	3718      	adds	r7, #24
 8101d70:	46bd      	mov	sp, r7
 8101d72:	bd80      	pop	{r7, pc}
 8101d74:	10048000 	.word	0x10048000
 8101d78:	00000400 	.word	0x00000400
 8101d7c:	10000224 	.word	0x10000224
 8101d80:	100061d0 	.word	0x100061d0

08101d84 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101d84:	b580      	push	{r7, lr}
 8101d86:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101d88:	4b22      	ldr	r3, [pc, #136]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101d8a:	4a23      	ldr	r2, [pc, #140]	; (8101e18 <MX_USART3_UART_Init+0x94>)
 8101d8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101d8e:	4b21      	ldr	r3, [pc, #132]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101d94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101d96:	4b1f      	ldr	r3, [pc, #124]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101d98:	2200      	movs	r2, #0
 8101d9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101d9c:	4b1d      	ldr	r3, [pc, #116]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101d9e:	2200      	movs	r2, #0
 8101da0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101da2:	4b1c      	ldr	r3, [pc, #112]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101da4:	2200      	movs	r2, #0
 8101da6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101da8:	4b1a      	ldr	r3, [pc, #104]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101daa:	220c      	movs	r2, #12
 8101dac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101dae:	4b19      	ldr	r3, [pc, #100]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101db0:	2200      	movs	r2, #0
 8101db2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101db4:	4b17      	ldr	r3, [pc, #92]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101db6:	2200      	movs	r2, #0
 8101db8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101dba:	4b16      	ldr	r3, [pc, #88]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101dbc:	2200      	movs	r2, #0
 8101dbe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101dc0:	4b14      	ldr	r3, [pc, #80]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101dc2:	2200      	movs	r2, #0
 8101dc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101dc6:	4b13      	ldr	r3, [pc, #76]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101dc8:	2200      	movs	r2, #0
 8101dca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101dcc:	4811      	ldr	r0, [pc, #68]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101dce:	f005 ff35 	bl	8107c3c <HAL_UART_Init>
 8101dd2:	4603      	mov	r3, r0
 8101dd4:	2b00      	cmp	r3, #0
 8101dd6:	d001      	beq.n	8101ddc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101dd8:	f7ff fc7c 	bl	81016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101ddc:	2100      	movs	r1, #0
 8101dde:	480d      	ldr	r0, [pc, #52]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101de0:	f007 f8cd 	bl	8108f7e <HAL_UARTEx_SetTxFifoThreshold>
 8101de4:	4603      	mov	r3, r0
 8101de6:	2b00      	cmp	r3, #0
 8101de8:	d001      	beq.n	8101dee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101dea:	f7ff fc73 	bl	81016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101dee:	2100      	movs	r1, #0
 8101df0:	4808      	ldr	r0, [pc, #32]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101df2:	f007 f902 	bl	8108ffa <HAL_UARTEx_SetRxFifoThreshold>
 8101df6:	4603      	mov	r3, r0
 8101df8:	2b00      	cmp	r3, #0
 8101dfa:	d001      	beq.n	8101e00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101dfc:	f7ff fc6a 	bl	81016d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101e00:	4804      	ldr	r0, [pc, #16]	; (8101e14 <MX_USART3_UART_Init+0x90>)
 8101e02:	f007 f883 	bl	8108f0c <HAL_UARTEx_DisableFifoMode>
 8101e06:	4603      	mov	r3, r0
 8101e08:	2b00      	cmp	r3, #0
 8101e0a:	d001      	beq.n	8101e10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101e0c:	f7ff fc62 	bl	81016d4 <Error_Handler>
  }

}
 8101e10:	bf00      	nop
 8101e12:	bd80      	pop	{r7, pc}
 8101e14:	10005c14 	.word	0x10005c14
 8101e18:	40004800 	.word	0x40004800

08101e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101e1c:	b580      	push	{r7, lr}
 8101e1e:	b08a      	sub	sp, #40	; 0x28
 8101e20:	af00      	add	r7, sp, #0
 8101e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e24:	f107 0314 	add.w	r3, r7, #20
 8101e28:	2200      	movs	r2, #0
 8101e2a:	601a      	str	r2, [r3, #0]
 8101e2c:	605a      	str	r2, [r3, #4]
 8101e2e:	609a      	str	r2, [r3, #8]
 8101e30:	60da      	str	r2, [r3, #12]
 8101e32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	681b      	ldr	r3, [r3, #0]
 8101e38:	4a49      	ldr	r2, [pc, #292]	; (8101f60 <HAL_UART_MspInit+0x144>)
 8101e3a:	4293      	cmp	r3, r2
 8101e3c:	f040 808b 	bne.w	8101f56 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101e40:	4b48      	ldr	r3, [pc, #288]	; (8101f64 <HAL_UART_MspInit+0x148>)
 8101e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e46:	4a47      	ldr	r2, [pc, #284]	; (8101f64 <HAL_UART_MspInit+0x148>)
 8101e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101e4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e50:	4b44      	ldr	r3, [pc, #272]	; (8101f64 <HAL_UART_MspInit+0x148>)
 8101e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101e5a:	613b      	str	r3, [r7, #16]
 8101e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101e5e:	4b41      	ldr	r3, [pc, #260]	; (8101f64 <HAL_UART_MspInit+0x148>)
 8101e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e64:	4a3f      	ldr	r2, [pc, #252]	; (8101f64 <HAL_UART_MspInit+0x148>)
 8101e66:	f043 0308 	orr.w	r3, r3, #8
 8101e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e6e:	4b3d      	ldr	r3, [pc, #244]	; (8101f64 <HAL_UART_MspInit+0x148>)
 8101e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e74:	f003 0308 	and.w	r3, r3, #8
 8101e78:	60fb      	str	r3, [r7, #12]
 8101e7a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101e7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e82:	2302      	movs	r3, #2
 8101e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e86:	2300      	movs	r3, #0
 8101e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e8a:	2300      	movs	r3, #0
 8101e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101e8e:	2307      	movs	r3, #7
 8101e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101e92:	f107 0314 	add.w	r3, r7, #20
 8101e96:	4619      	mov	r1, r3
 8101e98:	4833      	ldr	r0, [pc, #204]	; (8101f68 <HAL_UART_MspInit+0x14c>)
 8101e9a:	f003 f8b1 	bl	8105000 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8101e9e:	4b33      	ldr	r3, [pc, #204]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ea0:	4a33      	ldr	r2, [pc, #204]	; (8101f70 <HAL_UART_MspInit+0x154>)
 8101ea2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101ea4:	4b31      	ldr	r3, [pc, #196]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ea6:	222d      	movs	r2, #45	; 0x2d
 8101ea8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101eaa:	4b30      	ldr	r3, [pc, #192]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101eac:	2200      	movs	r2, #0
 8101eae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101eb0:	4b2e      	ldr	r3, [pc, #184]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101eb2:	2200      	movs	r2, #0
 8101eb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101eb6:	4b2d      	ldr	r3, [pc, #180]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101ebc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101ebe:	4b2b      	ldr	r3, [pc, #172]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ec0:	2200      	movs	r2, #0
 8101ec2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101ec4:	4b29      	ldr	r3, [pc, #164]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ec6:	2200      	movs	r2, #0
 8101ec8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8101eca:	4b28      	ldr	r3, [pc, #160]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ecc:	2200      	movs	r2, #0
 8101ece:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8101ed0:	4b26      	ldr	r3, [pc, #152]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101ed6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101ed8:	4b24      	ldr	r3, [pc, #144]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101eda:	2200      	movs	r2, #0
 8101edc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101ede:	4823      	ldr	r0, [pc, #140]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ee0:	f000 fa02 	bl	81022e8 <HAL_DMA_Init>
 8101ee4:	4603      	mov	r3, r0
 8101ee6:	2b00      	cmp	r3, #0
 8101ee8:	d001      	beq.n	8101eee <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8101eea:	f7ff fbf3 	bl	81016d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	4a1e      	ldr	r2, [pc, #120]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ef2:	679a      	str	r2, [r3, #120]	; 0x78
 8101ef4:	4a1d      	ldr	r2, [pc, #116]	; (8101f6c <HAL_UART_MspInit+0x150>)
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8101efa:	4b1e      	ldr	r3, [pc, #120]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101efc:	4a1e      	ldr	r2, [pc, #120]	; (8101f78 <HAL_UART_MspInit+0x15c>)
 8101efe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101f00:	4b1c      	ldr	r3, [pc, #112]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f02:	222e      	movs	r2, #46	; 0x2e
 8101f04:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101f06:	4b1b      	ldr	r3, [pc, #108]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f08:	2240      	movs	r2, #64	; 0x40
 8101f0a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101f0c:	4b19      	ldr	r3, [pc, #100]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f0e:	2200      	movs	r2, #0
 8101f10:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101f12:	4b18      	ldr	r3, [pc, #96]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101f18:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101f1a:	4b16      	ldr	r3, [pc, #88]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f1c:	2200      	movs	r2, #0
 8101f1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101f20:	4b14      	ldr	r3, [pc, #80]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f22:	2200      	movs	r2, #0
 8101f24:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8101f26:	4b13      	ldr	r3, [pc, #76]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f28:	2200      	movs	r2, #0
 8101f2a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8101f2c:	4b11      	ldr	r3, [pc, #68]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101f32:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101f34:	4b0f      	ldr	r3, [pc, #60]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f36:	2200      	movs	r2, #0
 8101f38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101f3a:	480e      	ldr	r0, [pc, #56]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f3c:	f000 f9d4 	bl	81022e8 <HAL_DMA_Init>
 8101f40:	4603      	mov	r3, r0
 8101f42:	2b00      	cmp	r3, #0
 8101f44:	d001      	beq.n	8101f4a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8101f46:	f7ff fbc5 	bl	81016d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	4a09      	ldr	r2, [pc, #36]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f4e:	675a      	str	r2, [r3, #116]	; 0x74
 8101f50:	4a08      	ldr	r2, [pc, #32]	; (8101f74 <HAL_UART_MspInit+0x158>)
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101f56:	bf00      	nop
 8101f58:	3728      	adds	r7, #40	; 0x28
 8101f5a:	46bd      	mov	sp, r7
 8101f5c:	bd80      	pop	{r7, pc}
 8101f5e:	bf00      	nop
 8101f60:	40004800 	.word	0x40004800
 8101f64:	58024400 	.word	0x58024400
 8101f68:	58020c00 	.word	0x58020c00
 8101f6c:	10005b9c 	.word	0x10005b9c
 8101f70:	40020440 	.word	0x40020440
 8101f74:	10005ca0 	.word	0x10005ca0
 8101f78:	40020458 	.word	0x40020458

08101f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101fb4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8101f80:	f7ff f8ba 	bl	81010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8101f84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8101f86:	e003      	b.n	8101f90 <LoopCopyDataInit>

08101f88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101f88:	4b0b      	ldr	r3, [pc, #44]	; (8101fb8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8101f8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101f8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101f8e:	3104      	adds	r1, #4

08101f90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101f90:	480a      	ldr	r0, [pc, #40]	; (8101fbc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8101f92:	4b0b      	ldr	r3, [pc, #44]	; (8101fc0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8101f94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8101f96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101f98:	d3f6      	bcc.n	8101f88 <CopyDataInit>
  ldr  r2, =_sbss
 8101f9a:	4a0a      	ldr	r2, [pc, #40]	; (8101fc4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8101f9c:	e002      	b.n	8101fa4 <LoopFillZerobss>

08101f9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101f9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101fa0:	f842 3b04 	str.w	r3, [r2], #4

08101fa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8101fa4:	4b08      	ldr	r3, [pc, #32]	; (8101fc8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8101fa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101fa8:	d3f9      	bcc.n	8101f9e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8101faa:	f00c faa3 	bl	810e4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101fae:	f7ff fb27 	bl	8101600 <main>
  bx  lr    
 8101fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101fb4:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101fb8:	08111c9c 	.word	0x08111c9c
  ldr  r0, =_sdata
 8101fbc:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101fc0:	10000208 	.word	0x10000208
  ldr  r2, =_sbss
 8101fc4:	10000208 	.word	0x10000208
  ldr  r3, = _ebss
 8101fc8:	100061d0 	.word	0x100061d0

08101fcc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101fcc:	e7fe      	b.n	8101fcc <ADC3_IRQHandler>
	...

08101fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101fd0:	b580      	push	{r7, lr}
 8101fd2:	b082      	sub	sp, #8
 8101fd4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101fd6:	4b28      	ldr	r3, [pc, #160]	; (8102078 <HAL_Init+0xa8>)
 8101fd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101fdc:	4a26      	ldr	r2, [pc, #152]	; (8102078 <HAL_Init+0xa8>)
 8101fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101fe2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101fe6:	4b24      	ldr	r3, [pc, #144]	; (8102078 <HAL_Init+0xa8>)
 8101fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101ff0:	603b      	str	r3, [r7, #0]
 8101ff2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101ff4:	4b21      	ldr	r3, [pc, #132]	; (810207c <HAL_Init+0xac>)
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102000:	4a1e      	ldr	r2, [pc, #120]	; (810207c <HAL_Init+0xac>)
 8102002:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102006:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102008:	4b1c      	ldr	r3, [pc, #112]	; (810207c <HAL_Init+0xac>)
 810200a:	681b      	ldr	r3, [r3, #0]
 810200c:	4a1b      	ldr	r2, [pc, #108]	; (810207c <HAL_Init+0xac>)
 810200e:	f043 0301 	orr.w	r3, r3, #1
 8102012:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102014:	2003      	movs	r0, #3
 8102016:	f000 f91b 	bl	8102250 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810201a:	f004 fae1 	bl	81065e0 <HAL_RCC_GetSysClockFreq>
 810201e:	4601      	mov	r1, r0
 8102020:	4b15      	ldr	r3, [pc, #84]	; (8102078 <HAL_Init+0xa8>)
 8102022:	699b      	ldr	r3, [r3, #24]
 8102024:	0a1b      	lsrs	r3, r3, #8
 8102026:	f003 030f 	and.w	r3, r3, #15
 810202a:	4a15      	ldr	r2, [pc, #84]	; (8102080 <HAL_Init+0xb0>)
 810202c:	5cd3      	ldrb	r3, [r2, r3]
 810202e:	f003 031f 	and.w	r3, r3, #31
 8102032:	fa21 f303 	lsr.w	r3, r1, r3
 8102036:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102038:	4b0f      	ldr	r3, [pc, #60]	; (8102078 <HAL_Init+0xa8>)
 810203a:	699b      	ldr	r3, [r3, #24]
 810203c:	f003 030f 	and.w	r3, r3, #15
 8102040:	4a0f      	ldr	r2, [pc, #60]	; (8102080 <HAL_Init+0xb0>)
 8102042:	5cd3      	ldrb	r3, [r2, r3]
 8102044:	f003 031f 	and.w	r3, r3, #31
 8102048:	687a      	ldr	r2, [r7, #4]
 810204a:	fa22 f303 	lsr.w	r3, r2, r3
 810204e:	4a0d      	ldr	r2, [pc, #52]	; (8102084 <HAL_Init+0xb4>)
 8102050:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102052:	4b0c      	ldr	r3, [pc, #48]	; (8102084 <HAL_Init+0xb4>)
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	4a0c      	ldr	r2, [pc, #48]	; (8102088 <HAL_Init+0xb8>)
 8102058:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810205a:	2000      	movs	r0, #0
 810205c:	f7ff fd18 	bl	8101a90 <HAL_InitTick>
 8102060:	4603      	mov	r3, r0
 8102062:	2b00      	cmp	r3, #0
 8102064:	d001      	beq.n	810206a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102066:	2301      	movs	r3, #1
 8102068:	e002      	b.n	8102070 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810206a:	f7ff fcf3 	bl	8101a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810206e:	2300      	movs	r3, #0
}
 8102070:	4618      	mov	r0, r3
 8102072:	3708      	adds	r7, #8
 8102074:	46bd      	mov	sp, r7
 8102076:	bd80      	pop	{r7, pc}
 8102078:	58024400 	.word	0x58024400
 810207c:	40024400 	.word	0x40024400
 8102080:	08111944 	.word	0x08111944
 8102084:	10000004 	.word	0x10000004
 8102088:	10000000 	.word	0x10000000

0810208c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810208c:	b480      	push	{r7}
 810208e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102090:	4b06      	ldr	r3, [pc, #24]	; (81020ac <HAL_IncTick+0x20>)
 8102092:	781b      	ldrb	r3, [r3, #0]
 8102094:	461a      	mov	r2, r3
 8102096:	4b06      	ldr	r3, [pc, #24]	; (81020b0 <HAL_IncTick+0x24>)
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	4413      	add	r3, r2
 810209c:	4a04      	ldr	r2, [pc, #16]	; (81020b0 <HAL_IncTick+0x24>)
 810209e:	6013      	str	r3, [r2, #0]
}
 81020a0:	bf00      	nop
 81020a2:	46bd      	mov	sp, r7
 81020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020a8:	4770      	bx	lr
 81020aa:	bf00      	nop
 81020ac:	1000000c 	.word	0x1000000c
 81020b0:	10005d18 	.word	0x10005d18

081020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81020b4:	b480      	push	{r7}
 81020b6:	af00      	add	r7, sp, #0
  return uwTick;
 81020b8:	4b03      	ldr	r3, [pc, #12]	; (81020c8 <HAL_GetTick+0x14>)
 81020ba:	681b      	ldr	r3, [r3, #0]
}
 81020bc:	4618      	mov	r0, r3
 81020be:	46bd      	mov	sp, r7
 81020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020c4:	4770      	bx	lr
 81020c6:	bf00      	nop
 81020c8:	10005d18 	.word	0x10005d18

081020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81020cc:	b480      	push	{r7}
 81020ce:	b085      	sub	sp, #20
 81020d0:	af00      	add	r7, sp, #0
 81020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	f003 0307 	and.w	r3, r3, #7
 81020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81020dc:	4b0c      	ldr	r3, [pc, #48]	; (8102110 <__NVIC_SetPriorityGrouping+0x44>)
 81020de:	68db      	ldr	r3, [r3, #12]
 81020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81020e2:	68ba      	ldr	r2, [r7, #8]
 81020e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81020e8:	4013      	ands	r3, r2
 81020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81020ec:	68fb      	ldr	r3, [r7, #12]
 81020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81020f0:	68bb      	ldr	r3, [r7, #8]
 81020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81020f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81020fe:	4a04      	ldr	r2, [pc, #16]	; (8102110 <__NVIC_SetPriorityGrouping+0x44>)
 8102100:	68bb      	ldr	r3, [r7, #8]
 8102102:	60d3      	str	r3, [r2, #12]
}
 8102104:	bf00      	nop
 8102106:	3714      	adds	r7, #20
 8102108:	46bd      	mov	sp, r7
 810210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810210e:	4770      	bx	lr
 8102110:	e000ed00 	.word	0xe000ed00

08102114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102114:	b480      	push	{r7}
 8102116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102118:	4b04      	ldr	r3, [pc, #16]	; (810212c <__NVIC_GetPriorityGrouping+0x18>)
 810211a:	68db      	ldr	r3, [r3, #12]
 810211c:	0a1b      	lsrs	r3, r3, #8
 810211e:	f003 0307 	and.w	r3, r3, #7
}
 8102122:	4618      	mov	r0, r3
 8102124:	46bd      	mov	sp, r7
 8102126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810212a:	4770      	bx	lr
 810212c:	e000ed00 	.word	0xe000ed00

08102130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102130:	b480      	push	{r7}
 8102132:	b083      	sub	sp, #12
 8102134:	af00      	add	r7, sp, #0
 8102136:	4603      	mov	r3, r0
 8102138:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810213a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810213e:	2b00      	cmp	r3, #0
 8102140:	db0b      	blt.n	810215a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102142:	88fb      	ldrh	r3, [r7, #6]
 8102144:	f003 021f 	and.w	r2, r3, #31
 8102148:	4907      	ldr	r1, [pc, #28]	; (8102168 <__NVIC_EnableIRQ+0x38>)
 810214a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810214e:	095b      	lsrs	r3, r3, #5
 8102150:	2001      	movs	r0, #1
 8102152:	fa00 f202 	lsl.w	r2, r0, r2
 8102156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 810215a:	bf00      	nop
 810215c:	370c      	adds	r7, #12
 810215e:	46bd      	mov	sp, r7
 8102160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102164:	4770      	bx	lr
 8102166:	bf00      	nop
 8102168:	e000e100 	.word	0xe000e100

0810216c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810216c:	b480      	push	{r7}
 810216e:	b083      	sub	sp, #12
 8102170:	af00      	add	r7, sp, #0
 8102172:	4603      	mov	r3, r0
 8102174:	6039      	str	r1, [r7, #0]
 8102176:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810217c:	2b00      	cmp	r3, #0
 810217e:	db0a      	blt.n	8102196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102180:	683b      	ldr	r3, [r7, #0]
 8102182:	b2da      	uxtb	r2, r3
 8102184:	490c      	ldr	r1, [pc, #48]	; (81021b8 <__NVIC_SetPriority+0x4c>)
 8102186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810218a:	0112      	lsls	r2, r2, #4
 810218c:	b2d2      	uxtb	r2, r2
 810218e:	440b      	add	r3, r1
 8102190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102194:	e00a      	b.n	81021ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102196:	683b      	ldr	r3, [r7, #0]
 8102198:	b2da      	uxtb	r2, r3
 810219a:	4908      	ldr	r1, [pc, #32]	; (81021bc <__NVIC_SetPriority+0x50>)
 810219c:	88fb      	ldrh	r3, [r7, #6]
 810219e:	f003 030f 	and.w	r3, r3, #15
 81021a2:	3b04      	subs	r3, #4
 81021a4:	0112      	lsls	r2, r2, #4
 81021a6:	b2d2      	uxtb	r2, r2
 81021a8:	440b      	add	r3, r1
 81021aa:	761a      	strb	r2, [r3, #24]
}
 81021ac:	bf00      	nop
 81021ae:	370c      	adds	r7, #12
 81021b0:	46bd      	mov	sp, r7
 81021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b6:	4770      	bx	lr
 81021b8:	e000e100 	.word	0xe000e100
 81021bc:	e000ed00 	.word	0xe000ed00

081021c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81021c0:	b480      	push	{r7}
 81021c2:	b089      	sub	sp, #36	; 0x24
 81021c4:	af00      	add	r7, sp, #0
 81021c6:	60f8      	str	r0, [r7, #12]
 81021c8:	60b9      	str	r1, [r7, #8]
 81021ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81021cc:	68fb      	ldr	r3, [r7, #12]
 81021ce:	f003 0307 	and.w	r3, r3, #7
 81021d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81021d4:	69fb      	ldr	r3, [r7, #28]
 81021d6:	f1c3 0307 	rsb	r3, r3, #7
 81021da:	2b04      	cmp	r3, #4
 81021dc:	bf28      	it	cs
 81021de:	2304      	movcs	r3, #4
 81021e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81021e2:	69fb      	ldr	r3, [r7, #28]
 81021e4:	3304      	adds	r3, #4
 81021e6:	2b06      	cmp	r3, #6
 81021e8:	d902      	bls.n	81021f0 <NVIC_EncodePriority+0x30>
 81021ea:	69fb      	ldr	r3, [r7, #28]
 81021ec:	3b03      	subs	r3, #3
 81021ee:	e000      	b.n	81021f2 <NVIC_EncodePriority+0x32>
 81021f0:	2300      	movs	r3, #0
 81021f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81021f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81021f8:	69bb      	ldr	r3, [r7, #24]
 81021fa:	fa02 f303 	lsl.w	r3, r2, r3
 81021fe:	43da      	mvns	r2, r3
 8102200:	68bb      	ldr	r3, [r7, #8]
 8102202:	401a      	ands	r2, r3
 8102204:	697b      	ldr	r3, [r7, #20]
 8102206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 810220c:	697b      	ldr	r3, [r7, #20]
 810220e:	fa01 f303 	lsl.w	r3, r1, r3
 8102212:	43d9      	mvns	r1, r3
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102218:	4313      	orrs	r3, r2
         );
}
 810221a:	4618      	mov	r0, r3
 810221c:	3724      	adds	r7, #36	; 0x24
 810221e:	46bd      	mov	sp, r7
 8102220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102224:	4770      	bx	lr
	...

08102228 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8102228:	b480      	push	{r7}
 810222a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810222c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8102230:	4b05      	ldr	r3, [pc, #20]	; (8102248 <__NVIC_SystemReset+0x20>)
 8102232:	68db      	ldr	r3, [r3, #12]
 8102234:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8102238:	4903      	ldr	r1, [pc, #12]	; (8102248 <__NVIC_SystemReset+0x20>)
 810223a:	4b04      	ldr	r3, [pc, #16]	; (810224c <__NVIC_SystemReset+0x24>)
 810223c:	4313      	orrs	r3, r2
 810223e:	60cb      	str	r3, [r1, #12]
 8102240:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8102244:	bf00      	nop
 8102246:	e7fd      	b.n	8102244 <__NVIC_SystemReset+0x1c>
 8102248:	e000ed00 	.word	0xe000ed00
 810224c:	05fa0004 	.word	0x05fa0004

08102250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102250:	b580      	push	{r7, lr}
 8102252:	b082      	sub	sp, #8
 8102254:	af00      	add	r7, sp, #0
 8102256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102258:	6878      	ldr	r0, [r7, #4]
 810225a:	f7ff ff37 	bl	81020cc <__NVIC_SetPriorityGrouping>
}
 810225e:	bf00      	nop
 8102260:	3708      	adds	r7, #8
 8102262:	46bd      	mov	sp, r7
 8102264:	bd80      	pop	{r7, pc}

08102266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102266:	b580      	push	{r7, lr}
 8102268:	b086      	sub	sp, #24
 810226a:	af00      	add	r7, sp, #0
 810226c:	4603      	mov	r3, r0
 810226e:	60b9      	str	r1, [r7, #8]
 8102270:	607a      	str	r2, [r7, #4]
 8102272:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102274:	f7ff ff4e 	bl	8102114 <__NVIC_GetPriorityGrouping>
 8102278:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810227a:	687a      	ldr	r2, [r7, #4]
 810227c:	68b9      	ldr	r1, [r7, #8]
 810227e:	6978      	ldr	r0, [r7, #20]
 8102280:	f7ff ff9e 	bl	81021c0 <NVIC_EncodePriority>
 8102284:	4602      	mov	r2, r0
 8102286:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810228a:	4611      	mov	r1, r2
 810228c:	4618      	mov	r0, r3
 810228e:	f7ff ff6d 	bl	810216c <__NVIC_SetPriority>
}
 8102292:	bf00      	nop
 8102294:	3718      	adds	r7, #24
 8102296:	46bd      	mov	sp, r7
 8102298:	bd80      	pop	{r7, pc}

0810229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810229a:	b580      	push	{r7, lr}
 810229c:	b082      	sub	sp, #8
 810229e:	af00      	add	r7, sp, #0
 81022a0:	4603      	mov	r3, r0
 81022a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81022a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81022a8:	4618      	mov	r0, r3
 81022aa:	f7ff ff41 	bl	8102130 <__NVIC_EnableIRQ>
}
 81022ae:	bf00      	nop
 81022b0:	3708      	adds	r7, #8
 81022b2:	46bd      	mov	sp, r7
 81022b4:	bd80      	pop	{r7, pc}

081022b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 81022b6:	b580      	push	{r7, lr}
 81022b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 81022ba:	f7ff ffb5 	bl	8102228 <__NVIC_SystemReset>
	...

081022c0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81022c0:	b480      	push	{r7}
 81022c2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81022c4:	4b07      	ldr	r3, [pc, #28]	; (81022e4 <HAL_GetCurrentCPUID+0x24>)
 81022c6:	681b      	ldr	r3, [r3, #0]
 81022c8:	091b      	lsrs	r3, r3, #4
 81022ca:	f003 030f 	and.w	r3, r3, #15
 81022ce:	2b07      	cmp	r3, #7
 81022d0:	d101      	bne.n	81022d6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81022d2:	2303      	movs	r3, #3
 81022d4:	e000      	b.n	81022d8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81022d6:	2301      	movs	r3, #1
  }
}
 81022d8:	4618      	mov	r0, r3
 81022da:	46bd      	mov	sp, r7
 81022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e0:	4770      	bx	lr
 81022e2:	bf00      	nop
 81022e4:	e000ed00 	.word	0xe000ed00

081022e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81022e8:	b580      	push	{r7, lr}
 81022ea:	b086      	sub	sp, #24
 81022ec:	af00      	add	r7, sp, #0
 81022ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81022f0:	f7ff fee0 	bl	81020b4 <HAL_GetTick>
 81022f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	2b00      	cmp	r3, #0
 81022fa:	d101      	bne.n	8102300 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81022fc:	2301      	movs	r3, #1
 81022fe:	e314      	b.n	810292a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102300:	687b      	ldr	r3, [r7, #4]
 8102302:	681b      	ldr	r3, [r3, #0]
 8102304:	4a66      	ldr	r2, [pc, #408]	; (81024a0 <HAL_DMA_Init+0x1b8>)
 8102306:	4293      	cmp	r3, r2
 8102308:	d04a      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	681b      	ldr	r3, [r3, #0]
 810230e:	4a65      	ldr	r2, [pc, #404]	; (81024a4 <HAL_DMA_Init+0x1bc>)
 8102310:	4293      	cmp	r3, r2
 8102312:	d045      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	4a63      	ldr	r2, [pc, #396]	; (81024a8 <HAL_DMA_Init+0x1c0>)
 810231a:	4293      	cmp	r3, r2
 810231c:	d040      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	681b      	ldr	r3, [r3, #0]
 8102322:	4a62      	ldr	r2, [pc, #392]	; (81024ac <HAL_DMA_Init+0x1c4>)
 8102324:	4293      	cmp	r3, r2
 8102326:	d03b      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102328:	687b      	ldr	r3, [r7, #4]
 810232a:	681b      	ldr	r3, [r3, #0]
 810232c:	4a60      	ldr	r2, [pc, #384]	; (81024b0 <HAL_DMA_Init+0x1c8>)
 810232e:	4293      	cmp	r3, r2
 8102330:	d036      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	4a5f      	ldr	r2, [pc, #380]	; (81024b4 <HAL_DMA_Init+0x1cc>)
 8102338:	4293      	cmp	r3, r2
 810233a:	d031      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 810233c:	687b      	ldr	r3, [r7, #4]
 810233e:	681b      	ldr	r3, [r3, #0]
 8102340:	4a5d      	ldr	r2, [pc, #372]	; (81024b8 <HAL_DMA_Init+0x1d0>)
 8102342:	4293      	cmp	r3, r2
 8102344:	d02c      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	681b      	ldr	r3, [r3, #0]
 810234a:	4a5c      	ldr	r2, [pc, #368]	; (81024bc <HAL_DMA_Init+0x1d4>)
 810234c:	4293      	cmp	r3, r2
 810234e:	d027      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	681b      	ldr	r3, [r3, #0]
 8102354:	4a5a      	ldr	r2, [pc, #360]	; (81024c0 <HAL_DMA_Init+0x1d8>)
 8102356:	4293      	cmp	r3, r2
 8102358:	d022      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	681b      	ldr	r3, [r3, #0]
 810235e:	4a59      	ldr	r2, [pc, #356]	; (81024c4 <HAL_DMA_Init+0x1dc>)
 8102360:	4293      	cmp	r3, r2
 8102362:	d01d      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	4a57      	ldr	r2, [pc, #348]	; (81024c8 <HAL_DMA_Init+0x1e0>)
 810236a:	4293      	cmp	r3, r2
 810236c:	d018      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	681b      	ldr	r3, [r3, #0]
 8102372:	4a56      	ldr	r2, [pc, #344]	; (81024cc <HAL_DMA_Init+0x1e4>)
 8102374:	4293      	cmp	r3, r2
 8102376:	d013      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	681b      	ldr	r3, [r3, #0]
 810237c:	4a54      	ldr	r2, [pc, #336]	; (81024d0 <HAL_DMA_Init+0x1e8>)
 810237e:	4293      	cmp	r3, r2
 8102380:	d00e      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	4a53      	ldr	r2, [pc, #332]	; (81024d4 <HAL_DMA_Init+0x1ec>)
 8102388:	4293      	cmp	r3, r2
 810238a:	d009      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	4a51      	ldr	r2, [pc, #324]	; (81024d8 <HAL_DMA_Init+0x1f0>)
 8102392:	4293      	cmp	r3, r2
 8102394:	d004      	beq.n	81023a0 <HAL_DMA_Init+0xb8>
 8102396:	687b      	ldr	r3, [r7, #4]
 8102398:	681b      	ldr	r3, [r3, #0]
 810239a:	4a50      	ldr	r2, [pc, #320]	; (81024dc <HAL_DMA_Init+0x1f4>)
 810239c:	4293      	cmp	r3, r2
 810239e:	d101      	bne.n	81023a4 <HAL_DMA_Init+0xbc>
 81023a0:	2301      	movs	r3, #1
 81023a2:	e000      	b.n	81023a6 <HAL_DMA_Init+0xbe>
 81023a4:	2300      	movs	r3, #0
 81023a6:	2b00      	cmp	r3, #0
 81023a8:	f000 813b 	beq.w	8102622 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	2200      	movs	r2, #0
 81023b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	2202      	movs	r2, #2
 81023b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	4a37      	ldr	r2, [pc, #220]	; (81024a0 <HAL_DMA_Init+0x1b8>)
 81023c2:	4293      	cmp	r3, r2
 81023c4:	d04a      	beq.n	810245c <HAL_DMA_Init+0x174>
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	4a36      	ldr	r2, [pc, #216]	; (81024a4 <HAL_DMA_Init+0x1bc>)
 81023cc:	4293      	cmp	r3, r2
 81023ce:	d045      	beq.n	810245c <HAL_DMA_Init+0x174>
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	4a34      	ldr	r2, [pc, #208]	; (81024a8 <HAL_DMA_Init+0x1c0>)
 81023d6:	4293      	cmp	r3, r2
 81023d8:	d040      	beq.n	810245c <HAL_DMA_Init+0x174>
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	4a33      	ldr	r2, [pc, #204]	; (81024ac <HAL_DMA_Init+0x1c4>)
 81023e0:	4293      	cmp	r3, r2
 81023e2:	d03b      	beq.n	810245c <HAL_DMA_Init+0x174>
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	4a31      	ldr	r2, [pc, #196]	; (81024b0 <HAL_DMA_Init+0x1c8>)
 81023ea:	4293      	cmp	r3, r2
 81023ec:	d036      	beq.n	810245c <HAL_DMA_Init+0x174>
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	4a30      	ldr	r2, [pc, #192]	; (81024b4 <HAL_DMA_Init+0x1cc>)
 81023f4:	4293      	cmp	r3, r2
 81023f6:	d031      	beq.n	810245c <HAL_DMA_Init+0x174>
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	4a2e      	ldr	r2, [pc, #184]	; (81024b8 <HAL_DMA_Init+0x1d0>)
 81023fe:	4293      	cmp	r3, r2
 8102400:	d02c      	beq.n	810245c <HAL_DMA_Init+0x174>
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	681b      	ldr	r3, [r3, #0]
 8102406:	4a2d      	ldr	r2, [pc, #180]	; (81024bc <HAL_DMA_Init+0x1d4>)
 8102408:	4293      	cmp	r3, r2
 810240a:	d027      	beq.n	810245c <HAL_DMA_Init+0x174>
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	4a2b      	ldr	r2, [pc, #172]	; (81024c0 <HAL_DMA_Init+0x1d8>)
 8102412:	4293      	cmp	r3, r2
 8102414:	d022      	beq.n	810245c <HAL_DMA_Init+0x174>
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4a2a      	ldr	r2, [pc, #168]	; (81024c4 <HAL_DMA_Init+0x1dc>)
 810241c:	4293      	cmp	r3, r2
 810241e:	d01d      	beq.n	810245c <HAL_DMA_Init+0x174>
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	4a28      	ldr	r2, [pc, #160]	; (81024c8 <HAL_DMA_Init+0x1e0>)
 8102426:	4293      	cmp	r3, r2
 8102428:	d018      	beq.n	810245c <HAL_DMA_Init+0x174>
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	681b      	ldr	r3, [r3, #0]
 810242e:	4a27      	ldr	r2, [pc, #156]	; (81024cc <HAL_DMA_Init+0x1e4>)
 8102430:	4293      	cmp	r3, r2
 8102432:	d013      	beq.n	810245c <HAL_DMA_Init+0x174>
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	4a25      	ldr	r2, [pc, #148]	; (81024d0 <HAL_DMA_Init+0x1e8>)
 810243a:	4293      	cmp	r3, r2
 810243c:	d00e      	beq.n	810245c <HAL_DMA_Init+0x174>
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	681b      	ldr	r3, [r3, #0]
 8102442:	4a24      	ldr	r2, [pc, #144]	; (81024d4 <HAL_DMA_Init+0x1ec>)
 8102444:	4293      	cmp	r3, r2
 8102446:	d009      	beq.n	810245c <HAL_DMA_Init+0x174>
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	4a22      	ldr	r2, [pc, #136]	; (81024d8 <HAL_DMA_Init+0x1f0>)
 810244e:	4293      	cmp	r3, r2
 8102450:	d004      	beq.n	810245c <HAL_DMA_Init+0x174>
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	4a21      	ldr	r2, [pc, #132]	; (81024dc <HAL_DMA_Init+0x1f4>)
 8102458:	4293      	cmp	r3, r2
 810245a:	d108      	bne.n	810246e <HAL_DMA_Init+0x186>
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	681a      	ldr	r2, [r3, #0]
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	f022 0201 	bic.w	r2, r2, #1
 810246a:	601a      	str	r2, [r3, #0]
 810246c:	e007      	b.n	810247e <HAL_DMA_Init+0x196>
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	681b      	ldr	r3, [r3, #0]
 8102472:	681a      	ldr	r2, [r3, #0]
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	681b      	ldr	r3, [r3, #0]
 8102478:	f022 0201 	bic.w	r2, r2, #1
 810247c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810247e:	e02f      	b.n	81024e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102480:	f7ff fe18 	bl	81020b4 <HAL_GetTick>
 8102484:	4602      	mov	r2, r0
 8102486:	693b      	ldr	r3, [r7, #16]
 8102488:	1ad3      	subs	r3, r2, r3
 810248a:	2b05      	cmp	r3, #5
 810248c:	d928      	bls.n	81024e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	2220      	movs	r2, #32
 8102492:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	2203      	movs	r2, #3
 8102498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 810249c:	2301      	movs	r3, #1
 810249e:	e244      	b.n	810292a <HAL_DMA_Init+0x642>
 81024a0:	40020010 	.word	0x40020010
 81024a4:	40020028 	.word	0x40020028
 81024a8:	40020040 	.word	0x40020040
 81024ac:	40020058 	.word	0x40020058
 81024b0:	40020070 	.word	0x40020070
 81024b4:	40020088 	.word	0x40020088
 81024b8:	400200a0 	.word	0x400200a0
 81024bc:	400200b8 	.word	0x400200b8
 81024c0:	40020410 	.word	0x40020410
 81024c4:	40020428 	.word	0x40020428
 81024c8:	40020440 	.word	0x40020440
 81024cc:	40020458 	.word	0x40020458
 81024d0:	40020470 	.word	0x40020470
 81024d4:	40020488 	.word	0x40020488
 81024d8:	400204a0 	.word	0x400204a0
 81024dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	681b      	ldr	r3, [r3, #0]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	f003 0301 	and.w	r3, r3, #1
 81024ea:	2b00      	cmp	r3, #0
 81024ec:	d1c8      	bne.n	8102480 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81024f6:	697a      	ldr	r2, [r7, #20]
 81024f8:	4b84      	ldr	r3, [pc, #528]	; (810270c <HAL_DMA_Init+0x424>)
 81024fa:	4013      	ands	r3, r2
 81024fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102506:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	691b      	ldr	r3, [r3, #16]
 810250c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102512:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	699b      	ldr	r3, [r3, #24]
 8102518:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810251a:	687b      	ldr	r3, [r7, #4]
 810251c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810251e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	6a1b      	ldr	r3, [r3, #32]
 8102524:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102526:	697a      	ldr	r2, [r7, #20]
 8102528:	4313      	orrs	r3, r2
 810252a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102530:	2b04      	cmp	r3, #4
 8102532:	d107      	bne.n	8102544 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810253c:	4313      	orrs	r3, r2
 810253e:	697a      	ldr	r2, [r7, #20]
 8102540:	4313      	orrs	r3, r2
 8102542:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102544:	4b72      	ldr	r3, [pc, #456]	; (8102710 <HAL_DMA_Init+0x428>)
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	0c1b      	lsrs	r3, r3, #16
 810254a:	041b      	lsls	r3, r3, #16
 810254c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102550:	d328      	bcc.n	81025a4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	685b      	ldr	r3, [r3, #4]
 8102556:	2b28      	cmp	r3, #40	; 0x28
 8102558:	d903      	bls.n	8102562 <HAL_DMA_Init+0x27a>
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	685b      	ldr	r3, [r3, #4]
 810255e:	2b2e      	cmp	r3, #46	; 0x2e
 8102560:	d917      	bls.n	8102592 <HAL_DMA_Init+0x2aa>
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	685b      	ldr	r3, [r3, #4]
 8102566:	2b3e      	cmp	r3, #62	; 0x3e
 8102568:	d903      	bls.n	8102572 <HAL_DMA_Init+0x28a>
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	685b      	ldr	r3, [r3, #4]
 810256e:	2b42      	cmp	r3, #66	; 0x42
 8102570:	d90f      	bls.n	8102592 <HAL_DMA_Init+0x2aa>
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	685b      	ldr	r3, [r3, #4]
 8102576:	2b46      	cmp	r3, #70	; 0x46
 8102578:	d903      	bls.n	8102582 <HAL_DMA_Init+0x29a>
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	685b      	ldr	r3, [r3, #4]
 810257e:	2b48      	cmp	r3, #72	; 0x48
 8102580:	d907      	bls.n	8102592 <HAL_DMA_Init+0x2aa>
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	685b      	ldr	r3, [r3, #4]
 8102586:	2b4e      	cmp	r3, #78	; 0x4e
 8102588:	d905      	bls.n	8102596 <HAL_DMA_Init+0x2ae>
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	685b      	ldr	r3, [r3, #4]
 810258e:	2b52      	cmp	r3, #82	; 0x52
 8102590:	d801      	bhi.n	8102596 <HAL_DMA_Init+0x2ae>
 8102592:	2301      	movs	r3, #1
 8102594:	e000      	b.n	8102598 <HAL_DMA_Init+0x2b0>
 8102596:	2300      	movs	r3, #0
 8102598:	2b00      	cmp	r3, #0
 810259a:	d003      	beq.n	81025a4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 810259c:	697b      	ldr	r3, [r7, #20]
 810259e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81025a2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	697a      	ldr	r2, [r7, #20]
 81025aa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81025ac:	687b      	ldr	r3, [r7, #4]
 81025ae:	681b      	ldr	r3, [r3, #0]
 81025b0:	695b      	ldr	r3, [r3, #20]
 81025b2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81025b4:	697b      	ldr	r3, [r7, #20]
 81025b6:	f023 0307 	bic.w	r3, r3, #7
 81025ba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81025c0:	697a      	ldr	r2, [r7, #20]
 81025c2:	4313      	orrs	r3, r2
 81025c4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81025ca:	2b04      	cmp	r3, #4
 81025cc:	d117      	bne.n	81025fe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81025d2:	697a      	ldr	r2, [r7, #20]
 81025d4:	4313      	orrs	r3, r2
 81025d6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025dc:	2b00      	cmp	r3, #0
 81025de:	d00e      	beq.n	81025fe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81025e0:	6878      	ldr	r0, [r7, #4]
 81025e2:	f002 f811 	bl	8104608 <DMA_CheckFifoParam>
 81025e6:	4603      	mov	r3, r0
 81025e8:	2b00      	cmp	r3, #0
 81025ea:	d008      	beq.n	81025fe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	2240      	movs	r2, #64	; 0x40
 81025f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	2201      	movs	r2, #1
 81025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81025fa:	2301      	movs	r3, #1
 81025fc:	e195      	b.n	810292a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	681b      	ldr	r3, [r3, #0]
 8102602:	697a      	ldr	r2, [r7, #20]
 8102604:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102606:	6878      	ldr	r0, [r7, #4]
 8102608:	f001 ff4c 	bl	81044a4 <DMA_CalcBaseAndBitshift>
 810260c:	4603      	mov	r3, r0
 810260e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102614:	f003 031f 	and.w	r3, r3, #31
 8102618:	223f      	movs	r2, #63	; 0x3f
 810261a:	409a      	lsls	r2, r3
 810261c:	68bb      	ldr	r3, [r7, #8]
 810261e:	609a      	str	r2, [r3, #8]
 8102620:	e0cb      	b.n	81027ba <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	681b      	ldr	r3, [r3, #0]
 8102626:	4a3b      	ldr	r2, [pc, #236]	; (8102714 <HAL_DMA_Init+0x42c>)
 8102628:	4293      	cmp	r3, r2
 810262a:	d022      	beq.n	8102672 <HAL_DMA_Init+0x38a>
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	4a39      	ldr	r2, [pc, #228]	; (8102718 <HAL_DMA_Init+0x430>)
 8102632:	4293      	cmp	r3, r2
 8102634:	d01d      	beq.n	8102672 <HAL_DMA_Init+0x38a>
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	4a38      	ldr	r2, [pc, #224]	; (810271c <HAL_DMA_Init+0x434>)
 810263c:	4293      	cmp	r3, r2
 810263e:	d018      	beq.n	8102672 <HAL_DMA_Init+0x38a>
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	4a36      	ldr	r2, [pc, #216]	; (8102720 <HAL_DMA_Init+0x438>)
 8102646:	4293      	cmp	r3, r2
 8102648:	d013      	beq.n	8102672 <HAL_DMA_Init+0x38a>
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	681b      	ldr	r3, [r3, #0]
 810264e:	4a35      	ldr	r2, [pc, #212]	; (8102724 <HAL_DMA_Init+0x43c>)
 8102650:	4293      	cmp	r3, r2
 8102652:	d00e      	beq.n	8102672 <HAL_DMA_Init+0x38a>
 8102654:	687b      	ldr	r3, [r7, #4]
 8102656:	681b      	ldr	r3, [r3, #0]
 8102658:	4a33      	ldr	r2, [pc, #204]	; (8102728 <HAL_DMA_Init+0x440>)
 810265a:	4293      	cmp	r3, r2
 810265c:	d009      	beq.n	8102672 <HAL_DMA_Init+0x38a>
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	4a32      	ldr	r2, [pc, #200]	; (810272c <HAL_DMA_Init+0x444>)
 8102664:	4293      	cmp	r3, r2
 8102666:	d004      	beq.n	8102672 <HAL_DMA_Init+0x38a>
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	4a30      	ldr	r2, [pc, #192]	; (8102730 <HAL_DMA_Init+0x448>)
 810266e:	4293      	cmp	r3, r2
 8102670:	d101      	bne.n	8102676 <HAL_DMA_Init+0x38e>
 8102672:	2301      	movs	r3, #1
 8102674:	e000      	b.n	8102678 <HAL_DMA_Init+0x390>
 8102676:	2300      	movs	r3, #0
 8102678:	2b00      	cmp	r3, #0
 810267a:	f000 8095 	beq.w	81027a8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	4a24      	ldr	r2, [pc, #144]	; (8102714 <HAL_DMA_Init+0x42c>)
 8102684:	4293      	cmp	r3, r2
 8102686:	d021      	beq.n	81026cc <HAL_DMA_Init+0x3e4>
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	4a22      	ldr	r2, [pc, #136]	; (8102718 <HAL_DMA_Init+0x430>)
 810268e:	4293      	cmp	r3, r2
 8102690:	d01c      	beq.n	81026cc <HAL_DMA_Init+0x3e4>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	4a21      	ldr	r2, [pc, #132]	; (810271c <HAL_DMA_Init+0x434>)
 8102698:	4293      	cmp	r3, r2
 810269a:	d017      	beq.n	81026cc <HAL_DMA_Init+0x3e4>
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	4a1f      	ldr	r2, [pc, #124]	; (8102720 <HAL_DMA_Init+0x438>)
 81026a2:	4293      	cmp	r3, r2
 81026a4:	d012      	beq.n	81026cc <HAL_DMA_Init+0x3e4>
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	4a1e      	ldr	r2, [pc, #120]	; (8102724 <HAL_DMA_Init+0x43c>)
 81026ac:	4293      	cmp	r3, r2
 81026ae:	d00d      	beq.n	81026cc <HAL_DMA_Init+0x3e4>
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	4a1c      	ldr	r2, [pc, #112]	; (8102728 <HAL_DMA_Init+0x440>)
 81026b6:	4293      	cmp	r3, r2
 81026b8:	d008      	beq.n	81026cc <HAL_DMA_Init+0x3e4>
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	4a1b      	ldr	r2, [pc, #108]	; (810272c <HAL_DMA_Init+0x444>)
 81026c0:	4293      	cmp	r3, r2
 81026c2:	d003      	beq.n	81026cc <HAL_DMA_Init+0x3e4>
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	4a19      	ldr	r2, [pc, #100]	; (8102730 <HAL_DMA_Init+0x448>)
 81026ca:	4293      	cmp	r3, r2
 81026cc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	2200      	movs	r2, #0
 81026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	2202      	movs	r2, #2
 81026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	681b      	ldr	r3, [r3, #0]
 81026e2:	681b      	ldr	r3, [r3, #0]
 81026e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81026e6:	697b      	ldr	r3, [r7, #20]
 81026e8:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81026ec:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81026f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	689b      	ldr	r3, [r3, #8]
 81026f6:	2b40      	cmp	r3, #64	; 0x40
 81026f8:	d01c      	beq.n	8102734 <HAL_DMA_Init+0x44c>
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	689b      	ldr	r3, [r3, #8]
 81026fe:	2b80      	cmp	r3, #128	; 0x80
 8102700:	d102      	bne.n	8102708 <HAL_DMA_Init+0x420>
 8102702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102706:	e016      	b.n	8102736 <HAL_DMA_Init+0x44e>
 8102708:	2300      	movs	r3, #0
 810270a:	e014      	b.n	8102736 <HAL_DMA_Init+0x44e>
 810270c:	fe10803f 	.word	0xfe10803f
 8102710:	5c001000 	.word	0x5c001000
 8102714:	58025408 	.word	0x58025408
 8102718:	5802541c 	.word	0x5802541c
 810271c:	58025430 	.word	0x58025430
 8102720:	58025444 	.word	0x58025444
 8102724:	58025458 	.word	0x58025458
 8102728:	5802546c 	.word	0x5802546c
 810272c:	58025480 	.word	0x58025480
 8102730:	58025494 	.word	0x58025494
 8102734:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102736:	687a      	ldr	r2, [r7, #4]
 8102738:	68d2      	ldr	r2, [r2, #12]
 810273a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810273c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	691b      	ldr	r3, [r3, #16]
 8102742:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102744:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	695b      	ldr	r3, [r3, #20]
 810274a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810274c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	699b      	ldr	r3, [r3, #24]
 8102752:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	69db      	ldr	r3, [r3, #28]
 810275a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810275c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	6a1b      	ldr	r3, [r3, #32]
 8102762:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102764:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102766:	697a      	ldr	r2, [r7, #20]
 8102768:	4313      	orrs	r3, r2
 810276a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	681b      	ldr	r3, [r3, #0]
 8102770:	697a      	ldr	r2, [r7, #20]
 8102772:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	681b      	ldr	r3, [r3, #0]
 8102778:	461a      	mov	r2, r3
 810277a:	4b6e      	ldr	r3, [pc, #440]	; (8102934 <HAL_DMA_Init+0x64c>)
 810277c:	4413      	add	r3, r2
 810277e:	4a6e      	ldr	r2, [pc, #440]	; (8102938 <HAL_DMA_Init+0x650>)
 8102780:	fba2 2303 	umull	r2, r3, r2, r3
 8102784:	091b      	lsrs	r3, r3, #4
 8102786:	009a      	lsls	r2, r3, #2
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810278c:	6878      	ldr	r0, [r7, #4]
 810278e:	f001 fe89 	bl	81044a4 <DMA_CalcBaseAndBitshift>
 8102792:	4603      	mov	r3, r0
 8102794:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810279a:	f003 031f 	and.w	r3, r3, #31
 810279e:	2201      	movs	r2, #1
 81027a0:	409a      	lsls	r2, r3
 81027a2:	68fb      	ldr	r3, [r7, #12]
 81027a4:	605a      	str	r2, [r3, #4]
 81027a6:	e008      	b.n	81027ba <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	2240      	movs	r2, #64	; 0x40
 81027ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	2203      	movs	r2, #3
 81027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81027b6:	2301      	movs	r3, #1
 81027b8:	e0b7      	b.n	810292a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	681b      	ldr	r3, [r3, #0]
 81027be:	4a5f      	ldr	r2, [pc, #380]	; (810293c <HAL_DMA_Init+0x654>)
 81027c0:	4293      	cmp	r3, r2
 81027c2:	d072      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 81027c4:	687b      	ldr	r3, [r7, #4]
 81027c6:	681b      	ldr	r3, [r3, #0]
 81027c8:	4a5d      	ldr	r2, [pc, #372]	; (8102940 <HAL_DMA_Init+0x658>)
 81027ca:	4293      	cmp	r3, r2
 81027cc:	d06d      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 81027ce:	687b      	ldr	r3, [r7, #4]
 81027d0:	681b      	ldr	r3, [r3, #0]
 81027d2:	4a5c      	ldr	r2, [pc, #368]	; (8102944 <HAL_DMA_Init+0x65c>)
 81027d4:	4293      	cmp	r3, r2
 81027d6:	d068      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	681b      	ldr	r3, [r3, #0]
 81027dc:	4a5a      	ldr	r2, [pc, #360]	; (8102948 <HAL_DMA_Init+0x660>)
 81027de:	4293      	cmp	r3, r2
 81027e0:	d063      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	681b      	ldr	r3, [r3, #0]
 81027e6:	4a59      	ldr	r2, [pc, #356]	; (810294c <HAL_DMA_Init+0x664>)
 81027e8:	4293      	cmp	r3, r2
 81027ea:	d05e      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	4a57      	ldr	r2, [pc, #348]	; (8102950 <HAL_DMA_Init+0x668>)
 81027f2:	4293      	cmp	r3, r2
 81027f4:	d059      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 81027f6:	687b      	ldr	r3, [r7, #4]
 81027f8:	681b      	ldr	r3, [r3, #0]
 81027fa:	4a56      	ldr	r2, [pc, #344]	; (8102954 <HAL_DMA_Init+0x66c>)
 81027fc:	4293      	cmp	r3, r2
 81027fe:	d054      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	4a54      	ldr	r2, [pc, #336]	; (8102958 <HAL_DMA_Init+0x670>)
 8102806:	4293      	cmp	r3, r2
 8102808:	d04f      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	681b      	ldr	r3, [r3, #0]
 810280e:	4a53      	ldr	r2, [pc, #332]	; (810295c <HAL_DMA_Init+0x674>)
 8102810:	4293      	cmp	r3, r2
 8102812:	d04a      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102814:	687b      	ldr	r3, [r7, #4]
 8102816:	681b      	ldr	r3, [r3, #0]
 8102818:	4a51      	ldr	r2, [pc, #324]	; (8102960 <HAL_DMA_Init+0x678>)
 810281a:	4293      	cmp	r3, r2
 810281c:	d045      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	681b      	ldr	r3, [r3, #0]
 8102822:	4a50      	ldr	r2, [pc, #320]	; (8102964 <HAL_DMA_Init+0x67c>)
 8102824:	4293      	cmp	r3, r2
 8102826:	d040      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	4a4e      	ldr	r2, [pc, #312]	; (8102968 <HAL_DMA_Init+0x680>)
 810282e:	4293      	cmp	r3, r2
 8102830:	d03b      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	4a4d      	ldr	r2, [pc, #308]	; (810296c <HAL_DMA_Init+0x684>)
 8102838:	4293      	cmp	r3, r2
 810283a:	d036      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	681b      	ldr	r3, [r3, #0]
 8102840:	4a4b      	ldr	r2, [pc, #300]	; (8102970 <HAL_DMA_Init+0x688>)
 8102842:	4293      	cmp	r3, r2
 8102844:	d031      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	4a4a      	ldr	r2, [pc, #296]	; (8102974 <HAL_DMA_Init+0x68c>)
 810284c:	4293      	cmp	r3, r2
 810284e:	d02c      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	4a48      	ldr	r2, [pc, #288]	; (8102978 <HAL_DMA_Init+0x690>)
 8102856:	4293      	cmp	r3, r2
 8102858:	d027      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	681b      	ldr	r3, [r3, #0]
 810285e:	4a47      	ldr	r2, [pc, #284]	; (810297c <HAL_DMA_Init+0x694>)
 8102860:	4293      	cmp	r3, r2
 8102862:	d022      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	4a45      	ldr	r2, [pc, #276]	; (8102980 <HAL_DMA_Init+0x698>)
 810286a:	4293      	cmp	r3, r2
 810286c:	d01d      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	4a44      	ldr	r2, [pc, #272]	; (8102984 <HAL_DMA_Init+0x69c>)
 8102874:	4293      	cmp	r3, r2
 8102876:	d018      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	681b      	ldr	r3, [r3, #0]
 810287c:	4a42      	ldr	r2, [pc, #264]	; (8102988 <HAL_DMA_Init+0x6a0>)
 810287e:	4293      	cmp	r3, r2
 8102880:	d013      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	4a41      	ldr	r2, [pc, #260]	; (810298c <HAL_DMA_Init+0x6a4>)
 8102888:	4293      	cmp	r3, r2
 810288a:	d00e      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	4a3f      	ldr	r2, [pc, #252]	; (8102990 <HAL_DMA_Init+0x6a8>)
 8102892:	4293      	cmp	r3, r2
 8102894:	d009      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	4a3e      	ldr	r2, [pc, #248]	; (8102994 <HAL_DMA_Init+0x6ac>)
 810289c:	4293      	cmp	r3, r2
 810289e:	d004      	beq.n	81028aa <HAL_DMA_Init+0x5c2>
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	4a3c      	ldr	r2, [pc, #240]	; (8102998 <HAL_DMA_Init+0x6b0>)
 81028a6:	4293      	cmp	r3, r2
 81028a8:	d101      	bne.n	81028ae <HAL_DMA_Init+0x5c6>
 81028aa:	2301      	movs	r3, #1
 81028ac:	e000      	b.n	81028b0 <HAL_DMA_Init+0x5c8>
 81028ae:	2300      	movs	r3, #0
 81028b0:	2b00      	cmp	r3, #0
 81028b2:	d032      	beq.n	810291a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81028b4:	6878      	ldr	r0, [r7, #4]
 81028b6:	f001 ff23 	bl	8104700 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	689b      	ldr	r3, [r3, #8]
 81028be:	2b80      	cmp	r3, #128	; 0x80
 81028c0:	d102      	bne.n	81028c8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	2200      	movs	r2, #0
 81028c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	685a      	ldr	r2, [r3, #4]
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81028d0:	b2d2      	uxtb	r2, r2
 81028d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81028d8:	687a      	ldr	r2, [r7, #4]
 81028da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81028dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	685b      	ldr	r3, [r3, #4]
 81028e2:	2b00      	cmp	r3, #0
 81028e4:	d010      	beq.n	8102908 <HAL_DMA_Init+0x620>
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	685b      	ldr	r3, [r3, #4]
 81028ea:	2b08      	cmp	r3, #8
 81028ec:	d80c      	bhi.n	8102908 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81028ee:	6878      	ldr	r0, [r7, #4]
 81028f0:	f001 ffa0 	bl	8104834 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81028f8:	2200      	movs	r2, #0
 81028fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102900:	687a      	ldr	r2, [r7, #4]
 8102902:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102904:	605a      	str	r2, [r3, #4]
 8102906:	e008      	b.n	810291a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	2200      	movs	r2, #0
 810290c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	2200      	movs	r2, #0
 8102912:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	2200      	movs	r2, #0
 8102918:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	2200      	movs	r2, #0
 810291e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	2201      	movs	r2, #1
 8102924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102928:	2300      	movs	r3, #0
}
 810292a:	4618      	mov	r0, r3
 810292c:	3718      	adds	r7, #24
 810292e:	46bd      	mov	sp, r7
 8102930:	bd80      	pop	{r7, pc}
 8102932:	bf00      	nop
 8102934:	a7fdabf8 	.word	0xa7fdabf8
 8102938:	cccccccd 	.word	0xcccccccd
 810293c:	40020010 	.word	0x40020010
 8102940:	40020028 	.word	0x40020028
 8102944:	40020040 	.word	0x40020040
 8102948:	40020058 	.word	0x40020058
 810294c:	40020070 	.word	0x40020070
 8102950:	40020088 	.word	0x40020088
 8102954:	400200a0 	.word	0x400200a0
 8102958:	400200b8 	.word	0x400200b8
 810295c:	40020410 	.word	0x40020410
 8102960:	40020428 	.word	0x40020428
 8102964:	40020440 	.word	0x40020440
 8102968:	40020458 	.word	0x40020458
 810296c:	40020470 	.word	0x40020470
 8102970:	40020488 	.word	0x40020488
 8102974:	400204a0 	.word	0x400204a0
 8102978:	400204b8 	.word	0x400204b8
 810297c:	58025408 	.word	0x58025408
 8102980:	5802541c 	.word	0x5802541c
 8102984:	58025430 	.word	0x58025430
 8102988:	58025444 	.word	0x58025444
 810298c:	58025458 	.word	0x58025458
 8102990:	5802546c 	.word	0x5802546c
 8102994:	58025480 	.word	0x58025480
 8102998:	58025494 	.word	0x58025494

0810299c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810299c:	b580      	push	{r7, lr}
 810299e:	b086      	sub	sp, #24
 81029a0:	af00      	add	r7, sp, #0
 81029a2:	60f8      	str	r0, [r7, #12]
 81029a4:	60b9      	str	r1, [r7, #8]
 81029a6:	607a      	str	r2, [r7, #4]
 81029a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81029aa:	2300      	movs	r3, #0
 81029ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81029ae:	68fb      	ldr	r3, [r7, #12]
 81029b0:	2b00      	cmp	r3, #0
 81029b2:	d101      	bne.n	81029b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 81029b4:	2301      	movs	r3, #1
 81029b6:	e226      	b.n	8102e06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 81029b8:	68fb      	ldr	r3, [r7, #12]
 81029ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 81029be:	2b01      	cmp	r3, #1
 81029c0:	d101      	bne.n	81029c6 <HAL_DMA_Start_IT+0x2a>
 81029c2:	2302      	movs	r3, #2
 81029c4:	e21f      	b.n	8102e06 <HAL_DMA_Start_IT+0x46a>
 81029c6:	68fb      	ldr	r3, [r7, #12]
 81029c8:	2201      	movs	r2, #1
 81029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81029ce:	68fb      	ldr	r3, [r7, #12]
 81029d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81029d4:	b2db      	uxtb	r3, r3
 81029d6:	2b01      	cmp	r3, #1
 81029d8:	f040 820a 	bne.w	8102df0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81029dc:	68fb      	ldr	r3, [r7, #12]
 81029de:	2202      	movs	r2, #2
 81029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81029e4:	68fb      	ldr	r3, [r7, #12]
 81029e6:	2200      	movs	r2, #0
 81029e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81029ea:	68fb      	ldr	r3, [r7, #12]
 81029ec:	681b      	ldr	r3, [r3, #0]
 81029ee:	4a68      	ldr	r2, [pc, #416]	; (8102b90 <HAL_DMA_Start_IT+0x1f4>)
 81029f0:	4293      	cmp	r3, r2
 81029f2:	d04a      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 81029f4:	68fb      	ldr	r3, [r7, #12]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	4a66      	ldr	r2, [pc, #408]	; (8102b94 <HAL_DMA_Start_IT+0x1f8>)
 81029fa:	4293      	cmp	r3, r2
 81029fc:	d045      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 81029fe:	68fb      	ldr	r3, [r7, #12]
 8102a00:	681b      	ldr	r3, [r3, #0]
 8102a02:	4a65      	ldr	r2, [pc, #404]	; (8102b98 <HAL_DMA_Start_IT+0x1fc>)
 8102a04:	4293      	cmp	r3, r2
 8102a06:	d040      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a08:	68fb      	ldr	r3, [r7, #12]
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	4a63      	ldr	r2, [pc, #396]	; (8102b9c <HAL_DMA_Start_IT+0x200>)
 8102a0e:	4293      	cmp	r3, r2
 8102a10:	d03b      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a12:	68fb      	ldr	r3, [r7, #12]
 8102a14:	681b      	ldr	r3, [r3, #0]
 8102a16:	4a62      	ldr	r2, [pc, #392]	; (8102ba0 <HAL_DMA_Start_IT+0x204>)
 8102a18:	4293      	cmp	r3, r2
 8102a1a:	d036      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a1c:	68fb      	ldr	r3, [r7, #12]
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	4a60      	ldr	r2, [pc, #384]	; (8102ba4 <HAL_DMA_Start_IT+0x208>)
 8102a22:	4293      	cmp	r3, r2
 8102a24:	d031      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a26:	68fb      	ldr	r3, [r7, #12]
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	4a5f      	ldr	r2, [pc, #380]	; (8102ba8 <HAL_DMA_Start_IT+0x20c>)
 8102a2c:	4293      	cmp	r3, r2
 8102a2e:	d02c      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a30:	68fb      	ldr	r3, [r7, #12]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	4a5d      	ldr	r2, [pc, #372]	; (8102bac <HAL_DMA_Start_IT+0x210>)
 8102a36:	4293      	cmp	r3, r2
 8102a38:	d027      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a3a:	68fb      	ldr	r3, [r7, #12]
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	4a5c      	ldr	r2, [pc, #368]	; (8102bb0 <HAL_DMA_Start_IT+0x214>)
 8102a40:	4293      	cmp	r3, r2
 8102a42:	d022      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a44:	68fb      	ldr	r3, [r7, #12]
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	4a5a      	ldr	r2, [pc, #360]	; (8102bb4 <HAL_DMA_Start_IT+0x218>)
 8102a4a:	4293      	cmp	r3, r2
 8102a4c:	d01d      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a4e:	68fb      	ldr	r3, [r7, #12]
 8102a50:	681b      	ldr	r3, [r3, #0]
 8102a52:	4a59      	ldr	r2, [pc, #356]	; (8102bb8 <HAL_DMA_Start_IT+0x21c>)
 8102a54:	4293      	cmp	r3, r2
 8102a56:	d018      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a58:	68fb      	ldr	r3, [r7, #12]
 8102a5a:	681b      	ldr	r3, [r3, #0]
 8102a5c:	4a57      	ldr	r2, [pc, #348]	; (8102bbc <HAL_DMA_Start_IT+0x220>)
 8102a5e:	4293      	cmp	r3, r2
 8102a60:	d013      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a62:	68fb      	ldr	r3, [r7, #12]
 8102a64:	681b      	ldr	r3, [r3, #0]
 8102a66:	4a56      	ldr	r2, [pc, #344]	; (8102bc0 <HAL_DMA_Start_IT+0x224>)
 8102a68:	4293      	cmp	r3, r2
 8102a6a:	d00e      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a6c:	68fb      	ldr	r3, [r7, #12]
 8102a6e:	681b      	ldr	r3, [r3, #0]
 8102a70:	4a54      	ldr	r2, [pc, #336]	; (8102bc4 <HAL_DMA_Start_IT+0x228>)
 8102a72:	4293      	cmp	r3, r2
 8102a74:	d009      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a76:	68fb      	ldr	r3, [r7, #12]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	4a53      	ldr	r2, [pc, #332]	; (8102bc8 <HAL_DMA_Start_IT+0x22c>)
 8102a7c:	4293      	cmp	r3, r2
 8102a7e:	d004      	beq.n	8102a8a <HAL_DMA_Start_IT+0xee>
 8102a80:	68fb      	ldr	r3, [r7, #12]
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	4a51      	ldr	r2, [pc, #324]	; (8102bcc <HAL_DMA_Start_IT+0x230>)
 8102a86:	4293      	cmp	r3, r2
 8102a88:	d108      	bne.n	8102a9c <HAL_DMA_Start_IT+0x100>
 8102a8a:	68fb      	ldr	r3, [r7, #12]
 8102a8c:	681b      	ldr	r3, [r3, #0]
 8102a8e:	681a      	ldr	r2, [r3, #0]
 8102a90:	68fb      	ldr	r3, [r7, #12]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	f022 0201 	bic.w	r2, r2, #1
 8102a98:	601a      	str	r2, [r3, #0]
 8102a9a:	e007      	b.n	8102aac <HAL_DMA_Start_IT+0x110>
 8102a9c:	68fb      	ldr	r3, [r7, #12]
 8102a9e:	681b      	ldr	r3, [r3, #0]
 8102aa0:	681a      	ldr	r2, [r3, #0]
 8102aa2:	68fb      	ldr	r3, [r7, #12]
 8102aa4:	681b      	ldr	r3, [r3, #0]
 8102aa6:	f022 0201 	bic.w	r2, r2, #1
 8102aaa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102aac:	683b      	ldr	r3, [r7, #0]
 8102aae:	687a      	ldr	r2, [r7, #4]
 8102ab0:	68b9      	ldr	r1, [r7, #8]
 8102ab2:	68f8      	ldr	r0, [r7, #12]
 8102ab4:	f001 fb4a 	bl	810414c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102ab8:	68fb      	ldr	r3, [r7, #12]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	4a34      	ldr	r2, [pc, #208]	; (8102b90 <HAL_DMA_Start_IT+0x1f4>)
 8102abe:	4293      	cmp	r3, r2
 8102ac0:	d04a      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102ac2:	68fb      	ldr	r3, [r7, #12]
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	4a33      	ldr	r2, [pc, #204]	; (8102b94 <HAL_DMA_Start_IT+0x1f8>)
 8102ac8:	4293      	cmp	r3, r2
 8102aca:	d045      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102acc:	68fb      	ldr	r3, [r7, #12]
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	4a31      	ldr	r2, [pc, #196]	; (8102b98 <HAL_DMA_Start_IT+0x1fc>)
 8102ad2:	4293      	cmp	r3, r2
 8102ad4:	d040      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102ad6:	68fb      	ldr	r3, [r7, #12]
 8102ad8:	681b      	ldr	r3, [r3, #0]
 8102ada:	4a30      	ldr	r2, [pc, #192]	; (8102b9c <HAL_DMA_Start_IT+0x200>)
 8102adc:	4293      	cmp	r3, r2
 8102ade:	d03b      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102ae0:	68fb      	ldr	r3, [r7, #12]
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	4a2e      	ldr	r2, [pc, #184]	; (8102ba0 <HAL_DMA_Start_IT+0x204>)
 8102ae6:	4293      	cmp	r3, r2
 8102ae8:	d036      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102aea:	68fb      	ldr	r3, [r7, #12]
 8102aec:	681b      	ldr	r3, [r3, #0]
 8102aee:	4a2d      	ldr	r2, [pc, #180]	; (8102ba4 <HAL_DMA_Start_IT+0x208>)
 8102af0:	4293      	cmp	r3, r2
 8102af2:	d031      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102af4:	68fb      	ldr	r3, [r7, #12]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	4a2b      	ldr	r2, [pc, #172]	; (8102ba8 <HAL_DMA_Start_IT+0x20c>)
 8102afa:	4293      	cmp	r3, r2
 8102afc:	d02c      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102afe:	68fb      	ldr	r3, [r7, #12]
 8102b00:	681b      	ldr	r3, [r3, #0]
 8102b02:	4a2a      	ldr	r2, [pc, #168]	; (8102bac <HAL_DMA_Start_IT+0x210>)
 8102b04:	4293      	cmp	r3, r2
 8102b06:	d027      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102b08:	68fb      	ldr	r3, [r7, #12]
 8102b0a:	681b      	ldr	r3, [r3, #0]
 8102b0c:	4a28      	ldr	r2, [pc, #160]	; (8102bb0 <HAL_DMA_Start_IT+0x214>)
 8102b0e:	4293      	cmp	r3, r2
 8102b10:	d022      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102b12:	68fb      	ldr	r3, [r7, #12]
 8102b14:	681b      	ldr	r3, [r3, #0]
 8102b16:	4a27      	ldr	r2, [pc, #156]	; (8102bb4 <HAL_DMA_Start_IT+0x218>)
 8102b18:	4293      	cmp	r3, r2
 8102b1a:	d01d      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102b1c:	68fb      	ldr	r3, [r7, #12]
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	4a25      	ldr	r2, [pc, #148]	; (8102bb8 <HAL_DMA_Start_IT+0x21c>)
 8102b22:	4293      	cmp	r3, r2
 8102b24:	d018      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102b26:	68fb      	ldr	r3, [r7, #12]
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	4a24      	ldr	r2, [pc, #144]	; (8102bbc <HAL_DMA_Start_IT+0x220>)
 8102b2c:	4293      	cmp	r3, r2
 8102b2e:	d013      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102b30:	68fb      	ldr	r3, [r7, #12]
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	4a22      	ldr	r2, [pc, #136]	; (8102bc0 <HAL_DMA_Start_IT+0x224>)
 8102b36:	4293      	cmp	r3, r2
 8102b38:	d00e      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102b3a:	68fb      	ldr	r3, [r7, #12]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	4a21      	ldr	r2, [pc, #132]	; (8102bc4 <HAL_DMA_Start_IT+0x228>)
 8102b40:	4293      	cmp	r3, r2
 8102b42:	d009      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102b44:	68fb      	ldr	r3, [r7, #12]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	4a1f      	ldr	r2, [pc, #124]	; (8102bc8 <HAL_DMA_Start_IT+0x22c>)
 8102b4a:	4293      	cmp	r3, r2
 8102b4c:	d004      	beq.n	8102b58 <HAL_DMA_Start_IT+0x1bc>
 8102b4e:	68fb      	ldr	r3, [r7, #12]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	4a1e      	ldr	r2, [pc, #120]	; (8102bcc <HAL_DMA_Start_IT+0x230>)
 8102b54:	4293      	cmp	r3, r2
 8102b56:	d101      	bne.n	8102b5c <HAL_DMA_Start_IT+0x1c0>
 8102b58:	2301      	movs	r3, #1
 8102b5a:	e000      	b.n	8102b5e <HAL_DMA_Start_IT+0x1c2>
 8102b5c:	2300      	movs	r3, #0
 8102b5e:	2b00      	cmp	r3, #0
 8102b60:	d036      	beq.n	8102bd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102b62:	68fb      	ldr	r3, [r7, #12]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	f023 021e 	bic.w	r2, r3, #30
 8102b6c:	68fb      	ldr	r3, [r7, #12]
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	f042 0216 	orr.w	r2, r2, #22
 8102b74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102b76:	68fb      	ldr	r3, [r7, #12]
 8102b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b7a:	2b00      	cmp	r3, #0
 8102b7c:	d03e      	beq.n	8102bfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	681a      	ldr	r2, [r3, #0]
 8102b84:	68fb      	ldr	r3, [r7, #12]
 8102b86:	681b      	ldr	r3, [r3, #0]
 8102b88:	f042 0208 	orr.w	r2, r2, #8
 8102b8c:	601a      	str	r2, [r3, #0]
 8102b8e:	e035      	b.n	8102bfc <HAL_DMA_Start_IT+0x260>
 8102b90:	40020010 	.word	0x40020010
 8102b94:	40020028 	.word	0x40020028
 8102b98:	40020040 	.word	0x40020040
 8102b9c:	40020058 	.word	0x40020058
 8102ba0:	40020070 	.word	0x40020070
 8102ba4:	40020088 	.word	0x40020088
 8102ba8:	400200a0 	.word	0x400200a0
 8102bac:	400200b8 	.word	0x400200b8
 8102bb0:	40020410 	.word	0x40020410
 8102bb4:	40020428 	.word	0x40020428
 8102bb8:	40020440 	.word	0x40020440
 8102bbc:	40020458 	.word	0x40020458
 8102bc0:	40020470 	.word	0x40020470
 8102bc4:	40020488 	.word	0x40020488
 8102bc8:	400204a0 	.word	0x400204a0
 8102bcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102bd0:	68fb      	ldr	r3, [r7, #12]
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	f023 020e 	bic.w	r2, r3, #14
 8102bda:	68fb      	ldr	r3, [r7, #12]
 8102bdc:	681b      	ldr	r3, [r3, #0]
 8102bde:	f042 020a 	orr.w	r2, r2, #10
 8102be2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102be4:	68fb      	ldr	r3, [r7, #12]
 8102be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102be8:	2b00      	cmp	r3, #0
 8102bea:	d007      	beq.n	8102bfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	681a      	ldr	r2, [r3, #0]
 8102bf2:	68fb      	ldr	r3, [r7, #12]
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	f042 0204 	orr.w	r2, r2, #4
 8102bfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102bfc:	68fb      	ldr	r3, [r7, #12]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	4a83      	ldr	r2, [pc, #524]	; (8102e10 <HAL_DMA_Start_IT+0x474>)
 8102c02:	4293      	cmp	r3, r2
 8102c04:	d072      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c06:	68fb      	ldr	r3, [r7, #12]
 8102c08:	681b      	ldr	r3, [r3, #0]
 8102c0a:	4a82      	ldr	r2, [pc, #520]	; (8102e14 <HAL_DMA_Start_IT+0x478>)
 8102c0c:	4293      	cmp	r3, r2
 8102c0e:	d06d      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c10:	68fb      	ldr	r3, [r7, #12]
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	4a80      	ldr	r2, [pc, #512]	; (8102e18 <HAL_DMA_Start_IT+0x47c>)
 8102c16:	4293      	cmp	r3, r2
 8102c18:	d068      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c1a:	68fb      	ldr	r3, [r7, #12]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	4a7f      	ldr	r2, [pc, #508]	; (8102e1c <HAL_DMA_Start_IT+0x480>)
 8102c20:	4293      	cmp	r3, r2
 8102c22:	d063      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c24:	68fb      	ldr	r3, [r7, #12]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	4a7d      	ldr	r2, [pc, #500]	; (8102e20 <HAL_DMA_Start_IT+0x484>)
 8102c2a:	4293      	cmp	r3, r2
 8102c2c:	d05e      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c2e:	68fb      	ldr	r3, [r7, #12]
 8102c30:	681b      	ldr	r3, [r3, #0]
 8102c32:	4a7c      	ldr	r2, [pc, #496]	; (8102e24 <HAL_DMA_Start_IT+0x488>)
 8102c34:	4293      	cmp	r3, r2
 8102c36:	d059      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c38:	68fb      	ldr	r3, [r7, #12]
 8102c3a:	681b      	ldr	r3, [r3, #0]
 8102c3c:	4a7a      	ldr	r2, [pc, #488]	; (8102e28 <HAL_DMA_Start_IT+0x48c>)
 8102c3e:	4293      	cmp	r3, r2
 8102c40:	d054      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c42:	68fb      	ldr	r3, [r7, #12]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	4a79      	ldr	r2, [pc, #484]	; (8102e2c <HAL_DMA_Start_IT+0x490>)
 8102c48:	4293      	cmp	r3, r2
 8102c4a:	d04f      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c4c:	68fb      	ldr	r3, [r7, #12]
 8102c4e:	681b      	ldr	r3, [r3, #0]
 8102c50:	4a77      	ldr	r2, [pc, #476]	; (8102e30 <HAL_DMA_Start_IT+0x494>)
 8102c52:	4293      	cmp	r3, r2
 8102c54:	d04a      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c56:	68fb      	ldr	r3, [r7, #12]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	4a76      	ldr	r2, [pc, #472]	; (8102e34 <HAL_DMA_Start_IT+0x498>)
 8102c5c:	4293      	cmp	r3, r2
 8102c5e:	d045      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c60:	68fb      	ldr	r3, [r7, #12]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	4a74      	ldr	r2, [pc, #464]	; (8102e38 <HAL_DMA_Start_IT+0x49c>)
 8102c66:	4293      	cmp	r3, r2
 8102c68:	d040      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c6a:	68fb      	ldr	r3, [r7, #12]
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	4a73      	ldr	r2, [pc, #460]	; (8102e3c <HAL_DMA_Start_IT+0x4a0>)
 8102c70:	4293      	cmp	r3, r2
 8102c72:	d03b      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	4a71      	ldr	r2, [pc, #452]	; (8102e40 <HAL_DMA_Start_IT+0x4a4>)
 8102c7a:	4293      	cmp	r3, r2
 8102c7c:	d036      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c7e:	68fb      	ldr	r3, [r7, #12]
 8102c80:	681b      	ldr	r3, [r3, #0]
 8102c82:	4a70      	ldr	r2, [pc, #448]	; (8102e44 <HAL_DMA_Start_IT+0x4a8>)
 8102c84:	4293      	cmp	r3, r2
 8102c86:	d031      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c88:	68fb      	ldr	r3, [r7, #12]
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	4a6e      	ldr	r2, [pc, #440]	; (8102e48 <HAL_DMA_Start_IT+0x4ac>)
 8102c8e:	4293      	cmp	r3, r2
 8102c90:	d02c      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c92:	68fb      	ldr	r3, [r7, #12]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	4a6d      	ldr	r2, [pc, #436]	; (8102e4c <HAL_DMA_Start_IT+0x4b0>)
 8102c98:	4293      	cmp	r3, r2
 8102c9a:	d027      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	4a6b      	ldr	r2, [pc, #428]	; (8102e50 <HAL_DMA_Start_IT+0x4b4>)
 8102ca2:	4293      	cmp	r3, r2
 8102ca4:	d022      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102ca6:	68fb      	ldr	r3, [r7, #12]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	4a6a      	ldr	r2, [pc, #424]	; (8102e54 <HAL_DMA_Start_IT+0x4b8>)
 8102cac:	4293      	cmp	r3, r2
 8102cae:	d01d      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102cb0:	68fb      	ldr	r3, [r7, #12]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	4a68      	ldr	r2, [pc, #416]	; (8102e58 <HAL_DMA_Start_IT+0x4bc>)
 8102cb6:	4293      	cmp	r3, r2
 8102cb8:	d018      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102cba:	68fb      	ldr	r3, [r7, #12]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	4a67      	ldr	r2, [pc, #412]	; (8102e5c <HAL_DMA_Start_IT+0x4c0>)
 8102cc0:	4293      	cmp	r3, r2
 8102cc2:	d013      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102cc4:	68fb      	ldr	r3, [r7, #12]
 8102cc6:	681b      	ldr	r3, [r3, #0]
 8102cc8:	4a65      	ldr	r2, [pc, #404]	; (8102e60 <HAL_DMA_Start_IT+0x4c4>)
 8102cca:	4293      	cmp	r3, r2
 8102ccc:	d00e      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	4a64      	ldr	r2, [pc, #400]	; (8102e64 <HAL_DMA_Start_IT+0x4c8>)
 8102cd4:	4293      	cmp	r3, r2
 8102cd6:	d009      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	4a62      	ldr	r2, [pc, #392]	; (8102e68 <HAL_DMA_Start_IT+0x4cc>)
 8102cde:	4293      	cmp	r3, r2
 8102ce0:	d004      	beq.n	8102cec <HAL_DMA_Start_IT+0x350>
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	4a61      	ldr	r2, [pc, #388]	; (8102e6c <HAL_DMA_Start_IT+0x4d0>)
 8102ce8:	4293      	cmp	r3, r2
 8102cea:	d101      	bne.n	8102cf0 <HAL_DMA_Start_IT+0x354>
 8102cec:	2301      	movs	r3, #1
 8102cee:	e000      	b.n	8102cf2 <HAL_DMA_Start_IT+0x356>
 8102cf0:	2300      	movs	r3, #0
 8102cf2:	2b00      	cmp	r3, #0
 8102cf4:	d01a      	beq.n	8102d2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102d00:	2b00      	cmp	r3, #0
 8102d02:	d007      	beq.n	8102d14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102d04:	68fb      	ldr	r3, [r7, #12]
 8102d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102d08:	681a      	ldr	r2, [r3, #0]
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102d12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102d14:	68fb      	ldr	r3, [r7, #12]
 8102d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102d18:	2b00      	cmp	r3, #0
 8102d1a:	d007      	beq.n	8102d2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102d1c:	68fb      	ldr	r3, [r7, #12]
 8102d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102d20:	681a      	ldr	r2, [r3, #0]
 8102d22:	68fb      	ldr	r3, [r7, #12]
 8102d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102d2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102d2c:	68fb      	ldr	r3, [r7, #12]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	4a37      	ldr	r2, [pc, #220]	; (8102e10 <HAL_DMA_Start_IT+0x474>)
 8102d32:	4293      	cmp	r3, r2
 8102d34:	d04a      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d36:	68fb      	ldr	r3, [r7, #12]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	4a36      	ldr	r2, [pc, #216]	; (8102e14 <HAL_DMA_Start_IT+0x478>)
 8102d3c:	4293      	cmp	r3, r2
 8102d3e:	d045      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d40:	68fb      	ldr	r3, [r7, #12]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	4a34      	ldr	r2, [pc, #208]	; (8102e18 <HAL_DMA_Start_IT+0x47c>)
 8102d46:	4293      	cmp	r3, r2
 8102d48:	d040      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d4a:	68fb      	ldr	r3, [r7, #12]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	4a33      	ldr	r2, [pc, #204]	; (8102e1c <HAL_DMA_Start_IT+0x480>)
 8102d50:	4293      	cmp	r3, r2
 8102d52:	d03b      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	4a31      	ldr	r2, [pc, #196]	; (8102e20 <HAL_DMA_Start_IT+0x484>)
 8102d5a:	4293      	cmp	r3, r2
 8102d5c:	d036      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	4a30      	ldr	r2, [pc, #192]	; (8102e24 <HAL_DMA_Start_IT+0x488>)
 8102d64:	4293      	cmp	r3, r2
 8102d66:	d031      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	4a2e      	ldr	r2, [pc, #184]	; (8102e28 <HAL_DMA_Start_IT+0x48c>)
 8102d6e:	4293      	cmp	r3, r2
 8102d70:	d02c      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d72:	68fb      	ldr	r3, [r7, #12]
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	4a2d      	ldr	r2, [pc, #180]	; (8102e2c <HAL_DMA_Start_IT+0x490>)
 8102d78:	4293      	cmp	r3, r2
 8102d7a:	d027      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	4a2b      	ldr	r2, [pc, #172]	; (8102e30 <HAL_DMA_Start_IT+0x494>)
 8102d82:	4293      	cmp	r3, r2
 8102d84:	d022      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d86:	68fb      	ldr	r3, [r7, #12]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	4a2a      	ldr	r2, [pc, #168]	; (8102e34 <HAL_DMA_Start_IT+0x498>)
 8102d8c:	4293      	cmp	r3, r2
 8102d8e:	d01d      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d90:	68fb      	ldr	r3, [r7, #12]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	4a28      	ldr	r2, [pc, #160]	; (8102e38 <HAL_DMA_Start_IT+0x49c>)
 8102d96:	4293      	cmp	r3, r2
 8102d98:	d018      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4a27      	ldr	r2, [pc, #156]	; (8102e3c <HAL_DMA_Start_IT+0x4a0>)
 8102da0:	4293      	cmp	r3, r2
 8102da2:	d013      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102da4:	68fb      	ldr	r3, [r7, #12]
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	4a25      	ldr	r2, [pc, #148]	; (8102e40 <HAL_DMA_Start_IT+0x4a4>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d00e      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102dae:	68fb      	ldr	r3, [r7, #12]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a24      	ldr	r2, [pc, #144]	; (8102e44 <HAL_DMA_Start_IT+0x4a8>)
 8102db4:	4293      	cmp	r3, r2
 8102db6:	d009      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a22      	ldr	r2, [pc, #136]	; (8102e48 <HAL_DMA_Start_IT+0x4ac>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d004      	beq.n	8102dcc <HAL_DMA_Start_IT+0x430>
 8102dc2:	68fb      	ldr	r3, [r7, #12]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	4a21      	ldr	r2, [pc, #132]	; (8102e4c <HAL_DMA_Start_IT+0x4b0>)
 8102dc8:	4293      	cmp	r3, r2
 8102dca:	d108      	bne.n	8102dde <HAL_DMA_Start_IT+0x442>
 8102dcc:	68fb      	ldr	r3, [r7, #12]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	681a      	ldr	r2, [r3, #0]
 8102dd2:	68fb      	ldr	r3, [r7, #12]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	f042 0201 	orr.w	r2, r2, #1
 8102dda:	601a      	str	r2, [r3, #0]
 8102ddc:	e012      	b.n	8102e04 <HAL_DMA_Start_IT+0x468>
 8102dde:	68fb      	ldr	r3, [r7, #12]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	681a      	ldr	r2, [r3, #0]
 8102de4:	68fb      	ldr	r3, [r7, #12]
 8102de6:	681b      	ldr	r3, [r3, #0]
 8102de8:	f042 0201 	orr.w	r2, r2, #1
 8102dec:	601a      	str	r2, [r3, #0]
 8102dee:	e009      	b.n	8102e04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102df0:	68fb      	ldr	r3, [r7, #12]
 8102df2:	2200      	movs	r2, #0
 8102df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102df8:	68fb      	ldr	r3, [r7, #12]
 8102dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102dfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8102e00:	2301      	movs	r3, #1
 8102e02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8102e06:	4618      	mov	r0, r3
 8102e08:	3718      	adds	r7, #24
 8102e0a:	46bd      	mov	sp, r7
 8102e0c:	bd80      	pop	{r7, pc}
 8102e0e:	bf00      	nop
 8102e10:	40020010 	.word	0x40020010
 8102e14:	40020028 	.word	0x40020028
 8102e18:	40020040 	.word	0x40020040
 8102e1c:	40020058 	.word	0x40020058
 8102e20:	40020070 	.word	0x40020070
 8102e24:	40020088 	.word	0x40020088
 8102e28:	400200a0 	.word	0x400200a0
 8102e2c:	400200b8 	.word	0x400200b8
 8102e30:	40020410 	.word	0x40020410
 8102e34:	40020428 	.word	0x40020428
 8102e38:	40020440 	.word	0x40020440
 8102e3c:	40020458 	.word	0x40020458
 8102e40:	40020470 	.word	0x40020470
 8102e44:	40020488 	.word	0x40020488
 8102e48:	400204a0 	.word	0x400204a0
 8102e4c:	400204b8 	.word	0x400204b8
 8102e50:	58025408 	.word	0x58025408
 8102e54:	5802541c 	.word	0x5802541c
 8102e58:	58025430 	.word	0x58025430
 8102e5c:	58025444 	.word	0x58025444
 8102e60:	58025458 	.word	0x58025458
 8102e64:	5802546c 	.word	0x5802546c
 8102e68:	58025480 	.word	0x58025480
 8102e6c:	58025494 	.word	0x58025494

08102e70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102e70:	b580      	push	{r7, lr}
 8102e72:	b084      	sub	sp, #16
 8102e74:	af00      	add	r7, sp, #0
 8102e76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	2b00      	cmp	r3, #0
 8102e7c:	d101      	bne.n	8102e82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102e7e:	2301      	movs	r3, #1
 8102e80:	e205      	b.n	810328e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102e88:	b2db      	uxtb	r3, r3
 8102e8a:	2b02      	cmp	r3, #2
 8102e8c:	d004      	beq.n	8102e98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	2280      	movs	r2, #128	; 0x80
 8102e92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102e94:	2301      	movs	r3, #1
 8102e96:	e1fa      	b.n	810328e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a8c      	ldr	r2, [pc, #560]	; (81030d0 <HAL_DMA_Abort_IT+0x260>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d04a      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4a8b      	ldr	r2, [pc, #556]	; (81030d4 <HAL_DMA_Abort_IT+0x264>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d045      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	4a89      	ldr	r2, [pc, #548]	; (81030d8 <HAL_DMA_Abort_IT+0x268>)
 8102eb2:	4293      	cmp	r3, r2
 8102eb4:	d040      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	4a88      	ldr	r2, [pc, #544]	; (81030dc <HAL_DMA_Abort_IT+0x26c>)
 8102ebc:	4293      	cmp	r3, r2
 8102ebe:	d03b      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	4a86      	ldr	r2, [pc, #536]	; (81030e0 <HAL_DMA_Abort_IT+0x270>)
 8102ec6:	4293      	cmp	r3, r2
 8102ec8:	d036      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	681b      	ldr	r3, [r3, #0]
 8102ece:	4a85      	ldr	r2, [pc, #532]	; (81030e4 <HAL_DMA_Abort_IT+0x274>)
 8102ed0:	4293      	cmp	r3, r2
 8102ed2:	d031      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	4a83      	ldr	r2, [pc, #524]	; (81030e8 <HAL_DMA_Abort_IT+0x278>)
 8102eda:	4293      	cmp	r3, r2
 8102edc:	d02c      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	681b      	ldr	r3, [r3, #0]
 8102ee2:	4a82      	ldr	r2, [pc, #520]	; (81030ec <HAL_DMA_Abort_IT+0x27c>)
 8102ee4:	4293      	cmp	r3, r2
 8102ee6:	d027      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a80      	ldr	r2, [pc, #512]	; (81030f0 <HAL_DMA_Abort_IT+0x280>)
 8102eee:	4293      	cmp	r3, r2
 8102ef0:	d022      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	4a7f      	ldr	r2, [pc, #508]	; (81030f4 <HAL_DMA_Abort_IT+0x284>)
 8102ef8:	4293      	cmp	r3, r2
 8102efa:	d01d      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	681b      	ldr	r3, [r3, #0]
 8102f00:	4a7d      	ldr	r2, [pc, #500]	; (81030f8 <HAL_DMA_Abort_IT+0x288>)
 8102f02:	4293      	cmp	r3, r2
 8102f04:	d018      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	4a7c      	ldr	r2, [pc, #496]	; (81030fc <HAL_DMA_Abort_IT+0x28c>)
 8102f0c:	4293      	cmp	r3, r2
 8102f0e:	d013      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a7a      	ldr	r2, [pc, #488]	; (8103100 <HAL_DMA_Abort_IT+0x290>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d00e      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	4a79      	ldr	r2, [pc, #484]	; (8103104 <HAL_DMA_Abort_IT+0x294>)
 8102f20:	4293      	cmp	r3, r2
 8102f22:	d009      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	4a77      	ldr	r2, [pc, #476]	; (8103108 <HAL_DMA_Abort_IT+0x298>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d004      	beq.n	8102f38 <HAL_DMA_Abort_IT+0xc8>
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4a76      	ldr	r2, [pc, #472]	; (810310c <HAL_DMA_Abort_IT+0x29c>)
 8102f34:	4293      	cmp	r3, r2
 8102f36:	d101      	bne.n	8102f3c <HAL_DMA_Abort_IT+0xcc>
 8102f38:	2301      	movs	r3, #1
 8102f3a:	e000      	b.n	8102f3e <HAL_DMA_Abort_IT+0xce>
 8102f3c:	2300      	movs	r3, #0
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	d065      	beq.n	810300e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	2204      	movs	r2, #4
 8102f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	681b      	ldr	r3, [r3, #0]
 8102f4e:	4a60      	ldr	r2, [pc, #384]	; (81030d0 <HAL_DMA_Abort_IT+0x260>)
 8102f50:	4293      	cmp	r3, r2
 8102f52:	d04a      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4a5e      	ldr	r2, [pc, #376]	; (81030d4 <HAL_DMA_Abort_IT+0x264>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d045      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	4a5d      	ldr	r2, [pc, #372]	; (81030d8 <HAL_DMA_Abort_IT+0x268>)
 8102f64:	4293      	cmp	r3, r2
 8102f66:	d040      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4a5b      	ldr	r2, [pc, #364]	; (81030dc <HAL_DMA_Abort_IT+0x26c>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d03b      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	4a5a      	ldr	r2, [pc, #360]	; (81030e0 <HAL_DMA_Abort_IT+0x270>)
 8102f78:	4293      	cmp	r3, r2
 8102f7a:	d036      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	4a58      	ldr	r2, [pc, #352]	; (81030e4 <HAL_DMA_Abort_IT+0x274>)
 8102f82:	4293      	cmp	r3, r2
 8102f84:	d031      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	4a57      	ldr	r2, [pc, #348]	; (81030e8 <HAL_DMA_Abort_IT+0x278>)
 8102f8c:	4293      	cmp	r3, r2
 8102f8e:	d02c      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	4a55      	ldr	r2, [pc, #340]	; (81030ec <HAL_DMA_Abort_IT+0x27c>)
 8102f96:	4293      	cmp	r3, r2
 8102f98:	d027      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	4a54      	ldr	r2, [pc, #336]	; (81030f0 <HAL_DMA_Abort_IT+0x280>)
 8102fa0:	4293      	cmp	r3, r2
 8102fa2:	d022      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	4a52      	ldr	r2, [pc, #328]	; (81030f4 <HAL_DMA_Abort_IT+0x284>)
 8102faa:	4293      	cmp	r3, r2
 8102fac:	d01d      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	681b      	ldr	r3, [r3, #0]
 8102fb2:	4a51      	ldr	r2, [pc, #324]	; (81030f8 <HAL_DMA_Abort_IT+0x288>)
 8102fb4:	4293      	cmp	r3, r2
 8102fb6:	d018      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	4a4f      	ldr	r2, [pc, #316]	; (81030fc <HAL_DMA_Abort_IT+0x28c>)
 8102fbe:	4293      	cmp	r3, r2
 8102fc0:	d013      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	4a4e      	ldr	r2, [pc, #312]	; (8103100 <HAL_DMA_Abort_IT+0x290>)
 8102fc8:	4293      	cmp	r3, r2
 8102fca:	d00e      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	4a4c      	ldr	r2, [pc, #304]	; (8103104 <HAL_DMA_Abort_IT+0x294>)
 8102fd2:	4293      	cmp	r3, r2
 8102fd4:	d009      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	681b      	ldr	r3, [r3, #0]
 8102fda:	4a4b      	ldr	r2, [pc, #300]	; (8103108 <HAL_DMA_Abort_IT+0x298>)
 8102fdc:	4293      	cmp	r3, r2
 8102fde:	d004      	beq.n	8102fea <HAL_DMA_Abort_IT+0x17a>
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	4a49      	ldr	r2, [pc, #292]	; (810310c <HAL_DMA_Abort_IT+0x29c>)
 8102fe6:	4293      	cmp	r3, r2
 8102fe8:	d108      	bne.n	8102ffc <HAL_DMA_Abort_IT+0x18c>
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	681b      	ldr	r3, [r3, #0]
 8102fee:	681a      	ldr	r2, [r3, #0]
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	f022 0201 	bic.w	r2, r2, #1
 8102ff8:	601a      	str	r2, [r3, #0]
 8102ffa:	e147      	b.n	810328c <HAL_DMA_Abort_IT+0x41c>
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	681a      	ldr	r2, [r3, #0]
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	f022 0201 	bic.w	r2, r2, #1
 810300a:	601a      	str	r2, [r3, #0]
 810300c:	e13e      	b.n	810328c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	681a      	ldr	r2, [r3, #0]
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	f022 020e 	bic.w	r2, r2, #14
 810301c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	4a2b      	ldr	r2, [pc, #172]	; (81030d0 <HAL_DMA_Abort_IT+0x260>)
 8103024:	4293      	cmp	r3, r2
 8103026:	d04a      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	681b      	ldr	r3, [r3, #0]
 810302c:	4a29      	ldr	r2, [pc, #164]	; (81030d4 <HAL_DMA_Abort_IT+0x264>)
 810302e:	4293      	cmp	r3, r2
 8103030:	d045      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	4a28      	ldr	r2, [pc, #160]	; (81030d8 <HAL_DMA_Abort_IT+0x268>)
 8103038:	4293      	cmp	r3, r2
 810303a:	d040      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	4a26      	ldr	r2, [pc, #152]	; (81030dc <HAL_DMA_Abort_IT+0x26c>)
 8103042:	4293      	cmp	r3, r2
 8103044:	d03b      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	681b      	ldr	r3, [r3, #0]
 810304a:	4a25      	ldr	r2, [pc, #148]	; (81030e0 <HAL_DMA_Abort_IT+0x270>)
 810304c:	4293      	cmp	r3, r2
 810304e:	d036      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	4a23      	ldr	r2, [pc, #140]	; (81030e4 <HAL_DMA_Abort_IT+0x274>)
 8103056:	4293      	cmp	r3, r2
 8103058:	d031      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	4a22      	ldr	r2, [pc, #136]	; (81030e8 <HAL_DMA_Abort_IT+0x278>)
 8103060:	4293      	cmp	r3, r2
 8103062:	d02c      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	4a20      	ldr	r2, [pc, #128]	; (81030ec <HAL_DMA_Abort_IT+0x27c>)
 810306a:	4293      	cmp	r3, r2
 810306c:	d027      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	4a1f      	ldr	r2, [pc, #124]	; (81030f0 <HAL_DMA_Abort_IT+0x280>)
 8103074:	4293      	cmp	r3, r2
 8103076:	d022      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	4a1d      	ldr	r2, [pc, #116]	; (81030f4 <HAL_DMA_Abort_IT+0x284>)
 810307e:	4293      	cmp	r3, r2
 8103080:	d01d      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	4a1c      	ldr	r2, [pc, #112]	; (81030f8 <HAL_DMA_Abort_IT+0x288>)
 8103088:	4293      	cmp	r3, r2
 810308a:	d018      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	4a1a      	ldr	r2, [pc, #104]	; (81030fc <HAL_DMA_Abort_IT+0x28c>)
 8103092:	4293      	cmp	r3, r2
 8103094:	d013      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	4a19      	ldr	r2, [pc, #100]	; (8103100 <HAL_DMA_Abort_IT+0x290>)
 810309c:	4293      	cmp	r3, r2
 810309e:	d00e      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	4a17      	ldr	r2, [pc, #92]	; (8103104 <HAL_DMA_Abort_IT+0x294>)
 81030a6:	4293      	cmp	r3, r2
 81030a8:	d009      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	681b      	ldr	r3, [r3, #0]
 81030ae:	4a16      	ldr	r2, [pc, #88]	; (8103108 <HAL_DMA_Abort_IT+0x298>)
 81030b0:	4293      	cmp	r3, r2
 81030b2:	d004      	beq.n	81030be <HAL_DMA_Abort_IT+0x24e>
 81030b4:	687b      	ldr	r3, [r7, #4]
 81030b6:	681b      	ldr	r3, [r3, #0]
 81030b8:	4a14      	ldr	r2, [pc, #80]	; (810310c <HAL_DMA_Abort_IT+0x29c>)
 81030ba:	4293      	cmp	r3, r2
 81030bc:	d128      	bne.n	8103110 <HAL_DMA_Abort_IT+0x2a0>
 81030be:	687b      	ldr	r3, [r7, #4]
 81030c0:	681b      	ldr	r3, [r3, #0]
 81030c2:	681a      	ldr	r2, [r3, #0]
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	681b      	ldr	r3, [r3, #0]
 81030c8:	f022 0201 	bic.w	r2, r2, #1
 81030cc:	601a      	str	r2, [r3, #0]
 81030ce:	e027      	b.n	8103120 <HAL_DMA_Abort_IT+0x2b0>
 81030d0:	40020010 	.word	0x40020010
 81030d4:	40020028 	.word	0x40020028
 81030d8:	40020040 	.word	0x40020040
 81030dc:	40020058 	.word	0x40020058
 81030e0:	40020070 	.word	0x40020070
 81030e4:	40020088 	.word	0x40020088
 81030e8:	400200a0 	.word	0x400200a0
 81030ec:	400200b8 	.word	0x400200b8
 81030f0:	40020410 	.word	0x40020410
 81030f4:	40020428 	.word	0x40020428
 81030f8:	40020440 	.word	0x40020440
 81030fc:	40020458 	.word	0x40020458
 8103100:	40020470 	.word	0x40020470
 8103104:	40020488 	.word	0x40020488
 8103108:	400204a0 	.word	0x400204a0
 810310c:	400204b8 	.word	0x400204b8
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	681b      	ldr	r3, [r3, #0]
 8103114:	681a      	ldr	r2, [r3, #0]
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	f022 0201 	bic.w	r2, r2, #1
 810311e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	681b      	ldr	r3, [r3, #0]
 8103124:	4a5c      	ldr	r2, [pc, #368]	; (8103298 <HAL_DMA_Abort_IT+0x428>)
 8103126:	4293      	cmp	r3, r2
 8103128:	d072      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	681b      	ldr	r3, [r3, #0]
 810312e:	4a5b      	ldr	r2, [pc, #364]	; (810329c <HAL_DMA_Abort_IT+0x42c>)
 8103130:	4293      	cmp	r3, r2
 8103132:	d06d      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	4a59      	ldr	r2, [pc, #356]	; (81032a0 <HAL_DMA_Abort_IT+0x430>)
 810313a:	4293      	cmp	r3, r2
 810313c:	d068      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	4a58      	ldr	r2, [pc, #352]	; (81032a4 <HAL_DMA_Abort_IT+0x434>)
 8103144:	4293      	cmp	r3, r2
 8103146:	d063      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	4a56      	ldr	r2, [pc, #344]	; (81032a8 <HAL_DMA_Abort_IT+0x438>)
 810314e:	4293      	cmp	r3, r2
 8103150:	d05e      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	4a55      	ldr	r2, [pc, #340]	; (81032ac <HAL_DMA_Abort_IT+0x43c>)
 8103158:	4293      	cmp	r3, r2
 810315a:	d059      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	4a53      	ldr	r2, [pc, #332]	; (81032b0 <HAL_DMA_Abort_IT+0x440>)
 8103162:	4293      	cmp	r3, r2
 8103164:	d054      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	4a52      	ldr	r2, [pc, #328]	; (81032b4 <HAL_DMA_Abort_IT+0x444>)
 810316c:	4293      	cmp	r3, r2
 810316e:	d04f      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	4a50      	ldr	r2, [pc, #320]	; (81032b8 <HAL_DMA_Abort_IT+0x448>)
 8103176:	4293      	cmp	r3, r2
 8103178:	d04a      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	4a4f      	ldr	r2, [pc, #316]	; (81032bc <HAL_DMA_Abort_IT+0x44c>)
 8103180:	4293      	cmp	r3, r2
 8103182:	d045      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	4a4d      	ldr	r2, [pc, #308]	; (81032c0 <HAL_DMA_Abort_IT+0x450>)
 810318a:	4293      	cmp	r3, r2
 810318c:	d040      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	4a4c      	ldr	r2, [pc, #304]	; (81032c4 <HAL_DMA_Abort_IT+0x454>)
 8103194:	4293      	cmp	r3, r2
 8103196:	d03b      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	4a4a      	ldr	r2, [pc, #296]	; (81032c8 <HAL_DMA_Abort_IT+0x458>)
 810319e:	4293      	cmp	r3, r2
 81031a0:	d036      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	4a49      	ldr	r2, [pc, #292]	; (81032cc <HAL_DMA_Abort_IT+0x45c>)
 81031a8:	4293      	cmp	r3, r2
 81031aa:	d031      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	681b      	ldr	r3, [r3, #0]
 81031b0:	4a47      	ldr	r2, [pc, #284]	; (81032d0 <HAL_DMA_Abort_IT+0x460>)
 81031b2:	4293      	cmp	r3, r2
 81031b4:	d02c      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	4a46      	ldr	r2, [pc, #280]	; (81032d4 <HAL_DMA_Abort_IT+0x464>)
 81031bc:	4293      	cmp	r3, r2
 81031be:	d027      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	681b      	ldr	r3, [r3, #0]
 81031c4:	4a44      	ldr	r2, [pc, #272]	; (81032d8 <HAL_DMA_Abort_IT+0x468>)
 81031c6:	4293      	cmp	r3, r2
 81031c8:	d022      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	4a43      	ldr	r2, [pc, #268]	; (81032dc <HAL_DMA_Abort_IT+0x46c>)
 81031d0:	4293      	cmp	r3, r2
 81031d2:	d01d      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681b      	ldr	r3, [r3, #0]
 81031d8:	4a41      	ldr	r2, [pc, #260]	; (81032e0 <HAL_DMA_Abort_IT+0x470>)
 81031da:	4293      	cmp	r3, r2
 81031dc:	d018      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	4a40      	ldr	r2, [pc, #256]	; (81032e4 <HAL_DMA_Abort_IT+0x474>)
 81031e4:	4293      	cmp	r3, r2
 81031e6:	d013      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	4a3e      	ldr	r2, [pc, #248]	; (81032e8 <HAL_DMA_Abort_IT+0x478>)
 81031ee:	4293      	cmp	r3, r2
 81031f0:	d00e      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	4a3d      	ldr	r2, [pc, #244]	; (81032ec <HAL_DMA_Abort_IT+0x47c>)
 81031f8:	4293      	cmp	r3, r2
 81031fa:	d009      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	681b      	ldr	r3, [r3, #0]
 8103200:	4a3b      	ldr	r2, [pc, #236]	; (81032f0 <HAL_DMA_Abort_IT+0x480>)
 8103202:	4293      	cmp	r3, r2
 8103204:	d004      	beq.n	8103210 <HAL_DMA_Abort_IT+0x3a0>
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	681b      	ldr	r3, [r3, #0]
 810320a:	4a3a      	ldr	r2, [pc, #232]	; (81032f4 <HAL_DMA_Abort_IT+0x484>)
 810320c:	4293      	cmp	r3, r2
 810320e:	d101      	bne.n	8103214 <HAL_DMA_Abort_IT+0x3a4>
 8103210:	2301      	movs	r3, #1
 8103212:	e000      	b.n	8103216 <HAL_DMA_Abort_IT+0x3a6>
 8103214:	2300      	movs	r3, #0
 8103216:	2b00      	cmp	r3, #0
 8103218:	d028      	beq.n	810326c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810321e:	681a      	ldr	r2, [r3, #0]
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103228:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810322e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103234:	f003 031f 	and.w	r3, r3, #31
 8103238:	2201      	movs	r2, #1
 810323a:	409a      	lsls	r2, r3
 810323c:	68fb      	ldr	r3, [r7, #12]
 810323e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103244:	687a      	ldr	r2, [r7, #4]
 8103246:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103248:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810324e:	2b00      	cmp	r3, #0
 8103250:	d00c      	beq.n	810326c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103256:	681a      	ldr	r2, [r3, #0]
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810325c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103260:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103266:	687a      	ldr	r2, [r7, #4]
 8103268:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810326a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	2200      	movs	r2, #0
 8103270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	2201      	movs	r2, #1
 8103278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103280:	2b00      	cmp	r3, #0
 8103282:	d003      	beq.n	810328c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103288:	6878      	ldr	r0, [r7, #4]
 810328a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810328c:	2300      	movs	r3, #0
}
 810328e:	4618      	mov	r0, r3
 8103290:	3710      	adds	r7, #16
 8103292:	46bd      	mov	sp, r7
 8103294:	bd80      	pop	{r7, pc}
 8103296:	bf00      	nop
 8103298:	40020010 	.word	0x40020010
 810329c:	40020028 	.word	0x40020028
 81032a0:	40020040 	.word	0x40020040
 81032a4:	40020058 	.word	0x40020058
 81032a8:	40020070 	.word	0x40020070
 81032ac:	40020088 	.word	0x40020088
 81032b0:	400200a0 	.word	0x400200a0
 81032b4:	400200b8 	.word	0x400200b8
 81032b8:	40020410 	.word	0x40020410
 81032bc:	40020428 	.word	0x40020428
 81032c0:	40020440 	.word	0x40020440
 81032c4:	40020458 	.word	0x40020458
 81032c8:	40020470 	.word	0x40020470
 81032cc:	40020488 	.word	0x40020488
 81032d0:	400204a0 	.word	0x400204a0
 81032d4:	400204b8 	.word	0x400204b8
 81032d8:	58025408 	.word	0x58025408
 81032dc:	5802541c 	.word	0x5802541c
 81032e0:	58025430 	.word	0x58025430
 81032e4:	58025444 	.word	0x58025444
 81032e8:	58025458 	.word	0x58025458
 81032ec:	5802546c 	.word	0x5802546c
 81032f0:	58025480 	.word	0x58025480
 81032f4:	58025494 	.word	0x58025494

081032f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81032f8:	b580      	push	{r7, lr}
 81032fa:	b08a      	sub	sp, #40	; 0x28
 81032fc:	af00      	add	r7, sp, #0
 81032fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103300:	2300      	movs	r3, #0
 8103302:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103304:	4b67      	ldr	r3, [pc, #412]	; (81034a4 <HAL_DMA_IRQHandler+0x1ac>)
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	4a67      	ldr	r2, [pc, #412]	; (81034a8 <HAL_DMA_IRQHandler+0x1b0>)
 810330a:	fba2 2303 	umull	r2, r3, r2, r3
 810330e:	0a9b      	lsrs	r3, r3, #10
 8103310:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103316:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810331c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810331e:	6a3b      	ldr	r3, [r7, #32]
 8103320:	681b      	ldr	r3, [r3, #0]
 8103322:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103324:	69fb      	ldr	r3, [r7, #28]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	681b      	ldr	r3, [r3, #0]
 810332e:	4a5f      	ldr	r2, [pc, #380]	; (81034ac <HAL_DMA_IRQHandler+0x1b4>)
 8103330:	4293      	cmp	r3, r2
 8103332:	d04a      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	4a5d      	ldr	r2, [pc, #372]	; (81034b0 <HAL_DMA_IRQHandler+0x1b8>)
 810333a:	4293      	cmp	r3, r2
 810333c:	d045      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	4a5c      	ldr	r2, [pc, #368]	; (81034b4 <HAL_DMA_IRQHandler+0x1bc>)
 8103344:	4293      	cmp	r3, r2
 8103346:	d040      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	681b      	ldr	r3, [r3, #0]
 810334c:	4a5a      	ldr	r2, [pc, #360]	; (81034b8 <HAL_DMA_IRQHandler+0x1c0>)
 810334e:	4293      	cmp	r3, r2
 8103350:	d03b      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	681b      	ldr	r3, [r3, #0]
 8103356:	4a59      	ldr	r2, [pc, #356]	; (81034bc <HAL_DMA_IRQHandler+0x1c4>)
 8103358:	4293      	cmp	r3, r2
 810335a:	d036      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	681b      	ldr	r3, [r3, #0]
 8103360:	4a57      	ldr	r2, [pc, #348]	; (81034c0 <HAL_DMA_IRQHandler+0x1c8>)
 8103362:	4293      	cmp	r3, r2
 8103364:	d031      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 8103366:	687b      	ldr	r3, [r7, #4]
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	4a56      	ldr	r2, [pc, #344]	; (81034c4 <HAL_DMA_IRQHandler+0x1cc>)
 810336c:	4293      	cmp	r3, r2
 810336e:	d02c      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	4a54      	ldr	r2, [pc, #336]	; (81034c8 <HAL_DMA_IRQHandler+0x1d0>)
 8103376:	4293      	cmp	r3, r2
 8103378:	d027      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	4a53      	ldr	r2, [pc, #332]	; (81034cc <HAL_DMA_IRQHandler+0x1d4>)
 8103380:	4293      	cmp	r3, r2
 8103382:	d022      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	4a51      	ldr	r2, [pc, #324]	; (81034d0 <HAL_DMA_IRQHandler+0x1d8>)
 810338a:	4293      	cmp	r3, r2
 810338c:	d01d      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	4a50      	ldr	r2, [pc, #320]	; (81034d4 <HAL_DMA_IRQHandler+0x1dc>)
 8103394:	4293      	cmp	r3, r2
 8103396:	d018      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	4a4e      	ldr	r2, [pc, #312]	; (81034d8 <HAL_DMA_IRQHandler+0x1e0>)
 810339e:	4293      	cmp	r3, r2
 81033a0:	d013      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	4a4d      	ldr	r2, [pc, #308]	; (81034dc <HAL_DMA_IRQHandler+0x1e4>)
 81033a8:	4293      	cmp	r3, r2
 81033aa:	d00e      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	4a4b      	ldr	r2, [pc, #300]	; (81034e0 <HAL_DMA_IRQHandler+0x1e8>)
 81033b2:	4293      	cmp	r3, r2
 81033b4:	d009      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	4a4a      	ldr	r2, [pc, #296]	; (81034e4 <HAL_DMA_IRQHandler+0x1ec>)
 81033bc:	4293      	cmp	r3, r2
 81033be:	d004      	beq.n	81033ca <HAL_DMA_IRQHandler+0xd2>
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	4a48      	ldr	r2, [pc, #288]	; (81034e8 <HAL_DMA_IRQHandler+0x1f0>)
 81033c6:	4293      	cmp	r3, r2
 81033c8:	d101      	bne.n	81033ce <HAL_DMA_IRQHandler+0xd6>
 81033ca:	2301      	movs	r3, #1
 81033cc:	e000      	b.n	81033d0 <HAL_DMA_IRQHandler+0xd8>
 81033ce:	2300      	movs	r3, #0
 81033d0:	2b00      	cmp	r3, #0
 81033d2:	f000 842b 	beq.w	8103c2c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033da:	f003 031f 	and.w	r3, r3, #31
 81033de:	2208      	movs	r2, #8
 81033e0:	409a      	lsls	r2, r3
 81033e2:	69bb      	ldr	r3, [r7, #24]
 81033e4:	4013      	ands	r3, r2
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	f000 80a2 	beq.w	8103530 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	4a2e      	ldr	r2, [pc, #184]	; (81034ac <HAL_DMA_IRQHandler+0x1b4>)
 81033f2:	4293      	cmp	r3, r2
 81033f4:	d04a      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	4a2d      	ldr	r2, [pc, #180]	; (81034b0 <HAL_DMA_IRQHandler+0x1b8>)
 81033fc:	4293      	cmp	r3, r2
 81033fe:	d045      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	4a2b      	ldr	r2, [pc, #172]	; (81034b4 <HAL_DMA_IRQHandler+0x1bc>)
 8103406:	4293      	cmp	r3, r2
 8103408:	d040      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	4a2a      	ldr	r2, [pc, #168]	; (81034b8 <HAL_DMA_IRQHandler+0x1c0>)
 8103410:	4293      	cmp	r3, r2
 8103412:	d03b      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	4a28      	ldr	r2, [pc, #160]	; (81034bc <HAL_DMA_IRQHandler+0x1c4>)
 810341a:	4293      	cmp	r3, r2
 810341c:	d036      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	4a27      	ldr	r2, [pc, #156]	; (81034c0 <HAL_DMA_IRQHandler+0x1c8>)
 8103424:	4293      	cmp	r3, r2
 8103426:	d031      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	4a25      	ldr	r2, [pc, #148]	; (81034c4 <HAL_DMA_IRQHandler+0x1cc>)
 810342e:	4293      	cmp	r3, r2
 8103430:	d02c      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	4a24      	ldr	r2, [pc, #144]	; (81034c8 <HAL_DMA_IRQHandler+0x1d0>)
 8103438:	4293      	cmp	r3, r2
 810343a:	d027      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	4a22      	ldr	r2, [pc, #136]	; (81034cc <HAL_DMA_IRQHandler+0x1d4>)
 8103442:	4293      	cmp	r3, r2
 8103444:	d022      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	4a21      	ldr	r2, [pc, #132]	; (81034d0 <HAL_DMA_IRQHandler+0x1d8>)
 810344c:	4293      	cmp	r3, r2
 810344e:	d01d      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	4a1f      	ldr	r2, [pc, #124]	; (81034d4 <HAL_DMA_IRQHandler+0x1dc>)
 8103456:	4293      	cmp	r3, r2
 8103458:	d018      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	4a1e      	ldr	r2, [pc, #120]	; (81034d8 <HAL_DMA_IRQHandler+0x1e0>)
 8103460:	4293      	cmp	r3, r2
 8103462:	d013      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	4a1c      	ldr	r2, [pc, #112]	; (81034dc <HAL_DMA_IRQHandler+0x1e4>)
 810346a:	4293      	cmp	r3, r2
 810346c:	d00e      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	4a1b      	ldr	r2, [pc, #108]	; (81034e0 <HAL_DMA_IRQHandler+0x1e8>)
 8103474:	4293      	cmp	r3, r2
 8103476:	d009      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	4a19      	ldr	r2, [pc, #100]	; (81034e4 <HAL_DMA_IRQHandler+0x1ec>)
 810347e:	4293      	cmp	r3, r2
 8103480:	d004      	beq.n	810348c <HAL_DMA_IRQHandler+0x194>
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	4a18      	ldr	r2, [pc, #96]	; (81034e8 <HAL_DMA_IRQHandler+0x1f0>)
 8103488:	4293      	cmp	r3, r2
 810348a:	d12f      	bne.n	81034ec <HAL_DMA_IRQHandler+0x1f4>
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	681b      	ldr	r3, [r3, #0]
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	f003 0304 	and.w	r3, r3, #4
 8103496:	2b00      	cmp	r3, #0
 8103498:	bf14      	ite	ne
 810349a:	2301      	movne	r3, #1
 810349c:	2300      	moveq	r3, #0
 810349e:	b2db      	uxtb	r3, r3
 81034a0:	e02e      	b.n	8103500 <HAL_DMA_IRQHandler+0x208>
 81034a2:	bf00      	nop
 81034a4:	10000000 	.word	0x10000000
 81034a8:	1b4e81b5 	.word	0x1b4e81b5
 81034ac:	40020010 	.word	0x40020010
 81034b0:	40020028 	.word	0x40020028
 81034b4:	40020040 	.word	0x40020040
 81034b8:	40020058 	.word	0x40020058
 81034bc:	40020070 	.word	0x40020070
 81034c0:	40020088 	.word	0x40020088
 81034c4:	400200a0 	.word	0x400200a0
 81034c8:	400200b8 	.word	0x400200b8
 81034cc:	40020410 	.word	0x40020410
 81034d0:	40020428 	.word	0x40020428
 81034d4:	40020440 	.word	0x40020440
 81034d8:	40020458 	.word	0x40020458
 81034dc:	40020470 	.word	0x40020470
 81034e0:	40020488 	.word	0x40020488
 81034e4:	400204a0 	.word	0x400204a0
 81034e8:	400204b8 	.word	0x400204b8
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	681b      	ldr	r3, [r3, #0]
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	f003 0308 	and.w	r3, r3, #8
 81034f6:	2b00      	cmp	r3, #0
 81034f8:	bf14      	ite	ne
 81034fa:	2301      	movne	r3, #1
 81034fc:	2300      	moveq	r3, #0
 81034fe:	b2db      	uxtb	r3, r3
 8103500:	2b00      	cmp	r3, #0
 8103502:	d015      	beq.n	8103530 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	681a      	ldr	r2, [r3, #0]
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	f022 0204 	bic.w	r2, r2, #4
 8103512:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103518:	f003 031f 	and.w	r3, r3, #31
 810351c:	2208      	movs	r2, #8
 810351e:	409a      	lsls	r2, r3
 8103520:	6a3b      	ldr	r3, [r7, #32]
 8103522:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103528:	f043 0201 	orr.w	r2, r3, #1
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103534:	f003 031f 	and.w	r3, r3, #31
 8103538:	69ba      	ldr	r2, [r7, #24]
 810353a:	fa22 f303 	lsr.w	r3, r2, r3
 810353e:	f003 0301 	and.w	r3, r3, #1
 8103542:	2b00      	cmp	r3, #0
 8103544:	d06e      	beq.n	8103624 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	681b      	ldr	r3, [r3, #0]
 810354a:	4a69      	ldr	r2, [pc, #420]	; (81036f0 <HAL_DMA_IRQHandler+0x3f8>)
 810354c:	4293      	cmp	r3, r2
 810354e:	d04a      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	681b      	ldr	r3, [r3, #0]
 8103554:	4a67      	ldr	r2, [pc, #412]	; (81036f4 <HAL_DMA_IRQHandler+0x3fc>)
 8103556:	4293      	cmp	r3, r2
 8103558:	d045      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	4a66      	ldr	r2, [pc, #408]	; (81036f8 <HAL_DMA_IRQHandler+0x400>)
 8103560:	4293      	cmp	r3, r2
 8103562:	d040      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	4a64      	ldr	r2, [pc, #400]	; (81036fc <HAL_DMA_IRQHandler+0x404>)
 810356a:	4293      	cmp	r3, r2
 810356c:	d03b      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	4a63      	ldr	r2, [pc, #396]	; (8103700 <HAL_DMA_IRQHandler+0x408>)
 8103574:	4293      	cmp	r3, r2
 8103576:	d036      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	4a61      	ldr	r2, [pc, #388]	; (8103704 <HAL_DMA_IRQHandler+0x40c>)
 810357e:	4293      	cmp	r3, r2
 8103580:	d031      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	4a60      	ldr	r2, [pc, #384]	; (8103708 <HAL_DMA_IRQHandler+0x410>)
 8103588:	4293      	cmp	r3, r2
 810358a:	d02c      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	4a5e      	ldr	r2, [pc, #376]	; (810370c <HAL_DMA_IRQHandler+0x414>)
 8103592:	4293      	cmp	r3, r2
 8103594:	d027      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	4a5d      	ldr	r2, [pc, #372]	; (8103710 <HAL_DMA_IRQHandler+0x418>)
 810359c:	4293      	cmp	r3, r2
 810359e:	d022      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	4a5b      	ldr	r2, [pc, #364]	; (8103714 <HAL_DMA_IRQHandler+0x41c>)
 81035a6:	4293      	cmp	r3, r2
 81035a8:	d01d      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	681b      	ldr	r3, [r3, #0]
 81035ae:	4a5a      	ldr	r2, [pc, #360]	; (8103718 <HAL_DMA_IRQHandler+0x420>)
 81035b0:	4293      	cmp	r3, r2
 81035b2:	d018      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	681b      	ldr	r3, [r3, #0]
 81035b8:	4a58      	ldr	r2, [pc, #352]	; (810371c <HAL_DMA_IRQHandler+0x424>)
 81035ba:	4293      	cmp	r3, r2
 81035bc:	d013      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 81035be:	687b      	ldr	r3, [r7, #4]
 81035c0:	681b      	ldr	r3, [r3, #0]
 81035c2:	4a57      	ldr	r2, [pc, #348]	; (8103720 <HAL_DMA_IRQHandler+0x428>)
 81035c4:	4293      	cmp	r3, r2
 81035c6:	d00e      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	4a55      	ldr	r2, [pc, #340]	; (8103724 <HAL_DMA_IRQHandler+0x42c>)
 81035ce:	4293      	cmp	r3, r2
 81035d0:	d009      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 81035d2:	687b      	ldr	r3, [r7, #4]
 81035d4:	681b      	ldr	r3, [r3, #0]
 81035d6:	4a54      	ldr	r2, [pc, #336]	; (8103728 <HAL_DMA_IRQHandler+0x430>)
 81035d8:	4293      	cmp	r3, r2
 81035da:	d004      	beq.n	81035e6 <HAL_DMA_IRQHandler+0x2ee>
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	681b      	ldr	r3, [r3, #0]
 81035e0:	4a52      	ldr	r2, [pc, #328]	; (810372c <HAL_DMA_IRQHandler+0x434>)
 81035e2:	4293      	cmp	r3, r2
 81035e4:	d10a      	bne.n	81035fc <HAL_DMA_IRQHandler+0x304>
 81035e6:	687b      	ldr	r3, [r7, #4]
 81035e8:	681b      	ldr	r3, [r3, #0]
 81035ea:	695b      	ldr	r3, [r3, #20]
 81035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81035f0:	2b00      	cmp	r3, #0
 81035f2:	bf14      	ite	ne
 81035f4:	2301      	movne	r3, #1
 81035f6:	2300      	moveq	r3, #0
 81035f8:	b2db      	uxtb	r3, r3
 81035fa:	e003      	b.n	8103604 <HAL_DMA_IRQHandler+0x30c>
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	681b      	ldr	r3, [r3, #0]
 8103600:	681b      	ldr	r3, [r3, #0]
 8103602:	2300      	movs	r3, #0
 8103604:	2b00      	cmp	r3, #0
 8103606:	d00d      	beq.n	8103624 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810360c:	f003 031f 	and.w	r3, r3, #31
 8103610:	2201      	movs	r2, #1
 8103612:	409a      	lsls	r2, r3
 8103614:	6a3b      	ldr	r3, [r7, #32]
 8103616:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810361c:	f043 0202 	orr.w	r2, r3, #2
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103628:	f003 031f 	and.w	r3, r3, #31
 810362c:	2204      	movs	r2, #4
 810362e:	409a      	lsls	r2, r3
 8103630:	69bb      	ldr	r3, [r7, #24]
 8103632:	4013      	ands	r3, r2
 8103634:	2b00      	cmp	r3, #0
 8103636:	f000 808f 	beq.w	8103758 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810363a:	687b      	ldr	r3, [r7, #4]
 810363c:	681b      	ldr	r3, [r3, #0]
 810363e:	4a2c      	ldr	r2, [pc, #176]	; (81036f0 <HAL_DMA_IRQHandler+0x3f8>)
 8103640:	4293      	cmp	r3, r2
 8103642:	d04a      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	4a2a      	ldr	r2, [pc, #168]	; (81036f4 <HAL_DMA_IRQHandler+0x3fc>)
 810364a:	4293      	cmp	r3, r2
 810364c:	d045      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	4a29      	ldr	r2, [pc, #164]	; (81036f8 <HAL_DMA_IRQHandler+0x400>)
 8103654:	4293      	cmp	r3, r2
 8103656:	d040      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4a27      	ldr	r2, [pc, #156]	; (81036fc <HAL_DMA_IRQHandler+0x404>)
 810365e:	4293      	cmp	r3, r2
 8103660:	d03b      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	4a26      	ldr	r2, [pc, #152]	; (8103700 <HAL_DMA_IRQHandler+0x408>)
 8103668:	4293      	cmp	r3, r2
 810366a:	d036      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	4a24      	ldr	r2, [pc, #144]	; (8103704 <HAL_DMA_IRQHandler+0x40c>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d031      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	4a23      	ldr	r2, [pc, #140]	; (8103708 <HAL_DMA_IRQHandler+0x410>)
 810367c:	4293      	cmp	r3, r2
 810367e:	d02c      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	4a21      	ldr	r2, [pc, #132]	; (810370c <HAL_DMA_IRQHandler+0x414>)
 8103686:	4293      	cmp	r3, r2
 8103688:	d027      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	681b      	ldr	r3, [r3, #0]
 810368e:	4a20      	ldr	r2, [pc, #128]	; (8103710 <HAL_DMA_IRQHandler+0x418>)
 8103690:	4293      	cmp	r3, r2
 8103692:	d022      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	4a1e      	ldr	r2, [pc, #120]	; (8103714 <HAL_DMA_IRQHandler+0x41c>)
 810369a:	4293      	cmp	r3, r2
 810369c:	d01d      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	681b      	ldr	r3, [r3, #0]
 81036a2:	4a1d      	ldr	r2, [pc, #116]	; (8103718 <HAL_DMA_IRQHandler+0x420>)
 81036a4:	4293      	cmp	r3, r2
 81036a6:	d018      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	4a1b      	ldr	r2, [pc, #108]	; (810371c <HAL_DMA_IRQHandler+0x424>)
 81036ae:	4293      	cmp	r3, r2
 81036b0:	d013      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	4a1a      	ldr	r2, [pc, #104]	; (8103720 <HAL_DMA_IRQHandler+0x428>)
 81036b8:	4293      	cmp	r3, r2
 81036ba:	d00e      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	4a18      	ldr	r2, [pc, #96]	; (8103724 <HAL_DMA_IRQHandler+0x42c>)
 81036c2:	4293      	cmp	r3, r2
 81036c4:	d009      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	4a17      	ldr	r2, [pc, #92]	; (8103728 <HAL_DMA_IRQHandler+0x430>)
 81036cc:	4293      	cmp	r3, r2
 81036ce:	d004      	beq.n	81036da <HAL_DMA_IRQHandler+0x3e2>
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	4a15      	ldr	r2, [pc, #84]	; (810372c <HAL_DMA_IRQHandler+0x434>)
 81036d6:	4293      	cmp	r3, r2
 81036d8:	d12a      	bne.n	8103730 <HAL_DMA_IRQHandler+0x438>
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	681b      	ldr	r3, [r3, #0]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	f003 0302 	and.w	r3, r3, #2
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	bf14      	ite	ne
 81036e8:	2301      	movne	r3, #1
 81036ea:	2300      	moveq	r3, #0
 81036ec:	b2db      	uxtb	r3, r3
 81036ee:	e023      	b.n	8103738 <HAL_DMA_IRQHandler+0x440>
 81036f0:	40020010 	.word	0x40020010
 81036f4:	40020028 	.word	0x40020028
 81036f8:	40020040 	.word	0x40020040
 81036fc:	40020058 	.word	0x40020058
 8103700:	40020070 	.word	0x40020070
 8103704:	40020088 	.word	0x40020088
 8103708:	400200a0 	.word	0x400200a0
 810370c:	400200b8 	.word	0x400200b8
 8103710:	40020410 	.word	0x40020410
 8103714:	40020428 	.word	0x40020428
 8103718:	40020440 	.word	0x40020440
 810371c:	40020458 	.word	0x40020458
 8103720:	40020470 	.word	0x40020470
 8103724:	40020488 	.word	0x40020488
 8103728:	400204a0 	.word	0x400204a0
 810372c:	400204b8 	.word	0x400204b8
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	2300      	movs	r3, #0
 8103738:	2b00      	cmp	r3, #0
 810373a:	d00d      	beq.n	8103758 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810373c:	687b      	ldr	r3, [r7, #4]
 810373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103740:	f003 031f 	and.w	r3, r3, #31
 8103744:	2204      	movs	r2, #4
 8103746:	409a      	lsls	r2, r3
 8103748:	6a3b      	ldr	r3, [r7, #32]
 810374a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103750:	f043 0204 	orr.w	r2, r3, #4
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810375c:	f003 031f 	and.w	r3, r3, #31
 8103760:	2210      	movs	r2, #16
 8103762:	409a      	lsls	r2, r3
 8103764:	69bb      	ldr	r3, [r7, #24]
 8103766:	4013      	ands	r3, r2
 8103768:	2b00      	cmp	r3, #0
 810376a:	f000 80a6 	beq.w	81038ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	681b      	ldr	r3, [r3, #0]
 8103772:	4a85      	ldr	r2, [pc, #532]	; (8103988 <HAL_DMA_IRQHandler+0x690>)
 8103774:	4293      	cmp	r3, r2
 8103776:	d04a      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	681b      	ldr	r3, [r3, #0]
 810377c:	4a83      	ldr	r2, [pc, #524]	; (810398c <HAL_DMA_IRQHandler+0x694>)
 810377e:	4293      	cmp	r3, r2
 8103780:	d045      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	681b      	ldr	r3, [r3, #0]
 8103786:	4a82      	ldr	r2, [pc, #520]	; (8103990 <HAL_DMA_IRQHandler+0x698>)
 8103788:	4293      	cmp	r3, r2
 810378a:	d040      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	681b      	ldr	r3, [r3, #0]
 8103790:	4a80      	ldr	r2, [pc, #512]	; (8103994 <HAL_DMA_IRQHandler+0x69c>)
 8103792:	4293      	cmp	r3, r2
 8103794:	d03b      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	681b      	ldr	r3, [r3, #0]
 810379a:	4a7f      	ldr	r2, [pc, #508]	; (8103998 <HAL_DMA_IRQHandler+0x6a0>)
 810379c:	4293      	cmp	r3, r2
 810379e:	d036      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	681b      	ldr	r3, [r3, #0]
 81037a4:	4a7d      	ldr	r2, [pc, #500]	; (810399c <HAL_DMA_IRQHandler+0x6a4>)
 81037a6:	4293      	cmp	r3, r2
 81037a8:	d031      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	681b      	ldr	r3, [r3, #0]
 81037ae:	4a7c      	ldr	r2, [pc, #496]	; (81039a0 <HAL_DMA_IRQHandler+0x6a8>)
 81037b0:	4293      	cmp	r3, r2
 81037b2:	d02c      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	4a7a      	ldr	r2, [pc, #488]	; (81039a4 <HAL_DMA_IRQHandler+0x6ac>)
 81037ba:	4293      	cmp	r3, r2
 81037bc:	d027      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	4a79      	ldr	r2, [pc, #484]	; (81039a8 <HAL_DMA_IRQHandler+0x6b0>)
 81037c4:	4293      	cmp	r3, r2
 81037c6:	d022      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	4a77      	ldr	r2, [pc, #476]	; (81039ac <HAL_DMA_IRQHandler+0x6b4>)
 81037ce:	4293      	cmp	r3, r2
 81037d0:	d01d      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	681b      	ldr	r3, [r3, #0]
 81037d6:	4a76      	ldr	r2, [pc, #472]	; (81039b0 <HAL_DMA_IRQHandler+0x6b8>)
 81037d8:	4293      	cmp	r3, r2
 81037da:	d018      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	681b      	ldr	r3, [r3, #0]
 81037e0:	4a74      	ldr	r2, [pc, #464]	; (81039b4 <HAL_DMA_IRQHandler+0x6bc>)
 81037e2:	4293      	cmp	r3, r2
 81037e4:	d013      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	4a73      	ldr	r2, [pc, #460]	; (81039b8 <HAL_DMA_IRQHandler+0x6c0>)
 81037ec:	4293      	cmp	r3, r2
 81037ee:	d00e      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	4a71      	ldr	r2, [pc, #452]	; (81039bc <HAL_DMA_IRQHandler+0x6c4>)
 81037f6:	4293      	cmp	r3, r2
 81037f8:	d009      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	4a70      	ldr	r2, [pc, #448]	; (81039c0 <HAL_DMA_IRQHandler+0x6c8>)
 8103800:	4293      	cmp	r3, r2
 8103802:	d004      	beq.n	810380e <HAL_DMA_IRQHandler+0x516>
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	4a6e      	ldr	r2, [pc, #440]	; (81039c4 <HAL_DMA_IRQHandler+0x6cc>)
 810380a:	4293      	cmp	r3, r2
 810380c:	d10a      	bne.n	8103824 <HAL_DMA_IRQHandler+0x52c>
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	681b      	ldr	r3, [r3, #0]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	f003 0308 	and.w	r3, r3, #8
 8103818:	2b00      	cmp	r3, #0
 810381a:	bf14      	ite	ne
 810381c:	2301      	movne	r3, #1
 810381e:	2300      	moveq	r3, #0
 8103820:	b2db      	uxtb	r3, r3
 8103822:	e009      	b.n	8103838 <HAL_DMA_IRQHandler+0x540>
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	681b      	ldr	r3, [r3, #0]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	f003 0304 	and.w	r3, r3, #4
 810382e:	2b00      	cmp	r3, #0
 8103830:	bf14      	ite	ne
 8103832:	2301      	movne	r3, #1
 8103834:	2300      	moveq	r3, #0
 8103836:	b2db      	uxtb	r3, r3
 8103838:	2b00      	cmp	r3, #0
 810383a:	d03e      	beq.n	81038ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103840:	f003 031f 	and.w	r3, r3, #31
 8103844:	2210      	movs	r2, #16
 8103846:	409a      	lsls	r2, r3
 8103848:	6a3b      	ldr	r3, [r7, #32]
 810384a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	681b      	ldr	r3, [r3, #0]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103856:	2b00      	cmp	r3, #0
 8103858:	d018      	beq.n	810388c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103864:	2b00      	cmp	r3, #0
 8103866:	d108      	bne.n	810387a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810386c:	2b00      	cmp	r3, #0
 810386e:	d024      	beq.n	81038ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103874:	6878      	ldr	r0, [r7, #4]
 8103876:	4798      	blx	r3
 8103878:	e01f      	b.n	81038ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810387e:	2b00      	cmp	r3, #0
 8103880:	d01b      	beq.n	81038ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103886:	6878      	ldr	r0, [r7, #4]
 8103888:	4798      	blx	r3
 810388a:	e016      	b.n	81038ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	681b      	ldr	r3, [r3, #0]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103896:	2b00      	cmp	r3, #0
 8103898:	d107      	bne.n	81038aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	681a      	ldr	r2, [r3, #0]
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	f022 0208 	bic.w	r2, r2, #8
 81038a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038ae:	2b00      	cmp	r3, #0
 81038b0:	d003      	beq.n	81038ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038b6:	6878      	ldr	r0, [r7, #4]
 81038b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81038be:	f003 031f 	and.w	r3, r3, #31
 81038c2:	2220      	movs	r2, #32
 81038c4:	409a      	lsls	r2, r3
 81038c6:	69bb      	ldr	r3, [r7, #24]
 81038c8:	4013      	ands	r3, r2
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	f000 8110 	beq.w	8103af0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	4a2c      	ldr	r2, [pc, #176]	; (8103988 <HAL_DMA_IRQHandler+0x690>)
 81038d6:	4293      	cmp	r3, r2
 81038d8:	d04a      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	4a2b      	ldr	r2, [pc, #172]	; (810398c <HAL_DMA_IRQHandler+0x694>)
 81038e0:	4293      	cmp	r3, r2
 81038e2:	d045      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	4a29      	ldr	r2, [pc, #164]	; (8103990 <HAL_DMA_IRQHandler+0x698>)
 81038ea:	4293      	cmp	r3, r2
 81038ec:	d040      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	681b      	ldr	r3, [r3, #0]
 81038f2:	4a28      	ldr	r2, [pc, #160]	; (8103994 <HAL_DMA_IRQHandler+0x69c>)
 81038f4:	4293      	cmp	r3, r2
 81038f6:	d03b      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	4a26      	ldr	r2, [pc, #152]	; (8103998 <HAL_DMA_IRQHandler+0x6a0>)
 81038fe:	4293      	cmp	r3, r2
 8103900:	d036      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	4a25      	ldr	r2, [pc, #148]	; (810399c <HAL_DMA_IRQHandler+0x6a4>)
 8103908:	4293      	cmp	r3, r2
 810390a:	d031      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	4a23      	ldr	r2, [pc, #140]	; (81039a0 <HAL_DMA_IRQHandler+0x6a8>)
 8103912:	4293      	cmp	r3, r2
 8103914:	d02c      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	4a22      	ldr	r2, [pc, #136]	; (81039a4 <HAL_DMA_IRQHandler+0x6ac>)
 810391c:	4293      	cmp	r3, r2
 810391e:	d027      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	681b      	ldr	r3, [r3, #0]
 8103924:	4a20      	ldr	r2, [pc, #128]	; (81039a8 <HAL_DMA_IRQHandler+0x6b0>)
 8103926:	4293      	cmp	r3, r2
 8103928:	d022      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	681b      	ldr	r3, [r3, #0]
 810392e:	4a1f      	ldr	r2, [pc, #124]	; (81039ac <HAL_DMA_IRQHandler+0x6b4>)
 8103930:	4293      	cmp	r3, r2
 8103932:	d01d      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	4a1d      	ldr	r2, [pc, #116]	; (81039b0 <HAL_DMA_IRQHandler+0x6b8>)
 810393a:	4293      	cmp	r3, r2
 810393c:	d018      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	4a1c      	ldr	r2, [pc, #112]	; (81039b4 <HAL_DMA_IRQHandler+0x6bc>)
 8103944:	4293      	cmp	r3, r2
 8103946:	d013      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	4a1a      	ldr	r2, [pc, #104]	; (81039b8 <HAL_DMA_IRQHandler+0x6c0>)
 810394e:	4293      	cmp	r3, r2
 8103950:	d00e      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	4a19      	ldr	r2, [pc, #100]	; (81039bc <HAL_DMA_IRQHandler+0x6c4>)
 8103958:	4293      	cmp	r3, r2
 810395a:	d009      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	4a17      	ldr	r2, [pc, #92]	; (81039c0 <HAL_DMA_IRQHandler+0x6c8>)
 8103962:	4293      	cmp	r3, r2
 8103964:	d004      	beq.n	8103970 <HAL_DMA_IRQHandler+0x678>
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	4a16      	ldr	r2, [pc, #88]	; (81039c4 <HAL_DMA_IRQHandler+0x6cc>)
 810396c:	4293      	cmp	r3, r2
 810396e:	d12b      	bne.n	81039c8 <HAL_DMA_IRQHandler+0x6d0>
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	f003 0310 	and.w	r3, r3, #16
 810397a:	2b00      	cmp	r3, #0
 810397c:	bf14      	ite	ne
 810397e:	2301      	movne	r3, #1
 8103980:	2300      	moveq	r3, #0
 8103982:	b2db      	uxtb	r3, r3
 8103984:	e02a      	b.n	81039dc <HAL_DMA_IRQHandler+0x6e4>
 8103986:	bf00      	nop
 8103988:	40020010 	.word	0x40020010
 810398c:	40020028 	.word	0x40020028
 8103990:	40020040 	.word	0x40020040
 8103994:	40020058 	.word	0x40020058
 8103998:	40020070 	.word	0x40020070
 810399c:	40020088 	.word	0x40020088
 81039a0:	400200a0 	.word	0x400200a0
 81039a4:	400200b8 	.word	0x400200b8
 81039a8:	40020410 	.word	0x40020410
 81039ac:	40020428 	.word	0x40020428
 81039b0:	40020440 	.word	0x40020440
 81039b4:	40020458 	.word	0x40020458
 81039b8:	40020470 	.word	0x40020470
 81039bc:	40020488 	.word	0x40020488
 81039c0:	400204a0 	.word	0x400204a0
 81039c4:	400204b8 	.word	0x400204b8
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	f003 0302 	and.w	r3, r3, #2
 81039d2:	2b00      	cmp	r3, #0
 81039d4:	bf14      	ite	ne
 81039d6:	2301      	movne	r3, #1
 81039d8:	2300      	moveq	r3, #0
 81039da:	b2db      	uxtb	r3, r3
 81039dc:	2b00      	cmp	r3, #0
 81039de:	f000 8087 	beq.w	8103af0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81039e6:	f003 031f 	and.w	r3, r3, #31
 81039ea:	2220      	movs	r2, #32
 81039ec:	409a      	lsls	r2, r3
 81039ee:	6a3b      	ldr	r3, [r7, #32]
 81039f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81039f8:	b2db      	uxtb	r3, r3
 81039fa:	2b04      	cmp	r3, #4
 81039fc:	d139      	bne.n	8103a72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	681a      	ldr	r2, [r3, #0]
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	f022 0216 	bic.w	r2, r2, #22
 8103a0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	695a      	ldr	r2, [r3, #20]
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103a1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a22:	2b00      	cmp	r3, #0
 8103a24:	d103      	bne.n	8103a2e <HAL_DMA_IRQHandler+0x736>
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a2a:	2b00      	cmp	r3, #0
 8103a2c:	d007      	beq.n	8103a3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	681b      	ldr	r3, [r3, #0]
 8103a32:	681a      	ldr	r2, [r3, #0]
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	f022 0208 	bic.w	r2, r2, #8
 8103a3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a42:	f003 031f 	and.w	r3, r3, #31
 8103a46:	223f      	movs	r2, #63	; 0x3f
 8103a48:	409a      	lsls	r2, r3
 8103a4a:	6a3b      	ldr	r3, [r7, #32]
 8103a4c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	2200      	movs	r2, #0
 8103a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	2201      	movs	r2, #1
 8103a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a62:	2b00      	cmp	r3, #0
 8103a64:	f000 834a 	beq.w	81040fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a6c:	6878      	ldr	r0, [r7, #4]
 8103a6e:	4798      	blx	r3
          }
          return;
 8103a70:	e344      	b.n	81040fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	681b      	ldr	r3, [r3, #0]
 8103a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103a7c:	2b00      	cmp	r3, #0
 8103a7e:	d018      	beq.n	8103ab2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103a8a:	2b00      	cmp	r3, #0
 8103a8c:	d108      	bne.n	8103aa0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d02c      	beq.n	8103af0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a9a:	6878      	ldr	r0, [r7, #4]
 8103a9c:	4798      	blx	r3
 8103a9e:	e027      	b.n	8103af0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	d023      	beq.n	8103af0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103aac:	6878      	ldr	r0, [r7, #4]
 8103aae:	4798      	blx	r3
 8103ab0:	e01e      	b.n	8103af0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	681b      	ldr	r3, [r3, #0]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103abc:	2b00      	cmp	r3, #0
 8103abe:	d10f      	bne.n	8103ae0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	681a      	ldr	r2, [r3, #0]
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	f022 0210 	bic.w	r2, r2, #16
 8103ace:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	2200      	movs	r2, #0
 8103ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103ad8:	687b      	ldr	r3, [r7, #4]
 8103ada:	2201      	movs	r2, #1
 8103adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d003      	beq.n	8103af0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103aec:	6878      	ldr	r0, [r7, #4]
 8103aee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	f000 8306 	beq.w	8104106 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103afe:	f003 0301 	and.w	r3, r3, #1
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	f000 8088 	beq.w	8103c18 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	2204      	movs	r2, #4
 8103b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	4a7a      	ldr	r2, [pc, #488]	; (8103d00 <HAL_DMA_IRQHandler+0xa08>)
 8103b16:	4293      	cmp	r3, r2
 8103b18:	d04a      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	681b      	ldr	r3, [r3, #0]
 8103b1e:	4a79      	ldr	r2, [pc, #484]	; (8103d04 <HAL_DMA_IRQHandler+0xa0c>)
 8103b20:	4293      	cmp	r3, r2
 8103b22:	d045      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	4a77      	ldr	r2, [pc, #476]	; (8103d08 <HAL_DMA_IRQHandler+0xa10>)
 8103b2a:	4293      	cmp	r3, r2
 8103b2c:	d040      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	4a76      	ldr	r2, [pc, #472]	; (8103d0c <HAL_DMA_IRQHandler+0xa14>)
 8103b34:	4293      	cmp	r3, r2
 8103b36:	d03b      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	681b      	ldr	r3, [r3, #0]
 8103b3c:	4a74      	ldr	r2, [pc, #464]	; (8103d10 <HAL_DMA_IRQHandler+0xa18>)
 8103b3e:	4293      	cmp	r3, r2
 8103b40:	d036      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	4a73      	ldr	r2, [pc, #460]	; (8103d14 <HAL_DMA_IRQHandler+0xa1c>)
 8103b48:	4293      	cmp	r3, r2
 8103b4a:	d031      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	4a71      	ldr	r2, [pc, #452]	; (8103d18 <HAL_DMA_IRQHandler+0xa20>)
 8103b52:	4293      	cmp	r3, r2
 8103b54:	d02c      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	4a70      	ldr	r2, [pc, #448]	; (8103d1c <HAL_DMA_IRQHandler+0xa24>)
 8103b5c:	4293      	cmp	r3, r2
 8103b5e:	d027      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	4a6e      	ldr	r2, [pc, #440]	; (8103d20 <HAL_DMA_IRQHandler+0xa28>)
 8103b66:	4293      	cmp	r3, r2
 8103b68:	d022      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	4a6d      	ldr	r2, [pc, #436]	; (8103d24 <HAL_DMA_IRQHandler+0xa2c>)
 8103b70:	4293      	cmp	r3, r2
 8103b72:	d01d      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	4a6b      	ldr	r2, [pc, #428]	; (8103d28 <HAL_DMA_IRQHandler+0xa30>)
 8103b7a:	4293      	cmp	r3, r2
 8103b7c:	d018      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	4a6a      	ldr	r2, [pc, #424]	; (8103d2c <HAL_DMA_IRQHandler+0xa34>)
 8103b84:	4293      	cmp	r3, r2
 8103b86:	d013      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	4a68      	ldr	r2, [pc, #416]	; (8103d30 <HAL_DMA_IRQHandler+0xa38>)
 8103b8e:	4293      	cmp	r3, r2
 8103b90:	d00e      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	681b      	ldr	r3, [r3, #0]
 8103b96:	4a67      	ldr	r2, [pc, #412]	; (8103d34 <HAL_DMA_IRQHandler+0xa3c>)
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	d009      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	4a65      	ldr	r2, [pc, #404]	; (8103d38 <HAL_DMA_IRQHandler+0xa40>)
 8103ba2:	4293      	cmp	r3, r2
 8103ba4:	d004      	beq.n	8103bb0 <HAL_DMA_IRQHandler+0x8b8>
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	4a64      	ldr	r2, [pc, #400]	; (8103d3c <HAL_DMA_IRQHandler+0xa44>)
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d108      	bne.n	8103bc2 <HAL_DMA_IRQHandler+0x8ca>
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	681a      	ldr	r2, [r3, #0]
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	f022 0201 	bic.w	r2, r2, #1
 8103bbe:	601a      	str	r2, [r3, #0]
 8103bc0:	e007      	b.n	8103bd2 <HAL_DMA_IRQHandler+0x8da>
 8103bc2:	687b      	ldr	r3, [r7, #4]
 8103bc4:	681b      	ldr	r3, [r3, #0]
 8103bc6:	681a      	ldr	r2, [r3, #0]
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	f022 0201 	bic.w	r2, r2, #1
 8103bd0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	3301      	adds	r3, #1
 8103bd6:	60fb      	str	r3, [r7, #12]
 8103bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103bda:	429a      	cmp	r2, r3
 8103bdc:	d307      	bcc.n	8103bee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	681b      	ldr	r3, [r3, #0]
 8103be2:	681b      	ldr	r3, [r3, #0]
 8103be4:	f003 0301 	and.w	r3, r3, #1
 8103be8:	2b00      	cmp	r3, #0
 8103bea:	d1f2      	bne.n	8103bd2 <HAL_DMA_IRQHandler+0x8da>
 8103bec:	e000      	b.n	8103bf0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103bee:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	2200      	movs	r2, #0
 8103bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	681b      	ldr	r3, [r3, #0]
 8103bfe:	f003 0301 	and.w	r3, r3, #1
 8103c02:	2b00      	cmp	r3, #0
 8103c04:	d004      	beq.n	8103c10 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	2203      	movs	r2, #3
 8103c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103c0e:	e003      	b.n	8103c18 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	2201      	movs	r2, #1
 8103c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c1c:	2b00      	cmp	r3, #0
 8103c1e:	f000 8272 	beq.w	8104106 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c26:	6878      	ldr	r0, [r7, #4]
 8103c28:	4798      	blx	r3
 8103c2a:	e26c      	b.n	8104106 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a43      	ldr	r2, [pc, #268]	; (8103d40 <HAL_DMA_IRQHandler+0xa48>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d022      	beq.n	8103c7c <HAL_DMA_IRQHandler+0x984>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a42      	ldr	r2, [pc, #264]	; (8103d44 <HAL_DMA_IRQHandler+0xa4c>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d01d      	beq.n	8103c7c <HAL_DMA_IRQHandler+0x984>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a40      	ldr	r2, [pc, #256]	; (8103d48 <HAL_DMA_IRQHandler+0xa50>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d018      	beq.n	8103c7c <HAL_DMA_IRQHandler+0x984>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a3f      	ldr	r2, [pc, #252]	; (8103d4c <HAL_DMA_IRQHandler+0xa54>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d013      	beq.n	8103c7c <HAL_DMA_IRQHandler+0x984>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a3d      	ldr	r2, [pc, #244]	; (8103d50 <HAL_DMA_IRQHandler+0xa58>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d00e      	beq.n	8103c7c <HAL_DMA_IRQHandler+0x984>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a3c      	ldr	r2, [pc, #240]	; (8103d54 <HAL_DMA_IRQHandler+0xa5c>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d009      	beq.n	8103c7c <HAL_DMA_IRQHandler+0x984>
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a3a      	ldr	r2, [pc, #232]	; (8103d58 <HAL_DMA_IRQHandler+0xa60>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d004      	beq.n	8103c7c <HAL_DMA_IRQHandler+0x984>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a39      	ldr	r2, [pc, #228]	; (8103d5c <HAL_DMA_IRQHandler+0xa64>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d101      	bne.n	8103c80 <HAL_DMA_IRQHandler+0x988>
 8103c7c:	2301      	movs	r3, #1
 8103c7e:	e000      	b.n	8103c82 <HAL_DMA_IRQHandler+0x98a>
 8103c80:	2300      	movs	r3, #0
 8103c82:	2b00      	cmp	r3, #0
 8103c84:	f000 823f 	beq.w	8104106 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	681b      	ldr	r3, [r3, #0]
 8103c8e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c94:	f003 031f 	and.w	r3, r3, #31
 8103c98:	2204      	movs	r2, #4
 8103c9a:	409a      	lsls	r2, r3
 8103c9c:	697b      	ldr	r3, [r7, #20]
 8103c9e:	4013      	ands	r3, r2
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	f000 80cd 	beq.w	8103e40 <HAL_DMA_IRQHandler+0xb48>
 8103ca6:	693b      	ldr	r3, [r7, #16]
 8103ca8:	f003 0304 	and.w	r3, r3, #4
 8103cac:	2b00      	cmp	r3, #0
 8103cae:	f000 80c7 	beq.w	8103e40 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cb6:	f003 031f 	and.w	r3, r3, #31
 8103cba:	2204      	movs	r2, #4
 8103cbc:	409a      	lsls	r2, r3
 8103cbe:	69fb      	ldr	r3, [r7, #28]
 8103cc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103cc2:	693b      	ldr	r3, [r7, #16]
 8103cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103cc8:	2b00      	cmp	r3, #0
 8103cca:	d049      	beq.n	8103d60 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103ccc:	693b      	ldr	r3, [r7, #16]
 8103cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103cd2:	2b00      	cmp	r3, #0
 8103cd4:	d109      	bne.n	8103cea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103cd6:	687b      	ldr	r3, [r7, #4]
 8103cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	f000 8210 	beq.w	8104100 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ce4:	6878      	ldr	r0, [r7, #4]
 8103ce6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ce8:	e20a      	b.n	8104100 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103cee:	2b00      	cmp	r3, #0
 8103cf0:	f000 8206 	beq.w	8104100 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103cf8:	6878      	ldr	r0, [r7, #4]
 8103cfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103cfc:	e200      	b.n	8104100 <HAL_DMA_IRQHandler+0xe08>
 8103cfe:	bf00      	nop
 8103d00:	40020010 	.word	0x40020010
 8103d04:	40020028 	.word	0x40020028
 8103d08:	40020040 	.word	0x40020040
 8103d0c:	40020058 	.word	0x40020058
 8103d10:	40020070 	.word	0x40020070
 8103d14:	40020088 	.word	0x40020088
 8103d18:	400200a0 	.word	0x400200a0
 8103d1c:	400200b8 	.word	0x400200b8
 8103d20:	40020410 	.word	0x40020410
 8103d24:	40020428 	.word	0x40020428
 8103d28:	40020440 	.word	0x40020440
 8103d2c:	40020458 	.word	0x40020458
 8103d30:	40020470 	.word	0x40020470
 8103d34:	40020488 	.word	0x40020488
 8103d38:	400204a0 	.word	0x400204a0
 8103d3c:	400204b8 	.word	0x400204b8
 8103d40:	58025408 	.word	0x58025408
 8103d44:	5802541c 	.word	0x5802541c
 8103d48:	58025430 	.word	0x58025430
 8103d4c:	58025444 	.word	0x58025444
 8103d50:	58025458 	.word	0x58025458
 8103d54:	5802546c 	.word	0x5802546c
 8103d58:	58025480 	.word	0x58025480
 8103d5c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103d60:	693b      	ldr	r3, [r7, #16]
 8103d62:	f003 0320 	and.w	r3, r3, #32
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d160      	bne.n	8103e2c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	4a8c      	ldr	r2, [pc, #560]	; (8103fa0 <HAL_DMA_IRQHandler+0xca8>)
 8103d70:	4293      	cmp	r3, r2
 8103d72:	d04a      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	4a8a      	ldr	r2, [pc, #552]	; (8103fa4 <HAL_DMA_IRQHandler+0xcac>)
 8103d7a:	4293      	cmp	r3, r2
 8103d7c:	d045      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	4a89      	ldr	r2, [pc, #548]	; (8103fa8 <HAL_DMA_IRQHandler+0xcb0>)
 8103d84:	4293      	cmp	r3, r2
 8103d86:	d040      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	4a87      	ldr	r2, [pc, #540]	; (8103fac <HAL_DMA_IRQHandler+0xcb4>)
 8103d8e:	4293      	cmp	r3, r2
 8103d90:	d03b      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	4a86      	ldr	r2, [pc, #536]	; (8103fb0 <HAL_DMA_IRQHandler+0xcb8>)
 8103d98:	4293      	cmp	r3, r2
 8103d9a:	d036      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	4a84      	ldr	r2, [pc, #528]	; (8103fb4 <HAL_DMA_IRQHandler+0xcbc>)
 8103da2:	4293      	cmp	r3, r2
 8103da4:	d031      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	4a83      	ldr	r2, [pc, #524]	; (8103fb8 <HAL_DMA_IRQHandler+0xcc0>)
 8103dac:	4293      	cmp	r3, r2
 8103dae:	d02c      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	681b      	ldr	r3, [r3, #0]
 8103db4:	4a81      	ldr	r2, [pc, #516]	; (8103fbc <HAL_DMA_IRQHandler+0xcc4>)
 8103db6:	4293      	cmp	r3, r2
 8103db8:	d027      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	681b      	ldr	r3, [r3, #0]
 8103dbe:	4a80      	ldr	r2, [pc, #512]	; (8103fc0 <HAL_DMA_IRQHandler+0xcc8>)
 8103dc0:	4293      	cmp	r3, r2
 8103dc2:	d022      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	4a7e      	ldr	r2, [pc, #504]	; (8103fc4 <HAL_DMA_IRQHandler+0xccc>)
 8103dca:	4293      	cmp	r3, r2
 8103dcc:	d01d      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	681b      	ldr	r3, [r3, #0]
 8103dd2:	4a7d      	ldr	r2, [pc, #500]	; (8103fc8 <HAL_DMA_IRQHandler+0xcd0>)
 8103dd4:	4293      	cmp	r3, r2
 8103dd6:	d018      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	681b      	ldr	r3, [r3, #0]
 8103ddc:	4a7b      	ldr	r2, [pc, #492]	; (8103fcc <HAL_DMA_IRQHandler+0xcd4>)
 8103dde:	4293      	cmp	r3, r2
 8103de0:	d013      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103de2:	687b      	ldr	r3, [r7, #4]
 8103de4:	681b      	ldr	r3, [r3, #0]
 8103de6:	4a7a      	ldr	r2, [pc, #488]	; (8103fd0 <HAL_DMA_IRQHandler+0xcd8>)
 8103de8:	4293      	cmp	r3, r2
 8103dea:	d00e      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	4a78      	ldr	r2, [pc, #480]	; (8103fd4 <HAL_DMA_IRQHandler+0xcdc>)
 8103df2:	4293      	cmp	r3, r2
 8103df4:	d009      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103df6:	687b      	ldr	r3, [r7, #4]
 8103df8:	681b      	ldr	r3, [r3, #0]
 8103dfa:	4a77      	ldr	r2, [pc, #476]	; (8103fd8 <HAL_DMA_IRQHandler+0xce0>)
 8103dfc:	4293      	cmp	r3, r2
 8103dfe:	d004      	beq.n	8103e0a <HAL_DMA_IRQHandler+0xb12>
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	4a75      	ldr	r2, [pc, #468]	; (8103fdc <HAL_DMA_IRQHandler+0xce4>)
 8103e06:	4293      	cmp	r3, r2
 8103e08:	d108      	bne.n	8103e1c <HAL_DMA_IRQHandler+0xb24>
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	681a      	ldr	r2, [r3, #0]
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	f022 0208 	bic.w	r2, r2, #8
 8103e18:	601a      	str	r2, [r3, #0]
 8103e1a:	e007      	b.n	8103e2c <HAL_DMA_IRQHandler+0xb34>
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	681a      	ldr	r2, [r3, #0]
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	f022 0204 	bic.w	r2, r2, #4
 8103e2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e30:	2b00      	cmp	r3, #0
 8103e32:	f000 8165 	beq.w	8104100 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e3a:	6878      	ldr	r0, [r7, #4]
 8103e3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103e3e:	e15f      	b.n	8104100 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e44:	f003 031f 	and.w	r3, r3, #31
 8103e48:	2202      	movs	r2, #2
 8103e4a:	409a      	lsls	r2, r3
 8103e4c:	697b      	ldr	r3, [r7, #20]
 8103e4e:	4013      	ands	r3, r2
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	f000 80c5 	beq.w	8103fe0 <HAL_DMA_IRQHandler+0xce8>
 8103e56:	693b      	ldr	r3, [r7, #16]
 8103e58:	f003 0302 	and.w	r3, r3, #2
 8103e5c:	2b00      	cmp	r3, #0
 8103e5e:	f000 80bf 	beq.w	8103fe0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e66:	f003 031f 	and.w	r3, r3, #31
 8103e6a:	2202      	movs	r2, #2
 8103e6c:	409a      	lsls	r2, r3
 8103e6e:	69fb      	ldr	r3, [r7, #28]
 8103e70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103e72:	693b      	ldr	r3, [r7, #16]
 8103e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103e78:	2b00      	cmp	r3, #0
 8103e7a:	d018      	beq.n	8103eae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103e7c:	693b      	ldr	r3, [r7, #16]
 8103e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d109      	bne.n	8103e9a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103e8a:	2b00      	cmp	r3, #0
 8103e8c:	f000 813a 	beq.w	8104104 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103e94:	6878      	ldr	r0, [r7, #4]
 8103e96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103e98:	e134      	b.n	8104104 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103e9e:	2b00      	cmp	r3, #0
 8103ea0:	f000 8130 	beq.w	8104104 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103ea8:	6878      	ldr	r0, [r7, #4]
 8103eaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103eac:	e12a      	b.n	8104104 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103eae:	693b      	ldr	r3, [r7, #16]
 8103eb0:	f003 0320 	and.w	r3, r3, #32
 8103eb4:	2b00      	cmp	r3, #0
 8103eb6:	d168      	bne.n	8103f8a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	4a38      	ldr	r2, [pc, #224]	; (8103fa0 <HAL_DMA_IRQHandler+0xca8>)
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	d04a      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	4a37      	ldr	r2, [pc, #220]	; (8103fa4 <HAL_DMA_IRQHandler+0xcac>)
 8103ec8:	4293      	cmp	r3, r2
 8103eca:	d045      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	4a35      	ldr	r2, [pc, #212]	; (8103fa8 <HAL_DMA_IRQHandler+0xcb0>)
 8103ed2:	4293      	cmp	r3, r2
 8103ed4:	d040      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	4a34      	ldr	r2, [pc, #208]	; (8103fac <HAL_DMA_IRQHandler+0xcb4>)
 8103edc:	4293      	cmp	r3, r2
 8103ede:	d03b      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	4a32      	ldr	r2, [pc, #200]	; (8103fb0 <HAL_DMA_IRQHandler+0xcb8>)
 8103ee6:	4293      	cmp	r3, r2
 8103ee8:	d036      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	4a31      	ldr	r2, [pc, #196]	; (8103fb4 <HAL_DMA_IRQHandler+0xcbc>)
 8103ef0:	4293      	cmp	r3, r2
 8103ef2:	d031      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	4a2f      	ldr	r2, [pc, #188]	; (8103fb8 <HAL_DMA_IRQHandler+0xcc0>)
 8103efa:	4293      	cmp	r3, r2
 8103efc:	d02c      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	681b      	ldr	r3, [r3, #0]
 8103f02:	4a2e      	ldr	r2, [pc, #184]	; (8103fbc <HAL_DMA_IRQHandler+0xcc4>)
 8103f04:	4293      	cmp	r3, r2
 8103f06:	d027      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	4a2c      	ldr	r2, [pc, #176]	; (8103fc0 <HAL_DMA_IRQHandler+0xcc8>)
 8103f0e:	4293      	cmp	r3, r2
 8103f10:	d022      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	4a2b      	ldr	r2, [pc, #172]	; (8103fc4 <HAL_DMA_IRQHandler+0xccc>)
 8103f18:	4293      	cmp	r3, r2
 8103f1a:	d01d      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	4a29      	ldr	r2, [pc, #164]	; (8103fc8 <HAL_DMA_IRQHandler+0xcd0>)
 8103f22:	4293      	cmp	r3, r2
 8103f24:	d018      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	4a28      	ldr	r2, [pc, #160]	; (8103fcc <HAL_DMA_IRQHandler+0xcd4>)
 8103f2c:	4293      	cmp	r3, r2
 8103f2e:	d013      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	4a26      	ldr	r2, [pc, #152]	; (8103fd0 <HAL_DMA_IRQHandler+0xcd8>)
 8103f36:	4293      	cmp	r3, r2
 8103f38:	d00e      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	4a25      	ldr	r2, [pc, #148]	; (8103fd4 <HAL_DMA_IRQHandler+0xcdc>)
 8103f40:	4293      	cmp	r3, r2
 8103f42:	d009      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	681b      	ldr	r3, [r3, #0]
 8103f48:	4a23      	ldr	r2, [pc, #140]	; (8103fd8 <HAL_DMA_IRQHandler+0xce0>)
 8103f4a:	4293      	cmp	r3, r2
 8103f4c:	d004      	beq.n	8103f58 <HAL_DMA_IRQHandler+0xc60>
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a22      	ldr	r2, [pc, #136]	; (8103fdc <HAL_DMA_IRQHandler+0xce4>)
 8103f54:	4293      	cmp	r3, r2
 8103f56:	d108      	bne.n	8103f6a <HAL_DMA_IRQHandler+0xc72>
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	681a      	ldr	r2, [r3, #0]
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	f022 0214 	bic.w	r2, r2, #20
 8103f66:	601a      	str	r2, [r3, #0]
 8103f68:	e007      	b.n	8103f7a <HAL_DMA_IRQHandler+0xc82>
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	681a      	ldr	r2, [r3, #0]
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	f022 020a 	bic.w	r2, r2, #10
 8103f78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103f7a:	687b      	ldr	r3, [r7, #4]
 8103f7c:	2200      	movs	r2, #0
 8103f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	2201      	movs	r2, #1
 8103f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103f8e:	2b00      	cmp	r3, #0
 8103f90:	f000 80b8 	beq.w	8104104 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103f98:	6878      	ldr	r0, [r7, #4]
 8103f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103f9c:	e0b2      	b.n	8104104 <HAL_DMA_IRQHandler+0xe0c>
 8103f9e:	bf00      	nop
 8103fa0:	40020010 	.word	0x40020010
 8103fa4:	40020028 	.word	0x40020028
 8103fa8:	40020040 	.word	0x40020040
 8103fac:	40020058 	.word	0x40020058
 8103fb0:	40020070 	.word	0x40020070
 8103fb4:	40020088 	.word	0x40020088
 8103fb8:	400200a0 	.word	0x400200a0
 8103fbc:	400200b8 	.word	0x400200b8
 8103fc0:	40020410 	.word	0x40020410
 8103fc4:	40020428 	.word	0x40020428
 8103fc8:	40020440 	.word	0x40020440
 8103fcc:	40020458 	.word	0x40020458
 8103fd0:	40020470 	.word	0x40020470
 8103fd4:	40020488 	.word	0x40020488
 8103fd8:	400204a0 	.word	0x400204a0
 8103fdc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103fe4:	f003 031f 	and.w	r3, r3, #31
 8103fe8:	2208      	movs	r2, #8
 8103fea:	409a      	lsls	r2, r3
 8103fec:	697b      	ldr	r3, [r7, #20]
 8103fee:	4013      	ands	r3, r2
 8103ff0:	2b00      	cmp	r3, #0
 8103ff2:	f000 8088 	beq.w	8104106 <HAL_DMA_IRQHandler+0xe0e>
 8103ff6:	693b      	ldr	r3, [r7, #16]
 8103ff8:	f003 0308 	and.w	r3, r3, #8
 8103ffc:	2b00      	cmp	r3, #0
 8103ffe:	f000 8082 	beq.w	8104106 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	4a41      	ldr	r2, [pc, #260]	; (810410c <HAL_DMA_IRQHandler+0xe14>)
 8104008:	4293      	cmp	r3, r2
 810400a:	d04a      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 810400c:	687b      	ldr	r3, [r7, #4]
 810400e:	681b      	ldr	r3, [r3, #0]
 8104010:	4a3f      	ldr	r2, [pc, #252]	; (8104110 <HAL_DMA_IRQHandler+0xe18>)
 8104012:	4293      	cmp	r3, r2
 8104014:	d045      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	681b      	ldr	r3, [r3, #0]
 810401a:	4a3e      	ldr	r2, [pc, #248]	; (8104114 <HAL_DMA_IRQHandler+0xe1c>)
 810401c:	4293      	cmp	r3, r2
 810401e:	d040      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	681b      	ldr	r3, [r3, #0]
 8104024:	4a3c      	ldr	r2, [pc, #240]	; (8104118 <HAL_DMA_IRQHandler+0xe20>)
 8104026:	4293      	cmp	r3, r2
 8104028:	d03b      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	4a3b      	ldr	r2, [pc, #236]	; (810411c <HAL_DMA_IRQHandler+0xe24>)
 8104030:	4293      	cmp	r3, r2
 8104032:	d036      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	681b      	ldr	r3, [r3, #0]
 8104038:	4a39      	ldr	r2, [pc, #228]	; (8104120 <HAL_DMA_IRQHandler+0xe28>)
 810403a:	4293      	cmp	r3, r2
 810403c:	d031      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	4a38      	ldr	r2, [pc, #224]	; (8104124 <HAL_DMA_IRQHandler+0xe2c>)
 8104044:	4293      	cmp	r3, r2
 8104046:	d02c      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	4a36      	ldr	r2, [pc, #216]	; (8104128 <HAL_DMA_IRQHandler+0xe30>)
 810404e:	4293      	cmp	r3, r2
 8104050:	d027      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	4a35      	ldr	r2, [pc, #212]	; (810412c <HAL_DMA_IRQHandler+0xe34>)
 8104058:	4293      	cmp	r3, r2
 810405a:	d022      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	4a33      	ldr	r2, [pc, #204]	; (8104130 <HAL_DMA_IRQHandler+0xe38>)
 8104062:	4293      	cmp	r3, r2
 8104064:	d01d      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	4a32      	ldr	r2, [pc, #200]	; (8104134 <HAL_DMA_IRQHandler+0xe3c>)
 810406c:	4293      	cmp	r3, r2
 810406e:	d018      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	4a30      	ldr	r2, [pc, #192]	; (8104138 <HAL_DMA_IRQHandler+0xe40>)
 8104076:	4293      	cmp	r3, r2
 8104078:	d013      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	681b      	ldr	r3, [r3, #0]
 810407e:	4a2f      	ldr	r2, [pc, #188]	; (810413c <HAL_DMA_IRQHandler+0xe44>)
 8104080:	4293      	cmp	r3, r2
 8104082:	d00e      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	4a2d      	ldr	r2, [pc, #180]	; (8104140 <HAL_DMA_IRQHandler+0xe48>)
 810408a:	4293      	cmp	r3, r2
 810408c:	d009      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	4a2c      	ldr	r2, [pc, #176]	; (8104144 <HAL_DMA_IRQHandler+0xe4c>)
 8104094:	4293      	cmp	r3, r2
 8104096:	d004      	beq.n	81040a2 <HAL_DMA_IRQHandler+0xdaa>
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	4a2a      	ldr	r2, [pc, #168]	; (8104148 <HAL_DMA_IRQHandler+0xe50>)
 810409e:	4293      	cmp	r3, r2
 81040a0:	d108      	bne.n	81040b4 <HAL_DMA_IRQHandler+0xdbc>
 81040a2:	687b      	ldr	r3, [r7, #4]
 81040a4:	681b      	ldr	r3, [r3, #0]
 81040a6:	681a      	ldr	r2, [r3, #0]
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	681b      	ldr	r3, [r3, #0]
 81040ac:	f022 021c 	bic.w	r2, r2, #28
 81040b0:	601a      	str	r2, [r3, #0]
 81040b2:	e007      	b.n	81040c4 <HAL_DMA_IRQHandler+0xdcc>
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	681b      	ldr	r3, [r3, #0]
 81040b8:	681a      	ldr	r2, [r3, #0]
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	f022 020e 	bic.w	r2, r2, #14
 81040c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81040c8:	f003 031f 	and.w	r3, r3, #31
 81040cc:	2201      	movs	r2, #1
 81040ce:	409a      	lsls	r2, r3
 81040d0:	69fb      	ldr	r3, [r7, #28]
 81040d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	2201      	movs	r2, #1
 81040d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81040da:	687b      	ldr	r3, [r7, #4]
 81040dc:	2200      	movs	r2, #0
 81040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	2201      	movs	r2, #1
 81040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81040ee:	2b00      	cmp	r3, #0
 81040f0:	d009      	beq.n	8104106 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81040f6:	6878      	ldr	r0, [r7, #4]
 81040f8:	4798      	blx	r3
 81040fa:	e004      	b.n	8104106 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81040fc:	bf00      	nop
 81040fe:	e002      	b.n	8104106 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104100:	bf00      	nop
 8104102:	e000      	b.n	8104106 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104104:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104106:	3728      	adds	r7, #40	; 0x28
 8104108:	46bd      	mov	sp, r7
 810410a:	bd80      	pop	{r7, pc}
 810410c:	40020010 	.word	0x40020010
 8104110:	40020028 	.word	0x40020028
 8104114:	40020040 	.word	0x40020040
 8104118:	40020058 	.word	0x40020058
 810411c:	40020070 	.word	0x40020070
 8104120:	40020088 	.word	0x40020088
 8104124:	400200a0 	.word	0x400200a0
 8104128:	400200b8 	.word	0x400200b8
 810412c:	40020410 	.word	0x40020410
 8104130:	40020428 	.word	0x40020428
 8104134:	40020440 	.word	0x40020440
 8104138:	40020458 	.word	0x40020458
 810413c:	40020470 	.word	0x40020470
 8104140:	40020488 	.word	0x40020488
 8104144:	400204a0 	.word	0x400204a0
 8104148:	400204b8 	.word	0x400204b8

0810414c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810414c:	b480      	push	{r7}
 810414e:	b087      	sub	sp, #28
 8104150:	af00      	add	r7, sp, #0
 8104152:	60f8      	str	r0, [r7, #12]
 8104154:	60b9      	str	r1, [r7, #8]
 8104156:	607a      	str	r2, [r7, #4]
 8104158:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810415a:	68fb      	ldr	r3, [r7, #12]
 810415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810415e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104160:	68fb      	ldr	r3, [r7, #12]
 8104162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104164:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104166:	68fb      	ldr	r3, [r7, #12]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	4a84      	ldr	r2, [pc, #528]	; (810437c <DMA_SetConfig+0x230>)
 810416c:	4293      	cmp	r3, r2
 810416e:	d072      	beq.n	8104256 <DMA_SetConfig+0x10a>
 8104170:	68fb      	ldr	r3, [r7, #12]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	4a82      	ldr	r2, [pc, #520]	; (8104380 <DMA_SetConfig+0x234>)
 8104176:	4293      	cmp	r3, r2
 8104178:	d06d      	beq.n	8104256 <DMA_SetConfig+0x10a>
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	4a81      	ldr	r2, [pc, #516]	; (8104384 <DMA_SetConfig+0x238>)
 8104180:	4293      	cmp	r3, r2
 8104182:	d068      	beq.n	8104256 <DMA_SetConfig+0x10a>
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	4a7f      	ldr	r2, [pc, #508]	; (8104388 <DMA_SetConfig+0x23c>)
 810418a:	4293      	cmp	r3, r2
 810418c:	d063      	beq.n	8104256 <DMA_SetConfig+0x10a>
 810418e:	68fb      	ldr	r3, [r7, #12]
 8104190:	681b      	ldr	r3, [r3, #0]
 8104192:	4a7e      	ldr	r2, [pc, #504]	; (810438c <DMA_SetConfig+0x240>)
 8104194:	4293      	cmp	r3, r2
 8104196:	d05e      	beq.n	8104256 <DMA_SetConfig+0x10a>
 8104198:	68fb      	ldr	r3, [r7, #12]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	4a7c      	ldr	r2, [pc, #496]	; (8104390 <DMA_SetConfig+0x244>)
 810419e:	4293      	cmp	r3, r2
 81041a0:	d059      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	4a7b      	ldr	r2, [pc, #492]	; (8104394 <DMA_SetConfig+0x248>)
 81041a8:	4293      	cmp	r3, r2
 81041aa:	d054      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	4a79      	ldr	r2, [pc, #484]	; (8104398 <DMA_SetConfig+0x24c>)
 81041b2:	4293      	cmp	r3, r2
 81041b4:	d04f      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041b6:	68fb      	ldr	r3, [r7, #12]
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	4a78      	ldr	r2, [pc, #480]	; (810439c <DMA_SetConfig+0x250>)
 81041bc:	4293      	cmp	r3, r2
 81041be:	d04a      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041c0:	68fb      	ldr	r3, [r7, #12]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	4a76      	ldr	r2, [pc, #472]	; (81043a0 <DMA_SetConfig+0x254>)
 81041c6:	4293      	cmp	r3, r2
 81041c8:	d045      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041ca:	68fb      	ldr	r3, [r7, #12]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	4a75      	ldr	r2, [pc, #468]	; (81043a4 <DMA_SetConfig+0x258>)
 81041d0:	4293      	cmp	r3, r2
 81041d2:	d040      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	681b      	ldr	r3, [r3, #0]
 81041d8:	4a73      	ldr	r2, [pc, #460]	; (81043a8 <DMA_SetConfig+0x25c>)
 81041da:	4293      	cmp	r3, r2
 81041dc:	d03b      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041de:	68fb      	ldr	r3, [r7, #12]
 81041e0:	681b      	ldr	r3, [r3, #0]
 81041e2:	4a72      	ldr	r2, [pc, #456]	; (81043ac <DMA_SetConfig+0x260>)
 81041e4:	4293      	cmp	r3, r2
 81041e6:	d036      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041e8:	68fb      	ldr	r3, [r7, #12]
 81041ea:	681b      	ldr	r3, [r3, #0]
 81041ec:	4a70      	ldr	r2, [pc, #448]	; (81043b0 <DMA_SetConfig+0x264>)
 81041ee:	4293      	cmp	r3, r2
 81041f0:	d031      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041f2:	68fb      	ldr	r3, [r7, #12]
 81041f4:	681b      	ldr	r3, [r3, #0]
 81041f6:	4a6f      	ldr	r2, [pc, #444]	; (81043b4 <DMA_SetConfig+0x268>)
 81041f8:	4293      	cmp	r3, r2
 81041fa:	d02c      	beq.n	8104256 <DMA_SetConfig+0x10a>
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	681b      	ldr	r3, [r3, #0]
 8104200:	4a6d      	ldr	r2, [pc, #436]	; (81043b8 <DMA_SetConfig+0x26c>)
 8104202:	4293      	cmp	r3, r2
 8104204:	d027      	beq.n	8104256 <DMA_SetConfig+0x10a>
 8104206:	68fb      	ldr	r3, [r7, #12]
 8104208:	681b      	ldr	r3, [r3, #0]
 810420a:	4a6c      	ldr	r2, [pc, #432]	; (81043bc <DMA_SetConfig+0x270>)
 810420c:	4293      	cmp	r3, r2
 810420e:	d022      	beq.n	8104256 <DMA_SetConfig+0x10a>
 8104210:	68fb      	ldr	r3, [r7, #12]
 8104212:	681b      	ldr	r3, [r3, #0]
 8104214:	4a6a      	ldr	r2, [pc, #424]	; (81043c0 <DMA_SetConfig+0x274>)
 8104216:	4293      	cmp	r3, r2
 8104218:	d01d      	beq.n	8104256 <DMA_SetConfig+0x10a>
 810421a:	68fb      	ldr	r3, [r7, #12]
 810421c:	681b      	ldr	r3, [r3, #0]
 810421e:	4a69      	ldr	r2, [pc, #420]	; (81043c4 <DMA_SetConfig+0x278>)
 8104220:	4293      	cmp	r3, r2
 8104222:	d018      	beq.n	8104256 <DMA_SetConfig+0x10a>
 8104224:	68fb      	ldr	r3, [r7, #12]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	4a67      	ldr	r2, [pc, #412]	; (81043c8 <DMA_SetConfig+0x27c>)
 810422a:	4293      	cmp	r3, r2
 810422c:	d013      	beq.n	8104256 <DMA_SetConfig+0x10a>
 810422e:	68fb      	ldr	r3, [r7, #12]
 8104230:	681b      	ldr	r3, [r3, #0]
 8104232:	4a66      	ldr	r2, [pc, #408]	; (81043cc <DMA_SetConfig+0x280>)
 8104234:	4293      	cmp	r3, r2
 8104236:	d00e      	beq.n	8104256 <DMA_SetConfig+0x10a>
 8104238:	68fb      	ldr	r3, [r7, #12]
 810423a:	681b      	ldr	r3, [r3, #0]
 810423c:	4a64      	ldr	r2, [pc, #400]	; (81043d0 <DMA_SetConfig+0x284>)
 810423e:	4293      	cmp	r3, r2
 8104240:	d009      	beq.n	8104256 <DMA_SetConfig+0x10a>
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	681b      	ldr	r3, [r3, #0]
 8104246:	4a63      	ldr	r2, [pc, #396]	; (81043d4 <DMA_SetConfig+0x288>)
 8104248:	4293      	cmp	r3, r2
 810424a:	d004      	beq.n	8104256 <DMA_SetConfig+0x10a>
 810424c:	68fb      	ldr	r3, [r7, #12]
 810424e:	681b      	ldr	r3, [r3, #0]
 8104250:	4a61      	ldr	r2, [pc, #388]	; (81043d8 <DMA_SetConfig+0x28c>)
 8104252:	4293      	cmp	r3, r2
 8104254:	d101      	bne.n	810425a <DMA_SetConfig+0x10e>
 8104256:	2301      	movs	r3, #1
 8104258:	e000      	b.n	810425c <DMA_SetConfig+0x110>
 810425a:	2300      	movs	r3, #0
 810425c:	2b00      	cmp	r3, #0
 810425e:	d00d      	beq.n	810427c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104264:	68fa      	ldr	r2, [r7, #12]
 8104266:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104268:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810426a:	68fb      	ldr	r3, [r7, #12]
 810426c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810426e:	2b00      	cmp	r3, #0
 8104270:	d004      	beq.n	810427c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104272:	68fb      	ldr	r3, [r7, #12]
 8104274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104276:	68fa      	ldr	r2, [r7, #12]
 8104278:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810427a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810427c:	68fb      	ldr	r3, [r7, #12]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	4a3e      	ldr	r2, [pc, #248]	; (810437c <DMA_SetConfig+0x230>)
 8104282:	4293      	cmp	r3, r2
 8104284:	d04a      	beq.n	810431c <DMA_SetConfig+0x1d0>
 8104286:	68fb      	ldr	r3, [r7, #12]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	4a3d      	ldr	r2, [pc, #244]	; (8104380 <DMA_SetConfig+0x234>)
 810428c:	4293      	cmp	r3, r2
 810428e:	d045      	beq.n	810431c <DMA_SetConfig+0x1d0>
 8104290:	68fb      	ldr	r3, [r7, #12]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	4a3b      	ldr	r2, [pc, #236]	; (8104384 <DMA_SetConfig+0x238>)
 8104296:	4293      	cmp	r3, r2
 8104298:	d040      	beq.n	810431c <DMA_SetConfig+0x1d0>
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	4a3a      	ldr	r2, [pc, #232]	; (8104388 <DMA_SetConfig+0x23c>)
 81042a0:	4293      	cmp	r3, r2
 81042a2:	d03b      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	4a38      	ldr	r2, [pc, #224]	; (810438c <DMA_SetConfig+0x240>)
 81042aa:	4293      	cmp	r3, r2
 81042ac:	d036      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042ae:	68fb      	ldr	r3, [r7, #12]
 81042b0:	681b      	ldr	r3, [r3, #0]
 81042b2:	4a37      	ldr	r2, [pc, #220]	; (8104390 <DMA_SetConfig+0x244>)
 81042b4:	4293      	cmp	r3, r2
 81042b6:	d031      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	4a35      	ldr	r2, [pc, #212]	; (8104394 <DMA_SetConfig+0x248>)
 81042be:	4293      	cmp	r3, r2
 81042c0:	d02c      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042c2:	68fb      	ldr	r3, [r7, #12]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	4a34      	ldr	r2, [pc, #208]	; (8104398 <DMA_SetConfig+0x24c>)
 81042c8:	4293      	cmp	r3, r2
 81042ca:	d027      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042cc:	68fb      	ldr	r3, [r7, #12]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	4a32      	ldr	r2, [pc, #200]	; (810439c <DMA_SetConfig+0x250>)
 81042d2:	4293      	cmp	r3, r2
 81042d4:	d022      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042d6:	68fb      	ldr	r3, [r7, #12]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	4a31      	ldr	r2, [pc, #196]	; (81043a0 <DMA_SetConfig+0x254>)
 81042dc:	4293      	cmp	r3, r2
 81042de:	d01d      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042e0:	68fb      	ldr	r3, [r7, #12]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	4a2f      	ldr	r2, [pc, #188]	; (81043a4 <DMA_SetConfig+0x258>)
 81042e6:	4293      	cmp	r3, r2
 81042e8:	d018      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042ea:	68fb      	ldr	r3, [r7, #12]
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	4a2e      	ldr	r2, [pc, #184]	; (81043a8 <DMA_SetConfig+0x25c>)
 81042f0:	4293      	cmp	r3, r2
 81042f2:	d013      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042f4:	68fb      	ldr	r3, [r7, #12]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	4a2c      	ldr	r2, [pc, #176]	; (81043ac <DMA_SetConfig+0x260>)
 81042fa:	4293      	cmp	r3, r2
 81042fc:	d00e      	beq.n	810431c <DMA_SetConfig+0x1d0>
 81042fe:	68fb      	ldr	r3, [r7, #12]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	4a2b      	ldr	r2, [pc, #172]	; (81043b0 <DMA_SetConfig+0x264>)
 8104304:	4293      	cmp	r3, r2
 8104306:	d009      	beq.n	810431c <DMA_SetConfig+0x1d0>
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	4a29      	ldr	r2, [pc, #164]	; (81043b4 <DMA_SetConfig+0x268>)
 810430e:	4293      	cmp	r3, r2
 8104310:	d004      	beq.n	810431c <DMA_SetConfig+0x1d0>
 8104312:	68fb      	ldr	r3, [r7, #12]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	4a28      	ldr	r2, [pc, #160]	; (81043b8 <DMA_SetConfig+0x26c>)
 8104318:	4293      	cmp	r3, r2
 810431a:	d101      	bne.n	8104320 <DMA_SetConfig+0x1d4>
 810431c:	2301      	movs	r3, #1
 810431e:	e000      	b.n	8104322 <DMA_SetConfig+0x1d6>
 8104320:	2300      	movs	r3, #0
 8104322:	2b00      	cmp	r3, #0
 8104324:	d05a      	beq.n	81043dc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104326:	68fb      	ldr	r3, [r7, #12]
 8104328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810432a:	f003 031f 	and.w	r3, r3, #31
 810432e:	223f      	movs	r2, #63	; 0x3f
 8104330:	409a      	lsls	r2, r3
 8104332:	697b      	ldr	r3, [r7, #20]
 8104334:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8104336:	68fb      	ldr	r3, [r7, #12]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	681a      	ldr	r2, [r3, #0]
 810433c:	68fb      	ldr	r3, [r7, #12]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104344:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8104346:	68fb      	ldr	r3, [r7, #12]
 8104348:	681b      	ldr	r3, [r3, #0]
 810434a:	683a      	ldr	r2, [r7, #0]
 810434c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810434e:	68fb      	ldr	r3, [r7, #12]
 8104350:	689b      	ldr	r3, [r3, #8]
 8104352:	2b40      	cmp	r3, #64	; 0x40
 8104354:	d108      	bne.n	8104368 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8104356:	68fb      	ldr	r3, [r7, #12]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	687a      	ldr	r2, [r7, #4]
 810435c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810435e:	68fb      	ldr	r3, [r7, #12]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	68ba      	ldr	r2, [r7, #8]
 8104364:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104366:	e087      	b.n	8104478 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	68ba      	ldr	r2, [r7, #8]
 810436e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104370:	68fb      	ldr	r3, [r7, #12]
 8104372:	681b      	ldr	r3, [r3, #0]
 8104374:	687a      	ldr	r2, [r7, #4]
 8104376:	60da      	str	r2, [r3, #12]
}
 8104378:	e07e      	b.n	8104478 <DMA_SetConfig+0x32c>
 810437a:	bf00      	nop
 810437c:	40020010 	.word	0x40020010
 8104380:	40020028 	.word	0x40020028
 8104384:	40020040 	.word	0x40020040
 8104388:	40020058 	.word	0x40020058
 810438c:	40020070 	.word	0x40020070
 8104390:	40020088 	.word	0x40020088
 8104394:	400200a0 	.word	0x400200a0
 8104398:	400200b8 	.word	0x400200b8
 810439c:	40020410 	.word	0x40020410
 81043a0:	40020428 	.word	0x40020428
 81043a4:	40020440 	.word	0x40020440
 81043a8:	40020458 	.word	0x40020458
 81043ac:	40020470 	.word	0x40020470
 81043b0:	40020488 	.word	0x40020488
 81043b4:	400204a0 	.word	0x400204a0
 81043b8:	400204b8 	.word	0x400204b8
 81043bc:	58025408 	.word	0x58025408
 81043c0:	5802541c 	.word	0x5802541c
 81043c4:	58025430 	.word	0x58025430
 81043c8:	58025444 	.word	0x58025444
 81043cc:	58025458 	.word	0x58025458
 81043d0:	5802546c 	.word	0x5802546c
 81043d4:	58025480 	.word	0x58025480
 81043d8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81043dc:	68fb      	ldr	r3, [r7, #12]
 81043de:	681b      	ldr	r3, [r3, #0]
 81043e0:	4a28      	ldr	r2, [pc, #160]	; (8104484 <DMA_SetConfig+0x338>)
 81043e2:	4293      	cmp	r3, r2
 81043e4:	d022      	beq.n	810442c <DMA_SetConfig+0x2e0>
 81043e6:	68fb      	ldr	r3, [r7, #12]
 81043e8:	681b      	ldr	r3, [r3, #0]
 81043ea:	4a27      	ldr	r2, [pc, #156]	; (8104488 <DMA_SetConfig+0x33c>)
 81043ec:	4293      	cmp	r3, r2
 81043ee:	d01d      	beq.n	810442c <DMA_SetConfig+0x2e0>
 81043f0:	68fb      	ldr	r3, [r7, #12]
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	4a25      	ldr	r2, [pc, #148]	; (810448c <DMA_SetConfig+0x340>)
 81043f6:	4293      	cmp	r3, r2
 81043f8:	d018      	beq.n	810442c <DMA_SetConfig+0x2e0>
 81043fa:	68fb      	ldr	r3, [r7, #12]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	4a24      	ldr	r2, [pc, #144]	; (8104490 <DMA_SetConfig+0x344>)
 8104400:	4293      	cmp	r3, r2
 8104402:	d013      	beq.n	810442c <DMA_SetConfig+0x2e0>
 8104404:	68fb      	ldr	r3, [r7, #12]
 8104406:	681b      	ldr	r3, [r3, #0]
 8104408:	4a22      	ldr	r2, [pc, #136]	; (8104494 <DMA_SetConfig+0x348>)
 810440a:	4293      	cmp	r3, r2
 810440c:	d00e      	beq.n	810442c <DMA_SetConfig+0x2e0>
 810440e:	68fb      	ldr	r3, [r7, #12]
 8104410:	681b      	ldr	r3, [r3, #0]
 8104412:	4a21      	ldr	r2, [pc, #132]	; (8104498 <DMA_SetConfig+0x34c>)
 8104414:	4293      	cmp	r3, r2
 8104416:	d009      	beq.n	810442c <DMA_SetConfig+0x2e0>
 8104418:	68fb      	ldr	r3, [r7, #12]
 810441a:	681b      	ldr	r3, [r3, #0]
 810441c:	4a1f      	ldr	r2, [pc, #124]	; (810449c <DMA_SetConfig+0x350>)
 810441e:	4293      	cmp	r3, r2
 8104420:	d004      	beq.n	810442c <DMA_SetConfig+0x2e0>
 8104422:	68fb      	ldr	r3, [r7, #12]
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	4a1e      	ldr	r2, [pc, #120]	; (81044a0 <DMA_SetConfig+0x354>)
 8104428:	4293      	cmp	r3, r2
 810442a:	d101      	bne.n	8104430 <DMA_SetConfig+0x2e4>
 810442c:	2301      	movs	r3, #1
 810442e:	e000      	b.n	8104432 <DMA_SetConfig+0x2e6>
 8104430:	2300      	movs	r3, #0
 8104432:	2b00      	cmp	r3, #0
 8104434:	d020      	beq.n	8104478 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104436:	68fb      	ldr	r3, [r7, #12]
 8104438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810443a:	f003 031f 	and.w	r3, r3, #31
 810443e:	2201      	movs	r2, #1
 8104440:	409a      	lsls	r2, r3
 8104442:	693b      	ldr	r3, [r7, #16]
 8104444:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8104446:	68fb      	ldr	r3, [r7, #12]
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	683a      	ldr	r2, [r7, #0]
 810444c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	689b      	ldr	r3, [r3, #8]
 8104452:	2b40      	cmp	r3, #64	; 0x40
 8104454:	d108      	bne.n	8104468 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	681b      	ldr	r3, [r3, #0]
 810445a:	687a      	ldr	r2, [r7, #4]
 810445c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	68ba      	ldr	r2, [r7, #8]
 8104464:	60da      	str	r2, [r3, #12]
}
 8104466:	e007      	b.n	8104478 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8104468:	68fb      	ldr	r3, [r7, #12]
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	68ba      	ldr	r2, [r7, #8]
 810446e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104470:	68fb      	ldr	r3, [r7, #12]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	687a      	ldr	r2, [r7, #4]
 8104476:	60da      	str	r2, [r3, #12]
}
 8104478:	bf00      	nop
 810447a:	371c      	adds	r7, #28
 810447c:	46bd      	mov	sp, r7
 810447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104482:	4770      	bx	lr
 8104484:	58025408 	.word	0x58025408
 8104488:	5802541c 	.word	0x5802541c
 810448c:	58025430 	.word	0x58025430
 8104490:	58025444 	.word	0x58025444
 8104494:	58025458 	.word	0x58025458
 8104498:	5802546c 	.word	0x5802546c
 810449c:	58025480 	.word	0x58025480
 81044a0:	58025494 	.word	0x58025494

081044a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81044a4:	b480      	push	{r7}
 81044a6:	b085      	sub	sp, #20
 81044a8:	af00      	add	r7, sp, #0
 81044aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	4a43      	ldr	r2, [pc, #268]	; (81045c0 <DMA_CalcBaseAndBitshift+0x11c>)
 81044b2:	4293      	cmp	r3, r2
 81044b4:	d04a      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	4a42      	ldr	r2, [pc, #264]	; (81045c4 <DMA_CalcBaseAndBitshift+0x120>)
 81044bc:	4293      	cmp	r3, r2
 81044be:	d045      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	4a40      	ldr	r2, [pc, #256]	; (81045c8 <DMA_CalcBaseAndBitshift+0x124>)
 81044c6:	4293      	cmp	r3, r2
 81044c8:	d040      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	4a3f      	ldr	r2, [pc, #252]	; (81045cc <DMA_CalcBaseAndBitshift+0x128>)
 81044d0:	4293      	cmp	r3, r2
 81044d2:	d03b      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	4a3d      	ldr	r2, [pc, #244]	; (81045d0 <DMA_CalcBaseAndBitshift+0x12c>)
 81044da:	4293      	cmp	r3, r2
 81044dc:	d036      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	681b      	ldr	r3, [r3, #0]
 81044e2:	4a3c      	ldr	r2, [pc, #240]	; (81045d4 <DMA_CalcBaseAndBitshift+0x130>)
 81044e4:	4293      	cmp	r3, r2
 81044e6:	d031      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	4a3a      	ldr	r2, [pc, #232]	; (81045d8 <DMA_CalcBaseAndBitshift+0x134>)
 81044ee:	4293      	cmp	r3, r2
 81044f0:	d02c      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	4a39      	ldr	r2, [pc, #228]	; (81045dc <DMA_CalcBaseAndBitshift+0x138>)
 81044f8:	4293      	cmp	r3, r2
 81044fa:	d027      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	681b      	ldr	r3, [r3, #0]
 8104500:	4a37      	ldr	r2, [pc, #220]	; (81045e0 <DMA_CalcBaseAndBitshift+0x13c>)
 8104502:	4293      	cmp	r3, r2
 8104504:	d022      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 8104506:	687b      	ldr	r3, [r7, #4]
 8104508:	681b      	ldr	r3, [r3, #0]
 810450a:	4a36      	ldr	r2, [pc, #216]	; (81045e4 <DMA_CalcBaseAndBitshift+0x140>)
 810450c:	4293      	cmp	r3, r2
 810450e:	d01d      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	681b      	ldr	r3, [r3, #0]
 8104514:	4a34      	ldr	r2, [pc, #208]	; (81045e8 <DMA_CalcBaseAndBitshift+0x144>)
 8104516:	4293      	cmp	r3, r2
 8104518:	d018      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	4a33      	ldr	r2, [pc, #204]	; (81045ec <DMA_CalcBaseAndBitshift+0x148>)
 8104520:	4293      	cmp	r3, r2
 8104522:	d013      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	4a31      	ldr	r2, [pc, #196]	; (81045f0 <DMA_CalcBaseAndBitshift+0x14c>)
 810452a:	4293      	cmp	r3, r2
 810452c:	d00e      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	681b      	ldr	r3, [r3, #0]
 8104532:	4a30      	ldr	r2, [pc, #192]	; (81045f4 <DMA_CalcBaseAndBitshift+0x150>)
 8104534:	4293      	cmp	r3, r2
 8104536:	d009      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 8104538:	687b      	ldr	r3, [r7, #4]
 810453a:	681b      	ldr	r3, [r3, #0]
 810453c:	4a2e      	ldr	r2, [pc, #184]	; (81045f8 <DMA_CalcBaseAndBitshift+0x154>)
 810453e:	4293      	cmp	r3, r2
 8104540:	d004      	beq.n	810454c <DMA_CalcBaseAndBitshift+0xa8>
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	4a2d      	ldr	r2, [pc, #180]	; (81045fc <DMA_CalcBaseAndBitshift+0x158>)
 8104548:	4293      	cmp	r3, r2
 810454a:	d101      	bne.n	8104550 <DMA_CalcBaseAndBitshift+0xac>
 810454c:	2301      	movs	r3, #1
 810454e:	e000      	b.n	8104552 <DMA_CalcBaseAndBitshift+0xae>
 8104550:	2300      	movs	r3, #0
 8104552:	2b00      	cmp	r3, #0
 8104554:	d026      	beq.n	81045a4 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	b2db      	uxtb	r3, r3
 810455c:	3b10      	subs	r3, #16
 810455e:	4a28      	ldr	r2, [pc, #160]	; (8104600 <DMA_CalcBaseAndBitshift+0x15c>)
 8104560:	fba2 2303 	umull	r2, r3, r2, r3
 8104564:	091b      	lsrs	r3, r3, #4
 8104566:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104568:	68fb      	ldr	r3, [r7, #12]
 810456a:	f003 0307 	and.w	r3, r3, #7
 810456e:	4a25      	ldr	r2, [pc, #148]	; (8104604 <DMA_CalcBaseAndBitshift+0x160>)
 8104570:	5cd3      	ldrb	r3, [r2, r3]
 8104572:	461a      	mov	r2, r3
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8104578:	68fb      	ldr	r3, [r7, #12]
 810457a:	2b03      	cmp	r3, #3
 810457c:	d909      	bls.n	8104592 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	681b      	ldr	r3, [r3, #0]
 8104582:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104586:	f023 0303 	bic.w	r3, r3, #3
 810458a:	1d1a      	adds	r2, r3, #4
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	659a      	str	r2, [r3, #88]	; 0x58
 8104590:	e00e      	b.n	81045b0 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	681b      	ldr	r3, [r3, #0]
 8104596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810459a:	f023 0303 	bic.w	r3, r3, #3
 810459e:	687a      	ldr	r2, [r7, #4]
 81045a0:	6593      	str	r3, [r2, #88]	; 0x58
 81045a2:	e005      	b.n	81045b0 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81045b4:	4618      	mov	r0, r3
 81045b6:	3714      	adds	r7, #20
 81045b8:	46bd      	mov	sp, r7
 81045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045be:	4770      	bx	lr
 81045c0:	40020010 	.word	0x40020010
 81045c4:	40020028 	.word	0x40020028
 81045c8:	40020040 	.word	0x40020040
 81045cc:	40020058 	.word	0x40020058
 81045d0:	40020070 	.word	0x40020070
 81045d4:	40020088 	.word	0x40020088
 81045d8:	400200a0 	.word	0x400200a0
 81045dc:	400200b8 	.word	0x400200b8
 81045e0:	40020410 	.word	0x40020410
 81045e4:	40020428 	.word	0x40020428
 81045e8:	40020440 	.word	0x40020440
 81045ec:	40020458 	.word	0x40020458
 81045f0:	40020470 	.word	0x40020470
 81045f4:	40020488 	.word	0x40020488
 81045f8:	400204a0 	.word	0x400204a0
 81045fc:	400204b8 	.word	0x400204b8
 8104600:	aaaaaaab 	.word	0xaaaaaaab
 8104604:	08111954 	.word	0x08111954

08104608 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8104608:	b480      	push	{r7}
 810460a:	b085      	sub	sp, #20
 810460c:	af00      	add	r7, sp, #0
 810460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104610:	2300      	movs	r3, #0
 8104612:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	699b      	ldr	r3, [r3, #24]
 8104618:	2b00      	cmp	r3, #0
 810461a:	d120      	bne.n	810465e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104620:	2b03      	cmp	r3, #3
 8104622:	d858      	bhi.n	81046d6 <DMA_CheckFifoParam+0xce>
 8104624:	a201      	add	r2, pc, #4	; (adr r2, 810462c <DMA_CheckFifoParam+0x24>)
 8104626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810462a:	bf00      	nop
 810462c:	0810463d 	.word	0x0810463d
 8104630:	0810464f 	.word	0x0810464f
 8104634:	0810463d 	.word	0x0810463d
 8104638:	081046d7 	.word	0x081046d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104644:	2b00      	cmp	r3, #0
 8104646:	d048      	beq.n	81046da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104648:	2301      	movs	r3, #1
 810464a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810464c:	e045      	b.n	81046da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104656:	d142      	bne.n	81046de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104658:	2301      	movs	r3, #1
 810465a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810465c:	e03f      	b.n	81046de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	699b      	ldr	r3, [r3, #24]
 8104662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104666:	d123      	bne.n	81046b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810466c:	2b03      	cmp	r3, #3
 810466e:	d838      	bhi.n	81046e2 <DMA_CheckFifoParam+0xda>
 8104670:	a201      	add	r2, pc, #4	; (adr r2, 8104678 <DMA_CheckFifoParam+0x70>)
 8104672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104676:	bf00      	nop
 8104678:	08104689 	.word	0x08104689
 810467c:	0810468f 	.word	0x0810468f
 8104680:	08104689 	.word	0x08104689
 8104684:	081046a1 	.word	0x081046a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104688:	2301      	movs	r3, #1
 810468a:	73fb      	strb	r3, [r7, #15]
        break;
 810468c:	e030      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104696:	2b00      	cmp	r3, #0
 8104698:	d025      	beq.n	81046e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810469a:	2301      	movs	r3, #1
 810469c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810469e:	e022      	b.n	81046e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81046a8:	d11f      	bne.n	81046ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81046aa:	2301      	movs	r3, #1
 81046ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81046ae:	e01c      	b.n	81046ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81046b4:	2b02      	cmp	r3, #2
 81046b6:	d902      	bls.n	81046be <DMA_CheckFifoParam+0xb6>
 81046b8:	2b03      	cmp	r3, #3
 81046ba:	d003      	beq.n	81046c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81046bc:	e018      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81046be:	2301      	movs	r3, #1
 81046c0:	73fb      	strb	r3, [r7, #15]
        break;
 81046c2:	e015      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81046cc:	2b00      	cmp	r3, #0
 81046ce:	d00e      	beq.n	81046ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81046d0:	2301      	movs	r3, #1
 81046d2:	73fb      	strb	r3, [r7, #15]
    break;
 81046d4:	e00b      	b.n	81046ee <DMA_CheckFifoParam+0xe6>
        break;
 81046d6:	bf00      	nop
 81046d8:	e00a      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>
        break;
 81046da:	bf00      	nop
 81046dc:	e008      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>
        break;
 81046de:	bf00      	nop
 81046e0:	e006      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>
        break;
 81046e2:	bf00      	nop
 81046e4:	e004      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>
        break;
 81046e6:	bf00      	nop
 81046e8:	e002      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>
        break;
 81046ea:	bf00      	nop
 81046ec:	e000      	b.n	81046f0 <DMA_CheckFifoParam+0xe8>
    break;
 81046ee:	bf00      	nop
    }
  }

  return status;
 81046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81046f2:	4618      	mov	r0, r3
 81046f4:	3714      	adds	r7, #20
 81046f6:	46bd      	mov	sp, r7
 81046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046fc:	4770      	bx	lr
 81046fe:	bf00      	nop

08104700 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104700:	b480      	push	{r7}
 8104702:	b085      	sub	sp, #20
 8104704:	af00      	add	r7, sp, #0
 8104706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810470e:	687b      	ldr	r3, [r7, #4]
 8104710:	681b      	ldr	r3, [r3, #0]
 8104712:	4a3a      	ldr	r2, [pc, #232]	; (81047fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104714:	4293      	cmp	r3, r2
 8104716:	d022      	beq.n	810475e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	4a38      	ldr	r2, [pc, #224]	; (8104800 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 810471e:	4293      	cmp	r3, r2
 8104720:	d01d      	beq.n	810475e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	4a37      	ldr	r2, [pc, #220]	; (8104804 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104728:	4293      	cmp	r3, r2
 810472a:	d018      	beq.n	810475e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	4a35      	ldr	r2, [pc, #212]	; (8104808 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104732:	4293      	cmp	r3, r2
 8104734:	d013      	beq.n	810475e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	4a34      	ldr	r2, [pc, #208]	; (810480c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 810473c:	4293      	cmp	r3, r2
 810473e:	d00e      	beq.n	810475e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	681b      	ldr	r3, [r3, #0]
 8104744:	4a32      	ldr	r2, [pc, #200]	; (8104810 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104746:	4293      	cmp	r3, r2
 8104748:	d009      	beq.n	810475e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	4a31      	ldr	r2, [pc, #196]	; (8104814 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104750:	4293      	cmp	r3, r2
 8104752:	d004      	beq.n	810475e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	4a2f      	ldr	r2, [pc, #188]	; (8104818 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810475a:	4293      	cmp	r3, r2
 810475c:	d101      	bne.n	8104762 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 810475e:	2301      	movs	r3, #1
 8104760:	e000      	b.n	8104764 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104762:	2300      	movs	r3, #0
 8104764:	2b00      	cmp	r3, #0
 8104766:	d01c      	beq.n	81047a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	b2db      	uxtb	r3, r3
 810476e:	3b08      	subs	r3, #8
 8104770:	4a2a      	ldr	r2, [pc, #168]	; (810481c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104772:	fba2 2303 	umull	r2, r3, r2, r3
 8104776:	091b      	lsrs	r3, r3, #4
 8104778:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810477a:	68fb      	ldr	r3, [r7, #12]
 810477c:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104780:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104784:	009b      	lsls	r3, r3, #2
 8104786:	461a      	mov	r2, r3
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	4a24      	ldr	r2, [pc, #144]	; (8104820 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104790:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104792:	68fb      	ldr	r3, [r7, #12]
 8104794:	f003 031f 	and.w	r3, r3, #31
 8104798:	2201      	movs	r2, #1
 810479a:	409a      	lsls	r2, r3
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81047a0:	e026      	b.n	81047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	681b      	ldr	r3, [r3, #0]
 81047a6:	b2db      	uxtb	r3, r3
 81047a8:	3b10      	subs	r3, #16
 81047aa:	4a1e      	ldr	r2, [pc, #120]	; (8104824 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81047ac:	fba2 2303 	umull	r2, r3, r2, r3
 81047b0:	091b      	lsrs	r3, r3, #4
 81047b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81047b4:	68bb      	ldr	r3, [r7, #8]
 81047b6:	4a1c      	ldr	r2, [pc, #112]	; (8104828 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81047b8:	4293      	cmp	r3, r2
 81047ba:	d806      	bhi.n	81047ca <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81047bc:	68bb      	ldr	r3, [r7, #8]
 81047be:	4a1b      	ldr	r2, [pc, #108]	; (810482c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81047c0:	4293      	cmp	r3, r2
 81047c2:	d902      	bls.n	81047ca <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81047c4:	68fb      	ldr	r3, [r7, #12]
 81047c6:	3308      	adds	r3, #8
 81047c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81047d0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81047d4:	009b      	lsls	r3, r3, #2
 81047d6:	461a      	mov	r2, r3
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	4a14      	ldr	r2, [pc, #80]	; (8104830 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81047e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81047e2:	68fb      	ldr	r3, [r7, #12]
 81047e4:	f003 031f 	and.w	r3, r3, #31
 81047e8:	2201      	movs	r2, #1
 81047ea:	409a      	lsls	r2, r3
 81047ec:	687b      	ldr	r3, [r7, #4]
 81047ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 81047f0:	bf00      	nop
 81047f2:	3714      	adds	r7, #20
 81047f4:	46bd      	mov	sp, r7
 81047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047fa:	4770      	bx	lr
 81047fc:	58025408 	.word	0x58025408
 8104800:	5802541c 	.word	0x5802541c
 8104804:	58025430 	.word	0x58025430
 8104808:	58025444 	.word	0x58025444
 810480c:	58025458 	.word	0x58025458
 8104810:	5802546c 	.word	0x5802546c
 8104814:	58025480 	.word	0x58025480
 8104818:	58025494 	.word	0x58025494
 810481c:	cccccccd 	.word	0xcccccccd
 8104820:	58025880 	.word	0x58025880
 8104824:	aaaaaaab 	.word	0xaaaaaaab
 8104828:	400204b8 	.word	0x400204b8
 810482c:	4002040f 	.word	0x4002040f
 8104830:	40020880 	.word	0x40020880

08104834 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104834:	b480      	push	{r7}
 8104836:	b085      	sub	sp, #20
 8104838:	af00      	add	r7, sp, #0
 810483a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	685b      	ldr	r3, [r3, #4]
 8104840:	b2db      	uxtb	r3, r3
 8104842:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104844:	68fb      	ldr	r3, [r7, #12]
 8104846:	2b00      	cmp	r3, #0
 8104848:	d04a      	beq.n	81048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810484a:	68fb      	ldr	r3, [r7, #12]
 810484c:	2b08      	cmp	r3, #8
 810484e:	d847      	bhi.n	81048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	681b      	ldr	r3, [r3, #0]
 8104854:	4a25      	ldr	r2, [pc, #148]	; (81048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104856:	4293      	cmp	r3, r2
 8104858:	d022      	beq.n	81048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	681b      	ldr	r3, [r3, #0]
 810485e:	4a24      	ldr	r2, [pc, #144]	; (81048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104860:	4293      	cmp	r3, r2
 8104862:	d01d      	beq.n	81048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	4a22      	ldr	r2, [pc, #136]	; (81048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810486a:	4293      	cmp	r3, r2
 810486c:	d018      	beq.n	81048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	4a21      	ldr	r2, [pc, #132]	; (81048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104874:	4293      	cmp	r3, r2
 8104876:	d013      	beq.n	81048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	681b      	ldr	r3, [r3, #0]
 810487c:	4a1f      	ldr	r2, [pc, #124]	; (81048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810487e:	4293      	cmp	r3, r2
 8104880:	d00e      	beq.n	81048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	681b      	ldr	r3, [r3, #0]
 8104886:	4a1e      	ldr	r2, [pc, #120]	; (8104900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104888:	4293      	cmp	r3, r2
 810488a:	d009      	beq.n	81048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	681b      	ldr	r3, [r3, #0]
 8104890:	4a1c      	ldr	r2, [pc, #112]	; (8104904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104892:	4293      	cmp	r3, r2
 8104894:	d004      	beq.n	81048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	4a1b      	ldr	r2, [pc, #108]	; (8104908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 810489c:	4293      	cmp	r3, r2
 810489e:	d101      	bne.n	81048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81048a0:	2301      	movs	r3, #1
 81048a2:	e000      	b.n	81048a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81048a4:	2300      	movs	r3, #0
 81048a6:	2b00      	cmp	r3, #0
 81048a8:	d00a      	beq.n	81048c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81048aa:	68fa      	ldr	r2, [r7, #12]
 81048ac:	4b17      	ldr	r3, [pc, #92]	; (810490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81048ae:	4413      	add	r3, r2
 81048b0:	009b      	lsls	r3, r3, #2
 81048b2:	461a      	mov	r2, r3
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	4a15      	ldr	r2, [pc, #84]	; (8104910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81048bc:	671a      	str	r2, [r3, #112]	; 0x70
 81048be:	e009      	b.n	81048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81048c0:	68fa      	ldr	r2, [r7, #12]
 81048c2:	4b14      	ldr	r3, [pc, #80]	; (8104914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81048c4:	4413      	add	r3, r2
 81048c6:	009b      	lsls	r3, r3, #2
 81048c8:	461a      	mov	r2, r3
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	4a11      	ldr	r2, [pc, #68]	; (8104918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81048d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81048d4:	68fb      	ldr	r3, [r7, #12]
 81048d6:	3b01      	subs	r3, #1
 81048d8:	2201      	movs	r2, #1
 81048da:	409a      	lsls	r2, r3
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81048e0:	bf00      	nop
 81048e2:	3714      	adds	r7, #20
 81048e4:	46bd      	mov	sp, r7
 81048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048ea:	4770      	bx	lr
 81048ec:	58025408 	.word	0x58025408
 81048f0:	5802541c 	.word	0x5802541c
 81048f4:	58025430 	.word	0x58025430
 81048f8:	58025444 	.word	0x58025444
 81048fc:	58025458 	.word	0x58025458
 8104900:	5802546c 	.word	0x5802546c
 8104904:	58025480 	.word	0x58025480
 8104908:	58025494 	.word	0x58025494
 810490c:	1600963f 	.word	0x1600963f
 8104910:	58025940 	.word	0x58025940
 8104914:	1000823f 	.word	0x1000823f
 8104918:	40020940 	.word	0x40020940

0810491c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 810491c:	b580      	push	{r7, lr}
 810491e:	b098      	sub	sp, #96	; 0x60
 8104920:	af00      	add	r7, sp, #0
 8104922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8104924:	4a84      	ldr	r2, [pc, #528]	; (8104b38 <HAL_FDCAN_Init+0x21c>)
 8104926:	f107 030c 	add.w	r3, r7, #12
 810492a:	4611      	mov	r1, r2
 810492c:	224c      	movs	r2, #76	; 0x4c
 810492e:	4618      	mov	r0, r3
 8104930:	f009 fe04 	bl	810e53c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	2b00      	cmp	r3, #0
 8104938:	d101      	bne.n	810493e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 810493a:	2301      	movs	r3, #1
 810493c:	e1ca      	b.n	8104cd4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	4a7e      	ldr	r2, [pc, #504]	; (8104b3c <HAL_FDCAN_Init+0x220>)
 8104944:	4293      	cmp	r3, r2
 8104946:	d106      	bne.n	8104956 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8104950:	461a      	mov	r2, r3
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 810495c:	b2db      	uxtb	r3, r3
 810495e:	2b00      	cmp	r3, #0
 8104960:	d106      	bne.n	8104970 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	2200      	movs	r2, #0
 8104966:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 810496a:	6878      	ldr	r0, [r7, #4]
 810496c:	f7fc fc8c 	bl	8101288 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	699a      	ldr	r2, [r3, #24]
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	f022 0210 	bic.w	r2, r2, #16
 810497e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104980:	f7fd fb98 	bl	81020b4 <HAL_GetTick>
 8104984:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8104986:	e014      	b.n	81049b2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8104988:	f7fd fb94 	bl	81020b4 <HAL_GetTick>
 810498c:	4602      	mov	r2, r0
 810498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8104990:	1ad3      	subs	r3, r2, r3
 8104992:	2b0a      	cmp	r3, #10
 8104994:	d90d      	bls.n	81049b2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8104996:	687b      	ldr	r3, [r7, #4]
 8104998:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810499c:	f043 0201 	orr.w	r2, r3, #1
 81049a0:	687b      	ldr	r3, [r7, #4]
 81049a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	2203      	movs	r2, #3
 81049aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 81049ae:	2301      	movs	r3, #1
 81049b0:	e190      	b.n	8104cd4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	681b      	ldr	r3, [r3, #0]
 81049b6:	699b      	ldr	r3, [r3, #24]
 81049b8:	f003 0308 	and.w	r3, r3, #8
 81049bc:	2b08      	cmp	r3, #8
 81049be:	d0e3      	beq.n	8104988 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	699a      	ldr	r2, [r3, #24]
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	f042 0201 	orr.w	r2, r2, #1
 81049ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 81049d0:	f7fd fb70 	bl	81020b4 <HAL_GetTick>
 81049d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 81049d6:	e014      	b.n	8104a02 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 81049d8:	f7fd fb6c 	bl	81020b4 <HAL_GetTick>
 81049dc:	4602      	mov	r2, r0
 81049de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81049e0:	1ad3      	subs	r3, r2, r3
 81049e2:	2b0a      	cmp	r3, #10
 81049e4:	d90d      	bls.n	8104a02 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81049ec:	f043 0201 	orr.w	r2, r3, #1
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	2203      	movs	r2, #3
 81049fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 81049fe:	2301      	movs	r3, #1
 8104a00:	e168      	b.n	8104cd4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8104a02:	687b      	ldr	r3, [r7, #4]
 8104a04:	681b      	ldr	r3, [r3, #0]
 8104a06:	699b      	ldr	r3, [r3, #24]
 8104a08:	f003 0301 	and.w	r3, r3, #1
 8104a0c:	2b00      	cmp	r3, #0
 8104a0e:	d0e3      	beq.n	81049d8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	699a      	ldr	r2, [r3, #24]
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	681b      	ldr	r3, [r3, #0]
 8104a1a:	f042 0202 	orr.w	r2, r2, #2
 8104a1e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	7c1b      	ldrb	r3, [r3, #16]
 8104a24:	2b01      	cmp	r3, #1
 8104a26:	d108      	bne.n	8104a3a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8104a28:	687b      	ldr	r3, [r7, #4]
 8104a2a:	681b      	ldr	r3, [r3, #0]
 8104a2c:	699a      	ldr	r2, [r3, #24]
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8104a36:	619a      	str	r2, [r3, #24]
 8104a38:	e007      	b.n	8104a4a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	699a      	ldr	r2, [r3, #24]
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104a48:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8104a4a:	687b      	ldr	r3, [r7, #4]
 8104a4c:	7c5b      	ldrb	r3, [r3, #17]
 8104a4e:	2b01      	cmp	r3, #1
 8104a50:	d108      	bne.n	8104a64 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	699a      	ldr	r2, [r3, #24]
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	681b      	ldr	r3, [r3, #0]
 8104a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104a60:	619a      	str	r2, [r3, #24]
 8104a62:	e007      	b.n	8104a74 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	681b      	ldr	r3, [r3, #0]
 8104a68:	699a      	ldr	r2, [r3, #24]
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	681b      	ldr	r3, [r3, #0]
 8104a6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8104a72:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8104a74:	687b      	ldr	r3, [r7, #4]
 8104a76:	7c9b      	ldrb	r3, [r3, #18]
 8104a78:	2b01      	cmp	r3, #1
 8104a7a:	d108      	bne.n	8104a8e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	699a      	ldr	r2, [r3, #24]
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8104a8a:	619a      	str	r2, [r3, #24]
 8104a8c:	e007      	b.n	8104a9e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	681b      	ldr	r3, [r3, #0]
 8104a92:	699a      	ldr	r2, [r3, #24]
 8104a94:	687b      	ldr	r3, [r7, #4]
 8104a96:	681b      	ldr	r3, [r3, #0]
 8104a98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104a9c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	699b      	ldr	r3, [r3, #24]
 8104aa4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	689a      	ldr	r2, [r3, #8]
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	681b      	ldr	r3, [r3, #0]
 8104ab0:	430a      	orrs	r2, r1
 8104ab2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8104ab4:	687b      	ldr	r3, [r7, #4]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	699a      	ldr	r2, [r3, #24]
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8104ac2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	691a      	ldr	r2, [r3, #16]
 8104aca:	687b      	ldr	r3, [r7, #4]
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	f022 0210 	bic.w	r2, r2, #16
 8104ad2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	68db      	ldr	r3, [r3, #12]
 8104ad8:	2b01      	cmp	r3, #1
 8104ada:	d108      	bne.n	8104aee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	699a      	ldr	r2, [r3, #24]
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	f042 0204 	orr.w	r2, r2, #4
 8104aea:	619a      	str	r2, [r3, #24]
 8104aec:	e030      	b.n	8104b50 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	68db      	ldr	r3, [r3, #12]
 8104af2:	2b00      	cmp	r3, #0
 8104af4:	d02c      	beq.n	8104b50 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	68db      	ldr	r3, [r3, #12]
 8104afa:	2b02      	cmp	r3, #2
 8104afc:	d020      	beq.n	8104b40 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	681b      	ldr	r3, [r3, #0]
 8104b02:	699a      	ldr	r2, [r3, #24]
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8104b0c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	681b      	ldr	r3, [r3, #0]
 8104b12:	691a      	ldr	r2, [r3, #16]
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	f042 0210 	orr.w	r2, r2, #16
 8104b1c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	68db      	ldr	r3, [r3, #12]
 8104b22:	2b03      	cmp	r3, #3
 8104b24:	d114      	bne.n	8104b50 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	681b      	ldr	r3, [r3, #0]
 8104b2a:	699a      	ldr	r2, [r3, #24]
 8104b2c:	687b      	ldr	r3, [r7, #4]
 8104b2e:	681b      	ldr	r3, [r3, #0]
 8104b30:	f042 0220 	orr.w	r2, r2, #32
 8104b34:	619a      	str	r2, [r3, #24]
 8104b36:	e00b      	b.n	8104b50 <HAL_FDCAN_Init+0x234>
 8104b38:	081112a8 	.word	0x081112a8
 8104b3c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	681b      	ldr	r3, [r3, #0]
 8104b44:	699a      	ldr	r2, [r3, #24]
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	681b      	ldr	r3, [r3, #0]
 8104b4a:	f042 0220 	orr.w	r2, r2, #32
 8104b4e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	699b      	ldr	r3, [r3, #24]
 8104b54:	3b01      	subs	r3, #1
 8104b56:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	69db      	ldr	r3, [r3, #28]
 8104b5c:	3b01      	subs	r3, #1
 8104b5e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104b60:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	6a1b      	ldr	r3, [r3, #32]
 8104b66:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8104b68:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	695b      	ldr	r3, [r3, #20]
 8104b70:	3b01      	subs	r3, #1
 8104b72:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8104b78:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104b7a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	689b      	ldr	r3, [r3, #8]
 8104b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104b84:	d115      	bne.n	8104bb2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b8a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b90:	3b01      	subs	r3, #1
 8104b92:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8104b94:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8104b96:	687b      	ldr	r3, [r7, #4]
 8104b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b9a:	3b01      	subs	r3, #1
 8104b9c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8104b9e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ba6:	3b01      	subs	r3, #1
 8104ba8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8104bae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8104bb0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8104bb2:	687b      	ldr	r3, [r7, #4]
 8104bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104bb6:	2b00      	cmp	r3, #0
 8104bb8:	d00a      	beq.n	8104bd0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8104bba:	687b      	ldr	r3, [r7, #4]
 8104bbc:	681b      	ldr	r3, [r3, #0]
 8104bbe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	681b      	ldr	r3, [r3, #0]
 8104bca:	430a      	orrs	r2, r1
 8104bcc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104bd8:	4413      	add	r3, r2
 8104bda:	2b00      	cmp	r3, #0
 8104bdc:	d012      	beq.n	8104c04 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	681b      	ldr	r3, [r3, #0]
 8104be2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8104be6:	f023 0107 	bic.w	r1, r3, #7
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104bee:	009b      	lsls	r3, r3, #2
 8104bf0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104bf4:	4413      	add	r3, r2
 8104bf6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	681b      	ldr	r3, [r3, #0]
 8104bfe:	430a      	orrs	r2, r1
 8104c00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c08:	2b00      	cmp	r3, #0
 8104c0a:	d012      	beq.n	8104c32 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104c14:	f023 0107 	bic.w	r1, r3, #7
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104c1c:	009b      	lsls	r3, r3, #2
 8104c1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104c22:	4413      	add	r3, r2
 8104c24:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8104c28:	687b      	ldr	r3, [r7, #4]
 8104c2a:	681b      	ldr	r3, [r3, #0]
 8104c2c:	430a      	orrs	r2, r1
 8104c2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104c36:	2b00      	cmp	r3, #0
 8104c38:	d013      	beq.n	8104c62 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104c42:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8104c46:	687b      	ldr	r3, [r7, #4]
 8104c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104c4a:	009b      	lsls	r3, r3, #2
 8104c4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104c50:	4413      	add	r3, r2
 8104c52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8104c56:	011a      	lsls	r2, r3, #4
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	430a      	orrs	r2, r1
 8104c5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c66:	2b00      	cmp	r3, #0
 8104c68:	d013      	beq.n	8104c92 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104c72:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c7a:	009b      	lsls	r3, r3, #2
 8104c7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8104c80:	4413      	add	r3, r2
 8104c82:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8104c86:	021a      	lsls	r2, r3, #8
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	681b      	ldr	r3, [r3, #0]
 8104c8c:	430a      	orrs	r2, r1
 8104c8e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	4a11      	ldr	r2, [pc, #68]	; (8104cdc <HAL_FDCAN_Init+0x3c0>)
 8104c98:	4293      	cmp	r3, r2
 8104c9a:	d107      	bne.n	8104cac <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	685b      	ldr	r3, [r3, #4]
 8104ca0:	689a      	ldr	r2, [r3, #8]
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	685b      	ldr	r3, [r3, #4]
 8104ca6:	f022 0203 	bic.w	r2, r2, #3
 8104caa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8104cac:	687b      	ldr	r3, [r7, #4]
 8104cae:	2200      	movs	r2, #0
 8104cb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	2200      	movs	r2, #0
 8104cb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	2201      	movs	r2, #1
 8104cc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8104cc4:	6878      	ldr	r0, [r7, #4]
 8104cc6:	f000 f80b 	bl	8104ce0 <FDCAN_CalcultateRamBlockAddresses>
 8104cca:	4603      	mov	r3, r0
 8104ccc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8104cd0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8104cd4:	4618      	mov	r0, r3
 8104cd6:	3760      	adds	r7, #96	; 0x60
 8104cd8:	46bd      	mov	sp, r7
 8104cda:	bd80      	pop	{r7, pc}
 8104cdc:	4000a000 	.word	0x4000a000

08104ce0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8104ce0:	b480      	push	{r7}
 8104ce2:	b085      	sub	sp, #20
 8104ce4:	af00      	add	r7, sp, #0
 8104ce6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104cec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	681b      	ldr	r3, [r3, #0]
 8104cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104cfa:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104cfe:	68ba      	ldr	r2, [r7, #8]
 8104d00:	0091      	lsls	r1, r2, #2
 8104d02:	687a      	ldr	r2, [r7, #4]
 8104d04:	6812      	ldr	r2, [r2, #0]
 8104d06:	430b      	orrs	r3, r1
 8104d08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	681b      	ldr	r3, [r3, #0]
 8104d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d14:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104d1c:	041a      	lsls	r2, r3, #16
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	681b      	ldr	r3, [r3, #0]
 8104d22:	430a      	orrs	r2, r1
 8104d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104d2c:	68ba      	ldr	r2, [r7, #8]
 8104d2e:	4413      	add	r3, r2
 8104d30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	681b      	ldr	r3, [r3, #0]
 8104d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104d3e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104d42:	68ba      	ldr	r2, [r7, #8]
 8104d44:	0091      	lsls	r1, r2, #2
 8104d46:	687a      	ldr	r2, [r7, #4]
 8104d48:	6812      	ldr	r2, [r2, #0]
 8104d4a:	430b      	orrs	r3, r1
 8104d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8104d50:	687b      	ldr	r3, [r7, #4]
 8104d52:	681b      	ldr	r3, [r3, #0]
 8104d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104d58:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104d60:	041a      	lsls	r2, r3, #16
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	681b      	ldr	r3, [r3, #0]
 8104d66:	430a      	orrs	r2, r1
 8104d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104d70:	005b      	lsls	r3, r3, #1
 8104d72:	68ba      	ldr	r2, [r7, #8]
 8104d74:	4413      	add	r3, r2
 8104d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104d80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104d84:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104d88:	68ba      	ldr	r2, [r7, #8]
 8104d8a:	0091      	lsls	r1, r2, #2
 8104d8c:	687a      	ldr	r2, [r7, #4]
 8104d8e:	6812      	ldr	r2, [r2, #0]
 8104d90:	430b      	orrs	r3, r1
 8104d92:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8104d96:	687b      	ldr	r3, [r7, #4]
 8104d98:	681b      	ldr	r3, [r3, #0]
 8104d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104d9e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104da6:	041a      	lsls	r2, r3, #16
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	430a      	orrs	r2, r1
 8104dae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104db6:	687a      	ldr	r2, [r7, #4]
 8104db8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8104dba:	fb02 f303 	mul.w	r3, r2, r3
 8104dbe:	68ba      	ldr	r2, [r7, #8]
 8104dc0:	4413      	add	r3, r2
 8104dc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104dcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104dd0:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104dd4:	68ba      	ldr	r2, [r7, #8]
 8104dd6:	0091      	lsls	r1, r2, #2
 8104dd8:	687a      	ldr	r2, [r7, #4]
 8104dda:	6812      	ldr	r2, [r2, #0]
 8104ddc:	430b      	orrs	r3, r1
 8104dde:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	681b      	ldr	r3, [r3, #0]
 8104de6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104dea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104df2:	041a      	lsls	r2, r3, #16
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	430a      	orrs	r2, r1
 8104dfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104e02:	687a      	ldr	r2, [r7, #4]
 8104e04:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8104e06:	fb02 f303 	mul.w	r3, r2, r3
 8104e0a:	68ba      	ldr	r2, [r7, #8]
 8104e0c:	4413      	add	r3, r2
 8104e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104e18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104e1c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104e20:	68ba      	ldr	r2, [r7, #8]
 8104e22:	0091      	lsls	r1, r2, #2
 8104e24:	687a      	ldr	r2, [r7, #4]
 8104e26:	6812      	ldr	r2, [r2, #0]
 8104e28:	430b      	orrs	r3, r1
 8104e2a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e32:	687a      	ldr	r2, [r7, #4]
 8104e34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8104e36:	fb02 f303 	mul.w	r3, r2, r3
 8104e3a:	68ba      	ldr	r2, [r7, #8]
 8104e3c:	4413      	add	r3, r2
 8104e3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8104e40:	687b      	ldr	r3, [r7, #4]
 8104e42:	681b      	ldr	r3, [r3, #0]
 8104e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104e4c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104e50:	68ba      	ldr	r2, [r7, #8]
 8104e52:	0091      	lsls	r1, r2, #2
 8104e54:	687a      	ldr	r2, [r7, #4]
 8104e56:	6812      	ldr	r2, [r2, #0]
 8104e58:	430b      	orrs	r3, r1
 8104e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104e66:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e6e:	041a      	lsls	r2, r3, #16
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	430a      	orrs	r2, r1
 8104e76:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e7e:	005b      	lsls	r3, r3, #1
 8104e80:	68ba      	ldr	r2, [r7, #8]
 8104e82:	4413      	add	r3, r2
 8104e84:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8104e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104e92:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8104e96:	68ba      	ldr	r2, [r7, #8]
 8104e98:	0091      	lsls	r1, r2, #2
 8104e9a:	687a      	ldr	r2, [r7, #4]
 8104e9c:	6812      	ldr	r2, [r2, #0]
 8104e9e:	430b      	orrs	r3, r1
 8104ea0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8104eac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104eb4:	041a      	lsls	r2, r3, #16
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	681b      	ldr	r3, [r3, #0]
 8104eba:	430a      	orrs	r2, r1
 8104ebc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	681b      	ldr	r3, [r3, #0]
 8104ec4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8104ec8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104ed0:	061a      	lsls	r2, r3, #24
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	681b      	ldr	r3, [r3, #0]
 8104ed6:	430a      	orrs	r2, r1
 8104ed8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104ee0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8104ee4:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8104ee8:	009a      	lsls	r2, r3, #2
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8104ef2:	687b      	ldr	r3, [r7, #4]
 8104ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ef6:	009b      	lsls	r3, r3, #2
 8104ef8:	441a      	add	r2, r3
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104f06:	00db      	lsls	r3, r3, #3
 8104f08:	441a      	add	r2, r3
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104f16:	6879      	ldr	r1, [r7, #4]
 8104f18:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8104f1a:	fb01 f303 	mul.w	r3, r1, r3
 8104f1e:	009b      	lsls	r3, r3, #2
 8104f20:	441a      	add	r2, r3
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8104f2a:	687b      	ldr	r3, [r7, #4]
 8104f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104f2e:	6879      	ldr	r1, [r7, #4]
 8104f30:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8104f32:	fb01 f303 	mul.w	r3, r1, r3
 8104f36:	009b      	lsls	r3, r3, #2
 8104f38:	441a      	add	r2, r3
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f46:	6879      	ldr	r1, [r7, #4]
 8104f48:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8104f4a:	fb01 f303 	mul.w	r3, r1, r3
 8104f4e:	009b      	lsls	r3, r3, #2
 8104f50:	441a      	add	r2, r3
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f62:	00db      	lsls	r3, r3, #3
 8104f64:	441a      	add	r2, r3
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8104f6c:	687b      	ldr	r3, [r7, #4]
 8104f6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f76:	6879      	ldr	r1, [r7, #4]
 8104f78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8104f7a:	fb01 f303 	mul.w	r3, r1, r3
 8104f7e:	009b      	lsls	r3, r3, #2
 8104f80:	441a      	add	r2, r3
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8104f88:	687b      	ldr	r3, [r7, #4]
 8104f8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104f92:	6879      	ldr	r1, [r7, #4]
 8104f94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8104f96:	fb01 f303 	mul.w	r3, r1, r3
 8104f9a:	009b      	lsls	r3, r3, #2
 8104f9c:	441a      	add	r2, r3
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104faa:	4a14      	ldr	r2, [pc, #80]	; (8104ffc <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8104fac:	4293      	cmp	r3, r2
 8104fae:	d90d      	bls.n	8104fcc <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104fb6:	f043 0220 	orr.w	r2, r3, #32
 8104fba:	687b      	ldr	r3, [r7, #4]
 8104fbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	2203      	movs	r2, #3
 8104fc4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8104fc8:	2301      	movs	r3, #1
 8104fca:	e010      	b.n	8104fee <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104fd0:	60fb      	str	r3, [r7, #12]
 8104fd2:	e005      	b.n	8104fe0 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8104fd4:	68fb      	ldr	r3, [r7, #12]
 8104fd6:	2200      	movs	r2, #0
 8104fd8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8104fda:	68fb      	ldr	r3, [r7, #12]
 8104fdc:	3304      	adds	r3, #4
 8104fde:	60fb      	str	r3, [r7, #12]
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104fe6:	68fa      	ldr	r2, [r7, #12]
 8104fe8:	429a      	cmp	r2, r3
 8104fea:	d3f3      	bcc.n	8104fd4 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8104fec:	2300      	movs	r3, #0
}
 8104fee:	4618      	mov	r0, r3
 8104ff0:	3714      	adds	r7, #20
 8104ff2:	46bd      	mov	sp, r7
 8104ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ff8:	4770      	bx	lr
 8104ffa:	bf00      	nop
 8104ffc:	4000d3fc 	.word	0x4000d3fc

08105000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8105000:	b480      	push	{r7}
 8105002:	b089      	sub	sp, #36	; 0x24
 8105004:	af00      	add	r7, sp, #0
 8105006:	6078      	str	r0, [r7, #4]
 8105008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810500a:	2300      	movs	r3, #0
 810500c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810500e:	4b89      	ldr	r3, [pc, #548]	; (8105234 <HAL_GPIO_Init+0x234>)
 8105010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105012:	e194      	b.n	810533e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105014:	683b      	ldr	r3, [r7, #0]
 8105016:	681a      	ldr	r2, [r3, #0]
 8105018:	2101      	movs	r1, #1
 810501a:	69fb      	ldr	r3, [r7, #28]
 810501c:	fa01 f303 	lsl.w	r3, r1, r3
 8105020:	4013      	ands	r3, r2
 8105022:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105024:	693b      	ldr	r3, [r7, #16]
 8105026:	2b00      	cmp	r3, #0
 8105028:	f000 8186 	beq.w	8105338 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810502c:	683b      	ldr	r3, [r7, #0]
 810502e:	685b      	ldr	r3, [r3, #4]
 8105030:	2b01      	cmp	r3, #1
 8105032:	d00b      	beq.n	810504c <HAL_GPIO_Init+0x4c>
 8105034:	683b      	ldr	r3, [r7, #0]
 8105036:	685b      	ldr	r3, [r3, #4]
 8105038:	2b02      	cmp	r3, #2
 810503a:	d007      	beq.n	810504c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810503c:	683b      	ldr	r3, [r7, #0]
 810503e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8105040:	2b11      	cmp	r3, #17
 8105042:	d003      	beq.n	810504c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8105044:	683b      	ldr	r3, [r7, #0]
 8105046:	685b      	ldr	r3, [r3, #4]
 8105048:	2b12      	cmp	r3, #18
 810504a:	d130      	bne.n	81050ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	689b      	ldr	r3, [r3, #8]
 8105050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105052:	69fb      	ldr	r3, [r7, #28]
 8105054:	005b      	lsls	r3, r3, #1
 8105056:	2203      	movs	r2, #3
 8105058:	fa02 f303 	lsl.w	r3, r2, r3
 810505c:	43db      	mvns	r3, r3
 810505e:	69ba      	ldr	r2, [r7, #24]
 8105060:	4013      	ands	r3, r2
 8105062:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105064:	683b      	ldr	r3, [r7, #0]
 8105066:	68da      	ldr	r2, [r3, #12]
 8105068:	69fb      	ldr	r3, [r7, #28]
 810506a:	005b      	lsls	r3, r3, #1
 810506c:	fa02 f303 	lsl.w	r3, r2, r3
 8105070:	69ba      	ldr	r2, [r7, #24]
 8105072:	4313      	orrs	r3, r2
 8105074:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	69ba      	ldr	r2, [r7, #24]
 810507a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	685b      	ldr	r3, [r3, #4]
 8105080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105082:	2201      	movs	r2, #1
 8105084:	69fb      	ldr	r3, [r7, #28]
 8105086:	fa02 f303 	lsl.w	r3, r2, r3
 810508a:	43db      	mvns	r3, r3
 810508c:	69ba      	ldr	r2, [r7, #24]
 810508e:	4013      	ands	r3, r2
 8105090:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8105092:	683b      	ldr	r3, [r7, #0]
 8105094:	685b      	ldr	r3, [r3, #4]
 8105096:	091b      	lsrs	r3, r3, #4
 8105098:	f003 0201 	and.w	r2, r3, #1
 810509c:	69fb      	ldr	r3, [r7, #28]
 810509e:	fa02 f303 	lsl.w	r3, r2, r3
 81050a2:	69ba      	ldr	r2, [r7, #24]
 81050a4:	4313      	orrs	r3, r2
 81050a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	69ba      	ldr	r2, [r7, #24]
 81050ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81050ae:	687b      	ldr	r3, [r7, #4]
 81050b0:	68db      	ldr	r3, [r3, #12]
 81050b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81050b4:	69fb      	ldr	r3, [r7, #28]
 81050b6:	005b      	lsls	r3, r3, #1
 81050b8:	2203      	movs	r2, #3
 81050ba:	fa02 f303 	lsl.w	r3, r2, r3
 81050be:	43db      	mvns	r3, r3
 81050c0:	69ba      	ldr	r2, [r7, #24]
 81050c2:	4013      	ands	r3, r2
 81050c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81050c6:	683b      	ldr	r3, [r7, #0]
 81050c8:	689a      	ldr	r2, [r3, #8]
 81050ca:	69fb      	ldr	r3, [r7, #28]
 81050cc:	005b      	lsls	r3, r3, #1
 81050ce:	fa02 f303 	lsl.w	r3, r2, r3
 81050d2:	69ba      	ldr	r2, [r7, #24]
 81050d4:	4313      	orrs	r3, r2
 81050d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	69ba      	ldr	r2, [r7, #24]
 81050dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81050de:	683b      	ldr	r3, [r7, #0]
 81050e0:	685b      	ldr	r3, [r3, #4]
 81050e2:	2b02      	cmp	r3, #2
 81050e4:	d003      	beq.n	81050ee <HAL_GPIO_Init+0xee>
 81050e6:	683b      	ldr	r3, [r7, #0]
 81050e8:	685b      	ldr	r3, [r3, #4]
 81050ea:	2b12      	cmp	r3, #18
 81050ec:	d123      	bne.n	8105136 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81050ee:	69fb      	ldr	r3, [r7, #28]
 81050f0:	08da      	lsrs	r2, r3, #3
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	3208      	adds	r2, #8
 81050f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81050fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81050fc:	69fb      	ldr	r3, [r7, #28]
 81050fe:	f003 0307 	and.w	r3, r3, #7
 8105102:	009b      	lsls	r3, r3, #2
 8105104:	220f      	movs	r2, #15
 8105106:	fa02 f303 	lsl.w	r3, r2, r3
 810510a:	43db      	mvns	r3, r3
 810510c:	69ba      	ldr	r2, [r7, #24]
 810510e:	4013      	ands	r3, r2
 8105110:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105112:	683b      	ldr	r3, [r7, #0]
 8105114:	691a      	ldr	r2, [r3, #16]
 8105116:	69fb      	ldr	r3, [r7, #28]
 8105118:	f003 0307 	and.w	r3, r3, #7
 810511c:	009b      	lsls	r3, r3, #2
 810511e:	fa02 f303 	lsl.w	r3, r2, r3
 8105122:	69ba      	ldr	r2, [r7, #24]
 8105124:	4313      	orrs	r3, r2
 8105126:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105128:	69fb      	ldr	r3, [r7, #28]
 810512a:	08da      	lsrs	r2, r3, #3
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	3208      	adds	r2, #8
 8105130:	69b9      	ldr	r1, [r7, #24]
 8105132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810513c:	69fb      	ldr	r3, [r7, #28]
 810513e:	005b      	lsls	r3, r3, #1
 8105140:	2203      	movs	r2, #3
 8105142:	fa02 f303 	lsl.w	r3, r2, r3
 8105146:	43db      	mvns	r3, r3
 8105148:	69ba      	ldr	r2, [r7, #24]
 810514a:	4013      	ands	r3, r2
 810514c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810514e:	683b      	ldr	r3, [r7, #0]
 8105150:	685b      	ldr	r3, [r3, #4]
 8105152:	f003 0203 	and.w	r2, r3, #3
 8105156:	69fb      	ldr	r3, [r7, #28]
 8105158:	005b      	lsls	r3, r3, #1
 810515a:	fa02 f303 	lsl.w	r3, r2, r3
 810515e:	69ba      	ldr	r2, [r7, #24]
 8105160:	4313      	orrs	r3, r2
 8105162:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	69ba      	ldr	r2, [r7, #24]
 8105168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810516a:	683b      	ldr	r3, [r7, #0]
 810516c:	685b      	ldr	r3, [r3, #4]
 810516e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105172:	2b00      	cmp	r3, #0
 8105174:	f000 80e0 	beq.w	8105338 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105178:	4b2f      	ldr	r3, [pc, #188]	; (8105238 <HAL_GPIO_Init+0x238>)
 810517a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810517e:	4a2e      	ldr	r2, [pc, #184]	; (8105238 <HAL_GPIO_Init+0x238>)
 8105180:	f043 0302 	orr.w	r3, r3, #2
 8105184:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8105188:	4b2b      	ldr	r3, [pc, #172]	; (8105238 <HAL_GPIO_Init+0x238>)
 810518a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810518e:	f003 0302 	and.w	r3, r3, #2
 8105192:	60fb      	str	r3, [r7, #12]
 8105194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105196:	4a29      	ldr	r2, [pc, #164]	; (810523c <HAL_GPIO_Init+0x23c>)
 8105198:	69fb      	ldr	r3, [r7, #28]
 810519a:	089b      	lsrs	r3, r3, #2
 810519c:	3302      	adds	r3, #2
 810519e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81051a4:	69fb      	ldr	r3, [r7, #28]
 81051a6:	f003 0303 	and.w	r3, r3, #3
 81051aa:	009b      	lsls	r3, r3, #2
 81051ac:	220f      	movs	r2, #15
 81051ae:	fa02 f303 	lsl.w	r3, r2, r3
 81051b2:	43db      	mvns	r3, r3
 81051b4:	69ba      	ldr	r2, [r7, #24]
 81051b6:	4013      	ands	r3, r2
 81051b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	4a20      	ldr	r2, [pc, #128]	; (8105240 <HAL_GPIO_Init+0x240>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d052      	beq.n	8105268 <HAL_GPIO_Init+0x268>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	4a1f      	ldr	r2, [pc, #124]	; (8105244 <HAL_GPIO_Init+0x244>)
 81051c6:	4293      	cmp	r3, r2
 81051c8:	d031      	beq.n	810522e <HAL_GPIO_Init+0x22e>
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	4a1e      	ldr	r2, [pc, #120]	; (8105248 <HAL_GPIO_Init+0x248>)
 81051ce:	4293      	cmp	r3, r2
 81051d0:	d02b      	beq.n	810522a <HAL_GPIO_Init+0x22a>
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	4a1d      	ldr	r2, [pc, #116]	; (810524c <HAL_GPIO_Init+0x24c>)
 81051d6:	4293      	cmp	r3, r2
 81051d8:	d025      	beq.n	8105226 <HAL_GPIO_Init+0x226>
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	4a1c      	ldr	r2, [pc, #112]	; (8105250 <HAL_GPIO_Init+0x250>)
 81051de:	4293      	cmp	r3, r2
 81051e0:	d01f      	beq.n	8105222 <HAL_GPIO_Init+0x222>
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	4a1b      	ldr	r2, [pc, #108]	; (8105254 <HAL_GPIO_Init+0x254>)
 81051e6:	4293      	cmp	r3, r2
 81051e8:	d019      	beq.n	810521e <HAL_GPIO_Init+0x21e>
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	4a1a      	ldr	r2, [pc, #104]	; (8105258 <HAL_GPIO_Init+0x258>)
 81051ee:	4293      	cmp	r3, r2
 81051f0:	d013      	beq.n	810521a <HAL_GPIO_Init+0x21a>
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	4a19      	ldr	r2, [pc, #100]	; (810525c <HAL_GPIO_Init+0x25c>)
 81051f6:	4293      	cmp	r3, r2
 81051f8:	d00d      	beq.n	8105216 <HAL_GPIO_Init+0x216>
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	4a18      	ldr	r2, [pc, #96]	; (8105260 <HAL_GPIO_Init+0x260>)
 81051fe:	4293      	cmp	r3, r2
 8105200:	d007      	beq.n	8105212 <HAL_GPIO_Init+0x212>
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	4a17      	ldr	r2, [pc, #92]	; (8105264 <HAL_GPIO_Init+0x264>)
 8105206:	4293      	cmp	r3, r2
 8105208:	d101      	bne.n	810520e <HAL_GPIO_Init+0x20e>
 810520a:	2309      	movs	r3, #9
 810520c:	e02d      	b.n	810526a <HAL_GPIO_Init+0x26a>
 810520e:	230a      	movs	r3, #10
 8105210:	e02b      	b.n	810526a <HAL_GPIO_Init+0x26a>
 8105212:	2308      	movs	r3, #8
 8105214:	e029      	b.n	810526a <HAL_GPIO_Init+0x26a>
 8105216:	2307      	movs	r3, #7
 8105218:	e027      	b.n	810526a <HAL_GPIO_Init+0x26a>
 810521a:	2306      	movs	r3, #6
 810521c:	e025      	b.n	810526a <HAL_GPIO_Init+0x26a>
 810521e:	2305      	movs	r3, #5
 8105220:	e023      	b.n	810526a <HAL_GPIO_Init+0x26a>
 8105222:	2304      	movs	r3, #4
 8105224:	e021      	b.n	810526a <HAL_GPIO_Init+0x26a>
 8105226:	2303      	movs	r3, #3
 8105228:	e01f      	b.n	810526a <HAL_GPIO_Init+0x26a>
 810522a:	2302      	movs	r3, #2
 810522c:	e01d      	b.n	810526a <HAL_GPIO_Init+0x26a>
 810522e:	2301      	movs	r3, #1
 8105230:	e01b      	b.n	810526a <HAL_GPIO_Init+0x26a>
 8105232:	bf00      	nop
 8105234:	580000c0 	.word	0x580000c0
 8105238:	58024400 	.word	0x58024400
 810523c:	58000400 	.word	0x58000400
 8105240:	58020000 	.word	0x58020000
 8105244:	58020400 	.word	0x58020400
 8105248:	58020800 	.word	0x58020800
 810524c:	58020c00 	.word	0x58020c00
 8105250:	58021000 	.word	0x58021000
 8105254:	58021400 	.word	0x58021400
 8105258:	58021800 	.word	0x58021800
 810525c:	58021c00 	.word	0x58021c00
 8105260:	58022000 	.word	0x58022000
 8105264:	58022400 	.word	0x58022400
 8105268:	2300      	movs	r3, #0
 810526a:	69fa      	ldr	r2, [r7, #28]
 810526c:	f002 0203 	and.w	r2, r2, #3
 8105270:	0092      	lsls	r2, r2, #2
 8105272:	4093      	lsls	r3, r2
 8105274:	69ba      	ldr	r2, [r7, #24]
 8105276:	4313      	orrs	r3, r2
 8105278:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810527a:	4938      	ldr	r1, [pc, #224]	; (810535c <HAL_GPIO_Init+0x35c>)
 810527c:	69fb      	ldr	r3, [r7, #28]
 810527e:	089b      	lsrs	r3, r3, #2
 8105280:	3302      	adds	r3, #2
 8105282:	69ba      	ldr	r2, [r7, #24]
 8105284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105288:	697b      	ldr	r3, [r7, #20]
 810528a:	681b      	ldr	r3, [r3, #0]
 810528c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810528e:	693b      	ldr	r3, [r7, #16]
 8105290:	43db      	mvns	r3, r3
 8105292:	69ba      	ldr	r2, [r7, #24]
 8105294:	4013      	ands	r3, r2
 8105296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8105298:	683b      	ldr	r3, [r7, #0]
 810529a:	685b      	ldr	r3, [r3, #4]
 810529c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81052a0:	2b00      	cmp	r3, #0
 81052a2:	d003      	beq.n	81052ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81052a4:	69ba      	ldr	r2, [r7, #24]
 81052a6:	693b      	ldr	r3, [r7, #16]
 81052a8:	4313      	orrs	r3, r2
 81052aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81052ac:	697b      	ldr	r3, [r7, #20]
 81052ae:	69ba      	ldr	r2, [r7, #24]
 81052b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81052b2:	697b      	ldr	r3, [r7, #20]
 81052b4:	685b      	ldr	r3, [r3, #4]
 81052b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81052b8:	693b      	ldr	r3, [r7, #16]
 81052ba:	43db      	mvns	r3, r3
 81052bc:	69ba      	ldr	r2, [r7, #24]
 81052be:	4013      	ands	r3, r2
 81052c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81052c2:	683b      	ldr	r3, [r7, #0]
 81052c4:	685b      	ldr	r3, [r3, #4]
 81052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81052ca:	2b00      	cmp	r3, #0
 81052cc:	d003      	beq.n	81052d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81052ce:	69ba      	ldr	r2, [r7, #24]
 81052d0:	693b      	ldr	r3, [r7, #16]
 81052d2:	4313      	orrs	r3, r2
 81052d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81052d6:	697b      	ldr	r3, [r7, #20]
 81052d8:	69ba      	ldr	r2, [r7, #24]
 81052da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81052dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81052e4:	693b      	ldr	r3, [r7, #16]
 81052e6:	43db      	mvns	r3, r3
 81052e8:	69ba      	ldr	r2, [r7, #24]
 81052ea:	4013      	ands	r3, r2
 81052ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81052ee:	683b      	ldr	r3, [r7, #0]
 81052f0:	685b      	ldr	r3, [r3, #4]
 81052f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81052f6:	2b00      	cmp	r3, #0
 81052f8:	d003      	beq.n	8105302 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81052fa:	69ba      	ldr	r2, [r7, #24]
 81052fc:	693b      	ldr	r3, [r7, #16]
 81052fe:	4313      	orrs	r3, r2
 8105300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105306:	69bb      	ldr	r3, [r7, #24]
 8105308:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810530a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810530e:	685b      	ldr	r3, [r3, #4]
 8105310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105312:	693b      	ldr	r3, [r7, #16]
 8105314:	43db      	mvns	r3, r3
 8105316:	69ba      	ldr	r2, [r7, #24]
 8105318:	4013      	ands	r3, r2
 810531a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810531c:	683b      	ldr	r3, [r7, #0]
 810531e:	685b      	ldr	r3, [r3, #4]
 8105320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105324:	2b00      	cmp	r3, #0
 8105326:	d003      	beq.n	8105330 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8105328:	69ba      	ldr	r2, [r7, #24]
 810532a:	693b      	ldr	r3, [r7, #16]
 810532c:	4313      	orrs	r3, r2
 810532e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105334:	69bb      	ldr	r3, [r7, #24]
 8105336:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8105338:	69fb      	ldr	r3, [r7, #28]
 810533a:	3301      	adds	r3, #1
 810533c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810533e:	683b      	ldr	r3, [r7, #0]
 8105340:	681a      	ldr	r2, [r3, #0]
 8105342:	69fb      	ldr	r3, [r7, #28]
 8105344:	fa22 f303 	lsr.w	r3, r2, r3
 8105348:	2b00      	cmp	r3, #0
 810534a:	f47f ae63 	bne.w	8105014 <HAL_GPIO_Init+0x14>
  }
}
 810534e:	bf00      	nop
 8105350:	3724      	adds	r7, #36	; 0x24
 8105352:	46bd      	mov	sp, r7
 8105354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105358:	4770      	bx	lr
 810535a:	bf00      	nop
 810535c:	58000400 	.word	0x58000400

08105360 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8105360:	b480      	push	{r7}
 8105362:	b083      	sub	sp, #12
 8105364:	af00      	add	r7, sp, #0
 8105366:	6078      	str	r0, [r7, #4]
 8105368:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810536a:	490e      	ldr	r1, [pc, #56]	; (81053a4 <HAL_HSEM_Take+0x44>)
 810536c:	683b      	ldr	r3, [r7, #0]
 810536e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8105372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105376:	687a      	ldr	r2, [r7, #4]
 8105378:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 810537c:	4a09      	ldr	r2, [pc, #36]	; (81053a4 <HAL_HSEM_Take+0x44>)
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8105384:	683b      	ldr	r3, [r7, #0]
 8105386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810538a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810538e:	429a      	cmp	r2, r3
 8105390:	d101      	bne.n	8105396 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8105392:	2300      	movs	r3, #0
 8105394:	e000      	b.n	8105398 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8105396:	2301      	movs	r3, #1
}
 8105398:	4618      	mov	r0, r3
 810539a:	370c      	adds	r7, #12
 810539c:	46bd      	mov	sp, r7
 810539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053a2:	4770      	bx	lr
 81053a4:	58026400 	.word	0x58026400

081053a8 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 81053a8:	b480      	push	{r7}
 81053aa:	b083      	sub	sp, #12
 81053ac:	af00      	add	r7, sp, #0
 81053ae:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 81053b0:	4a07      	ldr	r2, [pc, #28]	; (81053d0 <HAL_HSEM_IsSemTaken+0x28>)
 81053b2:	687b      	ldr	r3, [r7, #4]
 81053b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81053b8:	2b00      	cmp	r3, #0
 81053ba:	da01      	bge.n	81053c0 <HAL_HSEM_IsSemTaken+0x18>
 81053bc:	2301      	movs	r3, #1
 81053be:	e000      	b.n	81053c2 <HAL_HSEM_IsSemTaken+0x1a>
 81053c0:	2300      	movs	r3, #0
}
 81053c2:	4618      	mov	r0, r3
 81053c4:	370c      	adds	r7, #12
 81053c6:	46bd      	mov	sp, r7
 81053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053cc:	4770      	bx	lr
 81053ce:	bf00      	nop
 81053d0:	58026400 	.word	0x58026400

081053d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81053d4:	b480      	push	{r7}
 81053d6:	b083      	sub	sp, #12
 81053d8:	af00      	add	r7, sp, #0
 81053da:	6078      	str	r0, [r7, #4]
 81053dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81053de:	4906      	ldr	r1, [pc, #24]	; (81053f8 <HAL_HSEM_Release+0x24>)
 81053e0:	683b      	ldr	r3, [r7, #0]
 81053e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81053ec:	bf00      	nop
 81053ee:	370c      	adds	r7, #12
 81053f0:	46bd      	mov	sp, r7
 81053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053f6:	4770      	bx	lr
 81053f8:	58026400 	.word	0x58026400

081053fc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81053fc:	b480      	push	{r7}
 81053fe:	b083      	sub	sp, #12
 8105400:	af00      	add	r7, sp, #0
 8105402:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105404:	4b05      	ldr	r3, [pc, #20]	; (810541c <HAL_HSEM_ActivateNotification+0x20>)
 8105406:	681a      	ldr	r2, [r3, #0]
 8105408:	4904      	ldr	r1, [pc, #16]	; (810541c <HAL_HSEM_ActivateNotification+0x20>)
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	4313      	orrs	r3, r2
 810540e:	600b      	str	r3, [r1, #0]
#endif
}
 8105410:	bf00      	nop
 8105412:	370c      	adds	r7, #12
 8105414:	46bd      	mov	sp, r7
 8105416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810541a:	4770      	bx	lr
 810541c:	58026510 	.word	0x58026510

08105420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8105420:	b580      	push	{r7, lr}
 8105422:	b082      	sub	sp, #8
 8105424:	af00      	add	r7, sp, #0
 8105426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	2b00      	cmp	r3, #0
 810542c:	d101      	bne.n	8105432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810542e:	2301      	movs	r3, #1
 8105430:	e081      	b.n	8105536 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105438:	b2db      	uxtb	r3, r3
 810543a:	2b00      	cmp	r3, #0
 810543c:	d106      	bne.n	810544c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810543e:	687b      	ldr	r3, [r7, #4]
 8105440:	2200      	movs	r2, #0
 8105442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8105446:	6878      	ldr	r0, [r7, #4]
 8105448:	f7fc f838 	bl	81014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	2224      	movs	r2, #36	; 0x24
 8105450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	681a      	ldr	r2, [r3, #0]
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	f022 0201 	bic.w	r2, r2, #1
 8105462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	685a      	ldr	r2, [r3, #4]
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8105470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	681b      	ldr	r3, [r3, #0]
 8105476:	689a      	ldr	r2, [r3, #8]
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	68db      	ldr	r3, [r3, #12]
 8105486:	2b01      	cmp	r3, #1
 8105488:	d107      	bne.n	810549a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	689a      	ldr	r2, [r3, #8]
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	681b      	ldr	r3, [r3, #0]
 8105492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105496:	609a      	str	r2, [r3, #8]
 8105498:	e006      	b.n	81054a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	689a      	ldr	r2, [r3, #8]
 810549e:	687b      	ldr	r3, [r7, #4]
 81054a0:	681b      	ldr	r3, [r3, #0]
 81054a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81054a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	68db      	ldr	r3, [r3, #12]
 81054ac:	2b02      	cmp	r3, #2
 81054ae:	d104      	bne.n	81054ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81054b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	681b      	ldr	r3, [r3, #0]
 81054be:	685b      	ldr	r3, [r3, #4]
 81054c0:	687a      	ldr	r2, [r7, #4]
 81054c2:	6812      	ldr	r2, [r2, #0]
 81054c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81054c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81054cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	68da      	ldr	r2, [r3, #12]
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81054dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	691a      	ldr	r2, [r3, #16]
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	695b      	ldr	r3, [r3, #20]
 81054e6:	ea42 0103 	orr.w	r1, r2, r3
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	699b      	ldr	r3, [r3, #24]
 81054ee:	021a      	lsls	r2, r3, #8
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	430a      	orrs	r2, r1
 81054f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	69d9      	ldr	r1, [r3, #28]
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	6a1a      	ldr	r2, [r3, #32]
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	681b      	ldr	r3, [r3, #0]
 8105504:	430a      	orrs	r2, r1
 8105506:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	681b      	ldr	r3, [r3, #0]
 810550c:	681a      	ldr	r2, [r3, #0]
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	f042 0201 	orr.w	r2, r2, #1
 8105516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	2200      	movs	r2, #0
 810551c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810551e:	687b      	ldr	r3, [r7, #4]
 8105520:	2220      	movs	r2, #32
 8105522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	2200      	movs	r2, #0
 810552a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	2200      	movs	r2, #0
 8105530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8105534:	2300      	movs	r3, #0
}
 8105536:	4618      	mov	r0, r3
 8105538:	3708      	adds	r7, #8
 810553a:	46bd      	mov	sp, r7
 810553c:	bd80      	pop	{r7, pc}
	...

08105540 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105540:	b580      	push	{r7, lr}
 8105542:	b088      	sub	sp, #32
 8105544:	af02      	add	r7, sp, #8
 8105546:	60f8      	str	r0, [r7, #12]
 8105548:	607a      	str	r2, [r7, #4]
 810554a:	461a      	mov	r2, r3
 810554c:	460b      	mov	r3, r1
 810554e:	817b      	strh	r3, [r7, #10]
 8105550:	4613      	mov	r3, r2
 8105552:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105554:	68fb      	ldr	r3, [r7, #12]
 8105556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810555a:	b2db      	uxtb	r3, r3
 810555c:	2b20      	cmp	r3, #32
 810555e:	f040 80da 	bne.w	8105716 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105562:	68fb      	ldr	r3, [r7, #12]
 8105564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105568:	2b01      	cmp	r3, #1
 810556a:	d101      	bne.n	8105570 <HAL_I2C_Master_Transmit+0x30>
 810556c:	2302      	movs	r3, #2
 810556e:	e0d3      	b.n	8105718 <HAL_I2C_Master_Transmit+0x1d8>
 8105570:	68fb      	ldr	r3, [r7, #12]
 8105572:	2201      	movs	r2, #1
 8105574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105578:	f7fc fd9c 	bl	81020b4 <HAL_GetTick>
 810557c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810557e:	697b      	ldr	r3, [r7, #20]
 8105580:	9300      	str	r3, [sp, #0]
 8105582:	2319      	movs	r3, #25
 8105584:	2201      	movs	r2, #1
 8105586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810558a:	68f8      	ldr	r0, [r7, #12]
 810558c:	f000 fcd6 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105590:	4603      	mov	r3, r0
 8105592:	2b00      	cmp	r3, #0
 8105594:	d001      	beq.n	810559a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8105596:	2301      	movs	r3, #1
 8105598:	e0be      	b.n	8105718 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810559a:	68fb      	ldr	r3, [r7, #12]
 810559c:	2221      	movs	r2, #33	; 0x21
 810559e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81055a2:	68fb      	ldr	r3, [r7, #12]
 81055a4:	2210      	movs	r2, #16
 81055a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81055aa:	68fb      	ldr	r3, [r7, #12]
 81055ac:	2200      	movs	r2, #0
 81055ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81055b0:	68fb      	ldr	r3, [r7, #12]
 81055b2:	687a      	ldr	r2, [r7, #4]
 81055b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81055b6:	68fb      	ldr	r3, [r7, #12]
 81055b8:	893a      	ldrh	r2, [r7, #8]
 81055ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	2200      	movs	r2, #0
 81055c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81055c2:	68fb      	ldr	r3, [r7, #12]
 81055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055c6:	b29b      	uxth	r3, r3
 81055c8:	2bff      	cmp	r3, #255	; 0xff
 81055ca:	d90e      	bls.n	81055ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81055cc:	68fb      	ldr	r3, [r7, #12]
 81055ce:	22ff      	movs	r2, #255	; 0xff
 81055d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81055d2:	68fb      	ldr	r3, [r7, #12]
 81055d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055d6:	b2da      	uxtb	r2, r3
 81055d8:	8979      	ldrh	r1, [r7, #10]
 81055da:	4b51      	ldr	r3, [pc, #324]	; (8105720 <HAL_I2C_Master_Transmit+0x1e0>)
 81055dc:	9300      	str	r3, [sp, #0]
 81055de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81055e2:	68f8      	ldr	r0, [r7, #12]
 81055e4:	f000 fe38 	bl	8106258 <I2C_TransferConfig>
 81055e8:	e06c      	b.n	81056c4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81055ea:	68fb      	ldr	r3, [r7, #12]
 81055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055ee:	b29a      	uxth	r2, r3
 81055f0:	68fb      	ldr	r3, [r7, #12]
 81055f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 81055f4:	68fb      	ldr	r3, [r7, #12]
 81055f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055f8:	b2da      	uxtb	r2, r3
 81055fa:	8979      	ldrh	r1, [r7, #10]
 81055fc:	4b48      	ldr	r3, [pc, #288]	; (8105720 <HAL_I2C_Master_Transmit+0x1e0>)
 81055fe:	9300      	str	r3, [sp, #0]
 8105600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105604:	68f8      	ldr	r0, [r7, #12]
 8105606:	f000 fe27 	bl	8106258 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 810560a:	e05b      	b.n	81056c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810560c:	697a      	ldr	r2, [r7, #20]
 810560e:	6a39      	ldr	r1, [r7, #32]
 8105610:	68f8      	ldr	r0, [r7, #12]
 8105612:	f000 fcd3 	bl	8105fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8105616:	4603      	mov	r3, r0
 8105618:	2b00      	cmp	r3, #0
 810561a:	d001      	beq.n	8105620 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 810561c:	2301      	movs	r3, #1
 810561e:	e07b      	b.n	8105718 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105620:	68fb      	ldr	r3, [r7, #12]
 8105622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105624:	781a      	ldrb	r2, [r3, #0]
 8105626:	68fb      	ldr	r3, [r7, #12]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810562c:	68fb      	ldr	r3, [r7, #12]
 810562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105630:	1c5a      	adds	r2, r3, #1
 8105632:	68fb      	ldr	r3, [r7, #12]
 8105634:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8105636:	68fb      	ldr	r3, [r7, #12]
 8105638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810563a:	b29b      	uxth	r3, r3
 810563c:	3b01      	subs	r3, #1
 810563e:	b29a      	uxth	r2, r3
 8105640:	68fb      	ldr	r3, [r7, #12]
 8105642:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8105644:	68fb      	ldr	r3, [r7, #12]
 8105646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105648:	3b01      	subs	r3, #1
 810564a:	b29a      	uxth	r2, r3
 810564c:	68fb      	ldr	r3, [r7, #12]
 810564e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105650:	68fb      	ldr	r3, [r7, #12]
 8105652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105654:	b29b      	uxth	r3, r3
 8105656:	2b00      	cmp	r3, #0
 8105658:	d034      	beq.n	81056c4 <HAL_I2C_Master_Transmit+0x184>
 810565a:	68fb      	ldr	r3, [r7, #12]
 810565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810565e:	2b00      	cmp	r3, #0
 8105660:	d130      	bne.n	81056c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105662:	697b      	ldr	r3, [r7, #20]
 8105664:	9300      	str	r3, [sp, #0]
 8105666:	6a3b      	ldr	r3, [r7, #32]
 8105668:	2200      	movs	r2, #0
 810566a:	2180      	movs	r1, #128	; 0x80
 810566c:	68f8      	ldr	r0, [r7, #12]
 810566e:	f000 fc65 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105672:	4603      	mov	r3, r0
 8105674:	2b00      	cmp	r3, #0
 8105676:	d001      	beq.n	810567c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8105678:	2301      	movs	r3, #1
 810567a:	e04d      	b.n	8105718 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810567c:	68fb      	ldr	r3, [r7, #12]
 810567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105680:	b29b      	uxth	r3, r3
 8105682:	2bff      	cmp	r3, #255	; 0xff
 8105684:	d90e      	bls.n	81056a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105686:	68fb      	ldr	r3, [r7, #12]
 8105688:	22ff      	movs	r2, #255	; 0xff
 810568a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810568c:	68fb      	ldr	r3, [r7, #12]
 810568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105690:	b2da      	uxtb	r2, r3
 8105692:	8979      	ldrh	r1, [r7, #10]
 8105694:	2300      	movs	r3, #0
 8105696:	9300      	str	r3, [sp, #0]
 8105698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810569c:	68f8      	ldr	r0, [r7, #12]
 810569e:	f000 fddb 	bl	8106258 <I2C_TransferConfig>
 81056a2:	e00f      	b.n	81056c4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81056a4:	68fb      	ldr	r3, [r7, #12]
 81056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81056a8:	b29a      	uxth	r2, r3
 81056aa:	68fb      	ldr	r3, [r7, #12]
 81056ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81056ae:	68fb      	ldr	r3, [r7, #12]
 81056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81056b2:	b2da      	uxtb	r2, r3
 81056b4:	8979      	ldrh	r1, [r7, #10]
 81056b6:	2300      	movs	r3, #0
 81056b8:	9300      	str	r3, [sp, #0]
 81056ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81056be:	68f8      	ldr	r0, [r7, #12]
 81056c0:	f000 fdca 	bl	8106258 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81056c4:	68fb      	ldr	r3, [r7, #12]
 81056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81056c8:	b29b      	uxth	r3, r3
 81056ca:	2b00      	cmp	r3, #0
 81056cc:	d19e      	bne.n	810560c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81056ce:	697a      	ldr	r2, [r7, #20]
 81056d0:	6a39      	ldr	r1, [r7, #32]
 81056d2:	68f8      	ldr	r0, [r7, #12]
 81056d4:	f000 fcb2 	bl	810603c <I2C_WaitOnSTOPFlagUntilTimeout>
 81056d8:	4603      	mov	r3, r0
 81056da:	2b00      	cmp	r3, #0
 81056dc:	d001      	beq.n	81056e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 81056de:	2301      	movs	r3, #1
 81056e0:	e01a      	b.n	8105718 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81056e2:	68fb      	ldr	r3, [r7, #12]
 81056e4:	681b      	ldr	r3, [r3, #0]
 81056e6:	2220      	movs	r2, #32
 81056e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81056ea:	68fb      	ldr	r3, [r7, #12]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	6859      	ldr	r1, [r3, #4]
 81056f0:	68fb      	ldr	r3, [r7, #12]
 81056f2:	681a      	ldr	r2, [r3, #0]
 81056f4:	4b0b      	ldr	r3, [pc, #44]	; (8105724 <HAL_I2C_Master_Transmit+0x1e4>)
 81056f6:	400b      	ands	r3, r1
 81056f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81056fa:	68fb      	ldr	r3, [r7, #12]
 81056fc:	2220      	movs	r2, #32
 81056fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105702:	68fb      	ldr	r3, [r7, #12]
 8105704:	2200      	movs	r2, #0
 8105706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810570a:	68fb      	ldr	r3, [r7, #12]
 810570c:	2200      	movs	r2, #0
 810570e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105712:	2300      	movs	r3, #0
 8105714:	e000      	b.n	8105718 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8105716:	2302      	movs	r3, #2
  }
}
 8105718:	4618      	mov	r0, r3
 810571a:	3718      	adds	r7, #24
 810571c:	46bd      	mov	sp, r7
 810571e:	bd80      	pop	{r7, pc}
 8105720:	80002000 	.word	0x80002000
 8105724:	fe00e800 	.word	0xfe00e800

08105728 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105728:	b580      	push	{r7, lr}
 810572a:	b088      	sub	sp, #32
 810572c:	af02      	add	r7, sp, #8
 810572e:	60f8      	str	r0, [r7, #12]
 8105730:	607a      	str	r2, [r7, #4]
 8105732:	461a      	mov	r2, r3
 8105734:	460b      	mov	r3, r1
 8105736:	817b      	strh	r3, [r7, #10]
 8105738:	4613      	mov	r3, r2
 810573a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 810573c:	68fb      	ldr	r3, [r7, #12]
 810573e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105742:	b2db      	uxtb	r3, r3
 8105744:	2b20      	cmp	r3, #32
 8105746:	f040 80db 	bne.w	8105900 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810574a:	68fb      	ldr	r3, [r7, #12]
 810574c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105750:	2b01      	cmp	r3, #1
 8105752:	d101      	bne.n	8105758 <HAL_I2C_Master_Receive+0x30>
 8105754:	2302      	movs	r3, #2
 8105756:	e0d4      	b.n	8105902 <HAL_I2C_Master_Receive+0x1da>
 8105758:	68fb      	ldr	r3, [r7, #12]
 810575a:	2201      	movs	r2, #1
 810575c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105760:	f7fc fca8 	bl	81020b4 <HAL_GetTick>
 8105764:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105766:	697b      	ldr	r3, [r7, #20]
 8105768:	9300      	str	r3, [sp, #0]
 810576a:	2319      	movs	r3, #25
 810576c:	2201      	movs	r2, #1
 810576e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105772:	68f8      	ldr	r0, [r7, #12]
 8105774:	f000 fbe2 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105778:	4603      	mov	r3, r0
 810577a:	2b00      	cmp	r3, #0
 810577c:	d001      	beq.n	8105782 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 810577e:	2301      	movs	r3, #1
 8105780:	e0bf      	b.n	8105902 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8105782:	68fb      	ldr	r3, [r7, #12]
 8105784:	2222      	movs	r2, #34	; 0x22
 8105786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810578a:	68fb      	ldr	r3, [r7, #12]
 810578c:	2210      	movs	r2, #16
 810578e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105792:	68fb      	ldr	r3, [r7, #12]
 8105794:	2200      	movs	r2, #0
 8105796:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105798:	68fb      	ldr	r3, [r7, #12]
 810579a:	687a      	ldr	r2, [r7, #4]
 810579c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810579e:	68fb      	ldr	r3, [r7, #12]
 81057a0:	893a      	ldrh	r2, [r7, #8]
 81057a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81057a4:	68fb      	ldr	r3, [r7, #12]
 81057a6:	2200      	movs	r2, #0
 81057a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81057aa:	68fb      	ldr	r3, [r7, #12]
 81057ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81057ae:	b29b      	uxth	r3, r3
 81057b0:	2bff      	cmp	r3, #255	; 0xff
 81057b2:	d90e      	bls.n	81057d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81057b4:	68fb      	ldr	r3, [r7, #12]
 81057b6:	22ff      	movs	r2, #255	; 0xff
 81057b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81057ba:	68fb      	ldr	r3, [r7, #12]
 81057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81057be:	b2da      	uxtb	r2, r3
 81057c0:	8979      	ldrh	r1, [r7, #10]
 81057c2:	4b52      	ldr	r3, [pc, #328]	; (810590c <HAL_I2C_Master_Receive+0x1e4>)
 81057c4:	9300      	str	r3, [sp, #0]
 81057c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81057ca:	68f8      	ldr	r0, [r7, #12]
 81057cc:	f000 fd44 	bl	8106258 <I2C_TransferConfig>
 81057d0:	e06d      	b.n	81058ae <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81057d2:	68fb      	ldr	r3, [r7, #12]
 81057d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81057d6:	b29a      	uxth	r2, r3
 81057d8:	68fb      	ldr	r3, [r7, #12]
 81057da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 81057dc:	68fb      	ldr	r3, [r7, #12]
 81057de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81057e0:	b2da      	uxtb	r2, r3
 81057e2:	8979      	ldrh	r1, [r7, #10]
 81057e4:	4b49      	ldr	r3, [pc, #292]	; (810590c <HAL_I2C_Master_Receive+0x1e4>)
 81057e6:	9300      	str	r3, [sp, #0]
 81057e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81057ec:	68f8      	ldr	r0, [r7, #12]
 81057ee:	f000 fd33 	bl	8106258 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 81057f2:	e05c      	b.n	81058ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81057f4:	697a      	ldr	r2, [r7, #20]
 81057f6:	6a39      	ldr	r1, [r7, #32]
 81057f8:	68f8      	ldr	r0, [r7, #12]
 81057fa:	f000 fc5b 	bl	81060b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 81057fe:	4603      	mov	r3, r0
 8105800:	2b00      	cmp	r3, #0
 8105802:	d001      	beq.n	8105808 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8105804:	2301      	movs	r3, #1
 8105806:	e07c      	b.n	8105902 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105808:	68fb      	ldr	r3, [r7, #12]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810580e:	68fb      	ldr	r3, [r7, #12]
 8105810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105812:	b2d2      	uxtb	r2, r2
 8105814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105816:	68fb      	ldr	r3, [r7, #12]
 8105818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810581a:	1c5a      	adds	r2, r3, #1
 810581c:	68fb      	ldr	r3, [r7, #12]
 810581e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105820:	68fb      	ldr	r3, [r7, #12]
 8105822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105824:	3b01      	subs	r3, #1
 8105826:	b29a      	uxth	r2, r3
 8105828:	68fb      	ldr	r3, [r7, #12]
 810582a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810582c:	68fb      	ldr	r3, [r7, #12]
 810582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105830:	b29b      	uxth	r3, r3
 8105832:	3b01      	subs	r3, #1
 8105834:	b29a      	uxth	r2, r3
 8105836:	68fb      	ldr	r3, [r7, #12]
 8105838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810583a:	68fb      	ldr	r3, [r7, #12]
 810583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810583e:	b29b      	uxth	r3, r3
 8105840:	2b00      	cmp	r3, #0
 8105842:	d034      	beq.n	81058ae <HAL_I2C_Master_Receive+0x186>
 8105844:	68fb      	ldr	r3, [r7, #12]
 8105846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105848:	2b00      	cmp	r3, #0
 810584a:	d130      	bne.n	81058ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810584c:	697b      	ldr	r3, [r7, #20]
 810584e:	9300      	str	r3, [sp, #0]
 8105850:	6a3b      	ldr	r3, [r7, #32]
 8105852:	2200      	movs	r2, #0
 8105854:	2180      	movs	r1, #128	; 0x80
 8105856:	68f8      	ldr	r0, [r7, #12]
 8105858:	f000 fb70 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 810585c:	4603      	mov	r3, r0
 810585e:	2b00      	cmp	r3, #0
 8105860:	d001      	beq.n	8105866 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8105862:	2301      	movs	r3, #1
 8105864:	e04d      	b.n	8105902 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105866:	68fb      	ldr	r3, [r7, #12]
 8105868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810586a:	b29b      	uxth	r3, r3
 810586c:	2bff      	cmp	r3, #255	; 0xff
 810586e:	d90e      	bls.n	810588e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105870:	68fb      	ldr	r3, [r7, #12]
 8105872:	22ff      	movs	r2, #255	; 0xff
 8105874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810587a:	b2da      	uxtb	r2, r3
 810587c:	8979      	ldrh	r1, [r7, #10]
 810587e:	2300      	movs	r3, #0
 8105880:	9300      	str	r3, [sp, #0]
 8105882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105886:	68f8      	ldr	r0, [r7, #12]
 8105888:	f000 fce6 	bl	8106258 <I2C_TransferConfig>
 810588c:	e00f      	b.n	81058ae <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105892:	b29a      	uxth	r2, r3
 8105894:	68fb      	ldr	r3, [r7, #12]
 8105896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105898:	68fb      	ldr	r3, [r7, #12]
 810589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810589c:	b2da      	uxtb	r2, r3
 810589e:	8979      	ldrh	r1, [r7, #10]
 81058a0:	2300      	movs	r3, #0
 81058a2:	9300      	str	r3, [sp, #0]
 81058a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81058a8:	68f8      	ldr	r0, [r7, #12]
 81058aa:	f000 fcd5 	bl	8106258 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81058ae:	68fb      	ldr	r3, [r7, #12]
 81058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81058b2:	b29b      	uxth	r3, r3
 81058b4:	2b00      	cmp	r3, #0
 81058b6:	d19d      	bne.n	81057f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81058b8:	697a      	ldr	r2, [r7, #20]
 81058ba:	6a39      	ldr	r1, [r7, #32]
 81058bc:	68f8      	ldr	r0, [r7, #12]
 81058be:	f000 fbbd 	bl	810603c <I2C_WaitOnSTOPFlagUntilTimeout>
 81058c2:	4603      	mov	r3, r0
 81058c4:	2b00      	cmp	r3, #0
 81058c6:	d001      	beq.n	81058cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81058c8:	2301      	movs	r3, #1
 81058ca:	e01a      	b.n	8105902 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81058cc:	68fb      	ldr	r3, [r7, #12]
 81058ce:	681b      	ldr	r3, [r3, #0]
 81058d0:	2220      	movs	r2, #32
 81058d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81058d4:	68fb      	ldr	r3, [r7, #12]
 81058d6:	681b      	ldr	r3, [r3, #0]
 81058d8:	6859      	ldr	r1, [r3, #4]
 81058da:	68fb      	ldr	r3, [r7, #12]
 81058dc:	681a      	ldr	r2, [r3, #0]
 81058de:	4b0c      	ldr	r3, [pc, #48]	; (8105910 <HAL_I2C_Master_Receive+0x1e8>)
 81058e0:	400b      	ands	r3, r1
 81058e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81058e4:	68fb      	ldr	r3, [r7, #12]
 81058e6:	2220      	movs	r2, #32
 81058e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81058ec:	68fb      	ldr	r3, [r7, #12]
 81058ee:	2200      	movs	r2, #0
 81058f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81058f4:	68fb      	ldr	r3, [r7, #12]
 81058f6:	2200      	movs	r2, #0
 81058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81058fc:	2300      	movs	r3, #0
 81058fe:	e000      	b.n	8105902 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8105900:	2302      	movs	r3, #2
  }
}
 8105902:	4618      	mov	r0, r3
 8105904:	3718      	adds	r7, #24
 8105906:	46bd      	mov	sp, r7
 8105908:	bd80      	pop	{r7, pc}
 810590a:	bf00      	nop
 810590c:	80002400 	.word	0x80002400
 8105910:	fe00e800 	.word	0xfe00e800

08105914 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105914:	b580      	push	{r7, lr}
 8105916:	b088      	sub	sp, #32
 8105918:	af02      	add	r7, sp, #8
 810591a:	60f8      	str	r0, [r7, #12]
 810591c:	4608      	mov	r0, r1
 810591e:	4611      	mov	r1, r2
 8105920:	461a      	mov	r2, r3
 8105922:	4603      	mov	r3, r0
 8105924:	817b      	strh	r3, [r7, #10]
 8105926:	460b      	mov	r3, r1
 8105928:	813b      	strh	r3, [r7, #8]
 810592a:	4613      	mov	r3, r2
 810592c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810592e:	68fb      	ldr	r3, [r7, #12]
 8105930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105934:	b2db      	uxtb	r3, r3
 8105936:	2b20      	cmp	r3, #32
 8105938:	f040 80f9 	bne.w	8105b2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 810593c:	6a3b      	ldr	r3, [r7, #32]
 810593e:	2b00      	cmp	r3, #0
 8105940:	d002      	beq.n	8105948 <HAL_I2C_Mem_Write+0x34>
 8105942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8105944:	2b00      	cmp	r3, #0
 8105946:	d105      	bne.n	8105954 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8105948:	68fb      	ldr	r3, [r7, #12]
 810594a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810594e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8105950:	2301      	movs	r3, #1
 8105952:	e0ed      	b.n	8105b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105954:	68fb      	ldr	r3, [r7, #12]
 8105956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810595a:	2b01      	cmp	r3, #1
 810595c:	d101      	bne.n	8105962 <HAL_I2C_Mem_Write+0x4e>
 810595e:	2302      	movs	r3, #2
 8105960:	e0e6      	b.n	8105b30 <HAL_I2C_Mem_Write+0x21c>
 8105962:	68fb      	ldr	r3, [r7, #12]
 8105964:	2201      	movs	r2, #1
 8105966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810596a:	f7fc fba3 	bl	81020b4 <HAL_GetTick>
 810596e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105970:	697b      	ldr	r3, [r7, #20]
 8105972:	9300      	str	r3, [sp, #0]
 8105974:	2319      	movs	r3, #25
 8105976:	2201      	movs	r2, #1
 8105978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810597c:	68f8      	ldr	r0, [r7, #12]
 810597e:	f000 fadd 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105982:	4603      	mov	r3, r0
 8105984:	2b00      	cmp	r3, #0
 8105986:	d001      	beq.n	810598c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8105988:	2301      	movs	r3, #1
 810598a:	e0d1      	b.n	8105b30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810598c:	68fb      	ldr	r3, [r7, #12]
 810598e:	2221      	movs	r2, #33	; 0x21
 8105990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8105994:	68fb      	ldr	r3, [r7, #12]
 8105996:	2240      	movs	r2, #64	; 0x40
 8105998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810599c:	68fb      	ldr	r3, [r7, #12]
 810599e:	2200      	movs	r2, #0
 81059a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81059a2:	68fb      	ldr	r3, [r7, #12]
 81059a4:	6a3a      	ldr	r2, [r7, #32]
 81059a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81059a8:	68fb      	ldr	r3, [r7, #12]
 81059aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81059ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81059ae:	68fb      	ldr	r3, [r7, #12]
 81059b0:	2200      	movs	r2, #0
 81059b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81059b4:	88f8      	ldrh	r0, [r7, #6]
 81059b6:	893a      	ldrh	r2, [r7, #8]
 81059b8:	8979      	ldrh	r1, [r7, #10]
 81059ba:	697b      	ldr	r3, [r7, #20]
 81059bc:	9301      	str	r3, [sp, #4]
 81059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81059c0:	9300      	str	r3, [sp, #0]
 81059c2:	4603      	mov	r3, r0
 81059c4:	68f8      	ldr	r0, [r7, #12]
 81059c6:	f000 f9ed 	bl	8105da4 <I2C_RequestMemoryWrite>
 81059ca:	4603      	mov	r3, r0
 81059cc:	2b00      	cmp	r3, #0
 81059ce:	d005      	beq.n	81059dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81059d0:	68fb      	ldr	r3, [r7, #12]
 81059d2:	2200      	movs	r2, #0
 81059d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81059d8:	2301      	movs	r3, #1
 81059da:	e0a9      	b.n	8105b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81059dc:	68fb      	ldr	r3, [r7, #12]
 81059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81059e0:	b29b      	uxth	r3, r3
 81059e2:	2bff      	cmp	r3, #255	; 0xff
 81059e4:	d90e      	bls.n	8105a04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81059e6:	68fb      	ldr	r3, [r7, #12]
 81059e8:	22ff      	movs	r2, #255	; 0xff
 81059ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81059ec:	68fb      	ldr	r3, [r7, #12]
 81059ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81059f0:	b2da      	uxtb	r2, r3
 81059f2:	8979      	ldrh	r1, [r7, #10]
 81059f4:	2300      	movs	r3, #0
 81059f6:	9300      	str	r3, [sp, #0]
 81059f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81059fc:	68f8      	ldr	r0, [r7, #12]
 81059fe:	f000 fc2b 	bl	8106258 <I2C_TransferConfig>
 8105a02:	e00f      	b.n	8105a24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105a04:	68fb      	ldr	r3, [r7, #12]
 8105a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105a08:	b29a      	uxth	r2, r3
 8105a0a:	68fb      	ldr	r3, [r7, #12]
 8105a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105a0e:	68fb      	ldr	r3, [r7, #12]
 8105a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105a12:	b2da      	uxtb	r2, r3
 8105a14:	8979      	ldrh	r1, [r7, #10]
 8105a16:	2300      	movs	r3, #0
 8105a18:	9300      	str	r3, [sp, #0]
 8105a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105a1e:	68f8      	ldr	r0, [r7, #12]
 8105a20:	f000 fc1a 	bl	8106258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105a24:	697a      	ldr	r2, [r7, #20]
 8105a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105a28:	68f8      	ldr	r0, [r7, #12]
 8105a2a:	f000 fac7 	bl	8105fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8105a2e:	4603      	mov	r3, r0
 8105a30:	2b00      	cmp	r3, #0
 8105a32:	d001      	beq.n	8105a38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8105a34:	2301      	movs	r3, #1
 8105a36:	e07b      	b.n	8105b30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105a38:	68fb      	ldr	r3, [r7, #12]
 8105a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105a3c:	781a      	ldrb	r2, [r3, #0]
 8105a3e:	68fb      	ldr	r3, [r7, #12]
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105a44:	68fb      	ldr	r3, [r7, #12]
 8105a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105a48:	1c5a      	adds	r2, r3, #1
 8105a4a:	68fb      	ldr	r3, [r7, #12]
 8105a4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8105a4e:	68fb      	ldr	r3, [r7, #12]
 8105a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105a52:	b29b      	uxth	r3, r3
 8105a54:	3b01      	subs	r3, #1
 8105a56:	b29a      	uxth	r2, r3
 8105a58:	68fb      	ldr	r3, [r7, #12]
 8105a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8105a5c:	68fb      	ldr	r3, [r7, #12]
 8105a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105a60:	3b01      	subs	r3, #1
 8105a62:	b29a      	uxth	r2, r3
 8105a64:	68fb      	ldr	r3, [r7, #12]
 8105a66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105a68:	68fb      	ldr	r3, [r7, #12]
 8105a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105a6c:	b29b      	uxth	r3, r3
 8105a6e:	2b00      	cmp	r3, #0
 8105a70:	d034      	beq.n	8105adc <HAL_I2C_Mem_Write+0x1c8>
 8105a72:	68fb      	ldr	r3, [r7, #12]
 8105a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105a76:	2b00      	cmp	r3, #0
 8105a78:	d130      	bne.n	8105adc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105a7a:	697b      	ldr	r3, [r7, #20]
 8105a7c:	9300      	str	r3, [sp, #0]
 8105a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105a80:	2200      	movs	r2, #0
 8105a82:	2180      	movs	r1, #128	; 0x80
 8105a84:	68f8      	ldr	r0, [r7, #12]
 8105a86:	f000 fa59 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105a8a:	4603      	mov	r3, r0
 8105a8c:	2b00      	cmp	r3, #0
 8105a8e:	d001      	beq.n	8105a94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8105a90:	2301      	movs	r3, #1
 8105a92:	e04d      	b.n	8105b30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105a94:	68fb      	ldr	r3, [r7, #12]
 8105a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105a98:	b29b      	uxth	r3, r3
 8105a9a:	2bff      	cmp	r3, #255	; 0xff
 8105a9c:	d90e      	bls.n	8105abc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105a9e:	68fb      	ldr	r3, [r7, #12]
 8105aa0:	22ff      	movs	r2, #255	; 0xff
 8105aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105aa4:	68fb      	ldr	r3, [r7, #12]
 8105aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105aa8:	b2da      	uxtb	r2, r3
 8105aaa:	8979      	ldrh	r1, [r7, #10]
 8105aac:	2300      	movs	r3, #0
 8105aae:	9300      	str	r3, [sp, #0]
 8105ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105ab4:	68f8      	ldr	r0, [r7, #12]
 8105ab6:	f000 fbcf 	bl	8106258 <I2C_TransferConfig>
 8105aba:	e00f      	b.n	8105adc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105abc:	68fb      	ldr	r3, [r7, #12]
 8105abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105ac0:	b29a      	uxth	r2, r3
 8105ac2:	68fb      	ldr	r3, [r7, #12]
 8105ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105ac6:	68fb      	ldr	r3, [r7, #12]
 8105ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105aca:	b2da      	uxtb	r2, r3
 8105acc:	8979      	ldrh	r1, [r7, #10]
 8105ace:	2300      	movs	r3, #0
 8105ad0:	9300      	str	r3, [sp, #0]
 8105ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105ad6:	68f8      	ldr	r0, [r7, #12]
 8105ad8:	f000 fbbe 	bl	8106258 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8105adc:	68fb      	ldr	r3, [r7, #12]
 8105ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105ae0:	b29b      	uxth	r3, r3
 8105ae2:	2b00      	cmp	r3, #0
 8105ae4:	d19e      	bne.n	8105a24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105ae6:	697a      	ldr	r2, [r7, #20]
 8105ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105aea:	68f8      	ldr	r0, [r7, #12]
 8105aec:	f000 faa6 	bl	810603c <I2C_WaitOnSTOPFlagUntilTimeout>
 8105af0:	4603      	mov	r3, r0
 8105af2:	2b00      	cmp	r3, #0
 8105af4:	d001      	beq.n	8105afa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8105af6:	2301      	movs	r3, #1
 8105af8:	e01a      	b.n	8105b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105afa:	68fb      	ldr	r3, [r7, #12]
 8105afc:	681b      	ldr	r3, [r3, #0]
 8105afe:	2220      	movs	r2, #32
 8105b00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105b02:	68fb      	ldr	r3, [r7, #12]
 8105b04:	681b      	ldr	r3, [r3, #0]
 8105b06:	6859      	ldr	r1, [r3, #4]
 8105b08:	68fb      	ldr	r3, [r7, #12]
 8105b0a:	681a      	ldr	r2, [r3, #0]
 8105b0c:	4b0a      	ldr	r3, [pc, #40]	; (8105b38 <HAL_I2C_Mem_Write+0x224>)
 8105b0e:	400b      	ands	r3, r1
 8105b10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105b12:	68fb      	ldr	r3, [r7, #12]
 8105b14:	2220      	movs	r2, #32
 8105b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105b1a:	68fb      	ldr	r3, [r7, #12]
 8105b1c:	2200      	movs	r2, #0
 8105b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105b22:	68fb      	ldr	r3, [r7, #12]
 8105b24:	2200      	movs	r2, #0
 8105b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105b2a:	2300      	movs	r3, #0
 8105b2c:	e000      	b.n	8105b30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8105b2e:	2302      	movs	r3, #2
  }
}
 8105b30:	4618      	mov	r0, r3
 8105b32:	3718      	adds	r7, #24
 8105b34:	46bd      	mov	sp, r7
 8105b36:	bd80      	pop	{r7, pc}
 8105b38:	fe00e800 	.word	0xfe00e800

08105b3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105b3c:	b580      	push	{r7, lr}
 8105b3e:	b088      	sub	sp, #32
 8105b40:	af02      	add	r7, sp, #8
 8105b42:	60f8      	str	r0, [r7, #12]
 8105b44:	4608      	mov	r0, r1
 8105b46:	4611      	mov	r1, r2
 8105b48:	461a      	mov	r2, r3
 8105b4a:	4603      	mov	r3, r0
 8105b4c:	817b      	strh	r3, [r7, #10]
 8105b4e:	460b      	mov	r3, r1
 8105b50:	813b      	strh	r3, [r7, #8]
 8105b52:	4613      	mov	r3, r2
 8105b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105b56:	68fb      	ldr	r3, [r7, #12]
 8105b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105b5c:	b2db      	uxtb	r3, r3
 8105b5e:	2b20      	cmp	r3, #32
 8105b60:	f040 80fd 	bne.w	8105d5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8105b64:	6a3b      	ldr	r3, [r7, #32]
 8105b66:	2b00      	cmp	r3, #0
 8105b68:	d002      	beq.n	8105b70 <HAL_I2C_Mem_Read+0x34>
 8105b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8105b6c:	2b00      	cmp	r3, #0
 8105b6e:	d105      	bne.n	8105b7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8105b70:	68fb      	ldr	r3, [r7, #12]
 8105b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8105b76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8105b78:	2301      	movs	r3, #1
 8105b7a:	e0f1      	b.n	8105d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105b7c:	68fb      	ldr	r3, [r7, #12]
 8105b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105b82:	2b01      	cmp	r3, #1
 8105b84:	d101      	bne.n	8105b8a <HAL_I2C_Mem_Read+0x4e>
 8105b86:	2302      	movs	r3, #2
 8105b88:	e0ea      	b.n	8105d60 <HAL_I2C_Mem_Read+0x224>
 8105b8a:	68fb      	ldr	r3, [r7, #12]
 8105b8c:	2201      	movs	r2, #1
 8105b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105b92:	f7fc fa8f 	bl	81020b4 <HAL_GetTick>
 8105b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105b98:	697b      	ldr	r3, [r7, #20]
 8105b9a:	9300      	str	r3, [sp, #0]
 8105b9c:	2319      	movs	r3, #25
 8105b9e:	2201      	movs	r2, #1
 8105ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105ba4:	68f8      	ldr	r0, [r7, #12]
 8105ba6:	f000 f9c9 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105baa:	4603      	mov	r3, r0
 8105bac:	2b00      	cmp	r3, #0
 8105bae:	d001      	beq.n	8105bb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8105bb0:	2301      	movs	r3, #1
 8105bb2:	e0d5      	b.n	8105d60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8105bb4:	68fb      	ldr	r3, [r7, #12]
 8105bb6:	2222      	movs	r2, #34	; 0x22
 8105bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8105bbc:	68fb      	ldr	r3, [r7, #12]
 8105bbe:	2240      	movs	r2, #64	; 0x40
 8105bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105bc4:	68fb      	ldr	r3, [r7, #12]
 8105bc6:	2200      	movs	r2, #0
 8105bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105bca:	68fb      	ldr	r3, [r7, #12]
 8105bcc:	6a3a      	ldr	r2, [r7, #32]
 8105bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8105bd0:	68fb      	ldr	r3, [r7, #12]
 8105bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8105bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105bd6:	68fb      	ldr	r3, [r7, #12]
 8105bd8:	2200      	movs	r2, #0
 8105bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105bdc:	88f8      	ldrh	r0, [r7, #6]
 8105bde:	893a      	ldrh	r2, [r7, #8]
 8105be0:	8979      	ldrh	r1, [r7, #10]
 8105be2:	697b      	ldr	r3, [r7, #20]
 8105be4:	9301      	str	r3, [sp, #4]
 8105be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105be8:	9300      	str	r3, [sp, #0]
 8105bea:	4603      	mov	r3, r0
 8105bec:	68f8      	ldr	r0, [r7, #12]
 8105bee:	f000 f92d 	bl	8105e4c <I2C_RequestMemoryRead>
 8105bf2:	4603      	mov	r3, r0
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d005      	beq.n	8105c04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105bf8:	68fb      	ldr	r3, [r7, #12]
 8105bfa:	2200      	movs	r2, #0
 8105bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105c00:	2301      	movs	r3, #1
 8105c02:	e0ad      	b.n	8105d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105c04:	68fb      	ldr	r3, [r7, #12]
 8105c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105c08:	b29b      	uxth	r3, r3
 8105c0a:	2bff      	cmp	r3, #255	; 0xff
 8105c0c:	d90e      	bls.n	8105c2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105c0e:	68fb      	ldr	r3, [r7, #12]
 8105c10:	22ff      	movs	r2, #255	; 0xff
 8105c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8105c14:	68fb      	ldr	r3, [r7, #12]
 8105c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105c18:	b2da      	uxtb	r2, r3
 8105c1a:	8979      	ldrh	r1, [r7, #10]
 8105c1c:	4b52      	ldr	r3, [pc, #328]	; (8105d68 <HAL_I2C_Mem_Read+0x22c>)
 8105c1e:	9300      	str	r3, [sp, #0]
 8105c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105c24:	68f8      	ldr	r0, [r7, #12]
 8105c26:	f000 fb17 	bl	8106258 <I2C_TransferConfig>
 8105c2a:	e00f      	b.n	8105c4c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105c2c:	68fb      	ldr	r3, [r7, #12]
 8105c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105c30:	b29a      	uxth	r2, r3
 8105c32:	68fb      	ldr	r3, [r7, #12]
 8105c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8105c36:	68fb      	ldr	r3, [r7, #12]
 8105c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105c3a:	b2da      	uxtb	r2, r3
 8105c3c:	8979      	ldrh	r1, [r7, #10]
 8105c3e:	4b4a      	ldr	r3, [pc, #296]	; (8105d68 <HAL_I2C_Mem_Read+0x22c>)
 8105c40:	9300      	str	r3, [sp, #0]
 8105c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105c46:	68f8      	ldr	r0, [r7, #12]
 8105c48:	f000 fb06 	bl	8106258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8105c4c:	697b      	ldr	r3, [r7, #20]
 8105c4e:	9300      	str	r3, [sp, #0]
 8105c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105c52:	2200      	movs	r2, #0
 8105c54:	2104      	movs	r1, #4
 8105c56:	68f8      	ldr	r0, [r7, #12]
 8105c58:	f000 f970 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105c5c:	4603      	mov	r3, r0
 8105c5e:	2b00      	cmp	r3, #0
 8105c60:	d001      	beq.n	8105c66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8105c62:	2301      	movs	r3, #1
 8105c64:	e07c      	b.n	8105d60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105c66:	68fb      	ldr	r3, [r7, #12]
 8105c68:	681b      	ldr	r3, [r3, #0]
 8105c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105c6c:	68fb      	ldr	r3, [r7, #12]
 8105c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c70:	b2d2      	uxtb	r2, r2
 8105c72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105c74:	68fb      	ldr	r3, [r7, #12]
 8105c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c78:	1c5a      	adds	r2, r3, #1
 8105c7a:	68fb      	ldr	r3, [r7, #12]
 8105c7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105c7e:	68fb      	ldr	r3, [r7, #12]
 8105c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105c82:	3b01      	subs	r3, #1
 8105c84:	b29a      	uxth	r2, r3
 8105c86:	68fb      	ldr	r3, [r7, #12]
 8105c88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105c8a:	68fb      	ldr	r3, [r7, #12]
 8105c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105c8e:	b29b      	uxth	r3, r3
 8105c90:	3b01      	subs	r3, #1
 8105c92:	b29a      	uxth	r2, r3
 8105c94:	68fb      	ldr	r3, [r7, #12]
 8105c96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105c98:	68fb      	ldr	r3, [r7, #12]
 8105c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105c9c:	b29b      	uxth	r3, r3
 8105c9e:	2b00      	cmp	r3, #0
 8105ca0:	d034      	beq.n	8105d0c <HAL_I2C_Mem_Read+0x1d0>
 8105ca2:	68fb      	ldr	r3, [r7, #12]
 8105ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105ca6:	2b00      	cmp	r3, #0
 8105ca8:	d130      	bne.n	8105d0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105caa:	697b      	ldr	r3, [r7, #20]
 8105cac:	9300      	str	r3, [sp, #0]
 8105cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105cb0:	2200      	movs	r2, #0
 8105cb2:	2180      	movs	r1, #128	; 0x80
 8105cb4:	68f8      	ldr	r0, [r7, #12]
 8105cb6:	f000 f941 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105cba:	4603      	mov	r3, r0
 8105cbc:	2b00      	cmp	r3, #0
 8105cbe:	d001      	beq.n	8105cc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8105cc0:	2301      	movs	r3, #1
 8105cc2:	e04d      	b.n	8105d60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105cc4:	68fb      	ldr	r3, [r7, #12]
 8105cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105cc8:	b29b      	uxth	r3, r3
 8105cca:	2bff      	cmp	r3, #255	; 0xff
 8105ccc:	d90e      	bls.n	8105cec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105cce:	68fb      	ldr	r3, [r7, #12]
 8105cd0:	22ff      	movs	r2, #255	; 0xff
 8105cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105cd4:	68fb      	ldr	r3, [r7, #12]
 8105cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105cd8:	b2da      	uxtb	r2, r3
 8105cda:	8979      	ldrh	r1, [r7, #10]
 8105cdc:	2300      	movs	r3, #0
 8105cde:	9300      	str	r3, [sp, #0]
 8105ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105ce4:	68f8      	ldr	r0, [r7, #12]
 8105ce6:	f000 fab7 	bl	8106258 <I2C_TransferConfig>
 8105cea:	e00f      	b.n	8105d0c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105cec:	68fb      	ldr	r3, [r7, #12]
 8105cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105cf0:	b29a      	uxth	r2, r3
 8105cf2:	68fb      	ldr	r3, [r7, #12]
 8105cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105cf6:	68fb      	ldr	r3, [r7, #12]
 8105cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105cfa:	b2da      	uxtb	r2, r3
 8105cfc:	8979      	ldrh	r1, [r7, #10]
 8105cfe:	2300      	movs	r3, #0
 8105d00:	9300      	str	r3, [sp, #0]
 8105d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105d06:	68f8      	ldr	r0, [r7, #12]
 8105d08:	f000 faa6 	bl	8106258 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8105d0c:	68fb      	ldr	r3, [r7, #12]
 8105d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105d10:	b29b      	uxth	r3, r3
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d19a      	bne.n	8105c4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105d16:	697a      	ldr	r2, [r7, #20]
 8105d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105d1a:	68f8      	ldr	r0, [r7, #12]
 8105d1c:	f000 f98e 	bl	810603c <I2C_WaitOnSTOPFlagUntilTimeout>
 8105d20:	4603      	mov	r3, r0
 8105d22:	2b00      	cmp	r3, #0
 8105d24:	d001      	beq.n	8105d2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8105d26:	2301      	movs	r3, #1
 8105d28:	e01a      	b.n	8105d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105d2a:	68fb      	ldr	r3, [r7, #12]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	2220      	movs	r2, #32
 8105d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105d32:	68fb      	ldr	r3, [r7, #12]
 8105d34:	681b      	ldr	r3, [r3, #0]
 8105d36:	6859      	ldr	r1, [r3, #4]
 8105d38:	68fb      	ldr	r3, [r7, #12]
 8105d3a:	681a      	ldr	r2, [r3, #0]
 8105d3c:	4b0b      	ldr	r3, [pc, #44]	; (8105d6c <HAL_I2C_Mem_Read+0x230>)
 8105d3e:	400b      	ands	r3, r1
 8105d40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105d42:	68fb      	ldr	r3, [r7, #12]
 8105d44:	2220      	movs	r2, #32
 8105d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105d4a:	68fb      	ldr	r3, [r7, #12]
 8105d4c:	2200      	movs	r2, #0
 8105d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105d52:	68fb      	ldr	r3, [r7, #12]
 8105d54:	2200      	movs	r2, #0
 8105d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105d5a:	2300      	movs	r3, #0
 8105d5c:	e000      	b.n	8105d60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8105d5e:	2302      	movs	r3, #2
  }
}
 8105d60:	4618      	mov	r0, r3
 8105d62:	3718      	adds	r7, #24
 8105d64:	46bd      	mov	sp, r7
 8105d66:	bd80      	pop	{r7, pc}
 8105d68:	80002400 	.word	0x80002400
 8105d6c:	fe00e800 	.word	0xfe00e800

08105d70 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8105d70:	b480      	push	{r7}
 8105d72:	b083      	sub	sp, #12
 8105d74:	af00      	add	r7, sp, #0
 8105d76:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8105d78:	687b      	ldr	r3, [r7, #4]
 8105d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105d7e:	b2db      	uxtb	r3, r3
}
 8105d80:	4618      	mov	r0, r3
 8105d82:	370c      	adds	r7, #12
 8105d84:	46bd      	mov	sp, r7
 8105d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d8a:	4770      	bx	lr

08105d8c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8105d8c:	b480      	push	{r7}
 8105d8e:	b083      	sub	sp, #12
 8105d90:	af00      	add	r7, sp, #0
 8105d92:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8105d98:	4618      	mov	r0, r3
 8105d9a:	370c      	adds	r7, #12
 8105d9c:	46bd      	mov	sp, r7
 8105d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105da2:	4770      	bx	lr

08105da4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105da4:	b580      	push	{r7, lr}
 8105da6:	b086      	sub	sp, #24
 8105da8:	af02      	add	r7, sp, #8
 8105daa:	60f8      	str	r0, [r7, #12]
 8105dac:	4608      	mov	r0, r1
 8105dae:	4611      	mov	r1, r2
 8105db0:	461a      	mov	r2, r3
 8105db2:	4603      	mov	r3, r0
 8105db4:	817b      	strh	r3, [r7, #10]
 8105db6:	460b      	mov	r3, r1
 8105db8:	813b      	strh	r3, [r7, #8]
 8105dba:	4613      	mov	r3, r2
 8105dbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105dbe:	88fb      	ldrh	r3, [r7, #6]
 8105dc0:	b2da      	uxtb	r2, r3
 8105dc2:	8979      	ldrh	r1, [r7, #10]
 8105dc4:	4b20      	ldr	r3, [pc, #128]	; (8105e48 <I2C_RequestMemoryWrite+0xa4>)
 8105dc6:	9300      	str	r3, [sp, #0]
 8105dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105dcc:	68f8      	ldr	r0, [r7, #12]
 8105dce:	f000 fa43 	bl	8106258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105dd2:	69fa      	ldr	r2, [r7, #28]
 8105dd4:	69b9      	ldr	r1, [r7, #24]
 8105dd6:	68f8      	ldr	r0, [r7, #12]
 8105dd8:	f000 f8f0 	bl	8105fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8105ddc:	4603      	mov	r3, r0
 8105dde:	2b00      	cmp	r3, #0
 8105de0:	d001      	beq.n	8105de6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8105de2:	2301      	movs	r3, #1
 8105de4:	e02c      	b.n	8105e40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105de6:	88fb      	ldrh	r3, [r7, #6]
 8105de8:	2b01      	cmp	r3, #1
 8105dea:	d105      	bne.n	8105df8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105dec:	893b      	ldrh	r3, [r7, #8]
 8105dee:	b2da      	uxtb	r2, r3
 8105df0:	68fb      	ldr	r3, [r7, #12]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	629a      	str	r2, [r3, #40]	; 0x28
 8105df6:	e015      	b.n	8105e24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105df8:	893b      	ldrh	r3, [r7, #8]
 8105dfa:	0a1b      	lsrs	r3, r3, #8
 8105dfc:	b29b      	uxth	r3, r3
 8105dfe:	b2da      	uxtb	r2, r3
 8105e00:	68fb      	ldr	r3, [r7, #12]
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105e06:	69fa      	ldr	r2, [r7, #28]
 8105e08:	69b9      	ldr	r1, [r7, #24]
 8105e0a:	68f8      	ldr	r0, [r7, #12]
 8105e0c:	f000 f8d6 	bl	8105fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8105e10:	4603      	mov	r3, r0
 8105e12:	2b00      	cmp	r3, #0
 8105e14:	d001      	beq.n	8105e1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8105e16:	2301      	movs	r3, #1
 8105e18:	e012      	b.n	8105e40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105e1a:	893b      	ldrh	r3, [r7, #8]
 8105e1c:	b2da      	uxtb	r2, r3
 8105e1e:	68fb      	ldr	r3, [r7, #12]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105e24:	69fb      	ldr	r3, [r7, #28]
 8105e26:	9300      	str	r3, [sp, #0]
 8105e28:	69bb      	ldr	r3, [r7, #24]
 8105e2a:	2200      	movs	r2, #0
 8105e2c:	2180      	movs	r1, #128	; 0x80
 8105e2e:	68f8      	ldr	r0, [r7, #12]
 8105e30:	f000 f884 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105e34:	4603      	mov	r3, r0
 8105e36:	2b00      	cmp	r3, #0
 8105e38:	d001      	beq.n	8105e3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8105e3a:	2301      	movs	r3, #1
 8105e3c:	e000      	b.n	8105e40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8105e3e:	2300      	movs	r3, #0
}
 8105e40:	4618      	mov	r0, r3
 8105e42:	3710      	adds	r7, #16
 8105e44:	46bd      	mov	sp, r7
 8105e46:	bd80      	pop	{r7, pc}
 8105e48:	80002000 	.word	0x80002000

08105e4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105e4c:	b580      	push	{r7, lr}
 8105e4e:	b086      	sub	sp, #24
 8105e50:	af02      	add	r7, sp, #8
 8105e52:	60f8      	str	r0, [r7, #12]
 8105e54:	4608      	mov	r0, r1
 8105e56:	4611      	mov	r1, r2
 8105e58:	461a      	mov	r2, r3
 8105e5a:	4603      	mov	r3, r0
 8105e5c:	817b      	strh	r3, [r7, #10]
 8105e5e:	460b      	mov	r3, r1
 8105e60:	813b      	strh	r3, [r7, #8]
 8105e62:	4613      	mov	r3, r2
 8105e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8105e66:	88fb      	ldrh	r3, [r7, #6]
 8105e68:	b2da      	uxtb	r2, r3
 8105e6a:	8979      	ldrh	r1, [r7, #10]
 8105e6c:	4b20      	ldr	r3, [pc, #128]	; (8105ef0 <I2C_RequestMemoryRead+0xa4>)
 8105e6e:	9300      	str	r3, [sp, #0]
 8105e70:	2300      	movs	r3, #0
 8105e72:	68f8      	ldr	r0, [r7, #12]
 8105e74:	f000 f9f0 	bl	8106258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105e78:	69fa      	ldr	r2, [r7, #28]
 8105e7a:	69b9      	ldr	r1, [r7, #24]
 8105e7c:	68f8      	ldr	r0, [r7, #12]
 8105e7e:	f000 f89d 	bl	8105fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8105e82:	4603      	mov	r3, r0
 8105e84:	2b00      	cmp	r3, #0
 8105e86:	d001      	beq.n	8105e8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8105e88:	2301      	movs	r3, #1
 8105e8a:	e02c      	b.n	8105ee6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105e8c:	88fb      	ldrh	r3, [r7, #6]
 8105e8e:	2b01      	cmp	r3, #1
 8105e90:	d105      	bne.n	8105e9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105e92:	893b      	ldrh	r3, [r7, #8]
 8105e94:	b2da      	uxtb	r2, r3
 8105e96:	68fb      	ldr	r3, [r7, #12]
 8105e98:	681b      	ldr	r3, [r3, #0]
 8105e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8105e9c:	e015      	b.n	8105eca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105e9e:	893b      	ldrh	r3, [r7, #8]
 8105ea0:	0a1b      	lsrs	r3, r3, #8
 8105ea2:	b29b      	uxth	r3, r3
 8105ea4:	b2da      	uxtb	r2, r3
 8105ea6:	68fb      	ldr	r3, [r7, #12]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105eac:	69fa      	ldr	r2, [r7, #28]
 8105eae:	69b9      	ldr	r1, [r7, #24]
 8105eb0:	68f8      	ldr	r0, [r7, #12]
 8105eb2:	f000 f883 	bl	8105fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8105eb6:	4603      	mov	r3, r0
 8105eb8:	2b00      	cmp	r3, #0
 8105eba:	d001      	beq.n	8105ec0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8105ebc:	2301      	movs	r3, #1
 8105ebe:	e012      	b.n	8105ee6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105ec0:	893b      	ldrh	r3, [r7, #8]
 8105ec2:	b2da      	uxtb	r2, r3
 8105ec4:	68fb      	ldr	r3, [r7, #12]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8105eca:	69fb      	ldr	r3, [r7, #28]
 8105ecc:	9300      	str	r3, [sp, #0]
 8105ece:	69bb      	ldr	r3, [r7, #24]
 8105ed0:	2200      	movs	r2, #0
 8105ed2:	2140      	movs	r1, #64	; 0x40
 8105ed4:	68f8      	ldr	r0, [r7, #12]
 8105ed6:	f000 f831 	bl	8105f3c <I2C_WaitOnFlagUntilTimeout>
 8105eda:	4603      	mov	r3, r0
 8105edc:	2b00      	cmp	r3, #0
 8105ede:	d001      	beq.n	8105ee4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8105ee0:	2301      	movs	r3, #1
 8105ee2:	e000      	b.n	8105ee6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8105ee4:	2300      	movs	r3, #0
}
 8105ee6:	4618      	mov	r0, r3
 8105ee8:	3710      	adds	r7, #16
 8105eea:	46bd      	mov	sp, r7
 8105eec:	bd80      	pop	{r7, pc}
 8105eee:	bf00      	nop
 8105ef0:	80002000 	.word	0x80002000

08105ef4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105ef4:	b480      	push	{r7}
 8105ef6:	b083      	sub	sp, #12
 8105ef8:	af00      	add	r7, sp, #0
 8105efa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105efc:	687b      	ldr	r3, [r7, #4]
 8105efe:	681b      	ldr	r3, [r3, #0]
 8105f00:	699b      	ldr	r3, [r3, #24]
 8105f02:	f003 0302 	and.w	r3, r3, #2
 8105f06:	2b02      	cmp	r3, #2
 8105f08:	d103      	bne.n	8105f12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	681b      	ldr	r3, [r3, #0]
 8105f0e:	2200      	movs	r2, #0
 8105f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	681b      	ldr	r3, [r3, #0]
 8105f16:	699b      	ldr	r3, [r3, #24]
 8105f18:	f003 0301 	and.w	r3, r3, #1
 8105f1c:	2b01      	cmp	r3, #1
 8105f1e:	d007      	beq.n	8105f30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	681b      	ldr	r3, [r3, #0]
 8105f24:	699a      	ldr	r2, [r3, #24]
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	681b      	ldr	r3, [r3, #0]
 8105f2a:	f042 0201 	orr.w	r2, r2, #1
 8105f2e:	619a      	str	r2, [r3, #24]
  }
}
 8105f30:	bf00      	nop
 8105f32:	370c      	adds	r7, #12
 8105f34:	46bd      	mov	sp, r7
 8105f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f3a:	4770      	bx	lr

08105f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8105f3c:	b580      	push	{r7, lr}
 8105f3e:	b084      	sub	sp, #16
 8105f40:	af00      	add	r7, sp, #0
 8105f42:	60f8      	str	r0, [r7, #12]
 8105f44:	60b9      	str	r1, [r7, #8]
 8105f46:	603b      	str	r3, [r7, #0]
 8105f48:	4613      	mov	r3, r2
 8105f4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105f4c:	e022      	b.n	8105f94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105f4e:	683b      	ldr	r3, [r7, #0]
 8105f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105f54:	d01e      	beq.n	8105f94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105f56:	f7fc f8ad 	bl	81020b4 <HAL_GetTick>
 8105f5a:	4602      	mov	r2, r0
 8105f5c:	69bb      	ldr	r3, [r7, #24]
 8105f5e:	1ad3      	subs	r3, r2, r3
 8105f60:	683a      	ldr	r2, [r7, #0]
 8105f62:	429a      	cmp	r2, r3
 8105f64:	d302      	bcc.n	8105f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8105f66:	683b      	ldr	r3, [r7, #0]
 8105f68:	2b00      	cmp	r3, #0
 8105f6a:	d113      	bne.n	8105f94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105f6c:	68fb      	ldr	r3, [r7, #12]
 8105f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105f70:	f043 0220 	orr.w	r2, r3, #32
 8105f74:	68fb      	ldr	r3, [r7, #12]
 8105f76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105f78:	68fb      	ldr	r3, [r7, #12]
 8105f7a:	2220      	movs	r2, #32
 8105f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105f80:	68fb      	ldr	r3, [r7, #12]
 8105f82:	2200      	movs	r2, #0
 8105f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105f88:	68fb      	ldr	r3, [r7, #12]
 8105f8a:	2200      	movs	r2, #0
 8105f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105f90:	2301      	movs	r3, #1
 8105f92:	e00f      	b.n	8105fb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105f94:	68fb      	ldr	r3, [r7, #12]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	699a      	ldr	r2, [r3, #24]
 8105f9a:	68bb      	ldr	r3, [r7, #8]
 8105f9c:	4013      	ands	r3, r2
 8105f9e:	68ba      	ldr	r2, [r7, #8]
 8105fa0:	429a      	cmp	r2, r3
 8105fa2:	bf0c      	ite	eq
 8105fa4:	2301      	moveq	r3, #1
 8105fa6:	2300      	movne	r3, #0
 8105fa8:	b2db      	uxtb	r3, r3
 8105faa:	461a      	mov	r2, r3
 8105fac:	79fb      	ldrb	r3, [r7, #7]
 8105fae:	429a      	cmp	r2, r3
 8105fb0:	d0cd      	beq.n	8105f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105fb2:	2300      	movs	r3, #0
}
 8105fb4:	4618      	mov	r0, r3
 8105fb6:	3710      	adds	r7, #16
 8105fb8:	46bd      	mov	sp, r7
 8105fba:	bd80      	pop	{r7, pc}

08105fbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105fbc:	b580      	push	{r7, lr}
 8105fbe:	b084      	sub	sp, #16
 8105fc0:	af00      	add	r7, sp, #0
 8105fc2:	60f8      	str	r0, [r7, #12]
 8105fc4:	60b9      	str	r1, [r7, #8]
 8105fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105fc8:	e02c      	b.n	8106024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105fca:	687a      	ldr	r2, [r7, #4]
 8105fcc:	68b9      	ldr	r1, [r7, #8]
 8105fce:	68f8      	ldr	r0, [r7, #12]
 8105fd0:	f000 f8dc 	bl	810618c <I2C_IsAcknowledgeFailed>
 8105fd4:	4603      	mov	r3, r0
 8105fd6:	2b00      	cmp	r3, #0
 8105fd8:	d001      	beq.n	8105fde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105fda:	2301      	movs	r3, #1
 8105fdc:	e02a      	b.n	8106034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105fde:	68bb      	ldr	r3, [r7, #8]
 8105fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105fe4:	d01e      	beq.n	8106024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105fe6:	f7fc f865 	bl	81020b4 <HAL_GetTick>
 8105fea:	4602      	mov	r2, r0
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	1ad3      	subs	r3, r2, r3
 8105ff0:	68ba      	ldr	r2, [r7, #8]
 8105ff2:	429a      	cmp	r2, r3
 8105ff4:	d302      	bcc.n	8105ffc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105ff6:	68bb      	ldr	r3, [r7, #8]
 8105ff8:	2b00      	cmp	r3, #0
 8105ffa:	d113      	bne.n	8106024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105ffc:	68fb      	ldr	r3, [r7, #12]
 8105ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106000:	f043 0220 	orr.w	r2, r3, #32
 8106004:	68fb      	ldr	r3, [r7, #12]
 8106006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8106008:	68fb      	ldr	r3, [r7, #12]
 810600a:	2220      	movs	r2, #32
 810600c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8106010:	68fb      	ldr	r3, [r7, #12]
 8106012:	2200      	movs	r2, #0
 8106014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8106018:	68fb      	ldr	r3, [r7, #12]
 810601a:	2200      	movs	r2, #0
 810601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8106020:	2301      	movs	r3, #1
 8106022:	e007      	b.n	8106034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8106024:	68fb      	ldr	r3, [r7, #12]
 8106026:	681b      	ldr	r3, [r3, #0]
 8106028:	699b      	ldr	r3, [r3, #24]
 810602a:	f003 0302 	and.w	r3, r3, #2
 810602e:	2b02      	cmp	r3, #2
 8106030:	d1cb      	bne.n	8105fca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8106032:	2300      	movs	r3, #0
}
 8106034:	4618      	mov	r0, r3
 8106036:	3710      	adds	r7, #16
 8106038:	46bd      	mov	sp, r7
 810603a:	bd80      	pop	{r7, pc}

0810603c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810603c:	b580      	push	{r7, lr}
 810603e:	b084      	sub	sp, #16
 8106040:	af00      	add	r7, sp, #0
 8106042:	60f8      	str	r0, [r7, #12]
 8106044:	60b9      	str	r1, [r7, #8]
 8106046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8106048:	e028      	b.n	810609c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810604a:	687a      	ldr	r2, [r7, #4]
 810604c:	68b9      	ldr	r1, [r7, #8]
 810604e:	68f8      	ldr	r0, [r7, #12]
 8106050:	f000 f89c 	bl	810618c <I2C_IsAcknowledgeFailed>
 8106054:	4603      	mov	r3, r0
 8106056:	2b00      	cmp	r3, #0
 8106058:	d001      	beq.n	810605e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810605a:	2301      	movs	r3, #1
 810605c:	e026      	b.n	81060ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810605e:	f7fc f829 	bl	81020b4 <HAL_GetTick>
 8106062:	4602      	mov	r2, r0
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	1ad3      	subs	r3, r2, r3
 8106068:	68ba      	ldr	r2, [r7, #8]
 810606a:	429a      	cmp	r2, r3
 810606c:	d302      	bcc.n	8106074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810606e:	68bb      	ldr	r3, [r7, #8]
 8106070:	2b00      	cmp	r3, #0
 8106072:	d113      	bne.n	810609c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106074:	68fb      	ldr	r3, [r7, #12]
 8106076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106078:	f043 0220 	orr.w	r2, r3, #32
 810607c:	68fb      	ldr	r3, [r7, #12]
 810607e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8106080:	68fb      	ldr	r3, [r7, #12]
 8106082:	2220      	movs	r2, #32
 8106084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8106088:	68fb      	ldr	r3, [r7, #12]
 810608a:	2200      	movs	r2, #0
 810608c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106090:	68fb      	ldr	r3, [r7, #12]
 8106092:	2200      	movs	r2, #0
 8106094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8106098:	2301      	movs	r3, #1
 810609a:	e007      	b.n	81060ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810609c:	68fb      	ldr	r3, [r7, #12]
 810609e:	681b      	ldr	r3, [r3, #0]
 81060a0:	699b      	ldr	r3, [r3, #24]
 81060a2:	f003 0320 	and.w	r3, r3, #32
 81060a6:	2b20      	cmp	r3, #32
 81060a8:	d1cf      	bne.n	810604a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81060aa:	2300      	movs	r3, #0
}
 81060ac:	4618      	mov	r0, r3
 81060ae:	3710      	adds	r7, #16
 81060b0:	46bd      	mov	sp, r7
 81060b2:	bd80      	pop	{r7, pc}

081060b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81060b4:	b580      	push	{r7, lr}
 81060b6:	b084      	sub	sp, #16
 81060b8:	af00      	add	r7, sp, #0
 81060ba:	60f8      	str	r0, [r7, #12]
 81060bc:	60b9      	str	r1, [r7, #8]
 81060be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 81060c0:	e055      	b.n	810616e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81060c2:	687a      	ldr	r2, [r7, #4]
 81060c4:	68b9      	ldr	r1, [r7, #8]
 81060c6:	68f8      	ldr	r0, [r7, #12]
 81060c8:	f000 f860 	bl	810618c <I2C_IsAcknowledgeFailed>
 81060cc:	4603      	mov	r3, r0
 81060ce:	2b00      	cmp	r3, #0
 81060d0:	d001      	beq.n	81060d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81060d2:	2301      	movs	r3, #1
 81060d4:	e053      	b.n	810617e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 81060d6:	68fb      	ldr	r3, [r7, #12]
 81060d8:	681b      	ldr	r3, [r3, #0]
 81060da:	699b      	ldr	r3, [r3, #24]
 81060dc:	f003 0320 	and.w	r3, r3, #32
 81060e0:	2b20      	cmp	r3, #32
 81060e2:	d129      	bne.n	8106138 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81060e4:	68fb      	ldr	r3, [r7, #12]
 81060e6:	681b      	ldr	r3, [r3, #0]
 81060e8:	699b      	ldr	r3, [r3, #24]
 81060ea:	f003 0304 	and.w	r3, r3, #4
 81060ee:	2b04      	cmp	r3, #4
 81060f0:	d105      	bne.n	81060fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 81060f2:	68fb      	ldr	r3, [r7, #12]
 81060f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81060f6:	2b00      	cmp	r3, #0
 81060f8:	d001      	beq.n	81060fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 81060fa:	2300      	movs	r3, #0
 81060fc:	e03f      	b.n	810617e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81060fe:	68fb      	ldr	r3, [r7, #12]
 8106100:	681b      	ldr	r3, [r3, #0]
 8106102:	2220      	movs	r2, #32
 8106104:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8106106:	68fb      	ldr	r3, [r7, #12]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	6859      	ldr	r1, [r3, #4]
 810610c:	68fb      	ldr	r3, [r7, #12]
 810610e:	681a      	ldr	r2, [r3, #0]
 8106110:	4b1d      	ldr	r3, [pc, #116]	; (8106188 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8106112:	400b      	ands	r3, r1
 8106114:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106116:	68fb      	ldr	r3, [r7, #12]
 8106118:	2200      	movs	r2, #0
 810611a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810611c:	68fb      	ldr	r3, [r7, #12]
 810611e:	2220      	movs	r2, #32
 8106120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8106124:	68fb      	ldr	r3, [r7, #12]
 8106126:	2200      	movs	r2, #0
 8106128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810612c:	68fb      	ldr	r3, [r7, #12]
 810612e:	2200      	movs	r2, #0
 8106130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8106134:	2301      	movs	r3, #1
 8106136:	e022      	b.n	810617e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106138:	f7fb ffbc 	bl	81020b4 <HAL_GetTick>
 810613c:	4602      	mov	r2, r0
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	1ad3      	subs	r3, r2, r3
 8106142:	68ba      	ldr	r2, [r7, #8]
 8106144:	429a      	cmp	r2, r3
 8106146:	d302      	bcc.n	810614e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8106148:	68bb      	ldr	r3, [r7, #8]
 810614a:	2b00      	cmp	r3, #0
 810614c:	d10f      	bne.n	810616e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810614e:	68fb      	ldr	r3, [r7, #12]
 8106150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106152:	f043 0220 	orr.w	r2, r3, #32
 8106156:	68fb      	ldr	r3, [r7, #12]
 8106158:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 810615a:	68fb      	ldr	r3, [r7, #12]
 810615c:	2220      	movs	r2, #32
 810615e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106162:	68fb      	ldr	r3, [r7, #12]
 8106164:	2200      	movs	r2, #0
 8106166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 810616a:	2301      	movs	r3, #1
 810616c:	e007      	b.n	810617e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 810616e:	68fb      	ldr	r3, [r7, #12]
 8106170:	681b      	ldr	r3, [r3, #0]
 8106172:	699b      	ldr	r3, [r3, #24]
 8106174:	f003 0304 	and.w	r3, r3, #4
 8106178:	2b04      	cmp	r3, #4
 810617a:	d1a2      	bne.n	81060c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810617c:	2300      	movs	r3, #0
}
 810617e:	4618      	mov	r0, r3
 8106180:	3710      	adds	r7, #16
 8106182:	46bd      	mov	sp, r7
 8106184:	bd80      	pop	{r7, pc}
 8106186:	bf00      	nop
 8106188:	fe00e800 	.word	0xfe00e800

0810618c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810618c:	b580      	push	{r7, lr}
 810618e:	b084      	sub	sp, #16
 8106190:	af00      	add	r7, sp, #0
 8106192:	60f8      	str	r0, [r7, #12]
 8106194:	60b9      	str	r1, [r7, #8]
 8106196:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8106198:	68fb      	ldr	r3, [r7, #12]
 810619a:	681b      	ldr	r3, [r3, #0]
 810619c:	699b      	ldr	r3, [r3, #24]
 810619e:	f003 0310 	and.w	r3, r3, #16
 81061a2:	2b10      	cmp	r3, #16
 81061a4:	d151      	bne.n	810624a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81061a6:	e022      	b.n	81061ee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81061a8:	68bb      	ldr	r3, [r7, #8]
 81061aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81061ae:	d01e      	beq.n	81061ee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81061b0:	f7fb ff80 	bl	81020b4 <HAL_GetTick>
 81061b4:	4602      	mov	r2, r0
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	1ad3      	subs	r3, r2, r3
 81061ba:	68ba      	ldr	r2, [r7, #8]
 81061bc:	429a      	cmp	r2, r3
 81061be:	d302      	bcc.n	81061c6 <I2C_IsAcknowledgeFailed+0x3a>
 81061c0:	68bb      	ldr	r3, [r7, #8]
 81061c2:	2b00      	cmp	r3, #0
 81061c4:	d113      	bne.n	81061ee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81061c6:	68fb      	ldr	r3, [r7, #12]
 81061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81061ca:	f043 0220 	orr.w	r2, r3, #32
 81061ce:	68fb      	ldr	r3, [r7, #12]
 81061d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81061d2:	68fb      	ldr	r3, [r7, #12]
 81061d4:	2220      	movs	r2, #32
 81061d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81061da:	68fb      	ldr	r3, [r7, #12]
 81061dc:	2200      	movs	r2, #0
 81061de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81061e2:	68fb      	ldr	r3, [r7, #12]
 81061e4:	2200      	movs	r2, #0
 81061e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81061ea:	2301      	movs	r3, #1
 81061ec:	e02e      	b.n	810624c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81061ee:	68fb      	ldr	r3, [r7, #12]
 81061f0:	681b      	ldr	r3, [r3, #0]
 81061f2:	699b      	ldr	r3, [r3, #24]
 81061f4:	f003 0320 	and.w	r3, r3, #32
 81061f8:	2b20      	cmp	r3, #32
 81061fa:	d1d5      	bne.n	81061a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81061fc:	68fb      	ldr	r3, [r7, #12]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	2210      	movs	r2, #16
 8106202:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106204:	68fb      	ldr	r3, [r7, #12]
 8106206:	681b      	ldr	r3, [r3, #0]
 8106208:	2220      	movs	r2, #32
 810620a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810620c:	68f8      	ldr	r0, [r7, #12]
 810620e:	f7ff fe71 	bl	8105ef4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106212:	68fb      	ldr	r3, [r7, #12]
 8106214:	681b      	ldr	r3, [r3, #0]
 8106216:	6859      	ldr	r1, [r3, #4]
 8106218:	68fb      	ldr	r3, [r7, #12]
 810621a:	681a      	ldr	r2, [r3, #0]
 810621c:	4b0d      	ldr	r3, [pc, #52]	; (8106254 <I2C_IsAcknowledgeFailed+0xc8>)
 810621e:	400b      	ands	r3, r1
 8106220:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8106222:	68fb      	ldr	r3, [r7, #12]
 8106224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106226:	f043 0204 	orr.w	r2, r3, #4
 810622a:	68fb      	ldr	r3, [r7, #12]
 810622c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810622e:	68fb      	ldr	r3, [r7, #12]
 8106230:	2220      	movs	r2, #32
 8106232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8106236:	68fb      	ldr	r3, [r7, #12]
 8106238:	2200      	movs	r2, #0
 810623a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810623e:	68fb      	ldr	r3, [r7, #12]
 8106240:	2200      	movs	r2, #0
 8106242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8106246:	2301      	movs	r3, #1
 8106248:	e000      	b.n	810624c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 810624a:	2300      	movs	r3, #0
}
 810624c:	4618      	mov	r0, r3
 810624e:	3710      	adds	r7, #16
 8106250:	46bd      	mov	sp, r7
 8106252:	bd80      	pop	{r7, pc}
 8106254:	fe00e800 	.word	0xfe00e800

08106258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8106258:	b480      	push	{r7}
 810625a:	b085      	sub	sp, #20
 810625c:	af00      	add	r7, sp, #0
 810625e:	60f8      	str	r0, [r7, #12]
 8106260:	607b      	str	r3, [r7, #4]
 8106262:	460b      	mov	r3, r1
 8106264:	817b      	strh	r3, [r7, #10]
 8106266:	4613      	mov	r3, r2
 8106268:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 810626a:	68fb      	ldr	r3, [r7, #12]
 810626c:	681b      	ldr	r3, [r3, #0]
 810626e:	685a      	ldr	r2, [r3, #4]
 8106270:	69bb      	ldr	r3, [r7, #24]
 8106272:	0d5b      	lsrs	r3, r3, #21
 8106274:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8106278:	4b0d      	ldr	r3, [pc, #52]	; (81062b0 <I2C_TransferConfig+0x58>)
 810627a:	430b      	orrs	r3, r1
 810627c:	43db      	mvns	r3, r3
 810627e:	ea02 0103 	and.w	r1, r2, r3
 8106282:	897b      	ldrh	r3, [r7, #10]
 8106284:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8106288:	7a7b      	ldrb	r3, [r7, #9]
 810628a:	041b      	lsls	r3, r3, #16
 810628c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8106290:	431a      	orrs	r2, r3
 8106292:	687b      	ldr	r3, [r7, #4]
 8106294:	431a      	orrs	r2, r3
 8106296:	69bb      	ldr	r3, [r7, #24]
 8106298:	431a      	orrs	r2, r3
 810629a:	68fb      	ldr	r3, [r7, #12]
 810629c:	681b      	ldr	r3, [r3, #0]
 810629e:	430a      	orrs	r2, r1
 81062a0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 81062a2:	bf00      	nop
 81062a4:	3714      	adds	r7, #20
 81062a6:	46bd      	mov	sp, r7
 81062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062ac:	4770      	bx	lr
 81062ae:	bf00      	nop
 81062b0:	03ff63ff 	.word	0x03ff63ff

081062b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81062b4:	b480      	push	{r7}
 81062b6:	b083      	sub	sp, #12
 81062b8:	af00      	add	r7, sp, #0
 81062ba:	6078      	str	r0, [r7, #4]
 81062bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81062c4:	b2db      	uxtb	r3, r3
 81062c6:	2b20      	cmp	r3, #32
 81062c8:	d138      	bne.n	810633c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81062d0:	2b01      	cmp	r3, #1
 81062d2:	d101      	bne.n	81062d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81062d4:	2302      	movs	r3, #2
 81062d6:	e032      	b.n	810633e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81062d8:	687b      	ldr	r3, [r7, #4]
 81062da:	2201      	movs	r2, #1
 81062dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	2224      	movs	r2, #36	; 0x24
 81062e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	681a      	ldr	r2, [r3, #0]
 81062ee:	687b      	ldr	r3, [r7, #4]
 81062f0:	681b      	ldr	r3, [r3, #0]
 81062f2:	f022 0201 	bic.w	r2, r2, #1
 81062f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	681a      	ldr	r2, [r3, #0]
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8106306:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	6819      	ldr	r1, [r3, #0]
 810630e:	687b      	ldr	r3, [r7, #4]
 8106310:	681b      	ldr	r3, [r3, #0]
 8106312:	683a      	ldr	r2, [r7, #0]
 8106314:	430a      	orrs	r2, r1
 8106316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	681b      	ldr	r3, [r3, #0]
 810631c:	681a      	ldr	r2, [r3, #0]
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	681b      	ldr	r3, [r3, #0]
 8106322:	f042 0201 	orr.w	r2, r2, #1
 8106326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	2220      	movs	r2, #32
 810632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	2200      	movs	r2, #0
 8106334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106338:	2300      	movs	r3, #0
 810633a:	e000      	b.n	810633e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810633c:	2302      	movs	r3, #2
  }
}
 810633e:	4618      	mov	r0, r3
 8106340:	370c      	adds	r7, #12
 8106342:	46bd      	mov	sp, r7
 8106344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106348:	4770      	bx	lr

0810634a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810634a:	b480      	push	{r7}
 810634c:	b085      	sub	sp, #20
 810634e:	af00      	add	r7, sp, #0
 8106350:	6078      	str	r0, [r7, #4]
 8106352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810635a:	b2db      	uxtb	r3, r3
 810635c:	2b20      	cmp	r3, #32
 810635e:	d139      	bne.n	81063d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106366:	2b01      	cmp	r3, #1
 8106368:	d101      	bne.n	810636e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810636a:	2302      	movs	r3, #2
 810636c:	e033      	b.n	81063d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	2201      	movs	r2, #1
 8106372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	2224      	movs	r2, #36	; 0x24
 810637a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810637e:	687b      	ldr	r3, [r7, #4]
 8106380:	681b      	ldr	r3, [r3, #0]
 8106382:	681a      	ldr	r2, [r3, #0]
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	681b      	ldr	r3, [r3, #0]
 8106388:	f022 0201 	bic.w	r2, r2, #1
 810638c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	681b      	ldr	r3, [r3, #0]
 8106392:	681b      	ldr	r3, [r3, #0]
 8106394:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8106396:	68fb      	ldr	r3, [r7, #12]
 8106398:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810639c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810639e:	683b      	ldr	r3, [r7, #0]
 81063a0:	021b      	lsls	r3, r3, #8
 81063a2:	68fa      	ldr	r2, [r7, #12]
 81063a4:	4313      	orrs	r3, r2
 81063a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81063a8:	687b      	ldr	r3, [r7, #4]
 81063aa:	681b      	ldr	r3, [r3, #0]
 81063ac:	68fa      	ldr	r2, [r7, #12]
 81063ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81063b0:	687b      	ldr	r3, [r7, #4]
 81063b2:	681b      	ldr	r3, [r3, #0]
 81063b4:	681a      	ldr	r2, [r3, #0]
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	681b      	ldr	r3, [r3, #0]
 81063ba:	f042 0201 	orr.w	r2, r2, #1
 81063be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	2220      	movs	r2, #32
 81063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	2200      	movs	r2, #0
 81063cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81063d0:	2300      	movs	r3, #0
 81063d2:	e000      	b.n	81063d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81063d4:	2302      	movs	r3, #2
  }
}
 81063d6:	4618      	mov	r0, r3
 81063d8:	3714      	adds	r7, #20
 81063da:	46bd      	mov	sp, r7
 81063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063e0:	4770      	bx	lr
	...

081063e4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 81063e4:	b480      	push	{r7}
 81063e6:	b085      	sub	sp, #20
 81063e8:	af00      	add	r7, sp, #0
 81063ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81063ec:	4b0d      	ldr	r3, [pc, #52]	; (8106424 <HAL_I2CEx_EnableFastModePlus+0x40>)
 81063ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81063f2:	4a0c      	ldr	r2, [pc, #48]	; (8106424 <HAL_I2CEx_EnableFastModePlus+0x40>)
 81063f4:	f043 0302 	orr.w	r3, r3, #2
 81063f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81063fc:	4b09      	ldr	r3, [pc, #36]	; (8106424 <HAL_I2CEx_EnableFastModePlus+0x40>)
 81063fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106402:	f003 0302 	and.w	r3, r3, #2
 8106406:	60fb      	str	r3, [r7, #12]
 8106408:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 810640a:	4b07      	ldr	r3, [pc, #28]	; (8106428 <HAL_I2CEx_EnableFastModePlus+0x44>)
 810640c:	685a      	ldr	r2, [r3, #4]
 810640e:	4906      	ldr	r1, [pc, #24]	; (8106428 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	4313      	orrs	r3, r2
 8106414:	604b      	str	r3, [r1, #4]
}
 8106416:	bf00      	nop
 8106418:	3714      	adds	r7, #20
 810641a:	46bd      	mov	sp, r7
 810641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106420:	4770      	bx	lr
 8106422:	bf00      	nop
 8106424:	58024400 	.word	0x58024400
 8106428:	58000400 	.word	0x58000400

0810642c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 810642c:	b580      	push	{r7, lr}
 810642e:	b084      	sub	sp, #16
 8106430:	af00      	add	r7, sp, #0
 8106432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	2b00      	cmp	r3, #0
 8106438:	d101      	bne.n	810643e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 810643a:	2301      	movs	r3, #1
 810643c:	e038      	b.n	81064b0 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8106446:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	f245 5255 	movw	r2, #21845	; 0x5555
 8106450:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681b      	ldr	r3, [r3, #0]
 8106456:	687a      	ldr	r2, [r7, #4]
 8106458:	6852      	ldr	r2, [r2, #4]
 810645a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	687a      	ldr	r2, [r7, #4]
 8106462:	6892      	ldr	r2, [r2, #8]
 8106464:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8106466:	f7fb fe25 	bl	81020b4 <HAL_GetTick>
 810646a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 810646c:	e008      	b.n	8106480 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 810646e:	f7fb fe21 	bl	81020b4 <HAL_GetTick>
 8106472:	4602      	mov	r2, r0
 8106474:	68fb      	ldr	r3, [r7, #12]
 8106476:	1ad3      	subs	r3, r2, r3
 8106478:	2b30      	cmp	r3, #48	; 0x30
 810647a:	d901      	bls.n	8106480 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 810647c:	2303      	movs	r3, #3
 810647e:	e017      	b.n	81064b0 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	681b      	ldr	r3, [r3, #0]
 8106484:	68db      	ldr	r3, [r3, #12]
 8106486:	2b00      	cmp	r3, #0
 8106488:	d1f1      	bne.n	810646e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	681b      	ldr	r3, [r3, #0]
 810648e:	691a      	ldr	r2, [r3, #16]
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	68db      	ldr	r3, [r3, #12]
 8106494:	429a      	cmp	r2, r3
 8106496:	d005      	beq.n	81064a4 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	681b      	ldr	r3, [r3, #0]
 810649c:	687a      	ldr	r2, [r7, #4]
 810649e:	68d2      	ldr	r2, [r2, #12]
 81064a0:	611a      	str	r2, [r3, #16]
 81064a2:	e004      	b.n	81064ae <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 81064ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81064ae:	2300      	movs	r3, #0
}
 81064b0:	4618      	mov	r0, r3
 81064b2:	3710      	adds	r7, #16
 81064b4:	46bd      	mov	sp, r7
 81064b6:	bd80      	pop	{r7, pc}

081064b8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 81064b8:	b480      	push	{r7}
 81064ba:	b083      	sub	sp, #12
 81064bc:	af00      	add	r7, sp, #0
 81064be:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 81064c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 81064ca:	2300      	movs	r3, #0
}
 81064cc:	4618      	mov	r0, r3
 81064ce:	370c      	adds	r7, #12
 81064d0:	46bd      	mov	sp, r7
 81064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064d6:	4770      	bx	lr

081064d8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81064d8:	b580      	push	{r7, lr}
 81064da:	b084      	sub	sp, #16
 81064dc:	af00      	add	r7, sp, #0
 81064de:	60f8      	str	r0, [r7, #12]
 81064e0:	460b      	mov	r3, r1
 81064e2:	607a      	str	r2, [r7, #4]
 81064e4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81064e6:	4b35      	ldr	r3, [pc, #212]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	f023 0201 	bic.w	r2, r3, #1
 81064ee:	4933      	ldr	r1, [pc, #204]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81064f0:	68fb      	ldr	r3, [r7, #12]
 81064f2:	4313      	orrs	r3, r2
 81064f4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	2b00      	cmp	r3, #0
 81064fa:	d121      	bne.n	8106540 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81064fc:	f7fb fee0 	bl	81022c0 <HAL_GetCurrentCPUID>
 8106500:	4603      	mov	r3, r0
 8106502:	2b03      	cmp	r3, #3
 8106504:	d154      	bne.n	81065b0 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8106506:	4b2d      	ldr	r3, [pc, #180]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106508:	691b      	ldr	r3, [r3, #16]
 810650a:	4a2c      	ldr	r2, [pc, #176]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 810650c:	f023 0301 	bic.w	r3, r3, #1
 8106510:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106512:	4b2b      	ldr	r3, [pc, #172]	; (81065c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106514:	691b      	ldr	r3, [r3, #16]
 8106516:	4a2a      	ldr	r2, [pc, #168]	; (81065c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106518:	f043 0304 	orr.w	r3, r3, #4
 810651c:	6113      	str	r3, [r2, #16]
 810651e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8106522:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106526:	7afb      	ldrb	r3, [r7, #11]
 8106528:	2b01      	cmp	r3, #1
 810652a:	d101      	bne.n	8106530 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810652c:	bf30      	wfi
 810652e:	e000      	b.n	8106532 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106530:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106532:	4b23      	ldr	r3, [pc, #140]	; (81065c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106534:	691b      	ldr	r3, [r3, #16]
 8106536:	4a22      	ldr	r2, [pc, #136]	; (81065c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106538:	f023 0304 	bic.w	r3, r3, #4
 810653c:	6113      	str	r3, [r2, #16]
 810653e:	e03a      	b.n	81065b6 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	2b01      	cmp	r3, #1
 8106544:	d121      	bne.n	810658a <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8106546:	f7fb febb 	bl	81022c0 <HAL_GetCurrentCPUID>
 810654a:	4603      	mov	r3, r0
 810654c:	2b01      	cmp	r3, #1
 810654e:	d131      	bne.n	81065b4 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8106550:	4b1a      	ldr	r3, [pc, #104]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106552:	695b      	ldr	r3, [r3, #20]
 8106554:	4a19      	ldr	r2, [pc, #100]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106556:	f023 0302 	bic.w	r3, r3, #2
 810655a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810655c:	4b18      	ldr	r3, [pc, #96]	; (81065c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810655e:	691b      	ldr	r3, [r3, #16]
 8106560:	4a17      	ldr	r2, [pc, #92]	; (81065c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106562:	f043 0304 	orr.w	r3, r3, #4
 8106566:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 810656c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106570:	7afb      	ldrb	r3, [r7, #11]
 8106572:	2b01      	cmp	r3, #1
 8106574:	d101      	bne.n	810657a <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106576:	bf30      	wfi
 8106578:	e000      	b.n	810657c <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810657a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810657c:	4b10      	ldr	r3, [pc, #64]	; (81065c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810657e:	691b      	ldr	r3, [r3, #16]
 8106580:	4a0f      	ldr	r2, [pc, #60]	; (81065c0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106582:	f023 0304 	bic.w	r3, r3, #4
 8106586:	6113      	str	r3, [r2, #16]
 8106588:	e015      	b.n	81065b6 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810658a:	f7fb fe99 	bl	81022c0 <HAL_GetCurrentCPUID>
 810658e:	4603      	mov	r3, r0
 8106590:	2b03      	cmp	r3, #3
 8106592:	d106      	bne.n	81065a2 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106594:	4b09      	ldr	r3, [pc, #36]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106596:	691b      	ldr	r3, [r3, #16]
 8106598:	4a08      	ldr	r2, [pc, #32]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 810659a:	f023 0304 	bic.w	r3, r3, #4
 810659e:	6113      	str	r3, [r2, #16]
 81065a0:	e009      	b.n	81065b6 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81065a2:	4b06      	ldr	r3, [pc, #24]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81065a4:	695b      	ldr	r3, [r3, #20]
 81065a6:	4a05      	ldr	r2, [pc, #20]	; (81065bc <HAL_PWREx_EnterSTOPMode+0xe4>)
 81065a8:	f023 0304 	bic.w	r3, r3, #4
 81065ac:	6153      	str	r3, [r2, #20]
 81065ae:	e002      	b.n	81065b6 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 81065b0:	bf00      	nop
 81065b2:	e000      	b.n	81065b6 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 81065b4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81065b6:	3710      	adds	r7, #16
 81065b8:	46bd      	mov	sp, r7
 81065ba:	bd80      	pop	{r7, pc}
 81065bc:	58024800 	.word	0x58024800
 81065c0:	e000ed00 	.word	0xe000ed00

081065c4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81065c4:	b580      	push	{r7, lr}
 81065c6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81065c8:	f7fb fe7a 	bl	81022c0 <HAL_GetCurrentCPUID>
 81065cc:	4603      	mov	r3, r0
 81065ce:	2b03      	cmp	r3, #3
 81065d0:	d101      	bne.n	81065d6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81065d2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81065d4:	e001      	b.n	81065da <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81065d6:	bf40      	sev
    __WFE ();
 81065d8:	bf20      	wfe
}
 81065da:	bf00      	nop
 81065dc:	bd80      	pop	{r7, pc}
	...

081065e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81065e0:	b480      	push	{r7}
 81065e2:	b089      	sub	sp, #36	; 0x24
 81065e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81065e6:	4baf      	ldr	r3, [pc, #700]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81065e8:	691b      	ldr	r3, [r3, #16]
 81065ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81065ee:	2b18      	cmp	r3, #24
 81065f0:	f200 814e 	bhi.w	8106890 <HAL_RCC_GetSysClockFreq+0x2b0>
 81065f4:	a201      	add	r2, pc, #4	; (adr r2, 81065fc <HAL_RCC_GetSysClockFreq+0x1c>)
 81065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065fa:	bf00      	nop
 81065fc:	08106661 	.word	0x08106661
 8106600:	08106891 	.word	0x08106891
 8106604:	08106891 	.word	0x08106891
 8106608:	08106891 	.word	0x08106891
 810660c:	08106891 	.word	0x08106891
 8106610:	08106891 	.word	0x08106891
 8106614:	08106891 	.word	0x08106891
 8106618:	08106891 	.word	0x08106891
 810661c:	08106687 	.word	0x08106687
 8106620:	08106891 	.word	0x08106891
 8106624:	08106891 	.word	0x08106891
 8106628:	08106891 	.word	0x08106891
 810662c:	08106891 	.word	0x08106891
 8106630:	08106891 	.word	0x08106891
 8106634:	08106891 	.word	0x08106891
 8106638:	08106891 	.word	0x08106891
 810663c:	0810668d 	.word	0x0810668d
 8106640:	08106891 	.word	0x08106891
 8106644:	08106891 	.word	0x08106891
 8106648:	08106891 	.word	0x08106891
 810664c:	08106891 	.word	0x08106891
 8106650:	08106891 	.word	0x08106891
 8106654:	08106891 	.word	0x08106891
 8106658:	08106891 	.word	0x08106891
 810665c:	08106693 	.word	0x08106693
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106660:	4b90      	ldr	r3, [pc, #576]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	f003 0320 	and.w	r3, r3, #32
 8106668:	2b00      	cmp	r3, #0
 810666a:	d009      	beq.n	8106680 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810666c:	4b8d      	ldr	r3, [pc, #564]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	08db      	lsrs	r3, r3, #3
 8106672:	f003 0303 	and.w	r3, r3, #3
 8106676:	4a8c      	ldr	r2, [pc, #560]	; (81068a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8106678:	fa22 f303 	lsr.w	r3, r2, r3
 810667c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810667e:	e10a      	b.n	8106896 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106680:	4b89      	ldr	r3, [pc, #548]	; (81068a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8106682:	61bb      	str	r3, [r7, #24]
    break;
 8106684:	e107      	b.n	8106896 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8106686:	4b89      	ldr	r3, [pc, #548]	; (81068ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8106688:	61bb      	str	r3, [r7, #24]
    break;
 810668a:	e104      	b.n	8106896 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810668c:	4b88      	ldr	r3, [pc, #544]	; (81068b0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 810668e:	61bb      	str	r3, [r7, #24]
    break;
 8106690:	e101      	b.n	8106896 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106692:	4b84      	ldr	r3, [pc, #528]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106696:	f003 0303 	and.w	r3, r3, #3
 810669a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810669c:	4b81      	ldr	r3, [pc, #516]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066a0:	091b      	lsrs	r3, r3, #4
 81066a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81066a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81066a8:	4b7e      	ldr	r3, [pc, #504]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066ac:	f003 0301 	and.w	r3, r3, #1
 81066b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81066b2:	4b7c      	ldr	r3, [pc, #496]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81066b6:	08db      	lsrs	r3, r3, #3
 81066b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81066bc:	68fa      	ldr	r2, [r7, #12]
 81066be:	fb02 f303 	mul.w	r3, r2, r3
 81066c2:	ee07 3a90 	vmov	s15, r3
 81066c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81066ce:	693b      	ldr	r3, [r7, #16]
 81066d0:	2b00      	cmp	r3, #0
 81066d2:	f000 80da 	beq.w	810688a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 81066d6:	697b      	ldr	r3, [r7, #20]
 81066d8:	2b01      	cmp	r3, #1
 81066da:	d05a      	beq.n	8106792 <HAL_RCC_GetSysClockFreq+0x1b2>
 81066dc:	2b01      	cmp	r3, #1
 81066de:	d302      	bcc.n	81066e6 <HAL_RCC_GetSysClockFreq+0x106>
 81066e0:	2b02      	cmp	r3, #2
 81066e2:	d078      	beq.n	81067d6 <HAL_RCC_GetSysClockFreq+0x1f6>
 81066e4:	e099      	b.n	810681a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81066e6:	4b6f      	ldr	r3, [pc, #444]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066e8:	681b      	ldr	r3, [r3, #0]
 81066ea:	f003 0320 	and.w	r3, r3, #32
 81066ee:	2b00      	cmp	r3, #0
 81066f0:	d02d      	beq.n	810674e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81066f2:	4b6c      	ldr	r3, [pc, #432]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81066f4:	681b      	ldr	r3, [r3, #0]
 81066f6:	08db      	lsrs	r3, r3, #3
 81066f8:	f003 0303 	and.w	r3, r3, #3
 81066fc:	4a6a      	ldr	r2, [pc, #424]	; (81068a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 81066fe:	fa22 f303 	lsr.w	r3, r2, r3
 8106702:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	ee07 3a90 	vmov	s15, r3
 810670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810670e:	693b      	ldr	r3, [r7, #16]
 8106710:	ee07 3a90 	vmov	s15, r3
 8106714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810671c:	4b61      	ldr	r3, [pc, #388]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106724:	ee07 3a90 	vmov	s15, r3
 8106728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810672c:	ed97 6a02 	vldr	s12, [r7, #8]
 8106730:	eddf 5a60 	vldr	s11, [pc, #384]	; 81068b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106734:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810673c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106748:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810674c:	e087      	b.n	810685e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810674e:	693b      	ldr	r3, [r7, #16]
 8106750:	ee07 3a90 	vmov	s15, r3
 8106754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106758:	eddf 6a57 	vldr	s13, [pc, #348]	; 81068b8 <HAL_RCC_GetSysClockFreq+0x2d8>
 810675c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106760:	4b50      	ldr	r3, [pc, #320]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106768:	ee07 3a90 	vmov	s15, r3
 810676c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106770:	ed97 6a02 	vldr	s12, [r7, #8]
 8106774:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81068b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810677c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106788:	ee67 7a27 	vmul.f32	s15, s14, s15
 810678c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106790:	e065      	b.n	810685e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106792:	693b      	ldr	r3, [r7, #16]
 8106794:	ee07 3a90 	vmov	s15, r3
 8106798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810679c:	eddf 6a47 	vldr	s13, [pc, #284]	; 81068bc <HAL_RCC_GetSysClockFreq+0x2dc>
 81067a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067a4:	4b3f      	ldr	r3, [pc, #252]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81067a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81067a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067ac:	ee07 3a90 	vmov	s15, r3
 81067b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067b4:	ed97 6a02 	vldr	s12, [r7, #8]
 81067b8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81068b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 81067bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81067d4:	e043      	b.n	810685e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81067d6:	693b      	ldr	r3, [r7, #16]
 81067d8:	ee07 3a90 	vmov	s15, r3
 81067dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067e0:	eddf 6a37 	vldr	s13, [pc, #220]	; 81068c0 <HAL_RCC_GetSysClockFreq+0x2e0>
 81067e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067e8:	4b2e      	ldr	r3, [pc, #184]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81067ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067f0:	ee07 3a90 	vmov	s15, r3
 81067f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067f8:	ed97 6a02 	vldr	s12, [r7, #8]
 81067fc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81068b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810680c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106814:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106818:	e021      	b.n	810685e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810681a:	693b      	ldr	r3, [r7, #16]
 810681c:	ee07 3a90 	vmov	s15, r3
 8106820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106824:	eddf 6a25 	vldr	s13, [pc, #148]	; 81068bc <HAL_RCC_GetSysClockFreq+0x2dc>
 8106828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810682c:	4b1d      	ldr	r3, [pc, #116]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106834:	ee07 3a90 	vmov	s15, r3
 8106838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810683c:	ed97 6a02 	vldr	s12, [r7, #8]
 8106840:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81068b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810684c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106858:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810685c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810685e:	4b11      	ldr	r3, [pc, #68]	; (81068a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106862:	0a5b      	lsrs	r3, r3, #9
 8106864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106868:	3301      	adds	r3, #1
 810686a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810686c:	683b      	ldr	r3, [r7, #0]
 810686e:	ee07 3a90 	vmov	s15, r3
 8106872:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106876:	edd7 6a07 	vldr	s13, [r7, #28]
 810687a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810687e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106882:	ee17 3a90 	vmov	r3, s15
 8106886:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8106888:	e005      	b.n	8106896 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 810688a:	2300      	movs	r3, #0
 810688c:	61bb      	str	r3, [r7, #24]
    break;
 810688e:	e002      	b.n	8106896 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8106890:	4b06      	ldr	r3, [pc, #24]	; (81068ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8106892:	61bb      	str	r3, [r7, #24]
    break;
 8106894:	bf00      	nop
  }

  return sysclockfreq;
 8106896:	69bb      	ldr	r3, [r7, #24]
}
 8106898:	4618      	mov	r0, r3
 810689a:	3724      	adds	r7, #36	; 0x24
 810689c:	46bd      	mov	sp, r7
 810689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068a2:	4770      	bx	lr
 81068a4:	58024400 	.word	0x58024400
 81068a8:	03d09000 	.word	0x03d09000
 81068ac:	003d0900 	.word	0x003d0900
 81068b0:	017d7840 	.word	0x017d7840
 81068b4:	46000000 	.word	0x46000000
 81068b8:	4c742400 	.word	0x4c742400
 81068bc:	4a742400 	.word	0x4a742400
 81068c0:	4bbebc20 	.word	0x4bbebc20

081068c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81068c4:	b580      	push	{r7, lr}
 81068c6:	b082      	sub	sp, #8
 81068c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81068ca:	f7ff fe89 	bl	81065e0 <HAL_RCC_GetSysClockFreq>
 81068ce:	4601      	mov	r1, r0
 81068d0:	4b11      	ldr	r3, [pc, #68]	; (8106918 <HAL_RCC_GetHCLKFreq+0x54>)
 81068d2:	699b      	ldr	r3, [r3, #24]
 81068d4:	0a1b      	lsrs	r3, r3, #8
 81068d6:	f003 030f 	and.w	r3, r3, #15
 81068da:	4a10      	ldr	r2, [pc, #64]	; (810691c <HAL_RCC_GetHCLKFreq+0x58>)
 81068dc:	5cd3      	ldrb	r3, [r2, r3]
 81068de:	f003 031f 	and.w	r3, r3, #31
 81068e2:	fa21 f303 	lsr.w	r3, r1, r3
 81068e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81068e8:	4b0b      	ldr	r3, [pc, #44]	; (8106918 <HAL_RCC_GetHCLKFreq+0x54>)
 81068ea:	699b      	ldr	r3, [r3, #24]
 81068ec:	f003 030f 	and.w	r3, r3, #15
 81068f0:	4a0a      	ldr	r2, [pc, #40]	; (810691c <HAL_RCC_GetHCLKFreq+0x58>)
 81068f2:	5cd3      	ldrb	r3, [r2, r3]
 81068f4:	f003 031f 	and.w	r3, r3, #31
 81068f8:	687a      	ldr	r2, [r7, #4]
 81068fa:	fa22 f303 	lsr.w	r3, r2, r3
 81068fe:	4a08      	ldr	r2, [pc, #32]	; (8106920 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106900:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106902:	4b07      	ldr	r3, [pc, #28]	; (8106920 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106904:	681b      	ldr	r3, [r3, #0]
 8106906:	4a07      	ldr	r2, [pc, #28]	; (8106924 <HAL_RCC_GetHCLKFreq+0x60>)
 8106908:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810690a:	4b05      	ldr	r3, [pc, #20]	; (8106920 <HAL_RCC_GetHCLKFreq+0x5c>)
 810690c:	681b      	ldr	r3, [r3, #0]
}
 810690e:	4618      	mov	r0, r3
 8106910:	3708      	adds	r7, #8
 8106912:	46bd      	mov	sp, r7
 8106914:	bd80      	pop	{r7, pc}
 8106916:	bf00      	nop
 8106918:	58024400 	.word	0x58024400
 810691c:	08111944 	.word	0x08111944
 8106920:	10000004 	.word	0x10000004
 8106924:	10000000 	.word	0x10000000

08106928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106928:	b580      	push	{r7, lr}
 810692a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810692c:	f7ff ffca 	bl	81068c4 <HAL_RCC_GetHCLKFreq>
 8106930:	4601      	mov	r1, r0
 8106932:	4b06      	ldr	r3, [pc, #24]	; (810694c <HAL_RCC_GetPCLK1Freq+0x24>)
 8106934:	69db      	ldr	r3, [r3, #28]
 8106936:	091b      	lsrs	r3, r3, #4
 8106938:	f003 0307 	and.w	r3, r3, #7
 810693c:	4a04      	ldr	r2, [pc, #16]	; (8106950 <HAL_RCC_GetPCLK1Freq+0x28>)
 810693e:	5cd3      	ldrb	r3, [r2, r3]
 8106940:	f003 031f 	and.w	r3, r3, #31
 8106944:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106948:	4618      	mov	r0, r3
 810694a:	bd80      	pop	{r7, pc}
 810694c:	58024400 	.word	0x58024400
 8106950:	08111944 	.word	0x08111944

08106954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106954:	b580      	push	{r7, lr}
 8106956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106958:	f7ff ffb4 	bl	81068c4 <HAL_RCC_GetHCLKFreq>
 810695c:	4601      	mov	r1, r0
 810695e:	4b06      	ldr	r3, [pc, #24]	; (8106978 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106960:	69db      	ldr	r3, [r3, #28]
 8106962:	0a1b      	lsrs	r3, r3, #8
 8106964:	f003 0307 	and.w	r3, r3, #7
 8106968:	4a04      	ldr	r2, [pc, #16]	; (810697c <HAL_RCC_GetPCLK2Freq+0x28>)
 810696a:	5cd3      	ldrb	r3, [r2, r3]
 810696c:	f003 031f 	and.w	r3, r3, #31
 8106970:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106974:	4618      	mov	r0, r3
 8106976:	bd80      	pop	{r7, pc}
 8106978:	58024400 	.word	0x58024400
 810697c:	08111944 	.word	0x08111944

08106980 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106980:	b480      	push	{r7}
 8106982:	b083      	sub	sp, #12
 8106984:	af00      	add	r7, sp, #0
 8106986:	6078      	str	r0, [r7, #4]
 8106988:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	223f      	movs	r2, #63	; 0x3f
 810698e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106990:	4b1a      	ldr	r3, [pc, #104]	; (81069fc <HAL_RCC_GetClockConfig+0x7c>)
 8106992:	691b      	ldr	r3, [r3, #16]
 8106994:	f003 0207 	and.w	r2, r3, #7
 8106998:	687b      	ldr	r3, [r7, #4]
 810699a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810699c:	4b17      	ldr	r3, [pc, #92]	; (81069fc <HAL_RCC_GetClockConfig+0x7c>)
 810699e:	699b      	ldr	r3, [r3, #24]
 81069a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81069a8:	4b14      	ldr	r3, [pc, #80]	; (81069fc <HAL_RCC_GetClockConfig+0x7c>)
 81069aa:	699b      	ldr	r3, [r3, #24]
 81069ac:	f003 020f 	and.w	r2, r3, #15
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81069b4:	4b11      	ldr	r3, [pc, #68]	; (81069fc <HAL_RCC_GetClockConfig+0x7c>)
 81069b6:	699b      	ldr	r3, [r3, #24]
 81069b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81069c0:	4b0e      	ldr	r3, [pc, #56]	; (81069fc <HAL_RCC_GetClockConfig+0x7c>)
 81069c2:	69db      	ldr	r3, [r3, #28]
 81069c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81069cc:	4b0b      	ldr	r3, [pc, #44]	; (81069fc <HAL_RCC_GetClockConfig+0x7c>)
 81069ce:	69db      	ldr	r3, [r3, #28]
 81069d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81069d4:	687b      	ldr	r3, [r7, #4]
 81069d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81069d8:	4b08      	ldr	r3, [pc, #32]	; (81069fc <HAL_RCC_GetClockConfig+0x7c>)
 81069da:	6a1b      	ldr	r3, [r3, #32]
 81069dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81069e4:	4b06      	ldr	r3, [pc, #24]	; (8106a00 <HAL_RCC_GetClockConfig+0x80>)
 81069e6:	681b      	ldr	r3, [r3, #0]
 81069e8:	f003 020f 	and.w	r2, r3, #15
 81069ec:	683b      	ldr	r3, [r7, #0]
 81069ee:	601a      	str	r2, [r3, #0]
}
 81069f0:	bf00      	nop
 81069f2:	370c      	adds	r7, #12
 81069f4:	46bd      	mov	sp, r7
 81069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069fa:	4770      	bx	lr
 81069fc:	58024400 	.word	0x58024400
 8106a00:	52002000 	.word	0x52002000

08106a04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106a04:	b580      	push	{r7, lr}
 8106a06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106a08:	f7ff ff5c 	bl	81068c4 <HAL_RCC_GetHCLKFreq>
 8106a0c:	4601      	mov	r1, r0
 8106a0e:	4b06      	ldr	r3, [pc, #24]	; (8106a28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106a10:	6a1b      	ldr	r3, [r3, #32]
 8106a12:	091b      	lsrs	r3, r3, #4
 8106a14:	f003 0307 	and.w	r3, r3, #7
 8106a18:	4a04      	ldr	r2, [pc, #16]	; (8106a2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106a1a:	5cd3      	ldrb	r3, [r2, r3]
 8106a1c:	f003 031f 	and.w	r3, r3, #31
 8106a20:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106a24:	4618      	mov	r0, r3
 8106a26:	bd80      	pop	{r7, pc}
 8106a28:	58024400 	.word	0x58024400
 8106a2c:	08111944 	.word	0x08111944

08106a30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106a30:	b480      	push	{r7}
 8106a32:	b089      	sub	sp, #36	; 0x24
 8106a34:	af00      	add	r7, sp, #0
 8106a36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106a38:	4b9d      	ldr	r3, [pc, #628]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a3c:	f003 0303 	and.w	r3, r3, #3
 8106a40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106a42:	4b9b      	ldr	r3, [pc, #620]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a46:	0b1b      	lsrs	r3, r3, #12
 8106a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106a4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106a4e:	4b98      	ldr	r3, [pc, #608]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a52:	091b      	lsrs	r3, r3, #4
 8106a54:	f003 0301 	and.w	r3, r3, #1
 8106a58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106a5a:	4b95      	ldr	r3, [pc, #596]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106a5e:	08db      	lsrs	r3, r3, #3
 8106a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106a64:	693a      	ldr	r2, [r7, #16]
 8106a66:	fb02 f303 	mul.w	r3, r2, r3
 8106a6a:	ee07 3a90 	vmov	s15, r3
 8106a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106a76:	697b      	ldr	r3, [r7, #20]
 8106a78:	2b00      	cmp	r3, #0
 8106a7a:	f000 810a 	beq.w	8106c92 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8106a7e:	69bb      	ldr	r3, [r7, #24]
 8106a80:	2b01      	cmp	r3, #1
 8106a82:	d05a      	beq.n	8106b3a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8106a84:	2b01      	cmp	r3, #1
 8106a86:	d302      	bcc.n	8106a8e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8106a88:	2b02      	cmp	r3, #2
 8106a8a:	d078      	beq.n	8106b7e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8106a8c:	e099      	b.n	8106bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106a8e:	4b88      	ldr	r3, [pc, #544]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106a90:	681b      	ldr	r3, [r3, #0]
 8106a92:	f003 0320 	and.w	r3, r3, #32
 8106a96:	2b00      	cmp	r3, #0
 8106a98:	d02d      	beq.n	8106af6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106a9a:	4b85      	ldr	r3, [pc, #532]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106a9c:	681b      	ldr	r3, [r3, #0]
 8106a9e:	08db      	lsrs	r3, r3, #3
 8106aa0:	f003 0303 	and.w	r3, r3, #3
 8106aa4:	4a83      	ldr	r2, [pc, #524]	; (8106cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8106aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8106aaa:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106aac:	68bb      	ldr	r3, [r7, #8]
 8106aae:	ee07 3a90 	vmov	s15, r3
 8106ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ab6:	697b      	ldr	r3, [r7, #20]
 8106ab8:	ee07 3a90 	vmov	s15, r3
 8106abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ac4:	4b7a      	ldr	r3, [pc, #488]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106acc:	ee07 3a90 	vmov	s15, r3
 8106ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ad4:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ad8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106af0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106af4:	e087      	b.n	8106c06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106af6:	697b      	ldr	r3, [r7, #20]
 8106af8:	ee07 3a90 	vmov	s15, r3
 8106afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b00:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106cbc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8106b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b08:	4b69      	ldr	r3, [pc, #420]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b10:	ee07 3a90 	vmov	s15, r3
 8106b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b18:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b1c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b38:	e065      	b.n	8106c06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106b3a:	697b      	ldr	r3, [r7, #20]
 8106b3c:	ee07 3a90 	vmov	s15, r3
 8106b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b4c:	4b58      	ldr	r3, [pc, #352]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b54:	ee07 3a90 	vmov	s15, r3
 8106b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b60:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b7c:	e043      	b.n	8106c06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106b7e:	697b      	ldr	r3, [r7, #20]
 8106b80:	ee07 3a90 	vmov	s15, r3
 8106b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b88:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8106b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b90:	4b47      	ldr	r3, [pc, #284]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b98:	ee07 3a90 	vmov	s15, r3
 8106b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ba4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106bc0:	e021      	b.n	8106c06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106bc2:	697b      	ldr	r3, [r7, #20]
 8106bc4:	ee07 3a90 	vmov	s15, r3
 8106bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bcc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106bd4:	4b36      	ldr	r3, [pc, #216]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bdc:	ee07 3a90 	vmov	s15, r3
 8106be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8106be8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106c04:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106c06:	4b2a      	ldr	r3, [pc, #168]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c0a:	0a5b      	lsrs	r3, r3, #9
 8106c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c10:	ee07 3a90 	vmov	s15, r3
 8106c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c2c:	ee17 2a90 	vmov	r2, s15
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106c34:	4b1e      	ldr	r3, [pc, #120]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c38:	0c1b      	lsrs	r3, r3, #16
 8106c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c3e:	ee07 3a90 	vmov	s15, r3
 8106c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c5a:	ee17 2a90 	vmov	r2, s15
 8106c5e:	687b      	ldr	r3, [r7, #4]
 8106c60:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106c62:	4b13      	ldr	r3, [pc, #76]	; (8106cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c66:	0e1b      	lsrs	r3, r3, #24
 8106c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c6c:	ee07 3a90 	vmov	s15, r3
 8106c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c88:	ee17 2a90 	vmov	r2, s15
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106c90:	e008      	b.n	8106ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	2200      	movs	r2, #0
 8106c96:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	2200      	movs	r2, #0
 8106c9c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106c9e:	687b      	ldr	r3, [r7, #4]
 8106ca0:	2200      	movs	r2, #0
 8106ca2:	609a      	str	r2, [r3, #8]
}
 8106ca4:	bf00      	nop
 8106ca6:	3724      	adds	r7, #36	; 0x24
 8106ca8:	46bd      	mov	sp, r7
 8106caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cae:	4770      	bx	lr
 8106cb0:	58024400 	.word	0x58024400
 8106cb4:	03d09000 	.word	0x03d09000
 8106cb8:	46000000 	.word	0x46000000
 8106cbc:	4c742400 	.word	0x4c742400
 8106cc0:	4a742400 	.word	0x4a742400
 8106cc4:	4bbebc20 	.word	0x4bbebc20

08106cc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8106cc8:	b480      	push	{r7}
 8106cca:	b089      	sub	sp, #36	; 0x24
 8106ccc:	af00      	add	r7, sp, #0
 8106cce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106cd0:	4b9d      	ldr	r3, [pc, #628]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106cd4:	f003 0303 	and.w	r3, r3, #3
 8106cd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8106cda:	4b9b      	ldr	r3, [pc, #620]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106cde:	0d1b      	lsrs	r3, r3, #20
 8106ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106ce4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106ce6:	4b98      	ldr	r3, [pc, #608]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cea:	0a1b      	lsrs	r3, r3, #8
 8106cec:	f003 0301 	and.w	r3, r3, #1
 8106cf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8106cf2:	4b95      	ldr	r3, [pc, #596]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106cf6:	08db      	lsrs	r3, r3, #3
 8106cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106cfc:	693a      	ldr	r2, [r7, #16]
 8106cfe:	fb02 f303 	mul.w	r3, r2, r3
 8106d02:	ee07 3a90 	vmov	s15, r3
 8106d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106d0e:	697b      	ldr	r3, [r7, #20]
 8106d10:	2b00      	cmp	r3, #0
 8106d12:	f000 810a 	beq.w	8106f2a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8106d16:	69bb      	ldr	r3, [r7, #24]
 8106d18:	2b01      	cmp	r3, #1
 8106d1a:	d05a      	beq.n	8106dd2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8106d1c:	2b01      	cmp	r3, #1
 8106d1e:	d302      	bcc.n	8106d26 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8106d20:	2b02      	cmp	r3, #2
 8106d22:	d078      	beq.n	8106e16 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8106d24:	e099      	b.n	8106e5a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106d26:	4b88      	ldr	r3, [pc, #544]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	f003 0320 	and.w	r3, r3, #32
 8106d2e:	2b00      	cmp	r3, #0
 8106d30:	d02d      	beq.n	8106d8e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106d32:	4b85      	ldr	r3, [pc, #532]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d34:	681b      	ldr	r3, [r3, #0]
 8106d36:	08db      	lsrs	r3, r3, #3
 8106d38:	f003 0303 	and.w	r3, r3, #3
 8106d3c:	4a83      	ldr	r2, [pc, #524]	; (8106f4c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8106d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8106d42:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106d44:	68bb      	ldr	r3, [r7, #8]
 8106d46:	ee07 3a90 	vmov	s15, r3
 8106d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d4e:	697b      	ldr	r3, [r7, #20]
 8106d50:	ee07 3a90 	vmov	s15, r3
 8106d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d5c:	4b7a      	ldr	r3, [pc, #488]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d64:	ee07 3a90 	vmov	s15, r3
 8106d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106d70:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106d74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d88:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106d8c:	e087      	b.n	8106e9e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106d8e:	697b      	ldr	r3, [r7, #20]
 8106d90:	ee07 3a90 	vmov	s15, r3
 8106d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106f54 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8106d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106da0:	4b69      	ldr	r3, [pc, #420]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106da8:	ee07 3a90 	vmov	s15, r3
 8106dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106db0:	ed97 6a03 	vldr	s12, [r7, #12]
 8106db4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106dcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106dd0:	e065      	b.n	8106e9e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106dd2:	697b      	ldr	r3, [r7, #20]
 8106dd4:	ee07 3a90 	vmov	s15, r3
 8106dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ddc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8106de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106de4:	4b58      	ldr	r3, [pc, #352]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106dec:	ee07 3a90 	vmov	s15, r3
 8106df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106df4:	ed97 6a03 	vldr	s12, [r7, #12]
 8106df8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106e14:	e043      	b.n	8106e9e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106e16:	697b      	ldr	r3, [r7, #20]
 8106e18:	ee07 3a90 	vmov	s15, r3
 8106e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106f5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8106e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e28:	4b47      	ldr	r3, [pc, #284]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e30:	ee07 3a90 	vmov	s15, r3
 8106e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106e58:	e021      	b.n	8106e9e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106e5a:	697b      	ldr	r3, [r7, #20]
 8106e5c:	ee07 3a90 	vmov	s15, r3
 8106e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e64:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8106e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e6c:	4b36      	ldr	r3, [pc, #216]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e74:	ee07 3a90 	vmov	s15, r3
 8106e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e80:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106f50 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106e9c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106e9e:	4b2a      	ldr	r3, [pc, #168]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ea2:	0a5b      	lsrs	r3, r3, #9
 8106ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106ea8:	ee07 3a90 	vmov	s15, r3
 8106eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8106ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ec4:	ee17 2a90 	vmov	r2, s15
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106ecc:	4b1e      	ldr	r3, [pc, #120]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ed0:	0c1b      	lsrs	r3, r3, #16
 8106ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106ed6:	ee07 3a90 	vmov	s15, r3
 8106eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8106eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ef2:	ee17 2a90 	vmov	r2, s15
 8106ef6:	687b      	ldr	r3, [r7, #4]
 8106ef8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106efa:	4b13      	ldr	r3, [pc, #76]	; (8106f48 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106efe:	0e1b      	lsrs	r3, r3, #24
 8106f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106f04:	ee07 3a90 	vmov	s15, r3
 8106f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106f10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f20:	ee17 2a90 	vmov	r2, s15
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106f28:	e008      	b.n	8106f3c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106f2a:	687b      	ldr	r3, [r7, #4]
 8106f2c:	2200      	movs	r2, #0
 8106f2e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	2200      	movs	r2, #0
 8106f34:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	2200      	movs	r2, #0
 8106f3a:	609a      	str	r2, [r3, #8]
}
 8106f3c:	bf00      	nop
 8106f3e:	3724      	adds	r7, #36	; 0x24
 8106f40:	46bd      	mov	sp, r7
 8106f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f46:	4770      	bx	lr
 8106f48:	58024400 	.word	0x58024400
 8106f4c:	03d09000 	.word	0x03d09000
 8106f50:	46000000 	.word	0x46000000
 8106f54:	4c742400 	.word	0x4c742400
 8106f58:	4a742400 	.word	0x4a742400
 8106f5c:	4bbebc20 	.word	0x4bbebc20

08106f60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106f60:	b580      	push	{r7, lr}
 8106f62:	b084      	sub	sp, #16
 8106f64:	af00      	add	r7, sp, #0
 8106f66:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8106f68:	2300      	movs	r3, #0
 8106f6a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	2b00      	cmp	r3, #0
 8106f70:	d101      	bne.n	8106f76 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8106f72:	2301      	movs	r3, #1
 8106f74:	e0e2      	b.n	810713c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8106f76:	687b      	ldr	r3, [r7, #4]
 8106f78:	2200      	movs	r2, #0
 8106f7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	681b      	ldr	r3, [r3, #0]
 8106f80:	4a70      	ldr	r2, [pc, #448]	; (8107144 <HAL_SPI_Init+0x1e4>)
 8106f82:	4293      	cmp	r3, r2
 8106f84:	d00f      	beq.n	8106fa6 <HAL_SPI_Init+0x46>
 8106f86:	687b      	ldr	r3, [r7, #4]
 8106f88:	681b      	ldr	r3, [r3, #0]
 8106f8a:	4a6f      	ldr	r2, [pc, #444]	; (8107148 <HAL_SPI_Init+0x1e8>)
 8106f8c:	4293      	cmp	r3, r2
 8106f8e:	d00a      	beq.n	8106fa6 <HAL_SPI_Init+0x46>
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	681b      	ldr	r3, [r3, #0]
 8106f94:	4a6d      	ldr	r2, [pc, #436]	; (810714c <HAL_SPI_Init+0x1ec>)
 8106f96:	4293      	cmp	r3, r2
 8106f98:	d005      	beq.n	8106fa6 <HAL_SPI_Init+0x46>
 8106f9a:	687b      	ldr	r3, [r7, #4]
 8106f9c:	68db      	ldr	r3, [r3, #12]
 8106f9e:	2b0f      	cmp	r3, #15
 8106fa0:	d901      	bls.n	8106fa6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8106fa2:	2301      	movs	r3, #1
 8106fa4:	e0ca      	b.n	810713c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8106fa6:	6878      	ldr	r0, [r7, #4]
 8106fa8:	f000 fb96 	bl	81076d8 <SPI_GetPacketSize>
 8106fac:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106fae:	687b      	ldr	r3, [r7, #4]
 8106fb0:	681b      	ldr	r3, [r3, #0]
 8106fb2:	4a64      	ldr	r2, [pc, #400]	; (8107144 <HAL_SPI_Init+0x1e4>)
 8106fb4:	4293      	cmp	r3, r2
 8106fb6:	d00c      	beq.n	8106fd2 <HAL_SPI_Init+0x72>
 8106fb8:	687b      	ldr	r3, [r7, #4]
 8106fba:	681b      	ldr	r3, [r3, #0]
 8106fbc:	4a62      	ldr	r2, [pc, #392]	; (8107148 <HAL_SPI_Init+0x1e8>)
 8106fbe:	4293      	cmp	r3, r2
 8106fc0:	d007      	beq.n	8106fd2 <HAL_SPI_Init+0x72>
 8106fc2:	687b      	ldr	r3, [r7, #4]
 8106fc4:	681b      	ldr	r3, [r3, #0]
 8106fc6:	4a61      	ldr	r2, [pc, #388]	; (810714c <HAL_SPI_Init+0x1ec>)
 8106fc8:	4293      	cmp	r3, r2
 8106fca:	d002      	beq.n	8106fd2 <HAL_SPI_Init+0x72>
 8106fcc:	68bb      	ldr	r3, [r7, #8]
 8106fce:	2b08      	cmp	r3, #8
 8106fd0:	d811      	bhi.n	8106ff6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106fd6:	4a5b      	ldr	r2, [pc, #364]	; (8107144 <HAL_SPI_Init+0x1e4>)
 8106fd8:	4293      	cmp	r3, r2
 8106fda:	d009      	beq.n	8106ff0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	681b      	ldr	r3, [r3, #0]
 8106fe0:	4a59      	ldr	r2, [pc, #356]	; (8107148 <HAL_SPI_Init+0x1e8>)
 8106fe2:	4293      	cmp	r3, r2
 8106fe4:	d004      	beq.n	8106ff0 <HAL_SPI_Init+0x90>
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	681b      	ldr	r3, [r3, #0]
 8106fea:	4a58      	ldr	r2, [pc, #352]	; (810714c <HAL_SPI_Init+0x1ec>)
 8106fec:	4293      	cmp	r3, r2
 8106fee:	d104      	bne.n	8106ffa <HAL_SPI_Init+0x9a>
 8106ff0:	68bb      	ldr	r3, [r7, #8]
 8106ff2:	2b10      	cmp	r3, #16
 8106ff4:	d901      	bls.n	8106ffa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8106ff6:	2301      	movs	r3, #1
 8106ff8:	e0a0      	b.n	810713c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8106ffa:	687b      	ldr	r3, [r7, #4]
 8106ffc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107000:	b2db      	uxtb	r3, r3
 8107002:	2b00      	cmp	r3, #0
 8107004:	d106      	bne.n	8107014 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8107006:	687b      	ldr	r3, [r7, #4]
 8107008:	2200      	movs	r2, #0
 810700a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810700e:	6878      	ldr	r0, [r7, #4]
 8107010:	f7fa fc10 	bl	8101834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	2202      	movs	r2, #2
 8107018:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810701c:	687b      	ldr	r3, [r7, #4]
 810701e:	681b      	ldr	r3, [r3, #0]
 8107020:	681a      	ldr	r2, [r3, #0]
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	681b      	ldr	r3, [r3, #0]
 8107026:	f022 0201 	bic.w	r2, r2, #1
 810702a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	699b      	ldr	r3, [r3, #24]
 8107030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107034:	d110      	bne.n	8107058 <HAL_SPI_Init+0xf8>
 8107036:	687b      	ldr	r3, [r7, #4]
 8107038:	685b      	ldr	r3, [r3, #4]
 810703a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810703e:	d10b      	bne.n	8107058 <HAL_SPI_Init+0xf8>
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107044:	2b00      	cmp	r3, #0
 8107046:	d107      	bne.n	8107058 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	681a      	ldr	r2, [r3, #0]
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	681b      	ldr	r3, [r3, #0]
 8107052:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8107056:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	69da      	ldr	r2, [r3, #28]
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107060:	431a      	orrs	r2, r3
 8107062:	68fb      	ldr	r3, [r7, #12]
 8107064:	431a      	orrs	r2, r3
 8107066:	687b      	ldr	r3, [r7, #4]
 8107068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810706a:	ea42 0103 	orr.w	r1, r2, r3
 810706e:	687b      	ldr	r3, [r7, #4]
 8107070:	68da      	ldr	r2, [r3, #12]
 8107072:	687b      	ldr	r3, [r7, #4]
 8107074:	681b      	ldr	r3, [r3, #0]
 8107076:	430a      	orrs	r2, r1
 8107078:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107082:	431a      	orrs	r2, r3
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107088:	431a      	orrs	r2, r3
 810708a:	687b      	ldr	r3, [r7, #4]
 810708c:	699b      	ldr	r3, [r3, #24]
 810708e:	431a      	orrs	r2, r3
 8107090:	687b      	ldr	r3, [r7, #4]
 8107092:	691b      	ldr	r3, [r3, #16]
 8107094:	431a      	orrs	r2, r3
 8107096:	687b      	ldr	r3, [r7, #4]
 8107098:	695b      	ldr	r3, [r3, #20]
 810709a:	431a      	orrs	r2, r3
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	6a1b      	ldr	r3, [r3, #32]
 81070a0:	431a      	orrs	r2, r3
 81070a2:	687b      	ldr	r3, [r7, #4]
 81070a4:	685b      	ldr	r3, [r3, #4]
 81070a6:	431a      	orrs	r2, r3
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81070ac:	431a      	orrs	r2, r3
 81070ae:	687b      	ldr	r3, [r7, #4]
 81070b0:	689b      	ldr	r3, [r3, #8]
 81070b2:	431a      	orrs	r2, r3
 81070b4:	687b      	ldr	r3, [r7, #4]
 81070b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81070b8:	ea42 0103 	orr.w	r1, r2, r3
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	681b      	ldr	r3, [r3, #0]
 81070c4:	430a      	orrs	r2, r1
 81070c6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	685b      	ldr	r3, [r3, #4]
 81070cc:	2b00      	cmp	r3, #0
 81070ce:	d113      	bne.n	81070f8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	681b      	ldr	r3, [r3, #0]
 81070d4:	689b      	ldr	r3, [r3, #8]
 81070d6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	681b      	ldr	r3, [r3, #0]
 81070de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81070e2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81070e4:	687b      	ldr	r3, [r7, #4]
 81070e6:	681b      	ldr	r3, [r3, #0]
 81070e8:	689b      	ldr	r3, [r3, #8]
 81070ea:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	681b      	ldr	r3, [r3, #0]
 81070f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81070f6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	681b      	ldr	r3, [r3, #0]
 81070fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81070fe:	687b      	ldr	r3, [r7, #4]
 8107100:	681b      	ldr	r3, [r3, #0]
 8107102:	f022 0201 	bic.w	r2, r2, #1
 8107106:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8107108:	687b      	ldr	r3, [r7, #4]
 810710a:	685b      	ldr	r3, [r3, #4]
 810710c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8107110:	2b00      	cmp	r3, #0
 8107112:	d00a      	beq.n	810712a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107114:	687b      	ldr	r3, [r7, #4]
 8107116:	681b      	ldr	r3, [r3, #0]
 8107118:	68db      	ldr	r3, [r3, #12]
 810711a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	681b      	ldr	r3, [r3, #0]
 8107126:	430a      	orrs	r2, r1
 8107128:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	2200      	movs	r2, #0
 810712e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	2201      	movs	r2, #1
 8107136:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810713a:	2300      	movs	r3, #0
}
 810713c:	4618      	mov	r0, r3
 810713e:	3710      	adds	r7, #16
 8107140:	46bd      	mov	sp, r7
 8107142:	bd80      	pop	{r7, pc}
 8107144:	40013000 	.word	0x40013000
 8107148:	40003800 	.word	0x40003800
 810714c:	40003c00 	.word	0x40003c00

08107150 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8107150:	b580      	push	{r7, lr}
 8107152:	b08a      	sub	sp, #40	; 0x28
 8107154:	af00      	add	r7, sp, #0
 8107156:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8107158:	687b      	ldr	r3, [r7, #4]
 810715a:	681b      	ldr	r3, [r3, #0]
 810715c:	691b      	ldr	r3, [r3, #16]
 810715e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	681b      	ldr	r3, [r3, #0]
 8107164:	695b      	ldr	r3, [r3, #20]
 8107166:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8107168:	6a3a      	ldr	r2, [r7, #32]
 810716a:	69fb      	ldr	r3, [r7, #28]
 810716c:	4013      	ands	r3, r2
 810716e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	681b      	ldr	r3, [r3, #0]
 8107174:	689b      	ldr	r3, [r3, #8]
 8107176:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8107178:	2300      	movs	r3, #0
 810717a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107182:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8107184:	687b      	ldr	r3, [r7, #4]
 8107186:	681b      	ldr	r3, [r3, #0]
 8107188:	3330      	adds	r3, #48	; 0x30
 810718a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810718c:	69bb      	ldr	r3, [r7, #24]
 810718e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107192:	2b00      	cmp	r3, #0
 8107194:	d113      	bne.n	81071be <HAL_SPI_IRQHandler+0x6e>
 8107196:	69bb      	ldr	r3, [r7, #24]
 8107198:	f003 0320 	and.w	r3, r3, #32
 810719c:	2b00      	cmp	r3, #0
 810719e:	d10e      	bne.n	81071be <HAL_SPI_IRQHandler+0x6e>
 81071a0:	69bb      	ldr	r3, [r7, #24]
 81071a2:	f003 0304 	and.w	r3, r3, #4
 81071a6:	2b00      	cmp	r3, #0
 81071a8:	d009      	beq.n	81071be <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 81071aa:	687b      	ldr	r3, [r7, #4]
 81071ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81071ae:	6878      	ldr	r0, [r7, #4]
 81071b0:	4798      	blx	r3
    hspi->RxISR(hspi);
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81071b6:	6878      	ldr	r0, [r7, #4]
 81071b8:	4798      	blx	r3
    handled = 1UL;
 81071ba:	2301      	movs	r3, #1
 81071bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81071be:	69bb      	ldr	r3, [r7, #24]
 81071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81071c4:	2b00      	cmp	r3, #0
 81071c6:	d10f      	bne.n	81071e8 <HAL_SPI_IRQHandler+0x98>
 81071c8:	69bb      	ldr	r3, [r7, #24]
 81071ca:	f003 0301 	and.w	r3, r3, #1
 81071ce:	2b00      	cmp	r3, #0
 81071d0:	d00a      	beq.n	81071e8 <HAL_SPI_IRQHandler+0x98>
 81071d2:	69bb      	ldr	r3, [r7, #24]
 81071d4:	f003 0304 	and.w	r3, r3, #4
 81071d8:	2b00      	cmp	r3, #0
 81071da:	d105      	bne.n	81071e8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81071e0:	6878      	ldr	r0, [r7, #4]
 81071e2:	4798      	blx	r3
    handled = 1UL;
 81071e4:	2301      	movs	r3, #1
 81071e6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81071e8:	69bb      	ldr	r3, [r7, #24]
 81071ea:	f003 0320 	and.w	r3, r3, #32
 81071ee:	2b00      	cmp	r3, #0
 81071f0:	d10f      	bne.n	8107212 <HAL_SPI_IRQHandler+0xc2>
 81071f2:	69bb      	ldr	r3, [r7, #24]
 81071f4:	f003 0302 	and.w	r3, r3, #2
 81071f8:	2b00      	cmp	r3, #0
 81071fa:	d00a      	beq.n	8107212 <HAL_SPI_IRQHandler+0xc2>
 81071fc:	69bb      	ldr	r3, [r7, #24]
 81071fe:	f003 0304 	and.w	r3, r3, #4
 8107202:	2b00      	cmp	r3, #0
 8107204:	d105      	bne.n	8107212 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810720a:	6878      	ldr	r0, [r7, #4]
 810720c:	4798      	blx	r3
    handled = 1UL;
 810720e:	2301      	movs	r3, #1
 8107210:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8107212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107214:	2b00      	cmp	r3, #0
 8107216:	f040 8172 	bne.w	81074fe <HAL_SPI_IRQHandler+0x3ae>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810721a:	69bb      	ldr	r3, [r7, #24]
 810721c:	f003 0308 	and.w	r3, r3, #8
 8107220:	2b00      	cmp	r3, #0
 8107222:	f000 80a0 	beq.w	8107366 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	681b      	ldr	r3, [r3, #0]
 810722a:	699a      	ldr	r2, [r3, #24]
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	681b      	ldr	r3, [r3, #0]
 8107230:	f042 0208 	orr.w	r2, r2, #8
 8107234:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	681b      	ldr	r3, [r3, #0]
 810723a:	699a      	ldr	r2, [r3, #24]
 810723c:	687b      	ldr	r3, [r7, #4]
 810723e:	681b      	ldr	r3, [r3, #0]
 8107240:	f042 0210 	orr.w	r2, r2, #16
 8107244:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8107246:	687b      	ldr	r3, [r7, #4]
 8107248:	681b      	ldr	r3, [r3, #0]
 810724a:	699a      	ldr	r2, [r3, #24]
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	681b      	ldr	r3, [r3, #0]
 8107250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107254:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8107256:	687b      	ldr	r3, [r7, #4]
 8107258:	681b      	ldr	r3, [r3, #0]
 810725a:	691a      	ldr	r2, [r3, #16]
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	681b      	ldr	r3, [r3, #0]
 8107260:	f022 0208 	bic.w	r2, r2, #8
 8107264:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8107266:	697b      	ldr	r3, [r7, #20]
 8107268:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810726c:	2b00      	cmp	r3, #0
 810726e:	d00f      	beq.n	8107290 <HAL_SPI_IRQHandler+0x140>
 8107270:	7cfb      	ldrb	r3, [r7, #19]
 8107272:	2b04      	cmp	r3, #4
 8107274:	d004      	beq.n	8107280 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8107276:	687b      	ldr	r3, [r7, #4]
 8107278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810727a:	69db      	ldr	r3, [r3, #28]
 810727c:	2b00      	cmp	r3, #0
 810727e:	d007      	beq.n	8107290 <HAL_SPI_IRQHandler+0x140>
 8107280:	7cfb      	ldrb	r3, [r7, #19]
 8107282:	2b03      	cmp	r3, #3
 8107284:	d059      	beq.n	810733a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8107286:	687b      	ldr	r3, [r7, #4]
 8107288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810728a:	69db      	ldr	r3, [r3, #28]
 810728c:	2b00      	cmp	r3, #0
 810728e:	d154      	bne.n	810733a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8107290:	687b      	ldr	r3, [r7, #4]
 8107292:	681b      	ldr	r3, [r3, #0]
 8107294:	689b      	ldr	r3, [r3, #8]
 8107296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810729a:	2b00      	cmp	r3, #0
 810729c:	d13d      	bne.n	810731a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810729e:	e036      	b.n	810730e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81072a0:	687b      	ldr	r3, [r7, #4]
 81072a2:	68db      	ldr	r3, [r3, #12]
 81072a4:	2b0f      	cmp	r3, #15
 81072a6:	d90b      	bls.n	81072c0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81072a8:	687b      	ldr	r3, [r7, #4]
 81072aa:	681a      	ldr	r2, [r3, #0]
 81072ac:	687b      	ldr	r3, [r7, #4]
 81072ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81072b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81072b2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81072b8:	1d1a      	adds	r2, r3, #4
 81072ba:	687b      	ldr	r3, [r7, #4]
 81072bc:	665a      	str	r2, [r3, #100]	; 0x64
 81072be:	e01d      	b.n	81072fc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81072c0:	687b      	ldr	r3, [r7, #4]
 81072c2:	68db      	ldr	r3, [r3, #12]
 81072c4:	2b07      	cmp	r3, #7
 81072c6:	d90b      	bls.n	81072e0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81072c8:	687b      	ldr	r3, [r7, #4]
 81072ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81072cc:	68fa      	ldr	r2, [r7, #12]
 81072ce:	8812      	ldrh	r2, [r2, #0]
 81072d0:	b292      	uxth	r2, r2
 81072d2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 81072d4:	687b      	ldr	r3, [r7, #4]
 81072d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81072d8:	1c9a      	adds	r2, r3, #2
 81072da:	687b      	ldr	r3, [r7, #4]
 81072dc:	665a      	str	r2, [r3, #100]	; 0x64
 81072de:	e00d      	b.n	81072fc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	681b      	ldr	r3, [r3, #0]
 81072e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81072ec:	7812      	ldrb	r2, [r2, #0]
 81072ee:	b2d2      	uxtb	r2, r2
 81072f0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 81072f2:	687b      	ldr	r3, [r7, #4]
 81072f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81072f6:	1c5a      	adds	r2, r3, #1
 81072f8:	687b      	ldr	r3, [r7, #4]
 81072fa:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 81072fc:	687b      	ldr	r3, [r7, #4]
 81072fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107302:	b29b      	uxth	r3, r3
 8107304:	3b01      	subs	r3, #1
 8107306:	b29a      	uxth	r2, r3
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107314:	b29b      	uxth	r3, r3
 8107316:	2b00      	cmp	r3, #0
 8107318:	d1c2      	bne.n	81072a0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810731a:	6878      	ldr	r0, [r7, #4]
 810731c:	f000 f93c 	bl	8107598 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	2201      	movs	r2, #1
 8107324:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810732e:	2b00      	cmp	r3, #0
 8107330:	d003      	beq.n	810733a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8107332:	6878      	ldr	r0, [r7, #4]
 8107334:	f000 f90c 	bl	8107550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8107338:	e0e6      	b.n	8107508 <HAL_SPI_IRQHandler+0x3b8>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810733a:	7cfb      	ldrb	r3, [r7, #19]
 810733c:	2b05      	cmp	r3, #5
 810733e:	d103      	bne.n	8107348 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8107340:	6878      	ldr	r0, [r7, #4]
 8107342:	f000 f8fb 	bl	810753c <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8107346:	e0dc      	b.n	8107502 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8107348:	7cfb      	ldrb	r3, [r7, #19]
 810734a:	2b04      	cmp	r3, #4
 810734c:	d103      	bne.n	8107356 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810734e:	6878      	ldr	r0, [r7, #4]
 8107350:	f000 f8ea 	bl	8107528 <HAL_SPI_RxCpltCallback>
    return;
 8107354:	e0d5      	b.n	8107502 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8107356:	7cfb      	ldrb	r3, [r7, #19]
 8107358:	2b03      	cmp	r3, #3
 810735a:	f040 80d2 	bne.w	8107502 <HAL_SPI_IRQHandler+0x3b2>
      HAL_SPI_TxCpltCallback(hspi);
 810735e:	6878      	ldr	r0, [r7, #4]
 8107360:	f000 f8d8 	bl	8107514 <HAL_SPI_TxCpltCallback>
    return;
 8107364:	e0cd      	b.n	8107502 <HAL_SPI_IRQHandler+0x3b2>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8107366:	69fb      	ldr	r3, [r7, #28]
 8107368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810736c:	2b00      	cmp	r3, #0
 810736e:	d00d      	beq.n	810738c <HAL_SPI_IRQHandler+0x23c>
 8107370:	6a3b      	ldr	r3, [r7, #32]
 8107372:	f003 0308 	and.w	r3, r3, #8
 8107376:	2b00      	cmp	r3, #0
 8107378:	d008      	beq.n	810738c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810737a:	687b      	ldr	r3, [r7, #4]
 810737c:	681b      	ldr	r3, [r3, #0]
 810737e:	699a      	ldr	r2, [r3, #24]
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	681b      	ldr	r3, [r3, #0]
 8107384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107388:	619a      	str	r2, [r3, #24]

    return;
 810738a:	e0bd      	b.n	8107508 <HAL_SPI_IRQHandler+0x3b8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810738c:	69bb      	ldr	r3, [r7, #24]
 810738e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8107392:	2b00      	cmp	r3, #0
 8107394:	f000 80b8 	beq.w	8107508 <HAL_SPI_IRQHandler+0x3b8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8107398:	69bb      	ldr	r3, [r7, #24]
 810739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810739e:	2b00      	cmp	r3, #0
 81073a0:	d00f      	beq.n	81073c2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81073a8:	f043 0204 	orr.w	r2, r3, #4
 81073ac:	687b      	ldr	r3, [r7, #4]
 81073ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81073b2:	687b      	ldr	r3, [r7, #4]
 81073b4:	681b      	ldr	r3, [r3, #0]
 81073b6:	699a      	ldr	r2, [r3, #24]
 81073b8:	687b      	ldr	r3, [r7, #4]
 81073ba:	681b      	ldr	r3, [r3, #0]
 81073bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81073c0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 81073c2:	69bb      	ldr	r3, [r7, #24]
 81073c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81073c8:	2b00      	cmp	r3, #0
 81073ca:	d00f      	beq.n	81073ec <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81073cc:	687b      	ldr	r3, [r7, #4]
 81073ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81073d2:	f043 0201 	orr.w	r2, r3, #1
 81073d6:	687b      	ldr	r3, [r7, #4]
 81073d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81073dc:	687b      	ldr	r3, [r7, #4]
 81073de:	681b      	ldr	r3, [r3, #0]
 81073e0:	699a      	ldr	r2, [r3, #24]
 81073e2:	687b      	ldr	r3, [r7, #4]
 81073e4:	681b      	ldr	r3, [r3, #0]
 81073e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81073ea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 81073ec:	69bb      	ldr	r3, [r7, #24]
 81073ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81073f2:	2b00      	cmp	r3, #0
 81073f4:	d00f      	beq.n	8107416 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81073f6:	687b      	ldr	r3, [r7, #4]
 81073f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81073fc:	f043 0208 	orr.w	r2, r3, #8
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	681b      	ldr	r3, [r3, #0]
 810740a:	699a      	ldr	r2, [r3, #24]
 810740c:	687b      	ldr	r3, [r7, #4]
 810740e:	681b      	ldr	r3, [r3, #0]
 8107410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107414:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8107416:	69bb      	ldr	r3, [r7, #24]
 8107418:	f003 0320 	and.w	r3, r3, #32
 810741c:	2b00      	cmp	r3, #0
 810741e:	d00f      	beq.n	8107440 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8107420:	687b      	ldr	r3, [r7, #4]
 8107422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107426:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8107430:	687b      	ldr	r3, [r7, #4]
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	699a      	ldr	r2, [r3, #24]
 8107436:	687b      	ldr	r3, [r7, #4]
 8107438:	681b      	ldr	r3, [r3, #0]
 810743a:	f042 0220 	orr.w	r2, r2, #32
 810743e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107440:	687b      	ldr	r3, [r7, #4]
 8107442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107446:	2b00      	cmp	r3, #0
 8107448:	d05d      	beq.n	8107506 <HAL_SPI_IRQHandler+0x3b6>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	681b      	ldr	r3, [r3, #0]
 810744e:	681a      	ldr	r2, [r3, #0]
 8107450:	687b      	ldr	r3, [r7, #4]
 8107452:	681b      	ldr	r3, [r3, #0]
 8107454:	f022 0201 	bic.w	r2, r2, #1
 8107458:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	681b      	ldr	r3, [r3, #0]
 810745e:	691b      	ldr	r3, [r3, #16]
 8107460:	687a      	ldr	r2, [r7, #4]
 8107462:	6812      	ldr	r2, [r2, #0]
 8107464:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8107468:	f023 0303 	bic.w	r3, r3, #3
 810746c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810746e:	697b      	ldr	r3, [r7, #20]
 8107470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8107474:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8107478:	d138      	bne.n	81074ec <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810747a:	687b      	ldr	r3, [r7, #4]
 810747c:	681b      	ldr	r3, [r3, #0]
 810747e:	689a      	ldr	r2, [r3, #8]
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	681b      	ldr	r3, [r3, #0]
 8107484:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8107488:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810748a:	687b      	ldr	r3, [r7, #4]
 810748c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810748e:	2b00      	cmp	r3, #0
 8107490:	d013      	beq.n	81074ba <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8107492:	687b      	ldr	r3, [r7, #4]
 8107494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107496:	4a1e      	ldr	r2, [pc, #120]	; (8107510 <HAL_SPI_IRQHandler+0x3c0>)
 8107498:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810749e:	4618      	mov	r0, r3
 81074a0:	f7fb fce6 	bl	8102e70 <HAL_DMA_Abort_IT>
 81074a4:	4603      	mov	r3, r0
 81074a6:	2b00      	cmp	r3, #0
 81074a8:	d007      	beq.n	81074ba <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81074b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 81074ba:	687b      	ldr	r3, [r7, #4]
 81074bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81074be:	2b00      	cmp	r3, #0
 81074c0:	d021      	beq.n	8107506 <HAL_SPI_IRQHandler+0x3b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81074c6:	4a12      	ldr	r2, [pc, #72]	; (8107510 <HAL_SPI_IRQHandler+0x3c0>)
 81074c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 81074ca:	687b      	ldr	r3, [r7, #4]
 81074cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81074ce:	4618      	mov	r0, r3
 81074d0:	f7fb fcce 	bl	8102e70 <HAL_DMA_Abort_IT>
 81074d4:	4603      	mov	r3, r0
 81074d6:	2b00      	cmp	r3, #0
 81074d8:	d015      	beq.n	8107506 <HAL_SPI_IRQHandler+0x3b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81074e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81074e4:	687b      	ldr	r3, [r7, #4]
 81074e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 81074ea:	e00c      	b.n	8107506 <HAL_SPI_IRQHandler+0x3b6>
        hspi->State = HAL_SPI_STATE_READY;
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	2201      	movs	r2, #1
 81074f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 81074f4:	6878      	ldr	r0, [r7, #4]
 81074f6:	f000 f82b 	bl	8107550 <HAL_SPI_ErrorCallback>
    return;
 81074fa:	bf00      	nop
 81074fc:	e003      	b.n	8107506 <HAL_SPI_IRQHandler+0x3b6>
    return;
 81074fe:	bf00      	nop
 8107500:	e002      	b.n	8107508 <HAL_SPI_IRQHandler+0x3b8>
    return;
 8107502:	bf00      	nop
 8107504:	e000      	b.n	8107508 <HAL_SPI_IRQHandler+0x3b8>
    return;
 8107506:	bf00      	nop
  }
}
 8107508:	3728      	adds	r7, #40	; 0x28
 810750a:	46bd      	mov	sp, r7
 810750c:	bd80      	pop	{r7, pc}
 810750e:	bf00      	nop
 8107510:	08107565 	.word	0x08107565

08107514 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8107514:	b480      	push	{r7}
 8107516:	b083      	sub	sp, #12
 8107518:	af00      	add	r7, sp, #0
 810751a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810751c:	bf00      	nop
 810751e:	370c      	adds	r7, #12
 8107520:	46bd      	mov	sp, r7
 8107522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107526:	4770      	bx	lr

08107528 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8107528:	b480      	push	{r7}
 810752a:	b083      	sub	sp, #12
 810752c:	af00      	add	r7, sp, #0
 810752e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8107530:	bf00      	nop
 8107532:	370c      	adds	r7, #12
 8107534:	46bd      	mov	sp, r7
 8107536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810753a:	4770      	bx	lr

0810753c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810753c:	b480      	push	{r7}
 810753e:	b083      	sub	sp, #12
 8107540:	af00      	add	r7, sp, #0
 8107542:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8107544:	bf00      	nop
 8107546:	370c      	adds	r7, #12
 8107548:	46bd      	mov	sp, r7
 810754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810754e:	4770      	bx	lr

08107550 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8107550:	b480      	push	{r7}
 8107552:	b083      	sub	sp, #12
 8107554:	af00      	add	r7, sp, #0
 8107556:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8107558:	bf00      	nop
 810755a:	370c      	adds	r7, #12
 810755c:	46bd      	mov	sp, r7
 810755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107562:	4770      	bx	lr

08107564 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8107564:	b580      	push	{r7, lr}
 8107566:	b084      	sub	sp, #16
 8107568:	af00      	add	r7, sp, #0
 810756a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810756c:	687b      	ldr	r3, [r7, #4]
 810756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107570:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8107572:	68fb      	ldr	r3, [r7, #12]
 8107574:	2200      	movs	r2, #0
 8107576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810757a:	68fb      	ldr	r3, [r7, #12]
 810757c:	2200      	movs	r2, #0
 810757e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8107582:	68fb      	ldr	r3, [r7, #12]
 8107584:	2201      	movs	r2, #1
 8107586:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810758a:	68f8      	ldr	r0, [r7, #12]
 810758c:	f7ff ffe0 	bl	8107550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8107590:	bf00      	nop
 8107592:	3710      	adds	r7, #16
 8107594:	46bd      	mov	sp, r7
 8107596:	bd80      	pop	{r7, pc}

08107598 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8107598:	b480      	push	{r7}
 810759a:	b085      	sub	sp, #20
 810759c:	af00      	add	r7, sp, #0
 810759e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	695b      	ldr	r3, [r3, #20]
 81075a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81075a8:	687b      	ldr	r3, [r7, #4]
 81075aa:	681b      	ldr	r3, [r3, #0]
 81075ac:	699a      	ldr	r2, [r3, #24]
 81075ae:	687b      	ldr	r3, [r7, #4]
 81075b0:	681b      	ldr	r3, [r3, #0]
 81075b2:	f042 0208 	orr.w	r2, r2, #8
 81075b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81075b8:	687b      	ldr	r3, [r7, #4]
 81075ba:	681b      	ldr	r3, [r3, #0]
 81075bc:	699a      	ldr	r2, [r3, #24]
 81075be:	687b      	ldr	r3, [r7, #4]
 81075c0:	681b      	ldr	r3, [r3, #0]
 81075c2:	f042 0210 	orr.w	r2, r2, #16
 81075c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81075c8:	687b      	ldr	r3, [r7, #4]
 81075ca:	681b      	ldr	r3, [r3, #0]
 81075cc:	681a      	ldr	r2, [r3, #0]
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	681b      	ldr	r3, [r3, #0]
 81075d2:	f022 0201 	bic.w	r2, r2, #1
 81075d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	691b      	ldr	r3, [r3, #16]
 81075de:	687a      	ldr	r2, [r7, #4]
 81075e0:	6812      	ldr	r2, [r2, #0]
 81075e2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 81075e6:	f023 0303 	bic.w	r3, r3, #3
 81075ea:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	689a      	ldr	r2, [r3, #8]
 81075f2:	687b      	ldr	r3, [r7, #4]
 81075f4:	681b      	ldr	r3, [r3, #0]
 81075f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81075fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107602:	b2db      	uxtb	r3, r3
 8107604:	2b04      	cmp	r3, #4
 8107606:	d014      	beq.n	8107632 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8107608:	68fb      	ldr	r3, [r7, #12]
 810760a:	f003 0320 	and.w	r3, r3, #32
 810760e:	2b00      	cmp	r3, #0
 8107610:	d00f      	beq.n	8107632 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810761c:	687b      	ldr	r3, [r7, #4]
 810761e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8107622:	687b      	ldr	r3, [r7, #4]
 8107624:	681b      	ldr	r3, [r3, #0]
 8107626:	699a      	ldr	r2, [r3, #24]
 8107628:	687b      	ldr	r3, [r7, #4]
 810762a:	681b      	ldr	r3, [r3, #0]
 810762c:	f042 0220 	orr.w	r2, r2, #32
 8107630:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8107632:	687b      	ldr	r3, [r7, #4]
 8107634:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107638:	b2db      	uxtb	r3, r3
 810763a:	2b03      	cmp	r3, #3
 810763c:	d014      	beq.n	8107668 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810763e:	68fb      	ldr	r3, [r7, #12]
 8107640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107644:	2b00      	cmp	r3, #0
 8107646:	d00f      	beq.n	8107668 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8107648:	687b      	ldr	r3, [r7, #4]
 810764a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810764e:	f043 0204 	orr.w	r2, r3, #4
 8107652:	687b      	ldr	r3, [r7, #4]
 8107654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	699a      	ldr	r2, [r3, #24]
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	681b      	ldr	r3, [r3, #0]
 8107662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107666:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8107668:	68fb      	ldr	r3, [r7, #12]
 810766a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810766e:	2b00      	cmp	r3, #0
 8107670:	d00f      	beq.n	8107692 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107678:	f043 0201 	orr.w	r2, r3, #1
 810767c:	687b      	ldr	r3, [r7, #4]
 810767e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8107682:	687b      	ldr	r3, [r7, #4]
 8107684:	681b      	ldr	r3, [r3, #0]
 8107686:	699a      	ldr	r2, [r3, #24]
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	681b      	ldr	r3, [r3, #0]
 810768c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8107690:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8107692:	68fb      	ldr	r3, [r7, #12]
 8107694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107698:	2b00      	cmp	r3, #0
 810769a:	d00f      	beq.n	81076bc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81076a2:	f043 0208 	orr.w	r2, r3, #8
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	681b      	ldr	r3, [r3, #0]
 81076b0:	699a      	ldr	r2, [r3, #24]
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	681b      	ldr	r3, [r3, #0]
 81076b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81076ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	2200      	movs	r2, #0
 81076c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	2200      	movs	r2, #0
 81076c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 81076cc:	bf00      	nop
 81076ce:	3714      	adds	r7, #20
 81076d0:	46bd      	mov	sp, r7
 81076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076d6:	4770      	bx	lr

081076d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81076d8:	b480      	push	{r7}
 81076da:	b085      	sub	sp, #20
 81076dc:	af00      	add	r7, sp, #0
 81076de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81076e0:	687b      	ldr	r3, [r7, #4]
 81076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81076e4:	095b      	lsrs	r3, r3, #5
 81076e6:	3301      	adds	r3, #1
 81076e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	68db      	ldr	r3, [r3, #12]
 81076ee:	3301      	adds	r3, #1
 81076f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81076f2:	68bb      	ldr	r3, [r7, #8]
 81076f4:	3307      	adds	r3, #7
 81076f6:	08db      	lsrs	r3, r3, #3
 81076f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81076fa:	68bb      	ldr	r3, [r7, #8]
 81076fc:	68fa      	ldr	r2, [r7, #12]
 81076fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8107702:	4618      	mov	r0, r3
 8107704:	3714      	adds	r7, #20
 8107706:	46bd      	mov	sp, r7
 8107708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810770c:	4770      	bx	lr

0810770e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810770e:	b580      	push	{r7, lr}
 8107710:	b082      	sub	sp, #8
 8107712:	af00      	add	r7, sp, #0
 8107714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107716:	687b      	ldr	r3, [r7, #4]
 8107718:	2b00      	cmp	r3, #0
 810771a:	d101      	bne.n	8107720 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810771c:	2301      	movs	r3, #1
 810771e:	e049      	b.n	81077b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107726:	b2db      	uxtb	r3, r3
 8107728:	2b00      	cmp	r3, #0
 810772a:	d106      	bne.n	810773a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	2200      	movs	r2, #0
 8107730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107734:	6878      	ldr	r0, [r7, #4]
 8107736:	f000 f841 	bl	81077bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810773a:	687b      	ldr	r3, [r7, #4]
 810773c:	2202      	movs	r2, #2
 810773e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107742:	687b      	ldr	r3, [r7, #4]
 8107744:	681a      	ldr	r2, [r3, #0]
 8107746:	687b      	ldr	r3, [r7, #4]
 8107748:	3304      	adds	r3, #4
 810774a:	4619      	mov	r1, r3
 810774c:	4610      	mov	r0, r2
 810774e:	f000 f9bd 	bl	8107acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107752:	687b      	ldr	r3, [r7, #4]
 8107754:	2201      	movs	r2, #1
 8107756:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	2201      	movs	r2, #1
 810775e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107762:	687b      	ldr	r3, [r7, #4]
 8107764:	2201      	movs	r2, #1
 8107766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	2201      	movs	r2, #1
 810776e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	2201      	movs	r2, #1
 8107776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	2201      	movs	r2, #1
 810777e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107782:	687b      	ldr	r3, [r7, #4]
 8107784:	2201      	movs	r2, #1
 8107786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810778a:	687b      	ldr	r3, [r7, #4]
 810778c:	2201      	movs	r2, #1
 810778e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107792:	687b      	ldr	r3, [r7, #4]
 8107794:	2201      	movs	r2, #1
 8107796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	2201      	movs	r2, #1
 810779e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81077a2:	687b      	ldr	r3, [r7, #4]
 81077a4:	2201      	movs	r2, #1
 81077a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81077aa:	687b      	ldr	r3, [r7, #4]
 81077ac:	2201      	movs	r2, #1
 81077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81077b2:	2300      	movs	r3, #0
}
 81077b4:	4618      	mov	r0, r3
 81077b6:	3708      	adds	r7, #8
 81077b8:	46bd      	mov	sp, r7
 81077ba:	bd80      	pop	{r7, pc}

081077bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81077bc:	b480      	push	{r7}
 81077be:	b083      	sub	sp, #12
 81077c0:	af00      	add	r7, sp, #0
 81077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81077c4:	bf00      	nop
 81077c6:	370c      	adds	r7, #12
 81077c8:	46bd      	mov	sp, r7
 81077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077ce:	4770      	bx	lr

081077d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81077d0:	b480      	push	{r7}
 81077d2:	b085      	sub	sp, #20
 81077d4:	af00      	add	r7, sp, #0
 81077d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81077de:	b2db      	uxtb	r3, r3
 81077e0:	2b01      	cmp	r3, #1
 81077e2:	d001      	beq.n	81077e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81077e4:	2301      	movs	r3, #1
 81077e6:	e021      	b.n	810782c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	2202      	movs	r2, #2
 81077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81077f0:	687b      	ldr	r3, [r7, #4]
 81077f2:	681b      	ldr	r3, [r3, #0]
 81077f4:	68da      	ldr	r2, [r3, #12]
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	f042 0201 	orr.w	r2, r2, #1
 81077fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107800:	687b      	ldr	r3, [r7, #4]
 8107802:	681b      	ldr	r3, [r3, #0]
 8107804:	689a      	ldr	r2, [r3, #8]
 8107806:	4b0c      	ldr	r3, [pc, #48]	; (8107838 <HAL_TIM_Base_Start_IT+0x68>)
 8107808:	4013      	ands	r3, r2
 810780a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810780c:	68fb      	ldr	r3, [r7, #12]
 810780e:	2b06      	cmp	r3, #6
 8107810:	d00b      	beq.n	810782a <HAL_TIM_Base_Start_IT+0x5a>
 8107812:	68fb      	ldr	r3, [r7, #12]
 8107814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107818:	d007      	beq.n	810782a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	681b      	ldr	r3, [r3, #0]
 810781e:	681a      	ldr	r2, [r3, #0]
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	681b      	ldr	r3, [r3, #0]
 8107824:	f042 0201 	orr.w	r2, r2, #1
 8107828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810782a:	2300      	movs	r3, #0
}
 810782c:	4618      	mov	r0, r3
 810782e:	3714      	adds	r7, #20
 8107830:	46bd      	mov	sp, r7
 8107832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107836:	4770      	bx	lr
 8107838:	00010007 	.word	0x00010007

0810783c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810783c:	b580      	push	{r7, lr}
 810783e:	b082      	sub	sp, #8
 8107840:	af00      	add	r7, sp, #0
 8107842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	681b      	ldr	r3, [r3, #0]
 8107848:	691b      	ldr	r3, [r3, #16]
 810784a:	f003 0302 	and.w	r3, r3, #2
 810784e:	2b02      	cmp	r3, #2
 8107850:	d122      	bne.n	8107898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8107852:	687b      	ldr	r3, [r7, #4]
 8107854:	681b      	ldr	r3, [r3, #0]
 8107856:	68db      	ldr	r3, [r3, #12]
 8107858:	f003 0302 	and.w	r3, r3, #2
 810785c:	2b02      	cmp	r3, #2
 810785e:	d11b      	bne.n	8107898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	681b      	ldr	r3, [r3, #0]
 8107864:	f06f 0202 	mvn.w	r2, #2
 8107868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810786a:	687b      	ldr	r3, [r7, #4]
 810786c:	2201      	movs	r2, #1
 810786e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107870:	687b      	ldr	r3, [r7, #4]
 8107872:	681b      	ldr	r3, [r3, #0]
 8107874:	699b      	ldr	r3, [r3, #24]
 8107876:	f003 0303 	and.w	r3, r3, #3
 810787a:	2b00      	cmp	r3, #0
 810787c:	d003      	beq.n	8107886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810787e:	6878      	ldr	r0, [r7, #4]
 8107880:	f000 f905 	bl	8107a8e <HAL_TIM_IC_CaptureCallback>
 8107884:	e005      	b.n	8107892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8107886:	6878      	ldr	r0, [r7, #4]
 8107888:	f000 f8f7 	bl	8107a7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810788c:	6878      	ldr	r0, [r7, #4]
 810788e:	f000 f908 	bl	8107aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	2200      	movs	r2, #0
 8107896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	681b      	ldr	r3, [r3, #0]
 810789c:	691b      	ldr	r3, [r3, #16]
 810789e:	f003 0304 	and.w	r3, r3, #4
 81078a2:	2b04      	cmp	r3, #4
 81078a4:	d122      	bne.n	81078ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81078a6:	687b      	ldr	r3, [r7, #4]
 81078a8:	681b      	ldr	r3, [r3, #0]
 81078aa:	68db      	ldr	r3, [r3, #12]
 81078ac:	f003 0304 	and.w	r3, r3, #4
 81078b0:	2b04      	cmp	r3, #4
 81078b2:	d11b      	bne.n	81078ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	681b      	ldr	r3, [r3, #0]
 81078b8:	f06f 0204 	mvn.w	r2, #4
 81078bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	2202      	movs	r2, #2
 81078c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	681b      	ldr	r3, [r3, #0]
 81078c8:	699b      	ldr	r3, [r3, #24]
 81078ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81078ce:	2b00      	cmp	r3, #0
 81078d0:	d003      	beq.n	81078da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81078d2:	6878      	ldr	r0, [r7, #4]
 81078d4:	f000 f8db 	bl	8107a8e <HAL_TIM_IC_CaptureCallback>
 81078d8:	e005      	b.n	81078e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81078da:	6878      	ldr	r0, [r7, #4]
 81078dc:	f000 f8cd 	bl	8107a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81078e0:	6878      	ldr	r0, [r7, #4]
 81078e2:	f000 f8de 	bl	8107aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81078e6:	687b      	ldr	r3, [r7, #4]
 81078e8:	2200      	movs	r2, #0
 81078ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	681b      	ldr	r3, [r3, #0]
 81078f0:	691b      	ldr	r3, [r3, #16]
 81078f2:	f003 0308 	and.w	r3, r3, #8
 81078f6:	2b08      	cmp	r3, #8
 81078f8:	d122      	bne.n	8107940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	681b      	ldr	r3, [r3, #0]
 81078fe:	68db      	ldr	r3, [r3, #12]
 8107900:	f003 0308 	and.w	r3, r3, #8
 8107904:	2b08      	cmp	r3, #8
 8107906:	d11b      	bne.n	8107940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	f06f 0208 	mvn.w	r2, #8
 8107910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8107912:	687b      	ldr	r3, [r7, #4]
 8107914:	2204      	movs	r2, #4
 8107916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	681b      	ldr	r3, [r3, #0]
 810791c:	69db      	ldr	r3, [r3, #28]
 810791e:	f003 0303 	and.w	r3, r3, #3
 8107922:	2b00      	cmp	r3, #0
 8107924:	d003      	beq.n	810792e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107926:	6878      	ldr	r0, [r7, #4]
 8107928:	f000 f8b1 	bl	8107a8e <HAL_TIM_IC_CaptureCallback>
 810792c:	e005      	b.n	810793a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810792e:	6878      	ldr	r0, [r7, #4]
 8107930:	f000 f8a3 	bl	8107a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107934:	6878      	ldr	r0, [r7, #4]
 8107936:	f000 f8b4 	bl	8107aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810793a:	687b      	ldr	r3, [r7, #4]
 810793c:	2200      	movs	r2, #0
 810793e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	681b      	ldr	r3, [r3, #0]
 8107944:	691b      	ldr	r3, [r3, #16]
 8107946:	f003 0310 	and.w	r3, r3, #16
 810794a:	2b10      	cmp	r3, #16
 810794c:	d122      	bne.n	8107994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810794e:	687b      	ldr	r3, [r7, #4]
 8107950:	681b      	ldr	r3, [r3, #0]
 8107952:	68db      	ldr	r3, [r3, #12]
 8107954:	f003 0310 	and.w	r3, r3, #16
 8107958:	2b10      	cmp	r3, #16
 810795a:	d11b      	bne.n	8107994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	681b      	ldr	r3, [r3, #0]
 8107960:	f06f 0210 	mvn.w	r2, #16
 8107964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	2208      	movs	r2, #8
 810796a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	681b      	ldr	r3, [r3, #0]
 8107970:	69db      	ldr	r3, [r3, #28]
 8107972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8107976:	2b00      	cmp	r3, #0
 8107978:	d003      	beq.n	8107982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810797a:	6878      	ldr	r0, [r7, #4]
 810797c:	f000 f887 	bl	8107a8e <HAL_TIM_IC_CaptureCallback>
 8107980:	e005      	b.n	810798e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107982:	6878      	ldr	r0, [r7, #4]
 8107984:	f000 f879 	bl	8107a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107988:	6878      	ldr	r0, [r7, #4]
 810798a:	f000 f88a 	bl	8107aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810798e:	687b      	ldr	r3, [r7, #4]
 8107990:	2200      	movs	r2, #0
 8107992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	681b      	ldr	r3, [r3, #0]
 8107998:	691b      	ldr	r3, [r3, #16]
 810799a:	f003 0301 	and.w	r3, r3, #1
 810799e:	2b01      	cmp	r3, #1
 81079a0:	d10e      	bne.n	81079c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	68db      	ldr	r3, [r3, #12]
 81079a8:	f003 0301 	and.w	r3, r3, #1
 81079ac:	2b01      	cmp	r3, #1
 81079ae:	d107      	bne.n	81079c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	f06f 0201 	mvn.w	r2, #1
 81079b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81079ba:	6878      	ldr	r0, [r7, #4]
 81079bc:	f7f9 fe78 	bl	81016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81079c0:	687b      	ldr	r3, [r7, #4]
 81079c2:	681b      	ldr	r3, [r3, #0]
 81079c4:	691b      	ldr	r3, [r3, #16]
 81079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81079ca:	2b80      	cmp	r3, #128	; 0x80
 81079cc:	d10e      	bne.n	81079ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81079ce:	687b      	ldr	r3, [r7, #4]
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	68db      	ldr	r3, [r3, #12]
 81079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81079d8:	2b80      	cmp	r3, #128	; 0x80
 81079da:	d107      	bne.n	81079ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	681b      	ldr	r3, [r3, #0]
 81079e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81079e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81079e6:	6878      	ldr	r0, [r7, #4]
 81079e8:	f000 f914 	bl	8107c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	681b      	ldr	r3, [r3, #0]
 81079f0:	691b      	ldr	r3, [r3, #16]
 81079f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81079f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81079fa:	d10e      	bne.n	8107a1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81079fc:	687b      	ldr	r3, [r7, #4]
 81079fe:	681b      	ldr	r3, [r3, #0]
 8107a00:	68db      	ldr	r3, [r3, #12]
 8107a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107a06:	2b80      	cmp	r3, #128	; 0x80
 8107a08:	d107      	bne.n	8107a1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8107a0a:	687b      	ldr	r3, [r7, #4]
 8107a0c:	681b      	ldr	r3, [r3, #0]
 8107a0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8107a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107a14:	6878      	ldr	r0, [r7, #4]
 8107a16:	f000 f907 	bl	8107c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	681b      	ldr	r3, [r3, #0]
 8107a1e:	691b      	ldr	r3, [r3, #16]
 8107a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a24:	2b40      	cmp	r3, #64	; 0x40
 8107a26:	d10e      	bne.n	8107a46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	68db      	ldr	r3, [r3, #12]
 8107a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a32:	2b40      	cmp	r3, #64	; 0x40
 8107a34:	d107      	bne.n	8107a46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8107a36:	687b      	ldr	r3, [r7, #4]
 8107a38:	681b      	ldr	r3, [r3, #0]
 8107a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8107a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8107a40:	6878      	ldr	r0, [r7, #4]
 8107a42:	f000 f838 	bl	8107ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8107a46:	687b      	ldr	r3, [r7, #4]
 8107a48:	681b      	ldr	r3, [r3, #0]
 8107a4a:	691b      	ldr	r3, [r3, #16]
 8107a4c:	f003 0320 	and.w	r3, r3, #32
 8107a50:	2b20      	cmp	r3, #32
 8107a52:	d10e      	bne.n	8107a72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8107a54:	687b      	ldr	r3, [r7, #4]
 8107a56:	681b      	ldr	r3, [r3, #0]
 8107a58:	68db      	ldr	r3, [r3, #12]
 8107a5a:	f003 0320 	and.w	r3, r3, #32
 8107a5e:	2b20      	cmp	r3, #32
 8107a60:	d107      	bne.n	8107a72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8107a62:	687b      	ldr	r3, [r7, #4]
 8107a64:	681b      	ldr	r3, [r3, #0]
 8107a66:	f06f 0220 	mvn.w	r2, #32
 8107a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107a6c:	6878      	ldr	r0, [r7, #4]
 8107a6e:	f000 f8c7 	bl	8107c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107a72:	bf00      	nop
 8107a74:	3708      	adds	r7, #8
 8107a76:	46bd      	mov	sp, r7
 8107a78:	bd80      	pop	{r7, pc}

08107a7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107a7a:	b480      	push	{r7}
 8107a7c:	b083      	sub	sp, #12
 8107a7e:	af00      	add	r7, sp, #0
 8107a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107a82:	bf00      	nop
 8107a84:	370c      	adds	r7, #12
 8107a86:	46bd      	mov	sp, r7
 8107a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a8c:	4770      	bx	lr

08107a8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8107a8e:	b480      	push	{r7}
 8107a90:	b083      	sub	sp, #12
 8107a92:	af00      	add	r7, sp, #0
 8107a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107a96:	bf00      	nop
 8107a98:	370c      	adds	r7, #12
 8107a9a:	46bd      	mov	sp, r7
 8107a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107aa0:	4770      	bx	lr

08107aa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107aa2:	b480      	push	{r7}
 8107aa4:	b083      	sub	sp, #12
 8107aa6:	af00      	add	r7, sp, #0
 8107aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107aaa:	bf00      	nop
 8107aac:	370c      	adds	r7, #12
 8107aae:	46bd      	mov	sp, r7
 8107ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ab4:	4770      	bx	lr

08107ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107ab6:	b480      	push	{r7}
 8107ab8:	b083      	sub	sp, #12
 8107aba:	af00      	add	r7, sp, #0
 8107abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107abe:	bf00      	nop
 8107ac0:	370c      	adds	r7, #12
 8107ac2:	46bd      	mov	sp, r7
 8107ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ac8:	4770      	bx	lr
	...

08107acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107acc:	b480      	push	{r7}
 8107ace:	b085      	sub	sp, #20
 8107ad0:	af00      	add	r7, sp, #0
 8107ad2:	6078      	str	r0, [r7, #4]
 8107ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	681b      	ldr	r3, [r3, #0]
 8107ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	4a40      	ldr	r2, [pc, #256]	; (8107be0 <TIM_Base_SetConfig+0x114>)
 8107ae0:	4293      	cmp	r3, r2
 8107ae2:	d013      	beq.n	8107b0c <TIM_Base_SetConfig+0x40>
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107aea:	d00f      	beq.n	8107b0c <TIM_Base_SetConfig+0x40>
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	4a3d      	ldr	r2, [pc, #244]	; (8107be4 <TIM_Base_SetConfig+0x118>)
 8107af0:	4293      	cmp	r3, r2
 8107af2:	d00b      	beq.n	8107b0c <TIM_Base_SetConfig+0x40>
 8107af4:	687b      	ldr	r3, [r7, #4]
 8107af6:	4a3c      	ldr	r2, [pc, #240]	; (8107be8 <TIM_Base_SetConfig+0x11c>)
 8107af8:	4293      	cmp	r3, r2
 8107afa:	d007      	beq.n	8107b0c <TIM_Base_SetConfig+0x40>
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	4a3b      	ldr	r2, [pc, #236]	; (8107bec <TIM_Base_SetConfig+0x120>)
 8107b00:	4293      	cmp	r3, r2
 8107b02:	d003      	beq.n	8107b0c <TIM_Base_SetConfig+0x40>
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	4a3a      	ldr	r2, [pc, #232]	; (8107bf0 <TIM_Base_SetConfig+0x124>)
 8107b08:	4293      	cmp	r3, r2
 8107b0a:	d108      	bne.n	8107b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107b0c:	68fb      	ldr	r3, [r7, #12]
 8107b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107b14:	683b      	ldr	r3, [r7, #0]
 8107b16:	685b      	ldr	r3, [r3, #4]
 8107b18:	68fa      	ldr	r2, [r7, #12]
 8107b1a:	4313      	orrs	r3, r2
 8107b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107b1e:	687b      	ldr	r3, [r7, #4]
 8107b20:	4a2f      	ldr	r2, [pc, #188]	; (8107be0 <TIM_Base_SetConfig+0x114>)
 8107b22:	4293      	cmp	r3, r2
 8107b24:	d01f      	beq.n	8107b66 <TIM_Base_SetConfig+0x9a>
 8107b26:	687b      	ldr	r3, [r7, #4]
 8107b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b2c:	d01b      	beq.n	8107b66 <TIM_Base_SetConfig+0x9a>
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	4a2c      	ldr	r2, [pc, #176]	; (8107be4 <TIM_Base_SetConfig+0x118>)
 8107b32:	4293      	cmp	r3, r2
 8107b34:	d017      	beq.n	8107b66 <TIM_Base_SetConfig+0x9a>
 8107b36:	687b      	ldr	r3, [r7, #4]
 8107b38:	4a2b      	ldr	r2, [pc, #172]	; (8107be8 <TIM_Base_SetConfig+0x11c>)
 8107b3a:	4293      	cmp	r3, r2
 8107b3c:	d013      	beq.n	8107b66 <TIM_Base_SetConfig+0x9a>
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	4a2a      	ldr	r2, [pc, #168]	; (8107bec <TIM_Base_SetConfig+0x120>)
 8107b42:	4293      	cmp	r3, r2
 8107b44:	d00f      	beq.n	8107b66 <TIM_Base_SetConfig+0x9a>
 8107b46:	687b      	ldr	r3, [r7, #4]
 8107b48:	4a29      	ldr	r2, [pc, #164]	; (8107bf0 <TIM_Base_SetConfig+0x124>)
 8107b4a:	4293      	cmp	r3, r2
 8107b4c:	d00b      	beq.n	8107b66 <TIM_Base_SetConfig+0x9a>
 8107b4e:	687b      	ldr	r3, [r7, #4]
 8107b50:	4a28      	ldr	r2, [pc, #160]	; (8107bf4 <TIM_Base_SetConfig+0x128>)
 8107b52:	4293      	cmp	r3, r2
 8107b54:	d007      	beq.n	8107b66 <TIM_Base_SetConfig+0x9a>
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	4a27      	ldr	r2, [pc, #156]	; (8107bf8 <TIM_Base_SetConfig+0x12c>)
 8107b5a:	4293      	cmp	r3, r2
 8107b5c:	d003      	beq.n	8107b66 <TIM_Base_SetConfig+0x9a>
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	4a26      	ldr	r2, [pc, #152]	; (8107bfc <TIM_Base_SetConfig+0x130>)
 8107b62:	4293      	cmp	r3, r2
 8107b64:	d108      	bne.n	8107b78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107b66:	68fb      	ldr	r3, [r7, #12]
 8107b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107b6e:	683b      	ldr	r3, [r7, #0]
 8107b70:	68db      	ldr	r3, [r3, #12]
 8107b72:	68fa      	ldr	r2, [r7, #12]
 8107b74:	4313      	orrs	r3, r2
 8107b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107b78:	68fb      	ldr	r3, [r7, #12]
 8107b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107b7e:	683b      	ldr	r3, [r7, #0]
 8107b80:	695b      	ldr	r3, [r3, #20]
 8107b82:	4313      	orrs	r3, r2
 8107b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	68fa      	ldr	r2, [r7, #12]
 8107b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107b8c:	683b      	ldr	r3, [r7, #0]
 8107b8e:	689a      	ldr	r2, [r3, #8]
 8107b90:	687b      	ldr	r3, [r7, #4]
 8107b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107b94:	683b      	ldr	r3, [r7, #0]
 8107b96:	681a      	ldr	r2, [r3, #0]
 8107b98:	687b      	ldr	r3, [r7, #4]
 8107b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107b9c:	687b      	ldr	r3, [r7, #4]
 8107b9e:	4a10      	ldr	r2, [pc, #64]	; (8107be0 <TIM_Base_SetConfig+0x114>)
 8107ba0:	4293      	cmp	r3, r2
 8107ba2:	d00f      	beq.n	8107bc4 <TIM_Base_SetConfig+0xf8>
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	4a12      	ldr	r2, [pc, #72]	; (8107bf0 <TIM_Base_SetConfig+0x124>)
 8107ba8:	4293      	cmp	r3, r2
 8107baa:	d00b      	beq.n	8107bc4 <TIM_Base_SetConfig+0xf8>
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	4a11      	ldr	r2, [pc, #68]	; (8107bf4 <TIM_Base_SetConfig+0x128>)
 8107bb0:	4293      	cmp	r3, r2
 8107bb2:	d007      	beq.n	8107bc4 <TIM_Base_SetConfig+0xf8>
 8107bb4:	687b      	ldr	r3, [r7, #4]
 8107bb6:	4a10      	ldr	r2, [pc, #64]	; (8107bf8 <TIM_Base_SetConfig+0x12c>)
 8107bb8:	4293      	cmp	r3, r2
 8107bba:	d003      	beq.n	8107bc4 <TIM_Base_SetConfig+0xf8>
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	4a0f      	ldr	r2, [pc, #60]	; (8107bfc <TIM_Base_SetConfig+0x130>)
 8107bc0:	4293      	cmp	r3, r2
 8107bc2:	d103      	bne.n	8107bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107bc4:	683b      	ldr	r3, [r7, #0]
 8107bc6:	691a      	ldr	r2, [r3, #16]
 8107bc8:	687b      	ldr	r3, [r7, #4]
 8107bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	2201      	movs	r2, #1
 8107bd0:	615a      	str	r2, [r3, #20]
}
 8107bd2:	bf00      	nop
 8107bd4:	3714      	adds	r7, #20
 8107bd6:	46bd      	mov	sp, r7
 8107bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bdc:	4770      	bx	lr
 8107bde:	bf00      	nop
 8107be0:	40010000 	.word	0x40010000
 8107be4:	40000400 	.word	0x40000400
 8107be8:	40000800 	.word	0x40000800
 8107bec:	40000c00 	.word	0x40000c00
 8107bf0:	40010400 	.word	0x40010400
 8107bf4:	40014000 	.word	0x40014000
 8107bf8:	40014400 	.word	0x40014400
 8107bfc:	40014800 	.word	0x40014800

08107c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107c00:	b480      	push	{r7}
 8107c02:	b083      	sub	sp, #12
 8107c04:	af00      	add	r7, sp, #0
 8107c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107c08:	bf00      	nop
 8107c0a:	370c      	adds	r7, #12
 8107c0c:	46bd      	mov	sp, r7
 8107c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c12:	4770      	bx	lr

08107c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107c14:	b480      	push	{r7}
 8107c16:	b083      	sub	sp, #12
 8107c18:	af00      	add	r7, sp, #0
 8107c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107c1c:	bf00      	nop
 8107c1e:	370c      	adds	r7, #12
 8107c20:	46bd      	mov	sp, r7
 8107c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c26:	4770      	bx	lr

08107c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107c28:	b480      	push	{r7}
 8107c2a:	b083      	sub	sp, #12
 8107c2c:	af00      	add	r7, sp, #0
 8107c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107c30:	bf00      	nop
 8107c32:	370c      	adds	r7, #12
 8107c34:	46bd      	mov	sp, r7
 8107c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c3a:	4770      	bx	lr

08107c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107c3c:	b580      	push	{r7, lr}
 8107c3e:	b082      	sub	sp, #8
 8107c40:	af00      	add	r7, sp, #0
 8107c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107c44:	687b      	ldr	r3, [r7, #4]
 8107c46:	2b00      	cmp	r3, #0
 8107c48:	d101      	bne.n	8107c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107c4a:	2301      	movs	r3, #1
 8107c4c:	e042      	b.n	8107cd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107c4e:	687b      	ldr	r3, [r7, #4]
 8107c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107c54:	2b00      	cmp	r3, #0
 8107c56:	d106      	bne.n	8107c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	2200      	movs	r2, #0
 8107c5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107c60:	6878      	ldr	r0, [r7, #4]
 8107c62:	f7fa f8db 	bl	8101e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107c66:	687b      	ldr	r3, [r7, #4]
 8107c68:	2224      	movs	r2, #36	; 0x24
 8107c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8107c6e:	687b      	ldr	r3, [r7, #4]
 8107c70:	681b      	ldr	r3, [r3, #0]
 8107c72:	681a      	ldr	r2, [r3, #0]
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	681b      	ldr	r3, [r3, #0]
 8107c78:	f022 0201 	bic.w	r2, r2, #1
 8107c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107c7e:	6878      	ldr	r0, [r7, #4]
 8107c80:	f000 f968 	bl	8107f54 <UART_SetConfig>
 8107c84:	4603      	mov	r3, r0
 8107c86:	2b01      	cmp	r3, #1
 8107c88:	d101      	bne.n	8107c8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107c8a:	2301      	movs	r3, #1
 8107c8c:	e022      	b.n	8107cd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c92:	2b00      	cmp	r3, #0
 8107c94:	d002      	beq.n	8107c9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107c96:	6878      	ldr	r0, [r7, #4]
 8107c98:	f000 ff0c 	bl	8108ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	681b      	ldr	r3, [r3, #0]
 8107ca0:	685a      	ldr	r2, [r3, #4]
 8107ca2:	687b      	ldr	r3, [r7, #4]
 8107ca4:	681b      	ldr	r3, [r3, #0]
 8107ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	681b      	ldr	r3, [r3, #0]
 8107cb0:	689a      	ldr	r2, [r3, #8]
 8107cb2:	687b      	ldr	r3, [r7, #4]
 8107cb4:	681b      	ldr	r3, [r3, #0]
 8107cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107cbc:	687b      	ldr	r3, [r7, #4]
 8107cbe:	681b      	ldr	r3, [r3, #0]
 8107cc0:	681a      	ldr	r2, [r3, #0]
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	681b      	ldr	r3, [r3, #0]
 8107cc6:	f042 0201 	orr.w	r2, r2, #1
 8107cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107ccc:	6878      	ldr	r0, [r7, #4]
 8107cce:	f000 ff93 	bl	8108bf8 <UART_CheckIdleState>
 8107cd2:	4603      	mov	r3, r0
}
 8107cd4:	4618      	mov	r0, r3
 8107cd6:	3708      	adds	r7, #8
 8107cd8:	46bd      	mov	sp, r7
 8107cda:	bd80      	pop	{r7, pc}

08107cdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107cdc:	b580      	push	{r7, lr}
 8107cde:	b08a      	sub	sp, #40	; 0x28
 8107ce0:	af02      	add	r7, sp, #8
 8107ce2:	60f8      	str	r0, [r7, #12]
 8107ce4:	60b9      	str	r1, [r7, #8]
 8107ce6:	603b      	str	r3, [r7, #0]
 8107ce8:	4613      	mov	r3, r2
 8107cea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107cec:	68fb      	ldr	r3, [r7, #12]
 8107cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107cf2:	2b20      	cmp	r3, #32
 8107cf4:	f040 8083 	bne.w	8107dfe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8107cf8:	68bb      	ldr	r3, [r7, #8]
 8107cfa:	2b00      	cmp	r3, #0
 8107cfc:	d002      	beq.n	8107d04 <HAL_UART_Transmit+0x28>
 8107cfe:	88fb      	ldrh	r3, [r7, #6]
 8107d00:	2b00      	cmp	r3, #0
 8107d02:	d101      	bne.n	8107d08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107d04:	2301      	movs	r3, #1
 8107d06:	e07b      	b.n	8107e00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8107d08:	68fb      	ldr	r3, [r7, #12]
 8107d0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107d0e:	2b01      	cmp	r3, #1
 8107d10:	d101      	bne.n	8107d16 <HAL_UART_Transmit+0x3a>
 8107d12:	2302      	movs	r3, #2
 8107d14:	e074      	b.n	8107e00 <HAL_UART_Transmit+0x124>
 8107d16:	68fb      	ldr	r3, [r7, #12]
 8107d18:	2201      	movs	r2, #1
 8107d1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107d1e:	68fb      	ldr	r3, [r7, #12]
 8107d20:	2200      	movs	r2, #0
 8107d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107d26:	68fb      	ldr	r3, [r7, #12]
 8107d28:	2221      	movs	r2, #33	; 0x21
 8107d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8107d2e:	f7fa f9c1 	bl	81020b4 <HAL_GetTick>
 8107d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107d34:	68fb      	ldr	r3, [r7, #12]
 8107d36:	88fa      	ldrh	r2, [r7, #6]
 8107d38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8107d3c:	68fb      	ldr	r3, [r7, #12]
 8107d3e:	88fa      	ldrh	r2, [r7, #6]
 8107d40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107d44:	68fb      	ldr	r3, [r7, #12]
 8107d46:	689b      	ldr	r3, [r3, #8]
 8107d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107d4c:	d108      	bne.n	8107d60 <HAL_UART_Transmit+0x84>
 8107d4e:	68fb      	ldr	r3, [r7, #12]
 8107d50:	691b      	ldr	r3, [r3, #16]
 8107d52:	2b00      	cmp	r3, #0
 8107d54:	d104      	bne.n	8107d60 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8107d56:	2300      	movs	r3, #0
 8107d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8107d5a:	68bb      	ldr	r3, [r7, #8]
 8107d5c:	61bb      	str	r3, [r7, #24]
 8107d5e:	e003      	b.n	8107d68 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8107d60:	68bb      	ldr	r3, [r7, #8]
 8107d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107d64:	2300      	movs	r3, #0
 8107d66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8107d68:	68fb      	ldr	r3, [r7, #12]
 8107d6a:	2200      	movs	r2, #0
 8107d6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8107d70:	e02c      	b.n	8107dcc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107d72:	683b      	ldr	r3, [r7, #0]
 8107d74:	9300      	str	r3, [sp, #0]
 8107d76:	697b      	ldr	r3, [r7, #20]
 8107d78:	2200      	movs	r2, #0
 8107d7a:	2180      	movs	r1, #128	; 0x80
 8107d7c:	68f8      	ldr	r0, [r7, #12]
 8107d7e:	f000 ff83 	bl	8108c88 <UART_WaitOnFlagUntilTimeout>
 8107d82:	4603      	mov	r3, r0
 8107d84:	2b00      	cmp	r3, #0
 8107d86:	d001      	beq.n	8107d8c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8107d88:	2303      	movs	r3, #3
 8107d8a:	e039      	b.n	8107e00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8107d8c:	69fb      	ldr	r3, [r7, #28]
 8107d8e:	2b00      	cmp	r3, #0
 8107d90:	d10b      	bne.n	8107daa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107d92:	69bb      	ldr	r3, [r7, #24]
 8107d94:	881b      	ldrh	r3, [r3, #0]
 8107d96:	461a      	mov	r2, r3
 8107d98:	68fb      	ldr	r3, [r7, #12]
 8107d9a:	681b      	ldr	r3, [r3, #0]
 8107d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107da0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107da2:	69bb      	ldr	r3, [r7, #24]
 8107da4:	3302      	adds	r3, #2
 8107da6:	61bb      	str	r3, [r7, #24]
 8107da8:	e007      	b.n	8107dba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107daa:	69fb      	ldr	r3, [r7, #28]
 8107dac:	781a      	ldrb	r2, [r3, #0]
 8107dae:	68fb      	ldr	r3, [r7, #12]
 8107db0:	681b      	ldr	r3, [r3, #0]
 8107db2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107db4:	69fb      	ldr	r3, [r7, #28]
 8107db6:	3301      	adds	r3, #1
 8107db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107dba:	68fb      	ldr	r3, [r7, #12]
 8107dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107dc0:	b29b      	uxth	r3, r3
 8107dc2:	3b01      	subs	r3, #1
 8107dc4:	b29a      	uxth	r2, r3
 8107dc6:	68fb      	ldr	r3, [r7, #12]
 8107dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107dcc:	68fb      	ldr	r3, [r7, #12]
 8107dce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107dd2:	b29b      	uxth	r3, r3
 8107dd4:	2b00      	cmp	r3, #0
 8107dd6:	d1cc      	bne.n	8107d72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107dd8:	683b      	ldr	r3, [r7, #0]
 8107dda:	9300      	str	r3, [sp, #0]
 8107ddc:	697b      	ldr	r3, [r7, #20]
 8107dde:	2200      	movs	r2, #0
 8107de0:	2140      	movs	r1, #64	; 0x40
 8107de2:	68f8      	ldr	r0, [r7, #12]
 8107de4:	f000 ff50 	bl	8108c88 <UART_WaitOnFlagUntilTimeout>
 8107de8:	4603      	mov	r3, r0
 8107dea:	2b00      	cmp	r3, #0
 8107dec:	d001      	beq.n	8107df2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107dee:	2303      	movs	r3, #3
 8107df0:	e006      	b.n	8107e00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107df2:	68fb      	ldr	r3, [r7, #12]
 8107df4:	2220      	movs	r2, #32
 8107df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8107dfa:	2300      	movs	r3, #0
 8107dfc:	e000      	b.n	8107e00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8107dfe:	2302      	movs	r3, #2
  }
}
 8107e00:	4618      	mov	r0, r3
 8107e02:	3720      	adds	r7, #32
 8107e04:	46bd      	mov	sp, r7
 8107e06:	bd80      	pop	{r7, pc}

08107e08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107e08:	b580      	push	{r7, lr}
 8107e0a:	b084      	sub	sp, #16
 8107e0c:	af00      	add	r7, sp, #0
 8107e0e:	60f8      	str	r0, [r7, #12]
 8107e10:	60b9      	str	r1, [r7, #8]
 8107e12:	4613      	mov	r3, r2
 8107e14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8107e16:	68fb      	ldr	r3, [r7, #12]
 8107e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107e1c:	2b20      	cmp	r3, #32
 8107e1e:	d170      	bne.n	8107f02 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8107e20:	68bb      	ldr	r3, [r7, #8]
 8107e22:	2b00      	cmp	r3, #0
 8107e24:	d002      	beq.n	8107e2c <HAL_UART_Receive_DMA+0x24>
 8107e26:	88fb      	ldrh	r3, [r7, #6]
 8107e28:	2b00      	cmp	r3, #0
 8107e2a:	d101      	bne.n	8107e30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8107e2c:	2301      	movs	r3, #1
 8107e2e:	e069      	b.n	8107f04 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8107e30:	68fb      	ldr	r3, [r7, #12]
 8107e32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107e36:	2b01      	cmp	r3, #1
 8107e38:	d101      	bne.n	8107e3e <HAL_UART_Receive_DMA+0x36>
 8107e3a:	2302      	movs	r3, #2
 8107e3c:	e062      	b.n	8107f04 <HAL_UART_Receive_DMA+0xfc>
 8107e3e:	68fb      	ldr	r3, [r7, #12]
 8107e40:	2201      	movs	r2, #1
 8107e42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8107e46:	68fb      	ldr	r3, [r7, #12]
 8107e48:	68ba      	ldr	r2, [r7, #8]
 8107e4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8107e4c:	68fb      	ldr	r3, [r7, #12]
 8107e4e:	88fa      	ldrh	r2, [r7, #6]
 8107e50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107e54:	68fb      	ldr	r3, [r7, #12]
 8107e56:	2200      	movs	r2, #0
 8107e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8107e5c:	68fb      	ldr	r3, [r7, #12]
 8107e5e:	2222      	movs	r2, #34	; 0x22
 8107e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8107e64:	68fb      	ldr	r3, [r7, #12]
 8107e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107e68:	2b00      	cmp	r3, #0
 8107e6a:	d02c      	beq.n	8107ec6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8107e6c:	68fb      	ldr	r3, [r7, #12]
 8107e6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107e70:	4a26      	ldr	r2, [pc, #152]	; (8107f0c <HAL_UART_Receive_DMA+0x104>)
 8107e72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8107e74:	68fb      	ldr	r3, [r7, #12]
 8107e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107e78:	4a25      	ldr	r2, [pc, #148]	; (8107f10 <HAL_UART_Receive_DMA+0x108>)
 8107e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8107e7c:	68fb      	ldr	r3, [r7, #12]
 8107e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107e80:	4a24      	ldr	r2, [pc, #144]	; (8107f14 <HAL_UART_Receive_DMA+0x10c>)
 8107e82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8107e84:	68fb      	ldr	r3, [r7, #12]
 8107e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107e88:	2200      	movs	r2, #0
 8107e8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8107e8c:	68fb      	ldr	r3, [r7, #12]
 8107e8e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8107e90:	68fb      	ldr	r3, [r7, #12]
 8107e92:	681b      	ldr	r3, [r3, #0]
 8107e94:	3324      	adds	r3, #36	; 0x24
 8107e96:	4619      	mov	r1, r3
 8107e98:	68fb      	ldr	r3, [r7, #12]
 8107e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107e9c:	461a      	mov	r2, r3
 8107e9e:	88fb      	ldrh	r3, [r7, #6]
 8107ea0:	f7fa fd7c 	bl	810299c <HAL_DMA_Start_IT>
 8107ea4:	4603      	mov	r3, r0
 8107ea6:	2b00      	cmp	r3, #0
 8107ea8:	d00d      	beq.n	8107ec6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8107eaa:	68fb      	ldr	r3, [r7, #12]
 8107eac:	2210      	movs	r2, #16
 8107eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107eb2:	68fb      	ldr	r3, [r7, #12]
 8107eb4:	2200      	movs	r2, #0
 8107eb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8107eba:	68fb      	ldr	r3, [r7, #12]
 8107ebc:	2220      	movs	r2, #32
 8107ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8107ec2:	2301      	movs	r3, #1
 8107ec4:	e01e      	b.n	8107f04 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8107ec6:	68fb      	ldr	r3, [r7, #12]
 8107ec8:	2200      	movs	r2, #0
 8107eca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107ece:	68fb      	ldr	r3, [r7, #12]
 8107ed0:	681b      	ldr	r3, [r3, #0]
 8107ed2:	681a      	ldr	r2, [r3, #0]
 8107ed4:	68fb      	ldr	r3, [r7, #12]
 8107ed6:	681b      	ldr	r3, [r3, #0]
 8107ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107edc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107ede:	68fb      	ldr	r3, [r7, #12]
 8107ee0:	681b      	ldr	r3, [r3, #0]
 8107ee2:	689a      	ldr	r2, [r3, #8]
 8107ee4:	68fb      	ldr	r3, [r7, #12]
 8107ee6:	681b      	ldr	r3, [r3, #0]
 8107ee8:	f042 0201 	orr.w	r2, r2, #1
 8107eec:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8107eee:	68fb      	ldr	r3, [r7, #12]
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	689a      	ldr	r2, [r3, #8]
 8107ef4:	68fb      	ldr	r3, [r7, #12]
 8107ef6:	681b      	ldr	r3, [r3, #0]
 8107ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107efc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8107efe:	2300      	movs	r3, #0
 8107f00:	e000      	b.n	8107f04 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8107f02:	2302      	movs	r3, #2
  }
}
 8107f04:	4618      	mov	r0, r3
 8107f06:	3710      	adds	r7, #16
 8107f08:	46bd      	mov	sp, r7
 8107f0a:	bd80      	pop	{r7, pc}
 8107f0c:	08108e0b 	.word	0x08108e0b
 8107f10:	08108e71 	.word	0x08108e71
 8107f14:	08108e8d 	.word	0x08108e8d

08107f18 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8107f18:	b480      	push	{r7}
 8107f1a:	b083      	sub	sp, #12
 8107f1c:	af00      	add	r7, sp, #0
 8107f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8107f20:	bf00      	nop
 8107f22:	370c      	adds	r7, #12
 8107f24:	46bd      	mov	sp, r7
 8107f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f2a:	4770      	bx	lr

08107f2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8107f2c:	b480      	push	{r7}
 8107f2e:	b083      	sub	sp, #12
 8107f30:	af00      	add	r7, sp, #0
 8107f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8107f34:	bf00      	nop
 8107f36:	370c      	adds	r7, #12
 8107f38:	46bd      	mov	sp, r7
 8107f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f3e:	4770      	bx	lr

08107f40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8107f40:	b480      	push	{r7}
 8107f42:	b083      	sub	sp, #12
 8107f44:	af00      	add	r7, sp, #0
 8107f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8107f48:	bf00      	nop
 8107f4a:	370c      	adds	r7, #12
 8107f4c:	46bd      	mov	sp, r7
 8107f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f52:	4770      	bx	lr

08107f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107f54:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8107f58:	b08e      	sub	sp, #56	; 0x38
 8107f5a:	af00      	add	r7, sp, #0
 8107f5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107f5e:	2300      	movs	r3, #0
 8107f60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	689a      	ldr	r2, [r3, #8]
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	691b      	ldr	r3, [r3, #16]
 8107f6c:	431a      	orrs	r2, r3
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	695b      	ldr	r3, [r3, #20]
 8107f72:	431a      	orrs	r2, r3
 8107f74:	687b      	ldr	r3, [r7, #4]
 8107f76:	69db      	ldr	r3, [r3, #28]
 8107f78:	4313      	orrs	r3, r2
 8107f7a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8107f7c:	687b      	ldr	r3, [r7, #4]
 8107f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107f82:	4313      	orrs	r3, r2
 8107f84:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	681a      	ldr	r2, [r3, #0]
 8107f8c:	4bc2      	ldr	r3, [pc, #776]	; (8108298 <UART_SetConfig+0x344>)
 8107f8e:	4013      	ands	r3, r2
 8107f90:	687a      	ldr	r2, [r7, #4]
 8107f92:	6812      	ldr	r2, [r2, #0]
 8107f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107f96:	430b      	orrs	r3, r1
 8107f98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107f9a:	687b      	ldr	r3, [r7, #4]
 8107f9c:	681b      	ldr	r3, [r3, #0]
 8107f9e:	685b      	ldr	r3, [r3, #4]
 8107fa0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107fa4:	687b      	ldr	r3, [r7, #4]
 8107fa6:	68da      	ldr	r2, [r3, #12]
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	681b      	ldr	r3, [r3, #0]
 8107fac:	430a      	orrs	r2, r1
 8107fae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107fb0:	687b      	ldr	r3, [r7, #4]
 8107fb2:	699b      	ldr	r3, [r3, #24]
 8107fb4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107fb6:	687b      	ldr	r3, [r7, #4]
 8107fb8:	681b      	ldr	r3, [r3, #0]
 8107fba:	4ab8      	ldr	r2, [pc, #736]	; (810829c <UART_SetConfig+0x348>)
 8107fbc:	4293      	cmp	r3, r2
 8107fbe:	d004      	beq.n	8107fca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107fc0:	687b      	ldr	r3, [r7, #4]
 8107fc2:	6a1b      	ldr	r3, [r3, #32]
 8107fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107fc6:	4313      	orrs	r3, r2
 8107fc8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107fca:	687b      	ldr	r3, [r7, #4]
 8107fcc:	681b      	ldr	r3, [r3, #0]
 8107fce:	689b      	ldr	r3, [r3, #8]
 8107fd0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107fd4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107fd8:	687a      	ldr	r2, [r7, #4]
 8107fda:	6812      	ldr	r2, [r2, #0]
 8107fdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107fde:	430b      	orrs	r3, r1
 8107fe0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107fe2:	687b      	ldr	r3, [r7, #4]
 8107fe4:	681b      	ldr	r3, [r3, #0]
 8107fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107fe8:	f023 010f 	bic.w	r1, r3, #15
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	681b      	ldr	r3, [r3, #0]
 8107ff4:	430a      	orrs	r2, r1
 8107ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	681b      	ldr	r3, [r3, #0]
 8107ffc:	4aa8      	ldr	r2, [pc, #672]	; (81082a0 <UART_SetConfig+0x34c>)
 8107ffe:	4293      	cmp	r3, r2
 8108000:	d177      	bne.n	81080f2 <UART_SetConfig+0x19e>
 8108002:	4ba8      	ldr	r3, [pc, #672]	; (81082a4 <UART_SetConfig+0x350>)
 8108004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810800a:	2b28      	cmp	r3, #40	; 0x28
 810800c:	d86c      	bhi.n	81080e8 <UART_SetConfig+0x194>
 810800e:	a201      	add	r2, pc, #4	; (adr r2, 8108014 <UART_SetConfig+0xc0>)
 8108010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108014:	081080b9 	.word	0x081080b9
 8108018:	081080e9 	.word	0x081080e9
 810801c:	081080e9 	.word	0x081080e9
 8108020:	081080e9 	.word	0x081080e9
 8108024:	081080e9 	.word	0x081080e9
 8108028:	081080e9 	.word	0x081080e9
 810802c:	081080e9 	.word	0x081080e9
 8108030:	081080e9 	.word	0x081080e9
 8108034:	081080c1 	.word	0x081080c1
 8108038:	081080e9 	.word	0x081080e9
 810803c:	081080e9 	.word	0x081080e9
 8108040:	081080e9 	.word	0x081080e9
 8108044:	081080e9 	.word	0x081080e9
 8108048:	081080e9 	.word	0x081080e9
 810804c:	081080e9 	.word	0x081080e9
 8108050:	081080e9 	.word	0x081080e9
 8108054:	081080c9 	.word	0x081080c9
 8108058:	081080e9 	.word	0x081080e9
 810805c:	081080e9 	.word	0x081080e9
 8108060:	081080e9 	.word	0x081080e9
 8108064:	081080e9 	.word	0x081080e9
 8108068:	081080e9 	.word	0x081080e9
 810806c:	081080e9 	.word	0x081080e9
 8108070:	081080e9 	.word	0x081080e9
 8108074:	081080d1 	.word	0x081080d1
 8108078:	081080e9 	.word	0x081080e9
 810807c:	081080e9 	.word	0x081080e9
 8108080:	081080e9 	.word	0x081080e9
 8108084:	081080e9 	.word	0x081080e9
 8108088:	081080e9 	.word	0x081080e9
 810808c:	081080e9 	.word	0x081080e9
 8108090:	081080e9 	.word	0x081080e9
 8108094:	081080d9 	.word	0x081080d9
 8108098:	081080e9 	.word	0x081080e9
 810809c:	081080e9 	.word	0x081080e9
 81080a0:	081080e9 	.word	0x081080e9
 81080a4:	081080e9 	.word	0x081080e9
 81080a8:	081080e9 	.word	0x081080e9
 81080ac:	081080e9 	.word	0x081080e9
 81080b0:	081080e9 	.word	0x081080e9
 81080b4:	081080e1 	.word	0x081080e1
 81080b8:	2301      	movs	r3, #1
 81080ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81080be:	e231      	b.n	8108524 <UART_SetConfig+0x5d0>
 81080c0:	2304      	movs	r3, #4
 81080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81080c6:	e22d      	b.n	8108524 <UART_SetConfig+0x5d0>
 81080c8:	2308      	movs	r3, #8
 81080ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81080ce:	e229      	b.n	8108524 <UART_SetConfig+0x5d0>
 81080d0:	2310      	movs	r3, #16
 81080d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81080d6:	e225      	b.n	8108524 <UART_SetConfig+0x5d0>
 81080d8:	2320      	movs	r3, #32
 81080da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81080de:	e221      	b.n	8108524 <UART_SetConfig+0x5d0>
 81080e0:	2340      	movs	r3, #64	; 0x40
 81080e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81080e6:	e21d      	b.n	8108524 <UART_SetConfig+0x5d0>
 81080e8:	2380      	movs	r3, #128	; 0x80
 81080ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81080ee:	bf00      	nop
 81080f0:	e218      	b.n	8108524 <UART_SetConfig+0x5d0>
 81080f2:	687b      	ldr	r3, [r7, #4]
 81080f4:	681b      	ldr	r3, [r3, #0]
 81080f6:	4a6c      	ldr	r2, [pc, #432]	; (81082a8 <UART_SetConfig+0x354>)
 81080f8:	4293      	cmp	r3, r2
 81080fa:	d132      	bne.n	8108162 <UART_SetConfig+0x20e>
 81080fc:	4b69      	ldr	r3, [pc, #420]	; (81082a4 <UART_SetConfig+0x350>)
 81080fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108100:	f003 0307 	and.w	r3, r3, #7
 8108104:	2b05      	cmp	r3, #5
 8108106:	d827      	bhi.n	8108158 <UART_SetConfig+0x204>
 8108108:	a201      	add	r2, pc, #4	; (adr r2, 8108110 <UART_SetConfig+0x1bc>)
 810810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810810e:	bf00      	nop
 8108110:	08108129 	.word	0x08108129
 8108114:	08108131 	.word	0x08108131
 8108118:	08108139 	.word	0x08108139
 810811c:	08108141 	.word	0x08108141
 8108120:	08108149 	.word	0x08108149
 8108124:	08108151 	.word	0x08108151
 8108128:	2300      	movs	r3, #0
 810812a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810812e:	e1f9      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108130:	2304      	movs	r3, #4
 8108132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108136:	e1f5      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108138:	2308      	movs	r3, #8
 810813a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810813e:	e1f1      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108140:	2310      	movs	r3, #16
 8108142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108146:	e1ed      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108148:	2320      	movs	r3, #32
 810814a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810814e:	e1e9      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108150:	2340      	movs	r3, #64	; 0x40
 8108152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108156:	e1e5      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108158:	2380      	movs	r3, #128	; 0x80
 810815a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810815e:	bf00      	nop
 8108160:	e1e0      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	681b      	ldr	r3, [r3, #0]
 8108166:	4a51      	ldr	r2, [pc, #324]	; (81082ac <UART_SetConfig+0x358>)
 8108168:	4293      	cmp	r3, r2
 810816a:	d132      	bne.n	81081d2 <UART_SetConfig+0x27e>
 810816c:	4b4d      	ldr	r3, [pc, #308]	; (81082a4 <UART_SetConfig+0x350>)
 810816e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108170:	f003 0307 	and.w	r3, r3, #7
 8108174:	2b05      	cmp	r3, #5
 8108176:	d827      	bhi.n	81081c8 <UART_SetConfig+0x274>
 8108178:	a201      	add	r2, pc, #4	; (adr r2, 8108180 <UART_SetConfig+0x22c>)
 810817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810817e:	bf00      	nop
 8108180:	08108199 	.word	0x08108199
 8108184:	081081a1 	.word	0x081081a1
 8108188:	081081a9 	.word	0x081081a9
 810818c:	081081b1 	.word	0x081081b1
 8108190:	081081b9 	.word	0x081081b9
 8108194:	081081c1 	.word	0x081081c1
 8108198:	2300      	movs	r3, #0
 810819a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810819e:	e1c1      	b.n	8108524 <UART_SetConfig+0x5d0>
 81081a0:	2304      	movs	r3, #4
 81081a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081a6:	e1bd      	b.n	8108524 <UART_SetConfig+0x5d0>
 81081a8:	2308      	movs	r3, #8
 81081aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081ae:	e1b9      	b.n	8108524 <UART_SetConfig+0x5d0>
 81081b0:	2310      	movs	r3, #16
 81081b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081b6:	e1b5      	b.n	8108524 <UART_SetConfig+0x5d0>
 81081b8:	2320      	movs	r3, #32
 81081ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081be:	e1b1      	b.n	8108524 <UART_SetConfig+0x5d0>
 81081c0:	2340      	movs	r3, #64	; 0x40
 81081c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081c6:	e1ad      	b.n	8108524 <UART_SetConfig+0x5d0>
 81081c8:	2380      	movs	r3, #128	; 0x80
 81081ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81081ce:	bf00      	nop
 81081d0:	e1a8      	b.n	8108524 <UART_SetConfig+0x5d0>
 81081d2:	687b      	ldr	r3, [r7, #4]
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	4a36      	ldr	r2, [pc, #216]	; (81082b0 <UART_SetConfig+0x35c>)
 81081d8:	4293      	cmp	r3, r2
 81081da:	d132      	bne.n	8108242 <UART_SetConfig+0x2ee>
 81081dc:	4b31      	ldr	r3, [pc, #196]	; (81082a4 <UART_SetConfig+0x350>)
 81081de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81081e0:	f003 0307 	and.w	r3, r3, #7
 81081e4:	2b05      	cmp	r3, #5
 81081e6:	d827      	bhi.n	8108238 <UART_SetConfig+0x2e4>
 81081e8:	a201      	add	r2, pc, #4	; (adr r2, 81081f0 <UART_SetConfig+0x29c>)
 81081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081ee:	bf00      	nop
 81081f0:	08108209 	.word	0x08108209
 81081f4:	08108211 	.word	0x08108211
 81081f8:	08108219 	.word	0x08108219
 81081fc:	08108221 	.word	0x08108221
 8108200:	08108229 	.word	0x08108229
 8108204:	08108231 	.word	0x08108231
 8108208:	2300      	movs	r3, #0
 810820a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810820e:	e189      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108210:	2304      	movs	r3, #4
 8108212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108216:	e185      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108218:	2308      	movs	r3, #8
 810821a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810821e:	e181      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108220:	2310      	movs	r3, #16
 8108222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108226:	e17d      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108228:	2320      	movs	r3, #32
 810822a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810822e:	e179      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108230:	2340      	movs	r3, #64	; 0x40
 8108232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108236:	e175      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108238:	2380      	movs	r3, #128	; 0x80
 810823a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810823e:	bf00      	nop
 8108240:	e170      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	681b      	ldr	r3, [r3, #0]
 8108246:	4a1b      	ldr	r2, [pc, #108]	; (81082b4 <UART_SetConfig+0x360>)
 8108248:	4293      	cmp	r3, r2
 810824a:	d142      	bne.n	81082d2 <UART_SetConfig+0x37e>
 810824c:	4b15      	ldr	r3, [pc, #84]	; (81082a4 <UART_SetConfig+0x350>)
 810824e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108250:	f003 0307 	and.w	r3, r3, #7
 8108254:	2b05      	cmp	r3, #5
 8108256:	d837      	bhi.n	81082c8 <UART_SetConfig+0x374>
 8108258:	a201      	add	r2, pc, #4	; (adr r2, 8108260 <UART_SetConfig+0x30c>)
 810825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810825e:	bf00      	nop
 8108260:	08108279 	.word	0x08108279
 8108264:	08108281 	.word	0x08108281
 8108268:	08108289 	.word	0x08108289
 810826c:	08108291 	.word	0x08108291
 8108270:	081082b9 	.word	0x081082b9
 8108274:	081082c1 	.word	0x081082c1
 8108278:	2300      	movs	r3, #0
 810827a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810827e:	e151      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108280:	2304      	movs	r3, #4
 8108282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108286:	e14d      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108288:	2308      	movs	r3, #8
 810828a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810828e:	e149      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108290:	2310      	movs	r3, #16
 8108292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108296:	e145      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108298:	cfff69f3 	.word	0xcfff69f3
 810829c:	58000c00 	.word	0x58000c00
 81082a0:	40011000 	.word	0x40011000
 81082a4:	58024400 	.word	0x58024400
 81082a8:	40004400 	.word	0x40004400
 81082ac:	40004800 	.word	0x40004800
 81082b0:	40004c00 	.word	0x40004c00
 81082b4:	40005000 	.word	0x40005000
 81082b8:	2320      	movs	r3, #32
 81082ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082be:	e131      	b.n	8108524 <UART_SetConfig+0x5d0>
 81082c0:	2340      	movs	r3, #64	; 0x40
 81082c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082c6:	e12d      	b.n	8108524 <UART_SetConfig+0x5d0>
 81082c8:	2380      	movs	r3, #128	; 0x80
 81082ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81082ce:	bf00      	nop
 81082d0:	e128      	b.n	8108524 <UART_SetConfig+0x5d0>
 81082d2:	687b      	ldr	r3, [r7, #4]
 81082d4:	681b      	ldr	r3, [r3, #0]
 81082d6:	4ab6      	ldr	r2, [pc, #728]	; (81085b0 <UART_SetConfig+0x65c>)
 81082d8:	4293      	cmp	r3, r2
 81082da:	d178      	bne.n	81083ce <UART_SetConfig+0x47a>
 81082dc:	4bb5      	ldr	r3, [pc, #724]	; (81085b4 <UART_SetConfig+0x660>)
 81082de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81082e4:	2b28      	cmp	r3, #40	; 0x28
 81082e6:	d86d      	bhi.n	81083c4 <UART_SetConfig+0x470>
 81082e8:	a201      	add	r2, pc, #4	; (adr r2, 81082f0 <UART_SetConfig+0x39c>)
 81082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082ee:	bf00      	nop
 81082f0:	08108395 	.word	0x08108395
 81082f4:	081083c5 	.word	0x081083c5
 81082f8:	081083c5 	.word	0x081083c5
 81082fc:	081083c5 	.word	0x081083c5
 8108300:	081083c5 	.word	0x081083c5
 8108304:	081083c5 	.word	0x081083c5
 8108308:	081083c5 	.word	0x081083c5
 810830c:	081083c5 	.word	0x081083c5
 8108310:	0810839d 	.word	0x0810839d
 8108314:	081083c5 	.word	0x081083c5
 8108318:	081083c5 	.word	0x081083c5
 810831c:	081083c5 	.word	0x081083c5
 8108320:	081083c5 	.word	0x081083c5
 8108324:	081083c5 	.word	0x081083c5
 8108328:	081083c5 	.word	0x081083c5
 810832c:	081083c5 	.word	0x081083c5
 8108330:	081083a5 	.word	0x081083a5
 8108334:	081083c5 	.word	0x081083c5
 8108338:	081083c5 	.word	0x081083c5
 810833c:	081083c5 	.word	0x081083c5
 8108340:	081083c5 	.word	0x081083c5
 8108344:	081083c5 	.word	0x081083c5
 8108348:	081083c5 	.word	0x081083c5
 810834c:	081083c5 	.word	0x081083c5
 8108350:	081083ad 	.word	0x081083ad
 8108354:	081083c5 	.word	0x081083c5
 8108358:	081083c5 	.word	0x081083c5
 810835c:	081083c5 	.word	0x081083c5
 8108360:	081083c5 	.word	0x081083c5
 8108364:	081083c5 	.word	0x081083c5
 8108368:	081083c5 	.word	0x081083c5
 810836c:	081083c5 	.word	0x081083c5
 8108370:	081083b5 	.word	0x081083b5
 8108374:	081083c5 	.word	0x081083c5
 8108378:	081083c5 	.word	0x081083c5
 810837c:	081083c5 	.word	0x081083c5
 8108380:	081083c5 	.word	0x081083c5
 8108384:	081083c5 	.word	0x081083c5
 8108388:	081083c5 	.word	0x081083c5
 810838c:	081083c5 	.word	0x081083c5
 8108390:	081083bd 	.word	0x081083bd
 8108394:	2301      	movs	r3, #1
 8108396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810839a:	e0c3      	b.n	8108524 <UART_SetConfig+0x5d0>
 810839c:	2304      	movs	r3, #4
 810839e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083a2:	e0bf      	b.n	8108524 <UART_SetConfig+0x5d0>
 81083a4:	2308      	movs	r3, #8
 81083a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083aa:	e0bb      	b.n	8108524 <UART_SetConfig+0x5d0>
 81083ac:	2310      	movs	r3, #16
 81083ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083b2:	e0b7      	b.n	8108524 <UART_SetConfig+0x5d0>
 81083b4:	2320      	movs	r3, #32
 81083b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083ba:	e0b3      	b.n	8108524 <UART_SetConfig+0x5d0>
 81083bc:	2340      	movs	r3, #64	; 0x40
 81083be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083c2:	e0af      	b.n	8108524 <UART_SetConfig+0x5d0>
 81083c4:	2380      	movs	r3, #128	; 0x80
 81083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083ca:	bf00      	nop
 81083cc:	e0aa      	b.n	8108524 <UART_SetConfig+0x5d0>
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	681b      	ldr	r3, [r3, #0]
 81083d2:	4a79      	ldr	r2, [pc, #484]	; (81085b8 <UART_SetConfig+0x664>)
 81083d4:	4293      	cmp	r3, r2
 81083d6:	d132      	bne.n	810843e <UART_SetConfig+0x4ea>
 81083d8:	4b76      	ldr	r3, [pc, #472]	; (81085b4 <UART_SetConfig+0x660>)
 81083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81083dc:	f003 0307 	and.w	r3, r3, #7
 81083e0:	2b05      	cmp	r3, #5
 81083e2:	d827      	bhi.n	8108434 <UART_SetConfig+0x4e0>
 81083e4:	a201      	add	r2, pc, #4	; (adr r2, 81083ec <UART_SetConfig+0x498>)
 81083e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083ea:	bf00      	nop
 81083ec:	08108405 	.word	0x08108405
 81083f0:	0810840d 	.word	0x0810840d
 81083f4:	08108415 	.word	0x08108415
 81083f8:	0810841d 	.word	0x0810841d
 81083fc:	08108425 	.word	0x08108425
 8108400:	0810842d 	.word	0x0810842d
 8108404:	2300      	movs	r3, #0
 8108406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810840a:	e08b      	b.n	8108524 <UART_SetConfig+0x5d0>
 810840c:	2304      	movs	r3, #4
 810840e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108412:	e087      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108414:	2308      	movs	r3, #8
 8108416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810841a:	e083      	b.n	8108524 <UART_SetConfig+0x5d0>
 810841c:	2310      	movs	r3, #16
 810841e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108422:	e07f      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108424:	2320      	movs	r3, #32
 8108426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810842a:	e07b      	b.n	8108524 <UART_SetConfig+0x5d0>
 810842c:	2340      	movs	r3, #64	; 0x40
 810842e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108432:	e077      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108434:	2380      	movs	r3, #128	; 0x80
 8108436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810843a:	bf00      	nop
 810843c:	e072      	b.n	8108524 <UART_SetConfig+0x5d0>
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	681b      	ldr	r3, [r3, #0]
 8108442:	4a5e      	ldr	r2, [pc, #376]	; (81085bc <UART_SetConfig+0x668>)
 8108444:	4293      	cmp	r3, r2
 8108446:	d132      	bne.n	81084ae <UART_SetConfig+0x55a>
 8108448:	4b5a      	ldr	r3, [pc, #360]	; (81085b4 <UART_SetConfig+0x660>)
 810844a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810844c:	f003 0307 	and.w	r3, r3, #7
 8108450:	2b05      	cmp	r3, #5
 8108452:	d827      	bhi.n	81084a4 <UART_SetConfig+0x550>
 8108454:	a201      	add	r2, pc, #4	; (adr r2, 810845c <UART_SetConfig+0x508>)
 8108456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810845a:	bf00      	nop
 810845c:	08108475 	.word	0x08108475
 8108460:	0810847d 	.word	0x0810847d
 8108464:	08108485 	.word	0x08108485
 8108468:	0810848d 	.word	0x0810848d
 810846c:	08108495 	.word	0x08108495
 8108470:	0810849d 	.word	0x0810849d
 8108474:	2300      	movs	r3, #0
 8108476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810847a:	e053      	b.n	8108524 <UART_SetConfig+0x5d0>
 810847c:	2304      	movs	r3, #4
 810847e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108482:	e04f      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108484:	2308      	movs	r3, #8
 8108486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810848a:	e04b      	b.n	8108524 <UART_SetConfig+0x5d0>
 810848c:	2310      	movs	r3, #16
 810848e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108492:	e047      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108494:	2320      	movs	r3, #32
 8108496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810849a:	e043      	b.n	8108524 <UART_SetConfig+0x5d0>
 810849c:	2340      	movs	r3, #64	; 0x40
 810849e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084a2:	e03f      	b.n	8108524 <UART_SetConfig+0x5d0>
 81084a4:	2380      	movs	r3, #128	; 0x80
 81084a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084aa:	bf00      	nop
 81084ac:	e03a      	b.n	8108524 <UART_SetConfig+0x5d0>
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	681b      	ldr	r3, [r3, #0]
 81084b2:	4a43      	ldr	r2, [pc, #268]	; (81085c0 <UART_SetConfig+0x66c>)
 81084b4:	4293      	cmp	r3, r2
 81084b6:	d132      	bne.n	810851e <UART_SetConfig+0x5ca>
 81084b8:	4b3e      	ldr	r3, [pc, #248]	; (81085b4 <UART_SetConfig+0x660>)
 81084ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084bc:	f003 0307 	and.w	r3, r3, #7
 81084c0:	2b05      	cmp	r3, #5
 81084c2:	d827      	bhi.n	8108514 <UART_SetConfig+0x5c0>
 81084c4:	a201      	add	r2, pc, #4	; (adr r2, 81084cc <UART_SetConfig+0x578>)
 81084c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084ca:	bf00      	nop
 81084cc:	081084e5 	.word	0x081084e5
 81084d0:	081084ed 	.word	0x081084ed
 81084d4:	081084f5 	.word	0x081084f5
 81084d8:	081084fd 	.word	0x081084fd
 81084dc:	08108505 	.word	0x08108505
 81084e0:	0810850d 	.word	0x0810850d
 81084e4:	2302      	movs	r3, #2
 81084e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084ea:	e01b      	b.n	8108524 <UART_SetConfig+0x5d0>
 81084ec:	2304      	movs	r3, #4
 81084ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084f2:	e017      	b.n	8108524 <UART_SetConfig+0x5d0>
 81084f4:	2308      	movs	r3, #8
 81084f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084fa:	e013      	b.n	8108524 <UART_SetConfig+0x5d0>
 81084fc:	2310      	movs	r3, #16
 81084fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108502:	e00f      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108504:	2320      	movs	r3, #32
 8108506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810850a:	e00b      	b.n	8108524 <UART_SetConfig+0x5d0>
 810850c:	2340      	movs	r3, #64	; 0x40
 810850e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108512:	e007      	b.n	8108524 <UART_SetConfig+0x5d0>
 8108514:	2380      	movs	r3, #128	; 0x80
 8108516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810851a:	bf00      	nop
 810851c:	e002      	b.n	8108524 <UART_SetConfig+0x5d0>
 810851e:	2380      	movs	r3, #128	; 0x80
 8108520:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108524:	687b      	ldr	r3, [r7, #4]
 8108526:	681b      	ldr	r3, [r3, #0]
 8108528:	4a25      	ldr	r2, [pc, #148]	; (81085c0 <UART_SetConfig+0x66c>)
 810852a:	4293      	cmp	r3, r2
 810852c:	f040 80b8 	bne.w	81086a0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108534:	2b08      	cmp	r3, #8
 8108536:	d019      	beq.n	810856c <UART_SetConfig+0x618>
 8108538:	2b08      	cmp	r3, #8
 810853a:	dc04      	bgt.n	8108546 <UART_SetConfig+0x5f2>
 810853c:	2b02      	cmp	r3, #2
 810853e:	d009      	beq.n	8108554 <UART_SetConfig+0x600>
 8108540:	2b04      	cmp	r3, #4
 8108542:	d00b      	beq.n	810855c <UART_SetConfig+0x608>
 8108544:	e042      	b.n	81085cc <UART_SetConfig+0x678>
 8108546:	2b20      	cmp	r3, #32
 8108548:	d02b      	beq.n	81085a2 <UART_SetConfig+0x64e>
 810854a:	2b40      	cmp	r3, #64	; 0x40
 810854c:	d02c      	beq.n	81085a8 <UART_SetConfig+0x654>
 810854e:	2b10      	cmp	r3, #16
 8108550:	d014      	beq.n	810857c <UART_SetConfig+0x628>
 8108552:	e03b      	b.n	81085cc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108554:	f7fe fa56 	bl	8106a04 <HAL_RCCEx_GetD3PCLK1Freq>
 8108558:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810855a:	e03d      	b.n	81085d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810855c:	f107 0314 	add.w	r3, r7, #20
 8108560:	4618      	mov	r0, r3
 8108562:	f7fe fa65 	bl	8106a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108566:	69bb      	ldr	r3, [r7, #24]
 8108568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810856a:	e035      	b.n	81085d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810856c:	f107 0308 	add.w	r3, r7, #8
 8108570:	4618      	mov	r0, r3
 8108572:	f7fe fba9 	bl	8106cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108576:	68fb      	ldr	r3, [r7, #12]
 8108578:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810857a:	e02d      	b.n	81085d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810857c:	4b0d      	ldr	r3, [pc, #52]	; (81085b4 <UART_SetConfig+0x660>)
 810857e:	681b      	ldr	r3, [r3, #0]
 8108580:	f003 0320 	and.w	r3, r3, #32
 8108584:	2b00      	cmp	r3, #0
 8108586:	d009      	beq.n	810859c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108588:	4b0a      	ldr	r3, [pc, #40]	; (81085b4 <UART_SetConfig+0x660>)
 810858a:	681b      	ldr	r3, [r3, #0]
 810858c:	08db      	lsrs	r3, r3, #3
 810858e:	f003 0303 	and.w	r3, r3, #3
 8108592:	4a0c      	ldr	r2, [pc, #48]	; (81085c4 <UART_SetConfig+0x670>)
 8108594:	fa22 f303 	lsr.w	r3, r2, r3
 8108598:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810859a:	e01d      	b.n	81085d8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 810859c:	4b09      	ldr	r3, [pc, #36]	; (81085c4 <UART_SetConfig+0x670>)
 810859e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81085a0:	e01a      	b.n	81085d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81085a2:	4b09      	ldr	r3, [pc, #36]	; (81085c8 <UART_SetConfig+0x674>)
 81085a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81085a6:	e017      	b.n	81085d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81085a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81085ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81085ae:	e013      	b.n	81085d8 <UART_SetConfig+0x684>
 81085b0:	40011400 	.word	0x40011400
 81085b4:	58024400 	.word	0x58024400
 81085b8:	40007800 	.word	0x40007800
 81085bc:	40007c00 	.word	0x40007c00
 81085c0:	58000c00 	.word	0x58000c00
 81085c4:	03d09000 	.word	0x03d09000
 81085c8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 81085cc:	2300      	movs	r3, #0
 81085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81085d0:	2301      	movs	r3, #1
 81085d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81085d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81085da:	2b00      	cmp	r3, #0
 81085dc:	f000 824d 	beq.w	8108a7a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81085e0:	687b      	ldr	r3, [r7, #4]
 81085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81085e4:	4aad      	ldr	r2, [pc, #692]	; (810889c <UART_SetConfig+0x948>)
 81085e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81085ea:	461a      	mov	r2, r3
 81085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81085ee:	fbb3 f3f2 	udiv	r3, r3, r2
 81085f2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81085f4:	687b      	ldr	r3, [r7, #4]
 81085f6:	685a      	ldr	r2, [r3, #4]
 81085f8:	4613      	mov	r3, r2
 81085fa:	005b      	lsls	r3, r3, #1
 81085fc:	4413      	add	r3, r2
 81085fe:	6a3a      	ldr	r2, [r7, #32]
 8108600:	429a      	cmp	r2, r3
 8108602:	d305      	bcc.n	8108610 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	685b      	ldr	r3, [r3, #4]
 8108608:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810860a:	6a3a      	ldr	r2, [r7, #32]
 810860c:	429a      	cmp	r2, r3
 810860e:	d903      	bls.n	8108618 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8108610:	2301      	movs	r3, #1
 8108612:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8108616:	e230      	b.n	8108a7a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810861a:	4618      	mov	r0, r3
 810861c:	f04f 0100 	mov.w	r1, #0
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108624:	4a9d      	ldr	r2, [pc, #628]	; (810889c <UART_SetConfig+0x948>)
 8108626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810862a:	b29b      	uxth	r3, r3
 810862c:	f04f 0400 	mov.w	r4, #0
 8108630:	461a      	mov	r2, r3
 8108632:	4623      	mov	r3, r4
 8108634:	f7f8 fbe0 	bl	8100df8 <__aeabi_uldivmod>
 8108638:	4603      	mov	r3, r0
 810863a:	460c      	mov	r4, r1
 810863c:	4619      	mov	r1, r3
 810863e:	4622      	mov	r2, r4
 8108640:	f04f 0300 	mov.w	r3, #0
 8108644:	f04f 0400 	mov.w	r4, #0
 8108648:	0214      	lsls	r4, r2, #8
 810864a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 810864e:	020b      	lsls	r3, r1, #8
 8108650:	687a      	ldr	r2, [r7, #4]
 8108652:	6852      	ldr	r2, [r2, #4]
 8108654:	0852      	lsrs	r2, r2, #1
 8108656:	4611      	mov	r1, r2
 8108658:	f04f 0200 	mov.w	r2, #0
 810865c:	eb13 0b01 	adds.w	fp, r3, r1
 8108660:	eb44 0c02 	adc.w	ip, r4, r2
 8108664:	4658      	mov	r0, fp
 8108666:	4661      	mov	r1, ip
 8108668:	687b      	ldr	r3, [r7, #4]
 810866a:	685b      	ldr	r3, [r3, #4]
 810866c:	f04f 0400 	mov.w	r4, #0
 8108670:	461a      	mov	r2, r3
 8108672:	4623      	mov	r3, r4
 8108674:	f7f8 fbc0 	bl	8100df8 <__aeabi_uldivmod>
 8108678:	4603      	mov	r3, r0
 810867a:	460c      	mov	r4, r1
 810867c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108684:	d308      	bcc.n	8108698 <UART_SetConfig+0x744>
 8108686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810868c:	d204      	bcs.n	8108698 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 810868e:	687b      	ldr	r3, [r7, #4]
 8108690:	681b      	ldr	r3, [r3, #0]
 8108692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108694:	60da      	str	r2, [r3, #12]
 8108696:	e1f0      	b.n	8108a7a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8108698:	2301      	movs	r3, #1
 810869a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810869e:	e1ec      	b.n	8108a7a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81086a0:	687b      	ldr	r3, [r7, #4]
 81086a2:	69db      	ldr	r3, [r3, #28]
 81086a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81086a8:	f040 8100 	bne.w	81088ac <UART_SetConfig+0x958>
  {
    switch (clocksource)
 81086ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81086b0:	2b40      	cmp	r3, #64	; 0x40
 81086b2:	f200 80b7 	bhi.w	8108824 <UART_SetConfig+0x8d0>
 81086b6:	a201      	add	r2, pc, #4	; (adr r2, 81086bc <UART_SetConfig+0x768>)
 81086b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81086bc:	081087c1 	.word	0x081087c1
 81086c0:	081087c9 	.word	0x081087c9
 81086c4:	08108825 	.word	0x08108825
 81086c8:	08108825 	.word	0x08108825
 81086cc:	081087d1 	.word	0x081087d1
 81086d0:	08108825 	.word	0x08108825
 81086d4:	08108825 	.word	0x08108825
 81086d8:	08108825 	.word	0x08108825
 81086dc:	081087e1 	.word	0x081087e1
 81086e0:	08108825 	.word	0x08108825
 81086e4:	08108825 	.word	0x08108825
 81086e8:	08108825 	.word	0x08108825
 81086ec:	08108825 	.word	0x08108825
 81086f0:	08108825 	.word	0x08108825
 81086f4:	08108825 	.word	0x08108825
 81086f8:	08108825 	.word	0x08108825
 81086fc:	081087f1 	.word	0x081087f1
 8108700:	08108825 	.word	0x08108825
 8108704:	08108825 	.word	0x08108825
 8108708:	08108825 	.word	0x08108825
 810870c:	08108825 	.word	0x08108825
 8108710:	08108825 	.word	0x08108825
 8108714:	08108825 	.word	0x08108825
 8108718:	08108825 	.word	0x08108825
 810871c:	08108825 	.word	0x08108825
 8108720:	08108825 	.word	0x08108825
 8108724:	08108825 	.word	0x08108825
 8108728:	08108825 	.word	0x08108825
 810872c:	08108825 	.word	0x08108825
 8108730:	08108825 	.word	0x08108825
 8108734:	08108825 	.word	0x08108825
 8108738:	08108825 	.word	0x08108825
 810873c:	08108817 	.word	0x08108817
 8108740:	08108825 	.word	0x08108825
 8108744:	08108825 	.word	0x08108825
 8108748:	08108825 	.word	0x08108825
 810874c:	08108825 	.word	0x08108825
 8108750:	08108825 	.word	0x08108825
 8108754:	08108825 	.word	0x08108825
 8108758:	08108825 	.word	0x08108825
 810875c:	08108825 	.word	0x08108825
 8108760:	08108825 	.word	0x08108825
 8108764:	08108825 	.word	0x08108825
 8108768:	08108825 	.word	0x08108825
 810876c:	08108825 	.word	0x08108825
 8108770:	08108825 	.word	0x08108825
 8108774:	08108825 	.word	0x08108825
 8108778:	08108825 	.word	0x08108825
 810877c:	08108825 	.word	0x08108825
 8108780:	08108825 	.word	0x08108825
 8108784:	08108825 	.word	0x08108825
 8108788:	08108825 	.word	0x08108825
 810878c:	08108825 	.word	0x08108825
 8108790:	08108825 	.word	0x08108825
 8108794:	08108825 	.word	0x08108825
 8108798:	08108825 	.word	0x08108825
 810879c:	08108825 	.word	0x08108825
 81087a0:	08108825 	.word	0x08108825
 81087a4:	08108825 	.word	0x08108825
 81087a8:	08108825 	.word	0x08108825
 81087ac:	08108825 	.word	0x08108825
 81087b0:	08108825 	.word	0x08108825
 81087b4:	08108825 	.word	0x08108825
 81087b8:	08108825 	.word	0x08108825
 81087bc:	0810881d 	.word	0x0810881d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81087c0:	f7fe f8b2 	bl	8106928 <HAL_RCC_GetPCLK1Freq>
 81087c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81087c6:	e033      	b.n	8108830 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81087c8:	f7fe f8c4 	bl	8106954 <HAL_RCC_GetPCLK2Freq>
 81087cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81087ce:	e02f      	b.n	8108830 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81087d0:	f107 0314 	add.w	r3, r7, #20
 81087d4:	4618      	mov	r0, r3
 81087d6:	f7fe f92b 	bl	8106a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81087da:	69bb      	ldr	r3, [r7, #24]
 81087dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81087de:	e027      	b.n	8108830 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81087e0:	f107 0308 	add.w	r3, r7, #8
 81087e4:	4618      	mov	r0, r3
 81087e6:	f7fe fa6f 	bl	8106cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81087ea:	68fb      	ldr	r3, [r7, #12]
 81087ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81087ee:	e01f      	b.n	8108830 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81087f0:	4b2b      	ldr	r3, [pc, #172]	; (81088a0 <UART_SetConfig+0x94c>)
 81087f2:	681b      	ldr	r3, [r3, #0]
 81087f4:	f003 0320 	and.w	r3, r3, #32
 81087f8:	2b00      	cmp	r3, #0
 81087fa:	d009      	beq.n	8108810 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81087fc:	4b28      	ldr	r3, [pc, #160]	; (81088a0 <UART_SetConfig+0x94c>)
 81087fe:	681b      	ldr	r3, [r3, #0]
 8108800:	08db      	lsrs	r3, r3, #3
 8108802:	f003 0303 	and.w	r3, r3, #3
 8108806:	4a27      	ldr	r2, [pc, #156]	; (81088a4 <UART_SetConfig+0x950>)
 8108808:	fa22 f303 	lsr.w	r3, r2, r3
 810880c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810880e:	e00f      	b.n	8108830 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8108810:	4b24      	ldr	r3, [pc, #144]	; (81088a4 <UART_SetConfig+0x950>)
 8108812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108814:	e00c      	b.n	8108830 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108816:	4b24      	ldr	r3, [pc, #144]	; (81088a8 <UART_SetConfig+0x954>)
 8108818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810881a:	e009      	b.n	8108830 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810881c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108822:	e005      	b.n	8108830 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8108824:	2300      	movs	r3, #0
 8108826:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108828:	2301      	movs	r3, #1
 810882a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810882e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108832:	2b00      	cmp	r3, #0
 8108834:	f000 8121 	beq.w	8108a7a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810883c:	4a17      	ldr	r2, [pc, #92]	; (810889c <UART_SetConfig+0x948>)
 810883e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108842:	461a      	mov	r2, r3
 8108844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108846:	fbb3 f3f2 	udiv	r3, r3, r2
 810884a:	005a      	lsls	r2, r3, #1
 810884c:	687b      	ldr	r3, [r7, #4]
 810884e:	685b      	ldr	r3, [r3, #4]
 8108850:	085b      	lsrs	r3, r3, #1
 8108852:	441a      	add	r2, r3
 8108854:	687b      	ldr	r3, [r7, #4]
 8108856:	685b      	ldr	r3, [r3, #4]
 8108858:	fbb2 f3f3 	udiv	r3, r2, r3
 810885c:	b29b      	uxth	r3, r3
 810885e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108862:	2b0f      	cmp	r3, #15
 8108864:	d916      	bls.n	8108894 <UART_SetConfig+0x940>
 8108866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810886c:	d212      	bcs.n	8108894 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108870:	b29b      	uxth	r3, r3
 8108872:	f023 030f 	bic.w	r3, r3, #15
 8108876:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810887a:	085b      	lsrs	r3, r3, #1
 810887c:	b29b      	uxth	r3, r3
 810887e:	f003 0307 	and.w	r3, r3, #7
 8108882:	b29a      	uxth	r2, r3
 8108884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8108886:	4313      	orrs	r3, r2
 8108888:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810888a:	687b      	ldr	r3, [r7, #4]
 810888c:	681b      	ldr	r3, [r3, #0]
 810888e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8108890:	60da      	str	r2, [r3, #12]
 8108892:	e0f2      	b.n	8108a7a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8108894:	2301      	movs	r3, #1
 8108896:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810889a:	e0ee      	b.n	8108a7a <UART_SetConfig+0xb26>
 810889c:	0811195c 	.word	0x0811195c
 81088a0:	58024400 	.word	0x58024400
 81088a4:	03d09000 	.word	0x03d09000
 81088a8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 81088ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81088b0:	2b40      	cmp	r3, #64	; 0x40
 81088b2:	f200 80b7 	bhi.w	8108a24 <UART_SetConfig+0xad0>
 81088b6:	a201      	add	r2, pc, #4	; (adr r2, 81088bc <UART_SetConfig+0x968>)
 81088b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088bc:	081089c1 	.word	0x081089c1
 81088c0:	081089c9 	.word	0x081089c9
 81088c4:	08108a25 	.word	0x08108a25
 81088c8:	08108a25 	.word	0x08108a25
 81088cc:	081089d1 	.word	0x081089d1
 81088d0:	08108a25 	.word	0x08108a25
 81088d4:	08108a25 	.word	0x08108a25
 81088d8:	08108a25 	.word	0x08108a25
 81088dc:	081089e1 	.word	0x081089e1
 81088e0:	08108a25 	.word	0x08108a25
 81088e4:	08108a25 	.word	0x08108a25
 81088e8:	08108a25 	.word	0x08108a25
 81088ec:	08108a25 	.word	0x08108a25
 81088f0:	08108a25 	.word	0x08108a25
 81088f4:	08108a25 	.word	0x08108a25
 81088f8:	08108a25 	.word	0x08108a25
 81088fc:	081089f1 	.word	0x081089f1
 8108900:	08108a25 	.word	0x08108a25
 8108904:	08108a25 	.word	0x08108a25
 8108908:	08108a25 	.word	0x08108a25
 810890c:	08108a25 	.word	0x08108a25
 8108910:	08108a25 	.word	0x08108a25
 8108914:	08108a25 	.word	0x08108a25
 8108918:	08108a25 	.word	0x08108a25
 810891c:	08108a25 	.word	0x08108a25
 8108920:	08108a25 	.word	0x08108a25
 8108924:	08108a25 	.word	0x08108a25
 8108928:	08108a25 	.word	0x08108a25
 810892c:	08108a25 	.word	0x08108a25
 8108930:	08108a25 	.word	0x08108a25
 8108934:	08108a25 	.word	0x08108a25
 8108938:	08108a25 	.word	0x08108a25
 810893c:	08108a17 	.word	0x08108a17
 8108940:	08108a25 	.word	0x08108a25
 8108944:	08108a25 	.word	0x08108a25
 8108948:	08108a25 	.word	0x08108a25
 810894c:	08108a25 	.word	0x08108a25
 8108950:	08108a25 	.word	0x08108a25
 8108954:	08108a25 	.word	0x08108a25
 8108958:	08108a25 	.word	0x08108a25
 810895c:	08108a25 	.word	0x08108a25
 8108960:	08108a25 	.word	0x08108a25
 8108964:	08108a25 	.word	0x08108a25
 8108968:	08108a25 	.word	0x08108a25
 810896c:	08108a25 	.word	0x08108a25
 8108970:	08108a25 	.word	0x08108a25
 8108974:	08108a25 	.word	0x08108a25
 8108978:	08108a25 	.word	0x08108a25
 810897c:	08108a25 	.word	0x08108a25
 8108980:	08108a25 	.word	0x08108a25
 8108984:	08108a25 	.word	0x08108a25
 8108988:	08108a25 	.word	0x08108a25
 810898c:	08108a25 	.word	0x08108a25
 8108990:	08108a25 	.word	0x08108a25
 8108994:	08108a25 	.word	0x08108a25
 8108998:	08108a25 	.word	0x08108a25
 810899c:	08108a25 	.word	0x08108a25
 81089a0:	08108a25 	.word	0x08108a25
 81089a4:	08108a25 	.word	0x08108a25
 81089a8:	08108a25 	.word	0x08108a25
 81089ac:	08108a25 	.word	0x08108a25
 81089b0:	08108a25 	.word	0x08108a25
 81089b4:	08108a25 	.word	0x08108a25
 81089b8:	08108a25 	.word	0x08108a25
 81089bc:	08108a1d 	.word	0x08108a1d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81089c0:	f7fd ffb2 	bl	8106928 <HAL_RCC_GetPCLK1Freq>
 81089c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81089c6:	e033      	b.n	8108a30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81089c8:	f7fd ffc4 	bl	8106954 <HAL_RCC_GetPCLK2Freq>
 81089cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81089ce:	e02f      	b.n	8108a30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81089d0:	f107 0314 	add.w	r3, r7, #20
 81089d4:	4618      	mov	r0, r3
 81089d6:	f7fe f82b 	bl	8106a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81089da:	69bb      	ldr	r3, [r7, #24]
 81089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81089de:	e027      	b.n	8108a30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81089e0:	f107 0308 	add.w	r3, r7, #8
 81089e4:	4618      	mov	r0, r3
 81089e6:	f7fe f96f 	bl	8106cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81089ea:	68fb      	ldr	r3, [r7, #12]
 81089ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81089ee:	e01f      	b.n	8108a30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81089f0:	4b2c      	ldr	r3, [pc, #176]	; (8108aa4 <UART_SetConfig+0xb50>)
 81089f2:	681b      	ldr	r3, [r3, #0]
 81089f4:	f003 0320 	and.w	r3, r3, #32
 81089f8:	2b00      	cmp	r3, #0
 81089fa:	d009      	beq.n	8108a10 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81089fc:	4b29      	ldr	r3, [pc, #164]	; (8108aa4 <UART_SetConfig+0xb50>)
 81089fe:	681b      	ldr	r3, [r3, #0]
 8108a00:	08db      	lsrs	r3, r3, #3
 8108a02:	f003 0303 	and.w	r3, r3, #3
 8108a06:	4a28      	ldr	r2, [pc, #160]	; (8108aa8 <UART_SetConfig+0xb54>)
 8108a08:	fa22 f303 	lsr.w	r3, r2, r3
 8108a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108a0e:	e00f      	b.n	8108a30 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8108a10:	4b25      	ldr	r3, [pc, #148]	; (8108aa8 <UART_SetConfig+0xb54>)
 8108a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a14:	e00c      	b.n	8108a30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108a16:	4b25      	ldr	r3, [pc, #148]	; (8108aac <UART_SetConfig+0xb58>)
 8108a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a1a:	e009      	b.n	8108a30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a22:	e005      	b.n	8108a30 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8108a24:	2300      	movs	r3, #0
 8108a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108a28:	2301      	movs	r3, #1
 8108a2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108a2e:	bf00      	nop
    }

    if (pclk != 0U)
 8108a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108a32:	2b00      	cmp	r3, #0
 8108a34:	d021      	beq.n	8108a7a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108a36:	687b      	ldr	r3, [r7, #4]
 8108a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a3a:	4a1d      	ldr	r2, [pc, #116]	; (8108ab0 <UART_SetConfig+0xb5c>)
 8108a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108a40:	461a      	mov	r2, r3
 8108a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108a44:	fbb3 f2f2 	udiv	r2, r3, r2
 8108a48:	687b      	ldr	r3, [r7, #4]
 8108a4a:	685b      	ldr	r3, [r3, #4]
 8108a4c:	085b      	lsrs	r3, r3, #1
 8108a4e:	441a      	add	r2, r3
 8108a50:	687b      	ldr	r3, [r7, #4]
 8108a52:	685b      	ldr	r3, [r3, #4]
 8108a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a58:	b29b      	uxth	r3, r3
 8108a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a5e:	2b0f      	cmp	r3, #15
 8108a60:	d908      	bls.n	8108a74 <UART_SetConfig+0xb20>
 8108a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108a68:	d204      	bcs.n	8108a74 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	681b      	ldr	r3, [r3, #0]
 8108a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108a70:	60da      	str	r2, [r3, #12]
 8108a72:	e002      	b.n	8108a7a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8108a74:	2301      	movs	r3, #1
 8108a76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	2201      	movs	r2, #1
 8108a7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108a82:	687b      	ldr	r3, [r7, #4]
 8108a84:	2201      	movs	r2, #1
 8108a86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108a8a:	687b      	ldr	r3, [r7, #4]
 8108a8c:	2200      	movs	r2, #0
 8108a8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8108a90:	687b      	ldr	r3, [r7, #4]
 8108a92:	2200      	movs	r2, #0
 8108a94:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8108a96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8108a9a:	4618      	mov	r0, r3
 8108a9c:	3738      	adds	r7, #56	; 0x38
 8108a9e:	46bd      	mov	sp, r7
 8108aa0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8108aa4:	58024400 	.word	0x58024400
 8108aa8:	03d09000 	.word	0x03d09000
 8108aac:	003d0900 	.word	0x003d0900
 8108ab0:	0811195c 	.word	0x0811195c

08108ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108ab4:	b480      	push	{r7}
 8108ab6:	b083      	sub	sp, #12
 8108ab8:	af00      	add	r7, sp, #0
 8108aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108ac0:	f003 0301 	and.w	r3, r3, #1
 8108ac4:	2b00      	cmp	r3, #0
 8108ac6:	d00a      	beq.n	8108ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108ac8:	687b      	ldr	r3, [r7, #4]
 8108aca:	681b      	ldr	r3, [r3, #0]
 8108acc:	685b      	ldr	r3, [r3, #4]
 8108ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108ad2:	687b      	ldr	r3, [r7, #4]
 8108ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108ad6:	687b      	ldr	r3, [r7, #4]
 8108ad8:	681b      	ldr	r3, [r3, #0]
 8108ada:	430a      	orrs	r2, r1
 8108adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108ade:	687b      	ldr	r3, [r7, #4]
 8108ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108ae2:	f003 0302 	and.w	r3, r3, #2
 8108ae6:	2b00      	cmp	r3, #0
 8108ae8:	d00a      	beq.n	8108b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	681b      	ldr	r3, [r3, #0]
 8108aee:	685b      	ldr	r3, [r3, #4]
 8108af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108af4:	687b      	ldr	r3, [r7, #4]
 8108af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108af8:	687b      	ldr	r3, [r7, #4]
 8108afa:	681b      	ldr	r3, [r3, #0]
 8108afc:	430a      	orrs	r2, r1
 8108afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108b00:	687b      	ldr	r3, [r7, #4]
 8108b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b04:	f003 0304 	and.w	r3, r3, #4
 8108b08:	2b00      	cmp	r3, #0
 8108b0a:	d00a      	beq.n	8108b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108b0c:	687b      	ldr	r3, [r7, #4]
 8108b0e:	681b      	ldr	r3, [r3, #0]
 8108b10:	685b      	ldr	r3, [r3, #4]
 8108b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108b1a:	687b      	ldr	r3, [r7, #4]
 8108b1c:	681b      	ldr	r3, [r3, #0]
 8108b1e:	430a      	orrs	r2, r1
 8108b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108b22:	687b      	ldr	r3, [r7, #4]
 8108b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b26:	f003 0308 	and.w	r3, r3, #8
 8108b2a:	2b00      	cmp	r3, #0
 8108b2c:	d00a      	beq.n	8108b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108b2e:	687b      	ldr	r3, [r7, #4]
 8108b30:	681b      	ldr	r3, [r3, #0]
 8108b32:	685b      	ldr	r3, [r3, #4]
 8108b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108b38:	687b      	ldr	r3, [r7, #4]
 8108b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108b3c:	687b      	ldr	r3, [r7, #4]
 8108b3e:	681b      	ldr	r3, [r3, #0]
 8108b40:	430a      	orrs	r2, r1
 8108b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108b44:	687b      	ldr	r3, [r7, #4]
 8108b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b48:	f003 0310 	and.w	r3, r3, #16
 8108b4c:	2b00      	cmp	r3, #0
 8108b4e:	d00a      	beq.n	8108b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108b50:	687b      	ldr	r3, [r7, #4]
 8108b52:	681b      	ldr	r3, [r3, #0]
 8108b54:	689b      	ldr	r3, [r3, #8]
 8108b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108b5a:	687b      	ldr	r3, [r7, #4]
 8108b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108b5e:	687b      	ldr	r3, [r7, #4]
 8108b60:	681b      	ldr	r3, [r3, #0]
 8108b62:	430a      	orrs	r2, r1
 8108b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108b66:	687b      	ldr	r3, [r7, #4]
 8108b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b6a:	f003 0320 	and.w	r3, r3, #32
 8108b6e:	2b00      	cmp	r3, #0
 8108b70:	d00a      	beq.n	8108b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108b72:	687b      	ldr	r3, [r7, #4]
 8108b74:	681b      	ldr	r3, [r3, #0]
 8108b76:	689b      	ldr	r3, [r3, #8]
 8108b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108b7c:	687b      	ldr	r3, [r7, #4]
 8108b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108b80:	687b      	ldr	r3, [r7, #4]
 8108b82:	681b      	ldr	r3, [r3, #0]
 8108b84:	430a      	orrs	r2, r1
 8108b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108b88:	687b      	ldr	r3, [r7, #4]
 8108b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108b90:	2b00      	cmp	r3, #0
 8108b92:	d01a      	beq.n	8108bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	681b      	ldr	r3, [r3, #0]
 8108b98:	685b      	ldr	r3, [r3, #4]
 8108b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108b9e:	687b      	ldr	r3, [r7, #4]
 8108ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108ba2:	687b      	ldr	r3, [r7, #4]
 8108ba4:	681b      	ldr	r3, [r3, #0]
 8108ba6:	430a      	orrs	r2, r1
 8108ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108baa:	687b      	ldr	r3, [r7, #4]
 8108bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108bb2:	d10a      	bne.n	8108bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108bb4:	687b      	ldr	r3, [r7, #4]
 8108bb6:	681b      	ldr	r3, [r3, #0]
 8108bb8:	685b      	ldr	r3, [r3, #4]
 8108bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108bbe:	687b      	ldr	r3, [r7, #4]
 8108bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108bc2:	687b      	ldr	r3, [r7, #4]
 8108bc4:	681b      	ldr	r3, [r3, #0]
 8108bc6:	430a      	orrs	r2, r1
 8108bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108bca:	687b      	ldr	r3, [r7, #4]
 8108bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108bd2:	2b00      	cmp	r3, #0
 8108bd4:	d00a      	beq.n	8108bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108bd6:	687b      	ldr	r3, [r7, #4]
 8108bd8:	681b      	ldr	r3, [r3, #0]
 8108bda:	685b      	ldr	r3, [r3, #4]
 8108bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108be0:	687b      	ldr	r3, [r7, #4]
 8108be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108be4:	687b      	ldr	r3, [r7, #4]
 8108be6:	681b      	ldr	r3, [r3, #0]
 8108be8:	430a      	orrs	r2, r1
 8108bea:	605a      	str	r2, [r3, #4]
  }
}
 8108bec:	bf00      	nop
 8108bee:	370c      	adds	r7, #12
 8108bf0:	46bd      	mov	sp, r7
 8108bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bf6:	4770      	bx	lr

08108bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108bf8:	b580      	push	{r7, lr}
 8108bfa:	b086      	sub	sp, #24
 8108bfc:	af02      	add	r7, sp, #8
 8108bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108c00:	687b      	ldr	r3, [r7, #4]
 8108c02:	2200      	movs	r2, #0
 8108c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8108c08:	f7f9 fa54 	bl	81020b4 <HAL_GetTick>
 8108c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108c0e:	687b      	ldr	r3, [r7, #4]
 8108c10:	681b      	ldr	r3, [r3, #0]
 8108c12:	681b      	ldr	r3, [r3, #0]
 8108c14:	f003 0308 	and.w	r3, r3, #8
 8108c18:	2b08      	cmp	r3, #8
 8108c1a:	d10e      	bne.n	8108c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108c20:	9300      	str	r3, [sp, #0]
 8108c22:	68fb      	ldr	r3, [r7, #12]
 8108c24:	2200      	movs	r2, #0
 8108c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108c2a:	6878      	ldr	r0, [r7, #4]
 8108c2c:	f000 f82c 	bl	8108c88 <UART_WaitOnFlagUntilTimeout>
 8108c30:	4603      	mov	r3, r0
 8108c32:	2b00      	cmp	r3, #0
 8108c34:	d001      	beq.n	8108c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108c36:	2303      	movs	r3, #3
 8108c38:	e022      	b.n	8108c80 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108c3a:	687b      	ldr	r3, [r7, #4]
 8108c3c:	681b      	ldr	r3, [r3, #0]
 8108c3e:	681b      	ldr	r3, [r3, #0]
 8108c40:	f003 0304 	and.w	r3, r3, #4
 8108c44:	2b04      	cmp	r3, #4
 8108c46:	d10e      	bne.n	8108c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108c4c:	9300      	str	r3, [sp, #0]
 8108c4e:	68fb      	ldr	r3, [r7, #12]
 8108c50:	2200      	movs	r2, #0
 8108c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108c56:	6878      	ldr	r0, [r7, #4]
 8108c58:	f000 f816 	bl	8108c88 <UART_WaitOnFlagUntilTimeout>
 8108c5c:	4603      	mov	r3, r0
 8108c5e:	2b00      	cmp	r3, #0
 8108c60:	d001      	beq.n	8108c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108c62:	2303      	movs	r3, #3
 8108c64:	e00c      	b.n	8108c80 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108c66:	687b      	ldr	r3, [r7, #4]
 8108c68:	2220      	movs	r2, #32
 8108c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	2220      	movs	r2, #32
 8108c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8108c76:	687b      	ldr	r3, [r7, #4]
 8108c78:	2200      	movs	r2, #0
 8108c7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108c7e:	2300      	movs	r3, #0
}
 8108c80:	4618      	mov	r0, r3
 8108c82:	3710      	adds	r7, #16
 8108c84:	46bd      	mov	sp, r7
 8108c86:	bd80      	pop	{r7, pc}

08108c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108c88:	b580      	push	{r7, lr}
 8108c8a:	b084      	sub	sp, #16
 8108c8c:	af00      	add	r7, sp, #0
 8108c8e:	60f8      	str	r0, [r7, #12]
 8108c90:	60b9      	str	r1, [r7, #8]
 8108c92:	603b      	str	r3, [r7, #0]
 8108c94:	4613      	mov	r3, r2
 8108c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108c98:	e062      	b.n	8108d60 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108c9a:	69bb      	ldr	r3, [r7, #24]
 8108c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108ca0:	d05e      	beq.n	8108d60 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108ca2:	f7f9 fa07 	bl	81020b4 <HAL_GetTick>
 8108ca6:	4602      	mov	r2, r0
 8108ca8:	683b      	ldr	r3, [r7, #0]
 8108caa:	1ad3      	subs	r3, r2, r3
 8108cac:	69ba      	ldr	r2, [r7, #24]
 8108cae:	429a      	cmp	r2, r3
 8108cb0:	d302      	bcc.n	8108cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8108cb2:	69bb      	ldr	r3, [r7, #24]
 8108cb4:	2b00      	cmp	r3, #0
 8108cb6:	d11d      	bne.n	8108cf4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108cb8:	68fb      	ldr	r3, [r7, #12]
 8108cba:	681b      	ldr	r3, [r3, #0]
 8108cbc:	681a      	ldr	r2, [r3, #0]
 8108cbe:	68fb      	ldr	r3, [r7, #12]
 8108cc0:	681b      	ldr	r3, [r3, #0]
 8108cc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108cc6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108cc8:	68fb      	ldr	r3, [r7, #12]
 8108cca:	681b      	ldr	r3, [r3, #0]
 8108ccc:	689a      	ldr	r2, [r3, #8]
 8108cce:	68fb      	ldr	r3, [r7, #12]
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	f022 0201 	bic.w	r2, r2, #1
 8108cd6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8108cd8:	68fb      	ldr	r3, [r7, #12]
 8108cda:	2220      	movs	r2, #32
 8108cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8108ce0:	68fb      	ldr	r3, [r7, #12]
 8108ce2:	2220      	movs	r2, #32
 8108ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8108ce8:	68fb      	ldr	r3, [r7, #12]
 8108cea:	2200      	movs	r2, #0
 8108cec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8108cf0:	2303      	movs	r3, #3
 8108cf2:	e045      	b.n	8108d80 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108cf4:	68fb      	ldr	r3, [r7, #12]
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	681b      	ldr	r3, [r3, #0]
 8108cfa:	f003 0304 	and.w	r3, r3, #4
 8108cfe:	2b00      	cmp	r3, #0
 8108d00:	d02e      	beq.n	8108d60 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108d02:	68fb      	ldr	r3, [r7, #12]
 8108d04:	681b      	ldr	r3, [r3, #0]
 8108d06:	69db      	ldr	r3, [r3, #28]
 8108d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108d10:	d126      	bne.n	8108d60 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108d12:	68fb      	ldr	r3, [r7, #12]
 8108d14:	681b      	ldr	r3, [r3, #0]
 8108d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108d1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108d1c:	68fb      	ldr	r3, [r7, #12]
 8108d1e:	681b      	ldr	r3, [r3, #0]
 8108d20:	681a      	ldr	r2, [r3, #0]
 8108d22:	68fb      	ldr	r3, [r7, #12]
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108d2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108d2c:	68fb      	ldr	r3, [r7, #12]
 8108d2e:	681b      	ldr	r3, [r3, #0]
 8108d30:	689a      	ldr	r2, [r3, #8]
 8108d32:	68fb      	ldr	r3, [r7, #12]
 8108d34:	681b      	ldr	r3, [r3, #0]
 8108d36:	f022 0201 	bic.w	r2, r2, #1
 8108d3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8108d3c:	68fb      	ldr	r3, [r7, #12]
 8108d3e:	2220      	movs	r2, #32
 8108d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8108d44:	68fb      	ldr	r3, [r7, #12]
 8108d46:	2220      	movs	r2, #32
 8108d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108d4c:	68fb      	ldr	r3, [r7, #12]
 8108d4e:	2220      	movs	r2, #32
 8108d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108d54:	68fb      	ldr	r3, [r7, #12]
 8108d56:	2200      	movs	r2, #0
 8108d58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8108d5c:	2303      	movs	r3, #3
 8108d5e:	e00f      	b.n	8108d80 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108d60:	68fb      	ldr	r3, [r7, #12]
 8108d62:	681b      	ldr	r3, [r3, #0]
 8108d64:	69da      	ldr	r2, [r3, #28]
 8108d66:	68bb      	ldr	r3, [r7, #8]
 8108d68:	4013      	ands	r3, r2
 8108d6a:	68ba      	ldr	r2, [r7, #8]
 8108d6c:	429a      	cmp	r2, r3
 8108d6e:	bf0c      	ite	eq
 8108d70:	2301      	moveq	r3, #1
 8108d72:	2300      	movne	r3, #0
 8108d74:	b2db      	uxtb	r3, r3
 8108d76:	461a      	mov	r2, r3
 8108d78:	79fb      	ldrb	r3, [r7, #7]
 8108d7a:	429a      	cmp	r2, r3
 8108d7c:	d08d      	beq.n	8108c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108d7e:	2300      	movs	r3, #0
}
 8108d80:	4618      	mov	r0, r3
 8108d82:	3710      	adds	r7, #16
 8108d84:	46bd      	mov	sp, r7
 8108d86:	bd80      	pop	{r7, pc}

08108d88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8108d88:	b480      	push	{r7}
 8108d8a:	b083      	sub	sp, #12
 8108d8c:	af00      	add	r7, sp, #0
 8108d8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8108d90:	687b      	ldr	r3, [r7, #4]
 8108d92:	681b      	ldr	r3, [r3, #0]
 8108d94:	681a      	ldr	r2, [r3, #0]
 8108d96:	687b      	ldr	r3, [r7, #4]
 8108d98:	681b      	ldr	r3, [r3, #0]
 8108d9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8108d9e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8108da0:	687b      	ldr	r3, [r7, #4]
 8108da2:	681b      	ldr	r3, [r3, #0]
 8108da4:	689a      	ldr	r2, [r3, #8]
 8108da6:	687b      	ldr	r3, [r7, #4]
 8108da8:	681b      	ldr	r3, [r3, #0]
 8108daa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8108dae:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8108db0:	687b      	ldr	r3, [r7, #4]
 8108db2:	2220      	movs	r2, #32
 8108db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8108db8:	bf00      	nop
 8108dba:	370c      	adds	r7, #12
 8108dbc:	46bd      	mov	sp, r7
 8108dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dc2:	4770      	bx	lr

08108dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108dc4:	b480      	push	{r7}
 8108dc6:	b083      	sub	sp, #12
 8108dc8:	af00      	add	r7, sp, #0
 8108dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108dcc:	687b      	ldr	r3, [r7, #4]
 8108dce:	681b      	ldr	r3, [r3, #0]
 8108dd0:	681a      	ldr	r2, [r3, #0]
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8108dda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108ddc:	687b      	ldr	r3, [r7, #4]
 8108dde:	681b      	ldr	r3, [r3, #0]
 8108de0:	689b      	ldr	r3, [r3, #8]
 8108de2:	687a      	ldr	r2, [r7, #4]
 8108de4:	6812      	ldr	r2, [r2, #0]
 8108de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108dea:	f023 0301 	bic.w	r3, r3, #1
 8108dee:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108df0:	687b      	ldr	r3, [r7, #4]
 8108df2:	2220      	movs	r2, #32
 8108df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108df8:	687b      	ldr	r3, [r7, #4]
 8108dfa:	2200      	movs	r2, #0
 8108dfc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8108dfe:	bf00      	nop
 8108e00:	370c      	adds	r7, #12
 8108e02:	46bd      	mov	sp, r7
 8108e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e08:	4770      	bx	lr

08108e0a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8108e0a:	b580      	push	{r7, lr}
 8108e0c:	b084      	sub	sp, #16
 8108e0e:	af00      	add	r7, sp, #0
 8108e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108e12:	687b      	ldr	r3, [r7, #4]
 8108e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108e16:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8108e18:	687b      	ldr	r3, [r7, #4]
 8108e1a:	69db      	ldr	r3, [r3, #28]
 8108e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108e20:	d01f      	beq.n	8108e62 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8108e22:	68fb      	ldr	r3, [r7, #12]
 8108e24:	2200      	movs	r2, #0
 8108e26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108e2a:	68fb      	ldr	r3, [r7, #12]
 8108e2c:	681b      	ldr	r3, [r3, #0]
 8108e2e:	681a      	ldr	r2, [r3, #0]
 8108e30:	68fb      	ldr	r3, [r7, #12]
 8108e32:	681b      	ldr	r3, [r3, #0]
 8108e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8108e38:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108e3a:	68fb      	ldr	r3, [r7, #12]
 8108e3c:	681b      	ldr	r3, [r3, #0]
 8108e3e:	689a      	ldr	r2, [r3, #8]
 8108e40:	68fb      	ldr	r3, [r7, #12]
 8108e42:	681b      	ldr	r3, [r3, #0]
 8108e44:	f022 0201 	bic.w	r2, r2, #1
 8108e48:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108e4a:	68fb      	ldr	r3, [r7, #12]
 8108e4c:	681b      	ldr	r3, [r3, #0]
 8108e4e:	689a      	ldr	r2, [r3, #8]
 8108e50:	68fb      	ldr	r3, [r7, #12]
 8108e52:	681b      	ldr	r3, [r3, #0]
 8108e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8108e58:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8108e5a:	68fb      	ldr	r3, [r7, #12]
 8108e5c:	2220      	movs	r2, #32
 8108e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8108e62:	68f8      	ldr	r0, [r7, #12]
 8108e64:	f7ff f858 	bl	8107f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108e68:	bf00      	nop
 8108e6a:	3710      	adds	r7, #16
 8108e6c:	46bd      	mov	sp, r7
 8108e6e:	bd80      	pop	{r7, pc}

08108e70 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8108e70:	b580      	push	{r7, lr}
 8108e72:	b084      	sub	sp, #16
 8108e74:	af00      	add	r7, sp, #0
 8108e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108e78:	687b      	ldr	r3, [r7, #4]
 8108e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108e7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8108e7e:	68f8      	ldr	r0, [r7, #12]
 8108e80:	f7ff f854 	bl	8107f2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108e84:	bf00      	nop
 8108e86:	3710      	adds	r7, #16
 8108e88:	46bd      	mov	sp, r7
 8108e8a:	bd80      	pop	{r7, pc}

08108e8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8108e8c:	b580      	push	{r7, lr}
 8108e8e:	b086      	sub	sp, #24
 8108e90:	af00      	add	r7, sp, #0
 8108e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108e94:	687b      	ldr	r3, [r7, #4]
 8108e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108e98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8108e9a:	697b      	ldr	r3, [r7, #20]
 8108e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108ea0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8108ea2:	697b      	ldr	r3, [r7, #20]
 8108ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108ea8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8108eaa:	697b      	ldr	r3, [r7, #20]
 8108eac:	681b      	ldr	r3, [r3, #0]
 8108eae:	689b      	ldr	r3, [r3, #8]
 8108eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108eb4:	2b80      	cmp	r3, #128	; 0x80
 8108eb6:	d109      	bne.n	8108ecc <UART_DMAError+0x40>
 8108eb8:	693b      	ldr	r3, [r7, #16]
 8108eba:	2b21      	cmp	r3, #33	; 0x21
 8108ebc:	d106      	bne.n	8108ecc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8108ebe:	697b      	ldr	r3, [r7, #20]
 8108ec0:	2200      	movs	r2, #0
 8108ec2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8108ec6:	6978      	ldr	r0, [r7, #20]
 8108ec8:	f7ff ff5e 	bl	8108d88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8108ecc:	697b      	ldr	r3, [r7, #20]
 8108ece:	681b      	ldr	r3, [r3, #0]
 8108ed0:	689b      	ldr	r3, [r3, #8]
 8108ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108ed6:	2b40      	cmp	r3, #64	; 0x40
 8108ed8:	d109      	bne.n	8108eee <UART_DMAError+0x62>
 8108eda:	68fb      	ldr	r3, [r7, #12]
 8108edc:	2b22      	cmp	r3, #34	; 0x22
 8108ede:	d106      	bne.n	8108eee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8108ee0:	697b      	ldr	r3, [r7, #20]
 8108ee2:	2200      	movs	r2, #0
 8108ee4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8108ee8:	6978      	ldr	r0, [r7, #20]
 8108eea:	f7ff ff6b 	bl	8108dc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8108eee:	697b      	ldr	r3, [r7, #20]
 8108ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108ef4:	f043 0210 	orr.w	r2, r3, #16
 8108ef8:	697b      	ldr	r3, [r7, #20]
 8108efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8108efe:	6978      	ldr	r0, [r7, #20]
 8108f00:	f7ff f81e 	bl	8107f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108f04:	bf00      	nop
 8108f06:	3718      	adds	r7, #24
 8108f08:	46bd      	mov	sp, r7
 8108f0a:	bd80      	pop	{r7, pc}

08108f0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108f0c:	b480      	push	{r7}
 8108f0e:	b085      	sub	sp, #20
 8108f10:	af00      	add	r7, sp, #0
 8108f12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108f1a:	2b01      	cmp	r3, #1
 8108f1c:	d101      	bne.n	8108f22 <HAL_UARTEx_DisableFifoMode+0x16>
 8108f1e:	2302      	movs	r3, #2
 8108f20:	e027      	b.n	8108f72 <HAL_UARTEx_DisableFifoMode+0x66>
 8108f22:	687b      	ldr	r3, [r7, #4]
 8108f24:	2201      	movs	r2, #1
 8108f26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108f2a:	687b      	ldr	r3, [r7, #4]
 8108f2c:	2224      	movs	r2, #36	; 0x24
 8108f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108f32:	687b      	ldr	r3, [r7, #4]
 8108f34:	681b      	ldr	r3, [r3, #0]
 8108f36:	681b      	ldr	r3, [r3, #0]
 8108f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108f3a:	687b      	ldr	r3, [r7, #4]
 8108f3c:	681b      	ldr	r3, [r3, #0]
 8108f3e:	681a      	ldr	r2, [r3, #0]
 8108f40:	687b      	ldr	r3, [r7, #4]
 8108f42:	681b      	ldr	r3, [r3, #0]
 8108f44:	f022 0201 	bic.w	r2, r2, #1
 8108f48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108f4a:	68fb      	ldr	r3, [r7, #12]
 8108f4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108f50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108f52:	687b      	ldr	r3, [r7, #4]
 8108f54:	2200      	movs	r2, #0
 8108f56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108f58:	687b      	ldr	r3, [r7, #4]
 8108f5a:	681b      	ldr	r3, [r3, #0]
 8108f5c:	68fa      	ldr	r2, [r7, #12]
 8108f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108f60:	687b      	ldr	r3, [r7, #4]
 8108f62:	2220      	movs	r2, #32
 8108f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108f68:	687b      	ldr	r3, [r7, #4]
 8108f6a:	2200      	movs	r2, #0
 8108f6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108f70:	2300      	movs	r3, #0
}
 8108f72:	4618      	mov	r0, r3
 8108f74:	3714      	adds	r7, #20
 8108f76:	46bd      	mov	sp, r7
 8108f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f7c:	4770      	bx	lr

08108f7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108f7e:	b580      	push	{r7, lr}
 8108f80:	b084      	sub	sp, #16
 8108f82:	af00      	add	r7, sp, #0
 8108f84:	6078      	str	r0, [r7, #4]
 8108f86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108f88:	687b      	ldr	r3, [r7, #4]
 8108f8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108f8e:	2b01      	cmp	r3, #1
 8108f90:	d101      	bne.n	8108f96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108f92:	2302      	movs	r3, #2
 8108f94:	e02d      	b.n	8108ff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108f96:	687b      	ldr	r3, [r7, #4]
 8108f98:	2201      	movs	r2, #1
 8108f9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108f9e:	687b      	ldr	r3, [r7, #4]
 8108fa0:	2224      	movs	r2, #36	; 0x24
 8108fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108fa6:	687b      	ldr	r3, [r7, #4]
 8108fa8:	681b      	ldr	r3, [r3, #0]
 8108faa:	681b      	ldr	r3, [r3, #0]
 8108fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108fae:	687b      	ldr	r3, [r7, #4]
 8108fb0:	681b      	ldr	r3, [r3, #0]
 8108fb2:	681a      	ldr	r2, [r3, #0]
 8108fb4:	687b      	ldr	r3, [r7, #4]
 8108fb6:	681b      	ldr	r3, [r3, #0]
 8108fb8:	f022 0201 	bic.w	r2, r2, #1
 8108fbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108fbe:	687b      	ldr	r3, [r7, #4]
 8108fc0:	681b      	ldr	r3, [r3, #0]
 8108fc2:	689b      	ldr	r3, [r3, #8]
 8108fc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	681b      	ldr	r3, [r3, #0]
 8108fcc:	683a      	ldr	r2, [r7, #0]
 8108fce:	430a      	orrs	r2, r1
 8108fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108fd2:	6878      	ldr	r0, [r7, #4]
 8108fd4:	f000 f850 	bl	8109078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108fd8:	687b      	ldr	r3, [r7, #4]
 8108fda:	681b      	ldr	r3, [r3, #0]
 8108fdc:	68fa      	ldr	r2, [r7, #12]
 8108fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108fe0:	687b      	ldr	r3, [r7, #4]
 8108fe2:	2220      	movs	r2, #32
 8108fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	2200      	movs	r2, #0
 8108fec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108ff0:	2300      	movs	r3, #0
}
 8108ff2:	4618      	mov	r0, r3
 8108ff4:	3710      	adds	r7, #16
 8108ff6:	46bd      	mov	sp, r7
 8108ff8:	bd80      	pop	{r7, pc}

08108ffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108ffa:	b580      	push	{r7, lr}
 8108ffc:	b084      	sub	sp, #16
 8108ffe:	af00      	add	r7, sp, #0
 8109000:	6078      	str	r0, [r7, #4]
 8109002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109004:	687b      	ldr	r3, [r7, #4]
 8109006:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810900a:	2b01      	cmp	r3, #1
 810900c:	d101      	bne.n	8109012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810900e:	2302      	movs	r3, #2
 8109010:	e02d      	b.n	810906e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	2201      	movs	r2, #1
 8109016:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810901a:	687b      	ldr	r3, [r7, #4]
 810901c:	2224      	movs	r2, #36	; 0x24
 810901e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109022:	687b      	ldr	r3, [r7, #4]
 8109024:	681b      	ldr	r3, [r3, #0]
 8109026:	681b      	ldr	r3, [r3, #0]
 8109028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810902a:	687b      	ldr	r3, [r7, #4]
 810902c:	681b      	ldr	r3, [r3, #0]
 810902e:	681a      	ldr	r2, [r3, #0]
 8109030:	687b      	ldr	r3, [r7, #4]
 8109032:	681b      	ldr	r3, [r3, #0]
 8109034:	f022 0201 	bic.w	r2, r2, #1
 8109038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810903a:	687b      	ldr	r3, [r7, #4]
 810903c:	681b      	ldr	r3, [r3, #0]
 810903e:	689b      	ldr	r3, [r3, #8]
 8109040:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8109044:	687b      	ldr	r3, [r7, #4]
 8109046:	681b      	ldr	r3, [r3, #0]
 8109048:	683a      	ldr	r2, [r7, #0]
 810904a:	430a      	orrs	r2, r1
 810904c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810904e:	6878      	ldr	r0, [r7, #4]
 8109050:	f000 f812 	bl	8109078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109054:	687b      	ldr	r3, [r7, #4]
 8109056:	681b      	ldr	r3, [r3, #0]
 8109058:	68fa      	ldr	r2, [r7, #12]
 810905a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810905c:	687b      	ldr	r3, [r7, #4]
 810905e:	2220      	movs	r2, #32
 8109060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109064:	687b      	ldr	r3, [r7, #4]
 8109066:	2200      	movs	r2, #0
 8109068:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810906c:	2300      	movs	r3, #0
}
 810906e:	4618      	mov	r0, r3
 8109070:	3710      	adds	r7, #16
 8109072:	46bd      	mov	sp, r7
 8109074:	bd80      	pop	{r7, pc}
	...

08109078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109078:	b480      	push	{r7}
 810907a:	b089      	sub	sp, #36	; 0x24
 810907c:	af00      	add	r7, sp, #0
 810907e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8109080:	4a2f      	ldr	r2, [pc, #188]	; (8109140 <UARTEx_SetNbDataToProcess+0xc8>)
 8109082:	f107 0314 	add.w	r3, r7, #20
 8109086:	e892 0003 	ldmia.w	r2, {r0, r1}
 810908a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 810908e:	4a2d      	ldr	r2, [pc, #180]	; (8109144 <UARTEx_SetNbDataToProcess+0xcc>)
 8109090:	f107 030c 	add.w	r3, r7, #12
 8109094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8109098:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810909c:	687b      	ldr	r3, [r7, #4]
 810909e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81090a0:	2b00      	cmp	r3, #0
 81090a2:	d108      	bne.n	81090b6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 81090a4:	687b      	ldr	r3, [r7, #4]
 81090a6:	2201      	movs	r2, #1
 81090a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81090ac:	687b      	ldr	r3, [r7, #4]
 81090ae:	2201      	movs	r2, #1
 81090b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81090b4:	e03d      	b.n	8109132 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81090b6:	2310      	movs	r3, #16
 81090b8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81090ba:	2310      	movs	r3, #16
 81090bc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81090be:	687b      	ldr	r3, [r7, #4]
 81090c0:	681b      	ldr	r3, [r3, #0]
 81090c2:	689b      	ldr	r3, [r3, #8]
 81090c4:	0e5b      	lsrs	r3, r3, #25
 81090c6:	b2db      	uxtb	r3, r3
 81090c8:	f003 0307 	and.w	r3, r3, #7
 81090cc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	681b      	ldr	r3, [r3, #0]
 81090d2:	689b      	ldr	r3, [r3, #8]
 81090d4:	0f5b      	lsrs	r3, r3, #29
 81090d6:	b2db      	uxtb	r3, r3
 81090d8:	f003 0307 	and.w	r3, r3, #7
 81090dc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 81090de:	7fbb      	ldrb	r3, [r7, #30]
 81090e0:	7f3a      	ldrb	r2, [r7, #28]
 81090e2:	f107 0120 	add.w	r1, r7, #32
 81090e6:	440a      	add	r2, r1
 81090e8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81090ec:	fb02 f303 	mul.w	r3, r2, r3
 81090f0:	7f3a      	ldrb	r2, [r7, #28]
 81090f2:	f107 0120 	add.w	r1, r7, #32
 81090f6:	440a      	add	r2, r1
 81090f8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81090fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8109100:	b29a      	uxth	r2, r3
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8109108:	7ffb      	ldrb	r3, [r7, #31]
 810910a:	7f7a      	ldrb	r2, [r7, #29]
 810910c:	f107 0120 	add.w	r1, r7, #32
 8109110:	440a      	add	r2, r1
 8109112:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8109116:	fb02 f303 	mul.w	r3, r2, r3
 810911a:	7f7a      	ldrb	r2, [r7, #29]
 810911c:	f107 0120 	add.w	r1, r7, #32
 8109120:	440a      	add	r2, r1
 8109122:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8109126:	fb93 f3f2 	sdiv	r3, r3, r2
 810912a:	b29a      	uxth	r2, r3
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109132:	bf00      	nop
 8109134:	3724      	adds	r7, #36	; 0x24
 8109136:	46bd      	mov	sp, r7
 8109138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810913c:	4770      	bx	lr
 810913e:	bf00      	nop
 8109140:	081112f4 	.word	0x081112f4
 8109144:	081112fc 	.word	0x081112fc

08109148 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8109148:	b580      	push	{r7, lr}
 810914a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 810914c:	4904      	ldr	r1, [pc, #16]	; (8109160 <MX_FATFS_Init+0x18>)
 810914e:	4805      	ldr	r0, [pc, #20]	; (8109164 <MX_FATFS_Init+0x1c>)
 8109150:	f000 f8b0 	bl	81092b4 <FATFS_LinkDriver>
 8109154:	4603      	mov	r3, r0
 8109156:	461a      	mov	r2, r3
 8109158:	4b03      	ldr	r3, [pc, #12]	; (8109168 <MX_FATFS_Init+0x20>)
 810915a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 810915c:	bf00      	nop
 810915e:	bd80      	pop	{r7, pc}
 8109160:	10005d1c 	.word	0x10005d1c
 8109164:	10000010 	.word	0x10000010
 8109168:	10005d20 	.word	0x10005d20

0810916c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 810916c:	b480      	push	{r7}
 810916e:	b083      	sub	sp, #12
 8109170:	af00      	add	r7, sp, #0
 8109172:	4603      	mov	r3, r0
 8109174:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8109176:	4b06      	ldr	r3, [pc, #24]	; (8109190 <USER_initialize+0x24>)
 8109178:	2201      	movs	r2, #1
 810917a:	701a      	strb	r2, [r3, #0]
    return Stat;
 810917c:	4b04      	ldr	r3, [pc, #16]	; (8109190 <USER_initialize+0x24>)
 810917e:	781b      	ldrb	r3, [r3, #0]
 8109180:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8109182:	4618      	mov	r0, r3
 8109184:	370c      	adds	r7, #12
 8109186:	46bd      	mov	sp, r7
 8109188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810918c:	4770      	bx	lr
 810918e:	bf00      	nop
 8109190:	1000000d 	.word	0x1000000d

08109194 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8109194:	b480      	push	{r7}
 8109196:	b083      	sub	sp, #12
 8109198:	af00      	add	r7, sp, #0
 810919a:	4603      	mov	r3, r0
 810919c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 810919e:	4b06      	ldr	r3, [pc, #24]	; (81091b8 <USER_status+0x24>)
 81091a0:	2201      	movs	r2, #1
 81091a2:	701a      	strb	r2, [r3, #0]
    return Stat;
 81091a4:	4b04      	ldr	r3, [pc, #16]	; (81091b8 <USER_status+0x24>)
 81091a6:	781b      	ldrb	r3, [r3, #0]
 81091a8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 81091aa:	4618      	mov	r0, r3
 81091ac:	370c      	adds	r7, #12
 81091ae:	46bd      	mov	sp, r7
 81091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091b4:	4770      	bx	lr
 81091b6:	bf00      	nop
 81091b8:	1000000d 	.word	0x1000000d

081091bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 81091bc:	b480      	push	{r7}
 81091be:	b085      	sub	sp, #20
 81091c0:	af00      	add	r7, sp, #0
 81091c2:	60b9      	str	r1, [r7, #8]
 81091c4:	607a      	str	r2, [r7, #4]
 81091c6:	603b      	str	r3, [r7, #0]
 81091c8:	4603      	mov	r3, r0
 81091ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 81091cc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 81091ce:	4618      	mov	r0, r3
 81091d0:	3714      	adds	r7, #20
 81091d2:	46bd      	mov	sp, r7
 81091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091d8:	4770      	bx	lr

081091da <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 81091da:	b480      	push	{r7}
 81091dc:	b085      	sub	sp, #20
 81091de:	af00      	add	r7, sp, #0
 81091e0:	60b9      	str	r1, [r7, #8]
 81091e2:	607a      	str	r2, [r7, #4]
 81091e4:	603b      	str	r3, [r7, #0]
 81091e6:	4603      	mov	r3, r0
 81091e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 81091ea:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 81091ec:	4618      	mov	r0, r3
 81091ee:	3714      	adds	r7, #20
 81091f0:	46bd      	mov	sp, r7
 81091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091f6:	4770      	bx	lr

081091f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 81091f8:	b480      	push	{r7}
 81091fa:	b085      	sub	sp, #20
 81091fc:	af00      	add	r7, sp, #0
 81091fe:	4603      	mov	r3, r0
 8109200:	603a      	str	r2, [r7, #0]
 8109202:	71fb      	strb	r3, [r7, #7]
 8109204:	460b      	mov	r3, r1
 8109206:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8109208:	2301      	movs	r3, #1
 810920a:	73fb      	strb	r3, [r7, #15]
    return res;
 810920c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 810920e:	4618      	mov	r0, r3
 8109210:	3714      	adds	r7, #20
 8109212:	46bd      	mov	sp, r7
 8109214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109218:	4770      	bx	lr
	...

0810921c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 810921c:	b480      	push	{r7}
 810921e:	b087      	sub	sp, #28
 8109220:	af00      	add	r7, sp, #0
 8109222:	60f8      	str	r0, [r7, #12]
 8109224:	60b9      	str	r1, [r7, #8]
 8109226:	4613      	mov	r3, r2
 8109228:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 810922a:	2301      	movs	r3, #1
 810922c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 810922e:	2300      	movs	r3, #0
 8109230:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8109232:	4b1f      	ldr	r3, [pc, #124]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 8109234:	7a5b      	ldrb	r3, [r3, #9]
 8109236:	b2db      	uxtb	r3, r3
 8109238:	2b00      	cmp	r3, #0
 810923a:	d131      	bne.n	81092a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 810923c:	4b1c      	ldr	r3, [pc, #112]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 810923e:	7a5b      	ldrb	r3, [r3, #9]
 8109240:	b2db      	uxtb	r3, r3
 8109242:	461a      	mov	r2, r3
 8109244:	4b1a      	ldr	r3, [pc, #104]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 8109246:	2100      	movs	r1, #0
 8109248:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 810924a:	4b19      	ldr	r3, [pc, #100]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 810924c:	7a5b      	ldrb	r3, [r3, #9]
 810924e:	b2db      	uxtb	r3, r3
 8109250:	4a17      	ldr	r2, [pc, #92]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 8109252:	009b      	lsls	r3, r3, #2
 8109254:	4413      	add	r3, r2
 8109256:	68fa      	ldr	r2, [r7, #12]
 8109258:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 810925a:	4b15      	ldr	r3, [pc, #84]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 810925c:	7a5b      	ldrb	r3, [r3, #9]
 810925e:	b2db      	uxtb	r3, r3
 8109260:	461a      	mov	r2, r3
 8109262:	4b13      	ldr	r3, [pc, #76]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 8109264:	4413      	add	r3, r2
 8109266:	79fa      	ldrb	r2, [r7, #7]
 8109268:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 810926a:	4b11      	ldr	r3, [pc, #68]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 810926c:	7a5b      	ldrb	r3, [r3, #9]
 810926e:	b2db      	uxtb	r3, r3
 8109270:	1c5a      	adds	r2, r3, #1
 8109272:	b2d1      	uxtb	r1, r2
 8109274:	4a0e      	ldr	r2, [pc, #56]	; (81092b0 <FATFS_LinkDriverEx+0x94>)
 8109276:	7251      	strb	r1, [r2, #9]
 8109278:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 810927a:	7dbb      	ldrb	r3, [r7, #22]
 810927c:	3330      	adds	r3, #48	; 0x30
 810927e:	b2da      	uxtb	r2, r3
 8109280:	68bb      	ldr	r3, [r7, #8]
 8109282:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8109284:	68bb      	ldr	r3, [r7, #8]
 8109286:	3301      	adds	r3, #1
 8109288:	223a      	movs	r2, #58	; 0x3a
 810928a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 810928c:	68bb      	ldr	r3, [r7, #8]
 810928e:	3302      	adds	r3, #2
 8109290:	222f      	movs	r2, #47	; 0x2f
 8109292:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8109294:	68bb      	ldr	r3, [r7, #8]
 8109296:	3303      	adds	r3, #3
 8109298:	2200      	movs	r2, #0
 810929a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 810929c:	2300      	movs	r3, #0
 810929e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 81092a0:	7dfb      	ldrb	r3, [r7, #23]
}
 81092a2:	4618      	mov	r0, r3
 81092a4:	371c      	adds	r7, #28
 81092a6:	46bd      	mov	sp, r7
 81092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092ac:	4770      	bx	lr
 81092ae:	bf00      	nop
 81092b0:	10000228 	.word	0x10000228

081092b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 81092b4:	b580      	push	{r7, lr}
 81092b6:	b082      	sub	sp, #8
 81092b8:	af00      	add	r7, sp, #0
 81092ba:	6078      	str	r0, [r7, #4]
 81092bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 81092be:	2200      	movs	r2, #0
 81092c0:	6839      	ldr	r1, [r7, #0]
 81092c2:	6878      	ldr	r0, [r7, #4]
 81092c4:	f7ff ffaa 	bl	810921c <FATFS_LinkDriverEx>
 81092c8:	4603      	mov	r3, r0
}
 81092ca:	4618      	mov	r0, r3
 81092cc:	3708      	adds	r7, #8
 81092ce:	46bd      	mov	sp, r7
 81092d0:	bd80      	pop	{r7, pc}

081092d2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81092d2:	b480      	push	{r7}
 81092d4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 81092d6:	bf00      	nop
 81092d8:	46bd      	mov	sp, r7
 81092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092de:	4770      	bx	lr

081092e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81092e0:	b480      	push	{r7}
 81092e2:	b085      	sub	sp, #20
 81092e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81092e6:	f3ef 8305 	mrs	r3, IPSR
 81092ea:	60bb      	str	r3, [r7, #8]
  return(result);
 81092ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81092ee:	2b00      	cmp	r3, #0
 81092f0:	d10f      	bne.n	8109312 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81092f2:	f3ef 8310 	mrs	r3, PRIMASK
 81092f6:	607b      	str	r3, [r7, #4]
  return(result);
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	2b00      	cmp	r3, #0
 81092fc:	d105      	bne.n	810930a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81092fe:	f3ef 8311 	mrs	r3, BASEPRI
 8109302:	603b      	str	r3, [r7, #0]
  return(result);
 8109304:	683b      	ldr	r3, [r7, #0]
 8109306:	2b00      	cmp	r3, #0
 8109308:	d007      	beq.n	810931a <osKernelInitialize+0x3a>
 810930a:	4b0e      	ldr	r3, [pc, #56]	; (8109344 <osKernelInitialize+0x64>)
 810930c:	681b      	ldr	r3, [r3, #0]
 810930e:	2b02      	cmp	r3, #2
 8109310:	d103      	bne.n	810931a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8109312:	f06f 0305 	mvn.w	r3, #5
 8109316:	60fb      	str	r3, [r7, #12]
 8109318:	e00c      	b.n	8109334 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 810931a:	4b0a      	ldr	r3, [pc, #40]	; (8109344 <osKernelInitialize+0x64>)
 810931c:	681b      	ldr	r3, [r3, #0]
 810931e:	2b00      	cmp	r3, #0
 8109320:	d105      	bne.n	810932e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8109322:	4b08      	ldr	r3, [pc, #32]	; (8109344 <osKernelInitialize+0x64>)
 8109324:	2201      	movs	r2, #1
 8109326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8109328:	2300      	movs	r3, #0
 810932a:	60fb      	str	r3, [r7, #12]
 810932c:	e002      	b.n	8109334 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 810932e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8109332:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8109334:	68fb      	ldr	r3, [r7, #12]
}
 8109336:	4618      	mov	r0, r3
 8109338:	3714      	adds	r7, #20
 810933a:	46bd      	mov	sp, r7
 810933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109340:	4770      	bx	lr
 8109342:	bf00      	nop
 8109344:	10000234 	.word	0x10000234

08109348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8109348:	b580      	push	{r7, lr}
 810934a:	b084      	sub	sp, #16
 810934c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810934e:	f3ef 8305 	mrs	r3, IPSR
 8109352:	60bb      	str	r3, [r7, #8]
  return(result);
 8109354:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8109356:	2b00      	cmp	r3, #0
 8109358:	d10f      	bne.n	810937a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810935a:	f3ef 8310 	mrs	r3, PRIMASK
 810935e:	607b      	str	r3, [r7, #4]
  return(result);
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	2b00      	cmp	r3, #0
 8109364:	d105      	bne.n	8109372 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8109366:	f3ef 8311 	mrs	r3, BASEPRI
 810936a:	603b      	str	r3, [r7, #0]
  return(result);
 810936c:	683b      	ldr	r3, [r7, #0]
 810936e:	2b00      	cmp	r3, #0
 8109370:	d007      	beq.n	8109382 <osKernelStart+0x3a>
 8109372:	4b0f      	ldr	r3, [pc, #60]	; (81093b0 <osKernelStart+0x68>)
 8109374:	681b      	ldr	r3, [r3, #0]
 8109376:	2b02      	cmp	r3, #2
 8109378:	d103      	bne.n	8109382 <osKernelStart+0x3a>
    stat = osErrorISR;
 810937a:	f06f 0305 	mvn.w	r3, #5
 810937e:	60fb      	str	r3, [r7, #12]
 8109380:	e010      	b.n	81093a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8109382:	4b0b      	ldr	r3, [pc, #44]	; (81093b0 <osKernelStart+0x68>)
 8109384:	681b      	ldr	r3, [r3, #0]
 8109386:	2b01      	cmp	r3, #1
 8109388:	d109      	bne.n	810939e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810938a:	f7ff ffa2 	bl	81092d2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810938e:	4b08      	ldr	r3, [pc, #32]	; (81093b0 <osKernelStart+0x68>)
 8109390:	2202      	movs	r2, #2
 8109392:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8109394:	f001 fe14 	bl	810afc0 <vTaskStartScheduler>
      stat = osOK;
 8109398:	2300      	movs	r3, #0
 810939a:	60fb      	str	r3, [r7, #12]
 810939c:	e002      	b.n	81093a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 810939e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81093a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 81093a4:	68fb      	ldr	r3, [r7, #12]
}
 81093a6:	4618      	mov	r0, r3
 81093a8:	3710      	adds	r7, #16
 81093aa:	46bd      	mov	sp, r7
 81093ac:	bd80      	pop	{r7, pc}
 81093ae:	bf00      	nop
 81093b0:	10000234 	.word	0x10000234

081093b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81093b4:	b580      	push	{r7, lr}
 81093b6:	b090      	sub	sp, #64	; 0x40
 81093b8:	af04      	add	r7, sp, #16
 81093ba:	60f8      	str	r0, [r7, #12]
 81093bc:	60b9      	str	r1, [r7, #8]
 81093be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81093c0:	2300      	movs	r3, #0
 81093c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81093c4:	f3ef 8305 	mrs	r3, IPSR
 81093c8:	61fb      	str	r3, [r7, #28]
  return(result);
 81093ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 81093cc:	2b00      	cmp	r3, #0
 81093ce:	f040 808f 	bne.w	81094f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81093d2:	f3ef 8310 	mrs	r3, PRIMASK
 81093d6:	61bb      	str	r3, [r7, #24]
  return(result);
 81093d8:	69bb      	ldr	r3, [r7, #24]
 81093da:	2b00      	cmp	r3, #0
 81093dc:	d105      	bne.n	81093ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81093de:	f3ef 8311 	mrs	r3, BASEPRI
 81093e2:	617b      	str	r3, [r7, #20]
  return(result);
 81093e4:	697b      	ldr	r3, [r7, #20]
 81093e6:	2b00      	cmp	r3, #0
 81093e8:	d003      	beq.n	81093f2 <osThreadNew+0x3e>
 81093ea:	4b44      	ldr	r3, [pc, #272]	; (81094fc <osThreadNew+0x148>)
 81093ec:	681b      	ldr	r3, [r3, #0]
 81093ee:	2b02      	cmp	r3, #2
 81093f0:	d07e      	beq.n	81094f0 <osThreadNew+0x13c>
 81093f2:	68fb      	ldr	r3, [r7, #12]
 81093f4:	2b00      	cmp	r3, #0
 81093f6:	d07b      	beq.n	81094f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 81093f8:	2380      	movs	r3, #128	; 0x80
 81093fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 81093fc:	2318      	movs	r3, #24
 81093fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8109400:	2300      	movs	r3, #0
 8109402:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8109404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8109408:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	2b00      	cmp	r3, #0
 810940e:	d045      	beq.n	810949c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	681b      	ldr	r3, [r3, #0]
 8109414:	2b00      	cmp	r3, #0
 8109416:	d002      	beq.n	810941e <osThreadNew+0x6a>
        name = attr->name;
 8109418:	687b      	ldr	r3, [r7, #4]
 810941a:	681b      	ldr	r3, [r3, #0]
 810941c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 810941e:	687b      	ldr	r3, [r7, #4]
 8109420:	699b      	ldr	r3, [r3, #24]
 8109422:	2b00      	cmp	r3, #0
 8109424:	d002      	beq.n	810942c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8109426:	687b      	ldr	r3, [r7, #4]
 8109428:	699b      	ldr	r3, [r3, #24]
 810942a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810942e:	2b00      	cmp	r3, #0
 8109430:	d008      	beq.n	8109444 <osThreadNew+0x90>
 8109432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109434:	2b38      	cmp	r3, #56	; 0x38
 8109436:	d805      	bhi.n	8109444 <osThreadNew+0x90>
 8109438:	687b      	ldr	r3, [r7, #4]
 810943a:	685b      	ldr	r3, [r3, #4]
 810943c:	f003 0301 	and.w	r3, r3, #1
 8109440:	2b00      	cmp	r3, #0
 8109442:	d001      	beq.n	8109448 <osThreadNew+0x94>
        return (NULL);
 8109444:	2300      	movs	r3, #0
 8109446:	e054      	b.n	81094f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8109448:	687b      	ldr	r3, [r7, #4]
 810944a:	695b      	ldr	r3, [r3, #20]
 810944c:	2b00      	cmp	r3, #0
 810944e:	d003      	beq.n	8109458 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8109450:	687b      	ldr	r3, [r7, #4]
 8109452:	695b      	ldr	r3, [r3, #20]
 8109454:	089b      	lsrs	r3, r3, #2
 8109456:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	689b      	ldr	r3, [r3, #8]
 810945c:	2b00      	cmp	r3, #0
 810945e:	d00e      	beq.n	810947e <osThreadNew+0xca>
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	68db      	ldr	r3, [r3, #12]
 8109464:	2b5b      	cmp	r3, #91	; 0x5b
 8109466:	d90a      	bls.n	810947e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8109468:	687b      	ldr	r3, [r7, #4]
 810946a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810946c:	2b00      	cmp	r3, #0
 810946e:	d006      	beq.n	810947e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8109470:	687b      	ldr	r3, [r7, #4]
 8109472:	695b      	ldr	r3, [r3, #20]
 8109474:	2b00      	cmp	r3, #0
 8109476:	d002      	beq.n	810947e <osThreadNew+0xca>
        mem = 1;
 8109478:	2301      	movs	r3, #1
 810947a:	623b      	str	r3, [r7, #32]
 810947c:	e010      	b.n	81094a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	689b      	ldr	r3, [r3, #8]
 8109482:	2b00      	cmp	r3, #0
 8109484:	d10c      	bne.n	81094a0 <osThreadNew+0xec>
 8109486:	687b      	ldr	r3, [r7, #4]
 8109488:	68db      	ldr	r3, [r3, #12]
 810948a:	2b00      	cmp	r3, #0
 810948c:	d108      	bne.n	81094a0 <osThreadNew+0xec>
 810948e:	687b      	ldr	r3, [r7, #4]
 8109490:	691b      	ldr	r3, [r3, #16]
 8109492:	2b00      	cmp	r3, #0
 8109494:	d104      	bne.n	81094a0 <osThreadNew+0xec>
          mem = 0;
 8109496:	2300      	movs	r3, #0
 8109498:	623b      	str	r3, [r7, #32]
 810949a:	e001      	b.n	81094a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 810949c:	2300      	movs	r3, #0
 810949e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 81094a0:	6a3b      	ldr	r3, [r7, #32]
 81094a2:	2b01      	cmp	r3, #1
 81094a4:	d110      	bne.n	81094c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81094a6:	687b      	ldr	r3, [r7, #4]
 81094a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 81094aa:	687a      	ldr	r2, [r7, #4]
 81094ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81094ae:	9202      	str	r2, [sp, #8]
 81094b0:	9301      	str	r3, [sp, #4]
 81094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094b4:	9300      	str	r3, [sp, #0]
 81094b6:	68bb      	ldr	r3, [r7, #8]
 81094b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81094ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81094bc:	68f8      	ldr	r0, [r7, #12]
 81094be:	f001 fbad 	bl	810ac1c <xTaskCreateStatic>
 81094c2:	4603      	mov	r3, r0
 81094c4:	613b      	str	r3, [r7, #16]
 81094c6:	e013      	b.n	81094f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 81094c8:	6a3b      	ldr	r3, [r7, #32]
 81094ca:	2b00      	cmp	r3, #0
 81094cc:	d110      	bne.n	81094f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81094d0:	b29a      	uxth	r2, r3
 81094d2:	f107 0310 	add.w	r3, r7, #16
 81094d6:	9301      	str	r3, [sp, #4]
 81094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094da:	9300      	str	r3, [sp, #0]
 81094dc:	68bb      	ldr	r3, [r7, #8]
 81094de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81094e0:	68f8      	ldr	r0, [r7, #12]
 81094e2:	f001 fbf5 	bl	810acd0 <xTaskCreate>
 81094e6:	4603      	mov	r3, r0
 81094e8:	2b01      	cmp	r3, #1
 81094ea:	d001      	beq.n	81094f0 <osThreadNew+0x13c>
          hTask = NULL;
 81094ec:	2300      	movs	r3, #0
 81094ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 81094f0:	693b      	ldr	r3, [r7, #16]
}
 81094f2:	4618      	mov	r0, r3
 81094f4:	3730      	adds	r7, #48	; 0x30
 81094f6:	46bd      	mov	sp, r7
 81094f8:	bd80      	pop	{r7, pc}
 81094fa:	bf00      	nop
 81094fc:	10000234 	.word	0x10000234

08109500 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8109500:	b580      	push	{r7, lr}
 8109502:	b086      	sub	sp, #24
 8109504:	af00      	add	r7, sp, #0
 8109506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8109508:	f3ef 8305 	mrs	r3, IPSR
 810950c:	613b      	str	r3, [r7, #16]
  return(result);
 810950e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8109510:	2b00      	cmp	r3, #0
 8109512:	d10f      	bne.n	8109534 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8109514:	f3ef 8310 	mrs	r3, PRIMASK
 8109518:	60fb      	str	r3, [r7, #12]
  return(result);
 810951a:	68fb      	ldr	r3, [r7, #12]
 810951c:	2b00      	cmp	r3, #0
 810951e:	d105      	bne.n	810952c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8109520:	f3ef 8311 	mrs	r3, BASEPRI
 8109524:	60bb      	str	r3, [r7, #8]
  return(result);
 8109526:	68bb      	ldr	r3, [r7, #8]
 8109528:	2b00      	cmp	r3, #0
 810952a:	d007      	beq.n	810953c <osDelay+0x3c>
 810952c:	4b0a      	ldr	r3, [pc, #40]	; (8109558 <osDelay+0x58>)
 810952e:	681b      	ldr	r3, [r3, #0]
 8109530:	2b02      	cmp	r3, #2
 8109532:	d103      	bne.n	810953c <osDelay+0x3c>
    stat = osErrorISR;
 8109534:	f06f 0305 	mvn.w	r3, #5
 8109538:	617b      	str	r3, [r7, #20]
 810953a:	e007      	b.n	810954c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 810953c:	2300      	movs	r3, #0
 810953e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	2b00      	cmp	r3, #0
 8109544:	d002      	beq.n	810954c <osDelay+0x4c>
      vTaskDelay(ticks);
 8109546:	6878      	ldr	r0, [r7, #4]
 8109548:	f001 fd06 	bl	810af58 <vTaskDelay>
    }
  }

  return (stat);
 810954c:	697b      	ldr	r3, [r7, #20]
}
 810954e:	4618      	mov	r0, r3
 8109550:	3718      	adds	r7, #24
 8109552:	46bd      	mov	sp, r7
 8109554:	bd80      	pop	{r7, pc}
 8109556:	bf00      	nop
 8109558:	10000234 	.word	0x10000234

0810955c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 810955c:	b580      	push	{r7, lr}
 810955e:	b08c      	sub	sp, #48	; 0x30
 8109560:	af02      	add	r7, sp, #8
 8109562:	60f8      	str	r0, [r7, #12]
 8109564:	60b9      	str	r1, [r7, #8]
 8109566:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8109568:	2300      	movs	r3, #0
 810956a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810956c:	f3ef 8305 	mrs	r3, IPSR
 8109570:	61bb      	str	r3, [r7, #24]
  return(result);
 8109572:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8109574:	2b00      	cmp	r3, #0
 8109576:	f040 8087 	bne.w	8109688 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810957a:	f3ef 8310 	mrs	r3, PRIMASK
 810957e:	617b      	str	r3, [r7, #20]
  return(result);
 8109580:	697b      	ldr	r3, [r7, #20]
 8109582:	2b00      	cmp	r3, #0
 8109584:	d105      	bne.n	8109592 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8109586:	f3ef 8311 	mrs	r3, BASEPRI
 810958a:	613b      	str	r3, [r7, #16]
  return(result);
 810958c:	693b      	ldr	r3, [r7, #16]
 810958e:	2b00      	cmp	r3, #0
 8109590:	d003      	beq.n	810959a <osSemaphoreNew+0x3e>
 8109592:	4b40      	ldr	r3, [pc, #256]	; (8109694 <osSemaphoreNew+0x138>)
 8109594:	681b      	ldr	r3, [r3, #0]
 8109596:	2b02      	cmp	r3, #2
 8109598:	d076      	beq.n	8109688 <osSemaphoreNew+0x12c>
 810959a:	68fb      	ldr	r3, [r7, #12]
 810959c:	2b00      	cmp	r3, #0
 810959e:	d073      	beq.n	8109688 <osSemaphoreNew+0x12c>
 81095a0:	68ba      	ldr	r2, [r7, #8]
 81095a2:	68fb      	ldr	r3, [r7, #12]
 81095a4:	429a      	cmp	r2, r3
 81095a6:	d86f      	bhi.n	8109688 <osSemaphoreNew+0x12c>
    mem = -1;
 81095a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81095ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	2b00      	cmp	r3, #0
 81095b2:	d015      	beq.n	81095e0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 81095b4:	687b      	ldr	r3, [r7, #4]
 81095b6:	689b      	ldr	r3, [r3, #8]
 81095b8:	2b00      	cmp	r3, #0
 81095ba:	d006      	beq.n	81095ca <osSemaphoreNew+0x6e>
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	68db      	ldr	r3, [r3, #12]
 81095c0:	2b4f      	cmp	r3, #79	; 0x4f
 81095c2:	d902      	bls.n	81095ca <osSemaphoreNew+0x6e>
        mem = 1;
 81095c4:	2301      	movs	r3, #1
 81095c6:	623b      	str	r3, [r7, #32]
 81095c8:	e00c      	b.n	81095e4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 81095ca:	687b      	ldr	r3, [r7, #4]
 81095cc:	689b      	ldr	r3, [r3, #8]
 81095ce:	2b00      	cmp	r3, #0
 81095d0:	d108      	bne.n	81095e4 <osSemaphoreNew+0x88>
 81095d2:	687b      	ldr	r3, [r7, #4]
 81095d4:	68db      	ldr	r3, [r3, #12]
 81095d6:	2b00      	cmp	r3, #0
 81095d8:	d104      	bne.n	81095e4 <osSemaphoreNew+0x88>
          mem = 0;
 81095da:	2300      	movs	r3, #0
 81095dc:	623b      	str	r3, [r7, #32]
 81095de:	e001      	b.n	81095e4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 81095e0:	2300      	movs	r3, #0
 81095e2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 81095e4:	6a3b      	ldr	r3, [r7, #32]
 81095e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81095ea:	d04d      	beq.n	8109688 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 81095ec:	68fb      	ldr	r3, [r7, #12]
 81095ee:	2b01      	cmp	r3, #1
 81095f0:	d129      	bne.n	8109646 <osSemaphoreNew+0xea>
        if (mem == 1) {
 81095f2:	6a3b      	ldr	r3, [r7, #32]
 81095f4:	2b01      	cmp	r3, #1
 81095f6:	d10b      	bne.n	8109610 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 81095f8:	687b      	ldr	r3, [r7, #4]
 81095fa:	689a      	ldr	r2, [r3, #8]
 81095fc:	2303      	movs	r3, #3
 81095fe:	9300      	str	r3, [sp, #0]
 8109600:	4613      	mov	r3, r2
 8109602:	2200      	movs	r2, #0
 8109604:	2100      	movs	r1, #0
 8109606:	2001      	movs	r0, #1
 8109608:	f000 fdaa 	bl	810a160 <xQueueGenericCreateStatic>
 810960c:	6278      	str	r0, [r7, #36]	; 0x24
 810960e:	e005      	b.n	810961c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8109610:	2203      	movs	r2, #3
 8109612:	2100      	movs	r1, #0
 8109614:	2001      	movs	r0, #1
 8109616:	f000 fe16 	bl	810a246 <xQueueGenericCreate>
 810961a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 810961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810961e:	2b00      	cmp	r3, #0
 8109620:	d022      	beq.n	8109668 <osSemaphoreNew+0x10c>
 8109622:	68bb      	ldr	r3, [r7, #8]
 8109624:	2b00      	cmp	r3, #0
 8109626:	d01f      	beq.n	8109668 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8109628:	2300      	movs	r3, #0
 810962a:	2200      	movs	r2, #0
 810962c:	2100      	movs	r1, #0
 810962e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109630:	f000 fed2 	bl	810a3d8 <xQueueGenericSend>
 8109634:	4603      	mov	r3, r0
 8109636:	2b01      	cmp	r3, #1
 8109638:	d016      	beq.n	8109668 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 810963a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810963c:	f001 f936 	bl	810a8ac <vQueueDelete>
            hSemaphore = NULL;
 8109640:	2300      	movs	r3, #0
 8109642:	627b      	str	r3, [r7, #36]	; 0x24
 8109644:	e010      	b.n	8109668 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8109646:	6a3b      	ldr	r3, [r7, #32]
 8109648:	2b01      	cmp	r3, #1
 810964a:	d108      	bne.n	810965e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 810964c:	687b      	ldr	r3, [r7, #4]
 810964e:	689b      	ldr	r3, [r3, #8]
 8109650:	461a      	mov	r2, r3
 8109652:	68b9      	ldr	r1, [r7, #8]
 8109654:	68f8      	ldr	r0, [r7, #12]
 8109656:	f000 fe58 	bl	810a30a <xQueueCreateCountingSemaphoreStatic>
 810965a:	6278      	str	r0, [r7, #36]	; 0x24
 810965c:	e004      	b.n	8109668 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 810965e:	68b9      	ldr	r1, [r7, #8]
 8109660:	68f8      	ldr	r0, [r7, #12]
 8109662:	f000 fe87 	bl	810a374 <xQueueCreateCountingSemaphore>
 8109666:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8109668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810966a:	2b00      	cmp	r3, #0
 810966c:	d00c      	beq.n	8109688 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 810966e:	687b      	ldr	r3, [r7, #4]
 8109670:	2b00      	cmp	r3, #0
 8109672:	d003      	beq.n	810967c <osSemaphoreNew+0x120>
          name = attr->name;
 8109674:	687b      	ldr	r3, [r7, #4]
 8109676:	681b      	ldr	r3, [r3, #0]
 8109678:	61fb      	str	r3, [r7, #28]
 810967a:	e001      	b.n	8109680 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 810967c:	2300      	movs	r3, #0
 810967e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8109680:	69f9      	ldr	r1, [r7, #28]
 8109682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109684:	f001 fa44 	bl	810ab10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8109688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810968a:	4618      	mov	r0, r3
 810968c:	3728      	adds	r7, #40	; 0x28
 810968e:	46bd      	mov	sp, r7
 8109690:	bd80      	pop	{r7, pc}
 8109692:	bf00      	nop
 8109694:	10000234 	.word	0x10000234

08109698 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8109698:	b480      	push	{r7}
 810969a:	b085      	sub	sp, #20
 810969c:	af00      	add	r7, sp, #0
 810969e:	60f8      	str	r0, [r7, #12]
 81096a0:	60b9      	str	r1, [r7, #8]
 81096a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81096a4:	68fb      	ldr	r3, [r7, #12]
 81096a6:	4a07      	ldr	r2, [pc, #28]	; (81096c4 <vApplicationGetIdleTaskMemory+0x2c>)
 81096a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81096aa:	68bb      	ldr	r3, [r7, #8]
 81096ac:	4a06      	ldr	r2, [pc, #24]	; (81096c8 <vApplicationGetIdleTaskMemory+0x30>)
 81096ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81096b0:	687b      	ldr	r3, [r7, #4]
 81096b2:	2280      	movs	r2, #128	; 0x80
 81096b4:	601a      	str	r2, [r3, #0]
}
 81096b6:	bf00      	nop
 81096b8:	3714      	adds	r7, #20
 81096ba:	46bd      	mov	sp, r7
 81096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096c0:	4770      	bx	lr
 81096c2:	bf00      	nop
 81096c4:	10000238 	.word	0x10000238
 81096c8:	10000294 	.word	0x10000294

081096cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81096cc:	b480      	push	{r7}
 81096ce:	b085      	sub	sp, #20
 81096d0:	af00      	add	r7, sp, #0
 81096d2:	60f8      	str	r0, [r7, #12]
 81096d4:	60b9      	str	r1, [r7, #8]
 81096d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81096d8:	68fb      	ldr	r3, [r7, #12]
 81096da:	4a07      	ldr	r2, [pc, #28]	; (81096f8 <vApplicationGetTimerTaskMemory+0x2c>)
 81096dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 81096de:	68bb      	ldr	r3, [r7, #8]
 81096e0:	4a06      	ldr	r2, [pc, #24]	; (81096fc <vApplicationGetTimerTaskMemory+0x30>)
 81096e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 81096e4:	687b      	ldr	r3, [r7, #4]
 81096e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 81096ea:	601a      	str	r2, [r3, #0]
}
 81096ec:	bf00      	nop
 81096ee:	3714      	adds	r7, #20
 81096f0:	46bd      	mov	sp, r7
 81096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096f6:	4770      	bx	lr
 81096f8:	10000494 	.word	0x10000494
 81096fc:	100004f0 	.word	0x100004f0

08109700 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8109700:	b580      	push	{r7, lr}
 8109702:	b08a      	sub	sp, #40	; 0x28
 8109704:	af00      	add	r7, sp, #0
 8109706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8109708:	2300      	movs	r3, #0
 810970a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810970c:	f001 fcbc 	bl	810b088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8109710:	4b57      	ldr	r3, [pc, #348]	; (8109870 <pvPortMalloc+0x170>)
 8109712:	681b      	ldr	r3, [r3, #0]
 8109714:	2b00      	cmp	r3, #0
 8109716:	d101      	bne.n	810971c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8109718:	f000 f90c 	bl	8109934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810971c:	4b55      	ldr	r3, [pc, #340]	; (8109874 <pvPortMalloc+0x174>)
 810971e:	681a      	ldr	r2, [r3, #0]
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	4013      	ands	r3, r2
 8109724:	2b00      	cmp	r3, #0
 8109726:	f040 808c 	bne.w	8109842 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810972a:	687b      	ldr	r3, [r7, #4]
 810972c:	2b00      	cmp	r3, #0
 810972e:	d01c      	beq.n	810976a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8109730:	2208      	movs	r2, #8
 8109732:	687b      	ldr	r3, [r7, #4]
 8109734:	4413      	add	r3, r2
 8109736:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	f003 0307 	and.w	r3, r3, #7
 810973e:	2b00      	cmp	r3, #0
 8109740:	d013      	beq.n	810976a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	f023 0307 	bic.w	r3, r3, #7
 8109748:	3308      	adds	r3, #8
 810974a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810974c:	687b      	ldr	r3, [r7, #4]
 810974e:	f003 0307 	and.w	r3, r3, #7
 8109752:	2b00      	cmp	r3, #0
 8109754:	d009      	beq.n	810976a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8109756:	f04f 0350 	mov.w	r3, #80	; 0x50
 810975a:	f383 8811 	msr	BASEPRI, r3
 810975e:	f3bf 8f6f 	isb	sy
 8109762:	f3bf 8f4f 	dsb	sy
 8109766:	617b      	str	r3, [r7, #20]
 8109768:	e7fe      	b.n	8109768 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810976a:	687b      	ldr	r3, [r7, #4]
 810976c:	2b00      	cmp	r3, #0
 810976e:	d068      	beq.n	8109842 <pvPortMalloc+0x142>
 8109770:	4b41      	ldr	r3, [pc, #260]	; (8109878 <pvPortMalloc+0x178>)
 8109772:	681b      	ldr	r3, [r3, #0]
 8109774:	687a      	ldr	r2, [r7, #4]
 8109776:	429a      	cmp	r2, r3
 8109778:	d863      	bhi.n	8109842 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810977a:	4b40      	ldr	r3, [pc, #256]	; (810987c <pvPortMalloc+0x17c>)
 810977c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810977e:	4b3f      	ldr	r3, [pc, #252]	; (810987c <pvPortMalloc+0x17c>)
 8109780:	681b      	ldr	r3, [r3, #0]
 8109782:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109784:	e004      	b.n	8109790 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8109786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109788:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810978c:	681b      	ldr	r3, [r3, #0]
 810978e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109792:	685b      	ldr	r3, [r3, #4]
 8109794:	687a      	ldr	r2, [r7, #4]
 8109796:	429a      	cmp	r2, r3
 8109798:	d903      	bls.n	81097a2 <pvPortMalloc+0xa2>
 810979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810979c:	681b      	ldr	r3, [r3, #0]
 810979e:	2b00      	cmp	r3, #0
 81097a0:	d1f1      	bne.n	8109786 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81097a2:	4b33      	ldr	r3, [pc, #204]	; (8109870 <pvPortMalloc+0x170>)
 81097a4:	681b      	ldr	r3, [r3, #0]
 81097a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81097a8:	429a      	cmp	r2, r3
 81097aa:	d04a      	beq.n	8109842 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81097ac:	6a3b      	ldr	r3, [r7, #32]
 81097ae:	681b      	ldr	r3, [r3, #0]
 81097b0:	2208      	movs	r2, #8
 81097b2:	4413      	add	r3, r2
 81097b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097b8:	681a      	ldr	r2, [r3, #0]
 81097ba:	6a3b      	ldr	r3, [r7, #32]
 81097bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097c0:	685a      	ldr	r2, [r3, #4]
 81097c2:	687b      	ldr	r3, [r7, #4]
 81097c4:	1ad2      	subs	r2, r2, r3
 81097c6:	2308      	movs	r3, #8
 81097c8:	005b      	lsls	r3, r3, #1
 81097ca:	429a      	cmp	r2, r3
 81097cc:	d91e      	bls.n	810980c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81097ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81097d0:	687b      	ldr	r3, [r7, #4]
 81097d2:	4413      	add	r3, r2
 81097d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81097d6:	69bb      	ldr	r3, [r7, #24]
 81097d8:	f003 0307 	and.w	r3, r3, #7
 81097dc:	2b00      	cmp	r3, #0
 81097de:	d009      	beq.n	81097f4 <pvPortMalloc+0xf4>
 81097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81097e4:	f383 8811 	msr	BASEPRI, r3
 81097e8:	f3bf 8f6f 	isb	sy
 81097ec:	f3bf 8f4f 	dsb	sy
 81097f0:	613b      	str	r3, [r7, #16]
 81097f2:	e7fe      	b.n	81097f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 81097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097f6:	685a      	ldr	r2, [r3, #4]
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	1ad2      	subs	r2, r2, r3
 81097fc:	69bb      	ldr	r3, [r7, #24]
 81097fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8109800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109802:	687a      	ldr	r2, [r7, #4]
 8109804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8109806:	69b8      	ldr	r0, [r7, #24]
 8109808:	f000 f8f6 	bl	81099f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810980c:	4b1a      	ldr	r3, [pc, #104]	; (8109878 <pvPortMalloc+0x178>)
 810980e:	681a      	ldr	r2, [r3, #0]
 8109810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109812:	685b      	ldr	r3, [r3, #4]
 8109814:	1ad3      	subs	r3, r2, r3
 8109816:	4a18      	ldr	r2, [pc, #96]	; (8109878 <pvPortMalloc+0x178>)
 8109818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810981a:	4b17      	ldr	r3, [pc, #92]	; (8109878 <pvPortMalloc+0x178>)
 810981c:	681a      	ldr	r2, [r3, #0]
 810981e:	4b18      	ldr	r3, [pc, #96]	; (8109880 <pvPortMalloc+0x180>)
 8109820:	681b      	ldr	r3, [r3, #0]
 8109822:	429a      	cmp	r2, r3
 8109824:	d203      	bcs.n	810982e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8109826:	4b14      	ldr	r3, [pc, #80]	; (8109878 <pvPortMalloc+0x178>)
 8109828:	681b      	ldr	r3, [r3, #0]
 810982a:	4a15      	ldr	r2, [pc, #84]	; (8109880 <pvPortMalloc+0x180>)
 810982c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109830:	685a      	ldr	r2, [r3, #4]
 8109832:	4b10      	ldr	r3, [pc, #64]	; (8109874 <pvPortMalloc+0x174>)
 8109834:	681b      	ldr	r3, [r3, #0]
 8109836:	431a      	orrs	r2, r3
 8109838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810983a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810983e:	2200      	movs	r2, #0
 8109840:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8109842:	f001 fc2f 	bl	810b0a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8109846:	69fb      	ldr	r3, [r7, #28]
 8109848:	f003 0307 	and.w	r3, r3, #7
 810984c:	2b00      	cmp	r3, #0
 810984e:	d009      	beq.n	8109864 <pvPortMalloc+0x164>
 8109850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109854:	f383 8811 	msr	BASEPRI, r3
 8109858:	f3bf 8f6f 	isb	sy
 810985c:	f3bf 8f4f 	dsb	sy
 8109860:	60fb      	str	r3, [r7, #12]
 8109862:	e7fe      	b.n	8109862 <pvPortMalloc+0x162>
	return pvReturn;
 8109864:	69fb      	ldr	r3, [r7, #28]
}
 8109866:	4618      	mov	r0, r3
 8109868:	3728      	adds	r7, #40	; 0x28
 810986a:	46bd      	mov	sp, r7
 810986c:	bd80      	pop	{r7, pc}
 810986e:	bf00      	nop
 8109870:	100044f8 	.word	0x100044f8
 8109874:	10004504 	.word	0x10004504
 8109878:	100044fc 	.word	0x100044fc
 810987c:	100044f0 	.word	0x100044f0
 8109880:	10004500 	.word	0x10004500

08109884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8109884:	b580      	push	{r7, lr}
 8109886:	b086      	sub	sp, #24
 8109888:	af00      	add	r7, sp, #0
 810988a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810988c:	687b      	ldr	r3, [r7, #4]
 810988e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8109890:	687b      	ldr	r3, [r7, #4]
 8109892:	2b00      	cmp	r3, #0
 8109894:	d046      	beq.n	8109924 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8109896:	2308      	movs	r3, #8
 8109898:	425b      	negs	r3, r3
 810989a:	697a      	ldr	r2, [r7, #20]
 810989c:	4413      	add	r3, r2
 810989e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81098a0:	697b      	ldr	r3, [r7, #20]
 81098a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81098a4:	693b      	ldr	r3, [r7, #16]
 81098a6:	685a      	ldr	r2, [r3, #4]
 81098a8:	4b20      	ldr	r3, [pc, #128]	; (810992c <vPortFree+0xa8>)
 81098aa:	681b      	ldr	r3, [r3, #0]
 81098ac:	4013      	ands	r3, r2
 81098ae:	2b00      	cmp	r3, #0
 81098b0:	d109      	bne.n	81098c6 <vPortFree+0x42>
 81098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81098b6:	f383 8811 	msr	BASEPRI, r3
 81098ba:	f3bf 8f6f 	isb	sy
 81098be:	f3bf 8f4f 	dsb	sy
 81098c2:	60fb      	str	r3, [r7, #12]
 81098c4:	e7fe      	b.n	81098c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 81098c6:	693b      	ldr	r3, [r7, #16]
 81098c8:	681b      	ldr	r3, [r3, #0]
 81098ca:	2b00      	cmp	r3, #0
 81098cc:	d009      	beq.n	81098e2 <vPortFree+0x5e>
 81098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 81098d2:	f383 8811 	msr	BASEPRI, r3
 81098d6:	f3bf 8f6f 	isb	sy
 81098da:	f3bf 8f4f 	dsb	sy
 81098de:	60bb      	str	r3, [r7, #8]
 81098e0:	e7fe      	b.n	81098e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 81098e2:	693b      	ldr	r3, [r7, #16]
 81098e4:	685a      	ldr	r2, [r3, #4]
 81098e6:	4b11      	ldr	r3, [pc, #68]	; (810992c <vPortFree+0xa8>)
 81098e8:	681b      	ldr	r3, [r3, #0]
 81098ea:	4013      	ands	r3, r2
 81098ec:	2b00      	cmp	r3, #0
 81098ee:	d019      	beq.n	8109924 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81098f0:	693b      	ldr	r3, [r7, #16]
 81098f2:	681b      	ldr	r3, [r3, #0]
 81098f4:	2b00      	cmp	r3, #0
 81098f6:	d115      	bne.n	8109924 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81098f8:	693b      	ldr	r3, [r7, #16]
 81098fa:	685a      	ldr	r2, [r3, #4]
 81098fc:	4b0b      	ldr	r3, [pc, #44]	; (810992c <vPortFree+0xa8>)
 81098fe:	681b      	ldr	r3, [r3, #0]
 8109900:	43db      	mvns	r3, r3
 8109902:	401a      	ands	r2, r3
 8109904:	693b      	ldr	r3, [r7, #16]
 8109906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8109908:	f001 fbbe 	bl	810b088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810990c:	693b      	ldr	r3, [r7, #16]
 810990e:	685a      	ldr	r2, [r3, #4]
 8109910:	4b07      	ldr	r3, [pc, #28]	; (8109930 <vPortFree+0xac>)
 8109912:	681b      	ldr	r3, [r3, #0]
 8109914:	4413      	add	r3, r2
 8109916:	4a06      	ldr	r2, [pc, #24]	; (8109930 <vPortFree+0xac>)
 8109918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810991a:	6938      	ldr	r0, [r7, #16]
 810991c:	f000 f86c 	bl	81099f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8109920:	f001 fbc0 	bl	810b0a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8109924:	bf00      	nop
 8109926:	3718      	adds	r7, #24
 8109928:	46bd      	mov	sp, r7
 810992a:	bd80      	pop	{r7, pc}
 810992c:	10004504 	.word	0x10004504
 8109930:	100044fc 	.word	0x100044fc

08109934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8109934:	b480      	push	{r7}
 8109936:	b085      	sub	sp, #20
 8109938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810993a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810993e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8109940:	4b27      	ldr	r3, [pc, #156]	; (81099e0 <prvHeapInit+0xac>)
 8109942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8109944:	68fb      	ldr	r3, [r7, #12]
 8109946:	f003 0307 	and.w	r3, r3, #7
 810994a:	2b00      	cmp	r3, #0
 810994c:	d00c      	beq.n	8109968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810994e:	68fb      	ldr	r3, [r7, #12]
 8109950:	3307      	adds	r3, #7
 8109952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109954:	68fb      	ldr	r3, [r7, #12]
 8109956:	f023 0307 	bic.w	r3, r3, #7
 810995a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810995c:	68ba      	ldr	r2, [r7, #8]
 810995e:	68fb      	ldr	r3, [r7, #12]
 8109960:	1ad3      	subs	r3, r2, r3
 8109962:	4a1f      	ldr	r2, [pc, #124]	; (81099e0 <prvHeapInit+0xac>)
 8109964:	4413      	add	r3, r2
 8109966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8109968:	68fb      	ldr	r3, [r7, #12]
 810996a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810996c:	4a1d      	ldr	r2, [pc, #116]	; (81099e4 <prvHeapInit+0xb0>)
 810996e:	687b      	ldr	r3, [r7, #4]
 8109970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8109972:	4b1c      	ldr	r3, [pc, #112]	; (81099e4 <prvHeapInit+0xb0>)
 8109974:	2200      	movs	r2, #0
 8109976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8109978:	687b      	ldr	r3, [r7, #4]
 810997a:	68ba      	ldr	r2, [r7, #8]
 810997c:	4413      	add	r3, r2
 810997e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8109980:	2208      	movs	r2, #8
 8109982:	68fb      	ldr	r3, [r7, #12]
 8109984:	1a9b      	subs	r3, r3, r2
 8109986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109988:	68fb      	ldr	r3, [r7, #12]
 810998a:	f023 0307 	bic.w	r3, r3, #7
 810998e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8109990:	68fb      	ldr	r3, [r7, #12]
 8109992:	4a15      	ldr	r2, [pc, #84]	; (81099e8 <prvHeapInit+0xb4>)
 8109994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8109996:	4b14      	ldr	r3, [pc, #80]	; (81099e8 <prvHeapInit+0xb4>)
 8109998:	681b      	ldr	r3, [r3, #0]
 810999a:	2200      	movs	r2, #0
 810999c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810999e:	4b12      	ldr	r3, [pc, #72]	; (81099e8 <prvHeapInit+0xb4>)
 81099a0:	681b      	ldr	r3, [r3, #0]
 81099a2:	2200      	movs	r2, #0
 81099a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81099a6:	687b      	ldr	r3, [r7, #4]
 81099a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81099aa:	683b      	ldr	r3, [r7, #0]
 81099ac:	68fa      	ldr	r2, [r7, #12]
 81099ae:	1ad2      	subs	r2, r2, r3
 81099b0:	683b      	ldr	r3, [r7, #0]
 81099b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81099b4:	4b0c      	ldr	r3, [pc, #48]	; (81099e8 <prvHeapInit+0xb4>)
 81099b6:	681a      	ldr	r2, [r3, #0]
 81099b8:	683b      	ldr	r3, [r7, #0]
 81099ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81099bc:	683b      	ldr	r3, [r7, #0]
 81099be:	685b      	ldr	r3, [r3, #4]
 81099c0:	4a0a      	ldr	r2, [pc, #40]	; (81099ec <prvHeapInit+0xb8>)
 81099c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81099c4:	683b      	ldr	r3, [r7, #0]
 81099c6:	685b      	ldr	r3, [r3, #4]
 81099c8:	4a09      	ldr	r2, [pc, #36]	; (81099f0 <prvHeapInit+0xbc>)
 81099ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 81099cc:	4b09      	ldr	r3, [pc, #36]	; (81099f4 <prvHeapInit+0xc0>)
 81099ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81099d2:	601a      	str	r2, [r3, #0]
}
 81099d4:	bf00      	nop
 81099d6:	3714      	adds	r7, #20
 81099d8:	46bd      	mov	sp, r7
 81099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099de:	4770      	bx	lr
 81099e0:	100008f0 	.word	0x100008f0
 81099e4:	100044f0 	.word	0x100044f0
 81099e8:	100044f8 	.word	0x100044f8
 81099ec:	10004500 	.word	0x10004500
 81099f0:	100044fc 	.word	0x100044fc
 81099f4:	10004504 	.word	0x10004504

081099f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81099f8:	b480      	push	{r7}
 81099fa:	b085      	sub	sp, #20
 81099fc:	af00      	add	r7, sp, #0
 81099fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8109a00:	4b28      	ldr	r3, [pc, #160]	; (8109aa4 <prvInsertBlockIntoFreeList+0xac>)
 8109a02:	60fb      	str	r3, [r7, #12]
 8109a04:	e002      	b.n	8109a0c <prvInsertBlockIntoFreeList+0x14>
 8109a06:	68fb      	ldr	r3, [r7, #12]
 8109a08:	681b      	ldr	r3, [r3, #0]
 8109a0a:	60fb      	str	r3, [r7, #12]
 8109a0c:	68fb      	ldr	r3, [r7, #12]
 8109a0e:	681b      	ldr	r3, [r3, #0]
 8109a10:	687a      	ldr	r2, [r7, #4]
 8109a12:	429a      	cmp	r2, r3
 8109a14:	d8f7      	bhi.n	8109a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8109a16:	68fb      	ldr	r3, [r7, #12]
 8109a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8109a1a:	68fb      	ldr	r3, [r7, #12]
 8109a1c:	685b      	ldr	r3, [r3, #4]
 8109a1e:	68ba      	ldr	r2, [r7, #8]
 8109a20:	4413      	add	r3, r2
 8109a22:	687a      	ldr	r2, [r7, #4]
 8109a24:	429a      	cmp	r2, r3
 8109a26:	d108      	bne.n	8109a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8109a28:	68fb      	ldr	r3, [r7, #12]
 8109a2a:	685a      	ldr	r2, [r3, #4]
 8109a2c:	687b      	ldr	r3, [r7, #4]
 8109a2e:	685b      	ldr	r3, [r3, #4]
 8109a30:	441a      	add	r2, r3
 8109a32:	68fb      	ldr	r3, [r7, #12]
 8109a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8109a36:	68fb      	ldr	r3, [r7, #12]
 8109a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8109a3a:	687b      	ldr	r3, [r7, #4]
 8109a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8109a3e:	687b      	ldr	r3, [r7, #4]
 8109a40:	685b      	ldr	r3, [r3, #4]
 8109a42:	68ba      	ldr	r2, [r7, #8]
 8109a44:	441a      	add	r2, r3
 8109a46:	68fb      	ldr	r3, [r7, #12]
 8109a48:	681b      	ldr	r3, [r3, #0]
 8109a4a:	429a      	cmp	r2, r3
 8109a4c:	d118      	bne.n	8109a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8109a4e:	68fb      	ldr	r3, [r7, #12]
 8109a50:	681a      	ldr	r2, [r3, #0]
 8109a52:	4b15      	ldr	r3, [pc, #84]	; (8109aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8109a54:	681b      	ldr	r3, [r3, #0]
 8109a56:	429a      	cmp	r2, r3
 8109a58:	d00d      	beq.n	8109a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8109a5a:	687b      	ldr	r3, [r7, #4]
 8109a5c:	685a      	ldr	r2, [r3, #4]
 8109a5e:	68fb      	ldr	r3, [r7, #12]
 8109a60:	681b      	ldr	r3, [r3, #0]
 8109a62:	685b      	ldr	r3, [r3, #4]
 8109a64:	441a      	add	r2, r3
 8109a66:	687b      	ldr	r3, [r7, #4]
 8109a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8109a6a:	68fb      	ldr	r3, [r7, #12]
 8109a6c:	681b      	ldr	r3, [r3, #0]
 8109a6e:	681a      	ldr	r2, [r3, #0]
 8109a70:	687b      	ldr	r3, [r7, #4]
 8109a72:	601a      	str	r2, [r3, #0]
 8109a74:	e008      	b.n	8109a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8109a76:	4b0c      	ldr	r3, [pc, #48]	; (8109aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8109a78:	681a      	ldr	r2, [r3, #0]
 8109a7a:	687b      	ldr	r3, [r7, #4]
 8109a7c:	601a      	str	r2, [r3, #0]
 8109a7e:	e003      	b.n	8109a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8109a80:	68fb      	ldr	r3, [r7, #12]
 8109a82:	681a      	ldr	r2, [r3, #0]
 8109a84:	687b      	ldr	r3, [r7, #4]
 8109a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8109a88:	68fa      	ldr	r2, [r7, #12]
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	429a      	cmp	r2, r3
 8109a8e:	d002      	beq.n	8109a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8109a90:	68fb      	ldr	r3, [r7, #12]
 8109a92:	687a      	ldr	r2, [r7, #4]
 8109a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109a96:	bf00      	nop
 8109a98:	3714      	adds	r7, #20
 8109a9a:	46bd      	mov	sp, r7
 8109a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aa0:	4770      	bx	lr
 8109aa2:	bf00      	nop
 8109aa4:	100044f0 	.word	0x100044f0
 8109aa8:	100044f8 	.word	0x100044f8

08109aac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8109aac:	b480      	push	{r7}
 8109aae:	b083      	sub	sp, #12
 8109ab0:	af00      	add	r7, sp, #0
 8109ab2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109ab4:	687b      	ldr	r3, [r7, #4]
 8109ab6:	f103 0208 	add.w	r2, r3, #8
 8109aba:	687b      	ldr	r3, [r7, #4]
 8109abc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8109abe:	687b      	ldr	r3, [r7, #4]
 8109ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109ac4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109ac6:	687b      	ldr	r3, [r7, #4]
 8109ac8:	f103 0208 	add.w	r2, r3, #8
 8109acc:	687b      	ldr	r3, [r7, #4]
 8109ace:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109ad0:	687b      	ldr	r3, [r7, #4]
 8109ad2:	f103 0208 	add.w	r2, r3, #8
 8109ad6:	687b      	ldr	r3, [r7, #4]
 8109ad8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	2200      	movs	r2, #0
 8109ade:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8109ae0:	bf00      	nop
 8109ae2:	370c      	adds	r7, #12
 8109ae4:	46bd      	mov	sp, r7
 8109ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aea:	4770      	bx	lr

08109aec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8109aec:	b480      	push	{r7}
 8109aee:	b083      	sub	sp, #12
 8109af0:	af00      	add	r7, sp, #0
 8109af2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8109af4:	687b      	ldr	r3, [r7, #4]
 8109af6:	2200      	movs	r2, #0
 8109af8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8109afa:	bf00      	nop
 8109afc:	370c      	adds	r7, #12
 8109afe:	46bd      	mov	sp, r7
 8109b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b04:	4770      	bx	lr

08109b06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8109b06:	b480      	push	{r7}
 8109b08:	b085      	sub	sp, #20
 8109b0a:	af00      	add	r7, sp, #0
 8109b0c:	6078      	str	r0, [r7, #4]
 8109b0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8109b10:	687b      	ldr	r3, [r7, #4]
 8109b12:	685b      	ldr	r3, [r3, #4]
 8109b14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8109b16:	683b      	ldr	r3, [r7, #0]
 8109b18:	68fa      	ldr	r2, [r7, #12]
 8109b1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8109b1c:	68fb      	ldr	r3, [r7, #12]
 8109b1e:	689a      	ldr	r2, [r3, #8]
 8109b20:	683b      	ldr	r3, [r7, #0]
 8109b22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8109b24:	68fb      	ldr	r3, [r7, #12]
 8109b26:	689b      	ldr	r3, [r3, #8]
 8109b28:	683a      	ldr	r2, [r7, #0]
 8109b2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8109b2c:	68fb      	ldr	r3, [r7, #12]
 8109b2e:	683a      	ldr	r2, [r7, #0]
 8109b30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8109b32:	683b      	ldr	r3, [r7, #0]
 8109b34:	687a      	ldr	r2, [r7, #4]
 8109b36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109b38:	687b      	ldr	r3, [r7, #4]
 8109b3a:	681b      	ldr	r3, [r3, #0]
 8109b3c:	1c5a      	adds	r2, r3, #1
 8109b3e:	687b      	ldr	r3, [r7, #4]
 8109b40:	601a      	str	r2, [r3, #0]
}
 8109b42:	bf00      	nop
 8109b44:	3714      	adds	r7, #20
 8109b46:	46bd      	mov	sp, r7
 8109b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b4c:	4770      	bx	lr

08109b4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8109b4e:	b480      	push	{r7}
 8109b50:	b085      	sub	sp, #20
 8109b52:	af00      	add	r7, sp, #0
 8109b54:	6078      	str	r0, [r7, #4]
 8109b56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8109b58:	683b      	ldr	r3, [r7, #0]
 8109b5a:	681b      	ldr	r3, [r3, #0]
 8109b5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8109b5e:	68bb      	ldr	r3, [r7, #8]
 8109b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109b64:	d103      	bne.n	8109b6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8109b66:	687b      	ldr	r3, [r7, #4]
 8109b68:	691b      	ldr	r3, [r3, #16]
 8109b6a:	60fb      	str	r3, [r7, #12]
 8109b6c:	e00c      	b.n	8109b88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8109b6e:	687b      	ldr	r3, [r7, #4]
 8109b70:	3308      	adds	r3, #8
 8109b72:	60fb      	str	r3, [r7, #12]
 8109b74:	e002      	b.n	8109b7c <vListInsert+0x2e>
 8109b76:	68fb      	ldr	r3, [r7, #12]
 8109b78:	685b      	ldr	r3, [r3, #4]
 8109b7a:	60fb      	str	r3, [r7, #12]
 8109b7c:	68fb      	ldr	r3, [r7, #12]
 8109b7e:	685b      	ldr	r3, [r3, #4]
 8109b80:	681b      	ldr	r3, [r3, #0]
 8109b82:	68ba      	ldr	r2, [r7, #8]
 8109b84:	429a      	cmp	r2, r3
 8109b86:	d2f6      	bcs.n	8109b76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8109b88:	68fb      	ldr	r3, [r7, #12]
 8109b8a:	685a      	ldr	r2, [r3, #4]
 8109b8c:	683b      	ldr	r3, [r7, #0]
 8109b8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8109b90:	683b      	ldr	r3, [r7, #0]
 8109b92:	685b      	ldr	r3, [r3, #4]
 8109b94:	683a      	ldr	r2, [r7, #0]
 8109b96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8109b98:	683b      	ldr	r3, [r7, #0]
 8109b9a:	68fa      	ldr	r2, [r7, #12]
 8109b9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8109b9e:	68fb      	ldr	r3, [r7, #12]
 8109ba0:	683a      	ldr	r2, [r7, #0]
 8109ba2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8109ba4:	683b      	ldr	r3, [r7, #0]
 8109ba6:	687a      	ldr	r2, [r7, #4]
 8109ba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109baa:	687b      	ldr	r3, [r7, #4]
 8109bac:	681b      	ldr	r3, [r3, #0]
 8109bae:	1c5a      	adds	r2, r3, #1
 8109bb0:	687b      	ldr	r3, [r7, #4]
 8109bb2:	601a      	str	r2, [r3, #0]
}
 8109bb4:	bf00      	nop
 8109bb6:	3714      	adds	r7, #20
 8109bb8:	46bd      	mov	sp, r7
 8109bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bbe:	4770      	bx	lr

08109bc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8109bc0:	b480      	push	{r7}
 8109bc2:	b085      	sub	sp, #20
 8109bc4:	af00      	add	r7, sp, #0
 8109bc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8109bc8:	687b      	ldr	r3, [r7, #4]
 8109bca:	691b      	ldr	r3, [r3, #16]
 8109bcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	685b      	ldr	r3, [r3, #4]
 8109bd2:	687a      	ldr	r2, [r7, #4]
 8109bd4:	6892      	ldr	r2, [r2, #8]
 8109bd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8109bd8:	687b      	ldr	r3, [r7, #4]
 8109bda:	689b      	ldr	r3, [r3, #8]
 8109bdc:	687a      	ldr	r2, [r7, #4]
 8109bde:	6852      	ldr	r2, [r2, #4]
 8109be0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8109be2:	68fb      	ldr	r3, [r7, #12]
 8109be4:	685b      	ldr	r3, [r3, #4]
 8109be6:	687a      	ldr	r2, [r7, #4]
 8109be8:	429a      	cmp	r2, r3
 8109bea:	d103      	bne.n	8109bf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8109bec:	687b      	ldr	r3, [r7, #4]
 8109bee:	689a      	ldr	r2, [r3, #8]
 8109bf0:	68fb      	ldr	r3, [r7, #12]
 8109bf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8109bf4:	687b      	ldr	r3, [r7, #4]
 8109bf6:	2200      	movs	r2, #0
 8109bf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8109bfa:	68fb      	ldr	r3, [r7, #12]
 8109bfc:	681b      	ldr	r3, [r3, #0]
 8109bfe:	1e5a      	subs	r2, r3, #1
 8109c00:	68fb      	ldr	r3, [r7, #12]
 8109c02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8109c04:	68fb      	ldr	r3, [r7, #12]
 8109c06:	681b      	ldr	r3, [r3, #0]
}
 8109c08:	4618      	mov	r0, r3
 8109c0a:	3714      	adds	r7, #20
 8109c0c:	46bd      	mov	sp, r7
 8109c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c12:	4770      	bx	lr

08109c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8109c14:	b480      	push	{r7}
 8109c16:	b085      	sub	sp, #20
 8109c18:	af00      	add	r7, sp, #0
 8109c1a:	60f8      	str	r0, [r7, #12]
 8109c1c:	60b9      	str	r1, [r7, #8]
 8109c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8109c20:	68fb      	ldr	r3, [r7, #12]
 8109c22:	3b04      	subs	r3, #4
 8109c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8109c26:	68fb      	ldr	r3, [r7, #12]
 8109c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8109c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8109c2e:	68fb      	ldr	r3, [r7, #12]
 8109c30:	3b04      	subs	r3, #4
 8109c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8109c34:	68bb      	ldr	r3, [r7, #8]
 8109c36:	f023 0201 	bic.w	r2, r3, #1
 8109c3a:	68fb      	ldr	r3, [r7, #12]
 8109c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8109c3e:	68fb      	ldr	r3, [r7, #12]
 8109c40:	3b04      	subs	r3, #4
 8109c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8109c44:	4a0c      	ldr	r2, [pc, #48]	; (8109c78 <pxPortInitialiseStack+0x64>)
 8109c46:	68fb      	ldr	r3, [r7, #12]
 8109c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8109c4a:	68fb      	ldr	r3, [r7, #12]
 8109c4c:	3b14      	subs	r3, #20
 8109c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8109c50:	687a      	ldr	r2, [r7, #4]
 8109c52:	68fb      	ldr	r3, [r7, #12]
 8109c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8109c56:	68fb      	ldr	r3, [r7, #12]
 8109c58:	3b04      	subs	r3, #4
 8109c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8109c5c:	68fb      	ldr	r3, [r7, #12]
 8109c5e:	f06f 0202 	mvn.w	r2, #2
 8109c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8109c64:	68fb      	ldr	r3, [r7, #12]
 8109c66:	3b20      	subs	r3, #32
 8109c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8109c6a:	68fb      	ldr	r3, [r7, #12]
}
 8109c6c:	4618      	mov	r0, r3
 8109c6e:	3714      	adds	r7, #20
 8109c70:	46bd      	mov	sp, r7
 8109c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c76:	4770      	bx	lr
 8109c78:	08109c7d 	.word	0x08109c7d

08109c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8109c7c:	b480      	push	{r7}
 8109c7e:	b085      	sub	sp, #20
 8109c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8109c82:	2300      	movs	r3, #0
 8109c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8109c86:	4b11      	ldr	r3, [pc, #68]	; (8109ccc <prvTaskExitError+0x50>)
 8109c88:	681b      	ldr	r3, [r3, #0]
 8109c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109c8e:	d009      	beq.n	8109ca4 <prvTaskExitError+0x28>
 8109c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c94:	f383 8811 	msr	BASEPRI, r3
 8109c98:	f3bf 8f6f 	isb	sy
 8109c9c:	f3bf 8f4f 	dsb	sy
 8109ca0:	60fb      	str	r3, [r7, #12]
 8109ca2:	e7fe      	b.n	8109ca2 <prvTaskExitError+0x26>
 8109ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ca8:	f383 8811 	msr	BASEPRI, r3
 8109cac:	f3bf 8f6f 	isb	sy
 8109cb0:	f3bf 8f4f 	dsb	sy
 8109cb4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8109cb6:	bf00      	nop
 8109cb8:	687b      	ldr	r3, [r7, #4]
 8109cba:	2b00      	cmp	r3, #0
 8109cbc:	d0fc      	beq.n	8109cb8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8109cbe:	bf00      	nop
 8109cc0:	3714      	adds	r7, #20
 8109cc2:	46bd      	mov	sp, r7
 8109cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cc8:	4770      	bx	lr
 8109cca:	bf00      	nop
 8109ccc:	10000024 	.word	0x10000024

08109cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8109cd0:	4b07      	ldr	r3, [pc, #28]	; (8109cf0 <pxCurrentTCBConst2>)
 8109cd2:	6819      	ldr	r1, [r3, #0]
 8109cd4:	6808      	ldr	r0, [r1, #0]
 8109cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109cda:	f380 8809 	msr	PSP, r0
 8109cde:	f3bf 8f6f 	isb	sy
 8109ce2:	f04f 0000 	mov.w	r0, #0
 8109ce6:	f380 8811 	msr	BASEPRI, r0
 8109cea:	4770      	bx	lr
 8109cec:	f3af 8000 	nop.w

08109cf0 <pxCurrentTCBConst2>:
 8109cf0:	10004510 	.word	0x10004510
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8109cf4:	bf00      	nop
 8109cf6:	bf00      	nop

08109cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8109cf8:	4808      	ldr	r0, [pc, #32]	; (8109d1c <prvPortStartFirstTask+0x24>)
 8109cfa:	6800      	ldr	r0, [r0, #0]
 8109cfc:	6800      	ldr	r0, [r0, #0]
 8109cfe:	f380 8808 	msr	MSP, r0
 8109d02:	f04f 0000 	mov.w	r0, #0
 8109d06:	f380 8814 	msr	CONTROL, r0
 8109d0a:	b662      	cpsie	i
 8109d0c:	b661      	cpsie	f
 8109d0e:	f3bf 8f4f 	dsb	sy
 8109d12:	f3bf 8f6f 	isb	sy
 8109d16:	df00      	svc	0
 8109d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8109d1a:	bf00      	nop
 8109d1c:	e000ed08 	.word	0xe000ed08

08109d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8109d20:	b580      	push	{r7, lr}
 8109d22:	b086      	sub	sp, #24
 8109d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8109d26:	4b44      	ldr	r3, [pc, #272]	; (8109e38 <xPortStartScheduler+0x118>)
 8109d28:	681b      	ldr	r3, [r3, #0]
 8109d2a:	4a44      	ldr	r2, [pc, #272]	; (8109e3c <xPortStartScheduler+0x11c>)
 8109d2c:	4293      	cmp	r3, r2
 8109d2e:	d109      	bne.n	8109d44 <xPortStartScheduler+0x24>
 8109d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109d34:	f383 8811 	msr	BASEPRI, r3
 8109d38:	f3bf 8f6f 	isb	sy
 8109d3c:	f3bf 8f4f 	dsb	sy
 8109d40:	613b      	str	r3, [r7, #16]
 8109d42:	e7fe      	b.n	8109d42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8109d44:	4b3c      	ldr	r3, [pc, #240]	; (8109e38 <xPortStartScheduler+0x118>)
 8109d46:	681b      	ldr	r3, [r3, #0]
 8109d48:	4a3d      	ldr	r2, [pc, #244]	; (8109e40 <xPortStartScheduler+0x120>)
 8109d4a:	4293      	cmp	r3, r2
 8109d4c:	d109      	bne.n	8109d62 <xPortStartScheduler+0x42>
 8109d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109d52:	f383 8811 	msr	BASEPRI, r3
 8109d56:	f3bf 8f6f 	isb	sy
 8109d5a:	f3bf 8f4f 	dsb	sy
 8109d5e:	60fb      	str	r3, [r7, #12]
 8109d60:	e7fe      	b.n	8109d60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8109d62:	4b38      	ldr	r3, [pc, #224]	; (8109e44 <xPortStartScheduler+0x124>)
 8109d64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8109d66:	697b      	ldr	r3, [r7, #20]
 8109d68:	781b      	ldrb	r3, [r3, #0]
 8109d6a:	b2db      	uxtb	r3, r3
 8109d6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8109d6e:	697b      	ldr	r3, [r7, #20]
 8109d70:	22ff      	movs	r2, #255	; 0xff
 8109d72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8109d74:	697b      	ldr	r3, [r7, #20]
 8109d76:	781b      	ldrb	r3, [r3, #0]
 8109d78:	b2db      	uxtb	r3, r3
 8109d7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8109d7c:	78fb      	ldrb	r3, [r7, #3]
 8109d7e:	b2db      	uxtb	r3, r3
 8109d80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8109d84:	b2da      	uxtb	r2, r3
 8109d86:	4b30      	ldr	r3, [pc, #192]	; (8109e48 <xPortStartScheduler+0x128>)
 8109d88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8109d8a:	4b30      	ldr	r3, [pc, #192]	; (8109e4c <xPortStartScheduler+0x12c>)
 8109d8c:	2207      	movs	r2, #7
 8109d8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109d90:	e009      	b.n	8109da6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8109d92:	4b2e      	ldr	r3, [pc, #184]	; (8109e4c <xPortStartScheduler+0x12c>)
 8109d94:	681b      	ldr	r3, [r3, #0]
 8109d96:	3b01      	subs	r3, #1
 8109d98:	4a2c      	ldr	r2, [pc, #176]	; (8109e4c <xPortStartScheduler+0x12c>)
 8109d9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8109d9c:	78fb      	ldrb	r3, [r7, #3]
 8109d9e:	b2db      	uxtb	r3, r3
 8109da0:	005b      	lsls	r3, r3, #1
 8109da2:	b2db      	uxtb	r3, r3
 8109da4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109da6:	78fb      	ldrb	r3, [r7, #3]
 8109da8:	b2db      	uxtb	r3, r3
 8109daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109dae:	2b80      	cmp	r3, #128	; 0x80
 8109db0:	d0ef      	beq.n	8109d92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8109db2:	4b26      	ldr	r3, [pc, #152]	; (8109e4c <xPortStartScheduler+0x12c>)
 8109db4:	681b      	ldr	r3, [r3, #0]
 8109db6:	f1c3 0307 	rsb	r3, r3, #7
 8109dba:	2b04      	cmp	r3, #4
 8109dbc:	d009      	beq.n	8109dd2 <xPortStartScheduler+0xb2>
 8109dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109dc2:	f383 8811 	msr	BASEPRI, r3
 8109dc6:	f3bf 8f6f 	isb	sy
 8109dca:	f3bf 8f4f 	dsb	sy
 8109dce:	60bb      	str	r3, [r7, #8]
 8109dd0:	e7fe      	b.n	8109dd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8109dd2:	4b1e      	ldr	r3, [pc, #120]	; (8109e4c <xPortStartScheduler+0x12c>)
 8109dd4:	681b      	ldr	r3, [r3, #0]
 8109dd6:	021b      	lsls	r3, r3, #8
 8109dd8:	4a1c      	ldr	r2, [pc, #112]	; (8109e4c <xPortStartScheduler+0x12c>)
 8109dda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8109ddc:	4b1b      	ldr	r3, [pc, #108]	; (8109e4c <xPortStartScheduler+0x12c>)
 8109dde:	681b      	ldr	r3, [r3, #0]
 8109de0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109de4:	4a19      	ldr	r2, [pc, #100]	; (8109e4c <xPortStartScheduler+0x12c>)
 8109de6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8109de8:	687b      	ldr	r3, [r7, #4]
 8109dea:	b2da      	uxtb	r2, r3
 8109dec:	697b      	ldr	r3, [r7, #20]
 8109dee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8109df0:	4b17      	ldr	r3, [pc, #92]	; (8109e50 <xPortStartScheduler+0x130>)
 8109df2:	681b      	ldr	r3, [r3, #0]
 8109df4:	4a16      	ldr	r2, [pc, #88]	; (8109e50 <xPortStartScheduler+0x130>)
 8109df6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8109dfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8109dfc:	4b14      	ldr	r3, [pc, #80]	; (8109e50 <xPortStartScheduler+0x130>)
 8109dfe:	681b      	ldr	r3, [r3, #0]
 8109e00:	4a13      	ldr	r2, [pc, #76]	; (8109e50 <xPortStartScheduler+0x130>)
 8109e02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8109e06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8109e08:	f000 f8d6 	bl	8109fb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8109e0c:	4b11      	ldr	r3, [pc, #68]	; (8109e54 <xPortStartScheduler+0x134>)
 8109e0e:	2200      	movs	r2, #0
 8109e10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8109e12:	f000 f8f5 	bl	810a000 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8109e16:	4b10      	ldr	r3, [pc, #64]	; (8109e58 <xPortStartScheduler+0x138>)
 8109e18:	681b      	ldr	r3, [r3, #0]
 8109e1a:	4a0f      	ldr	r2, [pc, #60]	; (8109e58 <xPortStartScheduler+0x138>)
 8109e1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8109e20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8109e22:	f7ff ff69 	bl	8109cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8109e26:	f001 faa1 	bl	810b36c <vTaskSwitchContext>
	prvTaskExitError();
 8109e2a:	f7ff ff27 	bl	8109c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8109e2e:	2300      	movs	r3, #0
}
 8109e30:	4618      	mov	r0, r3
 8109e32:	3718      	adds	r7, #24
 8109e34:	46bd      	mov	sp, r7
 8109e36:	bd80      	pop	{r7, pc}
 8109e38:	e000ed00 	.word	0xe000ed00
 8109e3c:	410fc271 	.word	0x410fc271
 8109e40:	410fc270 	.word	0x410fc270
 8109e44:	e000e400 	.word	0xe000e400
 8109e48:	10004508 	.word	0x10004508
 8109e4c:	1000450c 	.word	0x1000450c
 8109e50:	e000ed20 	.word	0xe000ed20
 8109e54:	10000024 	.word	0x10000024
 8109e58:	e000ef34 	.word	0xe000ef34

08109e5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8109e5c:	b480      	push	{r7}
 8109e5e:	b083      	sub	sp, #12
 8109e60:	af00      	add	r7, sp, #0
 8109e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e66:	f383 8811 	msr	BASEPRI, r3
 8109e6a:	f3bf 8f6f 	isb	sy
 8109e6e:	f3bf 8f4f 	dsb	sy
 8109e72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8109e74:	4b0e      	ldr	r3, [pc, #56]	; (8109eb0 <vPortEnterCritical+0x54>)
 8109e76:	681b      	ldr	r3, [r3, #0]
 8109e78:	3301      	adds	r3, #1
 8109e7a:	4a0d      	ldr	r2, [pc, #52]	; (8109eb0 <vPortEnterCritical+0x54>)
 8109e7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8109e7e:	4b0c      	ldr	r3, [pc, #48]	; (8109eb0 <vPortEnterCritical+0x54>)
 8109e80:	681b      	ldr	r3, [r3, #0]
 8109e82:	2b01      	cmp	r3, #1
 8109e84:	d10e      	bne.n	8109ea4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8109e86:	4b0b      	ldr	r3, [pc, #44]	; (8109eb4 <vPortEnterCritical+0x58>)
 8109e88:	681b      	ldr	r3, [r3, #0]
 8109e8a:	b2db      	uxtb	r3, r3
 8109e8c:	2b00      	cmp	r3, #0
 8109e8e:	d009      	beq.n	8109ea4 <vPortEnterCritical+0x48>
 8109e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e94:	f383 8811 	msr	BASEPRI, r3
 8109e98:	f3bf 8f6f 	isb	sy
 8109e9c:	f3bf 8f4f 	dsb	sy
 8109ea0:	603b      	str	r3, [r7, #0]
 8109ea2:	e7fe      	b.n	8109ea2 <vPortEnterCritical+0x46>
	}
}
 8109ea4:	bf00      	nop
 8109ea6:	370c      	adds	r7, #12
 8109ea8:	46bd      	mov	sp, r7
 8109eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109eae:	4770      	bx	lr
 8109eb0:	10000024 	.word	0x10000024
 8109eb4:	e000ed04 	.word	0xe000ed04

08109eb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8109eb8:	b480      	push	{r7}
 8109eba:	b083      	sub	sp, #12
 8109ebc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8109ebe:	4b11      	ldr	r3, [pc, #68]	; (8109f04 <vPortExitCritical+0x4c>)
 8109ec0:	681b      	ldr	r3, [r3, #0]
 8109ec2:	2b00      	cmp	r3, #0
 8109ec4:	d109      	bne.n	8109eda <vPortExitCritical+0x22>
 8109ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109eca:	f383 8811 	msr	BASEPRI, r3
 8109ece:	f3bf 8f6f 	isb	sy
 8109ed2:	f3bf 8f4f 	dsb	sy
 8109ed6:	607b      	str	r3, [r7, #4]
 8109ed8:	e7fe      	b.n	8109ed8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8109eda:	4b0a      	ldr	r3, [pc, #40]	; (8109f04 <vPortExitCritical+0x4c>)
 8109edc:	681b      	ldr	r3, [r3, #0]
 8109ede:	3b01      	subs	r3, #1
 8109ee0:	4a08      	ldr	r2, [pc, #32]	; (8109f04 <vPortExitCritical+0x4c>)
 8109ee2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8109ee4:	4b07      	ldr	r3, [pc, #28]	; (8109f04 <vPortExitCritical+0x4c>)
 8109ee6:	681b      	ldr	r3, [r3, #0]
 8109ee8:	2b00      	cmp	r3, #0
 8109eea:	d104      	bne.n	8109ef6 <vPortExitCritical+0x3e>
 8109eec:	2300      	movs	r3, #0
 8109eee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8109ef0:	683b      	ldr	r3, [r7, #0]
 8109ef2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8109ef6:	bf00      	nop
 8109ef8:	370c      	adds	r7, #12
 8109efa:	46bd      	mov	sp, r7
 8109efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f00:	4770      	bx	lr
 8109f02:	bf00      	nop
 8109f04:	10000024 	.word	0x10000024
	...

08109f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8109f10:	f3ef 8009 	mrs	r0, PSP
 8109f14:	f3bf 8f6f 	isb	sy
 8109f18:	4b15      	ldr	r3, [pc, #84]	; (8109f70 <pxCurrentTCBConst>)
 8109f1a:	681a      	ldr	r2, [r3, #0]
 8109f1c:	f01e 0f10 	tst.w	lr, #16
 8109f20:	bf08      	it	eq
 8109f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8109f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109f2a:	6010      	str	r0, [r2, #0]
 8109f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8109f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8109f34:	f380 8811 	msr	BASEPRI, r0
 8109f38:	f3bf 8f4f 	dsb	sy
 8109f3c:	f3bf 8f6f 	isb	sy
 8109f40:	f001 fa14 	bl	810b36c <vTaskSwitchContext>
 8109f44:	f04f 0000 	mov.w	r0, #0
 8109f48:	f380 8811 	msr	BASEPRI, r0
 8109f4c:	bc09      	pop	{r0, r3}
 8109f4e:	6819      	ldr	r1, [r3, #0]
 8109f50:	6808      	ldr	r0, [r1, #0]
 8109f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109f56:	f01e 0f10 	tst.w	lr, #16
 8109f5a:	bf08      	it	eq
 8109f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109f60:	f380 8809 	msr	PSP, r0
 8109f64:	f3bf 8f6f 	isb	sy
 8109f68:	4770      	bx	lr
 8109f6a:	bf00      	nop
 8109f6c:	f3af 8000 	nop.w

08109f70 <pxCurrentTCBConst>:
 8109f70:	10004510 	.word	0x10004510
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109f74:	bf00      	nop
 8109f76:	bf00      	nop

08109f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109f78:	b580      	push	{r7, lr}
 8109f7a:	b082      	sub	sp, #8
 8109f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8109f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f82:	f383 8811 	msr	BASEPRI, r3
 8109f86:	f3bf 8f6f 	isb	sy
 8109f8a:	f3bf 8f4f 	dsb	sy
 8109f8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109f90:	f001 f934 	bl	810b1fc <xTaskIncrementTick>
 8109f94:	4603      	mov	r3, r0
 8109f96:	2b00      	cmp	r3, #0
 8109f98:	d003      	beq.n	8109fa2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8109f9a:	4b06      	ldr	r3, [pc, #24]	; (8109fb4 <SysTick_Handler+0x3c>)
 8109f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109fa0:	601a      	str	r2, [r3, #0]
 8109fa2:	2300      	movs	r3, #0
 8109fa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109fa6:	683b      	ldr	r3, [r7, #0]
 8109fa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8109fac:	bf00      	nop
 8109fae:	3708      	adds	r7, #8
 8109fb0:	46bd      	mov	sp, r7
 8109fb2:	bd80      	pop	{r7, pc}
 8109fb4:	e000ed04 	.word	0xe000ed04

08109fb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8109fb8:	b480      	push	{r7}
 8109fba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8109fbc:	4b0b      	ldr	r3, [pc, #44]	; (8109fec <vPortSetupTimerInterrupt+0x34>)
 8109fbe:	2200      	movs	r2, #0
 8109fc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109fc2:	4b0b      	ldr	r3, [pc, #44]	; (8109ff0 <vPortSetupTimerInterrupt+0x38>)
 8109fc4:	2200      	movs	r2, #0
 8109fc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8109fc8:	4b0a      	ldr	r3, [pc, #40]	; (8109ff4 <vPortSetupTimerInterrupt+0x3c>)
 8109fca:	681b      	ldr	r3, [r3, #0]
 8109fcc:	4a0a      	ldr	r2, [pc, #40]	; (8109ff8 <vPortSetupTimerInterrupt+0x40>)
 8109fce:	fba2 2303 	umull	r2, r3, r2, r3
 8109fd2:	099b      	lsrs	r3, r3, #6
 8109fd4:	4a09      	ldr	r2, [pc, #36]	; (8109ffc <vPortSetupTimerInterrupt+0x44>)
 8109fd6:	3b01      	subs	r3, #1
 8109fd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8109fda:	4b04      	ldr	r3, [pc, #16]	; (8109fec <vPortSetupTimerInterrupt+0x34>)
 8109fdc:	2207      	movs	r2, #7
 8109fde:	601a      	str	r2, [r3, #0]
}
 8109fe0:	bf00      	nop
 8109fe2:	46bd      	mov	sp, r7
 8109fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fe8:	4770      	bx	lr
 8109fea:	bf00      	nop
 8109fec:	e000e010 	.word	0xe000e010
 8109ff0:	e000e018 	.word	0xe000e018
 8109ff4:	10000004 	.word	0x10000004
 8109ff8:	10624dd3 	.word	0x10624dd3
 8109ffc:	e000e014 	.word	0xe000e014

0810a000 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810a000:	f8df 000c 	ldr.w	r0, [pc, #12]	; 810a010 <vPortEnableVFP+0x10>
 810a004:	6801      	ldr	r1, [r0, #0]
 810a006:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810a00a:	6001      	str	r1, [r0, #0]
 810a00c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810a00e:	bf00      	nop
 810a010:	e000ed88 	.word	0xe000ed88

0810a014 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810a014:	b480      	push	{r7}
 810a016:	b085      	sub	sp, #20
 810a018:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810a01a:	f3ef 8305 	mrs	r3, IPSR
 810a01e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810a020:	68fb      	ldr	r3, [r7, #12]
 810a022:	2b0f      	cmp	r3, #15
 810a024:	d913      	bls.n	810a04e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810a026:	4a16      	ldr	r2, [pc, #88]	; (810a080 <vPortValidateInterruptPriority+0x6c>)
 810a028:	68fb      	ldr	r3, [r7, #12]
 810a02a:	4413      	add	r3, r2
 810a02c:	781b      	ldrb	r3, [r3, #0]
 810a02e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810a030:	4b14      	ldr	r3, [pc, #80]	; (810a084 <vPortValidateInterruptPriority+0x70>)
 810a032:	781b      	ldrb	r3, [r3, #0]
 810a034:	7afa      	ldrb	r2, [r7, #11]
 810a036:	429a      	cmp	r2, r3
 810a038:	d209      	bcs.n	810a04e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 810a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a03e:	f383 8811 	msr	BASEPRI, r3
 810a042:	f3bf 8f6f 	isb	sy
 810a046:	f3bf 8f4f 	dsb	sy
 810a04a:	607b      	str	r3, [r7, #4]
 810a04c:	e7fe      	b.n	810a04c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810a04e:	4b0e      	ldr	r3, [pc, #56]	; (810a088 <vPortValidateInterruptPriority+0x74>)
 810a050:	681b      	ldr	r3, [r3, #0]
 810a052:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810a056:	4b0d      	ldr	r3, [pc, #52]	; (810a08c <vPortValidateInterruptPriority+0x78>)
 810a058:	681b      	ldr	r3, [r3, #0]
 810a05a:	429a      	cmp	r2, r3
 810a05c:	d909      	bls.n	810a072 <vPortValidateInterruptPriority+0x5e>
 810a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a062:	f383 8811 	msr	BASEPRI, r3
 810a066:	f3bf 8f6f 	isb	sy
 810a06a:	f3bf 8f4f 	dsb	sy
 810a06e:	603b      	str	r3, [r7, #0]
 810a070:	e7fe      	b.n	810a070 <vPortValidateInterruptPriority+0x5c>
	}
 810a072:	bf00      	nop
 810a074:	3714      	adds	r7, #20
 810a076:	46bd      	mov	sp, r7
 810a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a07c:	4770      	bx	lr
 810a07e:	bf00      	nop
 810a080:	e000e3f0 	.word	0xe000e3f0
 810a084:	10004508 	.word	0x10004508
 810a088:	e000ed0c 	.word	0xe000ed0c
 810a08c:	1000450c 	.word	0x1000450c

0810a090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810a090:	b580      	push	{r7, lr}
 810a092:	b084      	sub	sp, #16
 810a094:	af00      	add	r7, sp, #0
 810a096:	6078      	str	r0, [r7, #4]
 810a098:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810a09a:	687b      	ldr	r3, [r7, #4]
 810a09c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810a09e:	68fb      	ldr	r3, [r7, #12]
 810a0a0:	2b00      	cmp	r3, #0
 810a0a2:	d109      	bne.n	810a0b8 <xQueueGenericReset+0x28>
 810a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0a8:	f383 8811 	msr	BASEPRI, r3
 810a0ac:	f3bf 8f6f 	isb	sy
 810a0b0:	f3bf 8f4f 	dsb	sy
 810a0b4:	60bb      	str	r3, [r7, #8]
 810a0b6:	e7fe      	b.n	810a0b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 810a0b8:	f7ff fed0 	bl	8109e5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810a0bc:	68fb      	ldr	r3, [r7, #12]
 810a0be:	681a      	ldr	r2, [r3, #0]
 810a0c0:	68fb      	ldr	r3, [r7, #12]
 810a0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a0c4:	68f9      	ldr	r1, [r7, #12]
 810a0c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810a0c8:	fb01 f303 	mul.w	r3, r1, r3
 810a0cc:	441a      	add	r2, r3
 810a0ce:	68fb      	ldr	r3, [r7, #12]
 810a0d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810a0d2:	68fb      	ldr	r3, [r7, #12]
 810a0d4:	2200      	movs	r2, #0
 810a0d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810a0d8:	68fb      	ldr	r3, [r7, #12]
 810a0da:	681a      	ldr	r2, [r3, #0]
 810a0dc:	68fb      	ldr	r3, [r7, #12]
 810a0de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810a0e0:	68fb      	ldr	r3, [r7, #12]
 810a0e2:	681a      	ldr	r2, [r3, #0]
 810a0e4:	68fb      	ldr	r3, [r7, #12]
 810a0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a0e8:	3b01      	subs	r3, #1
 810a0ea:	68f9      	ldr	r1, [r7, #12]
 810a0ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810a0ee:	fb01 f303 	mul.w	r3, r1, r3
 810a0f2:	441a      	add	r2, r3
 810a0f4:	68fb      	ldr	r3, [r7, #12]
 810a0f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810a0f8:	68fb      	ldr	r3, [r7, #12]
 810a0fa:	22ff      	movs	r2, #255	; 0xff
 810a0fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810a100:	68fb      	ldr	r3, [r7, #12]
 810a102:	22ff      	movs	r2, #255	; 0xff
 810a104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 810a108:	683b      	ldr	r3, [r7, #0]
 810a10a:	2b00      	cmp	r3, #0
 810a10c:	d114      	bne.n	810a138 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a10e:	68fb      	ldr	r3, [r7, #12]
 810a110:	691b      	ldr	r3, [r3, #16]
 810a112:	2b00      	cmp	r3, #0
 810a114:	d01a      	beq.n	810a14c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a116:	68fb      	ldr	r3, [r7, #12]
 810a118:	3310      	adds	r3, #16
 810a11a:	4618      	mov	r0, r3
 810a11c:	f001 f9d0 	bl	810b4c0 <xTaskRemoveFromEventList>
 810a120:	4603      	mov	r3, r0
 810a122:	2b00      	cmp	r3, #0
 810a124:	d012      	beq.n	810a14c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810a126:	4b0d      	ldr	r3, [pc, #52]	; (810a15c <xQueueGenericReset+0xcc>)
 810a128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a12c:	601a      	str	r2, [r3, #0]
 810a12e:	f3bf 8f4f 	dsb	sy
 810a132:	f3bf 8f6f 	isb	sy
 810a136:	e009      	b.n	810a14c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810a138:	68fb      	ldr	r3, [r7, #12]
 810a13a:	3310      	adds	r3, #16
 810a13c:	4618      	mov	r0, r3
 810a13e:	f7ff fcb5 	bl	8109aac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810a142:	68fb      	ldr	r3, [r7, #12]
 810a144:	3324      	adds	r3, #36	; 0x24
 810a146:	4618      	mov	r0, r3
 810a148:	f7ff fcb0 	bl	8109aac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810a14c:	f7ff feb4 	bl	8109eb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810a150:	2301      	movs	r3, #1
}
 810a152:	4618      	mov	r0, r3
 810a154:	3710      	adds	r7, #16
 810a156:	46bd      	mov	sp, r7
 810a158:	bd80      	pop	{r7, pc}
 810a15a:	bf00      	nop
 810a15c:	e000ed04 	.word	0xe000ed04

0810a160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810a160:	b580      	push	{r7, lr}
 810a162:	b08e      	sub	sp, #56	; 0x38
 810a164:	af02      	add	r7, sp, #8
 810a166:	60f8      	str	r0, [r7, #12]
 810a168:	60b9      	str	r1, [r7, #8]
 810a16a:	607a      	str	r2, [r7, #4]
 810a16c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810a16e:	68fb      	ldr	r3, [r7, #12]
 810a170:	2b00      	cmp	r3, #0
 810a172:	d109      	bne.n	810a188 <xQueueGenericCreateStatic+0x28>
 810a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a178:	f383 8811 	msr	BASEPRI, r3
 810a17c:	f3bf 8f6f 	isb	sy
 810a180:	f3bf 8f4f 	dsb	sy
 810a184:	62bb      	str	r3, [r7, #40]	; 0x28
 810a186:	e7fe      	b.n	810a186 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810a188:	683b      	ldr	r3, [r7, #0]
 810a18a:	2b00      	cmp	r3, #0
 810a18c:	d109      	bne.n	810a1a2 <xQueueGenericCreateStatic+0x42>
 810a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a192:	f383 8811 	msr	BASEPRI, r3
 810a196:	f3bf 8f6f 	isb	sy
 810a19a:	f3bf 8f4f 	dsb	sy
 810a19e:	627b      	str	r3, [r7, #36]	; 0x24
 810a1a0:	e7fe      	b.n	810a1a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810a1a2:	687b      	ldr	r3, [r7, #4]
 810a1a4:	2b00      	cmp	r3, #0
 810a1a6:	d002      	beq.n	810a1ae <xQueueGenericCreateStatic+0x4e>
 810a1a8:	68bb      	ldr	r3, [r7, #8]
 810a1aa:	2b00      	cmp	r3, #0
 810a1ac:	d001      	beq.n	810a1b2 <xQueueGenericCreateStatic+0x52>
 810a1ae:	2301      	movs	r3, #1
 810a1b0:	e000      	b.n	810a1b4 <xQueueGenericCreateStatic+0x54>
 810a1b2:	2300      	movs	r3, #0
 810a1b4:	2b00      	cmp	r3, #0
 810a1b6:	d109      	bne.n	810a1cc <xQueueGenericCreateStatic+0x6c>
 810a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1bc:	f383 8811 	msr	BASEPRI, r3
 810a1c0:	f3bf 8f6f 	isb	sy
 810a1c4:	f3bf 8f4f 	dsb	sy
 810a1c8:	623b      	str	r3, [r7, #32]
 810a1ca:	e7fe      	b.n	810a1ca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810a1cc:	687b      	ldr	r3, [r7, #4]
 810a1ce:	2b00      	cmp	r3, #0
 810a1d0:	d102      	bne.n	810a1d8 <xQueueGenericCreateStatic+0x78>
 810a1d2:	68bb      	ldr	r3, [r7, #8]
 810a1d4:	2b00      	cmp	r3, #0
 810a1d6:	d101      	bne.n	810a1dc <xQueueGenericCreateStatic+0x7c>
 810a1d8:	2301      	movs	r3, #1
 810a1da:	e000      	b.n	810a1de <xQueueGenericCreateStatic+0x7e>
 810a1dc:	2300      	movs	r3, #0
 810a1de:	2b00      	cmp	r3, #0
 810a1e0:	d109      	bne.n	810a1f6 <xQueueGenericCreateStatic+0x96>
 810a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1e6:	f383 8811 	msr	BASEPRI, r3
 810a1ea:	f3bf 8f6f 	isb	sy
 810a1ee:	f3bf 8f4f 	dsb	sy
 810a1f2:	61fb      	str	r3, [r7, #28]
 810a1f4:	e7fe      	b.n	810a1f4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810a1f6:	2350      	movs	r3, #80	; 0x50
 810a1f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810a1fa:	697b      	ldr	r3, [r7, #20]
 810a1fc:	2b50      	cmp	r3, #80	; 0x50
 810a1fe:	d009      	beq.n	810a214 <xQueueGenericCreateStatic+0xb4>
 810a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a204:	f383 8811 	msr	BASEPRI, r3
 810a208:	f3bf 8f6f 	isb	sy
 810a20c:	f3bf 8f4f 	dsb	sy
 810a210:	61bb      	str	r3, [r7, #24]
 810a212:	e7fe      	b.n	810a212 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810a214:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810a216:	683b      	ldr	r3, [r7, #0]
 810a218:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a21c:	2b00      	cmp	r3, #0
 810a21e:	d00d      	beq.n	810a23c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a222:	2201      	movs	r2, #1
 810a224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810a228:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a22e:	9300      	str	r3, [sp, #0]
 810a230:	4613      	mov	r3, r2
 810a232:	687a      	ldr	r2, [r7, #4]
 810a234:	68b9      	ldr	r1, [r7, #8]
 810a236:	68f8      	ldr	r0, [r7, #12]
 810a238:	f000 f844 	bl	810a2c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810a23e:	4618      	mov	r0, r3
 810a240:	3730      	adds	r7, #48	; 0x30
 810a242:	46bd      	mov	sp, r7
 810a244:	bd80      	pop	{r7, pc}

0810a246 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810a246:	b580      	push	{r7, lr}
 810a248:	b08a      	sub	sp, #40	; 0x28
 810a24a:	af02      	add	r7, sp, #8
 810a24c:	60f8      	str	r0, [r7, #12]
 810a24e:	60b9      	str	r1, [r7, #8]
 810a250:	4613      	mov	r3, r2
 810a252:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810a254:	68fb      	ldr	r3, [r7, #12]
 810a256:	2b00      	cmp	r3, #0
 810a258:	d109      	bne.n	810a26e <xQueueGenericCreate+0x28>
 810a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a25e:	f383 8811 	msr	BASEPRI, r3
 810a262:	f3bf 8f6f 	isb	sy
 810a266:	f3bf 8f4f 	dsb	sy
 810a26a:	613b      	str	r3, [r7, #16]
 810a26c:	e7fe      	b.n	810a26c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 810a26e:	68bb      	ldr	r3, [r7, #8]
 810a270:	2b00      	cmp	r3, #0
 810a272:	d102      	bne.n	810a27a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 810a274:	2300      	movs	r3, #0
 810a276:	61fb      	str	r3, [r7, #28]
 810a278:	e004      	b.n	810a284 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a27a:	68fb      	ldr	r3, [r7, #12]
 810a27c:	68ba      	ldr	r2, [r7, #8]
 810a27e:	fb02 f303 	mul.w	r3, r2, r3
 810a282:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810a284:	69fb      	ldr	r3, [r7, #28]
 810a286:	3350      	adds	r3, #80	; 0x50
 810a288:	4618      	mov	r0, r3
 810a28a:	f7ff fa39 	bl	8109700 <pvPortMalloc>
 810a28e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810a290:	69bb      	ldr	r3, [r7, #24]
 810a292:	2b00      	cmp	r3, #0
 810a294:	d011      	beq.n	810a2ba <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810a296:	69bb      	ldr	r3, [r7, #24]
 810a298:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810a29a:	697b      	ldr	r3, [r7, #20]
 810a29c:	3350      	adds	r3, #80	; 0x50
 810a29e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810a2a0:	69bb      	ldr	r3, [r7, #24]
 810a2a2:	2200      	movs	r2, #0
 810a2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810a2a8:	79fa      	ldrb	r2, [r7, #7]
 810a2aa:	69bb      	ldr	r3, [r7, #24]
 810a2ac:	9300      	str	r3, [sp, #0]
 810a2ae:	4613      	mov	r3, r2
 810a2b0:	697a      	ldr	r2, [r7, #20]
 810a2b2:	68b9      	ldr	r1, [r7, #8]
 810a2b4:	68f8      	ldr	r0, [r7, #12]
 810a2b6:	f000 f805 	bl	810a2c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810a2ba:	69bb      	ldr	r3, [r7, #24]
	}
 810a2bc:	4618      	mov	r0, r3
 810a2be:	3720      	adds	r7, #32
 810a2c0:	46bd      	mov	sp, r7
 810a2c2:	bd80      	pop	{r7, pc}

0810a2c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810a2c4:	b580      	push	{r7, lr}
 810a2c6:	b084      	sub	sp, #16
 810a2c8:	af00      	add	r7, sp, #0
 810a2ca:	60f8      	str	r0, [r7, #12]
 810a2cc:	60b9      	str	r1, [r7, #8]
 810a2ce:	607a      	str	r2, [r7, #4]
 810a2d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810a2d2:	68bb      	ldr	r3, [r7, #8]
 810a2d4:	2b00      	cmp	r3, #0
 810a2d6:	d103      	bne.n	810a2e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810a2d8:	69bb      	ldr	r3, [r7, #24]
 810a2da:	69ba      	ldr	r2, [r7, #24]
 810a2dc:	601a      	str	r2, [r3, #0]
 810a2de:	e002      	b.n	810a2e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810a2e0:	69bb      	ldr	r3, [r7, #24]
 810a2e2:	687a      	ldr	r2, [r7, #4]
 810a2e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810a2e6:	69bb      	ldr	r3, [r7, #24]
 810a2e8:	68fa      	ldr	r2, [r7, #12]
 810a2ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810a2ec:	69bb      	ldr	r3, [r7, #24]
 810a2ee:	68ba      	ldr	r2, [r7, #8]
 810a2f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810a2f2:	2101      	movs	r1, #1
 810a2f4:	69b8      	ldr	r0, [r7, #24]
 810a2f6:	f7ff fecb 	bl	810a090 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810a2fa:	69bb      	ldr	r3, [r7, #24]
 810a2fc:	78fa      	ldrb	r2, [r7, #3]
 810a2fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810a302:	bf00      	nop
 810a304:	3710      	adds	r7, #16
 810a306:	46bd      	mov	sp, r7
 810a308:	bd80      	pop	{r7, pc}

0810a30a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 810a30a:	b580      	push	{r7, lr}
 810a30c:	b08a      	sub	sp, #40	; 0x28
 810a30e:	af02      	add	r7, sp, #8
 810a310:	60f8      	str	r0, [r7, #12]
 810a312:	60b9      	str	r1, [r7, #8]
 810a314:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810a316:	68fb      	ldr	r3, [r7, #12]
 810a318:	2b00      	cmp	r3, #0
 810a31a:	d109      	bne.n	810a330 <xQueueCreateCountingSemaphoreStatic+0x26>
 810a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a320:	f383 8811 	msr	BASEPRI, r3
 810a324:	f3bf 8f6f 	isb	sy
 810a328:	f3bf 8f4f 	dsb	sy
 810a32c:	61bb      	str	r3, [r7, #24]
 810a32e:	e7fe      	b.n	810a32e <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 810a330:	68ba      	ldr	r2, [r7, #8]
 810a332:	68fb      	ldr	r3, [r7, #12]
 810a334:	429a      	cmp	r2, r3
 810a336:	d909      	bls.n	810a34c <xQueueCreateCountingSemaphoreStatic+0x42>
 810a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a33c:	f383 8811 	msr	BASEPRI, r3
 810a340:	f3bf 8f6f 	isb	sy
 810a344:	f3bf 8f4f 	dsb	sy
 810a348:	617b      	str	r3, [r7, #20]
 810a34a:	e7fe      	b.n	810a34a <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810a34c:	2302      	movs	r3, #2
 810a34e:	9300      	str	r3, [sp, #0]
 810a350:	687b      	ldr	r3, [r7, #4]
 810a352:	2200      	movs	r2, #0
 810a354:	2100      	movs	r1, #0
 810a356:	68f8      	ldr	r0, [r7, #12]
 810a358:	f7ff ff02 	bl	810a160 <xQueueGenericCreateStatic>
 810a35c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 810a35e:	69fb      	ldr	r3, [r7, #28]
 810a360:	2b00      	cmp	r3, #0
 810a362:	d002      	beq.n	810a36a <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810a364:	69fb      	ldr	r3, [r7, #28]
 810a366:	68ba      	ldr	r2, [r7, #8]
 810a368:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810a36a:	69fb      	ldr	r3, [r7, #28]
	}
 810a36c:	4618      	mov	r0, r3
 810a36e:	3720      	adds	r7, #32
 810a370:	46bd      	mov	sp, r7
 810a372:	bd80      	pop	{r7, pc}

0810a374 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 810a374:	b580      	push	{r7, lr}
 810a376:	b086      	sub	sp, #24
 810a378:	af00      	add	r7, sp, #0
 810a37a:	6078      	str	r0, [r7, #4]
 810a37c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810a37e:	687b      	ldr	r3, [r7, #4]
 810a380:	2b00      	cmp	r3, #0
 810a382:	d109      	bne.n	810a398 <xQueueCreateCountingSemaphore+0x24>
 810a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a388:	f383 8811 	msr	BASEPRI, r3
 810a38c:	f3bf 8f6f 	isb	sy
 810a390:	f3bf 8f4f 	dsb	sy
 810a394:	613b      	str	r3, [r7, #16]
 810a396:	e7fe      	b.n	810a396 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 810a398:	683a      	ldr	r2, [r7, #0]
 810a39a:	687b      	ldr	r3, [r7, #4]
 810a39c:	429a      	cmp	r2, r3
 810a39e:	d909      	bls.n	810a3b4 <xQueueCreateCountingSemaphore+0x40>
 810a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a3a4:	f383 8811 	msr	BASEPRI, r3
 810a3a8:	f3bf 8f6f 	isb	sy
 810a3ac:	f3bf 8f4f 	dsb	sy
 810a3b0:	60fb      	str	r3, [r7, #12]
 810a3b2:	e7fe      	b.n	810a3b2 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810a3b4:	2202      	movs	r2, #2
 810a3b6:	2100      	movs	r1, #0
 810a3b8:	6878      	ldr	r0, [r7, #4]
 810a3ba:	f7ff ff44 	bl	810a246 <xQueueGenericCreate>
 810a3be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810a3c0:	697b      	ldr	r3, [r7, #20]
 810a3c2:	2b00      	cmp	r3, #0
 810a3c4:	d002      	beq.n	810a3cc <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810a3c6:	697b      	ldr	r3, [r7, #20]
 810a3c8:	683a      	ldr	r2, [r7, #0]
 810a3ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810a3cc:	697b      	ldr	r3, [r7, #20]
	}
 810a3ce:	4618      	mov	r0, r3
 810a3d0:	3718      	adds	r7, #24
 810a3d2:	46bd      	mov	sp, r7
 810a3d4:	bd80      	pop	{r7, pc}
	...

0810a3d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810a3d8:	b580      	push	{r7, lr}
 810a3da:	b08e      	sub	sp, #56	; 0x38
 810a3dc:	af00      	add	r7, sp, #0
 810a3de:	60f8      	str	r0, [r7, #12]
 810a3e0:	60b9      	str	r1, [r7, #8]
 810a3e2:	607a      	str	r2, [r7, #4]
 810a3e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810a3e6:	2300      	movs	r3, #0
 810a3e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810a3ea:	68fb      	ldr	r3, [r7, #12]
 810a3ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a3f0:	2b00      	cmp	r3, #0
 810a3f2:	d109      	bne.n	810a408 <xQueueGenericSend+0x30>
 810a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a3f8:	f383 8811 	msr	BASEPRI, r3
 810a3fc:	f3bf 8f6f 	isb	sy
 810a400:	f3bf 8f4f 	dsb	sy
 810a404:	62bb      	str	r3, [r7, #40]	; 0x28
 810a406:	e7fe      	b.n	810a406 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a408:	68bb      	ldr	r3, [r7, #8]
 810a40a:	2b00      	cmp	r3, #0
 810a40c:	d103      	bne.n	810a416 <xQueueGenericSend+0x3e>
 810a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a412:	2b00      	cmp	r3, #0
 810a414:	d101      	bne.n	810a41a <xQueueGenericSend+0x42>
 810a416:	2301      	movs	r3, #1
 810a418:	e000      	b.n	810a41c <xQueueGenericSend+0x44>
 810a41a:	2300      	movs	r3, #0
 810a41c:	2b00      	cmp	r3, #0
 810a41e:	d109      	bne.n	810a434 <xQueueGenericSend+0x5c>
 810a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a424:	f383 8811 	msr	BASEPRI, r3
 810a428:	f3bf 8f6f 	isb	sy
 810a42c:	f3bf 8f4f 	dsb	sy
 810a430:	627b      	str	r3, [r7, #36]	; 0x24
 810a432:	e7fe      	b.n	810a432 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810a434:	683b      	ldr	r3, [r7, #0]
 810a436:	2b02      	cmp	r3, #2
 810a438:	d103      	bne.n	810a442 <xQueueGenericSend+0x6a>
 810a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a43e:	2b01      	cmp	r3, #1
 810a440:	d101      	bne.n	810a446 <xQueueGenericSend+0x6e>
 810a442:	2301      	movs	r3, #1
 810a444:	e000      	b.n	810a448 <xQueueGenericSend+0x70>
 810a446:	2300      	movs	r3, #0
 810a448:	2b00      	cmp	r3, #0
 810a44a:	d109      	bne.n	810a460 <xQueueGenericSend+0x88>
 810a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a450:	f383 8811 	msr	BASEPRI, r3
 810a454:	f3bf 8f6f 	isb	sy
 810a458:	f3bf 8f4f 	dsb	sy
 810a45c:	623b      	str	r3, [r7, #32]
 810a45e:	e7fe      	b.n	810a45e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810a460:	f001 f9e4 	bl	810b82c <xTaskGetSchedulerState>
 810a464:	4603      	mov	r3, r0
 810a466:	2b00      	cmp	r3, #0
 810a468:	d102      	bne.n	810a470 <xQueueGenericSend+0x98>
 810a46a:	687b      	ldr	r3, [r7, #4]
 810a46c:	2b00      	cmp	r3, #0
 810a46e:	d101      	bne.n	810a474 <xQueueGenericSend+0x9c>
 810a470:	2301      	movs	r3, #1
 810a472:	e000      	b.n	810a476 <xQueueGenericSend+0x9e>
 810a474:	2300      	movs	r3, #0
 810a476:	2b00      	cmp	r3, #0
 810a478:	d109      	bne.n	810a48e <xQueueGenericSend+0xb6>
 810a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a47e:	f383 8811 	msr	BASEPRI, r3
 810a482:	f3bf 8f6f 	isb	sy
 810a486:	f3bf 8f4f 	dsb	sy
 810a48a:	61fb      	str	r3, [r7, #28]
 810a48c:	e7fe      	b.n	810a48c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810a48e:	f7ff fce5 	bl	8109e5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a49a:	429a      	cmp	r2, r3
 810a49c:	d302      	bcc.n	810a4a4 <xQueueGenericSend+0xcc>
 810a49e:	683b      	ldr	r3, [r7, #0]
 810a4a0:	2b02      	cmp	r3, #2
 810a4a2:	d129      	bne.n	810a4f8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810a4a4:	683a      	ldr	r2, [r7, #0]
 810a4a6:	68b9      	ldr	r1, [r7, #8]
 810a4a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a4aa:	f000 fa21 	bl	810a8f0 <prvCopyDataToQueue>
 810a4ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a4b4:	2b00      	cmp	r3, #0
 810a4b6:	d010      	beq.n	810a4da <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a4ba:	3324      	adds	r3, #36	; 0x24
 810a4bc:	4618      	mov	r0, r3
 810a4be:	f000 ffff 	bl	810b4c0 <xTaskRemoveFromEventList>
 810a4c2:	4603      	mov	r3, r0
 810a4c4:	2b00      	cmp	r3, #0
 810a4c6:	d013      	beq.n	810a4f0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810a4c8:	4b3f      	ldr	r3, [pc, #252]	; (810a5c8 <xQueueGenericSend+0x1f0>)
 810a4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a4ce:	601a      	str	r2, [r3, #0]
 810a4d0:	f3bf 8f4f 	dsb	sy
 810a4d4:	f3bf 8f6f 	isb	sy
 810a4d8:	e00a      	b.n	810a4f0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a4dc:	2b00      	cmp	r3, #0
 810a4de:	d007      	beq.n	810a4f0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810a4e0:	4b39      	ldr	r3, [pc, #228]	; (810a5c8 <xQueueGenericSend+0x1f0>)
 810a4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a4e6:	601a      	str	r2, [r3, #0]
 810a4e8:	f3bf 8f4f 	dsb	sy
 810a4ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810a4f0:	f7ff fce2 	bl	8109eb8 <vPortExitCritical>
				return pdPASS;
 810a4f4:	2301      	movs	r3, #1
 810a4f6:	e063      	b.n	810a5c0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810a4f8:	687b      	ldr	r3, [r7, #4]
 810a4fa:	2b00      	cmp	r3, #0
 810a4fc:	d103      	bne.n	810a506 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810a4fe:	f7ff fcdb 	bl	8109eb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810a502:	2300      	movs	r3, #0
 810a504:	e05c      	b.n	810a5c0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810a506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a508:	2b00      	cmp	r3, #0
 810a50a:	d106      	bne.n	810a51a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810a50c:	f107 0314 	add.w	r3, r7, #20
 810a510:	4618      	mov	r0, r3
 810a512:	f001 f837 	bl	810b584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810a516:	2301      	movs	r3, #1
 810a518:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810a51a:	f7ff fccd 	bl	8109eb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810a51e:	f000 fdb3 	bl	810b088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810a522:	f7ff fc9b 	bl	8109e5c <vPortEnterCritical>
 810a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a52c:	b25b      	sxtb	r3, r3
 810a52e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a532:	d103      	bne.n	810a53c <xQueueGenericSend+0x164>
 810a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a536:	2200      	movs	r2, #0
 810a538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a53e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a542:	b25b      	sxtb	r3, r3
 810a544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a548:	d103      	bne.n	810a552 <xQueueGenericSend+0x17a>
 810a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a54c:	2200      	movs	r2, #0
 810a54e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a552:	f7ff fcb1 	bl	8109eb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810a556:	1d3a      	adds	r2, r7, #4
 810a558:	f107 0314 	add.w	r3, r7, #20
 810a55c:	4611      	mov	r1, r2
 810a55e:	4618      	mov	r0, r3
 810a560:	f001 f826 	bl	810b5b0 <xTaskCheckForTimeOut>
 810a564:	4603      	mov	r3, r0
 810a566:	2b00      	cmp	r3, #0
 810a568:	d124      	bne.n	810a5b4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810a56a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a56c:	f000 fab8 	bl	810aae0 <prvIsQueueFull>
 810a570:	4603      	mov	r3, r0
 810a572:	2b00      	cmp	r3, #0
 810a574:	d018      	beq.n	810a5a8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a578:	3310      	adds	r3, #16
 810a57a:	687a      	ldr	r2, [r7, #4]
 810a57c:	4611      	mov	r1, r2
 810a57e:	4618      	mov	r0, r3
 810a580:	f000 ff50 	bl	810b424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810a584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a586:	f000 fa43 	bl	810aa10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810a58a:	f000 fd8b 	bl	810b0a4 <xTaskResumeAll>
 810a58e:	4603      	mov	r3, r0
 810a590:	2b00      	cmp	r3, #0
 810a592:	f47f af7c 	bne.w	810a48e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 810a596:	4b0c      	ldr	r3, [pc, #48]	; (810a5c8 <xQueueGenericSend+0x1f0>)
 810a598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a59c:	601a      	str	r2, [r3, #0]
 810a59e:	f3bf 8f4f 	dsb	sy
 810a5a2:	f3bf 8f6f 	isb	sy
 810a5a6:	e772      	b.n	810a48e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810a5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a5aa:	f000 fa31 	bl	810aa10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810a5ae:	f000 fd79 	bl	810b0a4 <xTaskResumeAll>
 810a5b2:	e76c      	b.n	810a48e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810a5b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a5b6:	f000 fa2b 	bl	810aa10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810a5ba:	f000 fd73 	bl	810b0a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810a5be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810a5c0:	4618      	mov	r0, r3
 810a5c2:	3738      	adds	r7, #56	; 0x38
 810a5c4:	46bd      	mov	sp, r7
 810a5c6:	bd80      	pop	{r7, pc}
 810a5c8:	e000ed04 	.word	0xe000ed04

0810a5cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810a5cc:	b580      	push	{r7, lr}
 810a5ce:	b08e      	sub	sp, #56	; 0x38
 810a5d0:	af00      	add	r7, sp, #0
 810a5d2:	60f8      	str	r0, [r7, #12]
 810a5d4:	60b9      	str	r1, [r7, #8]
 810a5d6:	607a      	str	r2, [r7, #4]
 810a5d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810a5da:	68fb      	ldr	r3, [r7, #12]
 810a5dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a5e0:	2b00      	cmp	r3, #0
 810a5e2:	d109      	bne.n	810a5f8 <xQueueGenericSendFromISR+0x2c>
 810a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a5e8:	f383 8811 	msr	BASEPRI, r3
 810a5ec:	f3bf 8f6f 	isb	sy
 810a5f0:	f3bf 8f4f 	dsb	sy
 810a5f4:	627b      	str	r3, [r7, #36]	; 0x24
 810a5f6:	e7fe      	b.n	810a5f6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a5f8:	68bb      	ldr	r3, [r7, #8]
 810a5fa:	2b00      	cmp	r3, #0
 810a5fc:	d103      	bne.n	810a606 <xQueueGenericSendFromISR+0x3a>
 810a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a602:	2b00      	cmp	r3, #0
 810a604:	d101      	bne.n	810a60a <xQueueGenericSendFromISR+0x3e>
 810a606:	2301      	movs	r3, #1
 810a608:	e000      	b.n	810a60c <xQueueGenericSendFromISR+0x40>
 810a60a:	2300      	movs	r3, #0
 810a60c:	2b00      	cmp	r3, #0
 810a60e:	d109      	bne.n	810a624 <xQueueGenericSendFromISR+0x58>
 810a610:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a614:	f383 8811 	msr	BASEPRI, r3
 810a618:	f3bf 8f6f 	isb	sy
 810a61c:	f3bf 8f4f 	dsb	sy
 810a620:	623b      	str	r3, [r7, #32]
 810a622:	e7fe      	b.n	810a622 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810a624:	683b      	ldr	r3, [r7, #0]
 810a626:	2b02      	cmp	r3, #2
 810a628:	d103      	bne.n	810a632 <xQueueGenericSendFromISR+0x66>
 810a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a62e:	2b01      	cmp	r3, #1
 810a630:	d101      	bne.n	810a636 <xQueueGenericSendFromISR+0x6a>
 810a632:	2301      	movs	r3, #1
 810a634:	e000      	b.n	810a638 <xQueueGenericSendFromISR+0x6c>
 810a636:	2300      	movs	r3, #0
 810a638:	2b00      	cmp	r3, #0
 810a63a:	d109      	bne.n	810a650 <xQueueGenericSendFromISR+0x84>
 810a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a640:	f383 8811 	msr	BASEPRI, r3
 810a644:	f3bf 8f6f 	isb	sy
 810a648:	f3bf 8f4f 	dsb	sy
 810a64c:	61fb      	str	r3, [r7, #28]
 810a64e:	e7fe      	b.n	810a64e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810a650:	f7ff fce0 	bl	810a014 <vPortValidateInterruptPriority>
	__asm volatile
 810a654:	f3ef 8211 	mrs	r2, BASEPRI
 810a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a65c:	f383 8811 	msr	BASEPRI, r3
 810a660:	f3bf 8f6f 	isb	sy
 810a664:	f3bf 8f4f 	dsb	sy
 810a668:	61ba      	str	r2, [r7, #24]
 810a66a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810a66c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810a66e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a678:	429a      	cmp	r2, r3
 810a67a:	d302      	bcc.n	810a682 <xQueueGenericSendFromISR+0xb6>
 810a67c:	683b      	ldr	r3, [r7, #0]
 810a67e:	2b02      	cmp	r3, #2
 810a680:	d12c      	bne.n	810a6dc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810a68c:	683a      	ldr	r2, [r7, #0]
 810a68e:	68b9      	ldr	r1, [r7, #8]
 810a690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a692:	f000 f92d 	bl	810a8f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810a696:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 810a69a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a69e:	d112      	bne.n	810a6c6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6a4:	2b00      	cmp	r3, #0
 810a6a6:	d016      	beq.n	810a6d6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a6aa:	3324      	adds	r3, #36	; 0x24
 810a6ac:	4618      	mov	r0, r3
 810a6ae:	f000 ff07 	bl	810b4c0 <xTaskRemoveFromEventList>
 810a6b2:	4603      	mov	r3, r0
 810a6b4:	2b00      	cmp	r3, #0
 810a6b6:	d00e      	beq.n	810a6d6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810a6b8:	687b      	ldr	r3, [r7, #4]
 810a6ba:	2b00      	cmp	r3, #0
 810a6bc:	d00b      	beq.n	810a6d6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810a6be:	687b      	ldr	r3, [r7, #4]
 810a6c0:	2201      	movs	r2, #1
 810a6c2:	601a      	str	r2, [r3, #0]
 810a6c4:	e007      	b.n	810a6d6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810a6c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810a6ca:	3301      	adds	r3, #1
 810a6cc:	b2db      	uxtb	r3, r3
 810a6ce:	b25a      	sxtb	r2, r3
 810a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a6d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810a6d6:	2301      	movs	r3, #1
 810a6d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 810a6da:	e001      	b.n	810a6e0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810a6dc:	2300      	movs	r3, #0
 810a6de:	637b      	str	r3, [r7, #52]	; 0x34
 810a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a6e2:	613b      	str	r3, [r7, #16]
	__asm volatile
 810a6e4:	693b      	ldr	r3, [r7, #16]
 810a6e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810a6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 810a6ec:	4618      	mov	r0, r3
 810a6ee:	3738      	adds	r7, #56	; 0x38
 810a6f0:	46bd      	mov	sp, r7
 810a6f2:	bd80      	pop	{r7, pc}

0810a6f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810a6f4:	b580      	push	{r7, lr}
 810a6f6:	b08c      	sub	sp, #48	; 0x30
 810a6f8:	af00      	add	r7, sp, #0
 810a6fa:	60f8      	str	r0, [r7, #12]
 810a6fc:	60b9      	str	r1, [r7, #8]
 810a6fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810a700:	2300      	movs	r3, #0
 810a702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810a704:	68fb      	ldr	r3, [r7, #12]
 810a706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a70a:	2b00      	cmp	r3, #0
 810a70c:	d109      	bne.n	810a722 <xQueueReceive+0x2e>
	__asm volatile
 810a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a712:	f383 8811 	msr	BASEPRI, r3
 810a716:	f3bf 8f6f 	isb	sy
 810a71a:	f3bf 8f4f 	dsb	sy
 810a71e:	623b      	str	r3, [r7, #32]
 810a720:	e7fe      	b.n	810a720 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a722:	68bb      	ldr	r3, [r7, #8]
 810a724:	2b00      	cmp	r3, #0
 810a726:	d103      	bne.n	810a730 <xQueueReceive+0x3c>
 810a728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a72c:	2b00      	cmp	r3, #0
 810a72e:	d101      	bne.n	810a734 <xQueueReceive+0x40>
 810a730:	2301      	movs	r3, #1
 810a732:	e000      	b.n	810a736 <xQueueReceive+0x42>
 810a734:	2300      	movs	r3, #0
 810a736:	2b00      	cmp	r3, #0
 810a738:	d109      	bne.n	810a74e <xQueueReceive+0x5a>
 810a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a73e:	f383 8811 	msr	BASEPRI, r3
 810a742:	f3bf 8f6f 	isb	sy
 810a746:	f3bf 8f4f 	dsb	sy
 810a74a:	61fb      	str	r3, [r7, #28]
 810a74c:	e7fe      	b.n	810a74c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810a74e:	f001 f86d 	bl	810b82c <xTaskGetSchedulerState>
 810a752:	4603      	mov	r3, r0
 810a754:	2b00      	cmp	r3, #0
 810a756:	d102      	bne.n	810a75e <xQueueReceive+0x6a>
 810a758:	687b      	ldr	r3, [r7, #4]
 810a75a:	2b00      	cmp	r3, #0
 810a75c:	d101      	bne.n	810a762 <xQueueReceive+0x6e>
 810a75e:	2301      	movs	r3, #1
 810a760:	e000      	b.n	810a764 <xQueueReceive+0x70>
 810a762:	2300      	movs	r3, #0
 810a764:	2b00      	cmp	r3, #0
 810a766:	d109      	bne.n	810a77c <xQueueReceive+0x88>
 810a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a76c:	f383 8811 	msr	BASEPRI, r3
 810a770:	f3bf 8f6f 	isb	sy
 810a774:	f3bf 8f4f 	dsb	sy
 810a778:	61bb      	str	r3, [r7, #24]
 810a77a:	e7fe      	b.n	810a77a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810a77c:	f7ff fb6e 	bl	8109e5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a784:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a788:	2b00      	cmp	r3, #0
 810a78a:	d01f      	beq.n	810a7cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810a78c:	68b9      	ldr	r1, [r7, #8]
 810a78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a790:	f000 f918 	bl	810a9c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a796:	1e5a      	subs	r2, r3, #1
 810a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a79a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a79e:	691b      	ldr	r3, [r3, #16]
 810a7a0:	2b00      	cmp	r3, #0
 810a7a2:	d00f      	beq.n	810a7c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a7a6:	3310      	adds	r3, #16
 810a7a8:	4618      	mov	r0, r3
 810a7aa:	f000 fe89 	bl	810b4c0 <xTaskRemoveFromEventList>
 810a7ae:	4603      	mov	r3, r0
 810a7b0:	2b00      	cmp	r3, #0
 810a7b2:	d007      	beq.n	810a7c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810a7b4:	4b3c      	ldr	r3, [pc, #240]	; (810a8a8 <xQueueReceive+0x1b4>)
 810a7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a7ba:	601a      	str	r2, [r3, #0]
 810a7bc:	f3bf 8f4f 	dsb	sy
 810a7c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810a7c4:	f7ff fb78 	bl	8109eb8 <vPortExitCritical>
				return pdPASS;
 810a7c8:	2301      	movs	r3, #1
 810a7ca:	e069      	b.n	810a8a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810a7cc:	687b      	ldr	r3, [r7, #4]
 810a7ce:	2b00      	cmp	r3, #0
 810a7d0:	d103      	bne.n	810a7da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810a7d2:	f7ff fb71 	bl	8109eb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810a7d6:	2300      	movs	r3, #0
 810a7d8:	e062      	b.n	810a8a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 810a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a7dc:	2b00      	cmp	r3, #0
 810a7de:	d106      	bne.n	810a7ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810a7e0:	f107 0310 	add.w	r3, r7, #16
 810a7e4:	4618      	mov	r0, r3
 810a7e6:	f000 fecd 	bl	810b584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810a7ea:	2301      	movs	r3, #1
 810a7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810a7ee:	f7ff fb63 	bl	8109eb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810a7f2:	f000 fc49 	bl	810b088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810a7f6:	f7ff fb31 	bl	8109e5c <vPortEnterCritical>
 810a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a7fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a800:	b25b      	sxtb	r3, r3
 810a802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a806:	d103      	bne.n	810a810 <xQueueReceive+0x11c>
 810a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a80a:	2200      	movs	r2, #0
 810a80c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a816:	b25b      	sxtb	r3, r3
 810a818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a81c:	d103      	bne.n	810a826 <xQueueReceive+0x132>
 810a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a820:	2200      	movs	r2, #0
 810a822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a826:	f7ff fb47 	bl	8109eb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810a82a:	1d3a      	adds	r2, r7, #4
 810a82c:	f107 0310 	add.w	r3, r7, #16
 810a830:	4611      	mov	r1, r2
 810a832:	4618      	mov	r0, r3
 810a834:	f000 febc 	bl	810b5b0 <xTaskCheckForTimeOut>
 810a838:	4603      	mov	r3, r0
 810a83a:	2b00      	cmp	r3, #0
 810a83c:	d123      	bne.n	810a886 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810a83e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a840:	f000 f938 	bl	810aab4 <prvIsQueueEmpty>
 810a844:	4603      	mov	r3, r0
 810a846:	2b00      	cmp	r3, #0
 810a848:	d017      	beq.n	810a87a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a84c:	3324      	adds	r3, #36	; 0x24
 810a84e:	687a      	ldr	r2, [r7, #4]
 810a850:	4611      	mov	r1, r2
 810a852:	4618      	mov	r0, r3
 810a854:	f000 fde6 	bl	810b424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810a858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a85a:	f000 f8d9 	bl	810aa10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810a85e:	f000 fc21 	bl	810b0a4 <xTaskResumeAll>
 810a862:	4603      	mov	r3, r0
 810a864:	2b00      	cmp	r3, #0
 810a866:	d189      	bne.n	810a77c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 810a868:	4b0f      	ldr	r3, [pc, #60]	; (810a8a8 <xQueueReceive+0x1b4>)
 810a86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a86e:	601a      	str	r2, [r3, #0]
 810a870:	f3bf 8f4f 	dsb	sy
 810a874:	f3bf 8f6f 	isb	sy
 810a878:	e780      	b.n	810a77c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810a87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a87c:	f000 f8c8 	bl	810aa10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810a880:	f000 fc10 	bl	810b0a4 <xTaskResumeAll>
 810a884:	e77a      	b.n	810a77c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810a886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a888:	f000 f8c2 	bl	810aa10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810a88c:	f000 fc0a 	bl	810b0a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810a890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a892:	f000 f90f 	bl	810aab4 <prvIsQueueEmpty>
 810a896:	4603      	mov	r3, r0
 810a898:	2b00      	cmp	r3, #0
 810a89a:	f43f af6f 	beq.w	810a77c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810a89e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810a8a0:	4618      	mov	r0, r3
 810a8a2:	3730      	adds	r7, #48	; 0x30
 810a8a4:	46bd      	mov	sp, r7
 810a8a6:	bd80      	pop	{r7, pc}
 810a8a8:	e000ed04 	.word	0xe000ed04

0810a8ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 810a8ac:	b580      	push	{r7, lr}
 810a8ae:	b084      	sub	sp, #16
 810a8b0:	af00      	add	r7, sp, #0
 810a8b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 810a8b4:	687b      	ldr	r3, [r7, #4]
 810a8b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810a8b8:	68fb      	ldr	r3, [r7, #12]
 810a8ba:	2b00      	cmp	r3, #0
 810a8bc:	d109      	bne.n	810a8d2 <vQueueDelete+0x26>
 810a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a8c2:	f383 8811 	msr	BASEPRI, r3
 810a8c6:	f3bf 8f6f 	isb	sy
 810a8ca:	f3bf 8f4f 	dsb	sy
 810a8ce:	60bb      	str	r3, [r7, #8]
 810a8d0:	e7fe      	b.n	810a8d0 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 810a8d2:	68f8      	ldr	r0, [r7, #12]
 810a8d4:	f000 f944 	bl	810ab60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 810a8d8:	68fb      	ldr	r3, [r7, #12]
 810a8da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 810a8de:	2b00      	cmp	r3, #0
 810a8e0:	d102      	bne.n	810a8e8 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 810a8e2:	68f8      	ldr	r0, [r7, #12]
 810a8e4:	f7fe ffce 	bl	8109884 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 810a8e8:	bf00      	nop
 810a8ea:	3710      	adds	r7, #16
 810a8ec:	46bd      	mov	sp, r7
 810a8ee:	bd80      	pop	{r7, pc}

0810a8f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810a8f0:	b580      	push	{r7, lr}
 810a8f2:	b086      	sub	sp, #24
 810a8f4:	af00      	add	r7, sp, #0
 810a8f6:	60f8      	str	r0, [r7, #12]
 810a8f8:	60b9      	str	r1, [r7, #8]
 810a8fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810a8fc:	2300      	movs	r3, #0
 810a8fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a900:	68fb      	ldr	r3, [r7, #12]
 810a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810a906:	68fb      	ldr	r3, [r7, #12]
 810a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a90a:	2b00      	cmp	r3, #0
 810a90c:	d10d      	bne.n	810a92a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810a90e:	68fb      	ldr	r3, [r7, #12]
 810a910:	681b      	ldr	r3, [r3, #0]
 810a912:	2b00      	cmp	r3, #0
 810a914:	d14d      	bne.n	810a9b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810a916:	68fb      	ldr	r3, [r7, #12]
 810a918:	689b      	ldr	r3, [r3, #8]
 810a91a:	4618      	mov	r0, r3
 810a91c:	f000 ffa4 	bl	810b868 <xTaskPriorityDisinherit>
 810a920:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810a922:	68fb      	ldr	r3, [r7, #12]
 810a924:	2200      	movs	r2, #0
 810a926:	609a      	str	r2, [r3, #8]
 810a928:	e043      	b.n	810a9b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810a92a:	687b      	ldr	r3, [r7, #4]
 810a92c:	2b00      	cmp	r3, #0
 810a92e:	d119      	bne.n	810a964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810a930:	68fb      	ldr	r3, [r7, #12]
 810a932:	6858      	ldr	r0, [r3, #4]
 810a934:	68fb      	ldr	r3, [r7, #12]
 810a936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a938:	461a      	mov	r2, r3
 810a93a:	68b9      	ldr	r1, [r7, #8]
 810a93c:	f003 fdfe 	bl	810e53c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810a940:	68fb      	ldr	r3, [r7, #12]
 810a942:	685a      	ldr	r2, [r3, #4]
 810a944:	68fb      	ldr	r3, [r7, #12]
 810a946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a948:	441a      	add	r2, r3
 810a94a:	68fb      	ldr	r3, [r7, #12]
 810a94c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a94e:	68fb      	ldr	r3, [r7, #12]
 810a950:	685a      	ldr	r2, [r3, #4]
 810a952:	68fb      	ldr	r3, [r7, #12]
 810a954:	689b      	ldr	r3, [r3, #8]
 810a956:	429a      	cmp	r2, r3
 810a958:	d32b      	bcc.n	810a9b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810a95a:	68fb      	ldr	r3, [r7, #12]
 810a95c:	681a      	ldr	r2, [r3, #0]
 810a95e:	68fb      	ldr	r3, [r7, #12]
 810a960:	605a      	str	r2, [r3, #4]
 810a962:	e026      	b.n	810a9b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810a964:	68fb      	ldr	r3, [r7, #12]
 810a966:	68d8      	ldr	r0, [r3, #12]
 810a968:	68fb      	ldr	r3, [r7, #12]
 810a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a96c:	461a      	mov	r2, r3
 810a96e:	68b9      	ldr	r1, [r7, #8]
 810a970:	f003 fde4 	bl	810e53c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810a974:	68fb      	ldr	r3, [r7, #12]
 810a976:	68da      	ldr	r2, [r3, #12]
 810a978:	68fb      	ldr	r3, [r7, #12]
 810a97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a97c:	425b      	negs	r3, r3
 810a97e:	441a      	add	r2, r3
 810a980:	68fb      	ldr	r3, [r7, #12]
 810a982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a984:	68fb      	ldr	r3, [r7, #12]
 810a986:	68da      	ldr	r2, [r3, #12]
 810a988:	68fb      	ldr	r3, [r7, #12]
 810a98a:	681b      	ldr	r3, [r3, #0]
 810a98c:	429a      	cmp	r2, r3
 810a98e:	d207      	bcs.n	810a9a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810a990:	68fb      	ldr	r3, [r7, #12]
 810a992:	689a      	ldr	r2, [r3, #8]
 810a994:	68fb      	ldr	r3, [r7, #12]
 810a996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a998:	425b      	negs	r3, r3
 810a99a:	441a      	add	r2, r3
 810a99c:	68fb      	ldr	r3, [r7, #12]
 810a99e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	2b02      	cmp	r3, #2
 810a9a4:	d105      	bne.n	810a9b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a9a6:	693b      	ldr	r3, [r7, #16]
 810a9a8:	2b00      	cmp	r3, #0
 810a9aa:	d002      	beq.n	810a9b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810a9ac:	693b      	ldr	r3, [r7, #16]
 810a9ae:	3b01      	subs	r3, #1
 810a9b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810a9b2:	693b      	ldr	r3, [r7, #16]
 810a9b4:	1c5a      	adds	r2, r3, #1
 810a9b6:	68fb      	ldr	r3, [r7, #12]
 810a9b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810a9ba:	697b      	ldr	r3, [r7, #20]
}
 810a9bc:	4618      	mov	r0, r3
 810a9be:	3718      	adds	r7, #24
 810a9c0:	46bd      	mov	sp, r7
 810a9c2:	bd80      	pop	{r7, pc}

0810a9c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810a9c4:	b580      	push	{r7, lr}
 810a9c6:	b082      	sub	sp, #8
 810a9c8:	af00      	add	r7, sp, #0
 810a9ca:	6078      	str	r0, [r7, #4]
 810a9cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810a9ce:	687b      	ldr	r3, [r7, #4]
 810a9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a9d2:	2b00      	cmp	r3, #0
 810a9d4:	d018      	beq.n	810aa08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810a9d6:	687b      	ldr	r3, [r7, #4]
 810a9d8:	68da      	ldr	r2, [r3, #12]
 810a9da:	687b      	ldr	r3, [r7, #4]
 810a9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a9de:	441a      	add	r2, r3
 810a9e0:	687b      	ldr	r3, [r7, #4]
 810a9e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810a9e4:	687b      	ldr	r3, [r7, #4]
 810a9e6:	68da      	ldr	r2, [r3, #12]
 810a9e8:	687b      	ldr	r3, [r7, #4]
 810a9ea:	689b      	ldr	r3, [r3, #8]
 810a9ec:	429a      	cmp	r2, r3
 810a9ee:	d303      	bcc.n	810a9f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	681a      	ldr	r2, [r3, #0]
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810a9f8:	687b      	ldr	r3, [r7, #4]
 810a9fa:	68d9      	ldr	r1, [r3, #12]
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810aa00:	461a      	mov	r2, r3
 810aa02:	6838      	ldr	r0, [r7, #0]
 810aa04:	f003 fd9a 	bl	810e53c <memcpy>
	}
}
 810aa08:	bf00      	nop
 810aa0a:	3708      	adds	r7, #8
 810aa0c:	46bd      	mov	sp, r7
 810aa0e:	bd80      	pop	{r7, pc}

0810aa10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810aa10:	b580      	push	{r7, lr}
 810aa12:	b084      	sub	sp, #16
 810aa14:	af00      	add	r7, sp, #0
 810aa16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810aa18:	f7ff fa20 	bl	8109e5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810aa22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810aa24:	e011      	b.n	810aa4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810aa2a:	2b00      	cmp	r3, #0
 810aa2c:	d012      	beq.n	810aa54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810aa2e:	687b      	ldr	r3, [r7, #4]
 810aa30:	3324      	adds	r3, #36	; 0x24
 810aa32:	4618      	mov	r0, r3
 810aa34:	f000 fd44 	bl	810b4c0 <xTaskRemoveFromEventList>
 810aa38:	4603      	mov	r3, r0
 810aa3a:	2b00      	cmp	r3, #0
 810aa3c:	d001      	beq.n	810aa42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810aa3e:	f000 fe17 	bl	810b670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810aa42:	7bfb      	ldrb	r3, [r7, #15]
 810aa44:	3b01      	subs	r3, #1
 810aa46:	b2db      	uxtb	r3, r3
 810aa48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810aa4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810aa4e:	2b00      	cmp	r3, #0
 810aa50:	dce9      	bgt.n	810aa26 <prvUnlockQueue+0x16>
 810aa52:	e000      	b.n	810aa56 <prvUnlockQueue+0x46>
					break;
 810aa54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810aa56:	687b      	ldr	r3, [r7, #4]
 810aa58:	22ff      	movs	r2, #255	; 0xff
 810aa5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810aa5e:	f7ff fa2b 	bl	8109eb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810aa62:	f7ff f9fb 	bl	8109e5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810aa66:	687b      	ldr	r3, [r7, #4]
 810aa68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810aa6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810aa6e:	e011      	b.n	810aa94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810aa70:	687b      	ldr	r3, [r7, #4]
 810aa72:	691b      	ldr	r3, [r3, #16]
 810aa74:	2b00      	cmp	r3, #0
 810aa76:	d012      	beq.n	810aa9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810aa78:	687b      	ldr	r3, [r7, #4]
 810aa7a:	3310      	adds	r3, #16
 810aa7c:	4618      	mov	r0, r3
 810aa7e:	f000 fd1f 	bl	810b4c0 <xTaskRemoveFromEventList>
 810aa82:	4603      	mov	r3, r0
 810aa84:	2b00      	cmp	r3, #0
 810aa86:	d001      	beq.n	810aa8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810aa88:	f000 fdf2 	bl	810b670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810aa8c:	7bbb      	ldrb	r3, [r7, #14]
 810aa8e:	3b01      	subs	r3, #1
 810aa90:	b2db      	uxtb	r3, r3
 810aa92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810aa94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810aa98:	2b00      	cmp	r3, #0
 810aa9a:	dce9      	bgt.n	810aa70 <prvUnlockQueue+0x60>
 810aa9c:	e000      	b.n	810aaa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810aa9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810aaa0:	687b      	ldr	r3, [r7, #4]
 810aaa2:	22ff      	movs	r2, #255	; 0xff
 810aaa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810aaa8:	f7ff fa06 	bl	8109eb8 <vPortExitCritical>
}
 810aaac:	bf00      	nop
 810aaae:	3710      	adds	r7, #16
 810aab0:	46bd      	mov	sp, r7
 810aab2:	bd80      	pop	{r7, pc}

0810aab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810aab4:	b580      	push	{r7, lr}
 810aab6:	b084      	sub	sp, #16
 810aab8:	af00      	add	r7, sp, #0
 810aaba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810aabc:	f7ff f9ce 	bl	8109e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810aac0:	687b      	ldr	r3, [r7, #4]
 810aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810aac4:	2b00      	cmp	r3, #0
 810aac6:	d102      	bne.n	810aace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810aac8:	2301      	movs	r3, #1
 810aaca:	60fb      	str	r3, [r7, #12]
 810aacc:	e001      	b.n	810aad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810aace:	2300      	movs	r3, #0
 810aad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810aad2:	f7ff f9f1 	bl	8109eb8 <vPortExitCritical>

	return xReturn;
 810aad6:	68fb      	ldr	r3, [r7, #12]
}
 810aad8:	4618      	mov	r0, r3
 810aada:	3710      	adds	r7, #16
 810aadc:	46bd      	mov	sp, r7
 810aade:	bd80      	pop	{r7, pc}

0810aae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810aae0:	b580      	push	{r7, lr}
 810aae2:	b084      	sub	sp, #16
 810aae4:	af00      	add	r7, sp, #0
 810aae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810aae8:	f7ff f9b8 	bl	8109e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810aaec:	687b      	ldr	r3, [r7, #4]
 810aaee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810aaf0:	687b      	ldr	r3, [r7, #4]
 810aaf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810aaf4:	429a      	cmp	r2, r3
 810aaf6:	d102      	bne.n	810aafe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810aaf8:	2301      	movs	r3, #1
 810aafa:	60fb      	str	r3, [r7, #12]
 810aafc:	e001      	b.n	810ab02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810aafe:	2300      	movs	r3, #0
 810ab00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810ab02:	f7ff f9d9 	bl	8109eb8 <vPortExitCritical>

	return xReturn;
 810ab06:	68fb      	ldr	r3, [r7, #12]
}
 810ab08:	4618      	mov	r0, r3
 810ab0a:	3710      	adds	r7, #16
 810ab0c:	46bd      	mov	sp, r7
 810ab0e:	bd80      	pop	{r7, pc}

0810ab10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810ab10:	b480      	push	{r7}
 810ab12:	b085      	sub	sp, #20
 810ab14:	af00      	add	r7, sp, #0
 810ab16:	6078      	str	r0, [r7, #4]
 810ab18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810ab1a:	2300      	movs	r3, #0
 810ab1c:	60fb      	str	r3, [r7, #12]
 810ab1e:	e014      	b.n	810ab4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810ab20:	4a0e      	ldr	r2, [pc, #56]	; (810ab5c <vQueueAddToRegistry+0x4c>)
 810ab22:	68fb      	ldr	r3, [r7, #12]
 810ab24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810ab28:	2b00      	cmp	r3, #0
 810ab2a:	d10b      	bne.n	810ab44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810ab2c:	490b      	ldr	r1, [pc, #44]	; (810ab5c <vQueueAddToRegistry+0x4c>)
 810ab2e:	68fb      	ldr	r3, [r7, #12]
 810ab30:	683a      	ldr	r2, [r7, #0]
 810ab32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810ab36:	4a09      	ldr	r2, [pc, #36]	; (810ab5c <vQueueAddToRegistry+0x4c>)
 810ab38:	68fb      	ldr	r3, [r7, #12]
 810ab3a:	00db      	lsls	r3, r3, #3
 810ab3c:	4413      	add	r3, r2
 810ab3e:	687a      	ldr	r2, [r7, #4]
 810ab40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810ab42:	e005      	b.n	810ab50 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810ab44:	68fb      	ldr	r3, [r7, #12]
 810ab46:	3301      	adds	r3, #1
 810ab48:	60fb      	str	r3, [r7, #12]
 810ab4a:	68fb      	ldr	r3, [r7, #12]
 810ab4c:	2b07      	cmp	r3, #7
 810ab4e:	d9e7      	bls.n	810ab20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810ab50:	bf00      	nop
 810ab52:	3714      	adds	r7, #20
 810ab54:	46bd      	mov	sp, r7
 810ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab5a:	4770      	bx	lr
 810ab5c:	10006188 	.word	0x10006188

0810ab60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 810ab60:	b480      	push	{r7}
 810ab62:	b085      	sub	sp, #20
 810ab64:	af00      	add	r7, sp, #0
 810ab66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810ab68:	2300      	movs	r3, #0
 810ab6a:	60fb      	str	r3, [r7, #12]
 810ab6c:	e016      	b.n	810ab9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 810ab6e:	4a10      	ldr	r2, [pc, #64]	; (810abb0 <vQueueUnregisterQueue+0x50>)
 810ab70:	68fb      	ldr	r3, [r7, #12]
 810ab72:	00db      	lsls	r3, r3, #3
 810ab74:	4413      	add	r3, r2
 810ab76:	685b      	ldr	r3, [r3, #4]
 810ab78:	687a      	ldr	r2, [r7, #4]
 810ab7a:	429a      	cmp	r2, r3
 810ab7c:	d10b      	bne.n	810ab96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 810ab7e:	4a0c      	ldr	r2, [pc, #48]	; (810abb0 <vQueueUnregisterQueue+0x50>)
 810ab80:	68fb      	ldr	r3, [r7, #12]
 810ab82:	2100      	movs	r1, #0
 810ab84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 810ab88:	4a09      	ldr	r2, [pc, #36]	; (810abb0 <vQueueUnregisterQueue+0x50>)
 810ab8a:	68fb      	ldr	r3, [r7, #12]
 810ab8c:	00db      	lsls	r3, r3, #3
 810ab8e:	4413      	add	r3, r2
 810ab90:	2200      	movs	r2, #0
 810ab92:	605a      	str	r2, [r3, #4]
				break;
 810ab94:	e005      	b.n	810aba2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810ab96:	68fb      	ldr	r3, [r7, #12]
 810ab98:	3301      	adds	r3, #1
 810ab9a:	60fb      	str	r3, [r7, #12]
 810ab9c:	68fb      	ldr	r3, [r7, #12]
 810ab9e:	2b07      	cmp	r3, #7
 810aba0:	d9e5      	bls.n	810ab6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 810aba2:	bf00      	nop
 810aba4:	3714      	adds	r7, #20
 810aba6:	46bd      	mov	sp, r7
 810aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abac:	4770      	bx	lr
 810abae:	bf00      	nop
 810abb0:	10006188 	.word	0x10006188

0810abb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810abb4:	b580      	push	{r7, lr}
 810abb6:	b086      	sub	sp, #24
 810abb8:	af00      	add	r7, sp, #0
 810abba:	60f8      	str	r0, [r7, #12]
 810abbc:	60b9      	str	r1, [r7, #8]
 810abbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810abc0:	68fb      	ldr	r3, [r7, #12]
 810abc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810abc4:	f7ff f94a 	bl	8109e5c <vPortEnterCritical>
 810abc8:	697b      	ldr	r3, [r7, #20]
 810abca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810abce:	b25b      	sxtb	r3, r3
 810abd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810abd4:	d103      	bne.n	810abde <vQueueWaitForMessageRestricted+0x2a>
 810abd6:	697b      	ldr	r3, [r7, #20]
 810abd8:	2200      	movs	r2, #0
 810abda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810abde:	697b      	ldr	r3, [r7, #20]
 810abe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810abe4:	b25b      	sxtb	r3, r3
 810abe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810abea:	d103      	bne.n	810abf4 <vQueueWaitForMessageRestricted+0x40>
 810abec:	697b      	ldr	r3, [r7, #20]
 810abee:	2200      	movs	r2, #0
 810abf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810abf4:	f7ff f960 	bl	8109eb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810abf8:	697b      	ldr	r3, [r7, #20]
 810abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810abfc:	2b00      	cmp	r3, #0
 810abfe:	d106      	bne.n	810ac0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810ac00:	697b      	ldr	r3, [r7, #20]
 810ac02:	3324      	adds	r3, #36	; 0x24
 810ac04:	687a      	ldr	r2, [r7, #4]
 810ac06:	68b9      	ldr	r1, [r7, #8]
 810ac08:	4618      	mov	r0, r3
 810ac0a:	f000 fc2f 	bl	810b46c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810ac0e:	6978      	ldr	r0, [r7, #20]
 810ac10:	f7ff fefe 	bl	810aa10 <prvUnlockQueue>
	}
 810ac14:	bf00      	nop
 810ac16:	3718      	adds	r7, #24
 810ac18:	46bd      	mov	sp, r7
 810ac1a:	bd80      	pop	{r7, pc}

0810ac1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810ac1c:	b580      	push	{r7, lr}
 810ac1e:	b08e      	sub	sp, #56	; 0x38
 810ac20:	af04      	add	r7, sp, #16
 810ac22:	60f8      	str	r0, [r7, #12]
 810ac24:	60b9      	str	r1, [r7, #8]
 810ac26:	607a      	str	r2, [r7, #4]
 810ac28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810ac2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac2c:	2b00      	cmp	r3, #0
 810ac2e:	d109      	bne.n	810ac44 <xTaskCreateStatic+0x28>
 810ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac34:	f383 8811 	msr	BASEPRI, r3
 810ac38:	f3bf 8f6f 	isb	sy
 810ac3c:	f3bf 8f4f 	dsb	sy
 810ac40:	623b      	str	r3, [r7, #32]
 810ac42:	e7fe      	b.n	810ac42 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 810ac44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ac46:	2b00      	cmp	r3, #0
 810ac48:	d109      	bne.n	810ac5e <xTaskCreateStatic+0x42>
 810ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac4e:	f383 8811 	msr	BASEPRI, r3
 810ac52:	f3bf 8f6f 	isb	sy
 810ac56:	f3bf 8f4f 	dsb	sy
 810ac5a:	61fb      	str	r3, [r7, #28]
 810ac5c:	e7fe      	b.n	810ac5c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810ac5e:	235c      	movs	r3, #92	; 0x5c
 810ac60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810ac62:	693b      	ldr	r3, [r7, #16]
 810ac64:	2b5c      	cmp	r3, #92	; 0x5c
 810ac66:	d009      	beq.n	810ac7c <xTaskCreateStatic+0x60>
 810ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac6c:	f383 8811 	msr	BASEPRI, r3
 810ac70:	f3bf 8f6f 	isb	sy
 810ac74:	f3bf 8f4f 	dsb	sy
 810ac78:	61bb      	str	r3, [r7, #24]
 810ac7a:	e7fe      	b.n	810ac7a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810ac7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ac80:	2b00      	cmp	r3, #0
 810ac82:	d01e      	beq.n	810acc2 <xTaskCreateStatic+0xa6>
 810ac84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac86:	2b00      	cmp	r3, #0
 810ac88:	d01b      	beq.n	810acc2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810ac8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ac8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ac90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810ac92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ac96:	2202      	movs	r2, #2
 810ac98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810ac9c:	2300      	movs	r3, #0
 810ac9e:	9303      	str	r3, [sp, #12]
 810aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aca2:	9302      	str	r3, [sp, #8]
 810aca4:	f107 0314 	add.w	r3, r7, #20
 810aca8:	9301      	str	r3, [sp, #4]
 810acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810acac:	9300      	str	r3, [sp, #0]
 810acae:	683b      	ldr	r3, [r7, #0]
 810acb0:	687a      	ldr	r2, [r7, #4]
 810acb2:	68b9      	ldr	r1, [r7, #8]
 810acb4:	68f8      	ldr	r0, [r7, #12]
 810acb6:	f000 f850 	bl	810ad5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810acba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810acbc:	f000 f8dc 	bl	810ae78 <prvAddNewTaskToReadyList>
 810acc0:	e001      	b.n	810acc6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810acc2:	2300      	movs	r3, #0
 810acc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810acc6:	697b      	ldr	r3, [r7, #20]
	}
 810acc8:	4618      	mov	r0, r3
 810acca:	3728      	adds	r7, #40	; 0x28
 810accc:	46bd      	mov	sp, r7
 810acce:	bd80      	pop	{r7, pc}

0810acd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810acd0:	b580      	push	{r7, lr}
 810acd2:	b08c      	sub	sp, #48	; 0x30
 810acd4:	af04      	add	r7, sp, #16
 810acd6:	60f8      	str	r0, [r7, #12]
 810acd8:	60b9      	str	r1, [r7, #8]
 810acda:	603b      	str	r3, [r7, #0]
 810acdc:	4613      	mov	r3, r2
 810acde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810ace0:	88fb      	ldrh	r3, [r7, #6]
 810ace2:	009b      	lsls	r3, r3, #2
 810ace4:	4618      	mov	r0, r3
 810ace6:	f7fe fd0b 	bl	8109700 <pvPortMalloc>
 810acea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810acec:	697b      	ldr	r3, [r7, #20]
 810acee:	2b00      	cmp	r3, #0
 810acf0:	d00e      	beq.n	810ad10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810acf2:	205c      	movs	r0, #92	; 0x5c
 810acf4:	f7fe fd04 	bl	8109700 <pvPortMalloc>
 810acf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810acfa:	69fb      	ldr	r3, [r7, #28]
 810acfc:	2b00      	cmp	r3, #0
 810acfe:	d003      	beq.n	810ad08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810ad00:	69fb      	ldr	r3, [r7, #28]
 810ad02:	697a      	ldr	r2, [r7, #20]
 810ad04:	631a      	str	r2, [r3, #48]	; 0x30
 810ad06:	e005      	b.n	810ad14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810ad08:	6978      	ldr	r0, [r7, #20]
 810ad0a:	f7fe fdbb 	bl	8109884 <vPortFree>
 810ad0e:	e001      	b.n	810ad14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810ad10:	2300      	movs	r3, #0
 810ad12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810ad14:	69fb      	ldr	r3, [r7, #28]
 810ad16:	2b00      	cmp	r3, #0
 810ad18:	d017      	beq.n	810ad4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810ad1a:	69fb      	ldr	r3, [r7, #28]
 810ad1c:	2200      	movs	r2, #0
 810ad1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810ad22:	88fa      	ldrh	r2, [r7, #6]
 810ad24:	2300      	movs	r3, #0
 810ad26:	9303      	str	r3, [sp, #12]
 810ad28:	69fb      	ldr	r3, [r7, #28]
 810ad2a:	9302      	str	r3, [sp, #8]
 810ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ad2e:	9301      	str	r3, [sp, #4]
 810ad30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ad32:	9300      	str	r3, [sp, #0]
 810ad34:	683b      	ldr	r3, [r7, #0]
 810ad36:	68b9      	ldr	r1, [r7, #8]
 810ad38:	68f8      	ldr	r0, [r7, #12]
 810ad3a:	f000 f80e 	bl	810ad5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810ad3e:	69f8      	ldr	r0, [r7, #28]
 810ad40:	f000 f89a 	bl	810ae78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810ad44:	2301      	movs	r3, #1
 810ad46:	61bb      	str	r3, [r7, #24]
 810ad48:	e002      	b.n	810ad50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810ad4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810ad4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810ad50:	69bb      	ldr	r3, [r7, #24]
	}
 810ad52:	4618      	mov	r0, r3
 810ad54:	3720      	adds	r7, #32
 810ad56:	46bd      	mov	sp, r7
 810ad58:	bd80      	pop	{r7, pc}

0810ad5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810ad5a:	b580      	push	{r7, lr}
 810ad5c:	b088      	sub	sp, #32
 810ad5e:	af00      	add	r7, sp, #0
 810ad60:	60f8      	str	r0, [r7, #12]
 810ad62:	60b9      	str	r1, [r7, #8]
 810ad64:	607a      	str	r2, [r7, #4]
 810ad66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	009b      	lsls	r3, r3, #2
 810ad70:	461a      	mov	r2, r3
 810ad72:	21a5      	movs	r1, #165	; 0xa5
 810ad74:	f003 fbed 	bl	810e552 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810ad7c:	687b      	ldr	r3, [r7, #4]
 810ad7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810ad82:	3b01      	subs	r3, #1
 810ad84:	009b      	lsls	r3, r3, #2
 810ad86:	4413      	add	r3, r2
 810ad88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810ad8a:	69bb      	ldr	r3, [r7, #24]
 810ad8c:	f023 0307 	bic.w	r3, r3, #7
 810ad90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810ad92:	69bb      	ldr	r3, [r7, #24]
 810ad94:	f003 0307 	and.w	r3, r3, #7
 810ad98:	2b00      	cmp	r3, #0
 810ad9a:	d009      	beq.n	810adb0 <prvInitialiseNewTask+0x56>
 810ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ada0:	f383 8811 	msr	BASEPRI, r3
 810ada4:	f3bf 8f6f 	isb	sy
 810ada8:	f3bf 8f4f 	dsb	sy
 810adac:	617b      	str	r3, [r7, #20]
 810adae:	e7fe      	b.n	810adae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810adb0:	68bb      	ldr	r3, [r7, #8]
 810adb2:	2b00      	cmp	r3, #0
 810adb4:	d01f      	beq.n	810adf6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810adb6:	2300      	movs	r3, #0
 810adb8:	61fb      	str	r3, [r7, #28]
 810adba:	e012      	b.n	810ade2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810adbc:	68ba      	ldr	r2, [r7, #8]
 810adbe:	69fb      	ldr	r3, [r7, #28]
 810adc0:	4413      	add	r3, r2
 810adc2:	7819      	ldrb	r1, [r3, #0]
 810adc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810adc6:	69fb      	ldr	r3, [r7, #28]
 810adc8:	4413      	add	r3, r2
 810adca:	3334      	adds	r3, #52	; 0x34
 810adcc:	460a      	mov	r2, r1
 810adce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810add0:	68ba      	ldr	r2, [r7, #8]
 810add2:	69fb      	ldr	r3, [r7, #28]
 810add4:	4413      	add	r3, r2
 810add6:	781b      	ldrb	r3, [r3, #0]
 810add8:	2b00      	cmp	r3, #0
 810adda:	d006      	beq.n	810adea <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810addc:	69fb      	ldr	r3, [r7, #28]
 810adde:	3301      	adds	r3, #1
 810ade0:	61fb      	str	r3, [r7, #28]
 810ade2:	69fb      	ldr	r3, [r7, #28]
 810ade4:	2b0f      	cmp	r3, #15
 810ade6:	d9e9      	bls.n	810adbc <prvInitialiseNewTask+0x62>
 810ade8:	e000      	b.n	810adec <prvInitialiseNewTask+0x92>
			{
				break;
 810adea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810adee:	2200      	movs	r2, #0
 810adf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810adf4:	e003      	b.n	810adfe <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810adf8:	2200      	movs	r2, #0
 810adfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae00:	2b37      	cmp	r3, #55	; 0x37
 810ae02:	d901      	bls.n	810ae08 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810ae04:	2337      	movs	r3, #55	; 0x37
 810ae06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810ae0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810ae12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae16:	2200      	movs	r2, #0
 810ae18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae1c:	3304      	adds	r3, #4
 810ae1e:	4618      	mov	r0, r3
 810ae20:	f7fe fe64 	bl	8109aec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae26:	3318      	adds	r3, #24
 810ae28:	4618      	mov	r0, r3
 810ae2a:	f7fe fe5f 	bl	8109aec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ae32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ae42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae46:	2200      	movs	r2, #0
 810ae48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae4c:	2200      	movs	r2, #0
 810ae4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810ae52:	683a      	ldr	r2, [r7, #0]
 810ae54:	68f9      	ldr	r1, [r7, #12]
 810ae56:	69b8      	ldr	r0, [r7, #24]
 810ae58:	f7fe fedc 	bl	8109c14 <pxPortInitialiseStack>
 810ae5c:	4602      	mov	r2, r0
 810ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ae64:	2b00      	cmp	r3, #0
 810ae66:	d002      	beq.n	810ae6e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ae6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ae6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810ae6e:	bf00      	nop
 810ae70:	3720      	adds	r7, #32
 810ae72:	46bd      	mov	sp, r7
 810ae74:	bd80      	pop	{r7, pc}
	...

0810ae78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810ae78:	b580      	push	{r7, lr}
 810ae7a:	b082      	sub	sp, #8
 810ae7c:	af00      	add	r7, sp, #0
 810ae7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810ae80:	f7fe ffec 	bl	8109e5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810ae84:	4b2d      	ldr	r3, [pc, #180]	; (810af3c <prvAddNewTaskToReadyList+0xc4>)
 810ae86:	681b      	ldr	r3, [r3, #0]
 810ae88:	3301      	adds	r3, #1
 810ae8a:	4a2c      	ldr	r2, [pc, #176]	; (810af3c <prvAddNewTaskToReadyList+0xc4>)
 810ae8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810ae8e:	4b2c      	ldr	r3, [pc, #176]	; (810af40 <prvAddNewTaskToReadyList+0xc8>)
 810ae90:	681b      	ldr	r3, [r3, #0]
 810ae92:	2b00      	cmp	r3, #0
 810ae94:	d109      	bne.n	810aeaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810ae96:	4a2a      	ldr	r2, [pc, #168]	; (810af40 <prvAddNewTaskToReadyList+0xc8>)
 810ae98:	687b      	ldr	r3, [r7, #4]
 810ae9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810ae9c:	4b27      	ldr	r3, [pc, #156]	; (810af3c <prvAddNewTaskToReadyList+0xc4>)
 810ae9e:	681b      	ldr	r3, [r3, #0]
 810aea0:	2b01      	cmp	r3, #1
 810aea2:	d110      	bne.n	810aec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810aea4:	f000 fc08 	bl	810b6b8 <prvInitialiseTaskLists>
 810aea8:	e00d      	b.n	810aec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810aeaa:	4b26      	ldr	r3, [pc, #152]	; (810af44 <prvAddNewTaskToReadyList+0xcc>)
 810aeac:	681b      	ldr	r3, [r3, #0]
 810aeae:	2b00      	cmp	r3, #0
 810aeb0:	d109      	bne.n	810aec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810aeb2:	4b23      	ldr	r3, [pc, #140]	; (810af40 <prvAddNewTaskToReadyList+0xc8>)
 810aeb4:	681b      	ldr	r3, [r3, #0]
 810aeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aeb8:	687b      	ldr	r3, [r7, #4]
 810aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aebc:	429a      	cmp	r2, r3
 810aebe:	d802      	bhi.n	810aec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810aec0:	4a1f      	ldr	r2, [pc, #124]	; (810af40 <prvAddNewTaskToReadyList+0xc8>)
 810aec2:	687b      	ldr	r3, [r7, #4]
 810aec4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810aec6:	4b20      	ldr	r3, [pc, #128]	; (810af48 <prvAddNewTaskToReadyList+0xd0>)
 810aec8:	681b      	ldr	r3, [r3, #0]
 810aeca:	3301      	adds	r3, #1
 810aecc:	4a1e      	ldr	r2, [pc, #120]	; (810af48 <prvAddNewTaskToReadyList+0xd0>)
 810aece:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810aed0:	4b1d      	ldr	r3, [pc, #116]	; (810af48 <prvAddNewTaskToReadyList+0xd0>)
 810aed2:	681a      	ldr	r2, [r3, #0]
 810aed4:	687b      	ldr	r3, [r7, #4]
 810aed6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810aed8:	687b      	ldr	r3, [r7, #4]
 810aeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aedc:	4b1b      	ldr	r3, [pc, #108]	; (810af4c <prvAddNewTaskToReadyList+0xd4>)
 810aede:	681b      	ldr	r3, [r3, #0]
 810aee0:	429a      	cmp	r2, r3
 810aee2:	d903      	bls.n	810aeec <prvAddNewTaskToReadyList+0x74>
 810aee4:	687b      	ldr	r3, [r7, #4]
 810aee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aee8:	4a18      	ldr	r2, [pc, #96]	; (810af4c <prvAddNewTaskToReadyList+0xd4>)
 810aeea:	6013      	str	r3, [r2, #0]
 810aeec:	687b      	ldr	r3, [r7, #4]
 810aeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aef0:	4613      	mov	r3, r2
 810aef2:	009b      	lsls	r3, r3, #2
 810aef4:	4413      	add	r3, r2
 810aef6:	009b      	lsls	r3, r3, #2
 810aef8:	4a15      	ldr	r2, [pc, #84]	; (810af50 <prvAddNewTaskToReadyList+0xd8>)
 810aefa:	441a      	add	r2, r3
 810aefc:	687b      	ldr	r3, [r7, #4]
 810aefe:	3304      	adds	r3, #4
 810af00:	4619      	mov	r1, r3
 810af02:	4610      	mov	r0, r2
 810af04:	f7fe fdff 	bl	8109b06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810af08:	f7fe ffd6 	bl	8109eb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810af0c:	4b0d      	ldr	r3, [pc, #52]	; (810af44 <prvAddNewTaskToReadyList+0xcc>)
 810af0e:	681b      	ldr	r3, [r3, #0]
 810af10:	2b00      	cmp	r3, #0
 810af12:	d00e      	beq.n	810af32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810af14:	4b0a      	ldr	r3, [pc, #40]	; (810af40 <prvAddNewTaskToReadyList+0xc8>)
 810af16:	681b      	ldr	r3, [r3, #0]
 810af18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810af1a:	687b      	ldr	r3, [r7, #4]
 810af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810af1e:	429a      	cmp	r2, r3
 810af20:	d207      	bcs.n	810af32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810af22:	4b0c      	ldr	r3, [pc, #48]	; (810af54 <prvAddNewTaskToReadyList+0xdc>)
 810af24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810af28:	601a      	str	r2, [r3, #0]
 810af2a:	f3bf 8f4f 	dsb	sy
 810af2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810af32:	bf00      	nop
 810af34:	3708      	adds	r7, #8
 810af36:	46bd      	mov	sp, r7
 810af38:	bd80      	pop	{r7, pc}
 810af3a:	bf00      	nop
 810af3c:	100049e4 	.word	0x100049e4
 810af40:	10004510 	.word	0x10004510
 810af44:	100049f0 	.word	0x100049f0
 810af48:	10004a00 	.word	0x10004a00
 810af4c:	100049ec 	.word	0x100049ec
 810af50:	10004514 	.word	0x10004514
 810af54:	e000ed04 	.word	0xe000ed04

0810af58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810af58:	b580      	push	{r7, lr}
 810af5a:	b084      	sub	sp, #16
 810af5c:	af00      	add	r7, sp, #0
 810af5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810af60:	2300      	movs	r3, #0
 810af62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810af64:	687b      	ldr	r3, [r7, #4]
 810af66:	2b00      	cmp	r3, #0
 810af68:	d016      	beq.n	810af98 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810af6a:	4b13      	ldr	r3, [pc, #76]	; (810afb8 <vTaskDelay+0x60>)
 810af6c:	681b      	ldr	r3, [r3, #0]
 810af6e:	2b00      	cmp	r3, #0
 810af70:	d009      	beq.n	810af86 <vTaskDelay+0x2e>
 810af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af76:	f383 8811 	msr	BASEPRI, r3
 810af7a:	f3bf 8f6f 	isb	sy
 810af7e:	f3bf 8f4f 	dsb	sy
 810af82:	60bb      	str	r3, [r7, #8]
 810af84:	e7fe      	b.n	810af84 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 810af86:	f000 f87f 	bl	810b088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810af8a:	2100      	movs	r1, #0
 810af8c:	6878      	ldr	r0, [r7, #4]
 810af8e:	f000 fcd7 	bl	810b940 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810af92:	f000 f887 	bl	810b0a4 <xTaskResumeAll>
 810af96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810af98:	68fb      	ldr	r3, [r7, #12]
 810af9a:	2b00      	cmp	r3, #0
 810af9c:	d107      	bne.n	810afae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 810af9e:	4b07      	ldr	r3, [pc, #28]	; (810afbc <vTaskDelay+0x64>)
 810afa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810afa4:	601a      	str	r2, [r3, #0]
 810afa6:	f3bf 8f4f 	dsb	sy
 810afaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810afae:	bf00      	nop
 810afb0:	3710      	adds	r7, #16
 810afb2:	46bd      	mov	sp, r7
 810afb4:	bd80      	pop	{r7, pc}
 810afb6:	bf00      	nop
 810afb8:	10004a0c 	.word	0x10004a0c
 810afbc:	e000ed04 	.word	0xe000ed04

0810afc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810afc0:	b580      	push	{r7, lr}
 810afc2:	b08a      	sub	sp, #40	; 0x28
 810afc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810afc6:	2300      	movs	r3, #0
 810afc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810afca:	2300      	movs	r3, #0
 810afcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810afce:	463a      	mov	r2, r7
 810afd0:	1d39      	adds	r1, r7, #4
 810afd2:	f107 0308 	add.w	r3, r7, #8
 810afd6:	4618      	mov	r0, r3
 810afd8:	f7fe fb5e 	bl	8109698 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810afdc:	6839      	ldr	r1, [r7, #0]
 810afde:	687b      	ldr	r3, [r7, #4]
 810afe0:	68ba      	ldr	r2, [r7, #8]
 810afe2:	9202      	str	r2, [sp, #8]
 810afe4:	9301      	str	r3, [sp, #4]
 810afe6:	2300      	movs	r3, #0
 810afe8:	9300      	str	r3, [sp, #0]
 810afea:	2300      	movs	r3, #0
 810afec:	460a      	mov	r2, r1
 810afee:	4920      	ldr	r1, [pc, #128]	; (810b070 <vTaskStartScheduler+0xb0>)
 810aff0:	4820      	ldr	r0, [pc, #128]	; (810b074 <vTaskStartScheduler+0xb4>)
 810aff2:	f7ff fe13 	bl	810ac1c <xTaskCreateStatic>
 810aff6:	4602      	mov	r2, r0
 810aff8:	4b1f      	ldr	r3, [pc, #124]	; (810b078 <vTaskStartScheduler+0xb8>)
 810affa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810affc:	4b1e      	ldr	r3, [pc, #120]	; (810b078 <vTaskStartScheduler+0xb8>)
 810affe:	681b      	ldr	r3, [r3, #0]
 810b000:	2b00      	cmp	r3, #0
 810b002:	d002      	beq.n	810b00a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810b004:	2301      	movs	r3, #1
 810b006:	617b      	str	r3, [r7, #20]
 810b008:	e001      	b.n	810b00e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810b00a:	2300      	movs	r3, #0
 810b00c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810b00e:	697b      	ldr	r3, [r7, #20]
 810b010:	2b01      	cmp	r3, #1
 810b012:	d102      	bne.n	810b01a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810b014:	f000 fce8 	bl	810b9e8 <xTimerCreateTimerTask>
 810b018:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810b01a:	697b      	ldr	r3, [r7, #20]
 810b01c:	2b01      	cmp	r3, #1
 810b01e:	d115      	bne.n	810b04c <vTaskStartScheduler+0x8c>
 810b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b024:	f383 8811 	msr	BASEPRI, r3
 810b028:	f3bf 8f6f 	isb	sy
 810b02c:	f3bf 8f4f 	dsb	sy
 810b030:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810b032:	4b12      	ldr	r3, [pc, #72]	; (810b07c <vTaskStartScheduler+0xbc>)
 810b034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810b038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810b03a:	4b11      	ldr	r3, [pc, #68]	; (810b080 <vTaskStartScheduler+0xc0>)
 810b03c:	2201      	movs	r2, #1
 810b03e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810b040:	4b10      	ldr	r3, [pc, #64]	; (810b084 <vTaskStartScheduler+0xc4>)
 810b042:	2200      	movs	r2, #0
 810b044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810b046:	f7fe fe6b 	bl	8109d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810b04a:	e00d      	b.n	810b068 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810b04c:	697b      	ldr	r3, [r7, #20]
 810b04e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810b052:	d109      	bne.n	810b068 <vTaskStartScheduler+0xa8>
 810b054:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b058:	f383 8811 	msr	BASEPRI, r3
 810b05c:	f3bf 8f6f 	isb	sy
 810b060:	f3bf 8f4f 	dsb	sy
 810b064:	60fb      	str	r3, [r7, #12]
 810b066:	e7fe      	b.n	810b066 <vTaskStartScheduler+0xa6>
}
 810b068:	bf00      	nop
 810b06a:	3718      	adds	r7, #24
 810b06c:	46bd      	mov	sp, r7
 810b06e:	bd80      	pop	{r7, pc}
 810b070:	08111304 	.word	0x08111304
 810b074:	0810b689 	.word	0x0810b689
 810b078:	10004a08 	.word	0x10004a08
 810b07c:	10004a04 	.word	0x10004a04
 810b080:	100049f0 	.word	0x100049f0
 810b084:	100049e8 	.word	0x100049e8

0810b088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810b088:	b480      	push	{r7}
 810b08a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 810b08c:	4b04      	ldr	r3, [pc, #16]	; (810b0a0 <vTaskSuspendAll+0x18>)
 810b08e:	681b      	ldr	r3, [r3, #0]
 810b090:	3301      	adds	r3, #1
 810b092:	4a03      	ldr	r2, [pc, #12]	; (810b0a0 <vTaskSuspendAll+0x18>)
 810b094:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 810b096:	bf00      	nop
 810b098:	46bd      	mov	sp, r7
 810b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b09e:	4770      	bx	lr
 810b0a0:	10004a0c 	.word	0x10004a0c

0810b0a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810b0a4:	b580      	push	{r7, lr}
 810b0a6:	b084      	sub	sp, #16
 810b0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810b0aa:	2300      	movs	r3, #0
 810b0ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810b0ae:	2300      	movs	r3, #0
 810b0b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810b0b2:	4b41      	ldr	r3, [pc, #260]	; (810b1b8 <xTaskResumeAll+0x114>)
 810b0b4:	681b      	ldr	r3, [r3, #0]
 810b0b6:	2b00      	cmp	r3, #0
 810b0b8:	d109      	bne.n	810b0ce <xTaskResumeAll+0x2a>
 810b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b0be:	f383 8811 	msr	BASEPRI, r3
 810b0c2:	f3bf 8f6f 	isb	sy
 810b0c6:	f3bf 8f4f 	dsb	sy
 810b0ca:	603b      	str	r3, [r7, #0]
 810b0cc:	e7fe      	b.n	810b0cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810b0ce:	f7fe fec5 	bl	8109e5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810b0d2:	4b39      	ldr	r3, [pc, #228]	; (810b1b8 <xTaskResumeAll+0x114>)
 810b0d4:	681b      	ldr	r3, [r3, #0]
 810b0d6:	3b01      	subs	r3, #1
 810b0d8:	4a37      	ldr	r2, [pc, #220]	; (810b1b8 <xTaskResumeAll+0x114>)
 810b0da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b0dc:	4b36      	ldr	r3, [pc, #216]	; (810b1b8 <xTaskResumeAll+0x114>)
 810b0de:	681b      	ldr	r3, [r3, #0]
 810b0e0:	2b00      	cmp	r3, #0
 810b0e2:	d162      	bne.n	810b1aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810b0e4:	4b35      	ldr	r3, [pc, #212]	; (810b1bc <xTaskResumeAll+0x118>)
 810b0e6:	681b      	ldr	r3, [r3, #0]
 810b0e8:	2b00      	cmp	r3, #0
 810b0ea:	d05e      	beq.n	810b1aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810b0ec:	e02f      	b.n	810b14e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b0ee:	4b34      	ldr	r3, [pc, #208]	; (810b1c0 <xTaskResumeAll+0x11c>)
 810b0f0:	68db      	ldr	r3, [r3, #12]
 810b0f2:	68db      	ldr	r3, [r3, #12]
 810b0f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810b0f6:	68fb      	ldr	r3, [r7, #12]
 810b0f8:	3318      	adds	r3, #24
 810b0fa:	4618      	mov	r0, r3
 810b0fc:	f7fe fd60 	bl	8109bc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b100:	68fb      	ldr	r3, [r7, #12]
 810b102:	3304      	adds	r3, #4
 810b104:	4618      	mov	r0, r3
 810b106:	f7fe fd5b 	bl	8109bc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810b10a:	68fb      	ldr	r3, [r7, #12]
 810b10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b10e:	4b2d      	ldr	r3, [pc, #180]	; (810b1c4 <xTaskResumeAll+0x120>)
 810b110:	681b      	ldr	r3, [r3, #0]
 810b112:	429a      	cmp	r2, r3
 810b114:	d903      	bls.n	810b11e <xTaskResumeAll+0x7a>
 810b116:	68fb      	ldr	r3, [r7, #12]
 810b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b11a:	4a2a      	ldr	r2, [pc, #168]	; (810b1c4 <xTaskResumeAll+0x120>)
 810b11c:	6013      	str	r3, [r2, #0]
 810b11e:	68fb      	ldr	r3, [r7, #12]
 810b120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b122:	4613      	mov	r3, r2
 810b124:	009b      	lsls	r3, r3, #2
 810b126:	4413      	add	r3, r2
 810b128:	009b      	lsls	r3, r3, #2
 810b12a:	4a27      	ldr	r2, [pc, #156]	; (810b1c8 <xTaskResumeAll+0x124>)
 810b12c:	441a      	add	r2, r3
 810b12e:	68fb      	ldr	r3, [r7, #12]
 810b130:	3304      	adds	r3, #4
 810b132:	4619      	mov	r1, r3
 810b134:	4610      	mov	r0, r2
 810b136:	f7fe fce6 	bl	8109b06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810b13a:	68fb      	ldr	r3, [r7, #12]
 810b13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b13e:	4b23      	ldr	r3, [pc, #140]	; (810b1cc <xTaskResumeAll+0x128>)
 810b140:	681b      	ldr	r3, [r3, #0]
 810b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b144:	429a      	cmp	r2, r3
 810b146:	d302      	bcc.n	810b14e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 810b148:	4b21      	ldr	r3, [pc, #132]	; (810b1d0 <xTaskResumeAll+0x12c>)
 810b14a:	2201      	movs	r2, #1
 810b14c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810b14e:	4b1c      	ldr	r3, [pc, #112]	; (810b1c0 <xTaskResumeAll+0x11c>)
 810b150:	681b      	ldr	r3, [r3, #0]
 810b152:	2b00      	cmp	r3, #0
 810b154:	d1cb      	bne.n	810b0ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810b156:	68fb      	ldr	r3, [r7, #12]
 810b158:	2b00      	cmp	r3, #0
 810b15a:	d001      	beq.n	810b160 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810b15c:	f000 fb46 	bl	810b7ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810b160:	4b1c      	ldr	r3, [pc, #112]	; (810b1d4 <xTaskResumeAll+0x130>)
 810b162:	681b      	ldr	r3, [r3, #0]
 810b164:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 810b166:	687b      	ldr	r3, [r7, #4]
 810b168:	2b00      	cmp	r3, #0
 810b16a:	d010      	beq.n	810b18e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810b16c:	f000 f846 	bl	810b1fc <xTaskIncrementTick>
 810b170:	4603      	mov	r3, r0
 810b172:	2b00      	cmp	r3, #0
 810b174:	d002      	beq.n	810b17c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 810b176:	4b16      	ldr	r3, [pc, #88]	; (810b1d0 <xTaskResumeAll+0x12c>)
 810b178:	2201      	movs	r2, #1
 810b17a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 810b17c:	687b      	ldr	r3, [r7, #4]
 810b17e:	3b01      	subs	r3, #1
 810b180:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810b182:	687b      	ldr	r3, [r7, #4]
 810b184:	2b00      	cmp	r3, #0
 810b186:	d1f1      	bne.n	810b16c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 810b188:	4b12      	ldr	r3, [pc, #72]	; (810b1d4 <xTaskResumeAll+0x130>)
 810b18a:	2200      	movs	r2, #0
 810b18c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810b18e:	4b10      	ldr	r3, [pc, #64]	; (810b1d0 <xTaskResumeAll+0x12c>)
 810b190:	681b      	ldr	r3, [r3, #0]
 810b192:	2b00      	cmp	r3, #0
 810b194:	d009      	beq.n	810b1aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810b196:	2301      	movs	r3, #1
 810b198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810b19a:	4b0f      	ldr	r3, [pc, #60]	; (810b1d8 <xTaskResumeAll+0x134>)
 810b19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b1a0:	601a      	str	r2, [r3, #0]
 810b1a2:	f3bf 8f4f 	dsb	sy
 810b1a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810b1aa:	f7fe fe85 	bl	8109eb8 <vPortExitCritical>

	return xAlreadyYielded;
 810b1ae:	68bb      	ldr	r3, [r7, #8]
}
 810b1b0:	4618      	mov	r0, r3
 810b1b2:	3710      	adds	r7, #16
 810b1b4:	46bd      	mov	sp, r7
 810b1b6:	bd80      	pop	{r7, pc}
 810b1b8:	10004a0c 	.word	0x10004a0c
 810b1bc:	100049e4 	.word	0x100049e4
 810b1c0:	100049a4 	.word	0x100049a4
 810b1c4:	100049ec 	.word	0x100049ec
 810b1c8:	10004514 	.word	0x10004514
 810b1cc:	10004510 	.word	0x10004510
 810b1d0:	100049f8 	.word	0x100049f8
 810b1d4:	100049f4 	.word	0x100049f4
 810b1d8:	e000ed04 	.word	0xe000ed04

0810b1dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810b1dc:	b480      	push	{r7}
 810b1de:	b083      	sub	sp, #12
 810b1e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810b1e2:	4b05      	ldr	r3, [pc, #20]	; (810b1f8 <xTaskGetTickCount+0x1c>)
 810b1e4:	681b      	ldr	r3, [r3, #0]
 810b1e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810b1e8:	687b      	ldr	r3, [r7, #4]
}
 810b1ea:	4618      	mov	r0, r3
 810b1ec:	370c      	adds	r7, #12
 810b1ee:	46bd      	mov	sp, r7
 810b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1f4:	4770      	bx	lr
 810b1f6:	bf00      	nop
 810b1f8:	100049e8 	.word	0x100049e8

0810b1fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810b1fc:	b580      	push	{r7, lr}
 810b1fe:	b086      	sub	sp, #24
 810b200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810b202:	2300      	movs	r3, #0
 810b204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b206:	4b4e      	ldr	r3, [pc, #312]	; (810b340 <xTaskIncrementTick+0x144>)
 810b208:	681b      	ldr	r3, [r3, #0]
 810b20a:	2b00      	cmp	r3, #0
 810b20c:	f040 8088 	bne.w	810b320 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810b210:	4b4c      	ldr	r3, [pc, #304]	; (810b344 <xTaskIncrementTick+0x148>)
 810b212:	681b      	ldr	r3, [r3, #0]
 810b214:	3301      	adds	r3, #1
 810b216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810b218:	4a4a      	ldr	r2, [pc, #296]	; (810b344 <xTaskIncrementTick+0x148>)
 810b21a:	693b      	ldr	r3, [r7, #16]
 810b21c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810b21e:	693b      	ldr	r3, [r7, #16]
 810b220:	2b00      	cmp	r3, #0
 810b222:	d11f      	bne.n	810b264 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 810b224:	4b48      	ldr	r3, [pc, #288]	; (810b348 <xTaskIncrementTick+0x14c>)
 810b226:	681b      	ldr	r3, [r3, #0]
 810b228:	681b      	ldr	r3, [r3, #0]
 810b22a:	2b00      	cmp	r3, #0
 810b22c:	d009      	beq.n	810b242 <xTaskIncrementTick+0x46>
 810b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b232:	f383 8811 	msr	BASEPRI, r3
 810b236:	f3bf 8f6f 	isb	sy
 810b23a:	f3bf 8f4f 	dsb	sy
 810b23e:	603b      	str	r3, [r7, #0]
 810b240:	e7fe      	b.n	810b240 <xTaskIncrementTick+0x44>
 810b242:	4b41      	ldr	r3, [pc, #260]	; (810b348 <xTaskIncrementTick+0x14c>)
 810b244:	681b      	ldr	r3, [r3, #0]
 810b246:	60fb      	str	r3, [r7, #12]
 810b248:	4b40      	ldr	r3, [pc, #256]	; (810b34c <xTaskIncrementTick+0x150>)
 810b24a:	681b      	ldr	r3, [r3, #0]
 810b24c:	4a3e      	ldr	r2, [pc, #248]	; (810b348 <xTaskIncrementTick+0x14c>)
 810b24e:	6013      	str	r3, [r2, #0]
 810b250:	4a3e      	ldr	r2, [pc, #248]	; (810b34c <xTaskIncrementTick+0x150>)
 810b252:	68fb      	ldr	r3, [r7, #12]
 810b254:	6013      	str	r3, [r2, #0]
 810b256:	4b3e      	ldr	r3, [pc, #248]	; (810b350 <xTaskIncrementTick+0x154>)
 810b258:	681b      	ldr	r3, [r3, #0]
 810b25a:	3301      	adds	r3, #1
 810b25c:	4a3c      	ldr	r2, [pc, #240]	; (810b350 <xTaskIncrementTick+0x154>)
 810b25e:	6013      	str	r3, [r2, #0]
 810b260:	f000 fac4 	bl	810b7ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810b264:	4b3b      	ldr	r3, [pc, #236]	; (810b354 <xTaskIncrementTick+0x158>)
 810b266:	681b      	ldr	r3, [r3, #0]
 810b268:	693a      	ldr	r2, [r7, #16]
 810b26a:	429a      	cmp	r2, r3
 810b26c:	d349      	bcc.n	810b302 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810b26e:	4b36      	ldr	r3, [pc, #216]	; (810b348 <xTaskIncrementTick+0x14c>)
 810b270:	681b      	ldr	r3, [r3, #0]
 810b272:	681b      	ldr	r3, [r3, #0]
 810b274:	2b00      	cmp	r3, #0
 810b276:	d104      	bne.n	810b282 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b278:	4b36      	ldr	r3, [pc, #216]	; (810b354 <xTaskIncrementTick+0x158>)
 810b27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810b27e:	601a      	str	r2, [r3, #0]
					break;
 810b280:	e03f      	b.n	810b302 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b282:	4b31      	ldr	r3, [pc, #196]	; (810b348 <xTaskIncrementTick+0x14c>)
 810b284:	681b      	ldr	r3, [r3, #0]
 810b286:	68db      	ldr	r3, [r3, #12]
 810b288:	68db      	ldr	r3, [r3, #12]
 810b28a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810b28c:	68bb      	ldr	r3, [r7, #8]
 810b28e:	685b      	ldr	r3, [r3, #4]
 810b290:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810b292:	693a      	ldr	r2, [r7, #16]
 810b294:	687b      	ldr	r3, [r7, #4]
 810b296:	429a      	cmp	r2, r3
 810b298:	d203      	bcs.n	810b2a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810b29a:	4a2e      	ldr	r2, [pc, #184]	; (810b354 <xTaskIncrementTick+0x158>)
 810b29c:	687b      	ldr	r3, [r7, #4]
 810b29e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810b2a0:	e02f      	b.n	810b302 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b2a2:	68bb      	ldr	r3, [r7, #8]
 810b2a4:	3304      	adds	r3, #4
 810b2a6:	4618      	mov	r0, r3
 810b2a8:	f7fe fc8a 	bl	8109bc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810b2ac:	68bb      	ldr	r3, [r7, #8]
 810b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b2b0:	2b00      	cmp	r3, #0
 810b2b2:	d004      	beq.n	810b2be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810b2b4:	68bb      	ldr	r3, [r7, #8]
 810b2b6:	3318      	adds	r3, #24
 810b2b8:	4618      	mov	r0, r3
 810b2ba:	f7fe fc81 	bl	8109bc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810b2be:	68bb      	ldr	r3, [r7, #8]
 810b2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b2c2:	4b25      	ldr	r3, [pc, #148]	; (810b358 <xTaskIncrementTick+0x15c>)
 810b2c4:	681b      	ldr	r3, [r3, #0]
 810b2c6:	429a      	cmp	r2, r3
 810b2c8:	d903      	bls.n	810b2d2 <xTaskIncrementTick+0xd6>
 810b2ca:	68bb      	ldr	r3, [r7, #8]
 810b2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b2ce:	4a22      	ldr	r2, [pc, #136]	; (810b358 <xTaskIncrementTick+0x15c>)
 810b2d0:	6013      	str	r3, [r2, #0]
 810b2d2:	68bb      	ldr	r3, [r7, #8]
 810b2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b2d6:	4613      	mov	r3, r2
 810b2d8:	009b      	lsls	r3, r3, #2
 810b2da:	4413      	add	r3, r2
 810b2dc:	009b      	lsls	r3, r3, #2
 810b2de:	4a1f      	ldr	r2, [pc, #124]	; (810b35c <xTaskIncrementTick+0x160>)
 810b2e0:	441a      	add	r2, r3
 810b2e2:	68bb      	ldr	r3, [r7, #8]
 810b2e4:	3304      	adds	r3, #4
 810b2e6:	4619      	mov	r1, r3
 810b2e8:	4610      	mov	r0, r2
 810b2ea:	f7fe fc0c 	bl	8109b06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810b2ee:	68bb      	ldr	r3, [r7, #8]
 810b2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b2f2:	4b1b      	ldr	r3, [pc, #108]	; (810b360 <xTaskIncrementTick+0x164>)
 810b2f4:	681b      	ldr	r3, [r3, #0]
 810b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b2f8:	429a      	cmp	r2, r3
 810b2fa:	d3b8      	bcc.n	810b26e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 810b2fc:	2301      	movs	r3, #1
 810b2fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810b300:	e7b5      	b.n	810b26e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810b302:	4b17      	ldr	r3, [pc, #92]	; (810b360 <xTaskIncrementTick+0x164>)
 810b304:	681b      	ldr	r3, [r3, #0]
 810b306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b308:	4914      	ldr	r1, [pc, #80]	; (810b35c <xTaskIncrementTick+0x160>)
 810b30a:	4613      	mov	r3, r2
 810b30c:	009b      	lsls	r3, r3, #2
 810b30e:	4413      	add	r3, r2
 810b310:	009b      	lsls	r3, r3, #2
 810b312:	440b      	add	r3, r1
 810b314:	681b      	ldr	r3, [r3, #0]
 810b316:	2b01      	cmp	r3, #1
 810b318:	d907      	bls.n	810b32a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 810b31a:	2301      	movs	r3, #1
 810b31c:	617b      	str	r3, [r7, #20]
 810b31e:	e004      	b.n	810b32a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 810b320:	4b10      	ldr	r3, [pc, #64]	; (810b364 <xTaskIncrementTick+0x168>)
 810b322:	681b      	ldr	r3, [r3, #0]
 810b324:	3301      	adds	r3, #1
 810b326:	4a0f      	ldr	r2, [pc, #60]	; (810b364 <xTaskIncrementTick+0x168>)
 810b328:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 810b32a:	4b0f      	ldr	r3, [pc, #60]	; (810b368 <xTaskIncrementTick+0x16c>)
 810b32c:	681b      	ldr	r3, [r3, #0]
 810b32e:	2b00      	cmp	r3, #0
 810b330:	d001      	beq.n	810b336 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 810b332:	2301      	movs	r3, #1
 810b334:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 810b336:	697b      	ldr	r3, [r7, #20]
}
 810b338:	4618      	mov	r0, r3
 810b33a:	3718      	adds	r7, #24
 810b33c:	46bd      	mov	sp, r7
 810b33e:	bd80      	pop	{r7, pc}
 810b340:	10004a0c 	.word	0x10004a0c
 810b344:	100049e8 	.word	0x100049e8
 810b348:	1000499c 	.word	0x1000499c
 810b34c:	100049a0 	.word	0x100049a0
 810b350:	100049fc 	.word	0x100049fc
 810b354:	10004a04 	.word	0x10004a04
 810b358:	100049ec 	.word	0x100049ec
 810b35c:	10004514 	.word	0x10004514
 810b360:	10004510 	.word	0x10004510
 810b364:	100049f4 	.word	0x100049f4
 810b368:	100049f8 	.word	0x100049f8

0810b36c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810b36c:	b480      	push	{r7}
 810b36e:	b085      	sub	sp, #20
 810b370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810b372:	4b27      	ldr	r3, [pc, #156]	; (810b410 <vTaskSwitchContext+0xa4>)
 810b374:	681b      	ldr	r3, [r3, #0]
 810b376:	2b00      	cmp	r3, #0
 810b378:	d003      	beq.n	810b382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810b37a:	4b26      	ldr	r3, [pc, #152]	; (810b414 <vTaskSwitchContext+0xa8>)
 810b37c:	2201      	movs	r2, #1
 810b37e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810b380:	e040      	b.n	810b404 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 810b382:	4b24      	ldr	r3, [pc, #144]	; (810b414 <vTaskSwitchContext+0xa8>)
 810b384:	2200      	movs	r2, #0
 810b386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b388:	4b23      	ldr	r3, [pc, #140]	; (810b418 <vTaskSwitchContext+0xac>)
 810b38a:	681b      	ldr	r3, [r3, #0]
 810b38c:	60fb      	str	r3, [r7, #12]
 810b38e:	e00f      	b.n	810b3b0 <vTaskSwitchContext+0x44>
 810b390:	68fb      	ldr	r3, [r7, #12]
 810b392:	2b00      	cmp	r3, #0
 810b394:	d109      	bne.n	810b3aa <vTaskSwitchContext+0x3e>
 810b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b39a:	f383 8811 	msr	BASEPRI, r3
 810b39e:	f3bf 8f6f 	isb	sy
 810b3a2:	f3bf 8f4f 	dsb	sy
 810b3a6:	607b      	str	r3, [r7, #4]
 810b3a8:	e7fe      	b.n	810b3a8 <vTaskSwitchContext+0x3c>
 810b3aa:	68fb      	ldr	r3, [r7, #12]
 810b3ac:	3b01      	subs	r3, #1
 810b3ae:	60fb      	str	r3, [r7, #12]
 810b3b0:	491a      	ldr	r1, [pc, #104]	; (810b41c <vTaskSwitchContext+0xb0>)
 810b3b2:	68fa      	ldr	r2, [r7, #12]
 810b3b4:	4613      	mov	r3, r2
 810b3b6:	009b      	lsls	r3, r3, #2
 810b3b8:	4413      	add	r3, r2
 810b3ba:	009b      	lsls	r3, r3, #2
 810b3bc:	440b      	add	r3, r1
 810b3be:	681b      	ldr	r3, [r3, #0]
 810b3c0:	2b00      	cmp	r3, #0
 810b3c2:	d0e5      	beq.n	810b390 <vTaskSwitchContext+0x24>
 810b3c4:	68fa      	ldr	r2, [r7, #12]
 810b3c6:	4613      	mov	r3, r2
 810b3c8:	009b      	lsls	r3, r3, #2
 810b3ca:	4413      	add	r3, r2
 810b3cc:	009b      	lsls	r3, r3, #2
 810b3ce:	4a13      	ldr	r2, [pc, #76]	; (810b41c <vTaskSwitchContext+0xb0>)
 810b3d0:	4413      	add	r3, r2
 810b3d2:	60bb      	str	r3, [r7, #8]
 810b3d4:	68bb      	ldr	r3, [r7, #8]
 810b3d6:	685b      	ldr	r3, [r3, #4]
 810b3d8:	685a      	ldr	r2, [r3, #4]
 810b3da:	68bb      	ldr	r3, [r7, #8]
 810b3dc:	605a      	str	r2, [r3, #4]
 810b3de:	68bb      	ldr	r3, [r7, #8]
 810b3e0:	685a      	ldr	r2, [r3, #4]
 810b3e2:	68bb      	ldr	r3, [r7, #8]
 810b3e4:	3308      	adds	r3, #8
 810b3e6:	429a      	cmp	r2, r3
 810b3e8:	d104      	bne.n	810b3f4 <vTaskSwitchContext+0x88>
 810b3ea:	68bb      	ldr	r3, [r7, #8]
 810b3ec:	685b      	ldr	r3, [r3, #4]
 810b3ee:	685a      	ldr	r2, [r3, #4]
 810b3f0:	68bb      	ldr	r3, [r7, #8]
 810b3f2:	605a      	str	r2, [r3, #4]
 810b3f4:	68bb      	ldr	r3, [r7, #8]
 810b3f6:	685b      	ldr	r3, [r3, #4]
 810b3f8:	68db      	ldr	r3, [r3, #12]
 810b3fa:	4a09      	ldr	r2, [pc, #36]	; (810b420 <vTaskSwitchContext+0xb4>)
 810b3fc:	6013      	str	r3, [r2, #0]
 810b3fe:	4a06      	ldr	r2, [pc, #24]	; (810b418 <vTaskSwitchContext+0xac>)
 810b400:	68fb      	ldr	r3, [r7, #12]
 810b402:	6013      	str	r3, [r2, #0]
}
 810b404:	bf00      	nop
 810b406:	3714      	adds	r7, #20
 810b408:	46bd      	mov	sp, r7
 810b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b40e:	4770      	bx	lr
 810b410:	10004a0c 	.word	0x10004a0c
 810b414:	100049f8 	.word	0x100049f8
 810b418:	100049ec 	.word	0x100049ec
 810b41c:	10004514 	.word	0x10004514
 810b420:	10004510 	.word	0x10004510

0810b424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810b424:	b580      	push	{r7, lr}
 810b426:	b084      	sub	sp, #16
 810b428:	af00      	add	r7, sp, #0
 810b42a:	6078      	str	r0, [r7, #4]
 810b42c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810b42e:	687b      	ldr	r3, [r7, #4]
 810b430:	2b00      	cmp	r3, #0
 810b432:	d109      	bne.n	810b448 <vTaskPlaceOnEventList+0x24>
 810b434:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b438:	f383 8811 	msr	BASEPRI, r3
 810b43c:	f3bf 8f6f 	isb	sy
 810b440:	f3bf 8f4f 	dsb	sy
 810b444:	60fb      	str	r3, [r7, #12]
 810b446:	e7fe      	b.n	810b446 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810b448:	4b07      	ldr	r3, [pc, #28]	; (810b468 <vTaskPlaceOnEventList+0x44>)
 810b44a:	681b      	ldr	r3, [r3, #0]
 810b44c:	3318      	adds	r3, #24
 810b44e:	4619      	mov	r1, r3
 810b450:	6878      	ldr	r0, [r7, #4]
 810b452:	f7fe fb7c 	bl	8109b4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810b456:	2101      	movs	r1, #1
 810b458:	6838      	ldr	r0, [r7, #0]
 810b45a:	f000 fa71 	bl	810b940 <prvAddCurrentTaskToDelayedList>
}
 810b45e:	bf00      	nop
 810b460:	3710      	adds	r7, #16
 810b462:	46bd      	mov	sp, r7
 810b464:	bd80      	pop	{r7, pc}
 810b466:	bf00      	nop
 810b468:	10004510 	.word	0x10004510

0810b46c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810b46c:	b580      	push	{r7, lr}
 810b46e:	b086      	sub	sp, #24
 810b470:	af00      	add	r7, sp, #0
 810b472:	60f8      	str	r0, [r7, #12]
 810b474:	60b9      	str	r1, [r7, #8]
 810b476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810b478:	68fb      	ldr	r3, [r7, #12]
 810b47a:	2b00      	cmp	r3, #0
 810b47c:	d109      	bne.n	810b492 <vTaskPlaceOnEventListRestricted+0x26>
 810b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b482:	f383 8811 	msr	BASEPRI, r3
 810b486:	f3bf 8f6f 	isb	sy
 810b48a:	f3bf 8f4f 	dsb	sy
 810b48e:	617b      	str	r3, [r7, #20]
 810b490:	e7fe      	b.n	810b490 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810b492:	4b0a      	ldr	r3, [pc, #40]	; (810b4bc <vTaskPlaceOnEventListRestricted+0x50>)
 810b494:	681b      	ldr	r3, [r3, #0]
 810b496:	3318      	adds	r3, #24
 810b498:	4619      	mov	r1, r3
 810b49a:	68f8      	ldr	r0, [r7, #12]
 810b49c:	f7fe fb33 	bl	8109b06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810b4a0:	687b      	ldr	r3, [r7, #4]
 810b4a2:	2b00      	cmp	r3, #0
 810b4a4:	d002      	beq.n	810b4ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 810b4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b4aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810b4ac:	6879      	ldr	r1, [r7, #4]
 810b4ae:	68b8      	ldr	r0, [r7, #8]
 810b4b0:	f000 fa46 	bl	810b940 <prvAddCurrentTaskToDelayedList>
	}
 810b4b4:	bf00      	nop
 810b4b6:	3718      	adds	r7, #24
 810b4b8:	46bd      	mov	sp, r7
 810b4ba:	bd80      	pop	{r7, pc}
 810b4bc:	10004510 	.word	0x10004510

0810b4c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810b4c0:	b580      	push	{r7, lr}
 810b4c2:	b086      	sub	sp, #24
 810b4c4:	af00      	add	r7, sp, #0
 810b4c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b4c8:	687b      	ldr	r3, [r7, #4]
 810b4ca:	68db      	ldr	r3, [r3, #12]
 810b4cc:	68db      	ldr	r3, [r3, #12]
 810b4ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810b4d0:	693b      	ldr	r3, [r7, #16]
 810b4d2:	2b00      	cmp	r3, #0
 810b4d4:	d109      	bne.n	810b4ea <xTaskRemoveFromEventList+0x2a>
 810b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b4da:	f383 8811 	msr	BASEPRI, r3
 810b4de:	f3bf 8f6f 	isb	sy
 810b4e2:	f3bf 8f4f 	dsb	sy
 810b4e6:	60fb      	str	r3, [r7, #12]
 810b4e8:	e7fe      	b.n	810b4e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810b4ea:	693b      	ldr	r3, [r7, #16]
 810b4ec:	3318      	adds	r3, #24
 810b4ee:	4618      	mov	r0, r3
 810b4f0:	f7fe fb66 	bl	8109bc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b4f4:	4b1d      	ldr	r3, [pc, #116]	; (810b56c <xTaskRemoveFromEventList+0xac>)
 810b4f6:	681b      	ldr	r3, [r3, #0]
 810b4f8:	2b00      	cmp	r3, #0
 810b4fa:	d11d      	bne.n	810b538 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810b4fc:	693b      	ldr	r3, [r7, #16]
 810b4fe:	3304      	adds	r3, #4
 810b500:	4618      	mov	r0, r3
 810b502:	f7fe fb5d 	bl	8109bc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810b506:	693b      	ldr	r3, [r7, #16]
 810b508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b50a:	4b19      	ldr	r3, [pc, #100]	; (810b570 <xTaskRemoveFromEventList+0xb0>)
 810b50c:	681b      	ldr	r3, [r3, #0]
 810b50e:	429a      	cmp	r2, r3
 810b510:	d903      	bls.n	810b51a <xTaskRemoveFromEventList+0x5a>
 810b512:	693b      	ldr	r3, [r7, #16]
 810b514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b516:	4a16      	ldr	r2, [pc, #88]	; (810b570 <xTaskRemoveFromEventList+0xb0>)
 810b518:	6013      	str	r3, [r2, #0]
 810b51a:	693b      	ldr	r3, [r7, #16]
 810b51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b51e:	4613      	mov	r3, r2
 810b520:	009b      	lsls	r3, r3, #2
 810b522:	4413      	add	r3, r2
 810b524:	009b      	lsls	r3, r3, #2
 810b526:	4a13      	ldr	r2, [pc, #76]	; (810b574 <xTaskRemoveFromEventList+0xb4>)
 810b528:	441a      	add	r2, r3
 810b52a:	693b      	ldr	r3, [r7, #16]
 810b52c:	3304      	adds	r3, #4
 810b52e:	4619      	mov	r1, r3
 810b530:	4610      	mov	r0, r2
 810b532:	f7fe fae8 	bl	8109b06 <vListInsertEnd>
 810b536:	e005      	b.n	810b544 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810b538:	693b      	ldr	r3, [r7, #16]
 810b53a:	3318      	adds	r3, #24
 810b53c:	4619      	mov	r1, r3
 810b53e:	480e      	ldr	r0, [pc, #56]	; (810b578 <xTaskRemoveFromEventList+0xb8>)
 810b540:	f7fe fae1 	bl	8109b06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810b544:	693b      	ldr	r3, [r7, #16]
 810b546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b548:	4b0c      	ldr	r3, [pc, #48]	; (810b57c <xTaskRemoveFromEventList+0xbc>)
 810b54a:	681b      	ldr	r3, [r3, #0]
 810b54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b54e:	429a      	cmp	r2, r3
 810b550:	d905      	bls.n	810b55e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810b552:	2301      	movs	r3, #1
 810b554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810b556:	4b0a      	ldr	r3, [pc, #40]	; (810b580 <xTaskRemoveFromEventList+0xc0>)
 810b558:	2201      	movs	r2, #1
 810b55a:	601a      	str	r2, [r3, #0]
 810b55c:	e001      	b.n	810b562 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 810b55e:	2300      	movs	r3, #0
 810b560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810b562:	697b      	ldr	r3, [r7, #20]
}
 810b564:	4618      	mov	r0, r3
 810b566:	3718      	adds	r7, #24
 810b568:	46bd      	mov	sp, r7
 810b56a:	bd80      	pop	{r7, pc}
 810b56c:	10004a0c 	.word	0x10004a0c
 810b570:	100049ec 	.word	0x100049ec
 810b574:	10004514 	.word	0x10004514
 810b578:	100049a4 	.word	0x100049a4
 810b57c:	10004510 	.word	0x10004510
 810b580:	100049f8 	.word	0x100049f8

0810b584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810b584:	b480      	push	{r7}
 810b586:	b083      	sub	sp, #12
 810b588:	af00      	add	r7, sp, #0
 810b58a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810b58c:	4b06      	ldr	r3, [pc, #24]	; (810b5a8 <vTaskInternalSetTimeOutState+0x24>)
 810b58e:	681a      	ldr	r2, [r3, #0]
 810b590:	687b      	ldr	r3, [r7, #4]
 810b592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810b594:	4b05      	ldr	r3, [pc, #20]	; (810b5ac <vTaskInternalSetTimeOutState+0x28>)
 810b596:	681a      	ldr	r2, [r3, #0]
 810b598:	687b      	ldr	r3, [r7, #4]
 810b59a:	605a      	str	r2, [r3, #4]
}
 810b59c:	bf00      	nop
 810b59e:	370c      	adds	r7, #12
 810b5a0:	46bd      	mov	sp, r7
 810b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5a6:	4770      	bx	lr
 810b5a8:	100049fc 	.word	0x100049fc
 810b5ac:	100049e8 	.word	0x100049e8

0810b5b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810b5b0:	b580      	push	{r7, lr}
 810b5b2:	b088      	sub	sp, #32
 810b5b4:	af00      	add	r7, sp, #0
 810b5b6:	6078      	str	r0, [r7, #4]
 810b5b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810b5ba:	687b      	ldr	r3, [r7, #4]
 810b5bc:	2b00      	cmp	r3, #0
 810b5be:	d109      	bne.n	810b5d4 <xTaskCheckForTimeOut+0x24>
 810b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b5c4:	f383 8811 	msr	BASEPRI, r3
 810b5c8:	f3bf 8f6f 	isb	sy
 810b5cc:	f3bf 8f4f 	dsb	sy
 810b5d0:	613b      	str	r3, [r7, #16]
 810b5d2:	e7fe      	b.n	810b5d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 810b5d4:	683b      	ldr	r3, [r7, #0]
 810b5d6:	2b00      	cmp	r3, #0
 810b5d8:	d109      	bne.n	810b5ee <xTaskCheckForTimeOut+0x3e>
 810b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b5de:	f383 8811 	msr	BASEPRI, r3
 810b5e2:	f3bf 8f6f 	isb	sy
 810b5e6:	f3bf 8f4f 	dsb	sy
 810b5ea:	60fb      	str	r3, [r7, #12]
 810b5ec:	e7fe      	b.n	810b5ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 810b5ee:	f7fe fc35 	bl	8109e5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810b5f2:	4b1d      	ldr	r3, [pc, #116]	; (810b668 <xTaskCheckForTimeOut+0xb8>)
 810b5f4:	681b      	ldr	r3, [r3, #0]
 810b5f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810b5f8:	687b      	ldr	r3, [r7, #4]
 810b5fa:	685b      	ldr	r3, [r3, #4]
 810b5fc:	69ba      	ldr	r2, [r7, #24]
 810b5fe:	1ad3      	subs	r3, r2, r3
 810b600:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810b602:	683b      	ldr	r3, [r7, #0]
 810b604:	681b      	ldr	r3, [r3, #0]
 810b606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810b60a:	d102      	bne.n	810b612 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810b60c:	2300      	movs	r3, #0
 810b60e:	61fb      	str	r3, [r7, #28]
 810b610:	e023      	b.n	810b65a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	681a      	ldr	r2, [r3, #0]
 810b616:	4b15      	ldr	r3, [pc, #84]	; (810b66c <xTaskCheckForTimeOut+0xbc>)
 810b618:	681b      	ldr	r3, [r3, #0]
 810b61a:	429a      	cmp	r2, r3
 810b61c:	d007      	beq.n	810b62e <xTaskCheckForTimeOut+0x7e>
 810b61e:	687b      	ldr	r3, [r7, #4]
 810b620:	685b      	ldr	r3, [r3, #4]
 810b622:	69ba      	ldr	r2, [r7, #24]
 810b624:	429a      	cmp	r2, r3
 810b626:	d302      	bcc.n	810b62e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810b628:	2301      	movs	r3, #1
 810b62a:	61fb      	str	r3, [r7, #28]
 810b62c:	e015      	b.n	810b65a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810b62e:	683b      	ldr	r3, [r7, #0]
 810b630:	681b      	ldr	r3, [r3, #0]
 810b632:	697a      	ldr	r2, [r7, #20]
 810b634:	429a      	cmp	r2, r3
 810b636:	d20b      	bcs.n	810b650 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810b638:	683b      	ldr	r3, [r7, #0]
 810b63a:	681a      	ldr	r2, [r3, #0]
 810b63c:	697b      	ldr	r3, [r7, #20]
 810b63e:	1ad2      	subs	r2, r2, r3
 810b640:	683b      	ldr	r3, [r7, #0]
 810b642:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810b644:	6878      	ldr	r0, [r7, #4]
 810b646:	f7ff ff9d 	bl	810b584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810b64a:	2300      	movs	r3, #0
 810b64c:	61fb      	str	r3, [r7, #28]
 810b64e:	e004      	b.n	810b65a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810b650:	683b      	ldr	r3, [r7, #0]
 810b652:	2200      	movs	r2, #0
 810b654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810b656:	2301      	movs	r3, #1
 810b658:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810b65a:	f7fe fc2d 	bl	8109eb8 <vPortExitCritical>

	return xReturn;
 810b65e:	69fb      	ldr	r3, [r7, #28]
}
 810b660:	4618      	mov	r0, r3
 810b662:	3720      	adds	r7, #32
 810b664:	46bd      	mov	sp, r7
 810b666:	bd80      	pop	{r7, pc}
 810b668:	100049e8 	.word	0x100049e8
 810b66c:	100049fc 	.word	0x100049fc

0810b670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810b670:	b480      	push	{r7}
 810b672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810b674:	4b03      	ldr	r3, [pc, #12]	; (810b684 <vTaskMissedYield+0x14>)
 810b676:	2201      	movs	r2, #1
 810b678:	601a      	str	r2, [r3, #0]
}
 810b67a:	bf00      	nop
 810b67c:	46bd      	mov	sp, r7
 810b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b682:	4770      	bx	lr
 810b684:	100049f8 	.word	0x100049f8

0810b688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810b688:	b580      	push	{r7, lr}
 810b68a:	b082      	sub	sp, #8
 810b68c:	af00      	add	r7, sp, #0
 810b68e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810b690:	f000 f852 	bl	810b738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810b694:	4b06      	ldr	r3, [pc, #24]	; (810b6b0 <prvIdleTask+0x28>)
 810b696:	681b      	ldr	r3, [r3, #0]
 810b698:	2b01      	cmp	r3, #1
 810b69a:	d9f9      	bls.n	810b690 <prvIdleTask+0x8>
			{
				taskYIELD();
 810b69c:	4b05      	ldr	r3, [pc, #20]	; (810b6b4 <prvIdleTask+0x2c>)
 810b69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b6a2:	601a      	str	r2, [r3, #0]
 810b6a4:	f3bf 8f4f 	dsb	sy
 810b6a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810b6ac:	e7f0      	b.n	810b690 <prvIdleTask+0x8>
 810b6ae:	bf00      	nop
 810b6b0:	10004514 	.word	0x10004514
 810b6b4:	e000ed04 	.word	0xe000ed04

0810b6b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810b6b8:	b580      	push	{r7, lr}
 810b6ba:	b082      	sub	sp, #8
 810b6bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810b6be:	2300      	movs	r3, #0
 810b6c0:	607b      	str	r3, [r7, #4]
 810b6c2:	e00c      	b.n	810b6de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810b6c4:	687a      	ldr	r2, [r7, #4]
 810b6c6:	4613      	mov	r3, r2
 810b6c8:	009b      	lsls	r3, r3, #2
 810b6ca:	4413      	add	r3, r2
 810b6cc:	009b      	lsls	r3, r3, #2
 810b6ce:	4a12      	ldr	r2, [pc, #72]	; (810b718 <prvInitialiseTaskLists+0x60>)
 810b6d0:	4413      	add	r3, r2
 810b6d2:	4618      	mov	r0, r3
 810b6d4:	f7fe f9ea 	bl	8109aac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810b6d8:	687b      	ldr	r3, [r7, #4]
 810b6da:	3301      	adds	r3, #1
 810b6dc:	607b      	str	r3, [r7, #4]
 810b6de:	687b      	ldr	r3, [r7, #4]
 810b6e0:	2b37      	cmp	r3, #55	; 0x37
 810b6e2:	d9ef      	bls.n	810b6c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810b6e4:	480d      	ldr	r0, [pc, #52]	; (810b71c <prvInitialiseTaskLists+0x64>)
 810b6e6:	f7fe f9e1 	bl	8109aac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810b6ea:	480d      	ldr	r0, [pc, #52]	; (810b720 <prvInitialiseTaskLists+0x68>)
 810b6ec:	f7fe f9de 	bl	8109aac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810b6f0:	480c      	ldr	r0, [pc, #48]	; (810b724 <prvInitialiseTaskLists+0x6c>)
 810b6f2:	f7fe f9db 	bl	8109aac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810b6f6:	480c      	ldr	r0, [pc, #48]	; (810b728 <prvInitialiseTaskLists+0x70>)
 810b6f8:	f7fe f9d8 	bl	8109aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810b6fc:	480b      	ldr	r0, [pc, #44]	; (810b72c <prvInitialiseTaskLists+0x74>)
 810b6fe:	f7fe f9d5 	bl	8109aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810b702:	4b0b      	ldr	r3, [pc, #44]	; (810b730 <prvInitialiseTaskLists+0x78>)
 810b704:	4a05      	ldr	r2, [pc, #20]	; (810b71c <prvInitialiseTaskLists+0x64>)
 810b706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810b708:	4b0a      	ldr	r3, [pc, #40]	; (810b734 <prvInitialiseTaskLists+0x7c>)
 810b70a:	4a05      	ldr	r2, [pc, #20]	; (810b720 <prvInitialiseTaskLists+0x68>)
 810b70c:	601a      	str	r2, [r3, #0]
}
 810b70e:	bf00      	nop
 810b710:	3708      	adds	r7, #8
 810b712:	46bd      	mov	sp, r7
 810b714:	bd80      	pop	{r7, pc}
 810b716:	bf00      	nop
 810b718:	10004514 	.word	0x10004514
 810b71c:	10004974 	.word	0x10004974
 810b720:	10004988 	.word	0x10004988
 810b724:	100049a4 	.word	0x100049a4
 810b728:	100049b8 	.word	0x100049b8
 810b72c:	100049d0 	.word	0x100049d0
 810b730:	1000499c 	.word	0x1000499c
 810b734:	100049a0 	.word	0x100049a0

0810b738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810b738:	b580      	push	{r7, lr}
 810b73a:	b082      	sub	sp, #8
 810b73c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810b73e:	e019      	b.n	810b774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810b740:	f7fe fb8c 	bl	8109e5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b744:	4b0f      	ldr	r3, [pc, #60]	; (810b784 <prvCheckTasksWaitingTermination+0x4c>)
 810b746:	68db      	ldr	r3, [r3, #12]
 810b748:	68db      	ldr	r3, [r3, #12]
 810b74a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b74c:	687b      	ldr	r3, [r7, #4]
 810b74e:	3304      	adds	r3, #4
 810b750:	4618      	mov	r0, r3
 810b752:	f7fe fa35 	bl	8109bc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810b756:	4b0c      	ldr	r3, [pc, #48]	; (810b788 <prvCheckTasksWaitingTermination+0x50>)
 810b758:	681b      	ldr	r3, [r3, #0]
 810b75a:	3b01      	subs	r3, #1
 810b75c:	4a0a      	ldr	r2, [pc, #40]	; (810b788 <prvCheckTasksWaitingTermination+0x50>)
 810b75e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810b760:	4b0a      	ldr	r3, [pc, #40]	; (810b78c <prvCheckTasksWaitingTermination+0x54>)
 810b762:	681b      	ldr	r3, [r3, #0]
 810b764:	3b01      	subs	r3, #1
 810b766:	4a09      	ldr	r2, [pc, #36]	; (810b78c <prvCheckTasksWaitingTermination+0x54>)
 810b768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810b76a:	f7fe fba5 	bl	8109eb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810b76e:	6878      	ldr	r0, [r7, #4]
 810b770:	f000 f80e 	bl	810b790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810b774:	4b05      	ldr	r3, [pc, #20]	; (810b78c <prvCheckTasksWaitingTermination+0x54>)
 810b776:	681b      	ldr	r3, [r3, #0]
 810b778:	2b00      	cmp	r3, #0
 810b77a:	d1e1      	bne.n	810b740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810b77c:	bf00      	nop
 810b77e:	3708      	adds	r7, #8
 810b780:	46bd      	mov	sp, r7
 810b782:	bd80      	pop	{r7, pc}
 810b784:	100049b8 	.word	0x100049b8
 810b788:	100049e4 	.word	0x100049e4
 810b78c:	100049cc 	.word	0x100049cc

0810b790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810b790:	b580      	push	{r7, lr}
 810b792:	b084      	sub	sp, #16
 810b794:	af00      	add	r7, sp, #0
 810b796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810b798:	687b      	ldr	r3, [r7, #4]
 810b79a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810b79e:	2b00      	cmp	r3, #0
 810b7a0:	d108      	bne.n	810b7b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810b7a2:	687b      	ldr	r3, [r7, #4]
 810b7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b7a6:	4618      	mov	r0, r3
 810b7a8:	f7fe f86c 	bl	8109884 <vPortFree>
				vPortFree( pxTCB );
 810b7ac:	6878      	ldr	r0, [r7, #4]
 810b7ae:	f7fe f869 	bl	8109884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810b7b2:	e017      	b.n	810b7e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810b7b4:	687b      	ldr	r3, [r7, #4]
 810b7b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810b7ba:	2b01      	cmp	r3, #1
 810b7bc:	d103      	bne.n	810b7c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810b7be:	6878      	ldr	r0, [r7, #4]
 810b7c0:	f7fe f860 	bl	8109884 <vPortFree>
	}
 810b7c4:	e00e      	b.n	810b7e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810b7c6:	687b      	ldr	r3, [r7, #4]
 810b7c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810b7cc:	2b02      	cmp	r3, #2
 810b7ce:	d009      	beq.n	810b7e4 <prvDeleteTCB+0x54>
 810b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b7d4:	f383 8811 	msr	BASEPRI, r3
 810b7d8:	f3bf 8f6f 	isb	sy
 810b7dc:	f3bf 8f4f 	dsb	sy
 810b7e0:	60fb      	str	r3, [r7, #12]
 810b7e2:	e7fe      	b.n	810b7e2 <prvDeleteTCB+0x52>
	}
 810b7e4:	bf00      	nop
 810b7e6:	3710      	adds	r7, #16
 810b7e8:	46bd      	mov	sp, r7
 810b7ea:	bd80      	pop	{r7, pc}

0810b7ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810b7ec:	b480      	push	{r7}
 810b7ee:	b083      	sub	sp, #12
 810b7f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810b7f2:	4b0c      	ldr	r3, [pc, #48]	; (810b824 <prvResetNextTaskUnblockTime+0x38>)
 810b7f4:	681b      	ldr	r3, [r3, #0]
 810b7f6:	681b      	ldr	r3, [r3, #0]
 810b7f8:	2b00      	cmp	r3, #0
 810b7fa:	d104      	bne.n	810b806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810b7fc:	4b0a      	ldr	r3, [pc, #40]	; (810b828 <prvResetNextTaskUnblockTime+0x3c>)
 810b7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810b802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810b804:	e008      	b.n	810b818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b806:	4b07      	ldr	r3, [pc, #28]	; (810b824 <prvResetNextTaskUnblockTime+0x38>)
 810b808:	681b      	ldr	r3, [r3, #0]
 810b80a:	68db      	ldr	r3, [r3, #12]
 810b80c:	68db      	ldr	r3, [r3, #12]
 810b80e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810b810:	687b      	ldr	r3, [r7, #4]
 810b812:	685b      	ldr	r3, [r3, #4]
 810b814:	4a04      	ldr	r2, [pc, #16]	; (810b828 <prvResetNextTaskUnblockTime+0x3c>)
 810b816:	6013      	str	r3, [r2, #0]
}
 810b818:	bf00      	nop
 810b81a:	370c      	adds	r7, #12
 810b81c:	46bd      	mov	sp, r7
 810b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b822:	4770      	bx	lr
 810b824:	1000499c 	.word	0x1000499c
 810b828:	10004a04 	.word	0x10004a04

0810b82c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810b82c:	b480      	push	{r7}
 810b82e:	b083      	sub	sp, #12
 810b830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810b832:	4b0b      	ldr	r3, [pc, #44]	; (810b860 <xTaskGetSchedulerState+0x34>)
 810b834:	681b      	ldr	r3, [r3, #0]
 810b836:	2b00      	cmp	r3, #0
 810b838:	d102      	bne.n	810b840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810b83a:	2301      	movs	r3, #1
 810b83c:	607b      	str	r3, [r7, #4]
 810b83e:	e008      	b.n	810b852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b840:	4b08      	ldr	r3, [pc, #32]	; (810b864 <xTaskGetSchedulerState+0x38>)
 810b842:	681b      	ldr	r3, [r3, #0]
 810b844:	2b00      	cmp	r3, #0
 810b846:	d102      	bne.n	810b84e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810b848:	2302      	movs	r3, #2
 810b84a:	607b      	str	r3, [r7, #4]
 810b84c:	e001      	b.n	810b852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810b84e:	2300      	movs	r3, #0
 810b850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810b852:	687b      	ldr	r3, [r7, #4]
	}
 810b854:	4618      	mov	r0, r3
 810b856:	370c      	adds	r7, #12
 810b858:	46bd      	mov	sp, r7
 810b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b85e:	4770      	bx	lr
 810b860:	100049f0 	.word	0x100049f0
 810b864:	10004a0c 	.word	0x10004a0c

0810b868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810b868:	b580      	push	{r7, lr}
 810b86a:	b086      	sub	sp, #24
 810b86c:	af00      	add	r7, sp, #0
 810b86e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810b870:	687b      	ldr	r3, [r7, #4]
 810b872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810b874:	2300      	movs	r3, #0
 810b876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810b878:	687b      	ldr	r3, [r7, #4]
 810b87a:	2b00      	cmp	r3, #0
 810b87c:	d054      	beq.n	810b928 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810b87e:	4b2d      	ldr	r3, [pc, #180]	; (810b934 <xTaskPriorityDisinherit+0xcc>)
 810b880:	681b      	ldr	r3, [r3, #0]
 810b882:	693a      	ldr	r2, [r7, #16]
 810b884:	429a      	cmp	r2, r3
 810b886:	d009      	beq.n	810b89c <xTaskPriorityDisinherit+0x34>
 810b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b88c:	f383 8811 	msr	BASEPRI, r3
 810b890:	f3bf 8f6f 	isb	sy
 810b894:	f3bf 8f4f 	dsb	sy
 810b898:	60fb      	str	r3, [r7, #12]
 810b89a:	e7fe      	b.n	810b89a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 810b89c:	693b      	ldr	r3, [r7, #16]
 810b89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b8a0:	2b00      	cmp	r3, #0
 810b8a2:	d109      	bne.n	810b8b8 <xTaskPriorityDisinherit+0x50>
 810b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b8a8:	f383 8811 	msr	BASEPRI, r3
 810b8ac:	f3bf 8f6f 	isb	sy
 810b8b0:	f3bf 8f4f 	dsb	sy
 810b8b4:	60bb      	str	r3, [r7, #8]
 810b8b6:	e7fe      	b.n	810b8b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810b8b8:	693b      	ldr	r3, [r7, #16]
 810b8ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b8bc:	1e5a      	subs	r2, r3, #1
 810b8be:	693b      	ldr	r3, [r7, #16]
 810b8c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810b8c2:	693b      	ldr	r3, [r7, #16]
 810b8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b8c6:	693b      	ldr	r3, [r7, #16]
 810b8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b8ca:	429a      	cmp	r2, r3
 810b8cc:	d02c      	beq.n	810b928 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810b8ce:	693b      	ldr	r3, [r7, #16]
 810b8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b8d2:	2b00      	cmp	r3, #0
 810b8d4:	d128      	bne.n	810b928 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b8d6:	693b      	ldr	r3, [r7, #16]
 810b8d8:	3304      	adds	r3, #4
 810b8da:	4618      	mov	r0, r3
 810b8dc:	f7fe f970 	bl	8109bc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810b8e0:	693b      	ldr	r3, [r7, #16]
 810b8e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810b8e4:	693b      	ldr	r3, [r7, #16]
 810b8e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b8e8:	693b      	ldr	r3, [r7, #16]
 810b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b8ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810b8f0:	693b      	ldr	r3, [r7, #16]
 810b8f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810b8f4:	693b      	ldr	r3, [r7, #16]
 810b8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b8f8:	4b0f      	ldr	r3, [pc, #60]	; (810b938 <xTaskPriorityDisinherit+0xd0>)
 810b8fa:	681b      	ldr	r3, [r3, #0]
 810b8fc:	429a      	cmp	r2, r3
 810b8fe:	d903      	bls.n	810b908 <xTaskPriorityDisinherit+0xa0>
 810b900:	693b      	ldr	r3, [r7, #16]
 810b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b904:	4a0c      	ldr	r2, [pc, #48]	; (810b938 <xTaskPriorityDisinherit+0xd0>)
 810b906:	6013      	str	r3, [r2, #0]
 810b908:	693b      	ldr	r3, [r7, #16]
 810b90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b90c:	4613      	mov	r3, r2
 810b90e:	009b      	lsls	r3, r3, #2
 810b910:	4413      	add	r3, r2
 810b912:	009b      	lsls	r3, r3, #2
 810b914:	4a09      	ldr	r2, [pc, #36]	; (810b93c <xTaskPriorityDisinherit+0xd4>)
 810b916:	441a      	add	r2, r3
 810b918:	693b      	ldr	r3, [r7, #16]
 810b91a:	3304      	adds	r3, #4
 810b91c:	4619      	mov	r1, r3
 810b91e:	4610      	mov	r0, r2
 810b920:	f7fe f8f1 	bl	8109b06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810b924:	2301      	movs	r3, #1
 810b926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810b928:	697b      	ldr	r3, [r7, #20]
	}
 810b92a:	4618      	mov	r0, r3
 810b92c:	3718      	adds	r7, #24
 810b92e:	46bd      	mov	sp, r7
 810b930:	bd80      	pop	{r7, pc}
 810b932:	bf00      	nop
 810b934:	10004510 	.word	0x10004510
 810b938:	100049ec 	.word	0x100049ec
 810b93c:	10004514 	.word	0x10004514

0810b940 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810b940:	b580      	push	{r7, lr}
 810b942:	b084      	sub	sp, #16
 810b944:	af00      	add	r7, sp, #0
 810b946:	6078      	str	r0, [r7, #4]
 810b948:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810b94a:	4b21      	ldr	r3, [pc, #132]	; (810b9d0 <prvAddCurrentTaskToDelayedList+0x90>)
 810b94c:	681b      	ldr	r3, [r3, #0]
 810b94e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b950:	4b20      	ldr	r3, [pc, #128]	; (810b9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b952:	681b      	ldr	r3, [r3, #0]
 810b954:	3304      	adds	r3, #4
 810b956:	4618      	mov	r0, r3
 810b958:	f7fe f932 	bl	8109bc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810b95c:	687b      	ldr	r3, [r7, #4]
 810b95e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810b962:	d10a      	bne.n	810b97a <prvAddCurrentTaskToDelayedList+0x3a>
 810b964:	683b      	ldr	r3, [r7, #0]
 810b966:	2b00      	cmp	r3, #0
 810b968:	d007      	beq.n	810b97a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b96a:	4b1a      	ldr	r3, [pc, #104]	; (810b9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b96c:	681b      	ldr	r3, [r3, #0]
 810b96e:	3304      	adds	r3, #4
 810b970:	4619      	mov	r1, r3
 810b972:	4819      	ldr	r0, [pc, #100]	; (810b9d8 <prvAddCurrentTaskToDelayedList+0x98>)
 810b974:	f7fe f8c7 	bl	8109b06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810b978:	e026      	b.n	810b9c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810b97a:	68fa      	ldr	r2, [r7, #12]
 810b97c:	687b      	ldr	r3, [r7, #4]
 810b97e:	4413      	add	r3, r2
 810b980:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810b982:	4b14      	ldr	r3, [pc, #80]	; (810b9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b984:	681b      	ldr	r3, [r3, #0]
 810b986:	68ba      	ldr	r2, [r7, #8]
 810b988:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810b98a:	68ba      	ldr	r2, [r7, #8]
 810b98c:	68fb      	ldr	r3, [r7, #12]
 810b98e:	429a      	cmp	r2, r3
 810b990:	d209      	bcs.n	810b9a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b992:	4b12      	ldr	r3, [pc, #72]	; (810b9dc <prvAddCurrentTaskToDelayedList+0x9c>)
 810b994:	681a      	ldr	r2, [r3, #0]
 810b996:	4b0f      	ldr	r3, [pc, #60]	; (810b9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b998:	681b      	ldr	r3, [r3, #0]
 810b99a:	3304      	adds	r3, #4
 810b99c:	4619      	mov	r1, r3
 810b99e:	4610      	mov	r0, r2
 810b9a0:	f7fe f8d5 	bl	8109b4e <vListInsert>
}
 810b9a4:	e010      	b.n	810b9c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b9a6:	4b0e      	ldr	r3, [pc, #56]	; (810b9e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 810b9a8:	681a      	ldr	r2, [r3, #0]
 810b9aa:	4b0a      	ldr	r3, [pc, #40]	; (810b9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b9ac:	681b      	ldr	r3, [r3, #0]
 810b9ae:	3304      	adds	r3, #4
 810b9b0:	4619      	mov	r1, r3
 810b9b2:	4610      	mov	r0, r2
 810b9b4:	f7fe f8cb 	bl	8109b4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810b9b8:	4b0a      	ldr	r3, [pc, #40]	; (810b9e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b9ba:	681b      	ldr	r3, [r3, #0]
 810b9bc:	68ba      	ldr	r2, [r7, #8]
 810b9be:	429a      	cmp	r2, r3
 810b9c0:	d202      	bcs.n	810b9c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810b9c2:	4a08      	ldr	r2, [pc, #32]	; (810b9e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b9c4:	68bb      	ldr	r3, [r7, #8]
 810b9c6:	6013      	str	r3, [r2, #0]
}
 810b9c8:	bf00      	nop
 810b9ca:	3710      	adds	r7, #16
 810b9cc:	46bd      	mov	sp, r7
 810b9ce:	bd80      	pop	{r7, pc}
 810b9d0:	100049e8 	.word	0x100049e8
 810b9d4:	10004510 	.word	0x10004510
 810b9d8:	100049d0 	.word	0x100049d0
 810b9dc:	100049a0 	.word	0x100049a0
 810b9e0:	1000499c 	.word	0x1000499c
 810b9e4:	10004a04 	.word	0x10004a04

0810b9e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810b9e8:	b580      	push	{r7, lr}
 810b9ea:	b08a      	sub	sp, #40	; 0x28
 810b9ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810b9ee:	2300      	movs	r3, #0
 810b9f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810b9f2:	f000 faff 	bl	810bff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810b9f6:	4b1c      	ldr	r3, [pc, #112]	; (810ba68 <xTimerCreateTimerTask+0x80>)
 810b9f8:	681b      	ldr	r3, [r3, #0]
 810b9fa:	2b00      	cmp	r3, #0
 810b9fc:	d021      	beq.n	810ba42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810b9fe:	2300      	movs	r3, #0
 810ba00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810ba02:	2300      	movs	r3, #0
 810ba04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810ba06:	1d3a      	adds	r2, r7, #4
 810ba08:	f107 0108 	add.w	r1, r7, #8
 810ba0c:	f107 030c 	add.w	r3, r7, #12
 810ba10:	4618      	mov	r0, r3
 810ba12:	f7fd fe5b 	bl	81096cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810ba16:	6879      	ldr	r1, [r7, #4]
 810ba18:	68bb      	ldr	r3, [r7, #8]
 810ba1a:	68fa      	ldr	r2, [r7, #12]
 810ba1c:	9202      	str	r2, [sp, #8]
 810ba1e:	9301      	str	r3, [sp, #4]
 810ba20:	2302      	movs	r3, #2
 810ba22:	9300      	str	r3, [sp, #0]
 810ba24:	2300      	movs	r3, #0
 810ba26:	460a      	mov	r2, r1
 810ba28:	4910      	ldr	r1, [pc, #64]	; (810ba6c <xTimerCreateTimerTask+0x84>)
 810ba2a:	4811      	ldr	r0, [pc, #68]	; (810ba70 <xTimerCreateTimerTask+0x88>)
 810ba2c:	f7ff f8f6 	bl	810ac1c <xTaskCreateStatic>
 810ba30:	4602      	mov	r2, r0
 810ba32:	4b10      	ldr	r3, [pc, #64]	; (810ba74 <xTimerCreateTimerTask+0x8c>)
 810ba34:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810ba36:	4b0f      	ldr	r3, [pc, #60]	; (810ba74 <xTimerCreateTimerTask+0x8c>)
 810ba38:	681b      	ldr	r3, [r3, #0]
 810ba3a:	2b00      	cmp	r3, #0
 810ba3c:	d001      	beq.n	810ba42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810ba3e:	2301      	movs	r3, #1
 810ba40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810ba42:	697b      	ldr	r3, [r7, #20]
 810ba44:	2b00      	cmp	r3, #0
 810ba46:	d109      	bne.n	810ba5c <xTimerCreateTimerTask+0x74>
 810ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ba4c:	f383 8811 	msr	BASEPRI, r3
 810ba50:	f3bf 8f6f 	isb	sy
 810ba54:	f3bf 8f4f 	dsb	sy
 810ba58:	613b      	str	r3, [r7, #16]
 810ba5a:	e7fe      	b.n	810ba5a <xTimerCreateTimerTask+0x72>
	return xReturn;
 810ba5c:	697b      	ldr	r3, [r7, #20]
}
 810ba5e:	4618      	mov	r0, r3
 810ba60:	3718      	adds	r7, #24
 810ba62:	46bd      	mov	sp, r7
 810ba64:	bd80      	pop	{r7, pc}
 810ba66:	bf00      	nop
 810ba68:	10004a40 	.word	0x10004a40
 810ba6c:	0811130c 	.word	0x0811130c
 810ba70:	0810bba9 	.word	0x0810bba9
 810ba74:	10004a44 	.word	0x10004a44

0810ba78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810ba78:	b580      	push	{r7, lr}
 810ba7a:	b08a      	sub	sp, #40	; 0x28
 810ba7c:	af00      	add	r7, sp, #0
 810ba7e:	60f8      	str	r0, [r7, #12]
 810ba80:	60b9      	str	r1, [r7, #8]
 810ba82:	607a      	str	r2, [r7, #4]
 810ba84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810ba86:	2300      	movs	r3, #0
 810ba88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810ba8a:	68fb      	ldr	r3, [r7, #12]
 810ba8c:	2b00      	cmp	r3, #0
 810ba8e:	d109      	bne.n	810baa4 <xTimerGenericCommand+0x2c>
 810ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ba94:	f383 8811 	msr	BASEPRI, r3
 810ba98:	f3bf 8f6f 	isb	sy
 810ba9c:	f3bf 8f4f 	dsb	sy
 810baa0:	623b      	str	r3, [r7, #32]
 810baa2:	e7fe      	b.n	810baa2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810baa4:	4b19      	ldr	r3, [pc, #100]	; (810bb0c <xTimerGenericCommand+0x94>)
 810baa6:	681b      	ldr	r3, [r3, #0]
 810baa8:	2b00      	cmp	r3, #0
 810baaa:	d02a      	beq.n	810bb02 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810baac:	68bb      	ldr	r3, [r7, #8]
 810baae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810bab0:	687b      	ldr	r3, [r7, #4]
 810bab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810bab4:	68fb      	ldr	r3, [r7, #12]
 810bab6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810bab8:	68bb      	ldr	r3, [r7, #8]
 810baba:	2b05      	cmp	r3, #5
 810babc:	dc18      	bgt.n	810baf0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810babe:	f7ff feb5 	bl	810b82c <xTaskGetSchedulerState>
 810bac2:	4603      	mov	r3, r0
 810bac4:	2b02      	cmp	r3, #2
 810bac6:	d109      	bne.n	810badc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810bac8:	4b10      	ldr	r3, [pc, #64]	; (810bb0c <xTimerGenericCommand+0x94>)
 810baca:	6818      	ldr	r0, [r3, #0]
 810bacc:	f107 0110 	add.w	r1, r7, #16
 810bad0:	2300      	movs	r3, #0
 810bad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810bad4:	f7fe fc80 	bl	810a3d8 <xQueueGenericSend>
 810bad8:	6278      	str	r0, [r7, #36]	; 0x24
 810bada:	e012      	b.n	810bb02 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810badc:	4b0b      	ldr	r3, [pc, #44]	; (810bb0c <xTimerGenericCommand+0x94>)
 810bade:	6818      	ldr	r0, [r3, #0]
 810bae0:	f107 0110 	add.w	r1, r7, #16
 810bae4:	2300      	movs	r3, #0
 810bae6:	2200      	movs	r2, #0
 810bae8:	f7fe fc76 	bl	810a3d8 <xQueueGenericSend>
 810baec:	6278      	str	r0, [r7, #36]	; 0x24
 810baee:	e008      	b.n	810bb02 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810baf0:	4b06      	ldr	r3, [pc, #24]	; (810bb0c <xTimerGenericCommand+0x94>)
 810baf2:	6818      	ldr	r0, [r3, #0]
 810baf4:	f107 0110 	add.w	r1, r7, #16
 810baf8:	2300      	movs	r3, #0
 810bafa:	683a      	ldr	r2, [r7, #0]
 810bafc:	f7fe fd66 	bl	810a5cc <xQueueGenericSendFromISR>
 810bb00:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810bb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810bb04:	4618      	mov	r0, r3
 810bb06:	3728      	adds	r7, #40	; 0x28
 810bb08:	46bd      	mov	sp, r7
 810bb0a:	bd80      	pop	{r7, pc}
 810bb0c:	10004a40 	.word	0x10004a40

0810bb10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810bb10:	b580      	push	{r7, lr}
 810bb12:	b088      	sub	sp, #32
 810bb14:	af02      	add	r7, sp, #8
 810bb16:	6078      	str	r0, [r7, #4]
 810bb18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810bb1a:	4b22      	ldr	r3, [pc, #136]	; (810bba4 <prvProcessExpiredTimer+0x94>)
 810bb1c:	681b      	ldr	r3, [r3, #0]
 810bb1e:	68db      	ldr	r3, [r3, #12]
 810bb20:	68db      	ldr	r3, [r3, #12]
 810bb22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810bb24:	697b      	ldr	r3, [r7, #20]
 810bb26:	3304      	adds	r3, #4
 810bb28:	4618      	mov	r0, r3
 810bb2a:	f7fe f849 	bl	8109bc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810bb2e:	697b      	ldr	r3, [r7, #20]
 810bb30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bb34:	f003 0304 	and.w	r3, r3, #4
 810bb38:	2b00      	cmp	r3, #0
 810bb3a:	d021      	beq.n	810bb80 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810bb3c:	697b      	ldr	r3, [r7, #20]
 810bb3e:	699a      	ldr	r2, [r3, #24]
 810bb40:	687b      	ldr	r3, [r7, #4]
 810bb42:	18d1      	adds	r1, r2, r3
 810bb44:	687b      	ldr	r3, [r7, #4]
 810bb46:	683a      	ldr	r2, [r7, #0]
 810bb48:	6978      	ldr	r0, [r7, #20]
 810bb4a:	f000 f8d1 	bl	810bcf0 <prvInsertTimerInActiveList>
 810bb4e:	4603      	mov	r3, r0
 810bb50:	2b00      	cmp	r3, #0
 810bb52:	d01e      	beq.n	810bb92 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810bb54:	2300      	movs	r3, #0
 810bb56:	9300      	str	r3, [sp, #0]
 810bb58:	2300      	movs	r3, #0
 810bb5a:	687a      	ldr	r2, [r7, #4]
 810bb5c:	2100      	movs	r1, #0
 810bb5e:	6978      	ldr	r0, [r7, #20]
 810bb60:	f7ff ff8a 	bl	810ba78 <xTimerGenericCommand>
 810bb64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810bb66:	693b      	ldr	r3, [r7, #16]
 810bb68:	2b00      	cmp	r3, #0
 810bb6a:	d112      	bne.n	810bb92 <prvProcessExpiredTimer+0x82>
 810bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bb70:	f383 8811 	msr	BASEPRI, r3
 810bb74:	f3bf 8f6f 	isb	sy
 810bb78:	f3bf 8f4f 	dsb	sy
 810bb7c:	60fb      	str	r3, [r7, #12]
 810bb7e:	e7fe      	b.n	810bb7e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810bb80:	697b      	ldr	r3, [r7, #20]
 810bb82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bb86:	f023 0301 	bic.w	r3, r3, #1
 810bb8a:	b2da      	uxtb	r2, r3
 810bb8c:	697b      	ldr	r3, [r7, #20]
 810bb8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810bb92:	697b      	ldr	r3, [r7, #20]
 810bb94:	6a1b      	ldr	r3, [r3, #32]
 810bb96:	6978      	ldr	r0, [r7, #20]
 810bb98:	4798      	blx	r3
}
 810bb9a:	bf00      	nop
 810bb9c:	3718      	adds	r7, #24
 810bb9e:	46bd      	mov	sp, r7
 810bba0:	bd80      	pop	{r7, pc}
 810bba2:	bf00      	nop
 810bba4:	10004a38 	.word	0x10004a38

0810bba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810bba8:	b580      	push	{r7, lr}
 810bbaa:	b084      	sub	sp, #16
 810bbac:	af00      	add	r7, sp, #0
 810bbae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810bbb0:	f107 0308 	add.w	r3, r7, #8
 810bbb4:	4618      	mov	r0, r3
 810bbb6:	f000 f857 	bl	810bc68 <prvGetNextExpireTime>
 810bbba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810bbbc:	68bb      	ldr	r3, [r7, #8]
 810bbbe:	4619      	mov	r1, r3
 810bbc0:	68f8      	ldr	r0, [r7, #12]
 810bbc2:	f000 f803 	bl	810bbcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810bbc6:	f000 f8d5 	bl	810bd74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810bbca:	e7f1      	b.n	810bbb0 <prvTimerTask+0x8>

0810bbcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810bbcc:	b580      	push	{r7, lr}
 810bbce:	b084      	sub	sp, #16
 810bbd0:	af00      	add	r7, sp, #0
 810bbd2:	6078      	str	r0, [r7, #4]
 810bbd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810bbd6:	f7ff fa57 	bl	810b088 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810bbda:	f107 0308 	add.w	r3, r7, #8
 810bbde:	4618      	mov	r0, r3
 810bbe0:	f000 f866 	bl	810bcb0 <prvSampleTimeNow>
 810bbe4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810bbe6:	68bb      	ldr	r3, [r7, #8]
 810bbe8:	2b00      	cmp	r3, #0
 810bbea:	d130      	bne.n	810bc4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810bbec:	683b      	ldr	r3, [r7, #0]
 810bbee:	2b00      	cmp	r3, #0
 810bbf0:	d10a      	bne.n	810bc08 <prvProcessTimerOrBlockTask+0x3c>
 810bbf2:	687a      	ldr	r2, [r7, #4]
 810bbf4:	68fb      	ldr	r3, [r7, #12]
 810bbf6:	429a      	cmp	r2, r3
 810bbf8:	d806      	bhi.n	810bc08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810bbfa:	f7ff fa53 	bl	810b0a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810bbfe:	68f9      	ldr	r1, [r7, #12]
 810bc00:	6878      	ldr	r0, [r7, #4]
 810bc02:	f7ff ff85 	bl	810bb10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810bc06:	e024      	b.n	810bc52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810bc08:	683b      	ldr	r3, [r7, #0]
 810bc0a:	2b00      	cmp	r3, #0
 810bc0c:	d008      	beq.n	810bc20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810bc0e:	4b13      	ldr	r3, [pc, #76]	; (810bc5c <prvProcessTimerOrBlockTask+0x90>)
 810bc10:	681b      	ldr	r3, [r3, #0]
 810bc12:	681b      	ldr	r3, [r3, #0]
 810bc14:	2b00      	cmp	r3, #0
 810bc16:	d101      	bne.n	810bc1c <prvProcessTimerOrBlockTask+0x50>
 810bc18:	2301      	movs	r3, #1
 810bc1a:	e000      	b.n	810bc1e <prvProcessTimerOrBlockTask+0x52>
 810bc1c:	2300      	movs	r3, #0
 810bc1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810bc20:	4b0f      	ldr	r3, [pc, #60]	; (810bc60 <prvProcessTimerOrBlockTask+0x94>)
 810bc22:	6818      	ldr	r0, [r3, #0]
 810bc24:	687a      	ldr	r2, [r7, #4]
 810bc26:	68fb      	ldr	r3, [r7, #12]
 810bc28:	1ad3      	subs	r3, r2, r3
 810bc2a:	683a      	ldr	r2, [r7, #0]
 810bc2c:	4619      	mov	r1, r3
 810bc2e:	f7fe ffc1 	bl	810abb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810bc32:	f7ff fa37 	bl	810b0a4 <xTaskResumeAll>
 810bc36:	4603      	mov	r3, r0
 810bc38:	2b00      	cmp	r3, #0
 810bc3a:	d10a      	bne.n	810bc52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810bc3c:	4b09      	ldr	r3, [pc, #36]	; (810bc64 <prvProcessTimerOrBlockTask+0x98>)
 810bc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810bc42:	601a      	str	r2, [r3, #0]
 810bc44:	f3bf 8f4f 	dsb	sy
 810bc48:	f3bf 8f6f 	isb	sy
}
 810bc4c:	e001      	b.n	810bc52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810bc4e:	f7ff fa29 	bl	810b0a4 <xTaskResumeAll>
}
 810bc52:	bf00      	nop
 810bc54:	3710      	adds	r7, #16
 810bc56:	46bd      	mov	sp, r7
 810bc58:	bd80      	pop	{r7, pc}
 810bc5a:	bf00      	nop
 810bc5c:	10004a3c 	.word	0x10004a3c
 810bc60:	10004a40 	.word	0x10004a40
 810bc64:	e000ed04 	.word	0xe000ed04

0810bc68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810bc68:	b480      	push	{r7}
 810bc6a:	b085      	sub	sp, #20
 810bc6c:	af00      	add	r7, sp, #0
 810bc6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810bc70:	4b0e      	ldr	r3, [pc, #56]	; (810bcac <prvGetNextExpireTime+0x44>)
 810bc72:	681b      	ldr	r3, [r3, #0]
 810bc74:	681b      	ldr	r3, [r3, #0]
 810bc76:	2b00      	cmp	r3, #0
 810bc78:	d101      	bne.n	810bc7e <prvGetNextExpireTime+0x16>
 810bc7a:	2201      	movs	r2, #1
 810bc7c:	e000      	b.n	810bc80 <prvGetNextExpireTime+0x18>
 810bc7e:	2200      	movs	r2, #0
 810bc80:	687b      	ldr	r3, [r7, #4]
 810bc82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810bc84:	687b      	ldr	r3, [r7, #4]
 810bc86:	681b      	ldr	r3, [r3, #0]
 810bc88:	2b00      	cmp	r3, #0
 810bc8a:	d105      	bne.n	810bc98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810bc8c:	4b07      	ldr	r3, [pc, #28]	; (810bcac <prvGetNextExpireTime+0x44>)
 810bc8e:	681b      	ldr	r3, [r3, #0]
 810bc90:	68db      	ldr	r3, [r3, #12]
 810bc92:	681b      	ldr	r3, [r3, #0]
 810bc94:	60fb      	str	r3, [r7, #12]
 810bc96:	e001      	b.n	810bc9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810bc98:	2300      	movs	r3, #0
 810bc9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810bc9c:	68fb      	ldr	r3, [r7, #12]
}
 810bc9e:	4618      	mov	r0, r3
 810bca0:	3714      	adds	r7, #20
 810bca2:	46bd      	mov	sp, r7
 810bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bca8:	4770      	bx	lr
 810bcaa:	bf00      	nop
 810bcac:	10004a38 	.word	0x10004a38

0810bcb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810bcb0:	b580      	push	{r7, lr}
 810bcb2:	b084      	sub	sp, #16
 810bcb4:	af00      	add	r7, sp, #0
 810bcb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810bcb8:	f7ff fa90 	bl	810b1dc <xTaskGetTickCount>
 810bcbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810bcbe:	4b0b      	ldr	r3, [pc, #44]	; (810bcec <prvSampleTimeNow+0x3c>)
 810bcc0:	681b      	ldr	r3, [r3, #0]
 810bcc2:	68fa      	ldr	r2, [r7, #12]
 810bcc4:	429a      	cmp	r2, r3
 810bcc6:	d205      	bcs.n	810bcd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810bcc8:	f000 f930 	bl	810bf2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810bccc:	687b      	ldr	r3, [r7, #4]
 810bcce:	2201      	movs	r2, #1
 810bcd0:	601a      	str	r2, [r3, #0]
 810bcd2:	e002      	b.n	810bcda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810bcd4:	687b      	ldr	r3, [r7, #4]
 810bcd6:	2200      	movs	r2, #0
 810bcd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810bcda:	4a04      	ldr	r2, [pc, #16]	; (810bcec <prvSampleTimeNow+0x3c>)
 810bcdc:	68fb      	ldr	r3, [r7, #12]
 810bcde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810bce0:	68fb      	ldr	r3, [r7, #12]
}
 810bce2:	4618      	mov	r0, r3
 810bce4:	3710      	adds	r7, #16
 810bce6:	46bd      	mov	sp, r7
 810bce8:	bd80      	pop	{r7, pc}
 810bcea:	bf00      	nop
 810bcec:	10004a48 	.word	0x10004a48

0810bcf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810bcf0:	b580      	push	{r7, lr}
 810bcf2:	b086      	sub	sp, #24
 810bcf4:	af00      	add	r7, sp, #0
 810bcf6:	60f8      	str	r0, [r7, #12]
 810bcf8:	60b9      	str	r1, [r7, #8]
 810bcfa:	607a      	str	r2, [r7, #4]
 810bcfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810bcfe:	2300      	movs	r3, #0
 810bd00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810bd02:	68fb      	ldr	r3, [r7, #12]
 810bd04:	68ba      	ldr	r2, [r7, #8]
 810bd06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810bd08:	68fb      	ldr	r3, [r7, #12]
 810bd0a:	68fa      	ldr	r2, [r7, #12]
 810bd0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810bd0e:	68ba      	ldr	r2, [r7, #8]
 810bd10:	687b      	ldr	r3, [r7, #4]
 810bd12:	429a      	cmp	r2, r3
 810bd14:	d812      	bhi.n	810bd3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810bd16:	687a      	ldr	r2, [r7, #4]
 810bd18:	683b      	ldr	r3, [r7, #0]
 810bd1a:	1ad2      	subs	r2, r2, r3
 810bd1c:	68fb      	ldr	r3, [r7, #12]
 810bd1e:	699b      	ldr	r3, [r3, #24]
 810bd20:	429a      	cmp	r2, r3
 810bd22:	d302      	bcc.n	810bd2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810bd24:	2301      	movs	r3, #1
 810bd26:	617b      	str	r3, [r7, #20]
 810bd28:	e01b      	b.n	810bd62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810bd2a:	4b10      	ldr	r3, [pc, #64]	; (810bd6c <prvInsertTimerInActiveList+0x7c>)
 810bd2c:	681a      	ldr	r2, [r3, #0]
 810bd2e:	68fb      	ldr	r3, [r7, #12]
 810bd30:	3304      	adds	r3, #4
 810bd32:	4619      	mov	r1, r3
 810bd34:	4610      	mov	r0, r2
 810bd36:	f7fd ff0a 	bl	8109b4e <vListInsert>
 810bd3a:	e012      	b.n	810bd62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810bd3c:	687a      	ldr	r2, [r7, #4]
 810bd3e:	683b      	ldr	r3, [r7, #0]
 810bd40:	429a      	cmp	r2, r3
 810bd42:	d206      	bcs.n	810bd52 <prvInsertTimerInActiveList+0x62>
 810bd44:	68ba      	ldr	r2, [r7, #8]
 810bd46:	683b      	ldr	r3, [r7, #0]
 810bd48:	429a      	cmp	r2, r3
 810bd4a:	d302      	bcc.n	810bd52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810bd4c:	2301      	movs	r3, #1
 810bd4e:	617b      	str	r3, [r7, #20]
 810bd50:	e007      	b.n	810bd62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810bd52:	4b07      	ldr	r3, [pc, #28]	; (810bd70 <prvInsertTimerInActiveList+0x80>)
 810bd54:	681a      	ldr	r2, [r3, #0]
 810bd56:	68fb      	ldr	r3, [r7, #12]
 810bd58:	3304      	adds	r3, #4
 810bd5a:	4619      	mov	r1, r3
 810bd5c:	4610      	mov	r0, r2
 810bd5e:	f7fd fef6 	bl	8109b4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 810bd62:	697b      	ldr	r3, [r7, #20]
}
 810bd64:	4618      	mov	r0, r3
 810bd66:	3718      	adds	r7, #24
 810bd68:	46bd      	mov	sp, r7
 810bd6a:	bd80      	pop	{r7, pc}
 810bd6c:	10004a3c 	.word	0x10004a3c
 810bd70:	10004a38 	.word	0x10004a38

0810bd74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810bd74:	b580      	push	{r7, lr}
 810bd76:	b08e      	sub	sp, #56	; 0x38
 810bd78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810bd7a:	e0c6      	b.n	810bf0a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810bd7c:	687b      	ldr	r3, [r7, #4]
 810bd7e:	2b00      	cmp	r3, #0
 810bd80:	da17      	bge.n	810bdb2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810bd82:	1d3b      	adds	r3, r7, #4
 810bd84:	3304      	adds	r3, #4
 810bd86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810bd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bd8a:	2b00      	cmp	r3, #0
 810bd8c:	d109      	bne.n	810bda2 <prvProcessReceivedCommands+0x2e>
 810bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bd92:	f383 8811 	msr	BASEPRI, r3
 810bd96:	f3bf 8f6f 	isb	sy
 810bd9a:	f3bf 8f4f 	dsb	sy
 810bd9e:	61fb      	str	r3, [r7, #28]
 810bda0:	e7fe      	b.n	810bda0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bda4:	681b      	ldr	r3, [r3, #0]
 810bda6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810bda8:	6850      	ldr	r0, [r2, #4]
 810bdaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810bdac:	6892      	ldr	r2, [r2, #8]
 810bdae:	4611      	mov	r1, r2
 810bdb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810bdb2:	687b      	ldr	r3, [r7, #4]
 810bdb4:	2b00      	cmp	r3, #0
 810bdb6:	f2c0 80a7 	blt.w	810bf08 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810bdba:	68fb      	ldr	r3, [r7, #12]
 810bdbc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bdc0:	695b      	ldr	r3, [r3, #20]
 810bdc2:	2b00      	cmp	r3, #0
 810bdc4:	d004      	beq.n	810bdd0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bdc8:	3304      	adds	r3, #4
 810bdca:	4618      	mov	r0, r3
 810bdcc:	f7fd fef8 	bl	8109bc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810bdd0:	463b      	mov	r3, r7
 810bdd2:	4618      	mov	r0, r3
 810bdd4:	f7ff ff6c 	bl	810bcb0 <prvSampleTimeNow>
 810bdd8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810bdda:	687b      	ldr	r3, [r7, #4]
 810bddc:	2b09      	cmp	r3, #9
 810bdde:	f200 8094 	bhi.w	810bf0a <prvProcessReceivedCommands+0x196>
 810bde2:	a201      	add	r2, pc, #4	; (adr r2, 810bde8 <prvProcessReceivedCommands+0x74>)
 810bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bde8:	0810be11 	.word	0x0810be11
 810bdec:	0810be11 	.word	0x0810be11
 810bdf0:	0810be11 	.word	0x0810be11
 810bdf4:	0810be83 	.word	0x0810be83
 810bdf8:	0810be97 	.word	0x0810be97
 810bdfc:	0810bedf 	.word	0x0810bedf
 810be00:	0810be11 	.word	0x0810be11
 810be04:	0810be11 	.word	0x0810be11
 810be08:	0810be83 	.word	0x0810be83
 810be0c:	0810be97 	.word	0x0810be97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810be16:	f043 0301 	orr.w	r3, r3, #1
 810be1a:	b2da      	uxtb	r2, r3
 810be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810be22:	68ba      	ldr	r2, [r7, #8]
 810be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be26:	699b      	ldr	r3, [r3, #24]
 810be28:	18d1      	adds	r1, r2, r3
 810be2a:	68bb      	ldr	r3, [r7, #8]
 810be2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810be2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810be30:	f7ff ff5e 	bl	810bcf0 <prvInsertTimerInActiveList>
 810be34:	4603      	mov	r3, r0
 810be36:	2b00      	cmp	r3, #0
 810be38:	d067      	beq.n	810bf0a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be3c:	6a1b      	ldr	r3, [r3, #32]
 810be3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810be40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810be48:	f003 0304 	and.w	r3, r3, #4
 810be4c:	2b00      	cmp	r3, #0
 810be4e:	d05c      	beq.n	810bf0a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810be50:	68ba      	ldr	r2, [r7, #8]
 810be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be54:	699b      	ldr	r3, [r3, #24]
 810be56:	441a      	add	r2, r3
 810be58:	2300      	movs	r3, #0
 810be5a:	9300      	str	r3, [sp, #0]
 810be5c:	2300      	movs	r3, #0
 810be5e:	2100      	movs	r1, #0
 810be60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810be62:	f7ff fe09 	bl	810ba78 <xTimerGenericCommand>
 810be66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810be68:	6a3b      	ldr	r3, [r7, #32]
 810be6a:	2b00      	cmp	r3, #0
 810be6c:	d14d      	bne.n	810bf0a <prvProcessReceivedCommands+0x196>
 810be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810be72:	f383 8811 	msr	BASEPRI, r3
 810be76:	f3bf 8f6f 	isb	sy
 810be7a:	f3bf 8f4f 	dsb	sy
 810be7e:	61bb      	str	r3, [r7, #24]
 810be80:	e7fe      	b.n	810be80 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810be88:	f023 0301 	bic.w	r3, r3, #1
 810be8c:	b2da      	uxtb	r2, r3
 810be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810be94:	e039      	b.n	810bf0a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810be9c:	f043 0301 	orr.w	r3, r3, #1
 810bea0:	b2da      	uxtb	r2, r3
 810bea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810bea8:	68ba      	ldr	r2, [r7, #8]
 810beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810beac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810beb0:	699b      	ldr	r3, [r3, #24]
 810beb2:	2b00      	cmp	r3, #0
 810beb4:	d109      	bne.n	810beca <prvProcessReceivedCommands+0x156>
 810beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810beba:	f383 8811 	msr	BASEPRI, r3
 810bebe:	f3bf 8f6f 	isb	sy
 810bec2:	f3bf 8f4f 	dsb	sy
 810bec6:	617b      	str	r3, [r7, #20]
 810bec8:	e7fe      	b.n	810bec8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810becc:	699a      	ldr	r2, [r3, #24]
 810bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bed0:	18d1      	adds	r1, r2, r3
 810bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810bed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810bed8:	f7ff ff0a 	bl	810bcf0 <prvInsertTimerInActiveList>
					break;
 810bedc:	e015      	b.n	810bf0a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810bede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bee4:	f003 0302 	and.w	r3, r3, #2
 810bee8:	2b00      	cmp	r3, #0
 810beea:	d103      	bne.n	810bef4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 810beec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810beee:	f7fd fcc9 	bl	8109884 <vPortFree>
 810bef2:	e00a      	b.n	810bf0a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810befa:	f023 0301 	bic.w	r3, r3, #1
 810befe:	b2da      	uxtb	r2, r3
 810bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bf02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810bf06:	e000      	b.n	810bf0a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 810bf08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810bf0a:	4b07      	ldr	r3, [pc, #28]	; (810bf28 <prvProcessReceivedCommands+0x1b4>)
 810bf0c:	681b      	ldr	r3, [r3, #0]
 810bf0e:	1d39      	adds	r1, r7, #4
 810bf10:	2200      	movs	r2, #0
 810bf12:	4618      	mov	r0, r3
 810bf14:	f7fe fbee 	bl	810a6f4 <xQueueReceive>
 810bf18:	4603      	mov	r3, r0
 810bf1a:	2b00      	cmp	r3, #0
 810bf1c:	f47f af2e 	bne.w	810bd7c <prvProcessReceivedCommands+0x8>
	}
}
 810bf20:	bf00      	nop
 810bf22:	3730      	adds	r7, #48	; 0x30
 810bf24:	46bd      	mov	sp, r7
 810bf26:	bd80      	pop	{r7, pc}
 810bf28:	10004a40 	.word	0x10004a40

0810bf2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810bf2c:	b580      	push	{r7, lr}
 810bf2e:	b088      	sub	sp, #32
 810bf30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810bf32:	e047      	b.n	810bfc4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810bf34:	4b2d      	ldr	r3, [pc, #180]	; (810bfec <prvSwitchTimerLists+0xc0>)
 810bf36:	681b      	ldr	r3, [r3, #0]
 810bf38:	68db      	ldr	r3, [r3, #12]
 810bf3a:	681b      	ldr	r3, [r3, #0]
 810bf3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810bf3e:	4b2b      	ldr	r3, [pc, #172]	; (810bfec <prvSwitchTimerLists+0xc0>)
 810bf40:	681b      	ldr	r3, [r3, #0]
 810bf42:	68db      	ldr	r3, [r3, #12]
 810bf44:	68db      	ldr	r3, [r3, #12]
 810bf46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810bf48:	68fb      	ldr	r3, [r7, #12]
 810bf4a:	3304      	adds	r3, #4
 810bf4c:	4618      	mov	r0, r3
 810bf4e:	f7fd fe37 	bl	8109bc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810bf52:	68fb      	ldr	r3, [r7, #12]
 810bf54:	6a1b      	ldr	r3, [r3, #32]
 810bf56:	68f8      	ldr	r0, [r7, #12]
 810bf58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810bf5a:	68fb      	ldr	r3, [r7, #12]
 810bf5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bf60:	f003 0304 	and.w	r3, r3, #4
 810bf64:	2b00      	cmp	r3, #0
 810bf66:	d02d      	beq.n	810bfc4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810bf68:	68fb      	ldr	r3, [r7, #12]
 810bf6a:	699b      	ldr	r3, [r3, #24]
 810bf6c:	693a      	ldr	r2, [r7, #16]
 810bf6e:	4413      	add	r3, r2
 810bf70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810bf72:	68ba      	ldr	r2, [r7, #8]
 810bf74:	693b      	ldr	r3, [r7, #16]
 810bf76:	429a      	cmp	r2, r3
 810bf78:	d90e      	bls.n	810bf98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810bf7a:	68fb      	ldr	r3, [r7, #12]
 810bf7c:	68ba      	ldr	r2, [r7, #8]
 810bf7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810bf80:	68fb      	ldr	r3, [r7, #12]
 810bf82:	68fa      	ldr	r2, [r7, #12]
 810bf84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810bf86:	4b19      	ldr	r3, [pc, #100]	; (810bfec <prvSwitchTimerLists+0xc0>)
 810bf88:	681a      	ldr	r2, [r3, #0]
 810bf8a:	68fb      	ldr	r3, [r7, #12]
 810bf8c:	3304      	adds	r3, #4
 810bf8e:	4619      	mov	r1, r3
 810bf90:	4610      	mov	r0, r2
 810bf92:	f7fd fddc 	bl	8109b4e <vListInsert>
 810bf96:	e015      	b.n	810bfc4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810bf98:	2300      	movs	r3, #0
 810bf9a:	9300      	str	r3, [sp, #0]
 810bf9c:	2300      	movs	r3, #0
 810bf9e:	693a      	ldr	r2, [r7, #16]
 810bfa0:	2100      	movs	r1, #0
 810bfa2:	68f8      	ldr	r0, [r7, #12]
 810bfa4:	f7ff fd68 	bl	810ba78 <xTimerGenericCommand>
 810bfa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810bfaa:	687b      	ldr	r3, [r7, #4]
 810bfac:	2b00      	cmp	r3, #0
 810bfae:	d109      	bne.n	810bfc4 <prvSwitchTimerLists+0x98>
 810bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bfb4:	f383 8811 	msr	BASEPRI, r3
 810bfb8:	f3bf 8f6f 	isb	sy
 810bfbc:	f3bf 8f4f 	dsb	sy
 810bfc0:	603b      	str	r3, [r7, #0]
 810bfc2:	e7fe      	b.n	810bfc2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810bfc4:	4b09      	ldr	r3, [pc, #36]	; (810bfec <prvSwitchTimerLists+0xc0>)
 810bfc6:	681b      	ldr	r3, [r3, #0]
 810bfc8:	681b      	ldr	r3, [r3, #0]
 810bfca:	2b00      	cmp	r3, #0
 810bfcc:	d1b2      	bne.n	810bf34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810bfce:	4b07      	ldr	r3, [pc, #28]	; (810bfec <prvSwitchTimerLists+0xc0>)
 810bfd0:	681b      	ldr	r3, [r3, #0]
 810bfd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810bfd4:	4b06      	ldr	r3, [pc, #24]	; (810bff0 <prvSwitchTimerLists+0xc4>)
 810bfd6:	681b      	ldr	r3, [r3, #0]
 810bfd8:	4a04      	ldr	r2, [pc, #16]	; (810bfec <prvSwitchTimerLists+0xc0>)
 810bfda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810bfdc:	4a04      	ldr	r2, [pc, #16]	; (810bff0 <prvSwitchTimerLists+0xc4>)
 810bfde:	697b      	ldr	r3, [r7, #20]
 810bfe0:	6013      	str	r3, [r2, #0]
}
 810bfe2:	bf00      	nop
 810bfe4:	3718      	adds	r7, #24
 810bfe6:	46bd      	mov	sp, r7
 810bfe8:	bd80      	pop	{r7, pc}
 810bfea:	bf00      	nop
 810bfec:	10004a38 	.word	0x10004a38
 810bff0:	10004a3c 	.word	0x10004a3c

0810bff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810bff4:	b580      	push	{r7, lr}
 810bff6:	b082      	sub	sp, #8
 810bff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810bffa:	f7fd ff2f 	bl	8109e5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810bffe:	4b15      	ldr	r3, [pc, #84]	; (810c054 <prvCheckForValidListAndQueue+0x60>)
 810c000:	681b      	ldr	r3, [r3, #0]
 810c002:	2b00      	cmp	r3, #0
 810c004:	d120      	bne.n	810c048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810c006:	4814      	ldr	r0, [pc, #80]	; (810c058 <prvCheckForValidListAndQueue+0x64>)
 810c008:	f7fd fd50 	bl	8109aac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810c00c:	4813      	ldr	r0, [pc, #76]	; (810c05c <prvCheckForValidListAndQueue+0x68>)
 810c00e:	f7fd fd4d 	bl	8109aac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810c012:	4b13      	ldr	r3, [pc, #76]	; (810c060 <prvCheckForValidListAndQueue+0x6c>)
 810c014:	4a10      	ldr	r2, [pc, #64]	; (810c058 <prvCheckForValidListAndQueue+0x64>)
 810c016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810c018:	4b12      	ldr	r3, [pc, #72]	; (810c064 <prvCheckForValidListAndQueue+0x70>)
 810c01a:	4a10      	ldr	r2, [pc, #64]	; (810c05c <prvCheckForValidListAndQueue+0x68>)
 810c01c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810c01e:	2300      	movs	r3, #0
 810c020:	9300      	str	r3, [sp, #0]
 810c022:	4b11      	ldr	r3, [pc, #68]	; (810c068 <prvCheckForValidListAndQueue+0x74>)
 810c024:	4a11      	ldr	r2, [pc, #68]	; (810c06c <prvCheckForValidListAndQueue+0x78>)
 810c026:	2110      	movs	r1, #16
 810c028:	200a      	movs	r0, #10
 810c02a:	f7fe f899 	bl	810a160 <xQueueGenericCreateStatic>
 810c02e:	4602      	mov	r2, r0
 810c030:	4b08      	ldr	r3, [pc, #32]	; (810c054 <prvCheckForValidListAndQueue+0x60>)
 810c032:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810c034:	4b07      	ldr	r3, [pc, #28]	; (810c054 <prvCheckForValidListAndQueue+0x60>)
 810c036:	681b      	ldr	r3, [r3, #0]
 810c038:	2b00      	cmp	r3, #0
 810c03a:	d005      	beq.n	810c048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810c03c:	4b05      	ldr	r3, [pc, #20]	; (810c054 <prvCheckForValidListAndQueue+0x60>)
 810c03e:	681b      	ldr	r3, [r3, #0]
 810c040:	490b      	ldr	r1, [pc, #44]	; (810c070 <prvCheckForValidListAndQueue+0x7c>)
 810c042:	4618      	mov	r0, r3
 810c044:	f7fe fd64 	bl	810ab10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810c048:	f7fd ff36 	bl	8109eb8 <vPortExitCritical>
}
 810c04c:	bf00      	nop
 810c04e:	46bd      	mov	sp, r7
 810c050:	bd80      	pop	{r7, pc}
 810c052:	bf00      	nop
 810c054:	10004a40 	.word	0x10004a40
 810c058:	10004a10 	.word	0x10004a10
 810c05c:	10004a24 	.word	0x10004a24
 810c060:	10004a38 	.word	0x10004a38
 810c064:	10004a3c 	.word	0x10004a3c
 810c068:	10004aec 	.word	0x10004aec
 810c06c:	10004a4c 	.word	0x10004a4c
 810c070:	08111314 	.word	0x08111314

0810c074 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:





Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 810c074:	b580      	push	{r7, lr}
 810c076:	b082      	sub	sp, #8
 810c078:	af00      	add	r7, sp, #0
 810c07a:	6078      	str	r0, [r7, #4]
 810c07c:	6039      	str	r1, [r7, #0]
 810c07e:	687b      	ldr	r3, [r7, #4]
 810c080:	683a      	ldr	r2, [r7, #0]
 810c082:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 810c084:	687b      	ldr	r3, [r7, #4]
 810c086:	683a      	ldr	r2, [r7, #0]
 810c088:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreNew(256, 1, nullptr);
 810c08a:	2200      	movs	r2, #0
 810c08c:	2101      	movs	r1, #1
 810c08e:	f44f 7080 	mov.w	r0, #256	; 0x100
 810c092:	f7fd fa63 	bl	810955c <osSemaphoreNew>
 810c096:	4602      	mov	r2, r0
 810c098:	687b      	ldr	r3, [r7, #4]
 810c09a:	605a      	str	r2, [r3, #4]
}
 810c09c:	687b      	ldr	r3, [r7, #4]
 810c09e:	4618      	mov	r0, r3
 810c0a0:	3708      	adds	r7, #8
 810c0a2:	46bd      	mov	sp, r7
 810c0a4:	bd80      	pop	{r7, pc}

0810c0a6 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 810c0a6:	b580      	push	{r7, lr}
 810c0a8:	b084      	sub	sp, #16
 810c0aa:	af00      	add	r7, sp, #0
 810c0ac:	60f8      	str	r0, [r7, #12]
 810c0ae:	60b9      	str	r1, [r7, #8]
 810c0b0:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 810c0b2:	2002      	movs	r0, #2
 810c0b4:	f7f9 f978 	bl	81053a8 <HAL_HSEM_IsSemTaken>
 810c0b8:	4603      	mov	r3, r0
 810c0ba:	2b00      	cmp	r3, #0
 810c0bc:	bf14      	ite	ne
 810c0be:	2301      	movne	r3, #1
 810c0c0:	2300      	moveq	r3, #0
 810c0c2:	b2db      	uxtb	r3, r3
 810c0c4:	2b00      	cmp	r3, #0
 810c0c6:	d000      	beq.n	810c0ca <_ZN7Console8transmitEPhm+0x24>
 810c0c8:	e7f3      	b.n	810c0b2 <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 810c0ca:	2102      	movs	r1, #2
 810c0cc:	2002      	movs	r0, #2
 810c0ce:	f7f9 f947 	bl	8105360 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 810c0d2:	68fb      	ldr	r3, [r7, #12]
 810c0d4:	6818      	ldr	r0, [r3, #0]
 810c0d6:	687b      	ldr	r3, [r7, #4]
 810c0d8:	b29a      	uxth	r2, r3
 810c0da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 810c0de:	68b9      	ldr	r1, [r7, #8]
 810c0e0:	f7fb fdfc 	bl	8107cdc <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 810c0e4:	2102      	movs	r1, #2
 810c0e6:	2002      	movs	r0, #2
 810c0e8:	f7f9 f974 	bl	81053d4 <HAL_HSEM_Release>
}
 810c0ec:	bf00      	nop
 810c0ee:	3710      	adds	r7, #16
 810c0f0:	46bd      	mov	sp, r7
 810c0f2:	bd80      	pop	{r7, pc}

0810c0f4 <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 810c0f4:	b40e      	push	{r1, r2, r3}
 810c0f6:	b590      	push	{r4, r7, lr}
 810c0f8:	b084      	sub	sp, #16
 810c0fa:	af00      	add	r7, sp, #0
 810c0fc:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810c0fe:	f107 0320 	add.w	r3, r7, #32
 810c102:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 810c104:	687b      	ldr	r3, [r7, #4]
 810c106:	3308      	adds	r3, #8
 810c108:	68fa      	ldr	r2, [r7, #12]
 810c10a:	69f9      	ldr	r1, [r7, #28]
 810c10c:	4618      	mov	r0, r3
 810c10e:	f003 f80d 	bl	810f12c <vsiprintf>
 810c112:	4603      	mov	r3, r0
 810c114:	2b00      	cmp	r3, #0
 810c116:	bfcc      	ite	gt
 810c118:	2301      	movgt	r3, #1
 810c11a:	2300      	movle	r3, #0
 810c11c:	b2db      	uxtb	r3, r3
 810c11e:	2b00      	cmp	r3, #0
 810c120:	d00d      	beq.n	810c13e <_ZN7Console6printfEPKcz+0x4a>
		transmit((uint8_t*) buffer, strlen(buffer));
 810c122:	687b      	ldr	r3, [r7, #4]
 810c124:	f103 0408 	add.w	r4, r3, #8
 810c128:	687b      	ldr	r3, [r7, #4]
 810c12a:	3308      	adds	r3, #8
 810c12c:	4618      	mov	r0, r3
 810c12e:	f7f4 f8d7 	bl	81002e0 <strlen>
 810c132:	4603      	mov	r3, r0
 810c134:	461a      	mov	r2, r3
 810c136:	4621      	mov	r1, r4
 810c138:	6878      	ldr	r0, [r7, #4]
 810c13a:	f7ff ffb4 	bl	810c0a6 <_ZN7Console8transmitEPhm>
	}

	va_end(args);
}
 810c13e:	bf00      	nop
 810c140:	3710      	adds	r7, #16
 810c142:	46bd      	mov	sp, r7
 810c144:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 810c148:	b003      	add	sp, #12
 810c14a:	4770      	bx	lr

0810c14c <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 810c14c:	b580      	push	{r7, lr}
 810c14e:	b082      	sub	sp, #8
 810c150:	af00      	add	r7, sp, #0
 810c152:	6078      	str	r0, [r7, #4]
 810c154:	6039      	str	r1, [r7, #0]
 810c156:	687b      	ldr	r3, [r7, #4]
 810c158:	2b01      	cmp	r3, #1
 810c15a:	d108      	bne.n	810c16e <_Z41__static_initialization_and_destruction_0ii+0x22>
 810c15c:	683b      	ldr	r3, [r7, #0]
 810c15e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810c162:	4293      	cmp	r3, r2
 810c164:	d103      	bne.n	810c16e <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 810c166:	4904      	ldr	r1, [pc, #16]	; (810c178 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 810c168:	4804      	ldr	r0, [pc, #16]	; (810c17c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 810c16a:	f7ff ff83 	bl	810c074 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 810c16e:	bf00      	nop
 810c170:	3708      	adds	r7, #8
 810c172:	46bd      	mov	sp, r7
 810c174:	bd80      	pop	{r7, pc}
 810c176:	bf00      	nop
 810c178:	10005c14 	.word	0x10005c14
 810c17c:	10004b3c 	.word	0x10004b3c

0810c180 <_GLOBAL__sub_I_console>:
 810c180:	b580      	push	{r7, lr}
 810c182:	af00      	add	r7, sp, #0
 810c184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810c188:	2001      	movs	r0, #1
 810c18a:	f7ff ffdf 	bl	810c14c <_Z41__static_initialization_and_destruction_0ii>
 810c18e:	bd80      	pop	{r7, pc}

0810c190 <_ZN8Profiler6enableEv>:
			profiler->depth_to_display--;
		}
	}
}

void Profiler::enable() {
 810c190:	b480      	push	{r7}
 810c192:	b085      	sub	sp, #20
 810c194:	af00      	add	r7, sp, #0
 810c196:	6078      	str	r0, [r7, #4]
	profiling_requested = true;
 810c198:	687b      	ldr	r3, [r7, #4]
 810c19a:	2201      	movs	r2, #1
 810c19c:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340

	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810c1a0:	2300      	movs	r3, #0
 810c1a2:	73fb      	strb	r3, [r7, #15]
 810c1a4:	7bfb      	ldrb	r3, [r7, #15]
 810c1a6:	2b0f      	cmp	r3, #15
 810c1a8:	d80c      	bhi.n	810c1c4 <_ZN8Profiler6enableEv+0x34>
		profilers[i].depth_to_display = -1;
 810c1aa:	7bfb      	ldrb	r3, [r7, #15]
 810c1ac:	687a      	ldr	r2, [r7, #4]
 810c1ae:	2134      	movs	r1, #52	; 0x34
 810c1b0:	fb01 f303 	mul.w	r3, r1, r3
 810c1b4:	4413      	add	r3, r2
 810c1b6:	3308      	adds	r3, #8
 810c1b8:	22ff      	movs	r2, #255	; 0xff
 810c1ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810c1bc:	7bfb      	ldrb	r3, [r7, #15]
 810c1be:	3301      	adds	r3, #1
 810c1c0:	73fb      	strb	r3, [r7, #15]
 810c1c2:	e7ef      	b.n	810c1a4 <_ZN8Profiler6enableEv+0x14>
	}
}
 810c1c4:	bf00      	nop
 810c1c6:	3714      	adds	r7, #20
 810c1c8:	46bd      	mov	sp, r7
 810c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1ce:	4770      	bx	lr

0810c1d0 <_ZN8Profiler7disableEv>:

void Profiler::disable() {
 810c1d0:	b480      	push	{r7}
 810c1d2:	b083      	sub	sp, #12
 810c1d4:	af00      	add	r7, sp, #0
 810c1d6:	6078      	str	r0, [r7, #4]
	profiling = false;
 810c1d8:	687b      	ldr	r3, [r7, #4]
 810c1da:	2200      	movs	r2, #0
 810c1dc:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
}
 810c1e0:	bf00      	nop
 810c1e2:	370c      	adds	r7, #12
 810c1e4:	46bd      	mov	sp, r7
 810c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1ea:	4770      	bx	lr

0810c1ec <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:


#include "Debug.h"


Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 810c1ec:	b580      	push	{r7, lr}
 810c1ee:	b084      	sub	sp, #16
 810c1f0:	af00      	add	r7, sp, #0
 810c1f2:	60f8      	str	r0, [r7, #12]
 810c1f4:	60b9      	str	r1, [r7, #8]
 810c1f6:	607a      	str	r2, [r7, #4]
 810c1f8:	68fb      	ldr	r3, [r7, #12]
 810c1fa:	4910      	ldr	r1, [pc, #64]	; (810c23c <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x50>)
 810c1fc:	4618      	mov	r0, r3
 810c1fe:	f002 f8f7 	bl	810e3f0 <_ZN6ThreadC1EPKc>
 810c202:	4a0f      	ldr	r2, [pc, #60]	; (810c240 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x54>)
 810c204:	68fb      	ldr	r3, [r7, #12]
 810c206:	601a      	str	r2, [r3, #0]
 810c208:	68fb      	ldr	r3, [r7, #12]
 810c20a:	68ba      	ldr	r2, [r7, #8]
 810c20c:	62da      	str	r2, [r3, #44]	; 0x2c
 810c20e:	68fb      	ldr	r3, [r7, #12]
 810c210:	687a      	ldr	r2, [r7, #4]
 810c212:	631a      	str	r2, [r3, #48]	; 0x30
 810c214:	68fb      	ldr	r3, [r7, #12]
 810c216:	2200      	movs	r2, #0
 810c218:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 810c21c:	68fb      	ldr	r3, [r7, #12]
 810c21e:	2200      	movs	r2, #0
 810c220:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
 810c224:	68fb      	ldr	r3, [r7, #12]
 810c226:	f503 720d 	add.w	r2, r3, #564	; 0x234
 810c22a:	68fb      	ldr	r3, [r7, #12]
 810c22c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
}
 810c230:	68fb      	ldr	r3, [r7, #12]
 810c232:	4618      	mov	r0, r3
 810c234:	3710      	adds	r7, #16
 810c236:	46bd      	mov	sp, r7
 810c238:	bd80      	pop	{r7, pc}
 810c23a:	bf00      	nop
 810c23c:	0811131c 	.word	0x0811131c
 810c240:	0811197c 	.word	0x0811197c

0810c244 <_ZN5Shell4initEv>:

void Shell::init() {
 810c244:	b580      	push	{r7, lr}
 810c246:	b082      	sub	sp, #8
 810c248:	af00      	add	r7, sp, #0
 810c24a:	6078      	str	r0, [r7, #4]
	console.printf("\x1b[2J\x1b[H");
 810c24c:	490a      	ldr	r1, [pc, #40]	; (810c278 <_ZN5Shell4initEv+0x34>)
 810c24e:	480b      	ldr	r0, [pc, #44]	; (810c27c <_ZN5Shell4initEv+0x38>)
 810c250:	f7ff ff50 	bl	810c0f4 <_ZN7Console6printfEPKcz>
	console.printf("----- EPFL Xplore Avionics Shell -----\n");
 810c254:	490a      	ldr	r1, [pc, #40]	; (810c280 <_ZN5Shell4initEv+0x3c>)
 810c256:	4809      	ldr	r0, [pc, #36]	; (810c27c <_ZN5Shell4initEv+0x38>)
 810c258:	f7ff ff4c 	bl	810c0f4 <_ZN7Console6printfEPKcz>
	HAL_UART_Receive_DMA(uart, dma_buffer, CMD_BUFFER_SIZE);
 810c25c:	687b      	ldr	r3, [r7, #4]
 810c25e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 810c260:	687b      	ldr	r3, [r7, #4]
 810c262:	3334      	adds	r3, #52	; 0x34
 810c264:	f44f 7200 	mov.w	r2, #512	; 0x200
 810c268:	4619      	mov	r1, r3
 810c26a:	f7fb fdcd 	bl	8107e08 <HAL_UART_Receive_DMA>
}
 810c26e:	bf00      	nop
 810c270:	3708      	adds	r7, #8
 810c272:	46bd      	mov	sp, r7
 810c274:	bd80      	pop	{r7, pc}
 810c276:	bf00      	nop
 810c278:	08111324 	.word	0x08111324
 810c27c:	10004b3c 	.word	0x10004b3c
 810c280:	0811132c 	.word	0x0811132c

0810c284 <_ZN5Shell4loopEv>:

void Shell::loop() {
 810c284:	b580      	push	{r7, lr}
 810c286:	b082      	sub	sp, #8
 810c288:	af00      	add	r7, sp, #0
 810c28a:	6078      	str	r0, [r7, #4]
	endDmaStreamIndex = CMD_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 810c28c:	687b      	ldr	r3, [r7, #4]
 810c28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c292:	681b      	ldr	r3, [r3, #0]
 810c294:	4a4f      	ldr	r2, [pc, #316]	; (810c3d4 <_ZN5Shell4loopEv+0x150>)
 810c296:	4293      	cmp	r3, r2
 810c298:	d068      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c29a:	687b      	ldr	r3, [r7, #4]
 810c29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c29e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c2a0:	681b      	ldr	r3, [r3, #0]
 810c2a2:	4a4d      	ldr	r2, [pc, #308]	; (810c3d8 <_ZN5Shell4loopEv+0x154>)
 810c2a4:	4293      	cmp	r3, r2
 810c2a6:	d061      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c2a8:	687b      	ldr	r3, [r7, #4]
 810c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c2ae:	681b      	ldr	r3, [r3, #0]
 810c2b0:	4a4a      	ldr	r2, [pc, #296]	; (810c3dc <_ZN5Shell4loopEv+0x158>)
 810c2b2:	4293      	cmp	r3, r2
 810c2b4:	d05a      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c2b6:	687b      	ldr	r3, [r7, #4]
 810c2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c2ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c2bc:	681b      	ldr	r3, [r3, #0]
 810c2be:	4a48      	ldr	r2, [pc, #288]	; (810c3e0 <_ZN5Shell4loopEv+0x15c>)
 810c2c0:	4293      	cmp	r3, r2
 810c2c2:	d053      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c2c4:	687b      	ldr	r3, [r7, #4]
 810c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c2ca:	681b      	ldr	r3, [r3, #0]
 810c2cc:	4a45      	ldr	r2, [pc, #276]	; (810c3e4 <_ZN5Shell4loopEv+0x160>)
 810c2ce:	4293      	cmp	r3, r2
 810c2d0:	d04c      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c2d2:	687b      	ldr	r3, [r7, #4]
 810c2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c2d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c2d8:	681b      	ldr	r3, [r3, #0]
 810c2da:	4a43      	ldr	r2, [pc, #268]	; (810c3e8 <_ZN5Shell4loopEv+0x164>)
 810c2dc:	4293      	cmp	r3, r2
 810c2de:	d045      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c2e0:	687b      	ldr	r3, [r7, #4]
 810c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c2e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c2e6:	681b      	ldr	r3, [r3, #0]
 810c2e8:	4a40      	ldr	r2, [pc, #256]	; (810c3ec <_ZN5Shell4loopEv+0x168>)
 810c2ea:	4293      	cmp	r3, r2
 810c2ec:	d03e      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c2ee:	687b      	ldr	r3, [r7, #4]
 810c2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c2f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c2f4:	681b      	ldr	r3, [r3, #0]
 810c2f6:	4a3e      	ldr	r2, [pc, #248]	; (810c3f0 <_ZN5Shell4loopEv+0x16c>)
 810c2f8:	4293      	cmp	r3, r2
 810c2fa:	d037      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c2fc:	687b      	ldr	r3, [r7, #4]
 810c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c302:	681b      	ldr	r3, [r3, #0]
 810c304:	4a3b      	ldr	r2, [pc, #236]	; (810c3f4 <_ZN5Shell4loopEv+0x170>)
 810c306:	4293      	cmp	r3, r2
 810c308:	d030      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c30a:	687b      	ldr	r3, [r7, #4]
 810c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c30e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c310:	681b      	ldr	r3, [r3, #0]
 810c312:	4a39      	ldr	r2, [pc, #228]	; (810c3f8 <_ZN5Shell4loopEv+0x174>)
 810c314:	4293      	cmp	r3, r2
 810c316:	d029      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c318:	687b      	ldr	r3, [r7, #4]
 810c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c31c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c31e:	681b      	ldr	r3, [r3, #0]
 810c320:	4a36      	ldr	r2, [pc, #216]	; (810c3fc <_ZN5Shell4loopEv+0x178>)
 810c322:	4293      	cmp	r3, r2
 810c324:	d022      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c326:	687b      	ldr	r3, [r7, #4]
 810c328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c32a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c32c:	681b      	ldr	r3, [r3, #0]
 810c32e:	4a34      	ldr	r2, [pc, #208]	; (810c400 <_ZN5Shell4loopEv+0x17c>)
 810c330:	4293      	cmp	r3, r2
 810c332:	d01b      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c334:	687b      	ldr	r3, [r7, #4]
 810c336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c33a:	681b      	ldr	r3, [r3, #0]
 810c33c:	4a31      	ldr	r2, [pc, #196]	; (810c404 <_ZN5Shell4loopEv+0x180>)
 810c33e:	4293      	cmp	r3, r2
 810c340:	d014      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c342:	687b      	ldr	r3, [r7, #4]
 810c344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c348:	681b      	ldr	r3, [r3, #0]
 810c34a:	4a2f      	ldr	r2, [pc, #188]	; (810c408 <_ZN5Shell4loopEv+0x184>)
 810c34c:	4293      	cmp	r3, r2
 810c34e:	d00d      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c350:	687b      	ldr	r3, [r7, #4]
 810c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c356:	681b      	ldr	r3, [r3, #0]
 810c358:	4a2c      	ldr	r2, [pc, #176]	; (810c40c <_ZN5Shell4loopEv+0x188>)
 810c35a:	4293      	cmp	r3, r2
 810c35c:	d006      	beq.n	810c36c <_ZN5Shell4loopEv+0xe8>
 810c35e:	687b      	ldr	r3, [r7, #4]
 810c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c364:	681b      	ldr	r3, [r3, #0]
 810c366:	4a2a      	ldr	r2, [pc, #168]	; (810c410 <_ZN5Shell4loopEv+0x18c>)
 810c368:	4293      	cmp	r3, r2
 810c36a:	d107      	bne.n	810c37c <_ZN5Shell4loopEv+0xf8>
 810c36c:	687b      	ldr	r3, [r7, #4]
 810c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c372:	681b      	ldr	r3, [r3, #0]
 810c374:	685b      	ldr	r3, [r3, #4]
 810c376:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810c37a:	e006      	b.n	810c38a <_ZN5Shell4loopEv+0x106>
 810c37c:	687b      	ldr	r3, [r7, #4]
 810c37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c382:	681b      	ldr	r3, [r3, #0]
 810c384:	685b      	ldr	r3, [r3, #4]
 810c386:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810c38a:	687a      	ldr	r2, [r7, #4]
 810c38c:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810c390:	687b      	ldr	r3, [r7, #4]
 810c392:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 810c396:	687b      	ldr	r3, [r7, #4]
 810c398:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 810c39c:	429a      	cmp	r2, r3
 810c39e:	d014      	beq.n	810c3ca <_ZN5Shell4loopEv+0x146>
		receiveByte(dma_buffer[lastDmaStreamIndex]);
 810c3a0:	687b      	ldr	r3, [r7, #4]
 810c3a2:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 810c3a6:	687a      	ldr	r2, [r7, #4]
 810c3a8:	4413      	add	r3, r2
 810c3aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810c3ae:	4619      	mov	r1, r3
 810c3b0:	6878      	ldr	r0, [r7, #4]
 810c3b2:	f000 f82f 	bl	810c414 <_ZN5Shell11receiveByteEc>
		lastDmaStreamIndex = (lastDmaStreamIndex + 1) % CMD_BUFFER_SIZE;
 810c3b6:	687b      	ldr	r3, [r7, #4]
 810c3b8:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 810c3bc:	3301      	adds	r3, #1
 810c3be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810c3c2:	687b      	ldr	r3, [r7, #4]
 810c3c4:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810c3c8:	e7e2      	b.n	810c390 <_ZN5Shell4loopEv+0x10c>
	}
}
 810c3ca:	bf00      	nop
 810c3cc:	3708      	adds	r7, #8
 810c3ce:	46bd      	mov	sp, r7
 810c3d0:	bd80      	pop	{r7, pc}
 810c3d2:	bf00      	nop
 810c3d4:	40020010 	.word	0x40020010
 810c3d8:	40020028 	.word	0x40020028
 810c3dc:	40020040 	.word	0x40020040
 810c3e0:	40020058 	.word	0x40020058
 810c3e4:	40020070 	.word	0x40020070
 810c3e8:	40020088 	.word	0x40020088
 810c3ec:	400200a0 	.word	0x400200a0
 810c3f0:	400200b8 	.word	0x400200b8
 810c3f4:	40020410 	.word	0x40020410
 810c3f8:	40020428 	.word	0x40020428
 810c3fc:	40020440 	.word	0x40020440
 810c400:	40020458 	.word	0x40020458
 810c404:	40020470 	.word	0x40020470
 810c408:	40020488 	.word	0x40020488
 810c40c:	400204a0 	.word	0x400204a0
 810c410:	400204b8 	.word	0x400204b8

0810c414 <_ZN5Shell11receiveByteEc>:


void Shell::receiveByte(char cbuf) {
 810c414:	b580      	push	{r7, lr}
 810c416:	b084      	sub	sp, #16
 810c418:	af00      	add	r7, sp, #0
 810c41a:	6078      	str	r0, [r7, #4]
 810c41c:	460b      	mov	r3, r1
 810c41e:	70fb      	strb	r3, [r7, #3]
	if(cbuf == '\0') {
 810c420:	78fb      	ldrb	r3, [r7, #3]
 810c422:	2b00      	cmp	r3, #0
 810c424:	f000 809f 	beq.w	810c566 <_ZN5Shell11receiveByteEc+0x152>
		return;
	}

	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
 810c428:	78fb      	ldrb	r3, [r7, #3]
 810c42a:	2b0a      	cmp	r3, #10
 810c42c:	d050      	beq.n	810c4d0 <_ZN5Shell11receiveByteEc+0xbc>
 810c42e:	78fb      	ldrb	r3, [r7, #3]
 810c430:	2b0d      	cmp	r3, #13
 810c432:	d04d      	beq.n	810c4d0 <_ZN5Shell11receiveByteEc+0xbc>
		command_buffer[command_index++] = cbuf;
 810c434:	687b      	ldr	r3, [r7, #4]
 810c436:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 810c43a:	1c5a      	adds	r2, r3, #1
 810c43c:	b2d1      	uxtb	r1, r2
 810c43e:	687a      	ldr	r2, [r7, #4]
 810c440:	f882 143c 	strb.w	r1, [r2, #1084]	; 0x43c
 810c444:	461a      	mov	r2, r3
 810c446:	687b      	ldr	r3, [r7, #4]
 810c448:	4413      	add	r3, r2
 810c44a:	78fa      	ldrb	r2, [r7, #3]
 810c44c:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234

		if(cbuf == ' ') {
 810c450:	78fb      	ldrb	r3, [r7, #3]
 810c452:	2b20      	cmp	r3, #32
 810c454:	f040 8089 	bne.w	810c56a <_ZN5Shell11receiveByteEc+0x156>
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810c458:	687b      	ldr	r3, [r7, #4]
 810c45a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 810c45e:	461a      	mov	r2, r3
 810c460:	687b      	ldr	r3, [r7, #4]
 810c462:	3288      	adds	r2, #136	; 0x88
 810c464:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810c468:	461a      	mov	r2, r3
 810c46a:	687b      	ldr	r3, [r7, #4]
 810c46c:	f503 730d 	add.w	r3, r3, #564	; 0x234
 810c470:	1ad3      	subs	r3, r2, r3
 810c472:	73fb      	strb	r3, [r7, #15]

			cmd.components[cmd.num_components].length = command_index - start_index - 1;
 810c474:	687b      	ldr	r3, [r7, #4]
 810c476:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
 810c47a:	7bfb      	ldrb	r3, [r7, #15]
 810c47c:	1ad3      	subs	r3, r2, r3
 810c47e:	b2db      	uxtb	r3, r3
 810c480:	687a      	ldr	r2, [r7, #4]
 810c482:	f892 2480 	ldrb.w	r2, [r2, #1152]	; 0x480
 810c486:	4610      	mov	r0, r2
 810c488:	3b01      	subs	r3, #1
 810c48a:	b2d9      	uxtb	r1, r3
 810c48c:	687a      	ldr	r2, [r7, #4]
 810c48e:	f100 0388 	add.w	r3, r0, #136	; 0x88
 810c492:	00db      	lsls	r3, r3, #3
 810c494:	4413      	add	r3, r2
 810c496:	460a      	mov	r2, r1
 810c498:	711a      	strb	r2, [r3, #4]
			cmd.num_components++;
 810c49a:	687b      	ldr	r3, [r7, #4]
 810c49c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 810c4a0:	3301      	adds	r3, #1
 810c4a2:	b2da      	uxtb	r2, r3
 810c4a4:	687b      	ldr	r3, [r7, #4]
 810c4a6:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
 810c4aa:	687b      	ldr	r3, [r7, #4]
 810c4ac:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 810c4b0:	461a      	mov	r2, r3
 810c4b2:	687b      	ldr	r3, [r7, #4]
 810c4b4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 810c4b8:	4618      	mov	r0, r3
 810c4ba:	f502 730c 	add.w	r3, r2, #560	; 0x230
 810c4be:	687a      	ldr	r2, [r7, #4]
 810c4c0:	4413      	add	r3, r2
 810c4c2:	1d19      	adds	r1, r3, #4
 810c4c4:	687b      	ldr	r3, [r7, #4]
 810c4c6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 810c4ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		}
 810c4ce:	e04c      	b.n	810c56a <_ZN5Shell11receiveByteEc+0x156>
	} else {
		uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810c4d0:	687b      	ldr	r3, [r7, #4]
 810c4d2:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 810c4d6:	461a      	mov	r2, r3
 810c4d8:	687b      	ldr	r3, [r7, #4]
 810c4da:	3288      	adds	r2, #136	; 0x88
 810c4dc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810c4e0:	461a      	mov	r2, r3
 810c4e2:	687b      	ldr	r3, [r7, #4]
 810c4e4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 810c4e8:	1ad3      	subs	r3, r2, r3
 810c4ea:	73bb      	strb	r3, [r7, #14]
		cmd.components[cmd.num_components].length = command_index - start_index;
 810c4ec:	687b      	ldr	r3, [r7, #4]
 810c4ee:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
 810c4f2:	687b      	ldr	r3, [r7, #4]
 810c4f4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 810c4f8:	4618      	mov	r0, r3
 810c4fa:	7bbb      	ldrb	r3, [r7, #14]
 810c4fc:	1ad3      	subs	r3, r2, r3
 810c4fe:	b2d9      	uxtb	r1, r3
 810c500:	687a      	ldr	r2, [r7, #4]
 810c502:	f100 0388 	add.w	r3, r0, #136	; 0x88
 810c506:	00db      	lsls	r3, r3, #3
 810c508:	4413      	add	r3, r2
 810c50a:	460a      	mov	r2, r1
 810c50c:	711a      	strb	r2, [r3, #4]

		if(command_index - start_index > 0) {
 810c50e:	687b      	ldr	r3, [r7, #4]
 810c510:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 810c514:	461a      	mov	r2, r3
 810c516:	7bbb      	ldrb	r3, [r7, #14]
 810c518:	1ad3      	subs	r3, r2, r3
 810c51a:	2b00      	cmp	r3, #0
 810c51c:	dd07      	ble.n	810c52e <_ZN5Shell11receiveByteEc+0x11a>
			cmd.num_components++;
 810c51e:	687b      	ldr	r3, [r7, #4]
 810c520:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 810c524:	3301      	adds	r3, #1
 810c526:	b2da      	uxtb	r2, r3
 810c528:	687b      	ldr	r3, [r7, #4]
 810c52a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
		}

		terminal->execute(&cmd, &console);
 810c52e:	687b      	ldr	r3, [r7, #4]
 810c530:	6b18      	ldr	r0, [r3, #48]	; 0x30
 810c532:	687b      	ldr	r3, [r7, #4]
 810c534:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 810c538:	4a0e      	ldr	r2, [pc, #56]	; (810c574 <_ZN5Shell11receiveByteEc+0x160>)
 810c53a:	4619      	mov	r1, r3
 810c53c:	f000 f84e 	bl	810c5dc <_ZN8Terminal7executeEP12ShellCommandP7Console>

		command_index = 0;
 810c540:	687b      	ldr	r3, [r7, #4]
 810c542:	2200      	movs	r2, #0
 810c544:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		cmd.num_components = 0;
 810c548:	687b      	ldr	r3, [r7, #4]
 810c54a:	2200      	movs	r2, #0
 810c54c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
		cmd.components[0].length = 0;
 810c550:	687b      	ldr	r3, [r7, #4]
 810c552:	2200      	movs	r2, #0
 810c554:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
		cmd.components[0].component = command_buffer;
 810c558:	687b      	ldr	r3, [r7, #4]
 810c55a:	f503 720d 	add.w	r2, r3, #564	; 0x234
 810c55e:	687b      	ldr	r3, [r7, #4]
 810c560:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 810c564:	e002      	b.n	810c56c <_ZN5Shell11receiveByteEc+0x158>
		return;
 810c566:	bf00      	nop
 810c568:	e000      	b.n	810c56c <_ZN5Shell11receiveByteEc+0x158>
		}
 810c56a:	bf00      	nop
	}
}
 810c56c:	3710      	adds	r7, #16
 810c56e:	46bd      	mov	sp, r7
 810c570:	bd80      	pop	{r7, pc}
 810c572:	bf00      	nop
 810c574:	10004b3c 	.word	0x10004b3c

0810c578 <_ZN16CommandComponent7matchesEPKc>:

struct CommandComponent {
	const char* component;
	uint8_t length;

	bool matches(const char* target) {
 810c578:	b480      	push	{r7}
 810c57a:	b085      	sub	sp, #20
 810c57c:	af00      	add	r7, sp, #0
 810c57e:	6078      	str	r0, [r7, #4]
 810c580:	6039      	str	r1, [r7, #0]
		uint8_t i;

		for(i = 0; i < length; i++) {
 810c582:	2300      	movs	r3, #0
 810c584:	73fb      	strb	r3, [r7, #15]
 810c586:	687b      	ldr	r3, [r7, #4]
 810c588:	791b      	ldrb	r3, [r3, #4]
 810c58a:	7bfa      	ldrb	r2, [r7, #15]
 810c58c:	429a      	cmp	r2, r3
 810c58e:	d216      	bcs.n	810c5be <_ZN16CommandComponent7matchesEPKc+0x46>
			if(target[i] != component[i] || target[i] == '\0') {
 810c590:	7bfb      	ldrb	r3, [r7, #15]
 810c592:	683a      	ldr	r2, [r7, #0]
 810c594:	4413      	add	r3, r2
 810c596:	781a      	ldrb	r2, [r3, #0]
 810c598:	687b      	ldr	r3, [r7, #4]
 810c59a:	6819      	ldr	r1, [r3, #0]
 810c59c:	7bfb      	ldrb	r3, [r7, #15]
 810c59e:	440b      	add	r3, r1
 810c5a0:	781b      	ldrb	r3, [r3, #0]
 810c5a2:	429a      	cmp	r2, r3
 810c5a4:	d105      	bne.n	810c5b2 <_ZN16CommandComponent7matchesEPKc+0x3a>
 810c5a6:	7bfb      	ldrb	r3, [r7, #15]
 810c5a8:	683a      	ldr	r2, [r7, #0]
 810c5aa:	4413      	add	r3, r2
 810c5ac:	781b      	ldrb	r3, [r3, #0]
 810c5ae:	2b00      	cmp	r3, #0
 810c5b0:	d101      	bne.n	810c5b6 <_ZN16CommandComponent7matchesEPKc+0x3e>
				return false;
 810c5b2:	2300      	movs	r3, #0
 810c5b4:	e00c      	b.n	810c5d0 <_ZN16CommandComponent7matchesEPKc+0x58>
		for(i = 0; i < length; i++) {
 810c5b6:	7bfb      	ldrb	r3, [r7, #15]
 810c5b8:	3301      	adds	r3, #1
 810c5ba:	73fb      	strb	r3, [r7, #15]
 810c5bc:	e7e3      	b.n	810c586 <_ZN16CommandComponent7matchesEPKc+0xe>
			}
		}

		return target[i] == '\0';
 810c5be:	7bfb      	ldrb	r3, [r7, #15]
 810c5c0:	683a      	ldr	r2, [r7, #0]
 810c5c2:	4413      	add	r3, r2
 810c5c4:	781b      	ldrb	r3, [r3, #0]
 810c5c6:	2b00      	cmp	r3, #0
 810c5c8:	bf0c      	ite	eq
 810c5ca:	2301      	moveq	r3, #1
 810c5cc:	2300      	movne	r3, #0
 810c5ce:	b2db      	uxtb	r3, r3
	}
 810c5d0:	4618      	mov	r0, r3
 810c5d2:	3714      	adds	r7, #20
 810c5d4:	46bd      	mov	sp, r7
 810c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5da:	4770      	bx	lr

0810c5dc <_ZN8Terminal7executeEP12ShellCommandP7Console>:


#define EQUALS(index, str) (cmd->num_components > (index) && cmd->components[(index)].matches((str)))


void Terminal::execute(ShellCommand* cmd, Console* feedback) {
 810c5dc:	b580      	push	{r7, lr}
 810c5de:	b086      	sub	sp, #24
 810c5e0:	af00      	add	r7, sp, #0
 810c5e2:	60f8      	str	r0, [r7, #12]
 810c5e4:	60b9      	str	r1, [r7, #8]
 810c5e6:	607a      	str	r2, [r7, #4]
	if(cmd->num_components > 0) {
 810c5e8:	68bb      	ldr	r3, [r7, #8]
 810c5ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c5ee:	2b00      	cmp	r3, #0
 810c5f0:	f000 81e3 	beq.w	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		if(EQUALS(0, "help")) {
 810c5f4:	68bb      	ldr	r3, [r7, #8]
 810c5f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c5fa:	2b00      	cmp	r3, #0
 810c5fc:	d009      	beq.n	810c612 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810c5fe:	68bb      	ldr	r3, [r7, #8]
 810c600:	49a8      	ldr	r1, [pc, #672]	; (810c8a4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 810c602:	4618      	mov	r0, r3
 810c604:	f7ff ffb8 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c608:	4603      	mov	r3, r0
 810c60a:	2b00      	cmp	r3, #0
 810c60c:	d001      	beq.n	810c612 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810c60e:	2301      	movs	r3, #1
 810c610:	e000      	b.n	810c614 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x38>
 810c612:	2300      	movs	r3, #0
 810c614:	2b00      	cmp	r3, #0
 810c616:	d01c      	beq.n	810c652 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x76>
			feedback->printf("> Xplore Avionics available commands:\n");
 810c618:	49a3      	ldr	r1, [pc, #652]	; (810c8a8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
 810c61a:	6878      	ldr	r0, [r7, #4]
 810c61c:	f7ff fd6a 	bl	810c0f4 <_ZN7Console6printfEPKcz>
			feedback->printf("> clear: clears the screen\n");
 810c620:	49a2      	ldr	r1, [pc, #648]	; (810c8ac <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 810c622:	6878      	ldr	r0, [r7, #4]
 810c624:	f7ff fd66 	bl	810c0f4 <_ZN7Console6printfEPKcz>
			feedback->printf("> help: shows this help page\n");
 810c628:	49a1      	ldr	r1, [pc, #644]	; (810c8b0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 810c62a:	6878      	ldr	r0, [r7, #4]
 810c62c:	f7ff fd62 	bl	810c0f4 <_ZN7Console6printfEPKcz>
			feedback->printf("> monitor: enables or disables a specific monitor\n");
 810c630:	49a0      	ldr	r1, [pc, #640]	; (810c8b4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 810c632:	6878      	ldr	r0, [r7, #4]
 810c634:	f7ff fd5e 	bl	810c0f4 <_ZN7Console6printfEPKcz>
			feedback->printf("> profiler: enables or disables the embedded profiler\n");
 810c638:	499f      	ldr	r1, [pc, #636]	; (810c8b8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 810c63a:	6878      	ldr	r0, [r7, #4]
 810c63c:	f7ff fd5a 	bl	810c0f4 <_ZN7Console6printfEPKcz>
			feedback->printf("> reset: performs a software reset of the avionics\n");
 810c640:	499e      	ldr	r1, [pc, #632]	; (810c8bc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e0>)
 810c642:	6878      	ldr	r0, [r7, #4]
 810c644:	f7ff fd56 	bl	810c0f4 <_ZN7Console6printfEPKcz>
			feedback->printf("> version: displays the current terminal version\n");
 810c648:	499d      	ldr	r1, [pc, #628]	; (810c8c0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e4>)
 810c64a:	6878      	ldr	r0, [r7, #4]
 810c64c:	f7ff fd52 	bl	810c0f4 <_ZN7Console6printfEPKcz>
			}
		} else {
			feedback->printf("> %.*s: command not found\n", cmd->components[0].length, cmd->components[0].component);
		}
	}
}
 810c650:	e1b3      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "version")) {
 810c652:	68bb      	ldr	r3, [r7, #8]
 810c654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c658:	2b00      	cmp	r3, #0
 810c65a:	d009      	beq.n	810c670 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810c65c:	68bb      	ldr	r3, [r7, #8]
 810c65e:	4999      	ldr	r1, [pc, #612]	; (810c8c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e8>)
 810c660:	4618      	mov	r0, r3
 810c662:	f7ff ff89 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c666:	4603      	mov	r3, r0
 810c668:	2b00      	cmp	r3, #0
 810c66a:	d001      	beq.n	810c670 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810c66c:	2301      	movs	r3, #1
 810c66e:	e000      	b.n	810c672 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x96>
 810c670:	2300      	movs	r3, #0
 810c672:	2b00      	cmp	r3, #0
 810c674:	d004      	beq.n	810c680 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa4>
			feedback->printf("> Xplore Avionics Terminal v1.0 by Arion Zimmermann\n");
 810c676:	4994      	ldr	r1, [pc, #592]	; (810c8c8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ec>)
 810c678:	6878      	ldr	r0, [r7, #4]
 810c67a:	f7ff fd3b 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c67e:	e19c      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "reset")) {
 810c680:	68bb      	ldr	r3, [r7, #8]
 810c682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c686:	2b00      	cmp	r3, #0
 810c688:	d009      	beq.n	810c69e <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810c68a:	68bb      	ldr	r3, [r7, #8]
 810c68c:	498f      	ldr	r1, [pc, #572]	; (810c8cc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f0>)
 810c68e:	4618      	mov	r0, r3
 810c690:	f7ff ff72 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c694:	4603      	mov	r3, r0
 810c696:	2b00      	cmp	r3, #0
 810c698:	d001      	beq.n	810c69e <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810c69a:	2301      	movs	r3, #1
 810c69c:	e000      	b.n	810c6a0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc4>
 810c69e:	2300      	movs	r3, #0
 810c6a0:	2b00      	cmp	r3, #0
 810c6a2:	d002      	beq.n	810c6aa <_ZN8Terminal7executeEP12ShellCommandP7Console+0xce>
			HAL_NVIC_SystemReset();
 810c6a4:	f7f5 fe07 	bl	81022b6 <HAL_NVIC_SystemReset>
}
 810c6a8:	e187      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "time")) {
 810c6aa:	68bb      	ldr	r3, [r7, #8]
 810c6ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c6b0:	2b00      	cmp	r3, #0
 810c6b2:	d009      	beq.n	810c6c8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810c6b4:	68bb      	ldr	r3, [r7, #8]
 810c6b6:	4986      	ldr	r1, [pc, #536]	; (810c8d0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f4>)
 810c6b8:	4618      	mov	r0, r3
 810c6ba:	f7ff ff5d 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c6be:	4603      	mov	r3, r0
 810c6c0:	2b00      	cmp	r3, #0
 810c6c2:	d001      	beq.n	810c6c8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810c6c4:	2301      	movs	r3, #1
 810c6c6:	e000      	b.n	810c6ca <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
 810c6c8:	2300      	movs	r3, #0
 810c6ca:	2b00      	cmp	r3, #0
 810c6cc:	d008      	beq.n	810c6e0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x104>
			feedback->printf("%d\n", HAL_GetTick());
 810c6ce:	f7f5 fcf1 	bl	81020b4 <HAL_GetTick>
 810c6d2:	4603      	mov	r3, r0
 810c6d4:	461a      	mov	r2, r3
 810c6d6:	497f      	ldr	r1, [pc, #508]	; (810c8d4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f8>)
 810c6d8:	6878      	ldr	r0, [r7, #4]
 810c6da:	f7ff fd0b 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c6de:	e16c      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "clear")) {
 810c6e0:	68bb      	ldr	r3, [r7, #8]
 810c6e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c6e6:	2b00      	cmp	r3, #0
 810c6e8:	d009      	beq.n	810c6fe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810c6ea:	68bb      	ldr	r3, [r7, #8]
 810c6ec:	497a      	ldr	r1, [pc, #488]	; (810c8d8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2fc>)
 810c6ee:	4618      	mov	r0, r3
 810c6f0:	f7ff ff42 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c6f4:	4603      	mov	r3, r0
 810c6f6:	2b00      	cmp	r3, #0
 810c6f8:	d001      	beq.n	810c6fe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810c6fa:	2301      	movs	r3, #1
 810c6fc:	e000      	b.n	810c700 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x124>
 810c6fe:	2300      	movs	r3, #0
 810c700:	2b00      	cmp	r3, #0
 810c702:	d004      	beq.n	810c70e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x132>
			feedback->printf("\x1b[2J\x1b[H\e7");
 810c704:	4975      	ldr	r1, [pc, #468]	; (810c8dc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x300>)
 810c706:	6878      	ldr	r0, [r7, #4]
 810c708:	f7ff fcf4 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c70c:	e155      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "profiler")) {
 810c70e:	68bb      	ldr	r3, [r7, #8]
 810c710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c714:	2b00      	cmp	r3, #0
 810c716:	d009      	beq.n	810c72c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810c718:	68bb      	ldr	r3, [r7, #8]
 810c71a:	4971      	ldr	r1, [pc, #452]	; (810c8e0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x304>)
 810c71c:	4618      	mov	r0, r3
 810c71e:	f7ff ff2b 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c722:	4603      	mov	r3, r0
 810c724:	2b00      	cmp	r3, #0
 810c726:	d001      	beq.n	810c72c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810c728:	2301      	movs	r3, #1
 810c72a:	e000      	b.n	810c72e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x152>
 810c72c:	2300      	movs	r3, #0
 810c72e:	2b00      	cmp	r3, #0
 810c730:	d042      	beq.n	810c7b8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1dc>
			if(EQUALS(1, "enable")) {
 810c732:	68bb      	ldr	r3, [r7, #8]
 810c734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c738:	2b01      	cmp	r3, #1
 810c73a:	d90a      	bls.n	810c752 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810c73c:	68bb      	ldr	r3, [r7, #8]
 810c73e:	3308      	adds	r3, #8
 810c740:	4968      	ldr	r1, [pc, #416]	; (810c8e4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810c742:	4618      	mov	r0, r3
 810c744:	f7ff ff18 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c748:	4603      	mov	r3, r0
 810c74a:	2b00      	cmp	r3, #0
 810c74c:	d001      	beq.n	810c752 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810c74e:	2301      	movs	r3, #1
 810c750:	e000      	b.n	810c754 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x178>
 810c752:	2300      	movs	r3, #0
 810c754:	2b00      	cmp	r3, #0
 810c756:	d00b      	beq.n	810c770 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x194>
				profiler.enable();
 810c758:	4863      	ldr	r0, [pc, #396]	; (810c8e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810c75a:	f7ff fd19 	bl	810c190 <_ZN8Profiler6enableEv>
				feedback->printf("\x1b[2J");
 810c75e:	4963      	ldr	r1, [pc, #396]	; (810c8ec <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810c760:	6878      	ldr	r0, [r7, #4]
 810c762:	f7ff fcc7 	bl	810c0f4 <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now enabled\n");
 810c766:	4962      	ldr	r1, [pc, #392]	; (810c8f0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x314>)
 810c768:	6878      	ldr	r0, [r7, #4]
 810c76a:	f7ff fcc3 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c76e:	e124      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable")) {
 810c770:	68bb      	ldr	r3, [r7, #8]
 810c772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c776:	2b01      	cmp	r3, #1
 810c778:	d90a      	bls.n	810c790 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810c77a:	68bb      	ldr	r3, [r7, #8]
 810c77c:	3308      	adds	r3, #8
 810c77e:	495d      	ldr	r1, [pc, #372]	; (810c8f4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x318>)
 810c780:	4618      	mov	r0, r3
 810c782:	f7ff fef9 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c786:	4603      	mov	r3, r0
 810c788:	2b00      	cmp	r3, #0
 810c78a:	d001      	beq.n	810c790 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810c78c:	2301      	movs	r3, #1
 810c78e:	e000      	b.n	810c792 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b6>
 810c790:	2300      	movs	r3, #0
 810c792:	2b00      	cmp	r3, #0
 810c794:	d00b      	beq.n	810c7ae <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d2>
				profiler.disable();
 810c796:	4854      	ldr	r0, [pc, #336]	; (810c8e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810c798:	f7ff fd1a 	bl	810c1d0 <_ZN8Profiler7disableEv>
				feedback->printf("\x1b[2J");
 810c79c:	4953      	ldr	r1, [pc, #332]	; (810c8ec <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810c79e:	6878      	ldr	r0, [r7, #4]
 810c7a0:	f7ff fca8 	bl	810c0f4 <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now disabled\n");
 810c7a4:	4954      	ldr	r1, [pc, #336]	; (810c8f8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x31c>)
 810c7a6:	6878      	ldr	r0, [r7, #4]
 810c7a8:	f7ff fca4 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c7ac:	e105      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: profiler { enable | disable }\n");
 810c7ae:	4953      	ldr	r1, [pc, #332]	; (810c8fc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x320>)
 810c7b0:	6878      	ldr	r0, [r7, #4]
 810c7b2:	f7ff fc9f 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c7b6:	e100      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "verbose")) {
 810c7b8:	68bb      	ldr	r3, [r7, #8]
 810c7ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c7be:	2b00      	cmp	r3, #0
 810c7c0:	d009      	beq.n	810c7d6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810c7c2:	68bb      	ldr	r3, [r7, #8]
 810c7c4:	494e      	ldr	r1, [pc, #312]	; (810c900 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x324>)
 810c7c6:	4618      	mov	r0, r3
 810c7c8:	f7ff fed6 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c7cc:	4603      	mov	r3, r0
 810c7ce:	2b00      	cmp	r3, #0
 810c7d0:	d001      	beq.n	810c7d6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810c7d2:	2301      	movs	r3, #1
 810c7d4:	e000      	b.n	810c7d8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
 810c7d6:	2300      	movs	r3, #0
 810c7d8:	2b00      	cmp	r3, #0
 810c7da:	d03a      	beq.n	810c852 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x276>
			if(EQUALS(1, "on")) {
 810c7dc:	68bb      	ldr	r3, [r7, #8]
 810c7de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c7e2:	2b01      	cmp	r3, #1
 810c7e4:	d90a      	bls.n	810c7fc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810c7e6:	68bb      	ldr	r3, [r7, #8]
 810c7e8:	3308      	adds	r3, #8
 810c7ea:	4946      	ldr	r1, [pc, #280]	; (810c904 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x328>)
 810c7ec:	4618      	mov	r0, r3
 810c7ee:	f7ff fec3 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c7f2:	4603      	mov	r3, r0
 810c7f4:	2b00      	cmp	r3, #0
 810c7f6:	d001      	beq.n	810c7fc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810c7f8:	2301      	movs	r3, #1
 810c7fa:	e000      	b.n	810c7fe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x222>
 810c7fc:	2300      	movs	r3, #0
 810c7fe:	2b00      	cmp	r3, #0
 810c800:	d007      	beq.n	810c812 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
				verbose = true;
 810c802:	68fb      	ldr	r3, [r7, #12]
 810c804:	2201      	movs	r2, #1
 810c806:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode enabled\n");
 810c808:	493f      	ldr	r1, [pc, #252]	; (810c908 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x32c>)
 810c80a:	6878      	ldr	r0, [r7, #4]
 810c80c:	f7ff fc72 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c810:	e0d3      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "off")) {
 810c812:	68bb      	ldr	r3, [r7, #8]
 810c814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c818:	2b01      	cmp	r3, #1
 810c81a:	d90a      	bls.n	810c832 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810c81c:	68bb      	ldr	r3, [r7, #8]
 810c81e:	3308      	adds	r3, #8
 810c820:	493a      	ldr	r1, [pc, #232]	; (810c90c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x330>)
 810c822:	4618      	mov	r0, r3
 810c824:	f7ff fea8 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c828:	4603      	mov	r3, r0
 810c82a:	2b00      	cmp	r3, #0
 810c82c:	d001      	beq.n	810c832 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810c82e:	2301      	movs	r3, #1
 810c830:	e000      	b.n	810c834 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>
 810c832:	2300      	movs	r3, #0
 810c834:	2b00      	cmp	r3, #0
 810c836:	d007      	beq.n	810c848 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>
				verbose = false;
 810c838:	68fb      	ldr	r3, [r7, #12]
 810c83a:	2200      	movs	r2, #0
 810c83c:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode disabled\n");
 810c83e:	4934      	ldr	r1, [pc, #208]	; (810c910 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x334>)
 810c840:	6878      	ldr	r0, [r7, #4]
 810c842:	f7ff fc57 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c846:	e0b8      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: verbose { on | off }\n");
 810c848:	4932      	ldr	r1, [pc, #200]	; (810c914 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x338>)
 810c84a:	6878      	ldr	r0, [r7, #4]
 810c84c:	f7ff fc52 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c850:	e0b3      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "monitor")) {
 810c852:	68bb      	ldr	r3, [r7, #8]
 810c854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c858:	2b00      	cmp	r3, #0
 810c85a:	d009      	beq.n	810c870 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810c85c:	68bb      	ldr	r3, [r7, #8]
 810c85e:	492e      	ldr	r1, [pc, #184]	; (810c918 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x33c>)
 810c860:	4618      	mov	r0, r3
 810c862:	f7ff fe89 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c866:	4603      	mov	r3, r0
 810c868:	2b00      	cmp	r3, #0
 810c86a:	d001      	beq.n	810c870 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810c86c:	2301      	movs	r3, #1
 810c86e:	e000      	b.n	810c872 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x296>
 810c870:	2300      	movs	r3, #0
 810c872:	2b00      	cmp	r3, #0
 810c874:	f000 8098 	beq.w	810c9a8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3cc>
			if(EQUALS(1, "enable") && cmd->num_components >= 3) {
 810c878:	68bb      	ldr	r3, [r7, #8]
 810c87a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c87e:	2b01      	cmp	r3, #1
 810c880:	d94c      	bls.n	810c91c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c882:	68bb      	ldr	r3, [r7, #8]
 810c884:	3308      	adds	r3, #8
 810c886:	4917      	ldr	r1, [pc, #92]	; (810c8e4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810c888:	4618      	mov	r0, r3
 810c88a:	f7ff fe75 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c88e:	4603      	mov	r3, r0
 810c890:	2b00      	cmp	r3, #0
 810c892:	d043      	beq.n	810c91c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c894:	68bb      	ldr	r3, [r7, #8]
 810c896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c89a:	2b02      	cmp	r3, #2
 810c89c:	d93e      	bls.n	810c91c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810c89e:	2301      	movs	r3, #1
 810c8a0:	e03d      	b.n	810c91e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x342>
 810c8a2:	bf00      	nop
 810c8a4:	08111354 	.word	0x08111354
 810c8a8:	0811135c 	.word	0x0811135c
 810c8ac:	08111384 	.word	0x08111384
 810c8b0:	081113a0 	.word	0x081113a0
 810c8b4:	081113c0 	.word	0x081113c0
 810c8b8:	081113f4 	.word	0x081113f4
 810c8bc:	0811142c 	.word	0x0811142c
 810c8c0:	08111460 	.word	0x08111460
 810c8c4:	08111494 	.word	0x08111494
 810c8c8:	0811149c 	.word	0x0811149c
 810c8cc:	081114d4 	.word	0x081114d4
 810c8d0:	081114dc 	.word	0x081114dc
 810c8d4:	081114e4 	.word	0x081114e4
 810c8d8:	081114e8 	.word	0x081114e8
 810c8dc:	081114f0 	.word	0x081114f0
 810c8e0:	081114fc 	.word	0x081114fc
 810c8e4:	08111508 	.word	0x08111508
 810c8e8:	10004c44 	.word	0x10004c44
 810c8ec:	08111510 	.word	0x08111510
 810c8f0:	08111518 	.word	0x08111518
 810c8f4:	08111530 	.word	0x08111530
 810c8f8:	08111538 	.word	0x08111538
 810c8fc:	08111554 	.word	0x08111554
 810c900:	0811157c 	.word	0x0811157c
 810c904:	08111584 	.word	0x08111584
 810c908:	08111588 	.word	0x08111588
 810c90c:	081115a0 	.word	0x081115a0
 810c910:	081115a4 	.word	0x081115a4
 810c914:	081115c0 	.word	0x081115c0
 810c918:	081115e0 	.word	0x081115e0
 810c91c:	2300      	movs	r3, #0
 810c91e:	2b00      	cmp	r3, #0
 810c920:	d020      	beq.n	810c964 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x388>
				uint8_t location = 0;
 810c922:	2300      	movs	r3, #0
 810c924:	75fb      	strb	r3, [r7, #23]
				uint8_t refresh_rate = 1;
 810c926:	2301      	movs	r3, #1
 810c928:	75bb      	strb	r3, [r7, #22]
				if(cmd->num_components > 3) {
 810c92a:	68bb      	ldr	r3, [r7, #8]
 810c92c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c930:	2b03      	cmp	r3, #3
 810c932:	d906      	bls.n	810c942 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x366>
					location = atoi(cmd->components[3].component);
 810c934:	68bb      	ldr	r3, [r7, #8]
 810c936:	699b      	ldr	r3, [r3, #24]
 810c938:	4618      	mov	r0, r3
 810c93a:	f001 fdd1 	bl	810e4e0 <atoi>
 810c93e:	4603      	mov	r3, r0
 810c940:	75fb      	strb	r3, [r7, #23]
				if(cmd->num_components > 4) {
 810c942:	68bb      	ldr	r3, [r7, #8]
 810c944:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c948:	2b04      	cmp	r3, #4
 810c94a:	d906      	bls.n	810c95a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x37e>
					refresh_rate = atoi(cmd->components[4].component);
 810c94c:	68bb      	ldr	r3, [r7, #8]
 810c94e:	6a1b      	ldr	r3, [r3, #32]
 810c950:	4618      	mov	r0, r3
 810c952:	f001 fdc5 	bl	810e4e0 <atoi>
 810c956:	4603      	mov	r3, r0
 810c958:	75bb      	strb	r3, [r7, #22]
				feedback->printf("\x1b[2J");
 810c95a:	491a      	ldr	r1, [pc, #104]	; (810c9c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810c95c:	6878      	ldr	r0, [r7, #4]
 810c95e:	f7ff fbc9 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c962:	e02a      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable") && cmd->num_components == 3) {
 810c964:	68bb      	ldr	r3, [r7, #8]
 810c966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c96a:	2b01      	cmp	r3, #1
 810c96c:	d90f      	bls.n	810c98e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c96e:	68bb      	ldr	r3, [r7, #8]
 810c970:	3308      	adds	r3, #8
 810c972:	4915      	ldr	r1, [pc, #84]	; (810c9c8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3ec>)
 810c974:	4618      	mov	r0, r3
 810c976:	f7ff fdff 	bl	810c578 <_ZN16CommandComponent7matchesEPKc>
 810c97a:	4603      	mov	r3, r0
 810c97c:	2b00      	cmp	r3, #0
 810c97e:	d006      	beq.n	810c98e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c980:	68bb      	ldr	r3, [r7, #8]
 810c982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810c986:	2b03      	cmp	r3, #3
 810c988:	d101      	bne.n	810c98e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810c98a:	2301      	movs	r3, #1
 810c98c:	e000      	b.n	810c990 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b4>
 810c98e:	2300      	movs	r3, #0
 810c990:	2b00      	cmp	r3, #0
 810c992:	d004      	beq.n	810c99e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3c2>
				feedback->printf("\x1b[2J");
 810c994:	490b      	ldr	r1, [pc, #44]	; (810c9c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810c996:	6878      	ldr	r0, [r7, #4]
 810c998:	f7ff fbac 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c99c:	e00d      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: monitor { enable | disable } { sensor | state | kalman | flash | can | telemetry | airbrakes } [location] [refresh rate; default: 10]\n");
 810c99e:	490b      	ldr	r1, [pc, #44]	; (810c9cc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f0>)
 810c9a0:	6878      	ldr	r0, [r7, #4]
 810c9a2:	f7ff fba7 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c9a6:	e008      	b.n	810c9ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			feedback->printf("> %.*s: command not found\n", cmd->components[0].length, cmd->components[0].component);
 810c9a8:	68bb      	ldr	r3, [r7, #8]
 810c9aa:	791b      	ldrb	r3, [r3, #4]
 810c9ac:	461a      	mov	r2, r3
 810c9ae:	68bb      	ldr	r3, [r7, #8]
 810c9b0:	681b      	ldr	r3, [r3, #0]
 810c9b2:	4907      	ldr	r1, [pc, #28]	; (810c9d0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f4>)
 810c9b4:	6878      	ldr	r0, [r7, #4]
 810c9b6:	f7ff fb9d 	bl	810c0f4 <_ZN7Console6printfEPKcz>
}
 810c9ba:	bf00      	nop
 810c9bc:	3718      	adds	r7, #24
 810c9be:	46bd      	mov	sp, r7
 810c9c0:	bd80      	pop	{r7, pc}
 810c9c2:	bf00      	nop
 810c9c4:	08111510 	.word	0x08111510
 810c9c8:	08111530 	.word	0x08111530
 810c9cc:	081115e8 	.word	0x081115e8
 810c9d0:	08111678 	.word	0x08111678

0810c9d4 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 810c9d4:	b480      	push	{r7}
 810c9d6:	b083      	sub	sp, #12
 810c9d8:	af00      	add	r7, sp, #0
 810c9da:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 810c9dc:	687b      	ldr	r3, [r7, #4]
 810c9de:	2203      	movs	r2, #3
 810c9e0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 810c9e2:	687b      	ldr	r3, [r7, #4]
 810c9e4:	2200      	movs	r2, #0
 810c9e6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 810c9e8:	687b      	ldr	r3, [r7, #4]
 810c9ea:	2203      	movs	r2, #3
 810c9ec:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 810c9ee:	687b      	ldr	r3, [r7, #4]
 810c9f0:	2203      	movs	r2, #3
 810c9f2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 810c9f4:	687b      	ldr	r3, [r7, #4]
 810c9f6:	2203      	movs	r2, #3
 810c9f8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 810c9fa:	687b      	ldr	r3, [r7, #4]
 810c9fc:	2203      	movs	r2, #3
 810c9fe:	715a      	strb	r2, [r3, #5]
}
 810ca00:	bf00      	nop
 810ca02:	370c      	adds	r7, #12
 810ca04:	46bd      	mov	sp, r7
 810ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca0a:	4770      	bx	lr

0810ca0c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 810ca0c:	b580      	push	{r7, lr}
 810ca0e:	b08a      	sub	sp, #40	; 0x28
 810ca10:	af04      	add	r7, sp, #16
 810ca12:	60f8      	str	r0, [r7, #12]
 810ca14:	460b      	mov	r3, r1
 810ca16:	607a      	str	r2, [r7, #4]
 810ca18:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 810ca1a:	68fb      	ldr	r3, [r7, #12]
 810ca1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810ca1e:	005b      	lsls	r3, r3, #1
 810ca20:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 810ca22:	68fb      	ldr	r3, [r7, #12]
 810ca24:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810ca26:	7afb      	ldrb	r3, [r7, #11]
 810ca28:	b29a      	uxth	r2, r3
 810ca2a:	8af9      	ldrh	r1, [r7, #22]
 810ca2c:	f241 3388 	movw	r3, #5000	; 0x1388
 810ca30:	9302      	str	r3, [sp, #8]
 810ca32:	2302      	movs	r3, #2
 810ca34:	9301      	str	r3, [sp, #4]
 810ca36:	f107 0314 	add.w	r3, r7, #20
 810ca3a:	9300      	str	r3, [sp, #0]
 810ca3c:	2301      	movs	r3, #1
 810ca3e:	f7f9 f87d 	bl	8105b3c <HAL_I2C_Mem_Read>
 810ca42:	4603      	mov	r3, r0
 810ca44:	2b00      	cmp	r3, #0
 810ca46:	d10b      	bne.n	810ca60 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 810ca48:	7d7b      	ldrb	r3, [r7, #21]
 810ca4a:	021b      	lsls	r3, r3, #8
 810ca4c:	b21a      	sxth	r2, r3
 810ca4e:	7d3b      	ldrb	r3, [r7, #20]
 810ca50:	b21b      	sxth	r3, r3
 810ca52:	4313      	orrs	r3, r2
 810ca54:	b21b      	sxth	r3, r3
 810ca56:	b29a      	uxth	r2, r3
 810ca58:	687b      	ldr	r3, [r7, #4]
 810ca5a:	801a      	strh	r2, [r3, #0]
		return true;
 810ca5c:	2301      	movs	r3, #1
 810ca5e:	e000      	b.n	810ca62 <read_register16+0x56>
	} else
		return false;
 810ca60:	2300      	movs	r3, #0

}
 810ca62:	4618      	mov	r0, r3
 810ca64:	3718      	adds	r7, #24
 810ca66:	46bd      	mov	sp, r7
 810ca68:	bd80      	pop	{r7, pc}

0810ca6a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 810ca6a:	b590      	push	{r4, r7, lr}
 810ca6c:	b08b      	sub	sp, #44	; 0x2c
 810ca6e:	af04      	add	r7, sp, #16
 810ca70:	60f8      	str	r0, [r7, #12]
 810ca72:	607a      	str	r2, [r7, #4]
 810ca74:	461a      	mov	r2, r3
 810ca76:	460b      	mov	r3, r1
 810ca78:	72fb      	strb	r3, [r7, #11]
 810ca7a:	4613      	mov	r3, r2
 810ca7c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 810ca7e:	68fb      	ldr	r3, [r7, #12]
 810ca80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810ca82:	005b      	lsls	r3, r3, #1
 810ca84:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 810ca86:	68fb      	ldr	r3, [r7, #12]
 810ca88:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810ca8a:	7afb      	ldrb	r3, [r7, #11]
 810ca8c:	b29c      	uxth	r4, r3
 810ca8e:	7abb      	ldrb	r3, [r7, #10]
 810ca90:	b29b      	uxth	r3, r3
 810ca92:	8af9      	ldrh	r1, [r7, #22]
 810ca94:	f241 3288 	movw	r2, #5000	; 0x1388
 810ca98:	9202      	str	r2, [sp, #8]
 810ca9a:	9301      	str	r3, [sp, #4]
 810ca9c:	687b      	ldr	r3, [r7, #4]
 810ca9e:	9300      	str	r3, [sp, #0]
 810caa0:	2301      	movs	r3, #1
 810caa2:	4622      	mov	r2, r4
 810caa4:	f7f9 f84a 	bl	8105b3c <HAL_I2C_Mem_Read>
 810caa8:	4603      	mov	r3, r0
 810caaa:	2b00      	cmp	r3, #0
 810caac:	d101      	bne.n	810cab2 <read_data+0x48>
		return 0;
 810caae:	2300      	movs	r3, #0
 810cab0:	e000      	b.n	810cab4 <read_data+0x4a>
	else
		return 1;
 810cab2:	2301      	movs	r3, #1

}
 810cab4:	4618      	mov	r0, r3
 810cab6:	371c      	adds	r7, #28
 810cab8:	46bd      	mov	sp, r7
 810caba:	bd90      	pop	{r4, r7, pc}

0810cabc <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 810cabc:	b580      	push	{r7, lr}
 810cabe:	b082      	sub	sp, #8
 810cac0:	af00      	add	r7, sp, #0
 810cac2:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 810cac4:	687b      	ldr	r3, [r7, #4]
 810cac6:	461a      	mov	r2, r3
 810cac8:	2188      	movs	r1, #136	; 0x88
 810caca:	6878      	ldr	r0, [r7, #4]
 810cacc:	f7ff ff9e 	bl	810ca0c <read_register16>
 810cad0:	4603      	mov	r3, r0
 810cad2:	2b00      	cmp	r3, #0
 810cad4:	d06f      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 810cad6:	687b      	ldr	r3, [r7, #4]
 810cad8:	3302      	adds	r3, #2
 810cada:	461a      	mov	r2, r3
 810cadc:	218a      	movs	r1, #138	; 0x8a
 810cade:	6878      	ldr	r0, [r7, #4]
 810cae0:	f7ff ff94 	bl	810ca0c <read_register16>
 810cae4:	4603      	mov	r3, r0
 810cae6:	2b00      	cmp	r3, #0
 810cae8:	d065      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 810caea:	687b      	ldr	r3, [r7, #4]
 810caec:	3304      	adds	r3, #4
 810caee:	461a      	mov	r2, r3
 810caf0:	218c      	movs	r1, #140	; 0x8c
 810caf2:	6878      	ldr	r0, [r7, #4]
 810caf4:	f7ff ff8a 	bl	810ca0c <read_register16>
 810caf8:	4603      	mov	r3, r0
 810cafa:	2b00      	cmp	r3, #0
 810cafc:	d05b      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 810cafe:	687b      	ldr	r3, [r7, #4]
 810cb00:	3306      	adds	r3, #6
 810cb02:	461a      	mov	r2, r3
 810cb04:	218e      	movs	r1, #142	; 0x8e
 810cb06:	6878      	ldr	r0, [r7, #4]
 810cb08:	f7ff ff80 	bl	810ca0c <read_register16>
 810cb0c:	4603      	mov	r3, r0
 810cb0e:	2b00      	cmp	r3, #0
 810cb10:	d051      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 810cb12:	687b      	ldr	r3, [r7, #4]
 810cb14:	3308      	adds	r3, #8
 810cb16:	461a      	mov	r2, r3
 810cb18:	2190      	movs	r1, #144	; 0x90
 810cb1a:	6878      	ldr	r0, [r7, #4]
 810cb1c:	f7ff ff76 	bl	810ca0c <read_register16>
 810cb20:	4603      	mov	r3, r0
 810cb22:	2b00      	cmp	r3, #0
 810cb24:	d047      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 810cb26:	687b      	ldr	r3, [r7, #4]
 810cb28:	330a      	adds	r3, #10
 810cb2a:	461a      	mov	r2, r3
 810cb2c:	2192      	movs	r1, #146	; 0x92
 810cb2e:	6878      	ldr	r0, [r7, #4]
 810cb30:	f7ff ff6c 	bl	810ca0c <read_register16>
 810cb34:	4603      	mov	r3, r0
 810cb36:	2b00      	cmp	r3, #0
 810cb38:	d03d      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 810cb3a:	687b      	ldr	r3, [r7, #4]
 810cb3c:	330c      	adds	r3, #12
 810cb3e:	461a      	mov	r2, r3
 810cb40:	2194      	movs	r1, #148	; 0x94
 810cb42:	6878      	ldr	r0, [r7, #4]
 810cb44:	f7ff ff62 	bl	810ca0c <read_register16>
 810cb48:	4603      	mov	r3, r0
 810cb4a:	2b00      	cmp	r3, #0
 810cb4c:	d033      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 810cb4e:	687b      	ldr	r3, [r7, #4]
 810cb50:	330e      	adds	r3, #14
 810cb52:	461a      	mov	r2, r3
 810cb54:	2196      	movs	r1, #150	; 0x96
 810cb56:	6878      	ldr	r0, [r7, #4]
 810cb58:	f7ff ff58 	bl	810ca0c <read_register16>
 810cb5c:	4603      	mov	r3, r0
 810cb5e:	2b00      	cmp	r3, #0
 810cb60:	d029      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 810cb62:	687b      	ldr	r3, [r7, #4]
 810cb64:	3310      	adds	r3, #16
 810cb66:	461a      	mov	r2, r3
 810cb68:	2198      	movs	r1, #152	; 0x98
 810cb6a:	6878      	ldr	r0, [r7, #4]
 810cb6c:	f7ff ff4e 	bl	810ca0c <read_register16>
 810cb70:	4603      	mov	r3, r0
 810cb72:	2b00      	cmp	r3, #0
 810cb74:	d01f      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 810cb76:	687b      	ldr	r3, [r7, #4]
 810cb78:	3312      	adds	r3, #18
 810cb7a:	461a      	mov	r2, r3
 810cb7c:	219a      	movs	r1, #154	; 0x9a
 810cb7e:	6878      	ldr	r0, [r7, #4]
 810cb80:	f7ff ff44 	bl	810ca0c <read_register16>
 810cb84:	4603      	mov	r3, r0
 810cb86:	2b00      	cmp	r3, #0
 810cb88:	d015      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 810cb8a:	687b      	ldr	r3, [r7, #4]
 810cb8c:	3314      	adds	r3, #20
 810cb8e:	461a      	mov	r2, r3
 810cb90:	219c      	movs	r1, #156	; 0x9c
 810cb92:	6878      	ldr	r0, [r7, #4]
 810cb94:	f7ff ff3a 	bl	810ca0c <read_register16>
 810cb98:	4603      	mov	r3, r0
 810cb9a:	2b00      	cmp	r3, #0
 810cb9c:	d00b      	beq.n	810cbb6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 810cb9e:	687b      	ldr	r3, [r7, #4]
 810cba0:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 810cba2:	461a      	mov	r2, r3
 810cba4:	219e      	movs	r1, #158	; 0x9e
 810cba6:	6878      	ldr	r0, [r7, #4]
 810cba8:	f7ff ff30 	bl	810ca0c <read_register16>
 810cbac:	4603      	mov	r3, r0
 810cbae:	2b00      	cmp	r3, #0
 810cbb0:	d001      	beq.n	810cbb6 <read_calibration_data+0xfa>

		return true;
 810cbb2:	2301      	movs	r3, #1
 810cbb4:	e000      	b.n	810cbb8 <read_calibration_data+0xfc>
	}

	return false;
 810cbb6:	2300      	movs	r3, #0
}
 810cbb8:	4618      	mov	r0, r3
 810cbba:	3708      	adds	r7, #8
 810cbbc:	46bd      	mov	sp, r7
 810cbbe:	bd80      	pop	{r7, pc}

0810cbc0 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 810cbc0:	b580      	push	{r7, lr}
 810cbc2:	b084      	sub	sp, #16
 810cbc4:	af00      	add	r7, sp, #0
 810cbc6:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 810cbc8:	687b      	ldr	r3, [r7, #4]
 810cbca:	f103 0218 	add.w	r2, r3, #24
 810cbce:	2301      	movs	r3, #1
 810cbd0:	21a1      	movs	r1, #161	; 0xa1
 810cbd2:	6878      	ldr	r0, [r7, #4]
 810cbd4:	f7ff ff49 	bl	810ca6a <read_data>
 810cbd8:	4603      	mov	r3, r0
 810cbda:	2b00      	cmp	r3, #0
 810cbdc:	d14b      	bne.n	810cc76 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 810cbde:	687b      	ldr	r3, [r7, #4]
 810cbe0:	331a      	adds	r3, #26
 810cbe2:	461a      	mov	r2, r3
 810cbe4:	21e1      	movs	r1, #225	; 0xe1
 810cbe6:	6878      	ldr	r0, [r7, #4]
 810cbe8:	f7ff ff10 	bl	810ca0c <read_register16>
 810cbec:	4603      	mov	r3, r0
 810cbee:	2b00      	cmp	r3, #0
 810cbf0:	d041      	beq.n	810cc76 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 810cbf2:	687b      	ldr	r3, [r7, #4]
 810cbf4:	f103 021c 	add.w	r2, r3, #28
 810cbf8:	2301      	movs	r3, #1
 810cbfa:	21e3      	movs	r1, #227	; 0xe3
 810cbfc:	6878      	ldr	r0, [r7, #4]
 810cbfe:	f7ff ff34 	bl	810ca6a <read_data>
 810cc02:	4603      	mov	r3, r0
 810cc04:	2b00      	cmp	r3, #0
 810cc06:	d136      	bne.n	810cc76 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 810cc08:	f107 030e 	add.w	r3, r7, #14
 810cc0c:	461a      	mov	r2, r3
 810cc0e:	21e4      	movs	r1, #228	; 0xe4
 810cc10:	6878      	ldr	r0, [r7, #4]
 810cc12:	f7ff fefb 	bl	810ca0c <read_register16>
 810cc16:	4603      	mov	r3, r0
 810cc18:	2b00      	cmp	r3, #0
 810cc1a:	d02c      	beq.n	810cc76 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 810cc1c:	f107 030c 	add.w	r3, r7, #12
 810cc20:	461a      	mov	r2, r3
 810cc22:	21e5      	movs	r1, #229	; 0xe5
 810cc24:	6878      	ldr	r0, [r7, #4]
 810cc26:	f7ff fef1 	bl	810ca0c <read_register16>
 810cc2a:	4603      	mov	r3, r0
 810cc2c:	2b00      	cmp	r3, #0
 810cc2e:	d022      	beq.n	810cc76 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 810cc30:	687b      	ldr	r3, [r7, #4]
 810cc32:	f103 0222 	add.w	r2, r3, #34	; 0x22
 810cc36:	2301      	movs	r3, #1
 810cc38:	21e7      	movs	r1, #231	; 0xe7
 810cc3a:	6878      	ldr	r0, [r7, #4]
 810cc3c:	f7ff ff15 	bl	810ca6a <read_data>
 810cc40:	4603      	mov	r3, r0
 810cc42:	2b00      	cmp	r3, #0
 810cc44:	d117      	bne.n	810cc76 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 810cc46:	89fb      	ldrh	r3, [r7, #14]
 810cc48:	011b      	lsls	r3, r3, #4
 810cc4a:	b21b      	sxth	r3, r3
 810cc4c:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 810cc50:	b21a      	sxth	r2, r3
 810cc52:	89fb      	ldrh	r3, [r7, #14]
 810cc54:	121b      	asrs	r3, r3, #8
 810cc56:	b21b      	sxth	r3, r3
 810cc58:	f003 030f 	and.w	r3, r3, #15
 810cc5c:	b21b      	sxth	r3, r3
 810cc5e:	4313      	orrs	r3, r2
 810cc60:	b21a      	sxth	r2, r3
 810cc62:	687b      	ldr	r3, [r7, #4]
 810cc64:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 810cc66:	89bb      	ldrh	r3, [r7, #12]
 810cc68:	091b      	lsrs	r3, r3, #4
 810cc6a:	b29b      	uxth	r3, r3
 810cc6c:	b21a      	sxth	r2, r3
 810cc6e:	687b      	ldr	r3, [r7, #4]
 810cc70:	841a      	strh	r2, [r3, #32]

		return true;
 810cc72:	2301      	movs	r3, #1
 810cc74:	e000      	b.n	810cc78 <read_hum_calibration_data+0xb8>
	}

	return false;
 810cc76:	2300      	movs	r3, #0
}
 810cc78:	4618      	mov	r0, r3
 810cc7a:	3710      	adds	r7, #16
 810cc7c:	46bd      	mov	sp, r7
 810cc7e:	bd80      	pop	{r7, pc}

0810cc80 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 810cc80:	b580      	push	{r7, lr}
 810cc82:	b088      	sub	sp, #32
 810cc84:	af04      	add	r7, sp, #16
 810cc86:	6078      	str	r0, [r7, #4]
 810cc88:	460b      	mov	r3, r1
 810cc8a:	70fb      	strb	r3, [r7, #3]
 810cc8c:	4613      	mov	r3, r2
 810cc8e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 810cc90:	687b      	ldr	r3, [r7, #4]
 810cc92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810cc94:	005b      	lsls	r3, r3, #1
 810cc96:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 810cc98:	687b      	ldr	r3, [r7, #4]
 810cc9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810cc9c:	78fb      	ldrb	r3, [r7, #3]
 810cc9e:	b29a      	uxth	r2, r3
 810cca0:	89f9      	ldrh	r1, [r7, #14]
 810cca2:	f242 7310 	movw	r3, #10000	; 0x2710
 810cca6:	9302      	str	r3, [sp, #8]
 810cca8:	2301      	movs	r3, #1
 810ccaa:	9301      	str	r3, [sp, #4]
 810ccac:	1cbb      	adds	r3, r7, #2
 810ccae:	9300      	str	r3, [sp, #0]
 810ccb0:	2301      	movs	r3, #1
 810ccb2:	f7f8 fe2f 	bl	8105914 <HAL_I2C_Mem_Write>
 810ccb6:	4603      	mov	r3, r0
 810ccb8:	2b00      	cmp	r3, #0
 810ccba:	d101      	bne.n	810ccc0 <write_register8+0x40>
		return false;
 810ccbc:	2300      	movs	r3, #0
 810ccbe:	e000      	b.n	810ccc2 <write_register8+0x42>
	else
		return true;
 810ccc0:	2301      	movs	r3, #1
}
 810ccc2:	4618      	mov	r0, r3
 810ccc4:	3710      	adds	r7, #16
 810ccc6:	46bd      	mov	sp, r7
 810ccc8:	bd80      	pop	{r7, pc}

0810ccca <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 810ccca:	b580      	push	{r7, lr}
 810cccc:	b084      	sub	sp, #16
 810ccce:	af00      	add	r7, sp, #0
 810ccd0:	6078      	str	r0, [r7, #4]
 810ccd2:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 810ccd4:	687b      	ldr	r3, [r7, #4]
 810ccd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810ccd8:	2b76      	cmp	r3, #118	; 0x76
 810ccda:	d005      	beq.n	810cce8 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 810ccdc:	687b      	ldr	r3, [r7, #4]
 810ccde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810cce0:	2b77      	cmp	r3, #119	; 0x77
 810cce2:	d001      	beq.n	810cce8 <bmp280_init+0x1e>

		return false;
 810cce4:	2300      	movs	r3, #0
 810cce6:	e099      	b.n	810ce1c <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 810cce8:	687b      	ldr	r3, [r7, #4]
 810ccea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 810ccee:	2301      	movs	r3, #1
 810ccf0:	21d0      	movs	r1, #208	; 0xd0
 810ccf2:	6878      	ldr	r0, [r7, #4]
 810ccf4:	f7ff feb9 	bl	810ca6a <read_data>
 810ccf8:	4603      	mov	r3, r0
 810ccfa:	2b00      	cmp	r3, #0
 810ccfc:	d001      	beq.n	810cd02 <bmp280_init+0x38>
		return false;
 810ccfe:	2300      	movs	r3, #0
 810cd00:	e08c      	b.n	810ce1c <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 810cd02:	687b      	ldr	r3, [r7, #4]
 810cd04:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810cd08:	2b58      	cmp	r3, #88	; 0x58
 810cd0a:	d006      	beq.n	810cd1a <bmp280_init+0x50>
 810cd0c:	687b      	ldr	r3, [r7, #4]
 810cd0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810cd12:	2b60      	cmp	r3, #96	; 0x60
 810cd14:	d001      	beq.n	810cd1a <bmp280_init+0x50>

		return false;
 810cd16:	2300      	movs	r3, #0
 810cd18:	e080      	b.n	810ce1c <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 810cd1a:	22b6      	movs	r2, #182	; 0xb6
 810cd1c:	21e0      	movs	r1, #224	; 0xe0
 810cd1e:	6878      	ldr	r0, [r7, #4]
 810cd20:	f7ff ffae 	bl	810cc80 <write_register8>
 810cd24:	4603      	mov	r3, r0
 810cd26:	2b00      	cmp	r3, #0
 810cd28:	d001      	beq.n	810cd2e <bmp280_init+0x64>
		return false;
 810cd2a:	2300      	movs	r3, #0
 810cd2c:	e076      	b.n	810ce1c <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 810cd2e:	f107 020c 	add.w	r2, r7, #12
 810cd32:	2301      	movs	r3, #1
 810cd34:	21f3      	movs	r1, #243	; 0xf3
 810cd36:	6878      	ldr	r0, [r7, #4]
 810cd38:	f7ff fe97 	bl	810ca6a <read_data>
 810cd3c:	4603      	mov	r3, r0
 810cd3e:	2b00      	cmp	r3, #0
 810cd40:	d1f5      	bne.n	810cd2e <bmp280_init+0x64>
				&& (status & 1) == 0)
 810cd42:	7b3b      	ldrb	r3, [r7, #12]
 810cd44:	f003 0301 	and.w	r3, r3, #1
 810cd48:	2b00      	cmp	r3, #0
 810cd4a:	d1f0      	bne.n	810cd2e <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 810cd4c:	6878      	ldr	r0, [r7, #4]
 810cd4e:	f7ff feb5 	bl	810cabc <read_calibration_data>
 810cd52:	4603      	mov	r3, r0
 810cd54:	f083 0301 	eor.w	r3, r3, #1
 810cd58:	b2db      	uxtb	r3, r3
 810cd5a:	2b00      	cmp	r3, #0
 810cd5c:	d100      	bne.n	810cd60 <bmp280_init+0x96>
 810cd5e:	e001      	b.n	810cd64 <bmp280_init+0x9a>
		return false;
 810cd60:	2300      	movs	r3, #0
 810cd62:	e05b      	b.n	810ce1c <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 810cd64:	687b      	ldr	r3, [r7, #4]
 810cd66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810cd6a:	2b60      	cmp	r3, #96	; 0x60
 810cd6c:	d10a      	bne.n	810cd84 <bmp280_init+0xba>
 810cd6e:	6878      	ldr	r0, [r7, #4]
 810cd70:	f7ff ff26 	bl	810cbc0 <read_hum_calibration_data>
 810cd74:	4603      	mov	r3, r0
 810cd76:	f083 0301 	eor.w	r3, r3, #1
 810cd7a:	b2db      	uxtb	r3, r3
 810cd7c:	2b00      	cmp	r3, #0
 810cd7e:	d001      	beq.n	810cd84 <bmp280_init+0xba>
		return false;
 810cd80:	2300      	movs	r3, #0
 810cd82:	e04b      	b.n	810ce1c <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 810cd84:	683b      	ldr	r3, [r7, #0]
 810cd86:	795b      	ldrb	r3, [r3, #5]
 810cd88:	015b      	lsls	r3, r3, #5
 810cd8a:	b25a      	sxtb	r2, r3
 810cd8c:	683b      	ldr	r3, [r7, #0]
 810cd8e:	785b      	ldrb	r3, [r3, #1]
 810cd90:	009b      	lsls	r3, r3, #2
 810cd92:	b25b      	sxtb	r3, r3
 810cd94:	4313      	orrs	r3, r2
 810cd96:	b25b      	sxtb	r3, r3
 810cd98:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 810cd9a:	7bfb      	ldrb	r3, [r7, #15]
 810cd9c:	461a      	mov	r2, r3
 810cd9e:	21f5      	movs	r1, #245	; 0xf5
 810cda0:	6878      	ldr	r0, [r7, #4]
 810cda2:	f7ff ff6d 	bl	810cc80 <write_register8>
 810cda6:	4603      	mov	r3, r0
 810cda8:	2b00      	cmp	r3, #0
 810cdaa:	d001      	beq.n	810cdb0 <bmp280_init+0xe6>
		return false;
 810cdac:	2300      	movs	r3, #0
 810cdae:	e035      	b.n	810ce1c <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 810cdb0:	683b      	ldr	r3, [r7, #0]
 810cdb2:	781b      	ldrb	r3, [r3, #0]
 810cdb4:	2b01      	cmp	r3, #1
 810cdb6:	d102      	bne.n	810cdbe <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 810cdb8:	683b      	ldr	r3, [r7, #0]
 810cdba:	2200      	movs	r2, #0
 810cdbc:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 810cdbe:	683b      	ldr	r3, [r7, #0]
 810cdc0:	78db      	ldrb	r3, [r3, #3]
 810cdc2:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 810cdc4:	b25a      	sxtb	r2, r3
 810cdc6:	683b      	ldr	r3, [r7, #0]
 810cdc8:	789b      	ldrb	r3, [r3, #2]
 810cdca:	009b      	lsls	r3, r3, #2
 810cdcc:	b25b      	sxtb	r3, r3
 810cdce:	4313      	orrs	r3, r2
 810cdd0:	b25a      	sxtb	r2, r3
 810cdd2:	683b      	ldr	r3, [r7, #0]
 810cdd4:	781b      	ldrb	r3, [r3, #0]
 810cdd6:	b25b      	sxtb	r3, r3
 810cdd8:	4313      	orrs	r3, r2
 810cdda:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 810cddc:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 810cdde:	687b      	ldr	r3, [r7, #4]
 810cde0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810cde4:	2b60      	cmp	r3, #96	; 0x60
 810cde6:	d10d      	bne.n	810ce04 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 810cde8:	683b      	ldr	r3, [r7, #0]
 810cdea:	791b      	ldrb	r3, [r3, #4]
 810cdec:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 810cdee:	7b7b      	ldrb	r3, [r7, #13]
 810cdf0:	461a      	mov	r2, r3
 810cdf2:	21f2      	movs	r1, #242	; 0xf2
 810cdf4:	6878      	ldr	r0, [r7, #4]
 810cdf6:	f7ff ff43 	bl	810cc80 <write_register8>
 810cdfa:	4603      	mov	r3, r0
 810cdfc:	2b00      	cmp	r3, #0
 810cdfe:	d001      	beq.n	810ce04 <bmp280_init+0x13a>
			return false;
 810ce00:	2300      	movs	r3, #0
 810ce02:	e00b      	b.n	810ce1c <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 810ce04:	7bbb      	ldrb	r3, [r7, #14]
 810ce06:	461a      	mov	r2, r3
 810ce08:	21f4      	movs	r1, #244	; 0xf4
 810ce0a:	6878      	ldr	r0, [r7, #4]
 810ce0c:	f7ff ff38 	bl	810cc80 <write_register8>
 810ce10:	4603      	mov	r3, r0
 810ce12:	2b00      	cmp	r3, #0
 810ce14:	d001      	beq.n	810ce1a <bmp280_init+0x150>
		return false;
 810ce16:	2300      	movs	r3, #0
 810ce18:	e000      	b.n	810ce1c <bmp280_init+0x152>
	}

	return true;
 810ce1a:	2301      	movs	r3, #1
}
 810ce1c:	4618      	mov	r0, r3
 810ce1e:	3710      	adds	r7, #16
 810ce20:	46bd      	mov	sp, r7
 810ce22:	bd80      	pop	{r7, pc}

0810ce24 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 810ce24:	b480      	push	{r7}
 810ce26:	b087      	sub	sp, #28
 810ce28:	af00      	add	r7, sp, #0
 810ce2a:	60f8      	str	r0, [r7, #12]
 810ce2c:	60b9      	str	r1, [r7, #8]
 810ce2e:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810ce30:	68bb      	ldr	r3, [r7, #8]
 810ce32:	10da      	asrs	r2, r3, #3
 810ce34:	68fb      	ldr	r3, [r7, #12]
 810ce36:	881b      	ldrh	r3, [r3, #0]
 810ce38:	005b      	lsls	r3, r3, #1
 810ce3a:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 810ce3c:	68fa      	ldr	r2, [r7, #12]
 810ce3e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 810ce42:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810ce46:	12db      	asrs	r3, r3, #11
 810ce48:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810ce4a:	68bb      	ldr	r3, [r7, #8]
 810ce4c:	111b      	asrs	r3, r3, #4
 810ce4e:	68fa      	ldr	r2, [r7, #12]
 810ce50:	8812      	ldrh	r2, [r2, #0]
 810ce52:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 810ce54:	68ba      	ldr	r2, [r7, #8]
 810ce56:	1112      	asrs	r2, r2, #4
 810ce58:	68f9      	ldr	r1, [r7, #12]
 810ce5a:	8809      	ldrh	r1, [r1, #0]
 810ce5c:	1a52      	subs	r2, r2, r1
 810ce5e:	fb02 f303 	mul.w	r3, r2, r3
 810ce62:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 810ce64:	68fa      	ldr	r2, [r7, #12]
 810ce66:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 810ce6a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810ce6e:	139b      	asrs	r3, r3, #14
 810ce70:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 810ce72:	697a      	ldr	r2, [r7, #20]
 810ce74:	693b      	ldr	r3, [r7, #16]
 810ce76:	441a      	add	r2, r3
 810ce78:	687b      	ldr	r3, [r7, #4]
 810ce7a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 810ce7c:	687b      	ldr	r3, [r7, #4]
 810ce7e:	681a      	ldr	r2, [r3, #0]
 810ce80:	4613      	mov	r3, r2
 810ce82:	009b      	lsls	r3, r3, #2
 810ce84:	4413      	add	r3, r2
 810ce86:	3380      	adds	r3, #128	; 0x80
 810ce88:	121b      	asrs	r3, r3, #8
}
 810ce8a:	4618      	mov	r0, r3
 810ce8c:	371c      	adds	r7, #28
 810ce8e:	46bd      	mov	sp, r7
 810ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce94:	4770      	bx	lr

0810ce96 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 810ce96:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 810ce9a:	b08a      	sub	sp, #40	; 0x28
 810ce9c:	af00      	add	r7, sp, #0
 810ce9e:	60f8      	str	r0, [r7, #12]
 810cea0:	60b9      	str	r1, [r7, #8]
 810cea2:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 810cea4:	687b      	ldr	r3, [r7, #4]
 810cea6:	4619      	mov	r1, r3
 810cea8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810ceac:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 810ceb0:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 810ceb4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 810ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ceba:	6a3a      	ldr	r2, [r7, #32]
 810cebc:	fb02 f203 	mul.w	r2, r2, r3
 810cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cec2:	6a39      	ldr	r1, [r7, #32]
 810cec4:	fb01 f303 	mul.w	r3, r1, r3
 810cec8:	441a      	add	r2, r3
 810ceca:	6a39      	ldr	r1, [r7, #32]
 810cecc:	6a3b      	ldr	r3, [r7, #32]
 810cece:	fba1 3403 	umull	r3, r4, r1, r3
 810ced2:	4422      	add	r2, r4
 810ced4:	4614      	mov	r4, r2
 810ced6:	68fa      	ldr	r2, [r7, #12]
 810ced8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 810cedc:	b211      	sxth	r1, r2
 810cede:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810cee2:	fb01 f504 	mul.w	r5, r1, r4
 810cee6:	fb03 f002 	mul.w	r0, r3, r2
 810ceea:	4428      	add	r0, r5
 810ceec:	fba3 3401 	umull	r3, r4, r3, r1
 810cef0:	1902      	adds	r2, r0, r4
 810cef2:	4614      	mov	r4, r2
 810cef4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 810cef8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 810cefc:	68fb      	ldr	r3, [r7, #12]
 810cefe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 810cf02:	b21b      	sxth	r3, r3
 810cf04:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810cf08:	6a3a      	ldr	r2, [r7, #32]
 810cf0a:	fb04 f102 	mul.w	r1, r4, r2
 810cf0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810cf10:	fb03 f202 	mul.w	r2, r3, r2
 810cf14:	1888      	adds	r0, r1, r2
 810cf16:	6a3a      	ldr	r2, [r7, #32]
 810cf18:	fba2 1203 	umull	r1, r2, r2, r3
 810cf1c:	1883      	adds	r3, r0, r2
 810cf1e:	461a      	mov	r2, r3
 810cf20:	f04f 0500 	mov.w	r5, #0
 810cf24:	f04f 0600 	mov.w	r6, #0
 810cf28:	0456      	lsls	r6, r2, #17
 810cf2a:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 810cf2e:	044d      	lsls	r5, r1, #17
 810cf30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810cf34:	186b      	adds	r3, r5, r1
 810cf36:	eb46 0402 	adc.w	r4, r6, r2
 810cf3a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 810cf3e:	68fb      	ldr	r3, [r7, #12]
 810cf40:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 810cf44:	b219      	sxth	r1, r3
 810cf46:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810cf4a:	f04f 0500 	mov.w	r5, #0
 810cf4e:	f04f 0600 	mov.w	r6, #0
 810cf52:	00ce      	lsls	r6, r1, #3
 810cf54:	2500      	movs	r5, #0
 810cf56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810cf5a:	186b      	adds	r3, r5, r1
 810cf5c:	eb46 0402 	adc.w	r4, r6, r2
 810cf60:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cf66:	6a3a      	ldr	r2, [r7, #32]
 810cf68:	fb02 f203 	mul.w	r2, r2, r3
 810cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cf6e:	6a39      	ldr	r1, [r7, #32]
 810cf70:	fb01 f303 	mul.w	r3, r1, r3
 810cf74:	441a      	add	r2, r3
 810cf76:	6a39      	ldr	r1, [r7, #32]
 810cf78:	6a3b      	ldr	r3, [r7, #32]
 810cf7a:	fba1 3403 	umull	r3, r4, r1, r3
 810cf7e:	4422      	add	r2, r4
 810cf80:	4614      	mov	r4, r2
 810cf82:	68fa      	ldr	r2, [r7, #12]
 810cf84:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 810cf88:	b211      	sxth	r1, r2
 810cf8a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810cf8e:	fb01 f504 	mul.w	r5, r1, r4
 810cf92:	fb03 f002 	mul.w	r0, r3, r2
 810cf96:	4428      	add	r0, r5
 810cf98:	fba3 3401 	umull	r3, r4, r3, r1
 810cf9c:	1902      	adds	r2, r0, r4
 810cf9e:	4614      	mov	r4, r2
 810cfa0:	f04f 0100 	mov.w	r1, #0
 810cfa4:	f04f 0200 	mov.w	r2, #0
 810cfa8:	0a19      	lsrs	r1, r3, #8
 810cfaa:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 810cfae:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 810cfb0:	68fb      	ldr	r3, [r7, #12]
 810cfb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810cfb6:	b21b      	sxth	r3, r3
 810cfb8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810cfbc:	6a38      	ldr	r0, [r7, #32]
 810cfbe:	fb04 f500 	mul.w	r5, r4, r0
 810cfc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810cfc4:	fb03 f000 	mul.w	r0, r3, r0
 810cfc8:	4428      	add	r0, r5
 810cfca:	6a3d      	ldr	r5, [r7, #32]
 810cfcc:	fba5 5603 	umull	r5, r6, r5, r3
 810cfd0:	1983      	adds	r3, r0, r6
 810cfd2:	461e      	mov	r6, r3
 810cfd4:	f04f 0b00 	mov.w	fp, #0
 810cfd8:	f04f 0c00 	mov.w	ip, #0
 810cfdc:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 810cfe0:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 810cfe4:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810cfe8:	eb1b 0301 	adds.w	r3, fp, r1
 810cfec:	eb4c 0402 	adc.w	r4, ip, r2
 810cff0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 810cff4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810cff8:	1c19      	adds	r1, r3, #0
 810cffa:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 810cffe:	68fb      	ldr	r3, [r7, #12]
 810d000:	88db      	ldrh	r3, [r3, #6]
 810d002:	b29b      	uxth	r3, r3
 810d004:	f04f 0400 	mov.w	r4, #0
 810d008:	fb03 f502 	mul.w	r5, r3, r2
 810d00c:	fb01 f004 	mul.w	r0, r1, r4
 810d010:	4428      	add	r0, r5
 810d012:	fba1 3403 	umull	r3, r4, r1, r3
 810d016:	1902      	adds	r2, r0, r4
 810d018:	4614      	mov	r4, r2
 810d01a:	f04f 0100 	mov.w	r1, #0
 810d01e:	f04f 0200 	mov.w	r2, #0
 810d022:	1061      	asrs	r1, r4, #1
 810d024:	17e2      	asrs	r2, r4, #31
 810d026:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 810d02a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810d02e:	4323      	orrs	r3, r4
 810d030:	d101      	bne.n	810d036 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 810d032:	2300      	movs	r3, #0
 810d034:	e0d4      	b.n	810d1e0 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 810d036:	68bb      	ldr	r3, [r7, #8]
 810d038:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810d03c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810d040:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 810d044:	693b      	ldr	r3, [r7, #16]
 810d046:	ea4f 0963 	mov.w	r9, r3, asr #1
 810d04a:	693b      	ldr	r3, [r7, #16]
 810d04c:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 810d050:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810d054:	4645      	mov	r5, r8
 810d056:	464e      	mov	r6, r9
 810d058:	1aed      	subs	r5, r5, r3
 810d05a:	eb66 0604 	sbc.w	r6, r6, r4
 810d05e:	46a8      	mov	r8, r5
 810d060:	46b1      	mov	r9, r6
 810d062:	eb18 0308 	adds.w	r3, r8, r8
 810d066:	eb49 0409 	adc.w	r4, r9, r9
 810d06a:	4698      	mov	r8, r3
 810d06c:	46a1      	mov	r9, r4
 810d06e:	eb18 0805 	adds.w	r8, r8, r5
 810d072:	eb49 0906 	adc.w	r9, r9, r6
 810d076:	f04f 0100 	mov.w	r1, #0
 810d07a:	f04f 0200 	mov.w	r2, #0
 810d07e:	ea4f 1289 	mov.w	r2, r9, lsl #6
 810d082:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 810d086:	ea4f 1188 	mov.w	r1, r8, lsl #6
 810d08a:	eb18 0801 	adds.w	r8, r8, r1
 810d08e:	eb49 0902 	adc.w	r9, r9, r2
 810d092:	f04f 0100 	mov.w	r1, #0
 810d096:	f04f 0200 	mov.w	r2, #0
 810d09a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810d09e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810d0a2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810d0a6:	4688      	mov	r8, r1
 810d0a8:	4691      	mov	r9, r2
 810d0aa:	eb18 0805 	adds.w	r8, r8, r5
 810d0ae:	eb49 0906 	adc.w	r9, r9, r6
 810d0b2:	f04f 0100 	mov.w	r1, #0
 810d0b6:	f04f 0200 	mov.w	r2, #0
 810d0ba:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810d0be:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810d0c2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810d0c6:	4688      	mov	r8, r1
 810d0c8:	4691      	mov	r9, r2
 810d0ca:	eb18 0005 	adds.w	r0, r8, r5
 810d0ce:	eb49 0106 	adc.w	r1, r9, r6
 810d0d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810d0d6:	f7f3 fe3f 	bl	8100d58 <__aeabi_ldivmod>
 810d0da:	4603      	mov	r3, r0
 810d0dc:	460c      	mov	r4, r1
 810d0de:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 810d0e2:	68fb      	ldr	r3, [r7, #12]
 810d0e4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 810d0e8:	b219      	sxth	r1, r3
 810d0ea:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810d0ee:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810d0f2:	f04f 0300 	mov.w	r3, #0
 810d0f6:	f04f 0400 	mov.w	r4, #0
 810d0fa:	0b6b      	lsrs	r3, r5, #13
 810d0fc:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810d100:	1374      	asrs	r4, r6, #13
 810d102:	fb03 f502 	mul.w	r5, r3, r2
 810d106:	fb01 f004 	mul.w	r0, r1, r4
 810d10a:	4428      	add	r0, r5
 810d10c:	fba1 1203 	umull	r1, r2, r1, r3
 810d110:	1883      	adds	r3, r0, r2
 810d112:	461a      	mov	r2, r3
 810d114:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810d118:	f04f 0300 	mov.w	r3, #0
 810d11c:	f04f 0400 	mov.w	r4, #0
 810d120:	0b6b      	lsrs	r3, r5, #13
 810d122:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810d126:	1374      	asrs	r4, r6, #13
 810d128:	fb03 f502 	mul.w	r5, r3, r2
 810d12c:	fb01 f004 	mul.w	r0, r1, r4
 810d130:	4428      	add	r0, r5
 810d132:	fba1 1203 	umull	r1, r2, r1, r3
 810d136:	1883      	adds	r3, r0, r2
 810d138:	461a      	mov	r2, r3
 810d13a:	f04f 0300 	mov.w	r3, #0
 810d13e:	f04f 0400 	mov.w	r4, #0
 810d142:	0e4b      	lsrs	r3, r1, #25
 810d144:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 810d148:	1654      	asrs	r4, r2, #25
 810d14a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 810d14e:	68fb      	ldr	r3, [r7, #12]
 810d150:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 810d154:	b21b      	sxth	r3, r3
 810d156:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810d15a:	693a      	ldr	r2, [r7, #16]
 810d15c:	fb04 f102 	mul.w	r1, r4, r2
 810d160:	697a      	ldr	r2, [r7, #20]
 810d162:	fb03 f202 	mul.w	r2, r3, r2
 810d166:	1888      	adds	r0, r1, r2
 810d168:	693a      	ldr	r2, [r7, #16]
 810d16a:	fba2 1203 	umull	r1, r2, r2, r3
 810d16e:	1883      	adds	r3, r0, r2
 810d170:	461a      	mov	r2, r3
 810d172:	f04f 0300 	mov.w	r3, #0
 810d176:	f04f 0400 	mov.w	r4, #0
 810d17a:	0ccb      	lsrs	r3, r1, #19
 810d17c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 810d180:	14d4      	asrs	r4, r2, #19
 810d182:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 810d186:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810d18a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810d18e:	eb11 0803 	adds.w	r8, r1, r3
 810d192:	eb42 0904 	adc.w	r9, r2, r4
 810d196:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810d19a:	eb13 0508 	adds.w	r5, r3, r8
 810d19e:	eb44 0609 	adc.w	r6, r4, r9
 810d1a2:	f04f 0100 	mov.w	r1, #0
 810d1a6:	f04f 0200 	mov.w	r2, #0
 810d1aa:	0a29      	lsrs	r1, r5, #8
 810d1ac:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 810d1b0:	1232      	asrs	r2, r6, #8
 810d1b2:	68fb      	ldr	r3, [r7, #12]
 810d1b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 810d1b8:	b21d      	sxth	r5, r3
 810d1ba:	ea4f 76e5 	mov.w	r6, r5, asr #31
 810d1be:	f04f 0800 	mov.w	r8, #0
 810d1c2:	f04f 0900 	mov.w	r9, #0
 810d1c6:	ea4f 1906 	mov.w	r9, r6, lsl #4
 810d1ca:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 810d1ce:	ea4f 1805 	mov.w	r8, r5, lsl #4
 810d1d2:	eb18 0301 	adds.w	r3, r8, r1
 810d1d6:	eb49 0402 	adc.w	r4, r9, r2
 810d1da:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 810d1de:	693b      	ldr	r3, [r7, #16]
}
 810d1e0:	4618      	mov	r0, r3
 810d1e2:	3728      	adds	r7, #40	; 0x28
 810d1e4:	46bd      	mov	sp, r7
 810d1e6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0810d1ea <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 810d1ea:	b480      	push	{r7}
 810d1ec:	b087      	sub	sp, #28
 810d1ee:	af00      	add	r7, sp, #0
 810d1f0:	60f8      	str	r0, [r7, #12]
 810d1f2:	60b9      	str	r1, [r7, #8]
 810d1f4:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 810d1f6:	687b      	ldr	r3, [r7, #4]
 810d1f8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 810d1fc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810d1fe:	68bb      	ldr	r3, [r7, #8]
 810d200:	039a      	lsls	r2, r3, #14
 810d202:	68fb      	ldr	r3, [r7, #12]
 810d204:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 810d208:	051b      	lsls	r3, r3, #20
 810d20a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 810d20c:	68fb      	ldr	r3, [r7, #12]
 810d20e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 810d212:	4619      	mov	r1, r3
 810d214:	697b      	ldr	r3, [r7, #20]
 810d216:	fb03 f301 	mul.w	r3, r3, r1
 810d21a:	1ad3      	subs	r3, r2, r3
 810d21c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 810d220:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 810d222:	68fa      	ldr	r2, [r7, #12]
 810d224:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 810d228:	4611      	mov	r1, r2
 810d22a:	697a      	ldr	r2, [r7, #20]
 810d22c:	fb02 f201 	mul.w	r2, r2, r1
 810d230:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810d232:	68f9      	ldr	r1, [r7, #12]
 810d234:	7f09      	ldrb	r1, [r1, #28]
 810d236:	4608      	mov	r0, r1
 810d238:	6979      	ldr	r1, [r7, #20]
 810d23a:	fb01 f100 	mul.w	r1, r1, r0
 810d23e:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810d240:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810d244:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810d248:	1292      	asrs	r2, r2, #10
 810d24a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 810d24e:	68f9      	ldr	r1, [r7, #12]
 810d250:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 810d254:	fb01 f202 	mul.w	r2, r1, r2
 810d258:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 810d25c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810d25e:	fb02 f303 	mul.w	r3, r2, r3
 810d262:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 810d264:	697b      	ldr	r3, [r7, #20]
 810d266:	13db      	asrs	r3, r3, #15
 810d268:	697a      	ldr	r2, [r7, #20]
 810d26a:	13d2      	asrs	r2, r2, #15
 810d26c:	fb02 f303 	mul.w	r3, r2, r3
 810d270:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 810d272:	68fa      	ldr	r2, [r7, #12]
 810d274:	7e12      	ldrb	r2, [r2, #24]
 810d276:	fb02 f303 	mul.w	r3, r2, r3
 810d27a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 810d27c:	697a      	ldr	r2, [r7, #20]
 810d27e:	1ad3      	subs	r3, r2, r3
 810d280:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 810d282:	697b      	ldr	r3, [r7, #20]
 810d284:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810d288:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 810d28a:	697b      	ldr	r3, [r7, #20]
 810d28c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 810d290:	bfa8      	it	ge
 810d292:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 810d296:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 810d298:	697b      	ldr	r3, [r7, #20]
 810d29a:	131b      	asrs	r3, r3, #12
}
 810d29c:	4618      	mov	r0, r3
 810d29e:	371c      	adds	r7, #28
 810d2a0:	46bd      	mov	sp, r7
 810d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2a6:	4770      	bx	lr

0810d2a8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 810d2a8:	b580      	push	{r7, lr}
 810d2aa:	b08c      	sub	sp, #48	; 0x30
 810d2ac:	af00      	add	r7, sp, #0
 810d2ae:	60f8      	str	r0, [r7, #12]
 810d2b0:	60b9      	str	r1, [r7, #8]
 810d2b2:	607a      	str	r2, [r7, #4]
 810d2b4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 810d2b6:	68fb      	ldr	r3, [r7, #12]
 810d2b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810d2bc:	2b60      	cmp	r3, #96	; 0x60
 810d2be:	d007      	beq.n	810d2d0 <bmp280_read_fixed+0x28>
		if (humidity)
 810d2c0:	683b      	ldr	r3, [r7, #0]
 810d2c2:	2b00      	cmp	r3, #0
 810d2c4:	d002      	beq.n	810d2cc <bmp280_read_fixed+0x24>
			*humidity = 0;
 810d2c6:	683b      	ldr	r3, [r7, #0]
 810d2c8:	2200      	movs	r2, #0
 810d2ca:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 810d2cc:	2300      	movs	r3, #0
 810d2ce:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 810d2d0:	683b      	ldr	r3, [r7, #0]
 810d2d2:	2b00      	cmp	r3, #0
 810d2d4:	d001      	beq.n	810d2da <bmp280_read_fixed+0x32>
 810d2d6:	2308      	movs	r3, #8
 810d2d8:	e000      	b.n	810d2dc <bmp280_read_fixed+0x34>
 810d2da:	2306      	movs	r3, #6
 810d2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 810d2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d2e0:	b2db      	uxtb	r3, r3
 810d2e2:	f107 0218 	add.w	r2, r7, #24
 810d2e6:	21f7      	movs	r1, #247	; 0xf7
 810d2e8:	68f8      	ldr	r0, [r7, #12]
 810d2ea:	f7ff fbbe 	bl	810ca6a <read_data>
 810d2ee:	4603      	mov	r3, r0
 810d2f0:	2b00      	cmp	r3, #0
 810d2f2:	d001      	beq.n	810d2f8 <bmp280_read_fixed+0x50>
		return false;
 810d2f4:	2300      	movs	r3, #0
 810d2f6:	e038      	b.n	810d36a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 810d2f8:	7e3b      	ldrb	r3, [r7, #24]
 810d2fa:	031a      	lsls	r2, r3, #12
 810d2fc:	7e7b      	ldrb	r3, [r7, #25]
 810d2fe:	011b      	lsls	r3, r3, #4
 810d300:	4313      	orrs	r3, r2
 810d302:	7eba      	ldrb	r2, [r7, #26]
 810d304:	0912      	lsrs	r2, r2, #4
 810d306:	b2d2      	uxtb	r2, r2
 810d308:	4313      	orrs	r3, r2
 810d30a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 810d30c:	7efb      	ldrb	r3, [r7, #27]
 810d30e:	031a      	lsls	r2, r3, #12
 810d310:	7f3b      	ldrb	r3, [r7, #28]
 810d312:	011b      	lsls	r3, r3, #4
 810d314:	4313      	orrs	r3, r2
 810d316:	7f7a      	ldrb	r2, [r7, #29]
 810d318:	0912      	lsrs	r2, r2, #4
 810d31a:	b2d2      	uxtb	r2, r2
 810d31c:	4313      	orrs	r3, r2
 810d31e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 810d320:	f107 0314 	add.w	r3, r7, #20
 810d324:	461a      	mov	r2, r3
 810d326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810d328:	68f8      	ldr	r0, [r7, #12]
 810d32a:	f7ff fd7b 	bl	810ce24 <compensate_temperature>
 810d32e:	4602      	mov	r2, r0
 810d330:	68bb      	ldr	r3, [r7, #8]
 810d332:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 810d334:	697b      	ldr	r3, [r7, #20]
 810d336:	461a      	mov	r2, r3
 810d338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810d33a:	68f8      	ldr	r0, [r7, #12]
 810d33c:	f7ff fdab 	bl	810ce96 <compensate_pressure>
 810d340:	4602      	mov	r2, r0
 810d342:	687b      	ldr	r3, [r7, #4]
 810d344:	601a      	str	r2, [r3, #0]

	if (humidity) {
 810d346:	683b      	ldr	r3, [r7, #0]
 810d348:	2b00      	cmp	r3, #0
 810d34a:	d00d      	beq.n	810d368 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 810d34c:	7fbb      	ldrb	r3, [r7, #30]
 810d34e:	021b      	lsls	r3, r3, #8
 810d350:	7ffa      	ldrb	r2, [r7, #31]
 810d352:	4313      	orrs	r3, r2
 810d354:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 810d356:	697b      	ldr	r3, [r7, #20]
 810d358:	461a      	mov	r2, r3
 810d35a:	6a39      	ldr	r1, [r7, #32]
 810d35c:	68f8      	ldr	r0, [r7, #12]
 810d35e:	f7ff ff44 	bl	810d1ea <compensate_humidity>
 810d362:	4602      	mov	r2, r0
 810d364:	683b      	ldr	r3, [r7, #0]
 810d366:	601a      	str	r2, [r3, #0]
	}

	return true;
 810d368:	2301      	movs	r3, #1
}
 810d36a:	4618      	mov	r0, r3
 810d36c:	3730      	adds	r7, #48	; 0x30
 810d36e:	46bd      	mov	sp, r7
 810d370:	bd80      	pop	{r7, pc}
	...

0810d374 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 810d374:	b580      	push	{r7, lr}
 810d376:	b088      	sub	sp, #32
 810d378:	af00      	add	r7, sp, #0
 810d37a:	60f8      	str	r0, [r7, #12]
 810d37c:	60b9      	str	r1, [r7, #8]
 810d37e:	607a      	str	r2, [r7, #4]
 810d380:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 810d382:	683b      	ldr	r3, [r7, #0]
 810d384:	2b00      	cmp	r3, #0
 810d386:	d002      	beq.n	810d38e <bmp280_read_float+0x1a>
 810d388:	f107 0314 	add.w	r3, r7, #20
 810d38c:	e000      	b.n	810d390 <bmp280_read_float+0x1c>
 810d38e:	2300      	movs	r3, #0
 810d390:	f107 0218 	add.w	r2, r7, #24
 810d394:	f107 011c 	add.w	r1, r7, #28
 810d398:	68f8      	ldr	r0, [r7, #12]
 810d39a:	f7ff ff85 	bl	810d2a8 <bmp280_read_fixed>
 810d39e:	4603      	mov	r3, r0
 810d3a0:	2b00      	cmp	r3, #0
 810d3a2:	d028      	beq.n	810d3f6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 810d3a4:	69fb      	ldr	r3, [r7, #28]
 810d3a6:	ee07 3a90 	vmov	s15, r3
 810d3aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810d3ae:	eddf 6a14 	vldr	s13, [pc, #80]	; 810d400 <bmp280_read_float+0x8c>
 810d3b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810d3b6:	68bb      	ldr	r3, [r7, #8]
 810d3b8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 810d3bc:	69bb      	ldr	r3, [r7, #24]
 810d3be:	ee07 3a90 	vmov	s15, r3
 810d3c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810d3c6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 810d404 <bmp280_read_float+0x90>
 810d3ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810d3ce:	687b      	ldr	r3, [r7, #4]
 810d3d0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 810d3d4:	683b      	ldr	r3, [r7, #0]
 810d3d6:	2b00      	cmp	r3, #0
 810d3d8:	d00b      	beq.n	810d3f2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 810d3da:	697b      	ldr	r3, [r7, #20]
 810d3dc:	ee07 3a90 	vmov	s15, r3
 810d3e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810d3e4:	eddf 6a08 	vldr	s13, [pc, #32]	; 810d408 <bmp280_read_float+0x94>
 810d3e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810d3ec:	683b      	ldr	r3, [r7, #0]
 810d3ee:	edc3 7a00 	vstr	s15, [r3]
		return true;
 810d3f2:	2301      	movs	r3, #1
 810d3f4:	e000      	b.n	810d3f8 <bmp280_read_float+0x84>
	}

	return false;
 810d3f6:	2300      	movs	r3, #0
}
 810d3f8:	4618      	mov	r0, r3
 810d3fa:	3720      	adds	r7, #32
 810d3fc:	46bd      	mov	sp, r7
 810d3fe:	bd80      	pop	{r7, pc}
 810d400:	42c80000 	.word	0x42c80000
 810d404:	43800000 	.word	0x43800000
 810d408:	44800000 	.word	0x44800000

0810d40c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810d40c:	b580      	push	{r7, lr}
 810d40e:	b082      	sub	sp, #8
 810d410:	af00      	add	r7, sp, #0
 810d412:	4603      	mov	r3, r0
 810d414:	71fb      	strb	r3, [r7, #7]
 810d416:	79fb      	ldrb	r3, [r7, #7]
 810d418:	4619      	mov	r1, r3
 810d41a:	2007      	movs	r0, #7
 810d41c:	f000 fa8e 	bl	810d93c <bno055_writeData>
 810d420:	bf00      	nop
 810d422:	3708      	adds	r7, #8
 810d424:	46bd      	mov	sp, r7
 810d426:	bd80      	pop	{r7, pc}

0810d428 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 810d428:	b580      	push	{r7, lr}
 810d42a:	b082      	sub	sp, #8
 810d42c:	af00      	add	r7, sp, #0
 810d42e:	4603      	mov	r3, r0
 810d430:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810d432:	79fb      	ldrb	r3, [r7, #7]
 810d434:	4619      	mov	r1, r3
 810d436:	203d      	movs	r0, #61	; 0x3d
 810d438:	f000 fa80 	bl	810d93c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810d43c:	79fb      	ldrb	r3, [r7, #7]
 810d43e:	2b00      	cmp	r3, #0
 810d440:	d103      	bne.n	810d44a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810d442:	2013      	movs	r0, #19
 810d444:	f000 fa6e 	bl	810d924 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 810d448:	e002      	b.n	810d450 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 810d44a:	2007      	movs	r0, #7
 810d44c:	f000 fa6a 	bl	810d924 <bno055_delay>
}
 810d450:	bf00      	nop
 810d452:	3708      	adds	r7, #8
 810d454:	46bd      	mov	sp, r7
 810d456:	bd80      	pop	{r7, pc}

0810d458 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 810d458:	b580      	push	{r7, lr}
 810d45a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810d45c:	2000      	movs	r0, #0
 810d45e:	f7ff ffe3 	bl	810d428 <bno055_setOperationMode>
}
 810d462:	bf00      	nop
 810d464:	bd80      	pop	{r7, pc}

0810d466 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 810d466:	b580      	push	{r7, lr}
 810d468:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810d46a:	200c      	movs	r0, #12
 810d46c:	f7ff ffdc 	bl	810d428 <bno055_setOperationMode>
}
 810d470:	bf00      	nop
 810d472:	bd80      	pop	{r7, pc}

0810d474 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 810d474:	b580      	push	{r7, lr}
 810d476:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810d478:	2120      	movs	r1, #32
 810d47a:	203f      	movs	r0, #63	; 0x3f
 810d47c:	f000 fa5e 	bl	810d93c <bno055_writeData>
  bno055_delay(700);
 810d480:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 810d484:	f000 fa4e 	bl	810d924 <bno055_delay>
}
 810d488:	bf00      	nop
 810d48a:	bd80      	pop	{r7, pc}

0810d48c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810d48c:	b580      	push	{r7, lr}
 810d48e:	b082      	sub	sp, #8
 810d490:	af00      	add	r7, sp, #0
  bno055_reset();
 810d492:	f7ff ffef 	bl	810d474 <bno055_reset>

  uint8_t id = 0;
 810d496:	2300      	movs	r3, #0
 810d498:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810d49a:	1dfb      	adds	r3, r7, #7
 810d49c:	2201      	movs	r2, #1
 810d49e:	4619      	mov	r1, r3
 810d4a0:	2000      	movs	r0, #0
 810d4a2:	f000 fb37 	bl	810db14 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 810d4a6:	2000      	movs	r0, #0
 810d4a8:	f7ff ffb0 	bl	810d40c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810d4ac:	2100      	movs	r1, #0
 810d4ae:	203f      	movs	r0, #63	; 0x3f
 810d4b0:	f000 fa44 	bl	810d93c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 810d4b4:	f7ff ffd0 	bl	810d458 <bno055_setOperationModeConfig>
  bno055_delay(10);
 810d4b8:	200a      	movs	r0, #10
 810d4ba:	f000 fa33 	bl	810d924 <bno055_delay>
}
 810d4be:	bf00      	nop
 810d4c0:	3708      	adds	r7, #8
 810d4c2:	46bd      	mov	sp, r7
 810d4c4:	bd80      	pop	{r7, pc}

0810d4c6 <bno055_getSystemError>:
  res.magState = (tmp >> 1) & 0x01;
  res.accState = (tmp >> 0) & 0x01;
  return res;
}

uint8_t bno055_getSystemError() {
 810d4c6:	b580      	push	{r7, lr}
 810d4c8:	b082      	sub	sp, #8
 810d4ca:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 810d4cc:	2000      	movs	r0, #0
 810d4ce:	f7ff ff9d 	bl	810d40c <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
 810d4d2:	1dfb      	adds	r3, r7, #7
 810d4d4:	2201      	movs	r2, #1
 810d4d6:	4619      	mov	r1, r3
 810d4d8:	203a      	movs	r0, #58	; 0x3a
 810d4da:	f000 fb1b 	bl	810db14 <bno055_readData>
  return tmp;
 810d4de:	79fb      	ldrb	r3, [r7, #7]
}
 810d4e0:	4618      	mov	r0, r3
 810d4e2:	3708      	adds	r7, #8
 810d4e4:	46bd      	mov	sp, r7
 810d4e6:	bd80      	pop	{r7, pc}

0810d4e8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 810d4e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d4ec:	b09f      	sub	sp, #124	; 0x7c
 810d4ee:	af00      	add	r7, sp, #0
 810d4f0:	4603      	mov	r3, r0
 810d4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810d4f6:	2000      	movs	r0, #0
 810d4f8:	f7ff ff88 	bl	810d40c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810d4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d500:	2b20      	cmp	r3, #32
 810d502:	d108      	bne.n	810d516 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810d504:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810d508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d50c:	2208      	movs	r2, #8
 810d50e:	4618      	mov	r0, r3
 810d510:	f000 fb00 	bl	810db14 <bno055_readData>
 810d514:	e007      	b.n	810d526 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810d516:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810d51a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d51e:	2206      	movs	r2, #6
 810d520:	4618      	mov	r0, r3
 810d522:	f000 faf7 	bl	810db14 <bno055_readData>

  double scale = 1;
 810d526:	f04f 0300 	mov.w	r3, #0
 810d52a:	4c8b      	ldr	r4, [pc, #556]	; (810d758 <bno055_getVector+0x270>)
 810d52c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 810d530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d534:	2b0e      	cmp	r3, #14
 810d536:	d109      	bne.n	810d54c <bno055_getVector+0x64>
    scale = magScale;
 810d538:	4b88      	ldr	r3, [pc, #544]	; (810d75c <bno055_getVector+0x274>)
 810d53a:	881b      	ldrh	r3, [r3, #0]
 810d53c:	4618      	mov	r0, r3
 810d53e:	f7f3 f869 	bl	8100614 <__aeabi_ui2d>
 810d542:	4603      	mov	r3, r0
 810d544:	460c      	mov	r4, r1
 810d546:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810d54a:	e03e      	b.n	810d5ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810d54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d550:	2b08      	cmp	r3, #8
 810d552:	d007      	beq.n	810d564 <bno055_getVector+0x7c>
 810d554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d558:	2b28      	cmp	r3, #40	; 0x28
 810d55a:	d003      	beq.n	810d564 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810d55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d560:	2b2e      	cmp	r3, #46	; 0x2e
 810d562:	d109      	bne.n	810d578 <bno055_getVector+0x90>
    scale = accelScale;
 810d564:	4b7e      	ldr	r3, [pc, #504]	; (810d760 <bno055_getVector+0x278>)
 810d566:	881b      	ldrh	r3, [r3, #0]
 810d568:	4618      	mov	r0, r3
 810d56a:	f7f3 f853 	bl	8100614 <__aeabi_ui2d>
 810d56e:	4603      	mov	r3, r0
 810d570:	460c      	mov	r4, r1
 810d572:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810d576:	e028      	b.n	810d5ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 810d578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d57c:	2b14      	cmp	r3, #20
 810d57e:	d109      	bne.n	810d594 <bno055_getVector+0xac>
    scale = angularRateScale;
 810d580:	4b78      	ldr	r3, [pc, #480]	; (810d764 <bno055_getVector+0x27c>)
 810d582:	881b      	ldrh	r3, [r3, #0]
 810d584:	4618      	mov	r0, r3
 810d586:	f7f3 f845 	bl	8100614 <__aeabi_ui2d>
 810d58a:	4603      	mov	r3, r0
 810d58c:	460c      	mov	r4, r1
 810d58e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810d592:	e01a      	b.n	810d5ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 810d594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d598:	2b1a      	cmp	r3, #26
 810d59a:	d109      	bne.n	810d5b0 <bno055_getVector+0xc8>
    scale = eulerScale;
 810d59c:	4b72      	ldr	r3, [pc, #456]	; (810d768 <bno055_getVector+0x280>)
 810d59e:	881b      	ldrh	r3, [r3, #0]
 810d5a0:	4618      	mov	r0, r3
 810d5a2:	f7f3 f837 	bl	8100614 <__aeabi_ui2d>
 810d5a6:	4603      	mov	r3, r0
 810d5a8:	460c      	mov	r4, r1
 810d5aa:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810d5ae:	e00c      	b.n	810d5ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810d5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d5b4:	2b20      	cmp	r3, #32
 810d5b6:	d108      	bne.n	810d5ca <bno055_getVector+0xe2>
    scale = quaScale;
 810d5b8:	4b6c      	ldr	r3, [pc, #432]	; (810d76c <bno055_getVector+0x284>)
 810d5ba:	881b      	ldrh	r3, [r3, #0]
 810d5bc:	4618      	mov	r0, r3
 810d5be:	f7f3 f829 	bl	8100614 <__aeabi_ui2d>
 810d5c2:	4603      	mov	r3, r0
 810d5c4:	460c      	mov	r4, r1
 810d5c6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810d5ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810d5ce:	2220      	movs	r2, #32
 810d5d0:	2100      	movs	r1, #0
 810d5d2:	4618      	mov	r0, r3
 810d5d4:	f000 ffbd 	bl	810e552 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810d5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d5dc:	2b20      	cmp	r3, #32
 810d5de:	d150      	bne.n	810d682 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810d5e0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810d5e4:	021b      	lsls	r3, r3, #8
 810d5e6:	b21a      	sxth	r2, r3
 810d5e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810d5ec:	b21b      	sxth	r3, r3
 810d5ee:	4313      	orrs	r3, r2
 810d5f0:	b21b      	sxth	r3, r3
 810d5f2:	4618      	mov	r0, r3
 810d5f4:	f7f3 f81e 	bl	8100634 <__aeabi_i2d>
 810d5f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d5fc:	f7f3 f9ae 	bl	810095c <__aeabi_ddiv>
 810d600:	4603      	mov	r3, r0
 810d602:	460c      	mov	r4, r1
 810d604:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810d608:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810d60c:	021b      	lsls	r3, r3, #8
 810d60e:	b21a      	sxth	r2, r3
 810d610:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810d614:	b21b      	sxth	r3, r3
 810d616:	4313      	orrs	r3, r2
 810d618:	b21b      	sxth	r3, r3
 810d61a:	4618      	mov	r0, r3
 810d61c:	f7f3 f80a 	bl	8100634 <__aeabi_i2d>
 810d620:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d624:	f7f3 f99a 	bl	810095c <__aeabi_ddiv>
 810d628:	4603      	mov	r3, r0
 810d62a:	460c      	mov	r4, r1
 810d62c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810d630:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810d634:	021b      	lsls	r3, r3, #8
 810d636:	b21a      	sxth	r2, r3
 810d638:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810d63c:	b21b      	sxth	r3, r3
 810d63e:	4313      	orrs	r3, r2
 810d640:	b21b      	sxth	r3, r3
 810d642:	4618      	mov	r0, r3
 810d644:	f7f2 fff6 	bl	8100634 <__aeabi_i2d>
 810d648:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d64c:	f7f3 f986 	bl	810095c <__aeabi_ddiv>
 810d650:	4603      	mov	r3, r0
 810d652:	460c      	mov	r4, r1
 810d654:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810d658:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810d65c:	021b      	lsls	r3, r3, #8
 810d65e:	b21a      	sxth	r2, r3
 810d660:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810d664:	b21b      	sxth	r3, r3
 810d666:	4313      	orrs	r3, r2
 810d668:	b21b      	sxth	r3, r3
 810d66a:	4618      	mov	r0, r3
 810d66c:	f7f2 ffe2 	bl	8100634 <__aeabi_i2d>
 810d670:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d674:	f7f3 f972 	bl	810095c <__aeabi_ddiv>
 810d678:	4603      	mov	r3, r0
 810d67a:	460c      	mov	r4, r1
 810d67c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 810d680:	e03b      	b.n	810d6fa <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810d682:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810d686:	021b      	lsls	r3, r3, #8
 810d688:	b21a      	sxth	r2, r3
 810d68a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810d68e:	b21b      	sxth	r3, r3
 810d690:	4313      	orrs	r3, r2
 810d692:	b21b      	sxth	r3, r3
 810d694:	4618      	mov	r0, r3
 810d696:	f7f2 ffcd 	bl	8100634 <__aeabi_i2d>
 810d69a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d69e:	f7f3 f95d 	bl	810095c <__aeabi_ddiv>
 810d6a2:	4603      	mov	r3, r0
 810d6a4:	460c      	mov	r4, r1
 810d6a6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810d6aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810d6ae:	021b      	lsls	r3, r3, #8
 810d6b0:	b21a      	sxth	r2, r3
 810d6b2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810d6b6:	b21b      	sxth	r3, r3
 810d6b8:	4313      	orrs	r3, r2
 810d6ba:	b21b      	sxth	r3, r3
 810d6bc:	4618      	mov	r0, r3
 810d6be:	f7f2 ffb9 	bl	8100634 <__aeabi_i2d>
 810d6c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d6c6:	f7f3 f949 	bl	810095c <__aeabi_ddiv>
 810d6ca:	4603      	mov	r3, r0
 810d6cc:	460c      	mov	r4, r1
 810d6ce:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810d6d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810d6d6:	021b      	lsls	r3, r3, #8
 810d6d8:	b21a      	sxth	r2, r3
 810d6da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810d6de:	b21b      	sxth	r3, r3
 810d6e0:	4313      	orrs	r3, r2
 810d6e2:	b21b      	sxth	r3, r3
 810d6e4:	4618      	mov	r0, r3
 810d6e6:	f7f2 ffa5 	bl	8100634 <__aeabi_i2d>
 810d6ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810d6ee:	f7f3 f935 	bl	810095c <__aeabi_ddiv>
 810d6f2:	4603      	mov	r3, r0
 810d6f4:	460c      	mov	r4, r1
 810d6f6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  return xyz;
 810d6fa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810d6fe:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810d702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810d704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810d706:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810d70a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810d70e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810d712:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 810d716:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 810d71a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 810d71e:	ec49 8b14 	vmov	d4, r8, r9
 810d722:	ec46 5b15 	vmov	d5, r5, r6
 810d726:	ec42 1b16 	vmov	d6, r1, r2
 810d72a:	ec44 3b17 	vmov	d7, r3, r4
}
 810d72e:	eeb0 0a44 	vmov.f32	s0, s8
 810d732:	eef0 0a64 	vmov.f32	s1, s9
 810d736:	eeb0 1a45 	vmov.f32	s2, s10
 810d73a:	eef0 1a65 	vmov.f32	s3, s11
 810d73e:	eeb0 2a46 	vmov.f32	s4, s12
 810d742:	eef0 2a66 	vmov.f32	s5, s13
 810d746:	eeb0 3a47 	vmov.f32	s6, s14
 810d74a:	eef0 3a67 	vmov.f32	s7, s15
 810d74e:	377c      	adds	r7, #124	; 0x7c
 810d750:	46bd      	mov	sp, r7
 810d752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d756:	bf00      	nop
 810d758:	3ff00000 	.word	0x3ff00000
 810d75c:	1000002e 	.word	0x1000002e
 810d760:	10000028 	.word	0x10000028
 810d764:	1000002a 	.word	0x1000002a
 810d768:	1000002c 	.word	0x1000002c
 810d76c:	10000030 	.word	0x10000030

0810d770 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 810d770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d774:	b091      	sub	sp, #68	; 0x44
 810d776:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 810d778:	2008      	movs	r0, #8
 810d77a:	f7ff feb5 	bl	810d4e8 <bno055_getVector>
 810d77e:	eeb0 4a40 	vmov.f32	s8, s0
 810d782:	eef0 4a60 	vmov.f32	s9, s1
 810d786:	eeb0 5a41 	vmov.f32	s10, s2
 810d78a:	eef0 5a61 	vmov.f32	s11, s3
 810d78e:	eeb0 6a42 	vmov.f32	s12, s4
 810d792:	eef0 6a62 	vmov.f32	s13, s5
 810d796:	eeb0 7a43 	vmov.f32	s14, s6
 810d79a:	eef0 7a63 	vmov.f32	s15, s7
 810d79e:	ed87 4b08 	vstr	d4, [r7, #32]
 810d7a2:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d7a6:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d7aa:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d7ae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d7b2:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810d7b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810d7ba:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810d7be:	ec49 8b14 	vmov	d4, r8, r9
 810d7c2:	ec46 5b15 	vmov	d5, r5, r6
 810d7c6:	ec42 1b16 	vmov	d6, r1, r2
 810d7ca:	ec44 3b17 	vmov	d7, r3, r4
}
 810d7ce:	eeb0 0a44 	vmov.f32	s0, s8
 810d7d2:	eef0 0a64 	vmov.f32	s1, s9
 810d7d6:	eeb0 1a45 	vmov.f32	s2, s10
 810d7da:	eef0 1a65 	vmov.f32	s3, s11
 810d7de:	eeb0 2a46 	vmov.f32	s4, s12
 810d7e2:	eef0 2a66 	vmov.f32	s5, s13
 810d7e6:	eeb0 3a47 	vmov.f32	s6, s14
 810d7ea:	eef0 3a67 	vmov.f32	s7, s15
 810d7ee:	3744      	adds	r7, #68	; 0x44
 810d7f0:	46bd      	mov	sp, r7
 810d7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810d7f6 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 810d7f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d7fa:	b091      	sub	sp, #68	; 0x44
 810d7fc:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 810d7fe:	201a      	movs	r0, #26
 810d800:	f7ff fe72 	bl	810d4e8 <bno055_getVector>
 810d804:	eeb0 4a40 	vmov.f32	s8, s0
 810d808:	eef0 4a60 	vmov.f32	s9, s1
 810d80c:	eeb0 5a41 	vmov.f32	s10, s2
 810d810:	eef0 5a61 	vmov.f32	s11, s3
 810d814:	eeb0 6a42 	vmov.f32	s12, s4
 810d818:	eef0 6a62 	vmov.f32	s13, s5
 810d81c:	eeb0 7a43 	vmov.f32	s14, s6
 810d820:	eef0 7a63 	vmov.f32	s15, s7
 810d824:	ed87 4b08 	vstr	d4, [r7, #32]
 810d828:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d82c:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d830:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d838:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810d83c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810d840:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810d844:	ec49 8b14 	vmov	d4, r8, r9
 810d848:	ec46 5b15 	vmov	d5, r5, r6
 810d84c:	ec42 1b16 	vmov	d6, r1, r2
 810d850:	ec44 3b17 	vmov	d7, r3, r4
}
 810d854:	eeb0 0a44 	vmov.f32	s0, s8
 810d858:	eef0 0a64 	vmov.f32	s1, s9
 810d85c:	eeb0 1a45 	vmov.f32	s2, s10
 810d860:	eef0 1a65 	vmov.f32	s3, s11
 810d864:	eeb0 2a46 	vmov.f32	s4, s12
 810d868:	eef0 2a66 	vmov.f32	s5, s13
 810d86c:	eeb0 3a47 	vmov.f32	s6, s14
 810d870:	eef0 3a67 	vmov.f32	s7, s15
 810d874:	3744      	adds	r7, #68	; 0x44
 810d876:	46bd      	mov	sp, r7
 810d878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810d87c <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 810d87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d880:	b091      	sub	sp, #68	; 0x44
 810d882:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 810d884:	202e      	movs	r0, #46	; 0x2e
 810d886:	f7ff fe2f 	bl	810d4e8 <bno055_getVector>
 810d88a:	eeb0 4a40 	vmov.f32	s8, s0
 810d88e:	eef0 4a60 	vmov.f32	s9, s1
 810d892:	eeb0 5a41 	vmov.f32	s10, s2
 810d896:	eef0 5a61 	vmov.f32	s11, s3
 810d89a:	eeb0 6a42 	vmov.f32	s12, s4
 810d89e:	eef0 6a62 	vmov.f32	s13, s5
 810d8a2:	eeb0 7a43 	vmov.f32	s14, s6
 810d8a6:	eef0 7a63 	vmov.f32	s15, s7
 810d8aa:	ed87 4b08 	vstr	d4, [r7, #32]
 810d8ae:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810d8b2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810d8b6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810d8ba:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810d8be:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810d8c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810d8c6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810d8ca:	ec49 8b14 	vmov	d4, r8, r9
 810d8ce:	ec46 5b15 	vmov	d5, r5, r6
 810d8d2:	ec42 1b16 	vmov	d6, r1, r2
 810d8d6:	ec44 3b17 	vmov	d7, r3, r4
}
 810d8da:	eeb0 0a44 	vmov.f32	s0, s8
 810d8de:	eef0 0a64 	vmov.f32	s1, s9
 810d8e2:	eeb0 1a45 	vmov.f32	s2, s10
 810d8e6:	eef0 1a65 	vmov.f32	s3, s11
 810d8ea:	eeb0 2a46 	vmov.f32	s4, s12
 810d8ee:	eef0 2a66 	vmov.f32	s5, s13
 810d8f2:	eeb0 3a47 	vmov.f32	s6, s14
 810d8f6:	eef0 3a67 	vmov.f32	s7, s15
 810d8fa:	3744      	adds	r7, #68	; 0x44
 810d8fc:	46bd      	mov	sp, r7
 810d8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0810d904 <bno055_assignI2C>:
#include "bno055_stm32.h"
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810d904:	b480      	push	{r7}
 810d906:	b083      	sub	sp, #12
 810d908:	af00      	add	r7, sp, #0
 810d90a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810d90c:	4a04      	ldr	r2, [pc, #16]	; (810d920 <bno055_assignI2C+0x1c>)
 810d90e:	687b      	ldr	r3, [r7, #4]
 810d910:	6013      	str	r3, [r2, #0]
}
 810d912:	bf00      	nop
 810d914:	370c      	adds	r7, #12
 810d916:	46bd      	mov	sp, r7
 810d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d91c:	4770      	bx	lr
 810d91e:	bf00      	nop
 810d920:	100061c8 	.word	0x100061c8

0810d924 <bno055_delay>:

void bno055_delay(int time) {
 810d924:	b580      	push	{r7, lr}
 810d926:	b082      	sub	sp, #8
 810d928:	af00      	add	r7, sp, #0
 810d92a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810d92c:	6878      	ldr	r0, [r7, #4]
 810d92e:	f7fb fde7 	bl	8109500 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810d932:	bf00      	nop
 810d934:	3708      	adds	r7, #8
 810d936:	46bd      	mov	sp, r7
 810d938:	bd80      	pop	{r7, pc}
	...

0810d93c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 810d93c:	b580      	push	{r7, lr}
 810d93e:	b088      	sub	sp, #32
 810d940:	af02      	add	r7, sp, #8
 810d942:	4603      	mov	r3, r0
 810d944:	460a      	mov	r2, r1
 810d946:	71fb      	strb	r3, [r7, #7]
 810d948:	4613      	mov	r3, r2
 810d94a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 810d94c:	79fb      	ldrb	r3, [r7, #7]
 810d94e:	733b      	strb	r3, [r7, #12]
 810d950:	79bb      	ldrb	r3, [r7, #6]
 810d952:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810d954:	4b5a      	ldr	r3, [pc, #360]	; (810dac0 <bno055_writeData+0x184>)
 810d956:	6818      	ldr	r0, [r3, #0]
 810d958:	f107 020c 	add.w	r2, r7, #12
 810d95c:	230a      	movs	r3, #10
 810d95e:	9300      	str	r3, [sp, #0]
 810d960:	2302      	movs	r3, #2
 810d962:	2150      	movs	r1, #80	; 0x50
 810d964:	f7f7 fdec 	bl	8105540 <HAL_I2C_Master_Transmit>
 810d968:	4603      	mov	r3, r0
 810d96a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 810d96c:	7dfb      	ldrb	r3, [r7, #23]
 810d96e:	2b00      	cmp	r3, #0
 810d970:	f000 80a0 	beq.w	810dab4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 810d974:	7dfb      	ldrb	r3, [r7, #23]
 810d976:	2b01      	cmp	r3, #1
 810d978:	d103      	bne.n	810d982 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 810d97a:	4852      	ldr	r0, [pc, #328]	; (810dac4 <bno055_writeData+0x188>)
 810d97c:	f001 fac2 	bl	810ef04 <puts>
 810d980:	e012      	b.n	810d9a8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 810d982:	7dfb      	ldrb	r3, [r7, #23]
 810d984:	2b03      	cmp	r3, #3
 810d986:	d103      	bne.n	810d990 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 810d988:	484f      	ldr	r0, [pc, #316]	; (810dac8 <bno055_writeData+0x18c>)
 810d98a:	f001 fabb 	bl	810ef04 <puts>
 810d98e:	e00b      	b.n	810d9a8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 810d990:	7dfb      	ldrb	r3, [r7, #23]
 810d992:	2b02      	cmp	r3, #2
 810d994:	d103      	bne.n	810d99e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810d996:	484d      	ldr	r0, [pc, #308]	; (810dacc <bno055_writeData+0x190>)
 810d998:	f001 fab4 	bl	810ef04 <puts>
 810d99c:	e004      	b.n	810d9a8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810d99e:	7dfb      	ldrb	r3, [r7, #23]
 810d9a0:	4619      	mov	r1, r3
 810d9a2:	484b      	ldr	r0, [pc, #300]	; (810dad0 <bno055_writeData+0x194>)
 810d9a4:	f001 fa3a 	bl	810ee1c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 810d9a8:	4b45      	ldr	r3, [pc, #276]	; (810dac0 <bno055_writeData+0x184>)
 810d9aa:	681b      	ldr	r3, [r3, #0]
 810d9ac:	4618      	mov	r0, r3
 810d9ae:	f7f8 f9ed 	bl	8105d8c <HAL_I2C_GetError>
 810d9b2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810d9b4:	693b      	ldr	r3, [r7, #16]
 810d9b6:	2b00      	cmp	r3, #0
 810d9b8:	d07e      	beq.n	810dab8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810d9ba:	693b      	ldr	r3, [r7, #16]
 810d9bc:	2b01      	cmp	r3, #1
 810d9be:	d103      	bne.n	810d9c8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 810d9c0:	4844      	ldr	r0, [pc, #272]	; (810dad4 <bno055_writeData+0x198>)
 810d9c2:	f001 fa9f 	bl	810ef04 <puts>
 810d9c6:	e021      	b.n	810da0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 810d9c8:	693b      	ldr	r3, [r7, #16]
 810d9ca:	2b02      	cmp	r3, #2
 810d9cc:	d103      	bne.n	810d9d6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810d9ce:	4842      	ldr	r0, [pc, #264]	; (810dad8 <bno055_writeData+0x19c>)
 810d9d0:	f001 fa98 	bl	810ef04 <puts>
 810d9d4:	e01a      	b.n	810da0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 810d9d6:	693b      	ldr	r3, [r7, #16]
 810d9d8:	2b04      	cmp	r3, #4
 810d9da:	d103      	bne.n	810d9e4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810d9dc:	483f      	ldr	r0, [pc, #252]	; (810dadc <bno055_writeData+0x1a0>)
 810d9de:	f001 fa91 	bl	810ef04 <puts>
 810d9e2:	e013      	b.n	810da0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 810d9e4:	693b      	ldr	r3, [r7, #16]
 810d9e6:	2b08      	cmp	r3, #8
 810d9e8:	d103      	bne.n	810d9f2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810d9ea:	483d      	ldr	r0, [pc, #244]	; (810dae0 <bno055_writeData+0x1a4>)
 810d9ec:	f001 fa8a 	bl	810ef04 <puts>
 810d9f0:	e00c      	b.n	810da0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 810d9f2:	693b      	ldr	r3, [r7, #16]
 810d9f4:	2b10      	cmp	r3, #16
 810d9f6:	d103      	bne.n	810da00 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 810d9f8:	483a      	ldr	r0, [pc, #232]	; (810dae4 <bno055_writeData+0x1a8>)
 810d9fa:	f001 fa83 	bl	810ef04 <puts>
 810d9fe:	e005      	b.n	810da0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 810da00:	693b      	ldr	r3, [r7, #16]
 810da02:	2b20      	cmp	r3, #32
 810da04:	d102      	bne.n	810da0c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 810da06:	4838      	ldr	r0, [pc, #224]	; (810dae8 <bno055_writeData+0x1ac>)
 810da08:	f001 fa7c 	bl	810ef04 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810da0c:	4b2c      	ldr	r3, [pc, #176]	; (810dac0 <bno055_writeData+0x184>)
 810da0e:	681b      	ldr	r3, [r3, #0]
 810da10:	4618      	mov	r0, r3
 810da12:	f7f8 f9ad 	bl	8105d70 <HAL_I2C_GetState>
 810da16:	4603      	mov	r3, r0
 810da18:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810da1a:	7bfb      	ldrb	r3, [r7, #15]
 810da1c:	2b00      	cmp	r3, #0
 810da1e:	d103      	bne.n	810da28 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 810da20:	4832      	ldr	r0, [pc, #200]	; (810daec <bno055_writeData+0x1b0>)
 810da22:	f001 fa6f 	bl	810ef04 <puts>
 810da26:	e048      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 810da28:	7bfb      	ldrb	r3, [r7, #15]
 810da2a:	2b20      	cmp	r3, #32
 810da2c:	d103      	bne.n	810da36 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810da2e:	482f      	ldr	r0, [pc, #188]	; (810daec <bno055_writeData+0x1b0>)
 810da30:	f001 fa68 	bl	810ef04 <puts>
 810da34:	e041      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 810da36:	7bfb      	ldrb	r3, [r7, #15]
 810da38:	2b24      	cmp	r3, #36	; 0x24
 810da3a:	d103      	bne.n	810da44 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 810da3c:	482c      	ldr	r0, [pc, #176]	; (810daf0 <bno055_writeData+0x1b4>)
 810da3e:	f001 fa61 	bl	810ef04 <puts>
 810da42:	e03a      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 810da44:	7bfb      	ldrb	r3, [r7, #15]
 810da46:	2b21      	cmp	r3, #33	; 0x21
 810da48:	d103      	bne.n	810da52 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 810da4a:	482a      	ldr	r0, [pc, #168]	; (810daf4 <bno055_writeData+0x1b8>)
 810da4c:	f001 fa5a 	bl	810ef04 <puts>
 810da50:	e033      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 810da52:	7bfb      	ldrb	r3, [r7, #15]
 810da54:	2b22      	cmp	r3, #34	; 0x22
 810da56:	d103      	bne.n	810da60 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 810da58:	4827      	ldr	r0, [pc, #156]	; (810daf8 <bno055_writeData+0x1bc>)
 810da5a:	f001 fa53 	bl	810ef04 <puts>
 810da5e:	e02c      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 810da60:	7bfb      	ldrb	r3, [r7, #15]
 810da62:	2b28      	cmp	r3, #40	; 0x28
 810da64:	d103      	bne.n	810da6e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 810da66:	4825      	ldr	r0, [pc, #148]	; (810dafc <bno055_writeData+0x1c0>)
 810da68:	f001 fa4c 	bl	810ef04 <puts>
 810da6c:	e025      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 810da6e:	7bfb      	ldrb	r3, [r7, #15]
 810da70:	2b29      	cmp	r3, #41	; 0x29
 810da72:	d103      	bne.n	810da7c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 810da74:	4822      	ldr	r0, [pc, #136]	; (810db00 <bno055_writeData+0x1c4>)
 810da76:	f001 fa45 	bl	810ef04 <puts>
 810da7a:	e01e      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 810da7c:	7bfb      	ldrb	r3, [r7, #15]
 810da7e:	2b2a      	cmp	r3, #42	; 0x2a
 810da80:	d103      	bne.n	810da8a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 810da82:	4820      	ldr	r0, [pc, #128]	; (810db04 <bno055_writeData+0x1c8>)
 810da84:	f001 fa3e 	bl	810ef04 <puts>
 810da88:	e017      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810da8a:	7bfb      	ldrb	r3, [r7, #15]
 810da8c:	2b60      	cmp	r3, #96	; 0x60
 810da8e:	d103      	bne.n	810da98 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 810da90:	481d      	ldr	r0, [pc, #116]	; (810db08 <bno055_writeData+0x1cc>)
 810da92:	f001 fa37 	bl	810ef04 <puts>
 810da96:	e010      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 810da98:	7bfb      	ldrb	r3, [r7, #15]
 810da9a:	2ba0      	cmp	r3, #160	; 0xa0
 810da9c:	d103      	bne.n	810daa6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810da9e:	481b      	ldr	r0, [pc, #108]	; (810db0c <bno055_writeData+0x1d0>)
 810daa0:	f001 fa30 	bl	810ef04 <puts>
 810daa4:	e009      	b.n	810daba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 810daa6:	7bfb      	ldrb	r3, [r7, #15]
 810daa8:	2be0      	cmp	r3, #224	; 0xe0
 810daaa:	d106      	bne.n	810daba <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810daac:	4818      	ldr	r0, [pc, #96]	; (810db10 <bno055_writeData+0x1d4>)
 810daae:	f001 fa29 	bl	810ef04 <puts>
 810dab2:	e002      	b.n	810daba <bno055_writeData+0x17e>
    return;
 810dab4:	bf00      	nop
 810dab6:	e000      	b.n	810daba <bno055_writeData+0x17e>
    return;
 810dab8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810daba:	3718      	adds	r7, #24
 810dabc:	46bd      	mov	sp, r7
 810dabe:	bd80      	pop	{r7, pc}
 810dac0:	100061c8 	.word	0x100061c8
 810dac4:	08111694 	.word	0x08111694
 810dac8:	081116b8 	.word	0x081116b8
 810dacc:	081116e0 	.word	0x081116e0
 810dad0:	08111704 	.word	0x08111704
 810dad4:	0811171c 	.word	0x0811171c
 810dad8:	08111730 	.word	0x08111730
 810dadc:	08111744 	.word	0x08111744
 810dae0:	08111758 	.word	0x08111758
 810dae4:	0811176c 	.word	0x0811176c
 810dae8:	08111780 	.word	0x08111780
 810daec:	08111798 	.word	0x08111798
 810daf0:	081117b0 	.word	0x081117b0
 810daf4:	081117c4 	.word	0x081117c4
 810daf8:	081117dc 	.word	0x081117dc
 810dafc:	081117f4 	.word	0x081117f4
 810db00:	0811180c 	.word	0x0811180c
 810db04:	0811182c 	.word	0x0811182c
 810db08:	0811184c 	.word	0x0811184c
 810db0c:	08111864 	.word	0x08111864
 810db10:	0811187c 	.word	0x0811187c

0810db14 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810db14:	b580      	push	{r7, lr}
 810db16:	b084      	sub	sp, #16
 810db18:	af02      	add	r7, sp, #8
 810db1a:	4603      	mov	r3, r0
 810db1c:	6039      	str	r1, [r7, #0]
 810db1e:	71fb      	strb	r3, [r7, #7]
 810db20:	4613      	mov	r3, r2
 810db22:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810db24:	4b0b      	ldr	r3, [pc, #44]	; (810db54 <bno055_readData+0x40>)
 810db26:	6818      	ldr	r0, [r3, #0]
 810db28:	1dfa      	adds	r2, r7, #7
 810db2a:	2364      	movs	r3, #100	; 0x64
 810db2c:	9300      	str	r3, [sp, #0]
 810db2e:	2301      	movs	r3, #1
 810db30:	2150      	movs	r1, #80	; 0x50
 810db32:	f7f7 fd05 	bl	8105540 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 810db36:	4b07      	ldr	r3, [pc, #28]	; (810db54 <bno055_readData+0x40>)
 810db38:	6818      	ldr	r0, [r3, #0]
 810db3a:	79bb      	ldrb	r3, [r7, #6]
 810db3c:	b29a      	uxth	r2, r3
 810db3e:	2364      	movs	r3, #100	; 0x64
 810db40:	9300      	str	r3, [sp, #0]
 810db42:	4613      	mov	r3, r2
 810db44:	683a      	ldr	r2, [r7, #0]
 810db46:	2150      	movs	r1, #80	; 0x50
 810db48:	f7f7 fdee 	bl	8105728 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810db4c:	bf00      	nop
 810db4e:	3708      	adds	r7, #8
 810db50:	46bd      	mov	sp, r7
 810db52:	bd80      	pop	{r7, pc}
 810db54:	100061c8 	.word	0x100061c8

0810db58 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 810db58:	b480      	push	{r7}
 810db5a:	b083      	sub	sp, #12
 810db5c:	af00      	add	r7, sp, #0
 810db5e:	6078      	str	r0, [r7, #4]

}
 810db60:	bf00      	nop
 810db62:	370c      	adds	r7, #12
 810db64:	46bd      	mov	sp, r7
 810db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db6a:	4770      	bx	lr

0810db6c <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 810db6c:	b580      	push	{r7, lr}
 810db6e:	b082      	sub	sp, #8
 810db70:	af00      	add	r7, sp, #0
 810db72:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 810db74:	687b      	ldr	r3, [r7, #4]
 810db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810db78:	4618      	mov	r0, r3
 810db7a:	f7f8 fc9d 	bl	81064b8 <HAL_IWDG_Refresh>
	osDelay(100);
 810db7e:	2064      	movs	r0, #100	; 0x64
 810db80:	f7fb fcbe 	bl	8109500 <osDelay>
}
 810db84:	bf00      	nop
 810db86:	3708      	adds	r7, #8
 810db88:	46bd      	mov	sp, r7
 810db8a:	bd80      	pop	{r7, pc}

0810db8c <_ZN8BaroData8toStringEPc>:
struct BaroData {
	float temperature;
	float pressure;
	float humidity;

	char* toString(char* buffer) {
 810db8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810db90:	b086      	sub	sp, #24
 810db92:	af04      	add	r7, sp, #16
 810db94:	6078      	str	r0, [r7, #4]
 810db96:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Tmp: %f, Prs: %f, Hum: %f", temperature, pressure, humidity);
 810db98:	687b      	ldr	r3, [r7, #4]
 810db9a:	681b      	ldr	r3, [r3, #0]
 810db9c:	4618      	mov	r0, r3
 810db9e:	f7f2 fd5b 	bl	8100658 <__aeabi_f2d>
 810dba2:	4680      	mov	r8, r0
 810dba4:	4689      	mov	r9, r1
 810dba6:	687b      	ldr	r3, [r7, #4]
 810dba8:	685b      	ldr	r3, [r3, #4]
 810dbaa:	4618      	mov	r0, r3
 810dbac:	f7f2 fd54 	bl	8100658 <__aeabi_f2d>
 810dbb0:	4604      	mov	r4, r0
 810dbb2:	460d      	mov	r5, r1
 810dbb4:	687b      	ldr	r3, [r7, #4]
 810dbb6:	689b      	ldr	r3, [r3, #8]
 810dbb8:	4618      	mov	r0, r3
 810dbba:	f7f2 fd4d 	bl	8100658 <__aeabi_f2d>
 810dbbe:	4602      	mov	r2, r0
 810dbc0:	460b      	mov	r3, r1
 810dbc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810dbc6:	e9cd 4500 	strd	r4, r5, [sp]
 810dbca:	4642      	mov	r2, r8
 810dbcc:	464b      	mov	r3, r9
 810dbce:	4905      	ldr	r1, [pc, #20]	; (810dbe4 <_ZN8BaroData8toStringEPc+0x58>)
 810dbd0:	6838      	ldr	r0, [r7, #0]
 810dbd2:	f001 f9e3 	bl	810ef9c <siprintf>
		return buffer;
 810dbd6:	683b      	ldr	r3, [r7, #0]
	}
 810dbd8:	4618      	mov	r0, r3
 810dbda:	3708      	adds	r7, #8
 810dbdc:	46bd      	mov	sp, r7
 810dbde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810dbe2:	bf00      	nop
 810dbe4:	08111894 	.word	0x08111894

0810dbe8 <_ZN15BarometerThread4initEv>:
#include "Debug/Debug.h"


static char cbuf[256];

void BarometerThread::init() {
 810dbe8:	b580      	push	{r7, lr}
 810dbea:	b082      	sub	sp, #8
 810dbec:	af00      	add	r7, sp, #0
 810dbee:	6078      	str	r0, [r7, #4]
	bmp280_init_default_params(&bmp280.params);
 810dbf0:	687b      	ldr	r3, [r7, #4]
 810dbf2:	3358      	adds	r3, #88	; 0x58
 810dbf4:	4618      	mov	r0, r3
 810dbf6:	f7fe feed 	bl	810c9d4 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 810dbfa:	687b      	ldr	r3, [r7, #4]
 810dbfc:	2276      	movs	r2, #118	; 0x76
 810dbfe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	bmp280.i2c = hi2c;
 810dc02:	687b      	ldr	r3, [r7, #4]
 810dc04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 810dc06:	687b      	ldr	r3, [r7, #4]
 810dc08:	655a      	str	r2, [r3, #84]	; 0x54

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810dc0a:	687b      	ldr	r3, [r7, #4]
 810dc0c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 810dc10:	687b      	ldr	r3, [r7, #4]
 810dc12:	3358      	adds	r3, #88	; 0x58
 810dc14:	4619      	mov	r1, r3
 810dc16:	4610      	mov	r0, r2
 810dc18:	f7ff f857 	bl	810ccca <bmp280_init>
 810dc1c:	4603      	mov	r3, r0
 810dc1e:	f083 0301 	eor.w	r3, r3, #1
 810dc22:	b2db      	uxtb	r3, r3
 810dc24:	2b00      	cmp	r3, #0
 810dc26:	d008      	beq.n	810dc3a <_ZN15BarometerThread4initEv+0x52>
		console.printf("BMP280 initialization failed\n");
 810dc28:	4906      	ldr	r1, [pc, #24]	; (810dc44 <_ZN15BarometerThread4initEv+0x5c>)
 810dc2a:	4807      	ldr	r0, [pc, #28]	; (810dc48 <_ZN15BarometerThread4initEv+0x60>)
 810dc2c:	f7fe fa62 	bl	810c0f4 <_ZN7Console6printfEPKcz>
	  	osDelay(500);
 810dc30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810dc34:	f7fb fc64 	bl	8109500 <osDelay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810dc38:	e7e7      	b.n	810dc0a <_ZN15BarometerThread4initEv+0x22>
	 }
}
 810dc3a:	bf00      	nop
 810dc3c:	3708      	adds	r7, #8
 810dc3e:	46bd      	mov	sp, r7
 810dc40:	bd80      	pop	{r7, pc}
 810dc42:	bf00      	nop
 810dc44:	081118b0 	.word	0x081118b0
 810dc48:	10004b3c 	.word	0x10004b3c

0810dc4c <_ZN15BarometerThread4loopEv>:

void BarometerThread::loop() {
 810dc4c:	b590      	push	{r4, r7, lr}
 810dc4e:	b087      	sub	sp, #28
 810dc50:	af00      	add	r7, sp, #0
 810dc52:	6078      	str	r0, [r7, #4]
	BaroData data;

	bmp280_read_float(&bmp280, &data.temperature, &data.pressure, &data.humidity);
 810dc54:	687b      	ldr	r3, [r7, #4]
 810dc56:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 810dc5a:	f107 030c 	add.w	r3, r7, #12
 810dc5e:	f103 0408 	add.w	r4, r3, #8
 810dc62:	f107 030c 	add.w	r3, r7, #12
 810dc66:	1d1a      	adds	r2, r3, #4
 810dc68:	f107 010c 	add.w	r1, r7, #12
 810dc6c:	4623      	mov	r3, r4
 810dc6e:	f7ff fb81 	bl	810d374 <bmp280_read_float>

	console.printf("%s\n", data.toString(cbuf));
 810dc72:	f107 030c 	add.w	r3, r7, #12
 810dc76:	4910      	ldr	r1, [pc, #64]	; (810dcb8 <_ZN15BarometerThread4loopEv+0x6c>)
 810dc78:	4618      	mov	r0, r3
 810dc7a:	f7ff ff87 	bl	810db8c <_ZN8BaroData8toStringEPc>
 810dc7e:	4603      	mov	r3, r0
 810dc80:	461a      	mov	r2, r3
 810dc82:	490e      	ldr	r1, [pc, #56]	; (810dcbc <_ZN15BarometerThread4loopEv+0x70>)
 810dc84:	480e      	ldr	r0, [pc, #56]	; (810dcc0 <_ZN15BarometerThread4loopEv+0x74>)
 810dc86:	f7fe fa35 	bl	810c0f4 <_ZN7Console6printfEPKcz>

	writeToRtosBuffer(data);
 810dc8a:	edd7 6a03 	vldr	s13, [r7, #12]
 810dc8e:	ed97 7a04 	vldr	s14, [r7, #16]
 810dc92:	edd7 7a05 	vldr	s15, [r7, #20]
 810dc96:	eeb0 0a66 	vmov.f32	s0, s13
 810dc9a:	eef0 0a47 	vmov.f32	s1, s14
 810dc9e:	eeb0 1a67 	vmov.f32	s2, s15
 810dca2:	6878      	ldr	r0, [r7, #4]
 810dca4:	f000 f80e 	bl	810dcc4 <_ZN15BarometerThread17writeToRtosBufferE8BaroData>

	osDelay(100);
 810dca8:	2064      	movs	r0, #100	; 0x64
 810dcaa:	f7fb fc29 	bl	8109500 <osDelay>
}
 810dcae:	bf00      	nop
 810dcb0:	371c      	adds	r7, #28
 810dcb2:	46bd      	mov	sp, r7
 810dcb4:	bd90      	pop	{r4, r7, pc}
 810dcb6:	bf00      	nop
 810dcb8:	10004f8c 	.word	0x10004f8c
 810dcbc:	081118d0 	.word	0x081118d0
 810dcc0:	10004b3c 	.word	0x10004b3c

0810dcc4 <_ZN15BarometerThread17writeToRtosBufferE8BaroData>:

void BarometerThread::writeToRtosBuffer(BaroData data) {
 810dcc4:	b480      	push	{r7}
 810dcc6:	b085      	sub	sp, #20
 810dcc8:	af00      	add	r7, sp, #0
 810dcca:	60f8      	str	r0, [r7, #12]
 810dccc:	eef0 6a40 	vmov.f32	s13, s0
 810dcd0:	eeb0 7a60 	vmov.f32	s14, s1
 810dcd4:	eef0 7a41 	vmov.f32	s15, s2
 810dcd8:	edc7 6a00 	vstr	s13, [r7]
 810dcdc:	ed87 7a01 	vstr	s14, [r7, #4]
 810dce0:	edc7 7a02 	vstr	s15, [r7, #8]

}
 810dce4:	bf00      	nop
 810dce6:	3714      	adds	r7, #20
 810dce8:	46bd      	mov	sp, r7
 810dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dcee:	4770      	bx	lr

0810dcf0 <_ZN6Vector8toStringEPc>:
	char* toString(char* buffer) {
 810dcf0:	b580      	push	{r7, lr}
 810dcf2:	b084      	sub	sp, #16
 810dcf4:	af02      	add	r7, sp, #8
 810dcf6:	6078      	str	r0, [r7, #4]
 810dcf8:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "[%ld %ld %ld]", (int32_t) (1000 * x), (int32_t) (1000 * y), (int32_t) (1000 * z));
 810dcfa:	687b      	ldr	r3, [r7, #4]
 810dcfc:	edd3 7a00 	vldr	s15, [r3]
 810dd00:	ed9f 7a13 	vldr	s14, [pc, #76]	; 810dd50 <_ZN6Vector8toStringEPc+0x60>
 810dd04:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dd08:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 810dd0c:	687b      	ldr	r3, [r7, #4]
 810dd0e:	edd3 7a01 	vldr	s15, [r3, #4]
 810dd12:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 810dd50 <_ZN6Vector8toStringEPc+0x60>
 810dd16:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dd1a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 810dd1e:	687b      	ldr	r3, [r7, #4]
 810dd20:	edd3 7a02 	vldr	s15, [r3, #8]
 810dd24:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 810dd50 <_ZN6Vector8toStringEPc+0x60>
 810dd28:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dd2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810dd30:	ee17 3a90 	vmov	r3, s15
 810dd34:	9300      	str	r3, [sp, #0]
 810dd36:	ee16 3a10 	vmov	r3, s12
 810dd3a:	ee16 2a90 	vmov	r2, s13
 810dd3e:	4905      	ldr	r1, [pc, #20]	; (810dd54 <_ZN6Vector8toStringEPc+0x64>)
 810dd40:	6838      	ldr	r0, [r7, #0]
 810dd42:	f001 f92b 	bl	810ef9c <siprintf>
		return buffer;
 810dd46:	683b      	ldr	r3, [r7, #0]
	}
 810dd48:	4618      	mov	r0, r3
 810dd4a:	3708      	adds	r7, #8
 810dd4c:	46bd      	mov	sp, r7
 810dd4e:	bd80      	pop	{r7, pc}
 810dd50:	447a0000 	.word	0x447a0000
 810dd54:	081118d4 	.word	0x081118d4

0810dd58 <_ZN7IMUData8toStringEPc>:
	char* toString(char* buffer) {
 810dd58:	b5b0      	push	{r4, r5, r7, lr}
 810dd5a:	b084      	sub	sp, #16
 810dd5c:	af02      	add	r7, sp, #8
 810dd5e:	6078      	str	r0, [r7, #4]
 810dd60:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Accel: %s, Gyro: %s, Mag: %s", accel.toString(buf), gyro.toString(buf + 32), mag.toString(buf + 64));
 810dd62:	687b      	ldr	r3, [r7, #4]
 810dd64:	4910      	ldr	r1, [pc, #64]	; (810dda8 <_ZN7IMUData8toStringEPc+0x50>)
 810dd66:	4618      	mov	r0, r3
 810dd68:	f7ff ffc2 	bl	810dcf0 <_ZN6Vector8toStringEPc>
 810dd6c:	4604      	mov	r4, r0
 810dd6e:	687b      	ldr	r3, [r7, #4]
 810dd70:	330c      	adds	r3, #12
 810dd72:	4a0e      	ldr	r2, [pc, #56]	; (810ddac <_ZN7IMUData8toStringEPc+0x54>)
 810dd74:	4611      	mov	r1, r2
 810dd76:	4618      	mov	r0, r3
 810dd78:	f7ff ffba 	bl	810dcf0 <_ZN6Vector8toStringEPc>
 810dd7c:	4605      	mov	r5, r0
 810dd7e:	687b      	ldr	r3, [r7, #4]
 810dd80:	3318      	adds	r3, #24
 810dd82:	4a0b      	ldr	r2, [pc, #44]	; (810ddb0 <_ZN7IMUData8toStringEPc+0x58>)
 810dd84:	4611      	mov	r1, r2
 810dd86:	4618      	mov	r0, r3
 810dd88:	f7ff ffb2 	bl	810dcf0 <_ZN6Vector8toStringEPc>
 810dd8c:	4603      	mov	r3, r0
 810dd8e:	9300      	str	r3, [sp, #0]
 810dd90:	462b      	mov	r3, r5
 810dd92:	4622      	mov	r2, r4
 810dd94:	4907      	ldr	r1, [pc, #28]	; (810ddb4 <_ZN7IMUData8toStringEPc+0x5c>)
 810dd96:	6838      	ldr	r0, [r7, #0]
 810dd98:	f001 f900 	bl	810ef9c <siprintf>
		return buffer;
 810dd9c:	683b      	ldr	r3, [r7, #0]
	}
 810dd9e:	4618      	mov	r0, r3
 810dda0:	3708      	adds	r7, #8
 810dda2:	46bd      	mov	sp, r7
 810dda4:	bdb0      	pop	{r4, r5, r7, pc}
 810dda6:	bf00      	nop
 810dda8:	1000508c 	.word	0x1000508c
 810ddac:	100050ac 	.word	0x100050ac
 810ddb0:	100050cc 	.word	0x100050cc
 810ddb4:	081118e4 	.word	0x081118e4

0810ddb8 <_ZN9IMUThread4initEv>:

#include "Debug/Debug.h"

static char cbuf[256];

void IMUThread::init() {
 810ddb8:	b580      	push	{r7, lr}
 810ddba:	b082      	sub	sp, #8
 810ddbc:	af00      	add	r7, sp, #0
 810ddbe:	6078      	str	r0, [r7, #4]
	bno055_assignI2C(this->hi2c);
 810ddc0:	687b      	ldr	r3, [r7, #4]
 810ddc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ddc4:	4618      	mov	r0, r3
 810ddc6:	f7ff fd9d 	bl	810d904 <bno055_assignI2C>
	bno055_setup();
 810ddca:	f7ff fb5f 	bl	810d48c <bno055_setup>
	bno055_setOperationModeNDOF();
 810ddce:	f7ff fb4a 	bl	810d466 <bno055_setOperationModeNDOF>

	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810ddd2:	f7ff fb78 	bl	810d4c6 <bno055_getSystemError>
 810ddd6:	4603      	mov	r3, r0
 810ddd8:	2b00      	cmp	r3, #0
 810ddda:	bf14      	ite	ne
 810dddc:	2301      	movne	r3, #1
 810ddde:	2300      	moveq	r3, #0
 810dde0:	b2db      	uxtb	r3, r3
 810dde2:	2b00      	cmp	r3, #0
 810dde4:	d011      	beq.n	810de0a <_ZN9IMUThread4initEv+0x52>
		osDelay(500);
 810dde6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810ddea:	f7fb fb89 	bl	8109500 <osDelay>
		console.printf("BNO055 initialization failed\n");
 810ddee:	4909      	ldr	r1, [pc, #36]	; (810de14 <_ZN9IMUThread4initEv+0x5c>)
 810ddf0:	4809      	ldr	r0, [pc, #36]	; (810de18 <_ZN9IMUThread4initEv+0x60>)
 810ddf2:	f7fe f97f 	bl	810c0f4 <_ZN7Console6printfEPKcz>

		bno055_assignI2C(this->hi2c);
 810ddf6:	687b      	ldr	r3, [r7, #4]
 810ddf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ddfa:	4618      	mov	r0, r3
 810ddfc:	f7ff fd82 	bl	810d904 <bno055_assignI2C>
		bno055_setup();
 810de00:	f7ff fb44 	bl	810d48c <bno055_setup>
		bno055_setOperationModeNDOF();
 810de04:	f7ff fb2f 	bl	810d466 <bno055_setOperationModeNDOF>
	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810de08:	e7e3      	b.n	810ddd2 <_ZN9IMUThread4initEv+0x1a>
	}
}
 810de0a:	bf00      	nop
 810de0c:	3708      	adds	r7, #8
 810de0e:	46bd      	mov	sp, r7
 810de10:	bd80      	pop	{r7, pc}
 810de12:	bf00      	nop
 810de14:	08111904 	.word	0x08111904
 810de18:	10004b3c 	.word	0x10004b3c

0810de1c <_ZN9IMUThread4loopEv>:

void IMUThread::loop() {
 810de1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810de1e:	b0a1      	sub	sp, #132	; 0x84
 810de20:	af06      	add	r7, sp, #24
 810de22:	6078      	str	r0, [r7, #4]
	static IMUData data;

	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 810de24:	f7ff fca4 	bl	810d770 <bno055_getVectorAccelerometer>
 810de28:	eeb0 4a40 	vmov.f32	s8, s0
 810de2c:	eef0 4a60 	vmov.f32	s9, s1
 810de30:	eeb0 5a41 	vmov.f32	s10, s2
 810de34:	eef0 5a61 	vmov.f32	s11, s3
 810de38:	eeb0 6a42 	vmov.f32	s12, s4
 810de3c:	eef0 6a62 	vmov.f32	s13, s5
 810de40:	eeb0 7a43 	vmov.f32	s14, s6
 810de44:	eef0 7a63 	vmov.f32	s15, s7
 810de48:	ed87 4b02 	vstr	d4, [r7, #8]
 810de4c:	ed87 5b04 	vstr	d5, [r7, #16]
 810de50:	ed87 6b06 	vstr	d6, [r7, #24]
 810de54:	ed87 7b08 	vstr	d7, [r7, #32]
 810de58:	4c65      	ldr	r4, [pc, #404]	; (810dff0 <_ZN9IMUThread4loopEv+0x1d4>)
 810de5a:	ed97 4b02 	vldr	d4, [r7, #8]
 810de5e:	ed97 5b04 	vldr	d5, [r7, #16]
 810de62:	ed97 6b06 	vldr	d6, [r7, #24]
 810de66:	ed97 7b08 	vldr	d7, [r7, #32]
 810de6a:	eeb0 0a44 	vmov.f32	s0, s8
 810de6e:	eef0 0a64 	vmov.f32	s1, s9
 810de72:	eeb0 1a45 	vmov.f32	s2, s10
 810de76:	eef0 1a65 	vmov.f32	s3, s11
 810de7a:	eeb0 2a46 	vmov.f32	s4, s12
 810de7e:	eef0 2a66 	vmov.f32	s5, s13
 810de82:	eeb0 3a47 	vmov.f32	s6, s14
 810de86:	eef0 3a67 	vmov.f32	s7, s15
 810de8a:	6878      	ldr	r0, [r7, #4]
 810de8c:	f000 f8c8 	bl	810e020 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810de90:	eef0 6a40 	vmov.f32	s13, s0
 810de94:	eeb0 7a60 	vmov.f32	s14, s1
 810de98:	eef0 7a41 	vmov.f32	s15, s2
 810de9c:	edc4 6a00 	vstr	s13, [r4]
 810dea0:	ed84 7a01 	vstr	s14, [r4, #4]
 810dea4:	edc4 7a02 	vstr	s15, [r4, #8]
	data.gyro = bnoVectorToVector(bno055_getVectorEuler());
 810dea8:	f7ff fca5 	bl	810d7f6 <bno055_getVectorEuler>
 810deac:	eeb0 4a40 	vmov.f32	s8, s0
 810deb0:	eef0 4a60 	vmov.f32	s9, s1
 810deb4:	eeb0 5a41 	vmov.f32	s10, s2
 810deb8:	eef0 5a61 	vmov.f32	s11, s3
 810debc:	eeb0 6a42 	vmov.f32	s12, s4
 810dec0:	eef0 6a62 	vmov.f32	s13, s5
 810dec4:	eeb0 7a43 	vmov.f32	s14, s6
 810dec8:	eef0 7a63 	vmov.f32	s15, s7
 810decc:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 810ded0:	ed87 5b0c 	vstr	d5, [r7, #48]	; 0x30
 810ded4:	ed87 6b0e 	vstr	d6, [r7, #56]	; 0x38
 810ded8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 810dedc:	4c44      	ldr	r4, [pc, #272]	; (810dff0 <_ZN9IMUThread4loopEv+0x1d4>)
 810dede:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 810dee2:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 810dee6:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 810deea:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 810deee:	eeb0 0a44 	vmov.f32	s0, s8
 810def2:	eef0 0a64 	vmov.f32	s1, s9
 810def6:	eeb0 1a45 	vmov.f32	s2, s10
 810defa:	eef0 1a65 	vmov.f32	s3, s11
 810defe:	eeb0 2a46 	vmov.f32	s4, s12
 810df02:	eef0 2a66 	vmov.f32	s5, s13
 810df06:	eeb0 3a47 	vmov.f32	s6, s14
 810df0a:	eef0 3a67 	vmov.f32	s7, s15
 810df0e:	6878      	ldr	r0, [r7, #4]
 810df10:	f000 f886 	bl	810e020 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810df14:	eef0 6a40 	vmov.f32	s13, s0
 810df18:	eeb0 7a60 	vmov.f32	s14, s1
 810df1c:	eef0 7a41 	vmov.f32	s15, s2
 810df20:	edc4 6a03 	vstr	s13, [r4, #12]
 810df24:	ed84 7a04 	vstr	s14, [r4, #16]
 810df28:	edc4 7a05 	vstr	s15, [r4, #20]
	data.mag = bnoVectorToVector(bno055_getVectorGravity());
 810df2c:	f7ff fca6 	bl	810d87c <bno055_getVectorGravity>
 810df30:	eeb0 4a40 	vmov.f32	s8, s0
 810df34:	eef0 4a60 	vmov.f32	s9, s1
 810df38:	eeb0 5a41 	vmov.f32	s10, s2
 810df3c:	eef0 5a61 	vmov.f32	s11, s3
 810df40:	eeb0 6a42 	vmov.f32	s12, s4
 810df44:	eef0 6a62 	vmov.f32	s13, s5
 810df48:	eeb0 7a43 	vmov.f32	s14, s6
 810df4c:	eef0 7a63 	vmov.f32	s15, s7
 810df50:	ed87 4b12 	vstr	d4, [r7, #72]	; 0x48
 810df54:	ed87 5b14 	vstr	d5, [r7, #80]	; 0x50
 810df58:	ed87 6b16 	vstr	d6, [r7, #88]	; 0x58
 810df5c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 810df60:	4c23      	ldr	r4, [pc, #140]	; (810dff0 <_ZN9IMUThread4loopEv+0x1d4>)
 810df62:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 810df66:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 810df6a:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 810df6e:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 810df72:	eeb0 0a44 	vmov.f32	s0, s8
 810df76:	eef0 0a64 	vmov.f32	s1, s9
 810df7a:	eeb0 1a45 	vmov.f32	s2, s10
 810df7e:	eef0 1a65 	vmov.f32	s3, s11
 810df82:	eeb0 2a46 	vmov.f32	s4, s12
 810df86:	eef0 2a66 	vmov.f32	s5, s13
 810df8a:	eeb0 3a47 	vmov.f32	s6, s14
 810df8e:	eef0 3a67 	vmov.f32	s7, s15
 810df92:	6878      	ldr	r0, [r7, #4]
 810df94:	f000 f844 	bl	810e020 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810df98:	eef0 6a40 	vmov.f32	s13, s0
 810df9c:	eeb0 7a60 	vmov.f32	s14, s1
 810dfa0:	eef0 7a41 	vmov.f32	s15, s2
 810dfa4:	edc4 6a06 	vstr	s13, [r4, #24]
 810dfa8:	ed84 7a07 	vstr	s14, [r4, #28]
 810dfac:	edc4 7a08 	vstr	s15, [r4, #32]

	console.printf("%s\n", data.toString(cbuf));
 810dfb0:	4910      	ldr	r1, [pc, #64]	; (810dff4 <_ZN9IMUThread4loopEv+0x1d8>)
 810dfb2:	480f      	ldr	r0, [pc, #60]	; (810dff0 <_ZN9IMUThread4loopEv+0x1d4>)
 810dfb4:	f7ff fed0 	bl	810dd58 <_ZN7IMUData8toStringEPc>
 810dfb8:	4603      	mov	r3, r0
 810dfba:	461a      	mov	r2, r3
 810dfbc:	490e      	ldr	r1, [pc, #56]	; (810dff8 <_ZN9IMUThread4loopEv+0x1dc>)
 810dfbe:	480f      	ldr	r0, [pc, #60]	; (810dffc <_ZN9IMUThread4loopEv+0x1e0>)
 810dfc0:	f7fe f898 	bl	810c0f4 <_ZN7Console6printfEPKcz>

	writeToRtosBuffer(data); //envoyer à un autre thread pour etre envoyé par ethernet
 810dfc4:	4e0a      	ldr	r6, [pc, #40]	; (810dff0 <_ZN9IMUThread4loopEv+0x1d4>)
 810dfc6:	466d      	mov	r5, sp
 810dfc8:	f106 040c 	add.w	r4, r6, #12
 810dfcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810dfce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810dfd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 810dfd4:	e885 0003 	stmia.w	r5, {r0, r1}
 810dfd8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 810dfdc:	6878      	ldr	r0, [r7, #4]
 810dfde:	f000 f80f 	bl	810e000 <_ZN9IMUThread17writeToRtosBufferE7IMUData>

	osDelay(100);
 810dfe2:	2064      	movs	r0, #100	; 0x64
 810dfe4:	f7fb fa8c 	bl	8109500 <osDelay>
}
 810dfe8:	bf00      	nop
 810dfea:	376c      	adds	r7, #108	; 0x6c
 810dfec:	46bd      	mov	sp, r7
 810dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810dff0:	100051ec 	.word	0x100051ec
 810dff4:	100050ec 	.word	0x100050ec
 810dff8:	08111924 	.word	0x08111924
 810dffc:	10004b3c 	.word	0x10004b3c

0810e000 <_ZN9IMUThread17writeToRtosBufferE7IMUData>:

void IMUThread::writeToRtosBuffer(IMUData data) {
 810e000:	b084      	sub	sp, #16
 810e002:	b480      	push	{r7}
 810e004:	b083      	sub	sp, #12
 810e006:	af00      	add	r7, sp, #0
 810e008:	6078      	str	r0, [r7, #4]
 810e00a:	f107 0014 	add.w	r0, r7, #20
 810e00e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

}
 810e012:	bf00      	nop
 810e014:	370c      	adds	r7, #12
 810e016:	46bd      	mov	sp, r7
 810e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e01c:	b004      	add	sp, #16
 810e01e:	4770      	bx	lr

0810e020 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>:

Vector IMUThread::bnoVectorToVector(bno055_vector_t v) {
 810e020:	b590      	push	{r4, r7, lr}
 810e022:	b095      	sub	sp, #84	; 0x54
 810e024:	af00      	add	r7, sp, #0
 810e026:	6378      	str	r0, [r7, #52]	; 0x34
 810e028:	eeb0 4a40 	vmov.f32	s8, s0
 810e02c:	eef0 4a60 	vmov.f32	s9, s1
 810e030:	eeb0 5a41 	vmov.f32	s10, s2
 810e034:	eef0 5a61 	vmov.f32	s11, s3
 810e038:	eeb0 6a42 	vmov.f32	s12, s4
 810e03c:	eef0 6a62 	vmov.f32	s13, s5
 810e040:	eeb0 7a43 	vmov.f32	s14, s6
 810e044:	eef0 7a63 	vmov.f32	s15, s7
 810e048:	ed87 4b04 	vstr	d4, [r7, #16]
 810e04c:	ed87 5b06 	vstr	d5, [r7, #24]
 810e050:	ed87 6b08 	vstr	d6, [r7, #32]
 810e054:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	Vector vector;

	vector.x = v.x;
 810e058:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810e05c:	4618      	mov	r0, r3
 810e05e:	4621      	mov	r1, r4
 810e060:	f7f2 fe2a 	bl	8100cb8 <__aeabi_d2f>
 810e064:	4603      	mov	r3, r0
 810e066:	63bb      	str	r3, [r7, #56]	; 0x38
	vector.y = v.y;
 810e068:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810e06c:	4618      	mov	r0, r3
 810e06e:	4621      	mov	r1, r4
 810e070:	f7f2 fe22 	bl	8100cb8 <__aeabi_d2f>
 810e074:	4603      	mov	r3, r0
 810e076:	63fb      	str	r3, [r7, #60]	; 0x3c
	vector.z = v.z;
 810e078:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 810e07c:	4618      	mov	r0, r3
 810e07e:	4621      	mov	r1, r4
 810e080:	f7f2 fe1a 	bl	8100cb8 <__aeabi_d2f>
 810e084:	4603      	mov	r3, r0
 810e086:	643b      	str	r3, [r7, #64]	; 0x40

	return vector;
 810e088:	f107 0344 	add.w	r3, r7, #68	; 0x44
 810e08c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 810e090:	ca07      	ldmia	r2, {r0, r1, r2}
 810e092:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810e096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810e098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810e09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810e09c:	ee06 1a90 	vmov	s13, r1
 810e0a0:	ee07 2a10 	vmov	s14, r2
 810e0a4:	ee07 3a90 	vmov	s15, r3
}
 810e0a8:	eeb0 0a66 	vmov.f32	s0, s13
 810e0ac:	eef0 0a47 	vmov.f32	s1, s14
 810e0b0:	eeb0 1a67 	vmov.f32	s2, s15
 810e0b4:	3754      	adds	r7, #84	; 0x54
 810e0b6:	46bd      	mov	sp, r7
 810e0b8:	bd90      	pop	{r4, r7, pc}
	...

0810e0bc <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority_t priority, uint32_t stackSize);
	~Thread() {};
 810e0bc:	b480      	push	{r7}
 810e0be:	b083      	sub	sp, #12
 810e0c0:	af00      	add	r7, sp, #0
 810e0c2:	6078      	str	r0, [r7, #4]
 810e0c4:	4a04      	ldr	r2, [pc, #16]	; (810e0d8 <_ZN6ThreadD1Ev+0x1c>)
 810e0c6:	687b      	ldr	r3, [r7, #4]
 810e0c8:	601a      	str	r2, [r3, #0]
 810e0ca:	687b      	ldr	r3, [r7, #4]
 810e0cc:	4618      	mov	r0, r3
 810e0ce:	370c      	adds	r7, #12
 810e0d0:	46bd      	mov	sp, r7
 810e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0d6:	4770      	bx	lr
 810e0d8:	081119bc 	.word	0x081119bc

0810e0dc <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 810e0dc:	b580      	push	{r7, lr}
 810e0de:	b082      	sub	sp, #8
 810e0e0:	af00      	add	r7, sp, #0
 810e0e2:	6078      	str	r0, [r7, #4]
 810e0e4:	6039      	str	r1, [r7, #0]
 810e0e6:	687b      	ldr	r3, [r7, #4]
 810e0e8:	4907      	ldr	r1, [pc, #28]	; (810e108 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 810e0ea:	4618      	mov	r0, r3
 810e0ec:	f000 f980 	bl	810e3f0 <_ZN6ThreadC1EPKc>
 810e0f0:	4a06      	ldr	r2, [pc, #24]	; (810e10c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 810e0f2:	687b      	ldr	r3, [r7, #4]
 810e0f4:	601a      	str	r2, [r3, #0]
 810e0f6:	687b      	ldr	r3, [r7, #4]
 810e0f8:	683a      	ldr	r2, [r7, #0]
 810e0fa:	62da      	str	r2, [r3, #44]	; 0x2c
 810e0fc:	687b      	ldr	r3, [r7, #4]
 810e0fe:	4618      	mov	r0, r3
 810e100:	3708      	adds	r7, #8
 810e102:	46bd      	mov	sp, r7
 810e104:	bd80      	pop	{r7, pc}
 810e106:	bf00      	nop
 810e108:	08111928 	.word	0x08111928
 810e10c:	0811198c 	.word	0x0811198c

0810e110 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>:
#include "Libraries/bmp280.h"


class BarometerThread : Thread {
public:
	BarometerThread(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef* huart) : Thread("Barometer"), bmp280(), hi2c(hi2c), huart(huart)  {}
 810e110:	b580      	push	{r7, lr}
 810e112:	b084      	sub	sp, #16
 810e114:	af00      	add	r7, sp, #0
 810e116:	60f8      	str	r0, [r7, #12]
 810e118:	60b9      	str	r1, [r7, #8]
 810e11a:	607a      	str	r2, [r7, #4]
 810e11c:	68fb      	ldr	r3, [r7, #12]
 810e11e:	490c      	ldr	r1, [pc, #48]	; (810e150 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x40>)
 810e120:	4618      	mov	r0, r3
 810e122:	f000 f965 	bl	810e3f0 <_ZN6ThreadC1EPKc>
 810e126:	4a0b      	ldr	r2, [pc, #44]	; (810e154 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x44>)
 810e128:	68fb      	ldr	r3, [r7, #12]
 810e12a:	601a      	str	r2, [r3, #0]
 810e12c:	68fb      	ldr	r3, [r7, #12]
 810e12e:	332c      	adds	r3, #44	; 0x2c
 810e130:	2234      	movs	r2, #52	; 0x34
 810e132:	2100      	movs	r1, #0
 810e134:	4618      	mov	r0, r3
 810e136:	f000 fa0c 	bl	810e552 <memset>
 810e13a:	68fb      	ldr	r3, [r7, #12]
 810e13c:	68ba      	ldr	r2, [r7, #8]
 810e13e:	661a      	str	r2, [r3, #96]	; 0x60
 810e140:	68fb      	ldr	r3, [r7, #12]
 810e142:	687a      	ldr	r2, [r7, #4]
 810e144:	665a      	str	r2, [r3, #100]	; 0x64
 810e146:	68fb      	ldr	r3, [r7, #12]
 810e148:	4618      	mov	r0, r3
 810e14a:	3710      	adds	r7, #16
 810e14c:	46bd      	mov	sp, r7
 810e14e:	bd80      	pop	{r7, pc}
 810e150:	08111934 	.word	0x08111934
 810e154:	0811199c 	.word	0x0811199c

0810e158 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>:
#include "Libraries/bno055_stm32.h"
#include "Libraries/bno055.h"

class IMUThread : Thread {
public:
	IMUThread(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef* huart) : Thread("IMU"), hi2c(hi2c), huart(huart) {}
 810e158:	b580      	push	{r7, lr}
 810e15a:	b084      	sub	sp, #16
 810e15c:	af00      	add	r7, sp, #0
 810e15e:	60f8      	str	r0, [r7, #12]
 810e160:	60b9      	str	r1, [r7, #8]
 810e162:	607a      	str	r2, [r7, #4]
 810e164:	68fb      	ldr	r3, [r7, #12]
 810e166:	4909      	ldr	r1, [pc, #36]	; (810e18c <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x34>)
 810e168:	4618      	mov	r0, r3
 810e16a:	f000 f941 	bl	810e3f0 <_ZN6ThreadC1EPKc>
 810e16e:	4a08      	ldr	r2, [pc, #32]	; (810e190 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x38>)
 810e170:	68fb      	ldr	r3, [r7, #12]
 810e172:	601a      	str	r2, [r3, #0]
 810e174:	68fb      	ldr	r3, [r7, #12]
 810e176:	68ba      	ldr	r2, [r7, #8]
 810e178:	62da      	str	r2, [r3, #44]	; 0x2c
 810e17a:	68fb      	ldr	r3, [r7, #12]
 810e17c:	687a      	ldr	r2, [r7, #4]
 810e17e:	631a      	str	r2, [r3, #48]	; 0x30
 810e180:	68fb      	ldr	r3, [r7, #12]
 810e182:	4618      	mov	r0, r3
 810e184:	3710      	adds	r7, #16
 810e186:	46bd      	mov	sp, r7
 810e188:	bd80      	pop	{r7, pc}
 810e18a:	bf00      	nop
 810e18c:	08111940 	.word	0x08111940
 810e190:	081119ac 	.word	0x081119ac

0810e194 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 810e194:	b580      	push	{r7, lr}
 810e196:	b082      	sub	sp, #8
 810e198:	af00      	add	r7, sp, #0
 810e19a:	6078      	str	r0, [r7, #4]
 810e19c:	4a05      	ldr	r2, [pc, #20]	; (810e1b4 <_ZN14WatchdogThreadD1Ev+0x20>)
 810e19e:	687b      	ldr	r3, [r7, #4]
 810e1a0:	601a      	str	r2, [r3, #0]
 810e1a2:	687b      	ldr	r3, [r7, #4]
 810e1a4:	4618      	mov	r0, r3
 810e1a6:	f7ff ff89 	bl	810e0bc <_ZN6ThreadD1Ev>
 810e1aa:	687b      	ldr	r3, [r7, #4]
 810e1ac:	4618      	mov	r0, r3
 810e1ae:	3708      	adds	r7, #8
 810e1b0:	46bd      	mov	sp, r7
 810e1b2:	bd80      	pop	{r7, pc}
 810e1b4:	0811198c 	.word	0x0811198c

0810e1b8 <__tcf_0>:
#include "usart.h"


#ifdef CORE_CM4
void initCortexM4() {
	static WatchdogThread watchdog(&hiwdg2);
 810e1b8:	b580      	push	{r7, lr}
 810e1ba:	af00      	add	r7, sp, #0
 810e1bc:	4801      	ldr	r0, [pc, #4]	; (810e1c4 <__tcf_0+0xc>)
 810e1be:	f7ff ffe9 	bl	810e194 <_ZN14WatchdogThreadD1Ev>
 810e1c2:	bd80      	pop	{r7, pc}
 810e1c4:	10005210 	.word	0x10005210

0810e1c8 <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 512



class Shell : public Thread {
 810e1c8:	b580      	push	{r7, lr}
 810e1ca:	b082      	sub	sp, #8
 810e1cc:	af00      	add	r7, sp, #0
 810e1ce:	6078      	str	r0, [r7, #4]
 810e1d0:	4a05      	ldr	r2, [pc, #20]	; (810e1e8 <_ZN5ShellD1Ev+0x20>)
 810e1d2:	687b      	ldr	r3, [r7, #4]
 810e1d4:	601a      	str	r2, [r3, #0]
 810e1d6:	687b      	ldr	r3, [r7, #4]
 810e1d8:	4618      	mov	r0, r3
 810e1da:	f7ff ff6f 	bl	810e0bc <_ZN6ThreadD1Ev>
 810e1de:	687b      	ldr	r3, [r7, #4]
 810e1e0:	4618      	mov	r0, r3
 810e1e2:	3708      	adds	r7, #8
 810e1e4:	46bd      	mov	sp, r7
 810e1e6:	bd80      	pop	{r7, pc}
 810e1e8:	0811197c 	.word	0x0811197c

0810e1ec <__tcf_1>:
	static Shell shell(&huart3, &terminal);
 810e1ec:	b580      	push	{r7, lr}
 810e1ee:	af00      	add	r7, sp, #0
 810e1f0:	4801      	ldr	r0, [pc, #4]	; (810e1f8 <__tcf_1+0xc>)
 810e1f2:	f7ff ffe9 	bl	810e1c8 <_ZN5ShellD1Ev>
 810e1f6:	bd80      	pop	{r7, pc}
 810e1f8:	10005244 	.word	0x10005244

0810e1fc <_ZN9IMUThreadD1Ev>:
class IMUThread : Thread {
 810e1fc:	b580      	push	{r7, lr}
 810e1fe:	b082      	sub	sp, #8
 810e200:	af00      	add	r7, sp, #0
 810e202:	6078      	str	r0, [r7, #4]
 810e204:	4a05      	ldr	r2, [pc, #20]	; (810e21c <_ZN9IMUThreadD1Ev+0x20>)
 810e206:	687b      	ldr	r3, [r7, #4]
 810e208:	601a      	str	r2, [r3, #0]
 810e20a:	687b      	ldr	r3, [r7, #4]
 810e20c:	4618      	mov	r0, r3
 810e20e:	f7ff ff55 	bl	810e0bc <_ZN6ThreadD1Ev>
 810e212:	687b      	ldr	r3, [r7, #4]
 810e214:	4618      	mov	r0, r3
 810e216:	3708      	adds	r7, #8
 810e218:	46bd      	mov	sp, r7
 810e21a:	bd80      	pop	{r7, pc}
 810e21c:	081119ac 	.word	0x081119ac

0810e220 <__tcf_2>:
	static IMUThread imu(&hi2c1, &huart3);
 810e220:	b580      	push	{r7, lr}
 810e222:	af00      	add	r7, sp, #0
 810e224:	4801      	ldr	r0, [pc, #4]	; (810e22c <__tcf_2+0xc>)
 810e226:	f7ff ffe9 	bl	810e1fc <_ZN9IMUThreadD1Ev>
 810e22a:	bd80      	pop	{r7, pc}
 810e22c:	100056cc 	.word	0x100056cc

0810e230 <_ZN15BarometerThreadD1Ev>:
class BarometerThread : Thread {
 810e230:	b580      	push	{r7, lr}
 810e232:	b082      	sub	sp, #8
 810e234:	af00      	add	r7, sp, #0
 810e236:	6078      	str	r0, [r7, #4]
 810e238:	4a05      	ldr	r2, [pc, #20]	; (810e250 <_ZN15BarometerThreadD1Ev+0x20>)
 810e23a:	687b      	ldr	r3, [r7, #4]
 810e23c:	601a      	str	r2, [r3, #0]
 810e23e:	687b      	ldr	r3, [r7, #4]
 810e240:	4618      	mov	r0, r3
 810e242:	f7ff ff3b 	bl	810e0bc <_ZN6ThreadD1Ev>
 810e246:	687b      	ldr	r3, [r7, #4]
 810e248:	4618      	mov	r0, r3
 810e24a:	3708      	adds	r7, #8
 810e24c:	46bd      	mov	sp, r7
 810e24e:	bd80      	pop	{r7, pc}
 810e250:	0811199c 	.word	0x0811199c

0810e254 <__tcf_3>:
	static BarometerThread barometer(&hi2c1, &huart3);
 810e254:	b580      	push	{r7, lr}
 810e256:	af00      	add	r7, sp, #0
 810e258:	4801      	ldr	r0, [pc, #4]	; (810e260 <__tcf_3+0xc>)
 810e25a:	f7ff ffe9 	bl	810e230 <_ZN15BarometerThreadD1Ev>
 810e25e:	bd80      	pop	{r7, pc}
 810e260:	10005704 	.word	0x10005704

0810e264 <initCortexM4>:
void initCortexM4() {
 810e264:	b580      	push	{r7, lr}
 810e266:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg2);
 810e268:	4b48      	ldr	r3, [pc, #288]	; (810e38c <initCortexM4+0x128>)
 810e26a:	781b      	ldrb	r3, [r3, #0]
 810e26c:	f3bf 8f5b 	dmb	ish
 810e270:	b2db      	uxtb	r3, r3
 810e272:	f003 0301 	and.w	r3, r3, #1
 810e276:	2b00      	cmp	r3, #0
 810e278:	bf0c      	ite	eq
 810e27a:	2301      	moveq	r3, #1
 810e27c:	2300      	movne	r3, #0
 810e27e:	b2db      	uxtb	r3, r3
 810e280:	2b00      	cmp	r3, #0
 810e282:	d014      	beq.n	810e2ae <initCortexM4+0x4a>
 810e284:	4841      	ldr	r0, [pc, #260]	; (810e38c <initCortexM4+0x128>)
 810e286:	f000 f8fb 	bl	810e480 <__cxa_guard_acquire>
 810e28a:	4603      	mov	r3, r0
 810e28c:	2b00      	cmp	r3, #0
 810e28e:	bf14      	ite	ne
 810e290:	2301      	movne	r3, #1
 810e292:	2300      	moveq	r3, #0
 810e294:	b2db      	uxtb	r3, r3
 810e296:	2b00      	cmp	r3, #0
 810e298:	d009      	beq.n	810e2ae <initCortexM4+0x4a>
 810e29a:	493d      	ldr	r1, [pc, #244]	; (810e390 <initCortexM4+0x12c>)
 810e29c:	483d      	ldr	r0, [pc, #244]	; (810e394 <initCortexM4+0x130>)
 810e29e:	f7ff ff1d 	bl	810e0dc <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 810e2a2:	483a      	ldr	r0, [pc, #232]	; (810e38c <initCortexM4+0x128>)
 810e2a4:	f000 f8f8 	bl	810e498 <__cxa_guard_release>
 810e2a8:	483b      	ldr	r0, [pc, #236]	; (810e398 <initCortexM4+0x134>)
 810e2aa:	f000 f913 	bl	810e4d4 <atexit>
	static Shell shell(&huart3, &terminal);
 810e2ae:	4b3b      	ldr	r3, [pc, #236]	; (810e39c <initCortexM4+0x138>)
 810e2b0:	781b      	ldrb	r3, [r3, #0]
 810e2b2:	f3bf 8f5b 	dmb	ish
 810e2b6:	b2db      	uxtb	r3, r3
 810e2b8:	f003 0301 	and.w	r3, r3, #1
 810e2bc:	2b00      	cmp	r3, #0
 810e2be:	bf0c      	ite	eq
 810e2c0:	2301      	moveq	r3, #1
 810e2c2:	2300      	movne	r3, #0
 810e2c4:	b2db      	uxtb	r3, r3
 810e2c6:	2b00      	cmp	r3, #0
 810e2c8:	d015      	beq.n	810e2f6 <initCortexM4+0x92>
 810e2ca:	4834      	ldr	r0, [pc, #208]	; (810e39c <initCortexM4+0x138>)
 810e2cc:	f000 f8d8 	bl	810e480 <__cxa_guard_acquire>
 810e2d0:	4603      	mov	r3, r0
 810e2d2:	2b00      	cmp	r3, #0
 810e2d4:	bf14      	ite	ne
 810e2d6:	2301      	movne	r3, #1
 810e2d8:	2300      	moveq	r3, #0
 810e2da:	b2db      	uxtb	r3, r3
 810e2dc:	2b00      	cmp	r3, #0
 810e2de:	d00a      	beq.n	810e2f6 <initCortexM4+0x92>
 810e2e0:	4a2f      	ldr	r2, [pc, #188]	; (810e3a0 <initCortexM4+0x13c>)
 810e2e2:	4930      	ldr	r1, [pc, #192]	; (810e3a4 <initCortexM4+0x140>)
 810e2e4:	4830      	ldr	r0, [pc, #192]	; (810e3a8 <initCortexM4+0x144>)
 810e2e6:	f7fd ff81 	bl	810c1ec <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 810e2ea:	482c      	ldr	r0, [pc, #176]	; (810e39c <initCortexM4+0x138>)
 810e2ec:	f000 f8d4 	bl	810e498 <__cxa_guard_release>
 810e2f0:	482e      	ldr	r0, [pc, #184]	; (810e3ac <initCortexM4+0x148>)
 810e2f2:	f000 f8ef 	bl	810e4d4 <atexit>
	static IMUThread imu(&hi2c1, &huart3);
 810e2f6:	4b2e      	ldr	r3, [pc, #184]	; (810e3b0 <initCortexM4+0x14c>)
 810e2f8:	781b      	ldrb	r3, [r3, #0]
 810e2fa:	f3bf 8f5b 	dmb	ish
 810e2fe:	b2db      	uxtb	r3, r3
 810e300:	f003 0301 	and.w	r3, r3, #1
 810e304:	2b00      	cmp	r3, #0
 810e306:	bf0c      	ite	eq
 810e308:	2301      	moveq	r3, #1
 810e30a:	2300      	movne	r3, #0
 810e30c:	b2db      	uxtb	r3, r3
 810e30e:	2b00      	cmp	r3, #0
 810e310:	d015      	beq.n	810e33e <initCortexM4+0xda>
 810e312:	4827      	ldr	r0, [pc, #156]	; (810e3b0 <initCortexM4+0x14c>)
 810e314:	f000 f8b4 	bl	810e480 <__cxa_guard_acquire>
 810e318:	4603      	mov	r3, r0
 810e31a:	2b00      	cmp	r3, #0
 810e31c:	bf14      	ite	ne
 810e31e:	2301      	movne	r3, #1
 810e320:	2300      	moveq	r3, #0
 810e322:	b2db      	uxtb	r3, r3
 810e324:	2b00      	cmp	r3, #0
 810e326:	d00a      	beq.n	810e33e <initCortexM4+0xda>
 810e328:	4a1e      	ldr	r2, [pc, #120]	; (810e3a4 <initCortexM4+0x140>)
 810e32a:	4922      	ldr	r1, [pc, #136]	; (810e3b4 <initCortexM4+0x150>)
 810e32c:	4822      	ldr	r0, [pc, #136]	; (810e3b8 <initCortexM4+0x154>)
 810e32e:	f7ff ff13 	bl	810e158 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>
 810e332:	481f      	ldr	r0, [pc, #124]	; (810e3b0 <initCortexM4+0x14c>)
 810e334:	f000 f8b0 	bl	810e498 <__cxa_guard_release>
 810e338:	4820      	ldr	r0, [pc, #128]	; (810e3bc <initCortexM4+0x158>)
 810e33a:	f000 f8cb 	bl	810e4d4 <atexit>
	static BarometerThread barometer(&hi2c1, &huart3);
 810e33e:	4b20      	ldr	r3, [pc, #128]	; (810e3c0 <initCortexM4+0x15c>)
 810e340:	781b      	ldrb	r3, [r3, #0]
 810e342:	f3bf 8f5b 	dmb	ish
 810e346:	b2db      	uxtb	r3, r3
 810e348:	f003 0301 	and.w	r3, r3, #1
 810e34c:	2b00      	cmp	r3, #0
 810e34e:	bf0c      	ite	eq
 810e350:	2301      	moveq	r3, #1
 810e352:	2300      	movne	r3, #0
 810e354:	b2db      	uxtb	r3, r3
 810e356:	2b00      	cmp	r3, #0
 810e358:	d015      	beq.n	810e386 <initCortexM4+0x122>
 810e35a:	4819      	ldr	r0, [pc, #100]	; (810e3c0 <initCortexM4+0x15c>)
 810e35c:	f000 f890 	bl	810e480 <__cxa_guard_acquire>
 810e360:	4603      	mov	r3, r0
 810e362:	2b00      	cmp	r3, #0
 810e364:	bf14      	ite	ne
 810e366:	2301      	movne	r3, #1
 810e368:	2300      	moveq	r3, #0
 810e36a:	b2db      	uxtb	r3, r3
 810e36c:	2b00      	cmp	r3, #0
 810e36e:	d00a      	beq.n	810e386 <initCortexM4+0x122>
 810e370:	4a0c      	ldr	r2, [pc, #48]	; (810e3a4 <initCortexM4+0x140>)
 810e372:	4910      	ldr	r1, [pc, #64]	; (810e3b4 <initCortexM4+0x150>)
 810e374:	4813      	ldr	r0, [pc, #76]	; (810e3c4 <initCortexM4+0x160>)
 810e376:	f7ff fecb 	bl	810e110 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>
 810e37a:	4811      	ldr	r0, [pc, #68]	; (810e3c0 <initCortexM4+0x15c>)
 810e37c:	f000 f88c 	bl	810e498 <__cxa_guard_release>
 810e380:	4811      	ldr	r0, [pc, #68]	; (810e3c8 <initCortexM4+0x164>)
 810e382:	f000 f8a7 	bl	810e4d4 <atexit>
}
 810e386:	bf00      	nop
 810e388:	bd80      	pop	{r7, pc}
 810e38a:	bf00      	nop
 810e38c:	10005240 	.word	0x10005240
 810e390:	10005940 	.word	0x10005940
 810e394:	10005210 	.word	0x10005210
 810e398:	0810e1b9 	.word	0x0810e1b9
 810e39c:	100056c8 	.word	0x100056c8
 810e3a0:	10004f88 	.word	0x10004f88
 810e3a4:	10005c14 	.word	0x10005c14
 810e3a8:	10005244 	.word	0x10005244
 810e3ac:	0810e1ed 	.word	0x0810e1ed
 810e3b0:	10005700 	.word	0x10005700
 810e3b4:	100058f4 	.word	0x100058f4
 810e3b8:	100056cc 	.word	0x100056cc
 810e3bc:	0810e221 	.word	0x0810e221
 810e3c0:	1000576c 	.word	0x1000576c
 810e3c4:	10005704 	.word	0x10005704
 810e3c8:	0810e255 	.word	0x0810e255

0810e3cc <_Z10__task_runPv>:

#include "usart.h"
#define DEFAULT_STACK_SIZE (512)


void __task_run(void* arg) {
 810e3cc:	b580      	push	{r7, lr}
 810e3ce:	b084      	sub	sp, #16
 810e3d0:	af00      	add	r7, sp, #0
 810e3d2:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 810e3d4:	687b      	ldr	r3, [r7, #4]
 810e3d6:	60fb      	str	r3, [r7, #12]

	thread->init();
 810e3d8:	68fb      	ldr	r3, [r7, #12]
 810e3da:	681b      	ldr	r3, [r3, #0]
 810e3dc:	681b      	ldr	r3, [r3, #0]
 810e3de:	68f8      	ldr	r0, [r7, #12]
 810e3e0:	4798      	blx	r3

	while(true) {
		thread->loop();
 810e3e2:	68fb      	ldr	r3, [r7, #12]
 810e3e4:	681b      	ldr	r3, [r3, #0]
 810e3e6:	3304      	adds	r3, #4
 810e3e8:	681b      	ldr	r3, [r3, #0]
 810e3ea:	68f8      	ldr	r0, [r7, #12]
 810e3ec:	4798      	blx	r3
 810e3ee:	e7f8      	b.n	810e3e2 <_Z10__task_runPv+0x16>

0810e3f0 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {
 810e3f0:	b580      	push	{r7, lr}
 810e3f2:	b082      	sub	sp, #8
 810e3f4:	af00      	add	r7, sp, #0
 810e3f6:	6078      	str	r0, [r7, #4]
 810e3f8:	6039      	str	r1, [r7, #0]
 810e3fa:	2218      	movs	r2, #24
 810e3fc:	6839      	ldr	r1, [r7, #0]
 810e3fe:	6878      	ldr	r0, [r7, #4]
 810e400:	f000 f805 	bl	810e40e <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
 810e404:	687b      	ldr	r3, [r7, #4]
 810e406:	4618      	mov	r0, r3
 810e408:	3708      	adds	r7, #8
 810e40a:	46bd      	mov	sp, r7
 810e40c:	bd80      	pop	{r7, pc}

0810e40e <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 810e40e:	b580      	push	{r7, lr}
 810e410:	b084      	sub	sp, #16
 810e412:	af00      	add	r7, sp, #0
 810e414:	60f8      	str	r0, [r7, #12]
 810e416:	60b9      	str	r1, [r7, #8]
 810e418:	607a      	str	r2, [r7, #4]
 810e41a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810e41e:	687a      	ldr	r2, [r7, #4]
 810e420:	68b9      	ldr	r1, [r7, #8]
 810e422:	68f8      	ldr	r0, [r7, #12]
 810e424:	f000 f806 	bl	810e434 <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
 810e428:	68fb      	ldr	r3, [r7, #12]
 810e42a:	4618      	mov	r0, r3
 810e42c:	3710      	adds	r7, #16
 810e42e:	46bd      	mov	sp, r7
 810e430:	bd80      	pop	{r7, pc}
	...

0810e434 <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority_t) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority_t priority, uint32_t stackSize) {
 810e434:	b580      	push	{r7, lr}
 810e436:	b084      	sub	sp, #16
 810e438:	af00      	add	r7, sp, #0
 810e43a:	60f8      	str	r0, [r7, #12]
 810e43c:	60b9      	str	r1, [r7, #8]
 810e43e:	607a      	str	r2, [r7, #4]
 810e440:	603b      	str	r3, [r7, #0]
 810e442:	4a0d      	ldr	r2, [pc, #52]	; (810e478 <_ZN6ThreadC1EPKc12osPriority_tm+0x44>)
 810e444:	68fb      	ldr	r3, [r7, #12]
 810e446:	601a      	str	r2, [r3, #0]
	attributes.name = name;
 810e448:	68fb      	ldr	r3, [r7, #12]
 810e44a:	68ba      	ldr	r2, [r7, #8]
 810e44c:	605a      	str	r2, [r3, #4]
	attributes.priority = priority;
 810e44e:	68fb      	ldr	r3, [r7, #12]
 810e450:	687a      	ldr	r2, [r7, #4]
 810e452:	61da      	str	r2, [r3, #28]
	attributes.stack_size = stackSize;
 810e454:	68fb      	ldr	r3, [r7, #12]
 810e456:	683a      	ldr	r2, [r7, #0]
 810e458:	619a      	str	r2, [r3, #24]

	this->handle = osThreadNew(__task_run, this, &attributes);
 810e45a:	68fb      	ldr	r3, [r7, #12]
 810e45c:	3304      	adds	r3, #4
 810e45e:	461a      	mov	r2, r3
 810e460:	68f9      	ldr	r1, [r7, #12]
 810e462:	4806      	ldr	r0, [pc, #24]	; (810e47c <_ZN6ThreadC1EPKc12osPriority_tm+0x48>)
 810e464:	f7fa ffa6 	bl	81093b4 <osThreadNew>
 810e468:	4602      	mov	r2, r0
 810e46a:	68fb      	ldr	r3, [r7, #12]
 810e46c:	629a      	str	r2, [r3, #40]	; 0x28
}
 810e46e:	68fb      	ldr	r3, [r7, #12]
 810e470:	4618      	mov	r0, r3
 810e472:	3710      	adds	r7, #16
 810e474:	46bd      	mov	sp, r7
 810e476:	bd80      	pop	{r7, pc}
 810e478:	081119bc 	.word	0x081119bc
 810e47c:	0810e3cd 	.word	0x0810e3cd

0810e480 <__cxa_guard_acquire>:
 810e480:	6803      	ldr	r3, [r0, #0]
 810e482:	07db      	lsls	r3, r3, #31
 810e484:	d406      	bmi.n	810e494 <__cxa_guard_acquire+0x14>
 810e486:	7843      	ldrb	r3, [r0, #1]
 810e488:	b103      	cbz	r3, 810e48c <__cxa_guard_acquire+0xc>
 810e48a:	deff      	udf	#255	; 0xff
 810e48c:	2301      	movs	r3, #1
 810e48e:	7043      	strb	r3, [r0, #1]
 810e490:	4618      	mov	r0, r3
 810e492:	4770      	bx	lr
 810e494:	2000      	movs	r0, #0
 810e496:	4770      	bx	lr

0810e498 <__cxa_guard_release>:
 810e498:	2301      	movs	r3, #1
 810e49a:	6003      	str	r3, [r0, #0]
 810e49c:	4770      	bx	lr

0810e49e <__cxa_pure_virtual>:
 810e49e:	b508      	push	{r3, lr}
 810e4a0:	f000 f80c 	bl	810e4bc <_ZSt9terminatev>

0810e4a4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 810e4a4:	b508      	push	{r3, lr}
 810e4a6:	4780      	blx	r0
 810e4a8:	f000 f80d 	bl	810e4c6 <abort>

0810e4ac <_ZSt13get_terminatev>:
 810e4ac:	4b02      	ldr	r3, [pc, #8]	; (810e4b8 <_ZSt13get_terminatev+0xc>)
 810e4ae:	6818      	ldr	r0, [r3, #0]
 810e4b0:	f3bf 8f5b 	dmb	ish
 810e4b4:	4770      	bx	lr
 810e4b6:	bf00      	nop
 810e4b8:	10000034 	.word	0x10000034

0810e4bc <_ZSt9terminatev>:
 810e4bc:	b508      	push	{r3, lr}
 810e4be:	f7ff fff5 	bl	810e4ac <_ZSt13get_terminatev>
 810e4c2:	f7ff ffef 	bl	810e4a4 <_ZN10__cxxabiv111__terminateEPFvvE>

0810e4c6 <abort>:
 810e4c6:	b508      	push	{r3, lr}
 810e4c8:	2006      	movs	r0, #6
 810e4ca:	f000 fd4b 	bl	810ef64 <raise>
 810e4ce:	2001      	movs	r0, #1
 810e4d0:	f7f3 fbaa 	bl	8101c28 <_exit>

0810e4d4 <atexit>:
 810e4d4:	2300      	movs	r3, #0
 810e4d6:	4601      	mov	r1, r0
 810e4d8:	461a      	mov	r2, r3
 810e4da:	4618      	mov	r0, r3
 810e4dc:	f000 bef0 	b.w	810f2c0 <__register_exitproc>

0810e4e0 <atoi>:
 810e4e0:	220a      	movs	r2, #10
 810e4e2:	2100      	movs	r1, #0
 810e4e4:	f000 bdf6 	b.w	810f0d4 <strtol>

0810e4e8 <__errno>:
 810e4e8:	4b01      	ldr	r3, [pc, #4]	; (810e4f0 <__errno+0x8>)
 810e4ea:	6818      	ldr	r0, [r3, #0]
 810e4ec:	4770      	bx	lr
 810e4ee:	bf00      	nop
 810e4f0:	10000038 	.word	0x10000038

0810e4f4 <__libc_init_array>:
 810e4f4:	b570      	push	{r4, r5, r6, lr}
 810e4f6:	4e0d      	ldr	r6, [pc, #52]	; (810e52c <__libc_init_array+0x38>)
 810e4f8:	4c0d      	ldr	r4, [pc, #52]	; (810e530 <__libc_init_array+0x3c>)
 810e4fa:	1ba4      	subs	r4, r4, r6
 810e4fc:	10a4      	asrs	r4, r4, #2
 810e4fe:	2500      	movs	r5, #0
 810e500:	42a5      	cmp	r5, r4
 810e502:	d109      	bne.n	810e518 <__libc_init_array+0x24>
 810e504:	4e0b      	ldr	r6, [pc, #44]	; (810e534 <__libc_init_array+0x40>)
 810e506:	4c0c      	ldr	r4, [pc, #48]	; (810e538 <__libc_init_array+0x44>)
 810e508:	f002 fec2 	bl	8111290 <_init>
 810e50c:	1ba4      	subs	r4, r4, r6
 810e50e:	10a4      	asrs	r4, r4, #2
 810e510:	2500      	movs	r5, #0
 810e512:	42a5      	cmp	r5, r4
 810e514:	d105      	bne.n	810e522 <__libc_init_array+0x2e>
 810e516:	bd70      	pop	{r4, r5, r6, pc}
 810e518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810e51c:	4798      	blx	r3
 810e51e:	3501      	adds	r5, #1
 810e520:	e7ee      	b.n	810e500 <__libc_init_array+0xc>
 810e522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810e526:	4798      	blx	r3
 810e528:	3501      	adds	r5, #1
 810e52a:	e7f2      	b.n	810e512 <__libc_init_array+0x1e>
 810e52c:	08111c90 	.word	0x08111c90
 810e530:	08111c90 	.word	0x08111c90
 810e534:	08111c90 	.word	0x08111c90
 810e538:	08111c98 	.word	0x08111c98

0810e53c <memcpy>:
 810e53c:	b510      	push	{r4, lr}
 810e53e:	1e43      	subs	r3, r0, #1
 810e540:	440a      	add	r2, r1
 810e542:	4291      	cmp	r1, r2
 810e544:	d100      	bne.n	810e548 <memcpy+0xc>
 810e546:	bd10      	pop	{r4, pc}
 810e548:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e54c:	f803 4f01 	strb.w	r4, [r3, #1]!
 810e550:	e7f7      	b.n	810e542 <memcpy+0x6>

0810e552 <memset>:
 810e552:	4402      	add	r2, r0
 810e554:	4603      	mov	r3, r0
 810e556:	4293      	cmp	r3, r2
 810e558:	d100      	bne.n	810e55c <memset+0xa>
 810e55a:	4770      	bx	lr
 810e55c:	f803 1b01 	strb.w	r1, [r3], #1
 810e560:	e7f9      	b.n	810e556 <memset+0x4>

0810e562 <__cvt>:
 810e562:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810e566:	ec55 4b10 	vmov	r4, r5, d0
 810e56a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810e56c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810e570:	2d00      	cmp	r5, #0
 810e572:	460e      	mov	r6, r1
 810e574:	4691      	mov	r9, r2
 810e576:	4619      	mov	r1, r3
 810e578:	bfb8      	it	lt
 810e57a:	4622      	movlt	r2, r4
 810e57c:	462b      	mov	r3, r5
 810e57e:	f027 0720 	bic.w	r7, r7, #32
 810e582:	bfbb      	ittet	lt
 810e584:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810e588:	461d      	movlt	r5, r3
 810e58a:	2300      	movge	r3, #0
 810e58c:	232d      	movlt	r3, #45	; 0x2d
 810e58e:	bfb8      	it	lt
 810e590:	4614      	movlt	r4, r2
 810e592:	2f46      	cmp	r7, #70	; 0x46
 810e594:	700b      	strb	r3, [r1, #0]
 810e596:	d004      	beq.n	810e5a2 <__cvt+0x40>
 810e598:	2f45      	cmp	r7, #69	; 0x45
 810e59a:	d100      	bne.n	810e59e <__cvt+0x3c>
 810e59c:	3601      	adds	r6, #1
 810e59e:	2102      	movs	r1, #2
 810e5a0:	e000      	b.n	810e5a4 <__cvt+0x42>
 810e5a2:	2103      	movs	r1, #3
 810e5a4:	ab03      	add	r3, sp, #12
 810e5a6:	9301      	str	r3, [sp, #4]
 810e5a8:	ab02      	add	r3, sp, #8
 810e5aa:	9300      	str	r3, [sp, #0]
 810e5ac:	4632      	mov	r2, r6
 810e5ae:	4653      	mov	r3, sl
 810e5b0:	ec45 4b10 	vmov	d0, r4, r5
 810e5b4:	f000 ff74 	bl	810f4a0 <_dtoa_r>
 810e5b8:	2f47      	cmp	r7, #71	; 0x47
 810e5ba:	4680      	mov	r8, r0
 810e5bc:	d102      	bne.n	810e5c4 <__cvt+0x62>
 810e5be:	f019 0f01 	tst.w	r9, #1
 810e5c2:	d026      	beq.n	810e612 <__cvt+0xb0>
 810e5c4:	2f46      	cmp	r7, #70	; 0x46
 810e5c6:	eb08 0906 	add.w	r9, r8, r6
 810e5ca:	d111      	bne.n	810e5f0 <__cvt+0x8e>
 810e5cc:	f898 3000 	ldrb.w	r3, [r8]
 810e5d0:	2b30      	cmp	r3, #48	; 0x30
 810e5d2:	d10a      	bne.n	810e5ea <__cvt+0x88>
 810e5d4:	2200      	movs	r2, #0
 810e5d6:	2300      	movs	r3, #0
 810e5d8:	4620      	mov	r0, r4
 810e5da:	4629      	mov	r1, r5
 810e5dc:	f7f2 fafc 	bl	8100bd8 <__aeabi_dcmpeq>
 810e5e0:	b918      	cbnz	r0, 810e5ea <__cvt+0x88>
 810e5e2:	f1c6 0601 	rsb	r6, r6, #1
 810e5e6:	f8ca 6000 	str.w	r6, [sl]
 810e5ea:	f8da 3000 	ldr.w	r3, [sl]
 810e5ee:	4499      	add	r9, r3
 810e5f0:	2200      	movs	r2, #0
 810e5f2:	2300      	movs	r3, #0
 810e5f4:	4620      	mov	r0, r4
 810e5f6:	4629      	mov	r1, r5
 810e5f8:	f7f2 faee 	bl	8100bd8 <__aeabi_dcmpeq>
 810e5fc:	b938      	cbnz	r0, 810e60e <__cvt+0xac>
 810e5fe:	2230      	movs	r2, #48	; 0x30
 810e600:	9b03      	ldr	r3, [sp, #12]
 810e602:	454b      	cmp	r3, r9
 810e604:	d205      	bcs.n	810e612 <__cvt+0xb0>
 810e606:	1c59      	adds	r1, r3, #1
 810e608:	9103      	str	r1, [sp, #12]
 810e60a:	701a      	strb	r2, [r3, #0]
 810e60c:	e7f8      	b.n	810e600 <__cvt+0x9e>
 810e60e:	f8cd 900c 	str.w	r9, [sp, #12]
 810e612:	9b03      	ldr	r3, [sp, #12]
 810e614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810e616:	eba3 0308 	sub.w	r3, r3, r8
 810e61a:	4640      	mov	r0, r8
 810e61c:	6013      	str	r3, [r2, #0]
 810e61e:	b004      	add	sp, #16
 810e620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0810e624 <__exponent>:
 810e624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810e626:	2900      	cmp	r1, #0
 810e628:	4604      	mov	r4, r0
 810e62a:	bfba      	itte	lt
 810e62c:	4249      	neglt	r1, r1
 810e62e:	232d      	movlt	r3, #45	; 0x2d
 810e630:	232b      	movge	r3, #43	; 0x2b
 810e632:	2909      	cmp	r1, #9
 810e634:	f804 2b02 	strb.w	r2, [r4], #2
 810e638:	7043      	strb	r3, [r0, #1]
 810e63a:	dd20      	ble.n	810e67e <__exponent+0x5a>
 810e63c:	f10d 0307 	add.w	r3, sp, #7
 810e640:	461f      	mov	r7, r3
 810e642:	260a      	movs	r6, #10
 810e644:	fb91 f5f6 	sdiv	r5, r1, r6
 810e648:	fb06 1115 	mls	r1, r6, r5, r1
 810e64c:	3130      	adds	r1, #48	; 0x30
 810e64e:	2d09      	cmp	r5, #9
 810e650:	f803 1c01 	strb.w	r1, [r3, #-1]
 810e654:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 810e658:	4629      	mov	r1, r5
 810e65a:	dc09      	bgt.n	810e670 <__exponent+0x4c>
 810e65c:	3130      	adds	r1, #48	; 0x30
 810e65e:	3b02      	subs	r3, #2
 810e660:	f802 1c01 	strb.w	r1, [r2, #-1]
 810e664:	42bb      	cmp	r3, r7
 810e666:	4622      	mov	r2, r4
 810e668:	d304      	bcc.n	810e674 <__exponent+0x50>
 810e66a:	1a10      	subs	r0, r2, r0
 810e66c:	b003      	add	sp, #12
 810e66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e670:	4613      	mov	r3, r2
 810e672:	e7e7      	b.n	810e644 <__exponent+0x20>
 810e674:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e678:	f804 2b01 	strb.w	r2, [r4], #1
 810e67c:	e7f2      	b.n	810e664 <__exponent+0x40>
 810e67e:	2330      	movs	r3, #48	; 0x30
 810e680:	4419      	add	r1, r3
 810e682:	7083      	strb	r3, [r0, #2]
 810e684:	1d02      	adds	r2, r0, #4
 810e686:	70c1      	strb	r1, [r0, #3]
 810e688:	e7ef      	b.n	810e66a <__exponent+0x46>
	...

0810e68c <_printf_float>:
 810e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e690:	b08d      	sub	sp, #52	; 0x34
 810e692:	460c      	mov	r4, r1
 810e694:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 810e698:	4616      	mov	r6, r2
 810e69a:	461f      	mov	r7, r3
 810e69c:	4605      	mov	r5, r0
 810e69e:	f001 fe35 	bl	811030c <_localeconv_r>
 810e6a2:	6803      	ldr	r3, [r0, #0]
 810e6a4:	9304      	str	r3, [sp, #16]
 810e6a6:	4618      	mov	r0, r3
 810e6a8:	f7f1 fe1a 	bl	81002e0 <strlen>
 810e6ac:	2300      	movs	r3, #0
 810e6ae:	930a      	str	r3, [sp, #40]	; 0x28
 810e6b0:	f8d8 3000 	ldr.w	r3, [r8]
 810e6b4:	9005      	str	r0, [sp, #20]
 810e6b6:	3307      	adds	r3, #7
 810e6b8:	f023 0307 	bic.w	r3, r3, #7
 810e6bc:	f103 0208 	add.w	r2, r3, #8
 810e6c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 810e6c4:	f8d4 b000 	ldr.w	fp, [r4]
 810e6c8:	f8c8 2000 	str.w	r2, [r8]
 810e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e6d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810e6d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810e6d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810e6dc:	9307      	str	r3, [sp, #28]
 810e6de:	f8cd 8018 	str.w	r8, [sp, #24]
 810e6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810e6e6:	4ba7      	ldr	r3, [pc, #668]	; (810e984 <_printf_float+0x2f8>)
 810e6e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810e6ec:	f7f2 faa6 	bl	8100c3c <__aeabi_dcmpun>
 810e6f0:	bb70      	cbnz	r0, 810e750 <_printf_float+0xc4>
 810e6f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810e6f6:	4ba3      	ldr	r3, [pc, #652]	; (810e984 <_printf_float+0x2f8>)
 810e6f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810e6fc:	f7f2 fa80 	bl	8100c00 <__aeabi_dcmple>
 810e700:	bb30      	cbnz	r0, 810e750 <_printf_float+0xc4>
 810e702:	2200      	movs	r2, #0
 810e704:	2300      	movs	r3, #0
 810e706:	4640      	mov	r0, r8
 810e708:	4649      	mov	r1, r9
 810e70a:	f7f2 fa6f 	bl	8100bec <__aeabi_dcmplt>
 810e70e:	b110      	cbz	r0, 810e716 <_printf_float+0x8a>
 810e710:	232d      	movs	r3, #45	; 0x2d
 810e712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810e716:	4a9c      	ldr	r2, [pc, #624]	; (810e988 <_printf_float+0x2fc>)
 810e718:	4b9c      	ldr	r3, [pc, #624]	; (810e98c <_printf_float+0x300>)
 810e71a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810e71e:	bf8c      	ite	hi
 810e720:	4690      	movhi	r8, r2
 810e722:	4698      	movls	r8, r3
 810e724:	2303      	movs	r3, #3
 810e726:	f02b 0204 	bic.w	r2, fp, #4
 810e72a:	6123      	str	r3, [r4, #16]
 810e72c:	6022      	str	r2, [r4, #0]
 810e72e:	f04f 0900 	mov.w	r9, #0
 810e732:	9700      	str	r7, [sp, #0]
 810e734:	4633      	mov	r3, r6
 810e736:	aa0b      	add	r2, sp, #44	; 0x2c
 810e738:	4621      	mov	r1, r4
 810e73a:	4628      	mov	r0, r5
 810e73c:	f000 f9e6 	bl	810eb0c <_printf_common>
 810e740:	3001      	adds	r0, #1
 810e742:	f040 808d 	bne.w	810e860 <_printf_float+0x1d4>
 810e746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810e74a:	b00d      	add	sp, #52	; 0x34
 810e74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e750:	4642      	mov	r2, r8
 810e752:	464b      	mov	r3, r9
 810e754:	4640      	mov	r0, r8
 810e756:	4649      	mov	r1, r9
 810e758:	f7f2 fa70 	bl	8100c3c <__aeabi_dcmpun>
 810e75c:	b110      	cbz	r0, 810e764 <_printf_float+0xd8>
 810e75e:	4a8c      	ldr	r2, [pc, #560]	; (810e990 <_printf_float+0x304>)
 810e760:	4b8c      	ldr	r3, [pc, #560]	; (810e994 <_printf_float+0x308>)
 810e762:	e7da      	b.n	810e71a <_printf_float+0x8e>
 810e764:	6861      	ldr	r1, [r4, #4]
 810e766:	1c4b      	adds	r3, r1, #1
 810e768:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 810e76c:	a80a      	add	r0, sp, #40	; 0x28
 810e76e:	d13e      	bne.n	810e7ee <_printf_float+0x162>
 810e770:	2306      	movs	r3, #6
 810e772:	6063      	str	r3, [r4, #4]
 810e774:	2300      	movs	r3, #0
 810e776:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810e77a:	ab09      	add	r3, sp, #36	; 0x24
 810e77c:	9300      	str	r3, [sp, #0]
 810e77e:	ec49 8b10 	vmov	d0, r8, r9
 810e782:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810e786:	6022      	str	r2, [r4, #0]
 810e788:	f8cd a004 	str.w	sl, [sp, #4]
 810e78c:	6861      	ldr	r1, [r4, #4]
 810e78e:	4628      	mov	r0, r5
 810e790:	f7ff fee7 	bl	810e562 <__cvt>
 810e794:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 810e798:	2b47      	cmp	r3, #71	; 0x47
 810e79a:	4680      	mov	r8, r0
 810e79c:	d109      	bne.n	810e7b2 <_printf_float+0x126>
 810e79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e7a0:	1cd8      	adds	r0, r3, #3
 810e7a2:	db02      	blt.n	810e7aa <_printf_float+0x11e>
 810e7a4:	6862      	ldr	r2, [r4, #4]
 810e7a6:	4293      	cmp	r3, r2
 810e7a8:	dd47      	ble.n	810e83a <_printf_float+0x1ae>
 810e7aa:	f1aa 0a02 	sub.w	sl, sl, #2
 810e7ae:	fa5f fa8a 	uxtb.w	sl, sl
 810e7b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810e7b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 810e7b8:	d824      	bhi.n	810e804 <_printf_float+0x178>
 810e7ba:	3901      	subs	r1, #1
 810e7bc:	4652      	mov	r2, sl
 810e7be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810e7c2:	9109      	str	r1, [sp, #36]	; 0x24
 810e7c4:	f7ff ff2e 	bl	810e624 <__exponent>
 810e7c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810e7ca:	1813      	adds	r3, r2, r0
 810e7cc:	2a01      	cmp	r2, #1
 810e7ce:	4681      	mov	r9, r0
 810e7d0:	6123      	str	r3, [r4, #16]
 810e7d2:	dc02      	bgt.n	810e7da <_printf_float+0x14e>
 810e7d4:	6822      	ldr	r2, [r4, #0]
 810e7d6:	07d1      	lsls	r1, r2, #31
 810e7d8:	d501      	bpl.n	810e7de <_printf_float+0x152>
 810e7da:	3301      	adds	r3, #1
 810e7dc:	6123      	str	r3, [r4, #16]
 810e7de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810e7e2:	2b00      	cmp	r3, #0
 810e7e4:	d0a5      	beq.n	810e732 <_printf_float+0xa6>
 810e7e6:	232d      	movs	r3, #45	; 0x2d
 810e7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810e7ec:	e7a1      	b.n	810e732 <_printf_float+0xa6>
 810e7ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 810e7f2:	f000 8177 	beq.w	810eae4 <_printf_float+0x458>
 810e7f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810e7fa:	d1bb      	bne.n	810e774 <_printf_float+0xe8>
 810e7fc:	2900      	cmp	r1, #0
 810e7fe:	d1b9      	bne.n	810e774 <_printf_float+0xe8>
 810e800:	2301      	movs	r3, #1
 810e802:	e7b6      	b.n	810e772 <_printf_float+0xe6>
 810e804:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 810e808:	d119      	bne.n	810e83e <_printf_float+0x1b2>
 810e80a:	2900      	cmp	r1, #0
 810e80c:	6863      	ldr	r3, [r4, #4]
 810e80e:	dd0c      	ble.n	810e82a <_printf_float+0x19e>
 810e810:	6121      	str	r1, [r4, #16]
 810e812:	b913      	cbnz	r3, 810e81a <_printf_float+0x18e>
 810e814:	6822      	ldr	r2, [r4, #0]
 810e816:	07d2      	lsls	r2, r2, #31
 810e818:	d502      	bpl.n	810e820 <_printf_float+0x194>
 810e81a:	3301      	adds	r3, #1
 810e81c:	440b      	add	r3, r1
 810e81e:	6123      	str	r3, [r4, #16]
 810e820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e822:	65a3      	str	r3, [r4, #88]	; 0x58
 810e824:	f04f 0900 	mov.w	r9, #0
 810e828:	e7d9      	b.n	810e7de <_printf_float+0x152>
 810e82a:	b913      	cbnz	r3, 810e832 <_printf_float+0x1a6>
 810e82c:	6822      	ldr	r2, [r4, #0]
 810e82e:	07d0      	lsls	r0, r2, #31
 810e830:	d501      	bpl.n	810e836 <_printf_float+0x1aa>
 810e832:	3302      	adds	r3, #2
 810e834:	e7f3      	b.n	810e81e <_printf_float+0x192>
 810e836:	2301      	movs	r3, #1
 810e838:	e7f1      	b.n	810e81e <_printf_float+0x192>
 810e83a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 810e83e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810e842:	4293      	cmp	r3, r2
 810e844:	db05      	blt.n	810e852 <_printf_float+0x1c6>
 810e846:	6822      	ldr	r2, [r4, #0]
 810e848:	6123      	str	r3, [r4, #16]
 810e84a:	07d1      	lsls	r1, r2, #31
 810e84c:	d5e8      	bpl.n	810e820 <_printf_float+0x194>
 810e84e:	3301      	adds	r3, #1
 810e850:	e7e5      	b.n	810e81e <_printf_float+0x192>
 810e852:	2b00      	cmp	r3, #0
 810e854:	bfd4      	ite	le
 810e856:	f1c3 0302 	rsble	r3, r3, #2
 810e85a:	2301      	movgt	r3, #1
 810e85c:	4413      	add	r3, r2
 810e85e:	e7de      	b.n	810e81e <_printf_float+0x192>
 810e860:	6823      	ldr	r3, [r4, #0]
 810e862:	055a      	lsls	r2, r3, #21
 810e864:	d407      	bmi.n	810e876 <_printf_float+0x1ea>
 810e866:	6923      	ldr	r3, [r4, #16]
 810e868:	4642      	mov	r2, r8
 810e86a:	4631      	mov	r1, r6
 810e86c:	4628      	mov	r0, r5
 810e86e:	47b8      	blx	r7
 810e870:	3001      	adds	r0, #1
 810e872:	d12b      	bne.n	810e8cc <_printf_float+0x240>
 810e874:	e767      	b.n	810e746 <_printf_float+0xba>
 810e876:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810e87a:	f240 80dc 	bls.w	810ea36 <_printf_float+0x3aa>
 810e87e:	2200      	movs	r2, #0
 810e880:	2300      	movs	r3, #0
 810e882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810e886:	f7f2 f9a7 	bl	8100bd8 <__aeabi_dcmpeq>
 810e88a:	2800      	cmp	r0, #0
 810e88c:	d033      	beq.n	810e8f6 <_printf_float+0x26a>
 810e88e:	2301      	movs	r3, #1
 810e890:	4a41      	ldr	r2, [pc, #260]	; (810e998 <_printf_float+0x30c>)
 810e892:	4631      	mov	r1, r6
 810e894:	4628      	mov	r0, r5
 810e896:	47b8      	blx	r7
 810e898:	3001      	adds	r0, #1
 810e89a:	f43f af54 	beq.w	810e746 <_printf_float+0xba>
 810e89e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810e8a2:	429a      	cmp	r2, r3
 810e8a4:	db02      	blt.n	810e8ac <_printf_float+0x220>
 810e8a6:	6823      	ldr	r3, [r4, #0]
 810e8a8:	07d8      	lsls	r0, r3, #31
 810e8aa:	d50f      	bpl.n	810e8cc <_printf_float+0x240>
 810e8ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e8b0:	4631      	mov	r1, r6
 810e8b2:	4628      	mov	r0, r5
 810e8b4:	47b8      	blx	r7
 810e8b6:	3001      	adds	r0, #1
 810e8b8:	f43f af45 	beq.w	810e746 <_printf_float+0xba>
 810e8bc:	f04f 0800 	mov.w	r8, #0
 810e8c0:	f104 091a 	add.w	r9, r4, #26
 810e8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e8c6:	3b01      	subs	r3, #1
 810e8c8:	4543      	cmp	r3, r8
 810e8ca:	dc09      	bgt.n	810e8e0 <_printf_float+0x254>
 810e8cc:	6823      	ldr	r3, [r4, #0]
 810e8ce:	079b      	lsls	r3, r3, #30
 810e8d0:	f100 8103 	bmi.w	810eada <_printf_float+0x44e>
 810e8d4:	68e0      	ldr	r0, [r4, #12]
 810e8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810e8d8:	4298      	cmp	r0, r3
 810e8da:	bfb8      	it	lt
 810e8dc:	4618      	movlt	r0, r3
 810e8de:	e734      	b.n	810e74a <_printf_float+0xbe>
 810e8e0:	2301      	movs	r3, #1
 810e8e2:	464a      	mov	r2, r9
 810e8e4:	4631      	mov	r1, r6
 810e8e6:	4628      	mov	r0, r5
 810e8e8:	47b8      	blx	r7
 810e8ea:	3001      	adds	r0, #1
 810e8ec:	f43f af2b 	beq.w	810e746 <_printf_float+0xba>
 810e8f0:	f108 0801 	add.w	r8, r8, #1
 810e8f4:	e7e6      	b.n	810e8c4 <_printf_float+0x238>
 810e8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e8f8:	2b00      	cmp	r3, #0
 810e8fa:	dc2b      	bgt.n	810e954 <_printf_float+0x2c8>
 810e8fc:	2301      	movs	r3, #1
 810e8fe:	4a26      	ldr	r2, [pc, #152]	; (810e998 <_printf_float+0x30c>)
 810e900:	4631      	mov	r1, r6
 810e902:	4628      	mov	r0, r5
 810e904:	47b8      	blx	r7
 810e906:	3001      	adds	r0, #1
 810e908:	f43f af1d 	beq.w	810e746 <_printf_float+0xba>
 810e90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e90e:	b923      	cbnz	r3, 810e91a <_printf_float+0x28e>
 810e910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e912:	b913      	cbnz	r3, 810e91a <_printf_float+0x28e>
 810e914:	6823      	ldr	r3, [r4, #0]
 810e916:	07d9      	lsls	r1, r3, #31
 810e918:	d5d8      	bpl.n	810e8cc <_printf_float+0x240>
 810e91a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e91e:	4631      	mov	r1, r6
 810e920:	4628      	mov	r0, r5
 810e922:	47b8      	blx	r7
 810e924:	3001      	adds	r0, #1
 810e926:	f43f af0e 	beq.w	810e746 <_printf_float+0xba>
 810e92a:	f04f 0900 	mov.w	r9, #0
 810e92e:	f104 0a1a 	add.w	sl, r4, #26
 810e932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e934:	425b      	negs	r3, r3
 810e936:	454b      	cmp	r3, r9
 810e938:	dc01      	bgt.n	810e93e <_printf_float+0x2b2>
 810e93a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e93c:	e794      	b.n	810e868 <_printf_float+0x1dc>
 810e93e:	2301      	movs	r3, #1
 810e940:	4652      	mov	r2, sl
 810e942:	4631      	mov	r1, r6
 810e944:	4628      	mov	r0, r5
 810e946:	47b8      	blx	r7
 810e948:	3001      	adds	r0, #1
 810e94a:	f43f aefc 	beq.w	810e746 <_printf_float+0xba>
 810e94e:	f109 0901 	add.w	r9, r9, #1
 810e952:	e7ee      	b.n	810e932 <_printf_float+0x2a6>
 810e954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810e956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810e958:	429a      	cmp	r2, r3
 810e95a:	bfa8      	it	ge
 810e95c:	461a      	movge	r2, r3
 810e95e:	2a00      	cmp	r2, #0
 810e960:	4691      	mov	r9, r2
 810e962:	dd07      	ble.n	810e974 <_printf_float+0x2e8>
 810e964:	4613      	mov	r3, r2
 810e966:	4631      	mov	r1, r6
 810e968:	4642      	mov	r2, r8
 810e96a:	4628      	mov	r0, r5
 810e96c:	47b8      	blx	r7
 810e96e:	3001      	adds	r0, #1
 810e970:	f43f aee9 	beq.w	810e746 <_printf_float+0xba>
 810e974:	f104 031a 	add.w	r3, r4, #26
 810e978:	f04f 0b00 	mov.w	fp, #0
 810e97c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810e980:	9306      	str	r3, [sp, #24]
 810e982:	e015      	b.n	810e9b0 <_printf_float+0x324>
 810e984:	7fefffff 	.word	0x7fefffff
 810e988:	081119cc 	.word	0x081119cc
 810e98c:	081119c8 	.word	0x081119c8
 810e990:	081119d4 	.word	0x081119d4
 810e994:	081119d0 	.word	0x081119d0
 810e998:	081119d8 	.word	0x081119d8
 810e99c:	2301      	movs	r3, #1
 810e99e:	9a06      	ldr	r2, [sp, #24]
 810e9a0:	4631      	mov	r1, r6
 810e9a2:	4628      	mov	r0, r5
 810e9a4:	47b8      	blx	r7
 810e9a6:	3001      	adds	r0, #1
 810e9a8:	f43f aecd 	beq.w	810e746 <_printf_float+0xba>
 810e9ac:	f10b 0b01 	add.w	fp, fp, #1
 810e9b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 810e9b4:	ebaa 0309 	sub.w	r3, sl, r9
 810e9b8:	455b      	cmp	r3, fp
 810e9ba:	dcef      	bgt.n	810e99c <_printf_float+0x310>
 810e9bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810e9c0:	429a      	cmp	r2, r3
 810e9c2:	44d0      	add	r8, sl
 810e9c4:	db15      	blt.n	810e9f2 <_printf_float+0x366>
 810e9c6:	6823      	ldr	r3, [r4, #0]
 810e9c8:	07da      	lsls	r2, r3, #31
 810e9ca:	d412      	bmi.n	810e9f2 <_printf_float+0x366>
 810e9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810e9ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 810e9d0:	eba3 020a 	sub.w	r2, r3, sl
 810e9d4:	eba3 0a01 	sub.w	sl, r3, r1
 810e9d8:	4592      	cmp	sl, r2
 810e9da:	bfa8      	it	ge
 810e9dc:	4692      	movge	sl, r2
 810e9de:	f1ba 0f00 	cmp.w	sl, #0
 810e9e2:	dc0e      	bgt.n	810ea02 <_printf_float+0x376>
 810e9e4:	f04f 0800 	mov.w	r8, #0
 810e9e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810e9ec:	f104 091a 	add.w	r9, r4, #26
 810e9f0:	e019      	b.n	810ea26 <_printf_float+0x39a>
 810e9f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e9f6:	4631      	mov	r1, r6
 810e9f8:	4628      	mov	r0, r5
 810e9fa:	47b8      	blx	r7
 810e9fc:	3001      	adds	r0, #1
 810e9fe:	d1e5      	bne.n	810e9cc <_printf_float+0x340>
 810ea00:	e6a1      	b.n	810e746 <_printf_float+0xba>
 810ea02:	4653      	mov	r3, sl
 810ea04:	4642      	mov	r2, r8
 810ea06:	4631      	mov	r1, r6
 810ea08:	4628      	mov	r0, r5
 810ea0a:	47b8      	blx	r7
 810ea0c:	3001      	adds	r0, #1
 810ea0e:	d1e9      	bne.n	810e9e4 <_printf_float+0x358>
 810ea10:	e699      	b.n	810e746 <_printf_float+0xba>
 810ea12:	2301      	movs	r3, #1
 810ea14:	464a      	mov	r2, r9
 810ea16:	4631      	mov	r1, r6
 810ea18:	4628      	mov	r0, r5
 810ea1a:	47b8      	blx	r7
 810ea1c:	3001      	adds	r0, #1
 810ea1e:	f43f ae92 	beq.w	810e746 <_printf_float+0xba>
 810ea22:	f108 0801 	add.w	r8, r8, #1
 810ea26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ea2a:	1a9b      	subs	r3, r3, r2
 810ea2c:	eba3 030a 	sub.w	r3, r3, sl
 810ea30:	4543      	cmp	r3, r8
 810ea32:	dcee      	bgt.n	810ea12 <_printf_float+0x386>
 810ea34:	e74a      	b.n	810e8cc <_printf_float+0x240>
 810ea36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ea38:	2a01      	cmp	r2, #1
 810ea3a:	dc01      	bgt.n	810ea40 <_printf_float+0x3b4>
 810ea3c:	07db      	lsls	r3, r3, #31
 810ea3e:	d53a      	bpl.n	810eab6 <_printf_float+0x42a>
 810ea40:	2301      	movs	r3, #1
 810ea42:	4642      	mov	r2, r8
 810ea44:	4631      	mov	r1, r6
 810ea46:	4628      	mov	r0, r5
 810ea48:	47b8      	blx	r7
 810ea4a:	3001      	adds	r0, #1
 810ea4c:	f43f ae7b 	beq.w	810e746 <_printf_float+0xba>
 810ea50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810ea54:	4631      	mov	r1, r6
 810ea56:	4628      	mov	r0, r5
 810ea58:	47b8      	blx	r7
 810ea5a:	3001      	adds	r0, #1
 810ea5c:	f108 0801 	add.w	r8, r8, #1
 810ea60:	f43f ae71 	beq.w	810e746 <_printf_float+0xba>
 810ea64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ea66:	2200      	movs	r2, #0
 810ea68:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 810ea6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810ea70:	2300      	movs	r3, #0
 810ea72:	f7f2 f8b1 	bl	8100bd8 <__aeabi_dcmpeq>
 810ea76:	b9c8      	cbnz	r0, 810eaac <_printf_float+0x420>
 810ea78:	4653      	mov	r3, sl
 810ea7a:	4642      	mov	r2, r8
 810ea7c:	4631      	mov	r1, r6
 810ea7e:	4628      	mov	r0, r5
 810ea80:	47b8      	blx	r7
 810ea82:	3001      	adds	r0, #1
 810ea84:	d10e      	bne.n	810eaa4 <_printf_float+0x418>
 810ea86:	e65e      	b.n	810e746 <_printf_float+0xba>
 810ea88:	2301      	movs	r3, #1
 810ea8a:	4652      	mov	r2, sl
 810ea8c:	4631      	mov	r1, r6
 810ea8e:	4628      	mov	r0, r5
 810ea90:	47b8      	blx	r7
 810ea92:	3001      	adds	r0, #1
 810ea94:	f43f ae57 	beq.w	810e746 <_printf_float+0xba>
 810ea98:	f108 0801 	add.w	r8, r8, #1
 810ea9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ea9e:	3b01      	subs	r3, #1
 810eaa0:	4543      	cmp	r3, r8
 810eaa2:	dcf1      	bgt.n	810ea88 <_printf_float+0x3fc>
 810eaa4:	464b      	mov	r3, r9
 810eaa6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810eaaa:	e6de      	b.n	810e86a <_printf_float+0x1de>
 810eaac:	f04f 0800 	mov.w	r8, #0
 810eab0:	f104 0a1a 	add.w	sl, r4, #26
 810eab4:	e7f2      	b.n	810ea9c <_printf_float+0x410>
 810eab6:	2301      	movs	r3, #1
 810eab8:	e7df      	b.n	810ea7a <_printf_float+0x3ee>
 810eaba:	2301      	movs	r3, #1
 810eabc:	464a      	mov	r2, r9
 810eabe:	4631      	mov	r1, r6
 810eac0:	4628      	mov	r0, r5
 810eac2:	47b8      	blx	r7
 810eac4:	3001      	adds	r0, #1
 810eac6:	f43f ae3e 	beq.w	810e746 <_printf_float+0xba>
 810eaca:	f108 0801 	add.w	r8, r8, #1
 810eace:	68e3      	ldr	r3, [r4, #12]
 810ead0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ead2:	1a9b      	subs	r3, r3, r2
 810ead4:	4543      	cmp	r3, r8
 810ead6:	dcf0      	bgt.n	810eaba <_printf_float+0x42e>
 810ead8:	e6fc      	b.n	810e8d4 <_printf_float+0x248>
 810eada:	f04f 0800 	mov.w	r8, #0
 810eade:	f104 0919 	add.w	r9, r4, #25
 810eae2:	e7f4      	b.n	810eace <_printf_float+0x442>
 810eae4:	2900      	cmp	r1, #0
 810eae6:	f43f ae8b 	beq.w	810e800 <_printf_float+0x174>
 810eaea:	2300      	movs	r3, #0
 810eaec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810eaf0:	ab09      	add	r3, sp, #36	; 0x24
 810eaf2:	9300      	str	r3, [sp, #0]
 810eaf4:	ec49 8b10 	vmov	d0, r8, r9
 810eaf8:	6022      	str	r2, [r4, #0]
 810eafa:	f8cd a004 	str.w	sl, [sp, #4]
 810eafe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810eb02:	4628      	mov	r0, r5
 810eb04:	f7ff fd2d 	bl	810e562 <__cvt>
 810eb08:	4680      	mov	r8, r0
 810eb0a:	e648      	b.n	810e79e <_printf_float+0x112>

0810eb0c <_printf_common>:
 810eb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810eb10:	4691      	mov	r9, r2
 810eb12:	461f      	mov	r7, r3
 810eb14:	688a      	ldr	r2, [r1, #8]
 810eb16:	690b      	ldr	r3, [r1, #16]
 810eb18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810eb1c:	4293      	cmp	r3, r2
 810eb1e:	bfb8      	it	lt
 810eb20:	4613      	movlt	r3, r2
 810eb22:	f8c9 3000 	str.w	r3, [r9]
 810eb26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810eb2a:	4606      	mov	r6, r0
 810eb2c:	460c      	mov	r4, r1
 810eb2e:	b112      	cbz	r2, 810eb36 <_printf_common+0x2a>
 810eb30:	3301      	adds	r3, #1
 810eb32:	f8c9 3000 	str.w	r3, [r9]
 810eb36:	6823      	ldr	r3, [r4, #0]
 810eb38:	0699      	lsls	r1, r3, #26
 810eb3a:	bf42      	ittt	mi
 810eb3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 810eb40:	3302      	addmi	r3, #2
 810eb42:	f8c9 3000 	strmi.w	r3, [r9]
 810eb46:	6825      	ldr	r5, [r4, #0]
 810eb48:	f015 0506 	ands.w	r5, r5, #6
 810eb4c:	d107      	bne.n	810eb5e <_printf_common+0x52>
 810eb4e:	f104 0a19 	add.w	sl, r4, #25
 810eb52:	68e3      	ldr	r3, [r4, #12]
 810eb54:	f8d9 2000 	ldr.w	r2, [r9]
 810eb58:	1a9b      	subs	r3, r3, r2
 810eb5a:	42ab      	cmp	r3, r5
 810eb5c:	dc28      	bgt.n	810ebb0 <_printf_common+0xa4>
 810eb5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810eb62:	6822      	ldr	r2, [r4, #0]
 810eb64:	3300      	adds	r3, #0
 810eb66:	bf18      	it	ne
 810eb68:	2301      	movne	r3, #1
 810eb6a:	0692      	lsls	r2, r2, #26
 810eb6c:	d42d      	bmi.n	810ebca <_printf_common+0xbe>
 810eb6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810eb72:	4639      	mov	r1, r7
 810eb74:	4630      	mov	r0, r6
 810eb76:	47c0      	blx	r8
 810eb78:	3001      	adds	r0, #1
 810eb7a:	d020      	beq.n	810ebbe <_printf_common+0xb2>
 810eb7c:	6823      	ldr	r3, [r4, #0]
 810eb7e:	68e5      	ldr	r5, [r4, #12]
 810eb80:	f8d9 2000 	ldr.w	r2, [r9]
 810eb84:	f003 0306 	and.w	r3, r3, #6
 810eb88:	2b04      	cmp	r3, #4
 810eb8a:	bf08      	it	eq
 810eb8c:	1aad      	subeq	r5, r5, r2
 810eb8e:	68a3      	ldr	r3, [r4, #8]
 810eb90:	6922      	ldr	r2, [r4, #16]
 810eb92:	bf0c      	ite	eq
 810eb94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810eb98:	2500      	movne	r5, #0
 810eb9a:	4293      	cmp	r3, r2
 810eb9c:	bfc4      	itt	gt
 810eb9e:	1a9b      	subgt	r3, r3, r2
 810eba0:	18ed      	addgt	r5, r5, r3
 810eba2:	f04f 0900 	mov.w	r9, #0
 810eba6:	341a      	adds	r4, #26
 810eba8:	454d      	cmp	r5, r9
 810ebaa:	d11a      	bne.n	810ebe2 <_printf_common+0xd6>
 810ebac:	2000      	movs	r0, #0
 810ebae:	e008      	b.n	810ebc2 <_printf_common+0xb6>
 810ebb0:	2301      	movs	r3, #1
 810ebb2:	4652      	mov	r2, sl
 810ebb4:	4639      	mov	r1, r7
 810ebb6:	4630      	mov	r0, r6
 810ebb8:	47c0      	blx	r8
 810ebba:	3001      	adds	r0, #1
 810ebbc:	d103      	bne.n	810ebc6 <_printf_common+0xba>
 810ebbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ebc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ebc6:	3501      	adds	r5, #1
 810ebc8:	e7c3      	b.n	810eb52 <_printf_common+0x46>
 810ebca:	18e1      	adds	r1, r4, r3
 810ebcc:	1c5a      	adds	r2, r3, #1
 810ebce:	2030      	movs	r0, #48	; 0x30
 810ebd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810ebd4:	4422      	add	r2, r4
 810ebd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810ebda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810ebde:	3302      	adds	r3, #2
 810ebe0:	e7c5      	b.n	810eb6e <_printf_common+0x62>
 810ebe2:	2301      	movs	r3, #1
 810ebe4:	4622      	mov	r2, r4
 810ebe6:	4639      	mov	r1, r7
 810ebe8:	4630      	mov	r0, r6
 810ebea:	47c0      	blx	r8
 810ebec:	3001      	adds	r0, #1
 810ebee:	d0e6      	beq.n	810ebbe <_printf_common+0xb2>
 810ebf0:	f109 0901 	add.w	r9, r9, #1
 810ebf4:	e7d8      	b.n	810eba8 <_printf_common+0x9c>
	...

0810ebf8 <_printf_i>:
 810ebf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810ebfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 810ec00:	460c      	mov	r4, r1
 810ec02:	7e09      	ldrb	r1, [r1, #24]
 810ec04:	b085      	sub	sp, #20
 810ec06:	296e      	cmp	r1, #110	; 0x6e
 810ec08:	4617      	mov	r7, r2
 810ec0a:	4606      	mov	r6, r0
 810ec0c:	4698      	mov	r8, r3
 810ec0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810ec10:	f000 80b3 	beq.w	810ed7a <_printf_i+0x182>
 810ec14:	d822      	bhi.n	810ec5c <_printf_i+0x64>
 810ec16:	2963      	cmp	r1, #99	; 0x63
 810ec18:	d036      	beq.n	810ec88 <_printf_i+0x90>
 810ec1a:	d80a      	bhi.n	810ec32 <_printf_i+0x3a>
 810ec1c:	2900      	cmp	r1, #0
 810ec1e:	f000 80b9 	beq.w	810ed94 <_printf_i+0x19c>
 810ec22:	2958      	cmp	r1, #88	; 0x58
 810ec24:	f000 8083 	beq.w	810ed2e <_printf_i+0x136>
 810ec28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810ec2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 810ec30:	e032      	b.n	810ec98 <_printf_i+0xa0>
 810ec32:	2964      	cmp	r1, #100	; 0x64
 810ec34:	d001      	beq.n	810ec3a <_printf_i+0x42>
 810ec36:	2969      	cmp	r1, #105	; 0x69
 810ec38:	d1f6      	bne.n	810ec28 <_printf_i+0x30>
 810ec3a:	6820      	ldr	r0, [r4, #0]
 810ec3c:	6813      	ldr	r3, [r2, #0]
 810ec3e:	0605      	lsls	r5, r0, #24
 810ec40:	f103 0104 	add.w	r1, r3, #4
 810ec44:	d52a      	bpl.n	810ec9c <_printf_i+0xa4>
 810ec46:	681b      	ldr	r3, [r3, #0]
 810ec48:	6011      	str	r1, [r2, #0]
 810ec4a:	2b00      	cmp	r3, #0
 810ec4c:	da03      	bge.n	810ec56 <_printf_i+0x5e>
 810ec4e:	222d      	movs	r2, #45	; 0x2d
 810ec50:	425b      	negs	r3, r3
 810ec52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 810ec56:	486f      	ldr	r0, [pc, #444]	; (810ee14 <_printf_i+0x21c>)
 810ec58:	220a      	movs	r2, #10
 810ec5a:	e039      	b.n	810ecd0 <_printf_i+0xd8>
 810ec5c:	2973      	cmp	r1, #115	; 0x73
 810ec5e:	f000 809d 	beq.w	810ed9c <_printf_i+0x1a4>
 810ec62:	d808      	bhi.n	810ec76 <_printf_i+0x7e>
 810ec64:	296f      	cmp	r1, #111	; 0x6f
 810ec66:	d020      	beq.n	810ecaa <_printf_i+0xb2>
 810ec68:	2970      	cmp	r1, #112	; 0x70
 810ec6a:	d1dd      	bne.n	810ec28 <_printf_i+0x30>
 810ec6c:	6823      	ldr	r3, [r4, #0]
 810ec6e:	f043 0320 	orr.w	r3, r3, #32
 810ec72:	6023      	str	r3, [r4, #0]
 810ec74:	e003      	b.n	810ec7e <_printf_i+0x86>
 810ec76:	2975      	cmp	r1, #117	; 0x75
 810ec78:	d017      	beq.n	810ecaa <_printf_i+0xb2>
 810ec7a:	2978      	cmp	r1, #120	; 0x78
 810ec7c:	d1d4      	bne.n	810ec28 <_printf_i+0x30>
 810ec7e:	2378      	movs	r3, #120	; 0x78
 810ec80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810ec84:	4864      	ldr	r0, [pc, #400]	; (810ee18 <_printf_i+0x220>)
 810ec86:	e055      	b.n	810ed34 <_printf_i+0x13c>
 810ec88:	6813      	ldr	r3, [r2, #0]
 810ec8a:	1d19      	adds	r1, r3, #4
 810ec8c:	681b      	ldr	r3, [r3, #0]
 810ec8e:	6011      	str	r1, [r2, #0]
 810ec90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810ec94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810ec98:	2301      	movs	r3, #1
 810ec9a:	e08c      	b.n	810edb6 <_printf_i+0x1be>
 810ec9c:	681b      	ldr	r3, [r3, #0]
 810ec9e:	6011      	str	r1, [r2, #0]
 810eca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 810eca4:	bf18      	it	ne
 810eca6:	b21b      	sxthne	r3, r3
 810eca8:	e7cf      	b.n	810ec4a <_printf_i+0x52>
 810ecaa:	6813      	ldr	r3, [r2, #0]
 810ecac:	6825      	ldr	r5, [r4, #0]
 810ecae:	1d18      	adds	r0, r3, #4
 810ecb0:	6010      	str	r0, [r2, #0]
 810ecb2:	0628      	lsls	r0, r5, #24
 810ecb4:	d501      	bpl.n	810ecba <_printf_i+0xc2>
 810ecb6:	681b      	ldr	r3, [r3, #0]
 810ecb8:	e002      	b.n	810ecc0 <_printf_i+0xc8>
 810ecba:	0668      	lsls	r0, r5, #25
 810ecbc:	d5fb      	bpl.n	810ecb6 <_printf_i+0xbe>
 810ecbe:	881b      	ldrh	r3, [r3, #0]
 810ecc0:	4854      	ldr	r0, [pc, #336]	; (810ee14 <_printf_i+0x21c>)
 810ecc2:	296f      	cmp	r1, #111	; 0x6f
 810ecc4:	bf14      	ite	ne
 810ecc6:	220a      	movne	r2, #10
 810ecc8:	2208      	moveq	r2, #8
 810ecca:	2100      	movs	r1, #0
 810eccc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810ecd0:	6865      	ldr	r5, [r4, #4]
 810ecd2:	60a5      	str	r5, [r4, #8]
 810ecd4:	2d00      	cmp	r5, #0
 810ecd6:	f2c0 8095 	blt.w	810ee04 <_printf_i+0x20c>
 810ecda:	6821      	ldr	r1, [r4, #0]
 810ecdc:	f021 0104 	bic.w	r1, r1, #4
 810ece0:	6021      	str	r1, [r4, #0]
 810ece2:	2b00      	cmp	r3, #0
 810ece4:	d13d      	bne.n	810ed62 <_printf_i+0x16a>
 810ece6:	2d00      	cmp	r5, #0
 810ece8:	f040 808e 	bne.w	810ee08 <_printf_i+0x210>
 810ecec:	4665      	mov	r5, ip
 810ecee:	2a08      	cmp	r2, #8
 810ecf0:	d10b      	bne.n	810ed0a <_printf_i+0x112>
 810ecf2:	6823      	ldr	r3, [r4, #0]
 810ecf4:	07db      	lsls	r3, r3, #31
 810ecf6:	d508      	bpl.n	810ed0a <_printf_i+0x112>
 810ecf8:	6923      	ldr	r3, [r4, #16]
 810ecfa:	6862      	ldr	r2, [r4, #4]
 810ecfc:	429a      	cmp	r2, r3
 810ecfe:	bfde      	ittt	le
 810ed00:	2330      	movle	r3, #48	; 0x30
 810ed02:	f805 3c01 	strble.w	r3, [r5, #-1]
 810ed06:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 810ed0a:	ebac 0305 	sub.w	r3, ip, r5
 810ed0e:	6123      	str	r3, [r4, #16]
 810ed10:	f8cd 8000 	str.w	r8, [sp]
 810ed14:	463b      	mov	r3, r7
 810ed16:	aa03      	add	r2, sp, #12
 810ed18:	4621      	mov	r1, r4
 810ed1a:	4630      	mov	r0, r6
 810ed1c:	f7ff fef6 	bl	810eb0c <_printf_common>
 810ed20:	3001      	adds	r0, #1
 810ed22:	d14d      	bne.n	810edc0 <_printf_i+0x1c8>
 810ed24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ed28:	b005      	add	sp, #20
 810ed2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ed2e:	4839      	ldr	r0, [pc, #228]	; (810ee14 <_printf_i+0x21c>)
 810ed30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 810ed34:	6813      	ldr	r3, [r2, #0]
 810ed36:	6821      	ldr	r1, [r4, #0]
 810ed38:	1d1d      	adds	r5, r3, #4
 810ed3a:	681b      	ldr	r3, [r3, #0]
 810ed3c:	6015      	str	r5, [r2, #0]
 810ed3e:	060a      	lsls	r2, r1, #24
 810ed40:	d50b      	bpl.n	810ed5a <_printf_i+0x162>
 810ed42:	07ca      	lsls	r2, r1, #31
 810ed44:	bf44      	itt	mi
 810ed46:	f041 0120 	orrmi.w	r1, r1, #32
 810ed4a:	6021      	strmi	r1, [r4, #0]
 810ed4c:	b91b      	cbnz	r3, 810ed56 <_printf_i+0x15e>
 810ed4e:	6822      	ldr	r2, [r4, #0]
 810ed50:	f022 0220 	bic.w	r2, r2, #32
 810ed54:	6022      	str	r2, [r4, #0]
 810ed56:	2210      	movs	r2, #16
 810ed58:	e7b7      	b.n	810ecca <_printf_i+0xd2>
 810ed5a:	064d      	lsls	r5, r1, #25
 810ed5c:	bf48      	it	mi
 810ed5e:	b29b      	uxthmi	r3, r3
 810ed60:	e7ef      	b.n	810ed42 <_printf_i+0x14a>
 810ed62:	4665      	mov	r5, ip
 810ed64:	fbb3 f1f2 	udiv	r1, r3, r2
 810ed68:	fb02 3311 	mls	r3, r2, r1, r3
 810ed6c:	5cc3      	ldrb	r3, [r0, r3]
 810ed6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 810ed72:	460b      	mov	r3, r1
 810ed74:	2900      	cmp	r1, #0
 810ed76:	d1f5      	bne.n	810ed64 <_printf_i+0x16c>
 810ed78:	e7b9      	b.n	810ecee <_printf_i+0xf6>
 810ed7a:	6813      	ldr	r3, [r2, #0]
 810ed7c:	6825      	ldr	r5, [r4, #0]
 810ed7e:	6961      	ldr	r1, [r4, #20]
 810ed80:	1d18      	adds	r0, r3, #4
 810ed82:	6010      	str	r0, [r2, #0]
 810ed84:	0628      	lsls	r0, r5, #24
 810ed86:	681b      	ldr	r3, [r3, #0]
 810ed88:	d501      	bpl.n	810ed8e <_printf_i+0x196>
 810ed8a:	6019      	str	r1, [r3, #0]
 810ed8c:	e002      	b.n	810ed94 <_printf_i+0x19c>
 810ed8e:	066a      	lsls	r2, r5, #25
 810ed90:	d5fb      	bpl.n	810ed8a <_printf_i+0x192>
 810ed92:	8019      	strh	r1, [r3, #0]
 810ed94:	2300      	movs	r3, #0
 810ed96:	6123      	str	r3, [r4, #16]
 810ed98:	4665      	mov	r5, ip
 810ed9a:	e7b9      	b.n	810ed10 <_printf_i+0x118>
 810ed9c:	6813      	ldr	r3, [r2, #0]
 810ed9e:	1d19      	adds	r1, r3, #4
 810eda0:	6011      	str	r1, [r2, #0]
 810eda2:	681d      	ldr	r5, [r3, #0]
 810eda4:	6862      	ldr	r2, [r4, #4]
 810eda6:	2100      	movs	r1, #0
 810eda8:	4628      	mov	r0, r5
 810edaa:	f7f1 faa1 	bl	81002f0 <memchr>
 810edae:	b108      	cbz	r0, 810edb4 <_printf_i+0x1bc>
 810edb0:	1b40      	subs	r0, r0, r5
 810edb2:	6060      	str	r0, [r4, #4]
 810edb4:	6863      	ldr	r3, [r4, #4]
 810edb6:	6123      	str	r3, [r4, #16]
 810edb8:	2300      	movs	r3, #0
 810edba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810edbe:	e7a7      	b.n	810ed10 <_printf_i+0x118>
 810edc0:	6923      	ldr	r3, [r4, #16]
 810edc2:	462a      	mov	r2, r5
 810edc4:	4639      	mov	r1, r7
 810edc6:	4630      	mov	r0, r6
 810edc8:	47c0      	blx	r8
 810edca:	3001      	adds	r0, #1
 810edcc:	d0aa      	beq.n	810ed24 <_printf_i+0x12c>
 810edce:	6823      	ldr	r3, [r4, #0]
 810edd0:	079b      	lsls	r3, r3, #30
 810edd2:	d413      	bmi.n	810edfc <_printf_i+0x204>
 810edd4:	68e0      	ldr	r0, [r4, #12]
 810edd6:	9b03      	ldr	r3, [sp, #12]
 810edd8:	4298      	cmp	r0, r3
 810edda:	bfb8      	it	lt
 810eddc:	4618      	movlt	r0, r3
 810edde:	e7a3      	b.n	810ed28 <_printf_i+0x130>
 810ede0:	2301      	movs	r3, #1
 810ede2:	464a      	mov	r2, r9
 810ede4:	4639      	mov	r1, r7
 810ede6:	4630      	mov	r0, r6
 810ede8:	47c0      	blx	r8
 810edea:	3001      	adds	r0, #1
 810edec:	d09a      	beq.n	810ed24 <_printf_i+0x12c>
 810edee:	3501      	adds	r5, #1
 810edf0:	68e3      	ldr	r3, [r4, #12]
 810edf2:	9a03      	ldr	r2, [sp, #12]
 810edf4:	1a9b      	subs	r3, r3, r2
 810edf6:	42ab      	cmp	r3, r5
 810edf8:	dcf2      	bgt.n	810ede0 <_printf_i+0x1e8>
 810edfa:	e7eb      	b.n	810edd4 <_printf_i+0x1dc>
 810edfc:	2500      	movs	r5, #0
 810edfe:	f104 0919 	add.w	r9, r4, #25
 810ee02:	e7f5      	b.n	810edf0 <_printf_i+0x1f8>
 810ee04:	2b00      	cmp	r3, #0
 810ee06:	d1ac      	bne.n	810ed62 <_printf_i+0x16a>
 810ee08:	7803      	ldrb	r3, [r0, #0]
 810ee0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810ee0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810ee12:	e76c      	b.n	810ecee <_printf_i+0xf6>
 810ee14:	081119da 	.word	0x081119da
 810ee18:	081119eb 	.word	0x081119eb

0810ee1c <iprintf>:
 810ee1c:	b40f      	push	{r0, r1, r2, r3}
 810ee1e:	4b0a      	ldr	r3, [pc, #40]	; (810ee48 <iprintf+0x2c>)
 810ee20:	b513      	push	{r0, r1, r4, lr}
 810ee22:	681c      	ldr	r4, [r3, #0]
 810ee24:	b124      	cbz	r4, 810ee30 <iprintf+0x14>
 810ee26:	69a3      	ldr	r3, [r4, #24]
 810ee28:	b913      	cbnz	r3, 810ee30 <iprintf+0x14>
 810ee2a:	4620      	mov	r0, r4
 810ee2c:	f001 f9e0 	bl	81101f0 <__sinit>
 810ee30:	ab05      	add	r3, sp, #20
 810ee32:	9a04      	ldr	r2, [sp, #16]
 810ee34:	68a1      	ldr	r1, [r4, #8]
 810ee36:	9301      	str	r3, [sp, #4]
 810ee38:	4620      	mov	r0, r4
 810ee3a:	f002 f801 	bl	8110e40 <_vfiprintf_r>
 810ee3e:	b002      	add	sp, #8
 810ee40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ee44:	b004      	add	sp, #16
 810ee46:	4770      	bx	lr
 810ee48:	10000038 	.word	0x10000038

0810ee4c <_puts_r>:
 810ee4c:	b570      	push	{r4, r5, r6, lr}
 810ee4e:	460e      	mov	r6, r1
 810ee50:	4605      	mov	r5, r0
 810ee52:	b118      	cbz	r0, 810ee5c <_puts_r+0x10>
 810ee54:	6983      	ldr	r3, [r0, #24]
 810ee56:	b90b      	cbnz	r3, 810ee5c <_puts_r+0x10>
 810ee58:	f001 f9ca 	bl	81101f0 <__sinit>
 810ee5c:	69ab      	ldr	r3, [r5, #24]
 810ee5e:	68ac      	ldr	r4, [r5, #8]
 810ee60:	b913      	cbnz	r3, 810ee68 <_puts_r+0x1c>
 810ee62:	4628      	mov	r0, r5
 810ee64:	f001 f9c4 	bl	81101f0 <__sinit>
 810ee68:	4b23      	ldr	r3, [pc, #140]	; (810eef8 <_puts_r+0xac>)
 810ee6a:	429c      	cmp	r4, r3
 810ee6c:	d117      	bne.n	810ee9e <_puts_r+0x52>
 810ee6e:	686c      	ldr	r4, [r5, #4]
 810ee70:	89a3      	ldrh	r3, [r4, #12]
 810ee72:	071b      	lsls	r3, r3, #28
 810ee74:	d51d      	bpl.n	810eeb2 <_puts_r+0x66>
 810ee76:	6923      	ldr	r3, [r4, #16]
 810ee78:	b1db      	cbz	r3, 810eeb2 <_puts_r+0x66>
 810ee7a:	3e01      	subs	r6, #1
 810ee7c:	68a3      	ldr	r3, [r4, #8]
 810ee7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810ee82:	3b01      	subs	r3, #1
 810ee84:	60a3      	str	r3, [r4, #8]
 810ee86:	b9e9      	cbnz	r1, 810eec4 <_puts_r+0x78>
 810ee88:	2b00      	cmp	r3, #0
 810ee8a:	da2e      	bge.n	810eeea <_puts_r+0x9e>
 810ee8c:	4622      	mov	r2, r4
 810ee8e:	210a      	movs	r1, #10
 810ee90:	4628      	mov	r0, r5
 810ee92:	f000 f955 	bl	810f140 <__swbuf_r>
 810ee96:	3001      	adds	r0, #1
 810ee98:	d011      	beq.n	810eebe <_puts_r+0x72>
 810ee9a:	200a      	movs	r0, #10
 810ee9c:	e011      	b.n	810eec2 <_puts_r+0x76>
 810ee9e:	4b17      	ldr	r3, [pc, #92]	; (810eefc <_puts_r+0xb0>)
 810eea0:	429c      	cmp	r4, r3
 810eea2:	d101      	bne.n	810eea8 <_puts_r+0x5c>
 810eea4:	68ac      	ldr	r4, [r5, #8]
 810eea6:	e7e3      	b.n	810ee70 <_puts_r+0x24>
 810eea8:	4b15      	ldr	r3, [pc, #84]	; (810ef00 <_puts_r+0xb4>)
 810eeaa:	429c      	cmp	r4, r3
 810eeac:	bf08      	it	eq
 810eeae:	68ec      	ldreq	r4, [r5, #12]
 810eeb0:	e7de      	b.n	810ee70 <_puts_r+0x24>
 810eeb2:	4621      	mov	r1, r4
 810eeb4:	4628      	mov	r0, r5
 810eeb6:	f000 f995 	bl	810f1e4 <__swsetup_r>
 810eeba:	2800      	cmp	r0, #0
 810eebc:	d0dd      	beq.n	810ee7a <_puts_r+0x2e>
 810eebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810eec2:	bd70      	pop	{r4, r5, r6, pc}
 810eec4:	2b00      	cmp	r3, #0
 810eec6:	da04      	bge.n	810eed2 <_puts_r+0x86>
 810eec8:	69a2      	ldr	r2, [r4, #24]
 810eeca:	429a      	cmp	r2, r3
 810eecc:	dc06      	bgt.n	810eedc <_puts_r+0x90>
 810eece:	290a      	cmp	r1, #10
 810eed0:	d004      	beq.n	810eedc <_puts_r+0x90>
 810eed2:	6823      	ldr	r3, [r4, #0]
 810eed4:	1c5a      	adds	r2, r3, #1
 810eed6:	6022      	str	r2, [r4, #0]
 810eed8:	7019      	strb	r1, [r3, #0]
 810eeda:	e7cf      	b.n	810ee7c <_puts_r+0x30>
 810eedc:	4622      	mov	r2, r4
 810eede:	4628      	mov	r0, r5
 810eee0:	f000 f92e 	bl	810f140 <__swbuf_r>
 810eee4:	3001      	adds	r0, #1
 810eee6:	d1c9      	bne.n	810ee7c <_puts_r+0x30>
 810eee8:	e7e9      	b.n	810eebe <_puts_r+0x72>
 810eeea:	6823      	ldr	r3, [r4, #0]
 810eeec:	200a      	movs	r0, #10
 810eeee:	1c5a      	adds	r2, r3, #1
 810eef0:	6022      	str	r2, [r4, #0]
 810eef2:	7018      	strb	r0, [r3, #0]
 810eef4:	e7e5      	b.n	810eec2 <_puts_r+0x76>
 810eef6:	bf00      	nop
 810eef8:	08111a2c 	.word	0x08111a2c
 810eefc:	08111a4c 	.word	0x08111a4c
 810ef00:	08111a0c 	.word	0x08111a0c

0810ef04 <puts>:
 810ef04:	4b02      	ldr	r3, [pc, #8]	; (810ef10 <puts+0xc>)
 810ef06:	4601      	mov	r1, r0
 810ef08:	6818      	ldr	r0, [r3, #0]
 810ef0a:	f7ff bf9f 	b.w	810ee4c <_puts_r>
 810ef0e:	bf00      	nop
 810ef10:	10000038 	.word	0x10000038

0810ef14 <_raise_r>:
 810ef14:	291f      	cmp	r1, #31
 810ef16:	b538      	push	{r3, r4, r5, lr}
 810ef18:	4604      	mov	r4, r0
 810ef1a:	460d      	mov	r5, r1
 810ef1c:	d904      	bls.n	810ef28 <_raise_r+0x14>
 810ef1e:	2316      	movs	r3, #22
 810ef20:	6003      	str	r3, [r0, #0]
 810ef22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ef26:	bd38      	pop	{r3, r4, r5, pc}
 810ef28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810ef2a:	b112      	cbz	r2, 810ef32 <_raise_r+0x1e>
 810ef2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ef30:	b94b      	cbnz	r3, 810ef46 <_raise_r+0x32>
 810ef32:	4620      	mov	r0, r4
 810ef34:	f000 f830 	bl	810ef98 <_getpid_r>
 810ef38:	462a      	mov	r2, r5
 810ef3a:	4601      	mov	r1, r0
 810ef3c:	4620      	mov	r0, r4
 810ef3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ef42:	f000 b817 	b.w	810ef74 <_kill_r>
 810ef46:	2b01      	cmp	r3, #1
 810ef48:	d00a      	beq.n	810ef60 <_raise_r+0x4c>
 810ef4a:	1c59      	adds	r1, r3, #1
 810ef4c:	d103      	bne.n	810ef56 <_raise_r+0x42>
 810ef4e:	2316      	movs	r3, #22
 810ef50:	6003      	str	r3, [r0, #0]
 810ef52:	2001      	movs	r0, #1
 810ef54:	e7e7      	b.n	810ef26 <_raise_r+0x12>
 810ef56:	2400      	movs	r4, #0
 810ef58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ef5c:	4628      	mov	r0, r5
 810ef5e:	4798      	blx	r3
 810ef60:	2000      	movs	r0, #0
 810ef62:	e7e0      	b.n	810ef26 <_raise_r+0x12>

0810ef64 <raise>:
 810ef64:	4b02      	ldr	r3, [pc, #8]	; (810ef70 <raise+0xc>)
 810ef66:	4601      	mov	r1, r0
 810ef68:	6818      	ldr	r0, [r3, #0]
 810ef6a:	f7ff bfd3 	b.w	810ef14 <_raise_r>
 810ef6e:	bf00      	nop
 810ef70:	10000038 	.word	0x10000038

0810ef74 <_kill_r>:
 810ef74:	b538      	push	{r3, r4, r5, lr}
 810ef76:	4c07      	ldr	r4, [pc, #28]	; (810ef94 <_kill_r+0x20>)
 810ef78:	2300      	movs	r3, #0
 810ef7a:	4605      	mov	r5, r0
 810ef7c:	4608      	mov	r0, r1
 810ef7e:	4611      	mov	r1, r2
 810ef80:	6023      	str	r3, [r4, #0]
 810ef82:	f7f2 fe41 	bl	8101c08 <_kill>
 810ef86:	1c43      	adds	r3, r0, #1
 810ef88:	d102      	bne.n	810ef90 <_kill_r+0x1c>
 810ef8a:	6823      	ldr	r3, [r4, #0]
 810ef8c:	b103      	cbz	r3, 810ef90 <_kill_r+0x1c>
 810ef8e:	602b      	str	r3, [r5, #0]
 810ef90:	bd38      	pop	{r3, r4, r5, pc}
 810ef92:	bf00      	nop
 810ef94:	100061cc 	.word	0x100061cc

0810ef98 <_getpid_r>:
 810ef98:	f7f2 be2e 	b.w	8101bf8 <_getpid>

0810ef9c <siprintf>:
 810ef9c:	b40e      	push	{r1, r2, r3}
 810ef9e:	b500      	push	{lr}
 810efa0:	b09c      	sub	sp, #112	; 0x70
 810efa2:	ab1d      	add	r3, sp, #116	; 0x74
 810efa4:	9002      	str	r0, [sp, #8]
 810efa6:	9006      	str	r0, [sp, #24]
 810efa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810efac:	4809      	ldr	r0, [pc, #36]	; (810efd4 <siprintf+0x38>)
 810efae:	9107      	str	r1, [sp, #28]
 810efb0:	9104      	str	r1, [sp, #16]
 810efb2:	4909      	ldr	r1, [pc, #36]	; (810efd8 <siprintf+0x3c>)
 810efb4:	f853 2b04 	ldr.w	r2, [r3], #4
 810efb8:	9105      	str	r1, [sp, #20]
 810efba:	6800      	ldr	r0, [r0, #0]
 810efbc:	9301      	str	r3, [sp, #4]
 810efbe:	a902      	add	r1, sp, #8
 810efc0:	f001 fe1c 	bl	8110bfc <_svfiprintf_r>
 810efc4:	9b02      	ldr	r3, [sp, #8]
 810efc6:	2200      	movs	r2, #0
 810efc8:	701a      	strb	r2, [r3, #0]
 810efca:	b01c      	add	sp, #112	; 0x70
 810efcc:	f85d eb04 	ldr.w	lr, [sp], #4
 810efd0:	b003      	add	sp, #12
 810efd2:	4770      	bx	lr
 810efd4:	10000038 	.word	0x10000038
 810efd8:	ffff0208 	.word	0xffff0208

0810efdc <_strtol_l.isra.0>:
 810efdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810efe0:	4680      	mov	r8, r0
 810efe2:	4689      	mov	r9, r1
 810efe4:	4692      	mov	sl, r2
 810efe6:	461e      	mov	r6, r3
 810efe8:	460f      	mov	r7, r1
 810efea:	463d      	mov	r5, r7
 810efec:	9808      	ldr	r0, [sp, #32]
 810efee:	f815 4b01 	ldrb.w	r4, [r5], #1
 810eff2:	f001 f987 	bl	8110304 <__locale_ctype_ptr_l>
 810eff6:	4420      	add	r0, r4
 810eff8:	7843      	ldrb	r3, [r0, #1]
 810effa:	f013 0308 	ands.w	r3, r3, #8
 810effe:	d132      	bne.n	810f066 <_strtol_l.isra.0+0x8a>
 810f000:	2c2d      	cmp	r4, #45	; 0x2d
 810f002:	d132      	bne.n	810f06a <_strtol_l.isra.0+0x8e>
 810f004:	787c      	ldrb	r4, [r7, #1]
 810f006:	1cbd      	adds	r5, r7, #2
 810f008:	2201      	movs	r2, #1
 810f00a:	2e00      	cmp	r6, #0
 810f00c:	d05d      	beq.n	810f0ca <_strtol_l.isra.0+0xee>
 810f00e:	2e10      	cmp	r6, #16
 810f010:	d109      	bne.n	810f026 <_strtol_l.isra.0+0x4a>
 810f012:	2c30      	cmp	r4, #48	; 0x30
 810f014:	d107      	bne.n	810f026 <_strtol_l.isra.0+0x4a>
 810f016:	782b      	ldrb	r3, [r5, #0]
 810f018:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810f01c:	2b58      	cmp	r3, #88	; 0x58
 810f01e:	d14f      	bne.n	810f0c0 <_strtol_l.isra.0+0xe4>
 810f020:	786c      	ldrb	r4, [r5, #1]
 810f022:	2610      	movs	r6, #16
 810f024:	3502      	adds	r5, #2
 810f026:	2a00      	cmp	r2, #0
 810f028:	bf14      	ite	ne
 810f02a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 810f02e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 810f032:	2700      	movs	r7, #0
 810f034:	fbb1 fcf6 	udiv	ip, r1, r6
 810f038:	4638      	mov	r0, r7
 810f03a:	fb06 1e1c 	mls	lr, r6, ip, r1
 810f03e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 810f042:	2b09      	cmp	r3, #9
 810f044:	d817      	bhi.n	810f076 <_strtol_l.isra.0+0x9a>
 810f046:	461c      	mov	r4, r3
 810f048:	42a6      	cmp	r6, r4
 810f04a:	dd23      	ble.n	810f094 <_strtol_l.isra.0+0xb8>
 810f04c:	1c7b      	adds	r3, r7, #1
 810f04e:	d007      	beq.n	810f060 <_strtol_l.isra.0+0x84>
 810f050:	4584      	cmp	ip, r0
 810f052:	d31c      	bcc.n	810f08e <_strtol_l.isra.0+0xb2>
 810f054:	d101      	bne.n	810f05a <_strtol_l.isra.0+0x7e>
 810f056:	45a6      	cmp	lr, r4
 810f058:	db19      	blt.n	810f08e <_strtol_l.isra.0+0xb2>
 810f05a:	fb00 4006 	mla	r0, r0, r6, r4
 810f05e:	2701      	movs	r7, #1
 810f060:	f815 4b01 	ldrb.w	r4, [r5], #1
 810f064:	e7eb      	b.n	810f03e <_strtol_l.isra.0+0x62>
 810f066:	462f      	mov	r7, r5
 810f068:	e7bf      	b.n	810efea <_strtol_l.isra.0+0xe>
 810f06a:	2c2b      	cmp	r4, #43	; 0x2b
 810f06c:	bf04      	itt	eq
 810f06e:	1cbd      	addeq	r5, r7, #2
 810f070:	787c      	ldrbeq	r4, [r7, #1]
 810f072:	461a      	mov	r2, r3
 810f074:	e7c9      	b.n	810f00a <_strtol_l.isra.0+0x2e>
 810f076:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 810f07a:	2b19      	cmp	r3, #25
 810f07c:	d801      	bhi.n	810f082 <_strtol_l.isra.0+0xa6>
 810f07e:	3c37      	subs	r4, #55	; 0x37
 810f080:	e7e2      	b.n	810f048 <_strtol_l.isra.0+0x6c>
 810f082:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 810f086:	2b19      	cmp	r3, #25
 810f088:	d804      	bhi.n	810f094 <_strtol_l.isra.0+0xb8>
 810f08a:	3c57      	subs	r4, #87	; 0x57
 810f08c:	e7dc      	b.n	810f048 <_strtol_l.isra.0+0x6c>
 810f08e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810f092:	e7e5      	b.n	810f060 <_strtol_l.isra.0+0x84>
 810f094:	1c7b      	adds	r3, r7, #1
 810f096:	d108      	bne.n	810f0aa <_strtol_l.isra.0+0xce>
 810f098:	2322      	movs	r3, #34	; 0x22
 810f09a:	f8c8 3000 	str.w	r3, [r8]
 810f09e:	4608      	mov	r0, r1
 810f0a0:	f1ba 0f00 	cmp.w	sl, #0
 810f0a4:	d107      	bne.n	810f0b6 <_strtol_l.isra.0+0xda>
 810f0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f0aa:	b102      	cbz	r2, 810f0ae <_strtol_l.isra.0+0xd2>
 810f0ac:	4240      	negs	r0, r0
 810f0ae:	f1ba 0f00 	cmp.w	sl, #0
 810f0b2:	d0f8      	beq.n	810f0a6 <_strtol_l.isra.0+0xca>
 810f0b4:	b10f      	cbz	r7, 810f0ba <_strtol_l.isra.0+0xde>
 810f0b6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 810f0ba:	f8ca 9000 	str.w	r9, [sl]
 810f0be:	e7f2      	b.n	810f0a6 <_strtol_l.isra.0+0xca>
 810f0c0:	2430      	movs	r4, #48	; 0x30
 810f0c2:	2e00      	cmp	r6, #0
 810f0c4:	d1af      	bne.n	810f026 <_strtol_l.isra.0+0x4a>
 810f0c6:	2608      	movs	r6, #8
 810f0c8:	e7ad      	b.n	810f026 <_strtol_l.isra.0+0x4a>
 810f0ca:	2c30      	cmp	r4, #48	; 0x30
 810f0cc:	d0a3      	beq.n	810f016 <_strtol_l.isra.0+0x3a>
 810f0ce:	260a      	movs	r6, #10
 810f0d0:	e7a9      	b.n	810f026 <_strtol_l.isra.0+0x4a>
	...

0810f0d4 <strtol>:
 810f0d4:	4b08      	ldr	r3, [pc, #32]	; (810f0f8 <strtol+0x24>)
 810f0d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810f0d8:	681c      	ldr	r4, [r3, #0]
 810f0da:	4d08      	ldr	r5, [pc, #32]	; (810f0fc <strtol+0x28>)
 810f0dc:	6a23      	ldr	r3, [r4, #32]
 810f0de:	2b00      	cmp	r3, #0
 810f0e0:	bf08      	it	eq
 810f0e2:	462b      	moveq	r3, r5
 810f0e4:	9300      	str	r3, [sp, #0]
 810f0e6:	4613      	mov	r3, r2
 810f0e8:	460a      	mov	r2, r1
 810f0ea:	4601      	mov	r1, r0
 810f0ec:	4620      	mov	r0, r4
 810f0ee:	f7ff ff75 	bl	810efdc <_strtol_l.isra.0>
 810f0f2:	b003      	add	sp, #12
 810f0f4:	bd30      	pop	{r4, r5, pc}
 810f0f6:	bf00      	nop
 810f0f8:	10000038 	.word	0x10000038
 810f0fc:	1000009c 	.word	0x1000009c

0810f100 <_vsiprintf_r>:
 810f100:	b500      	push	{lr}
 810f102:	b09b      	sub	sp, #108	; 0x6c
 810f104:	9100      	str	r1, [sp, #0]
 810f106:	9104      	str	r1, [sp, #16]
 810f108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810f10c:	9105      	str	r1, [sp, #20]
 810f10e:	9102      	str	r1, [sp, #8]
 810f110:	4905      	ldr	r1, [pc, #20]	; (810f128 <_vsiprintf_r+0x28>)
 810f112:	9103      	str	r1, [sp, #12]
 810f114:	4669      	mov	r1, sp
 810f116:	f001 fd71 	bl	8110bfc <_svfiprintf_r>
 810f11a:	9b00      	ldr	r3, [sp, #0]
 810f11c:	2200      	movs	r2, #0
 810f11e:	701a      	strb	r2, [r3, #0]
 810f120:	b01b      	add	sp, #108	; 0x6c
 810f122:	f85d fb04 	ldr.w	pc, [sp], #4
 810f126:	bf00      	nop
 810f128:	ffff0208 	.word	0xffff0208

0810f12c <vsiprintf>:
 810f12c:	4613      	mov	r3, r2
 810f12e:	460a      	mov	r2, r1
 810f130:	4601      	mov	r1, r0
 810f132:	4802      	ldr	r0, [pc, #8]	; (810f13c <vsiprintf+0x10>)
 810f134:	6800      	ldr	r0, [r0, #0]
 810f136:	f7ff bfe3 	b.w	810f100 <_vsiprintf_r>
 810f13a:	bf00      	nop
 810f13c:	10000038 	.word	0x10000038

0810f140 <__swbuf_r>:
 810f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f142:	460e      	mov	r6, r1
 810f144:	4614      	mov	r4, r2
 810f146:	4605      	mov	r5, r0
 810f148:	b118      	cbz	r0, 810f152 <__swbuf_r+0x12>
 810f14a:	6983      	ldr	r3, [r0, #24]
 810f14c:	b90b      	cbnz	r3, 810f152 <__swbuf_r+0x12>
 810f14e:	f001 f84f 	bl	81101f0 <__sinit>
 810f152:	4b21      	ldr	r3, [pc, #132]	; (810f1d8 <__swbuf_r+0x98>)
 810f154:	429c      	cmp	r4, r3
 810f156:	d12a      	bne.n	810f1ae <__swbuf_r+0x6e>
 810f158:	686c      	ldr	r4, [r5, #4]
 810f15a:	69a3      	ldr	r3, [r4, #24]
 810f15c:	60a3      	str	r3, [r4, #8]
 810f15e:	89a3      	ldrh	r3, [r4, #12]
 810f160:	071a      	lsls	r2, r3, #28
 810f162:	d52e      	bpl.n	810f1c2 <__swbuf_r+0x82>
 810f164:	6923      	ldr	r3, [r4, #16]
 810f166:	b363      	cbz	r3, 810f1c2 <__swbuf_r+0x82>
 810f168:	6923      	ldr	r3, [r4, #16]
 810f16a:	6820      	ldr	r0, [r4, #0]
 810f16c:	1ac0      	subs	r0, r0, r3
 810f16e:	6963      	ldr	r3, [r4, #20]
 810f170:	b2f6      	uxtb	r6, r6
 810f172:	4283      	cmp	r3, r0
 810f174:	4637      	mov	r7, r6
 810f176:	dc04      	bgt.n	810f182 <__swbuf_r+0x42>
 810f178:	4621      	mov	r1, r4
 810f17a:	4628      	mov	r0, r5
 810f17c:	f000 ffce 	bl	811011c <_fflush_r>
 810f180:	bb28      	cbnz	r0, 810f1ce <__swbuf_r+0x8e>
 810f182:	68a3      	ldr	r3, [r4, #8]
 810f184:	3b01      	subs	r3, #1
 810f186:	60a3      	str	r3, [r4, #8]
 810f188:	6823      	ldr	r3, [r4, #0]
 810f18a:	1c5a      	adds	r2, r3, #1
 810f18c:	6022      	str	r2, [r4, #0]
 810f18e:	701e      	strb	r6, [r3, #0]
 810f190:	6963      	ldr	r3, [r4, #20]
 810f192:	3001      	adds	r0, #1
 810f194:	4283      	cmp	r3, r0
 810f196:	d004      	beq.n	810f1a2 <__swbuf_r+0x62>
 810f198:	89a3      	ldrh	r3, [r4, #12]
 810f19a:	07db      	lsls	r3, r3, #31
 810f19c:	d519      	bpl.n	810f1d2 <__swbuf_r+0x92>
 810f19e:	2e0a      	cmp	r6, #10
 810f1a0:	d117      	bne.n	810f1d2 <__swbuf_r+0x92>
 810f1a2:	4621      	mov	r1, r4
 810f1a4:	4628      	mov	r0, r5
 810f1a6:	f000 ffb9 	bl	811011c <_fflush_r>
 810f1aa:	b190      	cbz	r0, 810f1d2 <__swbuf_r+0x92>
 810f1ac:	e00f      	b.n	810f1ce <__swbuf_r+0x8e>
 810f1ae:	4b0b      	ldr	r3, [pc, #44]	; (810f1dc <__swbuf_r+0x9c>)
 810f1b0:	429c      	cmp	r4, r3
 810f1b2:	d101      	bne.n	810f1b8 <__swbuf_r+0x78>
 810f1b4:	68ac      	ldr	r4, [r5, #8]
 810f1b6:	e7d0      	b.n	810f15a <__swbuf_r+0x1a>
 810f1b8:	4b09      	ldr	r3, [pc, #36]	; (810f1e0 <__swbuf_r+0xa0>)
 810f1ba:	429c      	cmp	r4, r3
 810f1bc:	bf08      	it	eq
 810f1be:	68ec      	ldreq	r4, [r5, #12]
 810f1c0:	e7cb      	b.n	810f15a <__swbuf_r+0x1a>
 810f1c2:	4621      	mov	r1, r4
 810f1c4:	4628      	mov	r0, r5
 810f1c6:	f000 f80d 	bl	810f1e4 <__swsetup_r>
 810f1ca:	2800      	cmp	r0, #0
 810f1cc:	d0cc      	beq.n	810f168 <__swbuf_r+0x28>
 810f1ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810f1d2:	4638      	mov	r0, r7
 810f1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810f1d6:	bf00      	nop
 810f1d8:	08111a2c 	.word	0x08111a2c
 810f1dc:	08111a4c 	.word	0x08111a4c
 810f1e0:	08111a0c 	.word	0x08111a0c

0810f1e4 <__swsetup_r>:
 810f1e4:	4b32      	ldr	r3, [pc, #200]	; (810f2b0 <__swsetup_r+0xcc>)
 810f1e6:	b570      	push	{r4, r5, r6, lr}
 810f1e8:	681d      	ldr	r5, [r3, #0]
 810f1ea:	4606      	mov	r6, r0
 810f1ec:	460c      	mov	r4, r1
 810f1ee:	b125      	cbz	r5, 810f1fa <__swsetup_r+0x16>
 810f1f0:	69ab      	ldr	r3, [r5, #24]
 810f1f2:	b913      	cbnz	r3, 810f1fa <__swsetup_r+0x16>
 810f1f4:	4628      	mov	r0, r5
 810f1f6:	f000 fffb 	bl	81101f0 <__sinit>
 810f1fa:	4b2e      	ldr	r3, [pc, #184]	; (810f2b4 <__swsetup_r+0xd0>)
 810f1fc:	429c      	cmp	r4, r3
 810f1fe:	d10f      	bne.n	810f220 <__swsetup_r+0x3c>
 810f200:	686c      	ldr	r4, [r5, #4]
 810f202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810f206:	b29a      	uxth	r2, r3
 810f208:	0715      	lsls	r5, r2, #28
 810f20a:	d42c      	bmi.n	810f266 <__swsetup_r+0x82>
 810f20c:	06d0      	lsls	r0, r2, #27
 810f20e:	d411      	bmi.n	810f234 <__swsetup_r+0x50>
 810f210:	2209      	movs	r2, #9
 810f212:	6032      	str	r2, [r6, #0]
 810f214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810f218:	81a3      	strh	r3, [r4, #12]
 810f21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810f21e:	e03e      	b.n	810f29e <__swsetup_r+0xba>
 810f220:	4b25      	ldr	r3, [pc, #148]	; (810f2b8 <__swsetup_r+0xd4>)
 810f222:	429c      	cmp	r4, r3
 810f224:	d101      	bne.n	810f22a <__swsetup_r+0x46>
 810f226:	68ac      	ldr	r4, [r5, #8]
 810f228:	e7eb      	b.n	810f202 <__swsetup_r+0x1e>
 810f22a:	4b24      	ldr	r3, [pc, #144]	; (810f2bc <__swsetup_r+0xd8>)
 810f22c:	429c      	cmp	r4, r3
 810f22e:	bf08      	it	eq
 810f230:	68ec      	ldreq	r4, [r5, #12]
 810f232:	e7e6      	b.n	810f202 <__swsetup_r+0x1e>
 810f234:	0751      	lsls	r1, r2, #29
 810f236:	d512      	bpl.n	810f25e <__swsetup_r+0x7a>
 810f238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810f23a:	b141      	cbz	r1, 810f24e <__swsetup_r+0x6a>
 810f23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810f240:	4299      	cmp	r1, r3
 810f242:	d002      	beq.n	810f24a <__swsetup_r+0x66>
 810f244:	4630      	mov	r0, r6
 810f246:	f001 fbd7 	bl	81109f8 <_free_r>
 810f24a:	2300      	movs	r3, #0
 810f24c:	6363      	str	r3, [r4, #52]	; 0x34
 810f24e:	89a3      	ldrh	r3, [r4, #12]
 810f250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810f254:	81a3      	strh	r3, [r4, #12]
 810f256:	2300      	movs	r3, #0
 810f258:	6063      	str	r3, [r4, #4]
 810f25a:	6923      	ldr	r3, [r4, #16]
 810f25c:	6023      	str	r3, [r4, #0]
 810f25e:	89a3      	ldrh	r3, [r4, #12]
 810f260:	f043 0308 	orr.w	r3, r3, #8
 810f264:	81a3      	strh	r3, [r4, #12]
 810f266:	6923      	ldr	r3, [r4, #16]
 810f268:	b94b      	cbnz	r3, 810f27e <__swsetup_r+0x9a>
 810f26a:	89a3      	ldrh	r3, [r4, #12]
 810f26c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810f270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810f274:	d003      	beq.n	810f27e <__swsetup_r+0x9a>
 810f276:	4621      	mov	r1, r4
 810f278:	4630      	mov	r0, r6
 810f27a:	f001 f879 	bl	8110370 <__smakebuf_r>
 810f27e:	89a2      	ldrh	r2, [r4, #12]
 810f280:	f012 0301 	ands.w	r3, r2, #1
 810f284:	d00c      	beq.n	810f2a0 <__swsetup_r+0xbc>
 810f286:	2300      	movs	r3, #0
 810f288:	60a3      	str	r3, [r4, #8]
 810f28a:	6963      	ldr	r3, [r4, #20]
 810f28c:	425b      	negs	r3, r3
 810f28e:	61a3      	str	r3, [r4, #24]
 810f290:	6923      	ldr	r3, [r4, #16]
 810f292:	b953      	cbnz	r3, 810f2aa <__swsetup_r+0xc6>
 810f294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810f298:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 810f29c:	d1ba      	bne.n	810f214 <__swsetup_r+0x30>
 810f29e:	bd70      	pop	{r4, r5, r6, pc}
 810f2a0:	0792      	lsls	r2, r2, #30
 810f2a2:	bf58      	it	pl
 810f2a4:	6963      	ldrpl	r3, [r4, #20]
 810f2a6:	60a3      	str	r3, [r4, #8]
 810f2a8:	e7f2      	b.n	810f290 <__swsetup_r+0xac>
 810f2aa:	2000      	movs	r0, #0
 810f2ac:	e7f7      	b.n	810f29e <__swsetup_r+0xba>
 810f2ae:	bf00      	nop
 810f2b0:	10000038 	.word	0x10000038
 810f2b4:	08111a2c 	.word	0x08111a2c
 810f2b8:	08111a4c 	.word	0x08111a4c
 810f2bc:	08111a0c 	.word	0x08111a0c

0810f2c0 <__register_exitproc>:
 810f2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810f2c4:	4d2c      	ldr	r5, [pc, #176]	; (810f378 <__register_exitproc+0xb8>)
 810f2c6:	682c      	ldr	r4, [r5, #0]
 810f2c8:	4607      	mov	r7, r0
 810f2ca:	460e      	mov	r6, r1
 810f2cc:	4691      	mov	r9, r2
 810f2ce:	4698      	mov	r8, r3
 810f2d0:	b934      	cbnz	r4, 810f2e0 <__register_exitproc+0x20>
 810f2d2:	4b2a      	ldr	r3, [pc, #168]	; (810f37c <__register_exitproc+0xbc>)
 810f2d4:	4c2a      	ldr	r4, [pc, #168]	; (810f380 <__register_exitproc+0xc0>)
 810f2d6:	602c      	str	r4, [r5, #0]
 810f2d8:	b113      	cbz	r3, 810f2e0 <__register_exitproc+0x20>
 810f2da:	681b      	ldr	r3, [r3, #0]
 810f2dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 810f2e0:	6863      	ldr	r3, [r4, #4]
 810f2e2:	2b1f      	cmp	r3, #31
 810f2e4:	dd3d      	ble.n	810f362 <__register_exitproc+0xa2>
 810f2e6:	4b27      	ldr	r3, [pc, #156]	; (810f384 <__register_exitproc+0xc4>)
 810f2e8:	b91b      	cbnz	r3, 810f2f2 <__register_exitproc+0x32>
 810f2ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810f2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810f2f2:	208c      	movs	r0, #140	; 0x8c
 810f2f4:	f001 f87c 	bl	81103f0 <malloc>
 810f2f8:	4604      	mov	r4, r0
 810f2fa:	2800      	cmp	r0, #0
 810f2fc:	d0f5      	beq.n	810f2ea <__register_exitproc+0x2a>
 810f2fe:	2300      	movs	r3, #0
 810f300:	682a      	ldr	r2, [r5, #0]
 810f302:	6002      	str	r2, [r0, #0]
 810f304:	6043      	str	r3, [r0, #4]
 810f306:	6028      	str	r0, [r5, #0]
 810f308:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 810f30c:	b30f      	cbz	r7, 810f352 <__register_exitproc+0x92>
 810f30e:	f44f 7084 	mov.w	r0, #264	; 0x108
 810f312:	f001 f86d 	bl	81103f0 <malloc>
 810f316:	2800      	cmp	r0, #0
 810f318:	d0e7      	beq.n	810f2ea <__register_exitproc+0x2a>
 810f31a:	2300      	movs	r3, #0
 810f31c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 810f320:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 810f324:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 810f328:	6862      	ldr	r2, [r4, #4]
 810f32a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 810f32e:	2301      	movs	r3, #1
 810f330:	4093      	lsls	r3, r2
 810f332:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 810f336:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 810f33a:	431a      	orrs	r2, r3
 810f33c:	2f02      	cmp	r7, #2
 810f33e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 810f342:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 810f346:	bf02      	ittt	eq
 810f348:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 810f34c:	4313      	orreq	r3, r2
 810f34e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 810f352:	6863      	ldr	r3, [r4, #4]
 810f354:	1c5a      	adds	r2, r3, #1
 810f356:	3302      	adds	r3, #2
 810f358:	6062      	str	r2, [r4, #4]
 810f35a:	2000      	movs	r0, #0
 810f35c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 810f360:	e7c5      	b.n	810f2ee <__register_exitproc+0x2e>
 810f362:	2f00      	cmp	r7, #0
 810f364:	d0f5      	beq.n	810f352 <__register_exitproc+0x92>
 810f366:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 810f36a:	2800      	cmp	r0, #0
 810f36c:	d1dc      	bne.n	810f328 <__register_exitproc+0x68>
 810f36e:	4b05      	ldr	r3, [pc, #20]	; (810f384 <__register_exitproc+0xc4>)
 810f370:	2b00      	cmp	r3, #0
 810f372:	d0ba      	beq.n	810f2ea <__register_exitproc+0x2a>
 810f374:	e7cb      	b.n	810f30e <__register_exitproc+0x4e>
 810f376:	bf00      	nop
 810f378:	100057fc 	.word	0x100057fc
 810f37c:	00000000 	.word	0x00000000
 810f380:	10005770 	.word	0x10005770
 810f384:	081103f1 	.word	0x081103f1

0810f388 <quorem>:
 810f388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f38c:	6903      	ldr	r3, [r0, #16]
 810f38e:	690c      	ldr	r4, [r1, #16]
 810f390:	42a3      	cmp	r3, r4
 810f392:	4680      	mov	r8, r0
 810f394:	f2c0 8082 	blt.w	810f49c <quorem+0x114>
 810f398:	3c01      	subs	r4, #1
 810f39a:	f101 0714 	add.w	r7, r1, #20
 810f39e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 810f3a2:	f100 0614 	add.w	r6, r0, #20
 810f3a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 810f3aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 810f3ae:	eb06 030c 	add.w	r3, r6, ip
 810f3b2:	3501      	adds	r5, #1
 810f3b4:	eb07 090c 	add.w	r9, r7, ip
 810f3b8:	9301      	str	r3, [sp, #4]
 810f3ba:	fbb0 f5f5 	udiv	r5, r0, r5
 810f3be:	b395      	cbz	r5, 810f426 <quorem+0x9e>
 810f3c0:	f04f 0a00 	mov.w	sl, #0
 810f3c4:	4638      	mov	r0, r7
 810f3c6:	46b6      	mov	lr, r6
 810f3c8:	46d3      	mov	fp, sl
 810f3ca:	f850 2b04 	ldr.w	r2, [r0], #4
 810f3ce:	b293      	uxth	r3, r2
 810f3d0:	fb05 a303 	mla	r3, r5, r3, sl
 810f3d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810f3d8:	b29b      	uxth	r3, r3
 810f3da:	ebab 0303 	sub.w	r3, fp, r3
 810f3de:	0c12      	lsrs	r2, r2, #16
 810f3e0:	f8de b000 	ldr.w	fp, [lr]
 810f3e4:	fb05 a202 	mla	r2, r5, r2, sl
 810f3e8:	fa13 f38b 	uxtah	r3, r3, fp
 810f3ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 810f3f0:	fa1f fb82 	uxth.w	fp, r2
 810f3f4:	f8de 2000 	ldr.w	r2, [lr]
 810f3f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 810f3fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810f400:	b29b      	uxth	r3, r3
 810f402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810f406:	4581      	cmp	r9, r0
 810f408:	ea4f 4b22 	mov.w	fp, r2, asr #16
 810f40c:	f84e 3b04 	str.w	r3, [lr], #4
 810f410:	d2db      	bcs.n	810f3ca <quorem+0x42>
 810f412:	f856 300c 	ldr.w	r3, [r6, ip]
 810f416:	b933      	cbnz	r3, 810f426 <quorem+0x9e>
 810f418:	9b01      	ldr	r3, [sp, #4]
 810f41a:	3b04      	subs	r3, #4
 810f41c:	429e      	cmp	r6, r3
 810f41e:	461a      	mov	r2, r3
 810f420:	d330      	bcc.n	810f484 <quorem+0xfc>
 810f422:	f8c8 4010 	str.w	r4, [r8, #16]
 810f426:	4640      	mov	r0, r8
 810f428:	f001 fa12 	bl	8110850 <__mcmp>
 810f42c:	2800      	cmp	r0, #0
 810f42e:	db25      	blt.n	810f47c <quorem+0xf4>
 810f430:	3501      	adds	r5, #1
 810f432:	4630      	mov	r0, r6
 810f434:	f04f 0c00 	mov.w	ip, #0
 810f438:	f857 2b04 	ldr.w	r2, [r7], #4
 810f43c:	f8d0 e000 	ldr.w	lr, [r0]
 810f440:	b293      	uxth	r3, r2
 810f442:	ebac 0303 	sub.w	r3, ip, r3
 810f446:	0c12      	lsrs	r2, r2, #16
 810f448:	fa13 f38e 	uxtah	r3, r3, lr
 810f44c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810f450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810f454:	b29b      	uxth	r3, r3
 810f456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810f45a:	45b9      	cmp	r9, r7
 810f45c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810f460:	f840 3b04 	str.w	r3, [r0], #4
 810f464:	d2e8      	bcs.n	810f438 <quorem+0xb0>
 810f466:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 810f46a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 810f46e:	b92a      	cbnz	r2, 810f47c <quorem+0xf4>
 810f470:	3b04      	subs	r3, #4
 810f472:	429e      	cmp	r6, r3
 810f474:	461a      	mov	r2, r3
 810f476:	d30b      	bcc.n	810f490 <quorem+0x108>
 810f478:	f8c8 4010 	str.w	r4, [r8, #16]
 810f47c:	4628      	mov	r0, r5
 810f47e:	b003      	add	sp, #12
 810f480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f484:	6812      	ldr	r2, [r2, #0]
 810f486:	3b04      	subs	r3, #4
 810f488:	2a00      	cmp	r2, #0
 810f48a:	d1ca      	bne.n	810f422 <quorem+0x9a>
 810f48c:	3c01      	subs	r4, #1
 810f48e:	e7c5      	b.n	810f41c <quorem+0x94>
 810f490:	6812      	ldr	r2, [r2, #0]
 810f492:	3b04      	subs	r3, #4
 810f494:	2a00      	cmp	r2, #0
 810f496:	d1ef      	bne.n	810f478 <quorem+0xf0>
 810f498:	3c01      	subs	r4, #1
 810f49a:	e7ea      	b.n	810f472 <quorem+0xea>
 810f49c:	2000      	movs	r0, #0
 810f49e:	e7ee      	b.n	810f47e <quorem+0xf6>

0810f4a0 <_dtoa_r>:
 810f4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f4a4:	ec57 6b10 	vmov	r6, r7, d0
 810f4a8:	b097      	sub	sp, #92	; 0x5c
 810f4aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810f4ac:	9106      	str	r1, [sp, #24]
 810f4ae:	4604      	mov	r4, r0
 810f4b0:	920b      	str	r2, [sp, #44]	; 0x2c
 810f4b2:	9312      	str	r3, [sp, #72]	; 0x48
 810f4b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810f4b8:	e9cd 6700 	strd	r6, r7, [sp]
 810f4bc:	b93d      	cbnz	r5, 810f4ce <_dtoa_r+0x2e>
 810f4be:	2010      	movs	r0, #16
 810f4c0:	f000 ff96 	bl	81103f0 <malloc>
 810f4c4:	6260      	str	r0, [r4, #36]	; 0x24
 810f4c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810f4ca:	6005      	str	r5, [r0, #0]
 810f4cc:	60c5      	str	r5, [r0, #12]
 810f4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810f4d0:	6819      	ldr	r1, [r3, #0]
 810f4d2:	b151      	cbz	r1, 810f4ea <_dtoa_r+0x4a>
 810f4d4:	685a      	ldr	r2, [r3, #4]
 810f4d6:	604a      	str	r2, [r1, #4]
 810f4d8:	2301      	movs	r3, #1
 810f4da:	4093      	lsls	r3, r2
 810f4dc:	608b      	str	r3, [r1, #8]
 810f4de:	4620      	mov	r0, r4
 810f4e0:	f000 ffd4 	bl	811048c <_Bfree>
 810f4e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810f4e6:	2200      	movs	r2, #0
 810f4e8:	601a      	str	r2, [r3, #0]
 810f4ea:	1e3b      	subs	r3, r7, #0
 810f4ec:	bfbb      	ittet	lt
 810f4ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810f4f2:	9301      	strlt	r3, [sp, #4]
 810f4f4:	2300      	movge	r3, #0
 810f4f6:	2201      	movlt	r2, #1
 810f4f8:	bfac      	ite	ge
 810f4fa:	f8c8 3000 	strge.w	r3, [r8]
 810f4fe:	f8c8 2000 	strlt.w	r2, [r8]
 810f502:	4baf      	ldr	r3, [pc, #700]	; (810f7c0 <_dtoa_r+0x320>)
 810f504:	f8dd 8004 	ldr.w	r8, [sp, #4]
 810f508:	ea33 0308 	bics.w	r3, r3, r8
 810f50c:	d114      	bne.n	810f538 <_dtoa_r+0x98>
 810f50e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810f510:	f242 730f 	movw	r3, #9999	; 0x270f
 810f514:	6013      	str	r3, [r2, #0]
 810f516:	9b00      	ldr	r3, [sp, #0]
 810f518:	b923      	cbnz	r3, 810f524 <_dtoa_r+0x84>
 810f51a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 810f51e:	2800      	cmp	r0, #0
 810f520:	f000 8542 	beq.w	810ffa8 <_dtoa_r+0xb08>
 810f524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810f526:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 810f7d4 <_dtoa_r+0x334>
 810f52a:	2b00      	cmp	r3, #0
 810f52c:	f000 8544 	beq.w	810ffb8 <_dtoa_r+0xb18>
 810f530:	f10b 0303 	add.w	r3, fp, #3
 810f534:	f000 bd3e 	b.w	810ffb4 <_dtoa_r+0xb14>
 810f538:	e9dd 6700 	ldrd	r6, r7, [sp]
 810f53c:	2200      	movs	r2, #0
 810f53e:	2300      	movs	r3, #0
 810f540:	4630      	mov	r0, r6
 810f542:	4639      	mov	r1, r7
 810f544:	f7f1 fb48 	bl	8100bd8 <__aeabi_dcmpeq>
 810f548:	4681      	mov	r9, r0
 810f54a:	b168      	cbz	r0, 810f568 <_dtoa_r+0xc8>
 810f54c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810f54e:	2301      	movs	r3, #1
 810f550:	6013      	str	r3, [r2, #0]
 810f552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810f554:	2b00      	cmp	r3, #0
 810f556:	f000 8524 	beq.w	810ffa2 <_dtoa_r+0xb02>
 810f55a:	4b9a      	ldr	r3, [pc, #616]	; (810f7c4 <_dtoa_r+0x324>)
 810f55c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810f55e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 810f562:	6013      	str	r3, [r2, #0]
 810f564:	f000 bd28 	b.w	810ffb8 <_dtoa_r+0xb18>
 810f568:	aa14      	add	r2, sp, #80	; 0x50
 810f56a:	a915      	add	r1, sp, #84	; 0x54
 810f56c:	ec47 6b10 	vmov	d0, r6, r7
 810f570:	4620      	mov	r0, r4
 810f572:	f001 f9e4 	bl	811093e <__d2b>
 810f576:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810f57a:	9004      	str	r0, [sp, #16]
 810f57c:	2d00      	cmp	r5, #0
 810f57e:	d07c      	beq.n	810f67a <_dtoa_r+0x1da>
 810f580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810f584:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 810f588:	46b2      	mov	sl, r6
 810f58a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 810f58e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810f592:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 810f596:	2200      	movs	r2, #0
 810f598:	4b8b      	ldr	r3, [pc, #556]	; (810f7c8 <_dtoa_r+0x328>)
 810f59a:	4650      	mov	r0, sl
 810f59c:	4659      	mov	r1, fp
 810f59e:	f7f0 fefb 	bl	8100398 <__aeabi_dsub>
 810f5a2:	a381      	add	r3, pc, #516	; (adr r3, 810f7a8 <_dtoa_r+0x308>)
 810f5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f5a8:	f7f1 f8ae 	bl	8100708 <__aeabi_dmul>
 810f5ac:	a380      	add	r3, pc, #512	; (adr r3, 810f7b0 <_dtoa_r+0x310>)
 810f5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f5b2:	f7f0 fef3 	bl	810039c <__adddf3>
 810f5b6:	4606      	mov	r6, r0
 810f5b8:	4628      	mov	r0, r5
 810f5ba:	460f      	mov	r7, r1
 810f5bc:	f7f1 f83a 	bl	8100634 <__aeabi_i2d>
 810f5c0:	a37d      	add	r3, pc, #500	; (adr r3, 810f7b8 <_dtoa_r+0x318>)
 810f5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f5c6:	f7f1 f89f 	bl	8100708 <__aeabi_dmul>
 810f5ca:	4602      	mov	r2, r0
 810f5cc:	460b      	mov	r3, r1
 810f5ce:	4630      	mov	r0, r6
 810f5d0:	4639      	mov	r1, r7
 810f5d2:	f7f0 fee3 	bl	810039c <__adddf3>
 810f5d6:	4606      	mov	r6, r0
 810f5d8:	460f      	mov	r7, r1
 810f5da:	f7f1 fb45 	bl	8100c68 <__aeabi_d2iz>
 810f5de:	2200      	movs	r2, #0
 810f5e0:	4682      	mov	sl, r0
 810f5e2:	2300      	movs	r3, #0
 810f5e4:	4630      	mov	r0, r6
 810f5e6:	4639      	mov	r1, r7
 810f5e8:	f7f1 fb00 	bl	8100bec <__aeabi_dcmplt>
 810f5ec:	b148      	cbz	r0, 810f602 <_dtoa_r+0x162>
 810f5ee:	4650      	mov	r0, sl
 810f5f0:	f7f1 f820 	bl	8100634 <__aeabi_i2d>
 810f5f4:	4632      	mov	r2, r6
 810f5f6:	463b      	mov	r3, r7
 810f5f8:	f7f1 faee 	bl	8100bd8 <__aeabi_dcmpeq>
 810f5fc:	b908      	cbnz	r0, 810f602 <_dtoa_r+0x162>
 810f5fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810f602:	f1ba 0f16 	cmp.w	sl, #22
 810f606:	d859      	bhi.n	810f6bc <_dtoa_r+0x21c>
 810f608:	4970      	ldr	r1, [pc, #448]	; (810f7cc <_dtoa_r+0x32c>)
 810f60a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810f60e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f612:	e9d1 0100 	ldrd	r0, r1, [r1]
 810f616:	f7f1 fb07 	bl	8100c28 <__aeabi_dcmpgt>
 810f61a:	2800      	cmp	r0, #0
 810f61c:	d050      	beq.n	810f6c0 <_dtoa_r+0x220>
 810f61e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810f622:	2300      	movs	r3, #0
 810f624:	930f      	str	r3, [sp, #60]	; 0x3c
 810f626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810f628:	1b5d      	subs	r5, r3, r5
 810f62a:	f1b5 0801 	subs.w	r8, r5, #1
 810f62e:	bf49      	itett	mi
 810f630:	f1c5 0301 	rsbmi	r3, r5, #1
 810f634:	2300      	movpl	r3, #0
 810f636:	9305      	strmi	r3, [sp, #20]
 810f638:	f04f 0800 	movmi.w	r8, #0
 810f63c:	bf58      	it	pl
 810f63e:	9305      	strpl	r3, [sp, #20]
 810f640:	f1ba 0f00 	cmp.w	sl, #0
 810f644:	db3e      	blt.n	810f6c4 <_dtoa_r+0x224>
 810f646:	2300      	movs	r3, #0
 810f648:	44d0      	add	r8, sl
 810f64a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 810f64e:	9307      	str	r3, [sp, #28]
 810f650:	9b06      	ldr	r3, [sp, #24]
 810f652:	2b09      	cmp	r3, #9
 810f654:	f200 8090 	bhi.w	810f778 <_dtoa_r+0x2d8>
 810f658:	2b05      	cmp	r3, #5
 810f65a:	bfc4      	itt	gt
 810f65c:	3b04      	subgt	r3, #4
 810f65e:	9306      	strgt	r3, [sp, #24]
 810f660:	9b06      	ldr	r3, [sp, #24]
 810f662:	f1a3 0302 	sub.w	r3, r3, #2
 810f666:	bfcc      	ite	gt
 810f668:	2500      	movgt	r5, #0
 810f66a:	2501      	movle	r5, #1
 810f66c:	2b03      	cmp	r3, #3
 810f66e:	f200 808f 	bhi.w	810f790 <_dtoa_r+0x2f0>
 810f672:	e8df f003 	tbb	[pc, r3]
 810f676:	7f7d      	.short	0x7f7d
 810f678:	7131      	.short	0x7131
 810f67a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 810f67e:	441d      	add	r5, r3
 810f680:	f205 4032 	addw	r0, r5, #1074	; 0x432
 810f684:	2820      	cmp	r0, #32
 810f686:	dd13      	ble.n	810f6b0 <_dtoa_r+0x210>
 810f688:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 810f68c:	9b00      	ldr	r3, [sp, #0]
 810f68e:	fa08 f800 	lsl.w	r8, r8, r0
 810f692:	f205 4012 	addw	r0, r5, #1042	; 0x412
 810f696:	fa23 f000 	lsr.w	r0, r3, r0
 810f69a:	ea48 0000 	orr.w	r0, r8, r0
 810f69e:	f7f0 ffb9 	bl	8100614 <__aeabi_ui2d>
 810f6a2:	2301      	movs	r3, #1
 810f6a4:	4682      	mov	sl, r0
 810f6a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 810f6aa:	3d01      	subs	r5, #1
 810f6ac:	9313      	str	r3, [sp, #76]	; 0x4c
 810f6ae:	e772      	b.n	810f596 <_dtoa_r+0xf6>
 810f6b0:	9b00      	ldr	r3, [sp, #0]
 810f6b2:	f1c0 0020 	rsb	r0, r0, #32
 810f6b6:	fa03 f000 	lsl.w	r0, r3, r0
 810f6ba:	e7f0      	b.n	810f69e <_dtoa_r+0x1fe>
 810f6bc:	2301      	movs	r3, #1
 810f6be:	e7b1      	b.n	810f624 <_dtoa_r+0x184>
 810f6c0:	900f      	str	r0, [sp, #60]	; 0x3c
 810f6c2:	e7b0      	b.n	810f626 <_dtoa_r+0x186>
 810f6c4:	9b05      	ldr	r3, [sp, #20]
 810f6c6:	eba3 030a 	sub.w	r3, r3, sl
 810f6ca:	9305      	str	r3, [sp, #20]
 810f6cc:	f1ca 0300 	rsb	r3, sl, #0
 810f6d0:	9307      	str	r3, [sp, #28]
 810f6d2:	2300      	movs	r3, #0
 810f6d4:	930e      	str	r3, [sp, #56]	; 0x38
 810f6d6:	e7bb      	b.n	810f650 <_dtoa_r+0x1b0>
 810f6d8:	2301      	movs	r3, #1
 810f6da:	930a      	str	r3, [sp, #40]	; 0x28
 810f6dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f6de:	2b00      	cmp	r3, #0
 810f6e0:	dd59      	ble.n	810f796 <_dtoa_r+0x2f6>
 810f6e2:	9302      	str	r3, [sp, #8]
 810f6e4:	4699      	mov	r9, r3
 810f6e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810f6e8:	2200      	movs	r2, #0
 810f6ea:	6072      	str	r2, [r6, #4]
 810f6ec:	2204      	movs	r2, #4
 810f6ee:	f102 0014 	add.w	r0, r2, #20
 810f6f2:	4298      	cmp	r0, r3
 810f6f4:	6871      	ldr	r1, [r6, #4]
 810f6f6:	d953      	bls.n	810f7a0 <_dtoa_r+0x300>
 810f6f8:	4620      	mov	r0, r4
 810f6fa:	f000 fe93 	bl	8110424 <_Balloc>
 810f6fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810f700:	6030      	str	r0, [r6, #0]
 810f702:	f1b9 0f0e 	cmp.w	r9, #14
 810f706:	f8d3 b000 	ldr.w	fp, [r3]
 810f70a:	f200 80e6 	bhi.w	810f8da <_dtoa_r+0x43a>
 810f70e:	2d00      	cmp	r5, #0
 810f710:	f000 80e3 	beq.w	810f8da <_dtoa_r+0x43a>
 810f714:	ed9d 7b00 	vldr	d7, [sp]
 810f718:	f1ba 0f00 	cmp.w	sl, #0
 810f71c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 810f720:	dd74      	ble.n	810f80c <_dtoa_r+0x36c>
 810f722:	4a2a      	ldr	r2, [pc, #168]	; (810f7cc <_dtoa_r+0x32c>)
 810f724:	f00a 030f 	and.w	r3, sl, #15
 810f728:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810f72c:	ed93 7b00 	vldr	d7, [r3]
 810f730:	ea4f 162a 	mov.w	r6, sl, asr #4
 810f734:	06f0      	lsls	r0, r6, #27
 810f736:	ed8d 7b08 	vstr	d7, [sp, #32]
 810f73a:	d565      	bpl.n	810f808 <_dtoa_r+0x368>
 810f73c:	4b24      	ldr	r3, [pc, #144]	; (810f7d0 <_dtoa_r+0x330>)
 810f73e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810f742:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810f746:	f7f1 f909 	bl	810095c <__aeabi_ddiv>
 810f74a:	e9cd 0100 	strd	r0, r1, [sp]
 810f74e:	f006 060f 	and.w	r6, r6, #15
 810f752:	2503      	movs	r5, #3
 810f754:	4f1e      	ldr	r7, [pc, #120]	; (810f7d0 <_dtoa_r+0x330>)
 810f756:	e04c      	b.n	810f7f2 <_dtoa_r+0x352>
 810f758:	2301      	movs	r3, #1
 810f75a:	930a      	str	r3, [sp, #40]	; 0x28
 810f75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f75e:	4453      	add	r3, sl
 810f760:	f103 0901 	add.w	r9, r3, #1
 810f764:	9302      	str	r3, [sp, #8]
 810f766:	464b      	mov	r3, r9
 810f768:	2b01      	cmp	r3, #1
 810f76a:	bfb8      	it	lt
 810f76c:	2301      	movlt	r3, #1
 810f76e:	e7ba      	b.n	810f6e6 <_dtoa_r+0x246>
 810f770:	2300      	movs	r3, #0
 810f772:	e7b2      	b.n	810f6da <_dtoa_r+0x23a>
 810f774:	2300      	movs	r3, #0
 810f776:	e7f0      	b.n	810f75a <_dtoa_r+0x2ba>
 810f778:	2501      	movs	r5, #1
 810f77a:	2300      	movs	r3, #0
 810f77c:	9306      	str	r3, [sp, #24]
 810f77e:	950a      	str	r5, [sp, #40]	; 0x28
 810f780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810f784:	9302      	str	r3, [sp, #8]
 810f786:	4699      	mov	r9, r3
 810f788:	2200      	movs	r2, #0
 810f78a:	2312      	movs	r3, #18
 810f78c:	920b      	str	r2, [sp, #44]	; 0x2c
 810f78e:	e7aa      	b.n	810f6e6 <_dtoa_r+0x246>
 810f790:	2301      	movs	r3, #1
 810f792:	930a      	str	r3, [sp, #40]	; 0x28
 810f794:	e7f4      	b.n	810f780 <_dtoa_r+0x2e0>
 810f796:	2301      	movs	r3, #1
 810f798:	9302      	str	r3, [sp, #8]
 810f79a:	4699      	mov	r9, r3
 810f79c:	461a      	mov	r2, r3
 810f79e:	e7f5      	b.n	810f78c <_dtoa_r+0x2ec>
 810f7a0:	3101      	adds	r1, #1
 810f7a2:	6071      	str	r1, [r6, #4]
 810f7a4:	0052      	lsls	r2, r2, #1
 810f7a6:	e7a2      	b.n	810f6ee <_dtoa_r+0x24e>
 810f7a8:	636f4361 	.word	0x636f4361
 810f7ac:	3fd287a7 	.word	0x3fd287a7
 810f7b0:	8b60c8b3 	.word	0x8b60c8b3
 810f7b4:	3fc68a28 	.word	0x3fc68a28
 810f7b8:	509f79fb 	.word	0x509f79fb
 810f7bc:	3fd34413 	.word	0x3fd34413
 810f7c0:	7ff00000 	.word	0x7ff00000
 810f7c4:	081119d9 	.word	0x081119d9
 810f7c8:	3ff80000 	.word	0x3ff80000
 810f7cc:	08111aa0 	.word	0x08111aa0
 810f7d0:	08111a78 	.word	0x08111a78
 810f7d4:	08111a05 	.word	0x08111a05
 810f7d8:	07f1      	lsls	r1, r6, #31
 810f7da:	d508      	bpl.n	810f7ee <_dtoa_r+0x34e>
 810f7dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810f7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 810f7e4:	f7f0 ff90 	bl	8100708 <__aeabi_dmul>
 810f7e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810f7ec:	3501      	adds	r5, #1
 810f7ee:	1076      	asrs	r6, r6, #1
 810f7f0:	3708      	adds	r7, #8
 810f7f2:	2e00      	cmp	r6, #0
 810f7f4:	d1f0      	bne.n	810f7d8 <_dtoa_r+0x338>
 810f7f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 810f7fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f7fe:	f7f1 f8ad 	bl	810095c <__aeabi_ddiv>
 810f802:	e9cd 0100 	strd	r0, r1, [sp]
 810f806:	e01a      	b.n	810f83e <_dtoa_r+0x39e>
 810f808:	2502      	movs	r5, #2
 810f80a:	e7a3      	b.n	810f754 <_dtoa_r+0x2b4>
 810f80c:	f000 80a0 	beq.w	810f950 <_dtoa_r+0x4b0>
 810f810:	f1ca 0600 	rsb	r6, sl, #0
 810f814:	4b9f      	ldr	r3, [pc, #636]	; (810fa94 <_dtoa_r+0x5f4>)
 810f816:	4fa0      	ldr	r7, [pc, #640]	; (810fa98 <_dtoa_r+0x5f8>)
 810f818:	f006 020f 	and.w	r2, r6, #15
 810f81c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810f820:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810f828:	f7f0 ff6e 	bl	8100708 <__aeabi_dmul>
 810f82c:	e9cd 0100 	strd	r0, r1, [sp]
 810f830:	1136      	asrs	r6, r6, #4
 810f832:	2300      	movs	r3, #0
 810f834:	2502      	movs	r5, #2
 810f836:	2e00      	cmp	r6, #0
 810f838:	d17f      	bne.n	810f93a <_dtoa_r+0x49a>
 810f83a:	2b00      	cmp	r3, #0
 810f83c:	d1e1      	bne.n	810f802 <_dtoa_r+0x362>
 810f83e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810f840:	2b00      	cmp	r3, #0
 810f842:	f000 8087 	beq.w	810f954 <_dtoa_r+0x4b4>
 810f846:	e9dd 6700 	ldrd	r6, r7, [sp]
 810f84a:	2200      	movs	r2, #0
 810f84c:	4b93      	ldr	r3, [pc, #588]	; (810fa9c <_dtoa_r+0x5fc>)
 810f84e:	4630      	mov	r0, r6
 810f850:	4639      	mov	r1, r7
 810f852:	f7f1 f9cb 	bl	8100bec <__aeabi_dcmplt>
 810f856:	2800      	cmp	r0, #0
 810f858:	d07c      	beq.n	810f954 <_dtoa_r+0x4b4>
 810f85a:	f1b9 0f00 	cmp.w	r9, #0
 810f85e:	d079      	beq.n	810f954 <_dtoa_r+0x4b4>
 810f860:	9b02      	ldr	r3, [sp, #8]
 810f862:	2b00      	cmp	r3, #0
 810f864:	dd35      	ble.n	810f8d2 <_dtoa_r+0x432>
 810f866:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 810f86a:	9308      	str	r3, [sp, #32]
 810f86c:	4639      	mov	r1, r7
 810f86e:	2200      	movs	r2, #0
 810f870:	4b8b      	ldr	r3, [pc, #556]	; (810faa0 <_dtoa_r+0x600>)
 810f872:	4630      	mov	r0, r6
 810f874:	f7f0 ff48 	bl	8100708 <__aeabi_dmul>
 810f878:	e9cd 0100 	strd	r0, r1, [sp]
 810f87c:	9f02      	ldr	r7, [sp, #8]
 810f87e:	3501      	adds	r5, #1
 810f880:	4628      	mov	r0, r5
 810f882:	f7f0 fed7 	bl	8100634 <__aeabi_i2d>
 810f886:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f88a:	f7f0 ff3d 	bl	8100708 <__aeabi_dmul>
 810f88e:	2200      	movs	r2, #0
 810f890:	4b84      	ldr	r3, [pc, #528]	; (810faa4 <_dtoa_r+0x604>)
 810f892:	f7f0 fd83 	bl	810039c <__adddf3>
 810f896:	4605      	mov	r5, r0
 810f898:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 810f89c:	2f00      	cmp	r7, #0
 810f89e:	d15d      	bne.n	810f95c <_dtoa_r+0x4bc>
 810f8a0:	2200      	movs	r2, #0
 810f8a2:	4b81      	ldr	r3, [pc, #516]	; (810faa8 <_dtoa_r+0x608>)
 810f8a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f8a8:	f7f0 fd76 	bl	8100398 <__aeabi_dsub>
 810f8ac:	462a      	mov	r2, r5
 810f8ae:	4633      	mov	r3, r6
 810f8b0:	e9cd 0100 	strd	r0, r1, [sp]
 810f8b4:	f7f1 f9b8 	bl	8100c28 <__aeabi_dcmpgt>
 810f8b8:	2800      	cmp	r0, #0
 810f8ba:	f040 8288 	bne.w	810fdce <_dtoa_r+0x92e>
 810f8be:	462a      	mov	r2, r5
 810f8c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 810f8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f8c8:	f7f1 f990 	bl	8100bec <__aeabi_dcmplt>
 810f8cc:	2800      	cmp	r0, #0
 810f8ce:	f040 827c 	bne.w	810fdca <_dtoa_r+0x92a>
 810f8d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810f8d6:	e9cd 2300 	strd	r2, r3, [sp]
 810f8da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810f8dc:	2b00      	cmp	r3, #0
 810f8de:	f2c0 8150 	blt.w	810fb82 <_dtoa_r+0x6e2>
 810f8e2:	f1ba 0f0e 	cmp.w	sl, #14
 810f8e6:	f300 814c 	bgt.w	810fb82 <_dtoa_r+0x6e2>
 810f8ea:	4b6a      	ldr	r3, [pc, #424]	; (810fa94 <_dtoa_r+0x5f4>)
 810f8ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810f8f0:	ed93 7b00 	vldr	d7, [r3]
 810f8f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f8f6:	2b00      	cmp	r3, #0
 810f8f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 810f8fc:	f280 80d8 	bge.w	810fab0 <_dtoa_r+0x610>
 810f900:	f1b9 0f00 	cmp.w	r9, #0
 810f904:	f300 80d4 	bgt.w	810fab0 <_dtoa_r+0x610>
 810f908:	f040 825e 	bne.w	810fdc8 <_dtoa_r+0x928>
 810f90c:	2200      	movs	r2, #0
 810f90e:	4b66      	ldr	r3, [pc, #408]	; (810faa8 <_dtoa_r+0x608>)
 810f910:	ec51 0b17 	vmov	r0, r1, d7
 810f914:	f7f0 fef8 	bl	8100708 <__aeabi_dmul>
 810f918:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f91c:	f7f1 f97a 	bl	8100c14 <__aeabi_dcmpge>
 810f920:	464f      	mov	r7, r9
 810f922:	464e      	mov	r6, r9
 810f924:	2800      	cmp	r0, #0
 810f926:	f040 8234 	bne.w	810fd92 <_dtoa_r+0x8f2>
 810f92a:	2331      	movs	r3, #49	; 0x31
 810f92c:	f10b 0501 	add.w	r5, fp, #1
 810f930:	f88b 3000 	strb.w	r3, [fp]
 810f934:	f10a 0a01 	add.w	sl, sl, #1
 810f938:	e22f      	b.n	810fd9a <_dtoa_r+0x8fa>
 810f93a:	07f2      	lsls	r2, r6, #31
 810f93c:	d505      	bpl.n	810f94a <_dtoa_r+0x4aa>
 810f93e:	e9d7 2300 	ldrd	r2, r3, [r7]
 810f942:	f7f0 fee1 	bl	8100708 <__aeabi_dmul>
 810f946:	3501      	adds	r5, #1
 810f948:	2301      	movs	r3, #1
 810f94a:	1076      	asrs	r6, r6, #1
 810f94c:	3708      	adds	r7, #8
 810f94e:	e772      	b.n	810f836 <_dtoa_r+0x396>
 810f950:	2502      	movs	r5, #2
 810f952:	e774      	b.n	810f83e <_dtoa_r+0x39e>
 810f954:	f8cd a020 	str.w	sl, [sp, #32]
 810f958:	464f      	mov	r7, r9
 810f95a:	e791      	b.n	810f880 <_dtoa_r+0x3e0>
 810f95c:	4b4d      	ldr	r3, [pc, #308]	; (810fa94 <_dtoa_r+0x5f4>)
 810f95e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810f962:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810f966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f968:	2b00      	cmp	r3, #0
 810f96a:	d047      	beq.n	810f9fc <_dtoa_r+0x55c>
 810f96c:	4602      	mov	r2, r0
 810f96e:	460b      	mov	r3, r1
 810f970:	2000      	movs	r0, #0
 810f972:	494e      	ldr	r1, [pc, #312]	; (810faac <_dtoa_r+0x60c>)
 810f974:	f7f0 fff2 	bl	810095c <__aeabi_ddiv>
 810f978:	462a      	mov	r2, r5
 810f97a:	4633      	mov	r3, r6
 810f97c:	f7f0 fd0c 	bl	8100398 <__aeabi_dsub>
 810f980:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810f984:	465d      	mov	r5, fp
 810f986:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f98a:	f7f1 f96d 	bl	8100c68 <__aeabi_d2iz>
 810f98e:	4606      	mov	r6, r0
 810f990:	f7f0 fe50 	bl	8100634 <__aeabi_i2d>
 810f994:	4602      	mov	r2, r0
 810f996:	460b      	mov	r3, r1
 810f998:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f99c:	f7f0 fcfc 	bl	8100398 <__aeabi_dsub>
 810f9a0:	3630      	adds	r6, #48	; 0x30
 810f9a2:	f805 6b01 	strb.w	r6, [r5], #1
 810f9a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810f9aa:	e9cd 0100 	strd	r0, r1, [sp]
 810f9ae:	f7f1 f91d 	bl	8100bec <__aeabi_dcmplt>
 810f9b2:	2800      	cmp	r0, #0
 810f9b4:	d163      	bne.n	810fa7e <_dtoa_r+0x5de>
 810f9b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 810f9ba:	2000      	movs	r0, #0
 810f9bc:	4937      	ldr	r1, [pc, #220]	; (810fa9c <_dtoa_r+0x5fc>)
 810f9be:	f7f0 fceb 	bl	8100398 <__aeabi_dsub>
 810f9c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810f9c6:	f7f1 f911 	bl	8100bec <__aeabi_dcmplt>
 810f9ca:	2800      	cmp	r0, #0
 810f9cc:	f040 80b7 	bne.w	810fb3e <_dtoa_r+0x69e>
 810f9d0:	eba5 030b 	sub.w	r3, r5, fp
 810f9d4:	429f      	cmp	r7, r3
 810f9d6:	f77f af7c 	ble.w	810f8d2 <_dtoa_r+0x432>
 810f9da:	2200      	movs	r2, #0
 810f9dc:	4b30      	ldr	r3, [pc, #192]	; (810faa0 <_dtoa_r+0x600>)
 810f9de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810f9e2:	f7f0 fe91 	bl	8100708 <__aeabi_dmul>
 810f9e6:	2200      	movs	r2, #0
 810f9e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810f9ec:	4b2c      	ldr	r3, [pc, #176]	; (810faa0 <_dtoa_r+0x600>)
 810f9ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f9f2:	f7f0 fe89 	bl	8100708 <__aeabi_dmul>
 810f9f6:	e9cd 0100 	strd	r0, r1, [sp]
 810f9fa:	e7c4      	b.n	810f986 <_dtoa_r+0x4e6>
 810f9fc:	462a      	mov	r2, r5
 810f9fe:	4633      	mov	r3, r6
 810fa00:	f7f0 fe82 	bl	8100708 <__aeabi_dmul>
 810fa04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810fa08:	eb0b 0507 	add.w	r5, fp, r7
 810fa0c:	465e      	mov	r6, fp
 810fa0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 810fa12:	f7f1 f929 	bl	8100c68 <__aeabi_d2iz>
 810fa16:	4607      	mov	r7, r0
 810fa18:	f7f0 fe0c 	bl	8100634 <__aeabi_i2d>
 810fa1c:	3730      	adds	r7, #48	; 0x30
 810fa1e:	4602      	mov	r2, r0
 810fa20:	460b      	mov	r3, r1
 810fa22:	e9dd 0100 	ldrd	r0, r1, [sp]
 810fa26:	f7f0 fcb7 	bl	8100398 <__aeabi_dsub>
 810fa2a:	f806 7b01 	strb.w	r7, [r6], #1
 810fa2e:	42ae      	cmp	r6, r5
 810fa30:	e9cd 0100 	strd	r0, r1, [sp]
 810fa34:	f04f 0200 	mov.w	r2, #0
 810fa38:	d126      	bne.n	810fa88 <_dtoa_r+0x5e8>
 810fa3a:	4b1c      	ldr	r3, [pc, #112]	; (810faac <_dtoa_r+0x60c>)
 810fa3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810fa40:	f7f0 fcac 	bl	810039c <__adddf3>
 810fa44:	4602      	mov	r2, r0
 810fa46:	460b      	mov	r3, r1
 810fa48:	e9dd 0100 	ldrd	r0, r1, [sp]
 810fa4c:	f7f1 f8ec 	bl	8100c28 <__aeabi_dcmpgt>
 810fa50:	2800      	cmp	r0, #0
 810fa52:	d174      	bne.n	810fb3e <_dtoa_r+0x69e>
 810fa54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810fa58:	2000      	movs	r0, #0
 810fa5a:	4914      	ldr	r1, [pc, #80]	; (810faac <_dtoa_r+0x60c>)
 810fa5c:	f7f0 fc9c 	bl	8100398 <__aeabi_dsub>
 810fa60:	4602      	mov	r2, r0
 810fa62:	460b      	mov	r3, r1
 810fa64:	e9dd 0100 	ldrd	r0, r1, [sp]
 810fa68:	f7f1 f8c0 	bl	8100bec <__aeabi_dcmplt>
 810fa6c:	2800      	cmp	r0, #0
 810fa6e:	f43f af30 	beq.w	810f8d2 <_dtoa_r+0x432>
 810fa72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810fa76:	2b30      	cmp	r3, #48	; 0x30
 810fa78:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810fa7c:	d002      	beq.n	810fa84 <_dtoa_r+0x5e4>
 810fa7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 810fa82:	e04a      	b.n	810fb1a <_dtoa_r+0x67a>
 810fa84:	4615      	mov	r5, r2
 810fa86:	e7f4      	b.n	810fa72 <_dtoa_r+0x5d2>
 810fa88:	4b05      	ldr	r3, [pc, #20]	; (810faa0 <_dtoa_r+0x600>)
 810fa8a:	f7f0 fe3d 	bl	8100708 <__aeabi_dmul>
 810fa8e:	e9cd 0100 	strd	r0, r1, [sp]
 810fa92:	e7bc      	b.n	810fa0e <_dtoa_r+0x56e>
 810fa94:	08111aa0 	.word	0x08111aa0
 810fa98:	08111a78 	.word	0x08111a78
 810fa9c:	3ff00000 	.word	0x3ff00000
 810faa0:	40240000 	.word	0x40240000
 810faa4:	401c0000 	.word	0x401c0000
 810faa8:	40140000 	.word	0x40140000
 810faac:	3fe00000 	.word	0x3fe00000
 810fab0:	e9dd 6700 	ldrd	r6, r7, [sp]
 810fab4:	465d      	mov	r5, fp
 810fab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810faba:	4630      	mov	r0, r6
 810fabc:	4639      	mov	r1, r7
 810fabe:	f7f0 ff4d 	bl	810095c <__aeabi_ddiv>
 810fac2:	f7f1 f8d1 	bl	8100c68 <__aeabi_d2iz>
 810fac6:	4680      	mov	r8, r0
 810fac8:	f7f0 fdb4 	bl	8100634 <__aeabi_i2d>
 810facc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810fad0:	f7f0 fe1a 	bl	8100708 <__aeabi_dmul>
 810fad4:	4602      	mov	r2, r0
 810fad6:	460b      	mov	r3, r1
 810fad8:	4630      	mov	r0, r6
 810fada:	4639      	mov	r1, r7
 810fadc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 810fae0:	f7f0 fc5a 	bl	8100398 <__aeabi_dsub>
 810fae4:	f805 6b01 	strb.w	r6, [r5], #1
 810fae8:	eba5 060b 	sub.w	r6, r5, fp
 810faec:	45b1      	cmp	r9, r6
 810faee:	4602      	mov	r2, r0
 810faf0:	460b      	mov	r3, r1
 810faf2:	d139      	bne.n	810fb68 <_dtoa_r+0x6c8>
 810faf4:	f7f0 fc52 	bl	810039c <__adddf3>
 810faf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810fafc:	4606      	mov	r6, r0
 810fafe:	460f      	mov	r7, r1
 810fb00:	f7f1 f892 	bl	8100c28 <__aeabi_dcmpgt>
 810fb04:	b9c8      	cbnz	r0, 810fb3a <_dtoa_r+0x69a>
 810fb06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810fb0a:	4630      	mov	r0, r6
 810fb0c:	4639      	mov	r1, r7
 810fb0e:	f7f1 f863 	bl	8100bd8 <__aeabi_dcmpeq>
 810fb12:	b110      	cbz	r0, 810fb1a <_dtoa_r+0x67a>
 810fb14:	f018 0f01 	tst.w	r8, #1
 810fb18:	d10f      	bne.n	810fb3a <_dtoa_r+0x69a>
 810fb1a:	9904      	ldr	r1, [sp, #16]
 810fb1c:	4620      	mov	r0, r4
 810fb1e:	f000 fcb5 	bl	811048c <_Bfree>
 810fb22:	2300      	movs	r3, #0
 810fb24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810fb26:	702b      	strb	r3, [r5, #0]
 810fb28:	f10a 0301 	add.w	r3, sl, #1
 810fb2c:	6013      	str	r3, [r2, #0]
 810fb2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810fb30:	2b00      	cmp	r3, #0
 810fb32:	f000 8241 	beq.w	810ffb8 <_dtoa_r+0xb18>
 810fb36:	601d      	str	r5, [r3, #0]
 810fb38:	e23e      	b.n	810ffb8 <_dtoa_r+0xb18>
 810fb3a:	f8cd a020 	str.w	sl, [sp, #32]
 810fb3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810fb42:	2a39      	cmp	r2, #57	; 0x39
 810fb44:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 810fb48:	d108      	bne.n	810fb5c <_dtoa_r+0x6bc>
 810fb4a:	459b      	cmp	fp, r3
 810fb4c:	d10a      	bne.n	810fb64 <_dtoa_r+0x6c4>
 810fb4e:	9b08      	ldr	r3, [sp, #32]
 810fb50:	3301      	adds	r3, #1
 810fb52:	9308      	str	r3, [sp, #32]
 810fb54:	2330      	movs	r3, #48	; 0x30
 810fb56:	f88b 3000 	strb.w	r3, [fp]
 810fb5a:	465b      	mov	r3, fp
 810fb5c:	781a      	ldrb	r2, [r3, #0]
 810fb5e:	3201      	adds	r2, #1
 810fb60:	701a      	strb	r2, [r3, #0]
 810fb62:	e78c      	b.n	810fa7e <_dtoa_r+0x5de>
 810fb64:	461d      	mov	r5, r3
 810fb66:	e7ea      	b.n	810fb3e <_dtoa_r+0x69e>
 810fb68:	2200      	movs	r2, #0
 810fb6a:	4b9b      	ldr	r3, [pc, #620]	; (810fdd8 <_dtoa_r+0x938>)
 810fb6c:	f7f0 fdcc 	bl	8100708 <__aeabi_dmul>
 810fb70:	2200      	movs	r2, #0
 810fb72:	2300      	movs	r3, #0
 810fb74:	4606      	mov	r6, r0
 810fb76:	460f      	mov	r7, r1
 810fb78:	f7f1 f82e 	bl	8100bd8 <__aeabi_dcmpeq>
 810fb7c:	2800      	cmp	r0, #0
 810fb7e:	d09a      	beq.n	810fab6 <_dtoa_r+0x616>
 810fb80:	e7cb      	b.n	810fb1a <_dtoa_r+0x67a>
 810fb82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810fb84:	2a00      	cmp	r2, #0
 810fb86:	f000 808b 	beq.w	810fca0 <_dtoa_r+0x800>
 810fb8a:	9a06      	ldr	r2, [sp, #24]
 810fb8c:	2a01      	cmp	r2, #1
 810fb8e:	dc6e      	bgt.n	810fc6e <_dtoa_r+0x7ce>
 810fb90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810fb92:	2a00      	cmp	r2, #0
 810fb94:	d067      	beq.n	810fc66 <_dtoa_r+0x7c6>
 810fb96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810fb9a:	9f07      	ldr	r7, [sp, #28]
 810fb9c:	9d05      	ldr	r5, [sp, #20]
 810fb9e:	9a05      	ldr	r2, [sp, #20]
 810fba0:	2101      	movs	r1, #1
 810fba2:	441a      	add	r2, r3
 810fba4:	4620      	mov	r0, r4
 810fba6:	9205      	str	r2, [sp, #20]
 810fba8:	4498      	add	r8, r3
 810fbaa:	f000 fd0f 	bl	81105cc <__i2b>
 810fbae:	4606      	mov	r6, r0
 810fbb0:	2d00      	cmp	r5, #0
 810fbb2:	dd0c      	ble.n	810fbce <_dtoa_r+0x72e>
 810fbb4:	f1b8 0f00 	cmp.w	r8, #0
 810fbb8:	dd09      	ble.n	810fbce <_dtoa_r+0x72e>
 810fbba:	4545      	cmp	r5, r8
 810fbbc:	9a05      	ldr	r2, [sp, #20]
 810fbbe:	462b      	mov	r3, r5
 810fbc0:	bfa8      	it	ge
 810fbc2:	4643      	movge	r3, r8
 810fbc4:	1ad2      	subs	r2, r2, r3
 810fbc6:	9205      	str	r2, [sp, #20]
 810fbc8:	1aed      	subs	r5, r5, r3
 810fbca:	eba8 0803 	sub.w	r8, r8, r3
 810fbce:	9b07      	ldr	r3, [sp, #28]
 810fbd0:	b1eb      	cbz	r3, 810fc0e <_dtoa_r+0x76e>
 810fbd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810fbd4:	2b00      	cmp	r3, #0
 810fbd6:	d067      	beq.n	810fca8 <_dtoa_r+0x808>
 810fbd8:	b18f      	cbz	r7, 810fbfe <_dtoa_r+0x75e>
 810fbda:	4631      	mov	r1, r6
 810fbdc:	463a      	mov	r2, r7
 810fbde:	4620      	mov	r0, r4
 810fbe0:	f000 fd94 	bl	811070c <__pow5mult>
 810fbe4:	9a04      	ldr	r2, [sp, #16]
 810fbe6:	4601      	mov	r1, r0
 810fbe8:	4606      	mov	r6, r0
 810fbea:	4620      	mov	r0, r4
 810fbec:	f000 fcf7 	bl	81105de <__multiply>
 810fbf0:	9904      	ldr	r1, [sp, #16]
 810fbf2:	9008      	str	r0, [sp, #32]
 810fbf4:	4620      	mov	r0, r4
 810fbf6:	f000 fc49 	bl	811048c <_Bfree>
 810fbfa:	9b08      	ldr	r3, [sp, #32]
 810fbfc:	9304      	str	r3, [sp, #16]
 810fbfe:	9b07      	ldr	r3, [sp, #28]
 810fc00:	1bda      	subs	r2, r3, r7
 810fc02:	d004      	beq.n	810fc0e <_dtoa_r+0x76e>
 810fc04:	9904      	ldr	r1, [sp, #16]
 810fc06:	4620      	mov	r0, r4
 810fc08:	f000 fd80 	bl	811070c <__pow5mult>
 810fc0c:	9004      	str	r0, [sp, #16]
 810fc0e:	2101      	movs	r1, #1
 810fc10:	4620      	mov	r0, r4
 810fc12:	f000 fcdb 	bl	81105cc <__i2b>
 810fc16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810fc18:	4607      	mov	r7, r0
 810fc1a:	2b00      	cmp	r3, #0
 810fc1c:	f000 81d0 	beq.w	810ffc0 <_dtoa_r+0xb20>
 810fc20:	461a      	mov	r2, r3
 810fc22:	4601      	mov	r1, r0
 810fc24:	4620      	mov	r0, r4
 810fc26:	f000 fd71 	bl	811070c <__pow5mult>
 810fc2a:	9b06      	ldr	r3, [sp, #24]
 810fc2c:	2b01      	cmp	r3, #1
 810fc2e:	4607      	mov	r7, r0
 810fc30:	dc40      	bgt.n	810fcb4 <_dtoa_r+0x814>
 810fc32:	9b00      	ldr	r3, [sp, #0]
 810fc34:	2b00      	cmp	r3, #0
 810fc36:	d139      	bne.n	810fcac <_dtoa_r+0x80c>
 810fc38:	9b01      	ldr	r3, [sp, #4]
 810fc3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810fc3e:	2b00      	cmp	r3, #0
 810fc40:	d136      	bne.n	810fcb0 <_dtoa_r+0x810>
 810fc42:	9b01      	ldr	r3, [sp, #4]
 810fc44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810fc48:	0d1b      	lsrs	r3, r3, #20
 810fc4a:	051b      	lsls	r3, r3, #20
 810fc4c:	b12b      	cbz	r3, 810fc5a <_dtoa_r+0x7ba>
 810fc4e:	9b05      	ldr	r3, [sp, #20]
 810fc50:	3301      	adds	r3, #1
 810fc52:	9305      	str	r3, [sp, #20]
 810fc54:	f108 0801 	add.w	r8, r8, #1
 810fc58:	2301      	movs	r3, #1
 810fc5a:	9307      	str	r3, [sp, #28]
 810fc5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810fc5e:	2b00      	cmp	r3, #0
 810fc60:	d12a      	bne.n	810fcb8 <_dtoa_r+0x818>
 810fc62:	2001      	movs	r0, #1
 810fc64:	e030      	b.n	810fcc8 <_dtoa_r+0x828>
 810fc66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810fc68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810fc6c:	e795      	b.n	810fb9a <_dtoa_r+0x6fa>
 810fc6e:	9b07      	ldr	r3, [sp, #28]
 810fc70:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 810fc74:	42bb      	cmp	r3, r7
 810fc76:	bfbf      	itttt	lt
 810fc78:	9b07      	ldrlt	r3, [sp, #28]
 810fc7a:	9707      	strlt	r7, [sp, #28]
 810fc7c:	1afa      	sublt	r2, r7, r3
 810fc7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 810fc80:	bfbb      	ittet	lt
 810fc82:	189b      	addlt	r3, r3, r2
 810fc84:	930e      	strlt	r3, [sp, #56]	; 0x38
 810fc86:	1bdf      	subge	r7, r3, r7
 810fc88:	2700      	movlt	r7, #0
 810fc8a:	f1b9 0f00 	cmp.w	r9, #0
 810fc8e:	bfb5      	itete	lt
 810fc90:	9b05      	ldrlt	r3, [sp, #20]
 810fc92:	9d05      	ldrge	r5, [sp, #20]
 810fc94:	eba3 0509 	sublt.w	r5, r3, r9
 810fc98:	464b      	movge	r3, r9
 810fc9a:	bfb8      	it	lt
 810fc9c:	2300      	movlt	r3, #0
 810fc9e:	e77e      	b.n	810fb9e <_dtoa_r+0x6fe>
 810fca0:	9f07      	ldr	r7, [sp, #28]
 810fca2:	9d05      	ldr	r5, [sp, #20]
 810fca4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 810fca6:	e783      	b.n	810fbb0 <_dtoa_r+0x710>
 810fca8:	9a07      	ldr	r2, [sp, #28]
 810fcaa:	e7ab      	b.n	810fc04 <_dtoa_r+0x764>
 810fcac:	2300      	movs	r3, #0
 810fcae:	e7d4      	b.n	810fc5a <_dtoa_r+0x7ba>
 810fcb0:	9b00      	ldr	r3, [sp, #0]
 810fcb2:	e7d2      	b.n	810fc5a <_dtoa_r+0x7ba>
 810fcb4:	2300      	movs	r3, #0
 810fcb6:	9307      	str	r3, [sp, #28]
 810fcb8:	693b      	ldr	r3, [r7, #16]
 810fcba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 810fcbe:	6918      	ldr	r0, [r3, #16]
 810fcc0:	f000 fc36 	bl	8110530 <__hi0bits>
 810fcc4:	f1c0 0020 	rsb	r0, r0, #32
 810fcc8:	4440      	add	r0, r8
 810fcca:	f010 001f 	ands.w	r0, r0, #31
 810fcce:	d047      	beq.n	810fd60 <_dtoa_r+0x8c0>
 810fcd0:	f1c0 0320 	rsb	r3, r0, #32
 810fcd4:	2b04      	cmp	r3, #4
 810fcd6:	dd3b      	ble.n	810fd50 <_dtoa_r+0x8b0>
 810fcd8:	9b05      	ldr	r3, [sp, #20]
 810fcda:	f1c0 001c 	rsb	r0, r0, #28
 810fcde:	4403      	add	r3, r0
 810fce0:	9305      	str	r3, [sp, #20]
 810fce2:	4405      	add	r5, r0
 810fce4:	4480      	add	r8, r0
 810fce6:	9b05      	ldr	r3, [sp, #20]
 810fce8:	2b00      	cmp	r3, #0
 810fcea:	dd05      	ble.n	810fcf8 <_dtoa_r+0x858>
 810fcec:	461a      	mov	r2, r3
 810fcee:	9904      	ldr	r1, [sp, #16]
 810fcf0:	4620      	mov	r0, r4
 810fcf2:	f000 fd59 	bl	81107a8 <__lshift>
 810fcf6:	9004      	str	r0, [sp, #16]
 810fcf8:	f1b8 0f00 	cmp.w	r8, #0
 810fcfc:	dd05      	ble.n	810fd0a <_dtoa_r+0x86a>
 810fcfe:	4639      	mov	r1, r7
 810fd00:	4642      	mov	r2, r8
 810fd02:	4620      	mov	r0, r4
 810fd04:	f000 fd50 	bl	81107a8 <__lshift>
 810fd08:	4607      	mov	r7, r0
 810fd0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810fd0c:	b353      	cbz	r3, 810fd64 <_dtoa_r+0x8c4>
 810fd0e:	4639      	mov	r1, r7
 810fd10:	9804      	ldr	r0, [sp, #16]
 810fd12:	f000 fd9d 	bl	8110850 <__mcmp>
 810fd16:	2800      	cmp	r0, #0
 810fd18:	da24      	bge.n	810fd64 <_dtoa_r+0x8c4>
 810fd1a:	2300      	movs	r3, #0
 810fd1c:	220a      	movs	r2, #10
 810fd1e:	9904      	ldr	r1, [sp, #16]
 810fd20:	4620      	mov	r0, r4
 810fd22:	f000 fbca 	bl	81104ba <__multadd>
 810fd26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810fd28:	9004      	str	r0, [sp, #16]
 810fd2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810fd2e:	2b00      	cmp	r3, #0
 810fd30:	f000 814d 	beq.w	810ffce <_dtoa_r+0xb2e>
 810fd34:	2300      	movs	r3, #0
 810fd36:	4631      	mov	r1, r6
 810fd38:	220a      	movs	r2, #10
 810fd3a:	4620      	mov	r0, r4
 810fd3c:	f000 fbbd 	bl	81104ba <__multadd>
 810fd40:	9b02      	ldr	r3, [sp, #8]
 810fd42:	2b00      	cmp	r3, #0
 810fd44:	4606      	mov	r6, r0
 810fd46:	dc4f      	bgt.n	810fde8 <_dtoa_r+0x948>
 810fd48:	9b06      	ldr	r3, [sp, #24]
 810fd4a:	2b02      	cmp	r3, #2
 810fd4c:	dd4c      	ble.n	810fde8 <_dtoa_r+0x948>
 810fd4e:	e011      	b.n	810fd74 <_dtoa_r+0x8d4>
 810fd50:	d0c9      	beq.n	810fce6 <_dtoa_r+0x846>
 810fd52:	9a05      	ldr	r2, [sp, #20]
 810fd54:	331c      	adds	r3, #28
 810fd56:	441a      	add	r2, r3
 810fd58:	9205      	str	r2, [sp, #20]
 810fd5a:	441d      	add	r5, r3
 810fd5c:	4498      	add	r8, r3
 810fd5e:	e7c2      	b.n	810fce6 <_dtoa_r+0x846>
 810fd60:	4603      	mov	r3, r0
 810fd62:	e7f6      	b.n	810fd52 <_dtoa_r+0x8b2>
 810fd64:	f1b9 0f00 	cmp.w	r9, #0
 810fd68:	dc38      	bgt.n	810fddc <_dtoa_r+0x93c>
 810fd6a:	9b06      	ldr	r3, [sp, #24]
 810fd6c:	2b02      	cmp	r3, #2
 810fd6e:	dd35      	ble.n	810fddc <_dtoa_r+0x93c>
 810fd70:	f8cd 9008 	str.w	r9, [sp, #8]
 810fd74:	9b02      	ldr	r3, [sp, #8]
 810fd76:	b963      	cbnz	r3, 810fd92 <_dtoa_r+0x8f2>
 810fd78:	4639      	mov	r1, r7
 810fd7a:	2205      	movs	r2, #5
 810fd7c:	4620      	mov	r0, r4
 810fd7e:	f000 fb9c 	bl	81104ba <__multadd>
 810fd82:	4601      	mov	r1, r0
 810fd84:	4607      	mov	r7, r0
 810fd86:	9804      	ldr	r0, [sp, #16]
 810fd88:	f000 fd62 	bl	8110850 <__mcmp>
 810fd8c:	2800      	cmp	r0, #0
 810fd8e:	f73f adcc 	bgt.w	810f92a <_dtoa_r+0x48a>
 810fd92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810fd94:	465d      	mov	r5, fp
 810fd96:	ea6f 0a03 	mvn.w	sl, r3
 810fd9a:	f04f 0900 	mov.w	r9, #0
 810fd9e:	4639      	mov	r1, r7
 810fda0:	4620      	mov	r0, r4
 810fda2:	f000 fb73 	bl	811048c <_Bfree>
 810fda6:	2e00      	cmp	r6, #0
 810fda8:	f43f aeb7 	beq.w	810fb1a <_dtoa_r+0x67a>
 810fdac:	f1b9 0f00 	cmp.w	r9, #0
 810fdb0:	d005      	beq.n	810fdbe <_dtoa_r+0x91e>
 810fdb2:	45b1      	cmp	r9, r6
 810fdb4:	d003      	beq.n	810fdbe <_dtoa_r+0x91e>
 810fdb6:	4649      	mov	r1, r9
 810fdb8:	4620      	mov	r0, r4
 810fdba:	f000 fb67 	bl	811048c <_Bfree>
 810fdbe:	4631      	mov	r1, r6
 810fdc0:	4620      	mov	r0, r4
 810fdc2:	f000 fb63 	bl	811048c <_Bfree>
 810fdc6:	e6a8      	b.n	810fb1a <_dtoa_r+0x67a>
 810fdc8:	2700      	movs	r7, #0
 810fdca:	463e      	mov	r6, r7
 810fdcc:	e7e1      	b.n	810fd92 <_dtoa_r+0x8f2>
 810fdce:	f8dd a020 	ldr.w	sl, [sp, #32]
 810fdd2:	463e      	mov	r6, r7
 810fdd4:	e5a9      	b.n	810f92a <_dtoa_r+0x48a>
 810fdd6:	bf00      	nop
 810fdd8:	40240000 	.word	0x40240000
 810fddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810fdde:	f8cd 9008 	str.w	r9, [sp, #8]
 810fde2:	2b00      	cmp	r3, #0
 810fde4:	f000 80fa 	beq.w	810ffdc <_dtoa_r+0xb3c>
 810fde8:	2d00      	cmp	r5, #0
 810fdea:	dd05      	ble.n	810fdf8 <_dtoa_r+0x958>
 810fdec:	4631      	mov	r1, r6
 810fdee:	462a      	mov	r2, r5
 810fdf0:	4620      	mov	r0, r4
 810fdf2:	f000 fcd9 	bl	81107a8 <__lshift>
 810fdf6:	4606      	mov	r6, r0
 810fdf8:	9b07      	ldr	r3, [sp, #28]
 810fdfa:	2b00      	cmp	r3, #0
 810fdfc:	d04c      	beq.n	810fe98 <_dtoa_r+0x9f8>
 810fdfe:	6871      	ldr	r1, [r6, #4]
 810fe00:	4620      	mov	r0, r4
 810fe02:	f000 fb0f 	bl	8110424 <_Balloc>
 810fe06:	6932      	ldr	r2, [r6, #16]
 810fe08:	3202      	adds	r2, #2
 810fe0a:	4605      	mov	r5, r0
 810fe0c:	0092      	lsls	r2, r2, #2
 810fe0e:	f106 010c 	add.w	r1, r6, #12
 810fe12:	300c      	adds	r0, #12
 810fe14:	f7fe fb92 	bl	810e53c <memcpy>
 810fe18:	2201      	movs	r2, #1
 810fe1a:	4629      	mov	r1, r5
 810fe1c:	4620      	mov	r0, r4
 810fe1e:	f000 fcc3 	bl	81107a8 <__lshift>
 810fe22:	9b00      	ldr	r3, [sp, #0]
 810fe24:	f8cd b014 	str.w	fp, [sp, #20]
 810fe28:	f003 0301 	and.w	r3, r3, #1
 810fe2c:	46b1      	mov	r9, r6
 810fe2e:	9307      	str	r3, [sp, #28]
 810fe30:	4606      	mov	r6, r0
 810fe32:	4639      	mov	r1, r7
 810fe34:	9804      	ldr	r0, [sp, #16]
 810fe36:	f7ff faa7 	bl	810f388 <quorem>
 810fe3a:	4649      	mov	r1, r9
 810fe3c:	4605      	mov	r5, r0
 810fe3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810fe42:	9804      	ldr	r0, [sp, #16]
 810fe44:	f000 fd04 	bl	8110850 <__mcmp>
 810fe48:	4632      	mov	r2, r6
 810fe4a:	9000      	str	r0, [sp, #0]
 810fe4c:	4639      	mov	r1, r7
 810fe4e:	4620      	mov	r0, r4
 810fe50:	f000 fd18 	bl	8110884 <__mdiff>
 810fe54:	68c3      	ldr	r3, [r0, #12]
 810fe56:	4602      	mov	r2, r0
 810fe58:	bb03      	cbnz	r3, 810fe9c <_dtoa_r+0x9fc>
 810fe5a:	4601      	mov	r1, r0
 810fe5c:	9008      	str	r0, [sp, #32]
 810fe5e:	9804      	ldr	r0, [sp, #16]
 810fe60:	f000 fcf6 	bl	8110850 <__mcmp>
 810fe64:	9a08      	ldr	r2, [sp, #32]
 810fe66:	4603      	mov	r3, r0
 810fe68:	4611      	mov	r1, r2
 810fe6a:	4620      	mov	r0, r4
 810fe6c:	9308      	str	r3, [sp, #32]
 810fe6e:	f000 fb0d 	bl	811048c <_Bfree>
 810fe72:	9b08      	ldr	r3, [sp, #32]
 810fe74:	b9a3      	cbnz	r3, 810fea0 <_dtoa_r+0xa00>
 810fe76:	9a06      	ldr	r2, [sp, #24]
 810fe78:	b992      	cbnz	r2, 810fea0 <_dtoa_r+0xa00>
 810fe7a:	9a07      	ldr	r2, [sp, #28]
 810fe7c:	b982      	cbnz	r2, 810fea0 <_dtoa_r+0xa00>
 810fe7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810fe82:	d029      	beq.n	810fed8 <_dtoa_r+0xa38>
 810fe84:	9b00      	ldr	r3, [sp, #0]
 810fe86:	2b00      	cmp	r3, #0
 810fe88:	dd01      	ble.n	810fe8e <_dtoa_r+0x9ee>
 810fe8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 810fe8e:	9b05      	ldr	r3, [sp, #20]
 810fe90:	1c5d      	adds	r5, r3, #1
 810fe92:	f883 8000 	strb.w	r8, [r3]
 810fe96:	e782      	b.n	810fd9e <_dtoa_r+0x8fe>
 810fe98:	4630      	mov	r0, r6
 810fe9a:	e7c2      	b.n	810fe22 <_dtoa_r+0x982>
 810fe9c:	2301      	movs	r3, #1
 810fe9e:	e7e3      	b.n	810fe68 <_dtoa_r+0x9c8>
 810fea0:	9a00      	ldr	r2, [sp, #0]
 810fea2:	2a00      	cmp	r2, #0
 810fea4:	db04      	blt.n	810feb0 <_dtoa_r+0xa10>
 810fea6:	d125      	bne.n	810fef4 <_dtoa_r+0xa54>
 810fea8:	9a06      	ldr	r2, [sp, #24]
 810feaa:	bb1a      	cbnz	r2, 810fef4 <_dtoa_r+0xa54>
 810feac:	9a07      	ldr	r2, [sp, #28]
 810feae:	bb0a      	cbnz	r2, 810fef4 <_dtoa_r+0xa54>
 810feb0:	2b00      	cmp	r3, #0
 810feb2:	ddec      	ble.n	810fe8e <_dtoa_r+0x9ee>
 810feb4:	2201      	movs	r2, #1
 810feb6:	9904      	ldr	r1, [sp, #16]
 810feb8:	4620      	mov	r0, r4
 810feba:	f000 fc75 	bl	81107a8 <__lshift>
 810febe:	4639      	mov	r1, r7
 810fec0:	9004      	str	r0, [sp, #16]
 810fec2:	f000 fcc5 	bl	8110850 <__mcmp>
 810fec6:	2800      	cmp	r0, #0
 810fec8:	dc03      	bgt.n	810fed2 <_dtoa_r+0xa32>
 810feca:	d1e0      	bne.n	810fe8e <_dtoa_r+0x9ee>
 810fecc:	f018 0f01 	tst.w	r8, #1
 810fed0:	d0dd      	beq.n	810fe8e <_dtoa_r+0x9ee>
 810fed2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810fed6:	d1d8      	bne.n	810fe8a <_dtoa_r+0x9ea>
 810fed8:	9b05      	ldr	r3, [sp, #20]
 810feda:	9a05      	ldr	r2, [sp, #20]
 810fedc:	1c5d      	adds	r5, r3, #1
 810fede:	2339      	movs	r3, #57	; 0x39
 810fee0:	7013      	strb	r3, [r2, #0]
 810fee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810fee6:	2b39      	cmp	r3, #57	; 0x39
 810fee8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810feec:	d04f      	beq.n	810ff8e <_dtoa_r+0xaee>
 810feee:	3301      	adds	r3, #1
 810fef0:	7013      	strb	r3, [r2, #0]
 810fef2:	e754      	b.n	810fd9e <_dtoa_r+0x8fe>
 810fef4:	9a05      	ldr	r2, [sp, #20]
 810fef6:	2b00      	cmp	r3, #0
 810fef8:	f102 0501 	add.w	r5, r2, #1
 810fefc:	dd06      	ble.n	810ff0c <_dtoa_r+0xa6c>
 810fefe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810ff02:	d0e9      	beq.n	810fed8 <_dtoa_r+0xa38>
 810ff04:	f108 0801 	add.w	r8, r8, #1
 810ff08:	9b05      	ldr	r3, [sp, #20]
 810ff0a:	e7c2      	b.n	810fe92 <_dtoa_r+0x9f2>
 810ff0c:	9a02      	ldr	r2, [sp, #8]
 810ff0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 810ff12:	eba5 030b 	sub.w	r3, r5, fp
 810ff16:	4293      	cmp	r3, r2
 810ff18:	d021      	beq.n	810ff5e <_dtoa_r+0xabe>
 810ff1a:	2300      	movs	r3, #0
 810ff1c:	220a      	movs	r2, #10
 810ff1e:	9904      	ldr	r1, [sp, #16]
 810ff20:	4620      	mov	r0, r4
 810ff22:	f000 faca 	bl	81104ba <__multadd>
 810ff26:	45b1      	cmp	r9, r6
 810ff28:	9004      	str	r0, [sp, #16]
 810ff2a:	f04f 0300 	mov.w	r3, #0
 810ff2e:	f04f 020a 	mov.w	r2, #10
 810ff32:	4649      	mov	r1, r9
 810ff34:	4620      	mov	r0, r4
 810ff36:	d105      	bne.n	810ff44 <_dtoa_r+0xaa4>
 810ff38:	f000 fabf 	bl	81104ba <__multadd>
 810ff3c:	4681      	mov	r9, r0
 810ff3e:	4606      	mov	r6, r0
 810ff40:	9505      	str	r5, [sp, #20]
 810ff42:	e776      	b.n	810fe32 <_dtoa_r+0x992>
 810ff44:	f000 fab9 	bl	81104ba <__multadd>
 810ff48:	4631      	mov	r1, r6
 810ff4a:	4681      	mov	r9, r0
 810ff4c:	2300      	movs	r3, #0
 810ff4e:	220a      	movs	r2, #10
 810ff50:	4620      	mov	r0, r4
 810ff52:	f000 fab2 	bl	81104ba <__multadd>
 810ff56:	4606      	mov	r6, r0
 810ff58:	e7f2      	b.n	810ff40 <_dtoa_r+0xaa0>
 810ff5a:	f04f 0900 	mov.w	r9, #0
 810ff5e:	2201      	movs	r2, #1
 810ff60:	9904      	ldr	r1, [sp, #16]
 810ff62:	4620      	mov	r0, r4
 810ff64:	f000 fc20 	bl	81107a8 <__lshift>
 810ff68:	4639      	mov	r1, r7
 810ff6a:	9004      	str	r0, [sp, #16]
 810ff6c:	f000 fc70 	bl	8110850 <__mcmp>
 810ff70:	2800      	cmp	r0, #0
 810ff72:	dcb6      	bgt.n	810fee2 <_dtoa_r+0xa42>
 810ff74:	d102      	bne.n	810ff7c <_dtoa_r+0xadc>
 810ff76:	f018 0f01 	tst.w	r8, #1
 810ff7a:	d1b2      	bne.n	810fee2 <_dtoa_r+0xa42>
 810ff7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810ff80:	2b30      	cmp	r3, #48	; 0x30
 810ff82:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 810ff86:	f47f af0a 	bne.w	810fd9e <_dtoa_r+0x8fe>
 810ff8a:	4615      	mov	r5, r2
 810ff8c:	e7f6      	b.n	810ff7c <_dtoa_r+0xadc>
 810ff8e:	4593      	cmp	fp, r2
 810ff90:	d105      	bne.n	810ff9e <_dtoa_r+0xafe>
 810ff92:	2331      	movs	r3, #49	; 0x31
 810ff94:	f10a 0a01 	add.w	sl, sl, #1
 810ff98:	f88b 3000 	strb.w	r3, [fp]
 810ff9c:	e6ff      	b.n	810fd9e <_dtoa_r+0x8fe>
 810ff9e:	4615      	mov	r5, r2
 810ffa0:	e79f      	b.n	810fee2 <_dtoa_r+0xa42>
 810ffa2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8110008 <_dtoa_r+0xb68>
 810ffa6:	e007      	b.n	810ffb8 <_dtoa_r+0xb18>
 810ffa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ffaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 811000c <_dtoa_r+0xb6c>
 810ffae:	b11b      	cbz	r3, 810ffb8 <_dtoa_r+0xb18>
 810ffb0:	f10b 0308 	add.w	r3, fp, #8
 810ffb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810ffb6:	6013      	str	r3, [r2, #0]
 810ffb8:	4658      	mov	r0, fp
 810ffba:	b017      	add	sp, #92	; 0x5c
 810ffbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ffc0:	9b06      	ldr	r3, [sp, #24]
 810ffc2:	2b01      	cmp	r3, #1
 810ffc4:	f77f ae35 	ble.w	810fc32 <_dtoa_r+0x792>
 810ffc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ffca:	9307      	str	r3, [sp, #28]
 810ffcc:	e649      	b.n	810fc62 <_dtoa_r+0x7c2>
 810ffce:	9b02      	ldr	r3, [sp, #8]
 810ffd0:	2b00      	cmp	r3, #0
 810ffd2:	dc03      	bgt.n	810ffdc <_dtoa_r+0xb3c>
 810ffd4:	9b06      	ldr	r3, [sp, #24]
 810ffd6:	2b02      	cmp	r3, #2
 810ffd8:	f73f aecc 	bgt.w	810fd74 <_dtoa_r+0x8d4>
 810ffdc:	465d      	mov	r5, fp
 810ffde:	4639      	mov	r1, r7
 810ffe0:	9804      	ldr	r0, [sp, #16]
 810ffe2:	f7ff f9d1 	bl	810f388 <quorem>
 810ffe6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810ffea:	f805 8b01 	strb.w	r8, [r5], #1
 810ffee:	9a02      	ldr	r2, [sp, #8]
 810fff0:	eba5 030b 	sub.w	r3, r5, fp
 810fff4:	429a      	cmp	r2, r3
 810fff6:	ddb0      	ble.n	810ff5a <_dtoa_r+0xaba>
 810fff8:	2300      	movs	r3, #0
 810fffa:	220a      	movs	r2, #10
 810fffc:	9904      	ldr	r1, [sp, #16]
 810fffe:	4620      	mov	r0, r4
 8110000:	f000 fa5b 	bl	81104ba <__multadd>
 8110004:	9004      	str	r0, [sp, #16]
 8110006:	e7ea      	b.n	810ffde <_dtoa_r+0xb3e>
 8110008:	081119d8 	.word	0x081119d8
 811000c:	081119fc 	.word	0x081119fc

08110010 <__sflush_r>:
 8110010:	898a      	ldrh	r2, [r1, #12]
 8110012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110016:	4605      	mov	r5, r0
 8110018:	0710      	lsls	r0, r2, #28
 811001a:	460c      	mov	r4, r1
 811001c:	d458      	bmi.n	81100d0 <__sflush_r+0xc0>
 811001e:	684b      	ldr	r3, [r1, #4]
 8110020:	2b00      	cmp	r3, #0
 8110022:	dc05      	bgt.n	8110030 <__sflush_r+0x20>
 8110024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8110026:	2b00      	cmp	r3, #0
 8110028:	dc02      	bgt.n	8110030 <__sflush_r+0x20>
 811002a:	2000      	movs	r0, #0
 811002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8110030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8110032:	2e00      	cmp	r6, #0
 8110034:	d0f9      	beq.n	811002a <__sflush_r+0x1a>
 8110036:	2300      	movs	r3, #0
 8110038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 811003c:	682f      	ldr	r7, [r5, #0]
 811003e:	6a21      	ldr	r1, [r4, #32]
 8110040:	602b      	str	r3, [r5, #0]
 8110042:	d032      	beq.n	81100aa <__sflush_r+0x9a>
 8110044:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8110046:	89a3      	ldrh	r3, [r4, #12]
 8110048:	075a      	lsls	r2, r3, #29
 811004a:	d505      	bpl.n	8110058 <__sflush_r+0x48>
 811004c:	6863      	ldr	r3, [r4, #4]
 811004e:	1ac0      	subs	r0, r0, r3
 8110050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8110052:	b10b      	cbz	r3, 8110058 <__sflush_r+0x48>
 8110054:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8110056:	1ac0      	subs	r0, r0, r3
 8110058:	2300      	movs	r3, #0
 811005a:	4602      	mov	r2, r0
 811005c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811005e:	6a21      	ldr	r1, [r4, #32]
 8110060:	4628      	mov	r0, r5
 8110062:	47b0      	blx	r6
 8110064:	1c43      	adds	r3, r0, #1
 8110066:	89a3      	ldrh	r3, [r4, #12]
 8110068:	d106      	bne.n	8110078 <__sflush_r+0x68>
 811006a:	6829      	ldr	r1, [r5, #0]
 811006c:	291d      	cmp	r1, #29
 811006e:	d848      	bhi.n	8110102 <__sflush_r+0xf2>
 8110070:	4a29      	ldr	r2, [pc, #164]	; (8110118 <__sflush_r+0x108>)
 8110072:	40ca      	lsrs	r2, r1
 8110074:	07d6      	lsls	r6, r2, #31
 8110076:	d544      	bpl.n	8110102 <__sflush_r+0xf2>
 8110078:	2200      	movs	r2, #0
 811007a:	6062      	str	r2, [r4, #4]
 811007c:	04d9      	lsls	r1, r3, #19
 811007e:	6922      	ldr	r2, [r4, #16]
 8110080:	6022      	str	r2, [r4, #0]
 8110082:	d504      	bpl.n	811008e <__sflush_r+0x7e>
 8110084:	1c42      	adds	r2, r0, #1
 8110086:	d101      	bne.n	811008c <__sflush_r+0x7c>
 8110088:	682b      	ldr	r3, [r5, #0]
 811008a:	b903      	cbnz	r3, 811008e <__sflush_r+0x7e>
 811008c:	6560      	str	r0, [r4, #84]	; 0x54
 811008e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8110090:	602f      	str	r7, [r5, #0]
 8110092:	2900      	cmp	r1, #0
 8110094:	d0c9      	beq.n	811002a <__sflush_r+0x1a>
 8110096:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811009a:	4299      	cmp	r1, r3
 811009c:	d002      	beq.n	81100a4 <__sflush_r+0x94>
 811009e:	4628      	mov	r0, r5
 81100a0:	f000 fcaa 	bl	81109f8 <_free_r>
 81100a4:	2000      	movs	r0, #0
 81100a6:	6360      	str	r0, [r4, #52]	; 0x34
 81100a8:	e7c0      	b.n	811002c <__sflush_r+0x1c>
 81100aa:	2301      	movs	r3, #1
 81100ac:	4628      	mov	r0, r5
 81100ae:	47b0      	blx	r6
 81100b0:	1c41      	adds	r1, r0, #1
 81100b2:	d1c8      	bne.n	8110046 <__sflush_r+0x36>
 81100b4:	682b      	ldr	r3, [r5, #0]
 81100b6:	2b00      	cmp	r3, #0
 81100b8:	d0c5      	beq.n	8110046 <__sflush_r+0x36>
 81100ba:	2b1d      	cmp	r3, #29
 81100bc:	d001      	beq.n	81100c2 <__sflush_r+0xb2>
 81100be:	2b16      	cmp	r3, #22
 81100c0:	d101      	bne.n	81100c6 <__sflush_r+0xb6>
 81100c2:	602f      	str	r7, [r5, #0]
 81100c4:	e7b1      	b.n	811002a <__sflush_r+0x1a>
 81100c6:	89a3      	ldrh	r3, [r4, #12]
 81100c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81100cc:	81a3      	strh	r3, [r4, #12]
 81100ce:	e7ad      	b.n	811002c <__sflush_r+0x1c>
 81100d0:	690f      	ldr	r7, [r1, #16]
 81100d2:	2f00      	cmp	r7, #0
 81100d4:	d0a9      	beq.n	811002a <__sflush_r+0x1a>
 81100d6:	0793      	lsls	r3, r2, #30
 81100d8:	680e      	ldr	r6, [r1, #0]
 81100da:	bf08      	it	eq
 81100dc:	694b      	ldreq	r3, [r1, #20]
 81100de:	600f      	str	r7, [r1, #0]
 81100e0:	bf18      	it	ne
 81100e2:	2300      	movne	r3, #0
 81100e4:	eba6 0807 	sub.w	r8, r6, r7
 81100e8:	608b      	str	r3, [r1, #8]
 81100ea:	f1b8 0f00 	cmp.w	r8, #0
 81100ee:	dd9c      	ble.n	811002a <__sflush_r+0x1a>
 81100f0:	4643      	mov	r3, r8
 81100f2:	463a      	mov	r2, r7
 81100f4:	6a21      	ldr	r1, [r4, #32]
 81100f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81100f8:	4628      	mov	r0, r5
 81100fa:	47b0      	blx	r6
 81100fc:	2800      	cmp	r0, #0
 81100fe:	dc06      	bgt.n	811010e <__sflush_r+0xfe>
 8110100:	89a3      	ldrh	r3, [r4, #12]
 8110102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8110106:	81a3      	strh	r3, [r4, #12]
 8110108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 811010c:	e78e      	b.n	811002c <__sflush_r+0x1c>
 811010e:	4407      	add	r7, r0
 8110110:	eba8 0800 	sub.w	r8, r8, r0
 8110114:	e7e9      	b.n	81100ea <__sflush_r+0xda>
 8110116:	bf00      	nop
 8110118:	20400001 	.word	0x20400001

0811011c <_fflush_r>:
 811011c:	b538      	push	{r3, r4, r5, lr}
 811011e:	690b      	ldr	r3, [r1, #16]
 8110120:	4605      	mov	r5, r0
 8110122:	460c      	mov	r4, r1
 8110124:	b1db      	cbz	r3, 811015e <_fflush_r+0x42>
 8110126:	b118      	cbz	r0, 8110130 <_fflush_r+0x14>
 8110128:	6983      	ldr	r3, [r0, #24]
 811012a:	b90b      	cbnz	r3, 8110130 <_fflush_r+0x14>
 811012c:	f000 f860 	bl	81101f0 <__sinit>
 8110130:	4b0c      	ldr	r3, [pc, #48]	; (8110164 <_fflush_r+0x48>)
 8110132:	429c      	cmp	r4, r3
 8110134:	d109      	bne.n	811014a <_fflush_r+0x2e>
 8110136:	686c      	ldr	r4, [r5, #4]
 8110138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811013c:	b17b      	cbz	r3, 811015e <_fflush_r+0x42>
 811013e:	4621      	mov	r1, r4
 8110140:	4628      	mov	r0, r5
 8110142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8110146:	f7ff bf63 	b.w	8110010 <__sflush_r>
 811014a:	4b07      	ldr	r3, [pc, #28]	; (8110168 <_fflush_r+0x4c>)
 811014c:	429c      	cmp	r4, r3
 811014e:	d101      	bne.n	8110154 <_fflush_r+0x38>
 8110150:	68ac      	ldr	r4, [r5, #8]
 8110152:	e7f1      	b.n	8110138 <_fflush_r+0x1c>
 8110154:	4b05      	ldr	r3, [pc, #20]	; (811016c <_fflush_r+0x50>)
 8110156:	429c      	cmp	r4, r3
 8110158:	bf08      	it	eq
 811015a:	68ec      	ldreq	r4, [r5, #12]
 811015c:	e7ec      	b.n	8110138 <_fflush_r+0x1c>
 811015e:	2000      	movs	r0, #0
 8110160:	bd38      	pop	{r3, r4, r5, pc}
 8110162:	bf00      	nop
 8110164:	08111a2c 	.word	0x08111a2c
 8110168:	08111a4c 	.word	0x08111a4c
 811016c:	08111a0c 	.word	0x08111a0c

08110170 <std>:
 8110170:	2300      	movs	r3, #0
 8110172:	b510      	push	{r4, lr}
 8110174:	4604      	mov	r4, r0
 8110176:	e9c0 3300 	strd	r3, r3, [r0]
 811017a:	6083      	str	r3, [r0, #8]
 811017c:	8181      	strh	r1, [r0, #12]
 811017e:	6643      	str	r3, [r0, #100]	; 0x64
 8110180:	81c2      	strh	r2, [r0, #14]
 8110182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8110186:	6183      	str	r3, [r0, #24]
 8110188:	4619      	mov	r1, r3
 811018a:	2208      	movs	r2, #8
 811018c:	305c      	adds	r0, #92	; 0x5c
 811018e:	f7fe f9e0 	bl	810e552 <memset>
 8110192:	4b05      	ldr	r3, [pc, #20]	; (81101a8 <std+0x38>)
 8110194:	6263      	str	r3, [r4, #36]	; 0x24
 8110196:	4b05      	ldr	r3, [pc, #20]	; (81101ac <std+0x3c>)
 8110198:	62a3      	str	r3, [r4, #40]	; 0x28
 811019a:	4b05      	ldr	r3, [pc, #20]	; (81101b0 <std+0x40>)
 811019c:	62e3      	str	r3, [r4, #44]	; 0x2c
 811019e:	4b05      	ldr	r3, [pc, #20]	; (81101b4 <std+0x44>)
 81101a0:	6224      	str	r4, [r4, #32]
 81101a2:	6323      	str	r3, [r4, #48]	; 0x30
 81101a4:	bd10      	pop	{r4, pc}
 81101a6:	bf00      	nop
 81101a8:	0811108d 	.word	0x0811108d
 81101ac:	081110af 	.word	0x081110af
 81101b0:	081110e7 	.word	0x081110e7
 81101b4:	0811110b 	.word	0x0811110b

081101b8 <_cleanup_r>:
 81101b8:	4901      	ldr	r1, [pc, #4]	; (81101c0 <_cleanup_r+0x8>)
 81101ba:	f000 b885 	b.w	81102c8 <_fwalk_reent>
 81101be:	bf00      	nop
 81101c0:	0811011d 	.word	0x0811011d

081101c4 <__sfmoreglue>:
 81101c4:	b570      	push	{r4, r5, r6, lr}
 81101c6:	1e4a      	subs	r2, r1, #1
 81101c8:	2568      	movs	r5, #104	; 0x68
 81101ca:	4355      	muls	r5, r2
 81101cc:	460e      	mov	r6, r1
 81101ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 81101d2:	f000 fc5f 	bl	8110a94 <_malloc_r>
 81101d6:	4604      	mov	r4, r0
 81101d8:	b140      	cbz	r0, 81101ec <__sfmoreglue+0x28>
 81101da:	2100      	movs	r1, #0
 81101dc:	e9c0 1600 	strd	r1, r6, [r0]
 81101e0:	300c      	adds	r0, #12
 81101e2:	60a0      	str	r0, [r4, #8]
 81101e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81101e8:	f7fe f9b3 	bl	810e552 <memset>
 81101ec:	4620      	mov	r0, r4
 81101ee:	bd70      	pop	{r4, r5, r6, pc}

081101f0 <__sinit>:
 81101f0:	6983      	ldr	r3, [r0, #24]
 81101f2:	b510      	push	{r4, lr}
 81101f4:	4604      	mov	r4, r0
 81101f6:	bb33      	cbnz	r3, 8110246 <__sinit+0x56>
 81101f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 81101fc:	6503      	str	r3, [r0, #80]	; 0x50
 81101fe:	4b12      	ldr	r3, [pc, #72]	; (8110248 <__sinit+0x58>)
 8110200:	4a12      	ldr	r2, [pc, #72]	; (811024c <__sinit+0x5c>)
 8110202:	681b      	ldr	r3, [r3, #0]
 8110204:	6282      	str	r2, [r0, #40]	; 0x28
 8110206:	4298      	cmp	r0, r3
 8110208:	bf04      	itt	eq
 811020a:	2301      	moveq	r3, #1
 811020c:	6183      	streq	r3, [r0, #24]
 811020e:	f000 f81f 	bl	8110250 <__sfp>
 8110212:	6060      	str	r0, [r4, #4]
 8110214:	4620      	mov	r0, r4
 8110216:	f000 f81b 	bl	8110250 <__sfp>
 811021a:	60a0      	str	r0, [r4, #8]
 811021c:	4620      	mov	r0, r4
 811021e:	f000 f817 	bl	8110250 <__sfp>
 8110222:	2200      	movs	r2, #0
 8110224:	60e0      	str	r0, [r4, #12]
 8110226:	2104      	movs	r1, #4
 8110228:	6860      	ldr	r0, [r4, #4]
 811022a:	f7ff ffa1 	bl	8110170 <std>
 811022e:	2201      	movs	r2, #1
 8110230:	2109      	movs	r1, #9
 8110232:	68a0      	ldr	r0, [r4, #8]
 8110234:	f7ff ff9c 	bl	8110170 <std>
 8110238:	2202      	movs	r2, #2
 811023a:	2112      	movs	r1, #18
 811023c:	68e0      	ldr	r0, [r4, #12]
 811023e:	f7ff ff97 	bl	8110170 <std>
 8110242:	2301      	movs	r3, #1
 8110244:	61a3      	str	r3, [r4, #24]
 8110246:	bd10      	pop	{r4, pc}
 8110248:	081119c4 	.word	0x081119c4
 811024c:	081101b9 	.word	0x081101b9

08110250 <__sfp>:
 8110250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110252:	4b1b      	ldr	r3, [pc, #108]	; (81102c0 <__sfp+0x70>)
 8110254:	681e      	ldr	r6, [r3, #0]
 8110256:	69b3      	ldr	r3, [r6, #24]
 8110258:	4607      	mov	r7, r0
 811025a:	b913      	cbnz	r3, 8110262 <__sfp+0x12>
 811025c:	4630      	mov	r0, r6
 811025e:	f7ff ffc7 	bl	81101f0 <__sinit>
 8110262:	3648      	adds	r6, #72	; 0x48
 8110264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8110268:	3b01      	subs	r3, #1
 811026a:	d503      	bpl.n	8110274 <__sfp+0x24>
 811026c:	6833      	ldr	r3, [r6, #0]
 811026e:	b133      	cbz	r3, 811027e <__sfp+0x2e>
 8110270:	6836      	ldr	r6, [r6, #0]
 8110272:	e7f7      	b.n	8110264 <__sfp+0x14>
 8110274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8110278:	b16d      	cbz	r5, 8110296 <__sfp+0x46>
 811027a:	3468      	adds	r4, #104	; 0x68
 811027c:	e7f4      	b.n	8110268 <__sfp+0x18>
 811027e:	2104      	movs	r1, #4
 8110280:	4638      	mov	r0, r7
 8110282:	f7ff ff9f 	bl	81101c4 <__sfmoreglue>
 8110286:	6030      	str	r0, [r6, #0]
 8110288:	2800      	cmp	r0, #0
 811028a:	d1f1      	bne.n	8110270 <__sfp+0x20>
 811028c:	230c      	movs	r3, #12
 811028e:	603b      	str	r3, [r7, #0]
 8110290:	4604      	mov	r4, r0
 8110292:	4620      	mov	r0, r4
 8110294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8110296:	4b0b      	ldr	r3, [pc, #44]	; (81102c4 <__sfp+0x74>)
 8110298:	6665      	str	r5, [r4, #100]	; 0x64
 811029a:	e9c4 5500 	strd	r5, r5, [r4]
 811029e:	60a5      	str	r5, [r4, #8]
 81102a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 81102a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 81102a8:	2208      	movs	r2, #8
 81102aa:	4629      	mov	r1, r5
 81102ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 81102b0:	f7fe f94f 	bl	810e552 <memset>
 81102b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 81102b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 81102bc:	e7e9      	b.n	8110292 <__sfp+0x42>
 81102be:	bf00      	nop
 81102c0:	081119c4 	.word	0x081119c4
 81102c4:	ffff0001 	.word	0xffff0001

081102c8 <_fwalk_reent>:
 81102c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81102cc:	4680      	mov	r8, r0
 81102ce:	4689      	mov	r9, r1
 81102d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 81102d4:	2600      	movs	r6, #0
 81102d6:	b914      	cbnz	r4, 81102de <_fwalk_reent+0x16>
 81102d8:	4630      	mov	r0, r6
 81102da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81102de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 81102e2:	3f01      	subs	r7, #1
 81102e4:	d501      	bpl.n	81102ea <_fwalk_reent+0x22>
 81102e6:	6824      	ldr	r4, [r4, #0]
 81102e8:	e7f5      	b.n	81102d6 <_fwalk_reent+0xe>
 81102ea:	89ab      	ldrh	r3, [r5, #12]
 81102ec:	2b01      	cmp	r3, #1
 81102ee:	d907      	bls.n	8110300 <_fwalk_reent+0x38>
 81102f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81102f4:	3301      	adds	r3, #1
 81102f6:	d003      	beq.n	8110300 <_fwalk_reent+0x38>
 81102f8:	4629      	mov	r1, r5
 81102fa:	4640      	mov	r0, r8
 81102fc:	47c8      	blx	r9
 81102fe:	4306      	orrs	r6, r0
 8110300:	3568      	adds	r5, #104	; 0x68
 8110302:	e7ee      	b.n	81102e2 <_fwalk_reent+0x1a>

08110304 <__locale_ctype_ptr_l>:
 8110304:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8110308:	4770      	bx	lr
	...

0811030c <_localeconv_r>:
 811030c:	4b04      	ldr	r3, [pc, #16]	; (8110320 <_localeconv_r+0x14>)
 811030e:	681b      	ldr	r3, [r3, #0]
 8110310:	6a18      	ldr	r0, [r3, #32]
 8110312:	4b04      	ldr	r3, [pc, #16]	; (8110324 <_localeconv_r+0x18>)
 8110314:	2800      	cmp	r0, #0
 8110316:	bf08      	it	eq
 8110318:	4618      	moveq	r0, r3
 811031a:	30f0      	adds	r0, #240	; 0xf0
 811031c:	4770      	bx	lr
 811031e:	bf00      	nop
 8110320:	10000038 	.word	0x10000038
 8110324:	1000009c 	.word	0x1000009c

08110328 <__swhatbuf_r>:
 8110328:	b570      	push	{r4, r5, r6, lr}
 811032a:	460e      	mov	r6, r1
 811032c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110330:	2900      	cmp	r1, #0
 8110332:	b096      	sub	sp, #88	; 0x58
 8110334:	4614      	mov	r4, r2
 8110336:	461d      	mov	r5, r3
 8110338:	da07      	bge.n	811034a <__swhatbuf_r+0x22>
 811033a:	2300      	movs	r3, #0
 811033c:	602b      	str	r3, [r5, #0]
 811033e:	89b3      	ldrh	r3, [r6, #12]
 8110340:	061a      	lsls	r2, r3, #24
 8110342:	d410      	bmi.n	8110366 <__swhatbuf_r+0x3e>
 8110344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8110348:	e00e      	b.n	8110368 <__swhatbuf_r+0x40>
 811034a:	466a      	mov	r2, sp
 811034c:	f000 ff10 	bl	8111170 <_fstat_r>
 8110350:	2800      	cmp	r0, #0
 8110352:	dbf2      	blt.n	811033a <__swhatbuf_r+0x12>
 8110354:	9a01      	ldr	r2, [sp, #4]
 8110356:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 811035a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 811035e:	425a      	negs	r2, r3
 8110360:	415a      	adcs	r2, r3
 8110362:	602a      	str	r2, [r5, #0]
 8110364:	e7ee      	b.n	8110344 <__swhatbuf_r+0x1c>
 8110366:	2340      	movs	r3, #64	; 0x40
 8110368:	2000      	movs	r0, #0
 811036a:	6023      	str	r3, [r4, #0]
 811036c:	b016      	add	sp, #88	; 0x58
 811036e:	bd70      	pop	{r4, r5, r6, pc}

08110370 <__smakebuf_r>:
 8110370:	898b      	ldrh	r3, [r1, #12]
 8110372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8110374:	079d      	lsls	r5, r3, #30
 8110376:	4606      	mov	r6, r0
 8110378:	460c      	mov	r4, r1
 811037a:	d507      	bpl.n	811038c <__smakebuf_r+0x1c>
 811037c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8110380:	6023      	str	r3, [r4, #0]
 8110382:	6123      	str	r3, [r4, #16]
 8110384:	2301      	movs	r3, #1
 8110386:	6163      	str	r3, [r4, #20]
 8110388:	b002      	add	sp, #8
 811038a:	bd70      	pop	{r4, r5, r6, pc}
 811038c:	ab01      	add	r3, sp, #4
 811038e:	466a      	mov	r2, sp
 8110390:	f7ff ffca 	bl	8110328 <__swhatbuf_r>
 8110394:	9900      	ldr	r1, [sp, #0]
 8110396:	4605      	mov	r5, r0
 8110398:	4630      	mov	r0, r6
 811039a:	f000 fb7b 	bl	8110a94 <_malloc_r>
 811039e:	b948      	cbnz	r0, 81103b4 <__smakebuf_r+0x44>
 81103a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81103a4:	059a      	lsls	r2, r3, #22
 81103a6:	d4ef      	bmi.n	8110388 <__smakebuf_r+0x18>
 81103a8:	f023 0303 	bic.w	r3, r3, #3
 81103ac:	f043 0302 	orr.w	r3, r3, #2
 81103b0:	81a3      	strh	r3, [r4, #12]
 81103b2:	e7e3      	b.n	811037c <__smakebuf_r+0xc>
 81103b4:	4b0d      	ldr	r3, [pc, #52]	; (81103ec <__smakebuf_r+0x7c>)
 81103b6:	62b3      	str	r3, [r6, #40]	; 0x28
 81103b8:	89a3      	ldrh	r3, [r4, #12]
 81103ba:	6020      	str	r0, [r4, #0]
 81103bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81103c0:	81a3      	strh	r3, [r4, #12]
 81103c2:	9b00      	ldr	r3, [sp, #0]
 81103c4:	6163      	str	r3, [r4, #20]
 81103c6:	9b01      	ldr	r3, [sp, #4]
 81103c8:	6120      	str	r0, [r4, #16]
 81103ca:	b15b      	cbz	r3, 81103e4 <__smakebuf_r+0x74>
 81103cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81103d0:	4630      	mov	r0, r6
 81103d2:	f000 fedf 	bl	8111194 <_isatty_r>
 81103d6:	b128      	cbz	r0, 81103e4 <__smakebuf_r+0x74>
 81103d8:	89a3      	ldrh	r3, [r4, #12]
 81103da:	f023 0303 	bic.w	r3, r3, #3
 81103de:	f043 0301 	orr.w	r3, r3, #1
 81103e2:	81a3      	strh	r3, [r4, #12]
 81103e4:	89a3      	ldrh	r3, [r4, #12]
 81103e6:	431d      	orrs	r5, r3
 81103e8:	81a5      	strh	r5, [r4, #12]
 81103ea:	e7cd      	b.n	8110388 <__smakebuf_r+0x18>
 81103ec:	081101b9 	.word	0x081101b9

081103f0 <malloc>:
 81103f0:	4b02      	ldr	r3, [pc, #8]	; (81103fc <malloc+0xc>)
 81103f2:	4601      	mov	r1, r0
 81103f4:	6818      	ldr	r0, [r3, #0]
 81103f6:	f000 bb4d 	b.w	8110a94 <_malloc_r>
 81103fa:	bf00      	nop
 81103fc:	10000038 	.word	0x10000038

08110400 <__ascii_mbtowc>:
 8110400:	b082      	sub	sp, #8
 8110402:	b901      	cbnz	r1, 8110406 <__ascii_mbtowc+0x6>
 8110404:	a901      	add	r1, sp, #4
 8110406:	b142      	cbz	r2, 811041a <__ascii_mbtowc+0x1a>
 8110408:	b14b      	cbz	r3, 811041e <__ascii_mbtowc+0x1e>
 811040a:	7813      	ldrb	r3, [r2, #0]
 811040c:	600b      	str	r3, [r1, #0]
 811040e:	7812      	ldrb	r2, [r2, #0]
 8110410:	1c10      	adds	r0, r2, #0
 8110412:	bf18      	it	ne
 8110414:	2001      	movne	r0, #1
 8110416:	b002      	add	sp, #8
 8110418:	4770      	bx	lr
 811041a:	4610      	mov	r0, r2
 811041c:	e7fb      	b.n	8110416 <__ascii_mbtowc+0x16>
 811041e:	f06f 0001 	mvn.w	r0, #1
 8110422:	e7f8      	b.n	8110416 <__ascii_mbtowc+0x16>

08110424 <_Balloc>:
 8110424:	b570      	push	{r4, r5, r6, lr}
 8110426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8110428:	4604      	mov	r4, r0
 811042a:	460e      	mov	r6, r1
 811042c:	b93d      	cbnz	r5, 811043e <_Balloc+0x1a>
 811042e:	2010      	movs	r0, #16
 8110430:	f7ff ffde 	bl	81103f0 <malloc>
 8110434:	6260      	str	r0, [r4, #36]	; 0x24
 8110436:	e9c0 5501 	strd	r5, r5, [r0, #4]
 811043a:	6005      	str	r5, [r0, #0]
 811043c:	60c5      	str	r5, [r0, #12]
 811043e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8110440:	68eb      	ldr	r3, [r5, #12]
 8110442:	b183      	cbz	r3, 8110466 <_Balloc+0x42>
 8110444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8110446:	68db      	ldr	r3, [r3, #12]
 8110448:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 811044c:	b9b8      	cbnz	r0, 811047e <_Balloc+0x5a>
 811044e:	2101      	movs	r1, #1
 8110450:	fa01 f506 	lsl.w	r5, r1, r6
 8110454:	1d6a      	adds	r2, r5, #5
 8110456:	0092      	lsls	r2, r2, #2
 8110458:	4620      	mov	r0, r4
 811045a:	f000 fabf 	bl	81109dc <_calloc_r>
 811045e:	b160      	cbz	r0, 811047a <_Balloc+0x56>
 8110460:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8110464:	e00e      	b.n	8110484 <_Balloc+0x60>
 8110466:	2221      	movs	r2, #33	; 0x21
 8110468:	2104      	movs	r1, #4
 811046a:	4620      	mov	r0, r4
 811046c:	f000 fab6 	bl	81109dc <_calloc_r>
 8110470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8110472:	60e8      	str	r0, [r5, #12]
 8110474:	68db      	ldr	r3, [r3, #12]
 8110476:	2b00      	cmp	r3, #0
 8110478:	d1e4      	bne.n	8110444 <_Balloc+0x20>
 811047a:	2000      	movs	r0, #0
 811047c:	bd70      	pop	{r4, r5, r6, pc}
 811047e:	6802      	ldr	r2, [r0, #0]
 8110480:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8110484:	2300      	movs	r3, #0
 8110486:	e9c0 3303 	strd	r3, r3, [r0, #12]
 811048a:	e7f7      	b.n	811047c <_Balloc+0x58>

0811048c <_Bfree>:
 811048c:	b570      	push	{r4, r5, r6, lr}
 811048e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8110490:	4606      	mov	r6, r0
 8110492:	460d      	mov	r5, r1
 8110494:	b93c      	cbnz	r4, 81104a6 <_Bfree+0x1a>
 8110496:	2010      	movs	r0, #16
 8110498:	f7ff ffaa 	bl	81103f0 <malloc>
 811049c:	6270      	str	r0, [r6, #36]	; 0x24
 811049e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81104a2:	6004      	str	r4, [r0, #0]
 81104a4:	60c4      	str	r4, [r0, #12]
 81104a6:	b13d      	cbz	r5, 81104b8 <_Bfree+0x2c>
 81104a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 81104aa:	686a      	ldr	r2, [r5, #4]
 81104ac:	68db      	ldr	r3, [r3, #12]
 81104ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81104b2:	6029      	str	r1, [r5, #0]
 81104b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 81104b8:	bd70      	pop	{r4, r5, r6, pc}

081104ba <__multadd>:
 81104ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81104be:	690d      	ldr	r5, [r1, #16]
 81104c0:	461f      	mov	r7, r3
 81104c2:	4606      	mov	r6, r0
 81104c4:	460c      	mov	r4, r1
 81104c6:	f101 0c14 	add.w	ip, r1, #20
 81104ca:	2300      	movs	r3, #0
 81104cc:	f8dc 0000 	ldr.w	r0, [ip]
 81104d0:	b281      	uxth	r1, r0
 81104d2:	fb02 7101 	mla	r1, r2, r1, r7
 81104d6:	0c0f      	lsrs	r7, r1, #16
 81104d8:	0c00      	lsrs	r0, r0, #16
 81104da:	fb02 7000 	mla	r0, r2, r0, r7
 81104de:	b289      	uxth	r1, r1
 81104e0:	3301      	adds	r3, #1
 81104e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 81104e6:	429d      	cmp	r5, r3
 81104e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 81104ec:	f84c 1b04 	str.w	r1, [ip], #4
 81104f0:	dcec      	bgt.n	81104cc <__multadd+0x12>
 81104f2:	b1d7      	cbz	r7, 811052a <__multadd+0x70>
 81104f4:	68a3      	ldr	r3, [r4, #8]
 81104f6:	42ab      	cmp	r3, r5
 81104f8:	dc12      	bgt.n	8110520 <__multadd+0x66>
 81104fa:	6861      	ldr	r1, [r4, #4]
 81104fc:	4630      	mov	r0, r6
 81104fe:	3101      	adds	r1, #1
 8110500:	f7ff ff90 	bl	8110424 <_Balloc>
 8110504:	6922      	ldr	r2, [r4, #16]
 8110506:	3202      	adds	r2, #2
 8110508:	f104 010c 	add.w	r1, r4, #12
 811050c:	4680      	mov	r8, r0
 811050e:	0092      	lsls	r2, r2, #2
 8110510:	300c      	adds	r0, #12
 8110512:	f7fe f813 	bl	810e53c <memcpy>
 8110516:	4621      	mov	r1, r4
 8110518:	4630      	mov	r0, r6
 811051a:	f7ff ffb7 	bl	811048c <_Bfree>
 811051e:	4644      	mov	r4, r8
 8110520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8110524:	3501      	adds	r5, #1
 8110526:	615f      	str	r7, [r3, #20]
 8110528:	6125      	str	r5, [r4, #16]
 811052a:	4620      	mov	r0, r4
 811052c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08110530 <__hi0bits>:
 8110530:	0c02      	lsrs	r2, r0, #16
 8110532:	0412      	lsls	r2, r2, #16
 8110534:	4603      	mov	r3, r0
 8110536:	b9b2      	cbnz	r2, 8110566 <__hi0bits+0x36>
 8110538:	0403      	lsls	r3, r0, #16
 811053a:	2010      	movs	r0, #16
 811053c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8110540:	bf04      	itt	eq
 8110542:	021b      	lsleq	r3, r3, #8
 8110544:	3008      	addeq	r0, #8
 8110546:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 811054a:	bf04      	itt	eq
 811054c:	011b      	lsleq	r3, r3, #4
 811054e:	3004      	addeq	r0, #4
 8110550:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8110554:	bf04      	itt	eq
 8110556:	009b      	lsleq	r3, r3, #2
 8110558:	3002      	addeq	r0, #2
 811055a:	2b00      	cmp	r3, #0
 811055c:	db06      	blt.n	811056c <__hi0bits+0x3c>
 811055e:	005b      	lsls	r3, r3, #1
 8110560:	d503      	bpl.n	811056a <__hi0bits+0x3a>
 8110562:	3001      	adds	r0, #1
 8110564:	4770      	bx	lr
 8110566:	2000      	movs	r0, #0
 8110568:	e7e8      	b.n	811053c <__hi0bits+0xc>
 811056a:	2020      	movs	r0, #32
 811056c:	4770      	bx	lr

0811056e <__lo0bits>:
 811056e:	6803      	ldr	r3, [r0, #0]
 8110570:	f013 0207 	ands.w	r2, r3, #7
 8110574:	4601      	mov	r1, r0
 8110576:	d00b      	beq.n	8110590 <__lo0bits+0x22>
 8110578:	07da      	lsls	r2, r3, #31
 811057a:	d423      	bmi.n	81105c4 <__lo0bits+0x56>
 811057c:	0798      	lsls	r0, r3, #30
 811057e:	bf49      	itett	mi
 8110580:	085b      	lsrmi	r3, r3, #1
 8110582:	089b      	lsrpl	r3, r3, #2
 8110584:	2001      	movmi	r0, #1
 8110586:	600b      	strmi	r3, [r1, #0]
 8110588:	bf5c      	itt	pl
 811058a:	600b      	strpl	r3, [r1, #0]
 811058c:	2002      	movpl	r0, #2
 811058e:	4770      	bx	lr
 8110590:	b298      	uxth	r0, r3
 8110592:	b9a8      	cbnz	r0, 81105c0 <__lo0bits+0x52>
 8110594:	0c1b      	lsrs	r3, r3, #16
 8110596:	2010      	movs	r0, #16
 8110598:	f013 0fff 	tst.w	r3, #255	; 0xff
 811059c:	bf04      	itt	eq
 811059e:	0a1b      	lsreq	r3, r3, #8
 81105a0:	3008      	addeq	r0, #8
 81105a2:	071a      	lsls	r2, r3, #28
 81105a4:	bf04      	itt	eq
 81105a6:	091b      	lsreq	r3, r3, #4
 81105a8:	3004      	addeq	r0, #4
 81105aa:	079a      	lsls	r2, r3, #30
 81105ac:	bf04      	itt	eq
 81105ae:	089b      	lsreq	r3, r3, #2
 81105b0:	3002      	addeq	r0, #2
 81105b2:	07da      	lsls	r2, r3, #31
 81105b4:	d402      	bmi.n	81105bc <__lo0bits+0x4e>
 81105b6:	085b      	lsrs	r3, r3, #1
 81105b8:	d006      	beq.n	81105c8 <__lo0bits+0x5a>
 81105ba:	3001      	adds	r0, #1
 81105bc:	600b      	str	r3, [r1, #0]
 81105be:	4770      	bx	lr
 81105c0:	4610      	mov	r0, r2
 81105c2:	e7e9      	b.n	8110598 <__lo0bits+0x2a>
 81105c4:	2000      	movs	r0, #0
 81105c6:	4770      	bx	lr
 81105c8:	2020      	movs	r0, #32
 81105ca:	4770      	bx	lr

081105cc <__i2b>:
 81105cc:	b510      	push	{r4, lr}
 81105ce:	460c      	mov	r4, r1
 81105d0:	2101      	movs	r1, #1
 81105d2:	f7ff ff27 	bl	8110424 <_Balloc>
 81105d6:	2201      	movs	r2, #1
 81105d8:	6144      	str	r4, [r0, #20]
 81105da:	6102      	str	r2, [r0, #16]
 81105dc:	bd10      	pop	{r4, pc}

081105de <__multiply>:
 81105de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81105e2:	4614      	mov	r4, r2
 81105e4:	690a      	ldr	r2, [r1, #16]
 81105e6:	6923      	ldr	r3, [r4, #16]
 81105e8:	429a      	cmp	r2, r3
 81105ea:	bfb8      	it	lt
 81105ec:	460b      	movlt	r3, r1
 81105ee:	4688      	mov	r8, r1
 81105f0:	bfbc      	itt	lt
 81105f2:	46a0      	movlt	r8, r4
 81105f4:	461c      	movlt	r4, r3
 81105f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 81105fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 81105fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8110602:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8110606:	eb07 0609 	add.w	r6, r7, r9
 811060a:	42b3      	cmp	r3, r6
 811060c:	bfb8      	it	lt
 811060e:	3101      	addlt	r1, #1
 8110610:	f7ff ff08 	bl	8110424 <_Balloc>
 8110614:	f100 0514 	add.w	r5, r0, #20
 8110618:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 811061c:	462b      	mov	r3, r5
 811061e:	2200      	movs	r2, #0
 8110620:	4573      	cmp	r3, lr
 8110622:	d316      	bcc.n	8110652 <__multiply+0x74>
 8110624:	f104 0214 	add.w	r2, r4, #20
 8110628:	f108 0114 	add.w	r1, r8, #20
 811062c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8110630:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8110634:	9300      	str	r3, [sp, #0]
 8110636:	9b00      	ldr	r3, [sp, #0]
 8110638:	9201      	str	r2, [sp, #4]
 811063a:	4293      	cmp	r3, r2
 811063c:	d80c      	bhi.n	8110658 <__multiply+0x7a>
 811063e:	2e00      	cmp	r6, #0
 8110640:	dd03      	ble.n	811064a <__multiply+0x6c>
 8110642:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8110646:	2b00      	cmp	r3, #0
 8110648:	d05d      	beq.n	8110706 <__multiply+0x128>
 811064a:	6106      	str	r6, [r0, #16]
 811064c:	b003      	add	sp, #12
 811064e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110652:	f843 2b04 	str.w	r2, [r3], #4
 8110656:	e7e3      	b.n	8110620 <__multiply+0x42>
 8110658:	f8b2 b000 	ldrh.w	fp, [r2]
 811065c:	f1bb 0f00 	cmp.w	fp, #0
 8110660:	d023      	beq.n	81106aa <__multiply+0xcc>
 8110662:	4689      	mov	r9, r1
 8110664:	46ac      	mov	ip, r5
 8110666:	f04f 0800 	mov.w	r8, #0
 811066a:	f859 4b04 	ldr.w	r4, [r9], #4
 811066e:	f8dc a000 	ldr.w	sl, [ip]
 8110672:	b2a3      	uxth	r3, r4
 8110674:	fa1f fa8a 	uxth.w	sl, sl
 8110678:	fb0b a303 	mla	r3, fp, r3, sl
 811067c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8110680:	f8dc 4000 	ldr.w	r4, [ip]
 8110684:	4443      	add	r3, r8
 8110686:	ea4f 4814 	mov.w	r8, r4, lsr #16
 811068a:	fb0b 840a 	mla	r4, fp, sl, r8
 811068e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8110692:	46e2      	mov	sl, ip
 8110694:	b29b      	uxth	r3, r3
 8110696:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 811069a:	454f      	cmp	r7, r9
 811069c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 81106a0:	f84a 3b04 	str.w	r3, [sl], #4
 81106a4:	d82b      	bhi.n	81106fe <__multiply+0x120>
 81106a6:	f8cc 8004 	str.w	r8, [ip, #4]
 81106aa:	9b01      	ldr	r3, [sp, #4]
 81106ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 81106b0:	3204      	adds	r2, #4
 81106b2:	f1ba 0f00 	cmp.w	sl, #0
 81106b6:	d020      	beq.n	81106fa <__multiply+0x11c>
 81106b8:	682b      	ldr	r3, [r5, #0]
 81106ba:	4689      	mov	r9, r1
 81106bc:	46a8      	mov	r8, r5
 81106be:	f04f 0b00 	mov.w	fp, #0
 81106c2:	f8b9 c000 	ldrh.w	ip, [r9]
 81106c6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 81106ca:	fb0a 440c 	mla	r4, sl, ip, r4
 81106ce:	445c      	add	r4, fp
 81106d0:	46c4      	mov	ip, r8
 81106d2:	b29b      	uxth	r3, r3
 81106d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81106d8:	f84c 3b04 	str.w	r3, [ip], #4
 81106dc:	f859 3b04 	ldr.w	r3, [r9], #4
 81106e0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 81106e4:	0c1b      	lsrs	r3, r3, #16
 81106e6:	fb0a b303 	mla	r3, sl, r3, fp
 81106ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 81106ee:	454f      	cmp	r7, r9
 81106f0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 81106f4:	d805      	bhi.n	8110702 <__multiply+0x124>
 81106f6:	f8c8 3004 	str.w	r3, [r8, #4]
 81106fa:	3504      	adds	r5, #4
 81106fc:	e79b      	b.n	8110636 <__multiply+0x58>
 81106fe:	46d4      	mov	ip, sl
 8110700:	e7b3      	b.n	811066a <__multiply+0x8c>
 8110702:	46e0      	mov	r8, ip
 8110704:	e7dd      	b.n	81106c2 <__multiply+0xe4>
 8110706:	3e01      	subs	r6, #1
 8110708:	e799      	b.n	811063e <__multiply+0x60>
	...

0811070c <__pow5mult>:
 811070c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8110710:	4615      	mov	r5, r2
 8110712:	f012 0203 	ands.w	r2, r2, #3
 8110716:	4606      	mov	r6, r0
 8110718:	460f      	mov	r7, r1
 811071a:	d007      	beq.n	811072c <__pow5mult+0x20>
 811071c:	3a01      	subs	r2, #1
 811071e:	4c21      	ldr	r4, [pc, #132]	; (81107a4 <__pow5mult+0x98>)
 8110720:	2300      	movs	r3, #0
 8110722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8110726:	f7ff fec8 	bl	81104ba <__multadd>
 811072a:	4607      	mov	r7, r0
 811072c:	10ad      	asrs	r5, r5, #2
 811072e:	d035      	beq.n	811079c <__pow5mult+0x90>
 8110730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8110732:	b93c      	cbnz	r4, 8110744 <__pow5mult+0x38>
 8110734:	2010      	movs	r0, #16
 8110736:	f7ff fe5b 	bl	81103f0 <malloc>
 811073a:	6270      	str	r0, [r6, #36]	; 0x24
 811073c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8110740:	6004      	str	r4, [r0, #0]
 8110742:	60c4      	str	r4, [r0, #12]
 8110744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8110748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 811074c:	b94c      	cbnz	r4, 8110762 <__pow5mult+0x56>
 811074e:	f240 2171 	movw	r1, #625	; 0x271
 8110752:	4630      	mov	r0, r6
 8110754:	f7ff ff3a 	bl	81105cc <__i2b>
 8110758:	2300      	movs	r3, #0
 811075a:	f8c8 0008 	str.w	r0, [r8, #8]
 811075e:	4604      	mov	r4, r0
 8110760:	6003      	str	r3, [r0, #0]
 8110762:	f04f 0800 	mov.w	r8, #0
 8110766:	07eb      	lsls	r3, r5, #31
 8110768:	d50a      	bpl.n	8110780 <__pow5mult+0x74>
 811076a:	4639      	mov	r1, r7
 811076c:	4622      	mov	r2, r4
 811076e:	4630      	mov	r0, r6
 8110770:	f7ff ff35 	bl	81105de <__multiply>
 8110774:	4639      	mov	r1, r7
 8110776:	4681      	mov	r9, r0
 8110778:	4630      	mov	r0, r6
 811077a:	f7ff fe87 	bl	811048c <_Bfree>
 811077e:	464f      	mov	r7, r9
 8110780:	106d      	asrs	r5, r5, #1
 8110782:	d00b      	beq.n	811079c <__pow5mult+0x90>
 8110784:	6820      	ldr	r0, [r4, #0]
 8110786:	b938      	cbnz	r0, 8110798 <__pow5mult+0x8c>
 8110788:	4622      	mov	r2, r4
 811078a:	4621      	mov	r1, r4
 811078c:	4630      	mov	r0, r6
 811078e:	f7ff ff26 	bl	81105de <__multiply>
 8110792:	6020      	str	r0, [r4, #0]
 8110794:	f8c0 8000 	str.w	r8, [r0]
 8110798:	4604      	mov	r4, r0
 811079a:	e7e4      	b.n	8110766 <__pow5mult+0x5a>
 811079c:	4638      	mov	r0, r7
 811079e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81107a2:	bf00      	nop
 81107a4:	08111b68 	.word	0x08111b68

081107a8 <__lshift>:
 81107a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81107ac:	460c      	mov	r4, r1
 81107ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81107b2:	6923      	ldr	r3, [r4, #16]
 81107b4:	6849      	ldr	r1, [r1, #4]
 81107b6:	eb0a 0903 	add.w	r9, sl, r3
 81107ba:	68a3      	ldr	r3, [r4, #8]
 81107bc:	4607      	mov	r7, r0
 81107be:	4616      	mov	r6, r2
 81107c0:	f109 0501 	add.w	r5, r9, #1
 81107c4:	42ab      	cmp	r3, r5
 81107c6:	db32      	blt.n	811082e <__lshift+0x86>
 81107c8:	4638      	mov	r0, r7
 81107ca:	f7ff fe2b 	bl	8110424 <_Balloc>
 81107ce:	2300      	movs	r3, #0
 81107d0:	4680      	mov	r8, r0
 81107d2:	f100 0114 	add.w	r1, r0, #20
 81107d6:	461a      	mov	r2, r3
 81107d8:	4553      	cmp	r3, sl
 81107da:	db2b      	blt.n	8110834 <__lshift+0x8c>
 81107dc:	6920      	ldr	r0, [r4, #16]
 81107de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 81107e2:	f104 0314 	add.w	r3, r4, #20
 81107e6:	f016 021f 	ands.w	r2, r6, #31
 81107ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81107ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 81107f2:	d025      	beq.n	8110840 <__lshift+0x98>
 81107f4:	f1c2 0e20 	rsb	lr, r2, #32
 81107f8:	2000      	movs	r0, #0
 81107fa:	681e      	ldr	r6, [r3, #0]
 81107fc:	468a      	mov	sl, r1
 81107fe:	4096      	lsls	r6, r2
 8110800:	4330      	orrs	r0, r6
 8110802:	f84a 0b04 	str.w	r0, [sl], #4
 8110806:	f853 0b04 	ldr.w	r0, [r3], #4
 811080a:	459c      	cmp	ip, r3
 811080c:	fa20 f00e 	lsr.w	r0, r0, lr
 8110810:	d814      	bhi.n	811083c <__lshift+0x94>
 8110812:	6048      	str	r0, [r1, #4]
 8110814:	b108      	cbz	r0, 811081a <__lshift+0x72>
 8110816:	f109 0502 	add.w	r5, r9, #2
 811081a:	3d01      	subs	r5, #1
 811081c:	4638      	mov	r0, r7
 811081e:	f8c8 5010 	str.w	r5, [r8, #16]
 8110822:	4621      	mov	r1, r4
 8110824:	f7ff fe32 	bl	811048c <_Bfree>
 8110828:	4640      	mov	r0, r8
 811082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811082e:	3101      	adds	r1, #1
 8110830:	005b      	lsls	r3, r3, #1
 8110832:	e7c7      	b.n	81107c4 <__lshift+0x1c>
 8110834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8110838:	3301      	adds	r3, #1
 811083a:	e7cd      	b.n	81107d8 <__lshift+0x30>
 811083c:	4651      	mov	r1, sl
 811083e:	e7dc      	b.n	81107fa <__lshift+0x52>
 8110840:	3904      	subs	r1, #4
 8110842:	f853 2b04 	ldr.w	r2, [r3], #4
 8110846:	f841 2f04 	str.w	r2, [r1, #4]!
 811084a:	459c      	cmp	ip, r3
 811084c:	d8f9      	bhi.n	8110842 <__lshift+0x9a>
 811084e:	e7e4      	b.n	811081a <__lshift+0x72>

08110850 <__mcmp>:
 8110850:	6903      	ldr	r3, [r0, #16]
 8110852:	690a      	ldr	r2, [r1, #16]
 8110854:	1a9b      	subs	r3, r3, r2
 8110856:	b530      	push	{r4, r5, lr}
 8110858:	d10c      	bne.n	8110874 <__mcmp+0x24>
 811085a:	0092      	lsls	r2, r2, #2
 811085c:	3014      	adds	r0, #20
 811085e:	3114      	adds	r1, #20
 8110860:	1884      	adds	r4, r0, r2
 8110862:	4411      	add	r1, r2
 8110864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8110868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 811086c:	4295      	cmp	r5, r2
 811086e:	d003      	beq.n	8110878 <__mcmp+0x28>
 8110870:	d305      	bcc.n	811087e <__mcmp+0x2e>
 8110872:	2301      	movs	r3, #1
 8110874:	4618      	mov	r0, r3
 8110876:	bd30      	pop	{r4, r5, pc}
 8110878:	42a0      	cmp	r0, r4
 811087a:	d3f3      	bcc.n	8110864 <__mcmp+0x14>
 811087c:	e7fa      	b.n	8110874 <__mcmp+0x24>
 811087e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8110882:	e7f7      	b.n	8110874 <__mcmp+0x24>

08110884 <__mdiff>:
 8110884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8110888:	460d      	mov	r5, r1
 811088a:	4607      	mov	r7, r0
 811088c:	4611      	mov	r1, r2
 811088e:	4628      	mov	r0, r5
 8110890:	4614      	mov	r4, r2
 8110892:	f7ff ffdd 	bl	8110850 <__mcmp>
 8110896:	1e06      	subs	r6, r0, #0
 8110898:	d108      	bne.n	81108ac <__mdiff+0x28>
 811089a:	4631      	mov	r1, r6
 811089c:	4638      	mov	r0, r7
 811089e:	f7ff fdc1 	bl	8110424 <_Balloc>
 81108a2:	2301      	movs	r3, #1
 81108a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 81108a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81108ac:	bfa4      	itt	ge
 81108ae:	4623      	movge	r3, r4
 81108b0:	462c      	movge	r4, r5
 81108b2:	4638      	mov	r0, r7
 81108b4:	6861      	ldr	r1, [r4, #4]
 81108b6:	bfa6      	itte	ge
 81108b8:	461d      	movge	r5, r3
 81108ba:	2600      	movge	r6, #0
 81108bc:	2601      	movlt	r6, #1
 81108be:	f7ff fdb1 	bl	8110424 <_Balloc>
 81108c2:	692b      	ldr	r3, [r5, #16]
 81108c4:	60c6      	str	r6, [r0, #12]
 81108c6:	6926      	ldr	r6, [r4, #16]
 81108c8:	f105 0914 	add.w	r9, r5, #20
 81108cc:	f104 0214 	add.w	r2, r4, #20
 81108d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 81108d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 81108d8:	f100 0514 	add.w	r5, r0, #20
 81108dc:	f04f 0e00 	mov.w	lr, #0
 81108e0:	f852 ab04 	ldr.w	sl, [r2], #4
 81108e4:	f859 4b04 	ldr.w	r4, [r9], #4
 81108e8:	fa1e f18a 	uxtah	r1, lr, sl
 81108ec:	b2a3      	uxth	r3, r4
 81108ee:	1ac9      	subs	r1, r1, r3
 81108f0:	0c23      	lsrs	r3, r4, #16
 81108f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 81108f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 81108fa:	b289      	uxth	r1, r1
 81108fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8110900:	45c8      	cmp	r8, r9
 8110902:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8110906:	4694      	mov	ip, r2
 8110908:	f845 3b04 	str.w	r3, [r5], #4
 811090c:	d8e8      	bhi.n	81108e0 <__mdiff+0x5c>
 811090e:	45bc      	cmp	ip, r7
 8110910:	d304      	bcc.n	811091c <__mdiff+0x98>
 8110912:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8110916:	b183      	cbz	r3, 811093a <__mdiff+0xb6>
 8110918:	6106      	str	r6, [r0, #16]
 811091a:	e7c5      	b.n	81108a8 <__mdiff+0x24>
 811091c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8110920:	fa1e f381 	uxtah	r3, lr, r1
 8110924:	141a      	asrs	r2, r3, #16
 8110926:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 811092a:	b29b      	uxth	r3, r3
 811092c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8110930:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8110934:	f845 3b04 	str.w	r3, [r5], #4
 8110938:	e7e9      	b.n	811090e <__mdiff+0x8a>
 811093a:	3e01      	subs	r6, #1
 811093c:	e7e9      	b.n	8110912 <__mdiff+0x8e>

0811093e <__d2b>:
 811093e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8110942:	460e      	mov	r6, r1
 8110944:	2101      	movs	r1, #1
 8110946:	ec59 8b10 	vmov	r8, r9, d0
 811094a:	4615      	mov	r5, r2
 811094c:	f7ff fd6a 	bl	8110424 <_Balloc>
 8110950:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8110954:	4607      	mov	r7, r0
 8110956:	f3c9 0313 	ubfx	r3, r9, #0, #20
 811095a:	bb34      	cbnz	r4, 81109aa <__d2b+0x6c>
 811095c:	9301      	str	r3, [sp, #4]
 811095e:	f1b8 0300 	subs.w	r3, r8, #0
 8110962:	d027      	beq.n	81109b4 <__d2b+0x76>
 8110964:	a802      	add	r0, sp, #8
 8110966:	f840 3d08 	str.w	r3, [r0, #-8]!
 811096a:	f7ff fe00 	bl	811056e <__lo0bits>
 811096e:	9900      	ldr	r1, [sp, #0]
 8110970:	b1f0      	cbz	r0, 81109b0 <__d2b+0x72>
 8110972:	9a01      	ldr	r2, [sp, #4]
 8110974:	f1c0 0320 	rsb	r3, r0, #32
 8110978:	fa02 f303 	lsl.w	r3, r2, r3
 811097c:	430b      	orrs	r3, r1
 811097e:	40c2      	lsrs	r2, r0
 8110980:	617b      	str	r3, [r7, #20]
 8110982:	9201      	str	r2, [sp, #4]
 8110984:	9b01      	ldr	r3, [sp, #4]
 8110986:	61bb      	str	r3, [r7, #24]
 8110988:	2b00      	cmp	r3, #0
 811098a:	bf14      	ite	ne
 811098c:	2102      	movne	r1, #2
 811098e:	2101      	moveq	r1, #1
 8110990:	6139      	str	r1, [r7, #16]
 8110992:	b1c4      	cbz	r4, 81109c6 <__d2b+0x88>
 8110994:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8110998:	4404      	add	r4, r0
 811099a:	6034      	str	r4, [r6, #0]
 811099c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 81109a0:	6028      	str	r0, [r5, #0]
 81109a2:	4638      	mov	r0, r7
 81109a4:	b003      	add	sp, #12
 81109a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81109aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81109ae:	e7d5      	b.n	811095c <__d2b+0x1e>
 81109b0:	6179      	str	r1, [r7, #20]
 81109b2:	e7e7      	b.n	8110984 <__d2b+0x46>
 81109b4:	a801      	add	r0, sp, #4
 81109b6:	f7ff fdda 	bl	811056e <__lo0bits>
 81109ba:	9b01      	ldr	r3, [sp, #4]
 81109bc:	617b      	str	r3, [r7, #20]
 81109be:	2101      	movs	r1, #1
 81109c0:	6139      	str	r1, [r7, #16]
 81109c2:	3020      	adds	r0, #32
 81109c4:	e7e5      	b.n	8110992 <__d2b+0x54>
 81109c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 81109ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 81109ce:	6030      	str	r0, [r6, #0]
 81109d0:	6918      	ldr	r0, [r3, #16]
 81109d2:	f7ff fdad 	bl	8110530 <__hi0bits>
 81109d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 81109da:	e7e1      	b.n	81109a0 <__d2b+0x62>

081109dc <_calloc_r>:
 81109dc:	b538      	push	{r3, r4, r5, lr}
 81109de:	fb02 f401 	mul.w	r4, r2, r1
 81109e2:	4621      	mov	r1, r4
 81109e4:	f000 f856 	bl	8110a94 <_malloc_r>
 81109e8:	4605      	mov	r5, r0
 81109ea:	b118      	cbz	r0, 81109f4 <_calloc_r+0x18>
 81109ec:	4622      	mov	r2, r4
 81109ee:	2100      	movs	r1, #0
 81109f0:	f7fd fdaf 	bl	810e552 <memset>
 81109f4:	4628      	mov	r0, r5
 81109f6:	bd38      	pop	{r3, r4, r5, pc}

081109f8 <_free_r>:
 81109f8:	b538      	push	{r3, r4, r5, lr}
 81109fa:	4605      	mov	r5, r0
 81109fc:	2900      	cmp	r1, #0
 81109fe:	d045      	beq.n	8110a8c <_free_r+0x94>
 8110a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8110a04:	1f0c      	subs	r4, r1, #4
 8110a06:	2b00      	cmp	r3, #0
 8110a08:	bfb8      	it	lt
 8110a0a:	18e4      	addlt	r4, r4, r3
 8110a0c:	f000 fbfd 	bl	811120a <__malloc_lock>
 8110a10:	4a1f      	ldr	r2, [pc, #124]	; (8110a90 <_free_r+0x98>)
 8110a12:	6813      	ldr	r3, [r2, #0]
 8110a14:	4610      	mov	r0, r2
 8110a16:	b933      	cbnz	r3, 8110a26 <_free_r+0x2e>
 8110a18:	6063      	str	r3, [r4, #4]
 8110a1a:	6014      	str	r4, [r2, #0]
 8110a1c:	4628      	mov	r0, r5
 8110a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8110a22:	f000 bbf3 	b.w	811120c <__malloc_unlock>
 8110a26:	42a3      	cmp	r3, r4
 8110a28:	d90c      	bls.n	8110a44 <_free_r+0x4c>
 8110a2a:	6821      	ldr	r1, [r4, #0]
 8110a2c:	1862      	adds	r2, r4, r1
 8110a2e:	4293      	cmp	r3, r2
 8110a30:	bf04      	itt	eq
 8110a32:	681a      	ldreq	r2, [r3, #0]
 8110a34:	685b      	ldreq	r3, [r3, #4]
 8110a36:	6063      	str	r3, [r4, #4]
 8110a38:	bf04      	itt	eq
 8110a3a:	1852      	addeq	r2, r2, r1
 8110a3c:	6022      	streq	r2, [r4, #0]
 8110a3e:	6004      	str	r4, [r0, #0]
 8110a40:	e7ec      	b.n	8110a1c <_free_r+0x24>
 8110a42:	4613      	mov	r3, r2
 8110a44:	685a      	ldr	r2, [r3, #4]
 8110a46:	b10a      	cbz	r2, 8110a4c <_free_r+0x54>
 8110a48:	42a2      	cmp	r2, r4
 8110a4a:	d9fa      	bls.n	8110a42 <_free_r+0x4a>
 8110a4c:	6819      	ldr	r1, [r3, #0]
 8110a4e:	1858      	adds	r0, r3, r1
 8110a50:	42a0      	cmp	r0, r4
 8110a52:	d10b      	bne.n	8110a6c <_free_r+0x74>
 8110a54:	6820      	ldr	r0, [r4, #0]
 8110a56:	4401      	add	r1, r0
 8110a58:	1858      	adds	r0, r3, r1
 8110a5a:	4282      	cmp	r2, r0
 8110a5c:	6019      	str	r1, [r3, #0]
 8110a5e:	d1dd      	bne.n	8110a1c <_free_r+0x24>
 8110a60:	6810      	ldr	r0, [r2, #0]
 8110a62:	6852      	ldr	r2, [r2, #4]
 8110a64:	605a      	str	r2, [r3, #4]
 8110a66:	4401      	add	r1, r0
 8110a68:	6019      	str	r1, [r3, #0]
 8110a6a:	e7d7      	b.n	8110a1c <_free_r+0x24>
 8110a6c:	d902      	bls.n	8110a74 <_free_r+0x7c>
 8110a6e:	230c      	movs	r3, #12
 8110a70:	602b      	str	r3, [r5, #0]
 8110a72:	e7d3      	b.n	8110a1c <_free_r+0x24>
 8110a74:	6820      	ldr	r0, [r4, #0]
 8110a76:	1821      	adds	r1, r4, r0
 8110a78:	428a      	cmp	r2, r1
 8110a7a:	bf04      	itt	eq
 8110a7c:	6811      	ldreq	r1, [r2, #0]
 8110a7e:	6852      	ldreq	r2, [r2, #4]
 8110a80:	6062      	str	r2, [r4, #4]
 8110a82:	bf04      	itt	eq
 8110a84:	1809      	addeq	r1, r1, r0
 8110a86:	6021      	streq	r1, [r4, #0]
 8110a88:	605c      	str	r4, [r3, #4]
 8110a8a:	e7c7      	b.n	8110a1c <_free_r+0x24>
 8110a8c:	bd38      	pop	{r3, r4, r5, pc}
 8110a8e:	bf00      	nop
 8110a90:	10005800 	.word	0x10005800

08110a94 <_malloc_r>:
 8110a94:	b570      	push	{r4, r5, r6, lr}
 8110a96:	1ccd      	adds	r5, r1, #3
 8110a98:	f025 0503 	bic.w	r5, r5, #3
 8110a9c:	3508      	adds	r5, #8
 8110a9e:	2d0c      	cmp	r5, #12
 8110aa0:	bf38      	it	cc
 8110aa2:	250c      	movcc	r5, #12
 8110aa4:	2d00      	cmp	r5, #0
 8110aa6:	4606      	mov	r6, r0
 8110aa8:	db01      	blt.n	8110aae <_malloc_r+0x1a>
 8110aaa:	42a9      	cmp	r1, r5
 8110aac:	d903      	bls.n	8110ab6 <_malloc_r+0x22>
 8110aae:	230c      	movs	r3, #12
 8110ab0:	6033      	str	r3, [r6, #0]
 8110ab2:	2000      	movs	r0, #0
 8110ab4:	bd70      	pop	{r4, r5, r6, pc}
 8110ab6:	f000 fba8 	bl	811120a <__malloc_lock>
 8110aba:	4a21      	ldr	r2, [pc, #132]	; (8110b40 <_malloc_r+0xac>)
 8110abc:	6814      	ldr	r4, [r2, #0]
 8110abe:	4621      	mov	r1, r4
 8110ac0:	b991      	cbnz	r1, 8110ae8 <_malloc_r+0x54>
 8110ac2:	4c20      	ldr	r4, [pc, #128]	; (8110b44 <_malloc_r+0xb0>)
 8110ac4:	6823      	ldr	r3, [r4, #0]
 8110ac6:	b91b      	cbnz	r3, 8110ad0 <_malloc_r+0x3c>
 8110ac8:	4630      	mov	r0, r6
 8110aca:	f000 facf 	bl	811106c <_sbrk_r>
 8110ace:	6020      	str	r0, [r4, #0]
 8110ad0:	4629      	mov	r1, r5
 8110ad2:	4630      	mov	r0, r6
 8110ad4:	f000 faca 	bl	811106c <_sbrk_r>
 8110ad8:	1c43      	adds	r3, r0, #1
 8110ada:	d124      	bne.n	8110b26 <_malloc_r+0x92>
 8110adc:	230c      	movs	r3, #12
 8110ade:	6033      	str	r3, [r6, #0]
 8110ae0:	4630      	mov	r0, r6
 8110ae2:	f000 fb93 	bl	811120c <__malloc_unlock>
 8110ae6:	e7e4      	b.n	8110ab2 <_malloc_r+0x1e>
 8110ae8:	680b      	ldr	r3, [r1, #0]
 8110aea:	1b5b      	subs	r3, r3, r5
 8110aec:	d418      	bmi.n	8110b20 <_malloc_r+0x8c>
 8110aee:	2b0b      	cmp	r3, #11
 8110af0:	d90f      	bls.n	8110b12 <_malloc_r+0x7e>
 8110af2:	600b      	str	r3, [r1, #0]
 8110af4:	50cd      	str	r5, [r1, r3]
 8110af6:	18cc      	adds	r4, r1, r3
 8110af8:	4630      	mov	r0, r6
 8110afa:	f000 fb87 	bl	811120c <__malloc_unlock>
 8110afe:	f104 000b 	add.w	r0, r4, #11
 8110b02:	1d23      	adds	r3, r4, #4
 8110b04:	f020 0007 	bic.w	r0, r0, #7
 8110b08:	1ac3      	subs	r3, r0, r3
 8110b0a:	d0d3      	beq.n	8110ab4 <_malloc_r+0x20>
 8110b0c:	425a      	negs	r2, r3
 8110b0e:	50e2      	str	r2, [r4, r3]
 8110b10:	e7d0      	b.n	8110ab4 <_malloc_r+0x20>
 8110b12:	428c      	cmp	r4, r1
 8110b14:	684b      	ldr	r3, [r1, #4]
 8110b16:	bf16      	itet	ne
 8110b18:	6063      	strne	r3, [r4, #4]
 8110b1a:	6013      	streq	r3, [r2, #0]
 8110b1c:	460c      	movne	r4, r1
 8110b1e:	e7eb      	b.n	8110af8 <_malloc_r+0x64>
 8110b20:	460c      	mov	r4, r1
 8110b22:	6849      	ldr	r1, [r1, #4]
 8110b24:	e7cc      	b.n	8110ac0 <_malloc_r+0x2c>
 8110b26:	1cc4      	adds	r4, r0, #3
 8110b28:	f024 0403 	bic.w	r4, r4, #3
 8110b2c:	42a0      	cmp	r0, r4
 8110b2e:	d005      	beq.n	8110b3c <_malloc_r+0xa8>
 8110b30:	1a21      	subs	r1, r4, r0
 8110b32:	4630      	mov	r0, r6
 8110b34:	f000 fa9a 	bl	811106c <_sbrk_r>
 8110b38:	3001      	adds	r0, #1
 8110b3a:	d0cf      	beq.n	8110adc <_malloc_r+0x48>
 8110b3c:	6025      	str	r5, [r4, #0]
 8110b3e:	e7db      	b.n	8110af8 <_malloc_r+0x64>
 8110b40:	10005800 	.word	0x10005800
 8110b44:	10005804 	.word	0x10005804

08110b48 <__ssputs_r>:
 8110b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8110b4c:	688e      	ldr	r6, [r1, #8]
 8110b4e:	429e      	cmp	r6, r3
 8110b50:	4682      	mov	sl, r0
 8110b52:	460c      	mov	r4, r1
 8110b54:	4690      	mov	r8, r2
 8110b56:	4699      	mov	r9, r3
 8110b58:	d837      	bhi.n	8110bca <__ssputs_r+0x82>
 8110b5a:	898a      	ldrh	r2, [r1, #12]
 8110b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8110b60:	d031      	beq.n	8110bc6 <__ssputs_r+0x7e>
 8110b62:	6825      	ldr	r5, [r4, #0]
 8110b64:	6909      	ldr	r1, [r1, #16]
 8110b66:	1a6f      	subs	r7, r5, r1
 8110b68:	6965      	ldr	r5, [r4, #20]
 8110b6a:	2302      	movs	r3, #2
 8110b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8110b70:	fb95 f5f3 	sdiv	r5, r5, r3
 8110b74:	f109 0301 	add.w	r3, r9, #1
 8110b78:	443b      	add	r3, r7
 8110b7a:	429d      	cmp	r5, r3
 8110b7c:	bf38      	it	cc
 8110b7e:	461d      	movcc	r5, r3
 8110b80:	0553      	lsls	r3, r2, #21
 8110b82:	d530      	bpl.n	8110be6 <__ssputs_r+0x9e>
 8110b84:	4629      	mov	r1, r5
 8110b86:	f7ff ff85 	bl	8110a94 <_malloc_r>
 8110b8a:	4606      	mov	r6, r0
 8110b8c:	b950      	cbnz	r0, 8110ba4 <__ssputs_r+0x5c>
 8110b8e:	230c      	movs	r3, #12
 8110b90:	f8ca 3000 	str.w	r3, [sl]
 8110b94:	89a3      	ldrh	r3, [r4, #12]
 8110b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8110b9a:	81a3      	strh	r3, [r4, #12]
 8110b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8110ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8110ba4:	463a      	mov	r2, r7
 8110ba6:	6921      	ldr	r1, [r4, #16]
 8110ba8:	f7fd fcc8 	bl	810e53c <memcpy>
 8110bac:	89a3      	ldrh	r3, [r4, #12]
 8110bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8110bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8110bb6:	81a3      	strh	r3, [r4, #12]
 8110bb8:	6126      	str	r6, [r4, #16]
 8110bba:	6165      	str	r5, [r4, #20]
 8110bbc:	443e      	add	r6, r7
 8110bbe:	1bed      	subs	r5, r5, r7
 8110bc0:	6026      	str	r6, [r4, #0]
 8110bc2:	60a5      	str	r5, [r4, #8]
 8110bc4:	464e      	mov	r6, r9
 8110bc6:	454e      	cmp	r6, r9
 8110bc8:	d900      	bls.n	8110bcc <__ssputs_r+0x84>
 8110bca:	464e      	mov	r6, r9
 8110bcc:	4632      	mov	r2, r6
 8110bce:	4641      	mov	r1, r8
 8110bd0:	6820      	ldr	r0, [r4, #0]
 8110bd2:	f000 fb01 	bl	81111d8 <memmove>
 8110bd6:	68a3      	ldr	r3, [r4, #8]
 8110bd8:	1b9b      	subs	r3, r3, r6
 8110bda:	60a3      	str	r3, [r4, #8]
 8110bdc:	6823      	ldr	r3, [r4, #0]
 8110bde:	441e      	add	r6, r3
 8110be0:	6026      	str	r6, [r4, #0]
 8110be2:	2000      	movs	r0, #0
 8110be4:	e7dc      	b.n	8110ba0 <__ssputs_r+0x58>
 8110be6:	462a      	mov	r2, r5
 8110be8:	f000 fb11 	bl	811120e <_realloc_r>
 8110bec:	4606      	mov	r6, r0
 8110bee:	2800      	cmp	r0, #0
 8110bf0:	d1e2      	bne.n	8110bb8 <__ssputs_r+0x70>
 8110bf2:	6921      	ldr	r1, [r4, #16]
 8110bf4:	4650      	mov	r0, sl
 8110bf6:	f7ff feff 	bl	81109f8 <_free_r>
 8110bfa:	e7c8      	b.n	8110b8e <__ssputs_r+0x46>

08110bfc <_svfiprintf_r>:
 8110bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110c00:	461d      	mov	r5, r3
 8110c02:	898b      	ldrh	r3, [r1, #12]
 8110c04:	061f      	lsls	r7, r3, #24
 8110c06:	b09d      	sub	sp, #116	; 0x74
 8110c08:	4680      	mov	r8, r0
 8110c0a:	460c      	mov	r4, r1
 8110c0c:	4616      	mov	r6, r2
 8110c0e:	d50f      	bpl.n	8110c30 <_svfiprintf_r+0x34>
 8110c10:	690b      	ldr	r3, [r1, #16]
 8110c12:	b96b      	cbnz	r3, 8110c30 <_svfiprintf_r+0x34>
 8110c14:	2140      	movs	r1, #64	; 0x40
 8110c16:	f7ff ff3d 	bl	8110a94 <_malloc_r>
 8110c1a:	6020      	str	r0, [r4, #0]
 8110c1c:	6120      	str	r0, [r4, #16]
 8110c1e:	b928      	cbnz	r0, 8110c2c <_svfiprintf_r+0x30>
 8110c20:	230c      	movs	r3, #12
 8110c22:	f8c8 3000 	str.w	r3, [r8]
 8110c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8110c2a:	e0c8      	b.n	8110dbe <_svfiprintf_r+0x1c2>
 8110c2c:	2340      	movs	r3, #64	; 0x40
 8110c2e:	6163      	str	r3, [r4, #20]
 8110c30:	2300      	movs	r3, #0
 8110c32:	9309      	str	r3, [sp, #36]	; 0x24
 8110c34:	2320      	movs	r3, #32
 8110c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8110c3a:	2330      	movs	r3, #48	; 0x30
 8110c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8110c40:	9503      	str	r5, [sp, #12]
 8110c42:	f04f 0b01 	mov.w	fp, #1
 8110c46:	4637      	mov	r7, r6
 8110c48:	463d      	mov	r5, r7
 8110c4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8110c4e:	b10b      	cbz	r3, 8110c54 <_svfiprintf_r+0x58>
 8110c50:	2b25      	cmp	r3, #37	; 0x25
 8110c52:	d13e      	bne.n	8110cd2 <_svfiprintf_r+0xd6>
 8110c54:	ebb7 0a06 	subs.w	sl, r7, r6
 8110c58:	d00b      	beq.n	8110c72 <_svfiprintf_r+0x76>
 8110c5a:	4653      	mov	r3, sl
 8110c5c:	4632      	mov	r2, r6
 8110c5e:	4621      	mov	r1, r4
 8110c60:	4640      	mov	r0, r8
 8110c62:	f7ff ff71 	bl	8110b48 <__ssputs_r>
 8110c66:	3001      	adds	r0, #1
 8110c68:	f000 80a4 	beq.w	8110db4 <_svfiprintf_r+0x1b8>
 8110c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110c6e:	4453      	add	r3, sl
 8110c70:	9309      	str	r3, [sp, #36]	; 0x24
 8110c72:	783b      	ldrb	r3, [r7, #0]
 8110c74:	2b00      	cmp	r3, #0
 8110c76:	f000 809d 	beq.w	8110db4 <_svfiprintf_r+0x1b8>
 8110c7a:	2300      	movs	r3, #0
 8110c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8110c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110c84:	9304      	str	r3, [sp, #16]
 8110c86:	9307      	str	r3, [sp, #28]
 8110c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8110c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8110c8e:	462f      	mov	r7, r5
 8110c90:	2205      	movs	r2, #5
 8110c92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8110c96:	4850      	ldr	r0, [pc, #320]	; (8110dd8 <_svfiprintf_r+0x1dc>)
 8110c98:	f7ef fb2a 	bl	81002f0 <memchr>
 8110c9c:	9b04      	ldr	r3, [sp, #16]
 8110c9e:	b9d0      	cbnz	r0, 8110cd6 <_svfiprintf_r+0xda>
 8110ca0:	06d9      	lsls	r1, r3, #27
 8110ca2:	bf44      	itt	mi
 8110ca4:	2220      	movmi	r2, #32
 8110ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8110caa:	071a      	lsls	r2, r3, #28
 8110cac:	bf44      	itt	mi
 8110cae:	222b      	movmi	r2, #43	; 0x2b
 8110cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8110cb4:	782a      	ldrb	r2, [r5, #0]
 8110cb6:	2a2a      	cmp	r2, #42	; 0x2a
 8110cb8:	d015      	beq.n	8110ce6 <_svfiprintf_r+0xea>
 8110cba:	9a07      	ldr	r2, [sp, #28]
 8110cbc:	462f      	mov	r7, r5
 8110cbe:	2000      	movs	r0, #0
 8110cc0:	250a      	movs	r5, #10
 8110cc2:	4639      	mov	r1, r7
 8110cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8110cc8:	3b30      	subs	r3, #48	; 0x30
 8110cca:	2b09      	cmp	r3, #9
 8110ccc:	d94d      	bls.n	8110d6a <_svfiprintf_r+0x16e>
 8110cce:	b1b8      	cbz	r0, 8110d00 <_svfiprintf_r+0x104>
 8110cd0:	e00f      	b.n	8110cf2 <_svfiprintf_r+0xf6>
 8110cd2:	462f      	mov	r7, r5
 8110cd4:	e7b8      	b.n	8110c48 <_svfiprintf_r+0x4c>
 8110cd6:	4a40      	ldr	r2, [pc, #256]	; (8110dd8 <_svfiprintf_r+0x1dc>)
 8110cd8:	1a80      	subs	r0, r0, r2
 8110cda:	fa0b f000 	lsl.w	r0, fp, r0
 8110cde:	4318      	orrs	r0, r3
 8110ce0:	9004      	str	r0, [sp, #16]
 8110ce2:	463d      	mov	r5, r7
 8110ce4:	e7d3      	b.n	8110c8e <_svfiprintf_r+0x92>
 8110ce6:	9a03      	ldr	r2, [sp, #12]
 8110ce8:	1d11      	adds	r1, r2, #4
 8110cea:	6812      	ldr	r2, [r2, #0]
 8110cec:	9103      	str	r1, [sp, #12]
 8110cee:	2a00      	cmp	r2, #0
 8110cf0:	db01      	blt.n	8110cf6 <_svfiprintf_r+0xfa>
 8110cf2:	9207      	str	r2, [sp, #28]
 8110cf4:	e004      	b.n	8110d00 <_svfiprintf_r+0x104>
 8110cf6:	4252      	negs	r2, r2
 8110cf8:	f043 0302 	orr.w	r3, r3, #2
 8110cfc:	9207      	str	r2, [sp, #28]
 8110cfe:	9304      	str	r3, [sp, #16]
 8110d00:	783b      	ldrb	r3, [r7, #0]
 8110d02:	2b2e      	cmp	r3, #46	; 0x2e
 8110d04:	d10c      	bne.n	8110d20 <_svfiprintf_r+0x124>
 8110d06:	787b      	ldrb	r3, [r7, #1]
 8110d08:	2b2a      	cmp	r3, #42	; 0x2a
 8110d0a:	d133      	bne.n	8110d74 <_svfiprintf_r+0x178>
 8110d0c:	9b03      	ldr	r3, [sp, #12]
 8110d0e:	1d1a      	adds	r2, r3, #4
 8110d10:	681b      	ldr	r3, [r3, #0]
 8110d12:	9203      	str	r2, [sp, #12]
 8110d14:	2b00      	cmp	r3, #0
 8110d16:	bfb8      	it	lt
 8110d18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8110d1c:	3702      	adds	r7, #2
 8110d1e:	9305      	str	r3, [sp, #20]
 8110d20:	4d2e      	ldr	r5, [pc, #184]	; (8110ddc <_svfiprintf_r+0x1e0>)
 8110d22:	7839      	ldrb	r1, [r7, #0]
 8110d24:	2203      	movs	r2, #3
 8110d26:	4628      	mov	r0, r5
 8110d28:	f7ef fae2 	bl	81002f0 <memchr>
 8110d2c:	b138      	cbz	r0, 8110d3e <_svfiprintf_r+0x142>
 8110d2e:	2340      	movs	r3, #64	; 0x40
 8110d30:	1b40      	subs	r0, r0, r5
 8110d32:	fa03 f000 	lsl.w	r0, r3, r0
 8110d36:	9b04      	ldr	r3, [sp, #16]
 8110d38:	4303      	orrs	r3, r0
 8110d3a:	3701      	adds	r7, #1
 8110d3c:	9304      	str	r3, [sp, #16]
 8110d3e:	7839      	ldrb	r1, [r7, #0]
 8110d40:	4827      	ldr	r0, [pc, #156]	; (8110de0 <_svfiprintf_r+0x1e4>)
 8110d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8110d46:	2206      	movs	r2, #6
 8110d48:	1c7e      	adds	r6, r7, #1
 8110d4a:	f7ef fad1 	bl	81002f0 <memchr>
 8110d4e:	2800      	cmp	r0, #0
 8110d50:	d038      	beq.n	8110dc4 <_svfiprintf_r+0x1c8>
 8110d52:	4b24      	ldr	r3, [pc, #144]	; (8110de4 <_svfiprintf_r+0x1e8>)
 8110d54:	bb13      	cbnz	r3, 8110d9c <_svfiprintf_r+0x1a0>
 8110d56:	9b03      	ldr	r3, [sp, #12]
 8110d58:	3307      	adds	r3, #7
 8110d5a:	f023 0307 	bic.w	r3, r3, #7
 8110d5e:	3308      	adds	r3, #8
 8110d60:	9303      	str	r3, [sp, #12]
 8110d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110d64:	444b      	add	r3, r9
 8110d66:	9309      	str	r3, [sp, #36]	; 0x24
 8110d68:	e76d      	b.n	8110c46 <_svfiprintf_r+0x4a>
 8110d6a:	fb05 3202 	mla	r2, r5, r2, r3
 8110d6e:	2001      	movs	r0, #1
 8110d70:	460f      	mov	r7, r1
 8110d72:	e7a6      	b.n	8110cc2 <_svfiprintf_r+0xc6>
 8110d74:	2300      	movs	r3, #0
 8110d76:	3701      	adds	r7, #1
 8110d78:	9305      	str	r3, [sp, #20]
 8110d7a:	4619      	mov	r1, r3
 8110d7c:	250a      	movs	r5, #10
 8110d7e:	4638      	mov	r0, r7
 8110d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110d84:	3a30      	subs	r2, #48	; 0x30
 8110d86:	2a09      	cmp	r2, #9
 8110d88:	d903      	bls.n	8110d92 <_svfiprintf_r+0x196>
 8110d8a:	2b00      	cmp	r3, #0
 8110d8c:	d0c8      	beq.n	8110d20 <_svfiprintf_r+0x124>
 8110d8e:	9105      	str	r1, [sp, #20]
 8110d90:	e7c6      	b.n	8110d20 <_svfiprintf_r+0x124>
 8110d92:	fb05 2101 	mla	r1, r5, r1, r2
 8110d96:	2301      	movs	r3, #1
 8110d98:	4607      	mov	r7, r0
 8110d9a:	e7f0      	b.n	8110d7e <_svfiprintf_r+0x182>
 8110d9c:	ab03      	add	r3, sp, #12
 8110d9e:	9300      	str	r3, [sp, #0]
 8110da0:	4622      	mov	r2, r4
 8110da2:	4b11      	ldr	r3, [pc, #68]	; (8110de8 <_svfiprintf_r+0x1ec>)
 8110da4:	a904      	add	r1, sp, #16
 8110da6:	4640      	mov	r0, r8
 8110da8:	f7fd fc70 	bl	810e68c <_printf_float>
 8110dac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8110db0:	4681      	mov	r9, r0
 8110db2:	d1d6      	bne.n	8110d62 <_svfiprintf_r+0x166>
 8110db4:	89a3      	ldrh	r3, [r4, #12]
 8110db6:	065b      	lsls	r3, r3, #25
 8110db8:	f53f af35 	bmi.w	8110c26 <_svfiprintf_r+0x2a>
 8110dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8110dbe:	b01d      	add	sp, #116	; 0x74
 8110dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110dc4:	ab03      	add	r3, sp, #12
 8110dc6:	9300      	str	r3, [sp, #0]
 8110dc8:	4622      	mov	r2, r4
 8110dca:	4b07      	ldr	r3, [pc, #28]	; (8110de8 <_svfiprintf_r+0x1ec>)
 8110dcc:	a904      	add	r1, sp, #16
 8110dce:	4640      	mov	r0, r8
 8110dd0:	f7fd ff12 	bl	810ebf8 <_printf_i>
 8110dd4:	e7ea      	b.n	8110dac <_svfiprintf_r+0x1b0>
 8110dd6:	bf00      	nop
 8110dd8:	08111b74 	.word	0x08111b74
 8110ddc:	08111b7a 	.word	0x08111b7a
 8110de0:	08111b7e 	.word	0x08111b7e
 8110de4:	0810e68d 	.word	0x0810e68d
 8110de8:	08110b49 	.word	0x08110b49

08110dec <__sfputc_r>:
 8110dec:	6893      	ldr	r3, [r2, #8]
 8110dee:	3b01      	subs	r3, #1
 8110df0:	2b00      	cmp	r3, #0
 8110df2:	b410      	push	{r4}
 8110df4:	6093      	str	r3, [r2, #8]
 8110df6:	da08      	bge.n	8110e0a <__sfputc_r+0x1e>
 8110df8:	6994      	ldr	r4, [r2, #24]
 8110dfa:	42a3      	cmp	r3, r4
 8110dfc:	db01      	blt.n	8110e02 <__sfputc_r+0x16>
 8110dfe:	290a      	cmp	r1, #10
 8110e00:	d103      	bne.n	8110e0a <__sfputc_r+0x1e>
 8110e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8110e06:	f7fe b99b 	b.w	810f140 <__swbuf_r>
 8110e0a:	6813      	ldr	r3, [r2, #0]
 8110e0c:	1c58      	adds	r0, r3, #1
 8110e0e:	6010      	str	r0, [r2, #0]
 8110e10:	7019      	strb	r1, [r3, #0]
 8110e12:	4608      	mov	r0, r1
 8110e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8110e18:	4770      	bx	lr

08110e1a <__sfputs_r>:
 8110e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110e1c:	4606      	mov	r6, r0
 8110e1e:	460f      	mov	r7, r1
 8110e20:	4614      	mov	r4, r2
 8110e22:	18d5      	adds	r5, r2, r3
 8110e24:	42ac      	cmp	r4, r5
 8110e26:	d101      	bne.n	8110e2c <__sfputs_r+0x12>
 8110e28:	2000      	movs	r0, #0
 8110e2a:	e007      	b.n	8110e3c <__sfputs_r+0x22>
 8110e2c:	463a      	mov	r2, r7
 8110e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110e32:	4630      	mov	r0, r6
 8110e34:	f7ff ffda 	bl	8110dec <__sfputc_r>
 8110e38:	1c43      	adds	r3, r0, #1
 8110e3a:	d1f3      	bne.n	8110e24 <__sfputs_r+0xa>
 8110e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08110e40 <_vfiprintf_r>:
 8110e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110e44:	460c      	mov	r4, r1
 8110e46:	b09d      	sub	sp, #116	; 0x74
 8110e48:	4617      	mov	r7, r2
 8110e4a:	461d      	mov	r5, r3
 8110e4c:	4606      	mov	r6, r0
 8110e4e:	b118      	cbz	r0, 8110e58 <_vfiprintf_r+0x18>
 8110e50:	6983      	ldr	r3, [r0, #24]
 8110e52:	b90b      	cbnz	r3, 8110e58 <_vfiprintf_r+0x18>
 8110e54:	f7ff f9cc 	bl	81101f0 <__sinit>
 8110e58:	4b7c      	ldr	r3, [pc, #496]	; (811104c <_vfiprintf_r+0x20c>)
 8110e5a:	429c      	cmp	r4, r3
 8110e5c:	d158      	bne.n	8110f10 <_vfiprintf_r+0xd0>
 8110e5e:	6874      	ldr	r4, [r6, #4]
 8110e60:	89a3      	ldrh	r3, [r4, #12]
 8110e62:	0718      	lsls	r0, r3, #28
 8110e64:	d55e      	bpl.n	8110f24 <_vfiprintf_r+0xe4>
 8110e66:	6923      	ldr	r3, [r4, #16]
 8110e68:	2b00      	cmp	r3, #0
 8110e6a:	d05b      	beq.n	8110f24 <_vfiprintf_r+0xe4>
 8110e6c:	2300      	movs	r3, #0
 8110e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8110e70:	2320      	movs	r3, #32
 8110e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8110e76:	2330      	movs	r3, #48	; 0x30
 8110e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8110e7c:	9503      	str	r5, [sp, #12]
 8110e7e:	f04f 0b01 	mov.w	fp, #1
 8110e82:	46b8      	mov	r8, r7
 8110e84:	4645      	mov	r5, r8
 8110e86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8110e8a:	b10b      	cbz	r3, 8110e90 <_vfiprintf_r+0x50>
 8110e8c:	2b25      	cmp	r3, #37	; 0x25
 8110e8e:	d154      	bne.n	8110f3a <_vfiprintf_r+0xfa>
 8110e90:	ebb8 0a07 	subs.w	sl, r8, r7
 8110e94:	d00b      	beq.n	8110eae <_vfiprintf_r+0x6e>
 8110e96:	4653      	mov	r3, sl
 8110e98:	463a      	mov	r2, r7
 8110e9a:	4621      	mov	r1, r4
 8110e9c:	4630      	mov	r0, r6
 8110e9e:	f7ff ffbc 	bl	8110e1a <__sfputs_r>
 8110ea2:	3001      	adds	r0, #1
 8110ea4:	f000 80c2 	beq.w	811102c <_vfiprintf_r+0x1ec>
 8110ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110eaa:	4453      	add	r3, sl
 8110eac:	9309      	str	r3, [sp, #36]	; 0x24
 8110eae:	f898 3000 	ldrb.w	r3, [r8]
 8110eb2:	2b00      	cmp	r3, #0
 8110eb4:	f000 80ba 	beq.w	811102c <_vfiprintf_r+0x1ec>
 8110eb8:	2300      	movs	r3, #0
 8110eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8110ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110ec2:	9304      	str	r3, [sp, #16]
 8110ec4:	9307      	str	r3, [sp, #28]
 8110ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8110eca:	931a      	str	r3, [sp, #104]	; 0x68
 8110ecc:	46a8      	mov	r8, r5
 8110ece:	2205      	movs	r2, #5
 8110ed0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8110ed4:	485e      	ldr	r0, [pc, #376]	; (8111050 <_vfiprintf_r+0x210>)
 8110ed6:	f7ef fa0b 	bl	81002f0 <memchr>
 8110eda:	9b04      	ldr	r3, [sp, #16]
 8110edc:	bb78      	cbnz	r0, 8110f3e <_vfiprintf_r+0xfe>
 8110ede:	06d9      	lsls	r1, r3, #27
 8110ee0:	bf44      	itt	mi
 8110ee2:	2220      	movmi	r2, #32
 8110ee4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8110ee8:	071a      	lsls	r2, r3, #28
 8110eea:	bf44      	itt	mi
 8110eec:	222b      	movmi	r2, #43	; 0x2b
 8110eee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8110ef2:	782a      	ldrb	r2, [r5, #0]
 8110ef4:	2a2a      	cmp	r2, #42	; 0x2a
 8110ef6:	d02a      	beq.n	8110f4e <_vfiprintf_r+0x10e>
 8110ef8:	9a07      	ldr	r2, [sp, #28]
 8110efa:	46a8      	mov	r8, r5
 8110efc:	2000      	movs	r0, #0
 8110efe:	250a      	movs	r5, #10
 8110f00:	4641      	mov	r1, r8
 8110f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8110f06:	3b30      	subs	r3, #48	; 0x30
 8110f08:	2b09      	cmp	r3, #9
 8110f0a:	d969      	bls.n	8110fe0 <_vfiprintf_r+0x1a0>
 8110f0c:	b360      	cbz	r0, 8110f68 <_vfiprintf_r+0x128>
 8110f0e:	e024      	b.n	8110f5a <_vfiprintf_r+0x11a>
 8110f10:	4b50      	ldr	r3, [pc, #320]	; (8111054 <_vfiprintf_r+0x214>)
 8110f12:	429c      	cmp	r4, r3
 8110f14:	d101      	bne.n	8110f1a <_vfiprintf_r+0xda>
 8110f16:	68b4      	ldr	r4, [r6, #8]
 8110f18:	e7a2      	b.n	8110e60 <_vfiprintf_r+0x20>
 8110f1a:	4b4f      	ldr	r3, [pc, #316]	; (8111058 <_vfiprintf_r+0x218>)
 8110f1c:	429c      	cmp	r4, r3
 8110f1e:	bf08      	it	eq
 8110f20:	68f4      	ldreq	r4, [r6, #12]
 8110f22:	e79d      	b.n	8110e60 <_vfiprintf_r+0x20>
 8110f24:	4621      	mov	r1, r4
 8110f26:	4630      	mov	r0, r6
 8110f28:	f7fe f95c 	bl	810f1e4 <__swsetup_r>
 8110f2c:	2800      	cmp	r0, #0
 8110f2e:	d09d      	beq.n	8110e6c <_vfiprintf_r+0x2c>
 8110f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8110f34:	b01d      	add	sp, #116	; 0x74
 8110f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110f3a:	46a8      	mov	r8, r5
 8110f3c:	e7a2      	b.n	8110e84 <_vfiprintf_r+0x44>
 8110f3e:	4a44      	ldr	r2, [pc, #272]	; (8111050 <_vfiprintf_r+0x210>)
 8110f40:	1a80      	subs	r0, r0, r2
 8110f42:	fa0b f000 	lsl.w	r0, fp, r0
 8110f46:	4318      	orrs	r0, r3
 8110f48:	9004      	str	r0, [sp, #16]
 8110f4a:	4645      	mov	r5, r8
 8110f4c:	e7be      	b.n	8110ecc <_vfiprintf_r+0x8c>
 8110f4e:	9a03      	ldr	r2, [sp, #12]
 8110f50:	1d11      	adds	r1, r2, #4
 8110f52:	6812      	ldr	r2, [r2, #0]
 8110f54:	9103      	str	r1, [sp, #12]
 8110f56:	2a00      	cmp	r2, #0
 8110f58:	db01      	blt.n	8110f5e <_vfiprintf_r+0x11e>
 8110f5a:	9207      	str	r2, [sp, #28]
 8110f5c:	e004      	b.n	8110f68 <_vfiprintf_r+0x128>
 8110f5e:	4252      	negs	r2, r2
 8110f60:	f043 0302 	orr.w	r3, r3, #2
 8110f64:	9207      	str	r2, [sp, #28]
 8110f66:	9304      	str	r3, [sp, #16]
 8110f68:	f898 3000 	ldrb.w	r3, [r8]
 8110f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8110f6e:	d10e      	bne.n	8110f8e <_vfiprintf_r+0x14e>
 8110f70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8110f74:	2b2a      	cmp	r3, #42	; 0x2a
 8110f76:	d138      	bne.n	8110fea <_vfiprintf_r+0x1aa>
 8110f78:	9b03      	ldr	r3, [sp, #12]
 8110f7a:	1d1a      	adds	r2, r3, #4
 8110f7c:	681b      	ldr	r3, [r3, #0]
 8110f7e:	9203      	str	r2, [sp, #12]
 8110f80:	2b00      	cmp	r3, #0
 8110f82:	bfb8      	it	lt
 8110f84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8110f88:	f108 0802 	add.w	r8, r8, #2
 8110f8c:	9305      	str	r3, [sp, #20]
 8110f8e:	4d33      	ldr	r5, [pc, #204]	; (811105c <_vfiprintf_r+0x21c>)
 8110f90:	f898 1000 	ldrb.w	r1, [r8]
 8110f94:	2203      	movs	r2, #3
 8110f96:	4628      	mov	r0, r5
 8110f98:	f7ef f9aa 	bl	81002f0 <memchr>
 8110f9c:	b140      	cbz	r0, 8110fb0 <_vfiprintf_r+0x170>
 8110f9e:	2340      	movs	r3, #64	; 0x40
 8110fa0:	1b40      	subs	r0, r0, r5
 8110fa2:	fa03 f000 	lsl.w	r0, r3, r0
 8110fa6:	9b04      	ldr	r3, [sp, #16]
 8110fa8:	4303      	orrs	r3, r0
 8110faa:	f108 0801 	add.w	r8, r8, #1
 8110fae:	9304      	str	r3, [sp, #16]
 8110fb0:	f898 1000 	ldrb.w	r1, [r8]
 8110fb4:	482a      	ldr	r0, [pc, #168]	; (8111060 <_vfiprintf_r+0x220>)
 8110fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8110fba:	2206      	movs	r2, #6
 8110fbc:	f108 0701 	add.w	r7, r8, #1
 8110fc0:	f7ef f996 	bl	81002f0 <memchr>
 8110fc4:	2800      	cmp	r0, #0
 8110fc6:	d037      	beq.n	8111038 <_vfiprintf_r+0x1f8>
 8110fc8:	4b26      	ldr	r3, [pc, #152]	; (8111064 <_vfiprintf_r+0x224>)
 8110fca:	bb1b      	cbnz	r3, 8111014 <_vfiprintf_r+0x1d4>
 8110fcc:	9b03      	ldr	r3, [sp, #12]
 8110fce:	3307      	adds	r3, #7
 8110fd0:	f023 0307 	bic.w	r3, r3, #7
 8110fd4:	3308      	adds	r3, #8
 8110fd6:	9303      	str	r3, [sp, #12]
 8110fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110fda:	444b      	add	r3, r9
 8110fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8110fde:	e750      	b.n	8110e82 <_vfiprintf_r+0x42>
 8110fe0:	fb05 3202 	mla	r2, r5, r2, r3
 8110fe4:	2001      	movs	r0, #1
 8110fe6:	4688      	mov	r8, r1
 8110fe8:	e78a      	b.n	8110f00 <_vfiprintf_r+0xc0>
 8110fea:	2300      	movs	r3, #0
 8110fec:	f108 0801 	add.w	r8, r8, #1
 8110ff0:	9305      	str	r3, [sp, #20]
 8110ff2:	4619      	mov	r1, r3
 8110ff4:	250a      	movs	r5, #10
 8110ff6:	4640      	mov	r0, r8
 8110ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110ffc:	3a30      	subs	r2, #48	; 0x30
 8110ffe:	2a09      	cmp	r2, #9
 8111000:	d903      	bls.n	811100a <_vfiprintf_r+0x1ca>
 8111002:	2b00      	cmp	r3, #0
 8111004:	d0c3      	beq.n	8110f8e <_vfiprintf_r+0x14e>
 8111006:	9105      	str	r1, [sp, #20]
 8111008:	e7c1      	b.n	8110f8e <_vfiprintf_r+0x14e>
 811100a:	fb05 2101 	mla	r1, r5, r1, r2
 811100e:	2301      	movs	r3, #1
 8111010:	4680      	mov	r8, r0
 8111012:	e7f0      	b.n	8110ff6 <_vfiprintf_r+0x1b6>
 8111014:	ab03      	add	r3, sp, #12
 8111016:	9300      	str	r3, [sp, #0]
 8111018:	4622      	mov	r2, r4
 811101a:	4b13      	ldr	r3, [pc, #76]	; (8111068 <_vfiprintf_r+0x228>)
 811101c:	a904      	add	r1, sp, #16
 811101e:	4630      	mov	r0, r6
 8111020:	f7fd fb34 	bl	810e68c <_printf_float>
 8111024:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8111028:	4681      	mov	r9, r0
 811102a:	d1d5      	bne.n	8110fd8 <_vfiprintf_r+0x198>
 811102c:	89a3      	ldrh	r3, [r4, #12]
 811102e:	065b      	lsls	r3, r3, #25
 8111030:	f53f af7e 	bmi.w	8110f30 <_vfiprintf_r+0xf0>
 8111034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8111036:	e77d      	b.n	8110f34 <_vfiprintf_r+0xf4>
 8111038:	ab03      	add	r3, sp, #12
 811103a:	9300      	str	r3, [sp, #0]
 811103c:	4622      	mov	r2, r4
 811103e:	4b0a      	ldr	r3, [pc, #40]	; (8111068 <_vfiprintf_r+0x228>)
 8111040:	a904      	add	r1, sp, #16
 8111042:	4630      	mov	r0, r6
 8111044:	f7fd fdd8 	bl	810ebf8 <_printf_i>
 8111048:	e7ec      	b.n	8111024 <_vfiprintf_r+0x1e4>
 811104a:	bf00      	nop
 811104c:	08111a2c 	.word	0x08111a2c
 8111050:	08111b74 	.word	0x08111b74
 8111054:	08111a4c 	.word	0x08111a4c
 8111058:	08111a0c 	.word	0x08111a0c
 811105c:	08111b7a 	.word	0x08111b7a
 8111060:	08111b7e 	.word	0x08111b7e
 8111064:	0810e68d 	.word	0x0810e68d
 8111068:	08110e1b 	.word	0x08110e1b

0811106c <_sbrk_r>:
 811106c:	b538      	push	{r3, r4, r5, lr}
 811106e:	4c06      	ldr	r4, [pc, #24]	; (8111088 <_sbrk_r+0x1c>)
 8111070:	2300      	movs	r3, #0
 8111072:	4605      	mov	r5, r0
 8111074:	4608      	mov	r0, r1
 8111076:	6023      	str	r3, [r4, #0]
 8111078:	f7f0 fe4e 	bl	8101d18 <_sbrk>
 811107c:	1c43      	adds	r3, r0, #1
 811107e:	d102      	bne.n	8111086 <_sbrk_r+0x1a>
 8111080:	6823      	ldr	r3, [r4, #0]
 8111082:	b103      	cbz	r3, 8111086 <_sbrk_r+0x1a>
 8111084:	602b      	str	r3, [r5, #0]
 8111086:	bd38      	pop	{r3, r4, r5, pc}
 8111088:	100061cc 	.word	0x100061cc

0811108c <__sread>:
 811108c:	b510      	push	{r4, lr}
 811108e:	460c      	mov	r4, r1
 8111090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8111094:	f000 f8e2 	bl	811125c <_read_r>
 8111098:	2800      	cmp	r0, #0
 811109a:	bfab      	itete	ge
 811109c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 811109e:	89a3      	ldrhlt	r3, [r4, #12]
 81110a0:	181b      	addge	r3, r3, r0
 81110a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81110a6:	bfac      	ite	ge
 81110a8:	6563      	strge	r3, [r4, #84]	; 0x54
 81110aa:	81a3      	strhlt	r3, [r4, #12]
 81110ac:	bd10      	pop	{r4, pc}

081110ae <__swrite>:
 81110ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81110b2:	461f      	mov	r7, r3
 81110b4:	898b      	ldrh	r3, [r1, #12]
 81110b6:	05db      	lsls	r3, r3, #23
 81110b8:	4605      	mov	r5, r0
 81110ba:	460c      	mov	r4, r1
 81110bc:	4616      	mov	r6, r2
 81110be:	d505      	bpl.n	81110cc <__swrite+0x1e>
 81110c0:	2302      	movs	r3, #2
 81110c2:	2200      	movs	r2, #0
 81110c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81110c8:	f000 f874 	bl	81111b4 <_lseek_r>
 81110cc:	89a3      	ldrh	r3, [r4, #12]
 81110ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81110d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81110d6:	81a3      	strh	r3, [r4, #12]
 81110d8:	4632      	mov	r2, r6
 81110da:	463b      	mov	r3, r7
 81110dc:	4628      	mov	r0, r5
 81110de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81110e2:	f000 b823 	b.w	811112c <_write_r>

081110e6 <__sseek>:
 81110e6:	b510      	push	{r4, lr}
 81110e8:	460c      	mov	r4, r1
 81110ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81110ee:	f000 f861 	bl	81111b4 <_lseek_r>
 81110f2:	1c43      	adds	r3, r0, #1
 81110f4:	89a3      	ldrh	r3, [r4, #12]
 81110f6:	bf15      	itete	ne
 81110f8:	6560      	strne	r0, [r4, #84]	; 0x54
 81110fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 81110fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8111102:	81a3      	strheq	r3, [r4, #12]
 8111104:	bf18      	it	ne
 8111106:	81a3      	strhne	r3, [r4, #12]
 8111108:	bd10      	pop	{r4, pc}

0811110a <__sclose>:
 811110a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811110e:	f000 b81f 	b.w	8111150 <_close_r>

08111112 <__ascii_wctomb>:
 8111112:	b149      	cbz	r1, 8111128 <__ascii_wctomb+0x16>
 8111114:	2aff      	cmp	r2, #255	; 0xff
 8111116:	bf85      	ittet	hi
 8111118:	238a      	movhi	r3, #138	; 0x8a
 811111a:	6003      	strhi	r3, [r0, #0]
 811111c:	700a      	strbls	r2, [r1, #0]
 811111e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8111122:	bf98      	it	ls
 8111124:	2001      	movls	r0, #1
 8111126:	4770      	bx	lr
 8111128:	4608      	mov	r0, r1
 811112a:	4770      	bx	lr

0811112c <_write_r>:
 811112c:	b538      	push	{r3, r4, r5, lr}
 811112e:	4c07      	ldr	r4, [pc, #28]	; (811114c <_write_r+0x20>)
 8111130:	4605      	mov	r5, r0
 8111132:	4608      	mov	r0, r1
 8111134:	4611      	mov	r1, r2
 8111136:	2200      	movs	r2, #0
 8111138:	6022      	str	r2, [r4, #0]
 811113a:	461a      	mov	r2, r3
 811113c:	f7f0 fd9b 	bl	8101c76 <_write>
 8111140:	1c43      	adds	r3, r0, #1
 8111142:	d102      	bne.n	811114a <_write_r+0x1e>
 8111144:	6823      	ldr	r3, [r4, #0]
 8111146:	b103      	cbz	r3, 811114a <_write_r+0x1e>
 8111148:	602b      	str	r3, [r5, #0]
 811114a:	bd38      	pop	{r3, r4, r5, pc}
 811114c:	100061cc 	.word	0x100061cc

08111150 <_close_r>:
 8111150:	b538      	push	{r3, r4, r5, lr}
 8111152:	4c06      	ldr	r4, [pc, #24]	; (811116c <_close_r+0x1c>)
 8111154:	2300      	movs	r3, #0
 8111156:	4605      	mov	r5, r0
 8111158:	4608      	mov	r0, r1
 811115a:	6023      	str	r3, [r4, #0]
 811115c:	f7f0 fda7 	bl	8101cae <_close>
 8111160:	1c43      	adds	r3, r0, #1
 8111162:	d102      	bne.n	811116a <_close_r+0x1a>
 8111164:	6823      	ldr	r3, [r4, #0]
 8111166:	b103      	cbz	r3, 811116a <_close_r+0x1a>
 8111168:	602b      	str	r3, [r5, #0]
 811116a:	bd38      	pop	{r3, r4, r5, pc}
 811116c:	100061cc 	.word	0x100061cc

08111170 <_fstat_r>:
 8111170:	b538      	push	{r3, r4, r5, lr}
 8111172:	4c07      	ldr	r4, [pc, #28]	; (8111190 <_fstat_r+0x20>)
 8111174:	2300      	movs	r3, #0
 8111176:	4605      	mov	r5, r0
 8111178:	4608      	mov	r0, r1
 811117a:	4611      	mov	r1, r2
 811117c:	6023      	str	r3, [r4, #0]
 811117e:	f7f0 fda2 	bl	8101cc6 <_fstat>
 8111182:	1c43      	adds	r3, r0, #1
 8111184:	d102      	bne.n	811118c <_fstat_r+0x1c>
 8111186:	6823      	ldr	r3, [r4, #0]
 8111188:	b103      	cbz	r3, 811118c <_fstat_r+0x1c>
 811118a:	602b      	str	r3, [r5, #0]
 811118c:	bd38      	pop	{r3, r4, r5, pc}
 811118e:	bf00      	nop
 8111190:	100061cc 	.word	0x100061cc

08111194 <_isatty_r>:
 8111194:	b538      	push	{r3, r4, r5, lr}
 8111196:	4c06      	ldr	r4, [pc, #24]	; (81111b0 <_isatty_r+0x1c>)
 8111198:	2300      	movs	r3, #0
 811119a:	4605      	mov	r5, r0
 811119c:	4608      	mov	r0, r1
 811119e:	6023      	str	r3, [r4, #0]
 81111a0:	f7f0 fda1 	bl	8101ce6 <_isatty>
 81111a4:	1c43      	adds	r3, r0, #1
 81111a6:	d102      	bne.n	81111ae <_isatty_r+0x1a>
 81111a8:	6823      	ldr	r3, [r4, #0]
 81111aa:	b103      	cbz	r3, 81111ae <_isatty_r+0x1a>
 81111ac:	602b      	str	r3, [r5, #0]
 81111ae:	bd38      	pop	{r3, r4, r5, pc}
 81111b0:	100061cc 	.word	0x100061cc

081111b4 <_lseek_r>:
 81111b4:	b538      	push	{r3, r4, r5, lr}
 81111b6:	4c07      	ldr	r4, [pc, #28]	; (81111d4 <_lseek_r+0x20>)
 81111b8:	4605      	mov	r5, r0
 81111ba:	4608      	mov	r0, r1
 81111bc:	4611      	mov	r1, r2
 81111be:	2200      	movs	r2, #0
 81111c0:	6022      	str	r2, [r4, #0]
 81111c2:	461a      	mov	r2, r3
 81111c4:	f7f0 fd9a 	bl	8101cfc <_lseek>
 81111c8:	1c43      	adds	r3, r0, #1
 81111ca:	d102      	bne.n	81111d2 <_lseek_r+0x1e>
 81111cc:	6823      	ldr	r3, [r4, #0]
 81111ce:	b103      	cbz	r3, 81111d2 <_lseek_r+0x1e>
 81111d0:	602b      	str	r3, [r5, #0]
 81111d2:	bd38      	pop	{r3, r4, r5, pc}
 81111d4:	100061cc 	.word	0x100061cc

081111d8 <memmove>:
 81111d8:	4288      	cmp	r0, r1
 81111da:	b510      	push	{r4, lr}
 81111dc:	eb01 0302 	add.w	r3, r1, r2
 81111e0:	d807      	bhi.n	81111f2 <memmove+0x1a>
 81111e2:	1e42      	subs	r2, r0, #1
 81111e4:	4299      	cmp	r1, r3
 81111e6:	d00a      	beq.n	81111fe <memmove+0x26>
 81111e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 81111ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 81111f0:	e7f8      	b.n	81111e4 <memmove+0xc>
 81111f2:	4283      	cmp	r3, r0
 81111f4:	d9f5      	bls.n	81111e2 <memmove+0xa>
 81111f6:	1881      	adds	r1, r0, r2
 81111f8:	1ad2      	subs	r2, r2, r3
 81111fa:	42d3      	cmn	r3, r2
 81111fc:	d100      	bne.n	8111200 <memmove+0x28>
 81111fe:	bd10      	pop	{r4, pc}
 8111200:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8111204:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8111208:	e7f7      	b.n	81111fa <memmove+0x22>

0811120a <__malloc_lock>:
 811120a:	4770      	bx	lr

0811120c <__malloc_unlock>:
 811120c:	4770      	bx	lr

0811120e <_realloc_r>:
 811120e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111210:	4607      	mov	r7, r0
 8111212:	4614      	mov	r4, r2
 8111214:	460e      	mov	r6, r1
 8111216:	b921      	cbnz	r1, 8111222 <_realloc_r+0x14>
 8111218:	4611      	mov	r1, r2
 811121a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 811121e:	f7ff bc39 	b.w	8110a94 <_malloc_r>
 8111222:	b922      	cbnz	r2, 811122e <_realloc_r+0x20>
 8111224:	f7ff fbe8 	bl	81109f8 <_free_r>
 8111228:	4625      	mov	r5, r4
 811122a:	4628      	mov	r0, r5
 811122c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811122e:	f000 f827 	bl	8111280 <_malloc_usable_size_r>
 8111232:	42a0      	cmp	r0, r4
 8111234:	d20f      	bcs.n	8111256 <_realloc_r+0x48>
 8111236:	4621      	mov	r1, r4
 8111238:	4638      	mov	r0, r7
 811123a:	f7ff fc2b 	bl	8110a94 <_malloc_r>
 811123e:	4605      	mov	r5, r0
 8111240:	2800      	cmp	r0, #0
 8111242:	d0f2      	beq.n	811122a <_realloc_r+0x1c>
 8111244:	4631      	mov	r1, r6
 8111246:	4622      	mov	r2, r4
 8111248:	f7fd f978 	bl	810e53c <memcpy>
 811124c:	4631      	mov	r1, r6
 811124e:	4638      	mov	r0, r7
 8111250:	f7ff fbd2 	bl	81109f8 <_free_r>
 8111254:	e7e9      	b.n	811122a <_realloc_r+0x1c>
 8111256:	4635      	mov	r5, r6
 8111258:	e7e7      	b.n	811122a <_realloc_r+0x1c>
	...

0811125c <_read_r>:
 811125c:	b538      	push	{r3, r4, r5, lr}
 811125e:	4c07      	ldr	r4, [pc, #28]	; (811127c <_read_r+0x20>)
 8111260:	4605      	mov	r5, r0
 8111262:	4608      	mov	r0, r1
 8111264:	4611      	mov	r1, r2
 8111266:	2200      	movs	r2, #0
 8111268:	6022      	str	r2, [r4, #0]
 811126a:	461a      	mov	r2, r3
 811126c:	f7f0 fce6 	bl	8101c3c <_read>
 8111270:	1c43      	adds	r3, r0, #1
 8111272:	d102      	bne.n	811127a <_read_r+0x1e>
 8111274:	6823      	ldr	r3, [r4, #0]
 8111276:	b103      	cbz	r3, 811127a <_read_r+0x1e>
 8111278:	602b      	str	r3, [r5, #0]
 811127a:	bd38      	pop	{r3, r4, r5, pc}
 811127c:	100061cc 	.word	0x100061cc

08111280 <_malloc_usable_size_r>:
 8111280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8111284:	1f18      	subs	r0, r3, #4
 8111286:	2b00      	cmp	r3, #0
 8111288:	bfbc      	itt	lt
 811128a:	580b      	ldrlt	r3, [r1, r0]
 811128c:	18c0      	addlt	r0, r0, r3
 811128e:	4770      	bx	lr

08111290 <_init>:
 8111290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111292:	bf00      	nop
 8111294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8111296:	bc08      	pop	{r3}
 8111298:	469e      	mov	lr, r3
 811129a:	4770      	bx	lr

0811129c <_fini>:
 811129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811129e:	bf00      	nop
 81112a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81112a2:	bc08      	pop	{r3}
 81112a4:	469e      	mov	lr, r3
 81112a6:	4770      	bx	lr
