
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135d0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001038  08113870  08113870  00023870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081148a8  081148a8  000248a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  081148b0  081148b0  000248b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  081148bc  081148bc  000248bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  10000000  081148c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a160  10000210  08114ad4  00030210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  1000a370  08114ad4  0003a370  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007da18  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d3b2  00000000  00000000  000adc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002bc8  00000000  00000000  000bb010  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000027e0  00000000  00000000  000bdbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004ef66  00000000  00000000  000c03b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003c2e2  00000000  00000000  0010f31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001ab9b9  00000000  00000000  0014b600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002f6fb9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000cb48  00000000  00000000  002f7034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000210 	.word	0x10000210
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08113858 	.word	0x08113858

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000214 	.word	0x10000214
 81002dc:	08113858 	.word	0x08113858

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81004ee:	f1a4 0401 	sub.w	r4, r4, #1
 81004f2:	d1e9      	bne.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2f>:
 8100cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100ce0:	bf24      	itt	cs
 8100ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cea:	d90d      	bls.n	8100d08 <__aeabi_d2f+0x30>
 8100cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d00:	bf08      	it	eq
 8100d02:	f020 0001 	biceq.w	r0, r0, #1
 8100d06:	4770      	bx	lr
 8100d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d0c:	d121      	bne.n	8100d52 <__aeabi_d2f+0x7a>
 8100d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d12:	bfbc      	itt	lt
 8100d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d18:	4770      	bxlt	lr
 8100d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d22:	f1c2 0218 	rsb	r2, r2, #24
 8100d26:	f1c2 0c20 	rsb	ip, r2, #32
 8100d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d32:	bf18      	it	ne
 8100d34:	f040 0001 	orrne.w	r0, r0, #1
 8100d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d44:	ea40 000c 	orr.w	r0, r0, ip
 8100d48:	fa23 f302 	lsr.w	r3, r3, r2
 8100d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d50:	e7cc      	b.n	8100cec <__aeabi_d2f+0x14>
 8100d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d56:	d107      	bne.n	8100d68 <__aeabi_d2f+0x90>
 8100d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d5c:	bf1e      	ittt	ne
 8100d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d66:	4770      	bxne	lr
 8100d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d74:	4770      	bx	lr
 8100d76:	bf00      	nop

08100d78 <__aeabi_ldivmod>:
 8100d78:	b97b      	cbnz	r3, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7a:	b972      	cbnz	r2, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7c:	2900      	cmp	r1, #0
 8100d7e:	bfbe      	ittt	lt
 8100d80:	2000      	movlt	r0, #0
 8100d82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100d86:	e006      	blt.n	8100d96 <__aeabi_ldivmod+0x1e>
 8100d88:	bf08      	it	eq
 8100d8a:	2800      	cmpeq	r0, #0
 8100d8c:	bf1c      	itt	ne
 8100d8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100d92:	f04f 30ff 	movne.w	r0, #4294967295
 8100d96:	f000 b9bd 	b.w	8101114 <__aeabi_idiv0>
 8100d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100da2:	2900      	cmp	r1, #0
 8100da4:	db09      	blt.n	8100dba <__aeabi_ldivmod+0x42>
 8100da6:	2b00      	cmp	r3, #0
 8100da8:	db1a      	blt.n	8100de0 <__aeabi_ldivmod+0x68>
 8100daa:	f000 f84d 	bl	8100e48 <__udivmoddi4>
 8100dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100db6:	b004      	add	sp, #16
 8100db8:	4770      	bx	lr
 8100dba:	4240      	negs	r0, r0
 8100dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc0:	2b00      	cmp	r3, #0
 8100dc2:	db1b      	blt.n	8100dfc <__aeabi_ldivmod+0x84>
 8100dc4:	f000 f840 	bl	8100e48 <__udivmoddi4>
 8100dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dd0:	b004      	add	sp, #16
 8100dd2:	4240      	negs	r0, r0
 8100dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dd8:	4252      	negs	r2, r2
 8100dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100dde:	4770      	bx	lr
 8100de0:	4252      	negs	r2, r2
 8100de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100de6:	f000 f82f 	bl	8100e48 <__udivmoddi4>
 8100dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100df2:	b004      	add	sp, #16
 8100df4:	4240      	negs	r0, r0
 8100df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dfa:	4770      	bx	lr
 8100dfc:	4252      	negs	r2, r2
 8100dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e02:	f000 f821 	bl	8100e48 <__udivmoddi4>
 8100e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e0e:	b004      	add	sp, #16
 8100e10:	4252      	negs	r2, r2
 8100e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e16:	4770      	bx	lr

08100e18 <__aeabi_uldivmod>:
 8100e18:	b953      	cbnz	r3, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1a:	b94a      	cbnz	r2, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1c:	2900      	cmp	r1, #0
 8100e1e:	bf08      	it	eq
 8100e20:	2800      	cmpeq	r0, #0
 8100e22:	bf1c      	itt	ne
 8100e24:	f04f 31ff 	movne.w	r1, #4294967295
 8100e28:	f04f 30ff 	movne.w	r0, #4294967295
 8100e2c:	f000 b972 	b.w	8101114 <__aeabi_idiv0>
 8100e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e38:	f000 f806 	bl	8100e48 <__udivmoddi4>
 8100e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e44:	b004      	add	sp, #16
 8100e46:	4770      	bx	lr

08100e48 <__udivmoddi4>:
 8100e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e4c:	9e08      	ldr	r6, [sp, #32]
 8100e4e:	4604      	mov	r4, r0
 8100e50:	4688      	mov	r8, r1
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	d14b      	bne.n	8100eee <__udivmoddi4+0xa6>
 8100e56:	428a      	cmp	r2, r1
 8100e58:	4615      	mov	r5, r2
 8100e5a:	d967      	bls.n	8100f2c <__udivmoddi4+0xe4>
 8100e5c:	fab2 f282 	clz	r2, r2
 8100e60:	b14a      	cbz	r2, 8100e76 <__udivmoddi4+0x2e>
 8100e62:	f1c2 0720 	rsb	r7, r2, #32
 8100e66:	fa01 f302 	lsl.w	r3, r1, r2
 8100e6a:	fa20 f707 	lsr.w	r7, r0, r7
 8100e6e:	4095      	lsls	r5, r2
 8100e70:	ea47 0803 	orr.w	r8, r7, r3
 8100e74:	4094      	lsls	r4, r2
 8100e76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e7a:	0c23      	lsrs	r3, r4, #16
 8100e7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100e80:	fa1f fc85 	uxth.w	ip, r5
 8100e84:	fb0e 8817 	mls	r8, lr, r7, r8
 8100e88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100e8c:	fb07 f10c 	mul.w	r1, r7, ip
 8100e90:	4299      	cmp	r1, r3
 8100e92:	d909      	bls.n	8100ea8 <__udivmoddi4+0x60>
 8100e94:	18eb      	adds	r3, r5, r3
 8100e96:	f107 30ff 	add.w	r0, r7, #4294967295
 8100e9a:	f080 811b 	bcs.w	81010d4 <__udivmoddi4+0x28c>
 8100e9e:	4299      	cmp	r1, r3
 8100ea0:	f240 8118 	bls.w	81010d4 <__udivmoddi4+0x28c>
 8100ea4:	3f02      	subs	r7, #2
 8100ea6:	442b      	add	r3, r5
 8100ea8:	1a5b      	subs	r3, r3, r1
 8100eaa:	b2a4      	uxth	r4, r4
 8100eac:	fbb3 f0fe 	udiv	r0, r3, lr
 8100eb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100eb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100eb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100ebc:	45a4      	cmp	ip, r4
 8100ebe:	d909      	bls.n	8100ed4 <__udivmoddi4+0x8c>
 8100ec0:	192c      	adds	r4, r5, r4
 8100ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8100ec6:	f080 8107 	bcs.w	81010d8 <__udivmoddi4+0x290>
 8100eca:	45a4      	cmp	ip, r4
 8100ecc:	f240 8104 	bls.w	81010d8 <__udivmoddi4+0x290>
 8100ed0:	3802      	subs	r0, #2
 8100ed2:	442c      	add	r4, r5
 8100ed4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100ed8:	eba4 040c 	sub.w	r4, r4, ip
 8100edc:	2700      	movs	r7, #0
 8100ede:	b11e      	cbz	r6, 8100ee8 <__udivmoddi4+0xa0>
 8100ee0:	40d4      	lsrs	r4, r2
 8100ee2:	2300      	movs	r3, #0
 8100ee4:	e9c6 4300 	strd	r4, r3, [r6]
 8100ee8:	4639      	mov	r1, r7
 8100eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eee:	428b      	cmp	r3, r1
 8100ef0:	d909      	bls.n	8100f06 <__udivmoddi4+0xbe>
 8100ef2:	2e00      	cmp	r6, #0
 8100ef4:	f000 80eb 	beq.w	81010ce <__udivmoddi4+0x286>
 8100ef8:	2700      	movs	r7, #0
 8100efa:	e9c6 0100 	strd	r0, r1, [r6]
 8100efe:	4638      	mov	r0, r7
 8100f00:	4639      	mov	r1, r7
 8100f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f06:	fab3 f783 	clz	r7, r3
 8100f0a:	2f00      	cmp	r7, #0
 8100f0c:	d147      	bne.n	8100f9e <__udivmoddi4+0x156>
 8100f0e:	428b      	cmp	r3, r1
 8100f10:	d302      	bcc.n	8100f18 <__udivmoddi4+0xd0>
 8100f12:	4282      	cmp	r2, r0
 8100f14:	f200 80fa 	bhi.w	810110c <__udivmoddi4+0x2c4>
 8100f18:	1a84      	subs	r4, r0, r2
 8100f1a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f1e:	2001      	movs	r0, #1
 8100f20:	4698      	mov	r8, r3
 8100f22:	2e00      	cmp	r6, #0
 8100f24:	d0e0      	beq.n	8100ee8 <__udivmoddi4+0xa0>
 8100f26:	e9c6 4800 	strd	r4, r8, [r6]
 8100f2a:	e7dd      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8100f2c:	b902      	cbnz	r2, 8100f30 <__udivmoddi4+0xe8>
 8100f2e:	deff      	udf	#255	; 0xff
 8100f30:	fab2 f282 	clz	r2, r2
 8100f34:	2a00      	cmp	r2, #0
 8100f36:	f040 808f 	bne.w	8101058 <__udivmoddi4+0x210>
 8100f3a:	1b49      	subs	r1, r1, r5
 8100f3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100f40:	fa1f f885 	uxth.w	r8, r5
 8100f44:	2701      	movs	r7, #1
 8100f46:	fbb1 fcfe 	udiv	ip, r1, lr
 8100f4a:	0c23      	lsrs	r3, r4, #16
 8100f4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100f50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f54:	fb08 f10c 	mul.w	r1, r8, ip
 8100f58:	4299      	cmp	r1, r3
 8100f5a:	d907      	bls.n	8100f6c <__udivmoddi4+0x124>
 8100f5c:	18eb      	adds	r3, r5, r3
 8100f5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100f62:	d202      	bcs.n	8100f6a <__udivmoddi4+0x122>
 8100f64:	4299      	cmp	r1, r3
 8100f66:	f200 80cd 	bhi.w	8101104 <__udivmoddi4+0x2bc>
 8100f6a:	4684      	mov	ip, r0
 8100f6c:	1a59      	subs	r1, r3, r1
 8100f6e:	b2a3      	uxth	r3, r4
 8100f70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f74:	fb0e 1410 	mls	r4, lr, r0, r1
 8100f78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100f7c:	fb08 f800 	mul.w	r8, r8, r0
 8100f80:	45a0      	cmp	r8, r4
 8100f82:	d907      	bls.n	8100f94 <__udivmoddi4+0x14c>
 8100f84:	192c      	adds	r4, r5, r4
 8100f86:	f100 33ff 	add.w	r3, r0, #4294967295
 8100f8a:	d202      	bcs.n	8100f92 <__udivmoddi4+0x14a>
 8100f8c:	45a0      	cmp	r8, r4
 8100f8e:	f200 80b6 	bhi.w	81010fe <__udivmoddi4+0x2b6>
 8100f92:	4618      	mov	r0, r3
 8100f94:	eba4 0408 	sub.w	r4, r4, r8
 8100f98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f9c:	e79f      	b.n	8100ede <__udivmoddi4+0x96>
 8100f9e:	f1c7 0c20 	rsb	ip, r7, #32
 8100fa2:	40bb      	lsls	r3, r7
 8100fa4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100fa8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100fac:	fa01 f407 	lsl.w	r4, r1, r7
 8100fb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100fb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100fb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100fbc:	4325      	orrs	r5, r4
 8100fbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100fc2:	0c2c      	lsrs	r4, r5, #16
 8100fc4:	fb08 3319 	mls	r3, r8, r9, r3
 8100fc8:	fa1f fa8e 	uxth.w	sl, lr
 8100fcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100fd0:	fb09 f40a 	mul.w	r4, r9, sl
 8100fd4:	429c      	cmp	r4, r3
 8100fd6:	fa02 f207 	lsl.w	r2, r2, r7
 8100fda:	fa00 f107 	lsl.w	r1, r0, r7
 8100fde:	d90b      	bls.n	8100ff8 <__udivmoddi4+0x1b0>
 8100fe0:	eb1e 0303 	adds.w	r3, lr, r3
 8100fe4:	f109 30ff 	add.w	r0, r9, #4294967295
 8100fe8:	f080 8087 	bcs.w	81010fa <__udivmoddi4+0x2b2>
 8100fec:	429c      	cmp	r4, r3
 8100fee:	f240 8084 	bls.w	81010fa <__udivmoddi4+0x2b2>
 8100ff2:	f1a9 0902 	sub.w	r9, r9, #2
 8100ff6:	4473      	add	r3, lr
 8100ff8:	1b1b      	subs	r3, r3, r4
 8100ffa:	b2ad      	uxth	r5, r5
 8100ffc:	fbb3 f0f8 	udiv	r0, r3, r8
 8101000:	fb08 3310 	mls	r3, r8, r0, r3
 8101004:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8101008:	fb00 fa0a 	mul.w	sl, r0, sl
 810100c:	45a2      	cmp	sl, r4
 810100e:	d908      	bls.n	8101022 <__udivmoddi4+0x1da>
 8101010:	eb1e 0404 	adds.w	r4, lr, r4
 8101014:	f100 33ff 	add.w	r3, r0, #4294967295
 8101018:	d26b      	bcs.n	81010f2 <__udivmoddi4+0x2aa>
 810101a:	45a2      	cmp	sl, r4
 810101c:	d969      	bls.n	81010f2 <__udivmoddi4+0x2aa>
 810101e:	3802      	subs	r0, #2
 8101020:	4474      	add	r4, lr
 8101022:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101026:	fba0 8902 	umull	r8, r9, r0, r2
 810102a:	eba4 040a 	sub.w	r4, r4, sl
 810102e:	454c      	cmp	r4, r9
 8101030:	46c2      	mov	sl, r8
 8101032:	464b      	mov	r3, r9
 8101034:	d354      	bcc.n	81010e0 <__udivmoddi4+0x298>
 8101036:	d051      	beq.n	81010dc <__udivmoddi4+0x294>
 8101038:	2e00      	cmp	r6, #0
 810103a:	d069      	beq.n	8101110 <__udivmoddi4+0x2c8>
 810103c:	ebb1 050a 	subs.w	r5, r1, sl
 8101040:	eb64 0403 	sbc.w	r4, r4, r3
 8101044:	fa04 fc0c 	lsl.w	ip, r4, ip
 8101048:	40fd      	lsrs	r5, r7
 810104a:	40fc      	lsrs	r4, r7
 810104c:	ea4c 0505 	orr.w	r5, ip, r5
 8101050:	e9c6 5400 	strd	r5, r4, [r6]
 8101054:	2700      	movs	r7, #0
 8101056:	e747      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8101058:	f1c2 0320 	rsb	r3, r2, #32
 810105c:	fa20 f703 	lsr.w	r7, r0, r3
 8101060:	4095      	lsls	r5, r2
 8101062:	fa01 f002 	lsl.w	r0, r1, r2
 8101066:	fa21 f303 	lsr.w	r3, r1, r3
 810106a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810106e:	4338      	orrs	r0, r7
 8101070:	0c01      	lsrs	r1, r0, #16
 8101072:	fbb3 f7fe 	udiv	r7, r3, lr
 8101076:	fa1f f885 	uxth.w	r8, r5
 810107a:	fb0e 3317 	mls	r3, lr, r7, r3
 810107e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101082:	fb07 f308 	mul.w	r3, r7, r8
 8101086:	428b      	cmp	r3, r1
 8101088:	fa04 f402 	lsl.w	r4, r4, r2
 810108c:	d907      	bls.n	810109e <__udivmoddi4+0x256>
 810108e:	1869      	adds	r1, r5, r1
 8101090:	f107 3cff 	add.w	ip, r7, #4294967295
 8101094:	d22f      	bcs.n	81010f6 <__udivmoddi4+0x2ae>
 8101096:	428b      	cmp	r3, r1
 8101098:	d92d      	bls.n	81010f6 <__udivmoddi4+0x2ae>
 810109a:	3f02      	subs	r7, #2
 810109c:	4429      	add	r1, r5
 810109e:	1acb      	subs	r3, r1, r3
 81010a0:	b281      	uxth	r1, r0
 81010a2:	fbb3 f0fe 	udiv	r0, r3, lr
 81010a6:	fb0e 3310 	mls	r3, lr, r0, r3
 81010aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010ae:	fb00 f308 	mul.w	r3, r0, r8
 81010b2:	428b      	cmp	r3, r1
 81010b4:	d907      	bls.n	81010c6 <__udivmoddi4+0x27e>
 81010b6:	1869      	adds	r1, r5, r1
 81010b8:	f100 3cff 	add.w	ip, r0, #4294967295
 81010bc:	d217      	bcs.n	81010ee <__udivmoddi4+0x2a6>
 81010be:	428b      	cmp	r3, r1
 81010c0:	d915      	bls.n	81010ee <__udivmoddi4+0x2a6>
 81010c2:	3802      	subs	r0, #2
 81010c4:	4429      	add	r1, r5
 81010c6:	1ac9      	subs	r1, r1, r3
 81010c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 81010cc:	e73b      	b.n	8100f46 <__udivmoddi4+0xfe>
 81010ce:	4637      	mov	r7, r6
 81010d0:	4630      	mov	r0, r6
 81010d2:	e709      	b.n	8100ee8 <__udivmoddi4+0xa0>
 81010d4:	4607      	mov	r7, r0
 81010d6:	e6e7      	b.n	8100ea8 <__udivmoddi4+0x60>
 81010d8:	4618      	mov	r0, r3
 81010da:	e6fb      	b.n	8100ed4 <__udivmoddi4+0x8c>
 81010dc:	4541      	cmp	r1, r8
 81010de:	d2ab      	bcs.n	8101038 <__udivmoddi4+0x1f0>
 81010e0:	ebb8 0a02 	subs.w	sl, r8, r2
 81010e4:	eb69 020e 	sbc.w	r2, r9, lr
 81010e8:	3801      	subs	r0, #1
 81010ea:	4613      	mov	r3, r2
 81010ec:	e7a4      	b.n	8101038 <__udivmoddi4+0x1f0>
 81010ee:	4660      	mov	r0, ip
 81010f0:	e7e9      	b.n	81010c6 <__udivmoddi4+0x27e>
 81010f2:	4618      	mov	r0, r3
 81010f4:	e795      	b.n	8101022 <__udivmoddi4+0x1da>
 81010f6:	4667      	mov	r7, ip
 81010f8:	e7d1      	b.n	810109e <__udivmoddi4+0x256>
 81010fa:	4681      	mov	r9, r0
 81010fc:	e77c      	b.n	8100ff8 <__udivmoddi4+0x1b0>
 81010fe:	3802      	subs	r0, #2
 8101100:	442c      	add	r4, r5
 8101102:	e747      	b.n	8100f94 <__udivmoddi4+0x14c>
 8101104:	f1ac 0c02 	sub.w	ip, ip, #2
 8101108:	442b      	add	r3, r5
 810110a:	e72f      	b.n	8100f6c <__udivmoddi4+0x124>
 810110c:	4638      	mov	r0, r7
 810110e:	e708      	b.n	8100f22 <__udivmoddi4+0xda>
 8101110:	4637      	mov	r7, r6
 8101112:	e6e9      	b.n	8100ee8 <__udivmoddi4+0xa0>

08101114 <__aeabi_idiv0>:
 8101114:	4770      	bx	lr
 8101116:	bf00      	nop

08101118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101118:	b480      	push	{r7}
 810111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810111c:	4b0b      	ldr	r3, [pc, #44]	; (810114c <SystemInit+0x34>)
 810111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101122:	4a0a      	ldr	r2, [pc, #40]	; (810114c <SystemInit+0x34>)
 8101124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810112c:	4b07      	ldr	r3, [pc, #28]	; (810114c <SystemInit+0x34>)
 810112e:	691b      	ldr	r3, [r3, #16]
 8101130:	4a06      	ldr	r2, [pc, #24]	; (810114c <SystemInit+0x34>)
 8101132:	f043 0310 	orr.w	r3, r3, #16
 8101136:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101138:	4b04      	ldr	r3, [pc, #16]	; (810114c <SystemInit+0x34>)
 810113a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810113e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101140:	bf00      	nop
 8101142:	46bd      	mov	sp, r7
 8101144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101148:	4770      	bx	lr
 810114a:	bf00      	nop
 810114c:	e000ed00 	.word	0xe000ed00

08101150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101150:	b580      	push	{r7, lr}
 8101152:	b082      	sub	sp, #8
 8101154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101156:	4b21      	ldr	r3, [pc, #132]	; (81011dc <MX_DMA_Init+0x8c>)
 8101158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810115c:	4a1f      	ldr	r2, [pc, #124]	; (81011dc <MX_DMA_Init+0x8c>)
 810115e:	f043 0301 	orr.w	r3, r3, #1
 8101162:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101166:	4b1d      	ldr	r3, [pc, #116]	; (81011dc <MX_DMA_Init+0x8c>)
 8101168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810116c:	f003 0301 	and.w	r3, r3, #1
 8101170:	607b      	str	r3, [r7, #4]
 8101172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101174:	4b19      	ldr	r3, [pc, #100]	; (81011dc <MX_DMA_Init+0x8c>)
 8101176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810117a:	4a18      	ldr	r2, [pc, #96]	; (81011dc <MX_DMA_Init+0x8c>)
 810117c:	f043 0302 	orr.w	r3, r3, #2
 8101180:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101184:	4b15      	ldr	r3, [pc, #84]	; (81011dc <MX_DMA_Init+0x8c>)
 8101186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810118a:	f003 0302 	and.w	r3, r3, #2
 810118e:	603b      	str	r3, [r7, #0]
 8101190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101192:	2200      	movs	r2, #0
 8101194:	2105      	movs	r1, #5
 8101196:	200b      	movs	r0, #11
 8101198:	f001 f957 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810119c:	200b      	movs	r0, #11
 810119e:	f001 f96e 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 81011a2:	2200      	movs	r2, #0
 81011a4:	2105      	movs	r1, #5
 81011a6:	200c      	movs	r0, #12
 81011a8:	f001 f94f 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81011ac:	200c      	movs	r0, #12
 81011ae:	f001 f966 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 81011b2:	2200      	movs	r2, #0
 81011b4:	2105      	movs	r1, #5
 81011b6:	203a      	movs	r0, #58	; 0x3a
 81011b8:	f001 f947 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 81011bc:	203a      	movs	r0, #58	; 0x3a
 81011be:	f001 f95e 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 81011c2:	2200      	movs	r2, #0
 81011c4:	2105      	movs	r1, #5
 81011c6:	203b      	movs	r0, #59	; 0x3b
 81011c8:	f001 f93f 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 81011cc:	203b      	movs	r0, #59	; 0x3b
 81011ce:	f001 f956 	bl	810247e <HAL_NVIC_EnableIRQ>

}
 81011d2:	bf00      	nop
 81011d4:	3708      	adds	r7, #8
 81011d6:	46bd      	mov	sp, r7
 81011d8:	bd80      	pop	{r7, pc}
 81011da:	bf00      	nop
 81011dc:	58024400 	.word	0x58024400

081011e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 81011e0:	b480      	push	{r7}
 81011e2:	b085      	sub	sp, #20
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	60f8      	str	r0, [r7, #12]
 81011e8:	60b9      	str	r1, [r7, #8]
 81011ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 81011ec:	68fb      	ldr	r3, [r7, #12]
 81011ee:	4a07      	ldr	r2, [pc, #28]	; (810120c <vApplicationGetIdleTaskMemory+0x2c>)
 81011f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 81011f2:	68bb      	ldr	r3, [r7, #8]
 81011f4:	4a06      	ldr	r2, [pc, #24]	; (8101210 <vApplicationGetIdleTaskMemory+0x30>)
 81011f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	2280      	movs	r2, #128	; 0x80
 81011fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 81011fe:	bf00      	nop
 8101200:	3714      	adds	r7, #20
 8101202:	46bd      	mov	sp, r7
 8101204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101208:	4770      	bx	lr
 810120a:	bf00      	nop
 810120c:	1000022c 	.word	0x1000022c
 8101210:	10000280 	.word	0x10000280

08101214 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8101214:	b5b0      	push	{r4, r5, r7, lr}
 8101216:	b088      	sub	sp, #32
 8101218:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 128);
 810121a:	4b0b      	ldr	r3, [pc, #44]	; (8101248 <MX_FREERTOS_Init+0x34>)
 810121c:	1d3c      	adds	r4, r7, #4
 810121e:	461d      	mov	r5, r3
 8101220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8101228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 810122c:	1d3b      	adds	r3, r7, #4
 810122e:	2100      	movs	r1, #0
 8101230:	4618      	mov	r0, r3
 8101232:	f007 fe1f 	bl	8108e74 <osThreadCreate>
 8101236:	4602      	mov	r2, r0
 8101238:	4b04      	ldr	r3, [pc, #16]	; (810124c <MX_FREERTOS_Init+0x38>)
 810123a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
 810123c:	f00e fe9e 	bl	810ff7c <initCortexM4>
  /* USER CODE END RTOS_THREADS */

}
 8101240:	bf00      	nop
 8101242:	3720      	adds	r7, #32
 8101244:	46bd      	mov	sp, r7
 8101246:	bdb0      	pop	{r4, r5, r7, pc}
 8101248:	0811387c 	.word	0x0811387c
 810124c:	100099a0 	.word	0x100099a0

08101250 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8101250:	b580      	push	{r7, lr}
 8101252:	b082      	sub	sp, #8
 8101254:	af00      	add	r7, sp, #0
 8101256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8101258:	2001      	movs	r0, #1
 810125a:	f007 fe57 	bl	8108f0c <osDelay>
 810125e:	e7fb      	b.n	8101258 <watchdogTask+0x8>

08101260 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101260:	b480      	push	{r7}
 8101262:	b087      	sub	sp, #28
 8101264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101266:	4b28      	ldr	r3, [pc, #160]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126c:	4a26      	ldr	r2, [pc, #152]	; (8101308 <MX_GPIO_Init+0xa8>)
 810126e:	f043 0310 	orr.w	r3, r3, #16
 8101272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101276:	4b24      	ldr	r3, [pc, #144]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810127c:	f003 0310 	and.w	r3, r3, #16
 8101280:	617b      	str	r3, [r7, #20]
 8101282:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101284:	4b20      	ldr	r3, [pc, #128]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810128a:	4a1f      	ldr	r2, [pc, #124]	; (8101308 <MX_GPIO_Init+0xa8>)
 810128c:	f043 0301 	orr.w	r3, r3, #1
 8101290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101294:	4b1c      	ldr	r3, [pc, #112]	; (8101308 <MX_GPIO_Init+0xa8>)
 8101296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810129a:	f003 0301 	and.w	r3, r3, #1
 810129e:	613b      	str	r3, [r7, #16]
 81012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012a2:	4b19      	ldr	r3, [pc, #100]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a8:	4a17      	ldr	r2, [pc, #92]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012aa:	f043 0302 	orr.w	r3, r3, #2
 81012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b2:	4b15      	ldr	r3, [pc, #84]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b8:	f003 0302 	and.w	r3, r3, #2
 81012bc:	60fb      	str	r3, [r7, #12]
 81012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012c0:	4b11      	ldr	r3, [pc, #68]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c6:	4a10      	ldr	r2, [pc, #64]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012c8:	f043 0308 	orr.w	r3, r3, #8
 81012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012d0:	4b0d      	ldr	r3, [pc, #52]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d6:	f003 0308 	and.w	r3, r3, #8
 81012da:	60bb      	str	r3, [r7, #8]
 81012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81012de:	4b0a      	ldr	r3, [pc, #40]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e4:	4a08      	ldr	r2, [pc, #32]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012e6:	f043 0304 	orr.w	r3, r3, #4
 81012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ee:	4b06      	ldr	r3, [pc, #24]	; (8101308 <MX_GPIO_Init+0xa8>)
 81012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012f4:	f003 0304 	and.w	r3, r3, #4
 81012f8:	607b      	str	r3, [r7, #4]
 81012fa:	687b      	ldr	r3, [r7, #4]

}
 81012fc:	bf00      	nop
 81012fe:	371c      	adds	r7, #28
 8101300:	46bd      	mov	sp, r7
 8101302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101306:	4770      	bx	lr
 8101308:	58024400 	.word	0x58024400

0810130c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 810130c:	b580      	push	{r7, lr}
 810130e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8101310:	4b1c      	ldr	r3, [pc, #112]	; (8101384 <MX_I2C1_Init+0x78>)
 8101312:	4a1d      	ldr	r2, [pc, #116]	; (8101388 <MX_I2C1_Init+0x7c>)
 8101314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8101316:	4b1b      	ldr	r3, [pc, #108]	; (8101384 <MX_I2C1_Init+0x78>)
 8101318:	4a1c      	ldr	r2, [pc, #112]	; (810138c <MX_I2C1_Init+0x80>)
 810131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810131c:	4b19      	ldr	r3, [pc, #100]	; (8101384 <MX_I2C1_Init+0x78>)
 810131e:	2200      	movs	r2, #0
 8101320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101322:	4b18      	ldr	r3, [pc, #96]	; (8101384 <MX_I2C1_Init+0x78>)
 8101324:	2201      	movs	r2, #1
 8101326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101328:	4b16      	ldr	r3, [pc, #88]	; (8101384 <MX_I2C1_Init+0x78>)
 810132a:	2200      	movs	r2, #0
 810132c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810132e:	4b15      	ldr	r3, [pc, #84]	; (8101384 <MX_I2C1_Init+0x78>)
 8101330:	2200      	movs	r2, #0
 8101332:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101334:	4b13      	ldr	r3, [pc, #76]	; (8101384 <MX_I2C1_Init+0x78>)
 8101336:	2200      	movs	r2, #0
 8101338:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810133a:	4b12      	ldr	r3, [pc, #72]	; (8101384 <MX_I2C1_Init+0x78>)
 810133c:	2200      	movs	r2, #0
 810133e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101340:	4b10      	ldr	r3, [pc, #64]	; (8101384 <MX_I2C1_Init+0x78>)
 8101342:	2200      	movs	r2, #0
 8101344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101346:	480f      	ldr	r0, [pc, #60]	; (8101384 <MX_I2C1_Init+0x78>)
 8101348:	f003 fe1c 	bl	8104f84 <HAL_I2C_Init>
 810134c:	4603      	mov	r3, r0
 810134e:	2b00      	cmp	r3, #0
 8101350:	d001      	beq.n	8101356 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101352:	f000 fa01 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101356:	2100      	movs	r1, #0
 8101358:	480a      	ldr	r0, [pc, #40]	; (8101384 <MX_I2C1_Init+0x78>)
 810135a:	f004 fd5d 	bl	8105e18 <HAL_I2CEx_ConfigAnalogFilter>
 810135e:	4603      	mov	r3, r0
 8101360:	2b00      	cmp	r3, #0
 8101362:	d001      	beq.n	8101368 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101364:	f000 f9f8 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101368:	2100      	movs	r1, #0
 810136a:	4806      	ldr	r0, [pc, #24]	; (8101384 <MX_I2C1_Init+0x78>)
 810136c:	f004 fd9f 	bl	8105eae <HAL_I2CEx_ConfigDigitalFilter>
 8101370:	4603      	mov	r3, r0
 8101372:	2b00      	cmp	r3, #0
 8101374:	d001      	beq.n	810137a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101376:	f000 f9ef 	bl	8101758 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 810137a:	2001      	movs	r0, #1
 810137c:	f004 fde4 	bl	8105f48 <HAL_I2CEx_EnableFastModePlus>

}
 8101380:	bf00      	nop
 8101382:	bd80      	pop	{r7, pc}
 8101384:	100099f0 	.word	0x100099f0
 8101388:	40005400 	.word	0x40005400
 810138c:	00401242 	.word	0x00401242

08101390 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101390:	b580      	push	{r7, lr}
 8101392:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8101394:	4b1b      	ldr	r3, [pc, #108]	; (8101404 <MX_I2C2_Init+0x74>)
 8101396:	4a1c      	ldr	r2, [pc, #112]	; (8101408 <MX_I2C2_Init+0x78>)
 8101398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 810139a:	4b1a      	ldr	r3, [pc, #104]	; (8101404 <MX_I2C2_Init+0x74>)
 810139c:	4a1b      	ldr	r2, [pc, #108]	; (810140c <MX_I2C2_Init+0x7c>)
 810139e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81013a0:	4b18      	ldr	r3, [pc, #96]	; (8101404 <MX_I2C2_Init+0x74>)
 81013a2:	2200      	movs	r2, #0
 81013a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81013a6:	4b17      	ldr	r3, [pc, #92]	; (8101404 <MX_I2C2_Init+0x74>)
 81013a8:	2201      	movs	r2, #1
 81013aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013ac:	4b15      	ldr	r3, [pc, #84]	; (8101404 <MX_I2C2_Init+0x74>)
 81013ae:	2200      	movs	r2, #0
 81013b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81013b2:	4b14      	ldr	r3, [pc, #80]	; (8101404 <MX_I2C2_Init+0x74>)
 81013b4:	2200      	movs	r2, #0
 81013b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013b8:	4b12      	ldr	r3, [pc, #72]	; (8101404 <MX_I2C2_Init+0x74>)
 81013ba:	2200      	movs	r2, #0
 81013bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013be:	4b11      	ldr	r3, [pc, #68]	; (8101404 <MX_I2C2_Init+0x74>)
 81013c0:	2200      	movs	r2, #0
 81013c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013c4:	4b0f      	ldr	r3, [pc, #60]	; (8101404 <MX_I2C2_Init+0x74>)
 81013c6:	2200      	movs	r2, #0
 81013c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81013ca:	480e      	ldr	r0, [pc, #56]	; (8101404 <MX_I2C2_Init+0x74>)
 81013cc:	f003 fdda 	bl	8104f84 <HAL_I2C_Init>
 81013d0:	4603      	mov	r3, r0
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d001      	beq.n	81013da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81013d6:	f000 f9bf 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81013da:	2100      	movs	r1, #0
 81013dc:	4809      	ldr	r0, [pc, #36]	; (8101404 <MX_I2C2_Init+0x74>)
 81013de:	f004 fd1b 	bl	8105e18 <HAL_I2CEx_ConfigAnalogFilter>
 81013e2:	4603      	mov	r3, r0
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d001      	beq.n	81013ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81013e8:	f000 f9b6 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81013ec:	2100      	movs	r1, #0
 81013ee:	4805      	ldr	r0, [pc, #20]	; (8101404 <MX_I2C2_Init+0x74>)
 81013f0:	f004 fd5d 	bl	8105eae <HAL_I2CEx_ConfigDigitalFilter>
 81013f4:	4603      	mov	r3, r0
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d001      	beq.n	81013fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81013fa:	f000 f9ad 	bl	8101758 <Error_Handler>
  }

}
 81013fe:	bf00      	nop
 8101400:	bd80      	pop	{r7, pc}
 8101402:	bf00      	nop
 8101404:	10009a3c 	.word	0x10009a3c
 8101408:	40005800 	.word	0x40005800
 810140c:	10c0ecff 	.word	0x10c0ecff

08101410 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8101410:	b580      	push	{r7, lr}
 8101412:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8101414:	4b1b      	ldr	r3, [pc, #108]	; (8101484 <MX_I2C3_Init+0x74>)
 8101416:	4a1c      	ldr	r2, [pc, #112]	; (8101488 <MX_I2C3_Init+0x78>)
 8101418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 810141a:	4b1a      	ldr	r3, [pc, #104]	; (8101484 <MX_I2C3_Init+0x74>)
 810141c:	4a1b      	ldr	r2, [pc, #108]	; (810148c <MX_I2C3_Init+0x7c>)
 810141e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8101420:	4b18      	ldr	r3, [pc, #96]	; (8101484 <MX_I2C3_Init+0x74>)
 8101422:	2200      	movs	r2, #0
 8101424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101426:	4b17      	ldr	r3, [pc, #92]	; (8101484 <MX_I2C3_Init+0x74>)
 8101428:	2201      	movs	r2, #1
 810142a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810142c:	4b15      	ldr	r3, [pc, #84]	; (8101484 <MX_I2C3_Init+0x74>)
 810142e:	2200      	movs	r2, #0
 8101430:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8101432:	4b14      	ldr	r3, [pc, #80]	; (8101484 <MX_I2C3_Init+0x74>)
 8101434:	2200      	movs	r2, #0
 8101436:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101438:	4b12      	ldr	r3, [pc, #72]	; (8101484 <MX_I2C3_Init+0x74>)
 810143a:	2200      	movs	r2, #0
 810143c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810143e:	4b11      	ldr	r3, [pc, #68]	; (8101484 <MX_I2C3_Init+0x74>)
 8101440:	2200      	movs	r2, #0
 8101442:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101444:	4b0f      	ldr	r3, [pc, #60]	; (8101484 <MX_I2C3_Init+0x74>)
 8101446:	2200      	movs	r2, #0
 8101448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 810144a:	480e      	ldr	r0, [pc, #56]	; (8101484 <MX_I2C3_Init+0x74>)
 810144c:	f003 fd9a 	bl	8104f84 <HAL_I2C_Init>
 8101450:	4603      	mov	r3, r0
 8101452:	2b00      	cmp	r3, #0
 8101454:	d001      	beq.n	810145a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8101456:	f000 f97f 	bl	8101758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810145a:	2100      	movs	r1, #0
 810145c:	4809      	ldr	r0, [pc, #36]	; (8101484 <MX_I2C3_Init+0x74>)
 810145e:	f004 fcdb 	bl	8105e18 <HAL_I2CEx_ConfigAnalogFilter>
 8101462:	4603      	mov	r3, r0
 8101464:	2b00      	cmp	r3, #0
 8101466:	d001      	beq.n	810146c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8101468:	f000 f976 	bl	8101758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 810146c:	2100      	movs	r1, #0
 810146e:	4805      	ldr	r0, [pc, #20]	; (8101484 <MX_I2C3_Init+0x74>)
 8101470:	f004 fd1d 	bl	8105eae <HAL_I2CEx_ConfigDigitalFilter>
 8101474:	4603      	mov	r3, r0
 8101476:	2b00      	cmp	r3, #0
 8101478:	d001      	beq.n	810147e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 810147a:	f000 f96d 	bl	8101758 <Error_Handler>
  }

}
 810147e:	bf00      	nop
 8101480:	bd80      	pop	{r7, pc}
 8101482:	bf00      	nop
 8101484:	100099a4 	.word	0x100099a4
 8101488:	40005c00 	.word	0x40005c00
 810148c:	10c0ecff 	.word	0x10c0ecff

08101490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101490:	b580      	push	{r7, lr}
 8101492:	b08e      	sub	sp, #56	; 0x38
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810149c:	2200      	movs	r2, #0
 810149e:	601a      	str	r2, [r3, #0]
 81014a0:	605a      	str	r2, [r3, #4]
 81014a2:	609a      	str	r2, [r3, #8]
 81014a4:	60da      	str	r2, [r3, #12]
 81014a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	4a5f      	ldr	r2, [pc, #380]	; (810162c <HAL_I2C_MspInit+0x19c>)
 81014ae:	4293      	cmp	r3, r2
 81014b0:	d12e      	bne.n	8101510 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014b2:	4b5f      	ldr	r3, [pc, #380]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b8:	4a5d      	ldr	r2, [pc, #372]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014ba:	f043 0302 	orr.w	r3, r3, #2
 81014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014c2:	4b5b      	ldr	r3, [pc, #364]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c8:	f003 0302 	and.w	r3, r3, #2
 81014cc:	623b      	str	r3, [r7, #32]
 81014ce:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81014d0:	23c0      	movs	r3, #192	; 0xc0
 81014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81014d4:	2312      	movs	r3, #18
 81014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014d8:	2300      	movs	r3, #0
 81014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014dc:	2300      	movs	r3, #0
 81014de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81014e0:	2304      	movs	r3, #4
 81014e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014e8:	4619      	mov	r1, r3
 81014ea:	4852      	ldr	r0, [pc, #328]	; (8101634 <HAL_I2C_MspInit+0x1a4>)
 81014ec:	f003 fb08 	bl	8104b00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81014f0:	4b4f      	ldr	r3, [pc, #316]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014f6:	4a4e      	ldr	r2, [pc, #312]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81014fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101500:	4b4b      	ldr	r3, [pc, #300]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810150a:	61fb      	str	r3, [r7, #28]
 810150c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 810150e:	e088      	b.n	8101622 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	4a48      	ldr	r2, [pc, #288]	; (8101638 <HAL_I2C_MspInit+0x1a8>)
 8101516:	4293      	cmp	r3, r2
 8101518:	d12f      	bne.n	810157a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810151a:	4b45      	ldr	r3, [pc, #276]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101520:	4a43      	ldr	r2, [pc, #268]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101522:	f043 0302 	orr.w	r3, r3, #2
 8101526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810152a:	4b41      	ldr	r3, [pc, #260]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101530:	f003 0302 	and.w	r3, r3, #2
 8101534:	61bb      	str	r3, [r7, #24]
 8101536:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810153e:	2312      	movs	r3, #18
 8101540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101542:	2300      	movs	r3, #0
 8101544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101546:	2300      	movs	r3, #0
 8101548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 810154a:	2304      	movs	r3, #4
 810154c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101552:	4619      	mov	r1, r3
 8101554:	4837      	ldr	r0, [pc, #220]	; (8101634 <HAL_I2C_MspInit+0x1a4>)
 8101556:	f003 fad3 	bl	8104b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 810155a:	4b35      	ldr	r3, [pc, #212]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101560:	4a33      	ldr	r2, [pc, #204]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810156a:	4b31      	ldr	r3, [pc, #196]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101574:	617b      	str	r3, [r7, #20]
 8101576:	697b      	ldr	r3, [r7, #20]
}
 8101578:	e053      	b.n	8101622 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	681b      	ldr	r3, [r3, #0]
 810157e:	4a2f      	ldr	r2, [pc, #188]	; (810163c <HAL_I2C_MspInit+0x1ac>)
 8101580:	4293      	cmp	r3, r2
 8101582:	d14e      	bne.n	8101622 <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101584:	4b2a      	ldr	r3, [pc, #168]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810158a:	4a29      	ldr	r2, [pc, #164]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810158c:	f043 0304 	orr.w	r3, r3, #4
 8101590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101594:	4b26      	ldr	r3, [pc, #152]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810159a:	f003 0304 	and.w	r3, r3, #4
 810159e:	613b      	str	r3, [r7, #16]
 81015a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015a2:	4b23      	ldr	r3, [pc, #140]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015a8:	4a21      	ldr	r2, [pc, #132]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015aa:	f043 0301 	orr.w	r3, r3, #1
 81015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015b2:	4b1f      	ldr	r3, [pc, #124]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 81015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015b8:	f003 0301 	and.w	r3, r3, #1
 81015bc:	60fb      	str	r3, [r7, #12]
 81015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015c6:	2312      	movs	r3, #18
 81015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ca:	2300      	movs	r3, #0
 81015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015ce:	2300      	movs	r3, #0
 81015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015d2:	2304      	movs	r3, #4
 81015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015da:	4619      	mov	r1, r3
 81015dc:	4818      	ldr	r0, [pc, #96]	; (8101640 <HAL_I2C_MspInit+0x1b0>)
 81015de:	f003 fa8f 	bl	8104b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 81015e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015e8:	2312      	movs	r3, #18
 81015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ec:	2300      	movs	r3, #0
 81015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015f0:	2300      	movs	r3, #0
 81015f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015f4:	2304      	movs	r3, #4
 81015f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015fc:	4619      	mov	r1, r3
 81015fe:	4811      	ldr	r0, [pc, #68]	; (8101644 <HAL_I2C_MspInit+0x1b4>)
 8101600:	f003 fa7e 	bl	8104b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8101604:	4b0a      	ldr	r3, [pc, #40]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810160a:	4a09      	ldr	r2, [pc, #36]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 810160c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101614:	4b06      	ldr	r3, [pc, #24]	; (8101630 <HAL_I2C_MspInit+0x1a0>)
 8101616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810161a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810161e:	60bb      	str	r3, [r7, #8]
 8101620:	68bb      	ldr	r3, [r7, #8]
}
 8101622:	bf00      	nop
 8101624:	3738      	adds	r7, #56	; 0x38
 8101626:	46bd      	mov	sp, r7
 8101628:	bd80      	pop	{r7, pc}
 810162a:	bf00      	nop
 810162c:	40005400 	.word	0x40005400
 8101630:	58024400 	.word	0x58024400
 8101634:	58020400 	.word	0x58020400
 8101638:	40005800 	.word	0x40005800
 810163c:	40005c00 	.word	0x40005c00
 8101640:	58020800 	.word	0x58020800
 8101644:	58020000 	.word	0x58020000

08101648 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 8101648:	b580      	push	{r7, lr}
 810164a:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 810164c:	4b0b      	ldr	r3, [pc, #44]	; (810167c <MX_IWDG2_Init+0x34>)
 810164e:	4a0c      	ldr	r2, [pc, #48]	; (8101680 <MX_IWDG2_Init+0x38>)
 8101650:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 8101652:	4b0a      	ldr	r3, [pc, #40]	; (810167c <MX_IWDG2_Init+0x34>)
 8101654:	2200      	movs	r2, #0
 8101656:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 8101658:	4b08      	ldr	r3, [pc, #32]	; (810167c <MX_IWDG2_Init+0x34>)
 810165a:	f640 72ff 	movw	r2, #4095	; 0xfff
 810165e:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 8101660:	4b06      	ldr	r3, [pc, #24]	; (810167c <MX_IWDG2_Init+0x34>)
 8101662:	f640 72ff 	movw	r2, #4095	; 0xfff
 8101666:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 8101668:	4804      	ldr	r0, [pc, #16]	; (810167c <MX_IWDG2_Init+0x34>)
 810166a:	f004 fc91 	bl	8105f90 <HAL_IWDG_Init>
 810166e:	4603      	mov	r3, r0
 8101670:	2b00      	cmp	r3, #0
 8101672:	d001      	beq.n	8101678 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 8101674:	f000 f870 	bl	8101758 <Error_Handler>
  }

}
 8101678:	bf00      	nop
 810167a:	bd80      	pop	{r7, pc}
 810167c:	10009a88 	.word	0x10009a88
 8101680:	58004c00 	.word	0x58004c00

08101684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101684:	b580      	push	{r7, lr}
 8101686:	b082      	sub	sp, #8
 8101688:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810168a:	4b27      	ldr	r3, [pc, #156]	; (8101728 <main+0xa4>)
 810168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101690:	4a25      	ldr	r2, [pc, #148]	; (8101728 <main+0xa4>)
 8101692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810169a:	4b23      	ldr	r3, [pc, #140]	; (8101728 <main+0xa4>)
 810169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81016a4:	607b      	str	r3, [r7, #4]
 81016a6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016a8:	2001      	movs	r0, #1
 81016aa:	f003 fc59 	bl	8104f60 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81016ae:	f004 fd3b 	bl	8106128 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81016b2:	2201      	movs	r2, #1
 81016b4:	2102      	movs	r1, #2
 81016b6:	2000      	movs	r0, #0
 81016b8:	f004 fcc0 	bl	810603c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016bc:	4b1b      	ldr	r3, [pc, #108]	; (810172c <main+0xa8>)
 81016be:	681b      	ldr	r3, [r3, #0]
 81016c0:	091b      	lsrs	r3, r3, #4
 81016c2:	f003 030f 	and.w	r3, r3, #15
 81016c6:	2b07      	cmp	r3, #7
 81016c8:	d108      	bne.n	81016dc <main+0x58>
 81016ca:	4b19      	ldr	r3, [pc, #100]	; (8101730 <main+0xac>)
 81016cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016d0:	4a17      	ldr	r2, [pc, #92]	; (8101730 <main+0xac>)
 81016d2:	f043 0301 	orr.w	r3, r3, #1
 81016d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016da:	e007      	b.n	81016ec <main+0x68>
 81016dc:	4b14      	ldr	r3, [pc, #80]	; (8101730 <main+0xac>)
 81016de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016e2:	4a13      	ldr	r2, [pc, #76]	; (8101730 <main+0xac>)
 81016e4:	f043 0301 	orr.w	r3, r3, #1
 81016e8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016ec:	f000 fd62 	bl	81021b4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016f0:	f7ff fdb6 	bl	8101260 <MX_GPIO_Init>
  MX_DMA_Init();
 81016f4:	f7ff fd2c 	bl	8101150 <MX_DMA_Init>
  MX_IWDG2_Init();
 81016f8:	f7ff ffa6 	bl	8101648 <MX_IWDG2_Init>
  MX_FATFS_Init();
 81016fc:	f007 fad6 	bl	8108cac <MX_FATFS_Init>
  MX_I2C1_Init();
 8101700:	f7ff fe04 	bl	810130c <MX_I2C1_Init>
  MX_SPI1_Init();
 8101704:	f000 f82c 	bl	8101760 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8101708:	f000 fc2e 	bl	8101f68 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 810170c:	f7ff fe40 	bl	8101390 <MX_I2C2_Init>
  MX_I2C3_Init();
 8101710:	f7ff fe7e 	bl	8101410 <MX_I2C3_Init>
  MX_SPI3_Init();
 8101714:	f000 f87a 	bl	810180c <MX_SPI3_Init>
  MX_SPI4_Init();
 8101718:	f000 f8ce 	bl	81018b8 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 810171c:	f7ff fd7a 	bl	8101214 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8101720:	f007 fba1 	bl	8108e66 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101724:	e7fe      	b.n	8101724 <main+0xa0>
 8101726:	bf00      	nop
 8101728:	58024400 	.word	0x58024400
 810172c:	e000ed00 	.word	0xe000ed00
 8101730:	58026400 	.word	0x58026400

08101734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101734:	b580      	push	{r7, lr}
 8101736:	b082      	sub	sp, #8
 8101738:	af00      	add	r7, sp, #0
 810173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	4a04      	ldr	r2, [pc, #16]	; (8101754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101742:	4293      	cmp	r3, r2
 8101744:	d101      	bne.n	810174a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101746:	f000 fd93 	bl	8102270 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810174a:	bf00      	nop
 810174c:	3708      	adds	r7, #8
 810174e:	46bd      	mov	sp, r7
 8101750:	bd80      	pop	{r7, pc}
 8101752:	bf00      	nop
 8101754:	40010400 	.word	0x40010400

08101758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101758:	b480      	push	{r7}
 810175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810175c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810175e:	e7fe      	b.n	810175e <Error_Handler+0x6>

08101760 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101760:	b580      	push	{r7, lr}
 8101762:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8101764:	4b27      	ldr	r3, [pc, #156]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101766:	4a28      	ldr	r2, [pc, #160]	; (8101808 <MX_SPI1_Init+0xa8>)
 8101768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810176a:	4b26      	ldr	r3, [pc, #152]	; (8101804 <MX_SPI1_Init+0xa4>)
 810176c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101772:	4b24      	ldr	r3, [pc, #144]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101774:	2200      	movs	r2, #0
 8101776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101778:	4b22      	ldr	r3, [pc, #136]	; (8101804 <MX_SPI1_Init+0xa4>)
 810177a:	2203      	movs	r2, #3
 810177c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810177e:	4b21      	ldr	r3, [pc, #132]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101780:	2200      	movs	r2, #0
 8101782:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101784:	4b1f      	ldr	r3, [pc, #124]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101786:	2200      	movs	r2, #0
 8101788:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810178a:	4b1e      	ldr	r3, [pc, #120]	; (8101804 <MX_SPI1_Init+0xa4>)
 810178c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101790:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8101792:	4b1c      	ldr	r3, [pc, #112]	; (8101804 <MX_SPI1_Init+0xa4>)
 8101794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101798:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810179a:	4b1a      	ldr	r3, [pc, #104]	; (8101804 <MX_SPI1_Init+0xa4>)
 810179c:	2200      	movs	r2, #0
 810179e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81017a0:	4b18      	ldr	r3, [pc, #96]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017a2:	2200      	movs	r2, #0
 81017a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81017a6:	4b17      	ldr	r3, [pc, #92]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017a8:	2200      	movs	r2, #0
 81017aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81017ac:	4b15      	ldr	r3, [pc, #84]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ae:	2200      	movs	r2, #0
 81017b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81017b2:	4b14      	ldr	r3, [pc, #80]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81017b8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81017ba:	4b12      	ldr	r3, [pc, #72]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017bc:	2200      	movs	r2, #0
 81017be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81017c0:	4b10      	ldr	r3, [pc, #64]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017c2:	2200      	movs	r2, #0
 81017c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017c6:	4b0f      	ldr	r3, [pc, #60]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017c8:	2200      	movs	r2, #0
 81017ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017cc:	4b0d      	ldr	r3, [pc, #52]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ce:	2200      	movs	r2, #0
 81017d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81017d2:	4b0c      	ldr	r3, [pc, #48]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017d4:	2200      	movs	r2, #0
 81017d6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81017d8:	4b0a      	ldr	r3, [pc, #40]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017da:	2200      	movs	r2, #0
 81017dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81017de:	4b09      	ldr	r3, [pc, #36]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017e0:	2200      	movs	r2, #0
 81017e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81017e4:	4b07      	ldr	r3, [pc, #28]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017e6:	2200      	movs	r2, #0
 81017e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81017ea:	4b06      	ldr	r3, [pc, #24]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017ec:	2200      	movs	r2, #0
 81017ee:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81017f0:	4804      	ldr	r0, [pc, #16]	; (8101804 <MX_SPI1_Init+0xa4>)
 81017f2:	f005 f967 	bl	8106ac4 <HAL_SPI_Init>
 81017f6:	4603      	mov	r3, r0
 81017f8:	2b00      	cmp	r3, #0
 81017fa:	d001      	beq.n	8101800 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81017fc:	f7ff ffac 	bl	8101758 <Error_Handler>
  }

}
 8101800:	bf00      	nop
 8101802:	bd80      	pop	{r7, pc}
 8101804:	10009ba8 	.word	0x10009ba8
 8101808:	40013000 	.word	0x40013000

0810180c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 810180c:	b580      	push	{r7, lr}
 810180e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8101810:	4b27      	ldr	r3, [pc, #156]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101812:	4a28      	ldr	r2, [pc, #160]	; (81018b4 <MX_SPI3_Init+0xa8>)
 8101814:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8101816:	4b26      	ldr	r3, [pc, #152]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101818:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810181c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 810181e:	4b24      	ldr	r3, [pc, #144]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101820:	2200      	movs	r2, #0
 8101822:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8101824:	4b22      	ldr	r3, [pc, #136]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101826:	2203      	movs	r2, #3
 8101828:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 810182a:	4b21      	ldr	r3, [pc, #132]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810182c:	2200      	movs	r2, #0
 810182e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101830:	4b1f      	ldr	r3, [pc, #124]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101832:	2200      	movs	r2, #0
 8101834:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8101836:	4b1e      	ldr	r3, [pc, #120]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810183c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 810183e:	4b1c      	ldr	r3, [pc, #112]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101844:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101846:	4b1a      	ldr	r3, [pc, #104]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101848:	2200      	movs	r2, #0
 810184a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 810184c:	4b18      	ldr	r3, [pc, #96]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810184e:	2200      	movs	r2, #0
 8101850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101852:	4b17      	ldr	r3, [pc, #92]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101854:	2200      	movs	r2, #0
 8101856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8101858:	4b15      	ldr	r3, [pc, #84]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810185a:	2200      	movs	r2, #0
 810185c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810185e:	4b14      	ldr	r3, [pc, #80]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101864:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101866:	4b12      	ldr	r3, [pc, #72]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101868:	2200      	movs	r2, #0
 810186a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810186c:	4b10      	ldr	r3, [pc, #64]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810186e:	2200      	movs	r2, #0
 8101870:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101872:	4b0f      	ldr	r3, [pc, #60]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101874:	2200      	movs	r2, #0
 8101876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101878:	4b0d      	ldr	r3, [pc, #52]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810187a:	2200      	movs	r2, #0
 810187c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810187e:	4b0c      	ldr	r3, [pc, #48]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101880:	2200      	movs	r2, #0
 8101882:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101884:	4b0a      	ldr	r3, [pc, #40]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101886:	2200      	movs	r2, #0
 8101888:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810188a:	4b09      	ldr	r3, [pc, #36]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810188c:	2200      	movs	r2, #0
 810188e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101890:	4b07      	ldr	r3, [pc, #28]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101892:	2200      	movs	r2, #0
 8101894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101896:	4b06      	ldr	r3, [pc, #24]	; (81018b0 <MX_SPI3_Init+0xa4>)
 8101898:	2200      	movs	r2, #0
 810189a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 810189c:	4804      	ldr	r0, [pc, #16]	; (81018b0 <MX_SPI3_Init+0xa4>)
 810189e:	f005 f911 	bl	8106ac4 <HAL_SPI_Init>
 81018a2:	4603      	mov	r3, r0
 81018a4:	2b00      	cmp	r3, #0
 81018a6:	d001      	beq.n	81018ac <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 81018a8:	f7ff ff56 	bl	8101758 <Error_Handler>
  }

}
 81018ac:	bf00      	nop
 81018ae:	bd80      	pop	{r7, pc}
 81018b0:	10009a98 	.word	0x10009a98
 81018b4:	40003c00 	.word	0x40003c00

081018b8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 81018bc:	4b27      	ldr	r3, [pc, #156]	; (810195c <MX_SPI4_Init+0xa4>)
 81018be:	4a28      	ldr	r2, [pc, #160]	; (8101960 <MX_SPI4_Init+0xa8>)
 81018c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 81018c2:	4b26      	ldr	r3, [pc, #152]	; (810195c <MX_SPI4_Init+0xa4>)
 81018c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81018c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 81018ca:	4b24      	ldr	r3, [pc, #144]	; (810195c <MX_SPI4_Init+0xa4>)
 81018cc:	2200      	movs	r2, #0
 81018ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 81018d0:	4b22      	ldr	r3, [pc, #136]	; (810195c <MX_SPI4_Init+0xa4>)
 81018d2:	2203      	movs	r2, #3
 81018d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 81018d6:	4b21      	ldr	r3, [pc, #132]	; (810195c <MX_SPI4_Init+0xa4>)
 81018d8:	2200      	movs	r2, #0
 81018da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 81018dc:	4b1f      	ldr	r3, [pc, #124]	; (810195c <MX_SPI4_Init+0xa4>)
 81018de:	2200      	movs	r2, #0
 81018e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 81018e2:	4b1e      	ldr	r3, [pc, #120]	; (810195c <MX_SPI4_Init+0xa4>)
 81018e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81018e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 81018ea:	4b1c      	ldr	r3, [pc, #112]	; (810195c <MX_SPI4_Init+0xa4>)
 81018ec:	2200      	movs	r2, #0
 81018ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81018f0:	4b1a      	ldr	r3, [pc, #104]	; (810195c <MX_SPI4_Init+0xa4>)
 81018f2:	2200      	movs	r2, #0
 81018f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 81018f6:	4b19      	ldr	r3, [pc, #100]	; (810195c <MX_SPI4_Init+0xa4>)
 81018f8:	2200      	movs	r2, #0
 81018fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81018fc:	4b17      	ldr	r3, [pc, #92]	; (810195c <MX_SPI4_Init+0xa4>)
 81018fe:	2200      	movs	r2, #0
 8101900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8101902:	4b16      	ldr	r3, [pc, #88]	; (810195c <MX_SPI4_Init+0xa4>)
 8101904:	2200      	movs	r2, #0
 8101906:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101908:	4b14      	ldr	r3, [pc, #80]	; (810195c <MX_SPI4_Init+0xa4>)
 810190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810190e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101910:	4b12      	ldr	r3, [pc, #72]	; (810195c <MX_SPI4_Init+0xa4>)
 8101912:	2200      	movs	r2, #0
 8101914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101916:	4b11      	ldr	r3, [pc, #68]	; (810195c <MX_SPI4_Init+0xa4>)
 8101918:	2200      	movs	r2, #0
 810191a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810191c:	4b0f      	ldr	r3, [pc, #60]	; (810195c <MX_SPI4_Init+0xa4>)
 810191e:	2200      	movs	r2, #0
 8101920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101922:	4b0e      	ldr	r3, [pc, #56]	; (810195c <MX_SPI4_Init+0xa4>)
 8101924:	2200      	movs	r2, #0
 8101926:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101928:	4b0c      	ldr	r3, [pc, #48]	; (810195c <MX_SPI4_Init+0xa4>)
 810192a:	2200      	movs	r2, #0
 810192c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810192e:	4b0b      	ldr	r3, [pc, #44]	; (810195c <MX_SPI4_Init+0xa4>)
 8101930:	2200      	movs	r2, #0
 8101932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101934:	4b09      	ldr	r3, [pc, #36]	; (810195c <MX_SPI4_Init+0xa4>)
 8101936:	2200      	movs	r2, #0
 8101938:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810193a:	4b08      	ldr	r3, [pc, #32]	; (810195c <MX_SPI4_Init+0xa4>)
 810193c:	2200      	movs	r2, #0
 810193e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101940:	4b06      	ldr	r3, [pc, #24]	; (810195c <MX_SPI4_Init+0xa4>)
 8101942:	2200      	movs	r2, #0
 8101944:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8101946:	4805      	ldr	r0, [pc, #20]	; (810195c <MX_SPI4_Init+0xa4>)
 8101948:	f005 f8bc 	bl	8106ac4 <HAL_SPI_Init>
 810194c:	4603      	mov	r3, r0
 810194e:	2b00      	cmp	r3, #0
 8101950:	d001      	beq.n	8101956 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8101952:	f7ff ff01 	bl	8101758 <Error_Handler>
  }

}
 8101956:	bf00      	nop
 8101958:	bd80      	pop	{r7, pc}
 810195a:	bf00      	nop
 810195c:	10009b20 	.word	0x10009b20
 8101960:	40013400 	.word	0x40013400

08101964 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101964:	b580      	push	{r7, lr}
 8101966:	b090      	sub	sp, #64	; 0x40
 8101968:	af00      	add	r7, sp, #0
 810196a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101970:	2200      	movs	r2, #0
 8101972:	601a      	str	r2, [r3, #0]
 8101974:	605a      	str	r2, [r3, #4]
 8101976:	609a      	str	r2, [r3, #8]
 8101978:	60da      	str	r2, [r3, #12]
 810197a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	4aa0      	ldr	r2, [pc, #640]	; (8101c04 <HAL_SPI_MspInit+0x2a0>)
 8101982:	4293      	cmp	r3, r2
 8101984:	f040 80b2 	bne.w	8101aec <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101988:	4b9f      	ldr	r3, [pc, #636]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 810198a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810198e:	4a9e      	ldr	r2, [pc, #632]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101994:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101998:	4b9b      	ldr	r3, [pc, #620]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 810199a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81019a2:	62bb      	str	r3, [r7, #40]	; 0x28
 81019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81019a6:	4b98      	ldr	r3, [pc, #608]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ac:	4a96      	ldr	r2, [pc, #600]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019ae:	f043 0301 	orr.w	r3, r3, #1
 81019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019b6:	4b94      	ldr	r3, [pc, #592]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019bc:	f003 0301 	and.w	r3, r3, #1
 81019c0:	627b      	str	r3, [r7, #36]	; 0x24
 81019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81019c4:	4b90      	ldr	r3, [pc, #576]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ca:	4a8f      	ldr	r2, [pc, #572]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019cc:	f043 0308 	orr.w	r3, r3, #8
 81019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019d4:	4b8c      	ldr	r3, [pc, #560]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 81019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019da:	f003 0308 	and.w	r3, r3, #8
 81019de:	623b      	str	r3, [r7, #32]
 81019e0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81019e2:	2360      	movs	r3, #96	; 0x60
 81019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019e6:	2302      	movs	r3, #2
 81019e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019ea:	2300      	movs	r3, #0
 81019ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019ee:	2300      	movs	r3, #0
 81019f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81019f2:	2305      	movs	r3, #5
 81019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81019fa:	4619      	mov	r1, r3
 81019fc:	4883      	ldr	r0, [pc, #524]	; (8101c0c <HAL_SPI_MspInit+0x2a8>)
 81019fe:	f003 f87f 	bl	8104b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101a02:	2380      	movs	r3, #128	; 0x80
 8101a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a06:	2302      	movs	r3, #2
 8101a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a0a:	2300      	movs	r3, #0
 8101a0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a0e:	2300      	movs	r3, #0
 8101a10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101a12:	2305      	movs	r3, #5
 8101a14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101a1a:	4619      	mov	r1, r3
 8101a1c:	487c      	ldr	r0, [pc, #496]	; (8101c10 <HAL_SPI_MspInit+0x2ac>)
 8101a1e:	f003 f86f 	bl	8104b00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101a22:	4b7c      	ldr	r3, [pc, #496]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a24:	4a7c      	ldr	r2, [pc, #496]	; (8101c18 <HAL_SPI_MspInit+0x2b4>)
 8101a26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101a28:	4b7a      	ldr	r3, [pc, #488]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a2a:	2225      	movs	r2, #37	; 0x25
 8101a2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101a2e:	4b79      	ldr	r3, [pc, #484]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a30:	2200      	movs	r2, #0
 8101a32:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101a34:	4b77      	ldr	r3, [pc, #476]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a36:	2200      	movs	r2, #0
 8101a38:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101a3a:	4b76      	ldr	r3, [pc, #472]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101a40:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101a42:	4b74      	ldr	r3, [pc, #464]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a44:	2200      	movs	r2, #0
 8101a46:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101a48:	4b72      	ldr	r3, [pc, #456]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a4a:	2200      	movs	r2, #0
 8101a4c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8101a4e:	4b71      	ldr	r3, [pc, #452]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a50:	2200      	movs	r2, #0
 8101a52:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101a54:	4b6f      	ldr	r3, [pc, #444]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101a5a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101a5c:	4b6d      	ldr	r3, [pc, #436]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a5e:	2200      	movs	r2, #0
 8101a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101a62:	486c      	ldr	r0, [pc, #432]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a64:	f000 fd32 	bl	81024cc <HAL_DMA_Init>
 8101a68:	4603      	mov	r3, r0
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d001      	beq.n	8101a72 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8101a6e:	f7ff fe73 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	4a67      	ldr	r2, [pc, #412]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a76:	67da      	str	r2, [r3, #124]	; 0x7c
 8101a78:	4a66      	ldr	r2, [pc, #408]	; (8101c14 <HAL_SPI_MspInit+0x2b0>)
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101a7e:	4b67      	ldr	r3, [pc, #412]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a80:	4a67      	ldr	r2, [pc, #412]	; (8101c20 <HAL_SPI_MspInit+0x2bc>)
 8101a82:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101a84:	4b65      	ldr	r3, [pc, #404]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a86:	2226      	movs	r2, #38	; 0x26
 8101a88:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101a8a:	4b64      	ldr	r3, [pc, #400]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a8c:	2240      	movs	r2, #64	; 0x40
 8101a8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101a90:	4b62      	ldr	r3, [pc, #392]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a92:	2200      	movs	r2, #0
 8101a94:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101a96:	4b61      	ldr	r3, [pc, #388]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101a9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101a9e:	4b5f      	ldr	r3, [pc, #380]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aa0:	2200      	movs	r2, #0
 8101aa2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101aa4:	4b5d      	ldr	r3, [pc, #372]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aa6:	2200      	movs	r2, #0
 8101aa8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101aaa:	4b5c      	ldr	r3, [pc, #368]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aac:	2200      	movs	r2, #0
 8101aae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101ab0:	4b5a      	ldr	r3, [pc, #360]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ab2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101ab6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101ab8:	4b58      	ldr	r3, [pc, #352]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101aba:	2200      	movs	r2, #0
 8101abc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101abe:	4857      	ldr	r0, [pc, #348]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ac0:	f000 fd04 	bl	81024cc <HAL_DMA_Init>
 8101ac4:	4603      	mov	r3, r0
 8101ac6:	2b00      	cmp	r3, #0
 8101ac8:	d001      	beq.n	8101ace <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 8101aca:	f7ff fe45 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	4a52      	ldr	r2, [pc, #328]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ad2:	679a      	str	r2, [r3, #120]	; 0x78
 8101ad4:	4a51      	ldr	r2, [pc, #324]	; (8101c1c <HAL_SPI_MspInit+0x2b8>)
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101ada:	2200      	movs	r2, #0
 8101adc:	2105      	movs	r1, #5
 8101ade:	2023      	movs	r0, #35	; 0x23
 8101ae0:	f000 fcb3 	bl	810244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101ae4:	2023      	movs	r0, #35	; 0x23
 8101ae6:	f000 fcca 	bl	810247e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8101aea:	e086      	b.n	8101bfa <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI3)
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	4a4c      	ldr	r2, [pc, #304]	; (8101c24 <HAL_SPI_MspInit+0x2c0>)
 8101af2:	4293      	cmp	r3, r2
 8101af4:	d14e      	bne.n	8101b94 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8101af6:	4b44      	ldr	r3, [pc, #272]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101afc:	4a42      	ldr	r2, [pc, #264]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b06:	4b40      	ldr	r3, [pc, #256]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101b10:	61fb      	str	r3, [r7, #28]
 8101b12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b14:	4b3c      	ldr	r3, [pc, #240]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b1a:	4a3b      	ldr	r2, [pc, #236]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b1c:	f043 0302 	orr.w	r3, r3, #2
 8101b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b24:	4b38      	ldr	r3, [pc, #224]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b2a:	f003 0302 	and.w	r3, r3, #2
 8101b2e:	61bb      	str	r3, [r7, #24]
 8101b30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101b32:	4b35      	ldr	r3, [pc, #212]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b38:	4a33      	ldr	r2, [pc, #204]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b3a:	f043 0304 	orr.w	r3, r3, #4
 8101b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b42:	4b31      	ldr	r3, [pc, #196]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b48:	f003 0304 	and.w	r3, r3, #4
 8101b4c:	617b      	str	r3, [r7, #20]
 8101b4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101b50:	2304      	movs	r3, #4
 8101b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b54:	2302      	movs	r3, #2
 8101b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b58:	2300      	movs	r3, #0
 8101b5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b5c:	2300      	movs	r3, #0
 8101b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8101b60:	2307      	movs	r3, #7
 8101b62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b68:	4619      	mov	r1, r3
 8101b6a:	482f      	ldr	r0, [pc, #188]	; (8101c28 <HAL_SPI_MspInit+0x2c4>)
 8101b6c:	f002 ffc8 	bl	8104b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101b70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b76:	2302      	movs	r3, #2
 8101b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b7e:	2300      	movs	r3, #0
 8101b80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8101b82:	2306      	movs	r3, #6
 8101b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b8a:	4619      	mov	r1, r3
 8101b8c:	4827      	ldr	r0, [pc, #156]	; (8101c2c <HAL_SPI_MspInit+0x2c8>)
 8101b8e:	f002 ffb7 	bl	8104b00 <HAL_GPIO_Init>
}
 8101b92:	e032      	b.n	8101bfa <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI4)
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	681b      	ldr	r3, [r3, #0]
 8101b98:	4a25      	ldr	r2, [pc, #148]	; (8101c30 <HAL_SPI_MspInit+0x2cc>)
 8101b9a:	4293      	cmp	r3, r2
 8101b9c:	d12d      	bne.n	8101bfa <HAL_SPI_MspInit+0x296>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8101b9e:	4b1a      	ldr	r3, [pc, #104]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ba4:	4a18      	ldr	r2, [pc, #96]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101ba6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8101baa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101bae:	4b16      	ldr	r3, [pc, #88]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101bb8:	613b      	str	r3, [r7, #16]
 8101bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101bbc:	4b12      	ldr	r3, [pc, #72]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc2:	4a11      	ldr	r2, [pc, #68]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bc4:	f043 0310 	orr.w	r3, r3, #16
 8101bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bcc:	4b0e      	ldr	r3, [pc, #56]	; (8101c08 <HAL_SPI_MspInit+0x2a4>)
 8101bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd2:	f003 0310 	and.w	r3, r3, #16
 8101bd6:	60fb      	str	r3, [r7, #12]
 8101bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8101bda:	2364      	movs	r3, #100	; 0x64
 8101bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bde:	2302      	movs	r3, #2
 8101be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101be2:	2300      	movs	r3, #0
 8101be4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101be6:	2300      	movs	r3, #0
 8101be8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101bea:	2305      	movs	r3, #5
 8101bec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bf2:	4619      	mov	r1, r3
 8101bf4:	480f      	ldr	r0, [pc, #60]	; (8101c34 <HAL_SPI_MspInit+0x2d0>)
 8101bf6:	f002 ff83 	bl	8104b00 <HAL_GPIO_Init>
}
 8101bfa:	bf00      	nop
 8101bfc:	3740      	adds	r7, #64	; 0x40
 8101bfe:	46bd      	mov	sp, r7
 8101c00:	bd80      	pop	{r7, pc}
 8101c02:	bf00      	nop
 8101c04:	40013000 	.word	0x40013000
 8101c08:	58024400 	.word	0x58024400
 8101c0c:	58020000 	.word	0x58020000
 8101c10:	58020c00 	.word	0x58020c00
 8101c14:	10009c30 	.word	0x10009c30
 8101c18:	40020010 	.word	0x40020010
 8101c1c:	10009ca8 	.word	0x10009ca8
 8101c20:	40020028 	.word	0x40020028
 8101c24:	40003c00 	.word	0x40003c00
 8101c28:	58020400 	.word	0x58020400
 8101c2c:	58020800 	.word	0x58020800
 8101c30:	40013400 	.word	0x40013400
 8101c34:	58021000 	.word	0x58021000

08101c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	b082      	sub	sp, #8
 8101c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101c3e:	4b0c      	ldr	r3, [pc, #48]	; (8101c70 <HAL_MspInit+0x38>)
 8101c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c44:	4a0a      	ldr	r2, [pc, #40]	; (8101c70 <HAL_MspInit+0x38>)
 8101c46:	f043 0302 	orr.w	r3, r3, #2
 8101c4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c4e:	4b08      	ldr	r3, [pc, #32]	; (8101c70 <HAL_MspInit+0x38>)
 8101c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c54:	f003 0302 	and.w	r3, r3, #2
 8101c58:	607b      	str	r3, [r7, #4]
 8101c5a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101c5c:	2200      	movs	r2, #0
 8101c5e:	210f      	movs	r1, #15
 8101c60:	f06f 0001 	mvn.w	r0, #1
 8101c64:	f000 fbf1 	bl	810244a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101c68:	bf00      	nop
 8101c6a:	3708      	adds	r7, #8
 8101c6c:	46bd      	mov	sp, r7
 8101c6e:	bd80      	pop	{r7, pc}
 8101c70:	58024400 	.word	0x58024400

08101c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101c74:	b580      	push	{r7, lr}
 8101c76:	b08e      	sub	sp, #56	; 0x38
 8101c78:	af00      	add	r7, sp, #0
 8101c7a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	2b0f      	cmp	r3, #15
 8101c80:	d844      	bhi.n	8101d0c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 8101c82:	2200      	movs	r2, #0
 8101c84:	6879      	ldr	r1, [r7, #4]
 8101c86:	202c      	movs	r0, #44	; 0x2c
 8101c88:	f000 fbdf 	bl	810244a <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8101c8c:	202c      	movs	r0, #44	; 0x2c
 8101c8e:	f000 fbf6 	bl	810247e <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101c92:	4a24      	ldr	r2, [pc, #144]	; (8101d24 <HAL_InitTick+0xb0>)
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8101c98:	4b23      	ldr	r3, [pc, #140]	; (8101d28 <HAL_InitTick+0xb4>)
 8101c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c9e:	4a22      	ldr	r2, [pc, #136]	; (8101d28 <HAL_InitTick+0xb4>)
 8101ca0:	f043 0302 	orr.w	r3, r3, #2
 8101ca4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ca8:	4b1f      	ldr	r3, [pc, #124]	; (8101d28 <HAL_InitTick+0xb4>)
 8101caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101cae:	f003 0302 	and.w	r3, r3, #2
 8101cb2:	60bb      	str	r3, [r7, #8]
 8101cb4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101cb6:	f107 020c 	add.w	r2, r7, #12
 8101cba:	f107 0310 	add.w	r3, r7, #16
 8101cbe:	4611      	mov	r1, r2
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	f004 fc0f 	bl	81064e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8101cc6:	f004 fbf7 	bl	81064b8 <HAL_RCC_GetPCLK2Freq>
 8101cca:	4603      	mov	r3, r0
 8101ccc:	005b      	lsls	r3, r3, #1
 8101cce:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101cd2:	4a16      	ldr	r2, [pc, #88]	; (8101d2c <HAL_InitTick+0xb8>)
 8101cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8101cd8:	0c9b      	lsrs	r3, r3, #18
 8101cda:	3b01      	subs	r3, #1
 8101cdc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8101cde:	4b14      	ldr	r3, [pc, #80]	; (8101d30 <HAL_InitTick+0xbc>)
 8101ce0:	4a14      	ldr	r2, [pc, #80]	; (8101d34 <HAL_InitTick+0xc0>)
 8101ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101ce4:	4b12      	ldr	r3, [pc, #72]	; (8101d30 <HAL_InitTick+0xbc>)
 8101ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101cea:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101cec:	4a10      	ldr	r2, [pc, #64]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101cf0:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8101cf2:	4b0f      	ldr	r3, [pc, #60]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cf4:	2200      	movs	r2, #0
 8101cf6:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101cf8:	4b0d      	ldr	r3, [pc, #52]	; (8101d30 <HAL_InitTick+0xbc>)
 8101cfa:	2200      	movs	r2, #0
 8101cfc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8101cfe:	480c      	ldr	r0, [pc, #48]	; (8101d30 <HAL_InitTick+0xbc>)
 8101d00:	f005 fab7 	bl	8107272 <HAL_TIM_Base_Init>
 8101d04:	4603      	mov	r3, r0
 8101d06:	2b00      	cmp	r3, #0
 8101d08:	d107      	bne.n	8101d1a <HAL_InitTick+0xa6>
 8101d0a:	e001      	b.n	8101d10 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8101d0c:	2301      	movs	r3, #1
 8101d0e:	e005      	b.n	8101d1c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8101d10:	4807      	ldr	r0, [pc, #28]	; (8101d30 <HAL_InitTick+0xbc>)
 8101d12:	f005 fb0f 	bl	8107334 <HAL_TIM_Base_Start_IT>
 8101d16:	4603      	mov	r3, r0
 8101d18:	e000      	b.n	8101d1c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8101d1a:	2301      	movs	r3, #1
}
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	3738      	adds	r7, #56	; 0x38
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bd80      	pop	{r7, pc}
 8101d24:	10000008 	.word	0x10000008
 8101d28:	58024400 	.word	0x58024400
 8101d2c:	431bde83 	.word	0x431bde83
 8101d30:	10009d20 	.word	0x10009d20
 8101d34:	40010400 	.word	0x40010400

08101d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101d38:	b480      	push	{r7}
 8101d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101d3c:	e7fe      	b.n	8101d3c <NMI_Handler+0x4>

08101d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101d3e:	b480      	push	{r7}
 8101d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101d42:	e7fe      	b.n	8101d42 <HardFault_Handler+0x4>

08101d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101d44:	b480      	push	{r7}
 8101d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101d48:	e7fe      	b.n	8101d48 <MemManage_Handler+0x4>

08101d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101d4a:	b480      	push	{r7}
 8101d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101d4e:	e7fe      	b.n	8101d4e <BusFault_Handler+0x4>

08101d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101d50:	b480      	push	{r7}
 8101d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d54:	e7fe      	b.n	8101d54 <UsageFault_Handler+0x4>

08101d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d56:	b480      	push	{r7}
 8101d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d5a:	bf00      	nop
 8101d5c:	46bd      	mov	sp, r7
 8101d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d62:	4770      	bx	lr

08101d64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101d64:	b580      	push	{r7, lr}
 8101d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101d68:	4802      	ldr	r0, [pc, #8]	; (8101d74 <DMA1_Stream0_IRQHandler+0x10>)
 8101d6a:	f001 fbb7 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101d6e:	bf00      	nop
 8101d70:	bd80      	pop	{r7, pc}
 8101d72:	bf00      	nop
 8101d74:	10009c30 	.word	0x10009c30

08101d78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101d78:	b580      	push	{r7, lr}
 8101d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101d7c:	4802      	ldr	r0, [pc, #8]	; (8101d88 <DMA1_Stream1_IRQHandler+0x10>)
 8101d7e:	f001 fbad 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101d82:	bf00      	nop
 8101d84:	bd80      	pop	{r7, pc}
 8101d86:	bf00      	nop
 8101d88:	10009ca8 	.word	0x10009ca8

08101d8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101d8c:	b580      	push	{r7, lr}
 8101d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101d90:	4802      	ldr	r0, [pc, #8]	; (8101d9c <SPI1_IRQHandler+0x10>)
 8101d92:	f004 ff8f 	bl	8106cb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101d96:	bf00      	nop
 8101d98:	bd80      	pop	{r7, pc}
 8101d9a:	bf00      	nop
 8101d9c:	10009ba8 	.word	0x10009ba8

08101da0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8101da0:	b580      	push	{r7, lr}
 8101da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8101da4:	4802      	ldr	r0, [pc, #8]	; (8101db0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101da6:	f005 fafb 	bl	81073a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8101daa:	bf00      	nop
 8101dac:	bd80      	pop	{r7, pc}
 8101dae:	bf00      	nop
 8101db0:	10009d20 	.word	0x10009d20

08101db4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8101db4:	b580      	push	{r7, lr}
 8101db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101db8:	4802      	ldr	r0, [pc, #8]	; (8101dc4 <DMA2_Stream2_IRQHandler+0x10>)
 8101dba:	f001 fb8f 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8101dbe:	bf00      	nop
 8101dc0:	bd80      	pop	{r7, pc}
 8101dc2:	bf00      	nop
 8101dc4:	10009d6c 	.word	0x10009d6c

08101dc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101dcc:	4802      	ldr	r0, [pc, #8]	; (8101dd8 <DMA2_Stream3_IRQHandler+0x10>)
 8101dce:	f001 fb85 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8101dd2:	bf00      	nop
 8101dd4:	bd80      	pop	{r7, pc}
 8101dd6:	bf00      	nop
 8101dd8:	10009e70 	.word	0x10009e70

08101ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101ddc:	b480      	push	{r7}
 8101dde:	af00      	add	r7, sp, #0
	return 1;
 8101de0:	2301      	movs	r3, #1
}
 8101de2:	4618      	mov	r0, r3
 8101de4:	46bd      	mov	sp, r7
 8101de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dea:	4770      	bx	lr

08101dec <_kill>:

int _kill(int pid, int sig)
{
 8101dec:	b580      	push	{r7, lr}
 8101dee:	b082      	sub	sp, #8
 8101df0:	af00      	add	r7, sp, #0
 8101df2:	6078      	str	r0, [r7, #4]
 8101df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101df6:	f00e fe5b 	bl	8110ab0 <__errno>
 8101dfa:	4602      	mov	r2, r0
 8101dfc:	2316      	movs	r3, #22
 8101dfe:	6013      	str	r3, [r2, #0]
	return -1;
 8101e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e04:	4618      	mov	r0, r3
 8101e06:	3708      	adds	r7, #8
 8101e08:	46bd      	mov	sp, r7
 8101e0a:	bd80      	pop	{r7, pc}

08101e0c <_exit>:

void _exit (int status)
{
 8101e0c:	b580      	push	{r7, lr}
 8101e0e:	b082      	sub	sp, #8
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101e14:	f04f 31ff 	mov.w	r1, #4294967295
 8101e18:	6878      	ldr	r0, [r7, #4]
 8101e1a:	f7ff ffe7 	bl	8101dec <_kill>
	while (1) {}		/* Make sure we hang here */
 8101e1e:	e7fe      	b.n	8101e1e <_exit+0x12>

08101e20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101e20:	b580      	push	{r7, lr}
 8101e22:	b086      	sub	sp, #24
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	60f8      	str	r0, [r7, #12]
 8101e28:	60b9      	str	r1, [r7, #8]
 8101e2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e2c:	2300      	movs	r3, #0
 8101e2e:	617b      	str	r3, [r7, #20]
 8101e30:	e00a      	b.n	8101e48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101e32:	f3af 8000 	nop.w
 8101e36:	4601      	mov	r1, r0
 8101e38:	68bb      	ldr	r3, [r7, #8]
 8101e3a:	1c5a      	adds	r2, r3, #1
 8101e3c:	60ba      	str	r2, [r7, #8]
 8101e3e:	b2ca      	uxtb	r2, r1
 8101e40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e42:	697b      	ldr	r3, [r7, #20]
 8101e44:	3301      	adds	r3, #1
 8101e46:	617b      	str	r3, [r7, #20]
 8101e48:	697a      	ldr	r2, [r7, #20]
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	429a      	cmp	r2, r3
 8101e4e:	dbf0      	blt.n	8101e32 <_read+0x12>
	}

return len;
 8101e50:	687b      	ldr	r3, [r7, #4]
}
 8101e52:	4618      	mov	r0, r3
 8101e54:	3718      	adds	r7, #24
 8101e56:	46bd      	mov	sp, r7
 8101e58:	bd80      	pop	{r7, pc}

08101e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101e5a:	b580      	push	{r7, lr}
 8101e5c:	b086      	sub	sp, #24
 8101e5e:	af00      	add	r7, sp, #0
 8101e60:	60f8      	str	r0, [r7, #12]
 8101e62:	60b9      	str	r1, [r7, #8]
 8101e64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e66:	2300      	movs	r3, #0
 8101e68:	617b      	str	r3, [r7, #20]
 8101e6a:	e009      	b.n	8101e80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101e6c:	68bb      	ldr	r3, [r7, #8]
 8101e6e:	1c5a      	adds	r2, r3, #1
 8101e70:	60ba      	str	r2, [r7, #8]
 8101e72:	781b      	ldrb	r3, [r3, #0]
 8101e74:	4618      	mov	r0, r3
 8101e76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e7a:	697b      	ldr	r3, [r7, #20]
 8101e7c:	3301      	adds	r3, #1
 8101e7e:	617b      	str	r3, [r7, #20]
 8101e80:	697a      	ldr	r2, [r7, #20]
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	429a      	cmp	r2, r3
 8101e86:	dbf1      	blt.n	8101e6c <_write+0x12>
	}
	return len;
 8101e88:	687b      	ldr	r3, [r7, #4]
}
 8101e8a:	4618      	mov	r0, r3
 8101e8c:	3718      	adds	r7, #24
 8101e8e:	46bd      	mov	sp, r7
 8101e90:	bd80      	pop	{r7, pc}

08101e92 <_close>:

int _close(int file)
{
 8101e92:	b480      	push	{r7}
 8101e94:	b083      	sub	sp, #12
 8101e96:	af00      	add	r7, sp, #0
 8101e98:	6078      	str	r0, [r7, #4]
	return -1;
 8101e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e9e:	4618      	mov	r0, r3
 8101ea0:	370c      	adds	r7, #12
 8101ea2:	46bd      	mov	sp, r7
 8101ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea8:	4770      	bx	lr

08101eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101eaa:	b480      	push	{r7}
 8101eac:	b083      	sub	sp, #12
 8101eae:	af00      	add	r7, sp, #0
 8101eb0:	6078      	str	r0, [r7, #4]
 8101eb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101eb4:	683b      	ldr	r3, [r7, #0]
 8101eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101eba:	605a      	str	r2, [r3, #4]
	return 0;
 8101ebc:	2300      	movs	r3, #0
}
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	370c      	adds	r7, #12
 8101ec2:	46bd      	mov	sp, r7
 8101ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ec8:	4770      	bx	lr

08101eca <_isatty>:

int _isatty(int file)
{
 8101eca:	b480      	push	{r7}
 8101ecc:	b083      	sub	sp, #12
 8101ece:	af00      	add	r7, sp, #0
 8101ed0:	6078      	str	r0, [r7, #4]
	return 1;
 8101ed2:	2301      	movs	r3, #1
}
 8101ed4:	4618      	mov	r0, r3
 8101ed6:	370c      	adds	r7, #12
 8101ed8:	46bd      	mov	sp, r7
 8101eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ede:	4770      	bx	lr

08101ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101ee0:	b480      	push	{r7}
 8101ee2:	b085      	sub	sp, #20
 8101ee4:	af00      	add	r7, sp, #0
 8101ee6:	60f8      	str	r0, [r7, #12]
 8101ee8:	60b9      	str	r1, [r7, #8]
 8101eea:	607a      	str	r2, [r7, #4]
	return 0;
 8101eec:	2300      	movs	r3, #0
}
 8101eee:	4618      	mov	r0, r3
 8101ef0:	3714      	adds	r7, #20
 8101ef2:	46bd      	mov	sp, r7
 8101ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ef8:	4770      	bx	lr
	...

08101efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101efc:	b580      	push	{r7, lr}
 8101efe:	b086      	sub	sp, #24
 8101f00:	af00      	add	r7, sp, #0
 8101f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f04:	4a14      	ldr	r2, [pc, #80]	; (8101f58 <_sbrk+0x5c>)
 8101f06:	4b15      	ldr	r3, [pc, #84]	; (8101f5c <_sbrk+0x60>)
 8101f08:	1ad3      	subs	r3, r2, r3
 8101f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101f0c:	697b      	ldr	r3, [r7, #20]
 8101f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101f10:	4b13      	ldr	r3, [pc, #76]	; (8101f60 <_sbrk+0x64>)
 8101f12:	681b      	ldr	r3, [r3, #0]
 8101f14:	2b00      	cmp	r3, #0
 8101f16:	d102      	bne.n	8101f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101f18:	4b11      	ldr	r3, [pc, #68]	; (8101f60 <_sbrk+0x64>)
 8101f1a:	4a12      	ldr	r2, [pc, #72]	; (8101f64 <_sbrk+0x68>)
 8101f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101f1e:	4b10      	ldr	r3, [pc, #64]	; (8101f60 <_sbrk+0x64>)
 8101f20:	681a      	ldr	r2, [r3, #0]
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	4413      	add	r3, r2
 8101f26:	693a      	ldr	r2, [r7, #16]
 8101f28:	429a      	cmp	r2, r3
 8101f2a:	d207      	bcs.n	8101f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101f2c:	f00e fdc0 	bl	8110ab0 <__errno>
 8101f30:	4602      	mov	r2, r0
 8101f32:	230c      	movs	r3, #12
 8101f34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8101f36:	f04f 33ff 	mov.w	r3, #4294967295
 8101f3a:	e009      	b.n	8101f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101f3c:	4b08      	ldr	r3, [pc, #32]	; (8101f60 <_sbrk+0x64>)
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101f42:	4b07      	ldr	r3, [pc, #28]	; (8101f60 <_sbrk+0x64>)
 8101f44:	681a      	ldr	r2, [r3, #0]
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	4413      	add	r3, r2
 8101f4a:	4a05      	ldr	r2, [pc, #20]	; (8101f60 <_sbrk+0x64>)
 8101f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101f4e:	68fb      	ldr	r3, [r7, #12]
}
 8101f50:	4618      	mov	r0, r3
 8101f52:	3718      	adds	r7, #24
 8101f54:	46bd      	mov	sp, r7
 8101f56:	bd80      	pop	{r7, pc}
 8101f58:	10048000 	.word	0x10048000
 8101f5c:	00000400 	.word	0x00000400
 8101f60:	10000480 	.word	0x10000480
 8101f64:	1000a370 	.word	0x1000a370

08101f68 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101f68:	b580      	push	{r7, lr}
 8101f6a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101f6c:	4b22      	ldr	r3, [pc, #136]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f6e:	4a23      	ldr	r2, [pc, #140]	; (8101ffc <MX_USART3_UART_Init+0x94>)
 8101f70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101f72:	4b21      	ldr	r3, [pc, #132]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101f78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101f7a:	4b1f      	ldr	r3, [pc, #124]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f7c:	2200      	movs	r2, #0
 8101f7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101f80:	4b1d      	ldr	r3, [pc, #116]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f82:	2200      	movs	r2, #0
 8101f84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101f86:	4b1c      	ldr	r3, [pc, #112]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f88:	2200      	movs	r2, #0
 8101f8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101f8c:	4b1a      	ldr	r3, [pc, #104]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f8e:	220c      	movs	r2, #12
 8101f90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101f92:	4b19      	ldr	r3, [pc, #100]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f94:	2200      	movs	r2, #0
 8101f96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101f98:	4b17      	ldr	r3, [pc, #92]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101f9a:	2200      	movs	r2, #0
 8101f9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101f9e:	4b16      	ldr	r3, [pc, #88]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fa0:	2200      	movs	r2, #0
 8101fa2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101fa4:	4b14      	ldr	r3, [pc, #80]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fa6:	2200      	movs	r2, #0
 8101fa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101faa:	4b13      	ldr	r3, [pc, #76]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fac:	2200      	movs	r2, #0
 8101fae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101fb0:	4811      	ldr	r0, [pc, #68]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fb2:	f005 fbf5 	bl	81077a0 <HAL_UART_Init>
 8101fb6:	4603      	mov	r3, r0
 8101fb8:	2b00      	cmp	r3, #0
 8101fba:	d001      	beq.n	8101fc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101fbc:	f7ff fbcc 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101fc0:	2100      	movs	r1, #0
 8101fc2:	480d      	ldr	r0, [pc, #52]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fc4:	f006 fd8d 	bl	8108ae2 <HAL_UARTEx_SetTxFifoThreshold>
 8101fc8:	4603      	mov	r3, r0
 8101fca:	2b00      	cmp	r3, #0
 8101fcc:	d001      	beq.n	8101fd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101fce:	f7ff fbc3 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101fd2:	2100      	movs	r1, #0
 8101fd4:	4808      	ldr	r0, [pc, #32]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fd6:	f006 fdc2 	bl	8108b5e <HAL_UARTEx_SetRxFifoThreshold>
 8101fda:	4603      	mov	r3, r0
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d001      	beq.n	8101fe4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101fe0:	f7ff fbba 	bl	8101758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101fe4:	4804      	ldr	r0, [pc, #16]	; (8101ff8 <MX_USART3_UART_Init+0x90>)
 8101fe6:	f006 fd43 	bl	8108a70 <HAL_UARTEx_DisableFifoMode>
 8101fea:	4603      	mov	r3, r0
 8101fec:	2b00      	cmp	r3, #0
 8101fee:	d001      	beq.n	8101ff4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101ff0:	f7ff fbb2 	bl	8101758 <Error_Handler>
  }

}
 8101ff4:	bf00      	nop
 8101ff6:	bd80      	pop	{r7, pc}
 8101ff8:	10009de4 	.word	0x10009de4
 8101ffc:	40004800 	.word	0x40004800

08102000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102000:	b580      	push	{r7, lr}
 8102002:	b08a      	sub	sp, #40	; 0x28
 8102004:	af00      	add	r7, sp, #0
 8102006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102008:	f107 0314 	add.w	r3, r7, #20
 810200c:	2200      	movs	r2, #0
 810200e:	601a      	str	r2, [r3, #0]
 8102010:	605a      	str	r2, [r3, #4]
 8102012:	609a      	str	r2, [r3, #8]
 8102014:	60da      	str	r2, [r3, #12]
 8102016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	4a49      	ldr	r2, [pc, #292]	; (8102144 <HAL_UART_MspInit+0x144>)
 810201e:	4293      	cmp	r3, r2
 8102020:	f040 808b 	bne.w	810213a <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102024:	4b48      	ldr	r3, [pc, #288]	; (8102148 <HAL_UART_MspInit+0x148>)
 8102026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810202a:	4a47      	ldr	r2, [pc, #284]	; (8102148 <HAL_UART_MspInit+0x148>)
 810202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102030:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102034:	4b44      	ldr	r3, [pc, #272]	; (8102148 <HAL_UART_MspInit+0x148>)
 8102036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810203a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810203e:	613b      	str	r3, [r7, #16]
 8102040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102042:	4b41      	ldr	r3, [pc, #260]	; (8102148 <HAL_UART_MspInit+0x148>)
 8102044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102048:	4a3f      	ldr	r2, [pc, #252]	; (8102148 <HAL_UART_MspInit+0x148>)
 810204a:	f043 0308 	orr.w	r3, r3, #8
 810204e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102052:	4b3d      	ldr	r3, [pc, #244]	; (8102148 <HAL_UART_MspInit+0x148>)
 8102054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102058:	f003 0308 	and.w	r3, r3, #8
 810205c:	60fb      	str	r3, [r7, #12]
 810205e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8102060:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102066:	2302      	movs	r3, #2
 8102068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810206a:	2300      	movs	r3, #0
 810206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810206e:	2300      	movs	r3, #0
 8102070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102072:	2307      	movs	r3, #7
 8102074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102076:	f107 0314 	add.w	r3, r7, #20
 810207a:	4619      	mov	r1, r3
 810207c:	4833      	ldr	r0, [pc, #204]	; (810214c <HAL_UART_MspInit+0x14c>)
 810207e:	f002 fd3f 	bl	8104b00 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8102082:	4b33      	ldr	r3, [pc, #204]	; (8102150 <HAL_UART_MspInit+0x150>)
 8102084:	4a33      	ldr	r2, [pc, #204]	; (8102154 <HAL_UART_MspInit+0x154>)
 8102086:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8102088:	4b31      	ldr	r3, [pc, #196]	; (8102150 <HAL_UART_MspInit+0x150>)
 810208a:	222d      	movs	r2, #45	; 0x2d
 810208c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810208e:	4b30      	ldr	r3, [pc, #192]	; (8102150 <HAL_UART_MspInit+0x150>)
 8102090:	2200      	movs	r2, #0
 8102092:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102094:	4b2e      	ldr	r3, [pc, #184]	; (8102150 <HAL_UART_MspInit+0x150>)
 8102096:	2200      	movs	r2, #0
 8102098:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 810209a:	4b2d      	ldr	r3, [pc, #180]	; (8102150 <HAL_UART_MspInit+0x150>)
 810209c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81020a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81020a2:	4b2b      	ldr	r3, [pc, #172]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020a4:	2200      	movs	r2, #0
 81020a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81020a8:	4b29      	ldr	r3, [pc, #164]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020aa:	2200      	movs	r2, #0
 81020ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 81020ae:	4b28      	ldr	r3, [pc, #160]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020b0:	2200      	movs	r2, #0
 81020b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 81020b4:	4b26      	ldr	r3, [pc, #152]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81020ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81020bc:	4b24      	ldr	r3, [pc, #144]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020be:	2200      	movs	r2, #0
 81020c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81020c2:	4823      	ldr	r0, [pc, #140]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020c4:	f000 fa02 	bl	81024cc <HAL_DMA_Init>
 81020c8:	4603      	mov	r3, r0
 81020ca:	2b00      	cmp	r3, #0
 81020cc:	d001      	beq.n	81020d2 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 81020ce:	f7ff fb43 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	4a1e      	ldr	r2, [pc, #120]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020d6:	679a      	str	r2, [r3, #120]	; 0x78
 81020d8:	4a1d      	ldr	r2, [pc, #116]	; (8102150 <HAL_UART_MspInit+0x150>)
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
 81020de:	4b1e      	ldr	r3, [pc, #120]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020e0:	4a1e      	ldr	r2, [pc, #120]	; (810215c <HAL_UART_MspInit+0x15c>)
 81020e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81020e4:	4b1c      	ldr	r3, [pc, #112]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020e6:	222e      	movs	r2, #46	; 0x2e
 81020e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81020ea:	4b1b      	ldr	r3, [pc, #108]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020ec:	2240      	movs	r2, #64	; 0x40
 81020ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81020f0:	4b19      	ldr	r3, [pc, #100]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020f2:	2200      	movs	r2, #0
 81020f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81020f6:	4b18      	ldr	r3, [pc, #96]	; (8102158 <HAL_UART_MspInit+0x158>)
 81020f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81020fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81020fe:	4b16      	ldr	r3, [pc, #88]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102100:	2200      	movs	r2, #0
 8102102:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102104:	4b14      	ldr	r3, [pc, #80]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102106:	2200      	movs	r2, #0
 8102108:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 810210a:	4b13      	ldr	r3, [pc, #76]	; (8102158 <HAL_UART_MspInit+0x158>)
 810210c:	2200      	movs	r2, #0
 810210e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8102110:	4b11      	ldr	r3, [pc, #68]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8102116:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102118:	4b0f      	ldr	r3, [pc, #60]	; (8102158 <HAL_UART_MspInit+0x158>)
 810211a:	2200      	movs	r2, #0
 810211c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 810211e:	480e      	ldr	r0, [pc, #56]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102120:	f000 f9d4 	bl	81024cc <HAL_DMA_Init>
 8102124:	4603      	mov	r3, r0
 8102126:	2b00      	cmp	r3, #0
 8102128:	d001      	beq.n	810212e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 810212a:	f7ff fb15 	bl	8101758 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	4a09      	ldr	r2, [pc, #36]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102132:	675a      	str	r2, [r3, #116]	; 0x74
 8102134:	4a08      	ldr	r2, [pc, #32]	; (8102158 <HAL_UART_MspInit+0x158>)
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 810213a:	bf00      	nop
 810213c:	3728      	adds	r7, #40	; 0x28
 810213e:	46bd      	mov	sp, r7
 8102140:	bd80      	pop	{r7, pc}
 8102142:	bf00      	nop
 8102144:	40004800 	.word	0x40004800
 8102148:	58024400 	.word	0x58024400
 810214c:	58020c00 	.word	0x58020c00
 8102150:	10009d6c 	.word	0x10009d6c
 8102154:	40020440 	.word	0x40020440
 8102158:	10009e70 	.word	0x10009e70
 810215c:	40020458 	.word	0x40020458

08102160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8102160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102198 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8102164:	f7fe ffd8 	bl	8101118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102168:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 810216a:	e003      	b.n	8102174 <LoopCopyDataInit>

0810216c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 810216c:	4b0b      	ldr	r3, [pc, #44]	; (810219c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 810216e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8102170:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8102172:	3104      	adds	r1, #4

08102174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8102174:	480a      	ldr	r0, [pc, #40]	; (81021a0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8102176:	4b0b      	ldr	r3, [pc, #44]	; (81021a4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8102178:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 810217a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 810217c:	d3f6      	bcc.n	810216c <CopyDataInit>
  ldr  r2, =_sbss
 810217e:	4a0a      	ldr	r2, [pc, #40]	; (81021a8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8102180:	e002      	b.n	8102188 <LoopFillZerobss>

08102182 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8102182:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8102184:	f842 3b04 	str.w	r3, [r2], #4

08102188 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8102188:	4b08      	ldr	r3, [pc, #32]	; (81021ac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 810218a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 810218c:	d3f9      	bcc.n	8102182 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 810218e:	f00e fc95 	bl	8110abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102192:	f7ff fa77 	bl	8101684 <main>
  bx  lr    
 8102196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102198:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 810219c:	081148c4 	.word	0x081148c4
  ldr  r0, =_sdata
 81021a0:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81021a4:	10000210 	.word	0x10000210
  ldr  r2, =_sbss
 81021a8:	10000210 	.word	0x10000210
  ldr  r3, = _ebss
 81021ac:	1000a370 	.word	0x1000a370

081021b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81021b0:	e7fe      	b.n	81021b0 <ADC3_IRQHandler>
	...

081021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81021b4:	b580      	push	{r7, lr}
 81021b6:	b082      	sub	sp, #8
 81021b8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81021ba:	4b28      	ldr	r3, [pc, #160]	; (810225c <HAL_Init+0xa8>)
 81021bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021c0:	4a26      	ldr	r2, [pc, #152]	; (810225c <HAL_Init+0xa8>)
 81021c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81021c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81021ca:	4b24      	ldr	r3, [pc, #144]	; (810225c <HAL_Init+0xa8>)
 81021cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81021d4:	603b      	str	r3, [r7, #0]
 81021d6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81021d8:	4b21      	ldr	r3, [pc, #132]	; (8102260 <HAL_Init+0xac>)
 81021da:	681b      	ldr	r3, [r3, #0]
 81021dc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81021e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81021e4:	4a1e      	ldr	r2, [pc, #120]	; (8102260 <HAL_Init+0xac>)
 81021e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81021ea:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81021ec:	4b1c      	ldr	r3, [pc, #112]	; (8102260 <HAL_Init+0xac>)
 81021ee:	681b      	ldr	r3, [r3, #0]
 81021f0:	4a1b      	ldr	r2, [pc, #108]	; (8102260 <HAL_Init+0xac>)
 81021f2:	f043 0301 	orr.w	r3, r3, #1
 81021f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81021f8:	2003      	movs	r0, #3
 81021fa:	f000 f91b 	bl	8102434 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81021fe:	f003 ffa1 	bl	8106144 <HAL_RCC_GetSysClockFreq>
 8102202:	4601      	mov	r1, r0
 8102204:	4b15      	ldr	r3, [pc, #84]	; (810225c <HAL_Init+0xa8>)
 8102206:	699b      	ldr	r3, [r3, #24]
 8102208:	0a1b      	lsrs	r3, r3, #8
 810220a:	f003 030f 	and.w	r3, r3, #15
 810220e:	4a15      	ldr	r2, [pc, #84]	; (8102264 <HAL_Init+0xb0>)
 8102210:	5cd3      	ldrb	r3, [r2, r3]
 8102212:	f003 031f 	and.w	r3, r3, #31
 8102216:	fa21 f303 	lsr.w	r3, r1, r3
 810221a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810221c:	4b0f      	ldr	r3, [pc, #60]	; (810225c <HAL_Init+0xa8>)
 810221e:	699b      	ldr	r3, [r3, #24]
 8102220:	f003 030f 	and.w	r3, r3, #15
 8102224:	4a0f      	ldr	r2, [pc, #60]	; (8102264 <HAL_Init+0xb0>)
 8102226:	5cd3      	ldrb	r3, [r2, r3]
 8102228:	f003 031f 	and.w	r3, r3, #31
 810222c:	687a      	ldr	r2, [r7, #4]
 810222e:	fa22 f303 	lsr.w	r3, r2, r3
 8102232:	4a0d      	ldr	r2, [pc, #52]	; (8102268 <HAL_Init+0xb4>)
 8102234:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102236:	4b0c      	ldr	r3, [pc, #48]	; (8102268 <HAL_Init+0xb4>)
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	4a0c      	ldr	r2, [pc, #48]	; (810226c <HAL_Init+0xb8>)
 810223c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810223e:	2000      	movs	r0, #0
 8102240:	f7ff fd18 	bl	8101c74 <HAL_InitTick>
 8102244:	4603      	mov	r3, r0
 8102246:	2b00      	cmp	r3, #0
 8102248:	d001      	beq.n	810224e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810224a:	2301      	movs	r3, #1
 810224c:	e002      	b.n	8102254 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810224e:	f7ff fcf3 	bl	8101c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102252:	2300      	movs	r3, #0
}
 8102254:	4618      	mov	r0, r3
 8102256:	3708      	adds	r7, #8
 8102258:	46bd      	mov	sp, r7
 810225a:	bd80      	pop	{r7, pc}
 810225c:	58024400 	.word	0x58024400
 8102260:	40024400 	.word	0x40024400
 8102264:	08113fdc 	.word	0x08113fdc
 8102268:	10000004 	.word	0x10000004
 810226c:	10000000 	.word	0x10000000

08102270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102270:	b480      	push	{r7}
 8102272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102274:	4b06      	ldr	r3, [pc, #24]	; (8102290 <HAL_IncTick+0x20>)
 8102276:	781b      	ldrb	r3, [r3, #0]
 8102278:	461a      	mov	r2, r3
 810227a:	4b06      	ldr	r3, [pc, #24]	; (8102294 <HAL_IncTick+0x24>)
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	4413      	add	r3, r2
 8102280:	4a04      	ldr	r2, [pc, #16]	; (8102294 <HAL_IncTick+0x24>)
 8102282:	6013      	str	r3, [r2, #0]
}
 8102284:	bf00      	nop
 8102286:	46bd      	mov	sp, r7
 8102288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228c:	4770      	bx	lr
 810228e:	bf00      	nop
 8102290:	1000000c 	.word	0x1000000c
 8102294:	10009ee8 	.word	0x10009ee8

08102298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102298:	b480      	push	{r7}
 810229a:	af00      	add	r7, sp, #0
  return uwTick;
 810229c:	4b03      	ldr	r3, [pc, #12]	; (81022ac <HAL_GetTick+0x14>)
 810229e:	681b      	ldr	r3, [r3, #0]
}
 81022a0:	4618      	mov	r0, r3
 81022a2:	46bd      	mov	sp, r7
 81022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a8:	4770      	bx	lr
 81022aa:	bf00      	nop
 81022ac:	10009ee8 	.word	0x10009ee8

081022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81022b0:	b480      	push	{r7}
 81022b2:	b085      	sub	sp, #20
 81022b4:	af00      	add	r7, sp, #0
 81022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	f003 0307 	and.w	r3, r3, #7
 81022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81022c0:	4b0c      	ldr	r3, [pc, #48]	; (81022f4 <__NVIC_SetPriorityGrouping+0x44>)
 81022c2:	68db      	ldr	r3, [r3, #12]
 81022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81022c6:	68ba      	ldr	r2, [r7, #8]
 81022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81022cc:	4013      	ands	r3, r2
 81022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81022d0:	68fb      	ldr	r3, [r7, #12]
 81022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81022d4:	68bb      	ldr	r3, [r7, #8]
 81022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81022e2:	4a04      	ldr	r2, [pc, #16]	; (81022f4 <__NVIC_SetPriorityGrouping+0x44>)
 81022e4:	68bb      	ldr	r3, [r7, #8]
 81022e6:	60d3      	str	r3, [r2, #12]
}
 81022e8:	bf00      	nop
 81022ea:	3714      	adds	r7, #20
 81022ec:	46bd      	mov	sp, r7
 81022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f2:	4770      	bx	lr
 81022f4:	e000ed00 	.word	0xe000ed00

081022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81022f8:	b480      	push	{r7}
 81022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81022fc:	4b04      	ldr	r3, [pc, #16]	; (8102310 <__NVIC_GetPriorityGrouping+0x18>)
 81022fe:	68db      	ldr	r3, [r3, #12]
 8102300:	0a1b      	lsrs	r3, r3, #8
 8102302:	f003 0307 	and.w	r3, r3, #7
}
 8102306:	4618      	mov	r0, r3
 8102308:	46bd      	mov	sp, r7
 810230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810230e:	4770      	bx	lr
 8102310:	e000ed00 	.word	0xe000ed00

08102314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102314:	b480      	push	{r7}
 8102316:	b083      	sub	sp, #12
 8102318:	af00      	add	r7, sp, #0
 810231a:	4603      	mov	r3, r0
 810231c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810231e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102322:	2b00      	cmp	r3, #0
 8102324:	db0b      	blt.n	810233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102326:	88fb      	ldrh	r3, [r7, #6]
 8102328:	f003 021f 	and.w	r2, r3, #31
 810232c:	4907      	ldr	r1, [pc, #28]	; (810234c <__NVIC_EnableIRQ+0x38>)
 810232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102332:	095b      	lsrs	r3, r3, #5
 8102334:	2001      	movs	r0, #1
 8102336:	fa00 f202 	lsl.w	r2, r0, r2
 810233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 810233e:	bf00      	nop
 8102340:	370c      	adds	r7, #12
 8102342:	46bd      	mov	sp, r7
 8102344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102348:	4770      	bx	lr
 810234a:	bf00      	nop
 810234c:	e000e100 	.word	0xe000e100

08102350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102350:	b480      	push	{r7}
 8102352:	b083      	sub	sp, #12
 8102354:	af00      	add	r7, sp, #0
 8102356:	4603      	mov	r3, r0
 8102358:	6039      	str	r1, [r7, #0]
 810235a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810235c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102360:	2b00      	cmp	r3, #0
 8102362:	db0a      	blt.n	810237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102364:	683b      	ldr	r3, [r7, #0]
 8102366:	b2da      	uxtb	r2, r3
 8102368:	490c      	ldr	r1, [pc, #48]	; (810239c <__NVIC_SetPriority+0x4c>)
 810236a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810236e:	0112      	lsls	r2, r2, #4
 8102370:	b2d2      	uxtb	r2, r2
 8102372:	440b      	add	r3, r1
 8102374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102378:	e00a      	b.n	8102390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810237a:	683b      	ldr	r3, [r7, #0]
 810237c:	b2da      	uxtb	r2, r3
 810237e:	4908      	ldr	r1, [pc, #32]	; (81023a0 <__NVIC_SetPriority+0x50>)
 8102380:	88fb      	ldrh	r3, [r7, #6]
 8102382:	f003 030f 	and.w	r3, r3, #15
 8102386:	3b04      	subs	r3, #4
 8102388:	0112      	lsls	r2, r2, #4
 810238a:	b2d2      	uxtb	r2, r2
 810238c:	440b      	add	r3, r1
 810238e:	761a      	strb	r2, [r3, #24]
}
 8102390:	bf00      	nop
 8102392:	370c      	adds	r7, #12
 8102394:	46bd      	mov	sp, r7
 8102396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239a:	4770      	bx	lr
 810239c:	e000e100 	.word	0xe000e100
 81023a0:	e000ed00 	.word	0xe000ed00

081023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81023a4:	b480      	push	{r7}
 81023a6:	b089      	sub	sp, #36	; 0x24
 81023a8:	af00      	add	r7, sp, #0
 81023aa:	60f8      	str	r0, [r7, #12]
 81023ac:	60b9      	str	r1, [r7, #8]
 81023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81023b0:	68fb      	ldr	r3, [r7, #12]
 81023b2:	f003 0307 	and.w	r3, r3, #7
 81023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81023b8:	69fb      	ldr	r3, [r7, #28]
 81023ba:	f1c3 0307 	rsb	r3, r3, #7
 81023be:	2b04      	cmp	r3, #4
 81023c0:	bf28      	it	cs
 81023c2:	2304      	movcs	r3, #4
 81023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81023c6:	69fb      	ldr	r3, [r7, #28]
 81023c8:	3304      	adds	r3, #4
 81023ca:	2b06      	cmp	r3, #6
 81023cc:	d902      	bls.n	81023d4 <NVIC_EncodePriority+0x30>
 81023ce:	69fb      	ldr	r3, [r7, #28]
 81023d0:	3b03      	subs	r3, #3
 81023d2:	e000      	b.n	81023d6 <NVIC_EncodePriority+0x32>
 81023d4:	2300      	movs	r3, #0
 81023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023d8:	f04f 32ff 	mov.w	r2, #4294967295
 81023dc:	69bb      	ldr	r3, [r7, #24]
 81023de:	fa02 f303 	lsl.w	r3, r2, r3
 81023e2:	43da      	mvns	r2, r3
 81023e4:	68bb      	ldr	r3, [r7, #8]
 81023e6:	401a      	ands	r2, r3
 81023e8:	697b      	ldr	r3, [r7, #20]
 81023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81023ec:	f04f 31ff 	mov.w	r1, #4294967295
 81023f0:	697b      	ldr	r3, [r7, #20]
 81023f2:	fa01 f303 	lsl.w	r3, r1, r3
 81023f6:	43d9      	mvns	r1, r3
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023fc:	4313      	orrs	r3, r2
         );
}
 81023fe:	4618      	mov	r0, r3
 8102400:	3724      	adds	r7, #36	; 0x24
 8102402:	46bd      	mov	sp, r7
 8102404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102408:	4770      	bx	lr
	...

0810240c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 810240c:	b480      	push	{r7}
 810240e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102410:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8102414:	4b05      	ldr	r3, [pc, #20]	; (810242c <__NVIC_SystemReset+0x20>)
 8102416:	68db      	ldr	r3, [r3, #12]
 8102418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 810241c:	4903      	ldr	r1, [pc, #12]	; (810242c <__NVIC_SystemReset+0x20>)
 810241e:	4b04      	ldr	r3, [pc, #16]	; (8102430 <__NVIC_SystemReset+0x24>)
 8102420:	4313      	orrs	r3, r2
 8102422:	60cb      	str	r3, [r1, #12]
 8102424:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8102428:	bf00      	nop
 810242a:	e7fd      	b.n	8102428 <__NVIC_SystemReset+0x1c>
 810242c:	e000ed00 	.word	0xe000ed00
 8102430:	05fa0004 	.word	0x05fa0004

08102434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102434:	b580      	push	{r7, lr}
 8102436:	b082      	sub	sp, #8
 8102438:	af00      	add	r7, sp, #0
 810243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810243c:	6878      	ldr	r0, [r7, #4]
 810243e:	f7ff ff37 	bl	81022b0 <__NVIC_SetPriorityGrouping>
}
 8102442:	bf00      	nop
 8102444:	3708      	adds	r7, #8
 8102446:	46bd      	mov	sp, r7
 8102448:	bd80      	pop	{r7, pc}

0810244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810244a:	b580      	push	{r7, lr}
 810244c:	b086      	sub	sp, #24
 810244e:	af00      	add	r7, sp, #0
 8102450:	4603      	mov	r3, r0
 8102452:	60b9      	str	r1, [r7, #8]
 8102454:	607a      	str	r2, [r7, #4]
 8102456:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102458:	f7ff ff4e 	bl	81022f8 <__NVIC_GetPriorityGrouping>
 810245c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810245e:	687a      	ldr	r2, [r7, #4]
 8102460:	68b9      	ldr	r1, [r7, #8]
 8102462:	6978      	ldr	r0, [r7, #20]
 8102464:	f7ff ff9e 	bl	81023a4 <NVIC_EncodePriority>
 8102468:	4602      	mov	r2, r0
 810246a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810246e:	4611      	mov	r1, r2
 8102470:	4618      	mov	r0, r3
 8102472:	f7ff ff6d 	bl	8102350 <__NVIC_SetPriority>
}
 8102476:	bf00      	nop
 8102478:	3718      	adds	r7, #24
 810247a:	46bd      	mov	sp, r7
 810247c:	bd80      	pop	{r7, pc}

0810247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810247e:	b580      	push	{r7, lr}
 8102480:	b082      	sub	sp, #8
 8102482:	af00      	add	r7, sp, #0
 8102484:	4603      	mov	r3, r0
 8102486:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810248c:	4618      	mov	r0, r3
 810248e:	f7ff ff41 	bl	8102314 <__NVIC_EnableIRQ>
}
 8102492:	bf00      	nop
 8102494:	3708      	adds	r7, #8
 8102496:	46bd      	mov	sp, r7
 8102498:	bd80      	pop	{r7, pc}

0810249a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 810249a:	b580      	push	{r7, lr}
 810249c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 810249e:	f7ff ffb5 	bl	810240c <__NVIC_SystemReset>
	...

081024a4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81024a4:	b480      	push	{r7}
 81024a6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81024a8:	4b07      	ldr	r3, [pc, #28]	; (81024c8 <HAL_GetCurrentCPUID+0x24>)
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	091b      	lsrs	r3, r3, #4
 81024ae:	f003 030f 	and.w	r3, r3, #15
 81024b2:	2b07      	cmp	r3, #7
 81024b4:	d101      	bne.n	81024ba <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81024b6:	2303      	movs	r3, #3
 81024b8:	e000      	b.n	81024bc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81024ba:	2301      	movs	r3, #1
  }
}
 81024bc:	4618      	mov	r0, r3
 81024be:	46bd      	mov	sp, r7
 81024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024c4:	4770      	bx	lr
 81024c6:	bf00      	nop
 81024c8:	e000ed00 	.word	0xe000ed00

081024cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81024cc:	b580      	push	{r7, lr}
 81024ce:	b086      	sub	sp, #24
 81024d0:	af00      	add	r7, sp, #0
 81024d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81024d4:	f7ff fee0 	bl	8102298 <HAL_GetTick>
 81024d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	2b00      	cmp	r3, #0
 81024de:	d101      	bne.n	81024e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81024e0:	2301      	movs	r3, #1
 81024e2:	e314      	b.n	8102b0e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	4a66      	ldr	r2, [pc, #408]	; (8102684 <HAL_DMA_Init+0x1b8>)
 81024ea:	4293      	cmp	r3, r2
 81024ec:	d04a      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	4a65      	ldr	r2, [pc, #404]	; (8102688 <HAL_DMA_Init+0x1bc>)
 81024f4:	4293      	cmp	r3, r2
 81024f6:	d045      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	4a63      	ldr	r2, [pc, #396]	; (810268c <HAL_DMA_Init+0x1c0>)
 81024fe:	4293      	cmp	r3, r2
 8102500:	d040      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	4a62      	ldr	r2, [pc, #392]	; (8102690 <HAL_DMA_Init+0x1c4>)
 8102508:	4293      	cmp	r3, r2
 810250a:	d03b      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	4a60      	ldr	r2, [pc, #384]	; (8102694 <HAL_DMA_Init+0x1c8>)
 8102512:	4293      	cmp	r3, r2
 8102514:	d036      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	4a5f      	ldr	r2, [pc, #380]	; (8102698 <HAL_DMA_Init+0x1cc>)
 810251c:	4293      	cmp	r3, r2
 810251e:	d031      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	4a5d      	ldr	r2, [pc, #372]	; (810269c <HAL_DMA_Init+0x1d0>)
 8102526:	4293      	cmp	r3, r2
 8102528:	d02c      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	4a5c      	ldr	r2, [pc, #368]	; (81026a0 <HAL_DMA_Init+0x1d4>)
 8102530:	4293      	cmp	r3, r2
 8102532:	d027      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	4a5a      	ldr	r2, [pc, #360]	; (81026a4 <HAL_DMA_Init+0x1d8>)
 810253a:	4293      	cmp	r3, r2
 810253c:	d022      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	681b      	ldr	r3, [r3, #0]
 8102542:	4a59      	ldr	r2, [pc, #356]	; (81026a8 <HAL_DMA_Init+0x1dc>)
 8102544:	4293      	cmp	r3, r2
 8102546:	d01d      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	681b      	ldr	r3, [r3, #0]
 810254c:	4a57      	ldr	r2, [pc, #348]	; (81026ac <HAL_DMA_Init+0x1e0>)
 810254e:	4293      	cmp	r3, r2
 8102550:	d018      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	4a56      	ldr	r2, [pc, #344]	; (81026b0 <HAL_DMA_Init+0x1e4>)
 8102558:	4293      	cmp	r3, r2
 810255a:	d013      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	4a54      	ldr	r2, [pc, #336]	; (81026b4 <HAL_DMA_Init+0x1e8>)
 8102562:	4293      	cmp	r3, r2
 8102564:	d00e      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	4a53      	ldr	r2, [pc, #332]	; (81026b8 <HAL_DMA_Init+0x1ec>)
 810256c:	4293      	cmp	r3, r2
 810256e:	d009      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	4a51      	ldr	r2, [pc, #324]	; (81026bc <HAL_DMA_Init+0x1f0>)
 8102576:	4293      	cmp	r3, r2
 8102578:	d004      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	681b      	ldr	r3, [r3, #0]
 810257e:	4a50      	ldr	r2, [pc, #320]	; (81026c0 <HAL_DMA_Init+0x1f4>)
 8102580:	4293      	cmp	r3, r2
 8102582:	d101      	bne.n	8102588 <HAL_DMA_Init+0xbc>
 8102584:	2301      	movs	r3, #1
 8102586:	e000      	b.n	810258a <HAL_DMA_Init+0xbe>
 8102588:	2300      	movs	r3, #0
 810258a:	2b00      	cmp	r3, #0
 810258c:	f000 813b 	beq.w	8102806 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	2200      	movs	r2, #0
 8102594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	2202      	movs	r2, #2
 810259c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	4a37      	ldr	r2, [pc, #220]	; (8102684 <HAL_DMA_Init+0x1b8>)
 81025a6:	4293      	cmp	r3, r2
 81025a8:	d04a      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	4a36      	ldr	r2, [pc, #216]	; (8102688 <HAL_DMA_Init+0x1bc>)
 81025b0:	4293      	cmp	r3, r2
 81025b2:	d045      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	4a34      	ldr	r2, [pc, #208]	; (810268c <HAL_DMA_Init+0x1c0>)
 81025ba:	4293      	cmp	r3, r2
 81025bc:	d040      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	4a33      	ldr	r2, [pc, #204]	; (8102690 <HAL_DMA_Init+0x1c4>)
 81025c4:	4293      	cmp	r3, r2
 81025c6:	d03b      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	4a31      	ldr	r2, [pc, #196]	; (8102694 <HAL_DMA_Init+0x1c8>)
 81025ce:	4293      	cmp	r3, r2
 81025d0:	d036      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	4a30      	ldr	r2, [pc, #192]	; (8102698 <HAL_DMA_Init+0x1cc>)
 81025d8:	4293      	cmp	r3, r2
 81025da:	d031      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	4a2e      	ldr	r2, [pc, #184]	; (810269c <HAL_DMA_Init+0x1d0>)
 81025e2:	4293      	cmp	r3, r2
 81025e4:	d02c      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	4a2d      	ldr	r2, [pc, #180]	; (81026a0 <HAL_DMA_Init+0x1d4>)
 81025ec:	4293      	cmp	r3, r2
 81025ee:	d027      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	4a2b      	ldr	r2, [pc, #172]	; (81026a4 <HAL_DMA_Init+0x1d8>)
 81025f6:	4293      	cmp	r3, r2
 81025f8:	d022      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	681b      	ldr	r3, [r3, #0]
 81025fe:	4a2a      	ldr	r2, [pc, #168]	; (81026a8 <HAL_DMA_Init+0x1dc>)
 8102600:	4293      	cmp	r3, r2
 8102602:	d01d      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	4a28      	ldr	r2, [pc, #160]	; (81026ac <HAL_DMA_Init+0x1e0>)
 810260a:	4293      	cmp	r3, r2
 810260c:	d018      	beq.n	8102640 <HAL_DMA_Init+0x174>
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	4a27      	ldr	r2, [pc, #156]	; (81026b0 <HAL_DMA_Init+0x1e4>)
 8102614:	4293      	cmp	r3, r2
 8102616:	d013      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	4a25      	ldr	r2, [pc, #148]	; (81026b4 <HAL_DMA_Init+0x1e8>)
 810261e:	4293      	cmp	r3, r2
 8102620:	d00e      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	681b      	ldr	r3, [r3, #0]
 8102626:	4a24      	ldr	r2, [pc, #144]	; (81026b8 <HAL_DMA_Init+0x1ec>)
 8102628:	4293      	cmp	r3, r2
 810262a:	d009      	beq.n	8102640 <HAL_DMA_Init+0x174>
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	4a22      	ldr	r2, [pc, #136]	; (81026bc <HAL_DMA_Init+0x1f0>)
 8102632:	4293      	cmp	r3, r2
 8102634:	d004      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	4a21      	ldr	r2, [pc, #132]	; (81026c0 <HAL_DMA_Init+0x1f4>)
 810263c:	4293      	cmp	r3, r2
 810263e:	d108      	bne.n	8102652 <HAL_DMA_Init+0x186>
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	681a      	ldr	r2, [r3, #0]
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	681b      	ldr	r3, [r3, #0]
 810264a:	f022 0201 	bic.w	r2, r2, #1
 810264e:	601a      	str	r2, [r3, #0]
 8102650:	e007      	b.n	8102662 <HAL_DMA_Init+0x196>
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	681a      	ldr	r2, [r3, #0]
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	f022 0201 	bic.w	r2, r2, #1
 8102660:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102662:	e02f      	b.n	81026c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102664:	f7ff fe18 	bl	8102298 <HAL_GetTick>
 8102668:	4602      	mov	r2, r0
 810266a:	693b      	ldr	r3, [r7, #16]
 810266c:	1ad3      	subs	r3, r2, r3
 810266e:	2b05      	cmp	r3, #5
 8102670:	d928      	bls.n	81026c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	2220      	movs	r2, #32
 8102676:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	2203      	movs	r2, #3
 810267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102680:	2301      	movs	r3, #1
 8102682:	e244      	b.n	8102b0e <HAL_DMA_Init+0x642>
 8102684:	40020010 	.word	0x40020010
 8102688:	40020028 	.word	0x40020028
 810268c:	40020040 	.word	0x40020040
 8102690:	40020058 	.word	0x40020058
 8102694:	40020070 	.word	0x40020070
 8102698:	40020088 	.word	0x40020088
 810269c:	400200a0 	.word	0x400200a0
 81026a0:	400200b8 	.word	0x400200b8
 81026a4:	40020410 	.word	0x40020410
 81026a8:	40020428 	.word	0x40020428
 81026ac:	40020440 	.word	0x40020440
 81026b0:	40020458 	.word	0x40020458
 81026b4:	40020470 	.word	0x40020470
 81026b8:	40020488 	.word	0x40020488
 81026bc:	400204a0 	.word	0x400204a0
 81026c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	f003 0301 	and.w	r3, r3, #1
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d1c8      	bne.n	8102664 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81026d2:	687b      	ldr	r3, [r7, #4]
 81026d4:	681b      	ldr	r3, [r3, #0]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81026da:	697a      	ldr	r2, [r7, #20]
 81026dc:	4b84      	ldr	r3, [pc, #528]	; (81028f0 <HAL_DMA_Init+0x424>)
 81026de:	4013      	ands	r3, r2
 81026e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81026ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026ec:	687b      	ldr	r3, [r7, #4]
 81026ee:	691b      	ldr	r3, [r3, #16]
 81026f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	699b      	ldr	r3, [r3, #24]
 81026fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102702:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	6a1b      	ldr	r3, [r3, #32]
 8102708:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810270a:	697a      	ldr	r2, [r7, #20]
 810270c:	4313      	orrs	r3, r2
 810270e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102714:	2b04      	cmp	r3, #4
 8102716:	d107      	bne.n	8102728 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102720:	4313      	orrs	r3, r2
 8102722:	697a      	ldr	r2, [r7, #20]
 8102724:	4313      	orrs	r3, r2
 8102726:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102728:	4b72      	ldr	r3, [pc, #456]	; (81028f4 <HAL_DMA_Init+0x428>)
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	0c1b      	lsrs	r3, r3, #16
 810272e:	041b      	lsls	r3, r3, #16
 8102730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102734:	d328      	bcc.n	8102788 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	685b      	ldr	r3, [r3, #4]
 810273a:	2b28      	cmp	r3, #40	; 0x28
 810273c:	d903      	bls.n	8102746 <HAL_DMA_Init+0x27a>
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	685b      	ldr	r3, [r3, #4]
 8102742:	2b2e      	cmp	r3, #46	; 0x2e
 8102744:	d917      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	685b      	ldr	r3, [r3, #4]
 810274a:	2b3e      	cmp	r3, #62	; 0x3e
 810274c:	d903      	bls.n	8102756 <HAL_DMA_Init+0x28a>
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	685b      	ldr	r3, [r3, #4]
 8102752:	2b42      	cmp	r3, #66	; 0x42
 8102754:	d90f      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	685b      	ldr	r3, [r3, #4]
 810275a:	2b46      	cmp	r3, #70	; 0x46
 810275c:	d903      	bls.n	8102766 <HAL_DMA_Init+0x29a>
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	685b      	ldr	r3, [r3, #4]
 8102762:	2b48      	cmp	r3, #72	; 0x48
 8102764:	d907      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	685b      	ldr	r3, [r3, #4]
 810276a:	2b4e      	cmp	r3, #78	; 0x4e
 810276c:	d905      	bls.n	810277a <HAL_DMA_Init+0x2ae>
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	685b      	ldr	r3, [r3, #4]
 8102772:	2b52      	cmp	r3, #82	; 0x52
 8102774:	d801      	bhi.n	810277a <HAL_DMA_Init+0x2ae>
 8102776:	2301      	movs	r3, #1
 8102778:	e000      	b.n	810277c <HAL_DMA_Init+0x2b0>
 810277a:	2300      	movs	r3, #0
 810277c:	2b00      	cmp	r3, #0
 810277e:	d003      	beq.n	8102788 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102780:	697b      	ldr	r3, [r7, #20]
 8102782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102786:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	697a      	ldr	r2, [r7, #20]
 810278e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	695b      	ldr	r3, [r3, #20]
 8102796:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102798:	697b      	ldr	r3, [r7, #20]
 810279a:	f023 0307 	bic.w	r3, r3, #7
 810279e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027a4:	697a      	ldr	r2, [r7, #20]
 81027a6:	4313      	orrs	r3, r2
 81027a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027ae:	2b04      	cmp	r3, #4
 81027b0:	d117      	bne.n	81027e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027b6:	697a      	ldr	r2, [r7, #20]
 81027b8:	4313      	orrs	r3, r2
 81027ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027c0:	2b00      	cmp	r3, #0
 81027c2:	d00e      	beq.n	81027e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81027c4:	6878      	ldr	r0, [r7, #4]
 81027c6:	f002 f811 	bl	81047ec <DMA_CheckFifoParam>
 81027ca:	4603      	mov	r3, r0
 81027cc:	2b00      	cmp	r3, #0
 81027ce:	d008      	beq.n	81027e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	2240      	movs	r2, #64	; 0x40
 81027d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	2201      	movs	r2, #1
 81027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81027de:	2301      	movs	r3, #1
 81027e0:	e195      	b.n	8102b0e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	681b      	ldr	r3, [r3, #0]
 81027e6:	697a      	ldr	r2, [r7, #20]
 81027e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81027ea:	6878      	ldr	r0, [r7, #4]
 81027ec:	f001 ff4c 	bl	8104688 <DMA_CalcBaseAndBitshift>
 81027f0:	4603      	mov	r3, r0
 81027f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81027f8:	f003 031f 	and.w	r3, r3, #31
 81027fc:	223f      	movs	r2, #63	; 0x3f
 81027fe:	409a      	lsls	r2, r3
 8102800:	68bb      	ldr	r3, [r7, #8]
 8102802:	609a      	str	r2, [r3, #8]
 8102804:	e0cb      	b.n	810299e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	4a3b      	ldr	r2, [pc, #236]	; (81028f8 <HAL_DMA_Init+0x42c>)
 810280c:	4293      	cmp	r3, r2
 810280e:	d022      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	4a39      	ldr	r2, [pc, #228]	; (81028fc <HAL_DMA_Init+0x430>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d01d      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	4a38      	ldr	r2, [pc, #224]	; (8102900 <HAL_DMA_Init+0x434>)
 8102820:	4293      	cmp	r3, r2
 8102822:	d018      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	4a36      	ldr	r2, [pc, #216]	; (8102904 <HAL_DMA_Init+0x438>)
 810282a:	4293      	cmp	r3, r2
 810282c:	d013      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	4a35      	ldr	r2, [pc, #212]	; (8102908 <HAL_DMA_Init+0x43c>)
 8102834:	4293      	cmp	r3, r2
 8102836:	d00e      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	4a33      	ldr	r2, [pc, #204]	; (810290c <HAL_DMA_Init+0x440>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d009      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	4a32      	ldr	r2, [pc, #200]	; (8102910 <HAL_DMA_Init+0x444>)
 8102848:	4293      	cmp	r3, r2
 810284a:	d004      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	4a30      	ldr	r2, [pc, #192]	; (8102914 <HAL_DMA_Init+0x448>)
 8102852:	4293      	cmp	r3, r2
 8102854:	d101      	bne.n	810285a <HAL_DMA_Init+0x38e>
 8102856:	2301      	movs	r3, #1
 8102858:	e000      	b.n	810285c <HAL_DMA_Init+0x390>
 810285a:	2300      	movs	r3, #0
 810285c:	2b00      	cmp	r3, #0
 810285e:	f000 8095 	beq.w	810298c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	4a24      	ldr	r2, [pc, #144]	; (81028f8 <HAL_DMA_Init+0x42c>)
 8102868:	4293      	cmp	r3, r2
 810286a:	d021      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	4a22      	ldr	r2, [pc, #136]	; (81028fc <HAL_DMA_Init+0x430>)
 8102872:	4293      	cmp	r3, r2
 8102874:	d01c      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	4a21      	ldr	r2, [pc, #132]	; (8102900 <HAL_DMA_Init+0x434>)
 810287c:	4293      	cmp	r3, r2
 810287e:	d017      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	4a1f      	ldr	r2, [pc, #124]	; (8102904 <HAL_DMA_Init+0x438>)
 8102886:	4293      	cmp	r3, r2
 8102888:	d012      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	4a1e      	ldr	r2, [pc, #120]	; (8102908 <HAL_DMA_Init+0x43c>)
 8102890:	4293      	cmp	r3, r2
 8102892:	d00d      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	4a1c      	ldr	r2, [pc, #112]	; (810290c <HAL_DMA_Init+0x440>)
 810289a:	4293      	cmp	r3, r2
 810289c:	d008      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	681b      	ldr	r3, [r3, #0]
 81028a2:	4a1b      	ldr	r2, [pc, #108]	; (8102910 <HAL_DMA_Init+0x444>)
 81028a4:	4293      	cmp	r3, r2
 81028a6:	d003      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	4a19      	ldr	r2, [pc, #100]	; (8102914 <HAL_DMA_Init+0x448>)
 81028ae:	4293      	cmp	r3, r2
 81028b0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	2200      	movs	r2, #0
 81028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	2202      	movs	r2, #2
 81028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81028ca:	697b      	ldr	r3, [r7, #20]
 81028cc:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81028d0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81028d4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	689b      	ldr	r3, [r3, #8]
 81028da:	2b40      	cmp	r3, #64	; 0x40
 81028dc:	d01c      	beq.n	8102918 <HAL_DMA_Init+0x44c>
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	689b      	ldr	r3, [r3, #8]
 81028e2:	2b80      	cmp	r3, #128	; 0x80
 81028e4:	d102      	bne.n	81028ec <HAL_DMA_Init+0x420>
 81028e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81028ea:	e016      	b.n	810291a <HAL_DMA_Init+0x44e>
 81028ec:	2300      	movs	r3, #0
 81028ee:	e014      	b.n	810291a <HAL_DMA_Init+0x44e>
 81028f0:	fe10803f 	.word	0xfe10803f
 81028f4:	5c001000 	.word	0x5c001000
 81028f8:	58025408 	.word	0x58025408
 81028fc:	5802541c 	.word	0x5802541c
 8102900:	58025430 	.word	0x58025430
 8102904:	58025444 	.word	0x58025444
 8102908:	58025458 	.word	0x58025458
 810290c:	5802546c 	.word	0x5802546c
 8102910:	58025480 	.word	0x58025480
 8102914:	58025494 	.word	0x58025494
 8102918:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810291a:	687a      	ldr	r2, [r7, #4]
 810291c:	68d2      	ldr	r2, [r2, #12]
 810291e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	691b      	ldr	r3, [r3, #16]
 8102926:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	695b      	ldr	r3, [r3, #20]
 810292e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	699b      	ldr	r3, [r3, #24]
 8102936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	69db      	ldr	r3, [r3, #28]
 810293e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	6a1b      	ldr	r3, [r3, #32]
 8102946:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102948:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810294a:	697a      	ldr	r2, [r7, #20]
 810294c:	4313      	orrs	r3, r2
 810294e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	697a      	ldr	r2, [r7, #20]
 8102956:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	461a      	mov	r2, r3
 810295e:	4b6e      	ldr	r3, [pc, #440]	; (8102b18 <HAL_DMA_Init+0x64c>)
 8102960:	4413      	add	r3, r2
 8102962:	4a6e      	ldr	r2, [pc, #440]	; (8102b1c <HAL_DMA_Init+0x650>)
 8102964:	fba2 2303 	umull	r2, r3, r2, r3
 8102968:	091b      	lsrs	r3, r3, #4
 810296a:	009a      	lsls	r2, r3, #2
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102970:	6878      	ldr	r0, [r7, #4]
 8102972:	f001 fe89 	bl	8104688 <DMA_CalcBaseAndBitshift>
 8102976:	4603      	mov	r3, r0
 8102978:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810297e:	f003 031f 	and.w	r3, r3, #31
 8102982:	2201      	movs	r2, #1
 8102984:	409a      	lsls	r2, r3
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	605a      	str	r2, [r3, #4]
 810298a:	e008      	b.n	810299e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	2240      	movs	r2, #64	; 0x40
 8102990:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	2203      	movs	r2, #3
 8102996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 810299a:	2301      	movs	r3, #1
 810299c:	e0b7      	b.n	8102b0e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	4a5f      	ldr	r2, [pc, #380]	; (8102b20 <HAL_DMA_Init+0x654>)
 81029a4:	4293      	cmp	r3, r2
 81029a6:	d072      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	4a5d      	ldr	r2, [pc, #372]	; (8102b24 <HAL_DMA_Init+0x658>)
 81029ae:	4293      	cmp	r3, r2
 81029b0:	d06d      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	681b      	ldr	r3, [r3, #0]
 81029b6:	4a5c      	ldr	r2, [pc, #368]	; (8102b28 <HAL_DMA_Init+0x65c>)
 81029b8:	4293      	cmp	r3, r2
 81029ba:	d068      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	4a5a      	ldr	r2, [pc, #360]	; (8102b2c <HAL_DMA_Init+0x660>)
 81029c2:	4293      	cmp	r3, r2
 81029c4:	d063      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	4a59      	ldr	r2, [pc, #356]	; (8102b30 <HAL_DMA_Init+0x664>)
 81029cc:	4293      	cmp	r3, r2
 81029ce:	d05e      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	4a57      	ldr	r2, [pc, #348]	; (8102b34 <HAL_DMA_Init+0x668>)
 81029d6:	4293      	cmp	r3, r2
 81029d8:	d059      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	4a56      	ldr	r2, [pc, #344]	; (8102b38 <HAL_DMA_Init+0x66c>)
 81029e0:	4293      	cmp	r3, r2
 81029e2:	d054      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	681b      	ldr	r3, [r3, #0]
 81029e8:	4a54      	ldr	r2, [pc, #336]	; (8102b3c <HAL_DMA_Init+0x670>)
 81029ea:	4293      	cmp	r3, r2
 81029ec:	d04f      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	681b      	ldr	r3, [r3, #0]
 81029f2:	4a53      	ldr	r2, [pc, #332]	; (8102b40 <HAL_DMA_Init+0x674>)
 81029f4:	4293      	cmp	r3, r2
 81029f6:	d04a      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	4a51      	ldr	r2, [pc, #324]	; (8102b44 <HAL_DMA_Init+0x678>)
 81029fe:	4293      	cmp	r3, r2
 8102a00:	d045      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	4a50      	ldr	r2, [pc, #320]	; (8102b48 <HAL_DMA_Init+0x67c>)
 8102a08:	4293      	cmp	r3, r2
 8102a0a:	d040      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	681b      	ldr	r3, [r3, #0]
 8102a10:	4a4e      	ldr	r2, [pc, #312]	; (8102b4c <HAL_DMA_Init+0x680>)
 8102a12:	4293      	cmp	r3, r2
 8102a14:	d03b      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	681b      	ldr	r3, [r3, #0]
 8102a1a:	4a4d      	ldr	r2, [pc, #308]	; (8102b50 <HAL_DMA_Init+0x684>)
 8102a1c:	4293      	cmp	r3, r2
 8102a1e:	d036      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	4a4b      	ldr	r2, [pc, #300]	; (8102b54 <HAL_DMA_Init+0x688>)
 8102a26:	4293      	cmp	r3, r2
 8102a28:	d031      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	4a4a      	ldr	r2, [pc, #296]	; (8102b58 <HAL_DMA_Init+0x68c>)
 8102a30:	4293      	cmp	r3, r2
 8102a32:	d02c      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	4a48      	ldr	r2, [pc, #288]	; (8102b5c <HAL_DMA_Init+0x690>)
 8102a3a:	4293      	cmp	r3, r2
 8102a3c:	d027      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	4a47      	ldr	r2, [pc, #284]	; (8102b60 <HAL_DMA_Init+0x694>)
 8102a44:	4293      	cmp	r3, r2
 8102a46:	d022      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	4a45      	ldr	r2, [pc, #276]	; (8102b64 <HAL_DMA_Init+0x698>)
 8102a4e:	4293      	cmp	r3, r2
 8102a50:	d01d      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	4a44      	ldr	r2, [pc, #272]	; (8102b68 <HAL_DMA_Init+0x69c>)
 8102a58:	4293      	cmp	r3, r2
 8102a5a:	d018      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	4a42      	ldr	r2, [pc, #264]	; (8102b6c <HAL_DMA_Init+0x6a0>)
 8102a62:	4293      	cmp	r3, r2
 8102a64:	d013      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	4a41      	ldr	r2, [pc, #260]	; (8102b70 <HAL_DMA_Init+0x6a4>)
 8102a6c:	4293      	cmp	r3, r2
 8102a6e:	d00e      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	4a3f      	ldr	r2, [pc, #252]	; (8102b74 <HAL_DMA_Init+0x6a8>)
 8102a76:	4293      	cmp	r3, r2
 8102a78:	d009      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	4a3e      	ldr	r2, [pc, #248]	; (8102b78 <HAL_DMA_Init+0x6ac>)
 8102a80:	4293      	cmp	r3, r2
 8102a82:	d004      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	4a3c      	ldr	r2, [pc, #240]	; (8102b7c <HAL_DMA_Init+0x6b0>)
 8102a8a:	4293      	cmp	r3, r2
 8102a8c:	d101      	bne.n	8102a92 <HAL_DMA_Init+0x5c6>
 8102a8e:	2301      	movs	r3, #1
 8102a90:	e000      	b.n	8102a94 <HAL_DMA_Init+0x5c8>
 8102a92:	2300      	movs	r3, #0
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d032      	beq.n	8102afe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102a98:	6878      	ldr	r0, [r7, #4]
 8102a9a:	f001 ff23 	bl	81048e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	689b      	ldr	r3, [r3, #8]
 8102aa2:	2b80      	cmp	r3, #128	; 0x80
 8102aa4:	d102      	bne.n	8102aac <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	2200      	movs	r2, #0
 8102aaa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	685a      	ldr	r2, [r3, #4]
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ab4:	b2d2      	uxtb	r2, r2
 8102ab6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102abc:	687a      	ldr	r2, [r7, #4]
 8102abe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102ac0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	685b      	ldr	r3, [r3, #4]
 8102ac6:	2b00      	cmp	r3, #0
 8102ac8:	d010      	beq.n	8102aec <HAL_DMA_Init+0x620>
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	685b      	ldr	r3, [r3, #4]
 8102ace:	2b08      	cmp	r3, #8
 8102ad0:	d80c      	bhi.n	8102aec <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102ad2:	6878      	ldr	r0, [r7, #4]
 8102ad4:	f001 ffa0 	bl	8104a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102adc:	2200      	movs	r2, #0
 8102ade:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102ae4:	687a      	ldr	r2, [r7, #4]
 8102ae6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102ae8:	605a      	str	r2, [r3, #4]
 8102aea:	e008      	b.n	8102afe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	2200      	movs	r2, #0
 8102af0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	2200      	movs	r2, #0
 8102af6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	2200      	movs	r2, #0
 8102afc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	2200      	movs	r2, #0
 8102b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	2201      	movs	r2, #1
 8102b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102b0c:	2300      	movs	r3, #0
}
 8102b0e:	4618      	mov	r0, r3
 8102b10:	3718      	adds	r7, #24
 8102b12:	46bd      	mov	sp, r7
 8102b14:	bd80      	pop	{r7, pc}
 8102b16:	bf00      	nop
 8102b18:	a7fdabf8 	.word	0xa7fdabf8
 8102b1c:	cccccccd 	.word	0xcccccccd
 8102b20:	40020010 	.word	0x40020010
 8102b24:	40020028 	.word	0x40020028
 8102b28:	40020040 	.word	0x40020040
 8102b2c:	40020058 	.word	0x40020058
 8102b30:	40020070 	.word	0x40020070
 8102b34:	40020088 	.word	0x40020088
 8102b38:	400200a0 	.word	0x400200a0
 8102b3c:	400200b8 	.word	0x400200b8
 8102b40:	40020410 	.word	0x40020410
 8102b44:	40020428 	.word	0x40020428
 8102b48:	40020440 	.word	0x40020440
 8102b4c:	40020458 	.word	0x40020458
 8102b50:	40020470 	.word	0x40020470
 8102b54:	40020488 	.word	0x40020488
 8102b58:	400204a0 	.word	0x400204a0
 8102b5c:	400204b8 	.word	0x400204b8
 8102b60:	58025408 	.word	0x58025408
 8102b64:	5802541c 	.word	0x5802541c
 8102b68:	58025430 	.word	0x58025430
 8102b6c:	58025444 	.word	0x58025444
 8102b70:	58025458 	.word	0x58025458
 8102b74:	5802546c 	.word	0x5802546c
 8102b78:	58025480 	.word	0x58025480
 8102b7c:	58025494 	.word	0x58025494

08102b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102b80:	b580      	push	{r7, lr}
 8102b82:	b086      	sub	sp, #24
 8102b84:	af00      	add	r7, sp, #0
 8102b86:	60f8      	str	r0, [r7, #12]
 8102b88:	60b9      	str	r1, [r7, #8]
 8102b8a:	607a      	str	r2, [r7, #4]
 8102b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102b8e:	2300      	movs	r3, #0
 8102b90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	2b00      	cmp	r3, #0
 8102b96:	d101      	bne.n	8102b9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102b98:	2301      	movs	r3, #1
 8102b9a:	e226      	b.n	8102fea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102b9c:	68fb      	ldr	r3, [r7, #12]
 8102b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102ba2:	2b01      	cmp	r3, #1
 8102ba4:	d101      	bne.n	8102baa <HAL_DMA_Start_IT+0x2a>
 8102ba6:	2302      	movs	r3, #2
 8102ba8:	e21f      	b.n	8102fea <HAL_DMA_Start_IT+0x46a>
 8102baa:	68fb      	ldr	r3, [r7, #12]
 8102bac:	2201      	movs	r2, #1
 8102bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102bb2:	68fb      	ldr	r3, [r7, #12]
 8102bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102bb8:	b2db      	uxtb	r3, r3
 8102bba:	2b01      	cmp	r3, #1
 8102bbc:	f040 820a 	bne.w	8102fd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	2202      	movs	r2, #2
 8102bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102bc8:	68fb      	ldr	r3, [r7, #12]
 8102bca:	2200      	movs	r2, #0
 8102bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102bce:	68fb      	ldr	r3, [r7, #12]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	4a68      	ldr	r2, [pc, #416]	; (8102d74 <HAL_DMA_Start_IT+0x1f4>)
 8102bd4:	4293      	cmp	r3, r2
 8102bd6:	d04a      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bd8:	68fb      	ldr	r3, [r7, #12]
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	4a66      	ldr	r2, [pc, #408]	; (8102d78 <HAL_DMA_Start_IT+0x1f8>)
 8102bde:	4293      	cmp	r3, r2
 8102be0:	d045      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102be2:	68fb      	ldr	r3, [r7, #12]
 8102be4:	681b      	ldr	r3, [r3, #0]
 8102be6:	4a65      	ldr	r2, [pc, #404]	; (8102d7c <HAL_DMA_Start_IT+0x1fc>)
 8102be8:	4293      	cmp	r3, r2
 8102bea:	d040      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	4a63      	ldr	r2, [pc, #396]	; (8102d80 <HAL_DMA_Start_IT+0x200>)
 8102bf2:	4293      	cmp	r3, r2
 8102bf4:	d03b      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bf6:	68fb      	ldr	r3, [r7, #12]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	4a62      	ldr	r2, [pc, #392]	; (8102d84 <HAL_DMA_Start_IT+0x204>)
 8102bfc:	4293      	cmp	r3, r2
 8102bfe:	d036      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c00:	68fb      	ldr	r3, [r7, #12]
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	4a60      	ldr	r2, [pc, #384]	; (8102d88 <HAL_DMA_Start_IT+0x208>)
 8102c06:	4293      	cmp	r3, r2
 8102c08:	d031      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c0a:	68fb      	ldr	r3, [r7, #12]
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	4a5f      	ldr	r2, [pc, #380]	; (8102d8c <HAL_DMA_Start_IT+0x20c>)
 8102c10:	4293      	cmp	r3, r2
 8102c12:	d02c      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c14:	68fb      	ldr	r3, [r7, #12]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	4a5d      	ldr	r2, [pc, #372]	; (8102d90 <HAL_DMA_Start_IT+0x210>)
 8102c1a:	4293      	cmp	r3, r2
 8102c1c:	d027      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c1e:	68fb      	ldr	r3, [r7, #12]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	4a5c      	ldr	r2, [pc, #368]	; (8102d94 <HAL_DMA_Start_IT+0x214>)
 8102c24:	4293      	cmp	r3, r2
 8102c26:	d022      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c28:	68fb      	ldr	r3, [r7, #12]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	4a5a      	ldr	r2, [pc, #360]	; (8102d98 <HAL_DMA_Start_IT+0x218>)
 8102c2e:	4293      	cmp	r3, r2
 8102c30:	d01d      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c32:	68fb      	ldr	r3, [r7, #12]
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	4a59      	ldr	r2, [pc, #356]	; (8102d9c <HAL_DMA_Start_IT+0x21c>)
 8102c38:	4293      	cmp	r3, r2
 8102c3a:	d018      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c3c:	68fb      	ldr	r3, [r7, #12]
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	4a57      	ldr	r2, [pc, #348]	; (8102da0 <HAL_DMA_Start_IT+0x220>)
 8102c42:	4293      	cmp	r3, r2
 8102c44:	d013      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c46:	68fb      	ldr	r3, [r7, #12]
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	4a56      	ldr	r2, [pc, #344]	; (8102da4 <HAL_DMA_Start_IT+0x224>)
 8102c4c:	4293      	cmp	r3, r2
 8102c4e:	d00e      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c50:	68fb      	ldr	r3, [r7, #12]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	4a54      	ldr	r2, [pc, #336]	; (8102da8 <HAL_DMA_Start_IT+0x228>)
 8102c56:	4293      	cmp	r3, r2
 8102c58:	d009      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c5a:	68fb      	ldr	r3, [r7, #12]
 8102c5c:	681b      	ldr	r3, [r3, #0]
 8102c5e:	4a53      	ldr	r2, [pc, #332]	; (8102dac <HAL_DMA_Start_IT+0x22c>)
 8102c60:	4293      	cmp	r3, r2
 8102c62:	d004      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c64:	68fb      	ldr	r3, [r7, #12]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	4a51      	ldr	r2, [pc, #324]	; (8102db0 <HAL_DMA_Start_IT+0x230>)
 8102c6a:	4293      	cmp	r3, r2
 8102c6c:	d108      	bne.n	8102c80 <HAL_DMA_Start_IT+0x100>
 8102c6e:	68fb      	ldr	r3, [r7, #12]
 8102c70:	681b      	ldr	r3, [r3, #0]
 8102c72:	681a      	ldr	r2, [r3, #0]
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	f022 0201 	bic.w	r2, r2, #1
 8102c7c:	601a      	str	r2, [r3, #0]
 8102c7e:	e007      	b.n	8102c90 <HAL_DMA_Start_IT+0x110>
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	681a      	ldr	r2, [r3, #0]
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	f022 0201 	bic.w	r2, r2, #1
 8102c8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102c90:	683b      	ldr	r3, [r7, #0]
 8102c92:	687a      	ldr	r2, [r7, #4]
 8102c94:	68b9      	ldr	r1, [r7, #8]
 8102c96:	68f8      	ldr	r0, [r7, #12]
 8102c98:	f001 fb4a 	bl	8104330 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	4a34      	ldr	r2, [pc, #208]	; (8102d74 <HAL_DMA_Start_IT+0x1f4>)
 8102ca2:	4293      	cmp	r3, r2
 8102ca4:	d04a      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102ca6:	68fb      	ldr	r3, [r7, #12]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	4a33      	ldr	r2, [pc, #204]	; (8102d78 <HAL_DMA_Start_IT+0x1f8>)
 8102cac:	4293      	cmp	r3, r2
 8102cae:	d045      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cb0:	68fb      	ldr	r3, [r7, #12]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	4a31      	ldr	r2, [pc, #196]	; (8102d7c <HAL_DMA_Start_IT+0x1fc>)
 8102cb6:	4293      	cmp	r3, r2
 8102cb8:	d040      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cba:	68fb      	ldr	r3, [r7, #12]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	4a30      	ldr	r2, [pc, #192]	; (8102d80 <HAL_DMA_Start_IT+0x200>)
 8102cc0:	4293      	cmp	r3, r2
 8102cc2:	d03b      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cc4:	68fb      	ldr	r3, [r7, #12]
 8102cc6:	681b      	ldr	r3, [r3, #0]
 8102cc8:	4a2e      	ldr	r2, [pc, #184]	; (8102d84 <HAL_DMA_Start_IT+0x204>)
 8102cca:	4293      	cmp	r3, r2
 8102ccc:	d036      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	4a2d      	ldr	r2, [pc, #180]	; (8102d88 <HAL_DMA_Start_IT+0x208>)
 8102cd4:	4293      	cmp	r3, r2
 8102cd6:	d031      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	4a2b      	ldr	r2, [pc, #172]	; (8102d8c <HAL_DMA_Start_IT+0x20c>)
 8102cde:	4293      	cmp	r3, r2
 8102ce0:	d02c      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	4a2a      	ldr	r2, [pc, #168]	; (8102d90 <HAL_DMA_Start_IT+0x210>)
 8102ce8:	4293      	cmp	r3, r2
 8102cea:	d027      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	4a28      	ldr	r2, [pc, #160]	; (8102d94 <HAL_DMA_Start_IT+0x214>)
 8102cf2:	4293      	cmp	r3, r2
 8102cf4:	d022      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	4a27      	ldr	r2, [pc, #156]	; (8102d98 <HAL_DMA_Start_IT+0x218>)
 8102cfc:	4293      	cmp	r3, r2
 8102cfe:	d01d      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d00:	68fb      	ldr	r3, [r7, #12]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	4a25      	ldr	r2, [pc, #148]	; (8102d9c <HAL_DMA_Start_IT+0x21c>)
 8102d06:	4293      	cmp	r3, r2
 8102d08:	d018      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	4a24      	ldr	r2, [pc, #144]	; (8102da0 <HAL_DMA_Start_IT+0x220>)
 8102d10:	4293      	cmp	r3, r2
 8102d12:	d013      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d14:	68fb      	ldr	r3, [r7, #12]
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	4a22      	ldr	r2, [pc, #136]	; (8102da4 <HAL_DMA_Start_IT+0x224>)
 8102d1a:	4293      	cmp	r3, r2
 8102d1c:	d00e      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d1e:	68fb      	ldr	r3, [r7, #12]
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	4a21      	ldr	r2, [pc, #132]	; (8102da8 <HAL_DMA_Start_IT+0x228>)
 8102d24:	4293      	cmp	r3, r2
 8102d26:	d009      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d28:	68fb      	ldr	r3, [r7, #12]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	4a1f      	ldr	r2, [pc, #124]	; (8102dac <HAL_DMA_Start_IT+0x22c>)
 8102d2e:	4293      	cmp	r3, r2
 8102d30:	d004      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d32:	68fb      	ldr	r3, [r7, #12]
 8102d34:	681b      	ldr	r3, [r3, #0]
 8102d36:	4a1e      	ldr	r2, [pc, #120]	; (8102db0 <HAL_DMA_Start_IT+0x230>)
 8102d38:	4293      	cmp	r3, r2
 8102d3a:	d101      	bne.n	8102d40 <HAL_DMA_Start_IT+0x1c0>
 8102d3c:	2301      	movs	r3, #1
 8102d3e:	e000      	b.n	8102d42 <HAL_DMA_Start_IT+0x1c2>
 8102d40:	2300      	movs	r3, #0
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d036      	beq.n	8102db4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102d46:	68fb      	ldr	r3, [r7, #12]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	f023 021e 	bic.w	r2, r3, #30
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	f042 0216 	orr.w	r2, r2, #22
 8102d58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102d5a:	68fb      	ldr	r3, [r7, #12]
 8102d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d5e:	2b00      	cmp	r3, #0
 8102d60:	d03e      	beq.n	8102de0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102d62:	68fb      	ldr	r3, [r7, #12]
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	681a      	ldr	r2, [r3, #0]
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	f042 0208 	orr.w	r2, r2, #8
 8102d70:	601a      	str	r2, [r3, #0]
 8102d72:	e035      	b.n	8102de0 <HAL_DMA_Start_IT+0x260>
 8102d74:	40020010 	.word	0x40020010
 8102d78:	40020028 	.word	0x40020028
 8102d7c:	40020040 	.word	0x40020040
 8102d80:	40020058 	.word	0x40020058
 8102d84:	40020070 	.word	0x40020070
 8102d88:	40020088 	.word	0x40020088
 8102d8c:	400200a0 	.word	0x400200a0
 8102d90:	400200b8 	.word	0x400200b8
 8102d94:	40020410 	.word	0x40020410
 8102d98:	40020428 	.word	0x40020428
 8102d9c:	40020440 	.word	0x40020440
 8102da0:	40020458 	.word	0x40020458
 8102da4:	40020470 	.word	0x40020470
 8102da8:	40020488 	.word	0x40020488
 8102dac:	400204a0 	.word	0x400204a0
 8102db0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102db4:	68fb      	ldr	r3, [r7, #12]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f023 020e 	bic.w	r2, r3, #14
 8102dbe:	68fb      	ldr	r3, [r7, #12]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	f042 020a 	orr.w	r2, r2, #10
 8102dc6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102dc8:	68fb      	ldr	r3, [r7, #12]
 8102dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102dcc:	2b00      	cmp	r3, #0
 8102dce:	d007      	beq.n	8102de0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102dd0:	68fb      	ldr	r3, [r7, #12]
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	681a      	ldr	r2, [r3, #0]
 8102dd6:	68fb      	ldr	r3, [r7, #12]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	f042 0204 	orr.w	r2, r2, #4
 8102dde:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a83      	ldr	r2, [pc, #524]	; (8102ff4 <HAL_DMA_Start_IT+0x474>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d072      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102dea:	68fb      	ldr	r3, [r7, #12]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a82      	ldr	r2, [pc, #520]	; (8102ff8 <HAL_DMA_Start_IT+0x478>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d06d      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102df4:	68fb      	ldr	r3, [r7, #12]
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	4a80      	ldr	r2, [pc, #512]	; (8102ffc <HAL_DMA_Start_IT+0x47c>)
 8102dfa:	4293      	cmp	r3, r2
 8102dfc:	d068      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	681b      	ldr	r3, [r3, #0]
 8102e02:	4a7f      	ldr	r2, [pc, #508]	; (8103000 <HAL_DMA_Start_IT+0x480>)
 8102e04:	4293      	cmp	r3, r2
 8102e06:	d063      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e08:	68fb      	ldr	r3, [r7, #12]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	4a7d      	ldr	r2, [pc, #500]	; (8103004 <HAL_DMA_Start_IT+0x484>)
 8102e0e:	4293      	cmp	r3, r2
 8102e10:	d05e      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	4a7c      	ldr	r2, [pc, #496]	; (8103008 <HAL_DMA_Start_IT+0x488>)
 8102e18:	4293      	cmp	r3, r2
 8102e1a:	d059      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	4a7a      	ldr	r2, [pc, #488]	; (810300c <HAL_DMA_Start_IT+0x48c>)
 8102e22:	4293      	cmp	r3, r2
 8102e24:	d054      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e26:	68fb      	ldr	r3, [r7, #12]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	4a79      	ldr	r2, [pc, #484]	; (8103010 <HAL_DMA_Start_IT+0x490>)
 8102e2c:	4293      	cmp	r3, r2
 8102e2e:	d04f      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e30:	68fb      	ldr	r3, [r7, #12]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	4a77      	ldr	r2, [pc, #476]	; (8103014 <HAL_DMA_Start_IT+0x494>)
 8102e36:	4293      	cmp	r3, r2
 8102e38:	d04a      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e3a:	68fb      	ldr	r3, [r7, #12]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	4a76      	ldr	r2, [pc, #472]	; (8103018 <HAL_DMA_Start_IT+0x498>)
 8102e40:	4293      	cmp	r3, r2
 8102e42:	d045      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e44:	68fb      	ldr	r3, [r7, #12]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	4a74      	ldr	r2, [pc, #464]	; (810301c <HAL_DMA_Start_IT+0x49c>)
 8102e4a:	4293      	cmp	r3, r2
 8102e4c:	d040      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e4e:	68fb      	ldr	r3, [r7, #12]
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	4a73      	ldr	r2, [pc, #460]	; (8103020 <HAL_DMA_Start_IT+0x4a0>)
 8102e54:	4293      	cmp	r3, r2
 8102e56:	d03b      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e58:	68fb      	ldr	r3, [r7, #12]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	4a71      	ldr	r2, [pc, #452]	; (8103024 <HAL_DMA_Start_IT+0x4a4>)
 8102e5e:	4293      	cmp	r3, r2
 8102e60:	d036      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e62:	68fb      	ldr	r3, [r7, #12]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	4a70      	ldr	r2, [pc, #448]	; (8103028 <HAL_DMA_Start_IT+0x4a8>)
 8102e68:	4293      	cmp	r3, r2
 8102e6a:	d031      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e6c:	68fb      	ldr	r3, [r7, #12]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	4a6e      	ldr	r2, [pc, #440]	; (810302c <HAL_DMA_Start_IT+0x4ac>)
 8102e72:	4293      	cmp	r3, r2
 8102e74:	d02c      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e76:	68fb      	ldr	r3, [r7, #12]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	4a6d      	ldr	r2, [pc, #436]	; (8103030 <HAL_DMA_Start_IT+0x4b0>)
 8102e7c:	4293      	cmp	r3, r2
 8102e7e:	d027      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	4a6b      	ldr	r2, [pc, #428]	; (8103034 <HAL_DMA_Start_IT+0x4b4>)
 8102e86:	4293      	cmp	r3, r2
 8102e88:	d022      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e8a:	68fb      	ldr	r3, [r7, #12]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	4a6a      	ldr	r2, [pc, #424]	; (8103038 <HAL_DMA_Start_IT+0x4b8>)
 8102e90:	4293      	cmp	r3, r2
 8102e92:	d01d      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e94:	68fb      	ldr	r3, [r7, #12]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	4a68      	ldr	r2, [pc, #416]	; (810303c <HAL_DMA_Start_IT+0x4bc>)
 8102e9a:	4293      	cmp	r3, r2
 8102e9c:	d018      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e9e:	68fb      	ldr	r3, [r7, #12]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	4a67      	ldr	r2, [pc, #412]	; (8103040 <HAL_DMA_Start_IT+0x4c0>)
 8102ea4:	4293      	cmp	r3, r2
 8102ea6:	d013      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ea8:	68fb      	ldr	r3, [r7, #12]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	4a65      	ldr	r2, [pc, #404]	; (8103044 <HAL_DMA_Start_IT+0x4c4>)
 8102eae:	4293      	cmp	r3, r2
 8102eb0:	d00e      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102eb2:	68fb      	ldr	r3, [r7, #12]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	4a64      	ldr	r2, [pc, #400]	; (8103048 <HAL_DMA_Start_IT+0x4c8>)
 8102eb8:	4293      	cmp	r3, r2
 8102eba:	d009      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ebc:	68fb      	ldr	r3, [r7, #12]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	4a62      	ldr	r2, [pc, #392]	; (810304c <HAL_DMA_Start_IT+0x4cc>)
 8102ec2:	4293      	cmp	r3, r2
 8102ec4:	d004      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ec6:	68fb      	ldr	r3, [r7, #12]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	4a61      	ldr	r2, [pc, #388]	; (8103050 <HAL_DMA_Start_IT+0x4d0>)
 8102ecc:	4293      	cmp	r3, r2
 8102ece:	d101      	bne.n	8102ed4 <HAL_DMA_Start_IT+0x354>
 8102ed0:	2301      	movs	r3, #1
 8102ed2:	e000      	b.n	8102ed6 <HAL_DMA_Start_IT+0x356>
 8102ed4:	2300      	movs	r3, #0
 8102ed6:	2b00      	cmp	r3, #0
 8102ed8:	d01a      	beq.n	8102f10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102eda:	68fb      	ldr	r3, [r7, #12]
 8102edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d007      	beq.n	8102ef8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102ee8:	68fb      	ldr	r3, [r7, #12]
 8102eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102eec:	681a      	ldr	r2, [r3, #0]
 8102eee:	68fb      	ldr	r3, [r7, #12]
 8102ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102ef6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102efc:	2b00      	cmp	r3, #0
 8102efe:	d007      	beq.n	8102f10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f04:	681a      	ldr	r2, [r3, #0]
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102f10:	68fb      	ldr	r3, [r7, #12]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a37      	ldr	r2, [pc, #220]	; (8102ff4 <HAL_DMA_Start_IT+0x474>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d04a      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f1a:	68fb      	ldr	r3, [r7, #12]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	4a36      	ldr	r2, [pc, #216]	; (8102ff8 <HAL_DMA_Start_IT+0x478>)
 8102f20:	4293      	cmp	r3, r2
 8102f22:	d045      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f24:	68fb      	ldr	r3, [r7, #12]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	4a34      	ldr	r2, [pc, #208]	; (8102ffc <HAL_DMA_Start_IT+0x47c>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d040      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f2e:	68fb      	ldr	r3, [r7, #12]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4a33      	ldr	r2, [pc, #204]	; (8103000 <HAL_DMA_Start_IT+0x480>)
 8102f34:	4293      	cmp	r3, r2
 8102f36:	d03b      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f38:	68fb      	ldr	r3, [r7, #12]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	4a31      	ldr	r2, [pc, #196]	; (8103004 <HAL_DMA_Start_IT+0x484>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d036      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f42:	68fb      	ldr	r3, [r7, #12]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	4a30      	ldr	r2, [pc, #192]	; (8103008 <HAL_DMA_Start_IT+0x488>)
 8102f48:	4293      	cmp	r3, r2
 8102f4a:	d031      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f4c:	68fb      	ldr	r3, [r7, #12]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4a2e      	ldr	r2, [pc, #184]	; (810300c <HAL_DMA_Start_IT+0x48c>)
 8102f52:	4293      	cmp	r3, r2
 8102f54:	d02c      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f56:	68fb      	ldr	r3, [r7, #12]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	4a2d      	ldr	r2, [pc, #180]	; (8103010 <HAL_DMA_Start_IT+0x490>)
 8102f5c:	4293      	cmp	r3, r2
 8102f5e:	d027      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	4a2b      	ldr	r2, [pc, #172]	; (8103014 <HAL_DMA_Start_IT+0x494>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d022      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f6a:	68fb      	ldr	r3, [r7, #12]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	4a2a      	ldr	r2, [pc, #168]	; (8103018 <HAL_DMA_Start_IT+0x498>)
 8102f70:	4293      	cmp	r3, r2
 8102f72:	d01d      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f74:	68fb      	ldr	r3, [r7, #12]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4a28      	ldr	r2, [pc, #160]	; (810301c <HAL_DMA_Start_IT+0x49c>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d018      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f7e:	68fb      	ldr	r3, [r7, #12]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	4a27      	ldr	r2, [pc, #156]	; (8103020 <HAL_DMA_Start_IT+0x4a0>)
 8102f84:	4293      	cmp	r3, r2
 8102f86:	d013      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f88:	68fb      	ldr	r3, [r7, #12]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	4a25      	ldr	r2, [pc, #148]	; (8103024 <HAL_DMA_Start_IT+0x4a4>)
 8102f8e:	4293      	cmp	r3, r2
 8102f90:	d00e      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4a24      	ldr	r2, [pc, #144]	; (8103028 <HAL_DMA_Start_IT+0x4a8>)
 8102f98:	4293      	cmp	r3, r2
 8102f9a:	d009      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f9c:	68fb      	ldr	r3, [r7, #12]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4a22      	ldr	r2, [pc, #136]	; (810302c <HAL_DMA_Start_IT+0x4ac>)
 8102fa2:	4293      	cmp	r3, r2
 8102fa4:	d004      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	4a21      	ldr	r2, [pc, #132]	; (8103030 <HAL_DMA_Start_IT+0x4b0>)
 8102fac:	4293      	cmp	r3, r2
 8102fae:	d108      	bne.n	8102fc2 <HAL_DMA_Start_IT+0x442>
 8102fb0:	68fb      	ldr	r3, [r7, #12]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	681a      	ldr	r2, [r3, #0]
 8102fb6:	68fb      	ldr	r3, [r7, #12]
 8102fb8:	681b      	ldr	r3, [r3, #0]
 8102fba:	f042 0201 	orr.w	r2, r2, #1
 8102fbe:	601a      	str	r2, [r3, #0]
 8102fc0:	e012      	b.n	8102fe8 <HAL_DMA_Start_IT+0x468>
 8102fc2:	68fb      	ldr	r3, [r7, #12]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	681a      	ldr	r2, [r3, #0]
 8102fc8:	68fb      	ldr	r3, [r7, #12]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	f042 0201 	orr.w	r2, r2, #1
 8102fd0:	601a      	str	r2, [r3, #0]
 8102fd2:	e009      	b.n	8102fe8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102fd4:	68fb      	ldr	r3, [r7, #12]
 8102fd6:	2200      	movs	r2, #0
 8102fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102fdc:	68fb      	ldr	r3, [r7, #12]
 8102fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102fe2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8102fe4:	2301      	movs	r3, #1
 8102fe6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8102fea:	4618      	mov	r0, r3
 8102fec:	3718      	adds	r7, #24
 8102fee:	46bd      	mov	sp, r7
 8102ff0:	bd80      	pop	{r7, pc}
 8102ff2:	bf00      	nop
 8102ff4:	40020010 	.word	0x40020010
 8102ff8:	40020028 	.word	0x40020028
 8102ffc:	40020040 	.word	0x40020040
 8103000:	40020058 	.word	0x40020058
 8103004:	40020070 	.word	0x40020070
 8103008:	40020088 	.word	0x40020088
 810300c:	400200a0 	.word	0x400200a0
 8103010:	400200b8 	.word	0x400200b8
 8103014:	40020410 	.word	0x40020410
 8103018:	40020428 	.word	0x40020428
 810301c:	40020440 	.word	0x40020440
 8103020:	40020458 	.word	0x40020458
 8103024:	40020470 	.word	0x40020470
 8103028:	40020488 	.word	0x40020488
 810302c:	400204a0 	.word	0x400204a0
 8103030:	400204b8 	.word	0x400204b8
 8103034:	58025408 	.word	0x58025408
 8103038:	5802541c 	.word	0x5802541c
 810303c:	58025430 	.word	0x58025430
 8103040:	58025444 	.word	0x58025444
 8103044:	58025458 	.word	0x58025458
 8103048:	5802546c 	.word	0x5802546c
 810304c:	58025480 	.word	0x58025480
 8103050:	58025494 	.word	0x58025494

08103054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103054:	b580      	push	{r7, lr}
 8103056:	b084      	sub	sp, #16
 8103058:	af00      	add	r7, sp, #0
 810305a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	2b00      	cmp	r3, #0
 8103060:	d101      	bne.n	8103066 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8103062:	2301      	movs	r3, #1
 8103064:	e205      	b.n	8103472 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810306c:	b2db      	uxtb	r3, r3
 810306e:	2b02      	cmp	r3, #2
 8103070:	d004      	beq.n	810307c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	2280      	movs	r2, #128	; 0x80
 8103076:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8103078:	2301      	movs	r3, #1
 810307a:	e1fa      	b.n	8103472 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	4a8c      	ldr	r2, [pc, #560]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103082:	4293      	cmp	r3, r2
 8103084:	d04a      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	4a8b      	ldr	r2, [pc, #556]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 810308c:	4293      	cmp	r3, r2
 810308e:	d045      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	681b      	ldr	r3, [r3, #0]
 8103094:	4a89      	ldr	r2, [pc, #548]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 8103096:	4293      	cmp	r3, r2
 8103098:	d040      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	4a88      	ldr	r2, [pc, #544]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 81030a0:	4293      	cmp	r3, r2
 81030a2:	d03b      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	4a86      	ldr	r2, [pc, #536]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 81030aa:	4293      	cmp	r3, r2
 81030ac:	d036      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	4a85      	ldr	r2, [pc, #532]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 81030b4:	4293      	cmp	r3, r2
 81030b6:	d031      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	4a83      	ldr	r2, [pc, #524]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d02c      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	4a82      	ldr	r2, [pc, #520]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 81030c8:	4293      	cmp	r3, r2
 81030ca:	d027      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	4a80      	ldr	r2, [pc, #512]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 81030d2:	4293      	cmp	r3, r2
 81030d4:	d022      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	4a7f      	ldr	r2, [pc, #508]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 81030dc:	4293      	cmp	r3, r2
 81030de:	d01d      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	4a7d      	ldr	r2, [pc, #500]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 81030e6:	4293      	cmp	r3, r2
 81030e8:	d018      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	4a7c      	ldr	r2, [pc, #496]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 81030f0:	4293      	cmp	r3, r2
 81030f2:	d013      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	4a7a      	ldr	r2, [pc, #488]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 81030fa:	4293      	cmp	r3, r2
 81030fc:	d00e      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4a79      	ldr	r2, [pc, #484]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 8103104:	4293      	cmp	r3, r2
 8103106:	d009      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	4a77      	ldr	r2, [pc, #476]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 810310e:	4293      	cmp	r3, r2
 8103110:	d004      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	681b      	ldr	r3, [r3, #0]
 8103116:	4a76      	ldr	r2, [pc, #472]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 8103118:	4293      	cmp	r3, r2
 810311a:	d101      	bne.n	8103120 <HAL_DMA_Abort_IT+0xcc>
 810311c:	2301      	movs	r3, #1
 810311e:	e000      	b.n	8103122 <HAL_DMA_Abort_IT+0xce>
 8103120:	2300      	movs	r3, #0
 8103122:	2b00      	cmp	r3, #0
 8103124:	d065      	beq.n	81031f2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	2204      	movs	r2, #4
 810312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	4a60      	ldr	r2, [pc, #384]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103134:	4293      	cmp	r3, r2
 8103136:	d04a      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	4a5e      	ldr	r2, [pc, #376]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 810313e:	4293      	cmp	r3, r2
 8103140:	d045      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	4a5d      	ldr	r2, [pc, #372]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 8103148:	4293      	cmp	r3, r2
 810314a:	d040      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	4a5b      	ldr	r2, [pc, #364]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 8103152:	4293      	cmp	r3, r2
 8103154:	d03b      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	4a5a      	ldr	r2, [pc, #360]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 810315c:	4293      	cmp	r3, r2
 810315e:	d036      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a58      	ldr	r2, [pc, #352]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d031      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	4a57      	ldr	r2, [pc, #348]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 8103170:	4293      	cmp	r3, r2
 8103172:	d02c      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	4a55      	ldr	r2, [pc, #340]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 810317a:	4293      	cmp	r3, r2
 810317c:	d027      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	4a54      	ldr	r2, [pc, #336]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 8103184:	4293      	cmp	r3, r2
 8103186:	d022      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	4a52      	ldr	r2, [pc, #328]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 810318e:	4293      	cmp	r3, r2
 8103190:	d01d      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	4a51      	ldr	r2, [pc, #324]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 8103198:	4293      	cmp	r3, r2
 810319a:	d018      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	4a4f      	ldr	r2, [pc, #316]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 81031a2:	4293      	cmp	r3, r2
 81031a4:	d013      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	4a4e      	ldr	r2, [pc, #312]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 81031ac:	4293      	cmp	r3, r2
 81031ae:	d00e      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	4a4c      	ldr	r2, [pc, #304]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 81031b6:	4293      	cmp	r3, r2
 81031b8:	d009      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	681b      	ldr	r3, [r3, #0]
 81031be:	4a4b      	ldr	r2, [pc, #300]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 81031c0:	4293      	cmp	r3, r2
 81031c2:	d004      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	4a49      	ldr	r2, [pc, #292]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 81031ca:	4293      	cmp	r3, r2
 81031cc:	d108      	bne.n	81031e0 <HAL_DMA_Abort_IT+0x18c>
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	681a      	ldr	r2, [r3, #0]
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681b      	ldr	r3, [r3, #0]
 81031d8:	f022 0201 	bic.w	r2, r2, #1
 81031dc:	601a      	str	r2, [r3, #0]
 81031de:	e147      	b.n	8103470 <HAL_DMA_Abort_IT+0x41c>
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	681a      	ldr	r2, [r3, #0]
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	f022 0201 	bic.w	r2, r2, #1
 81031ee:	601a      	str	r2, [r3, #0]
 81031f0:	e13e      	b.n	8103470 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	681a      	ldr	r2, [r3, #0]
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	681b      	ldr	r3, [r3, #0]
 81031fc:	f022 020e 	bic.w	r2, r2, #14
 8103200:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	4a2b      	ldr	r2, [pc, #172]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103208:	4293      	cmp	r3, r2
 810320a:	d04a      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	4a29      	ldr	r2, [pc, #164]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 8103212:	4293      	cmp	r3, r2
 8103214:	d045      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	4a28      	ldr	r2, [pc, #160]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 810321c:	4293      	cmp	r3, r2
 810321e:	d040      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	4a26      	ldr	r2, [pc, #152]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d03b      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a25      	ldr	r2, [pc, #148]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 8103230:	4293      	cmp	r3, r2
 8103232:	d036      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a23      	ldr	r2, [pc, #140]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d031      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4a22      	ldr	r2, [pc, #136]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 8103244:	4293      	cmp	r3, r2
 8103246:	d02c      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	4a20      	ldr	r2, [pc, #128]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d027      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	4a1f      	ldr	r2, [pc, #124]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 8103258:	4293      	cmp	r3, r2
 810325a:	d022      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4a1d      	ldr	r2, [pc, #116]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 8103262:	4293      	cmp	r3, r2
 8103264:	d01d      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	4a1c      	ldr	r2, [pc, #112]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 810326c:	4293      	cmp	r3, r2
 810326e:	d018      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	4a1a      	ldr	r2, [pc, #104]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 8103276:	4293      	cmp	r3, r2
 8103278:	d013      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	4a19      	ldr	r2, [pc, #100]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 8103280:	4293      	cmp	r3, r2
 8103282:	d00e      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	4a17      	ldr	r2, [pc, #92]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 810328a:	4293      	cmp	r3, r2
 810328c:	d009      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	4a16      	ldr	r2, [pc, #88]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 8103294:	4293      	cmp	r3, r2
 8103296:	d004      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	4a14      	ldr	r2, [pc, #80]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 810329e:	4293      	cmp	r3, r2
 81032a0:	d128      	bne.n	81032f4 <HAL_DMA_Abort_IT+0x2a0>
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	681a      	ldr	r2, [r3, #0]
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	f022 0201 	bic.w	r2, r2, #1
 81032b0:	601a      	str	r2, [r3, #0]
 81032b2:	e027      	b.n	8103304 <HAL_DMA_Abort_IT+0x2b0>
 81032b4:	40020010 	.word	0x40020010
 81032b8:	40020028 	.word	0x40020028
 81032bc:	40020040 	.word	0x40020040
 81032c0:	40020058 	.word	0x40020058
 81032c4:	40020070 	.word	0x40020070
 81032c8:	40020088 	.word	0x40020088
 81032cc:	400200a0 	.word	0x400200a0
 81032d0:	400200b8 	.word	0x400200b8
 81032d4:	40020410 	.word	0x40020410
 81032d8:	40020428 	.word	0x40020428
 81032dc:	40020440 	.word	0x40020440
 81032e0:	40020458 	.word	0x40020458
 81032e4:	40020470 	.word	0x40020470
 81032e8:	40020488 	.word	0x40020488
 81032ec:	400204a0 	.word	0x400204a0
 81032f0:	400204b8 	.word	0x400204b8
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	681a      	ldr	r2, [r3, #0]
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	f022 0201 	bic.w	r2, r2, #1
 8103302:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	4a5c      	ldr	r2, [pc, #368]	; (810347c <HAL_DMA_Abort_IT+0x428>)
 810330a:	4293      	cmp	r3, r2
 810330c:	d072      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	4a5b      	ldr	r2, [pc, #364]	; (8103480 <HAL_DMA_Abort_IT+0x42c>)
 8103314:	4293      	cmp	r3, r2
 8103316:	d06d      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	4a59      	ldr	r2, [pc, #356]	; (8103484 <HAL_DMA_Abort_IT+0x430>)
 810331e:	4293      	cmp	r3, r2
 8103320:	d068      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	681b      	ldr	r3, [r3, #0]
 8103326:	4a58      	ldr	r2, [pc, #352]	; (8103488 <HAL_DMA_Abort_IT+0x434>)
 8103328:	4293      	cmp	r3, r2
 810332a:	d063      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	4a56      	ldr	r2, [pc, #344]	; (810348c <HAL_DMA_Abort_IT+0x438>)
 8103332:	4293      	cmp	r3, r2
 8103334:	d05e      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	4a55      	ldr	r2, [pc, #340]	; (8103490 <HAL_DMA_Abort_IT+0x43c>)
 810333c:	4293      	cmp	r3, r2
 810333e:	d059      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	4a53      	ldr	r2, [pc, #332]	; (8103494 <HAL_DMA_Abort_IT+0x440>)
 8103346:	4293      	cmp	r3, r2
 8103348:	d054      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	4a52      	ldr	r2, [pc, #328]	; (8103498 <HAL_DMA_Abort_IT+0x444>)
 8103350:	4293      	cmp	r3, r2
 8103352:	d04f      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	4a50      	ldr	r2, [pc, #320]	; (810349c <HAL_DMA_Abort_IT+0x448>)
 810335a:	4293      	cmp	r3, r2
 810335c:	d04a      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	4a4f      	ldr	r2, [pc, #316]	; (81034a0 <HAL_DMA_Abort_IT+0x44c>)
 8103364:	4293      	cmp	r3, r2
 8103366:	d045      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	4a4d      	ldr	r2, [pc, #308]	; (81034a4 <HAL_DMA_Abort_IT+0x450>)
 810336e:	4293      	cmp	r3, r2
 8103370:	d040      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	4a4c      	ldr	r2, [pc, #304]	; (81034a8 <HAL_DMA_Abort_IT+0x454>)
 8103378:	4293      	cmp	r3, r2
 810337a:	d03b      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	4a4a      	ldr	r2, [pc, #296]	; (81034ac <HAL_DMA_Abort_IT+0x458>)
 8103382:	4293      	cmp	r3, r2
 8103384:	d036      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	4a49      	ldr	r2, [pc, #292]	; (81034b0 <HAL_DMA_Abort_IT+0x45c>)
 810338c:	4293      	cmp	r3, r2
 810338e:	d031      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	4a47      	ldr	r2, [pc, #284]	; (81034b4 <HAL_DMA_Abort_IT+0x460>)
 8103396:	4293      	cmp	r3, r2
 8103398:	d02c      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	4a46      	ldr	r2, [pc, #280]	; (81034b8 <HAL_DMA_Abort_IT+0x464>)
 81033a0:	4293      	cmp	r3, r2
 81033a2:	d027      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	4a44      	ldr	r2, [pc, #272]	; (81034bc <HAL_DMA_Abort_IT+0x468>)
 81033aa:	4293      	cmp	r3, r2
 81033ac:	d022      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	4a43      	ldr	r2, [pc, #268]	; (81034c0 <HAL_DMA_Abort_IT+0x46c>)
 81033b4:	4293      	cmp	r3, r2
 81033b6:	d01d      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	4a41      	ldr	r2, [pc, #260]	; (81034c4 <HAL_DMA_Abort_IT+0x470>)
 81033be:	4293      	cmp	r3, r2
 81033c0:	d018      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	4a40      	ldr	r2, [pc, #256]	; (81034c8 <HAL_DMA_Abort_IT+0x474>)
 81033c8:	4293      	cmp	r3, r2
 81033ca:	d013      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	4a3e      	ldr	r2, [pc, #248]	; (81034cc <HAL_DMA_Abort_IT+0x478>)
 81033d2:	4293      	cmp	r3, r2
 81033d4:	d00e      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4a3d      	ldr	r2, [pc, #244]	; (81034d0 <HAL_DMA_Abort_IT+0x47c>)
 81033dc:	4293      	cmp	r3, r2
 81033de:	d009      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	4a3b      	ldr	r2, [pc, #236]	; (81034d4 <HAL_DMA_Abort_IT+0x480>)
 81033e6:	4293      	cmp	r3, r2
 81033e8:	d004      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	4a3a      	ldr	r2, [pc, #232]	; (81034d8 <HAL_DMA_Abort_IT+0x484>)
 81033f0:	4293      	cmp	r3, r2
 81033f2:	d101      	bne.n	81033f8 <HAL_DMA_Abort_IT+0x3a4>
 81033f4:	2301      	movs	r3, #1
 81033f6:	e000      	b.n	81033fa <HAL_DMA_Abort_IT+0x3a6>
 81033f8:	2300      	movs	r3, #0
 81033fa:	2b00      	cmp	r3, #0
 81033fc:	d028      	beq.n	8103450 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103402:	681a      	ldr	r2, [r3, #0]
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810340c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103412:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103418:	f003 031f 	and.w	r3, r3, #31
 810341c:	2201      	movs	r2, #1
 810341e:	409a      	lsls	r2, r3
 8103420:	68fb      	ldr	r3, [r7, #12]
 8103422:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103428:	687a      	ldr	r2, [r7, #4]
 810342a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810342c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103432:	2b00      	cmp	r3, #0
 8103434:	d00c      	beq.n	8103450 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810343a:	681a      	ldr	r2, [r3, #0]
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103444:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810344a:	687a      	ldr	r2, [r7, #4]
 810344c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810344e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	2200      	movs	r2, #0
 8103454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	2201      	movs	r2, #1
 810345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103464:	2b00      	cmp	r3, #0
 8103466:	d003      	beq.n	8103470 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810346c:	6878      	ldr	r0, [r7, #4]
 810346e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8103470:	2300      	movs	r3, #0
}
 8103472:	4618      	mov	r0, r3
 8103474:	3710      	adds	r7, #16
 8103476:	46bd      	mov	sp, r7
 8103478:	bd80      	pop	{r7, pc}
 810347a:	bf00      	nop
 810347c:	40020010 	.word	0x40020010
 8103480:	40020028 	.word	0x40020028
 8103484:	40020040 	.word	0x40020040
 8103488:	40020058 	.word	0x40020058
 810348c:	40020070 	.word	0x40020070
 8103490:	40020088 	.word	0x40020088
 8103494:	400200a0 	.word	0x400200a0
 8103498:	400200b8 	.word	0x400200b8
 810349c:	40020410 	.word	0x40020410
 81034a0:	40020428 	.word	0x40020428
 81034a4:	40020440 	.word	0x40020440
 81034a8:	40020458 	.word	0x40020458
 81034ac:	40020470 	.word	0x40020470
 81034b0:	40020488 	.word	0x40020488
 81034b4:	400204a0 	.word	0x400204a0
 81034b8:	400204b8 	.word	0x400204b8
 81034bc:	58025408 	.word	0x58025408
 81034c0:	5802541c 	.word	0x5802541c
 81034c4:	58025430 	.word	0x58025430
 81034c8:	58025444 	.word	0x58025444
 81034cc:	58025458 	.word	0x58025458
 81034d0:	5802546c 	.word	0x5802546c
 81034d4:	58025480 	.word	0x58025480
 81034d8:	58025494 	.word	0x58025494

081034dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81034dc:	b580      	push	{r7, lr}
 81034de:	b08a      	sub	sp, #40	; 0x28
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81034e4:	2300      	movs	r3, #0
 81034e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81034e8:	4b67      	ldr	r3, [pc, #412]	; (8103688 <HAL_DMA_IRQHandler+0x1ac>)
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	4a67      	ldr	r2, [pc, #412]	; (810368c <HAL_DMA_IRQHandler+0x1b0>)
 81034ee:	fba2 2303 	umull	r2, r3, r2, r3
 81034f2:	0a9b      	lsrs	r3, r3, #10
 81034f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103500:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103502:	6a3b      	ldr	r3, [r7, #32]
 8103504:	681b      	ldr	r3, [r3, #0]
 8103506:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103508:	69fb      	ldr	r3, [r7, #28]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	4a5f      	ldr	r2, [pc, #380]	; (8103690 <HAL_DMA_IRQHandler+0x1b4>)
 8103514:	4293      	cmp	r3, r2
 8103516:	d04a      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	4a5d      	ldr	r2, [pc, #372]	; (8103694 <HAL_DMA_IRQHandler+0x1b8>)
 810351e:	4293      	cmp	r3, r2
 8103520:	d045      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	4a5c      	ldr	r2, [pc, #368]	; (8103698 <HAL_DMA_IRQHandler+0x1bc>)
 8103528:	4293      	cmp	r3, r2
 810352a:	d040      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	4a5a      	ldr	r2, [pc, #360]	; (810369c <HAL_DMA_IRQHandler+0x1c0>)
 8103532:	4293      	cmp	r3, r2
 8103534:	d03b      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a59      	ldr	r2, [pc, #356]	; (81036a0 <HAL_DMA_IRQHandler+0x1c4>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d036      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a57      	ldr	r2, [pc, #348]	; (81036a4 <HAL_DMA_IRQHandler+0x1c8>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d031      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	4a56      	ldr	r2, [pc, #344]	; (81036a8 <HAL_DMA_IRQHandler+0x1cc>)
 8103550:	4293      	cmp	r3, r2
 8103552:	d02c      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	4a54      	ldr	r2, [pc, #336]	; (81036ac <HAL_DMA_IRQHandler+0x1d0>)
 810355a:	4293      	cmp	r3, r2
 810355c:	d027      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	4a53      	ldr	r2, [pc, #332]	; (81036b0 <HAL_DMA_IRQHandler+0x1d4>)
 8103564:	4293      	cmp	r3, r2
 8103566:	d022      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	4a51      	ldr	r2, [pc, #324]	; (81036b4 <HAL_DMA_IRQHandler+0x1d8>)
 810356e:	4293      	cmp	r3, r2
 8103570:	d01d      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	4a50      	ldr	r2, [pc, #320]	; (81036b8 <HAL_DMA_IRQHandler+0x1dc>)
 8103578:	4293      	cmp	r3, r2
 810357a:	d018      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	4a4e      	ldr	r2, [pc, #312]	; (81036bc <HAL_DMA_IRQHandler+0x1e0>)
 8103582:	4293      	cmp	r3, r2
 8103584:	d013      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	4a4d      	ldr	r2, [pc, #308]	; (81036c0 <HAL_DMA_IRQHandler+0x1e4>)
 810358c:	4293      	cmp	r3, r2
 810358e:	d00e      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	4a4b      	ldr	r2, [pc, #300]	; (81036c4 <HAL_DMA_IRQHandler+0x1e8>)
 8103596:	4293      	cmp	r3, r2
 8103598:	d009      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	4a4a      	ldr	r2, [pc, #296]	; (81036c8 <HAL_DMA_IRQHandler+0x1ec>)
 81035a0:	4293      	cmp	r3, r2
 81035a2:	d004      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	4a48      	ldr	r2, [pc, #288]	; (81036cc <HAL_DMA_IRQHandler+0x1f0>)
 81035aa:	4293      	cmp	r3, r2
 81035ac:	d101      	bne.n	81035b2 <HAL_DMA_IRQHandler+0xd6>
 81035ae:	2301      	movs	r3, #1
 81035b0:	e000      	b.n	81035b4 <HAL_DMA_IRQHandler+0xd8>
 81035b2:	2300      	movs	r3, #0
 81035b4:	2b00      	cmp	r3, #0
 81035b6:	f000 842b 	beq.w	8103e10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81035be:	f003 031f 	and.w	r3, r3, #31
 81035c2:	2208      	movs	r2, #8
 81035c4:	409a      	lsls	r2, r3
 81035c6:	69bb      	ldr	r3, [r7, #24]
 81035c8:	4013      	ands	r3, r2
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	f000 80a2 	beq.w	8103714 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	4a2e      	ldr	r2, [pc, #184]	; (8103690 <HAL_DMA_IRQHandler+0x1b4>)
 81035d6:	4293      	cmp	r3, r2
 81035d8:	d04a      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	4a2d      	ldr	r2, [pc, #180]	; (8103694 <HAL_DMA_IRQHandler+0x1b8>)
 81035e0:	4293      	cmp	r3, r2
 81035e2:	d045      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	4a2b      	ldr	r2, [pc, #172]	; (8103698 <HAL_DMA_IRQHandler+0x1bc>)
 81035ea:	4293      	cmp	r3, r2
 81035ec:	d040      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	681b      	ldr	r3, [r3, #0]
 81035f2:	4a2a      	ldr	r2, [pc, #168]	; (810369c <HAL_DMA_IRQHandler+0x1c0>)
 81035f4:	4293      	cmp	r3, r2
 81035f6:	d03b      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	4a28      	ldr	r2, [pc, #160]	; (81036a0 <HAL_DMA_IRQHandler+0x1c4>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d036      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	681b      	ldr	r3, [r3, #0]
 8103606:	4a27      	ldr	r2, [pc, #156]	; (81036a4 <HAL_DMA_IRQHandler+0x1c8>)
 8103608:	4293      	cmp	r3, r2
 810360a:	d031      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	4a25      	ldr	r2, [pc, #148]	; (81036a8 <HAL_DMA_IRQHandler+0x1cc>)
 8103612:	4293      	cmp	r3, r2
 8103614:	d02c      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	4a24      	ldr	r2, [pc, #144]	; (81036ac <HAL_DMA_IRQHandler+0x1d0>)
 810361c:	4293      	cmp	r3, r2
 810361e:	d027      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	4a22      	ldr	r2, [pc, #136]	; (81036b0 <HAL_DMA_IRQHandler+0x1d4>)
 8103626:	4293      	cmp	r3, r2
 8103628:	d022      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	4a21      	ldr	r2, [pc, #132]	; (81036b4 <HAL_DMA_IRQHandler+0x1d8>)
 8103630:	4293      	cmp	r3, r2
 8103632:	d01d      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a1f      	ldr	r2, [pc, #124]	; (81036b8 <HAL_DMA_IRQHandler+0x1dc>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d018      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4a1e      	ldr	r2, [pc, #120]	; (81036bc <HAL_DMA_IRQHandler+0x1e0>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d013      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	4a1c      	ldr	r2, [pc, #112]	; (81036c0 <HAL_DMA_IRQHandler+0x1e4>)
 810364e:	4293      	cmp	r3, r2
 8103650:	d00e      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4a1b      	ldr	r2, [pc, #108]	; (81036c4 <HAL_DMA_IRQHandler+0x1e8>)
 8103658:	4293      	cmp	r3, r2
 810365a:	d009      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a19      	ldr	r2, [pc, #100]	; (81036c8 <HAL_DMA_IRQHandler+0x1ec>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d004      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	4a18      	ldr	r2, [pc, #96]	; (81036cc <HAL_DMA_IRQHandler+0x1f0>)
 810366c:	4293      	cmp	r3, r2
 810366e:	d12f      	bne.n	81036d0 <HAL_DMA_IRQHandler+0x1f4>
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	f003 0304 	and.w	r3, r3, #4
 810367a:	2b00      	cmp	r3, #0
 810367c:	bf14      	ite	ne
 810367e:	2301      	movne	r3, #1
 8103680:	2300      	moveq	r3, #0
 8103682:	b2db      	uxtb	r3, r3
 8103684:	e02e      	b.n	81036e4 <HAL_DMA_IRQHandler+0x208>
 8103686:	bf00      	nop
 8103688:	10000000 	.word	0x10000000
 810368c:	1b4e81b5 	.word	0x1b4e81b5
 8103690:	40020010 	.word	0x40020010
 8103694:	40020028 	.word	0x40020028
 8103698:	40020040 	.word	0x40020040
 810369c:	40020058 	.word	0x40020058
 81036a0:	40020070 	.word	0x40020070
 81036a4:	40020088 	.word	0x40020088
 81036a8:	400200a0 	.word	0x400200a0
 81036ac:	400200b8 	.word	0x400200b8
 81036b0:	40020410 	.word	0x40020410
 81036b4:	40020428 	.word	0x40020428
 81036b8:	40020440 	.word	0x40020440
 81036bc:	40020458 	.word	0x40020458
 81036c0:	40020470 	.word	0x40020470
 81036c4:	40020488 	.word	0x40020488
 81036c8:	400204a0 	.word	0x400204a0
 81036cc:	400204b8 	.word	0x400204b8
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	f003 0308 	and.w	r3, r3, #8
 81036da:	2b00      	cmp	r3, #0
 81036dc:	bf14      	ite	ne
 81036de:	2301      	movne	r3, #1
 81036e0:	2300      	moveq	r3, #0
 81036e2:	b2db      	uxtb	r3, r3
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d015      	beq.n	8103714 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	681a      	ldr	r2, [r3, #0]
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	f022 0204 	bic.w	r2, r2, #4
 81036f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81036fc:	f003 031f 	and.w	r3, r3, #31
 8103700:	2208      	movs	r2, #8
 8103702:	409a      	lsls	r2, r3
 8103704:	6a3b      	ldr	r3, [r7, #32]
 8103706:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810370c:	f043 0201 	orr.w	r2, r3, #1
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103718:	f003 031f 	and.w	r3, r3, #31
 810371c:	69ba      	ldr	r2, [r7, #24]
 810371e:	fa22 f303 	lsr.w	r3, r2, r3
 8103722:	f003 0301 	and.w	r3, r3, #1
 8103726:	2b00      	cmp	r3, #0
 8103728:	d06e      	beq.n	8103808 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	681b      	ldr	r3, [r3, #0]
 810372e:	4a69      	ldr	r2, [pc, #420]	; (81038d4 <HAL_DMA_IRQHandler+0x3f8>)
 8103730:	4293      	cmp	r3, r2
 8103732:	d04a      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	4a67      	ldr	r2, [pc, #412]	; (81038d8 <HAL_DMA_IRQHandler+0x3fc>)
 810373a:	4293      	cmp	r3, r2
 810373c:	d045      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	4a66      	ldr	r2, [pc, #408]	; (81038dc <HAL_DMA_IRQHandler+0x400>)
 8103744:	4293      	cmp	r3, r2
 8103746:	d040      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	4a64      	ldr	r2, [pc, #400]	; (81038e0 <HAL_DMA_IRQHandler+0x404>)
 810374e:	4293      	cmp	r3, r2
 8103750:	d03b      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	681b      	ldr	r3, [r3, #0]
 8103756:	4a63      	ldr	r2, [pc, #396]	; (81038e4 <HAL_DMA_IRQHandler+0x408>)
 8103758:	4293      	cmp	r3, r2
 810375a:	d036      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	4a61      	ldr	r2, [pc, #388]	; (81038e8 <HAL_DMA_IRQHandler+0x40c>)
 8103762:	4293      	cmp	r3, r2
 8103764:	d031      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	681b      	ldr	r3, [r3, #0]
 810376a:	4a60      	ldr	r2, [pc, #384]	; (81038ec <HAL_DMA_IRQHandler+0x410>)
 810376c:	4293      	cmp	r3, r2
 810376e:	d02c      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	681b      	ldr	r3, [r3, #0]
 8103774:	4a5e      	ldr	r2, [pc, #376]	; (81038f0 <HAL_DMA_IRQHandler+0x414>)
 8103776:	4293      	cmp	r3, r2
 8103778:	d027      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	4a5d      	ldr	r2, [pc, #372]	; (81038f4 <HAL_DMA_IRQHandler+0x418>)
 8103780:	4293      	cmp	r3, r2
 8103782:	d022      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	681b      	ldr	r3, [r3, #0]
 8103788:	4a5b      	ldr	r2, [pc, #364]	; (81038f8 <HAL_DMA_IRQHandler+0x41c>)
 810378a:	4293      	cmp	r3, r2
 810378c:	d01d      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	681b      	ldr	r3, [r3, #0]
 8103792:	4a5a      	ldr	r2, [pc, #360]	; (81038fc <HAL_DMA_IRQHandler+0x420>)
 8103794:	4293      	cmp	r3, r2
 8103796:	d018      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	4a58      	ldr	r2, [pc, #352]	; (8103900 <HAL_DMA_IRQHandler+0x424>)
 810379e:	4293      	cmp	r3, r2
 81037a0:	d013      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	681b      	ldr	r3, [r3, #0]
 81037a6:	4a57      	ldr	r2, [pc, #348]	; (8103904 <HAL_DMA_IRQHandler+0x428>)
 81037a8:	4293      	cmp	r3, r2
 81037aa:	d00e      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	4a55      	ldr	r2, [pc, #340]	; (8103908 <HAL_DMA_IRQHandler+0x42c>)
 81037b2:	4293      	cmp	r3, r2
 81037b4:	d009      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	4a54      	ldr	r2, [pc, #336]	; (810390c <HAL_DMA_IRQHandler+0x430>)
 81037bc:	4293      	cmp	r3, r2
 81037be:	d004      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	4a52      	ldr	r2, [pc, #328]	; (8103910 <HAL_DMA_IRQHandler+0x434>)
 81037c6:	4293      	cmp	r3, r2
 81037c8:	d10a      	bne.n	81037e0 <HAL_DMA_IRQHandler+0x304>
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	681b      	ldr	r3, [r3, #0]
 81037ce:	695b      	ldr	r3, [r3, #20]
 81037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	bf14      	ite	ne
 81037d8:	2301      	movne	r3, #1
 81037da:	2300      	moveq	r3, #0
 81037dc:	b2db      	uxtb	r3, r3
 81037de:	e003      	b.n	81037e8 <HAL_DMA_IRQHandler+0x30c>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	2300      	movs	r3, #0
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d00d      	beq.n	8103808 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037f0:	f003 031f 	and.w	r3, r3, #31
 81037f4:	2201      	movs	r2, #1
 81037f6:	409a      	lsls	r2, r3
 81037f8:	6a3b      	ldr	r3, [r7, #32]
 81037fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103800:	f043 0202 	orr.w	r2, r3, #2
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810380c:	f003 031f 	and.w	r3, r3, #31
 8103810:	2204      	movs	r2, #4
 8103812:	409a      	lsls	r2, r3
 8103814:	69bb      	ldr	r3, [r7, #24]
 8103816:	4013      	ands	r3, r2
 8103818:	2b00      	cmp	r3, #0
 810381a:	f000 808f 	beq.w	810393c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	681b      	ldr	r3, [r3, #0]
 8103822:	4a2c      	ldr	r2, [pc, #176]	; (81038d4 <HAL_DMA_IRQHandler+0x3f8>)
 8103824:	4293      	cmp	r3, r2
 8103826:	d04a      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	4a2a      	ldr	r2, [pc, #168]	; (81038d8 <HAL_DMA_IRQHandler+0x3fc>)
 810382e:	4293      	cmp	r3, r2
 8103830:	d045      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	4a29      	ldr	r2, [pc, #164]	; (81038dc <HAL_DMA_IRQHandler+0x400>)
 8103838:	4293      	cmp	r3, r2
 810383a:	d040      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	4a27      	ldr	r2, [pc, #156]	; (81038e0 <HAL_DMA_IRQHandler+0x404>)
 8103842:	4293      	cmp	r3, r2
 8103844:	d03b      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	4a26      	ldr	r2, [pc, #152]	; (81038e4 <HAL_DMA_IRQHandler+0x408>)
 810384c:	4293      	cmp	r3, r2
 810384e:	d036      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	681b      	ldr	r3, [r3, #0]
 8103854:	4a24      	ldr	r2, [pc, #144]	; (81038e8 <HAL_DMA_IRQHandler+0x40c>)
 8103856:	4293      	cmp	r3, r2
 8103858:	d031      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	4a23      	ldr	r2, [pc, #140]	; (81038ec <HAL_DMA_IRQHandler+0x410>)
 8103860:	4293      	cmp	r3, r2
 8103862:	d02c      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	681b      	ldr	r3, [r3, #0]
 8103868:	4a21      	ldr	r2, [pc, #132]	; (81038f0 <HAL_DMA_IRQHandler+0x414>)
 810386a:	4293      	cmp	r3, r2
 810386c:	d027      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	4a20      	ldr	r2, [pc, #128]	; (81038f4 <HAL_DMA_IRQHandler+0x418>)
 8103874:	4293      	cmp	r3, r2
 8103876:	d022      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	681b      	ldr	r3, [r3, #0]
 810387c:	4a1e      	ldr	r2, [pc, #120]	; (81038f8 <HAL_DMA_IRQHandler+0x41c>)
 810387e:	4293      	cmp	r3, r2
 8103880:	d01d      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	681b      	ldr	r3, [r3, #0]
 8103886:	4a1d      	ldr	r2, [pc, #116]	; (81038fc <HAL_DMA_IRQHandler+0x420>)
 8103888:	4293      	cmp	r3, r2
 810388a:	d018      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	681b      	ldr	r3, [r3, #0]
 8103890:	4a1b      	ldr	r2, [pc, #108]	; (8103900 <HAL_DMA_IRQHandler+0x424>)
 8103892:	4293      	cmp	r3, r2
 8103894:	d013      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	681b      	ldr	r3, [r3, #0]
 810389a:	4a1a      	ldr	r2, [pc, #104]	; (8103904 <HAL_DMA_IRQHandler+0x428>)
 810389c:	4293      	cmp	r3, r2
 810389e:	d00e      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	4a18      	ldr	r2, [pc, #96]	; (8103908 <HAL_DMA_IRQHandler+0x42c>)
 81038a6:	4293      	cmp	r3, r2
 81038a8:	d009      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	4a17      	ldr	r2, [pc, #92]	; (810390c <HAL_DMA_IRQHandler+0x430>)
 81038b0:	4293      	cmp	r3, r2
 81038b2:	d004      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	4a15      	ldr	r2, [pc, #84]	; (8103910 <HAL_DMA_IRQHandler+0x434>)
 81038ba:	4293      	cmp	r3, r2
 81038bc:	d12a      	bne.n	8103914 <HAL_DMA_IRQHandler+0x438>
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	681b      	ldr	r3, [r3, #0]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	f003 0302 	and.w	r3, r3, #2
 81038c8:	2b00      	cmp	r3, #0
 81038ca:	bf14      	ite	ne
 81038cc:	2301      	movne	r3, #1
 81038ce:	2300      	moveq	r3, #0
 81038d0:	b2db      	uxtb	r3, r3
 81038d2:	e023      	b.n	810391c <HAL_DMA_IRQHandler+0x440>
 81038d4:	40020010 	.word	0x40020010
 81038d8:	40020028 	.word	0x40020028
 81038dc:	40020040 	.word	0x40020040
 81038e0:	40020058 	.word	0x40020058
 81038e4:	40020070 	.word	0x40020070
 81038e8:	40020088 	.word	0x40020088
 81038ec:	400200a0 	.word	0x400200a0
 81038f0:	400200b8 	.word	0x400200b8
 81038f4:	40020410 	.word	0x40020410
 81038f8:	40020428 	.word	0x40020428
 81038fc:	40020440 	.word	0x40020440
 8103900:	40020458 	.word	0x40020458
 8103904:	40020470 	.word	0x40020470
 8103908:	40020488 	.word	0x40020488
 810390c:	400204a0 	.word	0x400204a0
 8103910:	400204b8 	.word	0x400204b8
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	2300      	movs	r3, #0
 810391c:	2b00      	cmp	r3, #0
 810391e:	d00d      	beq.n	810393c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103924:	f003 031f 	and.w	r3, r3, #31
 8103928:	2204      	movs	r2, #4
 810392a:	409a      	lsls	r2, r3
 810392c:	6a3b      	ldr	r3, [r7, #32]
 810392e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103934:	f043 0204 	orr.w	r2, r3, #4
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103940:	f003 031f 	and.w	r3, r3, #31
 8103944:	2210      	movs	r2, #16
 8103946:	409a      	lsls	r2, r3
 8103948:	69bb      	ldr	r3, [r7, #24]
 810394a:	4013      	ands	r3, r2
 810394c:	2b00      	cmp	r3, #0
 810394e:	f000 80a6 	beq.w	8103a9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	4a85      	ldr	r2, [pc, #532]	; (8103b6c <HAL_DMA_IRQHandler+0x690>)
 8103958:	4293      	cmp	r3, r2
 810395a:	d04a      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	4a83      	ldr	r2, [pc, #524]	; (8103b70 <HAL_DMA_IRQHandler+0x694>)
 8103962:	4293      	cmp	r3, r2
 8103964:	d045      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	4a82      	ldr	r2, [pc, #520]	; (8103b74 <HAL_DMA_IRQHandler+0x698>)
 810396c:	4293      	cmp	r3, r2
 810396e:	d040      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	4a80      	ldr	r2, [pc, #512]	; (8103b78 <HAL_DMA_IRQHandler+0x69c>)
 8103976:	4293      	cmp	r3, r2
 8103978:	d03b      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	4a7f      	ldr	r2, [pc, #508]	; (8103b7c <HAL_DMA_IRQHandler+0x6a0>)
 8103980:	4293      	cmp	r3, r2
 8103982:	d036      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	4a7d      	ldr	r2, [pc, #500]	; (8103b80 <HAL_DMA_IRQHandler+0x6a4>)
 810398a:	4293      	cmp	r3, r2
 810398c:	d031      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	4a7c      	ldr	r2, [pc, #496]	; (8103b84 <HAL_DMA_IRQHandler+0x6a8>)
 8103994:	4293      	cmp	r3, r2
 8103996:	d02c      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	4a7a      	ldr	r2, [pc, #488]	; (8103b88 <HAL_DMA_IRQHandler+0x6ac>)
 810399e:	4293      	cmp	r3, r2
 81039a0:	d027      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	4a79      	ldr	r2, [pc, #484]	; (8103b8c <HAL_DMA_IRQHandler+0x6b0>)
 81039a8:	4293      	cmp	r3, r2
 81039aa:	d022      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	4a77      	ldr	r2, [pc, #476]	; (8103b90 <HAL_DMA_IRQHandler+0x6b4>)
 81039b2:	4293      	cmp	r3, r2
 81039b4:	d01d      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	4a76      	ldr	r2, [pc, #472]	; (8103b94 <HAL_DMA_IRQHandler+0x6b8>)
 81039bc:	4293      	cmp	r3, r2
 81039be:	d018      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	4a74      	ldr	r2, [pc, #464]	; (8103b98 <HAL_DMA_IRQHandler+0x6bc>)
 81039c6:	4293      	cmp	r3, r2
 81039c8:	d013      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	4a73      	ldr	r2, [pc, #460]	; (8103b9c <HAL_DMA_IRQHandler+0x6c0>)
 81039d0:	4293      	cmp	r3, r2
 81039d2:	d00e      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	4a71      	ldr	r2, [pc, #452]	; (8103ba0 <HAL_DMA_IRQHandler+0x6c4>)
 81039da:	4293      	cmp	r3, r2
 81039dc:	d009      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	4a70      	ldr	r2, [pc, #448]	; (8103ba4 <HAL_DMA_IRQHandler+0x6c8>)
 81039e4:	4293      	cmp	r3, r2
 81039e6:	d004      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	4a6e      	ldr	r2, [pc, #440]	; (8103ba8 <HAL_DMA_IRQHandler+0x6cc>)
 81039ee:	4293      	cmp	r3, r2
 81039f0:	d10a      	bne.n	8103a08 <HAL_DMA_IRQHandler+0x52c>
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	f003 0308 	and.w	r3, r3, #8
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	bf14      	ite	ne
 8103a00:	2301      	movne	r3, #1
 8103a02:	2300      	moveq	r3, #0
 8103a04:	b2db      	uxtb	r3, r3
 8103a06:	e009      	b.n	8103a1c <HAL_DMA_IRQHandler+0x540>
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	f003 0304 	and.w	r3, r3, #4
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	bf14      	ite	ne
 8103a16:	2301      	movne	r3, #1
 8103a18:	2300      	moveq	r3, #0
 8103a1a:	b2db      	uxtb	r3, r3
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	d03e      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a24:	f003 031f 	and.w	r3, r3, #31
 8103a28:	2210      	movs	r2, #16
 8103a2a:	409a      	lsls	r2, r3
 8103a2c:	6a3b      	ldr	r3, [r7, #32]
 8103a2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103a3a:	2b00      	cmp	r3, #0
 8103a3c:	d018      	beq.n	8103a70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	d108      	bne.n	8103a5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a50:	2b00      	cmp	r3, #0
 8103a52:	d024      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a58:	6878      	ldr	r0, [r7, #4]
 8103a5a:	4798      	blx	r3
 8103a5c:	e01f      	b.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a62:	2b00      	cmp	r3, #0
 8103a64:	d01b      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a6a:	6878      	ldr	r0, [r7, #4]
 8103a6c:	4798      	blx	r3
 8103a6e:	e016      	b.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a7a:	2b00      	cmp	r3, #0
 8103a7c:	d107      	bne.n	8103a8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	681a      	ldr	r2, [r3, #0]
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	f022 0208 	bic.w	r2, r2, #8
 8103a8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d003      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a9a:	6878      	ldr	r0, [r7, #4]
 8103a9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103aa2:	f003 031f 	and.w	r3, r3, #31
 8103aa6:	2220      	movs	r2, #32
 8103aa8:	409a      	lsls	r2, r3
 8103aaa:	69bb      	ldr	r3, [r7, #24]
 8103aac:	4013      	ands	r3, r2
 8103aae:	2b00      	cmp	r3, #0
 8103ab0:	f000 8110 	beq.w	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a2c      	ldr	r2, [pc, #176]	; (8103b6c <HAL_DMA_IRQHandler+0x690>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d04a      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a2b      	ldr	r2, [pc, #172]	; (8103b70 <HAL_DMA_IRQHandler+0x694>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d045      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a29      	ldr	r2, [pc, #164]	; (8103b74 <HAL_DMA_IRQHandler+0x698>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d040      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a28      	ldr	r2, [pc, #160]	; (8103b78 <HAL_DMA_IRQHandler+0x69c>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d03b      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a26      	ldr	r2, [pc, #152]	; (8103b7c <HAL_DMA_IRQHandler+0x6a0>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d036      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a25      	ldr	r2, [pc, #148]	; (8103b80 <HAL_DMA_IRQHandler+0x6a4>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d031      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a23      	ldr	r2, [pc, #140]	; (8103b84 <HAL_DMA_IRQHandler+0x6a8>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d02c      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	4a22      	ldr	r2, [pc, #136]	; (8103b88 <HAL_DMA_IRQHandler+0x6ac>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d027      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	4a20      	ldr	r2, [pc, #128]	; (8103b8c <HAL_DMA_IRQHandler+0x6b0>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d022      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	4a1f      	ldr	r2, [pc, #124]	; (8103b90 <HAL_DMA_IRQHandler+0x6b4>)
 8103b14:	4293      	cmp	r3, r2
 8103b16:	d01d      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	4a1d      	ldr	r2, [pc, #116]	; (8103b94 <HAL_DMA_IRQHandler+0x6b8>)
 8103b1e:	4293      	cmp	r3, r2
 8103b20:	d018      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	4a1c      	ldr	r2, [pc, #112]	; (8103b98 <HAL_DMA_IRQHandler+0x6bc>)
 8103b28:	4293      	cmp	r3, r2
 8103b2a:	d013      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	4a1a      	ldr	r2, [pc, #104]	; (8103b9c <HAL_DMA_IRQHandler+0x6c0>)
 8103b32:	4293      	cmp	r3, r2
 8103b34:	d00e      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	4a19      	ldr	r2, [pc, #100]	; (8103ba0 <HAL_DMA_IRQHandler+0x6c4>)
 8103b3c:	4293      	cmp	r3, r2
 8103b3e:	d009      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	4a17      	ldr	r2, [pc, #92]	; (8103ba4 <HAL_DMA_IRQHandler+0x6c8>)
 8103b46:	4293      	cmp	r3, r2
 8103b48:	d004      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	4a16      	ldr	r2, [pc, #88]	; (8103ba8 <HAL_DMA_IRQHandler+0x6cc>)
 8103b50:	4293      	cmp	r3, r2
 8103b52:	d12b      	bne.n	8103bac <HAL_DMA_IRQHandler+0x6d0>
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	f003 0310 	and.w	r3, r3, #16
 8103b5e:	2b00      	cmp	r3, #0
 8103b60:	bf14      	ite	ne
 8103b62:	2301      	movne	r3, #1
 8103b64:	2300      	moveq	r3, #0
 8103b66:	b2db      	uxtb	r3, r3
 8103b68:	e02a      	b.n	8103bc0 <HAL_DMA_IRQHandler+0x6e4>
 8103b6a:	bf00      	nop
 8103b6c:	40020010 	.word	0x40020010
 8103b70:	40020028 	.word	0x40020028
 8103b74:	40020040 	.word	0x40020040
 8103b78:	40020058 	.word	0x40020058
 8103b7c:	40020070 	.word	0x40020070
 8103b80:	40020088 	.word	0x40020088
 8103b84:	400200a0 	.word	0x400200a0
 8103b88:	400200b8 	.word	0x400200b8
 8103b8c:	40020410 	.word	0x40020410
 8103b90:	40020428 	.word	0x40020428
 8103b94:	40020440 	.word	0x40020440
 8103b98:	40020458 	.word	0x40020458
 8103b9c:	40020470 	.word	0x40020470
 8103ba0:	40020488 	.word	0x40020488
 8103ba4:	400204a0 	.word	0x400204a0
 8103ba8:	400204b8 	.word	0x400204b8
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	681b      	ldr	r3, [r3, #0]
 8103bb2:	f003 0302 	and.w	r3, r3, #2
 8103bb6:	2b00      	cmp	r3, #0
 8103bb8:	bf14      	ite	ne
 8103bba:	2301      	movne	r3, #1
 8103bbc:	2300      	moveq	r3, #0
 8103bbe:	b2db      	uxtb	r3, r3
 8103bc0:	2b00      	cmp	r3, #0
 8103bc2:	f000 8087 	beq.w	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bca:	f003 031f 	and.w	r3, r3, #31
 8103bce:	2220      	movs	r2, #32
 8103bd0:	409a      	lsls	r2, r3
 8103bd2:	6a3b      	ldr	r3, [r7, #32]
 8103bd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103bdc:	b2db      	uxtb	r3, r3
 8103bde:	2b04      	cmp	r3, #4
 8103be0:	d139      	bne.n	8103c56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	681a      	ldr	r2, [r3, #0]
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	f022 0216 	bic.w	r2, r2, #22
 8103bf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	695a      	ldr	r2, [r3, #20]
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103c00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103c06:	2b00      	cmp	r3, #0
 8103c08:	d103      	bne.n	8103c12 <HAL_DMA_IRQHandler+0x736>
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c0e:	2b00      	cmp	r3, #0
 8103c10:	d007      	beq.n	8103c22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	681b      	ldr	r3, [r3, #0]
 8103c16:	681a      	ldr	r2, [r3, #0]
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	f022 0208 	bic.w	r2, r2, #8
 8103c20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c26:	f003 031f 	and.w	r3, r3, #31
 8103c2a:	223f      	movs	r2, #63	; 0x3f
 8103c2c:	409a      	lsls	r2, r3
 8103c2e:	6a3b      	ldr	r3, [r7, #32]
 8103c30:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	2200      	movs	r2, #0
 8103c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	2201      	movs	r2, #1
 8103c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c46:	2b00      	cmp	r3, #0
 8103c48:	f000 834a 	beq.w	81042e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c50:	6878      	ldr	r0, [r7, #4]
 8103c52:	4798      	blx	r3
          }
          return;
 8103c54:	e344      	b.n	81042e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	d018      	beq.n	8103c96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103c6e:	2b00      	cmp	r3, #0
 8103c70:	d108      	bne.n	8103c84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c76:	2b00      	cmp	r3, #0
 8103c78:	d02c      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c7e:	6878      	ldr	r0, [r7, #4]
 8103c80:	4798      	blx	r3
 8103c82:	e027      	b.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c88:	2b00      	cmp	r3, #0
 8103c8a:	d023      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c90:	6878      	ldr	r0, [r7, #4]
 8103c92:	4798      	blx	r3
 8103c94:	e01e      	b.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	d10f      	bne.n	8103cc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	681a      	ldr	r2, [r3, #0]
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	f022 0210 	bic.w	r2, r2, #16
 8103cb2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	2200      	movs	r2, #0
 8103cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	2201      	movs	r2, #1
 8103cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cc8:	2b00      	cmp	r3, #0
 8103cca:	d003      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cd0:	6878      	ldr	r0, [r7, #4]
 8103cd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cd8:	2b00      	cmp	r3, #0
 8103cda:	f000 8306 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ce2:	f003 0301 	and.w	r3, r3, #1
 8103ce6:	2b00      	cmp	r3, #0
 8103ce8:	f000 8088 	beq.w	8103dfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	2204      	movs	r2, #4
 8103cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	4a7a      	ldr	r2, [pc, #488]	; (8103ee4 <HAL_DMA_IRQHandler+0xa08>)
 8103cfa:	4293      	cmp	r3, r2
 8103cfc:	d04a      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	681b      	ldr	r3, [r3, #0]
 8103d02:	4a79      	ldr	r2, [pc, #484]	; (8103ee8 <HAL_DMA_IRQHandler+0xa0c>)
 8103d04:	4293      	cmp	r3, r2
 8103d06:	d045      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	4a77      	ldr	r2, [pc, #476]	; (8103eec <HAL_DMA_IRQHandler+0xa10>)
 8103d0e:	4293      	cmp	r3, r2
 8103d10:	d040      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	681b      	ldr	r3, [r3, #0]
 8103d16:	4a76      	ldr	r2, [pc, #472]	; (8103ef0 <HAL_DMA_IRQHandler+0xa14>)
 8103d18:	4293      	cmp	r3, r2
 8103d1a:	d03b      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	4a74      	ldr	r2, [pc, #464]	; (8103ef4 <HAL_DMA_IRQHandler+0xa18>)
 8103d22:	4293      	cmp	r3, r2
 8103d24:	d036      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	681b      	ldr	r3, [r3, #0]
 8103d2a:	4a73      	ldr	r2, [pc, #460]	; (8103ef8 <HAL_DMA_IRQHandler+0xa1c>)
 8103d2c:	4293      	cmp	r3, r2
 8103d2e:	d031      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	681b      	ldr	r3, [r3, #0]
 8103d34:	4a71      	ldr	r2, [pc, #452]	; (8103efc <HAL_DMA_IRQHandler+0xa20>)
 8103d36:	4293      	cmp	r3, r2
 8103d38:	d02c      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	681b      	ldr	r3, [r3, #0]
 8103d3e:	4a70      	ldr	r2, [pc, #448]	; (8103f00 <HAL_DMA_IRQHandler+0xa24>)
 8103d40:	4293      	cmp	r3, r2
 8103d42:	d027      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	4a6e      	ldr	r2, [pc, #440]	; (8103f04 <HAL_DMA_IRQHandler+0xa28>)
 8103d4a:	4293      	cmp	r3, r2
 8103d4c:	d022      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	4a6d      	ldr	r2, [pc, #436]	; (8103f08 <HAL_DMA_IRQHandler+0xa2c>)
 8103d54:	4293      	cmp	r3, r2
 8103d56:	d01d      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	4a6b      	ldr	r2, [pc, #428]	; (8103f0c <HAL_DMA_IRQHandler+0xa30>)
 8103d5e:	4293      	cmp	r3, r2
 8103d60:	d018      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	681b      	ldr	r3, [r3, #0]
 8103d66:	4a6a      	ldr	r2, [pc, #424]	; (8103f10 <HAL_DMA_IRQHandler+0xa34>)
 8103d68:	4293      	cmp	r3, r2
 8103d6a:	d013      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	4a68      	ldr	r2, [pc, #416]	; (8103f14 <HAL_DMA_IRQHandler+0xa38>)
 8103d72:	4293      	cmp	r3, r2
 8103d74:	d00e      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	681b      	ldr	r3, [r3, #0]
 8103d7a:	4a67      	ldr	r2, [pc, #412]	; (8103f18 <HAL_DMA_IRQHandler+0xa3c>)
 8103d7c:	4293      	cmp	r3, r2
 8103d7e:	d009      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	4a65      	ldr	r2, [pc, #404]	; (8103f1c <HAL_DMA_IRQHandler+0xa40>)
 8103d86:	4293      	cmp	r3, r2
 8103d88:	d004      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	681b      	ldr	r3, [r3, #0]
 8103d8e:	4a64      	ldr	r2, [pc, #400]	; (8103f20 <HAL_DMA_IRQHandler+0xa44>)
 8103d90:	4293      	cmp	r3, r2
 8103d92:	d108      	bne.n	8103da6 <HAL_DMA_IRQHandler+0x8ca>
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	681a      	ldr	r2, [r3, #0]
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	f022 0201 	bic.w	r2, r2, #1
 8103da2:	601a      	str	r2, [r3, #0]
 8103da4:	e007      	b.n	8103db6 <HAL_DMA_IRQHandler+0x8da>
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	681a      	ldr	r2, [r3, #0]
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	f022 0201 	bic.w	r2, r2, #1
 8103db4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8103db6:	68fb      	ldr	r3, [r7, #12]
 8103db8:	3301      	adds	r3, #1
 8103dba:	60fb      	str	r3, [r7, #12]
 8103dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103dbe:	429a      	cmp	r2, r3
 8103dc0:	d307      	bcc.n	8103dd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	f003 0301 	and.w	r3, r3, #1
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d1f2      	bne.n	8103db6 <HAL_DMA_IRQHandler+0x8da>
 8103dd0:	e000      	b.n	8103dd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103dd2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	2200      	movs	r2, #0
 8103dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	681b      	ldr	r3, [r3, #0]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	f003 0301 	and.w	r3, r3, #1
 8103de6:	2b00      	cmp	r3, #0
 8103de8:	d004      	beq.n	8103df4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	2203      	movs	r2, #3
 8103dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103df2:	e003      	b.n	8103dfc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	2201      	movs	r2, #1
 8103df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e00:	2b00      	cmp	r3, #0
 8103e02:	f000 8272 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e0a:	6878      	ldr	r0, [r7, #4]
 8103e0c:	4798      	blx	r3
 8103e0e:	e26c      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	4a43      	ldr	r2, [pc, #268]	; (8103f24 <HAL_DMA_IRQHandler+0xa48>)
 8103e16:	4293      	cmp	r3, r2
 8103e18:	d022      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	4a42      	ldr	r2, [pc, #264]	; (8103f28 <HAL_DMA_IRQHandler+0xa4c>)
 8103e20:	4293      	cmp	r3, r2
 8103e22:	d01d      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	4a40      	ldr	r2, [pc, #256]	; (8103f2c <HAL_DMA_IRQHandler+0xa50>)
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d018      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	4a3f      	ldr	r2, [pc, #252]	; (8103f30 <HAL_DMA_IRQHandler+0xa54>)
 8103e34:	4293      	cmp	r3, r2
 8103e36:	d013      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	4a3d      	ldr	r2, [pc, #244]	; (8103f34 <HAL_DMA_IRQHandler+0xa58>)
 8103e3e:	4293      	cmp	r3, r2
 8103e40:	d00e      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	4a3c      	ldr	r2, [pc, #240]	; (8103f38 <HAL_DMA_IRQHandler+0xa5c>)
 8103e48:	4293      	cmp	r3, r2
 8103e4a:	d009      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	4a3a      	ldr	r2, [pc, #232]	; (8103f3c <HAL_DMA_IRQHandler+0xa60>)
 8103e52:	4293      	cmp	r3, r2
 8103e54:	d004      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	681b      	ldr	r3, [r3, #0]
 8103e5a:	4a39      	ldr	r2, [pc, #228]	; (8103f40 <HAL_DMA_IRQHandler+0xa64>)
 8103e5c:	4293      	cmp	r3, r2
 8103e5e:	d101      	bne.n	8103e64 <HAL_DMA_IRQHandler+0x988>
 8103e60:	2301      	movs	r3, #1
 8103e62:	e000      	b.n	8103e66 <HAL_DMA_IRQHandler+0x98a>
 8103e64:	2300      	movs	r3, #0
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	f000 823f 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	681b      	ldr	r3, [r3, #0]
 8103e72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e78:	f003 031f 	and.w	r3, r3, #31
 8103e7c:	2204      	movs	r2, #4
 8103e7e:	409a      	lsls	r2, r3
 8103e80:	697b      	ldr	r3, [r7, #20]
 8103e82:	4013      	ands	r3, r2
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	f000 80cd 	beq.w	8104024 <HAL_DMA_IRQHandler+0xb48>
 8103e8a:	693b      	ldr	r3, [r7, #16]
 8103e8c:	f003 0304 	and.w	r3, r3, #4
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	f000 80c7 	beq.w	8104024 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e9a:	f003 031f 	and.w	r3, r3, #31
 8103e9e:	2204      	movs	r2, #4
 8103ea0:	409a      	lsls	r2, r3
 8103ea2:	69fb      	ldr	r3, [r7, #28]
 8103ea4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ea6:	693b      	ldr	r3, [r7, #16]
 8103ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103eac:	2b00      	cmp	r3, #0
 8103eae:	d049      	beq.n	8103f44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103eb0:	693b      	ldr	r3, [r7, #16]
 8103eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103eb6:	2b00      	cmp	r3, #0
 8103eb8:	d109      	bne.n	8103ece <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ebe:	2b00      	cmp	r3, #0
 8103ec0:	f000 8210 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ec8:	6878      	ldr	r0, [r7, #4]
 8103eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ecc:	e20a      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ed2:	2b00      	cmp	r3, #0
 8103ed4:	f000 8206 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103edc:	6878      	ldr	r0, [r7, #4]
 8103ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ee0:	e200      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
 8103ee2:	bf00      	nop
 8103ee4:	40020010 	.word	0x40020010
 8103ee8:	40020028 	.word	0x40020028
 8103eec:	40020040 	.word	0x40020040
 8103ef0:	40020058 	.word	0x40020058
 8103ef4:	40020070 	.word	0x40020070
 8103ef8:	40020088 	.word	0x40020088
 8103efc:	400200a0 	.word	0x400200a0
 8103f00:	400200b8 	.word	0x400200b8
 8103f04:	40020410 	.word	0x40020410
 8103f08:	40020428 	.word	0x40020428
 8103f0c:	40020440 	.word	0x40020440
 8103f10:	40020458 	.word	0x40020458
 8103f14:	40020470 	.word	0x40020470
 8103f18:	40020488 	.word	0x40020488
 8103f1c:	400204a0 	.word	0x400204a0
 8103f20:	400204b8 	.word	0x400204b8
 8103f24:	58025408 	.word	0x58025408
 8103f28:	5802541c 	.word	0x5802541c
 8103f2c:	58025430 	.word	0x58025430
 8103f30:	58025444 	.word	0x58025444
 8103f34:	58025458 	.word	0x58025458
 8103f38:	5802546c 	.word	0x5802546c
 8103f3c:	58025480 	.word	0x58025480
 8103f40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103f44:	693b      	ldr	r3, [r7, #16]
 8103f46:	f003 0320 	and.w	r3, r3, #32
 8103f4a:	2b00      	cmp	r3, #0
 8103f4c:	d160      	bne.n	8104010 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a8c      	ldr	r2, [pc, #560]	; (8104184 <HAL_DMA_IRQHandler+0xca8>)
 8103f54:	4293      	cmp	r3, r2
 8103f56:	d04a      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	4a8a      	ldr	r2, [pc, #552]	; (8104188 <HAL_DMA_IRQHandler+0xcac>)
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d045      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	681b      	ldr	r3, [r3, #0]
 8103f66:	4a89      	ldr	r2, [pc, #548]	; (810418c <HAL_DMA_IRQHandler+0xcb0>)
 8103f68:	4293      	cmp	r3, r2
 8103f6a:	d040      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	4a87      	ldr	r2, [pc, #540]	; (8104190 <HAL_DMA_IRQHandler+0xcb4>)
 8103f72:	4293      	cmp	r3, r2
 8103f74:	d03b      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	4a86      	ldr	r2, [pc, #536]	; (8104194 <HAL_DMA_IRQHandler+0xcb8>)
 8103f7c:	4293      	cmp	r3, r2
 8103f7e:	d036      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	681b      	ldr	r3, [r3, #0]
 8103f84:	4a84      	ldr	r2, [pc, #528]	; (8104198 <HAL_DMA_IRQHandler+0xcbc>)
 8103f86:	4293      	cmp	r3, r2
 8103f88:	d031      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	4a83      	ldr	r2, [pc, #524]	; (810419c <HAL_DMA_IRQHandler+0xcc0>)
 8103f90:	4293      	cmp	r3, r2
 8103f92:	d02c      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	4a81      	ldr	r2, [pc, #516]	; (81041a0 <HAL_DMA_IRQHandler+0xcc4>)
 8103f9a:	4293      	cmp	r3, r2
 8103f9c:	d027      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	4a80      	ldr	r2, [pc, #512]	; (81041a4 <HAL_DMA_IRQHandler+0xcc8>)
 8103fa4:	4293      	cmp	r3, r2
 8103fa6:	d022      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	4a7e      	ldr	r2, [pc, #504]	; (81041a8 <HAL_DMA_IRQHandler+0xccc>)
 8103fae:	4293      	cmp	r3, r2
 8103fb0:	d01d      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	4a7d      	ldr	r2, [pc, #500]	; (81041ac <HAL_DMA_IRQHandler+0xcd0>)
 8103fb8:	4293      	cmp	r3, r2
 8103fba:	d018      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	4a7b      	ldr	r2, [pc, #492]	; (81041b0 <HAL_DMA_IRQHandler+0xcd4>)
 8103fc2:	4293      	cmp	r3, r2
 8103fc4:	d013      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	4a7a      	ldr	r2, [pc, #488]	; (81041b4 <HAL_DMA_IRQHandler+0xcd8>)
 8103fcc:	4293      	cmp	r3, r2
 8103fce:	d00e      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	4a78      	ldr	r2, [pc, #480]	; (81041b8 <HAL_DMA_IRQHandler+0xcdc>)
 8103fd6:	4293      	cmp	r3, r2
 8103fd8:	d009      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	681b      	ldr	r3, [r3, #0]
 8103fde:	4a77      	ldr	r2, [pc, #476]	; (81041bc <HAL_DMA_IRQHandler+0xce0>)
 8103fe0:	4293      	cmp	r3, r2
 8103fe2:	d004      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	4a75      	ldr	r2, [pc, #468]	; (81041c0 <HAL_DMA_IRQHandler+0xce4>)
 8103fea:	4293      	cmp	r3, r2
 8103fec:	d108      	bne.n	8104000 <HAL_DMA_IRQHandler+0xb24>
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	681a      	ldr	r2, [r3, #0]
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	f022 0208 	bic.w	r2, r2, #8
 8103ffc:	601a      	str	r2, [r3, #0]
 8103ffe:	e007      	b.n	8104010 <HAL_DMA_IRQHandler+0xb34>
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	681a      	ldr	r2, [r3, #0]
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	f022 0204 	bic.w	r2, r2, #4
 810400e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104014:	2b00      	cmp	r3, #0
 8104016:	f000 8165 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810401e:	6878      	ldr	r0, [r7, #4]
 8104020:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104022:	e15f      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104028:	f003 031f 	and.w	r3, r3, #31
 810402c:	2202      	movs	r2, #2
 810402e:	409a      	lsls	r2, r3
 8104030:	697b      	ldr	r3, [r7, #20]
 8104032:	4013      	ands	r3, r2
 8104034:	2b00      	cmp	r3, #0
 8104036:	f000 80c5 	beq.w	81041c4 <HAL_DMA_IRQHandler+0xce8>
 810403a:	693b      	ldr	r3, [r7, #16]
 810403c:	f003 0302 	and.w	r3, r3, #2
 8104040:	2b00      	cmp	r3, #0
 8104042:	f000 80bf 	beq.w	81041c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810404a:	f003 031f 	and.w	r3, r3, #31
 810404e:	2202      	movs	r2, #2
 8104050:	409a      	lsls	r2, r3
 8104052:	69fb      	ldr	r3, [r7, #28]
 8104054:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104056:	693b      	ldr	r3, [r7, #16]
 8104058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810405c:	2b00      	cmp	r3, #0
 810405e:	d018      	beq.n	8104092 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104060:	693b      	ldr	r3, [r7, #16]
 8104062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104066:	2b00      	cmp	r3, #0
 8104068:	d109      	bne.n	810407e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810406e:	2b00      	cmp	r3, #0
 8104070:	f000 813a 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104078:	6878      	ldr	r0, [r7, #4]
 810407a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810407c:	e134      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104082:	2b00      	cmp	r3, #0
 8104084:	f000 8130 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810408c:	6878      	ldr	r0, [r7, #4]
 810408e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104090:	e12a      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104092:	693b      	ldr	r3, [r7, #16]
 8104094:	f003 0320 	and.w	r3, r3, #32
 8104098:	2b00      	cmp	r3, #0
 810409a:	d168      	bne.n	810416e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a38      	ldr	r2, [pc, #224]	; (8104184 <HAL_DMA_IRQHandler+0xca8>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d04a      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a37      	ldr	r2, [pc, #220]	; (8104188 <HAL_DMA_IRQHandler+0xcac>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d045      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a35      	ldr	r2, [pc, #212]	; (810418c <HAL_DMA_IRQHandler+0xcb0>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d040      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a34      	ldr	r2, [pc, #208]	; (8104190 <HAL_DMA_IRQHandler+0xcb4>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d03b      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	4a32      	ldr	r2, [pc, #200]	; (8104194 <HAL_DMA_IRQHandler+0xcb8>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	d036      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	4a31      	ldr	r2, [pc, #196]	; (8104198 <HAL_DMA_IRQHandler+0xcbc>)
 81040d4:	4293      	cmp	r3, r2
 81040d6:	d031      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	4a2f      	ldr	r2, [pc, #188]	; (810419c <HAL_DMA_IRQHandler+0xcc0>)
 81040de:	4293      	cmp	r3, r2
 81040e0:	d02c      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a2e      	ldr	r2, [pc, #184]	; (81041a0 <HAL_DMA_IRQHandler+0xcc4>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d027      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a2c      	ldr	r2, [pc, #176]	; (81041a4 <HAL_DMA_IRQHandler+0xcc8>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d022      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a2b      	ldr	r2, [pc, #172]	; (81041a8 <HAL_DMA_IRQHandler+0xccc>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d01d      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	4a29      	ldr	r2, [pc, #164]	; (81041ac <HAL_DMA_IRQHandler+0xcd0>)
 8104106:	4293      	cmp	r3, r2
 8104108:	d018      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a28      	ldr	r2, [pc, #160]	; (81041b0 <HAL_DMA_IRQHandler+0xcd4>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d013      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a26      	ldr	r2, [pc, #152]	; (81041b4 <HAL_DMA_IRQHandler+0xcd8>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d00e      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a25      	ldr	r2, [pc, #148]	; (81041b8 <HAL_DMA_IRQHandler+0xcdc>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d009      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a23      	ldr	r2, [pc, #140]	; (81041bc <HAL_DMA_IRQHandler+0xce0>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d004      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a22      	ldr	r2, [pc, #136]	; (81041c0 <HAL_DMA_IRQHandler+0xce4>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d108      	bne.n	810414e <HAL_DMA_IRQHandler+0xc72>
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	681a      	ldr	r2, [r3, #0]
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	f022 0214 	bic.w	r2, r2, #20
 810414a:	601a      	str	r2, [r3, #0]
 810414c:	e007      	b.n	810415e <HAL_DMA_IRQHandler+0xc82>
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	681a      	ldr	r2, [r3, #0]
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	f022 020a 	bic.w	r2, r2, #10
 810415c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	2200      	movs	r2, #0
 8104162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	2201      	movs	r2, #1
 810416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104172:	2b00      	cmp	r3, #0
 8104174:	f000 80b8 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810417c:	6878      	ldr	r0, [r7, #4]
 810417e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104180:	e0b2      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
 8104182:	bf00      	nop
 8104184:	40020010 	.word	0x40020010
 8104188:	40020028 	.word	0x40020028
 810418c:	40020040 	.word	0x40020040
 8104190:	40020058 	.word	0x40020058
 8104194:	40020070 	.word	0x40020070
 8104198:	40020088 	.word	0x40020088
 810419c:	400200a0 	.word	0x400200a0
 81041a0:	400200b8 	.word	0x400200b8
 81041a4:	40020410 	.word	0x40020410
 81041a8:	40020428 	.word	0x40020428
 81041ac:	40020440 	.word	0x40020440
 81041b0:	40020458 	.word	0x40020458
 81041b4:	40020470 	.word	0x40020470
 81041b8:	40020488 	.word	0x40020488
 81041bc:	400204a0 	.word	0x400204a0
 81041c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041c8:	f003 031f 	and.w	r3, r3, #31
 81041cc:	2208      	movs	r2, #8
 81041ce:	409a      	lsls	r2, r3
 81041d0:	697b      	ldr	r3, [r7, #20]
 81041d2:	4013      	ands	r3, r2
 81041d4:	2b00      	cmp	r3, #0
 81041d6:	f000 8088 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
 81041da:	693b      	ldr	r3, [r7, #16]
 81041dc:	f003 0308 	and.w	r3, r3, #8
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	f000 8082 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	681b      	ldr	r3, [r3, #0]
 81041ea:	4a41      	ldr	r2, [pc, #260]	; (81042f0 <HAL_DMA_IRQHandler+0xe14>)
 81041ec:	4293      	cmp	r3, r2
 81041ee:	d04a      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	4a3f      	ldr	r2, [pc, #252]	; (81042f4 <HAL_DMA_IRQHandler+0xe18>)
 81041f6:	4293      	cmp	r3, r2
 81041f8:	d045      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	4a3e      	ldr	r2, [pc, #248]	; (81042f8 <HAL_DMA_IRQHandler+0xe1c>)
 8104200:	4293      	cmp	r3, r2
 8104202:	d040      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	4a3c      	ldr	r2, [pc, #240]	; (81042fc <HAL_DMA_IRQHandler+0xe20>)
 810420a:	4293      	cmp	r3, r2
 810420c:	d03b      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	4a3b      	ldr	r2, [pc, #236]	; (8104300 <HAL_DMA_IRQHandler+0xe24>)
 8104214:	4293      	cmp	r3, r2
 8104216:	d036      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	4a39      	ldr	r2, [pc, #228]	; (8104304 <HAL_DMA_IRQHandler+0xe28>)
 810421e:	4293      	cmp	r3, r2
 8104220:	d031      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	4a38      	ldr	r2, [pc, #224]	; (8104308 <HAL_DMA_IRQHandler+0xe2c>)
 8104228:	4293      	cmp	r3, r2
 810422a:	d02c      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	4a36      	ldr	r2, [pc, #216]	; (810430c <HAL_DMA_IRQHandler+0xe30>)
 8104232:	4293      	cmp	r3, r2
 8104234:	d027      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	4a35      	ldr	r2, [pc, #212]	; (8104310 <HAL_DMA_IRQHandler+0xe34>)
 810423c:	4293      	cmp	r3, r2
 810423e:	d022      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	4a33      	ldr	r2, [pc, #204]	; (8104314 <HAL_DMA_IRQHandler+0xe38>)
 8104246:	4293      	cmp	r3, r2
 8104248:	d01d      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	681b      	ldr	r3, [r3, #0]
 810424e:	4a32      	ldr	r2, [pc, #200]	; (8104318 <HAL_DMA_IRQHandler+0xe3c>)
 8104250:	4293      	cmp	r3, r2
 8104252:	d018      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104254:	687b      	ldr	r3, [r7, #4]
 8104256:	681b      	ldr	r3, [r3, #0]
 8104258:	4a30      	ldr	r2, [pc, #192]	; (810431c <HAL_DMA_IRQHandler+0xe40>)
 810425a:	4293      	cmp	r3, r2
 810425c:	d013      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	4a2f      	ldr	r2, [pc, #188]	; (8104320 <HAL_DMA_IRQHandler+0xe44>)
 8104264:	4293      	cmp	r3, r2
 8104266:	d00e      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	4a2d      	ldr	r2, [pc, #180]	; (8104324 <HAL_DMA_IRQHandler+0xe48>)
 810426e:	4293      	cmp	r3, r2
 8104270:	d009      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104272:	687b      	ldr	r3, [r7, #4]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	4a2c      	ldr	r2, [pc, #176]	; (8104328 <HAL_DMA_IRQHandler+0xe4c>)
 8104278:	4293      	cmp	r3, r2
 810427a:	d004      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	4a2a      	ldr	r2, [pc, #168]	; (810432c <HAL_DMA_IRQHandler+0xe50>)
 8104282:	4293      	cmp	r3, r2
 8104284:	d108      	bne.n	8104298 <HAL_DMA_IRQHandler+0xdbc>
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	681a      	ldr	r2, [r3, #0]
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	f022 021c 	bic.w	r2, r2, #28
 8104294:	601a      	str	r2, [r3, #0]
 8104296:	e007      	b.n	81042a8 <HAL_DMA_IRQHandler+0xdcc>
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	681b      	ldr	r3, [r3, #0]
 810429c:	681a      	ldr	r2, [r3, #0]
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	f022 020e 	bic.w	r2, r2, #14
 81042a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81042ac:	f003 031f 	and.w	r3, r3, #31
 81042b0:	2201      	movs	r2, #1
 81042b2:	409a      	lsls	r2, r3
 81042b4:	69fb      	ldr	r3, [r7, #28]
 81042b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	2201      	movs	r2, #1
 81042bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	2200      	movs	r2, #0
 81042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	2201      	movs	r2, #1
 81042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d009      	beq.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042da:	6878      	ldr	r0, [r7, #4]
 81042dc:	4798      	blx	r3
 81042de:	e004      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 81042e0:	bf00      	nop
 81042e2:	e002      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81042e4:	bf00      	nop
 81042e6:	e000      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81042e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81042ea:	3728      	adds	r7, #40	; 0x28
 81042ec:	46bd      	mov	sp, r7
 81042ee:	bd80      	pop	{r7, pc}
 81042f0:	40020010 	.word	0x40020010
 81042f4:	40020028 	.word	0x40020028
 81042f8:	40020040 	.word	0x40020040
 81042fc:	40020058 	.word	0x40020058
 8104300:	40020070 	.word	0x40020070
 8104304:	40020088 	.word	0x40020088
 8104308:	400200a0 	.word	0x400200a0
 810430c:	400200b8 	.word	0x400200b8
 8104310:	40020410 	.word	0x40020410
 8104314:	40020428 	.word	0x40020428
 8104318:	40020440 	.word	0x40020440
 810431c:	40020458 	.word	0x40020458
 8104320:	40020470 	.word	0x40020470
 8104324:	40020488 	.word	0x40020488
 8104328:	400204a0 	.word	0x400204a0
 810432c:	400204b8 	.word	0x400204b8

08104330 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104330:	b480      	push	{r7}
 8104332:	b087      	sub	sp, #28
 8104334:	af00      	add	r7, sp, #0
 8104336:	60f8      	str	r0, [r7, #12]
 8104338:	60b9      	str	r1, [r7, #8]
 810433a:	607a      	str	r2, [r7, #4]
 810433c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810433e:	68fb      	ldr	r3, [r7, #12]
 8104340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104342:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104348:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	4a84      	ldr	r2, [pc, #528]	; (8104560 <DMA_SetConfig+0x230>)
 8104350:	4293      	cmp	r3, r2
 8104352:	d072      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	4a82      	ldr	r2, [pc, #520]	; (8104564 <DMA_SetConfig+0x234>)
 810435a:	4293      	cmp	r3, r2
 810435c:	d06d      	beq.n	810443a <DMA_SetConfig+0x10a>
 810435e:	68fb      	ldr	r3, [r7, #12]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	4a81      	ldr	r2, [pc, #516]	; (8104568 <DMA_SetConfig+0x238>)
 8104364:	4293      	cmp	r3, r2
 8104366:	d068      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	4a7f      	ldr	r2, [pc, #508]	; (810456c <DMA_SetConfig+0x23c>)
 810436e:	4293      	cmp	r3, r2
 8104370:	d063      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	4a7e      	ldr	r2, [pc, #504]	; (8104570 <DMA_SetConfig+0x240>)
 8104378:	4293      	cmp	r3, r2
 810437a:	d05e      	beq.n	810443a <DMA_SetConfig+0x10a>
 810437c:	68fb      	ldr	r3, [r7, #12]
 810437e:	681b      	ldr	r3, [r3, #0]
 8104380:	4a7c      	ldr	r2, [pc, #496]	; (8104574 <DMA_SetConfig+0x244>)
 8104382:	4293      	cmp	r3, r2
 8104384:	d059      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	4a7b      	ldr	r2, [pc, #492]	; (8104578 <DMA_SetConfig+0x248>)
 810438c:	4293      	cmp	r3, r2
 810438e:	d054      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	4a79      	ldr	r2, [pc, #484]	; (810457c <DMA_SetConfig+0x24c>)
 8104396:	4293      	cmp	r3, r2
 8104398:	d04f      	beq.n	810443a <DMA_SetConfig+0x10a>
 810439a:	68fb      	ldr	r3, [r7, #12]
 810439c:	681b      	ldr	r3, [r3, #0]
 810439e:	4a78      	ldr	r2, [pc, #480]	; (8104580 <DMA_SetConfig+0x250>)
 81043a0:	4293      	cmp	r3, r2
 81043a2:	d04a      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043a4:	68fb      	ldr	r3, [r7, #12]
 81043a6:	681b      	ldr	r3, [r3, #0]
 81043a8:	4a76      	ldr	r2, [pc, #472]	; (8104584 <DMA_SetConfig+0x254>)
 81043aa:	4293      	cmp	r3, r2
 81043ac:	d045      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	4a75      	ldr	r2, [pc, #468]	; (8104588 <DMA_SetConfig+0x258>)
 81043b4:	4293      	cmp	r3, r2
 81043b6:	d040      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043b8:	68fb      	ldr	r3, [r7, #12]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	4a73      	ldr	r2, [pc, #460]	; (810458c <DMA_SetConfig+0x25c>)
 81043be:	4293      	cmp	r3, r2
 81043c0:	d03b      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043c2:	68fb      	ldr	r3, [r7, #12]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	4a72      	ldr	r2, [pc, #456]	; (8104590 <DMA_SetConfig+0x260>)
 81043c8:	4293      	cmp	r3, r2
 81043ca:	d036      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043cc:	68fb      	ldr	r3, [r7, #12]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	4a70      	ldr	r2, [pc, #448]	; (8104594 <DMA_SetConfig+0x264>)
 81043d2:	4293      	cmp	r3, r2
 81043d4:	d031      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	4a6f      	ldr	r2, [pc, #444]	; (8104598 <DMA_SetConfig+0x268>)
 81043dc:	4293      	cmp	r3, r2
 81043de:	d02c      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a6d      	ldr	r2, [pc, #436]	; (810459c <DMA_SetConfig+0x26c>)
 81043e6:	4293      	cmp	r3, r2
 81043e8:	d027      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043ea:	68fb      	ldr	r3, [r7, #12]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	4a6c      	ldr	r2, [pc, #432]	; (81045a0 <DMA_SetConfig+0x270>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d022      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	4a6a      	ldr	r2, [pc, #424]	; (81045a4 <DMA_SetConfig+0x274>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d01d      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043fe:	68fb      	ldr	r3, [r7, #12]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a69      	ldr	r2, [pc, #420]	; (81045a8 <DMA_SetConfig+0x278>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d018      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	4a67      	ldr	r2, [pc, #412]	; (81045ac <DMA_SetConfig+0x27c>)
 810440e:	4293      	cmp	r3, r2
 8104410:	d013      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104412:	68fb      	ldr	r3, [r7, #12]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a66      	ldr	r2, [pc, #408]	; (81045b0 <DMA_SetConfig+0x280>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d00e      	beq.n	810443a <DMA_SetConfig+0x10a>
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	4a64      	ldr	r2, [pc, #400]	; (81045b4 <DMA_SetConfig+0x284>)
 8104422:	4293      	cmp	r3, r2
 8104424:	d009      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104426:	68fb      	ldr	r3, [r7, #12]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4a63      	ldr	r2, [pc, #396]	; (81045b8 <DMA_SetConfig+0x288>)
 810442c:	4293      	cmp	r3, r2
 810442e:	d004      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104430:	68fb      	ldr	r3, [r7, #12]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a61      	ldr	r2, [pc, #388]	; (81045bc <DMA_SetConfig+0x28c>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d101      	bne.n	810443e <DMA_SetConfig+0x10e>
 810443a:	2301      	movs	r3, #1
 810443c:	e000      	b.n	8104440 <DMA_SetConfig+0x110>
 810443e:	2300      	movs	r3, #0
 8104440:	2b00      	cmp	r3, #0
 8104442:	d00d      	beq.n	8104460 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104448:	68fa      	ldr	r2, [r7, #12]
 810444a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810444c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104452:	2b00      	cmp	r3, #0
 8104454:	d004      	beq.n	8104460 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810445a:	68fa      	ldr	r2, [r7, #12]
 810445c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810445e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104460:	68fb      	ldr	r3, [r7, #12]
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	4a3e      	ldr	r2, [pc, #248]	; (8104560 <DMA_SetConfig+0x230>)
 8104466:	4293      	cmp	r3, r2
 8104468:	d04a      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810446a:	68fb      	ldr	r3, [r7, #12]
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	4a3d      	ldr	r2, [pc, #244]	; (8104564 <DMA_SetConfig+0x234>)
 8104470:	4293      	cmp	r3, r2
 8104472:	d045      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104474:	68fb      	ldr	r3, [r7, #12]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	4a3b      	ldr	r2, [pc, #236]	; (8104568 <DMA_SetConfig+0x238>)
 810447a:	4293      	cmp	r3, r2
 810447c:	d040      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810447e:	68fb      	ldr	r3, [r7, #12]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	4a3a      	ldr	r2, [pc, #232]	; (810456c <DMA_SetConfig+0x23c>)
 8104484:	4293      	cmp	r3, r2
 8104486:	d03b      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	4a38      	ldr	r2, [pc, #224]	; (8104570 <DMA_SetConfig+0x240>)
 810448e:	4293      	cmp	r3, r2
 8104490:	d036      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104492:	68fb      	ldr	r3, [r7, #12]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	4a37      	ldr	r2, [pc, #220]	; (8104574 <DMA_SetConfig+0x244>)
 8104498:	4293      	cmp	r3, r2
 810449a:	d031      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810449c:	68fb      	ldr	r3, [r7, #12]
 810449e:	681b      	ldr	r3, [r3, #0]
 81044a0:	4a35      	ldr	r2, [pc, #212]	; (8104578 <DMA_SetConfig+0x248>)
 81044a2:	4293      	cmp	r3, r2
 81044a4:	d02c      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044a6:	68fb      	ldr	r3, [r7, #12]
 81044a8:	681b      	ldr	r3, [r3, #0]
 81044aa:	4a34      	ldr	r2, [pc, #208]	; (810457c <DMA_SetConfig+0x24c>)
 81044ac:	4293      	cmp	r3, r2
 81044ae:	d027      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044b0:	68fb      	ldr	r3, [r7, #12]
 81044b2:	681b      	ldr	r3, [r3, #0]
 81044b4:	4a32      	ldr	r2, [pc, #200]	; (8104580 <DMA_SetConfig+0x250>)
 81044b6:	4293      	cmp	r3, r2
 81044b8:	d022      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	681b      	ldr	r3, [r3, #0]
 81044be:	4a31      	ldr	r2, [pc, #196]	; (8104584 <DMA_SetConfig+0x254>)
 81044c0:	4293      	cmp	r3, r2
 81044c2:	d01d      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	4a2f      	ldr	r2, [pc, #188]	; (8104588 <DMA_SetConfig+0x258>)
 81044ca:	4293      	cmp	r3, r2
 81044cc:	d018      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ce:	68fb      	ldr	r3, [r7, #12]
 81044d0:	681b      	ldr	r3, [r3, #0]
 81044d2:	4a2e      	ldr	r2, [pc, #184]	; (810458c <DMA_SetConfig+0x25c>)
 81044d4:	4293      	cmp	r3, r2
 81044d6:	d013      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044d8:	68fb      	ldr	r3, [r7, #12]
 81044da:	681b      	ldr	r3, [r3, #0]
 81044dc:	4a2c      	ldr	r2, [pc, #176]	; (8104590 <DMA_SetConfig+0x260>)
 81044de:	4293      	cmp	r3, r2
 81044e0:	d00e      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	4a2b      	ldr	r2, [pc, #172]	; (8104594 <DMA_SetConfig+0x264>)
 81044e8:	4293      	cmp	r3, r2
 81044ea:	d009      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	681b      	ldr	r3, [r3, #0]
 81044f0:	4a29      	ldr	r2, [pc, #164]	; (8104598 <DMA_SetConfig+0x268>)
 81044f2:	4293      	cmp	r3, r2
 81044f4:	d004      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	4a28      	ldr	r2, [pc, #160]	; (810459c <DMA_SetConfig+0x26c>)
 81044fc:	4293      	cmp	r3, r2
 81044fe:	d101      	bne.n	8104504 <DMA_SetConfig+0x1d4>
 8104500:	2301      	movs	r3, #1
 8104502:	e000      	b.n	8104506 <DMA_SetConfig+0x1d6>
 8104504:	2300      	movs	r3, #0
 8104506:	2b00      	cmp	r3, #0
 8104508:	d05a      	beq.n	81045c0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810450a:	68fb      	ldr	r3, [r7, #12]
 810450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810450e:	f003 031f 	and.w	r3, r3, #31
 8104512:	223f      	movs	r2, #63	; 0x3f
 8104514:	409a      	lsls	r2, r3
 8104516:	697b      	ldr	r3, [r7, #20]
 8104518:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810451a:	68fb      	ldr	r3, [r7, #12]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	681a      	ldr	r2, [r3, #0]
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104528:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	683a      	ldr	r2, [r7, #0]
 8104530:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104532:	68fb      	ldr	r3, [r7, #12]
 8104534:	689b      	ldr	r3, [r3, #8]
 8104536:	2b40      	cmp	r3, #64	; 0x40
 8104538:	d108      	bne.n	810454c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810453a:	68fb      	ldr	r3, [r7, #12]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	687a      	ldr	r2, [r7, #4]
 8104540:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8104542:	68fb      	ldr	r3, [r7, #12]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	68ba      	ldr	r2, [r7, #8]
 8104548:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810454a:	e087      	b.n	810465c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	68ba      	ldr	r2, [r7, #8]
 8104552:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104554:	68fb      	ldr	r3, [r7, #12]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	687a      	ldr	r2, [r7, #4]
 810455a:	60da      	str	r2, [r3, #12]
}
 810455c:	e07e      	b.n	810465c <DMA_SetConfig+0x32c>
 810455e:	bf00      	nop
 8104560:	40020010 	.word	0x40020010
 8104564:	40020028 	.word	0x40020028
 8104568:	40020040 	.word	0x40020040
 810456c:	40020058 	.word	0x40020058
 8104570:	40020070 	.word	0x40020070
 8104574:	40020088 	.word	0x40020088
 8104578:	400200a0 	.word	0x400200a0
 810457c:	400200b8 	.word	0x400200b8
 8104580:	40020410 	.word	0x40020410
 8104584:	40020428 	.word	0x40020428
 8104588:	40020440 	.word	0x40020440
 810458c:	40020458 	.word	0x40020458
 8104590:	40020470 	.word	0x40020470
 8104594:	40020488 	.word	0x40020488
 8104598:	400204a0 	.word	0x400204a0
 810459c:	400204b8 	.word	0x400204b8
 81045a0:	58025408 	.word	0x58025408
 81045a4:	5802541c 	.word	0x5802541c
 81045a8:	58025430 	.word	0x58025430
 81045ac:	58025444 	.word	0x58025444
 81045b0:	58025458 	.word	0x58025458
 81045b4:	5802546c 	.word	0x5802546c
 81045b8:	58025480 	.word	0x58025480
 81045bc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81045c0:	68fb      	ldr	r3, [r7, #12]
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	4a28      	ldr	r2, [pc, #160]	; (8104668 <DMA_SetConfig+0x338>)
 81045c6:	4293      	cmp	r3, r2
 81045c8:	d022      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045ca:	68fb      	ldr	r3, [r7, #12]
 81045cc:	681b      	ldr	r3, [r3, #0]
 81045ce:	4a27      	ldr	r2, [pc, #156]	; (810466c <DMA_SetConfig+0x33c>)
 81045d0:	4293      	cmp	r3, r2
 81045d2:	d01d      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045d4:	68fb      	ldr	r3, [r7, #12]
 81045d6:	681b      	ldr	r3, [r3, #0]
 81045d8:	4a25      	ldr	r2, [pc, #148]	; (8104670 <DMA_SetConfig+0x340>)
 81045da:	4293      	cmp	r3, r2
 81045dc:	d018      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045de:	68fb      	ldr	r3, [r7, #12]
 81045e0:	681b      	ldr	r3, [r3, #0]
 81045e2:	4a24      	ldr	r2, [pc, #144]	; (8104674 <DMA_SetConfig+0x344>)
 81045e4:	4293      	cmp	r3, r2
 81045e6:	d013      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	4a22      	ldr	r2, [pc, #136]	; (8104678 <DMA_SetConfig+0x348>)
 81045ee:	4293      	cmp	r3, r2
 81045f0:	d00e      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045f2:	68fb      	ldr	r3, [r7, #12]
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	4a21      	ldr	r2, [pc, #132]	; (810467c <DMA_SetConfig+0x34c>)
 81045f8:	4293      	cmp	r3, r2
 81045fa:	d009      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045fc:	68fb      	ldr	r3, [r7, #12]
 81045fe:	681b      	ldr	r3, [r3, #0]
 8104600:	4a1f      	ldr	r2, [pc, #124]	; (8104680 <DMA_SetConfig+0x350>)
 8104602:	4293      	cmp	r3, r2
 8104604:	d004      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	4a1e      	ldr	r2, [pc, #120]	; (8104684 <DMA_SetConfig+0x354>)
 810460c:	4293      	cmp	r3, r2
 810460e:	d101      	bne.n	8104614 <DMA_SetConfig+0x2e4>
 8104610:	2301      	movs	r3, #1
 8104612:	e000      	b.n	8104616 <DMA_SetConfig+0x2e6>
 8104614:	2300      	movs	r3, #0
 8104616:	2b00      	cmp	r3, #0
 8104618:	d020      	beq.n	810465c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810461a:	68fb      	ldr	r3, [r7, #12]
 810461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810461e:	f003 031f 	and.w	r3, r3, #31
 8104622:	2201      	movs	r2, #1
 8104624:	409a      	lsls	r2, r3
 8104626:	693b      	ldr	r3, [r7, #16]
 8104628:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810462a:	68fb      	ldr	r3, [r7, #12]
 810462c:	681b      	ldr	r3, [r3, #0]
 810462e:	683a      	ldr	r2, [r7, #0]
 8104630:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104632:	68fb      	ldr	r3, [r7, #12]
 8104634:	689b      	ldr	r3, [r3, #8]
 8104636:	2b40      	cmp	r3, #64	; 0x40
 8104638:	d108      	bne.n	810464c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	687a      	ldr	r2, [r7, #4]
 8104640:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8104642:	68fb      	ldr	r3, [r7, #12]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	68ba      	ldr	r2, [r7, #8]
 8104648:	60da      	str	r2, [r3, #12]
}
 810464a:	e007      	b.n	810465c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 810464c:	68fb      	ldr	r3, [r7, #12]
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	68ba      	ldr	r2, [r7, #8]
 8104652:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	687a      	ldr	r2, [r7, #4]
 810465a:	60da      	str	r2, [r3, #12]
}
 810465c:	bf00      	nop
 810465e:	371c      	adds	r7, #28
 8104660:	46bd      	mov	sp, r7
 8104662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104666:	4770      	bx	lr
 8104668:	58025408 	.word	0x58025408
 810466c:	5802541c 	.word	0x5802541c
 8104670:	58025430 	.word	0x58025430
 8104674:	58025444 	.word	0x58025444
 8104678:	58025458 	.word	0x58025458
 810467c:	5802546c 	.word	0x5802546c
 8104680:	58025480 	.word	0x58025480
 8104684:	58025494 	.word	0x58025494

08104688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104688:	b480      	push	{r7}
 810468a:	b085      	sub	sp, #20
 810468c:	af00      	add	r7, sp, #0
 810468e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	4a43      	ldr	r2, [pc, #268]	; (81047a4 <DMA_CalcBaseAndBitshift+0x11c>)
 8104696:	4293      	cmp	r3, r2
 8104698:	d04a      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	4a42      	ldr	r2, [pc, #264]	; (81047a8 <DMA_CalcBaseAndBitshift+0x120>)
 81046a0:	4293      	cmp	r3, r2
 81046a2:	d045      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	4a40      	ldr	r2, [pc, #256]	; (81047ac <DMA_CalcBaseAndBitshift+0x124>)
 81046aa:	4293      	cmp	r3, r2
 81046ac:	d040      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	4a3f      	ldr	r2, [pc, #252]	; (81047b0 <DMA_CalcBaseAndBitshift+0x128>)
 81046b4:	4293      	cmp	r3, r2
 81046b6:	d03b      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	4a3d      	ldr	r2, [pc, #244]	; (81047b4 <DMA_CalcBaseAndBitshift+0x12c>)
 81046be:	4293      	cmp	r3, r2
 81046c0:	d036      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	4a3c      	ldr	r2, [pc, #240]	; (81047b8 <DMA_CalcBaseAndBitshift+0x130>)
 81046c8:	4293      	cmp	r3, r2
 81046ca:	d031      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	681b      	ldr	r3, [r3, #0]
 81046d0:	4a3a      	ldr	r2, [pc, #232]	; (81047bc <DMA_CalcBaseAndBitshift+0x134>)
 81046d2:	4293      	cmp	r3, r2
 81046d4:	d02c      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4a39      	ldr	r2, [pc, #228]	; (81047c0 <DMA_CalcBaseAndBitshift+0x138>)
 81046dc:	4293      	cmp	r3, r2
 81046de:	d027      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	4a37      	ldr	r2, [pc, #220]	; (81047c4 <DMA_CalcBaseAndBitshift+0x13c>)
 81046e6:	4293      	cmp	r3, r2
 81046e8:	d022      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	4a36      	ldr	r2, [pc, #216]	; (81047c8 <DMA_CalcBaseAndBitshift+0x140>)
 81046f0:	4293      	cmp	r3, r2
 81046f2:	d01d      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	4a34      	ldr	r2, [pc, #208]	; (81047cc <DMA_CalcBaseAndBitshift+0x144>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d018      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	4a33      	ldr	r2, [pc, #204]	; (81047d0 <DMA_CalcBaseAndBitshift+0x148>)
 8104704:	4293      	cmp	r3, r2
 8104706:	d013      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	4a31      	ldr	r2, [pc, #196]	; (81047d4 <DMA_CalcBaseAndBitshift+0x14c>)
 810470e:	4293      	cmp	r3, r2
 8104710:	d00e      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	4a30      	ldr	r2, [pc, #192]	; (81047d8 <DMA_CalcBaseAndBitshift+0x150>)
 8104718:	4293      	cmp	r3, r2
 810471a:	d009      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a2e      	ldr	r2, [pc, #184]	; (81047dc <DMA_CalcBaseAndBitshift+0x154>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d004      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	4a2d      	ldr	r2, [pc, #180]	; (81047e0 <DMA_CalcBaseAndBitshift+0x158>)
 810472c:	4293      	cmp	r3, r2
 810472e:	d101      	bne.n	8104734 <DMA_CalcBaseAndBitshift+0xac>
 8104730:	2301      	movs	r3, #1
 8104732:	e000      	b.n	8104736 <DMA_CalcBaseAndBitshift+0xae>
 8104734:	2300      	movs	r3, #0
 8104736:	2b00      	cmp	r3, #0
 8104738:	d026      	beq.n	8104788 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	b2db      	uxtb	r3, r3
 8104740:	3b10      	subs	r3, #16
 8104742:	4a28      	ldr	r2, [pc, #160]	; (81047e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8104744:	fba2 2303 	umull	r2, r3, r2, r3
 8104748:	091b      	lsrs	r3, r3, #4
 810474a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810474c:	68fb      	ldr	r3, [r7, #12]
 810474e:	f003 0307 	and.w	r3, r3, #7
 8104752:	4a25      	ldr	r2, [pc, #148]	; (81047e8 <DMA_CalcBaseAndBitshift+0x160>)
 8104754:	5cd3      	ldrb	r3, [r2, r3]
 8104756:	461a      	mov	r2, r3
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	2b03      	cmp	r3, #3
 8104760:	d909      	bls.n	8104776 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810476a:	f023 0303 	bic.w	r3, r3, #3
 810476e:	1d1a      	adds	r2, r3, #4
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	659a      	str	r2, [r3, #88]	; 0x58
 8104774:	e00e      	b.n	8104794 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	681b      	ldr	r3, [r3, #0]
 810477a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810477e:	f023 0303 	bic.w	r3, r3, #3
 8104782:	687a      	ldr	r2, [r7, #4]
 8104784:	6593      	str	r3, [r2, #88]	; 0x58
 8104786:	e005      	b.n	8104794 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	681b      	ldr	r3, [r3, #0]
 810478c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104798:	4618      	mov	r0, r3
 810479a:	3714      	adds	r7, #20
 810479c:	46bd      	mov	sp, r7
 810479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a2:	4770      	bx	lr
 81047a4:	40020010 	.word	0x40020010
 81047a8:	40020028 	.word	0x40020028
 81047ac:	40020040 	.word	0x40020040
 81047b0:	40020058 	.word	0x40020058
 81047b4:	40020070 	.word	0x40020070
 81047b8:	40020088 	.word	0x40020088
 81047bc:	400200a0 	.word	0x400200a0
 81047c0:	400200b8 	.word	0x400200b8
 81047c4:	40020410 	.word	0x40020410
 81047c8:	40020428 	.word	0x40020428
 81047cc:	40020440 	.word	0x40020440
 81047d0:	40020458 	.word	0x40020458
 81047d4:	40020470 	.word	0x40020470
 81047d8:	40020488 	.word	0x40020488
 81047dc:	400204a0 	.word	0x400204a0
 81047e0:	400204b8 	.word	0x400204b8
 81047e4:	aaaaaaab 	.word	0xaaaaaaab
 81047e8:	08113fec 	.word	0x08113fec

081047ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81047ec:	b480      	push	{r7}
 81047ee:	b085      	sub	sp, #20
 81047f0:	af00      	add	r7, sp, #0
 81047f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81047f4:	2300      	movs	r3, #0
 81047f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	699b      	ldr	r3, [r3, #24]
 81047fc:	2b00      	cmp	r3, #0
 81047fe:	d120      	bne.n	8104842 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104804:	2b03      	cmp	r3, #3
 8104806:	d858      	bhi.n	81048ba <DMA_CheckFifoParam+0xce>
 8104808:	a201      	add	r2, pc, #4	; (adr r2, 8104810 <DMA_CheckFifoParam+0x24>)
 810480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810480e:	bf00      	nop
 8104810:	08104821 	.word	0x08104821
 8104814:	08104833 	.word	0x08104833
 8104818:	08104821 	.word	0x08104821
 810481c:	081048bb 	.word	0x081048bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104828:	2b00      	cmp	r3, #0
 810482a:	d048      	beq.n	81048be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810482c:	2301      	movs	r3, #1
 810482e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104830:	e045      	b.n	81048be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104836:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810483a:	d142      	bne.n	81048c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 810483c:	2301      	movs	r3, #1
 810483e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104840:	e03f      	b.n	81048c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	699b      	ldr	r3, [r3, #24]
 8104846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810484a:	d123      	bne.n	8104894 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104850:	2b03      	cmp	r3, #3
 8104852:	d838      	bhi.n	81048c6 <DMA_CheckFifoParam+0xda>
 8104854:	a201      	add	r2, pc, #4	; (adr r2, 810485c <DMA_CheckFifoParam+0x70>)
 8104856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810485a:	bf00      	nop
 810485c:	0810486d 	.word	0x0810486d
 8104860:	08104873 	.word	0x08104873
 8104864:	0810486d 	.word	0x0810486d
 8104868:	08104885 	.word	0x08104885
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 810486c:	2301      	movs	r3, #1
 810486e:	73fb      	strb	r3, [r7, #15]
        break;
 8104870:	e030      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810487a:	2b00      	cmp	r3, #0
 810487c:	d025      	beq.n	81048ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810487e:	2301      	movs	r3, #1
 8104880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104882:	e022      	b.n	81048ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810488c:	d11f      	bne.n	81048ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810488e:	2301      	movs	r3, #1
 8104890:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104892:	e01c      	b.n	81048ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104898:	2b02      	cmp	r3, #2
 810489a:	d902      	bls.n	81048a2 <DMA_CheckFifoParam+0xb6>
 810489c:	2b03      	cmp	r3, #3
 810489e:	d003      	beq.n	81048a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81048a0:	e018      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81048a2:	2301      	movs	r3, #1
 81048a4:	73fb      	strb	r3, [r7, #15]
        break;
 81048a6:	e015      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81048b0:	2b00      	cmp	r3, #0
 81048b2:	d00e      	beq.n	81048d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81048b4:	2301      	movs	r3, #1
 81048b6:	73fb      	strb	r3, [r7, #15]
    break;
 81048b8:	e00b      	b.n	81048d2 <DMA_CheckFifoParam+0xe6>
        break;
 81048ba:	bf00      	nop
 81048bc:	e00a      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048be:	bf00      	nop
 81048c0:	e008      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048c2:	bf00      	nop
 81048c4:	e006      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048c6:	bf00      	nop
 81048c8:	e004      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048ca:	bf00      	nop
 81048cc:	e002      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048ce:	bf00      	nop
 81048d0:	e000      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
    break;
 81048d2:	bf00      	nop
    }
  }

  return status;
 81048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81048d6:	4618      	mov	r0, r3
 81048d8:	3714      	adds	r7, #20
 81048da:	46bd      	mov	sp, r7
 81048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048e0:	4770      	bx	lr
 81048e2:	bf00      	nop

081048e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81048e4:	b480      	push	{r7}
 81048e6:	b085      	sub	sp, #20
 81048e8:	af00      	add	r7, sp, #0
 81048ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	4a3a      	ldr	r2, [pc, #232]	; (81049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81048f8:	4293      	cmp	r3, r2
 81048fa:	d022      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	4a38      	ldr	r2, [pc, #224]	; (81049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104902:	4293      	cmp	r3, r2
 8104904:	d01d      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	4a37      	ldr	r2, [pc, #220]	; (81049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810490c:	4293      	cmp	r3, r2
 810490e:	d018      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	4a35      	ldr	r2, [pc, #212]	; (81049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104916:	4293      	cmp	r3, r2
 8104918:	d013      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	681b      	ldr	r3, [r3, #0]
 810491e:	4a34      	ldr	r2, [pc, #208]	; (81049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104920:	4293      	cmp	r3, r2
 8104922:	d00e      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	4a32      	ldr	r2, [pc, #200]	; (81049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810492a:	4293      	cmp	r3, r2
 810492c:	d009      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810492e:	687b      	ldr	r3, [r7, #4]
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	4a31      	ldr	r2, [pc, #196]	; (81049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104934:	4293      	cmp	r3, r2
 8104936:	d004      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	681b      	ldr	r3, [r3, #0]
 810493c:	4a2f      	ldr	r2, [pc, #188]	; (81049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810493e:	4293      	cmp	r3, r2
 8104940:	d101      	bne.n	8104946 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104942:	2301      	movs	r3, #1
 8104944:	e000      	b.n	8104948 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104946:	2300      	movs	r3, #0
 8104948:	2b00      	cmp	r3, #0
 810494a:	d01c      	beq.n	8104986 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	681b      	ldr	r3, [r3, #0]
 8104950:	b2db      	uxtb	r3, r3
 8104952:	3b08      	subs	r3, #8
 8104954:	4a2a      	ldr	r2, [pc, #168]	; (8104a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104956:	fba2 2303 	umull	r2, r3, r2, r3
 810495a:	091b      	lsrs	r3, r3, #4
 810495c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810495e:	68fb      	ldr	r3, [r7, #12]
 8104960:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104964:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104968:	009b      	lsls	r3, r3, #2
 810496a:	461a      	mov	r2, r3
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	4a24      	ldr	r2, [pc, #144]	; (8104a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104974:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104976:	68fb      	ldr	r3, [r7, #12]
 8104978:	f003 031f 	and.w	r3, r3, #31
 810497c:	2201      	movs	r2, #1
 810497e:	409a      	lsls	r2, r3
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104984:	e026      	b.n	81049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	b2db      	uxtb	r3, r3
 810498c:	3b10      	subs	r3, #16
 810498e:	4a1e      	ldr	r2, [pc, #120]	; (8104a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104990:	fba2 2303 	umull	r2, r3, r2, r3
 8104994:	091b      	lsrs	r3, r3, #4
 8104996:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104998:	68bb      	ldr	r3, [r7, #8]
 810499a:	4a1c      	ldr	r2, [pc, #112]	; (8104a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810499c:	4293      	cmp	r3, r2
 810499e:	d806      	bhi.n	81049ae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81049a0:	68bb      	ldr	r3, [r7, #8]
 81049a2:	4a1b      	ldr	r2, [pc, #108]	; (8104a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81049a4:	4293      	cmp	r3, r2
 81049a6:	d902      	bls.n	81049ae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	3308      	adds	r3, #8
 81049ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81049b4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81049b8:	009b      	lsls	r3, r3, #2
 81049ba:	461a      	mov	r2, r3
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	4a14      	ldr	r2, [pc, #80]	; (8104a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81049c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81049c6:	68fb      	ldr	r3, [r7, #12]
 81049c8:	f003 031f 	and.w	r3, r3, #31
 81049cc:	2201      	movs	r2, #1
 81049ce:	409a      	lsls	r2, r3
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 81049d4:	bf00      	nop
 81049d6:	3714      	adds	r7, #20
 81049d8:	46bd      	mov	sp, r7
 81049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049de:	4770      	bx	lr
 81049e0:	58025408 	.word	0x58025408
 81049e4:	5802541c 	.word	0x5802541c
 81049e8:	58025430 	.word	0x58025430
 81049ec:	58025444 	.word	0x58025444
 81049f0:	58025458 	.word	0x58025458
 81049f4:	5802546c 	.word	0x5802546c
 81049f8:	58025480 	.word	0x58025480
 81049fc:	58025494 	.word	0x58025494
 8104a00:	cccccccd 	.word	0xcccccccd
 8104a04:	58025880 	.word	0x58025880
 8104a08:	aaaaaaab 	.word	0xaaaaaaab
 8104a0c:	400204b8 	.word	0x400204b8
 8104a10:	4002040f 	.word	0x4002040f
 8104a14:	40020880 	.word	0x40020880

08104a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104a18:	b480      	push	{r7}
 8104a1a:	b085      	sub	sp, #20
 8104a1c:	af00      	add	r7, sp, #0
 8104a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	685b      	ldr	r3, [r3, #4]
 8104a24:	b2db      	uxtb	r3, r3
 8104a26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	d04a      	beq.n	8104ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	2b08      	cmp	r3, #8
 8104a32:	d847      	bhi.n	8104ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	681b      	ldr	r3, [r3, #0]
 8104a38:	4a25      	ldr	r2, [pc, #148]	; (8104ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104a3a:	4293      	cmp	r3, r2
 8104a3c:	d022      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	681b      	ldr	r3, [r3, #0]
 8104a42:	4a24      	ldr	r2, [pc, #144]	; (8104ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104a44:	4293      	cmp	r3, r2
 8104a46:	d01d      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	4a22      	ldr	r2, [pc, #136]	; (8104ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104a4e:	4293      	cmp	r3, r2
 8104a50:	d018      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	4a21      	ldr	r2, [pc, #132]	; (8104adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104a58:	4293      	cmp	r3, r2
 8104a5a:	d013      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a5c:	687b      	ldr	r3, [r7, #4]
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	4a1f      	ldr	r2, [pc, #124]	; (8104ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104a62:	4293      	cmp	r3, r2
 8104a64:	d00e      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	4a1e      	ldr	r2, [pc, #120]	; (8104ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104a6c:	4293      	cmp	r3, r2
 8104a6e:	d009      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	681b      	ldr	r3, [r3, #0]
 8104a74:	4a1c      	ldr	r2, [pc, #112]	; (8104ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104a76:	4293      	cmp	r3, r2
 8104a78:	d004      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	4a1b      	ldr	r2, [pc, #108]	; (8104aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104a80:	4293      	cmp	r3, r2
 8104a82:	d101      	bne.n	8104a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104a84:	2301      	movs	r3, #1
 8104a86:	e000      	b.n	8104a8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104a88:	2300      	movs	r3, #0
 8104a8a:	2b00      	cmp	r3, #0
 8104a8c:	d00a      	beq.n	8104aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104a8e:	68fa      	ldr	r2, [r7, #12]
 8104a90:	4b17      	ldr	r3, [pc, #92]	; (8104af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104a92:	4413      	add	r3, r2
 8104a94:	009b      	lsls	r3, r3, #2
 8104a96:	461a      	mov	r2, r3
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	4a15      	ldr	r2, [pc, #84]	; (8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104aa0:	671a      	str	r2, [r3, #112]	; 0x70
 8104aa2:	e009      	b.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104aa4:	68fa      	ldr	r2, [r7, #12]
 8104aa6:	4b14      	ldr	r3, [pc, #80]	; (8104af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104aa8:	4413      	add	r3, r2
 8104aaa:	009b      	lsls	r3, r3, #2
 8104aac:	461a      	mov	r2, r3
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	4a11      	ldr	r2, [pc, #68]	; (8104afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104ab6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	3b01      	subs	r3, #1
 8104abc:	2201      	movs	r2, #1
 8104abe:	409a      	lsls	r2, r3
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104ac4:	bf00      	nop
 8104ac6:	3714      	adds	r7, #20
 8104ac8:	46bd      	mov	sp, r7
 8104aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ace:	4770      	bx	lr
 8104ad0:	58025408 	.word	0x58025408
 8104ad4:	5802541c 	.word	0x5802541c
 8104ad8:	58025430 	.word	0x58025430
 8104adc:	58025444 	.word	0x58025444
 8104ae0:	58025458 	.word	0x58025458
 8104ae4:	5802546c 	.word	0x5802546c
 8104ae8:	58025480 	.word	0x58025480
 8104aec:	58025494 	.word	0x58025494
 8104af0:	1600963f 	.word	0x1600963f
 8104af4:	58025940 	.word	0x58025940
 8104af8:	1000823f 	.word	0x1000823f
 8104afc:	40020940 	.word	0x40020940

08104b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104b00:	b480      	push	{r7}
 8104b02:	b089      	sub	sp, #36	; 0x24
 8104b04:	af00      	add	r7, sp, #0
 8104b06:	6078      	str	r0, [r7, #4]
 8104b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104b0a:	2300      	movs	r3, #0
 8104b0c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104b0e:	4b89      	ldr	r3, [pc, #548]	; (8104d34 <HAL_GPIO_Init+0x234>)
 8104b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104b12:	e194      	b.n	8104e3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104b14:	683b      	ldr	r3, [r7, #0]
 8104b16:	681a      	ldr	r2, [r3, #0]
 8104b18:	2101      	movs	r1, #1
 8104b1a:	69fb      	ldr	r3, [r7, #28]
 8104b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8104b20:	4013      	ands	r3, r2
 8104b22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104b24:	693b      	ldr	r3, [r7, #16]
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	f000 8186 	beq.w	8104e38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104b2c:	683b      	ldr	r3, [r7, #0]
 8104b2e:	685b      	ldr	r3, [r3, #4]
 8104b30:	2b01      	cmp	r3, #1
 8104b32:	d00b      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
 8104b34:	683b      	ldr	r3, [r7, #0]
 8104b36:	685b      	ldr	r3, [r3, #4]
 8104b38:	2b02      	cmp	r3, #2
 8104b3a:	d007      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104b3c:	683b      	ldr	r3, [r7, #0]
 8104b3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104b40:	2b11      	cmp	r3, #17
 8104b42:	d003      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104b44:	683b      	ldr	r3, [r7, #0]
 8104b46:	685b      	ldr	r3, [r3, #4]
 8104b48:	2b12      	cmp	r3, #18
 8104b4a:	d130      	bne.n	8104bae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	689b      	ldr	r3, [r3, #8]
 8104b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104b52:	69fb      	ldr	r3, [r7, #28]
 8104b54:	005b      	lsls	r3, r3, #1
 8104b56:	2203      	movs	r2, #3
 8104b58:	fa02 f303 	lsl.w	r3, r2, r3
 8104b5c:	43db      	mvns	r3, r3
 8104b5e:	69ba      	ldr	r2, [r7, #24]
 8104b60:	4013      	ands	r3, r2
 8104b62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104b64:	683b      	ldr	r3, [r7, #0]
 8104b66:	68da      	ldr	r2, [r3, #12]
 8104b68:	69fb      	ldr	r3, [r7, #28]
 8104b6a:	005b      	lsls	r3, r3, #1
 8104b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8104b70:	69ba      	ldr	r2, [r7, #24]
 8104b72:	4313      	orrs	r3, r2
 8104b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	69ba      	ldr	r2, [r7, #24]
 8104b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	685b      	ldr	r3, [r3, #4]
 8104b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104b82:	2201      	movs	r2, #1
 8104b84:	69fb      	ldr	r3, [r7, #28]
 8104b86:	fa02 f303 	lsl.w	r3, r2, r3
 8104b8a:	43db      	mvns	r3, r3
 8104b8c:	69ba      	ldr	r2, [r7, #24]
 8104b8e:	4013      	ands	r3, r2
 8104b90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104b92:	683b      	ldr	r3, [r7, #0]
 8104b94:	685b      	ldr	r3, [r3, #4]
 8104b96:	091b      	lsrs	r3, r3, #4
 8104b98:	f003 0201 	and.w	r2, r3, #1
 8104b9c:	69fb      	ldr	r3, [r7, #28]
 8104b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8104ba2:	69ba      	ldr	r2, [r7, #24]
 8104ba4:	4313      	orrs	r3, r2
 8104ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	69ba      	ldr	r2, [r7, #24]
 8104bac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	68db      	ldr	r3, [r3, #12]
 8104bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104bb4:	69fb      	ldr	r3, [r7, #28]
 8104bb6:	005b      	lsls	r3, r3, #1
 8104bb8:	2203      	movs	r2, #3
 8104bba:	fa02 f303 	lsl.w	r3, r2, r3
 8104bbe:	43db      	mvns	r3, r3
 8104bc0:	69ba      	ldr	r2, [r7, #24]
 8104bc2:	4013      	ands	r3, r2
 8104bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104bc6:	683b      	ldr	r3, [r7, #0]
 8104bc8:	689a      	ldr	r2, [r3, #8]
 8104bca:	69fb      	ldr	r3, [r7, #28]
 8104bcc:	005b      	lsls	r3, r3, #1
 8104bce:	fa02 f303 	lsl.w	r3, r2, r3
 8104bd2:	69ba      	ldr	r2, [r7, #24]
 8104bd4:	4313      	orrs	r3, r2
 8104bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104bd8:	687b      	ldr	r3, [r7, #4]
 8104bda:	69ba      	ldr	r2, [r7, #24]
 8104bdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104bde:	683b      	ldr	r3, [r7, #0]
 8104be0:	685b      	ldr	r3, [r3, #4]
 8104be2:	2b02      	cmp	r3, #2
 8104be4:	d003      	beq.n	8104bee <HAL_GPIO_Init+0xee>
 8104be6:	683b      	ldr	r3, [r7, #0]
 8104be8:	685b      	ldr	r3, [r3, #4]
 8104bea:	2b12      	cmp	r3, #18
 8104bec:	d123      	bne.n	8104c36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104bee:	69fb      	ldr	r3, [r7, #28]
 8104bf0:	08da      	lsrs	r2, r3, #3
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	3208      	adds	r2, #8
 8104bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104bfc:	69fb      	ldr	r3, [r7, #28]
 8104bfe:	f003 0307 	and.w	r3, r3, #7
 8104c02:	009b      	lsls	r3, r3, #2
 8104c04:	220f      	movs	r2, #15
 8104c06:	fa02 f303 	lsl.w	r3, r2, r3
 8104c0a:	43db      	mvns	r3, r3
 8104c0c:	69ba      	ldr	r2, [r7, #24]
 8104c0e:	4013      	ands	r3, r2
 8104c10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104c12:	683b      	ldr	r3, [r7, #0]
 8104c14:	691a      	ldr	r2, [r3, #16]
 8104c16:	69fb      	ldr	r3, [r7, #28]
 8104c18:	f003 0307 	and.w	r3, r3, #7
 8104c1c:	009b      	lsls	r3, r3, #2
 8104c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c22:	69ba      	ldr	r2, [r7, #24]
 8104c24:	4313      	orrs	r3, r2
 8104c26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104c28:	69fb      	ldr	r3, [r7, #28]
 8104c2a:	08da      	lsrs	r2, r3, #3
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	3208      	adds	r2, #8
 8104c30:	69b9      	ldr	r1, [r7, #24]
 8104c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	681b      	ldr	r3, [r3, #0]
 8104c3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104c3c:	69fb      	ldr	r3, [r7, #28]
 8104c3e:	005b      	lsls	r3, r3, #1
 8104c40:	2203      	movs	r2, #3
 8104c42:	fa02 f303 	lsl.w	r3, r2, r3
 8104c46:	43db      	mvns	r3, r3
 8104c48:	69ba      	ldr	r2, [r7, #24]
 8104c4a:	4013      	ands	r3, r2
 8104c4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104c4e:	683b      	ldr	r3, [r7, #0]
 8104c50:	685b      	ldr	r3, [r3, #4]
 8104c52:	f003 0203 	and.w	r2, r3, #3
 8104c56:	69fb      	ldr	r3, [r7, #28]
 8104c58:	005b      	lsls	r3, r3, #1
 8104c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8104c5e:	69ba      	ldr	r2, [r7, #24]
 8104c60:	4313      	orrs	r3, r2
 8104c62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	69ba      	ldr	r2, [r7, #24]
 8104c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8104c6a:	683b      	ldr	r3, [r7, #0]
 8104c6c:	685b      	ldr	r3, [r3, #4]
 8104c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104c72:	2b00      	cmp	r3, #0
 8104c74:	f000 80e0 	beq.w	8104e38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104c78:	4b2f      	ldr	r3, [pc, #188]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104c7e:	4a2e      	ldr	r2, [pc, #184]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c80:	f043 0302 	orr.w	r3, r3, #2
 8104c84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104c88:	4b2b      	ldr	r3, [pc, #172]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104c8e:	f003 0302 	and.w	r3, r3, #2
 8104c92:	60fb      	str	r3, [r7, #12]
 8104c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104c96:	4a29      	ldr	r2, [pc, #164]	; (8104d3c <HAL_GPIO_Init+0x23c>)
 8104c98:	69fb      	ldr	r3, [r7, #28]
 8104c9a:	089b      	lsrs	r3, r3, #2
 8104c9c:	3302      	adds	r3, #2
 8104c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104ca4:	69fb      	ldr	r3, [r7, #28]
 8104ca6:	f003 0303 	and.w	r3, r3, #3
 8104caa:	009b      	lsls	r3, r3, #2
 8104cac:	220f      	movs	r2, #15
 8104cae:	fa02 f303 	lsl.w	r3, r2, r3
 8104cb2:	43db      	mvns	r3, r3
 8104cb4:	69ba      	ldr	r2, [r7, #24]
 8104cb6:	4013      	ands	r3, r2
 8104cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	4a20      	ldr	r2, [pc, #128]	; (8104d40 <HAL_GPIO_Init+0x240>)
 8104cbe:	4293      	cmp	r3, r2
 8104cc0:	d052      	beq.n	8104d68 <HAL_GPIO_Init+0x268>
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	4a1f      	ldr	r2, [pc, #124]	; (8104d44 <HAL_GPIO_Init+0x244>)
 8104cc6:	4293      	cmp	r3, r2
 8104cc8:	d031      	beq.n	8104d2e <HAL_GPIO_Init+0x22e>
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	4a1e      	ldr	r2, [pc, #120]	; (8104d48 <HAL_GPIO_Init+0x248>)
 8104cce:	4293      	cmp	r3, r2
 8104cd0:	d02b      	beq.n	8104d2a <HAL_GPIO_Init+0x22a>
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	4a1d      	ldr	r2, [pc, #116]	; (8104d4c <HAL_GPIO_Init+0x24c>)
 8104cd6:	4293      	cmp	r3, r2
 8104cd8:	d025      	beq.n	8104d26 <HAL_GPIO_Init+0x226>
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	4a1c      	ldr	r2, [pc, #112]	; (8104d50 <HAL_GPIO_Init+0x250>)
 8104cde:	4293      	cmp	r3, r2
 8104ce0:	d01f      	beq.n	8104d22 <HAL_GPIO_Init+0x222>
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	4a1b      	ldr	r2, [pc, #108]	; (8104d54 <HAL_GPIO_Init+0x254>)
 8104ce6:	4293      	cmp	r3, r2
 8104ce8:	d019      	beq.n	8104d1e <HAL_GPIO_Init+0x21e>
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	4a1a      	ldr	r2, [pc, #104]	; (8104d58 <HAL_GPIO_Init+0x258>)
 8104cee:	4293      	cmp	r3, r2
 8104cf0:	d013      	beq.n	8104d1a <HAL_GPIO_Init+0x21a>
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	4a19      	ldr	r2, [pc, #100]	; (8104d5c <HAL_GPIO_Init+0x25c>)
 8104cf6:	4293      	cmp	r3, r2
 8104cf8:	d00d      	beq.n	8104d16 <HAL_GPIO_Init+0x216>
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	4a18      	ldr	r2, [pc, #96]	; (8104d60 <HAL_GPIO_Init+0x260>)
 8104cfe:	4293      	cmp	r3, r2
 8104d00:	d007      	beq.n	8104d12 <HAL_GPIO_Init+0x212>
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	4a17      	ldr	r2, [pc, #92]	; (8104d64 <HAL_GPIO_Init+0x264>)
 8104d06:	4293      	cmp	r3, r2
 8104d08:	d101      	bne.n	8104d0e <HAL_GPIO_Init+0x20e>
 8104d0a:	2309      	movs	r3, #9
 8104d0c:	e02d      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d0e:	230a      	movs	r3, #10
 8104d10:	e02b      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d12:	2308      	movs	r3, #8
 8104d14:	e029      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d16:	2307      	movs	r3, #7
 8104d18:	e027      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d1a:	2306      	movs	r3, #6
 8104d1c:	e025      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d1e:	2305      	movs	r3, #5
 8104d20:	e023      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d22:	2304      	movs	r3, #4
 8104d24:	e021      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d26:	2303      	movs	r3, #3
 8104d28:	e01f      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d2a:	2302      	movs	r3, #2
 8104d2c:	e01d      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d2e:	2301      	movs	r3, #1
 8104d30:	e01b      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d32:	bf00      	nop
 8104d34:	580000c0 	.word	0x580000c0
 8104d38:	58024400 	.word	0x58024400
 8104d3c:	58000400 	.word	0x58000400
 8104d40:	58020000 	.word	0x58020000
 8104d44:	58020400 	.word	0x58020400
 8104d48:	58020800 	.word	0x58020800
 8104d4c:	58020c00 	.word	0x58020c00
 8104d50:	58021000 	.word	0x58021000
 8104d54:	58021400 	.word	0x58021400
 8104d58:	58021800 	.word	0x58021800
 8104d5c:	58021c00 	.word	0x58021c00
 8104d60:	58022000 	.word	0x58022000
 8104d64:	58022400 	.word	0x58022400
 8104d68:	2300      	movs	r3, #0
 8104d6a:	69fa      	ldr	r2, [r7, #28]
 8104d6c:	f002 0203 	and.w	r2, r2, #3
 8104d70:	0092      	lsls	r2, r2, #2
 8104d72:	4093      	lsls	r3, r2
 8104d74:	69ba      	ldr	r2, [r7, #24]
 8104d76:	4313      	orrs	r3, r2
 8104d78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104d7a:	4938      	ldr	r1, [pc, #224]	; (8104e5c <HAL_GPIO_Init+0x35c>)
 8104d7c:	69fb      	ldr	r3, [r7, #28]
 8104d7e:	089b      	lsrs	r3, r3, #2
 8104d80:	3302      	adds	r3, #2
 8104d82:	69ba      	ldr	r2, [r7, #24]
 8104d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104d88:	697b      	ldr	r3, [r7, #20]
 8104d8a:	681b      	ldr	r3, [r3, #0]
 8104d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d8e:	693b      	ldr	r3, [r7, #16]
 8104d90:	43db      	mvns	r3, r3
 8104d92:	69ba      	ldr	r2, [r7, #24]
 8104d94:	4013      	ands	r3, r2
 8104d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104d98:	683b      	ldr	r3, [r7, #0]
 8104d9a:	685b      	ldr	r3, [r3, #4]
 8104d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	d003      	beq.n	8104dac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104da4:	69ba      	ldr	r2, [r7, #24]
 8104da6:	693b      	ldr	r3, [r7, #16]
 8104da8:	4313      	orrs	r3, r2
 8104daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104dac:	697b      	ldr	r3, [r7, #20]
 8104dae:	69ba      	ldr	r2, [r7, #24]
 8104db0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8104db2:	697b      	ldr	r3, [r7, #20]
 8104db4:	685b      	ldr	r3, [r3, #4]
 8104db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104db8:	693b      	ldr	r3, [r7, #16]
 8104dba:	43db      	mvns	r3, r3
 8104dbc:	69ba      	ldr	r2, [r7, #24]
 8104dbe:	4013      	ands	r3, r2
 8104dc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8104dc2:	683b      	ldr	r3, [r7, #0]
 8104dc4:	685b      	ldr	r3, [r3, #4]
 8104dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104dca:	2b00      	cmp	r3, #0
 8104dcc:	d003      	beq.n	8104dd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8104dce:	69ba      	ldr	r2, [r7, #24]
 8104dd0:	693b      	ldr	r3, [r7, #16]
 8104dd2:	4313      	orrs	r3, r2
 8104dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104dd6:	697b      	ldr	r3, [r7, #20]
 8104dd8:	69ba      	ldr	r2, [r7, #24]
 8104dda:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104de4:	693b      	ldr	r3, [r7, #16]
 8104de6:	43db      	mvns	r3, r3
 8104de8:	69ba      	ldr	r2, [r7, #24]
 8104dea:	4013      	ands	r3, r2
 8104dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8104dee:	683b      	ldr	r3, [r7, #0]
 8104df0:	685b      	ldr	r3, [r3, #4]
 8104df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104df6:	2b00      	cmp	r3, #0
 8104df8:	d003      	beq.n	8104e02 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8104dfa:	69ba      	ldr	r2, [r7, #24]
 8104dfc:	693b      	ldr	r3, [r7, #16]
 8104dfe:	4313      	orrs	r3, r2
 8104e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104e06:	69bb      	ldr	r3, [r7, #24]
 8104e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104e0e:	685b      	ldr	r3, [r3, #4]
 8104e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104e12:	693b      	ldr	r3, [r7, #16]
 8104e14:	43db      	mvns	r3, r3
 8104e16:	69ba      	ldr	r2, [r7, #24]
 8104e18:	4013      	ands	r3, r2
 8104e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104e1c:	683b      	ldr	r3, [r7, #0]
 8104e1e:	685b      	ldr	r3, [r3, #4]
 8104e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104e24:	2b00      	cmp	r3, #0
 8104e26:	d003      	beq.n	8104e30 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8104e28:	69ba      	ldr	r2, [r7, #24]
 8104e2a:	693b      	ldr	r3, [r7, #16]
 8104e2c:	4313      	orrs	r3, r2
 8104e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104e34:	69bb      	ldr	r3, [r7, #24]
 8104e36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8104e38:	69fb      	ldr	r3, [r7, #28]
 8104e3a:	3301      	adds	r3, #1
 8104e3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104e3e:	683b      	ldr	r3, [r7, #0]
 8104e40:	681a      	ldr	r2, [r3, #0]
 8104e42:	69fb      	ldr	r3, [r7, #28]
 8104e44:	fa22 f303 	lsr.w	r3, r2, r3
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	f47f ae63 	bne.w	8104b14 <HAL_GPIO_Init+0x14>
  }
}
 8104e4e:	bf00      	nop
 8104e50:	3724      	adds	r7, #36	; 0x24
 8104e52:	46bd      	mov	sp, r7
 8104e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e58:	4770      	bx	lr
 8104e5a:	bf00      	nop
 8104e5c:	58000400 	.word	0x58000400

08104e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8104e60:	b480      	push	{r7}
 8104e62:	b085      	sub	sp, #20
 8104e64:	af00      	add	r7, sp, #0
 8104e66:	6078      	str	r0, [r7, #4]
 8104e68:	460b      	mov	r3, r1
 8104e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104e6c:	687b      	ldr	r3, [r7, #4]
 8104e6e:	691a      	ldr	r2, [r3, #16]
 8104e70:	887b      	ldrh	r3, [r7, #2]
 8104e72:	4013      	ands	r3, r2
 8104e74:	2b00      	cmp	r3, #0
 8104e76:	d002      	beq.n	8104e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8104e78:	2301      	movs	r3, #1
 8104e7a:	73fb      	strb	r3, [r7, #15]
 8104e7c:	e001      	b.n	8104e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8104e7e:	2300      	movs	r3, #0
 8104e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8104e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8104e84:	4618      	mov	r0, r3
 8104e86:	3714      	adds	r7, #20
 8104e88:	46bd      	mov	sp, r7
 8104e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e8e:	4770      	bx	lr

08104e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104e90:	b480      	push	{r7}
 8104e92:	b083      	sub	sp, #12
 8104e94:	af00      	add	r7, sp, #0
 8104e96:	6078      	str	r0, [r7, #4]
 8104e98:	460b      	mov	r3, r1
 8104e9a:	807b      	strh	r3, [r7, #2]
 8104e9c:	4613      	mov	r3, r2
 8104e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104ea0:	787b      	ldrb	r3, [r7, #1]
 8104ea2:	2b00      	cmp	r3, #0
 8104ea4:	d003      	beq.n	8104eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104ea6:	887a      	ldrh	r2, [r7, #2]
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104eac:	e003      	b.n	8104eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104eae:	887b      	ldrh	r3, [r7, #2]
 8104eb0:	041a      	lsls	r2, r3, #16
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	619a      	str	r2, [r3, #24]
}
 8104eb6:	bf00      	nop
 8104eb8:	370c      	adds	r7, #12
 8104eba:	46bd      	mov	sp, r7
 8104ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec0:	4770      	bx	lr
	...

08104ec4 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8104ec4:	b480      	push	{r7}
 8104ec6:	b083      	sub	sp, #12
 8104ec8:	af00      	add	r7, sp, #0
 8104eca:	6078      	str	r0, [r7, #4]
 8104ecc:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8104ece:	490e      	ldr	r1, [pc, #56]	; (8104f08 <HAL_HSEM_Take+0x44>)
 8104ed0:	683b      	ldr	r3, [r7, #0]
 8104ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104eda:	687a      	ldr	r2, [r7, #4]
 8104edc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8104ee0:	4a09      	ldr	r2, [pc, #36]	; (8104f08 <HAL_HSEM_Take+0x44>)
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8104ee8:	683b      	ldr	r3, [r7, #0]
 8104eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104ef2:	429a      	cmp	r2, r3
 8104ef4:	d101      	bne.n	8104efa <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8104ef6:	2300      	movs	r3, #0
 8104ef8:	e000      	b.n	8104efc <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8104efa:	2301      	movs	r3, #1
}
 8104efc:	4618      	mov	r0, r3
 8104efe:	370c      	adds	r7, #12
 8104f00:	46bd      	mov	sp, r7
 8104f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f06:	4770      	bx	lr
 8104f08:	58026400 	.word	0x58026400

08104f0c <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8104f0c:	b480      	push	{r7}
 8104f0e:	b083      	sub	sp, #12
 8104f10:	af00      	add	r7, sp, #0
 8104f12:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8104f14:	4a07      	ldr	r2, [pc, #28]	; (8104f34 <HAL_HSEM_IsSemTaken+0x28>)
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104f1c:	2b00      	cmp	r3, #0
 8104f1e:	da01      	bge.n	8104f24 <HAL_HSEM_IsSemTaken+0x18>
 8104f20:	2301      	movs	r3, #1
 8104f22:	e000      	b.n	8104f26 <HAL_HSEM_IsSemTaken+0x1a>
 8104f24:	2300      	movs	r3, #0
}
 8104f26:	4618      	mov	r0, r3
 8104f28:	370c      	adds	r7, #12
 8104f2a:	46bd      	mov	sp, r7
 8104f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f30:	4770      	bx	lr
 8104f32:	bf00      	nop
 8104f34:	58026400 	.word	0x58026400

08104f38 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8104f38:	b480      	push	{r7}
 8104f3a:	b083      	sub	sp, #12
 8104f3c:	af00      	add	r7, sp, #0
 8104f3e:	6078      	str	r0, [r7, #4]
 8104f40:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8104f42:	4906      	ldr	r1, [pc, #24]	; (8104f5c <HAL_HSEM_Release+0x24>)
 8104f44:	683b      	ldr	r3, [r7, #0]
 8104f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8104f50:	bf00      	nop
 8104f52:	370c      	adds	r7, #12
 8104f54:	46bd      	mov	sp, r7
 8104f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f5a:	4770      	bx	lr
 8104f5c:	58026400 	.word	0x58026400

08104f60 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104f60:	b480      	push	{r7}
 8104f62:	b083      	sub	sp, #12
 8104f64:	af00      	add	r7, sp, #0
 8104f66:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104f68:	4b05      	ldr	r3, [pc, #20]	; (8104f80 <HAL_HSEM_ActivateNotification+0x20>)
 8104f6a:	681a      	ldr	r2, [r3, #0]
 8104f6c:	4904      	ldr	r1, [pc, #16]	; (8104f80 <HAL_HSEM_ActivateNotification+0x20>)
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	4313      	orrs	r3, r2
 8104f72:	600b      	str	r3, [r1, #0]
#endif
}
 8104f74:	bf00      	nop
 8104f76:	370c      	adds	r7, #12
 8104f78:	46bd      	mov	sp, r7
 8104f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f7e:	4770      	bx	lr
 8104f80:	58026510 	.word	0x58026510

08104f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104f84:	b580      	push	{r7, lr}
 8104f86:	b082      	sub	sp, #8
 8104f88:	af00      	add	r7, sp, #0
 8104f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	2b00      	cmp	r3, #0
 8104f90:	d101      	bne.n	8104f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104f92:	2301      	movs	r3, #1
 8104f94:	e081      	b.n	810509a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104f9c:	b2db      	uxtb	r3, r3
 8104f9e:	2b00      	cmp	r3, #0
 8104fa0:	d106      	bne.n	8104fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	2200      	movs	r2, #0
 8104fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104faa:	6878      	ldr	r0, [r7, #4]
 8104fac:	f7fc fa70 	bl	8101490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	2224      	movs	r2, #36	; 0x24
 8104fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	681a      	ldr	r2, [r3, #0]
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	f022 0201 	bic.w	r2, r2, #1
 8104fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	685a      	ldr	r2, [r3, #4]
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	681b      	ldr	r3, [r3, #0]
 8104fd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104fd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	681b      	ldr	r3, [r3, #0]
 8104fda:	689a      	ldr	r2, [r3, #8]
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	681b      	ldr	r3, [r3, #0]
 8104fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104fe4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	68db      	ldr	r3, [r3, #12]
 8104fea:	2b01      	cmp	r3, #1
 8104fec:	d107      	bne.n	8104ffe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	689a      	ldr	r2, [r3, #8]
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104ffa:	609a      	str	r2, [r3, #8]
 8104ffc:	e006      	b.n	810500c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	689a      	ldr	r2, [r3, #8]
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810500a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	68db      	ldr	r3, [r3, #12]
 8105010:	2b02      	cmp	r3, #2
 8105012:	d104      	bne.n	810501e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810501c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	685b      	ldr	r3, [r3, #4]
 8105024:	687a      	ldr	r2, [r7, #4]
 8105026:	6812      	ldr	r2, [r2, #0]
 8105028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810502c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8105030:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8105032:	687b      	ldr	r3, [r7, #4]
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	68da      	ldr	r2, [r3, #12]
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105040:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	691a      	ldr	r2, [r3, #16]
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	695b      	ldr	r3, [r3, #20]
 810504a:	ea42 0103 	orr.w	r1, r2, r3
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	699b      	ldr	r3, [r3, #24]
 8105052:	021a      	lsls	r2, r3, #8
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	430a      	orrs	r2, r1
 810505a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	69d9      	ldr	r1, [r3, #28]
 8105060:	687b      	ldr	r3, [r7, #4]
 8105062:	6a1a      	ldr	r2, [r3, #32]
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	681b      	ldr	r3, [r3, #0]
 8105068:	430a      	orrs	r2, r1
 810506a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	681a      	ldr	r2, [r3, #0]
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	f042 0201 	orr.w	r2, r2, #1
 810507a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	2200      	movs	r2, #0
 8105080:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	2220      	movs	r2, #32
 8105086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	2200      	movs	r2, #0
 810508e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	2200      	movs	r2, #0
 8105094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8105098:	2300      	movs	r3, #0
}
 810509a:	4618      	mov	r0, r3
 810509c:	3708      	adds	r7, #8
 810509e:	46bd      	mov	sp, r7
 81050a0:	bd80      	pop	{r7, pc}
	...

081050a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81050a4:	b580      	push	{r7, lr}
 81050a6:	b088      	sub	sp, #32
 81050a8:	af02      	add	r7, sp, #8
 81050aa:	60f8      	str	r0, [r7, #12]
 81050ac:	607a      	str	r2, [r7, #4]
 81050ae:	461a      	mov	r2, r3
 81050b0:	460b      	mov	r3, r1
 81050b2:	817b      	strh	r3, [r7, #10]
 81050b4:	4613      	mov	r3, r2
 81050b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81050b8:	68fb      	ldr	r3, [r7, #12]
 81050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81050be:	b2db      	uxtb	r3, r3
 81050c0:	2b20      	cmp	r3, #32
 81050c2:	f040 80da 	bne.w	810527a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81050c6:	68fb      	ldr	r3, [r7, #12]
 81050c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81050cc:	2b01      	cmp	r3, #1
 81050ce:	d101      	bne.n	81050d4 <HAL_I2C_Master_Transmit+0x30>
 81050d0:	2302      	movs	r3, #2
 81050d2:	e0d3      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
 81050d4:	68fb      	ldr	r3, [r7, #12]
 81050d6:	2201      	movs	r2, #1
 81050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81050dc:	f7fd f8dc 	bl	8102298 <HAL_GetTick>
 81050e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81050e2:	697b      	ldr	r3, [r7, #20]
 81050e4:	9300      	str	r3, [sp, #0]
 81050e6:	2319      	movs	r3, #25
 81050e8:	2201      	movs	r2, #1
 81050ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81050ee:	68f8      	ldr	r0, [r7, #12]
 81050f0:	f000 fcd6 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 81050f4:	4603      	mov	r3, r0
 81050f6:	2b00      	cmp	r3, #0
 81050f8:	d001      	beq.n	81050fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81050fa:	2301      	movs	r3, #1
 81050fc:	e0be      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81050fe:	68fb      	ldr	r3, [r7, #12]
 8105100:	2221      	movs	r2, #33	; 0x21
 8105102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8105106:	68fb      	ldr	r3, [r7, #12]
 8105108:	2210      	movs	r2, #16
 810510a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810510e:	68fb      	ldr	r3, [r7, #12]
 8105110:	2200      	movs	r2, #0
 8105112:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105114:	68fb      	ldr	r3, [r7, #12]
 8105116:	687a      	ldr	r2, [r7, #4]
 8105118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810511a:	68fb      	ldr	r3, [r7, #12]
 810511c:	893a      	ldrh	r2, [r7, #8]
 810511e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	2200      	movs	r2, #0
 8105124:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810512a:	b29b      	uxth	r3, r3
 810512c:	2bff      	cmp	r3, #255	; 0xff
 810512e:	d90e      	bls.n	810514e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105130:	68fb      	ldr	r3, [r7, #12]
 8105132:	22ff      	movs	r2, #255	; 0xff
 8105134:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105136:	68fb      	ldr	r3, [r7, #12]
 8105138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810513a:	b2da      	uxtb	r2, r3
 810513c:	8979      	ldrh	r1, [r7, #10]
 810513e:	4b51      	ldr	r3, [pc, #324]	; (8105284 <HAL_I2C_Master_Transmit+0x1e0>)
 8105140:	9300      	str	r3, [sp, #0]
 8105142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105146:	68f8      	ldr	r0, [r7, #12]
 8105148:	f000 fe38 	bl	8105dbc <I2C_TransferConfig>
 810514c:	e06c      	b.n	8105228 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810514e:	68fb      	ldr	r3, [r7, #12]
 8105150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105152:	b29a      	uxth	r2, r3
 8105154:	68fb      	ldr	r3, [r7, #12]
 8105156:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810515c:	b2da      	uxtb	r2, r3
 810515e:	8979      	ldrh	r1, [r7, #10]
 8105160:	4b48      	ldr	r3, [pc, #288]	; (8105284 <HAL_I2C_Master_Transmit+0x1e0>)
 8105162:	9300      	str	r3, [sp, #0]
 8105164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105168:	68f8      	ldr	r0, [r7, #12]
 810516a:	f000 fe27 	bl	8105dbc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 810516e:	e05b      	b.n	8105228 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105170:	697a      	ldr	r2, [r7, #20]
 8105172:	6a39      	ldr	r1, [r7, #32]
 8105174:	68f8      	ldr	r0, [r7, #12]
 8105176:	f000 fcd3 	bl	8105b20 <I2C_WaitOnTXISFlagUntilTimeout>
 810517a:	4603      	mov	r3, r0
 810517c:	2b00      	cmp	r3, #0
 810517e:	d001      	beq.n	8105184 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8105180:	2301      	movs	r3, #1
 8105182:	e07b      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105184:	68fb      	ldr	r3, [r7, #12]
 8105186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105188:	781a      	ldrb	r2, [r3, #0]
 810518a:	68fb      	ldr	r3, [r7, #12]
 810518c:	681b      	ldr	r3, [r3, #0]
 810518e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105190:	68fb      	ldr	r3, [r7, #12]
 8105192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105194:	1c5a      	adds	r2, r3, #1
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810519a:	68fb      	ldr	r3, [r7, #12]
 810519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810519e:	b29b      	uxth	r3, r3
 81051a0:	3b01      	subs	r3, #1
 81051a2:	b29a      	uxth	r2, r3
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81051a8:	68fb      	ldr	r3, [r7, #12]
 81051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81051ac:	3b01      	subs	r3, #1
 81051ae:	b29a      	uxth	r2, r3
 81051b0:	68fb      	ldr	r3, [r7, #12]
 81051b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81051b4:	68fb      	ldr	r3, [r7, #12]
 81051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81051b8:	b29b      	uxth	r3, r3
 81051ba:	2b00      	cmp	r3, #0
 81051bc:	d034      	beq.n	8105228 <HAL_I2C_Master_Transmit+0x184>
 81051be:	68fb      	ldr	r3, [r7, #12]
 81051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81051c2:	2b00      	cmp	r3, #0
 81051c4:	d130      	bne.n	8105228 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81051c6:	697b      	ldr	r3, [r7, #20]
 81051c8:	9300      	str	r3, [sp, #0]
 81051ca:	6a3b      	ldr	r3, [r7, #32]
 81051cc:	2200      	movs	r2, #0
 81051ce:	2180      	movs	r1, #128	; 0x80
 81051d0:	68f8      	ldr	r0, [r7, #12]
 81051d2:	f000 fc65 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 81051d6:	4603      	mov	r3, r0
 81051d8:	2b00      	cmp	r3, #0
 81051da:	d001      	beq.n	81051e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 81051dc:	2301      	movs	r3, #1
 81051de:	e04d      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81051e0:	68fb      	ldr	r3, [r7, #12]
 81051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81051e4:	b29b      	uxth	r3, r3
 81051e6:	2bff      	cmp	r3, #255	; 0xff
 81051e8:	d90e      	bls.n	8105208 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81051ea:	68fb      	ldr	r3, [r7, #12]
 81051ec:	22ff      	movs	r2, #255	; 0xff
 81051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81051f4:	b2da      	uxtb	r2, r3
 81051f6:	8979      	ldrh	r1, [r7, #10]
 81051f8:	2300      	movs	r3, #0
 81051fa:	9300      	str	r3, [sp, #0]
 81051fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105200:	68f8      	ldr	r0, [r7, #12]
 8105202:	f000 fddb 	bl	8105dbc <I2C_TransferConfig>
 8105206:	e00f      	b.n	8105228 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810520c:	b29a      	uxth	r2, r3
 810520e:	68fb      	ldr	r3, [r7, #12]
 8105210:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105216:	b2da      	uxtb	r2, r3
 8105218:	8979      	ldrh	r1, [r7, #10]
 810521a:	2300      	movs	r3, #0
 810521c:	9300      	str	r3, [sp, #0]
 810521e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105222:	68f8      	ldr	r0, [r7, #12]
 8105224:	f000 fdca 	bl	8105dbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810522c:	b29b      	uxth	r3, r3
 810522e:	2b00      	cmp	r3, #0
 8105230:	d19e      	bne.n	8105170 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105232:	697a      	ldr	r2, [r7, #20]
 8105234:	6a39      	ldr	r1, [r7, #32]
 8105236:	68f8      	ldr	r0, [r7, #12]
 8105238:	f000 fcb2 	bl	8105ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 810523c:	4603      	mov	r3, r0
 810523e:	2b00      	cmp	r3, #0
 8105240:	d001      	beq.n	8105246 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8105242:	2301      	movs	r3, #1
 8105244:	e01a      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105246:	68fb      	ldr	r3, [r7, #12]
 8105248:	681b      	ldr	r3, [r3, #0]
 810524a:	2220      	movs	r2, #32
 810524c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810524e:	68fb      	ldr	r3, [r7, #12]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	6859      	ldr	r1, [r3, #4]
 8105254:	68fb      	ldr	r3, [r7, #12]
 8105256:	681a      	ldr	r2, [r3, #0]
 8105258:	4b0b      	ldr	r3, [pc, #44]	; (8105288 <HAL_I2C_Master_Transmit+0x1e4>)
 810525a:	400b      	ands	r3, r1
 810525c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810525e:	68fb      	ldr	r3, [r7, #12]
 8105260:	2220      	movs	r2, #32
 8105262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105266:	68fb      	ldr	r3, [r7, #12]
 8105268:	2200      	movs	r2, #0
 810526a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810526e:	68fb      	ldr	r3, [r7, #12]
 8105270:	2200      	movs	r2, #0
 8105272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105276:	2300      	movs	r3, #0
 8105278:	e000      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 810527a:	2302      	movs	r3, #2
  }
}
 810527c:	4618      	mov	r0, r3
 810527e:	3718      	adds	r7, #24
 8105280:	46bd      	mov	sp, r7
 8105282:	bd80      	pop	{r7, pc}
 8105284:	80002000 	.word	0x80002000
 8105288:	fe00e800 	.word	0xfe00e800

0810528c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810528c:	b580      	push	{r7, lr}
 810528e:	b088      	sub	sp, #32
 8105290:	af02      	add	r7, sp, #8
 8105292:	60f8      	str	r0, [r7, #12]
 8105294:	607a      	str	r2, [r7, #4]
 8105296:	461a      	mov	r2, r3
 8105298:	460b      	mov	r3, r1
 810529a:	817b      	strh	r3, [r7, #10]
 810529c:	4613      	mov	r3, r2
 810529e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81052a0:	68fb      	ldr	r3, [r7, #12]
 81052a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81052a6:	b2db      	uxtb	r3, r3
 81052a8:	2b20      	cmp	r3, #32
 81052aa:	f040 80db 	bne.w	8105464 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81052ae:	68fb      	ldr	r3, [r7, #12]
 81052b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81052b4:	2b01      	cmp	r3, #1
 81052b6:	d101      	bne.n	81052bc <HAL_I2C_Master_Receive+0x30>
 81052b8:	2302      	movs	r3, #2
 81052ba:	e0d4      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
 81052bc:	68fb      	ldr	r3, [r7, #12]
 81052be:	2201      	movs	r2, #1
 81052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81052c4:	f7fc ffe8 	bl	8102298 <HAL_GetTick>
 81052c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81052ca:	697b      	ldr	r3, [r7, #20]
 81052cc:	9300      	str	r3, [sp, #0]
 81052ce:	2319      	movs	r3, #25
 81052d0:	2201      	movs	r2, #1
 81052d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81052d6:	68f8      	ldr	r0, [r7, #12]
 81052d8:	f000 fbe2 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 81052dc:	4603      	mov	r3, r0
 81052de:	2b00      	cmp	r3, #0
 81052e0:	d001      	beq.n	81052e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81052e2:	2301      	movs	r3, #1
 81052e4:	e0bf      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81052e6:	68fb      	ldr	r3, [r7, #12]
 81052e8:	2222      	movs	r2, #34	; 0x22
 81052ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81052ee:	68fb      	ldr	r3, [r7, #12]
 81052f0:	2210      	movs	r2, #16
 81052f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81052f6:	68fb      	ldr	r3, [r7, #12]
 81052f8:	2200      	movs	r2, #0
 81052fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81052fc:	68fb      	ldr	r3, [r7, #12]
 81052fe:	687a      	ldr	r2, [r7, #4]
 8105300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8105302:	68fb      	ldr	r3, [r7, #12]
 8105304:	893a      	ldrh	r2, [r7, #8]
 8105306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105308:	68fb      	ldr	r3, [r7, #12]
 810530a:	2200      	movs	r2, #0
 810530c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105312:	b29b      	uxth	r3, r3
 8105314:	2bff      	cmp	r3, #255	; 0xff
 8105316:	d90e      	bls.n	8105336 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105318:	68fb      	ldr	r3, [r7, #12]
 810531a:	22ff      	movs	r2, #255	; 0xff
 810531c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 810531e:	68fb      	ldr	r3, [r7, #12]
 8105320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105322:	b2da      	uxtb	r2, r3
 8105324:	8979      	ldrh	r1, [r7, #10]
 8105326:	4b52      	ldr	r3, [pc, #328]	; (8105470 <HAL_I2C_Master_Receive+0x1e4>)
 8105328:	9300      	str	r3, [sp, #0]
 810532a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810532e:	68f8      	ldr	r0, [r7, #12]
 8105330:	f000 fd44 	bl	8105dbc <I2C_TransferConfig>
 8105334:	e06d      	b.n	8105412 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105336:	68fb      	ldr	r3, [r7, #12]
 8105338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810533a:	b29a      	uxth	r2, r3
 810533c:	68fb      	ldr	r3, [r7, #12]
 810533e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8105340:	68fb      	ldr	r3, [r7, #12]
 8105342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105344:	b2da      	uxtb	r2, r3
 8105346:	8979      	ldrh	r1, [r7, #10]
 8105348:	4b49      	ldr	r3, [pc, #292]	; (8105470 <HAL_I2C_Master_Receive+0x1e4>)
 810534a:	9300      	str	r3, [sp, #0]
 810534c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105350:	68f8      	ldr	r0, [r7, #12]
 8105352:	f000 fd33 	bl	8105dbc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8105356:	e05c      	b.n	8105412 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105358:	697a      	ldr	r2, [r7, #20]
 810535a:	6a39      	ldr	r1, [r7, #32]
 810535c:	68f8      	ldr	r0, [r7, #12]
 810535e:	f000 fc5b 	bl	8105c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8105362:	4603      	mov	r3, r0
 8105364:	2b00      	cmp	r3, #0
 8105366:	d001      	beq.n	810536c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8105368:	2301      	movs	r3, #1
 810536a:	e07c      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810536c:	68fb      	ldr	r3, [r7, #12]
 810536e:	681b      	ldr	r3, [r3, #0]
 8105370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105372:	68fb      	ldr	r3, [r7, #12]
 8105374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105376:	b2d2      	uxtb	r2, r2
 8105378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810537a:	68fb      	ldr	r3, [r7, #12]
 810537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810537e:	1c5a      	adds	r2, r3, #1
 8105380:	68fb      	ldr	r3, [r7, #12]
 8105382:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105384:	68fb      	ldr	r3, [r7, #12]
 8105386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105388:	3b01      	subs	r3, #1
 810538a:	b29a      	uxth	r2, r3
 810538c:	68fb      	ldr	r3, [r7, #12]
 810538e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105390:	68fb      	ldr	r3, [r7, #12]
 8105392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105394:	b29b      	uxth	r3, r3
 8105396:	3b01      	subs	r3, #1
 8105398:	b29a      	uxth	r2, r3
 810539a:	68fb      	ldr	r3, [r7, #12]
 810539c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810539e:	68fb      	ldr	r3, [r7, #12]
 81053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81053a2:	b29b      	uxth	r3, r3
 81053a4:	2b00      	cmp	r3, #0
 81053a6:	d034      	beq.n	8105412 <HAL_I2C_Master_Receive+0x186>
 81053a8:	68fb      	ldr	r3, [r7, #12]
 81053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81053ac:	2b00      	cmp	r3, #0
 81053ae:	d130      	bne.n	8105412 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81053b0:	697b      	ldr	r3, [r7, #20]
 81053b2:	9300      	str	r3, [sp, #0]
 81053b4:	6a3b      	ldr	r3, [r7, #32]
 81053b6:	2200      	movs	r2, #0
 81053b8:	2180      	movs	r1, #128	; 0x80
 81053ba:	68f8      	ldr	r0, [r7, #12]
 81053bc:	f000 fb70 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 81053c0:	4603      	mov	r3, r0
 81053c2:	2b00      	cmp	r3, #0
 81053c4:	d001      	beq.n	81053ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81053c6:	2301      	movs	r3, #1
 81053c8:	e04d      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81053ca:	68fb      	ldr	r3, [r7, #12]
 81053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81053ce:	b29b      	uxth	r3, r3
 81053d0:	2bff      	cmp	r3, #255	; 0xff
 81053d2:	d90e      	bls.n	81053f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	22ff      	movs	r2, #255	; 0xff
 81053d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81053de:	b2da      	uxtb	r2, r3
 81053e0:	8979      	ldrh	r1, [r7, #10]
 81053e2:	2300      	movs	r3, #0
 81053e4:	9300      	str	r3, [sp, #0]
 81053e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81053ea:	68f8      	ldr	r0, [r7, #12]
 81053ec:	f000 fce6 	bl	8105dbc <I2C_TransferConfig>
 81053f0:	e00f      	b.n	8105412 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81053f2:	68fb      	ldr	r3, [r7, #12]
 81053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81053f6:	b29a      	uxth	r2, r3
 81053f8:	68fb      	ldr	r3, [r7, #12]
 81053fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81053fc:	68fb      	ldr	r3, [r7, #12]
 81053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105400:	b2da      	uxtb	r2, r3
 8105402:	8979      	ldrh	r1, [r7, #10]
 8105404:	2300      	movs	r3, #0
 8105406:	9300      	str	r3, [sp, #0]
 8105408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810540c:	68f8      	ldr	r0, [r7, #12]
 810540e:	f000 fcd5 	bl	8105dbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8105412:	68fb      	ldr	r3, [r7, #12]
 8105414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105416:	b29b      	uxth	r3, r3
 8105418:	2b00      	cmp	r3, #0
 810541a:	d19d      	bne.n	8105358 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810541c:	697a      	ldr	r2, [r7, #20]
 810541e:	6a39      	ldr	r1, [r7, #32]
 8105420:	68f8      	ldr	r0, [r7, #12]
 8105422:	f000 fbbd 	bl	8105ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105426:	4603      	mov	r3, r0
 8105428:	2b00      	cmp	r3, #0
 810542a:	d001      	beq.n	8105430 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 810542c:	2301      	movs	r3, #1
 810542e:	e01a      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105430:	68fb      	ldr	r3, [r7, #12]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	2220      	movs	r2, #32
 8105436:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	681b      	ldr	r3, [r3, #0]
 810543c:	6859      	ldr	r1, [r3, #4]
 810543e:	68fb      	ldr	r3, [r7, #12]
 8105440:	681a      	ldr	r2, [r3, #0]
 8105442:	4b0c      	ldr	r3, [pc, #48]	; (8105474 <HAL_I2C_Master_Receive+0x1e8>)
 8105444:	400b      	ands	r3, r1
 8105446:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105448:	68fb      	ldr	r3, [r7, #12]
 810544a:	2220      	movs	r2, #32
 810544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105450:	68fb      	ldr	r3, [r7, #12]
 8105452:	2200      	movs	r2, #0
 8105454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105458:	68fb      	ldr	r3, [r7, #12]
 810545a:	2200      	movs	r2, #0
 810545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105460:	2300      	movs	r3, #0
 8105462:	e000      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8105464:	2302      	movs	r3, #2
  }
}
 8105466:	4618      	mov	r0, r3
 8105468:	3718      	adds	r7, #24
 810546a:	46bd      	mov	sp, r7
 810546c:	bd80      	pop	{r7, pc}
 810546e:	bf00      	nop
 8105470:	80002400 	.word	0x80002400
 8105474:	fe00e800 	.word	0xfe00e800

08105478 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105478:	b580      	push	{r7, lr}
 810547a:	b088      	sub	sp, #32
 810547c:	af02      	add	r7, sp, #8
 810547e:	60f8      	str	r0, [r7, #12]
 8105480:	4608      	mov	r0, r1
 8105482:	4611      	mov	r1, r2
 8105484:	461a      	mov	r2, r3
 8105486:	4603      	mov	r3, r0
 8105488:	817b      	strh	r3, [r7, #10]
 810548a:	460b      	mov	r3, r1
 810548c:	813b      	strh	r3, [r7, #8]
 810548e:	4613      	mov	r3, r2
 8105490:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105492:	68fb      	ldr	r3, [r7, #12]
 8105494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105498:	b2db      	uxtb	r3, r3
 810549a:	2b20      	cmp	r3, #32
 810549c:	f040 80f9 	bne.w	8105692 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81054a0:	6a3b      	ldr	r3, [r7, #32]
 81054a2:	2b00      	cmp	r3, #0
 81054a4:	d002      	beq.n	81054ac <HAL_I2C_Mem_Write+0x34>
 81054a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81054a8:	2b00      	cmp	r3, #0
 81054aa:	d105      	bne.n	81054b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81054ac:	68fb      	ldr	r3, [r7, #12]
 81054ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 81054b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81054b4:	2301      	movs	r3, #1
 81054b6:	e0ed      	b.n	8105694 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81054b8:	68fb      	ldr	r3, [r7, #12]
 81054ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81054be:	2b01      	cmp	r3, #1
 81054c0:	d101      	bne.n	81054c6 <HAL_I2C_Mem_Write+0x4e>
 81054c2:	2302      	movs	r3, #2
 81054c4:	e0e6      	b.n	8105694 <HAL_I2C_Mem_Write+0x21c>
 81054c6:	68fb      	ldr	r3, [r7, #12]
 81054c8:	2201      	movs	r2, #1
 81054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81054ce:	f7fc fee3 	bl	8102298 <HAL_GetTick>
 81054d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81054d4:	697b      	ldr	r3, [r7, #20]
 81054d6:	9300      	str	r3, [sp, #0]
 81054d8:	2319      	movs	r3, #25
 81054da:	2201      	movs	r2, #1
 81054dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81054e0:	68f8      	ldr	r0, [r7, #12]
 81054e2:	f000 fadd 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 81054e6:	4603      	mov	r3, r0
 81054e8:	2b00      	cmp	r3, #0
 81054ea:	d001      	beq.n	81054f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81054ec:	2301      	movs	r3, #1
 81054ee:	e0d1      	b.n	8105694 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81054f0:	68fb      	ldr	r3, [r7, #12]
 81054f2:	2221      	movs	r2, #33	; 0x21
 81054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81054f8:	68fb      	ldr	r3, [r7, #12]
 81054fa:	2240      	movs	r2, #64	; 0x40
 81054fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105500:	68fb      	ldr	r3, [r7, #12]
 8105502:	2200      	movs	r2, #0
 8105504:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105506:	68fb      	ldr	r3, [r7, #12]
 8105508:	6a3a      	ldr	r2, [r7, #32]
 810550a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810550c:	68fb      	ldr	r3, [r7, #12]
 810550e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8105510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105512:	68fb      	ldr	r3, [r7, #12]
 8105514:	2200      	movs	r2, #0
 8105516:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105518:	88f8      	ldrh	r0, [r7, #6]
 810551a:	893a      	ldrh	r2, [r7, #8]
 810551c:	8979      	ldrh	r1, [r7, #10]
 810551e:	697b      	ldr	r3, [r7, #20]
 8105520:	9301      	str	r3, [sp, #4]
 8105522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105524:	9300      	str	r3, [sp, #0]
 8105526:	4603      	mov	r3, r0
 8105528:	68f8      	ldr	r0, [r7, #12]
 810552a:	f000 f9ed 	bl	8105908 <I2C_RequestMemoryWrite>
 810552e:	4603      	mov	r3, r0
 8105530:	2b00      	cmp	r3, #0
 8105532:	d005      	beq.n	8105540 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105534:	68fb      	ldr	r3, [r7, #12]
 8105536:	2200      	movs	r2, #0
 8105538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810553c:	2301      	movs	r3, #1
 810553e:	e0a9      	b.n	8105694 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105540:	68fb      	ldr	r3, [r7, #12]
 8105542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105544:	b29b      	uxth	r3, r3
 8105546:	2bff      	cmp	r3, #255	; 0xff
 8105548:	d90e      	bls.n	8105568 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810554a:	68fb      	ldr	r3, [r7, #12]
 810554c:	22ff      	movs	r2, #255	; 0xff
 810554e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105550:	68fb      	ldr	r3, [r7, #12]
 8105552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105554:	b2da      	uxtb	r2, r3
 8105556:	8979      	ldrh	r1, [r7, #10]
 8105558:	2300      	movs	r3, #0
 810555a:	9300      	str	r3, [sp, #0]
 810555c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105560:	68f8      	ldr	r0, [r7, #12]
 8105562:	f000 fc2b 	bl	8105dbc <I2C_TransferConfig>
 8105566:	e00f      	b.n	8105588 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105568:	68fb      	ldr	r3, [r7, #12]
 810556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810556c:	b29a      	uxth	r2, r3
 810556e:	68fb      	ldr	r3, [r7, #12]
 8105570:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105572:	68fb      	ldr	r3, [r7, #12]
 8105574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105576:	b2da      	uxtb	r2, r3
 8105578:	8979      	ldrh	r1, [r7, #10]
 810557a:	2300      	movs	r3, #0
 810557c:	9300      	str	r3, [sp, #0]
 810557e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105582:	68f8      	ldr	r0, [r7, #12]
 8105584:	f000 fc1a 	bl	8105dbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105588:	697a      	ldr	r2, [r7, #20]
 810558a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810558c:	68f8      	ldr	r0, [r7, #12]
 810558e:	f000 fac7 	bl	8105b20 <I2C_WaitOnTXISFlagUntilTimeout>
 8105592:	4603      	mov	r3, r0
 8105594:	2b00      	cmp	r3, #0
 8105596:	d001      	beq.n	810559c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8105598:	2301      	movs	r3, #1
 810559a:	e07b      	b.n	8105694 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810559c:	68fb      	ldr	r3, [r7, #12]
 810559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81055a0:	781a      	ldrb	r2, [r3, #0]
 81055a2:	68fb      	ldr	r3, [r7, #12]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81055a8:	68fb      	ldr	r3, [r7, #12]
 81055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81055ac:	1c5a      	adds	r2, r3, #1
 81055ae:	68fb      	ldr	r3, [r7, #12]
 81055b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81055b2:	68fb      	ldr	r3, [r7, #12]
 81055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055b6:	b29b      	uxth	r3, r3
 81055b8:	3b01      	subs	r3, #1
 81055ba:	b29a      	uxth	r2, r3
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81055c0:	68fb      	ldr	r3, [r7, #12]
 81055c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055c4:	3b01      	subs	r3, #1
 81055c6:	b29a      	uxth	r2, r3
 81055c8:	68fb      	ldr	r3, [r7, #12]
 81055ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81055cc:	68fb      	ldr	r3, [r7, #12]
 81055ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055d0:	b29b      	uxth	r3, r3
 81055d2:	2b00      	cmp	r3, #0
 81055d4:	d034      	beq.n	8105640 <HAL_I2C_Mem_Write+0x1c8>
 81055d6:	68fb      	ldr	r3, [r7, #12]
 81055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055da:	2b00      	cmp	r3, #0
 81055dc:	d130      	bne.n	8105640 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81055de:	697b      	ldr	r3, [r7, #20]
 81055e0:	9300      	str	r3, [sp, #0]
 81055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055e4:	2200      	movs	r2, #0
 81055e6:	2180      	movs	r1, #128	; 0x80
 81055e8:	68f8      	ldr	r0, [r7, #12]
 81055ea:	f000 fa59 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 81055ee:	4603      	mov	r3, r0
 81055f0:	2b00      	cmp	r3, #0
 81055f2:	d001      	beq.n	81055f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81055f4:	2301      	movs	r3, #1
 81055f6:	e04d      	b.n	8105694 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81055f8:	68fb      	ldr	r3, [r7, #12]
 81055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055fc:	b29b      	uxth	r3, r3
 81055fe:	2bff      	cmp	r3, #255	; 0xff
 8105600:	d90e      	bls.n	8105620 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105602:	68fb      	ldr	r3, [r7, #12]
 8105604:	22ff      	movs	r2, #255	; 0xff
 8105606:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810560c:	b2da      	uxtb	r2, r3
 810560e:	8979      	ldrh	r1, [r7, #10]
 8105610:	2300      	movs	r3, #0
 8105612:	9300      	str	r3, [sp, #0]
 8105614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105618:	68f8      	ldr	r0, [r7, #12]
 810561a:	f000 fbcf 	bl	8105dbc <I2C_TransferConfig>
 810561e:	e00f      	b.n	8105640 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105620:	68fb      	ldr	r3, [r7, #12]
 8105622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105624:	b29a      	uxth	r2, r3
 8105626:	68fb      	ldr	r3, [r7, #12]
 8105628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810562a:	68fb      	ldr	r3, [r7, #12]
 810562c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810562e:	b2da      	uxtb	r2, r3
 8105630:	8979      	ldrh	r1, [r7, #10]
 8105632:	2300      	movs	r3, #0
 8105634:	9300      	str	r3, [sp, #0]
 8105636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810563a:	68f8      	ldr	r0, [r7, #12]
 810563c:	f000 fbbe 	bl	8105dbc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8105640:	68fb      	ldr	r3, [r7, #12]
 8105642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105644:	b29b      	uxth	r3, r3
 8105646:	2b00      	cmp	r3, #0
 8105648:	d19e      	bne.n	8105588 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810564a:	697a      	ldr	r2, [r7, #20]
 810564c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810564e:	68f8      	ldr	r0, [r7, #12]
 8105650:	f000 faa6 	bl	8105ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105654:	4603      	mov	r3, r0
 8105656:	2b00      	cmp	r3, #0
 8105658:	d001      	beq.n	810565e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810565a:	2301      	movs	r3, #1
 810565c:	e01a      	b.n	8105694 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810565e:	68fb      	ldr	r3, [r7, #12]
 8105660:	681b      	ldr	r3, [r3, #0]
 8105662:	2220      	movs	r2, #32
 8105664:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105666:	68fb      	ldr	r3, [r7, #12]
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	6859      	ldr	r1, [r3, #4]
 810566c:	68fb      	ldr	r3, [r7, #12]
 810566e:	681a      	ldr	r2, [r3, #0]
 8105670:	4b0a      	ldr	r3, [pc, #40]	; (810569c <HAL_I2C_Mem_Write+0x224>)
 8105672:	400b      	ands	r3, r1
 8105674:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105676:	68fb      	ldr	r3, [r7, #12]
 8105678:	2220      	movs	r2, #32
 810567a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810567e:	68fb      	ldr	r3, [r7, #12]
 8105680:	2200      	movs	r2, #0
 8105682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105686:	68fb      	ldr	r3, [r7, #12]
 8105688:	2200      	movs	r2, #0
 810568a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810568e:	2300      	movs	r3, #0
 8105690:	e000      	b.n	8105694 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8105692:	2302      	movs	r3, #2
  }
}
 8105694:	4618      	mov	r0, r3
 8105696:	3718      	adds	r7, #24
 8105698:	46bd      	mov	sp, r7
 810569a:	bd80      	pop	{r7, pc}
 810569c:	fe00e800 	.word	0xfe00e800

081056a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81056a0:	b580      	push	{r7, lr}
 81056a2:	b088      	sub	sp, #32
 81056a4:	af02      	add	r7, sp, #8
 81056a6:	60f8      	str	r0, [r7, #12]
 81056a8:	4608      	mov	r0, r1
 81056aa:	4611      	mov	r1, r2
 81056ac:	461a      	mov	r2, r3
 81056ae:	4603      	mov	r3, r0
 81056b0:	817b      	strh	r3, [r7, #10]
 81056b2:	460b      	mov	r3, r1
 81056b4:	813b      	strh	r3, [r7, #8]
 81056b6:	4613      	mov	r3, r2
 81056b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81056ba:	68fb      	ldr	r3, [r7, #12]
 81056bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81056c0:	b2db      	uxtb	r3, r3
 81056c2:	2b20      	cmp	r3, #32
 81056c4:	f040 80fd 	bne.w	81058c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81056c8:	6a3b      	ldr	r3, [r7, #32]
 81056ca:	2b00      	cmp	r3, #0
 81056cc:	d002      	beq.n	81056d4 <HAL_I2C_Mem_Read+0x34>
 81056ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81056d0:	2b00      	cmp	r3, #0
 81056d2:	d105      	bne.n	81056e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81056d4:	68fb      	ldr	r3, [r7, #12]
 81056d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81056da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81056dc:	2301      	movs	r3, #1
 81056de:	e0f1      	b.n	81058c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81056e0:	68fb      	ldr	r3, [r7, #12]
 81056e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81056e6:	2b01      	cmp	r3, #1
 81056e8:	d101      	bne.n	81056ee <HAL_I2C_Mem_Read+0x4e>
 81056ea:	2302      	movs	r3, #2
 81056ec:	e0ea      	b.n	81058c4 <HAL_I2C_Mem_Read+0x224>
 81056ee:	68fb      	ldr	r3, [r7, #12]
 81056f0:	2201      	movs	r2, #1
 81056f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81056f6:	f7fc fdcf 	bl	8102298 <HAL_GetTick>
 81056fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81056fc:	697b      	ldr	r3, [r7, #20]
 81056fe:	9300      	str	r3, [sp, #0]
 8105700:	2319      	movs	r3, #25
 8105702:	2201      	movs	r2, #1
 8105704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105708:	68f8      	ldr	r0, [r7, #12]
 810570a:	f000 f9c9 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 810570e:	4603      	mov	r3, r0
 8105710:	2b00      	cmp	r3, #0
 8105712:	d001      	beq.n	8105718 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8105714:	2301      	movs	r3, #1
 8105716:	e0d5      	b.n	81058c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8105718:	68fb      	ldr	r3, [r7, #12]
 810571a:	2222      	movs	r2, #34	; 0x22
 810571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8105720:	68fb      	ldr	r3, [r7, #12]
 8105722:	2240      	movs	r2, #64	; 0x40
 8105724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105728:	68fb      	ldr	r3, [r7, #12]
 810572a:	2200      	movs	r2, #0
 810572c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810572e:	68fb      	ldr	r3, [r7, #12]
 8105730:	6a3a      	ldr	r2, [r7, #32]
 8105732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8105734:	68fb      	ldr	r3, [r7, #12]
 8105736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8105738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810573a:	68fb      	ldr	r3, [r7, #12]
 810573c:	2200      	movs	r2, #0
 810573e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105740:	88f8      	ldrh	r0, [r7, #6]
 8105742:	893a      	ldrh	r2, [r7, #8]
 8105744:	8979      	ldrh	r1, [r7, #10]
 8105746:	697b      	ldr	r3, [r7, #20]
 8105748:	9301      	str	r3, [sp, #4]
 810574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810574c:	9300      	str	r3, [sp, #0]
 810574e:	4603      	mov	r3, r0
 8105750:	68f8      	ldr	r0, [r7, #12]
 8105752:	f000 f92d 	bl	81059b0 <I2C_RequestMemoryRead>
 8105756:	4603      	mov	r3, r0
 8105758:	2b00      	cmp	r3, #0
 810575a:	d005      	beq.n	8105768 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810575c:	68fb      	ldr	r3, [r7, #12]
 810575e:	2200      	movs	r2, #0
 8105760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105764:	2301      	movs	r3, #1
 8105766:	e0ad      	b.n	81058c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105768:	68fb      	ldr	r3, [r7, #12]
 810576a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810576c:	b29b      	uxth	r3, r3
 810576e:	2bff      	cmp	r3, #255	; 0xff
 8105770:	d90e      	bls.n	8105790 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105772:	68fb      	ldr	r3, [r7, #12]
 8105774:	22ff      	movs	r2, #255	; 0xff
 8105776:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8105778:	68fb      	ldr	r3, [r7, #12]
 810577a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810577c:	b2da      	uxtb	r2, r3
 810577e:	8979      	ldrh	r1, [r7, #10]
 8105780:	4b52      	ldr	r3, [pc, #328]	; (81058cc <HAL_I2C_Mem_Read+0x22c>)
 8105782:	9300      	str	r3, [sp, #0]
 8105784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105788:	68f8      	ldr	r0, [r7, #12]
 810578a:	f000 fb17 	bl	8105dbc <I2C_TransferConfig>
 810578e:	e00f      	b.n	81057b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105790:	68fb      	ldr	r3, [r7, #12]
 8105792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105794:	b29a      	uxth	r2, r3
 8105796:	68fb      	ldr	r3, [r7, #12]
 8105798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810579e:	b2da      	uxtb	r2, r3
 81057a0:	8979      	ldrh	r1, [r7, #10]
 81057a2:	4b4a      	ldr	r3, [pc, #296]	; (81058cc <HAL_I2C_Mem_Read+0x22c>)
 81057a4:	9300      	str	r3, [sp, #0]
 81057a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81057aa:	68f8      	ldr	r0, [r7, #12]
 81057ac:	f000 fb06 	bl	8105dbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81057b0:	697b      	ldr	r3, [r7, #20]
 81057b2:	9300      	str	r3, [sp, #0]
 81057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057b6:	2200      	movs	r2, #0
 81057b8:	2104      	movs	r1, #4
 81057ba:	68f8      	ldr	r0, [r7, #12]
 81057bc:	f000 f970 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 81057c0:	4603      	mov	r3, r0
 81057c2:	2b00      	cmp	r3, #0
 81057c4:	d001      	beq.n	81057ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81057c6:	2301      	movs	r3, #1
 81057c8:	e07c      	b.n	81058c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81057ca:	68fb      	ldr	r3, [r7, #12]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81057d0:	68fb      	ldr	r3, [r7, #12]
 81057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81057d4:	b2d2      	uxtb	r2, r2
 81057d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81057d8:	68fb      	ldr	r3, [r7, #12]
 81057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81057dc:	1c5a      	adds	r2, r3, #1
 81057de:	68fb      	ldr	r3, [r7, #12]
 81057e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81057e2:	68fb      	ldr	r3, [r7, #12]
 81057e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81057e6:	3b01      	subs	r3, #1
 81057e8:	b29a      	uxth	r2, r3
 81057ea:	68fb      	ldr	r3, [r7, #12]
 81057ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81057ee:	68fb      	ldr	r3, [r7, #12]
 81057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81057f2:	b29b      	uxth	r3, r3
 81057f4:	3b01      	subs	r3, #1
 81057f6:	b29a      	uxth	r2, r3
 81057f8:	68fb      	ldr	r3, [r7, #12]
 81057fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81057fc:	68fb      	ldr	r3, [r7, #12]
 81057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105800:	b29b      	uxth	r3, r3
 8105802:	2b00      	cmp	r3, #0
 8105804:	d034      	beq.n	8105870 <HAL_I2C_Mem_Read+0x1d0>
 8105806:	68fb      	ldr	r3, [r7, #12]
 8105808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810580a:	2b00      	cmp	r3, #0
 810580c:	d130      	bne.n	8105870 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810580e:	697b      	ldr	r3, [r7, #20]
 8105810:	9300      	str	r3, [sp, #0]
 8105812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105814:	2200      	movs	r2, #0
 8105816:	2180      	movs	r1, #128	; 0x80
 8105818:	68f8      	ldr	r0, [r7, #12]
 810581a:	f000 f941 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 810581e:	4603      	mov	r3, r0
 8105820:	2b00      	cmp	r3, #0
 8105822:	d001      	beq.n	8105828 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8105824:	2301      	movs	r3, #1
 8105826:	e04d      	b.n	81058c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105828:	68fb      	ldr	r3, [r7, #12]
 810582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810582c:	b29b      	uxth	r3, r3
 810582e:	2bff      	cmp	r3, #255	; 0xff
 8105830:	d90e      	bls.n	8105850 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	22ff      	movs	r2, #255	; 0xff
 8105836:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105838:	68fb      	ldr	r3, [r7, #12]
 810583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810583c:	b2da      	uxtb	r2, r3
 810583e:	8979      	ldrh	r1, [r7, #10]
 8105840:	2300      	movs	r3, #0
 8105842:	9300      	str	r3, [sp, #0]
 8105844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105848:	68f8      	ldr	r0, [r7, #12]
 810584a:	f000 fab7 	bl	8105dbc <I2C_TransferConfig>
 810584e:	e00f      	b.n	8105870 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105850:	68fb      	ldr	r3, [r7, #12]
 8105852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105854:	b29a      	uxth	r2, r3
 8105856:	68fb      	ldr	r3, [r7, #12]
 8105858:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810585a:	68fb      	ldr	r3, [r7, #12]
 810585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810585e:	b2da      	uxtb	r2, r3
 8105860:	8979      	ldrh	r1, [r7, #10]
 8105862:	2300      	movs	r3, #0
 8105864:	9300      	str	r3, [sp, #0]
 8105866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810586a:	68f8      	ldr	r0, [r7, #12]
 810586c:	f000 faa6 	bl	8105dbc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8105870:	68fb      	ldr	r3, [r7, #12]
 8105872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105874:	b29b      	uxth	r3, r3
 8105876:	2b00      	cmp	r3, #0
 8105878:	d19a      	bne.n	81057b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810587a:	697a      	ldr	r2, [r7, #20]
 810587c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810587e:	68f8      	ldr	r0, [r7, #12]
 8105880:	f000 f98e 	bl	8105ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105884:	4603      	mov	r3, r0
 8105886:	2b00      	cmp	r3, #0
 8105888:	d001      	beq.n	810588e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810588a:	2301      	movs	r3, #1
 810588c:	e01a      	b.n	81058c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	681b      	ldr	r3, [r3, #0]
 8105892:	2220      	movs	r2, #32
 8105894:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105896:	68fb      	ldr	r3, [r7, #12]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	6859      	ldr	r1, [r3, #4]
 810589c:	68fb      	ldr	r3, [r7, #12]
 810589e:	681a      	ldr	r2, [r3, #0]
 81058a0:	4b0b      	ldr	r3, [pc, #44]	; (81058d0 <HAL_I2C_Mem_Read+0x230>)
 81058a2:	400b      	ands	r3, r1
 81058a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81058a6:	68fb      	ldr	r3, [r7, #12]
 81058a8:	2220      	movs	r2, #32
 81058aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81058ae:	68fb      	ldr	r3, [r7, #12]
 81058b0:	2200      	movs	r2, #0
 81058b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81058b6:	68fb      	ldr	r3, [r7, #12]
 81058b8:	2200      	movs	r2, #0
 81058ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81058be:	2300      	movs	r3, #0
 81058c0:	e000      	b.n	81058c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81058c2:	2302      	movs	r3, #2
  }
}
 81058c4:	4618      	mov	r0, r3
 81058c6:	3718      	adds	r7, #24
 81058c8:	46bd      	mov	sp, r7
 81058ca:	bd80      	pop	{r7, pc}
 81058cc:	80002400 	.word	0x80002400
 81058d0:	fe00e800 	.word	0xfe00e800

081058d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 81058d4:	b480      	push	{r7}
 81058d6:	b083      	sub	sp, #12
 81058d8:	af00      	add	r7, sp, #0
 81058da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81058e2:	b2db      	uxtb	r3, r3
}
 81058e4:	4618      	mov	r0, r3
 81058e6:	370c      	adds	r7, #12
 81058e8:	46bd      	mov	sp, r7
 81058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058ee:	4770      	bx	lr

081058f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 81058f0:	b480      	push	{r7}
 81058f2:	b083      	sub	sp, #12
 81058f4:	af00      	add	r7, sp, #0
 81058f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 81058fc:	4618      	mov	r0, r3
 81058fe:	370c      	adds	r7, #12
 8105900:	46bd      	mov	sp, r7
 8105902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105906:	4770      	bx	lr

08105908 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105908:	b580      	push	{r7, lr}
 810590a:	b086      	sub	sp, #24
 810590c:	af02      	add	r7, sp, #8
 810590e:	60f8      	str	r0, [r7, #12]
 8105910:	4608      	mov	r0, r1
 8105912:	4611      	mov	r1, r2
 8105914:	461a      	mov	r2, r3
 8105916:	4603      	mov	r3, r0
 8105918:	817b      	strh	r3, [r7, #10]
 810591a:	460b      	mov	r3, r1
 810591c:	813b      	strh	r3, [r7, #8]
 810591e:	4613      	mov	r3, r2
 8105920:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105922:	88fb      	ldrh	r3, [r7, #6]
 8105924:	b2da      	uxtb	r2, r3
 8105926:	8979      	ldrh	r1, [r7, #10]
 8105928:	4b20      	ldr	r3, [pc, #128]	; (81059ac <I2C_RequestMemoryWrite+0xa4>)
 810592a:	9300      	str	r3, [sp, #0]
 810592c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105930:	68f8      	ldr	r0, [r7, #12]
 8105932:	f000 fa43 	bl	8105dbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105936:	69fa      	ldr	r2, [r7, #28]
 8105938:	69b9      	ldr	r1, [r7, #24]
 810593a:	68f8      	ldr	r0, [r7, #12]
 810593c:	f000 f8f0 	bl	8105b20 <I2C_WaitOnTXISFlagUntilTimeout>
 8105940:	4603      	mov	r3, r0
 8105942:	2b00      	cmp	r3, #0
 8105944:	d001      	beq.n	810594a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8105946:	2301      	movs	r3, #1
 8105948:	e02c      	b.n	81059a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810594a:	88fb      	ldrh	r3, [r7, #6]
 810594c:	2b01      	cmp	r3, #1
 810594e:	d105      	bne.n	810595c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105950:	893b      	ldrh	r3, [r7, #8]
 8105952:	b2da      	uxtb	r2, r3
 8105954:	68fb      	ldr	r3, [r7, #12]
 8105956:	681b      	ldr	r3, [r3, #0]
 8105958:	629a      	str	r2, [r3, #40]	; 0x28
 810595a:	e015      	b.n	8105988 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810595c:	893b      	ldrh	r3, [r7, #8]
 810595e:	0a1b      	lsrs	r3, r3, #8
 8105960:	b29b      	uxth	r3, r3
 8105962:	b2da      	uxtb	r2, r3
 8105964:	68fb      	ldr	r3, [r7, #12]
 8105966:	681b      	ldr	r3, [r3, #0]
 8105968:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810596a:	69fa      	ldr	r2, [r7, #28]
 810596c:	69b9      	ldr	r1, [r7, #24]
 810596e:	68f8      	ldr	r0, [r7, #12]
 8105970:	f000 f8d6 	bl	8105b20 <I2C_WaitOnTXISFlagUntilTimeout>
 8105974:	4603      	mov	r3, r0
 8105976:	2b00      	cmp	r3, #0
 8105978:	d001      	beq.n	810597e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810597a:	2301      	movs	r3, #1
 810597c:	e012      	b.n	81059a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810597e:	893b      	ldrh	r3, [r7, #8]
 8105980:	b2da      	uxtb	r2, r3
 8105982:	68fb      	ldr	r3, [r7, #12]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105988:	69fb      	ldr	r3, [r7, #28]
 810598a:	9300      	str	r3, [sp, #0]
 810598c:	69bb      	ldr	r3, [r7, #24]
 810598e:	2200      	movs	r2, #0
 8105990:	2180      	movs	r1, #128	; 0x80
 8105992:	68f8      	ldr	r0, [r7, #12]
 8105994:	f000 f884 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 8105998:	4603      	mov	r3, r0
 810599a:	2b00      	cmp	r3, #0
 810599c:	d001      	beq.n	81059a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810599e:	2301      	movs	r3, #1
 81059a0:	e000      	b.n	81059a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81059a2:	2300      	movs	r3, #0
}
 81059a4:	4618      	mov	r0, r3
 81059a6:	3710      	adds	r7, #16
 81059a8:	46bd      	mov	sp, r7
 81059aa:	bd80      	pop	{r7, pc}
 81059ac:	80002000 	.word	0x80002000

081059b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81059b0:	b580      	push	{r7, lr}
 81059b2:	b086      	sub	sp, #24
 81059b4:	af02      	add	r7, sp, #8
 81059b6:	60f8      	str	r0, [r7, #12]
 81059b8:	4608      	mov	r0, r1
 81059ba:	4611      	mov	r1, r2
 81059bc:	461a      	mov	r2, r3
 81059be:	4603      	mov	r3, r0
 81059c0:	817b      	strh	r3, [r7, #10]
 81059c2:	460b      	mov	r3, r1
 81059c4:	813b      	strh	r3, [r7, #8]
 81059c6:	4613      	mov	r3, r2
 81059c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81059ca:	88fb      	ldrh	r3, [r7, #6]
 81059cc:	b2da      	uxtb	r2, r3
 81059ce:	8979      	ldrh	r1, [r7, #10]
 81059d0:	4b20      	ldr	r3, [pc, #128]	; (8105a54 <I2C_RequestMemoryRead+0xa4>)
 81059d2:	9300      	str	r3, [sp, #0]
 81059d4:	2300      	movs	r3, #0
 81059d6:	68f8      	ldr	r0, [r7, #12]
 81059d8:	f000 f9f0 	bl	8105dbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81059dc:	69fa      	ldr	r2, [r7, #28]
 81059de:	69b9      	ldr	r1, [r7, #24]
 81059e0:	68f8      	ldr	r0, [r7, #12]
 81059e2:	f000 f89d 	bl	8105b20 <I2C_WaitOnTXISFlagUntilTimeout>
 81059e6:	4603      	mov	r3, r0
 81059e8:	2b00      	cmp	r3, #0
 81059ea:	d001      	beq.n	81059f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81059ec:	2301      	movs	r3, #1
 81059ee:	e02c      	b.n	8105a4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81059f0:	88fb      	ldrh	r3, [r7, #6]
 81059f2:	2b01      	cmp	r3, #1
 81059f4:	d105      	bne.n	8105a02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81059f6:	893b      	ldrh	r3, [r7, #8]
 81059f8:	b2da      	uxtb	r2, r3
 81059fa:	68fb      	ldr	r3, [r7, #12]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	629a      	str	r2, [r3, #40]	; 0x28
 8105a00:	e015      	b.n	8105a2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105a02:	893b      	ldrh	r3, [r7, #8]
 8105a04:	0a1b      	lsrs	r3, r3, #8
 8105a06:	b29b      	uxth	r3, r3
 8105a08:	b2da      	uxtb	r2, r3
 8105a0a:	68fb      	ldr	r3, [r7, #12]
 8105a0c:	681b      	ldr	r3, [r3, #0]
 8105a0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105a10:	69fa      	ldr	r2, [r7, #28]
 8105a12:	69b9      	ldr	r1, [r7, #24]
 8105a14:	68f8      	ldr	r0, [r7, #12]
 8105a16:	f000 f883 	bl	8105b20 <I2C_WaitOnTXISFlagUntilTimeout>
 8105a1a:	4603      	mov	r3, r0
 8105a1c:	2b00      	cmp	r3, #0
 8105a1e:	d001      	beq.n	8105a24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8105a20:	2301      	movs	r3, #1
 8105a22:	e012      	b.n	8105a4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105a24:	893b      	ldrh	r3, [r7, #8]
 8105a26:	b2da      	uxtb	r2, r3
 8105a28:	68fb      	ldr	r3, [r7, #12]
 8105a2a:	681b      	ldr	r3, [r3, #0]
 8105a2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8105a2e:	69fb      	ldr	r3, [r7, #28]
 8105a30:	9300      	str	r3, [sp, #0]
 8105a32:	69bb      	ldr	r3, [r7, #24]
 8105a34:	2200      	movs	r2, #0
 8105a36:	2140      	movs	r1, #64	; 0x40
 8105a38:	68f8      	ldr	r0, [r7, #12]
 8105a3a:	f000 f831 	bl	8105aa0 <I2C_WaitOnFlagUntilTimeout>
 8105a3e:	4603      	mov	r3, r0
 8105a40:	2b00      	cmp	r3, #0
 8105a42:	d001      	beq.n	8105a48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8105a44:	2301      	movs	r3, #1
 8105a46:	e000      	b.n	8105a4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8105a48:	2300      	movs	r3, #0
}
 8105a4a:	4618      	mov	r0, r3
 8105a4c:	3710      	adds	r7, #16
 8105a4e:	46bd      	mov	sp, r7
 8105a50:	bd80      	pop	{r7, pc}
 8105a52:	bf00      	nop
 8105a54:	80002000 	.word	0x80002000

08105a58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105a58:	b480      	push	{r7}
 8105a5a:	b083      	sub	sp, #12
 8105a5c:	af00      	add	r7, sp, #0
 8105a5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	681b      	ldr	r3, [r3, #0]
 8105a64:	699b      	ldr	r3, [r3, #24]
 8105a66:	f003 0302 	and.w	r3, r3, #2
 8105a6a:	2b02      	cmp	r3, #2
 8105a6c:	d103      	bne.n	8105a76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	681b      	ldr	r3, [r3, #0]
 8105a72:	2200      	movs	r2, #0
 8105a74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	699b      	ldr	r3, [r3, #24]
 8105a7c:	f003 0301 	and.w	r3, r3, #1
 8105a80:	2b01      	cmp	r3, #1
 8105a82:	d007      	beq.n	8105a94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	681b      	ldr	r3, [r3, #0]
 8105a88:	699a      	ldr	r2, [r3, #24]
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	f042 0201 	orr.w	r2, r2, #1
 8105a92:	619a      	str	r2, [r3, #24]
  }
}
 8105a94:	bf00      	nop
 8105a96:	370c      	adds	r7, #12
 8105a98:	46bd      	mov	sp, r7
 8105a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a9e:	4770      	bx	lr

08105aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8105aa0:	b580      	push	{r7, lr}
 8105aa2:	b084      	sub	sp, #16
 8105aa4:	af00      	add	r7, sp, #0
 8105aa6:	60f8      	str	r0, [r7, #12]
 8105aa8:	60b9      	str	r1, [r7, #8]
 8105aaa:	603b      	str	r3, [r7, #0]
 8105aac:	4613      	mov	r3, r2
 8105aae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105ab0:	e022      	b.n	8105af8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105ab2:	683b      	ldr	r3, [r7, #0]
 8105ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ab8:	d01e      	beq.n	8105af8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105aba:	f7fc fbed 	bl	8102298 <HAL_GetTick>
 8105abe:	4602      	mov	r2, r0
 8105ac0:	69bb      	ldr	r3, [r7, #24]
 8105ac2:	1ad3      	subs	r3, r2, r3
 8105ac4:	683a      	ldr	r2, [r7, #0]
 8105ac6:	429a      	cmp	r2, r3
 8105ac8:	d302      	bcc.n	8105ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8105aca:	683b      	ldr	r3, [r7, #0]
 8105acc:	2b00      	cmp	r3, #0
 8105ace:	d113      	bne.n	8105af8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105ad0:	68fb      	ldr	r3, [r7, #12]
 8105ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105ad4:	f043 0220 	orr.w	r2, r3, #32
 8105ad8:	68fb      	ldr	r3, [r7, #12]
 8105ada:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105adc:	68fb      	ldr	r3, [r7, #12]
 8105ade:	2220      	movs	r2, #32
 8105ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105ae4:	68fb      	ldr	r3, [r7, #12]
 8105ae6:	2200      	movs	r2, #0
 8105ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105aec:	68fb      	ldr	r3, [r7, #12]
 8105aee:	2200      	movs	r2, #0
 8105af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105af4:	2301      	movs	r3, #1
 8105af6:	e00f      	b.n	8105b18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105af8:	68fb      	ldr	r3, [r7, #12]
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	699a      	ldr	r2, [r3, #24]
 8105afe:	68bb      	ldr	r3, [r7, #8]
 8105b00:	4013      	ands	r3, r2
 8105b02:	68ba      	ldr	r2, [r7, #8]
 8105b04:	429a      	cmp	r2, r3
 8105b06:	bf0c      	ite	eq
 8105b08:	2301      	moveq	r3, #1
 8105b0a:	2300      	movne	r3, #0
 8105b0c:	b2db      	uxtb	r3, r3
 8105b0e:	461a      	mov	r2, r3
 8105b10:	79fb      	ldrb	r3, [r7, #7]
 8105b12:	429a      	cmp	r2, r3
 8105b14:	d0cd      	beq.n	8105ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105b16:	2300      	movs	r3, #0
}
 8105b18:	4618      	mov	r0, r3
 8105b1a:	3710      	adds	r7, #16
 8105b1c:	46bd      	mov	sp, r7
 8105b1e:	bd80      	pop	{r7, pc}

08105b20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105b20:	b580      	push	{r7, lr}
 8105b22:	b084      	sub	sp, #16
 8105b24:	af00      	add	r7, sp, #0
 8105b26:	60f8      	str	r0, [r7, #12]
 8105b28:	60b9      	str	r1, [r7, #8]
 8105b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105b2c:	e02c      	b.n	8105b88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105b2e:	687a      	ldr	r2, [r7, #4]
 8105b30:	68b9      	ldr	r1, [r7, #8]
 8105b32:	68f8      	ldr	r0, [r7, #12]
 8105b34:	f000 f8dc 	bl	8105cf0 <I2C_IsAcknowledgeFailed>
 8105b38:	4603      	mov	r3, r0
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d001      	beq.n	8105b42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105b3e:	2301      	movs	r3, #1
 8105b40:	e02a      	b.n	8105b98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105b42:	68bb      	ldr	r3, [r7, #8]
 8105b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b48:	d01e      	beq.n	8105b88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105b4a:	f7fc fba5 	bl	8102298 <HAL_GetTick>
 8105b4e:	4602      	mov	r2, r0
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	1ad3      	subs	r3, r2, r3
 8105b54:	68ba      	ldr	r2, [r7, #8]
 8105b56:	429a      	cmp	r2, r3
 8105b58:	d302      	bcc.n	8105b60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105b5a:	68bb      	ldr	r3, [r7, #8]
 8105b5c:	2b00      	cmp	r3, #0
 8105b5e:	d113      	bne.n	8105b88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105b60:	68fb      	ldr	r3, [r7, #12]
 8105b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b64:	f043 0220 	orr.w	r2, r3, #32
 8105b68:	68fb      	ldr	r3, [r7, #12]
 8105b6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105b6c:	68fb      	ldr	r3, [r7, #12]
 8105b6e:	2220      	movs	r2, #32
 8105b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105b74:	68fb      	ldr	r3, [r7, #12]
 8105b76:	2200      	movs	r2, #0
 8105b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105b7c:	68fb      	ldr	r3, [r7, #12]
 8105b7e:	2200      	movs	r2, #0
 8105b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105b84:	2301      	movs	r3, #1
 8105b86:	e007      	b.n	8105b98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105b88:	68fb      	ldr	r3, [r7, #12]
 8105b8a:	681b      	ldr	r3, [r3, #0]
 8105b8c:	699b      	ldr	r3, [r3, #24]
 8105b8e:	f003 0302 	and.w	r3, r3, #2
 8105b92:	2b02      	cmp	r3, #2
 8105b94:	d1cb      	bne.n	8105b2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105b96:	2300      	movs	r3, #0
}
 8105b98:	4618      	mov	r0, r3
 8105b9a:	3710      	adds	r7, #16
 8105b9c:	46bd      	mov	sp, r7
 8105b9e:	bd80      	pop	{r7, pc}

08105ba0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105ba0:	b580      	push	{r7, lr}
 8105ba2:	b084      	sub	sp, #16
 8105ba4:	af00      	add	r7, sp, #0
 8105ba6:	60f8      	str	r0, [r7, #12]
 8105ba8:	60b9      	str	r1, [r7, #8]
 8105baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105bac:	e028      	b.n	8105c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105bae:	687a      	ldr	r2, [r7, #4]
 8105bb0:	68b9      	ldr	r1, [r7, #8]
 8105bb2:	68f8      	ldr	r0, [r7, #12]
 8105bb4:	f000 f89c 	bl	8105cf0 <I2C_IsAcknowledgeFailed>
 8105bb8:	4603      	mov	r3, r0
 8105bba:	2b00      	cmp	r3, #0
 8105bbc:	d001      	beq.n	8105bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105bbe:	2301      	movs	r3, #1
 8105bc0:	e026      	b.n	8105c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105bc2:	f7fc fb69 	bl	8102298 <HAL_GetTick>
 8105bc6:	4602      	mov	r2, r0
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	1ad3      	subs	r3, r2, r3
 8105bcc:	68ba      	ldr	r2, [r7, #8]
 8105bce:	429a      	cmp	r2, r3
 8105bd0:	d302      	bcc.n	8105bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105bd2:	68bb      	ldr	r3, [r7, #8]
 8105bd4:	2b00      	cmp	r3, #0
 8105bd6:	d113      	bne.n	8105c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105bd8:	68fb      	ldr	r3, [r7, #12]
 8105bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105bdc:	f043 0220 	orr.w	r2, r3, #32
 8105be0:	68fb      	ldr	r3, [r7, #12]
 8105be2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105be4:	68fb      	ldr	r3, [r7, #12]
 8105be6:	2220      	movs	r2, #32
 8105be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8105bec:	68fb      	ldr	r3, [r7, #12]
 8105bee:	2200      	movs	r2, #0
 8105bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105bf4:	68fb      	ldr	r3, [r7, #12]
 8105bf6:	2200      	movs	r2, #0
 8105bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105bfc:	2301      	movs	r3, #1
 8105bfe:	e007      	b.n	8105c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105c00:	68fb      	ldr	r3, [r7, #12]
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	699b      	ldr	r3, [r3, #24]
 8105c06:	f003 0320 	and.w	r3, r3, #32
 8105c0a:	2b20      	cmp	r3, #32
 8105c0c:	d1cf      	bne.n	8105bae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105c0e:	2300      	movs	r3, #0
}
 8105c10:	4618      	mov	r0, r3
 8105c12:	3710      	adds	r7, #16
 8105c14:	46bd      	mov	sp, r7
 8105c16:	bd80      	pop	{r7, pc}

08105c18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105c18:	b580      	push	{r7, lr}
 8105c1a:	b084      	sub	sp, #16
 8105c1c:	af00      	add	r7, sp, #0
 8105c1e:	60f8      	str	r0, [r7, #12]
 8105c20:	60b9      	str	r1, [r7, #8]
 8105c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105c24:	e055      	b.n	8105cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105c26:	687a      	ldr	r2, [r7, #4]
 8105c28:	68b9      	ldr	r1, [r7, #8]
 8105c2a:	68f8      	ldr	r0, [r7, #12]
 8105c2c:	f000 f860 	bl	8105cf0 <I2C_IsAcknowledgeFailed>
 8105c30:	4603      	mov	r3, r0
 8105c32:	2b00      	cmp	r3, #0
 8105c34:	d001      	beq.n	8105c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105c36:	2301      	movs	r3, #1
 8105c38:	e053      	b.n	8105ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8105c3a:	68fb      	ldr	r3, [r7, #12]
 8105c3c:	681b      	ldr	r3, [r3, #0]
 8105c3e:	699b      	ldr	r3, [r3, #24]
 8105c40:	f003 0320 	and.w	r3, r3, #32
 8105c44:	2b20      	cmp	r3, #32
 8105c46:	d129      	bne.n	8105c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8105c48:	68fb      	ldr	r3, [r7, #12]
 8105c4a:	681b      	ldr	r3, [r3, #0]
 8105c4c:	699b      	ldr	r3, [r3, #24]
 8105c4e:	f003 0304 	and.w	r3, r3, #4
 8105c52:	2b04      	cmp	r3, #4
 8105c54:	d105      	bne.n	8105c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8105c56:	68fb      	ldr	r3, [r7, #12]
 8105c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105c5a:	2b00      	cmp	r3, #0
 8105c5c:	d001      	beq.n	8105c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8105c5e:	2300      	movs	r3, #0
 8105c60:	e03f      	b.n	8105ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105c62:	68fb      	ldr	r3, [r7, #12]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	2220      	movs	r2, #32
 8105c68:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8105c6a:	68fb      	ldr	r3, [r7, #12]
 8105c6c:	681b      	ldr	r3, [r3, #0]
 8105c6e:	6859      	ldr	r1, [r3, #4]
 8105c70:	68fb      	ldr	r3, [r7, #12]
 8105c72:	681a      	ldr	r2, [r3, #0]
 8105c74:	4b1d      	ldr	r3, [pc, #116]	; (8105cec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8105c76:	400b      	ands	r3, r1
 8105c78:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105c7a:	68fb      	ldr	r3, [r7, #12]
 8105c7c:	2200      	movs	r2, #0
 8105c7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105c80:	68fb      	ldr	r3, [r7, #12]
 8105c82:	2220      	movs	r2, #32
 8105c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105c88:	68fb      	ldr	r3, [r7, #12]
 8105c8a:	2200      	movs	r2, #0
 8105c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105c90:	68fb      	ldr	r3, [r7, #12]
 8105c92:	2200      	movs	r2, #0
 8105c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105c98:	2301      	movs	r3, #1
 8105c9a:	e022      	b.n	8105ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105c9c:	f7fc fafc 	bl	8102298 <HAL_GetTick>
 8105ca0:	4602      	mov	r2, r0
 8105ca2:	687b      	ldr	r3, [r7, #4]
 8105ca4:	1ad3      	subs	r3, r2, r3
 8105ca6:	68ba      	ldr	r2, [r7, #8]
 8105ca8:	429a      	cmp	r2, r3
 8105caa:	d302      	bcc.n	8105cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8105cac:	68bb      	ldr	r3, [r7, #8]
 8105cae:	2b00      	cmp	r3, #0
 8105cb0:	d10f      	bne.n	8105cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105cb2:	68fb      	ldr	r3, [r7, #12]
 8105cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105cb6:	f043 0220 	orr.w	r2, r3, #32
 8105cba:	68fb      	ldr	r3, [r7, #12]
 8105cbc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105cbe:	68fb      	ldr	r3, [r7, #12]
 8105cc0:	2220      	movs	r2, #32
 8105cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	2200      	movs	r2, #0
 8105cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105cce:	2301      	movs	r3, #1
 8105cd0:	e007      	b.n	8105ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105cd2:	68fb      	ldr	r3, [r7, #12]
 8105cd4:	681b      	ldr	r3, [r3, #0]
 8105cd6:	699b      	ldr	r3, [r3, #24]
 8105cd8:	f003 0304 	and.w	r3, r3, #4
 8105cdc:	2b04      	cmp	r3, #4
 8105cde:	d1a2      	bne.n	8105c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105ce0:	2300      	movs	r3, #0
}
 8105ce2:	4618      	mov	r0, r3
 8105ce4:	3710      	adds	r7, #16
 8105ce6:	46bd      	mov	sp, r7
 8105ce8:	bd80      	pop	{r7, pc}
 8105cea:	bf00      	nop
 8105cec:	fe00e800 	.word	0xfe00e800

08105cf0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105cf0:	b580      	push	{r7, lr}
 8105cf2:	b084      	sub	sp, #16
 8105cf4:	af00      	add	r7, sp, #0
 8105cf6:	60f8      	str	r0, [r7, #12]
 8105cf8:	60b9      	str	r1, [r7, #8]
 8105cfa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	699b      	ldr	r3, [r3, #24]
 8105d02:	f003 0310 	and.w	r3, r3, #16
 8105d06:	2b10      	cmp	r3, #16
 8105d08:	d151      	bne.n	8105dae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105d0a:	e022      	b.n	8105d52 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105d0c:	68bb      	ldr	r3, [r7, #8]
 8105d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d12:	d01e      	beq.n	8105d52 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105d14:	f7fc fac0 	bl	8102298 <HAL_GetTick>
 8105d18:	4602      	mov	r2, r0
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	1ad3      	subs	r3, r2, r3
 8105d1e:	68ba      	ldr	r2, [r7, #8]
 8105d20:	429a      	cmp	r2, r3
 8105d22:	d302      	bcc.n	8105d2a <I2C_IsAcknowledgeFailed+0x3a>
 8105d24:	68bb      	ldr	r3, [r7, #8]
 8105d26:	2b00      	cmp	r3, #0
 8105d28:	d113      	bne.n	8105d52 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105d2a:	68fb      	ldr	r3, [r7, #12]
 8105d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105d2e:	f043 0220 	orr.w	r2, r3, #32
 8105d32:	68fb      	ldr	r3, [r7, #12]
 8105d34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105d36:	68fb      	ldr	r3, [r7, #12]
 8105d38:	2220      	movs	r2, #32
 8105d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105d3e:	68fb      	ldr	r3, [r7, #12]
 8105d40:	2200      	movs	r2, #0
 8105d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105d46:	68fb      	ldr	r3, [r7, #12]
 8105d48:	2200      	movs	r2, #0
 8105d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8105d4e:	2301      	movs	r3, #1
 8105d50:	e02e      	b.n	8105db0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105d52:	68fb      	ldr	r3, [r7, #12]
 8105d54:	681b      	ldr	r3, [r3, #0]
 8105d56:	699b      	ldr	r3, [r3, #24]
 8105d58:	f003 0320 	and.w	r3, r3, #32
 8105d5c:	2b20      	cmp	r3, #32
 8105d5e:	d1d5      	bne.n	8105d0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105d60:	68fb      	ldr	r3, [r7, #12]
 8105d62:	681b      	ldr	r3, [r3, #0]
 8105d64:	2210      	movs	r2, #16
 8105d66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105d68:	68fb      	ldr	r3, [r7, #12]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	2220      	movs	r2, #32
 8105d6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8105d70:	68f8      	ldr	r0, [r7, #12]
 8105d72:	f7ff fe71 	bl	8105a58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105d76:	68fb      	ldr	r3, [r7, #12]
 8105d78:	681b      	ldr	r3, [r3, #0]
 8105d7a:	6859      	ldr	r1, [r3, #4]
 8105d7c:	68fb      	ldr	r3, [r7, #12]
 8105d7e:	681a      	ldr	r2, [r3, #0]
 8105d80:	4b0d      	ldr	r3, [pc, #52]	; (8105db8 <I2C_IsAcknowledgeFailed+0xc8>)
 8105d82:	400b      	ands	r3, r1
 8105d84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105d86:	68fb      	ldr	r3, [r7, #12]
 8105d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105d8a:	f043 0204 	orr.w	r2, r3, #4
 8105d8e:	68fb      	ldr	r3, [r7, #12]
 8105d90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8105d92:	68fb      	ldr	r3, [r7, #12]
 8105d94:	2220      	movs	r2, #32
 8105d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8105d9a:	68fb      	ldr	r3, [r7, #12]
 8105d9c:	2200      	movs	r2, #0
 8105d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105da2:	68fb      	ldr	r3, [r7, #12]
 8105da4:	2200      	movs	r2, #0
 8105da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8105daa:	2301      	movs	r3, #1
 8105dac:	e000      	b.n	8105db0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8105dae:	2300      	movs	r3, #0
}
 8105db0:	4618      	mov	r0, r3
 8105db2:	3710      	adds	r7, #16
 8105db4:	46bd      	mov	sp, r7
 8105db6:	bd80      	pop	{r7, pc}
 8105db8:	fe00e800 	.word	0xfe00e800

08105dbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8105dbc:	b480      	push	{r7}
 8105dbe:	b085      	sub	sp, #20
 8105dc0:	af00      	add	r7, sp, #0
 8105dc2:	60f8      	str	r0, [r7, #12]
 8105dc4:	607b      	str	r3, [r7, #4]
 8105dc6:	460b      	mov	r3, r1
 8105dc8:	817b      	strh	r3, [r7, #10]
 8105dca:	4613      	mov	r3, r2
 8105dcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8105dce:	68fb      	ldr	r3, [r7, #12]
 8105dd0:	681b      	ldr	r3, [r3, #0]
 8105dd2:	685a      	ldr	r2, [r3, #4]
 8105dd4:	69bb      	ldr	r3, [r7, #24]
 8105dd6:	0d5b      	lsrs	r3, r3, #21
 8105dd8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8105ddc:	4b0d      	ldr	r3, [pc, #52]	; (8105e14 <I2C_TransferConfig+0x58>)
 8105dde:	430b      	orrs	r3, r1
 8105de0:	43db      	mvns	r3, r3
 8105de2:	ea02 0103 	and.w	r1, r2, r3
 8105de6:	897b      	ldrh	r3, [r7, #10]
 8105de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8105dec:	7a7b      	ldrb	r3, [r7, #9]
 8105dee:	041b      	lsls	r3, r3, #16
 8105df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8105df4:	431a      	orrs	r2, r3
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	431a      	orrs	r2, r3
 8105dfa:	69bb      	ldr	r3, [r7, #24]
 8105dfc:	431a      	orrs	r2, r3
 8105dfe:	68fb      	ldr	r3, [r7, #12]
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	430a      	orrs	r2, r1
 8105e04:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8105e06:	bf00      	nop
 8105e08:	3714      	adds	r7, #20
 8105e0a:	46bd      	mov	sp, r7
 8105e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e10:	4770      	bx	lr
 8105e12:	bf00      	nop
 8105e14:	03ff63ff 	.word	0x03ff63ff

08105e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105e18:	b480      	push	{r7}
 8105e1a:	b083      	sub	sp, #12
 8105e1c:	af00      	add	r7, sp, #0
 8105e1e:	6078      	str	r0, [r7, #4]
 8105e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105e28:	b2db      	uxtb	r3, r3
 8105e2a:	2b20      	cmp	r3, #32
 8105e2c:	d138      	bne.n	8105ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105e2e:	687b      	ldr	r3, [r7, #4]
 8105e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105e34:	2b01      	cmp	r3, #1
 8105e36:	d101      	bne.n	8105e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8105e38:	2302      	movs	r3, #2
 8105e3a:	e032      	b.n	8105ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8105e3c:	687b      	ldr	r3, [r7, #4]
 8105e3e:	2201      	movs	r2, #1
 8105e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105e44:	687b      	ldr	r3, [r7, #4]
 8105e46:	2224      	movs	r2, #36	; 0x24
 8105e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105e4c:	687b      	ldr	r3, [r7, #4]
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	681a      	ldr	r2, [r3, #0]
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	681b      	ldr	r3, [r3, #0]
 8105e56:	f022 0201 	bic.w	r2, r2, #1
 8105e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	681a      	ldr	r2, [r3, #0]
 8105e62:	687b      	ldr	r3, [r7, #4]
 8105e64:	681b      	ldr	r3, [r3, #0]
 8105e66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8105e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	681b      	ldr	r3, [r3, #0]
 8105e70:	6819      	ldr	r1, [r3, #0]
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	681b      	ldr	r3, [r3, #0]
 8105e76:	683a      	ldr	r2, [r7, #0]
 8105e78:	430a      	orrs	r2, r1
 8105e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105e7c:	687b      	ldr	r3, [r7, #4]
 8105e7e:	681b      	ldr	r3, [r3, #0]
 8105e80:	681a      	ldr	r2, [r3, #0]
 8105e82:	687b      	ldr	r3, [r7, #4]
 8105e84:	681b      	ldr	r3, [r3, #0]
 8105e86:	f042 0201 	orr.w	r2, r2, #1
 8105e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105e8c:	687b      	ldr	r3, [r7, #4]
 8105e8e:	2220      	movs	r2, #32
 8105e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	2200      	movs	r2, #0
 8105e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105e9c:	2300      	movs	r3, #0
 8105e9e:	e000      	b.n	8105ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8105ea0:	2302      	movs	r3, #2
  }
}
 8105ea2:	4618      	mov	r0, r3
 8105ea4:	370c      	adds	r7, #12
 8105ea6:	46bd      	mov	sp, r7
 8105ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eac:	4770      	bx	lr

08105eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8105eae:	b480      	push	{r7}
 8105eb0:	b085      	sub	sp, #20
 8105eb2:	af00      	add	r7, sp, #0
 8105eb4:	6078      	str	r0, [r7, #4]
 8105eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105ebe:	b2db      	uxtb	r3, r3
 8105ec0:	2b20      	cmp	r3, #32
 8105ec2:	d139      	bne.n	8105f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105eca:	2b01      	cmp	r3, #1
 8105ecc:	d101      	bne.n	8105ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105ece:	2302      	movs	r3, #2
 8105ed0:	e033      	b.n	8105f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	2201      	movs	r2, #1
 8105ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	2224      	movs	r2, #36	; 0x24
 8105ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105ee2:	687b      	ldr	r3, [r7, #4]
 8105ee4:	681b      	ldr	r3, [r3, #0]
 8105ee6:	681a      	ldr	r2, [r3, #0]
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	681b      	ldr	r3, [r3, #0]
 8105eec:	f022 0201 	bic.w	r2, r2, #1
 8105ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105ef2:	687b      	ldr	r3, [r7, #4]
 8105ef4:	681b      	ldr	r3, [r3, #0]
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8105efa:	68fb      	ldr	r3, [r7, #12]
 8105efc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105f02:	683b      	ldr	r3, [r7, #0]
 8105f04:	021b      	lsls	r3, r3, #8
 8105f06:	68fa      	ldr	r2, [r7, #12]
 8105f08:	4313      	orrs	r3, r2
 8105f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	681b      	ldr	r3, [r3, #0]
 8105f10:	68fa      	ldr	r2, [r7, #12]
 8105f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	681a      	ldr	r2, [r3, #0]
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	f042 0201 	orr.w	r2, r2, #1
 8105f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	2220      	movs	r2, #32
 8105f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105f2c:	687b      	ldr	r3, [r7, #4]
 8105f2e:	2200      	movs	r2, #0
 8105f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105f34:	2300      	movs	r3, #0
 8105f36:	e000      	b.n	8105f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8105f38:	2302      	movs	r3, #2
  }
}
 8105f3a:	4618      	mov	r0, r3
 8105f3c:	3714      	adds	r7, #20
 8105f3e:	46bd      	mov	sp, r7
 8105f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f44:	4770      	bx	lr
	...

08105f48 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8105f48:	b480      	push	{r7}
 8105f4a:	b085      	sub	sp, #20
 8105f4c:	af00      	add	r7, sp, #0
 8105f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105f50:	4b0d      	ldr	r3, [pc, #52]	; (8105f88 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105f56:	4a0c      	ldr	r2, [pc, #48]	; (8105f88 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105f58:	f043 0302 	orr.w	r3, r3, #2
 8105f5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8105f60:	4b09      	ldr	r3, [pc, #36]	; (8105f88 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8105f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105f66:	f003 0302 	and.w	r3, r3, #2
 8105f6a:	60fb      	str	r3, [r7, #12]
 8105f6c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8105f6e:	4b07      	ldr	r3, [pc, #28]	; (8105f8c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8105f70:	685a      	ldr	r2, [r3, #4]
 8105f72:	4906      	ldr	r1, [pc, #24]	; (8105f8c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	4313      	orrs	r3, r2
 8105f78:	604b      	str	r3, [r1, #4]
}
 8105f7a:	bf00      	nop
 8105f7c:	3714      	adds	r7, #20
 8105f7e:	46bd      	mov	sp, r7
 8105f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f84:	4770      	bx	lr
 8105f86:	bf00      	nop
 8105f88:	58024400 	.word	0x58024400
 8105f8c:	58000400 	.word	0x58000400

08105f90 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8105f90:	b580      	push	{r7, lr}
 8105f92:	b084      	sub	sp, #16
 8105f94:	af00      	add	r7, sp, #0
 8105f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	2b00      	cmp	r3, #0
 8105f9c:	d101      	bne.n	8105fa2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8105f9e:	2301      	movs	r3, #1
 8105fa0:	e038      	b.n	8106014 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8105faa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	681b      	ldr	r3, [r3, #0]
 8105fb0:	f245 5255 	movw	r2, #21845	; 0x5555
 8105fb4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	681b      	ldr	r3, [r3, #0]
 8105fba:	687a      	ldr	r2, [r7, #4]
 8105fbc:	6852      	ldr	r2, [r2, #4]
 8105fbe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	687a      	ldr	r2, [r7, #4]
 8105fc6:	6892      	ldr	r2, [r2, #8]
 8105fc8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8105fca:	f7fc f965 	bl	8102298 <HAL_GetTick>
 8105fce:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8105fd0:	e008      	b.n	8105fe4 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8105fd2:	f7fc f961 	bl	8102298 <HAL_GetTick>
 8105fd6:	4602      	mov	r2, r0
 8105fd8:	68fb      	ldr	r3, [r7, #12]
 8105fda:	1ad3      	subs	r3, r2, r3
 8105fdc:	2b30      	cmp	r3, #48	; 0x30
 8105fde:	d901      	bls.n	8105fe4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8105fe0:	2303      	movs	r3, #3
 8105fe2:	e017      	b.n	8106014 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	681b      	ldr	r3, [r3, #0]
 8105fe8:	68db      	ldr	r3, [r3, #12]
 8105fea:	2b00      	cmp	r3, #0
 8105fec:	d1f1      	bne.n	8105fd2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	681b      	ldr	r3, [r3, #0]
 8105ff2:	691a      	ldr	r2, [r3, #16]
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	68db      	ldr	r3, [r3, #12]
 8105ff8:	429a      	cmp	r2, r3
 8105ffa:	d005      	beq.n	8106008 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	681b      	ldr	r3, [r3, #0]
 8106000:	687a      	ldr	r2, [r7, #4]
 8106002:	68d2      	ldr	r2, [r2, #12]
 8106004:	611a      	str	r2, [r3, #16]
 8106006:	e004      	b.n	8106012 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	681b      	ldr	r3, [r3, #0]
 810600c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8106010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8106012:	2300      	movs	r3, #0
}
 8106014:	4618      	mov	r0, r3
 8106016:	3710      	adds	r7, #16
 8106018:	46bd      	mov	sp, r7
 810601a:	bd80      	pop	{r7, pc}

0810601c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 810601c:	b480      	push	{r7}
 810601e:	b083      	sub	sp, #12
 8106020:	af00      	add	r7, sp, #0
 8106022:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	681b      	ldr	r3, [r3, #0]
 8106028:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 810602c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 810602e:	2300      	movs	r3, #0
}
 8106030:	4618      	mov	r0, r3
 8106032:	370c      	adds	r7, #12
 8106034:	46bd      	mov	sp, r7
 8106036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810603a:	4770      	bx	lr

0810603c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810603c:	b580      	push	{r7, lr}
 810603e:	b084      	sub	sp, #16
 8106040:	af00      	add	r7, sp, #0
 8106042:	60f8      	str	r0, [r7, #12]
 8106044:	460b      	mov	r3, r1
 8106046:	607a      	str	r2, [r7, #4]
 8106048:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810604a:	4b35      	ldr	r3, [pc, #212]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810604c:	681b      	ldr	r3, [r3, #0]
 810604e:	f023 0201 	bic.w	r2, r3, #1
 8106052:	4933      	ldr	r1, [pc, #204]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106054:	68fb      	ldr	r3, [r7, #12]
 8106056:	4313      	orrs	r3, r2
 8106058:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	2b00      	cmp	r3, #0
 810605e:	d121      	bne.n	81060a4 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106060:	f7fc fa20 	bl	81024a4 <HAL_GetCurrentCPUID>
 8106064:	4603      	mov	r3, r0
 8106066:	2b03      	cmp	r3, #3
 8106068:	d154      	bne.n	8106114 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810606a:	4b2d      	ldr	r3, [pc, #180]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810606c:	691b      	ldr	r3, [r3, #16]
 810606e:	4a2c      	ldr	r2, [pc, #176]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106070:	f023 0301 	bic.w	r3, r3, #1
 8106074:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106076:	4b2b      	ldr	r3, [pc, #172]	; (8106124 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106078:	691b      	ldr	r3, [r3, #16]
 810607a:	4a2a      	ldr	r2, [pc, #168]	; (8106124 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810607c:	f043 0304 	orr.w	r3, r3, #4
 8106080:	6113      	str	r3, [r2, #16]
 8106082:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8106086:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810608a:	7afb      	ldrb	r3, [r7, #11]
 810608c:	2b01      	cmp	r3, #1
 810608e:	d101      	bne.n	8106094 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106090:	bf30      	wfi
 8106092:	e000      	b.n	8106096 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106094:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106096:	4b23      	ldr	r3, [pc, #140]	; (8106124 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8106098:	691b      	ldr	r3, [r3, #16]
 810609a:	4a22      	ldr	r2, [pc, #136]	; (8106124 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810609c:	f023 0304 	bic.w	r3, r3, #4
 81060a0:	6113      	str	r3, [r2, #16]
 81060a2:	e03a      	b.n	810611a <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81060a4:	687b      	ldr	r3, [r7, #4]
 81060a6:	2b01      	cmp	r3, #1
 81060a8:	d121      	bne.n	81060ee <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81060aa:	f7fc f9fb 	bl	81024a4 <HAL_GetCurrentCPUID>
 81060ae:	4603      	mov	r3, r0
 81060b0:	2b01      	cmp	r3, #1
 81060b2:	d131      	bne.n	8106118 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81060b4:	4b1a      	ldr	r3, [pc, #104]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81060b6:	695b      	ldr	r3, [r3, #20]
 81060b8:	4a19      	ldr	r2, [pc, #100]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81060ba:	f023 0302 	bic.w	r3, r3, #2
 81060be:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81060c0:	4b18      	ldr	r3, [pc, #96]	; (8106124 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81060c2:	691b      	ldr	r3, [r3, #16]
 81060c4:	4a17      	ldr	r2, [pc, #92]	; (8106124 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81060c6:	f043 0304 	orr.w	r3, r3, #4
 81060ca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81060cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81060d0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81060d4:	7afb      	ldrb	r3, [r7, #11]
 81060d6:	2b01      	cmp	r3, #1
 81060d8:	d101      	bne.n	81060de <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81060da:	bf30      	wfi
 81060dc:	e000      	b.n	81060e0 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81060de:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81060e0:	4b10      	ldr	r3, [pc, #64]	; (8106124 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81060e2:	691b      	ldr	r3, [r3, #16]
 81060e4:	4a0f      	ldr	r2, [pc, #60]	; (8106124 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81060e6:	f023 0304 	bic.w	r3, r3, #4
 81060ea:	6113      	str	r3, [r2, #16]
 81060ec:	e015      	b.n	810611a <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81060ee:	f7fc f9d9 	bl	81024a4 <HAL_GetCurrentCPUID>
 81060f2:	4603      	mov	r3, r0
 81060f4:	2b03      	cmp	r3, #3
 81060f6:	d106      	bne.n	8106106 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81060f8:	4b09      	ldr	r3, [pc, #36]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81060fa:	691b      	ldr	r3, [r3, #16]
 81060fc:	4a08      	ldr	r2, [pc, #32]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81060fe:	f023 0304 	bic.w	r3, r3, #4
 8106102:	6113      	str	r3, [r2, #16]
 8106104:	e009      	b.n	810611a <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8106106:	4b06      	ldr	r3, [pc, #24]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8106108:	695b      	ldr	r3, [r3, #20]
 810610a:	4a05      	ldr	r2, [pc, #20]	; (8106120 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810610c:	f023 0304 	bic.w	r3, r3, #4
 8106110:	6153      	str	r3, [r2, #20]
 8106112:	e002      	b.n	810611a <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8106114:	bf00      	nop
 8106116:	e000      	b.n	810611a <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8106118:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810611a:	3710      	adds	r7, #16
 810611c:	46bd      	mov	sp, r7
 810611e:	bd80      	pop	{r7, pc}
 8106120:	58024800 	.word	0x58024800
 8106124:	e000ed00 	.word	0xe000ed00

08106128 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106128:	b580      	push	{r7, lr}
 810612a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810612c:	f7fc f9ba 	bl	81024a4 <HAL_GetCurrentCPUID>
 8106130:	4603      	mov	r3, r0
 8106132:	2b03      	cmp	r3, #3
 8106134:	d101      	bne.n	810613a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106136:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106138:	e001      	b.n	810613e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810613a:	bf40      	sev
    __WFE ();
 810613c:	bf20      	wfe
}
 810613e:	bf00      	nop
 8106140:	bd80      	pop	{r7, pc}
	...

08106144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106144:	b480      	push	{r7}
 8106146:	b089      	sub	sp, #36	; 0x24
 8106148:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810614a:	4baf      	ldr	r3, [pc, #700]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810614c:	691b      	ldr	r3, [r3, #16]
 810614e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106152:	2b18      	cmp	r3, #24
 8106154:	f200 814e 	bhi.w	81063f4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8106158:	a201      	add	r2, pc, #4	; (adr r2, 8106160 <HAL_RCC_GetSysClockFreq+0x1c>)
 810615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810615e:	bf00      	nop
 8106160:	081061c5 	.word	0x081061c5
 8106164:	081063f5 	.word	0x081063f5
 8106168:	081063f5 	.word	0x081063f5
 810616c:	081063f5 	.word	0x081063f5
 8106170:	081063f5 	.word	0x081063f5
 8106174:	081063f5 	.word	0x081063f5
 8106178:	081063f5 	.word	0x081063f5
 810617c:	081063f5 	.word	0x081063f5
 8106180:	081061eb 	.word	0x081061eb
 8106184:	081063f5 	.word	0x081063f5
 8106188:	081063f5 	.word	0x081063f5
 810618c:	081063f5 	.word	0x081063f5
 8106190:	081063f5 	.word	0x081063f5
 8106194:	081063f5 	.word	0x081063f5
 8106198:	081063f5 	.word	0x081063f5
 810619c:	081063f5 	.word	0x081063f5
 81061a0:	081061f1 	.word	0x081061f1
 81061a4:	081063f5 	.word	0x081063f5
 81061a8:	081063f5 	.word	0x081063f5
 81061ac:	081063f5 	.word	0x081063f5
 81061b0:	081063f5 	.word	0x081063f5
 81061b4:	081063f5 	.word	0x081063f5
 81061b8:	081063f5 	.word	0x081063f5
 81061bc:	081063f5 	.word	0x081063f5
 81061c0:	081061f7 	.word	0x081061f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81061c4:	4b90      	ldr	r3, [pc, #576]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	f003 0320 	and.w	r3, r3, #32
 81061cc:	2b00      	cmp	r3, #0
 81061ce:	d009      	beq.n	81061e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81061d0:	4b8d      	ldr	r3, [pc, #564]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	08db      	lsrs	r3, r3, #3
 81061d6:	f003 0303 	and.w	r3, r3, #3
 81061da:	4a8c      	ldr	r2, [pc, #560]	; (810640c <HAL_RCC_GetSysClockFreq+0x2c8>)
 81061dc:	fa22 f303 	lsr.w	r3, r2, r3
 81061e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81061e2:	e10a      	b.n	81063fa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81061e4:	4b89      	ldr	r3, [pc, #548]	; (810640c <HAL_RCC_GetSysClockFreq+0x2c8>)
 81061e6:	61bb      	str	r3, [r7, #24]
    break;
 81061e8:	e107      	b.n	81063fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81061ea:	4b89      	ldr	r3, [pc, #548]	; (8106410 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81061ec:	61bb      	str	r3, [r7, #24]
    break;
 81061ee:	e104      	b.n	81063fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81061f0:	4b88      	ldr	r3, [pc, #544]	; (8106414 <HAL_RCC_GetSysClockFreq+0x2d0>)
 81061f2:	61bb      	str	r3, [r7, #24]
    break;
 81061f4:	e101      	b.n	81063fa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81061f6:	4b84      	ldr	r3, [pc, #528]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81061fa:	f003 0303 	and.w	r3, r3, #3
 81061fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8106200:	4b81      	ldr	r3, [pc, #516]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106204:	091b      	lsrs	r3, r3, #4
 8106206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810620a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810620c:	4b7e      	ldr	r3, [pc, #504]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106210:	f003 0301 	and.w	r3, r3, #1
 8106214:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8106216:	4b7c      	ldr	r3, [pc, #496]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810621a:	08db      	lsrs	r3, r3, #3
 810621c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106220:	68fa      	ldr	r2, [r7, #12]
 8106222:	fb02 f303 	mul.w	r3, r2, r3
 8106226:	ee07 3a90 	vmov	s15, r3
 810622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810622e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8106232:	693b      	ldr	r3, [r7, #16]
 8106234:	2b00      	cmp	r3, #0
 8106236:	f000 80da 	beq.w	81063ee <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 810623a:	697b      	ldr	r3, [r7, #20]
 810623c:	2b01      	cmp	r3, #1
 810623e:	d05a      	beq.n	81062f6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8106240:	2b01      	cmp	r3, #1
 8106242:	d302      	bcc.n	810624a <HAL_RCC_GetSysClockFreq+0x106>
 8106244:	2b02      	cmp	r3, #2
 8106246:	d078      	beq.n	810633a <HAL_RCC_GetSysClockFreq+0x1f6>
 8106248:	e099      	b.n	810637e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810624a:	4b6f      	ldr	r3, [pc, #444]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	f003 0320 	and.w	r3, r3, #32
 8106252:	2b00      	cmp	r3, #0
 8106254:	d02d      	beq.n	81062b2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106256:	4b6c      	ldr	r3, [pc, #432]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106258:	681b      	ldr	r3, [r3, #0]
 810625a:	08db      	lsrs	r3, r3, #3
 810625c:	f003 0303 	and.w	r3, r3, #3
 8106260:	4a6a      	ldr	r2, [pc, #424]	; (810640c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8106262:	fa22 f303 	lsr.w	r3, r2, r3
 8106266:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	ee07 3a90 	vmov	s15, r3
 810626e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106272:	693b      	ldr	r3, [r7, #16]
 8106274:	ee07 3a90 	vmov	s15, r3
 8106278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810627c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106280:	4b61      	ldr	r3, [pc, #388]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106288:	ee07 3a90 	vmov	s15, r3
 810628c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106290:	ed97 6a02 	vldr	s12, [r7, #8]
 8106294:	eddf 5a60 	vldr	s11, [pc, #384]	; 8106418 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810629c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81062b0:	e087      	b.n	81063c2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81062b2:	693b      	ldr	r3, [r7, #16]
 81062b4:	ee07 3a90 	vmov	s15, r3
 81062b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062bc:	eddf 6a57 	vldr	s13, [pc, #348]	; 810641c <HAL_RCC_GetSysClockFreq+0x2d8>
 81062c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062c4:	4b50      	ldr	r3, [pc, #320]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81062c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062cc:	ee07 3a90 	vmov	s15, r3
 81062d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062d4:	ed97 6a02 	vldr	s12, [r7, #8]
 81062d8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8106418 <HAL_RCC_GetSysClockFreq+0x2d4>
 81062dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81062f4:	e065      	b.n	81063c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81062f6:	693b      	ldr	r3, [r7, #16]
 81062f8:	ee07 3a90 	vmov	s15, r3
 81062fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106300:	eddf 6a47 	vldr	s13, [pc, #284]	; 8106420 <HAL_RCC_GetSysClockFreq+0x2dc>
 8106304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106308:	4b3f      	ldr	r3, [pc, #252]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810630c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106310:	ee07 3a90 	vmov	s15, r3
 8106314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106318:	ed97 6a02 	vldr	s12, [r7, #8]
 810631c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8106418 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106328:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810632c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106334:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106338:	e043      	b.n	81063c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810633a:	693b      	ldr	r3, [r7, #16]
 810633c:	ee07 3a90 	vmov	s15, r3
 8106340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106344:	eddf 6a37 	vldr	s13, [pc, #220]	; 8106424 <HAL_RCC_GetSysClockFreq+0x2e0>
 8106348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810634c:	4b2e      	ldr	r3, [pc, #184]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106354:	ee07 3a90 	vmov	s15, r3
 8106358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810635c:	ed97 6a02 	vldr	s12, [r7, #8]
 8106360:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8106418 <HAL_RCC_GetSysClockFreq+0x2d4>
 8106364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810636c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106378:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810637c:	e021      	b.n	81063c2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810637e:	693b      	ldr	r3, [r7, #16]
 8106380:	ee07 3a90 	vmov	s15, r3
 8106384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106388:	eddf 6a25 	vldr	s13, [pc, #148]	; 8106420 <HAL_RCC_GetSysClockFreq+0x2dc>
 810638c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106390:	4b1d      	ldr	r3, [pc, #116]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106398:	ee07 3a90 	vmov	s15, r3
 810639c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063a0:	ed97 6a02 	vldr	s12, [r7, #8]
 81063a4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8106418 <HAL_RCC_GetSysClockFreq+0x2d4>
 81063a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81063c0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81063c2:	4b11      	ldr	r3, [pc, #68]	; (8106408 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81063c6:	0a5b      	lsrs	r3, r3, #9
 81063c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81063cc:	3301      	adds	r3, #1
 81063ce:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81063d0:	683b      	ldr	r3, [r7, #0]
 81063d2:	ee07 3a90 	vmov	s15, r3
 81063d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81063da:	edd7 6a07 	vldr	s13, [r7, #28]
 81063de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81063e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81063e6:	ee17 3a90 	vmov	r3, s15
 81063ea:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81063ec:	e005      	b.n	81063fa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 81063ee:	2300      	movs	r3, #0
 81063f0:	61bb      	str	r3, [r7, #24]
    break;
 81063f2:	e002      	b.n	81063fa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 81063f4:	4b06      	ldr	r3, [pc, #24]	; (8106410 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81063f6:	61bb      	str	r3, [r7, #24]
    break;
 81063f8:	bf00      	nop
  }

  return sysclockfreq;
 81063fa:	69bb      	ldr	r3, [r7, #24]
}
 81063fc:	4618      	mov	r0, r3
 81063fe:	3724      	adds	r7, #36	; 0x24
 8106400:	46bd      	mov	sp, r7
 8106402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106406:	4770      	bx	lr
 8106408:	58024400 	.word	0x58024400
 810640c:	03d09000 	.word	0x03d09000
 8106410:	003d0900 	.word	0x003d0900
 8106414:	017d7840 	.word	0x017d7840
 8106418:	46000000 	.word	0x46000000
 810641c:	4c742400 	.word	0x4c742400
 8106420:	4a742400 	.word	0x4a742400
 8106424:	4bbebc20 	.word	0x4bbebc20

08106428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106428:	b580      	push	{r7, lr}
 810642a:	b082      	sub	sp, #8
 810642c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810642e:	f7ff fe89 	bl	8106144 <HAL_RCC_GetSysClockFreq>
 8106432:	4601      	mov	r1, r0
 8106434:	4b11      	ldr	r3, [pc, #68]	; (810647c <HAL_RCC_GetHCLKFreq+0x54>)
 8106436:	699b      	ldr	r3, [r3, #24]
 8106438:	0a1b      	lsrs	r3, r3, #8
 810643a:	f003 030f 	and.w	r3, r3, #15
 810643e:	4a10      	ldr	r2, [pc, #64]	; (8106480 <HAL_RCC_GetHCLKFreq+0x58>)
 8106440:	5cd3      	ldrb	r3, [r2, r3]
 8106442:	f003 031f 	and.w	r3, r3, #31
 8106446:	fa21 f303 	lsr.w	r3, r1, r3
 810644a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810644c:	4b0b      	ldr	r3, [pc, #44]	; (810647c <HAL_RCC_GetHCLKFreq+0x54>)
 810644e:	699b      	ldr	r3, [r3, #24]
 8106450:	f003 030f 	and.w	r3, r3, #15
 8106454:	4a0a      	ldr	r2, [pc, #40]	; (8106480 <HAL_RCC_GetHCLKFreq+0x58>)
 8106456:	5cd3      	ldrb	r3, [r2, r3]
 8106458:	f003 031f 	and.w	r3, r3, #31
 810645c:	687a      	ldr	r2, [r7, #4]
 810645e:	fa22 f303 	lsr.w	r3, r2, r3
 8106462:	4a08      	ldr	r2, [pc, #32]	; (8106484 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106464:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106466:	4b07      	ldr	r3, [pc, #28]	; (8106484 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106468:	681b      	ldr	r3, [r3, #0]
 810646a:	4a07      	ldr	r2, [pc, #28]	; (8106488 <HAL_RCC_GetHCLKFreq+0x60>)
 810646c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810646e:	4b05      	ldr	r3, [pc, #20]	; (8106484 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106470:	681b      	ldr	r3, [r3, #0]
}
 8106472:	4618      	mov	r0, r3
 8106474:	3708      	adds	r7, #8
 8106476:	46bd      	mov	sp, r7
 8106478:	bd80      	pop	{r7, pc}
 810647a:	bf00      	nop
 810647c:	58024400 	.word	0x58024400
 8106480:	08113fdc 	.word	0x08113fdc
 8106484:	10000004 	.word	0x10000004
 8106488:	10000000 	.word	0x10000000

0810648c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810648c:	b580      	push	{r7, lr}
 810648e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106490:	f7ff ffca 	bl	8106428 <HAL_RCC_GetHCLKFreq>
 8106494:	4601      	mov	r1, r0
 8106496:	4b06      	ldr	r3, [pc, #24]	; (81064b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106498:	69db      	ldr	r3, [r3, #28]
 810649a:	091b      	lsrs	r3, r3, #4
 810649c:	f003 0307 	and.w	r3, r3, #7
 81064a0:	4a04      	ldr	r2, [pc, #16]	; (81064b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 81064a2:	5cd3      	ldrb	r3, [r2, r3]
 81064a4:	f003 031f 	and.w	r3, r3, #31
 81064a8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81064ac:	4618      	mov	r0, r3
 81064ae:	bd80      	pop	{r7, pc}
 81064b0:	58024400 	.word	0x58024400
 81064b4:	08113fdc 	.word	0x08113fdc

081064b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81064b8:	b580      	push	{r7, lr}
 81064ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81064bc:	f7ff ffb4 	bl	8106428 <HAL_RCC_GetHCLKFreq>
 81064c0:	4601      	mov	r1, r0
 81064c2:	4b06      	ldr	r3, [pc, #24]	; (81064dc <HAL_RCC_GetPCLK2Freq+0x24>)
 81064c4:	69db      	ldr	r3, [r3, #28]
 81064c6:	0a1b      	lsrs	r3, r3, #8
 81064c8:	f003 0307 	and.w	r3, r3, #7
 81064cc:	4a04      	ldr	r2, [pc, #16]	; (81064e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81064ce:	5cd3      	ldrb	r3, [r2, r3]
 81064d0:	f003 031f 	and.w	r3, r3, #31
 81064d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81064d8:	4618      	mov	r0, r3
 81064da:	bd80      	pop	{r7, pc}
 81064dc:	58024400 	.word	0x58024400
 81064e0:	08113fdc 	.word	0x08113fdc

081064e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81064e4:	b480      	push	{r7}
 81064e6:	b083      	sub	sp, #12
 81064e8:	af00      	add	r7, sp, #0
 81064ea:	6078      	str	r0, [r7, #4]
 81064ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	223f      	movs	r2, #63	; 0x3f
 81064f2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81064f4:	4b1a      	ldr	r3, [pc, #104]	; (8106560 <HAL_RCC_GetClockConfig+0x7c>)
 81064f6:	691b      	ldr	r3, [r3, #16]
 81064f8:	f003 0207 	and.w	r2, r3, #7
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8106500:	4b17      	ldr	r3, [pc, #92]	; (8106560 <HAL_RCC_GetClockConfig+0x7c>)
 8106502:	699b      	ldr	r3, [r3, #24]
 8106504:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810650c:	4b14      	ldr	r3, [pc, #80]	; (8106560 <HAL_RCC_GetClockConfig+0x7c>)
 810650e:	699b      	ldr	r3, [r3, #24]
 8106510:	f003 020f 	and.w	r2, r3, #15
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8106518:	4b11      	ldr	r3, [pc, #68]	; (8106560 <HAL_RCC_GetClockConfig+0x7c>)
 810651a:	699b      	ldr	r3, [r3, #24]
 810651c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106524:	4b0e      	ldr	r3, [pc, #56]	; (8106560 <HAL_RCC_GetClockConfig+0x7c>)
 8106526:	69db      	ldr	r3, [r3, #28]
 8106528:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810652c:	687b      	ldr	r3, [r7, #4]
 810652e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8106530:	4b0b      	ldr	r3, [pc, #44]	; (8106560 <HAL_RCC_GetClockConfig+0x7c>)
 8106532:	69db      	ldr	r3, [r3, #28]
 8106534:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810653c:	4b08      	ldr	r3, [pc, #32]	; (8106560 <HAL_RCC_GetClockConfig+0x7c>)
 810653e:	6a1b      	ldr	r3, [r3, #32]
 8106540:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8106548:	4b06      	ldr	r3, [pc, #24]	; (8106564 <HAL_RCC_GetClockConfig+0x80>)
 810654a:	681b      	ldr	r3, [r3, #0]
 810654c:	f003 020f 	and.w	r2, r3, #15
 8106550:	683b      	ldr	r3, [r7, #0]
 8106552:	601a      	str	r2, [r3, #0]
}
 8106554:	bf00      	nop
 8106556:	370c      	adds	r7, #12
 8106558:	46bd      	mov	sp, r7
 810655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810655e:	4770      	bx	lr
 8106560:	58024400 	.word	0x58024400
 8106564:	52002000 	.word	0x52002000

08106568 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106568:	b580      	push	{r7, lr}
 810656a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810656c:	f7ff ff5c 	bl	8106428 <HAL_RCC_GetHCLKFreq>
 8106570:	4601      	mov	r1, r0
 8106572:	4b06      	ldr	r3, [pc, #24]	; (810658c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106574:	6a1b      	ldr	r3, [r3, #32]
 8106576:	091b      	lsrs	r3, r3, #4
 8106578:	f003 0307 	and.w	r3, r3, #7
 810657c:	4a04      	ldr	r2, [pc, #16]	; (8106590 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810657e:	5cd3      	ldrb	r3, [r2, r3]
 8106580:	f003 031f 	and.w	r3, r3, #31
 8106584:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106588:	4618      	mov	r0, r3
 810658a:	bd80      	pop	{r7, pc}
 810658c:	58024400 	.word	0x58024400
 8106590:	08113fdc 	.word	0x08113fdc

08106594 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106594:	b480      	push	{r7}
 8106596:	b089      	sub	sp, #36	; 0x24
 8106598:	af00      	add	r7, sp, #0
 810659a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810659c:	4b9d      	ldr	r3, [pc, #628]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81065a0:	f003 0303 	and.w	r3, r3, #3
 81065a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81065a6:	4b9b      	ldr	r3, [pc, #620]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81065aa:	0b1b      	lsrs	r3, r3, #12
 81065ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81065b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81065b2:	4b98      	ldr	r3, [pc, #608]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81065b6:	091b      	lsrs	r3, r3, #4
 81065b8:	f003 0301 	and.w	r3, r3, #1
 81065bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81065be:	4b95      	ldr	r3, [pc, #596]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81065c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81065c2:	08db      	lsrs	r3, r3, #3
 81065c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81065c8:	693a      	ldr	r2, [r7, #16]
 81065ca:	fb02 f303 	mul.w	r3, r2, r3
 81065ce:	ee07 3a90 	vmov	s15, r3
 81065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81065da:	697b      	ldr	r3, [r7, #20]
 81065dc:	2b00      	cmp	r3, #0
 81065de:	f000 810a 	beq.w	81067f6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 81065e2:	69bb      	ldr	r3, [r7, #24]
 81065e4:	2b01      	cmp	r3, #1
 81065e6:	d05a      	beq.n	810669e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 81065e8:	2b01      	cmp	r3, #1
 81065ea:	d302      	bcc.n	81065f2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 81065ec:	2b02      	cmp	r3, #2
 81065ee:	d078      	beq.n	81066e2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 81065f0:	e099      	b.n	8106726 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81065f2:	4b88      	ldr	r3, [pc, #544]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81065f4:	681b      	ldr	r3, [r3, #0]
 81065f6:	f003 0320 	and.w	r3, r3, #32
 81065fa:	2b00      	cmp	r3, #0
 81065fc:	d02d      	beq.n	810665a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81065fe:	4b85      	ldr	r3, [pc, #532]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106600:	681b      	ldr	r3, [r3, #0]
 8106602:	08db      	lsrs	r3, r3, #3
 8106604:	f003 0303 	and.w	r3, r3, #3
 8106608:	4a83      	ldr	r2, [pc, #524]	; (8106818 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 810660a:	fa22 f303 	lsr.w	r3, r2, r3
 810660e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106610:	68bb      	ldr	r3, [r7, #8]
 8106612:	ee07 3a90 	vmov	s15, r3
 8106616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810661a:	697b      	ldr	r3, [r7, #20]
 810661c:	ee07 3a90 	vmov	s15, r3
 8106620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106628:	4b7a      	ldr	r3, [pc, #488]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810662c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106630:	ee07 3a90 	vmov	s15, r3
 8106634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106638:	ed97 6a03 	vldr	s12, [r7, #12]
 810663c:	eddf 5a77 	vldr	s11, [pc, #476]	; 810681c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810664c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106654:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106658:	e087      	b.n	810676a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810665a:	697b      	ldr	r3, [r7, #20]
 810665c:	ee07 3a90 	vmov	s15, r3
 8106660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106664:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106820 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8106668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810666c:	4b69      	ldr	r3, [pc, #420]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106674:	ee07 3a90 	vmov	s15, r3
 8106678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810667c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106680:	eddf 5a66 	vldr	s11, [pc, #408]	; 810681c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810668c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106698:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810669c:	e065      	b.n	810676a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810669e:	697b      	ldr	r3, [r7, #20]
 81066a0:	ee07 3a90 	vmov	s15, r3
 81066a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81066ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81066b0:	4b58      	ldr	r3, [pc, #352]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81066b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81066b8:	ee07 3a90 	vmov	s15, r3
 81066bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066c0:	ed97 6a03 	vldr	s12, [r7, #12]
 81066c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 810681c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81066c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81066cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81066d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81066d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81066dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81066e0:	e043      	b.n	810676a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81066e2:	697b      	ldr	r3, [r7, #20]
 81066e4:	ee07 3a90 	vmov	s15, r3
 81066e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106828 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81066f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81066f4:	4b47      	ldr	r3, [pc, #284]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81066f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81066fc:	ee07 3a90 	vmov	s15, r3
 8106700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106704:	ed97 6a03 	vldr	s12, [r7, #12]
 8106708:	eddf 5a44 	vldr	s11, [pc, #272]	; 810681c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 810670c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810671c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106724:	e021      	b.n	810676a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106726:	697b      	ldr	r3, [r7, #20]
 8106728:	ee07 3a90 	vmov	s15, r3
 810672c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106730:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106738:	4b36      	ldr	r3, [pc, #216]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810673c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106740:	ee07 3a90 	vmov	s15, r3
 8106744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106748:	ed97 6a03 	vldr	s12, [r7, #12]
 810674c:	eddf 5a33 	vldr	s11, [pc, #204]	; 810681c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810675c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106764:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106768:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810676a:	4b2a      	ldr	r3, [pc, #168]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810676e:	0a5b      	lsrs	r3, r3, #9
 8106770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106774:	ee07 3a90 	vmov	s15, r3
 8106778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810677c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106784:	edd7 6a07 	vldr	s13, [r7, #28]
 8106788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810678c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106790:	ee17 2a90 	vmov	r2, s15
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106798:	4b1e      	ldr	r3, [pc, #120]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810679c:	0c1b      	lsrs	r3, r3, #16
 810679e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81067a2:	ee07 3a90 	vmov	s15, r3
 81067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81067ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 81067b2:	edd7 6a07 	vldr	s13, [r7, #28]
 81067b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81067ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81067be:	ee17 2a90 	vmov	r2, s15
 81067c2:	687b      	ldr	r3, [r7, #4]
 81067c4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81067c6:	4b13      	ldr	r3, [pc, #76]	; (8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81067ca:	0e1b      	lsrs	r3, r3, #24
 81067cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81067d0:	ee07 3a90 	vmov	s15, r3
 81067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81067dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81067e0:	edd7 6a07 	vldr	s13, [r7, #28]
 81067e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81067e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81067ec:	ee17 2a90 	vmov	r2, s15
 81067f0:	687b      	ldr	r3, [r7, #4]
 81067f2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81067f4:	e008      	b.n	8106808 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	2200      	movs	r2, #0
 81067fa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	2200      	movs	r2, #0
 8106800:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	2200      	movs	r2, #0
 8106806:	609a      	str	r2, [r3, #8]
}
 8106808:	bf00      	nop
 810680a:	3724      	adds	r7, #36	; 0x24
 810680c:	46bd      	mov	sp, r7
 810680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106812:	4770      	bx	lr
 8106814:	58024400 	.word	0x58024400
 8106818:	03d09000 	.word	0x03d09000
 810681c:	46000000 	.word	0x46000000
 8106820:	4c742400 	.word	0x4c742400
 8106824:	4a742400 	.word	0x4a742400
 8106828:	4bbebc20 	.word	0x4bbebc20

0810682c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810682c:	b480      	push	{r7}
 810682e:	b089      	sub	sp, #36	; 0x24
 8106830:	af00      	add	r7, sp, #0
 8106832:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106834:	4b9d      	ldr	r3, [pc, #628]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106838:	f003 0303 	and.w	r3, r3, #3
 810683c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810683e:	4b9b      	ldr	r3, [pc, #620]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106842:	0d1b      	lsrs	r3, r3, #20
 8106844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106848:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810684a:	4b98      	ldr	r3, [pc, #608]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810684e:	0a1b      	lsrs	r3, r3, #8
 8106850:	f003 0301 	and.w	r3, r3, #1
 8106854:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8106856:	4b95      	ldr	r3, [pc, #596]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810685a:	08db      	lsrs	r3, r3, #3
 810685c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106860:	693a      	ldr	r2, [r7, #16]
 8106862:	fb02 f303 	mul.w	r3, r2, r3
 8106866:	ee07 3a90 	vmov	s15, r3
 810686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810686e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106872:	697b      	ldr	r3, [r7, #20]
 8106874:	2b00      	cmp	r3, #0
 8106876:	f000 810a 	beq.w	8106a8e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 810687a:	69bb      	ldr	r3, [r7, #24]
 810687c:	2b01      	cmp	r3, #1
 810687e:	d05a      	beq.n	8106936 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8106880:	2b01      	cmp	r3, #1
 8106882:	d302      	bcc.n	810688a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8106884:	2b02      	cmp	r3, #2
 8106886:	d078      	beq.n	810697a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8106888:	e099      	b.n	81069be <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810688a:	4b88      	ldr	r3, [pc, #544]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810688c:	681b      	ldr	r3, [r3, #0]
 810688e:	f003 0320 	and.w	r3, r3, #32
 8106892:	2b00      	cmp	r3, #0
 8106894:	d02d      	beq.n	81068f2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106896:	4b85      	ldr	r3, [pc, #532]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	08db      	lsrs	r3, r3, #3
 810689c:	f003 0303 	and.w	r3, r3, #3
 81068a0:	4a83      	ldr	r2, [pc, #524]	; (8106ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 81068a2:	fa22 f303 	lsr.w	r3, r2, r3
 81068a6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81068a8:	68bb      	ldr	r3, [r7, #8]
 81068aa:	ee07 3a90 	vmov	s15, r3
 81068ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068b2:	697b      	ldr	r3, [r7, #20]
 81068b4:	ee07 3a90 	vmov	s15, r3
 81068b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068c0:	4b7a      	ldr	r3, [pc, #488]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068c8:	ee07 3a90 	vmov	s15, r3
 81068cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068d0:	ed97 6a03 	vldr	s12, [r7, #12]
 81068d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81068d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81068f0:	e087      	b.n	8106a02 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81068f2:	697b      	ldr	r3, [r7, #20]
 81068f4:	ee07 3a90 	vmov	s15, r3
 81068f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8106900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106904:	4b69      	ldr	r3, [pc, #420]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810690c:	ee07 3a90 	vmov	s15, r3
 8106910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106914:	ed97 6a03 	vldr	s12, [r7, #12]
 8106918:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 810691c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810692c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106930:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106934:	e065      	b.n	8106a02 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106936:	697b      	ldr	r3, [r7, #20]
 8106938:	ee07 3a90 	vmov	s15, r3
 810693c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106940:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8106944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106948:	4b58      	ldr	r3, [pc, #352]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810694c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106950:	ee07 3a90 	vmov	s15, r3
 8106954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106958:	ed97 6a03 	vldr	s12, [r7, #12]
 810695c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810696c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106974:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106978:	e043      	b.n	8106a02 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810697a:	697b      	ldr	r3, [r7, #20]
 810697c:	ee07 3a90 	vmov	s15, r3
 8106980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106984:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8106988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810698c:	4b47      	ldr	r3, [pc, #284]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106994:	ee07 3a90 	vmov	s15, r3
 8106998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810699c:	ed97 6a03 	vldr	s12, [r7, #12]
 81069a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81069a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81069a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81069ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81069b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81069b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81069b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81069bc:	e021      	b.n	8106a02 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81069be:	697b      	ldr	r3, [r7, #20]
 81069c0:	ee07 3a90 	vmov	s15, r3
 81069c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069c8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106abc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81069cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81069d0:	4b36      	ldr	r3, [pc, #216]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81069d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81069d8:	ee07 3a90 	vmov	s15, r3
 81069dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069e0:	ed97 6a03 	vldr	s12, [r7, #12]
 81069e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81069e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81069ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81069f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81069f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81069f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81069fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106a00:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106a02:	4b2a      	ldr	r3, [pc, #168]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106a06:	0a5b      	lsrs	r3, r3, #9
 8106a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106a0c:	ee07 3a90 	vmov	s15, r3
 8106a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106a18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a28:	ee17 2a90 	vmov	r2, s15
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106a30:	4b1e      	ldr	r3, [pc, #120]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106a34:	0c1b      	lsrs	r3, r3, #16
 8106a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106a3a:	ee07 3a90 	vmov	s15, r3
 8106a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a56:	ee17 2a90 	vmov	r2, s15
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106a5e:	4b13      	ldr	r3, [pc, #76]	; (8106aac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106a62:	0e1b      	lsrs	r3, r3, #24
 8106a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106a68:	ee07 3a90 	vmov	s15, r3
 8106a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8106a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106a84:	ee17 2a90 	vmov	r2, s15
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106a8c:	e008      	b.n	8106aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	2200      	movs	r2, #0
 8106a92:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	2200      	movs	r2, #0
 8106a98:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	2200      	movs	r2, #0
 8106a9e:	609a      	str	r2, [r3, #8]
}
 8106aa0:	bf00      	nop
 8106aa2:	3724      	adds	r7, #36	; 0x24
 8106aa4:	46bd      	mov	sp, r7
 8106aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106aaa:	4770      	bx	lr
 8106aac:	58024400 	.word	0x58024400
 8106ab0:	03d09000 	.word	0x03d09000
 8106ab4:	46000000 	.word	0x46000000
 8106ab8:	4c742400 	.word	0x4c742400
 8106abc:	4a742400 	.word	0x4a742400
 8106ac0:	4bbebc20 	.word	0x4bbebc20

08106ac4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106ac4:	b580      	push	{r7, lr}
 8106ac6:	b084      	sub	sp, #16
 8106ac8:	af00      	add	r7, sp, #0
 8106aca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8106acc:	2300      	movs	r3, #0
 8106ace:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	2b00      	cmp	r3, #0
 8106ad4:	d101      	bne.n	8106ada <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8106ad6:	2301      	movs	r3, #1
 8106ad8:	e0e2      	b.n	8106ca0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	2200      	movs	r2, #0
 8106ade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106ae0:	687b      	ldr	r3, [r7, #4]
 8106ae2:	681b      	ldr	r3, [r3, #0]
 8106ae4:	4a70      	ldr	r2, [pc, #448]	; (8106ca8 <HAL_SPI_Init+0x1e4>)
 8106ae6:	4293      	cmp	r3, r2
 8106ae8:	d00f      	beq.n	8106b0a <HAL_SPI_Init+0x46>
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	681b      	ldr	r3, [r3, #0]
 8106aee:	4a6f      	ldr	r2, [pc, #444]	; (8106cac <HAL_SPI_Init+0x1e8>)
 8106af0:	4293      	cmp	r3, r2
 8106af2:	d00a      	beq.n	8106b0a <HAL_SPI_Init+0x46>
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	681b      	ldr	r3, [r3, #0]
 8106af8:	4a6d      	ldr	r2, [pc, #436]	; (8106cb0 <HAL_SPI_Init+0x1ec>)
 8106afa:	4293      	cmp	r3, r2
 8106afc:	d005      	beq.n	8106b0a <HAL_SPI_Init+0x46>
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	68db      	ldr	r3, [r3, #12]
 8106b02:	2b0f      	cmp	r3, #15
 8106b04:	d901      	bls.n	8106b0a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8106b06:	2301      	movs	r3, #1
 8106b08:	e0ca      	b.n	8106ca0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8106b0a:	6878      	ldr	r0, [r7, #4]
 8106b0c:	f000 fb96 	bl	810723c <SPI_GetPacketSize>
 8106b10:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	681b      	ldr	r3, [r3, #0]
 8106b16:	4a64      	ldr	r2, [pc, #400]	; (8106ca8 <HAL_SPI_Init+0x1e4>)
 8106b18:	4293      	cmp	r3, r2
 8106b1a:	d00c      	beq.n	8106b36 <HAL_SPI_Init+0x72>
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	681b      	ldr	r3, [r3, #0]
 8106b20:	4a62      	ldr	r2, [pc, #392]	; (8106cac <HAL_SPI_Init+0x1e8>)
 8106b22:	4293      	cmp	r3, r2
 8106b24:	d007      	beq.n	8106b36 <HAL_SPI_Init+0x72>
 8106b26:	687b      	ldr	r3, [r7, #4]
 8106b28:	681b      	ldr	r3, [r3, #0]
 8106b2a:	4a61      	ldr	r2, [pc, #388]	; (8106cb0 <HAL_SPI_Init+0x1ec>)
 8106b2c:	4293      	cmp	r3, r2
 8106b2e:	d002      	beq.n	8106b36 <HAL_SPI_Init+0x72>
 8106b30:	68bb      	ldr	r3, [r7, #8]
 8106b32:	2b08      	cmp	r3, #8
 8106b34:	d811      	bhi.n	8106b5a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106b3a:	4a5b      	ldr	r2, [pc, #364]	; (8106ca8 <HAL_SPI_Init+0x1e4>)
 8106b3c:	4293      	cmp	r3, r2
 8106b3e:	d009      	beq.n	8106b54 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	681b      	ldr	r3, [r3, #0]
 8106b44:	4a59      	ldr	r2, [pc, #356]	; (8106cac <HAL_SPI_Init+0x1e8>)
 8106b46:	4293      	cmp	r3, r2
 8106b48:	d004      	beq.n	8106b54 <HAL_SPI_Init+0x90>
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	681b      	ldr	r3, [r3, #0]
 8106b4e:	4a58      	ldr	r2, [pc, #352]	; (8106cb0 <HAL_SPI_Init+0x1ec>)
 8106b50:	4293      	cmp	r3, r2
 8106b52:	d104      	bne.n	8106b5e <HAL_SPI_Init+0x9a>
 8106b54:	68bb      	ldr	r3, [r7, #8]
 8106b56:	2b10      	cmp	r3, #16
 8106b58:	d901      	bls.n	8106b5e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8106b5a:	2301      	movs	r3, #1
 8106b5c:	e0a0      	b.n	8106ca0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106b64:	b2db      	uxtb	r3, r3
 8106b66:	2b00      	cmp	r3, #0
 8106b68:	d106      	bne.n	8106b78 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	2200      	movs	r2, #0
 8106b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106b72:	6878      	ldr	r0, [r7, #4]
 8106b74:	f7fa fef6 	bl	8101964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	2202      	movs	r2, #2
 8106b7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	681b      	ldr	r3, [r3, #0]
 8106b84:	681a      	ldr	r2, [r3, #0]
 8106b86:	687b      	ldr	r3, [r7, #4]
 8106b88:	681b      	ldr	r3, [r3, #0]
 8106b8a:	f022 0201 	bic.w	r2, r2, #1
 8106b8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	699b      	ldr	r3, [r3, #24]
 8106b94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106b98:	d110      	bne.n	8106bbc <HAL_SPI_Init+0xf8>
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	685b      	ldr	r3, [r3, #4]
 8106b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106ba2:	d10b      	bne.n	8106bbc <HAL_SPI_Init+0xf8>
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ba8:	2b00      	cmp	r3, #0
 8106baa:	d107      	bne.n	8106bbc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8106bac:	687b      	ldr	r3, [r7, #4]
 8106bae:	681b      	ldr	r3, [r3, #0]
 8106bb0:	681a      	ldr	r2, [r3, #0]
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	681b      	ldr	r3, [r3, #0]
 8106bb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8106bba:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	69da      	ldr	r2, [r3, #28]
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106bc4:	431a      	orrs	r2, r3
 8106bc6:	68fb      	ldr	r3, [r7, #12]
 8106bc8:	431a      	orrs	r2, r3
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106bce:	ea42 0103 	orr.w	r1, r2, r3
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	68da      	ldr	r2, [r3, #12]
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	681b      	ldr	r3, [r3, #0]
 8106bda:	430a      	orrs	r2, r1
 8106bdc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106be6:	431a      	orrs	r2, r3
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106bec:	431a      	orrs	r2, r3
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	699b      	ldr	r3, [r3, #24]
 8106bf2:	431a      	orrs	r2, r3
 8106bf4:	687b      	ldr	r3, [r7, #4]
 8106bf6:	691b      	ldr	r3, [r3, #16]
 8106bf8:	431a      	orrs	r2, r3
 8106bfa:	687b      	ldr	r3, [r7, #4]
 8106bfc:	695b      	ldr	r3, [r3, #20]
 8106bfe:	431a      	orrs	r2, r3
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	6a1b      	ldr	r3, [r3, #32]
 8106c04:	431a      	orrs	r2, r3
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	685b      	ldr	r3, [r3, #4]
 8106c0a:	431a      	orrs	r2, r3
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106c10:	431a      	orrs	r2, r3
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	689b      	ldr	r3, [r3, #8]
 8106c16:	431a      	orrs	r2, r3
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106c1c:	ea42 0103 	orr.w	r1, r2, r3
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	681b      	ldr	r3, [r3, #0]
 8106c28:	430a      	orrs	r2, r1
 8106c2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	685b      	ldr	r3, [r3, #4]
 8106c30:	2b00      	cmp	r3, #0
 8106c32:	d113      	bne.n	8106c5c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	681b      	ldr	r3, [r3, #0]
 8106c38:	689b      	ldr	r3, [r3, #8]
 8106c3a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	681b      	ldr	r3, [r3, #0]
 8106c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106c46:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	689b      	ldr	r3, [r3, #8]
 8106c4e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8106c5a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	681b      	ldr	r3, [r3, #0]
 8106c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	681b      	ldr	r3, [r3, #0]
 8106c66:	f022 0201 	bic.w	r2, r2, #1
 8106c6a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	685b      	ldr	r3, [r3, #4]
 8106c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106c74:	2b00      	cmp	r3, #0
 8106c76:	d00a      	beq.n	8106c8e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106c78:	687b      	ldr	r3, [r7, #4]
 8106c7a:	681b      	ldr	r3, [r3, #0]
 8106c7c:	68db      	ldr	r3, [r3, #12]
 8106c7e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	681b      	ldr	r3, [r3, #0]
 8106c8a:	430a      	orrs	r2, r1
 8106c8c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	2200      	movs	r2, #0
 8106c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	2201      	movs	r2, #1
 8106c9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8106c9e:	2300      	movs	r3, #0
}
 8106ca0:	4618      	mov	r0, r3
 8106ca2:	3710      	adds	r7, #16
 8106ca4:	46bd      	mov	sp, r7
 8106ca6:	bd80      	pop	{r7, pc}
 8106ca8:	40013000 	.word	0x40013000
 8106cac:	40003800 	.word	0x40003800
 8106cb0:	40003c00 	.word	0x40003c00

08106cb4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8106cb4:	b580      	push	{r7, lr}
 8106cb6:	b08a      	sub	sp, #40	; 0x28
 8106cb8:	af00      	add	r7, sp, #0
 8106cba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	691b      	ldr	r3, [r3, #16]
 8106cc2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	681b      	ldr	r3, [r3, #0]
 8106cc8:	695b      	ldr	r3, [r3, #20]
 8106cca:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8106ccc:	6a3a      	ldr	r2, [r7, #32]
 8106cce:	69fb      	ldr	r3, [r7, #28]
 8106cd0:	4013      	ands	r3, r2
 8106cd2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	681b      	ldr	r3, [r3, #0]
 8106cd8:	689b      	ldr	r3, [r3, #8]
 8106cda:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8106cdc:	2300      	movs	r3, #0
 8106cde:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106ce6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	3330      	adds	r3, #48	; 0x30
 8106cee:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8106cf0:	69bb      	ldr	r3, [r7, #24]
 8106cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106cf6:	2b00      	cmp	r3, #0
 8106cf8:	d113      	bne.n	8106d22 <HAL_SPI_IRQHandler+0x6e>
 8106cfa:	69bb      	ldr	r3, [r7, #24]
 8106cfc:	f003 0320 	and.w	r3, r3, #32
 8106d00:	2b00      	cmp	r3, #0
 8106d02:	d10e      	bne.n	8106d22 <HAL_SPI_IRQHandler+0x6e>
 8106d04:	69bb      	ldr	r3, [r7, #24]
 8106d06:	f003 0304 	and.w	r3, r3, #4
 8106d0a:	2b00      	cmp	r3, #0
 8106d0c:	d009      	beq.n	8106d22 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106d12:	6878      	ldr	r0, [r7, #4]
 8106d14:	4798      	blx	r3
    hspi->RxISR(hspi);
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106d1a:	6878      	ldr	r0, [r7, #4]
 8106d1c:	4798      	blx	r3
    handled = 1UL;
 8106d1e:	2301      	movs	r3, #1
 8106d20:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8106d22:	69bb      	ldr	r3, [r7, #24]
 8106d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106d28:	2b00      	cmp	r3, #0
 8106d2a:	d10f      	bne.n	8106d4c <HAL_SPI_IRQHandler+0x98>
 8106d2c:	69bb      	ldr	r3, [r7, #24]
 8106d2e:	f003 0301 	and.w	r3, r3, #1
 8106d32:	2b00      	cmp	r3, #0
 8106d34:	d00a      	beq.n	8106d4c <HAL_SPI_IRQHandler+0x98>
 8106d36:	69bb      	ldr	r3, [r7, #24]
 8106d38:	f003 0304 	and.w	r3, r3, #4
 8106d3c:	2b00      	cmp	r3, #0
 8106d3e:	d105      	bne.n	8106d4c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106d44:	6878      	ldr	r0, [r7, #4]
 8106d46:	4798      	blx	r3
    handled = 1UL;
 8106d48:	2301      	movs	r3, #1
 8106d4a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8106d4c:	69bb      	ldr	r3, [r7, #24]
 8106d4e:	f003 0320 	and.w	r3, r3, #32
 8106d52:	2b00      	cmp	r3, #0
 8106d54:	d10f      	bne.n	8106d76 <HAL_SPI_IRQHandler+0xc2>
 8106d56:	69bb      	ldr	r3, [r7, #24]
 8106d58:	f003 0302 	and.w	r3, r3, #2
 8106d5c:	2b00      	cmp	r3, #0
 8106d5e:	d00a      	beq.n	8106d76 <HAL_SPI_IRQHandler+0xc2>
 8106d60:	69bb      	ldr	r3, [r7, #24]
 8106d62:	f003 0304 	and.w	r3, r3, #4
 8106d66:	2b00      	cmp	r3, #0
 8106d68:	d105      	bne.n	8106d76 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8106d6a:	687b      	ldr	r3, [r7, #4]
 8106d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106d6e:	6878      	ldr	r0, [r7, #4]
 8106d70:	4798      	blx	r3
    handled = 1UL;
 8106d72:	2301      	movs	r3, #1
 8106d74:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8106d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106d78:	2b00      	cmp	r3, #0
 8106d7a:	f040 8172 	bne.w	8107062 <HAL_SPI_IRQHandler+0x3ae>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8106d7e:	69bb      	ldr	r3, [r7, #24]
 8106d80:	f003 0308 	and.w	r3, r3, #8
 8106d84:	2b00      	cmp	r3, #0
 8106d86:	f000 80a0 	beq.w	8106eca <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	699a      	ldr	r2, [r3, #24]
 8106d90:	687b      	ldr	r3, [r7, #4]
 8106d92:	681b      	ldr	r3, [r3, #0]
 8106d94:	f042 0208 	orr.w	r2, r2, #8
 8106d98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	681b      	ldr	r3, [r3, #0]
 8106d9e:	699a      	ldr	r2, [r3, #24]
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	681b      	ldr	r3, [r3, #0]
 8106da4:	f042 0210 	orr.w	r2, r2, #16
 8106da8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8106daa:	687b      	ldr	r3, [r7, #4]
 8106dac:	681b      	ldr	r3, [r3, #0]
 8106dae:	699a      	ldr	r2, [r3, #24]
 8106db0:	687b      	ldr	r3, [r7, #4]
 8106db2:	681b      	ldr	r3, [r3, #0]
 8106db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106db8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8106dba:	687b      	ldr	r3, [r7, #4]
 8106dbc:	681b      	ldr	r3, [r3, #0]
 8106dbe:	691a      	ldr	r2, [r3, #16]
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	681b      	ldr	r3, [r3, #0]
 8106dc4:	f022 0208 	bic.w	r2, r2, #8
 8106dc8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8106dca:	697b      	ldr	r3, [r7, #20]
 8106dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106dd0:	2b00      	cmp	r3, #0
 8106dd2:	d00f      	beq.n	8106df4 <HAL_SPI_IRQHandler+0x140>
 8106dd4:	7cfb      	ldrb	r3, [r7, #19]
 8106dd6:	2b04      	cmp	r3, #4
 8106dd8:	d004      	beq.n	8106de4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8106dda:	687b      	ldr	r3, [r7, #4]
 8106ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106dde:	69db      	ldr	r3, [r3, #28]
 8106de0:	2b00      	cmp	r3, #0
 8106de2:	d007      	beq.n	8106df4 <HAL_SPI_IRQHandler+0x140>
 8106de4:	7cfb      	ldrb	r3, [r7, #19]
 8106de6:	2b03      	cmp	r3, #3
 8106de8:	d059      	beq.n	8106e9e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8106dea:	687b      	ldr	r3, [r7, #4]
 8106dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106dee:	69db      	ldr	r3, [r3, #28]
 8106df0:	2b00      	cmp	r3, #0
 8106df2:	d154      	bne.n	8106e9e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	681b      	ldr	r3, [r3, #0]
 8106df8:	689b      	ldr	r3, [r3, #8]
 8106dfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106dfe:	2b00      	cmp	r3, #0
 8106e00:	d13d      	bne.n	8106e7e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8106e02:	e036      	b.n	8106e72 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106e04:	687b      	ldr	r3, [r7, #4]
 8106e06:	68db      	ldr	r3, [r3, #12]
 8106e08:	2b0f      	cmp	r3, #15
 8106e0a:	d90b      	bls.n	8106e24 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	681a      	ldr	r2, [r3, #0]
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106e14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8106e16:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106e1c:	1d1a      	adds	r2, r3, #4
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	665a      	str	r2, [r3, #100]	; 0x64
 8106e22:	e01d      	b.n	8106e60 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106e24:	687b      	ldr	r3, [r7, #4]
 8106e26:	68db      	ldr	r3, [r3, #12]
 8106e28:	2b07      	cmp	r3, #7
 8106e2a:	d90b      	bls.n	8106e44 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106e30:	68fa      	ldr	r2, [r7, #12]
 8106e32:	8812      	ldrh	r2, [r2, #0]
 8106e34:	b292      	uxth	r2, r2
 8106e36:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8106e38:	687b      	ldr	r3, [r7, #4]
 8106e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106e3c:	1c9a      	adds	r2, r3, #2
 8106e3e:	687b      	ldr	r3, [r7, #4]
 8106e40:	665a      	str	r2, [r3, #100]	; 0x64
 8106e42:	e00d      	b.n	8106e60 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8106e44:	687b      	ldr	r3, [r7, #4]
 8106e46:	681b      	ldr	r3, [r3, #0]
 8106e48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106e50:	7812      	ldrb	r2, [r2, #0]
 8106e52:	b2d2      	uxtb	r2, r2
 8106e54:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8106e56:	687b      	ldr	r3, [r7, #4]
 8106e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106e5a:	1c5a      	adds	r2, r3, #1
 8106e5c:	687b      	ldr	r3, [r7, #4]
 8106e5e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8106e60:	687b      	ldr	r3, [r7, #4]
 8106e62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106e66:	b29b      	uxth	r3, r3
 8106e68:	3b01      	subs	r3, #1
 8106e6a:	b29a      	uxth	r2, r3
 8106e6c:	687b      	ldr	r3, [r7, #4]
 8106e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106e78:	b29b      	uxth	r3, r3
 8106e7a:	2b00      	cmp	r3, #0
 8106e7c:	d1c2      	bne.n	8106e04 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8106e7e:	6878      	ldr	r0, [r7, #4]
 8106e80:	f000 f93c 	bl	81070fc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8106e84:	687b      	ldr	r3, [r7, #4]
 8106e86:	2201      	movs	r2, #1
 8106e88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106e8c:	687b      	ldr	r3, [r7, #4]
 8106e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106e92:	2b00      	cmp	r3, #0
 8106e94:	d003      	beq.n	8106e9e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8106e96:	6878      	ldr	r0, [r7, #4]
 8106e98:	f000 f90c 	bl	81070b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8106e9c:	e0e6      	b.n	810706c <HAL_SPI_IRQHandler+0x3b8>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8106e9e:	7cfb      	ldrb	r3, [r7, #19]
 8106ea0:	2b05      	cmp	r3, #5
 8106ea2:	d103      	bne.n	8106eac <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8106ea4:	6878      	ldr	r0, [r7, #4]
 8106ea6:	f000 f8fb 	bl	81070a0 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8106eaa:	e0dc      	b.n	8107066 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8106eac:	7cfb      	ldrb	r3, [r7, #19]
 8106eae:	2b04      	cmp	r3, #4
 8106eb0:	d103      	bne.n	8106eba <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8106eb2:	6878      	ldr	r0, [r7, #4]
 8106eb4:	f000 f8ea 	bl	810708c <HAL_SPI_RxCpltCallback>
    return;
 8106eb8:	e0d5      	b.n	8107066 <HAL_SPI_IRQHandler+0x3b2>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8106eba:	7cfb      	ldrb	r3, [r7, #19]
 8106ebc:	2b03      	cmp	r3, #3
 8106ebe:	f040 80d2 	bne.w	8107066 <HAL_SPI_IRQHandler+0x3b2>
      HAL_SPI_TxCpltCallback(hspi);
 8106ec2:	6878      	ldr	r0, [r7, #4]
 8106ec4:	f000 f8d8 	bl	8107078 <HAL_SPI_TxCpltCallback>
    return;
 8106ec8:	e0cd      	b.n	8107066 <HAL_SPI_IRQHandler+0x3b2>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8106eca:	69fb      	ldr	r3, [r7, #28]
 8106ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106ed0:	2b00      	cmp	r3, #0
 8106ed2:	d00d      	beq.n	8106ef0 <HAL_SPI_IRQHandler+0x23c>
 8106ed4:	6a3b      	ldr	r3, [r7, #32]
 8106ed6:	f003 0308 	and.w	r3, r3, #8
 8106eda:	2b00      	cmp	r3, #0
 8106edc:	d008      	beq.n	8106ef0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	681b      	ldr	r3, [r3, #0]
 8106ee2:	699a      	ldr	r2, [r3, #24]
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106eec:	619a      	str	r2, [r3, #24]

    return;
 8106eee:	e0bd      	b.n	810706c <HAL_SPI_IRQHandler+0x3b8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8106ef0:	69bb      	ldr	r3, [r7, #24]
 8106ef2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8106ef6:	2b00      	cmp	r3, #0
 8106ef8:	f000 80b8 	beq.w	810706c <HAL_SPI_IRQHandler+0x3b8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8106efc:	69bb      	ldr	r3, [r7, #24]
 8106efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106f02:	2b00      	cmp	r3, #0
 8106f04:	d00f      	beq.n	8106f26 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f0c:	f043 0204 	orr.w	r2, r3, #4
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8106f16:	687b      	ldr	r3, [r7, #4]
 8106f18:	681b      	ldr	r3, [r3, #0]
 8106f1a:	699a      	ldr	r2, [r3, #24]
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	681b      	ldr	r3, [r3, #0]
 8106f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106f24:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8106f26:	69bb      	ldr	r3, [r7, #24]
 8106f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106f2c:	2b00      	cmp	r3, #0
 8106f2e:	d00f      	beq.n	8106f50 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f36:	f043 0201 	orr.w	r2, r3, #1
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8106f40:	687b      	ldr	r3, [r7, #4]
 8106f42:	681b      	ldr	r3, [r3, #0]
 8106f44:	699a      	ldr	r2, [r3, #24]
 8106f46:	687b      	ldr	r3, [r7, #4]
 8106f48:	681b      	ldr	r3, [r3, #0]
 8106f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106f4e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8106f50:	69bb      	ldr	r3, [r7, #24]
 8106f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106f56:	2b00      	cmp	r3, #0
 8106f58:	d00f      	beq.n	8106f7a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f60:	f043 0208 	orr.w	r2, r3, #8
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8106f6a:	687b      	ldr	r3, [r7, #4]
 8106f6c:	681b      	ldr	r3, [r3, #0]
 8106f6e:	699a      	ldr	r2, [r3, #24]
 8106f70:	687b      	ldr	r3, [r7, #4]
 8106f72:	681b      	ldr	r3, [r3, #0]
 8106f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106f78:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8106f7a:	69bb      	ldr	r3, [r7, #24]
 8106f7c:	f003 0320 	and.w	r3, r3, #32
 8106f80:	2b00      	cmp	r3, #0
 8106f82:	d00f      	beq.n	8106fa4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	681b      	ldr	r3, [r3, #0]
 8106f98:	699a      	ldr	r2, [r3, #24]
 8106f9a:	687b      	ldr	r3, [r7, #4]
 8106f9c:	681b      	ldr	r3, [r3, #0]
 8106f9e:	f042 0220 	orr.w	r2, r2, #32
 8106fa2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106faa:	2b00      	cmp	r3, #0
 8106fac:	d05d      	beq.n	810706a <HAL_SPI_IRQHandler+0x3b6>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8106fae:	687b      	ldr	r3, [r7, #4]
 8106fb0:	681b      	ldr	r3, [r3, #0]
 8106fb2:	681a      	ldr	r2, [r3, #0]
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	681b      	ldr	r3, [r3, #0]
 8106fb8:	f022 0201 	bic.w	r2, r2, #1
 8106fbc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	681b      	ldr	r3, [r3, #0]
 8106fc2:	691b      	ldr	r3, [r3, #16]
 8106fc4:	687a      	ldr	r2, [r7, #4]
 8106fc6:	6812      	ldr	r2, [r2, #0]
 8106fc8:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8106fcc:	f023 0303 	bic.w	r3, r3, #3
 8106fd0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8106fd2:	697b      	ldr	r3, [r7, #20]
 8106fd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106fd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8106fdc:	d138      	bne.n	8107050 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8106fde:	687b      	ldr	r3, [r7, #4]
 8106fe0:	681b      	ldr	r3, [r3, #0]
 8106fe2:	689a      	ldr	r2, [r3, #8]
 8106fe4:	687b      	ldr	r3, [r7, #4]
 8106fe6:	681b      	ldr	r3, [r3, #0]
 8106fe8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106fec:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106ff2:	2b00      	cmp	r3, #0
 8106ff4:	d013      	beq.n	810701e <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106ffa:	4a1e      	ldr	r2, [pc, #120]	; (8107074 <HAL_SPI_IRQHandler+0x3c0>)
 8106ffc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107002:	4618      	mov	r0, r3
 8107004:	f7fc f826 	bl	8103054 <HAL_DMA_Abort_IT>
 8107008:	4603      	mov	r3, r0
 810700a:	2b00      	cmp	r3, #0
 810700c:	d007      	beq.n	810701e <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107014:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8107018:	687b      	ldr	r3, [r7, #4]
 810701a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810701e:	687b      	ldr	r3, [r7, #4]
 8107020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107022:	2b00      	cmp	r3, #0
 8107024:	d021      	beq.n	810706a <HAL_SPI_IRQHandler+0x3b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810702a:	4a12      	ldr	r2, [pc, #72]	; (8107074 <HAL_SPI_IRQHandler+0x3c0>)
 810702c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107032:	4618      	mov	r0, r3
 8107034:	f7fc f80e 	bl	8103054 <HAL_DMA_Abort_IT>
 8107038:	4603      	mov	r3, r0
 810703a:	2b00      	cmp	r3, #0
 810703c:	d015      	beq.n	810706a <HAL_SPI_IRQHandler+0x3b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810703e:	687b      	ldr	r3, [r7, #4]
 8107040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107044:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810704e:	e00c      	b.n	810706a <HAL_SPI_IRQHandler+0x3b6>
        hspi->State = HAL_SPI_STATE_READY;
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	2201      	movs	r2, #1
 8107054:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8107058:	6878      	ldr	r0, [r7, #4]
 810705a:	f000 f82b 	bl	81070b4 <HAL_SPI_ErrorCallback>
    return;
 810705e:	bf00      	nop
 8107060:	e003      	b.n	810706a <HAL_SPI_IRQHandler+0x3b6>
    return;
 8107062:	bf00      	nop
 8107064:	e002      	b.n	810706c <HAL_SPI_IRQHandler+0x3b8>
    return;
 8107066:	bf00      	nop
 8107068:	e000      	b.n	810706c <HAL_SPI_IRQHandler+0x3b8>
    return;
 810706a:	bf00      	nop
  }
}
 810706c:	3728      	adds	r7, #40	; 0x28
 810706e:	46bd      	mov	sp, r7
 8107070:	bd80      	pop	{r7, pc}
 8107072:	bf00      	nop
 8107074:	081070c9 	.word	0x081070c9

08107078 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8107078:	b480      	push	{r7}
 810707a:	b083      	sub	sp, #12
 810707c:	af00      	add	r7, sp, #0
 810707e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8107080:	bf00      	nop
 8107082:	370c      	adds	r7, #12
 8107084:	46bd      	mov	sp, r7
 8107086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810708a:	4770      	bx	lr

0810708c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810708c:	b480      	push	{r7}
 810708e:	b083      	sub	sp, #12
 8107090:	af00      	add	r7, sp, #0
 8107092:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8107094:	bf00      	nop
 8107096:	370c      	adds	r7, #12
 8107098:	46bd      	mov	sp, r7
 810709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810709e:	4770      	bx	lr

081070a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 81070a0:	b480      	push	{r7}
 81070a2:	b083      	sub	sp, #12
 81070a4:	af00      	add	r7, sp, #0
 81070a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 81070a8:	bf00      	nop
 81070aa:	370c      	adds	r7, #12
 81070ac:	46bd      	mov	sp, r7
 81070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070b2:	4770      	bx	lr

081070b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 81070b4:	b480      	push	{r7}
 81070b6:	b083      	sub	sp, #12
 81070b8:	af00      	add	r7, sp, #0
 81070ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 81070bc:	bf00      	nop
 81070be:	370c      	adds	r7, #12
 81070c0:	46bd      	mov	sp, r7
 81070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070c6:	4770      	bx	lr

081070c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81070c8:	b580      	push	{r7, lr}
 81070ca:	b084      	sub	sp, #16
 81070cc:	af00      	add	r7, sp, #0
 81070ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81070d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 81070d6:	68fb      	ldr	r3, [r7, #12]
 81070d8:	2200      	movs	r2, #0
 81070da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 81070de:	68fb      	ldr	r3, [r7, #12]
 81070e0:	2200      	movs	r2, #0
 81070e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 81070e6:	68fb      	ldr	r3, [r7, #12]
 81070e8:	2201      	movs	r2, #1
 81070ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 81070ee:	68f8      	ldr	r0, [r7, #12]
 81070f0:	f7ff ffe0 	bl	81070b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 81070f4:	bf00      	nop
 81070f6:	3710      	adds	r7, #16
 81070f8:	46bd      	mov	sp, r7
 81070fa:	bd80      	pop	{r7, pc}

081070fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81070fc:	b480      	push	{r7}
 81070fe:	b085      	sub	sp, #20
 8107100:	af00      	add	r7, sp, #0
 8107102:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8107104:	687b      	ldr	r3, [r7, #4]
 8107106:	681b      	ldr	r3, [r3, #0]
 8107108:	695b      	ldr	r3, [r3, #20]
 810710a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	699a      	ldr	r2, [r3, #24]
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	681b      	ldr	r3, [r3, #0]
 8107116:	f042 0208 	orr.w	r2, r2, #8
 810711a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	681b      	ldr	r3, [r3, #0]
 8107120:	699a      	ldr	r2, [r3, #24]
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	681b      	ldr	r3, [r3, #0]
 8107126:	f042 0210 	orr.w	r2, r2, #16
 810712a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810712c:	687b      	ldr	r3, [r7, #4]
 810712e:	681b      	ldr	r3, [r3, #0]
 8107130:	681a      	ldr	r2, [r3, #0]
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	681b      	ldr	r3, [r3, #0]
 8107136:	f022 0201 	bic.w	r2, r2, #1
 810713a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	681b      	ldr	r3, [r3, #0]
 8107140:	691b      	ldr	r3, [r3, #16]
 8107142:	687a      	ldr	r2, [r7, #4]
 8107144:	6812      	ldr	r2, [r2, #0]
 8107146:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810714a:	f023 0303 	bic.w	r3, r3, #3
 810714e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	681b      	ldr	r3, [r3, #0]
 8107154:	689a      	ldr	r2, [r3, #8]
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	681b      	ldr	r3, [r3, #0]
 810715a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810715e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107166:	b2db      	uxtb	r3, r3
 8107168:	2b04      	cmp	r3, #4
 810716a:	d014      	beq.n	8107196 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810716c:	68fb      	ldr	r3, [r7, #12]
 810716e:	f003 0320 	and.w	r3, r3, #32
 8107172:	2b00      	cmp	r3, #0
 8107174:	d00f      	beq.n	8107196 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810717c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8107180:	687b      	ldr	r3, [r7, #4]
 8107182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	699a      	ldr	r2, [r3, #24]
 810718c:	687b      	ldr	r3, [r7, #4]
 810718e:	681b      	ldr	r3, [r3, #0]
 8107190:	f042 0220 	orr.w	r2, r2, #32
 8107194:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8107196:	687b      	ldr	r3, [r7, #4]
 8107198:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810719c:	b2db      	uxtb	r3, r3
 810719e:	2b03      	cmp	r3, #3
 81071a0:	d014      	beq.n	81071cc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81071a2:	68fb      	ldr	r3, [r7, #12]
 81071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81071a8:	2b00      	cmp	r3, #0
 81071aa:	d00f      	beq.n	81071cc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81071b2:	f043 0204 	orr.w	r2, r3, #4
 81071b6:	687b      	ldr	r3, [r7, #4]
 81071b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	681b      	ldr	r3, [r3, #0]
 81071c0:	699a      	ldr	r2, [r3, #24]
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	681b      	ldr	r3, [r3, #0]
 81071c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81071ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81071cc:	68fb      	ldr	r3, [r7, #12]
 81071ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81071d2:	2b00      	cmp	r3, #0
 81071d4:	d00f      	beq.n	81071f6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81071dc:	f043 0201 	orr.w	r2, r3, #1
 81071e0:	687b      	ldr	r3, [r7, #4]
 81071e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81071e6:	687b      	ldr	r3, [r7, #4]
 81071e8:	681b      	ldr	r3, [r3, #0]
 81071ea:	699a      	ldr	r2, [r3, #24]
 81071ec:	687b      	ldr	r3, [r7, #4]
 81071ee:	681b      	ldr	r3, [r3, #0]
 81071f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81071f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81071f6:	68fb      	ldr	r3, [r7, #12]
 81071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81071fc:	2b00      	cmp	r3, #0
 81071fe:	d00f      	beq.n	8107220 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8107200:	687b      	ldr	r3, [r7, #4]
 8107202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107206:	f043 0208 	orr.w	r2, r3, #8
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	681b      	ldr	r3, [r3, #0]
 8107214:	699a      	ldr	r2, [r3, #24]
 8107216:	687b      	ldr	r3, [r7, #4]
 8107218:	681b      	ldr	r3, [r3, #0]
 810721a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810721e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	2200      	movs	r2, #0
 8107224:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8107228:	687b      	ldr	r3, [r7, #4]
 810722a:	2200      	movs	r2, #0
 810722c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8107230:	bf00      	nop
 8107232:	3714      	adds	r7, #20
 8107234:	46bd      	mov	sp, r7
 8107236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810723a:	4770      	bx	lr

0810723c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810723c:	b480      	push	{r7}
 810723e:	b085      	sub	sp, #20
 8107240:	af00      	add	r7, sp, #0
 8107242:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107248:	095b      	lsrs	r3, r3, #5
 810724a:	3301      	adds	r3, #1
 810724c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	68db      	ldr	r3, [r3, #12]
 8107252:	3301      	adds	r3, #1
 8107254:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8107256:	68bb      	ldr	r3, [r7, #8]
 8107258:	3307      	adds	r3, #7
 810725a:	08db      	lsrs	r3, r3, #3
 810725c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810725e:	68bb      	ldr	r3, [r7, #8]
 8107260:	68fa      	ldr	r2, [r7, #12]
 8107262:	fb02 f303 	mul.w	r3, r2, r3
}
 8107266:	4618      	mov	r0, r3
 8107268:	3714      	adds	r7, #20
 810726a:	46bd      	mov	sp, r7
 810726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107270:	4770      	bx	lr

08107272 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107272:	b580      	push	{r7, lr}
 8107274:	b082      	sub	sp, #8
 8107276:	af00      	add	r7, sp, #0
 8107278:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	2b00      	cmp	r3, #0
 810727e:	d101      	bne.n	8107284 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107280:	2301      	movs	r3, #1
 8107282:	e049      	b.n	8107318 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107284:	687b      	ldr	r3, [r7, #4]
 8107286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810728a:	b2db      	uxtb	r3, r3
 810728c:	2b00      	cmp	r3, #0
 810728e:	d106      	bne.n	810729e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107290:	687b      	ldr	r3, [r7, #4]
 8107292:	2200      	movs	r2, #0
 8107294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107298:	6878      	ldr	r0, [r7, #4]
 810729a:	f000 f841 	bl	8107320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810729e:	687b      	ldr	r3, [r7, #4]
 81072a0:	2202      	movs	r2, #2
 81072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81072a6:	687b      	ldr	r3, [r7, #4]
 81072a8:	681a      	ldr	r2, [r3, #0]
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	3304      	adds	r3, #4
 81072ae:	4619      	mov	r1, r3
 81072b0:	4610      	mov	r0, r2
 81072b2:	f000 f9bd 	bl	8107630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81072b6:	687b      	ldr	r3, [r7, #4]
 81072b8:	2201      	movs	r2, #1
 81072ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81072be:	687b      	ldr	r3, [r7, #4]
 81072c0:	2201      	movs	r2, #1
 81072c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81072c6:	687b      	ldr	r3, [r7, #4]
 81072c8:	2201      	movs	r2, #1
 81072ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	2201      	movs	r2, #1
 81072d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	2201      	movs	r2, #1
 81072da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	2201      	movs	r2, #1
 81072e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81072e6:	687b      	ldr	r3, [r7, #4]
 81072e8:	2201      	movs	r2, #1
 81072ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81072ee:	687b      	ldr	r3, [r7, #4]
 81072f0:	2201      	movs	r2, #1
 81072f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	2201      	movs	r2, #1
 81072fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81072fe:	687b      	ldr	r3, [r7, #4]
 8107300:	2201      	movs	r2, #1
 8107302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	2201      	movs	r2, #1
 810730a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	2201      	movs	r2, #1
 8107312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107316:	2300      	movs	r3, #0
}
 8107318:	4618      	mov	r0, r3
 810731a:	3708      	adds	r7, #8
 810731c:	46bd      	mov	sp, r7
 810731e:	bd80      	pop	{r7, pc}

08107320 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8107320:	b480      	push	{r7}
 8107322:	b083      	sub	sp, #12
 8107324:	af00      	add	r7, sp, #0
 8107326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8107328:	bf00      	nop
 810732a:	370c      	adds	r7, #12
 810732c:	46bd      	mov	sp, r7
 810732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107332:	4770      	bx	lr

08107334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8107334:	b480      	push	{r7}
 8107336:	b085      	sub	sp, #20
 8107338:	af00      	add	r7, sp, #0
 810733a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810733c:	687b      	ldr	r3, [r7, #4]
 810733e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107342:	b2db      	uxtb	r3, r3
 8107344:	2b01      	cmp	r3, #1
 8107346:	d001      	beq.n	810734c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8107348:	2301      	movs	r3, #1
 810734a:	e021      	b.n	8107390 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	2202      	movs	r2, #2
 8107350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	68da      	ldr	r2, [r3, #12]
 810735a:	687b      	ldr	r3, [r7, #4]
 810735c:	681b      	ldr	r3, [r3, #0]
 810735e:	f042 0201 	orr.w	r2, r2, #1
 8107362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107364:	687b      	ldr	r3, [r7, #4]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	689a      	ldr	r2, [r3, #8]
 810736a:	4b0c      	ldr	r3, [pc, #48]	; (810739c <HAL_TIM_Base_Start_IT+0x68>)
 810736c:	4013      	ands	r3, r2
 810736e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107370:	68fb      	ldr	r3, [r7, #12]
 8107372:	2b06      	cmp	r3, #6
 8107374:	d00b      	beq.n	810738e <HAL_TIM_Base_Start_IT+0x5a>
 8107376:	68fb      	ldr	r3, [r7, #12]
 8107378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810737c:	d007      	beq.n	810738e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810737e:	687b      	ldr	r3, [r7, #4]
 8107380:	681b      	ldr	r3, [r3, #0]
 8107382:	681a      	ldr	r2, [r3, #0]
 8107384:	687b      	ldr	r3, [r7, #4]
 8107386:	681b      	ldr	r3, [r3, #0]
 8107388:	f042 0201 	orr.w	r2, r2, #1
 810738c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810738e:	2300      	movs	r3, #0
}
 8107390:	4618      	mov	r0, r3
 8107392:	3714      	adds	r7, #20
 8107394:	46bd      	mov	sp, r7
 8107396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810739a:	4770      	bx	lr
 810739c:	00010007 	.word	0x00010007

081073a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81073a0:	b580      	push	{r7, lr}
 81073a2:	b082      	sub	sp, #8
 81073a4:	af00      	add	r7, sp, #0
 81073a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81073a8:	687b      	ldr	r3, [r7, #4]
 81073aa:	681b      	ldr	r3, [r3, #0]
 81073ac:	691b      	ldr	r3, [r3, #16]
 81073ae:	f003 0302 	and.w	r3, r3, #2
 81073b2:	2b02      	cmp	r3, #2
 81073b4:	d122      	bne.n	81073fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81073b6:	687b      	ldr	r3, [r7, #4]
 81073b8:	681b      	ldr	r3, [r3, #0]
 81073ba:	68db      	ldr	r3, [r3, #12]
 81073bc:	f003 0302 	and.w	r3, r3, #2
 81073c0:	2b02      	cmp	r3, #2
 81073c2:	d11b      	bne.n	81073fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81073c4:	687b      	ldr	r3, [r7, #4]
 81073c6:	681b      	ldr	r3, [r3, #0]
 81073c8:	f06f 0202 	mvn.w	r2, #2
 81073cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	2201      	movs	r2, #1
 81073d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	681b      	ldr	r3, [r3, #0]
 81073d8:	699b      	ldr	r3, [r3, #24]
 81073da:	f003 0303 	and.w	r3, r3, #3
 81073de:	2b00      	cmp	r3, #0
 81073e0:	d003      	beq.n	81073ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81073e2:	6878      	ldr	r0, [r7, #4]
 81073e4:	f000 f905 	bl	81075f2 <HAL_TIM_IC_CaptureCallback>
 81073e8:	e005      	b.n	81073f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81073ea:	6878      	ldr	r0, [r7, #4]
 81073ec:	f000 f8f7 	bl	81075de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81073f0:	6878      	ldr	r0, [r7, #4]
 81073f2:	f000 f908 	bl	8107606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81073f6:	687b      	ldr	r3, [r7, #4]
 81073f8:	2200      	movs	r2, #0
 81073fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	691b      	ldr	r3, [r3, #16]
 8107402:	f003 0304 	and.w	r3, r3, #4
 8107406:	2b04      	cmp	r3, #4
 8107408:	d122      	bne.n	8107450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810740a:	687b      	ldr	r3, [r7, #4]
 810740c:	681b      	ldr	r3, [r3, #0]
 810740e:	68db      	ldr	r3, [r3, #12]
 8107410:	f003 0304 	and.w	r3, r3, #4
 8107414:	2b04      	cmp	r3, #4
 8107416:	d11b      	bne.n	8107450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	681b      	ldr	r3, [r3, #0]
 810741c:	f06f 0204 	mvn.w	r2, #4
 8107420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	2202      	movs	r2, #2
 8107426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	699b      	ldr	r3, [r3, #24]
 810742e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8107432:	2b00      	cmp	r3, #0
 8107434:	d003      	beq.n	810743e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107436:	6878      	ldr	r0, [r7, #4]
 8107438:	f000 f8db 	bl	81075f2 <HAL_TIM_IC_CaptureCallback>
 810743c:	e005      	b.n	810744a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810743e:	6878      	ldr	r0, [r7, #4]
 8107440:	f000 f8cd 	bl	81075de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107444:	6878      	ldr	r0, [r7, #4]
 8107446:	f000 f8de 	bl	8107606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	2200      	movs	r2, #0
 810744e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8107450:	687b      	ldr	r3, [r7, #4]
 8107452:	681b      	ldr	r3, [r3, #0]
 8107454:	691b      	ldr	r3, [r3, #16]
 8107456:	f003 0308 	and.w	r3, r3, #8
 810745a:	2b08      	cmp	r3, #8
 810745c:	d122      	bne.n	81074a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810745e:	687b      	ldr	r3, [r7, #4]
 8107460:	681b      	ldr	r3, [r3, #0]
 8107462:	68db      	ldr	r3, [r3, #12]
 8107464:	f003 0308 	and.w	r3, r3, #8
 8107468:	2b08      	cmp	r3, #8
 810746a:	d11b      	bne.n	81074a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	681b      	ldr	r3, [r3, #0]
 8107470:	f06f 0208 	mvn.w	r2, #8
 8107474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8107476:	687b      	ldr	r3, [r7, #4]
 8107478:	2204      	movs	r2, #4
 810747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810747c:	687b      	ldr	r3, [r7, #4]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	69db      	ldr	r3, [r3, #28]
 8107482:	f003 0303 	and.w	r3, r3, #3
 8107486:	2b00      	cmp	r3, #0
 8107488:	d003      	beq.n	8107492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810748a:	6878      	ldr	r0, [r7, #4]
 810748c:	f000 f8b1 	bl	81075f2 <HAL_TIM_IC_CaptureCallback>
 8107490:	e005      	b.n	810749e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107492:	6878      	ldr	r0, [r7, #4]
 8107494:	f000 f8a3 	bl	81075de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107498:	6878      	ldr	r0, [r7, #4]
 810749a:	f000 f8b4 	bl	8107606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810749e:	687b      	ldr	r3, [r7, #4]
 81074a0:	2200      	movs	r2, #0
 81074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	691b      	ldr	r3, [r3, #16]
 81074aa:	f003 0310 	and.w	r3, r3, #16
 81074ae:	2b10      	cmp	r3, #16
 81074b0:	d122      	bne.n	81074f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	681b      	ldr	r3, [r3, #0]
 81074b6:	68db      	ldr	r3, [r3, #12]
 81074b8:	f003 0310 	and.w	r3, r3, #16
 81074bc:	2b10      	cmp	r3, #16
 81074be:	d11b      	bne.n	81074f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	f06f 0210 	mvn.w	r2, #16
 81074c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81074ca:	687b      	ldr	r3, [r7, #4]
 81074cc:	2208      	movs	r2, #8
 81074ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81074d0:	687b      	ldr	r3, [r7, #4]
 81074d2:	681b      	ldr	r3, [r3, #0]
 81074d4:	69db      	ldr	r3, [r3, #28]
 81074d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81074da:	2b00      	cmp	r3, #0
 81074dc:	d003      	beq.n	81074e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81074de:	6878      	ldr	r0, [r7, #4]
 81074e0:	f000 f887 	bl	81075f2 <HAL_TIM_IC_CaptureCallback>
 81074e4:	e005      	b.n	81074f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81074e6:	6878      	ldr	r0, [r7, #4]
 81074e8:	f000 f879 	bl	81075de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81074ec:	6878      	ldr	r0, [r7, #4]
 81074ee:	f000 f88a 	bl	8107606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	2200      	movs	r2, #0
 81074f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81074f8:	687b      	ldr	r3, [r7, #4]
 81074fa:	681b      	ldr	r3, [r3, #0]
 81074fc:	691b      	ldr	r3, [r3, #16]
 81074fe:	f003 0301 	and.w	r3, r3, #1
 8107502:	2b01      	cmp	r3, #1
 8107504:	d10e      	bne.n	8107524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8107506:	687b      	ldr	r3, [r7, #4]
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	68db      	ldr	r3, [r3, #12]
 810750c:	f003 0301 	and.w	r3, r3, #1
 8107510:	2b01      	cmp	r3, #1
 8107512:	d107      	bne.n	8107524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8107514:	687b      	ldr	r3, [r7, #4]
 8107516:	681b      	ldr	r3, [r3, #0]
 8107518:	f06f 0201 	mvn.w	r2, #1
 810751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810751e:	6878      	ldr	r0, [r7, #4]
 8107520:	f7fa f908 	bl	8101734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	681b      	ldr	r3, [r3, #0]
 8107528:	691b      	ldr	r3, [r3, #16]
 810752a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810752e:	2b80      	cmp	r3, #128	; 0x80
 8107530:	d10e      	bne.n	8107550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	681b      	ldr	r3, [r3, #0]
 8107536:	68db      	ldr	r3, [r3, #12]
 8107538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810753c:	2b80      	cmp	r3, #128	; 0x80
 810753e:	d107      	bne.n	8107550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8107540:	687b      	ldr	r3, [r7, #4]
 8107542:	681b      	ldr	r3, [r3, #0]
 8107544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8107548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810754a:	6878      	ldr	r0, [r7, #4]
 810754c:	f000 f914 	bl	8107778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8107550:	687b      	ldr	r3, [r7, #4]
 8107552:	681b      	ldr	r3, [r3, #0]
 8107554:	691b      	ldr	r3, [r3, #16]
 8107556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810755a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810755e:	d10e      	bne.n	810757e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	681b      	ldr	r3, [r3, #0]
 8107564:	68db      	ldr	r3, [r3, #12]
 8107566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810756a:	2b80      	cmp	r3, #128	; 0x80
 810756c:	d107      	bne.n	810757e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8107576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107578:	6878      	ldr	r0, [r7, #4]
 810757a:	f000 f907 	bl	810778c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810757e:	687b      	ldr	r3, [r7, #4]
 8107580:	681b      	ldr	r3, [r3, #0]
 8107582:	691b      	ldr	r3, [r3, #16]
 8107584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107588:	2b40      	cmp	r3, #64	; 0x40
 810758a:	d10e      	bne.n	81075aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810758c:	687b      	ldr	r3, [r7, #4]
 810758e:	681b      	ldr	r3, [r3, #0]
 8107590:	68db      	ldr	r3, [r3, #12]
 8107592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107596:	2b40      	cmp	r3, #64	; 0x40
 8107598:	d107      	bne.n	81075aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	681b      	ldr	r3, [r3, #0]
 810759e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81075a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81075a4:	6878      	ldr	r0, [r7, #4]
 81075a6:	f000 f838 	bl	810761a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81075aa:	687b      	ldr	r3, [r7, #4]
 81075ac:	681b      	ldr	r3, [r3, #0]
 81075ae:	691b      	ldr	r3, [r3, #16]
 81075b0:	f003 0320 	and.w	r3, r3, #32
 81075b4:	2b20      	cmp	r3, #32
 81075b6:	d10e      	bne.n	81075d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81075b8:	687b      	ldr	r3, [r7, #4]
 81075ba:	681b      	ldr	r3, [r3, #0]
 81075bc:	68db      	ldr	r3, [r3, #12]
 81075be:	f003 0320 	and.w	r3, r3, #32
 81075c2:	2b20      	cmp	r3, #32
 81075c4:	d107      	bne.n	81075d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	681b      	ldr	r3, [r3, #0]
 81075ca:	f06f 0220 	mvn.w	r2, #32
 81075ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81075d0:	6878      	ldr	r0, [r7, #4]
 81075d2:	f000 f8c7 	bl	8107764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81075d6:	bf00      	nop
 81075d8:	3708      	adds	r7, #8
 81075da:	46bd      	mov	sp, r7
 81075dc:	bd80      	pop	{r7, pc}

081075de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81075de:	b480      	push	{r7}
 81075e0:	b083      	sub	sp, #12
 81075e2:	af00      	add	r7, sp, #0
 81075e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81075e6:	bf00      	nop
 81075e8:	370c      	adds	r7, #12
 81075ea:	46bd      	mov	sp, r7
 81075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075f0:	4770      	bx	lr

081075f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81075f2:	b480      	push	{r7}
 81075f4:	b083      	sub	sp, #12
 81075f6:	af00      	add	r7, sp, #0
 81075f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81075fa:	bf00      	nop
 81075fc:	370c      	adds	r7, #12
 81075fe:	46bd      	mov	sp, r7
 8107600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107604:	4770      	bx	lr

08107606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107606:	b480      	push	{r7}
 8107608:	b083      	sub	sp, #12
 810760a:	af00      	add	r7, sp, #0
 810760c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810760e:	bf00      	nop
 8107610:	370c      	adds	r7, #12
 8107612:	46bd      	mov	sp, r7
 8107614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107618:	4770      	bx	lr

0810761a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810761a:	b480      	push	{r7}
 810761c:	b083      	sub	sp, #12
 810761e:	af00      	add	r7, sp, #0
 8107620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107622:	bf00      	nop
 8107624:	370c      	adds	r7, #12
 8107626:	46bd      	mov	sp, r7
 8107628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810762c:	4770      	bx	lr
	...

08107630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107630:	b480      	push	{r7}
 8107632:	b085      	sub	sp, #20
 8107634:	af00      	add	r7, sp, #0
 8107636:	6078      	str	r0, [r7, #4]
 8107638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	681b      	ldr	r3, [r3, #0]
 810763e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	4a40      	ldr	r2, [pc, #256]	; (8107744 <TIM_Base_SetConfig+0x114>)
 8107644:	4293      	cmp	r3, r2
 8107646:	d013      	beq.n	8107670 <TIM_Base_SetConfig+0x40>
 8107648:	687b      	ldr	r3, [r7, #4]
 810764a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810764e:	d00f      	beq.n	8107670 <TIM_Base_SetConfig+0x40>
 8107650:	687b      	ldr	r3, [r7, #4]
 8107652:	4a3d      	ldr	r2, [pc, #244]	; (8107748 <TIM_Base_SetConfig+0x118>)
 8107654:	4293      	cmp	r3, r2
 8107656:	d00b      	beq.n	8107670 <TIM_Base_SetConfig+0x40>
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	4a3c      	ldr	r2, [pc, #240]	; (810774c <TIM_Base_SetConfig+0x11c>)
 810765c:	4293      	cmp	r3, r2
 810765e:	d007      	beq.n	8107670 <TIM_Base_SetConfig+0x40>
 8107660:	687b      	ldr	r3, [r7, #4]
 8107662:	4a3b      	ldr	r2, [pc, #236]	; (8107750 <TIM_Base_SetConfig+0x120>)
 8107664:	4293      	cmp	r3, r2
 8107666:	d003      	beq.n	8107670 <TIM_Base_SetConfig+0x40>
 8107668:	687b      	ldr	r3, [r7, #4]
 810766a:	4a3a      	ldr	r2, [pc, #232]	; (8107754 <TIM_Base_SetConfig+0x124>)
 810766c:	4293      	cmp	r3, r2
 810766e:	d108      	bne.n	8107682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107670:	68fb      	ldr	r3, [r7, #12]
 8107672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107678:	683b      	ldr	r3, [r7, #0]
 810767a:	685b      	ldr	r3, [r3, #4]
 810767c:	68fa      	ldr	r2, [r7, #12]
 810767e:	4313      	orrs	r3, r2
 8107680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107682:	687b      	ldr	r3, [r7, #4]
 8107684:	4a2f      	ldr	r2, [pc, #188]	; (8107744 <TIM_Base_SetConfig+0x114>)
 8107686:	4293      	cmp	r3, r2
 8107688:	d01f      	beq.n	81076ca <TIM_Base_SetConfig+0x9a>
 810768a:	687b      	ldr	r3, [r7, #4]
 810768c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107690:	d01b      	beq.n	81076ca <TIM_Base_SetConfig+0x9a>
 8107692:	687b      	ldr	r3, [r7, #4]
 8107694:	4a2c      	ldr	r2, [pc, #176]	; (8107748 <TIM_Base_SetConfig+0x118>)
 8107696:	4293      	cmp	r3, r2
 8107698:	d017      	beq.n	81076ca <TIM_Base_SetConfig+0x9a>
 810769a:	687b      	ldr	r3, [r7, #4]
 810769c:	4a2b      	ldr	r2, [pc, #172]	; (810774c <TIM_Base_SetConfig+0x11c>)
 810769e:	4293      	cmp	r3, r2
 81076a0:	d013      	beq.n	81076ca <TIM_Base_SetConfig+0x9a>
 81076a2:	687b      	ldr	r3, [r7, #4]
 81076a4:	4a2a      	ldr	r2, [pc, #168]	; (8107750 <TIM_Base_SetConfig+0x120>)
 81076a6:	4293      	cmp	r3, r2
 81076a8:	d00f      	beq.n	81076ca <TIM_Base_SetConfig+0x9a>
 81076aa:	687b      	ldr	r3, [r7, #4]
 81076ac:	4a29      	ldr	r2, [pc, #164]	; (8107754 <TIM_Base_SetConfig+0x124>)
 81076ae:	4293      	cmp	r3, r2
 81076b0:	d00b      	beq.n	81076ca <TIM_Base_SetConfig+0x9a>
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	4a28      	ldr	r2, [pc, #160]	; (8107758 <TIM_Base_SetConfig+0x128>)
 81076b6:	4293      	cmp	r3, r2
 81076b8:	d007      	beq.n	81076ca <TIM_Base_SetConfig+0x9a>
 81076ba:	687b      	ldr	r3, [r7, #4]
 81076bc:	4a27      	ldr	r2, [pc, #156]	; (810775c <TIM_Base_SetConfig+0x12c>)
 81076be:	4293      	cmp	r3, r2
 81076c0:	d003      	beq.n	81076ca <TIM_Base_SetConfig+0x9a>
 81076c2:	687b      	ldr	r3, [r7, #4]
 81076c4:	4a26      	ldr	r2, [pc, #152]	; (8107760 <TIM_Base_SetConfig+0x130>)
 81076c6:	4293      	cmp	r3, r2
 81076c8:	d108      	bne.n	81076dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81076ca:	68fb      	ldr	r3, [r7, #12]
 81076cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81076d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81076d2:	683b      	ldr	r3, [r7, #0]
 81076d4:	68db      	ldr	r3, [r3, #12]
 81076d6:	68fa      	ldr	r2, [r7, #12]
 81076d8:	4313      	orrs	r3, r2
 81076da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81076dc:	68fb      	ldr	r3, [r7, #12]
 81076de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81076e2:	683b      	ldr	r3, [r7, #0]
 81076e4:	695b      	ldr	r3, [r3, #20]
 81076e6:	4313      	orrs	r3, r2
 81076e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	68fa      	ldr	r2, [r7, #12]
 81076ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81076f0:	683b      	ldr	r3, [r7, #0]
 81076f2:	689a      	ldr	r2, [r3, #8]
 81076f4:	687b      	ldr	r3, [r7, #4]
 81076f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81076f8:	683b      	ldr	r3, [r7, #0]
 81076fa:	681a      	ldr	r2, [r3, #0]
 81076fc:	687b      	ldr	r3, [r7, #4]
 81076fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	4a10      	ldr	r2, [pc, #64]	; (8107744 <TIM_Base_SetConfig+0x114>)
 8107704:	4293      	cmp	r3, r2
 8107706:	d00f      	beq.n	8107728 <TIM_Base_SetConfig+0xf8>
 8107708:	687b      	ldr	r3, [r7, #4]
 810770a:	4a12      	ldr	r2, [pc, #72]	; (8107754 <TIM_Base_SetConfig+0x124>)
 810770c:	4293      	cmp	r3, r2
 810770e:	d00b      	beq.n	8107728 <TIM_Base_SetConfig+0xf8>
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	4a11      	ldr	r2, [pc, #68]	; (8107758 <TIM_Base_SetConfig+0x128>)
 8107714:	4293      	cmp	r3, r2
 8107716:	d007      	beq.n	8107728 <TIM_Base_SetConfig+0xf8>
 8107718:	687b      	ldr	r3, [r7, #4]
 810771a:	4a10      	ldr	r2, [pc, #64]	; (810775c <TIM_Base_SetConfig+0x12c>)
 810771c:	4293      	cmp	r3, r2
 810771e:	d003      	beq.n	8107728 <TIM_Base_SetConfig+0xf8>
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	4a0f      	ldr	r2, [pc, #60]	; (8107760 <TIM_Base_SetConfig+0x130>)
 8107724:	4293      	cmp	r3, r2
 8107726:	d103      	bne.n	8107730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107728:	683b      	ldr	r3, [r7, #0]
 810772a:	691a      	ldr	r2, [r3, #16]
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107730:	687b      	ldr	r3, [r7, #4]
 8107732:	2201      	movs	r2, #1
 8107734:	615a      	str	r2, [r3, #20]
}
 8107736:	bf00      	nop
 8107738:	3714      	adds	r7, #20
 810773a:	46bd      	mov	sp, r7
 810773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107740:	4770      	bx	lr
 8107742:	bf00      	nop
 8107744:	40010000 	.word	0x40010000
 8107748:	40000400 	.word	0x40000400
 810774c:	40000800 	.word	0x40000800
 8107750:	40000c00 	.word	0x40000c00
 8107754:	40010400 	.word	0x40010400
 8107758:	40014000 	.word	0x40014000
 810775c:	40014400 	.word	0x40014400
 8107760:	40014800 	.word	0x40014800

08107764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107764:	b480      	push	{r7}
 8107766:	b083      	sub	sp, #12
 8107768:	af00      	add	r7, sp, #0
 810776a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810776c:	bf00      	nop
 810776e:	370c      	adds	r7, #12
 8107770:	46bd      	mov	sp, r7
 8107772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107776:	4770      	bx	lr

08107778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107778:	b480      	push	{r7}
 810777a:	b083      	sub	sp, #12
 810777c:	af00      	add	r7, sp, #0
 810777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107780:	bf00      	nop
 8107782:	370c      	adds	r7, #12
 8107784:	46bd      	mov	sp, r7
 8107786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810778a:	4770      	bx	lr

0810778c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810778c:	b480      	push	{r7}
 810778e:	b083      	sub	sp, #12
 8107790:	af00      	add	r7, sp, #0
 8107792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107794:	bf00      	nop
 8107796:	370c      	adds	r7, #12
 8107798:	46bd      	mov	sp, r7
 810779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810779e:	4770      	bx	lr

081077a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81077a0:	b580      	push	{r7, lr}
 81077a2:	b082      	sub	sp, #8
 81077a4:	af00      	add	r7, sp, #0
 81077a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	2b00      	cmp	r3, #0
 81077ac:	d101      	bne.n	81077b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81077ae:	2301      	movs	r3, #1
 81077b0:	e042      	b.n	8107838 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81077b8:	2b00      	cmp	r3, #0
 81077ba:	d106      	bne.n	81077ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	2200      	movs	r2, #0
 81077c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81077c4:	6878      	ldr	r0, [r7, #4]
 81077c6:	f7fa fc1b 	bl	8102000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	2224      	movs	r2, #36	; 0x24
 81077ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 81077d2:	687b      	ldr	r3, [r7, #4]
 81077d4:	681b      	ldr	r3, [r3, #0]
 81077d6:	681a      	ldr	r2, [r3, #0]
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	681b      	ldr	r3, [r3, #0]
 81077dc:	f022 0201 	bic.w	r2, r2, #1
 81077e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81077e2:	6878      	ldr	r0, [r7, #4]
 81077e4:	f000 f968 	bl	8107ab8 <UART_SetConfig>
 81077e8:	4603      	mov	r3, r0
 81077ea:	2b01      	cmp	r3, #1
 81077ec:	d101      	bne.n	81077f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81077ee:	2301      	movs	r3, #1
 81077f0:	e022      	b.n	8107838 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81077f6:	2b00      	cmp	r3, #0
 81077f8:	d002      	beq.n	8107800 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81077fa:	6878      	ldr	r0, [r7, #4]
 81077fc:	f000 ff0c 	bl	8108618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107800:	687b      	ldr	r3, [r7, #4]
 8107802:	681b      	ldr	r3, [r3, #0]
 8107804:	685a      	ldr	r2, [r3, #4]
 8107806:	687b      	ldr	r3, [r7, #4]
 8107808:	681b      	ldr	r3, [r3, #0]
 810780a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810780e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	681b      	ldr	r3, [r3, #0]
 8107814:	689a      	ldr	r2, [r3, #8]
 8107816:	687b      	ldr	r3, [r7, #4]
 8107818:	681b      	ldr	r3, [r3, #0]
 810781a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810781e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	681b      	ldr	r3, [r3, #0]
 8107824:	681a      	ldr	r2, [r3, #0]
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	681b      	ldr	r3, [r3, #0]
 810782a:	f042 0201 	orr.w	r2, r2, #1
 810782e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107830:	6878      	ldr	r0, [r7, #4]
 8107832:	f000 ff93 	bl	810875c <UART_CheckIdleState>
 8107836:	4603      	mov	r3, r0
}
 8107838:	4618      	mov	r0, r3
 810783a:	3708      	adds	r7, #8
 810783c:	46bd      	mov	sp, r7
 810783e:	bd80      	pop	{r7, pc}

08107840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107840:	b580      	push	{r7, lr}
 8107842:	b08a      	sub	sp, #40	; 0x28
 8107844:	af02      	add	r7, sp, #8
 8107846:	60f8      	str	r0, [r7, #12]
 8107848:	60b9      	str	r1, [r7, #8]
 810784a:	603b      	str	r3, [r7, #0]
 810784c:	4613      	mov	r3, r2
 810784e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107850:	68fb      	ldr	r3, [r7, #12]
 8107852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107856:	2b20      	cmp	r3, #32
 8107858:	f040 8083 	bne.w	8107962 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 810785c:	68bb      	ldr	r3, [r7, #8]
 810785e:	2b00      	cmp	r3, #0
 8107860:	d002      	beq.n	8107868 <HAL_UART_Transmit+0x28>
 8107862:	88fb      	ldrh	r3, [r7, #6]
 8107864:	2b00      	cmp	r3, #0
 8107866:	d101      	bne.n	810786c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107868:	2301      	movs	r3, #1
 810786a:	e07b      	b.n	8107964 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 810786c:	68fb      	ldr	r3, [r7, #12]
 810786e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107872:	2b01      	cmp	r3, #1
 8107874:	d101      	bne.n	810787a <HAL_UART_Transmit+0x3a>
 8107876:	2302      	movs	r3, #2
 8107878:	e074      	b.n	8107964 <HAL_UART_Transmit+0x124>
 810787a:	68fb      	ldr	r3, [r7, #12]
 810787c:	2201      	movs	r2, #1
 810787e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107882:	68fb      	ldr	r3, [r7, #12]
 8107884:	2200      	movs	r2, #0
 8107886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810788a:	68fb      	ldr	r3, [r7, #12]
 810788c:	2221      	movs	r2, #33	; 0x21
 810788e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8107892:	f7fa fd01 	bl	8102298 <HAL_GetTick>
 8107896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107898:	68fb      	ldr	r3, [r7, #12]
 810789a:	88fa      	ldrh	r2, [r7, #6]
 810789c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81078a0:	68fb      	ldr	r3, [r7, #12]
 81078a2:	88fa      	ldrh	r2, [r7, #6]
 81078a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81078a8:	68fb      	ldr	r3, [r7, #12]
 81078aa:	689b      	ldr	r3, [r3, #8]
 81078ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81078b0:	d108      	bne.n	81078c4 <HAL_UART_Transmit+0x84>
 81078b2:	68fb      	ldr	r3, [r7, #12]
 81078b4:	691b      	ldr	r3, [r3, #16]
 81078b6:	2b00      	cmp	r3, #0
 81078b8:	d104      	bne.n	81078c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81078ba:	2300      	movs	r3, #0
 81078bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 81078be:	68bb      	ldr	r3, [r7, #8]
 81078c0:	61bb      	str	r3, [r7, #24]
 81078c2:	e003      	b.n	81078cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81078c4:	68bb      	ldr	r3, [r7, #8]
 81078c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81078c8:	2300      	movs	r3, #0
 81078ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81078cc:	68fb      	ldr	r3, [r7, #12]
 81078ce:	2200      	movs	r2, #0
 81078d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 81078d4:	e02c      	b.n	8107930 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81078d6:	683b      	ldr	r3, [r7, #0]
 81078d8:	9300      	str	r3, [sp, #0]
 81078da:	697b      	ldr	r3, [r7, #20]
 81078dc:	2200      	movs	r2, #0
 81078de:	2180      	movs	r1, #128	; 0x80
 81078e0:	68f8      	ldr	r0, [r7, #12]
 81078e2:	f000 ff83 	bl	81087ec <UART_WaitOnFlagUntilTimeout>
 81078e6:	4603      	mov	r3, r0
 81078e8:	2b00      	cmp	r3, #0
 81078ea:	d001      	beq.n	81078f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81078ec:	2303      	movs	r3, #3
 81078ee:	e039      	b.n	8107964 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81078f0:	69fb      	ldr	r3, [r7, #28]
 81078f2:	2b00      	cmp	r3, #0
 81078f4:	d10b      	bne.n	810790e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81078f6:	69bb      	ldr	r3, [r7, #24]
 81078f8:	881b      	ldrh	r3, [r3, #0]
 81078fa:	461a      	mov	r2, r3
 81078fc:	68fb      	ldr	r3, [r7, #12]
 81078fe:	681b      	ldr	r3, [r3, #0]
 8107900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107904:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107906:	69bb      	ldr	r3, [r7, #24]
 8107908:	3302      	adds	r3, #2
 810790a:	61bb      	str	r3, [r7, #24]
 810790c:	e007      	b.n	810791e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810790e:	69fb      	ldr	r3, [r7, #28]
 8107910:	781a      	ldrb	r2, [r3, #0]
 8107912:	68fb      	ldr	r3, [r7, #12]
 8107914:	681b      	ldr	r3, [r3, #0]
 8107916:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107918:	69fb      	ldr	r3, [r7, #28]
 810791a:	3301      	adds	r3, #1
 810791c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810791e:	68fb      	ldr	r3, [r7, #12]
 8107920:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107924:	b29b      	uxth	r3, r3
 8107926:	3b01      	subs	r3, #1
 8107928:	b29a      	uxth	r2, r3
 810792a:	68fb      	ldr	r3, [r7, #12]
 810792c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107930:	68fb      	ldr	r3, [r7, #12]
 8107932:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107936:	b29b      	uxth	r3, r3
 8107938:	2b00      	cmp	r3, #0
 810793a:	d1cc      	bne.n	81078d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810793c:	683b      	ldr	r3, [r7, #0]
 810793e:	9300      	str	r3, [sp, #0]
 8107940:	697b      	ldr	r3, [r7, #20]
 8107942:	2200      	movs	r2, #0
 8107944:	2140      	movs	r1, #64	; 0x40
 8107946:	68f8      	ldr	r0, [r7, #12]
 8107948:	f000 ff50 	bl	81087ec <UART_WaitOnFlagUntilTimeout>
 810794c:	4603      	mov	r3, r0
 810794e:	2b00      	cmp	r3, #0
 8107950:	d001      	beq.n	8107956 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107952:	2303      	movs	r3, #3
 8107954:	e006      	b.n	8107964 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107956:	68fb      	ldr	r3, [r7, #12]
 8107958:	2220      	movs	r2, #32
 810795a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 810795e:	2300      	movs	r3, #0
 8107960:	e000      	b.n	8107964 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8107962:	2302      	movs	r3, #2
  }
}
 8107964:	4618      	mov	r0, r3
 8107966:	3720      	adds	r7, #32
 8107968:	46bd      	mov	sp, r7
 810796a:	bd80      	pop	{r7, pc}

0810796c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810796c:	b580      	push	{r7, lr}
 810796e:	b084      	sub	sp, #16
 8107970:	af00      	add	r7, sp, #0
 8107972:	60f8      	str	r0, [r7, #12]
 8107974:	60b9      	str	r1, [r7, #8]
 8107976:	4613      	mov	r3, r2
 8107978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810797a:	68fb      	ldr	r3, [r7, #12]
 810797c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107980:	2b20      	cmp	r3, #32
 8107982:	d170      	bne.n	8107a66 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8107984:	68bb      	ldr	r3, [r7, #8]
 8107986:	2b00      	cmp	r3, #0
 8107988:	d002      	beq.n	8107990 <HAL_UART_Receive_DMA+0x24>
 810798a:	88fb      	ldrh	r3, [r7, #6]
 810798c:	2b00      	cmp	r3, #0
 810798e:	d101      	bne.n	8107994 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8107990:	2301      	movs	r3, #1
 8107992:	e069      	b.n	8107a68 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8107994:	68fb      	ldr	r3, [r7, #12]
 8107996:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810799a:	2b01      	cmp	r3, #1
 810799c:	d101      	bne.n	81079a2 <HAL_UART_Receive_DMA+0x36>
 810799e:	2302      	movs	r3, #2
 81079a0:	e062      	b.n	8107a68 <HAL_UART_Receive_DMA+0xfc>
 81079a2:	68fb      	ldr	r3, [r7, #12]
 81079a4:	2201      	movs	r2, #1
 81079a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 81079aa:	68fb      	ldr	r3, [r7, #12]
 81079ac:	68ba      	ldr	r2, [r7, #8]
 81079ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 81079b0:	68fb      	ldr	r3, [r7, #12]
 81079b2:	88fa      	ldrh	r2, [r7, #6]
 81079b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81079b8:	68fb      	ldr	r3, [r7, #12]
 81079ba:	2200      	movs	r2, #0
 81079bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 81079c0:	68fb      	ldr	r3, [r7, #12]
 81079c2:	2222      	movs	r2, #34	; 0x22
 81079c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 81079c8:	68fb      	ldr	r3, [r7, #12]
 81079ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81079cc:	2b00      	cmp	r3, #0
 81079ce:	d02c      	beq.n	8107a2a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 81079d0:	68fb      	ldr	r3, [r7, #12]
 81079d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81079d4:	4a26      	ldr	r2, [pc, #152]	; (8107a70 <HAL_UART_Receive_DMA+0x104>)
 81079d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 81079d8:	68fb      	ldr	r3, [r7, #12]
 81079da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81079dc:	4a25      	ldr	r2, [pc, #148]	; (8107a74 <HAL_UART_Receive_DMA+0x108>)
 81079de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 81079e0:	68fb      	ldr	r3, [r7, #12]
 81079e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81079e4:	4a24      	ldr	r2, [pc, #144]	; (8107a78 <HAL_UART_Receive_DMA+0x10c>)
 81079e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 81079e8:	68fb      	ldr	r3, [r7, #12]
 81079ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81079ec:	2200      	movs	r2, #0
 81079ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 81079f0:	68fb      	ldr	r3, [r7, #12]
 81079f2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 81079f4:	68fb      	ldr	r3, [r7, #12]
 81079f6:	681b      	ldr	r3, [r3, #0]
 81079f8:	3324      	adds	r3, #36	; 0x24
 81079fa:	4619      	mov	r1, r3
 81079fc:	68fb      	ldr	r3, [r7, #12]
 81079fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107a00:	461a      	mov	r2, r3
 8107a02:	88fb      	ldrh	r3, [r7, #6]
 8107a04:	f7fb f8bc 	bl	8102b80 <HAL_DMA_Start_IT>
 8107a08:	4603      	mov	r3, r0
 8107a0a:	2b00      	cmp	r3, #0
 8107a0c:	d00d      	beq.n	8107a2a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8107a0e:	68fb      	ldr	r3, [r7, #12]
 8107a10:	2210      	movs	r2, #16
 8107a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107a16:	68fb      	ldr	r3, [r7, #12]
 8107a18:	2200      	movs	r2, #0
 8107a1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8107a1e:	68fb      	ldr	r3, [r7, #12]
 8107a20:	2220      	movs	r2, #32
 8107a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8107a26:	2301      	movs	r3, #1
 8107a28:	e01e      	b.n	8107a68 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8107a2a:	68fb      	ldr	r3, [r7, #12]
 8107a2c:	2200      	movs	r2, #0
 8107a2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107a32:	68fb      	ldr	r3, [r7, #12]
 8107a34:	681b      	ldr	r3, [r3, #0]
 8107a36:	681a      	ldr	r2, [r3, #0]
 8107a38:	68fb      	ldr	r3, [r7, #12]
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107a40:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107a42:	68fb      	ldr	r3, [r7, #12]
 8107a44:	681b      	ldr	r3, [r3, #0]
 8107a46:	689a      	ldr	r2, [r3, #8]
 8107a48:	68fb      	ldr	r3, [r7, #12]
 8107a4a:	681b      	ldr	r3, [r3, #0]
 8107a4c:	f042 0201 	orr.w	r2, r2, #1
 8107a50:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8107a52:	68fb      	ldr	r3, [r7, #12]
 8107a54:	681b      	ldr	r3, [r3, #0]
 8107a56:	689a      	ldr	r2, [r3, #8]
 8107a58:	68fb      	ldr	r3, [r7, #12]
 8107a5a:	681b      	ldr	r3, [r3, #0]
 8107a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107a60:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8107a62:	2300      	movs	r3, #0
 8107a64:	e000      	b.n	8107a68 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8107a66:	2302      	movs	r3, #2
  }
}
 8107a68:	4618      	mov	r0, r3
 8107a6a:	3710      	adds	r7, #16
 8107a6c:	46bd      	mov	sp, r7
 8107a6e:	bd80      	pop	{r7, pc}
 8107a70:	0810896f 	.word	0x0810896f
 8107a74:	081089d5 	.word	0x081089d5
 8107a78:	081089f1 	.word	0x081089f1

08107a7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8107a7c:	b480      	push	{r7}
 8107a7e:	b083      	sub	sp, #12
 8107a80:	af00      	add	r7, sp, #0
 8107a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8107a84:	bf00      	nop
 8107a86:	370c      	adds	r7, #12
 8107a88:	46bd      	mov	sp, r7
 8107a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a8e:	4770      	bx	lr

08107a90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8107a90:	b480      	push	{r7}
 8107a92:	b083      	sub	sp, #12
 8107a94:	af00      	add	r7, sp, #0
 8107a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8107a98:	bf00      	nop
 8107a9a:	370c      	adds	r7, #12
 8107a9c:	46bd      	mov	sp, r7
 8107a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107aa2:	4770      	bx	lr

08107aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8107aa4:	b480      	push	{r7}
 8107aa6:	b083      	sub	sp, #12
 8107aa8:	af00      	add	r7, sp, #0
 8107aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8107aac:	bf00      	nop
 8107aae:	370c      	adds	r7, #12
 8107ab0:	46bd      	mov	sp, r7
 8107ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ab6:	4770      	bx	lr

08107ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107ab8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8107abc:	b08e      	sub	sp, #56	; 0x38
 8107abe:	af00      	add	r7, sp, #0
 8107ac0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107ac2:	2300      	movs	r3, #0
 8107ac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107ac8:	687b      	ldr	r3, [r7, #4]
 8107aca:	689a      	ldr	r2, [r3, #8]
 8107acc:	687b      	ldr	r3, [r7, #4]
 8107ace:	691b      	ldr	r3, [r3, #16]
 8107ad0:	431a      	orrs	r2, r3
 8107ad2:	687b      	ldr	r3, [r7, #4]
 8107ad4:	695b      	ldr	r3, [r3, #20]
 8107ad6:	431a      	orrs	r2, r3
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	69db      	ldr	r3, [r3, #28]
 8107adc:	4313      	orrs	r3, r2
 8107ade:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107ae6:	4313      	orrs	r3, r2
 8107ae8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	681b      	ldr	r3, [r3, #0]
 8107aee:	681a      	ldr	r2, [r3, #0]
 8107af0:	4bc2      	ldr	r3, [pc, #776]	; (8107dfc <UART_SetConfig+0x344>)
 8107af2:	4013      	ands	r3, r2
 8107af4:	687a      	ldr	r2, [r7, #4]
 8107af6:	6812      	ldr	r2, [r2, #0]
 8107af8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107afa:	430b      	orrs	r3, r1
 8107afc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107afe:	687b      	ldr	r3, [r7, #4]
 8107b00:	681b      	ldr	r3, [r3, #0]
 8107b02:	685b      	ldr	r3, [r3, #4]
 8107b04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	68da      	ldr	r2, [r3, #12]
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	681b      	ldr	r3, [r3, #0]
 8107b10:	430a      	orrs	r2, r1
 8107b12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	699b      	ldr	r3, [r3, #24]
 8107b18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	681b      	ldr	r3, [r3, #0]
 8107b1e:	4ab8      	ldr	r2, [pc, #736]	; (8107e00 <UART_SetConfig+0x348>)
 8107b20:	4293      	cmp	r3, r2
 8107b22:	d004      	beq.n	8107b2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	6a1b      	ldr	r3, [r3, #32]
 8107b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107b2a:	4313      	orrs	r3, r2
 8107b2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	681b      	ldr	r3, [r3, #0]
 8107b32:	689b      	ldr	r3, [r3, #8]
 8107b34:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107b38:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107b3c:	687a      	ldr	r2, [r7, #4]
 8107b3e:	6812      	ldr	r2, [r2, #0]
 8107b40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107b42:	430b      	orrs	r3, r1
 8107b44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107b46:	687b      	ldr	r3, [r7, #4]
 8107b48:	681b      	ldr	r3, [r3, #0]
 8107b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b4c:	f023 010f 	bic.w	r1, r3, #15
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107b54:	687b      	ldr	r3, [r7, #4]
 8107b56:	681b      	ldr	r3, [r3, #0]
 8107b58:	430a      	orrs	r2, r1
 8107b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	4aa8      	ldr	r2, [pc, #672]	; (8107e04 <UART_SetConfig+0x34c>)
 8107b62:	4293      	cmp	r3, r2
 8107b64:	d177      	bne.n	8107c56 <UART_SetConfig+0x19e>
 8107b66:	4ba8      	ldr	r3, [pc, #672]	; (8107e08 <UART_SetConfig+0x350>)
 8107b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107b6e:	2b28      	cmp	r3, #40	; 0x28
 8107b70:	d86c      	bhi.n	8107c4c <UART_SetConfig+0x194>
 8107b72:	a201      	add	r2, pc, #4	; (adr r2, 8107b78 <UART_SetConfig+0xc0>)
 8107b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b78:	08107c1d 	.word	0x08107c1d
 8107b7c:	08107c4d 	.word	0x08107c4d
 8107b80:	08107c4d 	.word	0x08107c4d
 8107b84:	08107c4d 	.word	0x08107c4d
 8107b88:	08107c4d 	.word	0x08107c4d
 8107b8c:	08107c4d 	.word	0x08107c4d
 8107b90:	08107c4d 	.word	0x08107c4d
 8107b94:	08107c4d 	.word	0x08107c4d
 8107b98:	08107c25 	.word	0x08107c25
 8107b9c:	08107c4d 	.word	0x08107c4d
 8107ba0:	08107c4d 	.word	0x08107c4d
 8107ba4:	08107c4d 	.word	0x08107c4d
 8107ba8:	08107c4d 	.word	0x08107c4d
 8107bac:	08107c4d 	.word	0x08107c4d
 8107bb0:	08107c4d 	.word	0x08107c4d
 8107bb4:	08107c4d 	.word	0x08107c4d
 8107bb8:	08107c2d 	.word	0x08107c2d
 8107bbc:	08107c4d 	.word	0x08107c4d
 8107bc0:	08107c4d 	.word	0x08107c4d
 8107bc4:	08107c4d 	.word	0x08107c4d
 8107bc8:	08107c4d 	.word	0x08107c4d
 8107bcc:	08107c4d 	.word	0x08107c4d
 8107bd0:	08107c4d 	.word	0x08107c4d
 8107bd4:	08107c4d 	.word	0x08107c4d
 8107bd8:	08107c35 	.word	0x08107c35
 8107bdc:	08107c4d 	.word	0x08107c4d
 8107be0:	08107c4d 	.word	0x08107c4d
 8107be4:	08107c4d 	.word	0x08107c4d
 8107be8:	08107c4d 	.word	0x08107c4d
 8107bec:	08107c4d 	.word	0x08107c4d
 8107bf0:	08107c4d 	.word	0x08107c4d
 8107bf4:	08107c4d 	.word	0x08107c4d
 8107bf8:	08107c3d 	.word	0x08107c3d
 8107bfc:	08107c4d 	.word	0x08107c4d
 8107c00:	08107c4d 	.word	0x08107c4d
 8107c04:	08107c4d 	.word	0x08107c4d
 8107c08:	08107c4d 	.word	0x08107c4d
 8107c0c:	08107c4d 	.word	0x08107c4d
 8107c10:	08107c4d 	.word	0x08107c4d
 8107c14:	08107c4d 	.word	0x08107c4d
 8107c18:	08107c45 	.word	0x08107c45
 8107c1c:	2301      	movs	r3, #1
 8107c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c22:	e231      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c24:	2304      	movs	r3, #4
 8107c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c2a:	e22d      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c2c:	2308      	movs	r3, #8
 8107c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c32:	e229      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c34:	2310      	movs	r3, #16
 8107c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c3a:	e225      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c3c:	2320      	movs	r3, #32
 8107c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c42:	e221      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c44:	2340      	movs	r3, #64	; 0x40
 8107c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c4a:	e21d      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c4c:	2380      	movs	r3, #128	; 0x80
 8107c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c52:	bf00      	nop
 8107c54:	e218      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c56:	687b      	ldr	r3, [r7, #4]
 8107c58:	681b      	ldr	r3, [r3, #0]
 8107c5a:	4a6c      	ldr	r2, [pc, #432]	; (8107e0c <UART_SetConfig+0x354>)
 8107c5c:	4293      	cmp	r3, r2
 8107c5e:	d132      	bne.n	8107cc6 <UART_SetConfig+0x20e>
 8107c60:	4b69      	ldr	r3, [pc, #420]	; (8107e08 <UART_SetConfig+0x350>)
 8107c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107c64:	f003 0307 	and.w	r3, r3, #7
 8107c68:	2b05      	cmp	r3, #5
 8107c6a:	d827      	bhi.n	8107cbc <UART_SetConfig+0x204>
 8107c6c:	a201      	add	r2, pc, #4	; (adr r2, 8107c74 <UART_SetConfig+0x1bc>)
 8107c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c72:	bf00      	nop
 8107c74:	08107c8d 	.word	0x08107c8d
 8107c78:	08107c95 	.word	0x08107c95
 8107c7c:	08107c9d 	.word	0x08107c9d
 8107c80:	08107ca5 	.word	0x08107ca5
 8107c84:	08107cad 	.word	0x08107cad
 8107c88:	08107cb5 	.word	0x08107cb5
 8107c8c:	2300      	movs	r3, #0
 8107c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c92:	e1f9      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c94:	2304      	movs	r3, #4
 8107c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107c9a:	e1f5      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107c9c:	2308      	movs	r3, #8
 8107c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ca2:	e1f1      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107ca4:	2310      	movs	r3, #16
 8107ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107caa:	e1ed      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107cac:	2320      	movs	r3, #32
 8107cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107cb2:	e1e9      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107cb4:	2340      	movs	r3, #64	; 0x40
 8107cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107cba:	e1e5      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107cbc:	2380      	movs	r3, #128	; 0x80
 8107cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107cc2:	bf00      	nop
 8107cc4:	e1e0      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	681b      	ldr	r3, [r3, #0]
 8107cca:	4a51      	ldr	r2, [pc, #324]	; (8107e10 <UART_SetConfig+0x358>)
 8107ccc:	4293      	cmp	r3, r2
 8107cce:	d132      	bne.n	8107d36 <UART_SetConfig+0x27e>
 8107cd0:	4b4d      	ldr	r3, [pc, #308]	; (8107e08 <UART_SetConfig+0x350>)
 8107cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107cd4:	f003 0307 	and.w	r3, r3, #7
 8107cd8:	2b05      	cmp	r3, #5
 8107cda:	d827      	bhi.n	8107d2c <UART_SetConfig+0x274>
 8107cdc:	a201      	add	r2, pc, #4	; (adr r2, 8107ce4 <UART_SetConfig+0x22c>)
 8107cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107ce2:	bf00      	nop
 8107ce4:	08107cfd 	.word	0x08107cfd
 8107ce8:	08107d05 	.word	0x08107d05
 8107cec:	08107d0d 	.word	0x08107d0d
 8107cf0:	08107d15 	.word	0x08107d15
 8107cf4:	08107d1d 	.word	0x08107d1d
 8107cf8:	08107d25 	.word	0x08107d25
 8107cfc:	2300      	movs	r3, #0
 8107cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d02:	e1c1      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d04:	2304      	movs	r3, #4
 8107d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d0a:	e1bd      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d0c:	2308      	movs	r3, #8
 8107d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d12:	e1b9      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d14:	2310      	movs	r3, #16
 8107d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d1a:	e1b5      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d1c:	2320      	movs	r3, #32
 8107d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d22:	e1b1      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d24:	2340      	movs	r3, #64	; 0x40
 8107d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d2a:	e1ad      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d2c:	2380      	movs	r3, #128	; 0x80
 8107d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d32:	bf00      	nop
 8107d34:	e1a8      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	681b      	ldr	r3, [r3, #0]
 8107d3a:	4a36      	ldr	r2, [pc, #216]	; (8107e14 <UART_SetConfig+0x35c>)
 8107d3c:	4293      	cmp	r3, r2
 8107d3e:	d132      	bne.n	8107da6 <UART_SetConfig+0x2ee>
 8107d40:	4b31      	ldr	r3, [pc, #196]	; (8107e08 <UART_SetConfig+0x350>)
 8107d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107d44:	f003 0307 	and.w	r3, r3, #7
 8107d48:	2b05      	cmp	r3, #5
 8107d4a:	d827      	bhi.n	8107d9c <UART_SetConfig+0x2e4>
 8107d4c:	a201      	add	r2, pc, #4	; (adr r2, 8107d54 <UART_SetConfig+0x29c>)
 8107d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107d52:	bf00      	nop
 8107d54:	08107d6d 	.word	0x08107d6d
 8107d58:	08107d75 	.word	0x08107d75
 8107d5c:	08107d7d 	.word	0x08107d7d
 8107d60:	08107d85 	.word	0x08107d85
 8107d64:	08107d8d 	.word	0x08107d8d
 8107d68:	08107d95 	.word	0x08107d95
 8107d6c:	2300      	movs	r3, #0
 8107d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d72:	e189      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d74:	2304      	movs	r3, #4
 8107d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d7a:	e185      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d7c:	2308      	movs	r3, #8
 8107d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d82:	e181      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d84:	2310      	movs	r3, #16
 8107d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d8a:	e17d      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d8c:	2320      	movs	r3, #32
 8107d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d92:	e179      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d94:	2340      	movs	r3, #64	; 0x40
 8107d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107d9a:	e175      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107d9c:	2380      	movs	r3, #128	; 0x80
 8107d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107da2:	bf00      	nop
 8107da4:	e170      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107da6:	687b      	ldr	r3, [r7, #4]
 8107da8:	681b      	ldr	r3, [r3, #0]
 8107daa:	4a1b      	ldr	r2, [pc, #108]	; (8107e18 <UART_SetConfig+0x360>)
 8107dac:	4293      	cmp	r3, r2
 8107dae:	d142      	bne.n	8107e36 <UART_SetConfig+0x37e>
 8107db0:	4b15      	ldr	r3, [pc, #84]	; (8107e08 <UART_SetConfig+0x350>)
 8107db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107db4:	f003 0307 	and.w	r3, r3, #7
 8107db8:	2b05      	cmp	r3, #5
 8107dba:	d837      	bhi.n	8107e2c <UART_SetConfig+0x374>
 8107dbc:	a201      	add	r2, pc, #4	; (adr r2, 8107dc4 <UART_SetConfig+0x30c>)
 8107dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107dc2:	bf00      	nop
 8107dc4:	08107ddd 	.word	0x08107ddd
 8107dc8:	08107de5 	.word	0x08107de5
 8107dcc:	08107ded 	.word	0x08107ded
 8107dd0:	08107df5 	.word	0x08107df5
 8107dd4:	08107e1d 	.word	0x08107e1d
 8107dd8:	08107e25 	.word	0x08107e25
 8107ddc:	2300      	movs	r3, #0
 8107dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107de2:	e151      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107de4:	2304      	movs	r3, #4
 8107de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107dea:	e14d      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107dec:	2308      	movs	r3, #8
 8107dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107df2:	e149      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107df4:	2310      	movs	r3, #16
 8107df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107dfa:	e145      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107dfc:	cfff69f3 	.word	0xcfff69f3
 8107e00:	58000c00 	.word	0x58000c00
 8107e04:	40011000 	.word	0x40011000
 8107e08:	58024400 	.word	0x58024400
 8107e0c:	40004400 	.word	0x40004400
 8107e10:	40004800 	.word	0x40004800
 8107e14:	40004c00 	.word	0x40004c00
 8107e18:	40005000 	.word	0x40005000
 8107e1c:	2320      	movs	r3, #32
 8107e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107e22:	e131      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107e24:	2340      	movs	r3, #64	; 0x40
 8107e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107e2a:	e12d      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107e2c:	2380      	movs	r3, #128	; 0x80
 8107e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107e32:	bf00      	nop
 8107e34:	e128      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107e36:	687b      	ldr	r3, [r7, #4]
 8107e38:	681b      	ldr	r3, [r3, #0]
 8107e3a:	4ab6      	ldr	r2, [pc, #728]	; (8108114 <UART_SetConfig+0x65c>)
 8107e3c:	4293      	cmp	r3, r2
 8107e3e:	d178      	bne.n	8107f32 <UART_SetConfig+0x47a>
 8107e40:	4bb5      	ldr	r3, [pc, #724]	; (8108118 <UART_SetConfig+0x660>)
 8107e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107e48:	2b28      	cmp	r3, #40	; 0x28
 8107e4a:	d86d      	bhi.n	8107f28 <UART_SetConfig+0x470>
 8107e4c:	a201      	add	r2, pc, #4	; (adr r2, 8107e54 <UART_SetConfig+0x39c>)
 8107e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107e52:	bf00      	nop
 8107e54:	08107ef9 	.word	0x08107ef9
 8107e58:	08107f29 	.word	0x08107f29
 8107e5c:	08107f29 	.word	0x08107f29
 8107e60:	08107f29 	.word	0x08107f29
 8107e64:	08107f29 	.word	0x08107f29
 8107e68:	08107f29 	.word	0x08107f29
 8107e6c:	08107f29 	.word	0x08107f29
 8107e70:	08107f29 	.word	0x08107f29
 8107e74:	08107f01 	.word	0x08107f01
 8107e78:	08107f29 	.word	0x08107f29
 8107e7c:	08107f29 	.word	0x08107f29
 8107e80:	08107f29 	.word	0x08107f29
 8107e84:	08107f29 	.word	0x08107f29
 8107e88:	08107f29 	.word	0x08107f29
 8107e8c:	08107f29 	.word	0x08107f29
 8107e90:	08107f29 	.word	0x08107f29
 8107e94:	08107f09 	.word	0x08107f09
 8107e98:	08107f29 	.word	0x08107f29
 8107e9c:	08107f29 	.word	0x08107f29
 8107ea0:	08107f29 	.word	0x08107f29
 8107ea4:	08107f29 	.word	0x08107f29
 8107ea8:	08107f29 	.word	0x08107f29
 8107eac:	08107f29 	.word	0x08107f29
 8107eb0:	08107f29 	.word	0x08107f29
 8107eb4:	08107f11 	.word	0x08107f11
 8107eb8:	08107f29 	.word	0x08107f29
 8107ebc:	08107f29 	.word	0x08107f29
 8107ec0:	08107f29 	.word	0x08107f29
 8107ec4:	08107f29 	.word	0x08107f29
 8107ec8:	08107f29 	.word	0x08107f29
 8107ecc:	08107f29 	.word	0x08107f29
 8107ed0:	08107f29 	.word	0x08107f29
 8107ed4:	08107f19 	.word	0x08107f19
 8107ed8:	08107f29 	.word	0x08107f29
 8107edc:	08107f29 	.word	0x08107f29
 8107ee0:	08107f29 	.word	0x08107f29
 8107ee4:	08107f29 	.word	0x08107f29
 8107ee8:	08107f29 	.word	0x08107f29
 8107eec:	08107f29 	.word	0x08107f29
 8107ef0:	08107f29 	.word	0x08107f29
 8107ef4:	08107f21 	.word	0x08107f21
 8107ef8:	2301      	movs	r3, #1
 8107efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107efe:	e0c3      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f00:	2304      	movs	r3, #4
 8107f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f06:	e0bf      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f08:	2308      	movs	r3, #8
 8107f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f0e:	e0bb      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f10:	2310      	movs	r3, #16
 8107f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f16:	e0b7      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f18:	2320      	movs	r3, #32
 8107f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f1e:	e0b3      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f20:	2340      	movs	r3, #64	; 0x40
 8107f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f26:	e0af      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f28:	2380      	movs	r3, #128	; 0x80
 8107f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f2e:	bf00      	nop
 8107f30:	e0aa      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f32:	687b      	ldr	r3, [r7, #4]
 8107f34:	681b      	ldr	r3, [r3, #0]
 8107f36:	4a79      	ldr	r2, [pc, #484]	; (810811c <UART_SetConfig+0x664>)
 8107f38:	4293      	cmp	r3, r2
 8107f3a:	d132      	bne.n	8107fa2 <UART_SetConfig+0x4ea>
 8107f3c:	4b76      	ldr	r3, [pc, #472]	; (8108118 <UART_SetConfig+0x660>)
 8107f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107f40:	f003 0307 	and.w	r3, r3, #7
 8107f44:	2b05      	cmp	r3, #5
 8107f46:	d827      	bhi.n	8107f98 <UART_SetConfig+0x4e0>
 8107f48:	a201      	add	r2, pc, #4	; (adr r2, 8107f50 <UART_SetConfig+0x498>)
 8107f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f4e:	bf00      	nop
 8107f50:	08107f69 	.word	0x08107f69
 8107f54:	08107f71 	.word	0x08107f71
 8107f58:	08107f79 	.word	0x08107f79
 8107f5c:	08107f81 	.word	0x08107f81
 8107f60:	08107f89 	.word	0x08107f89
 8107f64:	08107f91 	.word	0x08107f91
 8107f68:	2300      	movs	r3, #0
 8107f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f6e:	e08b      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f70:	2304      	movs	r3, #4
 8107f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f76:	e087      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f78:	2308      	movs	r3, #8
 8107f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f7e:	e083      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f80:	2310      	movs	r3, #16
 8107f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f86:	e07f      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f88:	2320      	movs	r3, #32
 8107f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f8e:	e07b      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f90:	2340      	movs	r3, #64	; 0x40
 8107f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f96:	e077      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107f98:	2380      	movs	r3, #128	; 0x80
 8107f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107f9e:	bf00      	nop
 8107fa0:	e072      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	681b      	ldr	r3, [r3, #0]
 8107fa6:	4a5e      	ldr	r2, [pc, #376]	; (8108120 <UART_SetConfig+0x668>)
 8107fa8:	4293      	cmp	r3, r2
 8107faa:	d132      	bne.n	8108012 <UART_SetConfig+0x55a>
 8107fac:	4b5a      	ldr	r3, [pc, #360]	; (8108118 <UART_SetConfig+0x660>)
 8107fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107fb0:	f003 0307 	and.w	r3, r3, #7
 8107fb4:	2b05      	cmp	r3, #5
 8107fb6:	d827      	bhi.n	8108008 <UART_SetConfig+0x550>
 8107fb8:	a201      	add	r2, pc, #4	; (adr r2, 8107fc0 <UART_SetConfig+0x508>)
 8107fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107fbe:	bf00      	nop
 8107fc0:	08107fd9 	.word	0x08107fd9
 8107fc4:	08107fe1 	.word	0x08107fe1
 8107fc8:	08107fe9 	.word	0x08107fe9
 8107fcc:	08107ff1 	.word	0x08107ff1
 8107fd0:	08107ff9 	.word	0x08107ff9
 8107fd4:	08108001 	.word	0x08108001
 8107fd8:	2300      	movs	r3, #0
 8107fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107fde:	e053      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107fe0:	2304      	movs	r3, #4
 8107fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107fe6:	e04f      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107fe8:	2308      	movs	r3, #8
 8107fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107fee:	e04b      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107ff0:	2310      	movs	r3, #16
 8107ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ff6:	e047      	b.n	8108088 <UART_SetConfig+0x5d0>
 8107ff8:	2320      	movs	r3, #32
 8107ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ffe:	e043      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108000:	2340      	movs	r3, #64	; 0x40
 8108002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108006:	e03f      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108008:	2380      	movs	r3, #128	; 0x80
 810800a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810800e:	bf00      	nop
 8108010:	e03a      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	4a43      	ldr	r2, [pc, #268]	; (8108124 <UART_SetConfig+0x66c>)
 8108018:	4293      	cmp	r3, r2
 810801a:	d132      	bne.n	8108082 <UART_SetConfig+0x5ca>
 810801c:	4b3e      	ldr	r3, [pc, #248]	; (8108118 <UART_SetConfig+0x660>)
 810801e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108020:	f003 0307 	and.w	r3, r3, #7
 8108024:	2b05      	cmp	r3, #5
 8108026:	d827      	bhi.n	8108078 <UART_SetConfig+0x5c0>
 8108028:	a201      	add	r2, pc, #4	; (adr r2, 8108030 <UART_SetConfig+0x578>)
 810802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810802e:	bf00      	nop
 8108030:	08108049 	.word	0x08108049
 8108034:	08108051 	.word	0x08108051
 8108038:	08108059 	.word	0x08108059
 810803c:	08108061 	.word	0x08108061
 8108040:	08108069 	.word	0x08108069
 8108044:	08108071 	.word	0x08108071
 8108048:	2302      	movs	r3, #2
 810804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810804e:	e01b      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108050:	2304      	movs	r3, #4
 8108052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108056:	e017      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108058:	2308      	movs	r3, #8
 810805a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810805e:	e013      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108060:	2310      	movs	r3, #16
 8108062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108066:	e00f      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108068:	2320      	movs	r3, #32
 810806a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810806e:	e00b      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108070:	2340      	movs	r3, #64	; 0x40
 8108072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108076:	e007      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108078:	2380      	movs	r3, #128	; 0x80
 810807a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810807e:	bf00      	nop
 8108080:	e002      	b.n	8108088 <UART_SetConfig+0x5d0>
 8108082:	2380      	movs	r3, #128	; 0x80
 8108084:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	681b      	ldr	r3, [r3, #0]
 810808c:	4a25      	ldr	r2, [pc, #148]	; (8108124 <UART_SetConfig+0x66c>)
 810808e:	4293      	cmp	r3, r2
 8108090:	f040 80b8 	bne.w	8108204 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108098:	2b08      	cmp	r3, #8
 810809a:	d019      	beq.n	81080d0 <UART_SetConfig+0x618>
 810809c:	2b08      	cmp	r3, #8
 810809e:	dc04      	bgt.n	81080aa <UART_SetConfig+0x5f2>
 81080a0:	2b02      	cmp	r3, #2
 81080a2:	d009      	beq.n	81080b8 <UART_SetConfig+0x600>
 81080a4:	2b04      	cmp	r3, #4
 81080a6:	d00b      	beq.n	81080c0 <UART_SetConfig+0x608>
 81080a8:	e042      	b.n	8108130 <UART_SetConfig+0x678>
 81080aa:	2b20      	cmp	r3, #32
 81080ac:	d02b      	beq.n	8108106 <UART_SetConfig+0x64e>
 81080ae:	2b40      	cmp	r3, #64	; 0x40
 81080b0:	d02c      	beq.n	810810c <UART_SetConfig+0x654>
 81080b2:	2b10      	cmp	r3, #16
 81080b4:	d014      	beq.n	81080e0 <UART_SetConfig+0x628>
 81080b6:	e03b      	b.n	8108130 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81080b8:	f7fe fa56 	bl	8106568 <HAL_RCCEx_GetD3PCLK1Freq>
 81080bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81080be:	e03d      	b.n	810813c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81080c0:	f107 0314 	add.w	r3, r7, #20
 81080c4:	4618      	mov	r0, r3
 81080c6:	f7fe fa65 	bl	8106594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81080ca:	69bb      	ldr	r3, [r7, #24]
 81080cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81080ce:	e035      	b.n	810813c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81080d0:	f107 0308 	add.w	r3, r7, #8
 81080d4:	4618      	mov	r0, r3
 81080d6:	f7fe fba9 	bl	810682c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81080da:	68fb      	ldr	r3, [r7, #12]
 81080dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81080de:	e02d      	b.n	810813c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81080e0:	4b0d      	ldr	r3, [pc, #52]	; (8108118 <UART_SetConfig+0x660>)
 81080e2:	681b      	ldr	r3, [r3, #0]
 81080e4:	f003 0320 	and.w	r3, r3, #32
 81080e8:	2b00      	cmp	r3, #0
 81080ea:	d009      	beq.n	8108100 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81080ec:	4b0a      	ldr	r3, [pc, #40]	; (8108118 <UART_SetConfig+0x660>)
 81080ee:	681b      	ldr	r3, [r3, #0]
 81080f0:	08db      	lsrs	r3, r3, #3
 81080f2:	f003 0303 	and.w	r3, r3, #3
 81080f6:	4a0c      	ldr	r2, [pc, #48]	; (8108128 <UART_SetConfig+0x670>)
 81080f8:	fa22 f303 	lsr.w	r3, r2, r3
 81080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81080fe:	e01d      	b.n	810813c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8108100:	4b09      	ldr	r3, [pc, #36]	; (8108128 <UART_SetConfig+0x670>)
 8108102:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108104:	e01a      	b.n	810813c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108106:	4b09      	ldr	r3, [pc, #36]	; (810812c <UART_SetConfig+0x674>)
 8108108:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810810a:	e017      	b.n	810813c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810810c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108110:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108112:	e013      	b.n	810813c <UART_SetConfig+0x684>
 8108114:	40011400 	.word	0x40011400
 8108118:	58024400 	.word	0x58024400
 810811c:	40007800 	.word	0x40007800
 8108120:	40007c00 	.word	0x40007c00
 8108124:	58000c00 	.word	0x58000c00
 8108128:	03d09000 	.word	0x03d09000
 810812c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8108130:	2300      	movs	r3, #0
 8108132:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108134:	2301      	movs	r3, #1
 8108136:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810813a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810813e:	2b00      	cmp	r3, #0
 8108140:	f000 824d 	beq.w	81085de <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108148:	4aad      	ldr	r2, [pc, #692]	; (8108400 <UART_SetConfig+0x948>)
 810814a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810814e:	461a      	mov	r2, r3
 8108150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108152:	fbb3 f3f2 	udiv	r3, r3, r2
 8108156:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108158:	687b      	ldr	r3, [r7, #4]
 810815a:	685a      	ldr	r2, [r3, #4]
 810815c:	4613      	mov	r3, r2
 810815e:	005b      	lsls	r3, r3, #1
 8108160:	4413      	add	r3, r2
 8108162:	6a3a      	ldr	r2, [r7, #32]
 8108164:	429a      	cmp	r2, r3
 8108166:	d305      	bcc.n	8108174 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	685b      	ldr	r3, [r3, #4]
 810816c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810816e:	6a3a      	ldr	r2, [r7, #32]
 8108170:	429a      	cmp	r2, r3
 8108172:	d903      	bls.n	810817c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8108174:	2301      	movs	r3, #1
 8108176:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810817a:	e230      	b.n	81085de <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810817c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810817e:	4618      	mov	r0, r3
 8108180:	f04f 0100 	mov.w	r1, #0
 8108184:	687b      	ldr	r3, [r7, #4]
 8108186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108188:	4a9d      	ldr	r2, [pc, #628]	; (8108400 <UART_SetConfig+0x948>)
 810818a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810818e:	b29b      	uxth	r3, r3
 8108190:	f04f 0400 	mov.w	r4, #0
 8108194:	461a      	mov	r2, r3
 8108196:	4623      	mov	r3, r4
 8108198:	f7f8 fe3e 	bl	8100e18 <__aeabi_uldivmod>
 810819c:	4603      	mov	r3, r0
 810819e:	460c      	mov	r4, r1
 81081a0:	4619      	mov	r1, r3
 81081a2:	4622      	mov	r2, r4
 81081a4:	f04f 0300 	mov.w	r3, #0
 81081a8:	f04f 0400 	mov.w	r4, #0
 81081ac:	0214      	lsls	r4, r2, #8
 81081ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 81081b2:	020b      	lsls	r3, r1, #8
 81081b4:	687a      	ldr	r2, [r7, #4]
 81081b6:	6852      	ldr	r2, [r2, #4]
 81081b8:	0852      	lsrs	r2, r2, #1
 81081ba:	4611      	mov	r1, r2
 81081bc:	f04f 0200 	mov.w	r2, #0
 81081c0:	eb13 0b01 	adds.w	fp, r3, r1
 81081c4:	eb44 0c02 	adc.w	ip, r4, r2
 81081c8:	4658      	mov	r0, fp
 81081ca:	4661      	mov	r1, ip
 81081cc:	687b      	ldr	r3, [r7, #4]
 81081ce:	685b      	ldr	r3, [r3, #4]
 81081d0:	f04f 0400 	mov.w	r4, #0
 81081d4:	461a      	mov	r2, r3
 81081d6:	4623      	mov	r3, r4
 81081d8:	f7f8 fe1e 	bl	8100e18 <__aeabi_uldivmod>
 81081dc:	4603      	mov	r3, r0
 81081de:	460c      	mov	r4, r1
 81081e0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81081e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81081e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81081e8:	d308      	bcc.n	81081fc <UART_SetConfig+0x744>
 81081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81081ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81081f0:	d204      	bcs.n	81081fc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 81081f2:	687b      	ldr	r3, [r7, #4]
 81081f4:	681b      	ldr	r3, [r3, #0]
 81081f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81081f8:	60da      	str	r2, [r3, #12]
 81081fa:	e1f0      	b.n	81085de <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 81081fc:	2301      	movs	r3, #1
 81081fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8108202:	e1ec      	b.n	81085de <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108204:	687b      	ldr	r3, [r7, #4]
 8108206:	69db      	ldr	r3, [r3, #28]
 8108208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810820c:	f040 8100 	bne.w	8108410 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8108210:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108214:	2b40      	cmp	r3, #64	; 0x40
 8108216:	f200 80b7 	bhi.w	8108388 <UART_SetConfig+0x8d0>
 810821a:	a201      	add	r2, pc, #4	; (adr r2, 8108220 <UART_SetConfig+0x768>)
 810821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108220:	08108325 	.word	0x08108325
 8108224:	0810832d 	.word	0x0810832d
 8108228:	08108389 	.word	0x08108389
 810822c:	08108389 	.word	0x08108389
 8108230:	08108335 	.word	0x08108335
 8108234:	08108389 	.word	0x08108389
 8108238:	08108389 	.word	0x08108389
 810823c:	08108389 	.word	0x08108389
 8108240:	08108345 	.word	0x08108345
 8108244:	08108389 	.word	0x08108389
 8108248:	08108389 	.word	0x08108389
 810824c:	08108389 	.word	0x08108389
 8108250:	08108389 	.word	0x08108389
 8108254:	08108389 	.word	0x08108389
 8108258:	08108389 	.word	0x08108389
 810825c:	08108389 	.word	0x08108389
 8108260:	08108355 	.word	0x08108355
 8108264:	08108389 	.word	0x08108389
 8108268:	08108389 	.word	0x08108389
 810826c:	08108389 	.word	0x08108389
 8108270:	08108389 	.word	0x08108389
 8108274:	08108389 	.word	0x08108389
 8108278:	08108389 	.word	0x08108389
 810827c:	08108389 	.word	0x08108389
 8108280:	08108389 	.word	0x08108389
 8108284:	08108389 	.word	0x08108389
 8108288:	08108389 	.word	0x08108389
 810828c:	08108389 	.word	0x08108389
 8108290:	08108389 	.word	0x08108389
 8108294:	08108389 	.word	0x08108389
 8108298:	08108389 	.word	0x08108389
 810829c:	08108389 	.word	0x08108389
 81082a0:	0810837b 	.word	0x0810837b
 81082a4:	08108389 	.word	0x08108389
 81082a8:	08108389 	.word	0x08108389
 81082ac:	08108389 	.word	0x08108389
 81082b0:	08108389 	.word	0x08108389
 81082b4:	08108389 	.word	0x08108389
 81082b8:	08108389 	.word	0x08108389
 81082bc:	08108389 	.word	0x08108389
 81082c0:	08108389 	.word	0x08108389
 81082c4:	08108389 	.word	0x08108389
 81082c8:	08108389 	.word	0x08108389
 81082cc:	08108389 	.word	0x08108389
 81082d0:	08108389 	.word	0x08108389
 81082d4:	08108389 	.word	0x08108389
 81082d8:	08108389 	.word	0x08108389
 81082dc:	08108389 	.word	0x08108389
 81082e0:	08108389 	.word	0x08108389
 81082e4:	08108389 	.word	0x08108389
 81082e8:	08108389 	.word	0x08108389
 81082ec:	08108389 	.word	0x08108389
 81082f0:	08108389 	.word	0x08108389
 81082f4:	08108389 	.word	0x08108389
 81082f8:	08108389 	.word	0x08108389
 81082fc:	08108389 	.word	0x08108389
 8108300:	08108389 	.word	0x08108389
 8108304:	08108389 	.word	0x08108389
 8108308:	08108389 	.word	0x08108389
 810830c:	08108389 	.word	0x08108389
 8108310:	08108389 	.word	0x08108389
 8108314:	08108389 	.word	0x08108389
 8108318:	08108389 	.word	0x08108389
 810831c:	08108389 	.word	0x08108389
 8108320:	08108381 	.word	0x08108381
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108324:	f7fe f8b2 	bl	810648c <HAL_RCC_GetPCLK1Freq>
 8108328:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810832a:	e033      	b.n	8108394 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810832c:	f7fe f8c4 	bl	81064b8 <HAL_RCC_GetPCLK2Freq>
 8108330:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108332:	e02f      	b.n	8108394 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108334:	f107 0314 	add.w	r3, r7, #20
 8108338:	4618      	mov	r0, r3
 810833a:	f7fe f92b 	bl	8106594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810833e:	69bb      	ldr	r3, [r7, #24]
 8108340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108342:	e027      	b.n	8108394 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108344:	f107 0308 	add.w	r3, r7, #8
 8108348:	4618      	mov	r0, r3
 810834a:	f7fe fa6f 	bl	810682c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810834e:	68fb      	ldr	r3, [r7, #12]
 8108350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108352:	e01f      	b.n	8108394 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108354:	4b2b      	ldr	r3, [pc, #172]	; (8108404 <UART_SetConfig+0x94c>)
 8108356:	681b      	ldr	r3, [r3, #0]
 8108358:	f003 0320 	and.w	r3, r3, #32
 810835c:	2b00      	cmp	r3, #0
 810835e:	d009      	beq.n	8108374 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108360:	4b28      	ldr	r3, [pc, #160]	; (8108404 <UART_SetConfig+0x94c>)
 8108362:	681b      	ldr	r3, [r3, #0]
 8108364:	08db      	lsrs	r3, r3, #3
 8108366:	f003 0303 	and.w	r3, r3, #3
 810836a:	4a27      	ldr	r2, [pc, #156]	; (8108408 <UART_SetConfig+0x950>)
 810836c:	fa22 f303 	lsr.w	r3, r2, r3
 8108370:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108372:	e00f      	b.n	8108394 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8108374:	4b24      	ldr	r3, [pc, #144]	; (8108408 <UART_SetConfig+0x950>)
 8108376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108378:	e00c      	b.n	8108394 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810837a:	4b24      	ldr	r3, [pc, #144]	; (810840c <UART_SetConfig+0x954>)
 810837c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810837e:	e009      	b.n	8108394 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108384:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108386:	e005      	b.n	8108394 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8108388:	2300      	movs	r3, #0
 810838a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810838c:	2301      	movs	r3, #1
 810838e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108396:	2b00      	cmp	r3, #0
 8108398:	f000 8121 	beq.w	81085de <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810839c:	687b      	ldr	r3, [r7, #4]
 810839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81083a0:	4a17      	ldr	r2, [pc, #92]	; (8108400 <UART_SetConfig+0x948>)
 81083a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81083a6:	461a      	mov	r2, r3
 81083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81083aa:	fbb3 f3f2 	udiv	r3, r3, r2
 81083ae:	005a      	lsls	r2, r3, #1
 81083b0:	687b      	ldr	r3, [r7, #4]
 81083b2:	685b      	ldr	r3, [r3, #4]
 81083b4:	085b      	lsrs	r3, r3, #1
 81083b6:	441a      	add	r2, r3
 81083b8:	687b      	ldr	r3, [r7, #4]
 81083ba:	685b      	ldr	r3, [r3, #4]
 81083bc:	fbb2 f3f3 	udiv	r3, r2, r3
 81083c0:	b29b      	uxth	r3, r3
 81083c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81083c6:	2b0f      	cmp	r3, #15
 81083c8:	d916      	bls.n	81083f8 <UART_SetConfig+0x940>
 81083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81083cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81083d0:	d212      	bcs.n	81083f8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81083d4:	b29b      	uxth	r3, r3
 81083d6:	f023 030f 	bic.w	r3, r3, #15
 81083da:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81083de:	085b      	lsrs	r3, r3, #1
 81083e0:	b29b      	uxth	r3, r3
 81083e2:	f003 0307 	and.w	r3, r3, #7
 81083e6:	b29a      	uxth	r2, r3
 81083e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81083ea:	4313      	orrs	r3, r2
 81083ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 81083ee:	687b      	ldr	r3, [r7, #4]
 81083f0:	681b      	ldr	r3, [r3, #0]
 81083f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81083f4:	60da      	str	r2, [r3, #12]
 81083f6:	e0f2      	b.n	81085de <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 81083f8:	2301      	movs	r3, #1
 81083fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81083fe:	e0ee      	b.n	81085de <UART_SetConfig+0xb26>
 8108400:	08113ff4 	.word	0x08113ff4
 8108404:	58024400 	.word	0x58024400
 8108408:	03d09000 	.word	0x03d09000
 810840c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8108410:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108414:	2b40      	cmp	r3, #64	; 0x40
 8108416:	f200 80b7 	bhi.w	8108588 <UART_SetConfig+0xad0>
 810841a:	a201      	add	r2, pc, #4	; (adr r2, 8108420 <UART_SetConfig+0x968>)
 810841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108420:	08108525 	.word	0x08108525
 8108424:	0810852d 	.word	0x0810852d
 8108428:	08108589 	.word	0x08108589
 810842c:	08108589 	.word	0x08108589
 8108430:	08108535 	.word	0x08108535
 8108434:	08108589 	.word	0x08108589
 8108438:	08108589 	.word	0x08108589
 810843c:	08108589 	.word	0x08108589
 8108440:	08108545 	.word	0x08108545
 8108444:	08108589 	.word	0x08108589
 8108448:	08108589 	.word	0x08108589
 810844c:	08108589 	.word	0x08108589
 8108450:	08108589 	.word	0x08108589
 8108454:	08108589 	.word	0x08108589
 8108458:	08108589 	.word	0x08108589
 810845c:	08108589 	.word	0x08108589
 8108460:	08108555 	.word	0x08108555
 8108464:	08108589 	.word	0x08108589
 8108468:	08108589 	.word	0x08108589
 810846c:	08108589 	.word	0x08108589
 8108470:	08108589 	.word	0x08108589
 8108474:	08108589 	.word	0x08108589
 8108478:	08108589 	.word	0x08108589
 810847c:	08108589 	.word	0x08108589
 8108480:	08108589 	.word	0x08108589
 8108484:	08108589 	.word	0x08108589
 8108488:	08108589 	.word	0x08108589
 810848c:	08108589 	.word	0x08108589
 8108490:	08108589 	.word	0x08108589
 8108494:	08108589 	.word	0x08108589
 8108498:	08108589 	.word	0x08108589
 810849c:	08108589 	.word	0x08108589
 81084a0:	0810857b 	.word	0x0810857b
 81084a4:	08108589 	.word	0x08108589
 81084a8:	08108589 	.word	0x08108589
 81084ac:	08108589 	.word	0x08108589
 81084b0:	08108589 	.word	0x08108589
 81084b4:	08108589 	.word	0x08108589
 81084b8:	08108589 	.word	0x08108589
 81084bc:	08108589 	.word	0x08108589
 81084c0:	08108589 	.word	0x08108589
 81084c4:	08108589 	.word	0x08108589
 81084c8:	08108589 	.word	0x08108589
 81084cc:	08108589 	.word	0x08108589
 81084d0:	08108589 	.word	0x08108589
 81084d4:	08108589 	.word	0x08108589
 81084d8:	08108589 	.word	0x08108589
 81084dc:	08108589 	.word	0x08108589
 81084e0:	08108589 	.word	0x08108589
 81084e4:	08108589 	.word	0x08108589
 81084e8:	08108589 	.word	0x08108589
 81084ec:	08108589 	.word	0x08108589
 81084f0:	08108589 	.word	0x08108589
 81084f4:	08108589 	.word	0x08108589
 81084f8:	08108589 	.word	0x08108589
 81084fc:	08108589 	.word	0x08108589
 8108500:	08108589 	.word	0x08108589
 8108504:	08108589 	.word	0x08108589
 8108508:	08108589 	.word	0x08108589
 810850c:	08108589 	.word	0x08108589
 8108510:	08108589 	.word	0x08108589
 8108514:	08108589 	.word	0x08108589
 8108518:	08108589 	.word	0x08108589
 810851c:	08108589 	.word	0x08108589
 8108520:	08108581 	.word	0x08108581
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108524:	f7fd ffb2 	bl	810648c <HAL_RCC_GetPCLK1Freq>
 8108528:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810852a:	e033      	b.n	8108594 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810852c:	f7fd ffc4 	bl	81064b8 <HAL_RCC_GetPCLK2Freq>
 8108530:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108532:	e02f      	b.n	8108594 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108534:	f107 0314 	add.w	r3, r7, #20
 8108538:	4618      	mov	r0, r3
 810853a:	f7fe f82b 	bl	8106594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810853e:	69bb      	ldr	r3, [r7, #24]
 8108540:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108542:	e027      	b.n	8108594 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108544:	f107 0308 	add.w	r3, r7, #8
 8108548:	4618      	mov	r0, r3
 810854a:	f7fe f96f 	bl	810682c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810854e:	68fb      	ldr	r3, [r7, #12]
 8108550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108552:	e01f      	b.n	8108594 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108554:	4b2c      	ldr	r3, [pc, #176]	; (8108608 <UART_SetConfig+0xb50>)
 8108556:	681b      	ldr	r3, [r3, #0]
 8108558:	f003 0320 	and.w	r3, r3, #32
 810855c:	2b00      	cmp	r3, #0
 810855e:	d009      	beq.n	8108574 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108560:	4b29      	ldr	r3, [pc, #164]	; (8108608 <UART_SetConfig+0xb50>)
 8108562:	681b      	ldr	r3, [r3, #0]
 8108564:	08db      	lsrs	r3, r3, #3
 8108566:	f003 0303 	and.w	r3, r3, #3
 810856a:	4a28      	ldr	r2, [pc, #160]	; (810860c <UART_SetConfig+0xb54>)
 810856c:	fa22 f303 	lsr.w	r3, r2, r3
 8108570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108572:	e00f      	b.n	8108594 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8108574:	4b25      	ldr	r3, [pc, #148]	; (810860c <UART_SetConfig+0xb54>)
 8108576:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108578:	e00c      	b.n	8108594 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810857a:	4b25      	ldr	r3, [pc, #148]	; (8108610 <UART_SetConfig+0xb58>)
 810857c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810857e:	e009      	b.n	8108594 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108584:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108586:	e005      	b.n	8108594 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8108588:	2300      	movs	r3, #0
 810858a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810858c:	2301      	movs	r3, #1
 810858e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108592:	bf00      	nop
    }

    if (pclk != 0U)
 8108594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108596:	2b00      	cmp	r3, #0
 8108598:	d021      	beq.n	81085de <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810859a:	687b      	ldr	r3, [r7, #4]
 810859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810859e:	4a1d      	ldr	r2, [pc, #116]	; (8108614 <UART_SetConfig+0xb5c>)
 81085a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81085a4:	461a      	mov	r2, r3
 81085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81085a8:	fbb3 f2f2 	udiv	r2, r3, r2
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	685b      	ldr	r3, [r3, #4]
 81085b0:	085b      	lsrs	r3, r3, #1
 81085b2:	441a      	add	r2, r3
 81085b4:	687b      	ldr	r3, [r7, #4]
 81085b6:	685b      	ldr	r3, [r3, #4]
 81085b8:	fbb2 f3f3 	udiv	r3, r2, r3
 81085bc:	b29b      	uxth	r3, r3
 81085be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81085c2:	2b0f      	cmp	r3, #15
 81085c4:	d908      	bls.n	81085d8 <UART_SetConfig+0xb20>
 81085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81085c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81085cc:	d204      	bcs.n	81085d8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 81085ce:	687b      	ldr	r3, [r7, #4]
 81085d0:	681b      	ldr	r3, [r3, #0]
 81085d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81085d4:	60da      	str	r2, [r3, #12]
 81085d6:	e002      	b.n	81085de <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 81085d8:	2301      	movs	r3, #1
 81085da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	2201      	movs	r2, #1
 81085e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81085e6:	687b      	ldr	r3, [r7, #4]
 81085e8:	2201      	movs	r2, #1
 81085ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81085ee:	687b      	ldr	r3, [r7, #4]
 81085f0:	2200      	movs	r2, #0
 81085f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 81085f4:	687b      	ldr	r3, [r7, #4]
 81085f6:	2200      	movs	r2, #0
 81085f8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 81085fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 81085fe:	4618      	mov	r0, r3
 8108600:	3738      	adds	r7, #56	; 0x38
 8108602:	46bd      	mov	sp, r7
 8108604:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8108608:	58024400 	.word	0x58024400
 810860c:	03d09000 	.word	0x03d09000
 8108610:	003d0900 	.word	0x003d0900
 8108614:	08113ff4 	.word	0x08113ff4

08108618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108618:	b480      	push	{r7}
 810861a:	b083      	sub	sp, #12
 810861c:	af00      	add	r7, sp, #0
 810861e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108624:	f003 0301 	and.w	r3, r3, #1
 8108628:	2b00      	cmp	r3, #0
 810862a:	d00a      	beq.n	8108642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	685b      	ldr	r3, [r3, #4]
 8108632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108636:	687b      	ldr	r3, [r7, #4]
 8108638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810863a:	687b      	ldr	r3, [r7, #4]
 810863c:	681b      	ldr	r3, [r3, #0]
 810863e:	430a      	orrs	r2, r1
 8108640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108642:	687b      	ldr	r3, [r7, #4]
 8108644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108646:	f003 0302 	and.w	r3, r3, #2
 810864a:	2b00      	cmp	r3, #0
 810864c:	d00a      	beq.n	8108664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810864e:	687b      	ldr	r3, [r7, #4]
 8108650:	681b      	ldr	r3, [r3, #0]
 8108652:	685b      	ldr	r3, [r3, #4]
 8108654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	681b      	ldr	r3, [r3, #0]
 8108660:	430a      	orrs	r2, r1
 8108662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108668:	f003 0304 	and.w	r3, r3, #4
 810866c:	2b00      	cmp	r3, #0
 810866e:	d00a      	beq.n	8108686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108670:	687b      	ldr	r3, [r7, #4]
 8108672:	681b      	ldr	r3, [r3, #0]
 8108674:	685b      	ldr	r3, [r3, #4]
 8108676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810867a:	687b      	ldr	r3, [r7, #4]
 810867c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810867e:	687b      	ldr	r3, [r7, #4]
 8108680:	681b      	ldr	r3, [r3, #0]
 8108682:	430a      	orrs	r2, r1
 8108684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108686:	687b      	ldr	r3, [r7, #4]
 8108688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810868a:	f003 0308 	and.w	r3, r3, #8
 810868e:	2b00      	cmp	r3, #0
 8108690:	d00a      	beq.n	81086a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108692:	687b      	ldr	r3, [r7, #4]
 8108694:	681b      	ldr	r3, [r3, #0]
 8108696:	685b      	ldr	r3, [r3, #4]
 8108698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810869c:	687b      	ldr	r3, [r7, #4]
 810869e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81086a0:	687b      	ldr	r3, [r7, #4]
 81086a2:	681b      	ldr	r3, [r3, #0]
 81086a4:	430a      	orrs	r2, r1
 81086a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81086a8:	687b      	ldr	r3, [r7, #4]
 81086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81086ac:	f003 0310 	and.w	r3, r3, #16
 81086b0:	2b00      	cmp	r3, #0
 81086b2:	d00a      	beq.n	81086ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81086b4:	687b      	ldr	r3, [r7, #4]
 81086b6:	681b      	ldr	r3, [r3, #0]
 81086b8:	689b      	ldr	r3, [r3, #8]
 81086ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81086be:	687b      	ldr	r3, [r7, #4]
 81086c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81086c2:	687b      	ldr	r3, [r7, #4]
 81086c4:	681b      	ldr	r3, [r3, #0]
 81086c6:	430a      	orrs	r2, r1
 81086c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81086ce:	f003 0320 	and.w	r3, r3, #32
 81086d2:	2b00      	cmp	r3, #0
 81086d4:	d00a      	beq.n	81086ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81086d6:	687b      	ldr	r3, [r7, #4]
 81086d8:	681b      	ldr	r3, [r3, #0]
 81086da:	689b      	ldr	r3, [r3, #8]
 81086dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81086e0:	687b      	ldr	r3, [r7, #4]
 81086e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81086e4:	687b      	ldr	r3, [r7, #4]
 81086e6:	681b      	ldr	r3, [r3, #0]
 81086e8:	430a      	orrs	r2, r1
 81086ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81086f4:	2b00      	cmp	r3, #0
 81086f6:	d01a      	beq.n	810872e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81086f8:	687b      	ldr	r3, [r7, #4]
 81086fa:	681b      	ldr	r3, [r3, #0]
 81086fc:	685b      	ldr	r3, [r3, #4]
 81086fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108702:	687b      	ldr	r3, [r7, #4]
 8108704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108706:	687b      	ldr	r3, [r7, #4]
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	430a      	orrs	r2, r1
 810870c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810870e:	687b      	ldr	r3, [r7, #4]
 8108710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108716:	d10a      	bne.n	810872e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	685b      	ldr	r3, [r3, #4]
 810871e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108722:	687b      	ldr	r3, [r7, #4]
 8108724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108726:	687b      	ldr	r3, [r7, #4]
 8108728:	681b      	ldr	r3, [r3, #0]
 810872a:	430a      	orrs	r2, r1
 810872c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108736:	2b00      	cmp	r3, #0
 8108738:	d00a      	beq.n	8108750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810873a:	687b      	ldr	r3, [r7, #4]
 810873c:	681b      	ldr	r3, [r3, #0]
 810873e:	685b      	ldr	r3, [r3, #4]
 8108740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108744:	687b      	ldr	r3, [r7, #4]
 8108746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108748:	687b      	ldr	r3, [r7, #4]
 810874a:	681b      	ldr	r3, [r3, #0]
 810874c:	430a      	orrs	r2, r1
 810874e:	605a      	str	r2, [r3, #4]
  }
}
 8108750:	bf00      	nop
 8108752:	370c      	adds	r7, #12
 8108754:	46bd      	mov	sp, r7
 8108756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810875a:	4770      	bx	lr

0810875c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810875c:	b580      	push	{r7, lr}
 810875e:	b086      	sub	sp, #24
 8108760:	af02      	add	r7, sp, #8
 8108762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108764:	687b      	ldr	r3, [r7, #4]
 8108766:	2200      	movs	r2, #0
 8108768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 810876c:	f7f9 fd94 	bl	8102298 <HAL_GetTick>
 8108770:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108772:	687b      	ldr	r3, [r7, #4]
 8108774:	681b      	ldr	r3, [r3, #0]
 8108776:	681b      	ldr	r3, [r3, #0]
 8108778:	f003 0308 	and.w	r3, r3, #8
 810877c:	2b08      	cmp	r3, #8
 810877e:	d10e      	bne.n	810879e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108784:	9300      	str	r3, [sp, #0]
 8108786:	68fb      	ldr	r3, [r7, #12]
 8108788:	2200      	movs	r2, #0
 810878a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810878e:	6878      	ldr	r0, [r7, #4]
 8108790:	f000 f82c 	bl	81087ec <UART_WaitOnFlagUntilTimeout>
 8108794:	4603      	mov	r3, r0
 8108796:	2b00      	cmp	r3, #0
 8108798:	d001      	beq.n	810879e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810879a:	2303      	movs	r3, #3
 810879c:	e022      	b.n	81087e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810879e:	687b      	ldr	r3, [r7, #4]
 81087a0:	681b      	ldr	r3, [r3, #0]
 81087a2:	681b      	ldr	r3, [r3, #0]
 81087a4:	f003 0304 	and.w	r3, r3, #4
 81087a8:	2b04      	cmp	r3, #4
 81087aa:	d10e      	bne.n	81087ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81087ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81087b0:	9300      	str	r3, [sp, #0]
 81087b2:	68fb      	ldr	r3, [r7, #12]
 81087b4:	2200      	movs	r2, #0
 81087b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81087ba:	6878      	ldr	r0, [r7, #4]
 81087bc:	f000 f816 	bl	81087ec <UART_WaitOnFlagUntilTimeout>
 81087c0:	4603      	mov	r3, r0
 81087c2:	2b00      	cmp	r3, #0
 81087c4:	d001      	beq.n	81087ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81087c6:	2303      	movs	r3, #3
 81087c8:	e00c      	b.n	81087e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81087ca:	687b      	ldr	r3, [r7, #4]
 81087cc:	2220      	movs	r2, #32
 81087ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 81087d2:	687b      	ldr	r3, [r7, #4]
 81087d4:	2220      	movs	r2, #32
 81087d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 81087da:	687b      	ldr	r3, [r7, #4]
 81087dc:	2200      	movs	r2, #0
 81087de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81087e2:	2300      	movs	r3, #0
}
 81087e4:	4618      	mov	r0, r3
 81087e6:	3710      	adds	r7, #16
 81087e8:	46bd      	mov	sp, r7
 81087ea:	bd80      	pop	{r7, pc}

081087ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81087ec:	b580      	push	{r7, lr}
 81087ee:	b084      	sub	sp, #16
 81087f0:	af00      	add	r7, sp, #0
 81087f2:	60f8      	str	r0, [r7, #12]
 81087f4:	60b9      	str	r1, [r7, #8]
 81087f6:	603b      	str	r3, [r7, #0]
 81087f8:	4613      	mov	r3, r2
 81087fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81087fc:	e062      	b.n	81088c4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81087fe:	69bb      	ldr	r3, [r7, #24]
 8108800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108804:	d05e      	beq.n	81088c4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108806:	f7f9 fd47 	bl	8102298 <HAL_GetTick>
 810880a:	4602      	mov	r2, r0
 810880c:	683b      	ldr	r3, [r7, #0]
 810880e:	1ad3      	subs	r3, r2, r3
 8108810:	69ba      	ldr	r2, [r7, #24]
 8108812:	429a      	cmp	r2, r3
 8108814:	d302      	bcc.n	810881c <UART_WaitOnFlagUntilTimeout+0x30>
 8108816:	69bb      	ldr	r3, [r7, #24]
 8108818:	2b00      	cmp	r3, #0
 810881a:	d11d      	bne.n	8108858 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810881c:	68fb      	ldr	r3, [r7, #12]
 810881e:	681b      	ldr	r3, [r3, #0]
 8108820:	681a      	ldr	r2, [r3, #0]
 8108822:	68fb      	ldr	r3, [r7, #12]
 8108824:	681b      	ldr	r3, [r3, #0]
 8108826:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810882a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810882c:	68fb      	ldr	r3, [r7, #12]
 810882e:	681b      	ldr	r3, [r3, #0]
 8108830:	689a      	ldr	r2, [r3, #8]
 8108832:	68fb      	ldr	r3, [r7, #12]
 8108834:	681b      	ldr	r3, [r3, #0]
 8108836:	f022 0201 	bic.w	r2, r2, #1
 810883a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810883c:	68fb      	ldr	r3, [r7, #12]
 810883e:	2220      	movs	r2, #32
 8108840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8108844:	68fb      	ldr	r3, [r7, #12]
 8108846:	2220      	movs	r2, #32
 8108848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 810884c:	68fb      	ldr	r3, [r7, #12]
 810884e:	2200      	movs	r2, #0
 8108850:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8108854:	2303      	movs	r3, #3
 8108856:	e045      	b.n	81088e4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108858:	68fb      	ldr	r3, [r7, #12]
 810885a:	681b      	ldr	r3, [r3, #0]
 810885c:	681b      	ldr	r3, [r3, #0]
 810885e:	f003 0304 	and.w	r3, r3, #4
 8108862:	2b00      	cmp	r3, #0
 8108864:	d02e      	beq.n	81088c4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108866:	68fb      	ldr	r3, [r7, #12]
 8108868:	681b      	ldr	r3, [r3, #0]
 810886a:	69db      	ldr	r3, [r3, #28]
 810886c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108874:	d126      	bne.n	81088c4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108876:	68fb      	ldr	r3, [r7, #12]
 8108878:	681b      	ldr	r3, [r3, #0]
 810887a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810887e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108880:	68fb      	ldr	r3, [r7, #12]
 8108882:	681b      	ldr	r3, [r3, #0]
 8108884:	681a      	ldr	r2, [r3, #0]
 8108886:	68fb      	ldr	r3, [r7, #12]
 8108888:	681b      	ldr	r3, [r3, #0]
 810888a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810888e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108890:	68fb      	ldr	r3, [r7, #12]
 8108892:	681b      	ldr	r3, [r3, #0]
 8108894:	689a      	ldr	r2, [r3, #8]
 8108896:	68fb      	ldr	r3, [r7, #12]
 8108898:	681b      	ldr	r3, [r3, #0]
 810889a:	f022 0201 	bic.w	r2, r2, #1
 810889e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 81088a0:	68fb      	ldr	r3, [r7, #12]
 81088a2:	2220      	movs	r2, #32
 81088a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 81088a8:	68fb      	ldr	r3, [r7, #12]
 81088aa:	2220      	movs	r2, #32
 81088ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81088b0:	68fb      	ldr	r3, [r7, #12]
 81088b2:	2220      	movs	r2, #32
 81088b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81088b8:	68fb      	ldr	r3, [r7, #12]
 81088ba:	2200      	movs	r2, #0
 81088bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 81088c0:	2303      	movs	r3, #3
 81088c2:	e00f      	b.n	81088e4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81088c4:	68fb      	ldr	r3, [r7, #12]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	69da      	ldr	r2, [r3, #28]
 81088ca:	68bb      	ldr	r3, [r7, #8]
 81088cc:	4013      	ands	r3, r2
 81088ce:	68ba      	ldr	r2, [r7, #8]
 81088d0:	429a      	cmp	r2, r3
 81088d2:	bf0c      	ite	eq
 81088d4:	2301      	moveq	r3, #1
 81088d6:	2300      	movne	r3, #0
 81088d8:	b2db      	uxtb	r3, r3
 81088da:	461a      	mov	r2, r3
 81088dc:	79fb      	ldrb	r3, [r7, #7]
 81088de:	429a      	cmp	r2, r3
 81088e0:	d08d      	beq.n	81087fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81088e2:	2300      	movs	r3, #0
}
 81088e4:	4618      	mov	r0, r3
 81088e6:	3710      	adds	r7, #16
 81088e8:	46bd      	mov	sp, r7
 81088ea:	bd80      	pop	{r7, pc}

081088ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 81088ec:	b480      	push	{r7}
 81088ee:	b083      	sub	sp, #12
 81088f0:	af00      	add	r7, sp, #0
 81088f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	681b      	ldr	r3, [r3, #0]
 81088f8:	681a      	ldr	r2, [r3, #0]
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	681b      	ldr	r3, [r3, #0]
 81088fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8108902:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8108904:	687b      	ldr	r3, [r7, #4]
 8108906:	681b      	ldr	r3, [r3, #0]
 8108908:	689a      	ldr	r2, [r3, #8]
 810890a:	687b      	ldr	r3, [r7, #4]
 810890c:	681b      	ldr	r3, [r3, #0]
 810890e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8108912:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8108914:	687b      	ldr	r3, [r7, #4]
 8108916:	2220      	movs	r2, #32
 8108918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 810891c:	bf00      	nop
 810891e:	370c      	adds	r7, #12
 8108920:	46bd      	mov	sp, r7
 8108922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108926:	4770      	bx	lr

08108928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108928:	b480      	push	{r7}
 810892a:	b083      	sub	sp, #12
 810892c:	af00      	add	r7, sp, #0
 810892e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	681b      	ldr	r3, [r3, #0]
 8108934:	681a      	ldr	r2, [r3, #0]
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	681b      	ldr	r3, [r3, #0]
 810893a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810893e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	681b      	ldr	r3, [r3, #0]
 8108944:	689b      	ldr	r3, [r3, #8]
 8108946:	687a      	ldr	r2, [r7, #4]
 8108948:	6812      	ldr	r2, [r2, #0]
 810894a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810894e:	f023 0301 	bic.w	r3, r3, #1
 8108952:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108954:	687b      	ldr	r3, [r7, #4]
 8108956:	2220      	movs	r2, #32
 8108958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810895c:	687b      	ldr	r3, [r7, #4]
 810895e:	2200      	movs	r2, #0
 8108960:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8108962:	bf00      	nop
 8108964:	370c      	adds	r7, #12
 8108966:	46bd      	mov	sp, r7
 8108968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810896c:	4770      	bx	lr

0810896e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810896e:	b580      	push	{r7, lr}
 8108970:	b084      	sub	sp, #16
 8108972:	af00      	add	r7, sp, #0
 8108974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810897a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	69db      	ldr	r3, [r3, #28]
 8108980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108984:	d01f      	beq.n	81089c6 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8108986:	68fb      	ldr	r3, [r7, #12]
 8108988:	2200      	movs	r2, #0
 810898a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810898e:	68fb      	ldr	r3, [r7, #12]
 8108990:	681b      	ldr	r3, [r3, #0]
 8108992:	681a      	ldr	r2, [r3, #0]
 8108994:	68fb      	ldr	r3, [r7, #12]
 8108996:	681b      	ldr	r3, [r3, #0]
 8108998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810899c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810899e:	68fb      	ldr	r3, [r7, #12]
 81089a0:	681b      	ldr	r3, [r3, #0]
 81089a2:	689a      	ldr	r2, [r3, #8]
 81089a4:	68fb      	ldr	r3, [r7, #12]
 81089a6:	681b      	ldr	r3, [r3, #0]
 81089a8:	f022 0201 	bic.w	r2, r2, #1
 81089ac:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81089ae:	68fb      	ldr	r3, [r7, #12]
 81089b0:	681b      	ldr	r3, [r3, #0]
 81089b2:	689a      	ldr	r2, [r3, #8]
 81089b4:	68fb      	ldr	r3, [r7, #12]
 81089b6:	681b      	ldr	r3, [r3, #0]
 81089b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 81089bc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 81089be:	68fb      	ldr	r3, [r7, #12]
 81089c0:	2220      	movs	r2, #32
 81089c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 81089c6:	68f8      	ldr	r0, [r7, #12]
 81089c8:	f7ff f858 	bl	8107a7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81089cc:	bf00      	nop
 81089ce:	3710      	adds	r7, #16
 81089d0:	46bd      	mov	sp, r7
 81089d2:	bd80      	pop	{r7, pc}

081089d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81089d4:	b580      	push	{r7, lr}
 81089d6:	b084      	sub	sp, #16
 81089d8:	af00      	add	r7, sp, #0
 81089da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81089dc:	687b      	ldr	r3, [r7, #4]
 81089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81089e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 81089e2:	68f8      	ldr	r0, [r7, #12]
 81089e4:	f7ff f854 	bl	8107a90 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81089e8:	bf00      	nop
 81089ea:	3710      	adds	r7, #16
 81089ec:	46bd      	mov	sp, r7
 81089ee:	bd80      	pop	{r7, pc}

081089f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 81089f0:	b580      	push	{r7, lr}
 81089f2:	b086      	sub	sp, #24
 81089f4:	af00      	add	r7, sp, #0
 81089f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81089f8:	687b      	ldr	r3, [r7, #4]
 81089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81089fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 81089fe:	697b      	ldr	r3, [r7, #20]
 8108a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108a04:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8108a06:	697b      	ldr	r3, [r7, #20]
 8108a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108a0c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8108a0e:	697b      	ldr	r3, [r7, #20]
 8108a10:	681b      	ldr	r3, [r3, #0]
 8108a12:	689b      	ldr	r3, [r3, #8]
 8108a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108a18:	2b80      	cmp	r3, #128	; 0x80
 8108a1a:	d109      	bne.n	8108a30 <UART_DMAError+0x40>
 8108a1c:	693b      	ldr	r3, [r7, #16]
 8108a1e:	2b21      	cmp	r3, #33	; 0x21
 8108a20:	d106      	bne.n	8108a30 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8108a22:	697b      	ldr	r3, [r7, #20]
 8108a24:	2200      	movs	r2, #0
 8108a26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8108a2a:	6978      	ldr	r0, [r7, #20]
 8108a2c:	f7ff ff5e 	bl	81088ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8108a30:	697b      	ldr	r3, [r7, #20]
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	689b      	ldr	r3, [r3, #8]
 8108a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108a3a:	2b40      	cmp	r3, #64	; 0x40
 8108a3c:	d109      	bne.n	8108a52 <UART_DMAError+0x62>
 8108a3e:	68fb      	ldr	r3, [r7, #12]
 8108a40:	2b22      	cmp	r3, #34	; 0x22
 8108a42:	d106      	bne.n	8108a52 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8108a44:	697b      	ldr	r3, [r7, #20]
 8108a46:	2200      	movs	r2, #0
 8108a48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8108a4c:	6978      	ldr	r0, [r7, #20]
 8108a4e:	f7ff ff6b 	bl	8108928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8108a52:	697b      	ldr	r3, [r7, #20]
 8108a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108a58:	f043 0210 	orr.w	r2, r3, #16
 8108a5c:	697b      	ldr	r3, [r7, #20]
 8108a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8108a62:	6978      	ldr	r0, [r7, #20]
 8108a64:	f7ff f81e 	bl	8107aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108a68:	bf00      	nop
 8108a6a:	3718      	adds	r7, #24
 8108a6c:	46bd      	mov	sp, r7
 8108a6e:	bd80      	pop	{r7, pc}

08108a70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108a70:	b480      	push	{r7}
 8108a72:	b085      	sub	sp, #20
 8108a74:	af00      	add	r7, sp, #0
 8108a76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108a7e:	2b01      	cmp	r3, #1
 8108a80:	d101      	bne.n	8108a86 <HAL_UARTEx_DisableFifoMode+0x16>
 8108a82:	2302      	movs	r3, #2
 8108a84:	e027      	b.n	8108ad6 <HAL_UARTEx_DisableFifoMode+0x66>
 8108a86:	687b      	ldr	r3, [r7, #4]
 8108a88:	2201      	movs	r2, #1
 8108a8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108a8e:	687b      	ldr	r3, [r7, #4]
 8108a90:	2224      	movs	r2, #36	; 0x24
 8108a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108a96:	687b      	ldr	r3, [r7, #4]
 8108a98:	681b      	ldr	r3, [r3, #0]
 8108a9a:	681b      	ldr	r3, [r3, #0]
 8108a9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108a9e:	687b      	ldr	r3, [r7, #4]
 8108aa0:	681b      	ldr	r3, [r3, #0]
 8108aa2:	681a      	ldr	r2, [r3, #0]
 8108aa4:	687b      	ldr	r3, [r7, #4]
 8108aa6:	681b      	ldr	r3, [r3, #0]
 8108aa8:	f022 0201 	bic.w	r2, r2, #1
 8108aac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108aae:	68fb      	ldr	r3, [r7, #12]
 8108ab0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108ab4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108ab6:	687b      	ldr	r3, [r7, #4]
 8108ab8:	2200      	movs	r2, #0
 8108aba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	681b      	ldr	r3, [r3, #0]
 8108ac0:	68fa      	ldr	r2, [r7, #12]
 8108ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108ac4:	687b      	ldr	r3, [r7, #4]
 8108ac6:	2220      	movs	r2, #32
 8108ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108acc:	687b      	ldr	r3, [r7, #4]
 8108ace:	2200      	movs	r2, #0
 8108ad0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108ad4:	2300      	movs	r3, #0
}
 8108ad6:	4618      	mov	r0, r3
 8108ad8:	3714      	adds	r7, #20
 8108ada:	46bd      	mov	sp, r7
 8108adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ae0:	4770      	bx	lr

08108ae2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108ae2:	b580      	push	{r7, lr}
 8108ae4:	b084      	sub	sp, #16
 8108ae6:	af00      	add	r7, sp, #0
 8108ae8:	6078      	str	r0, [r7, #4]
 8108aea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108aec:	687b      	ldr	r3, [r7, #4]
 8108aee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108af2:	2b01      	cmp	r3, #1
 8108af4:	d101      	bne.n	8108afa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108af6:	2302      	movs	r3, #2
 8108af8:	e02d      	b.n	8108b56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108afa:	687b      	ldr	r3, [r7, #4]
 8108afc:	2201      	movs	r2, #1
 8108afe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108b02:	687b      	ldr	r3, [r7, #4]
 8108b04:	2224      	movs	r2, #36	; 0x24
 8108b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	681b      	ldr	r3, [r3, #0]
 8108b0e:	681b      	ldr	r3, [r3, #0]
 8108b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	681b      	ldr	r3, [r3, #0]
 8108b16:	681a      	ldr	r2, [r3, #0]
 8108b18:	687b      	ldr	r3, [r7, #4]
 8108b1a:	681b      	ldr	r3, [r3, #0]
 8108b1c:	f022 0201 	bic.w	r2, r2, #1
 8108b20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108b22:	687b      	ldr	r3, [r7, #4]
 8108b24:	681b      	ldr	r3, [r3, #0]
 8108b26:	689b      	ldr	r3, [r3, #8]
 8108b28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108b2c:	687b      	ldr	r3, [r7, #4]
 8108b2e:	681b      	ldr	r3, [r3, #0]
 8108b30:	683a      	ldr	r2, [r7, #0]
 8108b32:	430a      	orrs	r2, r1
 8108b34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108b36:	6878      	ldr	r0, [r7, #4]
 8108b38:	f000 f850 	bl	8108bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108b3c:	687b      	ldr	r3, [r7, #4]
 8108b3e:	681b      	ldr	r3, [r3, #0]
 8108b40:	68fa      	ldr	r2, [r7, #12]
 8108b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108b44:	687b      	ldr	r3, [r7, #4]
 8108b46:	2220      	movs	r2, #32
 8108b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108b4c:	687b      	ldr	r3, [r7, #4]
 8108b4e:	2200      	movs	r2, #0
 8108b50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108b54:	2300      	movs	r3, #0
}
 8108b56:	4618      	mov	r0, r3
 8108b58:	3710      	adds	r7, #16
 8108b5a:	46bd      	mov	sp, r7
 8108b5c:	bd80      	pop	{r7, pc}

08108b5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108b5e:	b580      	push	{r7, lr}
 8108b60:	b084      	sub	sp, #16
 8108b62:	af00      	add	r7, sp, #0
 8108b64:	6078      	str	r0, [r7, #4]
 8108b66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108b68:	687b      	ldr	r3, [r7, #4]
 8108b6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108b6e:	2b01      	cmp	r3, #1
 8108b70:	d101      	bne.n	8108b76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108b72:	2302      	movs	r3, #2
 8108b74:	e02d      	b.n	8108bd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108b76:	687b      	ldr	r3, [r7, #4]
 8108b78:	2201      	movs	r2, #1
 8108b7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108b7e:	687b      	ldr	r3, [r7, #4]
 8108b80:	2224      	movs	r2, #36	; 0x24
 8108b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108b86:	687b      	ldr	r3, [r7, #4]
 8108b88:	681b      	ldr	r3, [r3, #0]
 8108b8a:	681b      	ldr	r3, [r3, #0]
 8108b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108b8e:	687b      	ldr	r3, [r7, #4]
 8108b90:	681b      	ldr	r3, [r3, #0]
 8108b92:	681a      	ldr	r2, [r3, #0]
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	681b      	ldr	r3, [r3, #0]
 8108b98:	f022 0201 	bic.w	r2, r2, #1
 8108b9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108b9e:	687b      	ldr	r3, [r7, #4]
 8108ba0:	681b      	ldr	r3, [r3, #0]
 8108ba2:	689b      	ldr	r3, [r3, #8]
 8108ba4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108ba8:	687b      	ldr	r3, [r7, #4]
 8108baa:	681b      	ldr	r3, [r3, #0]
 8108bac:	683a      	ldr	r2, [r7, #0]
 8108bae:	430a      	orrs	r2, r1
 8108bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108bb2:	6878      	ldr	r0, [r7, #4]
 8108bb4:	f000 f812 	bl	8108bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108bb8:	687b      	ldr	r3, [r7, #4]
 8108bba:	681b      	ldr	r3, [r3, #0]
 8108bbc:	68fa      	ldr	r2, [r7, #12]
 8108bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108bc0:	687b      	ldr	r3, [r7, #4]
 8108bc2:	2220      	movs	r2, #32
 8108bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108bc8:	687b      	ldr	r3, [r7, #4]
 8108bca:	2200      	movs	r2, #0
 8108bcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108bd0:	2300      	movs	r3, #0
}
 8108bd2:	4618      	mov	r0, r3
 8108bd4:	3710      	adds	r7, #16
 8108bd6:	46bd      	mov	sp, r7
 8108bd8:	bd80      	pop	{r7, pc}
	...

08108bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108bdc:	b480      	push	{r7}
 8108bde:	b089      	sub	sp, #36	; 0x24
 8108be0:	af00      	add	r7, sp, #0
 8108be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8108be4:	4a2f      	ldr	r2, [pc, #188]	; (8108ca4 <UARTEx_SetNbDataToProcess+0xc8>)
 8108be6:	f107 0314 	add.w	r3, r7, #20
 8108bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8108bee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8108bf2:	4a2d      	ldr	r2, [pc, #180]	; (8108ca8 <UARTEx_SetNbDataToProcess+0xcc>)
 8108bf4:	f107 030c 	add.w	r3, r7, #12
 8108bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8108bfc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108c00:	687b      	ldr	r3, [r7, #4]
 8108c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108c04:	2b00      	cmp	r3, #0
 8108c06:	d108      	bne.n	8108c1a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8108c08:	687b      	ldr	r3, [r7, #4]
 8108c0a:	2201      	movs	r2, #1
 8108c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108c10:	687b      	ldr	r3, [r7, #4]
 8108c12:	2201      	movs	r2, #1
 8108c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108c18:	e03d      	b.n	8108c96 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108c1a:	2310      	movs	r3, #16
 8108c1c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108c1e:	2310      	movs	r3, #16
 8108c20:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108c22:	687b      	ldr	r3, [r7, #4]
 8108c24:	681b      	ldr	r3, [r3, #0]
 8108c26:	689b      	ldr	r3, [r3, #8]
 8108c28:	0e5b      	lsrs	r3, r3, #25
 8108c2a:	b2db      	uxtb	r3, r3
 8108c2c:	f003 0307 	and.w	r3, r3, #7
 8108c30:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108c32:	687b      	ldr	r3, [r7, #4]
 8108c34:	681b      	ldr	r3, [r3, #0]
 8108c36:	689b      	ldr	r3, [r3, #8]
 8108c38:	0f5b      	lsrs	r3, r3, #29
 8108c3a:	b2db      	uxtb	r3, r3
 8108c3c:	f003 0307 	and.w	r3, r3, #7
 8108c40:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8108c42:	7fbb      	ldrb	r3, [r7, #30]
 8108c44:	7f3a      	ldrb	r2, [r7, #28]
 8108c46:	f107 0120 	add.w	r1, r7, #32
 8108c4a:	440a      	add	r2, r1
 8108c4c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8108c50:	fb02 f303 	mul.w	r3, r2, r3
 8108c54:	7f3a      	ldrb	r2, [r7, #28]
 8108c56:	f107 0120 	add.w	r1, r7, #32
 8108c5a:	440a      	add	r2, r1
 8108c5c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8108c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8108c64:	b29a      	uxth	r2, r3
 8108c66:	687b      	ldr	r3, [r7, #4]
 8108c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8108c6c:	7ffb      	ldrb	r3, [r7, #31]
 8108c6e:	7f7a      	ldrb	r2, [r7, #29]
 8108c70:	f107 0120 	add.w	r1, r7, #32
 8108c74:	440a      	add	r2, r1
 8108c76:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8108c7a:	fb02 f303 	mul.w	r3, r2, r3
 8108c7e:	7f7a      	ldrb	r2, [r7, #29]
 8108c80:	f107 0120 	add.w	r1, r7, #32
 8108c84:	440a      	add	r2, r1
 8108c86:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8108c8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8108c8e:	b29a      	uxth	r2, r3
 8108c90:	687b      	ldr	r3, [r7, #4]
 8108c92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108c96:	bf00      	nop
 8108c98:	3724      	adds	r7, #36	; 0x24
 8108c9a:	46bd      	mov	sp, r7
 8108c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ca0:	4770      	bx	lr
 8108ca2:	bf00      	nop
 8108ca4:	08113898 	.word	0x08113898
 8108ca8:	081138a0 	.word	0x081138a0

08108cac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8108cac:	b580      	push	{r7, lr}
 8108cae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8108cb0:	4904      	ldr	r1, [pc, #16]	; (8108cc4 <MX_FATFS_Init+0x18>)
 8108cb2:	4805      	ldr	r0, [pc, #20]	; (8108cc8 <MX_FATFS_Init+0x1c>)
 8108cb4:	f000 f8b0 	bl	8108e18 <FATFS_LinkDriver>
 8108cb8:	4603      	mov	r3, r0
 8108cba:	461a      	mov	r2, r3
 8108cbc:	4b03      	ldr	r3, [pc, #12]	; (8108ccc <MX_FATFS_Init+0x20>)
 8108cbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8108cc0:	bf00      	nop
 8108cc2:	bd80      	pop	{r7, pc}
 8108cc4:	10009eec 	.word	0x10009eec
 8108cc8:	10000010 	.word	0x10000010
 8108ccc:	10009ef0 	.word	0x10009ef0

08108cd0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8108cd0:	b480      	push	{r7}
 8108cd2:	b083      	sub	sp, #12
 8108cd4:	af00      	add	r7, sp, #0
 8108cd6:	4603      	mov	r3, r0
 8108cd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8108cda:	4b06      	ldr	r3, [pc, #24]	; (8108cf4 <USER_initialize+0x24>)
 8108cdc:	2201      	movs	r2, #1
 8108cde:	701a      	strb	r2, [r3, #0]
    return Stat;
 8108ce0:	4b04      	ldr	r3, [pc, #16]	; (8108cf4 <USER_initialize+0x24>)
 8108ce2:	781b      	ldrb	r3, [r3, #0]
 8108ce4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8108ce6:	4618      	mov	r0, r3
 8108ce8:	370c      	adds	r7, #12
 8108cea:	46bd      	mov	sp, r7
 8108cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cf0:	4770      	bx	lr
 8108cf2:	bf00      	nop
 8108cf4:	1000000d 	.word	0x1000000d

08108cf8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8108cf8:	b480      	push	{r7}
 8108cfa:	b083      	sub	sp, #12
 8108cfc:	af00      	add	r7, sp, #0
 8108cfe:	4603      	mov	r3, r0
 8108d00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8108d02:	4b06      	ldr	r3, [pc, #24]	; (8108d1c <USER_status+0x24>)
 8108d04:	2201      	movs	r2, #1
 8108d06:	701a      	strb	r2, [r3, #0]
    return Stat;
 8108d08:	4b04      	ldr	r3, [pc, #16]	; (8108d1c <USER_status+0x24>)
 8108d0a:	781b      	ldrb	r3, [r3, #0]
 8108d0c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8108d0e:	4618      	mov	r0, r3
 8108d10:	370c      	adds	r7, #12
 8108d12:	46bd      	mov	sp, r7
 8108d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d18:	4770      	bx	lr
 8108d1a:	bf00      	nop
 8108d1c:	1000000d 	.word	0x1000000d

08108d20 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8108d20:	b480      	push	{r7}
 8108d22:	b085      	sub	sp, #20
 8108d24:	af00      	add	r7, sp, #0
 8108d26:	60b9      	str	r1, [r7, #8]
 8108d28:	607a      	str	r2, [r7, #4]
 8108d2a:	603b      	str	r3, [r7, #0]
 8108d2c:	4603      	mov	r3, r0
 8108d2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8108d30:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8108d32:	4618      	mov	r0, r3
 8108d34:	3714      	adds	r7, #20
 8108d36:	46bd      	mov	sp, r7
 8108d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d3c:	4770      	bx	lr

08108d3e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8108d3e:	b480      	push	{r7}
 8108d40:	b085      	sub	sp, #20
 8108d42:	af00      	add	r7, sp, #0
 8108d44:	60b9      	str	r1, [r7, #8]
 8108d46:	607a      	str	r2, [r7, #4]
 8108d48:	603b      	str	r3, [r7, #0]
 8108d4a:	4603      	mov	r3, r0
 8108d4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8108d4e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8108d50:	4618      	mov	r0, r3
 8108d52:	3714      	adds	r7, #20
 8108d54:	46bd      	mov	sp, r7
 8108d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d5a:	4770      	bx	lr

08108d5c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8108d5c:	b480      	push	{r7}
 8108d5e:	b085      	sub	sp, #20
 8108d60:	af00      	add	r7, sp, #0
 8108d62:	4603      	mov	r3, r0
 8108d64:	603a      	str	r2, [r7, #0]
 8108d66:	71fb      	strb	r3, [r7, #7]
 8108d68:	460b      	mov	r3, r1
 8108d6a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8108d6c:	2301      	movs	r3, #1
 8108d6e:	73fb      	strb	r3, [r7, #15]
    return res;
 8108d70:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8108d72:	4618      	mov	r0, r3
 8108d74:	3714      	adds	r7, #20
 8108d76:	46bd      	mov	sp, r7
 8108d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d7c:	4770      	bx	lr
	...

08108d80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8108d80:	b480      	push	{r7}
 8108d82:	b087      	sub	sp, #28
 8108d84:	af00      	add	r7, sp, #0
 8108d86:	60f8      	str	r0, [r7, #12]
 8108d88:	60b9      	str	r1, [r7, #8]
 8108d8a:	4613      	mov	r3, r2
 8108d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8108d8e:	2301      	movs	r3, #1
 8108d90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8108d92:	2300      	movs	r3, #0
 8108d94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8108d96:	4b1f      	ldr	r3, [pc, #124]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108d98:	7a5b      	ldrb	r3, [r3, #9]
 8108d9a:	b2db      	uxtb	r3, r3
 8108d9c:	2b00      	cmp	r3, #0
 8108d9e:	d131      	bne.n	8108e04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8108da0:	4b1c      	ldr	r3, [pc, #112]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108da2:	7a5b      	ldrb	r3, [r3, #9]
 8108da4:	b2db      	uxtb	r3, r3
 8108da6:	461a      	mov	r2, r3
 8108da8:	4b1a      	ldr	r3, [pc, #104]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108daa:	2100      	movs	r1, #0
 8108dac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8108dae:	4b19      	ldr	r3, [pc, #100]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108db0:	7a5b      	ldrb	r3, [r3, #9]
 8108db2:	b2db      	uxtb	r3, r3
 8108db4:	4a17      	ldr	r2, [pc, #92]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108db6:	009b      	lsls	r3, r3, #2
 8108db8:	4413      	add	r3, r2
 8108dba:	68fa      	ldr	r2, [r7, #12]
 8108dbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8108dbe:	4b15      	ldr	r3, [pc, #84]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108dc0:	7a5b      	ldrb	r3, [r3, #9]
 8108dc2:	b2db      	uxtb	r3, r3
 8108dc4:	461a      	mov	r2, r3
 8108dc6:	4b13      	ldr	r3, [pc, #76]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108dc8:	4413      	add	r3, r2
 8108dca:	79fa      	ldrb	r2, [r7, #7]
 8108dcc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8108dce:	4b11      	ldr	r3, [pc, #68]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108dd0:	7a5b      	ldrb	r3, [r3, #9]
 8108dd2:	b2db      	uxtb	r3, r3
 8108dd4:	1c5a      	adds	r2, r3, #1
 8108dd6:	b2d1      	uxtb	r1, r2
 8108dd8:	4a0e      	ldr	r2, [pc, #56]	; (8108e14 <FATFS_LinkDriverEx+0x94>)
 8108dda:	7251      	strb	r1, [r2, #9]
 8108ddc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8108dde:	7dbb      	ldrb	r3, [r7, #22]
 8108de0:	3330      	adds	r3, #48	; 0x30
 8108de2:	b2da      	uxtb	r2, r3
 8108de4:	68bb      	ldr	r3, [r7, #8]
 8108de6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8108de8:	68bb      	ldr	r3, [r7, #8]
 8108dea:	3301      	adds	r3, #1
 8108dec:	223a      	movs	r2, #58	; 0x3a
 8108dee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8108df0:	68bb      	ldr	r3, [r7, #8]
 8108df2:	3302      	adds	r3, #2
 8108df4:	222f      	movs	r2, #47	; 0x2f
 8108df6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8108df8:	68bb      	ldr	r3, [r7, #8]
 8108dfa:	3303      	adds	r3, #3
 8108dfc:	2200      	movs	r2, #0
 8108dfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8108e00:	2300      	movs	r3, #0
 8108e02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8108e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8108e06:	4618      	mov	r0, r3
 8108e08:	371c      	adds	r7, #28
 8108e0a:	46bd      	mov	sp, r7
 8108e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e10:	4770      	bx	lr
 8108e12:	bf00      	nop
 8108e14:	10000484 	.word	0x10000484

08108e18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8108e18:	b580      	push	{r7, lr}
 8108e1a:	b082      	sub	sp, #8
 8108e1c:	af00      	add	r7, sp, #0
 8108e1e:	6078      	str	r0, [r7, #4]
 8108e20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8108e22:	2200      	movs	r2, #0
 8108e24:	6839      	ldr	r1, [r7, #0]
 8108e26:	6878      	ldr	r0, [r7, #4]
 8108e28:	f7ff ffaa 	bl	8108d80 <FATFS_LinkDriverEx>
 8108e2c:	4603      	mov	r3, r0
}
 8108e2e:	4618      	mov	r0, r3
 8108e30:	3708      	adds	r7, #8
 8108e32:	46bd      	mov	sp, r7
 8108e34:	bd80      	pop	{r7, pc}

08108e36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8108e36:	b480      	push	{r7}
 8108e38:	b085      	sub	sp, #20
 8108e3a:	af00      	add	r7, sp, #0
 8108e3c:	4603      	mov	r3, r0
 8108e3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8108e40:	2300      	movs	r3, #0
 8108e42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8108e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108e48:	2b84      	cmp	r3, #132	; 0x84
 8108e4a:	d005      	beq.n	8108e58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8108e4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8108e50:	68fb      	ldr	r3, [r7, #12]
 8108e52:	4413      	add	r3, r2
 8108e54:	3303      	adds	r3, #3
 8108e56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8108e58:	68fb      	ldr	r3, [r7, #12]
}
 8108e5a:	4618      	mov	r0, r3
 8108e5c:	3714      	adds	r7, #20
 8108e5e:	46bd      	mov	sp, r7
 8108e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e64:	4770      	bx	lr

08108e66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8108e66:	b580      	push	{r7, lr}
 8108e68:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8108e6a:	f001 fb57 	bl	810a51c <vTaskStartScheduler>
  
  return osOK;
 8108e6e:	2300      	movs	r3, #0
}
 8108e70:	4618      	mov	r0, r3
 8108e72:	bd80      	pop	{r7, pc}

08108e74 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8108e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108e76:	b089      	sub	sp, #36	; 0x24
 8108e78:	af04      	add	r7, sp, #16
 8108e7a:	6078      	str	r0, [r7, #4]
 8108e7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8108e7e:	687b      	ldr	r3, [r7, #4]
 8108e80:	695b      	ldr	r3, [r3, #20]
 8108e82:	2b00      	cmp	r3, #0
 8108e84:	d020      	beq.n	8108ec8 <osThreadCreate+0x54>
 8108e86:	687b      	ldr	r3, [r7, #4]
 8108e88:	699b      	ldr	r3, [r3, #24]
 8108e8a:	2b00      	cmp	r3, #0
 8108e8c:	d01c      	beq.n	8108ec8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108e8e:	687b      	ldr	r3, [r7, #4]
 8108e90:	685c      	ldr	r4, [r3, #4]
 8108e92:	687b      	ldr	r3, [r7, #4]
 8108e94:	681d      	ldr	r5, [r3, #0]
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	691e      	ldr	r6, [r3, #16]
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8108ea0:	4618      	mov	r0, r3
 8108ea2:	f7ff ffc8 	bl	8108e36 <makeFreeRtosPriority>
 8108ea6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8108ea8:	687b      	ldr	r3, [r7, #4]
 8108eaa:	695b      	ldr	r3, [r3, #20]
 8108eac:	687a      	ldr	r2, [r7, #4]
 8108eae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108eb0:	9202      	str	r2, [sp, #8]
 8108eb2:	9301      	str	r3, [sp, #4]
 8108eb4:	9100      	str	r1, [sp, #0]
 8108eb6:	683b      	ldr	r3, [r7, #0]
 8108eb8:	4632      	mov	r2, r6
 8108eba:	4629      	mov	r1, r5
 8108ebc:	4620      	mov	r0, r4
 8108ebe:	f001 f969 	bl	810a194 <xTaskCreateStatic>
 8108ec2:	4603      	mov	r3, r0
 8108ec4:	60fb      	str	r3, [r7, #12]
 8108ec6:	e01c      	b.n	8108f02 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108ec8:	687b      	ldr	r3, [r7, #4]
 8108eca:	685c      	ldr	r4, [r3, #4]
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8108ed0:	687b      	ldr	r3, [r7, #4]
 8108ed2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108ed4:	b29e      	uxth	r6, r3
 8108ed6:	687b      	ldr	r3, [r7, #4]
 8108ed8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8108edc:	4618      	mov	r0, r3
 8108ede:	f7ff ffaa 	bl	8108e36 <makeFreeRtosPriority>
 8108ee2:	4602      	mov	r2, r0
 8108ee4:	f107 030c 	add.w	r3, r7, #12
 8108ee8:	9301      	str	r3, [sp, #4]
 8108eea:	9200      	str	r2, [sp, #0]
 8108eec:	683b      	ldr	r3, [r7, #0]
 8108eee:	4632      	mov	r2, r6
 8108ef0:	4629      	mov	r1, r5
 8108ef2:	4620      	mov	r0, r4
 8108ef4:	f001 f9a8 	bl	810a248 <xTaskCreate>
 8108ef8:	4603      	mov	r3, r0
 8108efa:	2b01      	cmp	r3, #1
 8108efc:	d001      	beq.n	8108f02 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8108efe:	2300      	movs	r3, #0
 8108f00:	e000      	b.n	8108f04 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8108f02:	68fb      	ldr	r3, [r7, #12]
}
 8108f04:	4618      	mov	r0, r3
 8108f06:	3714      	adds	r7, #20
 8108f08:	46bd      	mov	sp, r7
 8108f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108f0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8108f0c:	b580      	push	{r7, lr}
 8108f0e:	b084      	sub	sp, #16
 8108f10:	af00      	add	r7, sp, #0
 8108f12:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8108f18:	68fb      	ldr	r3, [r7, #12]
 8108f1a:	2b00      	cmp	r3, #0
 8108f1c:	d001      	beq.n	8108f22 <osDelay+0x16>
 8108f1e:	68fb      	ldr	r3, [r7, #12]
 8108f20:	e000      	b.n	8108f24 <osDelay+0x18>
 8108f22:	2301      	movs	r3, #1
 8108f24:	4618      	mov	r0, r3
 8108f26:	f001 fac5 	bl	810a4b4 <vTaskDelay>
  
  return osOK;
 8108f2a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8108f2c:	4618      	mov	r0, r3
 8108f2e:	3710      	adds	r7, #16
 8108f30:	46bd      	mov	sp, r7
 8108f32:	bd80      	pop	{r7, pc}

08108f34 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8108f34:	b580      	push	{r7, lr}
 8108f36:	b086      	sub	sp, #24
 8108f38:	af02      	add	r7, sp, #8
 8108f3a:	6078      	str	r0, [r7, #4]
 8108f3c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8108f3e:	687b      	ldr	r3, [r7, #4]
 8108f40:	685b      	ldr	r3, [r3, #4]
 8108f42:	2b00      	cmp	r3, #0
 8108f44:	d010      	beq.n	8108f68 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8108f46:	683b      	ldr	r3, [r7, #0]
 8108f48:	2b01      	cmp	r3, #1
 8108f4a:	d10b      	bne.n	8108f64 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	685a      	ldr	r2, [r3, #4]
 8108f50:	2303      	movs	r3, #3
 8108f52:	9300      	str	r3, [sp, #0]
 8108f54:	4613      	mov	r3, r2
 8108f56:	2200      	movs	r2, #0
 8108f58:	2100      	movs	r1, #0
 8108f5a:	2001      	movs	r0, #1
 8108f5c:	f000 fd12 	bl	8109984 <xQueueGenericCreateStatic>
 8108f60:	4603      	mov	r3, r0
 8108f62:	e016      	b.n	8108f92 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8108f64:	2300      	movs	r3, #0
 8108f66:	e014      	b.n	8108f92 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8108f68:	683b      	ldr	r3, [r7, #0]
 8108f6a:	2b01      	cmp	r3, #1
 8108f6c:	d110      	bne.n	8108f90 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8108f6e:	2203      	movs	r2, #3
 8108f70:	2100      	movs	r1, #0
 8108f72:	2001      	movs	r0, #1
 8108f74:	f000 fd79 	bl	8109a6a <xQueueGenericCreate>
 8108f78:	60f8      	str	r0, [r7, #12]
 8108f7a:	68fb      	ldr	r3, [r7, #12]
 8108f7c:	2b00      	cmp	r3, #0
 8108f7e:	d005      	beq.n	8108f8c <osSemaphoreCreate+0x58>
 8108f80:	2300      	movs	r3, #0
 8108f82:	2200      	movs	r2, #0
 8108f84:	2100      	movs	r1, #0
 8108f86:	68f8      	ldr	r0, [r7, #12]
 8108f88:	f000 fe00 	bl	8109b8c <xQueueGenericSend>
      return sema;
 8108f8c:	68fb      	ldr	r3, [r7, #12]
 8108f8e:	e000      	b.n	8108f92 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8108f90:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8108f92:	4618      	mov	r0, r3
 8108f94:	3710      	adds	r7, #16
 8108f96:	46bd      	mov	sp, r7
 8108f98:	bd80      	pop	{r7, pc}
	...

08108f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8108f9c:	b580      	push	{r7, lr}
 8108f9e:	b08a      	sub	sp, #40	; 0x28
 8108fa0:	af00      	add	r7, sp, #0
 8108fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8108fa4:	2300      	movs	r3, #0
 8108fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8108fa8:	f001 fb16 	bl	810a5d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8108fac:	4b57      	ldr	r3, [pc, #348]	; (810910c <pvPortMalloc+0x170>)
 8108fae:	681b      	ldr	r3, [r3, #0]
 8108fb0:	2b00      	cmp	r3, #0
 8108fb2:	d101      	bne.n	8108fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8108fb4:	f000 f90c 	bl	81091d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8108fb8:	4b55      	ldr	r3, [pc, #340]	; (8109110 <pvPortMalloc+0x174>)
 8108fba:	681a      	ldr	r2, [r3, #0]
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	4013      	ands	r3, r2
 8108fc0:	2b00      	cmp	r3, #0
 8108fc2:	f040 808c 	bne.w	81090de <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8108fc6:	687b      	ldr	r3, [r7, #4]
 8108fc8:	2b00      	cmp	r3, #0
 8108fca:	d01c      	beq.n	8109006 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8108fcc:	2208      	movs	r2, #8
 8108fce:	687b      	ldr	r3, [r7, #4]
 8108fd0:	4413      	add	r3, r2
 8108fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8108fd4:	687b      	ldr	r3, [r7, #4]
 8108fd6:	f003 0307 	and.w	r3, r3, #7
 8108fda:	2b00      	cmp	r3, #0
 8108fdc:	d013      	beq.n	8109006 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8108fde:	687b      	ldr	r3, [r7, #4]
 8108fe0:	f023 0307 	bic.w	r3, r3, #7
 8108fe4:	3308      	adds	r3, #8
 8108fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	f003 0307 	and.w	r3, r3, #7
 8108fee:	2b00      	cmp	r3, #0
 8108ff0:	d009      	beq.n	8109006 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8108ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ff6:	f383 8811 	msr	BASEPRI, r3
 8108ffa:	f3bf 8f6f 	isb	sy
 8108ffe:	f3bf 8f4f 	dsb	sy
 8109002:	617b      	str	r3, [r7, #20]
 8109004:	e7fe      	b.n	8109004 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8109006:	687b      	ldr	r3, [r7, #4]
 8109008:	2b00      	cmp	r3, #0
 810900a:	d068      	beq.n	81090de <pvPortMalloc+0x142>
 810900c:	4b41      	ldr	r3, [pc, #260]	; (8109114 <pvPortMalloc+0x178>)
 810900e:	681b      	ldr	r3, [r3, #0]
 8109010:	687a      	ldr	r2, [r7, #4]
 8109012:	429a      	cmp	r2, r3
 8109014:	d863      	bhi.n	81090de <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8109016:	4b40      	ldr	r3, [pc, #256]	; (8109118 <pvPortMalloc+0x17c>)
 8109018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810901a:	4b3f      	ldr	r3, [pc, #252]	; (8109118 <pvPortMalloc+0x17c>)
 810901c:	681b      	ldr	r3, [r3, #0]
 810901e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109020:	e004      	b.n	810902c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8109022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8109026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109028:	681b      	ldr	r3, [r3, #0]
 810902a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810902e:	685b      	ldr	r3, [r3, #4]
 8109030:	687a      	ldr	r2, [r7, #4]
 8109032:	429a      	cmp	r2, r3
 8109034:	d903      	bls.n	810903e <pvPortMalloc+0xa2>
 8109036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109038:	681b      	ldr	r3, [r3, #0]
 810903a:	2b00      	cmp	r3, #0
 810903c:	d1f1      	bne.n	8109022 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810903e:	4b33      	ldr	r3, [pc, #204]	; (810910c <pvPortMalloc+0x170>)
 8109040:	681b      	ldr	r3, [r3, #0]
 8109042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109044:	429a      	cmp	r2, r3
 8109046:	d04a      	beq.n	81090de <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8109048:	6a3b      	ldr	r3, [r7, #32]
 810904a:	681b      	ldr	r3, [r3, #0]
 810904c:	2208      	movs	r2, #8
 810904e:	4413      	add	r3, r2
 8109050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8109052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109054:	681a      	ldr	r2, [r3, #0]
 8109056:	6a3b      	ldr	r3, [r7, #32]
 8109058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810905c:	685a      	ldr	r2, [r3, #4]
 810905e:	687b      	ldr	r3, [r7, #4]
 8109060:	1ad2      	subs	r2, r2, r3
 8109062:	2308      	movs	r3, #8
 8109064:	005b      	lsls	r3, r3, #1
 8109066:	429a      	cmp	r2, r3
 8109068:	d91e      	bls.n	81090a8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810906a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810906c:	687b      	ldr	r3, [r7, #4]
 810906e:	4413      	add	r3, r2
 8109070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8109072:	69bb      	ldr	r3, [r7, #24]
 8109074:	f003 0307 	and.w	r3, r3, #7
 8109078:	2b00      	cmp	r3, #0
 810907a:	d009      	beq.n	8109090 <pvPortMalloc+0xf4>
 810907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109080:	f383 8811 	msr	BASEPRI, r3
 8109084:	f3bf 8f6f 	isb	sy
 8109088:	f3bf 8f4f 	dsb	sy
 810908c:	613b      	str	r3, [r7, #16]
 810908e:	e7fe      	b.n	810908e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8109090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109092:	685a      	ldr	r2, [r3, #4]
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	1ad2      	subs	r2, r2, r3
 8109098:	69bb      	ldr	r3, [r7, #24]
 810909a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810909e:	687a      	ldr	r2, [r7, #4]
 81090a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81090a2:	69b8      	ldr	r0, [r7, #24]
 81090a4:	f000 f8f6 	bl	8109294 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81090a8:	4b1a      	ldr	r3, [pc, #104]	; (8109114 <pvPortMalloc+0x178>)
 81090aa:	681a      	ldr	r2, [r3, #0]
 81090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81090ae:	685b      	ldr	r3, [r3, #4]
 81090b0:	1ad3      	subs	r3, r2, r3
 81090b2:	4a18      	ldr	r2, [pc, #96]	; (8109114 <pvPortMalloc+0x178>)
 81090b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81090b6:	4b17      	ldr	r3, [pc, #92]	; (8109114 <pvPortMalloc+0x178>)
 81090b8:	681a      	ldr	r2, [r3, #0]
 81090ba:	4b18      	ldr	r3, [pc, #96]	; (810911c <pvPortMalloc+0x180>)
 81090bc:	681b      	ldr	r3, [r3, #0]
 81090be:	429a      	cmp	r2, r3
 81090c0:	d203      	bcs.n	81090ca <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81090c2:	4b14      	ldr	r3, [pc, #80]	; (8109114 <pvPortMalloc+0x178>)
 81090c4:	681b      	ldr	r3, [r3, #0]
 81090c6:	4a15      	ldr	r2, [pc, #84]	; (810911c <pvPortMalloc+0x180>)
 81090c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81090cc:	685a      	ldr	r2, [r3, #4]
 81090ce:	4b10      	ldr	r3, [pc, #64]	; (8109110 <pvPortMalloc+0x174>)
 81090d0:	681b      	ldr	r3, [r3, #0]
 81090d2:	431a      	orrs	r2, r3
 81090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81090d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81090da:	2200      	movs	r2, #0
 81090dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81090de:	f001 fa89 	bl	810a5f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81090e2:	69fb      	ldr	r3, [r7, #28]
 81090e4:	f003 0307 	and.w	r3, r3, #7
 81090e8:	2b00      	cmp	r3, #0
 81090ea:	d009      	beq.n	8109100 <pvPortMalloc+0x164>
 81090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81090f0:	f383 8811 	msr	BASEPRI, r3
 81090f4:	f3bf 8f6f 	isb	sy
 81090f8:	f3bf 8f4f 	dsb	sy
 81090fc:	60fb      	str	r3, [r7, #12]
 81090fe:	e7fe      	b.n	81090fe <pvPortMalloc+0x162>
	return pvReturn;
 8109100:	69fb      	ldr	r3, [r7, #28]
}
 8109102:	4618      	mov	r0, r3
 8109104:	3728      	adds	r7, #40	; 0x28
 8109106:	46bd      	mov	sp, r7
 8109108:	bd80      	pop	{r7, pc}
 810910a:	bf00      	nop
 810910c:	10004098 	.word	0x10004098
 8109110:	100040a4 	.word	0x100040a4
 8109114:	1000409c 	.word	0x1000409c
 8109118:	10004090 	.word	0x10004090
 810911c:	100040a0 	.word	0x100040a0

08109120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8109120:	b580      	push	{r7, lr}
 8109122:	b086      	sub	sp, #24
 8109124:	af00      	add	r7, sp, #0
 8109126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8109128:	687b      	ldr	r3, [r7, #4]
 810912a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	2b00      	cmp	r3, #0
 8109130:	d046      	beq.n	81091c0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8109132:	2308      	movs	r3, #8
 8109134:	425b      	negs	r3, r3
 8109136:	697a      	ldr	r2, [r7, #20]
 8109138:	4413      	add	r3, r2
 810913a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810913c:	697b      	ldr	r3, [r7, #20]
 810913e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8109140:	693b      	ldr	r3, [r7, #16]
 8109142:	685a      	ldr	r2, [r3, #4]
 8109144:	4b20      	ldr	r3, [pc, #128]	; (81091c8 <vPortFree+0xa8>)
 8109146:	681b      	ldr	r3, [r3, #0]
 8109148:	4013      	ands	r3, r2
 810914a:	2b00      	cmp	r3, #0
 810914c:	d109      	bne.n	8109162 <vPortFree+0x42>
 810914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109152:	f383 8811 	msr	BASEPRI, r3
 8109156:	f3bf 8f6f 	isb	sy
 810915a:	f3bf 8f4f 	dsb	sy
 810915e:	60fb      	str	r3, [r7, #12]
 8109160:	e7fe      	b.n	8109160 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8109162:	693b      	ldr	r3, [r7, #16]
 8109164:	681b      	ldr	r3, [r3, #0]
 8109166:	2b00      	cmp	r3, #0
 8109168:	d009      	beq.n	810917e <vPortFree+0x5e>
 810916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810916e:	f383 8811 	msr	BASEPRI, r3
 8109172:	f3bf 8f6f 	isb	sy
 8109176:	f3bf 8f4f 	dsb	sy
 810917a:	60bb      	str	r3, [r7, #8]
 810917c:	e7fe      	b.n	810917c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810917e:	693b      	ldr	r3, [r7, #16]
 8109180:	685a      	ldr	r2, [r3, #4]
 8109182:	4b11      	ldr	r3, [pc, #68]	; (81091c8 <vPortFree+0xa8>)
 8109184:	681b      	ldr	r3, [r3, #0]
 8109186:	4013      	ands	r3, r2
 8109188:	2b00      	cmp	r3, #0
 810918a:	d019      	beq.n	81091c0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810918c:	693b      	ldr	r3, [r7, #16]
 810918e:	681b      	ldr	r3, [r3, #0]
 8109190:	2b00      	cmp	r3, #0
 8109192:	d115      	bne.n	81091c0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8109194:	693b      	ldr	r3, [r7, #16]
 8109196:	685a      	ldr	r2, [r3, #4]
 8109198:	4b0b      	ldr	r3, [pc, #44]	; (81091c8 <vPortFree+0xa8>)
 810919a:	681b      	ldr	r3, [r3, #0]
 810919c:	43db      	mvns	r3, r3
 810919e:	401a      	ands	r2, r3
 81091a0:	693b      	ldr	r3, [r7, #16]
 81091a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81091a4:	f001 fa18 	bl	810a5d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81091a8:	693b      	ldr	r3, [r7, #16]
 81091aa:	685a      	ldr	r2, [r3, #4]
 81091ac:	4b07      	ldr	r3, [pc, #28]	; (81091cc <vPortFree+0xac>)
 81091ae:	681b      	ldr	r3, [r3, #0]
 81091b0:	4413      	add	r3, r2
 81091b2:	4a06      	ldr	r2, [pc, #24]	; (81091cc <vPortFree+0xac>)
 81091b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81091b6:	6938      	ldr	r0, [r7, #16]
 81091b8:	f000 f86c 	bl	8109294 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 81091bc:	f001 fa1a 	bl	810a5f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81091c0:	bf00      	nop
 81091c2:	3718      	adds	r7, #24
 81091c4:	46bd      	mov	sp, r7
 81091c6:	bd80      	pop	{r7, pc}
 81091c8:	100040a4 	.word	0x100040a4
 81091cc:	1000409c 	.word	0x1000409c

081091d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81091d0:	b480      	push	{r7}
 81091d2:	b085      	sub	sp, #20
 81091d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81091d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 81091da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81091dc:	4b27      	ldr	r3, [pc, #156]	; (810927c <prvHeapInit+0xac>)
 81091de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81091e0:	68fb      	ldr	r3, [r7, #12]
 81091e2:	f003 0307 	and.w	r3, r3, #7
 81091e6:	2b00      	cmp	r3, #0
 81091e8:	d00c      	beq.n	8109204 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81091ea:	68fb      	ldr	r3, [r7, #12]
 81091ec:	3307      	adds	r3, #7
 81091ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81091f0:	68fb      	ldr	r3, [r7, #12]
 81091f2:	f023 0307 	bic.w	r3, r3, #7
 81091f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81091f8:	68ba      	ldr	r2, [r7, #8]
 81091fa:	68fb      	ldr	r3, [r7, #12]
 81091fc:	1ad3      	subs	r3, r2, r3
 81091fe:	4a1f      	ldr	r2, [pc, #124]	; (810927c <prvHeapInit+0xac>)
 8109200:	4413      	add	r3, r2
 8109202:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8109204:	68fb      	ldr	r3, [r7, #12]
 8109206:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8109208:	4a1d      	ldr	r2, [pc, #116]	; (8109280 <prvHeapInit+0xb0>)
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810920e:	4b1c      	ldr	r3, [pc, #112]	; (8109280 <prvHeapInit+0xb0>)
 8109210:	2200      	movs	r2, #0
 8109212:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8109214:	687b      	ldr	r3, [r7, #4]
 8109216:	68ba      	ldr	r2, [r7, #8]
 8109218:	4413      	add	r3, r2
 810921a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810921c:	2208      	movs	r2, #8
 810921e:	68fb      	ldr	r3, [r7, #12]
 8109220:	1a9b      	subs	r3, r3, r2
 8109222:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109224:	68fb      	ldr	r3, [r7, #12]
 8109226:	f023 0307 	bic.w	r3, r3, #7
 810922a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810922c:	68fb      	ldr	r3, [r7, #12]
 810922e:	4a15      	ldr	r2, [pc, #84]	; (8109284 <prvHeapInit+0xb4>)
 8109230:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8109232:	4b14      	ldr	r3, [pc, #80]	; (8109284 <prvHeapInit+0xb4>)
 8109234:	681b      	ldr	r3, [r3, #0]
 8109236:	2200      	movs	r2, #0
 8109238:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810923a:	4b12      	ldr	r3, [pc, #72]	; (8109284 <prvHeapInit+0xb4>)
 810923c:	681b      	ldr	r3, [r3, #0]
 810923e:	2200      	movs	r2, #0
 8109240:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8109246:	683b      	ldr	r3, [r7, #0]
 8109248:	68fa      	ldr	r2, [r7, #12]
 810924a:	1ad2      	subs	r2, r2, r3
 810924c:	683b      	ldr	r3, [r7, #0]
 810924e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8109250:	4b0c      	ldr	r3, [pc, #48]	; (8109284 <prvHeapInit+0xb4>)
 8109252:	681a      	ldr	r2, [r3, #0]
 8109254:	683b      	ldr	r3, [r7, #0]
 8109256:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109258:	683b      	ldr	r3, [r7, #0]
 810925a:	685b      	ldr	r3, [r3, #4]
 810925c:	4a0a      	ldr	r2, [pc, #40]	; (8109288 <prvHeapInit+0xb8>)
 810925e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109260:	683b      	ldr	r3, [r7, #0]
 8109262:	685b      	ldr	r3, [r3, #4]
 8109264:	4a09      	ldr	r2, [pc, #36]	; (810928c <prvHeapInit+0xbc>)
 8109266:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8109268:	4b09      	ldr	r3, [pc, #36]	; (8109290 <prvHeapInit+0xc0>)
 810926a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810926e:	601a      	str	r2, [r3, #0]
}
 8109270:	bf00      	nop
 8109272:	3714      	adds	r7, #20
 8109274:	46bd      	mov	sp, r7
 8109276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810927a:	4770      	bx	lr
 810927c:	10000490 	.word	0x10000490
 8109280:	10004090 	.word	0x10004090
 8109284:	10004098 	.word	0x10004098
 8109288:	100040a0 	.word	0x100040a0
 810928c:	1000409c 	.word	0x1000409c
 8109290:	100040a4 	.word	0x100040a4

08109294 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8109294:	b480      	push	{r7}
 8109296:	b085      	sub	sp, #20
 8109298:	af00      	add	r7, sp, #0
 810929a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810929c:	4b28      	ldr	r3, [pc, #160]	; (8109340 <prvInsertBlockIntoFreeList+0xac>)
 810929e:	60fb      	str	r3, [r7, #12]
 81092a0:	e002      	b.n	81092a8 <prvInsertBlockIntoFreeList+0x14>
 81092a2:	68fb      	ldr	r3, [r7, #12]
 81092a4:	681b      	ldr	r3, [r3, #0]
 81092a6:	60fb      	str	r3, [r7, #12]
 81092a8:	68fb      	ldr	r3, [r7, #12]
 81092aa:	681b      	ldr	r3, [r3, #0]
 81092ac:	687a      	ldr	r2, [r7, #4]
 81092ae:	429a      	cmp	r2, r3
 81092b0:	d8f7      	bhi.n	81092a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81092b2:	68fb      	ldr	r3, [r7, #12]
 81092b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81092b6:	68fb      	ldr	r3, [r7, #12]
 81092b8:	685b      	ldr	r3, [r3, #4]
 81092ba:	68ba      	ldr	r2, [r7, #8]
 81092bc:	4413      	add	r3, r2
 81092be:	687a      	ldr	r2, [r7, #4]
 81092c0:	429a      	cmp	r2, r3
 81092c2:	d108      	bne.n	81092d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81092c4:	68fb      	ldr	r3, [r7, #12]
 81092c6:	685a      	ldr	r2, [r3, #4]
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	685b      	ldr	r3, [r3, #4]
 81092cc:	441a      	add	r2, r3
 81092ce:	68fb      	ldr	r3, [r7, #12]
 81092d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81092d2:	68fb      	ldr	r3, [r7, #12]
 81092d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81092d6:	687b      	ldr	r3, [r7, #4]
 81092d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	685b      	ldr	r3, [r3, #4]
 81092de:	68ba      	ldr	r2, [r7, #8]
 81092e0:	441a      	add	r2, r3
 81092e2:	68fb      	ldr	r3, [r7, #12]
 81092e4:	681b      	ldr	r3, [r3, #0]
 81092e6:	429a      	cmp	r2, r3
 81092e8:	d118      	bne.n	810931c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81092ea:	68fb      	ldr	r3, [r7, #12]
 81092ec:	681a      	ldr	r2, [r3, #0]
 81092ee:	4b15      	ldr	r3, [pc, #84]	; (8109344 <prvInsertBlockIntoFreeList+0xb0>)
 81092f0:	681b      	ldr	r3, [r3, #0]
 81092f2:	429a      	cmp	r2, r3
 81092f4:	d00d      	beq.n	8109312 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81092f6:	687b      	ldr	r3, [r7, #4]
 81092f8:	685a      	ldr	r2, [r3, #4]
 81092fa:	68fb      	ldr	r3, [r7, #12]
 81092fc:	681b      	ldr	r3, [r3, #0]
 81092fe:	685b      	ldr	r3, [r3, #4]
 8109300:	441a      	add	r2, r3
 8109302:	687b      	ldr	r3, [r7, #4]
 8109304:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8109306:	68fb      	ldr	r3, [r7, #12]
 8109308:	681b      	ldr	r3, [r3, #0]
 810930a:	681a      	ldr	r2, [r3, #0]
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	601a      	str	r2, [r3, #0]
 8109310:	e008      	b.n	8109324 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8109312:	4b0c      	ldr	r3, [pc, #48]	; (8109344 <prvInsertBlockIntoFreeList+0xb0>)
 8109314:	681a      	ldr	r2, [r3, #0]
 8109316:	687b      	ldr	r3, [r7, #4]
 8109318:	601a      	str	r2, [r3, #0]
 810931a:	e003      	b.n	8109324 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810931c:	68fb      	ldr	r3, [r7, #12]
 810931e:	681a      	ldr	r2, [r3, #0]
 8109320:	687b      	ldr	r3, [r7, #4]
 8109322:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8109324:	68fa      	ldr	r2, [r7, #12]
 8109326:	687b      	ldr	r3, [r7, #4]
 8109328:	429a      	cmp	r2, r3
 810932a:	d002      	beq.n	8109332 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810932c:	68fb      	ldr	r3, [r7, #12]
 810932e:	687a      	ldr	r2, [r7, #4]
 8109330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109332:	bf00      	nop
 8109334:	3714      	adds	r7, #20
 8109336:	46bd      	mov	sp, r7
 8109338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810933c:	4770      	bx	lr
 810933e:	bf00      	nop
 8109340:	10004090 	.word	0x10004090
 8109344:	10004098 	.word	0x10004098

08109348 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8109348:	b480      	push	{r7}
 810934a:	b083      	sub	sp, #12
 810934c:	af00      	add	r7, sp, #0
 810934e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109350:	687b      	ldr	r3, [r7, #4]
 8109352:	f103 0208 	add.w	r2, r3, #8
 8109356:	687b      	ldr	r3, [r7, #4]
 8109358:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	f04f 32ff 	mov.w	r2, #4294967295
 8109360:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109362:	687b      	ldr	r3, [r7, #4]
 8109364:	f103 0208 	add.w	r2, r3, #8
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810936c:	687b      	ldr	r3, [r7, #4]
 810936e:	f103 0208 	add.w	r2, r3, #8
 8109372:	687b      	ldr	r3, [r7, #4]
 8109374:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8109376:	687b      	ldr	r3, [r7, #4]
 8109378:	2200      	movs	r2, #0
 810937a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810937c:	bf00      	nop
 810937e:	370c      	adds	r7, #12
 8109380:	46bd      	mov	sp, r7
 8109382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109386:	4770      	bx	lr

08109388 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8109388:	b480      	push	{r7}
 810938a:	b083      	sub	sp, #12
 810938c:	af00      	add	r7, sp, #0
 810938e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	2200      	movs	r2, #0
 8109394:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8109396:	bf00      	nop
 8109398:	370c      	adds	r7, #12
 810939a:	46bd      	mov	sp, r7
 810939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093a0:	4770      	bx	lr

081093a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81093a2:	b480      	push	{r7}
 81093a4:	b085      	sub	sp, #20
 81093a6:	af00      	add	r7, sp, #0
 81093a8:	6078      	str	r0, [r7, #4]
 81093aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81093ac:	687b      	ldr	r3, [r7, #4]
 81093ae:	685b      	ldr	r3, [r3, #4]
 81093b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81093b2:	683b      	ldr	r3, [r7, #0]
 81093b4:	68fa      	ldr	r2, [r7, #12]
 81093b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81093b8:	68fb      	ldr	r3, [r7, #12]
 81093ba:	689a      	ldr	r2, [r3, #8]
 81093bc:	683b      	ldr	r3, [r7, #0]
 81093be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81093c0:	68fb      	ldr	r3, [r7, #12]
 81093c2:	689b      	ldr	r3, [r3, #8]
 81093c4:	683a      	ldr	r2, [r7, #0]
 81093c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81093c8:	68fb      	ldr	r3, [r7, #12]
 81093ca:	683a      	ldr	r2, [r7, #0]
 81093cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81093ce:	683b      	ldr	r3, [r7, #0]
 81093d0:	687a      	ldr	r2, [r7, #4]
 81093d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81093d4:	687b      	ldr	r3, [r7, #4]
 81093d6:	681b      	ldr	r3, [r3, #0]
 81093d8:	1c5a      	adds	r2, r3, #1
 81093da:	687b      	ldr	r3, [r7, #4]
 81093dc:	601a      	str	r2, [r3, #0]
}
 81093de:	bf00      	nop
 81093e0:	3714      	adds	r7, #20
 81093e2:	46bd      	mov	sp, r7
 81093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093e8:	4770      	bx	lr

081093ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81093ea:	b480      	push	{r7}
 81093ec:	b085      	sub	sp, #20
 81093ee:	af00      	add	r7, sp, #0
 81093f0:	6078      	str	r0, [r7, #4]
 81093f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81093f4:	683b      	ldr	r3, [r7, #0]
 81093f6:	681b      	ldr	r3, [r3, #0]
 81093f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81093fa:	68bb      	ldr	r3, [r7, #8]
 81093fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109400:	d103      	bne.n	810940a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	691b      	ldr	r3, [r3, #16]
 8109406:	60fb      	str	r3, [r7, #12]
 8109408:	e00c      	b.n	8109424 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	3308      	adds	r3, #8
 810940e:	60fb      	str	r3, [r7, #12]
 8109410:	e002      	b.n	8109418 <vListInsert+0x2e>
 8109412:	68fb      	ldr	r3, [r7, #12]
 8109414:	685b      	ldr	r3, [r3, #4]
 8109416:	60fb      	str	r3, [r7, #12]
 8109418:	68fb      	ldr	r3, [r7, #12]
 810941a:	685b      	ldr	r3, [r3, #4]
 810941c:	681b      	ldr	r3, [r3, #0]
 810941e:	68ba      	ldr	r2, [r7, #8]
 8109420:	429a      	cmp	r2, r3
 8109422:	d2f6      	bcs.n	8109412 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8109424:	68fb      	ldr	r3, [r7, #12]
 8109426:	685a      	ldr	r2, [r3, #4]
 8109428:	683b      	ldr	r3, [r7, #0]
 810942a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810942c:	683b      	ldr	r3, [r7, #0]
 810942e:	685b      	ldr	r3, [r3, #4]
 8109430:	683a      	ldr	r2, [r7, #0]
 8109432:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8109434:	683b      	ldr	r3, [r7, #0]
 8109436:	68fa      	ldr	r2, [r7, #12]
 8109438:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810943a:	68fb      	ldr	r3, [r7, #12]
 810943c:	683a      	ldr	r2, [r7, #0]
 810943e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8109440:	683b      	ldr	r3, [r7, #0]
 8109442:	687a      	ldr	r2, [r7, #4]
 8109444:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109446:	687b      	ldr	r3, [r7, #4]
 8109448:	681b      	ldr	r3, [r3, #0]
 810944a:	1c5a      	adds	r2, r3, #1
 810944c:	687b      	ldr	r3, [r7, #4]
 810944e:	601a      	str	r2, [r3, #0]
}
 8109450:	bf00      	nop
 8109452:	3714      	adds	r7, #20
 8109454:	46bd      	mov	sp, r7
 8109456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810945a:	4770      	bx	lr

0810945c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810945c:	b480      	push	{r7}
 810945e:	b085      	sub	sp, #20
 8109460:	af00      	add	r7, sp, #0
 8109462:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8109464:	687b      	ldr	r3, [r7, #4]
 8109466:	691b      	ldr	r3, [r3, #16]
 8109468:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810946a:	687b      	ldr	r3, [r7, #4]
 810946c:	685b      	ldr	r3, [r3, #4]
 810946e:	687a      	ldr	r2, [r7, #4]
 8109470:	6892      	ldr	r2, [r2, #8]
 8109472:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8109474:	687b      	ldr	r3, [r7, #4]
 8109476:	689b      	ldr	r3, [r3, #8]
 8109478:	687a      	ldr	r2, [r7, #4]
 810947a:	6852      	ldr	r2, [r2, #4]
 810947c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810947e:	68fb      	ldr	r3, [r7, #12]
 8109480:	685b      	ldr	r3, [r3, #4]
 8109482:	687a      	ldr	r2, [r7, #4]
 8109484:	429a      	cmp	r2, r3
 8109486:	d103      	bne.n	8109490 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8109488:	687b      	ldr	r3, [r7, #4]
 810948a:	689a      	ldr	r2, [r3, #8]
 810948c:	68fb      	ldr	r3, [r7, #12]
 810948e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8109490:	687b      	ldr	r3, [r7, #4]
 8109492:	2200      	movs	r2, #0
 8109494:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8109496:	68fb      	ldr	r3, [r7, #12]
 8109498:	681b      	ldr	r3, [r3, #0]
 810949a:	1e5a      	subs	r2, r3, #1
 810949c:	68fb      	ldr	r3, [r7, #12]
 810949e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81094a0:	68fb      	ldr	r3, [r7, #12]
 81094a2:	681b      	ldr	r3, [r3, #0]
}
 81094a4:	4618      	mov	r0, r3
 81094a6:	3714      	adds	r7, #20
 81094a8:	46bd      	mov	sp, r7
 81094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094ae:	4770      	bx	lr

081094b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81094b0:	b480      	push	{r7}
 81094b2:	b085      	sub	sp, #20
 81094b4:	af00      	add	r7, sp, #0
 81094b6:	60f8      	str	r0, [r7, #12]
 81094b8:	60b9      	str	r1, [r7, #8]
 81094ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81094bc:	68fb      	ldr	r3, [r7, #12]
 81094be:	3b04      	subs	r3, #4
 81094c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81094c2:	68fb      	ldr	r3, [r7, #12]
 81094c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81094c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81094ca:	68fb      	ldr	r3, [r7, #12]
 81094cc:	3b04      	subs	r3, #4
 81094ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81094d0:	68bb      	ldr	r3, [r7, #8]
 81094d2:	f023 0201 	bic.w	r2, r3, #1
 81094d6:	68fb      	ldr	r3, [r7, #12]
 81094d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81094da:	68fb      	ldr	r3, [r7, #12]
 81094dc:	3b04      	subs	r3, #4
 81094de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81094e0:	4a0c      	ldr	r2, [pc, #48]	; (8109514 <pxPortInitialiseStack+0x64>)
 81094e2:	68fb      	ldr	r3, [r7, #12]
 81094e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81094e6:	68fb      	ldr	r3, [r7, #12]
 81094e8:	3b14      	subs	r3, #20
 81094ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81094ec:	687a      	ldr	r2, [r7, #4]
 81094ee:	68fb      	ldr	r3, [r7, #12]
 81094f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81094f2:	68fb      	ldr	r3, [r7, #12]
 81094f4:	3b04      	subs	r3, #4
 81094f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81094f8:	68fb      	ldr	r3, [r7, #12]
 81094fa:	f06f 0202 	mvn.w	r2, #2
 81094fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8109500:	68fb      	ldr	r3, [r7, #12]
 8109502:	3b20      	subs	r3, #32
 8109504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8109506:	68fb      	ldr	r3, [r7, #12]
}
 8109508:	4618      	mov	r0, r3
 810950a:	3714      	adds	r7, #20
 810950c:	46bd      	mov	sp, r7
 810950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109512:	4770      	bx	lr
 8109514:	08109519 	.word	0x08109519

08109518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8109518:	b480      	push	{r7}
 810951a:	b085      	sub	sp, #20
 810951c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810951e:	2300      	movs	r3, #0
 8109520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8109522:	4b11      	ldr	r3, [pc, #68]	; (8109568 <prvTaskExitError+0x50>)
 8109524:	681b      	ldr	r3, [r3, #0]
 8109526:	f1b3 3fff 	cmp.w	r3, #4294967295
 810952a:	d009      	beq.n	8109540 <prvTaskExitError+0x28>
 810952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109530:	f383 8811 	msr	BASEPRI, r3
 8109534:	f3bf 8f6f 	isb	sy
 8109538:	f3bf 8f4f 	dsb	sy
 810953c:	60fb      	str	r3, [r7, #12]
 810953e:	e7fe      	b.n	810953e <prvTaskExitError+0x26>
 8109540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109544:	f383 8811 	msr	BASEPRI, r3
 8109548:	f3bf 8f6f 	isb	sy
 810954c:	f3bf 8f4f 	dsb	sy
 8109550:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8109552:	bf00      	nop
 8109554:	687b      	ldr	r3, [r7, #4]
 8109556:	2b00      	cmp	r3, #0
 8109558:	d0fc      	beq.n	8109554 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810955a:	bf00      	nop
 810955c:	3714      	adds	r7, #20
 810955e:	46bd      	mov	sp, r7
 8109560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109564:	4770      	bx	lr
 8109566:	bf00      	nop
 8109568:	10000024 	.word	0x10000024
 810956c:	00000000 	.word	0x00000000

08109570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8109570:	4b07      	ldr	r3, [pc, #28]	; (8109590 <pxCurrentTCBConst2>)
 8109572:	6819      	ldr	r1, [r3, #0]
 8109574:	6808      	ldr	r0, [r1, #0]
 8109576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810957a:	f380 8809 	msr	PSP, r0
 810957e:	f3bf 8f6f 	isb	sy
 8109582:	f04f 0000 	mov.w	r0, #0
 8109586:	f380 8811 	msr	BASEPRI, r0
 810958a:	4770      	bx	lr
 810958c:	f3af 8000 	nop.w

08109590 <pxCurrentTCBConst2>:
 8109590:	100040b0 	.word	0x100040b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8109594:	bf00      	nop
 8109596:	bf00      	nop

08109598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8109598:	4808      	ldr	r0, [pc, #32]	; (81095bc <prvPortStartFirstTask+0x24>)
 810959a:	6800      	ldr	r0, [r0, #0]
 810959c:	6800      	ldr	r0, [r0, #0]
 810959e:	f380 8808 	msr	MSP, r0
 81095a2:	f04f 0000 	mov.w	r0, #0
 81095a6:	f380 8814 	msr	CONTROL, r0
 81095aa:	b662      	cpsie	i
 81095ac:	b661      	cpsie	f
 81095ae:	f3bf 8f4f 	dsb	sy
 81095b2:	f3bf 8f6f 	isb	sy
 81095b6:	df00      	svc	0
 81095b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81095ba:	bf00      	nop
 81095bc:	e000ed08 	.word	0xe000ed08

081095c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81095c0:	b580      	push	{r7, lr}
 81095c2:	b086      	sub	sp, #24
 81095c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81095c6:	4b44      	ldr	r3, [pc, #272]	; (81096d8 <xPortStartScheduler+0x118>)
 81095c8:	681b      	ldr	r3, [r3, #0]
 81095ca:	4a44      	ldr	r2, [pc, #272]	; (81096dc <xPortStartScheduler+0x11c>)
 81095cc:	4293      	cmp	r3, r2
 81095ce:	d109      	bne.n	81095e4 <xPortStartScheduler+0x24>
 81095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095d4:	f383 8811 	msr	BASEPRI, r3
 81095d8:	f3bf 8f6f 	isb	sy
 81095dc:	f3bf 8f4f 	dsb	sy
 81095e0:	613b      	str	r3, [r7, #16]
 81095e2:	e7fe      	b.n	81095e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81095e4:	4b3c      	ldr	r3, [pc, #240]	; (81096d8 <xPortStartScheduler+0x118>)
 81095e6:	681b      	ldr	r3, [r3, #0]
 81095e8:	4a3d      	ldr	r2, [pc, #244]	; (81096e0 <xPortStartScheduler+0x120>)
 81095ea:	4293      	cmp	r3, r2
 81095ec:	d109      	bne.n	8109602 <xPortStartScheduler+0x42>
 81095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095f2:	f383 8811 	msr	BASEPRI, r3
 81095f6:	f3bf 8f6f 	isb	sy
 81095fa:	f3bf 8f4f 	dsb	sy
 81095fe:	60fb      	str	r3, [r7, #12]
 8109600:	e7fe      	b.n	8109600 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8109602:	4b38      	ldr	r3, [pc, #224]	; (81096e4 <xPortStartScheduler+0x124>)
 8109604:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8109606:	697b      	ldr	r3, [r7, #20]
 8109608:	781b      	ldrb	r3, [r3, #0]
 810960a:	b2db      	uxtb	r3, r3
 810960c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810960e:	697b      	ldr	r3, [r7, #20]
 8109610:	22ff      	movs	r2, #255	; 0xff
 8109612:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8109614:	697b      	ldr	r3, [r7, #20]
 8109616:	781b      	ldrb	r3, [r3, #0]
 8109618:	b2db      	uxtb	r3, r3
 810961a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810961c:	78fb      	ldrb	r3, [r7, #3]
 810961e:	b2db      	uxtb	r3, r3
 8109620:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8109624:	b2da      	uxtb	r2, r3
 8109626:	4b30      	ldr	r3, [pc, #192]	; (81096e8 <xPortStartScheduler+0x128>)
 8109628:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810962a:	4b30      	ldr	r3, [pc, #192]	; (81096ec <xPortStartScheduler+0x12c>)
 810962c:	2207      	movs	r2, #7
 810962e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109630:	e009      	b.n	8109646 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8109632:	4b2e      	ldr	r3, [pc, #184]	; (81096ec <xPortStartScheduler+0x12c>)
 8109634:	681b      	ldr	r3, [r3, #0]
 8109636:	3b01      	subs	r3, #1
 8109638:	4a2c      	ldr	r2, [pc, #176]	; (81096ec <xPortStartScheduler+0x12c>)
 810963a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810963c:	78fb      	ldrb	r3, [r7, #3]
 810963e:	b2db      	uxtb	r3, r3
 8109640:	005b      	lsls	r3, r3, #1
 8109642:	b2db      	uxtb	r3, r3
 8109644:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109646:	78fb      	ldrb	r3, [r7, #3]
 8109648:	b2db      	uxtb	r3, r3
 810964a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810964e:	2b80      	cmp	r3, #128	; 0x80
 8109650:	d0ef      	beq.n	8109632 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8109652:	4b26      	ldr	r3, [pc, #152]	; (81096ec <xPortStartScheduler+0x12c>)
 8109654:	681b      	ldr	r3, [r3, #0]
 8109656:	f1c3 0307 	rsb	r3, r3, #7
 810965a:	2b04      	cmp	r3, #4
 810965c:	d009      	beq.n	8109672 <xPortStartScheduler+0xb2>
 810965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109662:	f383 8811 	msr	BASEPRI, r3
 8109666:	f3bf 8f6f 	isb	sy
 810966a:	f3bf 8f4f 	dsb	sy
 810966e:	60bb      	str	r3, [r7, #8]
 8109670:	e7fe      	b.n	8109670 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8109672:	4b1e      	ldr	r3, [pc, #120]	; (81096ec <xPortStartScheduler+0x12c>)
 8109674:	681b      	ldr	r3, [r3, #0]
 8109676:	021b      	lsls	r3, r3, #8
 8109678:	4a1c      	ldr	r2, [pc, #112]	; (81096ec <xPortStartScheduler+0x12c>)
 810967a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810967c:	4b1b      	ldr	r3, [pc, #108]	; (81096ec <xPortStartScheduler+0x12c>)
 810967e:	681b      	ldr	r3, [r3, #0]
 8109680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109684:	4a19      	ldr	r2, [pc, #100]	; (81096ec <xPortStartScheduler+0x12c>)
 8109686:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8109688:	687b      	ldr	r3, [r7, #4]
 810968a:	b2da      	uxtb	r2, r3
 810968c:	697b      	ldr	r3, [r7, #20]
 810968e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8109690:	4b17      	ldr	r3, [pc, #92]	; (81096f0 <xPortStartScheduler+0x130>)
 8109692:	681b      	ldr	r3, [r3, #0]
 8109694:	4a16      	ldr	r2, [pc, #88]	; (81096f0 <xPortStartScheduler+0x130>)
 8109696:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810969a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810969c:	4b14      	ldr	r3, [pc, #80]	; (81096f0 <xPortStartScheduler+0x130>)
 810969e:	681b      	ldr	r3, [r3, #0]
 81096a0:	4a13      	ldr	r2, [pc, #76]	; (81096f0 <xPortStartScheduler+0x130>)
 81096a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 81096a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81096a8:	f000 f8d6 	bl	8109858 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81096ac:	4b11      	ldr	r3, [pc, #68]	; (81096f4 <xPortStartScheduler+0x134>)
 81096ae:	2200      	movs	r2, #0
 81096b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81096b2:	f000 f8f5 	bl	81098a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81096b6:	4b10      	ldr	r3, [pc, #64]	; (81096f8 <xPortStartScheduler+0x138>)
 81096b8:	681b      	ldr	r3, [r3, #0]
 81096ba:	4a0f      	ldr	r2, [pc, #60]	; (81096f8 <xPortStartScheduler+0x138>)
 81096bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 81096c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81096c2:	f7ff ff69 	bl	8109598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81096c6:	f001 f8e9 	bl	810a89c <vTaskSwitchContext>
	prvTaskExitError();
 81096ca:	f7ff ff25 	bl	8109518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81096ce:	2300      	movs	r3, #0
}
 81096d0:	4618      	mov	r0, r3
 81096d2:	3718      	adds	r7, #24
 81096d4:	46bd      	mov	sp, r7
 81096d6:	bd80      	pop	{r7, pc}
 81096d8:	e000ed00 	.word	0xe000ed00
 81096dc:	410fc271 	.word	0x410fc271
 81096e0:	410fc270 	.word	0x410fc270
 81096e4:	e000e400 	.word	0xe000e400
 81096e8:	100040a8 	.word	0x100040a8
 81096ec:	100040ac 	.word	0x100040ac
 81096f0:	e000ed20 	.word	0xe000ed20
 81096f4:	10000024 	.word	0x10000024
 81096f8:	e000ef34 	.word	0xe000ef34

081096fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81096fc:	b480      	push	{r7}
 81096fe:	b083      	sub	sp, #12
 8109700:	af00      	add	r7, sp, #0
 8109702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109706:	f383 8811 	msr	BASEPRI, r3
 810970a:	f3bf 8f6f 	isb	sy
 810970e:	f3bf 8f4f 	dsb	sy
 8109712:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8109714:	4b0e      	ldr	r3, [pc, #56]	; (8109750 <vPortEnterCritical+0x54>)
 8109716:	681b      	ldr	r3, [r3, #0]
 8109718:	3301      	adds	r3, #1
 810971a:	4a0d      	ldr	r2, [pc, #52]	; (8109750 <vPortEnterCritical+0x54>)
 810971c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810971e:	4b0c      	ldr	r3, [pc, #48]	; (8109750 <vPortEnterCritical+0x54>)
 8109720:	681b      	ldr	r3, [r3, #0]
 8109722:	2b01      	cmp	r3, #1
 8109724:	d10e      	bne.n	8109744 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8109726:	4b0b      	ldr	r3, [pc, #44]	; (8109754 <vPortEnterCritical+0x58>)
 8109728:	681b      	ldr	r3, [r3, #0]
 810972a:	b2db      	uxtb	r3, r3
 810972c:	2b00      	cmp	r3, #0
 810972e:	d009      	beq.n	8109744 <vPortEnterCritical+0x48>
 8109730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109734:	f383 8811 	msr	BASEPRI, r3
 8109738:	f3bf 8f6f 	isb	sy
 810973c:	f3bf 8f4f 	dsb	sy
 8109740:	603b      	str	r3, [r7, #0]
 8109742:	e7fe      	b.n	8109742 <vPortEnterCritical+0x46>
	}
}
 8109744:	bf00      	nop
 8109746:	370c      	adds	r7, #12
 8109748:	46bd      	mov	sp, r7
 810974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810974e:	4770      	bx	lr
 8109750:	10000024 	.word	0x10000024
 8109754:	e000ed04 	.word	0xe000ed04

08109758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8109758:	b480      	push	{r7}
 810975a:	b083      	sub	sp, #12
 810975c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810975e:	4b11      	ldr	r3, [pc, #68]	; (81097a4 <vPortExitCritical+0x4c>)
 8109760:	681b      	ldr	r3, [r3, #0]
 8109762:	2b00      	cmp	r3, #0
 8109764:	d109      	bne.n	810977a <vPortExitCritical+0x22>
 8109766:	f04f 0350 	mov.w	r3, #80	; 0x50
 810976a:	f383 8811 	msr	BASEPRI, r3
 810976e:	f3bf 8f6f 	isb	sy
 8109772:	f3bf 8f4f 	dsb	sy
 8109776:	607b      	str	r3, [r7, #4]
 8109778:	e7fe      	b.n	8109778 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810977a:	4b0a      	ldr	r3, [pc, #40]	; (81097a4 <vPortExitCritical+0x4c>)
 810977c:	681b      	ldr	r3, [r3, #0]
 810977e:	3b01      	subs	r3, #1
 8109780:	4a08      	ldr	r2, [pc, #32]	; (81097a4 <vPortExitCritical+0x4c>)
 8109782:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8109784:	4b07      	ldr	r3, [pc, #28]	; (81097a4 <vPortExitCritical+0x4c>)
 8109786:	681b      	ldr	r3, [r3, #0]
 8109788:	2b00      	cmp	r3, #0
 810978a:	d104      	bne.n	8109796 <vPortExitCritical+0x3e>
 810978c:	2300      	movs	r3, #0
 810978e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8109790:	683b      	ldr	r3, [r7, #0]
 8109792:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8109796:	bf00      	nop
 8109798:	370c      	adds	r7, #12
 810979a:	46bd      	mov	sp, r7
 810979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097a0:	4770      	bx	lr
 81097a2:	bf00      	nop
 81097a4:	10000024 	.word	0x10000024
	...

081097b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81097b0:	f3ef 8009 	mrs	r0, PSP
 81097b4:	f3bf 8f6f 	isb	sy
 81097b8:	4b15      	ldr	r3, [pc, #84]	; (8109810 <pxCurrentTCBConst>)
 81097ba:	681a      	ldr	r2, [r3, #0]
 81097bc:	f01e 0f10 	tst.w	lr, #16
 81097c0:	bf08      	it	eq
 81097c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81097c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81097ca:	6010      	str	r0, [r2, #0]
 81097cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81097d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 81097d4:	f380 8811 	msr	BASEPRI, r0
 81097d8:	f3bf 8f4f 	dsb	sy
 81097dc:	f3bf 8f6f 	isb	sy
 81097e0:	f001 f85c 	bl	810a89c <vTaskSwitchContext>
 81097e4:	f04f 0000 	mov.w	r0, #0
 81097e8:	f380 8811 	msr	BASEPRI, r0
 81097ec:	bc09      	pop	{r0, r3}
 81097ee:	6819      	ldr	r1, [r3, #0]
 81097f0:	6808      	ldr	r0, [r1, #0]
 81097f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81097f6:	f01e 0f10 	tst.w	lr, #16
 81097fa:	bf08      	it	eq
 81097fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109800:	f380 8809 	msr	PSP, r0
 8109804:	f3bf 8f6f 	isb	sy
 8109808:	4770      	bx	lr
 810980a:	bf00      	nop
 810980c:	f3af 8000 	nop.w

08109810 <pxCurrentTCBConst>:
 8109810:	100040b0 	.word	0x100040b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109814:	bf00      	nop
 8109816:	bf00      	nop

08109818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109818:	b580      	push	{r7, lr}
 810981a:	b082      	sub	sp, #8
 810981c:	af00      	add	r7, sp, #0
	__asm volatile
 810981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109822:	f383 8811 	msr	BASEPRI, r3
 8109826:	f3bf 8f6f 	isb	sy
 810982a:	f3bf 8f4f 	dsb	sy
 810982e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109830:	f000 ff7c 	bl	810a72c <xTaskIncrementTick>
 8109834:	4603      	mov	r3, r0
 8109836:	2b00      	cmp	r3, #0
 8109838:	d003      	beq.n	8109842 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810983a:	4b06      	ldr	r3, [pc, #24]	; (8109854 <SysTick_Handler+0x3c>)
 810983c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109840:	601a      	str	r2, [r3, #0]
 8109842:	2300      	movs	r3, #0
 8109844:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109846:	683b      	ldr	r3, [r7, #0]
 8109848:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 810984c:	bf00      	nop
 810984e:	3708      	adds	r7, #8
 8109850:	46bd      	mov	sp, r7
 8109852:	bd80      	pop	{r7, pc}
 8109854:	e000ed04 	.word	0xe000ed04

08109858 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8109858:	b480      	push	{r7}
 810985a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810985c:	4b0b      	ldr	r3, [pc, #44]	; (810988c <vPortSetupTimerInterrupt+0x34>)
 810985e:	2200      	movs	r2, #0
 8109860:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109862:	4b0b      	ldr	r3, [pc, #44]	; (8109890 <vPortSetupTimerInterrupt+0x38>)
 8109864:	2200      	movs	r2, #0
 8109866:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8109868:	4b0a      	ldr	r3, [pc, #40]	; (8109894 <vPortSetupTimerInterrupt+0x3c>)
 810986a:	681b      	ldr	r3, [r3, #0]
 810986c:	4a0a      	ldr	r2, [pc, #40]	; (8109898 <vPortSetupTimerInterrupt+0x40>)
 810986e:	fba2 2303 	umull	r2, r3, r2, r3
 8109872:	099b      	lsrs	r3, r3, #6
 8109874:	4a09      	ldr	r2, [pc, #36]	; (810989c <vPortSetupTimerInterrupt+0x44>)
 8109876:	3b01      	subs	r3, #1
 8109878:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810987a:	4b04      	ldr	r3, [pc, #16]	; (810988c <vPortSetupTimerInterrupt+0x34>)
 810987c:	2207      	movs	r2, #7
 810987e:	601a      	str	r2, [r3, #0]
}
 8109880:	bf00      	nop
 8109882:	46bd      	mov	sp, r7
 8109884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109888:	4770      	bx	lr
 810988a:	bf00      	nop
 810988c:	e000e010 	.word	0xe000e010
 8109890:	e000e018 	.word	0xe000e018
 8109894:	10000004 	.word	0x10000004
 8109898:	10624dd3 	.word	0x10624dd3
 810989c:	e000e014 	.word	0xe000e014

081098a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81098a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81098b0 <vPortEnableVFP+0x10>
 81098a4:	6801      	ldr	r1, [r0, #0]
 81098a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81098aa:	6001      	str	r1, [r0, #0]
 81098ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81098ae:	bf00      	nop
 81098b0:	e000ed88 	.word	0xe000ed88

081098b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 81098b4:	b580      	push	{r7, lr}
 81098b6:	b084      	sub	sp, #16
 81098b8:	af00      	add	r7, sp, #0
 81098ba:	6078      	str	r0, [r7, #4]
 81098bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 81098be:	687b      	ldr	r3, [r7, #4]
 81098c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81098c2:	68fb      	ldr	r3, [r7, #12]
 81098c4:	2b00      	cmp	r3, #0
 81098c6:	d109      	bne.n	81098dc <xQueueGenericReset+0x28>
	__asm volatile
 81098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81098cc:	f383 8811 	msr	BASEPRI, r3
 81098d0:	f3bf 8f6f 	isb	sy
 81098d4:	f3bf 8f4f 	dsb	sy
 81098d8:	60bb      	str	r3, [r7, #8]
 81098da:	e7fe      	b.n	81098da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 81098dc:	f7ff ff0e 	bl	81096fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81098e0:	68fb      	ldr	r3, [r7, #12]
 81098e2:	681a      	ldr	r2, [r3, #0]
 81098e4:	68fb      	ldr	r3, [r7, #12]
 81098e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81098e8:	68f9      	ldr	r1, [r7, #12]
 81098ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81098ec:	fb01 f303 	mul.w	r3, r1, r3
 81098f0:	441a      	add	r2, r3
 81098f2:	68fb      	ldr	r3, [r7, #12]
 81098f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81098f6:	68fb      	ldr	r3, [r7, #12]
 81098f8:	2200      	movs	r2, #0
 81098fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81098fc:	68fb      	ldr	r3, [r7, #12]
 81098fe:	681a      	ldr	r2, [r3, #0]
 8109900:	68fb      	ldr	r3, [r7, #12]
 8109902:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109904:	68fb      	ldr	r3, [r7, #12]
 8109906:	681a      	ldr	r2, [r3, #0]
 8109908:	68fb      	ldr	r3, [r7, #12]
 810990a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810990c:	3b01      	subs	r3, #1
 810990e:	68f9      	ldr	r1, [r7, #12]
 8109910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8109912:	fb01 f303 	mul.w	r3, r1, r3
 8109916:	441a      	add	r2, r3
 8109918:	68fb      	ldr	r3, [r7, #12]
 810991a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810991c:	68fb      	ldr	r3, [r7, #12]
 810991e:	22ff      	movs	r2, #255	; 0xff
 8109920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8109924:	68fb      	ldr	r3, [r7, #12]
 8109926:	22ff      	movs	r2, #255	; 0xff
 8109928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 810992c:	683b      	ldr	r3, [r7, #0]
 810992e:	2b00      	cmp	r3, #0
 8109930:	d114      	bne.n	810995c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	691b      	ldr	r3, [r3, #16]
 8109936:	2b00      	cmp	r3, #0
 8109938:	d01a      	beq.n	8109970 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810993a:	68fb      	ldr	r3, [r7, #12]
 810993c:	3310      	adds	r3, #16
 810993e:	4618      	mov	r0, r3
 8109940:	f001 f82a 	bl	810a998 <xTaskRemoveFromEventList>
 8109944:	4603      	mov	r3, r0
 8109946:	2b00      	cmp	r3, #0
 8109948:	d012      	beq.n	8109970 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810994a:	4b0d      	ldr	r3, [pc, #52]	; (8109980 <xQueueGenericReset+0xcc>)
 810994c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109950:	601a      	str	r2, [r3, #0]
 8109952:	f3bf 8f4f 	dsb	sy
 8109956:	f3bf 8f6f 	isb	sy
 810995a:	e009      	b.n	8109970 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810995c:	68fb      	ldr	r3, [r7, #12]
 810995e:	3310      	adds	r3, #16
 8109960:	4618      	mov	r0, r3
 8109962:	f7ff fcf1 	bl	8109348 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8109966:	68fb      	ldr	r3, [r7, #12]
 8109968:	3324      	adds	r3, #36	; 0x24
 810996a:	4618      	mov	r0, r3
 810996c:	f7ff fcec 	bl	8109348 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8109970:	f7ff fef2 	bl	8109758 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8109974:	2301      	movs	r3, #1
}
 8109976:	4618      	mov	r0, r3
 8109978:	3710      	adds	r7, #16
 810997a:	46bd      	mov	sp, r7
 810997c:	bd80      	pop	{r7, pc}
 810997e:	bf00      	nop
 8109980:	e000ed04 	.word	0xe000ed04

08109984 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8109984:	b580      	push	{r7, lr}
 8109986:	b08e      	sub	sp, #56	; 0x38
 8109988:	af02      	add	r7, sp, #8
 810998a:	60f8      	str	r0, [r7, #12]
 810998c:	60b9      	str	r1, [r7, #8]
 810998e:	607a      	str	r2, [r7, #4]
 8109990:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109992:	68fb      	ldr	r3, [r7, #12]
 8109994:	2b00      	cmp	r3, #0
 8109996:	d109      	bne.n	81099ac <xQueueGenericCreateStatic+0x28>
 8109998:	f04f 0350 	mov.w	r3, #80	; 0x50
 810999c:	f383 8811 	msr	BASEPRI, r3
 81099a0:	f3bf 8f6f 	isb	sy
 81099a4:	f3bf 8f4f 	dsb	sy
 81099a8:	62bb      	str	r3, [r7, #40]	; 0x28
 81099aa:	e7fe      	b.n	81099aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 81099ac:	683b      	ldr	r3, [r7, #0]
 81099ae:	2b00      	cmp	r3, #0
 81099b0:	d109      	bne.n	81099c6 <xQueueGenericCreateStatic+0x42>
 81099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81099b6:	f383 8811 	msr	BASEPRI, r3
 81099ba:	f3bf 8f6f 	isb	sy
 81099be:	f3bf 8f4f 	dsb	sy
 81099c2:	627b      	str	r3, [r7, #36]	; 0x24
 81099c4:	e7fe      	b.n	81099c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	2b00      	cmp	r3, #0
 81099ca:	d002      	beq.n	81099d2 <xQueueGenericCreateStatic+0x4e>
 81099cc:	68bb      	ldr	r3, [r7, #8]
 81099ce:	2b00      	cmp	r3, #0
 81099d0:	d001      	beq.n	81099d6 <xQueueGenericCreateStatic+0x52>
 81099d2:	2301      	movs	r3, #1
 81099d4:	e000      	b.n	81099d8 <xQueueGenericCreateStatic+0x54>
 81099d6:	2300      	movs	r3, #0
 81099d8:	2b00      	cmp	r3, #0
 81099da:	d109      	bne.n	81099f0 <xQueueGenericCreateStatic+0x6c>
 81099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81099e0:	f383 8811 	msr	BASEPRI, r3
 81099e4:	f3bf 8f6f 	isb	sy
 81099e8:	f3bf 8f4f 	dsb	sy
 81099ec:	623b      	str	r3, [r7, #32]
 81099ee:	e7fe      	b.n	81099ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81099f0:	687b      	ldr	r3, [r7, #4]
 81099f2:	2b00      	cmp	r3, #0
 81099f4:	d102      	bne.n	81099fc <xQueueGenericCreateStatic+0x78>
 81099f6:	68bb      	ldr	r3, [r7, #8]
 81099f8:	2b00      	cmp	r3, #0
 81099fa:	d101      	bne.n	8109a00 <xQueueGenericCreateStatic+0x7c>
 81099fc:	2301      	movs	r3, #1
 81099fe:	e000      	b.n	8109a02 <xQueueGenericCreateStatic+0x7e>
 8109a00:	2300      	movs	r3, #0
 8109a02:	2b00      	cmp	r3, #0
 8109a04:	d109      	bne.n	8109a1a <xQueueGenericCreateStatic+0x96>
 8109a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a0a:	f383 8811 	msr	BASEPRI, r3
 8109a0e:	f3bf 8f6f 	isb	sy
 8109a12:	f3bf 8f4f 	dsb	sy
 8109a16:	61fb      	str	r3, [r7, #28]
 8109a18:	e7fe      	b.n	8109a18 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8109a1a:	2348      	movs	r3, #72	; 0x48
 8109a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8109a1e:	697b      	ldr	r3, [r7, #20]
 8109a20:	2b48      	cmp	r3, #72	; 0x48
 8109a22:	d009      	beq.n	8109a38 <xQueueGenericCreateStatic+0xb4>
 8109a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a28:	f383 8811 	msr	BASEPRI, r3
 8109a2c:	f3bf 8f6f 	isb	sy
 8109a30:	f3bf 8f4f 	dsb	sy
 8109a34:	61bb      	str	r3, [r7, #24]
 8109a36:	e7fe      	b.n	8109a36 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8109a38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109a3a:	683b      	ldr	r3, [r7, #0]
 8109a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8109a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109a40:	2b00      	cmp	r3, #0
 8109a42:	d00d      	beq.n	8109a60 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8109a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109a46:	2201      	movs	r2, #1
 8109a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109a4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8109a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109a52:	9300      	str	r3, [sp, #0]
 8109a54:	4613      	mov	r3, r2
 8109a56:	687a      	ldr	r2, [r7, #4]
 8109a58:	68b9      	ldr	r1, [r7, #8]
 8109a5a:	68f8      	ldr	r0, [r7, #12]
 8109a5c:	f000 f844 	bl	8109ae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8109a62:	4618      	mov	r0, r3
 8109a64:	3730      	adds	r7, #48	; 0x30
 8109a66:	46bd      	mov	sp, r7
 8109a68:	bd80      	pop	{r7, pc}

08109a6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8109a6a:	b580      	push	{r7, lr}
 8109a6c:	b08a      	sub	sp, #40	; 0x28
 8109a6e:	af02      	add	r7, sp, #8
 8109a70:	60f8      	str	r0, [r7, #12]
 8109a72:	60b9      	str	r1, [r7, #8]
 8109a74:	4613      	mov	r3, r2
 8109a76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109a78:	68fb      	ldr	r3, [r7, #12]
 8109a7a:	2b00      	cmp	r3, #0
 8109a7c:	d109      	bne.n	8109a92 <xQueueGenericCreate+0x28>
 8109a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a82:	f383 8811 	msr	BASEPRI, r3
 8109a86:	f3bf 8f6f 	isb	sy
 8109a8a:	f3bf 8f4f 	dsb	sy
 8109a8e:	613b      	str	r3, [r7, #16]
 8109a90:	e7fe      	b.n	8109a90 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8109a92:	68bb      	ldr	r3, [r7, #8]
 8109a94:	2b00      	cmp	r3, #0
 8109a96:	d102      	bne.n	8109a9e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8109a98:	2300      	movs	r3, #0
 8109a9a:	61fb      	str	r3, [r7, #28]
 8109a9c:	e004      	b.n	8109aa8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109a9e:	68fb      	ldr	r3, [r7, #12]
 8109aa0:	68ba      	ldr	r2, [r7, #8]
 8109aa2:	fb02 f303 	mul.w	r3, r2, r3
 8109aa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8109aa8:	69fb      	ldr	r3, [r7, #28]
 8109aaa:	3348      	adds	r3, #72	; 0x48
 8109aac:	4618      	mov	r0, r3
 8109aae:	f7ff fa75 	bl	8108f9c <pvPortMalloc>
 8109ab2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8109ab4:	69bb      	ldr	r3, [r7, #24]
 8109ab6:	2b00      	cmp	r3, #0
 8109ab8:	d011      	beq.n	8109ade <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8109aba:	69bb      	ldr	r3, [r7, #24]
 8109abc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109abe:	697b      	ldr	r3, [r7, #20]
 8109ac0:	3348      	adds	r3, #72	; 0x48
 8109ac2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8109ac4:	69bb      	ldr	r3, [r7, #24]
 8109ac6:	2200      	movs	r2, #0
 8109ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109acc:	79fa      	ldrb	r2, [r7, #7]
 8109ace:	69bb      	ldr	r3, [r7, #24]
 8109ad0:	9300      	str	r3, [sp, #0]
 8109ad2:	4613      	mov	r3, r2
 8109ad4:	697a      	ldr	r2, [r7, #20]
 8109ad6:	68b9      	ldr	r1, [r7, #8]
 8109ad8:	68f8      	ldr	r0, [r7, #12]
 8109ada:	f000 f805 	bl	8109ae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109ade:	69bb      	ldr	r3, [r7, #24]
	}
 8109ae0:	4618      	mov	r0, r3
 8109ae2:	3720      	adds	r7, #32
 8109ae4:	46bd      	mov	sp, r7
 8109ae6:	bd80      	pop	{r7, pc}

08109ae8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8109ae8:	b580      	push	{r7, lr}
 8109aea:	b084      	sub	sp, #16
 8109aec:	af00      	add	r7, sp, #0
 8109aee:	60f8      	str	r0, [r7, #12]
 8109af0:	60b9      	str	r1, [r7, #8]
 8109af2:	607a      	str	r2, [r7, #4]
 8109af4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8109af6:	68bb      	ldr	r3, [r7, #8]
 8109af8:	2b00      	cmp	r3, #0
 8109afa:	d103      	bne.n	8109b04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8109afc:	69bb      	ldr	r3, [r7, #24]
 8109afe:	69ba      	ldr	r2, [r7, #24]
 8109b00:	601a      	str	r2, [r3, #0]
 8109b02:	e002      	b.n	8109b0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8109b04:	69bb      	ldr	r3, [r7, #24]
 8109b06:	687a      	ldr	r2, [r7, #4]
 8109b08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8109b0a:	69bb      	ldr	r3, [r7, #24]
 8109b0c:	68fa      	ldr	r2, [r7, #12]
 8109b0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8109b10:	69bb      	ldr	r3, [r7, #24]
 8109b12:	68ba      	ldr	r2, [r7, #8]
 8109b14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8109b16:	2101      	movs	r1, #1
 8109b18:	69b8      	ldr	r0, [r7, #24]
 8109b1a:	f7ff fecb 	bl	81098b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8109b1e:	bf00      	nop
 8109b20:	3710      	adds	r7, #16
 8109b22:	46bd      	mov	sp, r7
 8109b24:	bd80      	pop	{r7, pc}

08109b26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8109b26:	b580      	push	{r7, lr}
 8109b28:	b082      	sub	sp, #8
 8109b2a:	af00      	add	r7, sp, #0
 8109b2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8109b2e:	687b      	ldr	r3, [r7, #4]
 8109b30:	2b00      	cmp	r3, #0
 8109b32:	d00e      	beq.n	8109b52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	2200      	movs	r2, #0
 8109b38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	2200      	movs	r2, #0
 8109b3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8109b40:	687b      	ldr	r3, [r7, #4]
 8109b42:	2200      	movs	r2, #0
 8109b44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8109b46:	2300      	movs	r3, #0
 8109b48:	2200      	movs	r2, #0
 8109b4a:	2100      	movs	r1, #0
 8109b4c:	6878      	ldr	r0, [r7, #4]
 8109b4e:	f000 f81d 	bl	8109b8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8109b52:	bf00      	nop
 8109b54:	3708      	adds	r7, #8
 8109b56:	46bd      	mov	sp, r7
 8109b58:	bd80      	pop	{r7, pc}

08109b5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8109b5a:	b580      	push	{r7, lr}
 8109b5c:	b086      	sub	sp, #24
 8109b5e:	af00      	add	r7, sp, #0
 8109b60:	4603      	mov	r3, r0
 8109b62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8109b64:	2301      	movs	r3, #1
 8109b66:	617b      	str	r3, [r7, #20]
 8109b68:	2300      	movs	r3, #0
 8109b6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8109b6c:	79fb      	ldrb	r3, [r7, #7]
 8109b6e:	461a      	mov	r2, r3
 8109b70:	6939      	ldr	r1, [r7, #16]
 8109b72:	6978      	ldr	r0, [r7, #20]
 8109b74:	f7ff ff79 	bl	8109a6a <xQueueGenericCreate>
 8109b78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8109b7a:	68f8      	ldr	r0, [r7, #12]
 8109b7c:	f7ff ffd3 	bl	8109b26 <prvInitialiseMutex>

		return xNewQueue;
 8109b80:	68fb      	ldr	r3, [r7, #12]
	}
 8109b82:	4618      	mov	r0, r3
 8109b84:	3718      	adds	r7, #24
 8109b86:	46bd      	mov	sp, r7
 8109b88:	bd80      	pop	{r7, pc}
	...

08109b8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8109b8c:	b580      	push	{r7, lr}
 8109b8e:	b08e      	sub	sp, #56	; 0x38
 8109b90:	af00      	add	r7, sp, #0
 8109b92:	60f8      	str	r0, [r7, #12]
 8109b94:	60b9      	str	r1, [r7, #8]
 8109b96:	607a      	str	r2, [r7, #4]
 8109b98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8109b9a:	2300      	movs	r3, #0
 8109b9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8109b9e:	68fb      	ldr	r3, [r7, #12]
 8109ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8109ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109ba4:	2b00      	cmp	r3, #0
 8109ba6:	d109      	bne.n	8109bbc <xQueueGenericSend+0x30>
 8109ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109bac:	f383 8811 	msr	BASEPRI, r3
 8109bb0:	f3bf 8f6f 	isb	sy
 8109bb4:	f3bf 8f4f 	dsb	sy
 8109bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8109bba:	e7fe      	b.n	8109bba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109bbc:	68bb      	ldr	r3, [r7, #8]
 8109bbe:	2b00      	cmp	r3, #0
 8109bc0:	d103      	bne.n	8109bca <xQueueGenericSend+0x3e>
 8109bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109bc6:	2b00      	cmp	r3, #0
 8109bc8:	d101      	bne.n	8109bce <xQueueGenericSend+0x42>
 8109bca:	2301      	movs	r3, #1
 8109bcc:	e000      	b.n	8109bd0 <xQueueGenericSend+0x44>
 8109bce:	2300      	movs	r3, #0
 8109bd0:	2b00      	cmp	r3, #0
 8109bd2:	d109      	bne.n	8109be8 <xQueueGenericSend+0x5c>
 8109bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109bd8:	f383 8811 	msr	BASEPRI, r3
 8109bdc:	f3bf 8f6f 	isb	sy
 8109be0:	f3bf 8f4f 	dsb	sy
 8109be4:	627b      	str	r3, [r7, #36]	; 0x24
 8109be6:	e7fe      	b.n	8109be6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8109be8:	683b      	ldr	r3, [r7, #0]
 8109bea:	2b02      	cmp	r3, #2
 8109bec:	d103      	bne.n	8109bf6 <xQueueGenericSend+0x6a>
 8109bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109bf2:	2b01      	cmp	r3, #1
 8109bf4:	d101      	bne.n	8109bfa <xQueueGenericSend+0x6e>
 8109bf6:	2301      	movs	r3, #1
 8109bf8:	e000      	b.n	8109bfc <xQueueGenericSend+0x70>
 8109bfa:	2300      	movs	r3, #0
 8109bfc:	2b00      	cmp	r3, #0
 8109bfe:	d109      	bne.n	8109c14 <xQueueGenericSend+0x88>
 8109c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c04:	f383 8811 	msr	BASEPRI, r3
 8109c08:	f3bf 8f6f 	isb	sy
 8109c0c:	f3bf 8f4f 	dsb	sy
 8109c10:	623b      	str	r3, [r7, #32]
 8109c12:	e7fe      	b.n	8109c12 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8109c14:	f001 f876 	bl	810ad04 <xTaskGetSchedulerState>
 8109c18:	4603      	mov	r3, r0
 8109c1a:	2b00      	cmp	r3, #0
 8109c1c:	d102      	bne.n	8109c24 <xQueueGenericSend+0x98>
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	2b00      	cmp	r3, #0
 8109c22:	d101      	bne.n	8109c28 <xQueueGenericSend+0x9c>
 8109c24:	2301      	movs	r3, #1
 8109c26:	e000      	b.n	8109c2a <xQueueGenericSend+0x9e>
 8109c28:	2300      	movs	r3, #0
 8109c2a:	2b00      	cmp	r3, #0
 8109c2c:	d109      	bne.n	8109c42 <xQueueGenericSend+0xb6>
 8109c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c32:	f383 8811 	msr	BASEPRI, r3
 8109c36:	f3bf 8f6f 	isb	sy
 8109c3a:	f3bf 8f4f 	dsb	sy
 8109c3e:	61fb      	str	r3, [r7, #28]
 8109c40:	e7fe      	b.n	8109c40 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109c42:	f7ff fd5b 	bl	81096fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8109c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109c4e:	429a      	cmp	r2, r3
 8109c50:	d302      	bcc.n	8109c58 <xQueueGenericSend+0xcc>
 8109c52:	683b      	ldr	r3, [r7, #0]
 8109c54:	2b02      	cmp	r3, #2
 8109c56:	d129      	bne.n	8109cac <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8109c58:	683a      	ldr	r2, [r7, #0]
 8109c5a:	68b9      	ldr	r1, [r7, #8]
 8109c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109c5e:	f000 f9af 	bl	8109fc0 <prvCopyDataToQueue>
 8109c62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c68:	2b00      	cmp	r3, #0
 8109c6a:	d010      	beq.n	8109c8e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c6e:	3324      	adds	r3, #36	; 0x24
 8109c70:	4618      	mov	r0, r3
 8109c72:	f000 fe91 	bl	810a998 <xTaskRemoveFromEventList>
 8109c76:	4603      	mov	r3, r0
 8109c78:	2b00      	cmp	r3, #0
 8109c7a:	d013      	beq.n	8109ca4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8109c7c:	4b3f      	ldr	r3, [pc, #252]	; (8109d7c <xQueueGenericSend+0x1f0>)
 8109c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109c82:	601a      	str	r2, [r3, #0]
 8109c84:	f3bf 8f4f 	dsb	sy
 8109c88:	f3bf 8f6f 	isb	sy
 8109c8c:	e00a      	b.n	8109ca4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8109c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109c90:	2b00      	cmp	r3, #0
 8109c92:	d007      	beq.n	8109ca4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8109c94:	4b39      	ldr	r3, [pc, #228]	; (8109d7c <xQueueGenericSend+0x1f0>)
 8109c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109c9a:	601a      	str	r2, [r3, #0]
 8109c9c:	f3bf 8f4f 	dsb	sy
 8109ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8109ca4:	f7ff fd58 	bl	8109758 <vPortExitCritical>
				return pdPASS;
 8109ca8:	2301      	movs	r3, #1
 8109caa:	e063      	b.n	8109d74 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109cac:	687b      	ldr	r3, [r7, #4]
 8109cae:	2b00      	cmp	r3, #0
 8109cb0:	d103      	bne.n	8109cba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109cb2:	f7ff fd51 	bl	8109758 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8109cb6:	2300      	movs	r3, #0
 8109cb8:	e05c      	b.n	8109d74 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109cbc:	2b00      	cmp	r3, #0
 8109cbe:	d106      	bne.n	8109cce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109cc0:	f107 0314 	add.w	r3, r7, #20
 8109cc4:	4618      	mov	r0, r3
 8109cc6:	f000 fec9 	bl	810aa5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8109cca:	2301      	movs	r3, #1
 8109ccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109cce:	f7ff fd43 	bl	8109758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109cd2:	f000 fc81 	bl	810a5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109cd6:	f7ff fd11 	bl	81096fc <vPortEnterCritical>
 8109cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109ce0:	b25b      	sxtb	r3, r3
 8109ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109ce6:	d103      	bne.n	8109cf0 <xQueueGenericSend+0x164>
 8109ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109cea:	2200      	movs	r2, #0
 8109cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109cf6:	b25b      	sxtb	r3, r3
 8109cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109cfc:	d103      	bne.n	8109d06 <xQueueGenericSend+0x17a>
 8109cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d00:	2200      	movs	r2, #0
 8109d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109d06:	f7ff fd27 	bl	8109758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8109d0a:	1d3a      	adds	r2, r7, #4
 8109d0c:	f107 0314 	add.w	r3, r7, #20
 8109d10:	4611      	mov	r1, r2
 8109d12:	4618      	mov	r0, r3
 8109d14:	f000 feb8 	bl	810aa88 <xTaskCheckForTimeOut>
 8109d18:	4603      	mov	r3, r0
 8109d1a:	2b00      	cmp	r3, #0
 8109d1c:	d124      	bne.n	8109d68 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8109d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109d20:	f000 fa20 	bl	810a164 <prvIsQueueFull>
 8109d24:	4603      	mov	r3, r0
 8109d26:	2b00      	cmp	r3, #0
 8109d28:	d018      	beq.n	8109d5c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8109d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d2c:	3310      	adds	r3, #16
 8109d2e:	687a      	ldr	r2, [r7, #4]
 8109d30:	4611      	mov	r1, r2
 8109d32:	4618      	mov	r0, r3
 8109d34:	f000 fe0c 	bl	810a950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8109d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109d3a:	f000 f9ab 	bl	810a094 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8109d3e:	f000 fc59 	bl	810a5f4 <xTaskResumeAll>
 8109d42:	4603      	mov	r3, r0
 8109d44:	2b00      	cmp	r3, #0
 8109d46:	f47f af7c 	bne.w	8109c42 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8109d4a:	4b0c      	ldr	r3, [pc, #48]	; (8109d7c <xQueueGenericSend+0x1f0>)
 8109d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109d50:	601a      	str	r2, [r3, #0]
 8109d52:	f3bf 8f4f 	dsb	sy
 8109d56:	f3bf 8f6f 	isb	sy
 8109d5a:	e772      	b.n	8109c42 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8109d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109d5e:	f000 f999 	bl	810a094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109d62:	f000 fc47 	bl	810a5f4 <xTaskResumeAll>
 8109d66:	e76c      	b.n	8109c42 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8109d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109d6a:	f000 f993 	bl	810a094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109d6e:	f000 fc41 	bl	810a5f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8109d72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8109d74:	4618      	mov	r0, r3
 8109d76:	3738      	adds	r7, #56	; 0x38
 8109d78:	46bd      	mov	sp, r7
 8109d7a:	bd80      	pop	{r7, pc}
 8109d7c:	e000ed04 	.word	0xe000ed04

08109d80 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8109d80:	b580      	push	{r7, lr}
 8109d82:	b08e      	sub	sp, #56	; 0x38
 8109d84:	af00      	add	r7, sp, #0
 8109d86:	6078      	str	r0, [r7, #4]
 8109d88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8109d8a:	2300      	movs	r3, #0
 8109d8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8109d92:	2300      	movs	r3, #0
 8109d94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8109d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109d98:	2b00      	cmp	r3, #0
 8109d9a:	d109      	bne.n	8109db0 <xQueueSemaphoreTake+0x30>
 8109d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109da0:	f383 8811 	msr	BASEPRI, r3
 8109da4:	f3bf 8f6f 	isb	sy
 8109da8:	f3bf 8f4f 	dsb	sy
 8109dac:	623b      	str	r3, [r7, #32]
 8109dae:	e7fe      	b.n	8109dae <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8109db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109db4:	2b00      	cmp	r3, #0
 8109db6:	d009      	beq.n	8109dcc <xQueueSemaphoreTake+0x4c>
 8109db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109dbc:	f383 8811 	msr	BASEPRI, r3
 8109dc0:	f3bf 8f6f 	isb	sy
 8109dc4:	f3bf 8f4f 	dsb	sy
 8109dc8:	61fb      	str	r3, [r7, #28]
 8109dca:	e7fe      	b.n	8109dca <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8109dcc:	f000 ff9a 	bl	810ad04 <xTaskGetSchedulerState>
 8109dd0:	4603      	mov	r3, r0
 8109dd2:	2b00      	cmp	r3, #0
 8109dd4:	d102      	bne.n	8109ddc <xQueueSemaphoreTake+0x5c>
 8109dd6:	683b      	ldr	r3, [r7, #0]
 8109dd8:	2b00      	cmp	r3, #0
 8109dda:	d101      	bne.n	8109de0 <xQueueSemaphoreTake+0x60>
 8109ddc:	2301      	movs	r3, #1
 8109dde:	e000      	b.n	8109de2 <xQueueSemaphoreTake+0x62>
 8109de0:	2300      	movs	r3, #0
 8109de2:	2b00      	cmp	r3, #0
 8109de4:	d109      	bne.n	8109dfa <xQueueSemaphoreTake+0x7a>
 8109de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109dea:	f383 8811 	msr	BASEPRI, r3
 8109dee:	f3bf 8f6f 	isb	sy
 8109df2:	f3bf 8f4f 	dsb	sy
 8109df6:	61bb      	str	r3, [r7, #24]
 8109df8:	e7fe      	b.n	8109df8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109dfa:	f7ff fc7f 	bl	81096fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8109dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109e02:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8109e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109e06:	2b00      	cmp	r3, #0
 8109e08:	d024      	beq.n	8109e54 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8109e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109e0c:	1e5a      	subs	r2, r3, #1
 8109e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e10:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e14:	681b      	ldr	r3, [r3, #0]
 8109e16:	2b00      	cmp	r3, #0
 8109e18:	d104      	bne.n	8109e24 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8109e1a:	f001 f92d 	bl	810b078 <pvTaskIncrementMutexHeldCount>
 8109e1e:	4602      	mov	r2, r0
 8109e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e26:	691b      	ldr	r3, [r3, #16]
 8109e28:	2b00      	cmp	r3, #0
 8109e2a:	d00f      	beq.n	8109e4c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e2e:	3310      	adds	r3, #16
 8109e30:	4618      	mov	r0, r3
 8109e32:	f000 fdb1 	bl	810a998 <xTaskRemoveFromEventList>
 8109e36:	4603      	mov	r3, r0
 8109e38:	2b00      	cmp	r3, #0
 8109e3a:	d007      	beq.n	8109e4c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8109e3c:	4b53      	ldr	r3, [pc, #332]	; (8109f8c <xQueueSemaphoreTake+0x20c>)
 8109e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109e42:	601a      	str	r2, [r3, #0]
 8109e44:	f3bf 8f4f 	dsb	sy
 8109e48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8109e4c:	f7ff fc84 	bl	8109758 <vPortExitCritical>
				return pdPASS;
 8109e50:	2301      	movs	r3, #1
 8109e52:	e096      	b.n	8109f82 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109e54:	683b      	ldr	r3, [r7, #0]
 8109e56:	2b00      	cmp	r3, #0
 8109e58:	d110      	bne.n	8109e7c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8109e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e5c:	2b00      	cmp	r3, #0
 8109e5e:	d009      	beq.n	8109e74 <xQueueSemaphoreTake+0xf4>
 8109e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e64:	f383 8811 	msr	BASEPRI, r3
 8109e68:	f3bf 8f6f 	isb	sy
 8109e6c:	f3bf 8f4f 	dsb	sy
 8109e70:	617b      	str	r3, [r7, #20]
 8109e72:	e7fe      	b.n	8109e72 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8109e74:	f7ff fc70 	bl	8109758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8109e78:	2300      	movs	r3, #0
 8109e7a:	e082      	b.n	8109f82 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109e7e:	2b00      	cmp	r3, #0
 8109e80:	d106      	bne.n	8109e90 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109e82:	f107 030c 	add.w	r3, r7, #12
 8109e86:	4618      	mov	r0, r3
 8109e88:	f000 fde8 	bl	810aa5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8109e8c:	2301      	movs	r3, #1
 8109e8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109e90:	f7ff fc62 	bl	8109758 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109e94:	f000 fba0 	bl	810a5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109e98:	f7ff fc30 	bl	81096fc <vPortEnterCritical>
 8109e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109ea2:	b25b      	sxtb	r3, r3
 8109ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109ea8:	d103      	bne.n	8109eb2 <xQueueSemaphoreTake+0x132>
 8109eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109eac:	2200      	movs	r2, #0
 8109eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109eb8:	b25b      	sxtb	r3, r3
 8109eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109ebe:	d103      	bne.n	8109ec8 <xQueueSemaphoreTake+0x148>
 8109ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109ec2:	2200      	movs	r2, #0
 8109ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109ec8:	f7ff fc46 	bl	8109758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8109ecc:	463a      	mov	r2, r7
 8109ece:	f107 030c 	add.w	r3, r7, #12
 8109ed2:	4611      	mov	r1, r2
 8109ed4:	4618      	mov	r0, r3
 8109ed6:	f000 fdd7 	bl	810aa88 <xTaskCheckForTimeOut>
 8109eda:	4603      	mov	r3, r0
 8109edc:	2b00      	cmp	r3, #0
 8109ede:	d132      	bne.n	8109f46 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109ee2:	f000 f929 	bl	810a138 <prvIsQueueEmpty>
 8109ee6:	4603      	mov	r3, r0
 8109ee8:	2b00      	cmp	r3, #0
 8109eea:	d026      	beq.n	8109f3a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109eee:	681b      	ldr	r3, [r3, #0]
 8109ef0:	2b00      	cmp	r3, #0
 8109ef2:	d109      	bne.n	8109f08 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8109ef4:	f7ff fc02 	bl	81096fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8109ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109efa:	689b      	ldr	r3, [r3, #8]
 8109efc:	4618      	mov	r0, r3
 8109efe:	f000 ff1f 	bl	810ad40 <xTaskPriorityInherit>
 8109f02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8109f04:	f7ff fc28 	bl	8109758 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8109f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109f0a:	3324      	adds	r3, #36	; 0x24
 8109f0c:	683a      	ldr	r2, [r7, #0]
 8109f0e:	4611      	mov	r1, r2
 8109f10:	4618      	mov	r0, r3
 8109f12:	f000 fd1d 	bl	810a950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8109f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109f18:	f000 f8bc 	bl	810a094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8109f1c:	f000 fb6a 	bl	810a5f4 <xTaskResumeAll>
 8109f20:	4603      	mov	r3, r0
 8109f22:	2b00      	cmp	r3, #0
 8109f24:	f47f af69 	bne.w	8109dfa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8109f28:	4b18      	ldr	r3, [pc, #96]	; (8109f8c <xQueueSemaphoreTake+0x20c>)
 8109f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109f2e:	601a      	str	r2, [r3, #0]
 8109f30:	f3bf 8f4f 	dsb	sy
 8109f34:	f3bf 8f6f 	isb	sy
 8109f38:	e75f      	b.n	8109dfa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8109f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109f3c:	f000 f8aa 	bl	810a094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109f40:	f000 fb58 	bl	810a5f4 <xTaskResumeAll>
 8109f44:	e759      	b.n	8109dfa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8109f46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109f48:	f000 f8a4 	bl	810a094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109f4c:	f000 fb52 	bl	810a5f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109f50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109f52:	f000 f8f1 	bl	810a138 <prvIsQueueEmpty>
 8109f56:	4603      	mov	r3, r0
 8109f58:	2b00      	cmp	r3, #0
 8109f5a:	f43f af4e 	beq.w	8109dfa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8109f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109f60:	2b00      	cmp	r3, #0
 8109f62:	d00d      	beq.n	8109f80 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8109f64:	f7ff fbca 	bl	81096fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8109f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109f6a:	f000 f811 	bl	8109f90 <prvGetDisinheritPriorityAfterTimeout>
 8109f6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8109f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109f72:	689b      	ldr	r3, [r3, #8]
 8109f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8109f76:	4618      	mov	r0, r3
 8109f78:	f000 ffe6 	bl	810af48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8109f7c:	f7ff fbec 	bl	8109758 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8109f80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8109f82:	4618      	mov	r0, r3
 8109f84:	3738      	adds	r7, #56	; 0x38
 8109f86:	46bd      	mov	sp, r7
 8109f88:	bd80      	pop	{r7, pc}
 8109f8a:	bf00      	nop
 8109f8c:	e000ed04 	.word	0xe000ed04

08109f90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8109f90:	b480      	push	{r7}
 8109f92:	b085      	sub	sp, #20
 8109f94:	af00      	add	r7, sp, #0
 8109f96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8109f98:	687b      	ldr	r3, [r7, #4]
 8109f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f9c:	2b00      	cmp	r3, #0
 8109f9e:	d006      	beq.n	8109fae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8109fa0:	687b      	ldr	r3, [r7, #4]
 8109fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109fa4:	681b      	ldr	r3, [r3, #0]
 8109fa6:	f1c3 0307 	rsb	r3, r3, #7
 8109faa:	60fb      	str	r3, [r7, #12]
 8109fac:	e001      	b.n	8109fb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8109fae:	2300      	movs	r3, #0
 8109fb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8109fb2:	68fb      	ldr	r3, [r7, #12]
	}
 8109fb4:	4618      	mov	r0, r3
 8109fb6:	3714      	adds	r7, #20
 8109fb8:	46bd      	mov	sp, r7
 8109fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fbe:	4770      	bx	lr

08109fc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109fc0:	b580      	push	{r7, lr}
 8109fc2:	b086      	sub	sp, #24
 8109fc4:	af00      	add	r7, sp, #0
 8109fc6:	60f8      	str	r0, [r7, #12]
 8109fc8:	60b9      	str	r1, [r7, #8]
 8109fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8109fcc:	2300      	movs	r3, #0
 8109fce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109fd0:	68fb      	ldr	r3, [r7, #12]
 8109fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109fd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8109fd6:	68fb      	ldr	r3, [r7, #12]
 8109fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109fda:	2b00      	cmp	r3, #0
 8109fdc:	d10d      	bne.n	8109ffa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109fde:	68fb      	ldr	r3, [r7, #12]
 8109fe0:	681b      	ldr	r3, [r3, #0]
 8109fe2:	2b00      	cmp	r3, #0
 8109fe4:	d14d      	bne.n	810a082 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8109fe6:	68fb      	ldr	r3, [r7, #12]
 8109fe8:	689b      	ldr	r3, [r3, #8]
 8109fea:	4618      	mov	r0, r3
 8109fec:	f000 ff28 	bl	810ae40 <xTaskPriorityDisinherit>
 8109ff0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8109ff2:	68fb      	ldr	r3, [r7, #12]
 8109ff4:	2200      	movs	r2, #0
 8109ff6:	609a      	str	r2, [r3, #8]
 8109ff8:	e043      	b.n	810a082 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8109ffa:	687b      	ldr	r3, [r7, #4]
 8109ffc:	2b00      	cmp	r3, #0
 8109ffe:	d119      	bne.n	810a034 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810a000:	68fb      	ldr	r3, [r7, #12]
 810a002:	6858      	ldr	r0, [r3, #4]
 810a004:	68fb      	ldr	r3, [r7, #12]
 810a006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a008:	461a      	mov	r2, r3
 810a00a:	68b9      	ldr	r1, [r7, #8]
 810a00c:	f006 fd7a 	bl	8110b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810a010:	68fb      	ldr	r3, [r7, #12]
 810a012:	685a      	ldr	r2, [r3, #4]
 810a014:	68fb      	ldr	r3, [r7, #12]
 810a016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a018:	441a      	add	r2, r3
 810a01a:	68fb      	ldr	r3, [r7, #12]
 810a01c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a01e:	68fb      	ldr	r3, [r7, #12]
 810a020:	685a      	ldr	r2, [r3, #4]
 810a022:	68fb      	ldr	r3, [r7, #12]
 810a024:	689b      	ldr	r3, [r3, #8]
 810a026:	429a      	cmp	r2, r3
 810a028:	d32b      	bcc.n	810a082 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810a02a:	68fb      	ldr	r3, [r7, #12]
 810a02c:	681a      	ldr	r2, [r3, #0]
 810a02e:	68fb      	ldr	r3, [r7, #12]
 810a030:	605a      	str	r2, [r3, #4]
 810a032:	e026      	b.n	810a082 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810a034:	68fb      	ldr	r3, [r7, #12]
 810a036:	68d8      	ldr	r0, [r3, #12]
 810a038:	68fb      	ldr	r3, [r7, #12]
 810a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a03c:	461a      	mov	r2, r3
 810a03e:	68b9      	ldr	r1, [r7, #8]
 810a040:	f006 fd60 	bl	8110b04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810a044:	68fb      	ldr	r3, [r7, #12]
 810a046:	68da      	ldr	r2, [r3, #12]
 810a048:	68fb      	ldr	r3, [r7, #12]
 810a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a04c:	425b      	negs	r3, r3
 810a04e:	441a      	add	r2, r3
 810a050:	68fb      	ldr	r3, [r7, #12]
 810a052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a054:	68fb      	ldr	r3, [r7, #12]
 810a056:	68da      	ldr	r2, [r3, #12]
 810a058:	68fb      	ldr	r3, [r7, #12]
 810a05a:	681b      	ldr	r3, [r3, #0]
 810a05c:	429a      	cmp	r2, r3
 810a05e:	d207      	bcs.n	810a070 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810a060:	68fb      	ldr	r3, [r7, #12]
 810a062:	689a      	ldr	r2, [r3, #8]
 810a064:	68fb      	ldr	r3, [r7, #12]
 810a066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a068:	425b      	negs	r3, r3
 810a06a:	441a      	add	r2, r3
 810a06c:	68fb      	ldr	r3, [r7, #12]
 810a06e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810a070:	687b      	ldr	r3, [r7, #4]
 810a072:	2b02      	cmp	r3, #2
 810a074:	d105      	bne.n	810a082 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a076:	693b      	ldr	r3, [r7, #16]
 810a078:	2b00      	cmp	r3, #0
 810a07a:	d002      	beq.n	810a082 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810a07c:	693b      	ldr	r3, [r7, #16]
 810a07e:	3b01      	subs	r3, #1
 810a080:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810a082:	693b      	ldr	r3, [r7, #16]
 810a084:	1c5a      	adds	r2, r3, #1
 810a086:	68fb      	ldr	r3, [r7, #12]
 810a088:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810a08a:	697b      	ldr	r3, [r7, #20]
}
 810a08c:	4618      	mov	r0, r3
 810a08e:	3718      	adds	r7, #24
 810a090:	46bd      	mov	sp, r7
 810a092:	bd80      	pop	{r7, pc}

0810a094 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810a094:	b580      	push	{r7, lr}
 810a096:	b084      	sub	sp, #16
 810a098:	af00      	add	r7, sp, #0
 810a09a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810a09c:	f7ff fb2e 	bl	81096fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810a0a0:	687b      	ldr	r3, [r7, #4]
 810a0a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a0a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810a0a8:	e011      	b.n	810a0ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a0aa:	687b      	ldr	r3, [r7, #4]
 810a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a0ae:	2b00      	cmp	r3, #0
 810a0b0:	d012      	beq.n	810a0d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a0b2:	687b      	ldr	r3, [r7, #4]
 810a0b4:	3324      	adds	r3, #36	; 0x24
 810a0b6:	4618      	mov	r0, r3
 810a0b8:	f000 fc6e 	bl	810a998 <xTaskRemoveFromEventList>
 810a0bc:	4603      	mov	r3, r0
 810a0be:	2b00      	cmp	r3, #0
 810a0c0:	d001      	beq.n	810a0c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810a0c2:	f000 fd41 	bl	810ab48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810a0c6:	7bfb      	ldrb	r3, [r7, #15]
 810a0c8:	3b01      	subs	r3, #1
 810a0ca:	b2db      	uxtb	r3, r3
 810a0cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810a0ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810a0d2:	2b00      	cmp	r3, #0
 810a0d4:	dce9      	bgt.n	810a0aa <prvUnlockQueue+0x16>
 810a0d6:	e000      	b.n	810a0da <prvUnlockQueue+0x46>
					break;
 810a0d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810a0da:	687b      	ldr	r3, [r7, #4]
 810a0dc:	22ff      	movs	r2, #255	; 0xff
 810a0de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810a0e2:	f7ff fb39 	bl	8109758 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810a0e6:	f7ff fb09 	bl	81096fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810a0ea:	687b      	ldr	r3, [r7, #4]
 810a0ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a0f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810a0f2:	e011      	b.n	810a118 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a0f4:	687b      	ldr	r3, [r7, #4]
 810a0f6:	691b      	ldr	r3, [r3, #16]
 810a0f8:	2b00      	cmp	r3, #0
 810a0fa:	d012      	beq.n	810a122 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a0fc:	687b      	ldr	r3, [r7, #4]
 810a0fe:	3310      	adds	r3, #16
 810a100:	4618      	mov	r0, r3
 810a102:	f000 fc49 	bl	810a998 <xTaskRemoveFromEventList>
 810a106:	4603      	mov	r3, r0
 810a108:	2b00      	cmp	r3, #0
 810a10a:	d001      	beq.n	810a110 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810a10c:	f000 fd1c 	bl	810ab48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810a110:	7bbb      	ldrb	r3, [r7, #14]
 810a112:	3b01      	subs	r3, #1
 810a114:	b2db      	uxtb	r3, r3
 810a116:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810a118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810a11c:	2b00      	cmp	r3, #0
 810a11e:	dce9      	bgt.n	810a0f4 <prvUnlockQueue+0x60>
 810a120:	e000      	b.n	810a124 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810a122:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810a124:	687b      	ldr	r3, [r7, #4]
 810a126:	22ff      	movs	r2, #255	; 0xff
 810a128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810a12c:	f7ff fb14 	bl	8109758 <vPortExitCritical>
}
 810a130:	bf00      	nop
 810a132:	3710      	adds	r7, #16
 810a134:	46bd      	mov	sp, r7
 810a136:	bd80      	pop	{r7, pc}

0810a138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810a138:	b580      	push	{r7, lr}
 810a13a:	b084      	sub	sp, #16
 810a13c:	af00      	add	r7, sp, #0
 810a13e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810a140:	f7ff fadc 	bl	81096fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810a144:	687b      	ldr	r3, [r7, #4]
 810a146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a148:	2b00      	cmp	r3, #0
 810a14a:	d102      	bne.n	810a152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810a14c:	2301      	movs	r3, #1
 810a14e:	60fb      	str	r3, [r7, #12]
 810a150:	e001      	b.n	810a156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810a152:	2300      	movs	r3, #0
 810a154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810a156:	f7ff faff 	bl	8109758 <vPortExitCritical>

	return xReturn;
 810a15a:	68fb      	ldr	r3, [r7, #12]
}
 810a15c:	4618      	mov	r0, r3
 810a15e:	3710      	adds	r7, #16
 810a160:	46bd      	mov	sp, r7
 810a162:	bd80      	pop	{r7, pc}

0810a164 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810a164:	b580      	push	{r7, lr}
 810a166:	b084      	sub	sp, #16
 810a168:	af00      	add	r7, sp, #0
 810a16a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810a16c:	f7ff fac6 	bl	81096fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810a170:	687b      	ldr	r3, [r7, #4]
 810a172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a174:	687b      	ldr	r3, [r7, #4]
 810a176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a178:	429a      	cmp	r2, r3
 810a17a:	d102      	bne.n	810a182 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810a17c:	2301      	movs	r3, #1
 810a17e:	60fb      	str	r3, [r7, #12]
 810a180:	e001      	b.n	810a186 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810a182:	2300      	movs	r3, #0
 810a184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810a186:	f7ff fae7 	bl	8109758 <vPortExitCritical>

	return xReturn;
 810a18a:	68fb      	ldr	r3, [r7, #12]
}
 810a18c:	4618      	mov	r0, r3
 810a18e:	3710      	adds	r7, #16
 810a190:	46bd      	mov	sp, r7
 810a192:	bd80      	pop	{r7, pc}

0810a194 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810a194:	b580      	push	{r7, lr}
 810a196:	b08e      	sub	sp, #56	; 0x38
 810a198:	af04      	add	r7, sp, #16
 810a19a:	60f8      	str	r0, [r7, #12]
 810a19c:	60b9      	str	r1, [r7, #8]
 810a19e:	607a      	str	r2, [r7, #4]
 810a1a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a1a4:	2b00      	cmp	r3, #0
 810a1a6:	d109      	bne.n	810a1bc <xTaskCreateStatic+0x28>
 810a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1ac:	f383 8811 	msr	BASEPRI, r3
 810a1b0:	f3bf 8f6f 	isb	sy
 810a1b4:	f3bf 8f4f 	dsb	sy
 810a1b8:	623b      	str	r3, [r7, #32]
 810a1ba:	e7fe      	b.n	810a1ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 810a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a1be:	2b00      	cmp	r3, #0
 810a1c0:	d109      	bne.n	810a1d6 <xTaskCreateStatic+0x42>
 810a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1c6:	f383 8811 	msr	BASEPRI, r3
 810a1ca:	f3bf 8f6f 	isb	sy
 810a1ce:	f3bf 8f4f 	dsb	sy
 810a1d2:	61fb      	str	r3, [r7, #28]
 810a1d4:	e7fe      	b.n	810a1d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810a1d6:	2354      	movs	r3, #84	; 0x54
 810a1d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810a1da:	693b      	ldr	r3, [r7, #16]
 810a1dc:	2b54      	cmp	r3, #84	; 0x54
 810a1de:	d009      	beq.n	810a1f4 <xTaskCreateStatic+0x60>
 810a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1e4:	f383 8811 	msr	BASEPRI, r3
 810a1e8:	f3bf 8f6f 	isb	sy
 810a1ec:	f3bf 8f4f 	dsb	sy
 810a1f0:	61bb      	str	r3, [r7, #24]
 810a1f2:	e7fe      	b.n	810a1f2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810a1f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a1f8:	2b00      	cmp	r3, #0
 810a1fa:	d01e      	beq.n	810a23a <xTaskCreateStatic+0xa6>
 810a1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a1fe:	2b00      	cmp	r3, #0
 810a200:	d01b      	beq.n	810a23a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a204:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a20a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a20e:	2202      	movs	r2, #2
 810a210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810a214:	2300      	movs	r3, #0
 810a216:	9303      	str	r3, [sp, #12]
 810a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a21a:	9302      	str	r3, [sp, #8]
 810a21c:	f107 0314 	add.w	r3, r7, #20
 810a220:	9301      	str	r3, [sp, #4]
 810a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a224:	9300      	str	r3, [sp, #0]
 810a226:	683b      	ldr	r3, [r7, #0]
 810a228:	687a      	ldr	r2, [r7, #4]
 810a22a:	68b9      	ldr	r1, [r7, #8]
 810a22c:	68f8      	ldr	r0, [r7, #12]
 810a22e:	f000 f850 	bl	810a2d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810a234:	f000 f8d4 	bl	810a3e0 <prvAddNewTaskToReadyList>
 810a238:	e001      	b.n	810a23e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810a23a:	2300      	movs	r3, #0
 810a23c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810a23e:	697b      	ldr	r3, [r7, #20]
	}
 810a240:	4618      	mov	r0, r3
 810a242:	3728      	adds	r7, #40	; 0x28
 810a244:	46bd      	mov	sp, r7
 810a246:	bd80      	pop	{r7, pc}

0810a248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810a248:	b580      	push	{r7, lr}
 810a24a:	b08c      	sub	sp, #48	; 0x30
 810a24c:	af04      	add	r7, sp, #16
 810a24e:	60f8      	str	r0, [r7, #12]
 810a250:	60b9      	str	r1, [r7, #8]
 810a252:	603b      	str	r3, [r7, #0]
 810a254:	4613      	mov	r3, r2
 810a256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810a258:	88fb      	ldrh	r3, [r7, #6]
 810a25a:	009b      	lsls	r3, r3, #2
 810a25c:	4618      	mov	r0, r3
 810a25e:	f7fe fe9d 	bl	8108f9c <pvPortMalloc>
 810a262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810a264:	697b      	ldr	r3, [r7, #20]
 810a266:	2b00      	cmp	r3, #0
 810a268:	d00e      	beq.n	810a288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810a26a:	2054      	movs	r0, #84	; 0x54
 810a26c:	f7fe fe96 	bl	8108f9c <pvPortMalloc>
 810a270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810a272:	69fb      	ldr	r3, [r7, #28]
 810a274:	2b00      	cmp	r3, #0
 810a276:	d003      	beq.n	810a280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810a278:	69fb      	ldr	r3, [r7, #28]
 810a27a:	697a      	ldr	r2, [r7, #20]
 810a27c:	631a      	str	r2, [r3, #48]	; 0x30
 810a27e:	e005      	b.n	810a28c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810a280:	6978      	ldr	r0, [r7, #20]
 810a282:	f7fe ff4d 	bl	8109120 <vPortFree>
 810a286:	e001      	b.n	810a28c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810a288:	2300      	movs	r3, #0
 810a28a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810a28c:	69fb      	ldr	r3, [r7, #28]
 810a28e:	2b00      	cmp	r3, #0
 810a290:	d017      	beq.n	810a2c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810a292:	69fb      	ldr	r3, [r7, #28]
 810a294:	2200      	movs	r2, #0
 810a296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810a29a:	88fa      	ldrh	r2, [r7, #6]
 810a29c:	2300      	movs	r3, #0
 810a29e:	9303      	str	r3, [sp, #12]
 810a2a0:	69fb      	ldr	r3, [r7, #28]
 810a2a2:	9302      	str	r3, [sp, #8]
 810a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a2a6:	9301      	str	r3, [sp, #4]
 810a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a2aa:	9300      	str	r3, [sp, #0]
 810a2ac:	683b      	ldr	r3, [r7, #0]
 810a2ae:	68b9      	ldr	r1, [r7, #8]
 810a2b0:	68f8      	ldr	r0, [r7, #12]
 810a2b2:	f000 f80e 	bl	810a2d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a2b6:	69f8      	ldr	r0, [r7, #28]
 810a2b8:	f000 f892 	bl	810a3e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810a2bc:	2301      	movs	r3, #1
 810a2be:	61bb      	str	r3, [r7, #24]
 810a2c0:	e002      	b.n	810a2c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810a2c2:	f04f 33ff 	mov.w	r3, #4294967295
 810a2c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810a2c8:	69bb      	ldr	r3, [r7, #24]
	}
 810a2ca:	4618      	mov	r0, r3
 810a2cc:	3720      	adds	r7, #32
 810a2ce:	46bd      	mov	sp, r7
 810a2d0:	bd80      	pop	{r7, pc}

0810a2d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810a2d2:	b580      	push	{r7, lr}
 810a2d4:	b088      	sub	sp, #32
 810a2d6:	af00      	add	r7, sp, #0
 810a2d8:	60f8      	str	r0, [r7, #12]
 810a2da:	60b9      	str	r1, [r7, #8]
 810a2dc:	607a      	str	r2, [r7, #4]
 810a2de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a2e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a2e4:	687b      	ldr	r3, [r7, #4]
 810a2e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810a2ea:	3b01      	subs	r3, #1
 810a2ec:	009b      	lsls	r3, r3, #2
 810a2ee:	4413      	add	r3, r2
 810a2f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810a2f2:	69bb      	ldr	r3, [r7, #24]
 810a2f4:	f023 0307 	bic.w	r3, r3, #7
 810a2f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810a2fa:	69bb      	ldr	r3, [r7, #24]
 810a2fc:	f003 0307 	and.w	r3, r3, #7
 810a300:	2b00      	cmp	r3, #0
 810a302:	d009      	beq.n	810a318 <prvInitialiseNewTask+0x46>
 810a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a308:	f383 8811 	msr	BASEPRI, r3
 810a30c:	f3bf 8f6f 	isb	sy
 810a310:	f3bf 8f4f 	dsb	sy
 810a314:	617b      	str	r3, [r7, #20]
 810a316:	e7fe      	b.n	810a316 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810a318:	68bb      	ldr	r3, [r7, #8]
 810a31a:	2b00      	cmp	r3, #0
 810a31c:	d01f      	beq.n	810a35e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a31e:	2300      	movs	r3, #0
 810a320:	61fb      	str	r3, [r7, #28]
 810a322:	e012      	b.n	810a34a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810a324:	68ba      	ldr	r2, [r7, #8]
 810a326:	69fb      	ldr	r3, [r7, #28]
 810a328:	4413      	add	r3, r2
 810a32a:	7819      	ldrb	r1, [r3, #0]
 810a32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a32e:	69fb      	ldr	r3, [r7, #28]
 810a330:	4413      	add	r3, r2
 810a332:	3334      	adds	r3, #52	; 0x34
 810a334:	460a      	mov	r2, r1
 810a336:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810a338:	68ba      	ldr	r2, [r7, #8]
 810a33a:	69fb      	ldr	r3, [r7, #28]
 810a33c:	4413      	add	r3, r2
 810a33e:	781b      	ldrb	r3, [r3, #0]
 810a340:	2b00      	cmp	r3, #0
 810a342:	d006      	beq.n	810a352 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a344:	69fb      	ldr	r3, [r7, #28]
 810a346:	3301      	adds	r3, #1
 810a348:	61fb      	str	r3, [r7, #28]
 810a34a:	69fb      	ldr	r3, [r7, #28]
 810a34c:	2b0f      	cmp	r3, #15
 810a34e:	d9e9      	bls.n	810a324 <prvInitialiseNewTask+0x52>
 810a350:	e000      	b.n	810a354 <prvInitialiseNewTask+0x82>
			{
				break;
 810a352:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a356:	2200      	movs	r2, #0
 810a358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810a35c:	e003      	b.n	810a366 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a360:	2200      	movs	r2, #0
 810a362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a368:	2b06      	cmp	r3, #6
 810a36a:	d901      	bls.n	810a370 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810a36c:	2306      	movs	r3, #6
 810a36e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a374:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a37a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 810a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a37e:	2200      	movs	r2, #0
 810a380:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a384:	3304      	adds	r3, #4
 810a386:	4618      	mov	r0, r3
 810a388:	f7fe fffe 	bl	8109388 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810a38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a38e:	3318      	adds	r3, #24
 810a390:	4618      	mov	r0, r3
 810a392:	f7fe fff9 	bl	8109388 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a39a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a39e:	f1c3 0207 	rsb	r2, r3, #7
 810a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a3a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a3aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a3ae:	2200      	movs	r2, #0
 810a3b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a3b4:	2200      	movs	r2, #0
 810a3b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810a3ba:	683a      	ldr	r2, [r7, #0]
 810a3bc:	68f9      	ldr	r1, [r7, #12]
 810a3be:	69b8      	ldr	r0, [r7, #24]
 810a3c0:	f7ff f876 	bl	81094b0 <pxPortInitialiseStack>
 810a3c4:	4602      	mov	r2, r0
 810a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a3c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3cc:	2b00      	cmp	r3, #0
 810a3ce:	d002      	beq.n	810a3d6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a3d6:	bf00      	nop
 810a3d8:	3720      	adds	r7, #32
 810a3da:	46bd      	mov	sp, r7
 810a3dc:	bd80      	pop	{r7, pc}
	...

0810a3e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810a3e0:	b580      	push	{r7, lr}
 810a3e2:	b082      	sub	sp, #8
 810a3e4:	af00      	add	r7, sp, #0
 810a3e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810a3e8:	f7ff f988 	bl	81096fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810a3ec:	4b2a      	ldr	r3, [pc, #168]	; (810a498 <prvAddNewTaskToReadyList+0xb8>)
 810a3ee:	681b      	ldr	r3, [r3, #0]
 810a3f0:	3301      	adds	r3, #1
 810a3f2:	4a29      	ldr	r2, [pc, #164]	; (810a498 <prvAddNewTaskToReadyList+0xb8>)
 810a3f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810a3f6:	4b29      	ldr	r3, [pc, #164]	; (810a49c <prvAddNewTaskToReadyList+0xbc>)
 810a3f8:	681b      	ldr	r3, [r3, #0]
 810a3fa:	2b00      	cmp	r3, #0
 810a3fc:	d109      	bne.n	810a412 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810a3fe:	4a27      	ldr	r2, [pc, #156]	; (810a49c <prvAddNewTaskToReadyList+0xbc>)
 810a400:	687b      	ldr	r3, [r7, #4]
 810a402:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810a404:	4b24      	ldr	r3, [pc, #144]	; (810a498 <prvAddNewTaskToReadyList+0xb8>)
 810a406:	681b      	ldr	r3, [r3, #0]
 810a408:	2b01      	cmp	r3, #1
 810a40a:	d110      	bne.n	810a42e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810a40c:	f000 fbc0 	bl	810ab90 <prvInitialiseTaskLists>
 810a410:	e00d      	b.n	810a42e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810a412:	4b23      	ldr	r3, [pc, #140]	; (810a4a0 <prvAddNewTaskToReadyList+0xc0>)
 810a414:	681b      	ldr	r3, [r3, #0]
 810a416:	2b00      	cmp	r3, #0
 810a418:	d109      	bne.n	810a42e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810a41a:	4b20      	ldr	r3, [pc, #128]	; (810a49c <prvAddNewTaskToReadyList+0xbc>)
 810a41c:	681b      	ldr	r3, [r3, #0]
 810a41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a420:	687b      	ldr	r3, [r7, #4]
 810a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a424:	429a      	cmp	r2, r3
 810a426:	d802      	bhi.n	810a42e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810a428:	4a1c      	ldr	r2, [pc, #112]	; (810a49c <prvAddNewTaskToReadyList+0xbc>)
 810a42a:	687b      	ldr	r3, [r7, #4]
 810a42c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810a42e:	4b1d      	ldr	r3, [pc, #116]	; (810a4a4 <prvAddNewTaskToReadyList+0xc4>)
 810a430:	681b      	ldr	r3, [r3, #0]
 810a432:	3301      	adds	r3, #1
 810a434:	4a1b      	ldr	r2, [pc, #108]	; (810a4a4 <prvAddNewTaskToReadyList+0xc4>)
 810a436:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810a438:	687b      	ldr	r3, [r7, #4]
 810a43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a43c:	2201      	movs	r2, #1
 810a43e:	409a      	lsls	r2, r3
 810a440:	4b19      	ldr	r3, [pc, #100]	; (810a4a8 <prvAddNewTaskToReadyList+0xc8>)
 810a442:	681b      	ldr	r3, [r3, #0]
 810a444:	4313      	orrs	r3, r2
 810a446:	4a18      	ldr	r2, [pc, #96]	; (810a4a8 <prvAddNewTaskToReadyList+0xc8>)
 810a448:	6013      	str	r3, [r2, #0]
 810a44a:	687b      	ldr	r3, [r7, #4]
 810a44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a44e:	4613      	mov	r3, r2
 810a450:	009b      	lsls	r3, r3, #2
 810a452:	4413      	add	r3, r2
 810a454:	009b      	lsls	r3, r3, #2
 810a456:	4a15      	ldr	r2, [pc, #84]	; (810a4ac <prvAddNewTaskToReadyList+0xcc>)
 810a458:	441a      	add	r2, r3
 810a45a:	687b      	ldr	r3, [r7, #4]
 810a45c:	3304      	adds	r3, #4
 810a45e:	4619      	mov	r1, r3
 810a460:	4610      	mov	r0, r2
 810a462:	f7fe ff9e 	bl	81093a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810a466:	f7ff f977 	bl	8109758 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810a46a:	4b0d      	ldr	r3, [pc, #52]	; (810a4a0 <prvAddNewTaskToReadyList+0xc0>)
 810a46c:	681b      	ldr	r3, [r3, #0]
 810a46e:	2b00      	cmp	r3, #0
 810a470:	d00e      	beq.n	810a490 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810a472:	4b0a      	ldr	r3, [pc, #40]	; (810a49c <prvAddNewTaskToReadyList+0xbc>)
 810a474:	681b      	ldr	r3, [r3, #0]
 810a476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a478:	687b      	ldr	r3, [r7, #4]
 810a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a47c:	429a      	cmp	r2, r3
 810a47e:	d207      	bcs.n	810a490 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810a480:	4b0b      	ldr	r3, [pc, #44]	; (810a4b0 <prvAddNewTaskToReadyList+0xd0>)
 810a482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a486:	601a      	str	r2, [r3, #0]
 810a488:	f3bf 8f4f 	dsb	sy
 810a48c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a490:	bf00      	nop
 810a492:	3708      	adds	r7, #8
 810a494:	46bd      	mov	sp, r7
 810a496:	bd80      	pop	{r7, pc}
 810a498:	100041b0 	.word	0x100041b0
 810a49c:	100040b0 	.word	0x100040b0
 810a4a0:	100041bc 	.word	0x100041bc
 810a4a4:	100041cc 	.word	0x100041cc
 810a4a8:	100041b8 	.word	0x100041b8
 810a4ac:	100040b4 	.word	0x100040b4
 810a4b0:	e000ed04 	.word	0xe000ed04

0810a4b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810a4b4:	b580      	push	{r7, lr}
 810a4b6:	b084      	sub	sp, #16
 810a4b8:	af00      	add	r7, sp, #0
 810a4ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810a4bc:	2300      	movs	r3, #0
 810a4be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810a4c0:	687b      	ldr	r3, [r7, #4]
 810a4c2:	2b00      	cmp	r3, #0
 810a4c4:	d016      	beq.n	810a4f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810a4c6:	4b13      	ldr	r3, [pc, #76]	; (810a514 <vTaskDelay+0x60>)
 810a4c8:	681b      	ldr	r3, [r3, #0]
 810a4ca:	2b00      	cmp	r3, #0
 810a4cc:	d009      	beq.n	810a4e2 <vTaskDelay+0x2e>
 810a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a4d2:	f383 8811 	msr	BASEPRI, r3
 810a4d6:	f3bf 8f6f 	isb	sy
 810a4da:	f3bf 8f4f 	dsb	sy
 810a4de:	60bb      	str	r3, [r7, #8]
 810a4e0:	e7fe      	b.n	810a4e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 810a4e2:	f000 f879 	bl	810a5d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810a4e6:	2100      	movs	r1, #0
 810a4e8:	6878      	ldr	r0, [r7, #4]
 810a4ea:	f000 fdd9 	bl	810b0a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810a4ee:	f000 f881 	bl	810a5f4 <xTaskResumeAll>
 810a4f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810a4f4:	68fb      	ldr	r3, [r7, #12]
 810a4f6:	2b00      	cmp	r3, #0
 810a4f8:	d107      	bne.n	810a50a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 810a4fa:	4b07      	ldr	r3, [pc, #28]	; (810a518 <vTaskDelay+0x64>)
 810a4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a500:	601a      	str	r2, [r3, #0]
 810a502:	f3bf 8f4f 	dsb	sy
 810a506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810a50a:	bf00      	nop
 810a50c:	3710      	adds	r7, #16
 810a50e:	46bd      	mov	sp, r7
 810a510:	bd80      	pop	{r7, pc}
 810a512:	bf00      	nop
 810a514:	100041d8 	.word	0x100041d8
 810a518:	e000ed04 	.word	0xe000ed04

0810a51c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810a51c:	b580      	push	{r7, lr}
 810a51e:	b08a      	sub	sp, #40	; 0x28
 810a520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810a522:	2300      	movs	r3, #0
 810a524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810a526:	2300      	movs	r3, #0
 810a528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810a52a:	463a      	mov	r2, r7
 810a52c:	1d39      	adds	r1, r7, #4
 810a52e:	f107 0308 	add.w	r3, r7, #8
 810a532:	4618      	mov	r0, r3
 810a534:	f7f6 fe54 	bl	81011e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810a538:	6839      	ldr	r1, [r7, #0]
 810a53a:	687b      	ldr	r3, [r7, #4]
 810a53c:	68ba      	ldr	r2, [r7, #8]
 810a53e:	9202      	str	r2, [sp, #8]
 810a540:	9301      	str	r3, [sp, #4]
 810a542:	2300      	movs	r3, #0
 810a544:	9300      	str	r3, [sp, #0]
 810a546:	2300      	movs	r3, #0
 810a548:	460a      	mov	r2, r1
 810a54a:	491d      	ldr	r1, [pc, #116]	; (810a5c0 <vTaskStartScheduler+0xa4>)
 810a54c:	481d      	ldr	r0, [pc, #116]	; (810a5c4 <vTaskStartScheduler+0xa8>)
 810a54e:	f7ff fe21 	bl	810a194 <xTaskCreateStatic>
 810a552:	4602      	mov	r2, r0
 810a554:	4b1c      	ldr	r3, [pc, #112]	; (810a5c8 <vTaskStartScheduler+0xac>)
 810a556:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810a558:	4b1b      	ldr	r3, [pc, #108]	; (810a5c8 <vTaskStartScheduler+0xac>)
 810a55a:	681b      	ldr	r3, [r3, #0]
 810a55c:	2b00      	cmp	r3, #0
 810a55e:	d002      	beq.n	810a566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810a560:	2301      	movs	r3, #1
 810a562:	617b      	str	r3, [r7, #20]
 810a564:	e001      	b.n	810a56a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810a566:	2300      	movs	r3, #0
 810a568:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810a56a:	697b      	ldr	r3, [r7, #20]
 810a56c:	2b01      	cmp	r3, #1
 810a56e:	d115      	bne.n	810a59c <vTaskStartScheduler+0x80>
 810a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a574:	f383 8811 	msr	BASEPRI, r3
 810a578:	f3bf 8f6f 	isb	sy
 810a57c:	f3bf 8f4f 	dsb	sy
 810a580:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810a582:	4b12      	ldr	r3, [pc, #72]	; (810a5cc <vTaskStartScheduler+0xb0>)
 810a584:	f04f 32ff 	mov.w	r2, #4294967295
 810a588:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810a58a:	4b11      	ldr	r3, [pc, #68]	; (810a5d0 <vTaskStartScheduler+0xb4>)
 810a58c:	2201      	movs	r2, #1
 810a58e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810a590:	4b10      	ldr	r3, [pc, #64]	; (810a5d4 <vTaskStartScheduler+0xb8>)
 810a592:	2200      	movs	r2, #0
 810a594:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810a596:	f7ff f813 	bl	81095c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810a59a:	e00d      	b.n	810a5b8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810a59c:	697b      	ldr	r3, [r7, #20]
 810a59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a5a2:	d109      	bne.n	810a5b8 <vTaskStartScheduler+0x9c>
 810a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a5a8:	f383 8811 	msr	BASEPRI, r3
 810a5ac:	f3bf 8f6f 	isb	sy
 810a5b0:	f3bf 8f4f 	dsb	sy
 810a5b4:	60fb      	str	r3, [r7, #12]
 810a5b6:	e7fe      	b.n	810a5b6 <vTaskStartScheduler+0x9a>
}
 810a5b8:	bf00      	nop
 810a5ba:	3718      	adds	r7, #24
 810a5bc:	46bd      	mov	sp, r7
 810a5be:	bd80      	pop	{r7, pc}
 810a5c0:	081138a8 	.word	0x081138a8
 810a5c4:	0810ab61 	.word	0x0810ab61
 810a5c8:	100041d4 	.word	0x100041d4
 810a5cc:	100041d0 	.word	0x100041d0
 810a5d0:	100041bc 	.word	0x100041bc
 810a5d4:	100041b4 	.word	0x100041b4

0810a5d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810a5d8:	b480      	push	{r7}
 810a5da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 810a5dc:	4b04      	ldr	r3, [pc, #16]	; (810a5f0 <vTaskSuspendAll+0x18>)
 810a5de:	681b      	ldr	r3, [r3, #0]
 810a5e0:	3301      	adds	r3, #1
 810a5e2:	4a03      	ldr	r2, [pc, #12]	; (810a5f0 <vTaskSuspendAll+0x18>)
 810a5e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 810a5e6:	bf00      	nop
 810a5e8:	46bd      	mov	sp, r7
 810a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a5ee:	4770      	bx	lr
 810a5f0:	100041d8 	.word	0x100041d8

0810a5f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810a5f4:	b580      	push	{r7, lr}
 810a5f6:	b084      	sub	sp, #16
 810a5f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810a5fa:	2300      	movs	r3, #0
 810a5fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810a5fe:	2300      	movs	r3, #0
 810a600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810a602:	4b41      	ldr	r3, [pc, #260]	; (810a708 <xTaskResumeAll+0x114>)
 810a604:	681b      	ldr	r3, [r3, #0]
 810a606:	2b00      	cmp	r3, #0
 810a608:	d109      	bne.n	810a61e <xTaskResumeAll+0x2a>
 810a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a60e:	f383 8811 	msr	BASEPRI, r3
 810a612:	f3bf 8f6f 	isb	sy
 810a616:	f3bf 8f4f 	dsb	sy
 810a61a:	603b      	str	r3, [r7, #0]
 810a61c:	e7fe      	b.n	810a61c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810a61e:	f7ff f86d 	bl	81096fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810a622:	4b39      	ldr	r3, [pc, #228]	; (810a708 <xTaskResumeAll+0x114>)
 810a624:	681b      	ldr	r3, [r3, #0]
 810a626:	3b01      	subs	r3, #1
 810a628:	4a37      	ldr	r2, [pc, #220]	; (810a708 <xTaskResumeAll+0x114>)
 810a62a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a62c:	4b36      	ldr	r3, [pc, #216]	; (810a708 <xTaskResumeAll+0x114>)
 810a62e:	681b      	ldr	r3, [r3, #0]
 810a630:	2b00      	cmp	r3, #0
 810a632:	d161      	bne.n	810a6f8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810a634:	4b35      	ldr	r3, [pc, #212]	; (810a70c <xTaskResumeAll+0x118>)
 810a636:	681b      	ldr	r3, [r3, #0]
 810a638:	2b00      	cmp	r3, #0
 810a63a:	d05d      	beq.n	810a6f8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a63c:	e02e      	b.n	810a69c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a63e:	4b34      	ldr	r3, [pc, #208]	; (810a710 <xTaskResumeAll+0x11c>)
 810a640:	68db      	ldr	r3, [r3, #12]
 810a642:	68db      	ldr	r3, [r3, #12]
 810a644:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a646:	68fb      	ldr	r3, [r7, #12]
 810a648:	3318      	adds	r3, #24
 810a64a:	4618      	mov	r0, r3
 810a64c:	f7fe ff06 	bl	810945c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a650:	68fb      	ldr	r3, [r7, #12]
 810a652:	3304      	adds	r3, #4
 810a654:	4618      	mov	r0, r3
 810a656:	f7fe ff01 	bl	810945c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810a65a:	68fb      	ldr	r3, [r7, #12]
 810a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a65e:	2201      	movs	r2, #1
 810a660:	409a      	lsls	r2, r3
 810a662:	4b2c      	ldr	r3, [pc, #176]	; (810a714 <xTaskResumeAll+0x120>)
 810a664:	681b      	ldr	r3, [r3, #0]
 810a666:	4313      	orrs	r3, r2
 810a668:	4a2a      	ldr	r2, [pc, #168]	; (810a714 <xTaskResumeAll+0x120>)
 810a66a:	6013      	str	r3, [r2, #0]
 810a66c:	68fb      	ldr	r3, [r7, #12]
 810a66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a670:	4613      	mov	r3, r2
 810a672:	009b      	lsls	r3, r3, #2
 810a674:	4413      	add	r3, r2
 810a676:	009b      	lsls	r3, r3, #2
 810a678:	4a27      	ldr	r2, [pc, #156]	; (810a718 <xTaskResumeAll+0x124>)
 810a67a:	441a      	add	r2, r3
 810a67c:	68fb      	ldr	r3, [r7, #12]
 810a67e:	3304      	adds	r3, #4
 810a680:	4619      	mov	r1, r3
 810a682:	4610      	mov	r0, r2
 810a684:	f7fe fe8d 	bl	81093a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a688:	68fb      	ldr	r3, [r7, #12]
 810a68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a68c:	4b23      	ldr	r3, [pc, #140]	; (810a71c <xTaskResumeAll+0x128>)
 810a68e:	681b      	ldr	r3, [r3, #0]
 810a690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a692:	429a      	cmp	r2, r3
 810a694:	d302      	bcc.n	810a69c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 810a696:	4b22      	ldr	r3, [pc, #136]	; (810a720 <xTaskResumeAll+0x12c>)
 810a698:	2201      	movs	r2, #1
 810a69a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a69c:	4b1c      	ldr	r3, [pc, #112]	; (810a710 <xTaskResumeAll+0x11c>)
 810a69e:	681b      	ldr	r3, [r3, #0]
 810a6a0:	2b00      	cmp	r3, #0
 810a6a2:	d1cc      	bne.n	810a63e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810a6a4:	68fb      	ldr	r3, [r7, #12]
 810a6a6:	2b00      	cmp	r3, #0
 810a6a8:	d001      	beq.n	810a6ae <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810a6aa:	f000 fb0b 	bl	810acc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810a6ae:	4b1d      	ldr	r3, [pc, #116]	; (810a724 <xTaskResumeAll+0x130>)
 810a6b0:	681b      	ldr	r3, [r3, #0]
 810a6b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 810a6b4:	687b      	ldr	r3, [r7, #4]
 810a6b6:	2b00      	cmp	r3, #0
 810a6b8:	d010      	beq.n	810a6dc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810a6ba:	f000 f837 	bl	810a72c <xTaskIncrementTick>
 810a6be:	4603      	mov	r3, r0
 810a6c0:	2b00      	cmp	r3, #0
 810a6c2:	d002      	beq.n	810a6ca <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 810a6c4:	4b16      	ldr	r3, [pc, #88]	; (810a720 <xTaskResumeAll+0x12c>)
 810a6c6:	2201      	movs	r2, #1
 810a6c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 810a6ca:	687b      	ldr	r3, [r7, #4]
 810a6cc:	3b01      	subs	r3, #1
 810a6ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810a6d0:	687b      	ldr	r3, [r7, #4]
 810a6d2:	2b00      	cmp	r3, #0
 810a6d4:	d1f1      	bne.n	810a6ba <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 810a6d6:	4b13      	ldr	r3, [pc, #76]	; (810a724 <xTaskResumeAll+0x130>)
 810a6d8:	2200      	movs	r2, #0
 810a6da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810a6dc:	4b10      	ldr	r3, [pc, #64]	; (810a720 <xTaskResumeAll+0x12c>)
 810a6de:	681b      	ldr	r3, [r3, #0]
 810a6e0:	2b00      	cmp	r3, #0
 810a6e2:	d009      	beq.n	810a6f8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810a6e4:	2301      	movs	r3, #1
 810a6e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810a6e8:	4b0f      	ldr	r3, [pc, #60]	; (810a728 <xTaskResumeAll+0x134>)
 810a6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a6ee:	601a      	str	r2, [r3, #0]
 810a6f0:	f3bf 8f4f 	dsb	sy
 810a6f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a6f8:	f7ff f82e 	bl	8109758 <vPortExitCritical>

	return xAlreadyYielded;
 810a6fc:	68bb      	ldr	r3, [r7, #8]
}
 810a6fe:	4618      	mov	r0, r3
 810a700:	3710      	adds	r7, #16
 810a702:	46bd      	mov	sp, r7
 810a704:	bd80      	pop	{r7, pc}
 810a706:	bf00      	nop
 810a708:	100041d8 	.word	0x100041d8
 810a70c:	100041b0 	.word	0x100041b0
 810a710:	10004170 	.word	0x10004170
 810a714:	100041b8 	.word	0x100041b8
 810a718:	100040b4 	.word	0x100040b4
 810a71c:	100040b0 	.word	0x100040b0
 810a720:	100041c4 	.word	0x100041c4
 810a724:	100041c0 	.word	0x100041c0
 810a728:	e000ed04 	.word	0xe000ed04

0810a72c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810a72c:	b580      	push	{r7, lr}
 810a72e:	b086      	sub	sp, #24
 810a730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810a732:	2300      	movs	r3, #0
 810a734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a736:	4b4e      	ldr	r3, [pc, #312]	; (810a870 <xTaskIncrementTick+0x144>)
 810a738:	681b      	ldr	r3, [r3, #0]
 810a73a:	2b00      	cmp	r3, #0
 810a73c:	f040 8087 	bne.w	810a84e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810a740:	4b4c      	ldr	r3, [pc, #304]	; (810a874 <xTaskIncrementTick+0x148>)
 810a742:	681b      	ldr	r3, [r3, #0]
 810a744:	3301      	adds	r3, #1
 810a746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810a748:	4a4a      	ldr	r2, [pc, #296]	; (810a874 <xTaskIncrementTick+0x148>)
 810a74a:	693b      	ldr	r3, [r7, #16]
 810a74c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810a74e:	693b      	ldr	r3, [r7, #16]
 810a750:	2b00      	cmp	r3, #0
 810a752:	d11f      	bne.n	810a794 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 810a754:	4b48      	ldr	r3, [pc, #288]	; (810a878 <xTaskIncrementTick+0x14c>)
 810a756:	681b      	ldr	r3, [r3, #0]
 810a758:	681b      	ldr	r3, [r3, #0]
 810a75a:	2b00      	cmp	r3, #0
 810a75c:	d009      	beq.n	810a772 <xTaskIncrementTick+0x46>
 810a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a762:	f383 8811 	msr	BASEPRI, r3
 810a766:	f3bf 8f6f 	isb	sy
 810a76a:	f3bf 8f4f 	dsb	sy
 810a76e:	603b      	str	r3, [r7, #0]
 810a770:	e7fe      	b.n	810a770 <xTaskIncrementTick+0x44>
 810a772:	4b41      	ldr	r3, [pc, #260]	; (810a878 <xTaskIncrementTick+0x14c>)
 810a774:	681b      	ldr	r3, [r3, #0]
 810a776:	60fb      	str	r3, [r7, #12]
 810a778:	4b40      	ldr	r3, [pc, #256]	; (810a87c <xTaskIncrementTick+0x150>)
 810a77a:	681b      	ldr	r3, [r3, #0]
 810a77c:	4a3e      	ldr	r2, [pc, #248]	; (810a878 <xTaskIncrementTick+0x14c>)
 810a77e:	6013      	str	r3, [r2, #0]
 810a780:	4a3e      	ldr	r2, [pc, #248]	; (810a87c <xTaskIncrementTick+0x150>)
 810a782:	68fb      	ldr	r3, [r7, #12]
 810a784:	6013      	str	r3, [r2, #0]
 810a786:	4b3e      	ldr	r3, [pc, #248]	; (810a880 <xTaskIncrementTick+0x154>)
 810a788:	681b      	ldr	r3, [r3, #0]
 810a78a:	3301      	adds	r3, #1
 810a78c:	4a3c      	ldr	r2, [pc, #240]	; (810a880 <xTaskIncrementTick+0x154>)
 810a78e:	6013      	str	r3, [r2, #0]
 810a790:	f000 fa98 	bl	810acc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810a794:	4b3b      	ldr	r3, [pc, #236]	; (810a884 <xTaskIncrementTick+0x158>)
 810a796:	681b      	ldr	r3, [r3, #0]
 810a798:	693a      	ldr	r2, [r7, #16]
 810a79a:	429a      	cmp	r2, r3
 810a79c:	d348      	bcc.n	810a830 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a79e:	4b36      	ldr	r3, [pc, #216]	; (810a878 <xTaskIncrementTick+0x14c>)
 810a7a0:	681b      	ldr	r3, [r3, #0]
 810a7a2:	681b      	ldr	r3, [r3, #0]
 810a7a4:	2b00      	cmp	r3, #0
 810a7a6:	d104      	bne.n	810a7b2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a7a8:	4b36      	ldr	r3, [pc, #216]	; (810a884 <xTaskIncrementTick+0x158>)
 810a7aa:	f04f 32ff 	mov.w	r2, #4294967295
 810a7ae:	601a      	str	r2, [r3, #0]
					break;
 810a7b0:	e03e      	b.n	810a830 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a7b2:	4b31      	ldr	r3, [pc, #196]	; (810a878 <xTaskIncrementTick+0x14c>)
 810a7b4:	681b      	ldr	r3, [r3, #0]
 810a7b6:	68db      	ldr	r3, [r3, #12]
 810a7b8:	68db      	ldr	r3, [r3, #12]
 810a7ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810a7bc:	68bb      	ldr	r3, [r7, #8]
 810a7be:	685b      	ldr	r3, [r3, #4]
 810a7c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810a7c2:	693a      	ldr	r2, [r7, #16]
 810a7c4:	687b      	ldr	r3, [r7, #4]
 810a7c6:	429a      	cmp	r2, r3
 810a7c8:	d203      	bcs.n	810a7d2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810a7ca:	4a2e      	ldr	r2, [pc, #184]	; (810a884 <xTaskIncrementTick+0x158>)
 810a7cc:	687b      	ldr	r3, [r7, #4]
 810a7ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810a7d0:	e02e      	b.n	810a830 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a7d2:	68bb      	ldr	r3, [r7, #8]
 810a7d4:	3304      	adds	r3, #4
 810a7d6:	4618      	mov	r0, r3
 810a7d8:	f7fe fe40 	bl	810945c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a7dc:	68bb      	ldr	r3, [r7, #8]
 810a7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a7e0:	2b00      	cmp	r3, #0
 810a7e2:	d004      	beq.n	810a7ee <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a7e4:	68bb      	ldr	r3, [r7, #8]
 810a7e6:	3318      	adds	r3, #24
 810a7e8:	4618      	mov	r0, r3
 810a7ea:	f7fe fe37 	bl	810945c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810a7ee:	68bb      	ldr	r3, [r7, #8]
 810a7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a7f2:	2201      	movs	r2, #1
 810a7f4:	409a      	lsls	r2, r3
 810a7f6:	4b24      	ldr	r3, [pc, #144]	; (810a888 <xTaskIncrementTick+0x15c>)
 810a7f8:	681b      	ldr	r3, [r3, #0]
 810a7fa:	4313      	orrs	r3, r2
 810a7fc:	4a22      	ldr	r2, [pc, #136]	; (810a888 <xTaskIncrementTick+0x15c>)
 810a7fe:	6013      	str	r3, [r2, #0]
 810a800:	68bb      	ldr	r3, [r7, #8]
 810a802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a804:	4613      	mov	r3, r2
 810a806:	009b      	lsls	r3, r3, #2
 810a808:	4413      	add	r3, r2
 810a80a:	009b      	lsls	r3, r3, #2
 810a80c:	4a1f      	ldr	r2, [pc, #124]	; (810a88c <xTaskIncrementTick+0x160>)
 810a80e:	441a      	add	r2, r3
 810a810:	68bb      	ldr	r3, [r7, #8]
 810a812:	3304      	adds	r3, #4
 810a814:	4619      	mov	r1, r3
 810a816:	4610      	mov	r0, r2
 810a818:	f7fe fdc3 	bl	81093a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a81c:	68bb      	ldr	r3, [r7, #8]
 810a81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a820:	4b1b      	ldr	r3, [pc, #108]	; (810a890 <xTaskIncrementTick+0x164>)
 810a822:	681b      	ldr	r3, [r3, #0]
 810a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a826:	429a      	cmp	r2, r3
 810a828:	d3b9      	bcc.n	810a79e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 810a82a:	2301      	movs	r3, #1
 810a82c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a82e:	e7b6      	b.n	810a79e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810a830:	4b17      	ldr	r3, [pc, #92]	; (810a890 <xTaskIncrementTick+0x164>)
 810a832:	681b      	ldr	r3, [r3, #0]
 810a834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a836:	4915      	ldr	r1, [pc, #84]	; (810a88c <xTaskIncrementTick+0x160>)
 810a838:	4613      	mov	r3, r2
 810a83a:	009b      	lsls	r3, r3, #2
 810a83c:	4413      	add	r3, r2
 810a83e:	009b      	lsls	r3, r3, #2
 810a840:	440b      	add	r3, r1
 810a842:	681b      	ldr	r3, [r3, #0]
 810a844:	2b01      	cmp	r3, #1
 810a846:	d907      	bls.n	810a858 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 810a848:	2301      	movs	r3, #1
 810a84a:	617b      	str	r3, [r7, #20]
 810a84c:	e004      	b.n	810a858 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 810a84e:	4b11      	ldr	r3, [pc, #68]	; (810a894 <xTaskIncrementTick+0x168>)
 810a850:	681b      	ldr	r3, [r3, #0]
 810a852:	3301      	adds	r3, #1
 810a854:	4a0f      	ldr	r2, [pc, #60]	; (810a894 <xTaskIncrementTick+0x168>)
 810a856:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 810a858:	4b0f      	ldr	r3, [pc, #60]	; (810a898 <xTaskIncrementTick+0x16c>)
 810a85a:	681b      	ldr	r3, [r3, #0]
 810a85c:	2b00      	cmp	r3, #0
 810a85e:	d001      	beq.n	810a864 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 810a860:	2301      	movs	r3, #1
 810a862:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 810a864:	697b      	ldr	r3, [r7, #20]
}
 810a866:	4618      	mov	r0, r3
 810a868:	3718      	adds	r7, #24
 810a86a:	46bd      	mov	sp, r7
 810a86c:	bd80      	pop	{r7, pc}
 810a86e:	bf00      	nop
 810a870:	100041d8 	.word	0x100041d8
 810a874:	100041b4 	.word	0x100041b4
 810a878:	10004168 	.word	0x10004168
 810a87c:	1000416c 	.word	0x1000416c
 810a880:	100041c8 	.word	0x100041c8
 810a884:	100041d0 	.word	0x100041d0
 810a888:	100041b8 	.word	0x100041b8
 810a88c:	100040b4 	.word	0x100040b4
 810a890:	100040b0 	.word	0x100040b0
 810a894:	100041c0 	.word	0x100041c0
 810a898:	100041c4 	.word	0x100041c4

0810a89c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810a89c:	b480      	push	{r7}
 810a89e:	b087      	sub	sp, #28
 810a8a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810a8a2:	4b26      	ldr	r3, [pc, #152]	; (810a93c <vTaskSwitchContext+0xa0>)
 810a8a4:	681b      	ldr	r3, [r3, #0]
 810a8a6:	2b00      	cmp	r3, #0
 810a8a8:	d003      	beq.n	810a8b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810a8aa:	4b25      	ldr	r3, [pc, #148]	; (810a940 <vTaskSwitchContext+0xa4>)
 810a8ac:	2201      	movs	r2, #1
 810a8ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810a8b0:	e03e      	b.n	810a930 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 810a8b2:	4b23      	ldr	r3, [pc, #140]	; (810a940 <vTaskSwitchContext+0xa4>)
 810a8b4:	2200      	movs	r2, #0
 810a8b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a8b8:	4b22      	ldr	r3, [pc, #136]	; (810a944 <vTaskSwitchContext+0xa8>)
 810a8ba:	681b      	ldr	r3, [r3, #0]
 810a8bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 810a8be:	68fb      	ldr	r3, [r7, #12]
 810a8c0:	fab3 f383 	clz	r3, r3
 810a8c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 810a8c6:	7afb      	ldrb	r3, [r7, #11]
 810a8c8:	f1c3 031f 	rsb	r3, r3, #31
 810a8cc:	617b      	str	r3, [r7, #20]
 810a8ce:	491e      	ldr	r1, [pc, #120]	; (810a948 <vTaskSwitchContext+0xac>)
 810a8d0:	697a      	ldr	r2, [r7, #20]
 810a8d2:	4613      	mov	r3, r2
 810a8d4:	009b      	lsls	r3, r3, #2
 810a8d6:	4413      	add	r3, r2
 810a8d8:	009b      	lsls	r3, r3, #2
 810a8da:	440b      	add	r3, r1
 810a8dc:	681b      	ldr	r3, [r3, #0]
 810a8de:	2b00      	cmp	r3, #0
 810a8e0:	d109      	bne.n	810a8f6 <vTaskSwitchContext+0x5a>
	__asm volatile
 810a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a8e6:	f383 8811 	msr	BASEPRI, r3
 810a8ea:	f3bf 8f6f 	isb	sy
 810a8ee:	f3bf 8f4f 	dsb	sy
 810a8f2:	607b      	str	r3, [r7, #4]
 810a8f4:	e7fe      	b.n	810a8f4 <vTaskSwitchContext+0x58>
 810a8f6:	697a      	ldr	r2, [r7, #20]
 810a8f8:	4613      	mov	r3, r2
 810a8fa:	009b      	lsls	r3, r3, #2
 810a8fc:	4413      	add	r3, r2
 810a8fe:	009b      	lsls	r3, r3, #2
 810a900:	4a11      	ldr	r2, [pc, #68]	; (810a948 <vTaskSwitchContext+0xac>)
 810a902:	4413      	add	r3, r2
 810a904:	613b      	str	r3, [r7, #16]
 810a906:	693b      	ldr	r3, [r7, #16]
 810a908:	685b      	ldr	r3, [r3, #4]
 810a90a:	685a      	ldr	r2, [r3, #4]
 810a90c:	693b      	ldr	r3, [r7, #16]
 810a90e:	605a      	str	r2, [r3, #4]
 810a910:	693b      	ldr	r3, [r7, #16]
 810a912:	685a      	ldr	r2, [r3, #4]
 810a914:	693b      	ldr	r3, [r7, #16]
 810a916:	3308      	adds	r3, #8
 810a918:	429a      	cmp	r2, r3
 810a91a:	d104      	bne.n	810a926 <vTaskSwitchContext+0x8a>
 810a91c:	693b      	ldr	r3, [r7, #16]
 810a91e:	685b      	ldr	r3, [r3, #4]
 810a920:	685a      	ldr	r2, [r3, #4]
 810a922:	693b      	ldr	r3, [r7, #16]
 810a924:	605a      	str	r2, [r3, #4]
 810a926:	693b      	ldr	r3, [r7, #16]
 810a928:	685b      	ldr	r3, [r3, #4]
 810a92a:	68db      	ldr	r3, [r3, #12]
 810a92c:	4a07      	ldr	r2, [pc, #28]	; (810a94c <vTaskSwitchContext+0xb0>)
 810a92e:	6013      	str	r3, [r2, #0]
}
 810a930:	bf00      	nop
 810a932:	371c      	adds	r7, #28
 810a934:	46bd      	mov	sp, r7
 810a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a93a:	4770      	bx	lr
 810a93c:	100041d8 	.word	0x100041d8
 810a940:	100041c4 	.word	0x100041c4
 810a944:	100041b8 	.word	0x100041b8
 810a948:	100040b4 	.word	0x100040b4
 810a94c:	100040b0 	.word	0x100040b0

0810a950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810a950:	b580      	push	{r7, lr}
 810a952:	b084      	sub	sp, #16
 810a954:	af00      	add	r7, sp, #0
 810a956:	6078      	str	r0, [r7, #4]
 810a958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810a95a:	687b      	ldr	r3, [r7, #4]
 810a95c:	2b00      	cmp	r3, #0
 810a95e:	d109      	bne.n	810a974 <vTaskPlaceOnEventList+0x24>
 810a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a964:	f383 8811 	msr	BASEPRI, r3
 810a968:	f3bf 8f6f 	isb	sy
 810a96c:	f3bf 8f4f 	dsb	sy
 810a970:	60fb      	str	r3, [r7, #12]
 810a972:	e7fe      	b.n	810a972 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a974:	4b07      	ldr	r3, [pc, #28]	; (810a994 <vTaskPlaceOnEventList+0x44>)
 810a976:	681b      	ldr	r3, [r3, #0]
 810a978:	3318      	adds	r3, #24
 810a97a:	4619      	mov	r1, r3
 810a97c:	6878      	ldr	r0, [r7, #4]
 810a97e:	f7fe fd34 	bl	81093ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810a982:	2101      	movs	r1, #1
 810a984:	6838      	ldr	r0, [r7, #0]
 810a986:	f000 fb8b 	bl	810b0a0 <prvAddCurrentTaskToDelayedList>
}
 810a98a:	bf00      	nop
 810a98c:	3710      	adds	r7, #16
 810a98e:	46bd      	mov	sp, r7
 810a990:	bd80      	pop	{r7, pc}
 810a992:	bf00      	nop
 810a994:	100040b0 	.word	0x100040b0

0810a998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810a998:	b580      	push	{r7, lr}
 810a99a:	b086      	sub	sp, #24
 810a99c:	af00      	add	r7, sp, #0
 810a99e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	68db      	ldr	r3, [r3, #12]
 810a9a4:	68db      	ldr	r3, [r3, #12]
 810a9a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810a9a8:	693b      	ldr	r3, [r7, #16]
 810a9aa:	2b00      	cmp	r3, #0
 810a9ac:	d109      	bne.n	810a9c2 <xTaskRemoveFromEventList+0x2a>
 810a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a9b2:	f383 8811 	msr	BASEPRI, r3
 810a9b6:	f3bf 8f6f 	isb	sy
 810a9ba:	f3bf 8f4f 	dsb	sy
 810a9be:	60fb      	str	r3, [r7, #12]
 810a9c0:	e7fe      	b.n	810a9c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810a9c2:	693b      	ldr	r3, [r7, #16]
 810a9c4:	3318      	adds	r3, #24
 810a9c6:	4618      	mov	r0, r3
 810a9c8:	f7fe fd48 	bl	810945c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a9cc:	4b1d      	ldr	r3, [pc, #116]	; (810aa44 <xTaskRemoveFromEventList+0xac>)
 810a9ce:	681b      	ldr	r3, [r3, #0]
 810a9d0:	2b00      	cmp	r3, #0
 810a9d2:	d11c      	bne.n	810aa0e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810a9d4:	693b      	ldr	r3, [r7, #16]
 810a9d6:	3304      	adds	r3, #4
 810a9d8:	4618      	mov	r0, r3
 810a9da:	f7fe fd3f 	bl	810945c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810a9de:	693b      	ldr	r3, [r7, #16]
 810a9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a9e2:	2201      	movs	r2, #1
 810a9e4:	409a      	lsls	r2, r3
 810a9e6:	4b18      	ldr	r3, [pc, #96]	; (810aa48 <xTaskRemoveFromEventList+0xb0>)
 810a9e8:	681b      	ldr	r3, [r3, #0]
 810a9ea:	4313      	orrs	r3, r2
 810a9ec:	4a16      	ldr	r2, [pc, #88]	; (810aa48 <xTaskRemoveFromEventList+0xb0>)
 810a9ee:	6013      	str	r3, [r2, #0]
 810a9f0:	693b      	ldr	r3, [r7, #16]
 810a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a9f4:	4613      	mov	r3, r2
 810a9f6:	009b      	lsls	r3, r3, #2
 810a9f8:	4413      	add	r3, r2
 810a9fa:	009b      	lsls	r3, r3, #2
 810a9fc:	4a13      	ldr	r2, [pc, #76]	; (810aa4c <xTaskRemoveFromEventList+0xb4>)
 810a9fe:	441a      	add	r2, r3
 810aa00:	693b      	ldr	r3, [r7, #16]
 810aa02:	3304      	adds	r3, #4
 810aa04:	4619      	mov	r1, r3
 810aa06:	4610      	mov	r0, r2
 810aa08:	f7fe fccb 	bl	81093a2 <vListInsertEnd>
 810aa0c:	e005      	b.n	810aa1a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810aa0e:	693b      	ldr	r3, [r7, #16]
 810aa10:	3318      	adds	r3, #24
 810aa12:	4619      	mov	r1, r3
 810aa14:	480e      	ldr	r0, [pc, #56]	; (810aa50 <xTaskRemoveFromEventList+0xb8>)
 810aa16:	f7fe fcc4 	bl	81093a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810aa1a:	693b      	ldr	r3, [r7, #16]
 810aa1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aa1e:	4b0d      	ldr	r3, [pc, #52]	; (810aa54 <xTaskRemoveFromEventList+0xbc>)
 810aa20:	681b      	ldr	r3, [r3, #0]
 810aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aa24:	429a      	cmp	r2, r3
 810aa26:	d905      	bls.n	810aa34 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810aa28:	2301      	movs	r3, #1
 810aa2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810aa2c:	4b0a      	ldr	r3, [pc, #40]	; (810aa58 <xTaskRemoveFromEventList+0xc0>)
 810aa2e:	2201      	movs	r2, #1
 810aa30:	601a      	str	r2, [r3, #0]
 810aa32:	e001      	b.n	810aa38 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 810aa34:	2300      	movs	r3, #0
 810aa36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810aa38:	697b      	ldr	r3, [r7, #20]
}
 810aa3a:	4618      	mov	r0, r3
 810aa3c:	3718      	adds	r7, #24
 810aa3e:	46bd      	mov	sp, r7
 810aa40:	bd80      	pop	{r7, pc}
 810aa42:	bf00      	nop
 810aa44:	100041d8 	.word	0x100041d8
 810aa48:	100041b8 	.word	0x100041b8
 810aa4c:	100040b4 	.word	0x100040b4
 810aa50:	10004170 	.word	0x10004170
 810aa54:	100040b0 	.word	0x100040b0
 810aa58:	100041c4 	.word	0x100041c4

0810aa5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810aa5c:	b480      	push	{r7}
 810aa5e:	b083      	sub	sp, #12
 810aa60:	af00      	add	r7, sp, #0
 810aa62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810aa64:	4b06      	ldr	r3, [pc, #24]	; (810aa80 <vTaskInternalSetTimeOutState+0x24>)
 810aa66:	681a      	ldr	r2, [r3, #0]
 810aa68:	687b      	ldr	r3, [r7, #4]
 810aa6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810aa6c:	4b05      	ldr	r3, [pc, #20]	; (810aa84 <vTaskInternalSetTimeOutState+0x28>)
 810aa6e:	681a      	ldr	r2, [r3, #0]
 810aa70:	687b      	ldr	r3, [r7, #4]
 810aa72:	605a      	str	r2, [r3, #4]
}
 810aa74:	bf00      	nop
 810aa76:	370c      	adds	r7, #12
 810aa78:	46bd      	mov	sp, r7
 810aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa7e:	4770      	bx	lr
 810aa80:	100041c8 	.word	0x100041c8
 810aa84:	100041b4 	.word	0x100041b4

0810aa88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810aa88:	b580      	push	{r7, lr}
 810aa8a:	b088      	sub	sp, #32
 810aa8c:	af00      	add	r7, sp, #0
 810aa8e:	6078      	str	r0, [r7, #4]
 810aa90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810aa92:	687b      	ldr	r3, [r7, #4]
 810aa94:	2b00      	cmp	r3, #0
 810aa96:	d109      	bne.n	810aaac <xTaskCheckForTimeOut+0x24>
 810aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa9c:	f383 8811 	msr	BASEPRI, r3
 810aaa0:	f3bf 8f6f 	isb	sy
 810aaa4:	f3bf 8f4f 	dsb	sy
 810aaa8:	613b      	str	r3, [r7, #16]
 810aaaa:	e7fe      	b.n	810aaaa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 810aaac:	683b      	ldr	r3, [r7, #0]
 810aaae:	2b00      	cmp	r3, #0
 810aab0:	d109      	bne.n	810aac6 <xTaskCheckForTimeOut+0x3e>
 810aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aab6:	f383 8811 	msr	BASEPRI, r3
 810aaba:	f3bf 8f6f 	isb	sy
 810aabe:	f3bf 8f4f 	dsb	sy
 810aac2:	60fb      	str	r3, [r7, #12]
 810aac4:	e7fe      	b.n	810aac4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 810aac6:	f7fe fe19 	bl	81096fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810aaca:	4b1d      	ldr	r3, [pc, #116]	; (810ab40 <xTaskCheckForTimeOut+0xb8>)
 810aacc:	681b      	ldr	r3, [r3, #0]
 810aace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810aad0:	687b      	ldr	r3, [r7, #4]
 810aad2:	685b      	ldr	r3, [r3, #4]
 810aad4:	69ba      	ldr	r2, [r7, #24]
 810aad6:	1ad3      	subs	r3, r2, r3
 810aad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810aada:	683b      	ldr	r3, [r7, #0]
 810aadc:	681b      	ldr	r3, [r3, #0]
 810aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 810aae2:	d102      	bne.n	810aaea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810aae4:	2300      	movs	r3, #0
 810aae6:	61fb      	str	r3, [r7, #28]
 810aae8:	e023      	b.n	810ab32 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810aaea:	687b      	ldr	r3, [r7, #4]
 810aaec:	681a      	ldr	r2, [r3, #0]
 810aaee:	4b15      	ldr	r3, [pc, #84]	; (810ab44 <xTaskCheckForTimeOut+0xbc>)
 810aaf0:	681b      	ldr	r3, [r3, #0]
 810aaf2:	429a      	cmp	r2, r3
 810aaf4:	d007      	beq.n	810ab06 <xTaskCheckForTimeOut+0x7e>
 810aaf6:	687b      	ldr	r3, [r7, #4]
 810aaf8:	685b      	ldr	r3, [r3, #4]
 810aafa:	69ba      	ldr	r2, [r7, #24]
 810aafc:	429a      	cmp	r2, r3
 810aafe:	d302      	bcc.n	810ab06 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810ab00:	2301      	movs	r3, #1
 810ab02:	61fb      	str	r3, [r7, #28]
 810ab04:	e015      	b.n	810ab32 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810ab06:	683b      	ldr	r3, [r7, #0]
 810ab08:	681b      	ldr	r3, [r3, #0]
 810ab0a:	697a      	ldr	r2, [r7, #20]
 810ab0c:	429a      	cmp	r2, r3
 810ab0e:	d20b      	bcs.n	810ab28 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810ab10:	683b      	ldr	r3, [r7, #0]
 810ab12:	681a      	ldr	r2, [r3, #0]
 810ab14:	697b      	ldr	r3, [r7, #20]
 810ab16:	1ad2      	subs	r2, r2, r3
 810ab18:	683b      	ldr	r3, [r7, #0]
 810ab1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810ab1c:	6878      	ldr	r0, [r7, #4]
 810ab1e:	f7ff ff9d 	bl	810aa5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810ab22:	2300      	movs	r3, #0
 810ab24:	61fb      	str	r3, [r7, #28]
 810ab26:	e004      	b.n	810ab32 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810ab28:	683b      	ldr	r3, [r7, #0]
 810ab2a:	2200      	movs	r2, #0
 810ab2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810ab2e:	2301      	movs	r3, #1
 810ab30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810ab32:	f7fe fe11 	bl	8109758 <vPortExitCritical>

	return xReturn;
 810ab36:	69fb      	ldr	r3, [r7, #28]
}
 810ab38:	4618      	mov	r0, r3
 810ab3a:	3720      	adds	r7, #32
 810ab3c:	46bd      	mov	sp, r7
 810ab3e:	bd80      	pop	{r7, pc}
 810ab40:	100041b4 	.word	0x100041b4
 810ab44:	100041c8 	.word	0x100041c8

0810ab48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810ab48:	b480      	push	{r7}
 810ab4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810ab4c:	4b03      	ldr	r3, [pc, #12]	; (810ab5c <vTaskMissedYield+0x14>)
 810ab4e:	2201      	movs	r2, #1
 810ab50:	601a      	str	r2, [r3, #0]
}
 810ab52:	bf00      	nop
 810ab54:	46bd      	mov	sp, r7
 810ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab5a:	4770      	bx	lr
 810ab5c:	100041c4 	.word	0x100041c4

0810ab60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810ab60:	b580      	push	{r7, lr}
 810ab62:	b082      	sub	sp, #8
 810ab64:	af00      	add	r7, sp, #0
 810ab66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810ab68:	f000 f852 	bl	810ac10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810ab6c:	4b06      	ldr	r3, [pc, #24]	; (810ab88 <prvIdleTask+0x28>)
 810ab6e:	681b      	ldr	r3, [r3, #0]
 810ab70:	2b01      	cmp	r3, #1
 810ab72:	d9f9      	bls.n	810ab68 <prvIdleTask+0x8>
			{
				taskYIELD();
 810ab74:	4b05      	ldr	r3, [pc, #20]	; (810ab8c <prvIdleTask+0x2c>)
 810ab76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ab7a:	601a      	str	r2, [r3, #0]
 810ab7c:	f3bf 8f4f 	dsb	sy
 810ab80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810ab84:	e7f0      	b.n	810ab68 <prvIdleTask+0x8>
 810ab86:	bf00      	nop
 810ab88:	100040b4 	.word	0x100040b4
 810ab8c:	e000ed04 	.word	0xe000ed04

0810ab90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810ab90:	b580      	push	{r7, lr}
 810ab92:	b082      	sub	sp, #8
 810ab94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ab96:	2300      	movs	r3, #0
 810ab98:	607b      	str	r3, [r7, #4]
 810ab9a:	e00c      	b.n	810abb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810ab9c:	687a      	ldr	r2, [r7, #4]
 810ab9e:	4613      	mov	r3, r2
 810aba0:	009b      	lsls	r3, r3, #2
 810aba2:	4413      	add	r3, r2
 810aba4:	009b      	lsls	r3, r3, #2
 810aba6:	4a12      	ldr	r2, [pc, #72]	; (810abf0 <prvInitialiseTaskLists+0x60>)
 810aba8:	4413      	add	r3, r2
 810abaa:	4618      	mov	r0, r3
 810abac:	f7fe fbcc 	bl	8109348 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810abb0:	687b      	ldr	r3, [r7, #4]
 810abb2:	3301      	adds	r3, #1
 810abb4:	607b      	str	r3, [r7, #4]
 810abb6:	687b      	ldr	r3, [r7, #4]
 810abb8:	2b06      	cmp	r3, #6
 810abba:	d9ef      	bls.n	810ab9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810abbc:	480d      	ldr	r0, [pc, #52]	; (810abf4 <prvInitialiseTaskLists+0x64>)
 810abbe:	f7fe fbc3 	bl	8109348 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810abc2:	480d      	ldr	r0, [pc, #52]	; (810abf8 <prvInitialiseTaskLists+0x68>)
 810abc4:	f7fe fbc0 	bl	8109348 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810abc8:	480c      	ldr	r0, [pc, #48]	; (810abfc <prvInitialiseTaskLists+0x6c>)
 810abca:	f7fe fbbd 	bl	8109348 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810abce:	480c      	ldr	r0, [pc, #48]	; (810ac00 <prvInitialiseTaskLists+0x70>)
 810abd0:	f7fe fbba 	bl	8109348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810abd4:	480b      	ldr	r0, [pc, #44]	; (810ac04 <prvInitialiseTaskLists+0x74>)
 810abd6:	f7fe fbb7 	bl	8109348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810abda:	4b0b      	ldr	r3, [pc, #44]	; (810ac08 <prvInitialiseTaskLists+0x78>)
 810abdc:	4a05      	ldr	r2, [pc, #20]	; (810abf4 <prvInitialiseTaskLists+0x64>)
 810abde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810abe0:	4b0a      	ldr	r3, [pc, #40]	; (810ac0c <prvInitialiseTaskLists+0x7c>)
 810abe2:	4a05      	ldr	r2, [pc, #20]	; (810abf8 <prvInitialiseTaskLists+0x68>)
 810abe4:	601a      	str	r2, [r3, #0]
}
 810abe6:	bf00      	nop
 810abe8:	3708      	adds	r7, #8
 810abea:	46bd      	mov	sp, r7
 810abec:	bd80      	pop	{r7, pc}
 810abee:	bf00      	nop
 810abf0:	100040b4 	.word	0x100040b4
 810abf4:	10004140 	.word	0x10004140
 810abf8:	10004154 	.word	0x10004154
 810abfc:	10004170 	.word	0x10004170
 810ac00:	10004184 	.word	0x10004184
 810ac04:	1000419c 	.word	0x1000419c
 810ac08:	10004168 	.word	0x10004168
 810ac0c:	1000416c 	.word	0x1000416c

0810ac10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810ac10:	b580      	push	{r7, lr}
 810ac12:	b082      	sub	sp, #8
 810ac14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810ac16:	e019      	b.n	810ac4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810ac18:	f7fe fd70 	bl	81096fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ac1c:	4b0f      	ldr	r3, [pc, #60]	; (810ac5c <prvCheckTasksWaitingTermination+0x4c>)
 810ac1e:	68db      	ldr	r3, [r3, #12]
 810ac20:	68db      	ldr	r3, [r3, #12]
 810ac22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ac24:	687b      	ldr	r3, [r7, #4]
 810ac26:	3304      	adds	r3, #4
 810ac28:	4618      	mov	r0, r3
 810ac2a:	f7fe fc17 	bl	810945c <uxListRemove>
				--uxCurrentNumberOfTasks;
 810ac2e:	4b0c      	ldr	r3, [pc, #48]	; (810ac60 <prvCheckTasksWaitingTermination+0x50>)
 810ac30:	681b      	ldr	r3, [r3, #0]
 810ac32:	3b01      	subs	r3, #1
 810ac34:	4a0a      	ldr	r2, [pc, #40]	; (810ac60 <prvCheckTasksWaitingTermination+0x50>)
 810ac36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810ac38:	4b0a      	ldr	r3, [pc, #40]	; (810ac64 <prvCheckTasksWaitingTermination+0x54>)
 810ac3a:	681b      	ldr	r3, [r3, #0]
 810ac3c:	3b01      	subs	r3, #1
 810ac3e:	4a09      	ldr	r2, [pc, #36]	; (810ac64 <prvCheckTasksWaitingTermination+0x54>)
 810ac40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810ac42:	f7fe fd89 	bl	8109758 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810ac46:	6878      	ldr	r0, [r7, #4]
 810ac48:	f000 f80e 	bl	810ac68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810ac4c:	4b05      	ldr	r3, [pc, #20]	; (810ac64 <prvCheckTasksWaitingTermination+0x54>)
 810ac4e:	681b      	ldr	r3, [r3, #0]
 810ac50:	2b00      	cmp	r3, #0
 810ac52:	d1e1      	bne.n	810ac18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810ac54:	bf00      	nop
 810ac56:	3708      	adds	r7, #8
 810ac58:	46bd      	mov	sp, r7
 810ac5a:	bd80      	pop	{r7, pc}
 810ac5c:	10004184 	.word	0x10004184
 810ac60:	100041b0 	.word	0x100041b0
 810ac64:	10004198 	.word	0x10004198

0810ac68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810ac68:	b580      	push	{r7, lr}
 810ac6a:	b084      	sub	sp, #16
 810ac6c:	af00      	add	r7, sp, #0
 810ac6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810ac70:	687b      	ldr	r3, [r7, #4]
 810ac72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810ac76:	2b00      	cmp	r3, #0
 810ac78:	d108      	bne.n	810ac8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810ac7a:	687b      	ldr	r3, [r7, #4]
 810ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ac7e:	4618      	mov	r0, r3
 810ac80:	f7fe fa4e 	bl	8109120 <vPortFree>
				vPortFree( pxTCB );
 810ac84:	6878      	ldr	r0, [r7, #4]
 810ac86:	f7fe fa4b 	bl	8109120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810ac8a:	e017      	b.n	810acbc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810ac8c:	687b      	ldr	r3, [r7, #4]
 810ac8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810ac92:	2b01      	cmp	r3, #1
 810ac94:	d103      	bne.n	810ac9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810ac96:	6878      	ldr	r0, [r7, #4]
 810ac98:	f7fe fa42 	bl	8109120 <vPortFree>
	}
 810ac9c:	e00e      	b.n	810acbc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810ac9e:	687b      	ldr	r3, [r7, #4]
 810aca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810aca4:	2b02      	cmp	r3, #2
 810aca6:	d009      	beq.n	810acbc <prvDeleteTCB+0x54>
 810aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810acac:	f383 8811 	msr	BASEPRI, r3
 810acb0:	f3bf 8f6f 	isb	sy
 810acb4:	f3bf 8f4f 	dsb	sy
 810acb8:	60fb      	str	r3, [r7, #12]
 810acba:	e7fe      	b.n	810acba <prvDeleteTCB+0x52>
	}
 810acbc:	bf00      	nop
 810acbe:	3710      	adds	r7, #16
 810acc0:	46bd      	mov	sp, r7
 810acc2:	bd80      	pop	{r7, pc}

0810acc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810acc4:	b480      	push	{r7}
 810acc6:	b083      	sub	sp, #12
 810acc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810acca:	4b0c      	ldr	r3, [pc, #48]	; (810acfc <prvResetNextTaskUnblockTime+0x38>)
 810accc:	681b      	ldr	r3, [r3, #0]
 810acce:	681b      	ldr	r3, [r3, #0]
 810acd0:	2b00      	cmp	r3, #0
 810acd2:	d104      	bne.n	810acde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810acd4:	4b0a      	ldr	r3, [pc, #40]	; (810ad00 <prvResetNextTaskUnblockTime+0x3c>)
 810acd6:	f04f 32ff 	mov.w	r2, #4294967295
 810acda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810acdc:	e008      	b.n	810acf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810acde:	4b07      	ldr	r3, [pc, #28]	; (810acfc <prvResetNextTaskUnblockTime+0x38>)
 810ace0:	681b      	ldr	r3, [r3, #0]
 810ace2:	68db      	ldr	r3, [r3, #12]
 810ace4:	68db      	ldr	r3, [r3, #12]
 810ace6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810ace8:	687b      	ldr	r3, [r7, #4]
 810acea:	685b      	ldr	r3, [r3, #4]
 810acec:	4a04      	ldr	r2, [pc, #16]	; (810ad00 <prvResetNextTaskUnblockTime+0x3c>)
 810acee:	6013      	str	r3, [r2, #0]
}
 810acf0:	bf00      	nop
 810acf2:	370c      	adds	r7, #12
 810acf4:	46bd      	mov	sp, r7
 810acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acfa:	4770      	bx	lr
 810acfc:	10004168 	.word	0x10004168
 810ad00:	100041d0 	.word	0x100041d0

0810ad04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810ad04:	b480      	push	{r7}
 810ad06:	b083      	sub	sp, #12
 810ad08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810ad0a:	4b0b      	ldr	r3, [pc, #44]	; (810ad38 <xTaskGetSchedulerState+0x34>)
 810ad0c:	681b      	ldr	r3, [r3, #0]
 810ad0e:	2b00      	cmp	r3, #0
 810ad10:	d102      	bne.n	810ad18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810ad12:	2301      	movs	r3, #1
 810ad14:	607b      	str	r3, [r7, #4]
 810ad16:	e008      	b.n	810ad2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ad18:	4b08      	ldr	r3, [pc, #32]	; (810ad3c <xTaskGetSchedulerState+0x38>)
 810ad1a:	681b      	ldr	r3, [r3, #0]
 810ad1c:	2b00      	cmp	r3, #0
 810ad1e:	d102      	bne.n	810ad26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810ad20:	2302      	movs	r3, #2
 810ad22:	607b      	str	r3, [r7, #4]
 810ad24:	e001      	b.n	810ad2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810ad26:	2300      	movs	r3, #0
 810ad28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810ad2a:	687b      	ldr	r3, [r7, #4]
	}
 810ad2c:	4618      	mov	r0, r3
 810ad2e:	370c      	adds	r7, #12
 810ad30:	46bd      	mov	sp, r7
 810ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad36:	4770      	bx	lr
 810ad38:	100041bc 	.word	0x100041bc
 810ad3c:	100041d8 	.word	0x100041d8

0810ad40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810ad40:	b580      	push	{r7, lr}
 810ad42:	b084      	sub	sp, #16
 810ad44:	af00      	add	r7, sp, #0
 810ad46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810ad48:	687b      	ldr	r3, [r7, #4]
 810ad4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810ad4c:	2300      	movs	r3, #0
 810ad4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810ad50:	687b      	ldr	r3, [r7, #4]
 810ad52:	2b00      	cmp	r3, #0
 810ad54:	d069      	beq.n	810ae2a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810ad56:	68bb      	ldr	r3, [r7, #8]
 810ad58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ad5a:	4b36      	ldr	r3, [pc, #216]	; (810ae34 <xTaskPriorityInherit+0xf4>)
 810ad5c:	681b      	ldr	r3, [r3, #0]
 810ad5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ad60:	429a      	cmp	r2, r3
 810ad62:	d259      	bcs.n	810ae18 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810ad64:	68bb      	ldr	r3, [r7, #8]
 810ad66:	699b      	ldr	r3, [r3, #24]
 810ad68:	2b00      	cmp	r3, #0
 810ad6a:	db06      	blt.n	810ad7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ad6c:	4b31      	ldr	r3, [pc, #196]	; (810ae34 <xTaskPriorityInherit+0xf4>)
 810ad6e:	681b      	ldr	r3, [r3, #0]
 810ad70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ad72:	f1c3 0207 	rsb	r2, r3, #7
 810ad76:	68bb      	ldr	r3, [r7, #8]
 810ad78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810ad7a:	68bb      	ldr	r3, [r7, #8]
 810ad7c:	6959      	ldr	r1, [r3, #20]
 810ad7e:	68bb      	ldr	r3, [r7, #8]
 810ad80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ad82:	4613      	mov	r3, r2
 810ad84:	009b      	lsls	r3, r3, #2
 810ad86:	4413      	add	r3, r2
 810ad88:	009b      	lsls	r3, r3, #2
 810ad8a:	4a2b      	ldr	r2, [pc, #172]	; (810ae38 <xTaskPriorityInherit+0xf8>)
 810ad8c:	4413      	add	r3, r2
 810ad8e:	4299      	cmp	r1, r3
 810ad90:	d13a      	bne.n	810ae08 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ad92:	68bb      	ldr	r3, [r7, #8]
 810ad94:	3304      	adds	r3, #4
 810ad96:	4618      	mov	r0, r3
 810ad98:	f7fe fb60 	bl	810945c <uxListRemove>
 810ad9c:	4603      	mov	r3, r0
 810ad9e:	2b00      	cmp	r3, #0
 810ada0:	d115      	bne.n	810adce <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 810ada2:	68bb      	ldr	r3, [r7, #8]
 810ada4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ada6:	4924      	ldr	r1, [pc, #144]	; (810ae38 <xTaskPriorityInherit+0xf8>)
 810ada8:	4613      	mov	r3, r2
 810adaa:	009b      	lsls	r3, r3, #2
 810adac:	4413      	add	r3, r2
 810adae:	009b      	lsls	r3, r3, #2
 810adb0:	440b      	add	r3, r1
 810adb2:	681b      	ldr	r3, [r3, #0]
 810adb4:	2b00      	cmp	r3, #0
 810adb6:	d10a      	bne.n	810adce <xTaskPriorityInherit+0x8e>
 810adb8:	68bb      	ldr	r3, [r7, #8]
 810adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810adbc:	2201      	movs	r2, #1
 810adbe:	fa02 f303 	lsl.w	r3, r2, r3
 810adc2:	43da      	mvns	r2, r3
 810adc4:	4b1d      	ldr	r3, [pc, #116]	; (810ae3c <xTaskPriorityInherit+0xfc>)
 810adc6:	681b      	ldr	r3, [r3, #0]
 810adc8:	4013      	ands	r3, r2
 810adca:	4a1c      	ldr	r2, [pc, #112]	; (810ae3c <xTaskPriorityInherit+0xfc>)
 810adcc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810adce:	4b19      	ldr	r3, [pc, #100]	; (810ae34 <xTaskPriorityInherit+0xf4>)
 810add0:	681b      	ldr	r3, [r3, #0]
 810add2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810add4:	68bb      	ldr	r3, [r7, #8]
 810add6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810add8:	68bb      	ldr	r3, [r7, #8]
 810adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810addc:	2201      	movs	r2, #1
 810adde:	409a      	lsls	r2, r3
 810ade0:	4b16      	ldr	r3, [pc, #88]	; (810ae3c <xTaskPriorityInherit+0xfc>)
 810ade2:	681b      	ldr	r3, [r3, #0]
 810ade4:	4313      	orrs	r3, r2
 810ade6:	4a15      	ldr	r2, [pc, #84]	; (810ae3c <xTaskPriorityInherit+0xfc>)
 810ade8:	6013      	str	r3, [r2, #0]
 810adea:	68bb      	ldr	r3, [r7, #8]
 810adec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810adee:	4613      	mov	r3, r2
 810adf0:	009b      	lsls	r3, r3, #2
 810adf2:	4413      	add	r3, r2
 810adf4:	009b      	lsls	r3, r3, #2
 810adf6:	4a10      	ldr	r2, [pc, #64]	; (810ae38 <xTaskPriorityInherit+0xf8>)
 810adf8:	441a      	add	r2, r3
 810adfa:	68bb      	ldr	r3, [r7, #8]
 810adfc:	3304      	adds	r3, #4
 810adfe:	4619      	mov	r1, r3
 810ae00:	4610      	mov	r0, r2
 810ae02:	f7fe face 	bl	81093a2 <vListInsertEnd>
 810ae06:	e004      	b.n	810ae12 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810ae08:	4b0a      	ldr	r3, [pc, #40]	; (810ae34 <xTaskPriorityInherit+0xf4>)
 810ae0a:	681b      	ldr	r3, [r3, #0]
 810ae0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ae0e:	68bb      	ldr	r3, [r7, #8]
 810ae10:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810ae12:	2301      	movs	r3, #1
 810ae14:	60fb      	str	r3, [r7, #12]
 810ae16:	e008      	b.n	810ae2a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810ae18:	68bb      	ldr	r3, [r7, #8]
 810ae1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810ae1c:	4b05      	ldr	r3, [pc, #20]	; (810ae34 <xTaskPriorityInherit+0xf4>)
 810ae1e:	681b      	ldr	r3, [r3, #0]
 810ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ae22:	429a      	cmp	r2, r3
 810ae24:	d201      	bcs.n	810ae2a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810ae26:	2301      	movs	r3, #1
 810ae28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810ae2a:	68fb      	ldr	r3, [r7, #12]
	}
 810ae2c:	4618      	mov	r0, r3
 810ae2e:	3710      	adds	r7, #16
 810ae30:	46bd      	mov	sp, r7
 810ae32:	bd80      	pop	{r7, pc}
 810ae34:	100040b0 	.word	0x100040b0
 810ae38:	100040b4 	.word	0x100040b4
 810ae3c:	100041b8 	.word	0x100041b8

0810ae40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810ae40:	b580      	push	{r7, lr}
 810ae42:	b086      	sub	sp, #24
 810ae44:	af00      	add	r7, sp, #0
 810ae46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810ae48:	687b      	ldr	r3, [r7, #4]
 810ae4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810ae4c:	2300      	movs	r3, #0
 810ae4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810ae50:	687b      	ldr	r3, [r7, #4]
 810ae52:	2b00      	cmp	r3, #0
 810ae54:	d06c      	beq.n	810af30 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810ae56:	4b39      	ldr	r3, [pc, #228]	; (810af3c <xTaskPriorityDisinherit+0xfc>)
 810ae58:	681b      	ldr	r3, [r3, #0]
 810ae5a:	693a      	ldr	r2, [r7, #16]
 810ae5c:	429a      	cmp	r2, r3
 810ae5e:	d009      	beq.n	810ae74 <xTaskPriorityDisinherit+0x34>
 810ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ae64:	f383 8811 	msr	BASEPRI, r3
 810ae68:	f3bf 8f6f 	isb	sy
 810ae6c:	f3bf 8f4f 	dsb	sy
 810ae70:	60fb      	str	r3, [r7, #12]
 810ae72:	e7fe      	b.n	810ae72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 810ae74:	693b      	ldr	r3, [r7, #16]
 810ae76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810ae78:	2b00      	cmp	r3, #0
 810ae7a:	d109      	bne.n	810ae90 <xTaskPriorityDisinherit+0x50>
 810ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ae80:	f383 8811 	msr	BASEPRI, r3
 810ae84:	f3bf 8f6f 	isb	sy
 810ae88:	f3bf 8f4f 	dsb	sy
 810ae8c:	60bb      	str	r3, [r7, #8]
 810ae8e:	e7fe      	b.n	810ae8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810ae90:	693b      	ldr	r3, [r7, #16]
 810ae92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810ae94:	1e5a      	subs	r2, r3, #1
 810ae96:	693b      	ldr	r3, [r7, #16]
 810ae98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810ae9a:	693b      	ldr	r3, [r7, #16]
 810ae9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ae9e:	693b      	ldr	r3, [r7, #16]
 810aea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810aea2:	429a      	cmp	r2, r3
 810aea4:	d044      	beq.n	810af30 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810aea6:	693b      	ldr	r3, [r7, #16]
 810aea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aeaa:	2b00      	cmp	r3, #0
 810aeac:	d140      	bne.n	810af30 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810aeae:	693b      	ldr	r3, [r7, #16]
 810aeb0:	3304      	adds	r3, #4
 810aeb2:	4618      	mov	r0, r3
 810aeb4:	f7fe fad2 	bl	810945c <uxListRemove>
 810aeb8:	4603      	mov	r3, r0
 810aeba:	2b00      	cmp	r3, #0
 810aebc:	d115      	bne.n	810aeea <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810aebe:	693b      	ldr	r3, [r7, #16]
 810aec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aec2:	491f      	ldr	r1, [pc, #124]	; (810af40 <xTaskPriorityDisinherit+0x100>)
 810aec4:	4613      	mov	r3, r2
 810aec6:	009b      	lsls	r3, r3, #2
 810aec8:	4413      	add	r3, r2
 810aeca:	009b      	lsls	r3, r3, #2
 810aecc:	440b      	add	r3, r1
 810aece:	681b      	ldr	r3, [r3, #0]
 810aed0:	2b00      	cmp	r3, #0
 810aed2:	d10a      	bne.n	810aeea <xTaskPriorityDisinherit+0xaa>
 810aed4:	693b      	ldr	r3, [r7, #16]
 810aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aed8:	2201      	movs	r2, #1
 810aeda:	fa02 f303 	lsl.w	r3, r2, r3
 810aede:	43da      	mvns	r2, r3
 810aee0:	4b18      	ldr	r3, [pc, #96]	; (810af44 <xTaskPriorityDisinherit+0x104>)
 810aee2:	681b      	ldr	r3, [r3, #0]
 810aee4:	4013      	ands	r3, r2
 810aee6:	4a17      	ldr	r2, [pc, #92]	; (810af44 <xTaskPriorityDisinherit+0x104>)
 810aee8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810aeea:	693b      	ldr	r3, [r7, #16]
 810aeec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810aeee:	693b      	ldr	r3, [r7, #16]
 810aef0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810aef2:	693b      	ldr	r3, [r7, #16]
 810aef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aef6:	f1c3 0207 	rsb	r2, r3, #7
 810aefa:	693b      	ldr	r3, [r7, #16]
 810aefc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810aefe:	693b      	ldr	r3, [r7, #16]
 810af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810af02:	2201      	movs	r2, #1
 810af04:	409a      	lsls	r2, r3
 810af06:	4b0f      	ldr	r3, [pc, #60]	; (810af44 <xTaskPriorityDisinherit+0x104>)
 810af08:	681b      	ldr	r3, [r3, #0]
 810af0a:	4313      	orrs	r3, r2
 810af0c:	4a0d      	ldr	r2, [pc, #52]	; (810af44 <xTaskPriorityDisinherit+0x104>)
 810af0e:	6013      	str	r3, [r2, #0]
 810af10:	693b      	ldr	r3, [r7, #16]
 810af12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810af14:	4613      	mov	r3, r2
 810af16:	009b      	lsls	r3, r3, #2
 810af18:	4413      	add	r3, r2
 810af1a:	009b      	lsls	r3, r3, #2
 810af1c:	4a08      	ldr	r2, [pc, #32]	; (810af40 <xTaskPriorityDisinherit+0x100>)
 810af1e:	441a      	add	r2, r3
 810af20:	693b      	ldr	r3, [r7, #16]
 810af22:	3304      	adds	r3, #4
 810af24:	4619      	mov	r1, r3
 810af26:	4610      	mov	r0, r2
 810af28:	f7fe fa3b 	bl	81093a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810af2c:	2301      	movs	r3, #1
 810af2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810af30:	697b      	ldr	r3, [r7, #20]
	}
 810af32:	4618      	mov	r0, r3
 810af34:	3718      	adds	r7, #24
 810af36:	46bd      	mov	sp, r7
 810af38:	bd80      	pop	{r7, pc}
 810af3a:	bf00      	nop
 810af3c:	100040b0 	.word	0x100040b0
 810af40:	100040b4 	.word	0x100040b4
 810af44:	100041b8 	.word	0x100041b8

0810af48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810af48:	b580      	push	{r7, lr}
 810af4a:	b088      	sub	sp, #32
 810af4c:	af00      	add	r7, sp, #0
 810af4e:	6078      	str	r0, [r7, #4]
 810af50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810af52:	687b      	ldr	r3, [r7, #4]
 810af54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810af56:	2301      	movs	r3, #1
 810af58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810af5a:	687b      	ldr	r3, [r7, #4]
 810af5c:	2b00      	cmp	r3, #0
 810af5e:	f000 8081 	beq.w	810b064 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810af62:	69bb      	ldr	r3, [r7, #24]
 810af64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810af66:	2b00      	cmp	r3, #0
 810af68:	d109      	bne.n	810af7e <vTaskPriorityDisinheritAfterTimeout+0x36>
 810af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af6e:	f383 8811 	msr	BASEPRI, r3
 810af72:	f3bf 8f6f 	isb	sy
 810af76:	f3bf 8f4f 	dsb	sy
 810af7a:	60fb      	str	r3, [r7, #12]
 810af7c:	e7fe      	b.n	810af7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810af7e:	69bb      	ldr	r3, [r7, #24]
 810af80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810af82:	683a      	ldr	r2, [r7, #0]
 810af84:	429a      	cmp	r2, r3
 810af86:	d902      	bls.n	810af8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810af88:	683b      	ldr	r3, [r7, #0]
 810af8a:	61fb      	str	r3, [r7, #28]
 810af8c:	e002      	b.n	810af94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810af8e:	69bb      	ldr	r3, [r7, #24]
 810af90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810af92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810af94:	69bb      	ldr	r3, [r7, #24]
 810af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810af98:	69fa      	ldr	r2, [r7, #28]
 810af9a:	429a      	cmp	r2, r3
 810af9c:	d062      	beq.n	810b064 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810af9e:	69bb      	ldr	r3, [r7, #24]
 810afa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810afa2:	697a      	ldr	r2, [r7, #20]
 810afa4:	429a      	cmp	r2, r3
 810afa6:	d15d      	bne.n	810b064 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810afa8:	4b30      	ldr	r3, [pc, #192]	; (810b06c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 810afaa:	681b      	ldr	r3, [r3, #0]
 810afac:	69ba      	ldr	r2, [r7, #24]
 810afae:	429a      	cmp	r2, r3
 810afb0:	d109      	bne.n	810afc6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 810afb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810afb6:	f383 8811 	msr	BASEPRI, r3
 810afba:	f3bf 8f6f 	isb	sy
 810afbe:	f3bf 8f4f 	dsb	sy
 810afc2:	60bb      	str	r3, [r7, #8]
 810afc4:	e7fe      	b.n	810afc4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810afc6:	69bb      	ldr	r3, [r7, #24]
 810afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810afca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810afcc:	69bb      	ldr	r3, [r7, #24]
 810afce:	69fa      	ldr	r2, [r7, #28]
 810afd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810afd2:	69bb      	ldr	r3, [r7, #24]
 810afd4:	699b      	ldr	r3, [r3, #24]
 810afd6:	2b00      	cmp	r3, #0
 810afd8:	db04      	blt.n	810afe4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810afda:	69fb      	ldr	r3, [r7, #28]
 810afdc:	f1c3 0207 	rsb	r2, r3, #7
 810afe0:	69bb      	ldr	r3, [r7, #24]
 810afe2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810afe4:	69bb      	ldr	r3, [r7, #24]
 810afe6:	6959      	ldr	r1, [r3, #20]
 810afe8:	693a      	ldr	r2, [r7, #16]
 810afea:	4613      	mov	r3, r2
 810afec:	009b      	lsls	r3, r3, #2
 810afee:	4413      	add	r3, r2
 810aff0:	009b      	lsls	r3, r3, #2
 810aff2:	4a1f      	ldr	r2, [pc, #124]	; (810b070 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810aff4:	4413      	add	r3, r2
 810aff6:	4299      	cmp	r1, r3
 810aff8:	d134      	bne.n	810b064 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810affa:	69bb      	ldr	r3, [r7, #24]
 810affc:	3304      	adds	r3, #4
 810affe:	4618      	mov	r0, r3
 810b000:	f7fe fa2c 	bl	810945c <uxListRemove>
 810b004:	4603      	mov	r3, r0
 810b006:	2b00      	cmp	r3, #0
 810b008:	d115      	bne.n	810b036 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810b00a:	69bb      	ldr	r3, [r7, #24]
 810b00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b00e:	4918      	ldr	r1, [pc, #96]	; (810b070 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810b010:	4613      	mov	r3, r2
 810b012:	009b      	lsls	r3, r3, #2
 810b014:	4413      	add	r3, r2
 810b016:	009b      	lsls	r3, r3, #2
 810b018:	440b      	add	r3, r1
 810b01a:	681b      	ldr	r3, [r3, #0]
 810b01c:	2b00      	cmp	r3, #0
 810b01e:	d10a      	bne.n	810b036 <vTaskPriorityDisinheritAfterTimeout+0xee>
 810b020:	69bb      	ldr	r3, [r7, #24]
 810b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b024:	2201      	movs	r2, #1
 810b026:	fa02 f303 	lsl.w	r3, r2, r3
 810b02a:	43da      	mvns	r2, r3
 810b02c:	4b11      	ldr	r3, [pc, #68]	; (810b074 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b02e:	681b      	ldr	r3, [r3, #0]
 810b030:	4013      	ands	r3, r2
 810b032:	4a10      	ldr	r2, [pc, #64]	; (810b074 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b034:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810b036:	69bb      	ldr	r3, [r7, #24]
 810b038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b03a:	2201      	movs	r2, #1
 810b03c:	409a      	lsls	r2, r3
 810b03e:	4b0d      	ldr	r3, [pc, #52]	; (810b074 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b040:	681b      	ldr	r3, [r3, #0]
 810b042:	4313      	orrs	r3, r2
 810b044:	4a0b      	ldr	r2, [pc, #44]	; (810b074 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 810b046:	6013      	str	r3, [r2, #0]
 810b048:	69bb      	ldr	r3, [r7, #24]
 810b04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b04c:	4613      	mov	r3, r2
 810b04e:	009b      	lsls	r3, r3, #2
 810b050:	4413      	add	r3, r2
 810b052:	009b      	lsls	r3, r3, #2
 810b054:	4a06      	ldr	r2, [pc, #24]	; (810b070 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 810b056:	441a      	add	r2, r3
 810b058:	69bb      	ldr	r3, [r7, #24]
 810b05a:	3304      	adds	r3, #4
 810b05c:	4619      	mov	r1, r3
 810b05e:	4610      	mov	r0, r2
 810b060:	f7fe f99f 	bl	81093a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810b064:	bf00      	nop
 810b066:	3720      	adds	r7, #32
 810b068:	46bd      	mov	sp, r7
 810b06a:	bd80      	pop	{r7, pc}
 810b06c:	100040b0 	.word	0x100040b0
 810b070:	100040b4 	.word	0x100040b4
 810b074:	100041b8 	.word	0x100041b8

0810b078 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810b078:	b480      	push	{r7}
 810b07a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810b07c:	4b07      	ldr	r3, [pc, #28]	; (810b09c <pvTaskIncrementMutexHeldCount+0x24>)
 810b07e:	681b      	ldr	r3, [r3, #0]
 810b080:	2b00      	cmp	r3, #0
 810b082:	d004      	beq.n	810b08e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810b084:	4b05      	ldr	r3, [pc, #20]	; (810b09c <pvTaskIncrementMutexHeldCount+0x24>)
 810b086:	681b      	ldr	r3, [r3, #0]
 810b088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810b08a:	3201      	adds	r2, #1
 810b08c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 810b08e:	4b03      	ldr	r3, [pc, #12]	; (810b09c <pvTaskIncrementMutexHeldCount+0x24>)
 810b090:	681b      	ldr	r3, [r3, #0]
	}
 810b092:	4618      	mov	r0, r3
 810b094:	46bd      	mov	sp, r7
 810b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b09a:	4770      	bx	lr
 810b09c:	100040b0 	.word	0x100040b0

0810b0a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810b0a0:	b580      	push	{r7, lr}
 810b0a2:	b084      	sub	sp, #16
 810b0a4:	af00      	add	r7, sp, #0
 810b0a6:	6078      	str	r0, [r7, #4]
 810b0a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810b0aa:	4b29      	ldr	r3, [pc, #164]	; (810b150 <prvAddCurrentTaskToDelayedList+0xb0>)
 810b0ac:	681b      	ldr	r3, [r3, #0]
 810b0ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b0b0:	4b28      	ldr	r3, [pc, #160]	; (810b154 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b0b2:	681b      	ldr	r3, [r3, #0]
 810b0b4:	3304      	adds	r3, #4
 810b0b6:	4618      	mov	r0, r3
 810b0b8:	f7fe f9d0 	bl	810945c <uxListRemove>
 810b0bc:	4603      	mov	r3, r0
 810b0be:	2b00      	cmp	r3, #0
 810b0c0:	d10b      	bne.n	810b0da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 810b0c2:	4b24      	ldr	r3, [pc, #144]	; (810b154 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b0c4:	681b      	ldr	r3, [r3, #0]
 810b0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b0c8:	2201      	movs	r2, #1
 810b0ca:	fa02 f303 	lsl.w	r3, r2, r3
 810b0ce:	43da      	mvns	r2, r3
 810b0d0:	4b21      	ldr	r3, [pc, #132]	; (810b158 <prvAddCurrentTaskToDelayedList+0xb8>)
 810b0d2:	681b      	ldr	r3, [r3, #0]
 810b0d4:	4013      	ands	r3, r2
 810b0d6:	4a20      	ldr	r2, [pc, #128]	; (810b158 <prvAddCurrentTaskToDelayedList+0xb8>)
 810b0d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810b0da:	687b      	ldr	r3, [r7, #4]
 810b0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b0e0:	d10a      	bne.n	810b0f8 <prvAddCurrentTaskToDelayedList+0x58>
 810b0e2:	683b      	ldr	r3, [r7, #0]
 810b0e4:	2b00      	cmp	r3, #0
 810b0e6:	d007      	beq.n	810b0f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b0e8:	4b1a      	ldr	r3, [pc, #104]	; (810b154 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b0ea:	681b      	ldr	r3, [r3, #0]
 810b0ec:	3304      	adds	r3, #4
 810b0ee:	4619      	mov	r1, r3
 810b0f0:	481a      	ldr	r0, [pc, #104]	; (810b15c <prvAddCurrentTaskToDelayedList+0xbc>)
 810b0f2:	f7fe f956 	bl	81093a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810b0f6:	e026      	b.n	810b146 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810b0f8:	68fa      	ldr	r2, [r7, #12]
 810b0fa:	687b      	ldr	r3, [r7, #4]
 810b0fc:	4413      	add	r3, r2
 810b0fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810b100:	4b14      	ldr	r3, [pc, #80]	; (810b154 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b102:	681b      	ldr	r3, [r3, #0]
 810b104:	68ba      	ldr	r2, [r7, #8]
 810b106:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810b108:	68ba      	ldr	r2, [r7, #8]
 810b10a:	68fb      	ldr	r3, [r7, #12]
 810b10c:	429a      	cmp	r2, r3
 810b10e:	d209      	bcs.n	810b124 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b110:	4b13      	ldr	r3, [pc, #76]	; (810b160 <prvAddCurrentTaskToDelayedList+0xc0>)
 810b112:	681a      	ldr	r2, [r3, #0]
 810b114:	4b0f      	ldr	r3, [pc, #60]	; (810b154 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b116:	681b      	ldr	r3, [r3, #0]
 810b118:	3304      	adds	r3, #4
 810b11a:	4619      	mov	r1, r3
 810b11c:	4610      	mov	r0, r2
 810b11e:	f7fe f964 	bl	81093ea <vListInsert>
}
 810b122:	e010      	b.n	810b146 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b124:	4b0f      	ldr	r3, [pc, #60]	; (810b164 <prvAddCurrentTaskToDelayedList+0xc4>)
 810b126:	681a      	ldr	r2, [r3, #0]
 810b128:	4b0a      	ldr	r3, [pc, #40]	; (810b154 <prvAddCurrentTaskToDelayedList+0xb4>)
 810b12a:	681b      	ldr	r3, [r3, #0]
 810b12c:	3304      	adds	r3, #4
 810b12e:	4619      	mov	r1, r3
 810b130:	4610      	mov	r0, r2
 810b132:	f7fe f95a 	bl	81093ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810b136:	4b0c      	ldr	r3, [pc, #48]	; (810b168 <prvAddCurrentTaskToDelayedList+0xc8>)
 810b138:	681b      	ldr	r3, [r3, #0]
 810b13a:	68ba      	ldr	r2, [r7, #8]
 810b13c:	429a      	cmp	r2, r3
 810b13e:	d202      	bcs.n	810b146 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 810b140:	4a09      	ldr	r2, [pc, #36]	; (810b168 <prvAddCurrentTaskToDelayedList+0xc8>)
 810b142:	68bb      	ldr	r3, [r7, #8]
 810b144:	6013      	str	r3, [r2, #0]
}
 810b146:	bf00      	nop
 810b148:	3710      	adds	r7, #16
 810b14a:	46bd      	mov	sp, r7
 810b14c:	bd80      	pop	{r7, pc}
 810b14e:	bf00      	nop
 810b150:	100041b4 	.word	0x100041b4
 810b154:	100040b0 	.word	0x100040b0
 810b158:	100041b8 	.word	0x100041b8
 810b15c:	1000419c 	.word	0x1000419c
 810b160:	1000416c 	.word	0x1000416c
 810b164:	10004168 	.word	0x10004168
 810b168:	100041d0 	.word	0x100041d0

0810b16c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 810b16c:	b580      	push	{r7, lr}
 810b16e:	b082      	sub	sp, #8
 810b170:	af00      	add	r7, sp, #0
 810b172:	6078      	str	r0, [r7, #4]
 810b174:	6039      	str	r1, [r7, #0]
 810b176:	687b      	ldr	r3, [r7, #4]
 810b178:	683a      	ldr	r2, [r7, #0]
 810b17a:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 810b17c:	687b      	ldr	r3, [r7, #4]
 810b17e:	683a      	ldr	r2, [r7, #0]
 810b180:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 810b182:	2103      	movs	r1, #3
 810b184:	4805      	ldr	r0, [pc, #20]	; (810b19c <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 810b186:	f7fd fed5 	bl	8108f34 <osSemaphoreCreate>
 810b18a:	4602      	mov	r2, r0
 810b18c:	687b      	ldr	r3, [r7, #4]
 810b18e:	605a      	str	r2, [r3, #4]
}
 810b190:	687b      	ldr	r3, [r7, #4]
 810b192:	4618      	mov	r0, r3
 810b194:	3708      	adds	r7, #8
 810b196:	46bd      	mov	sp, r7
 810b198:	bd80      	pop	{r7, pc}
 810b19a:	bf00      	nop
 810b19c:	0811400c 	.word	0x0811400c

0810b1a0 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 810b1a0:	b580      	push	{r7, lr}
 810b1a2:	b084      	sub	sp, #16
 810b1a4:	af00      	add	r7, sp, #0
 810b1a6:	60f8      	str	r0, [r7, #12]
 810b1a8:	60b9      	str	r1, [r7, #8]
 810b1aa:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 810b1ac:	2002      	movs	r0, #2
 810b1ae:	f7f9 fead 	bl	8104f0c <HAL_HSEM_IsSemTaken>
 810b1b2:	4603      	mov	r3, r0
 810b1b4:	2b00      	cmp	r3, #0
 810b1b6:	bf14      	ite	ne
 810b1b8:	2301      	movne	r3, #1
 810b1ba:	2300      	moveq	r3, #0
 810b1bc:	b2db      	uxtb	r3, r3
 810b1be:	2b00      	cmp	r3, #0
 810b1c0:	d000      	beq.n	810b1c4 <_ZN7Console8transmitEPhm+0x24>
 810b1c2:	e7f3      	b.n	810b1ac <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 810b1c4:	2102      	movs	r1, #2
 810b1c6:	2002      	movs	r0, #2
 810b1c8:	f7f9 fe7c 	bl	8104ec4 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 810b1cc:	68fb      	ldr	r3, [r7, #12]
 810b1ce:	6818      	ldr	r0, [r3, #0]
 810b1d0:	687b      	ldr	r3, [r7, #4]
 810b1d2:	b29a      	uxth	r2, r3
 810b1d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 810b1d8:	68b9      	ldr	r1, [r7, #8]
 810b1da:	f7fc fb31 	bl	8107840 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 810b1de:	2102      	movs	r1, #2
 810b1e0:	2002      	movs	r0, #2
 810b1e2:	f7f9 fea9 	bl	8104f38 <HAL_HSEM_Release>
}
 810b1e6:	bf00      	nop
 810b1e8:	3710      	adds	r7, #16
 810b1ea:	46bd      	mov	sp, r7
 810b1ec:	bd80      	pop	{r7, pc}

0810b1ee <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 810b1ee:	b580      	push	{r7, lr}
 810b1f0:	b082      	sub	sp, #8
 810b1f2:	af00      	add	r7, sp, #0
 810b1f4:	6078      	str	r0, [r7, #4]
 810b1f6:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 810b1f8:	6838      	ldr	r0, [r7, #0]
 810b1fa:	f7f5 f87b 	bl	81002f4 <strlen>
 810b1fe:	4603      	mov	r3, r0
 810b200:	461a      	mov	r2, r3
 810b202:	6839      	ldr	r1, [r7, #0]
 810b204:	6878      	ldr	r0, [r7, #4]
 810b206:	f7ff ffcb 	bl	810b1a0 <_ZN7Console8transmitEPhm>
}
 810b20a:	bf00      	nop
 810b20c:	3708      	adds	r7, #8
 810b20e:	46bd      	mov	sp, r7
 810b210:	bd80      	pop	{r7, pc}

0810b212 <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 810b212:	b40e      	push	{r1, r2, r3}
 810b214:	b580      	push	{r7, lr}
 810b216:	b085      	sub	sp, #20
 810b218:	af00      	add	r7, sp, #0
 810b21a:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810b21c:	f107 0320 	add.w	r3, r7, #32
 810b220:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 810b222:	687b      	ldr	r3, [r7, #4]
 810b224:	3308      	adds	r3, #8
 810b226:	68fa      	ldr	r2, [r7, #12]
 810b228:	69f9      	ldr	r1, [r7, #28]
 810b22a:	4618      	mov	r0, r3
 810b22c:	f006 fa62 	bl	81116f4 <vsiprintf>
 810b230:	4603      	mov	r3, r0
 810b232:	2b00      	cmp	r3, #0
 810b234:	bfcc      	ite	gt
 810b236:	2301      	movgt	r3, #1
 810b238:	2300      	movle	r3, #0
 810b23a:	b2db      	uxtb	r3, r3
 810b23c:	2b00      	cmp	r3, #0
 810b23e:	d005      	beq.n	810b24c <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 810b240:	687b      	ldr	r3, [r7, #4]
 810b242:	3308      	adds	r3, #8
 810b244:	4619      	mov	r1, r3
 810b246:	6878      	ldr	r0, [r7, #4]
 810b248:	f7ff ffd1 	bl	810b1ee <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 810b24c:	bf00      	nop
 810b24e:	3714      	adds	r7, #20
 810b250:	46bd      	mov	sp, r7
 810b252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810b256:	b003      	add	sp, #12
 810b258:	4770      	bx	lr
	...

0810b25c <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 810b25c:	b580      	push	{r7, lr}
 810b25e:	b082      	sub	sp, #8
 810b260:	af00      	add	r7, sp, #0
 810b262:	6078      	str	r0, [r7, #4]
 810b264:	6039      	str	r1, [r7, #0]
 810b266:	687b      	ldr	r3, [r7, #4]
 810b268:	2b01      	cmp	r3, #1
 810b26a:	d108      	bne.n	810b27e <_Z41__static_initialization_and_destruction_0ii+0x22>
 810b26c:	683b      	ldr	r3, [r7, #0]
 810b26e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810b272:	4293      	cmp	r3, r2
 810b274:	d103      	bne.n	810b27e <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 810b276:	4904      	ldr	r1, [pc, #16]	; (810b288 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 810b278:	4804      	ldr	r0, [pc, #16]	; (810b28c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 810b27a:	f7ff ff77 	bl	810b16c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 810b27e:	bf00      	nop
 810b280:	3708      	adds	r7, #8
 810b282:	46bd      	mov	sp, r7
 810b284:	bd80      	pop	{r7, pc}
 810b286:	bf00      	nop
 810b288:	10009de4 	.word	0x10009de4
 810b28c:	100041dc 	.word	0x100041dc

0810b290 <_GLOBAL__sub_I_console>:
 810b290:	b580      	push	{r7, lr}
 810b292:	af00      	add	r7, sp, #0
 810b294:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810b298:	2001      	movs	r0, #1
 810b29a:	f7ff ffdf 	bl	810b25c <_Z41__static_initialization_and_destruction_0ii>
 810b29e:	bd80      	pop	{r7, pc}

0810b2a0 <_ZN8Profiler6enableEv>:
			profiler->depth_to_display--;
		}
	}
}

void Profiler::enable() {
 810b2a0:	b480      	push	{r7}
 810b2a2:	b085      	sub	sp, #20
 810b2a4:	af00      	add	r7, sp, #0
 810b2a6:	6078      	str	r0, [r7, #4]
	profiling_requested = true;
 810b2a8:	687b      	ldr	r3, [r7, #4]
 810b2aa:	2201      	movs	r2, #1
 810b2ac:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340

	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810b2b0:	2300      	movs	r3, #0
 810b2b2:	73fb      	strb	r3, [r7, #15]
 810b2b4:	7bfb      	ldrb	r3, [r7, #15]
 810b2b6:	2b0f      	cmp	r3, #15
 810b2b8:	d80c      	bhi.n	810b2d4 <_ZN8Profiler6enableEv+0x34>
		profilers[i].depth_to_display = -1;
 810b2ba:	7bfb      	ldrb	r3, [r7, #15]
 810b2bc:	687a      	ldr	r2, [r7, #4]
 810b2be:	2134      	movs	r1, #52	; 0x34
 810b2c0:	fb01 f303 	mul.w	r3, r1, r3
 810b2c4:	4413      	add	r3, r2
 810b2c6:	3308      	adds	r3, #8
 810b2c8:	22ff      	movs	r2, #255	; 0xff
 810b2ca:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810b2cc:	7bfb      	ldrb	r3, [r7, #15]
 810b2ce:	3301      	adds	r3, #1
 810b2d0:	73fb      	strb	r3, [r7, #15]
 810b2d2:	e7ef      	b.n	810b2b4 <_ZN8Profiler6enableEv+0x14>
	}
}
 810b2d4:	bf00      	nop
 810b2d6:	3714      	adds	r7, #20
 810b2d8:	46bd      	mov	sp, r7
 810b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2de:	4770      	bx	lr

0810b2e0 <_ZN8Profiler7disableEv>:

void Profiler::disable() {
 810b2e0:	b480      	push	{r7}
 810b2e2:	b083      	sub	sp, #12
 810b2e4:	af00      	add	r7, sp, #0
 810b2e6:	6078      	str	r0, [r7, #4]
	profiling = false;
 810b2e8:	687b      	ldr	r3, [r7, #4]
 810b2ea:	2200      	movs	r2, #0
 810b2ec:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
}
 810b2f0:	bf00      	nop
 810b2f2:	370c      	adds	r7, #12
 810b2f4:	46bd      	mov	sp, r7
 810b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2fa:	4770      	bx	lr

0810b2fc <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:


#include "Debug.h"


Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 810b2fc:	b580      	push	{r7, lr}
 810b2fe:	b084      	sub	sp, #16
 810b300:	af00      	add	r7, sp, #0
 810b302:	60f8      	str	r0, [r7, #12]
 810b304:	60b9      	str	r1, [r7, #8]
 810b306:	607a      	str	r2, [r7, #4]
 810b308:	68fb      	ldr	r3, [r7, #12]
 810b30a:	4910      	ldr	r1, [pc, #64]	; (810b34c <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x50>)
 810b30c:	4618      	mov	r0, r3
 810b30e:	f004 ff9c 	bl	811024a <_ZN6ThreadC1EPKc>
 810b312:	4a0f      	ldr	r2, [pc, #60]	; (810b350 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x54>)
 810b314:	68fb      	ldr	r3, [r7, #12]
 810b316:	601a      	str	r2, [r3, #0]
 810b318:	68fb      	ldr	r3, [r7, #12]
 810b31a:	68ba      	ldr	r2, [r7, #8]
 810b31c:	60da      	str	r2, [r3, #12]
 810b31e:	68fb      	ldr	r3, [r7, #12]
 810b320:	687a      	ldr	r2, [r7, #4]
 810b322:	611a      	str	r2, [r3, #16]
 810b324:	68fb      	ldr	r3, [r7, #12]
 810b326:	2200      	movs	r2, #0
 810b328:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 810b32c:	68fb      	ldr	r3, [r7, #12]
 810b32e:	2200      	movs	r2, #0
 810b330:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
 810b334:	68fb      	ldr	r3, [r7, #12]
 810b336:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810b33a:	68fb      	ldr	r3, [r7, #12]
 810b33c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
}
 810b340:	68fb      	ldr	r3, [r7, #12]
 810b342:	4618      	mov	r0, r3
 810b344:	3710      	adds	r7, #16
 810b346:	46bd      	mov	sp, r7
 810b348:	bd80      	pop	{r7, pc}
 810b34a:	bf00      	nop
 810b34c:	081138b0 	.word	0x081138b0
 810b350:	0811401c 	.word	0x0811401c

0810b354 <_ZN5Shell4initEv>:

void Shell::init() {
 810b354:	b580      	push	{r7, lr}
 810b356:	b082      	sub	sp, #8
 810b358:	af00      	add	r7, sp, #0
 810b35a:	6078      	str	r0, [r7, #4]
	console.printf("\x1b[2J\x1b[H");
 810b35c:	490a      	ldr	r1, [pc, #40]	; (810b388 <_ZN5Shell4initEv+0x34>)
 810b35e:	480b      	ldr	r0, [pc, #44]	; (810b38c <_ZN5Shell4initEv+0x38>)
 810b360:	f7ff ff57 	bl	810b212 <_ZN7Console6printfEPKcz>
	console.printf("----- EPFL Xplore Avionics Shell -----\r\n");
 810b364:	490a      	ldr	r1, [pc, #40]	; (810b390 <_ZN5Shell4initEv+0x3c>)
 810b366:	4809      	ldr	r0, [pc, #36]	; (810b38c <_ZN5Shell4initEv+0x38>)
 810b368:	f7ff ff53 	bl	810b212 <_ZN7Console6printfEPKcz>
	HAL_UART_Receive_DMA(uart, dma_buffer, CMD_BUFFER_SIZE);
 810b36c:	687b      	ldr	r3, [r7, #4]
 810b36e:	68d8      	ldr	r0, [r3, #12]
 810b370:	687b      	ldr	r3, [r7, #4]
 810b372:	3314      	adds	r3, #20
 810b374:	f44f 7200 	mov.w	r2, #512	; 0x200
 810b378:	4619      	mov	r1, r3
 810b37a:	f7fc faf7 	bl	810796c <HAL_UART_Receive_DMA>
}
 810b37e:	bf00      	nop
 810b380:	3708      	adds	r7, #8
 810b382:	46bd      	mov	sp, r7
 810b384:	bd80      	pop	{r7, pc}
 810b386:	bf00      	nop
 810b388:	081138b8 	.word	0x081138b8
 810b38c:	100041dc 	.word	0x100041dc
 810b390:	081138c0 	.word	0x081138c0

0810b394 <_ZN5Shell4loopEv>:

void Shell::loop() {
 810b394:	b580      	push	{r7, lr}
 810b396:	b082      	sub	sp, #8
 810b398:	af00      	add	r7, sp, #0
 810b39a:	6078      	str	r0, [r7, #4]
	endDmaStreamIndex = CMD_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 810b39c:	687b      	ldr	r3, [r7, #4]
 810b39e:	68db      	ldr	r3, [r3, #12]
 810b3a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b3a2:	681b      	ldr	r3, [r3, #0]
 810b3a4:	4a4e      	ldr	r2, [pc, #312]	; (810b4e0 <_ZN5Shell4loopEv+0x14c>)
 810b3a6:	4293      	cmp	r3, r2
 810b3a8:	d068      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b3aa:	687b      	ldr	r3, [r7, #4]
 810b3ac:	68db      	ldr	r3, [r3, #12]
 810b3ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b3b0:	681b      	ldr	r3, [r3, #0]
 810b3b2:	4a4c      	ldr	r2, [pc, #304]	; (810b4e4 <_ZN5Shell4loopEv+0x150>)
 810b3b4:	4293      	cmp	r3, r2
 810b3b6:	d061      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b3b8:	687b      	ldr	r3, [r7, #4]
 810b3ba:	68db      	ldr	r3, [r3, #12]
 810b3bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b3be:	681b      	ldr	r3, [r3, #0]
 810b3c0:	4a49      	ldr	r2, [pc, #292]	; (810b4e8 <_ZN5Shell4loopEv+0x154>)
 810b3c2:	4293      	cmp	r3, r2
 810b3c4:	d05a      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b3c6:	687b      	ldr	r3, [r7, #4]
 810b3c8:	68db      	ldr	r3, [r3, #12]
 810b3ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b3cc:	681b      	ldr	r3, [r3, #0]
 810b3ce:	4a47      	ldr	r2, [pc, #284]	; (810b4ec <_ZN5Shell4loopEv+0x158>)
 810b3d0:	4293      	cmp	r3, r2
 810b3d2:	d053      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b3d4:	687b      	ldr	r3, [r7, #4]
 810b3d6:	68db      	ldr	r3, [r3, #12]
 810b3d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b3da:	681b      	ldr	r3, [r3, #0]
 810b3dc:	4a44      	ldr	r2, [pc, #272]	; (810b4f0 <_ZN5Shell4loopEv+0x15c>)
 810b3de:	4293      	cmp	r3, r2
 810b3e0:	d04c      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b3e2:	687b      	ldr	r3, [r7, #4]
 810b3e4:	68db      	ldr	r3, [r3, #12]
 810b3e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b3e8:	681b      	ldr	r3, [r3, #0]
 810b3ea:	4a42      	ldr	r2, [pc, #264]	; (810b4f4 <_ZN5Shell4loopEv+0x160>)
 810b3ec:	4293      	cmp	r3, r2
 810b3ee:	d045      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b3f0:	687b      	ldr	r3, [r7, #4]
 810b3f2:	68db      	ldr	r3, [r3, #12]
 810b3f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b3f6:	681b      	ldr	r3, [r3, #0]
 810b3f8:	4a3f      	ldr	r2, [pc, #252]	; (810b4f8 <_ZN5Shell4loopEv+0x164>)
 810b3fa:	4293      	cmp	r3, r2
 810b3fc:	d03e      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b3fe:	687b      	ldr	r3, [r7, #4]
 810b400:	68db      	ldr	r3, [r3, #12]
 810b402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b404:	681b      	ldr	r3, [r3, #0]
 810b406:	4a3d      	ldr	r2, [pc, #244]	; (810b4fc <_ZN5Shell4loopEv+0x168>)
 810b408:	4293      	cmp	r3, r2
 810b40a:	d037      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b40c:	687b      	ldr	r3, [r7, #4]
 810b40e:	68db      	ldr	r3, [r3, #12]
 810b410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b412:	681b      	ldr	r3, [r3, #0]
 810b414:	4a3a      	ldr	r2, [pc, #232]	; (810b500 <_ZN5Shell4loopEv+0x16c>)
 810b416:	4293      	cmp	r3, r2
 810b418:	d030      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b41a:	687b      	ldr	r3, [r7, #4]
 810b41c:	68db      	ldr	r3, [r3, #12]
 810b41e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b420:	681b      	ldr	r3, [r3, #0]
 810b422:	4a38      	ldr	r2, [pc, #224]	; (810b504 <_ZN5Shell4loopEv+0x170>)
 810b424:	4293      	cmp	r3, r2
 810b426:	d029      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b428:	687b      	ldr	r3, [r7, #4]
 810b42a:	68db      	ldr	r3, [r3, #12]
 810b42c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b42e:	681b      	ldr	r3, [r3, #0]
 810b430:	4a35      	ldr	r2, [pc, #212]	; (810b508 <_ZN5Shell4loopEv+0x174>)
 810b432:	4293      	cmp	r3, r2
 810b434:	d022      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b436:	687b      	ldr	r3, [r7, #4]
 810b438:	68db      	ldr	r3, [r3, #12]
 810b43a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b43c:	681b      	ldr	r3, [r3, #0]
 810b43e:	4a33      	ldr	r2, [pc, #204]	; (810b50c <_ZN5Shell4loopEv+0x178>)
 810b440:	4293      	cmp	r3, r2
 810b442:	d01b      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b444:	687b      	ldr	r3, [r7, #4]
 810b446:	68db      	ldr	r3, [r3, #12]
 810b448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b44a:	681b      	ldr	r3, [r3, #0]
 810b44c:	4a30      	ldr	r2, [pc, #192]	; (810b510 <_ZN5Shell4loopEv+0x17c>)
 810b44e:	4293      	cmp	r3, r2
 810b450:	d014      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b452:	687b      	ldr	r3, [r7, #4]
 810b454:	68db      	ldr	r3, [r3, #12]
 810b456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b458:	681b      	ldr	r3, [r3, #0]
 810b45a:	4a2e      	ldr	r2, [pc, #184]	; (810b514 <_ZN5Shell4loopEv+0x180>)
 810b45c:	4293      	cmp	r3, r2
 810b45e:	d00d      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b460:	687b      	ldr	r3, [r7, #4]
 810b462:	68db      	ldr	r3, [r3, #12]
 810b464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b466:	681b      	ldr	r3, [r3, #0]
 810b468:	4a2b      	ldr	r2, [pc, #172]	; (810b518 <_ZN5Shell4loopEv+0x184>)
 810b46a:	4293      	cmp	r3, r2
 810b46c:	d006      	beq.n	810b47c <_ZN5Shell4loopEv+0xe8>
 810b46e:	687b      	ldr	r3, [r7, #4]
 810b470:	68db      	ldr	r3, [r3, #12]
 810b472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b474:	681b      	ldr	r3, [r3, #0]
 810b476:	4a29      	ldr	r2, [pc, #164]	; (810b51c <_ZN5Shell4loopEv+0x188>)
 810b478:	4293      	cmp	r3, r2
 810b47a:	d107      	bne.n	810b48c <_ZN5Shell4loopEv+0xf8>
 810b47c:	687b      	ldr	r3, [r7, #4]
 810b47e:	68db      	ldr	r3, [r3, #12]
 810b480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b482:	681b      	ldr	r3, [r3, #0]
 810b484:	685b      	ldr	r3, [r3, #4]
 810b486:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810b48a:	e006      	b.n	810b49a <_ZN5Shell4loopEv+0x106>
 810b48c:	687b      	ldr	r3, [r7, #4]
 810b48e:	68db      	ldr	r3, [r3, #12]
 810b490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b492:	681b      	ldr	r3, [r3, #0]
 810b494:	685b      	ldr	r3, [r3, #4]
 810b496:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810b49a:	687a      	ldr	r2, [r7, #4]
 810b49c:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418

	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810b4a0:	687b      	ldr	r3, [r7, #4]
 810b4a2:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 810b4a6:	687b      	ldr	r3, [r7, #4]
 810b4a8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810b4ac:	429a      	cmp	r2, r3
 810b4ae:	d013      	beq.n	810b4d8 <_ZN5Shell4loopEv+0x144>
		receiveByte(dma_buffer[lastDmaStreamIndex]);
 810b4b0:	687b      	ldr	r3, [r7, #4]
 810b4b2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810b4b6:	687a      	ldr	r2, [r7, #4]
 810b4b8:	4413      	add	r3, r2
 810b4ba:	7d1b      	ldrb	r3, [r3, #20]
 810b4bc:	4619      	mov	r1, r3
 810b4be:	6878      	ldr	r0, [r7, #4]
 810b4c0:	f000 f82e 	bl	810b520 <_ZN5Shell11receiveByteEc>
		lastDmaStreamIndex = (lastDmaStreamIndex + 1) % CMD_BUFFER_SIZE;
 810b4c4:	687b      	ldr	r3, [r7, #4]
 810b4c6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810b4ca:	3301      	adds	r3, #1
 810b4cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810b4d0:	687b      	ldr	r3, [r7, #4]
 810b4d2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810b4d6:	e7e3      	b.n	810b4a0 <_ZN5Shell4loopEv+0x10c>
	}
}
 810b4d8:	bf00      	nop
 810b4da:	3708      	adds	r7, #8
 810b4dc:	46bd      	mov	sp, r7
 810b4de:	bd80      	pop	{r7, pc}
 810b4e0:	40020010 	.word	0x40020010
 810b4e4:	40020028 	.word	0x40020028
 810b4e8:	40020040 	.word	0x40020040
 810b4ec:	40020058 	.word	0x40020058
 810b4f0:	40020070 	.word	0x40020070
 810b4f4:	40020088 	.word	0x40020088
 810b4f8:	400200a0 	.word	0x400200a0
 810b4fc:	400200b8 	.word	0x400200b8
 810b500:	40020410 	.word	0x40020410
 810b504:	40020428 	.word	0x40020428
 810b508:	40020440 	.word	0x40020440
 810b50c:	40020458 	.word	0x40020458
 810b510:	40020470 	.word	0x40020470
 810b514:	40020488 	.word	0x40020488
 810b518:	400204a0 	.word	0x400204a0
 810b51c:	400204b8 	.word	0x400204b8

0810b520 <_ZN5Shell11receiveByteEc>:


void Shell::receiveByte(char cbuf) {
 810b520:	b580      	push	{r7, lr}
 810b522:	b084      	sub	sp, #16
 810b524:	af00      	add	r7, sp, #0
 810b526:	6078      	str	r0, [r7, #4]
 810b528:	460b      	mov	r3, r1
 810b52a:	70fb      	strb	r3, [r7, #3]
	if(cbuf == '\0') {
 810b52c:	78fb      	ldrb	r3, [r7, #3]
 810b52e:	2b00      	cmp	r3, #0
 810b530:	f000 809f 	beq.w	810b672 <_ZN5Shell11receiveByteEc+0x152>
		return;
	}

	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
 810b534:	78fb      	ldrb	r3, [r7, #3]
 810b536:	2b0a      	cmp	r3, #10
 810b538:	d050      	beq.n	810b5dc <_ZN5Shell11receiveByteEc+0xbc>
 810b53a:	78fb      	ldrb	r3, [r7, #3]
 810b53c:	2b0d      	cmp	r3, #13
 810b53e:	d04d      	beq.n	810b5dc <_ZN5Shell11receiveByteEc+0xbc>
		command_buffer[command_index++] = cbuf;
 810b540:	687b      	ldr	r3, [r7, #4]
 810b542:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810b546:	1c5a      	adds	r2, r3, #1
 810b548:	b2d1      	uxtb	r1, r2
 810b54a:	687a      	ldr	r2, [r7, #4]
 810b54c:	f882 141c 	strb.w	r1, [r2, #1052]	; 0x41c
 810b550:	461a      	mov	r2, r3
 810b552:	687b      	ldr	r3, [r7, #4]
 810b554:	4413      	add	r3, r2
 810b556:	78fa      	ldrb	r2, [r7, #3]
 810b558:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		if(cbuf == ' ') {
 810b55c:	78fb      	ldrb	r3, [r7, #3]
 810b55e:	2b20      	cmp	r3, #32
 810b560:	f040 8089 	bne.w	810b676 <_ZN5Shell11receiveByteEc+0x156>
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810b564:	687b      	ldr	r3, [r7, #4]
 810b566:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b56a:	461a      	mov	r2, r3
 810b56c:	687b      	ldr	r3, [r7, #4]
 810b56e:	3284      	adds	r2, #132	; 0x84
 810b570:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810b574:	461a      	mov	r2, r3
 810b576:	687b      	ldr	r3, [r7, #4]
 810b578:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810b57c:	1ad3      	subs	r3, r2, r3
 810b57e:	73fb      	strb	r3, [r7, #15]

			cmd.components[cmd.num_components].length = command_index - start_index - 1;
 810b580:	687b      	ldr	r3, [r7, #4]
 810b582:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810b586:	7bfb      	ldrb	r3, [r7, #15]
 810b588:	1ad3      	subs	r3, r2, r3
 810b58a:	b2db      	uxtb	r3, r3
 810b58c:	687a      	ldr	r2, [r7, #4]
 810b58e:	f892 2460 	ldrb.w	r2, [r2, #1120]	; 0x460
 810b592:	4610      	mov	r0, r2
 810b594:	3b01      	subs	r3, #1
 810b596:	b2d9      	uxtb	r1, r3
 810b598:	687a      	ldr	r2, [r7, #4]
 810b59a:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810b59e:	00db      	lsls	r3, r3, #3
 810b5a0:	4413      	add	r3, r2
 810b5a2:	460a      	mov	r2, r1
 810b5a4:	711a      	strb	r2, [r3, #4]
			cmd.num_components++;
 810b5a6:	687b      	ldr	r3, [r7, #4]
 810b5a8:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b5ac:	3301      	adds	r3, #1
 810b5ae:	b2da      	uxtb	r2, r3
 810b5b0:	687b      	ldr	r3, [r7, #4]
 810b5b2:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
 810b5b6:	687b      	ldr	r3, [r7, #4]
 810b5b8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810b5bc:	461a      	mov	r2, r3
 810b5be:	687b      	ldr	r3, [r7, #4]
 810b5c0:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b5c4:	4618      	mov	r0, r3
 810b5c6:	f502 7304 	add.w	r3, r2, #528	; 0x210
 810b5ca:	687a      	ldr	r2, [r7, #4]
 810b5cc:	4413      	add	r3, r2
 810b5ce:	1d19      	adds	r1, r3, #4
 810b5d0:	687b      	ldr	r3, [r7, #4]
 810b5d2:	f100 0284 	add.w	r2, r0, #132	; 0x84
 810b5d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		}
 810b5da:	e04c      	b.n	810b676 <_ZN5Shell11receiveByteEc+0x156>
	} else {
		uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b5e2:	461a      	mov	r2, r3
 810b5e4:	687b      	ldr	r3, [r7, #4]
 810b5e6:	3284      	adds	r2, #132	; 0x84
 810b5e8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 810b5ec:	461a      	mov	r2, r3
 810b5ee:	687b      	ldr	r3, [r7, #4]
 810b5f0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810b5f4:	1ad3      	subs	r3, r2, r3
 810b5f6:	73bb      	strb	r3, [r7, #14]
		cmd.components[cmd.num_components].length = command_index - start_index;
 810b5f8:	687b      	ldr	r3, [r7, #4]
 810b5fa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810b5fe:	687b      	ldr	r3, [r7, #4]
 810b600:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b604:	4618      	mov	r0, r3
 810b606:	7bbb      	ldrb	r3, [r7, #14]
 810b608:	1ad3      	subs	r3, r2, r3
 810b60a:	b2d9      	uxtb	r1, r3
 810b60c:	687a      	ldr	r2, [r7, #4]
 810b60e:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810b612:	00db      	lsls	r3, r3, #3
 810b614:	4413      	add	r3, r2
 810b616:	460a      	mov	r2, r1
 810b618:	711a      	strb	r2, [r3, #4]

		if(command_index - start_index > 0) {
 810b61a:	687b      	ldr	r3, [r7, #4]
 810b61c:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810b620:	461a      	mov	r2, r3
 810b622:	7bbb      	ldrb	r3, [r7, #14]
 810b624:	1ad3      	subs	r3, r2, r3
 810b626:	2b00      	cmp	r3, #0
 810b628:	dd07      	ble.n	810b63a <_ZN5Shell11receiveByteEc+0x11a>
			cmd.num_components++;
 810b62a:	687b      	ldr	r3, [r7, #4]
 810b62c:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b630:	3301      	adds	r3, #1
 810b632:	b2da      	uxtb	r2, r3
 810b634:	687b      	ldr	r3, [r7, #4]
 810b636:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
		}

		terminal->execute(&cmd, &console);
 810b63a:	687b      	ldr	r3, [r7, #4]
 810b63c:	6918      	ldr	r0, [r3, #16]
 810b63e:	687b      	ldr	r3, [r7, #4]
 810b640:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 810b644:	4a0e      	ldr	r2, [pc, #56]	; (810b680 <_ZN5Shell11receiveByteEc+0x160>)
 810b646:	4619      	mov	r1, r3
 810b648:	f000 f84e 	bl	810b6e8 <_ZN8Terminal7executeEP12ShellCommandP7Console>

		command_index = 0;
 810b64c:	687b      	ldr	r3, [r7, #4]
 810b64e:	2200      	movs	r2, #0
 810b650:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
		cmd.num_components = 0;
 810b654:	687b      	ldr	r3, [r7, #4]
 810b656:	2200      	movs	r2, #0
 810b658:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
		cmd.components[0].length = 0;
 810b65c:	687b      	ldr	r3, [r7, #4]
 810b65e:	2200      	movs	r2, #0
 810b660:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		cmd.components[0].component = command_buffer;
 810b664:	687b      	ldr	r3, [r7, #4]
 810b666:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810b66a:	687b      	ldr	r3, [r7, #4]
 810b66c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 810b670:	e002      	b.n	810b678 <_ZN5Shell11receiveByteEc+0x158>
		return;
 810b672:	bf00      	nop
 810b674:	e000      	b.n	810b678 <_ZN5Shell11receiveByteEc+0x158>
		}
 810b676:	bf00      	nop
	}
}
 810b678:	3710      	adds	r7, #16
 810b67a:	46bd      	mov	sp, r7
 810b67c:	bd80      	pop	{r7, pc}
 810b67e:	bf00      	nop
 810b680:	100041dc 	.word	0x100041dc

0810b684 <_ZN16CommandComponent7matchesEPKc>:

struct CommandComponent {
	const char* component;
	uint8_t length;

	bool matches(const char* target) {
 810b684:	b480      	push	{r7}
 810b686:	b085      	sub	sp, #20
 810b688:	af00      	add	r7, sp, #0
 810b68a:	6078      	str	r0, [r7, #4]
 810b68c:	6039      	str	r1, [r7, #0]
		uint8_t i;

		for(i = 0; i < length; i++) {
 810b68e:	2300      	movs	r3, #0
 810b690:	73fb      	strb	r3, [r7, #15]
 810b692:	687b      	ldr	r3, [r7, #4]
 810b694:	791b      	ldrb	r3, [r3, #4]
 810b696:	7bfa      	ldrb	r2, [r7, #15]
 810b698:	429a      	cmp	r2, r3
 810b69a:	d216      	bcs.n	810b6ca <_ZN16CommandComponent7matchesEPKc+0x46>
			if(target[i] != component[i] || target[i] == '\0') {
 810b69c:	7bfb      	ldrb	r3, [r7, #15]
 810b69e:	683a      	ldr	r2, [r7, #0]
 810b6a0:	4413      	add	r3, r2
 810b6a2:	781a      	ldrb	r2, [r3, #0]
 810b6a4:	687b      	ldr	r3, [r7, #4]
 810b6a6:	6819      	ldr	r1, [r3, #0]
 810b6a8:	7bfb      	ldrb	r3, [r7, #15]
 810b6aa:	440b      	add	r3, r1
 810b6ac:	781b      	ldrb	r3, [r3, #0]
 810b6ae:	429a      	cmp	r2, r3
 810b6b0:	d105      	bne.n	810b6be <_ZN16CommandComponent7matchesEPKc+0x3a>
 810b6b2:	7bfb      	ldrb	r3, [r7, #15]
 810b6b4:	683a      	ldr	r2, [r7, #0]
 810b6b6:	4413      	add	r3, r2
 810b6b8:	781b      	ldrb	r3, [r3, #0]
 810b6ba:	2b00      	cmp	r3, #0
 810b6bc:	d101      	bne.n	810b6c2 <_ZN16CommandComponent7matchesEPKc+0x3e>
				return false;
 810b6be:	2300      	movs	r3, #0
 810b6c0:	e00c      	b.n	810b6dc <_ZN16CommandComponent7matchesEPKc+0x58>
		for(i = 0; i < length; i++) {
 810b6c2:	7bfb      	ldrb	r3, [r7, #15]
 810b6c4:	3301      	adds	r3, #1
 810b6c6:	73fb      	strb	r3, [r7, #15]
 810b6c8:	e7e3      	b.n	810b692 <_ZN16CommandComponent7matchesEPKc+0xe>
			}
		}

		return target[i] == '\0';
 810b6ca:	7bfb      	ldrb	r3, [r7, #15]
 810b6cc:	683a      	ldr	r2, [r7, #0]
 810b6ce:	4413      	add	r3, r2
 810b6d0:	781b      	ldrb	r3, [r3, #0]
 810b6d2:	2b00      	cmp	r3, #0
 810b6d4:	bf0c      	ite	eq
 810b6d6:	2301      	moveq	r3, #1
 810b6d8:	2300      	movne	r3, #0
 810b6da:	b2db      	uxtb	r3, r3
	}
 810b6dc:	4618      	mov	r0, r3
 810b6de:	3714      	adds	r7, #20
 810b6e0:	46bd      	mov	sp, r7
 810b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6e6:	4770      	bx	lr

0810b6e8 <_ZN8Terminal7executeEP12ShellCommandP7Console>:


#define EQUALS(index, str) (cmd->num_components > (index) && cmd->components[(index)].matches((str)))


void Terminal::execute(ShellCommand* cmd, Console* feedback) {
 810b6e8:	b580      	push	{r7, lr}
 810b6ea:	b086      	sub	sp, #24
 810b6ec:	af00      	add	r7, sp, #0
 810b6ee:	60f8      	str	r0, [r7, #12]
 810b6f0:	60b9      	str	r1, [r7, #8]
 810b6f2:	607a      	str	r2, [r7, #4]
	if(cmd->num_components > 0) {
 810b6f4:	68bb      	ldr	r3, [r7, #8]
 810b6f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b6fa:	2b00      	cmp	r3, #0
 810b6fc:	f000 81e3 	beq.w	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		if(EQUALS(0, "help")) {
 810b700:	68bb      	ldr	r3, [r7, #8]
 810b702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b706:	2b00      	cmp	r3, #0
 810b708:	d009      	beq.n	810b71e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810b70a:	68bb      	ldr	r3, [r7, #8]
 810b70c:	49a8      	ldr	r1, [pc, #672]	; (810b9b0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 810b70e:	4618      	mov	r0, r3
 810b710:	f7ff ffb8 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b714:	4603      	mov	r3, r0
 810b716:	2b00      	cmp	r3, #0
 810b718:	d001      	beq.n	810b71e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810b71a:	2301      	movs	r3, #1
 810b71c:	e000      	b.n	810b720 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x38>
 810b71e:	2300      	movs	r3, #0
 810b720:	2b00      	cmp	r3, #0
 810b722:	d01c      	beq.n	810b75e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x76>
			feedback->printf("> Xplore Avionics available commands:\r\n");
 810b724:	49a3      	ldr	r1, [pc, #652]	; (810b9b4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
 810b726:	6878      	ldr	r0, [r7, #4]
 810b728:	f7ff fd73 	bl	810b212 <_ZN7Console6printfEPKcz>
			feedback->printf("> clear: clears the screen\r\n");
 810b72c:	49a2      	ldr	r1, [pc, #648]	; (810b9b8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 810b72e:	6878      	ldr	r0, [r7, #4]
 810b730:	f7ff fd6f 	bl	810b212 <_ZN7Console6printfEPKcz>
			feedback->printf("> help: shows this help page\r\n");
 810b734:	49a1      	ldr	r1, [pc, #644]	; (810b9bc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 810b736:	6878      	ldr	r0, [r7, #4]
 810b738:	f7ff fd6b 	bl	810b212 <_ZN7Console6printfEPKcz>
			feedback->printf("> monitor: enables or disables a specific monitor\r\n");
 810b73c:	49a0      	ldr	r1, [pc, #640]	; (810b9c0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 810b73e:	6878      	ldr	r0, [r7, #4]
 810b740:	f7ff fd67 	bl	810b212 <_ZN7Console6printfEPKcz>
			feedback->printf("> profiler: enables or disables the embedded profiler\r\n");
 810b744:	499f      	ldr	r1, [pc, #636]	; (810b9c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 810b746:	6878      	ldr	r0, [r7, #4]
 810b748:	f7ff fd63 	bl	810b212 <_ZN7Console6printfEPKcz>
			feedback->printf("> reset: performs a software reset of the avionics\r\n");
 810b74c:	499e      	ldr	r1, [pc, #632]	; (810b9c8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e0>)
 810b74e:	6878      	ldr	r0, [r7, #4]
 810b750:	f7ff fd5f 	bl	810b212 <_ZN7Console6printfEPKcz>
			feedback->printf("> version: displays the current terminal version\r\n");
 810b754:	499d      	ldr	r1, [pc, #628]	; (810b9cc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e4>)
 810b756:	6878      	ldr	r0, [r7, #4]
 810b758:	f7ff fd5b 	bl	810b212 <_ZN7Console6printfEPKcz>
			}
		} else {
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
		}
	}
}
 810b75c:	e1b3      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "version")) {
 810b75e:	68bb      	ldr	r3, [r7, #8]
 810b760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b764:	2b00      	cmp	r3, #0
 810b766:	d009      	beq.n	810b77c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810b768:	68bb      	ldr	r3, [r7, #8]
 810b76a:	4999      	ldr	r1, [pc, #612]	; (810b9d0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e8>)
 810b76c:	4618      	mov	r0, r3
 810b76e:	f7ff ff89 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b772:	4603      	mov	r3, r0
 810b774:	2b00      	cmp	r3, #0
 810b776:	d001      	beq.n	810b77c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810b778:	2301      	movs	r3, #1
 810b77a:	e000      	b.n	810b77e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x96>
 810b77c:	2300      	movs	r3, #0
 810b77e:	2b00      	cmp	r3, #0
 810b780:	d004      	beq.n	810b78c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa4>
			feedback->printf("> Xplore Avionics Terminal v1.0 by Arion Zimmermann\r\n");
 810b782:	4994      	ldr	r1, [pc, #592]	; (810b9d4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ec>)
 810b784:	6878      	ldr	r0, [r7, #4]
 810b786:	f7ff fd44 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b78a:	e19c      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "reset")) {
 810b78c:	68bb      	ldr	r3, [r7, #8]
 810b78e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b792:	2b00      	cmp	r3, #0
 810b794:	d009      	beq.n	810b7aa <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810b796:	68bb      	ldr	r3, [r7, #8]
 810b798:	498f      	ldr	r1, [pc, #572]	; (810b9d8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f0>)
 810b79a:	4618      	mov	r0, r3
 810b79c:	f7ff ff72 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b7a0:	4603      	mov	r3, r0
 810b7a2:	2b00      	cmp	r3, #0
 810b7a4:	d001      	beq.n	810b7aa <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810b7a6:	2301      	movs	r3, #1
 810b7a8:	e000      	b.n	810b7ac <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc4>
 810b7aa:	2300      	movs	r3, #0
 810b7ac:	2b00      	cmp	r3, #0
 810b7ae:	d002      	beq.n	810b7b6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xce>
			HAL_NVIC_SystemReset();
 810b7b0:	f7f6 fe73 	bl	810249a <HAL_NVIC_SystemReset>
}
 810b7b4:	e187      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "time")) {
 810b7b6:	68bb      	ldr	r3, [r7, #8]
 810b7b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b7bc:	2b00      	cmp	r3, #0
 810b7be:	d009      	beq.n	810b7d4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810b7c0:	68bb      	ldr	r3, [r7, #8]
 810b7c2:	4986      	ldr	r1, [pc, #536]	; (810b9dc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f4>)
 810b7c4:	4618      	mov	r0, r3
 810b7c6:	f7ff ff5d 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b7ca:	4603      	mov	r3, r0
 810b7cc:	2b00      	cmp	r3, #0
 810b7ce:	d001      	beq.n	810b7d4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810b7d0:	2301      	movs	r3, #1
 810b7d2:	e000      	b.n	810b7d6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
 810b7d4:	2300      	movs	r3, #0
 810b7d6:	2b00      	cmp	r3, #0
 810b7d8:	d008      	beq.n	810b7ec <_ZN8Terminal7executeEP12ShellCommandP7Console+0x104>
			feedback->printf("%d\r\n", HAL_GetTick());
 810b7da:	f7f6 fd5d 	bl	8102298 <HAL_GetTick>
 810b7de:	4603      	mov	r3, r0
 810b7e0:	461a      	mov	r2, r3
 810b7e2:	497f      	ldr	r1, [pc, #508]	; (810b9e0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f8>)
 810b7e4:	6878      	ldr	r0, [r7, #4]
 810b7e6:	f7ff fd14 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b7ea:	e16c      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "clear")) {
 810b7ec:	68bb      	ldr	r3, [r7, #8]
 810b7ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b7f2:	2b00      	cmp	r3, #0
 810b7f4:	d009      	beq.n	810b80a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810b7f6:	68bb      	ldr	r3, [r7, #8]
 810b7f8:	497a      	ldr	r1, [pc, #488]	; (810b9e4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2fc>)
 810b7fa:	4618      	mov	r0, r3
 810b7fc:	f7ff ff42 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b800:	4603      	mov	r3, r0
 810b802:	2b00      	cmp	r3, #0
 810b804:	d001      	beq.n	810b80a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810b806:	2301      	movs	r3, #1
 810b808:	e000      	b.n	810b80c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x124>
 810b80a:	2300      	movs	r3, #0
 810b80c:	2b00      	cmp	r3, #0
 810b80e:	d004      	beq.n	810b81a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x132>
			feedback->printf("\x1b[2J\x1b[H\e7");
 810b810:	4975      	ldr	r1, [pc, #468]	; (810b9e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x300>)
 810b812:	6878      	ldr	r0, [r7, #4]
 810b814:	f7ff fcfd 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b818:	e155      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "profiler")) {
 810b81a:	68bb      	ldr	r3, [r7, #8]
 810b81c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b820:	2b00      	cmp	r3, #0
 810b822:	d009      	beq.n	810b838 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810b824:	68bb      	ldr	r3, [r7, #8]
 810b826:	4971      	ldr	r1, [pc, #452]	; (810b9ec <_ZN8Terminal7executeEP12ShellCommandP7Console+0x304>)
 810b828:	4618      	mov	r0, r3
 810b82a:	f7ff ff2b 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b82e:	4603      	mov	r3, r0
 810b830:	2b00      	cmp	r3, #0
 810b832:	d001      	beq.n	810b838 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810b834:	2301      	movs	r3, #1
 810b836:	e000      	b.n	810b83a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x152>
 810b838:	2300      	movs	r3, #0
 810b83a:	2b00      	cmp	r3, #0
 810b83c:	d042      	beq.n	810b8c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1dc>
			if(EQUALS(1, "enable")) {
 810b83e:	68bb      	ldr	r3, [r7, #8]
 810b840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b844:	2b01      	cmp	r3, #1
 810b846:	d90a      	bls.n	810b85e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810b848:	68bb      	ldr	r3, [r7, #8]
 810b84a:	3308      	adds	r3, #8
 810b84c:	4968      	ldr	r1, [pc, #416]	; (810b9f0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810b84e:	4618      	mov	r0, r3
 810b850:	f7ff ff18 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b854:	4603      	mov	r3, r0
 810b856:	2b00      	cmp	r3, #0
 810b858:	d001      	beq.n	810b85e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810b85a:	2301      	movs	r3, #1
 810b85c:	e000      	b.n	810b860 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x178>
 810b85e:	2300      	movs	r3, #0
 810b860:	2b00      	cmp	r3, #0
 810b862:	d00b      	beq.n	810b87c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x194>
				profiler.enable();
 810b864:	4863      	ldr	r0, [pc, #396]	; (810b9f4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810b866:	f7ff fd1b 	bl	810b2a0 <_ZN8Profiler6enableEv>
				feedback->printf("\x1b[2J");
 810b86a:	4963      	ldr	r1, [pc, #396]	; (810b9f8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810b86c:	6878      	ldr	r0, [r7, #4]
 810b86e:	f7ff fcd0 	bl	810b212 <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now enabled\r\n");
 810b872:	4962      	ldr	r1, [pc, #392]	; (810b9fc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x314>)
 810b874:	6878      	ldr	r0, [r7, #4]
 810b876:	f7ff fccc 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b87a:	e124      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable")) {
 810b87c:	68bb      	ldr	r3, [r7, #8]
 810b87e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b882:	2b01      	cmp	r3, #1
 810b884:	d90a      	bls.n	810b89c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810b886:	68bb      	ldr	r3, [r7, #8]
 810b888:	3308      	adds	r3, #8
 810b88a:	495d      	ldr	r1, [pc, #372]	; (810ba00 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x318>)
 810b88c:	4618      	mov	r0, r3
 810b88e:	f7ff fef9 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b892:	4603      	mov	r3, r0
 810b894:	2b00      	cmp	r3, #0
 810b896:	d001      	beq.n	810b89c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810b898:	2301      	movs	r3, #1
 810b89a:	e000      	b.n	810b89e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b6>
 810b89c:	2300      	movs	r3, #0
 810b89e:	2b00      	cmp	r3, #0
 810b8a0:	d00b      	beq.n	810b8ba <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d2>
				profiler.disable();
 810b8a2:	4854      	ldr	r0, [pc, #336]	; (810b9f4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810b8a4:	f7ff fd1c 	bl	810b2e0 <_ZN8Profiler7disableEv>
				feedback->printf("\x1b[2J");
 810b8a8:	4953      	ldr	r1, [pc, #332]	; (810b9f8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810b8aa:	6878      	ldr	r0, [r7, #4]
 810b8ac:	f7ff fcb1 	bl	810b212 <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now disabled\r\n");
 810b8b0:	4954      	ldr	r1, [pc, #336]	; (810ba04 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x31c>)
 810b8b2:	6878      	ldr	r0, [r7, #4]
 810b8b4:	f7ff fcad 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b8b8:	e105      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: profiler { enable | disable }\r\n");
 810b8ba:	4953      	ldr	r1, [pc, #332]	; (810ba08 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x320>)
 810b8bc:	6878      	ldr	r0, [r7, #4]
 810b8be:	f7ff fca8 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b8c2:	e100      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "verbose")) {
 810b8c4:	68bb      	ldr	r3, [r7, #8]
 810b8c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b8ca:	2b00      	cmp	r3, #0
 810b8cc:	d009      	beq.n	810b8e2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810b8ce:	68bb      	ldr	r3, [r7, #8]
 810b8d0:	494e      	ldr	r1, [pc, #312]	; (810ba0c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x324>)
 810b8d2:	4618      	mov	r0, r3
 810b8d4:	f7ff fed6 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b8d8:	4603      	mov	r3, r0
 810b8da:	2b00      	cmp	r3, #0
 810b8dc:	d001      	beq.n	810b8e2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810b8de:	2301      	movs	r3, #1
 810b8e0:	e000      	b.n	810b8e4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
 810b8e2:	2300      	movs	r3, #0
 810b8e4:	2b00      	cmp	r3, #0
 810b8e6:	d03a      	beq.n	810b95e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x276>
			if(EQUALS(1, "on")) {
 810b8e8:	68bb      	ldr	r3, [r7, #8]
 810b8ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b8ee:	2b01      	cmp	r3, #1
 810b8f0:	d90a      	bls.n	810b908 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810b8f2:	68bb      	ldr	r3, [r7, #8]
 810b8f4:	3308      	adds	r3, #8
 810b8f6:	4946      	ldr	r1, [pc, #280]	; (810ba10 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x328>)
 810b8f8:	4618      	mov	r0, r3
 810b8fa:	f7ff fec3 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b8fe:	4603      	mov	r3, r0
 810b900:	2b00      	cmp	r3, #0
 810b902:	d001      	beq.n	810b908 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810b904:	2301      	movs	r3, #1
 810b906:	e000      	b.n	810b90a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x222>
 810b908:	2300      	movs	r3, #0
 810b90a:	2b00      	cmp	r3, #0
 810b90c:	d007      	beq.n	810b91e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
				verbose = true;
 810b90e:	68fb      	ldr	r3, [r7, #12]
 810b910:	2201      	movs	r2, #1
 810b912:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode enabled\r\n");
 810b914:	493f      	ldr	r1, [pc, #252]	; (810ba14 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x32c>)
 810b916:	6878      	ldr	r0, [r7, #4]
 810b918:	f7ff fc7b 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b91c:	e0d3      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "off")) {
 810b91e:	68bb      	ldr	r3, [r7, #8]
 810b920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b924:	2b01      	cmp	r3, #1
 810b926:	d90a      	bls.n	810b93e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810b928:	68bb      	ldr	r3, [r7, #8]
 810b92a:	3308      	adds	r3, #8
 810b92c:	493a      	ldr	r1, [pc, #232]	; (810ba18 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x330>)
 810b92e:	4618      	mov	r0, r3
 810b930:	f7ff fea8 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b934:	4603      	mov	r3, r0
 810b936:	2b00      	cmp	r3, #0
 810b938:	d001      	beq.n	810b93e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810b93a:	2301      	movs	r3, #1
 810b93c:	e000      	b.n	810b940 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>
 810b93e:	2300      	movs	r3, #0
 810b940:	2b00      	cmp	r3, #0
 810b942:	d007      	beq.n	810b954 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>
				verbose = false;
 810b944:	68fb      	ldr	r3, [r7, #12]
 810b946:	2200      	movs	r2, #0
 810b948:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode disabled\r\n");
 810b94a:	4934      	ldr	r1, [pc, #208]	; (810ba1c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x334>)
 810b94c:	6878      	ldr	r0, [r7, #4]
 810b94e:	f7ff fc60 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b952:	e0b8      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: verbose { on | off }\r\n");
 810b954:	4932      	ldr	r1, [pc, #200]	; (810ba20 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x338>)
 810b956:	6878      	ldr	r0, [r7, #4]
 810b958:	f7ff fc5b 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810b95c:	e0b3      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "monitor")) {
 810b95e:	68bb      	ldr	r3, [r7, #8]
 810b960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b964:	2b00      	cmp	r3, #0
 810b966:	d009      	beq.n	810b97c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810b968:	68bb      	ldr	r3, [r7, #8]
 810b96a:	492e      	ldr	r1, [pc, #184]	; (810ba24 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x33c>)
 810b96c:	4618      	mov	r0, r3
 810b96e:	f7ff fe89 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b972:	4603      	mov	r3, r0
 810b974:	2b00      	cmp	r3, #0
 810b976:	d001      	beq.n	810b97c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810b978:	2301      	movs	r3, #1
 810b97a:	e000      	b.n	810b97e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x296>
 810b97c:	2300      	movs	r3, #0
 810b97e:	2b00      	cmp	r3, #0
 810b980:	f000 8098 	beq.w	810bab4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3cc>
			if(EQUALS(1, "enable") && cmd->num_components >= 3) {
 810b984:	68bb      	ldr	r3, [r7, #8]
 810b986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b98a:	2b01      	cmp	r3, #1
 810b98c:	d94c      	bls.n	810ba28 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b98e:	68bb      	ldr	r3, [r7, #8]
 810b990:	3308      	adds	r3, #8
 810b992:	4917      	ldr	r1, [pc, #92]	; (810b9f0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810b994:	4618      	mov	r0, r3
 810b996:	f7ff fe75 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810b99a:	4603      	mov	r3, r0
 810b99c:	2b00      	cmp	r3, #0
 810b99e:	d043      	beq.n	810ba28 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b9a0:	68bb      	ldr	r3, [r7, #8]
 810b9a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b9a6:	2b02      	cmp	r3, #2
 810b9a8:	d93e      	bls.n	810ba28 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b9aa:	2301      	movs	r3, #1
 810b9ac:	e03d      	b.n	810ba2a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x342>
 810b9ae:	bf00      	nop
 810b9b0:	081138ec 	.word	0x081138ec
 810b9b4:	081138f4 	.word	0x081138f4
 810b9b8:	0811391c 	.word	0x0811391c
 810b9bc:	0811393c 	.word	0x0811393c
 810b9c0:	0811395c 	.word	0x0811395c
 810b9c4:	08113990 	.word	0x08113990
 810b9c8:	081139c8 	.word	0x081139c8
 810b9cc:	08113a00 	.word	0x08113a00
 810b9d0:	08113a34 	.word	0x08113a34
 810b9d4:	08113a3c 	.word	0x08113a3c
 810b9d8:	08113a74 	.word	0x08113a74
 810b9dc:	08113a7c 	.word	0x08113a7c
 810b9e0:	08113a84 	.word	0x08113a84
 810b9e4:	08113a8c 	.word	0x08113a8c
 810b9e8:	08113a94 	.word	0x08113a94
 810b9ec:	08113aa0 	.word	0x08113aa0
 810b9f0:	08113aac 	.word	0x08113aac
 810b9f4:	100042e4 	.word	0x100042e4
 810b9f8:	08113ab4 	.word	0x08113ab4
 810b9fc:	08113abc 	.word	0x08113abc
 810ba00:	08113ad8 	.word	0x08113ad8
 810ba04:	08113ae0 	.word	0x08113ae0
 810ba08:	08113afc 	.word	0x08113afc
 810ba0c:	08113b28 	.word	0x08113b28
 810ba10:	08113b30 	.word	0x08113b30
 810ba14:	08113b34 	.word	0x08113b34
 810ba18:	08113b50 	.word	0x08113b50
 810ba1c:	08113b54 	.word	0x08113b54
 810ba20:	08113b70 	.word	0x08113b70
 810ba24:	08113b90 	.word	0x08113b90
 810ba28:	2300      	movs	r3, #0
 810ba2a:	2b00      	cmp	r3, #0
 810ba2c:	d020      	beq.n	810ba70 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x388>
				uint8_t location = 0;
 810ba2e:	2300      	movs	r3, #0
 810ba30:	75fb      	strb	r3, [r7, #23]
				uint8_t refresh_rate = 1;
 810ba32:	2301      	movs	r3, #1
 810ba34:	75bb      	strb	r3, [r7, #22]
				if(cmd->num_components > 3) {
 810ba36:	68bb      	ldr	r3, [r7, #8]
 810ba38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ba3c:	2b03      	cmp	r3, #3
 810ba3e:	d906      	bls.n	810ba4e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x366>
					location = atoi(cmd->components[3].component);
 810ba40:	68bb      	ldr	r3, [r7, #8]
 810ba42:	699b      	ldr	r3, [r3, #24]
 810ba44:	4618      	mov	r0, r3
 810ba46:	f005 f82f 	bl	8110aa8 <atoi>
 810ba4a:	4603      	mov	r3, r0
 810ba4c:	75fb      	strb	r3, [r7, #23]
				if(cmd->num_components > 4) {
 810ba4e:	68bb      	ldr	r3, [r7, #8]
 810ba50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ba54:	2b04      	cmp	r3, #4
 810ba56:	d906      	bls.n	810ba66 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x37e>
					refresh_rate = atoi(cmd->components[4].component);
 810ba58:	68bb      	ldr	r3, [r7, #8]
 810ba5a:	6a1b      	ldr	r3, [r3, #32]
 810ba5c:	4618      	mov	r0, r3
 810ba5e:	f005 f823 	bl	8110aa8 <atoi>
 810ba62:	4603      	mov	r3, r0
 810ba64:	75bb      	strb	r3, [r7, #22]
				feedback->printf("\x1b[2J");
 810ba66:	491a      	ldr	r1, [pc, #104]	; (810bad0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810ba68:	6878      	ldr	r0, [r7, #4]
 810ba6a:	f7ff fbd2 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810ba6e:	e02a      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable") && cmd->num_components == 3) {
 810ba70:	68bb      	ldr	r3, [r7, #8]
 810ba72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ba76:	2b01      	cmp	r3, #1
 810ba78:	d90f      	bls.n	810ba9a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ba7a:	68bb      	ldr	r3, [r7, #8]
 810ba7c:	3308      	adds	r3, #8
 810ba7e:	4915      	ldr	r1, [pc, #84]	; (810bad4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3ec>)
 810ba80:	4618      	mov	r0, r3
 810ba82:	f7ff fdff 	bl	810b684 <_ZN16CommandComponent7matchesEPKc>
 810ba86:	4603      	mov	r3, r0
 810ba88:	2b00      	cmp	r3, #0
 810ba8a:	d006      	beq.n	810ba9a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ba8c:	68bb      	ldr	r3, [r7, #8]
 810ba8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810ba92:	2b03      	cmp	r3, #3
 810ba94:	d101      	bne.n	810ba9a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810ba96:	2301      	movs	r3, #1
 810ba98:	e000      	b.n	810ba9c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b4>
 810ba9a:	2300      	movs	r3, #0
 810ba9c:	2b00      	cmp	r3, #0
 810ba9e:	d004      	beq.n	810baaa <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3c2>
				feedback->printf("\x1b[2J");
 810baa0:	490b      	ldr	r1, [pc, #44]	; (810bad0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810baa2:	6878      	ldr	r0, [r7, #4]
 810baa4:	f7ff fbb5 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810baa8:	e00d      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: monitor { enable | disable } { sensor | state | kalman | flash | can | telemetry | airbrakes } [location] [refresh rate; default: 10]\r\n");
 810baaa:	490b      	ldr	r1, [pc, #44]	; (810bad8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f0>)
 810baac:	6878      	ldr	r0, [r7, #4]
 810baae:	f7ff fbb0 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810bab2:	e008      	b.n	810bac6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
 810bab4:	68bb      	ldr	r3, [r7, #8]
 810bab6:	791b      	ldrb	r3, [r3, #4]
 810bab8:	461a      	mov	r2, r3
 810baba:	68bb      	ldr	r3, [r7, #8]
 810babc:	681b      	ldr	r3, [r3, #0]
 810babe:	4907      	ldr	r1, [pc, #28]	; (810badc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f4>)
 810bac0:	6878      	ldr	r0, [r7, #4]
 810bac2:	f7ff fba6 	bl	810b212 <_ZN7Console6printfEPKcz>
}
 810bac6:	bf00      	nop
 810bac8:	3718      	adds	r7, #24
 810baca:	46bd      	mov	sp, r7
 810bacc:	bd80      	pop	{r7, pc}
 810bace:	bf00      	nop
 810bad0:	08113ab4 	.word	0x08113ab4
 810bad4:	08113ad8 	.word	0x08113ad8
 810bad8:	08113b98 	.word	0x08113b98
 810badc:	08113c2c 	.word	0x08113c2c

0810bae0 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 810bae0:	b580      	push	{r7, lr}
 810bae2:	b082      	sub	sp, #8
 810bae4:	af00      	add	r7, sp, #0
 810bae6:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 810bae8:	6878      	ldr	r0, [r7, #4]
 810baea:	f7fd fa57 	bl	8108f9c <pvPortMalloc>
 810baee:	4603      	mov	r3, r0
}
 810baf0:	4618      	mov	r0, r3
 810baf2:	3708      	adds	r7, #8
 810baf4:	46bd      	mov	sp, r7
 810baf6:	bd80      	pop	{r7, pc}

0810baf8 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 810baf8:	b580      	push	{r7, lr}
 810bafa:	b082      	sub	sp, #8
 810bafc:	af00      	add	r7, sp, #0
 810bafe:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 810bb00:	6878      	ldr	r0, [r7, #4]
 810bb02:	f7fd fb0d 	bl	8109120 <vPortFree>
}
 810bb06:	bf00      	nop
 810bb08:	3708      	adds	r7, #8
 810bb0a:	46bd      	mov	sp, r7
 810bb0c:	bd80      	pop	{r7, pc}

0810bb0e <_ZN7ADS111313ads1113_delayEi>:
 *      Author: AV Team
 */

#include <Libraries/ADS1113/ads1113.h>

void ADS1113::ads1113_delay(int time){
 810bb0e:	b580      	push	{r7, lr}
 810bb10:	b082      	sub	sp, #8
 810bb12:	af00      	add	r7, sp, #0
 810bb14:	6078      	str	r0, [r7, #4]
 810bb16:	6039      	str	r1, [r7, #0]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810bb18:	683b      	ldr	r3, [r7, #0]
 810bb1a:	4618      	mov	r0, r3
 810bb1c:	f7fd f9f6 	bl	8108f0c <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810bb20:	bf00      	nop
 810bb22:	3708      	adds	r7, #8
 810bb24:	46bd      	mov	sp, r7
 810bb26:	bd80      	pop	{r7, pc}

0810bb28 <_ZN7ADS1113C1EP19__I2C_HandleTypeDefh>:

ADS1113::ADS1113(I2C_HandleTypeDef *hi2c, uint8_t i2cAddress):
 810bb28:	b480      	push	{r7}
 810bb2a:	b085      	sub	sp, #20
 810bb2c:	af00      	add	r7, sp, #0
 810bb2e:	60f8      	str	r0, [r7, #12]
 810bb30:	60b9      	str	r1, [r7, #8]
 810bb32:	4613      	mov	r3, r2
 810bb34:	71fb      	strb	r3, [r7, #7]
	_i2cAddress(i2cAddress),
	_conversionDelay(ADS1113_CONVERSIONDELAY),
	_bitShift(0),
	_ads1113_i2c_port(hi2c)
 810bb36:	68fb      	ldr	r3, [r7, #12]
 810bb38:	79fa      	ldrb	r2, [r7, #7]
 810bb3a:	701a      	strb	r2, [r3, #0]
 810bb3c:	68fb      	ldr	r3, [r7, #12]
 810bb3e:	2209      	movs	r2, #9
 810bb40:	705a      	strb	r2, [r3, #1]
 810bb42:	68fb      	ldr	r3, [r7, #12]
 810bb44:	2200      	movs	r2, #0
 810bb46:	709a      	strb	r2, [r3, #2]
 810bb48:	68fb      	ldr	r3, [r7, #12]
 810bb4a:	68ba      	ldr	r2, [r7, #8]
 810bb4c:	605a      	str	r2, [r3, #4]
{}
 810bb4e:	68fb      	ldr	r3, [r7, #12]
 810bb50:	4618      	mov	r0, r3
 810bb52:	3714      	adds	r7, #20
 810bb54:	46bd      	mov	sp, r7
 810bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb5a:	4770      	bx	lr

0810bb5c <_ZN7ADS11135beginEv>:

bool ADS1113::begin(){
 810bb5c:	b580      	push	{r7, lr}
 810bb5e:	b082      	sub	sp, #8
 810bb60:	af00      	add	r7, sp, #0
 810bb62:	6078      	str	r0, [r7, #4]
	_ads1113_i2c_port->Init.Timing = 0x00602173;
 810bb64:	687b      	ldr	r3, [r7, #4]
 810bb66:	685b      	ldr	r3, [r3, #4]
 810bb68:	4a18      	ldr	r2, [pc, #96]	; (810bbcc <_ZN7ADS11135beginEv+0x70>)
 810bb6a:	605a      	str	r2, [r3, #4]
	_ads1113_i2c_port->Init.OwnAddress1 = 0;
 810bb6c:	687b      	ldr	r3, [r7, #4]
 810bb6e:	685b      	ldr	r3, [r3, #4]
 810bb70:	2200      	movs	r2, #0
 810bb72:	609a      	str	r2, [r3, #8]
	_ads1113_i2c_port->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810bb74:	687b      	ldr	r3, [r7, #4]
 810bb76:	685b      	ldr	r3, [r3, #4]
 810bb78:	2201      	movs	r2, #1
 810bb7a:	60da      	str	r2, [r3, #12]
	_ads1113_i2c_port->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810bb7c:	687b      	ldr	r3, [r7, #4]
 810bb7e:	685b      	ldr	r3, [r3, #4]
 810bb80:	2200      	movs	r2, #0
 810bb82:	611a      	str	r2, [r3, #16]
	_ads1113_i2c_port->Init.OwnAddress2 = 0;
 810bb84:	687b      	ldr	r3, [r7, #4]
 810bb86:	685b      	ldr	r3, [r3, #4]
 810bb88:	2200      	movs	r2, #0
 810bb8a:	615a      	str	r2, [r3, #20]
	_ads1113_i2c_port->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810bb8c:	687b      	ldr	r3, [r7, #4]
 810bb8e:	685b      	ldr	r3, [r3, #4]
 810bb90:	2200      	movs	r2, #0
 810bb92:	619a      	str	r2, [r3, #24]
	_ads1113_i2c_port->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810bb94:	687b      	ldr	r3, [r7, #4]
 810bb96:	685b      	ldr	r3, [r3, #4]
 810bb98:	2200      	movs	r2, #0
 810bb9a:	61da      	str	r2, [r3, #28]
	_ads1113_i2c_port->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810bb9c:	687b      	ldr	r3, [r7, #4]
 810bb9e:	685b      	ldr	r3, [r3, #4]
 810bba0:	2200      	movs	r2, #0
 810bba2:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(_ads1113_i2c_port) != HAL_OK){
 810bba4:	687b      	ldr	r3, [r7, #4]
 810bba6:	685b      	ldr	r3, [r3, #4]
 810bba8:	4618      	mov	r0, r3
 810bbaa:	f7f9 f9eb 	bl	8104f84 <HAL_I2C_Init>
 810bbae:	4603      	mov	r3, r0
 810bbb0:	2b00      	cmp	r3, #0
 810bbb2:	bf14      	ite	ne
 810bbb4:	2301      	movne	r3, #1
 810bbb6:	2300      	moveq	r3, #0
 810bbb8:	b2db      	uxtb	r3, r3
 810bbba:	2b00      	cmp	r3, #0
 810bbbc:	d001      	beq.n	810bbc2 <_ZN7ADS11135beginEv+0x66>
		return false;
 810bbbe:	2300      	movs	r3, #0
 810bbc0:	e000      	b.n	810bbc4 <_ZN7ADS11135beginEv+0x68>
	}
	return true;
 810bbc2:	2301      	movs	r3, #1
}
 810bbc4:	4618      	mov	r0, r3
 810bbc6:	3708      	adds	r7, #8
 810bbc8:	46bd      	mov	sp, r7
 810bbca:	bd80      	pop	{r7, pc}
 810bbcc:	00602173 	.word	0x00602173

0810bbd0 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht>:

/* Write to register in ADS1113 directly */
static void writeRegister(I2C_HandleTypeDef* i2c_port, uint16_t i2cAddress, uint8_t reg, uint16_t value) {
 810bbd0:	b580      	push	{r7, lr}
 810bbd2:	b088      	sub	sp, #32
 810bbd4:	af02      	add	r7, sp, #8
 810bbd6:	60f8      	str	r0, [r7, #12]
 810bbd8:	4608      	mov	r0, r1
 810bbda:	4611      	mov	r1, r2
 810bbdc:	461a      	mov	r2, r3
 810bbde:	4603      	mov	r3, r0
 810bbe0:	817b      	strh	r3, [r7, #10]
 810bbe2:	460b      	mov	r3, r1
 810bbe4:	727b      	strb	r3, [r7, #9]
 810bbe6:	4613      	mov	r3, r2
 810bbe8:	80fb      	strh	r3, [r7, #6]
	uint8_t pData[2];
	pData[0]=value & 0xff;
 810bbea:	88fb      	ldrh	r3, [r7, #6]
 810bbec:	b2db      	uxtb	r3, r3
 810bbee:	753b      	strb	r3, [r7, #20]
	pData[1]=(value >> 8);
 810bbf0:	88fb      	ldrh	r3, [r7, #6]
 810bbf2:	121b      	asrs	r3, r3, #8
 810bbf4:	b2db      	uxtb	r3, r3
 810bbf6:	757b      	strb	r3, [r7, #21]
	i2cAddress << 8;

	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c_port, i2cAddress, pData, sizeof(value), 10);
 810bbf8:	f107 0214 	add.w	r2, r7, #20
 810bbfc:	8979      	ldrh	r1, [r7, #10]
 810bbfe:	230a      	movs	r3, #10
 810bc00:	9300      	str	r3, [sp, #0]
 810bc02:	2302      	movs	r3, #2
 810bc04:	68f8      	ldr	r0, [r7, #12]
 810bc06:	f7f9 fa4d 	bl	81050a4 <HAL_I2C_Master_Transmit>
 810bc0a:	4603      	mov	r3, r0
 810bc0c:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 810bc0e:	7dfb      	ldrb	r3, [r7, #23]
 810bc10:	2b00      	cmp	r3, #0
		return;
	}
}
 810bc12:	3718      	adds	r7, #24
 810bc14:	46bd      	mov	sp, r7
 810bc16:	bd80      	pop	{r7, pc}

0810bc18 <_ZL12readRegisterP19__I2C_HandleTypeDefth>:

/* Read from register in ADS1113 directly */
static uint16_t readRegister(I2C_HandleTypeDef* i2c_port, uint16_t i2cAddress, uint8_t reg) {
 810bc18:	b580      	push	{r7, lr}
 810bc1a:	b086      	sub	sp, #24
 810bc1c:	af02      	add	r7, sp, #8
 810bc1e:	6078      	str	r0, [r7, #4]
 810bc20:	460b      	mov	r3, r1
 810bc22:	807b      	strh	r3, [r7, #2]
 810bc24:	4613      	mov	r3, r2
 810bc26:	707b      	strb	r3, [r7, #1]
	i2cAddress << 8;
	uint8_t pData[2];
	HAL_I2C_Master_Receive(i2c_port, i2cAddress, pData, sizeof(uint16_t), 10);
 810bc28:	f107 020c 	add.w	r2, r7, #12
 810bc2c:	8879      	ldrh	r1, [r7, #2]
 810bc2e:	230a      	movs	r3, #10
 810bc30:	9300      	str	r3, [sp, #0]
 810bc32:	2302      	movs	r3, #2
 810bc34:	6878      	ldr	r0, [r7, #4]
 810bc36:	f7f9 fb29 	bl	810528c <HAL_I2C_Master_Receive>
	return ((pData[0] << 8) | pData[1]); //CHECK HERE IF THERE ARE ERRORS : inverse pData[0] and pData[1]
 810bc3a:	7b3b      	ldrb	r3, [r7, #12]
 810bc3c:	021b      	lsls	r3, r3, #8
 810bc3e:	b21a      	sxth	r2, r3
 810bc40:	7b7b      	ldrb	r3, [r7, #13]
 810bc42:	b21b      	sxth	r3, r3
 810bc44:	4313      	orrs	r3, r2
 810bc46:	b21b      	sxth	r3, r3
 810bc48:	b29b      	uxth	r3, r3
}
 810bc4a:	4618      	mov	r0, r3
 810bc4c:	3710      	adds	r7, #16
 810bc4e:	46bd      	mov	sp, r7
 810bc50:	bd80      	pop	{r7, pc}

0810bc52 <_ZN7ADS111319readADC_SingleEndedEt>:

uint16_t ADS1113::readADC_SingleEnded(uint16_t sampleRate) {
 810bc52:	b580      	push	{r7, lr}
 810bc54:	b084      	sub	sp, #16
 810bc56:	af00      	add	r7, sp, #0
 810bc58:	6078      	str	r0, [r7, #4]
 810bc5a:	460b      	mov	r3, r1
 810bc5c:	807b      	strh	r3, [r7, #2]
  // Start with default values
  uint16_t config =
 810bc5e:	887b      	ldrh	r3, [r7, #2]
 810bc60:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 810bc64:	f043 0301 	orr.w	r3, r3, #1
 810bc68:	81fb      	strh	r3, [r7, #14]
      ADS1015_REG_CONFIG_CMODE_TRAD |   // Traditional comparator (default val)
      sampleRate 					|   // 1600 samples per second (default)
      ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;
 810bc6a:	89fb      	ldrh	r3, [r7, #14]
 810bc6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 810bc70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 810bc74:	81fb      	strh	r3, [r7, #14]

  // Write config register to the ADC
  writeRegister(_ads1113_i2c_port, _i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 810bc76:	687b      	ldr	r3, [r7, #4]
 810bc78:	6858      	ldr	r0, [r3, #4]
 810bc7a:	687b      	ldr	r3, [r7, #4]
 810bc7c:	781b      	ldrb	r3, [r3, #0]
 810bc7e:	b299      	uxth	r1, r3
 810bc80:	89fb      	ldrh	r3, [r7, #14]
 810bc82:	2201      	movs	r2, #1
 810bc84:	f7ff ffa4 	bl	810bbd0 <_ZL13writeRegisterP19__I2C_HandleTypeDeftht>

  // Wait for the conversion to complete
  ads1113_delay(_conversionDelay);
 810bc88:	687b      	ldr	r3, [r7, #4]
 810bc8a:	785b      	ldrb	r3, [r3, #1]
 810bc8c:	4619      	mov	r1, r3
 810bc8e:	6878      	ldr	r0, [r7, #4]
 810bc90:	f7ff ff3d 	bl	810bb0e <_ZN7ADS111313ads1113_delayEi>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(_ads1113_i2c_port, _i2cAddress, ADS1015_REG_POINTER_CONVERT) >> _bitShift;
 810bc94:	687b      	ldr	r3, [r7, #4]
 810bc96:	6858      	ldr	r0, [r3, #4]
 810bc98:	687b      	ldr	r3, [r7, #4]
 810bc9a:	781b      	ldrb	r3, [r3, #0]
 810bc9c:	b29b      	uxth	r3, r3
 810bc9e:	2200      	movs	r2, #0
 810bca0:	4619      	mov	r1, r3
 810bca2:	f7ff ffb9 	bl	810bc18 <_ZL12readRegisterP19__I2C_HandleTypeDefth>
 810bca6:	4603      	mov	r3, r0
 810bca8:	461a      	mov	r2, r3
 810bcaa:	687b      	ldr	r3, [r7, #4]
 810bcac:	789b      	ldrb	r3, [r3, #2]
 810bcae:	fa42 f303 	asr.w	r3, r2, r3
 810bcb2:	b29b      	uxth	r3, r3
}
 810bcb4:	4618      	mov	r0, r3
 810bcb6:	3710      	adds	r7, #16
 810bcb8:	46bd      	mov	sp, r7
 810bcba:	bd80      	pop	{r7, pc}

0810bcbc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 810bcbc:	b480      	push	{r7}
 810bcbe:	b083      	sub	sp, #12
 810bcc0:	af00      	add	r7, sp, #0
 810bcc2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 810bcc4:	687b      	ldr	r3, [r7, #4]
 810bcc6:	2203      	movs	r2, #3
 810bcc8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 810bcca:	687b      	ldr	r3, [r7, #4]
 810bccc:	2200      	movs	r2, #0
 810bcce:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 810bcd0:	687b      	ldr	r3, [r7, #4]
 810bcd2:	2203      	movs	r2, #3
 810bcd4:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 810bcd6:	687b      	ldr	r3, [r7, #4]
 810bcd8:	2203      	movs	r2, #3
 810bcda:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 810bcdc:	687b      	ldr	r3, [r7, #4]
 810bcde:	2203      	movs	r2, #3
 810bce0:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 810bce2:	687b      	ldr	r3, [r7, #4]
 810bce4:	2203      	movs	r2, #3
 810bce6:	715a      	strb	r2, [r3, #5]
}
 810bce8:	bf00      	nop
 810bcea:	370c      	adds	r7, #12
 810bcec:	46bd      	mov	sp, r7
 810bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcf2:	4770      	bx	lr

0810bcf4 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 810bcf4:	b580      	push	{r7, lr}
 810bcf6:	b08a      	sub	sp, #40	; 0x28
 810bcf8:	af04      	add	r7, sp, #16
 810bcfa:	60f8      	str	r0, [r7, #12]
 810bcfc:	460b      	mov	r3, r1
 810bcfe:	607a      	str	r2, [r7, #4]
 810bd00:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 810bd02:	68fb      	ldr	r3, [r7, #12]
 810bd04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810bd06:	005b      	lsls	r3, r3, #1
 810bd08:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 810bd0a:	68fb      	ldr	r3, [r7, #12]
 810bd0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810bd0e:	7afb      	ldrb	r3, [r7, #11]
 810bd10:	b29a      	uxth	r2, r3
 810bd12:	8af9      	ldrh	r1, [r7, #22]
 810bd14:	f241 3388 	movw	r3, #5000	; 0x1388
 810bd18:	9302      	str	r3, [sp, #8]
 810bd1a:	2302      	movs	r3, #2
 810bd1c:	9301      	str	r3, [sp, #4]
 810bd1e:	f107 0314 	add.w	r3, r7, #20
 810bd22:	9300      	str	r3, [sp, #0]
 810bd24:	2301      	movs	r3, #1
 810bd26:	f7f9 fcbb 	bl	81056a0 <HAL_I2C_Mem_Read>
 810bd2a:	4603      	mov	r3, r0
 810bd2c:	2b00      	cmp	r3, #0
 810bd2e:	d10b      	bne.n	810bd48 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 810bd30:	7d7b      	ldrb	r3, [r7, #21]
 810bd32:	021b      	lsls	r3, r3, #8
 810bd34:	b21a      	sxth	r2, r3
 810bd36:	7d3b      	ldrb	r3, [r7, #20]
 810bd38:	b21b      	sxth	r3, r3
 810bd3a:	4313      	orrs	r3, r2
 810bd3c:	b21b      	sxth	r3, r3
 810bd3e:	b29a      	uxth	r2, r3
 810bd40:	687b      	ldr	r3, [r7, #4]
 810bd42:	801a      	strh	r2, [r3, #0]
		return true;
 810bd44:	2301      	movs	r3, #1
 810bd46:	e000      	b.n	810bd4a <read_register16+0x56>
	} else {
		return false;
 810bd48:	2300      	movs	r3, #0
	}

}
 810bd4a:	4618      	mov	r0, r3
 810bd4c:	3718      	adds	r7, #24
 810bd4e:	46bd      	mov	sp, r7
 810bd50:	bd80      	pop	{r7, pc}

0810bd52 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 810bd52:	b590      	push	{r4, r7, lr}
 810bd54:	b08b      	sub	sp, #44	; 0x2c
 810bd56:	af04      	add	r7, sp, #16
 810bd58:	60f8      	str	r0, [r7, #12]
 810bd5a:	607a      	str	r2, [r7, #4]
 810bd5c:	461a      	mov	r2, r3
 810bd5e:	460b      	mov	r3, r1
 810bd60:	72fb      	strb	r3, [r7, #11]
 810bd62:	4613      	mov	r3, r2
 810bd64:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 810bd66:	68fb      	ldr	r3, [r7, #12]
 810bd68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810bd6a:	005b      	lsls	r3, r3, #1
 810bd6c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) {
 810bd6e:	68fb      	ldr	r3, [r7, #12]
 810bd70:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810bd72:	7afb      	ldrb	r3, [r7, #11]
 810bd74:	b29c      	uxth	r4, r3
 810bd76:	7abb      	ldrb	r3, [r7, #10]
 810bd78:	b29b      	uxth	r3, r3
 810bd7a:	8af9      	ldrh	r1, [r7, #22]
 810bd7c:	f241 3288 	movw	r2, #5000	; 0x1388
 810bd80:	9202      	str	r2, [sp, #8]
 810bd82:	9301      	str	r3, [sp, #4]
 810bd84:	687b      	ldr	r3, [r7, #4]
 810bd86:	9300      	str	r3, [sp, #0]
 810bd88:	2301      	movs	r3, #1
 810bd8a:	4622      	mov	r2, r4
 810bd8c:	f7f9 fc88 	bl	81056a0 <HAL_I2C_Mem_Read>
 810bd90:	4603      	mov	r3, r0
 810bd92:	2b00      	cmp	r3, #0
 810bd94:	d101      	bne.n	810bd9a <read_data+0x48>
		return 0;
 810bd96:	2300      	movs	r3, #0
 810bd98:	e000      	b.n	810bd9c <read_data+0x4a>
	} else {
		return 1;
 810bd9a:	2301      	movs	r3, #1
	}

}
 810bd9c:	4618      	mov	r0, r3
 810bd9e:	371c      	adds	r7, #28
 810bda0:	46bd      	mov	sp, r7
 810bda2:	bd90      	pop	{r4, r7, pc}

0810bda4 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 810bda4:	b580      	push	{r7, lr}
 810bda6:	b082      	sub	sp, #8
 810bda8:	af00      	add	r7, sp, #0
 810bdaa:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 810bdac:	687b      	ldr	r3, [r7, #4]
 810bdae:	461a      	mov	r2, r3
 810bdb0:	2188      	movs	r1, #136	; 0x88
 810bdb2:	6878      	ldr	r0, [r7, #4]
 810bdb4:	f7ff ff9e 	bl	810bcf4 <read_register16>
 810bdb8:	4603      	mov	r3, r0
 810bdba:	2b00      	cmp	r3, #0
 810bdbc:	d06f      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 810bdbe:	687b      	ldr	r3, [r7, #4]
 810bdc0:	3302      	adds	r3, #2
 810bdc2:	461a      	mov	r2, r3
 810bdc4:	218a      	movs	r1, #138	; 0x8a
 810bdc6:	6878      	ldr	r0, [r7, #4]
 810bdc8:	f7ff ff94 	bl	810bcf4 <read_register16>
 810bdcc:	4603      	mov	r3, r0
 810bdce:	2b00      	cmp	r3, #0
 810bdd0:	d065      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 810bdd2:	687b      	ldr	r3, [r7, #4]
 810bdd4:	3304      	adds	r3, #4
 810bdd6:	461a      	mov	r2, r3
 810bdd8:	218c      	movs	r1, #140	; 0x8c
 810bdda:	6878      	ldr	r0, [r7, #4]
 810bddc:	f7ff ff8a 	bl	810bcf4 <read_register16>
 810bde0:	4603      	mov	r3, r0
 810bde2:	2b00      	cmp	r3, #0
 810bde4:	d05b      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 810bde6:	687b      	ldr	r3, [r7, #4]
 810bde8:	3306      	adds	r3, #6
 810bdea:	461a      	mov	r2, r3
 810bdec:	218e      	movs	r1, #142	; 0x8e
 810bdee:	6878      	ldr	r0, [r7, #4]
 810bdf0:	f7ff ff80 	bl	810bcf4 <read_register16>
 810bdf4:	4603      	mov	r3, r0
 810bdf6:	2b00      	cmp	r3, #0
 810bdf8:	d051      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 810bdfa:	687b      	ldr	r3, [r7, #4]
 810bdfc:	3308      	adds	r3, #8
 810bdfe:	461a      	mov	r2, r3
 810be00:	2190      	movs	r1, #144	; 0x90
 810be02:	6878      	ldr	r0, [r7, #4]
 810be04:	f7ff ff76 	bl	810bcf4 <read_register16>
 810be08:	4603      	mov	r3, r0
 810be0a:	2b00      	cmp	r3, #0
 810be0c:	d047      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 810be0e:	687b      	ldr	r3, [r7, #4]
 810be10:	330a      	adds	r3, #10
 810be12:	461a      	mov	r2, r3
 810be14:	2192      	movs	r1, #146	; 0x92
 810be16:	6878      	ldr	r0, [r7, #4]
 810be18:	f7ff ff6c 	bl	810bcf4 <read_register16>
 810be1c:	4603      	mov	r3, r0
 810be1e:	2b00      	cmp	r3, #0
 810be20:	d03d      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 810be22:	687b      	ldr	r3, [r7, #4]
 810be24:	330c      	adds	r3, #12
 810be26:	461a      	mov	r2, r3
 810be28:	2194      	movs	r1, #148	; 0x94
 810be2a:	6878      	ldr	r0, [r7, #4]
 810be2c:	f7ff ff62 	bl	810bcf4 <read_register16>
 810be30:	4603      	mov	r3, r0
 810be32:	2b00      	cmp	r3, #0
 810be34:	d033      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 810be36:	687b      	ldr	r3, [r7, #4]
 810be38:	330e      	adds	r3, #14
 810be3a:	461a      	mov	r2, r3
 810be3c:	2196      	movs	r1, #150	; 0x96
 810be3e:	6878      	ldr	r0, [r7, #4]
 810be40:	f7ff ff58 	bl	810bcf4 <read_register16>
 810be44:	4603      	mov	r3, r0
 810be46:	2b00      	cmp	r3, #0
 810be48:	d029      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 810be4a:	687b      	ldr	r3, [r7, #4]
 810be4c:	3310      	adds	r3, #16
 810be4e:	461a      	mov	r2, r3
 810be50:	2198      	movs	r1, #152	; 0x98
 810be52:	6878      	ldr	r0, [r7, #4]
 810be54:	f7ff ff4e 	bl	810bcf4 <read_register16>
 810be58:	4603      	mov	r3, r0
 810be5a:	2b00      	cmp	r3, #0
 810be5c:	d01f      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 810be5e:	687b      	ldr	r3, [r7, #4]
 810be60:	3312      	adds	r3, #18
 810be62:	461a      	mov	r2, r3
 810be64:	219a      	movs	r1, #154	; 0x9a
 810be66:	6878      	ldr	r0, [r7, #4]
 810be68:	f7ff ff44 	bl	810bcf4 <read_register16>
 810be6c:	4603      	mov	r3, r0
 810be6e:	2b00      	cmp	r3, #0
 810be70:	d015      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 810be72:	687b      	ldr	r3, [r7, #4]
 810be74:	3314      	adds	r3, #20
 810be76:	461a      	mov	r2, r3
 810be78:	219c      	movs	r1, #156	; 0x9c
 810be7a:	6878      	ldr	r0, [r7, #4]
 810be7c:	f7ff ff3a 	bl	810bcf4 <read_register16>
 810be80:	4603      	mov	r3, r0
 810be82:	2b00      	cmp	r3, #0
 810be84:	d00b      	beq.n	810be9e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 810be86:	687b      	ldr	r3, [r7, #4]
 810be88:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 810be8a:	461a      	mov	r2, r3
 810be8c:	219e      	movs	r1, #158	; 0x9e
 810be8e:	6878      	ldr	r0, [r7, #4]
 810be90:	f7ff ff30 	bl	810bcf4 <read_register16>
 810be94:	4603      	mov	r3, r0
 810be96:	2b00      	cmp	r3, #0
 810be98:	d001      	beq.n	810be9e <read_calibration_data+0xfa>

		return true;
 810be9a:	2301      	movs	r3, #1
 810be9c:	e000      	b.n	810bea0 <read_calibration_data+0xfc>
	}

	return false;
 810be9e:	2300      	movs	r3, #0
}
 810bea0:	4618      	mov	r0, r3
 810bea2:	3708      	adds	r7, #8
 810bea4:	46bd      	mov	sp, r7
 810bea6:	bd80      	pop	{r7, pc}

0810bea8 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 810bea8:	b580      	push	{r7, lr}
 810beaa:	b084      	sub	sp, #16
 810beac:	af00      	add	r7, sp, #0
 810beae:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 810beb0:	687b      	ldr	r3, [r7, #4]
 810beb2:	f103 0218 	add.w	r2, r3, #24
 810beb6:	2301      	movs	r3, #1
 810beb8:	21a1      	movs	r1, #161	; 0xa1
 810beba:	6878      	ldr	r0, [r7, #4]
 810bebc:	f7ff ff49 	bl	810bd52 <read_data>
 810bec0:	4603      	mov	r3, r0
 810bec2:	2b00      	cmp	r3, #0
 810bec4:	d14b      	bne.n	810bf5e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 810bec6:	687b      	ldr	r3, [r7, #4]
 810bec8:	331a      	adds	r3, #26
 810beca:	461a      	mov	r2, r3
 810becc:	21e1      	movs	r1, #225	; 0xe1
 810bece:	6878      	ldr	r0, [r7, #4]
 810bed0:	f7ff ff10 	bl	810bcf4 <read_register16>
 810bed4:	4603      	mov	r3, r0
 810bed6:	2b00      	cmp	r3, #0
 810bed8:	d041      	beq.n	810bf5e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 810beda:	687b      	ldr	r3, [r7, #4]
 810bedc:	f103 021c 	add.w	r2, r3, #28
 810bee0:	2301      	movs	r3, #1
 810bee2:	21e3      	movs	r1, #227	; 0xe3
 810bee4:	6878      	ldr	r0, [r7, #4]
 810bee6:	f7ff ff34 	bl	810bd52 <read_data>
 810beea:	4603      	mov	r3, r0
 810beec:	2b00      	cmp	r3, #0
 810beee:	d136      	bne.n	810bf5e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 810bef0:	f107 030e 	add.w	r3, r7, #14
 810bef4:	461a      	mov	r2, r3
 810bef6:	21e4      	movs	r1, #228	; 0xe4
 810bef8:	6878      	ldr	r0, [r7, #4]
 810befa:	f7ff fefb 	bl	810bcf4 <read_register16>
 810befe:	4603      	mov	r3, r0
 810bf00:	2b00      	cmp	r3, #0
 810bf02:	d02c      	beq.n	810bf5e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 810bf04:	f107 030c 	add.w	r3, r7, #12
 810bf08:	461a      	mov	r2, r3
 810bf0a:	21e5      	movs	r1, #229	; 0xe5
 810bf0c:	6878      	ldr	r0, [r7, #4]
 810bf0e:	f7ff fef1 	bl	810bcf4 <read_register16>
 810bf12:	4603      	mov	r3, r0
 810bf14:	2b00      	cmp	r3, #0
 810bf16:	d022      	beq.n	810bf5e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 810bf18:	687b      	ldr	r3, [r7, #4]
 810bf1a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 810bf1e:	2301      	movs	r3, #1
 810bf20:	21e7      	movs	r1, #231	; 0xe7
 810bf22:	6878      	ldr	r0, [r7, #4]
 810bf24:	f7ff ff15 	bl	810bd52 <read_data>
 810bf28:	4603      	mov	r3, r0
 810bf2a:	2b00      	cmp	r3, #0
 810bf2c:	d117      	bne.n	810bf5e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 810bf2e:	89fb      	ldrh	r3, [r7, #14]
 810bf30:	011b      	lsls	r3, r3, #4
 810bf32:	b21b      	sxth	r3, r3
 810bf34:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 810bf38:	b21a      	sxth	r2, r3
 810bf3a:	89fb      	ldrh	r3, [r7, #14]
 810bf3c:	121b      	asrs	r3, r3, #8
 810bf3e:	b21b      	sxth	r3, r3
 810bf40:	f003 030f 	and.w	r3, r3, #15
 810bf44:	b21b      	sxth	r3, r3
 810bf46:	4313      	orrs	r3, r2
 810bf48:	b21a      	sxth	r2, r3
 810bf4a:	687b      	ldr	r3, [r7, #4]
 810bf4c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 810bf4e:	89bb      	ldrh	r3, [r7, #12]
 810bf50:	091b      	lsrs	r3, r3, #4
 810bf52:	b29b      	uxth	r3, r3
 810bf54:	b21a      	sxth	r2, r3
 810bf56:	687b      	ldr	r3, [r7, #4]
 810bf58:	841a      	strh	r2, [r3, #32]

		return true;
 810bf5a:	2301      	movs	r3, #1
 810bf5c:	e000      	b.n	810bf60 <read_hum_calibration_data+0xb8>
	}

	return false;
 810bf5e:	2300      	movs	r3, #0
}
 810bf60:	4618      	mov	r0, r3
 810bf62:	3710      	adds	r7, #16
 810bf64:	46bd      	mov	sp, r7
 810bf66:	bd80      	pop	{r7, pc}

0810bf68 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 810bf68:	b580      	push	{r7, lr}
 810bf6a:	b088      	sub	sp, #32
 810bf6c:	af04      	add	r7, sp, #16
 810bf6e:	6078      	str	r0, [r7, #4]
 810bf70:	460b      	mov	r3, r1
 810bf72:	70fb      	strb	r3, [r7, #3]
 810bf74:	4613      	mov	r3, r2
 810bf76:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 810bf78:	687b      	ldr	r3, [r7, #4]
 810bf7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810bf7c:	005b      	lsls	r3, r3, #1
 810bf7e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 810bf80:	687b      	ldr	r3, [r7, #4]
 810bf82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 810bf84:	78fb      	ldrb	r3, [r7, #3]
 810bf86:	b29a      	uxth	r2, r3
 810bf88:	89f9      	ldrh	r1, [r7, #14]
 810bf8a:	f242 7310 	movw	r3, #10000	; 0x2710
 810bf8e:	9302      	str	r3, [sp, #8]
 810bf90:	2301      	movs	r3, #1
 810bf92:	9301      	str	r3, [sp, #4]
 810bf94:	1cbb      	adds	r3, r7, #2
 810bf96:	9300      	str	r3, [sp, #0]
 810bf98:	2301      	movs	r3, #1
 810bf9a:	f7f9 fa6d 	bl	8105478 <HAL_I2C_Mem_Write>
 810bf9e:	4603      	mov	r3, r0
 810bfa0:	2b00      	cmp	r3, #0
 810bfa2:	d101      	bne.n	810bfa8 <write_register8+0x40>
		return false;
 810bfa4:	2300      	movs	r3, #0
 810bfa6:	e000      	b.n	810bfaa <write_register8+0x42>
	else
		return true;
 810bfa8:	2301      	movs	r3, #1
}
 810bfaa:	4618      	mov	r0, r3
 810bfac:	3710      	adds	r7, #16
 810bfae:	46bd      	mov	sp, r7
 810bfb0:	bd80      	pop	{r7, pc}

0810bfb2 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 810bfb2:	b580      	push	{r7, lr}
 810bfb4:	b084      	sub	sp, #16
 810bfb6:	af00      	add	r7, sp, #0
 810bfb8:	6078      	str	r0, [r7, #4]
 810bfba:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 810bfbc:	687b      	ldr	r3, [r7, #4]
 810bfbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810bfc0:	2b76      	cmp	r3, #118	; 0x76
 810bfc2:	d005      	beq.n	810bfd0 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 810bfc4:	687b      	ldr	r3, [r7, #4]
 810bfc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810bfc8:	2b77      	cmp	r3, #119	; 0x77
 810bfca:	d001      	beq.n	810bfd0 <bmp280_init+0x1e>

		return false;
 810bfcc:	2300      	movs	r3, #0
 810bfce:	e099      	b.n	810c104 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 810bfd0:	687b      	ldr	r3, [r7, #4]
 810bfd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 810bfd6:	2301      	movs	r3, #1
 810bfd8:	21d0      	movs	r1, #208	; 0xd0
 810bfda:	6878      	ldr	r0, [r7, #4]
 810bfdc:	f7ff feb9 	bl	810bd52 <read_data>
 810bfe0:	4603      	mov	r3, r0
 810bfe2:	2b00      	cmp	r3, #0
 810bfe4:	d001      	beq.n	810bfea <bmp280_init+0x38>
		return false;
 810bfe6:	2300      	movs	r3, #0
 810bfe8:	e08c      	b.n	810c104 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 810bfea:	687b      	ldr	r3, [r7, #4]
 810bfec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810bff0:	2b58      	cmp	r3, #88	; 0x58
 810bff2:	d006      	beq.n	810c002 <bmp280_init+0x50>
 810bff4:	687b      	ldr	r3, [r7, #4]
 810bff6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810bffa:	2b60      	cmp	r3, #96	; 0x60
 810bffc:	d001      	beq.n	810c002 <bmp280_init+0x50>

		return false;
 810bffe:	2300      	movs	r3, #0
 810c000:	e080      	b.n	810c104 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 810c002:	22b6      	movs	r2, #182	; 0xb6
 810c004:	21e0      	movs	r1, #224	; 0xe0
 810c006:	6878      	ldr	r0, [r7, #4]
 810c008:	f7ff ffae 	bl	810bf68 <write_register8>
 810c00c:	4603      	mov	r3, r0
 810c00e:	2b00      	cmp	r3, #0
 810c010:	d001      	beq.n	810c016 <bmp280_init+0x64>
		return false;
 810c012:	2300      	movs	r3, #0
 810c014:	e076      	b.n	810c104 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 810c016:	f107 020c 	add.w	r2, r7, #12
 810c01a:	2301      	movs	r3, #1
 810c01c:	21f3      	movs	r1, #243	; 0xf3
 810c01e:	6878      	ldr	r0, [r7, #4]
 810c020:	f7ff fe97 	bl	810bd52 <read_data>
 810c024:	4603      	mov	r3, r0
 810c026:	2b00      	cmp	r3, #0
 810c028:	d1f5      	bne.n	810c016 <bmp280_init+0x64>
				&& (status & 1) == 0)
 810c02a:	7b3b      	ldrb	r3, [r7, #12]
 810c02c:	f003 0301 	and.w	r3, r3, #1
 810c030:	2b00      	cmp	r3, #0
 810c032:	d1f0      	bne.n	810c016 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 810c034:	6878      	ldr	r0, [r7, #4]
 810c036:	f7ff feb5 	bl	810bda4 <read_calibration_data>
 810c03a:	4603      	mov	r3, r0
 810c03c:	f083 0301 	eor.w	r3, r3, #1
 810c040:	b2db      	uxtb	r3, r3
 810c042:	2b00      	cmp	r3, #0
 810c044:	d100      	bne.n	810c048 <bmp280_init+0x96>
 810c046:	e001      	b.n	810c04c <bmp280_init+0x9a>
		return false;
 810c048:	2300      	movs	r3, #0
 810c04a:	e05b      	b.n	810c104 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 810c04c:	687b      	ldr	r3, [r7, #4]
 810c04e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c052:	2b60      	cmp	r3, #96	; 0x60
 810c054:	d10a      	bne.n	810c06c <bmp280_init+0xba>
 810c056:	6878      	ldr	r0, [r7, #4]
 810c058:	f7ff ff26 	bl	810bea8 <read_hum_calibration_data>
 810c05c:	4603      	mov	r3, r0
 810c05e:	f083 0301 	eor.w	r3, r3, #1
 810c062:	b2db      	uxtb	r3, r3
 810c064:	2b00      	cmp	r3, #0
 810c066:	d001      	beq.n	810c06c <bmp280_init+0xba>
		return false;
 810c068:	2300      	movs	r3, #0
 810c06a:	e04b      	b.n	810c104 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 810c06c:	683b      	ldr	r3, [r7, #0]
 810c06e:	795b      	ldrb	r3, [r3, #5]
 810c070:	015b      	lsls	r3, r3, #5
 810c072:	b25a      	sxtb	r2, r3
 810c074:	683b      	ldr	r3, [r7, #0]
 810c076:	785b      	ldrb	r3, [r3, #1]
 810c078:	009b      	lsls	r3, r3, #2
 810c07a:	b25b      	sxtb	r3, r3
 810c07c:	4313      	orrs	r3, r2
 810c07e:	b25b      	sxtb	r3, r3
 810c080:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 810c082:	7bfb      	ldrb	r3, [r7, #15]
 810c084:	461a      	mov	r2, r3
 810c086:	21f5      	movs	r1, #245	; 0xf5
 810c088:	6878      	ldr	r0, [r7, #4]
 810c08a:	f7ff ff6d 	bl	810bf68 <write_register8>
 810c08e:	4603      	mov	r3, r0
 810c090:	2b00      	cmp	r3, #0
 810c092:	d001      	beq.n	810c098 <bmp280_init+0xe6>
		return false;
 810c094:	2300      	movs	r3, #0
 810c096:	e035      	b.n	810c104 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 810c098:	683b      	ldr	r3, [r7, #0]
 810c09a:	781b      	ldrb	r3, [r3, #0]
 810c09c:	2b01      	cmp	r3, #1
 810c09e:	d102      	bne.n	810c0a6 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 810c0a0:	683b      	ldr	r3, [r7, #0]
 810c0a2:	2200      	movs	r2, #0
 810c0a4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 810c0a6:	683b      	ldr	r3, [r7, #0]
 810c0a8:	78db      	ldrb	r3, [r3, #3]
 810c0aa:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 810c0ac:	b25a      	sxtb	r2, r3
 810c0ae:	683b      	ldr	r3, [r7, #0]
 810c0b0:	789b      	ldrb	r3, [r3, #2]
 810c0b2:	009b      	lsls	r3, r3, #2
 810c0b4:	b25b      	sxtb	r3, r3
 810c0b6:	4313      	orrs	r3, r2
 810c0b8:	b25a      	sxtb	r2, r3
 810c0ba:	683b      	ldr	r3, [r7, #0]
 810c0bc:	781b      	ldrb	r3, [r3, #0]
 810c0be:	b25b      	sxtb	r3, r3
 810c0c0:	4313      	orrs	r3, r2
 810c0c2:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 810c0c4:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 810c0c6:	687b      	ldr	r3, [r7, #4]
 810c0c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c0cc:	2b60      	cmp	r3, #96	; 0x60
 810c0ce:	d10d      	bne.n	810c0ec <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 810c0d0:	683b      	ldr	r3, [r7, #0]
 810c0d2:	791b      	ldrb	r3, [r3, #4]
 810c0d4:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 810c0d6:	7b7b      	ldrb	r3, [r7, #13]
 810c0d8:	461a      	mov	r2, r3
 810c0da:	21f2      	movs	r1, #242	; 0xf2
 810c0dc:	6878      	ldr	r0, [r7, #4]
 810c0de:	f7ff ff43 	bl	810bf68 <write_register8>
 810c0e2:	4603      	mov	r3, r0
 810c0e4:	2b00      	cmp	r3, #0
 810c0e6:	d001      	beq.n	810c0ec <bmp280_init+0x13a>
			return false;
 810c0e8:	2300      	movs	r3, #0
 810c0ea:	e00b      	b.n	810c104 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 810c0ec:	7bbb      	ldrb	r3, [r7, #14]
 810c0ee:	461a      	mov	r2, r3
 810c0f0:	21f4      	movs	r1, #244	; 0xf4
 810c0f2:	6878      	ldr	r0, [r7, #4]
 810c0f4:	f7ff ff38 	bl	810bf68 <write_register8>
 810c0f8:	4603      	mov	r3, r0
 810c0fa:	2b00      	cmp	r3, #0
 810c0fc:	d001      	beq.n	810c102 <bmp280_init+0x150>
		return false;
 810c0fe:	2300      	movs	r3, #0
 810c100:	e000      	b.n	810c104 <bmp280_init+0x152>
	}

	return true;
 810c102:	2301      	movs	r3, #1
}
 810c104:	4618      	mov	r0, r3
 810c106:	3710      	adds	r7, #16
 810c108:	46bd      	mov	sp, r7
 810c10a:	bd80      	pop	{r7, pc}

0810c10c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 810c10c:	b480      	push	{r7}
 810c10e:	b087      	sub	sp, #28
 810c110:	af00      	add	r7, sp, #0
 810c112:	60f8      	str	r0, [r7, #12]
 810c114:	60b9      	str	r1, [r7, #8]
 810c116:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810c118:	68bb      	ldr	r3, [r7, #8]
 810c11a:	10da      	asrs	r2, r3, #3
 810c11c:	68fb      	ldr	r3, [r7, #12]
 810c11e:	881b      	ldrh	r3, [r3, #0]
 810c120:	005b      	lsls	r3, r3, #1
 810c122:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 810c124:	68fa      	ldr	r2, [r7, #12]
 810c126:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 810c12a:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 810c12e:	12db      	asrs	r3, r3, #11
 810c130:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810c132:	68bb      	ldr	r3, [r7, #8]
 810c134:	111b      	asrs	r3, r3, #4
 810c136:	68fa      	ldr	r2, [r7, #12]
 810c138:	8812      	ldrh	r2, [r2, #0]
 810c13a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 810c13c:	68ba      	ldr	r2, [r7, #8]
 810c13e:	1112      	asrs	r2, r2, #4
 810c140:	68f9      	ldr	r1, [r7, #12]
 810c142:	8809      	ldrh	r1, [r1, #0]
 810c144:	1a52      	subs	r2, r2, r1
 810c146:	fb02 f303 	mul.w	r3, r2, r3
 810c14a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 810c14c:	68fa      	ldr	r2, [r7, #12]
 810c14e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 810c152:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 810c156:	139b      	asrs	r3, r3, #14
 810c158:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 810c15a:	697a      	ldr	r2, [r7, #20]
 810c15c:	693b      	ldr	r3, [r7, #16]
 810c15e:	441a      	add	r2, r3
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 810c164:	687b      	ldr	r3, [r7, #4]
 810c166:	681a      	ldr	r2, [r3, #0]
 810c168:	4613      	mov	r3, r2
 810c16a:	009b      	lsls	r3, r3, #2
 810c16c:	4413      	add	r3, r2
 810c16e:	3380      	adds	r3, #128	; 0x80
 810c170:	121b      	asrs	r3, r3, #8
}
 810c172:	4618      	mov	r0, r3
 810c174:	371c      	adds	r7, #28
 810c176:	46bd      	mov	sp, r7
 810c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c17c:	4770      	bx	lr

0810c17e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 810c17e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 810c182:	b08a      	sub	sp, #40	; 0x28
 810c184:	af00      	add	r7, sp, #0
 810c186:	60f8      	str	r0, [r7, #12]
 810c188:	60b9      	str	r1, [r7, #8]
 810c18a:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 810c18c:	687b      	ldr	r3, [r7, #4]
 810c18e:	4619      	mov	r1, r3
 810c190:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810c194:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 810c198:	f142 34ff 	adc.w	r4, r2, #4294967295
 810c19c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 810c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1a2:	6a3a      	ldr	r2, [r7, #32]
 810c1a4:	fb02 f203 	mul.w	r2, r2, r3
 810c1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1aa:	6a39      	ldr	r1, [r7, #32]
 810c1ac:	fb01 f303 	mul.w	r3, r1, r3
 810c1b0:	441a      	add	r2, r3
 810c1b2:	6a39      	ldr	r1, [r7, #32]
 810c1b4:	6a3b      	ldr	r3, [r7, #32]
 810c1b6:	fba1 3403 	umull	r3, r4, r1, r3
 810c1ba:	4422      	add	r2, r4
 810c1bc:	4614      	mov	r4, r2
 810c1be:	68fa      	ldr	r2, [r7, #12]
 810c1c0:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 810c1c4:	b211      	sxth	r1, r2
 810c1c6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810c1ca:	fb01 f504 	mul.w	r5, r1, r4
 810c1ce:	fb03 f002 	mul.w	r0, r3, r2
 810c1d2:	4428      	add	r0, r5
 810c1d4:	fba3 3401 	umull	r3, r4, r3, r1
 810c1d8:	1902      	adds	r2, r0, r4
 810c1da:	4614      	mov	r4, r2
 810c1dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
 810c1e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 810c1e4:	68fb      	ldr	r3, [r7, #12]
 810c1e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 810c1ea:	b21b      	sxth	r3, r3
 810c1ec:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810c1f0:	6a3a      	ldr	r2, [r7, #32]
 810c1f2:	fb04 f102 	mul.w	r1, r4, r2
 810c1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c1f8:	fb03 f202 	mul.w	r2, r3, r2
 810c1fc:	1888      	adds	r0, r1, r2
 810c1fe:	6a3a      	ldr	r2, [r7, #32]
 810c200:	fba2 1203 	umull	r1, r2, r2, r3
 810c204:	1883      	adds	r3, r0, r2
 810c206:	461a      	mov	r2, r3
 810c208:	f04f 0500 	mov.w	r5, #0
 810c20c:	f04f 0600 	mov.w	r6, #0
 810c210:	0456      	lsls	r6, r2, #17
 810c212:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 810c216:	044d      	lsls	r5, r1, #17
 810c218:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810c21c:	186b      	adds	r3, r5, r1
 810c21e:	eb46 0402 	adc.w	r4, r6, r2
 810c222:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 810c226:	68fb      	ldr	r3, [r7, #12]
 810c228:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 810c22c:	b219      	sxth	r1, r3
 810c22e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810c232:	f04f 0500 	mov.w	r5, #0
 810c236:	f04f 0600 	mov.w	r6, #0
 810c23a:	00ce      	lsls	r6, r1, #3
 810c23c:	2500      	movs	r5, #0
 810c23e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810c242:	186b      	adds	r3, r5, r1
 810c244:	eb46 0402 	adc.w	r4, r6, r2
 810c248:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c24e:	6a3a      	ldr	r2, [r7, #32]
 810c250:	fb02 f203 	mul.w	r2, r2, r3
 810c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c256:	6a39      	ldr	r1, [r7, #32]
 810c258:	fb01 f303 	mul.w	r3, r1, r3
 810c25c:	441a      	add	r2, r3
 810c25e:	6a39      	ldr	r1, [r7, #32]
 810c260:	6a3b      	ldr	r3, [r7, #32]
 810c262:	fba1 3403 	umull	r3, r4, r1, r3
 810c266:	4422      	add	r2, r4
 810c268:	4614      	mov	r4, r2
 810c26a:	68fa      	ldr	r2, [r7, #12]
 810c26c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 810c270:	b211      	sxth	r1, r2
 810c272:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810c276:	fb01 f504 	mul.w	r5, r1, r4
 810c27a:	fb03 f002 	mul.w	r0, r3, r2
 810c27e:	4428      	add	r0, r5
 810c280:	fba3 3401 	umull	r3, r4, r3, r1
 810c284:	1902      	adds	r2, r0, r4
 810c286:	4614      	mov	r4, r2
 810c288:	f04f 0100 	mov.w	r1, #0
 810c28c:	f04f 0200 	mov.w	r2, #0
 810c290:	0a19      	lsrs	r1, r3, #8
 810c292:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 810c296:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 810c298:	68fb      	ldr	r3, [r7, #12]
 810c29a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810c29e:	b21b      	sxth	r3, r3
 810c2a0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810c2a4:	6a38      	ldr	r0, [r7, #32]
 810c2a6:	fb04 f500 	mul.w	r5, r4, r0
 810c2aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810c2ac:	fb03 f000 	mul.w	r0, r3, r0
 810c2b0:	4428      	add	r0, r5
 810c2b2:	6a3d      	ldr	r5, [r7, #32]
 810c2b4:	fba5 5603 	umull	r5, r6, r5, r3
 810c2b8:	1983      	adds	r3, r0, r6
 810c2ba:	461e      	mov	r6, r3
 810c2bc:	f04f 0b00 	mov.w	fp, #0
 810c2c0:	f04f 0c00 	mov.w	ip, #0
 810c2c4:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 810c2c8:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 810c2cc:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 810c2d0:	eb1b 0301 	adds.w	r3, fp, r1
 810c2d4:	eb4c 0402 	adc.w	r4, ip, r2
 810c2d8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 810c2dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810c2e0:	1c19      	adds	r1, r3, #0
 810c2e2:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 810c2e6:	68fb      	ldr	r3, [r7, #12]
 810c2e8:	88db      	ldrh	r3, [r3, #6]
 810c2ea:	b29b      	uxth	r3, r3
 810c2ec:	f04f 0400 	mov.w	r4, #0
 810c2f0:	fb03 f502 	mul.w	r5, r3, r2
 810c2f4:	fb01 f004 	mul.w	r0, r1, r4
 810c2f8:	4428      	add	r0, r5
 810c2fa:	fba1 3403 	umull	r3, r4, r1, r3
 810c2fe:	1902      	adds	r2, r0, r4
 810c300:	4614      	mov	r4, r2
 810c302:	f04f 0100 	mov.w	r1, #0
 810c306:	f04f 0200 	mov.w	r2, #0
 810c30a:	1061      	asrs	r1, r4, #1
 810c30c:	17e2      	asrs	r2, r4, #31
 810c30e:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 810c312:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810c316:	4323      	orrs	r3, r4
 810c318:	d101      	bne.n	810c31e <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 810c31a:	2300      	movs	r3, #0
 810c31c:	e0d4      	b.n	810c4c8 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 810c31e:	68bb      	ldr	r3, [r7, #8]
 810c320:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810c324:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810c328:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 810c32c:	693b      	ldr	r3, [r7, #16]
 810c32e:	ea4f 0963 	mov.w	r9, r3, asr #1
 810c332:	693b      	ldr	r3, [r7, #16]
 810c334:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 810c338:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810c33c:	4645      	mov	r5, r8
 810c33e:	464e      	mov	r6, r9
 810c340:	1aed      	subs	r5, r5, r3
 810c342:	eb66 0604 	sbc.w	r6, r6, r4
 810c346:	46a8      	mov	r8, r5
 810c348:	46b1      	mov	r9, r6
 810c34a:	eb18 0308 	adds.w	r3, r8, r8
 810c34e:	eb49 0409 	adc.w	r4, r9, r9
 810c352:	4698      	mov	r8, r3
 810c354:	46a1      	mov	r9, r4
 810c356:	eb18 0805 	adds.w	r8, r8, r5
 810c35a:	eb49 0906 	adc.w	r9, r9, r6
 810c35e:	f04f 0100 	mov.w	r1, #0
 810c362:	f04f 0200 	mov.w	r2, #0
 810c366:	ea4f 1289 	mov.w	r2, r9, lsl #6
 810c36a:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 810c36e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 810c372:	eb18 0801 	adds.w	r8, r8, r1
 810c376:	eb49 0902 	adc.w	r9, r9, r2
 810c37a:	f04f 0100 	mov.w	r1, #0
 810c37e:	f04f 0200 	mov.w	r2, #0
 810c382:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810c386:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810c38a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810c38e:	4688      	mov	r8, r1
 810c390:	4691      	mov	r9, r2
 810c392:	eb18 0805 	adds.w	r8, r8, r5
 810c396:	eb49 0906 	adc.w	r9, r9, r6
 810c39a:	f04f 0100 	mov.w	r1, #0
 810c39e:	f04f 0200 	mov.w	r2, #0
 810c3a2:	ea4f 0289 	mov.w	r2, r9, lsl #2
 810c3a6:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 810c3aa:	ea4f 0188 	mov.w	r1, r8, lsl #2
 810c3ae:	4688      	mov	r8, r1
 810c3b0:	4691      	mov	r9, r2
 810c3b2:	eb18 0005 	adds.w	r0, r8, r5
 810c3b6:	eb49 0106 	adc.w	r1, r9, r6
 810c3ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810c3be:	f7f4 fcdb 	bl	8100d78 <__aeabi_ldivmod>
 810c3c2:	4603      	mov	r3, r0
 810c3c4:	460c      	mov	r4, r1
 810c3c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 810c3ca:	68fb      	ldr	r3, [r7, #12]
 810c3cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 810c3d0:	b219      	sxth	r1, r3
 810c3d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 810c3d6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810c3da:	f04f 0300 	mov.w	r3, #0
 810c3de:	f04f 0400 	mov.w	r4, #0
 810c3e2:	0b6b      	lsrs	r3, r5, #13
 810c3e4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810c3e8:	1374      	asrs	r4, r6, #13
 810c3ea:	fb03 f502 	mul.w	r5, r3, r2
 810c3ee:	fb01 f004 	mul.w	r0, r1, r4
 810c3f2:	4428      	add	r0, r5
 810c3f4:	fba1 1203 	umull	r1, r2, r1, r3
 810c3f8:	1883      	adds	r3, r0, r2
 810c3fa:	461a      	mov	r2, r3
 810c3fc:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 810c400:	f04f 0300 	mov.w	r3, #0
 810c404:	f04f 0400 	mov.w	r4, #0
 810c408:	0b6b      	lsrs	r3, r5, #13
 810c40a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 810c40e:	1374      	asrs	r4, r6, #13
 810c410:	fb03 f502 	mul.w	r5, r3, r2
 810c414:	fb01 f004 	mul.w	r0, r1, r4
 810c418:	4428      	add	r0, r5
 810c41a:	fba1 1203 	umull	r1, r2, r1, r3
 810c41e:	1883      	adds	r3, r0, r2
 810c420:	461a      	mov	r2, r3
 810c422:	f04f 0300 	mov.w	r3, #0
 810c426:	f04f 0400 	mov.w	r4, #0
 810c42a:	0e4b      	lsrs	r3, r1, #25
 810c42c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 810c430:	1654      	asrs	r4, r2, #25
 810c432:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 810c436:	68fb      	ldr	r3, [r7, #12]
 810c438:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 810c43c:	b21b      	sxth	r3, r3
 810c43e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 810c442:	693a      	ldr	r2, [r7, #16]
 810c444:	fb04 f102 	mul.w	r1, r4, r2
 810c448:	697a      	ldr	r2, [r7, #20]
 810c44a:	fb03 f202 	mul.w	r2, r3, r2
 810c44e:	1888      	adds	r0, r1, r2
 810c450:	693a      	ldr	r2, [r7, #16]
 810c452:	fba2 1203 	umull	r1, r2, r2, r3
 810c456:	1883      	adds	r3, r0, r2
 810c458:	461a      	mov	r2, r3
 810c45a:	f04f 0300 	mov.w	r3, #0
 810c45e:	f04f 0400 	mov.w	r4, #0
 810c462:	0ccb      	lsrs	r3, r1, #19
 810c464:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 810c468:	14d4      	asrs	r4, r2, #19
 810c46a:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 810c46e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810c472:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810c476:	eb11 0803 	adds.w	r8, r1, r3
 810c47a:	eb42 0904 	adc.w	r9, r2, r4
 810c47e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810c482:	eb13 0508 	adds.w	r5, r3, r8
 810c486:	eb44 0609 	adc.w	r6, r4, r9
 810c48a:	f04f 0100 	mov.w	r1, #0
 810c48e:	f04f 0200 	mov.w	r2, #0
 810c492:	0a29      	lsrs	r1, r5, #8
 810c494:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 810c498:	1232      	asrs	r2, r6, #8
 810c49a:	68fb      	ldr	r3, [r7, #12]
 810c49c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 810c4a0:	b21d      	sxth	r5, r3
 810c4a2:	ea4f 76e5 	mov.w	r6, r5, asr #31
 810c4a6:	f04f 0800 	mov.w	r8, #0
 810c4aa:	f04f 0900 	mov.w	r9, #0
 810c4ae:	ea4f 1906 	mov.w	r9, r6, lsl #4
 810c4b2:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 810c4b6:	ea4f 1805 	mov.w	r8, r5, lsl #4
 810c4ba:	eb18 0301 	adds.w	r3, r8, r1
 810c4be:	eb49 0402 	adc.w	r4, r9, r2
 810c4c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 810c4c6:	693b      	ldr	r3, [r7, #16]
}
 810c4c8:	4618      	mov	r0, r3
 810c4ca:	3728      	adds	r7, #40	; 0x28
 810c4cc:	46bd      	mov	sp, r7
 810c4ce:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0810c4d2 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 810c4d2:	b480      	push	{r7}
 810c4d4:	b087      	sub	sp, #28
 810c4d6:	af00      	add	r7, sp, #0
 810c4d8:	60f8      	str	r0, [r7, #12]
 810c4da:	60b9      	str	r1, [r7, #8]
 810c4dc:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 810c4de:	687b      	ldr	r3, [r7, #4]
 810c4e0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 810c4e4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810c4e6:	68bb      	ldr	r3, [r7, #8]
 810c4e8:	039a      	lsls	r2, r3, #14
 810c4ea:	68fb      	ldr	r3, [r7, #12]
 810c4ec:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 810c4f0:	051b      	lsls	r3, r3, #20
 810c4f2:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 810c4f4:	68fb      	ldr	r3, [r7, #12]
 810c4f6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 810c4fa:	4619      	mov	r1, r3
 810c4fc:	697b      	ldr	r3, [r7, #20]
 810c4fe:	fb03 f301 	mul.w	r3, r3, r1
 810c502:	1ad3      	subs	r3, r2, r3
 810c504:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 810c508:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 810c50a:	68fa      	ldr	r2, [r7, #12]
 810c50c:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 810c510:	4611      	mov	r1, r2
 810c512:	697a      	ldr	r2, [r7, #20]
 810c514:	fb02 f201 	mul.w	r2, r2, r1
 810c518:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810c51a:	68f9      	ldr	r1, [r7, #12]
 810c51c:	7f09      	ldrb	r1, [r1, #28]
 810c51e:	4608      	mov	r0, r1
 810c520:	6979      	ldr	r1, [r7, #20]
 810c522:	fb01 f100 	mul.w	r1, r1, r0
 810c526:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810c528:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 810c52c:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 810c530:	1292      	asrs	r2, r2, #10
 810c532:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 810c536:	68f9      	ldr	r1, [r7, #12]
 810c538:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 810c53c:	fb01 f202 	mul.w	r2, r1, r2
 810c540:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 810c544:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 810c546:	fb02 f303 	mul.w	r3, r2, r3
 810c54a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 810c54c:	697b      	ldr	r3, [r7, #20]
 810c54e:	13db      	asrs	r3, r3, #15
 810c550:	697a      	ldr	r2, [r7, #20]
 810c552:	13d2      	asrs	r2, r2, #15
 810c554:	fb02 f303 	mul.w	r3, r2, r3
 810c558:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 810c55a:	68fa      	ldr	r2, [r7, #12]
 810c55c:	7e12      	ldrb	r2, [r2, #24]
 810c55e:	fb02 f303 	mul.w	r3, r2, r3
 810c562:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 810c564:	697a      	ldr	r2, [r7, #20]
 810c566:	1ad3      	subs	r3, r2, r3
 810c568:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 810c56a:	697b      	ldr	r3, [r7, #20]
 810c56c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810c570:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 810c572:	697b      	ldr	r3, [r7, #20]
 810c574:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 810c578:	bfa8      	it	ge
 810c57a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 810c57e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 810c580:	697b      	ldr	r3, [r7, #20]
 810c582:	131b      	asrs	r3, r3, #12
}
 810c584:	4618      	mov	r0, r3
 810c586:	371c      	adds	r7, #28
 810c588:	46bd      	mov	sp, r7
 810c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c58e:	4770      	bx	lr

0810c590 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 810c590:	b580      	push	{r7, lr}
 810c592:	b08c      	sub	sp, #48	; 0x30
 810c594:	af00      	add	r7, sp, #0
 810c596:	60f8      	str	r0, [r7, #12]
 810c598:	60b9      	str	r1, [r7, #8]
 810c59a:	607a      	str	r2, [r7, #4]
 810c59c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 810c59e:	68fb      	ldr	r3, [r7, #12]
 810c5a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810c5a4:	2b60      	cmp	r3, #96	; 0x60
 810c5a6:	d007      	beq.n	810c5b8 <bmp280_read_fixed+0x28>
		if (humidity)
 810c5a8:	683b      	ldr	r3, [r7, #0]
 810c5aa:	2b00      	cmp	r3, #0
 810c5ac:	d002      	beq.n	810c5b4 <bmp280_read_fixed+0x24>
			*humidity = 0;
 810c5ae:	683b      	ldr	r3, [r7, #0]
 810c5b0:	2200      	movs	r2, #0
 810c5b2:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 810c5b4:	2300      	movs	r3, #0
 810c5b6:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 810c5b8:	683b      	ldr	r3, [r7, #0]
 810c5ba:	2b00      	cmp	r3, #0
 810c5bc:	d001      	beq.n	810c5c2 <bmp280_read_fixed+0x32>
 810c5be:	2308      	movs	r3, #8
 810c5c0:	e000      	b.n	810c5c4 <bmp280_read_fixed+0x34>
 810c5c2:	2306      	movs	r3, #6
 810c5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 810c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c5c8:	b2db      	uxtb	r3, r3
 810c5ca:	f107 0218 	add.w	r2, r7, #24
 810c5ce:	21f7      	movs	r1, #247	; 0xf7
 810c5d0:	68f8      	ldr	r0, [r7, #12]
 810c5d2:	f7ff fbbe 	bl	810bd52 <read_data>
 810c5d6:	4603      	mov	r3, r0
 810c5d8:	2b00      	cmp	r3, #0
 810c5da:	d001      	beq.n	810c5e0 <bmp280_read_fixed+0x50>
		return false;
 810c5dc:	2300      	movs	r3, #0
 810c5de:	e038      	b.n	810c652 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 810c5e0:	7e3b      	ldrb	r3, [r7, #24]
 810c5e2:	031a      	lsls	r2, r3, #12
 810c5e4:	7e7b      	ldrb	r3, [r7, #25]
 810c5e6:	011b      	lsls	r3, r3, #4
 810c5e8:	4313      	orrs	r3, r2
 810c5ea:	7eba      	ldrb	r2, [r7, #26]
 810c5ec:	0912      	lsrs	r2, r2, #4
 810c5ee:	b2d2      	uxtb	r2, r2
 810c5f0:	4313      	orrs	r3, r2
 810c5f2:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 810c5f4:	7efb      	ldrb	r3, [r7, #27]
 810c5f6:	031a      	lsls	r2, r3, #12
 810c5f8:	7f3b      	ldrb	r3, [r7, #28]
 810c5fa:	011b      	lsls	r3, r3, #4
 810c5fc:	4313      	orrs	r3, r2
 810c5fe:	7f7a      	ldrb	r2, [r7, #29]
 810c600:	0912      	lsrs	r2, r2, #4
 810c602:	b2d2      	uxtb	r2, r2
 810c604:	4313      	orrs	r3, r2
 810c606:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 810c608:	f107 0314 	add.w	r3, r7, #20
 810c60c:	461a      	mov	r2, r3
 810c60e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810c610:	68f8      	ldr	r0, [r7, #12]
 810c612:	f7ff fd7b 	bl	810c10c <compensate_temperature>
 810c616:	4602      	mov	r2, r0
 810c618:	68bb      	ldr	r3, [r7, #8]
 810c61a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 810c61c:	697b      	ldr	r3, [r7, #20]
 810c61e:	461a      	mov	r2, r3
 810c620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c622:	68f8      	ldr	r0, [r7, #12]
 810c624:	f7ff fdab 	bl	810c17e <compensate_pressure>
 810c628:	4602      	mov	r2, r0
 810c62a:	687b      	ldr	r3, [r7, #4]
 810c62c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 810c62e:	683b      	ldr	r3, [r7, #0]
 810c630:	2b00      	cmp	r3, #0
 810c632:	d00d      	beq.n	810c650 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 810c634:	7fbb      	ldrb	r3, [r7, #30]
 810c636:	021b      	lsls	r3, r3, #8
 810c638:	7ffa      	ldrb	r2, [r7, #31]
 810c63a:	4313      	orrs	r3, r2
 810c63c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 810c63e:	697b      	ldr	r3, [r7, #20]
 810c640:	461a      	mov	r2, r3
 810c642:	6a39      	ldr	r1, [r7, #32]
 810c644:	68f8      	ldr	r0, [r7, #12]
 810c646:	f7ff ff44 	bl	810c4d2 <compensate_humidity>
 810c64a:	4602      	mov	r2, r0
 810c64c:	683b      	ldr	r3, [r7, #0]
 810c64e:	601a      	str	r2, [r3, #0]
	}

	return true;
 810c650:	2301      	movs	r3, #1
}
 810c652:	4618      	mov	r0, r3
 810c654:	3730      	adds	r7, #48	; 0x30
 810c656:	46bd      	mov	sp, r7
 810c658:	bd80      	pop	{r7, pc}
	...

0810c65c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 810c65c:	b580      	push	{r7, lr}
 810c65e:	b088      	sub	sp, #32
 810c660:	af00      	add	r7, sp, #0
 810c662:	60f8      	str	r0, [r7, #12]
 810c664:	60b9      	str	r1, [r7, #8]
 810c666:	607a      	str	r2, [r7, #4]
 810c668:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 810c66a:	683b      	ldr	r3, [r7, #0]
 810c66c:	2b00      	cmp	r3, #0
 810c66e:	d002      	beq.n	810c676 <bmp280_read_float+0x1a>
 810c670:	f107 0314 	add.w	r3, r7, #20
 810c674:	e000      	b.n	810c678 <bmp280_read_float+0x1c>
 810c676:	2300      	movs	r3, #0
 810c678:	f107 0218 	add.w	r2, r7, #24
 810c67c:	f107 011c 	add.w	r1, r7, #28
 810c680:	68f8      	ldr	r0, [r7, #12]
 810c682:	f7ff ff85 	bl	810c590 <bmp280_read_fixed>
 810c686:	4603      	mov	r3, r0
 810c688:	2b00      	cmp	r3, #0
 810c68a:	d028      	beq.n	810c6de <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 810c68c:	69fb      	ldr	r3, [r7, #28]
 810c68e:	ee07 3a90 	vmov	s15, r3
 810c692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810c696:	eddf 6a14 	vldr	s13, [pc, #80]	; 810c6e8 <bmp280_read_float+0x8c>
 810c69a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810c69e:	68bb      	ldr	r3, [r7, #8]
 810c6a0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 810c6a4:	69bb      	ldr	r3, [r7, #24]
 810c6a6:	ee07 3a90 	vmov	s15, r3
 810c6aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810c6ae:	eddf 6a0f 	vldr	s13, [pc, #60]	; 810c6ec <bmp280_read_float+0x90>
 810c6b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810c6b6:	687b      	ldr	r3, [r7, #4]
 810c6b8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 810c6bc:	683b      	ldr	r3, [r7, #0]
 810c6be:	2b00      	cmp	r3, #0
 810c6c0:	d00b      	beq.n	810c6da <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 810c6c2:	697b      	ldr	r3, [r7, #20]
 810c6c4:	ee07 3a90 	vmov	s15, r3
 810c6c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810c6cc:	eddf 6a08 	vldr	s13, [pc, #32]	; 810c6f0 <bmp280_read_float+0x94>
 810c6d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810c6d4:	683b      	ldr	r3, [r7, #0]
 810c6d6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 810c6da:	2301      	movs	r3, #1
 810c6dc:	e000      	b.n	810c6e0 <bmp280_read_float+0x84>
	}

	return false;
 810c6de:	2300      	movs	r3, #0
}
 810c6e0:	4618      	mov	r0, r3
 810c6e2:	3720      	adds	r7, #32
 810c6e4:	46bd      	mov	sp, r7
 810c6e6:	bd80      	pop	{r7, pc}
 810c6e8:	42c80000 	.word	0x42c80000
 810c6ec:	43800000 	.word	0x43800000
 810c6f0:	44800000 	.word	0x44800000

0810c6f4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810c6f4:	b580      	push	{r7, lr}
 810c6f6:	b082      	sub	sp, #8
 810c6f8:	af00      	add	r7, sp, #0
 810c6fa:	4603      	mov	r3, r0
 810c6fc:	71fb      	strb	r3, [r7, #7]
 810c6fe:	79fb      	ldrb	r3, [r7, #7]
 810c700:	4619      	mov	r1, r3
 810c702:	2007      	movs	r0, #7
 810c704:	f000 fa8e 	bl	810cc24 <bno055_writeData>
 810c708:	bf00      	nop
 810c70a:	3708      	adds	r7, #8
 810c70c:	46bd      	mov	sp, r7
 810c70e:	bd80      	pop	{r7, pc}

0810c710 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 810c710:	b580      	push	{r7, lr}
 810c712:	b082      	sub	sp, #8
 810c714:	af00      	add	r7, sp, #0
 810c716:	4603      	mov	r3, r0
 810c718:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810c71a:	79fb      	ldrb	r3, [r7, #7]
 810c71c:	4619      	mov	r1, r3
 810c71e:	203d      	movs	r0, #61	; 0x3d
 810c720:	f000 fa80 	bl	810cc24 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810c724:	79fb      	ldrb	r3, [r7, #7]
 810c726:	2b00      	cmp	r3, #0
 810c728:	d103      	bne.n	810c732 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810c72a:	2013      	movs	r0, #19
 810c72c:	f000 fa6e 	bl	810cc0c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 810c730:	e002      	b.n	810c738 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 810c732:	2007      	movs	r0, #7
 810c734:	f000 fa6a 	bl	810cc0c <bno055_delay>
}
 810c738:	bf00      	nop
 810c73a:	3708      	adds	r7, #8
 810c73c:	46bd      	mov	sp, r7
 810c73e:	bd80      	pop	{r7, pc}

0810c740 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 810c740:	b580      	push	{r7, lr}
 810c742:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810c744:	2000      	movs	r0, #0
 810c746:	f7ff ffe3 	bl	810c710 <bno055_setOperationMode>
}
 810c74a:	bf00      	nop
 810c74c:	bd80      	pop	{r7, pc}

0810c74e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 810c74e:	b580      	push	{r7, lr}
 810c750:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810c752:	200c      	movs	r0, #12
 810c754:	f7ff ffdc 	bl	810c710 <bno055_setOperationMode>
}
 810c758:	bf00      	nop
 810c75a:	bd80      	pop	{r7, pc}

0810c75c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 810c75c:	b580      	push	{r7, lr}
 810c75e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810c760:	2120      	movs	r1, #32
 810c762:	203f      	movs	r0, #63	; 0x3f
 810c764:	f000 fa5e 	bl	810cc24 <bno055_writeData>
  bno055_delay(700);
 810c768:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 810c76c:	f000 fa4e 	bl	810cc0c <bno055_delay>
}
 810c770:	bf00      	nop
 810c772:	bd80      	pop	{r7, pc}

0810c774 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810c774:	b580      	push	{r7, lr}
 810c776:	b082      	sub	sp, #8
 810c778:	af00      	add	r7, sp, #0
  bno055_reset();
 810c77a:	f7ff ffef 	bl	810c75c <bno055_reset>

  uint8_t id = 0;
 810c77e:	2300      	movs	r3, #0
 810c780:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810c782:	1dfb      	adds	r3, r7, #7
 810c784:	2201      	movs	r2, #1
 810c786:	4619      	mov	r1, r3
 810c788:	2000      	movs	r0, #0
 810c78a:	f000 fb37 	bl	810cdfc <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 810c78e:	2000      	movs	r0, #0
 810c790:	f7ff ffb0 	bl	810c6f4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810c794:	2100      	movs	r1, #0
 810c796:	203f      	movs	r0, #63	; 0x3f
 810c798:	f000 fa44 	bl	810cc24 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 810c79c:	f7ff ffd0 	bl	810c740 <bno055_setOperationModeConfig>
  bno055_delay(10);
 810c7a0:	200a      	movs	r0, #10
 810c7a2:	f000 fa33 	bl	810cc0c <bno055_delay>
}
 810c7a6:	bf00      	nop
 810c7a8:	3708      	adds	r7, #8
 810c7aa:	46bd      	mov	sp, r7
 810c7ac:	bd80      	pop	{r7, pc}

0810c7ae <bno055_getSystemError>:
  res.magState = (tmp >> 1) & 0x01;
  res.accState = (tmp >> 0) & 0x01;
  return res;
}

uint8_t bno055_getSystemError() {
 810c7ae:	b580      	push	{r7, lr}
 810c7b0:	b082      	sub	sp, #8
 810c7b2:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 810c7b4:	2000      	movs	r0, #0
 810c7b6:	f7ff ff9d 	bl	810c6f4 <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
 810c7ba:	1dfb      	adds	r3, r7, #7
 810c7bc:	2201      	movs	r2, #1
 810c7be:	4619      	mov	r1, r3
 810c7c0:	203a      	movs	r0, #58	; 0x3a
 810c7c2:	f000 fb1b 	bl	810cdfc <bno055_readData>
  return tmp;
 810c7c6:	79fb      	ldrb	r3, [r7, #7]
}
 810c7c8:	4618      	mov	r0, r3
 810c7ca:	3708      	adds	r7, #8
 810c7cc:	46bd      	mov	sp, r7
 810c7ce:	bd80      	pop	{r7, pc}

0810c7d0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 810c7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c7d4:	b09f      	sub	sp, #124	; 0x7c
 810c7d6:	af00      	add	r7, sp, #0
 810c7d8:	4603      	mov	r3, r0
 810c7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810c7de:	2000      	movs	r0, #0
 810c7e0:	f7ff ff88 	bl	810c6f4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810c7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c7e8:	2b20      	cmp	r3, #32
 810c7ea:	d108      	bne.n	810c7fe <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810c7ec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810c7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c7f4:	2208      	movs	r2, #8
 810c7f6:	4618      	mov	r0, r3
 810c7f8:	f000 fb00 	bl	810cdfc <bno055_readData>
 810c7fc:	e007      	b.n	810c80e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810c7fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810c802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c806:	2206      	movs	r2, #6
 810c808:	4618      	mov	r0, r3
 810c80a:	f000 faf7 	bl	810cdfc <bno055_readData>

  double scale = 1;
 810c80e:	f04f 0300 	mov.w	r3, #0
 810c812:	4c8b      	ldr	r4, [pc, #556]	; (810ca40 <bno055_getVector+0x270>)
 810c814:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 810c818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c81c:	2b0e      	cmp	r3, #14
 810c81e:	d109      	bne.n	810c834 <bno055_getVector+0x64>
    scale = magScale;
 810c820:	4b88      	ldr	r3, [pc, #544]	; (810ca44 <bno055_getVector+0x274>)
 810c822:	881b      	ldrh	r3, [r3, #0]
 810c824:	4618      	mov	r0, r3
 810c826:	f7f3 ff05 	bl	8100634 <__aeabi_ui2d>
 810c82a:	4603      	mov	r3, r0
 810c82c:	460c      	mov	r4, r1
 810c82e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810c832:	e03e      	b.n	810c8b2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810c834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c838:	2b08      	cmp	r3, #8
 810c83a:	d007      	beq.n	810c84c <bno055_getVector+0x7c>
 810c83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c840:	2b28      	cmp	r3, #40	; 0x28
 810c842:	d003      	beq.n	810c84c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810c844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c848:	2b2e      	cmp	r3, #46	; 0x2e
 810c84a:	d109      	bne.n	810c860 <bno055_getVector+0x90>
    scale = accelScale;
 810c84c:	4b7e      	ldr	r3, [pc, #504]	; (810ca48 <bno055_getVector+0x278>)
 810c84e:	881b      	ldrh	r3, [r3, #0]
 810c850:	4618      	mov	r0, r3
 810c852:	f7f3 feef 	bl	8100634 <__aeabi_ui2d>
 810c856:	4603      	mov	r3, r0
 810c858:	460c      	mov	r4, r1
 810c85a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810c85e:	e028      	b.n	810c8b2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 810c860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c864:	2b14      	cmp	r3, #20
 810c866:	d109      	bne.n	810c87c <bno055_getVector+0xac>
    scale = angularRateScale;
 810c868:	4b78      	ldr	r3, [pc, #480]	; (810ca4c <bno055_getVector+0x27c>)
 810c86a:	881b      	ldrh	r3, [r3, #0]
 810c86c:	4618      	mov	r0, r3
 810c86e:	f7f3 fee1 	bl	8100634 <__aeabi_ui2d>
 810c872:	4603      	mov	r3, r0
 810c874:	460c      	mov	r4, r1
 810c876:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810c87a:	e01a      	b.n	810c8b2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 810c87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c880:	2b1a      	cmp	r3, #26
 810c882:	d109      	bne.n	810c898 <bno055_getVector+0xc8>
    scale = eulerScale;
 810c884:	4b72      	ldr	r3, [pc, #456]	; (810ca50 <bno055_getVector+0x280>)
 810c886:	881b      	ldrh	r3, [r3, #0]
 810c888:	4618      	mov	r0, r3
 810c88a:	f7f3 fed3 	bl	8100634 <__aeabi_ui2d>
 810c88e:	4603      	mov	r3, r0
 810c890:	460c      	mov	r4, r1
 810c892:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 810c896:	e00c      	b.n	810c8b2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810c898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c89c:	2b20      	cmp	r3, #32
 810c89e:	d108      	bne.n	810c8b2 <bno055_getVector+0xe2>
    scale = quaScale;
 810c8a0:	4b6c      	ldr	r3, [pc, #432]	; (810ca54 <bno055_getVector+0x284>)
 810c8a2:	881b      	ldrh	r3, [r3, #0]
 810c8a4:	4618      	mov	r0, r3
 810c8a6:	f7f3 fec5 	bl	8100634 <__aeabi_ui2d>
 810c8aa:	4603      	mov	r3, r0
 810c8ac:	460c      	mov	r4, r1
 810c8ae:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810c8b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810c8b6:	2220      	movs	r2, #32
 810c8b8:	2100      	movs	r1, #0
 810c8ba:	4618      	mov	r0, r3
 810c8bc:	f004 f92d 	bl	8110b1a <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810c8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810c8c4:	2b20      	cmp	r3, #32
 810c8c6:	d150      	bne.n	810c96a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810c8c8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810c8cc:	021b      	lsls	r3, r3, #8
 810c8ce:	b21a      	sxth	r2, r3
 810c8d0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810c8d4:	b21b      	sxth	r3, r3
 810c8d6:	4313      	orrs	r3, r2
 810c8d8:	b21b      	sxth	r3, r3
 810c8da:	4618      	mov	r0, r3
 810c8dc:	f7f3 feba 	bl	8100654 <__aeabi_i2d>
 810c8e0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c8e4:	f7f4 f84a 	bl	810097c <__aeabi_ddiv>
 810c8e8:	4603      	mov	r3, r0
 810c8ea:	460c      	mov	r4, r1
 810c8ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810c8f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810c8f4:	021b      	lsls	r3, r3, #8
 810c8f6:	b21a      	sxth	r2, r3
 810c8f8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810c8fc:	b21b      	sxth	r3, r3
 810c8fe:	4313      	orrs	r3, r2
 810c900:	b21b      	sxth	r3, r3
 810c902:	4618      	mov	r0, r3
 810c904:	f7f3 fea6 	bl	8100654 <__aeabi_i2d>
 810c908:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c90c:	f7f4 f836 	bl	810097c <__aeabi_ddiv>
 810c910:	4603      	mov	r3, r0
 810c912:	460c      	mov	r4, r1
 810c914:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810c918:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810c91c:	021b      	lsls	r3, r3, #8
 810c91e:	b21a      	sxth	r2, r3
 810c920:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810c924:	b21b      	sxth	r3, r3
 810c926:	4313      	orrs	r3, r2
 810c928:	b21b      	sxth	r3, r3
 810c92a:	4618      	mov	r0, r3
 810c92c:	f7f3 fe92 	bl	8100654 <__aeabi_i2d>
 810c930:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c934:	f7f4 f822 	bl	810097c <__aeabi_ddiv>
 810c938:	4603      	mov	r3, r0
 810c93a:	460c      	mov	r4, r1
 810c93c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810c940:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810c944:	021b      	lsls	r3, r3, #8
 810c946:	b21a      	sxth	r2, r3
 810c948:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810c94c:	b21b      	sxth	r3, r3
 810c94e:	4313      	orrs	r3, r2
 810c950:	b21b      	sxth	r3, r3
 810c952:	4618      	mov	r0, r3
 810c954:	f7f3 fe7e 	bl	8100654 <__aeabi_i2d>
 810c958:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c95c:	f7f4 f80e 	bl	810097c <__aeabi_ddiv>
 810c960:	4603      	mov	r3, r0
 810c962:	460c      	mov	r4, r1
 810c964:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 810c968:	e03b      	b.n	810c9e2 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810c96a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810c96e:	021b      	lsls	r3, r3, #8
 810c970:	b21a      	sxth	r2, r3
 810c972:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810c976:	b21b      	sxth	r3, r3
 810c978:	4313      	orrs	r3, r2
 810c97a:	b21b      	sxth	r3, r3
 810c97c:	4618      	mov	r0, r3
 810c97e:	f7f3 fe69 	bl	8100654 <__aeabi_i2d>
 810c982:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c986:	f7f3 fff9 	bl	810097c <__aeabi_ddiv>
 810c98a:	4603      	mov	r3, r0
 810c98c:	460c      	mov	r4, r1
 810c98e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810c992:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810c996:	021b      	lsls	r3, r3, #8
 810c998:	b21a      	sxth	r2, r3
 810c99a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810c99e:	b21b      	sxth	r3, r3
 810c9a0:	4313      	orrs	r3, r2
 810c9a2:	b21b      	sxth	r3, r3
 810c9a4:	4618      	mov	r0, r3
 810c9a6:	f7f3 fe55 	bl	8100654 <__aeabi_i2d>
 810c9aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c9ae:	f7f3 ffe5 	bl	810097c <__aeabi_ddiv>
 810c9b2:	4603      	mov	r3, r0
 810c9b4:	460c      	mov	r4, r1
 810c9b6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810c9ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810c9be:	021b      	lsls	r3, r3, #8
 810c9c0:	b21a      	sxth	r2, r3
 810c9c2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810c9c6:	b21b      	sxth	r3, r3
 810c9c8:	4313      	orrs	r3, r2
 810c9ca:	b21b      	sxth	r3, r3
 810c9cc:	4618      	mov	r0, r3
 810c9ce:	f7f3 fe41 	bl	8100654 <__aeabi_i2d>
 810c9d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810c9d6:	f7f3 ffd1 	bl	810097c <__aeabi_ddiv>
 810c9da:	4603      	mov	r3, r0
 810c9dc:	460c      	mov	r4, r1
 810c9de:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  return xyz;
 810c9e2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810c9e6:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810c9ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810c9ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810c9ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810c9f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810c9f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810c9fa:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 810c9fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 810ca02:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 810ca06:	ec49 8b14 	vmov	d4, r8, r9
 810ca0a:	ec46 5b15 	vmov	d5, r5, r6
 810ca0e:	ec42 1b16 	vmov	d6, r1, r2
 810ca12:	ec44 3b17 	vmov	d7, r3, r4
}
 810ca16:	eeb0 0a44 	vmov.f32	s0, s8
 810ca1a:	eef0 0a64 	vmov.f32	s1, s9
 810ca1e:	eeb0 1a45 	vmov.f32	s2, s10
 810ca22:	eef0 1a65 	vmov.f32	s3, s11
 810ca26:	eeb0 2a46 	vmov.f32	s4, s12
 810ca2a:	eef0 2a66 	vmov.f32	s5, s13
 810ca2e:	eeb0 3a47 	vmov.f32	s6, s14
 810ca32:	eef0 3a67 	vmov.f32	s7, s15
 810ca36:	377c      	adds	r7, #124	; 0x7c
 810ca38:	46bd      	mov	sp, r7
 810ca3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ca3e:	bf00      	nop
 810ca40:	3ff00000 	.word	0x3ff00000
 810ca44:	1000002e 	.word	0x1000002e
 810ca48:	10000028 	.word	0x10000028
 810ca4c:	1000002a 	.word	0x1000002a
 810ca50:	1000002c 	.word	0x1000002c
 810ca54:	10000030 	.word	0x10000030

0810ca58 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 810ca58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810ca5c:	b091      	sub	sp, #68	; 0x44
 810ca5e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 810ca60:	2008      	movs	r0, #8
 810ca62:	f7ff feb5 	bl	810c7d0 <bno055_getVector>
 810ca66:	eeb0 4a40 	vmov.f32	s8, s0
 810ca6a:	eef0 4a60 	vmov.f32	s9, s1
 810ca6e:	eeb0 5a41 	vmov.f32	s10, s2
 810ca72:	eef0 5a61 	vmov.f32	s11, s3
 810ca76:	eeb0 6a42 	vmov.f32	s12, s4
 810ca7a:	eef0 6a62 	vmov.f32	s13, s5
 810ca7e:	eeb0 7a43 	vmov.f32	s14, s6
 810ca82:	eef0 7a63 	vmov.f32	s15, s7
 810ca86:	ed87 4b08 	vstr	d4, [r7, #32]
 810ca8a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810ca8e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810ca92:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810ca96:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810ca9a:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810ca9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810caa2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810caa6:	ec49 8b14 	vmov	d4, r8, r9
 810caaa:	ec46 5b15 	vmov	d5, r5, r6
 810caae:	ec42 1b16 	vmov	d6, r1, r2
 810cab2:	ec44 3b17 	vmov	d7, r3, r4
}
 810cab6:	eeb0 0a44 	vmov.f32	s0, s8
 810caba:	eef0 0a64 	vmov.f32	s1, s9
 810cabe:	eeb0 1a45 	vmov.f32	s2, s10
 810cac2:	eef0 1a65 	vmov.f32	s3, s11
 810cac6:	eeb0 2a46 	vmov.f32	s4, s12
 810caca:	eef0 2a66 	vmov.f32	s5, s13
 810cace:	eeb0 3a47 	vmov.f32	s6, s14
 810cad2:	eef0 3a67 	vmov.f32	s7, s15
 810cad6:	3744      	adds	r7, #68	; 0x44
 810cad8:	46bd      	mov	sp, r7
 810cada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810cade <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 810cade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810cae2:	b091      	sub	sp, #68	; 0x44
 810cae4:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 810cae6:	201a      	movs	r0, #26
 810cae8:	f7ff fe72 	bl	810c7d0 <bno055_getVector>
 810caec:	eeb0 4a40 	vmov.f32	s8, s0
 810caf0:	eef0 4a60 	vmov.f32	s9, s1
 810caf4:	eeb0 5a41 	vmov.f32	s10, s2
 810caf8:	eef0 5a61 	vmov.f32	s11, s3
 810cafc:	eeb0 6a42 	vmov.f32	s12, s4
 810cb00:	eef0 6a62 	vmov.f32	s13, s5
 810cb04:	eeb0 7a43 	vmov.f32	s14, s6
 810cb08:	eef0 7a63 	vmov.f32	s15, s7
 810cb0c:	ed87 4b08 	vstr	d4, [r7, #32]
 810cb10:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810cb14:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810cb18:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810cb1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810cb20:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810cb24:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810cb28:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810cb2c:	ec49 8b14 	vmov	d4, r8, r9
 810cb30:	ec46 5b15 	vmov	d5, r5, r6
 810cb34:	ec42 1b16 	vmov	d6, r1, r2
 810cb38:	ec44 3b17 	vmov	d7, r3, r4
}
 810cb3c:	eeb0 0a44 	vmov.f32	s0, s8
 810cb40:	eef0 0a64 	vmov.f32	s1, s9
 810cb44:	eeb0 1a45 	vmov.f32	s2, s10
 810cb48:	eef0 1a65 	vmov.f32	s3, s11
 810cb4c:	eeb0 2a46 	vmov.f32	s4, s12
 810cb50:	eef0 2a66 	vmov.f32	s5, s13
 810cb54:	eeb0 3a47 	vmov.f32	s6, s14
 810cb58:	eef0 3a67 	vmov.f32	s7, s15
 810cb5c:	3744      	adds	r7, #68	; 0x44
 810cb5e:	46bd      	mov	sp, r7
 810cb60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810cb64 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 810cb64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810cb68:	b091      	sub	sp, #68	; 0x44
 810cb6a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 810cb6c:	202e      	movs	r0, #46	; 0x2e
 810cb6e:	f7ff fe2f 	bl	810c7d0 <bno055_getVector>
 810cb72:	eeb0 4a40 	vmov.f32	s8, s0
 810cb76:	eef0 4a60 	vmov.f32	s9, s1
 810cb7a:	eeb0 5a41 	vmov.f32	s10, s2
 810cb7e:	eef0 5a61 	vmov.f32	s11, s3
 810cb82:	eeb0 6a42 	vmov.f32	s12, s4
 810cb86:	eef0 6a62 	vmov.f32	s13, s5
 810cb8a:	eeb0 7a43 	vmov.f32	s14, s6
 810cb8e:	eef0 7a63 	vmov.f32	s15, s7
 810cb92:	ed87 4b08 	vstr	d4, [r7, #32]
 810cb96:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810cb9a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810cb9e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810cba2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810cba6:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 810cbaa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810cbae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 810cbb2:	ec49 8b14 	vmov	d4, r8, r9
 810cbb6:	ec46 5b15 	vmov	d5, r5, r6
 810cbba:	ec42 1b16 	vmov	d6, r1, r2
 810cbbe:	ec44 3b17 	vmov	d7, r3, r4
}
 810cbc2:	eeb0 0a44 	vmov.f32	s0, s8
 810cbc6:	eef0 0a64 	vmov.f32	s1, s9
 810cbca:	eeb0 1a45 	vmov.f32	s2, s10
 810cbce:	eef0 1a65 	vmov.f32	s3, s11
 810cbd2:	eeb0 2a46 	vmov.f32	s4, s12
 810cbd6:	eef0 2a66 	vmov.f32	s5, s13
 810cbda:	eeb0 3a47 	vmov.f32	s6, s14
 810cbde:	eef0 3a67 	vmov.f32	s7, s15
 810cbe2:	3744      	adds	r7, #68	; 0x44
 810cbe4:	46bd      	mov	sp, r7
 810cbe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0810cbec <bno055_assignI2C>:
#include "bno055_stm32.h"
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810cbec:	b480      	push	{r7}
 810cbee:	b083      	sub	sp, #12
 810cbf0:	af00      	add	r7, sp, #0
 810cbf2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810cbf4:	4a04      	ldr	r2, [pc, #16]	; (810cc08 <bno055_assignI2C+0x1c>)
 810cbf6:	687b      	ldr	r3, [r7, #4]
 810cbf8:	6013      	str	r3, [r2, #0]
}
 810cbfa:	bf00      	nop
 810cbfc:	370c      	adds	r7, #12
 810cbfe:	46bd      	mov	sp, r7
 810cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc04:	4770      	bx	lr
 810cc06:	bf00      	nop
 810cc08:	1000a358 	.word	0x1000a358

0810cc0c <bno055_delay>:

void bno055_delay(int time) {
 810cc0c:	b580      	push	{r7, lr}
 810cc0e:	b082      	sub	sp, #8
 810cc10:	af00      	add	r7, sp, #0
 810cc12:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810cc14:	6878      	ldr	r0, [r7, #4]
 810cc16:	f7fc f979 	bl	8108f0c <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810cc1a:	bf00      	nop
 810cc1c:	3708      	adds	r7, #8
 810cc1e:	46bd      	mov	sp, r7
 810cc20:	bd80      	pop	{r7, pc}
	...

0810cc24 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 810cc24:	b580      	push	{r7, lr}
 810cc26:	b088      	sub	sp, #32
 810cc28:	af02      	add	r7, sp, #8
 810cc2a:	4603      	mov	r3, r0
 810cc2c:	460a      	mov	r2, r1
 810cc2e:	71fb      	strb	r3, [r7, #7]
 810cc30:	4613      	mov	r3, r2
 810cc32:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 810cc34:	79fb      	ldrb	r3, [r7, #7]
 810cc36:	733b      	strb	r3, [r7, #12]
 810cc38:	79bb      	ldrb	r3, [r7, #6]
 810cc3a:	737b      	strb	r3, [r7, #13]
  uint8_t status;

  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810cc3c:	4b5a      	ldr	r3, [pc, #360]	; (810cda8 <bno055_writeData+0x184>)
 810cc3e:	6818      	ldr	r0, [r3, #0]
 810cc40:	f107 020c 	add.w	r2, r7, #12
 810cc44:	230a      	movs	r3, #10
 810cc46:	9300      	str	r3, [sp, #0]
 810cc48:	2302      	movs	r3, #2
 810cc4a:	2150      	movs	r1, #80	; 0x50
 810cc4c:	f7f8 fa2a 	bl	81050a4 <HAL_I2C_Master_Transmit>
 810cc50:	4603      	mov	r3, r0
 810cc52:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);


  if (status == HAL_OK) {
 810cc54:	7dfb      	ldrb	r3, [r7, #23]
 810cc56:	2b00      	cmp	r3, #0
 810cc58:	f000 80a0 	beq.w	810cd9c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 810cc5c:	7dfb      	ldrb	r3, [r7, #23]
 810cc5e:	2b01      	cmp	r3, #1
 810cc60:	d103      	bne.n	810cc6a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 810cc62:	4852      	ldr	r0, [pc, #328]	; (810cdac <bno055_writeData+0x188>)
 810cc64:	f004 fc32 	bl	81114cc <puts>
 810cc68:	e012      	b.n	810cc90 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 810cc6a:	7dfb      	ldrb	r3, [r7, #23]
 810cc6c:	2b03      	cmp	r3, #3
 810cc6e:	d103      	bne.n	810cc78 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 810cc70:	484f      	ldr	r0, [pc, #316]	; (810cdb0 <bno055_writeData+0x18c>)
 810cc72:	f004 fc2b 	bl	81114cc <puts>
 810cc76:	e00b      	b.n	810cc90 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 810cc78:	7dfb      	ldrb	r3, [r7, #23]
 810cc7a:	2b02      	cmp	r3, #2
 810cc7c:	d103      	bne.n	810cc86 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810cc7e:	484d      	ldr	r0, [pc, #308]	; (810cdb4 <bno055_writeData+0x190>)
 810cc80:	f004 fc24 	bl	81114cc <puts>
 810cc84:	e004      	b.n	810cc90 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810cc86:	7dfb      	ldrb	r3, [r7, #23]
 810cc88:	4619      	mov	r1, r3
 810cc8a:	484b      	ldr	r0, [pc, #300]	; (810cdb8 <bno055_writeData+0x194>)
 810cc8c:	f004 fbaa 	bl	81113e4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 810cc90:	4b45      	ldr	r3, [pc, #276]	; (810cda8 <bno055_writeData+0x184>)
 810cc92:	681b      	ldr	r3, [r3, #0]
 810cc94:	4618      	mov	r0, r3
 810cc96:	f7f8 fe2b 	bl	81058f0 <HAL_I2C_GetError>
 810cc9a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810cc9c:	693b      	ldr	r3, [r7, #16]
 810cc9e:	2b00      	cmp	r3, #0
 810cca0:	d07e      	beq.n	810cda0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810cca2:	693b      	ldr	r3, [r7, #16]
 810cca4:	2b01      	cmp	r3, #1
 810cca6:	d103      	bne.n	810ccb0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 810cca8:	4844      	ldr	r0, [pc, #272]	; (810cdbc <bno055_writeData+0x198>)
 810ccaa:	f004 fc0f 	bl	81114cc <puts>
 810ccae:	e021      	b.n	810ccf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 810ccb0:	693b      	ldr	r3, [r7, #16]
 810ccb2:	2b02      	cmp	r3, #2
 810ccb4:	d103      	bne.n	810ccbe <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810ccb6:	4842      	ldr	r0, [pc, #264]	; (810cdc0 <bno055_writeData+0x19c>)
 810ccb8:	f004 fc08 	bl	81114cc <puts>
 810ccbc:	e01a      	b.n	810ccf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 810ccbe:	693b      	ldr	r3, [r7, #16]
 810ccc0:	2b04      	cmp	r3, #4
 810ccc2:	d103      	bne.n	810cccc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810ccc4:	483f      	ldr	r0, [pc, #252]	; (810cdc4 <bno055_writeData+0x1a0>)
 810ccc6:	f004 fc01 	bl	81114cc <puts>
 810ccca:	e013      	b.n	810ccf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 810cccc:	693b      	ldr	r3, [r7, #16]
 810ccce:	2b08      	cmp	r3, #8
 810ccd0:	d103      	bne.n	810ccda <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810ccd2:	483d      	ldr	r0, [pc, #244]	; (810cdc8 <bno055_writeData+0x1a4>)
 810ccd4:	f004 fbfa 	bl	81114cc <puts>
 810ccd8:	e00c      	b.n	810ccf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 810ccda:	693b      	ldr	r3, [r7, #16]
 810ccdc:	2b10      	cmp	r3, #16
 810ccde:	d103      	bne.n	810cce8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 810cce0:	483a      	ldr	r0, [pc, #232]	; (810cdcc <bno055_writeData+0x1a8>)
 810cce2:	f004 fbf3 	bl	81114cc <puts>
 810cce6:	e005      	b.n	810ccf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 810cce8:	693b      	ldr	r3, [r7, #16]
 810ccea:	2b20      	cmp	r3, #32
 810ccec:	d102      	bne.n	810ccf4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 810ccee:	4838      	ldr	r0, [pc, #224]	; (810cdd0 <bno055_writeData+0x1ac>)
 810ccf0:	f004 fbec 	bl	81114cc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810ccf4:	4b2c      	ldr	r3, [pc, #176]	; (810cda8 <bno055_writeData+0x184>)
 810ccf6:	681b      	ldr	r3, [r3, #0]
 810ccf8:	4618      	mov	r0, r3
 810ccfa:	f7f8 fdeb 	bl	81058d4 <HAL_I2C_GetState>
 810ccfe:	4603      	mov	r3, r0
 810cd00:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810cd02:	7bfb      	ldrb	r3, [r7, #15]
 810cd04:	2b00      	cmp	r3, #0
 810cd06:	d103      	bne.n	810cd10 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 810cd08:	4832      	ldr	r0, [pc, #200]	; (810cdd4 <bno055_writeData+0x1b0>)
 810cd0a:	f004 fbdf 	bl	81114cc <puts>
 810cd0e:	e048      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 810cd10:	7bfb      	ldrb	r3, [r7, #15]
 810cd12:	2b20      	cmp	r3, #32
 810cd14:	d103      	bne.n	810cd1e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810cd16:	482f      	ldr	r0, [pc, #188]	; (810cdd4 <bno055_writeData+0x1b0>)
 810cd18:	f004 fbd8 	bl	81114cc <puts>
 810cd1c:	e041      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 810cd1e:	7bfb      	ldrb	r3, [r7, #15]
 810cd20:	2b24      	cmp	r3, #36	; 0x24
 810cd22:	d103      	bne.n	810cd2c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 810cd24:	482c      	ldr	r0, [pc, #176]	; (810cdd8 <bno055_writeData+0x1b4>)
 810cd26:	f004 fbd1 	bl	81114cc <puts>
 810cd2a:	e03a      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 810cd2c:	7bfb      	ldrb	r3, [r7, #15]
 810cd2e:	2b21      	cmp	r3, #33	; 0x21
 810cd30:	d103      	bne.n	810cd3a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 810cd32:	482a      	ldr	r0, [pc, #168]	; (810cddc <bno055_writeData+0x1b8>)
 810cd34:	f004 fbca 	bl	81114cc <puts>
 810cd38:	e033      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 810cd3a:	7bfb      	ldrb	r3, [r7, #15]
 810cd3c:	2b22      	cmp	r3, #34	; 0x22
 810cd3e:	d103      	bne.n	810cd48 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 810cd40:	4827      	ldr	r0, [pc, #156]	; (810cde0 <bno055_writeData+0x1bc>)
 810cd42:	f004 fbc3 	bl	81114cc <puts>
 810cd46:	e02c      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 810cd48:	7bfb      	ldrb	r3, [r7, #15]
 810cd4a:	2b28      	cmp	r3, #40	; 0x28
 810cd4c:	d103      	bne.n	810cd56 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 810cd4e:	4825      	ldr	r0, [pc, #148]	; (810cde4 <bno055_writeData+0x1c0>)
 810cd50:	f004 fbbc 	bl	81114cc <puts>
 810cd54:	e025      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 810cd56:	7bfb      	ldrb	r3, [r7, #15]
 810cd58:	2b29      	cmp	r3, #41	; 0x29
 810cd5a:	d103      	bne.n	810cd64 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 810cd5c:	4822      	ldr	r0, [pc, #136]	; (810cde8 <bno055_writeData+0x1c4>)
 810cd5e:	f004 fbb5 	bl	81114cc <puts>
 810cd62:	e01e      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 810cd64:	7bfb      	ldrb	r3, [r7, #15]
 810cd66:	2b2a      	cmp	r3, #42	; 0x2a
 810cd68:	d103      	bne.n	810cd72 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 810cd6a:	4820      	ldr	r0, [pc, #128]	; (810cdec <bno055_writeData+0x1c8>)
 810cd6c:	f004 fbae 	bl	81114cc <puts>
 810cd70:	e017      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810cd72:	7bfb      	ldrb	r3, [r7, #15]
 810cd74:	2b60      	cmp	r3, #96	; 0x60
 810cd76:	d103      	bne.n	810cd80 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 810cd78:	481d      	ldr	r0, [pc, #116]	; (810cdf0 <bno055_writeData+0x1cc>)
 810cd7a:	f004 fba7 	bl	81114cc <puts>
 810cd7e:	e010      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 810cd80:	7bfb      	ldrb	r3, [r7, #15]
 810cd82:	2ba0      	cmp	r3, #160	; 0xa0
 810cd84:	d103      	bne.n	810cd8e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810cd86:	481b      	ldr	r0, [pc, #108]	; (810cdf4 <bno055_writeData+0x1d0>)
 810cd88:	f004 fba0 	bl	81114cc <puts>
 810cd8c:	e009      	b.n	810cda2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 810cd8e:	7bfb      	ldrb	r3, [r7, #15]
 810cd90:	2be0      	cmp	r3, #224	; 0xe0
 810cd92:	d106      	bne.n	810cda2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810cd94:	4818      	ldr	r0, [pc, #96]	; (810cdf8 <bno055_writeData+0x1d4>)
 810cd96:	f004 fb99 	bl	81114cc <puts>
 810cd9a:	e002      	b.n	810cda2 <bno055_writeData+0x17e>
    return;
 810cd9c:	bf00      	nop
 810cd9e:	e000      	b.n	810cda2 <bno055_writeData+0x17e>
    return;
 810cda0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810cda2:	3718      	adds	r7, #24
 810cda4:	46bd      	mov	sp, r7
 810cda6:	bd80      	pop	{r7, pc}
 810cda8:	1000a358 	.word	0x1000a358
 810cdac:	08113c48 	.word	0x08113c48
 810cdb0:	08113c6c 	.word	0x08113c6c
 810cdb4:	08113c94 	.word	0x08113c94
 810cdb8:	08113cb8 	.word	0x08113cb8
 810cdbc:	08113cd0 	.word	0x08113cd0
 810cdc0:	08113ce4 	.word	0x08113ce4
 810cdc4:	08113cf8 	.word	0x08113cf8
 810cdc8:	08113d0c 	.word	0x08113d0c
 810cdcc:	08113d20 	.word	0x08113d20
 810cdd0:	08113d34 	.word	0x08113d34
 810cdd4:	08113d4c 	.word	0x08113d4c
 810cdd8:	08113d64 	.word	0x08113d64
 810cddc:	08113d78 	.word	0x08113d78
 810cde0:	08113d90 	.word	0x08113d90
 810cde4:	08113da8 	.word	0x08113da8
 810cde8:	08113dc0 	.word	0x08113dc0
 810cdec:	08113de0 	.word	0x08113de0
 810cdf0:	08113e00 	.word	0x08113e00
 810cdf4:	08113e18 	.word	0x08113e18
 810cdf8:	08113e30 	.word	0x08113e30

0810cdfc <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810cdfc:	b580      	push	{r7, lr}
 810cdfe:	b084      	sub	sp, #16
 810ce00:	af02      	add	r7, sp, #8
 810ce02:	4603      	mov	r3, r0
 810ce04:	6039      	str	r1, [r7, #0]
 810ce06:	71fb      	strb	r3, [r7, #7]
 810ce08:	4613      	mov	r3, r2
 810ce0a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810ce0c:	4b0b      	ldr	r3, [pc, #44]	; (810ce3c <bno055_readData+0x40>)
 810ce0e:	6818      	ldr	r0, [r3, #0]
 810ce10:	1dfa      	adds	r2, r7, #7
 810ce12:	2364      	movs	r3, #100	; 0x64
 810ce14:	9300      	str	r3, [sp, #0]
 810ce16:	2301      	movs	r3, #1
 810ce18:	2150      	movs	r1, #80	; 0x50
 810ce1a:	f7f8 f943 	bl	81050a4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 810ce1e:	4b07      	ldr	r3, [pc, #28]	; (810ce3c <bno055_readData+0x40>)
 810ce20:	6818      	ldr	r0, [r3, #0]
 810ce22:	79bb      	ldrb	r3, [r7, #6]
 810ce24:	b29a      	uxth	r2, r3
 810ce26:	2364      	movs	r3, #100	; 0x64
 810ce28:	9300      	str	r3, [sp, #0]
 810ce2a:	4613      	mov	r3, r2
 810ce2c:	683a      	ldr	r2, [r7, #0]
 810ce2e:	2150      	movs	r1, #80	; 0x50
 810ce30:	f7f8 fa2c 	bl	810528c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810ce34:	bf00      	nop
 810ce36:	3708      	adds	r7, #8
 810ce38:	46bd      	mov	sp, r7
 810ce3a:	bd80      	pop	{r7, pc}
 810ce3c:	1000a358 	.word	0x1000a358

0810ce40 <HX711_delay_us>:
GPIO_TypeDef *_hx711_di_gpio;
uint32_t _hx711_di_pin;

//#############################################################################################
__STATIC_INLINE void HX711_delay_us(uint32_t microseconds)
{
 810ce40:	b580      	push	{r7, lr}
 810ce42:	b084      	sub	sp, #16
 810ce44:	af00      	add	r7, sp, #0
 810ce46:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 810ce48:	4b0c      	ldr	r3, [pc, #48]	; (810ce7c <HX711_delay_us+0x3c>)
 810ce4a:	685b      	ldr	r3, [r3, #4]
 810ce4c:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 810ce4e:	f7f9 faeb 	bl	8106428 <HAL_RCC_GetHCLKFreq>
 810ce52:	4602      	mov	r2, r0
 810ce54:	4b0a      	ldr	r3, [pc, #40]	; (810ce80 <HX711_delay_us+0x40>)
 810ce56:	fba3 2302 	umull	r2, r3, r3, r2
 810ce5a:	0c9a      	lsrs	r2, r3, #18
 810ce5c:	687b      	ldr	r3, [r7, #4]
 810ce5e:	fb02 f303 	mul.w	r3, r2, r3
 810ce62:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 810ce64:	bf00      	nop
 810ce66:	4b05      	ldr	r3, [pc, #20]	; (810ce7c <HX711_delay_us+0x3c>)
 810ce68:	685a      	ldr	r2, [r3, #4]
 810ce6a:	68fb      	ldr	r3, [r7, #12]
 810ce6c:	1ad3      	subs	r3, r2, r3
 810ce6e:	687a      	ldr	r2, [r7, #4]
 810ce70:	429a      	cmp	r2, r3
 810ce72:	d8f8      	bhi.n	810ce66 <HX711_delay_us+0x26>
}
 810ce74:	bf00      	nop
 810ce76:	3710      	adds	r7, #16
 810ce78:	46bd      	mov	sp, r7
 810ce7a:	bd80      	pop	{r7, pc}
 810ce7c:	e0001000 	.word	0xe0001000
 810ce80:	431bde83 	.word	0x431bde83

0810ce84 <HX711_set_pins>:
void  HX711_set_pins(GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin){
 810ce84:	b480      	push	{r7}
 810ce86:	b085      	sub	sp, #20
 810ce88:	af00      	add	r7, sp, #0
 810ce8a:	60f8      	str	r0, [r7, #12]
 810ce8c:	60b9      	str	r1, [r7, #8]
 810ce8e:	607a      	str	r2, [r7, #4]
 810ce90:	603b      	str	r3, [r7, #0]
	_hx711_sck_gpio = sck_gpio;
 810ce92:	4a09      	ldr	r2, [pc, #36]	; (810ceb8 <HX711_set_pins+0x34>)
 810ce94:	68fb      	ldr	r3, [r7, #12]
 810ce96:	6013      	str	r3, [r2, #0]
	_hx711_sck_pin = sck_pin;
 810ce98:	4a08      	ldr	r2, [pc, #32]	; (810cebc <HX711_set_pins+0x38>)
 810ce9a:	68bb      	ldr	r3, [r7, #8]
 810ce9c:	6013      	str	r3, [r2, #0]
	_hx711_di_gpio = di_gpio;
 810ce9e:	4a08      	ldr	r2, [pc, #32]	; (810cec0 <HX711_set_pins+0x3c>)
 810cea0:	687b      	ldr	r3, [r7, #4]
 810cea2:	6013      	str	r3, [r2, #0]
	_hx711_di_pin = di_pin;
 810cea4:	4a07      	ldr	r2, [pc, #28]	; (810cec4 <HX711_set_pins+0x40>)
 810cea6:	683b      	ldr	r3, [r7, #0]
 810cea8:	6013      	str	r3, [r2, #0]
}
 810ceaa:	bf00      	nop
 810ceac:	3714      	adds	r7, #20
 810ceae:	46bd      	mov	sp, r7
 810ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ceb4:	4770      	bx	lr
 810ceb6:	bf00      	nop
 810ceb8:	1000a360 	.word	0x1000a360
 810cebc:	1000a35c 	.word	0x1000a35c
 810cec0:	1000a368 	.word	0x1000a368
 810cec4:	1000a364 	.word	0x1000a364

0810cec8 <HX711_init>:
//#############################################################################################
void  HX711_init(void)
{
 810cec8:	b580      	push	{r7, lr}
 810ceca:	b086      	sub	sp, #24
 810cecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 810cece:	2301      	movs	r3, #1
 810ced0:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 810ced2:	2300      	movs	r3, #0
 810ced4:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810ced6:	2302      	movs	r3, #2
 810ced8:	613b      	str	r3, [r7, #16]
  gpio.Pin = _hx711_sck_pin;
 810ceda:	4b1c      	ldr	r3, [pc, #112]	; (810cf4c <HX711_init+0x84>)
 810cedc:	681b      	ldr	r3, [r3, #0]
 810cede:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_hx711_sck_gpio, &gpio);
 810cee0:	4b1b      	ldr	r3, [pc, #108]	; (810cf50 <HX711_init+0x88>)
 810cee2:	681b      	ldr	r3, [r3, #0]
 810cee4:	1d3a      	adds	r2, r7, #4
 810cee6:	4611      	mov	r1, r2
 810cee8:	4618      	mov	r0, r3
 810ceea:	f7f7 fe09 	bl	8104b00 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 810ceee:	2300      	movs	r3, #0
 810cef0:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 810cef2:	2300      	movs	r3, #0
 810cef4:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810cef6:	2302      	movs	r3, #2
 810cef8:	613b      	str	r3, [r7, #16]
  gpio.Pin = _hx711_di_pin;
 810cefa:	4b16      	ldr	r3, [pc, #88]	; (810cf54 <HX711_init+0x8c>)
 810cefc:	681b      	ldr	r3, [r3, #0]
 810cefe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_hx711_di_gpio, &gpio);
 810cf00:	4b15      	ldr	r3, [pc, #84]	; (810cf58 <HX711_init+0x90>)
 810cf02:	681b      	ldr	r3, [r3, #0]
 810cf04:	1d3a      	adds	r2, r7, #4
 810cf06:	4611      	mov	r1, r2
 810cf08:	4618      	mov	r0, r3
 810cf0a:	f7f7 fdf9 	bl	8104b00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810cf0e:	4b10      	ldr	r3, [pc, #64]	; (810cf50 <HX711_init+0x88>)
 810cf10:	6818      	ldr	r0, [r3, #0]
 810cf12:	4b0e      	ldr	r3, [pc, #56]	; (810cf4c <HX711_init+0x84>)
 810cf14:	681b      	ldr	r3, [r3, #0]
 810cf16:	b29b      	uxth	r3, r3
 810cf18:	2201      	movs	r2, #1
 810cf1a:	4619      	mov	r1, r3
 810cf1c:	f7f7 ffb8 	bl	8104e90 <HAL_GPIO_WritePin>
  HX711_delay(10);
 810cf20:	200a      	movs	r0, #10
 810cf22:	f7fb fff3 	bl	8108f0c <osDelay>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810cf26:	4b0a      	ldr	r3, [pc, #40]	; (810cf50 <HX711_init+0x88>)
 810cf28:	6818      	ldr	r0, [r3, #0]
 810cf2a:	4b08      	ldr	r3, [pc, #32]	; (810cf4c <HX711_init+0x84>)
 810cf2c:	681b      	ldr	r3, [r3, #0]
 810cf2e:	b29b      	uxth	r3, r3
 810cf30:	2200      	movs	r2, #0
 810cf32:	4619      	mov	r1, r3
 810cf34:	f7f7 ffac 	bl	8104e90 <HAL_GPIO_WritePin>
  HX711_delay(10);  
 810cf38:	200a      	movs	r0, #10
 810cf3a:	f7fb ffe7 	bl	8108f0c <osDelay>
  HX711_valueAve(8);
 810cf3e:	2008      	movs	r0, #8
 810cf40:	f000 f88a 	bl	810d058 <HX711_valueAve>
}
 810cf44:	bf00      	nop
 810cf46:	3718      	adds	r7, #24
 810cf48:	46bd      	mov	sp, r7
 810cf4a:	bd80      	pop	{r7, pc}
 810cf4c:	1000a35c 	.word	0x1000a35c
 810cf50:	1000a360 	.word	0x1000a360
 810cf54:	1000a364 	.word	0x1000a364
 810cf58:	1000a368 	.word	0x1000a368

0810cf5c <HX711_value>:
//#############################################################################################
int32_t HX711_value(void)
{
 810cf5c:	b580      	push	{r7, lr}
 810cf5e:	b084      	sub	sp, #16
 810cf60:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 810cf62:	2300      	movs	r3, #0
 810cf64:	60fb      	str	r3, [r7, #12]
  uint32_t  startTime = HAL_GetTick();
 810cf66:	f7f5 f997 	bl	8102298 <HAL_GetTick>
 810cf6a:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_SET)
 810cf6c:	e008      	b.n	810cf80 <HX711_value+0x24>
  {
    if(HAL_GetTick() - startTime > 150)
 810cf6e:	f7f5 f993 	bl	8102298 <HAL_GetTick>
 810cf72:	4602      	mov	r2, r0
 810cf74:	687b      	ldr	r3, [r7, #4]
 810cf76:	1ad3      	subs	r3, r2, r3
 810cf78:	2b96      	cmp	r3, #150	; 0x96
 810cf7a:	d901      	bls.n	810cf80 <HX711_value+0x24>
      return 0;
 810cf7c:	2300      	movs	r3, #0
 810cf7e:	e05f      	b.n	810d040 <HX711_value+0xe4>
  while(HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_SET)
 810cf80:	4b31      	ldr	r3, [pc, #196]	; (810d048 <HX711_value+0xec>)
 810cf82:	681a      	ldr	r2, [r3, #0]
 810cf84:	4b31      	ldr	r3, [pc, #196]	; (810d04c <HX711_value+0xf0>)
 810cf86:	681b      	ldr	r3, [r3, #0]
 810cf88:	b29b      	uxth	r3, r3
 810cf8a:	4619      	mov	r1, r3
 810cf8c:	4610      	mov	r0, r2
 810cf8e:	f7f7 ff67 	bl	8104e60 <HAL_GPIO_ReadPin>
 810cf92:	4603      	mov	r3, r0
 810cf94:	2b01      	cmp	r3, #1
 810cf96:	d0ea      	beq.n	810cf6e <HX711_value+0x12>
  }
  for(int8_t i=0; i<24 ; i++)
 810cf98:	2300      	movs	r3, #0
 810cf9a:	72fb      	strb	r3, [r7, #11]
 810cf9c:	e02f      	b.n	810cffe <HX711_value+0xa2>
  {
    HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810cf9e:	4b2c      	ldr	r3, [pc, #176]	; (810d050 <HX711_value+0xf4>)
 810cfa0:	6818      	ldr	r0, [r3, #0]
 810cfa2:	4b2c      	ldr	r3, [pc, #176]	; (810d054 <HX711_value+0xf8>)
 810cfa4:	681b      	ldr	r3, [r3, #0]
 810cfa6:	b29b      	uxth	r3, r3
 810cfa8:	2201      	movs	r2, #1
 810cfaa:	4619      	mov	r1, r3
 810cfac:	f7f7 ff70 	bl	8104e90 <HAL_GPIO_WritePin>
    HX711_delay_us(1);
 810cfb0:	2001      	movs	r0, #1
 810cfb2:	f7ff ff45 	bl	810ce40 <HX711_delay_us>
    data = data << 1;    
 810cfb6:	68fb      	ldr	r3, [r7, #12]
 810cfb8:	005b      	lsls	r3, r3, #1
 810cfba:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810cfbc:	4b24      	ldr	r3, [pc, #144]	; (810d050 <HX711_value+0xf4>)
 810cfbe:	6818      	ldr	r0, [r3, #0]
 810cfc0:	4b24      	ldr	r3, [pc, #144]	; (810d054 <HX711_value+0xf8>)
 810cfc2:	681b      	ldr	r3, [r3, #0]
 810cfc4:	b29b      	uxth	r3, r3
 810cfc6:	2200      	movs	r2, #0
 810cfc8:	4619      	mov	r1, r3
 810cfca:	f7f7 ff61 	bl	8104e90 <HAL_GPIO_WritePin>
    HX711_delay_us(1);
 810cfce:	2001      	movs	r0, #1
 810cfd0:	f7ff ff36 	bl	810ce40 <HX711_delay_us>
    if(HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_SET)
 810cfd4:	4b1c      	ldr	r3, [pc, #112]	; (810d048 <HX711_value+0xec>)
 810cfd6:	681a      	ldr	r2, [r3, #0]
 810cfd8:	4b1c      	ldr	r3, [pc, #112]	; (810d04c <HX711_value+0xf0>)
 810cfda:	681b      	ldr	r3, [r3, #0]
 810cfdc:	b29b      	uxth	r3, r3
 810cfde:	4619      	mov	r1, r3
 810cfe0:	4610      	mov	r0, r2
 810cfe2:	f7f7 ff3d 	bl	8104e60 <HAL_GPIO_ReadPin>
 810cfe6:	4603      	mov	r3, r0
 810cfe8:	2b01      	cmp	r3, #1
 810cfea:	d102      	bne.n	810cff2 <HX711_value+0x96>
      data ++;
 810cfec:	68fb      	ldr	r3, [r7, #12]
 810cfee:	3301      	adds	r3, #1
 810cff0:	60fb      	str	r3, [r7, #12]
  for(int8_t i=0; i<24 ; i++)
 810cff2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810cff6:	b2db      	uxtb	r3, r3
 810cff8:	3301      	adds	r3, #1
 810cffa:	b2db      	uxtb	r3, r3
 810cffc:	72fb      	strb	r3, [r7, #11]
 810cffe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810d002:	2b17      	cmp	r3, #23
 810d004:	ddcb      	ble.n	810cf9e <HX711_value+0x42>
  }
  data = data ^ 0x800000; 
 810d006:	68fb      	ldr	r3, [r7, #12]
 810d008:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 810d00c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810d00e:	4b10      	ldr	r3, [pc, #64]	; (810d050 <HX711_value+0xf4>)
 810d010:	6818      	ldr	r0, [r3, #0]
 810d012:	4b10      	ldr	r3, [pc, #64]	; (810d054 <HX711_value+0xf8>)
 810d014:	681b      	ldr	r3, [r3, #0]
 810d016:	b29b      	uxth	r3, r3
 810d018:	2201      	movs	r2, #1
 810d01a:	4619      	mov	r1, r3
 810d01c:	f7f7 ff38 	bl	8104e90 <HAL_GPIO_WritePin>
  HX711_delay_us(1);
 810d020:	2001      	movs	r0, #1
 810d022:	f7ff ff0d 	bl	810ce40 <HX711_delay_us>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810d026:	4b0a      	ldr	r3, [pc, #40]	; (810d050 <HX711_value+0xf4>)
 810d028:	6818      	ldr	r0, [r3, #0]
 810d02a:	4b0a      	ldr	r3, [pc, #40]	; (810d054 <HX711_value+0xf8>)
 810d02c:	681b      	ldr	r3, [r3, #0]
 810d02e:	b29b      	uxth	r3, r3
 810d030:	2200      	movs	r2, #0
 810d032:	4619      	mov	r1, r3
 810d034:	f7f7 ff2c 	bl	8104e90 <HAL_GPIO_WritePin>
  HX711_delay_us(1);
 810d038:	2001      	movs	r0, #1
 810d03a:	f7ff ff01 	bl	810ce40 <HX711_delay_us>
  return data;    
 810d03e:	68fb      	ldr	r3, [r7, #12]
}
 810d040:	4618      	mov	r0, r3
 810d042:	3710      	adds	r7, #16
 810d044:	46bd      	mov	sp, r7
 810d046:	bd80      	pop	{r7, pc}
 810d048:	1000a368 	.word	0x1000a368
 810d04c:	1000a364 	.word	0x1000a364
 810d050:	1000a360 	.word	0x1000a360
 810d054:	1000a35c 	.word	0x1000a35c

0810d058 <HX711_valueAve>:
//#############################################################################################
int32_t HX711_valueAve(uint16_t sample)
{
 810d058:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 810d05c:	b086      	sub	sp, #24
 810d05e:	af00      	add	r7, sp, #0
 810d060:	4603      	mov	r3, r0
 810d062:	80fb      	strh	r3, [r7, #6]
  int64_t  ave = 0;
 810d064:	f04f 0300 	mov.w	r3, #0
 810d068:	f04f 0400 	mov.w	r4, #0
 810d06c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 810d070:	2300      	movs	r3, #0
 810d072:	81fb      	strh	r3, [r7, #14]
 810d074:	e010      	b.n	810d098 <HX711_valueAve+0x40>
    ave += HX711_value();
 810d076:	f7ff ff71 	bl	810cf5c <HX711_value>
 810d07a:	4603      	mov	r3, r0
 810d07c:	469b      	mov	fp, r3
 810d07e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 810d082:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810d086:	eb1b 0301 	adds.w	r3, fp, r1
 810d08a:	eb4c 0402 	adc.w	r4, ip, r2
 810d08e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 810d092:	89fb      	ldrh	r3, [r7, #14]
 810d094:	3301      	adds	r3, #1
 810d096:	81fb      	strh	r3, [r7, #14]
 810d098:	89fa      	ldrh	r2, [r7, #14]
 810d09a:	88fb      	ldrh	r3, [r7, #6]
 810d09c:	429a      	cmp	r2, r3
 810d09e:	d3ea      	bcc.n	810d076 <HX711_valueAve+0x1e>
  return (int32_t)(ave / sample);
 810d0a0:	88fb      	ldrh	r3, [r7, #6]
 810d0a2:	f04f 0400 	mov.w	r4, #0
 810d0a6:	461a      	mov	r2, r3
 810d0a8:	4623      	mov	r3, r4
 810d0aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 810d0ae:	f7f3 fe63 	bl	8100d78 <__aeabi_ldivmod>
 810d0b2:	4603      	mov	r3, r0
 810d0b4:	460c      	mov	r4, r1
}
 810d0b6:	4618      	mov	r0, r3
 810d0b8:	3718      	adds	r7, #24
 810d0ba:	46bd      	mov	sp, r7
 810d0bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0810d0c0 <HX711_isReady>:
//#############################################################################################
int HX711_isReady(){
 810d0c0:	b580      	push	{r7, lr}
 810d0c2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_RESET;
 810d0c4:	4b08      	ldr	r3, [pc, #32]	; (810d0e8 <HX711_isReady+0x28>)
 810d0c6:	681a      	ldr	r2, [r3, #0]
 810d0c8:	4b08      	ldr	r3, [pc, #32]	; (810d0ec <HX711_isReady+0x2c>)
 810d0ca:	681b      	ldr	r3, [r3, #0]
 810d0cc:	b29b      	uxth	r3, r3
 810d0ce:	4619      	mov	r1, r3
 810d0d0:	4610      	mov	r0, r2
 810d0d2:	f7f7 fec5 	bl	8104e60 <HAL_GPIO_ReadPin>
 810d0d6:	4603      	mov	r3, r0
 810d0d8:	2b00      	cmp	r3, #0
 810d0da:	bf0c      	ite	eq
 810d0dc:	2301      	moveq	r3, #1
 810d0de:	2300      	movne	r3, #0
 810d0e0:	b2db      	uxtb	r3, r3
}
 810d0e2:	4618      	mov	r0, r3
 810d0e4:	bd80      	pop	{r7, pc}
 810d0e6:	bf00      	nop
 810d0e8:	1000a368 	.word	0x1000a368
 810d0ec:	1000a364 	.word	0x1000a364

0810d0f0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 810d0f0:	b480      	push	{r7}
 810d0f2:	b083      	sub	sp, #12
 810d0f4:	af00      	add	r7, sp, #0
 810d0f6:	6078      	str	r0, [r7, #4]
 810d0f8:	687b      	ldr	r3, [r7, #4]
 810d0fa:	2200      	movs	r2, #0
 810d0fc:	609a      	str	r2, [r3, #8]
 810d0fe:	687b      	ldr	r3, [r7, #4]
 810d100:	4618      	mov	r0, r3
 810d102:	370c      	adds	r7, #12
 810d104:	46bd      	mov	sp, r7
 810d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d10a:	4770      	bx	lr

0810d10c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 810d10c:	b580      	push	{r7, lr}
 810d10e:	b082      	sub	sp, #8
 810d110:	af00      	add	r7, sp, #0
 810d112:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 810d114:	687b      	ldr	r3, [r7, #4]
 810d116:	689b      	ldr	r3, [r3, #8]
 810d118:	2b00      	cmp	r3, #0
 810d11a:	d005      	beq.n	810d128 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 810d11c:	687b      	ldr	r3, [r7, #4]
 810d11e:	689b      	ldr	r3, [r3, #8]
 810d120:	6878      	ldr	r0, [r7, #4]
 810d122:	6879      	ldr	r1, [r7, #4]
 810d124:	2203      	movs	r2, #3
 810d126:	4798      	blx	r3
    }
 810d128:	687b      	ldr	r3, [r7, #4]
 810d12a:	4618      	mov	r0, r3
 810d12c:	3708      	adds	r7, #8
 810d12e:	46bd      	mov	sp, r7
 810d130:	bd80      	pop	{r7, pc}

0810d132 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 810d132:	b480      	push	{r7}
 810d134:	b083      	sub	sp, #12
 810d136:	af00      	add	r7, sp, #0
 810d138:	6078      	str	r0, [r7, #4]
 810d13a:	687b      	ldr	r3, [r7, #4]
 810d13c:	689b      	ldr	r3, [r3, #8]
 810d13e:	2b00      	cmp	r3, #0
 810d140:	bf0c      	ite	eq
 810d142:	2301      	moveq	r3, #1
 810d144:	2300      	movne	r3, #0
 810d146:	b2db      	uxtb	r3, r3
 810d148:	4618      	mov	r0, r3
 810d14a:	370c      	adds	r7, #12
 810d14c:	46bd      	mov	sp, r7
 810d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d152:	4770      	bx	lr

0810d154 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 810d154:	b480      	push	{r7}
 810d156:	b083      	sub	sp, #12
 810d158:	af00      	add	r7, sp, #0
 810d15a:	6078      	str	r0, [r7, #4]
 810d15c:	4a04      	ldr	r2, [pc, #16]	; (810d170 <_ZN8IODriverD1Ev+0x1c>)
 810d15e:	687b      	ldr	r3, [r7, #4]
 810d160:	601a      	str	r2, [r3, #0]
 810d162:	687b      	ldr	r3, [r7, #4]
 810d164:	4618      	mov	r0, r3
 810d166:	370c      	adds	r7, #12
 810d168:	46bd      	mov	sp, r7
 810d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d16e:	4770      	bx	lr
 810d170:	08114068 	.word	0x08114068

0810d174 <_ZN8IODriverD0Ev>:
 810d174:	b580      	push	{r7, lr}
 810d176:	b082      	sub	sp, #8
 810d178:	af00      	add	r7, sp, #0
 810d17a:	6078      	str	r0, [r7, #4]
 810d17c:	6878      	ldr	r0, [r7, #4]
 810d17e:	f7ff ffe9 	bl	810d154 <_ZN8IODriverD1Ev>
 810d182:	2104      	movs	r1, #4
 810d184:	6878      	ldr	r0, [r7, #4]
 810d186:	f003 fb38 	bl	81107fa <_ZdlPvj>
 810d18a:	687b      	ldr	r3, [r7, #4]
 810d18c:	4618      	mov	r0, r3
 810d18e:	3708      	adds	r7, #8
 810d190:	46bd      	mov	sp, r7
 810d192:	bd80      	pop	{r7, pc}

0810d194 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 810d194:	b580      	push	{r7, lr}
 810d196:	b082      	sub	sp, #8
 810d198:	af00      	add	r7, sp, #0
 810d19a:	6078      	str	r0, [r7, #4]
 810d19c:	687b      	ldr	r3, [r7, #4]
 810d19e:	4618      	mov	r0, r3
 810d1a0:	f7ff ffb4 	bl	810d10c <_ZNSt14_Function_baseD1Ev>
 810d1a4:	687b      	ldr	r3, [r7, #4]
 810d1a6:	4618      	mov	r0, r3
 810d1a8:	3708      	adds	r7, #8
 810d1aa:	46bd      	mov	sp, r7
 810d1ac:	bd80      	pop	{r7, pc}
	...

0810d1b0 <_ZN8IODriverC1Ev>:
class IODriver {
 810d1b0:	b480      	push	{r7}
 810d1b2:	b083      	sub	sp, #12
 810d1b4:	af00      	add	r7, sp, #0
 810d1b6:	6078      	str	r0, [r7, #4]
 810d1b8:	4a04      	ldr	r2, [pc, #16]	; (810d1cc <_ZN8IODriverC1Ev+0x1c>)
 810d1ba:	687b      	ldr	r3, [r7, #4]
 810d1bc:	601a      	str	r2, [r3, #0]
 810d1be:	687b      	ldr	r3, [r7, #4]
 810d1c0:	4618      	mov	r0, r3
 810d1c2:	370c      	adds	r7, #12
 810d1c4:	46bd      	mov	sp, r7
 810d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1ca:	4770      	bx	lr
 810d1cc:	08114068 	.word	0x08114068

0810d1d0 <_ZN16BufferedIODriverC1EPVhS1_j>:
#include <cstring>

#ifdef BUILD_WITH_BUFFERED_IO


BufferedIODriver::BufferedIODriver(volatile uint8_t* bufferStorage, volatile uint8_t* bufferControl, size_t length) : bufferStorage(bufferStorage), bufferControl(bufferControl), bufferLength(length), readIndex(0), receiverFunc(nullptr) {
 810d1d0:	b580      	push	{r7, lr}
 810d1d2:	b084      	sub	sp, #16
 810d1d4:	af00      	add	r7, sp, #0
 810d1d6:	60f8      	str	r0, [r7, #12]
 810d1d8:	60b9      	str	r1, [r7, #8]
 810d1da:	607a      	str	r2, [r7, #4]
 810d1dc:	603b      	str	r3, [r7, #0]
 810d1de:	68fb      	ldr	r3, [r7, #12]
 810d1e0:	4618      	mov	r0, r3
 810d1e2:	f7ff ffe5 	bl	810d1b0 <_ZN8IODriverC1Ev>
 810d1e6:	4a11      	ldr	r2, [pc, #68]	; (810d22c <_ZN16BufferedIODriverC1EPVhS1_j+0x5c>)
 810d1e8:	68fb      	ldr	r3, [r7, #12]
 810d1ea:	601a      	str	r2, [r3, #0]
 810d1ec:	68fb      	ldr	r3, [r7, #12]
 810d1ee:	68ba      	ldr	r2, [r7, #8]
 810d1f0:	609a      	str	r2, [r3, #8]
 810d1f2:	68fb      	ldr	r3, [r7, #12]
 810d1f4:	687a      	ldr	r2, [r7, #4]
 810d1f6:	60da      	str	r2, [r3, #12]
 810d1f8:	68fb      	ldr	r3, [r7, #12]
 810d1fa:	683a      	ldr	r2, [r7, #0]
 810d1fc:	611a      	str	r2, [r3, #16]
 810d1fe:	68fb      	ldr	r3, [r7, #12]
 810d200:	2200      	movs	r2, #0
 810d202:	829a      	strh	r2, [r3, #20]
 810d204:	68fb      	ldr	r3, [r7, #12]
 810d206:	3318      	adds	r3, #24
 810d208:	2100      	movs	r1, #0
 810d20a:	4618      	mov	r0, r3
 810d20c:	f000 f8b1 	bl	810d372 <_ZNSt8functionIFvhPhmEEC1EDn>
	semaphore = xSemaphoreCreateMutex();
 810d210:	2001      	movs	r0, #1
 810d212:	f7fc fca2 	bl	8109b5a <xQueueCreateMutex>
 810d216:	4602      	mov	r2, r0
 810d218:	68fb      	ldr	r3, [r7, #12]
 810d21a:	605a      	str	r2, [r3, #4]
	*bufferControl = 0;
 810d21c:	687b      	ldr	r3, [r7, #4]
 810d21e:	2200      	movs	r2, #0
 810d220:	701a      	strb	r2, [r3, #0]
}
 810d222:	68fb      	ldr	r3, [r7, #12]
 810d224:	4618      	mov	r0, r3
 810d226:	3710      	adds	r7, #16
 810d228:	46bd      	mov	sp, r7
 810d22a:	bd80      	pop	{r7, pc}
 810d22c:	08114050 	.word	0x08114050

0810d230 <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 810d230:	b580      	push	{r7, lr}
 810d232:	b082      	sub	sp, #8
 810d234:	af00      	add	r7, sp, #0
 810d236:	6078      	str	r0, [r7, #4]
 810d238:	6039      	str	r1, [r7, #0]
	receiverFunc = receiver;
 810d23a:	687b      	ldr	r3, [r7, #4]
 810d23c:	3318      	adds	r3, #24
 810d23e:	6839      	ldr	r1, [r7, #0]
 810d240:	4618      	mov	r0, r3
 810d242:	f000 f8a4 	bl	810d38e <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 810d246:	bf00      	nop
 810d248:	3708      	adds	r7, #8
 810d24a:	46bd      	mov	sp, r7
 810d24c:	bd80      	pop	{r7, pc}

0810d24e <_ZN16BufferedIODriver8transmitEPhm>:
/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 * Assumes there is no overrun
 */
void BufferedIODriver::transmit(uint8_t* data, uint32_t length) {
 810d24e:	b580      	push	{r7, lr}
 810d250:	b088      	sub	sp, #32
 810d252:	af00      	add	r7, sp, #0
 810d254:	60f8      	str	r0, [r7, #12]
 810d256:	60b9      	str	r1, [r7, #8]
 810d258:	607a      	str	r2, [r7, #4]
	if(xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE) {
 810d25a:	68fb      	ldr	r3, [r7, #12]
 810d25c:	685b      	ldr	r3, [r3, #4]
 810d25e:	f04f 31ff 	mov.w	r1, #4294967295
 810d262:	4618      	mov	r0, r3
 810d264:	f7fc fd8c 	bl	8109d80 <xQueueSemaphoreTake>
 810d268:	4603      	mov	r3, r0
 810d26a:	2b01      	cmp	r3, #1
 810d26c:	bf0c      	ite	eq
 810d26e:	2301      	moveq	r3, #1
 810d270:	2300      	movne	r3, #0
 810d272:	b2db      	uxtb	r3, r3
 810d274:	2b00      	cmp	r3, #0
 810d276:	d056      	beq.n	810d326 <_ZN16BufferedIODriver8transmitEPhm+0xd8>
		while(HAL_HSEM_Take(1, 1) != HAL_OK);
 810d278:	2101      	movs	r1, #1
 810d27a:	2001      	movs	r0, #1
 810d27c:	f7f7 fe22 	bl	8104ec4 <HAL_HSEM_Take>
 810d280:	4603      	mov	r3, r0
 810d282:	2b00      	cmp	r3, #0
 810d284:	bf14      	ite	ne
 810d286:	2301      	movne	r3, #1
 810d288:	2300      	moveq	r3, #0
 810d28a:	b2db      	uxtb	r3, r3
 810d28c:	2b00      	cmp	r3, #0
 810d28e:	d000      	beq.n	810d292 <_ZN16BufferedIODriver8transmitEPhm+0x44>
 810d290:	e7f2      	b.n	810d278 <_ZN16BufferedIODriver8transmitEPhm+0x2a>

		uint8_t writeIndex = *bufferControl;
 810d292:	68fb      	ldr	r3, [r7, #12]
 810d294:	68db      	ldr	r3, [r3, #12]
 810d296:	781b      	ldrb	r3, [r3, #0]
 810d298:	77fb      	strb	r3, [r7, #31]
		uint8_t* buffer = (uint8_t*) bufferStorage;
 810d29a:	68fb      	ldr	r3, [r7, #12]
 810d29c:	689b      	ldr	r3, [r3, #8]
 810d29e:	61bb      	str	r3, [r7, #24]

		if(writeIndex + length < bufferLength) {
 810d2a0:	7ffa      	ldrb	r2, [r7, #31]
 810d2a2:	687b      	ldr	r3, [r7, #4]
 810d2a4:	441a      	add	r2, r3
 810d2a6:	68fb      	ldr	r3, [r7, #12]
 810d2a8:	691b      	ldr	r3, [r3, #16]
 810d2aa:	429a      	cmp	r2, r3
 810d2ac:	d20d      	bcs.n	810d2ca <_ZN16BufferedIODriver8transmitEPhm+0x7c>
			memcpy(buffer + writeIndex, data, length);
 810d2ae:	7ffb      	ldrb	r3, [r7, #31]
 810d2b0:	69ba      	ldr	r2, [r7, #24]
 810d2b2:	4413      	add	r3, r2
 810d2b4:	687a      	ldr	r2, [r7, #4]
 810d2b6:	68b9      	ldr	r1, [r7, #8]
 810d2b8:	4618      	mov	r0, r3
 810d2ba:	f003 fc23 	bl	8110b04 <memcpy>
			writeIndex += length;
 810d2be:	687b      	ldr	r3, [r7, #4]
 810d2c0:	b2da      	uxtb	r2, r3
 810d2c2:	7ffb      	ldrb	r3, [r7, #31]
 810d2c4:	4413      	add	r3, r2
 810d2c6:	77fb      	strb	r3, [r7, #31]
 810d2c8:	e01e      	b.n	810d308 <_ZN16BufferedIODriver8transmitEPhm+0xba>
		} else {
			uint16_t firstSize = bufferLength - writeIndex;
 810d2ca:	68fb      	ldr	r3, [r7, #12]
 810d2cc:	691b      	ldr	r3, [r3, #16]
 810d2ce:	b29a      	uxth	r2, r3
 810d2d0:	7ffb      	ldrb	r3, [r7, #31]
 810d2d2:	b29b      	uxth	r3, r3
 810d2d4:	1ad3      	subs	r3, r2, r3
 810d2d6:	82fb      	strh	r3, [r7, #22]
			memcpy(buffer + writeIndex, data, firstSize);
 810d2d8:	7ffb      	ldrb	r3, [r7, #31]
 810d2da:	69ba      	ldr	r2, [r7, #24]
 810d2dc:	4413      	add	r3, r2
 810d2de:	8afa      	ldrh	r2, [r7, #22]
 810d2e0:	68b9      	ldr	r1, [r7, #8]
 810d2e2:	4618      	mov	r0, r3
 810d2e4:	f003 fc0e 	bl	8110b04 <memcpy>
			memcpy(buffer, data + firstSize, length - firstSize);
 810d2e8:	8afb      	ldrh	r3, [r7, #22]
 810d2ea:	68ba      	ldr	r2, [r7, #8]
 810d2ec:	18d1      	adds	r1, r2, r3
 810d2ee:	8afb      	ldrh	r3, [r7, #22]
 810d2f0:	687a      	ldr	r2, [r7, #4]
 810d2f2:	1ad3      	subs	r3, r2, r3
 810d2f4:	461a      	mov	r2, r3
 810d2f6:	69b8      	ldr	r0, [r7, #24]
 810d2f8:	f003 fc04 	bl	8110b04 <memcpy>
			writeIndex = length - firstSize;
 810d2fc:	687b      	ldr	r3, [r7, #4]
 810d2fe:	b2da      	uxtb	r2, r3
 810d300:	8afb      	ldrh	r3, [r7, #22]
 810d302:	b2db      	uxtb	r3, r3
 810d304:	1ad3      	subs	r3, r2, r3
 810d306:	77fb      	strb	r3, [r7, #31]
		}

		*bufferControl = writeIndex;
 810d308:	68fb      	ldr	r3, [r7, #12]
 810d30a:	68db      	ldr	r3, [r3, #12]
 810d30c:	7ffa      	ldrb	r2, [r7, #31]
 810d30e:	701a      	strb	r2, [r3, #0]

		HAL_HSEM_Release(1, 1);
 810d310:	2101      	movs	r1, #1
 810d312:	2001      	movs	r0, #1
 810d314:	f7f7 fe10 	bl	8104f38 <HAL_HSEM_Release>
		xSemaphoreGive(semaphore);
 810d318:	68fb      	ldr	r3, [r7, #12]
 810d31a:	6858      	ldr	r0, [r3, #4]
 810d31c:	2300      	movs	r3, #0
 810d31e:	2200      	movs	r2, #0
 810d320:	2100      	movs	r1, #0
 810d322:	f7fc fc33 	bl	8109b8c <xQueueGenericSend>
	}
}
 810d326:	bf00      	nop
 810d328:	3720      	adds	r7, #32
 810d32a:	46bd      	mov	sp, r7
 810d32c:	bd80      	pop	{r7, pc}

0810d32e <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 810d32e:	b580      	push	{r7, lr}
 810d330:	b082      	sub	sp, #8
 810d332:	af00      	add	r7, sp, #0
 810d334:	6078      	str	r0, [r7, #4]
 810d336:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 810d338:	687b      	ldr	r3, [r7, #4]
 810d33a:	4618      	mov	r0, r3
 810d33c:	f7ff fed8 	bl	810d0f0 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 810d340:	6838      	ldr	r0, [r7, #0]
 810d342:	f000 f83f 	bl	810d3c4 <_ZNKSt8functionIFvhPhmEEcvbEv>
 810d346:	4603      	mov	r3, r0
 810d348:	2b00      	cmp	r3, #0
 810d34a:	d00d      	beq.n	810d368 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 810d34c:	683b      	ldr	r3, [r7, #0]
 810d34e:	689b      	ldr	r3, [r3, #8]
 810d350:	6878      	ldr	r0, [r7, #4]
 810d352:	6839      	ldr	r1, [r7, #0]
 810d354:	2202      	movs	r2, #2
 810d356:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 810d358:	683b      	ldr	r3, [r7, #0]
 810d35a:	68da      	ldr	r2, [r3, #12]
 810d35c:	687b      	ldr	r3, [r7, #4]
 810d35e:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 810d360:	683b      	ldr	r3, [r7, #0]
 810d362:	689a      	ldr	r2, [r3, #8]
 810d364:	687b      	ldr	r3, [r7, #4]
 810d366:	609a      	str	r2, [r3, #8]
	}
    }
 810d368:	687b      	ldr	r3, [r7, #4]
 810d36a:	4618      	mov	r0, r3
 810d36c:	3708      	adds	r7, #8
 810d36e:	46bd      	mov	sp, r7
 810d370:	bd80      	pop	{r7, pc}

0810d372 <_ZNSt8functionIFvhPhmEEC1EDn>:
      function(nullptr_t) noexcept
 810d372:	b580      	push	{r7, lr}
 810d374:	b082      	sub	sp, #8
 810d376:	af00      	add	r7, sp, #0
 810d378:	6078      	str	r0, [r7, #4]
 810d37a:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 810d37c:	687b      	ldr	r3, [r7, #4]
 810d37e:	4618      	mov	r0, r3
 810d380:	f7ff feb6 	bl	810d0f0 <_ZNSt14_Function_baseC1Ev>
 810d384:	687b      	ldr	r3, [r7, #4]
 810d386:	4618      	mov	r0, r3
 810d388:	3708      	adds	r7, #8
 810d38a:	46bd      	mov	sp, r7
 810d38c:	bd80      	pop	{r7, pc}

0810d38e <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 810d38e:	b580      	push	{r7, lr}
 810d390:	b086      	sub	sp, #24
 810d392:	af00      	add	r7, sp, #0
 810d394:	6078      	str	r0, [r7, #4]
 810d396:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 810d398:	f107 0308 	add.w	r3, r7, #8
 810d39c:	6839      	ldr	r1, [r7, #0]
 810d39e:	4618      	mov	r0, r3
 810d3a0:	f7ff ffc5 	bl	810d32e <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 810d3a4:	f107 0308 	add.w	r3, r7, #8
 810d3a8:	6879      	ldr	r1, [r7, #4]
 810d3aa:	4618      	mov	r0, r3
 810d3ac:	f000 f81a 	bl	810d3e4 <_ZNSt8functionIFvhPhmEE4swapERS2_>
 810d3b0:	f107 0308 	add.w	r3, r7, #8
 810d3b4:	4618      	mov	r0, r3
 810d3b6:	f7ff feed 	bl	810d194 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 810d3ba:	687b      	ldr	r3, [r7, #4]
      }
 810d3bc:	4618      	mov	r0, r3
 810d3be:	3718      	adds	r7, #24
 810d3c0:	46bd      	mov	sp, r7
 810d3c2:	bd80      	pop	{r7, pc}

0810d3c4 <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 810d3c4:	b580      	push	{r7, lr}
 810d3c6:	b082      	sub	sp, #8
 810d3c8:	af00      	add	r7, sp, #0
 810d3ca:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 810d3cc:	687b      	ldr	r3, [r7, #4]
 810d3ce:	4618      	mov	r0, r3
 810d3d0:	f7ff feaf 	bl	810d132 <_ZNKSt14_Function_base8_M_emptyEv>
 810d3d4:	4603      	mov	r3, r0
 810d3d6:	f083 0301 	eor.w	r3, r3, #1
 810d3da:	b2db      	uxtb	r3, r3
 810d3dc:	4618      	mov	r0, r3
 810d3de:	3708      	adds	r7, #8
 810d3e0:	46bd      	mov	sp, r7
 810d3e2:	bd80      	pop	{r7, pc}

0810d3e4 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 810d3e4:	b580      	push	{r7, lr}
 810d3e6:	b082      	sub	sp, #8
 810d3e8:	af00      	add	r7, sp, #0
 810d3ea:	6078      	str	r0, [r7, #4]
 810d3ec:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 810d3ee:	687b      	ldr	r3, [r7, #4]
 810d3f0:	683a      	ldr	r2, [r7, #0]
 810d3f2:	4611      	mov	r1, r2
 810d3f4:	4618      	mov	r0, r3
 810d3f6:	f000 f821 	bl	810d43c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 810d3fa:	687b      	ldr	r3, [r7, #4]
 810d3fc:	f103 0208 	add.w	r2, r3, #8
 810d400:	683b      	ldr	r3, [r7, #0]
 810d402:	3308      	adds	r3, #8
 810d404:	4619      	mov	r1, r3
 810d406:	4610      	mov	r0, r2
 810d408:	f000 f84a 	bl	810d4a0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 810d40c:	687b      	ldr	r3, [r7, #4]
 810d40e:	f103 020c 	add.w	r2, r3, #12
 810d412:	683b      	ldr	r3, [r7, #0]
 810d414:	330c      	adds	r3, #12
 810d416:	4619      	mov	r1, r3
 810d418:	4610      	mov	r0, r2
 810d41a:	f000 f86b 	bl	810d4f4 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 810d41e:	bf00      	nop
 810d420:	3708      	adds	r7, #8
 810d422:	46bd      	mov	sp, r7
 810d424:	bd80      	pop	{r7, pc}

0810d426 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 810d426:	b480      	push	{r7}
 810d428:	b083      	sub	sp, #12
 810d42a:	af00      	add	r7, sp, #0
 810d42c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810d42e:	687b      	ldr	r3, [r7, #4]
 810d430:	4618      	mov	r0, r3
 810d432:	370c      	adds	r7, #12
 810d434:	46bd      	mov	sp, r7
 810d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d43a:	4770      	bx	lr

0810d43c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 810d43c:	b580      	push	{r7, lr}
 810d43e:	b084      	sub	sp, #16
 810d440:	af00      	add	r7, sp, #0
 810d442:	6078      	str	r0, [r7, #4]
 810d444:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810d446:	6878      	ldr	r0, [r7, #4]
 810d448:	f7ff ffed 	bl	810d426 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810d44c:	4602      	mov	r2, r0
 810d44e:	f107 0308 	add.w	r3, r7, #8
 810d452:	e892 0003 	ldmia.w	r2, {r0, r1}
 810d456:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 810d45a:	6838      	ldr	r0, [r7, #0]
 810d45c:	f7ff ffe3 	bl	810d426 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810d460:	4602      	mov	r2, r0
 810d462:	687b      	ldr	r3, [r7, #4]
 810d464:	e892 0003 	ldmia.w	r2, {r0, r1}
 810d468:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 810d46c:	f107 0308 	add.w	r3, r7, #8
 810d470:	4618      	mov	r0, r3
 810d472:	f7ff ffd8 	bl	810d426 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 810d476:	4602      	mov	r2, r0
 810d478:	683b      	ldr	r3, [r7, #0]
 810d47a:	e892 0003 	ldmia.w	r2, {r0, r1}
 810d47e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 810d482:	bf00      	nop
 810d484:	3710      	adds	r7, #16
 810d486:	46bd      	mov	sp, r7
 810d488:	bd80      	pop	{r7, pc}

0810d48a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 810d48a:	b480      	push	{r7}
 810d48c:	b083      	sub	sp, #12
 810d48e:	af00      	add	r7, sp, #0
 810d490:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810d492:	687b      	ldr	r3, [r7, #4]
 810d494:	4618      	mov	r0, r3
 810d496:	370c      	adds	r7, #12
 810d498:	46bd      	mov	sp, r7
 810d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d49e:	4770      	bx	lr

0810d4a0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 810d4a0:	b580      	push	{r7, lr}
 810d4a2:	b084      	sub	sp, #16
 810d4a4:	af00      	add	r7, sp, #0
 810d4a6:	6078      	str	r0, [r7, #4]
 810d4a8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810d4aa:	6878      	ldr	r0, [r7, #4]
 810d4ac:	f7ff ffed 	bl	810d48a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810d4b0:	4603      	mov	r3, r0
 810d4b2:	681b      	ldr	r3, [r3, #0]
 810d4b4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810d4b6:	6838      	ldr	r0, [r7, #0]
 810d4b8:	f7ff ffe7 	bl	810d48a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810d4bc:	4603      	mov	r3, r0
 810d4be:	681a      	ldr	r2, [r3, #0]
 810d4c0:	687b      	ldr	r3, [r7, #4]
 810d4c2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810d4c4:	f107 030c 	add.w	r3, r7, #12
 810d4c8:	4618      	mov	r0, r3
 810d4ca:	f7ff ffde 	bl	810d48a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 810d4ce:	4603      	mov	r3, r0
 810d4d0:	681a      	ldr	r2, [r3, #0]
 810d4d2:	683b      	ldr	r3, [r7, #0]
 810d4d4:	601a      	str	r2, [r3, #0]
    }
 810d4d6:	bf00      	nop
 810d4d8:	3710      	adds	r7, #16
 810d4da:	46bd      	mov	sp, r7
 810d4dc:	bd80      	pop	{r7, pc}

0810d4de <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 810d4de:	b480      	push	{r7}
 810d4e0:	b083      	sub	sp, #12
 810d4e2:	af00      	add	r7, sp, #0
 810d4e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810d4e6:	687b      	ldr	r3, [r7, #4]
 810d4e8:	4618      	mov	r0, r3
 810d4ea:	370c      	adds	r7, #12
 810d4ec:	46bd      	mov	sp, r7
 810d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4f2:	4770      	bx	lr

0810d4f4 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 810d4f4:	b580      	push	{r7, lr}
 810d4f6:	b084      	sub	sp, #16
 810d4f8:	af00      	add	r7, sp, #0
 810d4fa:	6078      	str	r0, [r7, #4]
 810d4fc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810d4fe:	6878      	ldr	r0, [r7, #4]
 810d500:	f7ff ffed 	bl	810d4de <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810d504:	4603      	mov	r3, r0
 810d506:	681b      	ldr	r3, [r3, #0]
 810d508:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810d50a:	6838      	ldr	r0, [r7, #0]
 810d50c:	f7ff ffe7 	bl	810d4de <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810d510:	4603      	mov	r3, r0
 810d512:	681a      	ldr	r2, [r3, #0]
 810d514:	687b      	ldr	r3, [r7, #4]
 810d516:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810d518:	f107 030c 	add.w	r3, r7, #12
 810d51c:	4618      	mov	r0, r3
 810d51e:	f7ff ffde 	bl	810d4de <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 810d522:	4603      	mov	r3, r0
 810d524:	681a      	ldr	r2, [r3, #0]
 810d526:	683b      	ldr	r3, [r7, #0]
 810d528:	601a      	str	r2, [r3, #0]
    }
 810d52a:	bf00      	nop
 810d52c:	3710      	adds	r7, #16
 810d52e:	46bd      	mov	sp, r7
 810d530:	bd80      	pop	{r7, pc}
	...

0810d534 <_ZN16BufferedIODriverD1Ev>:
#include <cstdint>
#include <functional>



class BufferedIODriver : public IODriver {
 810d534:	b580      	push	{r7, lr}
 810d536:	b082      	sub	sp, #8
 810d538:	af00      	add	r7, sp, #0
 810d53a:	6078      	str	r0, [r7, #4]
 810d53c:	4a08      	ldr	r2, [pc, #32]	; (810d560 <_ZN16BufferedIODriverD1Ev+0x2c>)
 810d53e:	687b      	ldr	r3, [r7, #4]
 810d540:	601a      	str	r2, [r3, #0]
 810d542:	687b      	ldr	r3, [r7, #4]
 810d544:	3318      	adds	r3, #24
 810d546:	4618      	mov	r0, r3
 810d548:	f7ff fe24 	bl	810d194 <_ZNSt8functionIFvhPhmEED1Ev>
 810d54c:	687b      	ldr	r3, [r7, #4]
 810d54e:	4618      	mov	r0, r3
 810d550:	f7ff fe00 	bl	810d154 <_ZN8IODriverD1Ev>
 810d554:	687b      	ldr	r3, [r7, #4]
 810d556:	4618      	mov	r0, r3
 810d558:	3708      	adds	r7, #8
 810d55a:	46bd      	mov	sp, r7
 810d55c:	bd80      	pop	{r7, pc}
 810d55e:	bf00      	nop
 810d560:	08114050 	.word	0x08114050

0810d564 <_ZN16BufferedIODriverD0Ev>:
 810d564:	b580      	push	{r7, lr}
 810d566:	b082      	sub	sp, #8
 810d568:	af00      	add	r7, sp, #0
 810d56a:	6078      	str	r0, [r7, #4]
 810d56c:	6878      	ldr	r0, [r7, #4]
 810d56e:	f7ff ffe1 	bl	810d534 <_ZN16BufferedIODriverD1Ev>
 810d572:	2128      	movs	r1, #40	; 0x28
 810d574:	6878      	ldr	r0, [r7, #4]
 810d576:	f003 f940 	bl	81107fa <_ZdlPvj>
 810d57a:	687b      	ldr	r3, [r7, #4]
 810d57c:	4618      	mov	r0, r3
 810d57e:	3708      	adds	r7, #8
 810d580:	46bd      	mov	sp, r7
 810d582:	bd80      	pop	{r7, pc}

0810d584 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 810d584:	b480      	push	{r7}
 810d586:	b083      	sub	sp, #12
 810d588:	af00      	add	r7, sp, #0
 810d58a:	6078      	str	r0, [r7, #4]
 810d58c:	4a04      	ldr	r2, [pc, #16]	; (810d5a0 <_ZN10MessageBusD1Ev+0x1c>)
 810d58e:	687b      	ldr	r3, [r7, #4]
 810d590:	601a      	str	r2, [r3, #0]
 810d592:	687b      	ldr	r3, [r7, #4]
 810d594:	4618      	mov	r0, r3
 810d596:	370c      	adds	r7, #12
 810d598:	46bd      	mov	sp, r7
 810d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d59e:	4770      	bx	lr
 810d5a0:	081140cc 	.word	0x081140cc

0810d5a4 <_ZN10MessageBusD0Ev>:
 810d5a4:	b580      	push	{r7, lr}
 810d5a6:	b082      	sub	sp, #8
 810d5a8:	af00      	add	r7, sp, #0
 810d5aa:	6078      	str	r0, [r7, #4]
 810d5ac:	6878      	ldr	r0, [r7, #4]
 810d5ae:	f7ff ffe9 	bl	810d584 <_ZN10MessageBusD1Ev>
 810d5b2:	f644 0104 	movw	r1, #18436	; 0x4804
 810d5b6:	6878      	ldr	r0, [r7, #4]
 810d5b8:	f003 f91f 	bl	81107fa <_ZdlPvj>
 810d5bc:	687b      	ldr	r3, [r7, #4]
 810d5be:	4618      	mov	r0, r3
 810d5c0:	3708      	adds	r7, #8
 810d5c2:	46bd      	mov	sp, r7
 810d5c4:	bd80      	pop	{r7, pc}

0810d5c6 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 810d5c6:	b480      	push	{r7}
 810d5c8:	b083      	sub	sp, #12
 810d5ca:	af00      	add	r7, sp, #0
 810d5cc:	6078      	str	r0, [r7, #4]
 810d5ce:	687b      	ldr	r3, [r7, #4]
 810d5d0:	4618      	mov	r0, r3
 810d5d2:	370c      	adds	r7, #12
 810d5d4:	46bd      	mov	sp, r7
 810d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5da:	4770      	bx	lr

0810d5dc <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 810d5dc:	b480      	push	{r7}
 810d5de:	b083      	sub	sp, #12
 810d5e0:	af00      	add	r7, sp, #0
 810d5e2:	6078      	str	r0, [r7, #4]
 810d5e4:	687b      	ldr	r3, [r7, #4]
 810d5e6:	4618      	mov	r0, r3
 810d5e8:	370c      	adds	r7, #12
 810d5ea:	46bd      	mov	sp, r7
 810d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5f0:	4770      	bx	lr
	...

0810d5f4 <_ZN10MessageBusC1Ev>:
class MessageBus {
 810d5f4:	b480      	push	{r7}
 810d5f6:	b083      	sub	sp, #12
 810d5f8:	af00      	add	r7, sp, #0
 810d5fa:	6078      	str	r0, [r7, #4]
 810d5fc:	4a04      	ldr	r2, [pc, #16]	; (810d610 <_ZN10MessageBusC1Ev+0x1c>)
 810d5fe:	687b      	ldr	r3, [r7, #4]
 810d600:	601a      	str	r2, [r3, #0]
 810d602:	687b      	ldr	r3, [r7, #4]
 810d604:	4618      	mov	r0, r3
 810d606:	370c      	adds	r7, #12
 810d608:	46bd      	mov	sp, r7
 810d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d60e:	4770      	bx	lr
 810d610:	081140cc 	.word	0x081140cc

0810d614 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 810d614:	b590      	push	{r4, r7, lr}
 810d616:	b091      	sub	sp, #68	; 0x44
 810d618:	af02      	add	r7, sp, #8
 810d61a:	60f8      	str	r0, [r7, #12]
 810d61c:	60b9      	str	r1, [r7, #8]
 810d61e:	607a      	str	r2, [r7, #4]
 810d620:	603b      	str	r3, [r7, #0]
 810d622:	68fb      	ldr	r3, [r7, #12]
 810d624:	4618      	mov	r0, r3
 810d626:	f7ff ffe5 	bl	810d5f4 <_ZN10MessageBusC1Ev>
 810d62a:	4a24      	ldr	r2, [pc, #144]	; (810d6bc <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 810d62c:	68fb      	ldr	r3, [r7, #12]
 810d62e:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 810d630:	68fb      	ldr	r3, [r7, #12]
 810d632:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d636:	3304      	adds	r3, #4
 810d638:	68ba      	ldr	r2, [r7, #8]
 810d63a:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 810d63c:	68fb      	ldr	r3, [r7, #12]
 810d63e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d642:	3308      	adds	r3, #8
 810d644:	687a      	ldr	r2, [r7, #4]
 810d646:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 810d648:	68fb      	ldr	r3, [r7, #12]
 810d64a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d64e:	330c      	adds	r3, #12
 810d650:	683a      	ldr	r2, [r7, #0]
 810d652:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 810d654:	68fb      	ldr	r3, [r7, #12]
 810d656:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d65a:	3310      	adds	r3, #16
 810d65c:	2200      	movs	r2, #0
 810d65e:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 810d660:	68bb      	ldr	r3, [r7, #8]
 810d662:	681b      	ldr	r3, [r3, #0]
 810d664:	3308      	adds	r3, #8
 810d666:	681c      	ldr	r4, [r3, #0]
 810d668:	4b15      	ldr	r3, [pc, #84]	; (810d6c0 <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 810d66a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810d66c:	2300      	movs	r3, #0
 810d66e:	633b      	str	r3, [r7, #48]	; 0x30
 810d670:	68fb      	ldr	r3, [r7, #12]
 810d672:	637b      	str	r3, [r7, #52]	; 0x34
 810d674:	f107 0020 	add.w	r0, r7, #32
 810d678:	f107 0234 	add.w	r2, r7, #52	; 0x34
 810d67c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 810d680:	4b10      	ldr	r3, [pc, #64]	; (810d6c4 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 810d682:	9301      	str	r3, [sp, #4]
 810d684:	4b10      	ldr	r3, [pc, #64]	; (810d6c8 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 810d686:	9300      	str	r3, [sp, #0]
 810d688:	4b10      	ldr	r3, [pc, #64]	; (810d6cc <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 810d68a:	f000 f8f0 	bl	810d86e <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 810d68e:	f107 0220 	add.w	r2, r7, #32
 810d692:	f107 0310 	add.w	r3, r7, #16
 810d696:	4611      	mov	r1, r2
 810d698:	4618      	mov	r0, r3
 810d69a:	f000 fa45 	bl	810db28 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 810d69e:	f107 0310 	add.w	r3, r7, #16
 810d6a2:	4619      	mov	r1, r3
 810d6a4:	68b8      	ldr	r0, [r7, #8]
 810d6a6:	47a0      	blx	r4
 810d6a8:	f107 0310 	add.w	r3, r7, #16
 810d6ac:	4618      	mov	r0, r3
 810d6ae:	f7ff fd71 	bl	810d194 <_ZNSt8functionIFvhPhmEED1Ev>
}
 810d6b2:	68fb      	ldr	r3, [r7, #12]
 810d6b4:	4618      	mov	r0, r3
 810d6b6:	373c      	adds	r7, #60	; 0x3c
 810d6b8:	46bd      	mov	sp, r7
 810d6ba:	bd90      	pop	{r4, r7, pc}
 810d6bc:	081140b4 	.word	0x081140b4
 810d6c0:	0810d6d1 	.word	0x0810d6d1
 810d6c4:	081145de 	.word	0x081145de
 810d6c8:	081145dd 	.word	0x081145dd
 810d6cc:	081145dc 	.word	0x081145dc

0810d6d0 <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 810d6d0:	b580      	push	{r7, lr}
 810d6d2:	b084      	sub	sp, #16
 810d6d4:	af00      	add	r7, sp, #0
 810d6d6:	60f8      	str	r0, [r7, #12]
 810d6d8:	607a      	str	r2, [r7, #4]
 810d6da:	603b      	str	r3, [r7, #0]
 810d6dc:	460b      	mov	r3, r1
 810d6de:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 810d6e0:	68fb      	ldr	r3, [r7, #12]
 810d6e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d6e6:	330c      	adds	r3, #12
 810d6e8:	681b      	ldr	r3, [r3, #0]
 810d6ea:	683a      	ldr	r2, [r7, #0]
 810d6ec:	429a      	cmp	r2, r3
 810d6ee:	d91a      	bls.n	810d726 <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 810d6f0:	68f8      	ldr	r0, [r7, #12]
 810d6f2:	68fb      	ldr	r3, [r7, #12]
 810d6f4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d6f8:	330c      	adds	r3, #12
 810d6fa:	681b      	ldr	r3, [r3, #0]
 810d6fc:	7af9      	ldrb	r1, [r7, #11]
 810d6fe:	687a      	ldr	r2, [r7, #4]
 810d700:	f001 fdbc 	bl	810f27c <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 810d704:	68fb      	ldr	r3, [r7, #12]
 810d706:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d70a:	330c      	adds	r3, #12
 810d70c:	681b      	ldr	r3, [r3, #0]
 810d70e:	683a      	ldr	r2, [r7, #0]
 810d710:	1ad3      	subs	r3, r2, r3
 810d712:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 810d714:	68fb      	ldr	r3, [r7, #12]
 810d716:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d71a:	330c      	adds	r3, #12
 810d71c:	681b      	ldr	r3, [r3, #0]
 810d71e:	687a      	ldr	r2, [r7, #4]
 810d720:	4413      	add	r3, r2
 810d722:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 810d724:	e7dc      	b.n	810d6e0 <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 810d726:	68f8      	ldr	r0, [r7, #12]
 810d728:	7af9      	ldrb	r1, [r7, #11]
 810d72a:	683b      	ldr	r3, [r7, #0]
 810d72c:	687a      	ldr	r2, [r7, #4]
 810d72e:	f001 fda5 	bl	810f27c <_ZN10MessageBus7receiveEhPhm>
}
 810d732:	bf00      	nop
 810d734:	3710      	adds	r7, #16
 810d736:	46bd      	mov	sp, r7
 810d738:	bd80      	pop	{r7, pc}

0810d73a <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 810d73a:	b580      	push	{r7, lr}
 810d73c:	b086      	sub	sp, #24
 810d73e:	af00      	add	r7, sp, #0
 810d740:	60f8      	str	r0, [r7, #12]
 810d742:	60b9      	str	r1, [r7, #8]
 810d744:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 810d746:	68fb      	ldr	r3, [r7, #12]
 810d748:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d74c:	330c      	adds	r3, #12
 810d74e:	681a      	ldr	r2, [r3, #0]
 810d750:	68fb      	ldr	r3, [r7, #12]
 810d752:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d756:	3310      	adds	r3, #16
 810d758:	781b      	ldrb	r3, [r3, #0]
 810d75a:	1ad3      	subs	r3, r2, r3
 810d75c:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 810d75e:	687a      	ldr	r2, [r7, #4]
 810d760:	697b      	ldr	r3, [r7, #20]
 810d762:	429a      	cmp	r2, r3
 810d764:	d901      	bls.n	810d76a <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 810d766:	697b      	ldr	r3, [r7, #20]
 810d768:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 810d76a:	68fb      	ldr	r3, [r7, #12]
 810d76c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d770:	3308      	adds	r3, #8
 810d772:	681a      	ldr	r2, [r3, #0]
 810d774:	68fb      	ldr	r3, [r7, #12]
 810d776:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d77a:	3310      	adds	r3, #16
 810d77c:	781b      	ldrb	r3, [r3, #0]
 810d77e:	4413      	add	r3, r2
 810d780:	687a      	ldr	r2, [r7, #4]
 810d782:	68b9      	ldr	r1, [r7, #8]
 810d784:	4618      	mov	r0, r3
 810d786:	f003 f9bd 	bl	8110b04 <memcpy>

	buffer_index += length;
 810d78a:	68fb      	ldr	r3, [r7, #12]
 810d78c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d790:	3310      	adds	r3, #16
 810d792:	781a      	ldrb	r2, [r3, #0]
 810d794:	687b      	ldr	r3, [r7, #4]
 810d796:	b2db      	uxtb	r3, r3
 810d798:	4413      	add	r3, r2
 810d79a:	b2da      	uxtb	r2, r3
 810d79c:	68fb      	ldr	r3, [r7, #12]
 810d79e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d7a2:	3310      	adds	r3, #16
 810d7a4:	701a      	strb	r2, [r3, #0]


	return length;
 810d7a6:	687b      	ldr	r3, [r7, #4]
 810d7a8:	b2db      	uxtb	r3, r3
}
 810d7aa:	4618      	mov	r0, r3
 810d7ac:	3718      	adds	r7, #24
 810d7ae:	46bd      	mov	sp, r7
 810d7b0:	bd80      	pop	{r7, pc}

0810d7b2 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 810d7b2:	b590      	push	{r4, r7, lr}
 810d7b4:	b083      	sub	sp, #12
 810d7b6:	af00      	add	r7, sp, #0
 810d7b8:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 810d7ba:	687b      	ldr	r3, [r7, #4]
 810d7bc:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d7c0:	3304      	adds	r3, #4
 810d7c2:	6818      	ldr	r0, [r3, #0]
 810d7c4:	687b      	ldr	r3, [r7, #4]
 810d7c6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d7ca:	3304      	adds	r3, #4
 810d7cc:	681b      	ldr	r3, [r3, #0]
 810d7ce:	681b      	ldr	r3, [r3, #0]
 810d7d0:	330c      	adds	r3, #12
 810d7d2:	681c      	ldr	r4, [r3, #0]
 810d7d4:	687b      	ldr	r3, [r7, #4]
 810d7d6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d7da:	3308      	adds	r3, #8
 810d7dc:	6819      	ldr	r1, [r3, #0]
 810d7de:	687b      	ldr	r3, [r7, #4]
 810d7e0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d7e4:	3310      	adds	r3, #16
 810d7e6:	781b      	ldrb	r3, [r3, #0]
 810d7e8:	461a      	mov	r2, r3
 810d7ea:	47a0      	blx	r4
	buffer_index = 0;
 810d7ec:	687b      	ldr	r3, [r7, #4]
 810d7ee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810d7f2:	3310      	adds	r3, #16
 810d7f4:	2200      	movs	r2, #0
 810d7f6:	701a      	strb	r2, [r3, #0]
}
 810d7f8:	bf00      	nop
 810d7fa:	370c      	adds	r7, #12
 810d7fc:	46bd      	mov	sp, r7
 810d7fe:	bd90      	pop	{r4, r7, pc}

0810d800 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d800:	b480      	push	{r7}
 810d802:	b083      	sub	sp, #12
 810d804:	af00      	add	r7, sp, #0
 810d806:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d808:	687b      	ldr	r3, [r7, #4]
 810d80a:	4618      	mov	r0, r3
 810d80c:	370c      	adds	r7, #12
 810d80e:	46bd      	mov	sp, r7
 810d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d814:	4770      	bx	lr

0810d816 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d816:	b480      	push	{r7}
 810d818:	b083      	sub	sp, #12
 810d81a:	af00      	add	r7, sp, #0
 810d81c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d81e:	687b      	ldr	r3, [r7, #4]
 810d820:	4618      	mov	r0, r3
 810d822:	370c      	adds	r7, #12
 810d824:	46bd      	mov	sp, r7
 810d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d82a:	4770      	bx	lr

0810d82c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d82c:	b480      	push	{r7}
 810d82e:	b083      	sub	sp, #12
 810d830:	af00      	add	r7, sp, #0
 810d832:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d834:	687b      	ldr	r3, [r7, #4]
 810d836:	4618      	mov	r0, r3
 810d838:	370c      	adds	r7, #12
 810d83a:	46bd      	mov	sp, r7
 810d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d840:	4770      	bx	lr

0810d842 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d842:	b480      	push	{r7}
 810d844:	b083      	sub	sp, #12
 810d846:	af00      	add	r7, sp, #0
 810d848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d84a:	687b      	ldr	r3, [r7, #4]
 810d84c:	4618      	mov	r0, r3
 810d84e:	370c      	adds	r7, #12
 810d850:	46bd      	mov	sp, r7
 810d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d856:	4770      	bx	lr

0810d858 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d858:	b480      	push	{r7}
 810d85a:	b083      	sub	sp, #12
 810d85c:	af00      	add	r7, sp, #0
 810d85e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d860:	687b      	ldr	r3, [r7, #4]
 810d862:	4618      	mov	r0, r3
 810d864:	370c      	adds	r7, #12
 810d866:	46bd      	mov	sp, r7
 810d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d86c:	4770      	bx	lr

0810d86e <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 810d86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d872:	b086      	sub	sp, #24
 810d874:	af02      	add	r7, sp, #8
 810d876:	60f8      	str	r0, [r7, #12]
 810d878:	60b9      	str	r1, [r7, #8]
 810d87a:	607a      	str	r2, [r7, #4]
 810d87c:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 810d87e:	68b8      	ldr	r0, [r7, #8]
 810d880:	f7ff ffbe 	bl	810d800 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d884:	4605      	mov	r5, r0
 810d886:	6878      	ldr	r0, [r7, #4]
 810d888:	f7ff ffc5 	bl	810d816 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810d88c:	4606      	mov	r6, r0
 810d88e:	6838      	ldr	r0, [r7, #0]
 810d890:	f7ff ffcc 	bl	810d82c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d894:	4680      	mov	r8, r0
 810d896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810d898:	f7ff ffd3 	bl	810d842 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d89c:	4604      	mov	r4, r0
 810d89e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810d8a0:	f7ff ffda 	bl	810d858 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810d8a4:	4603      	mov	r3, r0
 810d8a6:	9301      	str	r3, [sp, #4]
 810d8a8:	9400      	str	r4, [sp, #0]
 810d8aa:	4643      	mov	r3, r8
 810d8ac:	4632      	mov	r2, r6
 810d8ae:	4629      	mov	r1, r5
 810d8b0:	68f8      	ldr	r0, [r7, #12]
 810d8b2:	f000 f961 	bl	810db78 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 810d8b6:	68f8      	ldr	r0, [r7, #12]
 810d8b8:	3710      	adds	r7, #16
 810d8ba:	46bd      	mov	sp, r7
 810d8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810d8c0 <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 810d8c0:	b480      	push	{r7}
 810d8c2:	b083      	sub	sp, #12
 810d8c4:	af00      	add	r7, sp, #0
 810d8c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810d8c8:	687b      	ldr	r3, [r7, #4]
 810d8ca:	4618      	mov	r0, r3
 810d8cc:	370c      	adds	r7, #12
 810d8ce:	46bd      	mov	sp, r7
 810d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8d4:	4770      	bx	lr

0810d8d6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d8d6:	b580      	push	{r7, lr}
 810d8d8:	b082      	sub	sp, #8
 810d8da:	af00      	add	r7, sp, #0
 810d8dc:	6078      	str	r0, [r7, #4]
 810d8de:	6878      	ldr	r0, [r7, #4]
 810d8e0:	f000 f805 	bl	810d8ee <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 810d8e4:	4603      	mov	r3, r0
 810d8e6:	4618      	mov	r0, r3
 810d8e8:	3708      	adds	r7, #8
 810d8ea:	46bd      	mov	sp, r7
 810d8ec:	bd80      	pop	{r7, pc}

0810d8ee <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810d8ee:	b480      	push	{r7}
 810d8f0:	b083      	sub	sp, #12
 810d8f2:	af00      	add	r7, sp, #0
 810d8f4:	6078      	str	r0, [r7, #4]
 810d8f6:	687b      	ldr	r3, [r7, #4]
 810d8f8:	4618      	mov	r0, r3
 810d8fa:	370c      	adds	r7, #12
 810d8fc:	46bd      	mov	sp, r7
 810d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d902:	4770      	bx	lr

0810d904 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d904:	b480      	push	{r7}
 810d906:	b083      	sub	sp, #12
 810d908:	af00      	add	r7, sp, #0
 810d90a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d90c:	687b      	ldr	r3, [r7, #4]
 810d90e:	4618      	mov	r0, r3
 810d910:	370c      	adds	r7, #12
 810d912:	46bd      	mov	sp, r7
 810d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d918:	4770      	bx	lr

0810d91a <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
	: _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
 810d91a:	b580      	push	{r7, lr}
 810d91c:	b082      	sub	sp, #8
 810d91e:	af00      	add	r7, sp, #0
 810d920:	6078      	str	r0, [r7, #4]
 810d922:	6039      	str	r1, [r7, #0]
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 810d924:	6838      	ldr	r0, [r7, #0]
 810d926:	f7ff ffd6 	bl	810d8d6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810d92a:	4603      	mov	r3, r0
 810d92c:	4618      	mov	r0, r3
 810d92e:	f7ff ffe9 	bl	810d904 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810d932:	4603      	mov	r3, r0
 810d934:	4619      	mov	r1, r3
 810d936:	6878      	ldr	r0, [r7, #4]
 810d938:	f000 f95a 	bl	810dbf0 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 810d93c:	687b      	ldr	r3, [r7, #4]
 810d93e:	4618      	mov	r0, r3
 810d940:	3708      	adds	r7, #8
 810d942:	46bd      	mov	sp, r7
 810d944:	bd80      	pop	{r7, pc}

0810d946 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810d946:	b480      	push	{r7}
 810d948:	b083      	sub	sp, #12
 810d94a:	af00      	add	r7, sp, #0
 810d94c:	6078      	str	r0, [r7, #4]
 810d94e:	687b      	ldr	r3, [r7, #4]
 810d950:	4618      	mov	r0, r3
 810d952:	370c      	adds	r7, #12
 810d954:	46bd      	mov	sp, r7
 810d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d95a:	4770      	bx	lr

0810d95c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d95c:	b580      	push	{r7, lr}
 810d95e:	b082      	sub	sp, #8
 810d960:	af00      	add	r7, sp, #0
 810d962:	6078      	str	r0, [r7, #4]
 810d964:	6878      	ldr	r0, [r7, #4]
 810d966:	f000 f805 	bl	810d974 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 810d96a:	4603      	mov	r3, r0
 810d96c:	4618      	mov	r0, r3
 810d96e:	3708      	adds	r7, #8
 810d970:	46bd      	mov	sp, r7
 810d972:	bd80      	pop	{r7, pc}

0810d974 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810d974:	b480      	push	{r7}
 810d976:	b083      	sub	sp, #12
 810d978:	af00      	add	r7, sp, #0
 810d97a:	6078      	str	r0, [r7, #4]
 810d97c:	687b      	ldr	r3, [r7, #4]
 810d97e:	4618      	mov	r0, r3
 810d980:	370c      	adds	r7, #12
 810d982:	46bd      	mov	sp, r7
 810d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d988:	4770      	bx	lr

0810d98a <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810d98a:	b480      	push	{r7}
 810d98c:	b083      	sub	sp, #12
 810d98e:	af00      	add	r7, sp, #0
 810d990:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810d992:	687b      	ldr	r3, [r7, #4]
 810d994:	4618      	mov	r0, r3
 810d996:	370c      	adds	r7, #12
 810d998:	46bd      	mov	sp, r7
 810d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d99e:	4770      	bx	lr

0810d9a0 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d9a0:	b480      	push	{r7}
 810d9a2:	b083      	sub	sp, #12
 810d9a4:	af00      	add	r7, sp, #0
 810d9a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d9a8:	687b      	ldr	r3, [r7, #4]
 810d9aa:	4618      	mov	r0, r3
 810d9ac:	370c      	adds	r7, #12
 810d9ae:	46bd      	mov	sp, r7
 810d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9b4:	4770      	bx	lr

0810d9b6 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810d9b6:	b580      	push	{r7, lr}
 810d9b8:	b082      	sub	sp, #8
 810d9ba:	af00      	add	r7, sp, #0
 810d9bc:	6078      	str	r0, [r7, #4]
 810d9be:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810d9c0:	6838      	ldr	r0, [r7, #0]
 810d9c2:	f7ff ffc0 	bl	810d946 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 810d9c6:	4603      	mov	r3, r0
 810d9c8:	4618      	mov	r0, r3
 810d9ca:	f7ff ffde 	bl	810d98a <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 810d9ce:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810d9d0:	4619      	mov	r1, r3
 810d9d2:	6878      	ldr	r0, [r7, #4]
 810d9d4:	f7ff ffa1 	bl	810d91a <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 810d9d8:	6838      	ldr	r0, [r7, #0]
 810d9da:	f7ff ffbf 	bl	810d95c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810d9de:	4603      	mov	r3, r0
 810d9e0:	4618      	mov	r0, r3
 810d9e2:	f7ff ffdd 	bl	810d9a0 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810d9e6:	4603      	mov	r3, r0
 810d9e8:	4619      	mov	r1, r3
 810d9ea:	6878      	ldr	r0, [r7, #4]
 810d9ec:	f000 f90d 	bl	810dc0a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 810d9f0:	687b      	ldr	r3, [r7, #4]
 810d9f2:	4618      	mov	r0, r3
 810d9f4:	3708      	adds	r7, #8
 810d9f6:	46bd      	mov	sp, r7
 810d9f8:	bd80      	pop	{r7, pc}

0810d9fa <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810d9fa:	b480      	push	{r7}
 810d9fc:	b083      	sub	sp, #12
 810d9fe:	af00      	add	r7, sp, #0
 810da00:	6078      	str	r0, [r7, #4]
 810da02:	687b      	ldr	r3, [r7, #4]
 810da04:	4618      	mov	r0, r3
 810da06:	370c      	adds	r7, #12
 810da08:	46bd      	mov	sp, r7
 810da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da0e:	4770      	bx	lr

0810da10 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810da10:	b580      	push	{r7, lr}
 810da12:	b082      	sub	sp, #8
 810da14:	af00      	add	r7, sp, #0
 810da16:	6078      	str	r0, [r7, #4]
 810da18:	6878      	ldr	r0, [r7, #4]
 810da1a:	f000 f805 	bl	810da28 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 810da1e:	4603      	mov	r3, r0
 810da20:	4618      	mov	r0, r3
 810da22:	3708      	adds	r7, #8
 810da24:	46bd      	mov	sp, r7
 810da26:	bd80      	pop	{r7, pc}

0810da28 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810da28:	b480      	push	{r7}
 810da2a:	b083      	sub	sp, #12
 810da2c:	af00      	add	r7, sp, #0
 810da2e:	6078      	str	r0, [r7, #4]
 810da30:	687b      	ldr	r3, [r7, #4]
 810da32:	4618      	mov	r0, r3
 810da34:	370c      	adds	r7, #12
 810da36:	46bd      	mov	sp, r7
 810da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da3c:	4770      	bx	lr

0810da3e <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 810da3e:	b480      	push	{r7}
 810da40:	b083      	sub	sp, #12
 810da42:	af00      	add	r7, sp, #0
 810da44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810da46:	687b      	ldr	r3, [r7, #4]
 810da48:	4618      	mov	r0, r3
 810da4a:	370c      	adds	r7, #12
 810da4c:	46bd      	mov	sp, r7
 810da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da52:	4770      	bx	lr

0810da54 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810da54:	b480      	push	{r7}
 810da56:	b083      	sub	sp, #12
 810da58:	af00      	add	r7, sp, #0
 810da5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810da5c:	687b      	ldr	r3, [r7, #4]
 810da5e:	4618      	mov	r0, r3
 810da60:	370c      	adds	r7, #12
 810da62:	46bd      	mov	sp, r7
 810da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da68:	4770      	bx	lr

0810da6a <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810da6a:	b580      	push	{r7, lr}
 810da6c:	b082      	sub	sp, #8
 810da6e:	af00      	add	r7, sp, #0
 810da70:	6078      	str	r0, [r7, #4]
 810da72:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810da74:	6838      	ldr	r0, [r7, #0]
 810da76:	f7ff ffc0 	bl	810d9fa <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 810da7a:	4603      	mov	r3, r0
 810da7c:	4618      	mov	r0, r3
 810da7e:	f7ff ffde 	bl	810da3e <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 810da82:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810da84:	4619      	mov	r1, r3
 810da86:	6878      	ldr	r0, [r7, #4]
 810da88:	f7ff ff95 	bl	810d9b6 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 810da8c:	6838      	ldr	r0, [r7, #0]
 810da8e:	f7ff ffbf 	bl	810da10 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810da92:	4603      	mov	r3, r0
 810da94:	4618      	mov	r0, r3
 810da96:	f7ff ffdd 	bl	810da54 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810da9a:	4603      	mov	r3, r0
 810da9c:	4619      	mov	r1, r3
 810da9e:	6878      	ldr	r0, [r7, #4]
 810daa0:	f000 f8c0 	bl	810dc24 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 810daa4:	687b      	ldr	r3, [r7, #4]
 810daa6:	4618      	mov	r0, r3
 810daa8:	3708      	adds	r7, #8
 810daaa:	46bd      	mov	sp, r7
 810daac:	bd80      	pop	{r7, pc}

0810daae <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 810daae:	b580      	push	{r7, lr}
 810dab0:	b082      	sub	sp, #8
 810dab2:	af00      	add	r7, sp, #0
 810dab4:	6078      	str	r0, [r7, #4]
 810dab6:	6039      	str	r1, [r7, #0]
 810dab8:	687b      	ldr	r3, [r7, #4]
 810daba:	683a      	ldr	r2, [r7, #0]
 810dabc:	4611      	mov	r1, r2
 810dabe:	4618      	mov	r0, r3
 810dac0:	f000 f8eb 	bl	810dc9a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 810dac4:	687b      	ldr	r3, [r7, #4]
 810dac6:	4618      	mov	r0, r3
 810dac8:	3708      	adds	r7, #8
 810daca:	46bd      	mov	sp, r7
 810dacc:	bd80      	pop	{r7, pc}

0810dace <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 810dace:	b590      	push	{r4, r7, lr}
 810dad0:	b083      	sub	sp, #12
 810dad2:	af00      	add	r7, sp, #0
 810dad4:	6078      	str	r0, [r7, #4]
 810dad6:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 810dad8:	683b      	ldr	r3, [r7, #0]
 810dada:	4618      	mov	r0, r3
 810dadc:	f000 f87d 	bl	810dbda <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810dae0:	4602      	mov	r2, r0
 810dae2:	687b      	ldr	r3, [r7, #4]
 810dae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 810dae8:	e883 0003 	stmia.w	r3, {r0, r1}
 810daec:	687b      	ldr	r3, [r7, #4]
 810daee:	f103 0408 	add.w	r4, r3, #8
 810daf2:	683b      	ldr	r3, [r7, #0]
 810daf4:	3308      	adds	r3, #8
 810daf6:	4618      	mov	r0, r3
 810daf8:	f7ff fee2 	bl	810d8c0 <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 810dafc:	4603      	mov	r3, r0
 810dafe:	4619      	mov	r1, r3
 810db00:	4620      	mov	r0, r4
 810db02:	f7ff ffd4 	bl	810daae <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 810db06:	687b      	ldr	r3, [r7, #4]
 810db08:	4618      	mov	r0, r3
 810db0a:	370c      	adds	r7, #12
 810db0c:	46bd      	mov	sp, r7
 810db0e:	bd90      	pop	{r4, r7, pc}

0810db10 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 810db10:	b480      	push	{r7}
 810db12:	b083      	sub	sp, #12
 810db14:	af00      	add	r7, sp, #0
 810db16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810db18:	687b      	ldr	r3, [r7, #4]
 810db1a:	4618      	mov	r0, r3
 810db1c:	370c      	adds	r7, #12
 810db1e:	46bd      	mov	sp, r7
 810db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db24:	4770      	bx	lr
	...

0810db28 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 810db28:	b590      	push	{r4, r7, lr}
 810db2a:	b083      	sub	sp, #12
 810db2c:	af00      	add	r7, sp, #0
 810db2e:	6078      	str	r0, [r7, #4]
 810db30:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 810db32:	687b      	ldr	r3, [r7, #4]
 810db34:	4618      	mov	r0, r3
 810db36:	f7ff fadb 	bl	810d0f0 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 810db3a:	6838      	ldr	r0, [r7, #0]
 810db3c:	f000 f8d0 	bl	810dce0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 810db40:	4603      	mov	r3, r0
 810db42:	2b00      	cmp	r3, #0
 810db44:	d00e      	beq.n	810db64 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 810db46:	687c      	ldr	r4, [r7, #4]
 810db48:	6838      	ldr	r0, [r7, #0]
 810db4a:	f7ff ffe1 	bl	810db10 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810db4e:	4603      	mov	r3, r0
 810db50:	4619      	mov	r1, r3
 810db52:	4620      	mov	r0, r4
 810db54:	f000 f8cf 	bl	810dcf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 810db58:	687b      	ldr	r3, [r7, #4]
 810db5a:	4a05      	ldr	r2, [pc, #20]	; (810db70 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 810db5c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 810db5e:	687b      	ldr	r3, [r7, #4]
 810db60:	4a04      	ldr	r2, [pc, #16]	; (810db74 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 810db62:	609a      	str	r2, [r3, #8]
	  }
      }
 810db64:	687b      	ldr	r3, [r7, #4]
 810db66:	4618      	mov	r0, r3
 810db68:	370c      	adds	r7, #12
 810db6a:	46bd      	mov	sp, r7
 810db6c:	bd90      	pop	{r4, r7, pc}
 810db6e:	bf00      	nop
 810db70:	0810dd5d 	.word	0x0810dd5d
 810db74:	0810dd9d 	.word	0x0810dd9d

0810db78 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 810db78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810db7c:	b086      	sub	sp, #24
 810db7e:	af02      	add	r7, sp, #8
 810db80:	60f8      	str	r0, [r7, #12]
 810db82:	60b9      	str	r1, [r7, #8]
 810db84:	607a      	str	r2, [r7, #4]
 810db86:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 810db88:	68b8      	ldr	r0, [r7, #8]
 810db8a:	f000 f826 	bl	810dbda <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810db8e:	4602      	mov	r2, r0
 810db90:	68fb      	ldr	r3, [r7, #12]
 810db92:	e892 0003 	ldmia.w	r2, {r0, r1}
 810db96:	e883 0003 	stmia.w	r3, {r0, r1}
 810db9a:	68fb      	ldr	r3, [r7, #12]
 810db9c:	f103 0408 	add.w	r4, r3, #8
 810dba0:	6878      	ldr	r0, [r7, #4]
 810dba2:	f7ff fe38 	bl	810d816 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810dba6:	4605      	mov	r5, r0
 810dba8:	6838      	ldr	r0, [r7, #0]
 810dbaa:	f7ff fe3f 	bl	810d82c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dbae:	4606      	mov	r6, r0
 810dbb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810dbb2:	f7ff fe46 	bl	810d842 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dbb6:	4680      	mov	r8, r0
 810dbb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810dbba:	f7ff fe4d 	bl	810d858 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810dbbe:	4603      	mov	r3, r0
 810dbc0:	9300      	str	r3, [sp, #0]
 810dbc2:	4643      	mov	r3, r8
 810dbc4:	4632      	mov	r2, r6
 810dbc6:	4629      	mov	r1, r5
 810dbc8:	4620      	mov	r0, r4
 810dbca:	f000 f921 	bl	810de10 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 810dbce:	68fb      	ldr	r3, [r7, #12]
 810dbd0:	4618      	mov	r0, r3
 810dbd2:	3710      	adds	r7, #16
 810dbd4:	46bd      	mov	sp, r7
 810dbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810dbda <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810dbda:	b480      	push	{r7}
 810dbdc:	b083      	sub	sp, #12
 810dbde:	af00      	add	r7, sp, #0
 810dbe0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810dbe2:	687b      	ldr	r3, [r7, #4]
 810dbe4:	4618      	mov	r0, r3
 810dbe6:	370c      	adds	r7, #12
 810dbe8:	46bd      	mov	sp, r7
 810dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dbee:	4770      	bx	lr

0810dbf0 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810dbf0:	b580      	push	{r7, lr}
 810dbf2:	b082      	sub	sp, #8
 810dbf4:	af00      	add	r7, sp, #0
 810dbf6:	6078      	str	r0, [r7, #4]
 810dbf8:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810dbfa:	6838      	ldr	r0, [r7, #0]
 810dbfc:	f7ff fe82 	bl	810d904 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810dc00:	687b      	ldr	r3, [r7, #4]
 810dc02:	4618      	mov	r0, r3
 810dc04:	3708      	adds	r7, #8
 810dc06:	46bd      	mov	sp, r7
 810dc08:	bd80      	pop	{r7, pc}

0810dc0a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810dc0a:	b580      	push	{r7, lr}
 810dc0c:	b082      	sub	sp, #8
 810dc0e:	af00      	add	r7, sp, #0
 810dc10:	6078      	str	r0, [r7, #4]
 810dc12:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810dc14:	6838      	ldr	r0, [r7, #0]
 810dc16:	f7ff fec3 	bl	810d9a0 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810dc1a:	687b      	ldr	r3, [r7, #4]
 810dc1c:	4618      	mov	r0, r3
 810dc1e:	3708      	adds	r7, #8
 810dc20:	46bd      	mov	sp, r7
 810dc22:	bd80      	pop	{r7, pc}

0810dc24 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810dc24:	b580      	push	{r7, lr}
 810dc26:	b082      	sub	sp, #8
 810dc28:	af00      	add	r7, sp, #0
 810dc2a:	6078      	str	r0, [r7, #4]
 810dc2c:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810dc2e:	6838      	ldr	r0, [r7, #0]
 810dc30:	f7ff ff10 	bl	810da54 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810dc34:	687b      	ldr	r3, [r7, #4]
 810dc36:	4618      	mov	r0, r3
 810dc38:	3708      	adds	r7, #8
 810dc3a:	46bd      	mov	sp, r7
 810dc3c:	bd80      	pop	{r7, pc}

0810dc3e <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810dc3e:	b480      	push	{r7}
 810dc40:	b083      	sub	sp, #12
 810dc42:	af00      	add	r7, sp, #0
 810dc44:	6078      	str	r0, [r7, #4]
 810dc46:	687b      	ldr	r3, [r7, #4]
 810dc48:	4618      	mov	r0, r3
 810dc4a:	370c      	adds	r7, #12
 810dc4c:	46bd      	mov	sp, r7
 810dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc52:	4770      	bx	lr

0810dc54 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810dc54:	b580      	push	{r7, lr}
 810dc56:	b082      	sub	sp, #8
 810dc58:	af00      	add	r7, sp, #0
 810dc5a:	6078      	str	r0, [r7, #4]
 810dc5c:	687b      	ldr	r3, [r7, #4]
 810dc5e:	4618      	mov	r0, r3
 810dc60:	f000 f805 	bl	810dc6e <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 810dc64:	4603      	mov	r3, r0
 810dc66:	4618      	mov	r0, r3
 810dc68:	3708      	adds	r7, #8
 810dc6a:	46bd      	mov	sp, r7
 810dc6c:	bd80      	pop	{r7, pc}

0810dc6e <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810dc6e:	b480      	push	{r7}
 810dc70:	b083      	sub	sp, #12
 810dc72:	af00      	add	r7, sp, #0
 810dc74:	6078      	str	r0, [r7, #4]
 810dc76:	687b      	ldr	r3, [r7, #4]
 810dc78:	4618      	mov	r0, r3
 810dc7a:	370c      	adds	r7, #12
 810dc7c:	46bd      	mov	sp, r7
 810dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc82:	4770      	bx	lr

0810dc84 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810dc84:	b480      	push	{r7}
 810dc86:	b083      	sub	sp, #12
 810dc88:	af00      	add	r7, sp, #0
 810dc8a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810dc8c:	687b      	ldr	r3, [r7, #4]
 810dc8e:	4618      	mov	r0, r3
 810dc90:	370c      	adds	r7, #12
 810dc92:	46bd      	mov	sp, r7
 810dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc98:	4770      	bx	lr

0810dc9a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810dc9a:	b590      	push	{r4, r7, lr}
 810dc9c:	b083      	sub	sp, #12
 810dc9e:	af00      	add	r7, sp, #0
 810dca0:	6078      	str	r0, [r7, #4]
 810dca2:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810dca4:	6838      	ldr	r0, [r7, #0]
 810dca6:	f7ff ffca 	bl	810dc3e <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 810dcaa:	4603      	mov	r3, r0
 810dcac:	4618      	mov	r0, r3
 810dcae:	f7ff ffe9 	bl	810dc84 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 810dcb2:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810dcb4:	4619      	mov	r1, r3
 810dcb6:	6878      	ldr	r0, [r7, #4]
 810dcb8:	f7ff fed7 	bl	810da6a <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 810dcbc:	687c      	ldr	r4, [r7, #4]
 810dcbe:	6838      	ldr	r0, [r7, #0]
 810dcc0:	f7ff ffc8 	bl	810dc54 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810dcc4:	4603      	mov	r3, r0
 810dcc6:	4618      	mov	r0, r3
 810dcc8:	f7ff fda5 	bl	810d816 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810dccc:	4603      	mov	r3, r0
 810dcce:	4619      	mov	r1, r3
 810dcd0:	4620      	mov	r0, r4
 810dcd2:	f000 f8c3 	bl	810de5c <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810dcd6:	687b      	ldr	r3, [r7, #4]
 810dcd8:	4618      	mov	r0, r3
 810dcda:	370c      	adds	r7, #12
 810dcdc:	46bd      	mov	sp, r7
 810dcde:	bd90      	pop	{r4, r7, pc}

0810dce0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 810dce0:	b480      	push	{r7}
 810dce2:	b083      	sub	sp, #12
 810dce4:	af00      	add	r7, sp, #0
 810dce6:	6078      	str	r0, [r7, #4]
	  { return true; }
 810dce8:	2301      	movs	r3, #1
 810dcea:	4618      	mov	r0, r3
 810dcec:	370c      	adds	r7, #12
 810dcee:	46bd      	mov	sp, r7
 810dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dcf4:	4770      	bx	lr

0810dcf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 810dcf6:	b590      	push	{r4, r7, lr}
 810dcf8:	b085      	sub	sp, #20
 810dcfa:	af00      	add	r7, sp, #0
 810dcfc:	6078      	str	r0, [r7, #4]
 810dcfe:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 810dd00:	6838      	ldr	r0, [r7, #0]
 810dd02:	f7ff ff05 	bl	810db10 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810dd06:	4603      	mov	r3, r0
 810dd08:	4622      	mov	r2, r4
 810dd0a:	4619      	mov	r1, r3
 810dd0c:	6878      	ldr	r0, [r7, #4]
 810dd0e:	f000 f8b6 	bl	810de7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 810dd12:	bf00      	nop
 810dd14:	3714      	adds	r7, #20
 810dd16:	46bd      	mov	sp, r7
 810dd18:	bd90      	pop	{r4, r7, pc}

0810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810dd1a:	b480      	push	{r7}
 810dd1c:	b083      	sub	sp, #12
 810dd1e:	af00      	add	r7, sp, #0
 810dd20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810dd22:	687b      	ldr	r3, [r7, #4]
 810dd24:	4618      	mov	r0, r3
 810dd26:	370c      	adds	r7, #12
 810dd28:	46bd      	mov	sp, r7
 810dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd2e:	4770      	bx	lr

0810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810dd30:	b480      	push	{r7}
 810dd32:	b083      	sub	sp, #12
 810dd34:	af00      	add	r7, sp, #0
 810dd36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810dd38:	687b      	ldr	r3, [r7, #4]
 810dd3a:	4618      	mov	r0, r3
 810dd3c:	370c      	adds	r7, #12
 810dd3e:	46bd      	mov	sp, r7
 810dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd44:	4770      	bx	lr

0810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810dd46:	b480      	push	{r7}
 810dd48:	b083      	sub	sp, #12
 810dd4a:	af00      	add	r7, sp, #0
 810dd4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810dd4e:	687b      	ldr	r3, [r7, #4]
 810dd50:	4618      	mov	r0, r3
 810dd52:	370c      	adds	r7, #12
 810dd54:	46bd      	mov	sp, r7
 810dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd5a:	4770      	bx	lr

0810dd5c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 810dd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810dd5e:	b085      	sub	sp, #20
 810dd60:	af00      	add	r7, sp, #0
 810dd62:	60f8      	str	r0, [r7, #12]
 810dd64:	60b9      	str	r1, [r7, #8]
 810dd66:	607a      	str	r2, [r7, #4]
 810dd68:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 810dd6a:	68f8      	ldr	r0, [r7, #12]
 810dd6c:	f000 f8a3 	bl	810deb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810dd70:	4604      	mov	r4, r0
 810dd72:	68b8      	ldr	r0, [r7, #8]
 810dd74:	f7ff ffd1 	bl	810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810dd78:	4605      	mov	r5, r0
 810dd7a:	6878      	ldr	r0, [r7, #4]
 810dd7c:	f7ff ffd8 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810dd80:	4606      	mov	r6, r0
 810dd82:	6838      	ldr	r0, [r7, #0]
 810dd84:	f7ff ffdf 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810dd88:	4603      	mov	r3, r0
 810dd8a:	4632      	mov	r2, r6
 810dd8c:	4629      	mov	r1, r5
 810dd8e:	4620      	mov	r0, r4
 810dd90:	f000 f9a9 	bl	810e0e6 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 810dd94:	bf00      	nop
 810dd96:	3714      	adds	r7, #20
 810dd98:	46bd      	mov	sp, r7
 810dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810dd9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810dd9c:	b5b0      	push	{r4, r5, r7, lr}
 810dd9e:	b086      	sub	sp, #24
 810dda0:	af00      	add	r7, sp, #0
 810dda2:	60f8      	str	r0, [r7, #12]
 810dda4:	60b9      	str	r1, [r7, #8]
 810dda6:	4613      	mov	r3, r2
 810dda8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810ddaa:	79fb      	ldrb	r3, [r7, #7]
 810ddac:	2b03      	cmp	r3, #3
 810ddae:	d827      	bhi.n	810de00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 810ddb0:	a201      	add	r2, pc, #4	; (adr r2, 810ddb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 810ddb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ddb6:	bf00      	nop
 810ddb8:	0810ddc9 	.word	0x0810ddc9
 810ddbc:	0810ddd7 	.word	0x0810ddd7
 810ddc0:	0810ddeb 	.word	0x0810ddeb
 810ddc4:	0810ddf7 	.word	0x0810ddf7
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 810ddc8:	68f8      	ldr	r0, [r7, #12]
 810ddca:	f000 f9af 	bl	810e12c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810ddce:	4602      	mov	r2, r0
 810ddd0:	4b0e      	ldr	r3, [pc, #56]	; (810de0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 810ddd2:	6013      	str	r3, [r2, #0]
	      break;
 810ddd4:	e014      	b.n	810de00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810ddd6:	68f8      	ldr	r0, [r7, #12]
 810ddd8:	f000 f9b4 	bl	810e144 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810dddc:	4604      	mov	r4, r0
 810ddde:	68b8      	ldr	r0, [r7, #8]
 810dde0:	f000 f869 	bl	810deb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810dde4:	4603      	mov	r3, r0
 810dde6:	6023      	str	r3, [r4, #0]
	      break;
 810dde8:	e00a      	b.n	810de00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 810ddea:	462a      	mov	r2, r5
 810ddec:	68b9      	ldr	r1, [r7, #8]
 810ddee:	68f8      	ldr	r0, [r7, #12]
 810ddf0:	f000 f9b4 	bl	810e15c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 810ddf4:	e004      	b.n	810de00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 810ddf6:	4621      	mov	r1, r4
 810ddf8:	68f8      	ldr	r0, [r7, #12]
 810ddfa:	f000 f9cd 	bl	810e198 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 810ddfe:	bf00      	nop
	  return false;
 810de00:	2300      	movs	r3, #0
	}
 810de02:	4618      	mov	r0, r3
 810de04:	3718      	adds	r7, #24
 810de06:	46bd      	mov	sp, r7
 810de08:	bdb0      	pop	{r4, r5, r7, pc}
 810de0a:	bf00      	nop
 810de0c:	081140dc 	.word	0x081140dc

0810de10 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810de10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810de14:	b086      	sub	sp, #24
 810de16:	af02      	add	r7, sp, #8
 810de18:	60f8      	str	r0, [r7, #12]
 810de1a:	60b9      	str	r1, [r7, #8]
 810de1c:	607a      	str	r2, [r7, #4]
 810de1e:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810de20:	68fc      	ldr	r4, [r7, #12]
 810de22:	68b8      	ldr	r0, [r7, #8]
 810de24:	f7ff fcf7 	bl	810d816 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810de28:	4605      	mov	r5, r0
 810de2a:	6878      	ldr	r0, [r7, #4]
 810de2c:	f7ff fcfe 	bl	810d82c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810de30:	4606      	mov	r6, r0
 810de32:	6838      	ldr	r0, [r7, #0]
 810de34:	f7ff fd05 	bl	810d842 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810de38:	4680      	mov	r8, r0
 810de3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810de3c:	f7ff fd0c 	bl	810d858 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810de40:	4603      	mov	r3, r0
 810de42:	9300      	str	r3, [sp, #0]
 810de44:	4643      	mov	r3, r8
 810de46:	4632      	mov	r2, r6
 810de48:	4629      	mov	r1, r5
 810de4a:	4620      	mov	r0, r4
 810de4c:	f000 f9b6 	bl	810e1bc <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 810de50:	68fb      	ldr	r3, [r7, #12]
 810de52:	4618      	mov	r0, r3
 810de54:	3710      	adds	r7, #16
 810de56:	46bd      	mov	sp, r7
 810de58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810de5c <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810de5c:	b580      	push	{r7, lr}
 810de5e:	b082      	sub	sp, #8
 810de60:	af00      	add	r7, sp, #0
 810de62:	6078      	str	r0, [r7, #4]
 810de64:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810de66:	6838      	ldr	r0, [r7, #0]
 810de68:	f7ff fcd5 	bl	810d816 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810de6c:	4603      	mov	r3, r0
 810de6e:	681a      	ldr	r2, [r3, #0]
 810de70:	687b      	ldr	r3, [r7, #4]
 810de72:	601a      	str	r2, [r3, #0]
 810de74:	687b      	ldr	r3, [r7, #4]
 810de76:	4618      	mov	r0, r3
 810de78:	3708      	adds	r7, #8
 810de7a:	46bd      	mov	sp, r7
 810de7c:	bd80      	pop	{r7, pc}

0810de7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 810de7e:	b5b0      	push	{r4, r5, r7, lr}
 810de80:	b084      	sub	sp, #16
 810de82:	af00      	add	r7, sp, #0
 810de84:	60f8      	str	r0, [r7, #12]
 810de86:	60b9      	str	r1, [r7, #8]
 810de88:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 810de8a:	68b8      	ldr	r0, [r7, #8]
 810de8c:	f7ff fe40 	bl	810db10 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810de90:	4605      	mov	r5, r0
 810de92:	200c      	movs	r0, #12
 810de94:	f7fd fe24 	bl	810bae0 <_Znwj>
 810de98:	4603      	mov	r3, r0
 810de9a:	461c      	mov	r4, r3
 810de9c:	4629      	mov	r1, r5
 810de9e:	4620      	mov	r0, r4
 810dea0:	f7ff fe15 	bl	810dace <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 810dea4:	68f8      	ldr	r0, [r7, #12]
 810dea6:	f000 f94d 	bl	810e144 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810deaa:	4603      	mov	r3, r0
 810deac:	601c      	str	r4, [r3, #0]
 810deae:	bf00      	nop
 810deb0:	3710      	adds	r7, #16
 810deb2:	46bd      	mov	sp, r7
 810deb4:	bdb0      	pop	{r4, r5, r7, pc}

0810deb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 810deb6:	b580      	push	{r7, lr}
 810deb8:	b084      	sub	sp, #16
 810deba:	af00      	add	r7, sp, #0
 810debc:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 810debe:	6878      	ldr	r0, [r7, #4]
 810dec0:	f000 f9a2 	bl	810e208 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810dec4:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 810dec6:	681b      	ldr	r3, [r3, #0]
 810dec8:	60fb      	str	r3, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 810deca:	68fb      	ldr	r3, [r7, #12]
	}
 810decc:	4618      	mov	r0, r3
 810dece:	3710      	adds	r7, #16
 810ded0:	46bd      	mov	sp, r7
 810ded2:	bd80      	pop	{r7, pc}

0810ded4 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810ded4:	b5f0      	push	{r4, r5, r6, r7, lr}
 810ded6:	b085      	sub	sp, #20
 810ded8:	af00      	add	r7, sp, #0
 810deda:	60f8      	str	r0, [r7, #12]
 810dedc:	60b9      	str	r1, [r7, #8]
 810dede:	607a      	str	r2, [r7, #4]
 810dee0:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810dee2:	68fc      	ldr	r4, [r7, #12]
 810dee4:	68b8      	ldr	r0, [r7, #8]
 810dee6:	f7ff ff18 	bl	810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810deea:	4605      	mov	r5, r0
 810deec:	6878      	ldr	r0, [r7, #4]
 810deee:	f7ff ff1f 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810def2:	4606      	mov	r6, r0
 810def4:	6838      	ldr	r0, [r7, #0]
 810def6:	f7ff ff26 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810defa:	4603      	mov	r3, r0
 810defc:	4632      	mov	r2, r6
 810defe:	4629      	mov	r1, r5
 810df00:	4620      	mov	r0, r4
 810df02:	f000 f805 	bl	810df10 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 810df06:	68fb      	ldr	r3, [r7, #12]
 810df08:	4618      	mov	r0, r3
 810df0a:	3714      	adds	r7, #20
 810df0c:	46bd      	mov	sp, r7
 810df0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810df10 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810df10:	b5b0      	push	{r4, r5, r7, lr}
 810df12:	b084      	sub	sp, #16
 810df14:	af00      	add	r7, sp, #0
 810df16:	60f8      	str	r0, [r7, #12]
 810df18:	60b9      	str	r1, [r7, #8]
 810df1a:	607a      	str	r2, [r7, #4]
 810df1c:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810df1e:	68fc      	ldr	r4, [r7, #12]
 810df20:	6878      	ldr	r0, [r7, #4]
 810df22:	f7ff ff05 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810df26:	4605      	mov	r5, r0
 810df28:	6838      	ldr	r0, [r7, #0]
 810df2a:	f7ff ff0c 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810df2e:	4603      	mov	r3, r0
 810df30:	461a      	mov	r2, r3
 810df32:	4629      	mov	r1, r5
 810df34:	4620      	mov	r0, r4
 810df36:	f000 f810 	bl	810df5a <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 810df3a:	68fb      	ldr	r3, [r7, #12]
 810df3c:	f103 0408 	add.w	r4, r3, #8
 810df40:	68b8      	ldr	r0, [r7, #8]
 810df42:	f7ff feea 	bl	810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810df46:	4603      	mov	r3, r0
 810df48:	4619      	mov	r1, r3
 810df4a:	4620      	mov	r0, r4
 810df4c:	f000 f856 	bl	810dffc <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 810df50:	68fb      	ldr	r3, [r7, #12]
 810df52:	4618      	mov	r0, r3
 810df54:	3710      	adds	r7, #16
 810df56:	46bd      	mov	sp, r7
 810df58:	bdb0      	pop	{r4, r5, r7, pc}

0810df5a <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810df5a:	b590      	push	{r4, r7, lr}
 810df5c:	b085      	sub	sp, #20
 810df5e:	af00      	add	r7, sp, #0
 810df60:	60f8      	str	r0, [r7, #12]
 810df62:	60b9      	str	r1, [r7, #8]
 810df64:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 810df66:	68fc      	ldr	r4, [r7, #12]
 810df68:	6878      	ldr	r0, [r7, #4]
 810df6a:	f7ff feec 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810df6e:	4603      	mov	r3, r0
 810df70:	4619      	mov	r1, r3
 810df72:	4620      	mov	r0, r4
 810df74:	f000 f80f 	bl	810df96 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 810df78:	68fb      	ldr	r3, [r7, #12]
 810df7a:	1d1c      	adds	r4, r3, #4
 810df7c:	68b8      	ldr	r0, [r7, #8]
 810df7e:	f7ff fed7 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810df82:	4603      	mov	r3, r0
 810df84:	4619      	mov	r1, r3
 810df86:	4620      	mov	r0, r4
 810df88:	f000 f828 	bl	810dfdc <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 810df8c:	68fb      	ldr	r3, [r7, #12]
 810df8e:	4618      	mov	r0, r3
 810df90:	3714      	adds	r7, #20
 810df92:	46bd      	mov	sp, r7
 810df94:	bd90      	pop	{r4, r7, pc}

0810df96 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 810df96:	b590      	push	{r4, r7, lr}
 810df98:	b083      	sub	sp, #12
 810df9a:	af00      	add	r7, sp, #0
 810df9c:	6078      	str	r0, [r7, #4]
 810df9e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 810dfa0:	687c      	ldr	r4, [r7, #4]
 810dfa2:	6838      	ldr	r0, [r7, #0]
 810dfa4:	f7ff fecf 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810dfa8:	4603      	mov	r3, r0
 810dfaa:	4619      	mov	r1, r3
 810dfac:	4620      	mov	r0, r4
 810dfae:	f000 f805 	bl	810dfbc <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 810dfb2:	687b      	ldr	r3, [r7, #4]
 810dfb4:	4618      	mov	r0, r3
 810dfb6:	370c      	adds	r7, #12
 810dfb8:	46bd      	mov	sp, r7
 810dfba:	bd90      	pop	{r4, r7, pc}

0810dfbc <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810dfbc:	b580      	push	{r7, lr}
 810dfbe:	b082      	sub	sp, #8
 810dfc0:	af00      	add	r7, sp, #0
 810dfc2:	6078      	str	r0, [r7, #4]
 810dfc4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810dfc6:	6838      	ldr	r0, [r7, #0]
 810dfc8:	f7ff febd 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810dfcc:	4602      	mov	r2, r0
 810dfce:	687b      	ldr	r3, [r7, #4]
 810dfd0:	601a      	str	r2, [r3, #0]
 810dfd2:	687b      	ldr	r3, [r7, #4]
 810dfd4:	4618      	mov	r0, r3
 810dfd6:	3708      	adds	r7, #8
 810dfd8:	46bd      	mov	sp, r7
 810dfda:	bd80      	pop	{r7, pc}

0810dfdc <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810dfdc:	b580      	push	{r7, lr}
 810dfde:	b082      	sub	sp, #8
 810dfe0:	af00      	add	r7, sp, #0
 810dfe2:	6078      	str	r0, [r7, #4]
 810dfe4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810dfe6:	6838      	ldr	r0, [r7, #0]
 810dfe8:	f7ff fea2 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810dfec:	4602      	mov	r2, r0
 810dfee:	687b      	ldr	r3, [r7, #4]
 810dff0:	601a      	str	r2, [r3, #0]
 810dff2:	687b      	ldr	r3, [r7, #4]
 810dff4:	4618      	mov	r0, r3
 810dff6:	3708      	adds	r7, #8
 810dff8:	46bd      	mov	sp, r7
 810dffa:	bd80      	pop	{r7, pc}

0810dffc <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810dffc:	b580      	push	{r7, lr}
 810dffe:	b082      	sub	sp, #8
 810e000:	af00      	add	r7, sp, #0
 810e002:	6078      	str	r0, [r7, #4]
 810e004:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810e006:	6838      	ldr	r0, [r7, #0]
 810e008:	f7ff fe87 	bl	810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e00c:	4602      	mov	r2, r0
 810e00e:	687b      	ldr	r3, [r7, #4]
 810e010:	601a      	str	r2, [r3, #0]
 810e012:	687b      	ldr	r3, [r7, #4]
 810e014:	4618      	mov	r0, r3
 810e016:	3708      	adds	r7, #8
 810e018:	46bd      	mov	sp, r7
 810e01a:	bd80      	pop	{r7, pc}

0810e01c <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e01c:	b580      	push	{r7, lr}
 810e01e:	b082      	sub	sp, #8
 810e020:	af00      	add	r7, sp, #0
 810e022:	6078      	str	r0, [r7, #4]
 810e024:	687b      	ldr	r3, [r7, #4]
 810e026:	4618      	mov	r0, r3
 810e028:	f000 f805 	bl	810e036 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 810e02c:	4603      	mov	r3, r0
 810e02e:	4618      	mov	r0, r3
 810e030:	3708      	adds	r7, #8
 810e032:	46bd      	mov	sp, r7
 810e034:	bd80      	pop	{r7, pc}

0810e036 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810e036:	b480      	push	{r7}
 810e038:	b083      	sub	sp, #12
 810e03a:	af00      	add	r7, sp, #0
 810e03c:	6078      	str	r0, [r7, #4]
 810e03e:	687b      	ldr	r3, [r7, #4]
 810e040:	681b      	ldr	r3, [r3, #0]
 810e042:	4618      	mov	r0, r3
 810e044:	370c      	adds	r7, #12
 810e046:	46bd      	mov	sp, r7
 810e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e04c:	4770      	bx	lr

0810e04e <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e04e:	b480      	push	{r7}
 810e050:	b083      	sub	sp, #12
 810e052:	af00      	add	r7, sp, #0
 810e054:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e056:	687b      	ldr	r3, [r7, #4]
 810e058:	4618      	mov	r0, r3
 810e05a:	370c      	adds	r7, #12
 810e05c:	46bd      	mov	sp, r7
 810e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e062:	4770      	bx	lr

0810e064 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e064:	b580      	push	{r7, lr}
 810e066:	b082      	sub	sp, #8
 810e068:	af00      	add	r7, sp, #0
 810e06a:	6078      	str	r0, [r7, #4]
 810e06c:	687b      	ldr	r3, [r7, #4]
 810e06e:	3304      	adds	r3, #4
 810e070:	4618      	mov	r0, r3
 810e072:	f000 f805 	bl	810e080 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 810e076:	4603      	mov	r3, r0
 810e078:	4618      	mov	r0, r3
 810e07a:	3708      	adds	r7, #8
 810e07c:	46bd      	mov	sp, r7
 810e07e:	bd80      	pop	{r7, pc}

0810e080 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810e080:	b480      	push	{r7}
 810e082:	b083      	sub	sp, #12
 810e084:	af00      	add	r7, sp, #0
 810e086:	6078      	str	r0, [r7, #4]
 810e088:	687b      	ldr	r3, [r7, #4]
 810e08a:	681b      	ldr	r3, [r3, #0]
 810e08c:	4618      	mov	r0, r3
 810e08e:	370c      	adds	r7, #12
 810e090:	46bd      	mov	sp, r7
 810e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e096:	4770      	bx	lr

0810e098 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e098:	b480      	push	{r7}
 810e09a:	b083      	sub	sp, #12
 810e09c:	af00      	add	r7, sp, #0
 810e09e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e0a0:	687b      	ldr	r3, [r7, #4]
 810e0a2:	4618      	mov	r0, r3
 810e0a4:	370c      	adds	r7, #12
 810e0a6:	46bd      	mov	sp, r7
 810e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0ac:	4770      	bx	lr

0810e0ae <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 810e0ae:	b5b0      	push	{r4, r5, r7, lr}
 810e0b0:	b084      	sub	sp, #16
 810e0b2:	af00      	add	r7, sp, #0
 810e0b4:	60f8      	str	r0, [r7, #12]
 810e0b6:	60b9      	str	r1, [r7, #8]
 810e0b8:	607a      	str	r2, [r7, #4]
 810e0ba:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 810e0bc:	68b8      	ldr	r0, [r7, #8]
 810e0be:	f7ff fe2c 	bl	810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e0c2:	4604      	mov	r4, r0
 810e0c4:	6878      	ldr	r0, [r7, #4]
 810e0c6:	f7ff fe33 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e0ca:	4605      	mov	r5, r0
 810e0cc:	6838      	ldr	r0, [r7, #0]
 810e0ce:	f7ff fe3a 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e0d2:	4603      	mov	r3, r0
 810e0d4:	462a      	mov	r2, r5
 810e0d6:	4621      	mov	r1, r4
 810e0d8:	68f8      	ldr	r0, [r7, #12]
 810e0da:	f7ff fefb 	bl	810ded4 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 810e0de:	68f8      	ldr	r0, [r7, #12]
 810e0e0:	3710      	adds	r7, #16
 810e0e2:	46bd      	mov	sp, r7
 810e0e4:	bdb0      	pop	{r4, r5, r7, pc}

0810e0e6 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 810e0e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e0e8:	b089      	sub	sp, #36	; 0x24
 810e0ea:	af00      	add	r7, sp, #0
 810e0ec:	60f8      	str	r0, [r7, #12]
 810e0ee:	60b9      	str	r1, [r7, #8]
 810e0f0:	607a      	str	r2, [r7, #4]
 810e0f2:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 810e0f4:	68b8      	ldr	r0, [r7, #8]
 810e0f6:	f7ff fe10 	bl	810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e0fa:	4604      	mov	r4, r0
 810e0fc:	6878      	ldr	r0, [r7, #4]
 810e0fe:	f7ff fe17 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e102:	4605      	mov	r5, r0
 810e104:	6838      	ldr	r0, [r7, #0]
 810e106:	f7ff fe1e 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e10a:	4603      	mov	r3, r0
 810e10c:	f107 0010 	add.w	r0, r7, #16
 810e110:	462a      	mov	r2, r5
 810e112:	4621      	mov	r1, r4
 810e114:	f7ff ffcb 	bl	810e0ae <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 810e118:	f107 0310 	add.w	r3, r7, #16
 810e11c:	4632      	mov	r2, r6
 810e11e:	4619      	mov	r1, r3
 810e120:	68f8      	ldr	r0, [r7, #12]
 810e122:	f000 f8a2 	bl	810e26a <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 810e126:	3724      	adds	r7, #36	; 0x24
 810e128:	46bd      	mov	sp, r7
 810e12a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810e12c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 810e12c:	b580      	push	{r7, lr}
 810e12e:	b082      	sub	sp, #8
 810e130:	af00      	add	r7, sp, #0
 810e132:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810e134:	6878      	ldr	r0, [r7, #4]
 810e136:	f7ff fa46 	bl	810d5c6 <_ZNSt9_Any_data9_M_accessEv>
 810e13a:	4603      	mov	r3, r0
 810e13c:	4618      	mov	r0, r3
 810e13e:	3708      	adds	r7, #8
 810e140:	46bd      	mov	sp, r7
 810e142:	bd80      	pop	{r7, pc}

0810e144 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 810e144:	b580      	push	{r7, lr}
 810e146:	b082      	sub	sp, #8
 810e148:	af00      	add	r7, sp, #0
 810e14a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810e14c:	6878      	ldr	r0, [r7, #4]
 810e14e:	f7ff fa3a 	bl	810d5c6 <_ZNSt9_Any_data9_M_accessEv>
 810e152:	4603      	mov	r3, r0
 810e154:	4618      	mov	r0, r3
 810e156:	3708      	adds	r7, #8
 810e158:	46bd      	mov	sp, r7
 810e15a:	bd80      	pop	{r7, pc}

0810e15c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 810e15c:	b5b0      	push	{r4, r5, r7, lr}
 810e15e:	b084      	sub	sp, #16
 810e160:	af00      	add	r7, sp, #0
 810e162:	60f8      	str	r0, [r7, #12]
 810e164:	60b9      	str	r1, [r7, #8]
 810e166:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<_Functor*>());
 810e168:	68b8      	ldr	r0, [r7, #8]
 810e16a:	f000 f84d 	bl	810e208 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810e16e:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 810e170:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<_Functor*>());
 810e172:	200c      	movs	r0, #12
 810e174:	f7fd fcb4 	bl	810bae0 <_Znwj>
 810e178:	4603      	mov	r3, r0
 810e17a:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 810e17c:	4623      	mov	r3, r4
 810e17e:	462a      	mov	r2, r5
 810e180:	ca07      	ldmia	r2, {r0, r1, r2}
 810e182:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810e186:	68f8      	ldr	r0, [r7, #12]
 810e188:	f7ff ffdc 	bl	810e144 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810e18c:	4603      	mov	r3, r0
 810e18e:	601c      	str	r4, [r3, #0]
	}
 810e190:	bf00      	nop
 810e192:	3710      	adds	r7, #16
 810e194:	46bd      	mov	sp, r7
 810e196:	bdb0      	pop	{r4, r5, r7, pc}

0810e198 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 810e198:	b580      	push	{r7, lr}
 810e19a:	b082      	sub	sp, #8
 810e19c:	af00      	add	r7, sp, #0
 810e19e:	6078      	str	r0, [r7, #4]
 810e1a0:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 810e1a2:	6878      	ldr	r0, [r7, #4]
 810e1a4:	f7ff ffce 	bl	810e144 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810e1a8:	4603      	mov	r3, r0
 810e1aa:	681b      	ldr	r3, [r3, #0]
 810e1ac:	210c      	movs	r1, #12
 810e1ae:	4618      	mov	r0, r3
 810e1b0:	f002 fb23 	bl	81107fa <_ZdlPvj>
	}
 810e1b4:	bf00      	nop
 810e1b6:	3708      	adds	r7, #8
 810e1b8:	46bd      	mov	sp, r7
 810e1ba:	bd80      	pop	{r7, pc}

0810e1bc <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810e1bc:	b5b0      	push	{r4, r5, r7, lr}
 810e1be:	b084      	sub	sp, #16
 810e1c0:	af00      	add	r7, sp, #0
 810e1c2:	60f8      	str	r0, [r7, #12]
 810e1c4:	60b9      	str	r1, [r7, #8]
 810e1c6:	607a      	str	r2, [r7, #4]
 810e1c8:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810e1ca:	6878      	ldr	r0, [r7, #4]
 810e1cc:	f7ff fb2e 	bl	810d82c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e1d0:	4604      	mov	r4, r0
 810e1d2:	6838      	ldr	r0, [r7, #0]
 810e1d4:	f7ff fb35 	bl	810d842 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e1d8:	4605      	mov	r5, r0
 810e1da:	6a38      	ldr	r0, [r7, #32]
 810e1dc:	f7ff fb3c 	bl	810d858 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810e1e0:	4603      	mov	r3, r0
 810e1e2:	462a      	mov	r2, r5
 810e1e4:	4621      	mov	r1, r4
 810e1e6:	68f8      	ldr	r0, [r7, #12]
 810e1e8:	f000 f887 	bl	810e2fa <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 810e1ec:	68fc      	ldr	r4, [r7, #12]
 810e1ee:	68b8      	ldr	r0, [r7, #8]
 810e1f0:	f7ff fb11 	bl	810d816 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810e1f4:	4603      	mov	r3, r0
 810e1f6:	4619      	mov	r1, r3
 810e1f8:	4620      	mov	r0, r4
 810e1fa:	f7ff fe2f 	bl	810de5c <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810e1fe:	68fb      	ldr	r3, [r7, #12]
 810e200:	4618      	mov	r0, r3
 810e202:	3710      	adds	r7, #16
 810e204:	46bd      	mov	sp, r7
 810e206:	bdb0      	pop	{r4, r5, r7, pc}

0810e208 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 810e208:	b580      	push	{r7, lr}
 810e20a:	b082      	sub	sp, #8
 810e20c:	af00      	add	r7, sp, #0
 810e20e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 810e210:	6878      	ldr	r0, [r7, #4]
 810e212:	f7ff f9e3 	bl	810d5dc <_ZNKSt9_Any_data9_M_accessEv>
 810e216:	4603      	mov	r3, r0
 810e218:	4618      	mov	r0, r3
 810e21a:	3708      	adds	r7, #8
 810e21c:	46bd      	mov	sp, r7
 810e21e:	bd80      	pop	{r7, pc}

0810e220 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810e220:	b580      	push	{r7, lr}
 810e222:	b082      	sub	sp, #8
 810e224:	af00      	add	r7, sp, #0
 810e226:	6078      	str	r0, [r7, #4]
 810e228:	687b      	ldr	r3, [r7, #4]
 810e22a:	3308      	adds	r3, #8
 810e22c:	4618      	mov	r0, r3
 810e22e:	f000 f805 	bl	810e23c <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 810e232:	4603      	mov	r3, r0
 810e234:	4618      	mov	r0, r3
 810e236:	3708      	adds	r7, #8
 810e238:	46bd      	mov	sp, r7
 810e23a:	bd80      	pop	{r7, pc}

0810e23c <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810e23c:	b480      	push	{r7}
 810e23e:	b083      	sub	sp, #12
 810e240:	af00      	add	r7, sp, #0
 810e242:	6078      	str	r0, [r7, #4]
 810e244:	687b      	ldr	r3, [r7, #4]
 810e246:	681b      	ldr	r3, [r3, #0]
 810e248:	4618      	mov	r0, r3
 810e24a:	370c      	adds	r7, #12
 810e24c:	46bd      	mov	sp, r7
 810e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e252:	4770      	bx	lr

0810e254 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e254:	b480      	push	{r7}
 810e256:	b083      	sub	sp, #12
 810e258:	af00      	add	r7, sp, #0
 810e25a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	4618      	mov	r0, r3
 810e260:	370c      	adds	r7, #12
 810e262:	46bd      	mov	sp, r7
 810e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e268:	4770      	bx	lr

0810e26a <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 810e26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e26e:	b08a      	sub	sp, #40	; 0x28
 810e270:	af02      	add	r7, sp, #8
 810e272:	60f8      	str	r0, [r7, #12]
 810e274:	60b9      	str	r1, [r7, #8]
 810e276:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 810e278:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810e27a:	68fb      	ldr	r3, [r7, #12]
 810e27c:	3308      	adds	r3, #8
 810e27e:	4618      	mov	r0, r3
 810e280:	f000 f850 	bl	810e324 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810e284:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810e286:	f107 0310 	add.w	r3, r7, #16
 810e28a:	68ba      	ldr	r2, [r7, #8]
 810e28c:	4618      	mov	r0, r3
 810e28e:	f000 f856 	bl	810e33e <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 810e292:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810e294:	68fb      	ldr	r3, [r7, #12]
 810e296:	3308      	adds	r3, #8
 810e298:	4618      	mov	r0, r3
 810e29a:	f000 f85e 	bl	810e35a <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810e29e:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810e2a0:	f107 0314 	add.w	r3, r7, #20
 810e2a4:	68ba      	ldr	r2, [r7, #8]
 810e2a6:	4618      	mov	r0, r3
 810e2a8:	f000 f86e 	bl	810e388 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 810e2ac:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810e2ae:	68fb      	ldr	r3, [r7, #12]
 810e2b0:	3308      	adds	r3, #8
 810e2b2:	4618      	mov	r0, r3
 810e2b4:	f000 f87a 	bl	810e3ac <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810e2b8:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810e2ba:	f107 0318 	add.w	r3, r7, #24
 810e2be:	68ba      	ldr	r2, [r7, #8]
 810e2c0:	4618      	mov	r0, r3
 810e2c2:	f000 f87f 	bl	810e3c4 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 810e2c6:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810e2c8:	68fb      	ldr	r3, [r7, #12]
 810e2ca:	3308      	adds	r3, #8
 810e2cc:	4618      	mov	r0, r3
 810e2ce:	f000 f88b 	bl	810e3e8 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810e2d2:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810e2d4:	f107 031c 	add.w	r3, r7, #28
 810e2d8:	68ba      	ldr	r2, [r7, #8]
 810e2da:	4618      	mov	r0, r3
 810e2dc:	f000 f890 	bl	810e400 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 810e2e0:	4603      	mov	r3, r0
 810e2e2:	9300      	str	r3, [sp, #0]
 810e2e4:	4643      	mov	r3, r8
 810e2e6:	4632      	mov	r2, r6
 810e2e8:	4629      	mov	r1, r5
 810e2ea:	4620      	mov	r0, r4
 810e2ec:	f000 f8b0 	bl	810e450 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 810e2f0:	bf00      	nop
	}
 810e2f2:	3720      	adds	r7, #32
 810e2f4:	46bd      	mov	sp, r7
 810e2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810e2fa <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810e2fa:	b580      	push	{r7, lr}
 810e2fc:	b084      	sub	sp, #16
 810e2fe:	af00      	add	r7, sp, #0
 810e300:	60f8      	str	r0, [r7, #12]
 810e302:	60b9      	str	r1, [r7, #8]
 810e304:	607a      	str	r2, [r7, #4]
 810e306:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 810e308:	683a      	ldr	r2, [r7, #0]
 810e30a:	6879      	ldr	r1, [r7, #4]
 810e30c:	68f8      	ldr	r0, [r7, #12]
 810e30e:	f000 f8c8 	bl	810e4a2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 810e312:	68b9      	ldr	r1, [r7, #8]
 810e314:	68f8      	ldr	r0, [r7, #12]
 810e316:	f000 f8d7 	bl	810e4c8 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 810e31a:	68fb      	ldr	r3, [r7, #12]
 810e31c:	4618      	mov	r0, r3
 810e31e:	3710      	adds	r7, #16
 810e320:	46bd      	mov	sp, r7
 810e322:	bd80      	pop	{r7, pc}

0810e324 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810e324:	b580      	push	{r7, lr}
 810e326:	b082      	sub	sp, #8
 810e328:	af00      	add	r7, sp, #0
 810e32a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e32c:	687b      	ldr	r3, [r7, #4]
 810e32e:	4618      	mov	r0, r3
 810e330:	f000 f8d6 	bl	810e4e0 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 810e334:	4603      	mov	r3, r0
 810e336:	4618      	mov	r0, r3
 810e338:	3708      	adds	r7, #8
 810e33a:	46bd      	mov	sp, r7
 810e33c:	bd80      	pop	{r7, pc}

0810e33e <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 810e33e:	b580      	push	{r7, lr}
 810e340:	b084      	sub	sp, #16
 810e342:	af00      	add	r7, sp, #0
 810e344:	60f8      	str	r0, [r7, #12]
 810e346:	60b9      	str	r1, [r7, #8]
 810e348:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 810e34a:	68b8      	ldr	r0, [r7, #8]
 810e34c:	f000 f875 	bl	810e43a <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810e350:	4603      	mov	r3, r0
 810e352:	4618      	mov	r0, r3
 810e354:	3710      	adds	r7, #16
 810e356:	46bd      	mov	sp, r7
 810e358:	bd80      	pop	{r7, pc}

0810e35a <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810e35a:	b580      	push	{r7, lr}
 810e35c:	b082      	sub	sp, #8
 810e35e:	af00      	add	r7, sp, #0
 810e360:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e362:	6878      	ldr	r0, [r7, #4]
 810e364:	f000 f8c8 	bl	810e4f8 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810e368:	4603      	mov	r3, r0
 810e36a:	4618      	mov	r0, r3
 810e36c:	3708      	adds	r7, #8
 810e36e:	46bd      	mov	sp, r7
 810e370:	bd80      	pop	{r7, pc}

0810e372 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810e372:	b480      	push	{r7}
 810e374:	b083      	sub	sp, #12
 810e376:	af00      	add	r7, sp, #0
 810e378:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810e37a:	687b      	ldr	r3, [r7, #4]
 810e37c:	4618      	mov	r0, r3
 810e37e:	370c      	adds	r7, #12
 810e380:	46bd      	mov	sp, r7
 810e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e386:	4770      	bx	lr

0810e388 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810e388:	b580      	push	{r7, lr}
 810e38a:	b084      	sub	sp, #16
 810e38c:	af00      	add	r7, sp, #0
 810e38e:	60f8      	str	r0, [r7, #12]
 810e390:	60b9      	str	r1, [r7, #8]
 810e392:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810e394:	6878      	ldr	r0, [r7, #4]
 810e396:	f7ff ffec 	bl	810e372 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810e39a:	4603      	mov	r3, r0
 810e39c:	4618      	mov	r0, r3
 810e39e:	f000 f8d0 	bl	810e542 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810e3a2:	4603      	mov	r3, r0
	}
 810e3a4:	4618      	mov	r0, r3
 810e3a6:	3710      	adds	r7, #16
 810e3a8:	46bd      	mov	sp, r7
 810e3aa:	bd80      	pop	{r7, pc}

0810e3ac <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810e3ac:	b580      	push	{r7, lr}
 810e3ae:	b082      	sub	sp, #8
 810e3b0:	af00      	add	r7, sp, #0
 810e3b2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e3b4:	6878      	ldr	r0, [r7, #4]
 810e3b6:	f000 f8d4 	bl	810e562 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810e3ba:	4603      	mov	r3, r0
 810e3bc:	4618      	mov	r0, r3
 810e3be:	3708      	adds	r7, #8
 810e3c0:	46bd      	mov	sp, r7
 810e3c2:	bd80      	pop	{r7, pc}

0810e3c4 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810e3c4:	b580      	push	{r7, lr}
 810e3c6:	b084      	sub	sp, #16
 810e3c8:	af00      	add	r7, sp, #0
 810e3ca:	60f8      	str	r0, [r7, #12]
 810e3cc:	60b9      	str	r1, [r7, #8]
 810e3ce:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810e3d0:	6878      	ldr	r0, [r7, #4]
 810e3d2:	f7ff ffce 	bl	810e372 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810e3d6:	4603      	mov	r3, r0
 810e3d8:	4618      	mov	r0, r3
 810e3da:	f000 f8e7 	bl	810e5ac <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810e3de:	4603      	mov	r3, r0
	}
 810e3e0:	4618      	mov	r0, r3
 810e3e2:	3710      	adds	r7, #16
 810e3e4:	46bd      	mov	sp, r7
 810e3e6:	bd80      	pop	{r7, pc}

0810e3e8 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810e3e8:	b580      	push	{r7, lr}
 810e3ea:	b082      	sub	sp, #8
 810e3ec:	af00      	add	r7, sp, #0
 810e3ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e3f0:	6878      	ldr	r0, [r7, #4]
 810e3f2:	f000 f8eb 	bl	810e5cc <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 810e3f6:	4603      	mov	r3, r0
 810e3f8:	4618      	mov	r0, r3
 810e3fa:	3708      	adds	r7, #8
 810e3fc:	46bd      	mov	sp, r7
 810e3fe:	bd80      	pop	{r7, pc}

0810e400 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810e400:	b580      	push	{r7, lr}
 810e402:	b084      	sub	sp, #16
 810e404:	af00      	add	r7, sp, #0
 810e406:	60f8      	str	r0, [r7, #12]
 810e408:	60b9      	str	r1, [r7, #8]
 810e40a:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810e40c:	6878      	ldr	r0, [r7, #4]
 810e40e:	f7ff ffb0 	bl	810e372 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810e412:	4603      	mov	r3, r0
 810e414:	4618      	mov	r0, r3
 810e416:	f000 f8fe 	bl	810e616 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810e41a:	4603      	mov	r3, r0
	}
 810e41c:	4618      	mov	r0, r3
 810e41e:	3710      	adds	r7, #16
 810e420:	46bd      	mov	sp, r7
 810e422:	bd80      	pop	{r7, pc}

0810e424 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e424:	b480      	push	{r7}
 810e426:	b083      	sub	sp, #12
 810e428:	af00      	add	r7, sp, #0
 810e42a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e42c:	687b      	ldr	r3, [r7, #4]
 810e42e:	4618      	mov	r0, r3
 810e430:	370c      	adds	r7, #12
 810e432:	46bd      	mov	sp, r7
 810e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e438:	4770      	bx	lr

0810e43a <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810e43a:	b480      	push	{r7}
 810e43c:	b083      	sub	sp, #12
 810e43e:	af00      	add	r7, sp, #0
 810e440:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810e442:	687b      	ldr	r3, [r7, #4]
 810e444:	4618      	mov	r0, r3
 810e446:	370c      	adds	r7, #12
 810e448:	46bd      	mov	sp, r7
 810e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e44e:	4770      	bx	lr

0810e450 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 810e450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810e454:	b089      	sub	sp, #36	; 0x24
 810e456:	af02      	add	r7, sp, #8
 810e458:	60f8      	str	r0, [r7, #12]
 810e45a:	60b9      	str	r1, [r7, #8]
 810e45c:	607a      	str	r2, [r7, #4]
 810e45e:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 810e460:	68f8      	ldr	r0, [r7, #12]
 810e462:	f7ff ffdf 	bl	810e424 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 810e466:	4605      	mov	r5, r0
 810e468:	68b8      	ldr	r0, [r7, #8]
 810e46a:	f7ff ffe6 	bl	810e43a <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810e46e:	4606      	mov	r6, r0
 810e470:	6878      	ldr	r0, [r7, #4]
 810e472:	f7ff fc52 	bl	810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e476:	4680      	mov	r8, r0
 810e478:	6838      	ldr	r0, [r7, #0]
 810e47a:	f7ff fc59 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e47e:	4604      	mov	r4, r0
 810e480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810e482:	f7ff fc60 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e486:	4603      	mov	r3, r0
 810e488:	9301      	str	r3, [sp, #4]
 810e48a:	9400      	str	r4, [sp, #0]
 810e48c:	4643      	mov	r3, r8
 810e48e:	4632      	mov	r2, r6
 810e490:	4629      	mov	r1, r5
 810e492:	4648      	mov	r0, r9
 810e494:	f000 f8cf 	bl	810e636 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 810e498:	bf00      	nop
    }
 810e49a:	371c      	adds	r7, #28
 810e49c:	46bd      	mov	sp, r7
 810e49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810e4a2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810e4a2:	b580      	push	{r7, lr}
 810e4a4:	b084      	sub	sp, #16
 810e4a6:	af00      	add	r7, sp, #0
 810e4a8:	60f8      	str	r0, [r7, #12]
 810e4aa:	60b9      	str	r1, [r7, #8]
 810e4ac:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 810e4ae:	6879      	ldr	r1, [r7, #4]
 810e4b0:	68f8      	ldr	r0, [r7, #12]
 810e4b2:	f000 f8fa 	bl	810e6aa <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 810e4b6:	68b9      	ldr	r1, [r7, #8]
 810e4b8:	68f8      	ldr	r0, [r7, #12]
 810e4ba:	f000 f904 	bl	810e6c6 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 810e4be:	68fb      	ldr	r3, [r7, #12]
 810e4c0:	4618      	mov	r0, r3
 810e4c2:	3710      	adds	r7, #16
 810e4c4:	46bd      	mov	sp, r7
 810e4c6:	bd80      	pop	{r7, pc}

0810e4c8 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810e4c8:	b480      	push	{r7}
 810e4ca:	b083      	sub	sp, #12
 810e4cc:	af00      	add	r7, sp, #0
 810e4ce:	6078      	str	r0, [r7, #4]
 810e4d0:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810e4d2:	687b      	ldr	r3, [r7, #4]
 810e4d4:	4618      	mov	r0, r3
 810e4d6:	370c      	adds	r7, #12
 810e4d8:	46bd      	mov	sp, r7
 810e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4de:	4770      	bx	lr

0810e4e0 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810e4e0:	b580      	push	{r7, lr}
 810e4e2:	b082      	sub	sp, #8
 810e4e4:	af00      	add	r7, sp, #0
 810e4e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810e4e8:	6878      	ldr	r0, [r7, #4]
 810e4ea:	f7ff fbb3 	bl	810dc54 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810e4ee:	4603      	mov	r3, r0
 810e4f0:	4618      	mov	r0, r3
 810e4f2:	3708      	adds	r7, #8
 810e4f4:	46bd      	mov	sp, r7
 810e4f6:	bd80      	pop	{r7, pc}

0810e4f8 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810e4f8:	b580      	push	{r7, lr}
 810e4fa:	b082      	sub	sp, #8
 810e4fc:	af00      	add	r7, sp, #0
 810e4fe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810e500:	6878      	ldr	r0, [r7, #4]
 810e502:	f7ff fa85 	bl	810da10 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810e506:	4603      	mov	r3, r0
 810e508:	4618      	mov	r0, r3
 810e50a:	3708      	adds	r7, #8
 810e50c:	46bd      	mov	sp, r7
 810e50e:	bd80      	pop	{r7, pc}

0810e510 <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810e510:	b580      	push	{r7, lr}
 810e512:	b082      	sub	sp, #8
 810e514:	af00      	add	r7, sp, #0
 810e516:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e518:	687b      	ldr	r3, [r7, #4]
 810e51a:	4618      	mov	r0, r3
 810e51c:	f000 f805 	bl	810e52a <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810e520:	4603      	mov	r3, r0
 810e522:	4618      	mov	r0, r3
 810e524:	3708      	adds	r7, #8
 810e526:	46bd      	mov	sp, r7
 810e528:	bd80      	pop	{r7, pc}

0810e52a <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810e52a:	b580      	push	{r7, lr}
 810e52c:	b082      	sub	sp, #8
 810e52e:	af00      	add	r7, sp, #0
 810e530:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810e532:	6878      	ldr	r0, [r7, #4]
 810e534:	f7ff fe74 	bl	810e220 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 810e538:	4603      	mov	r3, r0
 810e53a:	4618      	mov	r0, r3
 810e53c:	3708      	adds	r7, #8
 810e53e:	46bd      	mov	sp, r7
 810e540:	bd80      	pop	{r7, pc}

0810e542 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810e542:	b580      	push	{r7, lr}
 810e544:	b082      	sub	sp, #8
 810e546:	af00      	add	r7, sp, #0
 810e548:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810e54a:	6878      	ldr	r0, [r7, #4]
 810e54c:	f7ff ffe0 	bl	810e510 <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810e550:	4603      	mov	r3, r0
 810e552:	4618      	mov	r0, r3
 810e554:	f7ff fe7e 	bl	810e254 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e558:	4603      	mov	r3, r0
    }
 810e55a:	4618      	mov	r0, r3
 810e55c:	3708      	adds	r7, #8
 810e55e:	46bd      	mov	sp, r7
 810e560:	bd80      	pop	{r7, pc}

0810e562 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810e562:	b580      	push	{r7, lr}
 810e564:	b082      	sub	sp, #8
 810e566:	af00      	add	r7, sp, #0
 810e568:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810e56a:	6878      	ldr	r0, [r7, #4]
 810e56c:	f7ff f9f6 	bl	810d95c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810e570:	4603      	mov	r3, r0
 810e572:	4618      	mov	r0, r3
 810e574:	3708      	adds	r7, #8
 810e576:	46bd      	mov	sp, r7
 810e578:	bd80      	pop	{r7, pc}

0810e57a <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810e57a:	b580      	push	{r7, lr}
 810e57c:	b082      	sub	sp, #8
 810e57e:	af00      	add	r7, sp, #0
 810e580:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e582:	687b      	ldr	r3, [r7, #4]
 810e584:	4618      	mov	r0, r3
 810e586:	f000 f805 	bl	810e594 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810e58a:	4603      	mov	r3, r0
 810e58c:	4618      	mov	r0, r3
 810e58e:	3708      	adds	r7, #8
 810e590:	46bd      	mov	sp, r7
 810e592:	bd80      	pop	{r7, pc}

0810e594 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810e594:	b580      	push	{r7, lr}
 810e596:	b082      	sub	sp, #8
 810e598:	af00      	add	r7, sp, #0
 810e59a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810e59c:	6878      	ldr	r0, [r7, #4]
 810e59e:	f7ff fd61 	bl	810e064 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 810e5a2:	4603      	mov	r3, r0
 810e5a4:	4618      	mov	r0, r3
 810e5a6:	3708      	adds	r7, #8
 810e5a8:	46bd      	mov	sp, r7
 810e5aa:	bd80      	pop	{r7, pc}

0810e5ac <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810e5ac:	b580      	push	{r7, lr}
 810e5ae:	b082      	sub	sp, #8
 810e5b0:	af00      	add	r7, sp, #0
 810e5b2:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810e5b4:	6878      	ldr	r0, [r7, #4]
 810e5b6:	f7ff ffe0 	bl	810e57a <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810e5ba:	4603      	mov	r3, r0
 810e5bc:	4618      	mov	r0, r3
 810e5be:	f7ff fd6b 	bl	810e098 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 810e5c2:	4603      	mov	r3, r0
    }
 810e5c4:	4618      	mov	r0, r3
 810e5c6:	3708      	adds	r7, #8
 810e5c8:	46bd      	mov	sp, r7
 810e5ca:	bd80      	pop	{r7, pc}

0810e5cc <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810e5cc:	b580      	push	{r7, lr}
 810e5ce:	b082      	sub	sp, #8
 810e5d0:	af00      	add	r7, sp, #0
 810e5d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810e5d4:	6878      	ldr	r0, [r7, #4]
 810e5d6:	f7ff f97e 	bl	810d8d6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810e5da:	4603      	mov	r3, r0
 810e5dc:	4618      	mov	r0, r3
 810e5de:	3708      	adds	r7, #8
 810e5e0:	46bd      	mov	sp, r7
 810e5e2:	bd80      	pop	{r7, pc}

0810e5e4 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810e5e4:	b580      	push	{r7, lr}
 810e5e6:	b082      	sub	sp, #8
 810e5e8:	af00      	add	r7, sp, #0
 810e5ea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810e5ec:	687b      	ldr	r3, [r7, #4]
 810e5ee:	4618      	mov	r0, r3
 810e5f0:	f000 f805 	bl	810e5fe <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 810e5f4:	4603      	mov	r3, r0
 810e5f6:	4618      	mov	r0, r3
 810e5f8:	3708      	adds	r7, #8
 810e5fa:	46bd      	mov	sp, r7
 810e5fc:	bd80      	pop	{r7, pc}

0810e5fe <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810e5fe:	b580      	push	{r7, lr}
 810e600:	b082      	sub	sp, #8
 810e602:	af00      	add	r7, sp, #0
 810e604:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810e606:	6878      	ldr	r0, [r7, #4]
 810e608:	f7ff fd08 	bl	810e01c <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 810e60c:	4603      	mov	r3, r0
 810e60e:	4618      	mov	r0, r3
 810e610:	3708      	adds	r7, #8
 810e612:	46bd      	mov	sp, r7
 810e614:	bd80      	pop	{r7, pc}

0810e616 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810e616:	b580      	push	{r7, lr}
 810e618:	b082      	sub	sp, #8
 810e61a:	af00      	add	r7, sp, #0
 810e61c:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810e61e:	6878      	ldr	r0, [r7, #4]
 810e620:	f7ff ffe0 	bl	810e5e4 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810e624:	4603      	mov	r3, r0
 810e626:	4618      	mov	r0, r3
 810e628:	f7ff fd11 	bl	810e04e <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 810e62c:	4603      	mov	r3, r0
    }
 810e62e:	4618      	mov	r0, r3
 810e630:	3708      	adds	r7, #8
 810e632:	46bd      	mov	sp, r7
 810e634:	bd80      	pop	{r7, pc}

0810e636 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 810e636:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e638:	b087      	sub	sp, #28
 810e63a:	af00      	add	r7, sp, #0
 810e63c:	7538      	strb	r0, [r7, #20]
 810e63e:	6139      	str	r1, [r7, #16]
 810e640:	60fa      	str	r2, [r7, #12]
 810e642:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 810e644:	68f8      	ldr	r0, [r7, #12]
 810e646:	f7ff fef8 	bl	810e43a <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810e64a:	4603      	mov	r3, r0
 810e64c:	681b      	ldr	r3, [r3, #0]
 810e64e:	693a      	ldr	r2, [r7, #16]
 810e650:	6852      	ldr	r2, [r2, #4]
 810e652:	1052      	asrs	r2, r2, #1
 810e654:	189d      	adds	r5, r3, r2
 810e656:	693a      	ldr	r2, [r7, #16]
 810e658:	6852      	ldr	r2, [r2, #4]
 810e65a:	f002 0201 	and.w	r2, r2, #1
 810e65e:	2a00      	cmp	r2, #0
 810e660:	d102      	bne.n	810e668 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 810e662:	693b      	ldr	r3, [r7, #16]
 810e664:	681c      	ldr	r4, [r3, #0]
 810e666:	e008      	b.n	810e67a <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 810e668:	693a      	ldr	r2, [r7, #16]
 810e66a:	6852      	ldr	r2, [r2, #4]
 810e66c:	1052      	asrs	r2, r2, #1
 810e66e:	4413      	add	r3, r2
 810e670:	681b      	ldr	r3, [r3, #0]
 810e672:	693a      	ldr	r2, [r7, #16]
 810e674:	6812      	ldr	r2, [r2, #0]
 810e676:	4413      	add	r3, r2
 810e678:	681c      	ldr	r4, [r3, #0]
 810e67a:	68b8      	ldr	r0, [r7, #8]
 810e67c:	f7ff fb4d 	bl	810dd1a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810e680:	4603      	mov	r3, r0
 810e682:	781e      	ldrb	r6, [r3, #0]
 810e684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810e686:	f7ff fb53 	bl	810dd30 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810e68a:	4603      	mov	r3, r0
 810e68c:	681b      	ldr	r3, [r3, #0]
 810e68e:	607b      	str	r3, [r7, #4]
 810e690:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810e692:	f7ff fb58 	bl	810dd46 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810e696:	4603      	mov	r3, r0
 810e698:	681b      	ldr	r3, [r3, #0]
 810e69a:	687a      	ldr	r2, [r7, #4]
 810e69c:	4631      	mov	r1, r6
 810e69e:	4628      	mov	r0, r5
 810e6a0:	47a0      	blx	r4
 810e6a2:	bf00      	nop
    }
 810e6a4:	371c      	adds	r7, #28
 810e6a6:	46bd      	mov	sp, r7
 810e6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810e6aa <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 810e6aa:	b580      	push	{r7, lr}
 810e6ac:	b082      	sub	sp, #8
 810e6ae:	af00      	add	r7, sp, #0
 810e6b0:	6078      	str	r0, [r7, #4]
 810e6b2:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 810e6b4:	6839      	ldr	r1, [r7, #0]
 810e6b6:	6878      	ldr	r0, [r7, #4]
 810e6b8:	f000 f811 	bl	810e6de <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 810e6bc:	687b      	ldr	r3, [r7, #4]
 810e6be:	4618      	mov	r0, r3
 810e6c0:	3708      	adds	r7, #8
 810e6c2:	46bd      	mov	sp, r7
 810e6c4:	bd80      	pop	{r7, pc}

0810e6c6 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810e6c6:	b480      	push	{r7}
 810e6c8:	b083      	sub	sp, #12
 810e6ca:	af00      	add	r7, sp, #0
 810e6cc:	6078      	str	r0, [r7, #4]
 810e6ce:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810e6d0:	687b      	ldr	r3, [r7, #4]
 810e6d2:	4618      	mov	r0, r3
 810e6d4:	370c      	adds	r7, #12
 810e6d6:	46bd      	mov	sp, r7
 810e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6dc:	4770      	bx	lr

0810e6de <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810e6de:	b480      	push	{r7}
 810e6e0:	b083      	sub	sp, #12
 810e6e2:	af00      	add	r7, sp, #0
 810e6e4:	6078      	str	r0, [r7, #4]
 810e6e6:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810e6e8:	687b      	ldr	r3, [r7, #4]
 810e6ea:	4618      	mov	r0, r3
 810e6ec:	370c      	adds	r7, #12
 810e6ee:	46bd      	mov	sp, r7
 810e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6f4:	4770      	bx	lr
	...

0810e6f8 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 810e6f8:	b580      	push	{r7, lr}
 810e6fa:	b082      	sub	sp, #8
 810e6fc:	af00      	add	r7, sp, #0
 810e6fe:	6078      	str	r0, [r7, #4]
 810e700:	4a05      	ldr	r2, [pc, #20]	; (810e718 <_ZN5IOBusD1Ev+0x20>)
 810e702:	687b      	ldr	r3, [r7, #4]
 810e704:	601a      	str	r2, [r3, #0]
 810e706:	687b      	ldr	r3, [r7, #4]
 810e708:	4618      	mov	r0, r3
 810e70a:	f7fe ff3b 	bl	810d584 <_ZN10MessageBusD1Ev>
 810e70e:	687b      	ldr	r3, [r7, #4]
 810e710:	4618      	mov	r0, r3
 810e712:	3708      	adds	r7, #8
 810e714:	46bd      	mov	sp, r7
 810e716:	bd80      	pop	{r7, pc}
 810e718:	081140b4 	.word	0x081140b4

0810e71c <_ZN5IOBusD0Ev>:
 810e71c:	b580      	push	{r7, lr}
 810e71e:	b082      	sub	sp, #8
 810e720:	af00      	add	r7, sp, #0
 810e722:	6078      	str	r0, [r7, #4]
 810e724:	6878      	ldr	r0, [r7, #4]
 810e726:	f7ff ffe7 	bl	810e6f8 <_ZN5IOBusD1Ev>
 810e72a:	f644 0114 	movw	r1, #18452	; 0x4814
 810e72e:	6878      	ldr	r0, [r7, #4]
 810e730:	f002 f863 	bl	81107fa <_ZdlPvj>
 810e734:	687b      	ldr	r3, [r7, #4]
 810e736:	4618      	mov	r0, r3
 810e738:	3708      	adds	r7, #8
 810e73a:	46bd      	mov	sp, r7
 810e73c:	bd80      	pop	{r7, pc}

0810e73e <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 810e73e:	b480      	push	{r7}
 810e740:	b083      	sub	sp, #12
 810e742:	af00      	add	r7, sp, #0
 810e744:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 810e746:	687b      	ldr	r3, [r7, #4]
 810e748:	685b      	ldr	r3, [r3, #4]
 810e74a:	781b      	ldrb	r3, [r3, #0]
 810e74c:	2b2a      	cmp	r3, #42	; 0x2a
 810e74e:	d103      	bne.n	810e758 <_ZNKSt9type_info4nameEv+0x1a>
 810e750:	687b      	ldr	r3, [r7, #4]
 810e752:	685b      	ldr	r3, [r3, #4]
 810e754:	3301      	adds	r3, #1
 810e756:	e001      	b.n	810e75c <_ZNKSt9type_info4nameEv+0x1e>
 810e758:	687b      	ldr	r3, [r7, #4]
 810e75a:	685b      	ldr	r3, [r3, #4]
 810e75c:	4618      	mov	r0, r3
 810e75e:	370c      	adds	r7, #12
 810e760:	46bd      	mov	sp, r7
 810e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e766:	4770      	bx	lr

0810e768 <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 810e768:	b590      	push	{r4, r7, lr}
 810e76a:	b083      	sub	sp, #12
 810e76c:	af00      	add	r7, sp, #0
 810e76e:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 810e770:	6878      	ldr	r0, [r7, #4]
 810e772:	f7ff ffe4 	bl	810e73e <_ZNKSt9type_info4nameEv>
 810e776:	4604      	mov	r4, r0
 810e778:	6878      	ldr	r0, [r7, #4]
 810e77a:	f7ff ffe0 	bl	810e73e <_ZNKSt9type_info4nameEv>
 810e77e:	4603      	mov	r3, r0
 810e780:	4618      	mov	r0, r3
 810e782:	f7f1 fdb7 	bl	81002f4 <strlen>
 810e786:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
 810e788:	4a04      	ldr	r2, [pc, #16]	; (810e79c <_ZNKSt9type_info9hash_codeEv+0x34>)
 810e78a:	4619      	mov	r1, r3
 810e78c:	4620      	mov	r0, r4
 810e78e:	f002 f837 	bl	8110800 <_ZSt11_Hash_bytesPKvjj>
 810e792:	4603      	mov	r3, r0
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 810e794:	4618      	mov	r0, r3
 810e796:	370c      	adds	r7, #12
 810e798:	46bd      	mov	sp, r7
 810e79a:	bd90      	pop	{r4, r7, pc}
 810e79c:	c70f6907 	.word	0xc70f6907

0810e7a0 <_ZN10MessageBus6defineI10PingPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810e7a0:	b580      	push	{r7, lr}
 810e7a2:	b086      	sub	sp, #24
 810e7a4:	af00      	add	r7, sp, #0
 810e7a6:	6078      	str	r0, [r7, #4]
 810e7a8:	460b      	mov	r3, r1
 810e7aa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810e7ac:	2308      	movs	r3, #8
 810e7ae:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810e7b0:	4829      	ldr	r0, [pc, #164]	; (810e858 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 810e7b2:	f7ff ffd9 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810e7b6:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 810e7b8:	68fb      	ldr	r3, [r7, #12]
 810e7ba:	b2db      	uxtb	r3, r3
 810e7bc:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810e7be:	78fb      	ldrb	r3, [r7, #3]
 810e7c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e7c4:	687a      	ldr	r2, [r7, #4]
 810e7c6:	00db      	lsls	r3, r3, #3
 810e7c8:	4413      	add	r3, r2
 810e7ca:	689b      	ldr	r3, [r3, #8]
 810e7cc:	2b00      	cmp	r3, #0
 810e7ce:	d001      	beq.n	810e7d4 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 810e7d0:	2300      	movs	r3, #0
 810e7d2:	e03c      	b.n	810e84e <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 810e7d4:	693b      	ldr	r3, [r7, #16]
 810e7d6:	2bff      	cmp	r3, #255	; 0xff
 810e7d8:	d901      	bls.n	810e7de <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 810e7da:	2300      	movs	r3, #0
 810e7dc:	e037      	b.n	810e84e <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 810e7de:	687a      	ldr	r2, [r7, #4]
 810e7e0:	697b      	ldr	r3, [r7, #20]
 810e7e2:	3380      	adds	r3, #128	; 0x80
 810e7e4:	009b      	lsls	r3, r3, #2
 810e7e6:	4413      	add	r3, r2
 810e7e8:	685b      	ldr	r3, [r3, #4]
 810e7ea:	2b00      	cmp	r3, #0
 810e7ec:	d015      	beq.n	810e81a <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810e7ee:	687a      	ldr	r2, [r7, #4]
 810e7f0:	697b      	ldr	r3, [r7, #20]
 810e7f2:	3380      	adds	r3, #128	; 0x80
 810e7f4:	009b      	lsls	r3, r3, #2
 810e7f6:	4413      	add	r3, r2
 810e7f8:	685b      	ldr	r3, [r3, #4]
 810e7fa:	685b      	ldr	r3, [r3, #4]
 810e7fc:	68fa      	ldr	r2, [r7, #12]
 810e7fe:	429a      	cmp	r2, r3
 810e800:	d101      	bne.n	810e806 <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 810e802:	2300      	movs	r3, #0
 810e804:	e023      	b.n	810e84e <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		}

		insertion_point++;
 810e806:	697b      	ldr	r3, [r7, #20]
 810e808:	3301      	adds	r3, #1
 810e80a:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 810e80c:	697b      	ldr	r3, [r7, #20]
 810e80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e812:	d1e4      	bne.n	810e7de <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 810e814:	2300      	movs	r3, #0
 810e816:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810e818:	e7e1      	b.n	810e7de <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810e81a:	78fb      	ldrb	r3, [r7, #3]
 810e81c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e820:	00db      	lsls	r3, r3, #3
 810e822:	687a      	ldr	r2, [r7, #4]
 810e824:	4413      	add	r3, r2
 810e826:	3304      	adds	r3, #4
 810e828:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 810e82a:	68bb      	ldr	r3, [r7, #8]
 810e82c:	78fa      	ldrb	r2, [r7, #3]
 810e82e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810e830:	693b      	ldr	r3, [r7, #16]
 810e832:	b2da      	uxtb	r2, r3
 810e834:	68bb      	ldr	r3, [r7, #8]
 810e836:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810e838:	68bb      	ldr	r3, [r7, #8]
 810e83a:	68fa      	ldr	r2, [r7, #12]
 810e83c:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 810e83e:	687a      	ldr	r2, [r7, #4]
 810e840:	697b      	ldr	r3, [r7, #20]
 810e842:	3380      	adds	r3, #128	; 0x80
 810e844:	009b      	lsls	r3, r3, #2
 810e846:	4413      	add	r3, r2
 810e848:	68ba      	ldr	r2, [r7, #8]
 810e84a:	605a      	str	r2, [r3, #4]

	return true;
 810e84c:	2301      	movs	r3, #1
}
 810e84e:	4618      	mov	r0, r3
 810e850:	3718      	adds	r7, #24
 810e852:	46bd      	mov	sp, r7
 810e854:	bd80      	pop	{r7, pc}
 810e856:	bf00      	nop
 810e858:	08114330 	.word	0x08114330

0810e85c <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810e85c:	b580      	push	{r7, lr}
 810e85e:	b086      	sub	sp, #24
 810e860:	af00      	add	r7, sp, #0
 810e862:	6078      	str	r0, [r7, #4]
 810e864:	460b      	mov	r3, r1
 810e866:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810e868:	2308      	movs	r3, #8
 810e86a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810e86c:	4829      	ldr	r0, [pc, #164]	; (810e914 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 810e86e:	f7ff ff7b 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810e872:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810e874:	68fb      	ldr	r3, [r7, #12]
 810e876:	b2db      	uxtb	r3, r3
 810e878:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810e87a:	78fb      	ldrb	r3, [r7, #3]
 810e87c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e880:	687a      	ldr	r2, [r7, #4]
 810e882:	00db      	lsls	r3, r3, #3
 810e884:	4413      	add	r3, r2
 810e886:	689b      	ldr	r3, [r3, #8]
 810e888:	2b00      	cmp	r3, #0
 810e88a:	d001      	beq.n	810e890 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 810e88c:	2300      	movs	r3, #0
 810e88e:	e03c      	b.n	810e90a <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810e890:	693b      	ldr	r3, [r7, #16]
 810e892:	2bff      	cmp	r3, #255	; 0xff
 810e894:	d901      	bls.n	810e89a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 810e896:	2300      	movs	r3, #0
 810e898:	e037      	b.n	810e90a <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810e89a:	687a      	ldr	r2, [r7, #4]
 810e89c:	697b      	ldr	r3, [r7, #20]
 810e89e:	3380      	adds	r3, #128	; 0x80
 810e8a0:	009b      	lsls	r3, r3, #2
 810e8a2:	4413      	add	r3, r2
 810e8a4:	685b      	ldr	r3, [r3, #4]
 810e8a6:	2b00      	cmp	r3, #0
 810e8a8:	d015      	beq.n	810e8d6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810e8aa:	687a      	ldr	r2, [r7, #4]
 810e8ac:	697b      	ldr	r3, [r7, #20]
 810e8ae:	3380      	adds	r3, #128	; 0x80
 810e8b0:	009b      	lsls	r3, r3, #2
 810e8b2:	4413      	add	r3, r2
 810e8b4:	685b      	ldr	r3, [r3, #4]
 810e8b6:	685b      	ldr	r3, [r3, #4]
 810e8b8:	68fa      	ldr	r2, [r7, #12]
 810e8ba:	429a      	cmp	r2, r3
 810e8bc:	d101      	bne.n	810e8c2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 810e8be:	2300      	movs	r3, #0
 810e8c0:	e023      	b.n	810e90a <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 810e8c2:	697b      	ldr	r3, [r7, #20]
 810e8c4:	3301      	adds	r3, #1
 810e8c6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810e8c8:	697b      	ldr	r3, [r7, #20]
 810e8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e8ce:	d1e4      	bne.n	810e89a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 810e8d0:	2300      	movs	r3, #0
 810e8d2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810e8d4:	e7e1      	b.n	810e89a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810e8d6:	78fb      	ldrb	r3, [r7, #3]
 810e8d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e8dc:	00db      	lsls	r3, r3, #3
 810e8de:	687a      	ldr	r2, [r7, #4]
 810e8e0:	4413      	add	r3, r2
 810e8e2:	3304      	adds	r3, #4
 810e8e4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810e8e6:	68bb      	ldr	r3, [r7, #8]
 810e8e8:	78fa      	ldrb	r2, [r7, #3]
 810e8ea:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810e8ec:	693b      	ldr	r3, [r7, #16]
 810e8ee:	b2da      	uxtb	r2, r3
 810e8f0:	68bb      	ldr	r3, [r7, #8]
 810e8f2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810e8f4:	68bb      	ldr	r3, [r7, #8]
 810e8f6:	68fa      	ldr	r2, [r7, #12]
 810e8f8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810e8fa:	687a      	ldr	r2, [r7, #4]
 810e8fc:	697b      	ldr	r3, [r7, #20]
 810e8fe:	3380      	adds	r3, #128	; 0x80
 810e900:	009b      	lsls	r3, r3, #2
 810e902:	4413      	add	r3, r2
 810e904:	68ba      	ldr	r2, [r7, #8]
 810e906:	605a      	str	r2, [r3, #4]
	return true;
 810e908:	2301      	movs	r3, #1
}
 810e90a:	4618      	mov	r0, r3
 810e90c:	3718      	adds	r7, #24
 810e90e:	46bd      	mov	sp, r7
 810e910:	bd80      	pop	{r7, pc}
 810e912:	bf00      	nop
 810e914:	08114318 	.word	0x08114318

0810e918 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810e918:	b580      	push	{r7, lr}
 810e91a:	b086      	sub	sp, #24
 810e91c:	af00      	add	r7, sp, #0
 810e91e:	6078      	str	r0, [r7, #4]
 810e920:	460b      	mov	r3, r1
 810e922:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810e924:	2308      	movs	r3, #8
 810e926:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810e928:	4829      	ldr	r0, [pc, #164]	; (810e9d0 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 810e92a:	f7ff ff1d 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810e92e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810e930:	68fb      	ldr	r3, [r7, #12]
 810e932:	b2db      	uxtb	r3, r3
 810e934:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810e936:	78fb      	ldrb	r3, [r7, #3]
 810e938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e93c:	687a      	ldr	r2, [r7, #4]
 810e93e:	00db      	lsls	r3, r3, #3
 810e940:	4413      	add	r3, r2
 810e942:	689b      	ldr	r3, [r3, #8]
 810e944:	2b00      	cmp	r3, #0
 810e946:	d001      	beq.n	810e94c <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 810e948:	2300      	movs	r3, #0
 810e94a:	e03c      	b.n	810e9c6 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810e94c:	693b      	ldr	r3, [r7, #16]
 810e94e:	2bff      	cmp	r3, #255	; 0xff
 810e950:	d901      	bls.n	810e956 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 810e952:	2300      	movs	r3, #0
 810e954:	e037      	b.n	810e9c6 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810e956:	687a      	ldr	r2, [r7, #4]
 810e958:	697b      	ldr	r3, [r7, #20]
 810e95a:	3380      	adds	r3, #128	; 0x80
 810e95c:	009b      	lsls	r3, r3, #2
 810e95e:	4413      	add	r3, r2
 810e960:	685b      	ldr	r3, [r3, #4]
 810e962:	2b00      	cmp	r3, #0
 810e964:	d015      	beq.n	810e992 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810e966:	687a      	ldr	r2, [r7, #4]
 810e968:	697b      	ldr	r3, [r7, #20]
 810e96a:	3380      	adds	r3, #128	; 0x80
 810e96c:	009b      	lsls	r3, r3, #2
 810e96e:	4413      	add	r3, r2
 810e970:	685b      	ldr	r3, [r3, #4]
 810e972:	685b      	ldr	r3, [r3, #4]
 810e974:	68fa      	ldr	r2, [r7, #12]
 810e976:	429a      	cmp	r2, r3
 810e978:	d101      	bne.n	810e97e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 810e97a:	2300      	movs	r3, #0
 810e97c:	e023      	b.n	810e9c6 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 810e97e:	697b      	ldr	r3, [r7, #20]
 810e980:	3301      	adds	r3, #1
 810e982:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810e984:	697b      	ldr	r3, [r7, #20]
 810e986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e98a:	d1e4      	bne.n	810e956 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 810e98c:	2300      	movs	r3, #0
 810e98e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810e990:	e7e1      	b.n	810e956 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810e992:	78fb      	ldrb	r3, [r7, #3]
 810e994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e998:	00db      	lsls	r3, r3, #3
 810e99a:	687a      	ldr	r2, [r7, #4]
 810e99c:	4413      	add	r3, r2
 810e99e:	3304      	adds	r3, #4
 810e9a0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810e9a2:	68bb      	ldr	r3, [r7, #8]
 810e9a4:	78fa      	ldrb	r2, [r7, #3]
 810e9a6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810e9a8:	693b      	ldr	r3, [r7, #16]
 810e9aa:	b2da      	uxtb	r2, r3
 810e9ac:	68bb      	ldr	r3, [r7, #8]
 810e9ae:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810e9b0:	68bb      	ldr	r3, [r7, #8]
 810e9b2:	68fa      	ldr	r2, [r7, #12]
 810e9b4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810e9b6:	687a      	ldr	r2, [r7, #4]
 810e9b8:	697b      	ldr	r3, [r7, #20]
 810e9ba:	3380      	adds	r3, #128	; 0x80
 810e9bc:	009b      	lsls	r3, r3, #2
 810e9be:	4413      	add	r3, r2
 810e9c0:	68ba      	ldr	r2, [r7, #8]
 810e9c2:	605a      	str	r2, [r3, #4]
	return true;
 810e9c4:	2301      	movs	r3, #1
}
 810e9c6:	4618      	mov	r0, r3
 810e9c8:	3718      	adds	r7, #24
 810e9ca:	46bd      	mov	sp, r7
 810e9cc:	bd80      	pop	{r7, pc}
 810e9ce:	bf00      	nop
 810e9d0:	081142fc 	.word	0x081142fc

0810e9d4 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810e9d4:	b580      	push	{r7, lr}
 810e9d6:	b086      	sub	sp, #24
 810e9d8:	af00      	add	r7, sp, #0
 810e9da:	6078      	str	r0, [r7, #4]
 810e9dc:	460b      	mov	r3, r1
 810e9de:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810e9e0:	2305      	movs	r3, #5
 810e9e2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810e9e4:	4829      	ldr	r0, [pc, #164]	; (810ea8c <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 810e9e6:	f7ff febf 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810e9ea:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810e9ec:	68fb      	ldr	r3, [r7, #12]
 810e9ee:	b2db      	uxtb	r3, r3
 810e9f0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810e9f2:	78fb      	ldrb	r3, [r7, #3]
 810e9f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e9f8:	687a      	ldr	r2, [r7, #4]
 810e9fa:	00db      	lsls	r3, r3, #3
 810e9fc:	4413      	add	r3, r2
 810e9fe:	689b      	ldr	r3, [r3, #8]
 810ea00:	2b00      	cmp	r3, #0
 810ea02:	d001      	beq.n	810ea08 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ea04:	2300      	movs	r3, #0
 810ea06:	e03c      	b.n	810ea82 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ea08:	693b      	ldr	r3, [r7, #16]
 810ea0a:	2bff      	cmp	r3, #255	; 0xff
 810ea0c:	d901      	bls.n	810ea12 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 810ea0e:	2300      	movs	r3, #0
 810ea10:	e037      	b.n	810ea82 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ea12:	687a      	ldr	r2, [r7, #4]
 810ea14:	697b      	ldr	r3, [r7, #20]
 810ea16:	3380      	adds	r3, #128	; 0x80
 810ea18:	009b      	lsls	r3, r3, #2
 810ea1a:	4413      	add	r3, r2
 810ea1c:	685b      	ldr	r3, [r3, #4]
 810ea1e:	2b00      	cmp	r3, #0
 810ea20:	d015      	beq.n	810ea4e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ea22:	687a      	ldr	r2, [r7, #4]
 810ea24:	697b      	ldr	r3, [r7, #20]
 810ea26:	3380      	adds	r3, #128	; 0x80
 810ea28:	009b      	lsls	r3, r3, #2
 810ea2a:	4413      	add	r3, r2
 810ea2c:	685b      	ldr	r3, [r3, #4]
 810ea2e:	685b      	ldr	r3, [r3, #4]
 810ea30:	68fa      	ldr	r2, [r7, #12]
 810ea32:	429a      	cmp	r2, r3
 810ea34:	d101      	bne.n	810ea3a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 810ea36:	2300      	movs	r3, #0
 810ea38:	e023      	b.n	810ea82 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 810ea3a:	697b      	ldr	r3, [r7, #20]
 810ea3c:	3301      	adds	r3, #1
 810ea3e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ea40:	697b      	ldr	r3, [r7, #20]
 810ea42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ea46:	d1e4      	bne.n	810ea12 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 810ea48:	2300      	movs	r3, #0
 810ea4a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ea4c:	e7e1      	b.n	810ea12 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ea4e:	78fb      	ldrb	r3, [r7, #3]
 810ea50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ea54:	00db      	lsls	r3, r3, #3
 810ea56:	687a      	ldr	r2, [r7, #4]
 810ea58:	4413      	add	r3, r2
 810ea5a:	3304      	adds	r3, #4
 810ea5c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ea5e:	68bb      	ldr	r3, [r7, #8]
 810ea60:	78fa      	ldrb	r2, [r7, #3]
 810ea62:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ea64:	693b      	ldr	r3, [r7, #16]
 810ea66:	b2da      	uxtb	r2, r3
 810ea68:	68bb      	ldr	r3, [r7, #8]
 810ea6a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ea6c:	68bb      	ldr	r3, [r7, #8]
 810ea6e:	68fa      	ldr	r2, [r7, #12]
 810ea70:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ea72:	687a      	ldr	r2, [r7, #4]
 810ea74:	697b      	ldr	r3, [r7, #20]
 810ea76:	3380      	adds	r3, #128	; 0x80
 810ea78:	009b      	lsls	r3, r3, #2
 810ea7a:	4413      	add	r3, r2
 810ea7c:	68ba      	ldr	r2, [r7, #8]
 810ea7e:	605a      	str	r2, [r3, #4]
	return true;
 810ea80:	2301      	movs	r3, #1
}
 810ea82:	4618      	mov	r0, r3
 810ea84:	3718      	adds	r7, #24
 810ea86:	46bd      	mov	sp, r7
 810ea88:	bd80      	pop	{r7, pc}
 810ea8a:	bf00      	nop
 810ea8c:	081142e0 	.word	0x081142e0

0810ea90 <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ea90:	b580      	push	{r7, lr}
 810ea92:	b086      	sub	sp, #24
 810ea94:	af00      	add	r7, sp, #0
 810ea96:	6078      	str	r0, [r7, #4]
 810ea98:	460b      	mov	r3, r1
 810ea9a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810ea9c:	2304      	movs	r3, #4
 810ea9e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810eaa0:	4829      	ldr	r0, [pc, #164]	; (810eb48 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 810eaa2:	f7ff fe61 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810eaa6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810eaa8:	68fb      	ldr	r3, [r7, #12]
 810eaaa:	b2db      	uxtb	r3, r3
 810eaac:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810eaae:	78fb      	ldrb	r3, [r7, #3]
 810eab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810eab4:	687a      	ldr	r2, [r7, #4]
 810eab6:	00db      	lsls	r3, r3, #3
 810eab8:	4413      	add	r3, r2
 810eaba:	689b      	ldr	r3, [r3, #8]
 810eabc:	2b00      	cmp	r3, #0
 810eabe:	d001      	beq.n	810eac4 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 810eac0:	2300      	movs	r3, #0
 810eac2:	e03c      	b.n	810eb3e <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810eac4:	693b      	ldr	r3, [r7, #16]
 810eac6:	2bff      	cmp	r3, #255	; 0xff
 810eac8:	d901      	bls.n	810eace <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 810eaca:	2300      	movs	r3, #0
 810eacc:	e037      	b.n	810eb3e <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810eace:	687a      	ldr	r2, [r7, #4]
 810ead0:	697b      	ldr	r3, [r7, #20]
 810ead2:	3380      	adds	r3, #128	; 0x80
 810ead4:	009b      	lsls	r3, r3, #2
 810ead6:	4413      	add	r3, r2
 810ead8:	685b      	ldr	r3, [r3, #4]
 810eada:	2b00      	cmp	r3, #0
 810eadc:	d015      	beq.n	810eb0a <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810eade:	687a      	ldr	r2, [r7, #4]
 810eae0:	697b      	ldr	r3, [r7, #20]
 810eae2:	3380      	adds	r3, #128	; 0x80
 810eae4:	009b      	lsls	r3, r3, #2
 810eae6:	4413      	add	r3, r2
 810eae8:	685b      	ldr	r3, [r3, #4]
 810eaea:	685b      	ldr	r3, [r3, #4]
 810eaec:	68fa      	ldr	r2, [r7, #12]
 810eaee:	429a      	cmp	r2, r3
 810eaf0:	d101      	bne.n	810eaf6 <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 810eaf2:	2300      	movs	r3, #0
 810eaf4:	e023      	b.n	810eb3e <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 810eaf6:	697b      	ldr	r3, [r7, #20]
 810eaf8:	3301      	adds	r3, #1
 810eafa:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810eafc:	697b      	ldr	r3, [r7, #20]
 810eafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810eb02:	d1e4      	bne.n	810eace <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 810eb04:	2300      	movs	r3, #0
 810eb06:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810eb08:	e7e1      	b.n	810eace <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810eb0a:	78fb      	ldrb	r3, [r7, #3]
 810eb0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810eb10:	00db      	lsls	r3, r3, #3
 810eb12:	687a      	ldr	r2, [r7, #4]
 810eb14:	4413      	add	r3, r2
 810eb16:	3304      	adds	r3, #4
 810eb18:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810eb1a:	68bb      	ldr	r3, [r7, #8]
 810eb1c:	78fa      	ldrb	r2, [r7, #3]
 810eb1e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810eb20:	693b      	ldr	r3, [r7, #16]
 810eb22:	b2da      	uxtb	r2, r3
 810eb24:	68bb      	ldr	r3, [r7, #8]
 810eb26:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810eb28:	68bb      	ldr	r3, [r7, #8]
 810eb2a:	68fa      	ldr	r2, [r7, #12]
 810eb2c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810eb2e:	687a      	ldr	r2, [r7, #4]
 810eb30:	697b      	ldr	r3, [r7, #20]
 810eb32:	3380      	adds	r3, #128	; 0x80
 810eb34:	009b      	lsls	r3, r3, #2
 810eb36:	4413      	add	r3, r2
 810eb38:	68ba      	ldr	r2, [r7, #8]
 810eb3a:	605a      	str	r2, [r3, #4]
	return true;
 810eb3c:	2301      	movs	r3, #1
}
 810eb3e:	4618      	mov	r0, r3
 810eb40:	3718      	adds	r7, #24
 810eb42:	46bd      	mov	sp, r7
 810eb44:	bd80      	pop	{r7, pc}
 810eb46:	bf00      	nop
 810eb48:	081142c8 	.word	0x081142c8

0810eb4c <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810eb4c:	b580      	push	{r7, lr}
 810eb4e:	b086      	sub	sp, #24
 810eb50:	af00      	add	r7, sp, #0
 810eb52:	6078      	str	r0, [r7, #4]
 810eb54:	460b      	mov	r3, r1
 810eb56:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810eb58:	2301      	movs	r3, #1
 810eb5a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810eb5c:	4829      	ldr	r0, [pc, #164]	; (810ec04 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 810eb5e:	f7ff fe03 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810eb62:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810eb64:	68fb      	ldr	r3, [r7, #12]
 810eb66:	b2db      	uxtb	r3, r3
 810eb68:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810eb6a:	78fb      	ldrb	r3, [r7, #3]
 810eb6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810eb70:	687a      	ldr	r2, [r7, #4]
 810eb72:	00db      	lsls	r3, r3, #3
 810eb74:	4413      	add	r3, r2
 810eb76:	689b      	ldr	r3, [r3, #8]
 810eb78:	2b00      	cmp	r3, #0
 810eb7a:	d001      	beq.n	810eb80 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 810eb7c:	2300      	movs	r3, #0
 810eb7e:	e03c      	b.n	810ebfa <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810eb80:	693b      	ldr	r3, [r7, #16]
 810eb82:	2bff      	cmp	r3, #255	; 0xff
 810eb84:	d901      	bls.n	810eb8a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 810eb86:	2300      	movs	r3, #0
 810eb88:	e037      	b.n	810ebfa <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810eb8a:	687a      	ldr	r2, [r7, #4]
 810eb8c:	697b      	ldr	r3, [r7, #20]
 810eb8e:	3380      	adds	r3, #128	; 0x80
 810eb90:	009b      	lsls	r3, r3, #2
 810eb92:	4413      	add	r3, r2
 810eb94:	685b      	ldr	r3, [r3, #4]
 810eb96:	2b00      	cmp	r3, #0
 810eb98:	d015      	beq.n	810ebc6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810eb9a:	687a      	ldr	r2, [r7, #4]
 810eb9c:	697b      	ldr	r3, [r7, #20]
 810eb9e:	3380      	adds	r3, #128	; 0x80
 810eba0:	009b      	lsls	r3, r3, #2
 810eba2:	4413      	add	r3, r2
 810eba4:	685b      	ldr	r3, [r3, #4]
 810eba6:	685b      	ldr	r3, [r3, #4]
 810eba8:	68fa      	ldr	r2, [r7, #12]
 810ebaa:	429a      	cmp	r2, r3
 810ebac:	d101      	bne.n	810ebb2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 810ebae:	2300      	movs	r3, #0
 810ebb0:	e023      	b.n	810ebfa <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 810ebb2:	697b      	ldr	r3, [r7, #20]
 810ebb4:	3301      	adds	r3, #1
 810ebb6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ebb8:	697b      	ldr	r3, [r7, #20]
 810ebba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ebbe:	d1e4      	bne.n	810eb8a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 810ebc0:	2300      	movs	r3, #0
 810ebc2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ebc4:	e7e1      	b.n	810eb8a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ebc6:	78fb      	ldrb	r3, [r7, #3]
 810ebc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ebcc:	00db      	lsls	r3, r3, #3
 810ebce:	687a      	ldr	r2, [r7, #4]
 810ebd0:	4413      	add	r3, r2
 810ebd2:	3304      	adds	r3, #4
 810ebd4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ebd6:	68bb      	ldr	r3, [r7, #8]
 810ebd8:	78fa      	ldrb	r2, [r7, #3]
 810ebda:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ebdc:	693b      	ldr	r3, [r7, #16]
 810ebde:	b2da      	uxtb	r2, r3
 810ebe0:	68bb      	ldr	r3, [r7, #8]
 810ebe2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ebe4:	68bb      	ldr	r3, [r7, #8]
 810ebe6:	68fa      	ldr	r2, [r7, #12]
 810ebe8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ebea:	687a      	ldr	r2, [r7, #4]
 810ebec:	697b      	ldr	r3, [r7, #20]
 810ebee:	3380      	adds	r3, #128	; 0x80
 810ebf0:	009b      	lsls	r3, r3, #2
 810ebf2:	4413      	add	r3, r2
 810ebf4:	68ba      	ldr	r2, [r7, #8]
 810ebf6:	605a      	str	r2, [r3, #4]
	return true;
 810ebf8:	2301      	movs	r3, #1
}
 810ebfa:	4618      	mov	r0, r3
 810ebfc:	3718      	adds	r7, #24
 810ebfe:	46bd      	mov	sp, r7
 810ec00:	bd80      	pop	{r7, pc}
 810ec02:	bf00      	nop
 810ec04:	081142b0 	.word	0x081142b0

0810ec08 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ec08:	b580      	push	{r7, lr}
 810ec0a:	b086      	sub	sp, #24
 810ec0c:	af00      	add	r7, sp, #0
 810ec0e:	6078      	str	r0, [r7, #4]
 810ec10:	460b      	mov	r3, r1
 810ec12:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810ec14:	2308      	movs	r3, #8
 810ec16:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ec18:	4829      	ldr	r0, [pc, #164]	; (810ecc0 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 810ec1a:	f7ff fda5 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810ec1e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ec20:	68fb      	ldr	r3, [r7, #12]
 810ec22:	b2db      	uxtb	r3, r3
 810ec24:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ec26:	78fb      	ldrb	r3, [r7, #3]
 810ec28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ec2c:	687a      	ldr	r2, [r7, #4]
 810ec2e:	00db      	lsls	r3, r3, #3
 810ec30:	4413      	add	r3, r2
 810ec32:	689b      	ldr	r3, [r3, #8]
 810ec34:	2b00      	cmp	r3, #0
 810ec36:	d001      	beq.n	810ec3c <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ec38:	2300      	movs	r3, #0
 810ec3a:	e03c      	b.n	810ecb6 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ec3c:	693b      	ldr	r3, [r7, #16]
 810ec3e:	2bff      	cmp	r3, #255	; 0xff
 810ec40:	d901      	bls.n	810ec46 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		return false; // Packet size too large
 810ec42:	2300      	movs	r3, #0
 810ec44:	e037      	b.n	810ecb6 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ec46:	687a      	ldr	r2, [r7, #4]
 810ec48:	697b      	ldr	r3, [r7, #20]
 810ec4a:	3380      	adds	r3, #128	; 0x80
 810ec4c:	009b      	lsls	r3, r3, #2
 810ec4e:	4413      	add	r3, r2
 810ec50:	685b      	ldr	r3, [r3, #4]
 810ec52:	2b00      	cmp	r3, #0
 810ec54:	d015      	beq.n	810ec82 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ec56:	687a      	ldr	r2, [r7, #4]
 810ec58:	697b      	ldr	r3, [r7, #20]
 810ec5a:	3380      	adds	r3, #128	; 0x80
 810ec5c:	009b      	lsls	r3, r3, #2
 810ec5e:	4413      	add	r3, r2
 810ec60:	685b      	ldr	r3, [r3, #4]
 810ec62:	685b      	ldr	r3, [r3, #4]
 810ec64:	68fa      	ldr	r2, [r7, #12]
 810ec66:	429a      	cmp	r2, r3
 810ec68:	d101      	bne.n	810ec6e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
			return false; // Packet type already defined
 810ec6a:	2300      	movs	r3, #0
 810ec6c:	e023      	b.n	810ecb6 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
		insertion_point++;
 810ec6e:	697b      	ldr	r3, [r7, #20]
 810ec70:	3301      	adds	r3, #1
 810ec72:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ec74:	697b      	ldr	r3, [r7, #20]
 810ec76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ec7a:	d1e4      	bne.n	810ec46 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
			insertion_point = 0;
 810ec7c:	2300      	movs	r3, #0
 810ec7e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ec80:	e7e1      	b.n	810ec46 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ec82:	78fb      	ldrb	r3, [r7, #3]
 810ec84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ec88:	00db      	lsls	r3, r3, #3
 810ec8a:	687a      	ldr	r2, [r7, #4]
 810ec8c:	4413      	add	r3, r2
 810ec8e:	3304      	adds	r3, #4
 810ec90:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ec92:	68bb      	ldr	r3, [r7, #8]
 810ec94:	78fa      	ldrb	r2, [r7, #3]
 810ec96:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ec98:	693b      	ldr	r3, [r7, #16]
 810ec9a:	b2da      	uxtb	r2, r3
 810ec9c:	68bb      	ldr	r3, [r7, #8]
 810ec9e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810eca0:	68bb      	ldr	r3, [r7, #8]
 810eca2:	68fa      	ldr	r2, [r7, #12]
 810eca4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810eca6:	687a      	ldr	r2, [r7, #4]
 810eca8:	697b      	ldr	r3, [r7, #20]
 810ecaa:	3380      	adds	r3, #128	; 0x80
 810ecac:	009b      	lsls	r3, r3, #2
 810ecae:	4413      	add	r3, r2
 810ecb0:	68ba      	ldr	r2, [r7, #8]
 810ecb2:	605a      	str	r2, [r3, #4]
	return true;
 810ecb4:	2301      	movs	r3, #1
}
 810ecb6:	4618      	mov	r0, r3
 810ecb8:	3718      	adds	r7, #24
 810ecba:	46bd      	mov	sp, r7
 810ecbc:	bd80      	pop	{r7, pc}
 810ecbe:	bf00      	nop
 810ecc0:	0811428c 	.word	0x0811428c

0810ecc4 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_>:
}

/*
 * Sends the given message using the implemented transmission protocol.
 */
template<typename T> bool MessageBus::send(T *message) {
 810ecc4:	b580      	push	{r7, lr}
 810ecc6:	b084      	sub	sp, #16
 810ecc8:	af00      	add	r7, sp, #0
 810ecca:	6078      	str	r0, [r7, #4]
 810eccc:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810ecce:	4809      	ldr	r0, [pc, #36]	; (810ecf4 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_+0x30>)
 810ecd0:	f7ff fd4a 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810ecd4:	60f8      	str	r0, [r7, #12]

	PacketDefinition* def = retrieve(hash);
 810ecd6:	68f9      	ldr	r1, [r7, #12]
 810ecd8:	6878      	ldr	r0, [r7, #4]
 810ecda:	f000 fb55 	bl	810f388 <_ZN10MessageBus8retrieveEj>
 810ecde:	60b8      	str	r0, [r7, #8]

	return send(def, (uint8_t*) message);
 810ece0:	683a      	ldr	r2, [r7, #0]
 810ece2:	68b9      	ldr	r1, [r7, #8]
 810ece4:	6878      	ldr	r0, [r7, #4]
 810ece6:	f000 fa89 	bl	810f1fc <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810ecea:	4603      	mov	r3, r0
}
 810ecec:	4618      	mov	r0, r3
 810ecee:	3710      	adds	r7, #16
 810ecf0:	46bd      	mov	sp, r7
 810ecf2:	bd80      	pop	{r7, pc}
 810ecf4:	0811428c 	.word	0x0811428c

0810ecf8 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ecf8:	b580      	push	{r7, lr}
 810ecfa:	b086      	sub	sp, #24
 810ecfc:	af00      	add	r7, sp, #0
 810ecfe:	6078      	str	r0, [r7, #4]
 810ed00:	460b      	mov	r3, r1
 810ed02:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810ed04:	2324      	movs	r3, #36	; 0x24
 810ed06:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810ed08:	4829      	ldr	r0, [pc, #164]	; (810edb0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 810ed0a:	f7ff fd2d 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810ed0e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ed10:	68fb      	ldr	r3, [r7, #12]
 810ed12:	b2db      	uxtb	r3, r3
 810ed14:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ed16:	78fb      	ldrb	r3, [r7, #3]
 810ed18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ed1c:	687a      	ldr	r2, [r7, #4]
 810ed1e:	00db      	lsls	r3, r3, #3
 810ed20:	4413      	add	r3, r2
 810ed22:	689b      	ldr	r3, [r3, #8]
 810ed24:	2b00      	cmp	r3, #0
 810ed26:	d001      	beq.n	810ed2c <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ed28:	2300      	movs	r3, #0
 810ed2a:	e03c      	b.n	810eda6 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ed2c:	693b      	ldr	r3, [r7, #16]
 810ed2e:	2bff      	cmp	r3, #255	; 0xff
 810ed30:	d901      	bls.n	810ed36 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 810ed32:	2300      	movs	r3, #0
 810ed34:	e037      	b.n	810eda6 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ed36:	687a      	ldr	r2, [r7, #4]
 810ed38:	697b      	ldr	r3, [r7, #20]
 810ed3a:	3380      	adds	r3, #128	; 0x80
 810ed3c:	009b      	lsls	r3, r3, #2
 810ed3e:	4413      	add	r3, r2
 810ed40:	685b      	ldr	r3, [r3, #4]
 810ed42:	2b00      	cmp	r3, #0
 810ed44:	d015      	beq.n	810ed72 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ed46:	687a      	ldr	r2, [r7, #4]
 810ed48:	697b      	ldr	r3, [r7, #20]
 810ed4a:	3380      	adds	r3, #128	; 0x80
 810ed4c:	009b      	lsls	r3, r3, #2
 810ed4e:	4413      	add	r3, r2
 810ed50:	685b      	ldr	r3, [r3, #4]
 810ed52:	685b      	ldr	r3, [r3, #4]
 810ed54:	68fa      	ldr	r2, [r7, #12]
 810ed56:	429a      	cmp	r2, r3
 810ed58:	d101      	bne.n	810ed5e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 810ed5a:	2300      	movs	r3, #0
 810ed5c:	e023      	b.n	810eda6 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 810ed5e:	697b      	ldr	r3, [r7, #20]
 810ed60:	3301      	adds	r3, #1
 810ed62:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ed64:	697b      	ldr	r3, [r7, #20]
 810ed66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ed6a:	d1e4      	bne.n	810ed36 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 810ed6c:	2300      	movs	r3, #0
 810ed6e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ed70:	e7e1      	b.n	810ed36 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ed72:	78fb      	ldrb	r3, [r7, #3]
 810ed74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ed78:	00db      	lsls	r3, r3, #3
 810ed7a:	687a      	ldr	r2, [r7, #4]
 810ed7c:	4413      	add	r3, r2
 810ed7e:	3304      	adds	r3, #4
 810ed80:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ed82:	68bb      	ldr	r3, [r7, #8]
 810ed84:	78fa      	ldrb	r2, [r7, #3]
 810ed86:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ed88:	693b      	ldr	r3, [r7, #16]
 810ed8a:	b2da      	uxtb	r2, r3
 810ed8c:	68bb      	ldr	r3, [r7, #8]
 810ed8e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ed90:	68bb      	ldr	r3, [r7, #8]
 810ed92:	68fa      	ldr	r2, [r7, #12]
 810ed94:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ed96:	687a      	ldr	r2, [r7, #4]
 810ed98:	697b      	ldr	r3, [r7, #20]
 810ed9a:	3380      	adds	r3, #128	; 0x80
 810ed9c:	009b      	lsls	r3, r3, #2
 810ed9e:	4413      	add	r3, r2
 810eda0:	68ba      	ldr	r2, [r7, #8]
 810eda2:	605a      	str	r2, [r3, #4]
	return true;
 810eda4:	2301      	movs	r3, #1
}
 810eda6:	4618      	mov	r0, r3
 810eda8:	3718      	adds	r7, #24
 810edaa:	46bd      	mov	sp, r7
 810edac:	bd80      	pop	{r7, pc}
 810edae:	bf00      	nop
 810edb0:	08114268 	.word	0x08114268

0810edb4 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810edb4:	b580      	push	{r7, lr}
 810edb6:	b084      	sub	sp, #16
 810edb8:	af00      	add	r7, sp, #0
 810edba:	6078      	str	r0, [r7, #4]
 810edbc:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810edbe:	4809      	ldr	r0, [pc, #36]	; (810ede4 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_+0x30>)
 810edc0:	f7ff fcd2 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810edc4:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810edc6:	68f9      	ldr	r1, [r7, #12]
 810edc8:	6878      	ldr	r0, [r7, #4]
 810edca:	f000 fadd 	bl	810f388 <_ZN10MessageBus8retrieveEj>
 810edce:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810edd0:	683a      	ldr	r2, [r7, #0]
 810edd2:	68b9      	ldr	r1, [r7, #8]
 810edd4:	6878      	ldr	r0, [r7, #4]
 810edd6:	f000 fa11 	bl	810f1fc <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810edda:	4603      	mov	r3, r0
}
 810eddc:	4618      	mov	r0, r3
 810edde:	3710      	adds	r7, #16
 810ede0:	46bd      	mov	sp, r7
 810ede2:	bd80      	pop	{r7, pc}
 810ede4:	08114268 	.word	0x08114268

0810ede8 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ede8:	b580      	push	{r7, lr}
 810edea:	b086      	sub	sp, #24
 810edec:	af00      	add	r7, sp, #0
 810edee:	6078      	str	r0, [r7, #4]
 810edf0:	460b      	mov	r3, r1
 810edf2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810edf4:	2304      	movs	r3, #4
 810edf6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810edf8:	4829      	ldr	r0, [pc, #164]	; (810eea0 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xb8>)
 810edfa:	f7ff fcb5 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810edfe:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ee00:	68fb      	ldr	r3, [r7, #12]
 810ee02:	b2db      	uxtb	r3, r3
 810ee04:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ee06:	78fb      	ldrb	r3, [r7, #3]
 810ee08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ee0c:	687a      	ldr	r2, [r7, #4]
 810ee0e:	00db      	lsls	r3, r3, #3
 810ee10:	4413      	add	r3, r2
 810ee12:	689b      	ldr	r3, [r3, #8]
 810ee14:	2b00      	cmp	r3, #0
 810ee16:	d001      	beq.n	810ee1c <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x34>
		return false; // Packet ID already in use
 810ee18:	2300      	movs	r3, #0
 810ee1a:	e03c      	b.n	810ee96 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ee1c:	693b      	ldr	r3, [r7, #16]
 810ee1e:	2bff      	cmp	r3, #255	; 0xff
 810ee20:	d901      	bls.n	810ee26 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
		return false; // Packet size too large
 810ee22:	2300      	movs	r3, #0
 810ee24:	e037      	b.n	810ee96 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ee26:	687a      	ldr	r2, [r7, #4]
 810ee28:	697b      	ldr	r3, [r7, #20]
 810ee2a:	3380      	adds	r3, #128	; 0x80
 810ee2c:	009b      	lsls	r3, r3, #2
 810ee2e:	4413      	add	r3, r2
 810ee30:	685b      	ldr	r3, [r3, #4]
 810ee32:	2b00      	cmp	r3, #0
 810ee34:	d015      	beq.n	810ee62 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ee36:	687a      	ldr	r2, [r7, #4]
 810ee38:	697b      	ldr	r3, [r7, #20]
 810ee3a:	3380      	adds	r3, #128	; 0x80
 810ee3c:	009b      	lsls	r3, r3, #2
 810ee3e:	4413      	add	r3, r2
 810ee40:	685b      	ldr	r3, [r3, #4]
 810ee42:	685b      	ldr	r3, [r3, #4]
 810ee44:	68fa      	ldr	r2, [r7, #12]
 810ee46:	429a      	cmp	r2, r3
 810ee48:	d101      	bne.n	810ee4e <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x66>
			return false; // Packet type already defined
 810ee4a:	2300      	movs	r3, #0
 810ee4c:	e023      	b.n	810ee96 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
		insertion_point++;
 810ee4e:	697b      	ldr	r3, [r7, #20]
 810ee50:	3301      	adds	r3, #1
 810ee52:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ee54:	697b      	ldr	r3, [r7, #20]
 810ee56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ee5a:	d1e4      	bne.n	810ee26 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
			insertion_point = 0;
 810ee5c:	2300      	movs	r3, #0
 810ee5e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ee60:	e7e1      	b.n	810ee26 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ee62:	78fb      	ldrb	r3, [r7, #3]
 810ee64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ee68:	00db      	lsls	r3, r3, #3
 810ee6a:	687a      	ldr	r2, [r7, #4]
 810ee6c:	4413      	add	r3, r2
 810ee6e:	3304      	adds	r3, #4
 810ee70:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ee72:	68bb      	ldr	r3, [r7, #8]
 810ee74:	78fa      	ldrb	r2, [r7, #3]
 810ee76:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ee78:	693b      	ldr	r3, [r7, #16]
 810ee7a:	b2da      	uxtb	r2, r3
 810ee7c:	68bb      	ldr	r3, [r7, #8]
 810ee7e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ee80:	68bb      	ldr	r3, [r7, #8]
 810ee82:	68fa      	ldr	r2, [r7, #12]
 810ee84:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ee86:	687a      	ldr	r2, [r7, #4]
 810ee88:	697b      	ldr	r3, [r7, #20]
 810ee8a:	3380      	adds	r3, #128	; 0x80
 810ee8c:	009b      	lsls	r3, r3, #2
 810ee8e:	4413      	add	r3, r2
 810ee90:	68ba      	ldr	r2, [r7, #8]
 810ee92:	605a      	str	r2, [r3, #4]
	return true;
 810ee94:	2301      	movs	r3, #1
}
 810ee96:	4618      	mov	r0, r3
 810ee98:	3718      	adds	r7, #24
 810ee9a:	46bd      	mov	sp, r7
 810ee9c:	bd80      	pop	{r7, pc}
 810ee9e:	bf00      	nop
 810eea0:	08114244 	.word	0x08114244

0810eea4 <_ZN10MessageBus4sendI22Handling_GripperPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810eea4:	b580      	push	{r7, lr}
 810eea6:	b084      	sub	sp, #16
 810eea8:	af00      	add	r7, sp, #0
 810eeaa:	6078      	str	r0, [r7, #4]
 810eeac:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810eeae:	4809      	ldr	r0, [pc, #36]	; (810eed4 <_ZN10MessageBus4sendI22Handling_GripperPacketEEbPT_+0x30>)
 810eeb0:	f7ff fc5a 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810eeb4:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810eeb6:	68f9      	ldr	r1, [r7, #12]
 810eeb8:	6878      	ldr	r0, [r7, #4]
 810eeba:	f000 fa65 	bl	810f388 <_ZN10MessageBus8retrieveEj>
 810eebe:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810eec0:	683a      	ldr	r2, [r7, #0]
 810eec2:	68b9      	ldr	r1, [r7, #8]
 810eec4:	6878      	ldr	r0, [r7, #4]
 810eec6:	f000 f999 	bl	810f1fc <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810eeca:	4603      	mov	r3, r0
}
 810eecc:	4618      	mov	r0, r3
 810eece:	3710      	adds	r7, #16
 810eed0:	46bd      	mov	sp, r7
 810eed2:	bd80      	pop	{r7, pc}
 810eed4:	08114244 	.word	0x08114244

0810eed8 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810eed8:	b580      	push	{r7, lr}
 810eeda:	b086      	sub	sp, #24
 810eedc:	af00      	add	r7, sp, #0
 810eede:	6078      	str	r0, [r7, #4]
 810eee0:	460b      	mov	r3, r1
 810eee2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810eee4:	2310      	movs	r3, #16
 810eee6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810eee8:	4829      	ldr	r0, [pc, #164]	; (810ef90 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 810eeea:	f7ff fc3d 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810eeee:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810eef0:	68fb      	ldr	r3, [r7, #12]
 810eef2:	b2db      	uxtb	r3, r3
 810eef4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810eef6:	78fb      	ldrb	r3, [r7, #3]
 810eef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810eefc:	687a      	ldr	r2, [r7, #4]
 810eefe:	00db      	lsls	r3, r3, #3
 810ef00:	4413      	add	r3, r2
 810ef02:	689b      	ldr	r3, [r3, #8]
 810ef04:	2b00      	cmp	r3, #0
 810ef06:	d001      	beq.n	810ef0c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 810ef08:	2300      	movs	r3, #0
 810ef0a:	e03c      	b.n	810ef86 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810ef0c:	693b      	ldr	r3, [r7, #16]
 810ef0e:	2bff      	cmp	r3, #255	; 0xff
 810ef10:	d901      	bls.n	810ef16 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 810ef12:	2300      	movs	r3, #0
 810ef14:	e037      	b.n	810ef86 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810ef16:	687a      	ldr	r2, [r7, #4]
 810ef18:	697b      	ldr	r3, [r7, #20]
 810ef1a:	3380      	adds	r3, #128	; 0x80
 810ef1c:	009b      	lsls	r3, r3, #2
 810ef1e:	4413      	add	r3, r2
 810ef20:	685b      	ldr	r3, [r3, #4]
 810ef22:	2b00      	cmp	r3, #0
 810ef24:	d015      	beq.n	810ef52 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810ef26:	687a      	ldr	r2, [r7, #4]
 810ef28:	697b      	ldr	r3, [r7, #20]
 810ef2a:	3380      	adds	r3, #128	; 0x80
 810ef2c:	009b      	lsls	r3, r3, #2
 810ef2e:	4413      	add	r3, r2
 810ef30:	685b      	ldr	r3, [r3, #4]
 810ef32:	685b      	ldr	r3, [r3, #4]
 810ef34:	68fa      	ldr	r2, [r7, #12]
 810ef36:	429a      	cmp	r2, r3
 810ef38:	d101      	bne.n	810ef3e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 810ef3a:	2300      	movs	r3, #0
 810ef3c:	e023      	b.n	810ef86 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 810ef3e:	697b      	ldr	r3, [r7, #20]
 810ef40:	3301      	adds	r3, #1
 810ef42:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810ef44:	697b      	ldr	r3, [r7, #20]
 810ef46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ef4a:	d1e4      	bne.n	810ef16 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 810ef4c:	2300      	movs	r3, #0
 810ef4e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810ef50:	e7e1      	b.n	810ef16 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810ef52:	78fb      	ldrb	r3, [r7, #3]
 810ef54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ef58:	00db      	lsls	r3, r3, #3
 810ef5a:	687a      	ldr	r2, [r7, #4]
 810ef5c:	4413      	add	r3, r2
 810ef5e:	3304      	adds	r3, #4
 810ef60:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810ef62:	68bb      	ldr	r3, [r7, #8]
 810ef64:	78fa      	ldrb	r2, [r7, #3]
 810ef66:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810ef68:	693b      	ldr	r3, [r7, #16]
 810ef6a:	b2da      	uxtb	r2, r3
 810ef6c:	68bb      	ldr	r3, [r7, #8]
 810ef6e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ef70:	68bb      	ldr	r3, [r7, #8]
 810ef72:	68fa      	ldr	r2, [r7, #12]
 810ef74:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ef76:	687a      	ldr	r2, [r7, #4]
 810ef78:	697b      	ldr	r3, [r7, #20]
 810ef7a:	3380      	adds	r3, #128	; 0x80
 810ef7c:	009b      	lsls	r3, r3, #2
 810ef7e:	4413      	add	r3, r2
 810ef80:	68ba      	ldr	r2, [r7, #8]
 810ef82:	605a      	str	r2, [r3, #4]
	return true;
 810ef84:	2301      	movs	r3, #1
}
 810ef86:	4618      	mov	r0, r3
 810ef88:	3718      	adds	r7, #24
 810ef8a:	46bd      	mov	sp, r7
 810ef8c:	bd80      	pop	{r7, pc}
 810ef8e:	bf00      	nop
 810ef90:	08114224 	.word	0x08114224

0810ef94 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ef94:	b580      	push	{r7, lr}
 810ef96:	b086      	sub	sp, #24
 810ef98:	af00      	add	r7, sp, #0
 810ef9a:	6078      	str	r0, [r7, #4]
 810ef9c:	460b      	mov	r3, r1
 810ef9e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810efa0:	2310      	movs	r3, #16
 810efa2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810efa4:	4829      	ldr	r0, [pc, #164]	; (810f04c <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 810efa6:	f7ff fbdf 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810efaa:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810efac:	68fb      	ldr	r3, [r7, #12]
 810efae:	b2db      	uxtb	r3, r3
 810efb0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810efb2:	78fb      	ldrb	r3, [r7, #3]
 810efb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810efb8:	687a      	ldr	r2, [r7, #4]
 810efba:	00db      	lsls	r3, r3, #3
 810efbc:	4413      	add	r3, r2
 810efbe:	689b      	ldr	r3, [r3, #8]
 810efc0:	2b00      	cmp	r3, #0
 810efc2:	d001      	beq.n	810efc8 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 810efc4:	2300      	movs	r3, #0
 810efc6:	e03c      	b.n	810f042 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810efc8:	693b      	ldr	r3, [r7, #16]
 810efca:	2bff      	cmp	r3, #255	; 0xff
 810efcc:	d901      	bls.n	810efd2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 810efce:	2300      	movs	r3, #0
 810efd0:	e037      	b.n	810f042 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810efd2:	687a      	ldr	r2, [r7, #4]
 810efd4:	697b      	ldr	r3, [r7, #20]
 810efd6:	3380      	adds	r3, #128	; 0x80
 810efd8:	009b      	lsls	r3, r3, #2
 810efda:	4413      	add	r3, r2
 810efdc:	685b      	ldr	r3, [r3, #4]
 810efde:	2b00      	cmp	r3, #0
 810efe0:	d015      	beq.n	810f00e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810efe2:	687a      	ldr	r2, [r7, #4]
 810efe4:	697b      	ldr	r3, [r7, #20]
 810efe6:	3380      	adds	r3, #128	; 0x80
 810efe8:	009b      	lsls	r3, r3, #2
 810efea:	4413      	add	r3, r2
 810efec:	685b      	ldr	r3, [r3, #4]
 810efee:	685b      	ldr	r3, [r3, #4]
 810eff0:	68fa      	ldr	r2, [r7, #12]
 810eff2:	429a      	cmp	r2, r3
 810eff4:	d101      	bne.n	810effa <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 810eff6:	2300      	movs	r3, #0
 810eff8:	e023      	b.n	810f042 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 810effa:	697b      	ldr	r3, [r7, #20]
 810effc:	3301      	adds	r3, #1
 810effe:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f000:	697b      	ldr	r3, [r7, #20]
 810f002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f006:	d1e4      	bne.n	810efd2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 810f008:	2300      	movs	r3, #0
 810f00a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f00c:	e7e1      	b.n	810efd2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f00e:	78fb      	ldrb	r3, [r7, #3]
 810f010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f014:	00db      	lsls	r3, r3, #3
 810f016:	687a      	ldr	r2, [r7, #4]
 810f018:	4413      	add	r3, r2
 810f01a:	3304      	adds	r3, #4
 810f01c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f01e:	68bb      	ldr	r3, [r7, #8]
 810f020:	78fa      	ldrb	r2, [r7, #3]
 810f022:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f024:	693b      	ldr	r3, [r7, #16]
 810f026:	b2da      	uxtb	r2, r3
 810f028:	68bb      	ldr	r3, [r7, #8]
 810f02a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f02c:	68bb      	ldr	r3, [r7, #8]
 810f02e:	68fa      	ldr	r2, [r7, #12]
 810f030:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f032:	687a      	ldr	r2, [r7, #4]
 810f034:	697b      	ldr	r3, [r7, #20]
 810f036:	3380      	adds	r3, #128	; 0x80
 810f038:	009b      	lsls	r3, r3, #2
 810f03a:	4413      	add	r3, r2
 810f03c:	68ba      	ldr	r2, [r7, #8]
 810f03e:	605a      	str	r2, [r3, #4]
	return true;
 810f040:	2301      	movs	r3, #1
}
 810f042:	4618      	mov	r0, r3
 810f044:	3718      	adds	r7, #24
 810f046:	46bd      	mov	sp, r7
 810f048:	bd80      	pop	{r7, pc}
 810f04a:	bf00      	nop
 810f04c:	08114204 	.word	0x08114204

0810f050 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f050:	b580      	push	{r7, lr}
 810f052:	b086      	sub	sp, #24
 810f054:	af00      	add	r7, sp, #0
 810f056:	6078      	str	r0, [r7, #4]
 810f058:	460b      	mov	r3, r1
 810f05a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f05c:	2305      	movs	r3, #5
 810f05e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f060:	4829      	ldr	r0, [pc, #164]	; (810f108 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 810f062:	f7ff fb81 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810f066:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f068:	68fb      	ldr	r3, [r7, #12]
 810f06a:	b2db      	uxtb	r3, r3
 810f06c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f06e:	78fb      	ldrb	r3, [r7, #3]
 810f070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f074:	687a      	ldr	r2, [r7, #4]
 810f076:	00db      	lsls	r3, r3, #3
 810f078:	4413      	add	r3, r2
 810f07a:	689b      	ldr	r3, [r3, #8]
 810f07c:	2b00      	cmp	r3, #0
 810f07e:	d001      	beq.n	810f084 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 810f080:	2300      	movs	r3, #0
 810f082:	e03c      	b.n	810f0fe <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f084:	693b      	ldr	r3, [r7, #16]
 810f086:	2bff      	cmp	r3, #255	; 0xff
 810f088:	d901      	bls.n	810f08e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 810f08a:	2300      	movs	r3, #0
 810f08c:	e037      	b.n	810f0fe <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f08e:	687a      	ldr	r2, [r7, #4]
 810f090:	697b      	ldr	r3, [r7, #20]
 810f092:	3380      	adds	r3, #128	; 0x80
 810f094:	009b      	lsls	r3, r3, #2
 810f096:	4413      	add	r3, r2
 810f098:	685b      	ldr	r3, [r3, #4]
 810f09a:	2b00      	cmp	r3, #0
 810f09c:	d015      	beq.n	810f0ca <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f09e:	687a      	ldr	r2, [r7, #4]
 810f0a0:	697b      	ldr	r3, [r7, #20]
 810f0a2:	3380      	adds	r3, #128	; 0x80
 810f0a4:	009b      	lsls	r3, r3, #2
 810f0a6:	4413      	add	r3, r2
 810f0a8:	685b      	ldr	r3, [r3, #4]
 810f0aa:	685b      	ldr	r3, [r3, #4]
 810f0ac:	68fa      	ldr	r2, [r7, #12]
 810f0ae:	429a      	cmp	r2, r3
 810f0b0:	d101      	bne.n	810f0b6 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 810f0b2:	2300      	movs	r3, #0
 810f0b4:	e023      	b.n	810f0fe <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 810f0b6:	697b      	ldr	r3, [r7, #20]
 810f0b8:	3301      	adds	r3, #1
 810f0ba:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f0bc:	697b      	ldr	r3, [r7, #20]
 810f0be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f0c2:	d1e4      	bne.n	810f08e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 810f0c4:	2300      	movs	r3, #0
 810f0c6:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f0c8:	e7e1      	b.n	810f08e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f0ca:	78fb      	ldrb	r3, [r7, #3]
 810f0cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f0d0:	00db      	lsls	r3, r3, #3
 810f0d2:	687a      	ldr	r2, [r7, #4]
 810f0d4:	4413      	add	r3, r2
 810f0d6:	3304      	adds	r3, #4
 810f0d8:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f0da:	68bb      	ldr	r3, [r7, #8]
 810f0dc:	78fa      	ldrb	r2, [r7, #3]
 810f0de:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f0e0:	693b      	ldr	r3, [r7, #16]
 810f0e2:	b2da      	uxtb	r2, r3
 810f0e4:	68bb      	ldr	r3, [r7, #8]
 810f0e6:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f0e8:	68bb      	ldr	r3, [r7, #8]
 810f0ea:	68fa      	ldr	r2, [r7, #12]
 810f0ec:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f0ee:	687a      	ldr	r2, [r7, #4]
 810f0f0:	697b      	ldr	r3, [r7, #20]
 810f0f2:	3380      	adds	r3, #128	; 0x80
 810f0f4:	009b      	lsls	r3, r3, #2
 810f0f6:	4413      	add	r3, r2
 810f0f8:	68ba      	ldr	r2, [r7, #8]
 810f0fa:	605a      	str	r2, [r3, #4]
	return true;
 810f0fc:	2301      	movs	r3, #1
}
 810f0fe:	4618      	mov	r0, r3
 810f100:	3718      	adds	r7, #24
 810f102:	46bd      	mov	sp, r7
 810f104:	bd80      	pop	{r7, pc}
 810f106:	bf00      	nop
 810f108:	081141e4 	.word	0x081141e4

0810f10c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810f10c:	b580      	push	{r7, lr}
 810f10e:	b086      	sub	sp, #24
 810f110:	af00      	add	r7, sp, #0
 810f112:	6078      	str	r0, [r7, #4]
 810f114:	460b      	mov	r3, r1
 810f116:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810f118:	2304      	movs	r3, #4
 810f11a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810f11c:	4829      	ldr	r0, [pc, #164]	; (810f1c4 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xb8>)
 810f11e:	f7ff fb23 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810f122:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810f124:	68fb      	ldr	r3, [r7, #12]
 810f126:	b2db      	uxtb	r3, r3
 810f128:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810f12a:	78fb      	ldrb	r3, [r7, #3]
 810f12c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f130:	687a      	ldr	r2, [r7, #4]
 810f132:	00db      	lsls	r3, r3, #3
 810f134:	4413      	add	r3, r2
 810f136:	689b      	ldr	r3, [r3, #8]
 810f138:	2b00      	cmp	r3, #0
 810f13a:	d001      	beq.n	810f140 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x34>
		return false; // Packet ID already in use
 810f13c:	2300      	movs	r3, #0
 810f13e:	e03c      	b.n	810f1ba <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810f140:	693b      	ldr	r3, [r7, #16]
 810f142:	2bff      	cmp	r3, #255	; 0xff
 810f144:	d901      	bls.n	810f14a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
		return false; // Packet size too large
 810f146:	2300      	movs	r3, #0
 810f148:	e037      	b.n	810f1ba <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810f14a:	687a      	ldr	r2, [r7, #4]
 810f14c:	697b      	ldr	r3, [r7, #20]
 810f14e:	3380      	adds	r3, #128	; 0x80
 810f150:	009b      	lsls	r3, r3, #2
 810f152:	4413      	add	r3, r2
 810f154:	685b      	ldr	r3, [r3, #4]
 810f156:	2b00      	cmp	r3, #0
 810f158:	d015      	beq.n	810f186 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810f15a:	687a      	ldr	r2, [r7, #4]
 810f15c:	697b      	ldr	r3, [r7, #20]
 810f15e:	3380      	adds	r3, #128	; 0x80
 810f160:	009b      	lsls	r3, r3, #2
 810f162:	4413      	add	r3, r2
 810f164:	685b      	ldr	r3, [r3, #4]
 810f166:	685b      	ldr	r3, [r3, #4]
 810f168:	68fa      	ldr	r2, [r7, #12]
 810f16a:	429a      	cmp	r2, r3
 810f16c:	d101      	bne.n	810f172 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x66>
			return false; // Packet type already defined
 810f16e:	2300      	movs	r3, #0
 810f170:	e023      	b.n	810f1ba <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
		insertion_point++;
 810f172:	697b      	ldr	r3, [r7, #20]
 810f174:	3301      	adds	r3, #1
 810f176:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810f178:	697b      	ldr	r3, [r7, #20]
 810f17a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f17e:	d1e4      	bne.n	810f14a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
			insertion_point = 0;
 810f180:	2300      	movs	r3, #0
 810f182:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810f184:	e7e1      	b.n	810f14a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810f186:	78fb      	ldrb	r3, [r7, #3]
 810f188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f18c:	00db      	lsls	r3, r3, #3
 810f18e:	687a      	ldr	r2, [r7, #4]
 810f190:	4413      	add	r3, r2
 810f192:	3304      	adds	r3, #4
 810f194:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810f196:	68bb      	ldr	r3, [r7, #8]
 810f198:	78fa      	ldrb	r2, [r7, #3]
 810f19a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810f19c:	693b      	ldr	r3, [r7, #16]
 810f19e:	b2da      	uxtb	r2, r3
 810f1a0:	68bb      	ldr	r3, [r7, #8]
 810f1a2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810f1a4:	68bb      	ldr	r3, [r7, #8]
 810f1a6:	68fa      	ldr	r2, [r7, #12]
 810f1a8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810f1aa:	687a      	ldr	r2, [r7, #4]
 810f1ac:	697b      	ldr	r3, [r7, #20]
 810f1ae:	3380      	adds	r3, #128	; 0x80
 810f1b0:	009b      	lsls	r3, r3, #2
 810f1b2:	4413      	add	r3, r2
 810f1b4:	68ba      	ldr	r2, [r7, #8]
 810f1b6:	605a      	str	r2, [r3, #4]
	return true;
 810f1b8:	2301      	movs	r3, #1
}
 810f1ba:	4618      	mov	r0, r3
 810f1bc:	3718      	adds	r7, #24
 810f1be:	46bd      	mov	sp, r7
 810f1c0:	bd80      	pop	{r7, pc}
 810f1c2:	bf00      	nop
 810f1c4:	081141c4 	.word	0x081141c4

0810f1c8 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810f1c8:	b580      	push	{r7, lr}
 810f1ca:	b084      	sub	sp, #16
 810f1cc:	af00      	add	r7, sp, #0
 810f1ce:	6078      	str	r0, [r7, #4]
 810f1d0:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810f1d2:	4809      	ldr	r0, [pc, #36]	; (810f1f8 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_+0x30>)
 810f1d4:	f7ff fac8 	bl	810e768 <_ZNKSt9type_info9hash_codeEv>
 810f1d8:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810f1da:	68f9      	ldr	r1, [r7, #12]
 810f1dc:	6878      	ldr	r0, [r7, #4]
 810f1de:	f000 f8d3 	bl	810f388 <_ZN10MessageBus8retrieveEj>
 810f1e2:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810f1e4:	683a      	ldr	r2, [r7, #0]
 810f1e6:	68b9      	ldr	r1, [r7, #8]
 810f1e8:	6878      	ldr	r0, [r7, #4]
 810f1ea:	f000 f807 	bl	810f1fc <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810f1ee:	4603      	mov	r3, r0
}
 810f1f0:	4618      	mov	r0, r3
 810f1f2:	3710      	adds	r7, #16
 810f1f4:	46bd      	mov	sp, r7
 810f1f6:	bd80      	pop	{r7, pc}
 810f1f8:	081141c4 	.word	0x081141c4

0810f1fc <_ZN10MessageBus4sendEP16PacketDefinitionPh>:

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 810f1fc:	b580      	push	{r7, lr}
 810f1fe:	b086      	sub	sp, #24
 810f200:	af00      	add	r7, sp, #0
 810f202:	60f8      	str	r0, [r7, #12]
 810f204:	60b9      	str	r1, [r7, #8]
 810f206:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 810f208:	68bb      	ldr	r3, [r7, #8]
 810f20a:	2b00      	cmp	r3, #0
 810f20c:	d031      	beq.n	810f272 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 810f20e:	2300      	movs	r3, #0
 810f210:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 810f212:	68bb      	ldr	r3, [r7, #8]
 810f214:	785b      	ldrb	r3, [r3, #1]
 810f216:	461a      	mov	r2, r3
 810f218:	697b      	ldr	r3, [r7, #20]
 810f21a:	4293      	cmp	r3, r2
 810f21c:	d227      	bcs.n	810f26e <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 810f21e:	68fb      	ldr	r3, [r7, #12]
 810f220:	681b      	ldr	r3, [r3, #0]
 810f222:	3308      	adds	r3, #8
 810f224:	681b      	ldr	r3, [r3, #0]
 810f226:	68b9      	ldr	r1, [r7, #8]
 810f228:	2201      	movs	r2, #1
 810f22a:	68f8      	ldr	r0, [r7, #12]
 810f22c:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 810f22e:	68fb      	ldr	r3, [r7, #12]
 810f230:	681b      	ldr	r3, [r3, #0]
 810f232:	3308      	adds	r3, #8
 810f234:	681b      	ldr	r3, [r3, #0]
 810f236:	6879      	ldr	r1, [r7, #4]
 810f238:	697a      	ldr	r2, [r7, #20]
 810f23a:	4411      	add	r1, r2
 810f23c:	68ba      	ldr	r2, [r7, #8]
 810f23e:	7852      	ldrb	r2, [r2, #1]
 810f240:	4610      	mov	r0, r2
 810f242:	697a      	ldr	r2, [r7, #20]
 810f244:	1a82      	subs	r2, r0, r2
 810f246:	68f8      	ldr	r0, [r7, #12]
 810f248:	4798      	blx	r3
 810f24a:	4603      	mov	r3, r0
 810f24c:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 810f24e:	693b      	ldr	r3, [r7, #16]
 810f250:	2b00      	cmp	r3, #0
 810f252:	d101      	bne.n	810f258 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 810f254:	2300      	movs	r3, #0
 810f256:	e00d      	b.n	810f274 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 810f258:	68fb      	ldr	r3, [r7, #12]
 810f25a:	681b      	ldr	r3, [r3, #0]
 810f25c:	330c      	adds	r3, #12
 810f25e:	681b      	ldr	r3, [r3, #0]
 810f260:	68f8      	ldr	r0, [r7, #12]
 810f262:	4798      	blx	r3
				data_bytes_written += new_bytes;
 810f264:	697a      	ldr	r2, [r7, #20]
 810f266:	693b      	ldr	r3, [r7, #16]
 810f268:	4413      	add	r3, r2
 810f26a:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 810f26c:	e7d1      	b.n	810f212 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 810f26e:	2301      	movs	r3, #1
 810f270:	e000      	b.n	810f274 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 810f272:	2300      	movs	r3, #0
}
 810f274:	4618      	mov	r0, r3
 810f276:	3718      	adds	r7, #24
 810f278:	46bd      	mov	sp, r7
 810f27a:	bd80      	pop	{r7, pc}

0810f27c <_ZN10MessageBus7receiveEhPhm>:
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
#include "Debug/Debug.h"
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 810f27c:	b580      	push	{r7, lr}
 810f27e:	b088      	sub	sp, #32
 810f280:	af00      	add	r7, sp, #0
 810f282:	60f8      	str	r0, [r7, #12]
 810f284:	607a      	str	r2, [r7, #4]
 810f286:	603b      	str	r3, [r7, #0]
 810f288:	460b      	mov	r3, r1
 810f28a:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 810f28c:	683b      	ldr	r3, [r7, #0]
 810f28e:	2b00      	cmp	r3, #0
 810f290:	d077      	beq.n	810f382 <_ZN10MessageBus7receiveEhPhm+0x106>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 810f292:	687b      	ldr	r3, [r7, #4]
 810f294:	1c5a      	adds	r2, r3, #1
 810f296:	607a      	str	r2, [r7, #4]
 810f298:	781b      	ldrb	r3, [r3, #0]
 810f29a:	777b      	strb	r3, [r7, #29]


		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 810f29c:	7f7b      	ldrb	r3, [r7, #29]
 810f29e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f2a2:	00db      	lsls	r3, r3, #3
 810f2a4:	68fa      	ldr	r2, [r7, #12]
 810f2a6:	4413      	add	r3, r2
 810f2a8:	3304      	adds	r3, #4
 810f2aa:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 810f2ac:	7afb      	ldrb	r3, [r7, #11]
 810f2ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f2b2:	3306      	adds	r3, #6
 810f2b4:	021b      	lsls	r3, r3, #8
 810f2b6:	68fa      	ldr	r2, [r7, #12]
 810f2b8:	4413      	add	r3, r2
 810f2ba:	3304      	adds	r3, #4
 810f2bc:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 810f2be:	697b      	ldr	r3, [r7, #20]
 810f2c0:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 810f2c4:	461a      	mov	r2, r3
 810f2c6:	683b      	ldr	r3, [r7, #0]
 810f2c8:	4413      	add	r3, r2
 810f2ca:	2bff      	cmp	r3, #255	; 0xff
 810f2cc:	d904      	bls.n	810f2d8 <_ZN10MessageBus7receiveEhPhm+0x5c>
			indexable_buffer->index = 0; // Corrupted packet
 810f2ce:	697b      	ldr	r3, [r7, #20]
 810f2d0:	2200      	movs	r2, #0
 810f2d2:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 810f2d6:	e054      	b.n	810f382 <_ZN10MessageBus7receiveEhPhm+0x106>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 810f2d8:	2300      	movs	r3, #0
 810f2da:	83fb      	strh	r3, [r7, #30]
 810f2dc:	8bfa      	ldrh	r2, [r7, #30]
 810f2de:	683b      	ldr	r3, [r7, #0]
 810f2e0:	3b01      	subs	r3, #1
 810f2e2:	429a      	cmp	r2, r3
 810f2e4:	d211      	bcs.n	810f30a <_ZN10MessageBus7receiveEhPhm+0x8e>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 810f2e6:	687b      	ldr	r3, [r7, #4]
 810f2e8:	1c5a      	adds	r2, r3, #1
 810f2ea:	607a      	str	r2, [r7, #4]
 810f2ec:	697a      	ldr	r2, [r7, #20]
 810f2ee:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 810f2f2:	1c51      	adds	r1, r2, #1
 810f2f4:	b2c8      	uxtb	r0, r1
 810f2f6:	6979      	ldr	r1, [r7, #20]
 810f2f8:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 810f2fc:	7819      	ldrb	r1, [r3, #0]
 810f2fe:	697b      	ldr	r3, [r7, #20]
 810f300:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 810f302:	8bfb      	ldrh	r3, [r7, #30]
 810f304:	3301      	adds	r3, #1
 810f306:	83fb      	strh	r3, [r7, #30]
 810f308:	e7e8      	b.n	810f2dc <_ZN10MessageBus7receiveEhPhm+0x60>
		}

		if(indexable_buffer->index >= def->size) {
 810f30a:	697b      	ldr	r3, [r7, #20]
 810f30c:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 810f310:	69bb      	ldr	r3, [r7, #24]
 810f312:	785b      	ldrb	r3, [r3, #1]
 810f314:	429a      	cmp	r2, r3
 810f316:	d334      	bcc.n	810f382 <_ZN10MessageBus7receiveEhPhm+0x106>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 810f318:	7f7b      	ldrb	r3, [r7, #29]
 810f31a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f31e:	68fa      	ldr	r2, [r7, #12]
 810f320:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810f324:	009b      	lsls	r3, r3, #2
 810f326:	4413      	add	r3, r2
 810f328:	685b      	ldr	r3, [r3, #4]
 810f32a:	2b00      	cmp	r3, #0
 810f32c:	d00c      	beq.n	810f348 <_ZN10MessageBus7receiveEhPhm+0xcc>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 810f32e:	7f7b      	ldrb	r3, [r7, #29]
 810f330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f334:	68fa      	ldr	r2, [r7, #12]
 810f336:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810f33a:	009b      	lsls	r3, r3, #2
 810f33c:	4413      	add	r3, r2
 810f33e:	685b      	ldr	r3, [r3, #4]
 810f340:	6979      	ldr	r1, [r7, #20]
 810f342:	7afa      	ldrb	r2, [r7, #11]
 810f344:	4610      	mov	r0, r2
 810f346:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 810f348:	7f7b      	ldrb	r3, [r7, #29]
 810f34a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f34e:	68fa      	ldr	r2, [r7, #12]
 810f350:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810f354:	009b      	lsls	r3, r3, #2
 810f356:	4413      	add	r3, r2
 810f358:	685b      	ldr	r3, [r3, #4]
 810f35a:	2b00      	cmp	r3, #0
 810f35c:	d00d      	beq.n	810f37a <_ZN10MessageBus7receiveEhPhm+0xfe>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 810f35e:	7f7b      	ldrb	r3, [r7, #29]
 810f360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810f364:	68fa      	ldr	r2, [r7, #12]
 810f366:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810f36a:	009b      	lsls	r3, r3, #2
 810f36c:	4413      	add	r3, r2
 810f36e:	685b      	ldr	r3, [r3, #4]
 810f370:	697a      	ldr	r2, [r7, #20]
 810f372:	69b9      	ldr	r1, [r7, #24]
 810f374:	4618      	mov	r0, r3
 810f376:	f7ff ff41 	bl	810f1fc <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 810f37a:	697b      	ldr	r3, [r7, #20]
 810f37c:	2200      	movs	r2, #0
 810f37e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 810f382:	3720      	adds	r7, #32
 810f384:	46bd      	mov	sp, r7
 810f386:	bd80      	pop	{r7, pc}

0810f388 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 810f388:	b480      	push	{r7}
 810f38a:	b085      	sub	sp, #20
 810f38c:	af00      	add	r7, sp, #0
 810f38e:	6078      	str	r0, [r7, #4]
 810f390:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 810f392:	683b      	ldr	r3, [r7, #0]
 810f394:	b2db      	uxtb	r3, r3
 810f396:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 810f398:	68fb      	ldr	r3, [r7, #12]
 810f39a:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 810f39c:	687a      	ldr	r2, [r7, #4]
 810f39e:	68fb      	ldr	r3, [r7, #12]
 810f3a0:	3380      	adds	r3, #128	; 0x80
 810f3a2:	009b      	lsls	r3, r3, #2
 810f3a4:	4413      	add	r3, r2
 810f3a6:	685b      	ldr	r3, [r3, #4]
 810f3a8:	2b00      	cmp	r3, #0
 810f3aa:	d01f      	beq.n	810f3ec <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
 810f3ac:	687a      	ldr	r2, [r7, #4]
 810f3ae:	68fb      	ldr	r3, [r7, #12]
 810f3b0:	3380      	adds	r3, #128	; 0x80
 810f3b2:	009b      	lsls	r3, r3, #2
 810f3b4:	4413      	add	r3, r2
 810f3b6:	685b      	ldr	r3, [r3, #4]
 810f3b8:	685b      	ldr	r3, [r3, #4]
 810f3ba:	683a      	ldr	r2, [r7, #0]
 810f3bc:	429a      	cmp	r2, r3
 810f3be:	d106      	bne.n	810f3ce <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
 810f3c0:	687a      	ldr	r2, [r7, #4]
 810f3c2:	68fb      	ldr	r3, [r7, #12]
 810f3c4:	3380      	adds	r3, #128	; 0x80
 810f3c6:	009b      	lsls	r3, r3, #2
 810f3c8:	4413      	add	r3, r2
 810f3ca:	685b      	ldr	r3, [r3, #4]
 810f3cc:	e00f      	b.n	810f3ee <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
 810f3ce:	68fb      	ldr	r3, [r7, #12]
 810f3d0:	3301      	adds	r3, #1
 810f3d2:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 810f3d4:	68fb      	ldr	r3, [r7, #12]
 810f3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f3da:	d101      	bne.n	810f3e0 <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
 810f3dc:	2300      	movs	r3, #0
 810f3de:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 810f3e0:	68ba      	ldr	r2, [r7, #8]
 810f3e2:	68fb      	ldr	r3, [r7, #12]
 810f3e4:	429a      	cmp	r2, r3
 810f3e6:	d000      	beq.n	810f3ea <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
 810f3e8:	e7d8      	b.n	810f39c <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
 810f3ea:	bf00      	nop
		}
	}

	return nullptr;
 810f3ec:	2300      	movs	r3, #0
}
 810f3ee:	4618      	mov	r0, r3
 810f3f0:	3714      	adds	r7, #20
 810f3f2:	46bd      	mov	sp, r7
 810f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f3f8:	4770      	bx	lr
	...

0810f3fc <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 810f3fc:	b580      	push	{r7, lr}
 810f3fe:	b082      	sub	sp, #8
 810f400:	af00      	add	r7, sp, #0
 810f402:	6078      	str	r0, [r7, #4]
 810f404:	6039      	str	r1, [r7, #0]
 810f406:	6878      	ldr	r0, [r7, #4]
 810f408:	687b      	ldr	r3, [r7, #4]
 810f40a:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 810f40e:	3211      	adds	r2, #17
 810f410:	f44f 7380 	mov.w	r3, #256	; 0x100
 810f414:	6839      	ldr	r1, [r7, #0]
 810f416:	f7fe f8fd 	bl	810d614 <_ZN5IOBusC1EP8IODriverPhm>
 810f41a:	4a24      	ldr	r2, [pc, #144]	; (810f4ac <_ZN10NetworkBusC1EP8IODriver+0xb0>)
 810f41c:	687b      	ldr	r3, [r7, #4]
 810f41e:	601a      	str	r2, [r3, #0]
	define<PingPacket>(0);
 810f420:	687b      	ldr	r3, [r7, #4]
 810f422:	2100      	movs	r1, #0
 810f424:	4618      	mov	r0, r3
 810f426:	f7ff f9bb 	bl	810e7a0 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<RequestPacket>(1);
 810f42a:	687b      	ldr	r3, [r7, #4]
 810f42c:	2101      	movs	r1, #1
 810f42e:	4618      	mov	r0, r3
 810f430:	f7ff fa14 	bl	810e85c <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(2);
 810f434:	687b      	ldr	r3, [r7, #4]
 810f436:	2102      	movs	r1, #2
 810f438:	4618      	mov	r0, r3
 810f43a:	f7ff fa6d 	bl	810e918 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(3);
 810f43e:	687b      	ldr	r3, [r7, #4]
 810f440:	2103      	movs	r1, #3
 810f442:	4618      	mov	r0, r3
 810f444:	f7ff fac6 	bl	810e9d4 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
	define<DataPacket>(4);
 810f448:	687b      	ldr	r3, [r7, #4]
 810f44a:	2104      	movs	r1, #4
 810f44c:	4618      	mov	r0, r3
 810f44e:	f7ff fb1f 	bl	810ea90 <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<Avionics_BaroTempPacket>(5);
 810f452:	687b      	ldr	r3, [r7, #4]
 810f454:	2105      	movs	r1, #5
 810f456:	4618      	mov	r0, r3
 810f458:	f7ff fbd6 	bl	810ec08 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
	define<Avionics_AccelMagPacket>(6);
 810f45c:	687b      	ldr	r3, [r7, #4]
 810f45e:	2106      	movs	r1, #6
 810f460:	4618      	mov	r0, r3
 810f462:	f7ff fc49 	bl	810ecf8 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
	define<Handling_GripperPacket>(7);
 810f466:	687b      	ldr	r3, [r7, #4]
 810f468:	2107      	movs	r1, #7
 810f46a:	4618      	mov	r0, r3
 810f46c:	f7ff fcbc 	bl	810ede8 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>
	define<Power_VoltagePacket>(8);
 810f470:	687b      	ldr	r3, [r7, #4]
 810f472:	2108      	movs	r1, #8
 810f474:	4618      	mov	r0, r3
 810f476:	f7ff fd2f 	bl	810eed8 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(9);
 810f47a:	687b      	ldr	r3, [r7, #4]
 810f47c:	2109      	movs	r1, #9
 810f47e:	4618      	mov	r0, r3
 810f480:	f7ff fd88 	bl	810ef94 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Power_SystemPacket>(10);
 810f484:	687b      	ldr	r3, [r7, #4]
 810f486:	210a      	movs	r1, #10
 810f488:	4618      	mov	r0, r3
 810f48a:	f7ff fde1 	bl	810f050 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Science_MeasurePacket>(11);
 810f48e:	687b      	ldr	r3, [r7, #4]
 810f490:	210b      	movs	r1, #11
 810f492:	4618      	mov	r0, r3
 810f494:	f7ff fe3a 	bl	810f10c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>
	define<ErrorPacket>(63);
 810f498:	687b      	ldr	r3, [r7, #4]
 810f49a:	213f      	movs	r1, #63	; 0x3f
 810f49c:	4618      	mov	r0, r3
 810f49e:	f7ff fb55 	bl	810eb4c <_ZN10MessageBus6defineI11ErrorPacketEEbh>
}
 810f4a2:	687b      	ldr	r3, [r7, #4]
 810f4a4:	4618      	mov	r0, r3
 810f4a6:	3708      	adds	r7, #8
 810f4a8:	46bd      	mov	sp, r7
 810f4aa:	bd80      	pop	{r7, pc}
 810f4ac:	08114350 	.word	0x08114350

0810f4b0 <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 810f4b0:	b580      	push	{r7, lr}
 810f4b2:	b082      	sub	sp, #8
 810f4b4:	af00      	add	r7, sp, #0
 810f4b6:	6078      	str	r0, [r7, #4]
 810f4b8:	4a05      	ldr	r2, [pc, #20]	; (810f4d0 <_ZN10NetworkBusD1Ev+0x20>)
 810f4ba:	687b      	ldr	r3, [r7, #4]
 810f4bc:	601a      	str	r2, [r3, #0]
 810f4be:	687b      	ldr	r3, [r7, #4]
 810f4c0:	4618      	mov	r0, r3
 810f4c2:	f7ff f919 	bl	810e6f8 <_ZN5IOBusD1Ev>
 810f4c6:	687b      	ldr	r3, [r7, #4]
 810f4c8:	4618      	mov	r0, r3
 810f4ca:	3708      	adds	r7, #8
 810f4cc:	46bd      	mov	sp, r7
 810f4ce:	bd80      	pop	{r7, pc}
 810f4d0:	08114350 	.word	0x08114350

0810f4d4 <_ZN10NetworkBusD0Ev>:
 810f4d4:	b580      	push	{r7, lr}
 810f4d6:	b082      	sub	sp, #8
 810f4d8:	af00      	add	r7, sp, #0
 810f4da:	6078      	str	r0, [r7, #4]
 810f4dc:	6878      	ldr	r0, [r7, #4]
 810f4de:	f7ff ffe7 	bl	810f4b0 <_ZN10NetworkBusD1Ev>
 810f4e2:	f644 1114 	movw	r1, #18708	; 0x4914
 810f4e6:	6878      	ldr	r0, [r7, #4]
 810f4e8:	f001 f987 	bl	81107fa <_ZdlPvj>
 810f4ec:	687b      	ldr	r3, [r7, #4]
 810f4ee:	4618      	mov	r0, r3
 810f4f0:	3708      	adds	r7, #8
 810f4f2:	46bd      	mov	sp, r7
 810f4f4:	bd80      	pop	{r7, pc}

0810f4f6 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 810f4f6:	b480      	push	{r7}
 810f4f8:	b083      	sub	sp, #12
 810f4fa:	af00      	add	r7, sp, #0
 810f4fc:	6078      	str	r0, [r7, #4]

}
 810f4fe:	bf00      	nop
 810f500:	370c      	adds	r7, #12
 810f502:	46bd      	mov	sp, r7
 810f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f508:	4770      	bx	lr

0810f50a <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 810f50a:	b580      	push	{r7, lr}
 810f50c:	b082      	sub	sp, #8
 810f50e:	af00      	add	r7, sp, #0
 810f510:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 810f512:	687b      	ldr	r3, [r7, #4]
 810f514:	68db      	ldr	r3, [r3, #12]
 810f516:	4618      	mov	r0, r3
 810f518:	f7f6 fd80 	bl	810601c <HAL_IWDG_Refresh>
	osDelay(100);
 810f51c:	2064      	movs	r0, #100	; 0x64
 810f51e:	f7f9 fcf5 	bl	8108f0c <osDelay>
}
 810f522:	bf00      	nop
 810f524:	3708      	adds	r7, #8
 810f526:	46bd      	mov	sp, r7
 810f528:	bd80      	pop	{r7, pc}
	...

0810f52c <_ZN17PotentiometerData8toStringEPc>:
};

struct PotentiometerData {
	float voltage;

	char* toString(char* buffer) {
 810f52c:	b590      	push	{r4, r7, lr}
 810f52e:	b083      	sub	sp, #12
 810f530:	af00      	add	r7, sp, #0
 810f532:	6078      	str	r0, [r7, #4]
 810f534:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Voltage(v): %f", voltage);
 810f536:	687b      	ldr	r3, [r7, #4]
 810f538:	681b      	ldr	r3, [r3, #0]
 810f53a:	4618      	mov	r0, r3
 810f53c:	f7f1 f89c 	bl	8100678 <__aeabi_f2d>
 810f540:	4603      	mov	r3, r0
 810f542:	460c      	mov	r4, r1
 810f544:	461a      	mov	r2, r3
 810f546:	4623      	mov	r3, r4
 810f548:	4904      	ldr	r1, [pc, #16]	; (810f55c <_ZN17PotentiometerData8toStringEPc+0x30>)
 810f54a:	6838      	ldr	r0, [r7, #0]
 810f54c:	f002 f80a 	bl	8111564 <siprintf>
		return buffer;
 810f550:	683b      	ldr	r3, [r7, #0]
	}
 810f552:	4618      	mov	r0, r3
 810f554:	370c      	adds	r7, #12
 810f556:	46bd      	mov	sp, r7
 810f558:	bd90      	pop	{r4, r7, pc}
 810f55a:	bf00      	nop
 810f55c:	08113e48 	.word	0x08113e48

0810f560 <_ZN17PotentiometerData7toArrayEPf>:

	float* toArray(float* buffer){
 810f560:	b480      	push	{r7}
 810f562:	b083      	sub	sp, #12
 810f564:	af00      	add	r7, sp, #0
 810f566:	6078      	str	r0, [r7, #4]
 810f568:	6039      	str	r1, [r7, #0]
		*buffer = voltage;
 810f56a:	687b      	ldr	r3, [r7, #4]
 810f56c:	681a      	ldr	r2, [r3, #0]
 810f56e:	683b      	ldr	r3, [r7, #0]
 810f570:	601a      	str	r2, [r3, #0]
		return buffer;
 810f572:	683b      	ldr	r3, [r7, #0]
	}
 810f574:	4618      	mov	r0, r3
 810f576:	370c      	adds	r7, #12
 810f578:	46bd      	mov	sp, r7
 810f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f57e:	4770      	bx	lr

0810f580 <_ZN11ADC16ThreadC1EP19__I2C_HandleTypeDef>:
#include "DataStructures.h"
#include "Debug/Debug.h"

static char cbuf[256];

ADC16Thread::ADC16Thread(I2C_HandleTypeDef *hi2c)
 810f580:	b580      	push	{r7, lr}
 810f582:	b082      	sub	sp, #8
 810f584:	af00      	add	r7, sp, #0
 810f586:	6078      	str	r0, [r7, #4]
 810f588:	6039      	str	r1, [r7, #0]
: Thread("ADC16"), ads(hi2c), offset(0)
 810f58a:	687b      	ldr	r3, [r7, #4]
 810f58c:	490b      	ldr	r1, [pc, #44]	; (810f5bc <_ZN11ADC16ThreadC1EP19__I2C_HandleTypeDef+0x3c>)
 810f58e:	4618      	mov	r0, r3
 810f590:	f000 fe5b 	bl	811024a <_ZN6ThreadC1EPKc>
 810f594:	4a0a      	ldr	r2, [pc, #40]	; (810f5c0 <_ZN11ADC16ThreadC1EP19__I2C_HandleTypeDef+0x40>)
 810f596:	687b      	ldr	r3, [r7, #4]
 810f598:	601a      	str	r2, [r3, #0]
 810f59a:	687b      	ldr	r3, [r7, #4]
 810f59c:	330c      	adds	r3, #12
 810f59e:	2248      	movs	r2, #72	; 0x48
 810f5a0:	6839      	ldr	r1, [r7, #0]
 810f5a2:	4618      	mov	r0, r3
 810f5a4:	f7fc fac0 	bl	810bb28 <_ZN7ADS1113C1EP19__I2C_HandleTypeDefh>
 810f5a8:	687b      	ldr	r3, [r7, #4]
 810f5aa:	f04f 0200 	mov.w	r2, #0
 810f5ae:	615a      	str	r2, [r3, #20]
{}
 810f5b0:	687b      	ldr	r3, [r7, #4]
 810f5b2:	4618      	mov	r0, r3
 810f5b4:	3708      	adds	r7, #8
 810f5b6:	46bd      	mov	sp, r7
 810f5b8:	bd80      	pop	{r7, pc}
 810f5ba:	bf00      	nop
 810f5bc:	08113e58 	.word	0x08113e58
 810f5c0:	081143c0 	.word	0x081143c0

0810f5c4 <_ZN11ADC16Thread4initEv>:

void ADC16Thread::init() {
 810f5c4:	b580      	push	{r7, lr}
 810f5c6:	b082      	sub	sp, #8
 810f5c8:	af00      	add	r7, sp, #0
 810f5ca:	6078      	str	r0, [r7, #4]
	while (!ads.begin()) {
 810f5cc:	687b      	ldr	r3, [r7, #4]
 810f5ce:	330c      	adds	r3, #12
 810f5d0:	4618      	mov	r0, r3
 810f5d2:	f7fc fac3 	bl	810bb5c <_ZN7ADS11135beginEv>
 810f5d6:	4603      	mov	r3, r0
 810f5d8:	f083 0301 	eor.w	r3, r3, #1
 810f5dc:	b2db      	uxtb	r3, r3
 810f5de:	2b00      	cmp	r3, #0
 810f5e0:	d009      	beq.n	810f5f6 <_ZN11ADC16Thread4initEv+0x32>
			println("ADS1113 initialization failed");
 810f5e2:	687b      	ldr	r3, [r7, #4]
 810f5e4:	4908      	ldr	r1, [pc, #32]	; (810f608 <_ZN11ADC16Thread4initEv+0x44>)
 810f5e6:	4618      	mov	r0, r3
 810f5e8:	f000 fe84 	bl	81102f4 <_ZN6Thread7printlnEPKcz>
		  	osDelay(500);
 810f5ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810f5f0:	f7f9 fc8c 	bl	8108f0c <osDelay>
	while (!ads.begin()) {
 810f5f4:	e7ea      	b.n	810f5cc <_ZN11ADC16Thread4initEv+0x8>
		}
		println("ADS1113 initialized");
 810f5f6:	687b      	ldr	r3, [r7, #4]
 810f5f8:	4904      	ldr	r1, [pc, #16]	; (810f60c <_ZN11ADC16Thread4initEv+0x48>)
 810f5fa:	4618      	mov	r0, r3
 810f5fc:	f000 fe7a 	bl	81102f4 <_ZN6Thread7printlnEPKcz>
}
 810f600:	bf00      	nop
 810f602:	3708      	adds	r7, #8
 810f604:	46bd      	mov	sp, r7
 810f606:	bd80      	pop	{r7, pc}
 810f608:	08113e60 	.word	0x08113e60
 810f60c:	08113e80 	.word	0x08113e80

0810f610 <_ZN11ADC16Thread4loopEv>:

void ADC16Thread::loop() { //Should this send a voltage or radial position?
 810f610:	b590      	push	{r4, r7, lr}
 810f612:	b085      	sub	sp, #20
 810f614:	af00      	add	r7, sp, #0
 810f616:	6078      	str	r0, [r7, #4]
	PotentiometerData data;
	data.voltage = ads.readADC_SingleEnded()*maxVoltage - offset;
 810f618:	687b      	ldr	r3, [r7, #4]
 810f61a:	330c      	adds	r3, #12
 810f61c:	2180      	movs	r1, #128	; 0x80
 810f61e:	4618      	mov	r0, r3
 810f620:	f7fc fb17 	bl	810bc52 <_ZN7ADS111319readADC_SingleEndedEt>
 810f624:	4603      	mov	r3, r0
 810f626:	ee07 3a90 	vmov	s15, r3
 810f62a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f62e:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 810f632:	ee27 7a87 	vmul.f32	s14, s15, s14
 810f636:	687b      	ldr	r3, [r7, #4]
 810f638:	edd3 7a05 	vldr	s15, [r3, #20]
 810f63c:	ee77 7a67 	vsub.f32	s15, s14, s15
 810f640:	edc7 7a03 	vstr	s15, [r7, #12]

	println("%s", data.toString(cbuf));
 810f644:	687c      	ldr	r4, [r7, #4]
 810f646:	f107 030c 	add.w	r3, r7, #12
 810f64a:	490f      	ldr	r1, [pc, #60]	; (810f688 <_ZN11ADC16Thread4loopEv+0x78>)
 810f64c:	4618      	mov	r0, r3
 810f64e:	f7ff ff6d 	bl	810f52c <_ZN17PotentiometerData8toStringEPc>
 810f652:	4603      	mov	r3, r0
 810f654:	461a      	mov	r2, r3
 810f656:	490d      	ldr	r1, [pc, #52]	; (810f68c <_ZN11ADC16Thread4loopEv+0x7c>)
 810f658:	4620      	mov	r0, r4
 810f65a:	f000 fe4b 	bl	81102f4 <_ZN6Thread7printlnEPKcz>

	Handling_GripperPacket packet;
	data.toArray((float*) &packet);
 810f65e:	f107 0208 	add.w	r2, r7, #8
 810f662:	f107 030c 	add.w	r3, r7, #12
 810f666:	4611      	mov	r1, r2
 810f668:	4618      	mov	r0, r3
 810f66a:	f7ff ff79 	bl	810f560 <_ZN17PotentiometerData7toArrayEPf>
	network.send(&packet);
 810f66e:	f107 0308 	add.w	r3, r7, #8
 810f672:	4619      	mov	r1, r3
 810f674:	4806      	ldr	r0, [pc, #24]	; (810f690 <_ZN11ADC16Thread4loopEv+0x80>)
 810f676:	f7ff fc15 	bl	810eea4 <_ZN10MessageBus4sendI22Handling_GripperPacketEEbPT_>

	osDelay(100);
 810f67a:	2064      	movs	r0, #100	; 0x64
 810f67c:	f7f9 fc46 	bl	8108f0c <osDelay>
}
 810f680:	bf00      	nop
 810f682:	3714      	adds	r7, #20
 810f684:	46bd      	mov	sp, r7
 810f686:	bd90      	pop	{r4, r7, pc}
 810f688:	1000462c 	.word	0x1000462c
 810f68c:	08113e94 	.word	0x08113e94
 810f690:	10004f74 	.word	0x10004f74

0810f694 <_ZN11ScienceData8toStringEPc>:
	char* toString(char* buffer) {
 810f694:	b580      	push	{r7, lr}
 810f696:	b082      	sub	sp, #8
 810f698:	af00      	add	r7, sp, #0
 810f69a:	6078      	str	r0, [r7, #4]
 810f69c:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Mass(kg): %lu", mass);
 810f69e:	687b      	ldr	r3, [r7, #4]
 810f6a0:	681b      	ldr	r3, [r3, #0]
 810f6a2:	461a      	mov	r2, r3
 810f6a4:	4904      	ldr	r1, [pc, #16]	; (810f6b8 <_ZN11ScienceData8toStringEPc+0x24>)
 810f6a6:	6838      	ldr	r0, [r7, #0]
 810f6a8:	f001 ff5c 	bl	8111564 <siprintf>
		return buffer;
 810f6ac:	683b      	ldr	r3, [r7, #0]
	}
 810f6ae:	4618      	mov	r0, r3
 810f6b0:	3708      	adds	r7, #8
 810f6b2:	46bd      	mov	sp, r7
 810f6b4:	bd80      	pop	{r7, pc}
 810f6b6:	bf00      	nop
 810f6b8:	08113e98 	.word	0x08113e98

0810f6bc <_ZN11ScienceData7toArrayEPm>:
	uint32_t* toArray(uint32_t* buffer){
 810f6bc:	b480      	push	{r7}
 810f6be:	b083      	sub	sp, #12
 810f6c0:	af00      	add	r7, sp, #0
 810f6c2:	6078      	str	r0, [r7, #4]
 810f6c4:	6039      	str	r1, [r7, #0]
		*buffer = mass;
 810f6c6:	687b      	ldr	r3, [r7, #4]
 810f6c8:	681a      	ldr	r2, [r3, #0]
 810f6ca:	683b      	ldr	r3, [r7, #0]
 810f6cc:	601a      	str	r2, [r3, #0]
		return buffer;
 810f6ce:	683b      	ldr	r3, [r7, #0]
	}
 810f6d0:	4618      	mov	r0, r3
 810f6d2:	370c      	adds	r7, #12
 810f6d4:	46bd      	mov	sp, r7
 810f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f6da:	4770      	bx	lr

0810f6dc <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m>:
#include "DataStructures.h"
#include "Debug/Debug.h"

static char cbuf[256];

ADC24Thread::ADC24Thread(GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin)
 810f6dc:	b580      	push	{r7, lr}
 810f6de:	b084      	sub	sp, #16
 810f6e0:	af00      	add	r7, sp, #0
 810f6e2:	60f8      	str	r0, [r7, #12]
 810f6e4:	60b9      	str	r1, [r7, #8]
 810f6e6:	607a      	str	r2, [r7, #4]
 810f6e8:	603b      	str	r3, [r7, #0]
: Thread("ADC24"){
 810f6ea:	68fb      	ldr	r3, [r7, #12]
 810f6ec:	490a      	ldr	r1, [pc, #40]	; (810f718 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m+0x3c>)
 810f6ee:	4618      	mov	r0, r3
 810f6f0:	f000 fdab 	bl	811024a <_ZN6ThreadC1EPKc>
 810f6f4:	4a09      	ldr	r2, [pc, #36]	; (810f71c <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m+0x40>)
 810f6f6:	68fb      	ldr	r3, [r7, #12]
 810f6f8:	601a      	str	r2, [r3, #0]
 810f6fa:	68fb      	ldr	r3, [r7, #12]
 810f6fc:	220f      	movs	r2, #15
 810f6fe:	819a      	strh	r2, [r3, #12]
	HX711_set_pins(sck_gpio, sck_pin, di_gpio, di_pin);
 810f700:	69bb      	ldr	r3, [r7, #24]
 810f702:	683a      	ldr	r2, [r7, #0]
 810f704:	6879      	ldr	r1, [r7, #4]
 810f706:	68b8      	ldr	r0, [r7, #8]
 810f708:	f7fd fbbc 	bl	810ce84 <HX711_set_pins>
}
 810f70c:	68fb      	ldr	r3, [r7, #12]
 810f70e:	4618      	mov	r0, r3
 810f710:	3710      	adds	r7, #16
 810f712:	46bd      	mov	sp, r7
 810f714:	bd80      	pop	{r7, pc}
 810f716:	bf00      	nop
 810f718:	08113ea8 	.word	0x08113ea8
 810f71c:	081143f8 	.word	0x081143f8

0810f720 <_ZN11ADC24Thread4initEv>:

void ADC24Thread::init() {
 810f720:	b580      	push	{r7, lr}
 810f722:	b082      	sub	sp, #8
 810f724:	af00      	add	r7, sp, #0
 810f726:	6078      	str	r0, [r7, #4]
	HX711_init();
 810f728:	f7fd fbce 	bl	810cec8 <HX711_init>
	while(!HX711_isReady()){
 810f72c:	f7fd fcc8 	bl	810d0c0 <HX711_isReady>
 810f730:	4603      	mov	r3, r0
 810f732:	2b00      	cmp	r3, #0
 810f734:	bf0c      	ite	eq
 810f736:	2301      	moveq	r3, #1
 810f738:	2300      	movne	r3, #0
 810f73a:	b2db      	uxtb	r3, r3
 810f73c:	2b00      	cmp	r3, #0
 810f73e:	d009      	beq.n	810f754 <_ZN11ADC24Thread4initEv+0x34>
		println("HX711 initialization failed");
 810f740:	687b      	ldr	r3, [r7, #4]
 810f742:	4909      	ldr	r1, [pc, #36]	; (810f768 <_ZN11ADC24Thread4initEv+0x48>)
 810f744:	4618      	mov	r0, r3
 810f746:	f000 fdd5 	bl	81102f4 <_ZN6Thread7printlnEPKcz>
		osDelay(500);
 810f74a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810f74e:	f7f9 fbdd 	bl	8108f0c <osDelay>
	while(!HX711_isReady()){
 810f752:	e7eb      	b.n	810f72c <_ZN11ADC24Thread4initEv+0xc>
	}
	println("HX711 initialized");
 810f754:	687b      	ldr	r3, [r7, #4]
 810f756:	4905      	ldr	r1, [pc, #20]	; (810f76c <_ZN11ADC24Thread4initEv+0x4c>)
 810f758:	4618      	mov	r0, r3
 810f75a:	f000 fdcb 	bl	81102f4 <_ZN6Thread7printlnEPKcz>
}
 810f75e:	bf00      	nop
 810f760:	3708      	adds	r7, #8
 810f762:	46bd      	mov	sp, r7
 810f764:	bd80      	pop	{r7, pc}
 810f766:	bf00      	nop
 810f768:	08113eb0 	.word	0x08113eb0
 810f76c:	08113ecc 	.word	0x08113ecc

0810f770 <_ZN11ADC24Thread4loopEv>:

void ADC24Thread::loop() {
 810f770:	b590      	push	{r4, r7, lr}
 810f772:	b085      	sub	sp, #20
 810f774:	af00      	add	r7, sp, #0
 810f776:	6078      	str	r0, [r7, #4]
	ScienceData data;
	data.mass = HX711_valueAve(nSamples);
 810f778:	687b      	ldr	r3, [r7, #4]
 810f77a:	899b      	ldrh	r3, [r3, #12]
 810f77c:	4618      	mov	r0, r3
 810f77e:	f7fd fc6b 	bl	810d058 <HX711_valueAve>
 810f782:	4603      	mov	r3, r0
 810f784:	60fb      	str	r3, [r7, #12]

	println("%s", data.toString(cbuf));
 810f786:	687c      	ldr	r4, [r7, #4]
 810f788:	f107 030c 	add.w	r3, r7, #12
 810f78c:	490f      	ldr	r1, [pc, #60]	; (810f7cc <_ZN11ADC24Thread4loopEv+0x5c>)
 810f78e:	4618      	mov	r0, r3
 810f790:	f7ff ff80 	bl	810f694 <_ZN11ScienceData8toStringEPc>
 810f794:	4603      	mov	r3, r0
 810f796:	461a      	mov	r2, r3
 810f798:	490d      	ldr	r1, [pc, #52]	; (810f7d0 <_ZN11ADC24Thread4loopEv+0x60>)
 810f79a:	4620      	mov	r0, r4
 810f79c:	f000 fdaa 	bl	81102f4 <_ZN6Thread7printlnEPKcz>

	Science_MeasurePacket packet;
	data.toArray((uint32_t*) &packet);
 810f7a0:	f107 0208 	add.w	r2, r7, #8
 810f7a4:	f107 030c 	add.w	r3, r7, #12
 810f7a8:	4611      	mov	r1, r2
 810f7aa:	4618      	mov	r0, r3
 810f7ac:	f7ff ff86 	bl	810f6bc <_ZN11ScienceData7toArrayEPm>
	network.send(&packet);
 810f7b0:	f107 0308 	add.w	r3, r7, #8
 810f7b4:	4619      	mov	r1, r3
 810f7b6:	4807      	ldr	r0, [pc, #28]	; (810f7d4 <_ZN11ADC24Thread4loopEv+0x64>)
 810f7b8:	f7ff fd06 	bl	810f1c8 <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_>

	osDelay(100);
 810f7bc:	2064      	movs	r0, #100	; 0x64
 810f7be:	f7f9 fba5 	bl	8108f0c <osDelay>
}
 810f7c2:	bf00      	nop
 810f7c4:	3714      	adds	r7, #20
 810f7c6:	46bd      	mov	sp, r7
 810f7c8:	bd90      	pop	{r4, r7, pc}
 810f7ca:	bf00      	nop
 810f7cc:	1000472c 	.word	0x1000472c
 810f7d0:	08113ee0 	.word	0x08113ee0
 810f7d4:	10004f74 	.word	0x10004f74

0810f7d8 <_ZN8BaroData8toStringEPc>:
	char* toString(char* buffer) {
 810f7d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810f7dc:	b086      	sub	sp, #24
 810f7de:	af04      	add	r7, sp, #16
 810f7e0:	6078      	str	r0, [r7, #4]
 810f7e2:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Tmp: %f, Prs: %f, Hum: %f", temperature, pressure, humidity);
 810f7e4:	687b      	ldr	r3, [r7, #4]
 810f7e6:	681b      	ldr	r3, [r3, #0]
 810f7e8:	4618      	mov	r0, r3
 810f7ea:	f7f0 ff45 	bl	8100678 <__aeabi_f2d>
 810f7ee:	4680      	mov	r8, r0
 810f7f0:	4689      	mov	r9, r1
 810f7f2:	687b      	ldr	r3, [r7, #4]
 810f7f4:	685b      	ldr	r3, [r3, #4]
 810f7f6:	4618      	mov	r0, r3
 810f7f8:	f7f0 ff3e 	bl	8100678 <__aeabi_f2d>
 810f7fc:	4604      	mov	r4, r0
 810f7fe:	460d      	mov	r5, r1
 810f800:	687b      	ldr	r3, [r7, #4]
 810f802:	689b      	ldr	r3, [r3, #8]
 810f804:	4618      	mov	r0, r3
 810f806:	f7f0 ff37 	bl	8100678 <__aeabi_f2d>
 810f80a:	4602      	mov	r2, r0
 810f80c:	460b      	mov	r3, r1
 810f80e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810f812:	e9cd 4500 	strd	r4, r5, [sp]
 810f816:	4642      	mov	r2, r8
 810f818:	464b      	mov	r3, r9
 810f81a:	4905      	ldr	r1, [pc, #20]	; (810f830 <_ZN8BaroData8toStringEPc+0x58>)
 810f81c:	6838      	ldr	r0, [r7, #0]
 810f81e:	f001 fea1 	bl	8111564 <siprintf>
		return buffer;
 810f822:	683b      	ldr	r3, [r7, #0]
	}
 810f824:	4618      	mov	r0, r3
 810f826:	3708      	adds	r7, #8
 810f828:	46bd      	mov	sp, r7
 810f82a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810f82e:	bf00      	nop
 810f830:	08113ee4 	.word	0x08113ee4

0810f834 <_ZN8BaroData7toArrayEPf>:
	float* toArray(float* buffer) {
 810f834:	b480      	push	{r7}
 810f836:	b083      	sub	sp, #12
 810f838:	af00      	add	r7, sp, #0
 810f83a:	6078      	str	r0, [r7, #4]
 810f83c:	6039      	str	r1, [r7, #0]
		buffer[0] = pressure;
 810f83e:	687b      	ldr	r3, [r7, #4]
 810f840:	685a      	ldr	r2, [r3, #4]
 810f842:	683b      	ldr	r3, [r7, #0]
 810f844:	601a      	str	r2, [r3, #0]
		buffer[1] = temperature;
 810f846:	683b      	ldr	r3, [r7, #0]
 810f848:	3304      	adds	r3, #4
 810f84a:	687a      	ldr	r2, [r7, #4]
 810f84c:	6812      	ldr	r2, [r2, #0]
 810f84e:	601a      	str	r2, [r3, #0]
		buffer[2] = humidity;
 810f850:	683b      	ldr	r3, [r7, #0]
 810f852:	3308      	adds	r3, #8
 810f854:	687a      	ldr	r2, [r7, #4]
 810f856:	6892      	ldr	r2, [r2, #8]
 810f858:	601a      	str	r2, [r3, #0]
		return buffer;
 810f85a:	683b      	ldr	r3, [r7, #0]
	}
 810f85c:	4618      	mov	r0, r3
 810f85e:	370c      	adds	r7, #12
 810f860:	46bd      	mov	sp, r7
 810f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f866:	4770      	bx	lr

0810f868 <_ZN15BarometerThread4initEv>:
#include "Debug/Debug.h"


static char cbuf[128];

void BarometerThread::init() {
 810f868:	b580      	push	{r7, lr}
 810f86a:	b082      	sub	sp, #8
 810f86c:	af00      	add	r7, sp, #0
 810f86e:	6078      	str	r0, [r7, #4]
	bmp280_init_default_params(&bmp280.params);
 810f870:	687b      	ldr	r3, [r7, #4]
 810f872:	3338      	adds	r3, #56	; 0x38
 810f874:	4618      	mov	r0, r3
 810f876:	f7fc fa21 	bl	810bcbc <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 810f87a:	687b      	ldr	r3, [r7, #4]
 810f87c:	2276      	movs	r2, #118	; 0x76
 810f87e:	861a      	strh	r2, [r3, #48]	; 0x30
	bmp280.i2c = hi2c;
 810f880:	687b      	ldr	r3, [r7, #4]
 810f882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810f884:	687b      	ldr	r3, [r7, #4]
 810f886:	635a      	str	r2, [r3, #52]	; 0x34

	//portENTER_CRITICAL();
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810f888:	687b      	ldr	r3, [r7, #4]
 810f88a:	f103 020c 	add.w	r2, r3, #12
 810f88e:	687b      	ldr	r3, [r7, #4]
 810f890:	3338      	adds	r3, #56	; 0x38
 810f892:	4619      	mov	r1, r3
 810f894:	4610      	mov	r0, r2
 810f896:	f7fc fb8c 	bl	810bfb2 <bmp280_init>
 810f89a:	4603      	mov	r3, r0
 810f89c:	f083 0301 	eor.w	r3, r3, #1
 810f8a0:	b2db      	uxtb	r3, r3
 810f8a2:	2b00      	cmp	r3, #0
 810f8a4:	d009      	beq.n	810f8ba <_ZN15BarometerThread4initEv+0x52>
		//portEXIT_CRITICAL();
		println("BMP280 initialization failed");
 810f8a6:	687b      	ldr	r3, [r7, #4]
 810f8a8:	4908      	ldr	r1, [pc, #32]	; (810f8cc <_ZN15BarometerThread4initEv+0x64>)
 810f8aa:	4618      	mov	r0, r3
 810f8ac:	f000 fd22 	bl	81102f4 <_ZN6Thread7printlnEPKcz>
	  	osDelay(500);
 810f8b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810f8b4:	f7f9 fb2a 	bl	8108f0c <osDelay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 810f8b8:	e7e6      	b.n	810f888 <_ZN15BarometerThread4initEv+0x20>
	}
	//portEXIT_CRITICAL();

	println("BMP280 initialized");
 810f8ba:	687b      	ldr	r3, [r7, #4]
 810f8bc:	4904      	ldr	r1, [pc, #16]	; (810f8d0 <_ZN15BarometerThread4initEv+0x68>)
 810f8be:	4618      	mov	r0, r3
 810f8c0:	f000 fd18 	bl	81102f4 <_ZN6Thread7printlnEPKcz>
}
 810f8c4:	bf00      	nop
 810f8c6:	3708      	adds	r7, #8
 810f8c8:	46bd      	mov	sp, r7
 810f8ca:	bd80      	pop	{r7, pc}
 810f8cc:	08113f00 	.word	0x08113f00
 810f8d0:	08113f20 	.word	0x08113f20

0810f8d4 <_ZN15BarometerThread4loopEv>:

static Avionics_BaroTempPacket packet;
static BaroData data;
void BarometerThread::loop() {
 810f8d4:	b590      	push	{r4, r7, lr}
 810f8d6:	b083      	sub	sp, #12
 810f8d8:	af00      	add	r7, sp, #0
 810f8da:	6078      	str	r0, [r7, #4]
	bmp280_read_float(&bmp280, &data.temperature, &data.pressure, &data.humidity);
 810f8dc:	687b      	ldr	r3, [r7, #4]
 810f8de:	f103 000c 	add.w	r0, r3, #12
 810f8e2:	4b0f      	ldr	r3, [pc, #60]	; (810f920 <_ZN15BarometerThread4loopEv+0x4c>)
 810f8e4:	4a0f      	ldr	r2, [pc, #60]	; (810f924 <_ZN15BarometerThread4loopEv+0x50>)
 810f8e6:	4910      	ldr	r1, [pc, #64]	; (810f928 <_ZN15BarometerThread4loopEv+0x54>)
 810f8e8:	f7fc feb8 	bl	810c65c <bmp280_read_float>

	println("%s", data.toString(cbuf));
 810f8ec:	687c      	ldr	r4, [r7, #4]
 810f8ee:	490f      	ldr	r1, [pc, #60]	; (810f92c <_ZN15BarometerThread4loopEv+0x58>)
 810f8f0:	480d      	ldr	r0, [pc, #52]	; (810f928 <_ZN15BarometerThread4loopEv+0x54>)
 810f8f2:	f7ff ff71 	bl	810f7d8 <_ZN8BaroData8toStringEPc>
 810f8f6:	4603      	mov	r3, r0
 810f8f8:	461a      	mov	r2, r3
 810f8fa:	490d      	ldr	r1, [pc, #52]	; (810f930 <_ZN15BarometerThread4loopEv+0x5c>)
 810f8fc:	4620      	mov	r0, r4
 810f8fe:	f000 fcf9 	bl	81102f4 <_ZN6Thread7printlnEPKcz>

	data.toArray((float*) &packet);
 810f902:	490c      	ldr	r1, [pc, #48]	; (810f934 <_ZN15BarometerThread4loopEv+0x60>)
 810f904:	4808      	ldr	r0, [pc, #32]	; (810f928 <_ZN15BarometerThread4loopEv+0x54>)
 810f906:	f7ff ff95 	bl	810f834 <_ZN8BaroData7toArrayEPf>

	network.send(&packet);
 810f90a:	490a      	ldr	r1, [pc, #40]	; (810f934 <_ZN15BarometerThread4loopEv+0x60>)
 810f90c:	480a      	ldr	r0, [pc, #40]	; (810f938 <_ZN15BarometerThread4loopEv+0x64>)
 810f90e:	f7ff f9d9 	bl	810ecc4 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_>

	osDelay(200);
 810f912:	20c8      	movs	r0, #200	; 0xc8
 810f914:	f7f9 fafa 	bl	8108f0c <osDelay>
}
 810f918:	bf00      	nop
 810f91a:	370c      	adds	r7, #12
 810f91c:	46bd      	mov	sp, r7
 810f91e:	bd90      	pop	{r4, r7, pc}
 810f920:	100048bc 	.word	0x100048bc
 810f924:	100048b8 	.word	0x100048b8
 810f928:	100048b4 	.word	0x100048b4
 810f92c:	1000482c 	.word	0x1000482c
 810f930:	08113f34 	.word	0x08113f34
 810f934:	100048ac 	.word	0x100048ac
 810f938:	10004f74 	.word	0x10004f74

0810f93c <_ZN6Vector8toStringEPc>:
	char* toString(char* buffer) {
 810f93c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810f940:	b086      	sub	sp, #24
 810f942:	af04      	add	r7, sp, #16
 810f944:	6078      	str	r0, [r7, #4]
 810f946:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "[%f %f %f]", x, y, z);
 810f948:	687b      	ldr	r3, [r7, #4]
 810f94a:	681b      	ldr	r3, [r3, #0]
 810f94c:	4618      	mov	r0, r3
 810f94e:	f7f0 fe93 	bl	8100678 <__aeabi_f2d>
 810f952:	4680      	mov	r8, r0
 810f954:	4689      	mov	r9, r1
 810f956:	687b      	ldr	r3, [r7, #4]
 810f958:	685b      	ldr	r3, [r3, #4]
 810f95a:	4618      	mov	r0, r3
 810f95c:	f7f0 fe8c 	bl	8100678 <__aeabi_f2d>
 810f960:	4604      	mov	r4, r0
 810f962:	460d      	mov	r5, r1
 810f964:	687b      	ldr	r3, [r7, #4]
 810f966:	689b      	ldr	r3, [r3, #8]
 810f968:	4618      	mov	r0, r3
 810f96a:	f7f0 fe85 	bl	8100678 <__aeabi_f2d>
 810f96e:	4602      	mov	r2, r0
 810f970:	460b      	mov	r3, r1
 810f972:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810f976:	e9cd 4500 	strd	r4, r5, [sp]
 810f97a:	4642      	mov	r2, r8
 810f97c:	464b      	mov	r3, r9
 810f97e:	4905      	ldr	r1, [pc, #20]	; (810f994 <_ZN6Vector8toStringEPc+0x58>)
 810f980:	6838      	ldr	r0, [r7, #0]
 810f982:	f001 fdef 	bl	8111564 <siprintf>
		return buffer;
 810f986:	683b      	ldr	r3, [r7, #0]
	}
 810f988:	4618      	mov	r0, r3
 810f98a:	3708      	adds	r7, #8
 810f98c:	46bd      	mov	sp, r7
 810f98e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810f992:	bf00      	nop
 810f994:	08113f38 	.word	0x08113f38

0810f998 <_ZN6Vector7toArrayEPf>:
	float* toArray(float* buffer) {
 810f998:	b480      	push	{r7}
 810f99a:	b083      	sub	sp, #12
 810f99c:	af00      	add	r7, sp, #0
 810f99e:	6078      	str	r0, [r7, #4]
 810f9a0:	6039      	str	r1, [r7, #0]
		buffer[0] = x;
 810f9a2:	687b      	ldr	r3, [r7, #4]
 810f9a4:	681a      	ldr	r2, [r3, #0]
 810f9a6:	683b      	ldr	r3, [r7, #0]
 810f9a8:	601a      	str	r2, [r3, #0]
		buffer[1] = y;
 810f9aa:	683b      	ldr	r3, [r7, #0]
 810f9ac:	3304      	adds	r3, #4
 810f9ae:	687a      	ldr	r2, [r7, #4]
 810f9b0:	6852      	ldr	r2, [r2, #4]
 810f9b2:	601a      	str	r2, [r3, #0]
		buffer[2] = z;
 810f9b4:	683b      	ldr	r3, [r7, #0]
 810f9b6:	3308      	adds	r3, #8
 810f9b8:	687a      	ldr	r2, [r7, #4]
 810f9ba:	6892      	ldr	r2, [r2, #8]
 810f9bc:	601a      	str	r2, [r3, #0]
		return buffer;
 810f9be:	683b      	ldr	r3, [r7, #0]
	}
 810f9c0:	4618      	mov	r0, r3
 810f9c2:	370c      	adds	r7, #12
 810f9c4:	46bd      	mov	sp, r7
 810f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f9ca:	4770      	bx	lr

0810f9cc <_ZN7IMUData8toStringEPc>:
	char* toString(char* buffer) {
 810f9cc:	b5b0      	push	{r4, r5, r7, lr}
 810f9ce:	b084      	sub	sp, #16
 810f9d0:	af02      	add	r7, sp, #8
 810f9d2:	6078      	str	r0, [r7, #4]
 810f9d4:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Acc: %s, Ang: %s, Mag: %s", accel.toString(buf), gyro.toString(buf + 32), mag.toString(buf + 64));
 810f9d6:	687b      	ldr	r3, [r7, #4]
 810f9d8:	4910      	ldr	r1, [pc, #64]	; (810fa1c <_ZN7IMUData8toStringEPc+0x50>)
 810f9da:	4618      	mov	r0, r3
 810f9dc:	f7ff ffae 	bl	810f93c <_ZN6Vector8toStringEPc>
 810f9e0:	4604      	mov	r4, r0
 810f9e2:	687b      	ldr	r3, [r7, #4]
 810f9e4:	330c      	adds	r3, #12
 810f9e6:	4a0e      	ldr	r2, [pc, #56]	; (810fa20 <_ZN7IMUData8toStringEPc+0x54>)
 810f9e8:	4611      	mov	r1, r2
 810f9ea:	4618      	mov	r0, r3
 810f9ec:	f7ff ffa6 	bl	810f93c <_ZN6Vector8toStringEPc>
 810f9f0:	4605      	mov	r5, r0
 810f9f2:	687b      	ldr	r3, [r7, #4]
 810f9f4:	3318      	adds	r3, #24
 810f9f6:	4a0b      	ldr	r2, [pc, #44]	; (810fa24 <_ZN7IMUData8toStringEPc+0x58>)
 810f9f8:	4611      	mov	r1, r2
 810f9fa:	4618      	mov	r0, r3
 810f9fc:	f7ff ff9e 	bl	810f93c <_ZN6Vector8toStringEPc>
 810fa00:	4603      	mov	r3, r0
 810fa02:	9300      	str	r3, [sp, #0]
 810fa04:	462b      	mov	r3, r5
 810fa06:	4622      	mov	r2, r4
 810fa08:	4907      	ldr	r1, [pc, #28]	; (810fa28 <_ZN7IMUData8toStringEPc+0x5c>)
 810fa0a:	6838      	ldr	r0, [r7, #0]
 810fa0c:	f001 fdaa 	bl	8111564 <siprintf>
		return buffer;
 810fa10:	683b      	ldr	r3, [r7, #0]
	}
 810fa12:	4618      	mov	r0, r3
 810fa14:	3708      	adds	r7, #8
 810fa16:	46bd      	mov	sp, r7
 810fa18:	bdb0      	pop	{r4, r5, r7, pc}
 810fa1a:	bf00      	nop
 810fa1c:	100048c0 	.word	0x100048c0
 810fa20:	100048e0 	.word	0x100048e0
 810fa24:	10004900 	.word	0x10004900
 810fa28:	08113f44 	.word	0x08113f44

0810fa2c <_ZN7IMUData7toArrayEPf>:
	float* toArray(float* buffer) {
 810fa2c:	b580      	push	{r7, lr}
 810fa2e:	b082      	sub	sp, #8
 810fa30:	af00      	add	r7, sp, #0
 810fa32:	6078      	str	r0, [r7, #4]
 810fa34:	6039      	str	r1, [r7, #0]
		accel.toArray(buffer);
 810fa36:	687b      	ldr	r3, [r7, #4]
 810fa38:	6839      	ldr	r1, [r7, #0]
 810fa3a:	4618      	mov	r0, r3
 810fa3c:	f7ff ffac 	bl	810f998 <_ZN6Vector7toArrayEPf>
		gyro.toArray(buffer + 3);
 810fa40:	687b      	ldr	r3, [r7, #4]
 810fa42:	f103 020c 	add.w	r2, r3, #12
 810fa46:	683b      	ldr	r3, [r7, #0]
 810fa48:	330c      	adds	r3, #12
 810fa4a:	4619      	mov	r1, r3
 810fa4c:	4610      	mov	r0, r2
 810fa4e:	f7ff ffa3 	bl	810f998 <_ZN6Vector7toArrayEPf>
		mag.toArray(buffer + 6);
 810fa52:	687b      	ldr	r3, [r7, #4]
 810fa54:	f103 0218 	add.w	r2, r3, #24
 810fa58:	683b      	ldr	r3, [r7, #0]
 810fa5a:	3318      	adds	r3, #24
 810fa5c:	4619      	mov	r1, r3
 810fa5e:	4610      	mov	r0, r2
 810fa60:	f7ff ff9a 	bl	810f998 <_ZN6Vector7toArrayEPf>
		return buffer;
 810fa64:	683b      	ldr	r3, [r7, #0]
	}
 810fa66:	4618      	mov	r0, r3
 810fa68:	3708      	adds	r7, #8
 810fa6a:	46bd      	mov	sp, r7
 810fa6c:	bd80      	pop	{r7, pc}
	...

0810fa70 <_ZN9IMUThread4initEv>:
#include "Telemetry.h"


static char cbuf[256];

void IMUThread::init() {
 810fa70:	b590      	push	{r4, r7, lr}
 810fa72:	b087      	sub	sp, #28
 810fa74:	af00      	add	r7, sp, #0
 810fa76:	6078      	str	r0, [r7, #4]
	bno055_assignI2C(this->hi2c);
 810fa78:	687b      	ldr	r3, [r7, #4]
 810fa7a:	68db      	ldr	r3, [r3, #12]
 810fa7c:	4618      	mov	r0, r3
 810fa7e:	f7fd f8b5 	bl	810cbec <bno055_assignI2C>
	bno055_setup();
 810fa82:	f7fc fe77 	bl	810c774 <bno055_setup>
	bno055_setOperationModeNDOF();
 810fa86:	f7fc fe62 	bl	810c74e <bno055_setOperationModeNDOF>

	BaroData data;
	println("%s", data.toString(cbuf));
 810fa8a:	687c      	ldr	r4, [r7, #4]
 810fa8c:	f107 030c 	add.w	r3, r7, #12
 810fa90:	4917      	ldr	r1, [pc, #92]	; (810faf0 <_ZN9IMUThread4initEv+0x80>)
 810fa92:	4618      	mov	r0, r3
 810fa94:	f7ff fea0 	bl	810f7d8 <_ZN8BaroData8toStringEPc>
 810fa98:	4603      	mov	r3, r0
 810fa9a:	461a      	mov	r2, r3
 810fa9c:	4915      	ldr	r1, [pc, #84]	; (810faf4 <_ZN9IMUThread4initEv+0x84>)
 810fa9e:	4620      	mov	r0, r4
 810faa0:	f000 fc28 	bl	81102f4 <_ZN6Thread7printlnEPKcz>


	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810faa4:	f7fc fe83 	bl	810c7ae <bno055_getSystemError>
 810faa8:	4603      	mov	r3, r0
 810faaa:	2b00      	cmp	r3, #0
 810faac:	bf14      	ite	ne
 810faae:	2301      	movne	r3, #1
 810fab0:	2300      	moveq	r3, #0
 810fab2:	b2db      	uxtb	r3, r3
 810fab4:	2b00      	cmp	r3, #0
 810fab6:	d012      	beq.n	810fade <_ZN9IMUThread4initEv+0x6e>
		osDelay(500);
 810fab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810fabc:	f7f9 fa26 	bl	8108f0c <osDelay>
		println("BNO055 initialization failed");
 810fac0:	687b      	ldr	r3, [r7, #4]
 810fac2:	490d      	ldr	r1, [pc, #52]	; (810faf8 <_ZN9IMUThread4initEv+0x88>)
 810fac4:	4618      	mov	r0, r3
 810fac6:	f000 fc15 	bl	81102f4 <_ZN6Thread7printlnEPKcz>

		bno055_assignI2C(this->hi2c);
 810faca:	687b      	ldr	r3, [r7, #4]
 810facc:	68db      	ldr	r3, [r3, #12]
 810face:	4618      	mov	r0, r3
 810fad0:	f7fd f88c 	bl	810cbec <bno055_assignI2C>
		bno055_setup();
 810fad4:	f7fc fe4e 	bl	810c774 <bno055_setup>
		bno055_setOperationModeNDOF();
 810fad8:	f7fc fe39 	bl	810c74e <bno055_setOperationModeNDOF>
	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810fadc:	e7e2      	b.n	810faa4 <_ZN9IMUThread4initEv+0x34>
	}

	println("BNO055 initialized");
 810fade:	687b      	ldr	r3, [r7, #4]
 810fae0:	4906      	ldr	r1, [pc, #24]	; (810fafc <_ZN9IMUThread4initEv+0x8c>)
 810fae2:	4618      	mov	r0, r3
 810fae4:	f000 fc06 	bl	81102f4 <_ZN6Thread7printlnEPKcz>
}
 810fae8:	bf00      	nop
 810faea:	371c      	adds	r7, #28
 810faec:	46bd      	mov	sp, r7
 810faee:	bd90      	pop	{r4, r7, pc}
 810faf0:	10004920 	.word	0x10004920
 810faf4:	08113f7c 	.word	0x08113f7c
 810faf8:	08113f80 	.word	0x08113f80
 810fafc:	08113fa0 	.word	0x08113fa0

0810fb00 <_ZN9IMUThread4loopEv>:

void IMUThread::loop() {
 810fb00:	b590      	push	{r4, r7, lr}
 810fb02:	b0a5      	sub	sp, #148	; 0x94
 810fb04:	af00      	add	r7, sp, #0
 810fb06:	6078      	str	r0, [r7, #4]
	static IMUData data;

	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 810fb08:	f7fc ffa6 	bl	810ca58 <bno055_getVectorAccelerometer>
 810fb0c:	eeb0 4a40 	vmov.f32	s8, s0
 810fb10:	eef0 4a60 	vmov.f32	s9, s1
 810fb14:	eeb0 5a41 	vmov.f32	s10, s2
 810fb18:	eef0 5a61 	vmov.f32	s11, s3
 810fb1c:	eeb0 6a42 	vmov.f32	s12, s4
 810fb20:	eef0 6a62 	vmov.f32	s13, s5
 810fb24:	eeb0 7a43 	vmov.f32	s14, s6
 810fb28:	eef0 7a63 	vmov.f32	s15, s7
 810fb2c:	ed87 4b0c 	vstr	d4, [r7, #48]	; 0x30
 810fb30:	ed87 5b0e 	vstr	d5, [r7, #56]	; 0x38
 810fb34:	ed87 6b10 	vstr	d6, [r7, #64]	; 0x40
 810fb38:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 810fb3c:	4c64      	ldr	r4, [pc, #400]	; (810fcd0 <_ZN9IMUThread4loopEv+0x1d0>)
 810fb3e:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 810fb42:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 810fb46:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 810fb4a:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 810fb4e:	eeb0 0a44 	vmov.f32	s0, s8
 810fb52:	eef0 0a64 	vmov.f32	s1, s9
 810fb56:	eeb0 1a45 	vmov.f32	s2, s10
 810fb5a:	eef0 1a65 	vmov.f32	s3, s11
 810fb5e:	eeb0 2a46 	vmov.f32	s4, s12
 810fb62:	eef0 2a66 	vmov.f32	s5, s13
 810fb66:	eeb0 3a47 	vmov.f32	s6, s14
 810fb6a:	eef0 3a67 	vmov.f32	s7, s15
 810fb6e:	6878      	ldr	r0, [r7, #4]
 810fb70:	f000 f8b6 	bl	810fce0 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810fb74:	eef0 6a40 	vmov.f32	s13, s0
 810fb78:	eeb0 7a60 	vmov.f32	s14, s1
 810fb7c:	eef0 7a41 	vmov.f32	s15, s2
 810fb80:	edc4 6a00 	vstr	s13, [r4]
 810fb84:	ed84 7a01 	vstr	s14, [r4, #4]
 810fb88:	edc4 7a02 	vstr	s15, [r4, #8]
	data.gyro = bnoVectorToVector(bno055_getVectorEuler());
 810fb8c:	f7fc ffa7 	bl	810cade <bno055_getVectorEuler>
 810fb90:	eeb0 4a40 	vmov.f32	s8, s0
 810fb94:	eef0 4a60 	vmov.f32	s9, s1
 810fb98:	eeb0 5a41 	vmov.f32	s10, s2
 810fb9c:	eef0 5a61 	vmov.f32	s11, s3
 810fba0:	eeb0 6a42 	vmov.f32	s12, s4
 810fba4:	eef0 6a62 	vmov.f32	s13, s5
 810fba8:	eeb0 7a43 	vmov.f32	s14, s6
 810fbac:	eef0 7a63 	vmov.f32	s15, s7
 810fbb0:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 810fbb4:	ed87 5b16 	vstr	d5, [r7, #88]	; 0x58
 810fbb8:	ed87 6b18 	vstr	d6, [r7, #96]	; 0x60
 810fbbc:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
 810fbc0:	4c43      	ldr	r4, [pc, #268]	; (810fcd0 <_ZN9IMUThread4loopEv+0x1d0>)
 810fbc2:	ed97 4b14 	vldr	d4, [r7, #80]	; 0x50
 810fbc6:	ed97 5b16 	vldr	d5, [r7, #88]	; 0x58
 810fbca:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 810fbce:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 810fbd2:	eeb0 0a44 	vmov.f32	s0, s8
 810fbd6:	eef0 0a64 	vmov.f32	s1, s9
 810fbda:	eeb0 1a45 	vmov.f32	s2, s10
 810fbde:	eef0 1a65 	vmov.f32	s3, s11
 810fbe2:	eeb0 2a46 	vmov.f32	s4, s12
 810fbe6:	eef0 2a66 	vmov.f32	s5, s13
 810fbea:	eeb0 3a47 	vmov.f32	s6, s14
 810fbee:	eef0 3a67 	vmov.f32	s7, s15
 810fbf2:	6878      	ldr	r0, [r7, #4]
 810fbf4:	f000 f874 	bl	810fce0 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810fbf8:	eef0 6a40 	vmov.f32	s13, s0
 810fbfc:	eeb0 7a60 	vmov.f32	s14, s1
 810fc00:	eef0 7a41 	vmov.f32	s15, s2
 810fc04:	edc4 6a03 	vstr	s13, [r4, #12]
 810fc08:	ed84 7a04 	vstr	s14, [r4, #16]
 810fc0c:	edc4 7a05 	vstr	s15, [r4, #20]
	data.mag = bnoVectorToVector(bno055_getVectorGravity());
 810fc10:	f7fc ffa8 	bl	810cb64 <bno055_getVectorGravity>
 810fc14:	eeb0 4a40 	vmov.f32	s8, s0
 810fc18:	eef0 4a60 	vmov.f32	s9, s1
 810fc1c:	eeb0 5a41 	vmov.f32	s10, s2
 810fc20:	eef0 5a61 	vmov.f32	s11, s3
 810fc24:	eeb0 6a42 	vmov.f32	s12, s4
 810fc28:	eef0 6a62 	vmov.f32	s13, s5
 810fc2c:	eeb0 7a43 	vmov.f32	s14, s6
 810fc30:	eef0 7a63 	vmov.f32	s15, s7
 810fc34:	ed87 4b1c 	vstr	d4, [r7, #112]	; 0x70
 810fc38:	ed87 5b1e 	vstr	d5, [r7, #120]	; 0x78
 810fc3c:	ed87 6b20 	vstr	d6, [r7, #128]	; 0x80
 810fc40:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
 810fc44:	4c22      	ldr	r4, [pc, #136]	; (810fcd0 <_ZN9IMUThread4loopEv+0x1d0>)
 810fc46:	ed97 4b1c 	vldr	d4, [r7, #112]	; 0x70
 810fc4a:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 810fc4e:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 810fc52:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 810fc56:	eeb0 0a44 	vmov.f32	s0, s8
 810fc5a:	eef0 0a64 	vmov.f32	s1, s9
 810fc5e:	eeb0 1a45 	vmov.f32	s2, s10
 810fc62:	eef0 1a65 	vmov.f32	s3, s11
 810fc66:	eeb0 2a46 	vmov.f32	s4, s12
 810fc6a:	eef0 2a66 	vmov.f32	s5, s13
 810fc6e:	eeb0 3a47 	vmov.f32	s6, s14
 810fc72:	eef0 3a67 	vmov.f32	s7, s15
 810fc76:	6878      	ldr	r0, [r7, #4]
 810fc78:	f000 f832 	bl	810fce0 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810fc7c:	eef0 6a40 	vmov.f32	s13, s0
 810fc80:	eeb0 7a60 	vmov.f32	s14, s1
 810fc84:	eef0 7a41 	vmov.f32	s15, s2
 810fc88:	edc4 6a06 	vstr	s13, [r4, #24]
 810fc8c:	ed84 7a07 	vstr	s14, [r4, #28]
 810fc90:	edc4 7a08 	vstr	s15, [r4, #32]

	println("%s", data.toString(cbuf));
 810fc94:	687c      	ldr	r4, [r7, #4]
 810fc96:	490f      	ldr	r1, [pc, #60]	; (810fcd4 <_ZN9IMUThread4loopEv+0x1d4>)
 810fc98:	480d      	ldr	r0, [pc, #52]	; (810fcd0 <_ZN9IMUThread4loopEv+0x1d0>)
 810fc9a:	f7ff fe97 	bl	810f9cc <_ZN7IMUData8toStringEPc>
 810fc9e:	4603      	mov	r3, r0
 810fca0:	461a      	mov	r2, r3
 810fca2:	490d      	ldr	r1, [pc, #52]	; (810fcd8 <_ZN9IMUThread4loopEv+0x1d8>)
 810fca4:	4620      	mov	r0, r4
 810fca6:	f000 fb25 	bl	81102f4 <_ZN6Thread7printlnEPKcz>

	Avionics_AccelMagPacket packet;
	data.toArray((float*) &packet);
 810fcaa:	f107 030c 	add.w	r3, r7, #12
 810fcae:	4619      	mov	r1, r3
 810fcb0:	4807      	ldr	r0, [pc, #28]	; (810fcd0 <_ZN9IMUThread4loopEv+0x1d0>)
 810fcb2:	f7ff febb 	bl	810fa2c <_ZN7IMUData7toArrayEPf>

	network.send(&packet);
 810fcb6:	f107 030c 	add.w	r3, r7, #12
 810fcba:	4619      	mov	r1, r3
 810fcbc:	4807      	ldr	r0, [pc, #28]	; (810fcdc <_ZN9IMUThread4loopEv+0x1dc>)
 810fcbe:	f7ff f879 	bl	810edb4 <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_>

	osDelay(100);
 810fcc2:	2064      	movs	r0, #100	; 0x64
 810fcc4:	f7f9 f922 	bl	8108f0c <osDelay>
}
 810fcc8:	bf00      	nop
 810fcca:	3794      	adds	r7, #148	; 0x94
 810fccc:	46bd      	mov	sp, r7
 810fcce:	bd90      	pop	{r4, r7, pc}
 810fcd0:	10004a20 	.word	0x10004a20
 810fcd4:	10004920 	.word	0x10004920
 810fcd8:	08113f7c 	.word	0x08113f7c
 810fcdc:	10004f74 	.word	0x10004f74

0810fce0 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>:


Vector IMUThread::bnoVectorToVector(bno055_vector_t v) {
 810fce0:	b590      	push	{r4, r7, lr}
 810fce2:	b095      	sub	sp, #84	; 0x54
 810fce4:	af00      	add	r7, sp, #0
 810fce6:	6378      	str	r0, [r7, #52]	; 0x34
 810fce8:	eeb0 4a40 	vmov.f32	s8, s0
 810fcec:	eef0 4a60 	vmov.f32	s9, s1
 810fcf0:	eeb0 5a41 	vmov.f32	s10, s2
 810fcf4:	eef0 5a61 	vmov.f32	s11, s3
 810fcf8:	eeb0 6a42 	vmov.f32	s12, s4
 810fcfc:	eef0 6a62 	vmov.f32	s13, s5
 810fd00:	eeb0 7a43 	vmov.f32	s14, s6
 810fd04:	eef0 7a63 	vmov.f32	s15, s7
 810fd08:	ed87 4b04 	vstr	d4, [r7, #16]
 810fd0c:	ed87 5b06 	vstr	d5, [r7, #24]
 810fd10:	ed87 6b08 	vstr	d6, [r7, #32]
 810fd14:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	Vector vector;

	vector.x = v.x;
 810fd18:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810fd1c:	4618      	mov	r0, r3
 810fd1e:	4621      	mov	r1, r4
 810fd20:	f7f0 ffda 	bl	8100cd8 <__aeabi_d2f>
 810fd24:	4603      	mov	r3, r0
 810fd26:	63bb      	str	r3, [r7, #56]	; 0x38
	vector.y = v.y;
 810fd28:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 810fd2c:	4618      	mov	r0, r3
 810fd2e:	4621      	mov	r1, r4
 810fd30:	f7f0 ffd2 	bl	8100cd8 <__aeabi_d2f>
 810fd34:	4603      	mov	r3, r0
 810fd36:	63fb      	str	r3, [r7, #60]	; 0x3c
	vector.z = v.z;
 810fd38:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 810fd3c:	4618      	mov	r0, r3
 810fd3e:	4621      	mov	r1, r4
 810fd40:	f7f0 ffca 	bl	8100cd8 <__aeabi_d2f>
 810fd44:	4603      	mov	r3, r0
 810fd46:	643b      	str	r3, [r7, #64]	; 0x40

	return vector;
 810fd48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 810fd4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 810fd50:	ca07      	ldmia	r2, {r0, r1, r2}
 810fd52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810fd56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810fd58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810fd5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810fd5c:	ee06 1a90 	vmov	s13, r1
 810fd60:	ee07 2a10 	vmov	s14, r2
 810fd64:	ee07 3a90 	vmov	s15, r3
}
 810fd68:	eeb0 0a66 	vmov.f32	s0, s13
 810fd6c:	eef0 0a47 	vmov.f32	s1, s14
 810fd70:	eeb0 1a67 	vmov.f32	s2, s15
 810fd74:	3754      	adds	r7, #84	; 0x54
 810fd76:	46bd      	mov	sp, r7
 810fd78:	bd90      	pop	{r4, r7, pc}
	...

0810fd7c <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 810fd7c:	b480      	push	{r7}
 810fd7e:	b083      	sub	sp, #12
 810fd80:	af00      	add	r7, sp, #0
 810fd82:	6078      	str	r0, [r7, #4]
 810fd84:	4a04      	ldr	r2, [pc, #16]	; (810fd98 <_ZN6ThreadD1Ev+0x1c>)
 810fd86:	687b      	ldr	r3, [r7, #4]
 810fd88:	601a      	str	r2, [r3, #0]
 810fd8a:	687b      	ldr	r3, [r7, #4]
 810fd8c:	4618      	mov	r0, r3
 810fd8e:	370c      	adds	r7, #12
 810fd90:	46bd      	mov	sp, r7
 810fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fd96:	4770      	bx	lr
 810fd98:	081144a0 	.word	0x081144a0

0810fd9c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 810fd9c:	b580      	push	{r7, lr}
 810fd9e:	b082      	sub	sp, #8
 810fda0:	af00      	add	r7, sp, #0
 810fda2:	6078      	str	r0, [r7, #4]
 810fda4:	6039      	str	r1, [r7, #0]
 810fda6:	687b      	ldr	r3, [r7, #4]
 810fda8:	4907      	ldr	r1, [pc, #28]	; (810fdc8 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 810fdaa:	4618      	mov	r0, r3
 810fdac:	f000 fa4d 	bl	811024a <_ZN6ThreadC1EPKc>
 810fdb0:	4a06      	ldr	r2, [pc, #24]	; (810fdcc <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 810fdb2:	687b      	ldr	r3, [r7, #4]
 810fdb4:	601a      	str	r2, [r3, #0]
 810fdb6:	687b      	ldr	r3, [r7, #4]
 810fdb8:	683a      	ldr	r2, [r7, #0]
 810fdba:	60da      	str	r2, [r3, #12]
 810fdbc:	687b      	ldr	r3, [r7, #4]
 810fdbe:	4618      	mov	r0, r3
 810fdc0:	3708      	adds	r7, #8
 810fdc2:	46bd      	mov	sp, r7
 810fdc4:	bd80      	pop	{r7, pc}
 810fdc6:	bf00      	nop
 810fdc8:	08113fb4 	.word	0x08113fb4
 810fdcc:	08114384 	.word	0x08114384

0810fdd0 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDef>:
#include "Libraries/BMP280/bmp280.h"


class BarometerThread : Thread {
public:
	BarometerThread(I2C_HandleTypeDef* hi2c) : Thread("Barometer"), bmp280(), hi2c(hi2c) {}
 810fdd0:	b580      	push	{r7, lr}
 810fdd2:	b082      	sub	sp, #8
 810fdd4:	af00      	add	r7, sp, #0
 810fdd6:	6078      	str	r0, [r7, #4]
 810fdd8:	6039      	str	r1, [r7, #0]
 810fdda:	687b      	ldr	r3, [r7, #4]
 810fddc:	490a      	ldr	r1, [pc, #40]	; (810fe08 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDef+0x38>)
 810fdde:	4618      	mov	r0, r3
 810fde0:	f000 fa33 	bl	811024a <_ZN6ThreadC1EPKc>
 810fde4:	4a09      	ldr	r2, [pc, #36]	; (810fe0c <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDef+0x3c>)
 810fde6:	687b      	ldr	r3, [r7, #4]
 810fde8:	601a      	str	r2, [r3, #0]
 810fdea:	687b      	ldr	r3, [r7, #4]
 810fdec:	330c      	adds	r3, #12
 810fdee:	2234      	movs	r2, #52	; 0x34
 810fdf0:	2100      	movs	r1, #0
 810fdf2:	4618      	mov	r0, r3
 810fdf4:	f000 fe91 	bl	8110b1a <memset>
 810fdf8:	687b      	ldr	r3, [r7, #4]
 810fdfa:	683a      	ldr	r2, [r7, #0]
 810fdfc:	641a      	str	r2, [r3, #64]	; 0x40
 810fdfe:	687b      	ldr	r3, [r7, #4]
 810fe00:	4618      	mov	r0, r3
 810fe02:	3708      	adds	r7, #8
 810fe04:	46bd      	mov	sp, r7
 810fe06:	bd80      	pop	{r7, pc}
 810fe08:	08113fc0 	.word	0x08113fc0
 810fe0c:	08114430 	.word	0x08114430

0810fe10 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDef>:
#include "Libraries/BNO055/bno055_stm32.h"
#include "Libraries/BNO055/bno055.h"

class IMUThread : Thread {
public:
	IMUThread(I2C_HandleTypeDef* hi2c) : Thread("IMU"), hi2c(hi2c) {}
 810fe10:	b580      	push	{r7, lr}
 810fe12:	b082      	sub	sp, #8
 810fe14:	af00      	add	r7, sp, #0
 810fe16:	6078      	str	r0, [r7, #4]
 810fe18:	6039      	str	r1, [r7, #0]
 810fe1a:	687b      	ldr	r3, [r7, #4]
 810fe1c:	4907      	ldr	r1, [pc, #28]	; (810fe3c <_ZN9IMUThreadC1EP19__I2C_HandleTypeDef+0x2c>)
 810fe1e:	4618      	mov	r0, r3
 810fe20:	f000 fa13 	bl	811024a <_ZN6ThreadC1EPKc>
 810fe24:	4a06      	ldr	r2, [pc, #24]	; (810fe40 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDef+0x30>)
 810fe26:	687b      	ldr	r3, [r7, #4]
 810fe28:	601a      	str	r2, [r3, #0]
 810fe2a:	687b      	ldr	r3, [r7, #4]
 810fe2c:	683a      	ldr	r2, [r7, #0]
 810fe2e:	60da      	str	r2, [r3, #12]
 810fe30:	687b      	ldr	r3, [r7, #4]
 810fe32:	4618      	mov	r0, r3
 810fe34:	3708      	adds	r7, #8
 810fe36:	46bd      	mov	sp, r7
 810fe38:	bd80      	pop	{r7, pc}
 810fe3a:	bf00      	nop
 810fe3c:	08113fcc 	.word	0x08113fcc
 810fe40:	0811446c 	.word	0x0811446c

0810fe44 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 810fe44:	b580      	push	{r7, lr}
 810fe46:	b082      	sub	sp, #8
 810fe48:	af00      	add	r7, sp, #0
 810fe4a:	6078      	str	r0, [r7, #4]
 810fe4c:	4a05      	ldr	r2, [pc, #20]	; (810fe64 <_ZN14WatchdogThreadD1Ev+0x20>)
 810fe4e:	687b      	ldr	r3, [r7, #4]
 810fe50:	601a      	str	r2, [r3, #0]
 810fe52:	687b      	ldr	r3, [r7, #4]
 810fe54:	4618      	mov	r0, r3
 810fe56:	f7ff ff91 	bl	810fd7c <_ZN6ThreadD1Ev>
 810fe5a:	687b      	ldr	r3, [r7, #4]
 810fe5c:	4618      	mov	r0, r3
 810fe5e:	3708      	adds	r7, #8
 810fe60:	46bd      	mov	sp, r7
 810fe62:	bd80      	pop	{r7, pc}
 810fe64:	08114384 	.word	0x08114384

0810fe68 <__tcf_0>:


#ifdef CORE_CM4
#include "i2c.h"
void initCortexM4() {
	static WatchdogThread watchdog(&hiwdg2);
 810fe68:	b580      	push	{r7, lr}
 810fe6a:	af00      	add	r7, sp, #0
 810fe6c:	4801      	ldr	r0, [pc, #4]	; (810fe74 <__tcf_0+0xc>)
 810fe6e:	f7ff ffe9 	bl	810fe44 <_ZN14WatchdogThreadD1Ev>
 810fe72:	bd80      	pop	{r7, pc}
 810fe74:	10004a44 	.word	0x10004a44

0810fe78 <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 512



class Shell : public Thread {
 810fe78:	b580      	push	{r7, lr}
 810fe7a:	b082      	sub	sp, #8
 810fe7c:	af00      	add	r7, sp, #0
 810fe7e:	6078      	str	r0, [r7, #4]
 810fe80:	4a05      	ldr	r2, [pc, #20]	; (810fe98 <_ZN5ShellD1Ev+0x20>)
 810fe82:	687b      	ldr	r3, [r7, #4]
 810fe84:	601a      	str	r2, [r3, #0]
 810fe86:	687b      	ldr	r3, [r7, #4]
 810fe88:	4618      	mov	r0, r3
 810fe8a:	f7ff ff77 	bl	810fd7c <_ZN6ThreadD1Ev>
 810fe8e:	687b      	ldr	r3, [r7, #4]
 810fe90:	4618      	mov	r0, r3
 810fe92:	3708      	adds	r7, #8
 810fe94:	46bd      	mov	sp, r7
 810fe96:	bd80      	pop	{r7, pc}
 810fe98:	0811401c 	.word	0x0811401c

0810fe9c <__tcf_1>:
	static Shell shell(&huart3, &terminal);
 810fe9c:	b580      	push	{r7, lr}
 810fe9e:	af00      	add	r7, sp, #0
 810fea0:	4801      	ldr	r0, [pc, #4]	; (810fea8 <__tcf_1+0xc>)
 810fea2:	f7ff ffe9 	bl	810fe78 <_ZN5ShellD1Ev>
 810fea6:	bd80      	pop	{r7, pc}
 810fea8:	10004a58 	.word	0x10004a58

0810feac <_ZN9IMUThreadD1Ev>:
class IMUThread : Thread {
 810feac:	b580      	push	{r7, lr}
 810feae:	b082      	sub	sp, #8
 810feb0:	af00      	add	r7, sp, #0
 810feb2:	6078      	str	r0, [r7, #4]
 810feb4:	4a05      	ldr	r2, [pc, #20]	; (810fecc <_ZN9IMUThreadD1Ev+0x20>)
 810feb6:	687b      	ldr	r3, [r7, #4]
 810feb8:	601a      	str	r2, [r3, #0]
 810feba:	687b      	ldr	r3, [r7, #4]
 810febc:	4618      	mov	r0, r3
 810febe:	f7ff ff5d 	bl	810fd7c <_ZN6ThreadD1Ev>
 810fec2:	687b      	ldr	r3, [r7, #4]
 810fec4:	4618      	mov	r0, r3
 810fec6:	3708      	adds	r7, #8
 810fec8:	46bd      	mov	sp, r7
 810feca:	bd80      	pop	{r7, pc}
 810fecc:	0811446c 	.word	0x0811446c

0810fed0 <__tcf_2>:
	static IMUThread imu(&hi2c1);
 810fed0:	b580      	push	{r7, lr}
 810fed2:	af00      	add	r7, sp, #0
 810fed4:	4801      	ldr	r0, [pc, #4]	; (810fedc <__tcf_2+0xc>)
 810fed6:	f7ff ffe9 	bl	810feac <_ZN9IMUThreadD1Ev>
 810feda:	bd80      	pop	{r7, pc}
 810fedc:	10004ec0 	.word	0x10004ec0

0810fee0 <_ZN15BarometerThreadD1Ev>:
class BarometerThread : Thread {
 810fee0:	b580      	push	{r7, lr}
 810fee2:	b082      	sub	sp, #8
 810fee4:	af00      	add	r7, sp, #0
 810fee6:	6078      	str	r0, [r7, #4]
 810fee8:	4a05      	ldr	r2, [pc, #20]	; (810ff00 <_ZN15BarometerThreadD1Ev+0x20>)
 810feea:	687b      	ldr	r3, [r7, #4]
 810feec:	601a      	str	r2, [r3, #0]
 810feee:	687b      	ldr	r3, [r7, #4]
 810fef0:	4618      	mov	r0, r3
 810fef2:	f7ff ff43 	bl	810fd7c <_ZN6ThreadD1Ev>
 810fef6:	687b      	ldr	r3, [r7, #4]
 810fef8:	4618      	mov	r0, r3
 810fefa:	3708      	adds	r7, #8
 810fefc:	46bd      	mov	sp, r7
 810fefe:	bd80      	pop	{r7, pc}
 810ff00:	08114430 	.word	0x08114430

0810ff04 <__tcf_3>:
	static BarometerThread barometer(&hi2c1);
 810ff04:	b580      	push	{r7, lr}
 810ff06:	af00      	add	r7, sp, #0
 810ff08:	4801      	ldr	r0, [pc, #4]	; (810ff10 <__tcf_3+0xc>)
 810ff0a:	f7ff ffe9 	bl	810fee0 <_ZN15BarometerThreadD1Ev>
 810ff0e:	bd80      	pop	{r7, pc}
 810ff10:	10004ed4 	.word	0x10004ed4

0810ff14 <_ZN11ADC24ThreadD1Ev>:
#include "DataStructures.h"

#include "Libraries/HX711/hx711.h"


class ADC24Thread : Thread {
 810ff14:	b580      	push	{r7, lr}
 810ff16:	b082      	sub	sp, #8
 810ff18:	af00      	add	r7, sp, #0
 810ff1a:	6078      	str	r0, [r7, #4]
 810ff1c:	4a05      	ldr	r2, [pc, #20]	; (810ff34 <_ZN11ADC24ThreadD1Ev+0x20>)
 810ff1e:	687b      	ldr	r3, [r7, #4]
 810ff20:	601a      	str	r2, [r3, #0]
 810ff22:	687b      	ldr	r3, [r7, #4]
 810ff24:	4618      	mov	r0, r3
 810ff26:	f7ff ff29 	bl	810fd7c <_ZN6ThreadD1Ev>
 810ff2a:	687b      	ldr	r3, [r7, #4]
 810ff2c:	4618      	mov	r0, r3
 810ff2e:	3708      	adds	r7, #8
 810ff30:	46bd      	mov	sp, r7
 810ff32:	bd80      	pop	{r7, pc}
 810ff34:	081143f8 	.word	0x081143f8

0810ff38 <__tcf_4>:
	static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11);
 810ff38:	b580      	push	{r7, lr}
 810ff3a:	af00      	add	r7, sp, #0
 810ff3c:	4801      	ldr	r0, [pc, #4]	; (810ff44 <__tcf_4+0xc>)
 810ff3e:	f7ff ffe9 	bl	810ff14 <_ZN11ADC24ThreadD1Ev>
 810ff42:	bd80      	pop	{r7, pc}
 810ff44:	10004f1c 	.word	0x10004f1c

0810ff48 <_ZN11ADC16ThreadD1Ev>:

#include "Libraries/ADS1113/ads1113.h"

static const float maxVoltage = 5.5; //maximum input voltage on AIN0

class ADC16Thread : Thread {
 810ff48:	b580      	push	{r7, lr}
 810ff4a:	b082      	sub	sp, #8
 810ff4c:	af00      	add	r7, sp, #0
 810ff4e:	6078      	str	r0, [r7, #4]
 810ff50:	4a05      	ldr	r2, [pc, #20]	; (810ff68 <_ZN11ADC16ThreadD1Ev+0x20>)
 810ff52:	687b      	ldr	r3, [r7, #4]
 810ff54:	601a      	str	r2, [r3, #0]
 810ff56:	687b      	ldr	r3, [r7, #4]
 810ff58:	4618      	mov	r0, r3
 810ff5a:	f7ff ff0f 	bl	810fd7c <_ZN6ThreadD1Ev>
 810ff5e:	687b      	ldr	r3, [r7, #4]
 810ff60:	4618      	mov	r0, r3
 810ff62:	3708      	adds	r7, #8
 810ff64:	46bd      	mov	sp, r7
 810ff66:	bd80      	pop	{r7, pc}
 810ff68:	081143c0 	.word	0x081143c0

0810ff6c <__tcf_5>:
	static ADC16Thread potentiometer(&hi2c1);
 810ff6c:	b580      	push	{r7, lr}
 810ff6e:	af00      	add	r7, sp, #0
 810ff70:	4801      	ldr	r0, [pc, #4]	; (810ff78 <__tcf_5+0xc>)
 810ff72:	f7ff ffe9 	bl	810ff48 <_ZN11ADC16ThreadD1Ev>
 810ff76:	bd80      	pop	{r7, pc}
 810ff78:	10004f30 	.word	0x10004f30

0810ff7c <initCortexM4>:
void initCortexM4() {
 810ff7c:	b580      	push	{r7, lr}
 810ff7e:	b082      	sub	sp, #8
 810ff80:	af02      	add	r7, sp, #8
	static WatchdogThread watchdog(&hiwdg2);
 810ff82:	4b6e      	ldr	r3, [pc, #440]	; (811013c <initCortexM4+0x1c0>)
 810ff84:	781b      	ldrb	r3, [r3, #0]
 810ff86:	f3bf 8f5b 	dmb	ish
 810ff8a:	b2db      	uxtb	r3, r3
 810ff8c:	f003 0301 	and.w	r3, r3, #1
 810ff90:	2b00      	cmp	r3, #0
 810ff92:	bf0c      	ite	eq
 810ff94:	2301      	moveq	r3, #1
 810ff96:	2300      	movne	r3, #0
 810ff98:	b2db      	uxtb	r3, r3
 810ff9a:	2b00      	cmp	r3, #0
 810ff9c:	d014      	beq.n	810ffc8 <initCortexM4+0x4c>
 810ff9e:	4867      	ldr	r0, [pc, #412]	; (811013c <initCortexM4+0x1c0>)
 810ffa0:	f000 fc62 	bl	8110868 <__cxa_guard_acquire>
 810ffa4:	4603      	mov	r3, r0
 810ffa6:	2b00      	cmp	r3, #0
 810ffa8:	bf14      	ite	ne
 810ffaa:	2301      	movne	r3, #1
 810ffac:	2300      	moveq	r3, #0
 810ffae:	b2db      	uxtb	r3, r3
 810ffb0:	2b00      	cmp	r3, #0
 810ffb2:	d009      	beq.n	810ffc8 <initCortexM4+0x4c>
 810ffb4:	4962      	ldr	r1, [pc, #392]	; (8110140 <initCortexM4+0x1c4>)
 810ffb6:	4863      	ldr	r0, [pc, #396]	; (8110144 <initCortexM4+0x1c8>)
 810ffb8:	f7ff fef0 	bl	810fd9c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 810ffbc:	485f      	ldr	r0, [pc, #380]	; (811013c <initCortexM4+0x1c0>)
 810ffbe:	f000 fc5f 	bl	8110880 <__cxa_guard_release>
 810ffc2:	4861      	ldr	r0, [pc, #388]	; (8110148 <initCortexM4+0x1cc>)
 810ffc4:	f000 fd6a 	bl	8110a9c <atexit>
	static Shell shell(&huart3, &terminal);
 810ffc8:	4b60      	ldr	r3, [pc, #384]	; (811014c <initCortexM4+0x1d0>)
 810ffca:	781b      	ldrb	r3, [r3, #0]
 810ffcc:	f3bf 8f5b 	dmb	ish
 810ffd0:	b2db      	uxtb	r3, r3
 810ffd2:	f003 0301 	and.w	r3, r3, #1
 810ffd6:	2b00      	cmp	r3, #0
 810ffd8:	bf0c      	ite	eq
 810ffda:	2301      	moveq	r3, #1
 810ffdc:	2300      	movne	r3, #0
 810ffde:	b2db      	uxtb	r3, r3
 810ffe0:	2b00      	cmp	r3, #0
 810ffe2:	d015      	beq.n	8110010 <initCortexM4+0x94>
 810ffe4:	4859      	ldr	r0, [pc, #356]	; (811014c <initCortexM4+0x1d0>)
 810ffe6:	f000 fc3f 	bl	8110868 <__cxa_guard_acquire>
 810ffea:	4603      	mov	r3, r0
 810ffec:	2b00      	cmp	r3, #0
 810ffee:	bf14      	ite	ne
 810fff0:	2301      	movne	r3, #1
 810fff2:	2300      	moveq	r3, #0
 810fff4:	b2db      	uxtb	r3, r3
 810fff6:	2b00      	cmp	r3, #0
 810fff8:	d00a      	beq.n	8110010 <initCortexM4+0x94>
 810fffa:	4a55      	ldr	r2, [pc, #340]	; (8110150 <initCortexM4+0x1d4>)
 810fffc:	4955      	ldr	r1, [pc, #340]	; (8110154 <initCortexM4+0x1d8>)
 810fffe:	4856      	ldr	r0, [pc, #344]	; (8110158 <initCortexM4+0x1dc>)
 8110000:	f7fb f97c 	bl	810b2fc <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 8110004:	4851      	ldr	r0, [pc, #324]	; (811014c <initCortexM4+0x1d0>)
 8110006:	f000 fc3b 	bl	8110880 <__cxa_guard_release>
 811000a:	4854      	ldr	r0, [pc, #336]	; (811015c <initCortexM4+0x1e0>)
 811000c:	f000 fd46 	bl	8110a9c <atexit>
	static IMUThread imu(&hi2c1);
 8110010:	4b53      	ldr	r3, [pc, #332]	; (8110160 <initCortexM4+0x1e4>)
 8110012:	781b      	ldrb	r3, [r3, #0]
 8110014:	f3bf 8f5b 	dmb	ish
 8110018:	b2db      	uxtb	r3, r3
 811001a:	f003 0301 	and.w	r3, r3, #1
 811001e:	2b00      	cmp	r3, #0
 8110020:	bf0c      	ite	eq
 8110022:	2301      	moveq	r3, #1
 8110024:	2300      	movne	r3, #0
 8110026:	b2db      	uxtb	r3, r3
 8110028:	2b00      	cmp	r3, #0
 811002a:	d014      	beq.n	8110056 <initCortexM4+0xda>
 811002c:	484c      	ldr	r0, [pc, #304]	; (8110160 <initCortexM4+0x1e4>)
 811002e:	f000 fc1b 	bl	8110868 <__cxa_guard_acquire>
 8110032:	4603      	mov	r3, r0
 8110034:	2b00      	cmp	r3, #0
 8110036:	bf14      	ite	ne
 8110038:	2301      	movne	r3, #1
 811003a:	2300      	moveq	r3, #0
 811003c:	b2db      	uxtb	r3, r3
 811003e:	2b00      	cmp	r3, #0
 8110040:	d009      	beq.n	8110056 <initCortexM4+0xda>
 8110042:	4948      	ldr	r1, [pc, #288]	; (8110164 <initCortexM4+0x1e8>)
 8110044:	4848      	ldr	r0, [pc, #288]	; (8110168 <initCortexM4+0x1ec>)
 8110046:	f7ff fee3 	bl	810fe10 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDef>
 811004a:	4845      	ldr	r0, [pc, #276]	; (8110160 <initCortexM4+0x1e4>)
 811004c:	f000 fc18 	bl	8110880 <__cxa_guard_release>
 8110050:	4846      	ldr	r0, [pc, #280]	; (811016c <initCortexM4+0x1f0>)
 8110052:	f000 fd23 	bl	8110a9c <atexit>
	static BarometerThread barometer(&hi2c1);
 8110056:	4b46      	ldr	r3, [pc, #280]	; (8110170 <initCortexM4+0x1f4>)
 8110058:	781b      	ldrb	r3, [r3, #0]
 811005a:	f3bf 8f5b 	dmb	ish
 811005e:	b2db      	uxtb	r3, r3
 8110060:	f003 0301 	and.w	r3, r3, #1
 8110064:	2b00      	cmp	r3, #0
 8110066:	bf0c      	ite	eq
 8110068:	2301      	moveq	r3, #1
 811006a:	2300      	movne	r3, #0
 811006c:	b2db      	uxtb	r3, r3
 811006e:	2b00      	cmp	r3, #0
 8110070:	d014      	beq.n	811009c <initCortexM4+0x120>
 8110072:	483f      	ldr	r0, [pc, #252]	; (8110170 <initCortexM4+0x1f4>)
 8110074:	f000 fbf8 	bl	8110868 <__cxa_guard_acquire>
 8110078:	4603      	mov	r3, r0
 811007a:	2b00      	cmp	r3, #0
 811007c:	bf14      	ite	ne
 811007e:	2301      	movne	r3, #1
 8110080:	2300      	moveq	r3, #0
 8110082:	b2db      	uxtb	r3, r3
 8110084:	2b00      	cmp	r3, #0
 8110086:	d009      	beq.n	811009c <initCortexM4+0x120>
 8110088:	4936      	ldr	r1, [pc, #216]	; (8110164 <initCortexM4+0x1e8>)
 811008a:	483a      	ldr	r0, [pc, #232]	; (8110174 <initCortexM4+0x1f8>)
 811008c:	f7ff fea0 	bl	810fdd0 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDef>
 8110090:	4837      	ldr	r0, [pc, #220]	; (8110170 <initCortexM4+0x1f4>)
 8110092:	f000 fbf5 	bl	8110880 <__cxa_guard_release>
 8110096:	4838      	ldr	r0, [pc, #224]	; (8110178 <initCortexM4+0x1fc>)
 8110098:	f000 fd00 	bl	8110a9c <atexit>
	static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11);
 811009c:	4b37      	ldr	r3, [pc, #220]	; (811017c <initCortexM4+0x200>)
 811009e:	781b      	ldrb	r3, [r3, #0]
 81100a0:	f3bf 8f5b 	dmb	ish
 81100a4:	b2db      	uxtb	r3, r3
 81100a6:	f003 0301 	and.w	r3, r3, #1
 81100aa:	2b00      	cmp	r3, #0
 81100ac:	bf0c      	ite	eq
 81100ae:	2301      	moveq	r3, #1
 81100b0:	2300      	movne	r3, #0
 81100b2:	b2db      	uxtb	r3, r3
 81100b4:	2b00      	cmp	r3, #0
 81100b6:	d01a      	beq.n	81100ee <initCortexM4+0x172>
 81100b8:	4830      	ldr	r0, [pc, #192]	; (811017c <initCortexM4+0x200>)
 81100ba:	f000 fbd5 	bl	8110868 <__cxa_guard_acquire>
 81100be:	4603      	mov	r3, r0
 81100c0:	2b00      	cmp	r3, #0
 81100c2:	bf14      	ite	ne
 81100c4:	2301      	movne	r3, #1
 81100c6:	2300      	moveq	r3, #0
 81100c8:	b2db      	uxtb	r3, r3
 81100ca:	2b00      	cmp	r3, #0
 81100cc:	d00f      	beq.n	81100ee <initCortexM4+0x172>
 81100ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81100d2:	9300      	str	r3, [sp, #0]
 81100d4:	4b2a      	ldr	r3, [pc, #168]	; (8110180 <initCortexM4+0x204>)
 81100d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81100da:	4929      	ldr	r1, [pc, #164]	; (8110180 <initCortexM4+0x204>)
 81100dc:	4829      	ldr	r0, [pc, #164]	; (8110184 <initCortexM4+0x208>)
 81100de:	f7ff fafd 	bl	810f6dc <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m>
 81100e2:	4826      	ldr	r0, [pc, #152]	; (811017c <initCortexM4+0x200>)
 81100e4:	f000 fbcc 	bl	8110880 <__cxa_guard_release>
 81100e8:	4827      	ldr	r0, [pc, #156]	; (8110188 <initCortexM4+0x20c>)
 81100ea:	f000 fcd7 	bl	8110a9c <atexit>
	static ADC16Thread potentiometer(&hi2c1);
 81100ee:	4b27      	ldr	r3, [pc, #156]	; (811018c <initCortexM4+0x210>)
 81100f0:	781b      	ldrb	r3, [r3, #0]
 81100f2:	f3bf 8f5b 	dmb	ish
 81100f6:	b2db      	uxtb	r3, r3
 81100f8:	f003 0301 	and.w	r3, r3, #1
 81100fc:	2b00      	cmp	r3, #0
 81100fe:	bf0c      	ite	eq
 8110100:	2301      	moveq	r3, #1
 8110102:	2300      	movne	r3, #0
 8110104:	b2db      	uxtb	r3, r3
 8110106:	2b00      	cmp	r3, #0
 8110108:	d014      	beq.n	8110134 <initCortexM4+0x1b8>
 811010a:	4820      	ldr	r0, [pc, #128]	; (811018c <initCortexM4+0x210>)
 811010c:	f000 fbac 	bl	8110868 <__cxa_guard_acquire>
 8110110:	4603      	mov	r3, r0
 8110112:	2b00      	cmp	r3, #0
 8110114:	bf14      	ite	ne
 8110116:	2301      	movne	r3, #1
 8110118:	2300      	moveq	r3, #0
 811011a:	b2db      	uxtb	r3, r3
 811011c:	2b00      	cmp	r3, #0
 811011e:	d009      	beq.n	8110134 <initCortexM4+0x1b8>
 8110120:	4910      	ldr	r1, [pc, #64]	; (8110164 <initCortexM4+0x1e8>)
 8110122:	481b      	ldr	r0, [pc, #108]	; (8110190 <initCortexM4+0x214>)
 8110124:	f7ff fa2c 	bl	810f580 <_ZN11ADC16ThreadC1EP19__I2C_HandleTypeDef>
 8110128:	4818      	ldr	r0, [pc, #96]	; (811018c <initCortexM4+0x210>)
 811012a:	f000 fba9 	bl	8110880 <__cxa_guard_release>
 811012e:	4819      	ldr	r0, [pc, #100]	; (8110194 <initCortexM4+0x218>)
 8110130:	f000 fcb4 	bl	8110a9c <atexit>
}
 8110134:	bf00      	nop
 8110136:	46bd      	mov	sp, r7
 8110138:	bd80      	pop	{r7, pc}
 811013a:	bf00      	nop
 811013c:	10004a54 	.word	0x10004a54
 8110140:	10009a88 	.word	0x10009a88
 8110144:	10004a44 	.word	0x10004a44
 8110148:	0810fe69 	.word	0x0810fe69
 811014c:	10004ebc 	.word	0x10004ebc
 8110150:	10004628 	.word	0x10004628
 8110154:	10009de4 	.word	0x10009de4
 8110158:	10004a58 	.word	0x10004a58
 811015c:	0810fe9d 	.word	0x0810fe9d
 8110160:	10004ed0 	.word	0x10004ed0
 8110164:	100099f0 	.word	0x100099f0
 8110168:	10004ec0 	.word	0x10004ec0
 811016c:	0810fed1 	.word	0x0810fed1
 8110170:	10004f18 	.word	0x10004f18
 8110174:	10004ed4 	.word	0x10004ed4
 8110178:	0810ff05 	.word	0x0810ff05
 811017c:	10004f2c 	.word	0x10004f2c
 8110180:	58020400 	.word	0x58020400
 8110184:	10004f1c 	.word	0x10004f1c
 8110188:	0810ff39 	.word	0x0810ff39
 811018c:	10004f48 	.word	0x10004f48
 8110190:	10004f30 	.word	0x10004f30
 8110194:	0810ff6d 	.word	0x0810ff6d

08110198 <_Z41__static_initialization_and_destruction_0ii>:



void setupTelemtry() {
	network.forward<PingPacket>(&network);
}
 8110198:	b580      	push	{r7, lr}
 811019a:	b082      	sub	sp, #8
 811019c:	af00      	add	r7, sp, #0
 811019e:	6078      	str	r0, [r7, #4]
 81101a0:	6039      	str	r1, [r7, #0]
 81101a2:	687b      	ldr	r3, [r7, #4]
 81101a4:	2b01      	cmp	r3, #1
 81101a6:	d111      	bne.n	81101cc <_Z41__static_initialization_and_destruction_0ii+0x34>
 81101a8:	683b      	ldr	r3, [r7, #0]
 81101aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81101ae:	4293      	cmp	r3, r2
 81101b0:	d10c      	bne.n	81101cc <_Z41__static_initialization_and_destruction_0ii+0x34>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 81101b2:	4b0f      	ldr	r3, [pc, #60]	; (81101f0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 81101b4:	6819      	ldr	r1, [r3, #0]
 81101b6:	4b0f      	ldr	r3, [pc, #60]	; (81101f4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 81101b8:	681a      	ldr	r2, [r3, #0]
 81101ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 81101be:	480e      	ldr	r0, [pc, #56]	; (81101f8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 81101c0:	f7fd f806 	bl	810d1d0 <_ZN16BufferedIODriverC1EPVhS1_j>
NetworkBus network(&telemetryDriver);
 81101c4:	490c      	ldr	r1, [pc, #48]	; (81101f8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 81101c6:	480d      	ldr	r0, [pc, #52]	; (81101fc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 81101c8:	f7ff f918 	bl	810f3fc <_ZN10NetworkBusC1EP8IODriver>
 81101cc:	687b      	ldr	r3, [r7, #4]
 81101ce:	2b00      	cmp	r3, #0
 81101d0:	d10a      	bne.n	81101e8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 81101d2:	683b      	ldr	r3, [r7, #0]
 81101d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81101d8:	4293      	cmp	r3, r2
 81101da:	d105      	bne.n	81101e8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 81101dc:	4807      	ldr	r0, [pc, #28]	; (81101fc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 81101de:	f7ff f967 	bl	810f4b0 <_ZN10NetworkBusD1Ev>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 81101e2:	4805      	ldr	r0, [pc, #20]	; (81101f8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 81101e4:	f7fd f9a6 	bl	810d534 <_ZN16BufferedIODriverD1Ev>
}
 81101e8:	bf00      	nop
 81101ea:	3708      	adds	r7, #8
 81101ec:	46bd      	mov	sp, r7
 81101ee:	bd80      	pop	{r7, pc}
 81101f0:	10000038 	.word	0x10000038
 81101f4:	10000034 	.word	0x10000034
 81101f8:	10004f4c 	.word	0x10004f4c
 81101fc:	10004f74 	.word	0x10004f74

08110200 <_GLOBAL__sub_I_telemetryDriver>:
 8110200:	b580      	push	{r7, lr}
 8110202:	af00      	add	r7, sp, #0
 8110204:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8110208:	2001      	movs	r0, #1
 811020a:	f7ff ffc5 	bl	8110198 <_Z41__static_initialization_and_destruction_0ii>
 811020e:	bd80      	pop	{r7, pc}

08110210 <_GLOBAL__sub_D_telemetryDriver>:
 8110210:	b580      	push	{r7, lr}
 8110212:	af00      	add	r7, sp, #0
 8110214:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8110218:	2000      	movs	r0, #0
 811021a:	f7ff ffbd 	bl	8110198 <_Z41__static_initialization_and_destruction_0ii>
 811021e:	bd80      	pop	{r7, pc}

08110220 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (256) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 8110220:	b580      	push	{r7, lr}
 8110222:	b084      	sub	sp, #16
 8110224:	af00      	add	r7, sp, #0
 8110226:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 8110228:	687b      	ldr	r3, [r7, #4]
 811022a:	60fb      	str	r3, [r7, #12]

	osDelay(100);
 811022c:	2064      	movs	r0, #100	; 0x64
 811022e:	f7f8 fe6d 	bl	8108f0c <osDelay>

	thread->init();
 8110232:	68fb      	ldr	r3, [r7, #12]
 8110234:	681b      	ldr	r3, [r3, #0]
 8110236:	681b      	ldr	r3, [r3, #0]
 8110238:	68f8      	ldr	r0, [r7, #12]
 811023a:	4798      	blx	r3

	while(true) {
		thread->loop();
 811023c:	68fb      	ldr	r3, [r7, #12]
 811023e:	681b      	ldr	r3, [r3, #0]
 8110240:	3304      	adds	r3, #4
 8110242:	681b      	ldr	r3, [r3, #0]
 8110244:	68f8      	ldr	r0, [r7, #12]
 8110246:	4798      	blx	r3
 8110248:	e7f8      	b.n	811023c <_Z10__task_runPKv+0x1c>

0811024a <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 811024a:	b580      	push	{r7, lr}
 811024c:	b082      	sub	sp, #8
 811024e:	af00      	add	r7, sp, #0
 8110250:	6078      	str	r0, [r7, #4]
 8110252:	6039      	str	r1, [r7, #0]
 8110254:	2200      	movs	r2, #0
 8110256:	6839      	ldr	r1, [r7, #0]
 8110258:	6878      	ldr	r0, [r7, #4]
 811025a:	f000 f805 	bl	8110268 <_ZN6ThreadC1EPKc10osPriority>
	;
}
 811025e:	687b      	ldr	r3, [r7, #4]
 8110260:	4618      	mov	r0, r3
 8110262:	3708      	adds	r7, #8
 8110264:	46bd      	mov	sp, r7
 8110266:	bd80      	pop	{r7, pc}

08110268 <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 8110268:	b580      	push	{r7, lr}
 811026a:	b084      	sub	sp, #16
 811026c:	af00      	add	r7, sp, #0
 811026e:	60f8      	str	r0, [r7, #12]
 8110270:	60b9      	str	r1, [r7, #8]
 8110272:	4613      	mov	r3, r2
 8110274:	80fb      	strh	r3, [r7, #6]
 8110276:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 811027a:	f44f 7380 	mov.w	r3, #256	; 0x100
 811027e:	68b9      	ldr	r1, [r7, #8]
 8110280:	68f8      	ldr	r0, [r7, #12]
 8110282:	f000 f805 	bl	8110290 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 8110286:	68fb      	ldr	r3, [r7, #12]
 8110288:	4618      	mov	r0, r3
 811028a:	3710      	adds	r7, #16
 811028c:	46bd      	mov	sp, r7
 811028e:	bd80      	pop	{r7, pc}

08110290 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 8110290:	b580      	push	{r7, lr}
 8110292:	b08c      	sub	sp, #48	; 0x30
 8110294:	af00      	add	r7, sp, #0
 8110296:	60f8      	str	r0, [r7, #12]
 8110298:	60b9      	str	r1, [r7, #8]
 811029a:	603b      	str	r3, [r7, #0]
 811029c:	4613      	mov	r3, r2
 811029e:	80fb      	strh	r3, [r7, #6]
 81102a0:	4a12      	ldr	r2, [pc, #72]	; (81102ec <_ZN6ThreadC1EPKc10osPrioritym+0x5c>)
 81102a2:	68fb      	ldr	r3, [r7, #12]
 81102a4:	601a      	str	r2, [r3, #0]
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 81102a6:	f107 0314 	add.w	r3, r7, #20
 81102aa:	2200      	movs	r2, #0
 81102ac:	601a      	str	r2, [r3, #0]
 81102ae:	605a      	str	r2, [r3, #4]
 81102b0:	609a      	str	r2, [r3, #8]
 81102b2:	60da      	str	r2, [r3, #12]
 81102b4:	611a      	str	r2, [r3, #16]
 81102b6:	615a      	str	r2, [r3, #20]
 81102b8:	619a      	str	r2, [r3, #24]
 81102ba:	4b0d      	ldr	r3, [pc, #52]	; (81102f0 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 81102bc:	61bb      	str	r3, [r7, #24]
 81102be:	68bb      	ldr	r3, [r7, #8]
 81102c0:	617b      	str	r3, [r7, #20]
 81102c2:	88fb      	ldrh	r3, [r7, #6]
 81102c4:	83bb      	strh	r3, [r7, #28]
 81102c6:	683b      	ldr	r3, [r7, #0]
 81102c8:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(&thread, this);
 81102ca:	f107 0314 	add.w	r3, r7, #20
 81102ce:	68f9      	ldr	r1, [r7, #12]
 81102d0:	4618      	mov	r0, r3
 81102d2:	f7f8 fdcf 	bl	8108e74 <osThreadCreate>
 81102d6:	4602      	mov	r2, r0
 81102d8:	68fb      	ldr	r3, [r7, #12]
 81102da:	605a      	str	r2, [r3, #4]
	this->name = name;
 81102dc:	68fb      	ldr	r3, [r7, #12]
 81102de:	68ba      	ldr	r2, [r7, #8]
 81102e0:	609a      	str	r2, [r3, #8]
}
 81102e2:	68fb      	ldr	r3, [r7, #12]
 81102e4:	4618      	mov	r0, r3
 81102e6:	3730      	adds	r7, #48	; 0x30
 81102e8:	46bd      	mov	sp, r7
 81102ea:	bd80      	pop	{r7, pc}
 81102ec:	081144a0 	.word	0x081144a0
 81102f0:	08110221 	.word	0x08110221

081102f4 <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 81102f4:	b40e      	push	{r1, r2, r3}
 81102f6:	b580      	push	{r7, lr}
 81102f8:	b085      	sub	sp, #20
 81102fa:	af00      	add	r7, sp, #0
 81102fc:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 81102fe:	f107 0320 	add.w	r3, r7, #32
 8110302:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 8110304:	687b      	ldr	r3, [r7, #4]
 8110306:	689b      	ldr	r3, [r3, #8]
 8110308:	461a      	mov	r2, r3
 811030a:	4913      	ldr	r1, [pc, #76]	; (8110358 <_ZN6Thread7printlnEPKcz+0x64>)
 811030c:	4813      	ldr	r0, [pc, #76]	; (811035c <_ZN6Thread7printlnEPKcz+0x68>)
 811030e:	f001 f929 	bl	8111564 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 8110312:	4812      	ldr	r0, [pc, #72]	; (811035c <_ZN6Thread7printlnEPKcz+0x68>)
 8110314:	f7ef ffee 	bl	81002f4 <strlen>
 8110318:	4602      	mov	r2, r0
 811031a:	4b10      	ldr	r3, [pc, #64]	; (811035c <_ZN6Thread7printlnEPKcz+0x68>)
 811031c:	4413      	add	r3, r2
 811031e:	68fa      	ldr	r2, [r7, #12]
 8110320:	69f9      	ldr	r1, [r7, #28]
 8110322:	4618      	mov	r0, r3
 8110324:	f001 f9e6 	bl	81116f4 <vsiprintf>
	strcat(buffer, "\r\n");
 8110328:	480c      	ldr	r0, [pc, #48]	; (811035c <_ZN6Thread7printlnEPKcz+0x68>)
 811032a:	f7ef ffe3 	bl	81002f4 <strlen>
 811032e:	4603      	mov	r3, r0
 8110330:	461a      	mov	r2, r3
 8110332:	4b0a      	ldr	r3, [pc, #40]	; (811035c <_ZN6Thread7printlnEPKcz+0x68>)
 8110334:	4413      	add	r3, r2
 8110336:	4a0a      	ldr	r2, [pc, #40]	; (8110360 <_ZN6Thread7printlnEPKcz+0x6c>)
 8110338:	8811      	ldrh	r1, [r2, #0]
 811033a:	7892      	ldrb	r2, [r2, #2]
 811033c:	8019      	strh	r1, [r3, #0]
 811033e:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 8110340:	4906      	ldr	r1, [pc, #24]	; (811035c <_ZN6Thread7printlnEPKcz+0x68>)
 8110342:	4808      	ldr	r0, [pc, #32]	; (8110364 <_ZN6Thread7printlnEPKcz+0x70>)
 8110344:	f7fa ff53 	bl	810b1ee <_ZN7Console5printEPKc>

	va_end(args);
}
 8110348:	bf00      	nop
 811034a:	3714      	adds	r7, #20
 811034c:	46bd      	mov	sp, r7
 811034e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8110352:	b003      	add	sp, #12
 8110354:	4770      	bx	lr
 8110356:	bf00      	nop
 8110358:	08113fd0 	.word	0x08113fd0
 811035c:	10009888 	.word	0x10009888
 8110360:	08113fd8 	.word	0x08113fd8
 8110364:	100041dc 	.word	0x100041dc

08110368 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8110368:	b510      	push	{r4, lr}
 811036a:	4b03      	ldr	r3, [pc, #12]	; (8110378 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 811036c:	6003      	str	r3, [r0, #0]
 811036e:	4604      	mov	r4, r0
 8110370:	f000 faaa 	bl	81108c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8110374:	4620      	mov	r0, r4
 8110376:	bd10      	pop	{r4, pc}
 8110378:	081144e4 	.word	0x081144e4

0811037c <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 811037c:	b510      	push	{r4, lr}
 811037e:	4604      	mov	r4, r0
 8110380:	f7ff fff2 	bl	8110368 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8110384:	4620      	mov	r0, r4
 8110386:	2118      	movs	r1, #24
 8110388:	f000 fa37 	bl	81107fa <_ZdlPvj>
 811038c:	4620      	mov	r0, r4
 811038e:	bd10      	pop	{r4, pc}

08110390 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8110390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110394:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8110398:	454a      	cmp	r2, r9
 811039a:	4604      	mov	r4, r0
 811039c:	460f      	mov	r7, r1
 811039e:	4616      	mov	r6, r2
 81103a0:	4698      	mov	r8, r3
 81103a2:	d024      	beq.n	81103ee <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 81103a4:	68e5      	ldr	r5, [r4, #12]
 81103a6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81103aa:	b355      	cbz	r5, 8110402 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x72>
 81103ac:	68e3      	ldr	r3, [r4, #12]
 81103ae:	079a      	lsls	r2, r3, #30
 81103b0:	d524      	bpl.n	81103fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 81103b2:	f013 0a01 	ands.w	sl, r3, #1
 81103b6:	ea4f 2223 	mov.w	r2, r3, asr #8
 81103ba:	d003      	beq.n	81103c4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x34>
 81103bc:	1cfb      	adds	r3, r7, #3
 81103be:	d01d      	beq.n	81103fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 81103c0:	6833      	ldr	r3, [r6, #0]
 81103c2:	589a      	ldr	r2, [r3, r2]
 81103c4:	68a0      	ldr	r0, [r4, #8]
 81103c6:	6803      	ldr	r3, [r0, #0]
 81103c8:	f8cd 9000 	str.w	r9, [sp]
 81103cc:	f8d3 b020 	ldr.w	fp, [r3, #32]
 81103d0:	4432      	add	r2, r6
 81103d2:	4643      	mov	r3, r8
 81103d4:	4639      	mov	r1, r7
 81103d6:	47d8      	blx	fp
 81103d8:	2803      	cmp	r0, #3
 81103da:	d90f      	bls.n	81103fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 81103dc:	f1ba 0f00 	cmp.w	sl, #0
 81103e0:	d002      	beq.n	81103e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 81103e2:	f040 0001 	orr.w	r0, r0, #1
 81103e6:	b2c0      	uxtb	r0, r0
 81103e8:	b003      	add	sp, #12
 81103ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81103ee:	4619      	mov	r1, r3
 81103f0:	f000 f9ea 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 81103f4:	2800      	cmp	r0, #0
 81103f6:	d0d5      	beq.n	81103a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 81103f8:	2006      	movs	r0, #6
 81103fa:	e7f5      	b.n	81103e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 81103fc:	3d01      	subs	r5, #1
 81103fe:	3c08      	subs	r4, #8
 8110400:	e7d3      	b.n	81103aa <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8110402:	2001      	movs	r0, #1
 8110404:	e7f0      	b.n	81103e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

08110406 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8110406:	b4f0      	push	{r4, r5, r6, r7}
 8110408:	1e0e      	subs	r6, r1, #0
 811040a:	9c04      	ldr	r4, [sp, #16]
 811040c:	db06      	blt.n	811041c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 811040e:	1990      	adds	r0, r2, r6
 8110410:	4284      	cmp	r4, r0
 8110412:	bf14      	ite	ne
 8110414:	2001      	movne	r0, #1
 8110416:	2006      	moveq	r0, #6
 8110418:	bcf0      	pop	{r4, r5, r6, r7}
 811041a:	4770      	bx	lr
 811041c:	3602      	adds	r6, #2
 811041e:	d004      	beq.n	811042a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 8110420:	6804      	ldr	r4, [r0, #0]
 8110422:	6a24      	ldr	r4, [r4, #32]
 8110424:	46a4      	mov	ip, r4
 8110426:	bcf0      	pop	{r4, r5, r6, r7}
 8110428:	4760      	bx	ip
 811042a:	2001      	movs	r0, #1
 811042c:	e7f4      	b.n	8110418 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0811042e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 811042e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110432:	b091      	sub	sp, #68	; 0x44
 8110434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110438:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 811043a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 811043c:	68a3      	ldr	r3, [r4, #8]
 811043e:	06dd      	lsls	r5, r3, #27
 8110440:	bf44      	itt	mi
 8110442:	6883      	ldrmi	r3, [r0, #8]
 8110444:	60a3      	strmi	r3, [r4, #8]
 8110446:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8110448:	4293      	cmp	r3, r2
 811044a:	4681      	mov	r9, r0
 811044c:	4688      	mov	r8, r1
 811044e:	d107      	bne.n	8110460 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8110450:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8110452:	f000 f9b9 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 8110456:	b118      	cbz	r0, 8110460 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8110458:	9b05      	ldr	r3, [sp, #20]
 811045a:	7163      	strb	r3, [r4, #5]
 811045c:	2600      	movs	r6, #0
 811045e:	e0fa      	b.n	8110656 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8110460:	9906      	ldr	r1, [sp, #24]
 8110462:	4648      	mov	r0, r9
 8110464:	f000 f9b0 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 8110468:	4682      	mov	sl, r0
 811046a:	b1c0      	cbz	r0, 811049e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 811046c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 811046e:	6023      	str	r3, [r4, #0]
 8110470:	f1b8 0f00 	cmp.w	r8, #0
 8110474:	9b05      	ldr	r3, [sp, #20]
 8110476:	7123      	strb	r3, [r4, #4]
 8110478:	db0b      	blt.n	8110492 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 811047a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 811047c:	4498      	add	r8, r3
 811047e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8110480:	4543      	cmp	r3, r8
 8110482:	bf14      	ite	ne
 8110484:	f04f 0801 	movne.w	r8, #1
 8110488:	f04f 0806 	moveq.w	r8, #6
 811048c:	f884 8006 	strb.w	r8, [r4, #6]
 8110490:	e7e4      	b.n	811045c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8110492:	f118 0f02 	cmn.w	r8, #2
 8110496:	d1e1      	bne.n	811045c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8110498:	2301      	movs	r3, #1
 811049a:	71a3      	strb	r3, [r4, #6]
 811049c:	e7de      	b.n	811045c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 811049e:	f1b8 0f00 	cmp.w	r8, #0
 81104a2:	bfaa      	itet	ge
 81104a4:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 81104a6:	f8cd a01c 	strlt.w	sl, [sp, #28]
 81104aa:	eba3 0308 	subge.w	r3, r3, r8
 81104ae:	f04f 0600 	mov.w	r6, #0
 81104b2:	bfa8      	it	ge
 81104b4:	9307      	strge	r3, [sp, #28]
 81104b6:	2302      	movs	r3, #2
 81104b8:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 81104bc:	2301      	movs	r3, #1
 81104be:	9308      	str	r3, [sp, #32]
 81104c0:	9b05      	ldr	r3, [sp, #20]
 81104c2:	f043 0301 	orr.w	r3, r3, #1
 81104c6:	46b3      	mov	fp, r6
 81104c8:	930b      	str	r3, [sp, #44]	; 0x2c
 81104ca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 81104ce:	9304      	str	r3, [sp, #16]
 81104d0:	9b04      	ldr	r3, [sp, #16]
 81104d2:	2b00      	cmp	r3, #0
 81104d4:	f000 80d9 	beq.w	811068a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 81104d8:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
 81104dc:	68a7      	ldr	r7, [r4, #8]
 81104de:	68e9      	ldr	r1, [r5, #12]
 81104e0:	970f      	str	r7, [sp, #60]	; 0x3c
 81104e2:	07c8      	lsls	r0, r1, #31
 81104e4:	bf48      	it	mi
 81104e6:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 81104e8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 81104ec:	ea4f 2321 	mov.w	r3, r1, asr #8
 81104f0:	bf48      	it	mi
 81104f2:	6800      	ldrmi	r0, [r0, #0]
 81104f4:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
 81104f8:	bf48      	it	mi
 81104fa:	58c3      	ldrmi	r3, [r0, r3]
 81104fc:	981a      	ldr	r0, [sp, #104]	; 0x68
 81104fe:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
 8110502:	4403      	add	r3, r0
 8110504:	9807      	ldr	r0, [sp, #28]
 8110506:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
 811050a:	bf4c      	ite	mi
 811050c:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 811050e:	9a05      	ldrpl	r2, [sp, #20]
 8110510:	b148      	cbz	r0, 8110526 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 8110512:	4298      	cmp	r0, r3
 8110514:	9808      	ldr	r0, [sp, #32]
 8110516:	bf2c      	ite	cs
 8110518:	f04f 0c00 	movcs.w	ip, #0
 811051c:	f04f 0c01 	movcc.w	ip, #1
 8110520:	4584      	cmp	ip, r0
 8110522:	f000 80ae 	beq.w	8110682 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 8110526:	0789      	lsls	r1, r1, #30
 8110528:	d407      	bmi.n	811053a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
 811052a:	f118 0f02 	cmn.w	r8, #2
 811052e:	d102      	bne.n	8110536 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 8110530:	07bf      	lsls	r7, r7, #30
 8110532:	f000 80a8 	beq.w	8110686 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 8110536:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 811053a:	68a8      	ldr	r0, [r5, #8]
 811053c:	ad0d      	add	r5, sp, #52	; 0x34
 811053e:	6801      	ldr	r1, [r0, #0]
 8110540:	9503      	str	r5, [sp, #12]
 8110542:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8110544:	9502      	str	r5, [sp, #8]
 8110546:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8110548:	e9cd 3500 	strd	r3, r5, [sp]
 811054c:	9b06      	ldr	r3, [sp, #24]
 811054e:	69cd      	ldr	r5, [r1, #28]
 8110550:	4641      	mov	r1, r8
 8110552:	47a8      	blx	r5
 8110554:	7963      	ldrb	r3, [r4, #5]
 8110556:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 811055a:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 811055e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8110560:	4313      	orrs	r3, r2
 8110562:	2d06      	cmp	r5, #6
 8110564:	7163      	strb	r3, [r4, #5]
 8110566:	d001      	beq.n	811056c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8110568:	2d02      	cmp	r5, #2
 811056a:	d106      	bne.n	811057a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 811056c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8110570:	6021      	str	r1, [r4, #0]
 8110572:	7123      	strb	r3, [r4, #4]
 8110574:	71a5      	strb	r5, [r4, #6]
 8110576:	4682      	mov	sl, r0
 8110578:	e06c      	b.n	8110654 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 811057a:	6822      	ldr	r2, [r4, #0]
 811057c:	b996      	cbnz	r6, 81105a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 811057e:	b99a      	cbnz	r2, 81105a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 8110580:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8110584:	6021      	str	r1, [r4, #0]
 8110586:	7122      	strb	r2, [r4, #4]
 8110588:	b121      	cbz	r1, 8110594 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 811058a:	b11b      	cbz	r3, 8110594 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 811058c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8110590:	07dd      	lsls	r5, r3, #31
 8110592:	d5f0      	bpl.n	8110576 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 8110594:	7963      	ldrb	r3, [r4, #5]
 8110596:	2b04      	cmp	r3, #4
 8110598:	d0ed      	beq.n	8110576 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 811059a:	9b04      	ldr	r3, [sp, #16]
 811059c:	3b01      	subs	r3, #1
 811059e:	9304      	str	r3, [sp, #16]
 81105a0:	4606      	mov	r6, r0
 81105a2:	e795      	b.n	81104d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa2>
 81105a4:	2a00      	cmp	r2, #0
 81105a6:	d037      	beq.n	8110618 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 81105a8:	4291      	cmp	r1, r2
 81105aa:	d106      	bne.n	81105ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 81105ac:	7923      	ldrb	r3, [r4, #4]
 81105ae:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 81105b2:	4313      	orrs	r3, r2
 81105b4:	7123      	strb	r3, [r4, #4]
 81105b6:	4630      	mov	r0, r6
 81105b8:	e7ec      	b.n	8110594 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 81105ba:	b909      	cbnz	r1, 81105c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 81105bc:	2800      	cmp	r0, #0
 81105be:	d0fa      	beq.n	81105b6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 81105c0:	2b03      	cmp	r3, #3
 81105c2:	79a7      	ldrb	r7, [r4, #6]
 81105c4:	d904      	bls.n	81105d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 81105c6:	07d8      	lsls	r0, r3, #31
 81105c8:	d529      	bpl.n	811061e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 81105ca:	68a3      	ldr	r3, [r4, #8]
 81105cc:	0799      	lsls	r1, r3, #30
 81105ce:	d526      	bpl.n	811061e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 81105d0:	b97f      	cbnz	r7, 81105f2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 81105d2:	2d03      	cmp	r5, #3
 81105d4:	d905      	bls.n	81105e2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 81105d6:	07eb      	lsls	r3, r5, #31
 81105d8:	d541      	bpl.n	811065e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 81105da:	f8d9 3008 	ldr.w	r3, [r9, #8]
 81105de:	079f      	lsls	r7, r3, #30
 81105e0:	d53d      	bpl.n	811065e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 81105e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 81105e4:	9300      	str	r3, [sp, #0]
 81105e6:	4641      	mov	r1, r8
 81105e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 81105ea:	9806      	ldr	r0, [sp, #24]
 81105ec:	f7ff ff0b 	bl	8110406 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 81105f0:	4607      	mov	r7, r0
 81105f2:	b9d5      	cbnz	r5, 811062a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 81105f4:	2f03      	cmp	r7, #3
 81105f6:	d905      	bls.n	8110604 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 81105f8:	07f8      	lsls	r0, r7, #31
 81105fa:	d532      	bpl.n	8110662 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 81105fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8110600:	0799      	lsls	r1, r3, #30
 8110602:	d52e      	bpl.n	8110662 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8110604:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8110606:	9300      	str	r3, [sp, #0]
 8110608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 811060a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 811060c:	9806      	ldr	r0, [sp, #24]
 811060e:	4641      	mov	r1, r8
 8110610:	f7ff fef9 	bl	8110406 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8110614:	4605      	mov	r5, r0
 8110616:	e008      	b.n	811062a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8110618:	2900      	cmp	r1, #0
 811061a:	d1d1      	bne.n	81105c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 811061c:	e7cb      	b.n	81105b6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 811061e:	2f00      	cmp	r7, #0
 8110620:	bf08      	it	eq
 8110622:	2701      	moveq	r7, #1
 8110624:	2d00      	cmp	r5, #0
 8110626:	bf08      	it	eq
 8110628:	2501      	moveq	r5, #1
 811062a:	ea85 0307 	eor.w	r3, r5, r7
 811062e:	b2db      	uxtb	r3, r3
 8110630:	2b03      	cmp	r3, #3
 8110632:	d918      	bls.n	8110666 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 8110634:	2d03      	cmp	r5, #3
 8110636:	bf81      	itttt	hi
 8110638:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 811063a:	6023      	strhi	r3, [r4, #0]
 811063c:	462f      	movhi	r7, r5
 811063e:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8110642:	bf86      	itte	hi
 8110644:	7123      	strbhi	r3, [r4, #4]
 8110646:	2000      	movhi	r0, #0
 8110648:	4630      	movls	r0, r6
 811064a:	07ba      	lsls	r2, r7, #30
 811064c:	71a7      	strb	r7, [r4, #6]
 811064e:	d401      	bmi.n	8110654 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 8110650:	07fb      	lsls	r3, r7, #31
 8110652:	d49f      	bmi.n	8110594 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8110654:	4656      	mov	r6, sl
 8110656:	4630      	mov	r0, r6
 8110658:	b011      	add	sp, #68	; 0x44
 811065a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811065e:	2701      	movs	r7, #1
 8110660:	e7e3      	b.n	811062a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8110662:	2501      	movs	r5, #1
 8110664:	e7e1      	b.n	811062a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8110666:	403d      	ands	r5, r7
 8110668:	b2ed      	uxtb	r5, r5
 811066a:	2d03      	cmp	r5, #3
 811066c:	f8c4 b000 	str.w	fp, [r4]
 8110670:	d904      	bls.n	811067c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 8110672:	2302      	movs	r3, #2
 8110674:	71a3      	strb	r3, [r4, #6]
 8110676:	f04f 0a01 	mov.w	sl, #1
 811067a:	e7eb      	b.n	8110654 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 811067c:	2001      	movs	r0, #1
 811067e:	71a0      	strb	r0, [r4, #6]
 8110680:	e788      	b.n	8110594 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8110682:	2301      	movs	r3, #1
 8110684:	9309      	str	r3, [sp, #36]	; 0x24
 8110686:	4630      	mov	r0, r6
 8110688:	e787      	b.n	811059a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 811068a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811068c:	2b00      	cmp	r3, #0
 811068e:	d0e2      	beq.n	8110656 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8110690:	9b04      	ldr	r3, [sp, #16]
 8110692:	9308      	str	r3, [sp, #32]
 8110694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110696:	2b01      	cmp	r3, #1
 8110698:	d0dd      	beq.n	8110656 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 811069a:	2301      	movs	r3, #1
 811069c:	930a      	str	r3, [sp, #40]	; 0x28
 811069e:	e714      	b.n	81104ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>

081106a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 81106a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81106a4:	b089      	sub	sp, #36	; 0x24
 81106a6:	4607      	mov	r7, r0
 81106a8:	9102      	str	r1, [sp, #8]
 81106aa:	4692      	mov	sl, r2
 81106ac:	461c      	mov	r4, r3
 81106ae:	f000 f93c 	bl	811092a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 81106b2:	4605      	mov	r5, r0
 81106b4:	2800      	cmp	r0, #0
 81106b6:	d159      	bne.n	811076c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 81106b8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 81106bc:	f8d7 900c 	ldr.w	r9, [r7, #12]
 81106c0:	f018 0f10 	tst.w	r8, #16
 81106c4:	bf18      	it	ne
 81106c6:	f8d7 8008 	ldrne.w	r8, [r7, #8]
 81106ca:	f008 0301 	and.w	r3, r8, #1
 81106ce:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
 81106d2:	f04f 0b00 	mov.w	fp, #0
 81106d6:	9303      	str	r3, [sp, #12]
 81106d8:	f1b9 0f00 	cmp.w	r9, #0
 81106dc:	d06c      	beq.n	81107b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 81106de:	68f2      	ldr	r2, [r6, #12]
 81106e0:	f8cd b010 	str.w	fp, [sp, #16]
 81106e4:	f002 0301 	and.w	r3, r2, #1
 81106e8:	9300      	str	r3, [sp, #0]
 81106ea:	f012 0302 	ands.w	r3, r2, #2
 81106ee:	f88d b014 	strb.w	fp, [sp, #20]
 81106f2:	e9cd 8b06 	strd	r8, fp, [sp, #24]
 81106f6:	9301      	str	r3, [sp, #4]
 81106f8:	d105      	bne.n	8110706 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 81106fa:	9b03      	ldr	r3, [sp, #12]
 81106fc:	b91b      	cbnz	r3, 8110706 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 81106fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8110702:	3e08      	subs	r6, #8
 8110704:	e7e8      	b.n	81106d8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 8110706:	f1ba 0f00 	cmp.w	sl, #0
 811070a:	d033      	beq.n	8110774 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd4>
 811070c:	9b00      	ldr	r3, [sp, #0]
 811070e:	1212      	asrs	r2, r2, #8
 8110710:	b113      	cbz	r3, 8110718 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 8110712:	f8da 3000 	ldr.w	r3, [sl]
 8110716:	589a      	ldr	r2, [r3, r2]
 8110718:	4452      	add	r2, sl
 811071a:	68b0      	ldr	r0, [r6, #8]
 811071c:	9902      	ldr	r1, [sp, #8]
 811071e:	6803      	ldr	r3, [r0, #0]
 8110720:	699d      	ldr	r5, [r3, #24]
 8110722:	ab04      	add	r3, sp, #16
 8110724:	47a8      	blx	r5
 8110726:	4605      	mov	r5, r0
 8110728:	2800      	cmp	r0, #0
 811072a:	d0e8      	beq.n	81106fe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 811072c:	9b07      	ldr	r3, [sp, #28]
 811072e:	2b08      	cmp	r3, #8
 8110730:	d103      	bne.n	811073a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 8110732:	9b00      	ldr	r3, [sp, #0]
 8110734:	b10b      	cbz	r3, 811073a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 8110736:	68b3      	ldr	r3, [r6, #8]
 8110738:	9307      	str	r3, [sp, #28]
 811073a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 811073e:	2b03      	cmp	r3, #3
 8110740:	d905      	bls.n	811074e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 8110742:	9a01      	ldr	r2, [sp, #4]
 8110744:	b91a      	cbnz	r2, 811074e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 8110746:	f023 0302 	bic.w	r3, r3, #2
 811074a:	f88d 3014 	strb.w	r3, [sp, #20]
 811074e:	68e1      	ldr	r1, [r4, #12]
 8110750:	b9c1      	cbnz	r1, 8110784 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 8110752:	ab04      	add	r3, sp, #16
 8110754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8110756:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 811075a:	7923      	ldrb	r3, [r4, #4]
 811075c:	2b03      	cmp	r3, #3
 811075e:	d905      	bls.n	811076c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8110760:	079a      	lsls	r2, r3, #30
 8110762:	d509      	bpl.n	8110778 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8110764:	68bb      	ldr	r3, [r7, #8]
 8110766:	f013 0f01 	tst.w	r3, #1
 811076a:	d1c8      	bne.n	81106fe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 811076c:	4628      	mov	r0, r5
 811076e:	b009      	add	sp, #36	; 0x24
 8110770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110774:	4652      	mov	r2, sl
 8110776:	e7d0      	b.n	811071a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7a>
 8110778:	07db      	lsls	r3, r3, #31
 811077a:	d5f7      	bpl.n	811076c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 811077c:	68bb      	ldr	r3, [r7, #8]
 811077e:	f013 0f02 	tst.w	r3, #2
 8110782:	e7f2      	b.n	811076a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xca>
 8110784:	6823      	ldr	r3, [r4, #0]
 8110786:	9a04      	ldr	r2, [sp, #16]
 8110788:	4293      	cmp	r3, r2
 811078a:	d004      	beq.n	8110796 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf6>
 811078c:	2300      	movs	r3, #0
 811078e:	6023      	str	r3, [r4, #0]
 8110790:	2302      	movs	r3, #2
 8110792:	7123      	strb	r3, [r4, #4]
 8110794:	e7ea      	b.n	811076c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8110796:	b12b      	cbz	r3, 81107a4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 8110798:	7923      	ldrb	r3, [r4, #4]
 811079a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 811079e:	4313      	orrs	r3, r2
 81107a0:	7123      	strb	r3, [r4, #4]
 81107a2:	e7ac      	b.n	81106fe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 81107a4:	9807      	ldr	r0, [sp, #28]
 81107a6:	2808      	cmp	r0, #8
 81107a8:	d0f2      	beq.n	8110790 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 81107aa:	2908      	cmp	r1, #8
 81107ac:	d0f0      	beq.n	8110790 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 81107ae:	f000 f80b 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 81107b2:	2800      	cmp	r0, #0
 81107b4:	d1f0      	bne.n	8110798 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf8>
 81107b6:	e7eb      	b.n	8110790 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 81107b8:	7925      	ldrb	r5, [r4, #4]
 81107ba:	3500      	adds	r5, #0
 81107bc:	bf18      	it	ne
 81107be:	2501      	movne	r5, #1
 81107c0:	e7d4      	b.n	811076c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>

081107c2 <_ZNSt9type_infoD1Ev>:
 81107c2:	4770      	bx	lr

081107c4 <_ZNKSt9type_info14__is_pointer_pEv>:
 81107c4:	2000      	movs	r0, #0
 81107c6:	4770      	bx	lr

081107c8 <_ZNKSt9type_infoeqERKS_>:
 81107c8:	4281      	cmp	r1, r0
 81107ca:	b508      	push	{r3, lr}
 81107cc:	d00e      	beq.n	81107ec <_ZNKSt9type_infoeqERKS_+0x24>
 81107ce:	6840      	ldr	r0, [r0, #4]
 81107d0:	7803      	ldrb	r3, [r0, #0]
 81107d2:	2b2a      	cmp	r3, #42	; 0x2a
 81107d4:	d00c      	beq.n	81107f0 <_ZNKSt9type_infoeqERKS_+0x28>
 81107d6:	6849      	ldr	r1, [r1, #4]
 81107d8:	780b      	ldrb	r3, [r1, #0]
 81107da:	2b2a      	cmp	r3, #42	; 0x2a
 81107dc:	bf08      	it	eq
 81107de:	3101      	addeq	r1, #1
 81107e0:	f7ef fd7e 	bl	81002e0 <strcmp>
 81107e4:	fab0 f080 	clz	r0, r0
 81107e8:	0940      	lsrs	r0, r0, #5
 81107ea:	bd08      	pop	{r3, pc}
 81107ec:	2001      	movs	r0, #1
 81107ee:	e7fc      	b.n	81107ea <_ZNKSt9type_infoeqERKS_+0x22>
 81107f0:	2000      	movs	r0, #0
 81107f2:	e7fa      	b.n	81107ea <_ZNKSt9type_infoeqERKS_+0x22>

081107f4 <__cxa_pure_virtual>:
 81107f4:	b508      	push	{r3, lr}
 81107f6:	f000 f945 	bl	8110a84 <_ZSt9terminatev>

081107fa <_ZdlPvj>:
 81107fa:	f7fb b97d 	b.w	810baf8 <_ZdlPv>
	...

08110800 <_ZSt11_Hash_bytesPKvjj>:
 8110800:	4b18      	ldr	r3, [pc, #96]	; (8110864 <_ZSt11_Hash_bytesPKvjj+0x64>)
 8110802:	b570      	push	{r4, r5, r6, lr}
 8110804:	404a      	eors	r2, r1
 8110806:	460d      	mov	r5, r1
 8110808:	1846      	adds	r6, r0, r1
 811080a:	2d03      	cmp	r5, #3
 811080c:	eba6 0405 	sub.w	r4, r6, r5
 8110810:	d908      	bls.n	8110824 <_ZSt11_Hash_bytesPKvjj+0x24>
 8110812:	6824      	ldr	r4, [r4, #0]
 8110814:	435c      	muls	r4, r3
 8110816:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 811081a:	435a      	muls	r2, r3
 811081c:	435c      	muls	r4, r3
 811081e:	4062      	eors	r2, r4
 8110820:	3d04      	subs	r5, #4
 8110822:	e7f2      	b.n	811080a <_ZSt11_Hash_bytesPKvjj+0xa>
 8110824:	088d      	lsrs	r5, r1, #2
 8110826:	f06f 0403 	mvn.w	r4, #3
 811082a:	fb04 1105 	mla	r1, r4, r5, r1
 811082e:	2902      	cmp	r1, #2
 8110830:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 8110834:	d011      	beq.n	811085a <_ZSt11_Hash_bytesPKvjj+0x5a>
 8110836:	2903      	cmp	r1, #3
 8110838:	d00c      	beq.n	8110854 <_ZSt11_Hash_bytesPKvjj+0x54>
 811083a:	2901      	cmp	r1, #1
 811083c:	d103      	bne.n	8110846 <_ZSt11_Hash_bytesPKvjj+0x46>
 811083e:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 8110842:	4042      	eors	r2, r0
 8110844:	435a      	muls	r2, r3
 8110846:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 811084a:	fb03 f002 	mul.w	r0, r3, r2
 811084e:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8110852:	bd70      	pop	{r4, r5, r6, pc}
 8110854:	78b1      	ldrb	r1, [r6, #2]
 8110856:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 811085a:	7871      	ldrb	r1, [r6, #1]
 811085c:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 8110860:	e7ed      	b.n	811083e <_ZSt11_Hash_bytesPKvjj+0x3e>
 8110862:	bf00      	nop
 8110864:	5bd1e995 	.word	0x5bd1e995

08110868 <__cxa_guard_acquire>:
 8110868:	6803      	ldr	r3, [r0, #0]
 811086a:	07db      	lsls	r3, r3, #31
 811086c:	d406      	bmi.n	811087c <__cxa_guard_acquire+0x14>
 811086e:	7843      	ldrb	r3, [r0, #1]
 8110870:	b103      	cbz	r3, 8110874 <__cxa_guard_acquire+0xc>
 8110872:	deff      	udf	#255	; 0xff
 8110874:	2301      	movs	r3, #1
 8110876:	7043      	strb	r3, [r0, #1]
 8110878:	4618      	mov	r0, r3
 811087a:	4770      	bx	lr
 811087c:	2000      	movs	r0, #0
 811087e:	4770      	bx	lr

08110880 <__cxa_guard_release>:
 8110880:	2301      	movs	r3, #1
 8110882:	6003      	str	r3, [r0, #0]
 8110884:	4770      	bx	lr

08110886 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8110886:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8110888:	2400      	movs	r4, #0
 811088a:	2310      	movs	r3, #16
 811088c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8110890:	6803      	ldr	r3, [r0, #0]
 8110892:	9400      	str	r4, [sp, #0]
 8110894:	4615      	mov	r5, r2
 8110896:	699e      	ldr	r6, [r3, #24]
 8110898:	f88d 4004 	strb.w	r4, [sp, #4]
 811089c:	466b      	mov	r3, sp
 811089e:	6812      	ldr	r2, [r2, #0]
 81108a0:	47b0      	blx	r6
 81108a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 81108a6:	f003 0306 	and.w	r3, r3, #6
 81108aa:	2b06      	cmp	r3, #6
 81108ac:	bf03      	ittte	eq
 81108ae:	9b00      	ldreq	r3, [sp, #0]
 81108b0:	602b      	streq	r3, [r5, #0]
 81108b2:	2001      	moveq	r0, #1
 81108b4:	4620      	movne	r0, r4
 81108b6:	b004      	add	sp, #16
 81108b8:	bd70      	pop	{r4, r5, r6, pc}

081108ba <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 81108ba:	9800      	ldr	r0, [sp, #0]
 81108bc:	4290      	cmp	r0, r2
 81108be:	bf0c      	ite	eq
 81108c0:	2006      	moveq	r0, #6
 81108c2:	2001      	movne	r0, #1
 81108c4:	4770      	bx	lr
	...

081108c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 81108c8:	b510      	push	{r4, lr}
 81108ca:	4b03      	ldr	r3, [pc, #12]	; (81108d8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 81108cc:	6003      	str	r3, [r0, #0]
 81108ce:	4604      	mov	r4, r0
 81108d0:	f7ff ff77 	bl	81107c2 <_ZNSt9type_infoD1Ev>
 81108d4:	4620      	mov	r0, r4
 81108d6:	bd10      	pop	{r4, pc}
 81108d8:	08114558 	.word	0x08114558

081108dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 81108dc:	b510      	push	{r4, lr}
 81108de:	4604      	mov	r4, r0
 81108e0:	f7ff fff2 	bl	81108c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 81108e4:	4620      	mov	r0, r4
 81108e6:	2108      	movs	r1, #8
 81108e8:	f7ff ff87 	bl	81107fa <_ZdlPvj>
 81108ec:	4620      	mov	r0, r4
 81108ee:	bd10      	pop	{r4, pc}

081108f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 81108f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81108f4:	4698      	mov	r8, r3
 81108f6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 81108fa:	9e06      	ldr	r6, [sp, #24]
 81108fc:	429e      	cmp	r6, r3
 81108fe:	4607      	mov	r7, r0
 8110900:	4615      	mov	r5, r2
 8110902:	d107      	bne.n	8110914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8110904:	9907      	ldr	r1, [sp, #28]
 8110906:	f7ff ff5f 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 811090a:	b118      	cbz	r0, 8110914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 811090c:	7165      	strb	r5, [r4, #5]
 811090e:	2000      	movs	r0, #0
 8110910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8110914:	4641      	mov	r1, r8
 8110916:	4638      	mov	r0, r7
 8110918:	f7ff ff56 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 811091c:	2800      	cmp	r0, #0
 811091e:	d0f6      	beq.n	811090e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 8110920:	2301      	movs	r3, #1
 8110922:	6026      	str	r6, [r4, #0]
 8110924:	7125      	strb	r5, [r4, #4]
 8110926:	71a3      	strb	r3, [r4, #6]
 8110928:	e7f1      	b.n	811090e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

0811092a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 811092a:	b538      	push	{r3, r4, r5, lr}
 811092c:	4615      	mov	r5, r2
 811092e:	461c      	mov	r4, r3
 8110930:	f7ff ff4a 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 8110934:	b120      	cbz	r0, 8110940 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8110936:	2308      	movs	r3, #8
 8110938:	60e3      	str	r3, [r4, #12]
 811093a:	2306      	movs	r3, #6
 811093c:	6025      	str	r5, [r4, #0]
 811093e:	7123      	strb	r3, [r4, #4]
 8110940:	bd38      	pop	{r3, r4, r5, pc}

08110942 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8110942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110946:	4605      	mov	r5, r0
 8110948:	460c      	mov	r4, r1
 811094a:	4616      	mov	r6, r2
 811094c:	461f      	mov	r7, r3
 811094e:	f7ff ff3b 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 8110952:	b948      	cbnz	r0, 8110968 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8110954:	2f03      	cmp	r7, #3
 8110956:	d807      	bhi.n	8110968 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8110958:	6823      	ldr	r3, [r4, #0]
 811095a:	4632      	mov	r2, r6
 811095c:	4629      	mov	r1, r5
 811095e:	4620      	mov	r0, r4
 8110960:	695b      	ldr	r3, [r3, #20]
 8110962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8110966:	4718      	bx	r3
 8110968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0811096c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 811096c:	b510      	push	{r4, lr}
 811096e:	4b03      	ldr	r3, [pc, #12]	; (811097c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8110970:	6003      	str	r3, [r0, #0]
 8110972:	4604      	mov	r4, r0
 8110974:	f7ff ffa8 	bl	81108c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8110978:	4620      	mov	r0, r4
 811097a:	bd10      	pop	{r4, pc}
 811097c:	081145b8 	.word	0x081145b8

08110980 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8110980:	b510      	push	{r4, lr}
 8110982:	4604      	mov	r4, r0
 8110984:	f7ff fff2 	bl	811096c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8110988:	4620      	mov	r0, r4
 811098a:	210c      	movs	r1, #12
 811098c:	f7ff ff35 	bl	81107fa <_ZdlPvj>
 8110990:	4620      	mov	r0, r4
 8110992:	bd10      	pop	{r4, pc}

08110994 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8110994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110998:	9e06      	ldr	r6, [sp, #24]
 811099a:	4296      	cmp	r6, r2
 811099c:	4607      	mov	r7, r0
 811099e:	4688      	mov	r8, r1
 81109a0:	4615      	mov	r5, r2
 81109a2:	461c      	mov	r4, r3
 81109a4:	d00a      	beq.n	81109bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 81109a6:	68b8      	ldr	r0, [r7, #8]
 81109a8:	6803      	ldr	r3, [r0, #0]
 81109aa:	9606      	str	r6, [sp, #24]
 81109ac:	6a1e      	ldr	r6, [r3, #32]
 81109ae:	462a      	mov	r2, r5
 81109b0:	4623      	mov	r3, r4
 81109b2:	4641      	mov	r1, r8
 81109b4:	46b4      	mov	ip, r6
 81109b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81109ba:	4760      	bx	ip
 81109bc:	4619      	mov	r1, r3
 81109be:	f7ff ff03 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 81109c2:	2800      	cmp	r0, #0
 81109c4:	d0ef      	beq.n	81109a6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 81109c6:	2006      	movs	r0, #6
 81109c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081109cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 81109cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81109d0:	460e      	mov	r6, r1
 81109d2:	4619      	mov	r1, r3
 81109d4:	4683      	mov	fp, r0
 81109d6:	4617      	mov	r7, r2
 81109d8:	4699      	mov	r9, r3
 81109da:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 81109de:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 81109e2:	f7ff fef1 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 81109e6:	b190      	cbz	r0, 8110a0e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 81109e8:	2e00      	cmp	r6, #0
 81109ea:	602c      	str	r4, [r5, #0]
 81109ec:	712f      	strb	r7, [r5, #4]
 81109ee:	db09      	blt.n	8110a04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 81109f0:	4434      	add	r4, r6
 81109f2:	45a0      	cmp	r8, r4
 81109f4:	bf0c      	ite	eq
 81109f6:	2406      	moveq	r4, #6
 81109f8:	2401      	movne	r4, #1
 81109fa:	71ac      	strb	r4, [r5, #6]
 81109fc:	2000      	movs	r0, #0
 81109fe:	b001      	add	sp, #4
 8110a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110a04:	3602      	adds	r6, #2
 8110a06:	d1f9      	bne.n	81109fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8110a08:	2301      	movs	r3, #1
 8110a0a:	71ab      	strb	r3, [r5, #6]
 8110a0c:	e7f6      	b.n	81109fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8110a0e:	4544      	cmp	r4, r8
 8110a10:	d106      	bne.n	8110a20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8110a12:	4651      	mov	r1, sl
 8110a14:	4658      	mov	r0, fp
 8110a16:	f7ff fed7 	bl	81107c8 <_ZNKSt9type_infoeqERKS_>
 8110a1a:	b108      	cbz	r0, 8110a20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8110a1c:	716f      	strb	r7, [r5, #5]
 8110a1e:	e7ed      	b.n	81109fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8110a20:	f8db 0008 	ldr.w	r0, [fp, #8]
 8110a24:	6803      	ldr	r3, [r0, #0]
 8110a26:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 8110a2a:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8110a2e:	69dc      	ldr	r4, [r3, #28]
 8110a30:	463a      	mov	r2, r7
 8110a32:	464b      	mov	r3, r9
 8110a34:	4631      	mov	r1, r6
 8110a36:	46a4      	mov	ip, r4
 8110a38:	b001      	add	sp, #4
 8110a3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110a3e:	4760      	bx	ip

08110a40 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8110a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110a44:	4604      	mov	r4, r0
 8110a46:	460d      	mov	r5, r1
 8110a48:	4616      	mov	r6, r2
 8110a4a:	461f      	mov	r7, r3
 8110a4c:	f7ff ff6d 	bl	811092a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8110a50:	b948      	cbnz	r0, 8110a66 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8110a52:	68a0      	ldr	r0, [r4, #8]
 8110a54:	6803      	ldr	r3, [r0, #0]
 8110a56:	699c      	ldr	r4, [r3, #24]
 8110a58:	4632      	mov	r2, r6
 8110a5a:	463b      	mov	r3, r7
 8110a5c:	4629      	mov	r1, r5
 8110a5e:	46a4      	mov	ip, r4
 8110a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8110a64:	4760      	bx	ip
 8110a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08110a6a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8110a6a:	b508      	push	{r3, lr}
 8110a6c:	4780      	blx	r0
 8110a6e:	f000 f80e 	bl	8110a8e <abort>
	...

08110a74 <_ZSt13get_terminatev>:
 8110a74:	4b02      	ldr	r3, [pc, #8]	; (8110a80 <_ZSt13get_terminatev+0xc>)
 8110a76:	6818      	ldr	r0, [r3, #0]
 8110a78:	f3bf 8f5b 	dmb	ish
 8110a7c:	4770      	bx	lr
 8110a7e:	bf00      	nop
 8110a80:	1000003c 	.word	0x1000003c

08110a84 <_ZSt9terminatev>:
 8110a84:	b508      	push	{r3, lr}
 8110a86:	f7ff fff5 	bl	8110a74 <_ZSt13get_terminatev>
 8110a8a:	f7ff ffee 	bl	8110a6a <_ZN10__cxxabiv111__terminateEPFvvE>

08110a8e <abort>:
 8110a8e:	b508      	push	{r3, lr}
 8110a90:	2006      	movs	r0, #6
 8110a92:	f000 fd4b 	bl	811152c <raise>
 8110a96:	2001      	movs	r0, #1
 8110a98:	f7f1 f9b8 	bl	8101e0c <_exit>

08110a9c <atexit>:
 8110a9c:	2300      	movs	r3, #0
 8110a9e:	4601      	mov	r1, r0
 8110aa0:	461a      	mov	r2, r3
 8110aa2:	4618      	mov	r0, r3
 8110aa4:	f000 bef0 	b.w	8111888 <__register_exitproc>

08110aa8 <atoi>:
 8110aa8:	220a      	movs	r2, #10
 8110aaa:	2100      	movs	r1, #0
 8110aac:	f000 bdf6 	b.w	811169c <strtol>

08110ab0 <__errno>:
 8110ab0:	4b01      	ldr	r3, [pc, #4]	; (8110ab8 <__errno+0x8>)
 8110ab2:	6818      	ldr	r0, [r3, #0]
 8110ab4:	4770      	bx	lr
 8110ab6:	bf00      	nop
 8110ab8:	10000040 	.word	0x10000040

08110abc <__libc_init_array>:
 8110abc:	b570      	push	{r4, r5, r6, lr}
 8110abe:	4e0d      	ldr	r6, [pc, #52]	; (8110af4 <__libc_init_array+0x38>)
 8110ac0:	4c0d      	ldr	r4, [pc, #52]	; (8110af8 <__libc_init_array+0x3c>)
 8110ac2:	1ba4      	subs	r4, r4, r6
 8110ac4:	10a4      	asrs	r4, r4, #2
 8110ac6:	2500      	movs	r5, #0
 8110ac8:	42a5      	cmp	r5, r4
 8110aca:	d109      	bne.n	8110ae0 <__libc_init_array+0x24>
 8110acc:	4e0b      	ldr	r6, [pc, #44]	; (8110afc <__libc_init_array+0x40>)
 8110ace:	4c0c      	ldr	r4, [pc, #48]	; (8110b00 <__libc_init_array+0x44>)
 8110ad0:	f002 fec2 	bl	8113858 <_init>
 8110ad4:	1ba4      	subs	r4, r4, r6
 8110ad6:	10a4      	asrs	r4, r4, #2
 8110ad8:	2500      	movs	r5, #0
 8110ada:	42a5      	cmp	r5, r4
 8110adc:	d105      	bne.n	8110aea <__libc_init_array+0x2e>
 8110ade:	bd70      	pop	{r4, r5, r6, pc}
 8110ae0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8110ae4:	4798      	blx	r3
 8110ae6:	3501      	adds	r5, #1
 8110ae8:	e7ee      	b.n	8110ac8 <__libc_init_array+0xc>
 8110aea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8110aee:	4798      	blx	r3
 8110af0:	3501      	adds	r5, #1
 8110af2:	e7f2      	b.n	8110ada <__libc_init_array+0x1e>
 8110af4:	081148b0 	.word	0x081148b0
 8110af8:	081148b0 	.word	0x081148b0
 8110afc:	081148b0 	.word	0x081148b0
 8110b00:	081148bc 	.word	0x081148bc

08110b04 <memcpy>:
 8110b04:	b510      	push	{r4, lr}
 8110b06:	1e43      	subs	r3, r0, #1
 8110b08:	440a      	add	r2, r1
 8110b0a:	4291      	cmp	r1, r2
 8110b0c:	d100      	bne.n	8110b10 <memcpy+0xc>
 8110b0e:	bd10      	pop	{r4, pc}
 8110b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8110b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8110b18:	e7f7      	b.n	8110b0a <memcpy+0x6>

08110b1a <memset>:
 8110b1a:	4402      	add	r2, r0
 8110b1c:	4603      	mov	r3, r0
 8110b1e:	4293      	cmp	r3, r2
 8110b20:	d100      	bne.n	8110b24 <memset+0xa>
 8110b22:	4770      	bx	lr
 8110b24:	f803 1b01 	strb.w	r1, [r3], #1
 8110b28:	e7f9      	b.n	8110b1e <memset+0x4>

08110b2a <__cvt>:
 8110b2a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8110b2e:	ec55 4b10 	vmov	r4, r5, d0
 8110b32:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8110b34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8110b38:	2d00      	cmp	r5, #0
 8110b3a:	460e      	mov	r6, r1
 8110b3c:	4691      	mov	r9, r2
 8110b3e:	4619      	mov	r1, r3
 8110b40:	bfb8      	it	lt
 8110b42:	4622      	movlt	r2, r4
 8110b44:	462b      	mov	r3, r5
 8110b46:	f027 0720 	bic.w	r7, r7, #32
 8110b4a:	bfbb      	ittet	lt
 8110b4c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8110b50:	461d      	movlt	r5, r3
 8110b52:	2300      	movge	r3, #0
 8110b54:	232d      	movlt	r3, #45	; 0x2d
 8110b56:	bfb8      	it	lt
 8110b58:	4614      	movlt	r4, r2
 8110b5a:	2f46      	cmp	r7, #70	; 0x46
 8110b5c:	700b      	strb	r3, [r1, #0]
 8110b5e:	d004      	beq.n	8110b6a <__cvt+0x40>
 8110b60:	2f45      	cmp	r7, #69	; 0x45
 8110b62:	d100      	bne.n	8110b66 <__cvt+0x3c>
 8110b64:	3601      	adds	r6, #1
 8110b66:	2102      	movs	r1, #2
 8110b68:	e000      	b.n	8110b6c <__cvt+0x42>
 8110b6a:	2103      	movs	r1, #3
 8110b6c:	ab03      	add	r3, sp, #12
 8110b6e:	9301      	str	r3, [sp, #4]
 8110b70:	ab02      	add	r3, sp, #8
 8110b72:	9300      	str	r3, [sp, #0]
 8110b74:	4632      	mov	r2, r6
 8110b76:	4653      	mov	r3, sl
 8110b78:	ec45 4b10 	vmov	d0, r4, r5
 8110b7c:	f000 ff74 	bl	8111a68 <_dtoa_r>
 8110b80:	2f47      	cmp	r7, #71	; 0x47
 8110b82:	4680      	mov	r8, r0
 8110b84:	d102      	bne.n	8110b8c <__cvt+0x62>
 8110b86:	f019 0f01 	tst.w	r9, #1
 8110b8a:	d026      	beq.n	8110bda <__cvt+0xb0>
 8110b8c:	2f46      	cmp	r7, #70	; 0x46
 8110b8e:	eb08 0906 	add.w	r9, r8, r6
 8110b92:	d111      	bne.n	8110bb8 <__cvt+0x8e>
 8110b94:	f898 3000 	ldrb.w	r3, [r8]
 8110b98:	2b30      	cmp	r3, #48	; 0x30
 8110b9a:	d10a      	bne.n	8110bb2 <__cvt+0x88>
 8110b9c:	2200      	movs	r2, #0
 8110b9e:	2300      	movs	r3, #0
 8110ba0:	4620      	mov	r0, r4
 8110ba2:	4629      	mov	r1, r5
 8110ba4:	f7f0 f828 	bl	8100bf8 <__aeabi_dcmpeq>
 8110ba8:	b918      	cbnz	r0, 8110bb2 <__cvt+0x88>
 8110baa:	f1c6 0601 	rsb	r6, r6, #1
 8110bae:	f8ca 6000 	str.w	r6, [sl]
 8110bb2:	f8da 3000 	ldr.w	r3, [sl]
 8110bb6:	4499      	add	r9, r3
 8110bb8:	2200      	movs	r2, #0
 8110bba:	2300      	movs	r3, #0
 8110bbc:	4620      	mov	r0, r4
 8110bbe:	4629      	mov	r1, r5
 8110bc0:	f7f0 f81a 	bl	8100bf8 <__aeabi_dcmpeq>
 8110bc4:	b938      	cbnz	r0, 8110bd6 <__cvt+0xac>
 8110bc6:	2230      	movs	r2, #48	; 0x30
 8110bc8:	9b03      	ldr	r3, [sp, #12]
 8110bca:	454b      	cmp	r3, r9
 8110bcc:	d205      	bcs.n	8110bda <__cvt+0xb0>
 8110bce:	1c59      	adds	r1, r3, #1
 8110bd0:	9103      	str	r1, [sp, #12]
 8110bd2:	701a      	strb	r2, [r3, #0]
 8110bd4:	e7f8      	b.n	8110bc8 <__cvt+0x9e>
 8110bd6:	f8cd 900c 	str.w	r9, [sp, #12]
 8110bda:	9b03      	ldr	r3, [sp, #12]
 8110bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8110bde:	eba3 0308 	sub.w	r3, r3, r8
 8110be2:	4640      	mov	r0, r8
 8110be4:	6013      	str	r3, [r2, #0]
 8110be6:	b004      	add	sp, #16
 8110be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08110bec <__exponent>:
 8110bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8110bee:	2900      	cmp	r1, #0
 8110bf0:	4604      	mov	r4, r0
 8110bf2:	bfba      	itte	lt
 8110bf4:	4249      	neglt	r1, r1
 8110bf6:	232d      	movlt	r3, #45	; 0x2d
 8110bf8:	232b      	movge	r3, #43	; 0x2b
 8110bfa:	2909      	cmp	r1, #9
 8110bfc:	f804 2b02 	strb.w	r2, [r4], #2
 8110c00:	7043      	strb	r3, [r0, #1]
 8110c02:	dd20      	ble.n	8110c46 <__exponent+0x5a>
 8110c04:	f10d 0307 	add.w	r3, sp, #7
 8110c08:	461f      	mov	r7, r3
 8110c0a:	260a      	movs	r6, #10
 8110c0c:	fb91 f5f6 	sdiv	r5, r1, r6
 8110c10:	fb06 1115 	mls	r1, r6, r5, r1
 8110c14:	3130      	adds	r1, #48	; 0x30
 8110c16:	2d09      	cmp	r5, #9
 8110c18:	f803 1c01 	strb.w	r1, [r3, #-1]
 8110c1c:	f103 32ff 	add.w	r2, r3, #4294967295
 8110c20:	4629      	mov	r1, r5
 8110c22:	dc09      	bgt.n	8110c38 <__exponent+0x4c>
 8110c24:	3130      	adds	r1, #48	; 0x30
 8110c26:	3b02      	subs	r3, #2
 8110c28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8110c2c:	42bb      	cmp	r3, r7
 8110c2e:	4622      	mov	r2, r4
 8110c30:	d304      	bcc.n	8110c3c <__exponent+0x50>
 8110c32:	1a10      	subs	r0, r2, r0
 8110c34:	b003      	add	sp, #12
 8110c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8110c38:	4613      	mov	r3, r2
 8110c3a:	e7e7      	b.n	8110c0c <__exponent+0x20>
 8110c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8110c40:	f804 2b01 	strb.w	r2, [r4], #1
 8110c44:	e7f2      	b.n	8110c2c <__exponent+0x40>
 8110c46:	2330      	movs	r3, #48	; 0x30
 8110c48:	4419      	add	r1, r3
 8110c4a:	7083      	strb	r3, [r0, #2]
 8110c4c:	1d02      	adds	r2, r0, #4
 8110c4e:	70c1      	strb	r1, [r0, #3]
 8110c50:	e7ef      	b.n	8110c32 <__exponent+0x46>
	...

08110c54 <_printf_float>:
 8110c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110c58:	b08d      	sub	sp, #52	; 0x34
 8110c5a:	460c      	mov	r4, r1
 8110c5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8110c60:	4616      	mov	r6, r2
 8110c62:	461f      	mov	r7, r3
 8110c64:	4605      	mov	r5, r0
 8110c66:	f001 fe35 	bl	81128d4 <_localeconv_r>
 8110c6a:	6803      	ldr	r3, [r0, #0]
 8110c6c:	9304      	str	r3, [sp, #16]
 8110c6e:	4618      	mov	r0, r3
 8110c70:	f7ef fb40 	bl	81002f4 <strlen>
 8110c74:	2300      	movs	r3, #0
 8110c76:	930a      	str	r3, [sp, #40]	; 0x28
 8110c78:	f8d8 3000 	ldr.w	r3, [r8]
 8110c7c:	9005      	str	r0, [sp, #20]
 8110c7e:	3307      	adds	r3, #7
 8110c80:	f023 0307 	bic.w	r3, r3, #7
 8110c84:	f103 0208 	add.w	r2, r3, #8
 8110c88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8110c8c:	f8d4 b000 	ldr.w	fp, [r4]
 8110c90:	f8c8 2000 	str.w	r2, [r8]
 8110c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8110c9c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8110ca0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8110ca4:	9307      	str	r3, [sp, #28]
 8110ca6:	f8cd 8018 	str.w	r8, [sp, #24]
 8110caa:	f04f 32ff 	mov.w	r2, #4294967295
 8110cae:	4ba7      	ldr	r3, [pc, #668]	; (8110f4c <_printf_float+0x2f8>)
 8110cb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8110cb4:	f7ef ffd2 	bl	8100c5c <__aeabi_dcmpun>
 8110cb8:	bb70      	cbnz	r0, 8110d18 <_printf_float+0xc4>
 8110cba:	f04f 32ff 	mov.w	r2, #4294967295
 8110cbe:	4ba3      	ldr	r3, [pc, #652]	; (8110f4c <_printf_float+0x2f8>)
 8110cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8110cc4:	f7ef ffac 	bl	8100c20 <__aeabi_dcmple>
 8110cc8:	bb30      	cbnz	r0, 8110d18 <_printf_float+0xc4>
 8110cca:	2200      	movs	r2, #0
 8110ccc:	2300      	movs	r3, #0
 8110cce:	4640      	mov	r0, r8
 8110cd0:	4649      	mov	r1, r9
 8110cd2:	f7ef ff9b 	bl	8100c0c <__aeabi_dcmplt>
 8110cd6:	b110      	cbz	r0, 8110cde <_printf_float+0x8a>
 8110cd8:	232d      	movs	r3, #45	; 0x2d
 8110cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8110cde:	4a9c      	ldr	r2, [pc, #624]	; (8110f50 <_printf_float+0x2fc>)
 8110ce0:	4b9c      	ldr	r3, [pc, #624]	; (8110f54 <_printf_float+0x300>)
 8110ce2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8110ce6:	bf8c      	ite	hi
 8110ce8:	4690      	movhi	r8, r2
 8110cea:	4698      	movls	r8, r3
 8110cec:	2303      	movs	r3, #3
 8110cee:	f02b 0204 	bic.w	r2, fp, #4
 8110cf2:	6123      	str	r3, [r4, #16]
 8110cf4:	6022      	str	r2, [r4, #0]
 8110cf6:	f04f 0900 	mov.w	r9, #0
 8110cfa:	9700      	str	r7, [sp, #0]
 8110cfc:	4633      	mov	r3, r6
 8110cfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8110d00:	4621      	mov	r1, r4
 8110d02:	4628      	mov	r0, r5
 8110d04:	f000 f9e6 	bl	81110d4 <_printf_common>
 8110d08:	3001      	adds	r0, #1
 8110d0a:	f040 808d 	bne.w	8110e28 <_printf_float+0x1d4>
 8110d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8110d12:	b00d      	add	sp, #52	; 0x34
 8110d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110d18:	4642      	mov	r2, r8
 8110d1a:	464b      	mov	r3, r9
 8110d1c:	4640      	mov	r0, r8
 8110d1e:	4649      	mov	r1, r9
 8110d20:	f7ef ff9c 	bl	8100c5c <__aeabi_dcmpun>
 8110d24:	b110      	cbz	r0, 8110d2c <_printf_float+0xd8>
 8110d26:	4a8c      	ldr	r2, [pc, #560]	; (8110f58 <_printf_float+0x304>)
 8110d28:	4b8c      	ldr	r3, [pc, #560]	; (8110f5c <_printf_float+0x308>)
 8110d2a:	e7da      	b.n	8110ce2 <_printf_float+0x8e>
 8110d2c:	6861      	ldr	r1, [r4, #4]
 8110d2e:	1c4b      	adds	r3, r1, #1
 8110d30:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8110d34:	a80a      	add	r0, sp, #40	; 0x28
 8110d36:	d13e      	bne.n	8110db6 <_printf_float+0x162>
 8110d38:	2306      	movs	r3, #6
 8110d3a:	6063      	str	r3, [r4, #4]
 8110d3c:	2300      	movs	r3, #0
 8110d3e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8110d42:	ab09      	add	r3, sp, #36	; 0x24
 8110d44:	9300      	str	r3, [sp, #0]
 8110d46:	ec49 8b10 	vmov	d0, r8, r9
 8110d4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8110d4e:	6022      	str	r2, [r4, #0]
 8110d50:	f8cd a004 	str.w	sl, [sp, #4]
 8110d54:	6861      	ldr	r1, [r4, #4]
 8110d56:	4628      	mov	r0, r5
 8110d58:	f7ff fee7 	bl	8110b2a <__cvt>
 8110d5c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8110d60:	2b47      	cmp	r3, #71	; 0x47
 8110d62:	4680      	mov	r8, r0
 8110d64:	d109      	bne.n	8110d7a <_printf_float+0x126>
 8110d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110d68:	1cd8      	adds	r0, r3, #3
 8110d6a:	db02      	blt.n	8110d72 <_printf_float+0x11e>
 8110d6c:	6862      	ldr	r2, [r4, #4]
 8110d6e:	4293      	cmp	r3, r2
 8110d70:	dd47      	ble.n	8110e02 <_printf_float+0x1ae>
 8110d72:	f1aa 0a02 	sub.w	sl, sl, #2
 8110d76:	fa5f fa8a 	uxtb.w	sl, sl
 8110d7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8110d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8110d80:	d824      	bhi.n	8110dcc <_printf_float+0x178>
 8110d82:	3901      	subs	r1, #1
 8110d84:	4652      	mov	r2, sl
 8110d86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8110d8a:	9109      	str	r1, [sp, #36]	; 0x24
 8110d8c:	f7ff ff2e 	bl	8110bec <__exponent>
 8110d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8110d92:	1813      	adds	r3, r2, r0
 8110d94:	2a01      	cmp	r2, #1
 8110d96:	4681      	mov	r9, r0
 8110d98:	6123      	str	r3, [r4, #16]
 8110d9a:	dc02      	bgt.n	8110da2 <_printf_float+0x14e>
 8110d9c:	6822      	ldr	r2, [r4, #0]
 8110d9e:	07d1      	lsls	r1, r2, #31
 8110da0:	d501      	bpl.n	8110da6 <_printf_float+0x152>
 8110da2:	3301      	adds	r3, #1
 8110da4:	6123      	str	r3, [r4, #16]
 8110da6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8110daa:	2b00      	cmp	r3, #0
 8110dac:	d0a5      	beq.n	8110cfa <_printf_float+0xa6>
 8110dae:	232d      	movs	r3, #45	; 0x2d
 8110db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8110db4:	e7a1      	b.n	8110cfa <_printf_float+0xa6>
 8110db6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8110dba:	f000 8177 	beq.w	81110ac <_printf_float+0x458>
 8110dbe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8110dc2:	d1bb      	bne.n	8110d3c <_printf_float+0xe8>
 8110dc4:	2900      	cmp	r1, #0
 8110dc6:	d1b9      	bne.n	8110d3c <_printf_float+0xe8>
 8110dc8:	2301      	movs	r3, #1
 8110dca:	e7b6      	b.n	8110d3a <_printf_float+0xe6>
 8110dcc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8110dd0:	d119      	bne.n	8110e06 <_printf_float+0x1b2>
 8110dd2:	2900      	cmp	r1, #0
 8110dd4:	6863      	ldr	r3, [r4, #4]
 8110dd6:	dd0c      	ble.n	8110df2 <_printf_float+0x19e>
 8110dd8:	6121      	str	r1, [r4, #16]
 8110dda:	b913      	cbnz	r3, 8110de2 <_printf_float+0x18e>
 8110ddc:	6822      	ldr	r2, [r4, #0]
 8110dde:	07d2      	lsls	r2, r2, #31
 8110de0:	d502      	bpl.n	8110de8 <_printf_float+0x194>
 8110de2:	3301      	adds	r3, #1
 8110de4:	440b      	add	r3, r1
 8110de6:	6123      	str	r3, [r4, #16]
 8110de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110dea:	65a3      	str	r3, [r4, #88]	; 0x58
 8110dec:	f04f 0900 	mov.w	r9, #0
 8110df0:	e7d9      	b.n	8110da6 <_printf_float+0x152>
 8110df2:	b913      	cbnz	r3, 8110dfa <_printf_float+0x1a6>
 8110df4:	6822      	ldr	r2, [r4, #0]
 8110df6:	07d0      	lsls	r0, r2, #31
 8110df8:	d501      	bpl.n	8110dfe <_printf_float+0x1aa>
 8110dfa:	3302      	adds	r3, #2
 8110dfc:	e7f3      	b.n	8110de6 <_printf_float+0x192>
 8110dfe:	2301      	movs	r3, #1
 8110e00:	e7f1      	b.n	8110de6 <_printf_float+0x192>
 8110e02:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8110e06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8110e0a:	4293      	cmp	r3, r2
 8110e0c:	db05      	blt.n	8110e1a <_printf_float+0x1c6>
 8110e0e:	6822      	ldr	r2, [r4, #0]
 8110e10:	6123      	str	r3, [r4, #16]
 8110e12:	07d1      	lsls	r1, r2, #31
 8110e14:	d5e8      	bpl.n	8110de8 <_printf_float+0x194>
 8110e16:	3301      	adds	r3, #1
 8110e18:	e7e5      	b.n	8110de6 <_printf_float+0x192>
 8110e1a:	2b00      	cmp	r3, #0
 8110e1c:	bfd4      	ite	le
 8110e1e:	f1c3 0302 	rsble	r3, r3, #2
 8110e22:	2301      	movgt	r3, #1
 8110e24:	4413      	add	r3, r2
 8110e26:	e7de      	b.n	8110de6 <_printf_float+0x192>
 8110e28:	6823      	ldr	r3, [r4, #0]
 8110e2a:	055a      	lsls	r2, r3, #21
 8110e2c:	d407      	bmi.n	8110e3e <_printf_float+0x1ea>
 8110e2e:	6923      	ldr	r3, [r4, #16]
 8110e30:	4642      	mov	r2, r8
 8110e32:	4631      	mov	r1, r6
 8110e34:	4628      	mov	r0, r5
 8110e36:	47b8      	blx	r7
 8110e38:	3001      	adds	r0, #1
 8110e3a:	d12b      	bne.n	8110e94 <_printf_float+0x240>
 8110e3c:	e767      	b.n	8110d0e <_printf_float+0xba>
 8110e3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8110e42:	f240 80dc 	bls.w	8110ffe <_printf_float+0x3aa>
 8110e46:	2200      	movs	r2, #0
 8110e48:	2300      	movs	r3, #0
 8110e4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8110e4e:	f7ef fed3 	bl	8100bf8 <__aeabi_dcmpeq>
 8110e52:	2800      	cmp	r0, #0
 8110e54:	d033      	beq.n	8110ebe <_printf_float+0x26a>
 8110e56:	2301      	movs	r3, #1
 8110e58:	4a41      	ldr	r2, [pc, #260]	; (8110f60 <_printf_float+0x30c>)
 8110e5a:	4631      	mov	r1, r6
 8110e5c:	4628      	mov	r0, r5
 8110e5e:	47b8      	blx	r7
 8110e60:	3001      	adds	r0, #1
 8110e62:	f43f af54 	beq.w	8110d0e <_printf_float+0xba>
 8110e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8110e6a:	429a      	cmp	r2, r3
 8110e6c:	db02      	blt.n	8110e74 <_printf_float+0x220>
 8110e6e:	6823      	ldr	r3, [r4, #0]
 8110e70:	07d8      	lsls	r0, r3, #31
 8110e72:	d50f      	bpl.n	8110e94 <_printf_float+0x240>
 8110e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110e78:	4631      	mov	r1, r6
 8110e7a:	4628      	mov	r0, r5
 8110e7c:	47b8      	blx	r7
 8110e7e:	3001      	adds	r0, #1
 8110e80:	f43f af45 	beq.w	8110d0e <_printf_float+0xba>
 8110e84:	f04f 0800 	mov.w	r8, #0
 8110e88:	f104 091a 	add.w	r9, r4, #26
 8110e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110e8e:	3b01      	subs	r3, #1
 8110e90:	4543      	cmp	r3, r8
 8110e92:	dc09      	bgt.n	8110ea8 <_printf_float+0x254>
 8110e94:	6823      	ldr	r3, [r4, #0]
 8110e96:	079b      	lsls	r3, r3, #30
 8110e98:	f100 8103 	bmi.w	81110a2 <_printf_float+0x44e>
 8110e9c:	68e0      	ldr	r0, [r4, #12]
 8110e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8110ea0:	4298      	cmp	r0, r3
 8110ea2:	bfb8      	it	lt
 8110ea4:	4618      	movlt	r0, r3
 8110ea6:	e734      	b.n	8110d12 <_printf_float+0xbe>
 8110ea8:	2301      	movs	r3, #1
 8110eaa:	464a      	mov	r2, r9
 8110eac:	4631      	mov	r1, r6
 8110eae:	4628      	mov	r0, r5
 8110eb0:	47b8      	blx	r7
 8110eb2:	3001      	adds	r0, #1
 8110eb4:	f43f af2b 	beq.w	8110d0e <_printf_float+0xba>
 8110eb8:	f108 0801 	add.w	r8, r8, #1
 8110ebc:	e7e6      	b.n	8110e8c <_printf_float+0x238>
 8110ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110ec0:	2b00      	cmp	r3, #0
 8110ec2:	dc2b      	bgt.n	8110f1c <_printf_float+0x2c8>
 8110ec4:	2301      	movs	r3, #1
 8110ec6:	4a26      	ldr	r2, [pc, #152]	; (8110f60 <_printf_float+0x30c>)
 8110ec8:	4631      	mov	r1, r6
 8110eca:	4628      	mov	r0, r5
 8110ecc:	47b8      	blx	r7
 8110ece:	3001      	adds	r0, #1
 8110ed0:	f43f af1d 	beq.w	8110d0e <_printf_float+0xba>
 8110ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110ed6:	b923      	cbnz	r3, 8110ee2 <_printf_float+0x28e>
 8110ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110eda:	b913      	cbnz	r3, 8110ee2 <_printf_float+0x28e>
 8110edc:	6823      	ldr	r3, [r4, #0]
 8110ede:	07d9      	lsls	r1, r3, #31
 8110ee0:	d5d8      	bpl.n	8110e94 <_printf_float+0x240>
 8110ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110ee6:	4631      	mov	r1, r6
 8110ee8:	4628      	mov	r0, r5
 8110eea:	47b8      	blx	r7
 8110eec:	3001      	adds	r0, #1
 8110eee:	f43f af0e 	beq.w	8110d0e <_printf_float+0xba>
 8110ef2:	f04f 0900 	mov.w	r9, #0
 8110ef6:	f104 0a1a 	add.w	sl, r4, #26
 8110efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110efc:	425b      	negs	r3, r3
 8110efe:	454b      	cmp	r3, r9
 8110f00:	dc01      	bgt.n	8110f06 <_printf_float+0x2b2>
 8110f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110f04:	e794      	b.n	8110e30 <_printf_float+0x1dc>
 8110f06:	2301      	movs	r3, #1
 8110f08:	4652      	mov	r2, sl
 8110f0a:	4631      	mov	r1, r6
 8110f0c:	4628      	mov	r0, r5
 8110f0e:	47b8      	blx	r7
 8110f10:	3001      	adds	r0, #1
 8110f12:	f43f aefc 	beq.w	8110d0e <_printf_float+0xba>
 8110f16:	f109 0901 	add.w	r9, r9, #1
 8110f1a:	e7ee      	b.n	8110efa <_printf_float+0x2a6>
 8110f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8110f1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8110f20:	429a      	cmp	r2, r3
 8110f22:	bfa8      	it	ge
 8110f24:	461a      	movge	r2, r3
 8110f26:	2a00      	cmp	r2, #0
 8110f28:	4691      	mov	r9, r2
 8110f2a:	dd07      	ble.n	8110f3c <_printf_float+0x2e8>
 8110f2c:	4613      	mov	r3, r2
 8110f2e:	4631      	mov	r1, r6
 8110f30:	4642      	mov	r2, r8
 8110f32:	4628      	mov	r0, r5
 8110f34:	47b8      	blx	r7
 8110f36:	3001      	adds	r0, #1
 8110f38:	f43f aee9 	beq.w	8110d0e <_printf_float+0xba>
 8110f3c:	f104 031a 	add.w	r3, r4, #26
 8110f40:	f04f 0b00 	mov.w	fp, #0
 8110f44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8110f48:	9306      	str	r3, [sp, #24]
 8110f4a:	e015      	b.n	8110f78 <_printf_float+0x324>
 8110f4c:	7fefffff 	.word	0x7fefffff
 8110f50:	081145e8 	.word	0x081145e8
 8110f54:	081145e4 	.word	0x081145e4
 8110f58:	081145f0 	.word	0x081145f0
 8110f5c:	081145ec 	.word	0x081145ec
 8110f60:	081145f4 	.word	0x081145f4
 8110f64:	2301      	movs	r3, #1
 8110f66:	9a06      	ldr	r2, [sp, #24]
 8110f68:	4631      	mov	r1, r6
 8110f6a:	4628      	mov	r0, r5
 8110f6c:	47b8      	blx	r7
 8110f6e:	3001      	adds	r0, #1
 8110f70:	f43f aecd 	beq.w	8110d0e <_printf_float+0xba>
 8110f74:	f10b 0b01 	add.w	fp, fp, #1
 8110f78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8110f7c:	ebaa 0309 	sub.w	r3, sl, r9
 8110f80:	455b      	cmp	r3, fp
 8110f82:	dcef      	bgt.n	8110f64 <_printf_float+0x310>
 8110f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8110f88:	429a      	cmp	r2, r3
 8110f8a:	44d0      	add	r8, sl
 8110f8c:	db15      	blt.n	8110fba <_printf_float+0x366>
 8110f8e:	6823      	ldr	r3, [r4, #0]
 8110f90:	07da      	lsls	r2, r3, #31
 8110f92:	d412      	bmi.n	8110fba <_printf_float+0x366>
 8110f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8110f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8110f98:	eba3 020a 	sub.w	r2, r3, sl
 8110f9c:	eba3 0a01 	sub.w	sl, r3, r1
 8110fa0:	4592      	cmp	sl, r2
 8110fa2:	bfa8      	it	ge
 8110fa4:	4692      	movge	sl, r2
 8110fa6:	f1ba 0f00 	cmp.w	sl, #0
 8110faa:	dc0e      	bgt.n	8110fca <_printf_float+0x376>
 8110fac:	f04f 0800 	mov.w	r8, #0
 8110fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8110fb4:	f104 091a 	add.w	r9, r4, #26
 8110fb8:	e019      	b.n	8110fee <_printf_float+0x39a>
 8110fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110fbe:	4631      	mov	r1, r6
 8110fc0:	4628      	mov	r0, r5
 8110fc2:	47b8      	blx	r7
 8110fc4:	3001      	adds	r0, #1
 8110fc6:	d1e5      	bne.n	8110f94 <_printf_float+0x340>
 8110fc8:	e6a1      	b.n	8110d0e <_printf_float+0xba>
 8110fca:	4653      	mov	r3, sl
 8110fcc:	4642      	mov	r2, r8
 8110fce:	4631      	mov	r1, r6
 8110fd0:	4628      	mov	r0, r5
 8110fd2:	47b8      	blx	r7
 8110fd4:	3001      	adds	r0, #1
 8110fd6:	d1e9      	bne.n	8110fac <_printf_float+0x358>
 8110fd8:	e699      	b.n	8110d0e <_printf_float+0xba>
 8110fda:	2301      	movs	r3, #1
 8110fdc:	464a      	mov	r2, r9
 8110fde:	4631      	mov	r1, r6
 8110fe0:	4628      	mov	r0, r5
 8110fe2:	47b8      	blx	r7
 8110fe4:	3001      	adds	r0, #1
 8110fe6:	f43f ae92 	beq.w	8110d0e <_printf_float+0xba>
 8110fea:	f108 0801 	add.w	r8, r8, #1
 8110fee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8110ff2:	1a9b      	subs	r3, r3, r2
 8110ff4:	eba3 030a 	sub.w	r3, r3, sl
 8110ff8:	4543      	cmp	r3, r8
 8110ffa:	dcee      	bgt.n	8110fda <_printf_float+0x386>
 8110ffc:	e74a      	b.n	8110e94 <_printf_float+0x240>
 8110ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8111000:	2a01      	cmp	r2, #1
 8111002:	dc01      	bgt.n	8111008 <_printf_float+0x3b4>
 8111004:	07db      	lsls	r3, r3, #31
 8111006:	d53a      	bpl.n	811107e <_printf_float+0x42a>
 8111008:	2301      	movs	r3, #1
 811100a:	4642      	mov	r2, r8
 811100c:	4631      	mov	r1, r6
 811100e:	4628      	mov	r0, r5
 8111010:	47b8      	blx	r7
 8111012:	3001      	adds	r0, #1
 8111014:	f43f ae7b 	beq.w	8110d0e <_printf_float+0xba>
 8111018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811101c:	4631      	mov	r1, r6
 811101e:	4628      	mov	r0, r5
 8111020:	47b8      	blx	r7
 8111022:	3001      	adds	r0, #1
 8111024:	f108 0801 	add.w	r8, r8, #1
 8111028:	f43f ae71 	beq.w	8110d0e <_printf_float+0xba>
 811102c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811102e:	2200      	movs	r2, #0
 8111030:	f103 3aff 	add.w	sl, r3, #4294967295
 8111034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8111038:	2300      	movs	r3, #0
 811103a:	f7ef fddd 	bl	8100bf8 <__aeabi_dcmpeq>
 811103e:	b9c8      	cbnz	r0, 8111074 <_printf_float+0x420>
 8111040:	4653      	mov	r3, sl
 8111042:	4642      	mov	r2, r8
 8111044:	4631      	mov	r1, r6
 8111046:	4628      	mov	r0, r5
 8111048:	47b8      	blx	r7
 811104a:	3001      	adds	r0, #1
 811104c:	d10e      	bne.n	811106c <_printf_float+0x418>
 811104e:	e65e      	b.n	8110d0e <_printf_float+0xba>
 8111050:	2301      	movs	r3, #1
 8111052:	4652      	mov	r2, sl
 8111054:	4631      	mov	r1, r6
 8111056:	4628      	mov	r0, r5
 8111058:	47b8      	blx	r7
 811105a:	3001      	adds	r0, #1
 811105c:	f43f ae57 	beq.w	8110d0e <_printf_float+0xba>
 8111060:	f108 0801 	add.w	r8, r8, #1
 8111064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8111066:	3b01      	subs	r3, #1
 8111068:	4543      	cmp	r3, r8
 811106a:	dcf1      	bgt.n	8111050 <_printf_float+0x3fc>
 811106c:	464b      	mov	r3, r9
 811106e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8111072:	e6de      	b.n	8110e32 <_printf_float+0x1de>
 8111074:	f04f 0800 	mov.w	r8, #0
 8111078:	f104 0a1a 	add.w	sl, r4, #26
 811107c:	e7f2      	b.n	8111064 <_printf_float+0x410>
 811107e:	2301      	movs	r3, #1
 8111080:	e7df      	b.n	8111042 <_printf_float+0x3ee>
 8111082:	2301      	movs	r3, #1
 8111084:	464a      	mov	r2, r9
 8111086:	4631      	mov	r1, r6
 8111088:	4628      	mov	r0, r5
 811108a:	47b8      	blx	r7
 811108c:	3001      	adds	r0, #1
 811108e:	f43f ae3e 	beq.w	8110d0e <_printf_float+0xba>
 8111092:	f108 0801 	add.w	r8, r8, #1
 8111096:	68e3      	ldr	r3, [r4, #12]
 8111098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 811109a:	1a9b      	subs	r3, r3, r2
 811109c:	4543      	cmp	r3, r8
 811109e:	dcf0      	bgt.n	8111082 <_printf_float+0x42e>
 81110a0:	e6fc      	b.n	8110e9c <_printf_float+0x248>
 81110a2:	f04f 0800 	mov.w	r8, #0
 81110a6:	f104 0919 	add.w	r9, r4, #25
 81110aa:	e7f4      	b.n	8111096 <_printf_float+0x442>
 81110ac:	2900      	cmp	r1, #0
 81110ae:	f43f ae8b 	beq.w	8110dc8 <_printf_float+0x174>
 81110b2:	2300      	movs	r3, #0
 81110b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 81110b8:	ab09      	add	r3, sp, #36	; 0x24
 81110ba:	9300      	str	r3, [sp, #0]
 81110bc:	ec49 8b10 	vmov	d0, r8, r9
 81110c0:	6022      	str	r2, [r4, #0]
 81110c2:	f8cd a004 	str.w	sl, [sp, #4]
 81110c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81110ca:	4628      	mov	r0, r5
 81110cc:	f7ff fd2d 	bl	8110b2a <__cvt>
 81110d0:	4680      	mov	r8, r0
 81110d2:	e648      	b.n	8110d66 <_printf_float+0x112>

081110d4 <_printf_common>:
 81110d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81110d8:	4691      	mov	r9, r2
 81110da:	461f      	mov	r7, r3
 81110dc:	688a      	ldr	r2, [r1, #8]
 81110de:	690b      	ldr	r3, [r1, #16]
 81110e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81110e4:	4293      	cmp	r3, r2
 81110e6:	bfb8      	it	lt
 81110e8:	4613      	movlt	r3, r2
 81110ea:	f8c9 3000 	str.w	r3, [r9]
 81110ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81110f2:	4606      	mov	r6, r0
 81110f4:	460c      	mov	r4, r1
 81110f6:	b112      	cbz	r2, 81110fe <_printf_common+0x2a>
 81110f8:	3301      	adds	r3, #1
 81110fa:	f8c9 3000 	str.w	r3, [r9]
 81110fe:	6823      	ldr	r3, [r4, #0]
 8111100:	0699      	lsls	r1, r3, #26
 8111102:	bf42      	ittt	mi
 8111104:	f8d9 3000 	ldrmi.w	r3, [r9]
 8111108:	3302      	addmi	r3, #2
 811110a:	f8c9 3000 	strmi.w	r3, [r9]
 811110e:	6825      	ldr	r5, [r4, #0]
 8111110:	f015 0506 	ands.w	r5, r5, #6
 8111114:	d107      	bne.n	8111126 <_printf_common+0x52>
 8111116:	f104 0a19 	add.w	sl, r4, #25
 811111a:	68e3      	ldr	r3, [r4, #12]
 811111c:	f8d9 2000 	ldr.w	r2, [r9]
 8111120:	1a9b      	subs	r3, r3, r2
 8111122:	42ab      	cmp	r3, r5
 8111124:	dc28      	bgt.n	8111178 <_printf_common+0xa4>
 8111126:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 811112a:	6822      	ldr	r2, [r4, #0]
 811112c:	3300      	adds	r3, #0
 811112e:	bf18      	it	ne
 8111130:	2301      	movne	r3, #1
 8111132:	0692      	lsls	r2, r2, #26
 8111134:	d42d      	bmi.n	8111192 <_printf_common+0xbe>
 8111136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 811113a:	4639      	mov	r1, r7
 811113c:	4630      	mov	r0, r6
 811113e:	47c0      	blx	r8
 8111140:	3001      	adds	r0, #1
 8111142:	d020      	beq.n	8111186 <_printf_common+0xb2>
 8111144:	6823      	ldr	r3, [r4, #0]
 8111146:	68e5      	ldr	r5, [r4, #12]
 8111148:	f8d9 2000 	ldr.w	r2, [r9]
 811114c:	f003 0306 	and.w	r3, r3, #6
 8111150:	2b04      	cmp	r3, #4
 8111152:	bf08      	it	eq
 8111154:	1aad      	subeq	r5, r5, r2
 8111156:	68a3      	ldr	r3, [r4, #8]
 8111158:	6922      	ldr	r2, [r4, #16]
 811115a:	bf0c      	ite	eq
 811115c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8111160:	2500      	movne	r5, #0
 8111162:	4293      	cmp	r3, r2
 8111164:	bfc4      	itt	gt
 8111166:	1a9b      	subgt	r3, r3, r2
 8111168:	18ed      	addgt	r5, r5, r3
 811116a:	f04f 0900 	mov.w	r9, #0
 811116e:	341a      	adds	r4, #26
 8111170:	454d      	cmp	r5, r9
 8111172:	d11a      	bne.n	81111aa <_printf_common+0xd6>
 8111174:	2000      	movs	r0, #0
 8111176:	e008      	b.n	811118a <_printf_common+0xb6>
 8111178:	2301      	movs	r3, #1
 811117a:	4652      	mov	r2, sl
 811117c:	4639      	mov	r1, r7
 811117e:	4630      	mov	r0, r6
 8111180:	47c0      	blx	r8
 8111182:	3001      	adds	r0, #1
 8111184:	d103      	bne.n	811118e <_printf_common+0xba>
 8111186:	f04f 30ff 	mov.w	r0, #4294967295
 811118a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811118e:	3501      	adds	r5, #1
 8111190:	e7c3      	b.n	811111a <_printf_common+0x46>
 8111192:	18e1      	adds	r1, r4, r3
 8111194:	1c5a      	adds	r2, r3, #1
 8111196:	2030      	movs	r0, #48	; 0x30
 8111198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 811119c:	4422      	add	r2, r4
 811119e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81111a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81111a6:	3302      	adds	r3, #2
 81111a8:	e7c5      	b.n	8111136 <_printf_common+0x62>
 81111aa:	2301      	movs	r3, #1
 81111ac:	4622      	mov	r2, r4
 81111ae:	4639      	mov	r1, r7
 81111b0:	4630      	mov	r0, r6
 81111b2:	47c0      	blx	r8
 81111b4:	3001      	adds	r0, #1
 81111b6:	d0e6      	beq.n	8111186 <_printf_common+0xb2>
 81111b8:	f109 0901 	add.w	r9, r9, #1
 81111bc:	e7d8      	b.n	8111170 <_printf_common+0x9c>
	...

081111c0 <_printf_i>:
 81111c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81111c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 81111c8:	460c      	mov	r4, r1
 81111ca:	7e09      	ldrb	r1, [r1, #24]
 81111cc:	b085      	sub	sp, #20
 81111ce:	296e      	cmp	r1, #110	; 0x6e
 81111d0:	4617      	mov	r7, r2
 81111d2:	4606      	mov	r6, r0
 81111d4:	4698      	mov	r8, r3
 81111d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81111d8:	f000 80b3 	beq.w	8111342 <_printf_i+0x182>
 81111dc:	d822      	bhi.n	8111224 <_printf_i+0x64>
 81111de:	2963      	cmp	r1, #99	; 0x63
 81111e0:	d036      	beq.n	8111250 <_printf_i+0x90>
 81111e2:	d80a      	bhi.n	81111fa <_printf_i+0x3a>
 81111e4:	2900      	cmp	r1, #0
 81111e6:	f000 80b9 	beq.w	811135c <_printf_i+0x19c>
 81111ea:	2958      	cmp	r1, #88	; 0x58
 81111ec:	f000 8083 	beq.w	81112f6 <_printf_i+0x136>
 81111f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81111f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 81111f8:	e032      	b.n	8111260 <_printf_i+0xa0>
 81111fa:	2964      	cmp	r1, #100	; 0x64
 81111fc:	d001      	beq.n	8111202 <_printf_i+0x42>
 81111fe:	2969      	cmp	r1, #105	; 0x69
 8111200:	d1f6      	bne.n	81111f0 <_printf_i+0x30>
 8111202:	6820      	ldr	r0, [r4, #0]
 8111204:	6813      	ldr	r3, [r2, #0]
 8111206:	0605      	lsls	r5, r0, #24
 8111208:	f103 0104 	add.w	r1, r3, #4
 811120c:	d52a      	bpl.n	8111264 <_printf_i+0xa4>
 811120e:	681b      	ldr	r3, [r3, #0]
 8111210:	6011      	str	r1, [r2, #0]
 8111212:	2b00      	cmp	r3, #0
 8111214:	da03      	bge.n	811121e <_printf_i+0x5e>
 8111216:	222d      	movs	r2, #45	; 0x2d
 8111218:	425b      	negs	r3, r3
 811121a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 811121e:	486f      	ldr	r0, [pc, #444]	; (81113dc <_printf_i+0x21c>)
 8111220:	220a      	movs	r2, #10
 8111222:	e039      	b.n	8111298 <_printf_i+0xd8>
 8111224:	2973      	cmp	r1, #115	; 0x73
 8111226:	f000 809d 	beq.w	8111364 <_printf_i+0x1a4>
 811122a:	d808      	bhi.n	811123e <_printf_i+0x7e>
 811122c:	296f      	cmp	r1, #111	; 0x6f
 811122e:	d020      	beq.n	8111272 <_printf_i+0xb2>
 8111230:	2970      	cmp	r1, #112	; 0x70
 8111232:	d1dd      	bne.n	81111f0 <_printf_i+0x30>
 8111234:	6823      	ldr	r3, [r4, #0]
 8111236:	f043 0320 	orr.w	r3, r3, #32
 811123a:	6023      	str	r3, [r4, #0]
 811123c:	e003      	b.n	8111246 <_printf_i+0x86>
 811123e:	2975      	cmp	r1, #117	; 0x75
 8111240:	d017      	beq.n	8111272 <_printf_i+0xb2>
 8111242:	2978      	cmp	r1, #120	; 0x78
 8111244:	d1d4      	bne.n	81111f0 <_printf_i+0x30>
 8111246:	2378      	movs	r3, #120	; 0x78
 8111248:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 811124c:	4864      	ldr	r0, [pc, #400]	; (81113e0 <_printf_i+0x220>)
 811124e:	e055      	b.n	81112fc <_printf_i+0x13c>
 8111250:	6813      	ldr	r3, [r2, #0]
 8111252:	1d19      	adds	r1, r3, #4
 8111254:	681b      	ldr	r3, [r3, #0]
 8111256:	6011      	str	r1, [r2, #0]
 8111258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 811125c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8111260:	2301      	movs	r3, #1
 8111262:	e08c      	b.n	811137e <_printf_i+0x1be>
 8111264:	681b      	ldr	r3, [r3, #0]
 8111266:	6011      	str	r1, [r2, #0]
 8111268:	f010 0f40 	tst.w	r0, #64	; 0x40
 811126c:	bf18      	it	ne
 811126e:	b21b      	sxthne	r3, r3
 8111270:	e7cf      	b.n	8111212 <_printf_i+0x52>
 8111272:	6813      	ldr	r3, [r2, #0]
 8111274:	6825      	ldr	r5, [r4, #0]
 8111276:	1d18      	adds	r0, r3, #4
 8111278:	6010      	str	r0, [r2, #0]
 811127a:	0628      	lsls	r0, r5, #24
 811127c:	d501      	bpl.n	8111282 <_printf_i+0xc2>
 811127e:	681b      	ldr	r3, [r3, #0]
 8111280:	e002      	b.n	8111288 <_printf_i+0xc8>
 8111282:	0668      	lsls	r0, r5, #25
 8111284:	d5fb      	bpl.n	811127e <_printf_i+0xbe>
 8111286:	881b      	ldrh	r3, [r3, #0]
 8111288:	4854      	ldr	r0, [pc, #336]	; (81113dc <_printf_i+0x21c>)
 811128a:	296f      	cmp	r1, #111	; 0x6f
 811128c:	bf14      	ite	ne
 811128e:	220a      	movne	r2, #10
 8111290:	2208      	moveq	r2, #8
 8111292:	2100      	movs	r1, #0
 8111294:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8111298:	6865      	ldr	r5, [r4, #4]
 811129a:	60a5      	str	r5, [r4, #8]
 811129c:	2d00      	cmp	r5, #0
 811129e:	f2c0 8095 	blt.w	81113cc <_printf_i+0x20c>
 81112a2:	6821      	ldr	r1, [r4, #0]
 81112a4:	f021 0104 	bic.w	r1, r1, #4
 81112a8:	6021      	str	r1, [r4, #0]
 81112aa:	2b00      	cmp	r3, #0
 81112ac:	d13d      	bne.n	811132a <_printf_i+0x16a>
 81112ae:	2d00      	cmp	r5, #0
 81112b0:	f040 808e 	bne.w	81113d0 <_printf_i+0x210>
 81112b4:	4665      	mov	r5, ip
 81112b6:	2a08      	cmp	r2, #8
 81112b8:	d10b      	bne.n	81112d2 <_printf_i+0x112>
 81112ba:	6823      	ldr	r3, [r4, #0]
 81112bc:	07db      	lsls	r3, r3, #31
 81112be:	d508      	bpl.n	81112d2 <_printf_i+0x112>
 81112c0:	6923      	ldr	r3, [r4, #16]
 81112c2:	6862      	ldr	r2, [r4, #4]
 81112c4:	429a      	cmp	r2, r3
 81112c6:	bfde      	ittt	le
 81112c8:	2330      	movle	r3, #48	; 0x30
 81112ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 81112ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 81112d2:	ebac 0305 	sub.w	r3, ip, r5
 81112d6:	6123      	str	r3, [r4, #16]
 81112d8:	f8cd 8000 	str.w	r8, [sp]
 81112dc:	463b      	mov	r3, r7
 81112de:	aa03      	add	r2, sp, #12
 81112e0:	4621      	mov	r1, r4
 81112e2:	4630      	mov	r0, r6
 81112e4:	f7ff fef6 	bl	81110d4 <_printf_common>
 81112e8:	3001      	adds	r0, #1
 81112ea:	d14d      	bne.n	8111388 <_printf_i+0x1c8>
 81112ec:	f04f 30ff 	mov.w	r0, #4294967295
 81112f0:	b005      	add	sp, #20
 81112f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81112f6:	4839      	ldr	r0, [pc, #228]	; (81113dc <_printf_i+0x21c>)
 81112f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 81112fc:	6813      	ldr	r3, [r2, #0]
 81112fe:	6821      	ldr	r1, [r4, #0]
 8111300:	1d1d      	adds	r5, r3, #4
 8111302:	681b      	ldr	r3, [r3, #0]
 8111304:	6015      	str	r5, [r2, #0]
 8111306:	060a      	lsls	r2, r1, #24
 8111308:	d50b      	bpl.n	8111322 <_printf_i+0x162>
 811130a:	07ca      	lsls	r2, r1, #31
 811130c:	bf44      	itt	mi
 811130e:	f041 0120 	orrmi.w	r1, r1, #32
 8111312:	6021      	strmi	r1, [r4, #0]
 8111314:	b91b      	cbnz	r3, 811131e <_printf_i+0x15e>
 8111316:	6822      	ldr	r2, [r4, #0]
 8111318:	f022 0220 	bic.w	r2, r2, #32
 811131c:	6022      	str	r2, [r4, #0]
 811131e:	2210      	movs	r2, #16
 8111320:	e7b7      	b.n	8111292 <_printf_i+0xd2>
 8111322:	064d      	lsls	r5, r1, #25
 8111324:	bf48      	it	mi
 8111326:	b29b      	uxthmi	r3, r3
 8111328:	e7ef      	b.n	811130a <_printf_i+0x14a>
 811132a:	4665      	mov	r5, ip
 811132c:	fbb3 f1f2 	udiv	r1, r3, r2
 8111330:	fb02 3311 	mls	r3, r2, r1, r3
 8111334:	5cc3      	ldrb	r3, [r0, r3]
 8111336:	f805 3d01 	strb.w	r3, [r5, #-1]!
 811133a:	460b      	mov	r3, r1
 811133c:	2900      	cmp	r1, #0
 811133e:	d1f5      	bne.n	811132c <_printf_i+0x16c>
 8111340:	e7b9      	b.n	81112b6 <_printf_i+0xf6>
 8111342:	6813      	ldr	r3, [r2, #0]
 8111344:	6825      	ldr	r5, [r4, #0]
 8111346:	6961      	ldr	r1, [r4, #20]
 8111348:	1d18      	adds	r0, r3, #4
 811134a:	6010      	str	r0, [r2, #0]
 811134c:	0628      	lsls	r0, r5, #24
 811134e:	681b      	ldr	r3, [r3, #0]
 8111350:	d501      	bpl.n	8111356 <_printf_i+0x196>
 8111352:	6019      	str	r1, [r3, #0]
 8111354:	e002      	b.n	811135c <_printf_i+0x19c>
 8111356:	066a      	lsls	r2, r5, #25
 8111358:	d5fb      	bpl.n	8111352 <_printf_i+0x192>
 811135a:	8019      	strh	r1, [r3, #0]
 811135c:	2300      	movs	r3, #0
 811135e:	6123      	str	r3, [r4, #16]
 8111360:	4665      	mov	r5, ip
 8111362:	e7b9      	b.n	81112d8 <_printf_i+0x118>
 8111364:	6813      	ldr	r3, [r2, #0]
 8111366:	1d19      	adds	r1, r3, #4
 8111368:	6011      	str	r1, [r2, #0]
 811136a:	681d      	ldr	r5, [r3, #0]
 811136c:	6862      	ldr	r2, [r4, #4]
 811136e:	2100      	movs	r1, #0
 8111370:	4628      	mov	r0, r5
 8111372:	f7ee ffcd 	bl	8100310 <memchr>
 8111376:	b108      	cbz	r0, 811137c <_printf_i+0x1bc>
 8111378:	1b40      	subs	r0, r0, r5
 811137a:	6060      	str	r0, [r4, #4]
 811137c:	6863      	ldr	r3, [r4, #4]
 811137e:	6123      	str	r3, [r4, #16]
 8111380:	2300      	movs	r3, #0
 8111382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8111386:	e7a7      	b.n	81112d8 <_printf_i+0x118>
 8111388:	6923      	ldr	r3, [r4, #16]
 811138a:	462a      	mov	r2, r5
 811138c:	4639      	mov	r1, r7
 811138e:	4630      	mov	r0, r6
 8111390:	47c0      	blx	r8
 8111392:	3001      	adds	r0, #1
 8111394:	d0aa      	beq.n	81112ec <_printf_i+0x12c>
 8111396:	6823      	ldr	r3, [r4, #0]
 8111398:	079b      	lsls	r3, r3, #30
 811139a:	d413      	bmi.n	81113c4 <_printf_i+0x204>
 811139c:	68e0      	ldr	r0, [r4, #12]
 811139e:	9b03      	ldr	r3, [sp, #12]
 81113a0:	4298      	cmp	r0, r3
 81113a2:	bfb8      	it	lt
 81113a4:	4618      	movlt	r0, r3
 81113a6:	e7a3      	b.n	81112f0 <_printf_i+0x130>
 81113a8:	2301      	movs	r3, #1
 81113aa:	464a      	mov	r2, r9
 81113ac:	4639      	mov	r1, r7
 81113ae:	4630      	mov	r0, r6
 81113b0:	47c0      	blx	r8
 81113b2:	3001      	adds	r0, #1
 81113b4:	d09a      	beq.n	81112ec <_printf_i+0x12c>
 81113b6:	3501      	adds	r5, #1
 81113b8:	68e3      	ldr	r3, [r4, #12]
 81113ba:	9a03      	ldr	r2, [sp, #12]
 81113bc:	1a9b      	subs	r3, r3, r2
 81113be:	42ab      	cmp	r3, r5
 81113c0:	dcf2      	bgt.n	81113a8 <_printf_i+0x1e8>
 81113c2:	e7eb      	b.n	811139c <_printf_i+0x1dc>
 81113c4:	2500      	movs	r5, #0
 81113c6:	f104 0919 	add.w	r9, r4, #25
 81113ca:	e7f5      	b.n	81113b8 <_printf_i+0x1f8>
 81113cc:	2b00      	cmp	r3, #0
 81113ce:	d1ac      	bne.n	811132a <_printf_i+0x16a>
 81113d0:	7803      	ldrb	r3, [r0, #0]
 81113d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81113d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81113da:	e76c      	b.n	81112b6 <_printf_i+0xf6>
 81113dc:	081145f6 	.word	0x081145f6
 81113e0:	08114607 	.word	0x08114607

081113e4 <iprintf>:
 81113e4:	b40f      	push	{r0, r1, r2, r3}
 81113e6:	4b0a      	ldr	r3, [pc, #40]	; (8111410 <iprintf+0x2c>)
 81113e8:	b513      	push	{r0, r1, r4, lr}
 81113ea:	681c      	ldr	r4, [r3, #0]
 81113ec:	b124      	cbz	r4, 81113f8 <iprintf+0x14>
 81113ee:	69a3      	ldr	r3, [r4, #24]
 81113f0:	b913      	cbnz	r3, 81113f8 <iprintf+0x14>
 81113f2:	4620      	mov	r0, r4
 81113f4:	f001 f9e0 	bl	81127b8 <__sinit>
 81113f8:	ab05      	add	r3, sp, #20
 81113fa:	9a04      	ldr	r2, [sp, #16]
 81113fc:	68a1      	ldr	r1, [r4, #8]
 81113fe:	9301      	str	r3, [sp, #4]
 8111400:	4620      	mov	r0, r4
 8111402:	f002 f801 	bl	8113408 <_vfiprintf_r>
 8111406:	b002      	add	sp, #8
 8111408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811140c:	b004      	add	sp, #16
 811140e:	4770      	bx	lr
 8111410:	10000040 	.word	0x10000040

08111414 <_puts_r>:
 8111414:	b570      	push	{r4, r5, r6, lr}
 8111416:	460e      	mov	r6, r1
 8111418:	4605      	mov	r5, r0
 811141a:	b118      	cbz	r0, 8111424 <_puts_r+0x10>
 811141c:	6983      	ldr	r3, [r0, #24]
 811141e:	b90b      	cbnz	r3, 8111424 <_puts_r+0x10>
 8111420:	f001 f9ca 	bl	81127b8 <__sinit>
 8111424:	69ab      	ldr	r3, [r5, #24]
 8111426:	68ac      	ldr	r4, [r5, #8]
 8111428:	b913      	cbnz	r3, 8111430 <_puts_r+0x1c>
 811142a:	4628      	mov	r0, r5
 811142c:	f001 f9c4 	bl	81127b8 <__sinit>
 8111430:	4b23      	ldr	r3, [pc, #140]	; (81114c0 <_puts_r+0xac>)
 8111432:	429c      	cmp	r4, r3
 8111434:	d117      	bne.n	8111466 <_puts_r+0x52>
 8111436:	686c      	ldr	r4, [r5, #4]
 8111438:	89a3      	ldrh	r3, [r4, #12]
 811143a:	071b      	lsls	r3, r3, #28
 811143c:	d51d      	bpl.n	811147a <_puts_r+0x66>
 811143e:	6923      	ldr	r3, [r4, #16]
 8111440:	b1db      	cbz	r3, 811147a <_puts_r+0x66>
 8111442:	3e01      	subs	r6, #1
 8111444:	68a3      	ldr	r3, [r4, #8]
 8111446:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 811144a:	3b01      	subs	r3, #1
 811144c:	60a3      	str	r3, [r4, #8]
 811144e:	b9e9      	cbnz	r1, 811148c <_puts_r+0x78>
 8111450:	2b00      	cmp	r3, #0
 8111452:	da2e      	bge.n	81114b2 <_puts_r+0x9e>
 8111454:	4622      	mov	r2, r4
 8111456:	210a      	movs	r1, #10
 8111458:	4628      	mov	r0, r5
 811145a:	f000 f955 	bl	8111708 <__swbuf_r>
 811145e:	3001      	adds	r0, #1
 8111460:	d011      	beq.n	8111486 <_puts_r+0x72>
 8111462:	200a      	movs	r0, #10
 8111464:	e011      	b.n	811148a <_puts_r+0x76>
 8111466:	4b17      	ldr	r3, [pc, #92]	; (81114c4 <_puts_r+0xb0>)
 8111468:	429c      	cmp	r4, r3
 811146a:	d101      	bne.n	8111470 <_puts_r+0x5c>
 811146c:	68ac      	ldr	r4, [r5, #8]
 811146e:	e7e3      	b.n	8111438 <_puts_r+0x24>
 8111470:	4b15      	ldr	r3, [pc, #84]	; (81114c8 <_puts_r+0xb4>)
 8111472:	429c      	cmp	r4, r3
 8111474:	bf08      	it	eq
 8111476:	68ec      	ldreq	r4, [r5, #12]
 8111478:	e7de      	b.n	8111438 <_puts_r+0x24>
 811147a:	4621      	mov	r1, r4
 811147c:	4628      	mov	r0, r5
 811147e:	f000 f995 	bl	81117ac <__swsetup_r>
 8111482:	2800      	cmp	r0, #0
 8111484:	d0dd      	beq.n	8111442 <_puts_r+0x2e>
 8111486:	f04f 30ff 	mov.w	r0, #4294967295
 811148a:	bd70      	pop	{r4, r5, r6, pc}
 811148c:	2b00      	cmp	r3, #0
 811148e:	da04      	bge.n	811149a <_puts_r+0x86>
 8111490:	69a2      	ldr	r2, [r4, #24]
 8111492:	429a      	cmp	r2, r3
 8111494:	dc06      	bgt.n	81114a4 <_puts_r+0x90>
 8111496:	290a      	cmp	r1, #10
 8111498:	d004      	beq.n	81114a4 <_puts_r+0x90>
 811149a:	6823      	ldr	r3, [r4, #0]
 811149c:	1c5a      	adds	r2, r3, #1
 811149e:	6022      	str	r2, [r4, #0]
 81114a0:	7019      	strb	r1, [r3, #0]
 81114a2:	e7cf      	b.n	8111444 <_puts_r+0x30>
 81114a4:	4622      	mov	r2, r4
 81114a6:	4628      	mov	r0, r5
 81114a8:	f000 f92e 	bl	8111708 <__swbuf_r>
 81114ac:	3001      	adds	r0, #1
 81114ae:	d1c9      	bne.n	8111444 <_puts_r+0x30>
 81114b0:	e7e9      	b.n	8111486 <_puts_r+0x72>
 81114b2:	6823      	ldr	r3, [r4, #0]
 81114b4:	200a      	movs	r0, #10
 81114b6:	1c5a      	adds	r2, r3, #1
 81114b8:	6022      	str	r2, [r4, #0]
 81114ba:	7018      	strb	r0, [r3, #0]
 81114bc:	e7e5      	b.n	811148a <_puts_r+0x76>
 81114be:	bf00      	nop
 81114c0:	08114648 	.word	0x08114648
 81114c4:	08114668 	.word	0x08114668
 81114c8:	08114628 	.word	0x08114628

081114cc <puts>:
 81114cc:	4b02      	ldr	r3, [pc, #8]	; (81114d8 <puts+0xc>)
 81114ce:	4601      	mov	r1, r0
 81114d0:	6818      	ldr	r0, [r3, #0]
 81114d2:	f7ff bf9f 	b.w	8111414 <_puts_r>
 81114d6:	bf00      	nop
 81114d8:	10000040 	.word	0x10000040

081114dc <_raise_r>:
 81114dc:	291f      	cmp	r1, #31
 81114de:	b538      	push	{r3, r4, r5, lr}
 81114e0:	4604      	mov	r4, r0
 81114e2:	460d      	mov	r5, r1
 81114e4:	d904      	bls.n	81114f0 <_raise_r+0x14>
 81114e6:	2316      	movs	r3, #22
 81114e8:	6003      	str	r3, [r0, #0]
 81114ea:	f04f 30ff 	mov.w	r0, #4294967295
 81114ee:	bd38      	pop	{r3, r4, r5, pc}
 81114f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 81114f2:	b112      	cbz	r2, 81114fa <_raise_r+0x1e>
 81114f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 81114f8:	b94b      	cbnz	r3, 811150e <_raise_r+0x32>
 81114fa:	4620      	mov	r0, r4
 81114fc:	f000 f830 	bl	8111560 <_getpid_r>
 8111500:	462a      	mov	r2, r5
 8111502:	4601      	mov	r1, r0
 8111504:	4620      	mov	r0, r4
 8111506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811150a:	f000 b817 	b.w	811153c <_kill_r>
 811150e:	2b01      	cmp	r3, #1
 8111510:	d00a      	beq.n	8111528 <_raise_r+0x4c>
 8111512:	1c59      	adds	r1, r3, #1
 8111514:	d103      	bne.n	811151e <_raise_r+0x42>
 8111516:	2316      	movs	r3, #22
 8111518:	6003      	str	r3, [r0, #0]
 811151a:	2001      	movs	r0, #1
 811151c:	e7e7      	b.n	81114ee <_raise_r+0x12>
 811151e:	2400      	movs	r4, #0
 8111520:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8111524:	4628      	mov	r0, r5
 8111526:	4798      	blx	r3
 8111528:	2000      	movs	r0, #0
 811152a:	e7e0      	b.n	81114ee <_raise_r+0x12>

0811152c <raise>:
 811152c:	4b02      	ldr	r3, [pc, #8]	; (8111538 <raise+0xc>)
 811152e:	4601      	mov	r1, r0
 8111530:	6818      	ldr	r0, [r3, #0]
 8111532:	f7ff bfd3 	b.w	81114dc <_raise_r>
 8111536:	bf00      	nop
 8111538:	10000040 	.word	0x10000040

0811153c <_kill_r>:
 811153c:	b538      	push	{r3, r4, r5, lr}
 811153e:	4c07      	ldr	r4, [pc, #28]	; (811155c <_kill_r+0x20>)
 8111540:	2300      	movs	r3, #0
 8111542:	4605      	mov	r5, r0
 8111544:	4608      	mov	r0, r1
 8111546:	4611      	mov	r1, r2
 8111548:	6023      	str	r3, [r4, #0]
 811154a:	f7f0 fc4f 	bl	8101dec <_kill>
 811154e:	1c43      	adds	r3, r0, #1
 8111550:	d102      	bne.n	8111558 <_kill_r+0x1c>
 8111552:	6823      	ldr	r3, [r4, #0]
 8111554:	b103      	cbz	r3, 8111558 <_kill_r+0x1c>
 8111556:	602b      	str	r3, [r5, #0]
 8111558:	bd38      	pop	{r3, r4, r5, pc}
 811155a:	bf00      	nop
 811155c:	1000a36c 	.word	0x1000a36c

08111560 <_getpid_r>:
 8111560:	f7f0 bc3c 	b.w	8101ddc <_getpid>

08111564 <siprintf>:
 8111564:	b40e      	push	{r1, r2, r3}
 8111566:	b500      	push	{lr}
 8111568:	b09c      	sub	sp, #112	; 0x70
 811156a:	ab1d      	add	r3, sp, #116	; 0x74
 811156c:	9002      	str	r0, [sp, #8]
 811156e:	9006      	str	r0, [sp, #24]
 8111570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8111574:	4809      	ldr	r0, [pc, #36]	; (811159c <siprintf+0x38>)
 8111576:	9107      	str	r1, [sp, #28]
 8111578:	9104      	str	r1, [sp, #16]
 811157a:	4909      	ldr	r1, [pc, #36]	; (81115a0 <siprintf+0x3c>)
 811157c:	f853 2b04 	ldr.w	r2, [r3], #4
 8111580:	9105      	str	r1, [sp, #20]
 8111582:	6800      	ldr	r0, [r0, #0]
 8111584:	9301      	str	r3, [sp, #4]
 8111586:	a902      	add	r1, sp, #8
 8111588:	f001 fe1c 	bl	81131c4 <_svfiprintf_r>
 811158c:	9b02      	ldr	r3, [sp, #8]
 811158e:	2200      	movs	r2, #0
 8111590:	701a      	strb	r2, [r3, #0]
 8111592:	b01c      	add	sp, #112	; 0x70
 8111594:	f85d eb04 	ldr.w	lr, [sp], #4
 8111598:	b003      	add	sp, #12
 811159a:	4770      	bx	lr
 811159c:	10000040 	.word	0x10000040
 81115a0:	ffff0208 	.word	0xffff0208

081115a4 <_strtol_l.isra.0>:
 81115a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81115a8:	4680      	mov	r8, r0
 81115aa:	4689      	mov	r9, r1
 81115ac:	4692      	mov	sl, r2
 81115ae:	461e      	mov	r6, r3
 81115b0:	460f      	mov	r7, r1
 81115b2:	463d      	mov	r5, r7
 81115b4:	9808      	ldr	r0, [sp, #32]
 81115b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 81115ba:	f001 f987 	bl	81128cc <__locale_ctype_ptr_l>
 81115be:	4420      	add	r0, r4
 81115c0:	7843      	ldrb	r3, [r0, #1]
 81115c2:	f013 0308 	ands.w	r3, r3, #8
 81115c6:	d132      	bne.n	811162e <_strtol_l.isra.0+0x8a>
 81115c8:	2c2d      	cmp	r4, #45	; 0x2d
 81115ca:	d132      	bne.n	8111632 <_strtol_l.isra.0+0x8e>
 81115cc:	787c      	ldrb	r4, [r7, #1]
 81115ce:	1cbd      	adds	r5, r7, #2
 81115d0:	2201      	movs	r2, #1
 81115d2:	2e00      	cmp	r6, #0
 81115d4:	d05d      	beq.n	8111692 <_strtol_l.isra.0+0xee>
 81115d6:	2e10      	cmp	r6, #16
 81115d8:	d109      	bne.n	81115ee <_strtol_l.isra.0+0x4a>
 81115da:	2c30      	cmp	r4, #48	; 0x30
 81115dc:	d107      	bne.n	81115ee <_strtol_l.isra.0+0x4a>
 81115de:	782b      	ldrb	r3, [r5, #0]
 81115e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 81115e4:	2b58      	cmp	r3, #88	; 0x58
 81115e6:	d14f      	bne.n	8111688 <_strtol_l.isra.0+0xe4>
 81115e8:	786c      	ldrb	r4, [r5, #1]
 81115ea:	2610      	movs	r6, #16
 81115ec:	3502      	adds	r5, #2
 81115ee:	2a00      	cmp	r2, #0
 81115f0:	bf14      	ite	ne
 81115f2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 81115f6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 81115fa:	2700      	movs	r7, #0
 81115fc:	fbb1 fcf6 	udiv	ip, r1, r6
 8111600:	4638      	mov	r0, r7
 8111602:	fb06 1e1c 	mls	lr, r6, ip, r1
 8111606:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 811160a:	2b09      	cmp	r3, #9
 811160c:	d817      	bhi.n	811163e <_strtol_l.isra.0+0x9a>
 811160e:	461c      	mov	r4, r3
 8111610:	42a6      	cmp	r6, r4
 8111612:	dd23      	ble.n	811165c <_strtol_l.isra.0+0xb8>
 8111614:	1c7b      	adds	r3, r7, #1
 8111616:	d007      	beq.n	8111628 <_strtol_l.isra.0+0x84>
 8111618:	4584      	cmp	ip, r0
 811161a:	d31c      	bcc.n	8111656 <_strtol_l.isra.0+0xb2>
 811161c:	d101      	bne.n	8111622 <_strtol_l.isra.0+0x7e>
 811161e:	45a6      	cmp	lr, r4
 8111620:	db19      	blt.n	8111656 <_strtol_l.isra.0+0xb2>
 8111622:	fb00 4006 	mla	r0, r0, r6, r4
 8111626:	2701      	movs	r7, #1
 8111628:	f815 4b01 	ldrb.w	r4, [r5], #1
 811162c:	e7eb      	b.n	8111606 <_strtol_l.isra.0+0x62>
 811162e:	462f      	mov	r7, r5
 8111630:	e7bf      	b.n	81115b2 <_strtol_l.isra.0+0xe>
 8111632:	2c2b      	cmp	r4, #43	; 0x2b
 8111634:	bf04      	itt	eq
 8111636:	1cbd      	addeq	r5, r7, #2
 8111638:	787c      	ldrbeq	r4, [r7, #1]
 811163a:	461a      	mov	r2, r3
 811163c:	e7c9      	b.n	81115d2 <_strtol_l.isra.0+0x2e>
 811163e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8111642:	2b19      	cmp	r3, #25
 8111644:	d801      	bhi.n	811164a <_strtol_l.isra.0+0xa6>
 8111646:	3c37      	subs	r4, #55	; 0x37
 8111648:	e7e2      	b.n	8111610 <_strtol_l.isra.0+0x6c>
 811164a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 811164e:	2b19      	cmp	r3, #25
 8111650:	d804      	bhi.n	811165c <_strtol_l.isra.0+0xb8>
 8111652:	3c57      	subs	r4, #87	; 0x57
 8111654:	e7dc      	b.n	8111610 <_strtol_l.isra.0+0x6c>
 8111656:	f04f 37ff 	mov.w	r7, #4294967295
 811165a:	e7e5      	b.n	8111628 <_strtol_l.isra.0+0x84>
 811165c:	1c7b      	adds	r3, r7, #1
 811165e:	d108      	bne.n	8111672 <_strtol_l.isra.0+0xce>
 8111660:	2322      	movs	r3, #34	; 0x22
 8111662:	f8c8 3000 	str.w	r3, [r8]
 8111666:	4608      	mov	r0, r1
 8111668:	f1ba 0f00 	cmp.w	sl, #0
 811166c:	d107      	bne.n	811167e <_strtol_l.isra.0+0xda>
 811166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111672:	b102      	cbz	r2, 8111676 <_strtol_l.isra.0+0xd2>
 8111674:	4240      	negs	r0, r0
 8111676:	f1ba 0f00 	cmp.w	sl, #0
 811167a:	d0f8      	beq.n	811166e <_strtol_l.isra.0+0xca>
 811167c:	b10f      	cbz	r7, 8111682 <_strtol_l.isra.0+0xde>
 811167e:	f105 39ff 	add.w	r9, r5, #4294967295
 8111682:	f8ca 9000 	str.w	r9, [sl]
 8111686:	e7f2      	b.n	811166e <_strtol_l.isra.0+0xca>
 8111688:	2430      	movs	r4, #48	; 0x30
 811168a:	2e00      	cmp	r6, #0
 811168c:	d1af      	bne.n	81115ee <_strtol_l.isra.0+0x4a>
 811168e:	2608      	movs	r6, #8
 8111690:	e7ad      	b.n	81115ee <_strtol_l.isra.0+0x4a>
 8111692:	2c30      	cmp	r4, #48	; 0x30
 8111694:	d0a3      	beq.n	81115de <_strtol_l.isra.0+0x3a>
 8111696:	260a      	movs	r6, #10
 8111698:	e7a9      	b.n	81115ee <_strtol_l.isra.0+0x4a>
	...

0811169c <strtol>:
 811169c:	4b08      	ldr	r3, [pc, #32]	; (81116c0 <strtol+0x24>)
 811169e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81116a0:	681c      	ldr	r4, [r3, #0]
 81116a2:	4d08      	ldr	r5, [pc, #32]	; (81116c4 <strtol+0x28>)
 81116a4:	6a23      	ldr	r3, [r4, #32]
 81116a6:	2b00      	cmp	r3, #0
 81116a8:	bf08      	it	eq
 81116aa:	462b      	moveq	r3, r5
 81116ac:	9300      	str	r3, [sp, #0]
 81116ae:	4613      	mov	r3, r2
 81116b0:	460a      	mov	r2, r1
 81116b2:	4601      	mov	r1, r0
 81116b4:	4620      	mov	r0, r4
 81116b6:	f7ff ff75 	bl	81115a4 <_strtol_l.isra.0>
 81116ba:	b003      	add	sp, #12
 81116bc:	bd30      	pop	{r4, r5, pc}
 81116be:	bf00      	nop
 81116c0:	10000040 	.word	0x10000040
 81116c4:	100000a4 	.word	0x100000a4

081116c8 <_vsiprintf_r>:
 81116c8:	b500      	push	{lr}
 81116ca:	b09b      	sub	sp, #108	; 0x6c
 81116cc:	9100      	str	r1, [sp, #0]
 81116ce:	9104      	str	r1, [sp, #16]
 81116d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81116d4:	9105      	str	r1, [sp, #20]
 81116d6:	9102      	str	r1, [sp, #8]
 81116d8:	4905      	ldr	r1, [pc, #20]	; (81116f0 <_vsiprintf_r+0x28>)
 81116da:	9103      	str	r1, [sp, #12]
 81116dc:	4669      	mov	r1, sp
 81116de:	f001 fd71 	bl	81131c4 <_svfiprintf_r>
 81116e2:	9b00      	ldr	r3, [sp, #0]
 81116e4:	2200      	movs	r2, #0
 81116e6:	701a      	strb	r2, [r3, #0]
 81116e8:	b01b      	add	sp, #108	; 0x6c
 81116ea:	f85d fb04 	ldr.w	pc, [sp], #4
 81116ee:	bf00      	nop
 81116f0:	ffff0208 	.word	0xffff0208

081116f4 <vsiprintf>:
 81116f4:	4613      	mov	r3, r2
 81116f6:	460a      	mov	r2, r1
 81116f8:	4601      	mov	r1, r0
 81116fa:	4802      	ldr	r0, [pc, #8]	; (8111704 <vsiprintf+0x10>)
 81116fc:	6800      	ldr	r0, [r0, #0]
 81116fe:	f7ff bfe3 	b.w	81116c8 <_vsiprintf_r>
 8111702:	bf00      	nop
 8111704:	10000040 	.word	0x10000040

08111708 <__swbuf_r>:
 8111708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811170a:	460e      	mov	r6, r1
 811170c:	4614      	mov	r4, r2
 811170e:	4605      	mov	r5, r0
 8111710:	b118      	cbz	r0, 811171a <__swbuf_r+0x12>
 8111712:	6983      	ldr	r3, [r0, #24]
 8111714:	b90b      	cbnz	r3, 811171a <__swbuf_r+0x12>
 8111716:	f001 f84f 	bl	81127b8 <__sinit>
 811171a:	4b21      	ldr	r3, [pc, #132]	; (81117a0 <__swbuf_r+0x98>)
 811171c:	429c      	cmp	r4, r3
 811171e:	d12a      	bne.n	8111776 <__swbuf_r+0x6e>
 8111720:	686c      	ldr	r4, [r5, #4]
 8111722:	69a3      	ldr	r3, [r4, #24]
 8111724:	60a3      	str	r3, [r4, #8]
 8111726:	89a3      	ldrh	r3, [r4, #12]
 8111728:	071a      	lsls	r2, r3, #28
 811172a:	d52e      	bpl.n	811178a <__swbuf_r+0x82>
 811172c:	6923      	ldr	r3, [r4, #16]
 811172e:	b363      	cbz	r3, 811178a <__swbuf_r+0x82>
 8111730:	6923      	ldr	r3, [r4, #16]
 8111732:	6820      	ldr	r0, [r4, #0]
 8111734:	1ac0      	subs	r0, r0, r3
 8111736:	6963      	ldr	r3, [r4, #20]
 8111738:	b2f6      	uxtb	r6, r6
 811173a:	4283      	cmp	r3, r0
 811173c:	4637      	mov	r7, r6
 811173e:	dc04      	bgt.n	811174a <__swbuf_r+0x42>
 8111740:	4621      	mov	r1, r4
 8111742:	4628      	mov	r0, r5
 8111744:	f000 ffce 	bl	81126e4 <_fflush_r>
 8111748:	bb28      	cbnz	r0, 8111796 <__swbuf_r+0x8e>
 811174a:	68a3      	ldr	r3, [r4, #8]
 811174c:	3b01      	subs	r3, #1
 811174e:	60a3      	str	r3, [r4, #8]
 8111750:	6823      	ldr	r3, [r4, #0]
 8111752:	1c5a      	adds	r2, r3, #1
 8111754:	6022      	str	r2, [r4, #0]
 8111756:	701e      	strb	r6, [r3, #0]
 8111758:	6963      	ldr	r3, [r4, #20]
 811175a:	3001      	adds	r0, #1
 811175c:	4283      	cmp	r3, r0
 811175e:	d004      	beq.n	811176a <__swbuf_r+0x62>
 8111760:	89a3      	ldrh	r3, [r4, #12]
 8111762:	07db      	lsls	r3, r3, #31
 8111764:	d519      	bpl.n	811179a <__swbuf_r+0x92>
 8111766:	2e0a      	cmp	r6, #10
 8111768:	d117      	bne.n	811179a <__swbuf_r+0x92>
 811176a:	4621      	mov	r1, r4
 811176c:	4628      	mov	r0, r5
 811176e:	f000 ffb9 	bl	81126e4 <_fflush_r>
 8111772:	b190      	cbz	r0, 811179a <__swbuf_r+0x92>
 8111774:	e00f      	b.n	8111796 <__swbuf_r+0x8e>
 8111776:	4b0b      	ldr	r3, [pc, #44]	; (81117a4 <__swbuf_r+0x9c>)
 8111778:	429c      	cmp	r4, r3
 811177a:	d101      	bne.n	8111780 <__swbuf_r+0x78>
 811177c:	68ac      	ldr	r4, [r5, #8]
 811177e:	e7d0      	b.n	8111722 <__swbuf_r+0x1a>
 8111780:	4b09      	ldr	r3, [pc, #36]	; (81117a8 <__swbuf_r+0xa0>)
 8111782:	429c      	cmp	r4, r3
 8111784:	bf08      	it	eq
 8111786:	68ec      	ldreq	r4, [r5, #12]
 8111788:	e7cb      	b.n	8111722 <__swbuf_r+0x1a>
 811178a:	4621      	mov	r1, r4
 811178c:	4628      	mov	r0, r5
 811178e:	f000 f80d 	bl	81117ac <__swsetup_r>
 8111792:	2800      	cmp	r0, #0
 8111794:	d0cc      	beq.n	8111730 <__swbuf_r+0x28>
 8111796:	f04f 37ff 	mov.w	r7, #4294967295
 811179a:	4638      	mov	r0, r7
 811179c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811179e:	bf00      	nop
 81117a0:	08114648 	.word	0x08114648
 81117a4:	08114668 	.word	0x08114668
 81117a8:	08114628 	.word	0x08114628

081117ac <__swsetup_r>:
 81117ac:	4b32      	ldr	r3, [pc, #200]	; (8111878 <__swsetup_r+0xcc>)
 81117ae:	b570      	push	{r4, r5, r6, lr}
 81117b0:	681d      	ldr	r5, [r3, #0]
 81117b2:	4606      	mov	r6, r0
 81117b4:	460c      	mov	r4, r1
 81117b6:	b125      	cbz	r5, 81117c2 <__swsetup_r+0x16>
 81117b8:	69ab      	ldr	r3, [r5, #24]
 81117ba:	b913      	cbnz	r3, 81117c2 <__swsetup_r+0x16>
 81117bc:	4628      	mov	r0, r5
 81117be:	f000 fffb 	bl	81127b8 <__sinit>
 81117c2:	4b2e      	ldr	r3, [pc, #184]	; (811187c <__swsetup_r+0xd0>)
 81117c4:	429c      	cmp	r4, r3
 81117c6:	d10f      	bne.n	81117e8 <__swsetup_r+0x3c>
 81117c8:	686c      	ldr	r4, [r5, #4]
 81117ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81117ce:	b29a      	uxth	r2, r3
 81117d0:	0715      	lsls	r5, r2, #28
 81117d2:	d42c      	bmi.n	811182e <__swsetup_r+0x82>
 81117d4:	06d0      	lsls	r0, r2, #27
 81117d6:	d411      	bmi.n	81117fc <__swsetup_r+0x50>
 81117d8:	2209      	movs	r2, #9
 81117da:	6032      	str	r2, [r6, #0]
 81117dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81117e0:	81a3      	strh	r3, [r4, #12]
 81117e2:	f04f 30ff 	mov.w	r0, #4294967295
 81117e6:	e03e      	b.n	8111866 <__swsetup_r+0xba>
 81117e8:	4b25      	ldr	r3, [pc, #148]	; (8111880 <__swsetup_r+0xd4>)
 81117ea:	429c      	cmp	r4, r3
 81117ec:	d101      	bne.n	81117f2 <__swsetup_r+0x46>
 81117ee:	68ac      	ldr	r4, [r5, #8]
 81117f0:	e7eb      	b.n	81117ca <__swsetup_r+0x1e>
 81117f2:	4b24      	ldr	r3, [pc, #144]	; (8111884 <__swsetup_r+0xd8>)
 81117f4:	429c      	cmp	r4, r3
 81117f6:	bf08      	it	eq
 81117f8:	68ec      	ldreq	r4, [r5, #12]
 81117fa:	e7e6      	b.n	81117ca <__swsetup_r+0x1e>
 81117fc:	0751      	lsls	r1, r2, #29
 81117fe:	d512      	bpl.n	8111826 <__swsetup_r+0x7a>
 8111800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8111802:	b141      	cbz	r1, 8111816 <__swsetup_r+0x6a>
 8111804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8111808:	4299      	cmp	r1, r3
 811180a:	d002      	beq.n	8111812 <__swsetup_r+0x66>
 811180c:	4630      	mov	r0, r6
 811180e:	f001 fbd7 	bl	8112fc0 <_free_r>
 8111812:	2300      	movs	r3, #0
 8111814:	6363      	str	r3, [r4, #52]	; 0x34
 8111816:	89a3      	ldrh	r3, [r4, #12]
 8111818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 811181c:	81a3      	strh	r3, [r4, #12]
 811181e:	2300      	movs	r3, #0
 8111820:	6063      	str	r3, [r4, #4]
 8111822:	6923      	ldr	r3, [r4, #16]
 8111824:	6023      	str	r3, [r4, #0]
 8111826:	89a3      	ldrh	r3, [r4, #12]
 8111828:	f043 0308 	orr.w	r3, r3, #8
 811182c:	81a3      	strh	r3, [r4, #12]
 811182e:	6923      	ldr	r3, [r4, #16]
 8111830:	b94b      	cbnz	r3, 8111846 <__swsetup_r+0x9a>
 8111832:	89a3      	ldrh	r3, [r4, #12]
 8111834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8111838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 811183c:	d003      	beq.n	8111846 <__swsetup_r+0x9a>
 811183e:	4621      	mov	r1, r4
 8111840:	4630      	mov	r0, r6
 8111842:	f001 f879 	bl	8112938 <__smakebuf_r>
 8111846:	89a2      	ldrh	r2, [r4, #12]
 8111848:	f012 0301 	ands.w	r3, r2, #1
 811184c:	d00c      	beq.n	8111868 <__swsetup_r+0xbc>
 811184e:	2300      	movs	r3, #0
 8111850:	60a3      	str	r3, [r4, #8]
 8111852:	6963      	ldr	r3, [r4, #20]
 8111854:	425b      	negs	r3, r3
 8111856:	61a3      	str	r3, [r4, #24]
 8111858:	6923      	ldr	r3, [r4, #16]
 811185a:	b953      	cbnz	r3, 8111872 <__swsetup_r+0xc6>
 811185c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8111860:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8111864:	d1ba      	bne.n	81117dc <__swsetup_r+0x30>
 8111866:	bd70      	pop	{r4, r5, r6, pc}
 8111868:	0792      	lsls	r2, r2, #30
 811186a:	bf58      	it	pl
 811186c:	6963      	ldrpl	r3, [r4, #20]
 811186e:	60a3      	str	r3, [r4, #8]
 8111870:	e7f2      	b.n	8111858 <__swsetup_r+0xac>
 8111872:	2000      	movs	r0, #0
 8111874:	e7f7      	b.n	8111866 <__swsetup_r+0xba>
 8111876:	bf00      	nop
 8111878:	10000040 	.word	0x10000040
 811187c:	08114648 	.word	0x08114648
 8111880:	08114668 	.word	0x08114668
 8111884:	08114628 	.word	0x08114628

08111888 <__register_exitproc>:
 8111888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811188c:	4d2c      	ldr	r5, [pc, #176]	; (8111940 <__register_exitproc+0xb8>)
 811188e:	682c      	ldr	r4, [r5, #0]
 8111890:	4607      	mov	r7, r0
 8111892:	460e      	mov	r6, r1
 8111894:	4691      	mov	r9, r2
 8111896:	4698      	mov	r8, r3
 8111898:	b934      	cbnz	r4, 81118a8 <__register_exitproc+0x20>
 811189a:	4b2a      	ldr	r3, [pc, #168]	; (8111944 <__register_exitproc+0xbc>)
 811189c:	4c2a      	ldr	r4, [pc, #168]	; (8111948 <__register_exitproc+0xc0>)
 811189e:	602c      	str	r4, [r5, #0]
 81118a0:	b113      	cbz	r3, 81118a8 <__register_exitproc+0x20>
 81118a2:	681b      	ldr	r3, [r3, #0]
 81118a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 81118a8:	6863      	ldr	r3, [r4, #4]
 81118aa:	2b1f      	cmp	r3, #31
 81118ac:	dd3d      	ble.n	811192a <__register_exitproc+0xa2>
 81118ae:	4b27      	ldr	r3, [pc, #156]	; (811194c <__register_exitproc+0xc4>)
 81118b0:	b91b      	cbnz	r3, 81118ba <__register_exitproc+0x32>
 81118b2:	f04f 30ff 	mov.w	r0, #4294967295
 81118b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81118ba:	208c      	movs	r0, #140	; 0x8c
 81118bc:	f001 f87c 	bl	81129b8 <malloc>
 81118c0:	4604      	mov	r4, r0
 81118c2:	2800      	cmp	r0, #0
 81118c4:	d0f5      	beq.n	81118b2 <__register_exitproc+0x2a>
 81118c6:	2300      	movs	r3, #0
 81118c8:	682a      	ldr	r2, [r5, #0]
 81118ca:	6002      	str	r2, [r0, #0]
 81118cc:	6043      	str	r3, [r0, #4]
 81118ce:	6028      	str	r0, [r5, #0]
 81118d0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 81118d4:	b30f      	cbz	r7, 811191a <__register_exitproc+0x92>
 81118d6:	f44f 7084 	mov.w	r0, #264	; 0x108
 81118da:	f001 f86d 	bl	81129b8 <malloc>
 81118de:	2800      	cmp	r0, #0
 81118e0:	d0e7      	beq.n	81118b2 <__register_exitproc+0x2a>
 81118e2:	2300      	movs	r3, #0
 81118e4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 81118e8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 81118ec:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 81118f0:	6862      	ldr	r2, [r4, #4]
 81118f2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 81118f6:	2301      	movs	r3, #1
 81118f8:	4093      	lsls	r3, r2
 81118fa:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 81118fe:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8111902:	431a      	orrs	r2, r3
 8111904:	2f02      	cmp	r7, #2
 8111906:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 811190a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 811190e:	bf02      	ittt	eq
 8111910:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8111914:	4313      	orreq	r3, r2
 8111916:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 811191a:	6863      	ldr	r3, [r4, #4]
 811191c:	1c5a      	adds	r2, r3, #1
 811191e:	3302      	adds	r3, #2
 8111920:	6062      	str	r2, [r4, #4]
 8111922:	2000      	movs	r0, #0
 8111924:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8111928:	e7c5      	b.n	81118b6 <__register_exitproc+0x2e>
 811192a:	2f00      	cmp	r7, #0
 811192c:	d0f5      	beq.n	811191a <__register_exitproc+0x92>
 811192e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8111932:	2800      	cmp	r0, #0
 8111934:	d1dc      	bne.n	81118f0 <__register_exitproc+0x68>
 8111936:	4b05      	ldr	r3, [pc, #20]	; (811194c <__register_exitproc+0xc4>)
 8111938:	2b00      	cmp	r3, #0
 811193a:	d0ba      	beq.n	81118b2 <__register_exitproc+0x2a>
 811193c:	e7cb      	b.n	81118d6 <__register_exitproc+0x4e>
 811193e:	bf00      	nop
 8111940:	10009994 	.word	0x10009994
 8111944:	00000000 	.word	0x00000000
 8111948:	10009908 	.word	0x10009908
 811194c:	081129b9 	.word	0x081129b9

08111950 <quorem>:
 8111950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111954:	6903      	ldr	r3, [r0, #16]
 8111956:	690c      	ldr	r4, [r1, #16]
 8111958:	42a3      	cmp	r3, r4
 811195a:	4680      	mov	r8, r0
 811195c:	f2c0 8082 	blt.w	8111a64 <quorem+0x114>
 8111960:	3c01      	subs	r4, #1
 8111962:	f101 0714 	add.w	r7, r1, #20
 8111966:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 811196a:	f100 0614 	add.w	r6, r0, #20
 811196e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8111972:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8111976:	eb06 030c 	add.w	r3, r6, ip
 811197a:	3501      	adds	r5, #1
 811197c:	eb07 090c 	add.w	r9, r7, ip
 8111980:	9301      	str	r3, [sp, #4]
 8111982:	fbb0 f5f5 	udiv	r5, r0, r5
 8111986:	b395      	cbz	r5, 81119ee <quorem+0x9e>
 8111988:	f04f 0a00 	mov.w	sl, #0
 811198c:	4638      	mov	r0, r7
 811198e:	46b6      	mov	lr, r6
 8111990:	46d3      	mov	fp, sl
 8111992:	f850 2b04 	ldr.w	r2, [r0], #4
 8111996:	b293      	uxth	r3, r2
 8111998:	fb05 a303 	mla	r3, r5, r3, sl
 811199c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81119a0:	b29b      	uxth	r3, r3
 81119a2:	ebab 0303 	sub.w	r3, fp, r3
 81119a6:	0c12      	lsrs	r2, r2, #16
 81119a8:	f8de b000 	ldr.w	fp, [lr]
 81119ac:	fb05 a202 	mla	r2, r5, r2, sl
 81119b0:	fa13 f38b 	uxtah	r3, r3, fp
 81119b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 81119b8:	fa1f fb82 	uxth.w	fp, r2
 81119bc:	f8de 2000 	ldr.w	r2, [lr]
 81119c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 81119c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81119c8:	b29b      	uxth	r3, r3
 81119ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81119ce:	4581      	cmp	r9, r0
 81119d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 81119d4:	f84e 3b04 	str.w	r3, [lr], #4
 81119d8:	d2db      	bcs.n	8111992 <quorem+0x42>
 81119da:	f856 300c 	ldr.w	r3, [r6, ip]
 81119de:	b933      	cbnz	r3, 81119ee <quorem+0x9e>
 81119e0:	9b01      	ldr	r3, [sp, #4]
 81119e2:	3b04      	subs	r3, #4
 81119e4:	429e      	cmp	r6, r3
 81119e6:	461a      	mov	r2, r3
 81119e8:	d330      	bcc.n	8111a4c <quorem+0xfc>
 81119ea:	f8c8 4010 	str.w	r4, [r8, #16]
 81119ee:	4640      	mov	r0, r8
 81119f0:	f001 fa12 	bl	8112e18 <__mcmp>
 81119f4:	2800      	cmp	r0, #0
 81119f6:	db25      	blt.n	8111a44 <quorem+0xf4>
 81119f8:	3501      	adds	r5, #1
 81119fa:	4630      	mov	r0, r6
 81119fc:	f04f 0c00 	mov.w	ip, #0
 8111a00:	f857 2b04 	ldr.w	r2, [r7], #4
 8111a04:	f8d0 e000 	ldr.w	lr, [r0]
 8111a08:	b293      	uxth	r3, r2
 8111a0a:	ebac 0303 	sub.w	r3, ip, r3
 8111a0e:	0c12      	lsrs	r2, r2, #16
 8111a10:	fa13 f38e 	uxtah	r3, r3, lr
 8111a14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8111a18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8111a1c:	b29b      	uxth	r3, r3
 8111a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8111a22:	45b9      	cmp	r9, r7
 8111a24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8111a28:	f840 3b04 	str.w	r3, [r0], #4
 8111a2c:	d2e8      	bcs.n	8111a00 <quorem+0xb0>
 8111a2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8111a32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8111a36:	b92a      	cbnz	r2, 8111a44 <quorem+0xf4>
 8111a38:	3b04      	subs	r3, #4
 8111a3a:	429e      	cmp	r6, r3
 8111a3c:	461a      	mov	r2, r3
 8111a3e:	d30b      	bcc.n	8111a58 <quorem+0x108>
 8111a40:	f8c8 4010 	str.w	r4, [r8, #16]
 8111a44:	4628      	mov	r0, r5
 8111a46:	b003      	add	sp, #12
 8111a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111a4c:	6812      	ldr	r2, [r2, #0]
 8111a4e:	3b04      	subs	r3, #4
 8111a50:	2a00      	cmp	r2, #0
 8111a52:	d1ca      	bne.n	81119ea <quorem+0x9a>
 8111a54:	3c01      	subs	r4, #1
 8111a56:	e7c5      	b.n	81119e4 <quorem+0x94>
 8111a58:	6812      	ldr	r2, [r2, #0]
 8111a5a:	3b04      	subs	r3, #4
 8111a5c:	2a00      	cmp	r2, #0
 8111a5e:	d1ef      	bne.n	8111a40 <quorem+0xf0>
 8111a60:	3c01      	subs	r4, #1
 8111a62:	e7ea      	b.n	8111a3a <quorem+0xea>
 8111a64:	2000      	movs	r0, #0
 8111a66:	e7ee      	b.n	8111a46 <quorem+0xf6>

08111a68 <_dtoa_r>:
 8111a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111a6c:	ec57 6b10 	vmov	r6, r7, d0
 8111a70:	b097      	sub	sp, #92	; 0x5c
 8111a72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8111a74:	9106      	str	r1, [sp, #24]
 8111a76:	4604      	mov	r4, r0
 8111a78:	920b      	str	r2, [sp, #44]	; 0x2c
 8111a7a:	9312      	str	r3, [sp, #72]	; 0x48
 8111a7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8111a80:	e9cd 6700 	strd	r6, r7, [sp]
 8111a84:	b93d      	cbnz	r5, 8111a96 <_dtoa_r+0x2e>
 8111a86:	2010      	movs	r0, #16
 8111a88:	f000 ff96 	bl	81129b8 <malloc>
 8111a8c:	6260      	str	r0, [r4, #36]	; 0x24
 8111a8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8111a92:	6005      	str	r5, [r0, #0]
 8111a94:	60c5      	str	r5, [r0, #12]
 8111a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8111a98:	6819      	ldr	r1, [r3, #0]
 8111a9a:	b151      	cbz	r1, 8111ab2 <_dtoa_r+0x4a>
 8111a9c:	685a      	ldr	r2, [r3, #4]
 8111a9e:	604a      	str	r2, [r1, #4]
 8111aa0:	2301      	movs	r3, #1
 8111aa2:	4093      	lsls	r3, r2
 8111aa4:	608b      	str	r3, [r1, #8]
 8111aa6:	4620      	mov	r0, r4
 8111aa8:	f000 ffd4 	bl	8112a54 <_Bfree>
 8111aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8111aae:	2200      	movs	r2, #0
 8111ab0:	601a      	str	r2, [r3, #0]
 8111ab2:	1e3b      	subs	r3, r7, #0
 8111ab4:	bfbb      	ittet	lt
 8111ab6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8111aba:	9301      	strlt	r3, [sp, #4]
 8111abc:	2300      	movge	r3, #0
 8111abe:	2201      	movlt	r2, #1
 8111ac0:	bfac      	ite	ge
 8111ac2:	f8c8 3000 	strge.w	r3, [r8]
 8111ac6:	f8c8 2000 	strlt.w	r2, [r8]
 8111aca:	4baf      	ldr	r3, [pc, #700]	; (8111d88 <_dtoa_r+0x320>)
 8111acc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8111ad0:	ea33 0308 	bics.w	r3, r3, r8
 8111ad4:	d114      	bne.n	8111b00 <_dtoa_r+0x98>
 8111ad6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8111ad8:	f242 730f 	movw	r3, #9999	; 0x270f
 8111adc:	6013      	str	r3, [r2, #0]
 8111ade:	9b00      	ldr	r3, [sp, #0]
 8111ae0:	b923      	cbnz	r3, 8111aec <_dtoa_r+0x84>
 8111ae2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8111ae6:	2800      	cmp	r0, #0
 8111ae8:	f000 8542 	beq.w	8112570 <_dtoa_r+0xb08>
 8111aec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8111aee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8111d9c <_dtoa_r+0x334>
 8111af2:	2b00      	cmp	r3, #0
 8111af4:	f000 8544 	beq.w	8112580 <_dtoa_r+0xb18>
 8111af8:	f10b 0303 	add.w	r3, fp, #3
 8111afc:	f000 bd3e 	b.w	811257c <_dtoa_r+0xb14>
 8111b00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8111b04:	2200      	movs	r2, #0
 8111b06:	2300      	movs	r3, #0
 8111b08:	4630      	mov	r0, r6
 8111b0a:	4639      	mov	r1, r7
 8111b0c:	f7ef f874 	bl	8100bf8 <__aeabi_dcmpeq>
 8111b10:	4681      	mov	r9, r0
 8111b12:	b168      	cbz	r0, 8111b30 <_dtoa_r+0xc8>
 8111b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8111b16:	2301      	movs	r3, #1
 8111b18:	6013      	str	r3, [r2, #0]
 8111b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8111b1c:	2b00      	cmp	r3, #0
 8111b1e:	f000 8524 	beq.w	811256a <_dtoa_r+0xb02>
 8111b22:	4b9a      	ldr	r3, [pc, #616]	; (8111d8c <_dtoa_r+0x324>)
 8111b24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8111b26:	f103 3bff 	add.w	fp, r3, #4294967295
 8111b2a:	6013      	str	r3, [r2, #0]
 8111b2c:	f000 bd28 	b.w	8112580 <_dtoa_r+0xb18>
 8111b30:	aa14      	add	r2, sp, #80	; 0x50
 8111b32:	a915      	add	r1, sp, #84	; 0x54
 8111b34:	ec47 6b10 	vmov	d0, r6, r7
 8111b38:	4620      	mov	r0, r4
 8111b3a:	f001 f9e4 	bl	8112f06 <__d2b>
 8111b3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8111b42:	9004      	str	r0, [sp, #16]
 8111b44:	2d00      	cmp	r5, #0
 8111b46:	d07c      	beq.n	8111c42 <_dtoa_r+0x1da>
 8111b48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8111b4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8111b50:	46b2      	mov	sl, r6
 8111b52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8111b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8111b5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8111b5e:	2200      	movs	r2, #0
 8111b60:	4b8b      	ldr	r3, [pc, #556]	; (8111d90 <_dtoa_r+0x328>)
 8111b62:	4650      	mov	r0, sl
 8111b64:	4659      	mov	r1, fp
 8111b66:	f7ee fc27 	bl	81003b8 <__aeabi_dsub>
 8111b6a:	a381      	add	r3, pc, #516	; (adr r3, 8111d70 <_dtoa_r+0x308>)
 8111b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111b70:	f7ee fdda 	bl	8100728 <__aeabi_dmul>
 8111b74:	a380      	add	r3, pc, #512	; (adr r3, 8111d78 <_dtoa_r+0x310>)
 8111b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111b7a:	f7ee fc1f 	bl	81003bc <__adddf3>
 8111b7e:	4606      	mov	r6, r0
 8111b80:	4628      	mov	r0, r5
 8111b82:	460f      	mov	r7, r1
 8111b84:	f7ee fd66 	bl	8100654 <__aeabi_i2d>
 8111b88:	a37d      	add	r3, pc, #500	; (adr r3, 8111d80 <_dtoa_r+0x318>)
 8111b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111b8e:	f7ee fdcb 	bl	8100728 <__aeabi_dmul>
 8111b92:	4602      	mov	r2, r0
 8111b94:	460b      	mov	r3, r1
 8111b96:	4630      	mov	r0, r6
 8111b98:	4639      	mov	r1, r7
 8111b9a:	f7ee fc0f 	bl	81003bc <__adddf3>
 8111b9e:	4606      	mov	r6, r0
 8111ba0:	460f      	mov	r7, r1
 8111ba2:	f7ef f871 	bl	8100c88 <__aeabi_d2iz>
 8111ba6:	2200      	movs	r2, #0
 8111ba8:	4682      	mov	sl, r0
 8111baa:	2300      	movs	r3, #0
 8111bac:	4630      	mov	r0, r6
 8111bae:	4639      	mov	r1, r7
 8111bb0:	f7ef f82c 	bl	8100c0c <__aeabi_dcmplt>
 8111bb4:	b148      	cbz	r0, 8111bca <_dtoa_r+0x162>
 8111bb6:	4650      	mov	r0, sl
 8111bb8:	f7ee fd4c 	bl	8100654 <__aeabi_i2d>
 8111bbc:	4632      	mov	r2, r6
 8111bbe:	463b      	mov	r3, r7
 8111bc0:	f7ef f81a 	bl	8100bf8 <__aeabi_dcmpeq>
 8111bc4:	b908      	cbnz	r0, 8111bca <_dtoa_r+0x162>
 8111bc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8111bca:	f1ba 0f16 	cmp.w	sl, #22
 8111bce:	d859      	bhi.n	8111c84 <_dtoa_r+0x21c>
 8111bd0:	4970      	ldr	r1, [pc, #448]	; (8111d94 <_dtoa_r+0x32c>)
 8111bd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8111bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8111bda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8111bde:	f7ef f833 	bl	8100c48 <__aeabi_dcmpgt>
 8111be2:	2800      	cmp	r0, #0
 8111be4:	d050      	beq.n	8111c88 <_dtoa_r+0x220>
 8111be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8111bea:	2300      	movs	r3, #0
 8111bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8111bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8111bf0:	1b5d      	subs	r5, r3, r5
 8111bf2:	f1b5 0801 	subs.w	r8, r5, #1
 8111bf6:	bf49      	itett	mi
 8111bf8:	f1c5 0301 	rsbmi	r3, r5, #1
 8111bfc:	2300      	movpl	r3, #0
 8111bfe:	9305      	strmi	r3, [sp, #20]
 8111c00:	f04f 0800 	movmi.w	r8, #0
 8111c04:	bf58      	it	pl
 8111c06:	9305      	strpl	r3, [sp, #20]
 8111c08:	f1ba 0f00 	cmp.w	sl, #0
 8111c0c:	db3e      	blt.n	8111c8c <_dtoa_r+0x224>
 8111c0e:	2300      	movs	r3, #0
 8111c10:	44d0      	add	r8, sl
 8111c12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8111c16:	9307      	str	r3, [sp, #28]
 8111c18:	9b06      	ldr	r3, [sp, #24]
 8111c1a:	2b09      	cmp	r3, #9
 8111c1c:	f200 8090 	bhi.w	8111d40 <_dtoa_r+0x2d8>
 8111c20:	2b05      	cmp	r3, #5
 8111c22:	bfc4      	itt	gt
 8111c24:	3b04      	subgt	r3, #4
 8111c26:	9306      	strgt	r3, [sp, #24]
 8111c28:	9b06      	ldr	r3, [sp, #24]
 8111c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8111c2e:	bfcc      	ite	gt
 8111c30:	2500      	movgt	r5, #0
 8111c32:	2501      	movle	r5, #1
 8111c34:	2b03      	cmp	r3, #3
 8111c36:	f200 808f 	bhi.w	8111d58 <_dtoa_r+0x2f0>
 8111c3a:	e8df f003 	tbb	[pc, r3]
 8111c3e:	7f7d      	.short	0x7f7d
 8111c40:	7131      	.short	0x7131
 8111c42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8111c46:	441d      	add	r5, r3
 8111c48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8111c4c:	2820      	cmp	r0, #32
 8111c4e:	dd13      	ble.n	8111c78 <_dtoa_r+0x210>
 8111c50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8111c54:	9b00      	ldr	r3, [sp, #0]
 8111c56:	fa08 f800 	lsl.w	r8, r8, r0
 8111c5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8111c5e:	fa23 f000 	lsr.w	r0, r3, r0
 8111c62:	ea48 0000 	orr.w	r0, r8, r0
 8111c66:	f7ee fce5 	bl	8100634 <__aeabi_ui2d>
 8111c6a:	2301      	movs	r3, #1
 8111c6c:	4682      	mov	sl, r0
 8111c6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8111c72:	3d01      	subs	r5, #1
 8111c74:	9313      	str	r3, [sp, #76]	; 0x4c
 8111c76:	e772      	b.n	8111b5e <_dtoa_r+0xf6>
 8111c78:	9b00      	ldr	r3, [sp, #0]
 8111c7a:	f1c0 0020 	rsb	r0, r0, #32
 8111c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8111c82:	e7f0      	b.n	8111c66 <_dtoa_r+0x1fe>
 8111c84:	2301      	movs	r3, #1
 8111c86:	e7b1      	b.n	8111bec <_dtoa_r+0x184>
 8111c88:	900f      	str	r0, [sp, #60]	; 0x3c
 8111c8a:	e7b0      	b.n	8111bee <_dtoa_r+0x186>
 8111c8c:	9b05      	ldr	r3, [sp, #20]
 8111c8e:	eba3 030a 	sub.w	r3, r3, sl
 8111c92:	9305      	str	r3, [sp, #20]
 8111c94:	f1ca 0300 	rsb	r3, sl, #0
 8111c98:	9307      	str	r3, [sp, #28]
 8111c9a:	2300      	movs	r3, #0
 8111c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8111c9e:	e7bb      	b.n	8111c18 <_dtoa_r+0x1b0>
 8111ca0:	2301      	movs	r3, #1
 8111ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8111ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8111ca6:	2b00      	cmp	r3, #0
 8111ca8:	dd59      	ble.n	8111d5e <_dtoa_r+0x2f6>
 8111caa:	9302      	str	r3, [sp, #8]
 8111cac:	4699      	mov	r9, r3
 8111cae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8111cb0:	2200      	movs	r2, #0
 8111cb2:	6072      	str	r2, [r6, #4]
 8111cb4:	2204      	movs	r2, #4
 8111cb6:	f102 0014 	add.w	r0, r2, #20
 8111cba:	4298      	cmp	r0, r3
 8111cbc:	6871      	ldr	r1, [r6, #4]
 8111cbe:	d953      	bls.n	8111d68 <_dtoa_r+0x300>
 8111cc0:	4620      	mov	r0, r4
 8111cc2:	f000 fe93 	bl	81129ec <_Balloc>
 8111cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8111cc8:	6030      	str	r0, [r6, #0]
 8111cca:	f1b9 0f0e 	cmp.w	r9, #14
 8111cce:	f8d3 b000 	ldr.w	fp, [r3]
 8111cd2:	f200 80e6 	bhi.w	8111ea2 <_dtoa_r+0x43a>
 8111cd6:	2d00      	cmp	r5, #0
 8111cd8:	f000 80e3 	beq.w	8111ea2 <_dtoa_r+0x43a>
 8111cdc:	ed9d 7b00 	vldr	d7, [sp]
 8111ce0:	f1ba 0f00 	cmp.w	sl, #0
 8111ce4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8111ce8:	dd74      	ble.n	8111dd4 <_dtoa_r+0x36c>
 8111cea:	4a2a      	ldr	r2, [pc, #168]	; (8111d94 <_dtoa_r+0x32c>)
 8111cec:	f00a 030f 	and.w	r3, sl, #15
 8111cf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8111cf4:	ed93 7b00 	vldr	d7, [r3]
 8111cf8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8111cfc:	06f0      	lsls	r0, r6, #27
 8111cfe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8111d02:	d565      	bpl.n	8111dd0 <_dtoa_r+0x368>
 8111d04:	4b24      	ldr	r3, [pc, #144]	; (8111d98 <_dtoa_r+0x330>)
 8111d06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8111d0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8111d0e:	f7ee fe35 	bl	810097c <__aeabi_ddiv>
 8111d12:	e9cd 0100 	strd	r0, r1, [sp]
 8111d16:	f006 060f 	and.w	r6, r6, #15
 8111d1a:	2503      	movs	r5, #3
 8111d1c:	4f1e      	ldr	r7, [pc, #120]	; (8111d98 <_dtoa_r+0x330>)
 8111d1e:	e04c      	b.n	8111dba <_dtoa_r+0x352>
 8111d20:	2301      	movs	r3, #1
 8111d22:	930a      	str	r3, [sp, #40]	; 0x28
 8111d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8111d26:	4453      	add	r3, sl
 8111d28:	f103 0901 	add.w	r9, r3, #1
 8111d2c:	9302      	str	r3, [sp, #8]
 8111d2e:	464b      	mov	r3, r9
 8111d30:	2b01      	cmp	r3, #1
 8111d32:	bfb8      	it	lt
 8111d34:	2301      	movlt	r3, #1
 8111d36:	e7ba      	b.n	8111cae <_dtoa_r+0x246>
 8111d38:	2300      	movs	r3, #0
 8111d3a:	e7b2      	b.n	8111ca2 <_dtoa_r+0x23a>
 8111d3c:	2300      	movs	r3, #0
 8111d3e:	e7f0      	b.n	8111d22 <_dtoa_r+0x2ba>
 8111d40:	2501      	movs	r5, #1
 8111d42:	2300      	movs	r3, #0
 8111d44:	9306      	str	r3, [sp, #24]
 8111d46:	950a      	str	r5, [sp, #40]	; 0x28
 8111d48:	f04f 33ff 	mov.w	r3, #4294967295
 8111d4c:	9302      	str	r3, [sp, #8]
 8111d4e:	4699      	mov	r9, r3
 8111d50:	2200      	movs	r2, #0
 8111d52:	2312      	movs	r3, #18
 8111d54:	920b      	str	r2, [sp, #44]	; 0x2c
 8111d56:	e7aa      	b.n	8111cae <_dtoa_r+0x246>
 8111d58:	2301      	movs	r3, #1
 8111d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8111d5c:	e7f4      	b.n	8111d48 <_dtoa_r+0x2e0>
 8111d5e:	2301      	movs	r3, #1
 8111d60:	9302      	str	r3, [sp, #8]
 8111d62:	4699      	mov	r9, r3
 8111d64:	461a      	mov	r2, r3
 8111d66:	e7f5      	b.n	8111d54 <_dtoa_r+0x2ec>
 8111d68:	3101      	adds	r1, #1
 8111d6a:	6071      	str	r1, [r6, #4]
 8111d6c:	0052      	lsls	r2, r2, #1
 8111d6e:	e7a2      	b.n	8111cb6 <_dtoa_r+0x24e>
 8111d70:	636f4361 	.word	0x636f4361
 8111d74:	3fd287a7 	.word	0x3fd287a7
 8111d78:	8b60c8b3 	.word	0x8b60c8b3
 8111d7c:	3fc68a28 	.word	0x3fc68a28
 8111d80:	509f79fb 	.word	0x509f79fb
 8111d84:	3fd34413 	.word	0x3fd34413
 8111d88:	7ff00000 	.word	0x7ff00000
 8111d8c:	081145f5 	.word	0x081145f5
 8111d90:	3ff80000 	.word	0x3ff80000
 8111d94:	081146c0 	.word	0x081146c0
 8111d98:	08114698 	.word	0x08114698
 8111d9c:	08114621 	.word	0x08114621
 8111da0:	07f1      	lsls	r1, r6, #31
 8111da2:	d508      	bpl.n	8111db6 <_dtoa_r+0x34e>
 8111da4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8111da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8111dac:	f7ee fcbc 	bl	8100728 <__aeabi_dmul>
 8111db0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8111db4:	3501      	adds	r5, #1
 8111db6:	1076      	asrs	r6, r6, #1
 8111db8:	3708      	adds	r7, #8
 8111dba:	2e00      	cmp	r6, #0
 8111dbc:	d1f0      	bne.n	8111da0 <_dtoa_r+0x338>
 8111dbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8111dc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111dc6:	f7ee fdd9 	bl	810097c <__aeabi_ddiv>
 8111dca:	e9cd 0100 	strd	r0, r1, [sp]
 8111dce:	e01a      	b.n	8111e06 <_dtoa_r+0x39e>
 8111dd0:	2502      	movs	r5, #2
 8111dd2:	e7a3      	b.n	8111d1c <_dtoa_r+0x2b4>
 8111dd4:	f000 80a0 	beq.w	8111f18 <_dtoa_r+0x4b0>
 8111dd8:	f1ca 0600 	rsb	r6, sl, #0
 8111ddc:	4b9f      	ldr	r3, [pc, #636]	; (811205c <_dtoa_r+0x5f4>)
 8111dde:	4fa0      	ldr	r7, [pc, #640]	; (8112060 <_dtoa_r+0x5f8>)
 8111de0:	f006 020f 	and.w	r2, r6, #15
 8111de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8111de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111dec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8111df0:	f7ee fc9a 	bl	8100728 <__aeabi_dmul>
 8111df4:	e9cd 0100 	strd	r0, r1, [sp]
 8111df8:	1136      	asrs	r6, r6, #4
 8111dfa:	2300      	movs	r3, #0
 8111dfc:	2502      	movs	r5, #2
 8111dfe:	2e00      	cmp	r6, #0
 8111e00:	d17f      	bne.n	8111f02 <_dtoa_r+0x49a>
 8111e02:	2b00      	cmp	r3, #0
 8111e04:	d1e1      	bne.n	8111dca <_dtoa_r+0x362>
 8111e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8111e08:	2b00      	cmp	r3, #0
 8111e0a:	f000 8087 	beq.w	8111f1c <_dtoa_r+0x4b4>
 8111e0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8111e12:	2200      	movs	r2, #0
 8111e14:	4b93      	ldr	r3, [pc, #588]	; (8112064 <_dtoa_r+0x5fc>)
 8111e16:	4630      	mov	r0, r6
 8111e18:	4639      	mov	r1, r7
 8111e1a:	f7ee fef7 	bl	8100c0c <__aeabi_dcmplt>
 8111e1e:	2800      	cmp	r0, #0
 8111e20:	d07c      	beq.n	8111f1c <_dtoa_r+0x4b4>
 8111e22:	f1b9 0f00 	cmp.w	r9, #0
 8111e26:	d079      	beq.n	8111f1c <_dtoa_r+0x4b4>
 8111e28:	9b02      	ldr	r3, [sp, #8]
 8111e2a:	2b00      	cmp	r3, #0
 8111e2c:	dd35      	ble.n	8111e9a <_dtoa_r+0x432>
 8111e2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8111e32:	9308      	str	r3, [sp, #32]
 8111e34:	4639      	mov	r1, r7
 8111e36:	2200      	movs	r2, #0
 8111e38:	4b8b      	ldr	r3, [pc, #556]	; (8112068 <_dtoa_r+0x600>)
 8111e3a:	4630      	mov	r0, r6
 8111e3c:	f7ee fc74 	bl	8100728 <__aeabi_dmul>
 8111e40:	e9cd 0100 	strd	r0, r1, [sp]
 8111e44:	9f02      	ldr	r7, [sp, #8]
 8111e46:	3501      	adds	r5, #1
 8111e48:	4628      	mov	r0, r5
 8111e4a:	f7ee fc03 	bl	8100654 <__aeabi_i2d>
 8111e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8111e52:	f7ee fc69 	bl	8100728 <__aeabi_dmul>
 8111e56:	2200      	movs	r2, #0
 8111e58:	4b84      	ldr	r3, [pc, #528]	; (811206c <_dtoa_r+0x604>)
 8111e5a:	f7ee faaf 	bl	81003bc <__adddf3>
 8111e5e:	4605      	mov	r5, r0
 8111e60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8111e64:	2f00      	cmp	r7, #0
 8111e66:	d15d      	bne.n	8111f24 <_dtoa_r+0x4bc>
 8111e68:	2200      	movs	r2, #0
 8111e6a:	4b81      	ldr	r3, [pc, #516]	; (8112070 <_dtoa_r+0x608>)
 8111e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111e70:	f7ee faa2 	bl	81003b8 <__aeabi_dsub>
 8111e74:	462a      	mov	r2, r5
 8111e76:	4633      	mov	r3, r6
 8111e78:	e9cd 0100 	strd	r0, r1, [sp]
 8111e7c:	f7ee fee4 	bl	8100c48 <__aeabi_dcmpgt>
 8111e80:	2800      	cmp	r0, #0
 8111e82:	f040 8288 	bne.w	8112396 <_dtoa_r+0x92e>
 8111e86:	462a      	mov	r2, r5
 8111e88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8111e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111e90:	f7ee febc 	bl	8100c0c <__aeabi_dcmplt>
 8111e94:	2800      	cmp	r0, #0
 8111e96:	f040 827c 	bne.w	8112392 <_dtoa_r+0x92a>
 8111e9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8111e9e:	e9cd 2300 	strd	r2, r3, [sp]
 8111ea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8111ea4:	2b00      	cmp	r3, #0
 8111ea6:	f2c0 8150 	blt.w	811214a <_dtoa_r+0x6e2>
 8111eaa:	f1ba 0f0e 	cmp.w	sl, #14
 8111eae:	f300 814c 	bgt.w	811214a <_dtoa_r+0x6e2>
 8111eb2:	4b6a      	ldr	r3, [pc, #424]	; (811205c <_dtoa_r+0x5f4>)
 8111eb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8111eb8:	ed93 7b00 	vldr	d7, [r3]
 8111ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8111ebe:	2b00      	cmp	r3, #0
 8111ec0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8111ec4:	f280 80d8 	bge.w	8112078 <_dtoa_r+0x610>
 8111ec8:	f1b9 0f00 	cmp.w	r9, #0
 8111ecc:	f300 80d4 	bgt.w	8112078 <_dtoa_r+0x610>
 8111ed0:	f040 825e 	bne.w	8112390 <_dtoa_r+0x928>
 8111ed4:	2200      	movs	r2, #0
 8111ed6:	4b66      	ldr	r3, [pc, #408]	; (8112070 <_dtoa_r+0x608>)
 8111ed8:	ec51 0b17 	vmov	r0, r1, d7
 8111edc:	f7ee fc24 	bl	8100728 <__aeabi_dmul>
 8111ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8111ee4:	f7ee fea6 	bl	8100c34 <__aeabi_dcmpge>
 8111ee8:	464f      	mov	r7, r9
 8111eea:	464e      	mov	r6, r9
 8111eec:	2800      	cmp	r0, #0
 8111eee:	f040 8234 	bne.w	811235a <_dtoa_r+0x8f2>
 8111ef2:	2331      	movs	r3, #49	; 0x31
 8111ef4:	f10b 0501 	add.w	r5, fp, #1
 8111ef8:	f88b 3000 	strb.w	r3, [fp]
 8111efc:	f10a 0a01 	add.w	sl, sl, #1
 8111f00:	e22f      	b.n	8112362 <_dtoa_r+0x8fa>
 8111f02:	07f2      	lsls	r2, r6, #31
 8111f04:	d505      	bpl.n	8111f12 <_dtoa_r+0x4aa>
 8111f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8111f0a:	f7ee fc0d 	bl	8100728 <__aeabi_dmul>
 8111f0e:	3501      	adds	r5, #1
 8111f10:	2301      	movs	r3, #1
 8111f12:	1076      	asrs	r6, r6, #1
 8111f14:	3708      	adds	r7, #8
 8111f16:	e772      	b.n	8111dfe <_dtoa_r+0x396>
 8111f18:	2502      	movs	r5, #2
 8111f1a:	e774      	b.n	8111e06 <_dtoa_r+0x39e>
 8111f1c:	f8cd a020 	str.w	sl, [sp, #32]
 8111f20:	464f      	mov	r7, r9
 8111f22:	e791      	b.n	8111e48 <_dtoa_r+0x3e0>
 8111f24:	4b4d      	ldr	r3, [pc, #308]	; (811205c <_dtoa_r+0x5f4>)
 8111f26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8111f2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8111f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8111f30:	2b00      	cmp	r3, #0
 8111f32:	d047      	beq.n	8111fc4 <_dtoa_r+0x55c>
 8111f34:	4602      	mov	r2, r0
 8111f36:	460b      	mov	r3, r1
 8111f38:	2000      	movs	r0, #0
 8111f3a:	494e      	ldr	r1, [pc, #312]	; (8112074 <_dtoa_r+0x60c>)
 8111f3c:	f7ee fd1e 	bl	810097c <__aeabi_ddiv>
 8111f40:	462a      	mov	r2, r5
 8111f42:	4633      	mov	r3, r6
 8111f44:	f7ee fa38 	bl	81003b8 <__aeabi_dsub>
 8111f48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8111f4c:	465d      	mov	r5, fp
 8111f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111f52:	f7ee fe99 	bl	8100c88 <__aeabi_d2iz>
 8111f56:	4606      	mov	r6, r0
 8111f58:	f7ee fb7c 	bl	8100654 <__aeabi_i2d>
 8111f5c:	4602      	mov	r2, r0
 8111f5e:	460b      	mov	r3, r1
 8111f60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111f64:	f7ee fa28 	bl	81003b8 <__aeabi_dsub>
 8111f68:	3630      	adds	r6, #48	; 0x30
 8111f6a:	f805 6b01 	strb.w	r6, [r5], #1
 8111f6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8111f72:	e9cd 0100 	strd	r0, r1, [sp]
 8111f76:	f7ee fe49 	bl	8100c0c <__aeabi_dcmplt>
 8111f7a:	2800      	cmp	r0, #0
 8111f7c:	d163      	bne.n	8112046 <_dtoa_r+0x5de>
 8111f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8111f82:	2000      	movs	r0, #0
 8111f84:	4937      	ldr	r1, [pc, #220]	; (8112064 <_dtoa_r+0x5fc>)
 8111f86:	f7ee fa17 	bl	81003b8 <__aeabi_dsub>
 8111f8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8111f8e:	f7ee fe3d 	bl	8100c0c <__aeabi_dcmplt>
 8111f92:	2800      	cmp	r0, #0
 8111f94:	f040 80b7 	bne.w	8112106 <_dtoa_r+0x69e>
 8111f98:	eba5 030b 	sub.w	r3, r5, fp
 8111f9c:	429f      	cmp	r7, r3
 8111f9e:	f77f af7c 	ble.w	8111e9a <_dtoa_r+0x432>
 8111fa2:	2200      	movs	r2, #0
 8111fa4:	4b30      	ldr	r3, [pc, #192]	; (8112068 <_dtoa_r+0x600>)
 8111fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8111faa:	f7ee fbbd 	bl	8100728 <__aeabi_dmul>
 8111fae:	2200      	movs	r2, #0
 8111fb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8111fb4:	4b2c      	ldr	r3, [pc, #176]	; (8112068 <_dtoa_r+0x600>)
 8111fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111fba:	f7ee fbb5 	bl	8100728 <__aeabi_dmul>
 8111fbe:	e9cd 0100 	strd	r0, r1, [sp]
 8111fc2:	e7c4      	b.n	8111f4e <_dtoa_r+0x4e6>
 8111fc4:	462a      	mov	r2, r5
 8111fc6:	4633      	mov	r3, r6
 8111fc8:	f7ee fbae 	bl	8100728 <__aeabi_dmul>
 8111fcc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8111fd0:	eb0b 0507 	add.w	r5, fp, r7
 8111fd4:	465e      	mov	r6, fp
 8111fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111fda:	f7ee fe55 	bl	8100c88 <__aeabi_d2iz>
 8111fde:	4607      	mov	r7, r0
 8111fe0:	f7ee fb38 	bl	8100654 <__aeabi_i2d>
 8111fe4:	3730      	adds	r7, #48	; 0x30
 8111fe6:	4602      	mov	r2, r0
 8111fe8:	460b      	mov	r3, r1
 8111fea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111fee:	f7ee f9e3 	bl	81003b8 <__aeabi_dsub>
 8111ff2:	f806 7b01 	strb.w	r7, [r6], #1
 8111ff6:	42ae      	cmp	r6, r5
 8111ff8:	e9cd 0100 	strd	r0, r1, [sp]
 8111ffc:	f04f 0200 	mov.w	r2, #0
 8112000:	d126      	bne.n	8112050 <_dtoa_r+0x5e8>
 8112002:	4b1c      	ldr	r3, [pc, #112]	; (8112074 <_dtoa_r+0x60c>)
 8112004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8112008:	f7ee f9d8 	bl	81003bc <__adddf3>
 811200c:	4602      	mov	r2, r0
 811200e:	460b      	mov	r3, r1
 8112010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8112014:	f7ee fe18 	bl	8100c48 <__aeabi_dcmpgt>
 8112018:	2800      	cmp	r0, #0
 811201a:	d174      	bne.n	8112106 <_dtoa_r+0x69e>
 811201c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8112020:	2000      	movs	r0, #0
 8112022:	4914      	ldr	r1, [pc, #80]	; (8112074 <_dtoa_r+0x60c>)
 8112024:	f7ee f9c8 	bl	81003b8 <__aeabi_dsub>
 8112028:	4602      	mov	r2, r0
 811202a:	460b      	mov	r3, r1
 811202c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8112030:	f7ee fdec 	bl	8100c0c <__aeabi_dcmplt>
 8112034:	2800      	cmp	r0, #0
 8112036:	f43f af30 	beq.w	8111e9a <_dtoa_r+0x432>
 811203a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 811203e:	2b30      	cmp	r3, #48	; 0x30
 8112040:	f105 32ff 	add.w	r2, r5, #4294967295
 8112044:	d002      	beq.n	811204c <_dtoa_r+0x5e4>
 8112046:	f8dd a020 	ldr.w	sl, [sp, #32]
 811204a:	e04a      	b.n	81120e2 <_dtoa_r+0x67a>
 811204c:	4615      	mov	r5, r2
 811204e:	e7f4      	b.n	811203a <_dtoa_r+0x5d2>
 8112050:	4b05      	ldr	r3, [pc, #20]	; (8112068 <_dtoa_r+0x600>)
 8112052:	f7ee fb69 	bl	8100728 <__aeabi_dmul>
 8112056:	e9cd 0100 	strd	r0, r1, [sp]
 811205a:	e7bc      	b.n	8111fd6 <_dtoa_r+0x56e>
 811205c:	081146c0 	.word	0x081146c0
 8112060:	08114698 	.word	0x08114698
 8112064:	3ff00000 	.word	0x3ff00000
 8112068:	40240000 	.word	0x40240000
 811206c:	401c0000 	.word	0x401c0000
 8112070:	40140000 	.word	0x40140000
 8112074:	3fe00000 	.word	0x3fe00000
 8112078:	e9dd 6700 	ldrd	r6, r7, [sp]
 811207c:	465d      	mov	r5, fp
 811207e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112082:	4630      	mov	r0, r6
 8112084:	4639      	mov	r1, r7
 8112086:	f7ee fc79 	bl	810097c <__aeabi_ddiv>
 811208a:	f7ee fdfd 	bl	8100c88 <__aeabi_d2iz>
 811208e:	4680      	mov	r8, r0
 8112090:	f7ee fae0 	bl	8100654 <__aeabi_i2d>
 8112094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112098:	f7ee fb46 	bl	8100728 <__aeabi_dmul>
 811209c:	4602      	mov	r2, r0
 811209e:	460b      	mov	r3, r1
 81120a0:	4630      	mov	r0, r6
 81120a2:	4639      	mov	r1, r7
 81120a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 81120a8:	f7ee f986 	bl	81003b8 <__aeabi_dsub>
 81120ac:	f805 6b01 	strb.w	r6, [r5], #1
 81120b0:	eba5 060b 	sub.w	r6, r5, fp
 81120b4:	45b1      	cmp	r9, r6
 81120b6:	4602      	mov	r2, r0
 81120b8:	460b      	mov	r3, r1
 81120ba:	d139      	bne.n	8112130 <_dtoa_r+0x6c8>
 81120bc:	f7ee f97e 	bl	81003bc <__adddf3>
 81120c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81120c4:	4606      	mov	r6, r0
 81120c6:	460f      	mov	r7, r1
 81120c8:	f7ee fdbe 	bl	8100c48 <__aeabi_dcmpgt>
 81120cc:	b9c8      	cbnz	r0, 8112102 <_dtoa_r+0x69a>
 81120ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81120d2:	4630      	mov	r0, r6
 81120d4:	4639      	mov	r1, r7
 81120d6:	f7ee fd8f 	bl	8100bf8 <__aeabi_dcmpeq>
 81120da:	b110      	cbz	r0, 81120e2 <_dtoa_r+0x67a>
 81120dc:	f018 0f01 	tst.w	r8, #1
 81120e0:	d10f      	bne.n	8112102 <_dtoa_r+0x69a>
 81120e2:	9904      	ldr	r1, [sp, #16]
 81120e4:	4620      	mov	r0, r4
 81120e6:	f000 fcb5 	bl	8112a54 <_Bfree>
 81120ea:	2300      	movs	r3, #0
 81120ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81120ee:	702b      	strb	r3, [r5, #0]
 81120f0:	f10a 0301 	add.w	r3, sl, #1
 81120f4:	6013      	str	r3, [r2, #0]
 81120f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81120f8:	2b00      	cmp	r3, #0
 81120fa:	f000 8241 	beq.w	8112580 <_dtoa_r+0xb18>
 81120fe:	601d      	str	r5, [r3, #0]
 8112100:	e23e      	b.n	8112580 <_dtoa_r+0xb18>
 8112102:	f8cd a020 	str.w	sl, [sp, #32]
 8112106:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 811210a:	2a39      	cmp	r2, #57	; 0x39
 811210c:	f105 33ff 	add.w	r3, r5, #4294967295
 8112110:	d108      	bne.n	8112124 <_dtoa_r+0x6bc>
 8112112:	459b      	cmp	fp, r3
 8112114:	d10a      	bne.n	811212c <_dtoa_r+0x6c4>
 8112116:	9b08      	ldr	r3, [sp, #32]
 8112118:	3301      	adds	r3, #1
 811211a:	9308      	str	r3, [sp, #32]
 811211c:	2330      	movs	r3, #48	; 0x30
 811211e:	f88b 3000 	strb.w	r3, [fp]
 8112122:	465b      	mov	r3, fp
 8112124:	781a      	ldrb	r2, [r3, #0]
 8112126:	3201      	adds	r2, #1
 8112128:	701a      	strb	r2, [r3, #0]
 811212a:	e78c      	b.n	8112046 <_dtoa_r+0x5de>
 811212c:	461d      	mov	r5, r3
 811212e:	e7ea      	b.n	8112106 <_dtoa_r+0x69e>
 8112130:	2200      	movs	r2, #0
 8112132:	4b9b      	ldr	r3, [pc, #620]	; (81123a0 <_dtoa_r+0x938>)
 8112134:	f7ee faf8 	bl	8100728 <__aeabi_dmul>
 8112138:	2200      	movs	r2, #0
 811213a:	2300      	movs	r3, #0
 811213c:	4606      	mov	r6, r0
 811213e:	460f      	mov	r7, r1
 8112140:	f7ee fd5a 	bl	8100bf8 <__aeabi_dcmpeq>
 8112144:	2800      	cmp	r0, #0
 8112146:	d09a      	beq.n	811207e <_dtoa_r+0x616>
 8112148:	e7cb      	b.n	81120e2 <_dtoa_r+0x67a>
 811214a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 811214c:	2a00      	cmp	r2, #0
 811214e:	f000 808b 	beq.w	8112268 <_dtoa_r+0x800>
 8112152:	9a06      	ldr	r2, [sp, #24]
 8112154:	2a01      	cmp	r2, #1
 8112156:	dc6e      	bgt.n	8112236 <_dtoa_r+0x7ce>
 8112158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 811215a:	2a00      	cmp	r2, #0
 811215c:	d067      	beq.n	811222e <_dtoa_r+0x7c6>
 811215e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8112162:	9f07      	ldr	r7, [sp, #28]
 8112164:	9d05      	ldr	r5, [sp, #20]
 8112166:	9a05      	ldr	r2, [sp, #20]
 8112168:	2101      	movs	r1, #1
 811216a:	441a      	add	r2, r3
 811216c:	4620      	mov	r0, r4
 811216e:	9205      	str	r2, [sp, #20]
 8112170:	4498      	add	r8, r3
 8112172:	f000 fd0f 	bl	8112b94 <__i2b>
 8112176:	4606      	mov	r6, r0
 8112178:	2d00      	cmp	r5, #0
 811217a:	dd0c      	ble.n	8112196 <_dtoa_r+0x72e>
 811217c:	f1b8 0f00 	cmp.w	r8, #0
 8112180:	dd09      	ble.n	8112196 <_dtoa_r+0x72e>
 8112182:	4545      	cmp	r5, r8
 8112184:	9a05      	ldr	r2, [sp, #20]
 8112186:	462b      	mov	r3, r5
 8112188:	bfa8      	it	ge
 811218a:	4643      	movge	r3, r8
 811218c:	1ad2      	subs	r2, r2, r3
 811218e:	9205      	str	r2, [sp, #20]
 8112190:	1aed      	subs	r5, r5, r3
 8112192:	eba8 0803 	sub.w	r8, r8, r3
 8112196:	9b07      	ldr	r3, [sp, #28]
 8112198:	b1eb      	cbz	r3, 81121d6 <_dtoa_r+0x76e>
 811219a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811219c:	2b00      	cmp	r3, #0
 811219e:	d067      	beq.n	8112270 <_dtoa_r+0x808>
 81121a0:	b18f      	cbz	r7, 81121c6 <_dtoa_r+0x75e>
 81121a2:	4631      	mov	r1, r6
 81121a4:	463a      	mov	r2, r7
 81121a6:	4620      	mov	r0, r4
 81121a8:	f000 fd94 	bl	8112cd4 <__pow5mult>
 81121ac:	9a04      	ldr	r2, [sp, #16]
 81121ae:	4601      	mov	r1, r0
 81121b0:	4606      	mov	r6, r0
 81121b2:	4620      	mov	r0, r4
 81121b4:	f000 fcf7 	bl	8112ba6 <__multiply>
 81121b8:	9904      	ldr	r1, [sp, #16]
 81121ba:	9008      	str	r0, [sp, #32]
 81121bc:	4620      	mov	r0, r4
 81121be:	f000 fc49 	bl	8112a54 <_Bfree>
 81121c2:	9b08      	ldr	r3, [sp, #32]
 81121c4:	9304      	str	r3, [sp, #16]
 81121c6:	9b07      	ldr	r3, [sp, #28]
 81121c8:	1bda      	subs	r2, r3, r7
 81121ca:	d004      	beq.n	81121d6 <_dtoa_r+0x76e>
 81121cc:	9904      	ldr	r1, [sp, #16]
 81121ce:	4620      	mov	r0, r4
 81121d0:	f000 fd80 	bl	8112cd4 <__pow5mult>
 81121d4:	9004      	str	r0, [sp, #16]
 81121d6:	2101      	movs	r1, #1
 81121d8:	4620      	mov	r0, r4
 81121da:	f000 fcdb 	bl	8112b94 <__i2b>
 81121de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81121e0:	4607      	mov	r7, r0
 81121e2:	2b00      	cmp	r3, #0
 81121e4:	f000 81d0 	beq.w	8112588 <_dtoa_r+0xb20>
 81121e8:	461a      	mov	r2, r3
 81121ea:	4601      	mov	r1, r0
 81121ec:	4620      	mov	r0, r4
 81121ee:	f000 fd71 	bl	8112cd4 <__pow5mult>
 81121f2:	9b06      	ldr	r3, [sp, #24]
 81121f4:	2b01      	cmp	r3, #1
 81121f6:	4607      	mov	r7, r0
 81121f8:	dc40      	bgt.n	811227c <_dtoa_r+0x814>
 81121fa:	9b00      	ldr	r3, [sp, #0]
 81121fc:	2b00      	cmp	r3, #0
 81121fe:	d139      	bne.n	8112274 <_dtoa_r+0x80c>
 8112200:	9b01      	ldr	r3, [sp, #4]
 8112202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112206:	2b00      	cmp	r3, #0
 8112208:	d136      	bne.n	8112278 <_dtoa_r+0x810>
 811220a:	9b01      	ldr	r3, [sp, #4]
 811220c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8112210:	0d1b      	lsrs	r3, r3, #20
 8112212:	051b      	lsls	r3, r3, #20
 8112214:	b12b      	cbz	r3, 8112222 <_dtoa_r+0x7ba>
 8112216:	9b05      	ldr	r3, [sp, #20]
 8112218:	3301      	adds	r3, #1
 811221a:	9305      	str	r3, [sp, #20]
 811221c:	f108 0801 	add.w	r8, r8, #1
 8112220:	2301      	movs	r3, #1
 8112222:	9307      	str	r3, [sp, #28]
 8112224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8112226:	2b00      	cmp	r3, #0
 8112228:	d12a      	bne.n	8112280 <_dtoa_r+0x818>
 811222a:	2001      	movs	r0, #1
 811222c:	e030      	b.n	8112290 <_dtoa_r+0x828>
 811222e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8112230:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8112234:	e795      	b.n	8112162 <_dtoa_r+0x6fa>
 8112236:	9b07      	ldr	r3, [sp, #28]
 8112238:	f109 37ff 	add.w	r7, r9, #4294967295
 811223c:	42bb      	cmp	r3, r7
 811223e:	bfbf      	itttt	lt
 8112240:	9b07      	ldrlt	r3, [sp, #28]
 8112242:	9707      	strlt	r7, [sp, #28]
 8112244:	1afa      	sublt	r2, r7, r3
 8112246:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8112248:	bfbb      	ittet	lt
 811224a:	189b      	addlt	r3, r3, r2
 811224c:	930e      	strlt	r3, [sp, #56]	; 0x38
 811224e:	1bdf      	subge	r7, r3, r7
 8112250:	2700      	movlt	r7, #0
 8112252:	f1b9 0f00 	cmp.w	r9, #0
 8112256:	bfb5      	itete	lt
 8112258:	9b05      	ldrlt	r3, [sp, #20]
 811225a:	9d05      	ldrge	r5, [sp, #20]
 811225c:	eba3 0509 	sublt.w	r5, r3, r9
 8112260:	464b      	movge	r3, r9
 8112262:	bfb8      	it	lt
 8112264:	2300      	movlt	r3, #0
 8112266:	e77e      	b.n	8112166 <_dtoa_r+0x6fe>
 8112268:	9f07      	ldr	r7, [sp, #28]
 811226a:	9d05      	ldr	r5, [sp, #20]
 811226c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 811226e:	e783      	b.n	8112178 <_dtoa_r+0x710>
 8112270:	9a07      	ldr	r2, [sp, #28]
 8112272:	e7ab      	b.n	81121cc <_dtoa_r+0x764>
 8112274:	2300      	movs	r3, #0
 8112276:	e7d4      	b.n	8112222 <_dtoa_r+0x7ba>
 8112278:	9b00      	ldr	r3, [sp, #0]
 811227a:	e7d2      	b.n	8112222 <_dtoa_r+0x7ba>
 811227c:	2300      	movs	r3, #0
 811227e:	9307      	str	r3, [sp, #28]
 8112280:	693b      	ldr	r3, [r7, #16]
 8112282:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8112286:	6918      	ldr	r0, [r3, #16]
 8112288:	f000 fc36 	bl	8112af8 <__hi0bits>
 811228c:	f1c0 0020 	rsb	r0, r0, #32
 8112290:	4440      	add	r0, r8
 8112292:	f010 001f 	ands.w	r0, r0, #31
 8112296:	d047      	beq.n	8112328 <_dtoa_r+0x8c0>
 8112298:	f1c0 0320 	rsb	r3, r0, #32
 811229c:	2b04      	cmp	r3, #4
 811229e:	dd3b      	ble.n	8112318 <_dtoa_r+0x8b0>
 81122a0:	9b05      	ldr	r3, [sp, #20]
 81122a2:	f1c0 001c 	rsb	r0, r0, #28
 81122a6:	4403      	add	r3, r0
 81122a8:	9305      	str	r3, [sp, #20]
 81122aa:	4405      	add	r5, r0
 81122ac:	4480      	add	r8, r0
 81122ae:	9b05      	ldr	r3, [sp, #20]
 81122b0:	2b00      	cmp	r3, #0
 81122b2:	dd05      	ble.n	81122c0 <_dtoa_r+0x858>
 81122b4:	461a      	mov	r2, r3
 81122b6:	9904      	ldr	r1, [sp, #16]
 81122b8:	4620      	mov	r0, r4
 81122ba:	f000 fd59 	bl	8112d70 <__lshift>
 81122be:	9004      	str	r0, [sp, #16]
 81122c0:	f1b8 0f00 	cmp.w	r8, #0
 81122c4:	dd05      	ble.n	81122d2 <_dtoa_r+0x86a>
 81122c6:	4639      	mov	r1, r7
 81122c8:	4642      	mov	r2, r8
 81122ca:	4620      	mov	r0, r4
 81122cc:	f000 fd50 	bl	8112d70 <__lshift>
 81122d0:	4607      	mov	r7, r0
 81122d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81122d4:	b353      	cbz	r3, 811232c <_dtoa_r+0x8c4>
 81122d6:	4639      	mov	r1, r7
 81122d8:	9804      	ldr	r0, [sp, #16]
 81122da:	f000 fd9d 	bl	8112e18 <__mcmp>
 81122de:	2800      	cmp	r0, #0
 81122e0:	da24      	bge.n	811232c <_dtoa_r+0x8c4>
 81122e2:	2300      	movs	r3, #0
 81122e4:	220a      	movs	r2, #10
 81122e6:	9904      	ldr	r1, [sp, #16]
 81122e8:	4620      	mov	r0, r4
 81122ea:	f000 fbca 	bl	8112a82 <__multadd>
 81122ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81122f0:	9004      	str	r0, [sp, #16]
 81122f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81122f6:	2b00      	cmp	r3, #0
 81122f8:	f000 814d 	beq.w	8112596 <_dtoa_r+0xb2e>
 81122fc:	2300      	movs	r3, #0
 81122fe:	4631      	mov	r1, r6
 8112300:	220a      	movs	r2, #10
 8112302:	4620      	mov	r0, r4
 8112304:	f000 fbbd 	bl	8112a82 <__multadd>
 8112308:	9b02      	ldr	r3, [sp, #8]
 811230a:	2b00      	cmp	r3, #0
 811230c:	4606      	mov	r6, r0
 811230e:	dc4f      	bgt.n	81123b0 <_dtoa_r+0x948>
 8112310:	9b06      	ldr	r3, [sp, #24]
 8112312:	2b02      	cmp	r3, #2
 8112314:	dd4c      	ble.n	81123b0 <_dtoa_r+0x948>
 8112316:	e011      	b.n	811233c <_dtoa_r+0x8d4>
 8112318:	d0c9      	beq.n	81122ae <_dtoa_r+0x846>
 811231a:	9a05      	ldr	r2, [sp, #20]
 811231c:	331c      	adds	r3, #28
 811231e:	441a      	add	r2, r3
 8112320:	9205      	str	r2, [sp, #20]
 8112322:	441d      	add	r5, r3
 8112324:	4498      	add	r8, r3
 8112326:	e7c2      	b.n	81122ae <_dtoa_r+0x846>
 8112328:	4603      	mov	r3, r0
 811232a:	e7f6      	b.n	811231a <_dtoa_r+0x8b2>
 811232c:	f1b9 0f00 	cmp.w	r9, #0
 8112330:	dc38      	bgt.n	81123a4 <_dtoa_r+0x93c>
 8112332:	9b06      	ldr	r3, [sp, #24]
 8112334:	2b02      	cmp	r3, #2
 8112336:	dd35      	ble.n	81123a4 <_dtoa_r+0x93c>
 8112338:	f8cd 9008 	str.w	r9, [sp, #8]
 811233c:	9b02      	ldr	r3, [sp, #8]
 811233e:	b963      	cbnz	r3, 811235a <_dtoa_r+0x8f2>
 8112340:	4639      	mov	r1, r7
 8112342:	2205      	movs	r2, #5
 8112344:	4620      	mov	r0, r4
 8112346:	f000 fb9c 	bl	8112a82 <__multadd>
 811234a:	4601      	mov	r1, r0
 811234c:	4607      	mov	r7, r0
 811234e:	9804      	ldr	r0, [sp, #16]
 8112350:	f000 fd62 	bl	8112e18 <__mcmp>
 8112354:	2800      	cmp	r0, #0
 8112356:	f73f adcc 	bgt.w	8111ef2 <_dtoa_r+0x48a>
 811235a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 811235c:	465d      	mov	r5, fp
 811235e:	ea6f 0a03 	mvn.w	sl, r3
 8112362:	f04f 0900 	mov.w	r9, #0
 8112366:	4639      	mov	r1, r7
 8112368:	4620      	mov	r0, r4
 811236a:	f000 fb73 	bl	8112a54 <_Bfree>
 811236e:	2e00      	cmp	r6, #0
 8112370:	f43f aeb7 	beq.w	81120e2 <_dtoa_r+0x67a>
 8112374:	f1b9 0f00 	cmp.w	r9, #0
 8112378:	d005      	beq.n	8112386 <_dtoa_r+0x91e>
 811237a:	45b1      	cmp	r9, r6
 811237c:	d003      	beq.n	8112386 <_dtoa_r+0x91e>
 811237e:	4649      	mov	r1, r9
 8112380:	4620      	mov	r0, r4
 8112382:	f000 fb67 	bl	8112a54 <_Bfree>
 8112386:	4631      	mov	r1, r6
 8112388:	4620      	mov	r0, r4
 811238a:	f000 fb63 	bl	8112a54 <_Bfree>
 811238e:	e6a8      	b.n	81120e2 <_dtoa_r+0x67a>
 8112390:	2700      	movs	r7, #0
 8112392:	463e      	mov	r6, r7
 8112394:	e7e1      	b.n	811235a <_dtoa_r+0x8f2>
 8112396:	f8dd a020 	ldr.w	sl, [sp, #32]
 811239a:	463e      	mov	r6, r7
 811239c:	e5a9      	b.n	8111ef2 <_dtoa_r+0x48a>
 811239e:	bf00      	nop
 81123a0:	40240000 	.word	0x40240000
 81123a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81123a6:	f8cd 9008 	str.w	r9, [sp, #8]
 81123aa:	2b00      	cmp	r3, #0
 81123ac:	f000 80fa 	beq.w	81125a4 <_dtoa_r+0xb3c>
 81123b0:	2d00      	cmp	r5, #0
 81123b2:	dd05      	ble.n	81123c0 <_dtoa_r+0x958>
 81123b4:	4631      	mov	r1, r6
 81123b6:	462a      	mov	r2, r5
 81123b8:	4620      	mov	r0, r4
 81123ba:	f000 fcd9 	bl	8112d70 <__lshift>
 81123be:	4606      	mov	r6, r0
 81123c0:	9b07      	ldr	r3, [sp, #28]
 81123c2:	2b00      	cmp	r3, #0
 81123c4:	d04c      	beq.n	8112460 <_dtoa_r+0x9f8>
 81123c6:	6871      	ldr	r1, [r6, #4]
 81123c8:	4620      	mov	r0, r4
 81123ca:	f000 fb0f 	bl	81129ec <_Balloc>
 81123ce:	6932      	ldr	r2, [r6, #16]
 81123d0:	3202      	adds	r2, #2
 81123d2:	4605      	mov	r5, r0
 81123d4:	0092      	lsls	r2, r2, #2
 81123d6:	f106 010c 	add.w	r1, r6, #12
 81123da:	300c      	adds	r0, #12
 81123dc:	f7fe fb92 	bl	8110b04 <memcpy>
 81123e0:	2201      	movs	r2, #1
 81123e2:	4629      	mov	r1, r5
 81123e4:	4620      	mov	r0, r4
 81123e6:	f000 fcc3 	bl	8112d70 <__lshift>
 81123ea:	9b00      	ldr	r3, [sp, #0]
 81123ec:	f8cd b014 	str.w	fp, [sp, #20]
 81123f0:	f003 0301 	and.w	r3, r3, #1
 81123f4:	46b1      	mov	r9, r6
 81123f6:	9307      	str	r3, [sp, #28]
 81123f8:	4606      	mov	r6, r0
 81123fa:	4639      	mov	r1, r7
 81123fc:	9804      	ldr	r0, [sp, #16]
 81123fe:	f7ff faa7 	bl	8111950 <quorem>
 8112402:	4649      	mov	r1, r9
 8112404:	4605      	mov	r5, r0
 8112406:	f100 0830 	add.w	r8, r0, #48	; 0x30
 811240a:	9804      	ldr	r0, [sp, #16]
 811240c:	f000 fd04 	bl	8112e18 <__mcmp>
 8112410:	4632      	mov	r2, r6
 8112412:	9000      	str	r0, [sp, #0]
 8112414:	4639      	mov	r1, r7
 8112416:	4620      	mov	r0, r4
 8112418:	f000 fd18 	bl	8112e4c <__mdiff>
 811241c:	68c3      	ldr	r3, [r0, #12]
 811241e:	4602      	mov	r2, r0
 8112420:	bb03      	cbnz	r3, 8112464 <_dtoa_r+0x9fc>
 8112422:	4601      	mov	r1, r0
 8112424:	9008      	str	r0, [sp, #32]
 8112426:	9804      	ldr	r0, [sp, #16]
 8112428:	f000 fcf6 	bl	8112e18 <__mcmp>
 811242c:	9a08      	ldr	r2, [sp, #32]
 811242e:	4603      	mov	r3, r0
 8112430:	4611      	mov	r1, r2
 8112432:	4620      	mov	r0, r4
 8112434:	9308      	str	r3, [sp, #32]
 8112436:	f000 fb0d 	bl	8112a54 <_Bfree>
 811243a:	9b08      	ldr	r3, [sp, #32]
 811243c:	b9a3      	cbnz	r3, 8112468 <_dtoa_r+0xa00>
 811243e:	9a06      	ldr	r2, [sp, #24]
 8112440:	b992      	cbnz	r2, 8112468 <_dtoa_r+0xa00>
 8112442:	9a07      	ldr	r2, [sp, #28]
 8112444:	b982      	cbnz	r2, 8112468 <_dtoa_r+0xa00>
 8112446:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 811244a:	d029      	beq.n	81124a0 <_dtoa_r+0xa38>
 811244c:	9b00      	ldr	r3, [sp, #0]
 811244e:	2b00      	cmp	r3, #0
 8112450:	dd01      	ble.n	8112456 <_dtoa_r+0x9ee>
 8112452:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8112456:	9b05      	ldr	r3, [sp, #20]
 8112458:	1c5d      	adds	r5, r3, #1
 811245a:	f883 8000 	strb.w	r8, [r3]
 811245e:	e782      	b.n	8112366 <_dtoa_r+0x8fe>
 8112460:	4630      	mov	r0, r6
 8112462:	e7c2      	b.n	81123ea <_dtoa_r+0x982>
 8112464:	2301      	movs	r3, #1
 8112466:	e7e3      	b.n	8112430 <_dtoa_r+0x9c8>
 8112468:	9a00      	ldr	r2, [sp, #0]
 811246a:	2a00      	cmp	r2, #0
 811246c:	db04      	blt.n	8112478 <_dtoa_r+0xa10>
 811246e:	d125      	bne.n	81124bc <_dtoa_r+0xa54>
 8112470:	9a06      	ldr	r2, [sp, #24]
 8112472:	bb1a      	cbnz	r2, 81124bc <_dtoa_r+0xa54>
 8112474:	9a07      	ldr	r2, [sp, #28]
 8112476:	bb0a      	cbnz	r2, 81124bc <_dtoa_r+0xa54>
 8112478:	2b00      	cmp	r3, #0
 811247a:	ddec      	ble.n	8112456 <_dtoa_r+0x9ee>
 811247c:	2201      	movs	r2, #1
 811247e:	9904      	ldr	r1, [sp, #16]
 8112480:	4620      	mov	r0, r4
 8112482:	f000 fc75 	bl	8112d70 <__lshift>
 8112486:	4639      	mov	r1, r7
 8112488:	9004      	str	r0, [sp, #16]
 811248a:	f000 fcc5 	bl	8112e18 <__mcmp>
 811248e:	2800      	cmp	r0, #0
 8112490:	dc03      	bgt.n	811249a <_dtoa_r+0xa32>
 8112492:	d1e0      	bne.n	8112456 <_dtoa_r+0x9ee>
 8112494:	f018 0f01 	tst.w	r8, #1
 8112498:	d0dd      	beq.n	8112456 <_dtoa_r+0x9ee>
 811249a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 811249e:	d1d8      	bne.n	8112452 <_dtoa_r+0x9ea>
 81124a0:	9b05      	ldr	r3, [sp, #20]
 81124a2:	9a05      	ldr	r2, [sp, #20]
 81124a4:	1c5d      	adds	r5, r3, #1
 81124a6:	2339      	movs	r3, #57	; 0x39
 81124a8:	7013      	strb	r3, [r2, #0]
 81124aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 81124ae:	2b39      	cmp	r3, #57	; 0x39
 81124b0:	f105 32ff 	add.w	r2, r5, #4294967295
 81124b4:	d04f      	beq.n	8112556 <_dtoa_r+0xaee>
 81124b6:	3301      	adds	r3, #1
 81124b8:	7013      	strb	r3, [r2, #0]
 81124ba:	e754      	b.n	8112366 <_dtoa_r+0x8fe>
 81124bc:	9a05      	ldr	r2, [sp, #20]
 81124be:	2b00      	cmp	r3, #0
 81124c0:	f102 0501 	add.w	r5, r2, #1
 81124c4:	dd06      	ble.n	81124d4 <_dtoa_r+0xa6c>
 81124c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 81124ca:	d0e9      	beq.n	81124a0 <_dtoa_r+0xa38>
 81124cc:	f108 0801 	add.w	r8, r8, #1
 81124d0:	9b05      	ldr	r3, [sp, #20]
 81124d2:	e7c2      	b.n	811245a <_dtoa_r+0x9f2>
 81124d4:	9a02      	ldr	r2, [sp, #8]
 81124d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 81124da:	eba5 030b 	sub.w	r3, r5, fp
 81124de:	4293      	cmp	r3, r2
 81124e0:	d021      	beq.n	8112526 <_dtoa_r+0xabe>
 81124e2:	2300      	movs	r3, #0
 81124e4:	220a      	movs	r2, #10
 81124e6:	9904      	ldr	r1, [sp, #16]
 81124e8:	4620      	mov	r0, r4
 81124ea:	f000 faca 	bl	8112a82 <__multadd>
 81124ee:	45b1      	cmp	r9, r6
 81124f0:	9004      	str	r0, [sp, #16]
 81124f2:	f04f 0300 	mov.w	r3, #0
 81124f6:	f04f 020a 	mov.w	r2, #10
 81124fa:	4649      	mov	r1, r9
 81124fc:	4620      	mov	r0, r4
 81124fe:	d105      	bne.n	811250c <_dtoa_r+0xaa4>
 8112500:	f000 fabf 	bl	8112a82 <__multadd>
 8112504:	4681      	mov	r9, r0
 8112506:	4606      	mov	r6, r0
 8112508:	9505      	str	r5, [sp, #20]
 811250a:	e776      	b.n	81123fa <_dtoa_r+0x992>
 811250c:	f000 fab9 	bl	8112a82 <__multadd>
 8112510:	4631      	mov	r1, r6
 8112512:	4681      	mov	r9, r0
 8112514:	2300      	movs	r3, #0
 8112516:	220a      	movs	r2, #10
 8112518:	4620      	mov	r0, r4
 811251a:	f000 fab2 	bl	8112a82 <__multadd>
 811251e:	4606      	mov	r6, r0
 8112520:	e7f2      	b.n	8112508 <_dtoa_r+0xaa0>
 8112522:	f04f 0900 	mov.w	r9, #0
 8112526:	2201      	movs	r2, #1
 8112528:	9904      	ldr	r1, [sp, #16]
 811252a:	4620      	mov	r0, r4
 811252c:	f000 fc20 	bl	8112d70 <__lshift>
 8112530:	4639      	mov	r1, r7
 8112532:	9004      	str	r0, [sp, #16]
 8112534:	f000 fc70 	bl	8112e18 <__mcmp>
 8112538:	2800      	cmp	r0, #0
 811253a:	dcb6      	bgt.n	81124aa <_dtoa_r+0xa42>
 811253c:	d102      	bne.n	8112544 <_dtoa_r+0xadc>
 811253e:	f018 0f01 	tst.w	r8, #1
 8112542:	d1b2      	bne.n	81124aa <_dtoa_r+0xa42>
 8112544:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8112548:	2b30      	cmp	r3, #48	; 0x30
 811254a:	f105 32ff 	add.w	r2, r5, #4294967295
 811254e:	f47f af0a 	bne.w	8112366 <_dtoa_r+0x8fe>
 8112552:	4615      	mov	r5, r2
 8112554:	e7f6      	b.n	8112544 <_dtoa_r+0xadc>
 8112556:	4593      	cmp	fp, r2
 8112558:	d105      	bne.n	8112566 <_dtoa_r+0xafe>
 811255a:	2331      	movs	r3, #49	; 0x31
 811255c:	f10a 0a01 	add.w	sl, sl, #1
 8112560:	f88b 3000 	strb.w	r3, [fp]
 8112564:	e6ff      	b.n	8112366 <_dtoa_r+0x8fe>
 8112566:	4615      	mov	r5, r2
 8112568:	e79f      	b.n	81124aa <_dtoa_r+0xa42>
 811256a:	f8df b064 	ldr.w	fp, [pc, #100]	; 81125d0 <_dtoa_r+0xb68>
 811256e:	e007      	b.n	8112580 <_dtoa_r+0xb18>
 8112570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8112572:	f8df b060 	ldr.w	fp, [pc, #96]	; 81125d4 <_dtoa_r+0xb6c>
 8112576:	b11b      	cbz	r3, 8112580 <_dtoa_r+0xb18>
 8112578:	f10b 0308 	add.w	r3, fp, #8
 811257c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 811257e:	6013      	str	r3, [r2, #0]
 8112580:	4658      	mov	r0, fp
 8112582:	b017      	add	sp, #92	; 0x5c
 8112584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112588:	9b06      	ldr	r3, [sp, #24]
 811258a:	2b01      	cmp	r3, #1
 811258c:	f77f ae35 	ble.w	81121fa <_dtoa_r+0x792>
 8112590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8112592:	9307      	str	r3, [sp, #28]
 8112594:	e649      	b.n	811222a <_dtoa_r+0x7c2>
 8112596:	9b02      	ldr	r3, [sp, #8]
 8112598:	2b00      	cmp	r3, #0
 811259a:	dc03      	bgt.n	81125a4 <_dtoa_r+0xb3c>
 811259c:	9b06      	ldr	r3, [sp, #24]
 811259e:	2b02      	cmp	r3, #2
 81125a0:	f73f aecc 	bgt.w	811233c <_dtoa_r+0x8d4>
 81125a4:	465d      	mov	r5, fp
 81125a6:	4639      	mov	r1, r7
 81125a8:	9804      	ldr	r0, [sp, #16]
 81125aa:	f7ff f9d1 	bl	8111950 <quorem>
 81125ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 81125b2:	f805 8b01 	strb.w	r8, [r5], #1
 81125b6:	9a02      	ldr	r2, [sp, #8]
 81125b8:	eba5 030b 	sub.w	r3, r5, fp
 81125bc:	429a      	cmp	r2, r3
 81125be:	ddb0      	ble.n	8112522 <_dtoa_r+0xaba>
 81125c0:	2300      	movs	r3, #0
 81125c2:	220a      	movs	r2, #10
 81125c4:	9904      	ldr	r1, [sp, #16]
 81125c6:	4620      	mov	r0, r4
 81125c8:	f000 fa5b 	bl	8112a82 <__multadd>
 81125cc:	9004      	str	r0, [sp, #16]
 81125ce:	e7ea      	b.n	81125a6 <_dtoa_r+0xb3e>
 81125d0:	081145f4 	.word	0x081145f4
 81125d4:	08114618 	.word	0x08114618

081125d8 <__sflush_r>:
 81125d8:	898a      	ldrh	r2, [r1, #12]
 81125da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81125de:	4605      	mov	r5, r0
 81125e0:	0710      	lsls	r0, r2, #28
 81125e2:	460c      	mov	r4, r1
 81125e4:	d458      	bmi.n	8112698 <__sflush_r+0xc0>
 81125e6:	684b      	ldr	r3, [r1, #4]
 81125e8:	2b00      	cmp	r3, #0
 81125ea:	dc05      	bgt.n	81125f8 <__sflush_r+0x20>
 81125ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81125ee:	2b00      	cmp	r3, #0
 81125f0:	dc02      	bgt.n	81125f8 <__sflush_r+0x20>
 81125f2:	2000      	movs	r0, #0
 81125f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81125f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81125fa:	2e00      	cmp	r6, #0
 81125fc:	d0f9      	beq.n	81125f2 <__sflush_r+0x1a>
 81125fe:	2300      	movs	r3, #0
 8112600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8112604:	682f      	ldr	r7, [r5, #0]
 8112606:	6a21      	ldr	r1, [r4, #32]
 8112608:	602b      	str	r3, [r5, #0]
 811260a:	d032      	beq.n	8112672 <__sflush_r+0x9a>
 811260c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 811260e:	89a3      	ldrh	r3, [r4, #12]
 8112610:	075a      	lsls	r2, r3, #29
 8112612:	d505      	bpl.n	8112620 <__sflush_r+0x48>
 8112614:	6863      	ldr	r3, [r4, #4]
 8112616:	1ac0      	subs	r0, r0, r3
 8112618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 811261a:	b10b      	cbz	r3, 8112620 <__sflush_r+0x48>
 811261c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 811261e:	1ac0      	subs	r0, r0, r3
 8112620:	2300      	movs	r3, #0
 8112622:	4602      	mov	r2, r0
 8112624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8112626:	6a21      	ldr	r1, [r4, #32]
 8112628:	4628      	mov	r0, r5
 811262a:	47b0      	blx	r6
 811262c:	1c43      	adds	r3, r0, #1
 811262e:	89a3      	ldrh	r3, [r4, #12]
 8112630:	d106      	bne.n	8112640 <__sflush_r+0x68>
 8112632:	6829      	ldr	r1, [r5, #0]
 8112634:	291d      	cmp	r1, #29
 8112636:	d848      	bhi.n	81126ca <__sflush_r+0xf2>
 8112638:	4a29      	ldr	r2, [pc, #164]	; (81126e0 <__sflush_r+0x108>)
 811263a:	40ca      	lsrs	r2, r1
 811263c:	07d6      	lsls	r6, r2, #31
 811263e:	d544      	bpl.n	81126ca <__sflush_r+0xf2>
 8112640:	2200      	movs	r2, #0
 8112642:	6062      	str	r2, [r4, #4]
 8112644:	04d9      	lsls	r1, r3, #19
 8112646:	6922      	ldr	r2, [r4, #16]
 8112648:	6022      	str	r2, [r4, #0]
 811264a:	d504      	bpl.n	8112656 <__sflush_r+0x7e>
 811264c:	1c42      	adds	r2, r0, #1
 811264e:	d101      	bne.n	8112654 <__sflush_r+0x7c>
 8112650:	682b      	ldr	r3, [r5, #0]
 8112652:	b903      	cbnz	r3, 8112656 <__sflush_r+0x7e>
 8112654:	6560      	str	r0, [r4, #84]	; 0x54
 8112656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8112658:	602f      	str	r7, [r5, #0]
 811265a:	2900      	cmp	r1, #0
 811265c:	d0c9      	beq.n	81125f2 <__sflush_r+0x1a>
 811265e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8112662:	4299      	cmp	r1, r3
 8112664:	d002      	beq.n	811266c <__sflush_r+0x94>
 8112666:	4628      	mov	r0, r5
 8112668:	f000 fcaa 	bl	8112fc0 <_free_r>
 811266c:	2000      	movs	r0, #0
 811266e:	6360      	str	r0, [r4, #52]	; 0x34
 8112670:	e7c0      	b.n	81125f4 <__sflush_r+0x1c>
 8112672:	2301      	movs	r3, #1
 8112674:	4628      	mov	r0, r5
 8112676:	47b0      	blx	r6
 8112678:	1c41      	adds	r1, r0, #1
 811267a:	d1c8      	bne.n	811260e <__sflush_r+0x36>
 811267c:	682b      	ldr	r3, [r5, #0]
 811267e:	2b00      	cmp	r3, #0
 8112680:	d0c5      	beq.n	811260e <__sflush_r+0x36>
 8112682:	2b1d      	cmp	r3, #29
 8112684:	d001      	beq.n	811268a <__sflush_r+0xb2>
 8112686:	2b16      	cmp	r3, #22
 8112688:	d101      	bne.n	811268e <__sflush_r+0xb6>
 811268a:	602f      	str	r7, [r5, #0]
 811268c:	e7b1      	b.n	81125f2 <__sflush_r+0x1a>
 811268e:	89a3      	ldrh	r3, [r4, #12]
 8112690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8112694:	81a3      	strh	r3, [r4, #12]
 8112696:	e7ad      	b.n	81125f4 <__sflush_r+0x1c>
 8112698:	690f      	ldr	r7, [r1, #16]
 811269a:	2f00      	cmp	r7, #0
 811269c:	d0a9      	beq.n	81125f2 <__sflush_r+0x1a>
 811269e:	0793      	lsls	r3, r2, #30
 81126a0:	680e      	ldr	r6, [r1, #0]
 81126a2:	bf08      	it	eq
 81126a4:	694b      	ldreq	r3, [r1, #20]
 81126a6:	600f      	str	r7, [r1, #0]
 81126a8:	bf18      	it	ne
 81126aa:	2300      	movne	r3, #0
 81126ac:	eba6 0807 	sub.w	r8, r6, r7
 81126b0:	608b      	str	r3, [r1, #8]
 81126b2:	f1b8 0f00 	cmp.w	r8, #0
 81126b6:	dd9c      	ble.n	81125f2 <__sflush_r+0x1a>
 81126b8:	4643      	mov	r3, r8
 81126ba:	463a      	mov	r2, r7
 81126bc:	6a21      	ldr	r1, [r4, #32]
 81126be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81126c0:	4628      	mov	r0, r5
 81126c2:	47b0      	blx	r6
 81126c4:	2800      	cmp	r0, #0
 81126c6:	dc06      	bgt.n	81126d6 <__sflush_r+0xfe>
 81126c8:	89a3      	ldrh	r3, [r4, #12]
 81126ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81126ce:	81a3      	strh	r3, [r4, #12]
 81126d0:	f04f 30ff 	mov.w	r0, #4294967295
 81126d4:	e78e      	b.n	81125f4 <__sflush_r+0x1c>
 81126d6:	4407      	add	r7, r0
 81126d8:	eba8 0800 	sub.w	r8, r8, r0
 81126dc:	e7e9      	b.n	81126b2 <__sflush_r+0xda>
 81126de:	bf00      	nop
 81126e0:	20400001 	.word	0x20400001

081126e4 <_fflush_r>:
 81126e4:	b538      	push	{r3, r4, r5, lr}
 81126e6:	690b      	ldr	r3, [r1, #16]
 81126e8:	4605      	mov	r5, r0
 81126ea:	460c      	mov	r4, r1
 81126ec:	b1db      	cbz	r3, 8112726 <_fflush_r+0x42>
 81126ee:	b118      	cbz	r0, 81126f8 <_fflush_r+0x14>
 81126f0:	6983      	ldr	r3, [r0, #24]
 81126f2:	b90b      	cbnz	r3, 81126f8 <_fflush_r+0x14>
 81126f4:	f000 f860 	bl	81127b8 <__sinit>
 81126f8:	4b0c      	ldr	r3, [pc, #48]	; (811272c <_fflush_r+0x48>)
 81126fa:	429c      	cmp	r4, r3
 81126fc:	d109      	bne.n	8112712 <_fflush_r+0x2e>
 81126fe:	686c      	ldr	r4, [r5, #4]
 8112700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112704:	b17b      	cbz	r3, 8112726 <_fflush_r+0x42>
 8112706:	4621      	mov	r1, r4
 8112708:	4628      	mov	r0, r5
 811270a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811270e:	f7ff bf63 	b.w	81125d8 <__sflush_r>
 8112712:	4b07      	ldr	r3, [pc, #28]	; (8112730 <_fflush_r+0x4c>)
 8112714:	429c      	cmp	r4, r3
 8112716:	d101      	bne.n	811271c <_fflush_r+0x38>
 8112718:	68ac      	ldr	r4, [r5, #8]
 811271a:	e7f1      	b.n	8112700 <_fflush_r+0x1c>
 811271c:	4b05      	ldr	r3, [pc, #20]	; (8112734 <_fflush_r+0x50>)
 811271e:	429c      	cmp	r4, r3
 8112720:	bf08      	it	eq
 8112722:	68ec      	ldreq	r4, [r5, #12]
 8112724:	e7ec      	b.n	8112700 <_fflush_r+0x1c>
 8112726:	2000      	movs	r0, #0
 8112728:	bd38      	pop	{r3, r4, r5, pc}
 811272a:	bf00      	nop
 811272c:	08114648 	.word	0x08114648
 8112730:	08114668 	.word	0x08114668
 8112734:	08114628 	.word	0x08114628

08112738 <std>:
 8112738:	2300      	movs	r3, #0
 811273a:	b510      	push	{r4, lr}
 811273c:	4604      	mov	r4, r0
 811273e:	e9c0 3300 	strd	r3, r3, [r0]
 8112742:	6083      	str	r3, [r0, #8]
 8112744:	8181      	strh	r1, [r0, #12]
 8112746:	6643      	str	r3, [r0, #100]	; 0x64
 8112748:	81c2      	strh	r2, [r0, #14]
 811274a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811274e:	6183      	str	r3, [r0, #24]
 8112750:	4619      	mov	r1, r3
 8112752:	2208      	movs	r2, #8
 8112754:	305c      	adds	r0, #92	; 0x5c
 8112756:	f7fe f9e0 	bl	8110b1a <memset>
 811275a:	4b05      	ldr	r3, [pc, #20]	; (8112770 <std+0x38>)
 811275c:	6263      	str	r3, [r4, #36]	; 0x24
 811275e:	4b05      	ldr	r3, [pc, #20]	; (8112774 <std+0x3c>)
 8112760:	62a3      	str	r3, [r4, #40]	; 0x28
 8112762:	4b05      	ldr	r3, [pc, #20]	; (8112778 <std+0x40>)
 8112764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8112766:	4b05      	ldr	r3, [pc, #20]	; (811277c <std+0x44>)
 8112768:	6224      	str	r4, [r4, #32]
 811276a:	6323      	str	r3, [r4, #48]	; 0x30
 811276c:	bd10      	pop	{r4, pc}
 811276e:	bf00      	nop
 8112770:	08113655 	.word	0x08113655
 8112774:	08113677 	.word	0x08113677
 8112778:	081136af 	.word	0x081136af
 811277c:	081136d3 	.word	0x081136d3

08112780 <_cleanup_r>:
 8112780:	4901      	ldr	r1, [pc, #4]	; (8112788 <_cleanup_r+0x8>)
 8112782:	f000 b885 	b.w	8112890 <_fwalk_reent>
 8112786:	bf00      	nop
 8112788:	081126e5 	.word	0x081126e5

0811278c <__sfmoreglue>:
 811278c:	b570      	push	{r4, r5, r6, lr}
 811278e:	1e4a      	subs	r2, r1, #1
 8112790:	2568      	movs	r5, #104	; 0x68
 8112792:	4355      	muls	r5, r2
 8112794:	460e      	mov	r6, r1
 8112796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 811279a:	f000 fc5f 	bl	811305c <_malloc_r>
 811279e:	4604      	mov	r4, r0
 81127a0:	b140      	cbz	r0, 81127b4 <__sfmoreglue+0x28>
 81127a2:	2100      	movs	r1, #0
 81127a4:	e9c0 1600 	strd	r1, r6, [r0]
 81127a8:	300c      	adds	r0, #12
 81127aa:	60a0      	str	r0, [r4, #8]
 81127ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81127b0:	f7fe f9b3 	bl	8110b1a <memset>
 81127b4:	4620      	mov	r0, r4
 81127b6:	bd70      	pop	{r4, r5, r6, pc}

081127b8 <__sinit>:
 81127b8:	6983      	ldr	r3, [r0, #24]
 81127ba:	b510      	push	{r4, lr}
 81127bc:	4604      	mov	r4, r0
 81127be:	bb33      	cbnz	r3, 811280e <__sinit+0x56>
 81127c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 81127c4:	6503      	str	r3, [r0, #80]	; 0x50
 81127c6:	4b12      	ldr	r3, [pc, #72]	; (8112810 <__sinit+0x58>)
 81127c8:	4a12      	ldr	r2, [pc, #72]	; (8112814 <__sinit+0x5c>)
 81127ca:	681b      	ldr	r3, [r3, #0]
 81127cc:	6282      	str	r2, [r0, #40]	; 0x28
 81127ce:	4298      	cmp	r0, r3
 81127d0:	bf04      	itt	eq
 81127d2:	2301      	moveq	r3, #1
 81127d4:	6183      	streq	r3, [r0, #24]
 81127d6:	f000 f81f 	bl	8112818 <__sfp>
 81127da:	6060      	str	r0, [r4, #4]
 81127dc:	4620      	mov	r0, r4
 81127de:	f000 f81b 	bl	8112818 <__sfp>
 81127e2:	60a0      	str	r0, [r4, #8]
 81127e4:	4620      	mov	r0, r4
 81127e6:	f000 f817 	bl	8112818 <__sfp>
 81127ea:	2200      	movs	r2, #0
 81127ec:	60e0      	str	r0, [r4, #12]
 81127ee:	2104      	movs	r1, #4
 81127f0:	6860      	ldr	r0, [r4, #4]
 81127f2:	f7ff ffa1 	bl	8112738 <std>
 81127f6:	2201      	movs	r2, #1
 81127f8:	2109      	movs	r1, #9
 81127fa:	68a0      	ldr	r0, [r4, #8]
 81127fc:	f7ff ff9c 	bl	8112738 <std>
 8112800:	2202      	movs	r2, #2
 8112802:	2112      	movs	r1, #18
 8112804:	68e0      	ldr	r0, [r4, #12]
 8112806:	f7ff ff97 	bl	8112738 <std>
 811280a:	2301      	movs	r3, #1
 811280c:	61a3      	str	r3, [r4, #24]
 811280e:	bd10      	pop	{r4, pc}
 8112810:	081145e0 	.word	0x081145e0
 8112814:	08112781 	.word	0x08112781

08112818 <__sfp>:
 8112818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811281a:	4b1b      	ldr	r3, [pc, #108]	; (8112888 <__sfp+0x70>)
 811281c:	681e      	ldr	r6, [r3, #0]
 811281e:	69b3      	ldr	r3, [r6, #24]
 8112820:	4607      	mov	r7, r0
 8112822:	b913      	cbnz	r3, 811282a <__sfp+0x12>
 8112824:	4630      	mov	r0, r6
 8112826:	f7ff ffc7 	bl	81127b8 <__sinit>
 811282a:	3648      	adds	r6, #72	; 0x48
 811282c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8112830:	3b01      	subs	r3, #1
 8112832:	d503      	bpl.n	811283c <__sfp+0x24>
 8112834:	6833      	ldr	r3, [r6, #0]
 8112836:	b133      	cbz	r3, 8112846 <__sfp+0x2e>
 8112838:	6836      	ldr	r6, [r6, #0]
 811283a:	e7f7      	b.n	811282c <__sfp+0x14>
 811283c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8112840:	b16d      	cbz	r5, 811285e <__sfp+0x46>
 8112842:	3468      	adds	r4, #104	; 0x68
 8112844:	e7f4      	b.n	8112830 <__sfp+0x18>
 8112846:	2104      	movs	r1, #4
 8112848:	4638      	mov	r0, r7
 811284a:	f7ff ff9f 	bl	811278c <__sfmoreglue>
 811284e:	6030      	str	r0, [r6, #0]
 8112850:	2800      	cmp	r0, #0
 8112852:	d1f1      	bne.n	8112838 <__sfp+0x20>
 8112854:	230c      	movs	r3, #12
 8112856:	603b      	str	r3, [r7, #0]
 8112858:	4604      	mov	r4, r0
 811285a:	4620      	mov	r0, r4
 811285c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811285e:	4b0b      	ldr	r3, [pc, #44]	; (811288c <__sfp+0x74>)
 8112860:	6665      	str	r5, [r4, #100]	; 0x64
 8112862:	e9c4 5500 	strd	r5, r5, [r4]
 8112866:	60a5      	str	r5, [r4, #8]
 8112868:	e9c4 3503 	strd	r3, r5, [r4, #12]
 811286c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8112870:	2208      	movs	r2, #8
 8112872:	4629      	mov	r1, r5
 8112874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8112878:	f7fe f94f 	bl	8110b1a <memset>
 811287c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8112880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8112884:	e7e9      	b.n	811285a <__sfp+0x42>
 8112886:	bf00      	nop
 8112888:	081145e0 	.word	0x081145e0
 811288c:	ffff0001 	.word	0xffff0001

08112890 <_fwalk_reent>:
 8112890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8112894:	4680      	mov	r8, r0
 8112896:	4689      	mov	r9, r1
 8112898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 811289c:	2600      	movs	r6, #0
 811289e:	b914      	cbnz	r4, 81128a6 <_fwalk_reent+0x16>
 81128a0:	4630      	mov	r0, r6
 81128a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81128a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 81128aa:	3f01      	subs	r7, #1
 81128ac:	d501      	bpl.n	81128b2 <_fwalk_reent+0x22>
 81128ae:	6824      	ldr	r4, [r4, #0]
 81128b0:	e7f5      	b.n	811289e <_fwalk_reent+0xe>
 81128b2:	89ab      	ldrh	r3, [r5, #12]
 81128b4:	2b01      	cmp	r3, #1
 81128b6:	d907      	bls.n	81128c8 <_fwalk_reent+0x38>
 81128b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81128bc:	3301      	adds	r3, #1
 81128be:	d003      	beq.n	81128c8 <_fwalk_reent+0x38>
 81128c0:	4629      	mov	r1, r5
 81128c2:	4640      	mov	r0, r8
 81128c4:	47c8      	blx	r9
 81128c6:	4306      	orrs	r6, r0
 81128c8:	3568      	adds	r5, #104	; 0x68
 81128ca:	e7ee      	b.n	81128aa <_fwalk_reent+0x1a>

081128cc <__locale_ctype_ptr_l>:
 81128cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 81128d0:	4770      	bx	lr
	...

081128d4 <_localeconv_r>:
 81128d4:	4b04      	ldr	r3, [pc, #16]	; (81128e8 <_localeconv_r+0x14>)
 81128d6:	681b      	ldr	r3, [r3, #0]
 81128d8:	6a18      	ldr	r0, [r3, #32]
 81128da:	4b04      	ldr	r3, [pc, #16]	; (81128ec <_localeconv_r+0x18>)
 81128dc:	2800      	cmp	r0, #0
 81128de:	bf08      	it	eq
 81128e0:	4618      	moveq	r0, r3
 81128e2:	30f0      	adds	r0, #240	; 0xf0
 81128e4:	4770      	bx	lr
 81128e6:	bf00      	nop
 81128e8:	10000040 	.word	0x10000040
 81128ec:	100000a4 	.word	0x100000a4

081128f0 <__swhatbuf_r>:
 81128f0:	b570      	push	{r4, r5, r6, lr}
 81128f2:	460e      	mov	r6, r1
 81128f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81128f8:	2900      	cmp	r1, #0
 81128fa:	b096      	sub	sp, #88	; 0x58
 81128fc:	4614      	mov	r4, r2
 81128fe:	461d      	mov	r5, r3
 8112900:	da07      	bge.n	8112912 <__swhatbuf_r+0x22>
 8112902:	2300      	movs	r3, #0
 8112904:	602b      	str	r3, [r5, #0]
 8112906:	89b3      	ldrh	r3, [r6, #12]
 8112908:	061a      	lsls	r2, r3, #24
 811290a:	d410      	bmi.n	811292e <__swhatbuf_r+0x3e>
 811290c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8112910:	e00e      	b.n	8112930 <__swhatbuf_r+0x40>
 8112912:	466a      	mov	r2, sp
 8112914:	f000 ff10 	bl	8113738 <_fstat_r>
 8112918:	2800      	cmp	r0, #0
 811291a:	dbf2      	blt.n	8112902 <__swhatbuf_r+0x12>
 811291c:	9a01      	ldr	r2, [sp, #4]
 811291e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8112922:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8112926:	425a      	negs	r2, r3
 8112928:	415a      	adcs	r2, r3
 811292a:	602a      	str	r2, [r5, #0]
 811292c:	e7ee      	b.n	811290c <__swhatbuf_r+0x1c>
 811292e:	2340      	movs	r3, #64	; 0x40
 8112930:	2000      	movs	r0, #0
 8112932:	6023      	str	r3, [r4, #0]
 8112934:	b016      	add	sp, #88	; 0x58
 8112936:	bd70      	pop	{r4, r5, r6, pc}

08112938 <__smakebuf_r>:
 8112938:	898b      	ldrh	r3, [r1, #12]
 811293a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 811293c:	079d      	lsls	r5, r3, #30
 811293e:	4606      	mov	r6, r0
 8112940:	460c      	mov	r4, r1
 8112942:	d507      	bpl.n	8112954 <__smakebuf_r+0x1c>
 8112944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8112948:	6023      	str	r3, [r4, #0]
 811294a:	6123      	str	r3, [r4, #16]
 811294c:	2301      	movs	r3, #1
 811294e:	6163      	str	r3, [r4, #20]
 8112950:	b002      	add	sp, #8
 8112952:	bd70      	pop	{r4, r5, r6, pc}
 8112954:	ab01      	add	r3, sp, #4
 8112956:	466a      	mov	r2, sp
 8112958:	f7ff ffca 	bl	81128f0 <__swhatbuf_r>
 811295c:	9900      	ldr	r1, [sp, #0]
 811295e:	4605      	mov	r5, r0
 8112960:	4630      	mov	r0, r6
 8112962:	f000 fb7b 	bl	811305c <_malloc_r>
 8112966:	b948      	cbnz	r0, 811297c <__smakebuf_r+0x44>
 8112968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811296c:	059a      	lsls	r2, r3, #22
 811296e:	d4ef      	bmi.n	8112950 <__smakebuf_r+0x18>
 8112970:	f023 0303 	bic.w	r3, r3, #3
 8112974:	f043 0302 	orr.w	r3, r3, #2
 8112978:	81a3      	strh	r3, [r4, #12]
 811297a:	e7e3      	b.n	8112944 <__smakebuf_r+0xc>
 811297c:	4b0d      	ldr	r3, [pc, #52]	; (81129b4 <__smakebuf_r+0x7c>)
 811297e:	62b3      	str	r3, [r6, #40]	; 0x28
 8112980:	89a3      	ldrh	r3, [r4, #12]
 8112982:	6020      	str	r0, [r4, #0]
 8112984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8112988:	81a3      	strh	r3, [r4, #12]
 811298a:	9b00      	ldr	r3, [sp, #0]
 811298c:	6163      	str	r3, [r4, #20]
 811298e:	9b01      	ldr	r3, [sp, #4]
 8112990:	6120      	str	r0, [r4, #16]
 8112992:	b15b      	cbz	r3, 81129ac <__smakebuf_r+0x74>
 8112994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8112998:	4630      	mov	r0, r6
 811299a:	f000 fedf 	bl	811375c <_isatty_r>
 811299e:	b128      	cbz	r0, 81129ac <__smakebuf_r+0x74>
 81129a0:	89a3      	ldrh	r3, [r4, #12]
 81129a2:	f023 0303 	bic.w	r3, r3, #3
 81129a6:	f043 0301 	orr.w	r3, r3, #1
 81129aa:	81a3      	strh	r3, [r4, #12]
 81129ac:	89a3      	ldrh	r3, [r4, #12]
 81129ae:	431d      	orrs	r5, r3
 81129b0:	81a5      	strh	r5, [r4, #12]
 81129b2:	e7cd      	b.n	8112950 <__smakebuf_r+0x18>
 81129b4:	08112781 	.word	0x08112781

081129b8 <malloc>:
 81129b8:	4b02      	ldr	r3, [pc, #8]	; (81129c4 <malloc+0xc>)
 81129ba:	4601      	mov	r1, r0
 81129bc:	6818      	ldr	r0, [r3, #0]
 81129be:	f000 bb4d 	b.w	811305c <_malloc_r>
 81129c2:	bf00      	nop
 81129c4:	10000040 	.word	0x10000040

081129c8 <__ascii_mbtowc>:
 81129c8:	b082      	sub	sp, #8
 81129ca:	b901      	cbnz	r1, 81129ce <__ascii_mbtowc+0x6>
 81129cc:	a901      	add	r1, sp, #4
 81129ce:	b142      	cbz	r2, 81129e2 <__ascii_mbtowc+0x1a>
 81129d0:	b14b      	cbz	r3, 81129e6 <__ascii_mbtowc+0x1e>
 81129d2:	7813      	ldrb	r3, [r2, #0]
 81129d4:	600b      	str	r3, [r1, #0]
 81129d6:	7812      	ldrb	r2, [r2, #0]
 81129d8:	1c10      	adds	r0, r2, #0
 81129da:	bf18      	it	ne
 81129dc:	2001      	movne	r0, #1
 81129de:	b002      	add	sp, #8
 81129e0:	4770      	bx	lr
 81129e2:	4610      	mov	r0, r2
 81129e4:	e7fb      	b.n	81129de <__ascii_mbtowc+0x16>
 81129e6:	f06f 0001 	mvn.w	r0, #1
 81129ea:	e7f8      	b.n	81129de <__ascii_mbtowc+0x16>

081129ec <_Balloc>:
 81129ec:	b570      	push	{r4, r5, r6, lr}
 81129ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81129f0:	4604      	mov	r4, r0
 81129f2:	460e      	mov	r6, r1
 81129f4:	b93d      	cbnz	r5, 8112a06 <_Balloc+0x1a>
 81129f6:	2010      	movs	r0, #16
 81129f8:	f7ff ffde 	bl	81129b8 <malloc>
 81129fc:	6260      	str	r0, [r4, #36]	; 0x24
 81129fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8112a02:	6005      	str	r5, [r0, #0]
 8112a04:	60c5      	str	r5, [r0, #12]
 8112a06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8112a08:	68eb      	ldr	r3, [r5, #12]
 8112a0a:	b183      	cbz	r3, 8112a2e <_Balloc+0x42>
 8112a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8112a0e:	68db      	ldr	r3, [r3, #12]
 8112a10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8112a14:	b9b8      	cbnz	r0, 8112a46 <_Balloc+0x5a>
 8112a16:	2101      	movs	r1, #1
 8112a18:	fa01 f506 	lsl.w	r5, r1, r6
 8112a1c:	1d6a      	adds	r2, r5, #5
 8112a1e:	0092      	lsls	r2, r2, #2
 8112a20:	4620      	mov	r0, r4
 8112a22:	f000 fabf 	bl	8112fa4 <_calloc_r>
 8112a26:	b160      	cbz	r0, 8112a42 <_Balloc+0x56>
 8112a28:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8112a2c:	e00e      	b.n	8112a4c <_Balloc+0x60>
 8112a2e:	2221      	movs	r2, #33	; 0x21
 8112a30:	2104      	movs	r1, #4
 8112a32:	4620      	mov	r0, r4
 8112a34:	f000 fab6 	bl	8112fa4 <_calloc_r>
 8112a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8112a3a:	60e8      	str	r0, [r5, #12]
 8112a3c:	68db      	ldr	r3, [r3, #12]
 8112a3e:	2b00      	cmp	r3, #0
 8112a40:	d1e4      	bne.n	8112a0c <_Balloc+0x20>
 8112a42:	2000      	movs	r0, #0
 8112a44:	bd70      	pop	{r4, r5, r6, pc}
 8112a46:	6802      	ldr	r2, [r0, #0]
 8112a48:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8112a4c:	2300      	movs	r3, #0
 8112a4e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8112a52:	e7f7      	b.n	8112a44 <_Balloc+0x58>

08112a54 <_Bfree>:
 8112a54:	b570      	push	{r4, r5, r6, lr}
 8112a56:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8112a58:	4606      	mov	r6, r0
 8112a5a:	460d      	mov	r5, r1
 8112a5c:	b93c      	cbnz	r4, 8112a6e <_Bfree+0x1a>
 8112a5e:	2010      	movs	r0, #16
 8112a60:	f7ff ffaa 	bl	81129b8 <malloc>
 8112a64:	6270      	str	r0, [r6, #36]	; 0x24
 8112a66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8112a6a:	6004      	str	r4, [r0, #0]
 8112a6c:	60c4      	str	r4, [r0, #12]
 8112a6e:	b13d      	cbz	r5, 8112a80 <_Bfree+0x2c>
 8112a70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8112a72:	686a      	ldr	r2, [r5, #4]
 8112a74:	68db      	ldr	r3, [r3, #12]
 8112a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8112a7a:	6029      	str	r1, [r5, #0]
 8112a7c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8112a80:	bd70      	pop	{r4, r5, r6, pc}

08112a82 <__multadd>:
 8112a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112a86:	690d      	ldr	r5, [r1, #16]
 8112a88:	461f      	mov	r7, r3
 8112a8a:	4606      	mov	r6, r0
 8112a8c:	460c      	mov	r4, r1
 8112a8e:	f101 0c14 	add.w	ip, r1, #20
 8112a92:	2300      	movs	r3, #0
 8112a94:	f8dc 0000 	ldr.w	r0, [ip]
 8112a98:	b281      	uxth	r1, r0
 8112a9a:	fb02 7101 	mla	r1, r2, r1, r7
 8112a9e:	0c0f      	lsrs	r7, r1, #16
 8112aa0:	0c00      	lsrs	r0, r0, #16
 8112aa2:	fb02 7000 	mla	r0, r2, r0, r7
 8112aa6:	b289      	uxth	r1, r1
 8112aa8:	3301      	adds	r3, #1
 8112aaa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8112aae:	429d      	cmp	r5, r3
 8112ab0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8112ab4:	f84c 1b04 	str.w	r1, [ip], #4
 8112ab8:	dcec      	bgt.n	8112a94 <__multadd+0x12>
 8112aba:	b1d7      	cbz	r7, 8112af2 <__multadd+0x70>
 8112abc:	68a3      	ldr	r3, [r4, #8]
 8112abe:	42ab      	cmp	r3, r5
 8112ac0:	dc12      	bgt.n	8112ae8 <__multadd+0x66>
 8112ac2:	6861      	ldr	r1, [r4, #4]
 8112ac4:	4630      	mov	r0, r6
 8112ac6:	3101      	adds	r1, #1
 8112ac8:	f7ff ff90 	bl	81129ec <_Balloc>
 8112acc:	6922      	ldr	r2, [r4, #16]
 8112ace:	3202      	adds	r2, #2
 8112ad0:	f104 010c 	add.w	r1, r4, #12
 8112ad4:	4680      	mov	r8, r0
 8112ad6:	0092      	lsls	r2, r2, #2
 8112ad8:	300c      	adds	r0, #12
 8112ada:	f7fe f813 	bl	8110b04 <memcpy>
 8112ade:	4621      	mov	r1, r4
 8112ae0:	4630      	mov	r0, r6
 8112ae2:	f7ff ffb7 	bl	8112a54 <_Bfree>
 8112ae6:	4644      	mov	r4, r8
 8112ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8112aec:	3501      	adds	r5, #1
 8112aee:	615f      	str	r7, [r3, #20]
 8112af0:	6125      	str	r5, [r4, #16]
 8112af2:	4620      	mov	r0, r4
 8112af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08112af8 <__hi0bits>:
 8112af8:	0c02      	lsrs	r2, r0, #16
 8112afa:	0412      	lsls	r2, r2, #16
 8112afc:	4603      	mov	r3, r0
 8112afe:	b9b2      	cbnz	r2, 8112b2e <__hi0bits+0x36>
 8112b00:	0403      	lsls	r3, r0, #16
 8112b02:	2010      	movs	r0, #16
 8112b04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8112b08:	bf04      	itt	eq
 8112b0a:	021b      	lsleq	r3, r3, #8
 8112b0c:	3008      	addeq	r0, #8
 8112b0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8112b12:	bf04      	itt	eq
 8112b14:	011b      	lsleq	r3, r3, #4
 8112b16:	3004      	addeq	r0, #4
 8112b18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8112b1c:	bf04      	itt	eq
 8112b1e:	009b      	lsleq	r3, r3, #2
 8112b20:	3002      	addeq	r0, #2
 8112b22:	2b00      	cmp	r3, #0
 8112b24:	db06      	blt.n	8112b34 <__hi0bits+0x3c>
 8112b26:	005b      	lsls	r3, r3, #1
 8112b28:	d503      	bpl.n	8112b32 <__hi0bits+0x3a>
 8112b2a:	3001      	adds	r0, #1
 8112b2c:	4770      	bx	lr
 8112b2e:	2000      	movs	r0, #0
 8112b30:	e7e8      	b.n	8112b04 <__hi0bits+0xc>
 8112b32:	2020      	movs	r0, #32
 8112b34:	4770      	bx	lr

08112b36 <__lo0bits>:
 8112b36:	6803      	ldr	r3, [r0, #0]
 8112b38:	f013 0207 	ands.w	r2, r3, #7
 8112b3c:	4601      	mov	r1, r0
 8112b3e:	d00b      	beq.n	8112b58 <__lo0bits+0x22>
 8112b40:	07da      	lsls	r2, r3, #31
 8112b42:	d423      	bmi.n	8112b8c <__lo0bits+0x56>
 8112b44:	0798      	lsls	r0, r3, #30
 8112b46:	bf49      	itett	mi
 8112b48:	085b      	lsrmi	r3, r3, #1
 8112b4a:	089b      	lsrpl	r3, r3, #2
 8112b4c:	2001      	movmi	r0, #1
 8112b4e:	600b      	strmi	r3, [r1, #0]
 8112b50:	bf5c      	itt	pl
 8112b52:	600b      	strpl	r3, [r1, #0]
 8112b54:	2002      	movpl	r0, #2
 8112b56:	4770      	bx	lr
 8112b58:	b298      	uxth	r0, r3
 8112b5a:	b9a8      	cbnz	r0, 8112b88 <__lo0bits+0x52>
 8112b5c:	0c1b      	lsrs	r3, r3, #16
 8112b5e:	2010      	movs	r0, #16
 8112b60:	f013 0fff 	tst.w	r3, #255	; 0xff
 8112b64:	bf04      	itt	eq
 8112b66:	0a1b      	lsreq	r3, r3, #8
 8112b68:	3008      	addeq	r0, #8
 8112b6a:	071a      	lsls	r2, r3, #28
 8112b6c:	bf04      	itt	eq
 8112b6e:	091b      	lsreq	r3, r3, #4
 8112b70:	3004      	addeq	r0, #4
 8112b72:	079a      	lsls	r2, r3, #30
 8112b74:	bf04      	itt	eq
 8112b76:	089b      	lsreq	r3, r3, #2
 8112b78:	3002      	addeq	r0, #2
 8112b7a:	07da      	lsls	r2, r3, #31
 8112b7c:	d402      	bmi.n	8112b84 <__lo0bits+0x4e>
 8112b7e:	085b      	lsrs	r3, r3, #1
 8112b80:	d006      	beq.n	8112b90 <__lo0bits+0x5a>
 8112b82:	3001      	adds	r0, #1
 8112b84:	600b      	str	r3, [r1, #0]
 8112b86:	4770      	bx	lr
 8112b88:	4610      	mov	r0, r2
 8112b8a:	e7e9      	b.n	8112b60 <__lo0bits+0x2a>
 8112b8c:	2000      	movs	r0, #0
 8112b8e:	4770      	bx	lr
 8112b90:	2020      	movs	r0, #32
 8112b92:	4770      	bx	lr

08112b94 <__i2b>:
 8112b94:	b510      	push	{r4, lr}
 8112b96:	460c      	mov	r4, r1
 8112b98:	2101      	movs	r1, #1
 8112b9a:	f7ff ff27 	bl	81129ec <_Balloc>
 8112b9e:	2201      	movs	r2, #1
 8112ba0:	6144      	str	r4, [r0, #20]
 8112ba2:	6102      	str	r2, [r0, #16]
 8112ba4:	bd10      	pop	{r4, pc}

08112ba6 <__multiply>:
 8112ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112baa:	4614      	mov	r4, r2
 8112bac:	690a      	ldr	r2, [r1, #16]
 8112bae:	6923      	ldr	r3, [r4, #16]
 8112bb0:	429a      	cmp	r2, r3
 8112bb2:	bfb8      	it	lt
 8112bb4:	460b      	movlt	r3, r1
 8112bb6:	4688      	mov	r8, r1
 8112bb8:	bfbc      	itt	lt
 8112bba:	46a0      	movlt	r8, r4
 8112bbc:	461c      	movlt	r4, r3
 8112bbe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8112bc2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8112bc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8112bca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8112bce:	eb07 0609 	add.w	r6, r7, r9
 8112bd2:	42b3      	cmp	r3, r6
 8112bd4:	bfb8      	it	lt
 8112bd6:	3101      	addlt	r1, #1
 8112bd8:	f7ff ff08 	bl	81129ec <_Balloc>
 8112bdc:	f100 0514 	add.w	r5, r0, #20
 8112be0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8112be4:	462b      	mov	r3, r5
 8112be6:	2200      	movs	r2, #0
 8112be8:	4573      	cmp	r3, lr
 8112bea:	d316      	bcc.n	8112c1a <__multiply+0x74>
 8112bec:	f104 0214 	add.w	r2, r4, #20
 8112bf0:	f108 0114 	add.w	r1, r8, #20
 8112bf4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8112bf8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8112bfc:	9300      	str	r3, [sp, #0]
 8112bfe:	9b00      	ldr	r3, [sp, #0]
 8112c00:	9201      	str	r2, [sp, #4]
 8112c02:	4293      	cmp	r3, r2
 8112c04:	d80c      	bhi.n	8112c20 <__multiply+0x7a>
 8112c06:	2e00      	cmp	r6, #0
 8112c08:	dd03      	ble.n	8112c12 <__multiply+0x6c>
 8112c0a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8112c0e:	2b00      	cmp	r3, #0
 8112c10:	d05d      	beq.n	8112cce <__multiply+0x128>
 8112c12:	6106      	str	r6, [r0, #16]
 8112c14:	b003      	add	sp, #12
 8112c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112c1a:	f843 2b04 	str.w	r2, [r3], #4
 8112c1e:	e7e3      	b.n	8112be8 <__multiply+0x42>
 8112c20:	f8b2 b000 	ldrh.w	fp, [r2]
 8112c24:	f1bb 0f00 	cmp.w	fp, #0
 8112c28:	d023      	beq.n	8112c72 <__multiply+0xcc>
 8112c2a:	4689      	mov	r9, r1
 8112c2c:	46ac      	mov	ip, r5
 8112c2e:	f04f 0800 	mov.w	r8, #0
 8112c32:	f859 4b04 	ldr.w	r4, [r9], #4
 8112c36:	f8dc a000 	ldr.w	sl, [ip]
 8112c3a:	b2a3      	uxth	r3, r4
 8112c3c:	fa1f fa8a 	uxth.w	sl, sl
 8112c40:	fb0b a303 	mla	r3, fp, r3, sl
 8112c44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8112c48:	f8dc 4000 	ldr.w	r4, [ip]
 8112c4c:	4443      	add	r3, r8
 8112c4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8112c52:	fb0b 840a 	mla	r4, fp, sl, r8
 8112c56:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8112c5a:	46e2      	mov	sl, ip
 8112c5c:	b29b      	uxth	r3, r3
 8112c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8112c62:	454f      	cmp	r7, r9
 8112c64:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8112c68:	f84a 3b04 	str.w	r3, [sl], #4
 8112c6c:	d82b      	bhi.n	8112cc6 <__multiply+0x120>
 8112c6e:	f8cc 8004 	str.w	r8, [ip, #4]
 8112c72:	9b01      	ldr	r3, [sp, #4]
 8112c74:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8112c78:	3204      	adds	r2, #4
 8112c7a:	f1ba 0f00 	cmp.w	sl, #0
 8112c7e:	d020      	beq.n	8112cc2 <__multiply+0x11c>
 8112c80:	682b      	ldr	r3, [r5, #0]
 8112c82:	4689      	mov	r9, r1
 8112c84:	46a8      	mov	r8, r5
 8112c86:	f04f 0b00 	mov.w	fp, #0
 8112c8a:	f8b9 c000 	ldrh.w	ip, [r9]
 8112c8e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8112c92:	fb0a 440c 	mla	r4, sl, ip, r4
 8112c96:	445c      	add	r4, fp
 8112c98:	46c4      	mov	ip, r8
 8112c9a:	b29b      	uxth	r3, r3
 8112c9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8112ca0:	f84c 3b04 	str.w	r3, [ip], #4
 8112ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8112ca8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8112cac:	0c1b      	lsrs	r3, r3, #16
 8112cae:	fb0a b303 	mla	r3, sl, r3, fp
 8112cb2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8112cb6:	454f      	cmp	r7, r9
 8112cb8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8112cbc:	d805      	bhi.n	8112cca <__multiply+0x124>
 8112cbe:	f8c8 3004 	str.w	r3, [r8, #4]
 8112cc2:	3504      	adds	r5, #4
 8112cc4:	e79b      	b.n	8112bfe <__multiply+0x58>
 8112cc6:	46d4      	mov	ip, sl
 8112cc8:	e7b3      	b.n	8112c32 <__multiply+0x8c>
 8112cca:	46e0      	mov	r8, ip
 8112ccc:	e7dd      	b.n	8112c8a <__multiply+0xe4>
 8112cce:	3e01      	subs	r6, #1
 8112cd0:	e799      	b.n	8112c06 <__multiply+0x60>
	...

08112cd4 <__pow5mult>:
 8112cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8112cd8:	4615      	mov	r5, r2
 8112cda:	f012 0203 	ands.w	r2, r2, #3
 8112cde:	4606      	mov	r6, r0
 8112ce0:	460f      	mov	r7, r1
 8112ce2:	d007      	beq.n	8112cf4 <__pow5mult+0x20>
 8112ce4:	3a01      	subs	r2, #1
 8112ce6:	4c21      	ldr	r4, [pc, #132]	; (8112d6c <__pow5mult+0x98>)
 8112ce8:	2300      	movs	r3, #0
 8112cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8112cee:	f7ff fec8 	bl	8112a82 <__multadd>
 8112cf2:	4607      	mov	r7, r0
 8112cf4:	10ad      	asrs	r5, r5, #2
 8112cf6:	d035      	beq.n	8112d64 <__pow5mult+0x90>
 8112cf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8112cfa:	b93c      	cbnz	r4, 8112d0c <__pow5mult+0x38>
 8112cfc:	2010      	movs	r0, #16
 8112cfe:	f7ff fe5b 	bl	81129b8 <malloc>
 8112d02:	6270      	str	r0, [r6, #36]	; 0x24
 8112d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8112d08:	6004      	str	r4, [r0, #0]
 8112d0a:	60c4      	str	r4, [r0, #12]
 8112d0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8112d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8112d14:	b94c      	cbnz	r4, 8112d2a <__pow5mult+0x56>
 8112d16:	f240 2171 	movw	r1, #625	; 0x271
 8112d1a:	4630      	mov	r0, r6
 8112d1c:	f7ff ff3a 	bl	8112b94 <__i2b>
 8112d20:	2300      	movs	r3, #0
 8112d22:	f8c8 0008 	str.w	r0, [r8, #8]
 8112d26:	4604      	mov	r4, r0
 8112d28:	6003      	str	r3, [r0, #0]
 8112d2a:	f04f 0800 	mov.w	r8, #0
 8112d2e:	07eb      	lsls	r3, r5, #31
 8112d30:	d50a      	bpl.n	8112d48 <__pow5mult+0x74>
 8112d32:	4639      	mov	r1, r7
 8112d34:	4622      	mov	r2, r4
 8112d36:	4630      	mov	r0, r6
 8112d38:	f7ff ff35 	bl	8112ba6 <__multiply>
 8112d3c:	4639      	mov	r1, r7
 8112d3e:	4681      	mov	r9, r0
 8112d40:	4630      	mov	r0, r6
 8112d42:	f7ff fe87 	bl	8112a54 <_Bfree>
 8112d46:	464f      	mov	r7, r9
 8112d48:	106d      	asrs	r5, r5, #1
 8112d4a:	d00b      	beq.n	8112d64 <__pow5mult+0x90>
 8112d4c:	6820      	ldr	r0, [r4, #0]
 8112d4e:	b938      	cbnz	r0, 8112d60 <__pow5mult+0x8c>
 8112d50:	4622      	mov	r2, r4
 8112d52:	4621      	mov	r1, r4
 8112d54:	4630      	mov	r0, r6
 8112d56:	f7ff ff26 	bl	8112ba6 <__multiply>
 8112d5a:	6020      	str	r0, [r4, #0]
 8112d5c:	f8c0 8000 	str.w	r8, [r0]
 8112d60:	4604      	mov	r4, r0
 8112d62:	e7e4      	b.n	8112d2e <__pow5mult+0x5a>
 8112d64:	4638      	mov	r0, r7
 8112d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8112d6a:	bf00      	nop
 8112d6c:	08114788 	.word	0x08114788

08112d70 <__lshift>:
 8112d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8112d74:	460c      	mov	r4, r1
 8112d76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8112d7a:	6923      	ldr	r3, [r4, #16]
 8112d7c:	6849      	ldr	r1, [r1, #4]
 8112d7e:	eb0a 0903 	add.w	r9, sl, r3
 8112d82:	68a3      	ldr	r3, [r4, #8]
 8112d84:	4607      	mov	r7, r0
 8112d86:	4616      	mov	r6, r2
 8112d88:	f109 0501 	add.w	r5, r9, #1
 8112d8c:	42ab      	cmp	r3, r5
 8112d8e:	db32      	blt.n	8112df6 <__lshift+0x86>
 8112d90:	4638      	mov	r0, r7
 8112d92:	f7ff fe2b 	bl	81129ec <_Balloc>
 8112d96:	2300      	movs	r3, #0
 8112d98:	4680      	mov	r8, r0
 8112d9a:	f100 0114 	add.w	r1, r0, #20
 8112d9e:	461a      	mov	r2, r3
 8112da0:	4553      	cmp	r3, sl
 8112da2:	db2b      	blt.n	8112dfc <__lshift+0x8c>
 8112da4:	6920      	ldr	r0, [r4, #16]
 8112da6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8112daa:	f104 0314 	add.w	r3, r4, #20
 8112dae:	f016 021f 	ands.w	r2, r6, #31
 8112db2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8112db6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8112dba:	d025      	beq.n	8112e08 <__lshift+0x98>
 8112dbc:	f1c2 0e20 	rsb	lr, r2, #32
 8112dc0:	2000      	movs	r0, #0
 8112dc2:	681e      	ldr	r6, [r3, #0]
 8112dc4:	468a      	mov	sl, r1
 8112dc6:	4096      	lsls	r6, r2
 8112dc8:	4330      	orrs	r0, r6
 8112dca:	f84a 0b04 	str.w	r0, [sl], #4
 8112dce:	f853 0b04 	ldr.w	r0, [r3], #4
 8112dd2:	459c      	cmp	ip, r3
 8112dd4:	fa20 f00e 	lsr.w	r0, r0, lr
 8112dd8:	d814      	bhi.n	8112e04 <__lshift+0x94>
 8112dda:	6048      	str	r0, [r1, #4]
 8112ddc:	b108      	cbz	r0, 8112de2 <__lshift+0x72>
 8112dde:	f109 0502 	add.w	r5, r9, #2
 8112de2:	3d01      	subs	r5, #1
 8112de4:	4638      	mov	r0, r7
 8112de6:	f8c8 5010 	str.w	r5, [r8, #16]
 8112dea:	4621      	mov	r1, r4
 8112dec:	f7ff fe32 	bl	8112a54 <_Bfree>
 8112df0:	4640      	mov	r0, r8
 8112df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112df6:	3101      	adds	r1, #1
 8112df8:	005b      	lsls	r3, r3, #1
 8112dfa:	e7c7      	b.n	8112d8c <__lshift+0x1c>
 8112dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8112e00:	3301      	adds	r3, #1
 8112e02:	e7cd      	b.n	8112da0 <__lshift+0x30>
 8112e04:	4651      	mov	r1, sl
 8112e06:	e7dc      	b.n	8112dc2 <__lshift+0x52>
 8112e08:	3904      	subs	r1, #4
 8112e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8112e0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8112e12:	459c      	cmp	ip, r3
 8112e14:	d8f9      	bhi.n	8112e0a <__lshift+0x9a>
 8112e16:	e7e4      	b.n	8112de2 <__lshift+0x72>

08112e18 <__mcmp>:
 8112e18:	6903      	ldr	r3, [r0, #16]
 8112e1a:	690a      	ldr	r2, [r1, #16]
 8112e1c:	1a9b      	subs	r3, r3, r2
 8112e1e:	b530      	push	{r4, r5, lr}
 8112e20:	d10c      	bne.n	8112e3c <__mcmp+0x24>
 8112e22:	0092      	lsls	r2, r2, #2
 8112e24:	3014      	adds	r0, #20
 8112e26:	3114      	adds	r1, #20
 8112e28:	1884      	adds	r4, r0, r2
 8112e2a:	4411      	add	r1, r2
 8112e2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8112e30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8112e34:	4295      	cmp	r5, r2
 8112e36:	d003      	beq.n	8112e40 <__mcmp+0x28>
 8112e38:	d305      	bcc.n	8112e46 <__mcmp+0x2e>
 8112e3a:	2301      	movs	r3, #1
 8112e3c:	4618      	mov	r0, r3
 8112e3e:	bd30      	pop	{r4, r5, pc}
 8112e40:	42a0      	cmp	r0, r4
 8112e42:	d3f3      	bcc.n	8112e2c <__mcmp+0x14>
 8112e44:	e7fa      	b.n	8112e3c <__mcmp+0x24>
 8112e46:	f04f 33ff 	mov.w	r3, #4294967295
 8112e4a:	e7f7      	b.n	8112e3c <__mcmp+0x24>

08112e4c <__mdiff>:
 8112e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8112e50:	460d      	mov	r5, r1
 8112e52:	4607      	mov	r7, r0
 8112e54:	4611      	mov	r1, r2
 8112e56:	4628      	mov	r0, r5
 8112e58:	4614      	mov	r4, r2
 8112e5a:	f7ff ffdd 	bl	8112e18 <__mcmp>
 8112e5e:	1e06      	subs	r6, r0, #0
 8112e60:	d108      	bne.n	8112e74 <__mdiff+0x28>
 8112e62:	4631      	mov	r1, r6
 8112e64:	4638      	mov	r0, r7
 8112e66:	f7ff fdc1 	bl	81129ec <_Balloc>
 8112e6a:	2301      	movs	r3, #1
 8112e6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8112e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112e74:	bfa4      	itt	ge
 8112e76:	4623      	movge	r3, r4
 8112e78:	462c      	movge	r4, r5
 8112e7a:	4638      	mov	r0, r7
 8112e7c:	6861      	ldr	r1, [r4, #4]
 8112e7e:	bfa6      	itte	ge
 8112e80:	461d      	movge	r5, r3
 8112e82:	2600      	movge	r6, #0
 8112e84:	2601      	movlt	r6, #1
 8112e86:	f7ff fdb1 	bl	81129ec <_Balloc>
 8112e8a:	692b      	ldr	r3, [r5, #16]
 8112e8c:	60c6      	str	r6, [r0, #12]
 8112e8e:	6926      	ldr	r6, [r4, #16]
 8112e90:	f105 0914 	add.w	r9, r5, #20
 8112e94:	f104 0214 	add.w	r2, r4, #20
 8112e98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8112e9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8112ea0:	f100 0514 	add.w	r5, r0, #20
 8112ea4:	f04f 0e00 	mov.w	lr, #0
 8112ea8:	f852 ab04 	ldr.w	sl, [r2], #4
 8112eac:	f859 4b04 	ldr.w	r4, [r9], #4
 8112eb0:	fa1e f18a 	uxtah	r1, lr, sl
 8112eb4:	b2a3      	uxth	r3, r4
 8112eb6:	1ac9      	subs	r1, r1, r3
 8112eb8:	0c23      	lsrs	r3, r4, #16
 8112eba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8112ebe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8112ec2:	b289      	uxth	r1, r1
 8112ec4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8112ec8:	45c8      	cmp	r8, r9
 8112eca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8112ece:	4694      	mov	ip, r2
 8112ed0:	f845 3b04 	str.w	r3, [r5], #4
 8112ed4:	d8e8      	bhi.n	8112ea8 <__mdiff+0x5c>
 8112ed6:	45bc      	cmp	ip, r7
 8112ed8:	d304      	bcc.n	8112ee4 <__mdiff+0x98>
 8112eda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8112ede:	b183      	cbz	r3, 8112f02 <__mdiff+0xb6>
 8112ee0:	6106      	str	r6, [r0, #16]
 8112ee2:	e7c5      	b.n	8112e70 <__mdiff+0x24>
 8112ee4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8112ee8:	fa1e f381 	uxtah	r3, lr, r1
 8112eec:	141a      	asrs	r2, r3, #16
 8112eee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8112ef2:	b29b      	uxth	r3, r3
 8112ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8112ef8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8112efc:	f845 3b04 	str.w	r3, [r5], #4
 8112f00:	e7e9      	b.n	8112ed6 <__mdiff+0x8a>
 8112f02:	3e01      	subs	r6, #1
 8112f04:	e7e9      	b.n	8112eda <__mdiff+0x8e>

08112f06 <__d2b>:
 8112f06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8112f0a:	460e      	mov	r6, r1
 8112f0c:	2101      	movs	r1, #1
 8112f0e:	ec59 8b10 	vmov	r8, r9, d0
 8112f12:	4615      	mov	r5, r2
 8112f14:	f7ff fd6a 	bl	81129ec <_Balloc>
 8112f18:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8112f1c:	4607      	mov	r7, r0
 8112f1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8112f22:	bb34      	cbnz	r4, 8112f72 <__d2b+0x6c>
 8112f24:	9301      	str	r3, [sp, #4]
 8112f26:	f1b8 0300 	subs.w	r3, r8, #0
 8112f2a:	d027      	beq.n	8112f7c <__d2b+0x76>
 8112f2c:	a802      	add	r0, sp, #8
 8112f2e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8112f32:	f7ff fe00 	bl	8112b36 <__lo0bits>
 8112f36:	9900      	ldr	r1, [sp, #0]
 8112f38:	b1f0      	cbz	r0, 8112f78 <__d2b+0x72>
 8112f3a:	9a01      	ldr	r2, [sp, #4]
 8112f3c:	f1c0 0320 	rsb	r3, r0, #32
 8112f40:	fa02 f303 	lsl.w	r3, r2, r3
 8112f44:	430b      	orrs	r3, r1
 8112f46:	40c2      	lsrs	r2, r0
 8112f48:	617b      	str	r3, [r7, #20]
 8112f4a:	9201      	str	r2, [sp, #4]
 8112f4c:	9b01      	ldr	r3, [sp, #4]
 8112f4e:	61bb      	str	r3, [r7, #24]
 8112f50:	2b00      	cmp	r3, #0
 8112f52:	bf14      	ite	ne
 8112f54:	2102      	movne	r1, #2
 8112f56:	2101      	moveq	r1, #1
 8112f58:	6139      	str	r1, [r7, #16]
 8112f5a:	b1c4      	cbz	r4, 8112f8e <__d2b+0x88>
 8112f5c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8112f60:	4404      	add	r4, r0
 8112f62:	6034      	str	r4, [r6, #0]
 8112f64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8112f68:	6028      	str	r0, [r5, #0]
 8112f6a:	4638      	mov	r0, r7
 8112f6c:	b003      	add	sp, #12
 8112f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8112f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8112f76:	e7d5      	b.n	8112f24 <__d2b+0x1e>
 8112f78:	6179      	str	r1, [r7, #20]
 8112f7a:	e7e7      	b.n	8112f4c <__d2b+0x46>
 8112f7c:	a801      	add	r0, sp, #4
 8112f7e:	f7ff fdda 	bl	8112b36 <__lo0bits>
 8112f82:	9b01      	ldr	r3, [sp, #4]
 8112f84:	617b      	str	r3, [r7, #20]
 8112f86:	2101      	movs	r1, #1
 8112f88:	6139      	str	r1, [r7, #16]
 8112f8a:	3020      	adds	r0, #32
 8112f8c:	e7e5      	b.n	8112f5a <__d2b+0x54>
 8112f8e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8112f92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8112f96:	6030      	str	r0, [r6, #0]
 8112f98:	6918      	ldr	r0, [r3, #16]
 8112f9a:	f7ff fdad 	bl	8112af8 <__hi0bits>
 8112f9e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8112fa2:	e7e1      	b.n	8112f68 <__d2b+0x62>

08112fa4 <_calloc_r>:
 8112fa4:	b538      	push	{r3, r4, r5, lr}
 8112fa6:	fb02 f401 	mul.w	r4, r2, r1
 8112faa:	4621      	mov	r1, r4
 8112fac:	f000 f856 	bl	811305c <_malloc_r>
 8112fb0:	4605      	mov	r5, r0
 8112fb2:	b118      	cbz	r0, 8112fbc <_calloc_r+0x18>
 8112fb4:	4622      	mov	r2, r4
 8112fb6:	2100      	movs	r1, #0
 8112fb8:	f7fd fdaf 	bl	8110b1a <memset>
 8112fbc:	4628      	mov	r0, r5
 8112fbe:	bd38      	pop	{r3, r4, r5, pc}

08112fc0 <_free_r>:
 8112fc0:	b538      	push	{r3, r4, r5, lr}
 8112fc2:	4605      	mov	r5, r0
 8112fc4:	2900      	cmp	r1, #0
 8112fc6:	d045      	beq.n	8113054 <_free_r+0x94>
 8112fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8112fcc:	1f0c      	subs	r4, r1, #4
 8112fce:	2b00      	cmp	r3, #0
 8112fd0:	bfb8      	it	lt
 8112fd2:	18e4      	addlt	r4, r4, r3
 8112fd4:	f000 fbfd 	bl	81137d2 <__malloc_lock>
 8112fd8:	4a1f      	ldr	r2, [pc, #124]	; (8113058 <_free_r+0x98>)
 8112fda:	6813      	ldr	r3, [r2, #0]
 8112fdc:	4610      	mov	r0, r2
 8112fde:	b933      	cbnz	r3, 8112fee <_free_r+0x2e>
 8112fe0:	6063      	str	r3, [r4, #4]
 8112fe2:	6014      	str	r4, [r2, #0]
 8112fe4:	4628      	mov	r0, r5
 8112fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8112fea:	f000 bbf3 	b.w	81137d4 <__malloc_unlock>
 8112fee:	42a3      	cmp	r3, r4
 8112ff0:	d90c      	bls.n	811300c <_free_r+0x4c>
 8112ff2:	6821      	ldr	r1, [r4, #0]
 8112ff4:	1862      	adds	r2, r4, r1
 8112ff6:	4293      	cmp	r3, r2
 8112ff8:	bf04      	itt	eq
 8112ffa:	681a      	ldreq	r2, [r3, #0]
 8112ffc:	685b      	ldreq	r3, [r3, #4]
 8112ffe:	6063      	str	r3, [r4, #4]
 8113000:	bf04      	itt	eq
 8113002:	1852      	addeq	r2, r2, r1
 8113004:	6022      	streq	r2, [r4, #0]
 8113006:	6004      	str	r4, [r0, #0]
 8113008:	e7ec      	b.n	8112fe4 <_free_r+0x24>
 811300a:	4613      	mov	r3, r2
 811300c:	685a      	ldr	r2, [r3, #4]
 811300e:	b10a      	cbz	r2, 8113014 <_free_r+0x54>
 8113010:	42a2      	cmp	r2, r4
 8113012:	d9fa      	bls.n	811300a <_free_r+0x4a>
 8113014:	6819      	ldr	r1, [r3, #0]
 8113016:	1858      	adds	r0, r3, r1
 8113018:	42a0      	cmp	r0, r4
 811301a:	d10b      	bne.n	8113034 <_free_r+0x74>
 811301c:	6820      	ldr	r0, [r4, #0]
 811301e:	4401      	add	r1, r0
 8113020:	1858      	adds	r0, r3, r1
 8113022:	4282      	cmp	r2, r0
 8113024:	6019      	str	r1, [r3, #0]
 8113026:	d1dd      	bne.n	8112fe4 <_free_r+0x24>
 8113028:	6810      	ldr	r0, [r2, #0]
 811302a:	6852      	ldr	r2, [r2, #4]
 811302c:	605a      	str	r2, [r3, #4]
 811302e:	4401      	add	r1, r0
 8113030:	6019      	str	r1, [r3, #0]
 8113032:	e7d7      	b.n	8112fe4 <_free_r+0x24>
 8113034:	d902      	bls.n	811303c <_free_r+0x7c>
 8113036:	230c      	movs	r3, #12
 8113038:	602b      	str	r3, [r5, #0]
 811303a:	e7d3      	b.n	8112fe4 <_free_r+0x24>
 811303c:	6820      	ldr	r0, [r4, #0]
 811303e:	1821      	adds	r1, r4, r0
 8113040:	428a      	cmp	r2, r1
 8113042:	bf04      	itt	eq
 8113044:	6811      	ldreq	r1, [r2, #0]
 8113046:	6852      	ldreq	r2, [r2, #4]
 8113048:	6062      	str	r2, [r4, #4]
 811304a:	bf04      	itt	eq
 811304c:	1809      	addeq	r1, r1, r0
 811304e:	6021      	streq	r1, [r4, #0]
 8113050:	605c      	str	r4, [r3, #4]
 8113052:	e7c7      	b.n	8112fe4 <_free_r+0x24>
 8113054:	bd38      	pop	{r3, r4, r5, pc}
 8113056:	bf00      	nop
 8113058:	10009998 	.word	0x10009998

0811305c <_malloc_r>:
 811305c:	b570      	push	{r4, r5, r6, lr}
 811305e:	1ccd      	adds	r5, r1, #3
 8113060:	f025 0503 	bic.w	r5, r5, #3
 8113064:	3508      	adds	r5, #8
 8113066:	2d0c      	cmp	r5, #12
 8113068:	bf38      	it	cc
 811306a:	250c      	movcc	r5, #12
 811306c:	2d00      	cmp	r5, #0
 811306e:	4606      	mov	r6, r0
 8113070:	db01      	blt.n	8113076 <_malloc_r+0x1a>
 8113072:	42a9      	cmp	r1, r5
 8113074:	d903      	bls.n	811307e <_malloc_r+0x22>
 8113076:	230c      	movs	r3, #12
 8113078:	6033      	str	r3, [r6, #0]
 811307a:	2000      	movs	r0, #0
 811307c:	bd70      	pop	{r4, r5, r6, pc}
 811307e:	f000 fba8 	bl	81137d2 <__malloc_lock>
 8113082:	4a21      	ldr	r2, [pc, #132]	; (8113108 <_malloc_r+0xac>)
 8113084:	6814      	ldr	r4, [r2, #0]
 8113086:	4621      	mov	r1, r4
 8113088:	b991      	cbnz	r1, 81130b0 <_malloc_r+0x54>
 811308a:	4c20      	ldr	r4, [pc, #128]	; (811310c <_malloc_r+0xb0>)
 811308c:	6823      	ldr	r3, [r4, #0]
 811308e:	b91b      	cbnz	r3, 8113098 <_malloc_r+0x3c>
 8113090:	4630      	mov	r0, r6
 8113092:	f000 facf 	bl	8113634 <_sbrk_r>
 8113096:	6020      	str	r0, [r4, #0]
 8113098:	4629      	mov	r1, r5
 811309a:	4630      	mov	r0, r6
 811309c:	f000 faca 	bl	8113634 <_sbrk_r>
 81130a0:	1c43      	adds	r3, r0, #1
 81130a2:	d124      	bne.n	81130ee <_malloc_r+0x92>
 81130a4:	230c      	movs	r3, #12
 81130a6:	6033      	str	r3, [r6, #0]
 81130a8:	4630      	mov	r0, r6
 81130aa:	f000 fb93 	bl	81137d4 <__malloc_unlock>
 81130ae:	e7e4      	b.n	811307a <_malloc_r+0x1e>
 81130b0:	680b      	ldr	r3, [r1, #0]
 81130b2:	1b5b      	subs	r3, r3, r5
 81130b4:	d418      	bmi.n	81130e8 <_malloc_r+0x8c>
 81130b6:	2b0b      	cmp	r3, #11
 81130b8:	d90f      	bls.n	81130da <_malloc_r+0x7e>
 81130ba:	600b      	str	r3, [r1, #0]
 81130bc:	50cd      	str	r5, [r1, r3]
 81130be:	18cc      	adds	r4, r1, r3
 81130c0:	4630      	mov	r0, r6
 81130c2:	f000 fb87 	bl	81137d4 <__malloc_unlock>
 81130c6:	f104 000b 	add.w	r0, r4, #11
 81130ca:	1d23      	adds	r3, r4, #4
 81130cc:	f020 0007 	bic.w	r0, r0, #7
 81130d0:	1ac3      	subs	r3, r0, r3
 81130d2:	d0d3      	beq.n	811307c <_malloc_r+0x20>
 81130d4:	425a      	negs	r2, r3
 81130d6:	50e2      	str	r2, [r4, r3]
 81130d8:	e7d0      	b.n	811307c <_malloc_r+0x20>
 81130da:	428c      	cmp	r4, r1
 81130dc:	684b      	ldr	r3, [r1, #4]
 81130de:	bf16      	itet	ne
 81130e0:	6063      	strne	r3, [r4, #4]
 81130e2:	6013      	streq	r3, [r2, #0]
 81130e4:	460c      	movne	r4, r1
 81130e6:	e7eb      	b.n	81130c0 <_malloc_r+0x64>
 81130e8:	460c      	mov	r4, r1
 81130ea:	6849      	ldr	r1, [r1, #4]
 81130ec:	e7cc      	b.n	8113088 <_malloc_r+0x2c>
 81130ee:	1cc4      	adds	r4, r0, #3
 81130f0:	f024 0403 	bic.w	r4, r4, #3
 81130f4:	42a0      	cmp	r0, r4
 81130f6:	d005      	beq.n	8113104 <_malloc_r+0xa8>
 81130f8:	1a21      	subs	r1, r4, r0
 81130fa:	4630      	mov	r0, r6
 81130fc:	f000 fa9a 	bl	8113634 <_sbrk_r>
 8113100:	3001      	adds	r0, #1
 8113102:	d0cf      	beq.n	81130a4 <_malloc_r+0x48>
 8113104:	6025      	str	r5, [r4, #0]
 8113106:	e7db      	b.n	81130c0 <_malloc_r+0x64>
 8113108:	10009998 	.word	0x10009998
 811310c:	1000999c 	.word	0x1000999c

08113110 <__ssputs_r>:
 8113110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8113114:	688e      	ldr	r6, [r1, #8]
 8113116:	429e      	cmp	r6, r3
 8113118:	4682      	mov	sl, r0
 811311a:	460c      	mov	r4, r1
 811311c:	4690      	mov	r8, r2
 811311e:	4699      	mov	r9, r3
 8113120:	d837      	bhi.n	8113192 <__ssputs_r+0x82>
 8113122:	898a      	ldrh	r2, [r1, #12]
 8113124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8113128:	d031      	beq.n	811318e <__ssputs_r+0x7e>
 811312a:	6825      	ldr	r5, [r4, #0]
 811312c:	6909      	ldr	r1, [r1, #16]
 811312e:	1a6f      	subs	r7, r5, r1
 8113130:	6965      	ldr	r5, [r4, #20]
 8113132:	2302      	movs	r3, #2
 8113134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8113138:	fb95 f5f3 	sdiv	r5, r5, r3
 811313c:	f109 0301 	add.w	r3, r9, #1
 8113140:	443b      	add	r3, r7
 8113142:	429d      	cmp	r5, r3
 8113144:	bf38      	it	cc
 8113146:	461d      	movcc	r5, r3
 8113148:	0553      	lsls	r3, r2, #21
 811314a:	d530      	bpl.n	81131ae <__ssputs_r+0x9e>
 811314c:	4629      	mov	r1, r5
 811314e:	f7ff ff85 	bl	811305c <_malloc_r>
 8113152:	4606      	mov	r6, r0
 8113154:	b950      	cbnz	r0, 811316c <__ssputs_r+0x5c>
 8113156:	230c      	movs	r3, #12
 8113158:	f8ca 3000 	str.w	r3, [sl]
 811315c:	89a3      	ldrh	r3, [r4, #12]
 811315e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8113162:	81a3      	strh	r3, [r4, #12]
 8113164:	f04f 30ff 	mov.w	r0, #4294967295
 8113168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811316c:	463a      	mov	r2, r7
 811316e:	6921      	ldr	r1, [r4, #16]
 8113170:	f7fd fcc8 	bl	8110b04 <memcpy>
 8113174:	89a3      	ldrh	r3, [r4, #12]
 8113176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 811317a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 811317e:	81a3      	strh	r3, [r4, #12]
 8113180:	6126      	str	r6, [r4, #16]
 8113182:	6165      	str	r5, [r4, #20]
 8113184:	443e      	add	r6, r7
 8113186:	1bed      	subs	r5, r5, r7
 8113188:	6026      	str	r6, [r4, #0]
 811318a:	60a5      	str	r5, [r4, #8]
 811318c:	464e      	mov	r6, r9
 811318e:	454e      	cmp	r6, r9
 8113190:	d900      	bls.n	8113194 <__ssputs_r+0x84>
 8113192:	464e      	mov	r6, r9
 8113194:	4632      	mov	r2, r6
 8113196:	4641      	mov	r1, r8
 8113198:	6820      	ldr	r0, [r4, #0]
 811319a:	f000 fb01 	bl	81137a0 <memmove>
 811319e:	68a3      	ldr	r3, [r4, #8]
 81131a0:	1b9b      	subs	r3, r3, r6
 81131a2:	60a3      	str	r3, [r4, #8]
 81131a4:	6823      	ldr	r3, [r4, #0]
 81131a6:	441e      	add	r6, r3
 81131a8:	6026      	str	r6, [r4, #0]
 81131aa:	2000      	movs	r0, #0
 81131ac:	e7dc      	b.n	8113168 <__ssputs_r+0x58>
 81131ae:	462a      	mov	r2, r5
 81131b0:	f000 fb11 	bl	81137d6 <_realloc_r>
 81131b4:	4606      	mov	r6, r0
 81131b6:	2800      	cmp	r0, #0
 81131b8:	d1e2      	bne.n	8113180 <__ssputs_r+0x70>
 81131ba:	6921      	ldr	r1, [r4, #16]
 81131bc:	4650      	mov	r0, sl
 81131be:	f7ff feff 	bl	8112fc0 <_free_r>
 81131c2:	e7c8      	b.n	8113156 <__ssputs_r+0x46>

081131c4 <_svfiprintf_r>:
 81131c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81131c8:	461d      	mov	r5, r3
 81131ca:	898b      	ldrh	r3, [r1, #12]
 81131cc:	061f      	lsls	r7, r3, #24
 81131ce:	b09d      	sub	sp, #116	; 0x74
 81131d0:	4680      	mov	r8, r0
 81131d2:	460c      	mov	r4, r1
 81131d4:	4616      	mov	r6, r2
 81131d6:	d50f      	bpl.n	81131f8 <_svfiprintf_r+0x34>
 81131d8:	690b      	ldr	r3, [r1, #16]
 81131da:	b96b      	cbnz	r3, 81131f8 <_svfiprintf_r+0x34>
 81131dc:	2140      	movs	r1, #64	; 0x40
 81131de:	f7ff ff3d 	bl	811305c <_malloc_r>
 81131e2:	6020      	str	r0, [r4, #0]
 81131e4:	6120      	str	r0, [r4, #16]
 81131e6:	b928      	cbnz	r0, 81131f4 <_svfiprintf_r+0x30>
 81131e8:	230c      	movs	r3, #12
 81131ea:	f8c8 3000 	str.w	r3, [r8]
 81131ee:	f04f 30ff 	mov.w	r0, #4294967295
 81131f2:	e0c8      	b.n	8113386 <_svfiprintf_r+0x1c2>
 81131f4:	2340      	movs	r3, #64	; 0x40
 81131f6:	6163      	str	r3, [r4, #20]
 81131f8:	2300      	movs	r3, #0
 81131fa:	9309      	str	r3, [sp, #36]	; 0x24
 81131fc:	2320      	movs	r3, #32
 81131fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8113202:	2330      	movs	r3, #48	; 0x30
 8113204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8113208:	9503      	str	r5, [sp, #12]
 811320a:	f04f 0b01 	mov.w	fp, #1
 811320e:	4637      	mov	r7, r6
 8113210:	463d      	mov	r5, r7
 8113212:	f815 3b01 	ldrb.w	r3, [r5], #1
 8113216:	b10b      	cbz	r3, 811321c <_svfiprintf_r+0x58>
 8113218:	2b25      	cmp	r3, #37	; 0x25
 811321a:	d13e      	bne.n	811329a <_svfiprintf_r+0xd6>
 811321c:	ebb7 0a06 	subs.w	sl, r7, r6
 8113220:	d00b      	beq.n	811323a <_svfiprintf_r+0x76>
 8113222:	4653      	mov	r3, sl
 8113224:	4632      	mov	r2, r6
 8113226:	4621      	mov	r1, r4
 8113228:	4640      	mov	r0, r8
 811322a:	f7ff ff71 	bl	8113110 <__ssputs_r>
 811322e:	3001      	adds	r0, #1
 8113230:	f000 80a4 	beq.w	811337c <_svfiprintf_r+0x1b8>
 8113234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8113236:	4453      	add	r3, sl
 8113238:	9309      	str	r3, [sp, #36]	; 0x24
 811323a:	783b      	ldrb	r3, [r7, #0]
 811323c:	2b00      	cmp	r3, #0
 811323e:	f000 809d 	beq.w	811337c <_svfiprintf_r+0x1b8>
 8113242:	2300      	movs	r3, #0
 8113244:	f04f 32ff 	mov.w	r2, #4294967295
 8113248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811324c:	9304      	str	r3, [sp, #16]
 811324e:	9307      	str	r3, [sp, #28]
 8113250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8113254:	931a      	str	r3, [sp, #104]	; 0x68
 8113256:	462f      	mov	r7, r5
 8113258:	2205      	movs	r2, #5
 811325a:	f817 1b01 	ldrb.w	r1, [r7], #1
 811325e:	4850      	ldr	r0, [pc, #320]	; (81133a0 <_svfiprintf_r+0x1dc>)
 8113260:	f7ed f856 	bl	8100310 <memchr>
 8113264:	9b04      	ldr	r3, [sp, #16]
 8113266:	b9d0      	cbnz	r0, 811329e <_svfiprintf_r+0xda>
 8113268:	06d9      	lsls	r1, r3, #27
 811326a:	bf44      	itt	mi
 811326c:	2220      	movmi	r2, #32
 811326e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8113272:	071a      	lsls	r2, r3, #28
 8113274:	bf44      	itt	mi
 8113276:	222b      	movmi	r2, #43	; 0x2b
 8113278:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 811327c:	782a      	ldrb	r2, [r5, #0]
 811327e:	2a2a      	cmp	r2, #42	; 0x2a
 8113280:	d015      	beq.n	81132ae <_svfiprintf_r+0xea>
 8113282:	9a07      	ldr	r2, [sp, #28]
 8113284:	462f      	mov	r7, r5
 8113286:	2000      	movs	r0, #0
 8113288:	250a      	movs	r5, #10
 811328a:	4639      	mov	r1, r7
 811328c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8113290:	3b30      	subs	r3, #48	; 0x30
 8113292:	2b09      	cmp	r3, #9
 8113294:	d94d      	bls.n	8113332 <_svfiprintf_r+0x16e>
 8113296:	b1b8      	cbz	r0, 81132c8 <_svfiprintf_r+0x104>
 8113298:	e00f      	b.n	81132ba <_svfiprintf_r+0xf6>
 811329a:	462f      	mov	r7, r5
 811329c:	e7b8      	b.n	8113210 <_svfiprintf_r+0x4c>
 811329e:	4a40      	ldr	r2, [pc, #256]	; (81133a0 <_svfiprintf_r+0x1dc>)
 81132a0:	1a80      	subs	r0, r0, r2
 81132a2:	fa0b f000 	lsl.w	r0, fp, r0
 81132a6:	4318      	orrs	r0, r3
 81132a8:	9004      	str	r0, [sp, #16]
 81132aa:	463d      	mov	r5, r7
 81132ac:	e7d3      	b.n	8113256 <_svfiprintf_r+0x92>
 81132ae:	9a03      	ldr	r2, [sp, #12]
 81132b0:	1d11      	adds	r1, r2, #4
 81132b2:	6812      	ldr	r2, [r2, #0]
 81132b4:	9103      	str	r1, [sp, #12]
 81132b6:	2a00      	cmp	r2, #0
 81132b8:	db01      	blt.n	81132be <_svfiprintf_r+0xfa>
 81132ba:	9207      	str	r2, [sp, #28]
 81132bc:	e004      	b.n	81132c8 <_svfiprintf_r+0x104>
 81132be:	4252      	negs	r2, r2
 81132c0:	f043 0302 	orr.w	r3, r3, #2
 81132c4:	9207      	str	r2, [sp, #28]
 81132c6:	9304      	str	r3, [sp, #16]
 81132c8:	783b      	ldrb	r3, [r7, #0]
 81132ca:	2b2e      	cmp	r3, #46	; 0x2e
 81132cc:	d10c      	bne.n	81132e8 <_svfiprintf_r+0x124>
 81132ce:	787b      	ldrb	r3, [r7, #1]
 81132d0:	2b2a      	cmp	r3, #42	; 0x2a
 81132d2:	d133      	bne.n	811333c <_svfiprintf_r+0x178>
 81132d4:	9b03      	ldr	r3, [sp, #12]
 81132d6:	1d1a      	adds	r2, r3, #4
 81132d8:	681b      	ldr	r3, [r3, #0]
 81132da:	9203      	str	r2, [sp, #12]
 81132dc:	2b00      	cmp	r3, #0
 81132de:	bfb8      	it	lt
 81132e0:	f04f 33ff 	movlt.w	r3, #4294967295
 81132e4:	3702      	adds	r7, #2
 81132e6:	9305      	str	r3, [sp, #20]
 81132e8:	4d2e      	ldr	r5, [pc, #184]	; (81133a4 <_svfiprintf_r+0x1e0>)
 81132ea:	7839      	ldrb	r1, [r7, #0]
 81132ec:	2203      	movs	r2, #3
 81132ee:	4628      	mov	r0, r5
 81132f0:	f7ed f80e 	bl	8100310 <memchr>
 81132f4:	b138      	cbz	r0, 8113306 <_svfiprintf_r+0x142>
 81132f6:	2340      	movs	r3, #64	; 0x40
 81132f8:	1b40      	subs	r0, r0, r5
 81132fa:	fa03 f000 	lsl.w	r0, r3, r0
 81132fe:	9b04      	ldr	r3, [sp, #16]
 8113300:	4303      	orrs	r3, r0
 8113302:	3701      	adds	r7, #1
 8113304:	9304      	str	r3, [sp, #16]
 8113306:	7839      	ldrb	r1, [r7, #0]
 8113308:	4827      	ldr	r0, [pc, #156]	; (81133a8 <_svfiprintf_r+0x1e4>)
 811330a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 811330e:	2206      	movs	r2, #6
 8113310:	1c7e      	adds	r6, r7, #1
 8113312:	f7ec fffd 	bl	8100310 <memchr>
 8113316:	2800      	cmp	r0, #0
 8113318:	d038      	beq.n	811338c <_svfiprintf_r+0x1c8>
 811331a:	4b24      	ldr	r3, [pc, #144]	; (81133ac <_svfiprintf_r+0x1e8>)
 811331c:	bb13      	cbnz	r3, 8113364 <_svfiprintf_r+0x1a0>
 811331e:	9b03      	ldr	r3, [sp, #12]
 8113320:	3307      	adds	r3, #7
 8113322:	f023 0307 	bic.w	r3, r3, #7
 8113326:	3308      	adds	r3, #8
 8113328:	9303      	str	r3, [sp, #12]
 811332a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811332c:	444b      	add	r3, r9
 811332e:	9309      	str	r3, [sp, #36]	; 0x24
 8113330:	e76d      	b.n	811320e <_svfiprintf_r+0x4a>
 8113332:	fb05 3202 	mla	r2, r5, r2, r3
 8113336:	2001      	movs	r0, #1
 8113338:	460f      	mov	r7, r1
 811333a:	e7a6      	b.n	811328a <_svfiprintf_r+0xc6>
 811333c:	2300      	movs	r3, #0
 811333e:	3701      	adds	r7, #1
 8113340:	9305      	str	r3, [sp, #20]
 8113342:	4619      	mov	r1, r3
 8113344:	250a      	movs	r5, #10
 8113346:	4638      	mov	r0, r7
 8113348:	f810 2b01 	ldrb.w	r2, [r0], #1
 811334c:	3a30      	subs	r2, #48	; 0x30
 811334e:	2a09      	cmp	r2, #9
 8113350:	d903      	bls.n	811335a <_svfiprintf_r+0x196>
 8113352:	2b00      	cmp	r3, #0
 8113354:	d0c8      	beq.n	81132e8 <_svfiprintf_r+0x124>
 8113356:	9105      	str	r1, [sp, #20]
 8113358:	e7c6      	b.n	81132e8 <_svfiprintf_r+0x124>
 811335a:	fb05 2101 	mla	r1, r5, r1, r2
 811335e:	2301      	movs	r3, #1
 8113360:	4607      	mov	r7, r0
 8113362:	e7f0      	b.n	8113346 <_svfiprintf_r+0x182>
 8113364:	ab03      	add	r3, sp, #12
 8113366:	9300      	str	r3, [sp, #0]
 8113368:	4622      	mov	r2, r4
 811336a:	4b11      	ldr	r3, [pc, #68]	; (81133b0 <_svfiprintf_r+0x1ec>)
 811336c:	a904      	add	r1, sp, #16
 811336e:	4640      	mov	r0, r8
 8113370:	f7fd fc70 	bl	8110c54 <_printf_float>
 8113374:	f1b0 3fff 	cmp.w	r0, #4294967295
 8113378:	4681      	mov	r9, r0
 811337a:	d1d6      	bne.n	811332a <_svfiprintf_r+0x166>
 811337c:	89a3      	ldrh	r3, [r4, #12]
 811337e:	065b      	lsls	r3, r3, #25
 8113380:	f53f af35 	bmi.w	81131ee <_svfiprintf_r+0x2a>
 8113384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8113386:	b01d      	add	sp, #116	; 0x74
 8113388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811338c:	ab03      	add	r3, sp, #12
 811338e:	9300      	str	r3, [sp, #0]
 8113390:	4622      	mov	r2, r4
 8113392:	4b07      	ldr	r3, [pc, #28]	; (81133b0 <_svfiprintf_r+0x1ec>)
 8113394:	a904      	add	r1, sp, #16
 8113396:	4640      	mov	r0, r8
 8113398:	f7fd ff12 	bl	81111c0 <_printf_i>
 811339c:	e7ea      	b.n	8113374 <_svfiprintf_r+0x1b0>
 811339e:	bf00      	nop
 81133a0:	08114794 	.word	0x08114794
 81133a4:	0811479a 	.word	0x0811479a
 81133a8:	0811479e 	.word	0x0811479e
 81133ac:	08110c55 	.word	0x08110c55
 81133b0:	08113111 	.word	0x08113111

081133b4 <__sfputc_r>:
 81133b4:	6893      	ldr	r3, [r2, #8]
 81133b6:	3b01      	subs	r3, #1
 81133b8:	2b00      	cmp	r3, #0
 81133ba:	b410      	push	{r4}
 81133bc:	6093      	str	r3, [r2, #8]
 81133be:	da08      	bge.n	81133d2 <__sfputc_r+0x1e>
 81133c0:	6994      	ldr	r4, [r2, #24]
 81133c2:	42a3      	cmp	r3, r4
 81133c4:	db01      	blt.n	81133ca <__sfputc_r+0x16>
 81133c6:	290a      	cmp	r1, #10
 81133c8:	d103      	bne.n	81133d2 <__sfputc_r+0x1e>
 81133ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 81133ce:	f7fe b99b 	b.w	8111708 <__swbuf_r>
 81133d2:	6813      	ldr	r3, [r2, #0]
 81133d4:	1c58      	adds	r0, r3, #1
 81133d6:	6010      	str	r0, [r2, #0]
 81133d8:	7019      	strb	r1, [r3, #0]
 81133da:	4608      	mov	r0, r1
 81133dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 81133e0:	4770      	bx	lr

081133e2 <__sfputs_r>:
 81133e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81133e4:	4606      	mov	r6, r0
 81133e6:	460f      	mov	r7, r1
 81133e8:	4614      	mov	r4, r2
 81133ea:	18d5      	adds	r5, r2, r3
 81133ec:	42ac      	cmp	r4, r5
 81133ee:	d101      	bne.n	81133f4 <__sfputs_r+0x12>
 81133f0:	2000      	movs	r0, #0
 81133f2:	e007      	b.n	8113404 <__sfputs_r+0x22>
 81133f4:	463a      	mov	r2, r7
 81133f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 81133fa:	4630      	mov	r0, r6
 81133fc:	f7ff ffda 	bl	81133b4 <__sfputc_r>
 8113400:	1c43      	adds	r3, r0, #1
 8113402:	d1f3      	bne.n	81133ec <__sfputs_r+0xa>
 8113404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08113408 <_vfiprintf_r>:
 8113408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811340c:	460c      	mov	r4, r1
 811340e:	b09d      	sub	sp, #116	; 0x74
 8113410:	4617      	mov	r7, r2
 8113412:	461d      	mov	r5, r3
 8113414:	4606      	mov	r6, r0
 8113416:	b118      	cbz	r0, 8113420 <_vfiprintf_r+0x18>
 8113418:	6983      	ldr	r3, [r0, #24]
 811341a:	b90b      	cbnz	r3, 8113420 <_vfiprintf_r+0x18>
 811341c:	f7ff f9cc 	bl	81127b8 <__sinit>
 8113420:	4b7c      	ldr	r3, [pc, #496]	; (8113614 <_vfiprintf_r+0x20c>)
 8113422:	429c      	cmp	r4, r3
 8113424:	d158      	bne.n	81134d8 <_vfiprintf_r+0xd0>
 8113426:	6874      	ldr	r4, [r6, #4]
 8113428:	89a3      	ldrh	r3, [r4, #12]
 811342a:	0718      	lsls	r0, r3, #28
 811342c:	d55e      	bpl.n	81134ec <_vfiprintf_r+0xe4>
 811342e:	6923      	ldr	r3, [r4, #16]
 8113430:	2b00      	cmp	r3, #0
 8113432:	d05b      	beq.n	81134ec <_vfiprintf_r+0xe4>
 8113434:	2300      	movs	r3, #0
 8113436:	9309      	str	r3, [sp, #36]	; 0x24
 8113438:	2320      	movs	r3, #32
 811343a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 811343e:	2330      	movs	r3, #48	; 0x30
 8113440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8113444:	9503      	str	r5, [sp, #12]
 8113446:	f04f 0b01 	mov.w	fp, #1
 811344a:	46b8      	mov	r8, r7
 811344c:	4645      	mov	r5, r8
 811344e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8113452:	b10b      	cbz	r3, 8113458 <_vfiprintf_r+0x50>
 8113454:	2b25      	cmp	r3, #37	; 0x25
 8113456:	d154      	bne.n	8113502 <_vfiprintf_r+0xfa>
 8113458:	ebb8 0a07 	subs.w	sl, r8, r7
 811345c:	d00b      	beq.n	8113476 <_vfiprintf_r+0x6e>
 811345e:	4653      	mov	r3, sl
 8113460:	463a      	mov	r2, r7
 8113462:	4621      	mov	r1, r4
 8113464:	4630      	mov	r0, r6
 8113466:	f7ff ffbc 	bl	81133e2 <__sfputs_r>
 811346a:	3001      	adds	r0, #1
 811346c:	f000 80c2 	beq.w	81135f4 <_vfiprintf_r+0x1ec>
 8113470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8113472:	4453      	add	r3, sl
 8113474:	9309      	str	r3, [sp, #36]	; 0x24
 8113476:	f898 3000 	ldrb.w	r3, [r8]
 811347a:	2b00      	cmp	r3, #0
 811347c:	f000 80ba 	beq.w	81135f4 <_vfiprintf_r+0x1ec>
 8113480:	2300      	movs	r3, #0
 8113482:	f04f 32ff 	mov.w	r2, #4294967295
 8113486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811348a:	9304      	str	r3, [sp, #16]
 811348c:	9307      	str	r3, [sp, #28]
 811348e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8113492:	931a      	str	r3, [sp, #104]	; 0x68
 8113494:	46a8      	mov	r8, r5
 8113496:	2205      	movs	r2, #5
 8113498:	f818 1b01 	ldrb.w	r1, [r8], #1
 811349c:	485e      	ldr	r0, [pc, #376]	; (8113618 <_vfiprintf_r+0x210>)
 811349e:	f7ec ff37 	bl	8100310 <memchr>
 81134a2:	9b04      	ldr	r3, [sp, #16]
 81134a4:	bb78      	cbnz	r0, 8113506 <_vfiprintf_r+0xfe>
 81134a6:	06d9      	lsls	r1, r3, #27
 81134a8:	bf44      	itt	mi
 81134aa:	2220      	movmi	r2, #32
 81134ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81134b0:	071a      	lsls	r2, r3, #28
 81134b2:	bf44      	itt	mi
 81134b4:	222b      	movmi	r2, #43	; 0x2b
 81134b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81134ba:	782a      	ldrb	r2, [r5, #0]
 81134bc:	2a2a      	cmp	r2, #42	; 0x2a
 81134be:	d02a      	beq.n	8113516 <_vfiprintf_r+0x10e>
 81134c0:	9a07      	ldr	r2, [sp, #28]
 81134c2:	46a8      	mov	r8, r5
 81134c4:	2000      	movs	r0, #0
 81134c6:	250a      	movs	r5, #10
 81134c8:	4641      	mov	r1, r8
 81134ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 81134ce:	3b30      	subs	r3, #48	; 0x30
 81134d0:	2b09      	cmp	r3, #9
 81134d2:	d969      	bls.n	81135a8 <_vfiprintf_r+0x1a0>
 81134d4:	b360      	cbz	r0, 8113530 <_vfiprintf_r+0x128>
 81134d6:	e024      	b.n	8113522 <_vfiprintf_r+0x11a>
 81134d8:	4b50      	ldr	r3, [pc, #320]	; (811361c <_vfiprintf_r+0x214>)
 81134da:	429c      	cmp	r4, r3
 81134dc:	d101      	bne.n	81134e2 <_vfiprintf_r+0xda>
 81134de:	68b4      	ldr	r4, [r6, #8]
 81134e0:	e7a2      	b.n	8113428 <_vfiprintf_r+0x20>
 81134e2:	4b4f      	ldr	r3, [pc, #316]	; (8113620 <_vfiprintf_r+0x218>)
 81134e4:	429c      	cmp	r4, r3
 81134e6:	bf08      	it	eq
 81134e8:	68f4      	ldreq	r4, [r6, #12]
 81134ea:	e79d      	b.n	8113428 <_vfiprintf_r+0x20>
 81134ec:	4621      	mov	r1, r4
 81134ee:	4630      	mov	r0, r6
 81134f0:	f7fe f95c 	bl	81117ac <__swsetup_r>
 81134f4:	2800      	cmp	r0, #0
 81134f6:	d09d      	beq.n	8113434 <_vfiprintf_r+0x2c>
 81134f8:	f04f 30ff 	mov.w	r0, #4294967295
 81134fc:	b01d      	add	sp, #116	; 0x74
 81134fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113502:	46a8      	mov	r8, r5
 8113504:	e7a2      	b.n	811344c <_vfiprintf_r+0x44>
 8113506:	4a44      	ldr	r2, [pc, #272]	; (8113618 <_vfiprintf_r+0x210>)
 8113508:	1a80      	subs	r0, r0, r2
 811350a:	fa0b f000 	lsl.w	r0, fp, r0
 811350e:	4318      	orrs	r0, r3
 8113510:	9004      	str	r0, [sp, #16]
 8113512:	4645      	mov	r5, r8
 8113514:	e7be      	b.n	8113494 <_vfiprintf_r+0x8c>
 8113516:	9a03      	ldr	r2, [sp, #12]
 8113518:	1d11      	adds	r1, r2, #4
 811351a:	6812      	ldr	r2, [r2, #0]
 811351c:	9103      	str	r1, [sp, #12]
 811351e:	2a00      	cmp	r2, #0
 8113520:	db01      	blt.n	8113526 <_vfiprintf_r+0x11e>
 8113522:	9207      	str	r2, [sp, #28]
 8113524:	e004      	b.n	8113530 <_vfiprintf_r+0x128>
 8113526:	4252      	negs	r2, r2
 8113528:	f043 0302 	orr.w	r3, r3, #2
 811352c:	9207      	str	r2, [sp, #28]
 811352e:	9304      	str	r3, [sp, #16]
 8113530:	f898 3000 	ldrb.w	r3, [r8]
 8113534:	2b2e      	cmp	r3, #46	; 0x2e
 8113536:	d10e      	bne.n	8113556 <_vfiprintf_r+0x14e>
 8113538:	f898 3001 	ldrb.w	r3, [r8, #1]
 811353c:	2b2a      	cmp	r3, #42	; 0x2a
 811353e:	d138      	bne.n	81135b2 <_vfiprintf_r+0x1aa>
 8113540:	9b03      	ldr	r3, [sp, #12]
 8113542:	1d1a      	adds	r2, r3, #4
 8113544:	681b      	ldr	r3, [r3, #0]
 8113546:	9203      	str	r2, [sp, #12]
 8113548:	2b00      	cmp	r3, #0
 811354a:	bfb8      	it	lt
 811354c:	f04f 33ff 	movlt.w	r3, #4294967295
 8113550:	f108 0802 	add.w	r8, r8, #2
 8113554:	9305      	str	r3, [sp, #20]
 8113556:	4d33      	ldr	r5, [pc, #204]	; (8113624 <_vfiprintf_r+0x21c>)
 8113558:	f898 1000 	ldrb.w	r1, [r8]
 811355c:	2203      	movs	r2, #3
 811355e:	4628      	mov	r0, r5
 8113560:	f7ec fed6 	bl	8100310 <memchr>
 8113564:	b140      	cbz	r0, 8113578 <_vfiprintf_r+0x170>
 8113566:	2340      	movs	r3, #64	; 0x40
 8113568:	1b40      	subs	r0, r0, r5
 811356a:	fa03 f000 	lsl.w	r0, r3, r0
 811356e:	9b04      	ldr	r3, [sp, #16]
 8113570:	4303      	orrs	r3, r0
 8113572:	f108 0801 	add.w	r8, r8, #1
 8113576:	9304      	str	r3, [sp, #16]
 8113578:	f898 1000 	ldrb.w	r1, [r8]
 811357c:	482a      	ldr	r0, [pc, #168]	; (8113628 <_vfiprintf_r+0x220>)
 811357e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8113582:	2206      	movs	r2, #6
 8113584:	f108 0701 	add.w	r7, r8, #1
 8113588:	f7ec fec2 	bl	8100310 <memchr>
 811358c:	2800      	cmp	r0, #0
 811358e:	d037      	beq.n	8113600 <_vfiprintf_r+0x1f8>
 8113590:	4b26      	ldr	r3, [pc, #152]	; (811362c <_vfiprintf_r+0x224>)
 8113592:	bb1b      	cbnz	r3, 81135dc <_vfiprintf_r+0x1d4>
 8113594:	9b03      	ldr	r3, [sp, #12]
 8113596:	3307      	adds	r3, #7
 8113598:	f023 0307 	bic.w	r3, r3, #7
 811359c:	3308      	adds	r3, #8
 811359e:	9303      	str	r3, [sp, #12]
 81135a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81135a2:	444b      	add	r3, r9
 81135a4:	9309      	str	r3, [sp, #36]	; 0x24
 81135a6:	e750      	b.n	811344a <_vfiprintf_r+0x42>
 81135a8:	fb05 3202 	mla	r2, r5, r2, r3
 81135ac:	2001      	movs	r0, #1
 81135ae:	4688      	mov	r8, r1
 81135b0:	e78a      	b.n	81134c8 <_vfiprintf_r+0xc0>
 81135b2:	2300      	movs	r3, #0
 81135b4:	f108 0801 	add.w	r8, r8, #1
 81135b8:	9305      	str	r3, [sp, #20]
 81135ba:	4619      	mov	r1, r3
 81135bc:	250a      	movs	r5, #10
 81135be:	4640      	mov	r0, r8
 81135c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81135c4:	3a30      	subs	r2, #48	; 0x30
 81135c6:	2a09      	cmp	r2, #9
 81135c8:	d903      	bls.n	81135d2 <_vfiprintf_r+0x1ca>
 81135ca:	2b00      	cmp	r3, #0
 81135cc:	d0c3      	beq.n	8113556 <_vfiprintf_r+0x14e>
 81135ce:	9105      	str	r1, [sp, #20]
 81135d0:	e7c1      	b.n	8113556 <_vfiprintf_r+0x14e>
 81135d2:	fb05 2101 	mla	r1, r5, r1, r2
 81135d6:	2301      	movs	r3, #1
 81135d8:	4680      	mov	r8, r0
 81135da:	e7f0      	b.n	81135be <_vfiprintf_r+0x1b6>
 81135dc:	ab03      	add	r3, sp, #12
 81135de:	9300      	str	r3, [sp, #0]
 81135e0:	4622      	mov	r2, r4
 81135e2:	4b13      	ldr	r3, [pc, #76]	; (8113630 <_vfiprintf_r+0x228>)
 81135e4:	a904      	add	r1, sp, #16
 81135e6:	4630      	mov	r0, r6
 81135e8:	f7fd fb34 	bl	8110c54 <_printf_float>
 81135ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 81135f0:	4681      	mov	r9, r0
 81135f2:	d1d5      	bne.n	81135a0 <_vfiprintf_r+0x198>
 81135f4:	89a3      	ldrh	r3, [r4, #12]
 81135f6:	065b      	lsls	r3, r3, #25
 81135f8:	f53f af7e 	bmi.w	81134f8 <_vfiprintf_r+0xf0>
 81135fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 81135fe:	e77d      	b.n	81134fc <_vfiprintf_r+0xf4>
 8113600:	ab03      	add	r3, sp, #12
 8113602:	9300      	str	r3, [sp, #0]
 8113604:	4622      	mov	r2, r4
 8113606:	4b0a      	ldr	r3, [pc, #40]	; (8113630 <_vfiprintf_r+0x228>)
 8113608:	a904      	add	r1, sp, #16
 811360a:	4630      	mov	r0, r6
 811360c:	f7fd fdd8 	bl	81111c0 <_printf_i>
 8113610:	e7ec      	b.n	81135ec <_vfiprintf_r+0x1e4>
 8113612:	bf00      	nop
 8113614:	08114648 	.word	0x08114648
 8113618:	08114794 	.word	0x08114794
 811361c:	08114668 	.word	0x08114668
 8113620:	08114628 	.word	0x08114628
 8113624:	0811479a 	.word	0x0811479a
 8113628:	0811479e 	.word	0x0811479e
 811362c:	08110c55 	.word	0x08110c55
 8113630:	081133e3 	.word	0x081133e3

08113634 <_sbrk_r>:
 8113634:	b538      	push	{r3, r4, r5, lr}
 8113636:	4c06      	ldr	r4, [pc, #24]	; (8113650 <_sbrk_r+0x1c>)
 8113638:	2300      	movs	r3, #0
 811363a:	4605      	mov	r5, r0
 811363c:	4608      	mov	r0, r1
 811363e:	6023      	str	r3, [r4, #0]
 8113640:	f7ee fc5c 	bl	8101efc <_sbrk>
 8113644:	1c43      	adds	r3, r0, #1
 8113646:	d102      	bne.n	811364e <_sbrk_r+0x1a>
 8113648:	6823      	ldr	r3, [r4, #0]
 811364a:	b103      	cbz	r3, 811364e <_sbrk_r+0x1a>
 811364c:	602b      	str	r3, [r5, #0]
 811364e:	bd38      	pop	{r3, r4, r5, pc}
 8113650:	1000a36c 	.word	0x1000a36c

08113654 <__sread>:
 8113654:	b510      	push	{r4, lr}
 8113656:	460c      	mov	r4, r1
 8113658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811365c:	f000 f8e2 	bl	8113824 <_read_r>
 8113660:	2800      	cmp	r0, #0
 8113662:	bfab      	itete	ge
 8113664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8113666:	89a3      	ldrhlt	r3, [r4, #12]
 8113668:	181b      	addge	r3, r3, r0
 811366a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 811366e:	bfac      	ite	ge
 8113670:	6563      	strge	r3, [r4, #84]	; 0x54
 8113672:	81a3      	strhlt	r3, [r4, #12]
 8113674:	bd10      	pop	{r4, pc}

08113676 <__swrite>:
 8113676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811367a:	461f      	mov	r7, r3
 811367c:	898b      	ldrh	r3, [r1, #12]
 811367e:	05db      	lsls	r3, r3, #23
 8113680:	4605      	mov	r5, r0
 8113682:	460c      	mov	r4, r1
 8113684:	4616      	mov	r6, r2
 8113686:	d505      	bpl.n	8113694 <__swrite+0x1e>
 8113688:	2302      	movs	r3, #2
 811368a:	2200      	movs	r2, #0
 811368c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113690:	f000 f874 	bl	811377c <_lseek_r>
 8113694:	89a3      	ldrh	r3, [r4, #12]
 8113696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811369a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 811369e:	81a3      	strh	r3, [r4, #12]
 81136a0:	4632      	mov	r2, r6
 81136a2:	463b      	mov	r3, r7
 81136a4:	4628      	mov	r0, r5
 81136a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81136aa:	f000 b823 	b.w	81136f4 <_write_r>

081136ae <__sseek>:
 81136ae:	b510      	push	{r4, lr}
 81136b0:	460c      	mov	r4, r1
 81136b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81136b6:	f000 f861 	bl	811377c <_lseek_r>
 81136ba:	1c43      	adds	r3, r0, #1
 81136bc:	89a3      	ldrh	r3, [r4, #12]
 81136be:	bf15      	itete	ne
 81136c0:	6560      	strne	r0, [r4, #84]	; 0x54
 81136c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 81136c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 81136ca:	81a3      	strheq	r3, [r4, #12]
 81136cc:	bf18      	it	ne
 81136ce:	81a3      	strhne	r3, [r4, #12]
 81136d0:	bd10      	pop	{r4, pc}

081136d2 <__sclose>:
 81136d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81136d6:	f000 b81f 	b.w	8113718 <_close_r>

081136da <__ascii_wctomb>:
 81136da:	b149      	cbz	r1, 81136f0 <__ascii_wctomb+0x16>
 81136dc:	2aff      	cmp	r2, #255	; 0xff
 81136de:	bf85      	ittet	hi
 81136e0:	238a      	movhi	r3, #138	; 0x8a
 81136e2:	6003      	strhi	r3, [r0, #0]
 81136e4:	700a      	strbls	r2, [r1, #0]
 81136e6:	f04f 30ff 	movhi.w	r0, #4294967295
 81136ea:	bf98      	it	ls
 81136ec:	2001      	movls	r0, #1
 81136ee:	4770      	bx	lr
 81136f0:	4608      	mov	r0, r1
 81136f2:	4770      	bx	lr

081136f4 <_write_r>:
 81136f4:	b538      	push	{r3, r4, r5, lr}
 81136f6:	4c07      	ldr	r4, [pc, #28]	; (8113714 <_write_r+0x20>)
 81136f8:	4605      	mov	r5, r0
 81136fa:	4608      	mov	r0, r1
 81136fc:	4611      	mov	r1, r2
 81136fe:	2200      	movs	r2, #0
 8113700:	6022      	str	r2, [r4, #0]
 8113702:	461a      	mov	r2, r3
 8113704:	f7ee fba9 	bl	8101e5a <_write>
 8113708:	1c43      	adds	r3, r0, #1
 811370a:	d102      	bne.n	8113712 <_write_r+0x1e>
 811370c:	6823      	ldr	r3, [r4, #0]
 811370e:	b103      	cbz	r3, 8113712 <_write_r+0x1e>
 8113710:	602b      	str	r3, [r5, #0]
 8113712:	bd38      	pop	{r3, r4, r5, pc}
 8113714:	1000a36c 	.word	0x1000a36c

08113718 <_close_r>:
 8113718:	b538      	push	{r3, r4, r5, lr}
 811371a:	4c06      	ldr	r4, [pc, #24]	; (8113734 <_close_r+0x1c>)
 811371c:	2300      	movs	r3, #0
 811371e:	4605      	mov	r5, r0
 8113720:	4608      	mov	r0, r1
 8113722:	6023      	str	r3, [r4, #0]
 8113724:	f7ee fbb5 	bl	8101e92 <_close>
 8113728:	1c43      	adds	r3, r0, #1
 811372a:	d102      	bne.n	8113732 <_close_r+0x1a>
 811372c:	6823      	ldr	r3, [r4, #0]
 811372e:	b103      	cbz	r3, 8113732 <_close_r+0x1a>
 8113730:	602b      	str	r3, [r5, #0]
 8113732:	bd38      	pop	{r3, r4, r5, pc}
 8113734:	1000a36c 	.word	0x1000a36c

08113738 <_fstat_r>:
 8113738:	b538      	push	{r3, r4, r5, lr}
 811373a:	4c07      	ldr	r4, [pc, #28]	; (8113758 <_fstat_r+0x20>)
 811373c:	2300      	movs	r3, #0
 811373e:	4605      	mov	r5, r0
 8113740:	4608      	mov	r0, r1
 8113742:	4611      	mov	r1, r2
 8113744:	6023      	str	r3, [r4, #0]
 8113746:	f7ee fbb0 	bl	8101eaa <_fstat>
 811374a:	1c43      	adds	r3, r0, #1
 811374c:	d102      	bne.n	8113754 <_fstat_r+0x1c>
 811374e:	6823      	ldr	r3, [r4, #0]
 8113750:	b103      	cbz	r3, 8113754 <_fstat_r+0x1c>
 8113752:	602b      	str	r3, [r5, #0]
 8113754:	bd38      	pop	{r3, r4, r5, pc}
 8113756:	bf00      	nop
 8113758:	1000a36c 	.word	0x1000a36c

0811375c <_isatty_r>:
 811375c:	b538      	push	{r3, r4, r5, lr}
 811375e:	4c06      	ldr	r4, [pc, #24]	; (8113778 <_isatty_r+0x1c>)
 8113760:	2300      	movs	r3, #0
 8113762:	4605      	mov	r5, r0
 8113764:	4608      	mov	r0, r1
 8113766:	6023      	str	r3, [r4, #0]
 8113768:	f7ee fbaf 	bl	8101eca <_isatty>
 811376c:	1c43      	adds	r3, r0, #1
 811376e:	d102      	bne.n	8113776 <_isatty_r+0x1a>
 8113770:	6823      	ldr	r3, [r4, #0]
 8113772:	b103      	cbz	r3, 8113776 <_isatty_r+0x1a>
 8113774:	602b      	str	r3, [r5, #0]
 8113776:	bd38      	pop	{r3, r4, r5, pc}
 8113778:	1000a36c 	.word	0x1000a36c

0811377c <_lseek_r>:
 811377c:	b538      	push	{r3, r4, r5, lr}
 811377e:	4c07      	ldr	r4, [pc, #28]	; (811379c <_lseek_r+0x20>)
 8113780:	4605      	mov	r5, r0
 8113782:	4608      	mov	r0, r1
 8113784:	4611      	mov	r1, r2
 8113786:	2200      	movs	r2, #0
 8113788:	6022      	str	r2, [r4, #0]
 811378a:	461a      	mov	r2, r3
 811378c:	f7ee fba8 	bl	8101ee0 <_lseek>
 8113790:	1c43      	adds	r3, r0, #1
 8113792:	d102      	bne.n	811379a <_lseek_r+0x1e>
 8113794:	6823      	ldr	r3, [r4, #0]
 8113796:	b103      	cbz	r3, 811379a <_lseek_r+0x1e>
 8113798:	602b      	str	r3, [r5, #0]
 811379a:	bd38      	pop	{r3, r4, r5, pc}
 811379c:	1000a36c 	.word	0x1000a36c

081137a0 <memmove>:
 81137a0:	4288      	cmp	r0, r1
 81137a2:	b510      	push	{r4, lr}
 81137a4:	eb01 0302 	add.w	r3, r1, r2
 81137a8:	d807      	bhi.n	81137ba <memmove+0x1a>
 81137aa:	1e42      	subs	r2, r0, #1
 81137ac:	4299      	cmp	r1, r3
 81137ae:	d00a      	beq.n	81137c6 <memmove+0x26>
 81137b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 81137b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 81137b8:	e7f8      	b.n	81137ac <memmove+0xc>
 81137ba:	4283      	cmp	r3, r0
 81137bc:	d9f5      	bls.n	81137aa <memmove+0xa>
 81137be:	1881      	adds	r1, r0, r2
 81137c0:	1ad2      	subs	r2, r2, r3
 81137c2:	42d3      	cmn	r3, r2
 81137c4:	d100      	bne.n	81137c8 <memmove+0x28>
 81137c6:	bd10      	pop	{r4, pc}
 81137c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81137cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 81137d0:	e7f7      	b.n	81137c2 <memmove+0x22>

081137d2 <__malloc_lock>:
 81137d2:	4770      	bx	lr

081137d4 <__malloc_unlock>:
 81137d4:	4770      	bx	lr

081137d6 <_realloc_r>:
 81137d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81137d8:	4607      	mov	r7, r0
 81137da:	4614      	mov	r4, r2
 81137dc:	460e      	mov	r6, r1
 81137de:	b921      	cbnz	r1, 81137ea <_realloc_r+0x14>
 81137e0:	4611      	mov	r1, r2
 81137e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 81137e6:	f7ff bc39 	b.w	811305c <_malloc_r>
 81137ea:	b922      	cbnz	r2, 81137f6 <_realloc_r+0x20>
 81137ec:	f7ff fbe8 	bl	8112fc0 <_free_r>
 81137f0:	4625      	mov	r5, r4
 81137f2:	4628      	mov	r0, r5
 81137f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81137f6:	f000 f827 	bl	8113848 <_malloc_usable_size_r>
 81137fa:	42a0      	cmp	r0, r4
 81137fc:	d20f      	bcs.n	811381e <_realloc_r+0x48>
 81137fe:	4621      	mov	r1, r4
 8113800:	4638      	mov	r0, r7
 8113802:	f7ff fc2b 	bl	811305c <_malloc_r>
 8113806:	4605      	mov	r5, r0
 8113808:	2800      	cmp	r0, #0
 811380a:	d0f2      	beq.n	81137f2 <_realloc_r+0x1c>
 811380c:	4631      	mov	r1, r6
 811380e:	4622      	mov	r2, r4
 8113810:	f7fd f978 	bl	8110b04 <memcpy>
 8113814:	4631      	mov	r1, r6
 8113816:	4638      	mov	r0, r7
 8113818:	f7ff fbd2 	bl	8112fc0 <_free_r>
 811381c:	e7e9      	b.n	81137f2 <_realloc_r+0x1c>
 811381e:	4635      	mov	r5, r6
 8113820:	e7e7      	b.n	81137f2 <_realloc_r+0x1c>
	...

08113824 <_read_r>:
 8113824:	b538      	push	{r3, r4, r5, lr}
 8113826:	4c07      	ldr	r4, [pc, #28]	; (8113844 <_read_r+0x20>)
 8113828:	4605      	mov	r5, r0
 811382a:	4608      	mov	r0, r1
 811382c:	4611      	mov	r1, r2
 811382e:	2200      	movs	r2, #0
 8113830:	6022      	str	r2, [r4, #0]
 8113832:	461a      	mov	r2, r3
 8113834:	f7ee faf4 	bl	8101e20 <_read>
 8113838:	1c43      	adds	r3, r0, #1
 811383a:	d102      	bne.n	8113842 <_read_r+0x1e>
 811383c:	6823      	ldr	r3, [r4, #0]
 811383e:	b103      	cbz	r3, 8113842 <_read_r+0x1e>
 8113840:	602b      	str	r3, [r5, #0]
 8113842:	bd38      	pop	{r3, r4, r5, pc}
 8113844:	1000a36c 	.word	0x1000a36c

08113848 <_malloc_usable_size_r>:
 8113848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811384c:	1f18      	subs	r0, r3, #4
 811384e:	2b00      	cmp	r3, #0
 8113850:	bfbc      	itt	lt
 8113852:	580b      	ldrlt	r3, [r1, r0]
 8113854:	18c0      	addlt	r0, r0, r3
 8113856:	4770      	bx	lr

08113858 <_init>:
 8113858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811385a:	bf00      	nop
 811385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811385e:	bc08      	pop	{r3}
 8113860:	469e      	mov	lr, r3
 8113862:	4770      	bx	lr

08113864 <_fini>:
 8113864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8113866:	bf00      	nop
 8113868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811386a:	bc08      	pop	{r3}
 811386c:	469e      	mov	lr, r3
 811386e:	4770      	bx	lr
